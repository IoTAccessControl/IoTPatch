
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
   0:	2000a3e8 	.word	0x2000a3e8
   4:	00012111 	.word	0x00012111
   8:	0002158b 	.word	0x0002158b
   c:	00011f39 	.word	0x00011f39
  10:	00011f39 	.word	0x00011f39
  14:	00011f39 	.word	0x00011f39
  18:	00011f39 	.word	0x00011f39
  1c:	00011f39 	.word	0x00011f39
  20:	00011f39 	.word	0x00011f39
  24:	00011f39 	.word	0x00011f39
  28:	00011f39 	.word	0x00011f39
  2c:	000118c1 	.word	0x000118c1
  30:	00018f73 	.word	0x00018f73
  34:	00011f39 	.word	0x00011f39
  38:	00011869 	.word	0x00011869
  3c:	000212f9 	.word	0x000212f9

00000040 <_irq_vector_table>:
  40:	000120d1 000120d1 000120d1 000120d1     . ... ... ... ..
  50:	000120d1 000120d1 000120d1 000120d1     . ... ... ... ..
  60:	000120d1 000120d1 000120d1 000120d1     . ... ... ... ..
  70:	000120d1 000120d1 000120d1 000120d1     . ... ... ... ..
  80:	000120d1 000120d1 000120d1 000120d1     . ... ... ... ..
  90:	000120d1 000120d1 000120d1 000120d1     . ... ... ... ..
  a0:	000120d1 000120d1 000120d1 000120d1     . ... ... ... ..
  b0:	000120d1 000120d1 000120d1 000120d1     . ... ... ... ..
  c0:	000120d1 000120d1 000120d1 000120d1     . ... ... ... ..
  d0:	000120d1 000120d1 000120d1 000120d1     . ... ... ... ..
  e0:	000120d1 000120d1 000120d1 000120d1     . ... ... ... ..
  f0:	000120d1 000120d1 000120d1 000120d1     . ... ... ... ..

Disassembly of section _TEXT_SECTION_NAME_2:

00000100 <memchr>:
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_IDLE_STACK_SIZE+0x34>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_IDLE_STACK_SIZE+0x30>
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     12a:	f022 0407 	bic.w	r4, r2, #7
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
     142:	fa85 f547 	uadd8	r5, r5, r7
     146:	faa3 f587 	sel	r5, r3, r7
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
     152:	b98e      	cbnz	r6, 178 <CONFIG_IDLE_STACK_SIZE+0x38>
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
     160:	b132      	cbz	r2, 170 <CONFIG_IDLE_STACK_SIZE+0x30>
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
     16c:	b113      	cbz	r3, 174 <CONFIG_IDLE_STACK_SIZE+0x34>
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
     178:	2d00      	cmp	r5, #0
     17a:	bf06      	itte	eq
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
     186:	d107      	bne.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_frsub>:
     1a0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     1a4:	e002      	b.n	1ac <__addsf3>
     1a6:	bf00      	nop

000001a8 <__aeabi_fsub>:
     1a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000001ac <__addsf3>:
     1ac:	0042      	lsls	r2, r0, #1
     1ae:	bf1f      	itttt	ne
     1b0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     1b4:	ea92 0f03 	teqne	r2, r3
     1b8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     1bc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     1c0:	d06a      	beq.n	298 <CONFIG_CONSOLE_PUTCHAR_BUFSIZE+0x98>
     1c2:	ea4f 6212 	mov.w	r2, r2, lsr #24
     1c6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     1ca:	bfc1      	itttt	gt
     1cc:	18d2      	addgt	r2, r2, r3
     1ce:	4041      	eorgt	r1, r0
     1d0:	4048      	eorgt	r0, r1
     1d2:	4041      	eorgt	r1, r0
     1d4:	bfb8      	it	lt
     1d6:	425b      	neglt	r3, r3
     1d8:	2b19      	cmp	r3, #25
     1da:	bf88      	it	hi
     1dc:	4770      	bxhi	lr
     1de:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     1e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     1e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     1ea:	bf18      	it	ne
     1ec:	4240      	negne	r0, r0
     1ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     1f2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     1f6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     1fa:	bf18      	it	ne
     1fc:	4249      	negne	r1, r1
     1fe:	ea92 0f03 	teq	r2, r3
     202:	d03f      	beq.n	284 <CONFIG_CONSOLE_PUTCHAR_BUFSIZE+0x84>
     204:	f1a2 0201 	sub.w	r2, r2, #1
     208:	fa41 fc03 	asr.w	ip, r1, r3
     20c:	eb10 000c 	adds.w	r0, r0, ip
     210:	f1c3 0320 	rsb	r3, r3, #32
     214:	fa01 f103 	lsl.w	r1, r1, r3
     218:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     21c:	d502      	bpl.n	224 <CONFIG_CONSOLE_PUTCHAR_BUFSIZE+0x24>
     21e:	4249      	negs	r1, r1
     220:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     224:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     228:	d313      	bcc.n	252 <CONFIG_CONSOLE_PUTCHAR_BUFSIZE+0x52>
     22a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     22e:	d306      	bcc.n	23e <CONFIG_CONSOLE_PUTCHAR_BUFSIZE+0x3e>
     230:	0840      	lsrs	r0, r0, #1
     232:	ea4f 0131 	mov.w	r1, r1, rrx
     236:	f102 0201 	add.w	r2, r2, #1
     23a:	2afe      	cmp	r2, #254	; 0xfe
     23c:	d251      	bcs.n	2e2 <CONFIG_CONSOLE_PUTCHAR_BUFSIZE+0xe2>
     23e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     242:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     246:	bf08      	it	eq
     248:	f020 0001 	biceq.w	r0, r0, #1
     24c:	ea40 0003 	orr.w	r0, r0, r3
     250:	4770      	bx	lr
     252:	0049      	lsls	r1, r1, #1
     254:	eb40 0000 	adc.w	r0, r0, r0
     258:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
     25c:	f1a2 0201 	sub.w	r2, r2, #1
     260:	d1ed      	bne.n	23e <CONFIG_CONSOLE_PUTCHAR_BUFSIZE+0x3e>
     262:	fab0 fc80 	clz	ip, r0
     266:	f1ac 0c08 	sub.w	ip, ip, #8
     26a:	ebb2 020c 	subs.w	r2, r2, ip
     26e:	fa00 f00c 	lsl.w	r0, r0, ip
     272:	bfaa      	itet	ge
     274:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     278:	4252      	neglt	r2, r2
     27a:	4318      	orrge	r0, r3
     27c:	bfbc      	itt	lt
     27e:	40d0      	lsrlt	r0, r2
     280:	4318      	orrlt	r0, r3
     282:	4770      	bx	lr
     284:	f092 0f00 	teq	r2, #0
     288:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     28c:	bf06      	itte	eq
     28e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     292:	3201      	addeq	r2, #1
     294:	3b01      	subne	r3, #1
     296:	e7b5      	b.n	204 <CONFIG_CONSOLE_PUTCHAR_BUFSIZE+0x4>
     298:	ea4f 0341 	mov.w	r3, r1, lsl #1
     29c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     2a0:	bf18      	it	ne
     2a2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     2a6:	d021      	beq.n	2ec <CONFIG_CONSOLE_PUTCHAR_BUFSIZE+0xec>
     2a8:	ea92 0f03 	teq	r2, r3
     2ac:	d004      	beq.n	2b8 <CONFIG_CONSOLE_PUTCHAR_BUFSIZE+0xb8>
     2ae:	f092 0f00 	teq	r2, #0
     2b2:	bf08      	it	eq
     2b4:	4608      	moveq	r0, r1
     2b6:	4770      	bx	lr
     2b8:	ea90 0f01 	teq	r0, r1
     2bc:	bf1c      	itt	ne
     2be:	2000      	movne	r0, #0
     2c0:	4770      	bxne	lr
     2c2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     2c6:	d104      	bne.n	2d2 <CONFIG_CONSOLE_PUTCHAR_BUFSIZE+0xd2>
     2c8:	0040      	lsls	r0, r0, #1
     2ca:	bf28      	it	cs
     2cc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     2d0:	4770      	bx	lr
     2d2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     2d6:	bf3c      	itt	cc
     2d8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     2dc:	4770      	bxcc	lr
     2de:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     2e2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     2e6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     2ea:	4770      	bx	lr
     2ec:	ea7f 6222 	mvns.w	r2, r2, asr #24
     2f0:	bf16      	itet	ne
     2f2:	4608      	movne	r0, r1
     2f4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     2f8:	4601      	movne	r1, r0
     2fa:	0242      	lsls	r2, r0, #9
     2fc:	bf06      	itte	eq
     2fe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     302:	ea90 0f01 	teqeq	r0, r1
     306:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     30a:	4770      	bx	lr

0000030c <__aeabi_ui2f>:
     30c:	f04f 0300 	mov.w	r3, #0
     310:	e004      	b.n	31c <__aeabi_i2f+0x8>
     312:	bf00      	nop

00000314 <__aeabi_i2f>:
     314:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     318:	bf48      	it	mi
     31a:	4240      	negmi	r0, r0
     31c:	ea5f 0c00 	movs.w	ip, r0
     320:	bf08      	it	eq
     322:	4770      	bxeq	lr
     324:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     328:	4601      	mov	r1, r0
     32a:	f04f 0000 	mov.w	r0, #0
     32e:	e01c      	b.n	36a <__aeabi_l2f+0x2a>

00000330 <__aeabi_ul2f>:
     330:	ea50 0201 	orrs.w	r2, r0, r1
     334:	bf08      	it	eq
     336:	4770      	bxeq	lr
     338:	f04f 0300 	mov.w	r3, #0
     33c:	e00a      	b.n	354 <__aeabi_l2f+0x14>
     33e:	bf00      	nop

00000340 <__aeabi_l2f>:
     340:	ea50 0201 	orrs.w	r2, r0, r1
     344:	bf08      	it	eq
     346:	4770      	bxeq	lr
     348:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     34c:	d502      	bpl.n	354 <__aeabi_l2f+0x14>
     34e:	4240      	negs	r0, r0
     350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     354:	ea5f 0c01 	movs.w	ip, r1
     358:	bf02      	ittt	eq
     35a:	4684      	moveq	ip, r0
     35c:	4601      	moveq	r1, r0
     35e:	2000      	moveq	r0, #0
     360:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     364:	bf08      	it	eq
     366:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     36a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     36e:	fabc f28c 	clz	r2, ip
     372:	3a08      	subs	r2, #8
     374:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     378:	db10      	blt.n	39c <__aeabi_l2f+0x5c>
     37a:	fa01 fc02 	lsl.w	ip, r1, r2
     37e:	4463      	add	r3, ip
     380:	fa00 fc02 	lsl.w	ip, r0, r2
     384:	f1c2 0220 	rsb	r2, r2, #32
     388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     38c:	fa20 f202 	lsr.w	r2, r0, r2
     390:	eb43 0002 	adc.w	r0, r3, r2
     394:	bf08      	it	eq
     396:	f020 0001 	biceq.w	r0, r0, #1
     39a:	4770      	bx	lr
     39c:	f102 0220 	add.w	r2, r2, #32
     3a0:	fa01 fc02 	lsl.w	ip, r1, r2
     3a4:	f1c2 0220 	rsb	r2, r2, #32
     3a8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     3ac:	fa21 f202 	lsr.w	r2, r1, r2
     3b0:	eb43 0002 	adc.w	r0, r3, r2
     3b4:	bf08      	it	eq
     3b6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     3ba:	4770      	bx	lr

000003bc <__aeabi_fmul>:
     3bc:	f04f 0cff 	mov.w	ip, #255	; 0xff
     3c0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     3c4:	bf1e      	ittt	ne
     3c6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     3ca:	ea92 0f0c 	teqne	r2, ip
     3ce:	ea93 0f0c 	teqne	r3, ip
     3d2:	d06f      	beq.n	4b4 <CONFIG_NET_TX_STACK_SIZE+0x4>
     3d4:	441a      	add	r2, r3
     3d6:	ea80 0c01 	eor.w	ip, r0, r1
     3da:	0240      	lsls	r0, r0, #9
     3dc:	bf18      	it	ne
     3de:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     3e2:	d01e      	beq.n	422 <CONFIG_FLASH_SIZE+0x22>
     3e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     3e8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     3ec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     3f0:	fba0 3101 	umull	r3, r1, r0, r1
     3f4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     3f8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     3fc:	bf3e      	ittt	cc
     3fe:	0049      	lslcc	r1, r1, #1
     400:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     404:	005b      	lslcc	r3, r3, #1
     406:	ea40 0001 	orr.w	r0, r0, r1
     40a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     40e:	2afd      	cmp	r2, #253	; 0xfd
     410:	d81d      	bhi.n	44e <CONFIG_FLASH_SIZE+0x4e>
     412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     416:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     41a:	bf08      	it	eq
     41c:	f020 0001 	biceq.w	r0, r0, #1
     420:	4770      	bx	lr
     422:	f090 0f00 	teq	r0, #0
     426:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     42a:	bf08      	it	eq
     42c:	0249      	lsleq	r1, r1, #9
     42e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     432:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     436:	3a7f      	subs	r2, #127	; 0x7f
     438:	bfc2      	ittt	gt
     43a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     43e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     442:	4770      	bxgt	lr
     444:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     448:	f04f 0300 	mov.w	r3, #0
     44c:	3a01      	subs	r2, #1
     44e:	dc5d      	bgt.n	50c <CONFIG_NET_TX_STACK_SIZE+0x5c>
     450:	f112 0f19 	cmn.w	r2, #25
     454:	bfdc      	itt	le
     456:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     45a:	4770      	bxle	lr
     45c:	f1c2 0200 	rsb	r2, r2, #0
     460:	0041      	lsls	r1, r0, #1
     462:	fa21 f102 	lsr.w	r1, r1, r2
     466:	f1c2 0220 	rsb	r2, r2, #32
     46a:	fa00 fc02 	lsl.w	ip, r0, r2
     46e:	ea5f 0031 	movs.w	r0, r1, rrx
     472:	f140 0000 	adc.w	r0, r0, #0
     476:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     47a:	bf08      	it	eq
     47c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     480:	4770      	bx	lr
     482:	f092 0f00 	teq	r2, #0
     486:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     48a:	bf02      	ittt	eq
     48c:	0040      	lsleq	r0, r0, #1
     48e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     492:	3a01      	subeq	r2, #1
     494:	d0f9      	beq.n	48a <CONFIG_FLASH_SIZE+0x8a>
     496:	ea40 000c 	orr.w	r0, r0, ip
     49a:	f093 0f00 	teq	r3, #0
     49e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     4a2:	bf02      	ittt	eq
     4a4:	0049      	lsleq	r1, r1, #1
     4a6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     4aa:	3b01      	subeq	r3, #1
     4ac:	d0f9      	beq.n	4a2 <CONFIG_FLASH_SIZE+0xa2>
     4ae:	ea41 010c 	orr.w	r1, r1, ip
     4b2:	e78f      	b.n	3d4 <__aeabi_fmul+0x18>
     4b4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     4b8:	ea92 0f0c 	teq	r2, ip
     4bc:	bf18      	it	ne
     4be:	ea93 0f0c 	teqne	r3, ip
     4c2:	d00a      	beq.n	4da <CONFIG_NET_TX_STACK_SIZE+0x2a>
     4c4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     4c8:	bf18      	it	ne
     4ca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     4ce:	d1d8      	bne.n	482 <CONFIG_FLASH_SIZE+0x82>
     4d0:	ea80 0001 	eor.w	r0, r0, r1
     4d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     4d8:	4770      	bx	lr
     4da:	f090 0f00 	teq	r0, #0
     4de:	bf17      	itett	ne
     4e0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     4e4:	4608      	moveq	r0, r1
     4e6:	f091 0f00 	teqne	r1, #0
     4ea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     4ee:	d014      	beq.n	51a <CONFIG_NET_TX_STACK_SIZE+0x6a>
     4f0:	ea92 0f0c 	teq	r2, ip
     4f4:	d101      	bne.n	4fa <CONFIG_NET_TX_STACK_SIZE+0x4a>
     4f6:	0242      	lsls	r2, r0, #9
     4f8:	d10f      	bne.n	51a <CONFIG_NET_TX_STACK_SIZE+0x6a>
     4fa:	ea93 0f0c 	teq	r3, ip
     4fe:	d103      	bne.n	508 <CONFIG_NET_TX_STACK_SIZE+0x58>
     500:	024b      	lsls	r3, r1, #9
     502:	bf18      	it	ne
     504:	4608      	movne	r0, r1
     506:	d108      	bne.n	51a <CONFIG_NET_TX_STACK_SIZE+0x6a>
     508:	ea80 0001 	eor.w	r0, r0, r1
     50c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     510:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     514:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     518:	4770      	bx	lr
     51a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     51e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     522:	4770      	bx	lr

00000524 <__aeabi_fdiv>:
     524:	f04f 0cff 	mov.w	ip, #255	; 0xff
     528:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     52c:	bf1e      	ittt	ne
     52e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     532:	ea92 0f0c 	teqne	r2, ip
     536:	ea93 0f0c 	teqne	r3, ip
     53a:	d069      	beq.n	610 <CONFIG_NET_RX_STACK_SIZE+0x34>
     53c:	eba2 0203 	sub.w	r2, r2, r3
     540:	ea80 0c01 	eor.w	ip, r0, r1
     544:	0249      	lsls	r1, r1, #9
     546:	ea4f 2040 	mov.w	r0, r0, lsl #9
     54a:	d037      	beq.n	5bc <__aeabi_fdiv+0x98>
     54c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     550:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     554:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     558:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     55c:	428b      	cmp	r3, r1
     55e:	bf38      	it	cc
     560:	005b      	lslcc	r3, r3, #1
     562:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     566:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     56a:	428b      	cmp	r3, r1
     56c:	bf24      	itt	cs
     56e:	1a5b      	subcs	r3, r3, r1
     570:	ea40 000c 	orrcs.w	r0, r0, ip
     574:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     578:	bf24      	itt	cs
     57a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     57e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     582:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     586:	bf24      	itt	cs
     588:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     58c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     590:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     594:	bf24      	itt	cs
     596:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     59a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     59e:	011b      	lsls	r3, r3, #4
     5a0:	bf18      	it	ne
     5a2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     5a6:	d1e0      	bne.n	56a <__aeabi_fdiv+0x46>
     5a8:	2afd      	cmp	r2, #253	; 0xfd
     5aa:	f63f af50 	bhi.w	44e <CONFIG_FLASH_SIZE+0x4e>
     5ae:	428b      	cmp	r3, r1
     5b0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     5b4:	bf08      	it	eq
     5b6:	f020 0001 	biceq.w	r0, r0, #1
     5ba:	4770      	bx	lr
     5bc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     5c0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     5c4:	327f      	adds	r2, #127	; 0x7f
     5c6:	bfc2      	ittt	gt
     5c8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     5cc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     5d0:	4770      	bxgt	lr
     5d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     5d6:	f04f 0300 	mov.w	r3, #0
     5da:	3a01      	subs	r2, #1
     5dc:	e737      	b.n	44e <CONFIG_FLASH_SIZE+0x4e>
     5de:	f092 0f00 	teq	r2, #0
     5e2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     5e6:	bf02      	ittt	eq
     5e8:	0040      	lsleq	r0, r0, #1
     5ea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     5ee:	3a01      	subeq	r2, #1
     5f0:	d0f9      	beq.n	5e6 <CONFIG_NET_RX_STACK_SIZE+0xa>
     5f2:	ea40 000c 	orr.w	r0, r0, ip
     5f6:	f093 0f00 	teq	r3, #0
     5fa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     5fe:	bf02      	ittt	eq
     600:	0049      	lsleq	r1, r1, #1
     602:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     606:	3b01      	subeq	r3, #1
     608:	d0f9      	beq.n	5fe <CONFIG_NET_RX_STACK_SIZE+0x22>
     60a:	ea41 010c 	orr.w	r1, r1, ip
     60e:	e795      	b.n	53c <__aeabi_fdiv+0x18>
     610:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     614:	ea92 0f0c 	teq	r2, ip
     618:	d108      	bne.n	62c <CONFIG_NET_RX_STACK_SIZE+0x50>
     61a:	0242      	lsls	r2, r0, #9
     61c:	f47f af7d 	bne.w	51a <CONFIG_NET_TX_STACK_SIZE+0x6a>
     620:	ea93 0f0c 	teq	r3, ip
     624:	f47f af70 	bne.w	508 <CONFIG_NET_TX_STACK_SIZE+0x58>
     628:	4608      	mov	r0, r1
     62a:	e776      	b.n	51a <CONFIG_NET_TX_STACK_SIZE+0x6a>
     62c:	ea93 0f0c 	teq	r3, ip
     630:	d104      	bne.n	63c <CONFIG_NET_RX_STACK_SIZE+0x60>
     632:	024b      	lsls	r3, r1, #9
     634:	f43f af4c 	beq.w	4d0 <CONFIG_NET_TX_STACK_SIZE+0x20>
     638:	4608      	mov	r0, r1
     63a:	e76e      	b.n	51a <CONFIG_NET_TX_STACK_SIZE+0x6a>
     63c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     640:	bf18      	it	ne
     642:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     646:	d1ca      	bne.n	5de <CONFIG_NET_RX_STACK_SIZE+0x2>
     648:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     64c:	f47f af5c 	bne.w	508 <CONFIG_NET_TX_STACK_SIZE+0x58>
     650:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     654:	f47f af3c 	bne.w	4d0 <CONFIG_NET_TX_STACK_SIZE+0x20>
     658:	e75f      	b.n	51a <CONFIG_NET_TX_STACK_SIZE+0x6a>
     65a:	bf00      	nop

0000065c <__aeabi_f2iz>:
     65c:	ea4f 0240 	mov.w	r2, r0, lsl #1
     660:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     664:	d30f      	bcc.n	686 <__aeabi_f2iz+0x2a>
     666:	f04f 039e 	mov.w	r3, #158	; 0x9e
     66a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     66e:	d90d      	bls.n	68c <__aeabi_f2iz+0x30>
     670:	ea4f 2300 	mov.w	r3, r0, lsl #8
     674:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     678:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     67c:	fa23 f002 	lsr.w	r0, r3, r2
     680:	bf18      	it	ne
     682:	4240      	negne	r0, r0
     684:	4770      	bx	lr
     686:	f04f 0000 	mov.w	r0, #0
     68a:	4770      	bx	lr
     68c:	f112 0f61 	cmn.w	r2, #97	; 0x61
     690:	d101      	bne.n	696 <__aeabi_f2iz+0x3a>
     692:	0242      	lsls	r2, r0, #9
     694:	d105      	bne.n	6a2 <__aeabi_f2iz+0x46>
     696:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
     69a:	bf08      	it	eq
     69c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     6a0:	4770      	bx	lr
     6a2:	f04f 0000 	mov.w	r0, #0
     6a6:	4770      	bx	lr

000006a8 <__aeabi_ldivmod>:
     6a8:	b97b      	cbnz	r3, 6ca <__aeabi_ldivmod+0x22>
     6aa:	b972      	cbnz	r2, 6ca <__aeabi_ldivmod+0x22>
     6ac:	2900      	cmp	r1, #0
     6ae:	bfbe      	ittt	lt
     6b0:	2000      	movlt	r0, #0
     6b2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     6b6:	e006      	blt.n	6c6 <__aeabi_ldivmod+0x1e>
     6b8:	bf08      	it	eq
     6ba:	2800      	cmpeq	r0, #0
     6bc:	bf1c      	itt	ne
     6be:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     6c2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     6c6:	f000 b857 	b.w	778 <__aeabi_idiv0>
     6ca:	f1ad 0c08 	sub.w	ip, sp, #8
     6ce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     6d2:	2900      	cmp	r1, #0
     6d4:	db09      	blt.n	6ea <__aeabi_ldivmod+0x42>
     6d6:	2b00      	cmp	r3, #0
     6d8:	db1a      	blt.n	710 <__aeabi_ldivmod+0x68>
     6da:	f001 fb5d 	bl	1d98 <__udivmoddi4>
     6de:	f8dd e004 	ldr.w	lr, [sp, #4]
     6e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     6e6:	b004      	add	sp, #16
     6e8:	4770      	bx	lr
     6ea:	4240      	negs	r0, r0
     6ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     6f0:	2b00      	cmp	r3, #0
     6f2:	db1b      	blt.n	72c <__aeabi_ldivmod+0x84>
     6f4:	f001 fb50 	bl	1d98 <__udivmoddi4>
     6f8:	f8dd e004 	ldr.w	lr, [sp, #4]
     6fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     700:	b004      	add	sp, #16
     702:	4240      	negs	r0, r0
     704:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     708:	4252      	negs	r2, r2
     70a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     70e:	4770      	bx	lr
     710:	4252      	negs	r2, r2
     712:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     716:	f001 fb3f 	bl	1d98 <__udivmoddi4>
     71a:	f8dd e004 	ldr.w	lr, [sp, #4]
     71e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     722:	b004      	add	sp, #16
     724:	4240      	negs	r0, r0
     726:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     72a:	4770      	bx	lr
     72c:	4252      	negs	r2, r2
     72e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     732:	f001 fb31 	bl	1d98 <__udivmoddi4>
     736:	f8dd e004 	ldr.w	lr, [sp, #4]
     73a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     73e:	b004      	add	sp, #16
     740:	4252      	negs	r2, r2
     742:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     746:	4770      	bx	lr

00000748 <__aeabi_uldivmod>:
     748:	b953      	cbnz	r3, 760 <__aeabi_uldivmod+0x18>
     74a:	b94a      	cbnz	r2, 760 <__aeabi_uldivmod+0x18>
     74c:	2900      	cmp	r1, #0
     74e:	bf08      	it	eq
     750:	2800      	cmpeq	r0, #0
     752:	bf1c      	itt	ne
     754:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     758:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     75c:	f000 b80c 	b.w	778 <__aeabi_idiv0>
     760:	f1ad 0c08 	sub.w	ip, sp, #8
     764:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     768:	f001 fb16 	bl	1d98 <__udivmoddi4>
     76c:	f8dd e004 	ldr.w	lr, [sp, #4]
     770:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     774:	b004      	add	sp, #16
     776:	4770      	bx	lr

00000778 <__aeabi_idiv0>:
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <__assert_func>:
     77c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     77e:	461c      	mov	r4, r3
     780:	4b09      	ldr	r3, [pc, #36]	; (7a8 <__assert_func+0x2c>)
     782:	681b      	ldr	r3, [r3, #0]
     784:	4605      	mov	r5, r0
     786:	68d8      	ldr	r0, [r3, #12]
     788:	b152      	cbz	r2, 7a0 <__assert_func+0x24>
     78a:	4b08      	ldr	r3, [pc, #32]	; (7ac <__assert_func+0x30>)
     78c:	9100      	str	r1, [sp, #0]
     78e:	e9cd 3201 	strd	r3, r2, [sp, #4]
     792:	4907      	ldr	r1, [pc, #28]	; (7b0 <__assert_func+0x34>)
     794:	462b      	mov	r3, r5
     796:	4622      	mov	r2, r4
     798:	f000 f821 	bl	7de <fiprintf>
     79c:	f001 fcd9 	bl	2152 <abort>
     7a0:	4b04      	ldr	r3, [pc, #16]	; (7b4 <__assert_func+0x38>)
     7a2:	461a      	mov	r2, r3
     7a4:	e7f2      	b.n	78c <__assert_func+0x10>
     7a6:	bf00      	nop
     7a8:	2000e758 	.word	0x2000e758
     7ac:	0002f05d 	.word	0x0002f05d
     7b0:	0002f06a 	.word	0x0002f06a
     7b4:	0002f098 	.word	0x0002f098

000007b8 <__assert>:
     7b8:	b508      	push	{r3, lr}
     7ba:	4613      	mov	r3, r2
     7bc:	2200      	movs	r2, #0
     7be:	f7ff ffdd 	bl	77c <__assert_func>
     7c2:	bf00      	nop

000007c4 <_fiprintf_r>:
     7c4:	b40c      	push	{r2, r3}
     7c6:	b507      	push	{r0, r1, r2, lr}
     7c8:	ab04      	add	r3, sp, #16
     7ca:	f853 2b04 	ldr.w	r2, [r3], #4
     7ce:	9301      	str	r3, [sp, #4]
     7d0:	f000 f8a2 	bl	918 <_vfiprintf_r>
     7d4:	b003      	add	sp, #12
     7d6:	f85d eb04 	ldr.w	lr, [sp], #4
     7da:	b002      	add	sp, #8
     7dc:	4770      	bx	lr

000007de <fiprintf>:
     7de:	b40e      	push	{r1, r2, r3}
     7e0:	b503      	push	{r0, r1, lr}
     7e2:	4601      	mov	r1, r0
     7e4:	ab03      	add	r3, sp, #12
     7e6:	4806      	ldr	r0, [pc, #24]	; (800 <fiprintf+0x22>)
     7e8:	f853 2b04 	ldr.w	r2, [r3], #4
     7ec:	6800      	ldr	r0, [r0, #0]
     7ee:	9301      	str	r3, [sp, #4]
     7f0:	f000 f892 	bl	918 <_vfiprintf_r>
     7f4:	b002      	add	sp, #8
     7f6:	f85d eb04 	ldr.w	lr, [sp], #4
     7fa:	b003      	add	sp, #12
     7fc:	4770      	bx	lr
     7fe:	bf00      	nop
     800:	2000e758 	.word	0x2000e758

00000804 <_malloc_r>:
     804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     806:	1cce      	adds	r6, r1, #3
     808:	f026 0603 	bic.w	r6, r6, #3
     80c:	3608      	adds	r6, #8
     80e:	2e0c      	cmp	r6, #12
     810:	bf38      	it	cc
     812:	260c      	movcc	r6, #12
     814:	2e00      	cmp	r6, #0
     816:	4607      	mov	r7, r0
     818:	db01      	blt.n	81e <_malloc_r+0x1a>
     81a:	42b1      	cmp	r1, r6
     81c:	d903      	bls.n	826 <_malloc_r+0x22>
     81e:	230c      	movs	r3, #12
     820:	603b      	str	r3, [r7, #0]
     822:	2000      	movs	r0, #0
     824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     826:	4d21      	ldr	r5, [pc, #132]	; (8ac <_malloc_r+0xa8>)
     828:	f001 fcd4 	bl	21d4 <__malloc_lock>
     82c:	682a      	ldr	r2, [r5, #0]
     82e:	4614      	mov	r4, r2
     830:	b994      	cbnz	r4, 858 <_malloc_r+0x54>
     832:	686b      	ldr	r3, [r5, #4]
     834:	b923      	cbnz	r3, 840 <_malloc_r+0x3c>
     836:	4621      	mov	r1, r4
     838:	4638      	mov	r0, r7
     83a:	f000 faf9 	bl	e30 <_sbrk_r>
     83e:	6068      	str	r0, [r5, #4]
     840:	4631      	mov	r1, r6
     842:	4638      	mov	r0, r7
     844:	f000 faf4 	bl	e30 <_sbrk_r>
     848:	1c43      	adds	r3, r0, #1
     84a:	d123      	bne.n	894 <_malloc_r+0x90>
     84c:	230c      	movs	r3, #12
     84e:	603b      	str	r3, [r7, #0]
     850:	4638      	mov	r0, r7
     852:	f001 fcc0 	bl	21d6 <__malloc_unlock>
     856:	e7e4      	b.n	822 <_malloc_r+0x1e>
     858:	6823      	ldr	r3, [r4, #0]
     85a:	1b9b      	subs	r3, r3, r6
     85c:	d417      	bmi.n	88e <_malloc_r+0x8a>
     85e:	2b0b      	cmp	r3, #11
     860:	d903      	bls.n	86a <_malloc_r+0x66>
     862:	6023      	str	r3, [r4, #0]
     864:	441c      	add	r4, r3
     866:	6026      	str	r6, [r4, #0]
     868:	e004      	b.n	874 <_malloc_r+0x70>
     86a:	6863      	ldr	r3, [r4, #4]
     86c:	42a2      	cmp	r2, r4
     86e:	bf0c      	ite	eq
     870:	602b      	streq	r3, [r5, #0]
     872:	6053      	strne	r3, [r2, #4]
     874:	4638      	mov	r0, r7
     876:	f001 fcae 	bl	21d6 <__malloc_unlock>
     87a:	f104 000b 	add.w	r0, r4, #11
     87e:	1d23      	adds	r3, r4, #4
     880:	f020 0007 	bic.w	r0, r0, #7
     884:	1ac2      	subs	r2, r0, r3
     886:	d0cd      	beq.n	824 <_malloc_r+0x20>
     888:	1a1b      	subs	r3, r3, r0
     88a:	50a3      	str	r3, [r4, r2]
     88c:	e7ca      	b.n	824 <_malloc_r+0x20>
     88e:	4622      	mov	r2, r4
     890:	6864      	ldr	r4, [r4, #4]
     892:	e7cd      	b.n	830 <_malloc_r+0x2c>
     894:	1cc4      	adds	r4, r0, #3
     896:	f024 0403 	bic.w	r4, r4, #3
     89a:	42a0      	cmp	r0, r4
     89c:	d0e3      	beq.n	866 <_malloc_r+0x62>
     89e:	1a21      	subs	r1, r4, r0
     8a0:	4638      	mov	r0, r7
     8a2:	f000 fac5 	bl	e30 <_sbrk_r>
     8a6:	3001      	adds	r0, #1
     8a8:	d1dd      	bne.n	866 <_malloc_r+0x62>
     8aa:	e7cf      	b.n	84c <_malloc_r+0x48>
     8ac:	20002000 	.word	0x20002000

000008b0 <__sfputc_r>:
     8b0:	6893      	ldr	r3, [r2, #8]
     8b2:	3b01      	subs	r3, #1
     8b4:	2b00      	cmp	r3, #0
     8b6:	b410      	push	{r4}
     8b8:	6093      	str	r3, [r2, #8]
     8ba:	da07      	bge.n	8cc <__sfputc_r+0x1c>
     8bc:	6994      	ldr	r4, [r2, #24]
     8be:	42a3      	cmp	r3, r4
     8c0:	db01      	blt.n	8c6 <__sfputc_r+0x16>
     8c2:	290a      	cmp	r1, #10
     8c4:	d102      	bne.n	8cc <__sfputc_r+0x1c>
     8c6:	bc10      	pop	{r4}
     8c8:	f000 bb86 	b.w	fd8 <__swbuf_r>
     8cc:	6813      	ldr	r3, [r2, #0]
     8ce:	1c58      	adds	r0, r3, #1
     8d0:	6010      	str	r0, [r2, #0]
     8d2:	7019      	strb	r1, [r3, #0]
     8d4:	4608      	mov	r0, r1
     8d6:	bc10      	pop	{r4}
     8d8:	4770      	bx	lr

000008da <__sfputs_r>:
     8da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8dc:	4606      	mov	r6, r0
     8de:	460f      	mov	r7, r1
     8e0:	4614      	mov	r4, r2
     8e2:	18d5      	adds	r5, r2, r3
     8e4:	42ac      	cmp	r4, r5
     8e6:	d101      	bne.n	8ec <__sfputs_r+0x12>
     8e8:	2000      	movs	r0, #0
     8ea:	e007      	b.n	8fc <__sfputs_r+0x22>
     8ec:	463a      	mov	r2, r7
     8ee:	f814 1b01 	ldrb.w	r1, [r4], #1
     8f2:	4630      	mov	r0, r6
     8f4:	f7ff ffdc 	bl	8b0 <__sfputc_r>
     8f8:	1c43      	adds	r3, r0, #1
     8fa:	d1f3      	bne.n	8e4 <__sfputs_r+0xa>
     8fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000008fe <__sprint_r>:
     8fe:	b538      	push	{r3, r4, r5, lr}
     900:	6893      	ldr	r3, [r2, #8]
     902:	4614      	mov	r4, r2
     904:	2500      	movs	r5, #0
     906:	b913      	cbnz	r3, 90e <__sprint_r+0x10>
     908:	6053      	str	r3, [r2, #4]
     90a:	4618      	mov	r0, r3
     90c:	bd38      	pop	{r3, r4, r5, pc}
     90e:	f000 fd57 	bl	13c0 <__sfvwrite_r>
     912:	e9c4 5501 	strd	r5, r5, [r4, #4]
     916:	e7f9      	b.n	90c <__sprint_r+0xe>

00000918 <_vfiprintf_r>:
     918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     91c:	460e      	mov	r6, r1
     91e:	b09d      	sub	sp, #116	; 0x74
     920:	4614      	mov	r4, r2
     922:	461d      	mov	r5, r3
     924:	4607      	mov	r7, r0
     926:	b118      	cbz	r0, 930 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x7>
     928:	6b83      	ldr	r3, [r0, #56]	; 0x38
     92a:	b90b      	cbnz	r3, 930 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x7>
     92c:	f000 fcea 	bl	1304 <__sinit>
     930:	89b3      	ldrh	r3, [r6, #12]
     932:	0718      	lsls	r0, r3, #28
     934:	d556      	bpl.n	9e4 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0xbb>
     936:	6933      	ldr	r3, [r6, #16]
     938:	2b00      	cmp	r3, #0
     93a:	d053      	beq.n	9e4 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0xbb>
     93c:	2300      	movs	r3, #0
     93e:	9309      	str	r3, [sp, #36]	; 0x24
     940:	2320      	movs	r3, #32
     942:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
     946:	f8df 91ac 	ldr.w	r9, [pc, #428]	; af4 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x1cb>
     94a:	9503      	str	r5, [sp, #12]
     94c:	2330      	movs	r3, #48	; 0x30
     94e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
     952:	f04f 0a01 	mov.w	sl, #1
     956:	4623      	mov	r3, r4
     958:	461d      	mov	r5, r3
     95a:	f813 2b01 	ldrb.w	r2, [r3], #1
     95e:	b10a      	cbz	r2, 964 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x3b>
     960:	2a25      	cmp	r2, #37	; 0x25
     962:	d1f9      	bne.n	958 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x2f>
     964:	ebb5 0b04 	subs.w	fp, r5, r4
     968:	d00b      	beq.n	982 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x59>
     96a:	465b      	mov	r3, fp
     96c:	4622      	mov	r2, r4
     96e:	4631      	mov	r1, r6
     970:	4638      	mov	r0, r7
     972:	f7ff ffb2 	bl	8da <__sfputs_r>
     976:	3001      	adds	r0, #1
     978:	f000 80ae 	beq.w	ad8 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x1af>
     97c:	9b09      	ldr	r3, [sp, #36]	; 0x24
     97e:	445b      	add	r3, fp
     980:	9309      	str	r3, [sp, #36]	; 0x24
     982:	782b      	ldrb	r3, [r5, #0]
     984:	2b00      	cmp	r3, #0
     986:	f000 80a7 	beq.w	ad8 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x1af>
     98a:	2300      	movs	r3, #0
     98c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     990:	e9cd 2305 	strd	r2, r3, [sp, #20]
     994:	3501      	adds	r5, #1
     996:	9304      	str	r3, [sp, #16]
     998:	9307      	str	r3, [sp, #28]
     99a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
     99e:	931a      	str	r3, [sp, #104]	; 0x68
     9a0:	462c      	mov	r4, r5
     9a2:	2205      	movs	r2, #5
     9a4:	f814 1b01 	ldrb.w	r1, [r4], #1
     9a8:	4852      	ldr	r0, [pc, #328]	; (af4 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x1cb>)
     9aa:	f7ff fba9 	bl	100 <memchr>
     9ae:	9b04      	ldr	r3, [sp, #16]
     9b0:	bb18      	cbnz	r0, 9fa <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0xd1>
     9b2:	06d9      	lsls	r1, r3, #27
     9b4:	bf44      	itt	mi
     9b6:	2220      	movmi	r2, #32
     9b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
     9bc:	071a      	lsls	r2, r3, #28
     9be:	bf44      	itt	mi
     9c0:	222b      	movmi	r2, #43	; 0x2b
     9c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
     9c6:	782a      	ldrb	r2, [r5, #0]
     9c8:	2a2a      	cmp	r2, #42	; 0x2a
     9ca:	d01e      	beq.n	a0a <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0xe1>
     9cc:	9a07      	ldr	r2, [sp, #28]
     9ce:	462c      	mov	r4, r5
     9d0:	2000      	movs	r0, #0
     9d2:	250a      	movs	r5, #10
     9d4:	4621      	mov	r1, r4
     9d6:	f811 3b01 	ldrb.w	r3, [r1], #1
     9da:	3b30      	subs	r3, #48	; 0x30
     9dc:	2b09      	cmp	r3, #9
     9de:	d956      	bls.n	a8e <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x165>
     9e0:	b9c8      	cbnz	r0, a16 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0xed>
     9e2:	e01f      	b.n	a24 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0xfb>
     9e4:	4631      	mov	r1, r6
     9e6:	4638      	mov	r0, r7
     9e8:	f000 fb3c 	bl	1064 <__swsetup_r>
     9ec:	2800      	cmp	r0, #0
     9ee:	d0a5      	beq.n	93c <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x13>
     9f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     9f4:	b01d      	add	sp, #116	; 0x74
     9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     9fa:	eba0 0009 	sub.w	r0, r0, r9
     9fe:	fa0a f000 	lsl.w	r0, sl, r0
     a02:	4318      	orrs	r0, r3
     a04:	9004      	str	r0, [sp, #16]
     a06:	4625      	mov	r5, r4
     a08:	e7ca      	b.n	9a0 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x77>
     a0a:	9a03      	ldr	r2, [sp, #12]
     a0c:	1d11      	adds	r1, r2, #4
     a0e:	6812      	ldr	r2, [r2, #0]
     a10:	9103      	str	r1, [sp, #12]
     a12:	2a00      	cmp	r2, #0
     a14:	db01      	blt.n	a1a <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0xf1>
     a16:	9207      	str	r2, [sp, #28]
     a18:	e004      	b.n	a24 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0xfb>
     a1a:	4252      	negs	r2, r2
     a1c:	f043 0302 	orr.w	r3, r3, #2
     a20:	9207      	str	r2, [sp, #28]
     a22:	9304      	str	r3, [sp, #16]
     a24:	7823      	ldrb	r3, [r4, #0]
     a26:	2b2e      	cmp	r3, #46	; 0x2e
     a28:	d10c      	bne.n	a44 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x11b>
     a2a:	7863      	ldrb	r3, [r4, #1]
     a2c:	2b2a      	cmp	r3, #42	; 0x2a
     a2e:	d133      	bne.n	a98 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x16f>
     a30:	9b03      	ldr	r3, [sp, #12]
     a32:	1d1a      	adds	r2, r3, #4
     a34:	681b      	ldr	r3, [r3, #0]
     a36:	9203      	str	r2, [sp, #12]
     a38:	2b00      	cmp	r3, #0
     a3a:	bfb8      	it	lt
     a3c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
     a40:	3402      	adds	r4, #2
     a42:	9305      	str	r3, [sp, #20]
     a44:	4d2c      	ldr	r5, [pc, #176]	; (af8 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x1cf>)
     a46:	7821      	ldrb	r1, [r4, #0]
     a48:	2203      	movs	r2, #3
     a4a:	4628      	mov	r0, r5
     a4c:	f7ff fb58 	bl	100 <memchr>
     a50:	b138      	cbz	r0, a62 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x139>
     a52:	2340      	movs	r3, #64	; 0x40
     a54:	1b40      	subs	r0, r0, r5
     a56:	fa03 f000 	lsl.w	r0, r3, r0
     a5a:	9b04      	ldr	r3, [sp, #16]
     a5c:	4303      	orrs	r3, r0
     a5e:	3401      	adds	r4, #1
     a60:	9304      	str	r3, [sp, #16]
     a62:	f814 1b01 	ldrb.w	r1, [r4], #1
     a66:	4825      	ldr	r0, [pc, #148]	; (afc <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x1d3>)
     a68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
     a6c:	2206      	movs	r2, #6
     a6e:	f7ff fb47 	bl	100 <memchr>
     a72:	2800      	cmp	r0, #0
     a74:	d035      	beq.n	ae2 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x1b9>
     a76:	4b22      	ldr	r3, [pc, #136]	; (b00 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x1d7>)
     a78:	bb13      	cbnz	r3, ac0 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x197>
     a7a:	9b03      	ldr	r3, [sp, #12]
     a7c:	3307      	adds	r3, #7
     a7e:	f023 0307 	bic.w	r3, r3, #7
     a82:	3308      	adds	r3, #8
     a84:	9303      	str	r3, [sp, #12]
     a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a88:	4443      	add	r3, r8
     a8a:	9309      	str	r3, [sp, #36]	; 0x24
     a8c:	e763      	b.n	956 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x2d>
     a8e:	fb05 3202 	mla	r2, r5, r2, r3
     a92:	2001      	movs	r0, #1
     a94:	460c      	mov	r4, r1
     a96:	e79d      	b.n	9d4 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0xab>
     a98:	2300      	movs	r3, #0
     a9a:	3401      	adds	r4, #1
     a9c:	9305      	str	r3, [sp, #20]
     a9e:	4619      	mov	r1, r3
     aa0:	250a      	movs	r5, #10
     aa2:	4620      	mov	r0, r4
     aa4:	f810 2b01 	ldrb.w	r2, [r0], #1
     aa8:	3a30      	subs	r2, #48	; 0x30
     aaa:	2a09      	cmp	r2, #9
     aac:	d903      	bls.n	ab6 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x18d>
     aae:	2b00      	cmp	r3, #0
     ab0:	d0c8      	beq.n	a44 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x11b>
     ab2:	9105      	str	r1, [sp, #20]
     ab4:	e7c6      	b.n	a44 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x11b>
     ab6:	fb05 2101 	mla	r1, r5, r1, r2
     aba:	2301      	movs	r3, #1
     abc:	4604      	mov	r4, r0
     abe:	e7f0      	b.n	aa2 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x179>
     ac0:	ab03      	add	r3, sp, #12
     ac2:	9300      	str	r3, [sp, #0]
     ac4:	4632      	mov	r2, r6
     ac6:	4b0f      	ldr	r3, [pc, #60]	; (b04 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x1db>)
     ac8:	a904      	add	r1, sp, #16
     aca:	4638      	mov	r0, r7
     acc:	f3af 8000 	nop.w
     ad0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
     ad4:	4680      	mov	r8, r0
     ad6:	d1d6      	bne.n	a86 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x15d>
     ad8:	89b3      	ldrh	r3, [r6, #12]
     ada:	065b      	lsls	r3, r3, #25
     adc:	d488      	bmi.n	9f0 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0xc7>
     ade:	9809      	ldr	r0, [sp, #36]	; 0x24
     ae0:	e788      	b.n	9f4 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0xcb>
     ae2:	ab03      	add	r3, sp, #12
     ae4:	9300      	str	r3, [sp, #0]
     ae6:	4632      	mov	r2, r6
     ae8:	4b06      	ldr	r3, [pc, #24]	; (b04 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x1db>)
     aea:	a904      	add	r1, sp, #16
     aec:	4638      	mov	r0, r7
     aee:	f000 f88a 	bl	c06 <_printf_i>
     af2:	e7ed      	b.n	ad0 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x1a7>
     af4:	0002f099 	.word	0x0002f099
     af8:	0002f09f 	.word	0x0002f09f
     afc:	0002f0a3 	.word	0x0002f0a3
     b00:	00000000 	.word	0x00000000
     b04:	000008db 	.word	0x000008db

00000b08 <vfiprintf>:
     b08:	4613      	mov	r3, r2
     b0a:	460a      	mov	r2, r1
     b0c:	4601      	mov	r1, r0
     b0e:	4802      	ldr	r0, [pc, #8]	; (b18 <vfiprintf+0x10>)
     b10:	6800      	ldr	r0, [r0, #0]
     b12:	f7ff bf01 	b.w	918 <_vfiprintf_r>
     b16:	bf00      	nop
     b18:	2000e758 	.word	0x2000e758

00000b1c <_printf_common>:
     b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     b20:	4691      	mov	r9, r2
     b22:	461f      	mov	r7, r3
     b24:	688a      	ldr	r2, [r1, #8]
     b26:	690b      	ldr	r3, [r1, #16]
     b28:	f8dd 8020 	ldr.w	r8, [sp, #32]
     b2c:	4293      	cmp	r3, r2
     b2e:	bfb8      	it	lt
     b30:	4613      	movlt	r3, r2
     b32:	f8c9 3000 	str.w	r3, [r9]
     b36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
     b3a:	4606      	mov	r6, r0
     b3c:	460c      	mov	r4, r1
     b3e:	b112      	cbz	r2, b46 <_printf_common+0x2a>
     b40:	3301      	adds	r3, #1
     b42:	f8c9 3000 	str.w	r3, [r9]
     b46:	6823      	ldr	r3, [r4, #0]
     b48:	0699      	lsls	r1, r3, #26
     b4a:	bf42      	ittt	mi
     b4c:	f8d9 3000 	ldrmi.w	r3, [r9]
     b50:	3302      	addmi	r3, #2
     b52:	f8c9 3000 	strmi.w	r3, [r9]
     b56:	6825      	ldr	r5, [r4, #0]
     b58:	f015 0506 	ands.w	r5, r5, #6
     b5c:	d107      	bne.n	b6e <_printf_common+0x52>
     b5e:	f104 0a19 	add.w	sl, r4, #25
     b62:	68e3      	ldr	r3, [r4, #12]
     b64:	f8d9 2000 	ldr.w	r2, [r9]
     b68:	1a9b      	subs	r3, r3, r2
     b6a:	42ab      	cmp	r3, r5
     b6c:	dc28      	bgt.n	bc0 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x8>
     b6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
     b72:	6822      	ldr	r2, [r4, #0]
     b74:	3300      	adds	r3, #0
     b76:	bf18      	it	ne
     b78:	2301      	movne	r3, #1
     b7a:	0692      	lsls	r2, r2, #26
     b7c:	d42d      	bmi.n	bda <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x22>
     b7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
     b82:	4639      	mov	r1, r7
     b84:	4630      	mov	r0, r6
     b86:	47c0      	blx	r8
     b88:	3001      	adds	r0, #1
     b8a:	d020      	beq.n	bce <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x16>
     b8c:	6823      	ldr	r3, [r4, #0]
     b8e:	68e5      	ldr	r5, [r4, #12]
     b90:	f8d9 2000 	ldr.w	r2, [r9]
     b94:	f003 0306 	and.w	r3, r3, #6
     b98:	2b04      	cmp	r3, #4
     b9a:	bf08      	it	eq
     b9c:	1aad      	subeq	r5, r5, r2
     b9e:	68a3      	ldr	r3, [r4, #8]
     ba0:	6922      	ldr	r2, [r4, #16]
     ba2:	bf0c      	ite	eq
     ba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
     ba8:	2500      	movne	r5, #0
     baa:	4293      	cmp	r3, r2
     bac:	bfc4      	itt	gt
     bae:	1a9b      	subgt	r3, r3, r2
     bb0:	18ed      	addgt	r5, r5, r3
     bb2:	f04f 0900 	mov.w	r9, #0
     bb6:	341a      	adds	r4, #26
     bb8:	454d      	cmp	r5, r9
     bba:	d11a      	bne.n	bf2 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x3a>
     bbc:	2000      	movs	r0, #0
     bbe:	e008      	b.n	bd2 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1a>
     bc0:	2301      	movs	r3, #1
     bc2:	4652      	mov	r2, sl
     bc4:	4639      	mov	r1, r7
     bc6:	4630      	mov	r0, r6
     bc8:	47c0      	blx	r8
     bca:	3001      	adds	r0, #1
     bcc:	d103      	bne.n	bd6 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1e>
     bce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     bd6:	3501      	adds	r5, #1
     bd8:	e7c3      	b.n	b62 <_printf_common+0x46>
     bda:	18e1      	adds	r1, r4, r3
     bdc:	1c5a      	adds	r2, r3, #1
     bde:	2030      	movs	r0, #48	; 0x30
     be0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
     be4:	4422      	add	r2, r4
     be6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
     bea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
     bee:	3302      	adds	r3, #2
     bf0:	e7c5      	b.n	b7e <_printf_common+0x62>
     bf2:	2301      	movs	r3, #1
     bf4:	4622      	mov	r2, r4
     bf6:	4639      	mov	r1, r7
     bf8:	4630      	mov	r0, r6
     bfa:	47c0      	blx	r8
     bfc:	3001      	adds	r0, #1
     bfe:	d0e6      	beq.n	bce <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x16>
     c00:	f109 0901 	add.w	r9, r9, #1
     c04:	e7d8      	b.n	bb8 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT>

00000c06 <_printf_i>:
     c06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     c0a:	4606      	mov	r6, r0
     c0c:	460c      	mov	r4, r1
     c0e:	f101 0043 	add.w	r0, r1, #67	; 0x43
     c12:	7e09      	ldrb	r1, [r1, #24]
     c14:	b085      	sub	sp, #20
     c16:	296e      	cmp	r1, #110	; 0x6e
     c18:	4698      	mov	r8, r3
     c1a:	4617      	mov	r7, r2
     c1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     c1e:	f000 80ba 	beq.w	d96 <_printf_i+0x190>
     c22:	d824      	bhi.n	c6e <_printf_i+0x68>
     c24:	2963      	cmp	r1, #99	; 0x63
     c26:	d039      	beq.n	c9c <_printf_i+0x96>
     c28:	d80a      	bhi.n	c40 <_printf_i+0x3a>
     c2a:	2900      	cmp	r1, #0
     c2c:	f000 80c3 	beq.w	db6 <_printf_i+0x1b0>
     c30:	2958      	cmp	r1, #88	; 0x58
     c32:	f000 8091 	beq.w	d58 <_printf_i+0x152>
     c36:	f104 0542 	add.w	r5, r4, #66	; 0x42
     c3a:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
     c3e:	e035      	b.n	cac <_printf_i+0xa6>
     c40:	2964      	cmp	r1, #100	; 0x64
     c42:	d001      	beq.n	c48 <_printf_i+0x42>
     c44:	2969      	cmp	r1, #105	; 0x69
     c46:	d1f6      	bne.n	c36 <_printf_i+0x30>
     c48:	6825      	ldr	r5, [r4, #0]
     c4a:	681a      	ldr	r2, [r3, #0]
     c4c:	f015 0f80 	tst.w	r5, #128	; 0x80
     c50:	f102 0104 	add.w	r1, r2, #4
     c54:	d02c      	beq.n	cb0 <_printf_i+0xaa>
     c56:	6812      	ldr	r2, [r2, #0]
     c58:	6019      	str	r1, [r3, #0]
     c5a:	2a00      	cmp	r2, #0
     c5c:	da03      	bge.n	c66 <_printf_i+0x60>
     c5e:	232d      	movs	r3, #45	; 0x2d
     c60:	4252      	negs	r2, r2
     c62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
     c66:	f8df c1c0 	ldr.w	ip, [pc, #448]	; e28 <_printf_i+0x222>
     c6a:	230a      	movs	r3, #10
     c6c:	e03f      	b.n	cee <_printf_i+0xe8>
     c6e:	2973      	cmp	r1, #115	; 0x73
     c70:	f000 80a5 	beq.w	dbe <_printf_i+0x1b8>
     c74:	d808      	bhi.n	c88 <_printf_i+0x82>
     c76:	296f      	cmp	r1, #111	; 0x6f
     c78:	d021      	beq.n	cbe <_printf_i+0xb8>
     c7a:	2970      	cmp	r1, #112	; 0x70
     c7c:	d1db      	bne.n	c36 <_printf_i+0x30>
     c7e:	6822      	ldr	r2, [r4, #0]
     c80:	f042 0220 	orr.w	r2, r2, #32
     c84:	6022      	str	r2, [r4, #0]
     c86:	e003      	b.n	c90 <_printf_i+0x8a>
     c88:	2975      	cmp	r1, #117	; 0x75
     c8a:	d018      	beq.n	cbe <_printf_i+0xb8>
     c8c:	2978      	cmp	r1, #120	; 0x78
     c8e:	d1d2      	bne.n	c36 <_printf_i+0x30>
     c90:	2278      	movs	r2, #120	; 0x78
     c92:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
     c96:	f8df c194 	ldr.w	ip, [pc, #404]	; e2c <_printf_i+0x226>
     c9a:	e061      	b.n	d60 <_printf_i+0x15a>
     c9c:	681a      	ldr	r2, [r3, #0]
     c9e:	1d11      	adds	r1, r2, #4
     ca0:	6019      	str	r1, [r3, #0]
     ca2:	6813      	ldr	r3, [r2, #0]
     ca4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
     ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
     cac:	2301      	movs	r3, #1
     cae:	e093      	b.n	dd8 <_printf_i+0x1d2>
     cb0:	6812      	ldr	r2, [r2, #0]
     cb2:	6019      	str	r1, [r3, #0]
     cb4:	f015 0f40 	tst.w	r5, #64	; 0x40
     cb8:	bf18      	it	ne
     cba:	b212      	sxthne	r2, r2
     cbc:	e7cd      	b.n	c5a <_printf_i+0x54>
     cbe:	f8d4 c000 	ldr.w	ip, [r4]
     cc2:	681a      	ldr	r2, [r3, #0]
     cc4:	f01c 0f80 	tst.w	ip, #128	; 0x80
     cc8:	f102 0504 	add.w	r5, r2, #4
     ccc:	601d      	str	r5, [r3, #0]
     cce:	d001      	beq.n	cd4 <_printf_i+0xce>
     cd0:	6812      	ldr	r2, [r2, #0]
     cd2:	e003      	b.n	cdc <_printf_i+0xd6>
     cd4:	f01c 0f40 	tst.w	ip, #64	; 0x40
     cd8:	d0fa      	beq.n	cd0 <_printf_i+0xca>
     cda:	8812      	ldrh	r2, [r2, #0]
     cdc:	f8df c148 	ldr.w	ip, [pc, #328]	; e28 <_printf_i+0x222>
     ce0:	296f      	cmp	r1, #111	; 0x6f
     ce2:	bf0c      	ite	eq
     ce4:	2308      	moveq	r3, #8
     ce6:	230a      	movne	r3, #10
     ce8:	2100      	movs	r1, #0
     cea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
     cee:	6865      	ldr	r5, [r4, #4]
     cf0:	60a5      	str	r5, [r4, #8]
     cf2:	2d00      	cmp	r5, #0
     cf4:	bfa2      	ittt	ge
     cf6:	6821      	ldrge	r1, [r4, #0]
     cf8:	f021 0104 	bicge.w	r1, r1, #4
     cfc:	6021      	strge	r1, [r4, #0]
     cfe:	b90a      	cbnz	r2, d04 <_printf_i+0xfe>
     d00:	2d00      	cmp	r5, #0
     d02:	d046      	beq.n	d92 <_printf_i+0x18c>
     d04:	4605      	mov	r5, r0
     d06:	fbb2 f1f3 	udiv	r1, r2, r3
     d0a:	fb03 2e11 	mls	lr, r3, r1, r2
     d0e:	4293      	cmp	r3, r2
     d10:	f81c e00e 	ldrb.w	lr, [ip, lr]
     d14:	f805 ed01 	strb.w	lr, [r5, #-1]!
     d18:	d939      	bls.n	d8e <_printf_i+0x188>
     d1a:	2b08      	cmp	r3, #8
     d1c:	d10b      	bne.n	d36 <_printf_i+0x130>
     d1e:	6823      	ldr	r3, [r4, #0]
     d20:	07da      	lsls	r2, r3, #31
     d22:	d508      	bpl.n	d36 <_printf_i+0x130>
     d24:	6923      	ldr	r3, [r4, #16]
     d26:	6862      	ldr	r2, [r4, #4]
     d28:	429a      	cmp	r2, r3
     d2a:	bfde      	ittt	le
     d2c:	2330      	movle	r3, #48	; 0x30
     d2e:	f805 3c01 	strble.w	r3, [r5, #-1]
     d32:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
     d36:	1b40      	subs	r0, r0, r5
     d38:	6120      	str	r0, [r4, #16]
     d3a:	f8cd 8000 	str.w	r8, [sp]
     d3e:	463b      	mov	r3, r7
     d40:	aa03      	add	r2, sp, #12
     d42:	4621      	mov	r1, r4
     d44:	4630      	mov	r0, r6
     d46:	f7ff fee9 	bl	b1c <_printf_common>
     d4a:	3001      	adds	r0, #1
     d4c:	d149      	bne.n	de2 <_printf_i+0x1dc>
     d4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     d52:	b005      	add	sp, #20
     d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     d58:	f8df c0cc 	ldr.w	ip, [pc, #204]	; e28 <_printf_i+0x222>
     d5c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
     d60:	681d      	ldr	r5, [r3, #0]
     d62:	6821      	ldr	r1, [r4, #0]
     d64:	f855 2b04 	ldr.w	r2, [r5], #4
     d68:	601d      	str	r5, [r3, #0]
     d6a:	060d      	lsls	r5, r1, #24
     d6c:	d50b      	bpl.n	d86 <_printf_i+0x180>
     d6e:	07cd      	lsls	r5, r1, #31
     d70:	bf44      	itt	mi
     d72:	f041 0120 	orrmi.w	r1, r1, #32
     d76:	6021      	strmi	r1, [r4, #0]
     d78:	b91a      	cbnz	r2, d82 <_printf_i+0x17c>
     d7a:	6823      	ldr	r3, [r4, #0]
     d7c:	f023 0320 	bic.w	r3, r3, #32
     d80:	6023      	str	r3, [r4, #0]
     d82:	2310      	movs	r3, #16
     d84:	e7b0      	b.n	ce8 <_printf_i+0xe2>
     d86:	064b      	lsls	r3, r1, #25
     d88:	bf48      	it	mi
     d8a:	b292      	uxthmi	r2, r2
     d8c:	e7ef      	b.n	d6e <_printf_i+0x168>
     d8e:	460a      	mov	r2, r1
     d90:	e7b9      	b.n	d06 <_printf_i+0x100>
     d92:	4605      	mov	r5, r0
     d94:	e7c1      	b.n	d1a <_printf_i+0x114>
     d96:	681a      	ldr	r2, [r3, #0]
     d98:	f8d4 c000 	ldr.w	ip, [r4]
     d9c:	6961      	ldr	r1, [r4, #20]
     d9e:	1d15      	adds	r5, r2, #4
     da0:	601d      	str	r5, [r3, #0]
     da2:	f01c 0f80 	tst.w	ip, #128	; 0x80
     da6:	6813      	ldr	r3, [r2, #0]
     da8:	d001      	beq.n	dae <_printf_i+0x1a8>
     daa:	6019      	str	r1, [r3, #0]
     dac:	e003      	b.n	db6 <_printf_i+0x1b0>
     dae:	f01c 0f40 	tst.w	ip, #64	; 0x40
     db2:	d0fa      	beq.n	daa <_printf_i+0x1a4>
     db4:	8019      	strh	r1, [r3, #0]
     db6:	2300      	movs	r3, #0
     db8:	6123      	str	r3, [r4, #16]
     dba:	4605      	mov	r5, r0
     dbc:	e7bd      	b.n	d3a <_printf_i+0x134>
     dbe:	681a      	ldr	r2, [r3, #0]
     dc0:	1d11      	adds	r1, r2, #4
     dc2:	6019      	str	r1, [r3, #0]
     dc4:	6815      	ldr	r5, [r2, #0]
     dc6:	6862      	ldr	r2, [r4, #4]
     dc8:	2100      	movs	r1, #0
     dca:	4628      	mov	r0, r5
     dcc:	f7ff f998 	bl	100 <memchr>
     dd0:	b108      	cbz	r0, dd6 <_printf_i+0x1d0>
     dd2:	1b40      	subs	r0, r0, r5
     dd4:	6060      	str	r0, [r4, #4]
     dd6:	6863      	ldr	r3, [r4, #4]
     dd8:	6123      	str	r3, [r4, #16]
     dda:	2300      	movs	r3, #0
     ddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
     de0:	e7ab      	b.n	d3a <_printf_i+0x134>
     de2:	6923      	ldr	r3, [r4, #16]
     de4:	462a      	mov	r2, r5
     de6:	4639      	mov	r1, r7
     de8:	4630      	mov	r0, r6
     dea:	47c0      	blx	r8
     dec:	3001      	adds	r0, #1
     dee:	d0ae      	beq.n	d4e <_printf_i+0x148>
     df0:	6823      	ldr	r3, [r4, #0]
     df2:	079b      	lsls	r3, r3, #30
     df4:	d413      	bmi.n	e1e <_printf_i+0x218>
     df6:	68e0      	ldr	r0, [r4, #12]
     df8:	9b03      	ldr	r3, [sp, #12]
     dfa:	4298      	cmp	r0, r3
     dfc:	bfb8      	it	lt
     dfe:	4618      	movlt	r0, r3
     e00:	e7a7      	b.n	d52 <_printf_i+0x14c>
     e02:	2301      	movs	r3, #1
     e04:	464a      	mov	r2, r9
     e06:	4639      	mov	r1, r7
     e08:	4630      	mov	r0, r6
     e0a:	47c0      	blx	r8
     e0c:	3001      	adds	r0, #1
     e0e:	d09e      	beq.n	d4e <_printf_i+0x148>
     e10:	3501      	adds	r5, #1
     e12:	68e3      	ldr	r3, [r4, #12]
     e14:	9a03      	ldr	r2, [sp, #12]
     e16:	1a9b      	subs	r3, r3, r2
     e18:	42ab      	cmp	r3, r5
     e1a:	dcf2      	bgt.n	e02 <_printf_i+0x1fc>
     e1c:	e7eb      	b.n	df6 <_printf_i+0x1f0>
     e1e:	2500      	movs	r5, #0
     e20:	f104 0919 	add.w	r9, r4, #25
     e24:	e7f5      	b.n	e12 <_printf_i+0x20c>
     e26:	bf00      	nop
     e28:	0002f0aa 	.word	0x0002f0aa
     e2c:	0002f0bb 	.word	0x0002f0bb

00000e30 <_sbrk_r>:
     e30:	b538      	push	{r3, r4, r5, lr}
     e32:	4c06      	ldr	r4, [pc, #24]	; (e4c <_sbrk_r+0x1c>)
     e34:	2300      	movs	r3, #0
     e36:	4605      	mov	r5, r0
     e38:	4608      	mov	r0, r1
     e3a:	6023      	str	r3, [r4, #0]
     e3c:	f011 fb06 	bl	1244c <_sbrk>
     e40:	1c43      	adds	r3, r0, #1
     e42:	d102      	bne.n	e4a <_sbrk_r+0x1a>
     e44:	6823      	ldr	r3, [r4, #0]
     e46:	b103      	cbz	r3, e4a <_sbrk_r+0x1a>
     e48:	602b      	str	r3, [r5, #0]
     e4a:	bd38      	pop	{r3, r4, r5, pc}
     e4c:	20006250 	.word	0x20006250

00000e50 <_strtol_l.isra.0>:
     e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     e54:	4f39      	ldr	r7, [pc, #228]	; (f3c <_strtol_l.isra.0+0xec>)
     e56:	4686      	mov	lr, r0
     e58:	4608      	mov	r0, r1
     e5a:	4605      	mov	r5, r0
     e5c:	f815 4b01 	ldrb.w	r4, [r5], #1
     e60:	5de6      	ldrb	r6, [r4, r7]
     e62:	f016 0608 	ands.w	r6, r6, #8
     e66:	d134      	bne.n	ed2 <_strtol_l.isra.0+0x82>
     e68:	2c2d      	cmp	r4, #45	; 0x2d
     e6a:	d134      	bne.n	ed6 <_strtol_l.isra.0+0x86>
     e6c:	782c      	ldrb	r4, [r5, #0]
     e6e:	f04f 0801 	mov.w	r8, #1
     e72:	1c85      	adds	r5, r0, #2
     e74:	2b00      	cmp	r3, #0
     e76:	d05c      	beq.n	f32 <_strtol_l.isra.0+0xe2>
     e78:	2b10      	cmp	r3, #16
     e7a:	d109      	bne.n	e90 <_strtol_l.isra.0+0x40>
     e7c:	2c30      	cmp	r4, #48	; 0x30
     e7e:	d107      	bne.n	e90 <_strtol_l.isra.0+0x40>
     e80:	7828      	ldrb	r0, [r5, #0]
     e82:	f000 00df 	and.w	r0, r0, #223	; 0xdf
     e86:	2858      	cmp	r0, #88	; 0x58
     e88:	d14e      	bne.n	f28 <_strtol_l.isra.0+0xd8>
     e8a:	786c      	ldrb	r4, [r5, #1]
     e8c:	2310      	movs	r3, #16
     e8e:	3502      	adds	r5, #2
     e90:	f1b8 0f00 	cmp.w	r8, #0
     e94:	bf14      	ite	ne
     e96:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
     e9a:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
     e9e:	2700      	movs	r7, #0
     ea0:	fbbc f9f3 	udiv	r9, ip, r3
     ea4:	4638      	mov	r0, r7
     ea6:	fb03 ca19 	mls	sl, r3, r9, ip
     eaa:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
     eae:	2e09      	cmp	r6, #9
     eb0:	d818      	bhi.n	ee4 <_strtol_l.isra.0+0x94>
     eb2:	4634      	mov	r4, r6
     eb4:	42a3      	cmp	r3, r4
     eb6:	dd24      	ble.n	f02 <_strtol_l.isra.0+0xb2>
     eb8:	1c7e      	adds	r6, r7, #1
     eba:	d007      	beq.n	ecc <_strtol_l.isra.0+0x7c>
     ebc:	4581      	cmp	r9, r0
     ebe:	d31d      	bcc.n	efc <_strtol_l.isra.0+0xac>
     ec0:	d101      	bne.n	ec6 <_strtol_l.isra.0+0x76>
     ec2:	45a2      	cmp	sl, r4
     ec4:	db1a      	blt.n	efc <_strtol_l.isra.0+0xac>
     ec6:	fb00 4003 	mla	r0, r0, r3, r4
     eca:	2701      	movs	r7, #1
     ecc:	f815 4b01 	ldrb.w	r4, [r5], #1
     ed0:	e7eb      	b.n	eaa <_strtol_l.isra.0+0x5a>
     ed2:	4628      	mov	r0, r5
     ed4:	e7c1      	b.n	e5a <_strtol_l.isra.0+0xa>
     ed6:	2c2b      	cmp	r4, #43	; 0x2b
     ed8:	bf08      	it	eq
     eda:	782c      	ldrbeq	r4, [r5, #0]
     edc:	46b0      	mov	r8, r6
     ede:	bf08      	it	eq
     ee0:	1c85      	addeq	r5, r0, #2
     ee2:	e7c7      	b.n	e74 <_strtol_l.isra.0+0x24>
     ee4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
     ee8:	2e19      	cmp	r6, #25
     eea:	d801      	bhi.n	ef0 <_strtol_l.isra.0+0xa0>
     eec:	3c37      	subs	r4, #55	; 0x37
     eee:	e7e1      	b.n	eb4 <_strtol_l.isra.0+0x64>
     ef0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
     ef4:	2e19      	cmp	r6, #25
     ef6:	d804      	bhi.n	f02 <_strtol_l.isra.0+0xb2>
     ef8:	3c57      	subs	r4, #87	; 0x57
     efa:	e7db      	b.n	eb4 <_strtol_l.isra.0+0x64>
     efc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
     f00:	e7e4      	b.n	ecc <_strtol_l.isra.0+0x7c>
     f02:	1c7b      	adds	r3, r7, #1
     f04:	d106      	bne.n	f14 <_strtol_l.isra.0+0xc4>
     f06:	2322      	movs	r3, #34	; 0x22
     f08:	f8ce 3000 	str.w	r3, [lr]
     f0c:	4660      	mov	r0, ip
     f0e:	b942      	cbnz	r2, f22 <_strtol_l.isra.0+0xd2>
     f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     f14:	f1b8 0f00 	cmp.w	r8, #0
     f18:	d000      	beq.n	f1c <_strtol_l.isra.0+0xcc>
     f1a:	4240      	negs	r0, r0
     f1c:	2a00      	cmp	r2, #0
     f1e:	d0f7      	beq.n	f10 <_strtol_l.isra.0+0xc0>
     f20:	b107      	cbz	r7, f24 <_strtol_l.isra.0+0xd4>
     f22:	1e69      	subs	r1, r5, #1
     f24:	6011      	str	r1, [r2, #0]
     f26:	e7f3      	b.n	f10 <_strtol_l.isra.0+0xc0>
     f28:	2430      	movs	r4, #48	; 0x30
     f2a:	2b00      	cmp	r3, #0
     f2c:	d1b0      	bne.n	e90 <_strtol_l.isra.0+0x40>
     f2e:	2308      	movs	r3, #8
     f30:	e7ae      	b.n	e90 <_strtol_l.isra.0+0x40>
     f32:	2c30      	cmp	r4, #48	; 0x30
     f34:	d0a4      	beq.n	e80 <_strtol_l.isra.0+0x30>
     f36:	230a      	movs	r3, #10
     f38:	e7aa      	b.n	e90 <_strtol_l.isra.0+0x40>
     f3a:	bf00      	nop
     f3c:	0002e8d1 	.word	0x0002e8d1

00000f40 <_strtol_r>:
     f40:	e786      	b.n	e50 <_strtol_l.isra.0>

00000f42 <strtol_l>:
     f42:	4613      	mov	r3, r2
     f44:	460a      	mov	r2, r1
     f46:	4601      	mov	r1, r0
     f48:	4801      	ldr	r0, [pc, #4]	; (f50 <strtol_l+0xe>)
     f4a:	6800      	ldr	r0, [r0, #0]
     f4c:	e780      	b.n	e50 <_strtol_l.isra.0>
     f4e:	bf00      	nop
     f50:	2000e758 	.word	0x2000e758

00000f54 <strtol>:
     f54:	4613      	mov	r3, r2
     f56:	460a      	mov	r2, r1
     f58:	4601      	mov	r1, r0
     f5a:	4801      	ldr	r0, [pc, #4]	; (f60 <strtol+0xc>)
     f5c:	6800      	ldr	r0, [r0, #0]
     f5e:	e777      	b.n	e50 <_strtol_l.isra.0>
     f60:	2000e758 	.word	0x2000e758

00000f64 <_vsniprintf_r>:
     f64:	b530      	push	{r4, r5, lr}
     f66:	1e14      	subs	r4, r2, #0
     f68:	4605      	mov	r5, r0
     f6a:	b09b      	sub	sp, #108	; 0x6c
     f6c:	4618      	mov	r0, r3
     f6e:	da05      	bge.n	f7c <_vsniprintf_r+0x18>
     f70:	238b      	movs	r3, #139	; 0x8b
     f72:	602b      	str	r3, [r5, #0]
     f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     f78:	b01b      	add	sp, #108	; 0x6c
     f7a:	bd30      	pop	{r4, r5, pc}
     f7c:	f44f 7302 	mov.w	r3, #520	; 0x208
     f80:	f8ad 3010 	strh.w	r3, [sp, #16]
     f84:	bf14      	ite	ne
     f86:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
     f8a:	4623      	moveq	r3, r4
     f8c:	9303      	str	r3, [sp, #12]
     f8e:	9306      	str	r3, [sp, #24]
     f90:	f64f 73ff 	movw	r3, #65535	; 0xffff
     f94:	9101      	str	r1, [sp, #4]
     f96:	9105      	str	r1, [sp, #20]
     f98:	f8ad 3012 	strh.w	r3, [sp, #18]
     f9c:	4602      	mov	r2, r0
     f9e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
     fa0:	a901      	add	r1, sp, #4
     fa2:	4628      	mov	r0, r5
     fa4:	f000 fce9 	bl	197a <_svfiprintf_r>
     fa8:	1c43      	adds	r3, r0, #1
     faa:	bfbc      	itt	lt
     fac:	238b      	movlt	r3, #139	; 0x8b
     fae:	602b      	strlt	r3, [r5, #0]
     fb0:	2c00      	cmp	r4, #0
     fb2:	d0e1      	beq.n	f78 <_vsniprintf_r+0x14>
     fb4:	9b01      	ldr	r3, [sp, #4]
     fb6:	2200      	movs	r2, #0
     fb8:	701a      	strb	r2, [r3, #0]
     fba:	e7dd      	b.n	f78 <_vsniprintf_r+0x14>

00000fbc <vsniprintf>:
     fbc:	b507      	push	{r0, r1, r2, lr}
     fbe:	9300      	str	r3, [sp, #0]
     fc0:	4613      	mov	r3, r2
     fc2:	460a      	mov	r2, r1
     fc4:	4601      	mov	r1, r0
     fc6:	4803      	ldr	r0, [pc, #12]	; (fd4 <vsniprintf+0x18>)
     fc8:	6800      	ldr	r0, [r0, #0]
     fca:	f7ff ffcb 	bl	f64 <_vsniprintf_r>
     fce:	b003      	add	sp, #12
     fd0:	f85d fb04 	ldr.w	pc, [sp], #4
     fd4:	2000e758 	.word	0x2000e758

00000fd8 <__swbuf_r>:
     fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fda:	460d      	mov	r5, r1
     fdc:	4614      	mov	r4, r2
     fde:	4606      	mov	r6, r0
     fe0:	b118      	cbz	r0, fea <__swbuf_r+0x12>
     fe2:	6b83      	ldr	r3, [r0, #56]	; 0x38
     fe4:	b90b      	cbnz	r3, fea <__swbuf_r+0x12>
     fe6:	f000 f98d 	bl	1304 <__sinit>
     fea:	69a3      	ldr	r3, [r4, #24]
     fec:	60a3      	str	r3, [r4, #8]
     fee:	89a3      	ldrh	r3, [r4, #12]
     ff0:	071a      	lsls	r2, r3, #28
     ff2:	d525      	bpl.n	1040 <CONFIG_HEAP_MEM_POOL_SIZE+0x40>
     ff4:	6923      	ldr	r3, [r4, #16]
     ff6:	b31b      	cbz	r3, 1040 <CONFIG_HEAP_MEM_POOL_SIZE+0x40>
     ff8:	6923      	ldr	r3, [r4, #16]
     ffa:	6820      	ldr	r0, [r4, #0]
     ffc:	1ac0      	subs	r0, r0, r3
     ffe:	6963      	ldr	r3, [r4, #20]
    1000:	b2ed      	uxtb	r5, r5
    1002:	4283      	cmp	r3, r0
    1004:	462f      	mov	r7, r5
    1006:	dc04      	bgt.n	1012 <CONFIG_HEAP_MEM_POOL_SIZE+0x12>
    1008:	4621      	mov	r1, r4
    100a:	4630      	mov	r0, r6
    100c:	f000 f910 	bl	1230 <_fflush_r>
    1010:	b9e0      	cbnz	r0, 104c <CONFIG_HEAP_MEM_POOL_SIZE+0x4c>
    1012:	68a3      	ldr	r3, [r4, #8]
    1014:	3b01      	subs	r3, #1
    1016:	60a3      	str	r3, [r4, #8]
    1018:	6823      	ldr	r3, [r4, #0]
    101a:	1c5a      	adds	r2, r3, #1
    101c:	6022      	str	r2, [r4, #0]
    101e:	701d      	strb	r5, [r3, #0]
    1020:	6963      	ldr	r3, [r4, #20]
    1022:	3001      	adds	r0, #1
    1024:	4283      	cmp	r3, r0
    1026:	d004      	beq.n	1032 <CONFIG_HEAP_MEM_POOL_SIZE+0x32>
    1028:	89a3      	ldrh	r3, [r4, #12]
    102a:	07db      	lsls	r3, r3, #31
    102c:	d506      	bpl.n	103c <CONFIG_HEAP_MEM_POOL_SIZE+0x3c>
    102e:	2d0a      	cmp	r5, #10
    1030:	d104      	bne.n	103c <CONFIG_HEAP_MEM_POOL_SIZE+0x3c>
    1032:	4621      	mov	r1, r4
    1034:	4630      	mov	r0, r6
    1036:	f000 f8fb 	bl	1230 <_fflush_r>
    103a:	b938      	cbnz	r0, 104c <CONFIG_HEAP_MEM_POOL_SIZE+0x4c>
    103c:	4638      	mov	r0, r7
    103e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1040:	4621      	mov	r1, r4
    1042:	4630      	mov	r0, r6
    1044:	f000 f80e 	bl	1064 <__swsetup_r>
    1048:	2800      	cmp	r0, #0
    104a:	d0d5      	beq.n	ff8 <__swbuf_r+0x20>
    104c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    1050:	e7f4      	b.n	103c <CONFIG_HEAP_MEM_POOL_SIZE+0x3c>

00001052 <__swbuf>:
    1052:	4b03      	ldr	r3, [pc, #12]	; (1060 <__swbuf+0xe>)
    1054:	460a      	mov	r2, r1
    1056:	4601      	mov	r1, r0
    1058:	6818      	ldr	r0, [r3, #0]
    105a:	f7ff bfbd 	b.w	fd8 <__swbuf_r>
    105e:	bf00      	nop
    1060:	2000e758 	.word	0x2000e758

00001064 <__swsetup_r>:
    1064:	b538      	push	{r3, r4, r5, lr}
    1066:	4b2a      	ldr	r3, [pc, #168]	; (1110 <__swsetup_r+0xac>)
    1068:	4605      	mov	r5, r0
    106a:	6818      	ldr	r0, [r3, #0]
    106c:	460c      	mov	r4, r1
    106e:	b118      	cbz	r0, 1078 <__swsetup_r+0x14>
    1070:	6b83      	ldr	r3, [r0, #56]	; 0x38
    1072:	b90b      	cbnz	r3, 1078 <__swsetup_r+0x14>
    1074:	f000 f946 	bl	1304 <__sinit>
    1078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    107c:	b29a      	uxth	r2, r3
    107e:	0711      	lsls	r1, r2, #28
    1080:	d422      	bmi.n	10c8 <__swsetup_r+0x64>
    1082:	06d0      	lsls	r0, r2, #27
    1084:	d407      	bmi.n	1096 <__swsetup_r+0x32>
    1086:	2209      	movs	r2, #9
    1088:	602a      	str	r2, [r5, #0]
    108a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    108e:	81a3      	strh	r3, [r4, #12]
    1090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1094:	e034      	b.n	1100 <__swsetup_r+0x9c>
    1096:	0751      	lsls	r1, r2, #29
    1098:	d512      	bpl.n	10c0 <__swsetup_r+0x5c>
    109a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    109c:	b141      	cbz	r1, 10b0 <__swsetup_r+0x4c>
    109e:	f104 0340 	add.w	r3, r4, #64	; 0x40
    10a2:	4299      	cmp	r1, r3
    10a4:	d002      	beq.n	10ac <__swsetup_r+0x48>
    10a6:	4628      	mov	r0, r5
    10a8:	f000 fb46 	bl	1738 <_free_r>
    10ac:	2300      	movs	r3, #0
    10ae:	6323      	str	r3, [r4, #48]	; 0x30
    10b0:	89a3      	ldrh	r3, [r4, #12]
    10b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    10b6:	81a3      	strh	r3, [r4, #12]
    10b8:	2300      	movs	r3, #0
    10ba:	6063      	str	r3, [r4, #4]
    10bc:	6923      	ldr	r3, [r4, #16]
    10be:	6023      	str	r3, [r4, #0]
    10c0:	89a3      	ldrh	r3, [r4, #12]
    10c2:	f043 0308 	orr.w	r3, r3, #8
    10c6:	81a3      	strh	r3, [r4, #12]
    10c8:	6923      	ldr	r3, [r4, #16]
    10ca:	b94b      	cbnz	r3, 10e0 <__swsetup_r+0x7c>
    10cc:	89a3      	ldrh	r3, [r4, #12]
    10ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
    10d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    10d6:	d003      	beq.n	10e0 <__swsetup_r+0x7c>
    10d8:	4621      	mov	r1, r4
    10da:	4628      	mov	r0, r5
    10dc:	f000 faeb 	bl	16b6 <__smakebuf_r>
    10e0:	89a2      	ldrh	r2, [r4, #12]
    10e2:	f012 0301 	ands.w	r3, r2, #1
    10e6:	d00c      	beq.n	1102 <__swsetup_r+0x9e>
    10e8:	2300      	movs	r3, #0
    10ea:	60a3      	str	r3, [r4, #8]
    10ec:	6963      	ldr	r3, [r4, #20]
    10ee:	425b      	negs	r3, r3
    10f0:	61a3      	str	r3, [r4, #24]
    10f2:	6923      	ldr	r3, [r4, #16]
    10f4:	b953      	cbnz	r3, 110c <__swsetup_r+0xa8>
    10f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    10fa:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    10fe:	d1c4      	bne.n	108a <__swsetup_r+0x26>
    1100:	bd38      	pop	{r3, r4, r5, pc}
    1102:	0792      	lsls	r2, r2, #30
    1104:	bf58      	it	pl
    1106:	6963      	ldrpl	r3, [r4, #20]
    1108:	60a3      	str	r3, [r4, #8]
    110a:	e7f2      	b.n	10f2 <__swsetup_r+0x8e>
    110c:	2000      	movs	r0, #0
    110e:	e7f7      	b.n	1100 <__swsetup_r+0x9c>
    1110:	2000e758 	.word	0x2000e758

00001114 <__sflush_r>:
    1114:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    1118:	b293      	uxth	r3, r2
    111a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    111e:	4605      	mov	r5, r0
    1120:	0718      	lsls	r0, r3, #28
    1122:	460c      	mov	r4, r1
    1124:	d45f      	bmi.n	11e6 <__sflush_r+0xd2>
    1126:	684b      	ldr	r3, [r1, #4]
    1128:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    112c:	2b00      	cmp	r3, #0
    112e:	818a      	strh	r2, [r1, #12]
    1130:	dc05      	bgt.n	113e <__sflush_r+0x2a>
    1132:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    1134:	2b00      	cmp	r3, #0
    1136:	dc02      	bgt.n	113e <__sflush_r+0x2a>
    1138:	2000      	movs	r0, #0
    113a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    113e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1140:	2e00      	cmp	r6, #0
    1142:	d0f9      	beq.n	1138 <__sflush_r+0x24>
    1144:	2300      	movs	r3, #0
    1146:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    114a:	682f      	ldr	r7, [r5, #0]
    114c:	602b      	str	r3, [r5, #0]
    114e:	d036      	beq.n	11be <__sflush_r+0xaa>
    1150:	6d20      	ldr	r0, [r4, #80]	; 0x50
    1152:	89a3      	ldrh	r3, [r4, #12]
    1154:	075a      	lsls	r2, r3, #29
    1156:	d505      	bpl.n	1164 <__sflush_r+0x50>
    1158:	6863      	ldr	r3, [r4, #4]
    115a:	1ac0      	subs	r0, r0, r3
    115c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    115e:	b10b      	cbz	r3, 1164 <__sflush_r+0x50>
    1160:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1162:	1ac0      	subs	r0, r0, r3
    1164:	2300      	movs	r3, #0
    1166:	4602      	mov	r2, r0
    1168:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    116a:	69e1      	ldr	r1, [r4, #28]
    116c:	4628      	mov	r0, r5
    116e:	47b0      	blx	r6
    1170:	1c43      	adds	r3, r0, #1
    1172:	89a3      	ldrh	r3, [r4, #12]
    1174:	d106      	bne.n	1184 <__sflush_r+0x70>
    1176:	6829      	ldr	r1, [r5, #0]
    1178:	291d      	cmp	r1, #29
    117a:	d830      	bhi.n	11de <__sflush_r+0xca>
    117c:	4a2b      	ldr	r2, [pc, #172]	; (122c <__sflush_r+0x118>)
    117e:	40ca      	lsrs	r2, r1
    1180:	07d6      	lsls	r6, r2, #31
    1182:	d52c      	bpl.n	11de <__sflush_r+0xca>
    1184:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1188:	b21b      	sxth	r3, r3
    118a:	2200      	movs	r2, #0
    118c:	6062      	str	r2, [r4, #4]
    118e:	04d9      	lsls	r1, r3, #19
    1190:	6922      	ldr	r2, [r4, #16]
    1192:	81a3      	strh	r3, [r4, #12]
    1194:	6022      	str	r2, [r4, #0]
    1196:	d504      	bpl.n	11a2 <__sflush_r+0x8e>
    1198:	1c42      	adds	r2, r0, #1
    119a:	d101      	bne.n	11a0 <__sflush_r+0x8c>
    119c:	682b      	ldr	r3, [r5, #0]
    119e:	b903      	cbnz	r3, 11a2 <__sflush_r+0x8e>
    11a0:	6520      	str	r0, [r4, #80]	; 0x50
    11a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    11a4:	602f      	str	r7, [r5, #0]
    11a6:	2900      	cmp	r1, #0
    11a8:	d0c6      	beq.n	1138 <__sflush_r+0x24>
    11aa:	f104 0340 	add.w	r3, r4, #64	; 0x40
    11ae:	4299      	cmp	r1, r3
    11b0:	d002      	beq.n	11b8 <__sflush_r+0xa4>
    11b2:	4628      	mov	r0, r5
    11b4:	f000 fac0 	bl	1738 <_free_r>
    11b8:	2000      	movs	r0, #0
    11ba:	6320      	str	r0, [r4, #48]	; 0x30
    11bc:	e7bd      	b.n	113a <__sflush_r+0x26>
    11be:	69e1      	ldr	r1, [r4, #28]
    11c0:	2301      	movs	r3, #1
    11c2:	4628      	mov	r0, r5
    11c4:	47b0      	blx	r6
    11c6:	1c41      	adds	r1, r0, #1
    11c8:	d1c3      	bne.n	1152 <__sflush_r+0x3e>
    11ca:	682b      	ldr	r3, [r5, #0]
    11cc:	2b00      	cmp	r3, #0
    11ce:	d0c0      	beq.n	1152 <__sflush_r+0x3e>
    11d0:	2b1d      	cmp	r3, #29
    11d2:	d001      	beq.n	11d8 <__sflush_r+0xc4>
    11d4:	2b16      	cmp	r3, #22
    11d6:	d101      	bne.n	11dc <__sflush_r+0xc8>
    11d8:	602f      	str	r7, [r5, #0]
    11da:	e7ad      	b.n	1138 <__sflush_r+0x24>
    11dc:	89a3      	ldrh	r3, [r4, #12]
    11de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    11e2:	81a3      	strh	r3, [r4, #12]
    11e4:	e7a9      	b.n	113a <__sflush_r+0x26>
    11e6:	690f      	ldr	r7, [r1, #16]
    11e8:	2f00      	cmp	r7, #0
    11ea:	d0a5      	beq.n	1138 <__sflush_r+0x24>
    11ec:	079b      	lsls	r3, r3, #30
    11ee:	680e      	ldr	r6, [r1, #0]
    11f0:	bf08      	it	eq
    11f2:	694b      	ldreq	r3, [r1, #20]
    11f4:	600f      	str	r7, [r1, #0]
    11f6:	bf18      	it	ne
    11f8:	2300      	movne	r3, #0
    11fa:	eba6 0807 	sub.w	r8, r6, r7
    11fe:	608b      	str	r3, [r1, #8]
    1200:	f1b8 0f00 	cmp.w	r8, #0
    1204:	dd98      	ble.n	1138 <__sflush_r+0x24>
    1206:	4643      	mov	r3, r8
    1208:	463a      	mov	r2, r7
    120a:	69e1      	ldr	r1, [r4, #28]
    120c:	6a66      	ldr	r6, [r4, #36]	; 0x24
    120e:	4628      	mov	r0, r5
    1210:	47b0      	blx	r6
    1212:	2800      	cmp	r0, #0
    1214:	dc06      	bgt.n	1224 <__sflush_r+0x110>
    1216:	89a3      	ldrh	r3, [r4, #12]
    1218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    121c:	81a3      	strh	r3, [r4, #12]
    121e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1222:	e78a      	b.n	113a <__sflush_r+0x26>
    1224:	4407      	add	r7, r0
    1226:	eba8 0800 	sub.w	r8, r8, r0
    122a:	e7e9      	b.n	1200 <__sflush_r+0xec>
    122c:	20400001 	.word	0x20400001

00001230 <_fflush_r>:
    1230:	b538      	push	{r3, r4, r5, lr}
    1232:	460d      	mov	r5, r1
    1234:	4604      	mov	r4, r0
    1236:	b118      	cbz	r0, 1240 <_fflush_r+0x10>
    1238:	6b83      	ldr	r3, [r0, #56]	; 0x38
    123a:	b90b      	cbnz	r3, 1240 <_fflush_r+0x10>
    123c:	f000 f862 	bl	1304 <__sinit>
    1240:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
    1244:	b128      	cbz	r0, 1252 <_fflush_r+0x22>
    1246:	4629      	mov	r1, r5
    1248:	4620      	mov	r0, r4
    124a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    124e:	f7ff bf61 	b.w	1114 <__sflush_r>
    1252:	bd38      	pop	{r3, r4, r5, pc}

00001254 <fflush>:
    1254:	4601      	mov	r1, r0
    1256:	b920      	cbnz	r0, 1262 <fflush+0xe>
    1258:	4b04      	ldr	r3, [pc, #16]	; (126c <fflush+0x18>)
    125a:	4905      	ldr	r1, [pc, #20]	; (1270 <fflush+0x1c>)
    125c:	6818      	ldr	r0, [r3, #0]
    125e:	f000 bf9b 	b.w	2198 <_fwalk_reent>
    1262:	4b04      	ldr	r3, [pc, #16]	; (1274 <fflush+0x20>)
    1264:	6818      	ldr	r0, [r3, #0]
    1266:	f7ff bfe3 	b.w	1230 <_fflush_r>
    126a:	bf00      	nop
    126c:	0002e8cc 	.word	0x0002e8cc
    1270:	00001231 	.word	0x00001231
    1274:	2000e758 	.word	0x2000e758

00001278 <std>:
    1278:	2300      	movs	r3, #0
    127a:	b510      	push	{r4, lr}
    127c:	4604      	mov	r4, r0
    127e:	e9c0 3300 	strd	r3, r3, [r0]
    1282:	6083      	str	r3, [r0, #8]
    1284:	8181      	strh	r1, [r0, #12]
    1286:	6603      	str	r3, [r0, #96]	; 0x60
    1288:	81c2      	strh	r2, [r0, #14]
    128a:	e9c0 3304 	strd	r3, r3, [r0, #16]
    128e:	6183      	str	r3, [r0, #24]
    1290:	4619      	mov	r1, r3
    1292:	2208      	movs	r2, #8
    1294:	3058      	adds	r0, #88	; 0x58
    1296:	f000 ff0f 	bl	20b8 <memset>
    129a:	4b05      	ldr	r3, [pc, #20]	; (12b0 <std+0x38>)
    129c:	6223      	str	r3, [r4, #32]
    129e:	4b05      	ldr	r3, [pc, #20]	; (12b4 <std+0x3c>)
    12a0:	6263      	str	r3, [r4, #36]	; 0x24
    12a2:	4b05      	ldr	r3, [pc, #20]	; (12b8 <std+0x40>)
    12a4:	62a3      	str	r3, [r4, #40]	; 0x28
    12a6:	4b05      	ldr	r3, [pc, #20]	; (12bc <std+0x44>)
    12a8:	61e4      	str	r4, [r4, #28]
    12aa:	62e3      	str	r3, [r4, #44]	; 0x2c
    12ac:	bd10      	pop	{r4, pc}
    12ae:	bf00      	nop
    12b0:	00002225 	.word	0x00002225
    12b4:	0000224b 	.word	0x0000224b
    12b8:	00002283 	.word	0x00002283
    12bc:	000022a7 	.word	0x000022a7

000012c0 <_cleanup_r>:
    12c0:	4901      	ldr	r1, [pc, #4]	; (12c8 <_cleanup_r+0x8>)
    12c2:	f000 bf69 	b.w	2198 <_fwalk_reent>
    12c6:	bf00      	nop
    12c8:	00001231 	.word	0x00001231

000012cc <__sfmoreglue>:
    12cc:	b570      	push	{r4, r5, r6, lr}
    12ce:	1e4a      	subs	r2, r1, #1
    12d0:	2564      	movs	r5, #100	; 0x64
    12d2:	4355      	muls	r5, r2
    12d4:	460e      	mov	r6, r1
    12d6:	f105 0170 	add.w	r1, r5, #112	; 0x70
    12da:	f7ff fa93 	bl	804 <_malloc_r>
    12de:	4604      	mov	r4, r0
    12e0:	b140      	cbz	r0, 12f4 <__sfmoreglue+0x28>
    12e2:	2100      	movs	r1, #0
    12e4:	e9c0 1600 	strd	r1, r6, [r0]
    12e8:	300c      	adds	r0, #12
    12ea:	60a0      	str	r0, [r4, #8]
    12ec:	f105 0264 	add.w	r2, r5, #100	; 0x64
    12f0:	f000 fee2 	bl	20b8 <memset>
    12f4:	4620      	mov	r0, r4
    12f6:	bd70      	pop	{r4, r5, r6, pc}

000012f8 <_cleanup>:
    12f8:	4b01      	ldr	r3, [pc, #4]	; (1300 <_cleanup+0x8>)
    12fa:	6818      	ldr	r0, [r3, #0]
    12fc:	f7ff bfe0 	b.w	12c0 <_cleanup_r>
    1300:	0002e8cc 	.word	0x0002e8cc

00001304 <__sinit>:
    1304:	6b82      	ldr	r2, [r0, #56]	; 0x38
    1306:	b510      	push	{r4, lr}
    1308:	4604      	mov	r4, r0
    130a:	b9d2      	cbnz	r2, 1342 <__sinit+0x3e>
    130c:	4b0d      	ldr	r3, [pc, #52]	; (1344 <__sinit+0x40>)
    130e:	63c3      	str	r3, [r0, #60]	; 0x3c
    1310:	2303      	movs	r3, #3
    1312:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    1316:	f500 73ac 	add.w	r3, r0, #344	; 0x158
    131a:	f8c0 3154 	str.w	r3, [r0, #340]	; 0x154
    131e:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
    1322:	2104      	movs	r1, #4
    1324:	6840      	ldr	r0, [r0, #4]
    1326:	f7ff ffa7 	bl	1278 <std>
    132a:	2201      	movs	r2, #1
    132c:	2109      	movs	r1, #9
    132e:	68a0      	ldr	r0, [r4, #8]
    1330:	f7ff ffa2 	bl	1278 <std>
    1334:	2202      	movs	r2, #2
    1336:	2112      	movs	r1, #18
    1338:	68e0      	ldr	r0, [r4, #12]
    133a:	f7ff ff9d 	bl	1278 <std>
    133e:	2301      	movs	r3, #1
    1340:	63a3      	str	r3, [r4, #56]	; 0x38
    1342:	bd10      	pop	{r4, pc}
    1344:	000012c1 	.word	0x000012c1

00001348 <__sfp>:
    1348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    134a:	4b1b      	ldr	r3, [pc, #108]	; (13b8 <__sfp+0x70>)
    134c:	681e      	ldr	r6, [r3, #0]
    134e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1350:	4607      	mov	r7, r0
    1352:	b913      	cbnz	r3, 135a <__sfp+0x12>
    1354:	4630      	mov	r0, r6
    1356:	f7ff ffd5 	bl	1304 <__sinit>
    135a:	f506 76a6 	add.w	r6, r6, #332	; 0x14c
    135e:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    1362:	3b01      	subs	r3, #1
    1364:	d503      	bpl.n	136e <__sfp+0x26>
    1366:	6833      	ldr	r3, [r6, #0]
    1368:	b1db      	cbz	r3, 13a2 <__sfp+0x5a>
    136a:	6836      	ldr	r6, [r6, #0]
    136c:	e7f7      	b.n	135e <__sfp+0x16>
    136e:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    1372:	b9a5      	cbnz	r5, 139e <__sfp+0x56>
    1374:	4b11      	ldr	r3, [pc, #68]	; (13bc <__sfp+0x74>)
    1376:	6625      	str	r5, [r4, #96]	; 0x60
    1378:	e9c4 5500 	strd	r5, r5, [r4]
    137c:	60a5      	str	r5, [r4, #8]
    137e:	e9c4 3503 	strd	r3, r5, [r4, #12]
    1382:	e9c4 5505 	strd	r5, r5, [r4, #20]
    1386:	2208      	movs	r2, #8
    1388:	4629      	mov	r1, r5
    138a:	f104 0058 	add.w	r0, r4, #88	; 0x58
    138e:	f000 fe93 	bl	20b8 <memset>
    1392:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
    1396:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
    139a:	4620      	mov	r0, r4
    139c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    139e:	3464      	adds	r4, #100	; 0x64
    13a0:	e7df      	b.n	1362 <__sfp+0x1a>
    13a2:	2104      	movs	r1, #4
    13a4:	4638      	mov	r0, r7
    13a6:	f7ff ff91 	bl	12cc <__sfmoreglue>
    13aa:	4604      	mov	r4, r0
    13ac:	6030      	str	r0, [r6, #0]
    13ae:	2800      	cmp	r0, #0
    13b0:	d1db      	bne.n	136a <__sfp+0x22>
    13b2:	230c      	movs	r3, #12
    13b4:	603b      	str	r3, [r7, #0]
    13b6:	e7f0      	b.n	139a <__sfp+0x52>
    13b8:	0002e8cc 	.word	0x0002e8cc
    13bc:	ffff0001 	.word	0xffff0001

000013c0 <__sfvwrite_r>:
    13c0:	6893      	ldr	r3, [r2, #8]
    13c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    13c6:	4607      	mov	r7, r0
    13c8:	460c      	mov	r4, r1
    13ca:	4690      	mov	r8, r2
    13cc:	b91b      	cbnz	r3, 13d6 <__sfvwrite_r+0x16>
    13ce:	2000      	movs	r0, #0
    13d0:	b003      	add	sp, #12
    13d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13d6:	898b      	ldrh	r3, [r1, #12]
    13d8:	0718      	lsls	r0, r3, #28
    13da:	d550      	bpl.n	147e <__sfvwrite_r+0xbe>
    13dc:	690b      	ldr	r3, [r1, #16]
    13de:	2b00      	cmp	r3, #0
    13e0:	d04d      	beq.n	147e <__sfvwrite_r+0xbe>
    13e2:	89a3      	ldrh	r3, [r4, #12]
    13e4:	f8d8 6000 	ldr.w	r6, [r8]
    13e8:	f013 0902 	ands.w	r9, r3, #2
    13ec:	d16c      	bne.n	14c8 <__sfvwrite_r+0x108>
    13ee:	f013 0301 	ands.w	r3, r3, #1
    13f2:	f000 809c 	beq.w	152e <__sfvwrite_r+0x16e>
    13f6:	4648      	mov	r0, r9
    13f8:	46ca      	mov	sl, r9
    13fa:	46cb      	mov	fp, r9
    13fc:	f1bb 0f00 	cmp.w	fp, #0
    1400:	f000 8106 	beq.w	1610 <__sfvwrite_r+0x250>
    1404:	b950      	cbnz	r0, 141c <__sfvwrite_r+0x5c>
    1406:	465a      	mov	r2, fp
    1408:	210a      	movs	r1, #10
    140a:	4650      	mov	r0, sl
    140c:	f7fe fe78 	bl	100 <memchr>
    1410:	2800      	cmp	r0, #0
    1412:	f000 8102 	beq.w	161a <__sfvwrite_r+0x25a>
    1416:	3001      	adds	r0, #1
    1418:	eba0 090a 	sub.w	r9, r0, sl
    141c:	6820      	ldr	r0, [r4, #0]
    141e:	6921      	ldr	r1, [r4, #16]
    1420:	6962      	ldr	r2, [r4, #20]
    1422:	45d9      	cmp	r9, fp
    1424:	464b      	mov	r3, r9
    1426:	bf28      	it	cs
    1428:	465b      	movcs	r3, fp
    142a:	4288      	cmp	r0, r1
    142c:	f240 80f8 	bls.w	1620 <__sfvwrite_r+0x260>
    1430:	68a5      	ldr	r5, [r4, #8]
    1432:	4415      	add	r5, r2
    1434:	42ab      	cmp	r3, r5
    1436:	f340 80f3 	ble.w	1620 <__sfvwrite_r+0x260>
    143a:	4651      	mov	r1, sl
    143c:	462a      	mov	r2, r5
    143e:	f000 fe21 	bl	2084 <memmove>
    1442:	6823      	ldr	r3, [r4, #0]
    1444:	442b      	add	r3, r5
    1446:	6023      	str	r3, [r4, #0]
    1448:	4621      	mov	r1, r4
    144a:	4638      	mov	r0, r7
    144c:	f7ff fef0 	bl	1230 <_fflush_r>
    1450:	2800      	cmp	r0, #0
    1452:	d167      	bne.n	1524 <__sfvwrite_r+0x164>
    1454:	ebb9 0905 	subs.w	r9, r9, r5
    1458:	f040 80fc 	bne.w	1654 <__sfvwrite_r+0x294>
    145c:	4621      	mov	r1, r4
    145e:	4638      	mov	r0, r7
    1460:	f7ff fee6 	bl	1230 <_fflush_r>
    1464:	2800      	cmp	r0, #0
    1466:	d15d      	bne.n	1524 <__sfvwrite_r+0x164>
    1468:	f8d8 3008 	ldr.w	r3, [r8, #8]
    146c:	44aa      	add	sl, r5
    146e:	ebab 0b05 	sub.w	fp, fp, r5
    1472:	1b5d      	subs	r5, r3, r5
    1474:	f8c8 5008 	str.w	r5, [r8, #8]
    1478:	2d00      	cmp	r5, #0
    147a:	d1bf      	bne.n	13fc <__sfvwrite_r+0x3c>
    147c:	e7a7      	b.n	13ce <__sfvwrite_r+0xe>
    147e:	4621      	mov	r1, r4
    1480:	4638      	mov	r0, r7
    1482:	f7ff fdef 	bl	1064 <__swsetup_r>
    1486:	2800      	cmp	r0, #0
    1488:	d0ab      	beq.n	13e2 <__sfvwrite_r+0x22>
    148a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    148e:	e79f      	b.n	13d0 <__sfvwrite_r+0x10>
    1490:	e9d6 a900 	ldrd	sl, r9, [r6]
    1494:	3608      	adds	r6, #8
    1496:	f1b9 0f00 	cmp.w	r9, #0
    149a:	d0f9      	beq.n	1490 <__sfvwrite_r+0xd0>
    149c:	45d9      	cmp	r9, fp
    149e:	464b      	mov	r3, r9
    14a0:	4652      	mov	r2, sl
    14a2:	bf28      	it	cs
    14a4:	465b      	movcs	r3, fp
    14a6:	69e1      	ldr	r1, [r4, #28]
    14a8:	6a65      	ldr	r5, [r4, #36]	; 0x24
    14aa:	4638      	mov	r0, r7
    14ac:	47a8      	blx	r5
    14ae:	2800      	cmp	r0, #0
    14b0:	dd38      	ble.n	1524 <__sfvwrite_r+0x164>
    14b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
    14b6:	4482      	add	sl, r0
    14b8:	eba9 0900 	sub.w	r9, r9, r0
    14bc:	1a18      	subs	r0, r3, r0
    14be:	f8c8 0008 	str.w	r0, [r8, #8]
    14c2:	2800      	cmp	r0, #0
    14c4:	d1e7      	bne.n	1496 <__sfvwrite_r+0xd6>
    14c6:	e782      	b.n	13ce <__sfvwrite_r+0xe>
    14c8:	f04f 0a00 	mov.w	sl, #0
    14cc:	46d1      	mov	r9, sl
    14ce:	f8df b18c 	ldr.w	fp, [pc, #396]	; 165c <__sfvwrite_r+0x29c>
    14d2:	e7e0      	b.n	1496 <__sfvwrite_r+0xd6>
    14d4:	e9d6 9a00 	ldrd	r9, sl, [r6]
    14d8:	3608      	adds	r6, #8
    14da:	f1ba 0f00 	cmp.w	sl, #0
    14de:	d0f9      	beq.n	14d4 <__sfvwrite_r+0x114>
    14e0:	89a2      	ldrh	r2, [r4, #12]
    14e2:	68a3      	ldr	r3, [r4, #8]
    14e4:	6820      	ldr	r0, [r4, #0]
    14e6:	0591      	lsls	r1, r2, #22
    14e8:	d564      	bpl.n	15b4 <__sfvwrite_r+0x1f4>
    14ea:	4553      	cmp	r3, sl
    14ec:	d836      	bhi.n	155c <__sfvwrite_r+0x19c>
    14ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
    14f2:	d033      	beq.n	155c <__sfvwrite_r+0x19c>
    14f4:	6921      	ldr	r1, [r4, #16]
    14f6:	6965      	ldr	r5, [r4, #20]
    14f8:	eba0 0b01 	sub.w	fp, r0, r1
    14fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1500:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
    1504:	f10b 0301 	add.w	r3, fp, #1
    1508:	4453      	add	r3, sl
    150a:	106d      	asrs	r5, r5, #1
    150c:	429d      	cmp	r5, r3
    150e:	bf38      	it	cc
    1510:	461d      	movcc	r5, r3
    1512:	0553      	lsls	r3, r2, #21
    1514:	d53e      	bpl.n	1594 <__sfvwrite_r+0x1d4>
    1516:	4629      	mov	r1, r5
    1518:	4638      	mov	r0, r7
    151a:	f7ff f973 	bl	804 <_malloc_r>
    151e:	b948      	cbnz	r0, 1534 <__sfvwrite_r+0x174>
    1520:	230c      	movs	r3, #12
    1522:	603b      	str	r3, [r7, #0]
    1524:	89a3      	ldrh	r3, [r4, #12]
    1526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    152a:	81a3      	strh	r3, [r4, #12]
    152c:	e7ad      	b.n	148a <__sfvwrite_r+0xca>
    152e:	4699      	mov	r9, r3
    1530:	469a      	mov	sl, r3
    1532:	e7d2      	b.n	14da <__sfvwrite_r+0x11a>
    1534:	465a      	mov	r2, fp
    1536:	6921      	ldr	r1, [r4, #16]
    1538:	9001      	str	r0, [sp, #4]
    153a:	f000 fd95 	bl	2068 <memcpy>
    153e:	89a2      	ldrh	r2, [r4, #12]
    1540:	9b01      	ldr	r3, [sp, #4]
    1542:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    1546:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    154a:	81a2      	strh	r2, [r4, #12]
    154c:	6123      	str	r3, [r4, #16]
    154e:	6165      	str	r5, [r4, #20]
    1550:	445b      	add	r3, fp
    1552:	eba5 050b 	sub.w	r5, r5, fp
    1556:	6023      	str	r3, [r4, #0]
    1558:	60a5      	str	r5, [r4, #8]
    155a:	4653      	mov	r3, sl
    155c:	4553      	cmp	r3, sl
    155e:	bf28      	it	cs
    1560:	4653      	movcs	r3, sl
    1562:	461a      	mov	r2, r3
    1564:	4649      	mov	r1, r9
    1566:	6820      	ldr	r0, [r4, #0]
    1568:	9301      	str	r3, [sp, #4]
    156a:	f000 fd8b 	bl	2084 <memmove>
    156e:	68a2      	ldr	r2, [r4, #8]
    1570:	9b01      	ldr	r3, [sp, #4]
    1572:	1ad2      	subs	r2, r2, r3
    1574:	60a2      	str	r2, [r4, #8]
    1576:	6822      	ldr	r2, [r4, #0]
    1578:	4413      	add	r3, r2
    157a:	4655      	mov	r5, sl
    157c:	6023      	str	r3, [r4, #0]
    157e:	f8d8 3008 	ldr.w	r3, [r8, #8]
    1582:	44a9      	add	r9, r5
    1584:	ebaa 0a05 	sub.w	sl, sl, r5
    1588:	1b5d      	subs	r5, r3, r5
    158a:	f8c8 5008 	str.w	r5, [r8, #8]
    158e:	2d00      	cmp	r5, #0
    1590:	d1a3      	bne.n	14da <__sfvwrite_r+0x11a>
    1592:	e71c      	b.n	13ce <__sfvwrite_r+0xe>
    1594:	462a      	mov	r2, r5
    1596:	4638      	mov	r0, r7
    1598:	f000 fe1e 	bl	21d8 <_realloc_r>
    159c:	4603      	mov	r3, r0
    159e:	2800      	cmp	r0, #0
    15a0:	d1d4      	bne.n	154c <__sfvwrite_r+0x18c>
    15a2:	6921      	ldr	r1, [r4, #16]
    15a4:	4638      	mov	r0, r7
    15a6:	f000 f8c7 	bl	1738 <_free_r>
    15aa:	89a3      	ldrh	r3, [r4, #12]
    15ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    15b0:	81a3      	strh	r3, [r4, #12]
    15b2:	e7b5      	b.n	1520 <__sfvwrite_r+0x160>
    15b4:	6922      	ldr	r2, [r4, #16]
    15b6:	4282      	cmp	r2, r0
    15b8:	d302      	bcc.n	15c0 <__sfvwrite_r+0x200>
    15ba:	6962      	ldr	r2, [r4, #20]
    15bc:	4552      	cmp	r2, sl
    15be:	d916      	bls.n	15ee <__sfvwrite_r+0x22e>
    15c0:	4553      	cmp	r3, sl
    15c2:	bf28      	it	cs
    15c4:	4653      	movcs	r3, sl
    15c6:	461a      	mov	r2, r3
    15c8:	4649      	mov	r1, r9
    15ca:	461d      	mov	r5, r3
    15cc:	f000 fd5a 	bl	2084 <memmove>
    15d0:	68a3      	ldr	r3, [r4, #8]
    15d2:	6822      	ldr	r2, [r4, #0]
    15d4:	1b5b      	subs	r3, r3, r5
    15d6:	442a      	add	r2, r5
    15d8:	60a3      	str	r3, [r4, #8]
    15da:	6022      	str	r2, [r4, #0]
    15dc:	2b00      	cmp	r3, #0
    15de:	d1ce      	bne.n	157e <__sfvwrite_r+0x1be>
    15e0:	4621      	mov	r1, r4
    15e2:	4638      	mov	r0, r7
    15e4:	f7ff fe24 	bl	1230 <_fflush_r>
    15e8:	2800      	cmp	r0, #0
    15ea:	d0c8      	beq.n	157e <__sfvwrite_r+0x1be>
    15ec:	e79a      	b.n	1524 <__sfvwrite_r+0x164>
    15ee:	4b1a      	ldr	r3, [pc, #104]	; (1658 <__sfvwrite_r+0x298>)
    15f0:	6a65      	ldr	r5, [r4, #36]	; 0x24
    15f2:	69e1      	ldr	r1, [r4, #28]
    15f4:	459a      	cmp	sl, r3
    15f6:	bf94      	ite	ls
    15f8:	4653      	movls	r3, sl
    15fa:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
    15fe:	4638      	mov	r0, r7
    1600:	fb93 f3f2 	sdiv	r3, r3, r2
    1604:	4353      	muls	r3, r2
    1606:	464a      	mov	r2, r9
    1608:	47a8      	blx	r5
    160a:	1e05      	subs	r5, r0, #0
    160c:	dcb7      	bgt.n	157e <__sfvwrite_r+0x1be>
    160e:	e789      	b.n	1524 <__sfvwrite_r+0x164>
    1610:	e9d6 ab00 	ldrd	sl, fp, [r6]
    1614:	2000      	movs	r0, #0
    1616:	3608      	adds	r6, #8
    1618:	e6f0      	b.n	13fc <__sfvwrite_r+0x3c>
    161a:	f10b 0901 	add.w	r9, fp, #1
    161e:	e6fd      	b.n	141c <__sfvwrite_r+0x5c>
    1620:	429a      	cmp	r2, r3
    1622:	dc09      	bgt.n	1638 <__sfvwrite_r+0x278>
    1624:	6a65      	ldr	r5, [r4, #36]	; 0x24
    1626:	69e1      	ldr	r1, [r4, #28]
    1628:	4613      	mov	r3, r2
    162a:	4638      	mov	r0, r7
    162c:	4652      	mov	r2, sl
    162e:	47a8      	blx	r5
    1630:	1e05      	subs	r5, r0, #0
    1632:	f73f af0f 	bgt.w	1454 <__sfvwrite_r+0x94>
    1636:	e775      	b.n	1524 <__sfvwrite_r+0x164>
    1638:	461a      	mov	r2, r3
    163a:	4651      	mov	r1, sl
    163c:	9301      	str	r3, [sp, #4]
    163e:	f000 fd21 	bl	2084 <memmove>
    1642:	9b01      	ldr	r3, [sp, #4]
    1644:	68a2      	ldr	r2, [r4, #8]
    1646:	1ad2      	subs	r2, r2, r3
    1648:	60a2      	str	r2, [r4, #8]
    164a:	6822      	ldr	r2, [r4, #0]
    164c:	441a      	add	r2, r3
    164e:	6022      	str	r2, [r4, #0]
    1650:	461d      	mov	r5, r3
    1652:	e6ff      	b.n	1454 <__sfvwrite_r+0x94>
    1654:	2001      	movs	r0, #1
    1656:	e707      	b.n	1468 <__sfvwrite_r+0xa8>
    1658:	7ffffffe 	.word	0x7ffffffe
    165c:	7ffffc00 	.word	0x7ffffc00

00001660 <__swhatbuf_r>:
    1660:	b570      	push	{r4, r5, r6, lr}
    1662:	460e      	mov	r6, r1
    1664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1668:	2900      	cmp	r1, #0
    166a:	b096      	sub	sp, #88	; 0x58
    166c:	4614      	mov	r4, r2
    166e:	461d      	mov	r5, r3
    1670:	da09      	bge.n	1686 <__swhatbuf_r+0x26>
    1672:	89b3      	ldrh	r3, [r6, #12]
    1674:	2200      	movs	r2, #0
    1676:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    167a:	602a      	str	r2, [r5, #0]
    167c:	d116      	bne.n	16ac <__swhatbuf_r+0x4c>
    167e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1682:	6023      	str	r3, [r4, #0]
    1684:	e015      	b.n	16b2 <__swhatbuf_r+0x52>
    1686:	466a      	mov	r2, sp
    1688:	f000 fb40 	bl	1d0c <_fstat_r>
    168c:	2800      	cmp	r0, #0
    168e:	dbf0      	blt.n	1672 <__swhatbuf_r+0x12>
    1690:	9a01      	ldr	r2, [sp, #4]
    1692:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    1696:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    169a:	425a      	negs	r2, r3
    169c:	415a      	adcs	r2, r3
    169e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    16a2:	602a      	str	r2, [r5, #0]
    16a4:	f44f 6000 	mov.w	r0, #2048	; 0x800
    16a8:	6023      	str	r3, [r4, #0]
    16aa:	e002      	b.n	16b2 <__swhatbuf_r+0x52>
    16ac:	2340      	movs	r3, #64	; 0x40
    16ae:	6023      	str	r3, [r4, #0]
    16b0:	4610      	mov	r0, r2
    16b2:	b016      	add	sp, #88	; 0x58
    16b4:	bd70      	pop	{r4, r5, r6, pc}

000016b6 <__smakebuf_r>:
    16b6:	898b      	ldrh	r3, [r1, #12]
    16b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    16ba:	079d      	lsls	r5, r3, #30
    16bc:	4606      	mov	r6, r0
    16be:	460c      	mov	r4, r1
    16c0:	d507      	bpl.n	16d2 <__smakebuf_r+0x1c>
    16c2:	f104 0343 	add.w	r3, r4, #67	; 0x43
    16c6:	6023      	str	r3, [r4, #0]
    16c8:	6123      	str	r3, [r4, #16]
    16ca:	2301      	movs	r3, #1
    16cc:	6163      	str	r3, [r4, #20]
    16ce:	b002      	add	sp, #8
    16d0:	bd70      	pop	{r4, r5, r6, pc}
    16d2:	ab01      	add	r3, sp, #4
    16d4:	466a      	mov	r2, sp
    16d6:	f7ff ffc3 	bl	1660 <__swhatbuf_r>
    16da:	9900      	ldr	r1, [sp, #0]
    16dc:	4605      	mov	r5, r0
    16de:	4630      	mov	r0, r6
    16e0:	f7ff f890 	bl	804 <_malloc_r>
    16e4:	b948      	cbnz	r0, 16fa <__smakebuf_r+0x44>
    16e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    16ea:	059a      	lsls	r2, r3, #22
    16ec:	d4ef      	bmi.n	16ce <__smakebuf_r+0x18>
    16ee:	f023 0303 	bic.w	r3, r3, #3
    16f2:	f043 0302 	orr.w	r3, r3, #2
    16f6:	81a3      	strh	r3, [r4, #12]
    16f8:	e7e3      	b.n	16c2 <__smakebuf_r+0xc>
    16fa:	4b0e      	ldr	r3, [pc, #56]	; (1734 <__smakebuf_r+0x7e>)
    16fc:	63f3      	str	r3, [r6, #60]	; 0x3c
    16fe:	89a3      	ldrh	r3, [r4, #12]
    1700:	6020      	str	r0, [r4, #0]
    1702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1706:	81a3      	strh	r3, [r4, #12]
    1708:	9b00      	ldr	r3, [sp, #0]
    170a:	6163      	str	r3, [r4, #20]
    170c:	9b01      	ldr	r3, [sp, #4]
    170e:	6120      	str	r0, [r4, #16]
    1710:	b15b      	cbz	r3, 172a <__smakebuf_r+0x74>
    1712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    1716:	4630      	mov	r0, r6
    1718:	f000 fb0a 	bl	1d30 <_isatty_r>
    171c:	b128      	cbz	r0, 172a <__smakebuf_r+0x74>
    171e:	89a3      	ldrh	r3, [r4, #12]
    1720:	f023 0303 	bic.w	r3, r3, #3
    1724:	f043 0301 	orr.w	r3, r3, #1
    1728:	81a3      	strh	r3, [r4, #12]
    172a:	89a3      	ldrh	r3, [r4, #12]
    172c:	431d      	orrs	r5, r3
    172e:	81a5      	strh	r5, [r4, #12]
    1730:	e7cd      	b.n	16ce <__smakebuf_r+0x18>
    1732:	bf00      	nop
    1734:	000012c1 	.word	0x000012c1

00001738 <_free_r>:
    1738:	b538      	push	{r3, r4, r5, lr}
    173a:	4605      	mov	r5, r0
    173c:	2900      	cmp	r1, #0
    173e:	d045      	beq.n	17cc <_free_r+0x94>
    1740:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1744:	1f0c      	subs	r4, r1, #4
    1746:	2b00      	cmp	r3, #0
    1748:	bfb8      	it	lt
    174a:	18e4      	addlt	r4, r4, r3
    174c:	f000 fd42 	bl	21d4 <__malloc_lock>
    1750:	4a1f      	ldr	r2, [pc, #124]	; (17d0 <_free_r+0x98>)
    1752:	6813      	ldr	r3, [r2, #0]
    1754:	4610      	mov	r0, r2
    1756:	b933      	cbnz	r3, 1766 <_free_r+0x2e>
    1758:	6063      	str	r3, [r4, #4]
    175a:	6014      	str	r4, [r2, #0]
    175c:	4628      	mov	r0, r5
    175e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1762:	f000 bd38 	b.w	21d6 <__malloc_unlock>
    1766:	42a3      	cmp	r3, r4
    1768:	d90c      	bls.n	1784 <_free_r+0x4c>
    176a:	6821      	ldr	r1, [r4, #0]
    176c:	1862      	adds	r2, r4, r1
    176e:	4293      	cmp	r3, r2
    1770:	bf04      	itt	eq
    1772:	681a      	ldreq	r2, [r3, #0]
    1774:	685b      	ldreq	r3, [r3, #4]
    1776:	6063      	str	r3, [r4, #4]
    1778:	bf04      	itt	eq
    177a:	1852      	addeq	r2, r2, r1
    177c:	6022      	streq	r2, [r4, #0]
    177e:	6004      	str	r4, [r0, #0]
    1780:	e7ec      	b.n	175c <_free_r+0x24>
    1782:	4613      	mov	r3, r2
    1784:	685a      	ldr	r2, [r3, #4]
    1786:	b10a      	cbz	r2, 178c <_free_r+0x54>
    1788:	42a2      	cmp	r2, r4
    178a:	d9fa      	bls.n	1782 <_free_r+0x4a>
    178c:	6819      	ldr	r1, [r3, #0]
    178e:	1858      	adds	r0, r3, r1
    1790:	42a0      	cmp	r0, r4
    1792:	d10b      	bne.n	17ac <_free_r+0x74>
    1794:	6820      	ldr	r0, [r4, #0]
    1796:	4401      	add	r1, r0
    1798:	1858      	adds	r0, r3, r1
    179a:	4282      	cmp	r2, r0
    179c:	6019      	str	r1, [r3, #0]
    179e:	d1dd      	bne.n	175c <_free_r+0x24>
    17a0:	6810      	ldr	r0, [r2, #0]
    17a2:	6852      	ldr	r2, [r2, #4]
    17a4:	605a      	str	r2, [r3, #4]
    17a6:	4401      	add	r1, r0
    17a8:	6019      	str	r1, [r3, #0]
    17aa:	e7d7      	b.n	175c <_free_r+0x24>
    17ac:	d902      	bls.n	17b4 <_free_r+0x7c>
    17ae:	230c      	movs	r3, #12
    17b0:	602b      	str	r3, [r5, #0]
    17b2:	e7d3      	b.n	175c <_free_r+0x24>
    17b4:	6820      	ldr	r0, [r4, #0]
    17b6:	1821      	adds	r1, r4, r0
    17b8:	428a      	cmp	r2, r1
    17ba:	bf04      	itt	eq
    17bc:	6811      	ldreq	r1, [r2, #0]
    17be:	6852      	ldreq	r2, [r2, #4]
    17c0:	6062      	str	r2, [r4, #4]
    17c2:	bf04      	itt	eq
    17c4:	1809      	addeq	r1, r1, r0
    17c6:	6021      	streq	r1, [r4, #0]
    17c8:	605c      	str	r4, [r3, #4]
    17ca:	e7c7      	b.n	175c <_free_r+0x24>
    17cc:	bd38      	pop	{r3, r4, r5, pc}
    17ce:	bf00      	nop
    17d0:	20002000 	.word	0x20002000

000017d4 <__ssputs_r>:
    17d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    17d8:	688e      	ldr	r6, [r1, #8]
    17da:	429e      	cmp	r6, r3
    17dc:	4682      	mov	sl, r0
    17de:	460c      	mov	r4, r1
    17e0:	4691      	mov	r9, r2
    17e2:	4698      	mov	r8, r3
    17e4:	d838      	bhi.n	1858 <__ssputs_r+0x84>
    17e6:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
    17ea:	f41c 6f90 	tst.w	ip, #1152	; 0x480
    17ee:	d031      	beq.n	1854 <__ssputs_r+0x80>
    17f0:	6962      	ldr	r2, [r4, #20]
    17f2:	6825      	ldr	r5, [r4, #0]
    17f4:	6909      	ldr	r1, [r1, #16]
    17f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    17fa:	1a6f      	subs	r7, r5, r1
    17fc:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    1800:	3301      	adds	r3, #1
    1802:	1055      	asrs	r5, r2, #1
    1804:	443b      	add	r3, r7
    1806:	429d      	cmp	r5, r3
    1808:	bf38      	it	cc
    180a:	461d      	movcc	r5, r3
    180c:	f41c 6f80 	tst.w	ip, #1024	; 0x400
    1810:	d030      	beq.n	1874 <__ssputs_r+0xa0>
    1812:	4629      	mov	r1, r5
    1814:	f7fe fff6 	bl	804 <_malloc_r>
    1818:	4606      	mov	r6, r0
    181a:	b950      	cbnz	r0, 1832 <__ssputs_r+0x5e>
    181c:	230c      	movs	r3, #12
    181e:	f8ca 3000 	str.w	r3, [sl]
    1822:	89a3      	ldrh	r3, [r4, #12]
    1824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1828:	81a3      	strh	r3, [r4, #12]
    182a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    182e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1832:	463a      	mov	r2, r7
    1834:	6921      	ldr	r1, [r4, #16]
    1836:	f000 fc17 	bl	2068 <memcpy>
    183a:	89a3      	ldrh	r3, [r4, #12]
    183c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    1840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1844:	81a3      	strh	r3, [r4, #12]
    1846:	6126      	str	r6, [r4, #16]
    1848:	6165      	str	r5, [r4, #20]
    184a:	443e      	add	r6, r7
    184c:	1bed      	subs	r5, r5, r7
    184e:	6026      	str	r6, [r4, #0]
    1850:	60a5      	str	r5, [r4, #8]
    1852:	4646      	mov	r6, r8
    1854:	4546      	cmp	r6, r8
    1856:	d900      	bls.n	185a <__ssputs_r+0x86>
    1858:	4646      	mov	r6, r8
    185a:	4632      	mov	r2, r6
    185c:	4649      	mov	r1, r9
    185e:	6820      	ldr	r0, [r4, #0]
    1860:	f000 fc10 	bl	2084 <memmove>
    1864:	68a3      	ldr	r3, [r4, #8]
    1866:	1b9b      	subs	r3, r3, r6
    1868:	60a3      	str	r3, [r4, #8]
    186a:	6823      	ldr	r3, [r4, #0]
    186c:	441e      	add	r6, r3
    186e:	6026      	str	r6, [r4, #0]
    1870:	2000      	movs	r0, #0
    1872:	e7dc      	b.n	182e <__ssputs_r+0x5a>
    1874:	462a      	mov	r2, r5
    1876:	f000 fcaf 	bl	21d8 <_realloc_r>
    187a:	4606      	mov	r6, r0
    187c:	2800      	cmp	r0, #0
    187e:	d1e2      	bne.n	1846 <__ssputs_r+0x72>
    1880:	6921      	ldr	r1, [r4, #16]
    1882:	4650      	mov	r0, sl
    1884:	f7ff ff58 	bl	1738 <_free_r>
    1888:	e7c8      	b.n	181c <__ssputs_r+0x48>

0000188a <__ssprint_r>:
    188a:	6893      	ldr	r3, [r2, #8]
    188c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1890:	4681      	mov	r9, r0
    1892:	460c      	mov	r4, r1
    1894:	4616      	mov	r6, r2
    1896:	2b00      	cmp	r3, #0
    1898:	d05e      	beq.n	1958 <__ssprint_r+0xce>
    189a:	f04f 0b00 	mov.w	fp, #0
    189e:	f8d2 a000 	ldr.w	sl, [r2]
    18a2:	465f      	mov	r7, fp
    18a4:	b357      	cbz	r7, 18fc <__ssprint_r+0x72>
    18a6:	68a3      	ldr	r3, [r4, #8]
    18a8:	429f      	cmp	r7, r3
    18aa:	d340      	bcc.n	192e <__ssprint_r+0xa4>
    18ac:	89a2      	ldrh	r2, [r4, #12]
    18ae:	f412 6f90 	tst.w	r2, #1152	; 0x480
    18b2:	d03c      	beq.n	192e <__ssprint_r+0xa4>
    18b4:	6825      	ldr	r5, [r4, #0]
    18b6:	6921      	ldr	r1, [r4, #16]
    18b8:	eba5 0801 	sub.w	r8, r5, r1
    18bc:	6965      	ldr	r5, [r4, #20]
    18be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    18c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
    18c6:	f108 0301 	add.w	r3, r8, #1
    18ca:	443b      	add	r3, r7
    18cc:	106d      	asrs	r5, r5, #1
    18ce:	429d      	cmp	r5, r3
    18d0:	bf38      	it	cc
    18d2:	461d      	movcc	r5, r3
    18d4:	0553      	lsls	r3, r2, #21
    18d6:	d544      	bpl.n	1962 <__ssprint_r+0xd8>
    18d8:	4629      	mov	r1, r5
    18da:	4648      	mov	r0, r9
    18dc:	f7fe ff92 	bl	804 <_malloc_r>
    18e0:	b988      	cbnz	r0, 1906 <__ssprint_r+0x7c>
    18e2:	230c      	movs	r3, #12
    18e4:	f8c9 3000 	str.w	r3, [r9]
    18e8:	89a3      	ldrh	r3, [r4, #12]
    18ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    18ee:	81a3      	strh	r3, [r4, #12]
    18f0:	2300      	movs	r3, #0
    18f2:	e9c6 3301 	strd	r3, r3, [r6, #4]
    18f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    18fa:	e02f      	b.n	195c <__ssprint_r+0xd2>
    18fc:	e9da b700 	ldrd	fp, r7, [sl]
    1900:	f10a 0a08 	add.w	sl, sl, #8
    1904:	e7ce      	b.n	18a4 <__ssprint_r+0x1a>
    1906:	4642      	mov	r2, r8
    1908:	6921      	ldr	r1, [r4, #16]
    190a:	9001      	str	r0, [sp, #4]
    190c:	f000 fbac 	bl	2068 <memcpy>
    1910:	89a2      	ldrh	r2, [r4, #12]
    1912:	9b01      	ldr	r3, [sp, #4]
    1914:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    1918:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    191c:	81a2      	strh	r2, [r4, #12]
    191e:	6123      	str	r3, [r4, #16]
    1920:	6165      	str	r5, [r4, #20]
    1922:	4443      	add	r3, r8
    1924:	eba5 0508 	sub.w	r5, r5, r8
    1928:	6023      	str	r3, [r4, #0]
    192a:	60a5      	str	r5, [r4, #8]
    192c:	463b      	mov	r3, r7
    192e:	42bb      	cmp	r3, r7
    1930:	bf28      	it	cs
    1932:	463b      	movcs	r3, r7
    1934:	461a      	mov	r2, r3
    1936:	4659      	mov	r1, fp
    1938:	6820      	ldr	r0, [r4, #0]
    193a:	9301      	str	r3, [sp, #4]
    193c:	f000 fba2 	bl	2084 <memmove>
    1940:	68a2      	ldr	r2, [r4, #8]
    1942:	9b01      	ldr	r3, [sp, #4]
    1944:	1ad2      	subs	r2, r2, r3
    1946:	60a2      	str	r2, [r4, #8]
    1948:	6822      	ldr	r2, [r4, #0]
    194a:	4413      	add	r3, r2
    194c:	6023      	str	r3, [r4, #0]
    194e:	68b3      	ldr	r3, [r6, #8]
    1950:	1bdf      	subs	r7, r3, r7
    1952:	60b7      	str	r7, [r6, #8]
    1954:	2f00      	cmp	r7, #0
    1956:	d1d1      	bne.n	18fc <__ssprint_r+0x72>
    1958:	2000      	movs	r0, #0
    195a:	6070      	str	r0, [r6, #4]
    195c:	b003      	add	sp, #12
    195e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1962:	462a      	mov	r2, r5
    1964:	4648      	mov	r0, r9
    1966:	f000 fc37 	bl	21d8 <_realloc_r>
    196a:	4603      	mov	r3, r0
    196c:	2800      	cmp	r0, #0
    196e:	d1d6      	bne.n	191e <__ssprint_r+0x94>
    1970:	6921      	ldr	r1, [r4, #16]
    1972:	4648      	mov	r0, r9
    1974:	f7ff fee0 	bl	1738 <_free_r>
    1978:	e7b3      	b.n	18e2 <__ssprint_r+0x58>

0000197a <_svfiprintf_r>:
    197a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    197e:	461e      	mov	r6, r3
    1980:	898b      	ldrh	r3, [r1, #12]
    1982:	061b      	lsls	r3, r3, #24
    1984:	b09d      	sub	sp, #116	; 0x74
    1986:	4607      	mov	r7, r0
    1988:	460d      	mov	r5, r1
    198a:	4614      	mov	r4, r2
    198c:	d50e      	bpl.n	19ac <_svfiprintf_r+0x32>
    198e:	690b      	ldr	r3, [r1, #16]
    1990:	b963      	cbnz	r3, 19ac <_svfiprintf_r+0x32>
    1992:	2140      	movs	r1, #64	; 0x40
    1994:	f7fe ff36 	bl	804 <_malloc_r>
    1998:	6028      	str	r0, [r5, #0]
    199a:	6128      	str	r0, [r5, #16]
    199c:	b920      	cbnz	r0, 19a8 <_svfiprintf_r+0x2e>
    199e:	230c      	movs	r3, #12
    19a0:	603b      	str	r3, [r7, #0]
    19a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    19a6:	e0c9      	b.n	1b3c <_svfiprintf_r+0x1c2>
    19a8:	2340      	movs	r3, #64	; 0x40
    19aa:	616b      	str	r3, [r5, #20]
    19ac:	2300      	movs	r3, #0
    19ae:	9309      	str	r3, [sp, #36]	; 0x24
    19b0:	2320      	movs	r3, #32
    19b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    19b6:	f8df 919c 	ldr.w	r9, [pc, #412]	; 1b54 <_svfiprintf_r+0x1da>
    19ba:	9603      	str	r6, [sp, #12]
    19bc:	2330      	movs	r3, #48	; 0x30
    19be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    19c2:	f04f 0a01 	mov.w	sl, #1
    19c6:	4623      	mov	r3, r4
    19c8:	461e      	mov	r6, r3
    19ca:	f813 2b01 	ldrb.w	r2, [r3], #1
    19ce:	b10a      	cbz	r2, 19d4 <_svfiprintf_r+0x5a>
    19d0:	2a25      	cmp	r2, #37	; 0x25
    19d2:	d1f9      	bne.n	19c8 <_svfiprintf_r+0x4e>
    19d4:	ebb6 0b04 	subs.w	fp, r6, r4
    19d8:	d00b      	beq.n	19f2 <_svfiprintf_r+0x78>
    19da:	465b      	mov	r3, fp
    19dc:	4622      	mov	r2, r4
    19de:	4629      	mov	r1, r5
    19e0:	4638      	mov	r0, r7
    19e2:	f7ff fef7 	bl	17d4 <__ssputs_r>
    19e6:	3001      	adds	r0, #1
    19e8:	f000 80a3 	beq.w	1b32 <_svfiprintf_r+0x1b8>
    19ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    19ee:	445b      	add	r3, fp
    19f0:	9309      	str	r3, [sp, #36]	; 0x24
    19f2:	7833      	ldrb	r3, [r6, #0]
    19f4:	2b00      	cmp	r3, #0
    19f6:	f000 809c 	beq.w	1b32 <_svfiprintf_r+0x1b8>
    19fa:	2300      	movs	r3, #0
    19fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1a00:	e9cd 2305 	strd	r2, r3, [sp, #20]
    1a04:	3601      	adds	r6, #1
    1a06:	9304      	str	r3, [sp, #16]
    1a08:	9307      	str	r3, [sp, #28]
    1a0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    1a0e:	931a      	str	r3, [sp, #104]	; 0x68
    1a10:	4634      	mov	r4, r6
    1a12:	2205      	movs	r2, #5
    1a14:	f814 1b01 	ldrb.w	r1, [r4], #1
    1a18:	484e      	ldr	r0, [pc, #312]	; (1b54 <_svfiprintf_r+0x1da>)
    1a1a:	f7fe fb71 	bl	100 <memchr>
    1a1e:	9b04      	ldr	r3, [sp, #16]
    1a20:	b9c0      	cbnz	r0, 1a54 <_svfiprintf_r+0xda>
    1a22:	06d9      	lsls	r1, r3, #27
    1a24:	bf44      	itt	mi
    1a26:	2220      	movmi	r2, #32
    1a28:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    1a2c:	071a      	lsls	r2, r3, #28
    1a2e:	bf44      	itt	mi
    1a30:	222b      	movmi	r2, #43	; 0x2b
    1a32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    1a36:	7832      	ldrb	r2, [r6, #0]
    1a38:	2a2a      	cmp	r2, #42	; 0x2a
    1a3a:	d013      	beq.n	1a64 <_svfiprintf_r+0xea>
    1a3c:	9a07      	ldr	r2, [sp, #28]
    1a3e:	4634      	mov	r4, r6
    1a40:	2000      	movs	r0, #0
    1a42:	260a      	movs	r6, #10
    1a44:	4621      	mov	r1, r4
    1a46:	f811 3b01 	ldrb.w	r3, [r1], #1
    1a4a:	3b30      	subs	r3, #48	; 0x30
    1a4c:	2b09      	cmp	r3, #9
    1a4e:	d94b      	bls.n	1ae8 <_svfiprintf_r+0x16e>
    1a50:	b970      	cbnz	r0, 1a70 <_svfiprintf_r+0xf6>
    1a52:	e014      	b.n	1a7e <_svfiprintf_r+0x104>
    1a54:	eba0 0009 	sub.w	r0, r0, r9
    1a58:	fa0a f000 	lsl.w	r0, sl, r0
    1a5c:	4318      	orrs	r0, r3
    1a5e:	9004      	str	r0, [sp, #16]
    1a60:	4626      	mov	r6, r4
    1a62:	e7d5      	b.n	1a10 <_svfiprintf_r+0x96>
    1a64:	9a03      	ldr	r2, [sp, #12]
    1a66:	1d11      	adds	r1, r2, #4
    1a68:	6812      	ldr	r2, [r2, #0]
    1a6a:	9103      	str	r1, [sp, #12]
    1a6c:	2a00      	cmp	r2, #0
    1a6e:	db01      	blt.n	1a74 <_svfiprintf_r+0xfa>
    1a70:	9207      	str	r2, [sp, #28]
    1a72:	e004      	b.n	1a7e <_svfiprintf_r+0x104>
    1a74:	4252      	negs	r2, r2
    1a76:	f043 0302 	orr.w	r3, r3, #2
    1a7a:	9207      	str	r2, [sp, #28]
    1a7c:	9304      	str	r3, [sp, #16]
    1a7e:	7823      	ldrb	r3, [r4, #0]
    1a80:	2b2e      	cmp	r3, #46	; 0x2e
    1a82:	d10c      	bne.n	1a9e <_svfiprintf_r+0x124>
    1a84:	7863      	ldrb	r3, [r4, #1]
    1a86:	2b2a      	cmp	r3, #42	; 0x2a
    1a88:	d133      	bne.n	1af2 <_svfiprintf_r+0x178>
    1a8a:	9b03      	ldr	r3, [sp, #12]
    1a8c:	1d1a      	adds	r2, r3, #4
    1a8e:	681b      	ldr	r3, [r3, #0]
    1a90:	9203      	str	r2, [sp, #12]
    1a92:	2b00      	cmp	r3, #0
    1a94:	bfb8      	it	lt
    1a96:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    1a9a:	3402      	adds	r4, #2
    1a9c:	9305      	str	r3, [sp, #20]
    1a9e:	4e2e      	ldr	r6, [pc, #184]	; (1b58 <_svfiprintf_r+0x1de>)
    1aa0:	7821      	ldrb	r1, [r4, #0]
    1aa2:	2203      	movs	r2, #3
    1aa4:	4630      	mov	r0, r6
    1aa6:	f7fe fb2b 	bl	100 <memchr>
    1aaa:	b138      	cbz	r0, 1abc <_svfiprintf_r+0x142>
    1aac:	2340      	movs	r3, #64	; 0x40
    1aae:	1b80      	subs	r0, r0, r6
    1ab0:	fa03 f000 	lsl.w	r0, r3, r0
    1ab4:	9b04      	ldr	r3, [sp, #16]
    1ab6:	4303      	orrs	r3, r0
    1ab8:	3401      	adds	r4, #1
    1aba:	9304      	str	r3, [sp, #16]
    1abc:	f814 1b01 	ldrb.w	r1, [r4], #1
    1ac0:	4826      	ldr	r0, [pc, #152]	; (1b5c <_svfiprintf_r+0x1e2>)
    1ac2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    1ac6:	2206      	movs	r2, #6
    1ac8:	f7fe fb1a 	bl	100 <memchr>
    1acc:	2800      	cmp	r0, #0
    1ace:	d038      	beq.n	1b42 <_svfiprintf_r+0x1c8>
    1ad0:	4b23      	ldr	r3, [pc, #140]	; (1b60 <_svfiprintf_r+0x1e6>)
    1ad2:	bb13      	cbnz	r3, 1b1a <_svfiprintf_r+0x1a0>
    1ad4:	9b03      	ldr	r3, [sp, #12]
    1ad6:	3307      	adds	r3, #7
    1ad8:	f023 0307 	bic.w	r3, r3, #7
    1adc:	3308      	adds	r3, #8
    1ade:	9303      	str	r3, [sp, #12]
    1ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1ae2:	4443      	add	r3, r8
    1ae4:	9309      	str	r3, [sp, #36]	; 0x24
    1ae6:	e76e      	b.n	19c6 <_svfiprintf_r+0x4c>
    1ae8:	fb06 3202 	mla	r2, r6, r2, r3
    1aec:	2001      	movs	r0, #1
    1aee:	460c      	mov	r4, r1
    1af0:	e7a8      	b.n	1a44 <_svfiprintf_r+0xca>
    1af2:	2300      	movs	r3, #0
    1af4:	3401      	adds	r4, #1
    1af6:	9305      	str	r3, [sp, #20]
    1af8:	4619      	mov	r1, r3
    1afa:	260a      	movs	r6, #10
    1afc:	4620      	mov	r0, r4
    1afe:	f810 2b01 	ldrb.w	r2, [r0], #1
    1b02:	3a30      	subs	r2, #48	; 0x30
    1b04:	2a09      	cmp	r2, #9
    1b06:	d903      	bls.n	1b10 <_svfiprintf_r+0x196>
    1b08:	2b00      	cmp	r3, #0
    1b0a:	d0c8      	beq.n	1a9e <_svfiprintf_r+0x124>
    1b0c:	9105      	str	r1, [sp, #20]
    1b0e:	e7c6      	b.n	1a9e <_svfiprintf_r+0x124>
    1b10:	fb06 2101 	mla	r1, r6, r1, r2
    1b14:	2301      	movs	r3, #1
    1b16:	4604      	mov	r4, r0
    1b18:	e7f0      	b.n	1afc <_svfiprintf_r+0x182>
    1b1a:	ab03      	add	r3, sp, #12
    1b1c:	9300      	str	r3, [sp, #0]
    1b1e:	462a      	mov	r2, r5
    1b20:	4b10      	ldr	r3, [pc, #64]	; (1b64 <_svfiprintf_r+0x1ea>)
    1b22:	a904      	add	r1, sp, #16
    1b24:	4638      	mov	r0, r7
    1b26:	f3af 8000 	nop.w
    1b2a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    1b2e:	4680      	mov	r8, r0
    1b30:	d1d6      	bne.n	1ae0 <_svfiprintf_r+0x166>
    1b32:	89ab      	ldrh	r3, [r5, #12]
    1b34:	065b      	lsls	r3, r3, #25
    1b36:	f53f af34 	bmi.w	19a2 <_svfiprintf_r+0x28>
    1b3a:	9809      	ldr	r0, [sp, #36]	; 0x24
    1b3c:	b01d      	add	sp, #116	; 0x74
    1b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b42:	ab03      	add	r3, sp, #12
    1b44:	9300      	str	r3, [sp, #0]
    1b46:	462a      	mov	r2, r5
    1b48:	4b06      	ldr	r3, [pc, #24]	; (1b64 <_svfiprintf_r+0x1ea>)
    1b4a:	a904      	add	r1, sp, #16
    1b4c:	4638      	mov	r0, r7
    1b4e:	f7ff f85a 	bl	c06 <_printf_i>
    1b52:	e7ea      	b.n	1b2a <_svfiprintf_r+0x1b0>
    1b54:	0002f099 	.word	0x0002f099
    1b58:	0002f09f 	.word	0x0002f09f
    1b5c:	0002f0a3 	.word	0x0002f0a3
    1b60:	00000000 	.word	0x00000000
    1b64:	000017d5 	.word	0x000017d5

00001b68 <_init_signal_r>:
    1b68:	b538      	push	{r3, r4, r5, lr}
    1b6a:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
    1b6e:	4605      	mov	r5, r0
    1b70:	b95c      	cbnz	r4, 1b8a <_init_signal_r+0x22>
    1b72:	2180      	movs	r1, #128	; 0x80
    1b74:	f7fe fe46 	bl	804 <_malloc_r>
    1b78:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
    1b7c:	b138      	cbz	r0, 1b8e <_init_signal_r+0x26>
    1b7e:	1f03      	subs	r3, r0, #4
    1b80:	307c      	adds	r0, #124	; 0x7c
    1b82:	f843 4f04 	str.w	r4, [r3, #4]!
    1b86:	4283      	cmp	r3, r0
    1b88:	d1fb      	bne.n	1b82 <_init_signal_r+0x1a>
    1b8a:	2000      	movs	r0, #0
    1b8c:	bd38      	pop	{r3, r4, r5, pc}
    1b8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1b92:	e7fb      	b.n	1b8c <_init_signal_r+0x24>

00001b94 <_signal_r>:
    1b94:	291f      	cmp	r1, #31
    1b96:	b570      	push	{r4, r5, r6, lr}
    1b98:	4604      	mov	r4, r0
    1b9a:	460d      	mov	r5, r1
    1b9c:	4616      	mov	r6, r2
    1b9e:	d904      	bls.n	1baa <_signal_r+0x16>
    1ba0:	2316      	movs	r3, #22
    1ba2:	6003      	str	r3, [r0, #0]
    1ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1ba8:	e008      	b.n	1bbc <_signal_r+0x28>
    1baa:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
    1bae:	b133      	cbz	r3, 1bbe <_signal_r+0x2a>
    1bb0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    1bb4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    1bb8:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
    1bbc:	bd70      	pop	{r4, r5, r6, pc}
    1bbe:	f7ff ffd3 	bl	1b68 <_init_signal_r>
    1bc2:	2800      	cmp	r0, #0
    1bc4:	d0f4      	beq.n	1bb0 <_signal_r+0x1c>
    1bc6:	e7ed      	b.n	1ba4 <_signal_r+0x10>

00001bc8 <_raise_r>:
    1bc8:	291f      	cmp	r1, #31
    1bca:	b538      	push	{r3, r4, r5, lr}
    1bcc:	4604      	mov	r4, r0
    1bce:	460d      	mov	r5, r1
    1bd0:	d904      	bls.n	1bdc <_raise_r+0x14>
    1bd2:	2316      	movs	r3, #22
    1bd4:	6003      	str	r3, [r0, #0]
    1bd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1bda:	bd38      	pop	{r3, r4, r5, pc}
    1bdc:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    1be0:	b112      	cbz	r2, 1be8 <_raise_r+0x20>
    1be2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    1be6:	b94b      	cbnz	r3, 1bfc <_raise_r+0x34>
    1be8:	4620      	mov	r0, r4
    1bea:	f000 f86b 	bl	1cc4 <_getpid_r>
    1bee:	462a      	mov	r2, r5
    1bf0:	4601      	mov	r1, r0
    1bf2:	4620      	mov	r0, r4
    1bf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1bf8:	f000 b852 	b.w	1ca0 <_kill_r>
    1bfc:	2b01      	cmp	r3, #1
    1bfe:	d00a      	beq.n	1c16 <_raise_r+0x4e>
    1c00:	1c59      	adds	r1, r3, #1
    1c02:	d103      	bne.n	1c0c <_raise_r+0x44>
    1c04:	2316      	movs	r3, #22
    1c06:	6003      	str	r3, [r0, #0]
    1c08:	2001      	movs	r0, #1
    1c0a:	e7e6      	b.n	1bda <_raise_r+0x12>
    1c0c:	2400      	movs	r4, #0
    1c0e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    1c12:	4628      	mov	r0, r5
    1c14:	4798      	blx	r3
    1c16:	2000      	movs	r0, #0
    1c18:	e7df      	b.n	1bda <_raise_r+0x12>

00001c1a <__sigtramp_r>:
    1c1a:	291f      	cmp	r1, #31
    1c1c:	b538      	push	{r3, r4, r5, lr}
    1c1e:	4604      	mov	r4, r0
    1c20:	460d      	mov	r5, r1
    1c22:	d902      	bls.n	1c2a <__sigtramp_r+0x10>
    1c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1c28:	bd38      	pop	{r3, r4, r5, pc}
    1c2a:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
    1c2e:	b133      	cbz	r3, 1c3e <__sigtramp_r+0x24>
    1c30:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    1c34:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
    1c38:	b933      	cbnz	r3, 1c48 <__sigtramp_r+0x2e>
    1c3a:	2001      	movs	r0, #1
    1c3c:	e7f4      	b.n	1c28 <__sigtramp_r+0xe>
    1c3e:	f7ff ff93 	bl	1b68 <_init_signal_r>
    1c42:	2800      	cmp	r0, #0
    1c44:	d0f4      	beq.n	1c30 <__sigtramp_r+0x16>
    1c46:	e7ed      	b.n	1c24 <__sigtramp_r+0xa>
    1c48:	1c59      	adds	r1, r3, #1
    1c4a:	d008      	beq.n	1c5e <__sigtramp_r+0x44>
    1c4c:	2b01      	cmp	r3, #1
    1c4e:	d008      	beq.n	1c62 <__sigtramp_r+0x48>
    1c50:	2400      	movs	r4, #0
    1c52:	4628      	mov	r0, r5
    1c54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    1c58:	4798      	blx	r3
    1c5a:	4620      	mov	r0, r4
    1c5c:	e7e4      	b.n	1c28 <__sigtramp_r+0xe>
    1c5e:	2002      	movs	r0, #2
    1c60:	e7e2      	b.n	1c28 <__sigtramp_r+0xe>
    1c62:	2003      	movs	r0, #3
    1c64:	e7e0      	b.n	1c28 <__sigtramp_r+0xe>

00001c66 <raise>:
    1c66:	4b02      	ldr	r3, [pc, #8]	; (1c70 <raise+0xa>)
    1c68:	4601      	mov	r1, r0
    1c6a:	6818      	ldr	r0, [r3, #0]
    1c6c:	f7ff bfac 	b.w	1bc8 <_raise_r>
    1c70:	2000e758 	.word	0x2000e758

00001c74 <signal>:
    1c74:	4b02      	ldr	r3, [pc, #8]	; (1c80 <signal+0xc>)
    1c76:	460a      	mov	r2, r1
    1c78:	4601      	mov	r1, r0
    1c7a:	6818      	ldr	r0, [r3, #0]
    1c7c:	f7ff bf8a 	b.w	1b94 <_signal_r>
    1c80:	2000e758 	.word	0x2000e758

00001c84 <_init_signal>:
    1c84:	4b01      	ldr	r3, [pc, #4]	; (1c8c <_init_signal+0x8>)
    1c86:	6818      	ldr	r0, [r3, #0]
    1c88:	f7ff bf6e 	b.w	1b68 <_init_signal_r>
    1c8c:	2000e758 	.word	0x2000e758

00001c90 <__sigtramp>:
    1c90:	4b02      	ldr	r3, [pc, #8]	; (1c9c <__sigtramp+0xc>)
    1c92:	4601      	mov	r1, r0
    1c94:	6818      	ldr	r0, [r3, #0]
    1c96:	f7ff bfc0 	b.w	1c1a <__sigtramp_r>
    1c9a:	bf00      	nop
    1c9c:	2000e758 	.word	0x2000e758

00001ca0 <_kill_r>:
    1ca0:	b538      	push	{r3, r4, r5, lr}
    1ca2:	4c07      	ldr	r4, [pc, #28]	; (1cc0 <_kill_r+0x20>)
    1ca4:	2300      	movs	r3, #0
    1ca6:	4605      	mov	r5, r0
    1ca8:	4608      	mov	r0, r1
    1caa:	4611      	mov	r1, r2
    1cac:	6023      	str	r3, [r4, #0]
    1cae:	f01f fe00 	bl	218b2 <_kill>
    1cb2:	1c43      	adds	r3, r0, #1
    1cb4:	d102      	bne.n	1cbc <_kill_r+0x1c>
    1cb6:	6823      	ldr	r3, [r4, #0]
    1cb8:	b103      	cbz	r3, 1cbc <_kill_r+0x1c>
    1cba:	602b      	str	r3, [r5, #0]
    1cbc:	bd38      	pop	{r3, r4, r5, pc}
    1cbe:	bf00      	nop
    1cc0:	20006250 	.word	0x20006250

00001cc4 <_getpid_r>:
    1cc4:	f01f be00 	b.w	218c8 <_getpid>

00001cc8 <_write_r>:
    1cc8:	b538      	push	{r3, r4, r5, lr}
    1cca:	4c07      	ldr	r4, [pc, #28]	; (1ce8 <_write_r+0x20>)
    1ccc:	4605      	mov	r5, r0
    1cce:	4608      	mov	r0, r1
    1cd0:	4611      	mov	r1, r2
    1cd2:	2200      	movs	r2, #0
    1cd4:	6022      	str	r2, [r4, #0]
    1cd6:	461a      	mov	r2, r3
    1cd8:	f01f fdbb 	bl	21852 <_write>
    1cdc:	1c43      	adds	r3, r0, #1
    1cde:	d102      	bne.n	1ce6 <_write_r+0x1e>
    1ce0:	6823      	ldr	r3, [r4, #0]
    1ce2:	b103      	cbz	r3, 1ce6 <_write_r+0x1e>
    1ce4:	602b      	str	r3, [r5, #0]
    1ce6:	bd38      	pop	{r3, r4, r5, pc}
    1ce8:	20006250 	.word	0x20006250

00001cec <_close_r>:
    1cec:	b538      	push	{r3, r4, r5, lr}
    1cee:	4c06      	ldr	r4, [pc, #24]	; (1d08 <_close_r+0x1c>)
    1cf0:	2300      	movs	r3, #0
    1cf2:	4605      	mov	r5, r0
    1cf4:	4608      	mov	r0, r1
    1cf6:	6023      	str	r3, [r4, #0]
    1cf8:	f01f fdba 	bl	21870 <_close>
    1cfc:	1c43      	adds	r3, r0, #1
    1cfe:	d102      	bne.n	1d06 <_close_r+0x1a>
    1d00:	6823      	ldr	r3, [r4, #0]
    1d02:	b103      	cbz	r3, 1d06 <_close_r+0x1a>
    1d04:	602b      	str	r3, [r5, #0]
    1d06:	bd38      	pop	{r3, r4, r5, pc}
    1d08:	20006250 	.word	0x20006250

00001d0c <_fstat_r>:
    1d0c:	b538      	push	{r3, r4, r5, lr}
    1d0e:	4c07      	ldr	r4, [pc, #28]	; (1d2c <_fstat_r+0x20>)
    1d10:	2300      	movs	r3, #0
    1d12:	4605      	mov	r5, r0
    1d14:	4608      	mov	r0, r1
    1d16:	4611      	mov	r1, r2
    1d18:	6023      	str	r3, [r4, #0]
    1d1a:	f01f fddc 	bl	218d6 <_fstat>
    1d1e:	1c43      	adds	r3, r0, #1
    1d20:	d102      	bne.n	1d28 <_fstat_r+0x1c>
    1d22:	6823      	ldr	r3, [r4, #0]
    1d24:	b103      	cbz	r3, 1d28 <_fstat_r+0x1c>
    1d26:	602b      	str	r3, [r5, #0]
    1d28:	bd38      	pop	{r3, r4, r5, pc}
    1d2a:	bf00      	nop
    1d2c:	20006250 	.word	0x20006250

00001d30 <_isatty_r>:
    1d30:	b538      	push	{r3, r4, r5, lr}
    1d32:	4c06      	ldr	r4, [pc, #24]	; (1d4c <_isatty_r+0x1c>)
    1d34:	2300      	movs	r3, #0
    1d36:	4605      	mov	r5, r0
    1d38:	4608      	mov	r0, r1
    1d3a:	6023      	str	r3, [r4, #0]
    1d3c:	f01f fdaf 	bl	2189e <_isatty>
    1d40:	1c43      	adds	r3, r0, #1
    1d42:	d102      	bne.n	1d4a <_isatty_r+0x1a>
    1d44:	6823      	ldr	r3, [r4, #0]
    1d46:	b103      	cbz	r3, 1d4a <_isatty_r+0x1a>
    1d48:	602b      	str	r3, [r5, #0]
    1d4a:	bd38      	pop	{r3, r4, r5, pc}
    1d4c:	20006250 	.word	0x20006250

00001d50 <_lseek_r>:
    1d50:	b538      	push	{r3, r4, r5, lr}
    1d52:	4c07      	ldr	r4, [pc, #28]	; (1d70 <_lseek_r+0x20>)
    1d54:	4605      	mov	r5, r0
    1d56:	4608      	mov	r0, r1
    1d58:	4611      	mov	r1, r2
    1d5a:	2200      	movs	r2, #0
    1d5c:	6022      	str	r2, [r4, #0]
    1d5e:	461a      	mov	r2, r3
    1d60:	f01f fd91 	bl	21886 <_lseek>
    1d64:	1c43      	adds	r3, r0, #1
    1d66:	d102      	bne.n	1d6e <_lseek_r+0x1e>
    1d68:	6823      	ldr	r3, [r4, #0]
    1d6a:	b103      	cbz	r3, 1d6e <_lseek_r+0x1e>
    1d6c:	602b      	str	r3, [r5, #0]
    1d6e:	bd38      	pop	{r3, r4, r5, pc}
    1d70:	20006250 	.word	0x20006250

00001d74 <_read_r>:
    1d74:	b538      	push	{r3, r4, r5, lr}
    1d76:	4c07      	ldr	r4, [pc, #28]	; (1d94 <_read_r+0x20>)
    1d78:	4605      	mov	r5, r0
    1d7a:	4608      	mov	r0, r1
    1d7c:	4611      	mov	r1, r2
    1d7e:	2200      	movs	r2, #0
    1d80:	6022      	str	r2, [r4, #0]
    1d82:	461a      	mov	r2, r3
    1d84:	f01f fd56 	bl	21834 <_read>
    1d88:	1c43      	adds	r3, r0, #1
    1d8a:	d102      	bne.n	1d92 <_read_r+0x1e>
    1d8c:	6823      	ldr	r3, [r4, #0]
    1d8e:	b103      	cbz	r3, 1d92 <_read_r+0x1e>
    1d90:	602b      	str	r3, [r5, #0]
    1d92:	bd38      	pop	{r3, r4, r5, pc}
    1d94:	20006250 	.word	0x20006250

00001d98 <__udivmoddi4>:
    1d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d9c:	9f09      	ldr	r7, [sp, #36]	; 0x24
    1d9e:	4615      	mov	r5, r2
    1da0:	4604      	mov	r4, r0
    1da2:	468e      	mov	lr, r1
    1da4:	461e      	mov	r6, r3
    1da6:	2b00      	cmp	r3, #0
    1da8:	f040 80cc 	bne.w	1f44 <__udivmoddi4+0x1ac>
    1dac:	428a      	cmp	r2, r1
    1dae:	fab2 fc82 	clz	ip, r2
    1db2:	d94c      	bls.n	1e4e <__udivmoddi4+0xb6>
    1db4:	f1bc 0f00 	cmp.w	ip, #0
    1db8:	d00b      	beq.n	1dd2 <__udivmoddi4+0x3a>
    1dba:	f1cc 0820 	rsb	r8, ip, #32
    1dbe:	fa01 fe0c 	lsl.w	lr, r1, ip
    1dc2:	fa20 f808 	lsr.w	r8, r0, r8
    1dc6:	fa02 f50c 	lsl.w	r5, r2, ip
    1dca:	ea48 0e0e 	orr.w	lr, r8, lr
    1dce:	fa00 f40c 	lsl.w	r4, r0, ip
    1dd2:	ea4f 4915 	mov.w	r9, r5, lsr #16
    1dd6:	fa1f f885 	uxth.w	r8, r5
    1dda:	fbbe faf9 	udiv	sl, lr, r9
    1dde:	0c21      	lsrs	r1, r4, #16
    1de0:	fb09 e31a 	mls	r3, r9, sl, lr
    1de4:	fb0a fb08 	mul.w	fp, sl, r8
    1de8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
    1dec:	459b      	cmp	fp, r3
    1dee:	d92a      	bls.n	1e46 <__udivmoddi4+0xae>
    1df0:	18eb      	adds	r3, r5, r3
    1df2:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
    1df6:	d204      	bcs.n	1e02 <__udivmoddi4+0x6a>
    1df8:	459b      	cmp	fp, r3
    1dfa:	d902      	bls.n	1e02 <__udivmoddi4+0x6a>
    1dfc:	f1aa 0002 	sub.w	r0, sl, #2
    1e00:	442b      	add	r3, r5
    1e02:	eba3 030b 	sub.w	r3, r3, fp
    1e06:	b2a4      	uxth	r4, r4
    1e08:	fbb3 f2f9 	udiv	r2, r3, r9
    1e0c:	fb09 3312 	mls	r3, r9, r2, r3
    1e10:	fb02 f808 	mul.w	r8, r2, r8
    1e14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    1e18:	45a0      	cmp	r8, r4
    1e1a:	d916      	bls.n	1e4a <__udivmoddi4+0xb2>
    1e1c:	192c      	adds	r4, r5, r4
    1e1e:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
    1e22:	d203      	bcs.n	1e2c <__udivmoddi4+0x94>
    1e24:	45a0      	cmp	r8, r4
    1e26:	d901      	bls.n	1e2c <__udivmoddi4+0x94>
    1e28:	1e93      	subs	r3, r2, #2
    1e2a:	442c      	add	r4, r5
    1e2c:	eba4 0408 	sub.w	r4, r4, r8
    1e30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    1e34:	b127      	cbz	r7, 1e40 <__udivmoddi4+0xa8>
    1e36:	fa24 f40c 	lsr.w	r4, r4, ip
    1e3a:	2300      	movs	r3, #0
    1e3c:	603c      	str	r4, [r7, #0]
    1e3e:	607b      	str	r3, [r7, #4]
    1e40:	4631      	mov	r1, r6
    1e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e46:	4650      	mov	r0, sl
    1e48:	e7db      	b.n	1e02 <__udivmoddi4+0x6a>
    1e4a:	4613      	mov	r3, r2
    1e4c:	e7ee      	b.n	1e2c <__udivmoddi4+0x94>
    1e4e:	b902      	cbnz	r2, 1e52 <__udivmoddi4+0xba>
    1e50:	deff      	udf	#255	; 0xff
    1e52:	f1bc 0f00 	cmp.w	ip, #0
    1e56:	d12e      	bne.n	1eb6 <__udivmoddi4+0x11e>
    1e58:	1a8b      	subs	r3, r1, r2
    1e5a:	2601      	movs	r6, #1
    1e5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    1e60:	b2aa      	uxth	r2, r5
    1e62:	fbb3 f8fe 	udiv	r8, r3, lr
    1e66:	0c21      	lsrs	r1, r4, #16
    1e68:	fb0e 3318 	mls	r3, lr, r8, r3
    1e6c:	fb08 f902 	mul.w	r9, r8, r2
    1e70:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
    1e74:	4599      	cmp	r9, r3
    1e76:	d961      	bls.n	1f3c <__udivmoddi4+0x1a4>
    1e78:	18eb      	adds	r3, r5, r3
    1e7a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    1e7e:	d204      	bcs.n	1e8a <__udivmoddi4+0xf2>
    1e80:	4599      	cmp	r9, r3
    1e82:	d902      	bls.n	1e8a <__udivmoddi4+0xf2>
    1e84:	f1a8 0002 	sub.w	r0, r8, #2
    1e88:	442b      	add	r3, r5
    1e8a:	eba3 0309 	sub.w	r3, r3, r9
    1e8e:	b2a4      	uxth	r4, r4
    1e90:	fbb3 f1fe 	udiv	r1, r3, lr
    1e94:	fb0e 3311 	mls	r3, lr, r1, r3
    1e98:	434a      	muls	r2, r1
    1e9a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    1e9e:	42a2      	cmp	r2, r4
    1ea0:	d94e      	bls.n	1f40 <__udivmoddi4+0x1a8>
    1ea2:	192c      	adds	r4, r5, r4
    1ea4:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
    1ea8:	d203      	bcs.n	1eb2 <__udivmoddi4+0x11a>
    1eaa:	42a2      	cmp	r2, r4
    1eac:	d901      	bls.n	1eb2 <__udivmoddi4+0x11a>
    1eae:	1e8b      	subs	r3, r1, #2
    1eb0:	442c      	add	r4, r5
    1eb2:	1aa4      	subs	r4, r4, r2
    1eb4:	e7bc      	b.n	1e30 <__udivmoddi4+0x98>
    1eb6:	f1cc 0e20 	rsb	lr, ip, #32
    1eba:	fa02 f50c 	lsl.w	r5, r2, ip
    1ebe:	fa21 f90e 	lsr.w	r9, r1, lr
    1ec2:	fa01 f30c 	lsl.w	r3, r1, ip
    1ec6:	fa20 fe0e 	lsr.w	lr, r0, lr
    1eca:	ea4e 0303 	orr.w	r3, lr, r3
    1ece:	ea4f 4815 	mov.w	r8, r5, lsr #16
    1ed2:	fa00 f40c 	lsl.w	r4, r0, ip
    1ed6:	fbb9 f1f8 	udiv	r1, r9, r8
    1eda:	fa1f fe85 	uxth.w	lr, r5
    1ede:	fb08 9211 	mls	r2, r8, r1, r9
    1ee2:	0c18      	lsrs	r0, r3, #16
    1ee4:	fb01 f60e 	mul.w	r6, r1, lr
    1ee8:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
    1eec:	4296      	cmp	r6, r2
    1eee:	d921      	bls.n	1f34 <__udivmoddi4+0x19c>
    1ef0:	18aa      	adds	r2, r5, r2
    1ef2:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
    1ef6:	d203      	bcs.n	1f00 <__udivmoddi4+0x168>
    1ef8:	4296      	cmp	r6, r2
    1efa:	d901      	bls.n	1f00 <__udivmoddi4+0x168>
    1efc:	1e88      	subs	r0, r1, #2
    1efe:	442a      	add	r2, r5
    1f00:	1b92      	subs	r2, r2, r6
    1f02:	b29b      	uxth	r3, r3
    1f04:	fbb2 f9f8 	udiv	r9, r2, r8
    1f08:	fb08 2219 	mls	r2, r8, r9, r2
    1f0c:	fb09 fe0e 	mul.w	lr, r9, lr
    1f10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    1f14:	459e      	cmp	lr, r3
    1f16:	d90f      	bls.n	1f38 <__udivmoddi4+0x1a0>
    1f18:	18eb      	adds	r3, r5, r3
    1f1a:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
    1f1e:	d204      	bcs.n	1f2a <__udivmoddi4+0x192>
    1f20:	459e      	cmp	lr, r3
    1f22:	d902      	bls.n	1f2a <__udivmoddi4+0x192>
    1f24:	f1a9 0602 	sub.w	r6, r9, #2
    1f28:	442b      	add	r3, r5
    1f2a:	eba3 030e 	sub.w	r3, r3, lr
    1f2e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
    1f32:	e793      	b.n	1e5c <__udivmoddi4+0xc4>
    1f34:	4608      	mov	r0, r1
    1f36:	e7e3      	b.n	1f00 <__udivmoddi4+0x168>
    1f38:	464e      	mov	r6, r9
    1f3a:	e7f6      	b.n	1f2a <__udivmoddi4+0x192>
    1f3c:	4640      	mov	r0, r8
    1f3e:	e7a4      	b.n	1e8a <__udivmoddi4+0xf2>
    1f40:	460b      	mov	r3, r1
    1f42:	e7b6      	b.n	1eb2 <__udivmoddi4+0x11a>
    1f44:	428b      	cmp	r3, r1
    1f46:	d905      	bls.n	1f54 <__udivmoddi4+0x1bc>
    1f48:	b10f      	cbz	r7, 1f4e <__udivmoddi4+0x1b6>
    1f4a:	e9c7 0100 	strd	r0, r1, [r7]
    1f4e:	2600      	movs	r6, #0
    1f50:	4630      	mov	r0, r6
    1f52:	e775      	b.n	1e40 <__udivmoddi4+0xa8>
    1f54:	fab3 fc83 	clz	ip, r3
    1f58:	f1bc 0f00 	cmp.w	ip, #0
    1f5c:	d10f      	bne.n	1f7e <__udivmoddi4+0x1e6>
    1f5e:	428b      	cmp	r3, r1
    1f60:	d301      	bcc.n	1f66 <__udivmoddi4+0x1ce>
    1f62:	4282      	cmp	r2, r0
    1f64:	d809      	bhi.n	1f7a <__udivmoddi4+0x1e2>
    1f66:	1a84      	subs	r4, r0, r2
    1f68:	eb61 0e03 	sbc.w	lr, r1, r3
    1f6c:	2001      	movs	r0, #1
    1f6e:	2f00      	cmp	r7, #0
    1f70:	d06a      	beq.n	2048 <_ramfunc_ram_size+0x48>
    1f72:	e9c7 4e00 	strd	r4, lr, [r7]
    1f76:	2600      	movs	r6, #0
    1f78:	e762      	b.n	1e40 <__udivmoddi4+0xa8>
    1f7a:	4660      	mov	r0, ip
    1f7c:	e7f7      	b.n	1f6e <__udivmoddi4+0x1d6>
    1f7e:	f1cc 0e20 	rsb	lr, ip, #32
    1f82:	fa03 f30c 	lsl.w	r3, r3, ip
    1f86:	fa22 f50e 	lsr.w	r5, r2, lr
    1f8a:	fa21 f40e 	lsr.w	r4, r1, lr
    1f8e:	431d      	orrs	r5, r3
    1f90:	fa01 f30c 	lsl.w	r3, r1, ip
    1f94:	fa20 f10e 	lsr.w	r1, r0, lr
    1f98:	430b      	orrs	r3, r1
    1f9a:	ea4f 4a15 	mov.w	sl, r5, lsr #16
    1f9e:	fa00 f60c 	lsl.w	r6, r0, ip
    1fa2:	fbb4 f9fa 	udiv	r9, r4, sl
    1fa6:	fa1f f885 	uxth.w	r8, r5
    1faa:	fb0a 4019 	mls	r0, sl, r9, r4
    1fae:	0c1c      	lsrs	r4, r3, #16
    1fb0:	fb09 f108 	mul.w	r1, r9, r8
    1fb4:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
    1fb8:	42a1      	cmp	r1, r4
    1fba:	fa02 f20c 	lsl.w	r2, r2, ip
    1fbe:	d93f      	bls.n	2040 <_ramfunc_ram_size+0x40>
    1fc0:	192c      	adds	r4, r5, r4
    1fc2:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    1fc6:	d204      	bcs.n	1fd2 <__udivmoddi4+0x23a>
    1fc8:	42a1      	cmp	r1, r4
    1fca:	d902      	bls.n	1fd2 <__udivmoddi4+0x23a>
    1fcc:	f1a9 0002 	sub.w	r0, r9, #2
    1fd0:	442c      	add	r4, r5
    1fd2:	1a64      	subs	r4, r4, r1
    1fd4:	b29b      	uxth	r3, r3
    1fd6:	fbb4 f9fa 	udiv	r9, r4, sl
    1fda:	fb0a 4419 	mls	r4, sl, r9, r4
    1fde:	fb09 f808 	mul.w	r8, r9, r8
    1fe2:	ea43 4104 	orr.w	r1, r3, r4, lsl #16
    1fe6:	4588      	cmp	r8, r1
    1fe8:	d92c      	bls.n	2044 <_ramfunc_ram_size+0x44>
    1fea:	1869      	adds	r1, r5, r1
    1fec:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
    1ff0:	d204      	bcs.n	1ffc <__udivmoddi4+0x264>
    1ff2:	4588      	cmp	r8, r1
    1ff4:	d902      	bls.n	1ffc <__udivmoddi4+0x264>
    1ff6:	f1a9 0302 	sub.w	r3, r9, #2
    1ffa:	4429      	add	r1, r5
    1ffc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    2000:	eba1 0108 	sub.w	r1, r1, r8
    2004:	fba0 8902 	umull	r8, r9, r0, r2
    2008:	4549      	cmp	r1, r9
    200a:	46c2      	mov	sl, r8
    200c:	464c      	mov	r4, r9
    200e:	d302      	bcc.n	2016 <_ramfunc_ram_size+0x16>
    2010:	d106      	bne.n	2020 <_ramfunc_ram_size+0x20>
    2012:	4546      	cmp	r6, r8
    2014:	d204      	bcs.n	2020 <_ramfunc_ram_size+0x20>
    2016:	ebb8 0a02 	subs.w	sl, r8, r2
    201a:	eb69 0405 	sbc.w	r4, r9, r5
    201e:	3801      	subs	r0, #1
    2020:	b197      	cbz	r7, 2048 <_ramfunc_ram_size+0x48>
    2022:	ebb6 030a 	subs.w	r3, r6, sl
    2026:	eb61 0604 	sbc.w	r6, r1, r4
    202a:	fa06 fe0e 	lsl.w	lr, r6, lr
    202e:	fa23 f30c 	lsr.w	r3, r3, ip
    2032:	ea4e 0303 	orr.w	r3, lr, r3
    2036:	fa26 f60c 	lsr.w	r6, r6, ip
    203a:	e9c7 3600 	strd	r3, r6, [r7]
    203e:	e79a      	b.n	1f76 <__udivmoddi4+0x1de>
    2040:	4648      	mov	r0, r9
    2042:	e7c6      	b.n	1fd2 <__udivmoddi4+0x23a>
    2044:	464b      	mov	r3, r9
    2046:	e7d9      	b.n	1ffc <__udivmoddi4+0x264>
    2048:	463e      	mov	r6, r7
    204a:	e6f9      	b.n	1e40 <__udivmoddi4+0xa8>

0000204c <memcmp>:
    204c:	b530      	push	{r4, r5, lr}
    204e:	3901      	subs	r1, #1
    2050:	2400      	movs	r4, #0
    2052:	42a2      	cmp	r2, r4
    2054:	d101      	bne.n	205a <memcmp+0xe>
    2056:	2000      	movs	r0, #0
    2058:	e005      	b.n	2066 <memcmp+0x1a>
    205a:	5d03      	ldrb	r3, [r0, r4]
    205c:	3401      	adds	r4, #1
    205e:	5d0d      	ldrb	r5, [r1, r4]
    2060:	42ab      	cmp	r3, r5
    2062:	d0f6      	beq.n	2052 <memcmp+0x6>
    2064:	1b58      	subs	r0, r3, r5
    2066:	bd30      	pop	{r4, r5, pc}

00002068 <memcpy>:
    2068:	440a      	add	r2, r1
    206a:	4291      	cmp	r1, r2
    206c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    2070:	d100      	bne.n	2074 <memcpy+0xc>
    2072:	4770      	bx	lr
    2074:	b510      	push	{r4, lr}
    2076:	f811 4b01 	ldrb.w	r4, [r1], #1
    207a:	f803 4f01 	strb.w	r4, [r3, #1]!
    207e:	4291      	cmp	r1, r2
    2080:	d1f9      	bne.n	2076 <memcpy+0xe>
    2082:	bd10      	pop	{r4, pc}

00002084 <memmove>:
    2084:	4288      	cmp	r0, r1
    2086:	b510      	push	{r4, lr}
    2088:	eb01 0302 	add.w	r3, r1, r2
    208c:	d902      	bls.n	2094 <memmove+0x10>
    208e:	4283      	cmp	r3, r0
    2090:	461c      	mov	r4, r3
    2092:	d807      	bhi.n	20a4 <memmove+0x20>
    2094:	1e42      	subs	r2, r0, #1
    2096:	4299      	cmp	r1, r3
    2098:	d008      	beq.n	20ac <memmove+0x28>
    209a:	f811 4b01 	ldrb.w	r4, [r1], #1
    209e:	f802 4f01 	strb.w	r4, [r2, #1]!
    20a2:	e7f8      	b.n	2096 <memmove+0x12>
    20a4:	1883      	adds	r3, r0, r2
    20a6:	1a9a      	subs	r2, r3, r2
    20a8:	429a      	cmp	r2, r3
    20aa:	d100      	bne.n	20ae <memmove+0x2a>
    20ac:	bd10      	pop	{r4, pc}
    20ae:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    20b2:	f803 1d01 	strb.w	r1, [r3, #-1]!
    20b6:	e7f7      	b.n	20a8 <memmove+0x24>

000020b8 <memset>:
    20b8:	4402      	add	r2, r0
    20ba:	4603      	mov	r3, r0
    20bc:	4293      	cmp	r3, r2
    20be:	d100      	bne.n	20c2 <memset+0xa>
    20c0:	4770      	bx	lr
    20c2:	f803 1b01 	strb.w	r1, [r3], #1
    20c6:	e7f9      	b.n	20bc <memset+0x4>

000020c8 <strchr>:
    20c8:	b2c9      	uxtb	r1, r1
    20ca:	4603      	mov	r3, r0
    20cc:	f810 2b01 	ldrb.w	r2, [r0], #1
    20d0:	b11a      	cbz	r2, 20da <strchr+0x12>
    20d2:	428a      	cmp	r2, r1
    20d4:	d1f9      	bne.n	20ca <strchr+0x2>
    20d6:	4618      	mov	r0, r3
    20d8:	4770      	bx	lr
    20da:	2900      	cmp	r1, #0
    20dc:	bf18      	it	ne
    20de:	2300      	movne	r3, #0
    20e0:	e7f9      	b.n	20d6 <strchr+0xe>

000020e2 <strcmp>:
    20e2:	f810 2b01 	ldrb.w	r2, [r0], #1
    20e6:	f811 3b01 	ldrb.w	r3, [r1], #1
    20ea:	2a01      	cmp	r2, #1
    20ec:	bf28      	it	cs
    20ee:	429a      	cmpcs	r2, r3
    20f0:	d0f7      	beq.n	20e2 <strcmp>
    20f2:	1ad0      	subs	r0, r2, r3
    20f4:	4770      	bx	lr

000020f6 <strlen>:
    20f6:	4603      	mov	r3, r0
    20f8:	f813 2b01 	ldrb.w	r2, [r3], #1
    20fc:	2a00      	cmp	r2, #0
    20fe:	d1fb      	bne.n	20f8 <strlen+0x2>
    2100:	1a18      	subs	r0, r3, r0
    2102:	3801      	subs	r0, #1
    2104:	4770      	bx	lr

00002106 <strncmp>:
    2106:	b510      	push	{r4, lr}
    2108:	b16a      	cbz	r2, 2126 <strncmp+0x20>
    210a:	3901      	subs	r1, #1
    210c:	1884      	adds	r4, r0, r2
    210e:	f810 3b01 	ldrb.w	r3, [r0], #1
    2112:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    2116:	4293      	cmp	r3, r2
    2118:	d103      	bne.n	2122 <strncmp+0x1c>
    211a:	42a0      	cmp	r0, r4
    211c:	d001      	beq.n	2122 <strncmp+0x1c>
    211e:	2b00      	cmp	r3, #0
    2120:	d1f5      	bne.n	210e <strncmp+0x8>
    2122:	1a98      	subs	r0, r3, r2
    2124:	bd10      	pop	{r4, pc}
    2126:	4610      	mov	r0, r2
    2128:	e7fc      	b.n	2124 <strncmp+0x1e>

0000212a <strrchr>:
    212a:	b538      	push	{r3, r4, r5, lr}
    212c:	4603      	mov	r3, r0
    212e:	460d      	mov	r5, r1
    2130:	b969      	cbnz	r1, 214e <strrchr+0x24>
    2132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2136:	f7ff bfc7 	b.w	20c8 <strchr>
    213a:	1c43      	adds	r3, r0, #1
    213c:	4604      	mov	r4, r0
    213e:	4629      	mov	r1, r5
    2140:	4618      	mov	r0, r3
    2142:	f7ff ffc1 	bl	20c8 <strchr>
    2146:	2800      	cmp	r0, #0
    2148:	d1f7      	bne.n	213a <strrchr+0x10>
    214a:	4620      	mov	r0, r4
    214c:	bd38      	pop	{r3, r4, r5, pc}
    214e:	2400      	movs	r4, #0
    2150:	e7f5      	b.n	213e <strrchr+0x14>

00002152 <abort>:
    2152:	b508      	push	{r3, lr}
    2154:	2006      	movs	r0, #6
    2156:	f7ff fd86 	bl	1c66 <raise>
    215a:	2001      	movs	r0, #1
    215c:	f010 f96a 	bl	12434 <_exit>

00002160 <_fwalk>:
    2160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2164:	4688      	mov	r8, r1
    2166:	f500 74a6 	add.w	r4, r0, #332	; 0x14c
    216a:	2600      	movs	r6, #0
    216c:	b914      	cbnz	r4, 2174 <_fwalk+0x14>
    216e:	4630      	mov	r0, r6
    2170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2174:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
    2178:	3f01      	subs	r7, #1
    217a:	d501      	bpl.n	2180 <_fwalk+0x20>
    217c:	6824      	ldr	r4, [r4, #0]
    217e:	e7f5      	b.n	216c <_fwalk+0xc>
    2180:	89ab      	ldrh	r3, [r5, #12]
    2182:	2b01      	cmp	r3, #1
    2184:	d906      	bls.n	2194 <_fwalk+0x34>
    2186:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    218a:	3301      	adds	r3, #1
    218c:	d002      	beq.n	2194 <_fwalk+0x34>
    218e:	4628      	mov	r0, r5
    2190:	47c0      	blx	r8
    2192:	4306      	orrs	r6, r0
    2194:	3564      	adds	r5, #100	; 0x64
    2196:	e7ef      	b.n	2178 <_fwalk+0x18>

00002198 <_fwalk_reent>:
    2198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    219c:	4680      	mov	r8, r0
    219e:	4689      	mov	r9, r1
    21a0:	f500 74a6 	add.w	r4, r0, #332	; 0x14c
    21a4:	2600      	movs	r6, #0
    21a6:	b914      	cbnz	r4, 21ae <_fwalk_reent+0x16>
    21a8:	4630      	mov	r0, r6
    21aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    21ae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
    21b2:	3f01      	subs	r7, #1
    21b4:	d501      	bpl.n	21ba <_fwalk_reent+0x22>
    21b6:	6824      	ldr	r4, [r4, #0]
    21b8:	e7f5      	b.n	21a6 <_fwalk_reent+0xe>
    21ba:	89ab      	ldrh	r3, [r5, #12]
    21bc:	2b01      	cmp	r3, #1
    21be:	d907      	bls.n	21d0 <_fwalk_reent+0x38>
    21c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    21c4:	3301      	adds	r3, #1
    21c6:	d003      	beq.n	21d0 <_fwalk_reent+0x38>
    21c8:	4629      	mov	r1, r5
    21ca:	4640      	mov	r0, r8
    21cc:	47c8      	blx	r9
    21ce:	4306      	orrs	r6, r0
    21d0:	3564      	adds	r5, #100	; 0x64
    21d2:	e7ee      	b.n	21b2 <_fwalk_reent+0x1a>

000021d4 <__malloc_lock>:
    21d4:	4770      	bx	lr

000021d6 <__malloc_unlock>:
    21d6:	4770      	bx	lr

000021d8 <_realloc_r>:
    21d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21da:	4607      	mov	r7, r0
    21dc:	4614      	mov	r4, r2
    21de:	460e      	mov	r6, r1
    21e0:	b921      	cbnz	r1, 21ec <_realloc_r+0x14>
    21e2:	4611      	mov	r1, r2
    21e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    21e8:	f7fe bb0c 	b.w	804 <_malloc_r>
    21ec:	b922      	cbnz	r2, 21f8 <_realloc_r+0x20>
    21ee:	f7ff faa3 	bl	1738 <_free_r>
    21f2:	4625      	mov	r5, r4
    21f4:	4628      	mov	r0, r5
    21f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21f8:	f000 f859 	bl	22ae <_malloc_usable_size_r>
    21fc:	42a0      	cmp	r0, r4
    21fe:	d20f      	bcs.n	2220 <_realloc_r+0x48>
    2200:	4621      	mov	r1, r4
    2202:	4638      	mov	r0, r7
    2204:	f7fe fafe 	bl	804 <_malloc_r>
    2208:	4605      	mov	r5, r0
    220a:	2800      	cmp	r0, #0
    220c:	d0f2      	beq.n	21f4 <_realloc_r+0x1c>
    220e:	4631      	mov	r1, r6
    2210:	4622      	mov	r2, r4
    2212:	f7ff ff29 	bl	2068 <memcpy>
    2216:	4631      	mov	r1, r6
    2218:	4638      	mov	r0, r7
    221a:	f7ff fa8d 	bl	1738 <_free_r>
    221e:	e7e9      	b.n	21f4 <_realloc_r+0x1c>
    2220:	4635      	mov	r5, r6
    2222:	e7e7      	b.n	21f4 <_realloc_r+0x1c>

00002224 <__sread>:
    2224:	b510      	push	{r4, lr}
    2226:	460c      	mov	r4, r1
    2228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    222c:	f7ff fda2 	bl	1d74 <_read_r>
    2230:	2800      	cmp	r0, #0
    2232:	bfab      	itete	ge
    2234:	6d23      	ldrge	r3, [r4, #80]	; 0x50
    2236:	89a3      	ldrhlt	r3, [r4, #12]
    2238:	181b      	addge	r3, r3, r0
    223a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    223e:	bfac      	ite	ge
    2240:	6523      	strge	r3, [r4, #80]	; 0x50
    2242:	81a3      	strhlt	r3, [r4, #12]
    2244:	bd10      	pop	{r4, pc}

00002246 <__seofread>:
    2246:	2000      	movs	r0, #0
    2248:	4770      	bx	lr

0000224a <__swrite>:
    224a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    224e:	461f      	mov	r7, r3
    2250:	898b      	ldrh	r3, [r1, #12]
    2252:	05db      	lsls	r3, r3, #23
    2254:	4605      	mov	r5, r0
    2256:	460c      	mov	r4, r1
    2258:	4616      	mov	r6, r2
    225a:	d505      	bpl.n	2268 <__swrite+0x1e>
    225c:	2302      	movs	r3, #2
    225e:	2200      	movs	r2, #0
    2260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2264:	f7ff fd74 	bl	1d50 <_lseek_r>
    2268:	89a3      	ldrh	r3, [r4, #12]
    226a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    226e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    2272:	81a3      	strh	r3, [r4, #12]
    2274:	4632      	mov	r2, r6
    2276:	463b      	mov	r3, r7
    2278:	4628      	mov	r0, r5
    227a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    227e:	f7ff bd23 	b.w	1cc8 <_write_r>

00002282 <__sseek>:
    2282:	b510      	push	{r4, lr}
    2284:	460c      	mov	r4, r1
    2286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    228a:	f7ff fd61 	bl	1d50 <_lseek_r>
    228e:	1c43      	adds	r3, r0, #1
    2290:	89a3      	ldrh	r3, [r4, #12]
    2292:	bf15      	itete	ne
    2294:	6520      	strne	r0, [r4, #80]	; 0x50
    2296:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    229a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    229e:	81a3      	strheq	r3, [r4, #12]
    22a0:	bf18      	it	ne
    22a2:	81a3      	strhne	r3, [r4, #12]
    22a4:	bd10      	pop	{r4, pc}

000022a6 <__sclose>:
    22a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    22aa:	f7ff bd1f 	b.w	1cec <_close_r>

000022ae <_malloc_usable_size_r>:
    22ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
    22b2:	1f18      	subs	r0, r3, #4
    22b4:	2b00      	cmp	r3, #0
    22b6:	bfbc      	itt	lt
    22b8:	580b      	ldrlt	r3, [r1, r0]
    22ba:	18c0      	addlt	r0, r0, r3
    22bc:	4770      	bx	lr
	...

000022c0 <shell_printf>:
	for (const char *c = str; *c != '\0'; c++) {
		shell_echo(*c);
	}
}

static void shell_printf(char *fmt, ...) {
    22c0:	b40f      	push	{r0, r1, r2, r3}
    22c2:	b580      	push	{r7, lr}
    22c4:	b082      	sub	sp, #8
    22c6:	af00      	add	r7, sp, #0
	extern char log_buf[256];
	va_list args;
	va_start(args, fmt);
    22c8:	f107 0314 	add.w	r3, r7, #20
    22cc:	607b      	str	r3, [r7, #4]
	vsnprintf(log_buf, sizeof(log_buf) - 1, fmt, args);
    22ce:	687b      	ldr	r3, [r7, #4]
    22d0:	693a      	ldr	r2, [r7, #16]
    22d2:	21ff      	movs	r1, #255	; 0xff
    22d4:	4806      	ldr	r0, [pc, #24]	; (22f0 <shell_printf+0x30>)
    22d6:	f7fe fe71 	bl	fbc <vsniprintf>
	shell_echo_str(log_buf);
    22da:	4805      	ldr	r0, [pc, #20]	; (22f0 <shell_printf+0x30>)
    22dc:	f016 fcd3 	bl	18c86 <shell_echo_str>
	va_end(args);
}
    22e0:	bf00      	nop
    22e2:	3708      	adds	r7, #8
    22e4:	46bd      	mov	sp, r7
    22e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    22ea:	b004      	add	sp, #16
    22ec:	4770      	bx	lr
    22ee:	bf00      	nop
    22f0:	200020dc 	.word	0x200020dc

000022f4 <shell_last_char>:

static inline char shell_last_char() {
    22f4:	b480      	push	{r7}
    22f6:	af00      	add	r7, sp, #0
	return shell_cli.rx_buffer[shell_cli.rx_pos - 1];
    22f8:	4b04      	ldr	r3, [pc, #16]	; (230c <shell_last_char+0x18>)
    22fa:	681b      	ldr	r3, [r3, #0]
    22fc:	3b01      	subs	r3, #1
    22fe:	4a03      	ldr	r2, [pc, #12]	; (230c <shell_last_char+0x18>)
    2300:	4413      	add	r3, r2
    2302:	791b      	ldrb	r3, [r3, #4]
}
    2304:	4618      	mov	r0, r3
    2306:	46bd      	mov	sp, r7
    2308:	bc80      	pop	{r7}
    230a:	4770      	bx	lr
    230c:	20002058 	.word	0x20002058

00002310 <shell_dispatch_cmd>:

static void shell_dispatch_cmd(char *argv[], int argc) {
    2310:	b580      	push	{r7, lr}
    2312:	b086      	sub	sp, #24
    2314:	af00      	add	r7, sp, #0
    2316:	6078      	str	r0, [r7, #4]
    2318:	6039      	str	r1, [r7, #0]
	if (strcmp(argv[0], "q") == 0 ) {
    231a:	687b      	ldr	r3, [r7, #4]
    231c:	681b      	ldr	r3, [r3, #0]
    231e:	494c      	ldr	r1, [pc, #304]	; (2450 <shell_dispatch_cmd+0x140>)
    2320:	4618      	mov	r0, r3
    2322:	f7ff fede 	bl	20e2 <strcmp>
    2326:	4603      	mov	r3, r0
    2328:	2b00      	cmp	r3, #0
    232a:	d106      	bne.n	233a <shell_dispatch_cmd+0x2a>
		exit_shell = true;
    232c:	4b49      	ldr	r3, [pc, #292]	; (2454 <shell_dispatch_cmd+0x144>)
    232e:	2201      	movs	r2, #1
    2330:	701a      	strb	r2, [r3, #0]
		DEBUG_LOG("Exit shell mode!\n");
    2332:	4849      	ldr	r0, [pc, #292]	; (2458 <shell_dispatch_cmd+0x148>)
    2334:	f016 fec7 	bl	190c6 <debug_log>
		return;
    2338:	e087      	b.n	244a <shell_dispatch_cmd+0x13a>
	}
	
	if (strcmp(argv[0], "h") == 0 || strcmp(argv[0], "help") == 0) {
    233a:	687b      	ldr	r3, [r7, #4]
    233c:	681b      	ldr	r3, [r3, #0]
    233e:	4947      	ldr	r1, [pc, #284]	; (245c <shell_dispatch_cmd+0x14c>)
    2340:	4618      	mov	r0, r3
    2342:	f7ff fece 	bl	20e2 <strcmp>
    2346:	4603      	mov	r3, r0
    2348:	2b00      	cmp	r3, #0
    234a:	d008      	beq.n	235e <shell_dispatch_cmd+0x4e>
    234c:	687b      	ldr	r3, [r7, #4]
    234e:	681b      	ldr	r3, [r3, #0]
    2350:	4943      	ldr	r1, [pc, #268]	; (2460 <shell_dispatch_cmd+0x150>)
    2352:	4618      	mov	r0, r3
    2354:	f7ff fec5 	bl	20e2 <strcmp>
    2358:	4603      	mov	r3, r0
    235a:	2b00      	cmp	r3, #0
    235c:	d102      	bne.n	2364 <shell_dispatch_cmd+0x54>
		cli_print_help();
    235e:	f000 f94d 	bl	25fc <cli_print_help>
    2362:	e072      	b.n	244a <shell_dispatch_cmd+0x13a>
	} else if (strcmp(argv[0], "run") == 0) {
    2364:	687b      	ldr	r3, [r7, #4]
    2366:	681b      	ldr	r3, [r3, #0]
    2368:	493e      	ldr	r1, [pc, #248]	; (2464 <shell_dispatch_cmd+0x154>)
    236a:	4618      	mov	r0, r3
    236c:	f7ff feb9 	bl	20e2 <strcmp>
    2370:	4603      	mov	r3, r0
    2372:	2b00      	cmp	r3, #0
    2374:	d10f      	bne.n	2396 <shell_dispatch_cmd+0x86>
		if (argc >= 2) {
    2376:	683b      	ldr	r3, [r7, #0]
    2378:	2b01      	cmp	r3, #1
    237a:	dd66      	ble.n	244a <shell_dispatch_cmd+0x13a>
			int rid = str2int(argv[1]);
    237c:	687b      	ldr	r3, [r7, #4]
    237e:	3304      	adds	r3, #4
    2380:	681b      	ldr	r3, [r3, #0]
    2382:	4618      	mov	r0, r3
    2384:	f016 feb2 	bl	190ec <str2int>
    2388:	6178      	str	r0, [r7, #20]
			run_test_by_id(rid);
    238a:	697b      	ldr	r3, [r7, #20]
    238c:	b2db      	uxtb	r3, r3
    238e:	4618      	mov	r0, r3
    2390:	f000 f966 	bl	2660 <run_test_by_id>
    2394:	e059      	b.n	244a <shell_dispatch_cmd+0x13a>
		}
	} else if (strcmp(argv[0], "trigger") == 0) {
    2396:	687b      	ldr	r3, [r7, #4]
    2398:	681b      	ldr	r3, [r3, #0]
    239a:	4933      	ldr	r1, [pc, #204]	; (2468 <shell_dispatch_cmd+0x158>)
    239c:	4618      	mov	r0, r3
    239e:	f7ff fea0 	bl	20e2 <strcmp>
    23a2:	4603      	mov	r3, r0
    23a4:	2b00      	cmp	r3, #0
    23a6:	d111      	bne.n	23cc <shell_dispatch_cmd+0xbc>
		if (argc >= 2) {
    23a8:	683b      	ldr	r3, [r7, #0]
    23aa:	2b01      	cmp	r3, #1
    23ac:	dd0a      	ble.n	23c4 <shell_dispatch_cmd+0xb4>
			int tid = str2int(argv[1]);
    23ae:	687b      	ldr	r3, [r7, #4]
    23b0:	3304      	adds	r3, #4
    23b2:	681b      	ldr	r3, [r3, #0]
    23b4:	4618      	mov	r0, r3
    23b6:	f016 fe99 	bl	190ec <str2int>
    23ba:	6138      	str	r0, [r7, #16]
			handle_trigger_func(tid);
    23bc:	6938      	ldr	r0, [r7, #16]
    23be:	f000 fa63 	bl	2888 <handle_trigger_func>
    23c2:	e042      	b.n	244a <shell_dispatch_cmd+0x13a>
		} else {
			shell_printf("Usage: trigger [cve]\n");
    23c4:	4829      	ldr	r0, [pc, #164]	; (246c <shell_dispatch_cmd+0x15c>)
    23c6:	f7ff ff7b 	bl	22c0 <shell_printf>
    23ca:	e03e      	b.n	244a <shell_dispatch_cmd+0x13a>
		}
	} else if (strcmp(argv[0], "patch") == 0) {
    23cc:	687b      	ldr	r3, [r7, #4]
    23ce:	681b      	ldr	r3, [r3, #0]
    23d0:	4927      	ldr	r1, [pc, #156]	; (2470 <shell_dispatch_cmd+0x160>)
    23d2:	4618      	mov	r0, r3
    23d4:	f7ff fe85 	bl	20e2 <strcmp>
    23d8:	4603      	mov	r3, r0
    23da:	2b00      	cmp	r3, #0
    23dc:	d113      	bne.n	2406 <shell_dispatch_cmd+0xf6>
		if (argc >= 2) {
    23de:	683b      	ldr	r3, [r7, #0]
    23e0:	2b01      	cmp	r3, #1
    23e2:	dd0a      	ble.n	23fa <shell_dispatch_cmd+0xea>
			int pid = str2int(argv[1]);
    23e4:	687b      	ldr	r3, [r7, #4]
    23e6:	3304      	adds	r3, #4
    23e8:	681b      	ldr	r3, [r3, #0]
    23ea:	4618      	mov	r0, r3
    23ec:	f016 fe7e 	bl	190ec <str2int>
    23f0:	60f8      	str	r0, [r7, #12]
			handle_patch_func(pid);
    23f2:	68f8      	ldr	r0, [r7, #12]
    23f4:	f016 fca6 	bl	18d44 <handle_patch_func>
    23f8:	e027      	b.n	244a <shell_dispatch_cmd+0x13a>
		} else {
			shell_printf("Usage: patch [cve]\n");
    23fa:	481e      	ldr	r0, [pc, #120]	; (2474 <shell_dispatch_cmd+0x164>)
    23fc:	f7ff ff60 	bl	22c0 <shell_printf>
			show_patch_list();
    2400:	f000 fa5e 	bl	28c0 <show_patch_list>
    2404:	e021      	b.n	244a <shell_dispatch_cmd+0x13a>
		}
	} else if (strcmp(argv[0], "vm") == 0) {
    2406:	687b      	ldr	r3, [r7, #4]
    2408:	681b      	ldr	r3, [r3, #0]
    240a:	491b      	ldr	r1, [pc, #108]	; (2478 <shell_dispatch_cmd+0x168>)
    240c:	4618      	mov	r0, r3
    240e:	f7ff fe68 	bl	20e2 <strcmp>
    2412:	4603      	mov	r3, r0
    2414:	2b00      	cmp	r3, #0
    2416:	d111      	bne.n	243c <shell_dispatch_cmd+0x12c>
		if (argc >= 2) {
    2418:	683b      	ldr	r3, [r7, #0]
    241a:	2b01      	cmp	r3, #1
    241c:	dd0a      	ble.n	2434 <shell_dispatch_cmd+0x124>
			int tid = str2int(argv[1]);
    241e:	687b      	ldr	r3, [r7, #4]
    2420:	3304      	adds	r3, #4
    2422:	681b      	ldr	r3, [r3, #0]
    2424:	4618      	mov	r0, r3
    2426:	f016 fe61 	bl	190ec <str2int>
    242a:	60b8      	str	r0, [r7, #8]
			handle_eBPF_vm_run_patch(tid);
    242c:	68b8      	ldr	r0, [r7, #8]
    242e:	f016 fc9d 	bl	18d6c <handle_eBPF_vm_run_patch>
    2432:	e00a      	b.n	244a <shell_dispatch_cmd+0x13a>
		} else {
			shell_printf("Usage: vm [cve]\n");
    2434:	4811      	ldr	r0, [pc, #68]	; (247c <shell_dispatch_cmd+0x16c>)
    2436:	f7ff ff43 	bl	22c0 <shell_printf>
    243a:	e006      	b.n	244a <shell_dispatch_cmd+0x13a>
		}
	}else {
		DEBUG_LOG("Command not find: %s argc: %d\n", argv[0], argc);
    243c:	687b      	ldr	r3, [r7, #4]
    243e:	681b      	ldr	r3, [r3, #0]
    2440:	683a      	ldr	r2, [r7, #0]
    2442:	4619      	mov	r1, r3
    2444:	480e      	ldr	r0, [pc, #56]	; (2480 <shell_dispatch_cmd+0x170>)
    2446:	f016 fe3e 	bl	190c6 <debug_log>
	}
}
    244a:	3718      	adds	r7, #24
    244c:	46bd      	mov	sp, r7
    244e:	bd80      	pop	{r7, pc}
    2450:	0002c750 	.word	0x0002c750
    2454:	2000623a 	.word	0x2000623a
    2458:	0002c754 	.word	0x0002c754
    245c:	0002c768 	.word	0x0002c768
    2460:	0002c76c 	.word	0x0002c76c
    2464:	0002c774 	.word	0x0002c774
    2468:	0002c778 	.word	0x0002c778
    246c:	0002c780 	.word	0x0002c780
    2470:	0002c798 	.word	0x0002c798
    2474:	0002c7a0 	.word	0x0002c7a0
    2478:	0002c7b4 	.word	0x0002c7b4
    247c:	0002c7b8 	.word	0x0002c7b8
    2480:	0002c7cc 	.word	0x0002c7cc

00002484 <shell_process>:

// shell implementation
static void shell_process() {
    2484:	b5b0      	push	{r4, r5, r7, lr}
    2486:	b088      	sub	sp, #32
    2488:	af00      	add	r7, sp, #0
    248a:	466b      	mov	r3, sp
    248c:	461d      	mov	r5, r3
	if (shell_last_char() != '\n' && shell_last_char() != '\r') {
    248e:	f7ff ff31 	bl	22f4 <shell_last_char>
    2492:	4603      	mov	r3, r0
    2494:	2b0a      	cmp	r3, #10
    2496:	d006      	beq.n	24a6 <shell_process+0x22>
    2498:	f7ff ff2c 	bl	22f4 <shell_last_char>
    249c:	4603      	mov	r3, r0
    249e:	2b0d      	cmp	r3, #13
    24a0:	d001      	beq.n	24a6 <shell_process+0x22>
    24a2:	46ad      	mov	sp, r5
    24a4:	e074      	b.n	2590 <shell_process+0x10c>
		return;
	}

	int argc = 0;
    24a6:	2300      	movs	r3, #0
    24a8:	61bb      	str	r3, [r7, #24]
	const int max_args = 5;
    24aa:	2305      	movs	r3, #5
    24ac:	613b      	str	r3, [r7, #16]
	char *argv[max_args];
    24ae:	693b      	ldr	r3, [r7, #16]
    24b0:	3b01      	subs	r3, #1
    24b2:	60fb      	str	r3, [r7, #12]
    24b4:	693b      	ldr	r3, [r7, #16]
    24b6:	4619      	mov	r1, r3
    24b8:	f04f 0200 	mov.w	r2, #0
    24bc:	f04f 0300 	mov.w	r3, #0
    24c0:	f04f 0400 	mov.w	r4, #0
    24c4:	0154      	lsls	r4, r2, #5
    24c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
    24ca:	014b      	lsls	r3, r1, #5
    24cc:	693b      	ldr	r3, [r7, #16]
    24ce:	4619      	mov	r1, r3
    24d0:	f04f 0200 	mov.w	r2, #0
    24d4:	f04f 0300 	mov.w	r3, #0
    24d8:	f04f 0400 	mov.w	r4, #0
    24dc:	0154      	lsls	r4, r2, #5
    24de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
    24e2:	014b      	lsls	r3, r1, #5
    24e4:	693b      	ldr	r3, [r7, #16]
    24e6:	009b      	lsls	r3, r3, #2
    24e8:	3307      	adds	r3, #7
    24ea:	08db      	lsrs	r3, r3, #3
    24ec:	00db      	lsls	r3, r3, #3
    24ee:	ebad 0d03 	sub.w	sp, sp, r3
    24f2:	466b      	mov	r3, sp
    24f4:	3303      	adds	r3, #3
    24f6:	089b      	lsrs	r3, r3, #2
    24f8:	009b      	lsls	r3, r3, #2
    24fa:	60bb      	str	r3, [r7, #8]
	char *next_arg = NULL;
    24fc:	2300      	movs	r3, #0
    24fe:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < shell_cli.rx_pos && argc < max_args; i++) {
    2500:	2300      	movs	r3, #0
    2502:	617b      	str	r3, [r7, #20]
    2504:	e02a      	b.n	255c <shell_process+0xd8>
		char * cur = &shell_cli.rx_buffer[i];
    2506:	697b      	ldr	r3, [r7, #20]
    2508:	4a23      	ldr	r2, [pc, #140]	; (2598 <shell_process+0x114>)
    250a:	4413      	add	r3, r2
    250c:	3304      	adds	r3, #4
    250e:	607b      	str	r3, [r7, #4]
		if (*cur == '\n' || *cur == ' ' || i == shell_cli.rx_pos - 1) {
    2510:	687b      	ldr	r3, [r7, #4]
    2512:	781b      	ldrb	r3, [r3, #0]
    2514:	2b0a      	cmp	r3, #10
    2516:	d009      	beq.n	252c <shell_process+0xa8>
    2518:	687b      	ldr	r3, [r7, #4]
    251a:	781b      	ldrb	r3, [r3, #0]
    251c:	2b20      	cmp	r3, #32
    251e:	d005      	beq.n	252c <shell_process+0xa8>
    2520:	4b1d      	ldr	r3, [pc, #116]	; (2598 <shell_process+0x114>)
    2522:	681b      	ldr	r3, [r3, #0]
    2524:	1e5a      	subs	r2, r3, #1
    2526:	697b      	ldr	r3, [r7, #20]
    2528:	429a      	cmp	r2, r3
    252a:	d10f      	bne.n	254c <shell_process+0xc8>
			*cur = '\0';
    252c:	687b      	ldr	r3, [r7, #4]
    252e:	2200      	movs	r2, #0
    2530:	701a      	strb	r2, [r3, #0]
			if (next_arg) {
    2532:	69fb      	ldr	r3, [r7, #28]
    2534:	2b00      	cmp	r3, #0
    2536:	d00e      	beq.n	2556 <shell_process+0xd2>
				argv[argc++] = next_arg;
    2538:	69bb      	ldr	r3, [r7, #24]
    253a:	1c5a      	adds	r2, r3, #1
    253c:	61ba      	str	r2, [r7, #24]
    253e:	68ba      	ldr	r2, [r7, #8]
    2540:	69f9      	ldr	r1, [r7, #28]
    2542:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				next_arg = NULL;
    2546:	2300      	movs	r3, #0
    2548:	61fb      	str	r3, [r7, #28]
			if (next_arg) {
    254a:	e004      	b.n	2556 <shell_process+0xd2>
			}
		} else if (next_arg == NULL){
    254c:	69fb      	ldr	r3, [r7, #28]
    254e:	2b00      	cmp	r3, #0
    2550:	d101      	bne.n	2556 <shell_process+0xd2>
			next_arg = cur;
    2552:	687b      	ldr	r3, [r7, #4]
    2554:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < shell_cli.rx_pos && argc < max_args; i++) {
    2556:	697b      	ldr	r3, [r7, #20]
    2558:	3301      	adds	r3, #1
    255a:	617b      	str	r3, [r7, #20]
    255c:	4b0e      	ldr	r3, [pc, #56]	; (2598 <shell_process+0x114>)
    255e:	681a      	ldr	r2, [r3, #0]
    2560:	697b      	ldr	r3, [r7, #20]
    2562:	429a      	cmp	r2, r3
    2564:	d903      	bls.n	256e <shell_process+0xea>
    2566:	69ba      	ldr	r2, [r7, #24]
    2568:	693b      	ldr	r3, [r7, #16]
    256a:	429a      	cmp	r2, r3
    256c:	dbcb      	blt.n	2506 <shell_process+0x82>
		}
	}

	if (argc > 0) {
    256e:	69bb      	ldr	r3, [r7, #24]
    2570:	2b00      	cmp	r3, #0
    2572:	dd04      	ble.n	257e <shell_process+0xfa>
		shell_dispatch_cmd(argv, argc);
    2574:	68bb      	ldr	r3, [r7, #8]
    2576:	69b9      	ldr	r1, [r7, #24]
    2578:	4618      	mov	r0, r3
    257a:	f7ff fec9 	bl	2310 <shell_dispatch_cmd>
	}

	memset(&shell_cli, 0, sizeof(shell_cli));
    257e:	2284      	movs	r2, #132	; 0x84
    2580:	2100      	movs	r1, #0
    2582:	4805      	ldr	r0, [pc, #20]	; (2598 <shell_process+0x114>)
    2584:	f7ff fd98 	bl	20b8 <memset>
	shell_echo_str(SHELL_PROMPT);
    2588:	4804      	ldr	r0, [pc, #16]	; (259c <shell_process+0x118>)
    258a:	f016 fb7c 	bl	18c86 <shell_echo_str>
    258e:	46ad      	mov	sp, r5
}
    2590:	3720      	adds	r7, #32
    2592:	46bd      	mov	sp, r7
    2594:	bdb0      	pop	{r4, r5, r7, pc}
    2596:	bf00      	nop
    2598:	20002058 	.word	0x20002058
    259c:	0002c7ec 	.word	0x0002c7ec

000025a0 <shell_receive_char>:

static void shell_receive_char(char c) {
    25a0:	b580      	push	{r7, lr}
    25a2:	b082      	sub	sp, #8
    25a4:	af00      	add	r7, sp, #0
    25a6:	4603      	mov	r3, r0
    25a8:	71fb      	strb	r3, [r7, #7]
	shell_put_char(c);
    25aa:	79fb      	ldrb	r3, [r7, #7]
    25ac:	4618      	mov	r0, r3
    25ae:	f016 fbf0 	bl	18d92 <shell_put_char>
#ifdef DEV_QEMU
	if (shell_cli.rx_pos >= SHELL_BUFFER_SIZE) {
		return;
	}
#else
	if (c == '\r' || shell_cli.rx_pos >= SHELL_BUFFER_SIZE) {
    25b2:	79fb      	ldrb	r3, [r7, #7]
    25b4:	2b0d      	cmp	r3, #13
    25b6:	d00f      	beq.n	25d8 <shell_receive_char+0x38>
    25b8:	4b09      	ldr	r3, [pc, #36]	; (25e0 <shell_receive_char+0x40>)
    25ba:	681b      	ldr	r3, [r3, #0]
    25bc:	2b7f      	cmp	r3, #127	; 0x7f
    25be:	d80b      	bhi.n	25d8 <shell_receive_char+0x38>
		return;
	}
#endif

	shell_cli.rx_buffer[shell_cli.rx_pos++] = c;
    25c0:	4b07      	ldr	r3, [pc, #28]	; (25e0 <shell_receive_char+0x40>)
    25c2:	681b      	ldr	r3, [r3, #0]
    25c4:	1c5a      	adds	r2, r3, #1
    25c6:	4906      	ldr	r1, [pc, #24]	; (25e0 <shell_receive_char+0x40>)
    25c8:	600a      	str	r2, [r1, #0]
    25ca:	4a05      	ldr	r2, [pc, #20]	; (25e0 <shell_receive_char+0x40>)
    25cc:	4413      	add	r3, r2
    25ce:	79fa      	ldrb	r2, [r7, #7]
    25d0:	711a      	strb	r2, [r3, #4]
	shell_process();
    25d2:	f7ff ff57 	bl	2484 <shell_process>
    25d6:	e000      	b.n	25da <shell_receive_char+0x3a>
		return;
    25d8:	bf00      	nop
}
    25da:	3708      	adds	r7, #8
    25dc:	46bd      	mov	sp, r7
    25de:	bd80      	pop	{r7, pc}
    25e0:	20002058 	.word	0x20002058

000025e4 <test_debug_patch>:

static void test_rt_task(void) {
	// init_rt_task_servo_motor();
}

static void test_debug_patch(void) {
    25e4:	b580      	push	{r7, lr}
    25e6:	af00      	add	r7, sp, #0
	DEBUG_LOG("test_debug_patch\n");
    25e8:	4803      	ldr	r0, [pc, #12]	; (25f8 <test_debug_patch+0x14>)
    25ea:	f016 fd6c 	bl	190c6 <debug_log>
#ifndef LINUX_TEST
	test_debugmon_patch();
    25ee:	f000 fec9 	bl	3384 <test_debugmon_patch>
#endif
	
}
    25f2:	bf00      	nop
    25f4:	bd80      	pop	{r7, pc}
    25f6:	bf00      	nop
    25f8:	0002c7f0 	.word	0x0002c7f0

000025fc <cli_print_help>:
	{TEST_EBPF, run_eva_test, "Run eva test"},
	{TEST_SVR, start_patch_service, "Start patch service"},
	{TEST_FIXED_PATCH_POINT, run_fixed_patch_point_test, "Start testing fixed patch point"},
};

static void cli_print_help() {
    25fc:	b580      	push	{r7, lr}
    25fe:	b082      	sub	sp, #8
    2600:	af00      	add	r7, sp, #0
	int ncmd = sizeof(cmds) / sizeof(struct cli_cmd);
    2602:	2306      	movs	r3, #6
    2604:	603b      	str	r3, [r7, #0]
	shell_printf("IoTPatch Cli Usage: run [idx] | trigger [cve] | patch [cve] | vm [vid]\n");
    2606:	4813      	ldr	r0, [pc, #76]	; (2654 <cli_print_help+0x58>)
    2608:	f7ff fe5a 	bl	22c0 <shell_printf>
	for (int i = 0; i < ncmd; i++) {
    260c:	2300      	movs	r3, #0
    260e:	607b      	str	r3, [r7, #4]
    2610:	e018      	b.n	2644 <cli_print_help+0x48>
		shell_printf("run %d: %s\n", cmds[i].idx, cmds[i].help);
    2612:	4911      	ldr	r1, [pc, #68]	; (2658 <cli_print_help+0x5c>)
    2614:	687a      	ldr	r2, [r7, #4]
    2616:	4613      	mov	r3, r2
    2618:	005b      	lsls	r3, r3, #1
    261a:	4413      	add	r3, r2
    261c:	009b      	lsls	r3, r3, #2
    261e:	440b      	add	r3, r1
    2620:	6818      	ldr	r0, [r3, #0]
    2622:	490d      	ldr	r1, [pc, #52]	; (2658 <cli_print_help+0x5c>)
    2624:	687a      	ldr	r2, [r7, #4]
    2626:	4613      	mov	r3, r2
    2628:	005b      	lsls	r3, r3, #1
    262a:	4413      	add	r3, r2
    262c:	009b      	lsls	r3, r3, #2
    262e:	440b      	add	r3, r1
    2630:	3308      	adds	r3, #8
    2632:	681b      	ldr	r3, [r3, #0]
    2634:	461a      	mov	r2, r3
    2636:	4601      	mov	r1, r0
    2638:	4808      	ldr	r0, [pc, #32]	; (265c <cli_print_help+0x60>)
    263a:	f7ff fe41 	bl	22c0 <shell_printf>
	for (int i = 0; i < ncmd; i++) {
    263e:	687b      	ldr	r3, [r7, #4]
    2640:	3301      	adds	r3, #1
    2642:	607b      	str	r3, [r7, #4]
    2644:	687a      	ldr	r2, [r7, #4]
    2646:	683b      	ldr	r3, [r7, #0]
    2648:	429a      	cmp	r2, r3
    264a:	dbe2      	blt.n	2612 <cli_print_help+0x16>
	}
}
    264c:	bf00      	nop
    264e:	3708      	adds	r7, #8
    2650:	46bd      	mov	sp, r7
    2652:	bd80      	pop	{r7, pc}
    2654:	0002c894 	.word	0x0002c894
    2658:	2000e9e8 	.word	0x2000e9e8
    265c:	0002c8dc 	.word	0x0002c8dc

00002660 <run_test_by_id>:

void run_test_by_id(run_test_t cid) {
    2660:	b580      	push	{r7, lr}
    2662:	b084      	sub	sp, #16
    2664:	af00      	add	r7, sp, #0
    2666:	4603      	mov	r3, r0
    2668:	71fb      	strb	r3, [r7, #7]
	int ncmd = sizeof(cmds) / sizeof(struct cli_cmd);
    266a:	2306      	movs	r3, #6
    266c:	60fb      	str	r3, [r7, #12]
	if (cid > ncmd) {
    266e:	79fb      	ldrb	r3, [r7, #7]
    2670:	68fa      	ldr	r2, [r7, #12]
    2672:	429a      	cmp	r2, r3
    2674:	da07      	bge.n	2686 <run_test_by_id+0x26>
		shell_printf("Unsupport command: %d\n", cid);
    2676:	79fb      	ldrb	r3, [r7, #7]
    2678:	4619      	mov	r1, r3
    267a:	4815      	ldr	r0, [pc, #84]	; (26d0 <run_test_by_id+0x70>)
    267c:	f7ff fe20 	bl	22c0 <shell_printf>
		cli_print_help();
    2680:	f7ff ffbc 	bl	25fc <cli_print_help>
			cmd->func();
		} else {
			shell_printf("cmd:%d {%s} is not implement\n", cmd->idx, cmd->help);
		}
	}
}
    2684:	e01f      	b.n	26c6 <run_test_by_id+0x66>
		struct cli_cmd *cmd = &cmds[cid];
    2686:	79fa      	ldrb	r2, [r7, #7]
    2688:	4613      	mov	r3, r2
    268a:	005b      	lsls	r3, r3, #1
    268c:	4413      	add	r3, r2
    268e:	009b      	lsls	r3, r3, #2
    2690:	4a10      	ldr	r2, [pc, #64]	; (26d4 <run_test_by_id+0x74>)
    2692:	4413      	add	r3, r2
    2694:	60bb      	str	r3, [r7, #8]
		if (cmd->func != NULL) {
    2696:	68bb      	ldr	r3, [r7, #8]
    2698:	685b      	ldr	r3, [r3, #4]
    269a:	2b00      	cmp	r3, #0
    269c:	d00b      	beq.n	26b6 <run_test_by_id+0x56>
			shell_printf("run cmd: %d {%s}\n", cmd->idx, cmd->help);
    269e:	68bb      	ldr	r3, [r7, #8]
    26a0:	6819      	ldr	r1, [r3, #0]
    26a2:	68bb      	ldr	r3, [r7, #8]
    26a4:	689b      	ldr	r3, [r3, #8]
    26a6:	461a      	mov	r2, r3
    26a8:	480b      	ldr	r0, [pc, #44]	; (26d8 <run_test_by_id+0x78>)
    26aa:	f7ff fe09 	bl	22c0 <shell_printf>
			cmd->func();
    26ae:	68bb      	ldr	r3, [r7, #8]
    26b0:	685b      	ldr	r3, [r3, #4]
    26b2:	4798      	blx	r3
}
    26b4:	e007      	b.n	26c6 <run_test_by_id+0x66>
			shell_printf("cmd:%d {%s} is not implement\n", cmd->idx, cmd->help);
    26b6:	68bb      	ldr	r3, [r7, #8]
    26b8:	6819      	ldr	r1, [r3, #0]
    26ba:	68bb      	ldr	r3, [r7, #8]
    26bc:	689b      	ldr	r3, [r3, #8]
    26be:	461a      	mov	r2, r3
    26c0:	4806      	ldr	r0, [pc, #24]	; (26dc <run_test_by_id+0x7c>)
    26c2:	f7ff fdfd 	bl	22c0 <shell_printf>
}
    26c6:	bf00      	nop
    26c8:	3710      	adds	r7, #16
    26ca:	46bd      	mov	sp, r7
    26cc:	bd80      	pop	{r7, pc}
    26ce:	bf00      	nop
    26d0:	0002c8e8 	.word	0x0002c8e8
    26d4:	2000e9e8 	.word	0x2000e9e8
    26d8:	0002c900 	.word	0x0002c900
    26dc:	0002c914 	.word	0x0002c914

000026e0 <this_is_cve_trigger_func>:

typedef void (*trigger_func)(void);

extern int test_dynamic_bug(int val);

static void this_is_cve_trigger_func(void) {
    26e0:	b580      	push	{r7, lr}
    26e2:	b086      	sub	sp, #24
    26e4:	af00      	add	r7, sp, #0
	DEBUG_LOG("run test_func: 0x%08x\n", (uint32_t) test_dynamic_bug);
    26e6:	4b1d      	ldr	r3, [pc, #116]	; (275c <this_is_cve_trigger_func+0x7c>)
    26e8:	4619      	mov	r1, r3
    26ea:	481d      	ldr	r0, [pc, #116]	; (2760 <this_is_cve_trigger_func+0x80>)
    26ec:	f016 fceb 	bl	190c6 <debug_log>
	int eid = profile_add_event("dummy cve start");
    26f0:	481c      	ldr	r0, [pc, #112]	; (2764 <this_is_cve_trigger_func+0x84>)
    26f2:	f001 fe63 	bl	43bc <profile_add_event>
    26f6:	6138      	str	r0, [r7, #16]
	int inputs[] = {4500, 2000};
    26f8:	4a1b      	ldr	r2, [pc, #108]	; (2768 <this_is_cve_trigger_func+0x88>)
    26fa:	1d3b      	adds	r3, r7, #4
    26fc:	e892 0003 	ldmia.w	r2, {r0, r1}
    2700:	e883 0003 	stmia.w	r3, {r0, r1}
	// profile_start(0);
	// profile_end(0);
	// profile_dump(0);
	for (int i = 1; i < 2; i++) {
    2704:	2301      	movs	r3, #1
    2706:	617b      	str	r3, [r7, #20]
    2708:	e021      	b.n	274e <this_is_cve_trigger_func+0x6e>
		profile_start(0);
    270a:	2000      	movs	r0, #0
    270c:	f001 fe96 	bl	443c <profile_start>
		int v = test_dynamic_bug(inputs[i]);
    2710:	697b      	ldr	r3, [r7, #20]
    2712:	009b      	lsls	r3, r3, #2
    2714:	f107 0218 	add.w	r2, r7, #24
    2718:	4413      	add	r3, r2
    271a:	f853 3c14 	ldr.w	r3, [r3, #-20]
    271e:	4618      	mov	r0, r3
    2720:	f000 fe70 	bl	3404 <test_dynamic_bug>
    2724:	60f8      	str	r0, [r7, #12]
		profile_end(0);
    2726:	2000      	movs	r0, #0
    2728:	f001 fe9a 	bl	4460 <profile_end>
		profile_dump(0);
    272c:	2000      	movs	r0, #0
    272e:	f001 feb3 	bl	4498 <profile_dump>
		//profile_dump(1);
		// profile_start(2);
		DEBUG_LOG("[%04d] is bug fixed? %s\n", i, v == 0 ? "yes": "no");
    2732:	68fb      	ldr	r3, [r7, #12]
    2734:	2b00      	cmp	r3, #0
    2736:	d101      	bne.n	273c <this_is_cve_trigger_func+0x5c>
    2738:	4b0c      	ldr	r3, [pc, #48]	; (276c <this_is_cve_trigger_func+0x8c>)
    273a:	e000      	b.n	273e <this_is_cve_trigger_func+0x5e>
    273c:	4b0c      	ldr	r3, [pc, #48]	; (2770 <this_is_cve_trigger_func+0x90>)
    273e:	461a      	mov	r2, r3
    2740:	6979      	ldr	r1, [r7, #20]
    2742:	480c      	ldr	r0, [pc, #48]	; (2774 <this_is_cve_trigger_func+0x94>)
    2744:	f016 fcbf 	bl	190c6 <debug_log>
	for (int i = 1; i < 2; i++) {
    2748:	697b      	ldr	r3, [r7, #20]
    274a:	3301      	adds	r3, #1
    274c:	617b      	str	r3, [r7, #20]
    274e:	697b      	ldr	r3, [r7, #20]
    2750:	2b01      	cmp	r3, #1
    2752:	ddda      	ble.n	270a <this_is_cve_trigger_func+0x2a>
		// profile_end(2);
		// profile_dump(2);
	}
	//DEBUG_LOG("finish test_func: 0x%08x\n", (uint32_t) test_dynamic_bug);
}
    2754:	bf00      	nop
    2756:	3718      	adds	r7, #24
    2758:	46bd      	mov	sp, r7
    275a:	bd80      	pop	{r7, pc}
    275c:	00003405 	.word	0x00003405
    2760:	0002c934 	.word	0x0002c934
    2764:	0002c94c 	.word	0x0002c94c
    2768:	0002c980 	.word	0x0002c980
    276c:	0002c95c 	.word	0x0002c95c
    2770:	0002c960 	.word	0x0002c960
    2774:	0002c964 	.word	0x0002c964

00002778 <zephyr_cve_2020_10063>:
#include <misc/printk.h>
#include <net/coap.h>
#include <gpio.h>

static void zephyr_cve_2020_10063(void)
{
    2778:	b580      	push	{r7, lr}
    277a:	b08a      	sub	sp, #40	; 0x28
    277c:	af02      	add	r7, sp, #8
	unsigned char testcase[] = {
    277e:	4a18      	ldr	r2, [pc, #96]	; (27e0 <zephyr_cve_2020_10063+0x68>)
    2780:	f107 0310 	add.w	r3, r7, #16
    2784:	e892 0003 	ldmia.w	r2, {r0, r1}
    2788:	e883 0003 	stmia.w	r3, {r0, r1}
		0, 0, 0, 0,
		0x0E, /* delta=0, length=14 */ // COAP_OPTION_EXT_14 = 14
		0xFE, 0xF0, /* First option */
		0x00 /* More data following the option to skip the "if (r == 0) {" case */
	};
	testcase[5] = testcase[6] = 1;
    278c:	2301      	movs	r3, #1
    278e:	75bb      	strb	r3, [r7, #22]
    2790:	7dbb      	ldrb	r3, [r7, #22]
    2792:	757b      	strb	r3, [r7, #21]
	DEBUG_LOG("vul func addr: 0x%08x\n", coap_packet_parse);
    2794:	4913      	ldr	r1, [pc, #76]	; (27e4 <zephyr_cve_2020_10063+0x6c>)
    2796:	4814      	ldr	r0, [pc, #80]	; (27e8 <zephyr_cve_2020_10063+0x70>)
    2798:	f016 fc95 	bl	190c6 <debug_log>
	struct coap_packet pkt;
	int ret;
	int eid = profile_add_event("coap start");
    279c:	4813      	ldr	r0, [pc, #76]	; (27ec <zephyr_cve_2020_10063+0x74>)
    279e:	f001 fe0d 	bl	43bc <profile_add_event>
    27a2:	61f8      	str	r0, [r7, #28]
	profile_start(EV0);
    27a4:	2000      	movs	r0, #0
    27a6:	f001 fe49 	bl	443c <profile_start>
	profile_end(EV0);
    27aa:	2000      	movs	r0, #0
    27ac:	f001 fe58 	bl	4460 <profile_end>
	ret = coap_packet_parse(&pkt, testcase, sizeof(testcase), NULL, 0);
    27b0:	f107 0110 	add.w	r1, r7, #16
    27b4:	4638      	mov	r0, r7
    27b6:	2300      	movs	r3, #0
    27b8:	9300      	str	r3, [sp, #0]
    27ba:	2300      	movs	r3, #0
    27bc:	2208      	movs	r2, #8
    27be:	f01b fa0e 	bl	1dbde <coap_packet_parse>
    27c2:	61b8      	str	r0, [r7, #24]
	//profile_end(eid);
	profile_dump(EV0);
    27c4:	2000      	movs	r0, #0
    27c6:	f001 fe67 	bl	4498 <profile_dump>
	profile_dump(EV1);
    27ca:	2001      	movs	r0, #1
    27cc:	f001 fe64 	bl	4498 <profile_dump>
	DEBUG_LOG("ret = %d\n", ret);
    27d0:	69b9      	ldr	r1, [r7, #24]
    27d2:	4807      	ldr	r0, [pc, #28]	; (27f0 <zephyr_cve_2020_10063+0x78>)
    27d4:	f016 fc77 	bl	190c6 <debug_log>
}
    27d8:	bf00      	nop
    27da:	3720      	adds	r7, #32
    27dc:	46bd      	mov	sp, r7
    27de:	bd80      	pop	{r7, pc}
    27e0:	0002c9b8 	.word	0x0002c9b8
    27e4:	0001dbdf 	.word	0x0001dbdf
    27e8:	0002c988 	.word	0x0002c988
    27ec:	0002c9a0 	.word	0x0002c9a0
    27f0:	0002c9ac 	.word	0x0002c9ac

000027f4 <print_control>:

static void print_control(const char *s) {
    27f4:	b580      	push	{r7, lr}
    27f6:	b084      	sub	sp, #16
    27f8:	af00      	add	r7, sp, #0
    27fa:	6078      	str	r0, [r7, #4]
	uint32_t control;
	__asm__ volatile ("mrs %0, CONTROL" : "=r"(control));
    27fc:	f3ef 8314 	mrs	r3, CONTROL
    2800:	60fb      	str	r3, [r7, #12]
	printk("%s - CONTROL: 0x%X\n", s, control);
    2802:	68fa      	ldr	r2, [r7, #12]
    2804:	6879      	ldr	r1, [r7, #4]
    2806:	4803      	ldr	r0, [pc, #12]	; (2814 <print_control+0x20>)
    2808:	f019 fc14 	bl	1c034 <printk>
}
    280c:	bf00      	nop
    280e:	3710      	adds	r7, #16
    2810:	46bd      	mov	sp, r7
    2812:	bd80      	pop	{r7, pc}
    2814:	0002c9c0 	.word	0x0002c9c0

00002818 <escalate>:

static void escalate(void) {
    2818:	b580      	push	{r7, lr}
    281a:	af00      	add	r7, sp, #0
	print_control("escalated");
    281c:	4802      	ldr	r0, [pc, #8]	; (2828 <escalate+0x10>)
    281e:	f7ff ffe9 	bl	27f4 <print_control>
	// while (1) {}
}
    2822:	bf00      	nop
    2824:	bd80      	pop	{r7, pc}
    2826:	bf00      	nop
    2828:	0002c9d4 	.word	0x0002c9d4

0000282c <user>:

static void mqtt_cve_10062() {
	
}

static void user(void *p1, void *p2, void *p3) {
    282c:	b580      	push	{r7, lr}
    282e:	b08e      	sub	sp, #56	; 0x38
    2830:	af00      	add	r7, sp, #0
    2832:	60f8      	str	r0, [r7, #12]
    2834:	60b9      	str	r1, [r7, #8]
    2836:	607a      	str	r2, [r7, #4]
	struct gpio_driver_api api;
	struct device port;
	print_control("user");
    2838:	4809      	ldr	r0, [pc, #36]	; (2860 <user+0x34>)
    283a:	f7ff ffdb 	bl	27f4 <print_control>
	api.enable_callback = (void*)escalate;
    283e:	4b09      	ldr	r3, [pc, #36]	; (2864 <user+0x38>)
    2840:	62fb      	str	r3, [r7, #44]	; 0x2c
	port.driver_api = &api;
    2842:	f107 031c 	add.w	r3, r7, #28
    2846:	617b      	str	r3, [r7, #20]
	gpio_enable_callback(&port, 0, 0);
    2848:	f107 0310 	add.w	r3, r7, #16
    284c:	2200      	movs	r2, #0
    284e:	2100      	movs	r1, #0
    2850:	4618      	mov	r0, r3
    2852:	f016 fa67 	bl	18d24 <gpio_enable_callback>
}
    2856:	bf00      	nop
    2858:	3738      	adds	r7, #56	; 0x38
    285a:	46bd      	mov	sp, r7
    285c:	bd80      	pop	{r7, pc}
    285e:	bf00      	nop
    2860:	0002c9e0 	.word	0x0002c9e0
    2864:	00002819 	.word	0x00002819

00002868 <zephyr_cve_2020_10028>:

static void zephyr_cve_2020_10028(void) {
    2868:	b580      	push	{r7, lr}
    286a:	af00      	add	r7, sp, #0
	print_control("kernel");
    286c:	4804      	ldr	r0, [pc, #16]	; (2880 <zephyr_cve_2020_10028+0x18>)
    286e:	f7ff ffc1 	bl	27f4 <print_control>
	k_thread_user_mode_enter(user, NULL, NULL, NULL);
    2872:	2300      	movs	r3, #0
    2874:	2200      	movs	r2, #0
    2876:	2100      	movs	r1, #0
    2878:	4802      	ldr	r0, [pc, #8]	; (2884 <zephyr_cve_2020_10028+0x1c>)
    287a:	f015 fb71 	bl	17f60 <k_thread_user_mode_enter>
    287e:	bf00      	nop
    2880:	0002c9e8 	.word	0x0002c9e8
    2884:	0000282d 	.word	0x0000282d

00002888 <handle_trigger_func>:

// static 
#include "cve_trigger.h"
static void handle_trigger_func(int tid) {
    2888:	b580      	push	{r7, lr}
    288a:	b084      	sub	sp, #16
    288c:	af00      	add	r7, sp, #0
    288e:	6078      	str	r0, [r7, #4]

#if USE_DYNAMIC_PATCH
	int n = sizeof(dynamic_trigger_func_list) / sizeof(trigger_func);
    2890:	2303      	movs	r3, #3
    2892:	60fb      	str	r3, [r7, #12]
	if (tid >= n) {
    2894:	687a      	ldr	r2, [r7, #4]
    2896:	68fb      	ldr	r3, [r7, #12]
    2898:	429a      	cmp	r2, r3
    289a:	db05      	blt.n	28a8 <handle_trigger_func+0x20>
		DEBUG_LOG("ERROR: trigger index out of range %d >= %d\n", tid, n);
    289c:	68fa      	ldr	r2, [r7, #12]
    289e:	6879      	ldr	r1, [r7, #4]
    28a0:	4805      	ldr	r0, [pc, #20]	; (28b8 <handle_trigger_func+0x30>)
    28a2:	f016 fc10 	bl	190c6 <debug_log>
		return;
    28a6:	e004      	b.n	28b2 <handle_trigger_func+0x2a>
	}
	dynamic_trigger_func_list[tid]();
    28a8:	4a04      	ldr	r2, [pc, #16]	; (28bc <handle_trigger_func+0x34>)
    28aa:	687b      	ldr	r3, [r7, #4]
    28ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    28b0:	4798      	blx	r3
	}
	fixed_trigger_func_list[tid]();
#else 
	DEBUG_LOG("Not impl! handle_trigger_func\n");
#endif
}
    28b2:	3710      	adds	r7, #16
    28b4:	46bd      	mov	sp, r7
    28b6:	bd80      	pop	{r7, pc}
    28b8:	0002c9f0 	.word	0x0002c9f0
    28bc:	2000ea30 	.word	0x2000ea30

000028c0 <show_patch_list>:



static void show_patch_list() {
    28c0:	b580      	push	{r7, lr}
    28c2:	af00      	add	r7, sp, #0
#if USE_DYNAMIC_PATCH
	DEBUG_LOG("Use Dynamic Patch Points\n");	
    28c4:	4803      	ldr	r0, [pc, #12]	; (28d4 <show_patch_list+0x14>)
    28c6:	f016 fbfe 	bl	190c6 <debug_log>
	show_local_patch_desc();
    28ca:	f000 fd77 	bl	33bc <show_local_patch_desc>
	DEBUG_LOG("Use Fixed Patch Points\n");
	show_fixed_patch_desc();
#else
	DEBUG_LOG("Not impl. show_patch_list\n");
#endif
}
    28ce:	bf00      	nop
    28d0:	bd80      	pop	{r7, pc}
    28d2:	bf00      	nop
    28d4:	0002ca1c 	.word	0x0002ca1c

000028d8 <run_shell_cli>:
#endif
	run_ebpf_eva(vid);
}


void run_shell_cli(void) {
    28d8:	b580      	push	{r7, lr}
    28da:	b082      	sub	sp, #8
    28dc:	af00      	add	r7, sp, #0
	// extern uint32_t SystemCoreClock;
	// shell_printf("SystemCoreClock: %d\n", SystemCoreClock);
	memset(&shell_cli, 0, sizeof(shell_cli));
    28de:	2284      	movs	r2, #132	; 0x84
    28e0:	2100      	movs	r1, #0
    28e2:	480f      	ldr	r0, [pc, #60]	; (2920 <run_shell_cli+0x48>)
    28e4:	f7ff fbe8 	bl	20b8 <memset>
	cli_print_help();
    28e8:	f7ff fe88 	bl	25fc <cli_print_help>
	shell_echo_str(SHELL_PROMPT);
    28ec:	480d      	ldr	r0, [pc, #52]	; (2924 <run_shell_cli+0x4c>)
    28ee:	f016 f9ca 	bl	18c86 <shell_echo_str>
	exit_shell = false;
    28f2:	4b0d      	ldr	r3, [pc, #52]	; (2928 <run_shell_cli+0x50>)
    28f4:	2200      	movs	r2, #0
    28f6:	701a      	strb	r2, [r3, #0]
	while (!exit_shell) {
    28f8:	e007      	b.n	290a <run_shell_cli+0x32>
		char c = shell_get_char();
    28fa:	f016 fa42 	bl	18d82 <shell_get_char>
    28fe:	4603      	mov	r3, r0
    2900:	71fb      	strb	r3, [r7, #7]
		shell_receive_char(c);
    2902:	79fb      	ldrb	r3, [r7, #7]
    2904:	4618      	mov	r0, r3
    2906:	f7ff fe4b 	bl	25a0 <shell_receive_char>
	while (!exit_shell) {
    290a:	4b07      	ldr	r3, [pc, #28]	; (2928 <run_shell_cli+0x50>)
    290c:	781b      	ldrb	r3, [r3, #0]
    290e:	f083 0301 	eor.w	r3, r3, #1
    2912:	b2db      	uxtb	r3, r3
    2914:	2b00      	cmp	r3, #0
    2916:	d1f0      	bne.n	28fa <run_shell_cli+0x22>
	}
}
    2918:	bf00      	nop
    291a:	3708      	adds	r7, #8
    291c:	46bd      	mov	sp, r7
    291e:	bd80      	pop	{r7, pc}
    2920:	20002058 	.word	0x20002058
    2924:	0002c7ec 	.word	0x0002c7ec
    2928:	2000623a 	.word	0x2000623a

0000292c <FPB_Handler0>:
//		__asm__ __volatile__("BX LR"); \


//DECLARE_FPB_HANDLE(0);
void FPB_Handler0(void)
{
    292c:	b580      	push	{r7, lr}
    292e:	af00      	add	r7, sp, #0
	__asm__("NOP");
    2930:	bf00      	nop
	__asm__("NOP");
    2932:	bf00      	nop
	__asm__("NOP");
    2934:	bf00      	nop
	__asm__("NOP");
    2936:	bf00      	nop
	__asm__("PUSH {r0-r3, r12, lr}");
    2938:	e92d 500f 	stmdb	sp!, {r0, r1, r2, r3, ip, lr}
	DEBUG_LOG("FPB_Handler0\n");
    293c:	4809      	ldr	r0, [pc, #36]	; (2964 <FPB_Handler0+0x38>)
    293e:	f016 fbc2 	bl	190c6 <debug_log>
//	fpb_trampoline_0();
//	IMPORT leave_fpb_bpkt
//	__asm__("PUSH {r3, lr}");
	__asm__("TST lr, #4");
    2942:	f01e 0f04 	tst.w	lr, #4
	__asm__("ITE EQ");
    2946:	bf0c      	ite	eq
	__asm__("MRSEQ r0, MSP");
    2948:	f3ef 8008 	mrseq	r0, MSP
	__asm__("MRSNE r0, PSP");
    294c:	f3ef 8009 	mrsne	r0, PSP
	__asm__("MOVS r1, #0");
    2950:	2100      	movs	r1, #0
	__asm__("BL leave_fpb_bpkt");
    2952:	f000 fb87 	bl	3064 <leave_fpb_bpkt>
	// todo: return in other address
	__asm__("MOV r5, r0");
    2956:	4605      	mov	r5, r0
	__asm__("POP {r0-r3, r12, lr}");
    2958:	e8bd 500f 	ldmia.w	sp!, {r0, r1, r2, r3, ip, lr}
//	DEBUG_LOG("exit FPB_Handler0\n");
	__asm__("MOV PC, r5");
    295c:	46af      	mov	pc, r5
//	__asm__("BX LR");
//	__asm__("pop	{r3, pc}");
//	return 0;
}
    295e:	bf00      	nop
    2960:	bd80      	pop	{r7, pc}
    2962:	bf00      	nop
    2964:	0002ca38 	.word	0x0002ca38

00002968 <fpb_enable>:
} bpkt_info;

static bool bpkt_is_init = false;

// enable hardware breakpoint
static void fpb_enable(void) {
    2968:	b480      	push	{r7}
    296a:	af00      	add	r7, sp, #0
	FPB->CTRL |= 0x3;
    296c:	4b04      	ldr	r3, [pc, #16]	; (2980 <fpb_enable+0x18>)
    296e:	681b      	ldr	r3, [r3, #0]
    2970:	4a03      	ldr	r2, [pc, #12]	; (2980 <fpb_enable+0x18>)
    2972:	f043 0303 	orr.w	r3, r3, #3
    2976:	6013      	str	r3, [r2, #0]
}
    2978:	bf00      	nop
    297a:	46bd      	mov	sp, r7
    297c:	bc80      	pop	{r7}
    297e:	4770      	bx	lr
    2980:	e0002000 	.word	0xe0002000

00002984 <fpb_disable>:

static void fpb_disable(void) {
    2984:	b480      	push	{r7}
    2986:	af00      	add	r7, sp, #0
	FPB->CTRL = (FPB->CTRL & ~0x3) | 0x2;
    2988:	4b05      	ldr	r3, [pc, #20]	; (29a0 <fpb_disable+0x1c>)
    298a:	681b      	ldr	r3, [r3, #0]
    298c:	f023 0303 	bic.w	r3, r3, #3
    2990:	4a03      	ldr	r2, [pc, #12]	; (29a0 <fpb_disable+0x1c>)
    2992:	f043 0302 	orr.w	r3, r3, #2
    2996:	6013      	str	r3, [r2, #0]
}
    2998:	bf00      	nop
    299a:	46bd      	mov	sp, r7
    299c:	bc80      	pop	{r7}
    299e:	4770      	bx	lr
    29a0:	e0002000 	.word	0xe0002000

000029a4 <get_fpb_patch_remap>:

// address should be 32bit align
static inline uint32_t get_fpb_patch_remap() {
    29a4:	b480      	push	{r7}
    29a6:	af00      	add	r7, sp, #0
	return ((uint32_t)(&REMAP_ADDR) + 0x1f) & (~0x1f);
    29a8:	4b03      	ldr	r3, [pc, #12]	; (29b8 <get_fpb_patch_remap+0x14>)
    29aa:	331f      	adds	r3, #31
    29ac:	f023 031f 	bic.w	r3, r3, #31
}
    29b0:	4618      	mov	r0, r3
    29b2:	46bd      	mov	sp, r7
    29b4:	bc80      	pop	{r7}
    29b6:	4770      	bx	lr
    29b8:	200021dc 	.word	0x200021dc

000029bc <show_hw_bkpt>:

int get_hw_bkpt_num() {
	return 6;
}

void show_hw_bkpt(void) {
    29bc:	b580      	push	{r7, lr}
    29be:	b088      	sub	sp, #32
    29c0:	af02      	add	r7, sp, #8
	// uint32_t fp_ctrl = FPB->CTRL;
	// uint32_t num_code_comparators = (((fp_ctrl >> 12) & 0x7) << 4) | ((fp_ctrl >> 4) & 0xF);
	DEBUG_LOG("Dump current hardware breakpoints, MODE-%s:\n", REMAP_ADDR.active ? "FPB" : "debug monitor");
    29c2:	4b1e      	ldr	r3, [pc, #120]	; (2a3c <show_hw_bkpt+0x80>)
    29c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    29c8:	2b00      	cmp	r3, #0
    29ca:	d001      	beq.n	29d0 <show_hw_bkpt+0x14>
    29cc:	4b1c      	ldr	r3, [pc, #112]	; (2a40 <show_hw_bkpt+0x84>)
    29ce:	e000      	b.n	29d2 <show_hw_bkpt+0x16>
    29d0:	4b1c      	ldr	r3, [pc, #112]	; (2a44 <show_hw_bkpt+0x88>)
    29d2:	4619      	mov	r1, r3
    29d4:	481c      	ldr	r0, [pc, #112]	; (2a48 <show_hw_bkpt+0x8c>)
    29d6:	f016 fb76 	bl	190c6 <debug_log>
	for (int i = 0; i < MAX_BP; i++) {
    29da:	2300      	movs	r3, #0
    29dc:	617b      	str	r3, [r7, #20]
    29de:	e025      	b.n	2a2c <show_hw_bkpt+0x70>
		const uint32_t fp_comp = FPB->COMP[i];
    29e0:	4a1a      	ldr	r2, [pc, #104]	; (2a4c <show_hw_bkpt+0x90>)
    29e2:	697b      	ldr	r3, [r7, #20]
    29e4:	3302      	adds	r3, #2
    29e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    29ea:	60fb      	str	r3, [r7, #12]
		const int enabled = fp_comp & 0x1;
    29ec:	68fb      	ldr	r3, [r7, #12]
    29ee:	f003 0301 	and.w	r3, r3, #1
    29f2:	60bb      	str	r3, [r7, #8]
		const uint32_t replace = fp_comp >> 30;
    29f4:	68fb      	ldr	r3, [r7, #12]
    29f6:	0f9b      	lsrs	r3, r3, #30
    29f8:	607b      	str	r3, [r7, #4]

		uint32_t inst_addr = fp_comp & 0x1FFFFFFC;
    29fa:	68fb      	ldr	r3, [r7, #12]
    29fc:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    2a00:	f023 0303 	bic.w	r3, r3, #3
    2a04:	613b      	str	r3, [r7, #16]
		if (replace == 0x2) {
    2a06:	687b      	ldr	r3, [r7, #4]
    2a08:	2b02      	cmp	r3, #2
    2a0a:	d103      	bne.n	2a14 <show_hw_bkpt+0x58>
		  inst_addr |= 0x2;
    2a0c:	693b      	ldr	r3, [r7, #16]
    2a0e:	f043 0302 	orr.w	r3, r3, #2
    2a12:	613b      	str	r3, [r7, #16]
		}

		DEBUG_LOG("  FP_COMP[%d] Enabled %d, Replace: %d, Address 0x%x\n",(int)i, (int)enabled, (int)replace, inst_addr);
    2a14:	687a      	ldr	r2, [r7, #4]
    2a16:	693b      	ldr	r3, [r7, #16]
    2a18:	9300      	str	r3, [sp, #0]
    2a1a:	4613      	mov	r3, r2
    2a1c:	68ba      	ldr	r2, [r7, #8]
    2a1e:	6979      	ldr	r1, [r7, #20]
    2a20:	480b      	ldr	r0, [pc, #44]	; (2a50 <show_hw_bkpt+0x94>)
    2a22:	f016 fb50 	bl	190c6 <debug_log>
	for (int i = 0; i < MAX_BP; i++) {
    2a26:	697b      	ldr	r3, [r7, #20]
    2a28:	3301      	adds	r3, #1
    2a2a:	617b      	str	r3, [r7, #20]
    2a2c:	697b      	ldr	r3, [r7, #20]
    2a2e:	2b05      	cmp	r3, #5
    2a30:	ddd6      	ble.n	29e0 <show_hw_bkpt+0x24>
	}
}
    2a32:	bf00      	nop
    2a34:	3718      	adds	r7, #24
    2a36:	46bd      	mov	sp, r7
    2a38:	bd80      	pop	{r7, pc}
    2a3a:	bf00      	nop
    2a3c:	200021dc 	.word	0x200021dc
    2a40:	0002ca48 	.word	0x0002ca48
    2a44:	0002ca4c 	.word	0x0002ca4c
    2a48:	0002ca5c 	.word	0x0002ca5c
    2a4c:	e0002000 	.word	0xe0002000
    2a50:	0002ca8c 	.word	0x0002ca8c

00002a54 <calc_branch_instr>:
//	handle_fpb_remap(5);
//}



uint32_t calc_branch_instr(uint32_t instr_addr, uint32_t target_addr) { // A7-205
    2a54:	b480      	push	{r7}
    2a56:	b089      	sub	sp, #36	; 0x24
    2a58:	af00      	add	r7, sp, #0
    2a5a:	6078      	str	r0, [r7, #4]
    2a5c:	6039      	str	r1, [r7, #0]
	uint32_t offset = (target_addr & (~0x1)) - (instr_addr & (~0x1)) - 4;
    2a5e:	683b      	ldr	r3, [r7, #0]
    2a60:	f023 0201 	bic.w	r2, r3, #1
    2a64:	687b      	ldr	r3, [r7, #4]
    2a66:	f023 0301 	bic.w	r3, r3, #1
    2a6a:	1ad3      	subs	r3, r2, r3
    2a6c:	3b04      	subs	r3, #4
    2a6e:	61fb      	str	r3, [r7, #28]
	uint16_t offset_10_upper = (offset >> 12) & 0x03FF;
    2a70:	69fb      	ldr	r3, [r7, #28]
    2a72:	0b1b      	lsrs	r3, r3, #12
    2a74:	b29b      	uxth	r3, r3
    2a76:	f3c3 0309 	ubfx	r3, r3, #0, #10
    2a7a:	837b      	strh	r3, [r7, #26]
	uint16_t offset_11_lower = ((offset) >> 1)  & 0x07FF; // UNCERTAIN about this!
    2a7c:	69fb      	ldr	r3, [r7, #28]
    2a7e:	085b      	lsrs	r3, r3, #1
    2a80:	b29b      	uxth	r3, r3
    2a82:	f3c3 030a 	ubfx	r3, r3, #0, #11
    2a86:	833b      	strh	r3, [r7, #24]
	
	uint8_t s_pos = 24;
    2a88:	2318      	movs	r3, #24
    2a8a:	75fb      	strb	r3, [r7, #23]
	uint8_t s  = (offset >> s_pos) & 0x01u;
    2a8c:	7dfb      	ldrb	r3, [r7, #23]
    2a8e:	69fa      	ldr	r2, [r7, #28]
    2a90:	fa22 f303 	lsr.w	r3, r2, r3
    2a94:	b2db      	uxtb	r3, r3
    2a96:	f003 0301 	and.w	r3, r3, #1
    2a9a:	75bb      	strb	r3, [r7, #22]
	uint8_t i1 = (offset >> (s_pos - 1)) & 0x01u;
    2a9c:	7dfb      	ldrb	r3, [r7, #23]
    2a9e:	3b01      	subs	r3, #1
    2aa0:	69fa      	ldr	r2, [r7, #28]
    2aa2:	fa22 f303 	lsr.w	r3, r2, r3
    2aa6:	b2db      	uxtb	r3, r3
    2aa8:	f003 0301 	and.w	r3, r3, #1
    2aac:	757b      	strb	r3, [r7, #21]
	uint8_t i2 = (offset >> (s_pos - 2)) & 0x01u;
    2aae:	7dfb      	ldrb	r3, [r7, #23]
    2ab0:	3b02      	subs	r3, #2
    2ab2:	69fa      	ldr	r2, [r7, #28]
    2ab4:	fa22 f303 	lsr.w	r3, r2, r3
    2ab8:	b2db      	uxtb	r3, r3
    2aba:	f003 0301 	and.w	r3, r3, #1
    2abe:	753b      	strb	r3, [r7, #20]
	
	uint8_t j1 = 0x01 & ((~i1) ^ s);
    2ac0:	7d7a      	ldrb	r2, [r7, #21]
    2ac2:	7dbb      	ldrb	r3, [r7, #22]
    2ac4:	4053      	eors	r3, r2
    2ac6:	b2db      	uxtb	r3, r3
    2ac8:	f003 0301 	and.w	r3, r3, #1
    2acc:	2b00      	cmp	r3, #0
    2ace:	bf0c      	ite	eq
    2ad0:	2301      	moveq	r3, #1
    2ad2:	2300      	movne	r3, #0
    2ad4:	b2db      	uxtb	r3, r3
    2ad6:	74fb      	strb	r3, [r7, #19]
	uint8_t j2 = 0x01 & ((~i2) ^ s);
    2ad8:	7d3a      	ldrb	r2, [r7, #20]
    2ada:	7dbb      	ldrb	r3, [r7, #22]
    2adc:	4053      	eors	r3, r2
    2ade:	b2db      	uxtb	r3, r3
    2ae0:	f003 0301 	and.w	r3, r3, #1
    2ae4:	2b00      	cmp	r3, #0
    2ae6:	bf0c      	ite	eq
    2ae8:	2301      	moveq	r3, #1
    2aea:	2300      	movne	r3, #0
    2aec:	b2db      	uxtb	r3, r3
    2aee:	74bb      	strb	r3, [r7, #18]
	
	uint16_t upper_bl_instr =  ((0x1E << 11) | (s << 10) | offset_10_upper);
    2af0:	7dbb      	ldrb	r3, [r7, #22]
    2af2:	029b      	lsls	r3, r3, #10
    2af4:	b21a      	sxth	r2, r3
    2af6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
    2afa:	4313      	orrs	r3, r2
    2afc:	b21b      	sxth	r3, r3
    2afe:	ea6f 5303 	mvn.w	r3, r3, lsl #20
    2b02:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    2b06:	b21b      	sxth	r3, r3
    2b08:	823b      	strh	r3, [r7, #16]
	uint16_t lower_bl_instr =  ((0x02 << 14) | (j1 << 13) | (0x01 << 12) | (j2 << 11) | offset_11_lower);
    2b0a:	7cfb      	ldrb	r3, [r7, #19]
    2b0c:	035b      	lsls	r3, r3, #13
    2b0e:	b21a      	sxth	r2, r3
    2b10:	7cbb      	ldrb	r3, [r7, #18]
    2b12:	02db      	lsls	r3, r3, #11
    2b14:	b21b      	sxth	r3, r3
    2b16:	4313      	orrs	r3, r2
    2b18:	b21a      	sxth	r2, r3
    2b1a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
    2b1e:	4313      	orrs	r3, r2
    2b20:	b21a      	sxth	r2, r3
    2b22:	4b06      	ldr	r3, [pc, #24]	; (2b3c <calc_branch_instr+0xe8>)
    2b24:	4313      	orrs	r3, r2
    2b26:	b21b      	sxth	r3, r3
    2b28:	81fb      	strh	r3, [r7, #14]
	
	return ((upper_bl_instr << 16) | lower_bl_instr);
    2b2a:	8a3b      	ldrh	r3, [r7, #16]
    2b2c:	041a      	lsls	r2, r3, #16
    2b2e:	89fb      	ldrh	r3, [r7, #14]
    2b30:	4313      	orrs	r3, r2
	//
	//uint16_t jp = 0xf7fd;
	//return (jp << 16) | (target_addr &(~0x1));
}
    2b32:	4618      	mov	r0, r3
    2b34:	3724      	adds	r7, #36	; 0x24
    2b36:	46bd      	mov	sp, r7
    2b38:	bc80      	pop	{r7}
    2b3a:	4770      	bx	lr
    2b3c:	ffff9000 	.word	0xffff9000

00002b40 <add_fpb_bkpt>:
uint32_t calc_branch_w_link_instr(uint32_t inst_addr, uint32_t target_addr) {
	uint32_t branch_instr = calc_branch_instr(inst_addr, target_addr);
	return (branch_instr | 0x00004000); // Set bit 14. This is the only difference between B and BL instructions.
}

static int add_fpb_bkpt(uint32_t inst_addr) {
    2b40:	b5b0      	push	{r4, r5, r7, lr}
    2b42:	b096      	sub	sp, #88	; 0x58
    2b44:	af02      	add	r7, sp, #8
    2b46:	6078      	str	r0, [r7, #4]
	int idx = bpkt_info.cur_idx;
    2b48:	4b73      	ldr	r3, [pc, #460]	; (2d18 <add_fpb_bkpt+0x1d8>)
    2b4a:	781b      	ldrb	r3, [r3, #0]
    2b4c:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t trampolines[] = { (uint32_t) FPB_Handler0, (uint32_t) FPB_Handler1, 
    2b4e:	4b73      	ldr	r3, [pc, #460]	; (2d1c <add_fpb_bkpt+0x1dc>)
    2b50:	f107 0418 	add.w	r4, r7, #24
    2b54:	461d      	mov	r5, r3
    2b56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2b58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2b5a:	e895 0003 	ldmia.w	r5, {r0, r1}
    2b5e:	e884 0003 	stmia.w	r4, {r0, r1}
		(uint32_t) FPB_Handler2, (uint32_t) FPB_Handler3, (uint32_t) FPB_Handler4, (uint32_t) FPB_Handler5};
	// align jump address
	uint32_t trampoline_addr = ((trampolines[idx] & (~0x3)) + 3) & (~0x3);
    2b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2b64:	009b      	lsls	r3, r3, #2
    2b66:	f107 0250 	add.w	r2, r7, #80	; 0x50
    2b6a:	4413      	add	r3, r2
    2b6c:	f853 3c38 	ldr.w	r3, [r3, #-56]
    2b70:	f023 0303 	bic.w	r3, r3, #3
    2b74:	3303      	adds	r3, #3
    2b76:	f023 0303 	bic.w	r3, r3, #3
    2b7a:	643b      	str	r3, [r7, #64]	; 0x40
	//uint32_t trampoline_addr = (trampolines[idx] & (~0x1));
	//uint32_t trampoline_addr = (((uint32_t) FPB_Handler0 & (~0x3)) + 3) & (~0x3);
	//trampoline_addr = (uint32_t) fpb_trampoline_0 & (~0x1);
	//trampoline_addr = (trampolines[0] & (0x1))
	uint32_t jump_inst = little_endian_16_bit(calc_branch_instr(inst_addr, trampoline_addr));
    2b7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
    2b7e:	6878      	ldr	r0, [r7, #4]
    2b80:	f7ff ff68 	bl	2a54 <calc_branch_instr>
    2b84:	4603      	mov	r3, r0
    2b86:	4618      	mov	r0, r3
    2b88:	f016 faec 	bl	19164 <little_endian_16_bit>
    2b8c:	63f8      	str	r0, [r7, #60]	; 0x3c
	//jump_inst = my_gen_bw(inst_addr, trampoline_addr);
	const uint32_t PATCH_TBL = get_fpb_patch_remap();
    2b8e:	f7ff ff09 	bl	29a4 <get_fpb_patch_remap>
    2b92:	4603      	mov	r3, r0
    2b94:	617b      	str	r3, [r7, #20]
	
	//uint32_t my_jump = my_gen_bw(inst_addr, trampoline_addr);
	//jump_inst = my_jump;
	inst_addr = inst_addr & (~0x1);
    2b96:	687b      	ldr	r3, [r7, #4]
    2b98:	f023 0301 	bic.w	r3, r3, #1
    2b9c:	607b      	str	r3, [r7, #4]
	
	DEBUG_LOG("inst is half word: 0x%08x %d trampoline_addr: 0x%08x\n", inst_addr, inst_addr % 4, trampoline_addr);
    2b9e:	687b      	ldr	r3, [r7, #4]
    2ba0:	f003 0203 	and.w	r2, r3, #3
    2ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2ba6:	6879      	ldr	r1, [r7, #4]
    2ba8:	485d      	ldr	r0, [pc, #372]	; (2d20 <add_fpb_bkpt+0x1e0>)
    2baa:	f016 fa8c 	bl	190c6 <debug_log>
	DEBUG_LOG("[0x%08x] fpb jump to: 0x%08x inst: 0x%08x jump_inst: 0x%08x\n", &(PATCH_TBL), trampoline_addr, inst_addr, jump_inst);
    2bae:	f107 0114 	add.w	r1, r7, #20
    2bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2bb4:	9300      	str	r3, [sp, #0]
    2bb6:	687b      	ldr	r3, [r7, #4]
    2bb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    2bba:	485a      	ldr	r0, [pc, #360]	; (2d24 <add_fpb_bkpt+0x1e4>)
    2bbc:	f016 fa83 	bl	190c6 <debug_log>
	if (inst_addr % 4 == 0) // Instruction is word aligned.
    2bc0:	687b      	ldr	r3, [r7, #4]
    2bc2:	f003 0303 	and.w	r3, r3, #3
    2bc6:	2b00      	cmp	r3, #0
    2bc8:	d13d      	bne.n	2c46 <add_fpb_bkpt+0x106>
	{
		// use exist FP->COMP
		uint32_t fp_comp = inst_addr | 0x1;
    2bca:	687b      	ldr	r3, [r7, #4]
    2bcc:	f043 0301 	orr.w	r3, r3, #1
    2bd0:	63bb      	str	r3, [r7, #56]	; 0x38
		for (int i = 0; i < bpkt_info.bpkt_num; i++) {
    2bd2:	2300      	movs	r3, #0
    2bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
    2bd6:	e01a      	b.n	2c0e <add_fpb_bkpt+0xce>
			if (FPB->COMP[i] == fp_comp || FPB->COMP[i] == inst_addr) {
    2bd8:	4a53      	ldr	r2, [pc, #332]	; (2d28 <add_fpb_bkpt+0x1e8>)
    2bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2bdc:	3302      	adds	r3, #2
    2bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2be2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    2be4:	429a      	cmp	r2, r3
    2be6:	d007      	beq.n	2bf8 <add_fpb_bkpt+0xb8>
    2be8:	4a4f      	ldr	r2, [pc, #316]	; (2d28 <add_fpb_bkpt+0x1e8>)
    2bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2bec:	3302      	adds	r3, #2
    2bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2bf2:	687a      	ldr	r2, [r7, #4]
    2bf4:	429a      	cmp	r2, r3
    2bf6:	d107      	bne.n	2c08 <add_fpb_bkpt+0xc8>
				FPB->COMP[i] = fp_comp;
    2bf8:	494b      	ldr	r1, [pc, #300]	; (2d28 <add_fpb_bkpt+0x1e8>)
    2bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2bfc:	3302      	adds	r3, #2
    2bfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
    2c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				return i;
    2c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2c06:	e082      	b.n	2d0e <add_fpb_bkpt+0x1ce>
		for (int i = 0; i < bpkt_info.bpkt_num; i++) {
    2c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2c0a:	3301      	adds	r3, #1
    2c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
    2c0e:	4b42      	ldr	r3, [pc, #264]	; (2d18 <add_fpb_bkpt+0x1d8>)
    2c10:	785b      	ldrb	r3, [r3, #1]
    2c12:	461a      	mov	r2, r3
    2c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2c16:	4293      	cmp	r3, r2
    2c18:	dbde      	blt.n	2bd8 <add_fpb_bkpt+0x98>
			}
		}
		
		// add new fpb remap
		//fpb_comparator_reg_config(reg_index, instr_addr);
		*((uint32_t *) (PATCH_TBL + (idx * 4))) = jump_inst;
    2c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2c1c:	009b      	lsls	r3, r3, #2
    2c1e:	461a      	mov	r2, r3
    2c20:	697b      	ldr	r3, [r7, #20]
    2c22:	4413      	add	r3, r2
    2c24:	461a      	mov	r2, r3
    2c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2c28:	6013      	str	r3, [r2, #0]
		
		FPB->COMP[bpkt_info.cur_idx] = fp_comp;
    2c2a:	493f      	ldr	r1, [pc, #252]	; (2d28 <add_fpb_bkpt+0x1e8>)
    2c2c:	4b3a      	ldr	r3, [pc, #232]	; (2d18 <add_fpb_bkpt+0x1d8>)
    2c2e:	781b      	ldrb	r3, [r3, #0]
    2c30:	3302      	adds	r3, #2
    2c32:	6bba      	ldr	r2, [r7, #56]	; 0x38
    2c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		bpkt_info.cur_idx++;
    2c38:	4b37      	ldr	r3, [pc, #220]	; (2d18 <add_fpb_bkpt+0x1d8>)
    2c3a:	781b      	ldrb	r3, [r3, #0]
    2c3c:	3301      	adds	r3, #1
    2c3e:	b2da      	uxtb	r2, r3
    2c40:	4b35      	ldr	r3, [pc, #212]	; (2d18 <add_fpb_bkpt+0x1d8>)
    2c42:	701a      	strb	r2, [r3, #0]
    2c44:	e061      	b.n	2d0a <add_fpb_bkpt+0x1ca>
		//set_fbp_jump();
	} 
	else // Instruction is half-word aligned.
	{
		// use exist FP->COMP
		uint32_t fp_comp1 = inst_addr & 0xFFFFFFFC;
    2c46:	687b      	ldr	r3, [r7, #4]
    2c48:	f023 0303 	bic.w	r3, r3, #3
    2c4c:	637b      	str	r3, [r7, #52]	; 0x34
		uint32_t fp_comp2 = (inst_addr & 0xFFFFFFFC) + 4;
    2c4e:	687b      	ldr	r3, [r7, #4]
    2c50:	f023 0303 	bic.w	r3, r3, #3
    2c54:	3304      	adds	r3, #4
    2c56:	633b      	str	r3, [r7, #48]	; 0x30
		
		for (int i = 0; i < bpkt_info.bpkt_num - 1; i++) {
    2c58:	2300      	movs	r3, #0
    2c5a:	64bb      	str	r3, [r7, #72]	; 0x48
    2c5c:	e015      	b.n	2c8a <add_fpb_bkpt+0x14a>
			if (FPB->COMP[i] == fp_comp1 && FPB->COMP[i + 1] == fp_comp2) {
    2c5e:	4a32      	ldr	r2, [pc, #200]	; (2d28 <add_fpb_bkpt+0x1e8>)
    2c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2c62:	3302      	adds	r3, #2
    2c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2c68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2c6a:	429a      	cmp	r2, r3
    2c6c:	d10a      	bne.n	2c84 <add_fpb_bkpt+0x144>
    2c6e:	4a2e      	ldr	r2, [pc, #184]	; (2d28 <add_fpb_bkpt+0x1e8>)
    2c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2c72:	3301      	adds	r3, #1
    2c74:	3302      	adds	r3, #2
    2c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2c7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2c7c:	429a      	cmp	r2, r3
    2c7e:	d101      	bne.n	2c84 <add_fpb_bkpt+0x144>
				return i;
    2c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2c82:	e044      	b.n	2d0e <add_fpb_bkpt+0x1ce>
		for (int i = 0; i < bpkt_info.bpkt_num - 1; i++) {
    2c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2c86:	3301      	adds	r3, #1
    2c88:	64bb      	str	r3, [r7, #72]	; 0x48
    2c8a:	4b23      	ldr	r3, [pc, #140]	; (2d18 <add_fpb_bkpt+0x1d8>)
    2c8c:	785b      	ldrb	r3, [r3, #1]
    2c8e:	3b01      	subs	r3, #1
    2c90:	6cba      	ldr	r2, [r7, #72]	; 0x48
    2c92:	429a      	cmp	r2, r3
    2c94:	dbe3      	blt.n	2c5e <add_fpb_bkpt+0x11e>
			}
		}
		
		// add new fpb remap
		uint32_t old_instr[2];
		old_instr[0] = *((uint32_t *)  (inst_addr & 0xFFFFFFFC));
    2c96:	687b      	ldr	r3, [r7, #4]
    2c98:	f023 0303 	bic.w	r3, r3, #3
    2c9c:	681b      	ldr	r3, [r3, #0]
    2c9e:	60fb      	str	r3, [r7, #12]
		old_instr[1] = *((uint32_t *) ((inst_addr & 0xFFFFFFFC) + 4));
    2ca0:	687b      	ldr	r3, [r7, #4]
    2ca2:	f023 0303 	bic.w	r3, r3, #3
    2ca6:	3304      	adds	r3, #4
    2ca8:	681b      	ldr	r3, [r3, #0]
    2caa:	613b      	str	r3, [r7, #16]
		
		*((uint32_t *) (PATCH_TBL + idx * 4))       = ((jump_inst & 0x0000FFFF) << 16) | (old_instr[0] & 0x0000FFFF);
    2cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2cae:	041a      	lsls	r2, r3, #16
    2cb0:	68fb      	ldr	r3, [r7, #12]
    2cb2:	b29b      	uxth	r3, r3
    2cb4:	6c79      	ldr	r1, [r7, #68]	; 0x44
    2cb6:	0089      	lsls	r1, r1, #2
    2cb8:	4608      	mov	r0, r1
    2cba:	6979      	ldr	r1, [r7, #20]
    2cbc:	4401      	add	r1, r0
    2cbe:	4313      	orrs	r3, r2
    2cc0:	600b      	str	r3, [r1, #0]
		*((uint32_t *) (PATCH_TBL + (idx + 1) * 4)) = (old_instr[1] & 0xFFFF0000) | ((jump_inst & 0xFFFF0000) >> 16);
    2cc2:	693b      	ldr	r3, [r7, #16]
    2cc4:	0c1b      	lsrs	r3, r3, #16
    2cc6:	041b      	lsls	r3, r3, #16
    2cc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2cca:	0c12      	lsrs	r2, r2, #16
    2ccc:	6c79      	ldr	r1, [r7, #68]	; 0x44
    2cce:	3101      	adds	r1, #1
    2cd0:	0089      	lsls	r1, r1, #2
    2cd2:	4608      	mov	r0, r1
    2cd4:	6979      	ldr	r1, [r7, #20]
    2cd6:	4401      	add	r1, r0
    2cd8:	4313      	orrs	r3, r2
    2cda:	600b      	str	r3, [r1, #0]
		
		FPB->COMP[bpkt_info.cur_idx] = fp_comp1;
    2cdc:	4912      	ldr	r1, [pc, #72]	; (2d28 <add_fpb_bkpt+0x1e8>)
    2cde:	4b0e      	ldr	r3, [pc, #56]	; (2d18 <add_fpb_bkpt+0x1d8>)
    2ce0:	781b      	ldrb	r3, [r3, #0]
    2ce2:	3302      	adds	r3, #2
    2ce4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		FPB->COMP[bpkt_info.cur_idx + 1] = fp_comp2;
    2cea:	490f      	ldr	r1, [pc, #60]	; (2d28 <add_fpb_bkpt+0x1e8>)
    2cec:	4b0a      	ldr	r3, [pc, #40]	; (2d18 <add_fpb_bkpt+0x1d8>)
    2cee:	781b      	ldrb	r3, [r3, #0]
    2cf0:	3301      	adds	r3, #1
    2cf2:	3302      	adds	r3, #2
    2cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		bpkt_info.cur_idx += 2;
    2cfa:	4b07      	ldr	r3, [pc, #28]	; (2d18 <add_fpb_bkpt+0x1d8>)
    2cfc:	781b      	ldrb	r3, [r3, #0]
    2cfe:	b25b      	sxtb	r3, r3
    2d00:	3302      	adds	r3, #2
    2d02:	b25b      	sxtb	r3, r3
    2d04:	b2da      	uxtb	r2, r3
    2d06:	4b04      	ldr	r3, [pc, #16]	; (2d18 <add_fpb_bkpt+0x1d8>)
    2d08:	701a      	strb	r2, [r3, #0]
	}
	
	
	// fpb bpkt
	
	return bpkt_info.cur_idx;
    2d0a:	4b03      	ldr	r3, [pc, #12]	; (2d18 <add_fpb_bkpt+0x1d8>)
    2d0c:	781b      	ldrb	r3, [r3, #0]
}
    2d0e:	4618      	mov	r0, r3
    2d10:	3750      	adds	r7, #80	; 0x50
    2d12:	46bd      	mov	sp, r7
    2d14:	bdb0      	pop	{r4, r5, r7, pc}
    2d16:	bf00      	nop
    2d18:	20002208 	.word	0x20002208
    2d1c:	0002cb3c 	.word	0x0002cb3c
    2d20:	0002cac4 	.word	0x0002cac4
    2d24:	0002cafc 	.word	0x0002cafc
    2d28:	e0002000 	.word	0xe0002000

00002d2c <add_normal_bkpt>:

static int add_normal_bkpt(uint32_t inst_addr) {
    2d2c:	b480      	push	{r7}
    2d2e:	b087      	sub	sp, #28
    2d30:	af00      	add	r7, sp, #0
    2d32:	6078      	str	r0, [r7, #4]
	uint32_t replace = (inst_addr & 0x2) == 0 ? 1 : 2;
    2d34:	687b      	ldr	r3, [r7, #4]
    2d36:	f003 0302 	and.w	r3, r3, #2
    2d3a:	2b00      	cmp	r3, #0
    2d3c:	d101      	bne.n	2d42 <add_normal_bkpt+0x16>
    2d3e:	2301      	movs	r3, #1
    2d40:	e000      	b.n	2d44 <add_normal_bkpt+0x18>
    2d42:	2302      	movs	r3, #2
    2d44:	613b      	str	r3, [r7, #16]
	uint32_t fp_comp = (inst_addr & ~0x3) | 0x1 | (replace << 30);
    2d46:	687b      	ldr	r3, [r7, #4]
    2d48:	f023 0203 	bic.w	r2, r3, #3
    2d4c:	693b      	ldr	r3, [r7, #16]
    2d4e:	079b      	lsls	r3, r3, #30
    2d50:	4313      	orrs	r3, r2
    2d52:	f043 0301 	orr.w	r3, r3, #1
    2d56:	60fb      	str	r3, [r7, #12]
	
	// add hardware beakpoint
	for (int i = 0; i < bpkt_info.bpkt_num; i++) {
    2d58:	2300      	movs	r3, #0
    2d5a:	617b      	str	r3, [r7, #20]
    2d5c:	e00c      	b.n	2d78 <add_normal_bkpt+0x4c>
		if (FPB->COMP[i] == fp_comp) {
    2d5e:	4a12      	ldr	r2, [pc, #72]	; (2da8 <add_normal_bkpt+0x7c>)
    2d60:	697b      	ldr	r3, [r7, #20]
    2d62:	3302      	adds	r3, #2
    2d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2d68:	68fa      	ldr	r2, [r7, #12]
    2d6a:	429a      	cmp	r2, r3
    2d6c:	d101      	bne.n	2d72 <add_normal_bkpt+0x46>
			return i;
    2d6e:	697b      	ldr	r3, [r7, #20]
    2d70:	e015      	b.n	2d9e <add_normal_bkpt+0x72>
	for (int i = 0; i < bpkt_info.bpkt_num; i++) {
    2d72:	697b      	ldr	r3, [r7, #20]
    2d74:	3301      	adds	r3, #1
    2d76:	617b      	str	r3, [r7, #20]
    2d78:	4b0c      	ldr	r3, [pc, #48]	; (2dac <add_normal_bkpt+0x80>)
    2d7a:	785b      	ldrb	r3, [r3, #1]
    2d7c:	461a      	mov	r2, r3
    2d7e:	697b      	ldr	r3, [r7, #20]
    2d80:	4293      	cmp	r3, r2
    2d82:	dbec      	blt.n	2d5e <add_normal_bkpt+0x32>
		}
	}
	
	FPB->COMP[bpkt_info.cur_idx] = fp_comp;
    2d84:	4908      	ldr	r1, [pc, #32]	; (2da8 <add_normal_bkpt+0x7c>)
    2d86:	4b09      	ldr	r3, [pc, #36]	; (2dac <add_normal_bkpt+0x80>)
    2d88:	781b      	ldrb	r3, [r3, #0]
    2d8a:	3302      	adds	r3, #2
    2d8c:	68fa      	ldr	r2, [r7, #12]
    2d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//fpb_enable();
	return bpkt_info.cur_idx++;
    2d92:	4b06      	ldr	r3, [pc, #24]	; (2dac <add_normal_bkpt+0x80>)
    2d94:	781b      	ldrb	r3, [r3, #0]
    2d96:	1c5a      	adds	r2, r3, #1
    2d98:	b2d1      	uxtb	r1, r2
    2d9a:	4a04      	ldr	r2, [pc, #16]	; (2dac <add_normal_bkpt+0x80>)
    2d9c:	7011      	strb	r1, [r2, #0]
}
    2d9e:	4618      	mov	r0, r3
    2da0:	371c      	adds	r7, #28
    2da2:	46bd      	mov	sp, r7
    2da4:	bc80      	pop	{r7}
    2da6:	4770      	bx	lr
    2da8:	e0002000 	.word	0xe0002000
    2dac:	20002208 	.word	0x20002208

00002db0 <add_hw_bkpt>:

int add_hw_bkpt(uint32_t inst_addr) {
    2db0:	b580      	push	{r7, lr}
    2db2:	b084      	sub	sp, #16
    2db4:	af00      	add	r7, sp, #0
    2db6:	6078      	str	r0, [r7, #4]
	if (!bpkt_is_init) {
    2db8:	4b1c      	ldr	r3, [pc, #112]	; (2e2c <add_hw_bkpt+0x7c>)
    2dba:	781b      	ldrb	r3, [r3, #0]
    2dbc:	f083 0301 	eor.w	r3, r3, #1
    2dc0:	b2db      	uxtb	r3, r3
    2dc2:	2b00      	cmp	r3, #0
    2dc4:	d00e      	beq.n	2de4 <add_hw_bkpt+0x34>
		bpkt_info.cur_idx = 0;
    2dc6:	4b1a      	ldr	r3, [pc, #104]	; (2e30 <add_hw_bkpt+0x80>)
    2dc8:	2200      	movs	r2, #0
    2dca:	701a      	strb	r2, [r3, #0]
		uint32_t fp_ctrl = FPB->CTRL;
    2dcc:	4b19      	ldr	r3, [pc, #100]	; (2e34 <add_hw_bkpt+0x84>)
    2dce:	681b      	ldr	r3, [r3, #0]
    2dd0:	60fb      	str	r3, [r7, #12]
		//uint32_t num_code_comparators = (((fp_ctrl >> 12) & 0x7) << 4) | ((fp_ctrl >> 4) & 0xF);
		//bpkt_info.bpkt_num = num_code_comparators;
		// there are six inst breakpoints in cortex-m4
		bpkt_info.bpkt_num = get_hw_bkpt_num();
    2dd2:	f016 f883 	bl	18edc <get_hw_bkpt_num>
    2dd6:	4603      	mov	r3, r0
    2dd8:	b2da      	uxtb	r2, r3
    2dda:	4b15      	ldr	r3, [pc, #84]	; (2e30 <add_hw_bkpt+0x80>)
    2ddc:	705a      	strb	r2, [r3, #1]
		bpkt_is_init = true;
    2dde:	4b13      	ldr	r3, [pc, #76]	; (2e2c <add_hw_bkpt+0x7c>)
    2de0:	2201      	movs	r2, #1
    2de2:	701a      	strb	r2, [r3, #0]
	}

	if (inst_addr >= 0x20000000) {
    2de4:	687b      	ldr	r3, [r7, #4]
    2de6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    2dea:	d305      	bcc.n	2df8 <add_hw_bkpt+0x48>
		DEBUG_LOG("Cannot add breakpoint in RAM.\n");
    2dec:	4812      	ldr	r0, [pc, #72]	; (2e38 <add_hw_bkpt+0x88>)
    2dee:	f016 f96a 	bl	190c6 <debug_log>
		return -1;
    2df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2df6:	e014      	b.n	2e22 <add_hw_bkpt+0x72>
	}

	if (bpkt_info.cur_idx >= MAX_BP) {
    2df8:	4b0d      	ldr	r3, [pc, #52]	; (2e30 <add_hw_bkpt+0x80>)
    2dfa:	781b      	ldrb	r3, [r3, #0]
    2dfc:	2b05      	cmp	r3, #5
    2dfe:	d902      	bls.n	2e06 <add_hw_bkpt+0x56>
		bpkt_info.cur_idx = 0;
    2e00:	4b0b      	ldr	r3, [pc, #44]	; (2e30 <add_hw_bkpt+0x80>)
    2e02:	2200      	movs	r2, #0
    2e04:	701a      	strb	r2, [r3, #0]
		//DEBUG_LOG("Exceed the max breakpoints number! Reset current bpkt idx to 0!\n");
		// return false;
	}
	
	// set fpb remap
	if (REMAP_ADDR.active) {
    2e06:	4b0d      	ldr	r3, [pc, #52]	; (2e3c <add_hw_bkpt+0x8c>)
    2e08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    2e0c:	2b00      	cmp	r3, #0
    2e0e:	d004      	beq.n	2e1a <add_hw_bkpt+0x6a>
		return add_fpb_bkpt(inst_addr);
    2e10:	6878      	ldr	r0, [r7, #4]
    2e12:	f7ff fe95 	bl	2b40 <add_fpb_bkpt>
    2e16:	4603      	mov	r3, r0
    2e18:	e003      	b.n	2e22 <add_hw_bkpt+0x72>
	} else {
		return add_normal_bkpt(inst_addr);
    2e1a:	6878      	ldr	r0, [r7, #4]
    2e1c:	f7ff ff86 	bl	2d2c <add_normal_bkpt>
    2e20:	4603      	mov	r3, r0
	}
}
    2e22:	4618      	mov	r0, r3
    2e24:	3710      	adds	r7, #16
    2e26:	46bd      	mov	sp, r7
    2e28:	bd80      	pop	{r7, pc}
    2e2a:	bf00      	nop
    2e2c:	2000623b 	.word	0x2000623b
    2e30:	20002208 	.word	0x20002208
    2e34:	e0002000 	.word	0xe0002000
    2e38:	0002cb54 	.word	0x0002cb54
    2e3c:	200021dc 	.word	0x200021dc

00002e40 <clear_all_hw_bkpt>:

void clear_all_hw_bkpt() {
    2e40:	b580      	push	{r7, lr}
    2e42:	b084      	sub	sp, #16
    2e44:	af00      	add	r7, sp, #0
	uint32_t fp_ctrl = FPB->CTRL;
    2e46:	4b13      	ldr	r3, [pc, #76]	; (2e94 <clear_all_hw_bkpt+0x54>)
    2e48:	681b      	ldr	r3, [r3, #0]
    2e4a:	60bb      	str	r3, [r7, #8]
	uint32_t num_code_comparators = (((fp_ctrl >> 12) & 0x7) << 4) | ((fp_ctrl >> 4) & 0xF);
    2e4c:	68bb      	ldr	r3, [r7, #8]
    2e4e:	0b1b      	lsrs	r3, r3, #12
    2e50:	011b      	lsls	r3, r3, #4
    2e52:	f003 0270 	and.w	r2, r3, #112	; 0x70
    2e56:	68bb      	ldr	r3, [r7, #8]
    2e58:	091b      	lsrs	r3, r3, #4
    2e5a:	f003 030f 	and.w	r3, r3, #15
    2e5e:	4313      	orrs	r3, r2
    2e60:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < num_code_comparators; i++) {
    2e62:	2300      	movs	r3, #0
    2e64:	60fb      	str	r3, [r7, #12]
    2e66:	e008      	b.n	2e7a <clear_all_hw_bkpt+0x3a>
		FPB->COMP[i] = 0;
    2e68:	4a0a      	ldr	r2, [pc, #40]	; (2e94 <clear_all_hw_bkpt+0x54>)
    2e6a:	68fb      	ldr	r3, [r7, #12]
    2e6c:	3302      	adds	r3, #2
    2e6e:	2100      	movs	r1, #0
    2e70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < num_code_comparators; i++) {
    2e74:	68fb      	ldr	r3, [r7, #12]
    2e76:	3301      	adds	r3, #1
    2e78:	60fb      	str	r3, [r7, #12]
    2e7a:	68fb      	ldr	r3, [r7, #12]
    2e7c:	687a      	ldr	r2, [r7, #4]
    2e7e:	429a      	cmp	r2, r3
    2e80:	d8f2      	bhi.n	2e68 <clear_all_hw_bkpt+0x28>
	}
	bpkt_info.cur_idx = 0;
    2e82:	4b05      	ldr	r3, [pc, #20]	; (2e98 <clear_all_hw_bkpt+0x58>)
    2e84:	2200      	movs	r2, #0
    2e86:	701a      	strb	r2, [r3, #0]
	fpb_disable();
    2e88:	f7ff fd7c 	bl	2984 <fpb_disable>
}
    2e8c:	bf00      	nop
    2e8e:	3710      	adds	r7, #16
    2e90:	46bd      	mov	sp, r7
    2e92:	bd80      	pop	{r7, pc}
    2e94:	e0002000 	.word	0xe0002000
    2e98:	20002208 	.word	0x20002208

00002e9c <halting_debug_enabled>:
	uint32_t r2;
	uint32_t r3;
} ebpf_args_frame;


static bool halting_debug_enabled(void) {
    2e9c:	b480      	push	{r7}
    2e9e:	b083      	sub	sp, #12
    2ea0:	af00      	add	r7, sp, #0
	volatile uint32_t *dhcsr = (uint32_t *)0xE000EDF0;
    2ea2:	4b08      	ldr	r3, [pc, #32]	; (2ec4 <halting_debug_enabled+0x28>)
    2ea4:	607b      	str	r3, [r7, #4]
	return (((*dhcsr) & 0x1) != 0);
    2ea6:	687b      	ldr	r3, [r7, #4]
    2ea8:	681b      	ldr	r3, [r3, #0]
    2eaa:	f003 0301 	and.w	r3, r3, #1
    2eae:	2b00      	cmp	r3, #0
    2eb0:	bf14      	ite	ne
    2eb2:	2301      	movne	r3, #1
    2eb4:	2300      	moveq	r3, #0
    2eb6:	b2db      	uxtb	r3, r3
}
    2eb8:	4618      	mov	r0, r3
    2eba:	370c      	adds	r7, #12
    2ebc:	46bd      	mov	sp, r7
    2ebe:	bc80      	pop	{r7}
    2ec0:	4770      	bx	lr
    2ec2:	bf00      	nop
    2ec4:	e000edf0 	.word	0xe000edf0

00002ec8 <fpb_remap_init>:
When both breakpoint (comparator register) and remap reg are set, it will enable the 
Flash patch and breakpoint unit and replace the instrument at the comp addr with the 
instrument at the remap addr.
*/
static void fpb_remap_init(uint32_t remap_addr)
{
    2ec8:	b580      	push	{r7, lr}
    2eca:	b082      	sub	sp, #8
    2ecc:	af00      	add	r7, sp, #0
    2ece:	6078      	str	r0, [r7, #4]
	FPB->REMAP = remap_addr;
    2ed0:	4a06      	ldr	r2, [pc, #24]	; (2eec <fpb_remap_init+0x24>)
    2ed2:	687b      	ldr	r3, [r7, #4]
    2ed4:	6053      	str	r3, [r2, #4]
	REMAP_ADDR.active = true;
    2ed6:	4b06      	ldr	r3, [pc, #24]	; (2ef0 <fpb_remap_init+0x28>)
    2ed8:	2201      	movs	r2, #1
    2eda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	fpb_enable();
    2ede:	f7ff fd43 	bl	2968 <fpb_enable>
}
    2ee2:	bf00      	nop
    2ee4:	3708      	adds	r7, #8
    2ee6:	46bd      	mov	sp, r7
    2ee8:	bd80      	pop	{r7, pc}
    2eea:	bf00      	nop
    2eec:	e0002000 	.word	0xe0002000
    2ef0:	200021dc 	.word	0x200021dc

00002ef4 <debug_monitor_init>:


// init arm debug monitor
static void debug_monitor_init() {
    2ef4:	b580      	push	{r7, lr}
    2ef6:	b084      	sub	sp, #16
    2ef8:	af00      	add	r7, sp, #0
	volatile uint32_t *scb_hfsr = (uint32_t *) SCB_HFSR;
    2efa:	4b18      	ldr	r3, [pc, #96]	; (2f5c <debug_monitor_init+0x68>)
    2efc:	60fb      	str	r3, [r7, #12]
	volatile uint32_t *scb_dfsr = (uint32_t *) SCB_DFSR;
    2efe:	4b18      	ldr	r3, [pc, #96]	; (2f60 <debug_monitor_init+0x6c>)
    2f00:	60bb      	str	r3, [r7, #8]
	*scb_hfsr = (1 << 31);
    2f02:	68fb      	ldr	r3, [r7, #12]
    2f04:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2f08:	601a      	str	r2, [r3, #0]
//	*SCB_DFSR = 1;
//	*SCB_DFSR = (1 << 1);
	*scb_dfsr = (1 << 2);
    2f0a:	68bb      	ldr	r3, [r7, #8]
    2f0c:	2204      	movs	r2, #4
    2f0e:	601a      	str	r2, [r3, #0]
	
	if (halting_debug_enabled()) {
    2f10:	f7ff ffc4 	bl	2e9c <halting_debug_enabled>
    2f14:	4603      	mov	r3, r0
    2f16:	2b00      	cmp	r3, #0
    2f18:	d003      	beq.n	2f22 <debug_monitor_init+0x2e>
		DEBUG_LOG("Halting Debug Enabled - Can't Enable Monitor Mode Debug!");
    2f1a:	4812      	ldr	r0, [pc, #72]	; (2f64 <debug_monitor_init+0x70>)
    2f1c:	f016 f8d3 	bl	190c6 <debug_log>
		return;
    2f20:	e018      	b.n	2f54 <debug_monitor_init+0x60>
	}
	
	volatile uint32_t *demcr = (uint32_t *) DCB_DEMCR;
    2f22:	4b11      	ldr	r3, [pc, #68]	; (2f68 <debug_monitor_init+0x74>)
    2f24:	607b      	str	r3, [r7, #4]
	*demcr |= DCB_DEMCR_MON_EN; 
    2f26:	687b      	ldr	r3, [r7, #4]
    2f28:	681b      	ldr	r3, [r3, #0]
    2f2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    2f2e:	687b      	ldr	r3, [r7, #4]
    2f30:	601a      	str	r2, [r3, #0]
	//*demcr &= ~(1 << mon_en_bit); // DEG_MO = 0 && C_DEBUG = 1 -> HardFault
	fpb_enable();
    2f32:	f7ff fd19 	bl	2968 <fpb_enable>
	DEBUG_LOG("debug_monitor_init setup dhcsr: %u\n", *demcr);
    2f36:	687b      	ldr	r3, [r7, #4]
    2f38:	681b      	ldr	r3, [r3, #0]
    2f3a:	4619      	mov	r1, r3
    2f3c:	480b      	ldr	r0, [pc, #44]	; (2f6c <debug_monitor_init+0x78>)
    2f3e:	f016 f8c2 	bl	190c6 <debug_log>
	// Priority for DebugMonitor Exception is bits[7:0].
	// We will use the lowest priority so other ISRs can
	// fire while in the DebugMonitor Interrupt
	// Configurable priority values are in the range 0-255. This means that the Reset (), HardFault (-1), and NMI exceptions (-2), 
	// with fixed negative priority values, always have higher priority than any other exception.
	volatile uint32_t *shp8 = (uint32_t *)0xE000ED20;
    2f42:	4b0b      	ldr	r3, [pc, #44]	; (2f70 <debug_monitor_init+0x7c>)
    2f44:	603b      	str	r3, [r7, #0]
	//DEBUG_LOG("SCB_SHP[8] priority: %d\n", (int) ((char)*shp8));
	*shp8 = 0xff;
    2f46:	683b      	ldr	r3, [r7, #0]
    2f48:	22ff      	movs	r2, #255	; 0xff
    2f4a:	601a      	str	r2, [r3, #0]
	*shp8 = -1;
    2f4c:	683b      	ldr	r3, [r7, #0]
    2f4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2f52:	601a      	str	r2, [r3, #0]
}
    2f54:	3710      	adds	r7, #16
    2f56:	46bd      	mov	sp, r7
    2f58:	bd80      	pop	{r7, pc}
    2f5a:	bf00      	nop
    2f5c:	e000e02c 	.word	0xe000e02c
    2f60:	e000ed30 	.word	0xe000ed30
    2f64:	0002cb74 	.word	0x0002cb74
    2f68:	e000edfc 	.word	0xe000edfc
    2f6c:	0002cbb0 	.word	0x0002cbb0
    2f70:	e000ed20 	.word	0xe000ed20

00002f74 <fpb_disable_cur_inst>:

/*
Disable current BPKT to continue running.
Add bpkt to next inst and enable current BPKT.
*/
void fpb_disable_cur_inst(int bpkt_idx) {
    2f74:	b590      	push	{r4, r7, lr}
    2f76:	b089      	sub	sp, #36	; 0x24
    2f78:	af00      	add	r7, sp, #0
    2f7a:	6078      	str	r0, [r7, #4]
	uint32_t cur_addr = FPB->COMP[bpkt_idx];
    2f7c:	4a1f      	ldr	r2, [pc, #124]	; (2ffc <CONFIG_USB_DEVICE_VID+0x19>)
    2f7e:	687b      	ldr	r3, [r7, #4]
    2f80:	3302      	adds	r3, #2
    2f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2f86:	61bb      	str	r3, [r7, #24]
	uint32_t next_inst = calc_bpkt_pc(cur_addr);
    2f88:	69b8      	ldr	r0, [r7, #24]
    2f8a:	f016 f8d2 	bl	19132 <calc_bpkt_pc>
    2f8e:	61f8      	str	r0, [r7, #28]
	//next_inst = calc_bpkt_pc(next_inst);
	while ((next_inst & 0x3) != 0) {
    2f90:	e003      	b.n	2f9a <fpb_disable_cur_inst+0x26>
		next_inst = calc_bpkt_pc(next_inst);
    2f92:	69f8      	ldr	r0, [r7, #28]
    2f94:	f016 f8cd 	bl	19132 <calc_bpkt_pc>
    2f98:	61f8      	str	r0, [r7, #28]
	while ((next_inst & 0x3) != 0) {
    2f9a:	69fb      	ldr	r3, [r7, #28]
    2f9c:	f003 0303 	and.w	r3, r3, #3
    2fa0:	2b00      	cmp	r3, #0
    2fa2:	d1f6      	bne.n	2f92 <fpb_disable_cur_inst+0x1e>
	}
	FPB->COMP[FPB_CB_REG] = next_inst | (0x1);
    2fa4:	4a15      	ldr	r2, [pc, #84]	; (2ffc <CONFIG_USB_DEVICE_VID+0x19>)
    2fa6:	69fb      	ldr	r3, [r7, #28]
    2fa8:	f043 0301 	orr.w	r3, r3, #1
    2fac:	61d3      	str	r3, [r2, #28]
	FPB->COMP[bpkt_idx] &= ~(0x1);
    2fae:	4a13      	ldr	r2, [pc, #76]	; (2ffc <CONFIG_USB_DEVICE_VID+0x19>)
    2fb0:	687b      	ldr	r3, [r7, #4]
    2fb2:	3302      	adds	r3, #2
    2fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2fb8:	4910      	ldr	r1, [pc, #64]	; (2ffc <CONFIG_USB_DEVICE_VID+0x19>)
    2fba:	f023 0201 	bic.w	r2, r3, #1
    2fbe:	687b      	ldr	r3, [r7, #4]
    2fc0:	3302      	adds	r3, #2
    2fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	uint32_t trampoline_addr = (((uint32_t) FPB_Handler5 & (~0x1)) + 3) & (~0x3);
    2fc6:	4b0e      	ldr	r3, [pc, #56]	; (3000 <CONFIG_USB_DEVICE_VID+0x1d>)
    2fc8:	f023 0301 	bic.w	r3, r3, #1
    2fcc:	3303      	adds	r3, #3
    2fce:	f023 0303 	bic.w	r3, r3, #3
    2fd2:	617b      	str	r3, [r7, #20]
	uint32_t jump_inst = calc_branch_instr(next_inst, trampoline_addr);
    2fd4:	6979      	ldr	r1, [r7, #20]
    2fd6:	69f8      	ldr	r0, [r7, #28]
    2fd8:	f7ff fd3c 	bl	2a54 <calc_branch_instr>
    2fdc:	6138      	str	r0, [r7, #16]
	// add trampoline to BPKT#5
	const uint32_t PATCH_TBL = get_fpb_patch_remap();
    2fde:	f7ff fce1 	bl	29a4 <get_fpb_patch_remap>
    2fe2:	60f8      	str	r0, [r7, #12]
	*((uint32_t *) (PATCH_TBL + (FPB_CB_REG * 4))) = little_endian_16_bit(jump_inst);
    2fe4:	68fb      	ldr	r3, [r7, #12]
    2fe6:	3314      	adds	r3, #20
    2fe8:	461c      	mov	r4, r3
    2fea:	6938      	ldr	r0, [r7, #16]
    2fec:	f016 f8ba 	bl	19164 <little_endian_16_bit>
    2ff0:	4603      	mov	r3, r0
    2ff2:	6023      	str	r3, [r4, #0]
	TEST_LOG("fpb_disable_cur_inst: 0x%08x next: 0x%08x bkpt: 0x%08x fpb_cb: 0x%08x\n", cur_addr, next_inst, FPB->COMP[bpkt_idx], FPB->COMP[FPB_CB_REG]);
	//bpkt_cb_idx = bpkt_idx;
	//add_mulprf_step("fpb_disable_cur_inst");
}
    2ff4:	bf00      	nop
    2ff6:	3724      	adds	r7, #36	; 0x24
    2ff8:	46bd      	mov	sp, r7
    2ffa:	bd90      	pop	{r4, r7, pc}
    2ffc:	e0002000 	.word	0xe0002000
    3000:	00018e69 	.word	0x00018e69

00003004 <fpb_enable_callback>:

// enable the FPB after the second inst is triggered
uint32_t fpb_enable_callback() {
    3004:	b480      	push	{r7}
    3006:	b083      	sub	sp, #12
    3008:	af00      	add	r7, sp, #0
	uint32_t cur_inst = FPB->COMP[FPB_CB_REG];
    300a:	4b15      	ldr	r3, [pc, #84]	; (3060 <fpb_enable_callback+0x5c>)
    300c:	69db      	ldr	r3, [r3, #28]
    300e:	603b      	str	r3, [r7, #0]
	//*(volatile uint32_t *) &(ctx->lr) = cur_inst;
	TEST_LOG("fpb_enable_callback: 0x%08x\n", cur_inst);
	//add_mulprf_step("fpb_enable_callback");
	// enable all bpkt
	for (int i = 0; i < FPB_CB_REG; i++) {
    3010:	2300      	movs	r3, #0
    3012:	607b      	str	r3, [r7, #4]
    3014:	e015      	b.n	3042 <fpb_enable_callback+0x3e>
		if (FPB->COMP[i] != 0) {
    3016:	4a12      	ldr	r2, [pc, #72]	; (3060 <fpb_enable_callback+0x5c>)
    3018:	687b      	ldr	r3, [r7, #4]
    301a:	3302      	adds	r3, #2
    301c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3020:	2b00      	cmp	r3, #0
    3022:	d00b      	beq.n	303c <fpb_enable_callback+0x38>
			FPB->COMP[i] |= 1;
    3024:	4a0e      	ldr	r2, [pc, #56]	; (3060 <fpb_enable_callback+0x5c>)
    3026:	687b      	ldr	r3, [r7, #4]
    3028:	3302      	adds	r3, #2
    302a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    302e:	490c      	ldr	r1, [pc, #48]	; (3060 <fpb_enable_callback+0x5c>)
    3030:	f043 0201 	orr.w	r2, r3, #1
    3034:	687b      	ldr	r3, [r7, #4]
    3036:	3302      	adds	r3, #2
    3038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < FPB_CB_REG; i++) {
    303c:	687b      	ldr	r3, [r7, #4]
    303e:	3301      	adds	r3, #1
    3040:	607b      	str	r3, [r7, #4]
    3042:	687b      	ldr	r3, [r7, #4]
    3044:	2b04      	cmp	r3, #4
    3046:	dde6      	ble.n	3016 <fpb_enable_callback+0x12>
		}
	}
	//FPB->COMP[bpkt_cb_idx] |= 0x1;
	FPB->COMP[FPB_CB_REG] &= ~(0x1);
    3048:	4b05      	ldr	r3, [pc, #20]	; (3060 <fpb_enable_callback+0x5c>)
    304a:	69db      	ldr	r3, [r3, #28]
    304c:	4a04      	ldr	r2, [pc, #16]	; (3060 <fpb_enable_callback+0x5c>)
    304e:	f023 0301 	bic.w	r3, r3, #1
    3052:	61d3      	str	r3, [r2, #28]
	return cur_inst;
    3054:	683b      	ldr	r3, [r7, #0]
}
    3056:	4618      	mov	r0, r3
    3058:	370c      	adds	r7, #12
    305a:	46bd      	mov	sp, r7
    305c:	bc80      	pop	{r7}
    305e:	4770      	bx	lr
    3060:	e0002000 	.word	0xe0002000

00003064 <leave_fpb_bpkt>:
/*
https://www.keil.com/support/man/docs/armclang_intro/armclang_intro_ddx1471430827125.htm
*/
// uint32_t r0, uint32_t r1, uint32_t r2, uint32_t r3
//extern void BusFault_Handler(void);
uint32_t leave_fpb_bpkt(stack_context *ctx, int bpkt_idx) {
    3064:	b590      	push	{r4, r7, lr}
    3066:	b08b      	sub	sp, #44	; 0x2c
    3068:	af00      	add	r7, sp, #0
    306a:	6078      	str	r0, [r7, #4]
    306c:	6039      	str	r1, [r7, #0]
	//DEBUG_LOG("argmeunts: r0=0x%08x r1=0x%08x r2=0x%08x r3=0x%08x\n", r0, r1, r2, r3);
	//dump_context(ctx);
	//DEBUG_LOG("current bpkt_idx: %d\n", bpkt_idx);
	//bpkt_idx = 0;
	uint32_t inst_addr = FPB->COMP[bpkt_idx] & (~0x1);
    306e:	4a26      	ldr	r2, [pc, #152]	; (3108 <leave_fpb_bpkt+0xa4>)
    3070:	683b      	ldr	r3, [r7, #0]
    3072:	3302      	adds	r3, #2
    3074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3078:	f023 0301 	bic.w	r3, r3, #1
    307c:	627b      	str	r3, [r7, #36]	; 0x24
	ebpf_patch *patch = get_dynamic_patch_by_bpkt(inst_addr);
    307e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3080:	f001 f8bc 	bl	41fc <get_dynamic_patch_by_bpkt>
    3084:	6238      	str	r0, [r7, #32]
	if (patch != NULL) {
    3086:	6a3b      	ldr	r3, [r7, #32]
    3088:	2b00      	cmp	r3, #0
    308a:	d037      	beq.n	30fc <leave_fpb_bpkt+0x98>
		ebpf_args_frame *args = (ebpf_args_frame *) ctx;
    308c:	687b      	ldr	r3, [r7, #4]
    308e:	61fb      	str	r3, [r7, #28]
		uint64_t ret = 0;
    3090:	f04f 0300 	mov.w	r3, #0
    3094:	f04f 0400 	mov.w	r4, #0
    3098:	e9c7 3404 	strd	r3, r4, [r7, #16]
		profile_start(EV1);
    309c:	2001      	movs	r0, #1
    309e:	f001 f9cd 	bl	443c <profile_start>
		ret = run_ebpf_filter(patch, args, sizeof(ebpf_args_frame));
    30a2:	2210      	movs	r2, #16
    30a4:	69f9      	ldr	r1, [r7, #28]
    30a6:	6a38      	ldr	r0, [r7, #32]
    30a8:	f015 ffce 	bl	19048 <run_ebpf_filter>
    30ac:	e9c7 0104 	strd	r0, r1, [r7, #16]
		profile_end(EV1);
    30b0:	2001      	movs	r0, #1
    30b2:	f001 f9d5 	bl	4460 <profile_end>
		//profile_dump(EV1);
		uint32_t op = ret >> 32;
    30b6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    30ba:	f04f 0300 	mov.w	r3, #0
    30be:	f04f 0400 	mov.w	r4, #0
    30c2:	0013      	movs	r3, r2
    30c4:	2400      	movs	r4, #0
    30c6:	60fb      	str	r3, [r7, #12]
		uint32_t ret_code = ret & 0x00000000ffffffff;
    30c8:	693b      	ldr	r3, [r7, #16]
    30ca:	60bb      	str	r3, [r7, #8]
		TEST_LOG("run_ebpf_filtern res: %u %u\n", op, ret_code);
		//op = FILTER_DROP;
		if (op == FILTER_PASS) {
    30cc:	68fb      	ldr	r3, [r7, #12]
    30ce:	2b00      	cmp	r3, #0
    30d0:	d108      	bne.n	30e4 <leave_fpb_bpkt+0x80>
			TEST_LOG("FILTER PASS addr:0x%08x inst:0x%08x lr:0x%08x\n", FPB->COMP[bpkt_idx], inst_addr, ctx->lr);
			//*(volatile uint32_t *) &(ctx->r0) = 0;
			fpb_disable_cur_inst(bpkt_idx);
    30d2:	6838      	ldr	r0, [r7, #0]
    30d4:	f7ff ff4e 	bl	2f74 <fpb_disable_cur_inst>
			TEST_LOG("set_return: 0x%08x\n", ctx->lr);
			return FPB->COMP[bpkt_idx];
    30d8:	4a0b      	ldr	r2, [pc, #44]	; (3108 <leave_fpb_bpkt+0xa4>)
    30da:	683b      	ldr	r3, [r7, #0]
    30dc:	3302      	adds	r3, #2
    30de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    30e2:	e00d      	b.n	3100 <leave_fpb_bpkt+0x9c>
		} else if (op == FILTER_DROP) {
    30e4:	68fb      	ldr	r3, [r7, #12]
    30e6:	2b01      	cmp	r3, #1
    30e8:	d103      	bne.n	30f2 <leave_fpb_bpkt+0x8e>
			TEST_LOG("filter and return: %u 0x%08x 0x%08x\n", ret_code, ctx->lr, ctx->pc);
			*(volatile uint32_t *) &(ctx->r0) = ret_code;
    30ea:	687b      	ldr	r3, [r7, #4]
    30ec:	68ba      	ldr	r2, [r7, #8]
    30ee:	601a      	str	r2, [r3, #0]
    30f0:	e004      	b.n	30fc <leave_fpb_bpkt+0x98>
			TEST_LOG("set_return: 0x%08x\n", ctx->lr);
		} else if (op == FILTER_REDIRECT) { // redirect lr to other address
    30f2:	68fb      	ldr	r3, [r7, #12]
    30f4:	2b02      	cmp	r3, #2
    30f6:	d101      	bne.n	30fc <leave_fpb_bpkt+0x98>
			//*(volatile uint32_t *) &(ctx->lr) = ret_code;
			return ret_code;
    30f8:	68bb      	ldr	r3, [r7, #8]
    30fa:	e001      	b.n	3100 <leave_fpb_bpkt+0x9c>
			TEST_LOG("patch do not intercept the origin function: op_code: %d pc: 0x%08x \n", op, ctx->pc);
		}
	}
	TEST_LOG("leave_fpb_bpkt: 0x%08x\n", inst_addr);
	//return 0;
	return ctx->lr;
    30fc:	687b      	ldr	r3, [r7, #4]
    30fe:	695b      	ldr	r3, [r3, #20]
}
    3100:	4618      	mov	r0, r3
    3102:	372c      	adds	r7, #44	; 0x2c
    3104:	46bd      	mov	sp, r7
    3106:	bd90      	pop	{r4, r7, pc}
    3108:	e0002000 	.word	0xe0002000

0000310c <leave_debug_monitor>:
		TEST_LOG("do not find patch for pc addr: 0x%08x \n", ctx->pc);
	}
	return false;
}

void leave_debug_monitor(stack_context *ctx) {
    310c:	b580      	push	{r7, lr}
    310e:	b08a      	sub	sp, #40	; 0x28
    3110:	af00      	add	r7, sp, #0
    3112:	6078      	str	r0, [r7, #4]
	TEST_LOG("debug_monitor_handler_c lr:0x%08x pc:0x%08x\n", ctx->lr, ctx->pc);
	volatile uint32_t *demcr = (uint32_t *) DCB_DEMCR;
    3114:	4b29      	ldr	r3, [pc, #164]	; (31bc <leave_debug_monitor+0xb0>)
    3116:	627b      	str	r3, [r7, #36]	; 0x24
	volatile uint32_t *dfsr  = (uint32_t *) SCB_DFSR;
    3118:	4b29      	ldr	r3, [pc, #164]	; (31c0 <leave_debug_monitor+0xb4>)
    311a:	623b      	str	r3, [r7, #32]
	const uint32_t demcr_single_step_mask = (1 << 18);
    311c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    3120:	61fb      	str	r3, [r7, #28]
	const uint32_t dfsr_dwt_evt_bitmask = (1 << 2);
    3122:	2304      	movs	r3, #4
    3124:	61bb      	str	r3, [r7, #24]
	const uint32_t dfsr_bkpt_evt_bitmask = (1 << 1);
    3126:	2302      	movs	r3, #2
    3128:	617b      	str	r3, [r7, #20]
	const uint32_t dfsr_halt_evt_bitmask = (1 << 0);
    312a:	2301      	movs	r3, #1
    312c:	613b      	str	r3, [r7, #16]
	const bool is_dwt_dbg_evt = (*dfsr & dfsr_dwt_evt_bitmask);
    312e:	6a3b      	ldr	r3, [r7, #32]
    3130:	681a      	ldr	r2, [r3, #0]
    3132:	69bb      	ldr	r3, [r7, #24]
    3134:	4013      	ands	r3, r2
    3136:	2b00      	cmp	r3, #0
    3138:	bf14      	ite	ne
    313a:	2301      	movne	r3, #1
    313c:	2300      	moveq	r3, #0
    313e:	73fb      	strb	r3, [r7, #15]
	const bool is_bkpt_dbg_evt = (*dfsr & dfsr_bkpt_evt_bitmask);
    3140:	6a3b      	ldr	r3, [r7, #32]
    3142:	681a      	ldr	r2, [r3, #0]
    3144:	697b      	ldr	r3, [r7, #20]
    3146:	4013      	ands	r3, r2
    3148:	2b00      	cmp	r3, #0
    314a:	bf14      	ite	ne
    314c:	2301      	movne	r3, #1
    314e:	2300      	moveq	r3, #0
    3150:	73bb      	strb	r3, [r7, #14]
	const bool is_halt_dbg_evt = (*dfsr & dfsr_halt_evt_bitmask);
    3152:	6a3b      	ldr	r3, [r7, #32]
    3154:	681a      	ldr	r2, [r3, #0]
    3156:	693b      	ldr	r3, [r7, #16]
    3158:	4013      	ands	r3, r2
    315a:	2b00      	cmp	r3, #0
    315c:	bf14      	ite	ne
    315e:	2301      	movne	r3, #1
    3160:	2300      	moveq	r3, #0
    3162:	737b      	strb	r3, [r7, #13]

	
	if (is_bkpt_dbg_evt) {
    3164:	7bbb      	ldrb	r3, [r7, #14]
    3166:	2b00      	cmp	r3, #0
    3168:	d013      	beq.n	3192 <leave_debug_monitor+0x86>
		// only enter bkpt once

		bool skip = run_patch_here(ctx);
    316a:	6878      	ldr	r0, [r7, #4]
    316c:	f015 febd 	bl	18eea <run_patch_here>
    3170:	4603      	mov	r3, r0
    3172:	733b      	strb	r3, [r7, #12]
		//bool skip = false;
		/*
			when the bug is triggered and return ealier with ebpf return code
			do not need to enter debug monitor again
		*/
		if (skip) { 
    3174:	7b3b      	ldrb	r3, [r7, #12]
    3176:	2b00      	cmp	r3, #0
    3178:	d11b      	bne.n	31b2 <leave_debug_monitor+0xa6>
			//__asm__ __volatile__("cpsie i");
			return;
		}

		// enter halt mode to enable breakpoints
		*demcr |= demcr_single_step_mask;
    317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    317c:	681a      	ldr	r2, [r3, #0]
    317e:	69fb      	ldr	r3, [r7, #28]
    3180:	431a      	orrs	r2, r3
    3182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3184:	601a      	str	r2, [r3, #0]
		//*demcr &= ~(demcr_single_step_mask);
		*dfsr = dfsr_bkpt_evt_bitmask;
    3186:	6a3b      	ldr	r3, [r7, #32]
    3188:	697a      	ldr	r2, [r7, #20]
    318a:	601a      	str	r2, [r3, #0]
		// TODO: disable/enable single breakpoint
		fpb_disable(); // will exit
    318c:	f7ff fbfa 	bl	2984 <fpb_disable>
    3190:	e010      	b.n	31b4 <leave_debug_monitor+0xa8>
		TEST_LOG("is_bkpt_dbg_evt\n");
	} else if (is_halt_dbg_evt) {
    3192:	7b7b      	ldrb	r3, [r7, #13]
    3194:	2b00      	cmp	r3, #0
    3196:	d00d      	beq.n	31b4 <leave_debug_monitor+0xa8>
		*demcr &= ~(demcr_single_step_mask);
    3198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    319a:	681a      	ldr	r2, [r3, #0]
    319c:	69fb      	ldr	r3, [r7, #28]
    319e:	43db      	mvns	r3, r3
    31a0:	401a      	ands	r2, r3
    31a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    31a4:	601a      	str	r2, [r3, #0]
		*dfsr = dfsr_halt_evt_bitmask;
    31a6:	6a3b      	ldr	r3, [r7, #32]
    31a8:	693a      	ldr	r2, [r7, #16]
    31aa:	601a      	str	r2, [r3, #0]
		fpb_enable();
    31ac:	f7ff fbdc 	bl	2968 <fpb_enable>
    31b0:	e000      	b.n	31b4 <leave_debug_monitor+0xa8>
			return;
    31b2:	bf00      	nop
		//DEBUG_LOG("bpkt inst addr: 0x%08x\n", ctx->pc - 4);
		// enter twice debug monitor
		TEST_LOG("is_halt_dbg_evt\n");
		//__asm__ __volatile__("cpsie i");
	} 
}
    31b4:	3728      	adds	r7, #40	; 0x28
    31b6:	46bd      	mov	sp, r7
    31b8:	bd80      	pop	{r7, pc}
    31ba:	bf00      	nop
    31bc:	e000edfc 	.word	0xe000edfc
    31c0:	e000ed30 	.word	0xe000ed30

000031c4 <set_patch_mode>:
//void __debug_monitor(void) {
//	DEBUG_LOG("__debug_monitor\n");
//}
#endif // end USE_KEIL

void set_patch_mode(patch_mode_t mode) {
    31c4:	b580      	push	{r7, lr}
    31c6:	b084      	sub	sp, #16
    31c8:	af00      	add	r7, sp, #0
    31ca:	4603      	mov	r3, r0
    31cc:	71fb      	strb	r3, [r7, #7]
	// reset the fpb bpkt
	clear_all_hw_bkpt();
    31ce:	f7ff fe37 	bl	2e40 <clear_all_hw_bkpt>
	memset(&REMAP_ADDR, 0, sizeof(REMAP_ADDR));
    31d2:	222c      	movs	r2, #44	; 0x2c
    31d4:	2100      	movs	r1, #0
    31d6:	480e      	ldr	r0, [pc, #56]	; (3210 <set_patch_mode+0x4c>)
    31d8:	f7fe ff6e 	bl	20b8 <memset>
	REMAP_ADDR.active = false;
    31dc:	4b0c      	ldr	r3, [pc, #48]	; (3210 <set_patch_mode+0x4c>)
    31de:	2200      	movs	r2, #0
    31e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	FPB->REMAP = 0;
    31e4:	4b0b      	ldr	r3, [pc, #44]	; (3214 <set_patch_mode+0x50>)
    31e6:	2200      	movs	r2, #0
    31e8:	605a      	str	r2, [r3, #4]
	if (mode == CORTEX_FPB_PATCH) { // use fpb
    31ea:	79fb      	ldrb	r3, [r7, #7]
    31ec:	2b00      	cmp	r3, #0
    31ee:	d106      	bne.n	31fe <set_patch_mode+0x3a>
//		FPB->REMAP = (uint32_t *) &REMAP;
		//const uint32_t PATCH_TBL = (uint32_t) (&REMAP_ADDR) & (~0x1F);
		uint32_t addr = get_fpb_patch_remap();
    31f0:	f7ff fbd8 	bl	29a4 <get_fpb_patch_remap>
    31f4:	60f8      	str	r0, [r7, #12]
		fpb_remap_init(addr);
    31f6:	68f8      	ldr	r0, [r7, #12]
    31f8:	f7ff fe66 	bl	2ec8 <fpb_remap_init>
		//DEBUG_LOG("Remap addr: 0x%08x 0x%08x 0x%08x\n", addr, &REMAP_ADDR, &(REMAP_ADDR.active));
	} else if (mode == CORTEX_DEB_MON_PATCH) {
		debug_monitor_init();
	}
}
    31fc:	e004      	b.n	3208 <set_patch_mode+0x44>
	} else if (mode == CORTEX_DEB_MON_PATCH) {
    31fe:	79fb      	ldrb	r3, [r7, #7]
    3200:	2b01      	cmp	r3, #1
    3202:	d101      	bne.n	3208 <set_patch_mode+0x44>
		debug_monitor_init();
    3204:	f7ff fe76 	bl	2ef4 <debug_monitor_init>
}
    3208:	bf00      	nop
    320a:	3710      	adds	r7, #16
    320c:	46bd      	mov	sp, r7
    320e:	bd80      	pop	{r7, pc}
    3210:	200021dc 	.word	0x200021dc
    3214:	e0002000 	.word	0xe0002000

00003218 <RawBuggyFunc>:
	add_hw_bkpt(inst);
	DEBUG_LOG("add dynamic point to: 0x%08x\n", inst);
	show_hw_bkpt();
}

static void RawBuggyFunc() {
    3218:	b580      	push	{r7, lr}
    321a:	af00      	add	r7, sp, #0
	DEBUG_LOG("enter RawBuggyFunc\n");
    321c:	4803      	ldr	r0, [pc, #12]	; (322c <RawBuggyFunc+0x14>)
    321e:	f015 ff52 	bl	190c6 <debug_log>
	DEBUG_LOG("exit RawBuggyFunc\n");
    3222:	4803      	ldr	r0, [pc, #12]	; (3230 <RawBuggyFunc+0x18>)
    3224:	f015 ff4f 	bl	190c6 <debug_log>
}
    3228:	bf00      	nop
    322a:	bd80      	pop	{r7, pc}
    322c:	0002cc28 	.word	0x0002cc28
    3230:	0002cc3c 	.word	0x0002cc3c

00003234 <FixedBuggyFunc>:

static void FixedBuggyFunc() {
    3234:	b580      	push	{r7, lr}
    3236:	af00      	add	r7, sp, #0
	DEBUG_LOG("run FixedBuggyFunc\n");
    3238:	4802      	ldr	r0, [pc, #8]	; (3244 <FixedBuggyFunc+0x10>)
    323a:	f015 ff44 	bl	190c6 <debug_log>
}
    323e:	bf00      	nop
    3240:	bd80      	pop	{r7, pc}
    3242:	bf00      	nop
    3244:	0002cc50 	.word	0x0002cc50

00003248 <test_freertos_cve>:
	IPHeader_t xIPHeader;
} IPPacket_t;
static int freertos_cve_func(const IPPacket_t * const pxIPPacket, NetworkBufferDescriptor_t * const pxNetworkBuffer);

// compare with HERA
static void test_freertos_cve() {
    3248:	b580      	push	{r7, lr}
    324a:	b08c      	sub	sp, #48	; 0x30
    324c:	af00      	add	r7, sp, #0
	IPPacket_t pkt = {
    324e:	f107 0308 	add.w	r3, r7, #8
    3252:	2224      	movs	r2, #36	; 0x24
    3254:	2100      	movs	r1, #0
    3256:	4618      	mov	r0, r3
    3258:	f7fe ff2e 	bl	20b8 <memset>
    325c:	2332      	movs	r3, #50	; 0x32
    325e:	763b      	strb	r3, [r7, #24]
		.xIPHeader = {
			.ucVersionHeaderLength = 50,
		}
	};
	NetworkBufferDescriptor_t data = {
    3260:	2300      	movs	r3, #0
    3262:	607b      	str	r3, [r7, #4]
		.xDataLength = 0,
	};
	profile_add_event("HERA Compare");
    3264:	4815      	ldr	r0, [pc, #84]	; (32bc <test_freertos_cve+0x74>)
    3266:	f001 f8a9 	bl	43bc <profile_add_event>
	
	profile_start(0);
    326a:	2000      	movs	r0, #0
    326c:	f001 f8e6 	bl	443c <profile_start>
	int t = freertos_cve_func(&pkt, &data);
    3270:	1d3a      	adds	r2, r7, #4
    3272:	f107 0308 	add.w	r3, r7, #8
    3276:	4611      	mov	r1, r2
    3278:	4618      	mov	r0, r3
    327a:	f015 fe85 	bl	18f88 <freertos_cve_func>
    327e:	62f8      	str	r0, [r7, #44]	; 0x2c
	profile_end(0);
    3280:	2000      	movs	r0, #0
    3282:	f001 f8ed 	bl	4460 <profile_end>
	
	profile_dump(0);
    3286:	2000      	movs	r0, #0
    3288:	f001 f906 	bl	4498 <profile_dump>
	
	profile_start(1);
    328c:	2001      	movs	r0, #1
    328e:	f001 f8d5 	bl	443c <profile_start>
	
	profile_end(1);
    3292:	2001      	movs	r0, #1
    3294:	f001 f8e4 	bl	4460 <profile_end>
	hera_fix_func(&pkt, &data);
    3298:	1d3a      	adds	r2, r7, #4
    329a:	f107 0308 	add.w	r3, r7, #8
    329e:	4611      	mov	r1, r2
    32a0:	4618      	mov	r0, r3
    32a2:	f015 fe85 	bl	18fb0 <hera_fix_func>
	profile_dump(1);
    32a6:	2001      	movs	r0, #1
    32a8:	f001 f8f6 	bl	4498 <profile_dump>
	DEBUG_LOG("bug func: %d\n", t);
    32ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    32ae:	4804      	ldr	r0, [pc, #16]	; (32c0 <test_freertos_cve+0x78>)
    32b0:	f015 ff09 	bl	190c6 <debug_log>
}
    32b4:	bf00      	nop
    32b6:	3730      	adds	r7, #48	; 0x30
    32b8:	46bd      	mov	sp, r7
    32ba:	bd80      	pop	{r7, pc}
    32bc:	0002cc64 	.word	0x0002cc64
    32c0:	0002cc74 	.word	0x0002cc74

000032c4 <fpb_setup_test>:
		return -1;
	}
	return 0;
}

static void fpb_setup_test() {
    32c4:	b590      	push	{r4, r7, lr}
    32c6:	b087      	sub	sp, #28
    32c8:	af00      	add	r7, sp, #0
	uint32_t buggy_addr = (uint32_t) RawBuggyFunc & 0xFFFFFFFE;
    32ca:	4b26      	ldr	r3, [pc, #152]	; (3364 <fpb_setup_test+0xa0>)
    32cc:	f023 0301 	bic.w	r3, r3, #1
    32d0:	617b      	str	r3, [r7, #20]
	uint32_t fixed_addr = (uint32_t) FixedBuggyFunc & 0xFFFFFFFE;
    32d2:	4b25      	ldr	r3, [pc, #148]	; (3368 <fpb_setup_test+0xa4>)
    32d4:	f023 0301 	bic.w	r3, r3, #1
    32d8:	613b      	str	r3, [r7, #16]
	fixed_addr = (uint32_t) FPB_Handler0 & 0xFFFFFFFE;
    32da:	4b24      	ldr	r3, [pc, #144]	; (336c <fpb_setup_test+0xa8>)
    32dc:	f023 0301 	bic.w	r3, r3, #1
    32e0:	613b      	str	r3, [r7, #16]
	//buggy_addr = (uint32_t) freertos_cve_func & 0xFFFFFFFE;
	//fixed_addr = (uint32_t) HERA_Dipatcher & 0xFFFFFFFE;

	
	// set buggy breakpoint
	int fidx = 3;
    32e2:	2303      	movs	r3, #3
    32e4:	60fb      	str	r3, [r7, #12]
	FPB->COMP[fidx] = buggy_addr | 0x1;
    32e6:	4922      	ldr	r1, [pc, #136]	; (3370 <fpb_setup_test+0xac>)
    32e8:	697b      	ldr	r3, [r7, #20]
    32ea:	f043 0201 	orr.w	r2, r3, #1
    32ee:	68fb      	ldr	r3, [r7, #12]
    32f0:	3302      	adds	r3, #2
    32f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	// set remap inst, bl xxx, jump to fixed addr 
	uint32_t jmp_inst = calc_branch_instr(buggy_addr, fixed_addr);
    32f6:	6939      	ldr	r1, [r7, #16]
    32f8:	6978      	ldr	r0, [r7, #20]
    32fa:	f7ff fbab 	bl	2a54 <calc_branch_instr>
    32fe:	60b8      	str	r0, [r7, #8]
	const uint32_t PATCH_TBL = (uint32_t) (&REMAP_ADDR) & (~0x1F);
    3300:	4b1c      	ldr	r3, [pc, #112]	; (3374 <fpb_setup_test+0xb0>)
    3302:	f023 031f 	bic.w	r3, r3, #31
    3306:	607b      	str	r3, [r7, #4]
	//const uint32_t PATCH_TBL = 0x20010000;
	*((volatile uint32_t *) (PATCH_TBL + fidx * 4)) = little_endian_16_bit(jmp_inst);
    3308:	68fb      	ldr	r3, [r7, #12]
    330a:	009b      	lsls	r3, r3, #2
    330c:	461a      	mov	r2, r3
    330e:	687b      	ldr	r3, [r7, #4]
    3310:	4413      	add	r3, r2
    3312:	461c      	mov	r4, r3
    3314:	68b8      	ldr	r0, [r7, #8]
    3316:	f015 ff25 	bl	19164 <little_endian_16_bit>
    331a:	4603      	mov	r3, r0
    331c:	6023      	str	r3, [r4, #0]
	DEBUG_LOG("buggy_addr: 0x%08x fixed_addr: 0x%08x\n", buggy_addr, fixed_addr);
    331e:	693a      	ldr	r2, [r7, #16]
    3320:	6979      	ldr	r1, [r7, #20]
    3322:	4815      	ldr	r0, [pc, #84]	; (3378 <fpb_setup_test+0xb4>)
    3324:	f015 fecf 	bl	190c6 <debug_log>
	DEBUG_LOG("ADDR: 0x%08x excepted value: 0x%08x\n", (&REMAP_ADDR), little_endian_16_bit(jmp_inst));
    3328:	68b8      	ldr	r0, [r7, #8]
    332a:	f015 ff1b 	bl	19164 <little_endian_16_bit>
    332e:	4603      	mov	r3, r0
    3330:	461a      	mov	r2, r3
    3332:	4910      	ldr	r1, [pc, #64]	; (3374 <fpb_setup_test+0xb0>)
    3334:	4811      	ldr	r0, [pc, #68]	; (337c <fpb_setup_test+0xb8>)
    3336:	f015 fec6 	bl	190c6 <debug_log>
	DEBUG_LOG("remap: 0x%08x inst addr: 0x%08x\n", PATCH_TBL, *((volatile uint32_t *) (PATCH_TBL + fidx * 4)));
    333a:	68fb      	ldr	r3, [r7, #12]
    333c:	009b      	lsls	r3, r3, #2
    333e:	461a      	mov	r2, r3
    3340:	687b      	ldr	r3, [r7, #4]
    3342:	4413      	add	r3, r2
    3344:	681b      	ldr	r3, [r3, #0]
    3346:	461a      	mov	r2, r3
    3348:	6879      	ldr	r1, [r7, #4]
    334a:	480d      	ldr	r0, [pc, #52]	; (3380 <fpb_setup_test+0xbc>)
    334c:	f015 febb 	bl	190c6 <debug_log>
	// enable flash patch break point
	FPB->REMAP = PATCH_TBL;
    3350:	4a07      	ldr	r2, [pc, #28]	; (3370 <fpb_setup_test+0xac>)
    3352:	687b      	ldr	r3, [r7, #4]
    3354:	6053      	str	r3, [r2, #4]
	FPB->CTRL = 3;
    3356:	4b06      	ldr	r3, [pc, #24]	; (3370 <fpb_setup_test+0xac>)
    3358:	2203      	movs	r2, #3
    335a:	601a      	str	r2, [r3, #0]
}
    335c:	bf00      	nop
    335e:	371c      	adds	r7, #28
    3360:	46bd      	mov	sp, r7
    3362:	bd90      	pop	{r4, r7, pc}
    3364:	00003219 	.word	0x00003219
    3368:	00003235 	.word	0x00003235
    336c:	0000292d 	.word	0x0000292d
    3370:	e0002000 	.word	0xe0002000
    3374:	200021dc 	.word	0x200021dc
    3378:	0002cc84 	.word	0x0002cc84
    337c:	0002ccac 	.word	0x0002ccac
    3380:	0002ccd4 	.word	0x0002ccd4

00003384 <test_debugmon_patch>:

void test_debugmon_patch() {
    3384:	b580      	push	{r7, lr}
    3386:	af00      	add	r7, sp, #0
	//RawBuggyFunc();
	DEBUG_LOG("test_debugmon_patch\n");
    3388:	4804      	ldr	r0, [pc, #16]	; (339c <test_debugmon_patch+0x18>)
    338a:	f015 fe9c 	bl	190c6 <debug_log>
	test_freertos_cve();
    338e:	f7ff ff5b 	bl	3248 <test_freertos_cve>

	// add_breakpoint((uint32_t) buggy_func);
	// load dummy patch
	//set_patch_mode(CORTEX_FPB_PATCH);
	fpb_setup_test();
    3392:	f7ff ff97 	bl	32c4 <fpb_setup_test>
	
	/* Our approach */
}
    3396:	bf00      	nop
    3398:	bd80      	pop	{r7, pc}
    339a:	bf00      	nop
    339c:	0002ccf8 	.word	0x0002ccf8

000033a0 <setup_cve_list>:
#include <misc/printk.h>
#include <net/coap.h>

// extern int packet_length_decode(struct buf_ctx *buf, u32_t *length);

void setup_cve_list() {
    33a0:	b480      	push	{r7}
    33a2:	af00      	add	r7, sp, #0
	patch_list[0].loc = (uint32_t) test_dynamic_bug;
    33a4:	4a03      	ldr	r2, [pc, #12]	; (33b4 <setup_cve_list+0x14>)
    33a6:	4b04      	ldr	r3, [pc, #16]	; (33b8 <setup_cve_list+0x18>)
    33a8:	605a      	str	r2, [r3, #4]
	// patch_list[1].loc = coap_packet_parse;
}
    33aa:	bf00      	nop
    33ac:	46bd      	mov	sp, r7
    33ae:	bc80      	pop	{r7}
    33b0:	4770      	bx	lr
    33b2:	bf00      	nop
    33b4:	00003405 	.word	0x00003405
    33b8:	2000ed84 	.word	0x2000ed84

000033bc <show_local_patch_desc>:
void setup_cve_list() {
	patch_list[0].loc = (uint32_t) test_dynamic_bug;
}
#endif // end OS

void show_local_patch_desc() {
    33bc:	b580      	push	{r7, lr}
    33be:	b082      	sub	sp, #8
    33c0:	af00      	add	r7, sp, #0
	int n = sizeof(patch_list) / sizeof(struct local_patch);
    33c2:	2304      	movs	r3, #4
    33c4:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
    33c6:	2300      	movs	r3, #0
    33c8:	607b      	str	r3, [r7, #4]
    33ca:	e00c      	b.n	33e6 <show_local_patch_desc+0x2a>
		DEBUG_LOG("%d -> %s\n", i, patch_list[i].cve);
    33cc:	4a0b      	ldr	r2, [pc, #44]	; (33fc <show_local_patch_desc+0x40>)
    33ce:	687b      	ldr	r3, [r7, #4]
    33d0:	011b      	lsls	r3, r3, #4
    33d2:	4413      	add	r3, r2
    33d4:	681b      	ldr	r3, [r3, #0]
    33d6:	461a      	mov	r2, r3
    33d8:	6879      	ldr	r1, [r7, #4]
    33da:	4809      	ldr	r0, [pc, #36]	; (3400 <show_local_patch_desc+0x44>)
    33dc:	f015 fe73 	bl	190c6 <debug_log>
	for (int i = 0; i < n; i++) {
    33e0:	687b      	ldr	r3, [r7, #4]
    33e2:	3301      	adds	r3, #1
    33e4:	607b      	str	r3, [r7, #4]
    33e6:	687a      	ldr	r2, [r7, #4]
    33e8:	683b      	ldr	r3, [r7, #0]
    33ea:	429a      	cmp	r2, r3
    33ec:	dbee      	blt.n	33cc <show_local_patch_desc+0x10>
	}
	setup_cve_list();
    33ee:	f7ff ffd7 	bl	33a0 <setup_cve_list>
}
    33f2:	bf00      	nop
    33f4:	3708      	adds	r7, #8
    33f6:	46bd      	mov	sp, r7
    33f8:	bd80      	pop	{r7, pc}
    33fa:	bf00      	nop
    33fc:	2000ed84 	.word	0x2000ed84
    3400:	0002cd8c 	.word	0x0002cd8c

00003404 <test_dynamic_bug>:

int test_dynamic_bug(int v) {
    3404:	b580      	push	{r7, lr}
    3406:	b082      	sub	sp, #8
    3408:	af00      	add	r7, sp, #0
    340a:	6078      	str	r0, [r7, #4]
	DEBUG_LOG("halo\n");
    340c:	4807      	ldr	r0, [pc, #28]	; (342c <test_dynamic_bug+0x28>)
    340e:	f015 fe5a 	bl	190c6 <debug_log>
	if (v > 2000) { // fixed: v > 5000 return -1
    3412:	687b      	ldr	r3, [r7, #4]
    3414:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    3418:	dd02      	ble.n	3420 <test_dynamic_bug+0x1c>
		//DEBUG_LOG("test_dynamic_bug-112: %d\n", v);
		return -1;
    341a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    341e:	e000      	b.n	3422 <test_dynamic_bug+0x1e>
	}
	//DEBUG_LOG("test_dynamic_bug-: %d\n", v);
	return 0;
    3420:	2300      	movs	r3, #0
}
    3422:	4618      	mov	r0, r3
    3424:	3708      	adds	r7, #8
    3426:	46bd      	mov	sp, r7
    3428:	bd80      	pop	{r7, pc}
    342a:	bf00      	nop
    342c:	0002cd98 	.word	0x0002cd98

00003430 <read_local_patch>:

ebpf_patch* read_local_patch(int pid) {
    3430:	b580      	push	{r7, lr}
    3432:	b086      	sub	sp, #24
    3434:	af00      	add	r7, sp, #0
    3436:	6078      	str	r0, [r7, #4]
	int n = sizeof(patch_list) / sizeof(struct local_patch);
    3438:	2304      	movs	r3, #4
    343a:	613b      	str	r3, [r7, #16]
	if (pid > n) {
    343c:	687a      	ldr	r2, [r7, #4]
    343e:	693b      	ldr	r3, [r7, #16]
    3440:	429a      	cmp	r2, r3
    3442:	dd07      	ble.n	3454 <read_local_patch+0x24>
		show_local_patch_desc();
    3444:	f7ff ffba 	bl	33bc <show_local_patch_desc>
		DEBUG_LOG("patch id less than %d\n", n);
    3448:	6939      	ldr	r1, [r7, #16]
    344a:	4839      	ldr	r0, [pc, #228]	; (3530 <read_local_patch+0x100>)
    344c:	f015 fe3b 	bl	190c6 <debug_log>
		return NULL;
    3450:	2300      	movs	r3, #0
    3452:	e069      	b.n	3528 <read_local_patch+0xf8>
	}
	if (!is_init) {
    3454:	4b37      	ldr	r3, [pc, #220]	; (3534 <read_local_patch+0x104>)
    3456:	781b      	ldrb	r3, [r3, #0]
    3458:	f083 0301 	eor.w	r3, r3, #1
    345c:	b2db      	uxtb	r3, r3
    345e:	2b00      	cmp	r3, #0
    3460:	d012      	beq.n	3488 <read_local_patch+0x58>
		_desc = ebpf_calloc(1, sizeof(patch_desc));
    3462:	2108      	movs	r1, #8
    3464:	2001      	movs	r0, #1
    3466:	f001 f88f 	bl	4588 <ebpf_calloc>
    346a:	4602      	mov	r2, r0
    346c:	4b32      	ldr	r3, [pc, #200]	; (3538 <read_local_patch+0x108>)
    346e:	601a      	str	r2, [r3, #0]
		_patch = ebpf_calloc(1, sizeof(ebpf_patch));
    3470:	210c      	movs	r1, #12
    3472:	2001      	movs	r0, #1
    3474:	f001 f888 	bl	4588 <ebpf_calloc>
    3478:	4602      	mov	r2, r0
    347a:	4b30      	ldr	r3, [pc, #192]	; (353c <read_local_patch+0x10c>)
    347c:	601a      	str	r2, [r3, #0]
		is_init = true;
    347e:	4b2d      	ldr	r3, [pc, #180]	; (3534 <read_local_patch+0x104>)
    3480:	2201      	movs	r2, #1
    3482:	701a      	strb	r2, [r3, #0]
		init_patch_sys();
    3484:	f000 fe40 	bl	4108 <init_patch_sys>
	}

	struct local_patch *pt = &patch_list[pid];
    3488:	687b      	ldr	r3, [r7, #4]
    348a:	011b      	lsls	r3, r3, #4
    348c:	4a2c      	ldr	r2, [pc, #176]	; (3540 <read_local_patch+0x110>)
    348e:	4413      	add	r3, r2
    3490:	60fb      	str	r3, [r7, #12]
	_desc->type = DynamicPatchPoint;
    3492:	4b29      	ldr	r3, [pc, #164]	; (3538 <read_local_patch+0x108>)
    3494:	681b      	ldr	r3, [r3, #0]
    3496:	2200      	movs	r2, #0
    3498:	f042 0202 	orr.w	r2, r2, #2
    349c:	701a      	strb	r2, [r3, #0]
    349e:	2200      	movs	r2, #0
    34a0:	705a      	strb	r2, [r3, #1]
	_desc->code_len = 0; // code do not save in desc now
    34a2:	4b25      	ldr	r3, [pc, #148]	; (3538 <read_local_patch+0x108>)
    34a4:	681b      	ldr	r3, [r3, #0]
    34a6:	2200      	movs	r2, #0
    34a8:	709a      	strb	r2, [r3, #2]
    34aa:	2200      	movs	r2, #0
    34ac:	70da      	strb	r2, [r3, #3]
	// inst addr should be divided by 4
	_desc->inst_addr = pt->loc;
    34ae:	4b22      	ldr	r3, [pc, #136]	; (3538 <read_local_patch+0x108>)
    34b0:	681b      	ldr	r3, [r3, #0]
    34b2:	68fa      	ldr	r2, [r7, #12]
    34b4:	6852      	ldr	r2, [r2, #4]
    34b6:	605a      	str	r2, [r3, #4]
	_patch->desc = _desc;
    34b8:	4b20      	ldr	r3, [pc, #128]	; (353c <read_local_patch+0x10c>)
    34ba:	681b      	ldr	r3, [r3, #0]
    34bc:	4a1e      	ldr	r2, [pc, #120]	; (3538 <read_local_patch+0x108>)
    34be:	6812      	ldr	r2, [r2, #0]
    34c0:	601a      	str	r2, [r3, #0]
	ebpf_vm *vm = _patch->vm;
    34c2:	4b1e      	ldr	r3, [pc, #120]	; (353c <read_local_patch+0x10c>)
    34c4:	681b      	ldr	r3, [r3, #0]
    34c6:	685b      	ldr	r3, [r3, #4]
    34c8:	617b      	str	r3, [r7, #20]
	if (vm == NULL) {
    34ca:	697b      	ldr	r3, [r7, #20]
    34cc:	2b00      	cmp	r3, #0
    34ce:	d108      	bne.n	34e2 <read_local_patch+0xb2>
		vm = init_ebpf_vm(pt->code, pt->code_len);
    34d0:	68fb      	ldr	r3, [r7, #12]
    34d2:	689a      	ldr	r2, [r3, #8]
    34d4:	68fb      	ldr	r3, [r7, #12]
    34d6:	68db      	ldr	r3, [r3, #12]
    34d8:	4619      	mov	r1, r3
    34da:	4610      	mov	r0, r2
    34dc:	f015 ff69 	bl	193b2 <init_ebpf_vm>
    34e0:	6178      	str	r0, [r7, #20]
		// vm->use_jit = false;
	}
	ebpf_vm_set_inst(vm, pt->code, pt->code_len);
    34e2:	68fb      	ldr	r3, [r7, #12]
    34e4:	6899      	ldr	r1, [r3, #8]
    34e6:	68fb      	ldr	r3, [r7, #12]
    34e8:	68db      	ldr	r3, [r3, #12]
    34ea:	461a      	mov	r2, r3
    34ec:	6978      	ldr	r0, [r7, #20]
    34ee:	f015 ff7f 	bl	193f0 <ebpf_vm_set_inst>
	vm->use_jit = true;
    34f2:	697b      	ldr	r3, [r7, #20]
    34f4:	2201      	movs	r2, #1
    34f6:	751a      	strb	r2, [r3, #20]
	if (vm->use_jit) {
    34f8:	697b      	ldr	r3, [r7, #20]
    34fa:	7d1b      	ldrb	r3, [r3, #20]
    34fc:	2b00      	cmp	r3, #0
    34fe:	d002      	beq.n	3506 <read_local_patch+0xd6>
		gen_jit_code(vm);
    3500:	6978      	ldr	r0, [r7, #20]
    3502:	f016 f99b 	bl	1983c <gen_jit_code>
	}
	_patch->vm = vm;
    3506:	4b0d      	ldr	r3, [pc, #52]	; (353c <read_local_patch+0x10c>)
    3508:	681b      	ldr	r3, [r3, #0]
    350a:	697a      	ldr	r2, [r7, #20]
    350c:	605a      	str	r2, [r3, #4]
	load_local_patch_to_ctx(_patch);
    350e:	4b0b      	ldr	r3, [pc, #44]	; (353c <read_local_patch+0x10c>)
    3510:	681b      	ldr	r3, [r3, #0]
    3512:	4618      	mov	r0, r3
    3514:	f000 fe9e 	bl	4254 <load_local_patch_to_ctx>
	// _patch->is_active = false;
	DEBUG_LOG("load patch %s success!\n", pt->cve);
    3518:	68fb      	ldr	r3, [r7, #12]
    351a:	681b      	ldr	r3, [r3, #0]
    351c:	4619      	mov	r1, r3
    351e:	4809      	ldr	r0, [pc, #36]	; (3544 <read_local_patch+0x114>)
    3520:	f015 fdd1 	bl	190c6 <debug_log>
	return _patch;
    3524:	4b05      	ldr	r3, [pc, #20]	; (353c <read_local_patch+0x10c>)
    3526:	681b      	ldr	r3, [r3, #0]
}
    3528:	4618      	mov	r0, r3
    352a:	3718      	adds	r7, #24
    352c:	46bd      	mov	sp, r7
    352e:	bd80      	pop	{r7, pc}
    3530:	0002cda0 	.word	0x0002cda0
    3534:	2000623c 	.word	0x2000623c
    3538:	2000220c 	.word	0x2000220c
    353c:	20002210 	.word	0x20002210
    3540:	2000ed84 	.word	0x2000ed84
    3544:	0002cdb8 	.word	0x0002cdb8

00003548 <test_ebpf_c0>:
	}
	//DEBUG_LOG("test_dynamic_bug-: %d\n", v);
	return 0;
}

void test_ebpf_c0() {
    3548:	b580      	push	{r7, lr}
    354a:	b088      	sub	sp, #32
    354c:	af00      	add	r7, sp, #0
	/* ebpf: 4511 
	jit: 111 
	origin: 34 
	*/
	args_stack_frame args_frame;
	args_frame.r0 = 2500;
    354e:	f640 13c4 	movw	r3, #2500	; 0x9c4
    3552:	603b      	str	r3, [r7, #0]
	ebpf_eva(code0, sizeof(code0), &args_frame, sizeof(args_frame));
    3554:	463a      	mov	r2, r7
    3556:	2320      	movs	r3, #32
    3558:	2151      	movs	r1, #81	; 0x51
    355a:	480a      	ldr	r0, [pc, #40]	; (3584 <test_ebpf_c0+0x3c>)
    355c:	f000 f9ce 	bl	38fc <ebpf_eva>

	profile_start(EV0);
    3560:	2000      	movs	r0, #0
    3562:	f000 ff6b 	bl	443c <profile_start>
	orig_c0(2500);
    3566:	f640 10c4 	movw	r0, #2500	; 0x9c4
    356a:	f015 fd47 	bl	18ffc <orig_c0>
	profile_end(EV0);
    356e:	2000      	movs	r0, #0
    3570:	f000 ff76 	bl	4460 <profile_end>
	profile_dump(EV0);
    3574:	2000      	movs	r0, #0
    3576:	f000 ff8f 	bl	4498 <profile_dump>
}
    357a:	bf00      	nop
    357c:	3720      	adds	r7, #32
    357e:	46bd      	mov	sp, r7
    3580:	bd80      	pop	{r7, pc}
    3582:	bf00      	nop
    3584:	2000edc4 	.word	0x2000edc4

00003588 <test_ebpf_c1>:

void test_ebpf_c1() {
    3588:	b580      	push	{r7, lr}
    358a:	b08c      	sub	sp, #48	; 0x30
    358c:	af00      	add	r7, sp, #0
	/*
	zephyr_cve_2020_10063

	*/
	unsigned char testcase[] = {
    358e:	4a0c      	ldr	r2, [pc, #48]	; (35c0 <test_ebpf_c1+0x38>)
    3590:	f107 0324 	add.w	r3, r7, #36	; 0x24
    3594:	e892 0003 	ldmia.w	r2, {r0, r1}
    3598:	e883 0003 	stmia.w	r3, {r0, r1}
		0x00 /* More data following the option to skip the "if (r == 0) {" case */
	};
	// uint8_t mem[48];
	args_stack_frame args_frame;
	//args_frame.r0 = (uint32_t) testcase;
	args_frame.r1 = (uint32_t) testcase;
    359c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    35a0:	60bb      	str	r3, [r7, #8]
	args_frame.r2 = 500;
    35a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    35a6:	60fb      	str	r3, [r7, #12]
	// memcpy(mem, &args_frame, sizeof(args_frame));
	uint32_t addr = args_frame.r1;
    35a8:	68bb      	ldr	r3, [r7, #8]
    35aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	// DEBUG_LOG("addr: 0x%08x 0x%08x val: %d\n", addr, testcase + 5, *(uint16_t *)(addr + 5));
	// DEBUG_LOG("test_ebpf_c1: 0x%08x 0x%08x 0x%08x %d\n", &args_frame, args_frame.r1, testcase, sizeof(args_frame));
	// DEBUG_LOG("struct size: %p %p %p\n", &args_frame, &(args_frame.r1), &(args_frame.r2));
	ebpf_eva(code1, sizeof(code1), &args_frame, sizeof(args_frame));
    35ac:	1d3a      	adds	r2, r7, #4
    35ae:	2320      	movs	r3, #32
    35b0:	2151      	movs	r1, #81	; 0x51
    35b2:	4804      	ldr	r0, [pc, #16]	; (35c4 <test_ebpf_c1+0x3c>)
    35b4:	f000 f9a2 	bl	38fc <ebpf_eva>
}
    35b8:	bf00      	nop
    35ba:	3730      	adds	r7, #48	; 0x30
    35bc:	46bd      	mov	sp, r7
    35be:	bd80      	pop	{r7, pc}
    35c0:	0002cec8 	.word	0x0002cec8
    35c4:	2000ee18 	.word	0x2000ee18

000035c8 <test_ebpf_c2>:

// problem
void test_ebpf_c2() {
    35c8:	b580      	push	{r7, lr}
    35ca:	b08a      	sub	sp, #40	; 0x28
    35cc:	af00      	add	r7, sp, #0
	/*
	zephyr_cve_2020_10021
	*/
	int mem_size = 233;
    35ce:	23e9      	movs	r3, #233	; 0xe9
    35d0:	627b      	str	r3, [r7, #36]	; 0x24
	args_stack_frame args_frame ={
    35d2:	2314      	movs	r3, #20
    35d4:	607b      	str	r3, [r7, #4]
		.r0 = 20,
		.r1 = ((uint32_t)(&mem_size)),
    35d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
	args_stack_frame args_frame ={
    35da:	60bb      	str	r3, [r7, #8]
    35dc:	2300      	movs	r3, #0
    35de:	60fb      	str	r3, [r7, #12]
    35e0:	2300      	movs	r3, #0
    35e2:	613b      	str	r3, [r7, #16]
    35e4:	2300      	movs	r3, #0
    35e6:	617b      	str	r3, [r7, #20]
    35e8:	2300      	movs	r3, #0
    35ea:	61bb      	str	r3, [r7, #24]
    35ec:	2300      	movs	r3, #0
    35ee:	61fb      	str	r3, [r7, #28]
    35f0:	2300      	movs	r3, #0
    35f2:	623b      	str	r3, [r7, #32]
		.r12 = 0,
		.lr = 0,
		.pc = 0,
		.xpsr = 0,
	};
	ebpf_eva(code2, sizeof(code2), &args_frame, sizeof(args_frame));
    35f4:	1d3a      	adds	r2, r7, #4
    35f6:	2320      	movs	r3, #32
    35f8:	2141      	movs	r1, #65	; 0x41
    35fa:	4803      	ldr	r0, [pc, #12]	; (3608 <test_ebpf_c2+0x40>)
    35fc:	f000 f97e 	bl	38fc <ebpf_eva>
}
    3600:	bf00      	nop
    3602:	3728      	adds	r7, #40	; 0x28
    3604:	46bd      	mov	sp, r7
    3606:	bd80      	pop	{r7, pc}
    3608:	2000ee6c 	.word	0x2000ee6c

0000360c <my_memmove>:

static void ebpf_call_c(int a1, int a2, char *a3, short a4) {
	DEBUG_LOG("ebpf_call_c: %d %d %d %d", a1, a2, a3, a4);
}

static void my_memmove(uint64_t arg1, uint64_t arg2, uint64_t arg3) {
    360c:	b580      	push	{r7, lr}
    360e:	b088      	sub	sp, #32
    3610:	af00      	add	r7, sp, #0
    3612:	e9c7 0102 	strd	r0, r1, [r7, #8]
    3616:	e9c7 2300 	strd	r2, r3, [r7]
	char *dst = (char *) arg1;
    361a:	68bb      	ldr	r3, [r7, #8]
    361c:	61fb      	str	r3, [r7, #28]
	char *src = (char *) arg2;
    361e:	683b      	ldr	r3, [r7, #0]
    3620:	61bb      	str	r3, [r7, #24]
	int len = arg3;
    3622:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3624:	617b      	str	r3, [r7, #20]
	// for (int i = 0; i < len; i++) {
	// 	dst[i] = src[i];
	// }
	DEBUG_LOG("my_memmove: %d %d %d\n", dst, src, len);
    3626:	697b      	ldr	r3, [r7, #20]
    3628:	69ba      	ldr	r2, [r7, #24]
    362a:	69f9      	ldr	r1, [r7, #28]
    362c:	4803      	ldr	r0, [pc, #12]	; (363c <my_memmove+0x30>)
    362e:	f015 fd4a 	bl	190c6 <debug_log>
}
    3632:	bf00      	nop
    3634:	3720      	adds	r7, #32
    3636:	46bd      	mov	sp, r7
    3638:	bd80      	pop	{r7, pc}
    363a:	bf00      	nop
    363c:	0002ceec 	.word	0x0002ceec

00003640 <test_ebpf_c3>:

void test_ebpf_c3() { 
    3640:	b580      	push	{r7, lr}
    3642:	b08a      	sub	sp, #40	; 0x28
    3644:	af00      	add	r7, sp, #0
	// zephyr_cve_2020_10023
	char *test_str = "test\n";
    3646:	4b0b      	ldr	r3, [pc, #44]	; (3674 <test_ebpf_c3+0x34>)
    3648:	627b      	str	r3, [r7, #36]	; 0x24
	args_stack_frame args_frame = {0};
    364a:	1d3b      	adds	r3, r7, #4
    364c:	2220      	movs	r2, #32
    364e:	2100      	movs	r1, #0
    3650:	4618      	mov	r0, r3
    3652:	f7fe fd31 	bl	20b8 <memset>
	args_frame.r0 = test_str;
    3656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3658:	607b      	str	r3, [r7, #4]
	// args_frame.r1 = (uint32_t) ebpf_call_c;
	args_frame.r1 = (uint32_t) my_memmove;
    365a:	4b07      	ldr	r3, [pc, #28]	; (3678 <test_ebpf_c3+0x38>)
    365c:	60bb      	str	r3, [r7, #8]
	//args_frame.r2 = 2;
	ebpf_eva(code3, sizeof(code3), &args_frame, sizeof(args_frame));
    365e:	1d3a      	adds	r2, r7, #4
    3660:	2320      	movs	r3, #32
    3662:	f240 11e9 	movw	r1, #489	; 0x1e9
    3666:	4805      	ldr	r0, [pc, #20]	; (367c <test_ebpf_c3+0x3c>)
    3668:	f000 f948 	bl	38fc <ebpf_eva>
}
    366c:	bf00      	nop
    366e:	3728      	adds	r7, #40	; 0x28
    3670:	46bd      	mov	sp, r7
    3672:	bd80      	pop	{r7, pc}
    3674:	0002cf04 	.word	0x0002cf04
    3678:	0000360d 	.word	0x0000360d
    367c:	2000eeb0 	.word	0x2000eeb0

00003680 <test_ebpf_c4>:

void test_ebpf_c4() {
    3680:	b580      	push	{r7, lr}
    3682:	b088      	sub	sp, #32
    3684:	af00      	add	r7, sp, #0
	// zephyr_cve_2020_10024
	args_stack_frame args_frame;
	args_frame.pc = 5;
    3686:	2305      	movs	r3, #5
    3688:	61bb      	str	r3, [r7, #24]
	args_frame.xpsr = 7;
    368a:	2307      	movs	r3, #7
    368c:	61fb      	str	r3, [r7, #28]
	ebpf_eva(code4, sizeof(code4), &args_frame, sizeof(args_frame));
    368e:	463a      	mov	r2, r7
    3690:	2320      	movs	r3, #32
    3692:	2169      	movs	r1, #105	; 0x69
    3694:	4803      	ldr	r0, [pc, #12]	; (36a4 <test_ebpf_c4+0x24>)
    3696:	f000 f931 	bl	38fc <ebpf_eva>
}
    369a:	bf00      	nop
    369c:	3720      	adds	r7, #32
    369e:	46bd      	mov	sp, r7
    36a0:	bd80      	pop	{r7, pc}
    36a2:	bf00      	nop
    36a4:	2000f09c 	.word	0x2000f09c

000036a8 <test_ebpf_c5>:

void test_ebpf_c5() {
    36a8:	b580      	push	{r7, lr}
    36aa:	b090      	sub	sp, #64	; 0x40
    36ac:	af00      	add	r7, sp, #0

	static struct gpio_struct1 {
		int a;
		struct gpio_struct2* b;
	};
	struct gpio_struct2 g2 = {
    36ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    36b2:	2200      	movs	r2, #0
    36b4:	601a      	str	r2, [r3, #0]
    36b6:	605a      	str	r2, [r3, #4]
    36b8:	609a      	str	r2, [r3, #8]
    36ba:	60da      	str	r2, [r3, #12]
    36bc:	611a      	str	r2, [r3, #16]
		.c = 0,
		.d = 0,
		.e = 0,
	};

	struct gpio_struct1 g1 = {
    36be:	2300      	movs	r3, #0
    36c0:	627b      	str	r3, [r7, #36]	; 0x24
    36c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    36c6:	62bb      	str	r3, [r7, #40]	; 0x28
		.a = 0,
		.b = &g2,
	};

	args_stack_frame args_frame = {
    36c8:	1d3b      	adds	r3, r7, #4
    36ca:	2220      	movs	r2, #32
    36cc:	2100      	movs	r1, #0
    36ce:	4618      	mov	r0, r3
    36d0:	f7fe fcf2 	bl	20b8 <memset>
    36d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
    36d8:	60bb      	str	r3, [r7, #8]
		.r12 = 0,
		.lr = 0,
		.pc = 0,
		.xpsr = 0,
	};
	ebpf_eva(code5, sizeof(code5), &args_frame, sizeof(args_frame));
    36da:	1d3a      	adds	r2, r7, #4
    36dc:	2320      	movs	r3, #32
    36de:	2141      	movs	r1, #65	; 0x41
    36e0:	4803      	ldr	r0, [pc, #12]	; (36f0 <test_ebpf_c5+0x48>)
    36e2:	f000 f90b 	bl	38fc <ebpf_eva>
}
    36e6:	bf00      	nop
    36e8:	3740      	adds	r7, #64	; 0x40
    36ea:	46bd      	mov	sp, r7
    36ec:	bd80      	pop	{r7, pc}
    36ee:	bf00      	nop
    36f0:	2000f108 	.word	0x2000f108

000036f4 <test_ebpf_c6>:

void test_ebpf_c6() {
    36f4:	b580      	push	{r7, lr}
    36f6:	b08c      	sub	sp, #48	; 0x30
    36f8:	af00      	add	r7, sp, #0
	// zephyr_cve_2020_10062
	struct mqtt_buf_ctx {
		unsigned char *cur;
		unsigned char *end;
	};
	unsigned char mqtt_buf[6] = {0x81, 0x21, 0x12, 0, 0, 0};
    36fa:	4a11      	ldr	r2, [pc, #68]	; (3740 <test_ebpf_c6+0x4c>)
    36fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
    3700:	e892 0003 	ldmia.w	r2, {r0, r1}
    3704:	6018      	str	r0, [r3, #0]
    3706:	3304      	adds	r3, #4
    3708:	8019      	strh	r1, [r3, #0]
	struct mqtt_buf_ctx mbc = {
    370a:	f107 0328 	add.w	r3, r7, #40	; 0x28
    370e:	623b      	str	r3, [r7, #32]
		.cur = mqtt_buf,
		.end = mqtt_buf + 10,
    3710:	f107 0328 	add.w	r3, r7, #40	; 0x28
    3714:	330a      	adds	r3, #10
	struct mqtt_buf_ctx mbc = {
    3716:	627b      	str	r3, [r7, #36]	; 0x24
	};

	args_stack_frame args_frame = {
    3718:	463b      	mov	r3, r7
    371a:	2220      	movs	r2, #32
    371c:	2100      	movs	r1, #0
    371e:	4618      	mov	r0, r3
    3720:	f7fe fcca 	bl	20b8 <memset>
    3724:	f107 0320 	add.w	r3, r7, #32
    3728:	603b      	str	r3, [r7, #0]
		.r0 = &mbc,
	};
	ebpf_eva(code6, sizeof(code6), &args_frame, sizeof(args_frame));
    372a:	463a      	mov	r2, r7
    372c:	2320      	movs	r3, #32
    372e:	f240 11b1 	movw	r1, #433	; 0x1b1
    3732:	4804      	ldr	r0, [pc, #16]	; (3744 <test_ebpf_c6+0x50>)
    3734:	f000 f8e2 	bl	38fc <ebpf_eva>
}
    3738:	bf00      	nop
    373a:	3730      	adds	r7, #48	; 0x30
    373c:	46bd      	mov	sp, r7
    373e:	bd80      	pop	{r7, pc}
    3740:	0002cf0c 	.word	0x0002cf0c
    3744:	2000f14c 	.word	0x2000f14c

00003748 <test_ebpf_c7>:

void test_ebpf_c7() {
    3748:	b580      	push	{r7, lr}
    374a:	b09e      	sub	sp, #120	; 0x78
    374c:	af00      	add	r7, sp, #0

	static struct TCPPacket {
		unsigned char data[60];
	};

	struct TCPPacket tcppkt = {
    374e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    3752:	223c      	movs	r2, #60	; 0x3c
    3754:	2100      	movs	r1, #0
    3756:	4618      	mov	r0, r3
    3758:	f7fe fcae 	bl	20b8 <memset>
		.data = {0},
	};

	struct IPPacket ippkt = {
    375c:	f107 0320 	add.w	r3, r7, #32
    3760:	2200      	movs	r2, #0
    3762:	601a      	str	r2, [r3, #0]
    3764:	605a      	str	r2, [r3, #4]
    3766:	609a      	str	r2, [r3, #8]
    3768:	60da      	str	r2, [r3, #12]
    376a:	611a      	str	r2, [r3, #16]
    376c:	615a      	str	r2, [r3, #20]
    376e:	619a      	str	r2, [r3, #24]
    3770:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    3774:	63bb      	str	r3, [r7, #56]	; 0x38
		.padd = {0},
		.tcpptr = &tcppkt,
	};

	args_stack_frame args_frame = {
    3776:	463b      	mov	r3, r7
    3778:	2220      	movs	r2, #32
    377a:	2100      	movs	r1, #0
    377c:	4618      	mov	r0, r3
    377e:	f7fe fc9b 	bl	20b8 <memset>
    3782:	f107 0320 	add.w	r3, r7, #32
    3786:	607b      	str	r3, [r7, #4]
		.r0 = 0,
		.r1 = &ippkt,
	};
	ebpf_eva(code7, sizeof(code7), &args_frame, sizeof(args_frame));
    3788:	463a      	mov	r2, r7
    378a:	2320      	movs	r3, #32
    378c:	f240 1159 	movw	r1, #345	; 0x159
    3790:	4803      	ldr	r0, [pc, #12]	; (37a0 <test_ebpf_c7+0x58>)
    3792:	f000 f8b3 	bl	38fc <ebpf_eva>
}
    3796:	bf00      	nop
    3798:	3778      	adds	r7, #120	; 0x78
    379a:	46bd      	mov	sp, r7
    379c:	bd80      	pop	{r7, pc}
    379e:	bf00      	nop
    37a0:	2000f300 	.word	0x2000f300

000037a4 <test_ebpf_c8>:

void test_ebpf_c8() {
    37a4:	b580      	push	{r7, lr}
    37a6:	b088      	sub	sp, #32
    37a8:	af00      	add	r7, sp, #0
	// freertos_cve_2018_16603
	args_stack_frame args_frame;
	args_frame.r0 = 12;
    37aa:	230c      	movs	r3, #12
    37ac:	603b      	str	r3, [r7, #0]
	args_frame.r1 = 0; // 1 success, 0 failed
    37ae:	2300      	movs	r3, #0
    37b0:	607b      	str	r3, [r7, #4]
	// ebpf_eva(code8, sizeof(code8), &args_frame, sizeof(args_frame));
	ebpf_eva(code8_1, sizeof(code8_1), &args_frame, sizeof(args_frame));
    37b2:	463a      	mov	r2, r7
    37b4:	2320      	movs	r3, #32
    37b6:	2151      	movs	r1, #81	; 0x51
    37b8:	4806      	ldr	r0, [pc, #24]	; (37d4 <test_ebpf_c8+0x30>)
    37ba:	f000 f89f 	bl	38fc <ebpf_eva>
	ebpf_eva(code8_2, sizeof(code8_2), &args_frame, sizeof(args_frame));
    37be:	463a      	mov	r2, r7
    37c0:	2320      	movs	r3, #32
    37c2:	2169      	movs	r1, #105	; 0x69
    37c4:	4804      	ldr	r0, [pc, #16]	; (37d8 <test_ebpf_c8+0x34>)
    37c6:	f000 f899 	bl	38fc <ebpf_eva>
	// DEBUG_LOG("NOT IMPL\n");
}
    37ca:	bf00      	nop
    37cc:	3720      	adds	r7, #32
    37ce:	46bd      	mov	sp, r7
    37d0:	bd80      	pop	{r7, pc}
    37d2:	bf00      	nop
    37d4:	2000f45c 	.word	0x2000f45c
    37d8:	2000f4b0 	.word	0x2000f4b0

000037dc <test_ebpf_c9>:

void test_ebpf_c9() {
    37dc:	b590      	push	{r4, r7, lr}
    37de:	b093      	sub	sp, #76	; 0x4c
    37e0:	af00      	add	r7, sp, #0
	// freertos_cve_2018_16603
	static struct ETHPacket {
		unsigned char padd[28];
		uint64_t xDataLength;
	};
	struct ETHPacket ethpkt = {
    37e2:	f107 0320 	add.w	r3, r7, #32
    37e6:	2228      	movs	r2, #40	; 0x28
    37e8:	2100      	movs	r1, #0
    37ea:	4618      	mov	r0, r3
    37ec:	f7fe fc64 	bl	20b8 <memset>
    37f0:	f04f 0364 	mov.w	r3, #100	; 0x64
    37f4:	f04f 0400 	mov.w	r4, #0
    37f8:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		.padd = {0},
		.xDataLength = 100,
	};
	args_stack_frame args_frame = {
    37fc:	463b      	mov	r3, r7
    37fe:	2220      	movs	r2, #32
    3800:	2100      	movs	r1, #0
    3802:	4618      	mov	r0, r3
    3804:	f7fe fc58 	bl	20b8 <memset>
    3808:	f107 0320 	add.w	r3, r7, #32
    380c:	603b      	str	r3, [r7, #0]
		.r0 = &ethpkt
	};
	ebpf_eva(code9, sizeof(code9), &args_frame, sizeof(args_frame));
    380e:	463a      	mov	r2, r7
    3810:	2320      	movs	r3, #32
    3812:	2149      	movs	r1, #73	; 0x49
    3814:	4803      	ldr	r0, [pc, #12]	; (3824 <test_ebpf_c9+0x48>)
    3816:	f000 f871 	bl	38fc <ebpf_eva>
}
    381a:	bf00      	nop
    381c:	374c      	adds	r7, #76	; 0x4c
    381e:	46bd      	mov	sp, r7
    3820:	bd90      	pop	{r4, r7, pc}
    3822:	bf00      	nop
    3824:	2000f51c 	.word	0x2000f51c

00003828 <test_ebpf_c10>:

void test_ebpf_c10() {
    3828:	b580      	push	{r7, lr}
    382a:	b088      	sub	sp, #32
    382c:	af00      	add	r7, sp, #0
	// DEBUG_LOG("NOT IMPL\n");
	args_stack_frame args_frame;
	args_frame.pc = 2020;
    382e:	f240 73e4 	movw	r3, #2020	; 0x7e4
    3832:	61bb      	str	r3, [r7, #24]
	ebpf_eva(code10, sizeof(code10), &args_frame, sizeof(args_frame));
    3834:	463a      	mov	r2, r7
    3836:	2320      	movs	r3, #32
    3838:	2141      	movs	r1, #65	; 0x41
    383a:	4803      	ldr	r0, [pc, #12]	; (3848 <test_ebpf_c10+0x20>)
    383c:	f000 f85e 	bl	38fc <ebpf_eva>
}
    3840:	bf00      	nop
    3842:	3720      	adds	r7, #32
    3844:	46bd      	mov	sp, r7
    3846:	bd80      	pop	{r7, pc}
    3848:	2000f568 	.word	0x2000f568

0000384c <test_ebpf_c11>:

void test_ebpf_c11() {
    384c:	b580      	push	{r7, lr}
    384e:	b092      	sub	sp, #72	; 0x48
    3850:	af00      	add	r7, sp, #0
	// AMNESIA33_cve_2020_17443
	static struct PicoFrame {
		unsigned char padd[38];
		uint16_t transport_len;
	};
	struct PicoFrame pf = {
    3852:	f107 0320 	add.w	r3, r7, #32
    3856:	2228      	movs	r2, #40	; 0x28
    3858:	2100      	movs	r1, #0
    385a:	4618      	mov	r0, r3
    385c:	f7fe fc2c 	bl	20b8 <memset>
    3860:	2307      	movs	r3, #7
    3862:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		.padd = {0},
		.transport_len = 7,
	};
	args_stack_frame args_frame = {
    3866:	463b      	mov	r3, r7
    3868:	2220      	movs	r2, #32
    386a:	2100      	movs	r1, #0
    386c:	4618      	mov	r0, r3
    386e:	f7fe fc23 	bl	20b8 <memset>
    3872:	f107 0320 	add.w	r3, r7, #32
    3876:	603b      	str	r3, [r7, #0]
		.r0 = &pf,
	};
	ebpf_eva(code11, sizeof(code11), &args_frame, sizeof(args_frame));
    3878:	463a      	mov	r2, r7
    387a:	2320      	movs	r3, #32
    387c:	2141      	movs	r1, #65	; 0x41
    387e:	4803      	ldr	r0, [pc, #12]	; (388c <test_ebpf_c11+0x40>)
    3880:	f000 f83c 	bl	38fc <ebpf_eva>
}
    3884:	bf00      	nop
    3886:	3748      	adds	r7, #72	; 0x48
    3888:	46bd      	mov	sp, r7
    388a:	bd80      	pop	{r7, pc}
    388c:	2000f5ac 	.word	0x2000f5ac

00003890 <test_ebpf_c12>:

void test_ebpf_c12() {
    3890:	b580      	push	{r7, lr}
    3892:	b096      	sub	sp, #88	; 0x58
    3894:	af00      	add	r7, sp, #0
	// AMNESIA33_cve_2020_17445
	uint32_t opt_ptr = 0;
    3896:	2300      	movs	r3, #0
    3898:	657b      	str	r3, [r7, #84]	; 0x54
	uint8_t destopt[50] = {1, -2, -2, -2, -2, -2};
    389a:	f107 0320 	add.w	r3, r7, #32
    389e:	2232      	movs	r2, #50	; 0x32
    38a0:	2100      	movs	r1, #0
    38a2:	4618      	mov	r0, r3
    38a4:	f7fe fc08 	bl	20b8 <memset>
    38a8:	2301      	movs	r3, #1
    38aa:	f887 3020 	strb.w	r3, [r7, #32]
    38ae:	23fe      	movs	r3, #254	; 0xfe
    38b0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    38b4:	23fe      	movs	r3, #254	; 0xfe
    38b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    38ba:	23fe      	movs	r3, #254	; 0xfe
    38bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    38c0:	23fe      	movs	r3, #254	; 0xfe
    38c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    38c6:	23fe      	movs	r3, #254	; 0xfe
    38c8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	args_stack_frame args_frame = {
    38cc:	463b      	mov	r3, r7
    38ce:	2220      	movs	r2, #32
    38d0:	2100      	movs	r1, #0
    38d2:	4618      	mov	r0, r3
    38d4:	f7fe fbf0 	bl	20b8 <memset>
    38d8:	f107 0320 	add.w	r3, r7, #32
    38dc:	603b      	str	r3, [r7, #0]
    38de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    38e0:	60bb      	str	r3, [r7, #8]
		.r0 = destopt,
		.r1 = 0,
		.r2 = opt_ptr,
	};
	ebpf_eva(code12, sizeof(code12), &args_frame, sizeof(args_frame));
    38e2:	463a      	mov	r2, r7
    38e4:	2320      	movs	r3, #32
    38e6:	f240 1119 	movw	r1, #281	; 0x119
    38ea:	4803      	ldr	r0, [pc, #12]	; (38f8 <test_ebpf_c12+0x68>)
    38ec:	f000 f806 	bl	38fc <ebpf_eva>
}
    38f0:	bf00      	nop
    38f2:	3758      	adds	r7, #88	; 0x58
    38f4:	46bd      	mov	sp, r7
    38f6:	bd80      	pop	{r7, pc}
    38f8:	2000f5f0 	.word	0x2000f5f0

000038fc <ebpf_eva>:

void ebpf_eva(uint8_t *code, int code_len, void *args, int ags_len) {
    38fc:	b5b0      	push	{r4, r5, r7, lr}
    38fe:	b094      	sub	sp, #80	; 0x50
    3900:	af02      	add	r7, sp, #8
    3902:	60f8      	str	r0, [r7, #12]
    3904:	60b9      	str	r1, [r7, #8]
    3906:	607a      	str	r2, [r7, #4]
    3908:	603b      	str	r3, [r7, #0]
	bool test_jit = true;
    390a:	2301      	movs	r3, #1
    390c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	// test_jit = false;
	ebpf_vm vm;
	ebpf_vm_set_inst(&vm, code, code_len);
    3910:	68ba      	ldr	r2, [r7, #8]
    3912:	f107 0314 	add.w	r3, r7, #20
    3916:	68f9      	ldr	r1, [r7, #12]
    3918:	4618      	mov	r0, r3
    391a:	f015 fd69 	bl	193f0 <ebpf_vm_set_inst>
	//profile_exit();
	profile_add_event("ebpf");
    391e:	483a      	ldr	r0, [pc, #232]	; (3a08 <ebpf_eva+0x10c>)
    3920:	f000 fd4c 	bl	43bc <profile_add_event>
	uint64_t ret1 = 0, ret2 = 0;
    3924:	f04f 0300 	mov.w	r3, #0
    3928:	f04f 0400 	mov.w	r4, #0
    392c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    3930:	f04f 0300 	mov.w	r3, #0
    3934:	f04f 0400 	mov.w	r4, #0
    3938:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	profile_start(EV0);
    393c:	2000      	movs	r0, #0
    393e:	f000 fd7d 	bl	443c <profile_start>
	ret1 = ebpf_vm_exec(&vm, args, ags_len);
    3942:	683a      	ldr	r2, [r7, #0]
    3944:	f107 0314 	add.w	r3, r7, #20
    3948:	6879      	ldr	r1, [r7, #4]
    394a:	4618      	mov	r0, r3
    394c:	f000 fedc 	bl	4708 <ebpf_vm_exec>
    3950:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
	profile_end(EV0);
    3954:	2000      	movs	r0, #0
    3956:	f000 fd83 	bl	4460 <profile_end>
	// jit_compile
	if (test_jit) {
    395a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    395e:	2b00      	cmp	r3, #0
    3960:	d01b      	beq.n	399a <ebpf_eva+0x9e>
		gen_jit_code(&vm);
    3962:	f107 0314 	add.w	r3, r7, #20
    3966:	4618      	mov	r0, r3
    3968:	f015 ff68 	bl	1983c <gen_jit_code>
		profile_start(EV1);
    396c:	2001      	movs	r0, #1
    396e:	f000 fd65 	bl	443c <profile_start>
		ret2 = vm.jit_func(args, ags_len);
    3972:	6a3b      	ldr	r3, [r7, #32]
    3974:	683a      	ldr	r2, [r7, #0]
    3976:	b292      	uxth	r2, r2
    3978:	4611      	mov	r1, r2
    397a:	6878      	ldr	r0, [r7, #4]
    397c:	4798      	blx	r3
    397e:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
		profile_end(EV1);
    3982:	2001      	movs	r0, #1
    3984:	f000 fd6c 	bl	4460 <profile_end>
		DEBUG_LOG("jit_func address: 0x%08x\n", (uint32_t) vm.jit_func);
    3988:	6a3b      	ldr	r3, [r7, #32]
    398a:	4619      	mov	r1, r3
    398c:	481f      	ldr	r0, [pc, #124]	; (3a0c <ebpf_eva+0x110>)
    398e:	f015 fb9a 	bl	190c6 <debug_log>
		jit_mem_free(vm.jmem);
    3992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3994:	4618      	mov	r0, r3
    3996:	f015 ff27 	bl	197e8 <jit_mem_free>
	}
	
	DEBUG_LOG("Interupter: Op=%d Ret=%d Jit: Op=%d Ret=%d\n", (int) (ret1 >> 32), (int) (ret1 & 0xffffffff), 
    399a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
    399e:	f04f 0300 	mov.w	r3, #0
    39a2:	f04f 0400 	mov.w	r4, #0
    39a6:	0013      	movs	r3, r2
    39a8:	2400      	movs	r4, #0
    39aa:	461d      	mov	r5, r3
    39ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
    39ae:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
    39b2:	f04f 0300 	mov.w	r3, #0
    39b6:	f04f 0400 	mov.w	r4, #0
    39ba:	0013      	movs	r3, r2
    39bc:	2400      	movs	r4, #0
    39be:	461a      	mov	r2, r3
    39c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    39c2:	9300      	str	r3, [sp, #0]
    39c4:	4613      	mov	r3, r2
    39c6:	4602      	mov	r2, r0
    39c8:	4629      	mov	r1, r5
    39ca:	4811      	ldr	r0, [pc, #68]	; (3a10 <ebpf_eva+0x114>)
    39cc:	f015 fb7b 	bl	190c6 <debug_log>
		(int) (ret2 >> 32), (int) (ret2 & 0xffffffff));
	profile_dump(EV0);
    39d0:	2000      	movs	r0, #0
    39d2:	f000 fd61 	bl	4498 <profile_dump>
	profile_dump(EV1);
    39d6:	2001      	movs	r0, #1
    39d8:	f000 fd5e 	bl	4498 <profile_dump>

	int total_mem = jit_mem_statistic(&vm) + get_ebpf_alloc_size();
    39dc:	f107 0314 	add.w	r3, r7, #20
    39e0:	4618      	mov	r0, r3
    39e2:	f015 ff70 	bl	198c6 <jit_mem_statistic>
    39e6:	4604      	mov	r4, r0
    39e8:	f000 fde6 	bl	45b8 <get_ebpf_alloc_size>
    39ec:	4603      	mov	r3, r0
    39ee:	4423      	add	r3, r4
    39f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	DEBUG_LOG("mem size: %d bytes\n", total_mem);
    39f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    39f4:	4807      	ldr	r0, [pc, #28]	; (3a14 <ebpf_eva+0x118>)
    39f6:	f015 fb66 	bl	190c6 <debug_log>
	DEBUG_LOG("finish----------------------------------------\n");
    39fa:	4807      	ldr	r0, [pc, #28]	; (3a18 <ebpf_eva+0x11c>)
    39fc:	f015 fb63 	bl	190c6 <debug_log>
}
    3a00:	bf00      	nop
    3a02:	3748      	adds	r7, #72	; 0x48
    3a04:	46bd      	mov	sp, r7
    3a06:	bdb0      	pop	{r4, r5, r7, pc}
    3a08:	0002cf14 	.word	0x0002cf14
    3a0c:	0002cf1c 	.word	0x0002cf1c
    3a10:	0002cf38 	.word	0x0002cf38
    3a14:	0002cf64 	.word	0x0002cf64
    3a18:	0002cf78 	.word	0x0002cf78

00003a1c <run_ebpf_eva>:


/*
Load prog to VM directly
*/
void run_ebpf_eva(int eid) {
    3a1c:	b580      	push	{r7, lr}
    3a1e:	b084      	sub	sp, #16
    3a20:	af00      	add	r7, sp, #0
    3a22:	6078      	str	r0, [r7, #4]
#ifdef EBPF_EVA
	int n = sizeof(test_funcs) / sizeof(ebpf_test_func);
    3a24:	230d      	movs	r3, #13
    3a26:	60fb      	str	r3, [r7, #12]
	if (eid < 0 || eid >= n) {
    3a28:	687b      	ldr	r3, [r7, #4]
    3a2a:	2b00      	cmp	r3, #0
    3a2c:	db03      	blt.n	3a36 <run_ebpf_eva+0x1a>
    3a2e:	687a      	ldr	r2, [r7, #4]
    3a30:	68fb      	ldr	r3, [r7, #12]
    3a32:	429a      	cmp	r2, r3
    3a34:	db05      	blt.n	3a42 <run_ebpf_eva+0x26>
		DEBUG_LOG("Invalide idx: %d (should be 0~%d)\n", eid, n);
    3a36:	68fa      	ldr	r2, [r7, #12]
    3a38:	6879      	ldr	r1, [r7, #4]
    3a3a:	4807      	ldr	r0, [pc, #28]	; (3a58 <run_ebpf_eva+0x3c>)
    3a3c:	f015 fb43 	bl	190c6 <debug_log>
		return;
    3a40:	e006      	b.n	3a50 <run_ebpf_eva+0x34>
	}
	ebpf_test_func func = test_funcs[eid];
    3a42:	4a06      	ldr	r2, [pc, #24]	; (3a5c <run_ebpf_eva+0x40>)
    3a44:	687b      	ldr	r3, [r7, #4]
    3a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3a4a:	60bb      	str	r3, [r7, #8]
	func();
    3a4c:	68bb      	ldr	r3, [r7, #8]
    3a4e:	4798      	blx	r3
#endif // EBPF_EVA
}
    3a50:	3710      	adds	r7, #16
    3a52:	46bd      	mov	sp, r7
    3a54:	bd80      	pop	{r7, pc}
    3a56:	bf00      	nop
    3a58:	0002cfa8 	.word	0x0002cfa8
    3a5c:	2000f70c 	.word	0x2000f70c

00003a60 <patch_num_eva>:
// 
struct patch_list {
	arraymap *patches;
};

void patch_num_eva(struct patch_list *plist, int n, int times) {
    3a60:	b580      	push	{r7, lr}
    3a62:	b08a      	sub	sp, #40	; 0x28
    3a64:	af00      	add	r7, sp, #0
    3a66:	60f8      	str	r0, [r7, #12]
    3a68:	60b9      	str	r1, [r7, #8]
    3a6a:	607a      	str	r2, [r7, #4]
	if (plist->patches == NULL) {
    3a6c:	68fb      	ldr	r3, [r7, #12]
    3a6e:	681b      	ldr	r3, [r3, #0]
    3a70:	2b00      	cmp	r3, #0
    3a72:	d105      	bne.n	3a80 <patch_num_eva+0x20>
		plist->patches = arraymap_new(72);
    3a74:	2048      	movs	r0, #72	; 0x48
    3a76:	f015 fda3 	bl	195c0 <arraymap_new>
    3a7a:	4602      	mov	r2, r0
    3a7c:	68fb      	ldr	r3, [r7, #12]
    3a7e:	601a      	str	r2, [r3, #0]
	}
	for (int i = 0; i < n; i++) {
    3a80:	2300      	movs	r3, #0
    3a82:	627b      	str	r3, [r7, #36]	; 0x24
    3a84:	e009      	b.n	3a9a <patch_num_eva+0x3a>
		arraymap_set(plist->patches, i, 1);
    3a86:	68fb      	ldr	r3, [r7, #12]
    3a88:	681b      	ldr	r3, [r3, #0]
    3a8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3a8c:	2201      	movs	r2, #1
    3a8e:	4618      	mov	r0, r3
    3a90:	f015 fdcf 	bl	19632 <arraymap_set>
	for (int i = 0; i < n; i++) {
    3a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3a96:	3301      	adds	r3, #1
    3a98:	627b      	str	r3, [r7, #36]	; 0x24
    3a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3a9c:	68bb      	ldr	r3, [r7, #8]
    3a9e:	429a      	cmp	r2, r3
    3aa0:	dbf1      	blt.n	3a86 <patch_num_eva+0x26>
	}
	int start = get_cur_tick();
    3aa2:	f015 fafc 	bl	1909e <get_cur_tick>
    3aa6:	61b8      	str	r0, [r7, #24]
	for (int t = 0; t < times; t++) {
    3aa8:	2300      	movs	r3, #0
    3aaa:	623b      	str	r3, [r7, #32]
    3aac:	e015      	b.n	3ada <patch_num_eva+0x7a>
		for (int i = 0; i < n; i++) {
    3aae:	2300      	movs	r3, #0
    3ab0:	61fb      	str	r3, [r7, #28]
    3ab2:	e00b      	b.n	3acc <patch_num_eva+0x6c>
			int val = arraymap_get(plist->patches, i);
    3ab4:	68fb      	ldr	r3, [r7, #12]
    3ab6:	681b      	ldr	r3, [r3, #0]
    3ab8:	69fa      	ldr	r2, [r7, #28]
    3aba:	4611      	mov	r1, r2
    3abc:	4618      	mov	r0, r3
    3abe:	f015 fe59 	bl	19774 <arraymap_get>
    3ac2:	4603      	mov	r3, r0
    3ac4:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < n; i++) {
    3ac6:	69fb      	ldr	r3, [r7, #28]
    3ac8:	3301      	adds	r3, #1
    3aca:	61fb      	str	r3, [r7, #28]
    3acc:	69fa      	ldr	r2, [r7, #28]
    3ace:	68bb      	ldr	r3, [r7, #8]
    3ad0:	429a      	cmp	r2, r3
    3ad2:	dbef      	blt.n	3ab4 <patch_num_eva+0x54>
	for (int t = 0; t < times; t++) {
    3ad4:	6a3b      	ldr	r3, [r7, #32]
    3ad6:	3301      	adds	r3, #1
    3ad8:	623b      	str	r3, [r7, #32]
    3ada:	6a3a      	ldr	r2, [r7, #32]
    3adc:	687b      	ldr	r3, [r7, #4]
    3ade:	429a      	cmp	r2, r3
    3ae0:	dbe5      	blt.n	3aae <patch_num_eva+0x4e>
			(void) val;
		}
	}
	int cycles = get_cur_tick() - start;
    3ae2:	f015 fadc 	bl	1909e <get_cur_tick>
    3ae6:	4602      	mov	r2, r0
    3ae8:	69bb      	ldr	r3, [r7, #24]
    3aea:	1ad3      	subs	r3, r2, r3
    3aec:	613b      	str	r3, [r7, #16]
	DEBUG_LOG("num: %d ti: %d\n", n, (int) (cycles2us(cycles / times / n) * 100));
    3aee:	693a      	ldr	r2, [r7, #16]
    3af0:	687b      	ldr	r3, [r7, #4]
    3af2:	fb92 f2f3 	sdiv	r2, r2, r3
    3af6:	68bb      	ldr	r3, [r7, #8]
    3af8:	fb92 f3f3 	sdiv	r3, r2, r3
    3afc:	4618      	mov	r0, r3
    3afe:	f015 fad5 	bl	190ac <cycles2us>
    3b02:	4603      	mov	r3, r0
    3b04:	4908      	ldr	r1, [pc, #32]	; (3b28 <patch_num_eva+0xc8>)
    3b06:	4618      	mov	r0, r3
    3b08:	f7fc fc58 	bl	3bc <__aeabi_fmul>
    3b0c:	4603      	mov	r3, r0
    3b0e:	4618      	mov	r0, r3
    3b10:	f7fc fda4 	bl	65c <__aeabi_f2iz>
    3b14:	4603      	mov	r3, r0
    3b16:	461a      	mov	r2, r3
    3b18:	68b9      	ldr	r1, [r7, #8]
    3b1a:	4804      	ldr	r0, [pc, #16]	; (3b2c <patch_num_eva+0xcc>)
    3b1c:	f015 fad3 	bl	190c6 <debug_log>
}
    3b20:	bf00      	nop
    3b22:	3728      	adds	r7, #40	; 0x28
    3b24:	46bd      	mov	sp, r7
    3b26:	bd80      	pop	{r7, pc}
    3b28:	42c80000 	.word	0x42c80000
    3b2c:	0002cff0 	.word	0x0002cff0

00003b30 <test_patch_dispatcher>:
num: 4 ti: 1.531250
num: 8 ti: 3.671875
num: 16 ti: 2.859375
num: 32 ti: 2.578125
*/
void test_patch_dispatcher() {
    3b30:	b580      	push	{r7, lr}
    3b32:	b084      	sub	sp, #16
    3b34:	af00      	add	r7, sp, #0
	// setup patch list
	profile_add_event("EV0");
    3b36:	4816      	ldr	r0, [pc, #88]	; (3b90 <test_patch_dispatcher+0x60>)
    3b38:	f000 fc40 	bl	43bc <profile_add_event>
	profile_start(EV0);
    3b3c:	2000      	movs	r0, #0
    3b3e:	f000 fc7d 	bl	443c <profile_start>
	profile_end(EV0);
    3b42:	2000      	movs	r0, #0
    3b44:	f000 fc8c 	bl	4460 <profile_end>
	profile_dump(EV0);
    3b48:	2000      	movs	r0, #0
    3b4a:	f000 fca5 	bl	4498 <profile_dump>
	struct patch_list plist;
	plist.patches = NULL;
    3b4e:	2300      	movs	r3, #0
    3b50:	607b      	str	r3, [r7, #4]
	int TI = 100;
    3b52:	2364      	movs	r3, #100	; 0x64
    3b54:	60bb      	str	r3, [r7, #8]
	for (int i = 1; i < 65; i += 4) {
    3b56:	2301      	movs	r3, #1
    3b58:	60fb      	str	r3, [r7, #12]
    3b5a:	e008      	b.n	3b6e <test_patch_dispatcher+0x3e>
		patch_num_eva(&plist, i, TI);
    3b5c:	1d3b      	adds	r3, r7, #4
    3b5e:	68ba      	ldr	r2, [r7, #8]
    3b60:	68f9      	ldr	r1, [r7, #12]
    3b62:	4618      	mov	r0, r3
    3b64:	f7ff ff7c 	bl	3a60 <patch_num_eva>
	for (int i = 1; i < 65; i += 4) {
    3b68:	68fb      	ldr	r3, [r7, #12]
    3b6a:	3304      	adds	r3, #4
    3b6c:	60fb      	str	r3, [r7, #12]
    3b6e:	68fb      	ldr	r3, [r7, #12]
    3b70:	2b40      	cmp	r3, #64	; 0x40
    3b72:	ddf3      	ble.n	3b5c <test_patch_dispatcher+0x2c>
	}
	patch_num_eva(&plist, 64, TI);
    3b74:	1d3b      	adds	r3, r7, #4
    3b76:	68ba      	ldr	r2, [r7, #8]
    3b78:	2140      	movs	r1, #64	; 0x40
    3b7a:	4618      	mov	r0, r3
    3b7c:	f7ff ff70 	bl	3a60 <patch_num_eva>
	arraymap_destroy(plist.patches);
    3b80:	687b      	ldr	r3, [r7, #4]
    3b82:	4618      	mov	r0, r3
    3b84:	f015 fd40 	bl	19608 <arraymap_destroy>
}
    3b88:	bf00      	nop
    3b8a:	3710      	adds	r7, #16
    3b8c:	46bd      	mov	sp, r7
    3b8e:	bd80      	pop	{r7, pc}
    3b90:	0002d000 	.word	0x0002d000

00003b94 <run_ebpf_test>:
	int t;
	//__atomic_test_and_set(&t, __ATOMIC_ACQUIRE);
	//__atomic_clear(&t, __ATOMIC_RELEASE);
}

void run_ebpf_test() {
    3b94:	b580      	push	{r7, lr}
    3b96:	af00      	add	r7, sp, #0
	DEBUG_LOG("run_ebpf_test >>>>>> \n");
    3b98:	4803      	ldr	r0, [pc, #12]	; (3ba8 <run_ebpf_test+0x14>)
    3b9a:	f015 fa94 	bl	190c6 <debug_log>
	// measure_print();
	test_patch_dispatcher();
    3b9e:	f7ff ffc7 	bl	3b30 <test_patch_dispatcher>
	// profile_start(eid);
	// DEBUG_LOG("this is a single printf:%d\n", eid);
	// profile_end(eid);
	// profile_dump(eid);
	// profile_exit();
}
    3ba2:	bf00      	nop
    3ba4:	bd80      	pop	{r7, pc}
    3ba6:	bf00      	nop
    3ba8:	0002d024 	.word	0x0002d024

00003bac <show_fixed_patch_desc>:
#else
static struct local_patch patch_list[] = {};
void setup_cve_list() {}
#endif

void show_fixed_patch_desc() {
    3bac:	b580      	push	{r7, lr}
    3bae:	b082      	sub	sp, #8
    3bb0:	af00      	add	r7, sp, #0
	int n = sizeof(patch_list) / sizeof(struct local_patch);
    3bb2:	2303      	movs	r3, #3
    3bb4:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
    3bb6:	2300      	movs	r3, #0
    3bb8:	607b      	str	r3, [r7, #4]
    3bba:	e00c      	b.n	3bd6 <show_fixed_patch_desc+0x2a>
		DEBUG_LOG("%d -> %s\n", i, patch_list[i].cve);
    3bbc:	4a0b      	ldr	r2, [pc, #44]	; (3bec <show_fixed_patch_desc+0x40>)
    3bbe:	687b      	ldr	r3, [r7, #4]
    3bc0:	011b      	lsls	r3, r3, #4
    3bc2:	4413      	add	r3, r2
    3bc4:	681b      	ldr	r3, [r3, #0]
    3bc6:	461a      	mov	r2, r3
    3bc8:	6879      	ldr	r1, [r7, #4]
    3bca:	4809      	ldr	r0, [pc, #36]	; (3bf0 <show_fixed_patch_desc+0x44>)
    3bcc:	f015 fa7b 	bl	190c6 <debug_log>
	for (int i = 0; i < n; i++) {
    3bd0:	687b      	ldr	r3, [r7, #4]
    3bd2:	3301      	adds	r3, #1
    3bd4:	607b      	str	r3, [r7, #4]
    3bd6:	687a      	ldr	r2, [r7, #4]
    3bd8:	683b      	ldr	r3, [r7, #0]
    3bda:	429a      	cmp	r2, r3
    3bdc:	dbee      	blt.n	3bbc <show_fixed_patch_desc+0x10>
	}
	setup_cve_list();
    3bde:	f015 fa1e 	bl	1901e <setup_cve_list>
}
    3be2:	bf00      	nop
    3be4:	3708      	adds	r7, #8
    3be6:	46bd      	mov	sp, r7
    3be8:	bd80      	pop	{r7, pc}
    3bea:	bf00      	nop
    3bec:	2000f9b4 	.word	0x2000f9b4
    3bf0:	0002d0b0 	.word	0x0002d0b0

00003bf4 <load_local_fixed_patch>:

void load_local_fixed_patch(int pid) {
    3bf4:	b580      	push	{r7, lr}
    3bf6:	b086      	sub	sp, #24
    3bf8:	af00      	add	r7, sp, #0
    3bfa:	6078      	str	r0, [r7, #4]
	int n = sizeof(patch_list) / sizeof(struct local_patch);
    3bfc:	2303      	movs	r3, #3
    3bfe:	613b      	str	r3, [r7, #16]
	if (pid > n) {
    3c00:	687a      	ldr	r2, [r7, #4]
    3c02:	693b      	ldr	r3, [r7, #16]
    3c04:	429a      	cmp	r2, r3
    3c06:	dd06      	ble.n	3c16 <load_local_fixed_patch+0x22>
		show_fixed_patch_desc();
    3c08:	f7ff ffd0 	bl	3bac <show_fixed_patch_desc>
		DEBUG_LOG("patch id should less than %d\n", n);
    3c0c:	6939      	ldr	r1, [r7, #16]
    3c0e:	4839      	ldr	r0, [pc, #228]	; (3cf4 <load_local_fixed_patch+0x100>)
    3c10:	f015 fa59 	bl	190c6 <debug_log>
		return;
    3c14:	e06b      	b.n	3cee <load_local_fixed_patch+0xfa>
	}

	if (!is_init) {
    3c16:	4b38      	ldr	r3, [pc, #224]	; (3cf8 <load_local_fixed_patch+0x104>)
    3c18:	781b      	ldrb	r3, [r3, #0]
    3c1a:	f083 0301 	eor.w	r3, r3, #1
    3c1e:	b2db      	uxtb	r3, r3
    3c20:	2b00      	cmp	r3, #0
    3c22:	d012      	beq.n	3c4a <load_local_fixed_patch+0x56>
		_desc = ebpf_calloc(1, sizeof(patch_desc));
    3c24:	2108      	movs	r1, #8
    3c26:	2001      	movs	r0, #1
    3c28:	f000 fcae 	bl	4588 <ebpf_calloc>
    3c2c:	4602      	mov	r2, r0
    3c2e:	4b33      	ldr	r3, [pc, #204]	; (3cfc <load_local_fixed_patch+0x108>)
    3c30:	601a      	str	r2, [r3, #0]
		_patch = ebpf_calloc(1, sizeof(ebpf_patch));
    3c32:	210c      	movs	r1, #12
    3c34:	2001      	movs	r0, #1
    3c36:	f000 fca7 	bl	4588 <ebpf_calloc>
    3c3a:	4602      	mov	r2, r0
    3c3c:	4b30      	ldr	r3, [pc, #192]	; (3d00 <load_local_fixed_patch+0x10c>)
    3c3e:	601a      	str	r2, [r3, #0]
		is_init = true;
    3c40:	4b2d      	ldr	r3, [pc, #180]	; (3cf8 <load_local_fixed_patch+0x104>)
    3c42:	2201      	movs	r2, #1
    3c44:	701a      	strb	r2, [r3, #0]
		init_patch_sys();
    3c46:	f000 fa5f 	bl	4108 <init_patch_sys>
	}

	DEBUG_LOG("start to load patch: %d\n", pid);
    3c4a:	6879      	ldr	r1, [r7, #4]
    3c4c:	482d      	ldr	r0, [pc, #180]	; (3d04 <load_local_fixed_patch+0x110>)
    3c4e:	f015 fa3a 	bl	190c6 <debug_log>
	struct local_patch *pt = &patch_list[pid];
    3c52:	687b      	ldr	r3, [r7, #4]
    3c54:	011b      	lsls	r3, r3, #4
    3c56:	4a2c      	ldr	r2, [pc, #176]	; (3d08 <load_local_fixed_patch+0x114>)
    3c58:	4413      	add	r3, r2
    3c5a:	60fb      	str	r3, [r7, #12]
	_desc->type = FixedPatchPoint;
    3c5c:	4b27      	ldr	r3, [pc, #156]	; (3cfc <load_local_fixed_patch+0x108>)
    3c5e:	681b      	ldr	r3, [r3, #0]
    3c60:	2200      	movs	r2, #0
    3c62:	f042 0201 	orr.w	r2, r2, #1
    3c66:	701a      	strb	r2, [r3, #0]
    3c68:	2200      	movs	r2, #0
    3c6a:	705a      	strb	r2, [r3, #1]
	_desc->code_len = 0; // code do not save in desc now
    3c6c:	4b23      	ldr	r3, [pc, #140]	; (3cfc <load_local_fixed_patch+0x108>)
    3c6e:	681b      	ldr	r3, [r3, #0]
    3c70:	2200      	movs	r2, #0
    3c72:	709a      	strb	r2, [r3, #2]
    3c74:	2200      	movs	r2, #0
    3c76:	70da      	strb	r2, [r3, #3]
	// inst addr should be divided by 4
	_desc->fixed_id = pt->loc;
    3c78:	4b20      	ldr	r3, [pc, #128]	; (3cfc <load_local_fixed_patch+0x108>)
    3c7a:	681b      	ldr	r3, [r3, #0]
    3c7c:	68fa      	ldr	r2, [r7, #12]
    3c7e:	6852      	ldr	r2, [r2, #4]
    3c80:	605a      	str	r2, [r3, #4]
	_patch->desc = _desc;
    3c82:	4b1f      	ldr	r3, [pc, #124]	; (3d00 <load_local_fixed_patch+0x10c>)
    3c84:	681b      	ldr	r3, [r3, #0]
    3c86:	4a1d      	ldr	r2, [pc, #116]	; (3cfc <load_local_fixed_patch+0x108>)
    3c88:	6812      	ldr	r2, [r2, #0]
    3c8a:	601a      	str	r2, [r3, #0]
	ebpf_vm *vm = _patch->vm;
    3c8c:	4b1c      	ldr	r3, [pc, #112]	; (3d00 <load_local_fixed_patch+0x10c>)
    3c8e:	681b      	ldr	r3, [r3, #0]
    3c90:	685b      	ldr	r3, [r3, #4]
    3c92:	617b      	str	r3, [r7, #20]
	if (vm == NULL) {
    3c94:	697b      	ldr	r3, [r7, #20]
    3c96:	2b00      	cmp	r3, #0
    3c98:	d108      	bne.n	3cac <load_local_fixed_patch+0xb8>
		vm = init_ebpf_vm(pt->code, pt->code_len);
    3c9a:	68fb      	ldr	r3, [r7, #12]
    3c9c:	689a      	ldr	r2, [r3, #8]
    3c9e:	68fb      	ldr	r3, [r7, #12]
    3ca0:	68db      	ldr	r3, [r3, #12]
    3ca2:	4619      	mov	r1, r3
    3ca4:	4610      	mov	r0, r2
    3ca6:	f015 fb84 	bl	193b2 <init_ebpf_vm>
    3caa:	6178      	str	r0, [r7, #20]
		// vm->use_jit = false;
	}
	ebpf_vm_set_inst(vm, pt->code, pt->code_len);
    3cac:	68fb      	ldr	r3, [r7, #12]
    3cae:	6899      	ldr	r1, [r3, #8]
    3cb0:	68fb      	ldr	r3, [r7, #12]
    3cb2:	68db      	ldr	r3, [r3, #12]
    3cb4:	461a      	mov	r2, r3
    3cb6:	6978      	ldr	r0, [r7, #20]
    3cb8:	f015 fb9a 	bl	193f0 <ebpf_vm_set_inst>
	vm->use_jit = false;
    3cbc:	697b      	ldr	r3, [r7, #20]
    3cbe:	2200      	movs	r2, #0
    3cc0:	751a      	strb	r2, [r3, #20]
	if (vm->use_jit) {
    3cc2:	697b      	ldr	r3, [r7, #20]
    3cc4:	7d1b      	ldrb	r3, [r3, #20]
    3cc6:	2b00      	cmp	r3, #0
    3cc8:	d002      	beq.n	3cd0 <load_local_fixed_patch+0xdc>
		gen_jit_code(vm);
    3cca:	6978      	ldr	r0, [r7, #20]
    3ccc:	f015 fdb6 	bl	1983c <gen_jit_code>
	}
	_patch->vm = vm;
    3cd0:	4b0b      	ldr	r3, [pc, #44]	; (3d00 <load_local_fixed_patch+0x10c>)
    3cd2:	681b      	ldr	r3, [r3, #0]
    3cd4:	697a      	ldr	r2, [r7, #20]
    3cd6:	605a      	str	r2, [r3, #4]
	load_local_patch_to_ctx(_patch);
    3cd8:	4b09      	ldr	r3, [pc, #36]	; (3d00 <load_local_fixed_patch+0x10c>)
    3cda:	681b      	ldr	r3, [r3, #0]
    3cdc:	4618      	mov	r0, r3
    3cde:	f000 fab9 	bl	4254 <load_local_patch_to_ctx>
	DEBUG_LOG("load fixed patch %s success!\n", pt->cve);
    3ce2:	68fb      	ldr	r3, [r7, #12]
    3ce4:	681b      	ldr	r3, [r3, #0]
    3ce6:	4619      	mov	r1, r3
    3ce8:	4808      	ldr	r0, [pc, #32]	; (3d0c <load_local_fixed_patch+0x118>)
    3cea:	f015 f9ec 	bl	190c6 <debug_log>
    3cee:	3718      	adds	r7, #24
    3cf0:	46bd      	mov	sp, r7
    3cf2:	bd80      	pop	{r7, pc}
    3cf4:	0002d0bc 	.word	0x0002d0bc
    3cf8:	2000623d 	.word	0x2000623d
    3cfc:	20002214 	.word	0x20002214
    3d00:	20002218 	.word	0x20002218
    3d04:	0002d0dc 	.word	0x0002d0dc
    3d08:	2000f9b4 	.word	0x2000f9b4
    3d0c:	0002d0f8 	.word	0x0002d0f8

00003d10 <test_fixed_patch_point>:
	} else {
		DEBUG_LOG("is still vulnerable!\n");
	}
}

void test_fixed_patch_point() {
    3d10:	b580      	push	{r7, lr}
    3d12:	af00      	add	r7, sp, #0
	// read_local_fixed_patch();
	profile_add_event("fixed patch");
    3d14:	4804      	ldr	r0, [pc, #16]	; (3d28 <test_fixed_patch_point+0x18>)
    3d16:	f000 fb51 	bl	43bc <profile_add_event>
	// call_buggy_function();
	call_dummy_buggy_MQTT_function();
    3d1a:	f000 f8ad 	bl	3e78 <call_dummy_buggy_MQTT_function>
	profile_dump(0);
    3d1e:	2000      	movs	r0, #0
    3d20:	f000 fbba 	bl	4498 <profile_dump>
}
    3d24:	bf00      	nop
    3d26:	bd80      	pop	{r7, pc}
    3d28:	0002d1cc 	.word	0x0002d1cc

00003d2c <dispatch_fixed_patch_point>:
	// uint32_t return_address; // real lr
	// uint32_t args4;
	// uint32_t args5;
} fixed_stack_frame;

void dispatch_fixed_patch_point(uint32_t sp) {
    3d2c:	b590      	push	{r4, r7, lr}
    3d2e:	b08d      	sub	sp, #52	; 0x34
    3d30:	af00      	add	r7, sp, #0
    3d32:	6078      	str	r0, [r7, #4]
#if 1
	uint32_t lr = *(uint32_t *) (sp + 4);
    3d34:	687b      	ldr	r3, [r7, #4]
    3d36:	3304      	adds	r3, #4
    3d38:	681b      	ldr	r3, [r3, #0]
    3d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t addr = (lr - 4) & (~0x3);
    3d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3d3e:	3b04      	subs	r3, #4
    3d40:	f023 0303 	bic.w	r3, r3, #3
    3d44:	62bb      	str	r3, [r7, #40]	; 0x28
	ebpf_patch *patch = get_fixed_patch_by_lr(addr);
    3d46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3d48:	f000 fa32 	bl	41b0 <get_fixed_patch_by_lr>
    3d4c:	6278      	str	r0, [r7, #36]	; 0x24
	// DEBUG_LOG("Patch instruction num %d\n", patch->vm->num_insts);
	uint64_t ret = 0;
    3d4e:	f04f 0300 	mov.w	r3, #0
    3d52:	f04f 0400 	mov.w	r4, #0
    3d56:	e9c7 3406 	strd	r3, r4, [r7, #24]
	DEBUG_LOG("try to get patch at: 0x%08x\n", addr);
    3d5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3d5c:	481c      	ldr	r0, [pc, #112]	; (3dd0 <dispatch_fixed_patch_point+0xa4>)
    3d5e:	f015 f9b2 	bl	190c6 <debug_log>
	fixed_stack_frame *args = (fixed_stack_frame *) sp;
    3d62:	687b      	ldr	r3, [r7, #4]
    3d64:	617b      	str	r3, [r7, #20]
	if (patch == NULL) {
    3d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3d68:	2b00      	cmp	r3, #0
    3d6a:	d107      	bne.n	3d7c <dispatch_fixed_patch_point+0x50>
		*(volatile uint32_t *) &(args->r0_1) = FIXED_OP_PASS;
    3d6c:	697b      	ldr	r3, [r7, #20]
    3d6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3d72:	601a      	str	r2, [r3, #0]
		DEBUG_LOG("Do not find Patch here\n");
    3d74:	4817      	ldr	r0, [pc, #92]	; (3dd4 <dispatch_fixed_patch_point+0xa8>)
    3d76:	f015 f9a6 	bl	190c6 <debug_log>
		return;
    3d7a:	e026      	b.n	3dca <dispatch_fixed_patch_point+0x9e>
	} 
	ret = run_ebpf_filter(patch, args, sizeof(fixed_stack_frame));
    3d7c:	2208      	movs	r2, #8
    3d7e:	6979      	ldr	r1, [r7, #20]
    3d80:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3d82:	f015 f961 	bl	19048 <run_ebpf_filter>
    3d86:	e9c7 0106 	strd	r0, r1, [r7, #24]
	// DEBUG_LOG("ret:0x%08x\n", (uint32_t)ret);
	uint32_t op = ret >> 32;
    3d8a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    3d8e:	f04f 0300 	mov.w	r3, #0
    3d92:	f04f 0400 	mov.w	r4, #0
    3d96:	0013      	movs	r3, r2
    3d98:	2400      	movs	r4, #0
    3d9a:	613b      	str	r3, [r7, #16]
	// DEBUG_LOG("op code:0x%08x \n", op);
	uint32_t ret_code = ret & 0x00000000ffffffff;
    3d9c:	69bb      	ldr	r3, [r7, #24]
    3d9e:	60fb      	str	r3, [r7, #12]
	// DEBUG_LOG("ret code:0x%08x \n", ret_code);
	//op = FILTER_DROP;
	if (op == FILTER_DROP) {
    3da0:	693b      	ldr	r3, [r7, #16]
    3da2:	2b01      	cmp	r3, #1
    3da4:	d103      	bne.n	3dae <dispatch_fixed_patch_point+0x82>
		*(volatile uint32_t *) &(args->r0_1) = 0; 
    3da6:	697b      	ldr	r3, [r7, #20]
    3da8:	2200      	movs	r2, #0
    3daa:	601a      	str	r2, [r3, #0]
		return;
    3dac:	e00d      	b.n	3dca <dispatch_fixed_patch_point+0x9e>
	} else if (op == FILTER_REDIRECT) {
    3dae:	693b      	ldr	r3, [r7, #16]
    3db0:	2b02      	cmp	r3, #2
    3db2:	d105      	bne.n	3dc0 <dispatch_fixed_patch_point+0x94>
		*(volatile uint32_t *) (args->lr) = ret_code;
    3db4:	697b      	ldr	r3, [r7, #20]
    3db6:	685b      	ldr	r3, [r3, #4]
    3db8:	461a      	mov	r2, r3
    3dba:	68fb      	ldr	r3, [r7, #12]
    3dbc:	6013      	str	r3, [r2, #0]
		TEST_LOG("FILTER_REDIRECT\n");
		return;
    3dbe:	e004      	b.n	3dca <dispatch_fixed_patch_point+0x9e>
	} else { // FILTER_PASS
		*(volatile uint32_t *) &(args->r0_1) = FIXED_OP_PASS;
    3dc0:	697b      	ldr	r3, [r7, #20]
    3dc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3dc6:	601a      	str	r2, [r3, #0]
		// TEST_LOG("FILTER_PASS\n");
		return;
    3dc8:	bf00      	nop
	int v5 = *(int*)(addr + 24);
	int v6 = *(int*)(addr + 28);
	DEBUG_LOG("0x%08x a=%d p1=0x%08x p2=0x%08x b=%d c=%d d=%d\n", addr, v1, p1, p2, v4, v5, v6);
	DEBUG_LOG("p1=%d p1-c=%c %d p2=%d p2-c=%c %d\n", p1->v1, p1->v2, p1->v3, p2->v1, p2->v2, p2->v3);
#endif
}
    3dca:	3734      	adds	r7, #52	; 0x34
    3dcc:	46bd      	mov	sp, r7
    3dce:	bd90      	pop	{r4, r7, pc}
    3dd0:	0002d1d8 	.word	0x0002d1d8
    3dd4:	0002d1f8 	.word	0x0002d1f8

00003dd8 <dummy_buggy_MQTT_packet_length_decode>:

static int dummy_buggy_MQTT_packet_length_decode(struct dummy_MQTT_buf_ctx *buf, uint32_t *length)
{
    3dd8:	b580      	push	{r7, lr}
    3dda:	b086      	sub	sp, #24
    3ddc:	af00      	add	r7, sp, #0
    3dde:	6078      	str	r0, [r7, #4]
    3de0:	6039      	str	r1, [r7, #0]
	PATCH_FUNCTION_ERR_CODE;
    3de2:	f015 f922 	bl	1902a <fixed_patch_point_hanlder>
    3de6:	6138      	str	r0, [r7, #16]
    3de8:	693b      	ldr	r3, [r7, #16]
    3dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    3dee:	d001      	beq.n	3df4 <dummy_buggy_MQTT_packet_length_decode+0x1c>
    3df0:	693b      	ldr	r3, [r7, #16]
    3df2:	e03b      	b.n	3e6c <dummy_buggy_MQTT_packet_length_decode+0x94>

	uint8_t shift = 0U;
    3df4:	2300      	movs	r3, #0
    3df6:	75fb      	strb	r3, [r7, #23]
	uint8_t bytes = 0U;
    3df8:	2300      	movs	r3, #0
    3dfa:	75bb      	strb	r3, [r7, #22]

	int ERR = -1;
    3dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3e00:	60fb      	str	r3, [r7, #12]

	*length = 0U;
    3e02:	683b      	ldr	r3, [r7, #0]
    3e04:	2200      	movs	r2, #0
    3e06:	601a      	str	r2, [r3, #0]
	do {
		if (bytes > 4) {
    3e08:	7dbb      	ldrb	r3, [r7, #22]
    3e0a:	2b04      	cmp	r3, #4
    3e0c:	d901      	bls.n	3e12 <dummy_buggy_MQTT_packet_length_decode+0x3a>
			return ERR;
    3e0e:	68fb      	ldr	r3, [r7, #12]
    3e10:	e02c      	b.n	3e6c <dummy_buggy_MQTT_packet_length_decode+0x94>
		}

		if (buf->cur >= buf->end) {
    3e12:	687b      	ldr	r3, [r7, #4]
    3e14:	681a      	ldr	r2, [r3, #0]
    3e16:	687b      	ldr	r3, [r7, #4]
    3e18:	685b      	ldr	r3, [r3, #4]
    3e1a:	429a      	cmp	r2, r3
    3e1c:	d301      	bcc.n	3e22 <dummy_buggy_MQTT_packet_length_decode+0x4a>
			return ERR;
    3e1e:	68fb      	ldr	r3, [r7, #12]
    3e20:	e024      	b.n	3e6c <dummy_buggy_MQTT_packet_length_decode+0x94>
		}

		*length += ((uint32_t)*(buf->cur) & 0x7f)
    3e22:	683b      	ldr	r3, [r7, #0]
    3e24:	681a      	ldr	r2, [r3, #0]
    3e26:	687b      	ldr	r3, [r7, #4]
    3e28:	681b      	ldr	r3, [r3, #0]
    3e2a:	781b      	ldrb	r3, [r3, #0]
    3e2c:	f003 017f 	and.w	r1, r3, #127	; 0x7f
								<< shift;
    3e30:	7dfb      	ldrb	r3, [r7, #23]
    3e32:	fa01 f303 	lsl.w	r3, r1, r3
		*length += ((uint32_t)*(buf->cur) & 0x7f)
    3e36:	441a      	add	r2, r3
    3e38:	683b      	ldr	r3, [r7, #0]
    3e3a:	601a      	str	r2, [r3, #0]
		shift += 7;
    3e3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3e40:	3307      	adds	r3, #7
    3e42:	b25b      	sxtb	r3, r3
    3e44:	75fb      	strb	r3, [r7, #23]
		bytes++;
    3e46:	7dbb      	ldrb	r3, [r7, #22]
    3e48:	3301      	adds	r3, #1
    3e4a:	75bb      	strb	r3, [r7, #22]
	} while ((*(buf->cur++) & 0x80) != 0U);
    3e4c:	687b      	ldr	r3, [r7, #4]
    3e4e:	681b      	ldr	r3, [r3, #0]
    3e50:	1c59      	adds	r1, r3, #1
    3e52:	687a      	ldr	r2, [r7, #4]
    3e54:	6011      	str	r1, [r2, #0]
    3e56:	781b      	ldrb	r3, [r3, #0]
    3e58:	b25b      	sxtb	r3, r3
    3e5a:	2b00      	cmp	r3, #0
    3e5c:	dbd4      	blt.n	3e08 <dummy_buggy_MQTT_packet_length_decode+0x30>

	DEBUG_LOG("dummy MQTT packet length:0x%08x \n", *length);
    3e5e:	683b      	ldr	r3, [r7, #0]
    3e60:	681b      	ldr	r3, [r3, #0]
    3e62:	4619      	mov	r1, r3
    3e64:	4803      	ldr	r0, [pc, #12]	; (3e74 <dummy_buggy_MQTT_packet_length_decode+0x9c>)
    3e66:	f015 f92e 	bl	190c6 <debug_log>

	return 0;
    3e6a:	2300      	movs	r3, #0
}
    3e6c:	4618      	mov	r0, r3
    3e6e:	3718      	adds	r7, #24
    3e70:	46bd      	mov	sp, r7
    3e72:	bd80      	pop	{r7, pc}
    3e74:	0002d210 	.word	0x0002d210

00003e78 <call_dummy_buggy_MQTT_function>:

static void call_dummy_buggy_MQTT_function() {
    3e78:	b580      	push	{r7, lr}
    3e7a:	b08a      	sub	sp, #40	; 0x28
    3e7c:	af00      	add	r7, sp, #0
	// setup test arguments
	DEBUG_LOG("addr ground-truth bug:0x%08x test:0x%08x \n", dummy_buggy_MQTT_packet_length_decode, call_dummy_buggy_MQTT_function);
    3e7e:	4a29      	ldr	r2, [pc, #164]	; (3f24 <call_dummy_buggy_MQTT_function+0xac>)
    3e80:	4929      	ldr	r1, [pc, #164]	; (3f28 <call_dummy_buggy_MQTT_function+0xb0>)
    3e82:	482a      	ldr	r0, [pc, #168]	; (3f2c <call_dummy_buggy_MQTT_function+0xb4>)
    3e84:	f015 f91f 	bl	190c6 <debug_log>
	
	uint8_t packet_buf[10];
	
	for (int i=0; i<4; ++i) packet_buf[i] = 0xff;
    3e88:	2300      	movs	r3, #0
    3e8a:	627b      	str	r3, [r7, #36]	; 0x24
    3e8c:	e008      	b.n	3ea0 <call_dummy_buggy_MQTT_function+0x28>
    3e8e:	f107 0210 	add.w	r2, r7, #16
    3e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e94:	4413      	add	r3, r2
    3e96:	22ff      	movs	r2, #255	; 0xff
    3e98:	701a      	strb	r2, [r3, #0]
    3e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e9c:	3301      	adds	r3, #1
    3e9e:	627b      	str	r3, [r7, #36]	; 0x24
    3ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3ea2:	2b03      	cmp	r3, #3
    3ea4:	ddf3      	ble.n	3e8e <call_dummy_buggy_MQTT_function+0x16>
	packet_buf[4] = 0x7f;
    3ea6:	237f      	movs	r3, #127	; 0x7f
    3ea8:	753b      	strb	r3, [r7, #20]
	for (int i=5; i<10; ++i) packet_buf[i] = 0;
    3eaa:	2305      	movs	r3, #5
    3eac:	623b      	str	r3, [r7, #32]
    3eae:	e008      	b.n	3ec2 <call_dummy_buggy_MQTT_function+0x4a>
    3eb0:	f107 0210 	add.w	r2, r7, #16
    3eb4:	6a3b      	ldr	r3, [r7, #32]
    3eb6:	4413      	add	r3, r2
    3eb8:	2200      	movs	r2, #0
    3eba:	701a      	strb	r2, [r3, #0]
    3ebc:	6a3b      	ldr	r3, [r7, #32]
    3ebe:	3301      	adds	r3, #1
    3ec0:	623b      	str	r3, [r7, #32]
    3ec2:	6a3b      	ldr	r3, [r7, #32]
    3ec4:	2b09      	cmp	r3, #9
    3ec6:	ddf3      	ble.n	3eb0 <call_dummy_buggy_MQTT_function+0x38>

	struct dummy_MQTT_buf_ctx dbc;
	dbc.cur = &packet_buf[0];
    3ec8:	f107 0310 	add.w	r3, r7, #16
    3ecc:	60bb      	str	r3, [r7, #8]
	dbc.end = &packet_buf[9];	
    3ece:	f107 0310 	add.w	r3, r7, #16
    3ed2:	3309      	adds	r3, #9
    3ed4:	60fb      	str	r3, [r7, #12]

	uint32_t pkt_length = 0;
    3ed6:	2300      	movs	r3, #0
    3ed8:	607b      	str	r3, [r7, #4]
	
	profile_start(0);
    3eda:	2000      	movs	r0, #0
    3edc:	f000 faae 	bl	443c <profile_start>
	int ret = dummy_buggy_MQTT_packet_length_decode(&dbc, &pkt_length);
    3ee0:	1d3a      	adds	r2, r7, #4
    3ee2:	f107 0308 	add.w	r3, r7, #8
    3ee6:	4611      	mov	r1, r2
    3ee8:	4618      	mov	r0, r3
    3eea:	f7ff ff75 	bl	3dd8 <dummy_buggy_MQTT_packet_length_decode>
    3eee:	61f8      	str	r0, [r7, #28]
	profile_end(0);
    3ef0:	2000      	movs	r0, #0
    3ef2:	f000 fab5 	bl	4460 <profile_end>

	DEBUG_LOG("Decoded MQTT packet length is %d\n", pkt_length);
    3ef6:	687b      	ldr	r3, [r7, #4]
    3ef8:	4619      	mov	r1, r3
    3efa:	480d      	ldr	r0, [pc, #52]	; (3f30 <call_dummy_buggy_MQTT_function+0xb8>)
    3efc:	f015 f8e3 	bl	190c6 <debug_log>

	DEBUG_LOG("Bug function return %d ", ret);
    3f00:	69f9      	ldr	r1, [r7, #28]
    3f02:	480c      	ldr	r0, [pc, #48]	; (3f34 <call_dummy_buggy_MQTT_function+0xbc>)
    3f04:	f015 f8df 	bl	190c6 <debug_log>
	if (ret != 0) {
    3f08:	69fb      	ldr	r3, [r7, #28]
    3f0a:	2b00      	cmp	r3, #0
    3f0c:	d003      	beq.n	3f16 <call_dummy_buggy_MQTT_function+0x9e>
		DEBUG_LOG("is still vulnerable!\n\n");
    3f0e:	480a      	ldr	r0, [pc, #40]	; (3f38 <call_dummy_buggy_MQTT_function+0xc0>)
    3f10:	f015 f8d9 	bl	190c6 <debug_log>
	} else {
		DEBUG_LOG("is fixed!\n");
	}
}
    3f14:	e002      	b.n	3f1c <call_dummy_buggy_MQTT_function+0xa4>
		DEBUG_LOG("is fixed!\n");
    3f16:	4809      	ldr	r0, [pc, #36]	; (3f3c <call_dummy_buggy_MQTT_function+0xc4>)
    3f18:	f015 f8d5 	bl	190c6 <debug_log>
}
    3f1c:	bf00      	nop
    3f1e:	3728      	adds	r7, #40	; 0x28
    3f20:	46bd      	mov	sp, r7
    3f22:	bd80      	pop	{r7, pc}
    3f24:	00003e79 	.word	0x00003e79
    3f28:	00003dd9 	.word	0x00003dd9
    3f2c:	0002d234 	.word	0x0002d234
    3f30:	0002d260 	.word	0x0002d260
    3f34:	0002d184 	.word	0x0002d184
    3f38:	0002d284 	.word	0x0002d284
    3f3c:	0002d19c 	.word	0x0002d19c

00003f40 <update_bits_filter>:

// global patch context
static bool ctx_init = false;
patch_context pctx;

static void update_bits_filter() {
    3f40:	b580      	push	{r7, lr}
    3f42:	b084      	sub	sp, #16
    3f44:	af00      	add	r7, sp, #0
	pctx.fbits_filter = 0;
    3f46:	4b24      	ldr	r3, [pc, #144]	; (3fd8 <update_bits_filter+0x98>)
    3f48:	2200      	movs	r2, #0
    3f4a:	605a      	str	r2, [r3, #4]

	for (int i = 0; i < pctx.fpatch_list.fiexed_patches->cur_size; i++) {
    3f4c:	2300      	movs	r3, #0
    3f4e:	60fb      	str	r3, [r7, #12]
    3f50:	e018      	b.n	3f84 <update_bits_filter+0x44>
		const ebpf_patch *patch = arraymap_iter_val(pctx.fpatch_list.fiexed_patches, i);
    3f52:	4b21      	ldr	r3, [pc, #132]	; (3fd8 <update_bits_filter+0x98>)
    3f54:	689b      	ldr	r3, [r3, #8]
    3f56:	68f9      	ldr	r1, [r7, #12]
    3f58:	4618      	mov	r0, r3
    3f5a:	f015 fc2a 	bl	197b2 <arraymap_iter_val>
    3f5e:	6078      	str	r0, [r7, #4]
		if (patch != NULL && patch->is_active) {
    3f60:	687b      	ldr	r3, [r7, #4]
    3f62:	2b00      	cmp	r3, #0
    3f64:	d00b      	beq.n	3f7e <update_bits_filter+0x3e>
    3f66:	687b      	ldr	r3, [r7, #4]
    3f68:	7a1b      	ldrb	r3, [r3, #8]
    3f6a:	2b00      	cmp	r3, #0
    3f6c:	d007      	beq.n	3f7e <update_bits_filter+0x3e>
			pctx.fbits_filter |= patch->desc->fixed_id;
    3f6e:	4b1a      	ldr	r3, [pc, #104]	; (3fd8 <update_bits_filter+0x98>)
    3f70:	685a      	ldr	r2, [r3, #4]
    3f72:	687b      	ldr	r3, [r7, #4]
    3f74:	681b      	ldr	r3, [r3, #0]
    3f76:	685b      	ldr	r3, [r3, #4]
    3f78:	4313      	orrs	r3, r2
    3f7a:	4a17      	ldr	r2, [pc, #92]	; (3fd8 <update_bits_filter+0x98>)
    3f7c:	6053      	str	r3, [r2, #4]
	for (int i = 0; i < pctx.fpatch_list.fiexed_patches->cur_size; i++) {
    3f7e:	68fb      	ldr	r3, [r7, #12]
    3f80:	3301      	adds	r3, #1
    3f82:	60fb      	str	r3, [r7, #12]
    3f84:	4b14      	ldr	r3, [pc, #80]	; (3fd8 <update_bits_filter+0x98>)
    3f86:	689b      	ldr	r3, [r3, #8]
    3f88:	885b      	ldrh	r3, [r3, #2]
    3f8a:	461a      	mov	r2, r3
    3f8c:	68fb      	ldr	r3, [r7, #12]
    3f8e:	4293      	cmp	r3, r2
    3f90:	dbdf      	blt.n	3f52 <update_bits_filter+0x12>
		}
	}

	pctx.dbits_filter_pc = pctx.dbits_filter_bpkt = 0;
    3f92:	4b11      	ldr	r3, [pc, #68]	; (3fd8 <update_bits_filter+0x98>)
    3f94:	2200      	movs	r2, #0
    3f96:	60da      	str	r2, [r3, #12]
    3f98:	4b0f      	ldr	r3, [pc, #60]	; (3fd8 <update_bits_filter+0x98>)
    3f9a:	68db      	ldr	r3, [r3, #12]
    3f9c:	4a0e      	ldr	r2, [pc, #56]	; (3fd8 <update_bits_filter+0x98>)
    3f9e:	6113      	str	r3, [r2, #16]
	dynamic_patch *dp = pctx.dpatch_list.next;
    3fa0:	4b0d      	ldr	r3, [pc, #52]	; (3fd8 <update_bits_filter+0x98>)
    3fa2:	699b      	ldr	r3, [r3, #24]
    3fa4:	60bb      	str	r3, [r7, #8]
	while (dp != NULL) {
    3fa6:	e010      	b.n	3fca <update_bits_filter+0x8a>
		pctx.dbits_filter_pc |= dp->pc_addr;
    3fa8:	4b0b      	ldr	r3, [pc, #44]	; (3fd8 <update_bits_filter+0x98>)
    3faa:	691a      	ldr	r2, [r3, #16]
    3fac:	68bb      	ldr	r3, [r7, #8]
    3fae:	68db      	ldr	r3, [r3, #12]
    3fb0:	4313      	orrs	r3, r2
    3fb2:	4a09      	ldr	r2, [pc, #36]	; (3fd8 <update_bits_filter+0x98>)
    3fb4:	6113      	str	r3, [r2, #16]
		pctx.dbits_filter_bpkt |= dp->inst_addr;
    3fb6:	4b08      	ldr	r3, [pc, #32]	; (3fd8 <update_bits_filter+0x98>)
    3fb8:	68da      	ldr	r2, [r3, #12]
    3fba:	68bb      	ldr	r3, [r7, #8]
    3fbc:	689b      	ldr	r3, [r3, #8]
    3fbe:	4313      	orrs	r3, r2
    3fc0:	4a05      	ldr	r2, [pc, #20]	; (3fd8 <update_bits_filter+0x98>)
    3fc2:	60d3      	str	r3, [r2, #12]
		dp = dp->next;
    3fc4:	68bb      	ldr	r3, [r7, #8]
    3fc6:	685b      	ldr	r3, [r3, #4]
    3fc8:	60bb      	str	r3, [r7, #8]
	while (dp != NULL) {
    3fca:	68bb      	ldr	r3, [r7, #8]
    3fcc:	2b00      	cmp	r3, #0
    3fce:	d1eb      	bne.n	3fa8 <update_bits_filter+0x68>
	}
}
    3fd0:	bf00      	nop
    3fd2:	3710      	adds	r7, #16
    3fd4:	46bd      	mov	sp, r7
    3fd6:	bd80      	pop	{r7, pc}
    3fd8:	2000221c 	.word	0x2000221c

00003fdc <active_patch>:
	return patch;
}

// should use lock
// read copy and update
static void active_patch(ebpf_patch *patch) {
    3fdc:	b580      	push	{r7, lr}
    3fde:	b082      	sub	sp, #8
    3fe0:	af00      	add	r7, sp, #0
    3fe2:	6078      	str	r0, [r7, #4]
	update_bits_filter();
    3fe4:	f7ff ffac 	bl	3f40 <update_bits_filter>
	if (patch->desc->type == FixedPatchPoint) {
    3fe8:	687b      	ldr	r3, [r7, #4]
    3fea:	681b      	ldr	r3, [r3, #0]
    3fec:	881b      	ldrh	r3, [r3, #0]
    3fee:	b29b      	uxth	r3, r3
    3ff0:	2b01      	cmp	r3, #1
    3ff2:	d108      	bne.n	4006 <active_patch+0x2a>
		pctx.fbits_filter |= patch->desc->fixed_id;
    3ff4:	4b0d      	ldr	r3, [pc, #52]	; (402c <active_patch+0x50>)
    3ff6:	685a      	ldr	r2, [r3, #4]
    3ff8:	687b      	ldr	r3, [r7, #4]
    3ffa:	681b      	ldr	r3, [r3, #0]
    3ffc:	685b      	ldr	r3, [r3, #4]
    3ffe:	4313      	orrs	r3, r2
    4000:	4a0a      	ldr	r2, [pc, #40]	; (402c <active_patch+0x50>)
    4002:	6053      	str	r3, [r2, #4]
    4004:	e00b      	b.n	401e <active_patch+0x42>
		// DEBUG_LOG("Active fixed patch idx: %d\n", patch->desc->fixed_id);
	} else if (patch->desc->type == DynamicPatchPoint) {
    4006:	687b      	ldr	r3, [r7, #4]
    4008:	681b      	ldr	r3, [r3, #0]
    400a:	881b      	ldrh	r3, [r3, #0]
    400c:	b29b      	uxth	r3, r3
    400e:	2b02      	cmp	r3, #2
    4010:	d105      	bne.n	401e <active_patch+0x42>
		// pctx.dbits_filter |= calc_bpkt_pc(patch->desc->inst_addr);
		add_hw_bkpt(patch->desc->inst_addr);
    4012:	687b      	ldr	r3, [r7, #4]
    4014:	681b      	ldr	r3, [r3, #0]
    4016:	685b      	ldr	r3, [r3, #4]
    4018:	4618      	mov	r0, r3
    401a:	f7fe fec9 	bl	2db0 <add_hw_bkpt>
	}
	
	patch->is_active = true;
    401e:	687b      	ldr	r3, [r7, #4]
    4020:	2201      	movs	r2, #1
    4022:	721a      	strb	r2, [r3, #8]
}
    4024:	bf00      	nop
    4026:	3708      	adds	r7, #8
    4028:	46bd      	mov	sp, r7
    402a:	bd80      	pop	{r7, pc}
    402c:	2000221c 	.word	0x2000221c

00004030 <add_dynamic_patch_to_ctx>:

static dynamic_patch* add_dynamic_patch_to_ctx(ebpf_patch *patch) {
    4030:	b580      	push	{r7, lr}
    4032:	b086      	sub	sp, #24
    4034:	af00      	add	r7, sp, #0
    4036:	6078      	str	r0, [r7, #4]
	dynamic_patch *dp = pctx.dpatch_list.next;
    4038:	4b26      	ldr	r3, [pc, #152]	; (40d4 <add_dynamic_patch_to_ctx+0xa4>)
    403a:	699b      	ldr	r3, [r3, #24]
    403c:	617b      	str	r3, [r7, #20]
	dynamic_patch *cur = NULL, *tail = &pctx.dpatch_list;
    403e:	2300      	movs	r3, #0
    4040:	613b      	str	r3, [r7, #16]
    4042:	4b25      	ldr	r3, [pc, #148]	; (40d8 <add_dynamic_patch_to_ctx+0xa8>)
    4044:	60fb      	str	r3, [r7, #12]
	int cnt = 0;
    4046:	2300      	movs	r3, #0
    4048:	60bb      	str	r3, [r7, #8]
	while (dp != NULL) {
    404a:	e011      	b.n	4070 <add_dynamic_patch_to_ctx+0x40>
		if (dp->inst_addr == patch->desc->inst_addr) {
    404c:	697b      	ldr	r3, [r7, #20]
    404e:	689a      	ldr	r2, [r3, #8]
    4050:	687b      	ldr	r3, [r7, #4]
    4052:	681b      	ldr	r3, [r3, #0]
    4054:	685b      	ldr	r3, [r3, #4]
    4056:	429a      	cmp	r2, r3
    4058:	d102      	bne.n	4060 <add_dynamic_patch_to_ctx+0x30>
			cur = dp;
    405a:	697b      	ldr	r3, [r7, #20]
    405c:	613b      	str	r3, [r7, #16]
			break;
    405e:	e00a      	b.n	4076 <add_dynamic_patch_to_ctx+0x46>
		}
		tail = dp;
    4060:	697b      	ldr	r3, [r7, #20]
    4062:	60fb      	str	r3, [r7, #12]
		dp = dp->next;
    4064:	697b      	ldr	r3, [r7, #20]
    4066:	685b      	ldr	r3, [r3, #4]
    4068:	617b      	str	r3, [r7, #20]
		cnt++;
    406a:	68bb      	ldr	r3, [r7, #8]
    406c:	3301      	adds	r3, #1
    406e:	60bb      	str	r3, [r7, #8]
	while (dp != NULL) {
    4070:	697b      	ldr	r3, [r7, #20]
    4072:	2b00      	cmp	r3, #0
    4074:	d1ea      	bne.n	404c <add_dynamic_patch_to_ctx+0x1c>
	}
	if (cur == NULL) {
    4076:	693b      	ldr	r3, [r7, #16]
    4078:	2b00      	cmp	r3, #0
    407a:	d10f      	bne.n	409c <add_dynamic_patch_to_ctx+0x6c>
		if (cnt > MAX_DP_NUM) { // overwrite the last one
    407c:	68bb      	ldr	r3, [r7, #8]
    407e:	2b06      	cmp	r3, #6
    4080:	dd05      	ble.n	408e <add_dynamic_patch_to_ctx+0x5e>
			//return NULL;
			DEBUG_LOG("Warning: dynamic patch exceed the maximum number(6).\n");
    4082:	4816      	ldr	r0, [pc, #88]	; (40dc <add_dynamic_patch_to_ctx+0xac>)
    4084:	f015 f81f 	bl	190c6 <debug_log>
			cur = tail;
    4088:	68fb      	ldr	r3, [r7, #12]
    408a:	613b      	str	r3, [r7, #16]
    408c:	e006      	b.n	409c <add_dynamic_patch_to_ctx+0x6c>
		} else {
			cur = ebpf_malloc(sizeof(dynamic_patch));
    408e:	2010      	movs	r0, #16
    4090:	f000 fa28 	bl	44e4 <ebpf_malloc>
    4094:	6138      	str	r0, [r7, #16]
			tail->next = cur;
    4096:	68fb      	ldr	r3, [r7, #12]
    4098:	693a      	ldr	r2, [r7, #16]
    409a:	605a      	str	r2, [r3, #4]
		}
	}
	cur->next = NULL;
    409c:	693b      	ldr	r3, [r7, #16]
    409e:	2200      	movs	r2, #0
    40a0:	605a      	str	r2, [r3, #4]
	cur->inst_addr = calc_bpkt_addr(patch->desc->inst_addr);
    40a2:	687b      	ldr	r3, [r7, #4]
    40a4:	681b      	ldr	r3, [r3, #0]
    40a6:	685b      	ldr	r3, [r3, #4]
    40a8:	4618      	mov	r0, r3
    40aa:	f014 feeb 	bl	18e84 <calc_bpkt_addr>
    40ae:	4602      	mov	r2, r0
    40b0:	693b      	ldr	r3, [r7, #16]
    40b2:	609a      	str	r2, [r3, #8]
	cur->pc_addr = calc_bpkt_pc(cur->inst_addr);
    40b4:	693b      	ldr	r3, [r7, #16]
    40b6:	689b      	ldr	r3, [r3, #8]
    40b8:	4618      	mov	r0, r3
    40ba:	f015 f83a 	bl	19132 <calc_bpkt_pc>
    40be:	4602      	mov	r2, r0
    40c0:	693b      	ldr	r3, [r7, #16]
    40c2:	60da      	str	r2, [r3, #12]
	cur->patch = patch;
    40c4:	693b      	ldr	r3, [r7, #16]
    40c6:	687a      	ldr	r2, [r7, #4]
    40c8:	601a      	str	r2, [r3, #0]
	return cur;
    40ca:	693b      	ldr	r3, [r7, #16]
}
    40cc:	4618      	mov	r0, r3
    40ce:	3718      	adds	r7, #24
    40d0:	46bd      	mov	sp, r7
    40d2:	bd80      	pop	{r7, pc}
    40d4:	2000221c 	.word	0x2000221c
    40d8:	20002230 	.word	0x20002230
    40dc:	0002d29c 	.word	0x0002d29c

000040e0 <add_fixed_patch_to_ctx>:

static void add_fixed_patch_to_ctx(ebpf_patch *patch) {
    40e0:	b580      	push	{r7, lr}
    40e2:	b082      	sub	sp, #8
    40e4:	af00      	add	r7, sp, #0
    40e6:	6078      	str	r0, [r7, #4]
	arraymap_set(pctx.fpatch_list.fiexed_patches, patch->desc->fixed_id, patch);
    40e8:	4b06      	ldr	r3, [pc, #24]	; (4104 <add_fixed_patch_to_ctx+0x24>)
    40ea:	6898      	ldr	r0, [r3, #8]
    40ec:	687b      	ldr	r3, [r7, #4]
    40ee:	681b      	ldr	r3, [r3, #0]
    40f0:	685b      	ldr	r3, [r3, #4]
    40f2:	687a      	ldr	r2, [r7, #4]
    40f4:	4619      	mov	r1, r3
    40f6:	f015 fa9c 	bl	19632 <arraymap_set>
}
    40fa:	bf00      	nop
    40fc:	3708      	adds	r7, #8
    40fe:	46bd      	mov	sp, r7
    4100:	bd80      	pop	{r7, pc}
    4102:	bf00      	nop
    4104:	2000221c 	.word	0x2000221c

00004108 <init_patch_sys>:
		add_dynamic_patch_to_ctx(patch);
	}
	return patch;
}

void init_patch_sys(void) {
    4108:	b580      	push	{r7, lr}
    410a:	b082      	sub	sp, #8
    410c:	af00      	add	r7, sp, #0
	if (ctx_init) {
    410e:	4b10      	ldr	r3, [pc, #64]	; (4150 <init_patch_sys+0x48>)
    4110:	781b      	ldrb	r3, [r3, #0]
    4112:	2b00      	cmp	r3, #0
    4114:	d118      	bne.n	4148 <init_patch_sys+0x40>
		return;
	}
	int v = 1;
    4116:	2301      	movs	r3, #1
    4118:	607b      	str	r3, [r7, #4]
	DEBUG_LOG("init_patch_sys: %d\n", v);
    411a:	6879      	ldr	r1, [r7, #4]
    411c:	480d      	ldr	r0, [pc, #52]	; (4154 <init_patch_sys+0x4c>)
    411e:	f014 ffd2 	bl	190c6 <debug_log>
	const int init_size = 8;
    4122:	2308      	movs	r3, #8
    4124:	603b      	str	r3, [r7, #0]
	memset(&pctx, 0, sizeof(pctx));
    4126:	2224      	movs	r2, #36	; 0x24
    4128:	2100      	movs	r1, #0
    412a:	480b      	ldr	r0, [pc, #44]	; (4158 <init_patch_sys+0x50>)
    412c:	f7fd ffc4 	bl	20b8 <memset>
	pctx.fpatch_list.fiexed_patches = arraymap_new(4);
    4130:	2004      	movs	r0, #4
    4132:	f015 fa45 	bl	195c0 <arraymap_new>
    4136:	4602      	mov	r2, r0
    4138:	4b07      	ldr	r3, [pc, #28]	; (4158 <init_patch_sys+0x50>)
    413a:	609a      	str	r2, [r3, #8]
	update_bits_filter();
    413c:	f7ff ff00 	bl	3f40 <update_bits_filter>
	ctx_init = true;
    4140:	4b03      	ldr	r3, [pc, #12]	; (4150 <init_patch_sys+0x48>)
    4142:	2201      	movs	r2, #1
    4144:	701a      	strb	r2, [r3, #0]
    4146:	e000      	b.n	414a <init_patch_sys+0x42>
		return;
    4148:	bf00      	nop
}
    414a:	3708      	adds	r7, #8
    414c:	46bd      	mov	sp, r7
    414e:	bd80      	pop	{r7, pc}
    4150:	2000623e 	.word	0x2000623e
    4154:	0002d2d4 	.word	0x0002d2d4
    4158:	2000221c 	.word	0x2000221c

0000415c <show_all_patches>:
		ebpf_free(patch->vm);
		ebpf_free(patch);
	}
}

void show_all_patches(void) {
    415c:	b580      	push	{r7, lr}
    415e:	b082      	sub	sp, #8
    4160:	af00      	add	r7, sp, #0
	DEBUG_LOG("Dynamic Patch List:\n");
    4162:	480f      	ldr	r0, [pc, #60]	; (41a0 <show_all_patches+0x44>)
    4164:	f014 ffaf 	bl	190c6 <debug_log>
	dynamic_patch *dp = pctx.dpatch_list.next;
    4168:	4b0e      	ldr	r3, [pc, #56]	; (41a4 <show_all_patches+0x48>)
    416a:	699b      	ldr	r3, [r3, #24]
    416c:	607b      	str	r3, [r7, #4]
	while (dp != NULL) {
    416e:	e00c      	b.n	418a <show_all_patches+0x2e>
		DEBUG_LOG("dypk inst_addr: 0x%08x pc_addr: 0x%08x is_active: %d\n", dp->inst_addr, dp->pc_addr, dp->patch->is_active);
    4170:	687b      	ldr	r3, [r7, #4]
    4172:	6899      	ldr	r1, [r3, #8]
    4174:	687b      	ldr	r3, [r7, #4]
    4176:	68da      	ldr	r2, [r3, #12]
    4178:	687b      	ldr	r3, [r7, #4]
    417a:	681b      	ldr	r3, [r3, #0]
    417c:	7a1b      	ldrb	r3, [r3, #8]
    417e:	480a      	ldr	r0, [pc, #40]	; (41a8 <show_all_patches+0x4c>)
    4180:	f014 ffa1 	bl	190c6 <debug_log>
		dp = dp->next;
    4184:	687b      	ldr	r3, [r7, #4]
    4186:	685b      	ldr	r3, [r3, #4]
    4188:	607b      	str	r3, [r7, #4]
	while (dp != NULL) {
    418a:	687b      	ldr	r3, [r7, #4]
    418c:	2b00      	cmp	r3, #0
    418e:	d1ef      	bne.n	4170 <show_all_patches+0x14>
	}

	DEBUG_LOG("Fixed Patch List:\n");
    4190:	4806      	ldr	r0, [pc, #24]	; (41ac <show_all_patches+0x50>)
    4192:	f014 ff98 	bl	190c6 <debug_log>
}
    4196:	bf00      	nop
    4198:	3708      	adds	r7, #8
    419a:	46bd      	mov	sp, r7
    419c:	bd80      	pop	{r7, pc}
    419e:	bf00      	nop
    41a0:	0002d2e8 	.word	0x0002d2e8
    41a4:	2000221c 	.word	0x2000221c
    41a8:	0002d300 	.word	0x0002d300
    41ac:	0002d338 	.word	0x0002d338

000041b0 <get_fixed_patch_by_lr>:
	ebpf_patch *patch = add_ebpf_patch(desc);
	// TODO: use lock to load to memory and active patch
	active_patch(patch);
}

ebpf_patch* get_fixed_patch_by_lr(uint32_t lr) {
    41b0:	b580      	push	{r7, lr}
    41b2:	b084      	sub	sp, #16
    41b4:	af00      	add	r7, sp, #0
    41b6:	6078      	str	r0, [r7, #4]
	if ((pctx.fbits_filter & lr) != lr) {
    41b8:	4b0f      	ldr	r3, [pc, #60]	; (41f8 <get_fixed_patch_by_lr+0x48>)
    41ba:	685a      	ldr	r2, [r3, #4]
    41bc:	687b      	ldr	r3, [r7, #4]
    41be:	4013      	ands	r3, r2
    41c0:	687a      	ldr	r2, [r7, #4]
    41c2:	429a      	cmp	r2, r3
    41c4:	d001      	beq.n	41ca <get_fixed_patch_by_lr+0x1a>
		return NULL;
    41c6:	2300      	movs	r3, #0
    41c8:	e011      	b.n	41ee <get_fixed_patch_by_lr+0x3e>
	}
	ebpf_patch *patch = arraymap_get(pctx.fpatch_list.fiexed_patches, lr);
    41ca:	4b0b      	ldr	r3, [pc, #44]	; (41f8 <get_fixed_patch_by_lr+0x48>)
    41cc:	689b      	ldr	r3, [r3, #8]
    41ce:	687a      	ldr	r2, [r7, #4]
    41d0:	4611      	mov	r1, r2
    41d2:	4618      	mov	r0, r3
    41d4:	f015 face 	bl	19774 <arraymap_get>
    41d8:	60f8      	str	r0, [r7, #12]
	if (patch != NULL && patch->is_active) {
    41da:	68fb      	ldr	r3, [r7, #12]
    41dc:	2b00      	cmp	r3, #0
    41de:	d005      	beq.n	41ec <get_fixed_patch_by_lr+0x3c>
    41e0:	68fb      	ldr	r3, [r7, #12]
    41e2:	7a1b      	ldrb	r3, [r3, #8]
    41e4:	2b00      	cmp	r3, #0
    41e6:	d001      	beq.n	41ec <get_fixed_patch_by_lr+0x3c>
		return patch;
    41e8:	68fb      	ldr	r3, [r7, #12]
    41ea:	e000      	b.n	41ee <get_fixed_patch_by_lr+0x3e>
	}
	return NULL;
    41ec:	2300      	movs	r3, #0
}
    41ee:	4618      	mov	r0, r3
    41f0:	3710      	adds	r7, #16
    41f2:	46bd      	mov	sp, r7
    41f4:	bd80      	pop	{r7, pc}
    41f6:	bf00      	nop
    41f8:	2000221c 	.word	0x2000221c

000041fc <get_dynamic_patch_by_bpkt>:
		dp = dp->next;
	}
	return NULL;
}

ebpf_patch* get_dynamic_patch_by_bpkt(uint32_t loc) {
    41fc:	b480      	push	{r7}
    41fe:	b085      	sub	sp, #20
    4200:	af00      	add	r7, sp, #0
    4202:	6078      	str	r0, [r7, #4]
if ((pctx.dbits_filter_bpkt & loc) != loc) {
    4204:	4b12      	ldr	r3, [pc, #72]	; (4250 <get_dynamic_patch_by_bpkt+0x54>)
    4206:	68da      	ldr	r2, [r3, #12]
    4208:	687b      	ldr	r3, [r7, #4]
    420a:	4013      	ands	r3, r2
    420c:	687a      	ldr	r2, [r7, #4]
    420e:	429a      	cmp	r2, r3
    4210:	d001      	beq.n	4216 <get_dynamic_patch_by_bpkt+0x1a>
		return NULL;
    4212:	2300      	movs	r3, #0
    4214:	e017      	b.n	4246 <get_dynamic_patch_by_bpkt+0x4a>
	}
	dynamic_patch *dp = pctx.dpatch_list.next;
    4216:	4b0e      	ldr	r3, [pc, #56]	; (4250 <get_dynamic_patch_by_bpkt+0x54>)
    4218:	699b      	ldr	r3, [r3, #24]
    421a:	60fb      	str	r3, [r7, #12]
	while (dp != NULL) {
    421c:	e00f      	b.n	423e <get_dynamic_patch_by_bpkt+0x42>
		if (dp->inst_addr == loc && dp->patch->is_active) {
    421e:	68fb      	ldr	r3, [r7, #12]
    4220:	689b      	ldr	r3, [r3, #8]
    4222:	687a      	ldr	r2, [r7, #4]
    4224:	429a      	cmp	r2, r3
    4226:	d107      	bne.n	4238 <get_dynamic_patch_by_bpkt+0x3c>
    4228:	68fb      	ldr	r3, [r7, #12]
    422a:	681b      	ldr	r3, [r3, #0]
    422c:	7a1b      	ldrb	r3, [r3, #8]
    422e:	2b00      	cmp	r3, #0
    4230:	d002      	beq.n	4238 <get_dynamic_patch_by_bpkt+0x3c>
			return dp->patch;
    4232:	68fb      	ldr	r3, [r7, #12]
    4234:	681b      	ldr	r3, [r3, #0]
    4236:	e006      	b.n	4246 <get_dynamic_patch_by_bpkt+0x4a>
		}
		dp = dp->next;
    4238:	68fb      	ldr	r3, [r7, #12]
    423a:	685b      	ldr	r3, [r3, #4]
    423c:	60fb      	str	r3, [r7, #12]
	while (dp != NULL) {
    423e:	68fb      	ldr	r3, [r7, #12]
    4240:	2b00      	cmp	r3, #0
    4242:	d1ec      	bne.n	421e <get_dynamic_patch_by_bpkt+0x22>
	}
	return NULL;
    4244:	2300      	movs	r3, #0
}
    4246:	4618      	mov	r0, r3
    4248:	3714      	adds	r7, #20
    424a:	46bd      	mov	sp, r7
    424c:	bc80      	pop	{r7}
    424e:	4770      	bx	lr
    4250:	2000221c 	.word	0x2000221c

00004254 <load_local_patch_to_ctx>:
		}
	}
	return NULL;
}

void load_local_patch_to_ctx(ebpf_patch *patch) {
    4254:	b580      	push	{r7, lr}
    4256:	b084      	sub	sp, #16
    4258:	af00      	add	r7, sp, #0
    425a:	6078      	str	r0, [r7, #4]
	if (patch->desc->type == FixedPatchPoint) { 
    425c:	687b      	ldr	r3, [r7, #4]
    425e:	681b      	ldr	r3, [r3, #0]
    4260:	881b      	ldrh	r3, [r3, #0]
    4262:	b29b      	uxth	r3, r3
    4264:	2b01      	cmp	r3, #1
    4266:	d106      	bne.n	4276 <load_local_patch_to_ctx+0x22>
		add_fixed_patch_to_ctx(patch);
    4268:	6878      	ldr	r0, [r7, #4]
    426a:	f7ff ff39 	bl	40e0 <add_fixed_patch_to_ctx>
		active_patch(patch);
    426e:	6878      	ldr	r0, [r7, #4]
    4270:	f7ff feb4 	bl	3fdc <active_patch>
			dp->pc_addr = calc_bpkt_pc(dp->inst_addr);
		}
		DEBUG_LOG("dynamic patch: pc=0x%08x inst=0x%08x\n", dp->pc_addr, dp->inst_addr);
		active_patch(patch);
	}
}
    4274:	e03d      	b.n	42f2 <load_local_patch_to_ctx+0x9e>
	} else if (patch->desc->type == DynamicPatchPoint) {
    4276:	687b      	ldr	r3, [r7, #4]
    4278:	681b      	ldr	r3, [r3, #0]
    427a:	881b      	ldrh	r3, [r3, #0]
    427c:	b29b      	uxth	r3, r3
    427e:	2b02      	cmp	r3, #2
    4280:	d137      	bne.n	42f2 <load_local_patch_to_ctx+0x9e>
		dynamic_patch *dp = pctx.dpatch_list.next;
    4282:	4b1e      	ldr	r3, [pc, #120]	; (42fc <load_local_patch_to_ctx+0xa8>)
    4284:	699b      	ldr	r3, [r3, #24]
    4286:	60fb      	str	r3, [r7, #12]
		bool need_insert = true;
    4288:	2301      	movs	r3, #1
    428a:	72fb      	strb	r3, [r7, #11]
		while (dp != NULL) {
    428c:	e00a      	b.n	42a4 <load_local_patch_to_ctx+0x50>
			if (dp->patch == patch) {
    428e:	68fb      	ldr	r3, [r7, #12]
    4290:	681b      	ldr	r3, [r3, #0]
    4292:	687a      	ldr	r2, [r7, #4]
    4294:	429a      	cmp	r2, r3
    4296:	d102      	bne.n	429e <load_local_patch_to_ctx+0x4a>
				need_insert = false;
    4298:	2300      	movs	r3, #0
    429a:	72fb      	strb	r3, [r7, #11]
				break;
    429c:	e005      	b.n	42aa <load_local_patch_to_ctx+0x56>
			dp = dp->next;
    429e:	68fb      	ldr	r3, [r7, #12]
    42a0:	685b      	ldr	r3, [r3, #4]
    42a2:	60fb      	str	r3, [r7, #12]
		while (dp != NULL) {
    42a4:	68fb      	ldr	r3, [r7, #12]
    42a6:	2b00      	cmp	r3, #0
    42a8:	d1f1      	bne.n	428e <load_local_patch_to_ctx+0x3a>
		if (need_insert) {
    42aa:	7afb      	ldrb	r3, [r7, #11]
    42ac:	2b00      	cmp	r3, #0
    42ae:	d004      	beq.n	42ba <load_local_patch_to_ctx+0x66>
			dp = add_dynamic_patch_to_ctx(patch);
    42b0:	6878      	ldr	r0, [r7, #4]
    42b2:	f7ff febd 	bl	4030 <add_dynamic_patch_to_ctx>
    42b6:	60f8      	str	r0, [r7, #12]
    42b8:	e010      	b.n	42dc <load_local_patch_to_ctx+0x88>
			dp->inst_addr = calc_bpkt_addr(patch->desc->inst_addr);
    42ba:	687b      	ldr	r3, [r7, #4]
    42bc:	681b      	ldr	r3, [r3, #0]
    42be:	685b      	ldr	r3, [r3, #4]
    42c0:	4618      	mov	r0, r3
    42c2:	f014 fddf 	bl	18e84 <calc_bpkt_addr>
    42c6:	4602      	mov	r2, r0
    42c8:	68fb      	ldr	r3, [r7, #12]
    42ca:	609a      	str	r2, [r3, #8]
			dp->pc_addr = calc_bpkt_pc(dp->inst_addr);
    42cc:	68fb      	ldr	r3, [r7, #12]
    42ce:	689b      	ldr	r3, [r3, #8]
    42d0:	4618      	mov	r0, r3
    42d2:	f014 ff2e 	bl	19132 <calc_bpkt_pc>
    42d6:	4602      	mov	r2, r0
    42d8:	68fb      	ldr	r3, [r7, #12]
    42da:	60da      	str	r2, [r3, #12]
		DEBUG_LOG("dynamic patch: pc=0x%08x inst=0x%08x\n", dp->pc_addr, dp->inst_addr);
    42dc:	68fb      	ldr	r3, [r7, #12]
    42de:	68d9      	ldr	r1, [r3, #12]
    42e0:	68fb      	ldr	r3, [r7, #12]
    42e2:	689b      	ldr	r3, [r3, #8]
    42e4:	461a      	mov	r2, r3
    42e6:	4806      	ldr	r0, [pc, #24]	; (4300 <load_local_patch_to_ctx+0xac>)
    42e8:	f014 feed 	bl	190c6 <debug_log>
		active_patch(patch);
    42ec:	6878      	ldr	r0, [r7, #4]
    42ee:	f7ff fe75 	bl	3fdc <active_patch>
}
    42f2:	bf00      	nop
    42f4:	3710      	adds	r7, #16
    42f6:	46bd      	mov	sp, r7
    42f8:	bd80      	pop	{r7, pc}
    42fa:	bf00      	nop
    42fc:	2000221c 	.word	0x2000221c
    4300:	0002d360 	.word	0x0002d360

00004304 <cycles_to_us>:
static char *EV0_TAG = "EV0";
static char *EV1_TAG = "EV1";
static bool profiler_is_init = false;
static uint32_t ticks_per_us = 1000;

static inline float cycles_to_us(uint32_t cycles) {
    4304:	b590      	push	{r4, r7, lr}
    4306:	b083      	sub	sp, #12
    4308:	af00      	add	r7, sp, #0
    430a:	6078      	str	r0, [r7, #4]
	return cycles / (float) ticks_per_us;
    430c:	6878      	ldr	r0, [r7, #4]
    430e:	f7fb fffd 	bl	30c <__aeabi_ui2f>
    4312:	4604      	mov	r4, r0
    4314:	4b07      	ldr	r3, [pc, #28]	; (4334 <cycles_to_us+0x30>)
    4316:	681b      	ldr	r3, [r3, #0]
    4318:	4618      	mov	r0, r3
    431a:	f7fb fff7 	bl	30c <__aeabi_ui2f>
    431e:	4603      	mov	r3, r0
    4320:	4619      	mov	r1, r3
    4322:	4620      	mov	r0, r4
    4324:	f7fc f8fe 	bl	524 <__aeabi_fdiv>
    4328:	4603      	mov	r3, r0
}
    432a:	4618      	mov	r0, r3
    432c:	370c      	adds	r7, #12
    432e:	46bd      	mov	sp, r7
    4330:	bd90      	pop	{r4, r7, pc}
    4332:	bf00      	nop
    4334:	2000f9ec 	.word	0x2000f9ec

00004338 <dwt_init>:
#define DWT_CTRL (volatile uint32_t *) (0xE0001000) // page e156
#define DWT_CYCCNT (volatile uint32_t *) (0xE0001004) // page e156
#define MSK_DEMCR_TRCENA (1 << 24) // page 464
#define MSK_DWT_CYCCNTENA (1 << 0) // page e159

static inline void dwt_init() {
    4338:	b480      	push	{r7}
    433a:	af00      	add	r7, sp, #0
	ticks_per_us = SYSCoreClock / 1000000;
    433c:	4b0a      	ldr	r3, [pc, #40]	; (4368 <dwt_init+0x30>)
    433e:	2240      	movs	r2, #64	; 0x40
    4340:	601a      	str	r2, [r3, #0]
	*COREDEBUG_DEMCR |= MSK_DEMCR_TRCENA;
    4342:	4b0a      	ldr	r3, [pc, #40]	; (436c <dwt_init+0x34>)
    4344:	681b      	ldr	r3, [r3, #0]
    4346:	4a09      	ldr	r2, [pc, #36]	; (436c <dwt_init+0x34>)
    4348:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    434c:	6013      	str	r3, [r2, #0]
	*DWT_CYCCNT = 0;
    434e:	4b08      	ldr	r3, [pc, #32]	; (4370 <dwt_init+0x38>)
    4350:	2200      	movs	r2, #0
    4352:	601a      	str	r2, [r3, #0]
	*DWT_CTRL |= MSK_DWT_CYCCNTENA;
    4354:	4b07      	ldr	r3, [pc, #28]	; (4374 <dwt_init+0x3c>)
    4356:	681b      	ldr	r3, [r3, #0]
    4358:	4a06      	ldr	r2, [pc, #24]	; (4374 <dwt_init+0x3c>)
    435a:	f043 0301 	orr.w	r3, r3, #1
    435e:	6013      	str	r3, [r2, #0]
}
    4360:	bf00      	nop
    4362:	46bd      	mov	sp, r7
    4364:	bc80      	pop	{r7}
    4366:	4770      	bx	lr
    4368:	2000f9ec 	.word	0x2000f9ec
    436c:	e000edfc 	.word	0xe000edfc
    4370:	e0001004 	.word	0xe0001004
    4374:	e0001000 	.word	0xe0001000

00004378 <dwt_get_counter>:
	*DWT_CTRL &= ~MSK_DWT_CYCCNTENA;
	*DWT_CYCCNT = 0;
	*COREDEBUG_DEMCR &= ~MSK_DEMCR_TRCENA;
}

static inline uint32_t dwt_get_counter() {
    4378:	b480      	push	{r7}
    437a:	af00      	add	r7, sp, #0
	return *DWT_CYCCNT;
    437c:	4b02      	ldr	r3, [pc, #8]	; (4388 <dwt_get_counter+0x10>)
    437e:	681b      	ldr	r3, [r3, #0]
}
    4380:	4618      	mov	r0, r3
    4382:	46bd      	mov	sp, r7
    4384:	bc80      	pop	{r7}
    4386:	4770      	bx	lr
    4388:	e0001004 	.word	0xe0001004

0000438c <setup_profiler>:

int get_cur_tick() {
	return dwt_get_counter();
}

static inline void setup_profiler() {
    438c:	b580      	push	{r7, lr}
    438e:	af00      	add	r7, sp, #0
	profiler.event_count = 0;
    4390:	4b07      	ldr	r3, [pc, #28]	; (43b0 <setup_profiler+0x24>)
    4392:	2200      	movs	r2, #0
    4394:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	dwt_init();
    4398:	f7ff ffce 	bl	4338 <dwt_init>
	profiler.event_name[EV0] = EV0_TAG;
    439c:	4b05      	ldr	r3, [pc, #20]	; (43b4 <setup_profiler+0x28>)
    439e:	681b      	ldr	r3, [r3, #0]
    43a0:	4a03      	ldr	r2, [pc, #12]	; (43b0 <setup_profiler+0x24>)
    43a2:	6613      	str	r3, [r2, #96]	; 0x60
	profiler.event_name[EV1] = EV1_TAG;
    43a4:	4b04      	ldr	r3, [pc, #16]	; (43b8 <setup_profiler+0x2c>)
    43a6:	681b      	ldr	r3, [r3, #0]
    43a8:	4a01      	ldr	r2, [pc, #4]	; (43b0 <setup_profiler+0x24>)
    43aa:	6653      	str	r3, [r2, #100]	; 0x64
}
    43ac:	bf00      	nop
    43ae:	bd80      	pop	{r7, pc}
    43b0:	20002240 	.word	0x20002240
    43b4:	2000f9e4 	.word	0x2000f9e4
    43b8:	2000f9e8 	.word	0x2000f9e8

000043bc <profile_add_event>:

int profile_add_event(const char *event) {
    43bc:	b580      	push	{r7, lr}
    43be:	b084      	sub	sp, #16
    43c0:	af00      	add	r7, sp, #0
    43c2:	6078      	str	r0, [r7, #4]
	if (!profiler_is_init) {
    43c4:	4b1b      	ldr	r3, [pc, #108]	; (4434 <profile_add_event+0x78>)
    43c6:	781b      	ldrb	r3, [r3, #0]
    43c8:	f083 0301 	eor.w	r3, r3, #1
    43cc:	b2db      	uxtb	r3, r3
    43ce:	2b00      	cmp	r3, #0
    43d0:	d001      	beq.n	43d6 <profile_add_event+0x1a>
		setup_profiler();
    43d2:	f7ff ffdb 	bl	438c <setup_profiler>
	}
	
	if (profiler.event_count >= PROFILER_EVENTS_MAX) {
    43d6:	4b18      	ldr	r3, [pc, #96]	; (4438 <profile_add_event+0x7c>)
    43d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    43dc:	2b0b      	cmp	r3, #11
    43de:	dd03      	ble.n	43e8 <profile_add_event+0x2c>
		profiler.event_count = 0;
    43e0:	4b15      	ldr	r3, [pc, #84]	; (4438 <profile_add_event+0x7c>)
    43e2:	2200      	movs	r2, #0
    43e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	} 
	int event_count = profiler.event_count;
    43e8:	4b13      	ldr	r3, [pc, #76]	; (4438 <profile_add_event+0x7c>)
    43ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    43ee:	60fb      	str	r3, [r7, #12]
	profiler.event_name[event_count] = event;
    43f0:	4911      	ldr	r1, [pc, #68]	; (4438 <profile_add_event+0x7c>)
    43f2:	68fb      	ldr	r3, [r7, #12]
    43f4:	3318      	adds	r3, #24
    43f6:	687a      	ldr	r2, [r7, #4]
    43f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	profiler.start_tick[event_count] = profiler.end_tick[event_count] = 0;
    43fc:	4a0e      	ldr	r2, [pc, #56]	; (4438 <profile_add_event+0x7c>)
    43fe:	68fb      	ldr	r3, [r7, #12]
    4400:	330c      	adds	r3, #12
    4402:	2100      	movs	r1, #0
    4404:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    4408:	4a0b      	ldr	r2, [pc, #44]	; (4438 <profile_add_event+0x7c>)
    440a:	68fb      	ldr	r3, [r7, #12]
    440c:	330c      	adds	r3, #12
    440e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4412:	4909      	ldr	r1, [pc, #36]	; (4438 <profile_add_event+0x7c>)
    4414:	68fb      	ldr	r3, [r7, #12]
    4416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	profiler.event_count++;
    441a:	4b07      	ldr	r3, [pc, #28]	; (4438 <profile_add_event+0x7c>)
    441c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    4420:	3301      	adds	r3, #1
    4422:	4a05      	ldr	r2, [pc, #20]	; (4438 <profile_add_event+0x7c>)
    4424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	return event_count;
    4428:	68fb      	ldr	r3, [r7, #12]
}
    442a:	4618      	mov	r0, r3
    442c:	3710      	adds	r7, #16
    442e:	46bd      	mov	sp, r7
    4430:	bd80      	pop	{r7, pc}
    4432:	bf00      	nop
    4434:	2000623f 	.word	0x2000623f
    4438:	20002240 	.word	0x20002240

0000443c <profile_start>:

void profile_start(int eid) {
    443c:	b580      	push	{r7, lr}
    443e:	b082      	sub	sp, #8
    4440:	af00      	add	r7, sp, #0
    4442:	6078      	str	r0, [r7, #4]
	// if (!profiler_is_init) {
	// 	setup_profiler();
	// }
	profiler.start_tick[eid] = dwt_get_counter();
    4444:	f7ff ff98 	bl	4378 <dwt_get_counter>
    4448:	4601      	mov	r1, r0
    444a:	4a04      	ldr	r2, [pc, #16]	; (445c <profile_start+0x20>)
    444c:	687b      	ldr	r3, [r7, #4]
    444e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    4452:	bf00      	nop
    4454:	3708      	adds	r7, #8
    4456:	46bd      	mov	sp, r7
    4458:	bd80      	pop	{r7, pc}
    445a:	bf00      	nop
    445c:	20002240 	.word	0x20002240

00004460 <profile_end>:

uint32_t profile_end(int eid) {
    4460:	b580      	push	{r7, lr}
    4462:	b082      	sub	sp, #8
    4464:	af00      	add	r7, sp, #0
    4466:	6078      	str	r0, [r7, #4]
	profiler.end_tick[eid] = dwt_get_counter();
    4468:	f7ff ff86 	bl	4378 <dwt_get_counter>
    446c:	4601      	mov	r1, r0
    446e:	4a09      	ldr	r2, [pc, #36]	; (4494 <profile_end+0x34>)
    4470:	687b      	ldr	r3, [r7, #4]
    4472:	330c      	adds	r3, #12
    4474:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return profiler.end_tick[eid] - profiler.start_tick[eid];
    4478:	4a06      	ldr	r2, [pc, #24]	; (4494 <profile_end+0x34>)
    447a:	687b      	ldr	r3, [r7, #4]
    447c:	330c      	adds	r3, #12
    447e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4482:	4904      	ldr	r1, [pc, #16]	; (4494 <profile_end+0x34>)
    4484:	687b      	ldr	r3, [r7, #4]
    4486:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    448a:	1ad3      	subs	r3, r2, r3
}
    448c:	4618      	mov	r0, r3
    448e:	3708      	adds	r7, #8
    4490:	46bd      	mov	sp, r7
    4492:	bd80      	pop	{r7, pc}
    4494:	20002240 	.word	0x20002240

00004498 <profile_dump>:

float cycles2us(int cycles) {
	return cycles_to_us(cycles);
}

void profile_dump(int eid) {
    4498:	b580      	push	{r7, lr}
    449a:	b084      	sub	sp, #16
    449c:	af00      	add	r7, sp, #0
    449e:	6078      	str	r0, [r7, #4]
	uint32_t ticks = profiler.end_tick[eid] - profiler.start_tick[eid];
    44a0:	4a0e      	ldr	r2, [pc, #56]	; (44dc <profile_dump+0x44>)
    44a2:	687b      	ldr	r3, [r7, #4]
    44a4:	330c      	adds	r3, #12
    44a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    44aa:	490c      	ldr	r1, [pc, #48]	; (44dc <profile_dump+0x44>)
    44ac:	687b      	ldr	r3, [r7, #4]
    44ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    44b2:	1ad3      	subs	r3, r2, r3
    44b4:	60fb      	str	r3, [r7, #12]
	*/
	float us = cycles_to_us(ticks);
	DEBUG_LOG("Event %d -> cycle: %d time(us): %f\n", eid, ticks, us);
#elif defined(ZEPHYR_OS)
	// zephyr do not support printf float
	int us = cycles_to_us(ticks);
    44b6:	68f8      	ldr	r0, [r7, #12]
    44b8:	f7ff ff24 	bl	4304 <cycles_to_us>
    44bc:	4603      	mov	r3, r0
    44be:	4618      	mov	r0, r3
    44c0:	f7fc f8cc 	bl	65c <__aeabi_f2iz>
    44c4:	4603      	mov	r3, r0
    44c6:	60bb      	str	r3, [r7, #8]
	//us = ticks * 10 / 189;
	DEBUG_LOG("Event %d -> cycle: %d time(us): %d\n", eid, ticks, us);
    44c8:	68bb      	ldr	r3, [r7, #8]
    44ca:	68fa      	ldr	r2, [r7, #12]
    44cc:	6879      	ldr	r1, [r7, #4]
    44ce:	4804      	ldr	r0, [pc, #16]	; (44e0 <profile_dump+0x48>)
    44d0:	f014 fdf9 	bl	190c6 <debug_log>
#else
	DEBUG_LOG("QEMU Event %d -> cycle: %d %d\n", ticks);
#endif
}
    44d4:	bf00      	nop
    44d6:	3710      	adds	r7, #16
    44d8:	46bd      	mov	sp, r7
    44da:	bd80      	pop	{r7, pc}
    44dc:	20002240 	.word	0x20002240
    44e0:	0002d390 	.word	0x0002d390

000044e4 <ebpf_malloc>:

*/

int mem_size = 0;

void* ebpf_malloc(size_t size) {
    44e4:	b580      	push	{r7, lr}
    44e6:	b082      	sub	sp, #8
    44e8:	af00      	add	r7, sp, #0
    44ea:	6078      	str	r0, [r7, #4]
	mem_size += size;
    44ec:	4b07      	ldr	r3, [pc, #28]	; (450c <ebpf_malloc+0x28>)
    44ee:	681b      	ldr	r3, [r3, #0]
    44f0:	461a      	mov	r2, r3
    44f2:	687b      	ldr	r3, [r7, #4]
    44f4:	4413      	add	r3, r2
    44f6:	461a      	mov	r2, r3
    44f8:	4b04      	ldr	r3, [pc, #16]	; (450c <ebpf_malloc+0x28>)
    44fa:	601a      	str	r2, [r3, #0]
	return (void *) my_os_malloc(size);
    44fc:	6878      	ldr	r0, [r7, #4]
    44fe:	f012 fa35 	bl	1696c <k_malloc>
    4502:	4603      	mov	r3, r0
}
    4504:	4618      	mov	r0, r3
    4506:	3708      	adds	r7, #8
    4508:	46bd      	mov	sp, r7
    450a:	bd80      	pop	{r7, pc}
    450c:	200022d4 	.word	0x200022d4

00004510 <ebpf_realloc>:

// void* ebpf_realloc(void* rmem, size_t newsize) {
// 	return (void*) my_os_realloc(rmem, newsize);
// }

void* ebpf_realloc(void *rmem, size_t orisize, size_t newsize) {
    4510:	b580      	push	{r7, lr}
    4512:	b086      	sub	sp, #24
    4514:	af00      	add	r7, sp, #0
    4516:	60f8      	str	r0, [r7, #12]
    4518:	60b9      	str	r1, [r7, #8]
    451a:	607a      	str	r2, [r7, #4]
	mem_size += newsize - orisize;
    451c:	687a      	ldr	r2, [r7, #4]
    451e:	68bb      	ldr	r3, [r7, #8]
    4520:	1ad3      	subs	r3, r2, r3
    4522:	4a18      	ldr	r2, [pc, #96]	; (4584 <ebpf_realloc+0x74>)
    4524:	6812      	ldr	r2, [r2, #0]
    4526:	4413      	add	r3, r2
    4528:	461a      	mov	r2, r3
    452a:	4b16      	ldr	r3, [pc, #88]	; (4584 <ebpf_realloc+0x74>)
    452c:	601a      	str	r2, [r3, #0]
	if (newsize == 0) {
    452e:	687b      	ldr	r3, [r7, #4]
    4530:	2b00      	cmp	r3, #0
    4532:	d104      	bne.n	453e <ebpf_realloc+0x2e>
		ebpf_free(rmem);
    4534:	68f8      	ldr	r0, [r7, #12]
    4536:	f014 fe21 	bl	1917c <ebpf_free>
		return NULL;
    453a:	2300      	movs	r3, #0
    453c:	e01d      	b.n	457a <ebpf_realloc+0x6a>
	} else if (rmem == NULL) {
    453e:	68fb      	ldr	r3, [r7, #12]
    4540:	2b00      	cmp	r3, #0
    4542:	d104      	bne.n	454e <ebpf_realloc+0x3e>
		return ebpf_malloc(newsize);
    4544:	6878      	ldr	r0, [r7, #4]
    4546:	f7ff ffcd 	bl	44e4 <ebpf_malloc>
    454a:	4603      	mov	r3, r0
    454c:	e015      	b.n	457a <ebpf_realloc+0x6a>
	} else if (newsize <= orisize) {
    454e:	687a      	ldr	r2, [r7, #4]
    4550:	68bb      	ldr	r3, [r7, #8]
    4552:	429a      	cmp	r2, r3
    4554:	d801      	bhi.n	455a <ebpf_realloc+0x4a>
		return rmem;
    4556:	68fb      	ldr	r3, [r7, #12]
    4558:	e00f      	b.n	457a <ebpf_realloc+0x6a>
	} else {
		void *pnew = ebpf_malloc(newsize);
    455a:	6878      	ldr	r0, [r7, #4]
    455c:	f7ff ffc2 	bl	44e4 <ebpf_malloc>
    4560:	6178      	str	r0, [r7, #20]
		if (pnew != NULL) {
    4562:	697b      	ldr	r3, [r7, #20]
    4564:	2b00      	cmp	r3, #0
    4566:	d007      	beq.n	4578 <ebpf_realloc+0x68>
//			uint8_t *xdes = pnew;
//			uint8_t *xsrc = rmem;
//			while(orisize--) *xdes++ = *xsrc++;
			memcpy(pnew, rmem, orisize);
    4568:	68ba      	ldr	r2, [r7, #8]
    456a:	68f9      	ldr	r1, [r7, #12]
    456c:	6978      	ldr	r0, [r7, #20]
    456e:	f7fd fd7b 	bl	2068 <memcpy>
			ebpf_free(rmem);
    4572:	68f8      	ldr	r0, [r7, #12]
    4574:	f014 fe02 	bl	1917c <ebpf_free>
		}
		return pnew;
    4578:	697b      	ldr	r3, [r7, #20]
	}
}
    457a:	4618      	mov	r0, r3
    457c:	3718      	adds	r7, #24
    457e:	46bd      	mov	sp, r7
    4580:	bd80      	pop	{r7, pc}
    4582:	bf00      	nop
    4584:	200022d4 	.word	0x200022d4

00004588 <ebpf_calloc>:

void* ebpf_calloc(size_t nelem, size_t elmsize) {
    4588:	b580      	push	{r7, lr}
    458a:	b082      	sub	sp, #8
    458c:	af00      	add	r7, sp, #0
    458e:	6078      	str	r0, [r7, #4]
    4590:	6039      	str	r1, [r7, #0]
	mem_size += elmsize;
    4592:	4b08      	ldr	r3, [pc, #32]	; (45b4 <ebpf_calloc+0x2c>)
    4594:	681b      	ldr	r3, [r3, #0]
    4596:	461a      	mov	r2, r3
    4598:	683b      	ldr	r3, [r7, #0]
    459a:	4413      	add	r3, r2
    459c:	461a      	mov	r2, r3
    459e:	4b05      	ldr	r3, [pc, #20]	; (45b4 <ebpf_calloc+0x2c>)
    45a0:	601a      	str	r2, [r3, #0]
	return (void*) my_os_calloc(nelem, elmsize);
    45a2:	6839      	ldr	r1, [r7, #0]
    45a4:	6878      	ldr	r0, [r7, #4]
    45a6:	f025 fd25 	bl	29ff4 <k_calloc>
    45aa:	4603      	mov	r3, r0
}
    45ac:	4618      	mov	r0, r3
    45ae:	3708      	adds	r7, #8
    45b0:	46bd      	mov	sp, r7
    45b2:	bd80      	pop	{r7, pc}
    45b4:	200022d4 	.word	0x200022d4

000045b8 <get_ebpf_alloc_size>:

void ebpf_free(void* rmem) {
	my_os_free(rmem);
}

int get_ebpf_alloc_size() {
    45b8:	b480      	push	{r7}
    45ba:	af00      	add	r7, sp, #0
	return mem_size;
    45bc:	4b02      	ldr	r3, [pc, #8]	; (45c8 <get_ebpf_alloc_size+0x10>)
    45be:	681b      	ldr	r3, [r3, #0]
    45c0:	4618      	mov	r0, r3
    45c2:	46bd      	mov	sp, r7
    45c4:	bc80      	pop	{r7}
    45c6:	4770      	bx	lr
    45c8:	200022d4 	.word	0x200022d4

000045cc <iot_call_C_func_noret>:
	DEBUG_LOG(str);
}

//
// push {arg4, arg5, arg6}
static void iot_call_C_func_noret(uint64_t func_addr, uint64_t arg0, uint64_t arg1, uint64_t arg2, uint64_t arg3) {
    45cc:	b590      	push	{r4, r7, lr}
    45ce:	b08b      	sub	sp, #44	; 0x2c
    45d0:	af04      	add	r7, sp, #16
    45d2:	e9c7 0102 	strd	r0, r1, [r7, #8]
    45d6:	e9c7 2300 	strd	r2, r3, [r7]
	// typedef 
	c_func func = (c_func) (u32) func_addr;
    45da:	68bb      	ldr	r3, [r7, #8]
    45dc:	617b      	str	r3, [r7, #20]
	func(arg0, arg1, arg2, arg3);
    45de:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
    45e2:	e9cd 3402 	strd	r3, r4, [sp, #8]
    45e6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    45ea:	e9cd 3400 	strd	r3, r4, [sp]
    45ee:	697c      	ldr	r4, [r7, #20]
    45f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
    45f4:	e9d7 0100 	ldrd	r0, r1, [r7]
    45f8:	47a0      	blx	r4
	// fp 
	// DEBUG_LOG("%d %d %d %d\n", (u32) arg0, (u32) arg1, (u32) arg2, (u32) arg3);
	DEBUG_LOG("want to call c: func:0x%08x arg0:%d arg1:%d arg2:%d arg3:%d\n",  (u32) func_addr, (u32) arg0, (u32) arg1, (u32) arg2, (u32) arg3);
    45fa:	68b9      	ldr	r1, [r7, #8]
    45fc:	6838      	ldr	r0, [r7, #0]
    45fe:	6abc      	ldr	r4, [r7, #40]	; 0x28
    4600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4602:	6bba      	ldr	r2, [r7, #56]	; 0x38
    4604:	9201      	str	r2, [sp, #4]
    4606:	9300      	str	r3, [sp, #0]
    4608:	4623      	mov	r3, r4
    460a:	4602      	mov	r2, r0
    460c:	4803      	ldr	r0, [pc, #12]	; (461c <iot_call_C_func_noret+0x50>)
    460e:	f014 fd5a 	bl	190c6 <debug_log>
}
    4612:	bf00      	nop
    4614:	371c      	adds	r7, #28
    4616:	46bd      	mov	sp, r7
    4618:	bd90      	pop	{r4, r7, pc}
    461a:	bf00      	nop
    461c:	0002d3fc 	.word	0x0002d3fc

00004620 <tmp_map_save_val>:
}

// static 
static arraymap amap;
uint64_t dval;
static void tmp_map_save_val(void *mp, uint64_t key, uint64_t val) {
    4620:	b490      	push	{r4, r7}
    4622:	b084      	sub	sp, #16
    4624:	af00      	add	r7, sp, #0
    4626:	60f8      	str	r0, [r7, #12]
    4628:	e9c7 2300 	strd	r2, r3, [r7]
	if (mp == NULL) {

	}
	dval = val;
    462c:	4a04      	ldr	r2, [pc, #16]	; (4640 <tmp_map_save_val+0x20>)
    462e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    4632:	e9c2 3400 	strd	r3, r4, [r2]
}
    4636:	bf00      	nop
    4638:	3710      	adds	r7, #16
    463a:	46bd      	mov	sp, r7
    463c:	bc90      	pop	{r4, r7}
    463e:	4770      	bx	lr
    4640:	20002008 	.word	0x20002008

00004644 <tmp_map_get_val>:

static uint64_t tmp_map_get_val(void *mp, uint64_t key) {
    4644:	b490      	push	{r4, r7}
    4646:	b084      	sub	sp, #16
    4648:	af00      	add	r7, sp, #0
    464a:	60f8      	str	r0, [r7, #12]
    464c:	e9c7 2300 	strd	r2, r3, [r7]
	return dval;
    4650:	4b04      	ldr	r3, [pc, #16]	; (4664 <tmp_map_get_val+0x20>)
    4652:	e9d3 3400 	ldrd	r3, r4, [r3]
}
    4656:	4618      	mov	r0, r3
    4658:	4621      	mov	r1, r4
    465a:	3710      	adds	r7, #16
    465c:	46bd      	mov	sp, r7
    465e:	bc90      	pop	{r4, r7}
    4660:	4770      	bx	lr
    4662:	bf00      	nop
    4664:	20002008 	.word	0x20002008

00004668 <set_default_helpers>:

void set_default_helpers(struct ebpf_vm *vm) {
    4668:	b580      	push	{r7, lr}
    466a:	b082      	sub	sp, #8
    466c:	af00      	add	r7, sp, #0
    466e:	6078      	str	r0, [r7, #4]
	ebpf_register(vm, 1, "print_log", iot_print_log);
    4670:	4b0d      	ldr	r3, [pc, #52]	; (46a8 <set_default_helpers+0x40>)
    4672:	4a0e      	ldr	r2, [pc, #56]	; (46ac <set_default_helpers+0x44>)
    4674:	2101      	movs	r1, #1
    4676:	6878      	ldr	r0, [r7, #4]
    4678:	f014 fed5 	bl	19426 <ebpf_register>
	ebpf_register(vm, 2, "call_c_func", iot_call_C_func_noret);
    467c:	4b0c      	ldr	r3, [pc, #48]	; (46b0 <set_default_helpers+0x48>)
    467e:	4a0d      	ldr	r2, [pc, #52]	; (46b4 <set_default_helpers+0x4c>)
    4680:	2102      	movs	r1, #2
    4682:	6878      	ldr	r0, [r7, #4]
    4684:	f014 fecf 	bl	19426 <ebpf_register>
	// DEBUG_LOG("func 2: 0x%08x\n", iot_call_C_func_noret);
	ebpf_register(vm, 3, "map_set", tmp_map_save_val);
    4688:	4b0b      	ldr	r3, [pc, #44]	; (46b8 <set_default_helpers+0x50>)
    468a:	4a0c      	ldr	r2, [pc, #48]	; (46bc <set_default_helpers+0x54>)
    468c:	2103      	movs	r1, #3
    468e:	6878      	ldr	r0, [r7, #4]
    4690:	f014 fec9 	bl	19426 <ebpf_register>
	ebpf_register(vm, 4, "map_get", tmp_map_get_val);
    4694:	4b0a      	ldr	r3, [pc, #40]	; (46c0 <set_default_helpers+0x58>)
    4696:	4a0b      	ldr	r2, [pc, #44]	; (46c4 <set_default_helpers+0x5c>)
    4698:	2104      	movs	r1, #4
    469a:	6878      	ldr	r0, [r7, #4]
    469c:	f014 fec3 	bl	19426 <ebpf_register>
}
    46a0:	bf00      	nop
    46a2:	3708      	adds	r7, #8
    46a4:	46bd      	mov	sp, r7
    46a6:	bd80      	pop	{r7, pc}
    46a8:	0001939d 	.word	0x0001939d
    46ac:	0002d43c 	.word	0x0002d43c
    46b0:	000045cd 	.word	0x000045cd
    46b4:	0002d448 	.word	0x0002d448
    46b8:	00004621 	.word	0x00004621
    46bc:	0002d454 	.word	0x0002d454
    46c0:	00004645 	.word	0x00004645
    46c4:	0002d45c 	.word	0x0002d45c

000046c8 <use_default_helper_func>:
	// DEBUG_LOG("ebpf_register: 0x%08x 0x%08x\n", vm->helper_func->ext_funcs, fn);
	// vm->helper_func->ext_func_names[idx] = name;
	return 0;
}

static ebpf_helper_env* use_default_helper_func() {
    46c8:	b598      	push	{r3, r4, r7, lr}
    46ca:	af00      	add	r7, sp, #0
	if (g_helper_func == NULL) {
    46cc:	4b0d      	ldr	r3, [pc, #52]	; (4704 <use_default_helper_func+0x3c>)
    46ce:	681b      	ldr	r3, [r3, #0]
    46d0:	2b00      	cmp	r3, #0
    46d2:	d10e      	bne.n	46f2 <use_default_helper_func+0x2a>
		g_helper_func = ebpf_calloc(1, sizeof(ebpf_helper_env));
    46d4:	210c      	movs	r1, #12
    46d6:	2001      	movs	r0, #1
    46d8:	f7ff ff56 	bl	4588 <ebpf_calloc>
    46dc:	4602      	mov	r2, r0
    46de:	4b09      	ldr	r3, [pc, #36]	; (4704 <use_default_helper_func+0x3c>)
    46e0:	601a      	str	r2, [r3, #0]
		g_helper_func->ext_funcs = ebpf_calloc(MAX_EXT_FUNCS, sizeof(ext_func));
    46e2:	4b08      	ldr	r3, [pc, #32]	; (4704 <use_default_helper_func+0x3c>)
    46e4:	681c      	ldr	r4, [r3, #0]
    46e6:	2104      	movs	r1, #4
    46e8:	200c      	movs	r0, #12
    46ea:	f7ff ff4d 	bl	4588 <ebpf_calloc>
    46ee:	4603      	mov	r3, r0
    46f0:	6023      	str	r3, [r4, #0]
		// g_helper_func->refcnt = 0;
	}
	g_helper_func->refcnt++;
    46f2:	4b04      	ldr	r3, [pc, #16]	; (4704 <use_default_helper_func+0x3c>)
    46f4:	681b      	ldr	r3, [r3, #0]
    46f6:	689a      	ldr	r2, [r3, #8]
    46f8:	3201      	adds	r2, #1
    46fa:	609a      	str	r2, [r3, #8]
	return g_helper_func;
    46fc:	4b01      	ldr	r3, [pc, #4]	; (4704 <use_default_helper_func+0x3c>)
    46fe:	681b      	ldr	r3, [r3, #0]
}
    4700:	4618      	mov	r0, r3
    4702:	bd98      	pop	{r3, r4, r7, pc}
    4704:	200022d8 	.word	0x200022d8

00004708 <ebpf_vm_exec>:
	}
	// ebpf_free(vm->insts);
	ebpf_free(vm);
}

u64 ebpf_vm_exec(const struct ebpf_vm *vm, void *mem, u32 mem_len) {
    4708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    470c:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
    4710:	af06      	add	r7, sp, #24
    4712:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
    4716:	6018      	str	r0, [r3, #0]
    4718:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
    471c:	6019      	str	r1, [r3, #0]
    471e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
    4722:	601a      	str	r2, [r3, #0]
	u64 ret = 0;
    4724:	f04f 0300 	mov.w	r3, #0
    4728:	f04f 0400 	mov.w	r4, #0
    472c:	e9c7 347c 	strd	r3, r4, [r7, #496]	; 0x1f0
	u16 pc = 0;
    4730:	2300      	movs	r3, #0
    4732:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
	const struct ebpf_inst *insts = vm->insts;
    4736:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
    473a:	681b      	ldr	r3, [r3, #0]
    473c:	681b      	ldr	r3, [r3, #0]
    473e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
	u64 reg[MAX_BPF_EXT_REG];
	u64 stack[(STACK_SIZE + 7) / 8];
	reg[1] = (uintptr) mem;
    4742:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
    4746:	681b      	ldr	r3, [r3, #0]
    4748:	f04f 0400 	mov.w	r4, #0
    474c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	reg[10] = (uintptr) stack + sizeof(stack);
    4750:	f507 7380 	add.w	r3, r7, #256	; 0x100
    4754:	3380      	adds	r3, #128	; 0x80
    4756:	f04f 0400 	mov.w	r4, #0
    475a:	e9c7 3474 	strd	r3, r4, [r7, #464]	; 0x1d0
			return -1; \
		} \
	} while(0)

	while (true) {
		const u16 cur_pc = pc;
    475e:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
    4762:	f8a7 31ea 	strh.w	r3, [r7, #490]	; 0x1ea
		const struct ebpf_inst *inst = &insts[pc++];
    4766:	f8b7 21fe 	ldrh.w	r2, [r7, #510]	; 0x1fe
    476a:	1c53      	adds	r3, r2, #1
    476c:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
    4770:	4613      	mov	r3, r2
    4772:	00da      	lsls	r2, r3, #3
    4774:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    4778:	4413      	add	r3, r2
    477a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
		switch (inst->opcode) {
    477e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4782:	781b      	ldrb	r3, [r3, #0]
    4784:	3b04      	subs	r3, #4
    4786:	2bd9      	cmp	r3, #217	; 0xd9
    4788:	d8e9      	bhi.n	475e <ebpf_vm_exec+0x56>
    478a:	a201      	add	r2, pc, #4	; (adr r2, 4790 <ebpf_vm_exec+0x88>)
    478c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4790:	00004af9 	.word	0x00004af9
    4794:	0000677b 	.word	0x0000677b
    4798:	0000475f 	.word	0x0000475f
    479c:	000054d7 	.word	0x000054d7
    47a0:	0000475f 	.word	0x0000475f
    47a4:	0000475f 	.word	0x0000475f
    47a8:	0000475f 	.word	0x0000475f
    47ac:	0000475f 	.word	0x0000475f
    47b0:	00004b41 	.word	0x00004b41
    47b4:	0000475f 	.word	0x0000475f
    47b8:	0000475f 	.word	0x0000475f
    47bc:	0000552d 	.word	0x0000552d
    47c0:	0000475f 	.word	0x0000475f
    47c4:	0000475f 	.word	0x0000475f
    47c8:	0000475f 	.word	0x0000475f
    47cc:	0000475f 	.word	0x0000475f
    47d0:	00004b9d 	.word	0x00004b9d
    47d4:	000067e5 	.word	0x000067e5
    47d8:	0000475f 	.word	0x0000475f
    47dc:	00005591 	.word	0x00005591
    47e0:	0000671f 	.word	0x0000671f
    47e4:	0000475f 	.word	0x0000475f
    47e8:	0000475f 	.word	0x0000475f
    47ec:	0000475f 	.word	0x0000475f
    47f0:	00004be5 	.word	0x00004be5
    47f4:	00006791 	.word	0x00006791
    47f8:	0000475f 	.word	0x0000475f
    47fc:	000055e7 	.word	0x000055e7
    4800:	0000475f 	.word	0x0000475f
    4804:	0000475f 	.word	0x0000475f
    4808:	0000475f 	.word	0x0000475f
    480c:	0000475f 	.word	0x0000475f
    4810:	00004c41 	.word	0x00004c41
    4814:	00006829 	.word	0x00006829
    4818:	0000475f 	.word	0x0000475f
    481c:	0000564b 	.word	0x0000564b
    4820:	0000475f 	.word	0x0000475f
    4824:	0000475f 	.word	0x0000475f
    4828:	0000475f 	.word	0x0000475f
    482c:	0000475f 	.word	0x0000475f
    4830:	00004c8b 	.word	0x00004c8b
    4834:	0000686d 	.word	0x0000686d
    4838:	0000475f 	.word	0x0000475f
    483c:	000056a3 	.word	0x000056a3
    4840:	0000475f 	.word	0x0000475f
    4844:	0000475f 	.word	0x0000475f
    4848:	0000475f 	.word	0x0000475f
    484c:	0000475f 	.word	0x0000475f
    4850:	00004ce9 	.word	0x00004ce9
    4854:	000068c1 	.word	0x000068c1
    4858:	0000475f 	.word	0x0000475f
    485c:	00005709 	.word	0x00005709
    4860:	0000475f 	.word	0x0000475f
    4864:	0000475f 	.word	0x0000475f
    4868:	0000475f 	.word	0x0000475f
    486c:	0000475f 	.word	0x0000475f
    4870:	00004d33 	.word	0x00004d33
    4874:	00006909 	.word	0x00006909
    4878:	0000475f 	.word	0x0000475f
    487c:	00005763 	.word	0x00005763
    4880:	0000475f 	.word	0x0000475f
    4884:	0000475f 	.word	0x0000475f
    4888:	0000475f 	.word	0x0000475f
    488c:	0000475f 	.word	0x0000475f
    4890:	00004dbb 	.word	0x00004dbb
    4894:	00006a8d 	.word	0x00006a8d
    4898:	0000475f 	.word	0x0000475f
    489c:	000057e7 	.word	0x000057e7
    48a0:	0000475f 	.word	0x0000475f
    48a4:	0000475f 	.word	0x0000475f
    48a8:	0000475f 	.word	0x0000475f
    48ac:	0000475f 	.word	0x0000475f
    48b0:	00004e03 	.word	0x00004e03
    48b4:	00006add 	.word	0x00006add
    48b8:	0000475f 	.word	0x0000475f
    48bc:	0000583d 	.word	0x0000583d
    48c0:	0000475f 	.word	0x0000475f
    48c4:	0000475f 	.word	0x0000475f
    48c8:	0000475f 	.word	0x0000475f
    48cc:	0000475f 	.word	0x0000475f
    48d0:	00004e5f 	.word	0x00004e5f
    48d4:	00006b3d 	.word	0x00006b3d
    48d8:	0000475f 	.word	0x0000475f
    48dc:	000058a1 	.word	0x000058a1
    48e0:	0000475f 	.word	0x0000475f
    48e4:	0000475f 	.word	0x0000475f
    48e8:	0000475f 	.word	0x0000475f
    48ec:	0000475f 	.word	0x0000475f
    48f0:	00004ea7 	.word	0x00004ea7
    48f4:	00006b81 	.word	0x00006b81
    48f8:	0000475f 	.word	0x0000475f
    48fc:	000058f7 	.word	0x000058f7
    4900:	0000475f 	.word	0x0000475f
    4904:	00005f75 	.word	0x00005f75
    4908:	00006205 	.word	0x00006205
    490c:	000064d3 	.word	0x000064d3
    4910:	00004f03 	.word	0x00004f03
    4914:	00006bd5 	.word	0x00006bd5
    4918:	0000475f 	.word	0x0000475f
    491c:	0000595b 	.word	0x0000595b
    4920:	0000475f 	.word	0x0000475f
    4924:	00005fc1 	.word	0x00005fc1
    4928:	000062b3 	.word	0x000062b3
    492c:	0000659b 	.word	0x0000659b
    4930:	00004f4b 	.word	0x00004f4b
    4934:	00006c1d 	.word	0x00006c1d
    4938:	0000475f 	.word	0x0000475f
    493c:	000059d3 	.word	0x000059d3
    4940:	0000475f 	.word	0x0000475f
    4944:	00006085 	.word	0x00006085
    4948:	00006361 	.word	0x00006361
    494c:	0000665d 	.word	0x0000665d
    4950:	00004fa7 	.word	0x00004fa7
    4954:	00006c75 	.word	0x00006c75
    4958:	0000475f 	.word	0x0000475f
    495c:	00005a61 	.word	0x00005a61
    4960:	0000475f 	.word	0x0000475f
    4964:	00005eb3 	.word	0x00005eb3
    4968:	00006149 	.word	0x00006149
    496c:	0000640f 	.word	0x0000640f
    4970:	00004fef 	.word	0x00004fef
    4974:	00006cbd 	.word	0x00006cbd
    4978:	0000475f 	.word	0x0000475f
    497c:	00005ad9 	.word	0x00005ad9
    4980:	0000475f 	.word	0x0000475f
    4984:	0000475f 	.word	0x0000475f
    4988:	0000475f 	.word	0x0000475f
    498c:	0000475f 	.word	0x0000475f
    4990:	0000504b 	.word	0x0000504b
    4994:	00006e53 	.word	0x00006e53
    4998:	0000475f 	.word	0x0000475f
    499c:	00005b67 	.word	0x00005b67
    49a0:	0000475f 	.word	0x0000475f
    49a4:	0000475f 	.word	0x0000475f
    49a8:	0000475f 	.word	0x0000475f
    49ac:	0000475f 	.word	0x0000475f
    49b0:	0000475f 	.word	0x0000475f
    49b4:	0000475f 	.word	0x0000475f
    49b8:	0000475f 	.word	0x0000475f
    49bc:	0000475f 	.word	0x0000475f
    49c0:	0000475f 	.word	0x0000475f
    49c4:	0000475f 	.word	0x0000475f
    49c8:	0000475f 	.word	0x0000475f
    49cc:	0000475f 	.word	0x0000475f
    49d0:	0000508b 	.word	0x0000508b
    49d4:	00006ea5 	.word	0x00006ea5
    49d8:	0000475f 	.word	0x0000475f
    49dc:	00005ba5 	.word	0x00005ba5
    49e0:	0000475f 	.word	0x0000475f
    49e4:	0000475f 	.word	0x0000475f
    49e8:	0000475f 	.word	0x0000475f
    49ec:	0000475f 	.word	0x0000475f
    49f0:	000050dd 	.word	0x000050dd
    49f4:	0000475f 	.word	0x0000475f
    49f8:	0000475f 	.word	0x0000475f
    49fc:	00005bff 	.word	0x00005bff
    4a00:	0000475f 	.word	0x0000475f
    4a04:	0000475f 	.word	0x0000475f
    4a08:	0000475f 	.word	0x0000475f
    4a0c:	0000475f 	.word	0x0000475f
    4a10:	0000516d 	.word	0x0000516d
    4a14:	0000695d 	.word	0x0000695d
    4a18:	0000475f 	.word	0x0000475f
    4a1c:	00005c91 	.word	0x00005c91
    4a20:	0000475f 	.word	0x0000475f
    4a24:	0000475f 	.word	0x0000475f
    4a28:	0000475f 	.word	0x0000475f
    4a2c:	0000475f 	.word	0x0000475f
    4a30:	000051b5 	.word	0x000051b5
    4a34:	000069a1 	.word	0x000069a1
    4a38:	0000475f 	.word	0x0000475f
    4a3c:	00005ce3 	.word	0x00005ce3
    4a40:	0000475f 	.word	0x0000475f
    4a44:	0000475f 	.word	0x0000475f
    4a48:	0000475f 	.word	0x0000475f
    4a4c:	0000475f 	.word	0x0000475f
    4a50:	00005211 	.word	0x00005211
    4a54:	000069f5 	.word	0x000069f5
    4a58:	0000475f 	.word	0x0000475f
    4a5c:	00005d43 	.word	0x00005d43
    4a60:	0000475f 	.word	0x0000475f
    4a64:	0000475f 	.word	0x0000475f
    4a68:	0000475f 	.word	0x0000475f
    4a6c:	0000475f 	.word	0x0000475f
    4a70:	0000523d 	.word	0x0000523d
    4a74:	00006a39 	.word	0x00006a39
    4a78:	0000475f 	.word	0x0000475f
    4a7c:	00005d6d 	.word	0x00005d6d
    4a80:	0000475f 	.word	0x0000475f
    4a84:	0000475f 	.word	0x0000475f
    4a88:	0000475f 	.word	0x0000475f
    4a8c:	0000475f 	.word	0x0000475f
    4a90:	0000527d 	.word	0x0000527d
    4a94:	00006d15 	.word	0x00006d15
    4a98:	0000475f 	.word	0x0000475f
    4a9c:	00005da9 	.word	0x00005da9
    4aa0:	0000475f 	.word	0x0000475f
    4aa4:	0000475f 	.word	0x0000475f
    4aa8:	0000475f 	.word	0x0000475f
    4aac:	0000475f 	.word	0x0000475f
    4ab0:	000052c9 	.word	0x000052c9
    4ab4:	00006d5d 	.word	0x00006d5d
    4ab8:	0000475f 	.word	0x0000475f
    4abc:	00005e1f 	.word	0x00005e1f
    4ac0:	0000475f 	.word	0x0000475f
    4ac4:	0000475f 	.word	0x0000475f
    4ac8:	0000475f 	.word	0x0000475f
    4acc:	0000475f 	.word	0x0000475f
    4ad0:	00005329 	.word	0x00005329
    4ad4:	00006db5 	.word	0x00006db5
    4ad8:	0000475f 	.word	0x0000475f
    4adc:	0000475f 	.word	0x0000475f
    4ae0:	0000475f 	.word	0x0000475f
    4ae4:	0000475f 	.word	0x0000475f
    4ae8:	0000475f 	.word	0x0000475f
    4aec:	0000475f 	.word	0x0000475f
    4af0:	000053ef 	.word	0x000053ef
    4af4:	00006dfd 	.word	0x00006dfd
			// 32
		case EBPF_OP_ADD_IMM:
			DST = (u32)DST + (u32)IMM;
    4af8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4afc:	785b      	ldrb	r3, [r3, #1]
    4afe:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4b02:	b2db      	uxtb	r3, r3
    4b04:	00db      	lsls	r3, r3, #3
    4b06:	f507 7200 	add.w	r2, r7, #512	; 0x200
    4b0a:	4413      	add	r3, r2
    4b0c:	3b80      	subs	r3, #128	; 0x80
    4b0e:	e9d3 3400 	ldrd	r3, r4, [r3]
    4b12:	461a      	mov	r2, r3
    4b14:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4b18:	685b      	ldr	r3, [r3, #4]
    4b1a:	441a      	add	r2, r3
    4b1c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4b20:	785b      	ldrb	r3, [r3, #1]
    4b22:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4b26:	b2db      	uxtb	r3, r3
    4b28:	4611      	mov	r1, r2
    4b2a:	f04f 0200 	mov.w	r2, #0
    4b2e:	00db      	lsls	r3, r3, #3
    4b30:	f507 7000 	add.w	r0, r7, #512	; 0x200
    4b34:	4403      	add	r3, r0
    4b36:	3b80      	subs	r3, #128	; 0x80
    4b38:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    4b3c:	f002 b9fb 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_ADD_REG:
			DST = (u32)DST + (u32)SRC;
    4b40:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4b44:	785b      	ldrb	r3, [r3, #1]
    4b46:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4b4a:	b2db      	uxtb	r3, r3
    4b4c:	00db      	lsls	r3, r3, #3
    4b4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
    4b52:	4413      	add	r3, r2
    4b54:	3b80      	subs	r3, #128	; 0x80
    4b56:	e9d3 3400 	ldrd	r3, r4, [r3]
    4b5a:	461a      	mov	r2, r3
    4b5c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4b60:	785b      	ldrb	r3, [r3, #1]
    4b62:	f3c3 1303 	ubfx	r3, r3, #4, #4
    4b66:	b2db      	uxtb	r3, r3
    4b68:	00db      	lsls	r3, r3, #3
    4b6a:	f507 7100 	add.w	r1, r7, #512	; 0x200
    4b6e:	440b      	add	r3, r1
    4b70:	3b80      	subs	r3, #128	; 0x80
    4b72:	e9d3 3400 	ldrd	r3, r4, [r3]
    4b76:	441a      	add	r2, r3
    4b78:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4b7c:	785b      	ldrb	r3, [r3, #1]
    4b7e:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4b82:	b2db      	uxtb	r3, r3
    4b84:	4611      	mov	r1, r2
    4b86:	f04f 0200 	mov.w	r2, #0
    4b8a:	00db      	lsls	r3, r3, #3
    4b8c:	f507 7000 	add.w	r0, r7, #512	; 0x200
    4b90:	4403      	add	r3, r0
    4b92:	3b80      	subs	r3, #128	; 0x80
    4b94:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    4b98:	f002 b9cd 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_SUB_IMM:
			DST = (u32)DST - (u32)IMM;
    4b9c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4ba0:	785b      	ldrb	r3, [r3, #1]
    4ba2:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4ba6:	b2db      	uxtb	r3, r3
    4ba8:	00db      	lsls	r3, r3, #3
    4baa:	f507 7200 	add.w	r2, r7, #512	; 0x200
    4bae:	4413      	add	r3, r2
    4bb0:	3b80      	subs	r3, #128	; 0x80
    4bb2:	e9d3 3400 	ldrd	r3, r4, [r3]
    4bb6:	461a      	mov	r2, r3
    4bb8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4bbc:	685b      	ldr	r3, [r3, #4]
    4bbe:	1ad2      	subs	r2, r2, r3
    4bc0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4bc4:	785b      	ldrb	r3, [r3, #1]
    4bc6:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4bca:	b2db      	uxtb	r3, r3
    4bcc:	4611      	mov	r1, r2
    4bce:	f04f 0200 	mov.w	r2, #0
    4bd2:	00db      	lsls	r3, r3, #3
    4bd4:	f507 7000 	add.w	r0, r7, #512	; 0x200
    4bd8:	4403      	add	r3, r0
    4bda:	3b80      	subs	r3, #128	; 0x80
    4bdc:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    4be0:	f002 b9a9 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_SUB_REG:
			DST = (u32)DST - (u32)SRC;
    4be4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4be8:	785b      	ldrb	r3, [r3, #1]
    4bea:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4bee:	b2db      	uxtb	r3, r3
    4bf0:	00db      	lsls	r3, r3, #3
    4bf2:	f507 7200 	add.w	r2, r7, #512	; 0x200
    4bf6:	4413      	add	r3, r2
    4bf8:	3b80      	subs	r3, #128	; 0x80
    4bfa:	e9d3 3400 	ldrd	r3, r4, [r3]
    4bfe:	461a      	mov	r2, r3
    4c00:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4c04:	785b      	ldrb	r3, [r3, #1]
    4c06:	f3c3 1303 	ubfx	r3, r3, #4, #4
    4c0a:	b2db      	uxtb	r3, r3
    4c0c:	00db      	lsls	r3, r3, #3
    4c0e:	f507 7100 	add.w	r1, r7, #512	; 0x200
    4c12:	440b      	add	r3, r1
    4c14:	3b80      	subs	r3, #128	; 0x80
    4c16:	e9d3 3400 	ldrd	r3, r4, [r3]
    4c1a:	1ad2      	subs	r2, r2, r3
    4c1c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4c20:	785b      	ldrb	r3, [r3, #1]
    4c22:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4c26:	b2db      	uxtb	r3, r3
    4c28:	4611      	mov	r1, r2
    4c2a:	f04f 0200 	mov.w	r2, #0
    4c2e:	00db      	lsls	r3, r3, #3
    4c30:	f507 7000 	add.w	r0, r7, #512	; 0x200
    4c34:	4403      	add	r3, r0
    4c36:	3b80      	subs	r3, #128	; 0x80
    4c38:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    4c3c:	f002 b97b 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_MUL_IMM:
			DST = (u32)DST * (u32)IMM;
    4c40:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4c44:	785b      	ldrb	r3, [r3, #1]
    4c46:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4c4a:	b2db      	uxtb	r3, r3
    4c4c:	00db      	lsls	r3, r3, #3
    4c4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
    4c52:	4413      	add	r3, r2
    4c54:	3b80      	subs	r3, #128	; 0x80
    4c56:	e9d3 3400 	ldrd	r3, r4, [r3]
    4c5a:	461a      	mov	r2, r3
    4c5c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4c60:	685b      	ldr	r3, [r3, #4]
    4c62:	fb03 f202 	mul.w	r2, r3, r2
    4c66:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4c6a:	785b      	ldrb	r3, [r3, #1]
    4c6c:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4c70:	b2db      	uxtb	r3, r3
    4c72:	4611      	mov	r1, r2
    4c74:	f04f 0200 	mov.w	r2, #0
    4c78:	00db      	lsls	r3, r3, #3
    4c7a:	f507 7000 	add.w	r0, r7, #512	; 0x200
    4c7e:	4403      	add	r3, r0
    4c80:	3b80      	subs	r3, #128	; 0x80
    4c82:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    4c86:	f002 b956 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_MUL_REG:
			DST = (u32)DST * (u32)SRC;
    4c8a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4c8e:	785b      	ldrb	r3, [r3, #1]
    4c90:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4c94:	b2db      	uxtb	r3, r3
    4c96:	00db      	lsls	r3, r3, #3
    4c98:	f507 7200 	add.w	r2, r7, #512	; 0x200
    4c9c:	4413      	add	r3, r2
    4c9e:	3b80      	subs	r3, #128	; 0x80
    4ca0:	e9d3 3400 	ldrd	r3, r4, [r3]
    4ca4:	461a      	mov	r2, r3
    4ca6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4caa:	785b      	ldrb	r3, [r3, #1]
    4cac:	f3c3 1303 	ubfx	r3, r3, #4, #4
    4cb0:	b2db      	uxtb	r3, r3
    4cb2:	00db      	lsls	r3, r3, #3
    4cb4:	f507 7100 	add.w	r1, r7, #512	; 0x200
    4cb8:	440b      	add	r3, r1
    4cba:	3b80      	subs	r3, #128	; 0x80
    4cbc:	e9d3 3400 	ldrd	r3, r4, [r3]
    4cc0:	fb03 f202 	mul.w	r2, r3, r2
    4cc4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4cc8:	785b      	ldrb	r3, [r3, #1]
    4cca:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4cce:	b2db      	uxtb	r3, r3
    4cd0:	4611      	mov	r1, r2
    4cd2:	f04f 0200 	mov.w	r2, #0
    4cd6:	00db      	lsls	r3, r3, #3
    4cd8:	f507 7000 	add.w	r0, r7, #512	; 0x200
    4cdc:	4403      	add	r3, r0
    4cde:	3b80      	subs	r3, #128	; 0x80
    4ce0:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    4ce4:	f002 b927 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_DIV_IMM:
			DST = (u32)DST / (u32)IMM;
    4ce8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4cec:	785b      	ldrb	r3, [r3, #1]
    4cee:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4cf2:	b2db      	uxtb	r3, r3
    4cf4:	00db      	lsls	r3, r3, #3
    4cf6:	f507 7200 	add.w	r2, r7, #512	; 0x200
    4cfa:	4413      	add	r3, r2
    4cfc:	3b80      	subs	r3, #128	; 0x80
    4cfe:	e9d3 3400 	ldrd	r3, r4, [r3]
    4d02:	461a      	mov	r2, r3
    4d04:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4d08:	685b      	ldr	r3, [r3, #4]
    4d0a:	fbb2 f2f3 	udiv	r2, r2, r3
    4d0e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4d12:	785b      	ldrb	r3, [r3, #1]
    4d14:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4d18:	b2db      	uxtb	r3, r3
    4d1a:	4611      	mov	r1, r2
    4d1c:	f04f 0200 	mov.w	r2, #0
    4d20:	00db      	lsls	r3, r3, #3
    4d22:	f507 7000 	add.w	r0, r7, #512	; 0x200
    4d26:	4403      	add	r3, r0
    4d28:	3b80      	subs	r3, #128	; 0x80
    4d2a:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    4d2e:	f002 b902 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_DIV_REG:
			if (SRC == 0) {
    4d32:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4d36:	785b      	ldrb	r3, [r3, #1]
    4d38:	f3c3 1303 	ubfx	r3, r3, #4, #4
    4d3c:	b2db      	uxtb	r3, r3
    4d3e:	00db      	lsls	r3, r3, #3
    4d40:	f507 7200 	add.w	r2, r7, #512	; 0x200
    4d44:	4413      	add	r3, r2
    4d46:	3b80      	subs	r3, #128	; 0x80
    4d48:	e9d3 3400 	ldrd	r3, r4, [r3]
    4d4c:	4323      	orrs	r3, r4
    4d4e:	d105      	bne.n	4d5c <ebpf_vm_exec+0x654>
				//fprintf(stderr, "uBPF error: division by zero at PC %u\n", cur_pc);
				return -1;
    4d50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4d54:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    4d58:	f002 b8ef 	b.w	6f3a <ebpf_vm_exec+0x2832>
			}
			DST = (u32)DST / (u32)SRC;
    4d5c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4d60:	785b      	ldrb	r3, [r3, #1]
    4d62:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4d66:	b2db      	uxtb	r3, r3
    4d68:	00db      	lsls	r3, r3, #3
    4d6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
    4d6e:	4413      	add	r3, r2
    4d70:	3b80      	subs	r3, #128	; 0x80
    4d72:	e9d3 3400 	ldrd	r3, r4, [r3]
    4d76:	461a      	mov	r2, r3
    4d78:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4d7c:	785b      	ldrb	r3, [r3, #1]
    4d7e:	f3c3 1303 	ubfx	r3, r3, #4, #4
    4d82:	b2db      	uxtb	r3, r3
    4d84:	00db      	lsls	r3, r3, #3
    4d86:	f507 7100 	add.w	r1, r7, #512	; 0x200
    4d8a:	440b      	add	r3, r1
    4d8c:	3b80      	subs	r3, #128	; 0x80
    4d8e:	e9d3 3400 	ldrd	r3, r4, [r3]
    4d92:	fbb2 f2f3 	udiv	r2, r2, r3
    4d96:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4d9a:	785b      	ldrb	r3, [r3, #1]
    4d9c:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4da0:	b2db      	uxtb	r3, r3
    4da2:	4611      	mov	r1, r2
    4da4:	f04f 0200 	mov.w	r2, #0
    4da8:	00db      	lsls	r3, r3, #3
    4daa:	f507 7000 	add.w	r0, r7, #512	; 0x200
    4dae:	4403      	add	r3, r0
    4db0:	3b80      	subs	r3, #128	; 0x80
    4db2:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    4db6:	f002 b8be 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_OR_IMM:
			DST = (u32)DST | (u32)IMM;
    4dba:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4dbe:	785b      	ldrb	r3, [r3, #1]
    4dc0:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4dc4:	b2db      	uxtb	r3, r3
    4dc6:	00db      	lsls	r3, r3, #3
    4dc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
    4dcc:	4413      	add	r3, r2
    4dce:	3b80      	subs	r3, #128	; 0x80
    4dd0:	e9d3 3400 	ldrd	r3, r4, [r3]
    4dd4:	461a      	mov	r2, r3
    4dd6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4dda:	685b      	ldr	r3, [r3, #4]
    4ddc:	431a      	orrs	r2, r3
    4dde:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4de2:	785b      	ldrb	r3, [r3, #1]
    4de4:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4de8:	b2db      	uxtb	r3, r3
    4dea:	4611      	mov	r1, r2
    4dec:	f04f 0200 	mov.w	r2, #0
    4df0:	00db      	lsls	r3, r3, #3
    4df2:	f507 7000 	add.w	r0, r7, #512	; 0x200
    4df6:	4403      	add	r3, r0
    4df8:	3b80      	subs	r3, #128	; 0x80
    4dfa:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    4dfe:	f002 b89a 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_OR_REG:
			DST = (u32)DST | (u32)SRC;
    4e02:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4e06:	785b      	ldrb	r3, [r3, #1]
    4e08:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4e0c:	b2db      	uxtb	r3, r3
    4e0e:	00db      	lsls	r3, r3, #3
    4e10:	f507 7200 	add.w	r2, r7, #512	; 0x200
    4e14:	4413      	add	r3, r2
    4e16:	3b80      	subs	r3, #128	; 0x80
    4e18:	e9d3 3400 	ldrd	r3, r4, [r3]
    4e1c:	461a      	mov	r2, r3
    4e1e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4e22:	785b      	ldrb	r3, [r3, #1]
    4e24:	f3c3 1303 	ubfx	r3, r3, #4, #4
    4e28:	b2db      	uxtb	r3, r3
    4e2a:	00db      	lsls	r3, r3, #3
    4e2c:	f507 7100 	add.w	r1, r7, #512	; 0x200
    4e30:	440b      	add	r3, r1
    4e32:	3b80      	subs	r3, #128	; 0x80
    4e34:	e9d3 3400 	ldrd	r3, r4, [r3]
    4e38:	431a      	orrs	r2, r3
    4e3a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4e3e:	785b      	ldrb	r3, [r3, #1]
    4e40:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4e44:	b2db      	uxtb	r3, r3
    4e46:	4611      	mov	r1, r2
    4e48:	f04f 0200 	mov.w	r2, #0
    4e4c:	00db      	lsls	r3, r3, #3
    4e4e:	f507 7000 	add.w	r0, r7, #512	; 0x200
    4e52:	4403      	add	r3, r0
    4e54:	3b80      	subs	r3, #128	; 0x80
    4e56:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    4e5a:	f002 b86c 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_AND_IMM:
			DST = (u32)DST & (u32)IMM;
    4e5e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4e62:	785b      	ldrb	r3, [r3, #1]
    4e64:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4e68:	b2db      	uxtb	r3, r3
    4e6a:	00db      	lsls	r3, r3, #3
    4e6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
    4e70:	4413      	add	r3, r2
    4e72:	3b80      	subs	r3, #128	; 0x80
    4e74:	e9d3 3400 	ldrd	r3, r4, [r3]
    4e78:	461a      	mov	r2, r3
    4e7a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4e7e:	685b      	ldr	r3, [r3, #4]
    4e80:	401a      	ands	r2, r3
    4e82:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4e86:	785b      	ldrb	r3, [r3, #1]
    4e88:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4e8c:	b2db      	uxtb	r3, r3
    4e8e:	4611      	mov	r1, r2
    4e90:	f04f 0200 	mov.w	r2, #0
    4e94:	00db      	lsls	r3, r3, #3
    4e96:	f507 7000 	add.w	r0, r7, #512	; 0x200
    4e9a:	4403      	add	r3, r0
    4e9c:	3b80      	subs	r3, #128	; 0x80
    4e9e:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    4ea2:	f002 b848 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_AND_REG:
			DST = (u32)DST & (u32)SRC;
    4ea6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4eaa:	785b      	ldrb	r3, [r3, #1]
    4eac:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4eb0:	b2db      	uxtb	r3, r3
    4eb2:	00db      	lsls	r3, r3, #3
    4eb4:	f507 7200 	add.w	r2, r7, #512	; 0x200
    4eb8:	4413      	add	r3, r2
    4eba:	3b80      	subs	r3, #128	; 0x80
    4ebc:	e9d3 3400 	ldrd	r3, r4, [r3]
    4ec0:	461a      	mov	r2, r3
    4ec2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4ec6:	785b      	ldrb	r3, [r3, #1]
    4ec8:	f3c3 1303 	ubfx	r3, r3, #4, #4
    4ecc:	b2db      	uxtb	r3, r3
    4ece:	00db      	lsls	r3, r3, #3
    4ed0:	f507 7100 	add.w	r1, r7, #512	; 0x200
    4ed4:	440b      	add	r3, r1
    4ed6:	3b80      	subs	r3, #128	; 0x80
    4ed8:	e9d3 3400 	ldrd	r3, r4, [r3]
    4edc:	401a      	ands	r2, r3
    4ede:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4ee2:	785b      	ldrb	r3, [r3, #1]
    4ee4:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4ee8:	b2db      	uxtb	r3, r3
    4eea:	4611      	mov	r1, r2
    4eec:	f04f 0200 	mov.w	r2, #0
    4ef0:	00db      	lsls	r3, r3, #3
    4ef2:	f507 7000 	add.w	r0, r7, #512	; 0x200
    4ef6:	4403      	add	r3, r0
    4ef8:	3b80      	subs	r3, #128	; 0x80
    4efa:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    4efe:	f002 b81a 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_LSH_IMM:
			DST = (u32)DST << (u32)IMM;
    4f02:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4f06:	785b      	ldrb	r3, [r3, #1]
    4f08:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4f0c:	b2db      	uxtb	r3, r3
    4f0e:	00db      	lsls	r3, r3, #3
    4f10:	f507 7200 	add.w	r2, r7, #512	; 0x200
    4f14:	4413      	add	r3, r2
    4f16:	3b80      	subs	r3, #128	; 0x80
    4f18:	e9d3 3400 	ldrd	r3, r4, [r3]
    4f1c:	461a      	mov	r2, r3
    4f1e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4f22:	685b      	ldr	r3, [r3, #4]
    4f24:	409a      	lsls	r2, r3
    4f26:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4f2a:	785b      	ldrb	r3, [r3, #1]
    4f2c:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4f30:	b2db      	uxtb	r3, r3
    4f32:	4611      	mov	r1, r2
    4f34:	f04f 0200 	mov.w	r2, #0
    4f38:	00db      	lsls	r3, r3, #3
    4f3a:	f507 7000 	add.w	r0, r7, #512	; 0x200
    4f3e:	4403      	add	r3, r0
    4f40:	3b80      	subs	r3, #128	; 0x80
    4f42:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    4f46:	f001 bff6 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_LSH_REG:
			DST = (u32)DST << (u32)SRC;
    4f4a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4f4e:	785b      	ldrb	r3, [r3, #1]
    4f50:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4f54:	b2db      	uxtb	r3, r3
    4f56:	00db      	lsls	r3, r3, #3
    4f58:	f507 7200 	add.w	r2, r7, #512	; 0x200
    4f5c:	4413      	add	r3, r2
    4f5e:	3b80      	subs	r3, #128	; 0x80
    4f60:	e9d3 3400 	ldrd	r3, r4, [r3]
    4f64:	461a      	mov	r2, r3
    4f66:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4f6a:	785b      	ldrb	r3, [r3, #1]
    4f6c:	f3c3 1303 	ubfx	r3, r3, #4, #4
    4f70:	b2db      	uxtb	r3, r3
    4f72:	00db      	lsls	r3, r3, #3
    4f74:	f507 7100 	add.w	r1, r7, #512	; 0x200
    4f78:	440b      	add	r3, r1
    4f7a:	3b80      	subs	r3, #128	; 0x80
    4f7c:	e9d3 3400 	ldrd	r3, r4, [r3]
    4f80:	409a      	lsls	r2, r3
    4f82:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4f86:	785b      	ldrb	r3, [r3, #1]
    4f88:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4f8c:	b2db      	uxtb	r3, r3
    4f8e:	4611      	mov	r1, r2
    4f90:	f04f 0200 	mov.w	r2, #0
    4f94:	00db      	lsls	r3, r3, #3
    4f96:	f507 7000 	add.w	r0, r7, #512	; 0x200
    4f9a:	4403      	add	r3, r0
    4f9c:	3b80      	subs	r3, #128	; 0x80
    4f9e:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    4fa2:	f001 bfc8 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_RSH_IMM:
			DST = (u32)DST >> (u32)IMM;
    4fa6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4faa:	785b      	ldrb	r3, [r3, #1]
    4fac:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4fb0:	b2db      	uxtb	r3, r3
    4fb2:	00db      	lsls	r3, r3, #3
    4fb4:	f507 7200 	add.w	r2, r7, #512	; 0x200
    4fb8:	4413      	add	r3, r2
    4fba:	3b80      	subs	r3, #128	; 0x80
    4fbc:	e9d3 3400 	ldrd	r3, r4, [r3]
    4fc0:	461a      	mov	r2, r3
    4fc2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4fc6:	685b      	ldr	r3, [r3, #4]
    4fc8:	40da      	lsrs	r2, r3
    4fca:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4fce:	785b      	ldrb	r3, [r3, #1]
    4fd0:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4fd4:	b2db      	uxtb	r3, r3
    4fd6:	4611      	mov	r1, r2
    4fd8:	f04f 0200 	mov.w	r2, #0
    4fdc:	00db      	lsls	r3, r3, #3
    4fde:	f507 7000 	add.w	r0, r7, #512	; 0x200
    4fe2:	4403      	add	r3, r0
    4fe4:	3b80      	subs	r3, #128	; 0x80
    4fe6:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    4fea:	f001 bfa4 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_RSH_REG:
			DST = (u32)DST >> (u32)SRC;
    4fee:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    4ff2:	785b      	ldrb	r3, [r3, #1]
    4ff4:	f3c3 0303 	ubfx	r3, r3, #0, #4
    4ff8:	b2db      	uxtb	r3, r3
    4ffa:	00db      	lsls	r3, r3, #3
    4ffc:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5000:	4413      	add	r3, r2
    5002:	3b80      	subs	r3, #128	; 0x80
    5004:	e9d3 3400 	ldrd	r3, r4, [r3]
    5008:	461a      	mov	r2, r3
    500a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    500e:	785b      	ldrb	r3, [r3, #1]
    5010:	f3c3 1303 	ubfx	r3, r3, #4, #4
    5014:	b2db      	uxtb	r3, r3
    5016:	00db      	lsls	r3, r3, #3
    5018:	f507 7100 	add.w	r1, r7, #512	; 0x200
    501c:	440b      	add	r3, r1
    501e:	3b80      	subs	r3, #128	; 0x80
    5020:	e9d3 3400 	ldrd	r3, r4, [r3]
    5024:	40da      	lsrs	r2, r3
    5026:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    502a:	785b      	ldrb	r3, [r3, #1]
    502c:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5030:	b2db      	uxtb	r3, r3
    5032:	4611      	mov	r1, r2
    5034:	f04f 0200 	mov.w	r2, #0
    5038:	00db      	lsls	r3, r3, #3
    503a:	f507 7000 	add.w	r0, r7, #512	; 0x200
    503e:	4403      	add	r3, r0
    5040:	3b80      	subs	r3, #128	; 0x80
    5042:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    5046:	f001 bf76 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_NEG:
			DST = (u32)-DST;
    504a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    504e:	785b      	ldrb	r3, [r3, #1]
    5050:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5054:	b2db      	uxtb	r3, r3
    5056:	00db      	lsls	r3, r3, #3
    5058:	f507 7200 	add.w	r2, r7, #512	; 0x200
    505c:	4413      	add	r3, r2
    505e:	3b80      	subs	r3, #128	; 0x80
    5060:	e9d3 3400 	ldrd	r3, r4, [r3]
    5064:	425a      	negs	r2, r3
    5066:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    506a:	785b      	ldrb	r3, [r3, #1]
    506c:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5070:	b2db      	uxtb	r3, r3
    5072:	4611      	mov	r1, r2
    5074:	f04f 0200 	mov.w	r2, #0
    5078:	00db      	lsls	r3, r3, #3
    507a:	f507 7000 	add.w	r0, r7, #512	; 0x200
    507e:	4403      	add	r3, r0
    5080:	3b80      	subs	r3, #128	; 0x80
    5082:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    5086:	f001 bf56 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_MOD_IMM:
			DST = (u32)DST % (u32)IMM;
    508a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    508e:	785b      	ldrb	r3, [r3, #1]
    5090:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5094:	b2db      	uxtb	r3, r3
    5096:	00db      	lsls	r3, r3, #3
    5098:	f507 7200 	add.w	r2, r7, #512	; 0x200
    509c:	4413      	add	r3, r2
    509e:	3b80      	subs	r3, #128	; 0x80
    50a0:	e9d3 3400 	ldrd	r3, r4, [r3]
    50a4:	4619      	mov	r1, r3
    50a6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    50aa:	685b      	ldr	r3, [r3, #4]
    50ac:	461a      	mov	r2, r3
    50ae:	fbb1 f3f2 	udiv	r3, r1, r2
    50b2:	fb02 f303 	mul.w	r3, r2, r3
    50b6:	1aca      	subs	r2, r1, r3
    50b8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    50bc:	785b      	ldrb	r3, [r3, #1]
    50be:	f3c3 0303 	ubfx	r3, r3, #0, #4
    50c2:	b2db      	uxtb	r3, r3
    50c4:	4611      	mov	r1, r2
    50c6:	f04f 0200 	mov.w	r2, #0
    50ca:	00db      	lsls	r3, r3, #3
    50cc:	f507 7000 	add.w	r0, r7, #512	; 0x200
    50d0:	4403      	add	r3, r0
    50d2:	3b80      	subs	r3, #128	; 0x80
    50d4:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    50d8:	f001 bf2d 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_MOD_REG:
			if (reg[inst->src] == 0) {
    50dc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    50e0:	785b      	ldrb	r3, [r3, #1]
    50e2:	f3c3 1303 	ubfx	r3, r3, #4, #4
    50e6:	b2db      	uxtb	r3, r3
    50e8:	00db      	lsls	r3, r3, #3
    50ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
    50ee:	4413      	add	r3, r2
    50f0:	3b80      	subs	r3, #128	; 0x80
    50f2:	e9d3 3400 	ldrd	r3, r4, [r3]
    50f6:	4323      	orrs	r3, r4
    50f8:	d105      	bne.n	5106 <ebpf_vm_exec+0x9fe>
				//fprintf(stderr, "uBPF error: division by zero at PC %u\n", cur_pc);
				return -1;
    50fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    50fe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    5102:	f001 bf1a 	b.w	6f3a <ebpf_vm_exec+0x2832>
			}
			DST = (u32)DST % (u32)SRC;
    5106:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    510a:	785b      	ldrb	r3, [r3, #1]
    510c:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5110:	b2db      	uxtb	r3, r3
    5112:	00db      	lsls	r3, r3, #3
    5114:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5118:	4413      	add	r3, r2
    511a:	3b80      	subs	r3, #128	; 0x80
    511c:	e9d3 3400 	ldrd	r3, r4, [r3]
    5120:	4619      	mov	r1, r3
    5122:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5126:	785b      	ldrb	r3, [r3, #1]
    5128:	f3c3 1303 	ubfx	r3, r3, #4, #4
    512c:	b2db      	uxtb	r3, r3
    512e:	00db      	lsls	r3, r3, #3
    5130:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5134:	4413      	add	r3, r2
    5136:	3b80      	subs	r3, #128	; 0x80
    5138:	e9d3 3400 	ldrd	r3, r4, [r3]
    513c:	461a      	mov	r2, r3
    513e:	fbb1 f3f2 	udiv	r3, r1, r2
    5142:	fb02 f303 	mul.w	r3, r2, r3
    5146:	1aca      	subs	r2, r1, r3
    5148:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    514c:	785b      	ldrb	r3, [r3, #1]
    514e:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5152:	b2db      	uxtb	r3, r3
    5154:	4611      	mov	r1, r2
    5156:	f04f 0200 	mov.w	r2, #0
    515a:	00db      	lsls	r3, r3, #3
    515c:	f507 7000 	add.w	r0, r7, #512	; 0x200
    5160:	4403      	add	r3, r0
    5162:	3b80      	subs	r3, #128	; 0x80
    5164:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    5168:	f001 bee5 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_XOR_IMM:
			DST = (u32)DST ^ (u32)IMM;
    516c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5170:	785b      	ldrb	r3, [r3, #1]
    5172:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5176:	b2db      	uxtb	r3, r3
    5178:	00db      	lsls	r3, r3, #3
    517a:	f507 7200 	add.w	r2, r7, #512	; 0x200
    517e:	4413      	add	r3, r2
    5180:	3b80      	subs	r3, #128	; 0x80
    5182:	e9d3 3400 	ldrd	r3, r4, [r3]
    5186:	461a      	mov	r2, r3
    5188:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    518c:	685b      	ldr	r3, [r3, #4]
    518e:	405a      	eors	r2, r3
    5190:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5194:	785b      	ldrb	r3, [r3, #1]
    5196:	f3c3 0303 	ubfx	r3, r3, #0, #4
    519a:	b2db      	uxtb	r3, r3
    519c:	4611      	mov	r1, r2
    519e:	f04f 0200 	mov.w	r2, #0
    51a2:	00db      	lsls	r3, r3, #3
    51a4:	f507 7000 	add.w	r0, r7, #512	; 0x200
    51a8:	4403      	add	r3, r0
    51aa:	3b80      	subs	r3, #128	; 0x80
    51ac:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    51b0:	f001 bec1 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_XOR_REG:
			DST = (u32)DST ^ (u32)SRC;
    51b4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    51b8:	785b      	ldrb	r3, [r3, #1]
    51ba:	f3c3 0303 	ubfx	r3, r3, #0, #4
    51be:	b2db      	uxtb	r3, r3
    51c0:	00db      	lsls	r3, r3, #3
    51c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
    51c6:	4413      	add	r3, r2
    51c8:	3b80      	subs	r3, #128	; 0x80
    51ca:	e9d3 3400 	ldrd	r3, r4, [r3]
    51ce:	461a      	mov	r2, r3
    51d0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    51d4:	785b      	ldrb	r3, [r3, #1]
    51d6:	f3c3 1303 	ubfx	r3, r3, #4, #4
    51da:	b2db      	uxtb	r3, r3
    51dc:	00db      	lsls	r3, r3, #3
    51de:	f507 7100 	add.w	r1, r7, #512	; 0x200
    51e2:	440b      	add	r3, r1
    51e4:	3b80      	subs	r3, #128	; 0x80
    51e6:	e9d3 3400 	ldrd	r3, r4, [r3]
    51ea:	405a      	eors	r2, r3
    51ec:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    51f0:	785b      	ldrb	r3, [r3, #1]
    51f2:	f3c3 0303 	ubfx	r3, r3, #0, #4
    51f6:	b2db      	uxtb	r3, r3
    51f8:	4611      	mov	r1, r2
    51fa:	f04f 0200 	mov.w	r2, #0
    51fe:	00db      	lsls	r3, r3, #3
    5200:	f507 7000 	add.w	r0, r7, #512	; 0x200
    5204:	4403      	add	r3, r0
    5206:	3b80      	subs	r3, #128	; 0x80
    5208:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    520c:	f001 be93 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_MOV_IMM:
			DST = (u32)IMM;
    5210:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5214:	685b      	ldr	r3, [r3, #4]
    5216:	461a      	mov	r2, r3
    5218:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    521c:	785b      	ldrb	r3, [r3, #1]
    521e:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5222:	b2db      	uxtb	r3, r3
    5224:	4611      	mov	r1, r2
    5226:	f04f 0200 	mov.w	r2, #0
    522a:	00db      	lsls	r3, r3, #3
    522c:	f507 7000 	add.w	r0, r7, #512	; 0x200
    5230:	4403      	add	r3, r0
    5232:	3b80      	subs	r3, #128	; 0x80
    5234:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    5238:	f001 be7d 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_MOV_REG:
			DST = (u32)SRC;
    523c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5240:	785b      	ldrb	r3, [r3, #1]
    5242:	f3c3 1303 	ubfx	r3, r3, #4, #4
    5246:	b2db      	uxtb	r3, r3
    5248:	00db      	lsls	r3, r3, #3
    524a:	f507 7200 	add.w	r2, r7, #512	; 0x200
    524e:	4413      	add	r3, r2
    5250:	3b80      	subs	r3, #128	; 0x80
    5252:	e9d3 3400 	ldrd	r3, r4, [r3]
    5256:	461a      	mov	r2, r3
    5258:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    525c:	785b      	ldrb	r3, [r3, #1]
    525e:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5262:	b2db      	uxtb	r3, r3
    5264:	4611      	mov	r1, r2
    5266:	f04f 0200 	mov.w	r2, #0
    526a:	00db      	lsls	r3, r3, #3
    526c:	f507 7000 	add.w	r0, r7, #512	; 0x200
    5270:	4403      	add	r3, r0
    5272:	3b80      	subs	r3, #128	; 0x80
    5274:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    5278:	f001 be5d 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_ARSH_IMM:
			DST = (u64)(u32)(((s32)DST) >> IMM);
    527c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5280:	785b      	ldrb	r3, [r3, #1]
    5282:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5286:	b2db      	uxtb	r3, r3
    5288:	00db      	lsls	r3, r3, #3
    528a:	f507 7200 	add.w	r2, r7, #512	; 0x200
    528e:	4413      	add	r3, r2
    5290:	3b80      	subs	r3, #128	; 0x80
    5292:	e9d3 3400 	ldrd	r3, r4, [r3]
    5296:	461a      	mov	r2, r3
    5298:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    529c:	685b      	ldr	r3, [r3, #4]
    529e:	fa42 f303 	asr.w	r3, r2, r3
    52a2:	461a      	mov	r2, r3
    52a4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    52a8:	785b      	ldrb	r3, [r3, #1]
    52aa:	f3c3 0303 	ubfx	r3, r3, #0, #4
    52ae:	b2db      	uxtb	r3, r3
    52b0:	4611      	mov	r1, r2
    52b2:	f04f 0200 	mov.w	r2, #0
    52b6:	00db      	lsls	r3, r3, #3
    52b8:	f507 7000 	add.w	r0, r7, #512	; 0x200
    52bc:	4403      	add	r3, r0
    52be:	3b80      	subs	r3, #128	; 0x80
    52c0:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    52c4:	f001 be37 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_ARSH_REG:
			DST = (u64)(u32)(((s32)DST) >> SRC);
    52c8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    52cc:	785b      	ldrb	r3, [r3, #1]
    52ce:	f3c3 0303 	ubfx	r3, r3, #0, #4
    52d2:	b2db      	uxtb	r3, r3
    52d4:	00db      	lsls	r3, r3, #3
    52d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
    52da:	4413      	add	r3, r2
    52dc:	3b80      	subs	r3, #128	; 0x80
    52de:	e9d3 3400 	ldrd	r3, r4, [r3]
    52e2:	461a      	mov	r2, r3
    52e4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    52e8:	785b      	ldrb	r3, [r3, #1]
    52ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
    52ee:	b2db      	uxtb	r3, r3
    52f0:	00db      	lsls	r3, r3, #3
    52f2:	f507 7100 	add.w	r1, r7, #512	; 0x200
    52f6:	440b      	add	r3, r1
    52f8:	3b80      	subs	r3, #128	; 0x80
    52fa:	e9d3 3400 	ldrd	r3, r4, [r3]
    52fe:	fa42 f303 	asr.w	r3, r2, r3
    5302:	461a      	mov	r2, r3
    5304:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5308:	785b      	ldrb	r3, [r3, #1]
    530a:	f3c3 0303 	ubfx	r3, r3, #0, #4
    530e:	b2db      	uxtb	r3, r3
    5310:	4611      	mov	r1, r2
    5312:	f04f 0200 	mov.w	r2, #0
    5316:	00db      	lsls	r3, r3, #3
    5318:	f507 7000 	add.w	r0, r7, #512	; 0x200
    531c:	4403      	add	r3, r0
    531e:	3b80      	subs	r3, #128	; 0x80
    5320:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    5324:	f001 be07 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_LE:
			switch (IMM) {
    5328:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    532c:	685b      	ldr	r3, [r3, #4]
    532e:	2b20      	cmp	r3, #32
    5330:	d021      	beq.n	5376 <ebpf_vm_exec+0xc6e>
    5332:	2b40      	cmp	r3, #64	; 0x40
    5334:	d03c      	beq.n	53b0 <ebpf_vm_exec+0xca8>
    5336:	2b10      	cmp	r3, #16
    5338:	f041 85b7 	bne.w	6eaa <ebpf_vm_exec+0x27a2>
			case 16:
				DST = my_htole16(DST);
    533c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5340:	785b      	ldrb	r3, [r3, #1]
    5342:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5346:	b2db      	uxtb	r3, r3
    5348:	461a      	mov	r2, r3
    534a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    534e:	785b      	ldrb	r3, [r3, #1]
    5350:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5354:	b2db      	uxtb	r3, r3
    5356:	4618      	mov	r0, r3
    5358:	00d3      	lsls	r3, r2, #3
    535a:	f507 7200 	add.w	r2, r7, #512	; 0x200
    535e:	4413      	add	r3, r2
    5360:	3b80      	subs	r3, #128	; 0x80
    5362:	e9d3 1200 	ldrd	r1, r2, [r3]
    5366:	00c3      	lsls	r3, r0, #3
    5368:	f507 7000 	add.w	r0, r7, #512	; 0x200
    536c:	4403      	add	r3, r0
    536e:	3b80      	subs	r3, #128	; 0x80
    5370:	e9c3 1200 	strd	r1, r2, [r3]
				break;
    5374:	e039      	b.n	53ea <ebpf_vm_exec+0xce2>
			case 32:
				DST = my_htole32(DST);
    5376:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    537a:	785b      	ldrb	r3, [r3, #1]
    537c:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5380:	b2db      	uxtb	r3, r3
    5382:	461a      	mov	r2, r3
    5384:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5388:	785b      	ldrb	r3, [r3, #1]
    538a:	f3c3 0303 	ubfx	r3, r3, #0, #4
    538e:	b2db      	uxtb	r3, r3
    5390:	4618      	mov	r0, r3
    5392:	00d3      	lsls	r3, r2, #3
    5394:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5398:	4413      	add	r3, r2
    539a:	3b80      	subs	r3, #128	; 0x80
    539c:	e9d3 1200 	ldrd	r1, r2, [r3]
    53a0:	00c3      	lsls	r3, r0, #3
    53a2:	f507 7000 	add.w	r0, r7, #512	; 0x200
    53a6:	4403      	add	r3, r0
    53a8:	3b80      	subs	r3, #128	; 0x80
    53aa:	e9c3 1200 	strd	r1, r2, [r3]
				break;
    53ae:	e01c      	b.n	53ea <ebpf_vm_exec+0xce2>
			case 64:
				DST = my_htole64(DST);
    53b0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    53b4:	785b      	ldrb	r3, [r3, #1]
    53b6:	f3c3 0303 	ubfx	r3, r3, #0, #4
    53ba:	b2db      	uxtb	r3, r3
    53bc:	461a      	mov	r2, r3
    53be:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    53c2:	785b      	ldrb	r3, [r3, #1]
    53c4:	f3c3 0303 	ubfx	r3, r3, #0, #4
    53c8:	b2db      	uxtb	r3, r3
    53ca:	4618      	mov	r0, r3
    53cc:	00d3      	lsls	r3, r2, #3
    53ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
    53d2:	4413      	add	r3, r2
    53d4:	3b80      	subs	r3, #128	; 0x80
    53d6:	e9d3 1200 	ldrd	r1, r2, [r3]
    53da:	00c3      	lsls	r3, r0, #3
    53dc:	f507 7000 	add.w	r0, r7, #512	; 0x200
    53e0:	4403      	add	r3, r0
    53e2:	3b80      	subs	r3, #128	; 0x80
    53e4:	e9c3 1200 	strd	r1, r2, [r3]
				break;
    53e8:	bf00      	nop
			}
			break;
    53ea:	f001 bd5e 	b.w	6eaa <ebpf_vm_exec+0x27a2>
		case EBPF_OP_BE:
			switch (IMM) {
    53ee:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    53f2:	685b      	ldr	r3, [r3, #4]
    53f4:	2b20      	cmp	r3, #32
    53f6:	d028      	beq.n	544a <ebpf_vm_exec+0xd42>
    53f8:	2b40      	cmp	r3, #64	; 0x40
    53fa:	d048      	beq.n	548e <ebpf_vm_exec+0xd86>
    53fc:	2b10      	cmp	r3, #16
    53fe:	f041 8557 	bne.w	6eb0 <ebpf_vm_exec+0x27a8>
			case 16:
				DST = my_htobe16(DST);
    5402:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5406:	785b      	ldrb	r3, [r3, #1]
    5408:	f3c3 0303 	ubfx	r3, r3, #0, #4
    540c:	b2db      	uxtb	r3, r3
    540e:	00db      	lsls	r3, r3, #3
    5410:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5414:	4413      	add	r3, r2
    5416:	3b80      	subs	r3, #128	; 0x80
    5418:	e9d3 3400 	ldrd	r3, r4, [r3]
    541c:	b29b      	uxth	r3, r3
    541e:	4618      	mov	r0, r3
    5420:	f013 feb7 	bl	19192 <__swap16>
    5424:	4603      	mov	r3, r0
    5426:	461a      	mov	r2, r3
    5428:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    542c:	785b      	ldrb	r3, [r3, #1]
    542e:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5432:	b2db      	uxtb	r3, r3
    5434:	b291      	uxth	r1, r2
    5436:	f04f 0200 	mov.w	r2, #0
    543a:	00db      	lsls	r3, r3, #3
    543c:	f507 7000 	add.w	r0, r7, #512	; 0x200
    5440:	4403      	add	r3, r0
    5442:	3b80      	subs	r3, #128	; 0x80
    5444:	e9c3 1200 	strd	r1, r2, [r3]
				break;
    5448:	e043      	b.n	54d2 <ebpf_vm_exec+0xdca>
			case 32:
				DST = my_htobe32(DST);
    544a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    544e:	785b      	ldrb	r3, [r3, #1]
    5450:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5454:	b2db      	uxtb	r3, r3
    5456:	00db      	lsls	r3, r3, #3
    5458:	f507 7200 	add.w	r2, r7, #512	; 0x200
    545c:	4413      	add	r3, r2
    545e:	3b80      	subs	r3, #128	; 0x80
    5460:	e9d3 3400 	ldrd	r3, r4, [r3]
    5464:	4618      	mov	r0, r3
    5466:	f013 fea8 	bl	191ba <__swap32>
    546a:	4602      	mov	r2, r0
    546c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5470:	785b      	ldrb	r3, [r3, #1]
    5472:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5476:	b2db      	uxtb	r3, r3
    5478:	4611      	mov	r1, r2
    547a:	f04f 0200 	mov.w	r2, #0
    547e:	00db      	lsls	r3, r3, #3
    5480:	f507 7000 	add.w	r0, r7, #512	; 0x200
    5484:	4403      	add	r3, r0
    5486:	3b80      	subs	r3, #128	; 0x80
    5488:	e9c3 1200 	strd	r1, r2, [r3]
				break;
    548c:	e021      	b.n	54d2 <ebpf_vm_exec+0xdca>
			case 64:
				DST = my_htobe64(DST);
    548e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5492:	785b      	ldrb	r3, [r3, #1]
    5494:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5498:	b2db      	uxtb	r3, r3
    549a:	00db      	lsls	r3, r3, #3
    549c:	f507 7200 	add.w	r2, r7, #512	; 0x200
    54a0:	4413      	add	r3, r2
    54a2:	3b80      	subs	r3, #128	; 0x80
    54a4:	e9d3 1200 	ldrd	r1, r2, [r3]
    54a8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    54ac:	785b      	ldrb	r3, [r3, #1]
    54ae:	f3c3 0303 	ubfx	r3, r3, #0, #4
    54b2:	b2db      	uxtb	r3, r3
    54b4:	461c      	mov	r4, r3
    54b6:	4608      	mov	r0, r1
    54b8:	4611      	mov	r1, r2
    54ba:	f013 fe96 	bl	191ea <__swap64>
    54be:	460a      	mov	r2, r1
    54c0:	4601      	mov	r1, r0
    54c2:	00e3      	lsls	r3, r4, #3
    54c4:	f507 7000 	add.w	r0, r7, #512	; 0x200
    54c8:	4403      	add	r3, r0
    54ca:	3b80      	subs	r3, #128	; 0x80
    54cc:	e9c3 1200 	strd	r1, r2, [r3]
				break;
    54d0:	bf00      	nop
			}
			break;
    54d2:	f001 bced 	b.w	6eb0 <ebpf_vm_exec+0x27a8>
			// 64
		case EBPF_OP_ADD64_IMM:
			DST = DST + IMM;
    54d6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    54da:	785b      	ldrb	r3, [r3, #1]
    54dc:	f3c3 0303 	ubfx	r3, r3, #0, #4
    54e0:	b2db      	uxtb	r3, r3
    54e2:	00db      	lsls	r3, r3, #3
    54e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
    54e8:	4413      	add	r3, r2
    54ea:	3b80      	subs	r3, #128	; 0x80
    54ec:	e9d3 4500 	ldrd	r4, r5, [r3]
    54f0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    54f4:	685b      	ldr	r3, [r3, #4]
    54f6:	4619      	mov	r1, r3
    54f8:	ea4f 72e1 	mov.w	r2, r1, asr #31
    54fc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5500:	785b      	ldrb	r3, [r3, #1]
    5502:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5506:	b2db      	uxtb	r3, r3
    5508:	1860      	adds	r0, r4, r1
    550a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
    550e:	eb45 0202 	adc.w	r2, r5, r2
    5512:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
    5516:	00db      	lsls	r3, r3, #3
    5518:	f507 7200 	add.w	r2, r7, #512	; 0x200
    551c:	4413      	add	r3, r2
    551e:	3b80      	subs	r3, #128	; 0x80
    5520:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
    5524:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    5528:	f001 bd05 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_ADD64_REG:
			DST = DST + SRC;
    552c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5530:	785b      	ldrb	r3, [r3, #1]
    5532:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5536:	b2db      	uxtb	r3, r3
    5538:	00db      	lsls	r3, r3, #3
    553a:	f507 7200 	add.w	r2, r7, #512	; 0x200
    553e:	4413      	add	r3, r2
    5540:	3b80      	subs	r3, #128	; 0x80
    5542:	e9d3 4500 	ldrd	r4, r5, [r3]
    5546:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    554a:	785b      	ldrb	r3, [r3, #1]
    554c:	f3c3 1303 	ubfx	r3, r3, #4, #4
    5550:	b2db      	uxtb	r3, r3
    5552:	00db      	lsls	r3, r3, #3
    5554:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5558:	4413      	add	r3, r2
    555a:	3b80      	subs	r3, #128	; 0x80
    555c:	e9d3 1200 	ldrd	r1, r2, [r3]
    5560:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5564:	785b      	ldrb	r3, [r3, #1]
    5566:	f3c3 0303 	ubfx	r3, r3, #0, #4
    556a:	b2db      	uxtb	r3, r3
    556c:	1860      	adds	r0, r4, r1
    556e:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
    5572:	eb45 0202 	adc.w	r2, r5, r2
    5576:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
    557a:	00db      	lsls	r3, r3, #3
    557c:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5580:	4413      	add	r3, r2
    5582:	3b80      	subs	r3, #128	; 0x80
    5584:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
    5588:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    558c:	f001 bcd3 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_SUB64_IMM:
			DST = DST - IMM;
    5590:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5594:	785b      	ldrb	r3, [r3, #1]
    5596:	f3c3 0303 	ubfx	r3, r3, #0, #4
    559a:	b2db      	uxtb	r3, r3
    559c:	00db      	lsls	r3, r3, #3
    559e:	f507 7200 	add.w	r2, r7, #512	; 0x200
    55a2:	4413      	add	r3, r2
    55a4:	3b80      	subs	r3, #128	; 0x80
    55a6:	e9d3 4500 	ldrd	r4, r5, [r3]
    55aa:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    55ae:	685b      	ldr	r3, [r3, #4]
    55b0:	4619      	mov	r1, r3
    55b2:	ea4f 72e1 	mov.w	r2, r1, asr #31
    55b6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    55ba:	785b      	ldrb	r3, [r3, #1]
    55bc:	f3c3 0303 	ubfx	r3, r3, #0, #4
    55c0:	b2db      	uxtb	r3, r3
    55c2:	1a60      	subs	r0, r4, r1
    55c4:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
    55c8:	eb65 0202 	sbc.w	r2, r5, r2
    55cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
    55d0:	00db      	lsls	r3, r3, #3
    55d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
    55d6:	4413      	add	r3, r2
    55d8:	3b80      	subs	r3, #128	; 0x80
    55da:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
    55de:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    55e2:	f001 bca8 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_SUB64_REG:
			DST = DST - SRC;
    55e6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    55ea:	785b      	ldrb	r3, [r3, #1]
    55ec:	f3c3 0303 	ubfx	r3, r3, #0, #4
    55f0:	b2db      	uxtb	r3, r3
    55f2:	00db      	lsls	r3, r3, #3
    55f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
    55f8:	4413      	add	r3, r2
    55fa:	3b80      	subs	r3, #128	; 0x80
    55fc:	e9d3 4500 	ldrd	r4, r5, [r3]
    5600:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5604:	785b      	ldrb	r3, [r3, #1]
    5606:	f3c3 1303 	ubfx	r3, r3, #4, #4
    560a:	b2db      	uxtb	r3, r3
    560c:	00db      	lsls	r3, r3, #3
    560e:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5612:	4413      	add	r3, r2
    5614:	3b80      	subs	r3, #128	; 0x80
    5616:	e9d3 1200 	ldrd	r1, r2, [r3]
    561a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    561e:	785b      	ldrb	r3, [r3, #1]
    5620:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5624:	b2db      	uxtb	r3, r3
    5626:	1a60      	subs	r0, r4, r1
    5628:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
    562c:	eb65 0202 	sbc.w	r2, r5, r2
    5630:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
    5634:	00db      	lsls	r3, r3, #3
    5636:	f507 7200 	add.w	r2, r7, #512	; 0x200
    563a:	4413      	add	r3, r2
    563c:	3b80      	subs	r3, #128	; 0x80
    563e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
    5642:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    5646:	f001 bc76 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_MUL64_IMM:
			DST = DST * IMM;
    564a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    564e:	785b      	ldrb	r3, [r3, #1]
    5650:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5654:	b2db      	uxtb	r3, r3
    5656:	00db      	lsls	r3, r3, #3
    5658:	f507 7200 	add.w	r2, r7, #512	; 0x200
    565c:	4413      	add	r3, r2
    565e:	3b80      	subs	r3, #128	; 0x80
    5660:	e9d3 4500 	ldrd	r4, r5, [r3]
    5664:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5668:	685b      	ldr	r3, [r3, #4]
    566a:	4619      	mov	r1, r3
    566c:	ea4f 72e1 	mov.w	r2, r1, asr #31
    5670:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5674:	785b      	ldrb	r3, [r3, #1]
    5676:	f3c3 0303 	ubfx	r3, r3, #0, #4
    567a:	b2db      	uxtb	r3, r3
    567c:	461e      	mov	r6, r3
    567e:	fb01 f005 	mul.w	r0, r1, r5
    5682:	fb04 f302 	mul.w	r3, r4, r2
    5686:	4403      	add	r3, r0
    5688:	fba4 1201 	umull	r1, r2, r4, r1
    568c:	4413      	add	r3, r2
    568e:	461a      	mov	r2, r3
    5690:	00f3      	lsls	r3, r6, #3
    5692:	f507 7000 	add.w	r0, r7, #512	; 0x200
    5696:	4403      	add	r3, r0
    5698:	3b80      	subs	r3, #128	; 0x80
    569a:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    569e:	f001 bc4a 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_MUL64_REG:
			DST = DST * SRC;
    56a2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    56a6:	785b      	ldrb	r3, [r3, #1]
    56a8:	f3c3 0303 	ubfx	r3, r3, #0, #4
    56ac:	b2db      	uxtb	r3, r3
    56ae:	00db      	lsls	r3, r3, #3
    56b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
    56b4:	4413      	add	r3, r2
    56b6:	3b80      	subs	r3, #128	; 0x80
    56b8:	e9d3 4500 	ldrd	r4, r5, [r3]
    56bc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    56c0:	785b      	ldrb	r3, [r3, #1]
    56c2:	f3c3 1303 	ubfx	r3, r3, #4, #4
    56c6:	b2db      	uxtb	r3, r3
    56c8:	00db      	lsls	r3, r3, #3
    56ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
    56ce:	4413      	add	r3, r2
    56d0:	3b80      	subs	r3, #128	; 0x80
    56d2:	e9d3 1200 	ldrd	r1, r2, [r3]
    56d6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    56da:	785b      	ldrb	r3, [r3, #1]
    56dc:	f3c3 0303 	ubfx	r3, r3, #0, #4
    56e0:	b2db      	uxtb	r3, r3
    56e2:	461e      	mov	r6, r3
    56e4:	fb01 f005 	mul.w	r0, r1, r5
    56e8:	fb04 f302 	mul.w	r3, r4, r2
    56ec:	4403      	add	r3, r0
    56ee:	fba4 1201 	umull	r1, r2, r4, r1
    56f2:	4413      	add	r3, r2
    56f4:	461a      	mov	r2, r3
    56f6:	00f3      	lsls	r3, r6, #3
    56f8:	f507 7000 	add.w	r0, r7, #512	; 0x200
    56fc:	4403      	add	r3, r0
    56fe:	3b80      	subs	r3, #128	; 0x80
    5700:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    5704:	f001 bc17 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_DIV64_IMM:
			DST = DST / IMM;
    5708:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    570c:	785b      	ldrb	r3, [r3, #1]
    570e:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5712:	b2db      	uxtb	r3, r3
    5714:	00db      	lsls	r3, r3, #3
    5716:	f507 7200 	add.w	r2, r7, #512	; 0x200
    571a:	4413      	add	r3, r2
    571c:	3b80      	subs	r3, #128	; 0x80
    571e:	e9d3 4500 	ldrd	r4, r5, [r3]
    5722:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5726:	685b      	ldr	r3, [r3, #4]
    5728:	4619      	mov	r1, r3
    572a:	ea4f 72e1 	mov.w	r2, r1, asr #31
    572e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5732:	785b      	ldrb	r3, [r3, #1]
    5734:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5738:	b2db      	uxtb	r3, r3
    573a:	461e      	mov	r6, r3
    573c:	4613      	mov	r3, r2
    573e:	460a      	mov	r2, r1
    5740:	4620      	mov	r0, r4
    5742:	4629      	mov	r1, r5
    5744:	f7fb f800 	bl	748 <__aeabi_uldivmod>
    5748:	4603      	mov	r3, r0
    574a:	460c      	mov	r4, r1
    574c:	4619      	mov	r1, r3
    574e:	4622      	mov	r2, r4
    5750:	00f3      	lsls	r3, r6, #3
    5752:	f507 7000 	add.w	r0, r7, #512	; 0x200
    5756:	4403      	add	r3, r0
    5758:	3b80      	subs	r3, #128	; 0x80
    575a:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    575e:	f001 bbea 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_DIV64_REG:
			if (SRC == 0) {
    5762:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5766:	785b      	ldrb	r3, [r3, #1]
    5768:	f3c3 1303 	ubfx	r3, r3, #4, #4
    576c:	b2db      	uxtb	r3, r3
    576e:	00db      	lsls	r3, r3, #3
    5770:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5774:	4413      	add	r3, r2
    5776:	3b80      	subs	r3, #128	; 0x80
    5778:	e9d3 3400 	ldrd	r3, r4, [r3]
    577c:	4323      	orrs	r3, r4
    577e:	d105      	bne.n	578c <ebpf_vm_exec+0x1084>
				//fprintf(stderr, "uBPF error: division by zero at PC %u\n", cur_pc);
				return -1;
    5780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5784:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    5788:	f001 bbd7 	b.w	6f3a <ebpf_vm_exec+0x2832>
			}
			DST = DST / IMM;
    578c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5790:	785b      	ldrb	r3, [r3, #1]
    5792:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5796:	b2db      	uxtb	r3, r3
    5798:	00db      	lsls	r3, r3, #3
    579a:	f507 7200 	add.w	r2, r7, #512	; 0x200
    579e:	4413      	add	r3, r2
    57a0:	3b80      	subs	r3, #128	; 0x80
    57a2:	e9d3 4500 	ldrd	r4, r5, [r3]
    57a6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    57aa:	685b      	ldr	r3, [r3, #4]
    57ac:	4619      	mov	r1, r3
    57ae:	ea4f 72e1 	mov.w	r2, r1, asr #31
    57b2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    57b6:	785b      	ldrb	r3, [r3, #1]
    57b8:	f3c3 0303 	ubfx	r3, r3, #0, #4
    57bc:	b2db      	uxtb	r3, r3
    57be:	461e      	mov	r6, r3
    57c0:	4613      	mov	r3, r2
    57c2:	460a      	mov	r2, r1
    57c4:	4620      	mov	r0, r4
    57c6:	4629      	mov	r1, r5
    57c8:	f7fa ffbe 	bl	748 <__aeabi_uldivmod>
    57cc:	4603      	mov	r3, r0
    57ce:	460c      	mov	r4, r1
    57d0:	4619      	mov	r1, r3
    57d2:	4622      	mov	r2, r4
    57d4:	00f3      	lsls	r3, r6, #3
    57d6:	f507 7000 	add.w	r0, r7, #512	; 0x200
    57da:	4403      	add	r3, r0
    57dc:	3b80      	subs	r3, #128	; 0x80
    57de:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    57e2:	f001 bba8 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_OR64_IMM:
			DST = DST | IMM;
    57e6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    57ea:	785b      	ldrb	r3, [r3, #1]
    57ec:	f3c3 0303 	ubfx	r3, r3, #0, #4
    57f0:	b2db      	uxtb	r3, r3
    57f2:	00db      	lsls	r3, r3, #3
    57f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
    57f8:	4413      	add	r3, r2
    57fa:	3b80      	subs	r3, #128	; 0x80
    57fc:	e9d3 4500 	ldrd	r4, r5, [r3]
    5800:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5804:	685b      	ldr	r3, [r3, #4]
    5806:	4619      	mov	r1, r3
    5808:	ea4f 72e1 	mov.w	r2, r1, asr #31
    580c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5810:	785b      	ldrb	r3, [r3, #1]
    5812:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5816:	b2db      	uxtb	r3, r3
    5818:	ea44 0001 	orr.w	r0, r4, r1
    581c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    5820:	432a      	orrs	r2, r5
    5822:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
    5826:	00db      	lsls	r3, r3, #3
    5828:	f507 7200 	add.w	r2, r7, #512	; 0x200
    582c:	4413      	add	r3, r2
    582e:	3b80      	subs	r3, #128	; 0x80
    5830:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
    5834:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    5838:	f001 bb7d 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_OR64_REG:
			DST = DST | SRC;
    583c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5840:	785b      	ldrb	r3, [r3, #1]
    5842:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5846:	b2db      	uxtb	r3, r3
    5848:	00db      	lsls	r3, r3, #3
    584a:	f507 7200 	add.w	r2, r7, #512	; 0x200
    584e:	4413      	add	r3, r2
    5850:	3b80      	subs	r3, #128	; 0x80
    5852:	e9d3 4500 	ldrd	r4, r5, [r3]
    5856:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    585a:	785b      	ldrb	r3, [r3, #1]
    585c:	f3c3 1303 	ubfx	r3, r3, #4, #4
    5860:	b2db      	uxtb	r3, r3
    5862:	00db      	lsls	r3, r3, #3
    5864:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5868:	4413      	add	r3, r2
    586a:	3b80      	subs	r3, #128	; 0x80
    586c:	e9d3 1200 	ldrd	r1, r2, [r3]
    5870:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5874:	785b      	ldrb	r3, [r3, #1]
    5876:	f3c3 0303 	ubfx	r3, r3, #0, #4
    587a:	b2db      	uxtb	r3, r3
    587c:	ea44 0001 	orr.w	r0, r4, r1
    5880:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    5884:	432a      	orrs	r2, r5
    5886:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
    588a:	00db      	lsls	r3, r3, #3
    588c:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5890:	4413      	add	r3, r2
    5892:	3b80      	subs	r3, #128	; 0x80
    5894:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
    5898:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    589c:	f001 bb4b 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_AND64_IMM:
			DST = DST & IMM;
    58a0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    58a4:	785b      	ldrb	r3, [r3, #1]
    58a6:	f3c3 0303 	ubfx	r3, r3, #0, #4
    58aa:	b2db      	uxtb	r3, r3
    58ac:	00db      	lsls	r3, r3, #3
    58ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
    58b2:	4413      	add	r3, r2
    58b4:	3b80      	subs	r3, #128	; 0x80
    58b6:	e9d3 4500 	ldrd	r4, r5, [r3]
    58ba:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    58be:	685b      	ldr	r3, [r3, #4]
    58c0:	4619      	mov	r1, r3
    58c2:	ea4f 72e1 	mov.w	r2, r1, asr #31
    58c6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    58ca:	785b      	ldrb	r3, [r3, #1]
    58cc:	f3c3 0303 	ubfx	r3, r3, #0, #4
    58d0:	b2db      	uxtb	r3, r3
    58d2:	ea04 0001 	and.w	r0, r4, r1
    58d6:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    58da:	402a      	ands	r2, r5
    58dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
    58e0:	00db      	lsls	r3, r3, #3
    58e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
    58e6:	4413      	add	r3, r2
    58e8:	3b80      	subs	r3, #128	; 0x80
    58ea:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
    58ee:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    58f2:	f001 bb20 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_AND64_REG:
			DST = DST & SRC;
    58f6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    58fa:	785b      	ldrb	r3, [r3, #1]
    58fc:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5900:	b2db      	uxtb	r3, r3
    5902:	00db      	lsls	r3, r3, #3
    5904:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5908:	4413      	add	r3, r2
    590a:	3b80      	subs	r3, #128	; 0x80
    590c:	e9d3 4500 	ldrd	r4, r5, [r3]
    5910:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5914:	785b      	ldrb	r3, [r3, #1]
    5916:	f3c3 1303 	ubfx	r3, r3, #4, #4
    591a:	b2db      	uxtb	r3, r3
    591c:	00db      	lsls	r3, r3, #3
    591e:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5922:	4413      	add	r3, r2
    5924:	3b80      	subs	r3, #128	; 0x80
    5926:	e9d3 1200 	ldrd	r1, r2, [r3]
    592a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    592e:	785b      	ldrb	r3, [r3, #1]
    5930:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5934:	b2db      	uxtb	r3, r3
    5936:	ea04 0001 	and.w	r0, r4, r1
    593a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    593e:	402a      	ands	r2, r5
    5940:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
    5944:	00db      	lsls	r3, r3, #3
    5946:	f507 7200 	add.w	r2, r7, #512	; 0x200
    594a:	4413      	add	r3, r2
    594c:	3b80      	subs	r3, #128	; 0x80
    594e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
    5952:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    5956:	f001 baee 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_LSH64_IMM:
			DST = DST << IMM;
    595a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    595e:	785b      	ldrb	r3, [r3, #1]
    5960:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5964:	b2db      	uxtb	r3, r3
    5966:	00db      	lsls	r3, r3, #3
    5968:	f507 7200 	add.w	r2, r7, #512	; 0x200
    596c:	4413      	add	r3, r2
    596e:	3b80      	subs	r3, #128	; 0x80
    5970:	e9d3 1200 	ldrd	r1, r2, [r3]
    5974:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5978:	685c      	ldr	r4, [r3, #4]
    597a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    597e:	785b      	ldrb	r3, [r3, #1]
    5980:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5984:	b2db      	uxtb	r3, r3
    5986:	461d      	mov	r5, r3
    5988:	f1a4 0320 	sub.w	r3, r4, #32
    598c:	f1c4 0020 	rsb	r0, r4, #32
    5990:	fa02 f604 	lsl.w	r6, r2, r4
    5994:	f8c7 60ec 	str.w	r6, [r7, #236]	; 0xec
    5998:	fa01 f303 	lsl.w	r3, r1, r3
    599c:	f8d7 60ec 	ldr.w	r6, [r7, #236]	; 0xec
    59a0:	431e      	orrs	r6, r3
    59a2:	f8c7 60ec 	str.w	r6, [r7, #236]	; 0xec
    59a6:	fa21 f000 	lsr.w	r0, r1, r0
    59aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    59ae:	4303      	orrs	r3, r0
    59b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    59b4:	fa01 f304 	lsl.w	r3, r1, r4
    59b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    59bc:	00eb      	lsls	r3, r5, #3
    59be:	f507 7200 	add.w	r2, r7, #512	; 0x200
    59c2:	4413      	add	r3, r2
    59c4:	3b80      	subs	r3, #128	; 0x80
    59c6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
    59ca:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    59ce:	f001 bab2 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_LSH64_REG:
			DST = DST << SRC;
    59d2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    59d6:	785b      	ldrb	r3, [r3, #1]
    59d8:	f3c3 0303 	ubfx	r3, r3, #0, #4
    59dc:	b2db      	uxtb	r3, r3
    59de:	00db      	lsls	r3, r3, #3
    59e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
    59e4:	4413      	add	r3, r2
    59e6:	3b80      	subs	r3, #128	; 0x80
    59e8:	e9d3 0100 	ldrd	r0, r1, [r3]
    59ec:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    59f0:	785b      	ldrb	r3, [r3, #1]
    59f2:	f3c3 1303 	ubfx	r3, r3, #4, #4
    59f6:	b2db      	uxtb	r3, r3
    59f8:	00db      	lsls	r3, r3, #3
    59fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
    59fe:	4413      	add	r3, r2
    5a00:	3b80      	subs	r3, #128	; 0x80
    5a02:	e9d3 3400 	ldrd	r3, r4, [r3]
    5a06:	461c      	mov	r4, r3
    5a08:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5a0c:	785b      	ldrb	r3, [r3, #1]
    5a0e:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5a12:	b2db      	uxtb	r3, r3
    5a14:	461d      	mov	r5, r3
    5a16:	f1a4 0320 	sub.w	r3, r4, #32
    5a1a:	f1c4 0220 	rsb	r2, r4, #32
    5a1e:	fa01 f604 	lsl.w	r6, r1, r4
    5a22:	f8c7 60e4 	str.w	r6, [r7, #228]	; 0xe4
    5a26:	fa00 f303 	lsl.w	r3, r0, r3
    5a2a:	f8d7 60e4 	ldr.w	r6, [r7, #228]	; 0xe4
    5a2e:	431e      	orrs	r6, r3
    5a30:	f8c7 60e4 	str.w	r6, [r7, #228]	; 0xe4
    5a34:	fa20 f202 	lsr.w	r2, r0, r2
    5a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    5a3c:	4313      	orrs	r3, r2
    5a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    5a42:	fa00 f304 	lsl.w	r3, r0, r4
    5a46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    5a4a:	00eb      	lsls	r3, r5, #3
    5a4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5a50:	4413      	add	r3, r2
    5a52:	3b80      	subs	r3, #128	; 0x80
    5a54:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
    5a58:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    5a5c:	f001 ba6b 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_RSH64_IMM:
			DST = DST >> IMM;
    5a60:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5a64:	785b      	ldrb	r3, [r3, #1]
    5a66:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5a6a:	b2db      	uxtb	r3, r3
    5a6c:	00db      	lsls	r3, r3, #3
    5a6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5a72:	4413      	add	r3, r2
    5a74:	3b80      	subs	r3, #128	; 0x80
    5a76:	e9d3 1200 	ldrd	r1, r2, [r3]
    5a7a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5a7e:	685c      	ldr	r4, [r3, #4]
    5a80:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5a84:	785b      	ldrb	r3, [r3, #1]
    5a86:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5a8a:	b2db      	uxtb	r3, r3
    5a8c:	461d      	mov	r5, r3
    5a8e:	f1c4 0320 	rsb	r3, r4, #32
    5a92:	f1a4 0020 	sub.w	r0, r4, #32
    5a96:	fa21 f604 	lsr.w	r6, r1, r4
    5a9a:	f8c7 60d8 	str.w	r6, [r7, #216]	; 0xd8
    5a9e:	fa02 f303 	lsl.w	r3, r2, r3
    5aa2:	f8d7 60d8 	ldr.w	r6, [r7, #216]	; 0xd8
    5aa6:	431e      	orrs	r6, r3
    5aa8:	f8c7 60d8 	str.w	r6, [r7, #216]	; 0xd8
    5aac:	fa22 f000 	lsr.w	r0, r2, r0
    5ab0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
    5ab4:	4303      	orrs	r3, r0
    5ab6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    5aba:	fa22 f304 	lsr.w	r3, r2, r4
    5abe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    5ac2:	00eb      	lsls	r3, r5, #3
    5ac4:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5ac8:	4413      	add	r3, r2
    5aca:	3b80      	subs	r3, #128	; 0x80
    5acc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
    5ad0:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    5ad4:	f001 ba2f 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_RSH64_REG:
			DST = DST >> SRC;
    5ad8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5adc:	785b      	ldrb	r3, [r3, #1]
    5ade:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5ae2:	b2db      	uxtb	r3, r3
    5ae4:	00db      	lsls	r3, r3, #3
    5ae6:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5aea:	4413      	add	r3, r2
    5aec:	3b80      	subs	r3, #128	; 0x80
    5aee:	e9d3 0100 	ldrd	r0, r1, [r3]
    5af2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5af6:	785b      	ldrb	r3, [r3, #1]
    5af8:	f3c3 1303 	ubfx	r3, r3, #4, #4
    5afc:	b2db      	uxtb	r3, r3
    5afe:	00db      	lsls	r3, r3, #3
    5b00:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5b04:	4413      	add	r3, r2
    5b06:	3b80      	subs	r3, #128	; 0x80
    5b08:	e9d3 3400 	ldrd	r3, r4, [r3]
    5b0c:	461c      	mov	r4, r3
    5b0e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5b12:	785b      	ldrb	r3, [r3, #1]
    5b14:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5b18:	b2db      	uxtb	r3, r3
    5b1a:	461d      	mov	r5, r3
    5b1c:	f1c4 0320 	rsb	r3, r4, #32
    5b20:	f1a4 0220 	sub.w	r2, r4, #32
    5b24:	fa20 f604 	lsr.w	r6, r0, r4
    5b28:	f8c7 60d0 	str.w	r6, [r7, #208]	; 0xd0
    5b2c:	fa01 f303 	lsl.w	r3, r1, r3
    5b30:	f8d7 60d0 	ldr.w	r6, [r7, #208]	; 0xd0
    5b34:	431e      	orrs	r6, r3
    5b36:	f8c7 60d0 	str.w	r6, [r7, #208]	; 0xd0
    5b3a:	fa21 f202 	lsr.w	r2, r1, r2
    5b3e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
    5b42:	4313      	orrs	r3, r2
    5b44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    5b48:	fa21 f304 	lsr.w	r3, r1, r4
    5b4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    5b50:	00eb      	lsls	r3, r5, #3
    5b52:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5b56:	4413      	add	r3, r2
    5b58:	3b80      	subs	r3, #128	; 0x80
    5b5a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
    5b5e:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    5b62:	f001 b9e8 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_NEG64:
			DST = -DST;
    5b66:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5b6a:	785b      	ldrb	r3, [r3, #1]
    5b6c:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5b70:	b2db      	uxtb	r3, r3
    5b72:	00db      	lsls	r3, r3, #3
    5b74:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5b78:	4413      	add	r3, r2
    5b7a:	3b80      	subs	r3, #128	; 0x80
    5b7c:	e9d3 1200 	ldrd	r1, r2, [r3]
    5b80:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5b84:	785b      	ldrb	r3, [r3, #1]
    5b86:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5b8a:	b2db      	uxtb	r3, r3
    5b8c:	4249      	negs	r1, r1
    5b8e:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
    5b92:	00db      	lsls	r3, r3, #3
    5b94:	f507 7000 	add.w	r0, r7, #512	; 0x200
    5b98:	4403      	add	r3, r0
    5b9a:	3b80      	subs	r3, #128	; 0x80
    5b9c:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    5ba0:	f001 b9c9 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_MOD64_IMM:
			DST = DST % IMM;
    5ba4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5ba8:	785b      	ldrb	r3, [r3, #1]
    5baa:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5bae:	b2db      	uxtb	r3, r3
    5bb0:	00db      	lsls	r3, r3, #3
    5bb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5bb6:	4413      	add	r3, r2
    5bb8:	3b80      	subs	r3, #128	; 0x80
    5bba:	e9d3 4500 	ldrd	r4, r5, [r3]
    5bbe:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5bc2:	685b      	ldr	r3, [r3, #4]
    5bc4:	4619      	mov	r1, r3
    5bc6:	ea4f 72e1 	mov.w	r2, r1, asr #31
    5bca:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5bce:	785b      	ldrb	r3, [r3, #1]
    5bd0:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5bd4:	b2db      	uxtb	r3, r3
    5bd6:	461e      	mov	r6, r3
    5bd8:	4613      	mov	r3, r2
    5bda:	460a      	mov	r2, r1
    5bdc:	4620      	mov	r0, r4
    5bde:	4629      	mov	r1, r5
    5be0:	f7fa fdb2 	bl	748 <__aeabi_uldivmod>
    5be4:	461c      	mov	r4, r3
    5be6:	4613      	mov	r3, r2
    5be8:	4619      	mov	r1, r3
    5bea:	4622      	mov	r2, r4
    5bec:	00f3      	lsls	r3, r6, #3
    5bee:	f507 7000 	add.w	r0, r7, #512	; 0x200
    5bf2:	4403      	add	r3, r0
    5bf4:	3b80      	subs	r3, #128	; 0x80
    5bf6:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    5bfa:	f001 b99c 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_MOD64_REG:
			if (SRC == 0) {
    5bfe:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5c02:	785b      	ldrb	r3, [r3, #1]
    5c04:	f3c3 1303 	ubfx	r3, r3, #4, #4
    5c08:	b2db      	uxtb	r3, r3
    5c0a:	00db      	lsls	r3, r3, #3
    5c0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5c10:	4413      	add	r3, r2
    5c12:	3b80      	subs	r3, #128	; 0x80
    5c14:	e9d3 3400 	ldrd	r3, r4, [r3]
    5c18:	4323      	orrs	r3, r4
    5c1a:	d105      	bne.n	5c28 <ebpf_vm_exec+0x1520>
				//fprintf(stderr, "uBPF error: division by zero at PC %u\n", cur_pc);
				return -1;
    5c1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5c20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    5c24:	f001 b989 	b.w	6f3a <ebpf_vm_exec+0x2832>
			}
			DST = DST % SRC;
    5c28:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5c2c:	785b      	ldrb	r3, [r3, #1]
    5c2e:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5c32:	b2db      	uxtb	r3, r3
    5c34:	00db      	lsls	r3, r3, #3
    5c36:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5c3a:	4413      	add	r3, r2
    5c3c:	3b80      	subs	r3, #128	; 0x80
    5c3e:	e9d3 8900 	ldrd	r8, r9, [r3]
    5c42:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5c46:	785b      	ldrb	r3, [r3, #1]
    5c48:	f3c3 1303 	ubfx	r3, r3, #4, #4
    5c4c:	b2db      	uxtb	r3, r3
    5c4e:	00db      	lsls	r3, r3, #3
    5c50:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5c54:	4413      	add	r3, r2
    5c56:	3b80      	subs	r3, #128	; 0x80
    5c58:	e9d3 1200 	ldrd	r1, r2, [r3]
    5c5c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5c60:	785b      	ldrb	r3, [r3, #1]
    5c62:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5c66:	b2db      	uxtb	r3, r3
    5c68:	461d      	mov	r5, r3
    5c6a:	4613      	mov	r3, r2
    5c6c:	460a      	mov	r2, r1
    5c6e:	4640      	mov	r0, r8
    5c70:	4649      	mov	r1, r9
    5c72:	f7fa fd69 	bl	748 <__aeabi_uldivmod>
    5c76:	461c      	mov	r4, r3
    5c78:	4613      	mov	r3, r2
    5c7a:	4619      	mov	r1, r3
    5c7c:	4622      	mov	r2, r4
    5c7e:	00eb      	lsls	r3, r5, #3
    5c80:	f507 7000 	add.w	r0, r7, #512	; 0x200
    5c84:	4403      	add	r3, r0
    5c86:	3b80      	subs	r3, #128	; 0x80
    5c88:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    5c8c:	f001 b953 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_XOR64_IMM:
			DST = DST ^ IMM;
    5c90:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5c94:	785b      	ldrb	r3, [r3, #1]
    5c96:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5c9a:	b2db      	uxtb	r3, r3
    5c9c:	00db      	lsls	r3, r3, #3
    5c9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5ca2:	4413      	add	r3, r2
    5ca4:	3b80      	subs	r3, #128	; 0x80
    5ca6:	e9d3 4500 	ldrd	r4, r5, [r3]
    5caa:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5cae:	685b      	ldr	r3, [r3, #4]
    5cb0:	4619      	mov	r1, r3
    5cb2:	ea4f 72e1 	mov.w	r2, r1, asr #31
    5cb6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5cba:	785b      	ldrb	r3, [r3, #1]
    5cbc:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5cc0:	b2db      	uxtb	r3, r3
    5cc2:	ea84 0001 	eor.w	r0, r4, r1
    5cc6:	67b8      	str	r0, [r7, #120]	; 0x78
    5cc8:	406a      	eors	r2, r5
    5cca:	67fa      	str	r2, [r7, #124]	; 0x7c
    5ccc:	00db      	lsls	r3, r3, #3
    5cce:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5cd2:	4413      	add	r3, r2
    5cd4:	3b80      	subs	r3, #128	; 0x80
    5cd6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
    5cda:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    5cde:	f001 b92a 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_XOR64_REG:
			DST = DST ^ SRC;
    5ce2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5ce6:	785b      	ldrb	r3, [r3, #1]
    5ce8:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5cec:	b2db      	uxtb	r3, r3
    5cee:	00db      	lsls	r3, r3, #3
    5cf0:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5cf4:	4413      	add	r3, r2
    5cf6:	3b80      	subs	r3, #128	; 0x80
    5cf8:	e9d3 4500 	ldrd	r4, r5, [r3]
    5cfc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5d00:	785b      	ldrb	r3, [r3, #1]
    5d02:	f3c3 1303 	ubfx	r3, r3, #4, #4
    5d06:	b2db      	uxtb	r3, r3
    5d08:	00db      	lsls	r3, r3, #3
    5d0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5d0e:	4413      	add	r3, r2
    5d10:	3b80      	subs	r3, #128	; 0x80
    5d12:	e9d3 1200 	ldrd	r1, r2, [r3]
    5d16:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5d1a:	785b      	ldrb	r3, [r3, #1]
    5d1c:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5d20:	b2db      	uxtb	r3, r3
    5d22:	ea84 0001 	eor.w	r0, r4, r1
    5d26:	6738      	str	r0, [r7, #112]	; 0x70
    5d28:	406a      	eors	r2, r5
    5d2a:	677a      	str	r2, [r7, #116]	; 0x74
    5d2c:	00db      	lsls	r3, r3, #3
    5d2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5d32:	4413      	add	r3, r2
    5d34:	3b80      	subs	r3, #128	; 0x80
    5d36:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
    5d3a:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    5d3e:	f001 b8fa 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_MOV64_IMM:
			DST = IMM;
    5d42:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5d46:	685a      	ldr	r2, [r3, #4]
    5d48:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5d4c:	785b      	ldrb	r3, [r3, #1]
    5d4e:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5d52:	b2db      	uxtb	r3, r3
    5d54:	4611      	mov	r1, r2
    5d56:	ea4f 72e1 	mov.w	r2, r1, asr #31
    5d5a:	00db      	lsls	r3, r3, #3
    5d5c:	f507 7000 	add.w	r0, r7, #512	; 0x200
    5d60:	4403      	add	r3, r0
    5d62:	3b80      	subs	r3, #128	; 0x80
    5d64:	e9c3 1200 	strd	r1, r2, [r3]
			// DEBUG_LOG("MOV: reg[%d] = %d\n", inst->dst, IMM);
			break;
    5d68:	f001 b8e5 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_MOV64_REG:
			DST = SRC;
    5d6c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5d70:	785b      	ldrb	r3, [r3, #1]
    5d72:	f3c3 1303 	ubfx	r3, r3, #4, #4
    5d76:	b2db      	uxtb	r3, r3
    5d78:	461a      	mov	r2, r3
    5d7a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5d7e:	785b      	ldrb	r3, [r3, #1]
    5d80:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5d84:	b2db      	uxtb	r3, r3
    5d86:	4618      	mov	r0, r3
    5d88:	00d3      	lsls	r3, r2, #3
    5d8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5d8e:	4413      	add	r3, r2
    5d90:	3b80      	subs	r3, #128	; 0x80
    5d92:	e9d3 1200 	ldrd	r1, r2, [r3]
    5d96:	00c3      	lsls	r3, r0, #3
    5d98:	f507 7000 	add.w	r0, r7, #512	; 0x200
    5d9c:	4403      	add	r3, r0
    5d9e:	3b80      	subs	r3, #128	; 0x80
    5da0:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    5da4:	f001 b8c7 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_ARSH64_IMM:
			(*(s64 *)&DST) >>= IMM;
    5da8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5dac:	785b      	ldrb	r3, [r3, #1]
    5dae:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5db2:	b2db      	uxtb	r3, r3
    5db4:	f507 72c0 	add.w	r2, r7, #384	; 0x180
    5db8:	00db      	lsls	r3, r3, #3
    5dba:	4413      	add	r3, r2
    5dbc:	e9d3 0100 	ldrd	r0, r1, [r3]
    5dc0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5dc4:	685c      	ldr	r4, [r3, #4]
    5dc6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5dca:	785b      	ldrb	r3, [r3, #1]
    5dcc:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5dd0:	b2db      	uxtb	r3, r3
    5dd2:	f507 72c0 	add.w	r2, r7, #384	; 0x180
    5dd6:	00db      	lsls	r3, r3, #3
    5dd8:	18d5      	adds	r5, r2, r3
    5dda:	f1c4 0320 	rsb	r3, r4, #32
    5dde:	f1b4 0220 	subs.w	r2, r4, #32
    5de2:	fa20 f604 	lsr.w	r6, r0, r4
    5de6:	f8c7 60c8 	str.w	r6, [r7, #200]	; 0xc8
    5dea:	fa01 f303 	lsl.w	r3, r1, r3
    5dee:	f8d7 60c8 	ldr.w	r6, [r7, #200]	; 0xc8
    5df2:	ea46 0603 	orr.w	r6, r6, r3
    5df6:	f8c7 60c8 	str.w	r6, [r7, #200]	; 0xc8
    5dfa:	d406      	bmi.n	5e0a <ebpf_vm_exec+0x1702>
    5dfc:	fa41 f202 	asr.w	r2, r1, r2
    5e00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
    5e04:	4313      	orrs	r3, r2
    5e06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    5e0a:	fa41 f304 	asr.w	r3, r1, r4
    5e0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    5e12:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
    5e16:	e9c5 3400 	strd	r3, r4, [r5]
			break;
    5e1a:	f001 b88c 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_ARSH64_REG:
			DST = (s64) DST >> SRC;
    5e1e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5e22:	785b      	ldrb	r3, [r3, #1]
    5e24:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5e28:	b2db      	uxtb	r3, r3
    5e2a:	00db      	lsls	r3, r3, #3
    5e2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5e30:	4413      	add	r3, r2
    5e32:	3b80      	subs	r3, #128	; 0x80
    5e34:	e9d3 3400 	ldrd	r3, r4, [r3]
    5e38:	4618      	mov	r0, r3
    5e3a:	4621      	mov	r1, r4
    5e3c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5e40:	785b      	ldrb	r3, [r3, #1]
    5e42:	f3c3 1303 	ubfx	r3, r3, #4, #4
    5e46:	b2db      	uxtb	r3, r3
    5e48:	00db      	lsls	r3, r3, #3
    5e4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5e4e:	4413      	add	r3, r2
    5e50:	3b80      	subs	r3, #128	; 0x80
    5e52:	e9d3 3400 	ldrd	r3, r4, [r3]
    5e56:	461c      	mov	r4, r3
    5e58:	f1c4 0320 	rsb	r3, r4, #32
    5e5c:	f1b4 0220 	subs.w	r2, r4, #32
    5e60:	fa20 f504 	lsr.w	r5, r0, r4
    5e64:	f8c7 50c0 	str.w	r5, [r7, #192]	; 0xc0
    5e68:	fa01 f303 	lsl.w	r3, r1, r3
    5e6c:	f8d7 50c0 	ldr.w	r5, [r7, #192]	; 0xc0
    5e70:	ea45 0503 	orr.w	r5, r5, r3
    5e74:	f8c7 50c0 	str.w	r5, [r7, #192]	; 0xc0
    5e78:	d406      	bmi.n	5e88 <ebpf_vm_exec+0x1780>
    5e7a:	fa41 f202 	asr.w	r2, r1, r2
    5e7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
    5e82:	4313      	orrs	r3, r2
    5e84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    5e88:	fa41 f304 	asr.w	r3, r1, r4
    5e8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    5e90:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5e94:	785b      	ldrb	r3, [r3, #1]
    5e96:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5e9a:	b2db      	uxtb	r3, r3
    5e9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
    5ea0:	00db      	lsls	r3, r3, #3
    5ea2:	f507 7000 	add.w	r0, r7, #512	; 0x200
    5ea6:	4403      	add	r3, r0
    5ea8:	3b80      	subs	r3, #128	; 0x80
    5eaa:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    5eae:	f001 b842 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_LDXDW:
			BOUNDS_CHECK_LOAD(8);
    5eb2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5eb6:	785b      	ldrb	r3, [r3, #1]
    5eb8:	f3c3 1303 	ubfx	r3, r3, #4, #4
    5ebc:	b2db      	uxtb	r3, r3
    5ebe:	00db      	lsls	r3, r3, #3
    5ec0:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5ec4:	4413      	add	r3, r2
    5ec6:	3b80      	subs	r3, #128	; 0x80
    5ec8:	e9d3 1200 	ldrd	r1, r2, [r3]
    5ecc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5ed0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    5ed4:	b21b      	sxth	r3, r3
    5ed6:	ea4f 74e3 	mov.w	r4, r3, asr #31
    5eda:	18c8      	adds	r0, r1, r3
    5edc:	66b8      	str	r0, [r7, #104]	; 0x68
    5ede:	eb42 0304 	adc.w	r3, r2, r4
    5ee2:	66fb      	str	r3, [r7, #108]	; 0x6c
    5ee4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5ee6:	4619      	mov	r1, r3
    5ee8:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
    5eec:	f507 7380 	add.w	r3, r7, #256	; 0x100
    5ef0:	9303      	str	r3, [sp, #12]
    5ef2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
    5ef6:	681b      	ldr	r3, [r3, #0]
    5ef8:	9302      	str	r3, [sp, #8]
    5efa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
    5efe:	681b      	ldr	r3, [r3, #0]
    5f00:	9301      	str	r3, [sp, #4]
    5f02:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	; 0x1ea
    5f06:	9300      	str	r3, [sp, #0]
    5f08:	4bbc      	ldr	r3, [pc, #752]	; (61fc <ebpf_vm_exec+0x1af4>)
    5f0a:	2208      	movs	r2, #8
    5f0c:	6800      	ldr	r0, [r0, #0]
    5f0e:	f013 fabd 	bl	1948c <bounds_check>
    5f12:	4603      	mov	r3, r0
    5f14:	f083 0301 	eor.w	r3, r3, #1
    5f18:	b2db      	uxtb	r3, r3
    5f1a:	2b00      	cmp	r3, #0
    5f1c:	d005      	beq.n	5f2a <ebpf_vm_exec+0x1822>
    5f1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5f22:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    5f26:	f001 b808 	b.w	6f3a <ebpf_vm_exec+0x2832>
			//uintptr* ptr = SRC + inst->offset;
			//printf("ptr = %p %u , val=%u %p\n", ptr, ptr, *ptr, *ptr);
			DST = *(u64*)(uintptr)(SRC + inst->offset);
    5f2a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5f2e:	785b      	ldrb	r3, [r3, #1]
    5f30:	f3c3 1303 	ubfx	r3, r3, #4, #4
    5f34:	b2db      	uxtb	r3, r3
    5f36:	00db      	lsls	r3, r3, #3
    5f38:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5f3c:	4413      	add	r3, r2
    5f3e:	3b80      	subs	r3, #128	; 0x80
    5f40:	e9d3 3400 	ldrd	r3, r4, [r3]
    5f44:	461a      	mov	r2, r3
    5f46:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5f4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    5f4e:	4413      	add	r3, r2
    5f50:	461a      	mov	r2, r3
    5f52:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5f56:	785b      	ldrb	r3, [r3, #1]
    5f58:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5f5c:	b2db      	uxtb	r3, r3
    5f5e:	e9d2 1200 	ldrd	r1, r2, [r2]
    5f62:	00db      	lsls	r3, r3, #3
    5f64:	f507 7000 	add.w	r0, r7, #512	; 0x200
    5f68:	4403      	add	r3, r0
    5f6a:	3b80      	subs	r3, #128	; 0x80
    5f6c:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    5f70:	f000 bfe1 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_LDXW:
			//BOUNDS_CHECK_LOAD(4);
			//ptr = ;
			//DEBUG_LOG("EBPF_OP_LDXW\n");
			DST = *(u32*)(uintptr)(SRC + inst->offset);
    5f74:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5f78:	785b      	ldrb	r3, [r3, #1]
    5f7a:	f3c3 1303 	ubfx	r3, r3, #4, #4
    5f7e:	b2db      	uxtb	r3, r3
    5f80:	00db      	lsls	r3, r3, #3
    5f82:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5f86:	4413      	add	r3, r2
    5f88:	3b80      	subs	r3, #128	; 0x80
    5f8a:	e9d3 3400 	ldrd	r3, r4, [r3]
    5f8e:	461a      	mov	r2, r3
    5f90:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5f94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    5f98:	4413      	add	r3, r2
    5f9a:	681a      	ldr	r2, [r3, #0]
    5f9c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5fa0:	785b      	ldrb	r3, [r3, #1]
    5fa2:	f3c3 0303 	ubfx	r3, r3, #0, #4
    5fa6:	b2db      	uxtb	r3, r3
    5fa8:	4611      	mov	r1, r2
    5faa:	f04f 0200 	mov.w	r2, #0
    5fae:	00db      	lsls	r3, r3, #3
    5fb0:	f507 7000 	add.w	r0, r7, #512	; 0x200
    5fb4:	4403      	add	r3, r0
    5fb6:	3b80      	subs	r3, #128	; 0x80
    5fb8:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    5fbc:	f000 bfbb 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_LDXH:
			BOUNDS_CHECK_LOAD(2);
    5fc0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5fc4:	785b      	ldrb	r3, [r3, #1]
    5fc6:	f3c3 1303 	ubfx	r3, r3, #4, #4
    5fca:	b2db      	uxtb	r3, r3
    5fcc:	00db      	lsls	r3, r3, #3
    5fce:	f507 7200 	add.w	r2, r7, #512	; 0x200
    5fd2:	4413      	add	r3, r2
    5fd4:	3b80      	subs	r3, #128	; 0x80
    5fd6:	e9d3 1200 	ldrd	r1, r2, [r3]
    5fda:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    5fde:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    5fe2:	b21b      	sxth	r3, r3
    5fe4:	ea4f 74e3 	mov.w	r4, r3, asr #31
    5fe8:	18c8      	adds	r0, r1, r3
    5fea:	6638      	str	r0, [r7, #96]	; 0x60
    5fec:	eb42 0304 	adc.w	r3, r2, r4
    5ff0:	667b      	str	r3, [r7, #100]	; 0x64
    5ff2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5ff4:	4619      	mov	r1, r3
    5ff6:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
    5ffa:	f507 7380 	add.w	r3, r7, #256	; 0x100
    5ffe:	9303      	str	r3, [sp, #12]
    6000:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
    6004:	681b      	ldr	r3, [r3, #0]
    6006:	9302      	str	r3, [sp, #8]
    6008:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
    600c:	681b      	ldr	r3, [r3, #0]
    600e:	9301      	str	r3, [sp, #4]
    6010:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	; 0x1ea
    6014:	9300      	str	r3, [sp, #0]
    6016:	4b79      	ldr	r3, [pc, #484]	; (61fc <ebpf_vm_exec+0x1af4>)
    6018:	2202      	movs	r2, #2
    601a:	6800      	ldr	r0, [r0, #0]
    601c:	f013 fa36 	bl	1948c <bounds_check>
    6020:	4603      	mov	r3, r0
    6022:	f083 0301 	eor.w	r3, r3, #1
    6026:	b2db      	uxtb	r3, r3
    6028:	2b00      	cmp	r3, #0
    602a:	d005      	beq.n	6038 <ebpf_vm_exec+0x1930>
    602c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6030:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    6034:	f000 bf81 	b.w	6f3a <ebpf_vm_exec+0x2832>
			DST = *(u16*)(uintptr)(SRC + inst->offset);
    6038:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    603c:	785b      	ldrb	r3, [r3, #1]
    603e:	f3c3 1303 	ubfx	r3, r3, #4, #4
    6042:	b2db      	uxtb	r3, r3
    6044:	00db      	lsls	r3, r3, #3
    6046:	f507 7200 	add.w	r2, r7, #512	; 0x200
    604a:	4413      	add	r3, r2
    604c:	3b80      	subs	r3, #128	; 0x80
    604e:	e9d3 3400 	ldrd	r3, r4, [r3]
    6052:	461a      	mov	r2, r3
    6054:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6058:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    605c:	4413      	add	r3, r2
    605e:	881a      	ldrh	r2, [r3, #0]
    6060:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6064:	785b      	ldrb	r3, [r3, #1]
    6066:	f3c3 0303 	ubfx	r3, r3, #0, #4
    606a:	b2db      	uxtb	r3, r3
    606c:	b291      	uxth	r1, r2
    606e:	f04f 0200 	mov.w	r2, #0
    6072:	00db      	lsls	r3, r3, #3
    6074:	f507 7000 	add.w	r0, r7, #512	; 0x200
    6078:	4403      	add	r3, r0
    607a:	3b80      	subs	r3, #128	; 0x80
    607c:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    6080:	f000 bf59 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_LDXB:
			BOUNDS_CHECK_LOAD(1);
    6084:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6088:	785b      	ldrb	r3, [r3, #1]
    608a:	f3c3 1303 	ubfx	r3, r3, #4, #4
    608e:	b2db      	uxtb	r3, r3
    6090:	00db      	lsls	r3, r3, #3
    6092:	f507 7200 	add.w	r2, r7, #512	; 0x200
    6096:	4413      	add	r3, r2
    6098:	3b80      	subs	r3, #128	; 0x80
    609a:	e9d3 1200 	ldrd	r1, r2, [r3]
    609e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    60a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    60a6:	b21b      	sxth	r3, r3
    60a8:	ea4f 74e3 	mov.w	r4, r3, asr #31
    60ac:	18c8      	adds	r0, r1, r3
    60ae:	65b8      	str	r0, [r7, #88]	; 0x58
    60b0:	eb42 0304 	adc.w	r3, r2, r4
    60b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    60b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    60b8:	4619      	mov	r1, r3
    60ba:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
    60be:	f507 7380 	add.w	r3, r7, #256	; 0x100
    60c2:	9303      	str	r3, [sp, #12]
    60c4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
    60c8:	681b      	ldr	r3, [r3, #0]
    60ca:	9302      	str	r3, [sp, #8]
    60cc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
    60d0:	681b      	ldr	r3, [r3, #0]
    60d2:	9301      	str	r3, [sp, #4]
    60d4:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	; 0x1ea
    60d8:	9300      	str	r3, [sp, #0]
    60da:	4b48      	ldr	r3, [pc, #288]	; (61fc <ebpf_vm_exec+0x1af4>)
    60dc:	2201      	movs	r2, #1
    60de:	6800      	ldr	r0, [r0, #0]
    60e0:	f013 f9d4 	bl	1948c <bounds_check>
    60e4:	4603      	mov	r3, r0
    60e6:	f083 0301 	eor.w	r3, r3, #1
    60ea:	b2db      	uxtb	r3, r3
    60ec:	2b00      	cmp	r3, #0
    60ee:	d005      	beq.n	60fc <ebpf_vm_exec+0x19f4>
    60f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    60f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    60f8:	f000 bf1f 	b.w	6f3a <ebpf_vm_exec+0x2832>
			DST = *(u8*)(uintptr)(reg[inst->src] + inst->offset);
    60fc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6100:	785b      	ldrb	r3, [r3, #1]
    6102:	f3c3 1303 	ubfx	r3, r3, #4, #4
    6106:	b2db      	uxtb	r3, r3
    6108:	00db      	lsls	r3, r3, #3
    610a:	f507 7200 	add.w	r2, r7, #512	; 0x200
    610e:	4413      	add	r3, r2
    6110:	3b80      	subs	r3, #128	; 0x80
    6112:	e9d3 3400 	ldrd	r3, r4, [r3]
    6116:	461a      	mov	r2, r3
    6118:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    611c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    6120:	4413      	add	r3, r2
    6122:	781a      	ldrb	r2, [r3, #0]
    6124:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6128:	785b      	ldrb	r3, [r3, #1]
    612a:	f3c3 0303 	ubfx	r3, r3, #0, #4
    612e:	b2db      	uxtb	r3, r3
    6130:	b2d1      	uxtb	r1, r2
    6132:	f04f 0200 	mov.w	r2, #0
    6136:	00db      	lsls	r3, r3, #3
    6138:	f507 7000 	add.w	r0, r7, #512	; 0x200
    613c:	4403      	add	r3, r0
    613e:	3b80      	subs	r3, #128	; 0x80
    6140:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    6144:	f000 bef7 	b.w	6f36 <ebpf_vm_exec+0x282e>
		// store
		case EBPF_OP_STDW:
			BOUNDS_CHECK_STORE(8);
    6148:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    614c:	785b      	ldrb	r3, [r3, #1]
    614e:	f3c3 1303 	ubfx	r3, r3, #4, #4
    6152:	b2db      	uxtb	r3, r3
    6154:	00db      	lsls	r3, r3, #3
    6156:	f507 7200 	add.w	r2, r7, #512	; 0x200
    615a:	4413      	add	r3, r2
    615c:	3b80      	subs	r3, #128	; 0x80
    615e:	e9d3 1200 	ldrd	r1, r2, [r3]
    6162:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6166:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    616a:	b21b      	sxth	r3, r3
    616c:	ea4f 74e3 	mov.w	r4, r3, asr #31
    6170:	18c8      	adds	r0, r1, r3
    6172:	6538      	str	r0, [r7, #80]	; 0x50
    6174:	eb42 0304 	adc.w	r3, r2, r4
    6178:	657b      	str	r3, [r7, #84]	; 0x54
    617a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    617c:	4619      	mov	r1, r3
    617e:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
    6182:	f507 7380 	add.w	r3, r7, #256	; 0x100
    6186:	9303      	str	r3, [sp, #12]
    6188:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
    618c:	681b      	ldr	r3, [r3, #0]
    618e:	9302      	str	r3, [sp, #8]
    6190:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
    6194:	681b      	ldr	r3, [r3, #0]
    6196:	9301      	str	r3, [sp, #4]
    6198:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	; 0x1ea
    619c:	9300      	str	r3, [sp, #0]
    619e:	4b18      	ldr	r3, [pc, #96]	; (6200 <ebpf_vm_exec+0x1af8>)
    61a0:	2208      	movs	r2, #8
    61a2:	6800      	ldr	r0, [r0, #0]
    61a4:	f013 f972 	bl	1948c <bounds_check>
    61a8:	4603      	mov	r3, r0
    61aa:	f083 0301 	eor.w	r3, r3, #1
    61ae:	b2db      	uxtb	r3, r3
    61b0:	2b00      	cmp	r3, #0
    61b2:	d005      	beq.n	61c0 <ebpf_vm_exec+0x1ab8>
    61b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    61b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    61bc:	f000 bebd 	b.w	6f3a <ebpf_vm_exec+0x2832>
			*(u64*)(uintptr)(DST + inst->offset) = IMM;
    61c0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    61c4:	6859      	ldr	r1, [r3, #4]
    61c6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    61ca:	785b      	ldrb	r3, [r3, #1]
    61cc:	f3c3 0303 	ubfx	r3, r3, #0, #4
    61d0:	b2db      	uxtb	r3, r3
    61d2:	00db      	lsls	r3, r3, #3
    61d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
    61d8:	4413      	add	r3, r2
    61da:	3b80      	subs	r3, #128	; 0x80
    61dc:	e9d3 3400 	ldrd	r3, r4, [r3]
    61e0:	461a      	mov	r2, r3
    61e2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    61e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    61ea:	4413      	add	r3, r2
    61ec:	461a      	mov	r2, r3
    61ee:	460b      	mov	r3, r1
    61f0:	ea4f 74e3 	mov.w	r4, r3, asr #31
    61f4:	e9c2 3400 	strd	r3, r4, [r2]
			break;
    61f8:	f000 be9d 	b.w	6f36 <ebpf_vm_exec+0x282e>
    61fc:	0002d464 	.word	0x0002d464
    6200:	0002d46c 	.word	0x0002d46c
		case EBPF_OP_STW:
			BOUNDS_CHECK_STORE(4);
    6204:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6208:	785b      	ldrb	r3, [r3, #1]
    620a:	f3c3 1303 	ubfx	r3, r3, #4, #4
    620e:	b2db      	uxtb	r3, r3
    6210:	00db      	lsls	r3, r3, #3
    6212:	f507 7200 	add.w	r2, r7, #512	; 0x200
    6216:	4413      	add	r3, r2
    6218:	3b80      	subs	r3, #128	; 0x80
    621a:	e9d3 1200 	ldrd	r1, r2, [r3]
    621e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6222:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    6226:	b21b      	sxth	r3, r3
    6228:	ea4f 74e3 	mov.w	r4, r3, asr #31
    622c:	18c8      	adds	r0, r1, r3
    622e:	64b8      	str	r0, [r7, #72]	; 0x48
    6230:	eb42 0304 	adc.w	r3, r2, r4
    6234:	64fb      	str	r3, [r7, #76]	; 0x4c
    6236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    6238:	4619      	mov	r1, r3
    623a:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
    623e:	f507 7380 	add.w	r3, r7, #256	; 0x100
    6242:	9303      	str	r3, [sp, #12]
    6244:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
    6248:	681b      	ldr	r3, [r3, #0]
    624a:	9302      	str	r3, [sp, #8]
    624c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
    6250:	681b      	ldr	r3, [r3, #0]
    6252:	9301      	str	r3, [sp, #4]
    6254:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	; 0x1ea
    6258:	9300      	str	r3, [sp, #0]
    625a:	4bbc      	ldr	r3, [pc, #752]	; (654c <ebpf_vm_exec+0x1e44>)
    625c:	2204      	movs	r2, #4
    625e:	6800      	ldr	r0, [r0, #0]
    6260:	f013 f914 	bl	1948c <bounds_check>
    6264:	4603      	mov	r3, r0
    6266:	f083 0301 	eor.w	r3, r3, #1
    626a:	b2db      	uxtb	r3, r3
    626c:	2b00      	cmp	r3, #0
    626e:	d005      	beq.n	627c <ebpf_vm_exec+0x1b74>
    6270:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6274:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    6278:	f000 be5f 	b.w	6f3a <ebpf_vm_exec+0x2832>
			*(u32*)(uintptr)(DST + inst->offset) = IMM;
    627c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6280:	6859      	ldr	r1, [r3, #4]
    6282:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6286:	785b      	ldrb	r3, [r3, #1]
    6288:	f3c3 0303 	ubfx	r3, r3, #0, #4
    628c:	b2db      	uxtb	r3, r3
    628e:	00db      	lsls	r3, r3, #3
    6290:	f507 7200 	add.w	r2, r7, #512	; 0x200
    6294:	4413      	add	r3, r2
    6296:	3b80      	subs	r3, #128	; 0x80
    6298:	e9d3 3400 	ldrd	r3, r4, [r3]
    629c:	461a      	mov	r2, r3
    629e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    62a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    62a6:	4413      	add	r3, r2
    62a8:	461a      	mov	r2, r3
    62aa:	460b      	mov	r3, r1
    62ac:	6013      	str	r3, [r2, #0]
			break;
    62ae:	f000 be42 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_STH:
			BOUNDS_CHECK_STORE(2);
    62b2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    62b6:	785b      	ldrb	r3, [r3, #1]
    62b8:	f3c3 1303 	ubfx	r3, r3, #4, #4
    62bc:	b2db      	uxtb	r3, r3
    62be:	00db      	lsls	r3, r3, #3
    62c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
    62c4:	4413      	add	r3, r2
    62c6:	3b80      	subs	r3, #128	; 0x80
    62c8:	e9d3 1200 	ldrd	r1, r2, [r3]
    62cc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    62d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    62d4:	b21b      	sxth	r3, r3
    62d6:	ea4f 74e3 	mov.w	r4, r3, asr #31
    62da:	18c8      	adds	r0, r1, r3
    62dc:	6438      	str	r0, [r7, #64]	; 0x40
    62de:	eb42 0304 	adc.w	r3, r2, r4
    62e2:	647b      	str	r3, [r7, #68]	; 0x44
    62e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    62e6:	4619      	mov	r1, r3
    62e8:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
    62ec:	f507 7380 	add.w	r3, r7, #256	; 0x100
    62f0:	9303      	str	r3, [sp, #12]
    62f2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
    62f6:	681b      	ldr	r3, [r3, #0]
    62f8:	9302      	str	r3, [sp, #8]
    62fa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
    62fe:	681b      	ldr	r3, [r3, #0]
    6300:	9301      	str	r3, [sp, #4]
    6302:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	; 0x1ea
    6306:	9300      	str	r3, [sp, #0]
    6308:	4b90      	ldr	r3, [pc, #576]	; (654c <ebpf_vm_exec+0x1e44>)
    630a:	2202      	movs	r2, #2
    630c:	6800      	ldr	r0, [r0, #0]
    630e:	f013 f8bd 	bl	1948c <bounds_check>
    6312:	4603      	mov	r3, r0
    6314:	f083 0301 	eor.w	r3, r3, #1
    6318:	b2db      	uxtb	r3, r3
    631a:	2b00      	cmp	r3, #0
    631c:	d005      	beq.n	632a <ebpf_vm_exec+0x1c22>
    631e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6322:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    6326:	f000 be08 	b.w	6f3a <ebpf_vm_exec+0x2832>
			*(u16*)(uintptr)(DST + inst->offset) = IMM;
    632a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    632e:	6859      	ldr	r1, [r3, #4]
    6330:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6334:	785b      	ldrb	r3, [r3, #1]
    6336:	f3c3 0303 	ubfx	r3, r3, #0, #4
    633a:	b2db      	uxtb	r3, r3
    633c:	00db      	lsls	r3, r3, #3
    633e:	f507 7200 	add.w	r2, r7, #512	; 0x200
    6342:	4413      	add	r3, r2
    6344:	3b80      	subs	r3, #128	; 0x80
    6346:	e9d3 3400 	ldrd	r3, r4, [r3]
    634a:	461a      	mov	r2, r3
    634c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6350:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    6354:	4413      	add	r3, r2
    6356:	461a      	mov	r2, r3
    6358:	b28b      	uxth	r3, r1
    635a:	8013      	strh	r3, [r2, #0]
			break;
    635c:	f000 bdeb 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_STB:
			BOUNDS_CHECK_STORE(1);
    6360:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6364:	785b      	ldrb	r3, [r3, #1]
    6366:	f3c3 1303 	ubfx	r3, r3, #4, #4
    636a:	b2db      	uxtb	r3, r3
    636c:	00db      	lsls	r3, r3, #3
    636e:	f507 7200 	add.w	r2, r7, #512	; 0x200
    6372:	4413      	add	r3, r2
    6374:	3b80      	subs	r3, #128	; 0x80
    6376:	e9d3 1200 	ldrd	r1, r2, [r3]
    637a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    637e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    6382:	b21b      	sxth	r3, r3
    6384:	ea4f 74e3 	mov.w	r4, r3, asr #31
    6388:	18c8      	adds	r0, r1, r3
    638a:	63b8      	str	r0, [r7, #56]	; 0x38
    638c:	eb42 0304 	adc.w	r3, r2, r4
    6390:	63fb      	str	r3, [r7, #60]	; 0x3c
    6392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6394:	4619      	mov	r1, r3
    6396:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
    639a:	f507 7380 	add.w	r3, r7, #256	; 0x100
    639e:	9303      	str	r3, [sp, #12]
    63a0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
    63a4:	681b      	ldr	r3, [r3, #0]
    63a6:	9302      	str	r3, [sp, #8]
    63a8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
    63ac:	681b      	ldr	r3, [r3, #0]
    63ae:	9301      	str	r3, [sp, #4]
    63b0:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	; 0x1ea
    63b4:	9300      	str	r3, [sp, #0]
    63b6:	4b65      	ldr	r3, [pc, #404]	; (654c <ebpf_vm_exec+0x1e44>)
    63b8:	2201      	movs	r2, #1
    63ba:	6800      	ldr	r0, [r0, #0]
    63bc:	f013 f866 	bl	1948c <bounds_check>
    63c0:	4603      	mov	r3, r0
    63c2:	f083 0301 	eor.w	r3, r3, #1
    63c6:	b2db      	uxtb	r3, r3
    63c8:	2b00      	cmp	r3, #0
    63ca:	d005      	beq.n	63d8 <ebpf_vm_exec+0x1cd0>
    63cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    63d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    63d4:	f000 bdb1 	b.w	6f3a <ebpf_vm_exec+0x2832>
			*(u8*)(uintptr)(DST + inst->offset) = IMM;
    63d8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    63dc:	6859      	ldr	r1, [r3, #4]
    63de:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    63e2:	785b      	ldrb	r3, [r3, #1]
    63e4:	f3c3 0303 	ubfx	r3, r3, #0, #4
    63e8:	b2db      	uxtb	r3, r3
    63ea:	00db      	lsls	r3, r3, #3
    63ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
    63f0:	4413      	add	r3, r2
    63f2:	3b80      	subs	r3, #128	; 0x80
    63f4:	e9d3 3400 	ldrd	r3, r4, [r3]
    63f8:	461a      	mov	r2, r3
    63fa:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    63fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    6402:	4413      	add	r3, r2
    6404:	461a      	mov	r2, r3
    6406:	b2cb      	uxtb	r3, r1
    6408:	7013      	strb	r3, [r2, #0]
			break;
    640a:	f000 bd94 	b.w	6f36 <ebpf_vm_exec+0x282e>
		
		case EBPF_OP_STXDW:
			BOUNDS_CHECK_STORE(8);
    640e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6412:	785b      	ldrb	r3, [r3, #1]
    6414:	f3c3 1303 	ubfx	r3, r3, #4, #4
    6418:	b2db      	uxtb	r3, r3
    641a:	00db      	lsls	r3, r3, #3
    641c:	f507 7200 	add.w	r2, r7, #512	; 0x200
    6420:	4413      	add	r3, r2
    6422:	3b80      	subs	r3, #128	; 0x80
    6424:	e9d3 1200 	ldrd	r1, r2, [r3]
    6428:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    642c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    6430:	b21b      	sxth	r3, r3
    6432:	ea4f 74e3 	mov.w	r4, r3, asr #31
    6436:	18c8      	adds	r0, r1, r3
    6438:	6338      	str	r0, [r7, #48]	; 0x30
    643a:	eb42 0304 	adc.w	r3, r2, r4
    643e:	637b      	str	r3, [r7, #52]	; 0x34
    6440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6442:	4619      	mov	r1, r3
    6444:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
    6448:	f507 7380 	add.w	r3, r7, #256	; 0x100
    644c:	9303      	str	r3, [sp, #12]
    644e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
    6452:	681b      	ldr	r3, [r3, #0]
    6454:	9302      	str	r3, [sp, #8]
    6456:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
    645a:	681b      	ldr	r3, [r3, #0]
    645c:	9301      	str	r3, [sp, #4]
    645e:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	; 0x1ea
    6462:	9300      	str	r3, [sp, #0]
    6464:	4b39      	ldr	r3, [pc, #228]	; (654c <ebpf_vm_exec+0x1e44>)
    6466:	2208      	movs	r2, #8
    6468:	6800      	ldr	r0, [r0, #0]
    646a:	f013 f80f 	bl	1948c <bounds_check>
    646e:	4603      	mov	r3, r0
    6470:	f083 0301 	eor.w	r3, r3, #1
    6474:	b2db      	uxtb	r3, r3
    6476:	2b00      	cmp	r3, #0
    6478:	d005      	beq.n	6486 <ebpf_vm_exec+0x1d7e>
    647a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    647e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    6482:	f000 bd5a 	b.w	6f3a <ebpf_vm_exec+0x2832>
			*(u64*)(uintptr)(DST + inst->offset) = SRC;
    6486:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    648a:	785b      	ldrb	r3, [r3, #1]
    648c:	f3c3 1303 	ubfx	r3, r3, #4, #4
    6490:	b2db      	uxtb	r3, r3
    6492:	4619      	mov	r1, r3
    6494:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6498:	785b      	ldrb	r3, [r3, #1]
    649a:	f3c3 0303 	ubfx	r3, r3, #0, #4
    649e:	b2db      	uxtb	r3, r3
    64a0:	00db      	lsls	r3, r3, #3
    64a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
    64a6:	4413      	add	r3, r2
    64a8:	3b80      	subs	r3, #128	; 0x80
    64aa:	e9d3 3400 	ldrd	r3, r4, [r3]
    64ae:	461a      	mov	r2, r3
    64b0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    64b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    64b8:	4413      	add	r3, r2
    64ba:	461a      	mov	r2, r3
    64bc:	00cb      	lsls	r3, r1, #3
    64be:	f507 7100 	add.w	r1, r7, #512	; 0x200
    64c2:	440b      	add	r3, r1
    64c4:	3b80      	subs	r3, #128	; 0x80
    64c6:	e9d3 3400 	ldrd	r3, r4, [r3]
    64ca:	e9c2 3400 	strd	r3, r4, [r2]
			break;
    64ce:	f000 bd32 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_STXW:
			BOUNDS_CHECK_STORE(4);
    64d2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    64d6:	785b      	ldrb	r3, [r3, #1]
    64d8:	f3c3 1303 	ubfx	r3, r3, #4, #4
    64dc:	b2db      	uxtb	r3, r3
    64de:	00db      	lsls	r3, r3, #3
    64e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
    64e4:	4413      	add	r3, r2
    64e6:	3b80      	subs	r3, #128	; 0x80
    64e8:	e9d3 1200 	ldrd	r1, r2, [r3]
    64ec:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    64f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    64f4:	b21b      	sxth	r3, r3
    64f6:	ea4f 74e3 	mov.w	r4, r3, asr #31
    64fa:	18c8      	adds	r0, r1, r3
    64fc:	62b8      	str	r0, [r7, #40]	; 0x28
    64fe:	eb42 0304 	adc.w	r3, r2, r4
    6502:	62fb      	str	r3, [r7, #44]	; 0x2c
    6504:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6506:	4619      	mov	r1, r3
    6508:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
    650c:	f507 7380 	add.w	r3, r7, #256	; 0x100
    6510:	9303      	str	r3, [sp, #12]
    6512:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
    6516:	681b      	ldr	r3, [r3, #0]
    6518:	9302      	str	r3, [sp, #8]
    651a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
    651e:	681b      	ldr	r3, [r3, #0]
    6520:	9301      	str	r3, [sp, #4]
    6522:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	; 0x1ea
    6526:	9300      	str	r3, [sp, #0]
    6528:	4b08      	ldr	r3, [pc, #32]	; (654c <ebpf_vm_exec+0x1e44>)
    652a:	2204      	movs	r2, #4
    652c:	6800      	ldr	r0, [r0, #0]
    652e:	f012 ffad 	bl	1948c <bounds_check>
    6532:	4603      	mov	r3, r0
    6534:	f083 0301 	eor.w	r3, r3, #1
    6538:	b2db      	uxtb	r3, r3
    653a:	2b00      	cmp	r3, #0
    653c:	d008      	beq.n	6550 <ebpf_vm_exec+0x1e48>
    653e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6542:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    6546:	f000 bcf8 	b.w	6f3a <ebpf_vm_exec+0x2832>
    654a:	bf00      	nop
    654c:	0002d46c 	.word	0x0002d46c
			*(u32*)(uintptr)(DST + inst->offset) = SRC;
    6550:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6554:	785b      	ldrb	r3, [r3, #1]
    6556:	f3c3 1303 	ubfx	r3, r3, #4, #4
    655a:	b2db      	uxtb	r3, r3
    655c:	00db      	lsls	r3, r3, #3
    655e:	f507 7200 	add.w	r2, r7, #512	; 0x200
    6562:	4413      	add	r3, r2
    6564:	3b80      	subs	r3, #128	; 0x80
    6566:	e9d3 0100 	ldrd	r0, r1, [r3]
    656a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    656e:	785b      	ldrb	r3, [r3, #1]
    6570:	f3c3 0303 	ubfx	r3, r3, #0, #4
    6574:	b2db      	uxtb	r3, r3
    6576:	00db      	lsls	r3, r3, #3
    6578:	f507 7200 	add.w	r2, r7, #512	; 0x200
    657c:	4413      	add	r3, r2
    657e:	3b80      	subs	r3, #128	; 0x80
    6580:	e9d3 3400 	ldrd	r3, r4, [r3]
    6584:	461a      	mov	r2, r3
    6586:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    658a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    658e:	4413      	add	r3, r2
    6590:	461a      	mov	r2, r3
    6592:	4603      	mov	r3, r0
    6594:	6013      	str	r3, [r2, #0]
			break;
    6596:	f000 bcce 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_STXH:
			BOUNDS_CHECK_STORE(2);
    659a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    659e:	785b      	ldrb	r3, [r3, #1]
    65a0:	f3c3 1303 	ubfx	r3, r3, #4, #4
    65a4:	b2db      	uxtb	r3, r3
    65a6:	00db      	lsls	r3, r3, #3
    65a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
    65ac:	4413      	add	r3, r2
    65ae:	3b80      	subs	r3, #128	; 0x80
    65b0:	e9d3 1200 	ldrd	r1, r2, [r3]
    65b4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    65b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    65bc:	b21b      	sxth	r3, r3
    65be:	ea4f 74e3 	mov.w	r4, r3, asr #31
    65c2:	18c8      	adds	r0, r1, r3
    65c4:	6238      	str	r0, [r7, #32]
    65c6:	eb42 0304 	adc.w	r3, r2, r4
    65ca:	627b      	str	r3, [r7, #36]	; 0x24
    65cc:	6a3b      	ldr	r3, [r7, #32]
    65ce:	4619      	mov	r1, r3
    65d0:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
    65d4:	f507 7380 	add.w	r3, r7, #256	; 0x100
    65d8:	9303      	str	r3, [sp, #12]
    65da:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
    65de:	681b      	ldr	r3, [r3, #0]
    65e0:	9302      	str	r3, [sp, #8]
    65e2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
    65e6:	681b      	ldr	r3, [r3, #0]
    65e8:	9301      	str	r3, [sp, #4]
    65ea:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	; 0x1ea
    65ee:	9300      	str	r3, [sp, #0]
    65f0:	4bc4      	ldr	r3, [pc, #784]	; (6904 <ebpf_vm_exec+0x21fc>)
    65f2:	2202      	movs	r2, #2
    65f4:	6800      	ldr	r0, [r0, #0]
    65f6:	f012 ff49 	bl	1948c <bounds_check>
    65fa:	4603      	mov	r3, r0
    65fc:	f083 0301 	eor.w	r3, r3, #1
    6600:	b2db      	uxtb	r3, r3
    6602:	2b00      	cmp	r3, #0
    6604:	d005      	beq.n	6612 <ebpf_vm_exec+0x1f0a>
    6606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    660a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    660e:	f000 bc94 	b.w	6f3a <ebpf_vm_exec+0x2832>
			*(u16*)(uintptr)(DST + inst->offset) = SRC;
    6612:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6616:	785b      	ldrb	r3, [r3, #1]
    6618:	f3c3 1303 	ubfx	r3, r3, #4, #4
    661c:	b2db      	uxtb	r3, r3
    661e:	00db      	lsls	r3, r3, #3
    6620:	f507 7200 	add.w	r2, r7, #512	; 0x200
    6624:	4413      	add	r3, r2
    6626:	3b80      	subs	r3, #128	; 0x80
    6628:	e9d3 0100 	ldrd	r0, r1, [r3]
    662c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6630:	785b      	ldrb	r3, [r3, #1]
    6632:	f3c3 0303 	ubfx	r3, r3, #0, #4
    6636:	b2db      	uxtb	r3, r3
    6638:	00db      	lsls	r3, r3, #3
    663a:	f507 7200 	add.w	r2, r7, #512	; 0x200
    663e:	4413      	add	r3, r2
    6640:	3b80      	subs	r3, #128	; 0x80
    6642:	e9d3 3400 	ldrd	r3, r4, [r3]
    6646:	461a      	mov	r2, r3
    6648:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    664c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    6650:	4413      	add	r3, r2
    6652:	461a      	mov	r2, r3
    6654:	b283      	uxth	r3, r0
    6656:	8013      	strh	r3, [r2, #0]
			break;
    6658:	f000 bc6d 	b.w	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_STXB:
			BOUNDS_CHECK_STORE(1);
    665c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6660:	785b      	ldrb	r3, [r3, #1]
    6662:	f3c3 1303 	ubfx	r3, r3, #4, #4
    6666:	b2db      	uxtb	r3, r3
    6668:	00db      	lsls	r3, r3, #3
    666a:	f507 7200 	add.w	r2, r7, #512	; 0x200
    666e:	4413      	add	r3, r2
    6670:	3b80      	subs	r3, #128	; 0x80
    6672:	e9d3 1200 	ldrd	r1, r2, [r3]
    6676:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    667a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    667e:	b21b      	sxth	r3, r3
    6680:	ea4f 74e3 	mov.w	r4, r3, asr #31
    6684:	18c8      	adds	r0, r1, r3
    6686:	61b8      	str	r0, [r7, #24]
    6688:	eb42 0304 	adc.w	r3, r2, r4
    668c:	61fb      	str	r3, [r7, #28]
    668e:	69bb      	ldr	r3, [r7, #24]
    6690:	4619      	mov	r1, r3
    6692:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
    6696:	f507 7380 	add.w	r3, r7, #256	; 0x100
    669a:	9303      	str	r3, [sp, #12]
    669c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
    66a0:	681b      	ldr	r3, [r3, #0]
    66a2:	9302      	str	r3, [sp, #8]
    66a4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
    66a8:	681b      	ldr	r3, [r3, #0]
    66aa:	9301      	str	r3, [sp, #4]
    66ac:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	; 0x1ea
    66b0:	9300      	str	r3, [sp, #0]
    66b2:	4b94      	ldr	r3, [pc, #592]	; (6904 <ebpf_vm_exec+0x21fc>)
    66b4:	2201      	movs	r2, #1
    66b6:	6800      	ldr	r0, [r0, #0]
    66b8:	f012 fee8 	bl	1948c <bounds_check>
    66bc:	4603      	mov	r3, r0
    66be:	f083 0301 	eor.w	r3, r3, #1
    66c2:	b2db      	uxtb	r3, r3
    66c4:	2b00      	cmp	r3, #0
    66c6:	d005      	beq.n	66d4 <ebpf_vm_exec+0x1fcc>
    66c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    66cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    66d0:	f000 bc33 	b.w	6f3a <ebpf_vm_exec+0x2832>
			*(u8*)(uintptr)(DST + inst->offset) = SRC;
    66d4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    66d8:	785b      	ldrb	r3, [r3, #1]
    66da:	f3c3 1303 	ubfx	r3, r3, #4, #4
    66de:	b2db      	uxtb	r3, r3
    66e0:	00db      	lsls	r3, r3, #3
    66e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
    66e6:	4413      	add	r3, r2
    66e8:	3b80      	subs	r3, #128	; 0x80
    66ea:	e9d3 0100 	ldrd	r0, r1, [r3]
    66ee:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    66f2:	785b      	ldrb	r3, [r3, #1]
    66f4:	f3c3 0303 	ubfx	r3, r3, #0, #4
    66f8:	b2db      	uxtb	r3, r3
    66fa:	00db      	lsls	r3, r3, #3
    66fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
    6700:	4413      	add	r3, r2
    6702:	3b80      	subs	r3, #128	; 0x80
    6704:	e9d3 3400 	ldrd	r3, r4, [r3]
    6708:	461a      	mov	r2, r3
    670a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    670e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    6712:	4413      	add	r3, r2
    6714:	461a      	mov	r2, r3
    6716:	b2c3      	uxtb	r3, r0
    6718:	7013      	strb	r3, [r2, #0]
			break;
    671a:	f000 bc0c 	b.w	6f36 <ebpf_vm_exec+0x282e>
	
		case EBPF_OP_LDDW:
			DST = (u64) (u32)IMM | ((u64) (u32)insts[pc++].imm << 32);
    671e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6722:	685b      	ldr	r3, [r3, #4]
    6724:	461d      	mov	r5, r3
    6726:	f04f 0600 	mov.w	r6, #0
    672a:	f8b7 21fe 	ldrh.w	r2, [r7, #510]	; 0x1fe
    672e:	1c53      	adds	r3, r2, #1
    6730:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
    6734:	4613      	mov	r3, r2
    6736:	00da      	lsls	r2, r3, #3
    6738:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    673c:	4413      	add	r3, r2
    673e:	685b      	ldr	r3, [r3, #4]
    6740:	f04f 0400 	mov.w	r4, #0
    6744:	f04f 0100 	mov.w	r1, #0
    6748:	f04f 0200 	mov.w	r2, #0
    674c:	001a      	movs	r2, r3
    674e:	2100      	movs	r1, #0
    6750:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6754:	785b      	ldrb	r3, [r3, #1]
    6756:	f3c3 0303 	ubfx	r3, r3, #0, #4
    675a:	b2db      	uxtb	r3, r3
    675c:	ea45 0001 	orr.w	r0, r5, r1
    6760:	6138      	str	r0, [r7, #16]
    6762:	4332      	orrs	r2, r6
    6764:	617a      	str	r2, [r7, #20]
    6766:	00db      	lsls	r3, r3, #3
    6768:	f507 7200 	add.w	r2, r7, #512	; 0x200
    676c:	4413      	add	r3, r2
    676e:	3b80      	subs	r3, #128	; 0x80
    6770:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    6774:	e9c3 1200 	strd	r1, r2, [r3]
			break;
    6778:	e3dd      	b.n	6f36 <ebpf_vm_exec+0x282e>

			// op jump
			// 32
		case EBPF_OP_JA:
			pc += inst->offset;
    677a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    677e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    6782:	f9b7 31fe 	ldrsh.w	r3, [r7, #510]	; 0x1fe
    6786:	4413      	add	r3, r2
    6788:	b21b      	sxth	r3, r3
    678a:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
			break;
    678e:	e3d2      	b.n	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_JEQ_REG:
			if (DST == SRC) {
    6790:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6794:	785b      	ldrb	r3, [r3, #1]
    6796:	f3c3 0303 	ubfx	r3, r3, #0, #4
    679a:	b2db      	uxtb	r3, r3
    679c:	00db      	lsls	r3, r3, #3
    679e:	f507 7200 	add.w	r2, r7, #512	; 0x200
    67a2:	4413      	add	r3, r2
    67a4:	3b80      	subs	r3, #128	; 0x80
    67a6:	e9d3 1200 	ldrd	r1, r2, [r3]
    67aa:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    67ae:	785b      	ldrb	r3, [r3, #1]
    67b0:	f3c3 1303 	ubfx	r3, r3, #4, #4
    67b4:	b2db      	uxtb	r3, r3
    67b6:	00db      	lsls	r3, r3, #3
    67b8:	f507 7000 	add.w	r0, r7, #512	; 0x200
    67bc:	4403      	add	r3, r0
    67be:	3b80      	subs	r3, #128	; 0x80
    67c0:	e9d3 3400 	ldrd	r3, r4, [r3]
    67c4:	42a2      	cmp	r2, r4
    67c6:	bf08      	it	eq
    67c8:	4299      	cmpeq	r1, r3
    67ca:	f040 8374 	bne.w	6eb6 <ebpf_vm_exec+0x27ae>
				pc += inst->offset;
    67ce:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    67d2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    67d6:	f9b7 31fe 	ldrsh.w	r3, [r7, #510]	; 0x1fe
    67da:	4413      	add	r3, r2
    67dc:	b21b      	sxth	r3, r3
    67de:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
			}
			break;
    67e2:	e368      	b.n	6eb6 <ebpf_vm_exec+0x27ae>
		case EBPF_OP_JEQ_IMM:
			if (DST == IMM) {
    67e4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    67e8:	785b      	ldrb	r3, [r3, #1]
    67ea:	f3c3 0303 	ubfx	r3, r3, #0, #4
    67ee:	b2db      	uxtb	r3, r3
    67f0:	00db      	lsls	r3, r3, #3
    67f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
    67f6:	4413      	add	r3, r2
    67f8:	3b80      	subs	r3, #128	; 0x80
    67fa:	e9d3 1200 	ldrd	r1, r2, [r3]
    67fe:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6802:	685b      	ldr	r3, [r3, #4]
    6804:	ea4f 74e3 	mov.w	r4, r3, asr #31
    6808:	42a2      	cmp	r2, r4
    680a:	bf08      	it	eq
    680c:	4299      	cmpeq	r1, r3
    680e:	f040 8355 	bne.w	6ebc <ebpf_vm_exec+0x27b4>
				pc += inst->offset;
    6812:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6816:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    681a:	f9b7 31fe 	ldrsh.w	r3, [r7, #510]	; 0x1fe
    681e:	4413      	add	r3, r2
    6820:	b21b      	sxth	r3, r3
    6822:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
			}
			break;
    6826:	e349      	b.n	6ebc <ebpf_vm_exec+0x27b4>
		case EBPF_OP_JGT_IMM:
			if (DST > (u32)IMM) {
    6828:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    682c:	785b      	ldrb	r3, [r3, #1]
    682e:	f3c3 0303 	ubfx	r3, r3, #0, #4
    6832:	b2db      	uxtb	r3, r3
    6834:	00db      	lsls	r3, r3, #3
    6836:	f507 7200 	add.w	r2, r7, #512	; 0x200
    683a:	4413      	add	r3, r2
    683c:	3b80      	subs	r3, #128	; 0x80
    683e:	e9d3 1200 	ldrd	r1, r2, [r3]
    6842:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6846:	685b      	ldr	r3, [r3, #4]
    6848:	f04f 0400 	mov.w	r4, #0
    684c:	4294      	cmp	r4, r2
    684e:	bf08      	it	eq
    6850:	428b      	cmpeq	r3, r1
    6852:	f080 8336 	bcs.w	6ec2 <ebpf_vm_exec+0x27ba>
				pc += inst->offset;
    6856:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    685a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    685e:	f9b7 31fe 	ldrsh.w	r3, [r7, #510]	; 0x1fe
    6862:	4413      	add	r3, r2
    6864:	b21b      	sxth	r3, r3
    6866:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
			}
			break;
    686a:	e32a      	b.n	6ec2 <ebpf_vm_exec+0x27ba>
		case EBPF_OP_JGT_REG:
			if (DST > SRC) {
    686c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6870:	785b      	ldrb	r3, [r3, #1]
    6872:	f3c3 0303 	ubfx	r3, r3, #0, #4
    6876:	b2db      	uxtb	r3, r3
    6878:	00db      	lsls	r3, r3, #3
    687a:	f507 7200 	add.w	r2, r7, #512	; 0x200
    687e:	4413      	add	r3, r2
    6880:	3b80      	subs	r3, #128	; 0x80
    6882:	e9d3 1200 	ldrd	r1, r2, [r3]
    6886:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    688a:	785b      	ldrb	r3, [r3, #1]
    688c:	f3c3 1303 	ubfx	r3, r3, #4, #4
    6890:	b2db      	uxtb	r3, r3
    6892:	00db      	lsls	r3, r3, #3
    6894:	f507 7000 	add.w	r0, r7, #512	; 0x200
    6898:	4403      	add	r3, r0
    689a:	3b80      	subs	r3, #128	; 0x80
    689c:	e9d3 3400 	ldrd	r3, r4, [r3]
    68a0:	4294      	cmp	r4, r2
    68a2:	bf08      	it	eq
    68a4:	428b      	cmpeq	r3, r1
    68a6:	f080 830f 	bcs.w	6ec8 <ebpf_vm_exec+0x27c0>
				pc += inst->offset;
    68aa:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    68ae:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    68b2:	f9b7 31fe 	ldrsh.w	r3, [r7, #510]	; 0x1fe
    68b6:	4413      	add	r3, r2
    68b8:	b21b      	sxth	r3, r3
    68ba:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
			}
			break;
    68be:	e303      	b.n	6ec8 <ebpf_vm_exec+0x27c0>
		case EBPF_OP_JGE_IMM:
			if (DST >= (u32)IMM) {
    68c0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    68c4:	785b      	ldrb	r3, [r3, #1]
    68c6:	f3c3 0303 	ubfx	r3, r3, #0, #4
    68ca:	b2db      	uxtb	r3, r3
    68cc:	00db      	lsls	r3, r3, #3
    68ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
    68d2:	4413      	add	r3, r2
    68d4:	3b80      	subs	r3, #128	; 0x80
    68d6:	e9d3 1200 	ldrd	r1, r2, [r3]
    68da:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    68de:	685b      	ldr	r3, [r3, #4]
    68e0:	f04f 0400 	mov.w	r4, #0
    68e4:	42a2      	cmp	r2, r4
    68e6:	bf08      	it	eq
    68e8:	4299      	cmpeq	r1, r3
    68ea:	f0c0 82f0 	bcc.w	6ece <ebpf_vm_exec+0x27c6>
				pc += inst->offset;
    68ee:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    68f2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    68f6:	f9b7 31fe 	ldrsh.w	r3, [r7, #510]	; 0x1fe
    68fa:	4413      	add	r3, r2
    68fc:	b21b      	sxth	r3, r3
    68fe:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
			}
			break;
    6902:	e2e4      	b.n	6ece <ebpf_vm_exec+0x27c6>
    6904:	0002d46c 	.word	0x0002d46c
		case EBPF_OP_JGE_REG:
			if (DST >= SRC) {
    6908:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    690c:	785b      	ldrb	r3, [r3, #1]
    690e:	f3c3 0303 	ubfx	r3, r3, #0, #4
    6912:	b2db      	uxtb	r3, r3
    6914:	00db      	lsls	r3, r3, #3
    6916:	f507 7200 	add.w	r2, r7, #512	; 0x200
    691a:	4413      	add	r3, r2
    691c:	3b80      	subs	r3, #128	; 0x80
    691e:	e9d3 1200 	ldrd	r1, r2, [r3]
    6922:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6926:	785b      	ldrb	r3, [r3, #1]
    6928:	f3c3 1303 	ubfx	r3, r3, #4, #4
    692c:	b2db      	uxtb	r3, r3
    692e:	00db      	lsls	r3, r3, #3
    6930:	f507 7000 	add.w	r0, r7, #512	; 0x200
    6934:	4403      	add	r3, r0
    6936:	3b80      	subs	r3, #128	; 0x80
    6938:	e9d3 3400 	ldrd	r3, r4, [r3]
    693c:	42a2      	cmp	r2, r4
    693e:	bf08      	it	eq
    6940:	4299      	cmpeq	r1, r3
    6942:	f0c0 82c7 	bcc.w	6ed4 <ebpf_vm_exec+0x27cc>
				pc += inst->offset;
    6946:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    694a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    694e:	f9b7 31fe 	ldrsh.w	r3, [r7, #510]	; 0x1fe
    6952:	4413      	add	r3, r2
    6954:	b21b      	sxth	r3, r3
    6956:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
			}
			break;
    695a:	e2bb      	b.n	6ed4 <ebpf_vm_exec+0x27cc>
		case EBPF_OP_JLT_IMM:
			if (DST < (u32)IMM) {
    695c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6960:	785b      	ldrb	r3, [r3, #1]
    6962:	f3c3 0303 	ubfx	r3, r3, #0, #4
    6966:	b2db      	uxtb	r3, r3
    6968:	00db      	lsls	r3, r3, #3
    696a:	f507 7200 	add.w	r2, r7, #512	; 0x200
    696e:	4413      	add	r3, r2
    6970:	3b80      	subs	r3, #128	; 0x80
    6972:	e9d3 1200 	ldrd	r1, r2, [r3]
    6976:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    697a:	685b      	ldr	r3, [r3, #4]
    697c:	f04f 0400 	mov.w	r4, #0
    6980:	42a2      	cmp	r2, r4
    6982:	bf08      	it	eq
    6984:	4299      	cmpeq	r1, r3
    6986:	f080 82a8 	bcs.w	6eda <ebpf_vm_exec+0x27d2>
				pc += inst->offset;
    698a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    698e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    6992:	f9b7 31fe 	ldrsh.w	r3, [r7, #510]	; 0x1fe
    6996:	4413      	add	r3, r2
    6998:	b21b      	sxth	r3, r3
    699a:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
			}
			break;
    699e:	e29c      	b.n	6eda <ebpf_vm_exec+0x27d2>
		case EBPF_OP_JLT_REG:
			if (DST < SRC) {
    69a0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    69a4:	785b      	ldrb	r3, [r3, #1]
    69a6:	f3c3 0303 	ubfx	r3, r3, #0, #4
    69aa:	b2db      	uxtb	r3, r3
    69ac:	00db      	lsls	r3, r3, #3
    69ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
    69b2:	4413      	add	r3, r2
    69b4:	3b80      	subs	r3, #128	; 0x80
    69b6:	e9d3 1200 	ldrd	r1, r2, [r3]
    69ba:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    69be:	785b      	ldrb	r3, [r3, #1]
    69c0:	f3c3 1303 	ubfx	r3, r3, #4, #4
    69c4:	b2db      	uxtb	r3, r3
    69c6:	00db      	lsls	r3, r3, #3
    69c8:	f507 7000 	add.w	r0, r7, #512	; 0x200
    69cc:	4403      	add	r3, r0
    69ce:	3b80      	subs	r3, #128	; 0x80
    69d0:	e9d3 3400 	ldrd	r3, r4, [r3]
    69d4:	42a2      	cmp	r2, r4
    69d6:	bf08      	it	eq
    69d8:	4299      	cmpeq	r1, r3
    69da:	f080 8281 	bcs.w	6ee0 <ebpf_vm_exec+0x27d8>
				pc += inst->offset;
    69de:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    69e2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    69e6:	f9b7 31fe 	ldrsh.w	r3, [r7, #510]	; 0x1fe
    69ea:	4413      	add	r3, r2
    69ec:	b21b      	sxth	r3, r3
    69ee:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
			}
			break;
    69f2:	e275      	b.n	6ee0 <ebpf_vm_exec+0x27d8>
		case EBPF_OP_JLE_IMM:
			if (DST <= (u32)IMM) {
    69f4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    69f8:	785b      	ldrb	r3, [r3, #1]
    69fa:	f3c3 0303 	ubfx	r3, r3, #0, #4
    69fe:	b2db      	uxtb	r3, r3
    6a00:	00db      	lsls	r3, r3, #3
    6a02:	f507 7200 	add.w	r2, r7, #512	; 0x200
    6a06:	4413      	add	r3, r2
    6a08:	3b80      	subs	r3, #128	; 0x80
    6a0a:	e9d3 1200 	ldrd	r1, r2, [r3]
    6a0e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6a12:	685b      	ldr	r3, [r3, #4]
    6a14:	f04f 0400 	mov.w	r4, #0
    6a18:	4294      	cmp	r4, r2
    6a1a:	bf08      	it	eq
    6a1c:	428b      	cmpeq	r3, r1
    6a1e:	f0c0 8262 	bcc.w	6ee6 <ebpf_vm_exec+0x27de>
				pc += inst->offset;
    6a22:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6a26:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    6a2a:	f9b7 31fe 	ldrsh.w	r3, [r7, #510]	; 0x1fe
    6a2e:	4413      	add	r3, r2
    6a30:	b21b      	sxth	r3, r3
    6a32:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
			}
			break;
    6a36:	e256      	b.n	6ee6 <ebpf_vm_exec+0x27de>
		case EBPF_OP_JLE_REG:
			if (DST <= SRC) {
    6a38:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6a3c:	785b      	ldrb	r3, [r3, #1]
    6a3e:	f3c3 0303 	ubfx	r3, r3, #0, #4
    6a42:	b2db      	uxtb	r3, r3
    6a44:	00db      	lsls	r3, r3, #3
    6a46:	f507 7200 	add.w	r2, r7, #512	; 0x200
    6a4a:	4413      	add	r3, r2
    6a4c:	3b80      	subs	r3, #128	; 0x80
    6a4e:	e9d3 1200 	ldrd	r1, r2, [r3]
    6a52:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6a56:	785b      	ldrb	r3, [r3, #1]
    6a58:	f3c3 1303 	ubfx	r3, r3, #4, #4
    6a5c:	b2db      	uxtb	r3, r3
    6a5e:	00db      	lsls	r3, r3, #3
    6a60:	f507 7000 	add.w	r0, r7, #512	; 0x200
    6a64:	4403      	add	r3, r0
    6a66:	3b80      	subs	r3, #128	; 0x80
    6a68:	e9d3 3400 	ldrd	r3, r4, [r3]
    6a6c:	4294      	cmp	r4, r2
    6a6e:	bf08      	it	eq
    6a70:	428b      	cmpeq	r3, r1
    6a72:	f0c0 823b 	bcc.w	6eec <ebpf_vm_exec+0x27e4>
				pc += inst->offset;
    6a76:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6a7a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    6a7e:	f9b7 31fe 	ldrsh.w	r3, [r7, #510]	; 0x1fe
    6a82:	4413      	add	r3, r2
    6a84:	b21b      	sxth	r3, r3
    6a86:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
			}
			break;
    6a8a:	e22f      	b.n	6eec <ebpf_vm_exec+0x27e4>
		case EBPF_OP_JSET_IMM:
			if (DST & IMM) {
    6a8c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6a90:	785b      	ldrb	r3, [r3, #1]
    6a92:	f3c3 0303 	ubfx	r3, r3, #0, #4
    6a96:	b2db      	uxtb	r3, r3
    6a98:	00db      	lsls	r3, r3, #3
    6a9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
    6a9e:	4413      	add	r3, r2
    6aa0:	3b80      	subs	r3, #128	; 0x80
    6aa2:	e9d3 1200 	ldrd	r1, r2, [r3]
    6aa6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6aaa:	685b      	ldr	r3, [r3, #4]
    6aac:	ea4f 74e3 	mov.w	r4, r3, asr #31
    6ab0:	ea01 0003 	and.w	r0, r1, r3
    6ab4:	60b8      	str	r0, [r7, #8]
    6ab6:	ea02 0304 	and.w	r3, r2, r4
    6aba:	60fb      	str	r3, [r7, #12]
    6abc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    6ac0:	4323      	orrs	r3, r4
    6ac2:	f000 8216 	beq.w	6ef2 <ebpf_vm_exec+0x27ea>
				pc += inst->offset;
    6ac6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6aca:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    6ace:	f9b7 31fe 	ldrsh.w	r3, [r7, #510]	; 0x1fe
    6ad2:	4413      	add	r3, r2
    6ad4:	b21b      	sxth	r3, r3
    6ad6:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
			}
			break;
    6ada:	e20a      	b.n	6ef2 <ebpf_vm_exec+0x27ea>
		case EBPF_OP_JSET_REG:
			if (DST & SRC) {
    6adc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6ae0:	785b      	ldrb	r3, [r3, #1]
    6ae2:	f3c3 0303 	ubfx	r3, r3, #0, #4
    6ae6:	b2db      	uxtb	r3, r3
    6ae8:	00db      	lsls	r3, r3, #3
    6aea:	f507 7200 	add.w	r2, r7, #512	; 0x200
    6aee:	4413      	add	r3, r2
    6af0:	3b80      	subs	r3, #128	; 0x80
    6af2:	e9d3 1200 	ldrd	r1, r2, [r3]
    6af6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6afa:	785b      	ldrb	r3, [r3, #1]
    6afc:	f3c3 1303 	ubfx	r3, r3, #4, #4
    6b00:	b2db      	uxtb	r3, r3
    6b02:	00db      	lsls	r3, r3, #3
    6b04:	f507 7000 	add.w	r0, r7, #512	; 0x200
    6b08:	4403      	add	r3, r0
    6b0a:	3b80      	subs	r3, #128	; 0x80
    6b0c:	e9d3 3400 	ldrd	r3, r4, [r3]
    6b10:	ea01 0003 	and.w	r0, r1, r3
    6b14:	6038      	str	r0, [r7, #0]
    6b16:	ea02 0304 	and.w	r3, r2, r4
    6b1a:	607b      	str	r3, [r7, #4]
    6b1c:	e9d7 3400 	ldrd	r3, r4, [r7]
    6b20:	4323      	orrs	r3, r4
    6b22:	f000 81e9 	beq.w	6ef8 <ebpf_vm_exec+0x27f0>
				pc += inst->offset;
    6b26:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6b2a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    6b2e:	f9b7 31fe 	ldrsh.w	r3, [r7, #510]	; 0x1fe
    6b32:	4413      	add	r3, r2
    6b34:	b21b      	sxth	r3, r3
    6b36:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
			}
			break;
    6b3a:	e1dd      	b.n	6ef8 <ebpf_vm_exec+0x27f0>
		case EBPF_OP_JNE_IMM:
			if (DST != IMM) {
    6b3c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6b40:	785b      	ldrb	r3, [r3, #1]
    6b42:	f3c3 0303 	ubfx	r3, r3, #0, #4
    6b46:	b2db      	uxtb	r3, r3
    6b48:	00db      	lsls	r3, r3, #3
    6b4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
    6b4e:	4413      	add	r3, r2
    6b50:	3b80      	subs	r3, #128	; 0x80
    6b52:	e9d3 1200 	ldrd	r1, r2, [r3]
    6b56:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6b5a:	685b      	ldr	r3, [r3, #4]
    6b5c:	ea4f 74e3 	mov.w	r4, r3, asr #31
    6b60:	42a2      	cmp	r2, r4
    6b62:	bf08      	it	eq
    6b64:	4299      	cmpeq	r1, r3
    6b66:	f000 81ca 	beq.w	6efe <ebpf_vm_exec+0x27f6>
				pc += inst->offset;
    6b6a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6b6e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    6b72:	f9b7 31fe 	ldrsh.w	r3, [r7, #510]	; 0x1fe
    6b76:	4413      	add	r3, r2
    6b78:	b21b      	sxth	r3, r3
    6b7a:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
			}
			break;
    6b7e:	e1be      	b.n	6efe <ebpf_vm_exec+0x27f6>
		case EBPF_OP_JNE_REG:
			if (DST != SRC) {
    6b80:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6b84:	785b      	ldrb	r3, [r3, #1]
    6b86:	f3c3 0303 	ubfx	r3, r3, #0, #4
    6b8a:	b2db      	uxtb	r3, r3
    6b8c:	00db      	lsls	r3, r3, #3
    6b8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
    6b92:	4413      	add	r3, r2
    6b94:	3b80      	subs	r3, #128	; 0x80
    6b96:	e9d3 1200 	ldrd	r1, r2, [r3]
    6b9a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6b9e:	785b      	ldrb	r3, [r3, #1]
    6ba0:	f3c3 1303 	ubfx	r3, r3, #4, #4
    6ba4:	b2db      	uxtb	r3, r3
    6ba6:	00db      	lsls	r3, r3, #3
    6ba8:	f507 7000 	add.w	r0, r7, #512	; 0x200
    6bac:	4403      	add	r3, r0
    6bae:	3b80      	subs	r3, #128	; 0x80
    6bb0:	e9d3 3400 	ldrd	r3, r4, [r3]
    6bb4:	42a2      	cmp	r2, r4
    6bb6:	bf08      	it	eq
    6bb8:	4299      	cmpeq	r1, r3
    6bba:	f000 81a3 	beq.w	6f04 <ebpf_vm_exec+0x27fc>
				pc += inst->offset;
    6bbe:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6bc2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    6bc6:	f9b7 31fe 	ldrsh.w	r3, [r7, #510]	; 0x1fe
    6bca:	4413      	add	r3, r2
    6bcc:	b21b      	sxth	r3, r3
    6bce:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
			}
			break;
    6bd2:	e197      	b.n	6f04 <ebpf_vm_exec+0x27fc>

		// 64
		case EBPF_OP_JSGT_IMM:
			// DEBUG_LOG("EBPF_OP_JSGT_REG %d %d\n", (s64) DST, (s64) IMM);
			if ((s64)DST > (s64) IMM) {
    6bd4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6bd8:	785b      	ldrb	r3, [r3, #1]
    6bda:	f3c3 0303 	ubfx	r3, r3, #0, #4
    6bde:	b2db      	uxtb	r3, r3
    6be0:	00db      	lsls	r3, r3, #3
    6be2:	f507 7200 	add.w	r2, r7, #512	; 0x200
    6be6:	4413      	add	r3, r2
    6be8:	3b80      	subs	r3, #128	; 0x80
    6bea:	e9d3 3400 	ldrd	r3, r4, [r3]
    6bee:	4619      	mov	r1, r3
    6bf0:	4622      	mov	r2, r4
    6bf2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6bf6:	685b      	ldr	r3, [r3, #4]
    6bf8:	ea4f 74e3 	mov.w	r4, r3, asr #31
    6bfc:	428b      	cmp	r3, r1
    6bfe:	eb74 0302 	sbcs.w	r3, r4, r2
    6c02:	f280 8182 	bge.w	6f0a <ebpf_vm_exec+0x2802>
				pc += inst->offset;
    6c06:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6c0a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    6c0e:	f9b7 31fe 	ldrsh.w	r3, [r7, #510]	; 0x1fe
    6c12:	4413      	add	r3, r2
    6c14:	b21b      	sxth	r3, r3
    6c16:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
			}
			break;
    6c1a:	e176      	b.n	6f0a <ebpf_vm_exec+0x2802>
		case EBPF_OP_JSGT_REG:
			if ((s64)DST > (s64)SRC) {
    6c1c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6c20:	785b      	ldrb	r3, [r3, #1]
    6c22:	f3c3 0303 	ubfx	r3, r3, #0, #4
    6c26:	b2db      	uxtb	r3, r3
    6c28:	00db      	lsls	r3, r3, #3
    6c2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
    6c2e:	4413      	add	r3, r2
    6c30:	3b80      	subs	r3, #128	; 0x80
    6c32:	e9d3 3400 	ldrd	r3, r4, [r3]
    6c36:	4619      	mov	r1, r3
    6c38:	4622      	mov	r2, r4
    6c3a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6c3e:	785b      	ldrb	r3, [r3, #1]
    6c40:	f3c3 1303 	ubfx	r3, r3, #4, #4
    6c44:	b2db      	uxtb	r3, r3
    6c46:	00db      	lsls	r3, r3, #3
    6c48:	f507 7000 	add.w	r0, r7, #512	; 0x200
    6c4c:	4403      	add	r3, r0
    6c4e:	3b80      	subs	r3, #128	; 0x80
    6c50:	e9d3 3400 	ldrd	r3, r4, [r3]
    6c54:	428b      	cmp	r3, r1
    6c56:	eb74 0302 	sbcs.w	r3, r4, r2
    6c5a:	f280 8159 	bge.w	6f10 <ebpf_vm_exec+0x2808>
				pc += inst->offset;
    6c5e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6c62:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    6c66:	f9b7 31fe 	ldrsh.w	r3, [r7, #510]	; 0x1fe
    6c6a:	4413      	add	r3, r2
    6c6c:	b21b      	sxth	r3, r3
    6c6e:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
			}
			break;
    6c72:	e14d      	b.n	6f10 <ebpf_vm_exec+0x2808>
		case EBPF_OP_JSGE_IMM:
			if ((s64)DST >= (s64) IMM) {
    6c74:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6c78:	785b      	ldrb	r3, [r3, #1]
    6c7a:	f3c3 0303 	ubfx	r3, r3, #0, #4
    6c7e:	b2db      	uxtb	r3, r3
    6c80:	00db      	lsls	r3, r3, #3
    6c82:	f507 7200 	add.w	r2, r7, #512	; 0x200
    6c86:	4413      	add	r3, r2
    6c88:	3b80      	subs	r3, #128	; 0x80
    6c8a:	e9d3 3400 	ldrd	r3, r4, [r3]
    6c8e:	4619      	mov	r1, r3
    6c90:	4622      	mov	r2, r4
    6c92:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6c96:	685b      	ldr	r3, [r3, #4]
    6c98:	ea4f 74e3 	mov.w	r4, r3, asr #31
    6c9c:	4299      	cmp	r1, r3
    6c9e:	eb72 0304 	sbcs.w	r3, r2, r4
    6ca2:	f2c0 8138 	blt.w	6f16 <ebpf_vm_exec+0x280e>
				pc += inst->offset;
    6ca6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6caa:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    6cae:	f9b7 31fe 	ldrsh.w	r3, [r7, #510]	; 0x1fe
    6cb2:	4413      	add	r3, r2
    6cb4:	b21b      	sxth	r3, r3
    6cb6:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
			}
			break;
    6cba:	e12c      	b.n	6f16 <ebpf_vm_exec+0x280e>
		case EBPF_OP_JSGE_REG:
			if ((s64)DST >= (s64)SRC) {
    6cbc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6cc0:	785b      	ldrb	r3, [r3, #1]
    6cc2:	f3c3 0303 	ubfx	r3, r3, #0, #4
    6cc6:	b2db      	uxtb	r3, r3
    6cc8:	00db      	lsls	r3, r3, #3
    6cca:	f507 7200 	add.w	r2, r7, #512	; 0x200
    6cce:	4413      	add	r3, r2
    6cd0:	3b80      	subs	r3, #128	; 0x80
    6cd2:	e9d3 3400 	ldrd	r3, r4, [r3]
    6cd6:	4619      	mov	r1, r3
    6cd8:	4622      	mov	r2, r4
    6cda:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6cde:	785b      	ldrb	r3, [r3, #1]
    6ce0:	f3c3 1303 	ubfx	r3, r3, #4, #4
    6ce4:	b2db      	uxtb	r3, r3
    6ce6:	00db      	lsls	r3, r3, #3
    6ce8:	f507 7000 	add.w	r0, r7, #512	; 0x200
    6cec:	4403      	add	r3, r0
    6cee:	3b80      	subs	r3, #128	; 0x80
    6cf0:	e9d3 3400 	ldrd	r3, r4, [r3]
    6cf4:	4299      	cmp	r1, r3
    6cf6:	eb72 0304 	sbcs.w	r3, r2, r4
    6cfa:	f2c0 810f 	blt.w	6f1c <ebpf_vm_exec+0x2814>
				pc += inst->offset;
    6cfe:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6d02:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    6d06:	f9b7 31fe 	ldrsh.w	r3, [r7, #510]	; 0x1fe
    6d0a:	4413      	add	r3, r2
    6d0c:	b21b      	sxth	r3, r3
    6d0e:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
			}
			break; 
    6d12:	e103      	b.n	6f1c <ebpf_vm_exec+0x2814>
		case EBPF_OP_JSLT_IMM:
			if ((s64)DST < (s64) IMM) {
    6d14:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6d18:	785b      	ldrb	r3, [r3, #1]
    6d1a:	f3c3 0303 	ubfx	r3, r3, #0, #4
    6d1e:	b2db      	uxtb	r3, r3
    6d20:	00db      	lsls	r3, r3, #3
    6d22:	f507 7200 	add.w	r2, r7, #512	; 0x200
    6d26:	4413      	add	r3, r2
    6d28:	3b80      	subs	r3, #128	; 0x80
    6d2a:	e9d3 3400 	ldrd	r3, r4, [r3]
    6d2e:	4619      	mov	r1, r3
    6d30:	4622      	mov	r2, r4
    6d32:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6d36:	685b      	ldr	r3, [r3, #4]
    6d38:	ea4f 74e3 	mov.w	r4, r3, asr #31
    6d3c:	4299      	cmp	r1, r3
    6d3e:	eb72 0304 	sbcs.w	r3, r2, r4
    6d42:	f280 80ee 	bge.w	6f22 <ebpf_vm_exec+0x281a>
				pc += inst->offset;
    6d46:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6d4a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    6d4e:	f9b7 31fe 	ldrsh.w	r3, [r7, #510]	; 0x1fe
    6d52:	4413      	add	r3, r2
    6d54:	b21b      	sxth	r3, r3
    6d56:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
			}
			break;
    6d5a:	e0e2      	b.n	6f22 <ebpf_vm_exec+0x281a>
		case EBPF_OP_JSLT_REG:
			if ((s64)DST < (s64)SRC) {
    6d5c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6d60:	785b      	ldrb	r3, [r3, #1]
    6d62:	f3c3 0303 	ubfx	r3, r3, #0, #4
    6d66:	b2db      	uxtb	r3, r3
    6d68:	00db      	lsls	r3, r3, #3
    6d6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
    6d6e:	4413      	add	r3, r2
    6d70:	3b80      	subs	r3, #128	; 0x80
    6d72:	e9d3 3400 	ldrd	r3, r4, [r3]
    6d76:	4619      	mov	r1, r3
    6d78:	4622      	mov	r2, r4
    6d7a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6d7e:	785b      	ldrb	r3, [r3, #1]
    6d80:	f3c3 1303 	ubfx	r3, r3, #4, #4
    6d84:	b2db      	uxtb	r3, r3
    6d86:	00db      	lsls	r3, r3, #3
    6d88:	f507 7000 	add.w	r0, r7, #512	; 0x200
    6d8c:	4403      	add	r3, r0
    6d8e:	3b80      	subs	r3, #128	; 0x80
    6d90:	e9d3 3400 	ldrd	r3, r4, [r3]
    6d94:	4299      	cmp	r1, r3
    6d96:	eb72 0304 	sbcs.w	r3, r2, r4
    6d9a:	f280 80c5 	bge.w	6f28 <ebpf_vm_exec+0x2820>
				pc += inst->offset;
    6d9e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6da2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    6da6:	f9b7 31fe 	ldrsh.w	r3, [r7, #510]	; 0x1fe
    6daa:	4413      	add	r3, r2
    6dac:	b21b      	sxth	r3, r3
    6dae:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
			}
			break;
    6db2:	e0b9      	b.n	6f28 <ebpf_vm_exec+0x2820>
		case EBPF_OP_JSLE_IMM:
			if ((s64)DST <= (s64) IMM) {
    6db4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6db8:	785b      	ldrb	r3, [r3, #1]
    6dba:	f3c3 0303 	ubfx	r3, r3, #0, #4
    6dbe:	b2db      	uxtb	r3, r3
    6dc0:	00db      	lsls	r3, r3, #3
    6dc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
    6dc6:	4413      	add	r3, r2
    6dc8:	3b80      	subs	r3, #128	; 0x80
    6dca:	e9d3 3400 	ldrd	r3, r4, [r3]
    6dce:	4619      	mov	r1, r3
    6dd0:	4622      	mov	r2, r4
    6dd2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6dd6:	685b      	ldr	r3, [r3, #4]
    6dd8:	ea4f 74e3 	mov.w	r4, r3, asr #31
    6ddc:	428b      	cmp	r3, r1
    6dde:	eb74 0302 	sbcs.w	r3, r4, r2
    6de2:	f2c0 80a4 	blt.w	6f2e <ebpf_vm_exec+0x2826>
				pc += inst->offset;
    6de6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6dea:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    6dee:	f9b7 31fe 	ldrsh.w	r3, [r7, #510]	; 0x1fe
    6df2:	4413      	add	r3, r2
    6df4:	b21b      	sxth	r3, r3
    6df6:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
			}
			break;
    6dfa:	e098      	b.n	6f2e <ebpf_vm_exec+0x2826>
		case EBPF_OP_JSLE_REG:
			if ((s64)DST <= (s64)SRC) {
    6dfc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6e00:	785b      	ldrb	r3, [r3, #1]
    6e02:	f3c3 0303 	ubfx	r3, r3, #0, #4
    6e06:	b2db      	uxtb	r3, r3
    6e08:	00db      	lsls	r3, r3, #3
    6e0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
    6e0e:	4413      	add	r3, r2
    6e10:	3b80      	subs	r3, #128	; 0x80
    6e12:	e9d3 3400 	ldrd	r3, r4, [r3]
    6e16:	4619      	mov	r1, r3
    6e18:	4622      	mov	r2, r4
    6e1a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6e1e:	785b      	ldrb	r3, [r3, #1]
    6e20:	f3c3 1303 	ubfx	r3, r3, #4, #4
    6e24:	b2db      	uxtb	r3, r3
    6e26:	00db      	lsls	r3, r3, #3
    6e28:	f507 7000 	add.w	r0, r7, #512	; 0x200
    6e2c:	4403      	add	r3, r0
    6e2e:	3b80      	subs	r3, #128	; 0x80
    6e30:	e9d3 3400 	ldrd	r3, r4, [r3]
    6e34:	428b      	cmp	r3, r1
    6e36:	eb74 0302 	sbcs.w	r3, r4, r2
    6e3a:	db7b      	blt.n	6f34 <ebpf_vm_exec+0x282c>
				pc += inst->offset;
    6e3c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6e40:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    6e44:	f9b7 31fe 	ldrsh.w	r3, [r7, #510]	; 0x1fe
    6e48:	4413      	add	r3, r2
    6e4a:	b21b      	sxth	r3, r3
    6e4c:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
			}
			break;
    6e50:	e070      	b.n	6f34 <ebpf_vm_exec+0x282c>
		case EBPF_OP_CALL:
			// DEBUG_LOG("VM call func: %d at: 0x%08x a1:%d a2:%d a3:%d a4:%d\n", inst->imm, (u32)reg[1], (u32)reg[2], (u32)reg[3], (u32)reg[4], (u32)reg[5]);
			// DEBUG_LOG("%d %d %d %d %d\n", (u32)reg[1], (u32)reg[2], (u32)reg[3], (u32)reg[4], (u32)reg[5]);
			// ctypes
			reg[0] = vm->helper_func->ext_funcs[inst->imm](reg[1], reg[2], reg[3], reg[4], reg[5]);
    6e52:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
    6e56:	681b      	ldr	r3, [r3, #0]
    6e58:	689b      	ldr	r3, [r3, #8]
    6e5a:	681a      	ldr	r2, [r3, #0]
    6e5c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
    6e60:	685b      	ldr	r3, [r3, #4]
    6e62:	009b      	lsls	r3, r3, #2
    6e64:	4413      	add	r3, r2
    6e66:	681b      	ldr	r3, [r3, #0]
    6e68:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    6e6c:	e9d7 ab62 	ldrd	sl, fp, [r7, #392]	; 0x188
    6e70:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
    6e74:	e9d7 5666 	ldrd	r5, r6, [r7, #408]	; 0x198
    6e78:	e9d7 1268 	ldrd	r1, r2, [r7, #416]	; 0x1a0
    6e7c:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
    6e80:	e9cd 3404 	strd	r3, r4, [sp, #16]
    6e84:	e9cd 1202 	strd	r1, r2, [sp, #8]
    6e88:	e9cd 5600 	strd	r5, r6, [sp]
    6e8c:	4642      	mov	r2, r8
    6e8e:	464b      	mov	r3, r9
    6e90:	4650      	mov	r0, sl
    6e92:	4659      	mov	r1, fp
    6e94:	f8d7 40f0 	ldr.w	r4, [r7, #240]	; 0xf0
    6e98:	47a0      	blx	r4
    6e9a:	4603      	mov	r3, r0
    6e9c:	460c      	mov	r4, r1
    6e9e:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
			break;
    6ea2:	e048      	b.n	6f36 <ebpf_vm_exec+0x282e>
		case EBPF_OP_EXIT:
			return reg[0];
    6ea4:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
    6ea8:	e047      	b.n	6f3a <ebpf_vm_exec+0x2832>
			break;
    6eaa:	bf00      	nop
    6eac:	f7fd bc57 	b.w	475e <ebpf_vm_exec+0x56>
			break;
    6eb0:	bf00      	nop
    6eb2:	f7fd bc54 	b.w	475e <ebpf_vm_exec+0x56>
			break;
    6eb6:	bf00      	nop
    6eb8:	f7fd bc51 	b.w	475e <ebpf_vm_exec+0x56>
			break;
    6ebc:	bf00      	nop
    6ebe:	f7fd bc4e 	b.w	475e <ebpf_vm_exec+0x56>
			break;
    6ec2:	bf00      	nop
    6ec4:	f7fd bc4b 	b.w	475e <ebpf_vm_exec+0x56>
			break;
    6ec8:	bf00      	nop
    6eca:	f7fd bc48 	b.w	475e <ebpf_vm_exec+0x56>
			break;
    6ece:	bf00      	nop
    6ed0:	f7fd bc45 	b.w	475e <ebpf_vm_exec+0x56>
			break;
    6ed4:	bf00      	nop
    6ed6:	f7fd bc42 	b.w	475e <ebpf_vm_exec+0x56>
			break;
    6eda:	bf00      	nop
    6edc:	f7fd bc3f 	b.w	475e <ebpf_vm_exec+0x56>
			break;
    6ee0:	bf00      	nop
    6ee2:	f7fd bc3c 	b.w	475e <ebpf_vm_exec+0x56>
			break;
    6ee6:	bf00      	nop
    6ee8:	f7fd bc39 	b.w	475e <ebpf_vm_exec+0x56>
			break;
    6eec:	bf00      	nop
    6eee:	f7fd bc36 	b.w	475e <ebpf_vm_exec+0x56>
			break;
    6ef2:	bf00      	nop
    6ef4:	f7fd bc33 	b.w	475e <ebpf_vm_exec+0x56>
			break;
    6ef8:	bf00      	nop
    6efa:	f7fd bc30 	b.w	475e <ebpf_vm_exec+0x56>
			break;
    6efe:	bf00      	nop
    6f00:	f7fd bc2d 	b.w	475e <ebpf_vm_exec+0x56>
			break;
    6f04:	bf00      	nop
    6f06:	f7fd bc2a 	b.w	475e <ebpf_vm_exec+0x56>
			break;
    6f0a:	bf00      	nop
    6f0c:	f7fd bc27 	b.w	475e <ebpf_vm_exec+0x56>
			break;
    6f10:	bf00      	nop
    6f12:	f7fd bc24 	b.w	475e <ebpf_vm_exec+0x56>
			break;
    6f16:	bf00      	nop
    6f18:	f7fd bc21 	b.w	475e <ebpf_vm_exec+0x56>
			break; 
    6f1c:	bf00      	nop
    6f1e:	f7fd bc1e 	b.w	475e <ebpf_vm_exec+0x56>
			break;
    6f22:	bf00      	nop
    6f24:	f7fd bc1b 	b.w	475e <ebpf_vm_exec+0x56>
			break;
    6f28:	bf00      	nop
    6f2a:	f7fd bc18 	b.w	475e <ebpf_vm_exec+0x56>
			break;
    6f2e:	bf00      	nop
    6f30:	f7fd bc15 	b.w	475e <ebpf_vm_exec+0x56>
			break;
    6f34:	bf00      	nop
	while (true) {
    6f36:	f7fd bc12 	b.w	475e <ebpf_vm_exec+0x56>
		}
	}

	return ret;
}
    6f3a:	4618      	mov	r0, r3
    6f3c:	4621      	mov	r1, r4
    6f3e:	f507 7701 	add.w	r7, r7, #516	; 0x204
    6f42:	46bd      	mov	sp, r7
    6f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00006f48 <jit_mem_allocate>:
static uint8_t offset_mem[1024];
#endif

jit_mem g_jit_mem;

jit_mem* jit_mem_allocate(int insts_num) {
    6f48:	b580      	push	{r7, lr}
    6f4a:	b084      	sub	sp, #16
    6f4c:	af00      	add	r7, sp, #0
    6f4e:	6078      	str	r0, [r7, #4]
	jit_mem *mem = &g_jit_mem;
    6f50:	4b0e      	ldr	r3, [pc, #56]	; (6f8c <jit_mem_allocate+0x44>)
    6f52:	60fb      	str	r3, [r7, #12]
	mem->code_size = sizeof(jit_buffer);
    6f54:	68fb      	ldr	r3, [r7, #12]
    6f56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    6f5a:	605a      	str	r2, [r3, #4]
	mem->jit_code = jit_buffer;
    6f5c:	68fb      	ldr	r3, [r7, #12]
    6f5e:	4a0c      	ldr	r2, [pc, #48]	; (6f90 <jit_mem_allocate+0x48>)
    6f60:	601a      	str	r2, [r3, #0]
	mem->jmp_offsets = offset_mem;
    6f62:	68fb      	ldr	r3, [r7, #12]
    6f64:	4a0b      	ldr	r2, [pc, #44]	; (6f94 <jit_mem_allocate+0x4c>)
    6f66:	609a      	str	r2, [r3, #8]
	memset(jit_buffer, 0, sizeof(jit_buffer));
    6f68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    6f6c:	2100      	movs	r1, #0
    6f6e:	4808      	ldr	r0, [pc, #32]	; (6f90 <jit_mem_allocate+0x48>)
    6f70:	f7fb f8a2 	bl	20b8 <memset>
	memset(offset_mem, 0, sizeof(offset_mem));
    6f74:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6f78:	2100      	movs	r1, #0
    6f7a:	4806      	ldr	r0, [pc, #24]	; (6f94 <jit_mem_allocate+0x4c>)
    6f7c:	f7fb f89c 	bl	20b8 <memset>
	return mem;
    6f80:	68fb      	ldr	r3, [r7, #12]
}
    6f82:	4618      	mov	r0, r3
    6f84:	3710      	adds	r7, #16
    6f86:	46bd      	mov	sp, r7
    6f88:	bd80      	pop	{r7, pc}
    6f8a:	bf00      	nop
    6f8c:	200022dc 	.word	0x200022dc
    6f90:	20000000 	.word	0x20000000
    6f94:	20001000 	.word	0x20001000

00006f98 <_thumb16_IT_T1>:

static inline u32 _thumb32_MUL_T2(s8 Rd, s8 Rn, s8 Rm) {
    return (THUMB2_MUL_T2) | (Rn << 16) | (Rd << 8) | (Rm);
}

static inline u16 _thumb16_IT_T1(u8 cond, u8 mask) {
    6f98:	b480      	push	{r7}
    6f9a:	b083      	sub	sp, #12
    6f9c:	af00      	add	r7, sp, #0
    6f9e:	4603      	mov	r3, r0
    6fa0:	460a      	mov	r2, r1
    6fa2:	71fb      	strb	r3, [r7, #7]
    6fa4:	4613      	mov	r3, r2
    6fa6:	71bb      	strb	r3, [r7, #6]
    return (THUMB2_IT) | (cond << 4) | (mask);
    6fa8:	79fb      	ldrb	r3, [r7, #7]
    6faa:	011b      	lsls	r3, r3, #4
    6fac:	b21a      	sxth	r2, r3
    6fae:	79bb      	ldrb	r3, [r7, #6]
    6fb0:	b21b      	sxth	r3, r3
    6fb2:	4313      	orrs	r3, r2
    6fb4:	b21a      	sxth	r2, r3
    6fb6:	4b04      	ldr	r3, [pc, #16]	; (6fc8 <_thumb16_IT_T1+0x30>)
    6fb8:	4313      	orrs	r3, r2
    6fba:	b21b      	sxth	r3, r3
    6fbc:	b29b      	uxth	r3, r3
}
    6fbe:	4618      	mov	r0, r3
    6fc0:	370c      	adds	r7, #12
    6fc2:	46bd      	mov	sp, r7
    6fc4:	bc80      	pop	{r7}
    6fc6:	4770      	bx	lr
    6fc8:	ffffbf00 	.word	0xffffbf00

00006fcc <_thumb16_B_T1>:
    s32 imm3 = (shiftImm5 >> 2) & 0b111;
    return (THUMB2_RSBW_REG) | (flagS << 20) | (Rn << 16) | (imm3 << 12) | (Rd << 8) |
        (imm2 << 6) | (srtype << 4) | (Rm);
}

static inline u16 _thumb16_B_T1(s32 offImm9, s8 cond) {
    6fcc:	b480      	push	{r7}
    6fce:	b085      	sub	sp, #20
    6fd0:	af00      	add	r7, sp, #0
    6fd2:	6078      	str	r0, [r7, #4]
    6fd4:	460b      	mov	r3, r1
    6fd6:	70fb      	strb	r3, [r7, #3]
    u16 imm8 = (offImm9 >> 1) & 0x00ff;
    6fd8:	687b      	ldr	r3, [r7, #4]
    6fda:	105b      	asrs	r3, r3, #1
    6fdc:	b29b      	uxth	r3, r3
    6fde:	b2db      	uxtb	r3, r3
    6fe0:	81fb      	strh	r3, [r7, #14]
    // DEBUG_LOG("----------------------offset: %d\n", imm8);
    return (THUMB2_B_COND_T1) | (cond << 8) | (imm8);
    6fe2:	f997 3003 	ldrsb.w	r3, [r7, #3]
    6fe6:	021b      	lsls	r3, r3, #8
    6fe8:	b21a      	sxth	r2, r3
    6fea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    6fee:	4313      	orrs	r3, r2
    6ff0:	b21a      	sxth	r2, r3
    6ff2:	4b04      	ldr	r3, [pc, #16]	; (7004 <_thumb16_B_T1+0x38>)
    6ff4:	4313      	orrs	r3, r2
    6ff6:	b21b      	sxth	r3, r3
    6ff8:	b29b      	uxth	r3, r3
}
    6ffa:	4618      	mov	r0, r3
    6ffc:	3714      	adds	r7, #20
    6ffe:	46bd      	mov	sp, r7
    7000:	bc80      	pop	{r7}
    7002:	4770      	bx	lr
    7004:	ffffd000 	.word	0xffffd000

00007008 <_thumb16_PUSH_T1>:
    u32 imm3 = (shiftOff5 >> 2) & 0b111;
    u32 imm2 = shiftOff5 & 0b11;
    return (THUMB2_SUB_REG_T2) | (flagS << 20) | (Rn << 16) | (imm3 << 12) | (Rd << 8) | (imm2 << 6) | (srtype << 4) | (Rm);
}

static inline u16 _thumb16_PUSH_T1(s32 reg_mask) {
    7008:	b480      	push	{r7}
    700a:	b085      	sub	sp, #20
    700c:	af00      	add	r7, sp, #0
    700e:	6078      	str	r0, [r7, #4]
    u16 M = (reg_mask >> 14) & 0x1;
    7010:	687b      	ldr	r3, [r7, #4]
    7012:	139b      	asrs	r3, r3, #14
    7014:	b29b      	uxth	r3, r3
    7016:	f003 0301 	and.w	r3, r3, #1
    701a:	81fb      	strh	r3, [r7, #14]
    u16 reg_list = reg_mask & 0xff;
    701c:	687b      	ldr	r3, [r7, #4]
    701e:	b29b      	uxth	r3, r3
    7020:	b2db      	uxtb	r3, r3
    7022:	81bb      	strh	r3, [r7, #12]
    return (THUMB2_PUSH_T1) | (M << 8) | (reg_list);
    7024:	89fb      	ldrh	r3, [r7, #14]
    7026:	021b      	lsls	r3, r3, #8
    7028:	b21a      	sxth	r2, r3
    702a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
    702e:	4313      	orrs	r3, r2
    7030:	b21a      	sxth	r2, r3
    7032:	4b04      	ldr	r3, [pc, #16]	; (7044 <_thumb16_PUSH_T1+0x3c>)
    7034:	4313      	orrs	r3, r2
    7036:	b21b      	sxth	r3, r3
    7038:	b29b      	uxth	r3, r3
}
    703a:	4618      	mov	r0, r3
    703c:	3714      	adds	r7, #20
    703e:	46bd      	mov	sp, r7
    7040:	bc80      	pop	{r7}
    7042:	4770      	bx	lr
    7044:	ffffb400 	.word	0xffffb400

00007048 <_thumb32_LDR_IMM_T4>:
    u32 inst = (THUMB2_LDRB_IMM_T3) | (Rn << 16) | (Rt << 12) | (flag << 8) | (imm8);
    // DEBUG_LOG("_thumb32_LDRB_IMM_T3 inst: 0x%08x %d flag=%d\n", inst, imm8, flag);
    return inst;
}

static inline u32 _thumb32_LDR_IMM_T4(s8 Rt, s8 Rn, s32 offImm8) {
    7048:	b480      	push	{r7}
    704a:	b089      	sub	sp, #36	; 0x24
    704c:	af00      	add	r7, sp, #0
    704e:	4603      	mov	r3, r0
    7050:	603a      	str	r2, [r7, #0]
    7052:	71fb      	strb	r3, [r7, #7]
    7054:	460b      	mov	r3, r1
    7056:	71bb      	strb	r3, [r7, #6]
    u32 imm8 = offImm8 > 0 ? offImm8 : -offImm8;
    7058:	683b      	ldr	r3, [r7, #0]
    705a:	2b00      	cmp	r3, #0
    705c:	bfb8      	it	lt
    705e:	425b      	neglt	r3, r3
    7060:	61fb      	str	r3, [r7, #28]
    u32 P = offImm8 != 0, U = offImm8 >= 0, W = 0;
    7062:	683b      	ldr	r3, [r7, #0]
    7064:	2b00      	cmp	r3, #0
    7066:	bf14      	ite	ne
    7068:	2301      	movne	r3, #1
    706a:	2300      	moveq	r3, #0
    706c:	b2db      	uxtb	r3, r3
    706e:	61bb      	str	r3, [r7, #24]
    7070:	683b      	ldr	r3, [r7, #0]
    7072:	43db      	mvns	r3, r3
    7074:	0fdb      	lsrs	r3, r3, #31
    7076:	b2db      	uxtb	r3, r3
    7078:	617b      	str	r3, [r7, #20]
    707a:	2300      	movs	r3, #0
    707c:	613b      	str	r3, [r7, #16]
    u32 flag = (P << 2) | (U << 1) | W;
    707e:	69bb      	ldr	r3, [r7, #24]
    7080:	009a      	lsls	r2, r3, #2
    7082:	697b      	ldr	r3, [r7, #20]
    7084:	005b      	lsls	r3, r3, #1
    7086:	4313      	orrs	r3, r2
    7088:	693a      	ldr	r2, [r7, #16]
    708a:	4313      	orrs	r3, r2
    708c:	60fb      	str	r3, [r7, #12]
    u32 inst = (THUMB2_LDR_IMM_T4) | (Rn << 16) | (Rt << 12) | (flag << 8) | (imm8);
    708e:	f997 3006 	ldrsb.w	r3, [r7, #6]
    7092:	041b      	lsls	r3, r3, #16
    7094:	461a      	mov	r2, r3
    7096:	f997 3007 	ldrsb.w	r3, [r7, #7]
    709a:	031b      	lsls	r3, r3, #12
    709c:	431a      	orrs	r2, r3
    709e:	68fb      	ldr	r3, [r7, #12]
    70a0:	021b      	lsls	r3, r3, #8
    70a2:	431a      	orrs	r2, r3
    70a4:	69fb      	ldr	r3, [r7, #28]
    70a6:	431a      	orrs	r2, r3
    70a8:	4b04      	ldr	r3, [pc, #16]	; (70bc <_thumb32_LDR_IMM_T4+0x74>)
    70aa:	4313      	orrs	r3, r2
    70ac:	60bb      	str	r3, [r7, #8]
    return inst;
    70ae:	68bb      	ldr	r3, [r7, #8]
}
    70b0:	4618      	mov	r0, r3
    70b2:	3724      	adds	r7, #36	; 0x24
    70b4:	46bd      	mov	sp, r7
    70b6:	bc80      	pop	{r7}
    70b8:	4770      	bx	lr
    70ba:	bf00      	nop
    70bc:	f8500800 	.word	0xf8500800

000070c0 <_thumb32_STRH_IMM_T3>:
    u32 flag = 0b111 | (P << 2) | (U << 1) | (W);
    u32 inst = (THUMB2_STRB_IMM_T3) | (Rn << 16) | (Rt << 12) | (flag << 8) | (imm8);
    return inst;
}

static inline u32 _thumb32_STRH_IMM_T3(s8 Rn, s8 Rt, s16 offImm8) {
    70c0:	b480      	push	{r7}
    70c2:	b089      	sub	sp, #36	; 0x24
    70c4:	af00      	add	r7, sp, #0
    70c6:	4603      	mov	r3, r0
    70c8:	71fb      	strb	r3, [r7, #7]
    70ca:	460b      	mov	r3, r1
    70cc:	71bb      	strb	r3, [r7, #6]
    70ce:	4613      	mov	r3, r2
    70d0:	80bb      	strh	r3, [r7, #4]
    u32 P = offImm8 != 0;
    70d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
    70d6:	2b00      	cmp	r3, #0
    70d8:	bf14      	ite	ne
    70da:	2301      	movne	r3, #1
    70dc:	2300      	moveq	r3, #0
    70de:	b2db      	uxtb	r3, r3
    70e0:	61fb      	str	r3, [r7, #28]
    u32 U = offImm8 > 0, W = 0;
    70e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
    70e6:	2b00      	cmp	r3, #0
    70e8:	bfcc      	ite	gt
    70ea:	2301      	movgt	r3, #1
    70ec:	2300      	movle	r3, #0
    70ee:	b2db      	uxtb	r3, r3
    70f0:	61bb      	str	r3, [r7, #24]
    70f2:	2300      	movs	r3, #0
    70f4:	617b      	str	r3, [r7, #20]
    u32 imm8 = offImm8 > 0 ? offImm8 : -offImm8;
    70f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
    70fa:	2b00      	cmp	r3, #0
    70fc:	bfb8      	it	lt
    70fe:	425b      	neglt	r3, r3
    7100:	613b      	str	r3, [r7, #16]
    u32 flag = 0b111 | (P << 2) | (U << 1) | (W);
    7102:	69fb      	ldr	r3, [r7, #28]
    7104:	009a      	lsls	r2, r3, #2
    7106:	69bb      	ldr	r3, [r7, #24]
    7108:	005b      	lsls	r3, r3, #1
    710a:	431a      	orrs	r2, r3
    710c:	697b      	ldr	r3, [r7, #20]
    710e:	4313      	orrs	r3, r2
    7110:	f043 0307 	orr.w	r3, r3, #7
    7114:	60fb      	str	r3, [r7, #12]
    u32 inst = (THUMB2_STRH_IMM_T3) | (Rn << 16) | (Rt << 12) | (flag << 8) | (imm8);
    7116:	f997 3007 	ldrsb.w	r3, [r7, #7]
    711a:	041b      	lsls	r3, r3, #16
    711c:	461a      	mov	r2, r3
    711e:	f997 3006 	ldrsb.w	r3, [r7, #6]
    7122:	031b      	lsls	r3, r3, #12
    7124:	431a      	orrs	r2, r3
    7126:	68fb      	ldr	r3, [r7, #12]
    7128:	021b      	lsls	r3, r3, #8
    712a:	431a      	orrs	r2, r3
    712c:	693b      	ldr	r3, [r7, #16]
    712e:	431a      	orrs	r2, r3
    7130:	4b04      	ldr	r3, [pc, #16]	; (7144 <_thumb32_STRH_IMM_T3+0x84>)
    7132:	4313      	orrs	r3, r2
    7134:	60bb      	str	r3, [r7, #8]
    return inst;
    7136:	68bb      	ldr	r3, [r7, #8]
}
    7138:	4618      	mov	r0, r3
    713a:	3724      	adds	r7, #36	; 0x24
    713c:	46bd      	mov	sp, r7
    713e:	bc80      	pop	{r7}
    7140:	4770      	bx	lr
    7142:	bf00      	nop
    7144:	f8200800 	.word	0xf8200800

00007148 <_thumb32_ASRW_IMM_T2>:
        (RtDst << 16) | (RnSrc[1] << 12) | (RnSrc[0] << 8) | (imm8);
    // DEBUG_LOG("_thumb32_STRD_IMM_T1: %d %d\n", offImm8, imm8);
    return inst;
}

static inline u32 _thumb32_ASRW_IMM_T2(s8 Rd, s8 Rm, s32 imm5, u8 flagS) {
    7148:	b480      	push	{r7}
    714a:	b085      	sub	sp, #20
    714c:	af00      	add	r7, sp, #0
    714e:	603a      	str	r2, [r7, #0]
    7150:	461a      	mov	r2, r3
    7152:	4603      	mov	r3, r0
    7154:	71fb      	strb	r3, [r7, #7]
    7156:	460b      	mov	r3, r1
    7158:	71bb      	strb	r3, [r7, #6]
    715a:	4613      	mov	r3, r2
    715c:	717b      	strb	r3, [r7, #5]
    u32 imm3 = (imm5 >> 2) & 0b111;
    715e:	683b      	ldr	r3, [r7, #0]
    7160:	109b      	asrs	r3, r3, #2
    7162:	f003 0307 	and.w	r3, r3, #7
    7166:	60fb      	str	r3, [r7, #12]
    u32 imm2 = imm5 & 0b11;
    7168:	683b      	ldr	r3, [r7, #0]
    716a:	f003 0303 	and.w	r3, r3, #3
    716e:	60bb      	str	r3, [r7, #8]
    return (THUMB2_ASRW_IMM) | (flagS << 20) | (imm3 << 12) | (Rd << 8) | (imm2 << 6) | (Rm);
    7170:	797b      	ldrb	r3, [r7, #5]
    7172:	051b      	lsls	r3, r3, #20
    7174:	461a      	mov	r2, r3
    7176:	68fb      	ldr	r3, [r7, #12]
    7178:	031b      	lsls	r3, r3, #12
    717a:	4313      	orrs	r3, r2
    717c:	f997 2007 	ldrsb.w	r2, [r7, #7]
    7180:	0212      	lsls	r2, r2, #8
    7182:	431a      	orrs	r2, r3
    7184:	68bb      	ldr	r3, [r7, #8]
    7186:	019b      	lsls	r3, r3, #6
    7188:	431a      	orrs	r2, r3
    718a:	f997 3006 	ldrsb.w	r3, [r7, #6]
    718e:	431a      	orrs	r2, r3
    7190:	4b03      	ldr	r3, [pc, #12]	; (71a0 <_thumb32_ASRW_IMM_T2+0x58>)
    7192:	4313      	orrs	r3, r2
}
    7194:	4618      	mov	r0, r3
    7196:	3714      	adds	r7, #20
    7198:	46bd      	mov	sp, r7
    719a:	bc80      	pop	{r7}
    719c:	4770      	bx	lr
    719e:	bf00      	nop
    71a0:	ea4f0020 	.word	0xea4f0020

000071a4 <_thumb32_ASRW_REG_T2>:

static inline u32 _thumb32_ASRW_REG_T2(s8 Rd, s8 Rn, s8 Rm, u8 flagS) {
    71a4:	b490      	push	{r4, r7}
    71a6:	b082      	sub	sp, #8
    71a8:	af00      	add	r7, sp, #0
    71aa:	4604      	mov	r4, r0
    71ac:	4608      	mov	r0, r1
    71ae:	4611      	mov	r1, r2
    71b0:	461a      	mov	r2, r3
    71b2:	4623      	mov	r3, r4
    71b4:	71fb      	strb	r3, [r7, #7]
    71b6:	4603      	mov	r3, r0
    71b8:	71bb      	strb	r3, [r7, #6]
    71ba:	460b      	mov	r3, r1
    71bc:	717b      	strb	r3, [r7, #5]
    71be:	4613      	mov	r3, r2
    71c0:	713b      	strb	r3, [r7, #4]
    return (THUMB2_ASRW_REG) | (flagS << 20) | (Rn << 16) | (Rd << 8) | (Rm);
    71c2:	793b      	ldrb	r3, [r7, #4]
    71c4:	051b      	lsls	r3, r3, #20
    71c6:	461a      	mov	r2, r3
    71c8:	f997 3006 	ldrsb.w	r3, [r7, #6]
    71cc:	041b      	lsls	r3, r3, #16
    71ce:	4313      	orrs	r3, r2
    71d0:	f997 2007 	ldrsb.w	r2, [r7, #7]
    71d4:	0212      	lsls	r2, r2, #8
    71d6:	431a      	orrs	r2, r3
    71d8:	f997 3005 	ldrsb.w	r3, [r7, #5]
    71dc:	431a      	orrs	r2, r3
    71de:	4b03      	ldr	r3, [pc, #12]	; (71ec <_thumb32_ASRW_REG_T2+0x48>)
    71e0:	4313      	orrs	r3, r2
}
    71e2:	4618      	mov	r0, r3
    71e4:	3708      	adds	r7, #8
    71e6:	46bd      	mov	sp, r7
    71e8:	bc90      	pop	{r4, r7}
    71ea:	4770      	bx	lr
    71ec:	fa40f000 	.word	0xfa40f000

000071f0 <_thumb32_LSRW_REG_T2>:
static inline u32 _thumb32_LSLW_REG_T2(s8 Rd, s8 Rn, s8 Rm, u8 flagS) {
    return (THUMB2_LSLW_REG_T2) | (flagS << 20) | (Rn << 16) | (Rd << 8) | (Rm);
}

// ARM_MOV_SR
static inline u32 _thumb32_LSRW_REG_T2(s8 Rd, s8 Rn, s8 Rm, u8 flagS) {
    71f0:	b490      	push	{r4, r7}
    71f2:	b082      	sub	sp, #8
    71f4:	af00      	add	r7, sp, #0
    71f6:	4604      	mov	r4, r0
    71f8:	4608      	mov	r0, r1
    71fa:	4611      	mov	r1, r2
    71fc:	461a      	mov	r2, r3
    71fe:	4623      	mov	r3, r4
    7200:	71fb      	strb	r3, [r7, #7]
    7202:	4603      	mov	r3, r0
    7204:	71bb      	strb	r3, [r7, #6]
    7206:	460b      	mov	r3, r1
    7208:	717b      	strb	r3, [r7, #5]
    720a:	4613      	mov	r3, r2
    720c:	713b      	strb	r3, [r7, #4]
    return (THUMB2_LSRW_REG) | (flagS << 20) | (Rn << 16) | (Rd << 8) | (Rm);
    720e:	793b      	ldrb	r3, [r7, #4]
    7210:	051b      	lsls	r3, r3, #20
    7212:	461a      	mov	r2, r3
    7214:	f997 3006 	ldrsb.w	r3, [r7, #6]
    7218:	041b      	lsls	r3, r3, #16
    721a:	4313      	orrs	r3, r2
    721c:	f997 2007 	ldrsb.w	r2, [r7, #7]
    7220:	0212      	lsls	r2, r2, #8
    7222:	431a      	orrs	r2, r3
    7224:	f997 3005 	ldrsb.w	r3, [r7, #5]
    7228:	431a      	orrs	r2, r3
    722a:	4b03      	ldr	r3, [pc, #12]	; (7238 <_thumb32_LSRW_REG_T2+0x48>)
    722c:	4313      	orrs	r3, r2
}
    722e:	4618      	mov	r0, r3
    7230:	3708      	adds	r7, #8
    7232:	46bd      	mov	sp, r7
    7234:	bc90      	pop	{r4, r7}
    7236:	4770      	bx	lr
    7238:	fa20f000 	.word	0xfa20f000

0000723c <_thumb32_LSRW_IMM_T2>:

// ARM_MOV_SI Page A7-282
static inline u32 _thumb32_LSRW_IMM_T2(s8 Rd, s8 Rm, s32 shiftImm5, u8 flagS) {
    723c:	b480      	push	{r7}
    723e:	b087      	sub	sp, #28
    7240:	af00      	add	r7, sp, #0
    7242:	603a      	str	r2, [r7, #0]
    7244:	461a      	mov	r2, r3
    7246:	4603      	mov	r3, r0
    7248:	71fb      	strb	r3, [r7, #7]
    724a:	460b      	mov	r3, r1
    724c:	71bb      	strb	r3, [r7, #6]
    724e:	4613      	mov	r3, r2
    7250:	717b      	strb	r3, [r7, #5]
    if (shiftImm5 < 0 || shiftImm5 > 0b11111) {
    7252:	683b      	ldr	r3, [r7, #0]
    7254:	2b00      	cmp	r3, #0
    7256:	db02      	blt.n	725e <_thumb32_LSRW_IMM_T2+0x22>
    7258:	683b      	ldr	r3, [r7, #0]
    725a:	2b1f      	cmp	r3, #31
    725c:	dd02      	ble.n	7264 <_thumb32_LSRW_IMM_T2+0x28>
        // DEBUG_LOG("Invalide imm value. Line:%d Val:%d\n", __LINE__, shiftImm5);
        return -1;
    725e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7262:	e01c      	b.n	729e <_thumb32_LSRW_IMM_T2+0x62>
    }
    u32 imm3 = (shiftImm5 >> 2) & 0b111;
    7264:	683b      	ldr	r3, [r7, #0]
    7266:	109b      	asrs	r3, r3, #2
    7268:	f003 0307 	and.w	r3, r3, #7
    726c:	617b      	str	r3, [r7, #20]
    u32 imm2 = shiftImm5 & 0b11; 
    726e:	683b      	ldr	r3, [r7, #0]
    7270:	f003 0303 	and.w	r3, r3, #3
    7274:	613b      	str	r3, [r7, #16]
    u32 inst = (THUMB2_LSRW_IMM) | (flagS << 20) | (imm3 << 12) | (Rd << 8) | (imm2 << 6) | (Rm);
    7276:	797b      	ldrb	r3, [r7, #5]
    7278:	051b      	lsls	r3, r3, #20
    727a:	461a      	mov	r2, r3
    727c:	697b      	ldr	r3, [r7, #20]
    727e:	031b      	lsls	r3, r3, #12
    7280:	4313      	orrs	r3, r2
    7282:	f997 2007 	ldrsb.w	r2, [r7, #7]
    7286:	0212      	lsls	r2, r2, #8
    7288:	431a      	orrs	r2, r3
    728a:	693b      	ldr	r3, [r7, #16]
    728c:	019b      	lsls	r3, r3, #6
    728e:	431a      	orrs	r2, r3
    7290:	f997 3006 	ldrsb.w	r3, [r7, #6]
    7294:	431a      	orrs	r2, r3
    7296:	4b04      	ldr	r3, [pc, #16]	; (72a8 <_thumb32_LSRW_IMM_T2+0x6c>)
    7298:	4313      	orrs	r3, r2
    729a:	60fb      	str	r3, [r7, #12]
    return inst;
    729c:	68fb      	ldr	r3, [r7, #12]
}
    729e:	4618      	mov	r0, r3
    72a0:	371c      	adds	r7, #28
    72a2:	46bd      	mov	sp, r7
    72a4:	bc80      	pop	{r7}
    72a6:	4770      	bx	lr
    72a8:	ea4f0010 	.word	0xea4f0010

000072ac <is_ldst_imm>:
            emit_a32_mov_reg(state, src[0], reg[0]);
        }
    }
}

static bool is_ldst_imm(s16 off, const u8 size) {
    72ac:	b480      	push	{r7}
    72ae:	b085      	sub	sp, #20
    72b0:	af00      	add	r7, sp, #0
    72b2:	4603      	mov	r3, r0
    72b4:	460a      	mov	r2, r1
    72b6:	80fb      	strh	r3, [r7, #6]
    72b8:	4613      	mov	r3, r2
    72ba:	717b      	strb	r3, [r7, #5]
	s16 off_max = 0;
    72bc:	2300      	movs	r3, #0
    72be:	81fb      	strh	r3, [r7, #14]
    // 0b11111
    // imm5 or imm12
	switch (size) {
    72c0:	797b      	ldrb	r3, [r7, #5]
    72c2:	2b18      	cmp	r3, #24
    72c4:	d83f      	bhi.n	7346 <is_ldst_imm+0x9a>
    72c6:	a201      	add	r2, pc, #4	; (adr r2, 72cc <is_ldst_imm+0x20>)
    72c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    72cc:	00007331 	.word	0x00007331
    72d0:	00007347 	.word	0x00007347
    72d4:	00007347 	.word	0x00007347
    72d8:	00007347 	.word	0x00007347
    72dc:	00007347 	.word	0x00007347
    72e0:	00007347 	.word	0x00007347
    72e4:	00007347 	.word	0x00007347
    72e8:	00007347 	.word	0x00007347
    72ec:	00007339 	.word	0x00007339
    72f0:	00007347 	.word	0x00007347
    72f4:	00007347 	.word	0x00007347
    72f8:	00007347 	.word	0x00007347
    72fc:	00007347 	.word	0x00007347
    7300:	00007347 	.word	0x00007347
    7304:	00007347 	.word	0x00007347
    7308:	00007347 	.word	0x00007347
    730c:	00007331 	.word	0x00007331
    7310:	00007347 	.word	0x00007347
    7314:	00007347 	.word	0x00007347
    7318:	00007347 	.word	0x00007347
    731c:	00007347 	.word	0x00007347
    7320:	00007347 	.word	0x00007347
    7324:	00007347 	.word	0x00007347
    7328:	00007347 	.word	0x00007347
    732c:	0000733f 	.word	0x0000733f
    // 12
	case EBPF_SIZE_B:
	case EBPF_SIZE_W:
		off_max = 0xfff;
    7330:	f640 73ff 	movw	r3, #4095	; 0xfff
    7334:	81fb      	strh	r3, [r7, #14]
		break;
    7336:	e006      	b.n	7346 <is_ldst_imm+0x9a>
	case EBPF_SIZE_H:
		off_max = 0xff;
    7338:	23ff      	movs	r3, #255	; 0xff
    733a:	81fb      	strh	r3, [r7, #14]
		break;
    733c:	e003      	b.n	7346 <is_ldst_imm+0x9a>
	case EBPF_SIZE_DW:
		/* Need to make sure off+4 does not overflow. */
		off_max = 0xfff - 4;
    733e:	f640 73fb 	movw	r3, #4091	; 0xffb
    7342:	81fb      	strh	r3, [r7, #14]
		break;
    7344:	bf00      	nop
	}
	return -off_max <= off && off <= off_max;
    7346:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    734a:	425a      	negs	r2, r3
    734c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7350:	429a      	cmp	r2, r3
    7352:	dc07      	bgt.n	7364 <is_ldst_imm+0xb8>
    7354:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
    7358:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    735c:	429a      	cmp	r2, r3
    735e:	dc01      	bgt.n	7364 <is_ldst_imm+0xb8>
    7360:	2301      	movs	r3, #1
    7362:	e000      	b.n	7366 <is_ldst_imm+0xba>
    7364:	2300      	movs	r3, #0
    7366:	f003 0301 	and.w	r3, r3, #1
    736a:	b2db      	uxtb	r3, r3
}
    736c:	4618      	mov	r0, r3
    736e:	3714      	adds	r7, #20
    7370:	46bd      	mov	sp, r7
    7372:	bc80      	pop	{r7}
    7374:	4770      	bx	lr
    7376:	bf00      	nop

00007378 <jit_dump_inst>:

/*
Thumb2 decode
*/
void jit_dump_inst(jit_state *state) {
    7378:	b580      	push	{r7, lr}
    737a:	b084      	sub	sp, #16
    737c:	af00      	add	r7, sp, #0
    737e:	6078      	str	r0, [r7, #4]
    DEBUG_LOG("\nDecode:\n");
    7380:	480e      	ldr	r0, [pc, #56]	; (73bc <jit_dump_inst+0x44>)
    7382:	f011 fea0 	bl	190c6 <debug_log>
    for (int i = 0; i < state->idx; i++) {
    7386:	2300      	movs	r3, #0
    7388:	60fb      	str	r3, [r7, #12]
    738a:	e00b      	b.n	73a4 <jit_dump_inst+0x2c>
        DEBUG_LOG("%02x", state->jit_code[i]);
    738c:	687b      	ldr	r3, [r7, #4]
    738e:	689a      	ldr	r2, [r3, #8]
    7390:	68fb      	ldr	r3, [r7, #12]
    7392:	4413      	add	r3, r2
    7394:	781b      	ldrb	r3, [r3, #0]
    7396:	4619      	mov	r1, r3
    7398:	4809      	ldr	r0, [pc, #36]	; (73c0 <jit_dump_inst+0x48>)
    739a:	f011 fe94 	bl	190c6 <debug_log>
    for (int i = 0; i < state->idx; i++) {
    739e:	68fb      	ldr	r3, [r7, #12]
    73a0:	3301      	adds	r3, #1
    73a2:	60fb      	str	r3, [r7, #12]
    73a4:	687b      	ldr	r3, [r7, #4]
    73a6:	691b      	ldr	r3, [r3, #16]
    73a8:	68fa      	ldr	r2, [r7, #12]
    73aa:	429a      	cmp	r2, r3
    73ac:	dbee      	blt.n	738c <jit_dump_inst+0x14>
    }
    DEBUG_LOG("\n");
    73ae:	4805      	ldr	r0, [pc, #20]	; (73c4 <jit_dump_inst+0x4c>)
    73b0:	f011 fe89 	bl	190c6 <debug_log>
}
    73b4:	bf00      	nop
    73b6:	3710      	adds	r7, #16
    73b8:	46bd      	mov	sp, r7
    73ba:	bd80      	pop	{r7, pc}
    73bc:	0002d474 	.word	0x0002d474
    73c0:	0002d480 	.word	0x0002d480
    73c4:	0002d488 	.word	0x0002d488

000073c8 <_emit_ldrh_i>:
        s32 inst = 0xf8900000 | (Rn << 16) | (Rt << 12) | off;
        emit4(state, inst);
    }
}

static void _emit_ldrh_i(jit_state *state, const s8 Rt, const s8 Rn, s16 off) {
    73c8:	b580      	push	{r7, lr}
    73ca:	b086      	sub	sp, #24
    73cc:	af00      	add	r7, sp, #0
    73ce:	6078      	str	r0, [r7, #4]
    73d0:	4608      	mov	r0, r1
    73d2:	4611      	mov	r1, r2
    73d4:	461a      	mov	r2, r3
    73d6:	4603      	mov	r3, r0
    73d8:	70fb      	strb	r3, [r7, #3]
    73da:	460b      	mov	r3, r1
    73dc:	70bb      	strb	r3, [r7, #2]
    73de:	4613      	mov	r3, r2
    73e0:	803b      	strh	r3, [r7, #0]
    s16 imm5 = 0b11111, imm8 = 0xff, imm12 = 0xfff;
    73e2:	231f      	movs	r3, #31
    73e4:	82fb      	strh	r3, [r7, #22]
    73e6:	23ff      	movs	r3, #255	; 0xff
    73e8:	82bb      	strh	r3, [r7, #20]
    73ea:	f640 73ff 	movw	r3, #4095	; 0xfff
    73ee:	827b      	strh	r3, [r7, #18]
    if (off <= imm5 && off >= -imm5) {
    73f0:	f9b7 2000 	ldrsh.w	r2, [r7]
    73f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
    73f8:	429a      	cmp	r2, r3
    73fa:	dc20      	bgt.n	743e <_emit_ldrh_i+0x76>
    73fc:	f9b7 2000 	ldrsh.w	r2, [r7]
    7400:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
    7404:	425b      	negs	r3, r3
    7406:	429a      	cmp	r2, r3
    7408:	db19      	blt.n	743e <_emit_ldrh_i+0x76>
        s16 inst = 0x8800 | ((off & imm5) << 6) | (Rn << 3) | (Rt);
    740a:	883a      	ldrh	r2, [r7, #0]
    740c:	8afb      	ldrh	r3, [r7, #22]
    740e:	4013      	ands	r3, r2
    7410:	b21b      	sxth	r3, r3
    7412:	019b      	lsls	r3, r3, #6
    7414:	b21a      	sxth	r2, r3
    7416:	f997 3002 	ldrsb.w	r3, [r7, #2]
    741a:	00db      	lsls	r3, r3, #3
    741c:	b21b      	sxth	r3, r3
    741e:	4313      	orrs	r3, r2
    7420:	b21a      	sxth	r2, r3
    7422:	f997 3003 	ldrsb.w	r3, [r7, #3]
    7426:	b21b      	sxth	r3, r3
    7428:	4313      	orrs	r3, r2
    742a:	b21a      	sxth	r2, r3
    742c:	4b2a      	ldr	r3, [pc, #168]	; (74d8 <_emit_ldrh_i+0x110>)
    742e:	4313      	orrs	r3, r2
    7430:	823b      	strh	r3, [r7, #16]
        emit2(state, inst);
    7432:	8a3b      	ldrh	r3, [r7, #16]
    7434:	4619      	mov	r1, r3
    7436:	6878      	ldr	r0, [r7, #4]
    7438:	f013 f855 	bl	1a4e6 <emit2>
    if (off <= imm5 && off >= -imm5) {
    743c:	e047      	b.n	74ce <_emit_ldrh_i+0x106>
    } else if (off <= imm8 && off >= -imm8) {
    743e:	f9b7 2000 	ldrsh.w	r2, [r7]
    7442:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
    7446:	429a      	cmp	r2, r3
    7448:	dc1c      	bgt.n	7484 <_emit_ldrh_i+0xbc>
    744a:	f9b7 2000 	ldrsh.w	r2, [r7]
    744e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
    7452:	425b      	negs	r3, r3
    7454:	429a      	cmp	r2, r3
    7456:	db15      	blt.n	7484 <_emit_ldrh_i+0xbc>
        s32 inst = 0xf8300000 | (Rn << 16) | (Rt << 12) | (0b1110 << 8) | (off & imm8);
    7458:	f997 3002 	ldrsb.w	r3, [r7, #2]
    745c:	041b      	lsls	r3, r3, #16
    745e:	461a      	mov	r2, r3
    7460:	f997 3003 	ldrsb.w	r3, [r7, #3]
    7464:	031b      	lsls	r3, r3, #12
    7466:	4313      	orrs	r3, r2
    7468:	8839      	ldrh	r1, [r7, #0]
    746a:	8aba      	ldrh	r2, [r7, #20]
    746c:	400a      	ands	r2, r1
    746e:	b212      	sxth	r2, r2
    7470:	431a      	orrs	r2, r3
    7472:	4b1a      	ldr	r3, [pc, #104]	; (74dc <_emit_ldrh_i+0x114>)
    7474:	4313      	orrs	r3, r2
    7476:	60fb      	str	r3, [r7, #12]
        emit4(state, inst);
    7478:	68fb      	ldr	r3, [r7, #12]
    747a:	4619      	mov	r1, r3
    747c:	6878      	ldr	r0, [r7, #4]
    747e:	f013 f842 	bl	1a506 <emit4>
    } else if (off <= imm8 && off >= -imm8) {
    7482:	e024      	b.n	74ce <_emit_ldrh_i+0x106>
    } else if (off <= imm12 && off >= -imm12) {
    7484:	f9b7 2000 	ldrsh.w	r2, [r7]
    7488:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
    748c:	429a      	cmp	r2, r3
    748e:	dc1e      	bgt.n	74ce <_emit_ldrh_i+0x106>
    7490:	f9b7 2000 	ldrsh.w	r2, [r7]
    7494:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
    7498:	425b      	negs	r3, r3
    749a:	429a      	cmp	r2, r3
    749c:	db17      	blt.n	74ce <_emit_ldrh_i+0x106>
        s32 inst = 0xf8b00000 | (Rn << 16) | (Rt << 12) | (off & imm12);
    749e:	f997 3002 	ldrsb.w	r3, [r7, #2]
    74a2:	041b      	lsls	r3, r3, #16
    74a4:	461a      	mov	r2, r3
    74a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
    74aa:	031b      	lsls	r3, r3, #12
    74ac:	4313      	orrs	r3, r2
    74ae:	8839      	ldrh	r1, [r7, #0]
    74b0:	8a7a      	ldrh	r2, [r7, #18]
    74b2:	400a      	ands	r2, r1
    74b4:	b212      	sxth	r2, r2
    74b6:	4313      	orrs	r3, r2
    74b8:	f043 4378 	orr.w	r3, r3, #4160749568	; 0xf8000000
    74bc:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
    74c0:	60bb      	str	r3, [r7, #8]
        emit4(state, inst);
    74c2:	68bb      	ldr	r3, [r7, #8]
    74c4:	4619      	mov	r1, r3
    74c6:	6878      	ldr	r0, [r7, #4]
    74c8:	f013 f81d 	bl	1a506 <emit4>
    }
}
    74cc:	e7ff      	b.n	74ce <_emit_ldrh_i+0x106>
    74ce:	bf00      	nop
    74d0:	3718      	adds	r7, #24
    74d2:	46bd      	mov	sp, r7
    74d4:	bd80      	pop	{r7, pc}
    74d6:	bf00      	nop
    74d8:	ffff8800 	.word	0xffff8800
    74dc:	f8300e00 	.word	0xf8300e00

000074e0 <_emit_sub_imm>:
        // DEBUG_LOG("_emit_add_imm: %d %d %d\n", dst, src, val);
        emit4(state, _thumb32_ADD_IMM_T4(dst, src, val));
    }
}

static void _emit_sub_imm(jit_state *state, const s8 dst, const s8 src, s32 val) {
    74e0:	b580      	push	{r7, lr}
    74e2:	b084      	sub	sp, #16
    74e4:	af00      	add	r7, sp, #0
    74e6:	60f8      	str	r0, [r7, #12]
    74e8:	607b      	str	r3, [r7, #4]
    74ea:	460b      	mov	r3, r1
    74ec:	72fb      	strb	r3, [r7, #11]
    74ee:	4613      	mov	r3, r2
    74f0:	72bb      	strb	r3, [r7, #10]
    if (val < 0 || val > 4095) {
    74f2:	687b      	ldr	r3, [r7, #4]
    74f4:	2b00      	cmp	r3, #0
    74f6:	db03      	blt.n	7500 <_emit_sub_imm+0x20>
    74f8:	687b      	ldr	r3, [r7, #4]
    74fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    74fe:	db06      	blt.n	750e <_emit_sub_imm+0x2e>
        DEBUG_LOG("Invalide imm value. Line:%d Val:%d\n", __LINE__, val);
    7500:	687a      	ldr	r2, [r7, #4]
    7502:	f44f 71c3 	mov.w	r1, #390	; 0x186
    7506:	4825      	ldr	r0, [pc, #148]	; (759c <_emit_sub_imm+0xbc>)
    7508:	f011 fddd 	bl	190c6 <debug_log>
        return;
    750c:	e042      	b.n	7594 <_emit_sub_imm+0xb4>
    }
    if (dst < 8 && dst >= 0 && src < 8 && src >= 0) {
    750e:	f997 300b 	ldrsb.w	r3, [r7, #11]
    7512:	2b07      	cmp	r3, #7
    7514:	dc31      	bgt.n	757a <_emit_sub_imm+0x9a>
    7516:	f997 300b 	ldrsb.w	r3, [r7, #11]
    751a:	2b00      	cmp	r3, #0
    751c:	db2d      	blt.n	757a <_emit_sub_imm+0x9a>
    751e:	f997 300a 	ldrsb.w	r3, [r7, #10]
    7522:	2b07      	cmp	r3, #7
    7524:	dc29      	bgt.n	757a <_emit_sub_imm+0x9a>
    7526:	f997 300a 	ldrsb.w	r3, [r7, #10]
    752a:	2b00      	cmp	r3, #0
    752c:	db25      	blt.n	757a <_emit_sub_imm+0x9a>
        if (dst == src && val <= 0xff) {
    752e:	f997 200b 	ldrsb.w	r2, [r7, #11]
    7532:	f997 300a 	ldrsb.w	r3, [r7, #10]
    7536:	429a      	cmp	r2, r3
    7538:	d10e      	bne.n	7558 <_emit_sub_imm+0x78>
    753a:	687b      	ldr	r3, [r7, #4]
    753c:	2bff      	cmp	r3, #255	; 0xff
    753e:	dc0b      	bgt.n	7558 <_emit_sub_imm+0x78>
            emit2(state, _thumb16_SUB_IMM_T2(dst, val));
    7540:	f997 300b 	ldrsb.w	r3, [r7, #11]
    7544:	6879      	ldr	r1, [r7, #4]
    7546:	4618      	mov	r0, r3
    7548:	f012 fceb 	bl	19f22 <_thumb16_SUB_IMM_T2>
    754c:	4603      	mov	r3, r0
    754e:	4619      	mov	r1, r3
    7550:	68f8      	ldr	r0, [r7, #12]
    7552:	f012 ffc8 	bl	1a4e6 <emit2>
            return;
    7556:	e01d      	b.n	7594 <_emit_sub_imm+0xb4>
        }
        if (val <= 0x7) {
    7558:	687b      	ldr	r3, [r7, #4]
    755a:	2b07      	cmp	r3, #7
    755c:	dc0d      	bgt.n	757a <_emit_sub_imm+0x9a>
            emit2(state, _thumb16_SUB_IMM_T1(dst, src, val));
    755e:	f997 100a 	ldrsb.w	r1, [r7, #10]
    7562:	f997 300b 	ldrsb.w	r3, [r7, #11]
    7566:	687a      	ldr	r2, [r7, #4]
    7568:	4618      	mov	r0, r3
    756a:	f012 fcb7 	bl	19edc <_thumb16_SUB_IMM_T1>
    756e:	4603      	mov	r3, r0
    7570:	4619      	mov	r1, r3
    7572:	68f8      	ldr	r0, [r7, #12]
    7574:	f012 ffb7 	bl	1a4e6 <emit2>
            return;
    7578:	e00c      	b.n	7594 <_emit_sub_imm+0xb4>
        }
    }

    // subw_imm
    emit4(state, _thumb32_SUBW_IMM_T4(dst, src, val, FLAG_NOS));
    757a:	f997 100a 	ldrsb.w	r1, [r7, #10]
    757e:	f997 000b 	ldrsb.w	r0, [r7, #11]
    7582:	2300      	movs	r3, #0
    7584:	687a      	ldr	r2, [r7, #4]
    7586:	f012 fce6 	bl	19f56 <_thumb32_SUBW_IMM_T4>
    758a:	4603      	mov	r3, r0
    758c:	4619      	mov	r1, r3
    758e:	68f8      	ldr	r0, [r7, #12]
    7590:	f012 ffb9 	bl	1a506 <emit4>
}
    7594:	3710      	adds	r7, #16
    7596:	46bd      	mov	sp, r7
    7598:	bd80      	pop	{r7, pc}
    759a:	bf00      	nop
    759c:	0002d48c 	.word	0x0002d48c

000075a0 <_emit_b_cond>:
static bool inline _use_b4(jit_state *state) {
    return state->inst_num > 20;
    // return true;
}

static void inline _emit_b_cond(jit_state *state, s32 off, u8 cond) {
    75a0:	b580      	push	{r7, lr}
    75a2:	b084      	sub	sp, #16
    75a4:	af00      	add	r7, sp, #0
    75a6:	60f8      	str	r0, [r7, #12]
    75a8:	60b9      	str	r1, [r7, #8]
    75aa:	4613      	mov	r3, r2
    75ac:	71fb      	strb	r3, [r7, #7]
    // DEBUG_LOG("_emit_b_cond off=%d  inst:%x\n", off, _thumb16_B_T1(off, cond));
    // bool useB4 = state->inst_num < 20;
    // useB4 = false;
    if (!_use_b4(state) && off >= -256 && off <= 254) {
    75ae:	68f8      	ldr	r0, [r7, #12]
    75b0:	f013 fb65 	bl	1ac7e <_use_b4>
    75b4:	4603      	mov	r3, r0
    75b6:	f083 0301 	eor.w	r3, r3, #1
    75ba:	b2db      	uxtb	r3, r3
    75bc:	2b00      	cmp	r3, #0
    75be:	d012      	beq.n	75e6 <_emit_b_cond+0x46>
    75c0:	68bb      	ldr	r3, [r7, #8]
    75c2:	f513 7f80 	cmn.w	r3, #256	; 0x100
    75c6:	db0e      	blt.n	75e6 <_emit_b_cond+0x46>
    75c8:	68bb      	ldr	r3, [r7, #8]
    75ca:	2bfe      	cmp	r3, #254	; 0xfe
    75cc:	dc0b      	bgt.n	75e6 <_emit_b_cond+0x46>
        emit2(state, _thumb16_B_T1(off, cond));
    75ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
    75d2:	4619      	mov	r1, r3
    75d4:	68b8      	ldr	r0, [r7, #8]
    75d6:	f7ff fcf9 	bl	6fcc <_thumb16_B_T1>
    75da:	4603      	mov	r3, r0
    75dc:	4619      	mov	r1, r3
    75de:	68f8      	ldr	r0, [r7, #12]
    75e0:	f012 ff81 	bl	1a4e6 <emit2>
        // DEBUG_LOG("want to jump: %d\n", off);
        emit4(state, _thumb32_BW_T3(off, cond));
    }
    // emit4(state, _thumb32_BW_T3(off, cond));
    // emit2(state, _thumb16_B_T2(off));
}
    75e4:	e012      	b.n	760c <_emit_b_cond+0x6c>
    } else if (off > -1048576 && off < 1048574) {
    75e6:	68bb      	ldr	r3, [r7, #8]
    75e8:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
    75ec:	dd0e      	ble.n	760c <_emit_b_cond+0x6c>
    75ee:	68bb      	ldr	r3, [r7, #8]
    75f0:	4a08      	ldr	r2, [pc, #32]	; (7614 <_emit_b_cond+0x74>)
    75f2:	4293      	cmp	r3, r2
    75f4:	dc0a      	bgt.n	760c <_emit_b_cond+0x6c>
        emit4(state, _thumb32_BW_T3(off, cond));
    75f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
    75fa:	4619      	mov	r1, r3
    75fc:	68b8      	ldr	r0, [r7, #8]
    75fe:	f012 fa23 	bl	19a48 <_thumb32_BW_T3>
    7602:	4603      	mov	r3, r0
    7604:	4619      	mov	r1, r3
    7606:	68f8      	ldr	r0, [r7, #12]
    7608:	f012 ff7d 	bl	1a506 <emit4>
}
    760c:	bf00      	nop
    760e:	3710      	adds	r7, #16
    7610:	46bd      	mov	sp, r7
    7612:	bd80      	pop	{r7, pc}
    7614:	000ffffd 	.word	0x000ffffd

00007618 <_emit_b>:

static void inline _emit_b(jit_state *state, s32 off) {
    7618:	b580      	push	{r7, lr}
    761a:	b082      	sub	sp, #8
    761c:	af00      	add	r7, sp, #0
    761e:	6078      	str	r0, [r7, #4]
    7620:	6039      	str	r1, [r7, #0]
    // bool useB4 = state->inst_num < 20;
    // useB4 = false;
    if (off > -2048 && off < 2046) {
    7622:	683b      	ldr	r3, [r7, #0]
    7624:	f513 6f00 	cmn.w	r3, #2048	; 0x800
    7628:	dd0d      	ble.n	7646 <_emit_b+0x2e>
    762a:	683b      	ldr	r3, [r7, #0]
    762c:	f240 72fd 	movw	r2, #2045	; 0x7fd
    7630:	4293      	cmp	r3, r2
    7632:	dc08      	bgt.n	7646 <_emit_b+0x2e>
        emit2(state, _thumb16_B_T2(off));
    7634:	6838      	ldr	r0, [r7, #0]
    7636:	f012 f9e0 	bl	199fa <_thumb16_B_T2>
    763a:	4603      	mov	r3, r0
    763c:	4619      	mov	r1, r3
    763e:	6878      	ldr	r0, [r7, #4]
    7640:	f012 ff51 	bl	1a4e6 <emit2>
    } else if (off > -16777216 && off < 16777214) {
        emit4(state, _thumb32_BW_T4(off));
    }
}
    7644:	e00f      	b.n	7666 <_emit_b+0x4e>
    } else if (off > -16777216 && off < 16777214) {
    7646:	683b      	ldr	r3, [r7, #0]
    7648:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    764c:	dd0b      	ble.n	7666 <_emit_b+0x4e>
    764e:	683b      	ldr	r3, [r7, #0]
    7650:	4a07      	ldr	r2, [pc, #28]	; (7670 <_emit_b+0x58>)
    7652:	4293      	cmp	r3, r2
    7654:	dc07      	bgt.n	7666 <_emit_b+0x4e>
        emit4(state, _thumb32_BW_T4(off));
    7656:	6838      	ldr	r0, [r7, #0]
    7658:	f012 fa2e 	bl	19ab8 <_thumb32_BW_T4>
    765c:	4603      	mov	r3, r0
    765e:	4619      	mov	r1, r3
    7660:	6878      	ldr	r0, [r7, #4]
    7662:	f012 ff50 	bl	1a506 <emit4>
}
    7666:	bf00      	nop
    7668:	3708      	adds	r7, #8
    766a:	46bd      	mov	sp, r7
    766c:	bd80      	pop	{r7, pc}
    766e:	bf00      	nop
    7670:	00fffffd 	.word	0x00fffffd

00007674 <emit_alu32_reg>:

static void emit_alu32_reg(jit_state *state, const s8 dst, const s8 src, 
            const bool is64, const bool hi, const u8 op) {
    7674:	b580      	push	{r7, lr}
    7676:	b086      	sub	sp, #24
    7678:	af02      	add	r7, sp, #8
    767a:	6078      	str	r0, [r7, #4]
    767c:	4608      	mov	r0, r1
    767e:	4611      	mov	r1, r2
    7680:	461a      	mov	r2, r3
    7682:	4603      	mov	r3, r0
    7684:	70fb      	strb	r3, [r7, #3]
    7686:	460b      	mov	r3, r1
    7688:	70bb      	strb	r3, [r7, #2]
    768a:	4613      	mov	r3, r2
    768c:	707b      	strb	r3, [r7, #1]
    const s8 *tmp = bpf2a32[TMP_REG_1];
    768e:	4bb7      	ldr	r3, [pc, #732]	; (796c <emit_alu32_reg+0x2f8>)
    7690:	60fb      	str	r3, [r7, #12]
    s8 rn, rd;
    rn = arm_bpf_get_reg32(state, src, tmp[1]);
    7692:	68fb      	ldr	r3, [r7, #12]
    7694:	3301      	adds	r3, #1
    7696:	f993 2000 	ldrsb.w	r2, [r3]
    769a:	f997 3002 	ldrsb.w	r3, [r7, #2]
    769e:	4619      	mov	r1, r3
    76a0:	6878      	ldr	r0, [r7, #4]
    76a2:	f012 ff55 	bl	1a550 <arm_bpf_get_reg32>
    76a6:	4603      	mov	r3, r0
    76a8:	72fb      	strb	r3, [r7, #11]
    rd = arm_bpf_get_reg32(state, dst, tmp[0]);
    76aa:	68fb      	ldr	r3, [r7, #12]
    76ac:	f993 2000 	ldrsb.w	r2, [r3]
    76b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
    76b4:	4619      	mov	r1, r3
    76b6:	6878      	ldr	r0, [r7, #4]
    76b8:	f012 ff4a 	bl	1a550 <arm_bpf_get_reg32>
    76bc:	4603      	mov	r3, r0
    76be:	72bb      	strb	r3, [r7, #10]
    // emit_alu_r(rd, rn, is64, hi, op, ctx);
    // my_printf("emit_alu32_reg: %d src: %d dst: %d\n", op, rn, rd);
    switch (op)
    76c0:	7f3b      	ldrb	r3, [r7, #28]
    76c2:	2b50      	cmp	r3, #80	; 0x50
    76c4:	d03d      	beq.n	7742 <emit_alu32_reg+0xce>
    76c6:	2b50      	cmp	r3, #80	; 0x50
    76c8:	dc0b      	bgt.n	76e2 <emit_alu32_reg+0x6e>
    76ca:	2b10      	cmp	r3, #16
    76cc:	d024      	beq.n	7718 <emit_alu32_reg+0xa4>
    76ce:	2b10      	cmp	r3, #16
    76d0:	dc02      	bgt.n	76d8 <emit_alu32_reg+0x64>
    76d2:	2b00      	cmp	r3, #0
    76d4:	d014      	beq.n	7700 <emit_alu32_reg+0x8c>
    76d6:	e13c      	b.n	7952 <emit_alu32_reg+0x2de>
    76d8:	2b20      	cmp	r3, #32
    76da:	d072      	beq.n	77c2 <emit_alu32_reg+0x14e>
    76dc:	2b40      	cmp	r3, #64	; 0x40
    76de:	d027      	beq.n	7730 <emit_alu32_reg+0xbc>
    76e0:	e137      	b.n	7952 <emit_alu32_reg+0x2de>
    76e2:	2b70      	cmp	r3, #112	; 0x70
    76e4:	f000 80d1 	beq.w	788a <emit_alu32_reg+0x216>
    76e8:	2b70      	cmp	r3, #112	; 0x70
    76ea:	dc03      	bgt.n	76f4 <emit_alu32_reg+0x80>
    76ec:	2b60      	cmp	r3, #96	; 0x60
    76ee:	f000 809b 	beq.w	7828 <emit_alu32_reg+0x1b4>
    76f2:	e12e      	b.n	7952 <emit_alu32_reg+0x2de>
    76f4:	2ba0      	cmp	r3, #160	; 0xa0
    76f6:	d02d      	beq.n	7754 <emit_alu32_reg+0xe0>
    76f8:	2bc0      	cmp	r3, #192	; 0xc0
    76fa:	f000 80f9 	beq.w	78f0 <emit_alu32_reg+0x27c>
    76fe:	e128      	b.n	7952 <emit_alu32_reg+0x2de>
    {
    case EBPF_ALU_ADD:
        _emit_add_reg(state, rd, rn, is64, hi);
    7700:	7878      	ldrb	r0, [r7, #1]
    7702:	f997 200b 	ldrsb.w	r2, [r7, #11]
    7706:	f997 100a 	ldrsb.w	r1, [r7, #10]
    770a:	7e3b      	ldrb	r3, [r7, #24]
    770c:	9300      	str	r3, [sp, #0]
    770e:	4603      	mov	r3, r0
    7710:	6878      	ldr	r0, [r7, #4]
    7712:	f013 f914 	bl	1a93e <_emit_add_reg>
        break;
    7716:	e11c      	b.n	7952 <emit_alu32_reg+0x2de>
    case EBPF_ALU_SUB:
        // DEBUG_LOG("EBPF_ALU_SUB: %d %d %d\n", rd, rn, is64);
        _emit_sub_reg(state, rd, rn, is64, hi);
    7718:	7878      	ldrb	r0, [r7, #1]
    771a:	f997 200b 	ldrsb.w	r2, [r7, #11]
    771e:	f997 100a 	ldrsb.w	r1, [r7, #10]
    7722:	7e3b      	ldrb	r3, [r7, #24]
    7724:	9300      	str	r3, [sp, #0]
    7726:	4603      	mov	r3, r0
    7728:	6878      	ldr	r0, [r7, #4]
    772a:	f013 f992 	bl	1aa52 <_emit_sub_reg>
        break;
    772e:	e110      	b.n	7952 <emit_alu32_reg+0x2de>
    case EBPF_ALU_OR: // ORR
        _emit_orr_reg(state, rd, rn);
    7730:	f997 200b 	ldrsb.w	r2, [r7, #11]
    7734:	f997 300a 	ldrsb.w	r3, [r7, #10]
    7738:	4619      	mov	r1, r3
    773a:	6878      	ldr	r0, [r7, #4]
    773c:	f013 fa08 	bl	1ab50 <_emit_orr_reg>
        break;
    7740:	e107      	b.n	7952 <emit_alu32_reg+0x2de>
    case EBPF_ALU_AND: // AND
        // DEBUG_LOG("EBPF_ALU_AND: %d %d idx:%d\n", rn, rd, state->idx);
        // emit2(state, (0x4000) | (rn << 3) | (rd));
        _emit_and_reg(state, rd, rn);
    7742:	f997 200b 	ldrsb.w	r2, [r7, #11]
    7746:	f997 300a 	ldrsb.w	r3, [r7, #10]
    774a:	4619      	mov	r1, r3
    774c:	6878      	ldr	r0, [r7, #4]
    774e:	f013 fa33 	bl	1abb8 <_emit_and_reg>
        break;
    7752:	e0fe      	b.n	7952 <emit_alu32_reg+0x2de>
    case EBPF_ALU_XOR: // EOR
        if (rn > 0 && rn < 8 && rd > 0 && rd < 8) {
    7754:	f997 300b 	ldrsb.w	r3, [r7, #11]
    7758:	2b00      	cmp	r3, #0
    775a:	dd1f      	ble.n	779c <emit_alu32_reg+0x128>
    775c:	f997 300b 	ldrsb.w	r3, [r7, #11]
    7760:	2b07      	cmp	r3, #7
    7762:	dc1b      	bgt.n	779c <emit_alu32_reg+0x128>
    7764:	f997 300a 	ldrsb.w	r3, [r7, #10]
    7768:	2b00      	cmp	r3, #0
    776a:	dd17      	ble.n	779c <emit_alu32_reg+0x128>
    776c:	f997 300a 	ldrsb.w	r3, [r7, #10]
    7770:	2b07      	cmp	r3, #7
    7772:	dc13      	bgt.n	779c <emit_alu32_reg+0x128>
            emit2(state, (0x4040) | (rn << 3) | (rd));
    7774:	f997 300b 	ldrsb.w	r3, [r7, #11]
    7778:	00db      	lsls	r3, r3, #3
    777a:	b21a      	sxth	r2, r3
    777c:	f997 300a 	ldrsb.w	r3, [r7, #10]
    7780:	b21b      	sxth	r3, r3
    7782:	4313      	orrs	r3, r2
    7784:	b21b      	sxth	r3, r3
    7786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    778a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    778e:	b21b      	sxth	r3, r3
    7790:	b29b      	uxth	r3, r3
    7792:	4619      	mov	r1, r3
    7794:	6878      	ldr	r0, [r7, #4]
    7796:	f012 fea6 	bl	1a4e6 <emit2>
        } else {
            emit4(state, _thumb32_EOR_REG_T2(rd, rn, rd, 0, SRTYPE_ROR, FLAG_NOS));
        }
        break;
    779a:	e0da      	b.n	7952 <emit_alu32_reg+0x2de>
            emit4(state, _thumb32_EOR_REG_T2(rd, rn, rd, 0, SRTYPE_ROR, FLAG_NOS));
    779c:	f997 200a 	ldrsb.w	r2, [r7, #10]
    77a0:	f997 100b 	ldrsb.w	r1, [r7, #11]
    77a4:	f997 000a 	ldrsb.w	r0, [r7, #10]
    77a8:	2300      	movs	r3, #0
    77aa:	9301      	str	r3, [sp, #4]
    77ac:	2303      	movs	r3, #3
    77ae:	9300      	str	r3, [sp, #0]
    77b0:	2300      	movs	r3, #0
    77b2:	f012 fe04 	bl	1a3be <_thumb32_EOR_REG_T2>
    77b6:	4603      	mov	r3, r0
    77b8:	4619      	mov	r1, r3
    77ba:	6878      	ldr	r0, [r7, #4]
    77bc:	f012 fea3 	bl	1a506 <emit4>
        break;
    77c0:	e0c7      	b.n	7952 <emit_alu32_reg+0x2de>
    case EBPF_ALU_MUL: // MUL
        if (rn > 0 && rn < 8 && rd > 0 && rd < 8) {
    77c2:	f997 300b 	ldrsb.w	r3, [r7, #11]
    77c6:	2b00      	cmp	r3, #0
    77c8:	dd1f      	ble.n	780a <emit_alu32_reg+0x196>
    77ca:	f997 300b 	ldrsb.w	r3, [r7, #11]
    77ce:	2b07      	cmp	r3, #7
    77d0:	dc1b      	bgt.n	780a <emit_alu32_reg+0x196>
    77d2:	f997 300a 	ldrsb.w	r3, [r7, #10]
    77d6:	2b00      	cmp	r3, #0
    77d8:	dd17      	ble.n	780a <emit_alu32_reg+0x196>
    77da:	f997 300a 	ldrsb.w	r3, [r7, #10]
    77de:	2b07      	cmp	r3, #7
    77e0:	dc13      	bgt.n	780a <emit_alu32_reg+0x196>
            emit2(state, (0x4340) | (rn << 3) | (rd));
    77e2:	f997 300b 	ldrsb.w	r3, [r7, #11]
    77e6:	00db      	lsls	r3, r3, #3
    77e8:	b21a      	sxth	r2, r3
    77ea:	f997 300a 	ldrsb.w	r3, [r7, #10]
    77ee:	b21b      	sxth	r3, r3
    77f0:	4313      	orrs	r3, r2
    77f2:	b21b      	sxth	r3, r3
    77f4:	f443 4386 	orr.w	r3, r3, #17152	; 0x4300
    77f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    77fc:	b21b      	sxth	r3, r3
    77fe:	b29b      	uxth	r3, r3
    7800:	4619      	mov	r1, r3
    7802:	6878      	ldr	r0, [r7, #4]
    7804:	f012 fe6f 	bl	1a4e6 <emit2>
        } else {
            emit4(state, _thumb32_MUL_REG_T2(rd, rn, rd));
        }
        break;
    7808:	e0a3      	b.n	7952 <emit_alu32_reg+0x2de>
            emit4(state, _thumb32_MUL_REG_T2(rd, rn, rd));
    780a:	f997 200a 	ldrsb.w	r2, [r7, #10]
    780e:	f997 100b 	ldrsb.w	r1, [r7, #11]
    7812:	f997 300a 	ldrsb.w	r3, [r7, #10]
    7816:	4618      	mov	r0, r3
    7818:	f012 fa0d 	bl	19c36 <_thumb32_MUL_REG_T2>
    781c:	4603      	mov	r3, r0
    781e:	4619      	mov	r1, r3
    7820:	6878      	ldr	r0, [r7, #4]
    7822:	f012 fe70 	bl	1a506 <emit4>
        break;
    7826:	e094      	b.n	7952 <emit_alu32_reg+0x2de>
    case EBPF_ALU_LSH: // LSL
        if (rn > 0 && rn < 8 && rd > 0 && rd < 8) {
    7828:	f997 300b 	ldrsb.w	r3, [r7, #11]
    782c:	2b00      	cmp	r3, #0
    782e:	dd1d      	ble.n	786c <emit_alu32_reg+0x1f8>
    7830:	f997 300b 	ldrsb.w	r3, [r7, #11]
    7834:	2b07      	cmp	r3, #7
    7836:	dc19      	bgt.n	786c <emit_alu32_reg+0x1f8>
    7838:	f997 300a 	ldrsb.w	r3, [r7, #10]
    783c:	2b00      	cmp	r3, #0
    783e:	dd15      	ble.n	786c <emit_alu32_reg+0x1f8>
    7840:	f997 300a 	ldrsb.w	r3, [r7, #10]
    7844:	2b07      	cmp	r3, #7
    7846:	dc11      	bgt.n	786c <emit_alu32_reg+0x1f8>
            emit2(state, (0x4080) | (rn << 3) | (rd));
    7848:	f997 300b 	ldrsb.w	r3, [r7, #11]
    784c:	00db      	lsls	r3, r3, #3
    784e:	b21a      	sxth	r2, r3
    7850:	f997 300a 	ldrsb.w	r3, [r7, #10]
    7854:	b21b      	sxth	r3, r3
    7856:	4313      	orrs	r3, r2
    7858:	b21b      	sxth	r3, r3
    785a:	f443 4381 	orr.w	r3, r3, #16512	; 0x4080
    785e:	b21b      	sxth	r3, r3
    7860:	b29b      	uxth	r3, r3
    7862:	4619      	mov	r1, r3
    7864:	6878      	ldr	r0, [r7, #4]
    7866:	f012 fe3e 	bl	1a4e6 <emit2>
        } else {
            emit4(state, _thumb32_LSLW_REG_T2(rd, rd, rn, FLAG_NOS));
        }
        break;
    786a:	e072      	b.n	7952 <emit_alu32_reg+0x2de>
            emit4(state, _thumb32_LSLW_REG_T2(rd, rd, rn, FLAG_NOS));
    786c:	f997 200b 	ldrsb.w	r2, [r7, #11]
    7870:	f997 100a 	ldrsb.w	r1, [r7, #10]
    7874:	f997 000a 	ldrsb.w	r0, [r7, #10]
    7878:	2300      	movs	r3, #0
    787a:	f012 fd58 	bl	1a32e <_thumb32_LSLW_REG_T2>
    787e:	4603      	mov	r3, r0
    7880:	4619      	mov	r1, r3
    7882:	6878      	ldr	r0, [r7, #4]
    7884:	f012 fe3f 	bl	1a506 <emit4>
        break;
    7888:	e063      	b.n	7952 <emit_alu32_reg+0x2de>
    case EBPF_ALU_RSH: // LSR
        if (rn > 0 && rn < 8 && rd > 0 && rd < 8) {
    788a:	f997 300b 	ldrsb.w	r3, [r7, #11]
    788e:	2b00      	cmp	r3, #0
    7890:	dd1f      	ble.n	78d2 <emit_alu32_reg+0x25e>
    7892:	f997 300b 	ldrsb.w	r3, [r7, #11]
    7896:	2b07      	cmp	r3, #7
    7898:	dc1b      	bgt.n	78d2 <emit_alu32_reg+0x25e>
    789a:	f997 300a 	ldrsb.w	r3, [r7, #10]
    789e:	2b00      	cmp	r3, #0
    78a0:	dd17      	ble.n	78d2 <emit_alu32_reg+0x25e>
    78a2:	f997 300a 	ldrsb.w	r3, [r7, #10]
    78a6:	2b07      	cmp	r3, #7
    78a8:	dc13      	bgt.n	78d2 <emit_alu32_reg+0x25e>
            emit2(state, (0x40c0) | (rn << 3) | (rd));
    78aa:	f997 300b 	ldrsb.w	r3, [r7, #11]
    78ae:	00db      	lsls	r3, r3, #3
    78b0:	b21a      	sxth	r2, r3
    78b2:	f997 300a 	ldrsb.w	r3, [r7, #10]
    78b6:	b21b      	sxth	r3, r3
    78b8:	4313      	orrs	r3, r2
    78ba:	b21b      	sxth	r3, r3
    78bc:	f443 4381 	orr.w	r3, r3, #16512	; 0x4080
    78c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    78c4:	b21b      	sxth	r3, r3
    78c6:	b29b      	uxth	r3, r3
    78c8:	4619      	mov	r1, r3
    78ca:	6878      	ldr	r0, [r7, #4]
    78cc:	f012 fe0b 	bl	1a4e6 <emit2>
        } else {
            emit4(state, _thumb32_LSRW_REG_T2(rd, rd, rn, FLAG_NOS));
        }
        break;
    78d0:	e03f      	b.n	7952 <emit_alu32_reg+0x2de>
            emit4(state, _thumb32_LSRW_REG_T2(rd, rd, rn, FLAG_NOS));
    78d2:	f997 200b 	ldrsb.w	r2, [r7, #11]
    78d6:	f997 100a 	ldrsb.w	r1, [r7, #10]
    78da:	f997 000a 	ldrsb.w	r0, [r7, #10]
    78de:	2300      	movs	r3, #0
    78e0:	f7ff fc86 	bl	71f0 <_thumb32_LSRW_REG_T2>
    78e4:	4603      	mov	r3, r0
    78e6:	4619      	mov	r1, r3
    78e8:	6878      	ldr	r0, [r7, #4]
    78ea:	f012 fe0c 	bl	1a506 <emit4>
        break;
    78ee:	e030      	b.n	7952 <emit_alu32_reg+0x2de>
    case EBPF_ALU_ARSH:
        if (rn > 0 && rn < 8 && rd > 0 && rd < 8) {
    78f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
    78f4:	2b00      	cmp	r3, #0
    78f6:	dd1d      	ble.n	7934 <emit_alu32_reg+0x2c0>
    78f8:	f997 300b 	ldrsb.w	r3, [r7, #11]
    78fc:	2b07      	cmp	r3, #7
    78fe:	dc19      	bgt.n	7934 <emit_alu32_reg+0x2c0>
    7900:	f997 300a 	ldrsb.w	r3, [r7, #10]
    7904:	2b00      	cmp	r3, #0
    7906:	dd15      	ble.n	7934 <emit_alu32_reg+0x2c0>
    7908:	f997 300a 	ldrsb.w	r3, [r7, #10]
    790c:	2b07      	cmp	r3, #7
    790e:	dc11      	bgt.n	7934 <emit_alu32_reg+0x2c0>
            emit2(state, (0x4100) | (rn << 3) | (rd));
    7910:	f997 300b 	ldrsb.w	r3, [r7, #11]
    7914:	00db      	lsls	r3, r3, #3
    7916:	b21a      	sxth	r2, r3
    7918:	f997 300a 	ldrsb.w	r3, [r7, #10]
    791c:	b21b      	sxth	r3, r3
    791e:	4313      	orrs	r3, r2
    7920:	b21b      	sxth	r3, r3
    7922:	f443 4382 	orr.w	r3, r3, #16640	; 0x4100
    7926:	b21b      	sxth	r3, r3
    7928:	b29b      	uxth	r3, r3
    792a:	4619      	mov	r1, r3
    792c:	6878      	ldr	r0, [r7, #4]
    792e:	f012 fdda 	bl	1a4e6 <emit2>
        } else {
            emit4(state, _thumb32_ASRW_REG_T2(rd, rd, rn, FLAG_NOS));
        }
        break;
    7932:	e00d      	b.n	7950 <emit_alu32_reg+0x2dc>
            emit4(state, _thumb32_ASRW_REG_T2(rd, rd, rn, FLAG_NOS));
    7934:	f997 200b 	ldrsb.w	r2, [r7, #11]
    7938:	f997 100a 	ldrsb.w	r1, [r7, #10]
    793c:	f997 000a 	ldrsb.w	r0, [r7, #10]
    7940:	2300      	movs	r3, #0
    7942:	f7ff fc2f 	bl	71a4 <_thumb32_ASRW_REG_T2>
    7946:	4603      	mov	r3, r0
    7948:	4619      	mov	r1, r3
    794a:	6878      	ldr	r0, [r7, #4]
    794c:	f012 fddb 	bl	1a506 <emit4>
        break;
    7950:	bf00      	nop
    }
	arm_bpf_put_reg32(state, dst, rd);
    7952:	f997 200a 	ldrsb.w	r2, [r7, #10]
    7956:	f997 3003 	ldrsb.w	r3, [r7, #3]
    795a:	4619      	mov	r1, r3
    795c:	6878      	ldr	r0, [r7, #4]
    795e:	f012 fe1a 	bl	1a596 <arm_bpf_put_reg32>
}
    7962:	bf00      	nop
    7964:	3710      	adds	r7, #16
    7966:	46bd      	mov	sp, r7
    7968:	bd80      	pop	{r7, pc}
    796a:	bf00      	nop
    796c:	0002e9ec 	.word	0x0002e9ec

00007970 <emit_alu64_reg>:

/* ALU operation (64 bit) */
void emit_alu64_reg(jit_state *state, bool is64, const s8 dst[], const s8 src[], const u8 op) {
    7970:	b580      	push	{r7, lr}
    7972:	b08c      	sub	sp, #48	; 0x30
    7974:	af02      	add	r7, sp, #8
    7976:	60f8      	str	r0, [r7, #12]
    7978:	607a      	str	r2, [r7, #4]
    797a:	603b      	str	r3, [r7, #0]
    797c:	460b      	mov	r3, r1
    797e:	72fb      	strb	r3, [r7, #11]
    const s8 *tmp = bpf2a32[TMP_REG_1];
    7980:	4b2c      	ldr	r3, [pc, #176]	; (7a34 <emit_alu64_reg+0xc4>)
    7982:	627b      	str	r3, [r7, #36]	; 0x24
	const s8 *tmp2 = bpf2a32[TMP_REG_2];
    7984:	4b2c      	ldr	r3, [pc, #176]	; (7a38 <emit_alu64_reg+0xc8>)
    7986:	623b      	str	r3, [r7, #32]
	const s8 *rd = arm_bpf_get_reg64(state, dst, tmp);
    7988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    798a:	6879      	ldr	r1, [r7, #4]
    798c:	68f8      	ldr	r0, [r7, #12]
    798e:	f012 fe30 	bl	1a5f2 <arm_bpf_get_reg64>
    7992:	61f8      	str	r0, [r7, #28]
    // DEBUG_LOG("emit_alu64_reg: %d 0x%x\n", is64, op);
    if (is64) {
    7994:	7afb      	ldrb	r3, [r7, #11]
    7996:	2b00      	cmp	r3, #0
    7998:	d026      	beq.n	79e8 <emit_alu64_reg+0x78>
        // emit_alu32_reg();
        const s8 *rs = arm_bpf_get_reg64(state, src, tmp2);
    799a:	6a3a      	ldr	r2, [r7, #32]
    799c:	6839      	ldr	r1, [r7, #0]
    799e:	68f8      	ldr	r0, [r7, #12]
    79a0:	f012 fe27 	bl	1a5f2 <arm_bpf_get_reg64>
    79a4:	61b8      	str	r0, [r7, #24]
        /* ALU operation */
        emit_alu32_reg(state, rd[1], rs[1], true, false, op);
    79a6:	69fb      	ldr	r3, [r7, #28]
    79a8:	3301      	adds	r3, #1
    79aa:	f993 1000 	ldrsb.w	r1, [r3]
    79ae:	69bb      	ldr	r3, [r7, #24]
    79b0:	3301      	adds	r3, #1
    79b2:	f993 2000 	ldrsb.w	r2, [r3]
    79b6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    79ba:	9301      	str	r3, [sp, #4]
    79bc:	2300      	movs	r3, #0
    79be:	9300      	str	r3, [sp, #0]
    79c0:	2301      	movs	r3, #1
    79c2:	68f8      	ldr	r0, [r7, #12]
    79c4:	f7ff fe56 	bl	7674 <emit_alu32_reg>
        emit_alu32_reg(state, rd[0], rs[0], true, true, op);
    79c8:	69fb      	ldr	r3, [r7, #28]
    79ca:	f993 1000 	ldrsb.w	r1, [r3]
    79ce:	69bb      	ldr	r3, [r7, #24]
    79d0:	f993 2000 	ldrsb.w	r2, [r3]
    79d4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    79d8:	9301      	str	r3, [sp, #4]
    79da:	2301      	movs	r3, #1
    79dc:	9300      	str	r3, [sp, #0]
    79de:	2301      	movs	r3, #1
    79e0:	68f8      	ldr	r0, [r7, #12]
    79e2:	f7ff fe47 	bl	7674 <emit_alu32_reg>
    79e6:	e01c      	b.n	7a22 <emit_alu64_reg+0xb2>
    } else {
        s8 rs = arm_bpf_get_reg32(state, src_lo, tmp2[1]);
    79e8:	683b      	ldr	r3, [r7, #0]
    79ea:	3301      	adds	r3, #1
    79ec:	f993 1000 	ldrsb.w	r1, [r3]
    79f0:	6a3b      	ldr	r3, [r7, #32]
    79f2:	3301      	adds	r3, #1
    79f4:	f993 3000 	ldrsb.w	r3, [r3]
    79f8:	461a      	mov	r2, r3
    79fa:	68f8      	ldr	r0, [r7, #12]
    79fc:	f012 fda8 	bl	1a550 <arm_bpf_get_reg32>
    7a00:	4603      	mov	r3, r0
    7a02:	75fb      	strb	r3, [r7, #23]
        emit_alu32_reg(state, rd[1], rs, true, false, op);
    7a04:	69fb      	ldr	r3, [r7, #28]
    7a06:	3301      	adds	r3, #1
    7a08:	f993 1000 	ldrsb.w	r1, [r3]
    7a0c:	f997 2017 	ldrsb.w	r2, [r7, #23]
    7a10:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    7a14:	9301      	str	r3, [sp, #4]
    7a16:	2300      	movs	r3, #0
    7a18:	9300      	str	r3, [sp, #0]
    7a1a:	2301      	movs	r3, #1
    7a1c:	68f8      	ldr	r0, [r7, #12]
    7a1e:	f7ff fe29 	bl	7674 <emit_alu32_reg>
    }
    arm_bpf_put_reg64(state, dst, rd);
    7a22:	69fa      	ldr	r2, [r7, #28]
    7a24:	6879      	ldr	r1, [r7, #4]
    7a26:	68f8      	ldr	r0, [r7, #12]
    7a28:	f012 fe06 	bl	1a638 <arm_bpf_put_reg64>
}
    7a2c:	bf00      	nop
    7a2e:	3728      	adds	r7, #40	; 0x28
    7a30:	46bd      	mov	sp, r7
    7a32:	bd80      	pop	{r7, pc}
    7a34:	0002e9ec 	.word	0x0002e9ec
    7a38:	0002e9ee 	.word	0x0002e9ee

00007a3c <emit_alu32_imm>:

static void emit_alu32_imm(jit_state *state, const s8 dst, const u16 val, const u8 op) {
    7a3c:	b580      	push	{r7, lr}
    7a3e:	b084      	sub	sp, #16
    7a40:	af00      	add	r7, sp, #0
    7a42:	6078      	str	r0, [r7, #4]
    7a44:	4608      	mov	r0, r1
    7a46:	4611      	mov	r1, r2
    7a48:	461a      	mov	r2, r3
    7a4a:	4603      	mov	r3, r0
    7a4c:	70fb      	strb	r3, [r7, #3]
    7a4e:	460b      	mov	r3, r1
    7a50:	803b      	strh	r3, [r7, #0]
    7a52:	4613      	mov	r3, r2
    7a54:	70bb      	strb	r3, [r7, #2]
    const s8 *tmp = bpf2a32[TMP_REG_1];
    7a56:	4b3e      	ldr	r3, [pc, #248]	; (7b50 <emit_alu32_imm+0x114>)
    7a58:	60fb      	str	r3, [r7, #12]
    s8 rd = arm_bpf_get_reg32(state, dst, tmp[0]);
    7a5a:	68fb      	ldr	r3, [r7, #12]
    7a5c:	f993 2000 	ldrsb.w	r2, [r3]
    7a60:	f997 3003 	ldrsb.w	r3, [r7, #3]
    7a64:	4619      	mov	r1, r3
    7a66:	6878      	ldr	r0, [r7, #4]
    7a68:	f012 fd72 	bl	1a550 <arm_bpf_get_reg32>
    7a6c:	4603      	mov	r3, r0
    7a6e:	72fb      	strb	r3, [r7, #11]

    /* Do shift operation */
    switch (op) {
    7a70:	78bb      	ldrb	r3, [r7, #2]
    7a72:	2b70      	cmp	r3, #112	; 0x70
    7a74:	d01d      	beq.n	7ab2 <emit_alu32_imm+0x76>
    7a76:	2b70      	cmp	r3, #112	; 0x70
    7a78:	dc02      	bgt.n	7a80 <emit_alu32_imm+0x44>
    7a7a:	2b60      	cmp	r3, #96	; 0x60
    7a7c:	d005      	beq.n	7a8a <emit_alu32_imm+0x4e>
    7a7e:	e05a      	b.n	7b36 <emit_alu32_imm+0xfa>
    7a80:	2b80      	cmp	r3, #128	; 0x80
    7a82:	d044      	beq.n	7b0e <emit_alu32_imm+0xd2>
    7a84:	2bc0      	cmp	r3, #192	; 0xc0
    7a86:	d02b      	beq.n	7ae0 <emit_alu32_imm+0xa4>
    7a88:	e055      	b.n	7b36 <emit_alu32_imm+0xfa>
    case EBPF_ALU_LSH:
        emit2(state, (0x0000) | (val << 6) | (rd << 3) | (rd));
    7a8a:	883b      	ldrh	r3, [r7, #0]
    7a8c:	019b      	lsls	r3, r3, #6
    7a8e:	b21a      	sxth	r2, r3
    7a90:	f997 300b 	ldrsb.w	r3, [r7, #11]
    7a94:	00db      	lsls	r3, r3, #3
    7a96:	b21b      	sxth	r3, r3
    7a98:	4313      	orrs	r3, r2
    7a9a:	b21a      	sxth	r2, r3
    7a9c:	f997 300b 	ldrsb.w	r3, [r7, #11]
    7aa0:	b21b      	sxth	r3, r3
    7aa2:	4313      	orrs	r3, r2
    7aa4:	b21b      	sxth	r3, r3
    7aa6:	b29b      	uxth	r3, r3
    7aa8:	4619      	mov	r1, r3
    7aaa:	6878      	ldr	r0, [r7, #4]
    7aac:	f012 fd1b 	bl	1a4e6 <emit2>
        break;
    7ab0:	e041      	b.n	7b36 <emit_alu32_imm+0xfa>
    case EBPF_ALU_RSH:
        emit2(state, (0x0800) | (val << 6) | (rd << 3) | (rd));
    7ab2:	883b      	ldrh	r3, [r7, #0]
    7ab4:	019b      	lsls	r3, r3, #6
    7ab6:	b21a      	sxth	r2, r3
    7ab8:	f997 300b 	ldrsb.w	r3, [r7, #11]
    7abc:	00db      	lsls	r3, r3, #3
    7abe:	b21b      	sxth	r3, r3
    7ac0:	4313      	orrs	r3, r2
    7ac2:	b21a      	sxth	r2, r3
    7ac4:	f997 300b 	ldrsb.w	r3, [r7, #11]
    7ac8:	b21b      	sxth	r3, r3
    7aca:	4313      	orrs	r3, r2
    7acc:	b21b      	sxth	r3, r3
    7ace:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    7ad2:	b21b      	sxth	r3, r3
    7ad4:	b29b      	uxth	r3, r3
    7ad6:	4619      	mov	r1, r3
    7ad8:	6878      	ldr	r0, [r7, #4]
    7ada:	f012 fd04 	bl	1a4e6 <emit2>
        break;
    7ade:	e02a      	b.n	7b36 <emit_alu32_imm+0xfa>
    case EBPF_ALU_ARSH:
        emit2(state, (0x1000) | (val << 6) | (rd << 3) | (rd));
    7ae0:	883b      	ldrh	r3, [r7, #0]
    7ae2:	019b      	lsls	r3, r3, #6
    7ae4:	b21a      	sxth	r2, r3
    7ae6:	f997 300b 	ldrsb.w	r3, [r7, #11]
    7aea:	00db      	lsls	r3, r3, #3
    7aec:	b21b      	sxth	r3, r3
    7aee:	4313      	orrs	r3, r2
    7af0:	b21a      	sxth	r2, r3
    7af2:	f997 300b 	ldrsb.w	r3, [r7, #11]
    7af6:	b21b      	sxth	r3, r3
    7af8:	4313      	orrs	r3, r2
    7afa:	b21b      	sxth	r3, r3
    7afc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    7b00:	b21b      	sxth	r3, r3
    7b02:	b29b      	uxth	r3, r3
    7b04:	4619      	mov	r1, r3
    7b06:	6878      	ldr	r0, [r7, #4]
    7b08:	f012 fced 	bl	1a4e6 <emit2>
        break;
    7b0c:	e013      	b.n	7b36 <emit_alu32_imm+0xfa>
    case EBPF_ALU_NEG: // RSG
        emit2(state, (0x4240) | (rd << 3) | (rd));
    7b0e:	f997 300b 	ldrsb.w	r3, [r7, #11]
    7b12:	00db      	lsls	r3, r3, #3
    7b14:	b21a      	sxth	r2, r3
    7b16:	f997 300b 	ldrsb.w	r3, [r7, #11]
    7b1a:	b21b      	sxth	r3, r3
    7b1c:	4313      	orrs	r3, r2
    7b1e:	b21b      	sxth	r3, r3
    7b20:	f443 4384 	orr.w	r3, r3, #16896	; 0x4200
    7b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7b28:	b21b      	sxth	r3, r3
    7b2a:	b29b      	uxth	r3, r3
    7b2c:	4619      	mov	r1, r3
    7b2e:	6878      	ldr	r0, [r7, #4]
    7b30:	f012 fcd9 	bl	1a4e6 <emit2>
        break;
    7b34:	bf00      	nop
    }

    arm_bpf_put_reg32(state, dst, rd);
    7b36:	f997 200b 	ldrsb.w	r2, [r7, #11]
    7b3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
    7b3e:	4619      	mov	r1, r3
    7b40:	6878      	ldr	r0, [r7, #4]
    7b42:	f012 fd28 	bl	1a596 <arm_bpf_put_reg32>
}
    7b46:	bf00      	nop
    7b48:	3710      	adds	r7, #16
    7b4a:	46bd      	mov	sp, r7
    7b4c:	bd80      	pop	{r7, pc}
    7b4e:	bf00      	nop
    7b50:	0002e9ec 	.word	0x0002e9ec

00007b54 <emit_u32_div_mod>:

static void emit_u32_div_mod(jit_state *state, const s8 dst[], const s8 src[], const u16 code, const u16 imm) {
    7b54:	b580      	push	{r7, lr}
    7b56:	b08a      	sub	sp, #40	; 0x28
    7b58:	af00      	add	r7, sp, #0
    7b5a:	60f8      	str	r0, [r7, #12]
    7b5c:	60b9      	str	r1, [r7, #8]
    7b5e:	607a      	str	r2, [r7, #4]
    7b60:	807b      	strh	r3, [r7, #2]
    const s8 *tmp = bpf2a32[TMP_REG_1];
    7b62:	4b3f      	ldr	r3, [pc, #252]	; (7c60 <emit_u32_div_mod+0x10c>)
    7b64:	623b      	str	r3, [r7, #32]
    const s8 *tmp2 = bpf2a32[TMP_REG_2];
    7b66:	4b3f      	ldr	r3, [pc, #252]	; (7c64 <emit_u32_div_mod+0x110>)
    7b68:	61fb      	str	r3, [r7, #28]
    s8 rd_lo, rt;
    rd_lo = arm_bpf_get_reg32(state, dst_lo, tmp2[1]);
    7b6a:	68bb      	ldr	r3, [r7, #8]
    7b6c:	3301      	adds	r3, #1
    7b6e:	f993 1000 	ldrsb.w	r1, [r3]
    7b72:	69fb      	ldr	r3, [r7, #28]
    7b74:	3301      	adds	r3, #1
    7b76:	f993 3000 	ldrsb.w	r3, [r3]
    7b7a:	461a      	mov	r2, r3
    7b7c:	68f8      	ldr	r0, [r7, #12]
    7b7e:	f012 fce7 	bl	1a550 <arm_bpf_get_reg32>
    7b82:	4603      	mov	r3, r0
    7b84:	76fb      	strb	r3, [r7, #27]
    switch (BPF_SRC(code)) {
    7b86:	887b      	ldrh	r3, [r7, #2]
    7b88:	f003 0308 	and.w	r3, r3, #8
    7b8c:	2b00      	cmp	r3, #0
    7b8e:	d010      	beq.n	7bb2 <emit_u32_div_mod+0x5e>
    7b90:	2b08      	cmp	r3, #8
    7b92:	d11a      	bne.n	7bca <emit_u32_div_mod+0x76>
    case EBPF_SRC_REG:
        rt = arm_bpf_get_reg32(state, src_lo, tmp2[0]);
    7b94:	687b      	ldr	r3, [r7, #4]
    7b96:	3301      	adds	r3, #1
    7b98:	f993 1000 	ldrsb.w	r1, [r3]
    7b9c:	69fb      	ldr	r3, [r7, #28]
    7b9e:	f993 3000 	ldrsb.w	r3, [r3]
    7ba2:	461a      	mov	r2, r3
    7ba4:	68f8      	ldr	r0, [r7, #12]
    7ba6:	f012 fcd3 	bl	1a550 <arm_bpf_get_reg32>
    7baa:	4603      	mov	r3, r0
    7bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        break;
    7bb0:	e010      	b.n	7bd4 <emit_u32_div_mod+0x80>
    case EBPF_SRC_IMM:
        rt = tmp2[0];
    7bb2:	69fb      	ldr	r3, [r7, #28]
    7bb4:	781b      	ldrb	r3, [r3, #0]
    7bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        emit_mov_imm(state, rt, imm);
    7bba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    7bbe:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
    7bc0:	4619      	mov	r1, r3
    7bc2:	68f8      	ldr	r0, [r7, #12]
    7bc4:	f013 f984 	bl	1aed0 <emit_mov_imm>
        break;
    7bc8:	e004      	b.n	7bd4 <emit_u32_div_mod+0x80>
    default:
        rt = src_lo;
    7bca:	687b      	ldr	r3, [r7, #4]
    7bcc:	785b      	ldrb	r3, [r3, #1]
    7bce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        break;
    7bd2:	bf00      	nop
    }
    // emit_udivmod(rd_lo, rd_lo, rt, ctx, BPF_OP(code));
    if (BPF_OP(code) == EBPF_ALU_DIV) {
    7bd4:	887b      	ldrh	r3, [r7, #2]
    7bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    7bda:	2b30      	cmp	r3, #48	; 0x30
    7bdc:	d112      	bne.n	7c04 <emit_u32_div_mod+0xb0>
        u32 inst = (0xfbb0f0f0) | (rd_lo << 16) | (rd_lo << 8) | (rt);
    7bde:	f997 301b 	ldrsb.w	r3, [r7, #27]
    7be2:	041b      	lsls	r3, r3, #16
    7be4:	461a      	mov	r2, r3
    7be6:	f997 301b 	ldrsb.w	r3, [r7, #27]
    7bea:	021b      	lsls	r3, r3, #8
    7bec:	431a      	orrs	r2, r3
    7bee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
    7bf2:	431a      	orrs	r2, r3
    7bf4:	4b1c      	ldr	r3, [pc, #112]	; (7c68 <emit_u32_div_mod+0x114>)
    7bf6:	4313      	orrs	r3, r2
    7bf8:	617b      	str	r3, [r7, #20]
        emit4(state, inst);
    7bfa:	6979      	ldr	r1, [r7, #20]
    7bfc:	68f8      	ldr	r0, [r7, #12]
    7bfe:	f012 fc82 	bl	1a506 <emit4>
    7c02:	e01f      	b.n	7c44 <emit_u32_div_mod+0xf0>
    } else { // MOD
        u32 inst = (0xfbb0f0f0) | (rd_lo << 16) | (ARM_IP << 8) | (rt);
    7c04:	f997 301b 	ldrsb.w	r3, [r7, #27]
    7c08:	041b      	lsls	r3, r3, #16
    7c0a:	461a      	mov	r2, r3
    7c0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
    7c10:	431a      	orrs	r2, r3
    7c12:	4b16      	ldr	r3, [pc, #88]	; (7c6c <emit_u32_div_mod+0x118>)
    7c14:	4313      	orrs	r3, r2
    7c16:	613b      	str	r3, [r7, #16]
        emit4(state, inst);
    7c18:	6939      	ldr	r1, [r7, #16]
    7c1a:	68f8      	ldr	r0, [r7, #12]
    7c1c:	f012 fc73 	bl	1a506 <emit4>
        inst = (0xfb000010) | (rd_lo << 16) | (ARM_IP << 12) | (rd_lo << 8) | (rt);
    7c20:	f997 301b 	ldrsb.w	r3, [r7, #27]
    7c24:	041b      	lsls	r3, r3, #16
    7c26:	461a      	mov	r2, r3
    7c28:	f997 301b 	ldrsb.w	r3, [r7, #27]
    7c2c:	021b      	lsls	r3, r3, #8
    7c2e:	431a      	orrs	r2, r3
    7c30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
    7c34:	431a      	orrs	r2, r3
    7c36:	4b0e      	ldr	r3, [pc, #56]	; (7c70 <emit_u32_div_mod+0x11c>)
    7c38:	4313      	orrs	r3, r2
    7c3a:	613b      	str	r3, [r7, #16]
        emit4(state, inst);
    7c3c:	6939      	ldr	r1, [r7, #16]
    7c3e:	68f8      	ldr	r0, [r7, #12]
    7c40:	f012 fc61 	bl	1a506 <emit4>
    }

    arm_bpf_put_reg32(state, dst_lo, rd_lo);
    7c44:	68bb      	ldr	r3, [r7, #8]
    7c46:	3301      	adds	r3, #1
    7c48:	f993 3000 	ldrsb.w	r3, [r3]
    7c4c:	f997 201b 	ldrsb.w	r2, [r7, #27]
    7c50:	4619      	mov	r1, r3
    7c52:	68f8      	ldr	r0, [r7, #12]
    7c54:	f012 fc9f 	bl	1a596 <arm_bpf_put_reg32>
}
    7c58:	bf00      	nop
    7c5a:	3728      	adds	r7, #40	; 0x28
    7c5c:	46bd      	mov	sp, r7
    7c5e:	bd80      	pop	{r7, pc}
    7c60:	0002e9ec 	.word	0x0002e9ec
    7c64:	0002e9ee 	.word	0x0002e9ee
    7c68:	fbb0f0f0 	.word	0xfbb0f0f0
    7c6c:	fbb0fcf0 	.word	0xfbb0fcf0
    7c70:	fb00c010 	.word	0xfb00c010

00007c74 <_emit_lsh64_reg>:
    default:
        break;
    }
}

void _emit_lsh64_reg(jit_state *state, const s8 dst[], const s8 src[]) {
    7c74:	b580      	push	{r7, lr}
    7c76:	b08c      	sub	sp, #48	; 0x30
    7c78:	af00      	add	r7, sp, #0
    7c7a:	60f8      	str	r0, [r7, #12]
    7c7c:	60b9      	str	r1, [r7, #8]
    7c7e:	607a      	str	r2, [r7, #4]
    const s8 *tmp = bpf2a32[TMP_REG_1];
    7c80:	4b66      	ldr	r3, [pc, #408]	; (7e1c <_emit_lsh64_reg+0x1a8>)
    7c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    const s8 *tmp2 = bpf2a32[TMP_REG_2];
    7c84:	4b66      	ldr	r3, [pc, #408]	; (7e20 <_emit_lsh64_reg+0x1ac>)
    7c86:	62bb      	str	r3, [r7, #40]	; 0x28
    const s8 *rd;
    s8 rt;
   
    /* Setup Operands */
    rt = arm_bpf_get_reg32(state, src_lo, tmp2[1]);
    7c88:	687b      	ldr	r3, [r7, #4]
    7c8a:	3301      	adds	r3, #1
    7c8c:	f993 1000 	ldrsb.w	r1, [r3]
    7c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7c92:	3301      	adds	r3, #1
    7c94:	f993 3000 	ldrsb.w	r3, [r3]
    7c98:	461a      	mov	r2, r3
    7c9a:	68f8      	ldr	r0, [r7, #12]
    7c9c:	f012 fc58 	bl	1a550 <arm_bpf_get_reg32>
    7ca0:	4603      	mov	r3, r0
    7ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    // DEBUG_LOG("arm_bpf_get_reg32 src: %d tmp: %d\n", src_lo, tmp2[1]);
    rd = arm_bpf_get_reg64(state, dst, tmp);
    7ca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    7ca8:	68b9      	ldr	r1, [r7, #8]
    7caa:	68f8      	ldr	r0, [r7, #12]
    7cac:	f012 fca1 	bl	1a5f2 <arm_bpf_get_reg64>
    7cb0:	6238      	str	r0, [r7, #32]
    tmp2[0] = rd[1] << rt
    */

    /* Do LSH operation */
    // sub.w ARM_IP = rt - 32
    u8 i = (32 >> 11) & 0b1;
    7cb2:	2300      	movs	r3, #0
    7cb4:	77fb      	strb	r3, [r7, #31]
    u16 imm3 = (32 >> 8) & 0b111;
    7cb6:	2300      	movs	r3, #0
    7cb8:	83bb      	strh	r3, [r7, #28]
    u16 imm8 = 32 & 0xff;
    7cba:	2320      	movs	r3, #32
    7cbc:	837b      	strh	r3, [r7, #26]
    u32 inst = (0xf1a00000) | (i << 26) | (rt << 16) | (imm3 << 12) | (ARM_IP << 8) | imm8;
    7cbe:	7ffb      	ldrb	r3, [r7, #31]
    7cc0:	069b      	lsls	r3, r3, #26
    7cc2:	461a      	mov	r2, r3
    7cc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
    7cc8:	041b      	lsls	r3, r3, #16
    7cca:	4313      	orrs	r3, r2
    7ccc:	8bba      	ldrh	r2, [r7, #28]
    7cce:	0312      	lsls	r2, r2, #12
    7cd0:	431a      	orrs	r2, r3
    7cd2:	8b7b      	ldrh	r3, [r7, #26]
    7cd4:	431a      	orrs	r2, r3
    7cd6:	4b53      	ldr	r3, [pc, #332]	; (7e24 <_emit_lsh64_reg+0x1b0>)
    7cd8:	4313      	orrs	r3, r2
    7cda:	617b      	str	r3, [r7, #20]
    emit4(state, inst);
    7cdc:	6979      	ldr	r1, [r7, #20]
    7cde:	68f8      	ldr	r0, [r7, #12]
    7ce0:	f012 fc11 	bl	1a506 <emit4>

    // tmp2[0] = rd[0] << rt, LSL
    inst = (THUMB2_LSLW_REG_T2) | (rd[0] << 16) | (tmp2[0] << 8) | (rt);
    7ce4:	6a3b      	ldr	r3, [r7, #32]
    7ce6:	f993 3000 	ldrsb.w	r3, [r3]
    7cea:	041b      	lsls	r3, r3, #16
    7cec:	461a      	mov	r2, r3
    7cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7cf0:	f993 3000 	ldrsb.w	r3, [r3]
    7cf4:	021b      	lsls	r3, r3, #8
    7cf6:	431a      	orrs	r2, r3
    7cf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
    7cfc:	4313      	orrs	r3, r2
    7cfe:	f043 437a 	orr.w	r3, r3, #4194304000	; 0xfa000000
    7d02:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
    7d06:	617b      	str	r3, [r7, #20]
    emit4(state, inst);
    7d08:	6979      	ldr	r1, [r7, #20]
    7d0a:	68f8      	ldr	r0, [r7, #12]
    7d0c:	f012 fbfb 	bl	1a506 <emit4>
    // my_printf("THUMB2_LSLSW_REG: %x %d %d %d\n", inst, rd[0], tmp2[0], rt);
    
    // ARM_ORR_SR -> two inst
    // ARM_IP = tmp2[0] or (rd[1] << (rt - 32)) shift <= 0 ommit
    // 1. ARM_IP = rd[1] << ARM_IP 2. tmp2[0] = tmp2[0] or ARM_IP
    inst = (THUMB2_LSLW_REG_T2) | (rd[1] << 16) | (ARM_IP << 8) | (ARM_IP);
    7d10:	6a3b      	ldr	r3, [r7, #32]
    7d12:	3301      	adds	r3, #1
    7d14:	f993 3000 	ldrsb.w	r3, [r3]
    7d18:	041b      	lsls	r3, r3, #16
    7d1a:	461a      	mov	r2, r3
    7d1c:	4b42      	ldr	r3, [pc, #264]	; (7e28 <_emit_lsh64_reg+0x1b4>)
    7d1e:	4313      	orrs	r3, r2
    7d20:	617b      	str	r3, [r7, #20]
    emit4(state, inst);
    7d22:	6979      	ldr	r1, [r7, #20]
    7d24:	68f8      	ldr	r0, [r7, #12]
    7d26:	f012 fbee 	bl	1a506 <emit4>
    inst = (THUMB2_ORRW_REG) | (tmp2[0] << 16) | (ARM_IP << 8) | (ARM_IP); 
    7d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7d2c:	f993 3000 	ldrsb.w	r3, [r3]
    7d30:	041b      	lsls	r3, r3, #16
    7d32:	461a      	mov	r2, r3
    7d34:	4b3d      	ldr	r3, [pc, #244]	; (7e2c <_emit_lsh64_reg+0x1b8>)
    7d36:	4313      	orrs	r3, r2
    7d38:	617b      	str	r3, [r7, #20]
    emit4(state, inst);
    7d3a:	6979      	ldr	r1, [r7, #20]
    7d3c:	68f8      	ldr	r0, [r7, #12]
    7d3e:	f012 fbe2 	bl	1a506 <emit4>
    // return;
    
    // tmp2[0] = 32 - rt
    inst = (0xf1c00000) | (i << 26) | (rt << 16) | (imm3 << 12) | (tmp2[0] << 8) | imm8;
    7d42:	7ffb      	ldrb	r3, [r7, #31]
    7d44:	069b      	lsls	r3, r3, #26
    7d46:	461a      	mov	r2, r3
    7d48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
    7d4c:	041b      	lsls	r3, r3, #16
    7d4e:	4313      	orrs	r3, r2
    7d50:	8bba      	ldrh	r2, [r7, #28]
    7d52:	0312      	lsls	r2, r2, #12
    7d54:	4313      	orrs	r3, r2
    7d56:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7d58:	f992 2000 	ldrsb.w	r2, [r2]
    7d5c:	0212      	lsls	r2, r2, #8
    7d5e:	431a      	orrs	r2, r3
    7d60:	8b7b      	ldrh	r3, [r7, #26]
    7d62:	4313      	orrs	r3, r2
    7d64:	f043 4371 	orr.w	r3, r3, #4043309056	; 0xf1000000
    7d68:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
    7d6c:	617b      	str	r3, [r7, #20]
    emit4(state, inst);
    7d6e:	6979      	ldr	r1, [r7, #20]
    7d70:	68f8      	ldr	r0, [r7, #12]
    7d72:	f012 fbc8 	bl	1a506 <emit4>
   
    // ARM_IP = ARM_IP or (rd[1] >> (32 - rt))  shift <= 0 ommit
    // 1. tmp2[0] = rd[1] >> tmp2[0] 2. ARM_IP = tmp2[0] or ARM_IP
    inst = (THUMB2_LSLW_REG_T2) | (rd[1] << 16) | (tmp2[0] << 8) | (tmp2[0]);
    7d76:	6a3b      	ldr	r3, [r7, #32]
    7d78:	3301      	adds	r3, #1
    7d7a:	f993 3000 	ldrsb.w	r3, [r3]
    7d7e:	041b      	lsls	r3, r3, #16
    7d80:	461a      	mov	r2, r3
    7d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7d84:	f993 3000 	ldrsb.w	r3, [r3]
    7d88:	021b      	lsls	r3, r3, #8
    7d8a:	4313      	orrs	r3, r2
    7d8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7d8e:	f992 2000 	ldrsb.w	r2, [r2]
    7d92:	4313      	orrs	r3, r2
    7d94:	f043 437a 	orr.w	r3, r3, #4194304000	; 0xfa000000
    7d98:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
    7d9c:	617b      	str	r3, [r7, #20]
    emit4(state, inst);
    7d9e:	6979      	ldr	r1, [r7, #20]
    7da0:	68f8      	ldr	r0, [r7, #12]
    7da2:	f012 fbb0 	bl	1a506 <emit4>
    inst = (THUMB2_ORRW_REG) | (tmp2[0] << 16) | (ARM_IP << 8) | (ARM_IP); 
    7da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7da8:	f993 3000 	ldrsb.w	r3, [r3]
    7dac:	041b      	lsls	r3, r3, #16
    7dae:	461a      	mov	r2, r3
    7db0:	4b1e      	ldr	r3, [pc, #120]	; (7e2c <_emit_lsh64_reg+0x1b8>)
    7db2:	4313      	orrs	r3, r2
    7db4:	617b      	str	r3, [r7, #20]
    emit4(state, inst);
    7db6:	6979      	ldr	r1, [r7, #20]
    7db8:	68f8      	ldr	r0, [r7, #12]
    7dba:	f012 fba4 	bl	1a506 <emit4>

    // tmp2[0] = rd[1] << rt
    inst = (THUMB2_LSLW_REG_T2) | (rd[1] << 16) | (tmp2[0] << 8) | (rt);
    7dbe:	6a3b      	ldr	r3, [r7, #32]
    7dc0:	3301      	adds	r3, #1
    7dc2:	f993 3000 	ldrsb.w	r3, [r3]
    7dc6:	041b      	lsls	r3, r3, #16
    7dc8:	461a      	mov	r2, r3
    7dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7dcc:	f993 3000 	ldrsb.w	r3, [r3]
    7dd0:	021b      	lsls	r3, r3, #8
    7dd2:	431a      	orrs	r2, r3
    7dd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
    7dd8:	4313      	orrs	r3, r2
    7dda:	f043 437a 	orr.w	r3, r3, #4194304000	; 0xfa000000
    7dde:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
    7de2:	617b      	str	r3, [r7, #20]
    emit4(state, inst);
    7de4:	6979      	ldr	r1, [r7, #20]
    7de6:	68f8      	ldr	r0, [r7, #12]
    7de8:	f012 fb8d 	bl	1a506 <emit4>

	arm_bpf_put_reg32(state, dst_lo, tmp2[0]);
    7dec:	68bb      	ldr	r3, [r7, #8]
    7dee:	3301      	adds	r3, #1
    7df0:	f993 1000 	ldrsb.w	r1, [r3]
    7df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7df6:	f993 3000 	ldrsb.w	r3, [r3]
    7dfa:	461a      	mov	r2, r3
    7dfc:	68f8      	ldr	r0, [r7, #12]
    7dfe:	f012 fbca 	bl	1a596 <arm_bpf_put_reg32>
	arm_bpf_put_reg32(state, dst_hi, ARM_IP);
    7e02:	68bb      	ldr	r3, [r7, #8]
    7e04:	f993 3000 	ldrsb.w	r3, [r3]
    7e08:	220c      	movs	r2, #12
    7e0a:	4619      	mov	r1, r3
    7e0c:	68f8      	ldr	r0, [r7, #12]
    7e0e:	f012 fbc2 	bl	1a596 <arm_bpf_put_reg32>
}
    7e12:	bf00      	nop
    7e14:	3730      	adds	r7, #48	; 0x30
    7e16:	46bd      	mov	sp, r7
    7e18:	bd80      	pop	{r7, pc}
    7e1a:	bf00      	nop
    7e1c:	0002e9ec 	.word	0x0002e9ec
    7e20:	0002e9ee 	.word	0x0002e9ee
    7e24:	f1a00c00 	.word	0xf1a00c00
    7e28:	fa00fc0c 	.word	0xfa00fc0c
    7e2c:	ea400c0c 	.word	0xea400c0c

00007e30 <_emit_lsh64_imm>:

void _emit_lsh64_imm(jit_state *state, const s8 dst[], const u16 val) {
    7e30:	b580      	push	{r7, lr}
    7e32:	b08a      	sub	sp, #40	; 0x28
    7e34:	af00      	add	r7, sp, #0
    7e36:	60f8      	str	r0, [r7, #12]
    7e38:	60b9      	str	r1, [r7, #8]
    7e3a:	4613      	mov	r3, r2
    7e3c:	80fb      	strh	r3, [r7, #6]
    const s8 *tmp = bpf2a32[TMP_REG_1];
    7e3e:	4b5b      	ldr	r3, [pc, #364]	; (7fac <_emit_lsh64_imm+0x17c>)
    7e40:	627b      	str	r3, [r7, #36]	; 0x24
	const s8 *tmp2 = bpf2a32[TMP_REG_2];
    7e42:	4b5b      	ldr	r3, [pc, #364]	; (7fb0 <_emit_lsh64_imm+0x180>)
    7e44:	623b      	str	r3, [r7, #32]
	const s8 *rd;

    // DEBUG_LOG("_emit_lsh64_imm: imm=%d %d\n", val, tmp2[0]);

	/* Setup operands */
	rd = arm_bpf_get_reg64(state, dst, tmp);
    7e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    7e48:	68b9      	ldr	r1, [r7, #8]
    7e4a:	68f8      	ldr	r0, [r7, #12]
    7e4c:	f012 fbd1 	bl	1a5f2 <arm_bpf_get_reg64>
    7e50:	61f8      	str	r0, [r7, #28]

	/* Do LSH operation */
    if (val < 32) {
    7e52:	88fb      	ldrh	r3, [r7, #6]
    7e54:	2b1f      	cmp	r3, #31
    7e56:	d863      	bhi.n	7f20 <_emit_lsh64_imm+0xf0>
        // emit(ARM_MOV_SI(tmp2[0], rd[0], SRTYPE_ASL, val), ctx);
        // LSLS.W tmp2[0] = rd[0] << val
        u16 imm3 = (val & 0b11100) >> 2;
    7e58:	88fb      	ldrh	r3, [r7, #6]
    7e5a:	109b      	asrs	r3, r3, #2
    7e5c:	b29b      	uxth	r3, r3
    7e5e:	f003 0307 	and.w	r3, r3, #7
    7e62:	837b      	strh	r3, [r7, #26]
        u16 imm2 = (val & 0b11);
    7e64:	88fb      	ldrh	r3, [r7, #6]
    7e66:	f003 0303 	and.w	r3, r3, #3
    7e6a:	833b      	strh	r3, [r7, #24]
        u32 inst = (0xea5f0000) | (imm3 << 12) | (tmp2[0] << 8) | (imm2 << 4) | (rd[0]);  
    7e6c:	8b7b      	ldrh	r3, [r7, #26]
    7e6e:	031b      	lsls	r3, r3, #12
    7e70:	461a      	mov	r2, r3
    7e72:	6a3b      	ldr	r3, [r7, #32]
    7e74:	f993 3000 	ldrsb.w	r3, [r3]
    7e78:	021b      	lsls	r3, r3, #8
    7e7a:	4313      	orrs	r3, r2
    7e7c:	8b3a      	ldrh	r2, [r7, #24]
    7e7e:	0112      	lsls	r2, r2, #4
    7e80:	4313      	orrs	r3, r2
    7e82:	69fa      	ldr	r2, [r7, #28]
    7e84:	f992 2000 	ldrsb.w	r2, [r2]
    7e88:	4313      	orrs	r3, r2
    7e8a:	f043 436a 	orr.w	r3, r3, #3925868544	; 0xea000000
    7e8e:	f443 03be 	orr.w	r3, r3, #6225920	; 0x5f0000
    7e92:	617b      	str	r3, [r7, #20]
        emit4(state, inst);
    7e94:	6979      	ldr	r1, [r7, #20]
    7e96:	68f8      	ldr	r0, [r7, #12]
    7e98:	f012 fb35 	bl	1a506 <emit4>
        // emit(ARM_ORR_SI(rd[0], tmp2[0], rd[1], SRTYPE_LSR, 32 - val), ctx);
        // ORRS.W rd[0] = tmp2[0] or (rd[1] >> (32 -val))
        imm3 = ((32 - val) & 0b11100) >> 2;
    7e9c:	88fb      	ldrh	r3, [r7, #6]
    7e9e:	f1c3 0320 	rsb	r3, r3, #32
    7ea2:	109b      	asrs	r3, r3, #2
    7ea4:	b29b      	uxth	r3, r3
    7ea6:	f003 0307 	and.w	r3, r3, #7
    7eaa:	837b      	strh	r3, [r7, #26]
        imm2 = ((32 - val) & 0b11);
    7eac:	88fb      	ldrh	r3, [r7, #6]
    7eae:	425b      	negs	r3, r3
    7eb0:	b29b      	uxth	r3, r3
    7eb2:	f003 0303 	and.w	r3, r3, #3
    7eb6:	833b      	strh	r3, [r7, #24]
        inst = (0xea500010) | (tmp2[0] << 16) | (imm3 << 12) | (rd[0] << 8) | (imm2 << 6) | (rd[1]);
    7eb8:	6a3b      	ldr	r3, [r7, #32]
    7eba:	f993 3000 	ldrsb.w	r3, [r3]
    7ebe:	041b      	lsls	r3, r3, #16
    7ec0:	461a      	mov	r2, r3
    7ec2:	8b7b      	ldrh	r3, [r7, #26]
    7ec4:	031b      	lsls	r3, r3, #12
    7ec6:	4313      	orrs	r3, r2
    7ec8:	69fa      	ldr	r2, [r7, #28]
    7eca:	f992 2000 	ldrsb.w	r2, [r2]
    7ece:	0212      	lsls	r2, r2, #8
    7ed0:	4313      	orrs	r3, r2
    7ed2:	8b3a      	ldrh	r2, [r7, #24]
    7ed4:	0192      	lsls	r2, r2, #6
    7ed6:	4313      	orrs	r3, r2
    7ed8:	69fa      	ldr	r2, [r7, #28]
    7eda:	3201      	adds	r2, #1
    7edc:	f992 2000 	ldrsb.w	r2, [r2]
    7ee0:	431a      	orrs	r2, r3
    7ee2:	4b34      	ldr	r3, [pc, #208]	; (7fb4 <_emit_lsh64_imm+0x184>)
    7ee4:	4313      	orrs	r3, r2
    7ee6:	617b      	str	r3, [r7, #20]
        emit4(state, inst);
    7ee8:	6979      	ldr	r1, [r7, #20]
    7eea:	68f8      	ldr	r0, [r7, #12]
    7eec:	f012 fb0b 	bl	1a506 <emit4>
        // emit(ARM_MOV_SI(rd[1], rd[1], SRTYPE_ASL, val), ctx);
        // lsls imm 
        emit2(state, (0x0000) | (val << 6) | (rd[1]<< 3) | (rd[1]));
    7ef0:	88fb      	ldrh	r3, [r7, #6]
    7ef2:	019b      	lsls	r3, r3, #6
    7ef4:	b21a      	sxth	r2, r3
    7ef6:	69fb      	ldr	r3, [r7, #28]
    7ef8:	3301      	adds	r3, #1
    7efa:	f993 3000 	ldrsb.w	r3, [r3]
    7efe:	00db      	lsls	r3, r3, #3
    7f00:	b21b      	sxth	r3, r3
    7f02:	4313      	orrs	r3, r2
    7f04:	b21a      	sxth	r2, r3
    7f06:	69fb      	ldr	r3, [r7, #28]
    7f08:	3301      	adds	r3, #1
    7f0a:	f993 3000 	ldrsb.w	r3, [r3]
    7f0e:	b21b      	sxth	r3, r3
    7f10:	4313      	orrs	r3, r2
    7f12:	b21b      	sxth	r3, r3
    7f14:	b29b      	uxth	r3, r3
    7f16:	4619      	mov	r1, r3
    7f18:	68f8      	ldr	r0, [r7, #12]
    7f1a:	f012 fae4 	bl	1a4e6 <emit2>
    7f1e:	e03c      	b.n	7f9a <_emit_lsh64_imm+0x16a>
    } else {
        if (val == 32) { // 0
    7f20:	88fb      	ldrh	r3, [r7, #6]
    7f22:	2b20      	cmp	r3, #32
    7f24:	d10b      	bne.n	7f3e <_emit_lsh64_imm+0x10e>
            // emit(ARM_MOV_R(rd[0], rd[1]), ctx); 
            // rd[1] -> rd[0]
            _emit_mov_reg(state, rd[1], rd[0]);
    7f26:	69fb      	ldr	r3, [r7, #28]
    7f28:	3301      	adds	r3, #1
    7f2a:	f993 1000 	ldrsb.w	r1, [r3]
    7f2e:	69fb      	ldr	r3, [r7, #28]
    7f30:	f993 3000 	ldrsb.w	r3, [r3]
    7f34:	461a      	mov	r2, r3
    7f36:	68f8      	ldr	r0, [r7, #12]
    7f38:	f013 f850 	bl	1afdc <_emit_mov_reg>
    7f3c:	e016      	b.n	7f6c <_emit_lsh64_imm+0x13c>

        } else {
            // emit(ARM_MOV_SI(rd[0], rd[1], SRTYPE_ASL, val - 32), ctx);
            // rd[0] = rd[1] << (val - 32)
            emit2(state, (0x0000) | ((val - 32) << 6) | (rd[1] << 3) | (rd[0]));
    7f3e:	88fb      	ldrh	r3, [r7, #6]
    7f40:	3b20      	subs	r3, #32
    7f42:	019b      	lsls	r3, r3, #6
    7f44:	b21a      	sxth	r2, r3
    7f46:	69fb      	ldr	r3, [r7, #28]
    7f48:	3301      	adds	r3, #1
    7f4a:	f993 3000 	ldrsb.w	r3, [r3]
    7f4e:	00db      	lsls	r3, r3, #3
    7f50:	b21b      	sxth	r3, r3
    7f52:	4313      	orrs	r3, r2
    7f54:	b21a      	sxth	r2, r3
    7f56:	69fb      	ldr	r3, [r7, #28]
    7f58:	f993 3000 	ldrsb.w	r3, [r3]
    7f5c:	b21b      	sxth	r3, r3
    7f5e:	4313      	orrs	r3, r2
    7f60:	b21b      	sxth	r3, r3
    7f62:	b29b      	uxth	r3, r3
    7f64:	4619      	mov	r1, r3
    7f66:	68f8      	ldr	r0, [r7, #12]
    7f68:	f012 fabd 	bl	1a4e6 <emit2>
        }
        // emit(ARM_EOR_R(rd[1], rd[1], rd[1]), ctx);
        // rd[1] = rd[1]^rd[1] = 0
        emit2(state, (0x4040) | (rd[1] << 3) | (rd[1]));
    7f6c:	69fb      	ldr	r3, [r7, #28]
    7f6e:	3301      	adds	r3, #1
    7f70:	f993 3000 	ldrsb.w	r3, [r3]
    7f74:	00db      	lsls	r3, r3, #3
    7f76:	b21a      	sxth	r2, r3
    7f78:	69fb      	ldr	r3, [r7, #28]
    7f7a:	3301      	adds	r3, #1
    7f7c:	f993 3000 	ldrsb.w	r3, [r3]
    7f80:	b21b      	sxth	r3, r3
    7f82:	4313      	orrs	r3, r2
    7f84:	b21b      	sxth	r3, r3
    7f86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    7f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7f8e:	b21b      	sxth	r3, r3
    7f90:	b29b      	uxth	r3, r3
    7f92:	4619      	mov	r1, r3
    7f94:	68f8      	ldr	r0, [r7, #12]
    7f96:	f012 faa6 	bl	1a4e6 <emit2>
    }
    arm_bpf_put_reg64(state, dst, rd);
    7f9a:	69fa      	ldr	r2, [r7, #28]
    7f9c:	68b9      	ldr	r1, [r7, #8]
    7f9e:	68f8      	ldr	r0, [r7, #12]
    7fa0:	f012 fb4a 	bl	1a638 <arm_bpf_put_reg64>
}
    7fa4:	bf00      	nop
    7fa6:	3728      	adds	r7, #40	; 0x28
    7fa8:	46bd      	mov	sp, r7
    7faa:	bd80      	pop	{r7, pc}
    7fac:	0002e9ec 	.word	0x0002e9ec
    7fb0:	0002e9ee 	.word	0x0002e9ee
    7fb4:	ea500010 	.word	0xea500010

00007fb8 <emit_a32_rsh_r64>:

static inline void emit_a32_rsh_r64(jit_state *state, const s8 dst[], const s8 src[]) {
    7fb8:	b580      	push	{r7, lr}
    7fba:	b08a      	sub	sp, #40	; 0x28
    7fbc:	af02      	add	r7, sp, #8
    7fbe:	60f8      	str	r0, [r7, #12]
    7fc0:	60b9      	str	r1, [r7, #8]
    7fc2:	607a      	str	r2, [r7, #4]
    const s8 *tmp = bpf2a32[TMP_REG_1];
    7fc4:	4b52      	ldr	r3, [pc, #328]	; (8110 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x110>)
    7fc6:	61fb      	str	r3, [r7, #28]
    const s8 *tmp2 = bpf2a32[TMP_REG_2];
    7fc8:	4b52      	ldr	r3, [pc, #328]	; (8114 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x114>)
    7fca:	61bb      	str	r3, [r7, #24]
    const s8 *rd;
    s8 rt;

    /* Setup Operands */
    rt = arm_bpf_get_reg32(state, src_lo, tmp2[1]);
    7fcc:	687b      	ldr	r3, [r7, #4]
    7fce:	3301      	adds	r3, #1
    7fd0:	f993 1000 	ldrsb.w	r1, [r3]
    7fd4:	69bb      	ldr	r3, [r7, #24]
    7fd6:	3301      	adds	r3, #1
    7fd8:	f993 3000 	ldrsb.w	r3, [r3]
    7fdc:	461a      	mov	r2, r3
    7fde:	68f8      	ldr	r0, [r7, #12]
    7fe0:	f012 fab6 	bl	1a550 <arm_bpf_get_reg32>
    7fe4:	4603      	mov	r3, r0
    7fe6:	75fb      	strb	r3, [r7, #23]
    rd = arm_bpf_get_reg64(state, dst, tmp);
    7fe8:	69fa      	ldr	r2, [r7, #28]
    7fea:	68b9      	ldr	r1, [r7, #8]
    7fec:	68f8      	ldr	r0, [r7, #12]
    7fee:	f012 fb00 	bl	1a5f2 <arm_bpf_get_reg64>
    7ff2:	6138      	str	r0, [r7, #16]

    /* Do RSH operation */
    // emit(ARM_RSB_I(ARM_IP, rt, 32), ctx);
    emit4(state, _thumb32_RSBW_IMM_T2(ARM_IP, rt, 32, FLAG_S));
    7ff4:	f997 1017 	ldrsb.w	r1, [r7, #23]
    7ff8:	2301      	movs	r3, #1
    7ffa:	2220      	movs	r2, #32
    7ffc:	200c      	movs	r0, #12
    7ffe:	f011 fcc8 	bl	19992 <_thumb32_RSBW_IMM_T2>
    8002:	4603      	mov	r3, r0
    8004:	4619      	mov	r1, r3
    8006:	68f8      	ldr	r0, [r7, #12]
    8008:	f012 fa7d 	bl	1a506 <emit4>
    // emit(ARM_SUBS_I(tmp2[0], rt, 32), ctx);
    emit4(state, _thumb32_SUBW_IMM_T4(tmp2[0], rt, 32, FLAG_S));
    800c:	69bb      	ldr	r3, [r7, #24]
    800e:	f993 0000 	ldrsb.w	r0, [r3]
    8012:	f997 1017 	ldrsb.w	r1, [r7, #23]
    8016:	2301      	movs	r3, #1
    8018:	2220      	movs	r2, #32
    801a:	f011 ff9c 	bl	19f56 <_thumb32_SUBW_IMM_T4>
    801e:	4603      	mov	r3, r0
    8020:	4619      	mov	r1, r3
    8022:	68f8      	ldr	r0, [r7, #12]
    8024:	f012 fa6f 	bl	1a506 <emit4>
    // emit(ARM_MOV_SR(ARM_LR, rd[1], SRTYPE_LSR, rt), ctx);
    emit4(state, _thumb32_LSRW_REG_T2(ARM_LR, rd[1], rt, FLAG_S));
    8028:	693b      	ldr	r3, [r7, #16]
    802a:	3301      	adds	r3, #1
    802c:	f993 1000 	ldrsb.w	r1, [r3]
    8030:	f997 2017 	ldrsb.w	r2, [r7, #23]
    8034:	2301      	movs	r3, #1
    8036:	200e      	movs	r0, #14
    8038:	f7ff f8da 	bl	71f0 <_thumb32_LSRW_REG_T2>
    803c:	4603      	mov	r3, r0
    803e:	4619      	mov	r1, r3
    8040:	68f8      	ldr	r0, [r7, #12]
    8042:	f012 fa60 	bl	1a506 <emit4>
    // emit(ARM_ORR_SR(ARM_LR, ARM_LR, rd[0], SRTYPE_ASL, ARM_IP), ctx);
    emit4(state, _thumb32_LSLW_REG_T2(rd[0], rd[0], ARM_IP, FLAG_S));
    8046:	693b      	ldr	r3, [r7, #16]
    8048:	f993 0000 	ldrsb.w	r0, [r3]
    804c:	693b      	ldr	r3, [r7, #16]
    804e:	f993 1000 	ldrsb.w	r1, [r3]
    8052:	2301      	movs	r3, #1
    8054:	220c      	movs	r2, #12
    8056:	f012 f96a 	bl	1a32e <_thumb32_LSLW_REG_T2>
    805a:	4603      	mov	r3, r0
    805c:	4619      	mov	r1, r3
    805e:	68f8      	ldr	r0, [r7, #12]
    8060:	f012 fa51 	bl	1a506 <emit4>
    emit4(state, _thumb32_ORRW_REG_T2(ARM_LR, ARM_LR, rd[0], 0, SRTYPE_LSL, FLAG_S));
    8064:	693b      	ldr	r3, [r7, #16]
    8066:	f993 2000 	ldrsb.w	r2, [r3]
    806a:	2301      	movs	r3, #1
    806c:	9301      	str	r3, [sp, #4]
    806e:	2300      	movs	r3, #0
    8070:	9300      	str	r3, [sp, #0]
    8072:	2300      	movs	r3, #0
    8074:	210e      	movs	r1, #14
    8076:	200e      	movs	r0, #14
    8078:	f012 f9d4 	bl	1a424 <_thumb32_ORRW_REG_T2>
    807c:	4603      	mov	r3, r0
    807e:	4619      	mov	r1, r3
    8080:	68f8      	ldr	r0, [r7, #12]
    8082:	f012 fa40 	bl	1a506 <emit4>
    // emit(ARM_ORR_SR(ARM_LR, ARM_LR, rd[0], SRTYPE_LSR, tmp2[0]), ctx);
    emit4(state, _thumb32_LSRW_REG_T2(rd[0], rd[0], tmp2[0], FLAG_S));
    8086:	693b      	ldr	r3, [r7, #16]
    8088:	f993 0000 	ldrsb.w	r0, [r3]
    808c:	693b      	ldr	r3, [r7, #16]
    808e:	f993 1000 	ldrsb.w	r1, [r3]
    8092:	69bb      	ldr	r3, [r7, #24]
    8094:	f993 2000 	ldrsb.w	r2, [r3]
    8098:	2301      	movs	r3, #1
    809a:	f7ff f8a9 	bl	71f0 <_thumb32_LSRW_REG_T2>
    809e:	4603      	mov	r3, r0
    80a0:	4619      	mov	r1, r3
    80a2:	68f8      	ldr	r0, [r7, #12]
    80a4:	f012 fa2f 	bl	1a506 <emit4>
    emit4(state, _thumb32_ORRW_REG_T2(ARM_LR, ARM_LR, rd[0], 0, SRTYPE_LSL, FLAG_S));
    80a8:	693b      	ldr	r3, [r7, #16]
    80aa:	f993 2000 	ldrsb.w	r2, [r3]
    80ae:	2301      	movs	r3, #1
    80b0:	9301      	str	r3, [sp, #4]
    80b2:	2300      	movs	r3, #0
    80b4:	9300      	str	r3, [sp, #0]
    80b6:	2300      	movs	r3, #0
    80b8:	210e      	movs	r1, #14
    80ba:	200e      	movs	r0, #14
    80bc:	f012 f9b2 	bl	1a424 <_thumb32_ORRW_REG_T2>
    80c0:	4603      	mov	r3, r0
    80c2:	4619      	mov	r1, r3
    80c4:	68f8      	ldr	r0, [r7, #12]
    80c6:	f012 fa1e 	bl	1a506 <emit4>
    // emit(ARM_MOV_SR(ARM_IP, rd[0], SRTYPE_LSR, rt), ctx);
    emit4(state, _thumb32_LSRW_REG_T2(ARM_IP, rd[0], rt, FLAG_S));
    80ca:	693b      	ldr	r3, [r7, #16]
    80cc:	f993 1000 	ldrsb.w	r1, [r3]
    80d0:	f997 2017 	ldrsb.w	r2, [r7, #23]
    80d4:	2301      	movs	r3, #1
    80d6:	200c      	movs	r0, #12
    80d8:	f7ff f88a 	bl	71f0 <_thumb32_LSRW_REG_T2>
    80dc:	4603      	mov	r3, r0
    80de:	4619      	mov	r1, r3
    80e0:	68f8      	ldr	r0, [r7, #12]
    80e2:	f012 fa10 	bl	1a506 <emit4>

    arm_bpf_put_reg32(state, dst_lo, ARM_LR);
    80e6:	68bb      	ldr	r3, [r7, #8]
    80e8:	3301      	adds	r3, #1
    80ea:	f993 3000 	ldrsb.w	r3, [r3]
    80ee:	220e      	movs	r2, #14
    80f0:	4619      	mov	r1, r3
    80f2:	68f8      	ldr	r0, [r7, #12]
    80f4:	f012 fa4f 	bl	1a596 <arm_bpf_put_reg32>
    arm_bpf_put_reg32(state, dst_hi, ARM_IP);
    80f8:	68bb      	ldr	r3, [r7, #8]
    80fa:	f993 3000 	ldrsb.w	r3, [r3]
    80fe:	220c      	movs	r2, #12
    8100:	4619      	mov	r1, r3
    8102:	68f8      	ldr	r0, [r7, #12]
    8104:	f012 fa47 	bl	1a596 <arm_bpf_put_reg32>
}
    8108:	bf00      	nop
    810a:	3720      	adds	r7, #32
    810c:	46bd      	mov	sp, r7
    810e:	bd80      	pop	{r7, pc}
    8110:	0002e9ec 	.word	0x0002e9ec
    8114:	0002e9ee 	.word	0x0002e9ee

00008118 <emit_a32_rsh_i64>:

static inline void emit_a32_rsh_i64(jit_state *state, const s8 dst[], const u16 val) {
    8118:	b590      	push	{r4, r7, lr}
    811a:	b08b      	sub	sp, #44	; 0x2c
    811c:	af02      	add	r7, sp, #8
    811e:	60f8      	str	r0, [r7, #12]
    8120:	60b9      	str	r1, [r7, #8]
    8122:	4613      	mov	r3, r2
    8124:	80fb      	strh	r3, [r7, #6]
    const s8 *tmp = bpf2a32[TMP_REG_1];
    8126:	4b43      	ldr	r3, [pc, #268]	; (8234 <emit_a32_rsh_i64+0x11c>)
    8128:	61fb      	str	r3, [r7, #28]
    const s8 *tmp2 = bpf2a32[TMP_REG_2];
    812a:	4b43      	ldr	r3, [pc, #268]	; (8238 <emit_a32_rsh_i64+0x120>)
    812c:	61bb      	str	r3, [r7, #24]
    const s8 *rd;

    /* Setup operands */
    rd = arm_bpf_get_reg64(state, dst, tmp);
    812e:	69fa      	ldr	r2, [r7, #28]
    8130:	68b9      	ldr	r1, [r7, #8]
    8132:	68f8      	ldr	r0, [r7, #12]
    8134:	f012 fa5d 	bl	1a5f2 <arm_bpf_get_reg64>
    8138:	6178      	str	r0, [r7, #20]

    /* Do LSR operation */
    if (val == 0) {
    813a:	88fb      	ldrh	r3, [r7, #6]
    813c:	2b00      	cmp	r3, #0
    813e:	d070      	beq.n	8222 <emit_a32_rsh_i64+0x10a>
        /* An immediate value of 0 encodes a shift amount of 32
            * for LSR. To shift by 0, don't do anything.
            */
    } else if (val < 32) {
    8140:	88fb      	ldrh	r3, [r7, #6]
    8142:	2b1f      	cmp	r3, #31
    8144:	d83a      	bhi.n	81bc <emit_a32_rsh_i64+0xa4>
        // emit(ARM_MOV_SI(tmp2[1], rd[1], SRTYPE_LSR, val), ctx);
        emit4(state, _thumb32_LSRW_IMM_T2(tmp2[1], rd[1], val, FLAG_NOS));
    8146:	69bb      	ldr	r3, [r7, #24]
    8148:	3301      	adds	r3, #1
    814a:	f993 0000 	ldrsb.w	r0, [r3]
    814e:	697b      	ldr	r3, [r7, #20]
    8150:	3301      	adds	r3, #1
    8152:	f993 1000 	ldrsb.w	r1, [r3]
    8156:	88fa      	ldrh	r2, [r7, #6]
    8158:	2300      	movs	r3, #0
    815a:	f7ff f86f 	bl	723c <_thumb32_LSRW_IMM_T2>
    815e:	4603      	mov	r3, r0
    8160:	4619      	mov	r1, r3
    8162:	68f8      	ldr	r0, [r7, #12]
    8164:	f012 f9cf 	bl	1a506 <emit4>

        // emit(ARM_ORR_SI(rd[1], tmp2[1], rd[0], SRTYPE_ASL, 32 - val), ctx);
        emit4(state, _thumb32_ORRW_REG_T2(rd[1], tmp2[1], rd[0], 32 - val, SRTYPE_LSL, FLAG_NOS));
    8168:	697b      	ldr	r3, [r7, #20]
    816a:	3301      	adds	r3, #1
    816c:	f993 0000 	ldrsb.w	r0, [r3]
    8170:	69bb      	ldr	r3, [r7, #24]
    8172:	3301      	adds	r3, #1
    8174:	f993 1000 	ldrsb.w	r1, [r3]
    8178:	697b      	ldr	r3, [r7, #20]
    817a:	f993 2000 	ldrsb.w	r2, [r3]
    817e:	88fb      	ldrh	r3, [r7, #6]
    8180:	f1c3 0420 	rsb	r4, r3, #32
    8184:	2300      	movs	r3, #0
    8186:	9301      	str	r3, [sp, #4]
    8188:	2300      	movs	r3, #0
    818a:	9300      	str	r3, [sp, #0]
    818c:	4623      	mov	r3, r4
    818e:	f012 f949 	bl	1a424 <_thumb32_ORRW_REG_T2>
    8192:	4603      	mov	r3, r0
    8194:	4619      	mov	r1, r3
    8196:	68f8      	ldr	r0, [r7, #12]
    8198:	f012 f9b5 	bl	1a506 <emit4>

        // emit(ARM_MOV_SI(rd[0], rd[0], SRTYPE_LSR, val), ctx);
        emit4(state, _thumb32_LSRW_IMM_T2(rd[0], rd[0], val, FLAG_NOS));
    819c:	697b      	ldr	r3, [r7, #20]
    819e:	f993 0000 	ldrsb.w	r0, [r3]
    81a2:	697b      	ldr	r3, [r7, #20]
    81a4:	f993 1000 	ldrsb.w	r1, [r3]
    81a8:	88fa      	ldrh	r2, [r7, #6]
    81aa:	2300      	movs	r3, #0
    81ac:	f7ff f846 	bl	723c <_thumb32_LSRW_IMM_T2>
    81b0:	4603      	mov	r3, r0
    81b2:	4619      	mov	r1, r3
    81b4:	68f8      	ldr	r0, [r7, #12]
    81b6:	f012 f9a6 	bl	1a506 <emit4>
    81ba:	e032      	b.n	8222 <emit_a32_rsh_i64+0x10a>
    } else if (val == 32) {
    81bc:	88fb      	ldrh	r3, [r7, #6]
    81be:	2b20      	cmp	r3, #32
    81c0:	d114      	bne.n	81ec <emit_a32_rsh_i64+0xd4>
        // emit(ARM_MOV_R(rd[1], rd[0]), ctx);
		// emit(ARM_MOV_I(rd[0], 0), ctx);
        _emit_mov_reg(state, rd[0], rd[1]);
    81c2:	697b      	ldr	r3, [r7, #20]
    81c4:	f993 1000 	ldrsb.w	r1, [r3]
    81c8:	697b      	ldr	r3, [r7, #20]
    81ca:	3301      	adds	r3, #1
    81cc:	f993 3000 	ldrsb.w	r3, [r3]
    81d0:	461a      	mov	r2, r3
    81d2:	68f8      	ldr	r0, [r7, #12]
    81d4:	f012 ff02 	bl	1afdc <_emit_mov_reg>
        emit_mov_imm(state, rd[0], 0);
    81d8:	697b      	ldr	r3, [r7, #20]
    81da:	f993 3000 	ldrsb.w	r3, [r3]
    81de:	b2db      	uxtb	r3, r3
    81e0:	2200      	movs	r2, #0
    81e2:	4619      	mov	r1, r3
    81e4:	68f8      	ldr	r0, [r7, #12]
    81e6:	f012 fe73 	bl	1aed0 <emit_mov_imm>
    81ea:	e01a      	b.n	8222 <emit_a32_rsh_i64+0x10a>
    } else {
        // emit(ARM_MOV_SI(rd[1], rd[0], SRTYPE_LSR, val - 32), ctx);
        emit4(state, _thumb32_LSRW_IMM_T2(rd[1], rd[0], val - 32, FLAG_NOS));
    81ec:	697b      	ldr	r3, [r7, #20]
    81ee:	3301      	adds	r3, #1
    81f0:	f993 0000 	ldrsb.w	r0, [r3]
    81f4:	697b      	ldr	r3, [r7, #20]
    81f6:	f993 1000 	ldrsb.w	r1, [r3]
    81fa:	88fb      	ldrh	r3, [r7, #6]
    81fc:	f1a3 0220 	sub.w	r2, r3, #32
    8200:	2300      	movs	r3, #0
    8202:	f7ff f81b 	bl	723c <_thumb32_LSRW_IMM_T2>
    8206:	4603      	mov	r3, r0
    8208:	4619      	mov	r1, r3
    820a:	68f8      	ldr	r0, [r7, #12]
    820c:	f012 f97b 	bl	1a506 <emit4>

        // emit(ARM_MOV_I(rd[0], 0), ctx);
        emit_mov_imm(state, rd[0], 0);
    8210:	697b      	ldr	r3, [r7, #20]
    8212:	f993 3000 	ldrsb.w	r3, [r3]
    8216:	b2db      	uxtb	r3, r3
    8218:	2200      	movs	r2, #0
    821a:	4619      	mov	r1, r3
    821c:	68f8      	ldr	r0, [r7, #12]
    821e:	f012 fe57 	bl	1aed0 <emit_mov_imm>
    }

    // DEBUG_LOG("arm_bpf_put_reg64 r64_imm: %d %d\n", dst_lo, rd[0]);
    arm_bpf_put_reg64(state, dst, rd);
    8222:	697a      	ldr	r2, [r7, #20]
    8224:	68b9      	ldr	r1, [r7, #8]
    8226:	68f8      	ldr	r0, [r7, #12]
    8228:	f012 fa06 	bl	1a638 <arm_bpf_put_reg64>
}
    822c:	bf00      	nop
    822e:	3724      	adds	r7, #36	; 0x24
    8230:	46bd      	mov	sp, r7
    8232:	bd90      	pop	{r4, r7, pc}
    8234:	0002e9ec 	.word	0x0002e9ec
    8238:	0002e9ee 	.word	0x0002e9ee

0000823c <emit_a32_arsh_r64>:


static inline void emit_a32_arsh_r64(jit_state *state, const s8 dst[], const s8 src[]) {
    823c:	b580      	push	{r7, lr}
    823e:	b08a      	sub	sp, #40	; 0x28
    8240:	af02      	add	r7, sp, #8
    8242:	60f8      	str	r0, [r7, #12]
    8244:	60b9      	str	r1, [r7, #8]
    8246:	607a      	str	r2, [r7, #4]
    const s8 *tmp = bpf2a32[TMP_REG_1];
    8248:	4b58      	ldr	r3, [pc, #352]	; (83ac <emit_a32_arsh_r64+0x170>)
    824a:	61fb      	str	r3, [r7, #28]
    const s8 *tmp2 = bpf2a32[TMP_REG_2];
    824c:	4b58      	ldr	r3, [pc, #352]	; (83b0 <emit_a32_arsh_r64+0x174>)
    824e:	61bb      	str	r3, [r7, #24]
    const s8 *rd;
    s8 rt;

    /* Setup Operands */
    rt = arm_bpf_get_reg32(state, src_lo, tmp2[1]);
    8250:	687b      	ldr	r3, [r7, #4]
    8252:	3301      	adds	r3, #1
    8254:	f993 1000 	ldrsb.w	r1, [r3]
    8258:	69bb      	ldr	r3, [r7, #24]
    825a:	3301      	adds	r3, #1
    825c:	f993 3000 	ldrsb.w	r3, [r3]
    8260:	461a      	mov	r2, r3
    8262:	68f8      	ldr	r0, [r7, #12]
    8264:	f012 f974 	bl	1a550 <arm_bpf_get_reg32>
    8268:	4603      	mov	r3, r0
    826a:	75fb      	strb	r3, [r7, #23]
    rd = arm_bpf_get_reg64(state, dst, tmp);
    826c:	69fa      	ldr	r2, [r7, #28]
    826e:	68b9      	ldr	r1, [r7, #8]
    8270:	68f8      	ldr	r0, [r7, #12]
    8272:	f012 f9be 	bl	1a5f2 <arm_bpf_get_reg64>
    8276:	6138      	str	r0, [r7, #16]

    /* Do the ARSH operation */
    // emit(ARM_RSB_I(ARM_IP, rt, 32), ctx);
    emit4(state, _thumb32_RSBW_IMM_T2(ARM_IP, rt, 32, FLAG_S));
    8278:	f997 1017 	ldrsb.w	r1, [r7, #23]
    827c:	2301      	movs	r3, #1
    827e:	2220      	movs	r2, #32
    8280:	200c      	movs	r0, #12
    8282:	f011 fb86 	bl	19992 <_thumb32_RSBW_IMM_T2>
    8286:	4603      	mov	r3, r0
    8288:	4619      	mov	r1, r3
    828a:	68f8      	ldr	r0, [r7, #12]
    828c:	f012 f93b 	bl	1a506 <emit4>
	// emit(ARM_SUBS_I(tmp2[0], rt, 32), ctx);
    emit4(state, _thumb32_SUBW_IMM_T4(tmp2[0], rt, 32, FLAG_S));
    8290:	69bb      	ldr	r3, [r7, #24]
    8292:	f993 0000 	ldrsb.w	r0, [r3]
    8296:	f997 1017 	ldrsb.w	r1, [r7, #23]
    829a:	2301      	movs	r3, #1
    829c:	2220      	movs	r2, #32
    829e:	f011 fe5a 	bl	19f56 <_thumb32_SUBW_IMM_T4>
    82a2:	4603      	mov	r3, r0
    82a4:	4619      	mov	r1, r3
    82a6:	68f8      	ldr	r0, [r7, #12]
    82a8:	f012 f92d 	bl	1a506 <emit4>
	// emit(ARM_MOV_SR(ARM_LR, rd[1], SRTYPE_LSR, rt), ctx);
    emit4(state, _thumb32_LSRW_REG_T2(ARM_LR, rd[1], rt, FLAG_S));
    82ac:	693b      	ldr	r3, [r7, #16]
    82ae:	3301      	adds	r3, #1
    82b0:	f993 1000 	ldrsb.w	r1, [r3]
    82b4:	f997 2017 	ldrsb.w	r2, [r7, #23]
    82b8:	2301      	movs	r3, #1
    82ba:	200e      	movs	r0, #14
    82bc:	f7fe ff98 	bl	71f0 <_thumb32_LSRW_REG_T2>
    82c0:	4603      	mov	r3, r0
    82c2:	4619      	mov	r1, r3
    82c4:	68f8      	ldr	r0, [r7, #12]
    82c6:	f012 f91e 	bl	1a506 <emit4>

	// emit(ARM_ORR_SR(ARM_LR, ARM_LR, rd[0], SRTYPE_ASL, ARM_IP), ctx);
    emit4(state, _thumb32_LSLW_REG_T2(rd[0], rd[0], tmp2[0], FLAG_NOS));
    82ca:	693b      	ldr	r3, [r7, #16]
    82cc:	f993 0000 	ldrsb.w	r0, [r3]
    82d0:	693b      	ldr	r3, [r7, #16]
    82d2:	f993 1000 	ldrsb.w	r1, [r3]
    82d6:	69bb      	ldr	r3, [r7, #24]
    82d8:	f993 2000 	ldrsb.w	r2, [r3]
    82dc:	2300      	movs	r3, #0
    82de:	f012 f826 	bl	1a32e <_thumb32_LSLW_REG_T2>
    82e2:	4603      	mov	r3, r0
    82e4:	4619      	mov	r1, r3
    82e6:	68f8      	ldr	r0, [r7, #12]
    82e8:	f012 f90d 	bl	1a506 <emit4>
    emit4(state, _thumb32_ORRW_REG_T2(ARM_LR, ARM_LR, rd[0], 0, SRTYPE_LSL, FLAG_S));
    82ec:	693b      	ldr	r3, [r7, #16]
    82ee:	f993 2000 	ldrsb.w	r2, [r3]
    82f2:	2301      	movs	r3, #1
    82f4:	9301      	str	r3, [sp, #4]
    82f6:	2300      	movs	r3, #0
    82f8:	9300      	str	r3, [sp, #0]
    82fa:	2300      	movs	r3, #0
    82fc:	210e      	movs	r1, #14
    82fe:	200e      	movs	r0, #14
    8300:	f012 f890 	bl	1a424 <_thumb32_ORRW_REG_T2>
    8304:	4603      	mov	r3, r0
    8306:	4619      	mov	r1, r3
    8308:	68f8      	ldr	r0, [r7, #12]
    830a:	f012 f8fc 	bl	1a506 <emit4>

	// _emit(ARM_COND_PL, ARM_ORR_SR(ARM_LR, ARM_LR, rd[0], SRTYPE_ASR, tmp2[0]), ctx);
    emit4(state, _thumb32_ASRW_REG_T2(rd[0], rd[0], tmp2[0], FLAG_NOS));
    830e:	693b      	ldr	r3, [r7, #16]
    8310:	f993 0000 	ldrsb.w	r0, [r3]
    8314:	693b      	ldr	r3, [r7, #16]
    8316:	f993 1000 	ldrsb.w	r1, [r3]
    831a:	69bb      	ldr	r3, [r7, #24]
    831c:	f993 2000 	ldrsb.w	r2, [r3]
    8320:	2300      	movs	r3, #0
    8322:	f7fe ff3f 	bl	71a4 <_thumb32_ASRW_REG_T2>
    8326:	4603      	mov	r3, r0
    8328:	4619      	mov	r1, r3
    832a:	68f8      	ldr	r0, [r7, #12]
    832c:	f012 f8eb 	bl	1a506 <emit4>
    emit2(state, _thumb16_IT_T1(COND_PL, IT_MASK_NONE));
    8330:	2108      	movs	r1, #8
    8332:	2005      	movs	r0, #5
    8334:	f7fe fe30 	bl	6f98 <_thumb16_IT_T1>
    8338:	4603      	mov	r3, r0
    833a:	4619      	mov	r1, r3
    833c:	68f8      	ldr	r0, [r7, #12]
    833e:	f012 f8d2 	bl	1a4e6 <emit2>
    emit4(state, _thumb32_ORRW_REG_T2(ARM_LR, ARM_LR, rd[0], 0, SRTYPE_LSL, FLAG_S));
    8342:	693b      	ldr	r3, [r7, #16]
    8344:	f993 2000 	ldrsb.w	r2, [r3]
    8348:	2301      	movs	r3, #1
    834a:	9301      	str	r3, [sp, #4]
    834c:	2300      	movs	r3, #0
    834e:	9300      	str	r3, [sp, #0]
    8350:	2300      	movs	r3, #0
    8352:	210e      	movs	r1, #14
    8354:	200e      	movs	r0, #14
    8356:	f012 f865 	bl	1a424 <_thumb32_ORRW_REG_T2>
    835a:	4603      	mov	r3, r0
    835c:	4619      	mov	r1, r3
    835e:	68f8      	ldr	r0, [r7, #12]
    8360:	f012 f8d1 	bl	1a506 <emit4>

    // emit(ARM_MOV_SR(ARM_IP, rd[0], SRTYPE_ASR, rt), ctx);
    emit4(state, _thumb32_ASRW_REG_T2(ARM_IP, rd[0], rt, FLAG_S));
    8364:	693b      	ldr	r3, [r7, #16]
    8366:	f993 1000 	ldrsb.w	r1, [r3]
    836a:	f997 2017 	ldrsb.w	r2, [r7, #23]
    836e:	2301      	movs	r3, #1
    8370:	200c      	movs	r0, #12
    8372:	f7fe ff17 	bl	71a4 <_thumb32_ASRW_REG_T2>
    8376:	4603      	mov	r3, r0
    8378:	4619      	mov	r1, r3
    837a:	68f8      	ldr	r0, [r7, #12]
    837c:	f012 f8c3 	bl	1a506 <emit4>

    arm_bpf_put_reg32(state, dst_lo, ARM_LR);
    8380:	68bb      	ldr	r3, [r7, #8]
    8382:	3301      	adds	r3, #1
    8384:	f993 3000 	ldrsb.w	r3, [r3]
    8388:	220e      	movs	r2, #14
    838a:	4619      	mov	r1, r3
    838c:	68f8      	ldr	r0, [r7, #12]
    838e:	f012 f902 	bl	1a596 <arm_bpf_put_reg32>
    arm_bpf_put_reg32(state, dst_hi, ARM_IP);
    8392:	68bb      	ldr	r3, [r7, #8]
    8394:	f993 3000 	ldrsb.w	r3, [r3]
    8398:	220c      	movs	r2, #12
    839a:	4619      	mov	r1, r3
    839c:	68f8      	ldr	r0, [r7, #12]
    839e:	f012 f8fa 	bl	1a596 <arm_bpf_put_reg32>
}
    83a2:	bf00      	nop
    83a4:	3720      	adds	r7, #32
    83a6:	46bd      	mov	sp, r7
    83a8:	bd80      	pop	{r7, pc}
    83aa:	bf00      	nop
    83ac:	0002e9ec 	.word	0x0002e9ec
    83b0:	0002e9ee 	.word	0x0002e9ee

000083b4 <emit_a32_arsh_i64>:

/* dst = dst >> val (signed) */
static inline void emit_a32_arsh_i64(jit_state *state, const s8 dst[], const u32 val) {
    83b4:	b590      	push	{r4, r7, lr}
    83b6:	b08b      	sub	sp, #44	; 0x2c
    83b8:	af02      	add	r7, sp, #8
    83ba:	60f8      	str	r0, [r7, #12]
    83bc:	60b9      	str	r1, [r7, #8]
    83be:	607a      	str	r2, [r7, #4]
    const s8 *tmp = bpf2a32[TMP_REG_1];
    83c0:	4b49      	ldr	r3, [pc, #292]	; (84e8 <emit_a32_arsh_i64+0x134>)
    83c2:	61fb      	str	r3, [r7, #28]
    const s8 *tmp2 = bpf2a32[TMP_REG_2];
    83c4:	4b49      	ldr	r3, [pc, #292]	; (84ec <emit_a32_arsh_i64+0x138>)
    83c6:	61bb      	str	r3, [r7, #24]
    const s8 *rd;

    /* Setup operands */
    rd = arm_bpf_get_reg64(state, dst, tmp);
    83c8:	69fa      	ldr	r2, [r7, #28]
    83ca:	68b9      	ldr	r1, [r7, #8]
    83cc:	68f8      	ldr	r0, [r7, #12]
    83ce:	f012 f910 	bl	1a5f2 <arm_bpf_get_reg64>
    83d2:	6178      	str	r0, [r7, #20]

    /* Do ARSH operation */
    if (val == 0) {
    83d4:	687b      	ldr	r3, [r7, #4]
    83d6:	2b00      	cmp	r3, #0
    83d8:	d07d      	beq.n	84d6 <emit_a32_arsh_i64+0x122>
        /* An immediate value of 0 encodes a shift amount of 32
            * for ASR. To shift by 0, don't do anything.
            */
    } else if (val < 32) {
    83da:	687b      	ldr	r3, [r7, #4]
    83dc:	2b1f      	cmp	r3, #31
    83de:	d83b      	bhi.n	8458 <emit_a32_arsh_i64+0xa4>
        // emit(ARM_MOV_SI(tmp2[1], rd[1], SRTYPE_LSR, val), ctx);
        emit4(state, _thumb32_LSRW_IMM_T2(tmp2[1], rd[1], val, FLAG_S));
    83e0:	69bb      	ldr	r3, [r7, #24]
    83e2:	3301      	adds	r3, #1
    83e4:	f993 0000 	ldrsb.w	r0, [r3]
    83e8:	697b      	ldr	r3, [r7, #20]
    83ea:	3301      	adds	r3, #1
    83ec:	f993 1000 	ldrsb.w	r1, [r3]
    83f0:	687a      	ldr	r2, [r7, #4]
    83f2:	2301      	movs	r3, #1
    83f4:	f7fe ff22 	bl	723c <_thumb32_LSRW_IMM_T2>
    83f8:	4603      	mov	r3, r0
    83fa:	4619      	mov	r1, r3
    83fc:	68f8      	ldr	r0, [r7, #12]
    83fe:	f012 f882 	bl	1a506 <emit4>
        // emit(ARM_ORR_SI(rd[1], tmp2[1], rd[0], SRTYPE_ASL, 32 - val), ctx);
        emit4(state, _thumb32_ORRW_REG_T2(rd[1], tmp2[1], rd[0], 32 - val, SRTYPE_LSL, FLAG_S));
    8402:	697b      	ldr	r3, [r7, #20]
    8404:	3301      	adds	r3, #1
    8406:	f993 0000 	ldrsb.w	r0, [r3]
    840a:	69bb      	ldr	r3, [r7, #24]
    840c:	3301      	adds	r3, #1
    840e:	f993 1000 	ldrsb.w	r1, [r3]
    8412:	697b      	ldr	r3, [r7, #20]
    8414:	f993 2000 	ldrsb.w	r2, [r3]
    8418:	687b      	ldr	r3, [r7, #4]
    841a:	f1c3 0320 	rsb	r3, r3, #32
    841e:	461c      	mov	r4, r3
    8420:	2301      	movs	r3, #1
    8422:	9301      	str	r3, [sp, #4]
    8424:	2300      	movs	r3, #0
    8426:	9300      	str	r3, [sp, #0]
    8428:	4623      	mov	r3, r4
    842a:	f011 fffb 	bl	1a424 <_thumb32_ORRW_REG_T2>
    842e:	4603      	mov	r3, r0
    8430:	4619      	mov	r1, r3
    8432:	68f8      	ldr	r0, [r7, #12]
    8434:	f012 f867 	bl	1a506 <emit4>
        // emit(ARM_MOV_SI(rd[0], rd[0], SRTYPE_ASR, val), ctx);
        emit4(state, _thumb32_ASRW_IMM_T2(rd[0], rd[0], val, FLAG_S));
    8438:	697b      	ldr	r3, [r7, #20]
    843a:	f993 0000 	ldrsb.w	r0, [r3]
    843e:	697b      	ldr	r3, [r7, #20]
    8440:	f993 1000 	ldrsb.w	r1, [r3]
    8444:	687a      	ldr	r2, [r7, #4]
    8446:	2301      	movs	r3, #1
    8448:	f7fe fe7e 	bl	7148 <_thumb32_ASRW_IMM_T2>
    844c:	4603      	mov	r3, r0
    844e:	4619      	mov	r1, r3
    8450:	68f8      	ldr	r0, [r7, #12]
    8452:	f012 f858 	bl	1a506 <emit4>
    8456:	e03e      	b.n	84d6 <emit_a32_arsh_i64+0x122>
    } else if (val == 32) {
    8458:	687b      	ldr	r3, [r7, #4]
    845a:	2b20      	cmp	r3, #32
    845c:	d11a      	bne.n	8494 <emit_a32_arsh_i64+0xe0>
        // emit(ARM_MOV_R(rd[1], rd[0]), ctx);
        _emit_mov_reg(state, rd[0], rd[1]);
    845e:	697b      	ldr	r3, [r7, #20]
    8460:	f993 1000 	ldrsb.w	r1, [r3]
    8464:	697b      	ldr	r3, [r7, #20]
    8466:	3301      	adds	r3, #1
    8468:	f993 3000 	ldrsb.w	r3, [r3]
    846c:	461a      	mov	r2, r3
    846e:	68f8      	ldr	r0, [r7, #12]
    8470:	f012 fdb4 	bl	1afdc <_emit_mov_reg>
        // emit(ARM_MOV_SI(rd[0], rd[0], SRTYPE_ASR, 31), ctx);
        emit4(state, _thumb32_ASRW_IMM_T2(rd[0], rd[0], 31, FLAG_S));
    8474:	697b      	ldr	r3, [r7, #20]
    8476:	f993 0000 	ldrsb.w	r0, [r3]
    847a:	697b      	ldr	r3, [r7, #20]
    847c:	f993 1000 	ldrsb.w	r1, [r3]
    8480:	2301      	movs	r3, #1
    8482:	221f      	movs	r2, #31
    8484:	f7fe fe60 	bl	7148 <_thumb32_ASRW_IMM_T2>
    8488:	4603      	mov	r3, r0
    848a:	4619      	mov	r1, r3
    848c:	68f8      	ldr	r0, [r7, #12]
    848e:	f012 f83a 	bl	1a506 <emit4>
    8492:	e020      	b.n	84d6 <emit_a32_arsh_i64+0x122>
    } else {
        // emit(ARM_MOV_SI(rd[1], rd[0], SRTYPE_ASR, val - 32), ctx);
        emit4(state, _thumb32_ASRW_IMM_T2(rd[1], rd[0], val - 32, FLAG_S));
    8494:	697b      	ldr	r3, [r7, #20]
    8496:	3301      	adds	r3, #1
    8498:	f993 0000 	ldrsb.w	r0, [r3]
    849c:	697b      	ldr	r3, [r7, #20]
    849e:	f993 1000 	ldrsb.w	r1, [r3]
    84a2:	687b      	ldr	r3, [r7, #4]
    84a4:	3b20      	subs	r3, #32
    84a6:	461a      	mov	r2, r3
    84a8:	2301      	movs	r3, #1
    84aa:	f7fe fe4d 	bl	7148 <_thumb32_ASRW_IMM_T2>
    84ae:	4603      	mov	r3, r0
    84b0:	4619      	mov	r1, r3
    84b2:	68f8      	ldr	r0, [r7, #12]
    84b4:	f012 f827 	bl	1a506 <emit4>
        // emit(ARM_MOV_SI(rd[0], rd[0], SRTYPE_ASR, 31), ctx);
        emit4(state, _thumb32_ASRW_IMM_T2(rd[0], rd[0], 31, FLAG_S));
    84b8:	697b      	ldr	r3, [r7, #20]
    84ba:	f993 0000 	ldrsb.w	r0, [r3]
    84be:	697b      	ldr	r3, [r7, #20]
    84c0:	f993 1000 	ldrsb.w	r1, [r3]
    84c4:	2301      	movs	r3, #1
    84c6:	221f      	movs	r2, #31
    84c8:	f7fe fe3e 	bl	7148 <_thumb32_ASRW_IMM_T2>
    84cc:	4603      	mov	r3, r0
    84ce:	4619      	mov	r1, r3
    84d0:	68f8      	ldr	r0, [r7, #12]
    84d2:	f012 f818 	bl	1a506 <emit4>
    }

    arm_bpf_put_reg64(state, dst, rd);
    84d6:	697a      	ldr	r2, [r7, #20]
    84d8:	68b9      	ldr	r1, [r7, #8]
    84da:	68f8      	ldr	r0, [r7, #12]
    84dc:	f012 f8ac 	bl	1a638 <arm_bpf_put_reg64>
}
    84e0:	bf00      	nop
    84e2:	3724      	adds	r7, #36	; 0x24
    84e4:	46bd      	mov	sp, r7
    84e6:	bd90      	pop	{r4, r7, pc}
    84e8:	0002e9ec 	.word	0x0002e9ec
    84ec:	0002e9ee 	.word	0x0002e9ee

000084f0 <emit_a32_neg64>:

/* dst = ~dst (64 bit) */
static inline void emit_a32_neg64(jit_state *state, const s8 dst[]){
    84f0:	b580      	push	{r7, lr}
    84f2:	b084      	sub	sp, #16
    84f4:	af00      	add	r7, sp, #0
    84f6:	6078      	str	r0, [r7, #4]
    84f8:	6039      	str	r1, [r7, #0]
    const s8 *tmp = bpf2a32[TMP_REG_1];
    84fa:	4b18      	ldr	r3, [pc, #96]	; (855c <emit_a32_neg64+0x6c>)
    84fc:	60fb      	str	r3, [r7, #12]
    const s8 *rd;

    /* Setup Operand */
    rd = arm_bpf_get_reg64(state, dst, tmp);
    84fe:	68fa      	ldr	r2, [r7, #12]
    8500:	6839      	ldr	r1, [r7, #0]
    8502:	6878      	ldr	r0, [r7, #4]
    8504:	f012 f875 	bl	1a5f2 <arm_bpf_get_reg64>
    8508:	60b8      	str	r0, [r7, #8]

    /* Do Negate Operation */
    // emit(ARM_RSBS_I(rd[1], rd[1], 0), ctx);
    emit4(state, _thumb32_RSBW_IMM_T2(rd[1], rd[1], 0, FLAG_S));
    850a:	68bb      	ldr	r3, [r7, #8]
    850c:	3301      	adds	r3, #1
    850e:	f993 0000 	ldrsb.w	r0, [r3]
    8512:	68bb      	ldr	r3, [r7, #8]
    8514:	3301      	adds	r3, #1
    8516:	f993 1000 	ldrsb.w	r1, [r3]
    851a:	2301      	movs	r3, #1
    851c:	2200      	movs	r2, #0
    851e:	f011 fa38 	bl	19992 <_thumb32_RSBW_IMM_T2>
    8522:	4603      	mov	r3, r0
    8524:	4619      	mov	r1, r3
    8526:	6878      	ldr	r0, [r7, #4]
    8528:	f011 ffed 	bl	1a506 <emit4>

    // emit(ARM_RSC_I(rd[0], rd[0], 0), ctx);
    emit4(state, _thumb32_RSBW_IMM_T2(rd[0], rd[0], 0, FLAG_S));
    852c:	68bb      	ldr	r3, [r7, #8]
    852e:	f993 0000 	ldrsb.w	r0, [r3]
    8532:	68bb      	ldr	r3, [r7, #8]
    8534:	f993 1000 	ldrsb.w	r1, [r3]
    8538:	2301      	movs	r3, #1
    853a:	2200      	movs	r2, #0
    853c:	f011 fa29 	bl	19992 <_thumb32_RSBW_IMM_T2>
    8540:	4603      	mov	r3, r0
    8542:	4619      	mov	r1, r3
    8544:	6878      	ldr	r0, [r7, #4]
    8546:	f011 ffde 	bl	1a506 <emit4>

    arm_bpf_put_reg64(state, dst, rd);
    854a:	68ba      	ldr	r2, [r7, #8]
    854c:	6839      	ldr	r1, [r7, #0]
    854e:	6878      	ldr	r0, [r7, #4]
    8550:	f012 f872 	bl	1a638 <arm_bpf_put_reg64>
}
    8554:	bf00      	nop
    8556:	3710      	adds	r7, #16
    8558:	46bd      	mov	sp, r7
    855a:	bd80      	pop	{r7, pc}
    855c:	0002e9ec 	.word	0x0002e9ec

00008560 <emit_a32_mul_r64>:

static inline void emit_a32_mul_r64(jit_state *state, const s8 dst[], const s8 src[]) {
    8560:	b580      	push	{r7, lr}
    8562:	b088      	sub	sp, #32
    8564:	af00      	add	r7, sp, #0
    8566:	60f8      	str	r0, [r7, #12]
    8568:	60b9      	str	r1, [r7, #8]
    856a:	607a      	str	r2, [r7, #4]
	const s8 *tmp = bpf2a32[TMP_REG_1];
    856c:	4b37      	ldr	r3, [pc, #220]	; (864c <emit_a32_mul_r64+0xec>)
    856e:	61fb      	str	r3, [r7, #28]
	const s8 *tmp2 = bpf2a32[TMP_REG_2];
    8570:	4b37      	ldr	r3, [pc, #220]	; (8650 <emit_a32_mul_r64+0xf0>)
    8572:	61bb      	str	r3, [r7, #24]
	const s8 *rd, *rt;

	/* Setup operands for multiplication */
	rd = arm_bpf_get_reg64(state, dst, tmp);
    8574:	69fa      	ldr	r2, [r7, #28]
    8576:	68b9      	ldr	r1, [r7, #8]
    8578:	68f8      	ldr	r0, [r7, #12]
    857a:	f012 f83a 	bl	1a5f2 <arm_bpf_get_reg64>
    857e:	6178      	str	r0, [r7, #20]
	rt = arm_bpf_get_reg64(state, src, tmp2);
    8580:	69ba      	ldr	r2, [r7, #24]
    8582:	6879      	ldr	r1, [r7, #4]
    8584:	68f8      	ldr	r0, [r7, #12]
    8586:	f012 f834 	bl	1a5f2 <arm_bpf_get_reg64>
    858a:	6138      	str	r0, [r7, #16]

	/* Do Multiplication */
	// emit(ARM_MUL(ARM_IP, rd[1], rt[0]), ctx);
    emit4(state, _thumb32_MUL_T2(ARM_IP, rd[1], rt[0]));
    858c:	697b      	ldr	r3, [r7, #20]
    858e:	3301      	adds	r3, #1
    8590:	f993 1000 	ldrsb.w	r1, [r3]
    8594:	693b      	ldr	r3, [r7, #16]
    8596:	f993 3000 	ldrsb.w	r3, [r3]
    859a:	461a      	mov	r2, r3
    859c:	200c      	movs	r0, #12
    859e:	f011 f9db 	bl	19958 <_thumb32_MUL_T2>
    85a2:	4603      	mov	r3, r0
    85a4:	4619      	mov	r1, r3
    85a6:	68f8      	ldr	r0, [r7, #12]
    85a8:	f011 ffad 	bl	1a506 <emit4>
	// emit(ARM_MUL(ARM_LR, rd[0], rt[1]), ctx);
    emit4(state, _thumb32_MUL_T2(ARM_LR, rd[0], rt[1]));
    85ac:	697b      	ldr	r3, [r7, #20]
    85ae:	f993 1000 	ldrsb.w	r1, [r3]
    85b2:	693b      	ldr	r3, [r7, #16]
    85b4:	3301      	adds	r3, #1
    85b6:	f993 3000 	ldrsb.w	r3, [r3]
    85ba:	461a      	mov	r2, r3
    85bc:	200e      	movs	r0, #14
    85be:	f011 f9cb 	bl	19958 <_thumb32_MUL_T2>
    85c2:	4603      	mov	r3, r0
    85c4:	4619      	mov	r1, r3
    85c6:	68f8      	ldr	r0, [r7, #12]
    85c8:	f011 ff9d 	bl	1a506 <emit4>
	// emit(ARM_ADD_R(ARM_LR, ARM_IP, ARM_LR), ctx);
    emit2(state, _thumb16_ADD_REG_T2(ARM_LR, ARM_IP));
    85cc:	210c      	movs	r1, #12
    85ce:	200e      	movs	r0, #14
    85d0:	f011 fb94 	bl	19cfc <_thumb16_ADD_REG_T2>
    85d4:	4603      	mov	r3, r0
    85d6:	4619      	mov	r1, r3
    85d8:	68f8      	ldr	r0, [r7, #12]
    85da:	f011 ff84 	bl	1a4e6 <emit2>

	// emit(ARM_UMULL(ARM_IP, rd[0], rd[1], rt[1]), ctx);
    emit4(state, _thumb32_UMULL_T2(ARM_IP, rd[0], rd[1], rt[1]));
    85de:	697b      	ldr	r3, [r7, #20]
    85e0:	f993 1000 	ldrsb.w	r1, [r3]
    85e4:	697b      	ldr	r3, [r7, #20]
    85e6:	3301      	adds	r3, #1
    85e8:	f993 2000 	ldrsb.w	r2, [r3]
    85ec:	693b      	ldr	r3, [r7, #16]
    85ee:	3301      	adds	r3, #1
    85f0:	f993 3000 	ldrsb.w	r3, [r3]
    85f4:	200c      	movs	r0, #12
    85f6:	f011 f988 	bl	1990a <_thumb32_UMULL_T2>
    85fa:	4603      	mov	r3, r0
    85fc:	4619      	mov	r1, r3
    85fe:	68f8      	ldr	r0, [r7, #12]
    8600:	f011 ff81 	bl	1a506 <emit4>

	// emit(ARM_ADD_R(rd[0], ARM_LR, rd[0]), ctx);
     emit2(state, _thumb16_ADD_REG_T2(rd[0], ARM_LR));
    8604:	697b      	ldr	r3, [r7, #20]
    8606:	f993 3000 	ldrsb.w	r3, [r3]
    860a:	210e      	movs	r1, #14
    860c:	4618      	mov	r0, r3
    860e:	f011 fb75 	bl	19cfc <_thumb16_ADD_REG_T2>
    8612:	4603      	mov	r3, r0
    8614:	4619      	mov	r1, r3
    8616:	68f8      	ldr	r0, [r7, #12]
    8618:	f011 ff65 	bl	1a4e6 <emit2>

	arm_bpf_put_reg32(state, dst_lo, ARM_IP);
    861c:	68bb      	ldr	r3, [r7, #8]
    861e:	3301      	adds	r3, #1
    8620:	f993 3000 	ldrsb.w	r3, [r3]
    8624:	220c      	movs	r2, #12
    8626:	4619      	mov	r1, r3
    8628:	68f8      	ldr	r0, [r7, #12]
    862a:	f011 ffb4 	bl	1a596 <arm_bpf_put_reg32>
	arm_bpf_put_reg32(state, dst_hi, rd[0]);
    862e:	68bb      	ldr	r3, [r7, #8]
    8630:	f993 1000 	ldrsb.w	r1, [r3]
    8634:	697b      	ldr	r3, [r7, #20]
    8636:	f993 3000 	ldrsb.w	r3, [r3]
    863a:	461a      	mov	r2, r3
    863c:	68f8      	ldr	r0, [r7, #12]
    863e:	f011 ffaa 	bl	1a596 <arm_bpf_put_reg32>
}
    8642:	bf00      	nop
    8644:	3720      	adds	r7, #32
    8646:	46bd      	mov	sp, r7
    8648:	bd80      	pop	{r7, pc}
    864a:	bf00      	nop
    864c:	0002e9ec 	.word	0x0002e9ec
    8650:	0002e9ee 	.word	0x0002e9ee

00008654 <emit_ldx_reg>:
}
#endif

/* dst = *(size*)(src + off) */
void emit_ldx_reg(jit_state *state, const s8 dst[], const s8 src, s16 off, const u8 sz) 
{
    8654:	b580      	push	{r7, lr}
    8656:	b08a      	sub	sp, #40	; 0x28
    8658:	af02      	add	r7, sp, #8
    865a:	60f8      	str	r0, [r7, #12]
    865c:	60b9      	str	r1, [r7, #8]
    865e:	4611      	mov	r1, r2
    8660:	461a      	mov	r2, r3
    8662:	460b      	mov	r3, r1
    8664:	71fb      	strb	r3, [r7, #7]
    8666:	4613      	mov	r3, r2
    8668:	80bb      	strh	r3, [r7, #4]
    const s8 *tmp = bpf2a32[TMP_REG_1];
    866a:	4b67      	ldr	r3, [pc, #412]	; (8808 <emit_ldx_reg+0x1b4>)
    866c:	61bb      	str	r3, [r7, #24]
    const s8 *rd = is_stacked(dst_lo) ? tmp : dst; //Rt
    866e:	68bb      	ldr	r3, [r7, #8]
    8670:	3301      	adds	r3, #1
    8672:	f993 3000 	ldrsb.w	r3, [r3]
    8676:	4618      	mov	r0, r3
    8678:	f011 ff5d 	bl	1a536 <is_stacked>
    867c:	4603      	mov	r3, r0
    867e:	2b00      	cmp	r3, #0
    8680:	d001      	beq.n	8686 <emit_ldx_reg+0x32>
    8682:	69bb      	ldr	r3, [r7, #24]
    8684:	e000      	b.n	8688 <emit_ldx_reg+0x34>
    8686:	68bb      	ldr	r3, [r7, #8]
    8688:	617b      	str	r3, [r7, #20]
    s8 rm = src; // Rn
    868a:	79fb      	ldrb	r3, [r7, #7]
    868c:	77fb      	strb	r3, [r7, #31]

    // 
    if (!is_ldst_imm(off, sz)) {
    868e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
    8692:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
    8696:	4611      	mov	r1, r2
    8698:	4618      	mov	r0, r3
    869a:	f7fe fe07 	bl	72ac <is_ldst_imm>
    869e:	4603      	mov	r3, r0
    86a0:	f083 0301 	eor.w	r3, r3, #1
    86a4:	b2db      	uxtb	r3, r3
    86a6:	2b00      	cmp	r3, #0
    86a8:	d01a      	beq.n	86e0 <emit_ldx_reg+0x8c>
        // emit_a32_mov_i(state, tmp[0], off);
        emit_mov_imm(state, tmp[0], off);
    86aa:	69bb      	ldr	r3, [r7, #24]
    86ac:	f993 3000 	ldrsb.w	r3, [r3]
    86b0:	b2db      	uxtb	r3, r3
    86b2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
    86b6:	4619      	mov	r1, r3
    86b8:	68f8      	ldr	r0, [r7, #12]
    86ba:	f012 fc09 	bl	1aed0 <emit_mov_imm>
        // emit(ARM_ADD_R(tmp[0], tmp[0], src), ctx);
        _emit_add_reg(state, tmp[0], src, false, false);
    86be:	69bb      	ldr	r3, [r7, #24]
    86c0:	f993 1000 	ldrsb.w	r1, [r3]
    86c4:	f997 2007 	ldrsb.w	r2, [r7, #7]
    86c8:	2300      	movs	r3, #0
    86ca:	9300      	str	r3, [sp, #0]
    86cc:	2300      	movs	r3, #0
    86ce:	68f8      	ldr	r0, [r7, #12]
    86d0:	f012 f935 	bl	1a93e <_emit_add_reg>
        rm = tmp[0];
    86d4:	69bb      	ldr	r3, [r7, #24]
    86d6:	781b      	ldrb	r3, [r3, #0]
    86d8:	77fb      	strb	r3, [r7, #31]
        off = 0;
    86da:	2300      	movs	r3, #0
    86dc:	80bb      	strh	r3, [r7, #4]
    86de:	e013      	b.n	8708 <emit_ldx_reg+0xb4>
    } else if (rd[1] == rm) {
    86e0:	697b      	ldr	r3, [r7, #20]
    86e2:	3301      	adds	r3, #1
    86e4:	f993 3000 	ldrsb.w	r3, [r3]
    86e8:	f997 201f 	ldrsb.w	r2, [r7, #31]
    86ec:	429a      	cmp	r2, r3
    86ee:	d10b      	bne.n	8708 <emit_ldx_reg+0xb4>
        emit_a32_mov_reg(state, rm, tmp[0]);
    86f0:	69bb      	ldr	r3, [r7, #24]
    86f2:	f993 2000 	ldrsb.w	r2, [r3]
    86f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
    86fa:	4619      	mov	r1, r3
    86fc:	68f8      	ldr	r0, [r7, #12]
    86fe:	f000 f94b 	bl	8998 <emit_a32_mov_reg>
        rm = tmp[0];
    8702:	69bb      	ldr	r3, [r7, #24]
    8704:	781b      	ldrb	r3, [r3, #0]
    8706:	77fb      	strb	r3, [r7, #31]
    }
    //const u16 ARM_LDR_I = 0x6800; // 0b011010
    // my_printf("emit_ldx size: %d\n", sz);
    u16 inst = 0;
    8708:	2300      	movs	r3, #0
    870a:	827b      	strh	r3, [r7, #18]
    switch (sz) {
    870c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    8710:	2b18      	cmp	r3, #24
    8712:	d870      	bhi.n	87f6 <emit_ldx_reg+0x1a2>
    8714:	a201      	add	r2, pc, #4	; (adr r2, 871c <emit_ldx_reg+0xc8>)
    8716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    871a:	bf00      	nop
    871c:	000087b1 	.word	0x000087b1
    8720:	000087f7 	.word	0x000087f7
    8724:	000087f7 	.word	0x000087f7
    8728:	000087f7 	.word	0x000087f7
    872c:	000087f7 	.word	0x000087f7
    8730:	000087f7 	.word	0x000087f7
    8734:	000087f7 	.word	0x000087f7
    8738:	000087f7 	.word	0x000087f7
    873c:	00008799 	.word	0x00008799
    8740:	000087f7 	.word	0x000087f7
    8744:	000087f7 	.word	0x000087f7
    8748:	000087f7 	.word	0x000087f7
    874c:	000087f7 	.word	0x000087f7
    8750:	000087f7 	.word	0x000087f7
    8754:	000087f7 	.word	0x000087f7
    8758:	000087f7 	.word	0x000087f7
    875c:	00008781 	.word	0x00008781
    8760:	000087f7 	.word	0x000087f7
    8764:	000087f7 	.word	0x000087f7
    8768:	000087f7 	.word	0x000087f7
    876c:	000087f7 	.word	0x000087f7
    8770:	000087f7 	.word	0x000087f7
    8774:	000087f7 	.word	0x000087f7
    8778:	000087f7 	.word	0x000087f7
    877c:	000087c9 	.word	0x000087c9
        case EBPF_SIZE_B:
            // DEBUG_LOG("_emit_ldrb_i: %d %d off=%d\n", rd[1], rm, off);
            _emit_ldrb_i(state, rd[1], rm, off);
    8780:	697b      	ldr	r3, [r7, #20]
    8782:	3301      	adds	r3, #1
    8784:	f993 1000 	ldrsb.w	r1, [r3]
    8788:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
    878c:	f997 201f 	ldrsb.w	r2, [r7, #31]
    8790:	68f8      	ldr	r0, [r7, #12]
    8792:	f011 ffd4 	bl	1a73e <_emit_ldrb_i>
            break;
    8796:	e02e      	b.n	87f6 <emit_ldx_reg+0x1a2>
        case EBPF_SIZE_H:
            _emit_ldrh_i(state, rd[1], rm, off);
    8798:	697b      	ldr	r3, [r7, #20]
    879a:	3301      	adds	r3, #1
    879c:	f993 1000 	ldrsb.w	r1, [r3]
    87a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
    87a4:	f997 201f 	ldrsb.w	r2, [r7, #31]
    87a8:	68f8      	ldr	r0, [r7, #12]
    87aa:	f7fe fe0d 	bl	73c8 <_emit_ldrh_i>
            break;
    87ae:	e022      	b.n	87f6 <emit_ldx_reg+0x1a2>
        case EBPF_SIZE_W: // A7-246
            // DEBUG_LOG("EBPF_SIZE_W %d %d\n", rd[1], rm);
            _emit_ldr_i(state, rd[1], rm, off);
    87b0:	697b      	ldr	r3, [r7, #20]
    87b2:	3301      	adds	r3, #1
    87b4:	f993 1000 	ldrsb.w	r1, [r3]
    87b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
    87bc:	f997 201f 	ldrsb.w	r2, [r7, #31]
    87c0:	68f8      	ldr	r0, [r7, #12]
    87c2:	f011 ff82 	bl	1a6ca <_emit_ldr_i>
            break;
    87c6:	e016      	b.n	87f6 <emit_ldx_reg+0x1a2>
        case EBPF_SIZE_DW:
            // emit(ARM_LDR_I(rd[1], rm, off), ctx);
		    // emit(ARM_LDR_I(rd[0], rm, off + 4), ctx);
            // DEBUG_LOG("EBPF_SIZE_DW: %d %d %d\n", rd[0], rd[1], rm);
            _emit_ldr_i(state, rd[1], rm, off);
    87c8:	697b      	ldr	r3, [r7, #20]
    87ca:	3301      	adds	r3, #1
    87cc:	f993 1000 	ldrsb.w	r1, [r3]
    87d0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
    87d4:	f997 201f 	ldrsb.w	r2, [r7, #31]
    87d8:	68f8      	ldr	r0, [r7, #12]
    87da:	f011 ff76 	bl	1a6ca <_emit_ldr_i>
            _emit_ldr_i(state, rd[0], rm, off + 4);
    87de:	697b      	ldr	r3, [r7, #20]
    87e0:	f993 1000 	ldrsb.w	r1, [r3]
    87e4:	88bb      	ldrh	r3, [r7, #4]
    87e6:	3304      	adds	r3, #4
    87e8:	b21b      	sxth	r3, r3
    87ea:	f997 201f 	ldrsb.w	r2, [r7, #31]
    87ee:	68f8      	ldr	r0, [r7, #12]
    87f0:	f011 ff6b 	bl	1a6ca <_emit_ldr_i>
            // _emit_ldrd_i(state, rd, rm, off);
            break;
    87f4:	bf00      	nop
    }
    arm_bpf_put_reg64(state, dst, rd);
    87f6:	697a      	ldr	r2, [r7, #20]
    87f8:	68b9      	ldr	r1, [r7, #8]
    87fa:	68f8      	ldr	r0, [r7, #12]
    87fc:	f011 ff1c 	bl	1a638 <arm_bpf_put_reg64>
}
    8800:	bf00      	nop
    8802:	3720      	adds	r7, #32
    8804:	46bd      	mov	sp, r7
    8806:	bd80      	pop	{r7, pc}
    8808:	0002e9ec 	.word	0x0002e9ec

0000880c <emit_str_reg>:

static void emit_str_reg(jit_state *state, const s8 dst, const s8 src[], s16 off, const u8 sz) {
    880c:	b580      	push	{r7, lr}
    880e:	b088      	sub	sp, #32
    8810:	af02      	add	r7, sp, #8
    8812:	60f8      	str	r0, [r7, #12]
    8814:	607a      	str	r2, [r7, #4]
    8816:	461a      	mov	r2, r3
    8818:	460b      	mov	r3, r1
    881a:	72fb      	strb	r3, [r7, #11]
    881c:	4613      	mov	r3, r2
    881e:	813b      	strh	r3, [r7, #8]
    const s8 *tmp = bpf2a32[TMP_REG_1];
    8820:	4b5c      	ldr	r3, [pc, #368]	; (8994 <emit_str_reg+0x188>)
    8822:	613b      	str	r3, [r7, #16]
    s8 rd = arm_bpf_get_reg32(state, dst, tmp[1]);
    8824:	693b      	ldr	r3, [r7, #16]
    8826:	3301      	adds	r3, #1
    8828:	f993 2000 	ldrsb.w	r2, [r3]
    882c:	f997 300b 	ldrsb.w	r3, [r7, #11]
    8830:	4619      	mov	r1, r3
    8832:	68f8      	ldr	r0, [r7, #12]
    8834:	f011 fe8c 	bl	1a550 <arm_bpf_get_reg32>
    8838:	4603      	mov	r3, r0
    883a:	75fb      	strb	r3, [r7, #23]

    if (!is_ldst_imm(off, sz)) {
    883c:	f897 2020 	ldrb.w	r2, [r7, #32]
    8840:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
    8844:	4611      	mov	r1, r2
    8846:	4618      	mov	r0, r3
    8848:	f7fe fd30 	bl	72ac <is_ldst_imm>
    884c:	4603      	mov	r3, r0
    884e:	f083 0301 	eor.w	r3, r3, #1
    8852:	b2db      	uxtb	r3, r3
    8854:	2b00      	cmp	r3, #0
    8856:	d019      	beq.n	888c <emit_str_reg+0x80>
        // emit_a32_mov_i(tmp[0], off, ctx);
        emit_mov_imm(state, tmp[0], off);
    8858:	693b      	ldr	r3, [r7, #16]
    885a:	f993 3000 	ldrsb.w	r3, [r3]
    885e:	b2db      	uxtb	r3, r3
    8860:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
    8864:	4619      	mov	r1, r3
    8866:	68f8      	ldr	r0, [r7, #12]
    8868:	f012 fb32 	bl	1aed0 <emit_mov_imm>
        // emit(ARM_ADD_R(tmp[0], tmp[0], rd), ctx);
        _emit_add_reg(state, tmp[0], rd, false, false);
    886c:	693b      	ldr	r3, [r7, #16]
    886e:	f993 1000 	ldrsb.w	r1, [r3]
    8872:	f997 2017 	ldrsb.w	r2, [r7, #23]
    8876:	2300      	movs	r3, #0
    8878:	9300      	str	r3, [sp, #0]
    887a:	2300      	movs	r3, #0
    887c:	68f8      	ldr	r0, [r7, #12]
    887e:	f012 f85e 	bl	1a93e <_emit_add_reg>
        rd = tmp[0];
    8882:	693b      	ldr	r3, [r7, #16]
    8884:	781b      	ldrb	r3, [r3, #0]
    8886:	75fb      	strb	r3, [r7, #23]
        off = 0;
    8888:	2300      	movs	r3, #0
    888a:	813b      	strh	r3, [r7, #8]
    }
    switch (sz) {
    888c:	f897 3020 	ldrb.w	r3, [r7, #32]
    8890:	2b18      	cmp	r3, #24
    8892:	d87a      	bhi.n	898a <emit_str_reg+0x17e>
    8894:	a201      	add	r2, pc, #4	; (adr r2, 889c <emit_str_reg+0x90>)
    8896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    889a:	bf00      	nop
    889c:	00008945 	.word	0x00008945
    88a0:	0000898b 	.word	0x0000898b
    88a4:	0000898b 	.word	0x0000898b
    88a8:	0000898b 	.word	0x0000898b
    88ac:	0000898b 	.word	0x0000898b
    88b0:	0000898b 	.word	0x0000898b
    88b4:	0000898b 	.word	0x0000898b
    88b8:	0000898b 	.word	0x0000898b
    88bc:	00008923 	.word	0x00008923
    88c0:	0000898b 	.word	0x0000898b
    88c4:	0000898b 	.word	0x0000898b
    88c8:	0000898b 	.word	0x0000898b
    88cc:	0000898b 	.word	0x0000898b
    88d0:	0000898b 	.word	0x0000898b
    88d4:	0000898b 	.word	0x0000898b
    88d8:	0000898b 	.word	0x0000898b
    88dc:	00008901 	.word	0x00008901
    88e0:	0000898b 	.word	0x0000898b
    88e4:	0000898b 	.word	0x0000898b
    88e8:	0000898b 	.word	0x0000898b
    88ec:	0000898b 	.word	0x0000898b
    88f0:	0000898b 	.word	0x0000898b
    88f4:	0000898b 	.word	0x0000898b
    88f8:	0000898b 	.word	0x0000898b
    88fc:	0000895d 	.word	0x0000895d
    case EBPF_SIZE_B:
        /* Store a Byte */
        // emit(ARM_STRB_I(src_lo, rd, off), ctx);
        emit4(state, _thumb32_STRB_IMM_T3(src_lo, rd, off));
    8900:	687b      	ldr	r3, [r7, #4]
    8902:	3301      	adds	r3, #1
    8904:	f993 3000 	ldrsb.w	r3, [r3]
    8908:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
    890c:	f997 1017 	ldrsb.w	r1, [r7, #23]
    8910:	4618      	mov	r0, r3
    8912:	f011 fc81 	bl	1a218 <_thumb32_STRB_IMM_T3>
    8916:	4603      	mov	r3, r0
    8918:	4619      	mov	r1, r3
    891a:	68f8      	ldr	r0, [r7, #12]
    891c:	f011 fdf3 	bl	1a506 <emit4>
        break;
    8920:	e033      	b.n	898a <emit_str_reg+0x17e>
    case EBPF_SIZE_H:
        /* Store a HalfWord */
        // emit(ARM_STRH_I(src_lo, rd, off), ctx);
        emit4(state, _thumb32_STRH_IMM_T3(src_lo, rd, off));
    8922:	687b      	ldr	r3, [r7, #4]
    8924:	3301      	adds	r3, #1
    8926:	f993 3000 	ldrsb.w	r3, [r3]
    892a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
    892e:	f997 1017 	ldrsb.w	r1, [r7, #23]
    8932:	4618      	mov	r0, r3
    8934:	f7fe fbc4 	bl	70c0 <_thumb32_STRH_IMM_T3>
    8938:	4603      	mov	r3, r0
    893a:	4619      	mov	r1, r3
    893c:	68f8      	ldr	r0, [r7, #12]
    893e:	f011 fde2 	bl	1a506 <emit4>
        break;
    8942:	e022      	b.n	898a <emit_str_reg+0x17e>
    case EBPF_SIZE_W:
        /* Store a Word */
        _emit_str_i(state, src_lo, rd, off);
    8944:	687b      	ldr	r3, [r7, #4]
    8946:	3301      	adds	r3, #1
    8948:	f993 1000 	ldrsb.w	r1, [r3]
    894c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
    8950:	f997 2017 	ldrsb.w	r2, [r7, #23]
    8954:	68f8      	ldr	r0, [r7, #12]
    8956:	f011 ff87 	bl	1a868 <_emit_str_i>
        break;
    895a:	e016      	b.n	898a <emit_str_reg+0x17e>
    case EBPF_SIZE_DW:
        /* Store a Double Word */
        // emit(ARM_STR_I(src_lo, rd, off), ctx);
        // emit(ARM_STR_I(src_hi, rd, off + 4), ctx);
        _emit_str_i(state, src_lo, rd, off);
    895c:	687b      	ldr	r3, [r7, #4]
    895e:	3301      	adds	r3, #1
    8960:	f993 1000 	ldrsb.w	r1, [r3]
    8964:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
    8968:	f997 2017 	ldrsb.w	r2, [r7, #23]
    896c:	68f8      	ldr	r0, [r7, #12]
    896e:	f011 ff7b 	bl	1a868 <_emit_str_i>
        _emit_str_i(state, src_hi, rd, off + 4);
    8972:	687b      	ldr	r3, [r7, #4]
    8974:	f993 1000 	ldrsb.w	r1, [r3]
    8978:	893b      	ldrh	r3, [r7, #8]
    897a:	3304      	adds	r3, #4
    897c:	b21b      	sxth	r3, r3
    897e:	f997 2017 	ldrsb.w	r2, [r7, #23]
    8982:	68f8      	ldr	r0, [r7, #12]
    8984:	f011 ff70 	bl	1a868 <_emit_str_i>
        break;
    8988:	bf00      	nop
    }
}
    898a:	bf00      	nop
    898c:	3718      	adds	r7, #24
    898e:	46bd      	mov	sp, r7
    8990:	bd80      	pop	{r7, pc}
    8992:	bf00      	nop
    8994:	0002e9ec 	.word	0x0002e9ec

00008998 <emit_a32_mov_reg>:
    }
   
    emit4(state, _thumb32_MOVW_REG_T3(dst, src, FLAG_NOS));
}

static void emit_a32_mov_reg(jit_state *state, s8 src, s8 dst) {
    8998:	b580      	push	{r7, lr}
    899a:	b084      	sub	sp, #16
    899c:	af00      	add	r7, sp, #0
    899e:	6078      	str	r0, [r7, #4]
    89a0:	460b      	mov	r3, r1
    89a2:	70fb      	strb	r3, [r7, #3]
    89a4:	4613      	mov	r3, r2
    89a6:	70bb      	strb	r3, [r7, #2]
    const s8 *tmp = bpf2a32[TMP_REG_1];
    89a8:	4b0c      	ldr	r3, [pc, #48]	; (89dc <emit_a32_mov_reg+0x44>)
    89aa:	60fb      	str	r3, [r7, #12]
	s8 rt = arm_bpf_get_reg32(state, src, tmp[0]);
    89ac:	68fb      	ldr	r3, [r7, #12]
    89ae:	f993 2000 	ldrsb.w	r2, [r3]
    89b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
    89b6:	4619      	mov	r1, r3
    89b8:	6878      	ldr	r0, [r7, #4]
    89ba:	f011 fdc9 	bl	1a550 <arm_bpf_get_reg32>
    89be:	4603      	mov	r3, r0
    89c0:	72fb      	strb	r3, [r7, #11]
	arm_bpf_put_reg32(state, dst, rt);
    89c2:	f997 200b 	ldrsb.w	r2, [r7, #11]
    89c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
    89ca:	4619      	mov	r1, r3
    89cc:	6878      	ldr	r0, [r7, #4]
    89ce:	f011 fde2 	bl	1a596 <arm_bpf_put_reg32>
    // my_printf("emit_mov_reg src:%d dst:%d\n", src, dst);
}
    89d2:	bf00      	nop
    89d4:	3710      	adds	r7, #16
    89d6:	46bd      	mov	sp, r7
    89d8:	bd80      	pop	{r7, pc}
    89da:	bf00      	nop
    89dc:	0002e9ec 	.word	0x0002e9ec

000089e0 <emit_mov_reg64>:

static void emit_mov_reg64(jit_state *state, const bool is64, const s8 dst[], const s8 src[]) {
    89e0:	b580      	push	{r7, lr}
    89e2:	b086      	sub	sp, #24
    89e4:	af00      	add	r7, sp, #0
    89e6:	60f8      	str	r0, [r7, #12]
    89e8:	607a      	str	r2, [r7, #4]
    89ea:	603b      	str	r3, [r7, #0]
    89ec:	460b      	mov	r3, r1
    89ee:	72fb      	strb	r3, [r7, #11]
    if (!is64) {
    89f0:	7afb      	ldrb	r3, [r7, #11]
    89f2:	f083 0301 	eor.w	r3, r3, #1
    89f6:	b2db      	uxtb	r3, r3
    89f8:	2b00      	cmp	r3, #0
    89fa:	d00c      	beq.n	8a16 <emit_mov_reg64+0x36>
        emit_a32_mov_reg(state, src_lo, dst_lo);
    89fc:	683b      	ldr	r3, [r7, #0]
    89fe:	3301      	adds	r3, #1
    8a00:	f993 1000 	ldrsb.w	r1, [r3]
    8a04:	687b      	ldr	r3, [r7, #4]
    8a06:	3301      	adds	r3, #1
    8a08:	f993 3000 	ldrsb.w	r3, [r3]
    8a0c:	461a      	mov	r2, r3
    8a0e:	68f8      	ldr	r0, [r7, #12]
    8a10:	f7ff ffc2 	bl	8998 <emit_a32_mov_reg>
    } else {
        // my_printf("emit_mov_reg64: %d %d\n", dst[0], src[0]);
        _emit_mov_reg(state, src[1], dst[1]);
        _emit_mov_reg(state, src[0], dst[0]);
    }
}
    8a14:	e06b      	b.n	8aee <emit_mov_reg64+0x10e>
    } else if (is_stacked(src_lo) && is_stacked(dst_lo)) {
    8a16:	683b      	ldr	r3, [r7, #0]
    8a18:	3301      	adds	r3, #1
    8a1a:	f993 3000 	ldrsb.w	r3, [r3]
    8a1e:	4618      	mov	r0, r3
    8a20:	f011 fd89 	bl	1a536 <is_stacked>
    8a24:	4603      	mov	r3, r0
    8a26:	2b00      	cmp	r3, #0
    8a28:	d021      	beq.n	8a6e <emit_mov_reg64+0x8e>
    8a2a:	687b      	ldr	r3, [r7, #4]
    8a2c:	3301      	adds	r3, #1
    8a2e:	f993 3000 	ldrsb.w	r3, [r3]
    8a32:	4618      	mov	r0, r3
    8a34:	f011 fd7f 	bl	1a536 <is_stacked>
    8a38:	4603      	mov	r3, r0
    8a3a:	2b00      	cmp	r3, #0
    8a3c:	d017      	beq.n	8a6e <emit_mov_reg64+0x8e>
        const u8 *tmp = bpf2a32[TMP_REG_1];
    8a3e:	4b2e      	ldr	r3, [pc, #184]	; (8af8 <emit_mov_reg64+0x118>)
    8a40:	617b      	str	r3, [r7, #20]
        _emit_ldrd_i(state, tmp, ARM_FP, EBPF_SCRATCH_TO_ARM_FP(src_lo));
    8a42:	683b      	ldr	r3, [r7, #0]
    8a44:	3301      	adds	r3, #1
    8a46:	f993 3000 	ldrsb.w	r3, [r3]
    8a4a:	b21b      	sxth	r3, r3
    8a4c:	220b      	movs	r2, #11
    8a4e:	6979      	ldr	r1, [r7, #20]
    8a50:	68f8      	ldr	r0, [r7, #12]
    8a52:	f011 feed 	bl	1a830 <_emit_ldrd_i>
        _emit_strd_i(state, tmp, ARM_FP, EBPF_SCRATCH_TO_ARM_FP(dst_lo));
    8a56:	687b      	ldr	r3, [r7, #4]
    8a58:	3301      	adds	r3, #1
    8a5a:	f993 3000 	ldrsb.w	r3, [r3]
    8a5e:	b21b      	sxth	r3, r3
    8a60:	220b      	movs	r2, #11
    8a62:	6979      	ldr	r1, [r7, #20]
    8a64:	68f8      	ldr	r0, [r7, #12]
    8a66:	f011 ff4e 	bl	1a906 <_emit_strd_i>
    } else if (is_stacked(src_lo) && is_stacked(dst_lo)) {
    8a6a:	bf00      	nop
}
    8a6c:	e03f      	b.n	8aee <emit_mov_reg64+0x10e>
    } else if (is_stacked(src_lo)) {
    8a6e:	683b      	ldr	r3, [r7, #0]
    8a70:	3301      	adds	r3, #1
    8a72:	f993 3000 	ldrsb.w	r3, [r3]
    8a76:	4618      	mov	r0, r3
    8a78:	f011 fd5d 	bl	1a536 <is_stacked>
    8a7c:	4603      	mov	r3, r0
    8a7e:	2b00      	cmp	r3, #0
    8a80:	d00a      	beq.n	8a98 <emit_mov_reg64+0xb8>
        _emit_ldrd_i(state, dst, ARM_FP, EBPF_SCRATCH_TO_ARM_FP(src_lo));
    8a82:	683b      	ldr	r3, [r7, #0]
    8a84:	3301      	adds	r3, #1
    8a86:	f993 3000 	ldrsb.w	r3, [r3]
    8a8a:	b21b      	sxth	r3, r3
    8a8c:	220b      	movs	r2, #11
    8a8e:	6879      	ldr	r1, [r7, #4]
    8a90:	68f8      	ldr	r0, [r7, #12]
    8a92:	f011 fecd 	bl	1a830 <_emit_ldrd_i>
}
    8a96:	e02a      	b.n	8aee <emit_mov_reg64+0x10e>
    }  else if (is_stacked(dst_lo)) {
    8a98:	687b      	ldr	r3, [r7, #4]
    8a9a:	3301      	adds	r3, #1
    8a9c:	f993 3000 	ldrsb.w	r3, [r3]
    8aa0:	4618      	mov	r0, r3
    8aa2:	f011 fd48 	bl	1a536 <is_stacked>
    8aa6:	4603      	mov	r3, r0
    8aa8:	2b00      	cmp	r3, #0
    8aaa:	d00a      	beq.n	8ac2 <emit_mov_reg64+0xe2>
        _emit_strd_i(state, src, ARM_FP, EBPF_SCRATCH_TO_ARM_FP(dst_lo));
    8aac:	687b      	ldr	r3, [r7, #4]
    8aae:	3301      	adds	r3, #1
    8ab0:	f993 3000 	ldrsb.w	r3, [r3]
    8ab4:	b21b      	sxth	r3, r3
    8ab6:	220b      	movs	r2, #11
    8ab8:	6839      	ldr	r1, [r7, #0]
    8aba:	68f8      	ldr	r0, [r7, #12]
    8abc:	f011 ff23 	bl	1a906 <_emit_strd_i>
}
    8ac0:	e015      	b.n	8aee <emit_mov_reg64+0x10e>
        _emit_mov_reg(state, src[1], dst[1]);
    8ac2:	683b      	ldr	r3, [r7, #0]
    8ac4:	3301      	adds	r3, #1
    8ac6:	f993 1000 	ldrsb.w	r1, [r3]
    8aca:	687b      	ldr	r3, [r7, #4]
    8acc:	3301      	adds	r3, #1
    8ace:	f993 3000 	ldrsb.w	r3, [r3]
    8ad2:	461a      	mov	r2, r3
    8ad4:	68f8      	ldr	r0, [r7, #12]
    8ad6:	f012 fa81 	bl	1afdc <_emit_mov_reg>
        _emit_mov_reg(state, src[0], dst[0]);
    8ada:	683b      	ldr	r3, [r7, #0]
    8adc:	f993 1000 	ldrsb.w	r1, [r3]
    8ae0:	687b      	ldr	r3, [r7, #4]
    8ae2:	f993 3000 	ldrsb.w	r3, [r3]
    8ae6:	461a      	mov	r2, r3
    8ae8:	68f8      	ldr	r0, [r7, #12]
    8aea:	f012 fa77 	bl	1afdc <_emit_mov_reg>
}
    8aee:	bf00      	nop
    8af0:	3718      	adds	r7, #24
    8af2:	46bd      	mov	sp, r7
    8af4:	bd80      	pop	{r7, pc}
    8af6:	bf00      	nop
    8af8:	0002e9ec 	.word	0x0002e9ec

00008afc <emit_push_r64>:

static void emit_push_r64(jit_state *state, s8 src[]) {
    8afc:	b580      	push	{r7, lr}
    8afe:	b086      	sub	sp, #24
    8b00:	af00      	add	r7, sp, #0
    8b02:	6078      	str	r0, [r7, #4]
    8b04:	6039      	str	r1, [r7, #0]
    const s8 *tmp2 = bpf2a32[TMP_REG_2];
    8b06:	4b24      	ldr	r3, [pc, #144]	; (8b98 <emit_push_r64+0x9c>)
    8b08:	617b      	str	r3, [r7, #20]
    const s8 *rt;
    u16 reg_set = 0;
    8b0a:	2300      	movs	r3, #0
    8b0c:	827b      	strh	r3, [r7, #18]

    rt = arm_bpf_get_reg64(state, src, tmp2);
    8b0e:	697a      	ldr	r2, [r7, #20]
    8b10:	6839      	ldr	r1, [r7, #0]
    8b12:	6878      	ldr	r0, [r7, #4]
    8b14:	f011 fd6d 	bl	1a5f2 <arm_bpf_get_reg64>
    8b18:	60f8      	str	r0, [r7, #12]
    // DEBUG_LOG("emit_push_r64: %d %d\n", rt[0], rt[1]);
    reg_set = (1 << rt[1]) | (1 << rt[0]);
    8b1a:	68fb      	ldr	r3, [r7, #12]
    8b1c:	3301      	adds	r3, #1
    8b1e:	f993 3000 	ldrsb.w	r3, [r3]
    8b22:	461a      	mov	r2, r3
    8b24:	2301      	movs	r3, #1
    8b26:	4093      	lsls	r3, r2
    8b28:	b21a      	sxth	r2, r3
    8b2a:	68fb      	ldr	r3, [r7, #12]
    8b2c:	f993 3000 	ldrsb.w	r3, [r3]
    8b30:	4619      	mov	r1, r3
    8b32:	2301      	movs	r3, #1
    8b34:	408b      	lsls	r3, r1
    8b36:	b21b      	sxth	r3, r3
    8b38:	4313      	orrs	r3, r2
    8b3a:	b21b      	sxth	r3, r3
    8b3c:	827b      	strh	r3, [r7, #18]
    if ((rt[0] == ARM_LR || rt[0] < 8) && (rt[1] == ARM_LR || rt[1] < 8)) {
    8b3e:	68fb      	ldr	r3, [r7, #12]
    8b40:	f993 3000 	ldrsb.w	r3, [r3]
    8b44:	2b0e      	cmp	r3, #14
    8b46:	d004      	beq.n	8b52 <emit_push_r64+0x56>
    8b48:	68fb      	ldr	r3, [r7, #12]
    8b4a:	f993 3000 	ldrsb.w	r3, [r3]
    8b4e:	2b07      	cmp	r3, #7
    8b50:	dc15      	bgt.n	8b7e <emit_push_r64+0x82>
    8b52:	68fb      	ldr	r3, [r7, #12]
    8b54:	3301      	adds	r3, #1
    8b56:	f993 3000 	ldrsb.w	r3, [r3]
    8b5a:	2b0e      	cmp	r3, #14
    8b5c:	d005      	beq.n	8b6a <emit_push_r64+0x6e>
    8b5e:	68fb      	ldr	r3, [r7, #12]
    8b60:	3301      	adds	r3, #1
    8b62:	f993 3000 	ldrsb.w	r3, [r3]
    8b66:	2b07      	cmp	r3, #7
    8b68:	dc09      	bgt.n	8b7e <emit_push_r64+0x82>
        emit2(state, _thumb16_PUSH_T1(reg_set));
    8b6a:	8a7b      	ldrh	r3, [r7, #18]
    8b6c:	4618      	mov	r0, r3
    8b6e:	f7fe fa4b 	bl	7008 <_thumb16_PUSH_T1>
    8b72:	4603      	mov	r3, r0
    8b74:	4619      	mov	r1, r3
    8b76:	6878      	ldr	r0, [r7, #4]
    8b78:	f011 fcb5 	bl	1a4e6 <emit2>
    8b7c:	e008      	b.n	8b90 <emit_push_r64+0x94>
    } else {
        emit4(state, _thumb32_PUSHW_T2(reg_set));
    8b7e:	8a7b      	ldrh	r3, [r7, #18]
    8b80:	4618      	mov	r0, r3
    8b82:	f011 fa6c 	bl	1a05e <_thumb32_PUSHW_T2>
    8b86:	4603      	mov	r3, r0
    8b88:	4619      	mov	r1, r3
    8b8a:	6878      	ldr	r0, [r7, #4]
    8b8c:	f011 fcbb 	bl	1a506 <emit4>
    }
}
    8b90:	bf00      	nop
    8b92:	3718      	adds	r7, #24
    8b94:	46bd      	mov	sp, r7
    8b96:	bd80      	pop	{r7, pc}
    8b98:	0002e9ee 	.word	0x0002e9ee

00008b9c <emit_mov_i64>:

static void emit_mov_i64(jit_state *state, const s8 dst[], u64 val)
{
    8b9c:	b590      	push	{r4, r7, lr}
    8b9e:	b087      	sub	sp, #28
    8ba0:	af00      	add	r7, sp, #0
    8ba2:	60f8      	str	r0, [r7, #12]
    8ba4:	60b9      	str	r1, [r7, #8]
    8ba6:	e9c7 2300 	strd	r2, r3, [r7]
    const s8 *tmp = bpf2a32[TMP_REG_1];
    8baa:	4b1a      	ldr	r3, [pc, #104]	; (8c14 <emit_mov_i64+0x78>)
    8bac:	617b      	str	r3, [r7, #20]
    const s8 *rd = is_stacked(dst_lo) ? tmp : dst;
    8bae:	68bb      	ldr	r3, [r7, #8]
    8bb0:	3301      	adds	r3, #1
    8bb2:	f993 3000 	ldrsb.w	r3, [r3]
    8bb6:	4618      	mov	r0, r3
    8bb8:	f011 fcbd 	bl	1a536 <is_stacked>
    8bbc:	4603      	mov	r3, r0
    8bbe:	2b00      	cmp	r3, #0
    8bc0:	d001      	beq.n	8bc6 <emit_mov_i64+0x2a>
    8bc2:	697b      	ldr	r3, [r7, #20]
    8bc4:	e000      	b.n	8bc8 <emit_mov_i64+0x2c>
    8bc6:	68bb      	ldr	r3, [r7, #8]
    8bc8:	613b      	str	r3, [r7, #16]
   
    emit_mov_imm(state, rd[1], (u32)val);
    8bca:	693b      	ldr	r3, [r7, #16]
    8bcc:	3301      	adds	r3, #1
    8bce:	f993 3000 	ldrsb.w	r3, [r3]
    8bd2:	b2db      	uxtb	r3, r3
    8bd4:	683a      	ldr	r2, [r7, #0]
    8bd6:	4619      	mov	r1, r3
    8bd8:	68f8      	ldr	r0, [r7, #12]
    8bda:	f012 f979 	bl	1aed0 <emit_mov_imm>
    emit_mov_imm(state, rd[0], val >> 32);
    8bde:	693b      	ldr	r3, [r7, #16]
    8be0:	f993 3000 	ldrsb.w	r3, [r3]
    8be4:	b2d8      	uxtb	r0, r3
    8be6:	e9d7 1200 	ldrd	r1, r2, [r7]
    8bea:	f04f 0300 	mov.w	r3, #0
    8bee:	f04f 0400 	mov.w	r4, #0
    8bf2:	0013      	movs	r3, r2
    8bf4:	2400      	movs	r4, #0
    8bf6:	461a      	mov	r2, r3
    8bf8:	4601      	mov	r1, r0
    8bfa:	68f8      	ldr	r0, [r7, #12]
    8bfc:	f012 f968 	bl	1aed0 <emit_mov_imm>
    // DEBUG_LOG("emit_mov_i64: %d %d %d %d \n", dst_lo, dst_hi, rd[0], rd[1]);
    // DEBUG_LOG("emit_mov_i64: %d %d\n", dst[0], dst[1]);
    arm_bpf_put_reg64(state, dst, rd);
    8c00:	693a      	ldr	r2, [r7, #16]
    8c02:	68b9      	ldr	r1, [r7, #8]
    8c04:	68f8      	ldr	r0, [r7, #12]
    8c06:	f011 fd17 	bl	1a638 <arm_bpf_put_reg64>
}
    8c0a:	bf00      	nop
    8c0c:	371c      	adds	r7, #28
    8c0e:	46bd      	mov	sp, r7
    8c10:	bd90      	pop	{r4, r7, pc}
    8c12:	bf00      	nop
    8c14:	0002e9ec 	.word	0x0002e9ec

00008c18 <build_inst>:
    // emit_mov_reg(state, false, )
    _emit_mov_reg(state, ARM_IP, 0);
    _emit_mov_reg(state, ARM_LR, 1);
}

static int build_inst(jit_state *state, ebpf_inst *inst) {
    8c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8c1c:	b0a1      	sub	sp, #132	; 0x84
    8c1e:	af04      	add	r7, sp, #16
    8c20:	6078      	str	r0, [r7, #4]
    8c22:	6039      	str	r1, [r7, #0]
    const int8_t *dst = bpf2a32[inst->dst];
    8c24:	683b      	ldr	r3, [r7, #0]
    8c26:	785b      	ldrb	r3, [r3, #1]
    8c28:	f3c3 0303 	ubfx	r3, r3, #0, #4
    8c2c:	b2db      	uxtb	r3, r3
    8c2e:	005b      	lsls	r3, r3, #1
    8c30:	4a1a      	ldr	r2, [pc, #104]	; (8c9c <build_inst+0x84>)
    8c32:	4413      	add	r3, r2
    8c34:	667b      	str	r3, [r7, #100]	; 0x64
    const int8_t *src = bpf2a32[inst->src];
    8c36:	683b      	ldr	r3, [r7, #0]
    8c38:	785b      	ldrb	r3, [r3, #1]
    8c3a:	f3c3 1303 	ubfx	r3, r3, #4, #4
    8c3e:	b2db      	uxtb	r3, r3
    8c40:	005b      	lsls	r3, r3, #1
    8c42:	4a16      	ldr	r2, [pc, #88]	; (8c9c <build_inst+0x84>)
    8c44:	4413      	add	r3, r2
    8c46:	663b      	str	r3, [r7, #96]	; 0x60
    const int8_t *tmp = bpf2a32[TMP_REG_1];
    8c48:	4b15      	ldr	r3, [pc, #84]	; (8ca0 <build_inst+0x88>)
    8c4a:	65fb      	str	r3, [r7, #92]	; 0x5c
    const int8_t *tmp2 = bpf2a32[TMP_REG_2];
    8c4c:	4b15      	ldr	r3, [pc, #84]	; (8ca4 <build_inst+0x8c>)
    8c4e:	65bb      	str	r3, [r7, #88]	; 0x58
    const s16 off = inst->offset;
    8c50:	683b      	ldr	r3, [r7, #0]
    8c52:	885b      	ldrh	r3, [r3, #2]
    8c54:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    const s32 imm = inst->imm;
    8c58:	683b      	ldr	r3, [r7, #0]
    8c5a:	685b      	ldr	r3, [r3, #4]
    8c5c:	653b      	str	r3, [r7, #80]	; 0x50
    int pc = inst - state->insts;
    8c5e:	687b      	ldr	r3, [r7, #4]
    8c60:	681b      	ldr	r3, [r3, #0]
    8c62:	683a      	ldr	r2, [r7, #0]
    8c64:	1ad3      	subs	r3, r2, r3
    8c66:	10db      	asrs	r3, r3, #3
    8c68:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t target_pc = pc + inst->offset + 1;
    8c6a:	683b      	ldr	r3, [r7, #0]
    8c6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    8c70:	461a      	mov	r2, r3
    8c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8c74:	4413      	add	r3, r2
    8c76:	3301      	adds	r3, #1
    8c78:	64bb      	str	r3, [r7, #72]	; 0x48
    const int8_t *rd, *rs;
    int8_t rd_lo, rt, rm, rn;
    s32 jmp_offset;
    const u8 code = inst->opcode;
    8c7a:	683b      	ldr	r3, [r7, #0]
    8c7c:	781b      	ldrb	r3, [r3, #0]
    8c7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    const bool is64 = (BPF_CLASS(code) == EBPF_CLS_ALU64);
    8c82:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    8c86:	f003 0307 	and.w	r3, r3, #7
    8c8a:	2b07      	cmp	r3, #7
    8c8c:	bf0c      	ite	eq
    8c8e:	2301      	moveq	r3, #1
    8c90:	2300      	movne	r3, #0
    8c92:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    // my_printf("switch code:%x\n", BPF_OP(code));
    // DEBUG_LOG("inst: pc=%d dst=%d src=%d imm=%d\n", pc, inst->dst, inst->src, imm);
    // DEBUG_LOG("gen pc=%d idx=0x%x\n", pc, state->idx);
    switch (code) {
    8c96:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    8c9a:	e005      	b.n	8ca8 <build_inst+0x90>
    8c9c:	0002e9d4 	.word	0x0002e9d4
    8ca0:	0002e9ec 	.word	0x0002e9ec
    8ca4:	0002e9ee 	.word	0x0002e9ee
    8ca8:	2bdd      	cmp	r3, #221	; 0xdd
    8caa:	f200 8438 	bhi.w	951e <build_inst+0x906>
    8cae:	a201      	add	r2, pc, #4	; (adr r2, 8cb4 <build_inst+0x9c>)
    8cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8cb4:	00009545 	.word	0x00009545
    8cb8:	0000951f 	.word	0x0000951f
    8cbc:	0000951f 	.word	0x0000951f
    8cc0:	0000951f 	.word	0x0000951f
    8cc4:	0000907b 	.word	0x0000907b
    8cc8:	00009449 	.word	0x00009449
    8ccc:	0000951f 	.word	0x0000951f
    8cd0:	0000907b 	.word	0x0000907b
    8cd4:	0000951f 	.word	0x0000951f
    8cd8:	0000951f 	.word	0x0000951f
    8cdc:	0000951f 	.word	0x0000951f
    8ce0:	0000951f 	.word	0x0000951f
    8ce4:	0000907b 	.word	0x0000907b
    8ce8:	0000951f 	.word	0x0000951f
    8cec:	0000951f 	.word	0x0000951f
    8cf0:	0000907b 	.word	0x0000907b
    8cf4:	0000951f 	.word	0x0000951f
    8cf8:	0000951f 	.word	0x0000951f
    8cfc:	0000951f 	.word	0x0000951f
    8d00:	0000951f 	.word	0x0000951f
    8d04:	0000907b 	.word	0x0000907b
    8d08:	00009345 	.word	0x00009345
    8d0c:	0000951f 	.word	0x0000951f
    8d10:	0000907b 	.word	0x0000907b
    8d14:	000091db 	.word	0x000091db
    8d18:	0000951f 	.word	0x0000951f
    8d1c:	0000951f 	.word	0x0000951f
    8d20:	0000951f 	.word	0x0000951f
    8d24:	0000907b 	.word	0x0000907b
    8d28:	00009345 	.word	0x00009345
    8d2c:	0000951f 	.word	0x0000951f
    8d30:	0000907b 	.word	0x0000907b
    8d34:	0000951f 	.word	0x0000951f
    8d38:	0000951f 	.word	0x0000951f
    8d3c:	0000951f 	.word	0x0000951f
    8d40:	0000951f 	.word	0x0000951f
    8d44:	0000907b 	.word	0x0000907b
    8d48:	00009345 	.word	0x00009345
    8d4c:	0000951f 	.word	0x0000951f
    8d50:	000091a1 	.word	0x000091a1
    8d54:	0000951f 	.word	0x0000951f
    8d58:	0000951f 	.word	0x0000951f
    8d5c:	0000951f 	.word	0x0000951f
    8d60:	0000951f 	.word	0x0000951f
    8d64:	0000907b 	.word	0x0000907b
    8d68:	00009345 	.word	0x00009345
    8d6c:	0000951f 	.word	0x0000951f
    8d70:	000091a1 	.word	0x000091a1
    8d74:	0000951f 	.word	0x0000951f
    8d78:	0000951f 	.word	0x0000951f
    8d7c:	0000951f 	.word	0x0000951f
    8d80:	0000951f 	.word	0x0000951f
    8d84:	000090d5 	.word	0x000090d5
    8d88:	00009345 	.word	0x00009345
    8d8c:	0000951f 	.word	0x0000951f
    8d90:	000090d5 	.word	0x000090d5
    8d94:	0000951f 	.word	0x0000951f
    8d98:	0000951f 	.word	0x0000951f
    8d9c:	0000951f 	.word	0x0000951f
    8da0:	0000951f 	.word	0x0000951f
    8da4:	000090d5 	.word	0x000090d5
    8da8:	00009345 	.word	0x00009345
    8dac:	0000951f 	.word	0x0000951f
    8db0:	000090d5 	.word	0x000090d5
    8db4:	0000951f 	.word	0x0000951f
    8db8:	0000951f 	.word	0x0000951f
    8dbc:	0000951f 	.word	0x0000951f
    8dc0:	0000951f 	.word	0x0000951f
    8dc4:	0000907b 	.word	0x0000907b
    8dc8:	00009345 	.word	0x00009345
    8dcc:	0000951f 	.word	0x0000951f
    8dd0:	0000907b 	.word	0x0000907b
    8dd4:	0000951f 	.word	0x0000951f
    8dd8:	0000951f 	.word	0x0000951f
    8ddc:	0000951f 	.word	0x0000951f
    8de0:	0000951f 	.word	0x0000951f
    8de4:	0000907b 	.word	0x0000907b
    8de8:	00009345 	.word	0x00009345
    8dec:	0000951f 	.word	0x0000951f
    8df0:	0000907b 	.word	0x0000907b
    8df4:	0000951f 	.word	0x0000951f
    8df8:	0000951f 	.word	0x0000951f
    8dfc:	0000951f 	.word	0x0000951f
    8e00:	0000951f 	.word	0x0000951f
    8e04:	0000907b 	.word	0x0000907b
    8e08:	00009345 	.word	0x00009345
    8e0c:	0000951f 	.word	0x0000951f
    8e10:	0000907b 	.word	0x0000907b
    8e14:	0000951f 	.word	0x0000951f
    8e18:	0000951f 	.word	0x0000951f
    8e1c:	0000951f 	.word	0x0000951f
    8e20:	0000951f 	.word	0x0000951f
    8e24:	0000907b 	.word	0x0000907b
    8e28:	00009345 	.word	0x00009345
    8e2c:	0000951f 	.word	0x0000951f
    8e30:	0000907b 	.word	0x0000907b
    8e34:	0000951f 	.word	0x0000951f
    8e38:	00009217 	.word	0x00009217
    8e3c:	00009255 	.word	0x00009255
    8e40:	00009315 	.word	0x00009315
    8e44:	000090ef 	.word	0x000090ef
    8e48:	00009345 	.word	0x00009345
    8e4c:	0000951f 	.word	0x0000951f
    8e50:	00009135 	.word	0x00009135
    8e54:	0000951f 	.word	0x0000951f
    8e58:	00009217 	.word	0x00009217
    8e5c:	00009255 	.word	0x00009255
    8e60:	00009315 	.word	0x00009315
    8e64:	0000907b 	.word	0x0000907b
    8e68:	00009345 	.word	0x00009345
    8e6c:	0000951f 	.word	0x0000951f
    8e70:	00009129 	.word	0x00009129
    8e74:	0000951f 	.word	0x0000951f
    8e78:	00009217 	.word	0x00009217
    8e7c:	00009255 	.word	0x00009255
    8e80:	00009315 	.word	0x00009315
    8e84:	000090ef 	.word	0x000090ef
    8e88:	00009345 	.word	0x00009345
    8e8c:	0000951f 	.word	0x0000951f
    8e90:	00009151 	.word	0x00009151
    8e94:	0000951f 	.word	0x0000951f
    8e98:	00009217 	.word	0x00009217
    8e9c:	00009255 	.word	0x00009255
    8ea0:	00009315 	.word	0x00009315
    8ea4:	0000907b 	.word	0x0000907b
    8ea8:	00009345 	.word	0x00009345
    8eac:	0000951f 	.word	0x0000951f
    8eb0:	00009145 	.word	0x00009145
    8eb4:	0000951f 	.word	0x0000951f
    8eb8:	0000951f 	.word	0x0000951f
    8ebc:	0000951f 	.word	0x0000951f
    8ec0:	0000951f 	.word	0x0000951f
    8ec4:	0000917b 	.word	0x0000917b
    8ec8:	00009471 	.word	0x00009471
    8ecc:	0000951f 	.word	0x0000951f
    8ed0:	00009197 	.word	0x00009197
    8ed4:	0000951f 	.word	0x0000951f
    8ed8:	0000951f 	.word	0x0000951f
    8edc:	0000951f 	.word	0x0000951f
    8ee0:	0000951f 	.word	0x0000951f
    8ee4:	0000951f 	.word	0x0000951f
    8ee8:	0000951f 	.word	0x0000951f
    8eec:	0000951f 	.word	0x0000951f
    8ef0:	0000951f 	.word	0x0000951f
    8ef4:	0000951f 	.word	0x0000951f
    8ef8:	0000951f 	.word	0x0000951f
    8efc:	0000951f 	.word	0x0000951f
    8f00:	0000951f 	.word	0x0000951f
    8f04:	000090d5 	.word	0x000090d5
    8f08:	00009501 	.word	0x00009501
    8f0c:	0000951f 	.word	0x0000951f
    8f10:	000090d5 	.word	0x000090d5
    8f14:	0000951f 	.word	0x0000951f
    8f18:	0000951f 	.word	0x0000951f
    8f1c:	0000951f 	.word	0x0000951f
    8f20:	0000951f 	.word	0x0000951f
    8f24:	000090d5 	.word	0x000090d5
    8f28:	0000951f 	.word	0x0000951f
    8f2c:	0000951f 	.word	0x0000951f
    8f30:	000090d5 	.word	0x000090d5
    8f34:	0000951f 	.word	0x0000951f
    8f38:	0000951f 	.word	0x0000951f
    8f3c:	0000951f 	.word	0x0000951f
    8f40:	0000951f 	.word	0x0000951f
    8f44:	0000907b 	.word	0x0000907b
    8f48:	00009345 	.word	0x00009345
    8f4c:	0000951f 	.word	0x0000951f
    8f50:	0000907b 	.word	0x0000907b
    8f54:	0000951f 	.word	0x0000951f
    8f58:	0000951f 	.word	0x0000951f
    8f5c:	0000951f 	.word	0x0000951f
    8f60:	0000951f 	.word	0x0000951f
    8f64:	0000907b 	.word	0x0000907b
    8f68:	00009345 	.word	0x00009345
    8f6c:	0000951f 	.word	0x0000951f
    8f70:	0000907b 	.word	0x0000907b
    8f74:	0000951f 	.word	0x0000951f
    8f78:	0000951f 	.word	0x0000951f
    8f7c:	0000951f 	.word	0x0000951f
    8f80:	0000951f 	.word	0x0000951f
    8f84:	0000902d 	.word	0x0000902d
    8f88:	00009345 	.word	0x00009345
    8f8c:	0000951f 	.word	0x0000951f
    8f90:	0000902d 	.word	0x0000902d
    8f94:	0000951f 	.word	0x0000951f
    8f98:	0000951f 	.word	0x0000951f
    8f9c:	0000951f 	.word	0x0000951f
    8fa0:	0000951f 	.word	0x0000951f
    8fa4:	0000902d 	.word	0x0000902d
    8fa8:	00009345 	.word	0x00009345
    8fac:	0000951f 	.word	0x0000951f
    8fb0:	0000902d 	.word	0x0000902d
    8fb4:	0000951f 	.word	0x0000951f
    8fb8:	0000951f 	.word	0x0000951f
    8fbc:	0000951f 	.word	0x0000951f
    8fc0:	0000951f 	.word	0x0000951f
    8fc4:	000090ef 	.word	0x000090ef
    8fc8:	00009345 	.word	0x00009345
    8fcc:	0000951f 	.word	0x0000951f
    8fd0:	0000916d 	.word	0x0000916d
    8fd4:	0000951f 	.word	0x0000951f
    8fd8:	0000951f 	.word	0x0000951f
    8fdc:	0000951f 	.word	0x0000951f
    8fe0:	0000951f 	.word	0x0000951f
    8fe4:	0000907b 	.word	0x0000907b
    8fe8:	00009345 	.word	0x00009345
    8fec:	0000951f 	.word	0x0000951f
    8ff0:	00009161 	.word	0x00009161
    8ff4:	0000951f 	.word	0x0000951f
    8ff8:	0000951f 	.word	0x0000951f
    8ffc:	0000951f 	.word	0x0000951f
    9000:	0000951f 	.word	0x0000951f
    9004:	0000952f 	.word	0x0000952f
    9008:	00009345 	.word	0x00009345
    900c:	0000951f 	.word	0x0000951f
    9010:	0000951f 	.word	0x0000951f
    9014:	0000951f 	.word	0x0000951f
    9018:	0000951f 	.word	0x0000951f
    901c:	0000951f 	.word	0x0000951f
    9020:	0000951f 	.word	0x0000951f
    9024:	0000952f 	.word	0x0000952f
    9028:	00009345 	.word	0x00009345
    /* dst = src */ // Done
    case EBPF_OP_MOV_IMM:
    case EBPF_OP_MOV_REG:
    case EBPF_OP_MOV64_IMM:
    case EBPF_OP_MOV64_REG:
        switch (BPF_SRC(code))
    902c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    9030:	f003 0308 	and.w	r3, r3, #8
    9034:	2b00      	cmp	r3, #0
    9036:	d017      	beq.n	9068 <build_inst+0x450>
    9038:	2b08      	cmp	r3, #8
    903a:	f040 8285 	bne.w	9548 <build_inst+0x930>
        {
        case EBPF_SRC_REG:
            if (imm == 1) {
    903e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9040:	2b01      	cmp	r3, #1
    9042:	d109      	bne.n	9058 <build_inst+0x440>
                /* Special mov32 for zext */
                emit_mov_imm(state, dst_hi, 0);
    9044:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    9046:	f993 3000 	ldrsb.w	r3, [r3]
    904a:	b2db      	uxtb	r3, r3
    904c:	2200      	movs	r2, #0
    904e:	4619      	mov	r1, r3
    9050:	6878      	ldr	r0, [r7, #4]
    9052:	f011 ff3d 	bl	1aed0 <emit_mov_imm>
                break;
    9056:	e00f      	b.n	9078 <build_inst+0x460>
            }
            // DEBUG_LOG("emit_mov_se_imm64:%d %d %d\n", dst_lo, src_lo, pc);
            emit_mov_reg64(state, is64, dst, src);
    9058:	f897 1046 	ldrb.w	r1, [r7, #70]	; 0x46
    905c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    905e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    9060:	6878      	ldr	r0, [r7, #4]
    9062:	f7ff fcbd 	bl	89e0 <emit_mov_reg64>
            break;
    9066:	e007      	b.n	9078 <build_inst+0x460>
        
        case EBPF_SRC_IMM:
            /* Sign-extend immediate value to destination reg */
            // DEBUG_LOG("emit_mov_se_imm64: dst:%d %d %d %d\n", dst_lo, src_lo, imm, pc);
            emit_mov_se_imm64(state, is64, dst, imm);
    9068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    906a:	f897 1046 	ldrb.w	r1, [r7, #70]	; 0x46
    906e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    9070:	6878      	ldr	r0, [r7, #4]
    9072:	f011 ffe1 	bl	1b038 <emit_mov_se_imm64>
            break;
    9076:	bf00      	nop
        }
        break;
    9078:	e266      	b.n	9548 <build_inst+0x930>
    case EBPF_OP_XOR64_IMM:
    case EBPF_OP_XOR64_REG:
        // if (code == EBPF_OP_OR64_REG) {
        //     DEBUG_LOG("EBPF_OP_OR64_REG\n");
        // }
        switch (BPF_SRC(code))
    907a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    907e:	f003 0308 	and.w	r3, r3, #8
    9082:	2b00      	cmp	r3, #0
    9084:	d002      	beq.n	908c <build_inst+0x474>
    9086:	2b08      	cmp	r3, #8
    9088:	d015      	beq.n	90b6 <build_inst+0x49e>
            break;
        case EBPF_SRC_REG:
            emit_alu64_reg(state, is64, dst, src, BPF_OP(code));
            break;
        }
        break;
    908a:	e266      	b.n	955a <build_inst+0x942>
            emit_mov_se_imm64(state, is64, tmp2, imm);
    908c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    908e:	f897 1046 	ldrb.w	r1, [r7, #70]	; 0x46
    9092:	6dba      	ldr	r2, [r7, #88]	; 0x58
    9094:	6878      	ldr	r0, [r7, #4]
    9096:	f011 ffcf 	bl	1b038 <emit_mov_se_imm64>
            emit_alu64_reg(state, is64, dst, tmp2, BPF_OP(code));
    909a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    909e:	f023 030f 	bic.w	r3, r3, #15
    90a2:	b2db      	uxtb	r3, r3
    90a4:	f897 1046 	ldrb.w	r1, [r7, #70]	; 0x46
    90a8:	9300      	str	r3, [sp, #0]
    90aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    90ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    90ae:	6878      	ldr	r0, [r7, #4]
    90b0:	f7fe fc5e 	bl	7970 <emit_alu64_reg>
            break;
    90b4:	e00d      	b.n	90d2 <build_inst+0x4ba>
            emit_alu64_reg(state, is64, dst, src, BPF_OP(code));
    90b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    90ba:	f023 030f 	bic.w	r3, r3, #15
    90be:	b2db      	uxtb	r3, r3
    90c0:	f897 1046 	ldrb.w	r1, [r7, #70]	; 0x46
    90c4:	9300      	str	r3, [sp, #0]
    90c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    90c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    90ca:	6878      	ldr	r0, [r7, #4]
    90cc:	f7fe fc50 	bl	7970 <emit_alu64_reg>
            break;
    90d0:	bf00      	nop
        break;
    90d2:	e242      	b.n	955a <build_inst+0x942>
    // treat as u32
    case EBPF_OP_DIV64_IMM:
    case EBPF_OP_DIV64_REG:
    case EBPF_OP_MOD64_IMM:
    case EBPF_OP_MOD64_REG:
        emit_u32_div_mod(state, dst, src, code, imm);
    90d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    90d8:	b29a      	uxth	r2, r3
    90da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    90dc:	b29b      	uxth	r3, r3
    90de:	9300      	str	r3, [sp, #0]
    90e0:	4613      	mov	r3, r2
    90e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    90e4:	6e79      	ldr	r1, [r7, #100]	; 0x64
    90e6:	6878      	ldr	r0, [r7, #4]
    90e8:	f7fe fd34 	bl	7b54 <emit_u32_div_mod>
        break;
    90ec:	e235      	b.n	955a <build_inst+0x942>
    /* dst = dst >> imm */
    /* dst = dst >> imm (signed) */
    case EBPF_OP_LSH_IMM:
    case EBPF_OP_RSH_IMM:
    case EBPF_OP_ARSH_IMM:
        if (imm > 31) {
    90ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    90f0:	2b1f      	cmp	r3, #31
    90f2:	dd06      	ble.n	9102 <build_inst+0x4ea>
            state->err_line = __LINE__;
    90f4:	687b      	ldr	r3, [r7, #4]
    90f6:	f240 52ac 	movw	r2, #1452	; 0x5ac
    90fa:	619a      	str	r2, [r3, #24]
            return -1;
    90fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9100:	e22c      	b.n	955c <build_inst+0x944>
        }
        if (imm) {
    9102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9104:	2b00      	cmp	r3, #0
    9106:	f000 8221 	beq.w	954c <build_inst+0x934>
            emit_alu32_imm(state, dst_lo, imm, BPF_OP(code));
    910a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    910c:	3301      	adds	r3, #1
    910e:	f993 1000 	ldrsb.w	r1, [r3]
    9112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9114:	b29a      	uxth	r2, r3
    9116:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    911a:	f023 030f 	bic.w	r3, r3, #15
    911e:	b2db      	uxtb	r3, r3
    9120:	6878      	ldr	r0, [r7, #4]
    9122:	f7fe fc8b 	bl	7a3c <emit_alu32_imm>
        }
        break;
    9126:	e211      	b.n	954c <build_inst+0x934>

    case EBPF_OP_LSH64_REG:
        _emit_lsh64_reg(state, dst, src);
    9128:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    912a:	6e79      	ldr	r1, [r7, #100]	; 0x64
    912c:	6878      	ldr	r0, [r7, #4]
    912e:	f7fe fda1 	bl	7c74 <_emit_lsh64_reg>
        break;
    9132:	e212      	b.n	955a <build_inst+0x942>
    case EBPF_OP_LSH64_IMM:
        _emit_lsh64_imm(state, dst, imm);
    9134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9136:	b29b      	uxth	r3, r3
    9138:	461a      	mov	r2, r3
    913a:	6e79      	ldr	r1, [r7, #100]	; 0x64
    913c:	6878      	ldr	r0, [r7, #4]
    913e:	f7fe fe77 	bl	7e30 <_emit_lsh64_imm>
        break;
    9142:	e20a      	b.n	955a <build_inst+0x942>
    case EBPF_OP_RSH64_REG:
        emit_a32_rsh_r64(state, dst, src);
    9144:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    9146:	6e79      	ldr	r1, [r7, #100]	; 0x64
    9148:	6878      	ldr	r0, [r7, #4]
    914a:	f7fe ff35 	bl	7fb8 <emit_a32_rsh_r64>
        break;
    914e:	e204      	b.n	955a <build_inst+0x942>
    case EBPF_OP_RSH64_IMM:
        // DEBUG_LOG("emit_a32_rsh_i64: %d\n", imm);
        emit_a32_rsh_i64(state, dst, imm);
    9150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9152:	b29b      	uxth	r3, r3
    9154:	461a      	mov	r2, r3
    9156:	6e79      	ldr	r1, [r7, #100]	; 0x64
    9158:	6878      	ldr	r0, [r7, #4]
    915a:	f7fe ffdd 	bl	8118 <emit_a32_rsh_i64>
        break;
    915e:	e1fc      	b.n	955a <build_inst+0x942>
    case EBPF_OP_ARSH64_REG:
        emit_a32_arsh_r64(state, dst, src);
    9160:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    9162:	6e79      	ldr	r1, [r7, #100]	; 0x64
    9164:	6878      	ldr	r0, [r7, #4]
    9166:	f7ff f869 	bl	823c <emit_a32_arsh_r64>
        break;
    916a:	e1f6      	b.n	955a <build_inst+0x942>
    case EBPF_OP_ARSH64_IMM:
        emit_a32_arsh_i64(state, dst, imm);
    916c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    916e:	461a      	mov	r2, r3
    9170:	6e79      	ldr	r1, [r7, #100]	; 0x64
    9172:	6878      	ldr	r0, [r7, #4]
    9174:	f7ff f91e 	bl	83b4 <emit_a32_arsh_i64>
        break;
    9178:	e1ef      	b.n	955a <build_inst+0x942>

    case EBPF_OP_NEG:
        emit_alu32_imm(state, dst_lo, 0, BPF_OP(code));
    917a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    917c:	3301      	adds	r3, #1
    917e:	f993 1000 	ldrsb.w	r1, [r3]
    9182:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    9186:	f023 030f 	bic.w	r3, r3, #15
    918a:	b2db      	uxtb	r3, r3
    918c:	2200      	movs	r2, #0
    918e:	6878      	ldr	r0, [r7, #4]
    9190:	f7fe fc54 	bl	7a3c <emit_alu32_imm>
        break;
    9194:	e1e1      	b.n	955a <build_inst+0x942>
    /* dst = ~dst (64 bit) */
    case EBPF_OP_NEG64:
        emit_a32_neg64(state, dst);
    9196:	6e79      	ldr	r1, [r7, #100]	; 0x64
    9198:	6878      	ldr	r0, [r7, #4]
    919a:	f7ff f9a9 	bl	84f0 <emit_a32_neg64>
        break;
    919e:	e1dc      	b.n	955a <build_inst+0x942>
	/* dst = dst * src/imm */
	case EBPF_OP_MUL64_IMM:
	case EBPF_OP_MUL64_REG: {
        switch (BPF_SRC(code)) {
    91a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    91a4:	f003 0308 	and.w	r3, r3, #8
    91a8:	2b00      	cmp	r3, #0
    91aa:	d002      	beq.n	91b2 <build_inst+0x59a>
    91ac:	2b08      	cmp	r3, #8
    91ae:	d00d      	beq.n	91cc <build_inst+0x5b4>
        
         case EBPF_SRC_REG:
            emit_a32_mul_r64(state, dst, src);
            break;
        }
        break;
    91b0:	e1d3      	b.n	955a <build_inst+0x942>
            emit_mov_se_imm64(state, is64, tmp2, imm);
    91b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    91b4:	f897 1046 	ldrb.w	r1, [r7, #70]	; 0x46
    91b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
    91ba:	6878      	ldr	r0, [r7, #4]
    91bc:	f011 ff3c 	bl	1b038 <emit_mov_se_imm64>
            emit_a32_mul_r64(state, dst, tmp2);
    91c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
    91c2:	6e79      	ldr	r1, [r7, #100]	; 0x64
    91c4:	6878      	ldr	r0, [r7, #4]
    91c6:	f7ff f9cb 	bl	8560 <emit_a32_mul_r64>
            break;
    91ca:	e005      	b.n	91d8 <build_inst+0x5c0>
            emit_a32_mul_r64(state, dst, src);
    91cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    91ce:	6e79      	ldr	r1, [r7, #100]	; 0x64
    91d0:	6878      	ldr	r0, [r7, #4]
    91d2:	f7ff f9c5 	bl	8560 <emit_a32_mul_r64>
            break;
    91d6:	bf00      	nop
        break;
    91d8:	e1bf      	b.n	955a <build_inst+0x942>
        goto todo;
        break;

    /* dst = imm64 */
    case EBPF_OP_LDDW: { // cur-inst.imm + next-inst.imm
        u64 val = (u32) (imm) | (u64) ((u32) inst[1].imm) << 32;
    91da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    91dc:	4619      	mov	r1, r3
    91de:	f04f 0200 	mov.w	r2, #0
    91e2:	683b      	ldr	r3, [r7, #0]
    91e4:	3308      	adds	r3, #8
    91e6:	685b      	ldr	r3, [r3, #4]
    91e8:	4698      	mov	r8, r3
    91ea:	f04f 0900 	mov.w	r9, #0
    91ee:	f04f 0300 	mov.w	r3, #0
    91f2:	f04f 0400 	mov.w	r4, #0
    91f6:	4644      	mov	r4, r8
    91f8:	2300      	movs	r3, #0
    91fa:	ea41 0503 	orr.w	r5, r1, r3
    91fe:	ea42 0604 	orr.w	r6, r2, r4
    9202:	e9c7 560e 	strd	r5, r6, [r7, #56]	; 0x38
        emit_mov_i64(state, dst, val);
    9206:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
    920a:	6e79      	ldr	r1, [r7, #100]	; 0x64
    920c:	6878      	ldr	r0, [r7, #4]
    920e:	f7ff fcc5 	bl	8b9c <emit_mov_i64>
        return 1;
    9212:	2301      	movs	r3, #1
    9214:	e1a2      	b.n	955c <build_inst+0x944>
    /* LDX: dst = *(size *)(src + off) */
    case EBPF_OP_LDXW:
    case EBPF_OP_LDXH:
    case EBPF_OP_LDXB:
    case EBPF_OP_LDXDW:
        rn = arm_bpf_get_reg32(state, src_lo, tmp2[1]);
    9216:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    9218:	3301      	adds	r3, #1
    921a:	f993 1000 	ldrsb.w	r1, [r3]
    921e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    9220:	3301      	adds	r3, #1
    9222:	f993 3000 	ldrsb.w	r3, [r3]
    9226:	461a      	mov	r2, r3
    9228:	6878      	ldr	r0, [r7, #4]
    922a:	f011 f991 	bl	1a550 <arm_bpf_get_reg32>
    922e:	4603      	mov	r3, r0
    9230:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
        // DEBUG_LOG("EBPF_OP_LDXDW pc=%d src:%d -> rn:%d dst:%d offset:%d\n", pc, src_lo, rn, dst_lo, off);
        emit_ldx_reg(state, dst, rn, off, BPF_SIZE(code));
    9234:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    9238:	f003 0318 	and.w	r3, r3, #24
    923c:	b2db      	uxtb	r3, r3
    923e:	f9b7 1056 	ldrsh.w	r1, [r7, #86]	; 0x56
    9242:	f997 206e 	ldrsb.w	r2, [r7, #110]	; 0x6e
    9246:	9300      	str	r3, [sp, #0]
    9248:	460b      	mov	r3, r1
    924a:	6e79      	ldr	r1, [r7, #100]	; 0x64
    924c:	6878      	ldr	r0, [r7, #4]
    924e:	f7ff fa01 	bl	8654 <emit_ldx_reg>
        break;
    9252:	e182      	b.n	955a <build_inst+0x942>
    /* ST: *(size *)(dst + off) = imm */
    case EBPF_OP_STW:
    case EBPF_OP_STH:
    case EBPF_OP_STB:
    case EBPF_OP_STDW: {
        switch (BPF_SIZE(code))
    9254:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    9258:	f003 0318 	and.w	r3, r3, #24
    925c:	2b18      	cmp	r3, #24
    925e:	d847      	bhi.n	92f0 <build_inst+0x6d8>
    9260:	a201      	add	r2, pc, #4	; (adr r2, 9268 <build_inst+0x650>)
    9262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9266:	bf00      	nop
    9268:	000092db 	.word	0x000092db
    926c:	000092f1 	.word	0x000092f1
    9270:	000092f1 	.word	0x000092f1
    9274:	000092f1 	.word	0x000092f1
    9278:	000092f1 	.word	0x000092f1
    927c:	000092f1 	.word	0x000092f1
    9280:	000092f1 	.word	0x000092f1
    9284:	000092f1 	.word	0x000092f1
    9288:	000092db 	.word	0x000092db
    928c:	000092f1 	.word	0x000092f1
    9290:	000092f1 	.word	0x000092f1
    9294:	000092f1 	.word	0x000092f1
    9298:	000092f1 	.word	0x000092f1
    929c:	000092f1 	.word	0x000092f1
    92a0:	000092f1 	.word	0x000092f1
    92a4:	000092f1 	.word	0x000092f1
    92a8:	000092db 	.word	0x000092db
    92ac:	000092f1 	.word	0x000092f1
    92b0:	000092f1 	.word	0x000092f1
    92b4:	000092f1 	.word	0x000092f1
    92b8:	000092f1 	.word	0x000092f1
    92bc:	000092f1 	.word	0x000092f1
    92c0:	000092f1 	.word	0x000092f1
    92c4:	000092f1 	.word	0x000092f1
    92c8:	000092cd 	.word	0x000092cd
        {
        case EBPF_SIZE_DW:
            /* Sign-extend immediate value into temp reg */
            emit_mov_se_imm64(state, true, tmp2, imm);
    92cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    92ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
    92d0:	2101      	movs	r1, #1
    92d2:	6878      	ldr	r0, [r7, #4]
    92d4:	f011 feb0 	bl	1b038 <emit_mov_se_imm64>
            break;
    92d8:	e00a      	b.n	92f0 <build_inst+0x6d8>
        case EBPF_SIZE_W:
        case EBPF_SIZE_H:
        case EBPF_SIZE_B:
            emit_mov_imm(state, tmp2[1], imm);
    92da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    92dc:	3301      	adds	r3, #1
    92de:	f993 3000 	ldrsb.w	r3, [r3]
    92e2:	b2db      	uxtb	r3, r3
    92e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    92e6:	4619      	mov	r1, r3
    92e8:	6878      	ldr	r0, [r7, #4]
    92ea:	f011 fdf1 	bl	1aed0 <emit_mov_imm>
            break;
    92ee:	bf00      	nop
        }
        /*
        TODO: disable write in secure mode
        */
        emit_str_reg(state, dst_lo, tmp2, off, BPF_SIZE(code));
    92f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    92f2:	3301      	adds	r3, #1
    92f4:	f993 1000 	ldrsb.w	r1, [r3]
    92f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    92fc:	f003 0318 	and.w	r3, r3, #24
    9300:	b2db      	uxtb	r3, r3
    9302:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
    9306:	9300      	str	r3, [sp, #0]
    9308:	4613      	mov	r3, r2
    930a:	6dba      	ldr	r2, [r7, #88]	; 0x58
    930c:	6878      	ldr	r0, [r7, #4]
    930e:	f7ff fa7d 	bl	880c <emit_str_reg>
        break;
    9312:	e122      	b.n	955a <build_inst+0x942>
    /* ST: *(size *)(dst + off) = imm */
    case EBPF_OP_STXW:
    case EBPF_OP_STXH:
    case EBPF_OP_STXB:
    case EBPF_OP_STXDW:
        rs = arm_bpf_get_reg64(state, src, tmp2);
    9314:	6dba      	ldr	r2, [r7, #88]	; 0x58
    9316:	6e39      	ldr	r1, [r7, #96]	; 0x60
    9318:	6878      	ldr	r0, [r7, #4]
    931a:	f011 f96a 	bl	1a5f2 <arm_bpf_get_reg64>
    931e:	6378      	str	r0, [r7, #52]	; 0x34
        emit_str_reg(state, dst_lo, rs, off, BPF_SIZE(code));
    9320:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    9322:	3301      	adds	r3, #1
    9324:	f993 1000 	ldrsb.w	r1, [r3]
    9328:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    932c:	f003 0318 	and.w	r3, r3, #24
    9330:	b2db      	uxtb	r3, r3
    9332:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
    9336:	9300      	str	r3, [sp, #0]
    9338:	4613      	mov	r3, r2
    933a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    933c:	6878      	ldr	r0, [r7, #4]
    933e:	f7ff fa65 	bl	880c <emit_str_reg>
        break;
    9342:	e10a      	b.n	955a <build_inst+0x942>
    case EBPF_OP_JLE_REG:
    case EBPF_OP_JSLT_IMM:
    case EBPF_OP_JSLT_REG:
    case EBPF_OP_JSLE_IMM:
    case EBPF_OP_JSLE_REG: {
        int start_delta = state->idx;
    9344:	687b      	ldr	r3, [r7, #4]
    9346:	691b      	ldr	r3, [r3, #16]
    9348:	633b      	str	r3, [r7, #48]	; 0x30
        if (BPF_SRC(code) == EBPF_SRC_REG) {
    934a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    934e:	f003 0308 	and.w	r3, r3, #8
    9352:	2b00      	cmp	r3, #0
    9354:	d01c      	beq.n	9390 <build_inst+0x778>
            rm = arm_bpf_get_reg32(state, src_hi, tmp2[0]);
    9356:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    9358:	f993 1000 	ldrsb.w	r1, [r3]
    935c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    935e:	f993 3000 	ldrsb.w	r3, [r3]
    9362:	461a      	mov	r2, r3
    9364:	6878      	ldr	r0, [r7, #4]
    9366:	f011 f8f3 	bl	1a550 <arm_bpf_get_reg32>
    936a:	4603      	mov	r3, r0
    936c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            rn = arm_bpf_get_reg32(state, src_lo, tmp2[1]);
    9370:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    9372:	3301      	adds	r3, #1
    9374:	f993 1000 	ldrsb.w	r1, [r3]
    9378:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    937a:	3301      	adds	r3, #1
    937c:	f993 3000 	ldrsb.w	r3, [r3]
    9380:	461a      	mov	r2, r3
    9382:	6878      	ldr	r0, [r7, #4]
    9384:	f011 f8e4 	bl	1a550 <arm_bpf_get_reg32>
    9388:	4603      	mov	r3, r0
    938a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
    938e:	e012      	b.n	93b6 <build_inst+0x79e>
        } else { // IMM
            if (off == 0)
    9390:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
    9394:	2b00      	cmp	r3, #0
    9396:	f000 80db 	beq.w	9550 <build_inst+0x938>
                break;
            rm = tmp2[0];
    939a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    939c:	781b      	ldrb	r3, [r3, #0]
    939e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            rn = tmp2[1];
    93a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    93a4:	785b      	ldrb	r3, [r3, #1]
    93a6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
            /* Sign-extend immediate value */
            emit_mov_se_imm64(state, true, tmp2, imm);
    93aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    93ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
    93ae:	2101      	movs	r1, #1
    93b0:	6878      	ldr	r0, [r7, #4]
    93b2:	f011 fe41 	bl	1b038 <emit_mov_se_imm64>
        }
        rd = arm_bpf_get_reg64(state, dst, tmp);
    93b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    93b8:	6e79      	ldr	r1, [r7, #100]	; 0x64
    93ba:	6878      	ldr	r0, [r7, #4]
    93bc:	f011 f919 	bl	1a5f2 <arm_bpf_get_reg64>
    93c0:	62f8      	str	r0, [r7, #44]	; 0x2c
        // CMP
        // DEBUG_LOG("rm=%d rn=%d rd[0]=%d rd[1]=%d\n", rm, rn, rd[0], rd[1]);
        _emit_cmp_cond(state, rd[0], rd[1], rm, rn, BPF_OP(code), BPF_CLASS(code) == EBPF_CLS_JMP);
    93c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    93c4:	f993 1000 	ldrsb.w	r1, [r3]
    93c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    93ca:	3301      	adds	r3, #1
    93cc:	f993 0000 	ldrsb.w	r0, [r3]
    93d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    93d4:	f023 030f 	bic.w	r3, r3, #15
    93d8:	b2db      	uxtb	r3, r3
    93da:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
    93de:	f002 0207 	and.w	r2, r2, #7
    93e2:	2a05      	cmp	r2, #5
    93e4:	bf0c      	ite	eq
    93e6:	2201      	moveq	r2, #1
    93e8:	2200      	movne	r2, #0
    93ea:	b2d2      	uxtb	r2, r2
    93ec:	f997 406f 	ldrsb.w	r4, [r7, #111]	; 0x6f
    93f0:	9202      	str	r2, [sp, #8]
    93f2:	9301      	str	r3, [sp, #4]
    93f4:	f997 306e 	ldrsb.w	r3, [r7, #110]	; 0x6e
    93f8:	9300      	str	r3, [sp, #0]
    93fa:	4623      	mov	r3, r4
    93fc:	4602      	mov	r2, r0
    93fe:	6878      	ldr	r0, [r7, #4]
    9400:	f011 fc4d 	bl	1ac9e <_emit_cmp_cond>
        int bsize = 4;
    9404:	2304      	movs	r3, #4
    9406:	66bb      	str	r3, [r7, #104]	; 0x68
        if (!_use_b4(state)) {
    9408:	6878      	ldr	r0, [r7, #4]
    940a:	f011 fc38 	bl	1ac7e <_use_b4>
    940e:	4603      	mov	r3, r0
    9410:	f083 0301 	eor.w	r3, r3, #1
    9414:	b2db      	uxtb	r3, r3
    9416:	2b00      	cmp	r3, #0
    9418:	d001      	beq.n	941e <build_inst+0x806>
            bsize = 2;
    941a:	2302      	movs	r3, #2
    941c:	66bb      	str	r3, [r7, #104]	; 0x68
        }
        // DEBUG_LOG("JUMP %d off=%d jmp=%d %d\n", state->idx, off, jmp_offset);
        jmp_offset = bpf2a32_offset(state, pc, pc + off, bsize);
    941e:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
    9422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9424:	441a      	add	r2, r3
    9426:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    9428:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    942a:	6878      	ldr	r0, [r7, #4]
    942c:	f011 fe3c 	bl	1b0a8 <bpf2a32_offset>
    9430:	62b8      	str	r0, [r7, #40]	; 0x28
        // DEBUG_LOG("off set addr: %d end:0x%x to:0x%x off:%d jmp:%d start:0x%x 0x%x\n", pc, state->idx, dst, off, jmp_offset, start_delta, state->offsets[pc]);
        _emit_jump(state, jmp_offset, BPF_OP(code));
    9432:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
    9436:	f023 030f 	bic.w	r3, r3, #15
    943a:	b25b      	sxtb	r3, r3
    943c:	461a      	mov	r2, r3
    943e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    9440:	6878      	ldr	r0, [r7, #4]
    9442:	f011 fd02 	bl	1ae4a <_emit_jump>
        // gen_return(state);
        // return -1;
        break;
    9446:	e088      	b.n	955a <build_inst+0x942>
    }
    case EBPF_OP_JA:
        if (off == 0)
    9448:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
    944c:	2b00      	cmp	r3, #0
    944e:	f000 8081 	beq.w	9554 <build_inst+0x93c>
            break;
        // DEBUG_LOG("EBPF_OP_JA End: 0x%x off=%d\n", state->idx, off);
        jmp_offset = bpf2a32_offset(state, pc, pc + off, 2);
    9452:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
    9456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9458:	441a      	add	r2, r3
    945a:	2302      	movs	r3, #2
    945c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    945e:	6878      	ldr	r0, [r7, #4]
    9460:	f011 fe22 	bl	1b0a8 <bpf2a32_offset>
    9464:	62b8      	str	r0, [r7, #40]	; 0x28
        _emit_b(state, jmp_offset); // always 2 bytes
    9466:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    9468:	6878      	ldr	r0, [r7, #4]
    946a:	f7fe f8d5 	bl	7618 <_emit_b>
        break;
    946e:	e074      	b.n	955a <build_inst+0x942>

    // tail call

    // function call
    case EBPF_OP_CALL: {
        const s8 *r0 = bpf2a32[BPF_REG_0];
    9470:	4b3d      	ldr	r3, [pc, #244]	; (9568 <build_inst+0x950>)
    9472:	627b      	str	r3, [r7, #36]	; 0x24
        const s8 *r1 = bpf2a32[BPF_REG_1];
    9474:	4b3d      	ldr	r3, [pc, #244]	; (956c <build_inst+0x954>)
    9476:	623b      	str	r3, [r7, #32]
        const s8 *r2 = bpf2a32[BPF_REG_2];
    9478:	4b3d      	ldr	r3, [pc, #244]	; (9570 <build_inst+0x958>)
    947a:	61fb      	str	r3, [r7, #28]
        const s8 *r3 = bpf2a32[BPF_REG_3];
    947c:	4b3d      	ldr	r3, [pc, #244]	; (9574 <build_inst+0x95c>)
    947e:	61bb      	str	r3, [r7, #24]
        const s8 *r4 = bpf2a32[BPF_REG_4];
    9480:	4b3d      	ldr	r3, [pc, #244]	; (9578 <build_inst+0x960>)
    9482:	617b      	str	r3, [r7, #20]
        const s8 *r5 = bpf2a32[BPF_REG_5];
    9484:	4b3d      	ldr	r3, [pc, #244]	; (957c <build_inst+0x964>)
    9486:	613b      	str	r3, [r7, #16]
        const u32 func = *(u32 *) (state->__bpf_call_base + imm * 4);
    9488:	687b      	ldr	r3, [r7, #4]
    948a:	6a1b      	ldr	r3, [r3, #32]
    948c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    948e:	0092      	lsls	r2, r2, #2
    9490:	4413      	add	r3, r2
    9492:	681b      	ldr	r3, [r3, #0]
    9494:	60fb      	str	r3, [r7, #12]
        // DEBUG_LOG("EBPF_OP_CALL: %d 0x%08x 0x%08x\n", imm, state->__bpf_call_base, func);
       
        emit_mov_reg64(state, true, r0, r1);
    9496:	6a3b      	ldr	r3, [r7, #32]
    9498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    949a:	2101      	movs	r1, #1
    949c:	6878      	ldr	r0, [r7, #4]
    949e:	f7ff fa9f 	bl	89e0 <emit_mov_reg64>
        emit_mov_reg64(state, true, r1, r2);
    94a2:	69fb      	ldr	r3, [r7, #28]
    94a4:	6a3a      	ldr	r2, [r7, #32]
    94a6:	2101      	movs	r1, #1
    94a8:	6878      	ldr	r0, [r7, #4]
    94aa:	f7ff fa99 	bl	89e0 <emit_mov_reg64>
        emit_push_r64(state, r5);
    94ae:	6939      	ldr	r1, [r7, #16]
    94b0:	6878      	ldr	r0, [r7, #4]
    94b2:	f7ff fb23 	bl	8afc <emit_push_r64>
        emit_push_r64(state, r4);
    94b6:	6979      	ldr	r1, [r7, #20]
    94b8:	6878      	ldr	r0, [r7, #4]
    94ba:	f7ff fb1f 	bl	8afc <emit_push_r64>
        emit_push_r64(state, r3);
    94be:	69b9      	ldr	r1, [r7, #24]
    94c0:	6878      	ldr	r0, [r7, #4]
    94c2:	f7ff fb1b 	bl	8afc <emit_push_r64>
        // emit_push_r64(state, r2);
        // emit_push_r64(state, r1);
        // break;
        // emit_a32_mov_i(tmp[1], func, ctx);
        emit_mov_imm(state, tmp[1], func);
    94c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    94c8:	3301      	adds	r3, #1
    94ca:	f993 3000 	ldrsb.w	r3, [r3]
    94ce:	b2db      	uxtb	r3, r3
    94d0:	68fa      	ldr	r2, [r7, #12]
    94d2:	4619      	mov	r1, r3
    94d4:	6878      	ldr	r0, [r7, #4]
    94d6:	f011 fcfb 	bl	1aed0 <emit_mov_imm>
        // emit_blx_r(tmp[1], ctx);
        // mov r1, 0x8003444
        // blx r1
        emit2(state, _thumb16_BLX_REG_T1(tmp[1]));
    94da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    94dc:	3301      	adds	r3, #1
    94de:	f993 3000 	ldrsb.w	r3, [r3]
    94e2:	4618      	mov	r0, r3
    94e4:	f010 fa9e 	bl	19a24 <_thumb16_BLX_REG_T1>
    94e8:	4603      	mov	r3, r0
    94ea:	4619      	mov	r1, r3
    94ec:	6878      	ldr	r0, [r7, #4]
    94ee:	f010 fffa 	bl	1a4e6 <emit2>
        
        // emit(ARM_ADD_I(ARM_SP, ARM_SP, imm8m(24)), ctx); // callee clean
        _emit_add_imm(state, ARM_SP, ARM_SP, 24);
    94f2:	2318      	movs	r3, #24
    94f4:	220d      	movs	r2, #13
    94f6:	210d      	movs	r1, #13
    94f8:	6878      	ldr	r0, [r7, #4]
    94fa:	f011 fa6e 	bl	1a9da <_emit_add_imm>
        break;
    94fe:	e02c      	b.n	955a <build_inst+0x942>
    }
    
    case EBPF_OP_EXIT:
        // emit2(state, 0x4770);
        if (pc == state->inst_num - 1) 
    9500:	687b      	ldr	r3, [r7, #4]
    9502:	685b      	ldr	r3, [r3, #4]
    9504:	3b01      	subs	r3, #1
    9506:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    9508:	429a      	cmp	r2, r3
    950a:	d025      	beq.n	9558 <build_inst+0x940>
            break;
        jmp_offset = epilogue_offset(state);
    950c:	6878      	ldr	r0, [r7, #4]
    950e:	f011 fdf5 	bl	1b0fc <epilogue_offset>
    9512:	62b8      	str	r0, [r7, #40]	; 0x28
        // DEBUG_LOG("EBPF_OP_EXIT: %d %d\n", pc, jmp_offset);
        // jmp_offset = 5;
        _emit_b(state, jmp_offset);
    9514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    9516:	6878      	ldr	r0, [r7, #4]
    9518:	f7fe f87e 	bl	7618 <_emit_b>
        break;
    951c:	e01d      	b.n	955a <build_inst+0x942>

    case 0: // NOP
        break;

    default:
        DEBUG_LOG("Unsupport op: %x pc: %d\n", code, pc);
    951e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    9522:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    9524:	4619      	mov	r1, r3
    9526:	4816      	ldr	r0, [pc, #88]	; (9580 <build_inst+0x968>)
    9528:	f00f fdcd 	bl	190c6 <debug_log>
        // state->err_line = __LINE__;
        // return -1;
        break;
    952c:	e015      	b.n	955a <build_inst+0x942>
        goto todo;
    952e:	bf00      	nop
        DEBUG_LOG("Do not implement current op: %x pc: %d\n", code, pc);
        state->err_line = __LINE__;
        return -1;

todo:
        DEBUG_LOG("TODO op: %x pc: %d\n", code, pc);
    9530:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    9534:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    9536:	4619      	mov	r1, r3
    9538:	4812      	ldr	r0, [pc, #72]	; (9584 <build_inst+0x96c>)
    953a:	f00f fdc4 	bl	190c6 <debug_log>
        return -1;
    953e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9542:	e00b      	b.n	955c <build_inst+0x944>
        break;
    9544:	bf00      	nop
    9546:	e008      	b.n	955a <build_inst+0x942>
        break;
    9548:	bf00      	nop
    954a:	e006      	b.n	955a <build_inst+0x942>
        break;
    954c:	bf00      	nop
    954e:	e004      	b.n	955a <build_inst+0x942>
                break;
    9550:	bf00      	nop
    9552:	e002      	b.n	955a <build_inst+0x942>
            break;
    9554:	bf00      	nop
    9556:	e000      	b.n	955a <build_inst+0x942>
            break;
    9558:	bf00      	nop
    }
    return 0;
    955a:	2300      	movs	r3, #0
}
    955c:	4618      	mov	r0, r3
    955e:	3774      	adds	r7, #116	; 0x74
    9560:	46bd      	mov	sp, r7
    9562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9566:	bf00      	nop
    9568:	0002e9d4 	.word	0x0002e9d4
    956c:	0002e9d6 	.word	0x0002e9d6
    9570:	0002e9d8 	.word	0x0002e9d8
    9574:	0002e9da 	.word	0x0002e9da
    9578:	0002e9dc 	.word	0x0002e9dc
    957c:	0002e9de 	.word	0x0002e9de
    9580:	0002d4b0 	.word	0x0002d4b0
    9584:	0002d4cc 	.word	0x0002d4cc

00009588 <build_prologue>:
 *
 * When popping registers off the stack at the end of a BPF function, we
 * reference them via the current ARM_FP register.
 */
// init eBPF stack and args
static void build_prologue(jit_state *state) {
    9588:	b580      	push	{r7, lr}
    958a:	b084      	sub	sp, #16
    958c:	af00      	add	r7, sp, #0
    958e:	6078      	str	r0, [r7, #4]
    const s8 *bpf_r1 = bpf2a32[BPF_REG_1];
    9590:	4b23      	ldr	r3, [pc, #140]	; (9620 <build_prologue+0x98>)
    9592:	60fb      	str	r3, [r7, #12]
	const s8 *bpf_fp = bpf2a32[BPF_REG_FP];
    9594:	4b23      	ldr	r3, [pc, #140]	; (9624 <build_prologue+0x9c>)
    9596:	60bb      	str	r3, [r7, #8]
    // 1. set stack SP to r10, USE SP
    // emit(ARM_PUSH(CALLEE_PUSH_MASK), ctx);
    // emit(ARM_MOV_R(ARM_FP, ARM_SP), ctx);
    // push {r4-r9, lr} , r4-r9, lr in used. aligned -> 8 reg
    emit4(state, _thumb32_PUSHW_T2(CALLEE_PUSH_MASK));
    9598:	f644 30f0 	movw	r0, #19440	; 0x4bf0
    959c:	f010 fd5f 	bl	1a05e <_thumb32_PUSHW_T2>
    95a0:	4603      	mov	r3, r0
    95a2:	4619      	mov	r1, r3
    95a4:	6878      	ldr	r0, [r7, #4]
    95a6:	f010 ffae 	bl	1a506 <emit4>
    _emit_mov_reg(state, ARM_SP, ARM_FP);
    95aa:	220b      	movs	r2, #11
    95ac:	210d      	movs	r1, #13
    95ae:	6878      	ldr	r0, [r7, #4]
    95b0:	f011 fd14 	bl	1afdc <_emit_mov_reg>
    // stack for registers
    // emit(state, ARM_SUB_I(bpf_r1_lo, ARM_SP, SCRATCH_SIZE));
    emit_mov_imm(state, bpf_r1[0], 0);
    95b4:	68fb      	ldr	r3, [r7, #12]
    95b6:	f993 3000 	ldrsb.w	r3, [r3]
    95ba:	b2db      	uxtb	r3, r3
    95bc:	2200      	movs	r2, #0
    95be:	4619      	mov	r1, r3
    95c0:	6878      	ldr	r0, [r7, #4]
    95c2:	f011 fc85 	bl	1aed0 <emit_mov_imm>
    _emit_sub_imm(state, bpf_r1[1], ARM_SP, SCRATCH_SIZE);
    95c6:	68fb      	ldr	r3, [r7, #12]
    95c8:	3301      	adds	r3, #1
    95ca:	f993 1000 	ldrsb.w	r1, [r3]
    95ce:	2350      	movs	r3, #80	; 0x50
    95d0:	220d      	movs	r2, #13
    95d2:	6878      	ldr	r0, [r7, #4]
    95d4:	f7fd ff84 	bl	74e0 <_emit_sub_imm>

    // 2. create stack space
    // emit(state, ARM_SUB_I(ARM_SP, ARM_SP, EBPF_STACK_SIZE));
    _emit_sub_imm(state, ARM_SP, ARM_SP, EBPF_STACK_SIZE);
    95d8:	f44f 7380 	mov.w	r3, #256	; 0x100
    95dc:	220d      	movs	r2, #13
    95de:	210d      	movs	r1, #13
    95e0:	6878      	ldr	r0, [r7, #4]
    95e2:	f7fd ff7d 	bl	74e0 <_emit_sub_imm>

    /* Set up BPF prog stack base register */
	// emit_a32_mov_r64(state, true, bpf_fp, bpf_r1);
    emit_mov_reg64(state, true, bpf_fp, bpf_r1);
    95e6:	68fb      	ldr	r3, [r7, #12]
    95e8:	68ba      	ldr	r2, [r7, #8]
    95ea:	2101      	movs	r1, #1
    95ec:	6878      	ldr	r0, [r7, #4]
    95ee:	f7ff f9f7 	bl	89e0 <emit_mov_reg64>
    // 3. mov arm_r0 to BPF_R1
    _emit_mov_reg(state, ARM_R0, bpf_r1[1]);
    95f2:	68fb      	ldr	r3, [r7, #12]
    95f4:	3301      	adds	r3, #1
    95f6:	f993 3000 	ldrsb.w	r3, [r3]
    95fa:	461a      	mov	r2, r3
    95fc:	2100      	movs	r1, #0
    95fe:	6878      	ldr	r0, [r7, #4]
    9600:	f011 fcec 	bl	1afdc <_emit_mov_reg>
    emit_mov_imm(state, bpf_r1[0], 0);
    9604:	68fb      	ldr	r3, [r7, #12]
    9606:	f993 3000 	ldrsb.w	r3, [r3]
    960a:	b2db      	uxtb	r3, r3
    960c:	2200      	movs	r2, #0
    960e:	4619      	mov	r1, r3
    9610:	6878      	ldr	r0, [r7, #4]
    9612:	f011 fc5d 	bl	1aed0 <emit_mov_imm>
}
    9616:	bf00      	nop
    9618:	3710      	adds	r7, #16
    961a:	46bd      	mov	sp, r7
    961c:	bd80      	pop	{r7, pc}
    961e:	bf00      	nop
    9620:	0002e9d6 	.word	0x0002e9d6
    9624:	0002e9e8 	.word	0x0002e9e8

00009628 <build_body>:

static void build_body(jit_state *state) {
    9628:	b580      	push	{r7, lr}
    962a:	b088      	sub	sp, #32
    962c:	af00      	add	r7, sp, #0
    962e:	6078      	str	r0, [r7, #4]
    ebpf_inst *insts = state->insts;
    9630:	687b      	ldr	r3, [r7, #4]
    9632:	681b      	ldr	r3, [r3, #0]
    9634:	61bb      	str	r3, [r7, #24]
    int inst_num = state->inst_num;
    9636:	687b      	ldr	r3, [r7, #4]
    9638:	685b      	ldr	r3, [r3, #4]
    963a:	617b      	str	r3, [r7, #20]
    // DEBUG_LOG("IMM val: 5=%d 6=%d\n", insts[5].imm, insts[6].imm);
    for (int i = 0; i < inst_num; i++) {
    963c:	2300      	movs	r3, #0
    963e:	61fb      	str	r3, [r7, #28]
    9640:	e03e      	b.n	96c0 <build_body+0x98>
        ebpf_inst *inst = &insts[i];
    9642:	69fb      	ldr	r3, [r7, #28]
    9644:	00db      	lsls	r3, r3, #3
    9646:	69ba      	ldr	r2, [r7, #24]
    9648:	4413      	add	r3, r2
    964a:	613b      	str	r3, [r7, #16]
        int ret = build_inst(state, inst);
    964c:	6939      	ldr	r1, [r7, #16]
    964e:	6878      	ldr	r0, [r7, #4]
    9650:	f7ff fae2 	bl	8c18 <build_inst>
    9654:	60f8      	str	r0, [r7, #12]
        if (ret > 0) { // load value, skip
    9656:	68fb      	ldr	r3, [r7, #12]
    9658:	2b00      	cmp	r3, #0
    965a:	dd14      	ble.n	9686 <build_body+0x5e>
            i++;
    965c:	69fb      	ldr	r3, [r7, #28]
    965e:	3301      	adds	r3, #1
    9660:	61fb      	str	r3, [r7, #28]
            if (!state->needGen) {
    9662:	687b      	ldr	r3, [r7, #4]
    9664:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    9668:	f083 0301 	eor.w	r3, r3, #1
    966c:	b2db      	uxtb	r3, r3
    966e:	2b00      	cmp	r3, #0
    9670:	d022      	beq.n	96b8 <build_body+0x90>
                state->offsets[i] = state->idx;
    9672:	687b      	ldr	r3, [r7, #4]
    9674:	6919      	ldr	r1, [r3, #16]
    9676:	687b      	ldr	r3, [r7, #4]
    9678:	69da      	ldr	r2, [r3, #28]
    967a:	69fb      	ldr	r3, [r7, #28]
    967c:	009b      	lsls	r3, r3, #2
    967e:	4413      	add	r3, r2
    9680:	460a      	mov	r2, r1
    9682:	601a      	str	r2, [r3, #0]
            }
            // DEBUG_LOG("ADDDDDDDDDDDDDD: %d\n", i - 1);
            continue;
    9684:	e018      	b.n	96b8 <build_body+0x90>
        }
        if (!state->needGen) { // offset = end
    9686:	687b      	ldr	r3, [r7, #4]
    9688:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    968c:	f083 0301 	eor.w	r3, r3, #1
    9690:	b2db      	uxtb	r3, r3
    9692:	2b00      	cmp	r3, #0
    9694:	d008      	beq.n	96a8 <build_body+0x80>
            state->offsets[i] = state->idx;
    9696:	687b      	ldr	r3, [r7, #4]
    9698:	6919      	ldr	r1, [r3, #16]
    969a:	687b      	ldr	r3, [r7, #4]
    969c:	69da      	ldr	r2, [r3, #28]
    969e:	69fb      	ldr	r3, [r7, #28]
    96a0:	009b      	lsls	r3, r3, #2
    96a2:	4413      	add	r3, r2
    96a4:	460a      	mov	r2, r1
    96a6:	601a      	str	r2, [r3, #0]
        }
        if (ret < 0) {
    96a8:	68fb      	ldr	r3, [r7, #12]
    96aa:	2b00      	cmp	r3, #0
    96ac:	da05      	bge.n	96ba <build_body+0x92>
            DEBUG_LOG("ERROR: %d\n", ret);
    96ae:	68f9      	ldr	r1, [r7, #12]
    96b0:	4807      	ldr	r0, [pc, #28]	; (96d0 <build_body+0xa8>)
    96b2:	f00f fd08 	bl	190c6 <debug_log>
            return;
    96b6:	e007      	b.n	96c8 <build_body+0xa0>
            continue;
    96b8:	bf00      	nop
    for (int i = 0; i < inst_num; i++) {
    96ba:	69fb      	ldr	r3, [r7, #28]
    96bc:	3301      	adds	r3, #1
    96be:	61fb      	str	r3, [r7, #28]
    96c0:	69fa      	ldr	r2, [r7, #28]
    96c2:	697b      	ldr	r3, [r7, #20]
    96c4:	429a      	cmp	r2, r3
    96c6:	dbbc      	blt.n	9642 <build_body+0x1a>
        }
    }
}
    96c8:	3720      	adds	r7, #32
    96ca:	46bd      	mov	sp, r7
    96cc:	bd80      	pop	{r7, pc}
    96ce:	bf00      	nop
    96d0:	0002d4e0 	.word	0x0002d4e0

000096d4 <main>:

static void load_fixed_patch_0(void);
static void ebpf_test();
// extern void arm_core_mpu_disable();
void main(void)
{
    96d4:	b580      	push	{r7, lr}
    96d6:	af00      	add	r7, sp, #0
	#define USE_JIT
	#ifdef USE_JIT
	// disable mpu
	arm_core_mpu_disable();
    96d8:	f008 fdf8 	bl	122cc <arm_core_mpu_disable>
	// https://lists.zephyrproject.org/g/users/topic/random_fault_exception/30793151?p=
	// CONFIG_NO_OPTIMIZATIONS=y
	#endif

	console_init();
    96dc:	f004 fd7e 	bl	e1dc <console_init>
	//printk("Hello World! %s\n", CONFIG_BOARD);
	k_thread_start(cli_thread);
    96e0:	4b0a      	ldr	r3, [pc, #40]	; (970c <main+0x38>)
    96e2:	4618      	mov	r0, r3
    96e4:	f011 fd66 	bl	1b1b4 <k_thread_start>

	//run_coap_server();
	profile_add_event("micro profile dynamic start");
    96e8:	4809      	ldr	r0, [pc, #36]	; (9710 <main+0x3c>)
    96ea:	f7fa fe67 	bl	43bc <profile_add_event>
	profile_add_event("micro profile fixed start");
    96ee:	4809      	ldr	r0, [pc, #36]	; (9714 <main+0x40>)
    96f0:	f7fa fe64 	bl	43bc <profile_add_event>
	profile_add_event("uart print profile start");
    96f4:	4808      	ldr	r0, [pc, #32]	; (9718 <main+0x44>)
    96f6:	f7fa fe61 	bl	43bc <profile_add_event>
	profile_add_event("eBPF exec time evaluation start");
    96fa:	4808      	ldr	r0, [pc, #32]	; (971c <main+0x48>)
    96fc:	f7fa fe5e 	bl	43bc <profile_add_event>

	#ifdef DEV_COAP
	// run_coap_server();
	k_thread_start(coap_server_thread);
    9700:	4b07      	ldr	r3, [pc, #28]	; (9720 <main+0x4c>)
    9702:	4618      	mov	r0, r3
    9704:	f011 fd56 	bl	1b1b4 <k_thread_start>
	#endif
}
    9708:	bf00      	nop
    970a:	bd80      	pop	{r7, pc}
    970c:	20002354 	.word	0x20002354
    9710:	0002d50c 	.word	0x0002d50c
    9714:	0002d528 	.word	0x0002d528
    9718:	0002d544 	.word	0x0002d544
    971c:	0002d560 	.word	0x0002d560
    9720:	200022e8 	.word	0x200022e8

00009724 <k_delayed_work_submit>:
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
    9724:	b580      	push	{r7, lr}
    9726:	b082      	sub	sp, #8
    9728:	af00      	add	r7, sp, #0
    972a:	6078      	str	r0, [r7, #4]
    972c:	6039      	str	r1, [r7, #0]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    972e:	683a      	ldr	r2, [r7, #0]
    9730:	6879      	ldr	r1, [r7, #4]
    9732:	4804      	ldr	r0, [pc, #16]	; (9744 <k_delayed_work_submit+0x20>)
    9734:	f00e fc76 	bl	18024 <k_delayed_work_submit_to_queue>
    9738:	4603      	mov	r3, r0
}
    973a:	4618      	mov	r0, r3
    973c:	3708      	adds	r7, #8
    973e:	46bd      	mov	sp, r7
    9740:	bd80      	pop	{r7, pc}
    9742:	bf00      	nop
    9744:	200061b4 	.word	0x200061b4

00009748 <coap_next_id>:
 * @brief Helper to generate message ids
 *
 * @return a new message id
 */
static inline u16_t coap_next_id(void)
{
    9748:	b480      	push	{r7}
    974a:	af00      	add	r7, sp, #0
	static u16_t message_id;

	return ++message_id;
    974c:	4b05      	ldr	r3, [pc, #20]	; (9764 <coap_next_id+0x1c>)
    974e:	881b      	ldrh	r3, [r3, #0]
    9750:	3301      	adds	r3, #1
    9752:	b29a      	uxth	r2, r3
    9754:	4b03      	ldr	r3, [pc, #12]	; (9764 <coap_next_id+0x1c>)
    9756:	801a      	strh	r2, [r3, #0]
    9758:	4b02      	ldr	r3, [pc, #8]	; (9764 <coap_next_id+0x1c>)
    975a:	881b      	ldrh	r3, [r3, #0]
}
    975c:	4618      	mov	r0, r3
    975e:	46bd      	mov	sp, r7
    9760:	bc80      	pop	{r7}
    9762:	4770      	bx	lr
    9764:	20006234 	.word	0x20006234

00009768 <start_coap_server>:
}
#endif

#if defined(CONFIG_NET_IPV4)
static int start_coap_server(void)
{
    9768:	b580      	push	{r7, lr}
    976a:	b088      	sub	sp, #32
    976c:	af00      	add	r7, sp, #0
	struct sockaddr_in addr;
	int r;

	memset(&addr, 0, sizeof(addr));
    976e:	f107 030c 	add.w	r3, r7, #12
    9772:	2208      	movs	r2, #8
    9774:	2100      	movs	r1, #0
    9776:	4618      	mov	r0, r3
    9778:	f7f8 fc9e 	bl	20b8 <memset>
	addr.sin_family = AF_INET;
    977c:	2301      	movs	r3, #1
    977e:	81bb      	strh	r3, [r7, #12]
	addr.sin_port = htons(MY_COAP_PORT);
    9780:	f243 3316 	movw	r3, #13078	; 0x3316
    9784:	81fb      	strh	r3, [r7, #14]

	sock = socket(addr.sin_family, SOCK_DGRAM, IPPROTO_UDP);
    9786:	89bb      	ldrh	r3, [r7, #12]
    9788:	2211      	movs	r2, #17
    978a:	2102      	movs	r1, #2
    978c:	4618      	mov	r0, r3
    978e:	f011 fd56 	bl	1b23e <socket>
    9792:	4602      	mov	r2, r0
    9794:	4b15      	ldr	r3, [pc, #84]	; (97ec <start_coap_server+0x84>)
    9796:	601a      	str	r2, [r3, #0]
	if (sock < 0) {
    9798:	4b14      	ldr	r3, [pc, #80]	; (97ec <start_coap_server+0x84>)
    979a:	681b      	ldr	r3, [r3, #0]
    979c:	2b00      	cmp	r3, #0
    979e:	da09      	bge.n	97b4 <start_coap_server+0x4c>
		LOG_ERR("Failed to create UDP socket %d", errno);
    97a0:	f011 fd46 	bl	1b230 <_is_user_context>
    97a4:	4603      	mov	r3, r0
    97a6:	75fb      	strb	r3, [r7, #23]
		return -errno;
    97a8:	f018 f8a4 	bl	218f4 <__errno>
    97ac:	4603      	mov	r3, r0
    97ae:	681b      	ldr	r3, [r3, #0]
    97b0:	425b      	negs	r3, r3
    97b2:	e016      	b.n	97e2 <start_coap_server+0x7a>
	}

	r = bind(sock, (struct sockaddr *)&addr, sizeof(addr));
    97b4:	4b0d      	ldr	r3, [pc, #52]	; (97ec <start_coap_server+0x84>)
    97b6:	681b      	ldr	r3, [r3, #0]
    97b8:	f107 010c 	add.w	r1, r7, #12
    97bc:	2208      	movs	r2, #8
    97be:	4618      	mov	r0, r3
    97c0:	f011 fd4d 	bl	1b25e <bind>
    97c4:	61b8      	str	r0, [r7, #24]
	if (r < 0) {
    97c6:	69bb      	ldr	r3, [r7, #24]
    97c8:	2b00      	cmp	r3, #0
    97ca:	da09      	bge.n	97e0 <start_coap_server+0x78>
		LOG_ERR("Failed to bind UDP socket %d", errno);
    97cc:	f011 fd30 	bl	1b230 <_is_user_context>
    97d0:	4603      	mov	r3, r0
    97d2:	77fb      	strb	r3, [r7, #31]
		return -errno;
    97d4:	f018 f88e 	bl	218f4 <__errno>
    97d8:	4603      	mov	r3, r0
    97da:	681b      	ldr	r3, [r3, #0]
    97dc:	425b      	negs	r3, r3
    97de:	e000      	b.n	97e2 <start_coap_server+0x7a>
	}

	return 0;
    97e0:	2300      	movs	r3, #0
}
    97e2:	4618      	mov	r0, r3
    97e4:	3720      	adds	r7, #32
    97e6:	46bd      	mov	sp, r7
    97e8:	bd80      	pop	{r7, pc}
    97ea:	bf00      	nop
    97ec:	200023c0 	.word	0x200023c0

000097f0 <send_coap_reply>:
#endif

static int send_coap_reply(struct coap_packet *cpkt,
			   const struct sockaddr *addr,
			   socklen_t addr_len)
{
    97f0:	b580      	push	{r7, lr}
    97f2:	b088      	sub	sp, #32
    97f4:	af02      	add	r7, sp, #8
    97f6:	60f8      	str	r0, [r7, #12]
    97f8:	60b9      	str	r1, [r7, #8]
    97fa:	607a      	str	r2, [r7, #4]
	int r;

	net_hexdump("Response", cpkt->data, cpkt->offset);
    97fc:	68fb      	ldr	r3, [r7, #12]
    97fe:	6819      	ldr	r1, [r3, #0]
    9800:	68fb      	ldr	r3, [r7, #12]
    9802:	889b      	ldrh	r3, [r3, #4]
    9804:	461a      	mov	r2, r3
    9806:	4812      	ldr	r0, [pc, #72]	; (9850 <send_coap_reply+0x60>)
    9808:	f011 fdc1 	bl	1b38e <net_hexdump>

	r = sendto(sock, cpkt->data, cpkt->offset, 0, addr, addr_len);
    980c:	4b11      	ldr	r3, [pc, #68]	; (9854 <send_coap_reply+0x64>)
    980e:	6818      	ldr	r0, [r3, #0]
    9810:	68fb      	ldr	r3, [r7, #12]
    9812:	6819      	ldr	r1, [r3, #0]
    9814:	68fb      	ldr	r3, [r7, #12]
    9816:	889b      	ldrh	r3, [r3, #4]
    9818:	461a      	mov	r2, r3
    981a:	687b      	ldr	r3, [r7, #4]
    981c:	9301      	str	r3, [sp, #4]
    981e:	68bb      	ldr	r3, [r7, #8]
    9820:	9300      	str	r3, [sp, #0]
    9822:	2300      	movs	r3, #0
    9824:	f011 fd2b 	bl	1b27e <sendto>
    9828:	6178      	str	r0, [r7, #20]
	if (r < 0) {
    982a:	697b      	ldr	r3, [r7, #20]
    982c:	2b00      	cmp	r3, #0
    982e:	da09      	bge.n	9844 <send_coap_reply+0x54>
		LOG_ERR("Failed to send %d", errno);
    9830:	f011 fcfe 	bl	1b230 <_is_user_context>
    9834:	4603      	mov	r3, r0
    9836:	74fb      	strb	r3, [r7, #19]
		r = -errno;
    9838:	f018 f85c 	bl	218f4 <__errno>
    983c:	4603      	mov	r3, r0
    983e:	681b      	ldr	r3, [r3, #0]
    9840:	425b      	negs	r3, r3
    9842:	617b      	str	r3, [r7, #20]
	}

	return r;
    9844:	697b      	ldr	r3, [r7, #20]
}
    9846:	4618      	mov	r0, r3
    9848:	3718      	adds	r7, #24
    984a:	46bd      	mov	sp, r7
    984c:	bd80      	pop	{r7, pc}
    984e:	bf00      	nop
    9850:	0002d580 	.word	0x0002d580
    9854:	200023c0 	.word	0x200023c0

00009858 <piggyback_get>:
}

static int piggyback_get(struct coap_resource *resource,
			 struct coap_packet *request,
			 struct sockaddr *addr, socklen_t addr_len)
{
    9858:	b580      	push	{r7, lr}
    985a:	b0a6      	sub	sp, #152	; 0x98
    985c:	af06      	add	r7, sp, #24
    985e:	60f8      	str	r0, [r7, #12]
    9860:	60b9      	str	r1, [r7, #8]
    9862:	607a      	str	r2, [r7, #4]
    9864:	603b      	str	r3, [r7, #0]
	u8_t code;
	u8_t type;
	u8_t tkl;
	int r;

	code = coap_header_get_code(request);
    9866:	68b8      	ldr	r0, [r7, #8]
    9868:	f014 fb00 	bl	1de6c <coap_header_get_code>
    986c:	4603      	mov	r3, r0
    986e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	type = coap_header_get_type(request);
    9872:	68b8      	ldr	r0, [r7, #8]
    9874:	f014 faa7 	bl	1ddc6 <coap_header_get_type>
    9878:	4603      	mov	r3, r0
    987a:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
	id = coap_header_get_id(request);
    987e:	68b8      	ldr	r0, [r7, #8]
    9880:	f014 fb21 	bl	1dec6 <coap_header_get_id>
    9884:	4603      	mov	r3, r0
    9886:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	tkl = coap_header_get_token(request, token);
    988a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    988e:	4619      	mov	r1, r3
    9890:	68b8      	ldr	r0, [r7, #8]
    9892:	f014 fac7 	bl	1de24 <coap_header_get_token>
    9896:	4603      	mov	r3, r0
    9898:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

	LOG_INF("*******");
    989c:	f011 fcc8 	bl	1b230 <_is_user_context>
    98a0:	4603      	mov	r3, r0
    98a2:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	LOG_INF("type: %u code %u id %u", type, code, id);
    98a6:	f011 fcc3 	bl	1b230 <_is_user_context>
    98aa:	4603      	mov	r3, r0
    98ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	LOG_INF("*******");
    98b0:	f011 fcbe 	bl	1b230 <_is_user_context>
    98b4:	4603      	mov	r3, r0
    98b6:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71

	if (type == COAP_TYPE_CON) {
    98ba:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
    98be:	2b00      	cmp	r3, #0
    98c0:	d103      	bne.n	98ca <piggyback_get+0x72>
		type = COAP_TYPE_ACK;
    98c2:	2302      	movs	r3, #2
    98c4:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
    98c8:	e002      	b.n	98d0 <piggyback_get+0x78>
	} else {
		type = COAP_TYPE_NON_CON;
    98ca:	2301      	movs	r3, #1
    98cc:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
	}

	data = (u8_t *)k_malloc(MAX_COAP_MSG_LEN);
    98d0:	f44f 7080 	mov.w	r0, #256	; 0x100
    98d4:	f00d f84a 	bl	1696c <k_malloc>
    98d8:	6778      	str	r0, [r7, #116]	; 0x74
	if (!data) {
    98da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    98dc:	2b00      	cmp	r3, #0
    98de:	d102      	bne.n	98e6 <piggyback_get+0x8e>
		return -ENOMEM;
    98e0:	f06f 030b 	mvn.w	r3, #11
    98e4:	e068      	b.n	99b8 <piggyback_get+0x160>
	}

	r = coap_packet_init(&response, data, MAX_COAP_MSG_LEN,
    98e6:	f107 005c 	add.w	r0, r7, #92	; 0x5c
    98ea:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
    98ee:	9304      	str	r3, [sp, #16]
    98f0:	2345      	movs	r3, #69	; 0x45
    98f2:	9303      	str	r3, [sp, #12]
    98f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    98f8:	9302      	str	r3, [sp, #8]
    98fa:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
    98fe:	9301      	str	r3, [sp, #4]
    9900:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
    9904:	9300      	str	r3, [sp, #0]
    9906:	2301      	movs	r3, #1
    9908:	f44f 7280 	mov.w	r2, #256	; 0x100
    990c:	6f79      	ldr	r1, [r7, #116]	; 0x74
    990e:	f013 fd70 	bl	1d3f2 <coap_packet_init>
    9912:	67f8      	str	r0, [r7, #124]	; 0x7c
			     1, type, tkl, (u8_t *)token,
			     COAP_RESPONSE_CODE_CONTENT, id);
	if (r < 0) {
    9914:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    9916:	2b00      	cmp	r3, #0
    9918:	db41      	blt.n	999e <piggyback_get+0x146>
		goto end;
	}

	r = coap_packet_append_option(&response, COAP_OPTION_CONTENT_FORMAT,
    991a:	f107 005c 	add.w	r0, r7, #92	; 0x5c
    991e:	2301      	movs	r3, #1
    9920:	4a27      	ldr	r2, [pc, #156]	; (99c0 <piggyback_get+0x168>)
    9922:	210c      	movs	r1, #12
    9924:	f013 ff04 	bl	1d730 <coap_packet_append_option>
    9928:	67f8      	str	r0, [r7, #124]	; 0x7c
				      &plain_text_format,
				      sizeof(plain_text_format));
	if (r < 0) {
    992a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    992c:	2b00      	cmp	r3, #0
    992e:	db38      	blt.n	99a2 <piggyback_get+0x14a>
		goto end;
	}

	r = coap_packet_append_payload_marker(&response);
    9930:	f107 035c 	add.w	r3, r7, #92	; 0x5c
    9934:	4618      	mov	r0, r3
    9936:	f013 ff54 	bl	1d7e2 <coap_packet_append_payload_marker>
    993a:	67f8      	str	r0, [r7, #124]	; 0x7c
	if (r < 0) {
    993c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    993e:	2b00      	cmp	r3, #0
    9940:	db31      	blt.n	99a6 <piggyback_get+0x14e>
		goto end;
	}

	/* The response that coap-client expects */
	r = snprintk((char *) payload, sizeof(payload),
    9942:	f897 1079 	ldrb.w	r1, [r7, #121]	; 0x79
    9946:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
    994a:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
    994e:	f107 0034 	add.w	r0, r7, #52	; 0x34
    9952:	9201      	str	r2, [sp, #4]
    9954:	9300      	str	r3, [sp, #0]
    9956:	460b      	mov	r3, r1
    9958:	4a1a      	ldr	r2, [pc, #104]	; (99c4 <piggyback_get+0x16c>)
    995a:	2128      	movs	r1, #40	; 0x28
    995c:	f012 fc2f 	bl	1c1be <snprintk>
    9960:	67f8      	str	r0, [r7, #124]	; 0x7c
		     "Type: %u\nCode: %u\nMID: %u\n", type, code, id);
	if (r < 0) {
    9962:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    9964:	2b00      	cmp	r3, #0
    9966:	db20      	blt.n	99aa <piggyback_get+0x152>
		goto end;
	}

	r = coap_packet_append_payload(&response, (u8_t *)payload,
				       strlen(payload));
    9968:	f107 0334 	add.w	r3, r7, #52	; 0x34
    996c:	4618      	mov	r0, r3
    996e:	f7f8 fbc2 	bl	20f6 <strlen>
    9972:	4603      	mov	r3, r0
	r = coap_packet_append_payload(&response, (u8_t *)payload,
    9974:	b29a      	uxth	r2, r3
    9976:	f107 0134 	add.w	r1, r7, #52	; 0x34
    997a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
    997e:	4618      	mov	r0, r3
    9980:	f013 ff42 	bl	1d808 <coap_packet_append_payload>
    9984:	67f8      	str	r0, [r7, #124]	; 0x7c
	if (r < 0) {
    9986:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    9988:	2b00      	cmp	r3, #0
    998a:	db10      	blt.n	99ae <piggyback_get+0x156>
		goto end;
	}

	r = send_coap_reply(&response, addr, addr_len);
    998c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
    9990:	683a      	ldr	r2, [r7, #0]
    9992:	6879      	ldr	r1, [r7, #4]
    9994:	4618      	mov	r0, r3
    9996:	f7ff ff2b 	bl	97f0 <send_coap_reply>
    999a:	67f8      	str	r0, [r7, #124]	; 0x7c
    999c:	e008      	b.n	99b0 <piggyback_get+0x158>
		goto end;
    999e:	bf00      	nop
    99a0:	e006      	b.n	99b0 <piggyback_get+0x158>
		goto end;
    99a2:	bf00      	nop
    99a4:	e004      	b.n	99b0 <piggyback_get+0x158>
		goto end;
    99a6:	bf00      	nop
    99a8:	e002      	b.n	99b0 <piggyback_get+0x158>
		goto end;
    99aa:	bf00      	nop
    99ac:	e000      	b.n	99b0 <piggyback_get+0x158>
		goto end;
    99ae:	bf00      	nop

end:
	k_free(data);
    99b0:	6f78      	ldr	r0, [r7, #116]	; 0x74
    99b2:	f020 fb0e 	bl	29fd2 <k_free>

	return r;
    99b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
    99b8:	4618      	mov	r0, r3
    99ba:	3780      	adds	r7, #128	; 0x80
    99bc:	46bd      	mov	sp, r7
    99be:	bd80      	pop	{r7, pc}
    99c0:	0002f05c 	.word	0x0002f05c
    99c4:	0002d58c 	.word	0x0002d58c

000099c8 <test_put>:
}

static int test_put(struct coap_resource *resource,
		    struct coap_packet *request,
		    struct sockaddr *addr, socklen_t addr_len)
{
    99c8:	b580      	push	{r7, lr}
    99ca:	b09e      	sub	sp, #120	; 0x78
    99cc:	af06      	add	r7, sp, #24
    99ce:	60f8      	str	r0, [r7, #12]
    99d0:	60b9      	str	r1, [r7, #8]
    99d2:	607a      	str	r2, [r7, #4]
    99d4:	603b      	str	r3, [r7, #0]
	u8_t type;
	u8_t tkl;
	u16_t id;
	int r;

	code = coap_header_get_code(request);
    99d6:	68b8      	ldr	r0, [r7, #8]
    99d8:	f014 fa48 	bl	1de6c <coap_header_get_code>
    99dc:	4603      	mov	r3, r0
    99de:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	type = coap_header_get_type(request);
    99e2:	68b8      	ldr	r0, [r7, #8]
    99e4:	f014 f9ef 	bl	1ddc6 <coap_header_get_type>
    99e8:	4603      	mov	r3, r0
    99ea:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	id = coap_header_get_id(request);
    99ee:	68b8      	ldr	r0, [r7, #8]
    99f0:	f014 fa69 	bl	1dec6 <coap_header_get_id>
    99f4:	4603      	mov	r3, r0
    99f6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	tkl = coap_header_get_token(request, token);
    99fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
    99fe:	4619      	mov	r1, r3
    9a00:	68b8      	ldr	r0, [r7, #8]
    9a02:	f014 fa0f 	bl	1de24 <coap_header_get_token>
    9a06:	4603      	mov	r3, r0
    9a08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	LOG_INF("*******");
    9a0c:	f011 fc10 	bl	1b230 <_is_user_context>
    9a10:	4603      	mov	r3, r0
    9a12:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	LOG_INF("type: %u code %u id %u", type, code, id);
    9a16:	f011 fc0b 	bl	1b230 <_is_user_context>
    9a1a:	4603      	mov	r3, r0
    9a1c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	LOG_INF("*******");
    9a20:	f011 fc06 	bl	1b230 <_is_user_context>
    9a24:	4603      	mov	r3, r0
    9a26:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

	payload = coap_packet_get_payload(request, &payload_len);
    9a2a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
    9a2e:	4619      	mov	r1, r3
    9a30:	68b8      	ldr	r0, [r7, #8]
    9a32:	f014 fa68 	bl	1df06 <coap_packet_get_payload>
    9a36:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (payload) {
    9a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9a3a:	2b00      	cmp	r3, #0
    9a3c:	d005      	beq.n	9a4a <test_put+0x82>
		net_hexdump("PUT Payload", payload, payload_len);
    9a3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    9a40:	461a      	mov	r2, r3
    9a42:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    9a44:	4822      	ldr	r0, [pc, #136]	; (9ad0 <test_put+0x108>)
    9a46:	f011 fca2 	bl	1b38e <net_hexdump>
	}

	if (type == COAP_TYPE_CON) {
    9a4a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
    9a4e:	2b00      	cmp	r3, #0
    9a50:	d103      	bne.n	9a5a <test_put+0x92>
		type = COAP_TYPE_ACK;
    9a52:	2302      	movs	r3, #2
    9a54:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    9a58:	e002      	b.n	9a60 <test_put+0x98>
	} else {
		type = COAP_TYPE_NON_CON;
    9a5a:	2301      	movs	r3, #1
    9a5c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	}

	data = (u8_t *)k_malloc(MAX_COAP_MSG_LEN);
    9a60:	f44f 7080 	mov.w	r0, #256	; 0x100
    9a64:	f00c ff82 	bl	1696c <k_malloc>
    9a68:	6538      	str	r0, [r7, #80]	; 0x50
	if (!data) {
    9a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9a6c:	2b00      	cmp	r3, #0
    9a6e:	d102      	bne.n	9a76 <test_put+0xae>
		return -ENOMEM;
    9a70:	f06f 030b 	mvn.w	r3, #11
    9a74:	e027      	b.n	9ac6 <test_put+0xfe>
	}

	r = coap_packet_init(&response, data, MAX_COAP_MSG_LEN,
    9a76:	f107 0038 	add.w	r0, r7, #56	; 0x38
    9a7a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
    9a7e:	9304      	str	r3, [sp, #16]
    9a80:	2344      	movs	r3, #68	; 0x44
    9a82:	9303      	str	r3, [sp, #12]
    9a84:	f107 0330 	add.w	r3, r7, #48	; 0x30
    9a88:	9302      	str	r3, [sp, #8]
    9a8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
    9a8e:	9301      	str	r3, [sp, #4]
    9a90:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
    9a94:	9300      	str	r3, [sp, #0]
    9a96:	2301      	movs	r3, #1
    9a98:	f44f 7280 	mov.w	r2, #256	; 0x100
    9a9c:	6d39      	ldr	r1, [r7, #80]	; 0x50
    9a9e:	f013 fca8 	bl	1d3f2 <coap_packet_init>
    9aa2:	65f8      	str	r0, [r7, #92]	; 0x5c
			     1, type, tkl, (u8_t *)token,
			     COAP_RESPONSE_CODE_CHANGED, id);
	if (r < 0) {
    9aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    9aa6:	2b00      	cmp	r3, #0
    9aa8:	db08      	blt.n	9abc <test_put+0xf4>
		goto end;
	}

	r = send_coap_reply(&response, addr, addr_len);
    9aaa:	f107 0338 	add.w	r3, r7, #56	; 0x38
    9aae:	683a      	ldr	r2, [r7, #0]
    9ab0:	6879      	ldr	r1, [r7, #4]
    9ab2:	4618      	mov	r0, r3
    9ab4:	f7ff fe9c 	bl	97f0 <send_coap_reply>
    9ab8:	65f8      	str	r0, [r7, #92]	; 0x5c
    9aba:	e000      	b.n	9abe <test_put+0xf6>
		goto end;
    9abc:	bf00      	nop

end:
	k_free(data);
    9abe:	6d38      	ldr	r0, [r7, #80]	; 0x50
    9ac0:	f020 fa87 	bl	29fd2 <k_free>

	return r;
    9ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
    9ac6:	4618      	mov	r0, r3
    9ac8:	3760      	adds	r7, #96	; 0x60
    9aca:	46bd      	mov	sp, r7
    9acc:	bd80      	pop	{r7, pc}
    9ace:	bf00      	nop
    9ad0:	0002d5a8 	.word	0x0002d5a8

00009ad4 <test_post>:

static int test_post(struct coap_resource *resource,
		     struct coap_packet *request,
		     struct sockaddr *addr, socklen_t addr_len)
{
    9ad4:	b590      	push	{r4, r7, lr}
    9ad6:	b09f      	sub	sp, #124	; 0x7c
    9ad8:	af06      	add	r7, sp, #24
    9ada:	60f8      	str	r0, [r7, #12]
    9adc:	60b9      	str	r1, [r7, #8]
    9ade:	607a      	str	r2, [r7, #4]
    9ae0:	603b      	str	r3, [r7, #0]
	u8_t type;
	u8_t tkl;
	u16_t id;
	int r;

	code = coap_header_get_code(request);
    9ae2:	68b8      	ldr	r0, [r7, #8]
    9ae4:	f014 f9c2 	bl	1de6c <coap_header_get_code>
    9ae8:	4603      	mov	r3, r0
    9aea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	type = coap_header_get_type(request);
    9aee:	68b8      	ldr	r0, [r7, #8]
    9af0:	f014 f969 	bl	1ddc6 <coap_header_get_type>
    9af4:	4603      	mov	r3, r0
    9af6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	id = coap_header_get_id(request);
    9afa:	68b8      	ldr	r0, [r7, #8]
    9afc:	f014 f9e3 	bl	1dec6 <coap_header_get_id>
    9b00:	4603      	mov	r3, r0
    9b02:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	tkl = coap_header_get_token(request, token);
    9b06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    9b0a:	4619      	mov	r1, r3
    9b0c:	68b8      	ldr	r0, [r7, #8]
    9b0e:	f014 f989 	bl	1de24 <coap_header_get_token>
    9b12:	4603      	mov	r3, r0
    9b14:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	LOG_INF("*******");
    9b18:	f011 fb8a 	bl	1b230 <_is_user_context>
    9b1c:	4603      	mov	r3, r0
    9b1e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	LOG_INF("type: %u code %u id %u", type, code, id);
    9b22:	f011 fb85 	bl	1b230 <_is_user_context>
    9b26:	4603      	mov	r3, r0
    9b28:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	LOG_INF("*******");
    9b2c:	f011 fb80 	bl	1b230 <_is_user_context>
    9b30:	4603      	mov	r3, r0
    9b32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	payload = coap_packet_get_payload(request, &payload_len);
    9b36:	f107 032a 	add.w	r3, r7, #42	; 0x2a
    9b3a:	4619      	mov	r1, r3
    9b3c:	68b8      	ldr	r0, [r7, #8]
    9b3e:	f014 f9e2 	bl	1df06 <coap_packet_get_payload>
    9b42:	6538      	str	r0, [r7, #80]	; 0x50
	if (payload) {
    9b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9b46:	2b00      	cmp	r3, #0
    9b48:	d005      	beq.n	9b56 <test_post+0x82>
		net_hexdump("POST Payload", payload, payload_len);
    9b4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    9b4c:	461a      	mov	r2, r3
    9b4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
    9b50:	4831      	ldr	r0, [pc, #196]	; (9c18 <test_post+0x144>)
    9b52:	f011 fc1c 	bl	1b38e <net_hexdump>
	}

	if (type == COAP_TYPE_CON) {
    9b56:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
    9b5a:	2b00      	cmp	r3, #0
    9b5c:	d103      	bne.n	9b66 <test_post+0x92>
		type = COAP_TYPE_ACK;
    9b5e:	2302      	movs	r3, #2
    9b60:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    9b64:	e002      	b.n	9b6c <test_post+0x98>
	} else {
		type = COAP_TYPE_NON_CON;
    9b66:	2301      	movs	r3, #1
    9b68:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	}

	data = (u8_t *)k_malloc(MAX_COAP_MSG_LEN);
    9b6c:	f44f 7080 	mov.w	r0, #256	; 0x100
    9b70:	f00c fefc 	bl	1696c <k_malloc>
    9b74:	65f8      	str	r0, [r7, #92]	; 0x5c
	if (!data) {
    9b76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    9b78:	2b00      	cmp	r3, #0
    9b7a:	d102      	bne.n	9b82 <test_post+0xae>
		return -ENOMEM;
    9b7c:	f06f 030b 	mvn.w	r3, #11
    9b80:	e046      	b.n	9c10 <test_post+0x13c>
	}

	r = coap_packet_init(&response, data, MAX_COAP_MSG_LEN,
    9b82:	f107 0034 	add.w	r0, r7, #52	; 0x34
    9b86:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
    9b8a:	9304      	str	r3, [sp, #16]
    9b8c:	2341      	movs	r3, #65	; 0x41
    9b8e:	9303      	str	r3, [sp, #12]
    9b90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    9b94:	9302      	str	r3, [sp, #8]
    9b96:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
    9b9a:	9301      	str	r3, [sp, #4]
    9b9c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
    9ba0:	9300      	str	r3, [sp, #0]
    9ba2:	2301      	movs	r3, #1
    9ba4:	f44f 7280 	mov.w	r2, #256	; 0x100
    9ba8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    9baa:	f013 fc22 	bl	1d3f2 <coap_packet_init>
    9bae:	6478      	str	r0, [r7, #68]	; 0x44
			     1, type, tkl, (u8_t *)token,
			     COAP_RESPONSE_CODE_CREATED, id);
	if (r < 0) {
    9bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9bb2:	2b00      	cmp	r3, #0
    9bb4:	db25      	blt.n	9c02 <test_post+0x12e>
		goto end;
	}

	for (p = location_path; *p; p++) {
    9bb6:	4b19      	ldr	r3, [pc, #100]	; (9c1c <test_post+0x148>)
    9bb8:	64bb      	str	r3, [r7, #72]	; 0x48
    9bba:	e015      	b.n	9be8 <test_post+0x114>
		r = coap_packet_append_option(&response,
    9bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9bbe:	681c      	ldr	r4, [r3, #0]
					      COAP_OPTION_LOCATION_PATH,
					      *p, strlen(*p));
    9bc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9bc2:	681b      	ldr	r3, [r3, #0]
    9bc4:	4618      	mov	r0, r3
    9bc6:	f7f8 fa96 	bl	20f6 <strlen>
    9bca:	4603      	mov	r3, r0
		r = coap_packet_append_option(&response,
    9bcc:	b29b      	uxth	r3, r3
    9bce:	f107 0034 	add.w	r0, r7, #52	; 0x34
    9bd2:	4622      	mov	r2, r4
    9bd4:	2108      	movs	r1, #8
    9bd6:	f013 fdab 	bl	1d730 <coap_packet_append_option>
    9bda:	6478      	str	r0, [r7, #68]	; 0x44
		if (r < 0) {
    9bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9bde:	2b00      	cmp	r3, #0
    9be0:	db11      	blt.n	9c06 <test_post+0x132>
	for (p = location_path; *p; p++) {
    9be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9be4:	3304      	adds	r3, #4
    9be6:	64bb      	str	r3, [r7, #72]	; 0x48
    9be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9bea:	681b      	ldr	r3, [r3, #0]
    9bec:	2b00      	cmp	r3, #0
    9bee:	d1e5      	bne.n	9bbc <test_post+0xe8>
			goto end;
		}
	}

	r = send_coap_reply(&response, addr, addr_len);
    9bf0:	f107 0334 	add.w	r3, r7, #52	; 0x34
    9bf4:	683a      	ldr	r2, [r7, #0]
    9bf6:	6879      	ldr	r1, [r7, #4]
    9bf8:	4618      	mov	r0, r3
    9bfa:	f7ff fdf9 	bl	97f0 <send_coap_reply>
    9bfe:	6478      	str	r0, [r7, #68]	; 0x44
    9c00:	e002      	b.n	9c08 <test_post+0x134>
		goto end;
    9c02:	bf00      	nop
    9c04:	e000      	b.n	9c08 <test_post+0x134>
			goto end;
    9c06:	bf00      	nop

end:
	k_free(data);
    9c08:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    9c0a:	f020 f9e2 	bl	29fd2 <k_free>

	return r;
    9c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    9c10:	4618      	mov	r0, r3
    9c12:	3764      	adds	r7, #100	; 0x64
    9c14:	46bd      	mov	sp, r7
    9c16:	bd90      	pop	{r4, r7, pc}
    9c18:	0002d5b4 	.word	0x0002d5b4
    9c1c:	0002ea78 	.word	0x0002ea78

00009c20 <query_get>:

static int query_get(struct coap_resource *resource,
		     struct coap_packet *request,
		     struct sockaddr *addr, socklen_t addr_len)
{
    9c20:	b580      	push	{r7, lr}
    9c22:	b0c0      	sub	sp, #256	; 0x100
    9c24:	af06      	add	r7, sp, #24
    9c26:	60f8      	str	r0, [r7, #12]
    9c28:	60b9      	str	r1, [r7, #8]
    9c2a:	607a      	str	r2, [r7, #4]
    9c2c:	603b      	str	r3, [r7, #0]
	u8_t code;
	u8_t type;
	u8_t tkl;
	int i, r;

	code = coap_header_get_code(request);
    9c2e:	68b8      	ldr	r0, [r7, #8]
    9c30:	f014 f91c 	bl	1de6c <coap_header_get_code>
    9c34:	4603      	mov	r3, r0
    9c36:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
	type = coap_header_get_type(request);
    9c3a:	68b8      	ldr	r0, [r7, #8]
    9c3c:	f014 f8c3 	bl	1ddc6 <coap_header_get_type>
    9c40:	4603      	mov	r3, r0
    9c42:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
	id = coap_header_get_id(request);
    9c46:	68b8      	ldr	r0, [r7, #8]
    9c48:	f014 f93d 	bl	1dec6 <coap_header_get_id>
    9c4c:	4603      	mov	r3, r0
    9c4e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
	tkl = coap_header_get_token(request, token);
    9c52:	f107 0348 	add.w	r3, r7, #72	; 0x48
    9c56:	4619      	mov	r1, r3
    9c58:	68b8      	ldr	r0, [r7, #8]
    9c5a:	f014 f8e3 	bl	1de24 <coap_header_get_token>
    9c5e:	4603      	mov	r3, r0
    9c60:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb

	r = coap_find_options(request, COAP_OPTION_URI_QUERY, options, 4);
    9c64:	f107 0288 	add.w	r2, r7, #136	; 0x88
    9c68:	2304      	movs	r3, #4
    9c6a:	210f      	movs	r1, #15
    9c6c:	68b8      	ldr	r0, [r7, #8]
    9c6e:	f014 f85b 	bl	1dd28 <coap_find_options>
    9c72:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
	if (r < 0) {
    9c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    9c7a:	2b00      	cmp	r3, #0
    9c7c:	da02      	bge.n	9c84 <query_get+0x64>
		return -EINVAL;
    9c7e:	f06f 0315 	mvn.w	r3, #21
    9c82:	e0de      	b.n	9e42 <query_get+0x222>
	}

	LOG_INF("*******");
    9c84:	f011 fad4 	bl	1b230 <_is_user_context>
    9c88:	4603      	mov	r3, r0
    9c8a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
	LOG_INF("type: %u code %u id %u", type, code, id);
    9c8e:	f011 facf 	bl	1b230 <_is_user_context>
    9c92:	4603      	mov	r3, r0
    9c94:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
	LOG_INF("num queries: %d", r);
    9c98:	f011 faca 	bl	1b230 <_is_user_context>
    9c9c:	4603      	mov	r3, r0
    9c9e:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

	for (i = 0; i < r; i++) {
    9ca2:	2300      	movs	r3, #0
    9ca4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    9ca8:	e03d      	b.n	9d26 <query_get+0x106>
		char str[16];

		if (options[i].len + 1 > sizeof(str)) {
    9caa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
    9cae:	011b      	lsls	r3, r3, #4
    9cb0:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
    9cb4:	4413      	add	r3, r2
    9cb6:	3b5e      	subs	r3, #94	; 0x5e
    9cb8:	781b      	ldrb	r3, [r3, #0]
    9cba:	3301      	adds	r3, #1
    9cbc:	2b10      	cmp	r3, #16
    9cbe:	d905      	bls.n	9ccc <query_get+0xac>
			LOG_INF("Unexpected length of query: "
    9cc0:	f011 fab6 	bl	1b230 <_is_user_context>
    9cc4:	4603      	mov	r3, r0
    9cc6:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
    9cca:	e032      	b.n	9d32 <query_get+0x112>
				"%d (expected %zu)",
				options[i].len, sizeof(str));
			break;
		}

		memcpy(str, options[i].value, options[i].len);
    9ccc:	f107 0288 	add.w	r2, r7, #136	; 0x88
    9cd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
    9cd4:	011b      	lsls	r3, r3, #4
    9cd6:	4413      	add	r3, r2
    9cd8:	1cd9      	adds	r1, r3, #3
    9cda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
    9cde:	011b      	lsls	r3, r3, #4
    9ce0:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
    9ce4:	4413      	add	r3, r2
    9ce6:	3b5e      	subs	r3, #94	; 0x5e
    9ce8:	781b      	ldrb	r3, [r3, #0]
    9cea:	461a      	mov	r2, r3
    9cec:	f107 031c 	add.w	r3, r7, #28
    9cf0:	4618      	mov	r0, r3
    9cf2:	f7f8 f9b9 	bl	2068 <memcpy>
		str[options[i].len] = '\0';
    9cf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
    9cfa:	011b      	lsls	r3, r3, #4
    9cfc:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
    9d00:	4413      	add	r3, r2
    9d02:	3b5e      	subs	r3, #94	; 0x5e
    9d04:	781b      	ldrb	r3, [r3, #0]
    9d06:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
    9d0a:	4413      	add	r3, r2
    9d0c:	2200      	movs	r2, #0
    9d0e:	f803 2ccc 	strb.w	r2, [r3, #-204]

		LOG_INF("query[%d]: %s", i + 1, str);
    9d12:	f011 fa8d 	bl	1b230 <_is_user_context>
    9d16:	4603      	mov	r3, r0
    9d18:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
	for (i = 0; i < r; i++) {
    9d1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
    9d20:	3301      	adds	r3, #1
    9d22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    9d26:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
    9d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    9d2e:	429a      	cmp	r2, r3
    9d30:	dbbb      	blt.n	9caa <query_get+0x8a>
	}

	LOG_INF("*******");
    9d32:	f011 fa7d 	bl	1b230 <_is_user_context>
    9d36:	4603      	mov	r3, r0
    9d38:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3

	data = (u8_t *)k_malloc(MAX_COAP_MSG_LEN);
    9d3c:	f44f 7080 	mov.w	r0, #256	; 0x100
    9d40:	f00c fe14 	bl	1696c <k_malloc>
    9d44:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	if (!data) {
    9d48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
    9d4c:	2b00      	cmp	r3, #0
    9d4e:	d102      	bne.n	9d56 <query_get+0x136>
		return -ENOMEM;
    9d50:	f06f 030b 	mvn.w	r3, #11
    9d54:	e075      	b.n	9e42 <query_get+0x222>
	}

	r = coap_packet_init(&response, data, MAX_COAP_MSG_LEN,
    9d56:	f107 0078 	add.w	r0, r7, #120	; 0x78
    9d5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
    9d5e:	9304      	str	r3, [sp, #16]
    9d60:	2345      	movs	r3, #69	; 0x45
    9d62:	9303      	str	r3, [sp, #12]
    9d64:	f107 0348 	add.w	r3, r7, #72	; 0x48
    9d68:	9302      	str	r3, [sp, #8]
    9d6a:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
    9d6e:	9301      	str	r3, [sp, #4]
    9d70:	2302      	movs	r3, #2
    9d72:	9300      	str	r3, [sp, #0]
    9d74:	2301      	movs	r3, #1
    9d76:	f44f 7280 	mov.w	r2, #256	; 0x100
    9d7a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
    9d7e:	f013 fb38 	bl	1d3f2 <coap_packet_init>
    9d82:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
			     1, COAP_TYPE_ACK, tkl, (u8_t *) token,
			     COAP_RESPONSE_CODE_CONTENT, id);
	if (r < 0) {
    9d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    9d8a:	2b00      	cmp	r3, #0
    9d8c:	db4a      	blt.n	9e24 <query_get+0x204>
		goto end;
	}

	r = coap_packet_append_option(&response, COAP_OPTION_CONTENT_FORMAT,
    9d8e:	f107 0078 	add.w	r0, r7, #120	; 0x78
    9d92:	2301      	movs	r3, #1
    9d94:	4a2d      	ldr	r2, [pc, #180]	; (9e4c <query_get+0x22c>)
    9d96:	210c      	movs	r1, #12
    9d98:	f013 fcca 	bl	1d730 <coap_packet_append_option>
    9d9c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
				      &plain_text_format,
				      sizeof(plain_text_format));
	if (r < 0) {
    9da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    9da4:	2b00      	cmp	r3, #0
    9da6:	db3f      	blt.n	9e28 <query_get+0x208>
		goto end;
	}

	r = coap_packet_append_payload_marker(&response);
    9da8:	f107 0378 	add.w	r3, r7, #120	; 0x78
    9dac:	4618      	mov	r0, r3
    9dae:	f013 fd18 	bl	1d7e2 <coap_packet_append_payload_marker>
    9db2:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
	if (r < 0) {
    9db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    9dba:	2b00      	cmp	r3, #0
    9dbc:	db36      	blt.n	9e2c <query_get+0x20c>
		goto end;
	}

	/* The response that coap-client expects */
	r = snprintk((char *) payload, sizeof(payload),
    9dbe:	f897 10cc 	ldrb.w	r1, [r7, #204]	; 0xcc
    9dc2:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
    9dc6:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
    9dca:	f107 0050 	add.w	r0, r7, #80	; 0x50
    9dce:	9201      	str	r2, [sp, #4]
    9dd0:	9300      	str	r3, [sp, #0]
    9dd2:	460b      	mov	r3, r1
    9dd4:	4a1e      	ldr	r2, [pc, #120]	; (9e50 <query_get+0x230>)
    9dd6:	2128      	movs	r1, #40	; 0x28
    9dd8:	f012 f9f1 	bl	1c1be <snprintk>
    9ddc:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
		     "Type: %u\nCode: %u\nMID: %u\n", type, code, id);
	if (r < 0) {
    9de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    9de4:	2b00      	cmp	r3, #0
    9de6:	db23      	blt.n	9e30 <query_get+0x210>
		goto end;
	}

	r = coap_packet_append_payload(&response, (u8_t *)payload,
				       strlen(payload));
    9de8:	f107 0350 	add.w	r3, r7, #80	; 0x50
    9dec:	4618      	mov	r0, r3
    9dee:	f7f8 f982 	bl	20f6 <strlen>
    9df2:	4603      	mov	r3, r0
	r = coap_packet_append_payload(&response, (u8_t *)payload,
    9df4:	b29a      	uxth	r2, r3
    9df6:	f107 0150 	add.w	r1, r7, #80	; 0x50
    9dfa:	f107 0378 	add.w	r3, r7, #120	; 0x78
    9dfe:	4618      	mov	r0, r3
    9e00:	f013 fd02 	bl	1d808 <coap_packet_append_payload>
    9e04:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
	if (r < 0) {
    9e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    9e0c:	2b00      	cmp	r3, #0
    9e0e:	db11      	blt.n	9e34 <query_get+0x214>
		goto end;
	}

	r = send_coap_reply(&response, addr, addr_len);
    9e10:	f107 0378 	add.w	r3, r7, #120	; 0x78
    9e14:	683a      	ldr	r2, [r7, #0]
    9e16:	6879      	ldr	r1, [r7, #4]
    9e18:	4618      	mov	r0, r3
    9e1a:	f7ff fce9 	bl	97f0 <send_coap_reply>
    9e1e:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
    9e22:	e008      	b.n	9e36 <query_get+0x216>
		goto end;
    9e24:	bf00      	nop
    9e26:	e006      	b.n	9e36 <query_get+0x216>
		goto end;
    9e28:	bf00      	nop
    9e2a:	e004      	b.n	9e36 <query_get+0x216>
		goto end;
    9e2c:	bf00      	nop
    9e2e:	e002      	b.n	9e36 <query_get+0x216>
		goto end;
    9e30:	bf00      	nop
    9e32:	e000      	b.n	9e36 <query_get+0x216>
		goto end;
    9e34:	bf00      	nop

end:
	k_free(data);
    9e36:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
    9e3a:	f020 f8ca 	bl	29fd2 <k_free>

	return r;
    9e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
}
    9e42:	4618      	mov	r0, r3
    9e44:	37e8      	adds	r7, #232	; 0xe8
    9e46:	46bd      	mov	sp, r7
    9e48:	bd80      	pop	{r7, pc}
    9e4a:	bf00      	nop
    9e4c:	0002f05c 	.word	0x0002f05c
    9e50:	0002d58c 	.word	0x0002d58c

00009e54 <location_query_post>:

static int location_query_post(struct coap_resource *resource,
			       struct coap_packet *request,
			       struct sockaddr *addr, socklen_t addr_len)
{
    9e54:	b590      	push	{r4, r7, lr}
    9e56:	b09f      	sub	sp, #124	; 0x7c
    9e58:	af06      	add	r7, sp, #24
    9e5a:	60f8      	str	r0, [r7, #12]
    9e5c:	60b9      	str	r1, [r7, #8]
    9e5e:	607a      	str	r2, [r7, #4]
    9e60:	603b      	str	r3, [r7, #0]
	u8_t code;
	u8_t type;
	u8_t tkl;
	int r;

	code = coap_header_get_code(request);
    9e62:	68b8      	ldr	r0, [r7, #8]
    9e64:	f014 f802 	bl	1de6c <coap_header_get_code>
    9e68:	4603      	mov	r3, r0
    9e6a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	type = coap_header_get_type(request);
    9e6e:	68b8      	ldr	r0, [r7, #8]
    9e70:	f013 ffa9 	bl	1ddc6 <coap_header_get_type>
    9e74:	4603      	mov	r3, r0
    9e76:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	id = coap_header_get_id(request);
    9e7a:	68b8      	ldr	r0, [r7, #8]
    9e7c:	f014 f823 	bl	1dec6 <coap_header_get_id>
    9e80:	4603      	mov	r3, r0
    9e82:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	tkl = coap_header_get_token(request, token);
    9e86:	f107 0330 	add.w	r3, r7, #48	; 0x30
    9e8a:	4619      	mov	r1, r3
    9e8c:	68b8      	ldr	r0, [r7, #8]
    9e8e:	f013 ffc9 	bl	1de24 <coap_header_get_token>
    9e92:	4603      	mov	r3, r0
    9e94:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

	LOG_INF("*******");
    9e98:	f011 f9ca 	bl	1b230 <_is_user_context>
    9e9c:	4603      	mov	r3, r0
    9e9e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	LOG_INF("type: %u code %u id %u", type, code, id);
    9ea2:	f011 f9c5 	bl	1b230 <_is_user_context>
    9ea6:	4603      	mov	r3, r0
    9ea8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	LOG_INF("*******");
    9eac:	f011 f9c0 	bl	1b230 <_is_user_context>
    9eb0:	4603      	mov	r3, r0
    9eb2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (type == COAP_TYPE_CON) {
    9eb6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
    9eba:	2b00      	cmp	r3, #0
    9ebc:	d103      	bne.n	9ec6 <location_query_post+0x72>
		type = COAP_TYPE_ACK;
    9ebe:	2302      	movs	r3, #2
    9ec0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
    9ec4:	e002      	b.n	9ecc <location_query_post+0x78>
	} else {
		type = COAP_TYPE_NON_CON;
    9ec6:	2301      	movs	r3, #1
    9ec8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	}

	data = (u8_t *)k_malloc(MAX_COAP_MSG_LEN);
    9ecc:	f44f 7080 	mov.w	r0, #256	; 0x100
    9ed0:	f00c fd4c 	bl	1696c <k_malloc>
    9ed4:	6538      	str	r0, [r7, #80]	; 0x50
	if (!data) {
    9ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9ed8:	2b00      	cmp	r3, #0
    9eda:	d102      	bne.n	9ee2 <location_query_post+0x8e>
		return -ENOMEM;
    9edc:	f06f 030b 	mvn.w	r3, #11
    9ee0:	e046      	b.n	9f70 <location_query_post+0x11c>
	}

	r = coap_packet_init(&response, data, MAX_COAP_MSG_LEN,
    9ee2:	f107 0038 	add.w	r0, r7, #56	; 0x38
    9ee6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
    9eea:	9304      	str	r3, [sp, #16]
    9eec:	2341      	movs	r3, #65	; 0x41
    9eee:	9303      	str	r3, [sp, #12]
    9ef0:	f107 0330 	add.w	r3, r7, #48	; 0x30
    9ef4:	9302      	str	r3, [sp, #8]
    9ef6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    9efa:	9301      	str	r3, [sp, #4]
    9efc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
    9f00:	9300      	str	r3, [sp, #0]
    9f02:	2301      	movs	r3, #1
    9f04:	f44f 7280 	mov.w	r2, #256	; 0x100
    9f08:	6d39      	ldr	r1, [r7, #80]	; 0x50
    9f0a:	f013 fa72 	bl	1d3f2 <coap_packet_init>
    9f0e:	65f8      	str	r0, [r7, #92]	; 0x5c
			     1, type, tkl, (u8_t *)token,
			     COAP_RESPONSE_CODE_CREATED, id);
	if (r < 0) {
    9f10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    9f12:	2b00      	cmp	r3, #0
    9f14:	db25      	blt.n	9f62 <location_query_post+0x10e>
		goto end;
	}

	for (p = location_query; *p; p++) {
    9f16:	4b18      	ldr	r3, [pc, #96]	; (9f78 <location_query_post+0x124>)
    9f18:	65bb      	str	r3, [r7, #88]	; 0x58
    9f1a:	e015      	b.n	9f48 <location_query_post+0xf4>
		r = coap_packet_append_option(&response,
    9f1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    9f1e:	681c      	ldr	r4, [r3, #0]
					      COAP_OPTION_LOCATION_QUERY,
					      *p, strlen(*p));
    9f20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    9f22:	681b      	ldr	r3, [r3, #0]
    9f24:	4618      	mov	r0, r3
    9f26:	f7f8 f8e6 	bl	20f6 <strlen>
    9f2a:	4603      	mov	r3, r0
		r = coap_packet_append_option(&response,
    9f2c:	b29b      	uxth	r3, r3
    9f2e:	f107 0038 	add.w	r0, r7, #56	; 0x38
    9f32:	4622      	mov	r2, r4
    9f34:	2114      	movs	r1, #20
    9f36:	f013 fbfb 	bl	1d730 <coap_packet_append_option>
    9f3a:	65f8      	str	r0, [r7, #92]	; 0x5c
		if (r < 0) {
    9f3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    9f3e:	2b00      	cmp	r3, #0
    9f40:	db11      	blt.n	9f66 <location_query_post+0x112>
	for (p = location_query; *p; p++) {
    9f42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    9f44:	3304      	adds	r3, #4
    9f46:	65bb      	str	r3, [r7, #88]	; 0x58
    9f48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    9f4a:	681b      	ldr	r3, [r3, #0]
    9f4c:	2b00      	cmp	r3, #0
    9f4e:	d1e5      	bne.n	9f1c <location_query_post+0xc8>
			goto end;
		}
	}

	r = send_coap_reply(&response, addr, addr_len);
    9f50:	f107 0338 	add.w	r3, r7, #56	; 0x38
    9f54:	683a      	ldr	r2, [r7, #0]
    9f56:	6879      	ldr	r1, [r7, #4]
    9f58:	4618      	mov	r0, r3
    9f5a:	f7ff fc49 	bl	97f0 <send_coap_reply>
    9f5e:	65f8      	str	r0, [r7, #92]	; 0x5c
    9f60:	e002      	b.n	9f68 <location_query_post+0x114>
		goto end;
    9f62:	bf00      	nop
    9f64:	e000      	b.n	9f68 <location_query_post+0x114>
			goto end;
    9f66:	bf00      	nop

end:
	k_free(data);
    9f68:	6d38      	ldr	r0, [r7, #80]	; 0x50
    9f6a:	f020 f832 	bl	29fd2 <k_free>

	return r;
    9f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
    9f70:	4618      	mov	r0, r3
    9f72:	3764      	adds	r7, #100	; 0x64
    9f74:	46bd      	mov	sp, r7
    9f76:	bd90      	pop	{r4, r7, pc}
    9f78:	0002ea88 	.word	0x0002ea88

00009f7c <separate_get>:

static int separate_get(struct coap_resource *resource,
			struct coap_packet *request,
			struct sockaddr *addr, socklen_t addr_len)
{
    9f7c:	b580      	push	{r7, lr}
    9f7e:	b0a6      	sub	sp, #152	; 0x98
    9f80:	af06      	add	r7, sp, #24
    9f82:	60f8      	str	r0, [r7, #12]
    9f84:	60b9      	str	r1, [r7, #8]
    9f86:	607a      	str	r2, [r7, #4]
    9f88:	603b      	str	r3, [r7, #0]
	u8_t code;
	u8_t type;
	u8_t tkl;
	int r;

	code = coap_header_get_code(request);
    9f8a:	68b8      	ldr	r0, [r7, #8]
    9f8c:	f013 ff6e 	bl	1de6c <coap_header_get_code>
    9f90:	4603      	mov	r3, r0
    9f92:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	type = coap_header_get_type(request);
    9f96:	68b8      	ldr	r0, [r7, #8]
    9f98:	f013 ff15 	bl	1ddc6 <coap_header_get_type>
    9f9c:	4603      	mov	r3, r0
    9f9e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	id = coap_header_get_id(request);
    9fa2:	68b8      	ldr	r0, [r7, #8]
    9fa4:	f013 ff8f 	bl	1dec6 <coap_header_get_id>
    9fa8:	4603      	mov	r3, r0
    9faa:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	tkl = coap_header_get_token(request, token);
    9fae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    9fb2:	4619      	mov	r1, r3
    9fb4:	68b8      	ldr	r0, [r7, #8]
    9fb6:	f013 ff35 	bl	1de24 <coap_header_get_token>
    9fba:	4603      	mov	r3, r0
    9fbc:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79

	LOG_INF("*******");
    9fc0:	f011 f936 	bl	1b230 <_is_user_context>
    9fc4:	4603      	mov	r3, r0
    9fc6:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	LOG_INF("type: %u code %u id %u", type, code, id);
    9fca:	f011 f931 	bl	1b230 <_is_user_context>
    9fce:	4603      	mov	r3, r0
    9fd0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	LOG_INF("*******");
    9fd4:	f011 f92c 	bl	1b230 <_is_user_context>
    9fd8:	4603      	mov	r3, r0
    9fda:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71

	if (type == COAP_TYPE_ACK) {
    9fde:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
    9fe2:	2b02      	cmp	r3, #2
    9fe4:	d101      	bne.n	9fea <separate_get+0x6e>
		return 0;
    9fe6:	2300      	movs	r3, #0
    9fe8:	e0a6      	b.n	a138 <separate_get+0x1bc>
	}

	data = (u8_t *)k_malloc(MAX_COAP_MSG_LEN);
    9fea:	f44f 7080 	mov.w	r0, #256	; 0x100
    9fee:	f00c fcbd 	bl	1696c <k_malloc>
    9ff2:	6778      	str	r0, [r7, #116]	; 0x74
	if (!data) {
    9ff4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    9ff6:	2b00      	cmp	r3, #0
    9ff8:	d102      	bne.n	a000 <separate_get+0x84>
		return -ENOMEM;
    9ffa:	f06f 030b 	mvn.w	r3, #11
    9ffe:	e09b      	b.n	a138 <separate_get+0x1bc>
	}

	r = coap_packet_init(&response, data, MAX_COAP_MSG_LEN,
    a000:	f107 005c 	add.w	r0, r7, #92	; 0x5c
    a004:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
    a008:	9304      	str	r3, [sp, #16]
    a00a:	2300      	movs	r3, #0
    a00c:	9303      	str	r3, [sp, #12]
    a00e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    a012:	9302      	str	r3, [sp, #8]
    a014:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
    a018:	9301      	str	r3, [sp, #4]
    a01a:	2302      	movs	r3, #2
    a01c:	9300      	str	r3, [sp, #0]
    a01e:	2301      	movs	r3, #1
    a020:	f44f 7280 	mov.w	r2, #256	; 0x100
    a024:	6f79      	ldr	r1, [r7, #116]	; 0x74
    a026:	f013 f9e4 	bl	1d3f2 <coap_packet_init>
    a02a:	67f8      	str	r0, [r7, #124]	; 0x7c
			     1, COAP_TYPE_ACK, tkl, (u8_t *)token, 0, id);
	if (r < 0) {
    a02c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    a02e:	2b00      	cmp	r3, #0
    a030:	db71      	blt.n	a116 <separate_get+0x19a>
		goto end;
	}

	r = send_coap_reply(&response, addr, addr_len);
    a032:	f107 035c 	add.w	r3, r7, #92	; 0x5c
    a036:	683a      	ldr	r2, [r7, #0]
    a038:	6879      	ldr	r1, [r7, #4]
    a03a:	4618      	mov	r0, r3
    a03c:	f7ff fbd8 	bl	97f0 <send_coap_reply>
    a040:	67f8      	str	r0, [r7, #124]	; 0x7c
	if (r < 0) {
    a042:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    a044:	2b00      	cmp	r3, #0
    a046:	db68      	blt.n	a11a <separate_get+0x19e>
		goto end;
	}

	if (type == COAP_TYPE_CON) {
    a048:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
    a04c:	2b00      	cmp	r3, #0
    a04e:	d103      	bne.n	a058 <separate_get+0xdc>
		type = COAP_TYPE_CON;
    a050:	2300      	movs	r3, #0
    a052:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    a056:	e002      	b.n	a05e <separate_get+0xe2>
	} else {
		type = COAP_TYPE_NON_CON;
    a058:	2301      	movs	r3, #1
    a05a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	}

	/* Do not free and allocate "data" again, re-use the buffer */
	r = coap_packet_init(&response, data, MAX_COAP_MSG_LEN,
    a05e:	f107 005c 	add.w	r0, r7, #92	; 0x5c
    a062:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
    a066:	9304      	str	r3, [sp, #16]
    a068:	2345      	movs	r3, #69	; 0x45
    a06a:	9303      	str	r3, [sp, #12]
    a06c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    a070:	9302      	str	r3, [sp, #8]
    a072:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
    a076:	9301      	str	r3, [sp, #4]
    a078:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
    a07c:	9300      	str	r3, [sp, #0]
    a07e:	2301      	movs	r3, #1
    a080:	f44f 7280 	mov.w	r2, #256	; 0x100
    a084:	6f79      	ldr	r1, [r7, #116]	; 0x74
    a086:	f013 f9b4 	bl	1d3f2 <coap_packet_init>
    a08a:	67f8      	str	r0, [r7, #124]	; 0x7c
			     1, type, tkl, (u8_t *)token,
			     COAP_RESPONSE_CODE_CONTENT, id);
	if (r < 0) {
    a08c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    a08e:	2b00      	cmp	r3, #0
    a090:	db45      	blt.n	a11e <separate_get+0x1a2>
		goto end;
	}

	r = coap_packet_append_option(&response, COAP_OPTION_CONTENT_FORMAT,
    a092:	f107 005c 	add.w	r0, r7, #92	; 0x5c
    a096:	2301      	movs	r3, #1
    a098:	4a29      	ldr	r2, [pc, #164]	; (a140 <separate_get+0x1c4>)
    a09a:	210c      	movs	r1, #12
    a09c:	f013 fb48 	bl	1d730 <coap_packet_append_option>
    a0a0:	67f8      	str	r0, [r7, #124]	; 0x7c
				      &plain_text_format,
				      sizeof(plain_text_format));
	if (r < 0) {
    a0a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    a0a4:	2b00      	cmp	r3, #0
    a0a6:	db3c      	blt.n	a122 <separate_get+0x1a6>
		goto end;
	}

	r = coap_packet_append_payload_marker(&response);
    a0a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
    a0ac:	4618      	mov	r0, r3
    a0ae:	f013 fb98 	bl	1d7e2 <coap_packet_append_payload_marker>
    a0b2:	67f8      	str	r0, [r7, #124]	; 0x7c
	if (r < 0) {
    a0b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    a0b6:	2b00      	cmp	r3, #0
    a0b8:	db35      	blt.n	a126 <separate_get+0x1aa>
		goto end;
	}

	/* The response that coap-client expects */
	r = snprintk((char *) payload, sizeof(payload),
    a0ba:	f897 107b 	ldrb.w	r1, [r7, #123]	; 0x7b
    a0be:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
    a0c2:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
    a0c6:	f107 0034 	add.w	r0, r7, #52	; 0x34
    a0ca:	9201      	str	r2, [sp, #4]
    a0cc:	9300      	str	r3, [sp, #0]
    a0ce:	460b      	mov	r3, r1
    a0d0:	4a1c      	ldr	r2, [pc, #112]	; (a144 <separate_get+0x1c8>)
    a0d2:	2128      	movs	r1, #40	; 0x28
    a0d4:	f012 f873 	bl	1c1be <snprintk>
    a0d8:	67f8      	str	r0, [r7, #124]	; 0x7c
		     "Type: %u\nCode: %u\nMID: %u\n", type, code, id);
	if (r < 0) {
    a0da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    a0dc:	2b00      	cmp	r3, #0
    a0de:	db24      	blt.n	a12a <separate_get+0x1ae>
		goto end;
	}

	r = coap_packet_append_payload(&response, (u8_t *)payload,
				       strlen(payload));
    a0e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
    a0e4:	4618      	mov	r0, r3
    a0e6:	f7f8 f806 	bl	20f6 <strlen>
    a0ea:	4603      	mov	r3, r0
	r = coap_packet_append_payload(&response, (u8_t *)payload,
    a0ec:	b29a      	uxth	r2, r3
    a0ee:	f107 0134 	add.w	r1, r7, #52	; 0x34
    a0f2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
    a0f6:	4618      	mov	r0, r3
    a0f8:	f013 fb86 	bl	1d808 <coap_packet_append_payload>
    a0fc:	67f8      	str	r0, [r7, #124]	; 0x7c
	if (r < 0) {
    a0fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    a100:	2b00      	cmp	r3, #0
    a102:	db14      	blt.n	a12e <separate_get+0x1b2>
		goto end;
	}

	r = send_coap_reply(&response, addr, addr_len);
    a104:	f107 035c 	add.w	r3, r7, #92	; 0x5c
    a108:	683a      	ldr	r2, [r7, #0]
    a10a:	6879      	ldr	r1, [r7, #4]
    a10c:	4618      	mov	r0, r3
    a10e:	f7ff fb6f 	bl	97f0 <send_coap_reply>
    a112:	67f8      	str	r0, [r7, #124]	; 0x7c
    a114:	e00c      	b.n	a130 <separate_get+0x1b4>
		goto end;
    a116:	bf00      	nop
    a118:	e00a      	b.n	a130 <separate_get+0x1b4>
		goto end;
    a11a:	bf00      	nop
    a11c:	e008      	b.n	a130 <separate_get+0x1b4>
		goto end;
    a11e:	bf00      	nop
    a120:	e006      	b.n	a130 <separate_get+0x1b4>
		goto end;
    a122:	bf00      	nop
    a124:	e004      	b.n	a130 <separate_get+0x1b4>
		goto end;
    a126:	bf00      	nop
    a128:	e002      	b.n	a130 <separate_get+0x1b4>
		goto end;
    a12a:	bf00      	nop
    a12c:	e000      	b.n	a130 <separate_get+0x1b4>
		goto end;
    a12e:	bf00      	nop

end:
	k_free(data);
    a130:	6f78      	ldr	r0, [r7, #116]	; 0x74
    a132:	f01f ff4e 	bl	29fd2 <k_free>

	return r;
    a136:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
    a138:	4618      	mov	r0, r3
    a13a:	3780      	adds	r7, #128	; 0x80
    a13c:	46bd      	mov	sp, r7
    a13e:	bd80      	pop	{r7, pc}
    a140:	0002f05c 	.word	0x0002f05c
    a144:	0002d58c 	.word	0x0002d58c

0000a148 <large_get>:

static int large_get(struct coap_resource *resource,
		     struct coap_packet *request,
		     struct sockaddr *addr, socklen_t addr_len)

{
    a148:	b580      	push	{r7, lr}
    a14a:	b0ac      	sub	sp, #176	; 0xb0
    a14c:	af06      	add	r7, sp, #24
    a14e:	60f8      	str	r0, [r7, #12]
    a150:	60b9      	str	r1, [r7, #8]
    a152:	607a      	str	r2, [r7, #4]
    a154:	603b      	str	r3, [r7, #0]
	u8_t code;
	u8_t type;
	u8_t tkl;
	int r;

	if (ctx.total_size == 0) {
    a156:	4b7c      	ldr	r3, [pc, #496]	; (a348 <large_get+0x200>)
    a158:	681b      	ldr	r3, [r3, #0]
    a15a:	2b00      	cmp	r3, #0
    a15c:	d105      	bne.n	a16a <large_get+0x22>
		coap_block_transfer_init(&ctx, COAP_BLOCK_64,
    a15e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    a162:	2102      	movs	r1, #2
    a164:	4878      	ldr	r0, [pc, #480]	; (a348 <large_get+0x200>)
    a166:	f013 ffd7 	bl	1e118 <coap_block_transfer_init>
					 BLOCK_WISE_TRANSFER_SIZE_GET);
	}

	r = coap_update_from_block(request, &ctx);
    a16a:	4977      	ldr	r1, [pc, #476]	; (a348 <large_get+0x200>)
    a16c:	68b8      	ldr	r0, [r7, #8]
    a16e:	f014 f978 	bl	1e462 <coap_update_from_block>
    a172:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	if (r < 0) {
    a176:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    a17a:	2b00      	cmp	r3, #0
    a17c:	da02      	bge.n	a184 <large_get+0x3c>
		return -EINVAL;
    a17e:	f06f 0315 	mvn.w	r3, #21
    a182:	e0dd      	b.n	a340 <large_get+0x1f8>
	}

	code = coap_header_get_code(request);
    a184:	68b8      	ldr	r0, [r7, #8]
    a186:	f013 fe71 	bl	1de6c <coap_header_get_code>
    a18a:	4603      	mov	r3, r0
    a18c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	type = coap_header_get_type(request);
    a190:	68b8      	ldr	r0, [r7, #8]
    a192:	f013 fe18 	bl	1ddc6 <coap_header_get_type>
    a196:	4603      	mov	r3, r0
    a198:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
	id = coap_header_get_id(request);
    a19c:	68b8      	ldr	r0, [r7, #8]
    a19e:	f013 fe92 	bl	1dec6 <coap_header_get_id>
    a1a2:	4603      	mov	r3, r0
    a1a4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	tkl = coap_header_get_token(request, token);
    a1a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    a1ac:	4619      	mov	r1, r3
    a1ae:	68b8      	ldr	r0, [r7, #8]
    a1b0:	f013 fe38 	bl	1de24 <coap_header_get_token>
    a1b4:	4603      	mov	r3, r0
    a1b6:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

	LOG_INF("*******");
    a1ba:	f011 f839 	bl	1b230 <_is_user_context>
    a1be:	4603      	mov	r3, r0
    a1c0:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
	LOG_INF("type: %u code %u id %u", type, code, id);
    a1c4:	f011 f834 	bl	1b230 <_is_user_context>
    a1c8:	4603      	mov	r3, r0
    a1ca:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
	LOG_INF("*******");
    a1ce:	f011 f82f 	bl	1b230 <_is_user_context>
    a1d2:	4603      	mov	r3, r0
    a1d4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

	data = (u8_t *)k_malloc(MAX_COAP_MSG_LEN);
    a1d8:	f44f 7080 	mov.w	r0, #256	; 0x100
    a1dc:	f00c fbc6 	bl	1696c <k_malloc>
    a1e0:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	if (!data) {
    a1e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    a1e8:	2b00      	cmp	r3, #0
    a1ea:	d102      	bne.n	a1f2 <large_get+0xaa>
		return -ENOMEM;
    a1ec:	f06f 030b 	mvn.w	r3, #11
    a1f0:	e0a6      	b.n	a340 <large_get+0x1f8>
	}

	r = coap_packet_init(&response, data, MAX_COAP_MSG_LEN,
    a1f2:	f107 0074 	add.w	r0, r7, #116	; 0x74
    a1f6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
    a1fa:	9304      	str	r3, [sp, #16]
    a1fc:	2345      	movs	r3, #69	; 0x45
    a1fe:	9303      	str	r3, [sp, #12]
    a200:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    a204:	9302      	str	r3, [sp, #8]
    a206:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
    a20a:	9301      	str	r3, [sp, #4]
    a20c:	2302      	movs	r3, #2
    a20e:	9300      	str	r3, [sp, #0]
    a210:	2301      	movs	r3, #1
    a212:	f44f 7280 	mov.w	r2, #256	; 0x100
    a216:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
    a21a:	f013 f8ea 	bl	1d3f2 <coap_packet_init>
    a21e:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
			     1, COAP_TYPE_ACK, tkl, (u8_t *) token,
			     COAP_RESPONSE_CODE_CONTENT, id);
	if (r < 0) {
    a222:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    a226:	2b00      	cmp	r3, #0
    a228:	da02      	bge.n	a230 <large_get+0xe8>
		return -EINVAL;
    a22a:	f06f 0315 	mvn.w	r3, #21
    a22e:	e087      	b.n	a340 <large_get+0x1f8>
	}

	r = coap_packet_append_option(&response, COAP_OPTION_CONTENT_FORMAT,
    a230:	f107 0074 	add.w	r0, r7, #116	; 0x74
    a234:	2301      	movs	r3, #1
    a236:	4a45      	ldr	r2, [pc, #276]	; (a34c <large_get+0x204>)
    a238:	210c      	movs	r1, #12
    a23a:	f013 fa79 	bl	1d730 <coap_packet_append_option>
    a23e:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
				      &plain_text_format,
				      sizeof(plain_text_format));
	if (r < 0) {
    a242:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    a246:	2b00      	cmp	r3, #0
    a248:	db6d      	blt.n	a326 <large_get+0x1de>
		goto end;
	}

	r = coap_append_block2_option(&response, &ctx);
    a24a:	f107 0374 	add.w	r3, r7, #116	; 0x74
    a24e:	493e      	ldr	r1, [pc, #248]	; (a348 <large_get+0x200>)
    a250:	4618      	mov	r0, r3
    a252:	f013 ffc5 	bl	1e1e0 <coap_append_block2_option>
    a256:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	if (r < 0) {
    a25a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    a25e:	2b00      	cmp	r3, #0
    a260:	db63      	blt.n	a32a <large_get+0x1e2>
		goto end;
	}

	r = coap_packet_append_payload_marker(&response);
    a262:	f107 0374 	add.w	r3, r7, #116	; 0x74
    a266:	4618      	mov	r0, r3
    a268:	f013 fabb 	bl	1d7e2 <coap_packet_append_payload_marker>
    a26c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	if (r < 0) {
    a270:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    a274:	2b00      	cmp	r3, #0
    a276:	db5a      	blt.n	a32e <large_get+0x1e6>
		goto end;
	}

	size = MIN(coap_block_size_to_bytes(ctx.block_size),
    a278:	4b33      	ldr	r3, [pc, #204]	; (a348 <large_get+0x200>)
    a27a:	7a1b      	ldrb	r3, [r3, #8]
    a27c:	4618      	mov	r0, r3
    a27e:	f011 f876 	bl	1b36e <coap_block_size_to_bytes>
    a282:	4603      	mov	r3, r0
    a284:	4619      	mov	r1, r3
    a286:	4b30      	ldr	r3, [pc, #192]	; (a348 <large_get+0x200>)
    a288:	681a      	ldr	r2, [r3, #0]
    a28a:	4b2f      	ldr	r3, [pc, #188]	; (a348 <large_get+0x200>)
    a28c:	685b      	ldr	r3, [r3, #4]
    a28e:	1ad3      	subs	r3, r2, r3
    a290:	4299      	cmp	r1, r3
    a292:	d206      	bcs.n	a2a2 <large_get+0x15a>
    a294:	4b2c      	ldr	r3, [pc, #176]	; (a348 <large_get+0x200>)
    a296:	7a1b      	ldrb	r3, [r3, #8]
    a298:	4618      	mov	r0, r3
    a29a:	f011 f868 	bl	1b36e <coap_block_size_to_bytes>
    a29e:	4603      	mov	r3, r0
    a2a0:	e007      	b.n	a2b2 <large_get+0x16a>
    a2a2:	4b29      	ldr	r3, [pc, #164]	; (a348 <large_get+0x200>)
    a2a4:	681b      	ldr	r3, [r3, #0]
    a2a6:	b29a      	uxth	r2, r3
    a2a8:	4b27      	ldr	r3, [pc, #156]	; (a348 <large_get+0x200>)
    a2aa:	685b      	ldr	r3, [r3, #4]
    a2ac:	b29b      	uxth	r3, r3
    a2ae:	1ad3      	subs	r3, r2, r3
    a2b0:	b29b      	uxth	r3, r3
    a2b2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
		   ctx.total_size - ctx.current);

	memset(payload, 'A', MIN(size, sizeof(payload)));
    a2b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
    a2ba:	2b40      	cmp	r3, #64	; 0x40
    a2bc:	bf28      	it	cs
    a2be:	2340      	movcs	r3, #64	; 0x40
    a2c0:	b29b      	uxth	r3, r3
    a2c2:	461a      	mov	r2, r3
    a2c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
    a2c8:	2141      	movs	r1, #65	; 0x41
    a2ca:	4618      	mov	r0, r3
    a2cc:	f7f7 fef4 	bl	20b8 <memset>

	r = coap_packet_append_payload(&response, (u8_t *)payload, size);
    a2d0:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
    a2d4:	f107 0134 	add.w	r1, r7, #52	; 0x34
    a2d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
    a2dc:	4618      	mov	r0, r3
    a2de:	f013 fa93 	bl	1d808 <coap_packet_append_payload>
    a2e2:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	if (r < 0) {
    a2e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    a2ea:	2b00      	cmp	r3, #0
    a2ec:	db21      	blt.n	a332 <large_get+0x1ea>
		goto end;
	}

	r = coap_next_block(&response, &ctx);
    a2ee:	f107 0374 	add.w	r3, r7, #116	; 0x74
    a2f2:	4915      	ldr	r1, [pc, #84]	; (a348 <large_get+0x200>)
    a2f4:	4618      	mov	r0, r3
    a2f6:	f014 f90a 	bl	1e50e <coap_next_block>
    a2fa:	4603      	mov	r3, r0
    a2fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	if (!r) {
    a300:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    a304:	2b00      	cmp	r3, #0
    a306:	d104      	bne.n	a312 <large_get+0x1ca>
		/* Will return 0 when it's the last block. */
		memset(&ctx, 0, sizeof(ctx));
    a308:	220c      	movs	r2, #12
    a30a:	2100      	movs	r1, #0
    a30c:	480e      	ldr	r0, [pc, #56]	; (a348 <large_get+0x200>)
    a30e:	f7f7 fed3 	bl	20b8 <memset>
	}

	r = send_coap_reply(&response, addr, addr_len);
    a312:	f107 0374 	add.w	r3, r7, #116	; 0x74
    a316:	683a      	ldr	r2, [r7, #0]
    a318:	6879      	ldr	r1, [r7, #4]
    a31a:	4618      	mov	r0, r3
    a31c:	f7ff fa68 	bl	97f0 <send_coap_reply>
    a320:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    a324:	e006      	b.n	a334 <large_get+0x1ec>
		goto end;
    a326:	bf00      	nop
    a328:	e004      	b.n	a334 <large_get+0x1ec>
		goto end;
    a32a:	bf00      	nop
    a32c:	e002      	b.n	a334 <large_get+0x1ec>
		goto end;
    a32e:	bf00      	nop
    a330:	e000      	b.n	a334 <large_get+0x1ec>
		goto end;
    a332:	bf00      	nop

end:
	k_free(data);
    a334:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
    a338:	f01f fe4b 	bl	29fd2 <k_free>

	return r;
    a33c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
    a340:	4618      	mov	r0, r3
    a342:	3798      	adds	r7, #152	; 0x98
    a344:	46bd      	mov	sp, r7
    a346:	bd80      	pop	{r7, pc}
    a348:	2000249c 	.word	0x2000249c
    a34c:	0002f05c 	.word	0x0002f05c

0000a350 <large_update_put>:
}

static int large_update_put(struct coap_resource *resource,
			    struct coap_packet *request,
			    struct sockaddr *addr, socklen_t addr_len)
{
    a350:	b580      	push	{r7, lr}
    a352:	b0aa      	sub	sp, #168	; 0xa8
    a354:	af06      	add	r7, sp, #24
    a356:	60f8      	str	r0, [r7, #12]
    a358:	60b9      	str	r1, [r7, #8]
    a35a:	607a      	str	r2, [r7, #4]
    a35c:	603b      	str	r3, [r7, #0]
	u8_t type;
	u8_t tkl;
	int r;
	bool last_block;

	r = get_option_int(request, COAP_OPTION_BLOCK1);
    a35e:	211b      	movs	r1, #27
    a360:	68b8      	ldr	r0, [r7, #8]
    a362:	f011 f8ce 	bl	1b502 <get_option_int>
    a366:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	if (r < 0) {
    a36a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    a36e:	2b00      	cmp	r3, #0
    a370:	da02      	bge.n	a378 <large_update_put+0x28>
		return -EINVAL;
    a372:	f06f 0315 	mvn.w	r3, #21
    a376:	e0d2      	b.n	a51e <large_update_put+0x1ce>
	}

	last_block = !GET_MORE(r);
    a378:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    a37c:	f003 0308 	and.w	r3, r3, #8
    a380:	2b00      	cmp	r3, #0
    a382:	bf0c      	ite	eq
    a384:	2301      	moveq	r3, #1
    a386:	2300      	movne	r3, #0
    a388:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

	/* initialize block context upon the arrival of first block */
	if (!GET_BLOCK_NUM(r)) {
    a38c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    a390:	111b      	asrs	r3, r3, #4
    a392:	2b00      	cmp	r3, #0
    a394:	d104      	bne.n	a3a0 <large_update_put+0x50>
		coap_block_transfer_init(&ctx, COAP_BLOCK_64, 0);
    a396:	2200      	movs	r2, #0
    a398:	2102      	movs	r1, #2
    a39a:	4863      	ldr	r0, [pc, #396]	; (a528 <large_update_put+0x1d8>)
    a39c:	f013 febc 	bl	1e118 <coap_block_transfer_init>
	}

	r = coap_update_from_block(request, &ctx);
    a3a0:	4961      	ldr	r1, [pc, #388]	; (a528 <large_update_put+0x1d8>)
    a3a2:	68b8      	ldr	r0, [r7, #8]
    a3a4:	f014 f85d 	bl	1e462 <coap_update_from_block>
    a3a8:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	if (r < 0) {
    a3ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    a3b0:	2b00      	cmp	r3, #0
    a3b2:	da07      	bge.n	a3c4 <large_update_put+0x74>
		LOG_ERR("Invalid block size option from request");
    a3b4:	f010 ff3c 	bl	1b230 <_is_user_context>
    a3b8:	4603      	mov	r3, r0
    a3ba:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
		return -EINVAL;
    a3be:	f06f 0315 	mvn.w	r3, #21
    a3c2:	e0ac      	b.n	a51e <large_update_put+0x1ce>
	}

	payload = coap_packet_get_payload(request, &len);
    a3c4:	f107 0356 	add.w	r3, r7, #86	; 0x56
    a3c8:	4619      	mov	r1, r3
    a3ca:	68b8      	ldr	r0, [r7, #8]
    a3cc:	f013 fd9b 	bl	1df06 <coap_packet_get_payload>
    a3d0:	67b8      	str	r0, [r7, #120]	; 0x78
	if (!last_block && payload == NULL) {
    a3d2:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
    a3d6:	f083 0301 	eor.w	r3, r3, #1
    a3da:	b2db      	uxtb	r3, r3
    a3dc:	2b00      	cmp	r3, #0
    a3de:	d00a      	beq.n	a3f6 <large_update_put+0xa6>
    a3e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    a3e2:	2b00      	cmp	r3, #0
    a3e4:	d107      	bne.n	a3f6 <large_update_put+0xa6>
		LOG_ERR("Packet without payload");
    a3e6:	f010 ff23 	bl	1b230 <_is_user_context>
    a3ea:	4603      	mov	r3, r0
    a3ec:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
		return -EINVAL;
    a3f0:	f06f 0315 	mvn.w	r3, #21
    a3f4:	e093      	b.n	a51e <large_update_put+0x1ce>
	}

	LOG_INF("**************");
    a3f6:	f010 ff1b 	bl	1b230 <_is_user_context>
    a3fa:	4603      	mov	r3, r0
    a3fc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	LOG_INF("[ctx] current %zu block_size %u total_size %zu",
    a400:	f010 ff16 	bl	1b230 <_is_user_context>
    a404:	4603      	mov	r3, r0
    a406:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		ctx.current, coap_block_size_to_bytes(ctx.block_size),
		ctx.total_size);
	LOG_INF("**************");
    a40a:	f010 ff11 	bl	1b230 <_is_user_context>
    a40e:	4603      	mov	r3, r0
    a410:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75

	code = coap_header_get_code(request);
    a414:	68b8      	ldr	r0, [r7, #8]
    a416:	f013 fd29 	bl	1de6c <coap_header_get_code>
    a41a:	4603      	mov	r3, r0
    a41c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	type = coap_header_get_type(request);
    a420:	68b8      	ldr	r0, [r7, #8]
    a422:	f013 fcd0 	bl	1ddc6 <coap_header_get_type>
    a426:	4603      	mov	r3, r0
    a428:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	id = coap_header_get_id(request);
    a42c:	68b8      	ldr	r0, [r7, #8]
    a42e:	f013 fd4a 	bl	1dec6 <coap_header_get_id>
    a432:	4603      	mov	r3, r0
    a434:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	tkl = coap_header_get_token(request, token);
    a438:	f107 0358 	add.w	r3, r7, #88	; 0x58
    a43c:	4619      	mov	r1, r3
    a43e:	68b8      	ldr	r0, [r7, #8]
    a440:	f013 fcf0 	bl	1de24 <coap_header_get_token>
    a444:	4603      	mov	r3, r0
    a446:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	LOG_INF("*******");
    a44a:	f010 fef1 	bl	1b230 <_is_user_context>
    a44e:	4603      	mov	r3, r0
    a450:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	LOG_INF("type: %u code %u id %u", type, code, id);
    a454:	f010 feec 	bl	1b230 <_is_user_context>
    a458:	4603      	mov	r3, r0
    a45a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
	LOG_INF("*******");
    a45e:	f010 fee7 	bl	1b230 <_is_user_context>
    a462:	4603      	mov	r3, r0
    a464:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	/* Do something with the payload */

	if (!last_block) {
    a468:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
    a46c:	f083 0301 	eor.w	r3, r3, #1
    a470:	b2db      	uxtb	r3, r3
    a472:	2b00      	cmp	r3, #0
    a474:	d003      	beq.n	a47e <large_update_put+0x12e>
		code = COAP_RESPONSE_CODE_CONTINUE;
    a476:	235f      	movs	r3, #95	; 0x5f
    a478:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
    a47c:	e002      	b.n	a484 <large_update_put+0x134>
	} else {
		code = COAP_RESPONSE_CODE_CHANGED;
    a47e:	2344      	movs	r3, #68	; 0x44
    a480:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	}

	data = (u8_t *)k_malloc(MAX_COAP_MSG_LEN);
    a484:	f44f 7080 	mov.w	r0, #256	; 0x100
    a488:	f00c fa70 	bl	1696c <k_malloc>
    a48c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	if (!data) {
    a490:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
    a494:	2b00      	cmp	r3, #0
    a496:	d102      	bne.n	a49e <large_update_put+0x14e>
		return -ENOMEM;
    a498:	f06f 030b 	mvn.w	r3, #11
    a49c:	e03f      	b.n	a51e <large_update_put+0x1ce>
	}

	r = coap_packet_init(&response, data, MAX_COAP_MSG_LEN,
    a49e:	f107 0060 	add.w	r0, r7, #96	; 0x60
    a4a2:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
    a4a6:	9304      	str	r3, [sp, #16]
    a4a8:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
    a4ac:	9303      	str	r3, [sp, #12]
    a4ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
    a4b2:	9302      	str	r3, [sp, #8]
    a4b4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
    a4b8:	9301      	str	r3, [sp, #4]
    a4ba:	2302      	movs	r3, #2
    a4bc:	9300      	str	r3, [sp, #0]
    a4be:	2301      	movs	r3, #1
    a4c0:	f44f 7280 	mov.w	r2, #256	; 0x100
    a4c4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
    a4c8:	f012 ff93 	bl	1d3f2 <coap_packet_init>
    a4cc:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
			     1, COAP_TYPE_ACK, tkl, (u8_t *) token, code, id);
	if (r < 0) {
    a4d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    a4d4:	2b00      	cmp	r3, #0
    a4d6:	db1b      	blt.n	a510 <large_update_put+0x1c0>
		goto end;
	}

	r = coap_append_block1_option(&response, &ctx);
    a4d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
    a4dc:	4912      	ldr	r1, [pc, #72]	; (a528 <large_update_put+0x1d8>)
    a4de:	4618      	mov	r0, r3
    a4e0:	f013 fe30 	bl	1e144 <coap_append_block1_option>
    a4e4:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	if (r < 0) {
    a4e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    a4ec:	2b00      	cmp	r3, #0
    a4ee:	da05      	bge.n	a4fc <large_update_put+0x1ac>
		LOG_ERR("Could not add Block1 option to response");
    a4f0:	f010 fe9e 	bl	1b230 <_is_user_context>
    a4f4:	4603      	mov	r3, r0
    a4f6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		goto end;
    a4fa:	e00a      	b.n	a512 <large_update_put+0x1c2>
	}

	r = send_coap_reply(&response, addr, addr_len);
    a4fc:	f107 0360 	add.w	r3, r7, #96	; 0x60
    a500:	683a      	ldr	r2, [r7, #0]
    a502:	6879      	ldr	r1, [r7, #4]
    a504:	4618      	mov	r0, r3
    a506:	f7ff f973 	bl	97f0 <send_coap_reply>
    a50a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    a50e:	e000      	b.n	a512 <large_update_put+0x1c2>
		goto end;
    a510:	bf00      	nop

end:
	k_free(data);
    a512:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
    a516:	f01f fd5c 	bl	29fd2 <k_free>

	return r;
    a51a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
    a51e:	4618      	mov	r0, r3
    a520:	3790      	adds	r7, #144	; 0x90
    a522:	46bd      	mov	sp, r7
    a524:	bd80      	pop	{r7, pc}
    a526:	bf00      	nop
    a528:	200024a8 	.word	0x200024a8

0000a52c <large_create_post>:

static int large_create_post(struct coap_resource *resource,
			     struct coap_packet *request,
			     struct sockaddr *addr, socklen_t addr_len)
{
    a52c:	b580      	push	{r7, lr}
    a52e:	b0a2      	sub	sp, #136	; 0x88
    a530:	af06      	add	r7, sp, #24
    a532:	60f8      	str	r0, [r7, #12]
    a534:	60b9      	str	r1, [r7, #8]
    a536:	607a      	str	r2, [r7, #4]
    a538:	603b      	str	r3, [r7, #0]
	u8_t type;
	u8_t tkl;
	int r;
	bool last_block;

	r = get_option_int(request, COAP_OPTION_BLOCK1);
    a53a:	211b      	movs	r1, #27
    a53c:	68b8      	ldr	r0, [r7, #8]
    a53e:	f010 ffe0 	bl	1b502 <get_option_int>
    a542:	66f8      	str	r0, [r7, #108]	; 0x6c
	if (r < 0) {
    a544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    a546:	2b00      	cmp	r3, #0
    a548:	da02      	bge.n	a550 <large_create_post+0x24>
		return -EINVAL;
    a54a:	f06f 0315 	mvn.w	r3, #21
    a54e:	e0b5      	b.n	a6bc <large_create_post+0x190>
	}

	last_block = !GET_MORE(r);
    a550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    a552:	f003 0308 	and.w	r3, r3, #8
    a556:	2b00      	cmp	r3, #0
    a558:	bf0c      	ite	eq
    a55a:	2301      	moveq	r3, #1
    a55c:	2300      	movne	r3, #0
    a55e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	/* initialize block context upon the arrival of first block */
	if (!GET_BLOCK_NUM(r)) {
    a562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    a564:	111b      	asrs	r3, r3, #4
    a566:	2b00      	cmp	r3, #0
    a568:	d104      	bne.n	a574 <large_create_post+0x48>
		coap_block_transfer_init(&ctx, COAP_BLOCK_32, 0);
    a56a:	2200      	movs	r2, #0
    a56c:	2101      	movs	r1, #1
    a56e:	4855      	ldr	r0, [pc, #340]	; (a6c4 <large_create_post+0x198>)
    a570:	f013 fdd2 	bl	1e118 <coap_block_transfer_init>
	}

	r = coap_update_from_block(request, &ctx);
    a574:	4953      	ldr	r1, [pc, #332]	; (a6c4 <large_create_post+0x198>)
    a576:	68b8      	ldr	r0, [r7, #8]
    a578:	f013 ff73 	bl	1e462 <coap_update_from_block>
    a57c:	66f8      	str	r0, [r7, #108]	; 0x6c
	if (r < 0) {
    a57e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    a580:	2b00      	cmp	r3, #0
    a582:	da07      	bge.n	a594 <large_create_post+0x68>
		LOG_ERR("Invalid block size option from request");
    a584:	f010 fe54 	bl	1b230 <_is_user_context>
    a588:	4603      	mov	r3, r0
    a58a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
		return -EINVAL;
    a58e:	f06f 0315 	mvn.w	r3, #21
    a592:	e093      	b.n	a6bc <large_create_post+0x190>
	}

	payload = coap_packet_get_payload(request, &len);
    a594:	f107 0336 	add.w	r3, r7, #54	; 0x36
    a598:	4619      	mov	r1, r3
    a59a:	68b8      	ldr	r0, [r7, #8]
    a59c:	f013 fcb3 	bl	1df06 <coap_packet_get_payload>
    a5a0:	65f8      	str	r0, [r7, #92]	; 0x5c
	if (!last_block && payload) {
    a5a2:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
    a5a6:	f083 0301 	eor.w	r3, r3, #1
    a5aa:	b2db      	uxtb	r3, r3
    a5ac:	2b00      	cmp	r3, #0
    a5ae:	d00a      	beq.n	a5c6 <large_create_post+0x9a>
    a5b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    a5b2:	2b00      	cmp	r3, #0
    a5b4:	d007      	beq.n	a5c6 <large_create_post+0x9a>
		LOG_ERR("Packet without payload");
    a5b6:	f010 fe3b 	bl	1b230 <_is_user_context>
    a5ba:	4603      	mov	r3, r0
    a5bc:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
		return -EINVAL;
    a5c0:	f06f 0315 	mvn.w	r3, #21
    a5c4:	e07a      	b.n	a6bc <large_create_post+0x190>
	}

	code = coap_header_get_code(request);
    a5c6:	68b8      	ldr	r0, [r7, #8]
    a5c8:	f013 fc50 	bl	1de6c <coap_header_get_code>
    a5cc:	4603      	mov	r3, r0
    a5ce:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	type = coap_header_get_type(request);
    a5d2:	68b8      	ldr	r0, [r7, #8]
    a5d4:	f013 fbf7 	bl	1ddc6 <coap_header_get_type>
    a5d8:	4603      	mov	r3, r0
    a5da:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	id = coap_header_get_id(request);
    a5de:	68b8      	ldr	r0, [r7, #8]
    a5e0:	f013 fc71 	bl	1dec6 <coap_header_get_id>
    a5e4:	4603      	mov	r3, r0
    a5e6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	tkl = coap_header_get_token(request, token);
    a5ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
    a5ee:	4619      	mov	r1, r3
    a5f0:	68b8      	ldr	r0, [r7, #8]
    a5f2:	f013 fc17 	bl	1de24 <coap_header_get_token>
    a5f6:	4603      	mov	r3, r0
    a5f8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	LOG_INF("*******");
    a5fc:	f010 fe18 	bl	1b230 <_is_user_context>
    a600:	4603      	mov	r3, r0
    a602:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	LOG_INF("type: %u code %u id %u", type, code, id);
    a606:	f010 fe13 	bl	1b230 <_is_user_context>
    a60a:	4603      	mov	r3, r0
    a60c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	LOG_INF("*******");
    a610:	f010 fe0e 	bl	1b230 <_is_user_context>
    a614:	4603      	mov	r3, r0
    a616:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

	if (!last_block) {
    a61a:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
    a61e:	f083 0301 	eor.w	r3, r3, #1
    a622:	b2db      	uxtb	r3, r3
    a624:	2b00      	cmp	r3, #0
    a626:	d003      	beq.n	a630 <large_create_post+0x104>
		code = COAP_RESPONSE_CODE_CONTINUE;
    a628:	235f      	movs	r3, #95	; 0x5f
    a62a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    a62e:	e002      	b.n	a636 <large_create_post+0x10a>
	} else {
		code = COAP_RESPONSE_CODE_CREATED;
    a630:	2341      	movs	r3, #65	; 0x41
    a632:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	}

	data = (u8_t *)k_malloc(MAX_COAP_MSG_LEN);
    a636:	f44f 7080 	mov.w	r0, #256	; 0x100
    a63a:	f00c f997 	bl	1696c <k_malloc>
    a63e:	6678      	str	r0, [r7, #100]	; 0x64
	if (!data) {
    a640:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    a642:	2b00      	cmp	r3, #0
    a644:	d102      	bne.n	a64c <large_create_post+0x120>
		return -ENOMEM;
    a646:	f06f 030b 	mvn.w	r3, #11
    a64a:	e037      	b.n	a6bc <large_create_post+0x190>
	}

	r = coap_packet_init(&response, data, MAX_COAP_MSG_LEN,
    a64c:	f107 0040 	add.w	r0, r7, #64	; 0x40
    a650:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
    a654:	9304      	str	r3, [sp, #16]
    a656:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
    a65a:	9303      	str	r3, [sp, #12]
    a65c:	f107 0338 	add.w	r3, r7, #56	; 0x38
    a660:	9302      	str	r3, [sp, #8]
    a662:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
    a666:	9301      	str	r3, [sp, #4]
    a668:	2302      	movs	r3, #2
    a66a:	9300      	str	r3, [sp, #0]
    a66c:	2301      	movs	r3, #1
    a66e:	f44f 7280 	mov.w	r2, #256	; 0x100
    a672:	6e79      	ldr	r1, [r7, #100]	; 0x64
    a674:	f012 febd 	bl	1d3f2 <coap_packet_init>
    a678:	66f8      	str	r0, [r7, #108]	; 0x6c
			     1, COAP_TYPE_ACK, tkl, (u8_t *)token, code, id);
	if (r < 0) {
    a67a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    a67c:	2b00      	cmp	r3, #0
    a67e:	db18      	blt.n	a6b2 <large_create_post+0x186>
		goto end;
	}

	r = coap_append_block1_option(&response, &ctx);
    a680:	f107 0340 	add.w	r3, r7, #64	; 0x40
    a684:	490f      	ldr	r1, [pc, #60]	; (a6c4 <large_create_post+0x198>)
    a686:	4618      	mov	r0, r3
    a688:	f013 fd5c 	bl	1e144 <coap_append_block1_option>
    a68c:	66f8      	str	r0, [r7, #108]	; 0x6c
	if (r < 0) {
    a68e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    a690:	2b00      	cmp	r3, #0
    a692:	da05      	bge.n	a6a0 <large_create_post+0x174>
		LOG_ERR("Could not add Block1 option to response");
    a694:	f010 fdcc 	bl	1b230 <_is_user_context>
    a698:	4603      	mov	r3, r0
    a69a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		goto end;
    a69e:	e009      	b.n	a6b4 <large_create_post+0x188>
	}

	r = send_coap_reply(&response, addr, addr_len);
    a6a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
    a6a4:	683a      	ldr	r2, [r7, #0]
    a6a6:	6879      	ldr	r1, [r7, #4]
    a6a8:	4618      	mov	r0, r3
    a6aa:	f7ff f8a1 	bl	97f0 <send_coap_reply>
    a6ae:	66f8      	str	r0, [r7, #108]	; 0x6c
    a6b0:	e000      	b.n	a6b4 <large_create_post+0x188>
		goto end;
    a6b2:	bf00      	nop

end:
	k_free(data);
    a6b4:	6e78      	ldr	r0, [r7, #100]	; 0x64
    a6b6:	f01f fc8c 	bl	29fd2 <k_free>

	return r;
    a6ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
    a6bc:	4618      	mov	r0, r3
    a6be:	3770      	adds	r7, #112	; 0x70
    a6c0:	46bd      	mov	sp, r7
    a6c2:	bd80      	pop	{r7, pc}
    a6c4:	200024b4 	.word	0x200024b4

0000a6c8 <retransmit_request>:
				    u16_t age, u16_t id,
				    const u8_t *token, u8_t tkl,
				    bool is_response);

static void retransmit_request(struct k_work *work)
{
    a6c8:	b580      	push	{r7, lr}
    a6ca:	b084      	sub	sp, #16
    a6cc:	af00      	add	r7, sp, #0
    a6ce:	6078      	str	r0, [r7, #4]
	struct coap_pending *pending;

	pending = coap_pending_next_to_expire(pendings, NUM_PENDINGS);
    a6d0:	2103      	movs	r1, #3
    a6d2:	4812      	ldr	r0, [pc, #72]	; (a71c <retransmit_request+0x54>)
    a6d4:	f014 f80b 	bl	1e6ee <coap_pending_next_to_expire>
    a6d8:	60f8      	str	r0, [r7, #12]
	if (!pending) {
    a6da:	68fb      	ldr	r3, [r7, #12]
    a6dc:	2b00      	cmp	r3, #0
    a6de:	d018      	beq.n	a712 <retransmit_request+0x4a>
		return;
	}

	if (!coap_pending_cycle(pending)) {
    a6e0:	68f8      	ldr	r0, [r7, #12]
    a6e2:	f014 f85a 	bl	1e79a <coap_pending_cycle>
    a6e6:	4603      	mov	r3, r0
    a6e8:	f083 0301 	eor.w	r3, r3, #1
    a6ec:	b2db      	uxtb	r3, r3
    a6ee:	2b00      	cmp	r3, #0
    a6f0:	d008      	beq.n	a704 <retransmit_request+0x3c>
		k_free(pending->data);
    a6f2:	68fb      	ldr	r3, [r7, #12]
    a6f4:	691b      	ldr	r3, [r3, #16]
    a6f6:	4618      	mov	r0, r3
    a6f8:	f01f fc6b 	bl	29fd2 <k_free>
		coap_pending_clear(pending);
    a6fc:	68f8      	ldr	r0, [r7, #12]
    a6fe:	f014 f867 	bl	1e7d0 <coap_pending_clear>
		return;
    a702:	e007      	b.n	a714 <retransmit_request+0x4c>
	}

	k_delayed_work_submit(&retransmit_work, pending->timeout);
    a704:	68fb      	ldr	r3, [r7, #12]
    a706:	689b      	ldr	r3, [r3, #8]
    a708:	4619      	mov	r1, r3
    a70a:	4805      	ldr	r0, [pc, #20]	; (a720 <retransmit_request+0x58>)
    a70c:	f7ff f80a 	bl	9724 <k_delayed_work_submit>
    a710:	e000      	b.n	a714 <retransmit_request+0x4c>
		return;
    a712:	bf00      	nop
}
    a714:	3710      	adds	r7, #16
    a716:	46bd      	mov	sp, r7
    a718:	bd80      	pop	{r7, pc}
    a71a:	bf00      	nop
    a71c:	2000240c 	.word	0x2000240c
    a720:	2000247c 	.word	0x2000247c

0000a724 <update_counter>:

static void update_counter(struct k_work *work)
{
    a724:	b580      	push	{r7, lr}
    a726:	b082      	sub	sp, #8
    a728:	af00      	add	r7, sp, #0
    a72a:	6078      	str	r0, [r7, #4]
	obs_counter++;
    a72c:	4b0b      	ldr	r3, [pc, #44]	; (a75c <update_counter+0x38>)
    a72e:	681b      	ldr	r3, [r3, #0]
    a730:	3301      	adds	r3, #1
    a732:	4a0a      	ldr	r2, [pc, #40]	; (a75c <update_counter+0x38>)
    a734:	6013      	str	r3, [r2, #0]

	if (resource_to_notify) {
    a736:	4b0a      	ldr	r3, [pc, #40]	; (a760 <update_counter+0x3c>)
    a738:	681b      	ldr	r3, [r3, #0]
    a73a:	2b00      	cmp	r3, #0
    a73c:	d004      	beq.n	a748 <update_counter+0x24>
		coap_resource_notify(resource_to_notify);
    a73e:	4b08      	ldr	r3, [pc, #32]	; (a760 <update_counter+0x3c>)
    a740:	681b      	ldr	r3, [r3, #0]
    a742:	4618      	mov	r0, r3
    a744:	f014 f878 	bl	1e838 <coap_resource_notify>
	}

	k_delayed_work_submit(&observer_work, MSEC_PER_SEC * 5U);
    a748:	f241 3188 	movw	r1, #5000	; 0x1388
    a74c:	4805      	ldr	r0, [pc, #20]	; (a764 <update_counter+0x40>)
    a74e:	f7fe ffe9 	bl	9724 <k_delayed_work_submit>
}
    a752:	bf00      	nop
    a754:	3708      	adds	r7, #8
    a756:	46bd      	mov	sp, r7
    a758:	bd80      	pop	{r7, pc}
    a75a:	bf00      	nop
    a75c:	20002474 	.word	0x20002474
    a760:	20002478 	.word	0x20002478
    a764:	20002454 	.word	0x20002454

0000a768 <create_pending_request>:

static int create_pending_request(struct coap_packet *response,
				  const struct sockaddr *addr)
{
    a768:	b580      	push	{r7, lr}
    a76a:	b084      	sub	sp, #16
    a76c:	af00      	add	r7, sp, #0
    a76e:	6078      	str	r0, [r7, #4]
    a770:	6039      	str	r1, [r7, #0]
	struct coap_pending *pending;
	int r;

	pending = coap_pending_next_unused(pendings, NUM_PENDINGS);
    a772:	2103      	movs	r1, #3
    a774:	4816      	ldr	r0, [pc, #88]	; (a7d0 <create_pending_request+0x68>)
    a776:	f013 ff1e 	bl	1e5b6 <coap_pending_next_unused>
    a77a:	60f8      	str	r0, [r7, #12]
	if (!pending) {
    a77c:	68fb      	ldr	r3, [r7, #12]
    a77e:	2b00      	cmp	r3, #0
    a780:	d102      	bne.n	a788 <create_pending_request+0x20>
		return -ENOMEM;
    a782:	f06f 030b 	mvn.w	r3, #11
    a786:	e01f      	b.n	a7c8 <create_pending_request+0x60>
	}

	r = coap_pending_init(pending, response, addr);
    a788:	683a      	ldr	r2, [r7, #0]
    a78a:	6879      	ldr	r1, [r7, #4]
    a78c:	68f8      	ldr	r0, [r7, #12]
    a78e:	f013 feed 	bl	1e56c <coap_pending_init>
    a792:	60b8      	str	r0, [r7, #8]
	if (r < 0) {
    a794:	68bb      	ldr	r3, [r7, #8]
    a796:	2b00      	cmp	r3, #0
    a798:	da02      	bge.n	a7a0 <create_pending_request+0x38>
		return -EINVAL;
    a79a:	f06f 0315 	mvn.w	r3, #21
    a79e:	e013      	b.n	a7c8 <create_pending_request+0x60>
	}

	coap_pending_cycle(pending);
    a7a0:	68f8      	ldr	r0, [r7, #12]
    a7a2:	f013 fffa 	bl	1e79a <coap_pending_cycle>

	pending = coap_pending_next_to_expire(pendings, NUM_PENDINGS);
    a7a6:	2103      	movs	r1, #3
    a7a8:	4809      	ldr	r0, [pc, #36]	; (a7d0 <create_pending_request+0x68>)
    a7aa:	f013 ffa0 	bl	1e6ee <coap_pending_next_to_expire>
    a7ae:	60f8      	str	r0, [r7, #12]
	if (!pending) {
    a7b0:	68fb      	ldr	r3, [r7, #12]
    a7b2:	2b00      	cmp	r3, #0
    a7b4:	d101      	bne.n	a7ba <create_pending_request+0x52>
		return 0;
    a7b6:	2300      	movs	r3, #0
    a7b8:	e006      	b.n	a7c8 <create_pending_request+0x60>
	}

	k_delayed_work_submit(&retransmit_work, pending->timeout);
    a7ba:	68fb      	ldr	r3, [r7, #12]
    a7bc:	689b      	ldr	r3, [r3, #8]
    a7be:	4619      	mov	r1, r3
    a7c0:	4804      	ldr	r0, [pc, #16]	; (a7d4 <create_pending_request+0x6c>)
    a7c2:	f7fe ffaf 	bl	9724 <k_delayed_work_submit>

	return 0;
    a7c6:	2300      	movs	r3, #0
}
    a7c8:	4618      	mov	r0, r3
    a7ca:	3710      	adds	r7, #16
    a7cc:	46bd      	mov	sp, r7
    a7ce:	bd80      	pop	{r7, pc}
    a7d0:	2000240c 	.word	0x2000240c
    a7d4:	2000247c 	.word	0x2000247c

0000a7d8 <send_notification_packet>:
static int send_notification_packet(const struct sockaddr *addr,
				    socklen_t addr_len,
				    u16_t age, u16_t id,
				    const u8_t *token, u8_t tkl,
				    bool is_response)
{
    a7d8:	b580      	push	{r7, lr}
    a7da:	b096      	sub	sp, #88	; 0x58
    a7dc:	af06      	add	r7, sp, #24
    a7de:	60f8      	str	r0, [r7, #12]
    a7e0:	60b9      	str	r1, [r7, #8]
    a7e2:	4611      	mov	r1, r2
    a7e4:	461a      	mov	r2, r3
    a7e6:	460b      	mov	r3, r1
    a7e8:	80fb      	strh	r3, [r7, #6]
    a7ea:	4613      	mov	r3, r2
    a7ec:	80bb      	strh	r3, [r7, #4]
	char payload[14];
	u8_t *data;
	u8_t type;
	int r;

	if (is_response) {
    a7ee:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    a7f2:	2b00      	cmp	r3, #0
    a7f4:	d003      	beq.n	a7fe <send_notification_packet+0x26>
		type = COAP_TYPE_ACK;
    a7f6:	2302      	movs	r3, #2
    a7f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    a7fc:	e002      	b.n	a804 <send_notification_packet+0x2c>
	} else {
		type = COAP_TYPE_CON;
    a7fe:	2300      	movs	r3, #0
    a800:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	if (!is_response) {
    a804:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    a808:	f083 0301 	eor.w	r3, r3, #1
    a80c:	b2db      	uxtb	r3, r3
    a80e:	2b00      	cmp	r3, #0
    a810:	d003      	beq.n	a81a <send_notification_packet+0x42>
		id = coap_next_id();
    a812:	f7fe ff99 	bl	9748 <coap_next_id>
    a816:	4603      	mov	r3, r0
    a818:	80bb      	strh	r3, [r7, #4]
	}

	data = (u8_t *)k_malloc(MAX_COAP_MSG_LEN);
    a81a:	f44f 7080 	mov.w	r0, #256	; 0x100
    a81e:	f00c f8a5 	bl	1696c <k_malloc>
    a822:	6378      	str	r0, [r7, #52]	; 0x34
	if (!data) {
    a824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a826:	2b00      	cmp	r3, #0
    a828:	d102      	bne.n	a830 <send_notification_packet+0x58>
		return -ENOMEM;
    a82a:	f06f 030b 	mvn.w	r3, #11
    a82e:	e08b      	b.n	a948 <send_notification_packet+0x170>
	}

	r = coap_packet_init(&response, data, MAX_COAP_MSG_LEN,
    a830:	f107 0024 	add.w	r0, r7, #36	; 0x24
    a834:	88bb      	ldrh	r3, [r7, #4]
    a836:	9304      	str	r3, [sp, #16]
    a838:	2345      	movs	r3, #69	; 0x45
    a83a:	9303      	str	r3, [sp, #12]
    a83c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a83e:	9302      	str	r3, [sp, #8]
    a840:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
    a844:	9301      	str	r3, [sp, #4]
    a846:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    a84a:	9300      	str	r3, [sp, #0]
    a84c:	2301      	movs	r3, #1
    a84e:	f44f 7280 	mov.w	r2, #256	; 0x100
    a852:	6b79      	ldr	r1, [r7, #52]	; 0x34
    a854:	f012 fdcd 	bl	1d3f2 <coap_packet_init>
    a858:	63b8      	str	r0, [r7, #56]	; 0x38
			     1, type, tkl, (u8_t *)token,
			     COAP_RESPONSE_CODE_CONTENT, id);
	if (r < 0) {
    a85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a85c:	2b00      	cmp	r3, #0
    a85e:	db60      	blt.n	a922 <send_notification_packet+0x14a>
		goto end;
	}

	if (age >= 2U) {
    a860:	88fb      	ldrh	r3, [r7, #6]
    a862:	2b01      	cmp	r3, #1
    a864:	d90a      	bls.n	a87c <send_notification_packet+0xa4>
		r = coap_append_option_int(&response, COAP_OPTION_OBSERVE, age);
    a866:	88fa      	ldrh	r2, [r7, #6]
    a868:	f107 0324 	add.w	r3, r7, #36	; 0x24
    a86c:	2106      	movs	r1, #6
    a86e:	4618      	mov	r0, r3
    a870:	f003 fcd6 	bl	e220 <coap_append_option_int>
    a874:	63b8      	str	r0, [r7, #56]	; 0x38
		if (r < 0) {
    a876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a878:	2b00      	cmp	r3, #0
    a87a:	db54      	blt.n	a926 <send_notification_packet+0x14e>
			goto end;
		}
	}

	r = coap_packet_append_option(&response, COAP_OPTION_CONTENT_FORMAT,
    a87c:	f107 0024 	add.w	r0, r7, #36	; 0x24
    a880:	2301      	movs	r3, #1
    a882:	4a33      	ldr	r2, [pc, #204]	; (a950 <send_notification_packet+0x178>)
    a884:	210c      	movs	r1, #12
    a886:	f012 ff53 	bl	1d730 <coap_packet_append_option>
    a88a:	63b8      	str	r0, [r7, #56]	; 0x38
				      &plain_text_format,
				      sizeof(plain_text_format));
	if (r < 0) {
    a88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a88e:	2b00      	cmp	r3, #0
    a890:	db4b      	blt.n	a92a <send_notification_packet+0x152>
		goto end;
	}

	r = coap_packet_append_payload_marker(&response);
    a892:	f107 0324 	add.w	r3, r7, #36	; 0x24
    a896:	4618      	mov	r0, r3
    a898:	f012 ffa3 	bl	1d7e2 <coap_packet_append_payload_marker>
    a89c:	63b8      	str	r0, [r7, #56]	; 0x38
	if (r < 0) {
    a89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a8a0:	2b00      	cmp	r3, #0
    a8a2:	db44      	blt.n	a92e <send_notification_packet+0x156>
		goto end;
	}

	/* The response that coap-client expects */
	r = snprintk((char *) payload, sizeof(payload),
    a8a4:	4b2b      	ldr	r3, [pc, #172]	; (a954 <send_notification_packet+0x17c>)
    a8a6:	681b      	ldr	r3, [r3, #0]
    a8a8:	f107 0014 	add.w	r0, r7, #20
    a8ac:	4a2a      	ldr	r2, [pc, #168]	; (a958 <send_notification_packet+0x180>)
    a8ae:	210e      	movs	r1, #14
    a8b0:	f011 fc85 	bl	1c1be <snprintk>
    a8b4:	63b8      	str	r0, [r7, #56]	; 0x38
		     "Counter: %d\n", obs_counter);
	if (r < 0) {
    a8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a8b8:	2b00      	cmp	r3, #0
    a8ba:	db3a      	blt.n	a932 <send_notification_packet+0x15a>
		goto end;
	}

	r = coap_packet_append_payload(&response, (u8_t *)payload,
				       strlen(payload));
    a8bc:	f107 0314 	add.w	r3, r7, #20
    a8c0:	4618      	mov	r0, r3
    a8c2:	f7f7 fc18 	bl	20f6 <strlen>
    a8c6:	4603      	mov	r3, r0
	r = coap_packet_append_payload(&response, (u8_t *)payload,
    a8c8:	b29a      	uxth	r2, r3
    a8ca:	f107 0114 	add.w	r1, r7, #20
    a8ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
    a8d2:	4618      	mov	r0, r3
    a8d4:	f012 ff98 	bl	1d808 <coap_packet_append_payload>
    a8d8:	63b8      	str	r0, [r7, #56]	; 0x38
	if (r < 0) {
    a8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a8dc:	2b00      	cmp	r3, #0
    a8de:	db2a      	blt.n	a936 <send_notification_packet+0x15e>
		goto end;
	}

	if (type == COAP_TYPE_CON) {
    a8e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    a8e4:	2b00      	cmp	r3, #0
    a8e6:	d109      	bne.n	a8fc <send_notification_packet+0x124>
		r = create_pending_request(&response, addr);
    a8e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
    a8ec:	68f9      	ldr	r1, [r7, #12]
    a8ee:	4618      	mov	r0, r3
    a8f0:	f7ff ff3a 	bl	a768 <create_pending_request>
    a8f4:	63b8      	str	r0, [r7, #56]	; 0x38
		if (r < 0) {
    a8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a8f8:	2b00      	cmp	r3, #0
    a8fa:	db1e      	blt.n	a93a <send_notification_packet+0x162>
			goto end;
		}
	}

	k_delayed_work_submit(&observer_work, MSEC_PER_SEC * 5U);
    a8fc:	f241 3188 	movw	r1, #5000	; 0x1388
    a900:	4816      	ldr	r0, [pc, #88]	; (a95c <send_notification_packet+0x184>)
    a902:	f7fe ff0f 	bl	9724 <k_delayed_work_submit>

	r = send_coap_reply(&response, addr, addr_len);
    a906:	f107 0324 	add.w	r3, r7, #36	; 0x24
    a90a:	68ba      	ldr	r2, [r7, #8]
    a90c:	68f9      	ldr	r1, [r7, #12]
    a90e:	4618      	mov	r0, r3
    a910:	f7fe ff6e 	bl	97f0 <send_coap_reply>
    a914:	63b8      	str	r0, [r7, #56]	; 0x38

	/* On succesfull creation of pending request, do not free memory */
	if (type == COAP_TYPE_CON) {
    a916:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    a91a:	2b00      	cmp	r3, #0
    a91c:	d10f      	bne.n	a93e <send_notification_packet+0x166>
		return r;
    a91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a920:	e012      	b.n	a948 <send_notification_packet+0x170>
		goto end;
    a922:	bf00      	nop
    a924:	e00c      	b.n	a940 <send_notification_packet+0x168>
			goto end;
    a926:	bf00      	nop
    a928:	e00a      	b.n	a940 <send_notification_packet+0x168>
		goto end;
    a92a:	bf00      	nop
    a92c:	e008      	b.n	a940 <send_notification_packet+0x168>
		goto end;
    a92e:	bf00      	nop
    a930:	e006      	b.n	a940 <send_notification_packet+0x168>
		goto end;
    a932:	bf00      	nop
    a934:	e004      	b.n	a940 <send_notification_packet+0x168>
		goto end;
    a936:	bf00      	nop
    a938:	e002      	b.n	a940 <send_notification_packet+0x168>
			goto end;
    a93a:	bf00      	nop
    a93c:	e000      	b.n	a940 <send_notification_packet+0x168>
	}

end:
    a93e:	bf00      	nop
	k_free(data);
    a940:	6b78      	ldr	r0, [r7, #52]	; 0x34
    a942:	f01f fb46 	bl	29fd2 <k_free>

	return r;
    a946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    a948:	4618      	mov	r0, r3
    a94a:	3740      	adds	r7, #64	; 0x40
    a94c:	46bd      	mov	sp, r7
    a94e:	bd80      	pop	{r7, pc}
    a950:	0002f05c 	.word	0x0002f05c
    a954:	20002474 	.word	0x20002474
    a958:	0002d5c4 	.word	0x0002d5c4
    a95c:	20002454 	.word	0x20002454

0000a960 <obs_get>:

static int obs_get(struct coap_resource *resource,
		   struct coap_packet *request,
		   struct sockaddr *addr, socklen_t addr_len)
{
    a960:	b580      	push	{r7, lr}
    a962:	b096      	sub	sp, #88	; 0x58
    a964:	af04      	add	r7, sp, #16
    a966:	60f8      	str	r0, [r7, #12]
    a968:	60b9      	str	r1, [r7, #8]
    a96a:	607a      	str	r2, [r7, #4]
    a96c:	603b      	str	r3, [r7, #0]
	u8_t token[8];
	u16_t id;
	u8_t code;
	u8_t type;
	u8_t tkl;
	bool observe = true;
    a96e:	2301      	movs	r3, #1
    a970:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

	if (!coap_request_is_observe(request)) {
    a974:	68b8      	ldr	r0, [r7, #8]
    a976:	f013 ffa2 	bl	1e8be <coap_request_is_observe>
    a97a:	4603      	mov	r3, r0
    a97c:	f083 0301 	eor.w	r3, r3, #1
    a980:	b2db      	uxtb	r3, r3
    a982:	2b00      	cmp	r3, #0
    a984:	d003      	beq.n	a98e <obs_get+0x2e>
		observe = false;
    a986:	2300      	movs	r3, #0
    a988:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		goto done;
    a98c:	e016      	b.n	a9bc <obs_get+0x5c>
	}

	observer = coap_observer_next_unused(observers, NUM_OBSERVERS);
    a98e:	2103      	movs	r1, #3
    a990:	482e      	ldr	r0, [pc, #184]	; (aa4c <obs_get+0xec>)
    a992:	f013 fe5c 	bl	1e64e <coap_observer_next_unused>
    a996:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (!observer) {
    a998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a99a:	2b00      	cmp	r3, #0
    a99c:	d102      	bne.n	a9a4 <obs_get+0x44>
		return -ENOMEM;
    a99e:	f06f 030b 	mvn.w	r3, #11
    a9a2:	e04e      	b.n	aa42 <obs_get+0xe2>
	}

	coap_observer_init(observer, request, addr);
    a9a4:	687a      	ldr	r2, [r7, #4]
    a9a6:	68b9      	ldr	r1, [r7, #8]
    a9a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    a9aa:	f013 ff99 	bl	1e8e0 <coap_observer_init>

	coap_register_observer(resource, observer);
    a9ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    a9b0:	68f8      	ldr	r0, [r7, #12]
    a9b2:	f013 ffbb 	bl	1e92c <coap_register_observer>

	resource_to_notify = resource;
    a9b6:	4a26      	ldr	r2, [pc, #152]	; (aa50 <obs_get+0xf0>)
    a9b8:	68fb      	ldr	r3, [r7, #12]
    a9ba:	6013      	str	r3, [r2, #0]

done:
	code = coap_header_get_code(request);
    a9bc:	68b8      	ldr	r0, [r7, #8]
    a9be:	f013 fa55 	bl	1de6c <coap_header_get_code>
    a9c2:	4603      	mov	r3, r0
    a9c4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	type = coap_header_get_type(request);
    a9c8:	68b8      	ldr	r0, [r7, #8]
    a9ca:	f013 f9fc 	bl	1ddc6 <coap_header_get_type>
    a9ce:	4603      	mov	r3, r0
    a9d0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	id = coap_header_get_id(request);
    a9d4:	68b8      	ldr	r0, [r7, #8]
    a9d6:	f013 fa76 	bl	1dec6 <coap_header_get_id>
    a9da:	4603      	mov	r3, r0
    a9dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	tkl = coap_header_get_token(request, token);
    a9e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
    a9e4:	4619      	mov	r1, r3
    a9e6:	68b8      	ldr	r0, [r7, #8]
    a9e8:	f013 fa1c 	bl	1de24 <coap_header_get_token>
    a9ec:	4603      	mov	r3, r0
    a9ee:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

	LOG_INF("*******");
    a9f2:	f010 fc1d 	bl	1b230 <_is_user_context>
    a9f6:	4603      	mov	r3, r0
    a9f8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	LOG_INF("type: %u code %u id %u", type, code, id);
    a9fc:	f010 fc18 	bl	1b230 <_is_user_context>
    aa00:	4603      	mov	r3, r0
    aa02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_INF("*******");
    aa06:	f010 fc13 	bl	1b230 <_is_user_context>
    aa0a:	4603      	mov	r3, r0
    aa0c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	return send_notification_packet(addr, addr_len,
    aa10:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
    aa14:	2b00      	cmp	r3, #0
    aa16:	d003      	beq.n	aa20 <obs_get+0xc0>
					observe ? resource->age : 0,
    aa18:	68fb      	ldr	r3, [r7, #12]
    aa1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return send_notification_packet(addr, addr_len,
    aa1c:	b29a      	uxth	r2, r3
    aa1e:	e000      	b.n	aa22 <obs_get+0xc2>
    aa20:	2200      	movs	r2, #0
    aa22:	f8b7 1042 	ldrh.w	r1, [r7, #66]	; 0x42
    aa26:	2301      	movs	r3, #1
    aa28:	9302      	str	r3, [sp, #8]
    aa2a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
    aa2e:	9301      	str	r3, [sp, #4]
    aa30:	f107 0330 	add.w	r3, r7, #48	; 0x30
    aa34:	9300      	str	r3, [sp, #0]
    aa36:	460b      	mov	r3, r1
    aa38:	6839      	ldr	r1, [r7, #0]
    aa3a:	6878      	ldr	r0, [r7, #4]
    aa3c:	f7ff fecc 	bl	a7d8 <send_notification_packet>
    aa40:	4603      	mov	r3, r0
					id, token, tkl, true);
}
    aa42:	4618      	mov	r0, r3
    aa44:	3748      	adds	r7, #72	; 0x48
    aa46:	46bd      	mov	sp, r7
    aa48:	bd80      	pop	{r7, pc}
    aa4a:	bf00      	nop
    aa4c:	200023c4 	.word	0x200023c4
    aa50:	20002478 	.word	0x20002478

0000aa54 <core_get>:
}

static int core_get(struct coap_resource *resource,
		    struct coap_packet *request,
		    struct sockaddr *addr, socklen_t addr_len)
{
    aa54:	b580      	push	{r7, lr}
    aa56:	b094      	sub	sp, #80	; 0x50
    aa58:	af06      	add	r7, sp, #24
    aa5a:	60f8      	str	r0, [r7, #12]
    aa5c:	60b9      	str	r1, [r7, #8]
    aa5e:	607a      	str	r2, [r7, #4]
    aa60:	603b      	str	r3, [r7, #0]
	u8_t *data;
	u16_t id;
	u8_t tkl;
	int r;

	id = coap_header_get_id(request);
    aa62:	68b8      	ldr	r0, [r7, #8]
    aa64:	f013 fa2f 	bl	1dec6 <coap_header_get_id>
    aa68:	4603      	mov	r3, r0
    aa6a:	867b      	strh	r3, [r7, #50]	; 0x32
	tkl = coap_header_get_token(request, token);
    aa6c:	f107 0314 	add.w	r3, r7, #20
    aa70:	4619      	mov	r1, r3
    aa72:	68b8      	ldr	r0, [r7, #8]
    aa74:	f013 f9d6 	bl	1de24 <coap_header_get_token>
    aa78:	4603      	mov	r3, r0
    aa7a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	data = (u8_t *)k_malloc(MAX_COAP_MSG_LEN);
    aa7e:	f44f 7080 	mov.w	r0, #256	; 0x100
    aa82:	f00b ff73 	bl	1696c <k_malloc>
    aa86:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (!data) {
    aa88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aa8a:	2b00      	cmp	r3, #0
    aa8c:	d102      	bne.n	aa94 <core_get+0x40>
		return -ENOMEM;
    aa8e:	f06f 030b 	mvn.w	r3, #11
    aa92:	e043      	b.n	ab1c <core_get+0xc8>
	}

	r = coap_packet_init(&response, data, MAX_COAP_MSG_LEN,
    aa94:	f107 001c 	add.w	r0, r7, #28
    aa98:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
    aa9a:	9304      	str	r3, [sp, #16]
    aa9c:	2345      	movs	r3, #69	; 0x45
    aa9e:	9303      	str	r3, [sp, #12]
    aaa0:	f107 0314 	add.w	r3, r7, #20
    aaa4:	9302      	str	r3, [sp, #8]
    aaa6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
    aaaa:	9301      	str	r3, [sp, #4]
    aaac:	2302      	movs	r3, #2
    aaae:	9300      	str	r3, [sp, #0]
    aab0:	2301      	movs	r3, #1
    aab2:	f44f 7280 	mov.w	r2, #256	; 0x100
    aab6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    aab8:	f012 fc9b 	bl	1d3f2 <coap_packet_init>
    aabc:	6378      	str	r0, [r7, #52]	; 0x34
			     1, COAP_TYPE_ACK, tkl, (u8_t *)token,
			     COAP_RESPONSE_CODE_CONTENT, id);
	if (r < 0) {
    aabe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    aac0:	2b00      	cmp	r3, #0
    aac2:	da03      	bge.n	aacc <core_get+0x78>
		r = -EINVAL;
    aac4:	f06f 0315 	mvn.w	r3, #21
    aac8:	637b      	str	r3, [r7, #52]	; 0x34
		goto end;
    aaca:	e023      	b.n	ab14 <core_get+0xc0>
	}

	r = coap_packet_append_payload_marker(&response);
    aacc:	f107 031c 	add.w	r3, r7, #28
    aad0:	4618      	mov	r0, r3
    aad2:	f012 fe86 	bl	1d7e2 <coap_packet_append_payload_marker>
    aad6:	6378      	str	r0, [r7, #52]	; 0x34
	if (r < 0) {
    aad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    aada:	2b00      	cmp	r3, #0
    aadc:	da03      	bge.n	aae6 <core_get+0x92>
		r = -EINVAL;
    aade:	f06f 0315 	mvn.w	r3, #21
    aae2:	637b      	str	r3, [r7, #52]	; 0x34
		goto end;
    aae4:	e016      	b.n	ab14 <core_get+0xc0>
	}

	r = coap_packet_append_payload(&response, (u8_t *)dummy_str,
    aae6:	f107 031c 	add.w	r3, r7, #28
    aaea:	220d      	movs	r2, #13
    aaec:	490d      	ldr	r1, [pc, #52]	; (ab24 <core_get+0xd0>)
    aaee:	4618      	mov	r0, r3
    aaf0:	f012 fe8a 	bl	1d808 <coap_packet_append_payload>
    aaf4:	6378      	str	r0, [r7, #52]	; 0x34
				       sizeof(dummy_str));
	if (r < 0) {
    aaf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    aaf8:	2b00      	cmp	r3, #0
    aafa:	da03      	bge.n	ab04 <core_get+0xb0>
		r = -EINVAL;
    aafc:	f06f 0315 	mvn.w	r3, #21
    ab00:	637b      	str	r3, [r7, #52]	; 0x34
		goto end;
    ab02:	e007      	b.n	ab14 <core_get+0xc0>
	}

	r = send_coap_reply(&response, addr, addr_len);
    ab04:	f107 031c 	add.w	r3, r7, #28
    ab08:	683a      	ldr	r2, [r7, #0]
    ab0a:	6879      	ldr	r1, [r7, #4]
    ab0c:	4618      	mov	r0, r3
    ab0e:	f7fe fe6f 	bl	97f0 <send_coap_reply>
    ab12:	6378      	str	r0, [r7, #52]	; 0x34

end:
	k_free(data);
    ab14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ab16:	f01f fa5c 	bl	29fd2 <k_free>

	return r;
    ab1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    ab1c:	4618      	mov	r0, r3
    ab1e:	3738      	adds	r7, #56	; 0x38
    ab20:	46bd      	mov	sp, r7
    ab22:	bd80      	pop	{r7, pc}
    ab24:	0002ea94 	.word	0x0002ea94

0000ab28 <process_coap_request>:
}

static void process_coap_request(u8_t *data, u16_t data_len,
				 struct sockaddr *client_addr,
				 socklen_t client_addr_len)
{
    ab28:	b590      	push	{r4, r7, lr}
    ab2a:	b0d7      	sub	sp, #348	; 0x15c
    ab2c:	af02      	add	r7, sp, #8
    ab2e:	f107 040c 	add.w	r4, r7, #12
    ab32:	6020      	str	r0, [r4, #0]
    ab34:	4608      	mov	r0, r1
    ab36:	1d39      	adds	r1, r7, #4
    ab38:	600a      	str	r2, [r1, #0]
    ab3a:	463a      	mov	r2, r7
    ab3c:	6013      	str	r3, [r2, #0]
    ab3e:	f107 030a 	add.w	r3, r7, #10
    ab42:	4602      	mov	r2, r0
    ab44:	801a      	strh	r2, [r3, #0]
	struct coap_packet request;
	struct coap_pending *pending;
	struct coap_option options[16] = { 0 };
    ab46:	f107 0320 	add.w	r3, r7, #32
    ab4a:	4618      	mov	r0, r3
    ab4c:	f44f 7380 	mov.w	r3, #256	; 0x100
    ab50:	461a      	mov	r2, r3
    ab52:	2100      	movs	r1, #0
    ab54:	f7f7 fab0 	bl	20b8 <memset>
	u8_t opt_num = 16U;
    ab58:	2310      	movs	r3, #16
    ab5a:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
	u8_t type;
	int r;

	net_hexdump("Raw Request (before parse)", data, data_len);
    ab5e:	f107 030a 	add.w	r3, r7, #10
    ab62:	881a      	ldrh	r2, [r3, #0]
    ab64:	f107 030c 	add.w	r3, r7, #12
    ab68:	6819      	ldr	r1, [r3, #0]
    ab6a:	484e      	ldr	r0, [pc, #312]	; (aca4 <process_coap_request+0x17c>)
    ab6c:	f010 fc0f 	bl	1b38e <net_hexdump>

	r = coap_packet_parse(&request, data, data_len, options, opt_num);
    ab70:	f107 0420 	add.w	r4, r7, #32
    ab74:	f107 030a 	add.w	r3, r7, #10
    ab78:	881a      	ldrh	r2, [r3, #0]
    ab7a:	f107 010c 	add.w	r1, r7, #12
    ab7e:	f507 7090 	add.w	r0, r7, #288	; 0x120
    ab82:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
    ab86:	9300      	str	r3, [sp, #0]
    ab88:	4623      	mov	r3, r4
    ab8a:	6809      	ldr	r1, [r1, #0]
    ab8c:	f013 f827 	bl	1dbde <coap_packet_parse>
    ab90:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
	if (r < 0) {
    ab94:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
    ab98:	2b00      	cmp	r3, #0
    ab9a:	da05      	bge.n	aba8 <process_coap_request+0x80>
		LOG_ERR("Invalid data received (%d)\n", r);
    ab9c:	f010 fb48 	bl	1b230 <_is_user_context>
    aba0:	4603      	mov	r3, r0
    aba2:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
		return;
    aba6:	e078      	b.n	ac9a <process_coap_request+0x172>
	}

	type = coap_header_get_type(&request);
    aba8:	f507 7390 	add.w	r3, r7, #288	; 0x120
    abac:	4618      	mov	r0, r3
    abae:	f013 f90a 	bl	1ddc6 <coap_header_get_type>
    abb2:	4603      	mov	r3, r0
    abb4:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e

	pending = coap_pending_received(&request, pendings, NUM_PENDINGS);
    abb8:	f507 7390 	add.w	r3, r7, #288	; 0x120
    abbc:	2203      	movs	r2, #3
    abbe:	493a      	ldr	r1, [pc, #232]	; (aca8 <process_coap_request+0x180>)
    abc0:	4618      	mov	r0, r3
    abc2:	f013 fd67 	bl	1e694 <coap_pending_received>
    abc6:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
	if (!pending) {
    abca:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
    abce:	2b00      	cmp	r3, #0
    abd0:	d00e      	beq.n	abf0 <process_coap_request+0xc8>
		goto not_found;
	}

	/* Clear CoAP pending request */
	if (type == COAP_TYPE_ACK) {
    abd2:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
    abd6:	2b02      	cmp	r3, #2
    abd8:	d15e      	bne.n	ac98 <process_coap_request+0x170>
		k_free(pending->data);
    abda:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
    abde:	691b      	ldr	r3, [r3, #16]
    abe0:	4618      	mov	r0, r3
    abe2:	f01f f9f6 	bl	29fd2 <k_free>
		coap_pending_clear(pending);
    abe6:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
    abea:	f013 fdf1 	bl	1e7d0 <coap_pending_clear>
	}

	return;
    abee:	e053      	b.n	ac98 <process_coap_request+0x170>
		goto not_found;
    abf0:	bf00      	nop

not_found:

	if (type == COAP_TYPE_RESET) {
    abf2:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
    abf6:	2b03      	cmp	r3, #3
    abf8:	d129      	bne.n	ac4e <process_coap_request+0x126>
		struct coap_resource *r;
		struct coap_observer *o;

		o = coap_find_observer_by_addr(observers, NUM_OBSERVERS,
    abfa:	1d3b      	adds	r3, r7, #4
    abfc:	681a      	ldr	r2, [r3, #0]
    abfe:	2103      	movs	r1, #3
    ac00:	482a      	ldr	r0, [pc, #168]	; (acac <process_coap_request+0x184>)
    ac02:	f013 ff0f 	bl	1ea24 <coap_find_observer_by_addr>
    ac06:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
					       client_addr);
		if (!o) {
    ac0a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
    ac0e:	2b00      	cmp	r3, #0
    ac10:	d105      	bne.n	ac1e <process_coap_request+0xf6>
			LOG_ERR("Observer not found\n");
    ac12:	f010 fb0d 	bl	1b230 <_is_user_context>
    ac16:	4603      	mov	r3, r0
    ac18:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
			goto end;
    ac1c:	e018      	b.n	ac50 <process_coap_request+0x128>
		}

		r = find_resouce_by_observer(resources, o);
    ac1e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
    ac22:	4823      	ldr	r0, [pc, #140]	; (acb0 <process_coap_request+0x188>)
    ac24:	f010 fca7 	bl	1b576 <find_resouce_by_observer>
    ac28:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
		if (!r) {
    ac2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
    ac30:	2b00      	cmp	r3, #0
    ac32:	d105      	bne.n	ac40 <process_coap_request+0x118>
			LOG_ERR("Observer found but Resource not found\n");
    ac34:	f010 fafc 	bl	1b230 <_is_user_context>
    ac38:	4603      	mov	r3, r0
    ac3a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
			goto end;
    ac3e:	e007      	b.n	ac50 <process_coap_request+0x128>
		}

		coap_remove_observer(r, o);
    ac40:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
    ac44:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
    ac48:	f013 fe8e 	bl	1e968 <coap_remove_observer>

		return;
    ac4c:	e025      	b.n	ac9a <process_coap_request+0x172>
	}

end:
    ac4e:	bf00      	nop
	net_hexdump("Request", (&request)->data, (&request)->offset);
    ac50:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
    ac54:	f8b7 2124 	ldrh.w	r2, [r7, #292]	; 0x124
    ac58:	4619      	mov	r1, r3
    ac5a:	4816      	ldr	r0, [pc, #88]	; (acb4 <process_coap_request+0x18c>)
    ac5c:	f010 fb97 	bl	1b38e <net_hexdump>
	r = coap_handle_request(&request, resources, options, opt_num,
    ac60:	f897 1143 	ldrb.w	r1, [r7, #323]	; 0x143
    ac64:	f107 0220 	add.w	r2, r7, #32
    ac68:	f507 7090 	add.w	r0, r7, #288	; 0x120
    ac6c:	463b      	mov	r3, r7
    ac6e:	681b      	ldr	r3, [r3, #0]
    ac70:	9301      	str	r3, [sp, #4]
    ac72:	1d3b      	adds	r3, r7, #4
    ac74:	681b      	ldr	r3, [r3, #0]
    ac76:	9300      	str	r3, [sp, #0]
    ac78:	460b      	mov	r3, r1
    ac7a:	490d      	ldr	r1, [pc, #52]	; (acb0 <process_coap_request+0x188>)
    ac7c:	f013 f9fc 	bl	1e078 <coap_handle_request>
    ac80:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
				client_addr, client_addr_len);
	if (r < 0) {
    ac84:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
    ac88:	2b00      	cmp	r3, #0
    ac8a:	da06      	bge.n	ac9a <process_coap_request+0x172>
		LOG_WRN("No handler for such request (%d)\n", r);
    ac8c:	f010 fad0 	bl	1b230 <_is_user_context>
    ac90:	4603      	mov	r3, r0
    ac92:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
    ac96:	e000      	b.n	ac9a <process_coap_request+0x172>
	return;
    ac98:	bf00      	nop
	}
}
    ac9a:	f507 77aa 	add.w	r7, r7, #340	; 0x154
    ac9e:	46bd      	mov	sp, r7
    aca0:	bd90      	pop	{r4, r7, pc}
    aca2:	bf00      	nop
    aca4:	0002d684 	.word	0x0002d684
    aca8:	2000240c 	.word	0x2000240c
    acac:	200023c4 	.word	0x200023c4
    acb0:	2000fa00 	.word	0x2000fa00
    acb4:	0002d6a0 	.word	0x0002d6a0

0000acb8 <process_client_request>:

static int process_client_request(void)
{
    acb8:	b580      	push	{r7, lr}
    acba:	b0c8      	sub	sp, #288	; 0x120
    acbc:	af02      	add	r7, sp, #8
	struct sockaddr client_addr;
	socklen_t client_addr_len;
	u8_t request[MAX_COAP_MSG_LEN];

	do {
		client_addr_len = sizeof(client_addr);
    acbe:	2308      	movs	r3, #8
    acc0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		received = recvfrom(sock, request, sizeof(request), 0,
    acc4:	4b17      	ldr	r3, [pc, #92]	; (ad24 <process_client_request+0x6c>)
    acc6:	6818      	ldr	r0, [r3, #0]
    acc8:	1d39      	adds	r1, r7, #4
    acca:	f507 7382 	add.w	r3, r7, #260	; 0x104
    acce:	9301      	str	r3, [sp, #4]
    acd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
    acd4:	9300      	str	r3, [sp, #0]
    acd6:	2300      	movs	r3, #0
    acd8:	f44f 7280 	mov.w	r2, #256	; 0x100
    acdc:	f010 fae5 	bl	1b2aa <recvfrom>
    ace0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
				    &client_addr, &client_addr_len);
		if (received < 0) {
    ace4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    ace8:	2b00      	cmp	r3, #0
    acea:	da0a      	bge.n	ad02 <process_client_request+0x4a>
			LOG_ERR("Connection error %d", errno);
    acec:	f010 faa0 	bl	1b230 <_is_user_context>
    acf0:	4603      	mov	r3, r0
    acf2:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
			return -errno;
    acf6:	f016 fdfd 	bl	218f4 <__errno>
    acfa:	4603      	mov	r3, r0
    acfc:	681b      	ldr	r3, [r3, #0]
    acfe:	425b      	negs	r3, r3
    ad00:	e00a      	b.n	ad18 <process_client_request+0x60>
		}

		process_coap_request(request, received, &client_addr,
    ad02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    ad06:	b299      	uxth	r1, r3
    ad08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
    ad0c:	f507 7284 	add.w	r2, r7, #264	; 0x108
    ad10:	1d38      	adds	r0, r7, #4
    ad12:	f7ff ff09 	bl	ab28 <process_coap_request>
		client_addr_len = sizeof(client_addr);
    ad16:	e7d2      	b.n	acbe <process_client_request+0x6>
				     client_addr_len);
	} while (true);

	return 0;
}
    ad18:	4618      	mov	r0, r3
    ad1a:	f507 778c 	add.w	r7, r7, #280	; 0x118
    ad1e:	46bd      	mov	sp, r7
    ad20:	bd80      	pop	{r7, pc}
    ad22:	bf00      	nop
    ad24:	200023c0 	.word	0x200023c0

0000ad28 <run_coap_server>:

void run_coap_server(void)
{
    ad28:	b580      	push	{r7, lr}
    ad2a:	b086      	sub	sp, #24
    ad2c:	af00      	add	r7, sp, #0
	int r;

	LOG_DBG("Start CoAP-server sample");
    ad2e:	f010 fa7f 	bl	1b230 <_is_user_context>
    ad32:	4603      	mov	r3, r0
    ad34:	75fb      	strb	r3, [r7, #23]
	if (!res) {
		goto quit;
	}
#endif

	r = start_coap_server();
    ad36:	f7fe fd17 	bl	9768 <start_coap_server>
    ad3a:	6138      	str	r0, [r7, #16]
	if (r < 0) {
    ad3c:	693b      	ldr	r3, [r7, #16]
    ad3e:	2b00      	cmp	r3, #0
    ad40:	db0e      	blt.n	ad60 <run_coap_server+0x38>
		goto quit;
	}

	k_delayed_work_init(&retransmit_work, retransmit_request);
    ad42:	490c      	ldr	r1, [pc, #48]	; (ad74 <run_coap_server+0x4c>)
    ad44:	480c      	ldr	r0, [pc, #48]	; (ad78 <run_coap_server+0x50>)
    ad46:	f00d f953 	bl	17ff0 <k_delayed_work_init>
	k_delayed_work_init(&observer_work, update_counter);
    ad4a:	490c      	ldr	r1, [pc, #48]	; (ad7c <run_coap_server+0x54>)
    ad4c:	480c      	ldr	r0, [pc, #48]	; (ad80 <run_coap_server+0x58>)
    ad4e:	f00d f94f 	bl	17ff0 <k_delayed_work_init>

	while (1) {
		r = process_client_request();
    ad52:	f7ff ffb1 	bl	acb8 <process_client_request>
    ad56:	6138      	str	r0, [r7, #16]
		if (r < 0) {
    ad58:	693b      	ldr	r3, [r7, #16]
    ad5a:	2b00      	cmp	r3, #0
    ad5c:	db02      	blt.n	ad64 <run_coap_server+0x3c>
		r = process_client_request();
    ad5e:	e7f8      	b.n	ad52 <run_coap_server+0x2a>
		goto quit;
    ad60:	bf00      	nop
    ad62:	e000      	b.n	ad66 <run_coap_server+0x3e>
			goto quit;
    ad64:	bf00      	nop

	LOG_DBG("Done");
	return;

quit:
	LOG_ERR("Quit");
    ad66:	f010 fa63 	bl	1b230 <_is_user_context>
    ad6a:	4603      	mov	r3, r0
    ad6c:	73fb      	strb	r3, [r7, #15]
}
    ad6e:	3718      	adds	r7, #24
    ad70:	46bd      	mov	sp, r7
    ad72:	bd80      	pop	{r7, pc}
    ad74:	0000a6c9 	.word	0x0000a6c9
    ad78:	2000247c 	.word	0x2000247c
    ad7c:	0000a725 	.word	0x0000a725
    ad80:	20002454 	.word	0x20002454

0000ad84 <_find_fd_entry>:
};

static K_MUTEX_DEFINE(fdtable_lock);

static int _find_fd_entry(void)
{
    ad84:	b580      	push	{r7, lr}
    ad86:	b082      	sub	sp, #8
    ad88:	af00      	add	r7, sp, #0
	int fd;

	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    ad8a:	2300      	movs	r3, #0
    ad8c:	607b      	str	r3, [r7, #4]
    ad8e:	e00a      	b.n	ada6 <_find_fd_entry+0x22>
		if (fdtable[fd].obj == NULL) {
    ad90:	4a0c      	ldr	r2, [pc, #48]	; (adc4 <_find_fd_entry+0x40>)
    ad92:	687b      	ldr	r3, [r7, #4]
    ad94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    ad98:	2b00      	cmp	r3, #0
    ad9a:	d101      	bne.n	ada0 <_find_fd_entry+0x1c>
			return fd;
    ad9c:	687b      	ldr	r3, [r7, #4]
    ad9e:	e00c      	b.n	adba <_find_fd_entry+0x36>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    ada0:	687b      	ldr	r3, [r7, #4]
    ada2:	3301      	adds	r3, #1
    ada4:	607b      	str	r3, [r7, #4]
    ada6:	687b      	ldr	r3, [r7, #4]
    ada8:	2b03      	cmp	r3, #3
    adaa:	d9f1      	bls.n	ad90 <_find_fd_entry+0xc>
		}
	}

	errno = ENFILE;
    adac:	f016 fda2 	bl	218f4 <__errno>
    adb0:	4602      	mov	r2, r0
    adb2:	2317      	movs	r3, #23
    adb4:	6013      	str	r3, [r2, #0]
	return -1;
    adb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
    adba:	4618      	mov	r0, r3
    adbc:	3708      	adds	r7, #8
    adbe:	46bd      	mov	sp, r7
    adc0:	bd80      	pop	{r7, pc}
    adc2:	bf00      	nop
    adc4:	200024c0 	.word	0x200024c0

0000adc8 <_check_fd>:

static int _check_fd(int fd)
{
    adc8:	b580      	push	{r7, lr}
    adca:	b082      	sub	sp, #8
    adcc:	af00      	add	r7, sp, #0
    adce:	6078      	str	r0, [r7, #4]
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    add0:	687b      	ldr	r3, [r7, #4]
    add2:	2b00      	cmp	r3, #0
    add4:	db02      	blt.n	addc <_check_fd+0x14>
    add6:	687b      	ldr	r3, [r7, #4]
    add8:	2b03      	cmp	r3, #3
    adda:	d907      	bls.n	adec <_check_fd+0x24>
		errno = EBADF;
    addc:	f016 fd8a 	bl	218f4 <__errno>
    ade0:	4602      	mov	r2, r0
    ade2:	2309      	movs	r3, #9
    ade4:	6013      	str	r3, [r2, #0]
		return -1;
    ade6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    adea:	e015      	b.n	ae18 <_check_fd+0x50>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));
    adec:	687b      	ldr	r3, [r7, #4]
    adee:	2104      	movs	r1, #4
    adf0:	4618      	mov	r0, r3
    adf2:	f010 fc04 	bl	1b5fe <k_array_index_sanitize>
    adf6:	4603      	mov	r3, r0
    adf8:	607b      	str	r3, [r7, #4]

	if (fdtable[fd].obj == NULL) {
    adfa:	4a09      	ldr	r2, [pc, #36]	; (ae20 <_check_fd+0x58>)
    adfc:	687b      	ldr	r3, [r7, #4]
    adfe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    ae02:	2b00      	cmp	r3, #0
    ae04:	d107      	bne.n	ae16 <_check_fd+0x4e>
		errno = EBADF;
    ae06:	f016 fd75 	bl	218f4 <__errno>
    ae0a:	4602      	mov	r2, r0
    ae0c:	2309      	movs	r3, #9
    ae0e:	6013      	str	r3, [r2, #0]
		return -1;
    ae10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ae14:	e000      	b.n	ae18 <_check_fd+0x50>
	}

	return 0;
    ae16:	2300      	movs	r3, #0
}
    ae18:	4618      	mov	r0, r3
    ae1a:	3708      	adds	r7, #8
    ae1c:	46bd      	mov	sp, r7
    ae1e:	bd80      	pop	{r7, pc}
    ae20:	200024c0 	.word	0x200024c0

0000ae24 <z_get_fd_obj_and_vtable>:

	return fd_entry->obj;
}

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable)
{
    ae24:	b580      	push	{r7, lr}
    ae26:	b084      	sub	sp, #16
    ae28:	af00      	add	r7, sp, #0
    ae2a:	6078      	str	r0, [r7, #4]
    ae2c:	6039      	str	r1, [r7, #0]
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
    ae2e:	6878      	ldr	r0, [r7, #4]
    ae30:	f7ff ffca 	bl	adc8 <_check_fd>
    ae34:	4603      	mov	r3, r0
    ae36:	2b00      	cmp	r3, #0
    ae38:	da01      	bge.n	ae3e <z_get_fd_obj_and_vtable+0x1a>
		return NULL;
    ae3a:	2300      	movs	r3, #0
    ae3c:	e00a      	b.n	ae54 <z_get_fd_obj_and_vtable+0x30>
	}

	fd_entry = &fdtable[fd];
    ae3e:	687b      	ldr	r3, [r7, #4]
    ae40:	00db      	lsls	r3, r3, #3
    ae42:	4a06      	ldr	r2, [pc, #24]	; (ae5c <z_get_fd_obj_and_vtable+0x38>)
    ae44:	4413      	add	r3, r2
    ae46:	60fb      	str	r3, [r7, #12]
	*vtable = fd_entry->vtable;
    ae48:	68fb      	ldr	r3, [r7, #12]
    ae4a:	685a      	ldr	r2, [r3, #4]
    ae4c:	683b      	ldr	r3, [r7, #0]
    ae4e:	601a      	str	r2, [r3, #0]

	return fd_entry->obj;
    ae50:	68fb      	ldr	r3, [r7, #12]
    ae52:	681b      	ldr	r3, [r3, #0]
}
    ae54:	4618      	mov	r0, r3
    ae56:	3710      	adds	r7, #16
    ae58:	46bd      	mov	sp, r7
    ae5a:	bd80      	pop	{r7, pc}
    ae5c:	200024c0 	.word	0x200024c0

0000ae60 <z_reserve_fd>:

int z_reserve_fd(void)
{
    ae60:	b580      	push	{r7, lr}
    ae62:	b082      	sub	sp, #8
    ae64:	af00      	add	r7, sp, #0
	int fd;

	(void)k_mutex_lock(&fdtable_lock, K_FOREVER);
    ae66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ae6a:	480b      	ldr	r0, [pc, #44]	; (ae98 <z_reserve_fd+0x38>)
    ae6c:	f010 fbae 	bl	1b5cc <k_mutex_lock>

	fd = _find_fd_entry();
    ae70:	f7ff ff88 	bl	ad84 <_find_fd_entry>
    ae74:	6078      	str	r0, [r7, #4]
	if (fd >= 0) {
    ae76:	687b      	ldr	r3, [r7, #4]
    ae78:	2b00      	cmp	r3, #0
    ae7a:	db04      	blt.n	ae86 <z_reserve_fd+0x26>
		/* Mark entry as used, z_finalize_fd() will fill it in. */
		fdtable[fd].obj = FD_OBJ_RESERVED;
    ae7c:	4a07      	ldr	r2, [pc, #28]	; (ae9c <z_reserve_fd+0x3c>)
    ae7e:	687b      	ldr	r3, [r7, #4]
    ae80:	2101      	movs	r1, #1
    ae82:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	}

	k_mutex_unlock(&fdtable_lock);
    ae86:	4804      	ldr	r0, [pc, #16]	; (ae98 <z_reserve_fd+0x38>)
    ae88:	f010 fbae 	bl	1b5e8 <k_mutex_unlock>

	return fd;
    ae8c:	687b      	ldr	r3, [r7, #4]
}
    ae8e:	4618      	mov	r0, r3
    ae90:	3708      	adds	r7, #8
    ae92:	46bd      	mov	sp, r7
    ae94:	bd80      	pop	{r7, pc}
    ae96:	bf00      	nop
    ae98:	2000fe70 	.word	0x2000fe70
    ae9c:	200024c0 	.word	0x200024c0

0000aea0 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
    aea0:	b480      	push	{r7}
    aea2:	b085      	sub	sp, #20
    aea4:	af00      	add	r7, sp, #0
    aea6:	60f8      	str	r0, [r7, #12]
    aea8:	60b9      	str	r1, [r7, #8]
    aeaa:	607a      	str	r2, [r7, #4]
	/* Assumes fd was already bounds-checked. */
	fdtable[fd].obj = obj;
    aeac:	4907      	ldr	r1, [pc, #28]	; (aecc <z_finalize_fd+0x2c>)
    aeae:	68fb      	ldr	r3, [r7, #12]
    aeb0:	68ba      	ldr	r2, [r7, #8]
    aeb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	fdtable[fd].vtable = vtable;
    aeb6:	4a05      	ldr	r2, [pc, #20]	; (aecc <z_finalize_fd+0x2c>)
    aeb8:	68fb      	ldr	r3, [r7, #12]
    aeba:	00db      	lsls	r3, r3, #3
    aebc:	4413      	add	r3, r2
    aebe:	687a      	ldr	r2, [r7, #4]
    aec0:	605a      	str	r2, [r3, #4]
}
    aec2:	bf00      	nop
    aec4:	3714      	adds	r7, #20
    aec6:	46bd      	mov	sp, r7
    aec8:	bc80      	pop	{r7}
    aeca:	4770      	bx	lr
    aecc:	200024c0 	.word	0x200024c0

0000aed0 <z_free_fd>:

void z_free_fd(int fd)
{
    aed0:	b480      	push	{r7}
    aed2:	b083      	sub	sp, #12
    aed4:	af00      	add	r7, sp, #0
    aed6:	6078      	str	r0, [r7, #4]
	/* Assumes fd was already bounds-checked. */
	fdtable[fd].obj = NULL;
    aed8:	4a04      	ldr	r2, [pc, #16]	; (aeec <z_free_fd+0x1c>)
    aeda:	687b      	ldr	r3, [r7, #4]
    aedc:	2100      	movs	r1, #0
    aede:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
}
    aee2:	bf00      	nop
    aee4:	370c      	adds	r7, #12
    aee6:	46bd      	mov	sp, r7
    aee8:	bc80      	pop	{r7}
    aeea:	4770      	bx	lr
    aeec:	200024c0 	.word	0x200024c0

0000aef0 <__printk_hook_install>:
 * @param fn putc routine to install
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
    aef0:	b480      	push	{r7}
    aef2:	b083      	sub	sp, #12
    aef4:	af00      	add	r7, sp, #0
    aef6:	6078      	str	r0, [r7, #4]
	_char_out = fn;
    aef8:	4a03      	ldr	r2, [pc, #12]	; (af08 <__printk_hook_install+0x18>)
    aefa:	687b      	ldr	r3, [r7, #4]
    aefc:	6013      	str	r3, [r2, #0]
}
    aefe:	bf00      	nop
    af00:	370c      	adds	r7, #12
    af02:	46bd      	mov	sp, r7
    af04:	bc80      	pop	{r7}
    af06:	4770      	bx	lr
    af08:	2000fc08 	.word	0x2000fc08

0000af0c <z_vprintk>:
 * @param ap Variable parameters
 *
 * @return N/A
 */
void z_vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
    af0c:	b590      	push	{r4, r7, lr}
    af0e:	b09b      	sub	sp, #108	; 0x6c
    af10:	af02      	add	r7, sp, #8
    af12:	60f8      	str	r0, [r7, #12]
    af14:	60b9      	str	r1, [r7, #8]
    af16:	607a      	str	r2, [r7, #4]
    af18:	603b      	str	r3, [r7, #0]
	int might_format = 0; /* 1 if encountered a '%' */
    af1a:	2300      	movs	r3, #0
    af1c:	65fb      	str	r3, [r7, #92]	; 0x5c
	enum pad_type padding = PAD_NONE;
    af1e:	2300      	movs	r3, #0
    af20:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	int min_width = -1;
    af24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    af28:	657b      	str	r3, [r7, #84]	; 0x54
	int long_ctr = 0;
    af2a:	2300      	movs	r3, #0
    af2c:	653b      	str	r3, [r7, #80]	; 0x50

	/* fmt has already been adjusted if needed */

	while (*fmt) {
    af2e:	e207      	b.n	b340 <z_vprintk+0x434>
		if (!might_format) {
    af30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    af32:	2b00      	cmp	r3, #0
    af34:	d116      	bne.n	af64 <z_vprintk+0x58>
			if (*fmt != '%') {
    af36:	687b      	ldr	r3, [r7, #4]
    af38:	781b      	ldrb	r3, [r3, #0]
    af3a:	2b25      	cmp	r3, #37	; 0x25
    af3c:	d007      	beq.n	af4e <z_vprintk+0x42>
				out((int)*fmt, ctx);
    af3e:	687b      	ldr	r3, [r7, #4]
    af40:	781b      	ldrb	r3, [r3, #0]
    af42:	461a      	mov	r2, r3
    af44:	68fb      	ldr	r3, [r7, #12]
    af46:	68b9      	ldr	r1, [r7, #8]
    af48:	4610      	mov	r0, r2
    af4a:	4798      	blx	r3
    af4c:	e1f5      	b.n	b33a <z_vprintk+0x42e>
			} else {
				might_format = 1;
    af4e:	2301      	movs	r3, #1
    af50:	65fb      	str	r3, [r7, #92]	; 0x5c
				min_width = -1;
    af52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    af56:	657b      	str	r3, [r7, #84]	; 0x54
				padding = PAD_NONE;
    af58:	2300      	movs	r3, #0
    af5a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
				long_ctr = 0;
    af5e:	2300      	movs	r3, #0
    af60:	653b      	str	r3, [r7, #80]	; 0x50
    af62:	e1ea      	b.n	b33a <z_vprintk+0x42e>
			}
		} else {
			switch (*fmt) {
    af64:	687b      	ldr	r3, [r7, #4]
    af66:	781b      	ldrb	r3, [r3, #0]
    af68:	3b25      	subs	r3, #37	; 0x25
    af6a:	2b55      	cmp	r3, #85	; 0x55
    af6c:	f200 81d2 	bhi.w	b314 <z_vprintk+0x408>
    af70:	a201      	add	r2, pc, #4	; (adr r2, af78 <z_vprintk+0x6c>)
    af72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    af76:	bf00      	nop
    af78:	0000b30b 	.word	0x0000b30b
    af7c:	0000b315 	.word	0x0000b315
    af80:	0000b315 	.word	0x0000b315
    af84:	0000b315 	.word	0x0000b315
    af88:	0000b315 	.word	0x0000b315
    af8c:	0000b315 	.word	0x0000b315
    af90:	0000b315 	.word	0x0000b315
    af94:	0000b315 	.word	0x0000b315
    af98:	0000b0d1 	.word	0x0000b0d1
    af9c:	0000b315 	.word	0x0000b315
    afa0:	0000b315 	.word	0x0000b315
    afa4:	0000b0d9 	.word	0x0000b0d9
    afa8:	0000b0ef 	.word	0x0000b0ef
    afac:	0000b0ef 	.word	0x0000b0ef
    afb0:	0000b0ef 	.word	0x0000b0ef
    afb4:	0000b0ef 	.word	0x0000b0ef
    afb8:	0000b0ef 	.word	0x0000b0ef
    afbc:	0000b0ef 	.word	0x0000b0ef
    afc0:	0000b0ef 	.word	0x0000b0ef
    afc4:	0000b0ef 	.word	0x0000b0ef
    afc8:	0000b0ef 	.word	0x0000b0ef
    afcc:	0000b315 	.word	0x0000b315
    afd0:	0000b315 	.word	0x0000b315
    afd4:	0000b315 	.word	0x0000b315
    afd8:	0000b315 	.word	0x0000b315
    afdc:	0000b315 	.word	0x0000b315
    afe0:	0000b315 	.word	0x0000b315
    afe4:	0000b315 	.word	0x0000b315
    afe8:	0000b315 	.word	0x0000b315
    afec:	0000b315 	.word	0x0000b315
    aff0:	0000b315 	.word	0x0000b315
    aff4:	0000b315 	.word	0x0000b315
    aff8:	0000b315 	.word	0x0000b315
    affc:	0000b315 	.word	0x0000b315
    b000:	0000b315 	.word	0x0000b315
    b004:	0000b315 	.word	0x0000b315
    b008:	0000b315 	.word	0x0000b315
    b00c:	0000b315 	.word	0x0000b315
    b010:	0000b315 	.word	0x0000b315
    b014:	0000b315 	.word	0x0000b315
    b018:	0000b315 	.word	0x0000b315
    b01c:	0000b315 	.word	0x0000b315
    b020:	0000b315 	.word	0x0000b315
    b024:	0000b315 	.word	0x0000b315
    b028:	0000b315 	.word	0x0000b315
    b02c:	0000b315 	.word	0x0000b315
    b030:	0000b315 	.word	0x0000b315
    b034:	0000b315 	.word	0x0000b315
    b038:	0000b315 	.word	0x0000b315
    b03c:	0000b315 	.word	0x0000b315
    b040:	0000b315 	.word	0x0000b315
    b044:	0000b25d 	.word	0x0000b25d
    b048:	0000b315 	.word	0x0000b315
    b04c:	0000b315 	.word	0x0000b315
    b050:	0000b315 	.word	0x0000b315
    b054:	0000b315 	.word	0x0000b315
    b058:	0000b315 	.word	0x0000b315
    b05c:	0000b315 	.word	0x0000b315
    b060:	0000b315 	.word	0x0000b315
    b064:	0000b315 	.word	0x0000b315
    b068:	0000b315 	.word	0x0000b315
    b06c:	0000b315 	.word	0x0000b315
    b070:	0000b2f7 	.word	0x0000b2f7
    b074:	0000b12f 	.word	0x0000b12f
    b078:	0000b315 	.word	0x0000b315
    b07c:	0000b315 	.word	0x0000b315
    b080:	0000b315 	.word	0x0000b315
    b084:	0000b335 	.word	0x0000b335
    b088:	0000b12f 	.word	0x0000b12f
    b08c:	0000b315 	.word	0x0000b315
    b090:	0000b315 	.word	0x0000b315
    b094:	0000b127 	.word	0x0000b127
    b098:	0000b315 	.word	0x0000b315
    b09c:	0000b315 	.word	0x0000b315
    b0a0:	0000b315 	.word	0x0000b315
    b0a4:	0000b243 	.word	0x0000b243
    b0a8:	0000b315 	.word	0x0000b315
    b0ac:	0000b315 	.word	0x0000b315
    b0b0:	0000b2a3 	.word	0x0000b2a3
    b0b4:	0000b315 	.word	0x0000b315
    b0b8:	0000b1cd 	.word	0x0000b1cd
    b0bc:	0000b315 	.word	0x0000b315
    b0c0:	0000b315 	.word	0x0000b315
    b0c4:	0000b25d 	.word	0x0000b25d
    b0c8:	0000b315 	.word	0x0000b315
    b0cc:	0000b335 	.word	0x0000b335
			case '-':
				padding = PAD_SPACE_AFTER;
    b0d0:	2303      	movs	r3, #3
    b0d2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
				goto still_might_format;
    b0d6:	e130      	b.n	b33a <z_vprintk+0x42e>
			case '0':
				if (min_width < 0 && padding == PAD_NONE) {
    b0d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    b0da:	2b00      	cmp	r3, #0
    b0dc:	da07      	bge.n	b0ee <z_vprintk+0x1e2>
    b0de:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
    b0e2:	2b00      	cmp	r3, #0
    b0e4:	d103      	bne.n	b0ee <z_vprintk+0x1e2>
					padding = PAD_ZERO_BEFORE;
    b0e6:	2301      	movs	r3, #1
    b0e8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
					goto still_might_format;
    b0ec:	e125      	b.n	b33a <z_vprintk+0x42e>
			case '6':
			case '7':
			case '8':
				/* Fall through */
			case '9':
				if (min_width < 0) {
    b0ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    b0f0:	2b00      	cmp	r3, #0
    b0f2:	da04      	bge.n	b0fe <z_vprintk+0x1f2>
					min_width = *fmt - '0';
    b0f4:	687b      	ldr	r3, [r7, #4]
    b0f6:	781b      	ldrb	r3, [r3, #0]
    b0f8:	3b30      	subs	r3, #48	; 0x30
    b0fa:	657b      	str	r3, [r7, #84]	; 0x54
    b0fc:	e00a      	b.n	b114 <z_vprintk+0x208>
				} else {
					min_width = 10 * min_width + *fmt - '0';
    b0fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    b100:	4613      	mov	r3, r2
    b102:	009b      	lsls	r3, r3, #2
    b104:	4413      	add	r3, r2
    b106:	005b      	lsls	r3, r3, #1
    b108:	461a      	mov	r2, r3
    b10a:	687b      	ldr	r3, [r7, #4]
    b10c:	781b      	ldrb	r3, [r3, #0]
    b10e:	4413      	add	r3, r2
    b110:	3b30      	subs	r3, #48	; 0x30
    b112:	657b      	str	r3, [r7, #84]	; 0x54
				}

				if (padding == PAD_NONE) {
    b114:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
    b118:	2b00      	cmp	r3, #0
    b11a:	f040 810d 	bne.w	b338 <z_vprintk+0x42c>
					padding = PAD_SPACE_BEFORE;
    b11e:	2302      	movs	r3, #2
    b120:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
				}
				goto still_might_format;
    b124:	e108      	b.n	b338 <z_vprintk+0x42c>
			case 'l':
				long_ctr++;
    b126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    b128:	3301      	adds	r3, #1
    b12a:	653b      	str	r3, [r7, #80]	; 0x50
				/* Fall through */
			case 'z':
			case 'h':
				/* FIXME: do nothing for these modifiers */
				goto still_might_format;
    b12c:	e102      	b.n	b334 <z_vprintk+0x428>
			case 'd':
			case 'i': {
				s32_t d;

				if (long_ctr == 0) {
    b12e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    b130:	2b00      	cmp	r3, #0
    b132:	d105      	bne.n	b140 <z_vprintk+0x234>
					d = va_arg(ap, int);
    b134:	683b      	ldr	r3, [r7, #0]
    b136:	1d1a      	adds	r2, r3, #4
    b138:	603a      	str	r2, [r7, #0]
    b13a:	681b      	ldr	r3, [r3, #0]
    b13c:	64fb      	str	r3, [r7, #76]	; 0x4c
    b13e:	e02d      	b.n	b19c <z_vprintk+0x290>
				} else if (long_ctr == 1) {
    b140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    b142:	2b01      	cmp	r3, #1
    b144:	d107      	bne.n	b156 <z_vprintk+0x24a>
					long ld = va_arg(ap, long);
    b146:	683b      	ldr	r3, [r7, #0]
    b148:	1d1a      	adds	r2, r3, #4
    b14a:	603a      	str	r2, [r7, #0]
    b14c:	681b      	ldr	r3, [r3, #0]
    b14e:	637b      	str	r3, [r7, #52]	; 0x34
					if (ld > INT32_MAX || ld < INT32_MIN) {
						print_err(out, ctx);
						break;
					}
					d = (s32_t)ld;
    b150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b152:	64fb      	str	r3, [r7, #76]	; 0x4c
    b154:	e022      	b.n	b19c <z_vprintk+0x290>
				} else {
					long long lld = va_arg(ap, long long);
    b156:	683b      	ldr	r3, [r7, #0]
    b158:	3307      	adds	r3, #7
    b15a:	f023 0307 	bic.w	r3, r3, #7
    b15e:	f103 0208 	add.w	r2, r3, #8
    b162:	603a      	str	r2, [r7, #0]
    b164:	e9d3 3400 	ldrd	r3, r4, [r3]
    b168:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
					if (lld > INT32_MAX ||
    b16c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
    b170:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b174:	f04f 0200 	mov.w	r2, #0
    b178:	4299      	cmp	r1, r3
    b17a:	eb72 0304 	sbcs.w	r3, r2, r4
    b17e:	db06      	blt.n	b18e <z_vprintk+0x282>
    b180:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
    b184:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    b188:	f174 33ff 	sbcs.w	r3, r4, #4294967295	; 0xffffffff
    b18c:	da04      	bge.n	b198 <z_vprintk+0x28c>
					    lld < INT32_MIN) {
						print_err(out, ctx);
    b18e:	68b9      	ldr	r1, [r7, #8]
    b190:	68f8      	ldr	r0, [r7, #12]
    b192:	f010 ff3a 	bl	1c00a <print_err>
						break;
    b196:	e0ca      	b.n	b32e <z_vprintk+0x422>
					}
					d = (s32_t)lld;
    b198:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b19a:	64fb      	str	r3, [r7, #76]	; 0x4c
				}

				if (d < 0) {
    b19c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b19e:	2b00      	cmp	r3, #0
    b1a0:	da09      	bge.n	b1b6 <z_vprintk+0x2aa>
					out((int)'-', ctx);
    b1a2:	68fb      	ldr	r3, [r7, #12]
    b1a4:	68b9      	ldr	r1, [r7, #8]
    b1a6:	202d      	movs	r0, #45	; 0x2d
    b1a8:	4798      	blx	r3
					d = -d;
    b1aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b1ac:	425b      	negs	r3, r3
    b1ae:	64fb      	str	r3, [r7, #76]	; 0x4c
					min_width--;
    b1b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    b1b2:	3b01      	subs	r3, #1
    b1b4:	657b      	str	r3, [r7, #84]	; 0x54
				}
				_printk_dec_ulong(out, ctx, d, padding,
    b1b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b1b8:	f897 105b 	ldrb.w	r1, [r7, #91]	; 0x5b
    b1bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    b1be:	9300      	str	r3, [sp, #0]
    b1c0:	460b      	mov	r3, r1
    b1c2:	68b9      	ldr	r1, [r7, #8]
    b1c4:	68f8      	ldr	r0, [r7, #12]
    b1c6:	f000 f8f1 	bl	b3ac <_printk_dec_ulong>
						  min_width);
				break;
    b1ca:	e0b0      	b.n	b32e <z_vprintk+0x422>
			}
			case 'u': {
				u32_t u;

				if (long_ctr == 0) {
    b1cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    b1ce:	2b00      	cmp	r3, #0
    b1d0:	d105      	bne.n	b1de <z_vprintk+0x2d2>
					u = va_arg(ap, unsigned int);
    b1d2:	683b      	ldr	r3, [r7, #0]
    b1d4:	1d1a      	adds	r2, r3, #4
    b1d6:	603a      	str	r2, [r7, #0]
    b1d8:	681b      	ldr	r3, [r3, #0]
    b1da:	64bb      	str	r3, [r7, #72]	; 0x48
    b1dc:	e026      	b.n	b22c <z_vprintk+0x320>
				} else if (long_ctr == 1) {
    b1de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    b1e0:	2b01      	cmp	r3, #1
    b1e2:	d107      	bne.n	b1f4 <z_vprintk+0x2e8>
					long lu = va_arg(ap, unsigned long);
    b1e4:	683b      	ldr	r3, [r7, #0]
    b1e6:	1d1a      	adds	r2, r3, #4
    b1e8:	603a      	str	r2, [r7, #0]
    b1ea:	681b      	ldr	r3, [r3, #0]
    b1ec:	627b      	str	r3, [r7, #36]	; 0x24
					if (lu > INT32_MAX) {
						print_err(out, ctx);
						break;
					}
					u = (u32_t)lu;
    b1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b1f0:	64bb      	str	r3, [r7, #72]	; 0x48
    b1f2:	e01b      	b.n	b22c <z_vprintk+0x320>
				} else {
					unsigned long long llu =
    b1f4:	683b      	ldr	r3, [r7, #0]
    b1f6:	3307      	adds	r3, #7
    b1f8:	f023 0307 	bic.w	r3, r3, #7
    b1fc:	f103 0208 	add.w	r2, r3, #8
    b200:	603a      	str	r2, [r7, #0]
    b202:	e9d3 3400 	ldrd	r3, r4, [r3]
    b206:	e9c7 3406 	strd	r3, r4, [r7, #24]
						va_arg(ap, unsigned long long);
					if (llu > INT32_MAX) {
    b20a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    b20e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b212:	f04f 0200 	mov.w	r2, #0
    b216:	42a2      	cmp	r2, r4
    b218:	bf08      	it	eq
    b21a:	4299      	cmpeq	r1, r3
    b21c:	d204      	bcs.n	b228 <z_vprintk+0x31c>
						print_err(out, ctx);
    b21e:	68b9      	ldr	r1, [r7, #8]
    b220:	68f8      	ldr	r0, [r7, #12]
    b222:	f010 fef2 	bl	1c00a <print_err>
						break;
    b226:	e082      	b.n	b32e <z_vprintk+0x422>
					}
					u = (u32_t)llu;
    b228:	69bb      	ldr	r3, [r7, #24]
    b22a:	64bb      	str	r3, [r7, #72]	; 0x48
				}

				_printk_dec_ulong(out, ctx, u, padding,
    b22c:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
    b230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    b232:	9300      	str	r3, [sp, #0]
    b234:	4613      	mov	r3, r2
    b236:	6cba      	ldr	r2, [r7, #72]	; 0x48
    b238:	68b9      	ldr	r1, [r7, #8]
    b23a:	68f8      	ldr	r0, [r7, #12]
    b23c:	f000 f8b6 	bl	b3ac <_printk_dec_ulong>
						  min_width);
				break;
    b240:	e075      	b.n	b32e <z_vprintk+0x422>
			}
			case 'p':
				  out('0', ctx);
    b242:	68fb      	ldr	r3, [r7, #12]
    b244:	68b9      	ldr	r1, [r7, #8]
    b246:	2030      	movs	r0, #48	; 0x30
    b248:	4798      	blx	r3
				  out('x', ctx);
    b24a:	68fb      	ldr	r3, [r7, #12]
    b24c:	68b9      	ldr	r1, [r7, #8]
    b24e:	2078      	movs	r0, #120	; 0x78
    b250:	4798      	blx	r3
				  /* left-pad pointers with zeros */
				  padding = PAD_ZERO_BEFORE;
    b252:	2301      	movs	r3, #1
    b254:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
				  min_width = 8;
    b258:	2308      	movs	r3, #8
    b25a:	657b      	str	r3, [r7, #84]	; 0x54
				  /* Fall through */
			case 'x':
			case 'X': {
				unsigned long long x;

				if (long_ctr < 2) {
    b25c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    b25e:	2b01      	cmp	r3, #1
    b260:	dc08      	bgt.n	b274 <z_vprintk+0x368>
					x = va_arg(ap, unsigned long);
    b262:	683b      	ldr	r3, [r7, #0]
    b264:	1d1a      	adds	r2, r3, #4
    b266:	603a      	str	r2, [r7, #0]
    b268:	681b      	ldr	r3, [r3, #0]
    b26a:	f04f 0400 	mov.w	r4, #0
    b26e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    b272:	e00a      	b.n	b28a <z_vprintk+0x37e>
				} else {
					x = va_arg(ap, unsigned long long);
    b274:	683b      	ldr	r3, [r7, #0]
    b276:	3307      	adds	r3, #7
    b278:	f023 0307 	bic.w	r3, r3, #7
    b27c:	f103 0208 	add.w	r2, r3, #8
    b280:	603a      	str	r2, [r7, #0]
    b282:	e9d3 3400 	ldrd	r3, r4, [r3]
    b286:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
				}

				_printk_hex_ulong(out, ctx, x, padding,
    b28a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    b28c:	9301      	str	r3, [sp, #4]
    b28e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
    b292:	9300      	str	r3, [sp, #0]
    b294:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    b298:	68b9      	ldr	r1, [r7, #8]
    b29a:	68f8      	ldr	r0, [r7, #12]
    b29c:	f010 fedc 	bl	1c058 <_printk_hex_ulong>
						  min_width);
				break;
    b2a0:	e045      	b.n	b32e <z_vprintk+0x422>
			}
			case 's': {
				char *s = va_arg(ap, char *);
    b2a2:	683b      	ldr	r3, [r7, #0]
    b2a4:	1d1a      	adds	r2, r3, #4
    b2a6:	603a      	str	r2, [r7, #0]
    b2a8:	681b      	ldr	r3, [r3, #0]
    b2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
				char *start = s;
    b2ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b2ae:	617b      	str	r3, [r7, #20]

				while (*s)
    b2b0:	e008      	b.n	b2c4 <z_vprintk+0x3b8>
					out((int)(*s++), ctx);
    b2b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b2b4:	1c5a      	adds	r2, r3, #1
    b2b6:	63fa      	str	r2, [r7, #60]	; 0x3c
    b2b8:	781b      	ldrb	r3, [r3, #0]
    b2ba:	461a      	mov	r2, r3
    b2bc:	68fb      	ldr	r3, [r7, #12]
    b2be:	68b9      	ldr	r1, [r7, #8]
    b2c0:	4610      	mov	r0, r2
    b2c2:	4798      	blx	r3
				while (*s)
    b2c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b2c6:	781b      	ldrb	r3, [r3, #0]
    b2c8:	2b00      	cmp	r3, #0
    b2ca:	d1f2      	bne.n	b2b2 <z_vprintk+0x3a6>

				if (padding == PAD_SPACE_AFTER) {
    b2cc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
    b2d0:	2b03      	cmp	r3, #3
    b2d2:	d12b      	bne.n	b32c <z_vprintk+0x420>
					int remaining = min_width - (s - start);
    b2d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    b2d6:	697b      	ldr	r3, [r7, #20]
    b2d8:	1ad3      	subs	r3, r2, r3
    b2da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    b2dc:	1ad3      	subs	r3, r2, r3
    b2de:	63bb      	str	r3, [r7, #56]	; 0x38
					while (remaining-- > 0) {
    b2e0:	e003      	b.n	b2ea <z_vprintk+0x3de>
						out(' ', ctx);
    b2e2:	68fb      	ldr	r3, [r7, #12]
    b2e4:	68b9      	ldr	r1, [r7, #8]
    b2e6:	2020      	movs	r0, #32
    b2e8:	4798      	blx	r3
					while (remaining-- > 0) {
    b2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b2ec:	1e5a      	subs	r2, r3, #1
    b2ee:	63ba      	str	r2, [r7, #56]	; 0x38
    b2f0:	2b00      	cmp	r3, #0
    b2f2:	dcf6      	bgt.n	b2e2 <z_vprintk+0x3d6>
					}
				}
				break;
    b2f4:	e01a      	b.n	b32c <z_vprintk+0x420>
			}
			case 'c': {
				int c = va_arg(ap, int);
    b2f6:	683b      	ldr	r3, [r7, #0]
    b2f8:	1d1a      	adds	r2, r3, #4
    b2fa:	603a      	str	r2, [r7, #0]
    b2fc:	681b      	ldr	r3, [r3, #0]
    b2fe:	613b      	str	r3, [r7, #16]

				out(c, ctx);
    b300:	68fb      	ldr	r3, [r7, #12]
    b302:	68b9      	ldr	r1, [r7, #8]
    b304:	6938      	ldr	r0, [r7, #16]
    b306:	4798      	blx	r3
				break;
    b308:	e011      	b.n	b32e <z_vprintk+0x422>
			}
			case '%': {
				out((int)'%', ctx);
    b30a:	68fb      	ldr	r3, [r7, #12]
    b30c:	68b9      	ldr	r1, [r7, #8]
    b30e:	2025      	movs	r0, #37	; 0x25
    b310:	4798      	blx	r3
				break;
    b312:	e00c      	b.n	b32e <z_vprintk+0x422>
			}
			default:
				out((int)'%', ctx);
    b314:	68fb      	ldr	r3, [r7, #12]
    b316:	68b9      	ldr	r1, [r7, #8]
    b318:	2025      	movs	r0, #37	; 0x25
    b31a:	4798      	blx	r3
				out((int)*fmt, ctx);
    b31c:	687b      	ldr	r3, [r7, #4]
    b31e:	781b      	ldrb	r3, [r3, #0]
    b320:	461a      	mov	r2, r3
    b322:	68fb      	ldr	r3, [r7, #12]
    b324:	68b9      	ldr	r1, [r7, #8]
    b326:	4610      	mov	r0, r2
    b328:	4798      	blx	r3
				break;
    b32a:	e000      	b.n	b32e <z_vprintk+0x422>
				break;
    b32c:	bf00      	nop
			}
			might_format = 0;
    b32e:	2300      	movs	r3, #0
    b330:	65fb      	str	r3, [r7, #92]	; 0x5c
    b332:	e002      	b.n	b33a <z_vprintk+0x42e>
				goto still_might_format;
    b334:	bf00      	nop
    b336:	e000      	b.n	b33a <z_vprintk+0x42e>
				goto still_might_format;
    b338:	bf00      	nop
		}
still_might_format:
		++fmt;
    b33a:	687b      	ldr	r3, [r7, #4]
    b33c:	3301      	adds	r3, #1
    b33e:	607b      	str	r3, [r7, #4]
	while (*fmt) {
    b340:	687b      	ldr	r3, [r7, #4]
    b342:	781b      	ldrb	r3, [r3, #0]
    b344:	2b00      	cmp	r3, #0
    b346:	f47f adf3 	bne.w	af30 <z_vprintk+0x24>
	}
}
    b34a:	bf00      	nop
    b34c:	3764      	adds	r7, #100	; 0x64
    b34e:	46bd      	mov	sp, r7
    b350:	bd90      	pop	{r4, r7, pc}
    b352:	bf00      	nop

0000b354 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    b354:	b580      	push	{r7, lr}
    b356:	b084      	sub	sp, #16
    b358:	af00      	add	r7, sp, #0
    b35a:	6078      	str	r0, [r7, #4]
    b35c:	6039      	str	r1, [r7, #0]
	struct out_context *ctx = ctx_p;
    b35e:	683b      	ldr	r3, [r7, #0]
    b360:	60fb      	str	r3, [r7, #12]

	ctx->count++;
    b362:	68fb      	ldr	r3, [r7, #12]
    b364:	681b      	ldr	r3, [r3, #0]
    b366:	1c5a      	adds	r2, r3, #1
    b368:	68fb      	ldr	r3, [r7, #12]
    b36a:	601a      	str	r2, [r3, #0]
	return _char_out(c);
    b36c:	4b04      	ldr	r3, [pc, #16]	; (b380 <char_out+0x2c>)
    b36e:	681b      	ldr	r3, [r3, #0]
    b370:	6878      	ldr	r0, [r7, #4]
    b372:	4798      	blx	r3
    b374:	4603      	mov	r3, r0
}
    b376:	4618      	mov	r0, r3
    b378:	3710      	adds	r7, #16
    b37a:	46bd      	mov	sp, r7
    b37c:	bd80      	pop	{r7, pc}
    b37e:	bf00      	nop
    b380:	2000fc08 	.word	0x2000fc08

0000b384 <vprintk>:
		z_vprintk(char_out, &ctx, fmt, ap);
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    b384:	b580      	push	{r7, lr}
    b386:	b084      	sub	sp, #16
    b388:	af00      	add	r7, sp, #0
    b38a:	6078      	str	r0, [r7, #4]
    b38c:	6039      	str	r1, [r7, #0]
	struct out_context ctx = { 0 };
    b38e:	2300      	movs	r3, #0
    b390:	60fb      	str	r3, [r7, #12]

	z_vprintk(char_out, &ctx, fmt, ap);
    b392:	f107 010c 	add.w	r1, r7, #12
    b396:	683b      	ldr	r3, [r7, #0]
    b398:	687a      	ldr	r2, [r7, #4]
    b39a:	4803      	ldr	r0, [pc, #12]	; (b3a8 <vprintk+0x24>)
    b39c:	f7ff fdb6 	bl	af0c <z_vprintk>
}
    b3a0:	bf00      	nop
    b3a2:	3710      	adds	r7, #16
    b3a4:	46bd      	mov	sp, r7
    b3a6:	bd80      	pop	{r7, pc}
    b3a8:	0000b355 	.word	0x0000b355

0000b3ac <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    b3ac:	b580      	push	{r7, lr}
    b3ae:	b08a      	sub	sp, #40	; 0x28
    b3b0:	af00      	add	r7, sp, #0
    b3b2:	60f8      	str	r0, [r7, #12]
    b3b4:	60b9      	str	r1, [r7, #8]
    b3b6:	607a      	str	r2, [r7, #4]
    b3b8:	70fb      	strb	r3, [r7, #3]
	unsigned long pos = 999999999;
    b3ba:	4b36      	ldr	r3, [pc, #216]	; (b494 <_printk_dec_ulong+0xe8>)
    b3bc:	627b      	str	r3, [r7, #36]	; 0x24
	unsigned long remainder = num;
    b3be:	687b      	ldr	r3, [r7, #4]
    b3c0:	623b      	str	r3, [r7, #32]
	int found_largest_digit = 0;
    b3c2:	2300      	movs	r3, #0
    b3c4:	61fb      	str	r3, [r7, #28]
	int remaining = 10; /* 10 digits max */
    b3c6:	230a      	movs	r3, #10
    b3c8:	61bb      	str	r3, [r7, #24]
	int digits = 1;
    b3ca:	2301      	movs	r3, #1
    b3cc:	617b      	str	r3, [r7, #20]

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
    b3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b3d0:	2b00      	cmp	r3, #0
    b3d2:	dc40      	bgt.n	b456 <_printk_dec_ulong+0xaa>
		min_width = 1;
    b3d4:	2301      	movs	r3, #1
    b3d6:	633b      	str	r3, [r7, #48]	; 0x30
	}

	while (pos >= 9) {
    b3d8:	e03d      	b.n	b456 <_printk_dec_ulong+0xaa>
		if (found_largest_digit != 0 || remainder > pos) {
    b3da:	69fb      	ldr	r3, [r7, #28]
    b3dc:	2b00      	cmp	r3, #0
    b3de:	d103      	bne.n	b3e8 <_printk_dec_ulong+0x3c>
    b3e0:	6a3a      	ldr	r2, [r7, #32]
    b3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b3e4:	429a      	cmp	r2, r3
    b3e6:	d910      	bls.n	b40a <_printk_dec_ulong+0x5e>
			found_largest_digit = 1;
    b3e8:	2301      	movs	r3, #1
    b3ea:	61fb      	str	r3, [r7, #28]
			out((int)((remainder / (pos + 1)) + 48), ctx);
    b3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b3ee:	3301      	adds	r3, #1
    b3f0:	6a3a      	ldr	r2, [r7, #32]
    b3f2:	fbb2 f3f3 	udiv	r3, r2, r3
    b3f6:	3330      	adds	r3, #48	; 0x30
    b3f8:	461a      	mov	r2, r3
    b3fa:	68fb      	ldr	r3, [r7, #12]
    b3fc:	68b9      	ldr	r1, [r7, #8]
    b3fe:	4610      	mov	r0, r2
    b400:	4798      	blx	r3
			digits++;
    b402:	697b      	ldr	r3, [r7, #20]
    b404:	3301      	adds	r3, #1
    b406:	617b      	str	r3, [r7, #20]
    b408:	e013      	b.n	b432 <_printk_dec_ulong+0x86>
		} else if (remaining <= min_width
    b40a:	69ba      	ldr	r2, [r7, #24]
    b40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b40e:	429a      	cmp	r2, r3
    b410:	dc0f      	bgt.n	b432 <_printk_dec_ulong+0x86>
				&& padding < PAD_SPACE_AFTER) {
    b412:	78fb      	ldrb	r3, [r7, #3]
    b414:	2b02      	cmp	r3, #2
    b416:	d80c      	bhi.n	b432 <_printk_dec_ulong+0x86>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    b418:	78fb      	ldrb	r3, [r7, #3]
    b41a:	2b01      	cmp	r3, #1
    b41c:	d101      	bne.n	b422 <_printk_dec_ulong+0x76>
    b41e:	2230      	movs	r2, #48	; 0x30
    b420:	e000      	b.n	b424 <_printk_dec_ulong+0x78>
    b422:	2220      	movs	r2, #32
    b424:	68fb      	ldr	r3, [r7, #12]
    b426:	68b9      	ldr	r1, [r7, #8]
    b428:	4610      	mov	r0, r2
    b42a:	4798      	blx	r3
			digits++;
    b42c:	697b      	ldr	r3, [r7, #20]
    b42e:	3301      	adds	r3, #1
    b430:	617b      	str	r3, [r7, #20]
		}
		remaining--;
    b432:	69bb      	ldr	r3, [r7, #24]
    b434:	3b01      	subs	r3, #1
    b436:	61bb      	str	r3, [r7, #24]
		remainder %= (pos + 1);
    b438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b43a:	1c5a      	adds	r2, r3, #1
    b43c:	6a3b      	ldr	r3, [r7, #32]
    b43e:	fbb3 f1f2 	udiv	r1, r3, r2
    b442:	fb02 f201 	mul.w	r2, r2, r1
    b446:	1a9b      	subs	r3, r3, r2
    b448:	623b      	str	r3, [r7, #32]
		pos /= 10;
    b44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b44c:	4a12      	ldr	r2, [pc, #72]	; (b498 <_printk_dec_ulong+0xec>)
    b44e:	fba2 2303 	umull	r2, r3, r2, r3
    b452:	08db      	lsrs	r3, r3, #3
    b454:	627b      	str	r3, [r7, #36]	; 0x24
	while (pos >= 9) {
    b456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b458:	2b08      	cmp	r3, #8
    b45a:	d8be      	bhi.n	b3da <_printk_dec_ulong+0x2e>
	}
	out((int)(remainder + 48), ctx);
    b45c:	6a3b      	ldr	r3, [r7, #32]
    b45e:	3330      	adds	r3, #48	; 0x30
    b460:	461a      	mov	r2, r3
    b462:	68fb      	ldr	r3, [r7, #12]
    b464:	68b9      	ldr	r1, [r7, #8]
    b466:	4610      	mov	r0, r2
    b468:	4798      	blx	r3

	if (padding == PAD_SPACE_AFTER) {
    b46a:	78fb      	ldrb	r3, [r7, #3]
    b46c:	2b03      	cmp	r3, #3
    b46e:	d10d      	bne.n	b48c <_printk_dec_ulong+0xe0>
		remaining = min_width - digits;
    b470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    b472:	697b      	ldr	r3, [r7, #20]
    b474:	1ad3      	subs	r3, r2, r3
    b476:	61bb      	str	r3, [r7, #24]
		while (remaining-- > 0) {
    b478:	e003      	b.n	b482 <_printk_dec_ulong+0xd6>
			out(' ', ctx);
    b47a:	68fb      	ldr	r3, [r7, #12]
    b47c:	68b9      	ldr	r1, [r7, #8]
    b47e:	2020      	movs	r0, #32
    b480:	4798      	blx	r3
		while (remaining-- > 0) {
    b482:	69bb      	ldr	r3, [r7, #24]
    b484:	1e5a      	subs	r2, r3, #1
    b486:	61ba      	str	r2, [r7, #24]
    b488:	2b00      	cmp	r3, #0
    b48a:	dcf6      	bgt.n	b47a <_printk_dec_ulong+0xce>
		}
	}
}
    b48c:	bf00      	nop
    b48e:	3728      	adds	r7, #40	; 0x28
    b490:	46bd      	mov	sp, r7
    b492:	bd80      	pop	{r7, pc}
    b494:	3b9ac9ff 	.word	0x3b9ac9ff
    b498:	cccccccd 	.word	0xcccccccd

0000b49c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    b49c:	b580      	push	{r7, lr}
    b49e:	b088      	sub	sp, #32
    b4a0:	af00      	add	r7, sp, #0
    b4a2:	60f8      	str	r0, [r7, #12]
    b4a4:	60b9      	str	r1, [r7, #8]
    b4a6:	607a      	str	r2, [r7, #4]
    b4a8:	603b      	str	r3, [r7, #0]
	struct str_context ctx = { str, size, 0 };
    b4aa:	68fb      	ldr	r3, [r7, #12]
    b4ac:	617b      	str	r3, [r7, #20]
    b4ae:	68bb      	ldr	r3, [r7, #8]
    b4b0:	61bb      	str	r3, [r7, #24]
    b4b2:	2300      	movs	r3, #0
    b4b4:	61fb      	str	r3, [r7, #28]

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    b4b6:	f107 0114 	add.w	r1, r7, #20
    b4ba:	683b      	ldr	r3, [r7, #0]
    b4bc:	687a      	ldr	r2, [r7, #4]
    b4be:	4809      	ldr	r0, [pc, #36]	; (b4e4 <vsnprintk+0x48>)
    b4c0:	f7ff fd24 	bl	af0c <z_vprintk>

	if (ctx.count < ctx.max) {
    b4c4:	69fa      	ldr	r2, [r7, #28]
    b4c6:	69bb      	ldr	r3, [r7, #24]
    b4c8:	429a      	cmp	r2, r3
    b4ca:	da05      	bge.n	b4d8 <vsnprintk+0x3c>
		str[ctx.count] = '\0';
    b4cc:	69fb      	ldr	r3, [r7, #28]
    b4ce:	461a      	mov	r2, r3
    b4d0:	68fb      	ldr	r3, [r7, #12]
    b4d2:	4413      	add	r3, r2
    b4d4:	2200      	movs	r2, #0
    b4d6:	701a      	strb	r2, [r3, #0]
	}

	return ctx.count;
    b4d8:	69fb      	ldr	r3, [r7, #28]
}
    b4da:	4618      	mov	r0, r3
    b4dc:	3720      	adds	r7, #32
    b4de:	46bd      	mov	sp, r7
    b4e0:	bd80      	pop	{r7, pc}
    b4e2:	bf00      	nop
    b4e4:	0001c14d 	.word	0x0001c14d

0000b4e8 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set((uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(struct device *arg)
{
    b4e8:	b580      	push	{r7, lr}
    b4ea:	b086      	sub	sp, #24
    b4ec:	af00      	add	r7, sp, #0
    b4ee:	6078      	str	r0, [r7, #4]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    b4f0:	f04f 0320 	mov.w	r3, #32
    b4f4:	f3ef 8211 	mrs	r2, BASEPRI
    b4f8:	f383 8811 	msr	BASEPRI, r3
    b4fc:	f3bf 8f6f 	isb	sy
    b500:	60fa      	str	r2, [r7, #12]
    b502:	60bb      	str	r3, [r7, #8]
		: "memory");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return key;
    b504:	68fb      	ldr	r3, [r7, #12]
	u32_t key;

	ARG_UNUSED(arg);

	key = irq_lock();
    b506:	617b      	str	r3, [r7, #20]

	SystemInit();
    b508:	f000 f842 	bl	b590 <SystemInit>

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    b50c:	4b0d      	ldr	r3, [pc, #52]	; (b544 <nordicsemi_nrf52_init+0x5c>)
    b50e:	2201      	movs	r2, #1
    b510:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif

#if defined(CONFIG_SOC_DCDC_NRF52X)
	nrf_power_dcdcen_set(true);
    b514:	2001      	movs	r0, #1
    b516:	f010 fe70 	bl	1c1fa <nrf_power_dcdcen_set>
static ALWAYS_INLINE void z_clearfaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    b51a:	4b0b      	ldr	r3, [pc, #44]	; (b548 <nordicsemi_nrf52_init+0x60>)
    b51c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b520:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    b522:	4b09      	ldr	r3, [pc, #36]	; (b548 <nordicsemi_nrf52_init+0x60>)
    b524:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b528:	62da      	str	r2, [r3, #44]	; 0x2c
    b52a:	697b      	ldr	r3, [r7, #20]
    b52c:	613b      	str	r3, [r7, #16]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    b52e:	693b      	ldr	r3, [r7, #16]
    b530:	f383 8811 	msr	BASEPRI, r3
    b534:	f3bf 8f6f 	isb	sy
	*/
	NMI_INIT();

	irq_unlock(key);

	return 0;
    b538:	2300      	movs	r3, #0
}
    b53a:	4618      	mov	r0, r3
    b53c:	3718      	adds	r7, #24
    b53e:	46bd      	mov	sp, r7
    b540:	bd80      	pop	{r7, pc}
    b542:	bf00      	nop
    b544:	4001e000 	.word	0x4001e000
    b548:	e000ed00 	.word	0xe000ed00

0000b54c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
    b54c:	b480      	push	{r7}
    b54e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    b550:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    b554:	4b05      	ldr	r3, [pc, #20]	; (b56c <__NVIC_SystemReset+0x20>)
    b556:	68db      	ldr	r3, [r3, #12]
    b558:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    b55c:	4903      	ldr	r1, [pc, #12]	; (b56c <__NVIC_SystemReset+0x20>)
    b55e:	4b04      	ldr	r3, [pc, #16]	; (b570 <__NVIC_SystemReset+0x24>)
    b560:	4313      	orrs	r3, r2
    b562:	60cb      	str	r3, [r1, #12]
    b564:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    b568:	bf00      	nop
    b56a:	e7fd      	b.n	b568 <__NVIC_SystemReset+0x1c>
    b56c:	e000ed00 	.word	0xe000ed00
    b570:	05fa0004 	.word	0x05fa0004

0000b574 <SystemCoreClockUpdate>:
#elif defined ( __GNUC__ )
    uint32_t SystemCoreClock __attribute__((used)) = __SYSTEM_CLOCK_64M;
#endif

void SystemCoreClockUpdate(void)
{
    b574:	b480      	push	{r7}
    b576:	af00      	add	r7, sp, #0
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    b578:	4b03      	ldr	r3, [pc, #12]	; (b588 <SystemCoreClockUpdate+0x14>)
    b57a:	4a04      	ldr	r2, [pc, #16]	; (b58c <SystemCoreClockUpdate+0x18>)
    b57c:	601a      	str	r2, [r3, #0]
}
    b57e:	bf00      	nop
    b580:	46bd      	mov	sp, r7
    b582:	bc80      	pop	{r7}
    b584:	4770      	bx	lr
    b586:	bf00      	nop
    b588:	2000fc0c 	.word	0x2000fc0c
    b58c:	03d09000 	.word	0x03d09000

0000b590 <SystemInit>:

void SystemInit(void)
{
    b590:	b580      	push	{r7, lr}
    b592:	af00      	add	r7, sp, #0
        NRF_P1->PIN_CNF[9]  = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos) | (GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);
    #endif
    
    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://www.nordicsemi.com/DocLib  */
    if (errata_36()){
    b594:	f000 f918 	bl	b7c8 <errata_36>
    b598:	4603      	mov	r3, r0
    b59a:	2b00      	cmp	r3, #0
    b59c:	d00e      	beq.n	b5bc <SystemInit+0x2c>
        NRF_CLOCK->EVENTS_DONE = 0;
    b59e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b5a2:	2200      	movs	r2, #0
    b5a4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    b5a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b5ac:	2200      	movs	r2, #0
    b5ae:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    b5b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b5b6:	2200      	movs	r2, #0
    b5b8:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    }
    
    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://www.nordicsemi.com/DocLib  */
    if (errata_66()){
    b5bc:	f000 f92c 	bl	b818 <errata_66>
    b5c0:	4603      	mov	r3, r0
    b5c2:	2b00      	cmp	r3, #0
    b5c4:	d076      	beq.n	b6b4 <SystemInit+0x124>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    b5c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b5ca:	4a77      	ldr	r2, [pc, #476]	; (b7a8 <SystemInit+0x218>)
    b5cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
    b5d0:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    b5d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b5d8:	4a73      	ldr	r2, [pc, #460]	; (b7a8 <SystemInit+0x218>)
    b5da:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
    b5de:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    b5e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b5e6:	4a70      	ldr	r2, [pc, #448]	; (b7a8 <SystemInit+0x218>)
    b5e8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    b5ec:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    b5f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b5f4:	4a6c      	ldr	r2, [pc, #432]	; (b7a8 <SystemInit+0x218>)
    b5f6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
    b5fa:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    b5fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b602:	4a69      	ldr	r2, [pc, #420]	; (b7a8 <SystemInit+0x218>)
    b604:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
    b608:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    b60c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b610:	4a65      	ldr	r2, [pc, #404]	; (b7a8 <SystemInit+0x218>)
    b612:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    b616:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    b61a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b61e:	4a62      	ldr	r2, [pc, #392]	; (b7a8 <SystemInit+0x218>)
    b620:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    b624:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    b628:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b62c:	4a5e      	ldr	r2, [pc, #376]	; (b7a8 <SystemInit+0x218>)
    b62e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
    b632:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    b636:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b63a:	4a5b      	ldr	r2, [pc, #364]	; (b7a8 <SystemInit+0x218>)
    b63c:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
    b640:	f8c2 3548 	str.w	r3, [r2, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    b644:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b648:	4a57      	ldr	r2, [pc, #348]	; (b7a8 <SystemInit+0x218>)
    b64a:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
    b64e:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    b652:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b656:	4a54      	ldr	r2, [pc, #336]	; (b7a8 <SystemInit+0x218>)
    b658:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
    b65c:	f8c2 3550 	str.w	r3, [r2, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    b660:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b664:	4a50      	ldr	r2, [pc, #320]	; (b7a8 <SystemInit+0x218>)
    b666:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
    b66a:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    b66e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b672:	4a4d      	ldr	r2, [pc, #308]	; (b7a8 <SystemInit+0x218>)
    b674:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
    b678:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    b67c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b680:	4a49      	ldr	r2, [pc, #292]	; (b7a8 <SystemInit+0x218>)
    b682:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
    b686:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    b68a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b68e:	4a46      	ldr	r2, [pc, #280]	; (b7a8 <SystemInit+0x218>)
    b690:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    b694:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    b698:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b69c:	4a42      	ldr	r2, [pc, #264]	; (b7a8 <SystemInit+0x218>)
    b69e:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
    b6a2:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    b6a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b6aa:	4a3f      	ldr	r2, [pc, #252]	; (b7a8 <SystemInit+0x218>)
    b6ac:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    b6b0:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    }
    
    /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
       for your device located at https://www.nordicsemi.com/DocLib  */
    if (errata_98()){
    b6b4:	f000 f8d8 	bl	b868 <errata_98>
    b6b8:	4603      	mov	r3, r0
    b6ba:	2b00      	cmp	r3, #0
    b6bc:	d002      	beq.n	b6c4 <SystemInit+0x134>
        *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    b6be:	4b3b      	ldr	r3, [pc, #236]	; (b7ac <SystemInit+0x21c>)
    b6c0:	4a3b      	ldr	r2, [pc, #236]	; (b7b0 <SystemInit+0x220>)
    b6c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
       for your device located at https://www.nordicsemi.com/DocLib  */
    if (errata_103()){
    b6c4:	f000 f8e6 	bl	b894 <errata_103>
    b6c8:	4603      	mov	r3, r0
    b6ca:	2b00      	cmp	r3, #0
    b6cc:	d003      	beq.n	b6d6 <SystemInit+0x146>
        NRF_CCM->MAXPACKETSIZE = 0xFBul;
    b6ce:	4b39      	ldr	r3, [pc, #228]	; (b7b4 <SystemInit+0x224>)
    b6d0:	22fb      	movs	r2, #251	; 0xfb
    b6d2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    }
    
    /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
       for your device located at https://www.nordicsemi.com/DocLib  */
    if (errata_115()){
    b6d6:	f000 f8f3 	bl	b8c0 <errata_115>
    b6da:	4603      	mov	r3, r0
    b6dc:	2b00      	cmp	r3, #0
    b6de:	d00a      	beq.n	b6f6 <SystemInit+0x166>
        *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    b6e0:	4b35      	ldr	r3, [pc, #212]	; (b7b8 <SystemInit+0x228>)
    b6e2:	681b      	ldr	r3, [r3, #0]
    b6e4:	f023 020f 	bic.w	r2, r3, #15
    b6e8:	4b34      	ldr	r3, [pc, #208]	; (b7bc <SystemInit+0x22c>)
    b6ea:	681b      	ldr	r3, [r3, #0]
    b6ec:	f003 030f 	and.w	r3, r3, #15
    b6f0:	4931      	ldr	r1, [pc, #196]	; (b7b8 <SystemInit+0x228>)
    b6f2:	4313      	orrs	r3, r2
    b6f4:	600b      	str	r3, [r1, #0]
    }
    
    /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
       for your device located at https://www.nordicsemi.com/DocLib  */
    if (errata_120()){
    b6f6:	f000 f8f9 	bl	b8ec <errata_120>
    b6fa:	4603      	mov	r3, r0
    b6fc:	2b00      	cmp	r3, #0
    b6fe:	d003      	beq.n	b708 <SystemInit+0x178>
        *(volatile uint32_t *)0x40029640ul = 0x200ul;
    b700:	4b2f      	ldr	r3, [pc, #188]	; (b7c0 <SystemInit+0x230>)
    b702:	f44f 7200 	mov.w	r2, #512	; 0x200
    b706:	601a      	str	r2, [r3, #0]
    }
    
    /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://www.nordicsemi.com/DocLib  */
    if (errata_136()){
    b708:	f000 f906 	bl	b918 <errata_136>
    b70c:	4603      	mov	r3, r0
    b70e:	2b00      	cmp	r3, #0
    b710:	d00d      	beq.n	b72e <SystemInit+0x19e>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    b712:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b716:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    b71a:	f003 0301 	and.w	r3, r3, #1
    b71e:	2b00      	cmp	r3, #0
    b720:	d005      	beq.n	b72e <SystemInit+0x19e>
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    b722:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b726:	f06f 0201 	mvn.w	r2, #1
    b72a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    b72e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    b732:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    b736:	2b00      	cmp	r3, #0
    b738:	db05      	blt.n	b746 <SystemInit+0x1b6>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    b73a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    b73e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    b742:	2b00      	cmp	r3, #0
    b744:	da2b      	bge.n	b79e <SystemInit+0x20e>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    b746:	4b1f      	ldr	r3, [pc, #124]	; (b7c4 <SystemInit+0x234>)
    b748:	2201      	movs	r2, #1
    b74a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    b74e:	bf00      	nop
    b750:	4b1c      	ldr	r3, [pc, #112]	; (b7c4 <SystemInit+0x234>)
    b752:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    b756:	2b00      	cmp	r3, #0
    b758:	d0fa      	beq.n	b750 <SystemInit+0x1c0>
            NRF_UICR->PSELRESET[0] = 18;
    b75a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    b75e:	2212      	movs	r2, #18
    b760:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    b764:	bf00      	nop
    b766:	4b17      	ldr	r3, [pc, #92]	; (b7c4 <SystemInit+0x234>)
    b768:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    b76c:	2b00      	cmp	r3, #0
    b76e:	d0fa      	beq.n	b766 <SystemInit+0x1d6>
            NRF_UICR->PSELRESET[1] = 18;
    b770:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    b774:	2212      	movs	r2, #18
    b776:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    b77a:	bf00      	nop
    b77c:	4b11      	ldr	r3, [pc, #68]	; (b7c4 <SystemInit+0x234>)
    b77e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    b782:	2b00      	cmp	r3, #0
    b784:	d0fa      	beq.n	b77c <SystemInit+0x1ec>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    b786:	4b0f      	ldr	r3, [pc, #60]	; (b7c4 <SystemInit+0x234>)
    b788:	2200      	movs	r2, #0
    b78a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    b78e:	bf00      	nop
    b790:	4b0c      	ldr	r3, [pc, #48]	; (b7c4 <SystemInit+0x234>)
    b792:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    b796:	2b00      	cmp	r3, #0
    b798:	d0fa      	beq.n	b790 <SystemInit+0x200>
            NVIC_SystemReset();
    b79a:	f7ff fed7 	bl	b54c <__NVIC_SystemReset>
        }
    #endif

    SystemCoreClockUpdate();
    b79e:	f7ff fee9 	bl	b574 <SystemCoreClockUpdate>
}
    b7a2:	bf00      	nop
    b7a4:	bd80      	pop	{r7, pc}
    b7a6:	bf00      	nop
    b7a8:	4000c000 	.word	0x4000c000
    b7ac:	4000568c 	.word	0x4000568c
    b7b0:	00038148 	.word	0x00038148
    b7b4:	4000f000 	.word	0x4000f000
    b7b8:	40000ee4 	.word	0x40000ee4
    b7bc:	10000258 	.word	0x10000258
    b7c0:	40029640 	.word	0x40029640
    b7c4:	4001e000 	.word	0x4001e000

0000b7c8 <errata_36>:


static bool errata_36(void)
{
    b7c8:	b480      	push	{r7}
    b7ca:	af00      	add	r7, sp, #0
    if (*(uint32_t *)0x10000130ul == 0x8ul){
    b7cc:	4b10      	ldr	r3, [pc, #64]	; (b810 <errata_36+0x48>)
    b7ce:	681b      	ldr	r3, [r3, #0]
    b7d0:	2b08      	cmp	r3, #8
    b7d2:	d117      	bne.n	b804 <errata_36+0x3c>
        if (*(uint32_t *)0x10000134ul == 0x0ul){
    b7d4:	4b0f      	ldr	r3, [pc, #60]	; (b814 <errata_36+0x4c>)
    b7d6:	681b      	ldr	r3, [r3, #0]
    b7d8:	2b00      	cmp	r3, #0
    b7da:	d101      	bne.n	b7e0 <errata_36+0x18>
            return true;
    b7dc:	2301      	movs	r3, #1
    b7de:	e012      	b.n	b806 <errata_36+0x3e>
        }
        if (*(uint32_t *)0x10000134ul == 0x1ul){
    b7e0:	4b0c      	ldr	r3, [pc, #48]	; (b814 <errata_36+0x4c>)
    b7e2:	681b      	ldr	r3, [r3, #0]
    b7e4:	2b01      	cmp	r3, #1
    b7e6:	d101      	bne.n	b7ec <errata_36+0x24>
            return true;
    b7e8:	2301      	movs	r3, #1
    b7ea:	e00c      	b.n	b806 <errata_36+0x3e>
        }
        if (*(uint32_t *)0x10000134ul == 0x2ul){
    b7ec:	4b09      	ldr	r3, [pc, #36]	; (b814 <errata_36+0x4c>)
    b7ee:	681b      	ldr	r3, [r3, #0]
    b7f0:	2b02      	cmp	r3, #2
    b7f2:	d101      	bne.n	b7f8 <errata_36+0x30>
            return true;
    b7f4:	2301      	movs	r3, #1
    b7f6:	e006      	b.n	b806 <errata_36+0x3e>
        }
        if (*(uint32_t *)0x10000134ul == 0x3ul){
    b7f8:	4b06      	ldr	r3, [pc, #24]	; (b814 <errata_36+0x4c>)
    b7fa:	681b      	ldr	r3, [r3, #0]
    b7fc:	2b03      	cmp	r3, #3
    b7fe:	d101      	bne.n	b804 <errata_36+0x3c>
            return true;
    b800:	2301      	movs	r3, #1
    b802:	e000      	b.n	b806 <errata_36+0x3e>
        }
    }

    /* Apply by default for unknown devices until errata is confirmed fixed. */
    return true;
    b804:	2301      	movs	r3, #1
}
    b806:	4618      	mov	r0, r3
    b808:	46bd      	mov	sp, r7
    b80a:	bc80      	pop	{r7}
    b80c:	4770      	bx	lr
    b80e:	bf00      	nop
    b810:	10000130 	.word	0x10000130
    b814:	10000134 	.word	0x10000134

0000b818 <errata_66>:


static bool errata_66(void)
{
    b818:	b480      	push	{r7}
    b81a:	af00      	add	r7, sp, #0
    if (*(uint32_t *)0x10000130ul == 0x8ul){
    b81c:	4b10      	ldr	r3, [pc, #64]	; (b860 <errata_66+0x48>)
    b81e:	681b      	ldr	r3, [r3, #0]
    b820:	2b08      	cmp	r3, #8
    b822:	d117      	bne.n	b854 <errata_66+0x3c>
        if (*(uint32_t *)0x10000134ul == 0x0ul){
    b824:	4b0f      	ldr	r3, [pc, #60]	; (b864 <errata_66+0x4c>)
    b826:	681b      	ldr	r3, [r3, #0]
    b828:	2b00      	cmp	r3, #0
    b82a:	d101      	bne.n	b830 <errata_66+0x18>
            return true;
    b82c:	2301      	movs	r3, #1
    b82e:	e012      	b.n	b856 <errata_66+0x3e>
        }
        if (*(uint32_t *)0x10000134ul == 0x1ul){
    b830:	4b0c      	ldr	r3, [pc, #48]	; (b864 <errata_66+0x4c>)
    b832:	681b      	ldr	r3, [r3, #0]
    b834:	2b01      	cmp	r3, #1
    b836:	d101      	bne.n	b83c <errata_66+0x24>
            return true;
    b838:	2301      	movs	r3, #1
    b83a:	e00c      	b.n	b856 <errata_66+0x3e>
        }
        if (*(uint32_t *)0x10000134ul == 0x2ul){
    b83c:	4b09      	ldr	r3, [pc, #36]	; (b864 <errata_66+0x4c>)
    b83e:	681b      	ldr	r3, [r3, #0]
    b840:	2b02      	cmp	r3, #2
    b842:	d101      	bne.n	b848 <errata_66+0x30>
            return true;
    b844:	2301      	movs	r3, #1
    b846:	e006      	b.n	b856 <errata_66+0x3e>
        }
        if (*(uint32_t *)0x10000134ul == 0x3ul){
    b848:	4b06      	ldr	r3, [pc, #24]	; (b864 <errata_66+0x4c>)
    b84a:	681b      	ldr	r3, [r3, #0]
    b84c:	2b03      	cmp	r3, #3
    b84e:	d101      	bne.n	b854 <errata_66+0x3c>
            return true;
    b850:	2301      	movs	r3, #1
    b852:	e000      	b.n	b856 <errata_66+0x3e>
        }
    }

    /* Apply by default for unknown devices until errata is confirmed fixed. */
    return true;
    b854:	2301      	movs	r3, #1
}
    b856:	4618      	mov	r0, r3
    b858:	46bd      	mov	sp, r7
    b85a:	bc80      	pop	{r7}
    b85c:	4770      	bx	lr
    b85e:	bf00      	nop
    b860:	10000130 	.word	0x10000130
    b864:	10000134 	.word	0x10000134

0000b868 <errata_98>:


static bool errata_98(void)
{
    b868:	b480      	push	{r7}
    b86a:	af00      	add	r7, sp, #0
    if (*(uint32_t *)0x10000130ul == 0x8ul){
    b86c:	4b07      	ldr	r3, [pc, #28]	; (b88c <errata_98+0x24>)
    b86e:	681b      	ldr	r3, [r3, #0]
    b870:	2b08      	cmp	r3, #8
    b872:	d105      	bne.n	b880 <errata_98+0x18>
        if (*(uint32_t *)0x10000134ul == 0x0ul){
    b874:	4b06      	ldr	r3, [pc, #24]	; (b890 <errata_98+0x28>)
    b876:	681b      	ldr	r3, [r3, #0]
    b878:	2b00      	cmp	r3, #0
    b87a:	d101      	bne.n	b880 <errata_98+0x18>
            return true;
    b87c:	2301      	movs	r3, #1
    b87e:	e000      	b.n	b882 <errata_98+0x1a>
        }
    }
    
    return false;
    b880:	2300      	movs	r3, #0
}
    b882:	4618      	mov	r0, r3
    b884:	46bd      	mov	sp, r7
    b886:	bc80      	pop	{r7}
    b888:	4770      	bx	lr
    b88a:	bf00      	nop
    b88c:	10000130 	.word	0x10000130
    b890:	10000134 	.word	0x10000134

0000b894 <errata_103>:


static bool errata_103(void)
{
    b894:	b480      	push	{r7}
    b896:	af00      	add	r7, sp, #0
    if (*(uint32_t *)0x10000130ul == 0x8ul){
    b898:	4b07      	ldr	r3, [pc, #28]	; (b8b8 <errata_103+0x24>)
    b89a:	681b      	ldr	r3, [r3, #0]
    b89c:	2b08      	cmp	r3, #8
    b89e:	d105      	bne.n	b8ac <errata_103+0x18>
        if (*(uint32_t *)0x10000134ul == 0x0ul){
    b8a0:	4b06      	ldr	r3, [pc, #24]	; (b8bc <errata_103+0x28>)
    b8a2:	681b      	ldr	r3, [r3, #0]
    b8a4:	2b00      	cmp	r3, #0
    b8a6:	d101      	bne.n	b8ac <errata_103+0x18>
            return true;
    b8a8:	2301      	movs	r3, #1
    b8aa:	e000      	b.n	b8ae <errata_103+0x1a>
        }
    }
    
    return false;
    b8ac:	2300      	movs	r3, #0
}
    b8ae:	4618      	mov	r0, r3
    b8b0:	46bd      	mov	sp, r7
    b8b2:	bc80      	pop	{r7}
    b8b4:	4770      	bx	lr
    b8b6:	bf00      	nop
    b8b8:	10000130 	.word	0x10000130
    b8bc:	10000134 	.word	0x10000134

0000b8c0 <errata_115>:


static bool errata_115(void)
{
    b8c0:	b480      	push	{r7}
    b8c2:	af00      	add	r7, sp, #0
    if (*(uint32_t *)0x10000130ul == 0x8ul){
    b8c4:	4b07      	ldr	r3, [pc, #28]	; (b8e4 <errata_115+0x24>)
    b8c6:	681b      	ldr	r3, [r3, #0]
    b8c8:	2b08      	cmp	r3, #8
    b8ca:	d105      	bne.n	b8d8 <errata_115+0x18>
        if (*(uint32_t *)0x10000134ul == 0x0ul){
    b8cc:	4b06      	ldr	r3, [pc, #24]	; (b8e8 <errata_115+0x28>)
    b8ce:	681b      	ldr	r3, [r3, #0]
    b8d0:	2b00      	cmp	r3, #0
    b8d2:	d101      	bne.n	b8d8 <errata_115+0x18>
            return true;
    b8d4:	2301      	movs	r3, #1
    b8d6:	e000      	b.n	b8da <errata_115+0x1a>
        }
    }
    
    return false;
    b8d8:	2300      	movs	r3, #0
}
    b8da:	4618      	mov	r0, r3
    b8dc:	46bd      	mov	sp, r7
    b8de:	bc80      	pop	{r7}
    b8e0:	4770      	bx	lr
    b8e2:	bf00      	nop
    b8e4:	10000130 	.word	0x10000130
    b8e8:	10000134 	.word	0x10000134

0000b8ec <errata_120>:


static bool errata_120(void)
{
    b8ec:	b480      	push	{r7}
    b8ee:	af00      	add	r7, sp, #0
    if (*(uint32_t *)0x10000130ul == 0x8ul){
    b8f0:	4b07      	ldr	r3, [pc, #28]	; (b910 <errata_120+0x24>)
    b8f2:	681b      	ldr	r3, [r3, #0]
    b8f4:	2b08      	cmp	r3, #8
    b8f6:	d105      	bne.n	b904 <errata_120+0x18>
        if (*(uint32_t *)0x10000134ul == 0x0ul){
    b8f8:	4b06      	ldr	r3, [pc, #24]	; (b914 <errata_120+0x28>)
    b8fa:	681b      	ldr	r3, [r3, #0]
    b8fc:	2b00      	cmp	r3, #0
    b8fe:	d101      	bne.n	b904 <errata_120+0x18>
            return true;
    b900:	2301      	movs	r3, #1
    b902:	e000      	b.n	b906 <errata_120+0x1a>
        }
    }
    
    return false;
    b904:	2300      	movs	r3, #0
}
    b906:	4618      	mov	r0, r3
    b908:	46bd      	mov	sp, r7
    b90a:	bc80      	pop	{r7}
    b90c:	4770      	bx	lr
    b90e:	bf00      	nop
    b910:	10000130 	.word	0x10000130
    b914:	10000134 	.word	0x10000134

0000b918 <errata_136>:


static bool errata_136(void)
{
    b918:	b480      	push	{r7}
    b91a:	af00      	add	r7, sp, #0
    if (*(uint32_t *)0x10000130ul == 0x8ul){
    b91c:	4b10      	ldr	r3, [pc, #64]	; (b960 <errata_136+0x48>)
    b91e:	681b      	ldr	r3, [r3, #0]
    b920:	2b08      	cmp	r3, #8
    b922:	d117      	bne.n	b954 <errata_136+0x3c>
        if (*(uint32_t *)0x10000134ul == 0x0ul){
    b924:	4b0f      	ldr	r3, [pc, #60]	; (b964 <errata_136+0x4c>)
    b926:	681b      	ldr	r3, [r3, #0]
    b928:	2b00      	cmp	r3, #0
    b92a:	d101      	bne.n	b930 <errata_136+0x18>
            return true;
    b92c:	2301      	movs	r3, #1
    b92e:	e012      	b.n	b956 <errata_136+0x3e>
        }
        if (*(uint32_t *)0x10000134ul == 0x1ul){
    b930:	4b0c      	ldr	r3, [pc, #48]	; (b964 <errata_136+0x4c>)
    b932:	681b      	ldr	r3, [r3, #0]
    b934:	2b01      	cmp	r3, #1
    b936:	d101      	bne.n	b93c <errata_136+0x24>
            return true;
    b938:	2301      	movs	r3, #1
    b93a:	e00c      	b.n	b956 <errata_136+0x3e>
        }
        if (*(uint32_t *)0x10000134ul == 0x2ul){
    b93c:	4b09      	ldr	r3, [pc, #36]	; (b964 <errata_136+0x4c>)
    b93e:	681b      	ldr	r3, [r3, #0]
    b940:	2b02      	cmp	r3, #2
    b942:	d101      	bne.n	b948 <errata_136+0x30>
            return true;
    b944:	2301      	movs	r3, #1
    b946:	e006      	b.n	b956 <errata_136+0x3e>
        }
        if (*(uint32_t *)0x10000134ul == 0x3ul){
    b948:	4b06      	ldr	r3, [pc, #24]	; (b964 <errata_136+0x4c>)
    b94a:	681b      	ldr	r3, [r3, #0]
    b94c:	2b03      	cmp	r3, #3
    b94e:	d101      	bne.n	b954 <errata_136+0x3c>
            return true;
    b950:	2301      	movs	r3, #1
    b952:	e000      	b.n	b956 <errata_136+0x3e>
        }
    }

    /* Apply by default for unknown devices until errata is confirmed fixed. */
    return true;
    b954:	2301      	movs	r3, #1
}
    b956:	4618      	mov	r0, r3
    b958:	46bd      	mov	sp, r7
    b95a:	bc80      	pop	{r7}
    b95c:	4770      	bx	lr
    b95e:	bf00      	nop
    b960:	10000130 	.word	0x10000130
    b964:	10000134 	.word	0x10000134

0000b968 <nrf_systick_val_get>:
{
    SysTick->LOAD = val;
}

__STATIC_INLINE uint32_t nrf_systick_val_get(void)
{
    b968:	b480      	push	{r7}
    b96a:	af00      	add	r7, sp, #0
    return SysTick->VAL;
    b96c:	4b02      	ldr	r3, [pc, #8]	; (b978 <nrf_systick_val_get+0x10>)
    b96e:	689b      	ldr	r3, [r3, #8]
}
    b970:	4618      	mov	r0, r3
    b972:	46bd      	mov	sp, r7
    b974:	bc80      	pop	{r7}
    b976:	4770      	bx	lr
    b978:	e000e010 	.word	0xe000e010

0000b97c <nrfx_systick_us_tick>:
 * @return Number of ticks
 *
 * @sa nrfx_systick_ms_tick
 */
static inline uint32_t nrfx_systick_us_tick(uint32_t us)
{
    b97c:	b480      	push	{r7}
    b97e:	b083      	sub	sp, #12
    b980:	af00      	add	r7, sp, #0
    b982:	6078      	str	r0, [r7, #4]
    return us * ((SystemCoreClock) / NRFX_SYSTICK_US);
    b984:	4b06      	ldr	r3, [pc, #24]	; (b9a0 <nrfx_systick_us_tick+0x24>)
    b986:	681b      	ldr	r3, [r3, #0]
    b988:	4a06      	ldr	r2, [pc, #24]	; (b9a4 <nrfx_systick_us_tick+0x28>)
    b98a:	fba2 2303 	umull	r2, r3, r2, r3
    b98e:	0c9b      	lsrs	r3, r3, #18
    b990:	687a      	ldr	r2, [r7, #4]
    b992:	fb02 f303 	mul.w	r3, r2, r3
}
    b996:	4618      	mov	r0, r3
    b998:	370c      	adds	r7, #12
    b99a:	46bd      	mov	sp, r7
    b99c:	bc80      	pop	{r7}
    b99e:	4770      	bx	lr
    b9a0:	2000fc0c 	.word	0x2000fc0c
    b9a4:	431bde83 	.word	0x431bde83

0000b9a8 <nrfx_systick_delay_ticks>:
    const uint32_t diff = NRF_SYSTICK_VAL_MASK & ((p_state->time) - nrf_systick_val_get());
    return (diff >= nrfx_systick_us_tick(us));
}

void nrfx_systick_delay_ticks(uint32_t ticks)
{
    b9a8:	b580      	push	{r7, lr}
    b9aa:	b084      	sub	sp, #16
    b9ac:	af00      	add	r7, sp, #0
    b9ae:	6078      	str	r0, [r7, #4]
    NRFX_ASSERT(ticks <= NRFX_SYSTICK_TICKS_MAX);
    b9b0:	687b      	ldr	r3, [r7, #4]
    b9b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    b9b6:	d305      	bcc.n	b9c4 <nrfx_systick_delay_ticks+0x1c>
    b9b8:	4b0b      	ldr	r3, [pc, #44]	; (b9e8 <nrfx_systick_delay_ticks+0x40>)
    b9ba:	4a0c      	ldr	r2, [pc, #48]	; (b9ec <nrfx_systick_delay_ticks+0x44>)
    b9bc:	2187      	movs	r1, #135	; 0x87
    b9be:	480c      	ldr	r0, [pc, #48]	; (b9f0 <nrfx_systick_delay_ticks+0x48>)
    b9c0:	f7f4 fedc 	bl	77c <__assert_func>

    const uint32_t start = nrf_systick_val_get();
    b9c4:	f7ff ffd0 	bl	b968 <nrf_systick_val_get>
    b9c8:	60f8      	str	r0, [r7, #12]
    while ((NRF_SYSTICK_VAL_MASK & (start - nrf_systick_val_get())) < ticks)
    b9ca:	bf00      	nop
    b9cc:	f7ff ffcc 	bl	b968 <nrf_systick_val_get>
    b9d0:	4602      	mov	r2, r0
    b9d2:	68fb      	ldr	r3, [r7, #12]
    b9d4:	1a9b      	subs	r3, r3, r2
    b9d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b9da:	687a      	ldr	r2, [r7, #4]
    b9dc:	429a      	cmp	r2, r3
    b9de:	d8f5      	bhi.n	b9cc <nrfx_systick_delay_ticks+0x24>
    {
        /* Nothing to do */
    }
}
    b9e0:	bf00      	nop
    b9e2:	3710      	adds	r7, #16
    b9e4:	46bd      	mov	sp, r7
    b9e6:	bd80      	pop	{r7, pc}
    b9e8:	0002d7b0 	.word	0x0002d7b0
    b9ec:	0002eac4 	.word	0x0002eac4
    b9f0:	0002d740 	.word	0x0002d740

0000b9f4 <nrfx_systick_delay_us>:

void nrfx_systick_delay_us(uint32_t us)
{
    b9f4:	b580      	push	{r7, lr}
    b9f6:	b082      	sub	sp, #8
    b9f8:	af00      	add	r7, sp, #0
    b9fa:	6078      	str	r0, [r7, #4]
    NRFX_SYSTICK_ASSERT_TIMEOUT(us);
    b9fc:	4b0e      	ldr	r3, [pc, #56]	; (ba38 <nrfx_systick_delay_us+0x44>)
    b9fe:	681b      	ldr	r3, [r3, #0]
    ba00:	4a0e      	ldr	r2, [pc, #56]	; (ba3c <nrfx_systick_delay_us+0x48>)
    ba02:	fba2 2303 	umull	r2, r3, r2, r3
    ba06:	0c9b      	lsrs	r3, r3, #18
    ba08:	4a0d      	ldr	r2, [pc, #52]	; (ba40 <nrfx_systick_delay_us+0x4c>)
    ba0a:	fbb2 f3f3 	udiv	r3, r2, r3
    ba0e:	687a      	ldr	r2, [r7, #4]
    ba10:	429a      	cmp	r2, r3
    ba12:	d905      	bls.n	ba20 <nrfx_systick_delay_us+0x2c>
    ba14:	4b0b      	ldr	r3, [pc, #44]	; (ba44 <nrfx_systick_delay_us+0x50>)
    ba16:	4a0c      	ldr	r2, [pc, #48]	; (ba48 <nrfx_systick_delay_us+0x54>)
    ba18:	2192      	movs	r1, #146	; 0x92
    ba1a:	480c      	ldr	r0, [pc, #48]	; (ba4c <nrfx_systick_delay_us+0x58>)
    ba1c:	f7f4 feae 	bl	77c <__assert_func>
    nrfx_systick_delay_ticks(nrfx_systick_us_tick(us));
    ba20:	6878      	ldr	r0, [r7, #4]
    ba22:	f7ff ffab 	bl	b97c <nrfx_systick_us_tick>
    ba26:	4603      	mov	r3, r0
    ba28:	4618      	mov	r0, r3
    ba2a:	f7ff ffbd 	bl	b9a8 <nrfx_systick_delay_ticks>
}
    ba2e:	bf00      	nop
    ba30:	3708      	adds	r7, #8
    ba32:	46bd      	mov	sp, r7
    ba34:	bd80      	pop	{r7, pc}
    ba36:	bf00      	nop
    ba38:	2000fc0c 	.word	0x2000fc0c
    ba3c:	431bde83 	.word	0x431bde83
    ba40:	007fffff 	.word	0x007fffff
    ba44:	0002d6f4 	.word	0x0002d6f4
    ba48:	0002eae0 	.word	0x0002eae0
    ba4c:	0002d740 	.word	0x0002d740

0000ba50 <__NVIC_SetPendingIRQ>:
{
    ba50:	b480      	push	{r7}
    ba52:	b083      	sub	sp, #12
    ba54:	af00      	add	r7, sp, #0
    ba56:	4603      	mov	r3, r0
    ba58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    ba5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    ba5e:	2b00      	cmp	r3, #0
    ba60:	db0c      	blt.n	ba7c <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ba62:	79fb      	ldrb	r3, [r7, #7]
    ba64:	f003 021f 	and.w	r2, r3, #31
    ba68:	4907      	ldr	r1, [pc, #28]	; (ba88 <__NVIC_SetPendingIRQ+0x38>)
    ba6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    ba6e:	095b      	lsrs	r3, r3, #5
    ba70:	2001      	movs	r0, #1
    ba72:	fa00 f202 	lsl.w	r2, r0, r2
    ba76:	3340      	adds	r3, #64	; 0x40
    ba78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ba7c:	bf00      	nop
    ba7e:	370c      	adds	r7, #12
    ba80:	46bd      	mov	sp, r7
    ba82:	bc80      	pop	{r7}
    ba84:	4770      	bx	lr
    ba86:	bf00      	nop
    ba88:	e000e100 	.word	0xe000e100

0000ba8c <__NVIC_ClearPendingIRQ>:
{
    ba8c:	b480      	push	{r7}
    ba8e:	b083      	sub	sp, #12
    ba90:	af00      	add	r7, sp, #0
    ba92:	4603      	mov	r3, r0
    ba94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    ba96:	f997 3007 	ldrsb.w	r3, [r7, #7]
    ba9a:	2b00      	cmp	r3, #0
    ba9c:	db0c      	blt.n	bab8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ba9e:	79fb      	ldrb	r3, [r7, #7]
    baa0:	f003 021f 	and.w	r2, r3, #31
    baa4:	4907      	ldr	r1, [pc, #28]	; (bac4 <__NVIC_ClearPendingIRQ+0x38>)
    baa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
    baaa:	095b      	lsrs	r3, r3, #5
    baac:	2001      	movs	r0, #1
    baae:	fa00 f202 	lsl.w	r2, r0, r2
    bab2:	3360      	adds	r3, #96	; 0x60
    bab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bab8:	bf00      	nop
    baba:	370c      	adds	r7, #12
    babc:	46bd      	mov	sp, r7
    babe:	bc80      	pop	{r7}
    bac0:	4770      	bx	lr
    bac2:	bf00      	nop
    bac4:	e000e100 	.word	0xe000e100

0000bac8 <nrfx_bitpos_to_event>:
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
}

__STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    bac8:	b480      	push	{r7}
    baca:	b083      	sub	sp, #12
    bacc:	af00      	add	r7, sp, #0
    bace:	6078      	str	r0, [r7, #4]
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    bad0:	687b      	ldr	r3, [r7, #4]
    bad2:	009a      	lsls	r2, r3, #2
    bad4:	4b03      	ldr	r3, [pc, #12]	; (bae4 <nrfx_bitpos_to_event+0x1c>)
    bad6:	681b      	ldr	r3, [r3, #0]
    bad8:	4413      	add	r3, r2
}
    bada:	4618      	mov	r0, r3
    badc:	370c      	adds	r7, #12
    bade:	46bd      	mov	sp, r7
    bae0:	bc80      	pop	{r7}
    bae2:	4770      	bx	lr
    bae4:	0002ed18 	.word	0x0002ed18

0000bae8 <nrf_usbd_int_enable>:
{
    return NRF_USBD->SHORTS;
}

void nrf_usbd_int_enable(uint32_t int_mask)
{
    bae8:	b480      	push	{r7}
    baea:	b083      	sub	sp, #12
    baec:	af00      	add	r7, sp, #0
    baee:	6078      	str	r0, [r7, #4]
    NRF_USBD->INTENSET = int_mask;
    baf0:	4a04      	ldr	r2, [pc, #16]	; (bb04 <nrf_usbd_int_enable+0x1c>)
    baf2:	687b      	ldr	r3, [r7, #4]
    baf4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    baf8:	bf00      	nop
    bafa:	370c      	adds	r7, #12
    bafc:	46bd      	mov	sp, r7
    bafe:	bc80      	pop	{r7}
    bb00:	4770      	bx	lr
    bb02:	bf00      	nop
    bb04:	40027000 	.word	0x40027000

0000bb08 <nrf_usbd_int_enable_get>:
{
    return !!(NRF_USBD->INTENSET & int_mask);
}

uint32_t nrf_usbd_int_enable_get(void)
{
    bb08:	b480      	push	{r7}
    bb0a:	af00      	add	r7, sp, #0
    return NRF_USBD->INTENSET;
    bb0c:	4b03      	ldr	r3, [pc, #12]	; (bb1c <nrf_usbd_int_enable_get+0x14>)
    bb0e:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
}
    bb12:	4618      	mov	r0, r3
    bb14:	46bd      	mov	sp, r7
    bb16:	bc80      	pop	{r7}
    bb18:	4770      	bx	lr
    bb1a:	bf00      	nop
    bb1c:	40027000 	.word	0x40027000

0000bb20 <nrf_usbd_int_disable>:

void nrf_usbd_int_disable(uint32_t int_mask)
{
    bb20:	b480      	push	{r7}
    bb22:	b083      	sub	sp, #12
    bb24:	af00      	add	r7, sp, #0
    bb26:	6078      	str	r0, [r7, #4]
    NRF_USBD->INTENCLR = int_mask;
    bb28:	4a04      	ldr	r2, [pc, #16]	; (bb3c <nrf_usbd_int_disable+0x1c>)
    bb2a:	687b      	ldr	r3, [r7, #4]
    bb2c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    bb30:	bf00      	nop
    bb32:	370c      	adds	r7, #12
    bb34:	46bd      	mov	sp, r7
    bb36:	bc80      	pop	{r7}
    bb38:	4770      	bx	lr
    bb3a:	bf00      	nop
    bb3c:	40027000 	.word	0x40027000

0000bb40 <nrf_usbd_enable>:


#ifndef SUPPRESS_INLINE_IMPLEMENTATION

void nrf_usbd_enable(void)
{
    bb40:	b480      	push	{r7}
    bb42:	af00      	add	r7, sp, #0
    *(volatile uint32_t *)0x400005F0 = 3;
    __ISB();
    __DSB();
#endif

    NRF_USBD->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    bb44:	4b05      	ldr	r3, [pc, #20]	; (bb5c <nrf_usbd_enable+0x1c>)
    bb46:	2201      	movs	r2, #1
    bb48:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("isb 0xF":::"memory");
    bb4c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    bb50:	f3bf 8f4f 	dsb	sy
    __ISB();
    __DSB();
}
    bb54:	bf00      	nop
    bb56:	46bd      	mov	sp, r7
    bb58:	bc80      	pop	{r7}
    bb5a:	4770      	bx	lr
    bb5c:	40027000 	.word	0x40027000

0000bb60 <nrf_usbd_disable>:

void nrf_usbd_disable(void)
{
    bb60:	b480      	push	{r7}
    bb62:	af00      	add	r7, sp, #0
    NRF_USBD->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    bb64:	4b05      	ldr	r3, [pc, #20]	; (bb7c <nrf_usbd_disable+0x1c>)
    bb66:	2200      	movs	r2, #0
    bb68:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("isb 0xF":::"memory");
    bb6c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    bb70:	f3bf 8f4f 	dsb	sy
    __ISB();
    __DSB();
}
    bb74:	bf00      	nop
    bb76:	46bd      	mov	sp, r7
    bb78:	bc80      	pop	{r7}
    bb7a:	4770      	bx	lr
    bb7c:	40027000 	.word	0x40027000

0000bb80 <nrf_usbd_eventcause_get>:

uint32_t nrf_usbd_eventcause_get(void)
{
    bb80:	b480      	push	{r7}
    bb82:	af00      	add	r7, sp, #0
    return NRF_USBD->EVENTCAUSE;
    bb84:	4b03      	ldr	r3, [pc, #12]	; (bb94 <nrf_usbd_eventcause_get+0x14>)
    bb86:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
}
    bb8a:	4618      	mov	r0, r3
    bb8c:	46bd      	mov	sp, r7
    bb8e:	bc80      	pop	{r7}
    bb90:	4770      	bx	lr
    bb92:	bf00      	nop
    bb94:	40027000 	.word	0x40027000

0000bb98 <nrf_usbd_eventcause_clear>:

void nrf_usbd_eventcause_clear(uint32_t flags)
{
    bb98:	b480      	push	{r7}
    bb9a:	b083      	sub	sp, #12
    bb9c:	af00      	add	r7, sp, #0
    bb9e:	6078      	str	r0, [r7, #4]
    NRF_USBD->EVENTCAUSE = flags;
    bba0:	4a06      	ldr	r2, [pc, #24]	; (bbbc <nrf_usbd_eventcause_clear+0x24>)
    bba2:	687b      	ldr	r3, [r7, #4]
    bba4:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  __ASM volatile ("isb 0xF":::"memory");
    bba8:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    bbac:	f3bf 8f4f 	dsb	sy
    __ISB();
    __DSB();
}
    bbb0:	bf00      	nop
    bbb2:	370c      	adds	r7, #12
    bbb4:	46bd      	mov	sp, r7
    bbb6:	bc80      	pop	{r7}
    bbb8:	4770      	bx	lr
    bbba:	bf00      	nop
    bbbc:	40027000 	.word	0x40027000

0000bbc0 <nrf_usbd_haltedep>:
    __DSB();
    return ret;
}

uint32_t nrf_usbd_haltedep(uint8_t ep)
{
    bbc0:	b580      	push	{r7, lr}
    bbc2:	b084      	sub	sp, #16
    bbc4:	af00      	add	r7, sp, #0
    bbc6:	4603      	mov	r3, r0
    bbc8:	71fb      	strb	r3, [r7, #7]
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    bbca:	79fb      	ldrb	r3, [r7, #7]
    bbcc:	f003 030f 	and.w	r3, r3, #15
    bbd0:	73fb      	strb	r3, [r7, #15]
    if (NRF_USBD_EPIN_CHECK(ep))
    bbd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    bbd6:	2b00      	cmp	r3, #0
    bbd8:	da10      	bge.n	bbfc <nrf_usbd_haltedep+0x3c>
    {
        NRFX_ASSERT(epnr < NRFX_ARRAY_SIZE(NRF_USBD->HALTED.EPIN));
    bbda:	7bfb      	ldrb	r3, [r7, #15]
    bbdc:	2b07      	cmp	r3, #7
    bbde:	d906      	bls.n	bbee <nrf_usbd_haltedep+0x2e>
    bbe0:	4b11      	ldr	r3, [pc, #68]	; (bc28 <nrf_usbd_haltedep+0x68>)
    bbe2:	4a12      	ldr	r2, [pc, #72]	; (bc2c <nrf_usbd_haltedep+0x6c>)
    bbe4:	f240 4119 	movw	r1, #1049	; 0x419
    bbe8:	4811      	ldr	r0, [pc, #68]	; (bc30 <nrf_usbd_haltedep+0x70>)
    bbea:	f7f4 fdc7 	bl	77c <__assert_func>
        return NRF_USBD->HALTED.EPIN[epnr];
    bbee:	4a11      	ldr	r2, [pc, #68]	; (bc34 <nrf_usbd_haltedep+0x74>)
    bbf0:	7bfb      	ldrb	r3, [r7, #15]
    bbf2:	f503 7384 	add.w	r3, r3, #264	; 0x108
    bbf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bbfa:	e010      	b.n	bc1e <nrf_usbd_haltedep+0x5e>
    }
    else
    {
        NRFX_ASSERT(epnr < NRFX_ARRAY_SIZE(NRF_USBD->HALTED.EPOUT));
    bbfc:	7bfb      	ldrb	r3, [r7, #15]
    bbfe:	2b07      	cmp	r3, #7
    bc00:	d906      	bls.n	bc10 <nrf_usbd_haltedep+0x50>
    bc02:	4b0d      	ldr	r3, [pc, #52]	; (bc38 <nrf_usbd_haltedep+0x78>)
    bc04:	4a09      	ldr	r2, [pc, #36]	; (bc2c <nrf_usbd_haltedep+0x6c>)
    bc06:	f240 411e 	movw	r1, #1054	; 0x41e
    bc0a:	4809      	ldr	r0, [pc, #36]	; (bc30 <nrf_usbd_haltedep+0x70>)
    bc0c:	f7f4 fdb6 	bl	77c <__assert_func>
        return NRF_USBD->HALTED.EPOUT[epnr];
    bc10:	4a08      	ldr	r2, [pc, #32]	; (bc34 <nrf_usbd_haltedep+0x74>)
    bc12:	7bfb      	ldrb	r3, [r7, #15]
    bc14:	f503 7388 	add.w	r3, r3, #272	; 0x110
    bc18:	009b      	lsls	r3, r3, #2
    bc1a:	4413      	add	r3, r2
    bc1c:	685b      	ldr	r3, [r3, #4]
    }
}
    bc1e:	4618      	mov	r0, r3
    bc20:	3710      	adds	r7, #16
    bc22:	46bd      	mov	sp, r7
    bc24:	bd80      	pop	{r7, pc}
    bc26:	bf00      	nop
    bc28:	0002d7d0 	.word	0x0002d7d0
    bc2c:	0002ee6c 	.word	0x0002ee6c
    bc30:	0002d84c 	.word	0x0002d84c
    bc34:	40027000 	.word	0x40027000
    bc38:	0002d874 	.word	0x0002d874

0000bc3c <nrf_usbd_epdatastatus_get>:
    nrf_usbd_epstatus_clear(ret);
    return ret;
}

uint32_t nrf_usbd_epdatastatus_get(void)
{
    bc3c:	b480      	push	{r7}
    bc3e:	af00      	add	r7, sp, #0
    return NRF_USBD->EPDATASTATUS;
    bc40:	4b03      	ldr	r3, [pc, #12]	; (bc50 <nrf_usbd_epdatastatus_get+0x14>)
    bc42:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
}
    bc46:	4618      	mov	r0, r3
    bc48:	46bd      	mov	sp, r7
    bc4a:	bc80      	pop	{r7}
    bc4c:	4770      	bx	lr
    bc4e:	bf00      	nop
    bc50:	40027000 	.word	0x40027000

0000bc54 <nrf_usbd_epdatastatus_clear>:

void nrf_usbd_epdatastatus_clear(uint32_t flags)
{
    bc54:	b480      	push	{r7}
    bc56:	b083      	sub	sp, #12
    bc58:	af00      	add	r7, sp, #0
    bc5a:	6078      	str	r0, [r7, #4]
    NRF_USBD->EPDATASTATUS = flags;
    bc5c:	4a06      	ldr	r2, [pc, #24]	; (bc78 <nrf_usbd_epdatastatus_clear+0x24>)
    bc5e:	687b      	ldr	r3, [r7, #4]
    bc60:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
  __ASM volatile ("isb 0xF":::"memory");
    bc64:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    bc68:	f3bf 8f4f 	dsb	sy
    __ISB();
    __DSB();
}
    bc6c:	bf00      	nop
    bc6e:	370c      	adds	r7, #12
    bc70:	46bd      	mov	sp, r7
    bc72:	bc80      	pop	{r7}
    bc74:	4770      	bx	lr
    bc76:	bf00      	nop
    bc78:	40027000 	.word	0x40027000

0000bc7c <nrf_usbd_setup_bmrequesttype_get>:
    nrf_usbd_epdatastatus_clear(ret);
    return ret;
}

uint8_t nrf_usbd_setup_bmrequesttype_get(void)
{
    bc7c:	b480      	push	{r7}
    bc7e:	af00      	add	r7, sp, #0
    return (uint8_t)(NRF_USBD->BMREQUESTTYPE);
    bc80:	4b03      	ldr	r3, [pc, #12]	; (bc90 <nrf_usbd_setup_bmrequesttype_get+0x14>)
    bc82:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
    bc86:	b2db      	uxtb	r3, r3
}
    bc88:	4618      	mov	r0, r3
    bc8a:	46bd      	mov	sp, r7
    bc8c:	bc80      	pop	{r7}
    bc8e:	4770      	bx	lr
    bc90:	40027000 	.word	0x40027000

0000bc94 <nrf_usbd_setup_brequest_get>:

uint8_t nrf_usbd_setup_brequest_get(void)
{
    bc94:	b480      	push	{r7}
    bc96:	af00      	add	r7, sp, #0
    return (uint8_t)(NRF_USBD->BREQUEST);
    bc98:	4b03      	ldr	r3, [pc, #12]	; (bca8 <nrf_usbd_setup_brequest_get+0x14>)
    bc9a:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
    bc9e:	b2db      	uxtb	r3, r3
}
    bca0:	4618      	mov	r0, r3
    bca2:	46bd      	mov	sp, r7
    bca4:	bc80      	pop	{r7}
    bca6:	4770      	bx	lr
    bca8:	40027000 	.word	0x40027000

0000bcac <nrf_usbd_setup_wvalue_get>:

uint16_t nrf_usbd_setup_wvalue_get(void)
{
    bcac:	b480      	push	{r7}
    bcae:	b083      	sub	sp, #12
    bcb0:	af00      	add	r7, sp, #0
    const uint16_t val = NRF_USBD->WVALUEL;
    bcb2:	4b09      	ldr	r3, [pc, #36]	; (bcd8 <nrf_usbd_setup_wvalue_get+0x2c>)
    bcb4:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
    bcb8:	80fb      	strh	r3, [r7, #6]
    return (uint16_t)(val | ((NRF_USBD->WVALUEH) << 8));
    bcba:	4b07      	ldr	r3, [pc, #28]	; (bcd8 <nrf_usbd_setup_wvalue_get+0x2c>)
    bcbc:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
    bcc0:	b29b      	uxth	r3, r3
    bcc2:	021b      	lsls	r3, r3, #8
    bcc4:	b29a      	uxth	r2, r3
    bcc6:	88fb      	ldrh	r3, [r7, #6]
    bcc8:	4313      	orrs	r3, r2
    bcca:	b29b      	uxth	r3, r3
}
    bccc:	4618      	mov	r0, r3
    bcce:	370c      	adds	r7, #12
    bcd0:	46bd      	mov	sp, r7
    bcd2:	bc80      	pop	{r7}
    bcd4:	4770      	bx	lr
    bcd6:	bf00      	nop
    bcd8:	40027000 	.word	0x40027000

0000bcdc <nrf_usbd_setup_windex_get>:

uint16_t nrf_usbd_setup_windex_get(void)
{
    bcdc:	b480      	push	{r7}
    bcde:	b083      	sub	sp, #12
    bce0:	af00      	add	r7, sp, #0
    const uint16_t val = NRF_USBD->WINDEXL;
    bce2:	4b09      	ldr	r3, [pc, #36]	; (bd08 <nrf_usbd_setup_windex_get+0x2c>)
    bce4:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
    bce8:	80fb      	strh	r3, [r7, #6]
    return (uint16_t)(val | ((NRF_USBD->WINDEXH) << 8));
    bcea:	4b07      	ldr	r3, [pc, #28]	; (bd08 <nrf_usbd_setup_windex_get+0x2c>)
    bcec:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
    bcf0:	b29b      	uxth	r3, r3
    bcf2:	021b      	lsls	r3, r3, #8
    bcf4:	b29a      	uxth	r2, r3
    bcf6:	88fb      	ldrh	r3, [r7, #6]
    bcf8:	4313      	orrs	r3, r2
    bcfa:	b29b      	uxth	r3, r3
}
    bcfc:	4618      	mov	r0, r3
    bcfe:	370c      	adds	r7, #12
    bd00:	46bd      	mov	sp, r7
    bd02:	bc80      	pop	{r7}
    bd04:	4770      	bx	lr
    bd06:	bf00      	nop
    bd08:	40027000 	.word	0x40027000

0000bd0c <nrf_usbd_setup_wlength_get>:

uint16_t nrf_usbd_setup_wlength_get(void)
{
    bd0c:	b480      	push	{r7}
    bd0e:	b083      	sub	sp, #12
    bd10:	af00      	add	r7, sp, #0
    const uint16_t val = NRF_USBD->WLENGTHL;
    bd12:	4b09      	ldr	r3, [pc, #36]	; (bd38 <nrf_usbd_setup_wlength_get+0x2c>)
    bd14:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
    bd18:	80fb      	strh	r3, [r7, #6]
    return (uint16_t)(val | ((NRF_USBD->WLENGTHH) << 8));
    bd1a:	4b07      	ldr	r3, [pc, #28]	; (bd38 <nrf_usbd_setup_wlength_get+0x2c>)
    bd1c:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    bd20:	b29b      	uxth	r3, r3
    bd22:	021b      	lsls	r3, r3, #8
    bd24:	b29a      	uxth	r2, r3
    bd26:	88fb      	ldrh	r3, [r7, #6]
    bd28:	4313      	orrs	r3, r2
    bd2a:	b29b      	uxth	r3, r3
}
    bd2c:	4618      	mov	r0, r3
    bd2e:	370c      	adds	r7, #12
    bd30:	46bd      	mov	sp, r7
    bd32:	bc80      	pop	{r7}
    bd34:	4770      	bx	lr
    bd36:	bf00      	nop
    bd38:	40027000 	.word	0x40027000

0000bd3c <nrf_usbd_epout_size_get>:

size_t nrf_usbd_epout_size_get(uint8_t ep)
{
    bd3c:	b580      	push	{r7, lr}
    bd3e:	b084      	sub	sp, #16
    bd40:	af00      	add	r7, sp, #0
    bd42:	4603      	mov	r3, r0
    bd44:	71fb      	strb	r3, [r7, #7]
    NRFX_ASSERT(NRF_USBD_EP_VALIDATE(ep));
    bd46:	f997 3007 	ldrsb.w	r3, [r7, #7]
    bd4a:	2b00      	cmp	r3, #0
    bd4c:	da04      	bge.n	bd58 <nrf_usbd_epout_size_get+0x1c>
    bd4e:	79fb      	ldrb	r3, [r7, #7]
    bd50:	f003 030f 	and.w	r3, r3, #15
    bd54:	2b08      	cmp	r3, #8
    bd56:	dd0f      	ble.n	bd78 <nrf_usbd_epout_size_get+0x3c>
    bd58:	f997 3007 	ldrsb.w	r3, [r7, #7]
    bd5c:	2b00      	cmp	r3, #0
    bd5e:	db04      	blt.n	bd6a <nrf_usbd_epout_size_get+0x2e>
    bd60:	79fb      	ldrb	r3, [r7, #7]
    bd62:	f003 030f 	and.w	r3, r3, #15
    bd66:	2b08      	cmp	r3, #8
    bd68:	dd06      	ble.n	bd78 <nrf_usbd_epout_size_get+0x3c>
    bd6a:	4b1e      	ldr	r3, [pc, #120]	; (bde4 <nrf_usbd_epout_size_get+0xa8>)
    bd6c:	4a1e      	ldr	r2, [pc, #120]	; (bde8 <nrf_usbd_epout_size_get+0xac>)
    bd6e:	f44f 618e 	mov.w	r1, #1136	; 0x470
    bd72:	481e      	ldr	r0, [pc, #120]	; (bdec <nrf_usbd_epout_size_get+0xb0>)
    bd74:	f7f4 fd02 	bl	77c <__assert_func>
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));
    bd78:	f997 3007 	ldrsb.w	r3, [r7, #7]
    bd7c:	2b00      	cmp	r3, #0
    bd7e:	da06      	bge.n	bd8e <nrf_usbd_epout_size_get+0x52>
    bd80:	4b1b      	ldr	r3, [pc, #108]	; (bdf0 <nrf_usbd_epout_size_get+0xb4>)
    bd82:	4a19      	ldr	r2, [pc, #100]	; (bde8 <nrf_usbd_epout_size_get+0xac>)
    bd84:	f240 4171 	movw	r1, #1137	; 0x471
    bd88:	4818      	ldr	r0, [pc, #96]	; (bdec <nrf_usbd_epout_size_get+0xb0>)
    bd8a:	f7f4 fcf7 	bl	77c <__assert_func>
    if (NRF_USBD_EPISO_CHECK(ep))
    bd8e:	79fb      	ldrb	r3, [r7, #7]
    bd90:	f003 0308 	and.w	r3, r3, #8
    bd94:	2b00      	cmp	r3, #0
    bd96:	d00c      	beq.n	bdb2 <nrf_usbd_epout_size_get+0x76>
    {
        size_t size_isoout = NRF_USBD->SIZE.ISOOUT;
    bd98:	4b16      	ldr	r3, [pc, #88]	; (bdf4 <nrf_usbd_epout_size_get+0xb8>)
    bd9a:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    bd9e:	60fb      	str	r3, [r7, #12]
        if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) == (USBD_SIZE_ISOOUT_ZERO_ZeroData << USBD_SIZE_ISOOUT_ZERO_Pos))
    bda0:	68fb      	ldr	r3, [r7, #12]
    bda2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    bda6:	2b00      	cmp	r3, #0
    bda8:	d001      	beq.n	bdae <nrf_usbd_epout_size_get+0x72>
        {
            size_isoout = 0;
    bdaa:	2300      	movs	r3, #0
    bdac:	60fb      	str	r3, [r7, #12]
        }
        return size_isoout;
    bdae:	68fb      	ldr	r3, [r7, #12]
    bdb0:	e013      	b.n	bdda <nrf_usbd_epout_size_get+0x9e>
    }

    NRFX_ASSERT(NRF_USBD_EP_NR_GET(ep) < NRFX_ARRAY_SIZE(NRF_USBD->SIZE.EPOUT));
    bdb2:	79fb      	ldrb	r3, [r7, #7]
    bdb4:	f003 0308 	and.w	r3, r3, #8
    bdb8:	2b00      	cmp	r3, #0
    bdba:	d006      	beq.n	bdca <nrf_usbd_epout_size_get+0x8e>
    bdbc:	4b0e      	ldr	r3, [pc, #56]	; (bdf8 <nrf_usbd_epout_size_get+0xbc>)
    bdbe:	4a0a      	ldr	r2, [pc, #40]	; (bde8 <nrf_usbd_epout_size_get+0xac>)
    bdc0:	f240 417c 	movw	r1, #1148	; 0x47c
    bdc4:	4809      	ldr	r0, [pc, #36]	; (bdec <nrf_usbd_epout_size_get+0xb0>)
    bdc6:	f7f4 fcd9 	bl	77c <__assert_func>
    return NRF_USBD->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    bdca:	4a0a      	ldr	r2, [pc, #40]	; (bdf4 <nrf_usbd_epout_size_get+0xb8>)
    bdcc:	79fb      	ldrb	r3, [r7, #7]
    bdce:	f003 030f 	and.w	r3, r3, #15
    bdd2:	f503 7394 	add.w	r3, r3, #296	; 0x128
    bdd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
    bdda:	4618      	mov	r0, r3
    bddc:	3710      	adds	r7, #16
    bdde:	46bd      	mov	sp, r7
    bde0:	bd80      	pop	{r7, pc}
    bde2:	bf00      	nop
    bde4:	0002d8f0 	.word	0x0002d8f0
    bde8:	0002ee2c 	.word	0x0002ee2c
    bdec:	0002d84c 	.word	0x0002d84c
    bdf0:	0002d9b4 	.word	0x0002d9b4
    bdf4:	40027000 	.word	0x40027000
    bdf8:	0002d9e4 	.word	0x0002d9e4

0000bdfc <nrf_usbd_episoout_size_get>:

size_t nrf_usbd_episoout_size_get(uint8_t ep)
{
    bdfc:	b580      	push	{r7, lr}
    bdfe:	b084      	sub	sp, #16
    be00:	af00      	add	r7, sp, #0
    be02:	4603      	mov	r3, r0
    be04:	71fb      	strb	r3, [r7, #7]
    NRFX_ASSERT(NRF_USBD_EP_VALIDATE(ep));
    be06:	f997 3007 	ldrsb.w	r3, [r7, #7]
    be0a:	2b00      	cmp	r3, #0
    be0c:	da04      	bge.n	be18 <nrf_usbd_episoout_size_get+0x1c>
    be0e:	79fb      	ldrb	r3, [r7, #7]
    be10:	f003 030f 	and.w	r3, r3, #15
    be14:	2b08      	cmp	r3, #8
    be16:	dd0f      	ble.n	be38 <nrf_usbd_episoout_size_get+0x3c>
    be18:	f997 3007 	ldrsb.w	r3, [r7, #7]
    be1c:	2b00      	cmp	r3, #0
    be1e:	db04      	blt.n	be2a <nrf_usbd_episoout_size_get+0x2e>
    be20:	79fb      	ldrb	r3, [r7, #7]
    be22:	f003 030f 	and.w	r3, r3, #15
    be26:	2b08      	cmp	r3, #8
    be28:	dd06      	ble.n	be38 <nrf_usbd_episoout_size_get+0x3c>
    be2a:	4b1a      	ldr	r3, [pc, #104]	; (be94 <nrf_usbd_episoout_size_get+0x98>)
    be2c:	4a1a      	ldr	r2, [pc, #104]	; (be98 <nrf_usbd_episoout_size_get+0x9c>)
    be2e:	f240 4182 	movw	r1, #1154	; 0x482
    be32:	481a      	ldr	r0, [pc, #104]	; (be9c <nrf_usbd_episoout_size_get+0xa0>)
    be34:	f7f4 fca2 	bl	77c <__assert_func>
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));
    be38:	f997 3007 	ldrsb.w	r3, [r7, #7]
    be3c:	2b00      	cmp	r3, #0
    be3e:	da06      	bge.n	be4e <nrf_usbd_episoout_size_get+0x52>
    be40:	4b17      	ldr	r3, [pc, #92]	; (bea0 <nrf_usbd_episoout_size_get+0xa4>)
    be42:	4a15      	ldr	r2, [pc, #84]	; (be98 <nrf_usbd_episoout_size_get+0x9c>)
    be44:	f240 4183 	movw	r1, #1155	; 0x483
    be48:	4814      	ldr	r0, [pc, #80]	; (be9c <nrf_usbd_episoout_size_get+0xa0>)
    be4a:	f7f4 fc97 	bl	77c <__assert_func>
    NRFX_ASSERT(NRF_USBD_EPISO_CHECK(ep));
    be4e:	79fb      	ldrb	r3, [r7, #7]
    be50:	f003 0308 	and.w	r3, r3, #8
    be54:	2b00      	cmp	r3, #0
    be56:	d106      	bne.n	be66 <nrf_usbd_episoout_size_get+0x6a>
    be58:	4b12      	ldr	r3, [pc, #72]	; (bea4 <nrf_usbd_episoout_size_get+0xa8>)
    be5a:	4a0f      	ldr	r2, [pc, #60]	; (be98 <nrf_usbd_episoout_size_get+0x9c>)
    be5c:	f240 4184 	movw	r1, #1156	; 0x484
    be60:	480e      	ldr	r0, [pc, #56]	; (be9c <nrf_usbd_episoout_size_get+0xa0>)
    be62:	f7f4 fc8b 	bl	77c <__assert_func>

    size_t size_isoout = NRF_USBD->SIZE.ISOOUT;
    be66:	4b10      	ldr	r3, [pc, #64]	; (bea8 <nrf_usbd_episoout_size_get+0xac>)
    be68:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    be6c:	60fb      	str	r3, [r7, #12]
    if (size_isoout == 0)
    be6e:	68fb      	ldr	r3, [r7, #12]
    be70:	2b00      	cmp	r3, #0
    be72:	d103      	bne.n	be7c <nrf_usbd_episoout_size_get+0x80>
    {
        size_isoout = NRF_USBD_EPISOOUT_NO_DATA;
    be74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    be78:	60fb      	str	r3, [r7, #12]
    be7a:	e006      	b.n	be8a <nrf_usbd_episoout_size_get+0x8e>
    }
    else if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) == (USBD_SIZE_ISOOUT_ZERO_ZeroData << USBD_SIZE_ISOOUT_ZERO_Pos))
    be7c:	68fb      	ldr	r3, [r7, #12]
    be7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    be82:	2b00      	cmp	r3, #0
    be84:	d001      	beq.n	be8a <nrf_usbd_episoout_size_get+0x8e>
    {
        size_isoout = 0;
    be86:	2300      	movs	r3, #0
    be88:	60fb      	str	r3, [r7, #12]
    }
    return size_isoout;
    be8a:	68fb      	ldr	r3, [r7, #12]
}
    be8c:	4618      	mov	r0, r3
    be8e:	3710      	adds	r7, #16
    be90:	46bd      	mov	sp, r7
    be92:	bd80      	pop	{r7, pc}
    be94:	0002d8f0 	.word	0x0002d8f0
    be98:	0002ec68 	.word	0x0002ec68
    be9c:	0002d84c 	.word	0x0002d84c
    bea0:	0002d9b4 	.word	0x0002d9b4
    bea4:	0002da7c 	.word	0x0002da7c
    bea8:	40027000 	.word	0x40027000

0000beac <nrf_usbd_epout_clear>:

void nrf_usbd_epout_clear(uint8_t ep)
{
    beac:	b580      	push	{r7, lr}
    beae:	b082      	sub	sp, #8
    beb0:	af00      	add	r7, sp, #0
    beb2:	4603      	mov	r3, r0
    beb4:	71fb      	strb	r3, [r7, #7]
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep) && (NRF_USBD_EP_NR_GET(ep) < NRFX_ARRAY_SIZE(NRF_USBD->SIZE.EPOUT)));
    beb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
    beba:	2b00      	cmp	r3, #0
    bebc:	db04      	blt.n	bec8 <nrf_usbd_epout_clear+0x1c>
    bebe:	79fb      	ldrb	r3, [r7, #7]
    bec0:	f003 0308 	and.w	r3, r3, #8
    bec4:	2b00      	cmp	r3, #0
    bec6:	d006      	beq.n	bed6 <nrf_usbd_epout_clear+0x2a>
    bec8:	4b0b      	ldr	r3, [pc, #44]	; (bef8 <nrf_usbd_epout_clear+0x4c>)
    beca:	4a0c      	ldr	r2, [pc, #48]	; (befc <nrf_usbd_epout_clear+0x50>)
    becc:	f240 4194 	movw	r1, #1172	; 0x494
    bed0:	480b      	ldr	r0, [pc, #44]	; (bf00 <nrf_usbd_epout_clear+0x54>)
    bed2:	f7f4 fc53 	bl	77c <__assert_func>
    NRF_USBD->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    bed6:	4a0b      	ldr	r2, [pc, #44]	; (bf04 <nrf_usbd_epout_clear+0x58>)
    bed8:	79fb      	ldrb	r3, [r7, #7]
    beda:	f003 030f 	and.w	r3, r3, #15
    bede:	f503 7394 	add.w	r3, r3, #296	; 0x128
    bee2:	2100      	movs	r1, #0
    bee4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  __ASM volatile ("isb 0xF":::"memory");
    bee8:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    beec:	f3bf 8f4f 	dsb	sy
    __ISB();
    __DSB();
}
    bef0:	bf00      	nop
    bef2:	3708      	adds	r7, #8
    bef4:	46bd      	mov	sp, r7
    bef6:	bd80      	pop	{r7, pc}
    bef8:	0002daa8 	.word	0x0002daa8
    befc:	0002ee9c 	.word	0x0002ee9c
    bf00:	0002d84c 	.word	0x0002d84c
    bf04:	40027000 	.word	0x40027000

0000bf08 <nrf_usbd_pullup_enable>:

void nrf_usbd_pullup_enable(void)
{
    bf08:	b480      	push	{r7}
    bf0a:	af00      	add	r7, sp, #0
    NRF_USBD->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    bf0c:	4b05      	ldr	r3, [pc, #20]	; (bf24 <nrf_usbd_pullup_enable+0x1c>)
    bf0e:	2201      	movs	r2, #1
    bf10:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
  __ASM volatile ("isb 0xF":::"memory");
    bf14:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    bf18:	f3bf 8f4f 	dsb	sy
    __ISB();
    __DSB();
}
    bf1c:	bf00      	nop
    bf1e:	46bd      	mov	sp, r7
    bf20:	bc80      	pop	{r7}
    bf22:	4770      	bx	lr
    bf24:	40027000 	.word	0x40027000

0000bf28 <nrf_usbd_pullup_disable>:

void nrf_usbd_pullup_disable(void)
{
    bf28:	b480      	push	{r7}
    bf2a:	af00      	add	r7, sp, #0
    NRF_USBD->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    bf2c:	4b05      	ldr	r3, [pc, #20]	; (bf44 <nrf_usbd_pullup_disable+0x1c>)
    bf2e:	2200      	movs	r2, #0
    bf30:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
  __ASM volatile ("isb 0xF":::"memory");
    bf34:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    bf38:	f3bf 8f4f 	dsb	sy
    __ISB();
    __DSB();
}
    bf3c:	bf00      	nop
    bf3e:	46bd      	mov	sp, r7
    bf40:	bc80      	pop	{r7}
    bf42:	4770      	bx	lr
    bf44:	40027000 	.word	0x40027000

0000bf48 <nrf_usbd_dpdmvalue_set>:
{
    return NRF_USBD->USBPULLUP == (USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos);
}

void nrf_usbd_dpdmvalue_set(nrf_usbd_dpdmvalue_t val)
{
    bf48:	b480      	push	{r7}
    bf4a:	b083      	sub	sp, #12
    bf4c:	af00      	add	r7, sp, #0
    bf4e:	4603      	mov	r3, r0
    bf50:	71fb      	strb	r3, [r7, #7]
    NRF_USBD->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    bf52:	4a04      	ldr	r2, [pc, #16]	; (bf64 <nrf_usbd_dpdmvalue_set+0x1c>)
    bf54:	79fb      	ldrb	r3, [r7, #7]
    bf56:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
    bf5a:	bf00      	nop
    bf5c:	370c      	adds	r7, #12
    bf5e:	46bd      	mov	sp, r7
    bf60:	bc80      	pop	{r7}
    bf62:	4770      	bx	lr
    bf64:	40027000 	.word	0x40027000

0000bf68 <nrf_usbd_ep_enable_check>:
    retval = ((NRF_USBD->DTOGGLE) & USBD_DTOGGLE_VALUE_Msk) >> USBD_DTOGGLE_VALUE_Pos;
    return (nrf_usbd_dtoggle_t)retval;
}

bool nrf_usbd_ep_enable_check(uint8_t ep)
{
    bf68:	b580      	push	{r7, lr}
    bf6a:	b084      	sub	sp, #16
    bf6c:	af00      	add	r7, sp, #0
    bf6e:	4603      	mov	r3, r0
    bf70:	71fb      	strb	r3, [r7, #7]
    NRFX_ASSERT(NRF_USBD_EP_VALIDATE(ep));
    bf72:	f997 3007 	ldrsb.w	r3, [r7, #7]
    bf76:	2b00      	cmp	r3, #0
    bf78:	da04      	bge.n	bf84 <nrf_usbd_ep_enable_check+0x1c>
    bf7a:	79fb      	ldrb	r3, [r7, #7]
    bf7c:	f003 030f 	and.w	r3, r3, #15
    bf80:	2b08      	cmp	r3, #8
    bf82:	dd0f      	ble.n	bfa4 <nrf_usbd_ep_enable_check+0x3c>
    bf84:	f997 3007 	ldrsb.w	r3, [r7, #7]
    bf88:	2b00      	cmp	r3, #0
    bf8a:	db04      	blt.n	bf96 <nrf_usbd_ep_enable_check+0x2e>
    bf8c:	79fb      	ldrb	r3, [r7, #7]
    bf8e:	f003 030f 	and.w	r3, r3, #15
    bf92:	2b08      	cmp	r3, #8
    bf94:	dd06      	ble.n	bfa4 <nrf_usbd_ep_enable_check+0x3c>
    bf96:	4b17      	ldr	r3, [pc, #92]	; (bff4 <nrf_usbd_ep_enable_check+0x8c>)
    bf98:	4a17      	ldr	r2, [pc, #92]	; (bff8 <nrf_usbd_ep_enable_check+0x90>)
    bf9a:	f44f 6199 	mov.w	r1, #1224	; 0x4c8
    bf9e:	4817      	ldr	r0, [pc, #92]	; (bffc <nrf_usbd_ep_enable_check+0x94>)
    bfa0:	f7f4 fbec 	bl	77c <__assert_func>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    bfa4:	79fb      	ldrb	r3, [r7, #7]
    bfa6:	f003 030f 	and.w	r3, r3, #15
    bfaa:	73fb      	strb	r3, [r7, #15]

    if (NRF_USBD_EPIN_CHECK(ep))
    bfac:	f997 3007 	ldrsb.w	r3, [r7, #7]
    bfb0:	2b00      	cmp	r3, #0
    bfb2:	da0d      	bge.n	bfd0 <nrf_usbd_ep_enable_check+0x68>
    {
        return 0 != (NRF_USBD->EPINEN & (1UL << epnr));
    bfb4:	4b12      	ldr	r3, [pc, #72]	; (c000 <nrf_usbd_ep_enable_check+0x98>)
    bfb6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    bfba:	7bfb      	ldrb	r3, [r7, #15]
    bfbc:	fa22 f303 	lsr.w	r3, r2, r3
    bfc0:	f003 0301 	and.w	r3, r3, #1
    bfc4:	2b00      	cmp	r3, #0
    bfc6:	bf14      	ite	ne
    bfc8:	2301      	movne	r3, #1
    bfca:	2300      	moveq	r3, #0
    bfcc:	b2db      	uxtb	r3, r3
    bfce:	e00c      	b.n	bfea <nrf_usbd_ep_enable_check+0x82>
    }
    else
    {
        return 0 != (NRF_USBD->EPOUTEN & (1UL << epnr));
    bfd0:	4b0b      	ldr	r3, [pc, #44]	; (c000 <nrf_usbd_ep_enable_check+0x98>)
    bfd2:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
    bfd6:	7bfb      	ldrb	r3, [r7, #15]
    bfd8:	fa22 f303 	lsr.w	r3, r2, r3
    bfdc:	f003 0301 	and.w	r3, r3, #1
    bfe0:	2b00      	cmp	r3, #0
    bfe2:	bf14      	ite	ne
    bfe4:	2301      	movne	r3, #1
    bfe6:	2300      	moveq	r3, #0
    bfe8:	b2db      	uxtb	r3, r3
    }
}
    bfea:	4618      	mov	r0, r3
    bfec:	3710      	adds	r7, #16
    bfee:	46bd      	mov	sp, r7
    bff0:	bd80      	pop	{r7, pc}
    bff2:	bf00      	nop
    bff4:	0002d8f0 	.word	0x0002d8f0
    bff8:	0002edb8 	.word	0x0002edb8
    bffc:	0002d84c 	.word	0x0002d84c
    c000:	40027000 	.word	0x40027000

0000c004 <nrf_usbd_ep_enable>:

void nrf_usbd_ep_enable(uint8_t ep)
{
    c004:	b580      	push	{r7, lr}
    c006:	b084      	sub	sp, #16
    c008:	af00      	add	r7, sp, #0
    c00a:	4603      	mov	r3, r0
    c00c:	71fb      	strb	r3, [r7, #7]
    NRFX_ASSERT(NRF_USBD_EP_VALIDATE(ep));
    c00e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c012:	2b00      	cmp	r3, #0
    c014:	da04      	bge.n	c020 <nrf_usbd_ep_enable+0x1c>
    c016:	79fb      	ldrb	r3, [r7, #7]
    c018:	f003 030f 	and.w	r3, r3, #15
    c01c:	2b08      	cmp	r3, #8
    c01e:	dd0f      	ble.n	c040 <nrf_usbd_ep_enable+0x3c>
    c020:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c024:	2b00      	cmp	r3, #0
    c026:	db04      	blt.n	c032 <nrf_usbd_ep_enable+0x2e>
    c028:	79fb      	ldrb	r3, [r7, #7]
    c02a:	f003 030f 	and.w	r3, r3, #15
    c02e:	2b08      	cmp	r3, #8
    c030:	dd06      	ble.n	c040 <nrf_usbd_ep_enable+0x3c>
    c032:	4b17      	ldr	r3, [pc, #92]	; (c090 <nrf_usbd_ep_enable+0x8c>)
    c034:	4a17      	ldr	r2, [pc, #92]	; (c094 <nrf_usbd_ep_enable+0x90>)
    c036:	f240 41d7 	movw	r1, #1239	; 0x4d7
    c03a:	4817      	ldr	r0, [pc, #92]	; (c098 <nrf_usbd_ep_enable+0x94>)
    c03c:	f7f4 fb9e 	bl	77c <__assert_func>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    c040:	79fb      	ldrb	r3, [r7, #7]
    c042:	f003 030f 	and.w	r3, r3, #15
    c046:	73fb      	strb	r3, [r7, #15]

    if (NRF_USBD_EPIN_CHECK(ep))
    c048:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c04c:	2b00      	cmp	r3, #0
    c04e:	da0b      	bge.n	c068 <nrf_usbd_ep_enable+0x64>
    {
        NRF_USBD->EPINEN |= 1UL << epnr;
    c050:	4b12      	ldr	r3, [pc, #72]	; (c09c <nrf_usbd_ep_enable+0x98>)
    c052:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    c056:	7bfb      	ldrb	r3, [r7, #15]
    c058:	2101      	movs	r1, #1
    c05a:	fa01 f303 	lsl.w	r3, r1, r3
    c05e:	490f      	ldr	r1, [pc, #60]	; (c09c <nrf_usbd_ep_enable+0x98>)
    c060:	4313      	orrs	r3, r2
    c062:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    c066:	e00a      	b.n	c07e <nrf_usbd_ep_enable+0x7a>
    }
    else
    {
        NRF_USBD->EPOUTEN |= 1UL << epnr;
    c068:	4b0c      	ldr	r3, [pc, #48]	; (c09c <nrf_usbd_ep_enable+0x98>)
    c06a:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
    c06e:	7bfb      	ldrb	r3, [r7, #15]
    c070:	2101      	movs	r1, #1
    c072:	fa01 f303 	lsl.w	r3, r1, r3
    c076:	4909      	ldr	r1, [pc, #36]	; (c09c <nrf_usbd_ep_enable+0x98>)
    c078:	4313      	orrs	r3, r2
    c07a:	f8c1 3514 	str.w	r3, [r1, #1300]	; 0x514
  __ASM volatile ("isb 0xF":::"memory");
    c07e:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    c082:	f3bf 8f4f 	dsb	sy
    }
    __ISB();
    __DSB();
}
    c086:	bf00      	nop
    c088:	3710      	adds	r7, #16
    c08a:	46bd      	mov	sp, r7
    c08c:	bd80      	pop	{r7, pc}
    c08e:	bf00      	nop
    c090:	0002d8f0 	.word	0x0002d8f0
    c094:	0002ee00 	.word	0x0002ee00
    c098:	0002d84c 	.word	0x0002d84c
    c09c:	40027000 	.word	0x40027000

0000c0a0 <nrf_usbd_ep_stall>:
    __ISB();
    __DSB();
}

void nrf_usbd_ep_stall(uint8_t ep)
{
    c0a0:	b580      	push	{r7, lr}
    c0a2:	b082      	sub	sp, #8
    c0a4:	af00      	add	r7, sp, #0
    c0a6:	4603      	mov	r3, r0
    c0a8:	71fb      	strb	r3, [r7, #7]
    NRFX_ASSERT(!NRF_USBD_EPISO_CHECK(ep));
    c0aa:	79fb      	ldrb	r3, [r7, #7]
    c0ac:	f003 0308 	and.w	r3, r3, #8
    c0b0:	2b00      	cmp	r3, #0
    c0b2:	d006      	beq.n	c0c2 <nrf_usbd_ep_stall+0x22>
    c0b4:	4b0a      	ldr	r3, [pc, #40]	; (c0e0 <nrf_usbd_ep_stall+0x40>)
    c0b6:	4a0b      	ldr	r2, [pc, #44]	; (c0e4 <nrf_usbd_ep_stall+0x44>)
    c0b8:	f240 5101 	movw	r1, #1281	; 0x501
    c0bc:	480a      	ldr	r0, [pc, #40]	; (c0e8 <nrf_usbd_ep_stall+0x48>)
    c0be:	f7f4 fb5d 	bl	77c <__assert_func>
    NRF_USBD->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    c0c2:	79fb      	ldrb	r3, [r7, #7]
    c0c4:	4a09      	ldr	r2, [pc, #36]	; (c0ec <nrf_usbd_ep_stall+0x4c>)
    c0c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    c0ca:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
  __ASM volatile ("isb 0xF":::"memory");
    c0ce:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    c0d2:	f3bf 8f4f 	dsb	sy
    __ISB();
    __DSB();
}
    c0d6:	bf00      	nop
    c0d8:	3708      	adds	r7, #8
    c0da:	46bd      	mov	sp, r7
    c0dc:	bd80      	pop	{r7, pc}
    c0de:	bf00      	nop
    c0e0:	0002db74 	.word	0x0002db74
    c0e4:	0002ee44 	.word	0x0002ee44
    c0e8:	0002d84c 	.word	0x0002d84c
    c0ec:	40027000 	.word	0x40027000

0000c0f0 <nrf_usbd_ep_unstall>:

void nrf_usbd_ep_unstall(uint8_t ep)
{
    c0f0:	b580      	push	{r7, lr}
    c0f2:	b082      	sub	sp, #8
    c0f4:	af00      	add	r7, sp, #0
    c0f6:	4603      	mov	r3, r0
    c0f8:	71fb      	strb	r3, [r7, #7]
    NRFX_ASSERT(!NRF_USBD_EPISO_CHECK(ep));
    c0fa:	79fb      	ldrb	r3, [r7, #7]
    c0fc:	f003 0308 	and.w	r3, r3, #8
    c100:	2b00      	cmp	r3, #0
    c102:	d006      	beq.n	c112 <nrf_usbd_ep_unstall+0x22>
    c104:	4b09      	ldr	r3, [pc, #36]	; (c12c <nrf_usbd_ep_unstall+0x3c>)
    c106:	4a0a      	ldr	r2, [pc, #40]	; (c130 <nrf_usbd_ep_unstall+0x40>)
    c108:	f240 5109 	movw	r1, #1289	; 0x509
    c10c:	4809      	ldr	r0, [pc, #36]	; (c134 <nrf_usbd_ep_unstall+0x44>)
    c10e:	f7f4 fb35 	bl	77c <__assert_func>
    NRF_USBD->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    c112:	4a09      	ldr	r2, [pc, #36]	; (c138 <nrf_usbd_ep_unstall+0x48>)
    c114:	79fb      	ldrb	r3, [r7, #7]
    c116:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
  __ASM volatile ("isb 0xF":::"memory");
    c11a:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    c11e:	f3bf 8f4f 	dsb	sy
    __ISB();
    __DSB();
}
    c122:	bf00      	nop
    c124:	3708      	adds	r7, #8
    c126:	46bd      	mov	sp, r7
    c128:	bd80      	pop	{r7, pc}
    c12a:	bf00      	nop
    c12c:	0002db74 	.word	0x0002db74
    c130:	0002ee58 	.word	0x0002ee58
    c134:	0002d84c 	.word	0x0002d84c
    c138:	40027000 	.word	0x40027000

0000c13c <nrf_usbd_isosplit_set>:

void nrf_usbd_isosplit_set(nrf_usbd_isosplit_t split)
{
    c13c:	b480      	push	{r7}
    c13e:	b083      	sub	sp, #12
    c140:	af00      	add	r7, sp, #0
    c142:	4603      	mov	r3, r0
    c144:	71fb      	strb	r3, [r7, #7]
    NRF_USBD->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    c146:	4a04      	ldr	r2, [pc, #16]	; (c158 <nrf_usbd_isosplit_set+0x1c>)
    c148:	79fb      	ldrb	r3, [r7, #7]
    c14a:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
    c14e:	bf00      	nop
    c150:	370c      	adds	r7, #12
    c152:	46bd      	mov	sp, r7
    c154:	bc80      	pop	{r7}
    c156:	4770      	bx	lr
    c158:	40027000 	.word	0x40027000

0000c15c <nrf_usbd_isosplit_get>:

nrf_usbd_isosplit_t nrf_usbd_isosplit_get(void)
{
    c15c:	b480      	push	{r7}
    c15e:	af00      	add	r7, sp, #0
    return (nrf_usbd_isosplit_t)
        (((NRF_USBD->ISOSPLIT) & USBD_ISOSPLIT_SPLIT_Msk) >> USBD_ISOSPLIT_SPLIT_Pos);
    c160:	4b03      	ldr	r3, [pc, #12]	; (c170 <nrf_usbd_isosplit_get+0x14>)
    c162:	f8d3 351c 	ldr.w	r3, [r3, #1308]	; 0x51c
    return (nrf_usbd_isosplit_t)
    c166:	b2db      	uxtb	r3, r3
}
    c168:	4618      	mov	r0, r3
    c16a:	46bd      	mov	sp, r7
    c16c:	bc80      	pop	{r7}
    c16e:	4770      	bx	lr
    c170:	40027000 	.word	0x40027000

0000c174 <nrf_usbd_framecntr_get>:

uint32_t nrf_usbd_framecntr_get(void)
{
    c174:	b480      	push	{r7}
    c176:	af00      	add	r7, sp, #0
    return NRF_USBD->FRAMECNTR;
    c178:	4b03      	ldr	r3, [pc, #12]	; (c188 <nrf_usbd_framecntr_get+0x14>)
    c17a:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
}
    c17e:	4618      	mov	r0, r3
    c180:	46bd      	mov	sp, r7
    c182:	bc80      	pop	{r7}
    c184:	4770      	bx	lr
    c186:	bf00      	nop
    c188:	40027000 	.word	0x40027000

0000c18c <nrf_usbd_lowpower_enable>:

void nrf_usbd_lowpower_enable(void)
{
    c18c:	b480      	push	{r7}
    c18e:	af00      	add	r7, sp, #0
    NRF_USBD->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    c190:	4b03      	ldr	r3, [pc, #12]	; (c1a0 <nrf_usbd_lowpower_enable+0x14>)
    c192:	2201      	movs	r2, #1
    c194:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
}
    c198:	bf00      	nop
    c19a:	46bd      	mov	sp, r7
    c19c:	bc80      	pop	{r7}
    c19e:	4770      	bx	lr
    c1a0:	40027000 	.word	0x40027000

0000c1a4 <nrf_usbd_lowpower_disable>:

void nrf_usbd_lowpower_disable(void)
{
    c1a4:	b480      	push	{r7}
    c1a6:	af00      	add	r7, sp, #0
    NRF_USBD->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    c1a8:	4b03      	ldr	r3, [pc, #12]	; (c1b8 <nrf_usbd_lowpower_disable+0x14>)
    c1aa:	2200      	movs	r2, #0
    c1ac:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
}
    c1b0:	bf00      	nop
    c1b2:	46bd      	mov	sp, r7
    c1b4:	bc80      	pop	{r7}
    c1b6:	4770      	bx	lr
    c1b8:	40027000 	.word	0x40027000

0000c1bc <nrf_usbd_lowpower_check>:

bool nrf_usbd_lowpower_check(void)
{
    c1bc:	b480      	push	{r7}
    c1be:	af00      	add	r7, sp, #0
    return (NRF_USBD->LOWPOWER != (USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos));
    c1c0:	4b05      	ldr	r3, [pc, #20]	; (c1d8 <nrf_usbd_lowpower_check+0x1c>)
    c1c2:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
    c1c6:	2b00      	cmp	r3, #0
    c1c8:	bf14      	ite	ne
    c1ca:	2301      	movne	r3, #1
    c1cc:	2300      	moveq	r3, #0
    c1ce:	b2db      	uxtb	r3, r3
}
    c1d0:	4618      	mov	r0, r3
    c1d2:	46bd      	mov	sp, r7
    c1d4:	bc80      	pop	{r7}
    c1d6:	4770      	bx	lr
    c1d8:	40027000 	.word	0x40027000

0000c1dc <nrf_usbd_isoinconfig_set>:

void nrf_usbd_isoinconfig_set(nrf_usbd_isoinconfig_t config)
{
    c1dc:	b480      	push	{r7}
    c1de:	b083      	sub	sp, #12
    c1e0:	af00      	add	r7, sp, #0
    c1e2:	4603      	mov	r3, r0
    c1e4:	71fb      	strb	r3, [r7, #7]
    NRF_USBD->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    c1e6:	4a04      	ldr	r2, [pc, #16]	; (c1f8 <nrf_usbd_isoinconfig_set+0x1c>)
    c1e8:	79fb      	ldrb	r3, [r7, #7]
    c1ea:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
}
    c1ee:	bf00      	nop
    c1f0:	370c      	adds	r7, #12
    c1f2:	46bd      	mov	sp, r7
    c1f4:	bc80      	pop	{r7}
    c1f6:	4770      	bx	lr
    c1f8:	40027000 	.word	0x40027000

0000c1fc <nrf_usbd_ep_easydma_set>:
    return (nrf_usbd_isoinconfig_t)
        (((NRF_USBD->ISOINCONFIG) & USBD_ISOINCONFIG_RESPONSE_Msk) >> USBD_ISOINCONFIG_RESPONSE_Pos);
}

void nrf_usbd_ep_easydma_set(uint8_t ep, uint32_t ptr, uint32_t maxcnt)
{
    c1fc:	b580      	push	{r7, lr}
    c1fe:	b086      	sub	sp, #24
    c200:	af00      	add	r7, sp, #0
    c202:	4603      	mov	r3, r0
    c204:	60b9      	str	r1, [r7, #8]
    c206:	607a      	str	r2, [r7, #4]
    c208:	73fb      	strb	r3, [r7, #15]
    if (NRF_USBD_EPIN_CHECK(ep))
    c20a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    c20e:	2b00      	cmp	r3, #0
    c210:	da32      	bge.n	c278 <nrf_usbd_ep_easydma_set+0x7c>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    c212:	7bfb      	ldrb	r3, [r7, #15]
    c214:	f003 0308 	and.w	r3, r3, #8
    c218:	2b00      	cmp	r3, #0
    c21a:	d008      	beq.n	c22e <nrf_usbd_ep_easydma_set+0x32>
        {
            NRF_USBD->ISOIN.PTR    = ptr;
    c21c:	4a31      	ldr	r2, [pc, #196]	; (c2e4 <nrf_usbd_ep_easydma_set+0xe8>)
    c21e:	68bb      	ldr	r3, [r7, #8]
    c220:	f8c2 36a0 	str.w	r3, [r2, #1696]	; 0x6a0
            NRF_USBD->ISOIN.MAXCNT = maxcnt;
    c224:	4a2f      	ldr	r2, [pc, #188]	; (c2e4 <nrf_usbd_ep_easydma_set+0xe8>)
    c226:	687b      	ldr	r3, [r7, #4]
    c228:	f8c2 36a4 	str.w	r3, [r2, #1700]	; 0x6a4
            NRFX_ASSERT(epnr < NRFX_ARRAY_SIZE(NRF_USBD->EPOUT));
            NRF_USBD->EPOUT[epnr].PTR    = ptr;
            NRF_USBD->EPOUT[epnr].MAXCNT = maxcnt;
        }
    }
}
    c22c:	e056      	b.n	c2dc <nrf_usbd_ep_easydma_set+0xe0>
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    c22e:	7bfb      	ldrb	r3, [r7, #15]
    c230:	f003 030f 	and.w	r3, r3, #15
    c234:	75fb      	strb	r3, [r7, #23]
            NRFX_ASSERT(epnr < NRFX_ARRAY_SIZE(NRF_USBD->EPIN));
    c236:	7dfb      	ldrb	r3, [r7, #23]
    c238:	2b07      	cmp	r3, #7
    c23a:	d906      	bls.n	c24a <nrf_usbd_ep_easydma_set+0x4e>
    c23c:	4b2a      	ldr	r3, [pc, #168]	; (c2e8 <nrf_usbd_ep_easydma_set+0xec>)
    c23e:	4a2b      	ldr	r2, [pc, #172]	; (c2ec <nrf_usbd_ep_easydma_set+0xf0>)
    c240:	f240 5145 	movw	r1, #1349	; 0x545
    c244:	482a      	ldr	r0, [pc, #168]	; (c2f0 <nrf_usbd_ep_easydma_set+0xf4>)
    c246:	f7f4 fa99 	bl	77c <__assert_func>
            NRF_USBD->EPIN[epnr].PTR    = ptr;
    c24a:	4926      	ldr	r1, [pc, #152]	; (c2e4 <nrf_usbd_ep_easydma_set+0xe8>)
    c24c:	7dfa      	ldrb	r2, [r7, #23]
    c24e:	4613      	mov	r3, r2
    c250:	009b      	lsls	r3, r3, #2
    c252:	4413      	add	r3, r2
    c254:	009b      	lsls	r3, r3, #2
    c256:	440b      	add	r3, r1
    c258:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
    c25c:	68ba      	ldr	r2, [r7, #8]
    c25e:	601a      	str	r2, [r3, #0]
            NRF_USBD->EPIN[epnr].MAXCNT = maxcnt;
    c260:	4920      	ldr	r1, [pc, #128]	; (c2e4 <nrf_usbd_ep_easydma_set+0xe8>)
    c262:	7dfa      	ldrb	r2, [r7, #23]
    c264:	4613      	mov	r3, r2
    c266:	009b      	lsls	r3, r3, #2
    c268:	4413      	add	r3, r2
    c26a:	009b      	lsls	r3, r3, #2
    c26c:	440b      	add	r3, r1
    c26e:	f203 6304 	addw	r3, r3, #1540	; 0x604
    c272:	687a      	ldr	r2, [r7, #4]
    c274:	601a      	str	r2, [r3, #0]
}
    c276:	e031      	b.n	c2dc <nrf_usbd_ep_easydma_set+0xe0>
        if (NRF_USBD_EPISO_CHECK(ep))
    c278:	7bfb      	ldrb	r3, [r7, #15]
    c27a:	f003 0308 	and.w	r3, r3, #8
    c27e:	2b00      	cmp	r3, #0
    c280:	d008      	beq.n	c294 <nrf_usbd_ep_easydma_set+0x98>
            NRF_USBD->ISOOUT.PTR    = ptr;
    c282:	4a18      	ldr	r2, [pc, #96]	; (c2e4 <nrf_usbd_ep_easydma_set+0xe8>)
    c284:	68bb      	ldr	r3, [r7, #8]
    c286:	f8c2 37a0 	str.w	r3, [r2, #1952]	; 0x7a0
            NRF_USBD->ISOOUT.MAXCNT = maxcnt;
    c28a:	4a16      	ldr	r2, [pc, #88]	; (c2e4 <nrf_usbd_ep_easydma_set+0xe8>)
    c28c:	687b      	ldr	r3, [r7, #4]
    c28e:	f8c2 37a4 	str.w	r3, [r2, #1956]	; 0x7a4
}
    c292:	e023      	b.n	c2dc <nrf_usbd_ep_easydma_set+0xe0>
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    c294:	7bfb      	ldrb	r3, [r7, #15]
    c296:	f003 030f 	and.w	r3, r3, #15
    c29a:	75bb      	strb	r3, [r7, #22]
            NRFX_ASSERT(epnr < NRFX_ARRAY_SIZE(NRF_USBD->EPOUT));
    c29c:	7dbb      	ldrb	r3, [r7, #22]
    c29e:	2b07      	cmp	r3, #7
    c2a0:	d906      	bls.n	c2b0 <nrf_usbd_ep_easydma_set+0xb4>
    c2a2:	4b14      	ldr	r3, [pc, #80]	; (c2f4 <nrf_usbd_ep_easydma_set+0xf8>)
    c2a4:	4a11      	ldr	r2, [pc, #68]	; (c2ec <nrf_usbd_ep_easydma_set+0xf0>)
    c2a6:	f240 5154 	movw	r1, #1364	; 0x554
    c2aa:	4811      	ldr	r0, [pc, #68]	; (c2f0 <nrf_usbd_ep_easydma_set+0xf4>)
    c2ac:	f7f4 fa66 	bl	77c <__assert_func>
            NRF_USBD->EPOUT[epnr].PTR    = ptr;
    c2b0:	490c      	ldr	r1, [pc, #48]	; (c2e4 <nrf_usbd_ep_easydma_set+0xe8>)
    c2b2:	7dba      	ldrb	r2, [r7, #22]
    c2b4:	4613      	mov	r3, r2
    c2b6:	009b      	lsls	r3, r3, #2
    c2b8:	4413      	add	r3, r2
    c2ba:	009b      	lsls	r3, r3, #2
    c2bc:	440b      	add	r3, r1
    c2be:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
    c2c2:	68ba      	ldr	r2, [r7, #8]
    c2c4:	601a      	str	r2, [r3, #0]
            NRF_USBD->EPOUT[epnr].MAXCNT = maxcnt;
    c2c6:	4907      	ldr	r1, [pc, #28]	; (c2e4 <nrf_usbd_ep_easydma_set+0xe8>)
    c2c8:	7dba      	ldrb	r2, [r7, #22]
    c2ca:	4613      	mov	r3, r2
    c2cc:	009b      	lsls	r3, r3, #2
    c2ce:	4413      	add	r3, r2
    c2d0:	009b      	lsls	r3, r3, #2
    c2d2:	440b      	add	r3, r1
    c2d4:	f203 7304 	addw	r3, r3, #1796	; 0x704
    c2d8:	687a      	ldr	r2, [r7, #4]
    c2da:	601a      	str	r2, [r3, #0]
}
    c2dc:	bf00      	nop
    c2de:	3718      	adds	r7, #24
    c2e0:	46bd      	mov	sp, r7
    c2e2:	bd80      	pop	{r7, pc}
    c2e4:	40027000 	.word	0x40027000
    c2e8:	0002dba0 	.word	0x0002dba0
    c2ec:	0002ecac 	.word	0x0002ecac
    c2f0:	0002d84c 	.word	0x0002d84c
    c2f4:	0002dc0c 	.word	0x0002dc0c

0000c2f8 <nrfx_usbd_errata_type_52840>:
 */
#define NRFX_USBD_ERRATA_ENABLE 1
#endif

static inline bool nrfx_usbd_errata_type_52840(void)
{
    c2f8:	b480      	push	{r7}
    c2fa:	af00      	add	r7, sp, #0
    return (*(uint32_t *)0x10000130UL == 0x8UL);
    c2fc:	4b05      	ldr	r3, [pc, #20]	; (c314 <nrfx_usbd_errata_type_52840+0x1c>)
    c2fe:	681b      	ldr	r3, [r3, #0]
    c300:	2b08      	cmp	r3, #8
    c302:	bf0c      	ite	eq
    c304:	2301      	moveq	r3, #1
    c306:	2300      	movne	r3, #0
    c308:	b2db      	uxtb	r3, r3
}
    c30a:	4618      	mov	r0, r3
    c30c:	46bd      	mov	sp, r7
    c30e:	bc80      	pop	{r7}
    c310:	4770      	bx	lr
    c312:	bf00      	nop
    c314:	10000130 	.word	0x10000130

0000c318 <nrfx_usbd_errata_type_52840_eng_b>:
{
    return nrfx_usbd_errata_type_52840();
}

static inline bool nrfx_usbd_errata_type_52840_eng_b(void)
{
    c318:	b580      	push	{r7, lr}
    c31a:	af00      	add	r7, sp, #0
    return (nrfx_usbd_errata_type_52840() && (*(uint32_t *)0x10000134UL >= 0x1UL));
    c31c:	f7ff ffec 	bl	c2f8 <nrfx_usbd_errata_type_52840>
    c320:	4603      	mov	r3, r0
    c322:	2b00      	cmp	r3, #0
    c324:	d005      	beq.n	c332 <nrfx_usbd_errata_type_52840_eng_b+0x1a>
    c326:	4b06      	ldr	r3, [pc, #24]	; (c340 <nrfx_usbd_errata_type_52840_eng_b+0x28>)
    c328:	681b      	ldr	r3, [r3, #0]
    c32a:	2b00      	cmp	r3, #0
    c32c:	d001      	beq.n	c332 <nrfx_usbd_errata_type_52840_eng_b+0x1a>
    c32e:	2301      	movs	r3, #1
    c330:	e000      	b.n	c334 <nrfx_usbd_errata_type_52840_eng_b+0x1c>
    c332:	2300      	movs	r3, #0
    c334:	f003 0301 	and.w	r3, r3, #1
    c338:	b2db      	uxtb	r3, r3
}
    c33a:	4618      	mov	r0, r3
    c33c:	bd80      	pop	{r7, pc}
    c33e:	bf00      	nop
    c340:	10000134 	.word	0x10000134

0000c344 <nrfx_usbd_ep_to_endevent>:
 * @return Connected endpoint event code.
 *
 * Marker to delete when not required anymore: >> NRFX_USBD_ERRATA_ENABLE <<.
 */
static inline nrf_usbd_event_t nrfx_usbd_ep_to_endevent(nrfx_usbd_ep_t ep)
{
    c344:	b580      	push	{r7, lr}
    c346:	b082      	sub	sp, #8
    c348:	af00      	add	r7, sp, #0
    c34a:	4603      	mov	r3, r0
    c34c:	71fb      	strb	r3, [r7, #7]
    NRFX_USBD_ASSERT_EP_VALID(ep);
    c34e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c352:	2b00      	cmp	r3, #0
    c354:	da04      	bge.n	c360 <nrfx_usbd_ep_to_endevent+0x1c>
    c356:	79fb      	ldrb	r3, [r7, #7]
    c358:	f003 030f 	and.w	r3, r3, #15
    c35c:	2b08      	cmp	r3, #8
    c35e:	dd0f      	ble.n	c380 <nrfx_usbd_ep_to_endevent+0x3c>
    c360:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c364:	2b00      	cmp	r3, #0
    c366:	db04      	blt.n	c372 <nrfx_usbd_ep_to_endevent+0x2e>
    c368:	79fb      	ldrb	r3, [r7, #7]
    c36a:	f003 030f 	and.w	r3, r3, #15
    c36e:	2b08      	cmp	r3, #8
    c370:	dd06      	ble.n	c380 <nrfx_usbd_ep_to_endevent+0x3c>
    c372:	4b0c      	ldr	r3, [pc, #48]	; (c3a4 <nrfx_usbd_ep_to_endevent+0x60>)
    c374:	4a0c      	ldr	r2, [pc, #48]	; (c3a8 <nrfx_usbd_ep_to_endevent+0x64>)
    c376:	f44f 71b9 	mov.w	r1, #370	; 0x172
    c37a:	480c      	ldr	r0, [pc, #48]	; (c3ac <nrfx_usbd_ep_to_endevent+0x68>)
    c37c:	f7f4 f9fe 	bl	77c <__assert_func>
        NRF_USBD_EVENT_ENDEPOUT6,
        NRF_USBD_EVENT_ENDEPOUT7,
        NRF_USBD_EVENT_ENDISOOUT0
    };

    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    c380:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c384:	2b00      	cmp	r3, #0
    c386:	da01      	bge.n	c38c <nrfx_usbd_ep_to_endevent+0x48>
    c388:	4a09      	ldr	r2, [pc, #36]	; (c3b0 <nrfx_usbd_ep_to_endevent+0x6c>)
    c38a:	e000      	b.n	c38e <nrfx_usbd_ep_to_endevent+0x4a>
    c38c:	4a09      	ldr	r2, [pc, #36]	; (c3b4 <nrfx_usbd_ep_to_endevent+0x70>)
    c38e:	79fb      	ldrb	r3, [r7, #7]
    c390:	f003 030f 	and.w	r3, r3, #15
    c394:	005b      	lsls	r3, r3, #1
    c396:	4413      	add	r3, r2
    c398:	881b      	ldrh	r3, [r3, #0]
}
    c39a:	4618      	mov	r0, r3
    c39c:	3708      	adds	r7, #8
    c39e:	46bd      	mov	sp, r7
    c3a0:	bd80      	pop	{r7, pc}
    c3a2:	bf00      	nop
    c3a4:	0002dc7c 	.word	0x0002dc7c
    c3a8:	0002ecd4 	.word	0x0002ecd4
    c3ac:	0002dd40 	.word	0x0002dd40
    c3b0:	0002ecf0 	.word	0x0002ecf0
    c3b4:	0002ed04 	.word	0x0002ed04

0000c3b8 <nrfx_usbd_ep_to_int>:
 *
 * @return Interrupt mask related to the EasyDMA transfer end for the
 *         chosen endpoint.
 */
static inline uint32_t nrfx_usbd_ep_to_int(nrfx_usbd_ep_t ep)
{
    c3b8:	b580      	push	{r7, lr}
    c3ba:	b082      	sub	sp, #8
    c3bc:	af00      	add	r7, sp, #0
    c3be:	4603      	mov	r3, r0
    c3c0:	71fb      	strb	r3, [r7, #7]
    NRFX_USBD_ASSERT_EP_VALID(ep);
    c3c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c3c6:	2b00      	cmp	r3, #0
    c3c8:	da04      	bge.n	c3d4 <nrfx_usbd_ep_to_int+0x1c>
    c3ca:	79fb      	ldrb	r3, [r7, #7]
    c3cc:	f003 030f 	and.w	r3, r3, #15
    c3d0:	2b08      	cmp	r3, #8
    c3d2:	dd0f      	ble.n	c3f4 <nrfx_usbd_ep_to_int+0x3c>
    c3d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c3d8:	2b00      	cmp	r3, #0
    c3da:	db04      	blt.n	c3e6 <nrfx_usbd_ep_to_int+0x2e>
    c3dc:	79fb      	ldrb	r3, [r7, #7]
    c3de:	f003 030f 	and.w	r3, r3, #15
    c3e2:	2b08      	cmp	r3, #8
    c3e4:	dd06      	ble.n	c3f4 <nrfx_usbd_ep_to_int+0x3c>
    c3e6:	4b0d      	ldr	r3, [pc, #52]	; (c41c <nrfx_usbd_ep_to_int+0x64>)
    c3e8:	4a0d      	ldr	r2, [pc, #52]	; (c420 <nrfx_usbd_ep_to_int+0x68>)
    c3ea:	f240 119b 	movw	r1, #411	; 0x19b
    c3ee:	480d      	ldr	r0, [pc, #52]	; (c424 <nrfx_usbd_ep_to_int+0x6c>)
    c3f0:	f7f4 f9c4 	bl	77c <__assert_func>
        USBD_INTEN_ENDEPOUT6_Pos,
        USBD_INTEN_ENDEPOUT7_Pos,
        USBD_INTEN_ENDISOOUT_Pos
    };

    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    c3f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c3f8:	2b00      	cmp	r3, #0
    c3fa:	da01      	bge.n	c400 <nrfx_usbd_ep_to_int+0x48>
    c3fc:	4a0a      	ldr	r2, [pc, #40]	; (c428 <nrfx_usbd_ep_to_int+0x70>)
    c3fe:	e000      	b.n	c402 <nrfx_usbd_ep_to_int+0x4a>
    c400:	4a0a      	ldr	r2, [pc, #40]	; (c42c <nrfx_usbd_ep_to_int+0x74>)
    c402:	79fb      	ldrb	r3, [r7, #7]
    c404:	f003 030f 	and.w	r3, r3, #15
    c408:	4413      	add	r3, r2
    c40a:	781b      	ldrb	r3, [r3, #0]
    c40c:	461a      	mov	r2, r3
    c40e:	2301      	movs	r3, #1
    c410:	4093      	lsls	r3, r2
}
    c412:	4618      	mov	r0, r3
    c414:	3708      	adds	r7, #8
    c416:	46bd      	mov	sp, r7
    c418:	bd80      	pop	{r7, pc}
    c41a:	bf00      	nop
    c41c:	0002dc7c 	.word	0x0002dc7c
    c420:	0002edd4 	.word	0x0002edd4
    c424:	0002dd40 	.word	0x0002dd40
    c428:	0002ede8 	.word	0x0002ede8
    c42c:	0002edf4 	.word	0x0002edf4

0000c430 <nrfx_usbd_consumer>:
bool nrfx_usbd_consumer(
    nrfx_usbd_ep_transfer_t * p_next,
    void * p_context,
    size_t ep_size,
    size_t data_size)
{
    c430:	b580      	push	{r7, lr}
    c432:	b086      	sub	sp, #24
    c434:	af00      	add	r7, sp, #0
    c436:	60f8      	str	r0, [r7, #12]
    c438:	60b9      	str	r1, [r7, #8]
    c43a:	607a      	str	r2, [r7, #4]
    c43c:	603b      	str	r3, [r7, #0]
    nrfx_usbd_transfer_t * p_transfer = p_context;
    c43e:	68bb      	ldr	r3, [r7, #8]
    c440:	613b      	str	r3, [r7, #16]
    NRFX_ASSERT(ep_size >= data_size);
    c442:	687a      	ldr	r2, [r7, #4]
    c444:	683b      	ldr	r3, [r7, #0]
    c446:	429a      	cmp	r2, r3
    c448:	d206      	bcs.n	c458 <nrfx_usbd_consumer+0x28>
    c44a:	4b27      	ldr	r3, [pc, #156]	; (c4e8 <nrfx_usbd_consumer+0xb8>)
    c44c:	4a27      	ldr	r2, [pc, #156]	; (c4ec <nrfx_usbd_consumer+0xbc>)
    c44e:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    c452:	4827      	ldr	r0, [pc, #156]	; (c4f0 <nrfx_usbd_consumer+0xc0>)
    c454:	f7f4 f992 	bl	77c <__assert_func>
    NRFX_ASSERT((p_transfer->p_data.rx == NULL) ||
    c458:	693b      	ldr	r3, [r7, #16]
    c45a:	681b      	ldr	r3, [r3, #0]
    c45c:	2b00      	cmp	r3, #0
    c45e:	d00e      	beq.n	c47e <nrfx_usbd_consumer+0x4e>
    c460:	693b      	ldr	r3, [r7, #16]
    c462:	681b      	ldr	r3, [r3, #0]
    c464:	4618      	mov	r0, r3
    c466:	f00f fee6 	bl	1c236 <nrfx_is_in_ram>
    c46a:	4603      	mov	r3, r0
    c46c:	2b00      	cmp	r3, #0
    c46e:	d106      	bne.n	c47e <nrfx_usbd_consumer+0x4e>
    c470:	4b20      	ldr	r3, [pc, #128]	; (c4f4 <nrfx_usbd_consumer+0xc4>)
    c472:	4a1e      	ldr	r2, [pc, #120]	; (c4ec <nrfx_usbd_consumer+0xbc>)
    c474:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
    c478:	481d      	ldr	r0, [pc, #116]	; (c4f0 <nrfx_usbd_consumer+0xc0>)
    c47a:	f7f4 f97f 	bl	77c <__assert_func>
        nrfx_is_in_ram(p_transfer->p_data.rx));

    size_t size = p_transfer->size;
    c47e:	693b      	ldr	r3, [r7, #16]
    c480:	685b      	ldr	r3, [r3, #4]
    c482:	617b      	str	r3, [r7, #20]
    if (size < data_size)
    c484:	697a      	ldr	r2, [r7, #20]
    c486:	683b      	ldr	r3, [r7, #0]
    c488:	429a      	cmp	r2, r3
    c48a:	d207      	bcs.n	c49c <nrfx_usbd_consumer+0x6c>
    {
        NRFX_LOG_DEBUG("consumer: buffer too small: r: %u, l: %u", data_size, size);
        /* Buffer size to small */
        p_next->size = 0;
    c48c:	68fb      	ldr	r3, [r7, #12]
    c48e:	2200      	movs	r2, #0
    c490:	605a      	str	r2, [r3, #4]
        p_next->p_data = p_transfer->p_data;
    c492:	68fb      	ldr	r3, [r7, #12]
    c494:	693a      	ldr	r2, [r7, #16]
    c496:	6812      	ldr	r2, [r2, #0]
    c498:	601a      	str	r2, [r3, #0]
    c49a:	e013      	b.n	c4c4 <nrfx_usbd_consumer+0x94>
    }
    else
    {
        p_next->size = data_size;
    c49c:	68fb      	ldr	r3, [r7, #12]
    c49e:	683a      	ldr	r2, [r7, #0]
    c4a0:	605a      	str	r2, [r3, #4]
        p_next->p_data = p_transfer->p_data;
    c4a2:	68fb      	ldr	r3, [r7, #12]
    c4a4:	693a      	ldr	r2, [r7, #16]
    c4a6:	6812      	ldr	r2, [r2, #0]
    c4a8:	601a      	str	r2, [r3, #0]
        size -= data_size;
    c4aa:	697a      	ldr	r2, [r7, #20]
    c4ac:	683b      	ldr	r3, [r7, #0]
    c4ae:	1ad3      	subs	r3, r2, r3
    c4b0:	617b      	str	r3, [r7, #20]
        p_transfer->size = size;
    c4b2:	693b      	ldr	r3, [r7, #16]
    c4b4:	697a      	ldr	r2, [r7, #20]
    c4b6:	605a      	str	r2, [r3, #4]
        p_transfer->p_data.addr += data_size;
    c4b8:	693b      	ldr	r3, [r7, #16]
    c4ba:	681a      	ldr	r2, [r3, #0]
    c4bc:	683b      	ldr	r3, [r7, #0]
    c4be:	441a      	add	r2, r3
    c4c0:	693b      	ldr	r3, [r7, #16]
    c4c2:	601a      	str	r2, [r3, #0]
    }
    return (ep_size == data_size) && (size != 0);
    c4c4:	687a      	ldr	r2, [r7, #4]
    c4c6:	683b      	ldr	r3, [r7, #0]
    c4c8:	429a      	cmp	r2, r3
    c4ca:	d104      	bne.n	c4d6 <nrfx_usbd_consumer+0xa6>
    c4cc:	697b      	ldr	r3, [r7, #20]
    c4ce:	2b00      	cmp	r3, #0
    c4d0:	d001      	beq.n	c4d6 <nrfx_usbd_consumer+0xa6>
    c4d2:	2301      	movs	r3, #1
    c4d4:	e000      	b.n	c4d8 <nrfx_usbd_consumer+0xa8>
    c4d6:	2300      	movs	r3, #0
    c4d8:	f003 0301 	and.w	r3, r3, #1
    c4dc:	b2db      	uxtb	r3, r3
}
    c4de:	4618      	mov	r0, r3
    c4e0:	3718      	adds	r7, #24
    c4e2:	46bd      	mov	sp, r7
    c4e4:	bd80      	pop	{r7, pc}
    c4e6:	bf00      	nop
    c4e8:	0002ddac 	.word	0x0002ddac
    c4ec:	0002eb5c 	.word	0x0002eb5c
    c4f0:	0002dd40 	.word	0x0002dd40
    c4f4:	0002ddc4 	.word	0x0002ddc4

0000c4f8 <nrfx_usbd_feeder_ram>:
 */
bool nrfx_usbd_feeder_ram(
    nrfx_usbd_ep_transfer_t * p_next,
    void * p_context,
    size_t ep_size)
{
    c4f8:	b580      	push	{r7, lr}
    c4fa:	b086      	sub	sp, #24
    c4fc:	af00      	add	r7, sp, #0
    c4fe:	60f8      	str	r0, [r7, #12]
    c500:	60b9      	str	r1, [r7, #8]
    c502:	607a      	str	r2, [r7, #4]
    nrfx_usbd_transfer_t * p_transfer = p_context;
    c504:	68bb      	ldr	r3, [r7, #8]
    c506:	613b      	str	r3, [r7, #16]
    NRFX_ASSERT(nrfx_is_in_ram(p_transfer->p_data.tx));
    c508:	693b      	ldr	r3, [r7, #16]
    c50a:	681b      	ldr	r3, [r3, #0]
    c50c:	4618      	mov	r0, r3
    c50e:	f00f fe92 	bl	1c236 <nrfx_is_in_ram>
    c512:	4603      	mov	r3, r0
    c514:	2b00      	cmp	r3, #0
    c516:	d106      	bne.n	c526 <nrfx_usbd_feeder_ram+0x2e>
    c518:	4b16      	ldr	r3, [pc, #88]	; (c574 <nrfx_usbd_feeder_ram+0x7c>)
    c51a:	4a17      	ldr	r2, [pc, #92]	; (c578 <nrfx_usbd_feeder_ram+0x80>)
    c51c:	f240 11f9 	movw	r1, #505	; 0x1f9
    c520:	4816      	ldr	r0, [pc, #88]	; (c57c <nrfx_usbd_feeder_ram+0x84>)
    c522:	f7f4 f92b 	bl	77c <__assert_func>

    size_t tx_size = p_transfer->size;
    c526:	693b      	ldr	r3, [r7, #16]
    c528:	685b      	ldr	r3, [r3, #4]
    c52a:	617b      	str	r3, [r7, #20]
    if (tx_size > ep_size)
    c52c:	697a      	ldr	r2, [r7, #20]
    c52e:	687b      	ldr	r3, [r7, #4]
    c530:	429a      	cmp	r2, r3
    c532:	d901      	bls.n	c538 <nrfx_usbd_feeder_ram+0x40>
    {
        tx_size = ep_size;
    c534:	687b      	ldr	r3, [r7, #4]
    c536:	617b      	str	r3, [r7, #20]
    }

    p_next->p_data = p_transfer->p_data;
    c538:	68fb      	ldr	r3, [r7, #12]
    c53a:	693a      	ldr	r2, [r7, #16]
    c53c:	6812      	ldr	r2, [r2, #0]
    c53e:	601a      	str	r2, [r3, #0]
    p_next->size = tx_size;
    c540:	68fb      	ldr	r3, [r7, #12]
    c542:	697a      	ldr	r2, [r7, #20]
    c544:	605a      	str	r2, [r3, #4]

    p_transfer->size -= tx_size;
    c546:	693b      	ldr	r3, [r7, #16]
    c548:	685a      	ldr	r2, [r3, #4]
    c54a:	697b      	ldr	r3, [r7, #20]
    c54c:	1ad2      	subs	r2, r2, r3
    c54e:	693b      	ldr	r3, [r7, #16]
    c550:	605a      	str	r2, [r3, #4]
    p_transfer->p_data.addr += tx_size;
    c552:	693b      	ldr	r3, [r7, #16]
    c554:	681a      	ldr	r2, [r3, #0]
    c556:	697b      	ldr	r3, [r7, #20]
    c558:	441a      	add	r2, r3
    c55a:	693b      	ldr	r3, [r7, #16]
    c55c:	601a      	str	r2, [r3, #0]

    return (p_transfer->size != 0);
    c55e:	693b      	ldr	r3, [r7, #16]
    c560:	685b      	ldr	r3, [r3, #4]
    c562:	2b00      	cmp	r3, #0
    c564:	bf14      	ite	ne
    c566:	2301      	movne	r3, #1
    c568:	2300      	moveq	r3, #0
    c56a:	b2db      	uxtb	r3, r3
}
    c56c:	4618      	mov	r0, r3
    c56e:	3718      	adds	r7, #24
    c570:	46bd      	mov	sp, r7
    c572:	bd80      	pop	{r7, pc}
    c574:	0002de14 	.word	0x0002de14
    c578:	0002eb70 	.word	0x0002eb70
    c57c:	0002dd40 	.word	0x0002dd40

0000c580 <nrfx_usbd_feeder_ram_zlp>:
 */
bool nrfx_usbd_feeder_ram_zlp(
    nrfx_usbd_ep_transfer_t * p_next,
    void * p_context,
    size_t ep_size)
{
    c580:	b580      	push	{r7, lr}
    c582:	b086      	sub	sp, #24
    c584:	af00      	add	r7, sp, #0
    c586:	60f8      	str	r0, [r7, #12]
    c588:	60b9      	str	r1, [r7, #8]
    c58a:	607a      	str	r2, [r7, #4]
    nrfx_usbd_transfer_t * p_transfer = p_context;
    c58c:	68bb      	ldr	r3, [r7, #8]
    c58e:	613b      	str	r3, [r7, #16]
    NRFX_ASSERT(nrfx_is_in_ram(p_transfer->p_data.tx));
    c590:	693b      	ldr	r3, [r7, #16]
    c592:	681b      	ldr	r3, [r3, #0]
    c594:	4618      	mov	r0, r3
    c596:	f00f fe4e 	bl	1c236 <nrfx_is_in_ram>
    c59a:	4603      	mov	r3, r0
    c59c:	2b00      	cmp	r3, #0
    c59e:	d106      	bne.n	c5ae <nrfx_usbd_feeder_ram_zlp+0x2e>
    c5a0:	4b18      	ldr	r3, [pc, #96]	; (c604 <nrfx_usbd_feeder_ram_zlp+0x84>)
    c5a2:	4a19      	ldr	r2, [pc, #100]	; (c608 <nrfx_usbd_feeder_ram_zlp+0x88>)
    c5a4:	f240 211a 	movw	r1, #538	; 0x21a
    c5a8:	4818      	ldr	r0, [pc, #96]	; (c60c <nrfx_usbd_feeder_ram_zlp+0x8c>)
    c5aa:	f7f4 f8e7 	bl	77c <__assert_func>

    size_t tx_size = p_transfer->size;
    c5ae:	693b      	ldr	r3, [r7, #16]
    c5b0:	685b      	ldr	r3, [r3, #4]
    c5b2:	617b      	str	r3, [r7, #20]
    if (tx_size > ep_size)
    c5b4:	697a      	ldr	r2, [r7, #20]
    c5b6:	687b      	ldr	r3, [r7, #4]
    c5b8:	429a      	cmp	r2, r3
    c5ba:	d901      	bls.n	c5c0 <nrfx_usbd_feeder_ram_zlp+0x40>
    {
        tx_size = ep_size;
    c5bc:	687b      	ldr	r3, [r7, #4]
    c5be:	617b      	str	r3, [r7, #20]
    }

    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    c5c0:	697b      	ldr	r3, [r7, #20]
    c5c2:	2b00      	cmp	r3, #0
    c5c4:	d002      	beq.n	c5cc <nrfx_usbd_feeder_ram_zlp+0x4c>
    c5c6:	693b      	ldr	r3, [r7, #16]
    c5c8:	681b      	ldr	r3, [r3, #0]
    c5ca:	e000      	b.n	c5ce <nrfx_usbd_feeder_ram_zlp+0x4e>
    c5cc:	2300      	movs	r3, #0
    c5ce:	68fa      	ldr	r2, [r7, #12]
    c5d0:	6013      	str	r3, [r2, #0]
    p_next->size = tx_size;
    c5d2:	68fb      	ldr	r3, [r7, #12]
    c5d4:	697a      	ldr	r2, [r7, #20]
    c5d6:	605a      	str	r2, [r3, #4]

    p_transfer->size -= tx_size;
    c5d8:	693b      	ldr	r3, [r7, #16]
    c5da:	685a      	ldr	r2, [r3, #4]
    c5dc:	697b      	ldr	r3, [r7, #20]
    c5de:	1ad2      	subs	r2, r2, r3
    c5e0:	693b      	ldr	r3, [r7, #16]
    c5e2:	605a      	str	r2, [r3, #4]
    p_transfer->p_data.addr += tx_size;
    c5e4:	693b      	ldr	r3, [r7, #16]
    c5e6:	681a      	ldr	r2, [r3, #0]
    c5e8:	697b      	ldr	r3, [r7, #20]
    c5ea:	441a      	add	r2, r3
    c5ec:	693b      	ldr	r3, [r7, #16]
    c5ee:	601a      	str	r2, [r3, #0]

    return (tx_size != 0);
    c5f0:	697b      	ldr	r3, [r7, #20]
    c5f2:	2b00      	cmp	r3, #0
    c5f4:	bf14      	ite	ne
    c5f6:	2301      	movne	r3, #1
    c5f8:	2300      	moveq	r3, #0
    c5fa:	b2db      	uxtb	r3, r3
}
    c5fc:	4618      	mov	r0, r3
    c5fe:	3718      	adds	r7, #24
    c600:	46bd      	mov	sp, r7
    c602:	bd80      	pop	{r7, pc}
    c604:	0002de14 	.word	0x0002de14
    c608:	0002eb88 	.word	0x0002eb88
    c60c:	0002dd40 	.word	0x0002dd40

0000c610 <nrfx_usbd_feeder_flash>:
 *
 * @retval true  Continue transfer.
 * @retval false This was the last transfer.
 */
bool nrfx_usbd_feeder_flash(nrfx_usbd_ep_transfer_t * p_next, void * p_context, size_t ep_size)
{
    c610:	b580      	push	{r7, lr}
    c612:	b088      	sub	sp, #32
    c614:	af00      	add	r7, sp, #0
    c616:	60f8      	str	r0, [r7, #12]
    c618:	60b9      	str	r1, [r7, #8]
    c61a:	607a      	str	r2, [r7, #4]
    nrfx_usbd_transfer_t * p_transfer = p_context;
    c61c:	68bb      	ldr	r3, [r7, #8]
    c61e:	61bb      	str	r3, [r7, #24]
    NRFX_ASSERT(!nrfx_is_in_ram(p_transfer->p_data.tx));
    c620:	69bb      	ldr	r3, [r7, #24]
    c622:	681b      	ldr	r3, [r3, #0]
    c624:	4618      	mov	r0, r3
    c626:	f00f fe06 	bl	1c236 <nrfx_is_in_ram>
    c62a:	4603      	mov	r3, r0
    c62c:	f083 0301 	eor.w	r3, r3, #1
    c630:	b2db      	uxtb	r3, r3
    c632:	2b00      	cmp	r3, #0
    c634:	d106      	bne.n	c644 <nrfx_usbd_feeder_flash+0x34>
    c636:	4b20      	ldr	r3, [pc, #128]	; (c6b8 <nrfx_usbd_feeder_flash+0xa8>)
    c638:	4a20      	ldr	r2, [pc, #128]	; (c6bc <nrfx_usbd_feeder_flash+0xac>)
    c63a:	f44f 710e 	mov.w	r1, #568	; 0x238
    c63e:	4820      	ldr	r0, [pc, #128]	; (c6c0 <nrfx_usbd_feeder_flash+0xb0>)
    c640:	f7f4 f89c 	bl	77c <__assert_func>

    size_t tx_size  = p_transfer->size;
    c644:	69bb      	ldr	r3, [r7, #24]
    c646:	685b      	ldr	r3, [r3, #4]
    c648:	61fb      	str	r3, [r7, #28]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
    c64a:	f001 fcd1 	bl	dff0 <nrfx_usbd_feeder_buffer_get>
    c64e:	6178      	str	r0, [r7, #20]

    if (tx_size > ep_size)
    c650:	69fa      	ldr	r2, [r7, #28]
    c652:	687b      	ldr	r3, [r7, #4]
    c654:	429a      	cmp	r2, r3
    c656:	d901      	bls.n	c65c <nrfx_usbd_feeder_flash+0x4c>
    {
        tx_size = ep_size;
    c658:	687b      	ldr	r3, [r7, #4]
    c65a:	61fb      	str	r3, [r7, #28]
    }

    NRFX_ASSERT(tx_size <= NRFX_USBD_FEEDER_BUFFER_SIZE);
    c65c:	69fb      	ldr	r3, [r7, #28]
    c65e:	2b40      	cmp	r3, #64	; 0x40
    c660:	d906      	bls.n	c670 <nrfx_usbd_feeder_flash+0x60>
    c662:	4b18      	ldr	r3, [pc, #96]	; (c6c4 <nrfx_usbd_feeder_flash+0xb4>)
    c664:	4a15      	ldr	r2, [pc, #84]	; (c6bc <nrfx_usbd_feeder_flash+0xac>)
    c666:	f240 2142 	movw	r1, #578	; 0x242
    c66a:	4815      	ldr	r0, [pc, #84]	; (c6c0 <nrfx_usbd_feeder_flash+0xb0>)
    c66c:	f7f4 f886 	bl	77c <__assert_func>
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    c670:	69bb      	ldr	r3, [r7, #24]
    c672:	681b      	ldr	r3, [r3, #0]
    c674:	69fa      	ldr	r2, [r7, #28]
    c676:	4619      	mov	r1, r3
    c678:	6978      	ldr	r0, [r7, #20]
    c67a:	f7f5 fcf5 	bl	2068 <memcpy>

    p_next->p_data.tx = p_buffer;
    c67e:	68fb      	ldr	r3, [r7, #12]
    c680:	697a      	ldr	r2, [r7, #20]
    c682:	601a      	str	r2, [r3, #0]
    p_next->size = tx_size;
    c684:	68fb      	ldr	r3, [r7, #12]
    c686:	69fa      	ldr	r2, [r7, #28]
    c688:	605a      	str	r2, [r3, #4]

    p_transfer->size -= tx_size;
    c68a:	69bb      	ldr	r3, [r7, #24]
    c68c:	685a      	ldr	r2, [r3, #4]
    c68e:	69fb      	ldr	r3, [r7, #28]
    c690:	1ad2      	subs	r2, r2, r3
    c692:	69bb      	ldr	r3, [r7, #24]
    c694:	605a      	str	r2, [r3, #4]
    p_transfer->p_data.addr += tx_size;
    c696:	69bb      	ldr	r3, [r7, #24]
    c698:	681a      	ldr	r2, [r3, #0]
    c69a:	69fb      	ldr	r3, [r7, #28]
    c69c:	441a      	add	r2, r3
    c69e:	69bb      	ldr	r3, [r7, #24]
    c6a0:	601a      	str	r2, [r3, #0]

    return (p_transfer->size != 0);
    c6a2:	69bb      	ldr	r3, [r7, #24]
    c6a4:	685b      	ldr	r3, [r3, #4]
    c6a6:	2b00      	cmp	r3, #0
    c6a8:	bf14      	ite	ne
    c6aa:	2301      	movne	r3, #1
    c6ac:	2300      	moveq	r3, #0
    c6ae:	b2db      	uxtb	r3, r3
}
    c6b0:	4618      	mov	r0, r3
    c6b2:	3720      	adds	r7, #32
    c6b4:	46bd      	mov	sp, r7
    c6b6:	bd80      	pop	{r7, pc}
    c6b8:	0002de3c 	.word	0x0002de3c
    c6bc:	0002eba4 	.word	0x0002eba4
    c6c0:	0002dd40 	.word	0x0002dd40
    c6c4:	0002de64 	.word	0x0002de64

0000c6c8 <nrfx_usbd_feeder_flash_zlp>:
 *
 * @retval true  Continue transfer.
 * @retval false This was the last transfer.
 */
bool nrfx_usbd_feeder_flash_zlp(nrfx_usbd_ep_transfer_t * p_next, void * p_context, size_t ep_size)
{
    c6c8:	b580      	push	{r7, lr}
    c6ca:	b088      	sub	sp, #32
    c6cc:	af00      	add	r7, sp, #0
    c6ce:	60f8      	str	r0, [r7, #12]
    c6d0:	60b9      	str	r1, [r7, #8]
    c6d2:	607a      	str	r2, [r7, #4]
    nrfx_usbd_transfer_t * p_transfer = p_context;
    c6d4:	68bb      	ldr	r3, [r7, #8]
    c6d6:	61bb      	str	r3, [r7, #24]
    NRFX_ASSERT(!nrfx_is_in_ram(p_transfer->p_data.tx));
    c6d8:	69bb      	ldr	r3, [r7, #24]
    c6da:	681b      	ldr	r3, [r3, #0]
    c6dc:	4618      	mov	r0, r3
    c6de:	f00f fdaa 	bl	1c236 <nrfx_is_in_ram>
    c6e2:	4603      	mov	r3, r0
    c6e4:	f083 0301 	eor.w	r3, r3, #1
    c6e8:	b2db      	uxtb	r3, r3
    c6ea:	2b00      	cmp	r3, #0
    c6ec:	d106      	bne.n	c6fc <nrfx_usbd_feeder_flash_zlp+0x34>
    c6ee:	4b23      	ldr	r3, [pc, #140]	; (c77c <nrfx_usbd_feeder_flash_zlp+0xb4>)
    c6f0:	4a23      	ldr	r2, [pc, #140]	; (c780 <nrfx_usbd_feeder_flash_zlp+0xb8>)
    c6f2:	f240 215b 	movw	r1, #603	; 0x25b
    c6f6:	4823      	ldr	r0, [pc, #140]	; (c784 <nrfx_usbd_feeder_flash_zlp+0xbc>)
    c6f8:	f7f4 f840 	bl	77c <__assert_func>

    size_t tx_size  = p_transfer->size;
    c6fc:	69bb      	ldr	r3, [r7, #24]
    c6fe:	685b      	ldr	r3, [r3, #4]
    c700:	61fb      	str	r3, [r7, #28]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
    c702:	f001 fc75 	bl	dff0 <nrfx_usbd_feeder_buffer_get>
    c706:	6178      	str	r0, [r7, #20]

    if (tx_size > ep_size)
    c708:	69fa      	ldr	r2, [r7, #28]
    c70a:	687b      	ldr	r3, [r7, #4]
    c70c:	429a      	cmp	r2, r3
    c70e:	d901      	bls.n	c714 <nrfx_usbd_feeder_flash_zlp+0x4c>
    {
        tx_size = ep_size;
    c710:	687b      	ldr	r3, [r7, #4]
    c712:	61fb      	str	r3, [r7, #28]
    }

    NRFX_ASSERT(tx_size <= NRFX_USBD_FEEDER_BUFFER_SIZE);
    c714:	69fb      	ldr	r3, [r7, #28]
    c716:	2b40      	cmp	r3, #64	; 0x40
    c718:	d906      	bls.n	c728 <nrfx_usbd_feeder_flash_zlp+0x60>
    c71a:	4b1b      	ldr	r3, [pc, #108]	; (c788 <nrfx_usbd_feeder_flash_zlp+0xc0>)
    c71c:	4a18      	ldr	r2, [pc, #96]	; (c780 <nrfx_usbd_feeder_flash_zlp+0xb8>)
    c71e:	f240 2165 	movw	r1, #613	; 0x265
    c722:	4818      	ldr	r0, [pc, #96]	; (c784 <nrfx_usbd_feeder_flash_zlp+0xbc>)
    c724:	f7f4 f82a 	bl	77c <__assert_func>

    if (tx_size != 0)
    c728:	69fb      	ldr	r3, [r7, #28]
    c72a:	2b00      	cmp	r3, #0
    c72c:	d00a      	beq.n	c744 <nrfx_usbd_feeder_flash_zlp+0x7c>
    {
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    c72e:	69bb      	ldr	r3, [r7, #24]
    c730:	681b      	ldr	r3, [r3, #0]
    c732:	69fa      	ldr	r2, [r7, #28]
    c734:	4619      	mov	r1, r3
    c736:	6978      	ldr	r0, [r7, #20]
    c738:	f7f5 fc96 	bl	2068 <memcpy>
        p_next->p_data.tx = p_buffer;
    c73c:	68fb      	ldr	r3, [r7, #12]
    c73e:	697a      	ldr	r2, [r7, #20]
    c740:	601a      	str	r2, [r3, #0]
    c742:	e002      	b.n	c74a <nrfx_usbd_feeder_flash_zlp+0x82>
    }
    else
    {
        p_next->p_data.tx = NULL;
    c744:	68fb      	ldr	r3, [r7, #12]
    c746:	2200      	movs	r2, #0
    c748:	601a      	str	r2, [r3, #0]
    }
    p_next->size = tx_size;
    c74a:	68fb      	ldr	r3, [r7, #12]
    c74c:	69fa      	ldr	r2, [r7, #28]
    c74e:	605a      	str	r2, [r3, #4]

    p_transfer->size -= tx_size;
    c750:	69bb      	ldr	r3, [r7, #24]
    c752:	685a      	ldr	r2, [r3, #4]
    c754:	69fb      	ldr	r3, [r7, #28]
    c756:	1ad2      	subs	r2, r2, r3
    c758:	69bb      	ldr	r3, [r7, #24]
    c75a:	605a      	str	r2, [r3, #4]
    p_transfer->p_data.addr += tx_size;
    c75c:	69bb      	ldr	r3, [r7, #24]
    c75e:	681a      	ldr	r2, [r3, #0]
    c760:	69fb      	ldr	r3, [r7, #28]
    c762:	441a      	add	r2, r3
    c764:	69bb      	ldr	r3, [r7, #24]
    c766:	601a      	str	r2, [r3, #0]

    return (tx_size != 0);
    c768:	69fb      	ldr	r3, [r7, #28]
    c76a:	2b00      	cmp	r3, #0
    c76c:	bf14      	ite	ne
    c76e:	2301      	movne	r3, #1
    c770:	2300      	moveq	r3, #0
    c772:	b2db      	uxtb	r3, r3
}
    c774:	4618      	mov	r0, r3
    c776:	3720      	adds	r7, #32
    c778:	46bd      	mov	sp, r7
    c77a:	bd80      	pop	{r7, pc}
    c77c:	0002de3c 	.word	0x0002de3c
    c780:	0002ebbc 	.word	0x0002ebbc
    c784:	0002dd40 	.word	0x0002dd40
    c788:	0002de64 	.word	0x0002de64

0000c78c <ep_to_hal>:
 * @return Endpoint identifier in HAL.
 *
 * @sa nrfx_usbd_ep_from_hal
 */
static inline uint8_t ep_to_hal(nrfx_usbd_ep_t ep)
{
    c78c:	b580      	push	{r7, lr}
    c78e:	b082      	sub	sp, #8
    c790:	af00      	add	r7, sp, #0
    c792:	4603      	mov	r3, r0
    c794:	71fb      	strb	r3, [r7, #7]
    NRFX_USBD_ASSERT_EP_VALID(ep);
    c796:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c79a:	2b00      	cmp	r3, #0
    c79c:	da04      	bge.n	c7a8 <ep_to_hal+0x1c>
    c79e:	79fb      	ldrb	r3, [r7, #7]
    c7a0:	f003 030f 	and.w	r3, r3, #15
    c7a4:	2b08      	cmp	r3, #8
    c7a6:	dd0f      	ble.n	c7c8 <ep_to_hal+0x3c>
    c7a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c7ac:	2b00      	cmp	r3, #0
    c7ae:	db04      	blt.n	c7ba <ep_to_hal+0x2e>
    c7b0:	79fb      	ldrb	r3, [r7, #7]
    c7b2:	f003 030f 	and.w	r3, r3, #15
    c7b6:	2b08      	cmp	r3, #8
    c7b8:	dd06      	ble.n	c7c8 <ep_to_hal+0x3c>
    c7ba:	4b06      	ldr	r3, [pc, #24]	; (c7d4 <ep_to_hal+0x48>)
    c7bc:	4a06      	ldr	r2, [pc, #24]	; (c7d8 <ep_to_hal+0x4c>)
    c7be:	f240 2185 	movw	r1, #645	; 0x285
    c7c2:	4806      	ldr	r0, [pc, #24]	; (c7dc <ep_to_hal+0x50>)
    c7c4:	f7f3 ffda 	bl	77c <__assert_func>
    return (uint8_t)ep;
    c7c8:	79fb      	ldrb	r3, [r7, #7]
}
    c7ca:	4618      	mov	r0, r3
    c7cc:	3708      	adds	r7, #8
    c7ce:	46bd      	mov	sp, r7
    c7d0:	bd80      	pop	{r7, pc}
    c7d2:	bf00      	nop
    c7d4:	0002dc7c 	.word	0x0002dc7c
    c7d8:	0002edac 	.word	0x0002edac
    c7dc:	0002dd40 	.word	0x0002dd40

0000c7e0 <task_start_ep>:
 * @param ep Endpoint number.
 *
 * @return Task for starting EasyDMA transfer on selected endpoint.
 */
static inline nrf_usbd_task_t task_start_ep(nrfx_usbd_ep_t ep)
{
    c7e0:	b580      	push	{r7, lr}
    c7e2:	b082      	sub	sp, #8
    c7e4:	af00      	add	r7, sp, #0
    c7e6:	4603      	mov	r3, r0
    c7e8:	71fb      	strb	r3, [r7, #7]
    NRFX_USBD_ASSERT_EP_VALID(ep);
    c7ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c7ee:	2b00      	cmp	r3, #0
    c7f0:	da04      	bge.n	c7fc <task_start_ep+0x1c>
    c7f2:	79fb      	ldrb	r3, [r7, #7]
    c7f4:	f003 030f 	and.w	r3, r3, #15
    c7f8:	2b08      	cmp	r3, #8
    c7fa:	dd0f      	ble.n	c81c <task_start_ep+0x3c>
    c7fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c800:	2b00      	cmp	r3, #0
    c802:	db04      	blt.n	c80e <task_start_ep+0x2e>
    c804:	79fb      	ldrb	r3, [r7, #7]
    c806:	f003 030f 	and.w	r3, r3, #15
    c80a:	2b08      	cmp	r3, #8
    c80c:	dd06      	ble.n	c81c <task_start_ep+0x3c>
    c80e:	4b0d      	ldr	r3, [pc, #52]	; (c844 <task_start_ep+0x64>)
    c810:	4a0d      	ldr	r2, [pc, #52]	; (c848 <task_start_ep+0x68>)
    c812:	f240 2192 	movw	r1, #658	; 0x292
    c816:	480d      	ldr	r0, [pc, #52]	; (c84c <task_start_ep+0x6c>)
    c818:	f7f3 ffb0 	bl	77c <__assert_func>
    return (nrf_usbd_task_t)(
        (NRF_USBD_EPIN_CHECK(ep) ? NRF_USBD_TASK_STARTEPIN0 : NRF_USBD_TASK_STARTEPOUT0) +
    c81c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    return (nrf_usbd_task_t)(
    c820:	2b00      	cmp	r3, #0
    c822:	da01      	bge.n	c828 <task_start_ep+0x48>
    c824:	2204      	movs	r2, #4
    c826:	e000      	b.n	c82a <task_start_ep+0x4a>
    c828:	2228      	movs	r2, #40	; 0x28
    c82a:	79fb      	ldrb	r3, [r7, #7]
    c82c:	f003 030f 	and.w	r3, r3, #15
    c830:	b2db      	uxtb	r3, r3
    c832:	009b      	lsls	r3, r3, #2
    c834:	b2db      	uxtb	r3, r3
    c836:	4413      	add	r3, r2
    c838:	b2db      	uxtb	r3, r3
        (NRF_USBD_EP_NR_GET(ep) * sizeof(uint32_t)));
}
    c83a:	4618      	mov	r0, r3
    c83c:	3708      	adds	r7, #8
    c83e:	46bd      	mov	sp, r7
    c840:	bd80      	pop	{r7, pc}
    c842:	bf00      	nop
    c844:	0002dc7c 	.word	0x0002dc7c
    c848:	0002ecc4 	.word	0x0002ecc4
    c84c:	0002dd40 	.word	0x0002dd40

0000c850 <ep_state_access>:
 * It is used for internal transmission state.
 *
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    c850:	b580      	push	{r7, lr}
    c852:	b082      	sub	sp, #8
    c854:	af00      	add	r7, sp, #0
    c856:	4603      	mov	r3, r0
    c858:	71fb      	strb	r3, [r7, #7]
    NRFX_USBD_ASSERT_EP_VALID(ep);
    c85a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c85e:	2b00      	cmp	r3, #0
    c860:	da04      	bge.n	c86c <ep_state_access+0x1c>
    c862:	79fb      	ldrb	r3, [r7, #7]
    c864:	f003 030f 	and.w	r3, r3, #15
    c868:	2b08      	cmp	r3, #8
    c86a:	dd0f      	ble.n	c88c <ep_state_access+0x3c>
    c86c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c870:	2b00      	cmp	r3, #0
    c872:	db04      	blt.n	c87e <ep_state_access+0x2e>
    c874:	79fb      	ldrb	r3, [r7, #7]
    c876:	f003 030f 	and.w	r3, r3, #15
    c87a:	2b08      	cmp	r3, #8
    c87c:	dd06      	ble.n	c88c <ep_state_access+0x3c>
    c87e:	4b0b      	ldr	r3, [pc, #44]	; (c8ac <ep_state_access+0x5c>)
    c880:	4a0b      	ldr	r2, [pc, #44]	; (c8b0 <ep_state_access+0x60>)
    c882:	f240 21a2 	movw	r1, #674	; 0x2a2
    c886:	480b      	ldr	r0, [pc, #44]	; (c8b4 <ep_state_access+0x64>)
    c888:	f7f3 ff78 	bl	77c <__assert_func>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    c88c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c890:	2b00      	cmp	r3, #0
    c892:	da01      	bge.n	c898 <ep_state_access+0x48>
    c894:	4a08      	ldr	r2, [pc, #32]	; (c8b8 <ep_state_access+0x68>)
    c896:	e000      	b.n	c89a <ep_state_access+0x4a>
    c898:	4a08      	ldr	r2, [pc, #32]	; (c8bc <ep_state_access+0x6c>)
        NRF_USBD_EP_NR_GET(ep));
    c89a:	79fb      	ldrb	r3, [r7, #7]
    c89c:	f003 030f 	and.w	r3, r3, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    c8a0:	011b      	lsls	r3, r3, #4
    c8a2:	4413      	add	r3, r2
}
    c8a4:	4618      	mov	r0, r3
    c8a6:	3708      	adds	r7, #8
    c8a8:	46bd      	mov	sp, r7
    c8aa:	bd80      	pop	{r7, pc}
    c8ac:	0002dc7c 	.word	0x0002dc7c
    c8b0:	0002ebd8 	.word	0x0002ebd8
    c8b4:	0002dd40 	.word	0x0002dd40
    c8b8:	20002580 	.word	0x20002580
    c8bc:	200024f0 	.word	0x200024f0

0000c8c0 <ep2bit>:
 * @return Bit position related to the given endpoint number.
 *
 * @sa bit2ep
 */
static inline uint8_t ep2bit(nrfx_usbd_ep_t ep)
{
    c8c0:	b580      	push	{r7, lr}
    c8c2:	b082      	sub	sp, #8
    c8c4:	af00      	add	r7, sp, #0
    c8c6:	4603      	mov	r3, r0
    c8c8:	71fb      	strb	r3, [r7, #7]
    NRFX_USBD_ASSERT_EP_VALID(ep);
    c8ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c8ce:	2b00      	cmp	r3, #0
    c8d0:	da04      	bge.n	c8dc <ep2bit+0x1c>
    c8d2:	79fb      	ldrb	r3, [r7, #7]
    c8d4:	f003 030f 	and.w	r3, r3, #15
    c8d8:	2b08      	cmp	r3, #8
    c8da:	dd0f      	ble.n	c8fc <ep2bit+0x3c>
    c8dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c8e0:	2b00      	cmp	r3, #0
    c8e2:	db04      	blt.n	c8ee <ep2bit+0x2e>
    c8e4:	79fb      	ldrb	r3, [r7, #7]
    c8e6:	f003 030f 	and.w	r3, r3, #15
    c8ea:	2b08      	cmp	r3, #8
    c8ec:	dd06      	ble.n	c8fc <ep2bit+0x3c>
    c8ee:	4b0d      	ldr	r3, [pc, #52]	; (c924 <ep2bit+0x64>)
    c8f0:	4a0d      	ldr	r2, [pc, #52]	; (c928 <ep2bit+0x68>)
    c8f2:	f240 21b5 	movw	r1, #693	; 0x2b5
    c8f6:	480d      	ldr	r0, [pc, #52]	; (c92c <ep2bit+0x6c>)
    c8f8:	f7f3 ff40 	bl	77c <__assert_func>
    return NRFX_USBD_EP_BITPOS(ep);
    c8fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c900:	2b00      	cmp	r3, #0
    c902:	da01      	bge.n	c908 <ep2bit+0x48>
    c904:	2200      	movs	r2, #0
    c906:	e000      	b.n	c90a <ep2bit+0x4a>
    c908:	2210      	movs	r2, #16
    c90a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c90e:	f003 030f 	and.w	r3, r3, #15
    c912:	b25b      	sxtb	r3, r3
    c914:	4413      	add	r3, r2
    c916:	b25b      	sxtb	r3, r3
    c918:	b2db      	uxtb	r3, r3
}
    c91a:	4618      	mov	r0, r3
    c91c:	3708      	adds	r7, #8
    c91e:	46bd      	mov	sp, r7
    c920:	bd80      	pop	{r7, pc}
    c922:	bf00      	nop
    c924:	0002dc7c 	.word	0x0002dc7c
    c928:	0002ebe8 	.word	0x0002ebe8
    c92c:	0002dd40 	.word	0x0002dd40

0000c930 <usbd_dma_pending_set>:
 *
 * Internal function to set the flag informing about EasyDMA transfer pending.
 * This function is called always just after the EasyDMA transfer is started.
 */
static inline void usbd_dma_pending_set(void)
{
    c930:	b580      	push	{r7, lr}
    c932:	af00      	add	r7, sp, #0
    if (nrfx_usbd_errata_199())
    c934:	f00f fd7b 	bl	1c42e <nrfx_usbd_errata_199>
    c938:	4603      	mov	r3, r0
    c93a:	2b00      	cmp	r3, #0
    c93c:	d002      	beq.n	c944 <usbd_dma_pending_set+0x14>
    {
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    c93e:	4b04      	ldr	r3, [pc, #16]	; (c950 <usbd_dma_pending_set+0x20>)
    c940:	2282      	movs	r2, #130	; 0x82
    c942:	601a      	str	r2, [r3, #0]
    }
    m_dma_pending = true;
    c944:	4b03      	ldr	r3, [pc, #12]	; (c954 <usbd_dma_pending_set+0x24>)
    c946:	2201      	movs	r2, #1
    c948:	701a      	strb	r2, [r3, #0]
}
    c94a:	bf00      	nop
    c94c:	bd80      	pop	{r7, pc}
    c94e:	bf00      	nop
    c950:	40027c1c 	.word	0x40027c1c
    c954:	20006243 	.word	0x20006243

0000c958 <usbd_dma_pending_clear>:
 *
 * Internal function to clear the flag informing about EasyDMA transfer pending.
 * This function is called always just after the finished EasyDMA transfer is detected.
 */
static inline void usbd_dma_pending_clear(void)
{
    c958:	b580      	push	{r7, lr}
    c95a:	af00      	add	r7, sp, #0
    if (nrfx_usbd_errata_199())
    c95c:	f00f fd67 	bl	1c42e <nrfx_usbd_errata_199>
    c960:	4603      	mov	r3, r0
    c962:	2b00      	cmp	r3, #0
    c964:	d002      	beq.n	c96c <usbd_dma_pending_clear+0x14>
    {
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    c966:	4b04      	ldr	r3, [pc, #16]	; (c978 <usbd_dma_pending_clear+0x20>)
    c968:	2200      	movs	r2, #0
    c96a:	601a      	str	r2, [r3, #0]
    }
    m_dma_pending = false;
    c96c:	4b03      	ldr	r3, [pc, #12]	; (c97c <usbd_dma_pending_clear+0x24>)
    c96e:	2200      	movs	r2, #0
    c970:	701a      	strb	r2, [r3, #0]
}
    c972:	bf00      	nop
    c974:	bd80      	pop	{r7, pc}
    c976:	bf00      	nop
    c978:	40027c1c 	.word	0x40027c1c
    c97c:	20006243 	.word	0x20006243

0000c980 <usbd_ep_abort>:
   (m_ep_dma_waiting & (1U << ep2bit(ep)))
 * @endcode
 * This function would check it again, but it makes it inside critical section.
 */
static inline void usbd_ep_abort(nrfx_usbd_ep_t ep)
{
    c980:	b590      	push	{r4, r7, lr}
    c982:	b08b      	sub	sp, #44	; 0x2c
    c984:	af00      	add	r7, sp, #0
    c986:	4603      	mov	r3, r0
    c988:	71fb      	strb	r3, [r7, #7]
	__asm__ volatile(
    c98a:	f04f 0320 	mov.w	r3, #32
    c98e:	f3ef 8211 	mrs	r2, BASEPRI
    c992:	f383 8811 	msr	BASEPRI, r3
    c996:	f3bf 8f6f 	isb	sy
    c99a:	61ba      	str	r2, [r7, #24]
    c99c:	617b      	str	r3, [r7, #20]
	return key;
    c99e:	69bb      	ldr	r3, [r7, #24]
    NRFX_CRITICAL_SECTION_ENTER();
    c9a0:	627b      	str	r3, [r7, #36]	; 0x24

    usbd_ep_state_t * p_state = ep_state_access(ep);
    c9a2:	79fb      	ldrb	r3, [r7, #7]
    c9a4:	4618      	mov	r0, r3
    c9a6:	f7ff ff53 	bl	c850 <ep_state_access>
    c9aa:	6238      	str	r0, [r7, #32]

    if (NRF_USBD_EPOUT_CHECK(ep))
    c9ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c9b0:	2b00      	cmp	r3, #0
    c9b2:	db35      	blt.n	ca20 <usbd_ep_abort+0xa0>
    {
        /* Host -> Device */
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    c9b4:	4b5a      	ldr	r3, [pc, #360]	; (cb20 <usbd_ep_abort+0x1a0>)
    c9b6:	681b      	ldr	r3, [r3, #0]
    c9b8:	43dc      	mvns	r4, r3
    c9ba:	79fb      	ldrb	r3, [r7, #7]
    c9bc:	4618      	mov	r0, r3
    c9be:	f7ff ff7f 	bl	c8c0 <ep2bit>
    c9c2:	4603      	mov	r3, r0
    c9c4:	461a      	mov	r2, r3
    c9c6:	2301      	movs	r3, #1
    c9c8:	4093      	lsls	r3, r2
    c9ca:	4023      	ands	r3, r4
    c9cc:	2b00      	cmp	r3, #0
    c9ce:	d004      	beq.n	c9da <usbd_ep_abort+0x5a>
        {
            /* If the bit in m_ep_dma_waiting in cleared - nothing would be
             * processed inside transfer processing */
            nrfx_usbd_transfer_out_drop(ep);
    c9d0:	79fb      	ldrb	r3, [r7, #7]
    c9d2:	4618      	mov	r0, r3
    c9d4:	f001 fb20 	bl	e018 <nrfx_usbd_transfer_out_drop>
    c9d8:	e01e      	b.n	ca18 <usbd_ep_abort+0x98>
        }
        else
        {
            p_state->handler.consumer = NULL;
    c9da:	6a3b      	ldr	r3, [r7, #32]
    c9dc:	2200      	movs	r2, #0
    c9de:	601a      	str	r2, [r3, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    c9e0:	79fb      	ldrb	r3, [r7, #7]
    c9e2:	4618      	mov	r0, r3
    c9e4:	f7ff ff6c 	bl	c8c0 <ep2bit>
    c9e8:	4603      	mov	r3, r0
    c9ea:	461a      	mov	r2, r3
    c9ec:	2301      	movs	r3, #1
    c9ee:	4093      	lsls	r3, r2
    c9f0:	43da      	mvns	r2, r3
    c9f2:	4b4b      	ldr	r3, [pc, #300]	; (cb20 <usbd_ep_abort+0x1a0>)
    c9f4:	681b      	ldr	r3, [r3, #0]
    c9f6:	4013      	ands	r3, r2
    c9f8:	4a49      	ldr	r2, [pc, #292]	; (cb20 <usbd_ep_abort+0x1a0>)
    c9fa:	6013      	str	r3, [r2, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    c9fc:	79fb      	ldrb	r3, [r7, #7]
    c9fe:	4618      	mov	r0, r3
    ca00:	f7ff ff5e 	bl	c8c0 <ep2bit>
    ca04:	4603      	mov	r3, r0
    ca06:	461a      	mov	r2, r3
    ca08:	2301      	movs	r3, #1
    ca0a:	4093      	lsls	r3, r2
    ca0c:	43da      	mvns	r2, r3
    ca0e:	4b45      	ldr	r3, [pc, #276]	; (cb24 <usbd_ep_abort+0x1a4>)
    ca10:	681b      	ldr	r3, [r3, #0]
    ca12:	4013      	ands	r3, r2
    ca14:	4a43      	ldr	r2, [pc, #268]	; (cb24 <usbd_ep_abort+0x1a4>)
    ca16:	6013      	str	r3, [r2, #0]
        }
        /* Aborted */
        p_state->status = NRFX_USBD_EP_ABORTED;
    ca18:	6a3b      	ldr	r3, [r7, #32]
    ca1a:	2203      	movs	r2, #3
    ca1c:	739a      	strb	r2, [r3, #14]
    ca1e:	e073      	b.n	cb08 <usbd_ep_abort+0x188>
    }
    else
    {
        if(!NRF_USBD_EPISO_CHECK(ep))
    ca20:	79fb      	ldrb	r3, [r7, #7]
    ca22:	f003 0308 	and.w	r3, r3, #8
    ca26:	2b00      	cmp	r3, #0
    ca28:	d12e      	bne.n	ca88 <usbd_ep_abort+0x108>
        {
            /* Workaround: Disarm the endpoint if there is any data buffered. */
            if(ep != NRFX_USBD_EPIN0)
    ca2a:	79fb      	ldrb	r3, [r7, #7]
    ca2c:	2b80      	cmp	r3, #128	; 0x80
    ca2e:	d018      	beq.n	ca62 <usbd_ep_abort+0xe2>
            {
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    ca30:	79fb      	ldrb	r3, [r7, #7]
    ca32:	f003 030f 	and.w	r3, r3, #15
    ca36:	3b01      	subs	r3, #1
    ca38:	005b      	lsls	r3, r3, #1
    ca3a:	4a3b      	ldr	r2, [pc, #236]	; (cb28 <usbd_ep_abort+0x1a8>)
    ca3c:	f203 73b6 	addw	r3, r3, #1974	; 0x7b6
    ca40:	6013      	str	r3, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    ca42:	4b3a      	ldr	r3, [pc, #232]	; (cb2c <usbd_ep_abort+0x1ac>)
    ca44:	681b      	ldr	r3, [r3, #0]
    ca46:	77fb      	strb	r3, [r7, #31]
                temp |= (1U << 1);
    ca48:	7ffb      	ldrb	r3, [r7, #31]
    ca4a:	f043 0302 	orr.w	r3, r3, #2
    ca4e:	77fb      	strb	r3, [r7, #31]
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) |= temp;
    ca50:	4b36      	ldr	r3, [pc, #216]	; (cb2c <usbd_ep_abort+0x1ac>)
    ca52:	681a      	ldr	r2, [r3, #0]
    ca54:	7ffb      	ldrb	r3, [r7, #31]
    ca56:	4935      	ldr	r1, [pc, #212]	; (cb2c <usbd_ep_abort+0x1ac>)
    ca58:	4313      	orrs	r3, r2
    ca5a:	600b      	str	r3, [r1, #0]
                (void)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    ca5c:	4b33      	ldr	r3, [pc, #204]	; (cb2c <usbd_ep_abort+0x1ac>)
    ca5e:	681b      	ldr	r3, [r3, #0]
    ca60:	e012      	b.n	ca88 <usbd_ep_abort+0x108>
            }
            else
            {
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7B4;
    ca62:	4b31      	ldr	r3, [pc, #196]	; (cb28 <usbd_ep_abort+0x1a8>)
    ca64:	f240 72b4 	movw	r2, #1972	; 0x7b4
    ca68:	601a      	str	r2, [r3, #0]
                uint8_t temp = *((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    ca6a:	4b30      	ldr	r3, [pc, #192]	; (cb2c <usbd_ep_abort+0x1ac>)
    ca6c:	681b      	ldr	r3, [r3, #0]
    ca6e:	77bb      	strb	r3, [r7, #30]
                temp |= (1U << 2);
    ca70:	7fbb      	ldrb	r3, [r7, #30]
    ca72:	f043 0304 	orr.w	r3, r3, #4
    ca76:	77bb      	strb	r3, [r7, #30]
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) |= temp;
    ca78:	4b2c      	ldr	r3, [pc, #176]	; (cb2c <usbd_ep_abort+0x1ac>)
    ca7a:	681a      	ldr	r2, [r3, #0]
    ca7c:	7fbb      	ldrb	r3, [r7, #30]
    ca7e:	492b      	ldr	r1, [pc, #172]	; (cb2c <usbd_ep_abort+0x1ac>)
    ca80:	4313      	orrs	r3, r2
    ca82:	600b      	str	r3, [r1, #0]
                (void)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    ca84:	4b29      	ldr	r3, [pc, #164]	; (cb2c <usbd_ep_abort+0x1ac>)
    ca86:	681b      	ldr	r3, [r3, #0]
            }
        }
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    ca88:	4b26      	ldr	r3, [pc, #152]	; (cb24 <usbd_ep_abort+0x1a4>)
    ca8a:	681b      	ldr	r3, [r3, #0]
    ca8c:	43da      	mvns	r2, r3
    ca8e:	4b24      	ldr	r3, [pc, #144]	; (cb20 <usbd_ep_abort+0x1a0>)
    ca90:	681b      	ldr	r3, [r3, #0]
    ca92:	ea42 0403 	orr.w	r4, r2, r3
    ca96:	79fb      	ldrb	r3, [r7, #7]
    ca98:	4618      	mov	r0, r3
    ca9a:	f7ff ff11 	bl	c8c0 <ep2bit>
    ca9e:	4603      	mov	r3, r0
    caa0:	461a      	mov	r2, r3
    caa2:	2301      	movs	r3, #1
    caa4:	4093      	lsls	r3, r2
    caa6:	4023      	ands	r3, r4
    caa8:	2b00      	cmp	r3, #0
    caaa:	d02d      	beq.n	cb08 <usbd_ep_abort+0x188>
        {
            /* Device -> Host */
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    caac:	79fb      	ldrb	r3, [r7, #7]
    caae:	4618      	mov	r0, r3
    cab0:	f7ff ff06 	bl	c8c0 <ep2bit>
    cab4:	4603      	mov	r3, r0
    cab6:	461a      	mov	r2, r3
    cab8:	2301      	movs	r3, #1
    caba:	4093      	lsls	r3, r2
    cabc:	43da      	mvns	r2, r3
    cabe:	4b18      	ldr	r3, [pc, #96]	; (cb20 <usbd_ep_abort+0x1a0>)
    cac0:	681b      	ldr	r3, [r3, #0]
    cac2:	4013      	ands	r3, r2
    cac4:	4a16      	ldr	r2, [pc, #88]	; (cb20 <usbd_ep_abort+0x1a0>)
    cac6:	6013      	str	r3, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    cac8:	79fb      	ldrb	r3, [r7, #7]
    caca:	4618      	mov	r0, r3
    cacc:	f7ff fef8 	bl	c8c0 <ep2bit>
    cad0:	4603      	mov	r3, r0
    cad2:	461a      	mov	r2, r3
    cad4:	2301      	movs	r3, #1
    cad6:	fa03 f202 	lsl.w	r2, r3, r2
    cada:	4b12      	ldr	r3, [pc, #72]	; (cb24 <usbd_ep_abort+0x1a4>)
    cadc:	681b      	ldr	r3, [r3, #0]
    cade:	4313      	orrs	r3, r2
    cae0:	4a10      	ldr	r2, [pc, #64]	; (cb24 <usbd_ep_abort+0x1a4>)
    cae2:	6013      	str	r3, [r2, #0]

            p_state->handler.feeder = NULL;
    cae4:	6a3b      	ldr	r3, [r7, #32]
    cae6:	2200      	movs	r2, #0
    cae8:	601a      	str	r2, [r3, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    caea:	6a3b      	ldr	r3, [r7, #32]
    caec:	2203      	movs	r2, #3
    caee:	739a      	strb	r2, [r3, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    caf0:	2306      	movs	r3, #6
    caf2:	733b      	strb	r3, [r7, #12]
    caf4:	79fb      	ldrb	r3, [r7, #7]
    caf6:	73bb      	strb	r3, [r7, #14]
    caf8:	2303      	movs	r3, #3
    cafa:	73fb      	strb	r3, [r7, #15]
            m_event_handler(&evt);
    cafc:	4b0c      	ldr	r3, [pc, #48]	; (cb30 <usbd_ep_abort+0x1b0>)
    cafe:	681b      	ldr	r3, [r3, #0]
    cb00:	f107 020c 	add.w	r2, r7, #12
    cb04:	4610      	mov	r0, r2
    cb06:	4798      	blx	r3
    cb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cb0a:	613b      	str	r3, [r7, #16]
	__asm__ volatile(
    cb0c:	693b      	ldr	r3, [r7, #16]
    cb0e:	f383 8811 	msr	BASEPRI, r3
    cb12:	f3bf 8f6f 	isb	sy
        }
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    cb16:	bf00      	nop
    cb18:	372c      	adds	r7, #44	; 0x2c
    cb1a:	46bd      	mov	sp, r7
    cb1c:	bd90      	pop	{r4, r7, pc}
    cb1e:	bf00      	nop
    cb20:	200024e8 	.word	0x200024e8
    cb24:	200024e4 	.word	0x200024e4
    cb28:	40027800 	.word	0x40027800
    cb2c:	40027804 	.word	0x40027804
    cb30:	200024e0 	.word	0x200024e0

0000cb34 <usbd_ep_abort_all>:
 * @brief Abort all pending endpoints.
 *
 * Function aborts all pending endpoint transfers.
 */
static void usbd_ep_abort_all(void)
{
    cb34:	b580      	push	{r7, lr}
    cb36:	b084      	sub	sp, #16
    cb38:	af00      	add	r7, sp, #0
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    cb3a:	4b1b      	ldr	r3, [pc, #108]	; (cba8 <usbd_ep_abort_all+0x74>)
    cb3c:	681b      	ldr	r3, [r3, #0]
    cb3e:	0c1b      	lsrs	r3, r3, #16
    cb40:	041b      	lsls	r3, r3, #16
    cb42:	4a1a      	ldr	r2, [pc, #104]	; (cbac <usbd_ep_abort_all+0x78>)
    cb44:	6812      	ldr	r2, [r2, #0]
    cb46:	4313      	orrs	r3, r2
    cb48:	60fb      	str	r3, [r7, #12]
    while (0 != ep_waiting)
    cb4a:	e022      	b.n	cb92 <usbd_ep_abort_all+0x5e>
    cb4c:	68fb      	ldr	r3, [r7, #12]
    cb4e:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
    cb50:	687b      	ldr	r3, [r7, #4]
    cb52:	fa93 f3a3 	rbit	r3, r3
    cb56:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
    cb58:	683b      	ldr	r3, [r7, #0]
    {
        uint8_t bitpos = __CLZ(__RBIT(ep_waiting));
    cb5a:	fab3 f383 	clz	r3, r3
    cb5e:	72fb      	strb	r3, [r7, #11]
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    cb60:	7afb      	ldrb	r3, [r7, #11]
    cb62:	4618      	mov	r0, r3
    cb64:	f00f fc7c 	bl	1c460 <bit2ep>
    cb68:	4603      	mov	r3, r0
    cb6a:	f003 0308 	and.w	r3, r3, #8
    cb6e:	2b00      	cmp	r3, #0
    cb70:	d107      	bne.n	cb82 <usbd_ep_abort_all+0x4e>
        {
            usbd_ep_abort(bit2ep(bitpos));
    cb72:	7afb      	ldrb	r3, [r7, #11]
    cb74:	4618      	mov	r0, r3
    cb76:	f00f fc73 	bl	1c460 <bit2ep>
    cb7a:	4603      	mov	r3, r0
    cb7c:	4618      	mov	r0, r3
    cb7e:	f7ff feff 	bl	c980 <usbd_ep_abort>
        }
        ep_waiting &= ~(1U << bitpos);
    cb82:	7afb      	ldrb	r3, [r7, #11]
    cb84:	2201      	movs	r2, #1
    cb86:	fa02 f303 	lsl.w	r3, r2, r3
    cb8a:	43db      	mvns	r3, r3
    cb8c:	68fa      	ldr	r2, [r7, #12]
    cb8e:	4013      	ands	r3, r2
    cb90:	60fb      	str	r3, [r7, #12]
    while (0 != ep_waiting)
    cb92:	68fb      	ldr	r3, [r7, #12]
    cb94:	2b00      	cmp	r3, #0
    cb96:	d1d9      	bne.n	cb4c <usbd_ep_abort_all+0x18>
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    cb98:	4b03      	ldr	r3, [pc, #12]	; (cba8 <usbd_ep_abort_all+0x74>)
    cb9a:	f240 12ff 	movw	r2, #511	; 0x1ff
    cb9e:	601a      	str	r2, [r3, #0]
}
    cba0:	bf00      	nop
    cba2:	3710      	adds	r7, #16
    cba4:	46bd      	mov	sp, r7
    cba6:	bd80      	pop	{r7, pc}
    cba8:	200024e4 	.word	0x200024e4
    cbac:	200024e8 	.word	0x200024e8

0000cbb0 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    cbb0:	b580      	push	{r7, lr}
    cbb2:	b082      	sub	sp, #8
    cbb4:	af00      	add	r7, sp, #0
    m_bus_suspend = false;
    cbb6:	4b09      	ldr	r3, [pc, #36]	; (cbdc <ev_usbreset_handler+0x2c>)
    cbb8:	2200      	movs	r2, #0
    cbba:	701a      	strb	r2, [r3, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    cbbc:	4b08      	ldr	r3, [pc, #32]	; (cbe0 <ev_usbreset_handler+0x30>)
    cbbe:	2200      	movs	r2, #0
    cbc0:	701a      	strb	r2, [r3, #0]

    const nrfx_usbd_evt_t evt = {
    cbc2:	2300      	movs	r3, #0
    cbc4:	607b      	str	r3, [r7, #4]
    cbc6:	2301      	movs	r3, #1
    cbc8:	713b      	strb	r3, [r7, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    cbca:	4b06      	ldr	r3, [pc, #24]	; (cbe4 <ev_usbreset_handler+0x34>)
    cbcc:	681b      	ldr	r3, [r3, #0]
    cbce:	1d3a      	adds	r2, r7, #4
    cbd0:	4610      	mov	r0, r2
    cbd2:	4798      	blx	r3
}
    cbd4:	bf00      	nop
    cbd6:	3708      	adds	r7, #8
    cbd8:	46bd      	mov	sp, r7
    cbda:	bd80      	pop	{r7, pc}
    cbdc:	20006241 	.word	0x20006241
    cbe0:	20006242 	.word	0x20006242
    cbe4:	200024e0 	.word	0x200024e0

0000cbe8 <nrf_usbd_ep0in_dma_handler>:
 * For endpoint 0 see @ref nrf_usbd_ep0out_dma_handler.
 *
 * @param[in] ep Endpoint number.
 */
static inline void nrf_usbd_ep0in_dma_handler(void)
{
    cbe8:	b580      	push	{r7, lr}
    cbea:	b082      	sub	sp, #8
    cbec:	af00      	add	r7, sp, #0
    const nrfx_usbd_ep_t ep = NRFX_USBD_EPIN0;
    cbee:	2380      	movs	r3, #128	; 0x80
    cbf0:	71fb      	strb	r3, [r7, #7]
    NRFX_LOG_DEBUG("USB event: DMA ready IN0");
    usbd_dma_pending_clear();
    cbf2:	f7ff feb1 	bl	c958 <usbd_dma_pending_clear>

    usbd_ep_state_t * p_state = ep_state_access(ep);
    cbf6:	79fb      	ldrb	r3, [r7, #7]
    cbf8:	4618      	mov	r0, r3
    cbfa:	f7ff fe29 	bl	c850 <ep_state_access>
    cbfe:	6038      	str	r0, [r7, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    cc00:	683b      	ldr	r3, [r7, #0]
    cc02:	7b9b      	ldrb	r3, [r3, #14]
    cc04:	2b03      	cmp	r3, #3
    cc06:	d10d      	bne.n	cc24 <nrf_usbd_ep0in_dma_handler+0x3c>
    {
        /* Clear transfer information just in case */
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    cc08:	79fb      	ldrb	r3, [r7, #7]
    cc0a:	4618      	mov	r0, r3
    cc0c:	f7ff fe58 	bl	c8c0 <ep2bit>
    cc10:	4603      	mov	r3, r0
    cc12:	461a      	mov	r2, r3
    cc14:	2301      	movs	r3, #1
    cc16:	4093      	lsls	r3, r2
    cc18:	43db      	mvns	r3, r3
    cc1a:	4619      	mov	r1, r3
    cc1c:	480c      	ldr	r0, [pc, #48]	; (cc50 <nrf_usbd_ep0in_dma_handler+0x68>)
    cc1e:	f00f fb1c 	bl	1c25a <atomic_and>
    }
    else
    {
        /* Nothing to do */
    }
}
    cc22:	e010      	b.n	cc46 <nrf_usbd_ep0in_dma_handler+0x5e>
    else if (p_state->handler.feeder == NULL)
    cc24:	683b      	ldr	r3, [r7, #0]
    cc26:	681b      	ldr	r3, [r3, #0]
    cc28:	2b00      	cmp	r3, #0
    cc2a:	d10c      	bne.n	cc46 <nrf_usbd_ep0in_dma_handler+0x5e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    cc2c:	79fb      	ldrb	r3, [r7, #7]
    cc2e:	4618      	mov	r0, r3
    cc30:	f7ff fe46 	bl	c8c0 <ep2bit>
    cc34:	4603      	mov	r3, r0
    cc36:	461a      	mov	r2, r3
    cc38:	2301      	movs	r3, #1
    cc3a:	4093      	lsls	r3, r2
    cc3c:	43db      	mvns	r3, r3
    cc3e:	4619      	mov	r1, r3
    cc40:	4803      	ldr	r0, [pc, #12]	; (cc50 <nrf_usbd_ep0in_dma_handler+0x68>)
    cc42:	f00f fb0a 	bl	1c25a <atomic_and>
}
    cc46:	bf00      	nop
    cc48:	3708      	adds	r7, #8
    cc4a:	46bd      	mov	sp, r7
    cc4c:	bd80      	pop	{r7, pc}
    cc4e:	bf00      	nop
    cc50:	200024e8 	.word	0x200024e8

0000cc54 <nrf_usbd_epin_dma_handler>:
 * For endpoint 0 see @ref nrf_usbd_ep0out_dma_handler.
 *
 * @param[in] ep Endpoint number.
 */
static inline void nrf_usbd_epin_dma_handler(nrfx_usbd_ep_t ep)
{
    cc54:	b580      	push	{r7, lr}
    cc56:	b084      	sub	sp, #16
    cc58:	af00      	add	r7, sp, #0
    cc5a:	4603      	mov	r3, r0
    cc5c:	71fb      	strb	r3, [r7, #7]
    NRFX_LOG_DEBUG("USB event: DMA ready IN: %x", ep);
    NRFX_ASSERT(NRF_USBD_EPIN_CHECK(ep));
    cc5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    cc62:	2b00      	cmp	r3, #0
    cc64:	db06      	blt.n	cc74 <nrf_usbd_epin_dma_handler+0x20>
    cc66:	4b26      	ldr	r3, [pc, #152]	; (cd00 <nrf_usbd_epin_dma_handler+0xac>)
    cc68:	4a26      	ldr	r2, [pc, #152]	; (cd04 <nrf_usbd_epin_dma_handler+0xb0>)
    cc6a:	f240 31b6 	movw	r1, #950	; 0x3b6
    cc6e:	4826      	ldr	r0, [pc, #152]	; (cd08 <nrf_usbd_epin_dma_handler+0xb4>)
    cc70:	f7f3 fd84 	bl	77c <__assert_func>
    NRFX_ASSERT(!NRF_USBD_EPISO_CHECK(ep));
    cc74:	79fb      	ldrb	r3, [r7, #7]
    cc76:	f003 0308 	and.w	r3, r3, #8
    cc7a:	2b00      	cmp	r3, #0
    cc7c:	d006      	beq.n	cc8c <nrf_usbd_epin_dma_handler+0x38>
    cc7e:	4b23      	ldr	r3, [pc, #140]	; (cd0c <nrf_usbd_epin_dma_handler+0xb8>)
    cc80:	4a20      	ldr	r2, [pc, #128]	; (cd04 <nrf_usbd_epin_dma_handler+0xb0>)
    cc82:	f240 31b7 	movw	r1, #951	; 0x3b7
    cc86:	4820      	ldr	r0, [pc, #128]	; (cd08 <nrf_usbd_epin_dma_handler+0xb4>)
    cc88:	f7f3 fd78 	bl	77c <__assert_func>
    NRFX_ASSERT(NRF_USBD_EP_NR_GET(ep) > 0);
    cc8c:	79fb      	ldrb	r3, [r7, #7]
    cc8e:	f003 030f 	and.w	r3, r3, #15
    cc92:	2b00      	cmp	r3, #0
    cc94:	dc06      	bgt.n	cca4 <nrf_usbd_epin_dma_handler+0x50>
    cc96:	4b1e      	ldr	r3, [pc, #120]	; (cd10 <nrf_usbd_epin_dma_handler+0xbc>)
    cc98:	4a1a      	ldr	r2, [pc, #104]	; (cd04 <nrf_usbd_epin_dma_handler+0xb0>)
    cc9a:	f44f 716e 	mov.w	r1, #952	; 0x3b8
    cc9e:	481a      	ldr	r0, [pc, #104]	; (cd08 <nrf_usbd_epin_dma_handler+0xb4>)
    cca0:	f7f3 fd6c 	bl	77c <__assert_func>
    usbd_dma_pending_clear();
    cca4:	f7ff fe58 	bl	c958 <usbd_dma_pending_clear>

    usbd_ep_state_t * p_state = ep_state_access(ep);
    cca8:	79fb      	ldrb	r3, [r7, #7]
    ccaa:	4618      	mov	r0, r3
    ccac:	f7ff fdd0 	bl	c850 <ep_state_access>
    ccb0:	60f8      	str	r0, [r7, #12]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    ccb2:	68fb      	ldr	r3, [r7, #12]
    ccb4:	7b9b      	ldrb	r3, [r3, #14]
    ccb6:	2b03      	cmp	r3, #3
    ccb8:	d10d      	bne.n	ccd6 <nrf_usbd_epin_dma_handler+0x82>
    {
        /* Clear transfer information just in case */
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    ccba:	79fb      	ldrb	r3, [r7, #7]
    ccbc:	4618      	mov	r0, r3
    ccbe:	f7ff fdff 	bl	c8c0 <ep2bit>
    ccc2:	4603      	mov	r3, r0
    ccc4:	461a      	mov	r2, r3
    ccc6:	2301      	movs	r3, #1
    ccc8:	4093      	lsls	r3, r2
    ccca:	43db      	mvns	r3, r3
    cccc:	4619      	mov	r1, r3
    ccce:	4811      	ldr	r0, [pc, #68]	; (cd14 <nrf_usbd_epin_dma_handler+0xc0>)
    ccd0:	f00f fac3 	bl	1c25a <atomic_and>
    }
    else
    {
        /* Nothing to do */
    }
}
    ccd4:	e010      	b.n	ccf8 <nrf_usbd_epin_dma_handler+0xa4>
    else if (p_state->handler.feeder == NULL)
    ccd6:	68fb      	ldr	r3, [r7, #12]
    ccd8:	681b      	ldr	r3, [r3, #0]
    ccda:	2b00      	cmp	r3, #0
    ccdc:	d10c      	bne.n	ccf8 <nrf_usbd_epin_dma_handler+0xa4>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    ccde:	79fb      	ldrb	r3, [r7, #7]
    cce0:	4618      	mov	r0, r3
    cce2:	f7ff fded 	bl	c8c0 <ep2bit>
    cce6:	4603      	mov	r3, r0
    cce8:	461a      	mov	r2, r3
    ccea:	2301      	movs	r3, #1
    ccec:	4093      	lsls	r3, r2
    ccee:	43db      	mvns	r3, r3
    ccf0:	4619      	mov	r1, r3
    ccf2:	4808      	ldr	r0, [pc, #32]	; (cd14 <nrf_usbd_epin_dma_handler+0xc0>)
    ccf4:	f00f fab1 	bl	1c25a <atomic_and>
}
    ccf8:	bf00      	nop
    ccfa:	3710      	adds	r7, #16
    ccfc:	46bd      	mov	sp, r7
    ccfe:	bd80      	pop	{r7, pc}
    cd00:	0002de74 	.word	0x0002de74
    cd04:	0002ebf0 	.word	0x0002ebf0
    cd08:	0002dd40 	.word	0x0002dd40
    cd0c:	0002db74 	.word	0x0002db74
    cd10:	0002dea4 	.word	0x0002dea4
    cd14:	200024e8 	.word	0x200024e8

0000cd18 <nrf_usbd_epiniso_dma_handler>:

/**
 * @brief Handler for EasyDMA event from in isochronous endpoint.
 */
static inline void nrf_usbd_epiniso_dma_handler(nrfx_usbd_ep_t ep)
{
    cd18:	b580      	push	{r7, lr}
    cd1a:	b084      	sub	sp, #16
    cd1c:	af00      	add	r7, sp, #0
    cd1e:	4603      	mov	r3, r0
    cd20:	71fb      	strb	r3, [r7, #7]
    if (NRFX_USBD_ISO_DEBUG)
    {
        NRFX_LOG_DEBUG("USB event: DMA ready ISOIN: %x", ep);
    }
    NRFX_ASSERT(NRF_USBD_EPIN_CHECK(ep));
    cd22:	f997 3007 	ldrsb.w	r3, [r7, #7]
    cd26:	2b00      	cmp	r3, #0
    cd28:	db06      	blt.n	cd38 <nrf_usbd_epiniso_dma_handler+0x20>
    cd2a:	4b26      	ldr	r3, [pc, #152]	; (cdc4 <nrf_usbd_epiniso_dma_handler+0xac>)
    cd2c:	4a26      	ldr	r2, [pc, #152]	; (cdc8 <nrf_usbd_epiniso_dma_handler+0xb0>)
    cd2e:	f44f 7175 	mov.w	r1, #980	; 0x3d4
    cd32:	4826      	ldr	r0, [pc, #152]	; (cdcc <nrf_usbd_epiniso_dma_handler+0xb4>)
    cd34:	f7f3 fd22 	bl	77c <__assert_func>
    NRFX_ASSERT(NRF_USBD_EPISO_CHECK(ep));
    cd38:	79fb      	ldrb	r3, [r7, #7]
    cd3a:	f003 0308 	and.w	r3, r3, #8
    cd3e:	2b00      	cmp	r3, #0
    cd40:	d106      	bne.n	cd50 <nrf_usbd_epiniso_dma_handler+0x38>
    cd42:	4b23      	ldr	r3, [pc, #140]	; (cdd0 <nrf_usbd_epiniso_dma_handler+0xb8>)
    cd44:	4a20      	ldr	r2, [pc, #128]	; (cdc8 <nrf_usbd_epiniso_dma_handler+0xb0>)
    cd46:	f240 31d5 	movw	r1, #981	; 0x3d5
    cd4a:	4820      	ldr	r0, [pc, #128]	; (cdcc <nrf_usbd_epiniso_dma_handler+0xb4>)
    cd4c:	f7f3 fd16 	bl	77c <__assert_func>
    usbd_dma_pending_clear();
    cd50:	f7ff fe02 	bl	c958 <usbd_dma_pending_clear>

    usbd_ep_state_t * p_state = ep_state_access(ep);
    cd54:	79fb      	ldrb	r3, [r7, #7]
    cd56:	4618      	mov	r0, r3
    cd58:	f7ff fd7a 	bl	c850 <ep_state_access>
    cd5c:	60f8      	str	r0, [r7, #12]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    cd5e:	68fb      	ldr	r3, [r7, #12]
    cd60:	7b9b      	ldrb	r3, [r3, #14]
    cd62:	2b03      	cmp	r3, #3
    cd64:	d10d      	bne.n	cd82 <nrf_usbd_epiniso_dma_handler+0x6a>
    {
        /* Clear transfer information just in case */
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    cd66:	79fb      	ldrb	r3, [r7, #7]
    cd68:	4618      	mov	r0, r3
    cd6a:	f7ff fda9 	bl	c8c0 <ep2bit>
    cd6e:	4603      	mov	r3, r0
    cd70:	461a      	mov	r2, r3
    cd72:	2301      	movs	r3, #1
    cd74:	4093      	lsls	r3, r2
    cd76:	43db      	mvns	r3, r3
    cd78:	4619      	mov	r1, r3
    cd7a:	4816      	ldr	r0, [pc, #88]	; (cdd4 <nrf_usbd_epiniso_dma_handler+0xbc>)
    cd7c:	f00f fa6d 	bl	1c25a <atomic_and>
    }
    else
    {
        /* Nothing to do */
    }
}
    cd80:	e01c      	b.n	cdbc <nrf_usbd_epiniso_dma_handler+0xa4>
    else if (p_state->handler.feeder == NULL)
    cd82:	68fb      	ldr	r3, [r7, #12]
    cd84:	681b      	ldr	r3, [r3, #0]
    cd86:	2b00      	cmp	r3, #0
    cd88:	d118      	bne.n	cdbc <nrf_usbd_epiniso_dma_handler+0xa4>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    cd8a:	79fb      	ldrb	r3, [r7, #7]
    cd8c:	4618      	mov	r0, r3
    cd8e:	f7ff fd97 	bl	c8c0 <ep2bit>
    cd92:	4603      	mov	r3, r0
    cd94:	461a      	mov	r2, r3
    cd96:	2301      	movs	r3, #1
    cd98:	4093      	lsls	r3, r2
    cd9a:	43db      	mvns	r3, r3
    cd9c:	4619      	mov	r1, r3
    cd9e:	480d      	ldr	r0, [pc, #52]	; (cdd4 <nrf_usbd_epiniso_dma_handler+0xbc>)
    cda0:	f00f fa5b 	bl	1c25a <atomic_and>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    cda4:	2306      	movs	r3, #6
    cda6:	723b      	strb	r3, [r7, #8]
    cda8:	79fb      	ldrb	r3, [r7, #7]
    cdaa:	72bb      	strb	r3, [r7, #10]
    cdac:	2300      	movs	r3, #0
    cdae:	72fb      	strb	r3, [r7, #11]
        m_event_handler(&evt);
    cdb0:	4b09      	ldr	r3, [pc, #36]	; (cdd8 <nrf_usbd_epiniso_dma_handler+0xc0>)
    cdb2:	681b      	ldr	r3, [r3, #0]
    cdb4:	f107 0208 	add.w	r2, r7, #8
    cdb8:	4610      	mov	r0, r2
    cdba:	4798      	blx	r3
}
    cdbc:	bf00      	nop
    cdbe:	3710      	adds	r7, #16
    cdc0:	46bd      	mov	sp, r7
    cdc2:	bd80      	pop	{r7, pc}
    cdc4:	0002de74 	.word	0x0002de74
    cdc8:	0002ec0c 	.word	0x0002ec0c
    cdcc:	0002dd40 	.word	0x0002dd40
    cdd0:	0002da7c 	.word	0x0002da7c
    cdd4:	200024e8 	.word	0x200024e8
    cdd8:	200024e0 	.word	0x200024e0

0000cddc <nrf_usbd_ep0out_dma_handler>:
 *
 * EP0 OUT have to be cleared automatically in special way - only in the middle of the transfer.
 * It cannot be cleared when required transfer is finished because it means the same that accepting the comment.
 */
static inline void nrf_usbd_ep0out_dma_handler(void)
{
    cddc:	b580      	push	{r7, lr}
    cdde:	b084      	sub	sp, #16
    cde0:	af00      	add	r7, sp, #0
    const nrfx_usbd_ep_t ep = NRFX_USBD_EPOUT0;
    cde2:	2300      	movs	r3, #0
    cde4:	73fb      	strb	r3, [r7, #15]
    NRFX_LOG_DEBUG("USB event: DMA ready OUT0");
    usbd_dma_pending_clear();
    cde6:	f7ff fdb7 	bl	c958 <usbd_dma_pending_clear>

    usbd_ep_state_t * p_state = ep_state_access(ep);
    cdea:	7bfb      	ldrb	r3, [r7, #15]
    cdec:	4618      	mov	r0, r3
    cdee:	f7ff fd2f 	bl	c850 <ep_state_access>
    cdf2:	60b8      	str	r0, [r7, #8]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    cdf4:	68bb      	ldr	r3, [r7, #8]
    cdf6:	7b9b      	ldrb	r3, [r3, #14]
    cdf8:	2b03      	cmp	r3, #3
    cdfa:	d10d      	bne.n	ce18 <nrf_usbd_ep0out_dma_handler+0x3c>
    {
        /* Clear transfer information just in case */
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    cdfc:	7bfb      	ldrb	r3, [r7, #15]
    cdfe:	4618      	mov	r0, r3
    ce00:	f7ff fd5e 	bl	c8c0 <ep2bit>
    ce04:	4603      	mov	r3, r0
    ce06:	461a      	mov	r2, r3
    ce08:	2301      	movs	r3, #1
    ce0a:	4093      	lsls	r3, r2
    ce0c:	43db      	mvns	r3, r3
    ce0e:	4619      	mov	r1, r3
    ce10:	4813      	ldr	r0, [pc, #76]	; (ce60 <nrf_usbd_ep0out_dma_handler+0x84>)
    ce12:	f00f fa22 	bl	1c25a <atomic_and>
    }
    else
    {
        nrfx_usbd_setup_data_clear();
    }
}
    ce16:	e01e      	b.n	ce56 <nrf_usbd_ep0out_dma_handler+0x7a>
    else if (p_state->handler.consumer == NULL)
    ce18:	68bb      	ldr	r3, [r7, #8]
    ce1a:	681b      	ldr	r3, [r3, #0]
    ce1c:	2b00      	cmp	r3, #0
    ce1e:	d118      	bne.n	ce52 <nrf_usbd_ep0out_dma_handler+0x76>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    ce20:	7bfb      	ldrb	r3, [r7, #15]
    ce22:	4618      	mov	r0, r3
    ce24:	f7ff fd4c 	bl	c8c0 <ep2bit>
    ce28:	4603      	mov	r3, r0
    ce2a:	461a      	mov	r2, r3
    ce2c:	2301      	movs	r3, #1
    ce2e:	4093      	lsls	r3, r2
    ce30:	43db      	mvns	r3, r3
    ce32:	4619      	mov	r1, r3
    ce34:	480a      	ldr	r0, [pc, #40]	; (ce60 <nrf_usbd_ep0out_dma_handler+0x84>)
    ce36:	f00f fa10 	bl	1c25a <atomic_and>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    ce3a:	2306      	movs	r3, #6
    ce3c:	713b      	strb	r3, [r7, #4]
    ce3e:	7bfb      	ldrb	r3, [r7, #15]
    ce40:	71bb      	strb	r3, [r7, #6]
    ce42:	2300      	movs	r3, #0
    ce44:	71fb      	strb	r3, [r7, #7]
        m_event_handler(&evt);
    ce46:	4b07      	ldr	r3, [pc, #28]	; (ce64 <nrf_usbd_ep0out_dma_handler+0x88>)
    ce48:	681b      	ldr	r3, [r3, #0]
    ce4a:	1d3a      	adds	r2, r7, #4
    ce4c:	4610      	mov	r0, r2
    ce4e:	4798      	blx	r3
}
    ce50:	e001      	b.n	ce56 <nrf_usbd_ep0out_dma_handler+0x7a>
        nrfx_usbd_setup_data_clear();
    ce52:	f00f fc9b 	bl	1c78c <nrfx_usbd_setup_data_clear>
}
    ce56:	bf00      	nop
    ce58:	3710      	adds	r7, #16
    ce5a:	46bd      	mov	sp, r7
    ce5c:	bd80      	pop	{r7, pc}
    ce5e:	bf00      	nop
    ce60:	200024e8 	.word	0x200024e8
    ce64:	200024e0 	.word	0x200024e0

0000ce68 <nrf_usbd_epout_dma_handler>:
 * This handler would be called when EasyDMA transfer for OUT endpoint has been finished.
 *
 * @param[in] ep Endpoint number.
 */
static inline void nrf_usbd_epout_dma_handler(nrfx_usbd_ep_t ep)
{
    ce68:	b580      	push	{r7, lr}
    ce6a:	b084      	sub	sp, #16
    ce6c:	af00      	add	r7, sp, #0
    ce6e:	4603      	mov	r3, r0
    ce70:	71fb      	strb	r3, [r7, #7]
    NRFX_LOG_DEBUG("DMA ready OUT: %x", ep);
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));
    ce72:	f997 3007 	ldrsb.w	r3, [r7, #7]
    ce76:	2b00      	cmp	r3, #0
    ce78:	da06      	bge.n	ce88 <nrf_usbd_epout_dma_handler+0x20>
    ce7a:	4b2d      	ldr	r3, [pc, #180]	; (cf30 <nrf_usbd_epout_dma_handler+0xc8>)
    ce7c:	4a2d      	ldr	r2, [pc, #180]	; (cf34 <nrf_usbd_epout_dma_handler+0xcc>)
    ce7e:	f240 4114 	movw	r1, #1044	; 0x414
    ce82:	482d      	ldr	r0, [pc, #180]	; (cf38 <nrf_usbd_epout_dma_handler+0xd0>)
    ce84:	f7f3 fc7a 	bl	77c <__assert_func>
    NRFX_ASSERT(!NRF_USBD_EPISO_CHECK(ep));
    ce88:	79fb      	ldrb	r3, [r7, #7]
    ce8a:	f003 0308 	and.w	r3, r3, #8
    ce8e:	2b00      	cmp	r3, #0
    ce90:	d006      	beq.n	cea0 <nrf_usbd_epout_dma_handler+0x38>
    ce92:	4b2a      	ldr	r3, [pc, #168]	; (cf3c <nrf_usbd_epout_dma_handler+0xd4>)
    ce94:	4a27      	ldr	r2, [pc, #156]	; (cf34 <nrf_usbd_epout_dma_handler+0xcc>)
    ce96:	f240 4115 	movw	r1, #1045	; 0x415
    ce9a:	4827      	ldr	r0, [pc, #156]	; (cf38 <nrf_usbd_epout_dma_handler+0xd0>)
    ce9c:	f7f3 fc6e 	bl	77c <__assert_func>
    NRFX_ASSERT(NRF_USBD_EP_NR_GET(ep) > 0);
    cea0:	79fb      	ldrb	r3, [r7, #7]
    cea2:	f003 030f 	and.w	r3, r3, #15
    cea6:	2b00      	cmp	r3, #0
    cea8:	dc06      	bgt.n	ceb8 <nrf_usbd_epout_dma_handler+0x50>
    ceaa:	4b25      	ldr	r3, [pc, #148]	; (cf40 <nrf_usbd_epout_dma_handler+0xd8>)
    ceac:	4a21      	ldr	r2, [pc, #132]	; (cf34 <nrf_usbd_epout_dma_handler+0xcc>)
    ceae:	f240 4116 	movw	r1, #1046	; 0x416
    ceb2:	4821      	ldr	r0, [pc, #132]	; (cf38 <nrf_usbd_epout_dma_handler+0xd0>)
    ceb4:	f7f3 fc62 	bl	77c <__assert_func>
    usbd_dma_pending_clear();
    ceb8:	f7ff fd4e 	bl	c958 <usbd_dma_pending_clear>

    usbd_ep_state_t * p_state = ep_state_access(ep);
    cebc:	79fb      	ldrb	r3, [r7, #7]
    cebe:	4618      	mov	r0, r3
    cec0:	f7ff fcc6 	bl	c850 <ep_state_access>
    cec4:	60f8      	str	r0, [r7, #12]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    cec6:	68fb      	ldr	r3, [r7, #12]
    cec8:	7b9b      	ldrb	r3, [r3, #14]
    ceca:	2b03      	cmp	r3, #3
    cecc:	d10d      	bne.n	ceea <nrf_usbd_epout_dma_handler+0x82>
    {
        /* Clear transfer information just in case */
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    cece:	79fb      	ldrb	r3, [r7, #7]
    ced0:	4618      	mov	r0, r3
    ced2:	f7ff fcf5 	bl	c8c0 <ep2bit>
    ced6:	4603      	mov	r3, r0
    ced8:	461a      	mov	r2, r3
    ceda:	2301      	movs	r3, #1
    cedc:	4093      	lsls	r3, r2
    cede:	43db      	mvns	r3, r3
    cee0:	4619      	mov	r1, r3
    cee2:	4818      	ldr	r0, [pc, #96]	; (cf44 <nrf_usbd_epout_dma_handler+0xdc>)
    cee4:	f00f f9b9 	bl	1c25a <atomic_and>
    cee8:	e01c      	b.n	cf24 <nrf_usbd_epout_dma_handler+0xbc>
    }
    else if (p_state->handler.consumer == NULL)
    ceea:	68fb      	ldr	r3, [r7, #12]
    ceec:	681b      	ldr	r3, [r3, #0]
    ceee:	2b00      	cmp	r3, #0
    cef0:	d118      	bne.n	cf24 <nrf_usbd_epout_dma_handler+0xbc>
    {
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    cef2:	79fb      	ldrb	r3, [r7, #7]
    cef4:	4618      	mov	r0, r3
    cef6:	f7ff fce3 	bl	c8c0 <ep2bit>
    cefa:	4603      	mov	r3, r0
    cefc:	461a      	mov	r2, r3
    cefe:	2301      	movs	r3, #1
    cf00:	4093      	lsls	r3, r2
    cf02:	43db      	mvns	r3, r3
    cf04:	4619      	mov	r1, r3
    cf06:	480f      	ldr	r0, [pc, #60]	; (cf44 <nrf_usbd_epout_dma_handler+0xdc>)
    cf08:	f00f f9a7 	bl	1c25a <atomic_and>
        /* Send event to the user - for an OUT endpoint, the whole transfer is finished in this moment */
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    cf0c:	2306      	movs	r3, #6
    cf0e:	723b      	strb	r3, [r7, #8]
    cf10:	79fb      	ldrb	r3, [r7, #7]
    cf12:	72bb      	strb	r3, [r7, #10]
    cf14:	2300      	movs	r3, #0
    cf16:	72fb      	strb	r3, [r7, #11]
        m_event_handler(&evt);
    cf18:	4b0b      	ldr	r3, [pc, #44]	; (cf48 <nrf_usbd_epout_dma_handler+0xe0>)
    cf1a:	681b      	ldr	r3, [r3, #0]
    cf1c:	f107 0208 	add.w	r2, r7, #8
    cf20:	4610      	mov	r0, r2
    cf22:	4798      	blx	r3
        /* Nothing to do */
    }

#if NRFX_USBD_EARLY_DMA_PROCESS
    /* Speed up */
    usbd_dmareq_process();
    cf24:	f000 f9ee 	bl	d304 <usbd_dmareq_process>
#endif
}
    cf28:	bf00      	nop
    cf2a:	3710      	adds	r7, #16
    cf2c:	46bd      	mov	sp, r7
    cf2e:	bd80      	pop	{r7, pc}
    cf30:	0002d9b4 	.word	0x0002d9b4
    cf34:	0002ec2c 	.word	0x0002ec2c
    cf38:	0002dd40 	.word	0x0002dd40
    cf3c:	0002db74 	.word	0x0002db74
    cf40:	0002dea4 	.word	0x0002dea4
    cf44:	200024e8 	.word	0x200024e8
    cf48:	200024e0 	.word	0x200024e0

0000cf4c <nrf_usbd_epoutiso_dma_handler>:

/**
 * @brief Handler for EasyDMA event from out isochronous endpoint.
 */
static inline void nrf_usbd_epoutiso_dma_handler(nrfx_usbd_ep_t ep)
{
    cf4c:	b580      	push	{r7, lr}
    cf4e:	b084      	sub	sp, #16
    cf50:	af00      	add	r7, sp, #0
    cf52:	4603      	mov	r3, r0
    cf54:	71fb      	strb	r3, [r7, #7]
    if (NRFX_USBD_ISO_DEBUG)
    {
        NRFX_LOG_DEBUG("DMA ready ISOOUT: %x", ep);
    }
    NRFX_ASSERT(NRF_USBD_EPISO_CHECK(ep));
    cf56:	79fb      	ldrb	r3, [r7, #7]
    cf58:	f003 0308 	and.w	r3, r3, #8
    cf5c:	2b00      	cmp	r3, #0
    cf5e:	d106      	bne.n	cf6e <nrf_usbd_epoutiso_dma_handler+0x22>
    cf60:	4b19      	ldr	r3, [pc, #100]	; (cfc8 <nrf_usbd_epoutiso_dma_handler+0x7c>)
    cf62:	4a1a      	ldr	r2, [pc, #104]	; (cfcc <nrf_usbd_epoutiso_dma_handler+0x80>)
    cf64:	f240 413a 	movw	r1, #1082	; 0x43a
    cf68:	4819      	ldr	r0, [pc, #100]	; (cfd0 <nrf_usbd_epoutiso_dma_handler+0x84>)
    cf6a:	f7f3 fc07 	bl	77c <__assert_func>
    usbd_dma_pending_clear();
    cf6e:	f7ff fcf3 	bl	c958 <usbd_dma_pending_clear>

    usbd_ep_state_t * p_state = ep_state_access(ep);
    cf72:	79fb      	ldrb	r3, [r7, #7]
    cf74:	4618      	mov	r0, r3
    cf76:	f7ff fc6b 	bl	c850 <ep_state_access>
    cf7a:	60f8      	str	r0, [r7, #12]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    cf7c:	68fb      	ldr	r3, [r7, #12]
    cf7e:	7b9b      	ldrb	r3, [r3, #14]
    cf80:	2b03      	cmp	r3, #3
    cf82:	d01c      	beq.n	cfbe <nrf_usbd_epoutiso_dma_handler+0x72>
    {
        /* Nothing to do - just ignore */
    }
    else if (p_state->handler.consumer == NULL)
    cf84:	68fb      	ldr	r3, [r7, #12]
    cf86:	681b      	ldr	r3, [r3, #0]
    cf88:	2b00      	cmp	r3, #0
    cf8a:	d118      	bne.n	cfbe <nrf_usbd_epoutiso_dma_handler+0x72>
    {
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    cf8c:	79fb      	ldrb	r3, [r7, #7]
    cf8e:	4618      	mov	r0, r3
    cf90:	f7ff fc96 	bl	c8c0 <ep2bit>
    cf94:	4603      	mov	r3, r0
    cf96:	461a      	mov	r2, r3
    cf98:	2301      	movs	r3, #1
    cf9a:	4093      	lsls	r3, r2
    cf9c:	43db      	mvns	r3, r3
    cf9e:	4619      	mov	r1, r3
    cfa0:	480c      	ldr	r0, [pc, #48]	; (cfd4 <nrf_usbd_epoutiso_dma_handler+0x88>)
    cfa2:	f00f f95a 	bl	1c25a <atomic_and>
        /* Send event to the user - for an OUT endpoint, the whole transfer is finished in this moment */
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    cfa6:	2306      	movs	r3, #6
    cfa8:	723b      	strb	r3, [r7, #8]
    cfaa:	79fb      	ldrb	r3, [r7, #7]
    cfac:	72bb      	strb	r3, [r7, #10]
    cfae:	2300      	movs	r3, #0
    cfb0:	72fb      	strb	r3, [r7, #11]
        m_event_handler(&evt);
    cfb2:	4b09      	ldr	r3, [pc, #36]	; (cfd8 <nrf_usbd_epoutiso_dma_handler+0x8c>)
    cfb4:	681b      	ldr	r3, [r3, #0]
    cfb6:	f107 0208 	add.w	r2, r7, #8
    cfba:	4610      	mov	r0, r2
    cfbc:	4798      	blx	r3
    }
    else
    {
        /* Nothing to do */
    }
}
    cfbe:	bf00      	nop
    cfc0:	3710      	adds	r7, #16
    cfc2:	46bd      	mov	sp, r7
    cfc4:	bd80      	pop	{r7, pc}
    cfc6:	bf00      	nop
    cfc8:	0002da7c 	.word	0x0002da7c
    cfcc:	0002ec48 	.word	0x0002ec48
    cfd0:	0002dd40 	.word	0x0002dd40
    cfd4:	200024e8 	.word	0x200024e8
    cfd8:	200024e0 	.word	0x200024e0

0000cfdc <ev_sof_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }

static void ev_sof_handler(void)
{
    cfdc:	b580      	push	{r7, lr}
    cfde:	b082      	sub	sp, #8
    cfe0:	af00      	add	r7, sp, #0
    nrfx_usbd_evt_t evt =  {
    cfe2:	2300      	movs	r3, #0
    cfe4:	703b      	strb	r3, [r7, #0]
            NRFX_USBD_EVT_SOF,
            .data = { .sof = { .framecnt = nrf_usbd_framecntr_get() }}
    cfe6:	f7ff f8c5 	bl	c174 <nrf_usbd_framecntr_get>
    cfea:	4603      	mov	r3, r0
    nrfx_usbd_evt_t evt =  {
    cfec:	b29b      	uxth	r3, r3
    cfee:	807b      	strh	r3, [r7, #2]
    };

    /* Process isochronous endpoints */
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    cff0:	2088      	movs	r0, #136	; 0x88
    cff2:	f7ff fc65 	bl	c8c0 <ep2bit>
    cff6:	4603      	mov	r3, r0
    cff8:	461a      	mov	r2, r3
    cffa:	2301      	movs	r3, #1
    cffc:	4093      	lsls	r3, r2
    cffe:	607b      	str	r3, [r7, #4]
    if (nrf_usbd_episoout_size_get(NRFX_USBD_EPOUT8) != NRF_USBD_EPISOOUT_NO_DATA)
    d000:	2008      	movs	r0, #8
    d002:	f7fe fefb 	bl	bdfc <nrf_usbd_episoout_size_get>
    d006:	4603      	mov	r3, r0
    d008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d00c:	d009      	beq.n	d022 <ev_sof_handler+0x46>
    {
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    d00e:	2008      	movs	r0, #8
    d010:	f7ff fc56 	bl	c8c0 <ep2bit>
    d014:	4603      	mov	r3, r0
    d016:	461a      	mov	r2, r3
    d018:	2301      	movs	r3, #1
    d01a:	4093      	lsls	r3, r2
    d01c:	687a      	ldr	r2, [r7, #4]
    d01e:	4313      	orrs	r3, r2
    d020:	607b      	str	r3, [r7, #4]
    }
    m_ep_ready |= iso_ready_mask;
    d022:	4b07      	ldr	r3, [pc, #28]	; (d040 <ev_sof_handler+0x64>)
    d024:	681a      	ldr	r2, [r3, #0]
    d026:	687b      	ldr	r3, [r7, #4]
    d028:	4313      	orrs	r3, r2
    d02a:	4a05      	ldr	r2, [pc, #20]	; (d040 <ev_sof_handler+0x64>)
    d02c:	6013      	str	r3, [r2, #0]

    m_event_handler(&evt);
    d02e:	4b05      	ldr	r3, [pc, #20]	; (d044 <ev_sof_handler+0x68>)
    d030:	681b      	ldr	r3, [r3, #0]
    d032:	463a      	mov	r2, r7
    d034:	4610      	mov	r0, r2
    d036:	4798      	blx	r3
}
    d038:	bf00      	nop
    d03a:	3708      	adds	r7, #8
    d03c:	46bd      	mov	sp, r7
    d03e:	bd80      	pop	{r7, pc}
    d040:	200024e4 	.word	0x200024e4
    d044:	200024e0 	.word	0x200024e0

0000d048 <usbd_ep_data_handler>:
 * Auxiliary internal function.
 * @param ep     Endpoint number.
 * @param bitpos Bit position for selected endpoint number.
 */
static void usbd_ep_data_handler(nrfx_usbd_ep_t ep, uint8_t bitpos)
{
    d048:	b580      	push	{r7, lr}
    d04a:	b084      	sub	sp, #16
    d04c:	af00      	add	r7, sp, #0
    d04e:	4603      	mov	r3, r0
    d050:	460a      	mov	r2, r1
    d052:	71fb      	strb	r3, [r7, #7]
    d054:	4613      	mov	r3, r2
    d056:	71bb      	strb	r3, [r7, #6]
    NRFX_LOG_DEBUG("USBD event: EndpointData: %x", ep);
    /* Mark endpoint ready for next DMA access */
    m_ep_ready |= (1U << bitpos);
    d058:	79bb      	ldrb	r3, [r7, #6]
    d05a:	2201      	movs	r2, #1
    d05c:	409a      	lsls	r2, r3
    d05e:	4b1b      	ldr	r3, [pc, #108]	; (d0cc <usbd_ep_data_handler+0x84>)
    d060:	681b      	ldr	r3, [r3, #0]
    d062:	4313      	orrs	r3, r2
    d064:	4a19      	ldr	r2, [pc, #100]	; (d0cc <usbd_ep_data_handler+0x84>)
    d066:	6013      	str	r3, [r2, #0]

    if (NRF_USBD_EPIN_CHECK(ep))
    d068:	f997 3007 	ldrsb.w	r3, [r7, #7]
    d06c:	2b00      	cmp	r3, #0
    d06e:	da14      	bge.n	d09a <usbd_ep_data_handler+0x52>
    {
        /* IN endpoint (Device -> Host) */
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    d070:	79bb      	ldrb	r3, [r7, #6]
    d072:	2201      	movs	r2, #1
    d074:	409a      	lsls	r2, r3
    d076:	4b16      	ldr	r3, [pc, #88]	; (d0d0 <usbd_ep_data_handler+0x88>)
    d078:	681b      	ldr	r3, [r3, #0]
    d07a:	4013      	ands	r3, r2
    d07c:	2b00      	cmp	r3, #0
    d07e:	d120      	bne.n	d0c2 <usbd_ep_data_handler+0x7a>
        {
            NRFX_LOG_DEBUG("USBD event: EndpointData: In finished");
            /* No more data to be send - transmission finished */
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    d080:	2306      	movs	r3, #6
    d082:	733b      	strb	r3, [r7, #12]
    d084:	79fb      	ldrb	r3, [r7, #7]
    d086:	73bb      	strb	r3, [r7, #14]
    d088:	2300      	movs	r3, #0
    d08a:	73fb      	strb	r3, [r7, #15]
            m_event_handler(&evt);
    d08c:	4b11      	ldr	r3, [pc, #68]	; (d0d4 <usbd_ep_data_handler+0x8c>)
    d08e:	681b      	ldr	r3, [r3, #0]
    d090:	f107 020c 	add.w	r2, r7, #12
    d094:	4610      	mov	r0, r2
    d096:	4798      	blx	r3
            /* No buffer prepared - send event to the application */
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
            m_event_handler(&evt);
        }
    }
}
    d098:	e013      	b.n	d0c2 <usbd_ep_data_handler+0x7a>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    d09a:	79bb      	ldrb	r3, [r7, #6]
    d09c:	2201      	movs	r2, #1
    d09e:	409a      	lsls	r2, r3
    d0a0:	4b0b      	ldr	r3, [pc, #44]	; (d0d0 <usbd_ep_data_handler+0x88>)
    d0a2:	681b      	ldr	r3, [r3, #0]
    d0a4:	4013      	ands	r3, r2
    d0a6:	2b00      	cmp	r3, #0
    d0a8:	d10b      	bne.n	d0c2 <usbd_ep_data_handler+0x7a>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    d0aa:	2306      	movs	r3, #6
    d0ac:	723b      	strb	r3, [r7, #8]
    d0ae:	79fb      	ldrb	r3, [r7, #7]
    d0b0:	72bb      	strb	r3, [r7, #10]
    d0b2:	2301      	movs	r3, #1
    d0b4:	72fb      	strb	r3, [r7, #11]
            m_event_handler(&evt);
    d0b6:	4b07      	ldr	r3, [pc, #28]	; (d0d4 <usbd_ep_data_handler+0x8c>)
    d0b8:	681b      	ldr	r3, [r3, #0]
    d0ba:	f107 0208 	add.w	r2, r7, #8
    d0be:	4610      	mov	r0, r2
    d0c0:	4798      	blx	r3
}
    d0c2:	bf00      	nop
    d0c4:	3710      	adds	r7, #16
    d0c6:	46bd      	mov	sp, r7
    d0c8:	bd80      	pop	{r7, pc}
    d0ca:	bf00      	nop
    d0cc:	200024e4 	.word	0x200024e4
    d0d0:	200024e8 	.word	0x200024e8
    d0d4:	200024e0 	.word	0x200024e0

0000d0d8 <ev_setup_data_handler>:

static void ev_setup_data_handler(void)
{
    d0d8:	b598      	push	{r3, r4, r7, lr}
    d0da:	af00      	add	r7, sp, #0
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    d0dc:	4b06      	ldr	r3, [pc, #24]	; (d0f8 <ev_setup_data_handler+0x20>)
    d0de:	781c      	ldrb	r4, [r3, #0]
    d0e0:	4b05      	ldr	r3, [pc, #20]	; (d0f8 <ev_setup_data_handler+0x20>)
    d0e2:	781b      	ldrb	r3, [r3, #0]
    d0e4:	4618      	mov	r0, r3
    d0e6:	f7ff fbeb 	bl	c8c0 <ep2bit>
    d0ea:	4603      	mov	r3, r0
    d0ec:	4619      	mov	r1, r3
    d0ee:	4620      	mov	r0, r4
    d0f0:	f7ff ffaa 	bl	d048 <usbd_ep_data_handler>
}
    d0f4:	bf00      	nop
    d0f6:	bd98      	pop	{r3, r4, r7, pc}
    d0f8:	20006242 	.word	0x20006242

0000d0fc <ev_setup_handler>:

static void ev_setup_handler(void)
{
    d0fc:	b590      	push	{r4, r7, lr}
    d0fe:	b083      	sub	sp, #12
    d100:	af00      	add	r7, sp, #0
        nrf_usbd_setup_bmrequesttype_get(),
        nrf_usbd_setup_brequest_get(),
        nrf_usbd_setup_wvalue_get(),
        nrf_usbd_setup_windex_get(),
        nrf_usbd_setup_wlength_get());
    uint8_t bmRequestType = nrf_usbd_setup_bmrequesttype_get();
    d102:	f7fe fdbb 	bl	bc7c <nrf_usbd_setup_bmrequesttype_get>
    d106:	4603      	mov	r3, r0
    d108:	71fb      	strb	r3, [r7, #7]

    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    d10a:	4b28      	ldr	r3, [pc, #160]	; (d1ac <ev_setup_handler+0xb0>)
    d10c:	681b      	ldr	r3, [r3, #0]
    d10e:	43db      	mvns	r3, r3
    d110:	b29a      	uxth	r2, r3
    d112:	4b27      	ldr	r3, [pc, #156]	; (d1b0 <ev_setup_handler+0xb4>)
    d114:	681b      	ldr	r3, [r3, #0]
    d116:	ea42 0403 	orr.w	r4, r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    d11a:	4b26      	ldr	r3, [pc, #152]	; (d1b4 <ev_setup_handler+0xb8>)
    d11c:	781b      	ldrb	r3, [r3, #0]
    d11e:	4618      	mov	r0, r3
    d120:	f7ff fbce 	bl	c8c0 <ep2bit>
    d124:	4603      	mov	r3, r0
    d126:	461a      	mov	r2, r3
    d128:	2301      	movs	r3, #1
    d12a:	4093      	lsls	r3, r2
    d12c:	4023      	ands	r3, r4
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    d12e:	2b00      	cmp	r3, #0
    d130:	d004      	beq.n	d13c <ev_setup_handler+0x40>
    {
        NRFX_LOG_DEBUG("USBD drv: Trying to abort last transfer on EP0");
        usbd_ep_abort(m_last_setup_dir);
    d132:	4b20      	ldr	r3, [pc, #128]	; (d1b4 <ev_setup_handler+0xb8>)
    d134:	781b      	ldrb	r3, [r3, #0]
    d136:	4618      	mov	r0, r3
    d138:	f7ff fc22 	bl	c980 <usbd_ep_abort>
    }

    m_last_setup_dir =
        ((bmRequestType & USBD_BMREQUESTTYPE_DIRECTION_Msk) == 
    d13c:	f997 3007 	ldrsb.w	r3, [r7, #7]
         (USBD_BMREQUESTTYPE_DIRECTION_HostToDevice << USBD_BMREQUESTTYPE_DIRECTION_Pos)) ?
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    d140:	2b00      	cmp	r3, #0
    d142:	db01      	blt.n	d148 <ev_setup_handler+0x4c>
    d144:	2200      	movs	r2, #0
    d146:	e000      	b.n	d14a <ev_setup_handler+0x4e>
    d148:	2280      	movs	r2, #128	; 0x80
    m_last_setup_dir =
    d14a:	4b1a      	ldr	r3, [pc, #104]	; (d1b4 <ev_setup_handler+0xb8>)
    d14c:	701a      	strb	r2, [r3, #0]

    (void)(NRFX_ATOMIC_FETCH_AND(
    d14e:	2000      	movs	r0, #0
    d150:	f7ff fbb6 	bl	c8c0 <ep2bit>
    d154:	4603      	mov	r3, r0
    d156:	461a      	mov	r2, r3
    d158:	2301      	movs	r3, #1
    d15a:	fa03 f402 	lsl.w	r4, r3, r2
    d15e:	2080      	movs	r0, #128	; 0x80
    d160:	f7ff fbae 	bl	c8c0 <ep2bit>
    d164:	4603      	mov	r3, r0
    d166:	461a      	mov	r2, r3
    d168:	2301      	movs	r3, #1
    d16a:	4093      	lsls	r3, r2
    d16c:	4323      	orrs	r3, r4
    d16e:	43db      	mvns	r3, r3
    d170:	4619      	mov	r1, r3
    d172:	480f      	ldr	r0, [pc, #60]	; (d1b0 <ev_setup_handler+0xb4>)
    d174:	f00f f871 	bl	1c25a <atomic_and>
        &m_ep_dma_waiting,
        ~((1U << ep2bit(NRFX_USBD_EPOUT0)) | (1U << ep2bit(NRFX_USBD_EPIN0)))));
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    d178:	2080      	movs	r0, #128	; 0x80
    d17a:	f7ff fba1 	bl	c8c0 <ep2bit>
    d17e:	4603      	mov	r3, r0
    d180:	461a      	mov	r2, r3
    d182:	2301      	movs	r3, #1
    d184:	fa03 f202 	lsl.w	r2, r3, r2
    d188:	4b08      	ldr	r3, [pc, #32]	; (d1ac <ev_setup_handler+0xb0>)
    d18a:	681b      	ldr	r3, [r3, #0]
    d18c:	4313      	orrs	r3, r2
    d18e:	4a07      	ldr	r2, [pc, #28]	; (d1ac <ev_setup_handler+0xb0>)
    d190:	6013      	str	r3, [r2, #0]


    const nrfx_usbd_evt_t evt = {
    d192:	2300      	movs	r3, #0
    d194:	603b      	str	r3, [r7, #0]
    d196:	2305      	movs	r3, #5
    d198:	703b      	strb	r3, [r7, #0]
            .type = NRFX_USBD_EVT_SETUP
    };
    m_event_handler(&evt);
    d19a:	4b07      	ldr	r3, [pc, #28]	; (d1b8 <ev_setup_handler+0xbc>)
    d19c:	681b      	ldr	r3, [r3, #0]
    d19e:	463a      	mov	r2, r7
    d1a0:	4610      	mov	r0, r2
    d1a2:	4798      	blx	r3
}
    d1a4:	bf00      	nop
    d1a6:	370c      	adds	r7, #12
    d1a8:	46bd      	mov	sp, r7
    d1aa:	bd90      	pop	{r4, r7, pc}
    d1ac:	200024e4 	.word	0x200024e4
    d1b0:	200024e8 	.word	0x200024e8
    d1b4:	20006242 	.word	0x20006242
    d1b8:	200024e0 	.word	0x200024e0

0000d1bc <ev_usbevent_handler>:

static void ev_usbevent_handler(void)
{
    d1bc:	b580      	push	{r7, lr}
    d1be:	b084      	sub	sp, #16
    d1c0:	af00      	add	r7, sp, #0
    uint32_t event = nrf_usbd_eventcause_get_and_clear();
    d1c2:	f00f f8d3 	bl	1c36c <nrf_usbd_eventcause_get_and_clear>
    d1c6:	60f8      	str	r0, [r7, #12]
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    d1c8:	68fb      	ldr	r3, [r7, #12]
    d1ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
    d1ce:	2b00      	cmp	r3, #0
    d1d0:	d00c      	beq.n	d1ec <ev_usbevent_handler+0x30>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    d1d2:	4b26      	ldr	r3, [pc, #152]	; (d26c <ev_usbevent_handler+0xb0>)
    d1d4:	2201      	movs	r2, #1
    d1d6:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    d1d8:	2300      	movs	r3, #0
    d1da:	60bb      	str	r3, [r7, #8]
    d1dc:	2302      	movs	r3, #2
    d1de:	723b      	strb	r3, [r7, #8]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    d1e0:	4b23      	ldr	r3, [pc, #140]	; (d270 <ev_usbevent_handler+0xb4>)
    d1e2:	681b      	ldr	r3, [r3, #0]
    d1e4:	f107 0208 	add.w	r2, r7, #8
    d1e8:	4610      	mov	r0, r2
    d1ea:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    d1ec:	68fb      	ldr	r3, [r7, #12]
    d1ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
    d1f2:	2b00      	cmp	r3, #0
    d1f4:	d00b      	beq.n	d20e <ev_usbevent_handler+0x52>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    d1f6:	4b1d      	ldr	r3, [pc, #116]	; (d26c <ev_usbevent_handler+0xb0>)
    d1f8:	2200      	movs	r2, #0
    d1fa:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    d1fc:	2300      	movs	r3, #0
    d1fe:	607b      	str	r3, [r7, #4]
    d200:	2303      	movs	r3, #3
    d202:	713b      	strb	r3, [r7, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    d204:	4b1a      	ldr	r3, [pc, #104]	; (d270 <ev_usbevent_handler+0xb4>)
    d206:	681b      	ldr	r3, [r3, #0]
    d208:	1d3a      	adds	r2, r7, #4
    d20a:	4610      	mov	r0, r2
    d20c:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    d20e:	68fb      	ldr	r3, [r7, #12]
    d210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    d214:	2b00      	cmp	r3, #0
    d216:	d025      	beq.n	d264 <ev_usbevent_handler+0xa8>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    d218:	4b14      	ldr	r3, [pc, #80]	; (d26c <ev_usbevent_handler+0xb0>)
    d21a:	781b      	ldrb	r3, [r3, #0]
    d21c:	b2db      	uxtb	r3, r3
    d21e:	2b00      	cmp	r3, #0
    d220:	d020      	beq.n	d264 <ev_usbevent_handler+0xa8>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check());
    d222:	f7fe ffcb 	bl	c1bc <nrf_usbd_lowpower_check>
    d226:	4603      	mov	r3, r0
    d228:	f083 0301 	eor.w	r3, r3, #1
    d22c:	b2db      	uxtb	r3, r3
    d22e:	2b00      	cmp	r3, #0
    d230:	d106      	bne.n	d240 <ev_usbevent_handler+0x84>
    d232:	4b10      	ldr	r3, [pc, #64]	; (d274 <ev_usbevent_handler+0xb8>)
    d234:	4a10      	ldr	r2, [pc, #64]	; (d278 <ev_usbevent_handler+0xbc>)
    d236:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d23a:	4810      	ldr	r0, [pc, #64]	; (d27c <ev_usbevent_handler+0xc0>)
    d23c:	f7f3 fa9e 	bl	77c <__assert_func>
            m_bus_suspend = false;
    d240:	4b0a      	ldr	r3, [pc, #40]	; (d26c <ev_usbevent_handler+0xb0>)
    d242:	2200      	movs	r2, #0
    d244:	701a      	strb	r2, [r3, #0]

            nrf_usbd_dpdmvalue_set(NRF_USBD_DPDMVALUE_RESUME);
    d246:	2001      	movs	r0, #1
    d248:	f7fe fe7e 	bl	bf48 <nrf_usbd_dpdmvalue_set>
            nrf_usbd_task_trigger(NRF_USBD_TASK_DRIVEDPDM);
    d24c:	2058      	movs	r0, #88	; 0x58
    d24e:	f00f f83a 	bl	1c2c6 <nrf_usbd_task_trigger>

            const nrfx_usbd_evt_t evt = {
    d252:	2300      	movs	r3, #0
    d254:	603b      	str	r3, [r7, #0]
    d256:	2304      	movs	r3, #4
    d258:	703b      	strb	r3, [r7, #0]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    d25a:	4b05      	ldr	r3, [pc, #20]	; (d270 <ev_usbevent_handler+0xb4>)
    d25c:	681b      	ldr	r3, [r3, #0]
    d25e:	463a      	mov	r2, r7
    d260:	4610      	mov	r0, r2
    d262:	4798      	blx	r3
        }
    }
}
    d264:	bf00      	nop
    d266:	3710      	adds	r7, #16
    d268:	46bd      	mov	sp, r7
    d26a:	bd80      	pop	{r7, pc}
    d26c:	20006241 	.word	0x20006241
    d270:	200024e0 	.word	0x200024e0
    d274:	0002decc 	.word	0x0002decc
    d278:	0002ec84 	.word	0x0002ec84
    d27c:	0002dd40 	.word	0x0002dd40

0000d280 <ev_epdata_handler>:

static void ev_epdata_handler(void)
{
    d280:	b580      	push	{r7, lr}
    d282:	b084      	sub	sp, #16
    d284:	af00      	add	r7, sp, #0
    /* Get all endpoints that have acknowledged transfer */
    uint32_t dataepstatus = nrf_usbd_epdatastatus_get_and_clear();
    d286:	f00f f89d 	bl	1c3c4 <nrf_usbd_epdatastatus_get_and_clear>
    d28a:	60f8      	str	r0, [r7, #12]
    if (nrfx_usbd_errata_104())
    d28c:	f00f f8a8 	bl	1c3e0 <nrfx_usbd_errata_104>
    d290:	4603      	mov	r3, r0
    d292:	2b00      	cmp	r3, #0
    d294:	d02b      	beq.n	d2ee <ev_epdata_handler+0x6e>
    {
        dataepstatus |= (m_simulated_dataepstatus &
    d296:	4b1a      	ldr	r3, [pc, #104]	; (d300 <ev_epdata_handler+0x80>)
    d298:	681b      	ldr	r3, [r3, #0]
    d29a:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
    d29e:	68fa      	ldr	r2, [r7, #12]
    d2a0:	4313      	orrs	r3, r2
    d2a2:	60fb      	str	r3, [r7, #12]
            ~((1U << NRFX_USBD_EPOUT_BITPOS_0) | (1U << NRFX_USBD_EPIN_BITPOS_0)));
        m_simulated_dataepstatus &=
    d2a4:	4b16      	ldr	r3, [pc, #88]	; (d300 <ev_epdata_handler+0x80>)
    d2a6:	681b      	ldr	r3, [r3, #0]
    d2a8:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
    d2ac:	4a14      	ldr	r2, [pc, #80]	; (d300 <ev_epdata_handler+0x80>)
    d2ae:	6013      	str	r3, [r2, #0]
             ((1U << NRFX_USBD_EPOUT_BITPOS_0) | (1U << NRFX_USBD_EPIN_BITPOS_0));
    }
    NRFX_LOG_DEBUG("USBD event: EndpointEPStatus: %x", dataepstatus);

    /* All finished endpoint have to be marked as busy */
    while (dataepstatus)
    d2b0:	e01d      	b.n	d2ee <ev_epdata_handler+0x6e>
    d2b2:	68fb      	ldr	r3, [r7, #12]
    d2b4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
    d2b6:	687b      	ldr	r3, [r7, #4]
    d2b8:	fa93 f3a3 	rbit	r3, r3
    d2bc:	603b      	str	r3, [r7, #0]
  return result;
    d2be:	683b      	ldr	r3, [r7, #0]
    {
        uint8_t bitpos    = __CLZ(__RBIT(dataepstatus));
    d2c0:	fab3 f383 	clz	r3, r3
    d2c4:	72fb      	strb	r3, [r7, #11]
        nrfx_usbd_ep_t ep = bit2ep(bitpos);
    d2c6:	7afb      	ldrb	r3, [r7, #11]
    d2c8:	4618      	mov	r0, r3
    d2ca:	f00f f8c9 	bl	1c460 <bit2ep>
    d2ce:	4603      	mov	r3, r0
    d2d0:	72bb      	strb	r3, [r7, #10]
        dataepstatus &= ~(1UL << bitpos);
    d2d2:	7afb      	ldrb	r3, [r7, #11]
    d2d4:	2201      	movs	r2, #1
    d2d6:	fa02 f303 	lsl.w	r3, r2, r3
    d2da:	43db      	mvns	r3, r3
    d2dc:	68fa      	ldr	r2, [r7, #12]
    d2de:	4013      	ands	r3, r2
    d2e0:	60fb      	str	r3, [r7, #12]

        (void)(usbd_ep_data_handler(ep, bitpos));
    d2e2:	7afa      	ldrb	r2, [r7, #11]
    d2e4:	7abb      	ldrb	r3, [r7, #10]
    d2e6:	4611      	mov	r1, r2
    d2e8:	4618      	mov	r0, r3
    d2ea:	f7ff fead 	bl	d048 <usbd_ep_data_handler>
    while (dataepstatus)
    d2ee:	68fb      	ldr	r3, [r7, #12]
    d2f0:	2b00      	cmp	r3, #0
    d2f2:	d1de      	bne.n	d2b2 <ev_epdata_handler+0x32>
    }
    if (NRFX_USBD_EARLY_DMA_PROCESS)
    {
        /* Speed up */
        usbd_dmareq_process();
    d2f4:	f000 f806 	bl	d304 <usbd_dmareq_process>
    }
}
    d2f8:	bf00      	nop
    d2fa:	3710      	adds	r7, #16
    d2fc:	46bd      	mov	sp, r7
    d2fe:	bd80      	pop	{r7, pc}
    d300:	200024ec 	.word	0x200024ec

0000d304 <usbd_dmareq_process>:
 * Function that have to be called from USBD interrupt handler.
 * It have to be called when all the interrupts connected with endpoints transfer
 * and DMA transfer are already handled.
 */
static void usbd_dmareq_process(void)
{
    d304:	b590      	push	{r4, r7, lr}
    d306:	b08d      	sub	sp, #52	; 0x34
    d308:	af00      	add	r7, sp, #0
    if (!m_dma_pending)
    d30a:	4b90      	ldr	r3, [pc, #576]	; (d54c <usbd_dmareq_process+0x248>)
    d30c:	781b      	ldrb	r3, [r3, #0]
    d30e:	f083 0301 	eor.w	r3, r3, #1
    d312:	b2db      	uxtb	r3, r3
    d314:	2b00      	cmp	r3, #0
    d316:	f000 8114 	beq.w	d542 <usbd_dmareq_process+0x23e>
    {
        uint32_t req;
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    d31a:	e107      	b.n	d52c <usbd_dmareq_process+0x228>
        {
            uint8_t pos;
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    d31c:	6a3b      	ldr	r3, [r7, #32]
    d31e:	f003 2301 	and.w	r3, r3, #16777472	; 0x1000100
    d322:	2b00      	cmp	r3, #0
    d324:	d009      	beq.n	d33a <usbd_dmareq_process+0x36>
            {
                pos = usbd_dma_scheduler_algorithm(req & USBD_EPISO_BIT_MASK);
    d326:	6a3b      	ldr	r3, [r7, #32]
    d328:	f003 2301 	and.w	r3, r3, #16777472	; 0x1000100
    d32c:	4618      	mov	r0, r3
    d32e:	f00f f955 	bl	1c5dc <usbd_dma_scheduler_algorithm>
    d332:	4603      	mov	r3, r0
    d334:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    d338:	e005      	b.n	d346 <usbd_dmareq_process+0x42>
            }
            else
            {
                pos = usbd_dma_scheduler_algorithm(req);
    d33a:	6a38      	ldr	r0, [r7, #32]
    d33c:	f00f f94e 	bl	1c5dc <usbd_dma_scheduler_algorithm>
    d340:	4603      	mov	r3, r0
    d342:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            nrfx_usbd_ep_t ep = bit2ep(pos);
    d346:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d34a:	4618      	mov	r0, r3
    d34c:	f00f f888 	bl	1c460 <bit2ep>
    d350:	4603      	mov	r3, r0
    d352:	77fb      	strb	r3, [r7, #31]
            usbd_ep_state_t * p_state = ep_state_access(ep);
    d354:	7ffb      	ldrb	r3, [r7, #31]
    d356:	4618      	mov	r0, r3
    d358:	f7ff fa7a 	bl	c850 <ep_state_access>
    d35c:	61b8      	str	r0, [r7, #24]
            nrfx_usbd_ep_transfer_t transfer;
            bool continue_transfer;

            NRFX_STATIC_ASSERT(offsetof(usbd_ep_state_t, handler.feeder) ==
                offsetof(usbd_ep_state_t, handler.consumer));
            NRFX_ASSERT((p_state->handler.feeder) != NULL);
    d35e:	69bb      	ldr	r3, [r7, #24]
    d360:	681b      	ldr	r3, [r3, #0]
    d362:	2b00      	cmp	r3, #0
    d364:	d106      	bne.n	d374 <usbd_dmareq_process+0x70>
    d366:	4b7a      	ldr	r3, [pc, #488]	; (d550 <usbd_dmareq_process+0x24c>)
    d368:	4a7a      	ldr	r2, [pc, #488]	; (d554 <usbd_dmareq_process+0x250>)
    d36a:	f240 5155 	movw	r1, #1365	; 0x555
    d36e:	487a      	ldr	r0, [pc, #488]	; (d558 <usbd_dmareq_process+0x254>)
    d370:	f7f3 fa04 	bl	77c <__assert_func>

            if (NRF_USBD_EPIN_CHECK(ep))
    d374:	f997 301f 	ldrsb.w	r3, [r7, #31]
    d378:	2b00      	cmp	r3, #0
    d37a:	da14      	bge.n	d3a6 <usbd_dmareq_process+0xa2>
            {
                /* Device -> Host */
                continue_transfer = p_state->handler.feeder(
    d37c:	69bb      	ldr	r3, [r7, #24]
    d37e:	681b      	ldr	r3, [r3, #0]
    d380:	69ba      	ldr	r2, [r7, #24]
    d382:	6851      	ldr	r1, [r2, #4]
                    &transfer,
                    p_state->p_context,
                    p_state->max_packet_size);
    d384:	69ba      	ldr	r2, [r7, #24]
    d386:	8992      	ldrh	r2, [r2, #12]
                continue_transfer = p_state->handler.feeder(
    d388:	f107 0008 	add.w	r0, r7, #8
    d38c:	4798      	blx	r3
    d38e:	4603      	mov	r3, r0
    d390:	75fb      	strb	r3, [r7, #23]

                if (!continue_transfer)
    d392:	7dfb      	ldrb	r3, [r7, #23]
    d394:	f083 0301 	eor.w	r3, r3, #1
    d398:	b2db      	uxtb	r3, r3
    d39a:	2b00      	cmp	r3, #0
    d39c:	d053      	beq.n	d446 <usbd_dmareq_process+0x142>
                {
                    p_state->handler.feeder = NULL;
    d39e:	69bb      	ldr	r3, [r7, #24]
    d3a0:	2200      	movs	r2, #0
    d3a2:	601a      	str	r2, [r3, #0]
    d3a4:	e04f      	b.n	d446 <usbd_dmareq_process+0x142>
                }
            }
            else
            {
                /* Host -> Device */
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    d3a6:	7ffb      	ldrb	r3, [r7, #31]
    d3a8:	4618      	mov	r0, r3
    d3aa:	f00f f96f 	bl	1c68c <nrfx_usbd_epout_size_get>
    d3ae:	6138      	str	r0, [r7, #16]
                continue_transfer = p_state->handler.consumer(
    d3b0:	69bb      	ldr	r3, [r7, #24]
    d3b2:	681c      	ldr	r4, [r3, #0]
    d3b4:	69bb      	ldr	r3, [r7, #24]
    d3b6:	6859      	ldr	r1, [r3, #4]
                    &transfer,
                    p_state->p_context,
                    p_state->max_packet_size,
    d3b8:	69bb      	ldr	r3, [r7, #24]
    d3ba:	899b      	ldrh	r3, [r3, #12]
                continue_transfer = p_state->handler.consumer(
    d3bc:	461a      	mov	r2, r3
    d3be:	f107 0008 	add.w	r0, r7, #8
    d3c2:	693b      	ldr	r3, [r7, #16]
    d3c4:	47a0      	blx	r4
    d3c6:	4603      	mov	r3, r0
    d3c8:	75fb      	strb	r3, [r7, #23]
                    rx_size);

                if (transfer.p_data.rx == NULL)
    d3ca:	68bb      	ldr	r3, [r7, #8]
    d3cc:	2b00      	cmp	r3, #0
    d3ce:	d109      	bne.n	d3e4 <usbd_dmareq_process+0xe0>
                {
                    /* Dropping transfer - allow processing */
                    NRFX_ASSERT(transfer.size == 0);
    d3d0:	68fb      	ldr	r3, [r7, #12]
    d3d2:	2b00      	cmp	r3, #0
    d3d4:	d02e      	beq.n	d434 <usbd_dmareq_process+0x130>
    d3d6:	4b61      	ldr	r3, [pc, #388]	; (d55c <usbd_dmareq_process+0x258>)
    d3d8:	4a5e      	ldr	r2, [pc, #376]	; (d554 <usbd_dmareq_process+0x250>)
    d3da:	f240 5171 	movw	r1, #1393	; 0x571
    d3de:	485e      	ldr	r0, [pc, #376]	; (d558 <usbd_dmareq_process+0x254>)
    d3e0:	f7f3 f9cc 	bl	77c <__assert_func>
                }
                else if (transfer.size < rx_size)
    d3e4:	68fb      	ldr	r3, [r7, #12]
    d3e6:	693a      	ldr	r2, [r7, #16]
    d3e8:	429a      	cmp	r2, r3
    d3ea:	d918      	bls.n	d41e <usbd_dmareq_process+0x11a>
                {
                    NRFX_LOG_DEBUG("Endpoint %x overload (r: %u, e: %u)", ep, rx_size, transfer.size);
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    d3ec:	69bb      	ldr	r3, [r7, #24]
    d3ee:	2202      	movs	r2, #2
    d3f0:	739a      	strb	r2, [r3, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    d3f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d3f6:	2201      	movs	r2, #1
    d3f8:	fa02 f303 	lsl.w	r3, r2, r3
    d3fc:	43db      	mvns	r3, r3
    d3fe:	4619      	mov	r1, r3
    d400:	4857      	ldr	r0, [pc, #348]	; (d560 <usbd_dmareq_process+0x25c>)
    d402:	f00e ff2a 	bl	1c25a <atomic_and>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    d406:	2306      	movs	r3, #6
    d408:	713b      	strb	r3, [r7, #4]
    d40a:	7ffb      	ldrb	r3, [r7, #31]
    d40c:	71bb      	strb	r3, [r7, #6]
    d40e:	2302      	movs	r3, #2
    d410:	71fb      	strb	r3, [r7, #7]
                    m_event_handler(&evt);
    d412:	4b54      	ldr	r3, [pc, #336]	; (d564 <usbd_dmareq_process+0x260>)
    d414:	681b      	ldr	r3, [r3, #0]
    d416:	1d3a      	adds	r2, r7, #4
    d418:	4610      	mov	r0, r2
    d41a:	4798      	blx	r3
    d41c:	e086      	b.n	d52c <usbd_dmareq_process+0x228>
                    continue;
                }
                else
                {
                    /* Nothing to do - only check integrity if assertions are enabled */
                    NRFX_ASSERT(transfer.size == rx_size);
    d41e:	68fb      	ldr	r3, [r7, #12]
    d420:	693a      	ldr	r2, [r7, #16]
    d422:	429a      	cmp	r2, r3
    d424:	d006      	beq.n	d434 <usbd_dmareq_process+0x130>
    d426:	4b50      	ldr	r3, [pc, #320]	; (d568 <usbd_dmareq_process+0x264>)
    d428:	4a4a      	ldr	r2, [pc, #296]	; (d554 <usbd_dmareq_process+0x250>)
    d42a:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    d42e:	484a      	ldr	r0, [pc, #296]	; (d558 <usbd_dmareq_process+0x254>)
    d430:	f7f3 f9a4 	bl	77c <__assert_func>
                }

                if (!continue_transfer)
    d434:	7dfb      	ldrb	r3, [r7, #23]
    d436:	f083 0301 	eor.w	r3, r3, #1
    d43a:	b2db      	uxtb	r3, r3
    d43c:	2b00      	cmp	r3, #0
    d43e:	d002      	beq.n	d446 <usbd_dmareq_process+0x142>
                {
                    p_state->handler.consumer = NULL;
    d440:	69bb      	ldr	r3, [r7, #24]
    d442:	2200      	movs	r2, #0
    d444:	601a      	str	r2, [r3, #0]
                }
            }

            usbd_dma_pending_set();
    d446:	f7ff fa73 	bl	c930 <usbd_dma_pending_set>
            m_ep_ready &= ~(1U << pos);
    d44a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d44e:	2201      	movs	r2, #1
    d450:	fa02 f303 	lsl.w	r3, r2, r3
    d454:	43da      	mvns	r2, r3
    d456:	4b45      	ldr	r3, [pc, #276]	; (d56c <usbd_dmareq_process+0x268>)
    d458:	681b      	ldr	r3, [r3, #0]
    d45a:	4013      	ands	r3, r2
    d45c:	4a43      	ldr	r2, [pc, #268]	; (d56c <usbd_dmareq_process+0x268>)
    d45e:	6013      	str	r3, [r2, #0]
                    "USB DMA process: Starting transfer on EP: %x, size: %u",
                    ep,
                    transfer.size);
            }
            /* Update number of currently transferred bytes */
            p_state->transfer_cnt += transfer.size;
    d460:	69bb      	ldr	r3, [r7, #24]
    d462:	689a      	ldr	r2, [r3, #8]
    d464:	68fb      	ldr	r3, [r7, #12]
    d466:	441a      	add	r2, r3
    d468:	69bb      	ldr	r3, [r7, #24]
    d46a:	609a      	str	r2, [r3, #8]
            /* Start transfer to the endpoint buffer */
            nrf_usbd_ep_easydma_set(ep, transfer.p_data.addr, (uint32_t)transfer.size);
    d46c:	68b9      	ldr	r1, [r7, #8]
    d46e:	68fa      	ldr	r2, [r7, #12]
    d470:	7ffb      	ldrb	r3, [r7, #31]
    d472:	4618      	mov	r0, r3
    d474:	f7fe fec2 	bl	c1fc <nrf_usbd_ep_easydma_set>

            if (nrfx_usbd_errata_104())
    d478:	f00e ffb2 	bl	1c3e0 <nrfx_usbd_errata_104>
    d47c:	4603      	mov	r3, r0
    d47e:	2b00      	cmp	r3, #0
    d480:	d03f      	beq.n	d502 <usbd_dmareq_process+0x1fe>
            {
                uint32_t cnt_end = (uint32_t)(-1);
    d482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d486:	62bb      	str	r3, [r7, #40]	; 0x28
                do
                {
                    uint32_t cnt = (uint32_t)(-1);
    d488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d48c:	627b      	str	r3, [r7, #36]	; 0x24
                    do
                    {
                        nrf_usbd_event_clear(NRF_USBD_EVENT_STARTED);
    d48e:	f44f 7082 	mov.w	r0, #260	; 0x104
    d492:	f00e ff2c 	bl	1c2ee <nrf_usbd_event_clear>
                        usbd_dma_start(ep);
    d496:	7ffb      	ldrb	r3, [r7, #31]
    d498:	4618      	mov	r0, r3
    d49a:	f00e fff8 	bl	1c48e <usbd_dma_start>
                        nrfx_systick_delay_us(2);
    d49e:	2002      	movs	r0, #2
    d4a0:	f7fe faa8 	bl	b9f4 <nrfx_systick_delay_us>
                        ++cnt;
    d4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d4a6:	3301      	adds	r3, #1
    d4a8:	627b      	str	r3, [r7, #36]	; 0x24
                    }while (!nrf_usbd_event_check(NRF_USBD_EVENT_STARTED));
    d4aa:	f44f 7082 	mov.w	r0, #260	; 0x104
    d4ae:	f00e ff32 	bl	1c316 <nrf_usbd_event_check>
    d4b2:	4603      	mov	r3, r0
    d4b4:	f083 0301 	eor.w	r3, r3, #1
    d4b8:	b2db      	uxtb	r3, r3
    d4ba:	2b00      	cmp	r3, #0
    d4bc:	d1e7      	bne.n	d48e <usbd_dmareq_process+0x18a>
                    if (cnt)
                    {
                        NRFX_USBD_LOG_PROTO1_FIX_PRINTF("   DMA restarted: %u times", cnt);
                    }

                    nrfx_systick_delay_us(30);
    d4be:	201e      	movs	r0, #30
    d4c0:	f7fe fa98 	bl	b9f4 <nrfx_systick_delay_us>
                    while (0 == (0x20 & *((volatile uint32_t *)(NRF_USBD_BASE + 0x474))))
    d4c4:	e002      	b.n	d4cc <usbd_dmareq_process+0x1c8>
                    {
                        nrfx_systick_delay_us(2);
    d4c6:	2002      	movs	r0, #2
    d4c8:	f7fe fa94 	bl	b9f4 <nrfx_systick_delay_us>
                    while (0 == (0x20 & *((volatile uint32_t *)(NRF_USBD_BASE + 0x474))))
    d4cc:	4b28      	ldr	r3, [pc, #160]	; (d570 <usbd_dmareq_process+0x26c>)
    d4ce:	681b      	ldr	r3, [r3, #0]
    d4d0:	f003 0320 	and.w	r3, r3, #32
    d4d4:	2b00      	cmp	r3, #0
    d4d6:	d0f6      	beq.n	d4c6 <usbd_dmareq_process+0x1c2>
                    }
                    nrfx_systick_delay_us(1);
    d4d8:	2001      	movs	r0, #1
    d4da:	f7fe fa8b 	bl	b9f4 <nrfx_systick_delay_us>

                    ++cnt_end;
    d4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d4e0:	3301      	adds	r3, #1
    d4e2:	62bb      	str	r3, [r7, #40]	; 0x28
                } while (!nrf_usbd_event_check(nrfx_usbd_ep_to_endevent(ep)));
    d4e4:	7ffb      	ldrb	r3, [r7, #31]
    d4e6:	4618      	mov	r0, r3
    d4e8:	f7fe ff2c 	bl	c344 <nrfx_usbd_ep_to_endevent>
    d4ec:	4603      	mov	r3, r0
    d4ee:	4618      	mov	r0, r3
    d4f0:	f00e ff11 	bl	1c316 <nrf_usbd_event_check>
    d4f4:	4603      	mov	r3, r0
    d4f6:	f083 0301 	eor.w	r3, r3, #1
    d4fa:	b2db      	uxtb	r3, r3
    d4fc:	2b00      	cmp	r3, #0
    d4fe:	d1c3      	bne.n	d488 <usbd_dmareq_process+0x184>
            if (NRFX_USBD_DMAREQ_PROCESS_DEBUG)
            {
                NRFX_LOG_DEBUG("USB DMA process - finishing");
            }
            /* Transfer started - exit the loop */
            break;
    d500:	e01f      	b.n	d542 <usbd_dmareq_process+0x23e>
                usbd_dma_start(ep);
    d502:	7ffb      	ldrb	r3, [r7, #31]
    d504:	4618      	mov	r0, r3
    d506:	f00e ffc2 	bl	1c48e <usbd_dma_start>
                while (!nrf_usbd_event_check(nrfx_usbd_ep_to_endevent(ep)))
    d50a:	bf00      	nop
    d50c:	7ffb      	ldrb	r3, [r7, #31]
    d50e:	4618      	mov	r0, r3
    d510:	f7fe ff18 	bl	c344 <nrfx_usbd_ep_to_endevent>
    d514:	4603      	mov	r3, r0
    d516:	4618      	mov	r0, r3
    d518:	f00e fefd 	bl	1c316 <nrf_usbd_event_check>
    d51c:	4603      	mov	r3, r0
    d51e:	f083 0301 	eor.w	r3, r3, #1
    d522:	b2db      	uxtb	r3, r3
    d524:	2b00      	cmp	r3, #0
    d526:	d1f1      	bne.n	d50c <usbd_dmareq_process+0x208>
            break;
    d528:	bf00      	nop
        if (NRFX_USBD_DMAREQ_PROCESS_DEBUG)
        {
            NRFX_LOG_DEBUG("USB DMA process - EasyDMA busy");
        }
    }
}
    d52a:	e00a      	b.n	d542 <usbd_dmareq_process+0x23e>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    d52c:	4b0c      	ldr	r3, [pc, #48]	; (d560 <usbd_dmareq_process+0x25c>)
    d52e:	681a      	ldr	r2, [r3, #0]
    d530:	4b0e      	ldr	r3, [pc, #56]	; (d56c <usbd_dmareq_process+0x268>)
    d532:	681b      	ldr	r3, [r3, #0]
    d534:	4013      	ands	r3, r2
    d536:	623b      	str	r3, [r7, #32]
    d538:	6a3b      	ldr	r3, [r7, #32]
    d53a:	2b00      	cmp	r3, #0
    d53c:	f47f aeee 	bne.w	d31c <usbd_dmareq_process+0x18>
}
    d540:	e7ff      	b.n	d542 <usbd_dmareq_process+0x23e>
    d542:	bf00      	nop
    d544:	3734      	adds	r7, #52	; 0x34
    d546:	46bd      	mov	sp, r7
    d548:	bd90      	pop	{r4, r7, pc}
    d54a:	bf00      	nop
    d54c:	20006243 	.word	0x20006243
    d550:	0002dee8 	.word	0x0002dee8
    d554:	0002ec98 	.word	0x0002ec98
    d558:	0002dd40 	.word	0x0002dd40
    d55c:	0002df14 	.word	0x0002df14
    d560:	200024e8 	.word	0x200024e8
    d564:	200024e0 	.word	0x200024e0
    d568:	0002df28 	.word	0x0002df28
    d56c:	200024e4 	.word	0x200024e4
    d570:	40027474 	.word	0x40027474

0000d574 <nrfx_usbd_irq_handler>:
 * @name Interrupt handlers
 *
 * @{
 */
void nrfx_usbd_irq_handler(void)
{
    d574:	b580      	push	{r7, lr}
    d576:	b08a      	sub	sp, #40	; 0x28
    d578:	af00      	add	r7, sp, #0
    const uint32_t enabled = nrf_usbd_int_enable_get();
    d57a:	f7fe fac5 	bl	bb08 <nrf_usbd_int_enable_get>
    d57e:	61b8      	str	r0, [r7, #24]
    uint32_t to_process = enabled;
    d580:	69bb      	ldr	r3, [r7, #24]
    d582:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t active = 0;
    d584:	2300      	movs	r3, #0
    d586:	623b      	str	r3, [r7, #32]

    /* Check all enabled interrupts */
    while (to_process)
    d588:	e024      	b.n	d5d4 <nrfx_usbd_irq_handler+0x60>
    d58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d58c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
    d58e:	68fb      	ldr	r3, [r7, #12]
    d590:	fa93 f3a3 	rbit	r3, r3
    d594:	60bb      	str	r3, [r7, #8]
  return result;
    d596:	68bb      	ldr	r3, [r7, #8]
    {
        uint8_t event_nr = __CLZ(__RBIT(to_process));
    d598:	fab3 f383 	clz	r3, r3
    d59c:	75fb      	strb	r3, [r7, #23]
        if (nrf_usbd_event_get_and_clear((nrf_usbd_event_t)nrfx_bitpos_to_event(event_nr)))
    d59e:	7dfb      	ldrb	r3, [r7, #23]
    d5a0:	4618      	mov	r0, r3
    d5a2:	f7fe fa91 	bl	bac8 <nrfx_bitpos_to_event>
    d5a6:	4603      	mov	r3, r0
    d5a8:	b29b      	uxth	r3, r3
    d5aa:	4618      	mov	r0, r3
    d5ac:	f00e fec7 	bl	1c33e <nrf_usbd_event_get_and_clear>
    d5b0:	4603      	mov	r3, r0
    d5b2:	2b00      	cmp	r3, #0
    d5b4:	d006      	beq.n	d5c4 <nrfx_usbd_irq_handler+0x50>
        {
            active |= 1UL << event_nr;
    d5b6:	7dfb      	ldrb	r3, [r7, #23]
    d5b8:	2201      	movs	r2, #1
    d5ba:	fa02 f303 	lsl.w	r3, r2, r3
    d5be:	6a3a      	ldr	r2, [r7, #32]
    d5c0:	4313      	orrs	r3, r2
    d5c2:	623b      	str	r3, [r7, #32]
        }
        to_process &= ~(1UL << event_nr);
    d5c4:	7dfb      	ldrb	r3, [r7, #23]
    d5c6:	2201      	movs	r2, #1
    d5c8:	fa02 f303 	lsl.w	r3, r2, r3
    d5cc:	43db      	mvns	r3, r3
    d5ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d5d0:	4013      	ands	r3, r2
    d5d2:	627b      	str	r3, [r7, #36]	; 0x24
    while (to_process)
    d5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d5d6:	2b00      	cmp	r3, #0
    d5d8:	d1d7      	bne.n	d58a <nrfx_usbd_irq_handler+0x16>
    }

    if (nrfx_usbd_errata_104())
    d5da:	f00e ff01 	bl	1c3e0 <nrfx_usbd_errata_104>
    d5de:	4603      	mov	r3, r0
    d5e0:	2b00      	cmp	r3, #0
    d5e2:	f000 80c3 	beq.w	d76c <nrfx_usbd_irq_handler+0x1f8>
    {
        /* Event correcting */
        if ((!m_dma_pending) && (0 != (active & (USBD_INTEN_SOF_Msk))))
    d5e6:	4b7a      	ldr	r3, [pc, #488]	; (d7d0 <nrfx_usbd_irq_handler+0x25c>)
    d5e8:	781b      	ldrb	r3, [r3, #0]
    d5ea:	f083 0301 	eor.w	r3, r3, #1
    d5ee:	b2db      	uxtb	r3, r3
    d5f0:	2b00      	cmp	r3, #0
    d5f2:	f000 80bb 	beq.w	d76c <nrfx_usbd_irq_handler+0x1f8>
    d5f6:	6a3b      	ldr	r3, [r7, #32]
    d5f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    d5fc:	2b00      	cmp	r3, #0
    d5fe:	f000 80b5 	beq.w	d76c <nrfx_usbd_irq_handler+0x1f8>
        {
            uint8_t usbi, uoi, uii;
            /* Testing */
            *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7A9;
    d602:	4b74      	ldr	r3, [pc, #464]	; (d7d4 <nrfx_usbd_irq_handler+0x260>)
    d604:	f240 72a9 	movw	r2, #1961	; 0x7a9
    d608:	601a      	str	r2, [r3, #0]
            uii = (uint8_t)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    d60a:	4b73      	ldr	r3, [pc, #460]	; (d7d8 <nrfx_usbd_irq_handler+0x264>)
    d60c:	681b      	ldr	r3, [r3, #0]
    d60e:	777b      	strb	r3, [r7, #29]
            if (0 != uii)
    d610:	7f7b      	ldrb	r3, [r7, #29]
    d612:	2b00      	cmp	r3, #0
    d614:	d005      	beq.n	d622 <nrfx_usbd_irq_handler+0xae>
            {
                uii &= (uint8_t)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    d616:	4b70      	ldr	r3, [pc, #448]	; (d7d8 <nrfx_usbd_irq_handler+0x264>)
    d618:	681b      	ldr	r3, [r3, #0]
    d61a:	b2da      	uxtb	r2, r3
    d61c:	7f7b      	ldrb	r3, [r7, #29]
    d61e:	4013      	ands	r3, r2
    d620:	777b      	strb	r3, [r7, #29]
            }

            *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AA;
    d622:	4b6c      	ldr	r3, [pc, #432]	; (d7d4 <nrfx_usbd_irq_handler+0x260>)
    d624:	f240 72aa 	movw	r2, #1962	; 0x7aa
    d628:	601a      	str	r2, [r3, #0]
            uoi = (uint8_t)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    d62a:	4b6b      	ldr	r3, [pc, #428]	; (d7d8 <nrfx_usbd_irq_handler+0x264>)
    d62c:	681b      	ldr	r3, [r3, #0]
    d62e:	77bb      	strb	r3, [r7, #30]
            if (0 != uoi)
    d630:	7fbb      	ldrb	r3, [r7, #30]
    d632:	2b00      	cmp	r3, #0
    d634:	d005      	beq.n	d642 <nrfx_usbd_irq_handler+0xce>
            {
                uoi &= (uint8_t)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    d636:	4b68      	ldr	r3, [pc, #416]	; (d7d8 <nrfx_usbd_irq_handler+0x264>)
    d638:	681b      	ldr	r3, [r3, #0]
    d63a:	b2da      	uxtb	r2, r3
    d63c:	7fbb      	ldrb	r3, [r7, #30]
    d63e:	4013      	ands	r3, r2
    d640:	77bb      	strb	r3, [r7, #30]
            }
            *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AB;
    d642:	4b64      	ldr	r3, [pc, #400]	; (d7d4 <nrfx_usbd_irq_handler+0x260>)
    d644:	f240 72ab 	movw	r2, #1963	; 0x7ab
    d648:	601a      	str	r2, [r3, #0]
            usbi = (uint8_t)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    d64a:	4b63      	ldr	r3, [pc, #396]	; (d7d8 <nrfx_usbd_irq_handler+0x264>)
    d64c:	681b      	ldr	r3, [r3, #0]
    d64e:	77fb      	strb	r3, [r7, #31]
            if (0 != usbi)
    d650:	7ffb      	ldrb	r3, [r7, #31]
    d652:	2b00      	cmp	r3, #0
    d654:	d005      	beq.n	d662 <nrfx_usbd_irq_handler+0xee>
            {
                usbi &= (uint8_t)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    d656:	4b60      	ldr	r3, [pc, #384]	; (d7d8 <nrfx_usbd_irq_handler+0x264>)
    d658:	681b      	ldr	r3, [r3, #0]
    d65a:	b2da      	uxtb	r2, r3
    d65c:	7ffb      	ldrb	r3, [r7, #31]
    d65e:	4013      	ands	r3, r2
    d660:	77fb      	strb	r3, [r7, #31]
            }
            /* Processing */
            *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AC;
    d662:	4b5c      	ldr	r3, [pc, #368]	; (d7d4 <nrfx_usbd_irq_handler+0x260>)
    d664:	f240 72ac 	movw	r2, #1964	; 0x7ac
    d668:	601a      	str	r2, [r3, #0]
            uii &= (uint8_t)*((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    d66a:	4b5b      	ldr	r3, [pc, #364]	; (d7d8 <nrfx_usbd_irq_handler+0x264>)
    d66c:	681b      	ldr	r3, [r3, #0]
    d66e:	b2da      	uxtb	r2, r3
    d670:	7f7b      	ldrb	r3, [r7, #29]
    d672:	4013      	ands	r3, r2
    d674:	777b      	strb	r3, [r7, #29]
            if (0 != uii)
    d676:	7f7b      	ldrb	r3, [r7, #29]
    d678:	2b00      	cmp	r3, #0
    d67a:	d00f      	beq.n	d69c <nrfx_usbd_irq_handler+0x128>
            {
                uint8_t rb;
                m_simulated_dataepstatus |= ((uint32_t)uii) << NRFX_USBD_EPIN_BITPOS_0;
    d67c:	7f7a      	ldrb	r2, [r7, #29]
    d67e:	4b57      	ldr	r3, [pc, #348]	; (d7dc <nrfx_usbd_irq_handler+0x268>)
    d680:	681b      	ldr	r3, [r3, #0]
    d682:	4313      	orrs	r3, r2
    d684:	4a55      	ldr	r2, [pc, #340]	; (d7dc <nrfx_usbd_irq_handler+0x268>)
    d686:	6013      	str	r3, [r2, #0]
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7A9;
    d688:	4b52      	ldr	r3, [pc, #328]	; (d7d4 <nrfx_usbd_irq_handler+0x260>)
    d68a:	f240 72a9 	movw	r2, #1961	; 0x7a9
    d68e:	601a      	str	r2, [r3, #0]
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) = uii;
    d690:	4a51      	ldr	r2, [pc, #324]	; (d7d8 <nrfx_usbd_irq_handler+0x264>)
    d692:	7f7b      	ldrb	r3, [r7, #29]
    d694:	6013      	str	r3, [r2, #0]
                rb = (uint8_t)*((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    d696:	4b50      	ldr	r3, [pc, #320]	; (d7d8 <nrfx_usbd_irq_handler+0x264>)
    d698:	681b      	ldr	r3, [r3, #0]
    d69a:	75bb      	strb	r3, [r7, #22]
                NRFX_USBD_LOG_PROTO1_FIX_PRINTF("   uii: 0x%.2x (0x%.2x)", uii, rb);
                (void)rb;
            }

            *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AD;
    d69c:	4b4d      	ldr	r3, [pc, #308]	; (d7d4 <nrfx_usbd_irq_handler+0x260>)
    d69e:	f240 72ad 	movw	r2, #1965	; 0x7ad
    d6a2:	601a      	str	r2, [r3, #0]
            uoi &= (uint8_t)*((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    d6a4:	4b4c      	ldr	r3, [pc, #304]	; (d7d8 <nrfx_usbd_irq_handler+0x264>)
    d6a6:	681b      	ldr	r3, [r3, #0]
    d6a8:	b2da      	uxtb	r2, r3
    d6aa:	7fbb      	ldrb	r3, [r7, #30]
    d6ac:	4013      	ands	r3, r2
    d6ae:	77bb      	strb	r3, [r7, #30]
            if (0 != uoi)
    d6b0:	7fbb      	ldrb	r3, [r7, #30]
    d6b2:	2b00      	cmp	r3, #0
    d6b4:	d010      	beq.n	d6d8 <nrfx_usbd_irq_handler+0x164>
            {
                uint8_t rb;
                m_simulated_dataepstatus |= ((uint32_t)uoi) << NRFX_USBD_EPOUT_BITPOS_0;
    d6b6:	7fbb      	ldrb	r3, [r7, #30]
    d6b8:	041a      	lsls	r2, r3, #16
    d6ba:	4b48      	ldr	r3, [pc, #288]	; (d7dc <nrfx_usbd_irq_handler+0x268>)
    d6bc:	681b      	ldr	r3, [r3, #0]
    d6be:	4313      	orrs	r3, r2
    d6c0:	4a46      	ldr	r2, [pc, #280]	; (d7dc <nrfx_usbd_irq_handler+0x268>)
    d6c2:	6013      	str	r3, [r2, #0]
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AA;
    d6c4:	4b43      	ldr	r3, [pc, #268]	; (d7d4 <nrfx_usbd_irq_handler+0x260>)
    d6c6:	f240 72aa 	movw	r2, #1962	; 0x7aa
    d6ca:	601a      	str	r2, [r3, #0]
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) = uoi;
    d6cc:	4a42      	ldr	r2, [pc, #264]	; (d7d8 <nrfx_usbd_irq_handler+0x264>)
    d6ce:	7fbb      	ldrb	r3, [r7, #30]
    d6d0:	6013      	str	r3, [r2, #0]
                rb = (uint8_t)*((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    d6d2:	4b41      	ldr	r3, [pc, #260]	; (d7d8 <nrfx_usbd_irq_handler+0x264>)
    d6d4:	681b      	ldr	r3, [r3, #0]
    d6d6:	757b      	strb	r3, [r7, #21]
                NRFX_USBD_LOG_PROTO1_FIX_PRINTF("   uoi: 0x%.2u (0x%.2x)", uoi, rb);
                (void)rb;
            }

            *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AE;
    d6d8:	4b3e      	ldr	r3, [pc, #248]	; (d7d4 <nrfx_usbd_irq_handler+0x260>)
    d6da:	f240 72ae 	movw	r2, #1966	; 0x7ae
    d6de:	601a      	str	r2, [r3, #0]
            usbi &= (uint8_t)*((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    d6e0:	4b3d      	ldr	r3, [pc, #244]	; (d7d8 <nrfx_usbd_irq_handler+0x264>)
    d6e2:	681b      	ldr	r3, [r3, #0]
    d6e4:	b2da      	uxtb	r2, r3
    d6e6:	7ffb      	ldrb	r3, [r7, #31]
    d6e8:	4013      	ands	r3, r2
    d6ea:	77fb      	strb	r3, [r7, #31]
            if (0 != usbi)
    d6ec:	7ffb      	ldrb	r3, [r7, #31]
    d6ee:	2b00      	cmp	r3, #0
    d6f0:	d01b      	beq.n	d72a <nrfx_usbd_irq_handler+0x1b6>
            {
                uint8_t rb;
                if (usbi & 0x01)
    d6f2:	7ffb      	ldrb	r3, [r7, #31]
    d6f4:	f003 0301 	and.w	r3, r3, #1
    d6f8:	2b00      	cmp	r3, #0
    d6fa:	d003      	beq.n	d704 <nrfx_usbd_irq_handler+0x190>
                {
                    active |= USBD_INTEN_EP0SETUP_Msk;
    d6fc:	6a3b      	ldr	r3, [r7, #32]
    d6fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    d702:	623b      	str	r3, [r7, #32]
                }
                if (usbi & 0x10)
    d704:	7ffb      	ldrb	r3, [r7, #31]
    d706:	f003 0310 	and.w	r3, r3, #16
    d70a:	2b00      	cmp	r3, #0
    d70c:	d003      	beq.n	d716 <nrfx_usbd_irq_handler+0x1a2>
                {
                    active |= USBD_INTEN_USBRESET_Msk;
    d70e:	6a3b      	ldr	r3, [r7, #32]
    d710:	f043 0301 	orr.w	r3, r3, #1
    d714:	623b      	str	r3, [r7, #32]
                }
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AB;
    d716:	4b2f      	ldr	r3, [pc, #188]	; (d7d4 <nrfx_usbd_irq_handler+0x260>)
    d718:	f240 72ab 	movw	r2, #1963	; 0x7ab
    d71c:	601a      	str	r2, [r3, #0]
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) = usbi;
    d71e:	4a2e      	ldr	r2, [pc, #184]	; (d7d8 <nrfx_usbd_irq_handler+0x264>)
    d720:	7ffb      	ldrb	r3, [r7, #31]
    d722:	6013      	str	r3, [r2, #0]
                rb = (uint8_t)*((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    d724:	4b2c      	ldr	r3, [pc, #176]	; (d7d8 <nrfx_usbd_irq_handler+0x264>)
    d726:	681b      	ldr	r3, [r3, #0]
    d728:	753b      	strb	r3, [r7, #20]
                NRFX_USBD_LOG_PROTO1_FIX_PRINTF("   usbi: 0x%.2u (0x%.2x)", usbi, rb);
                (void)rb;
            }

            if (0 != (m_simulated_dataepstatus &
    d72a:	4b2c      	ldr	r3, [pc, #176]	; (d7dc <nrfx_usbd_irq_handler+0x268>)
    d72c:	681b      	ldr	r3, [r3, #0]
    d72e:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
    d732:	2b00      	cmp	r3, #0
    d734:	d005      	beq.n	d742 <nrfx_usbd_irq_handler+0x1ce>
                ~((1U << NRFX_USBD_EPOUT_BITPOS_0) | (1U << NRFX_USBD_EPIN_BITPOS_0))))
            {
                active |= enabled & NRF_USBD_INT_DATAEP_MASK;
    d736:	69bb      	ldr	r3, [r7, #24]
    d738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    d73c:	6a3a      	ldr	r2, [r7, #32]
    d73e:	4313      	orrs	r3, r2
    d740:	623b      	str	r3, [r7, #32]
            }
            if (0 != (m_simulated_dataepstatus &
    d742:	4b26      	ldr	r3, [pc, #152]	; (d7dc <nrfx_usbd_irq_handler+0x268>)
    d744:	681b      	ldr	r3, [r3, #0]
    d746:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
    d74a:	2b00      	cmp	r3, #0
    d74c:	d00e      	beq.n	d76c <nrfx_usbd_irq_handler+0x1f8>
                ((1U << NRFX_USBD_EPOUT_BITPOS_0) | (1U << NRFX_USBD_EPIN_BITPOS_0))))
            {
                if (0 != (enabled & NRF_USBD_INT_EP0DATADONE_MASK))
    d74e:	69bb      	ldr	r3, [r7, #24]
    d750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    d754:	2b00      	cmp	r3, #0
    d756:	d009      	beq.n	d76c <nrfx_usbd_irq_handler+0x1f8>
                {
                    m_simulated_dataepstatus &=
    d758:	4b20      	ldr	r3, [pc, #128]	; (d7dc <nrfx_usbd_irq_handler+0x268>)
    d75a:	681b      	ldr	r3, [r3, #0]
    d75c:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
    d760:	4a1e      	ldr	r2, [pc, #120]	; (d7dc <nrfx_usbd_irq_handler+0x268>)
    d762:	6013      	str	r3, [r2, #0]
                        ~((1U << NRFX_USBD_EPOUT_BITPOS_0) | (1U << NRFX_USBD_EPIN_BITPOS_0));
                    active |= NRF_USBD_INT_EP0DATADONE_MASK;
    d764:	6a3b      	ldr	r3, [r7, #32]
    d766:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d76a:	623b      	str	r3, [r7, #32]
            }
        }
    }

    /* Process the active interrupts */
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    d76c:	6a3b      	ldr	r3, [r7, #32]
    d76e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    d772:	2b00      	cmp	r3, #0
    d774:	bf14      	ite	ne
    d776:	2301      	movne	r3, #1
    d778:	2300      	moveq	r3, #0
    d77a:	74fb      	strb	r3, [r7, #19]
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    d77c:	6a3b      	ldr	r3, [r7, #32]
    d77e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    d782:	623b      	str	r3, [r7, #32]

    while (active)
    d784:	e016      	b.n	d7b4 <nrfx_usbd_irq_handler+0x240>
    d786:	6a3b      	ldr	r3, [r7, #32]
    d788:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
    d78a:	687b      	ldr	r3, [r7, #4]
    d78c:	fa93 f3a3 	rbit	r3, r3
    d790:	603b      	str	r3, [r7, #0]
  return result;
    d792:	683b      	ldr	r3, [r7, #0]
    {
        uint8_t event_nr = __CLZ(__RBIT(active));
    d794:	fab3 f383 	clz	r3, r3
    d798:	74bb      	strb	r3, [r7, #18]
        m_isr[event_nr]();
    d79a:	7cbb      	ldrb	r3, [r7, #18]
    d79c:	4a10      	ldr	r2, [pc, #64]	; (d7e0 <nrfx_usbd_irq_handler+0x26c>)
    d79e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7a2:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    d7a4:	7cbb      	ldrb	r3, [r7, #18]
    d7a6:	2201      	movs	r2, #1
    d7a8:	fa02 f303 	lsl.w	r3, r2, r3
    d7ac:	43db      	mvns	r3, r3
    d7ae:	6a3a      	ldr	r2, [r7, #32]
    d7b0:	4013      	ands	r3, r2
    d7b2:	623b      	str	r3, [r7, #32]
    while (active)
    d7b4:	6a3b      	ldr	r3, [r7, #32]
    d7b6:	2b00      	cmp	r3, #0
    d7b8:	d1e5      	bne.n	d786 <nrfx_usbd_irq_handler+0x212>
    }
    usbd_dmareq_process();
    d7ba:	f7ff fda3 	bl	d304 <usbd_dmareq_process>

    if (setup_active)
    d7be:	7cfb      	ldrb	r3, [r7, #19]
    d7c0:	2b00      	cmp	r3, #0
    d7c2:	d001      	beq.n	d7c8 <nrfx_usbd_irq_handler+0x254>
    {
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    d7c4:	4b07      	ldr	r3, [pc, #28]	; (d7e4 <nrfx_usbd_irq_handler+0x270>)
    d7c6:	4798      	blx	r3
    }
}
    d7c8:	bf00      	nop
    d7ca:	3728      	adds	r7, #40	; 0x28
    d7cc:	46bd      	mov	sp, r7
    d7ce:	bd80      	pop	{r7, pc}
    d7d0:	20006243 	.word	0x20006243
    d7d4:	40027800 	.word	0x40027800
    d7d8:	40027804 	.word	0x40027804
    d7dc:	200024ec 	.word	0x200024ec
    d7e0:	0002eaf8 	.word	0x0002eaf8
    d7e4:	0000d0fd 	.word	0x0000d0fd

0000d7e8 <nrfx_usbd_init>:

/** @} */
/** @} */

nrfx_err_t nrfx_usbd_init(nrfx_usbd_event_handler_t event_handler)
{
    d7e8:	b580      	push	{r7, lr}
    d7ea:	b086      	sub	sp, #24
    d7ec:	af00      	add	r7, sp, #0
    d7ee:	6078      	str	r0, [r7, #4]
    NRFX_ASSERT(event_handler);
    d7f0:	687b      	ldr	r3, [r7, #4]
    d7f2:	2b00      	cmp	r3, #0
    d7f4:	d106      	bne.n	d804 <nrfx_usbd_init+0x1c>
    d7f6:	4b34      	ldr	r3, [pc, #208]	; (d8c8 <nrfx_usbd_init+0xe0>)
    d7f8:	4a34      	ldr	r2, [pc, #208]	; (d8cc <nrfx_usbd_init+0xe4>)
    d7fa:	f240 617e 	movw	r1, #1662	; 0x67e
    d7fe:	4834      	ldr	r0, [pc, #208]	; (d8d0 <nrfx_usbd_init+0xe8>)
    d800:	f7f2 ffbc 	bl	77c <__assert_func>

    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    d804:	4b33      	ldr	r3, [pc, #204]	; (d8d4 <nrfx_usbd_init+0xec>)
    d806:	781b      	ldrb	r3, [r3, #0]
    d808:	2b00      	cmp	r3, #0
    d80a:	d001      	beq.n	d810 <nrfx_usbd_init+0x28>
    {
        return NRFX_ERROR_INVALID_STATE;
    d80c:	4b32      	ldr	r3, [pc, #200]	; (d8d8 <nrfx_usbd_init+0xf0>)
    d80e:	e056      	b.n	d8be <nrfx_usbd_init+0xd6>
    }

    m_event_handler = event_handler;
    d810:	4a32      	ldr	r2, [pc, #200]	; (d8dc <nrfx_usbd_init+0xf4>)
    d812:	687b      	ldr	r3, [r7, #4]
    d814:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    d816:	4b2f      	ldr	r3, [pc, #188]	; (d8d4 <nrfx_usbd_init+0xec>)
    d818:	2201      	movs	r2, #1
    d81a:	701a      	strb	r2, [r3, #0]

    uint8_t n;
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    d81c:	2300      	movs	r3, #0
    d81e:	75fb      	strb	r3, [r7, #23]
    d820:	e022      	b.n	d868 <nrfx_usbd_init+0x80>
    {
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    d822:	7dfb      	ldrb	r3, [r7, #23]
    d824:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d828:	75bb      	strb	r3, [r7, #22]
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    d82a:	7dbb      	ldrb	r3, [r7, #22]
    d82c:	f003 0308 	and.w	r3, r3, #8
    d830:	2b00      	cmp	r3, #0
    d832:	d002      	beq.n	d83a <nrfx_usbd_init+0x52>
    d834:	f44f 7200 	mov.w	r2, #512	; 0x200
    d838:	e000      	b.n	d83c <nrfx_usbd_init+0x54>
    d83a:	2240      	movs	r2, #64	; 0x40
    d83c:	7dbb      	ldrb	r3, [r7, #22]
    d83e:	4611      	mov	r1, r2
    d840:	4618      	mov	r0, r3
    d842:	f000 fa55 	bl	dcf0 <nrfx_usbd_ep_max_packet_size_set>
            (NRFX_USBD_ISOSIZE / 2) : NRFX_USBD_EPSIZE);
        usbd_ep_state_t * p_state = ep_state_access(ep);
    d846:	7dbb      	ldrb	r3, [r7, #22]
    d848:	4618      	mov	r0, r3
    d84a:	f7ff f801 	bl	c850 <ep_state_access>
    d84e:	6138      	str	r0, [r7, #16]
        p_state->status = NRFX_USBD_EP_OK;
    d850:	693b      	ldr	r3, [r7, #16]
    d852:	2200      	movs	r2, #0
    d854:	739a      	strb	r2, [r3, #14]
        p_state->handler.feeder = NULL;
    d856:	693b      	ldr	r3, [r7, #16]
    d858:	2200      	movs	r2, #0
    d85a:	601a      	str	r2, [r3, #0]
        p_state->transfer_cnt = 0;
    d85c:	693b      	ldr	r3, [r7, #16]
    d85e:	2200      	movs	r2, #0
    d860:	609a      	str	r2, [r3, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    d862:	7dfb      	ldrb	r3, [r7, #23]
    d864:	3301      	adds	r3, #1
    d866:	75fb      	strb	r3, [r7, #23]
    d868:	7dfb      	ldrb	r3, [r7, #23]
    d86a:	2b08      	cmp	r3, #8
    d86c:	d9d9      	bls.n	d822 <nrfx_usbd_init+0x3a>
    }
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    d86e:	2300      	movs	r3, #0
    d870:	75fb      	strb	r3, [r7, #23]
    d872:	e020      	b.n	d8b6 <nrfx_usbd_init+0xce>
    {
        nrfx_usbd_ep_t ep = NRFX_USBD_EPOUT(n);
    d874:	7dfb      	ldrb	r3, [r7, #23]
    d876:	73fb      	strb	r3, [r7, #15]
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    d878:	7bfb      	ldrb	r3, [r7, #15]
    d87a:	f003 0308 	and.w	r3, r3, #8
    d87e:	2b00      	cmp	r3, #0
    d880:	d002      	beq.n	d888 <nrfx_usbd_init+0xa0>
    d882:	f44f 7200 	mov.w	r2, #512	; 0x200
    d886:	e000      	b.n	d88a <nrfx_usbd_init+0xa2>
    d888:	2240      	movs	r2, #64	; 0x40
    d88a:	7bfb      	ldrb	r3, [r7, #15]
    d88c:	4611      	mov	r1, r2
    d88e:	4618      	mov	r0, r3
    d890:	f000 fa2e 	bl	dcf0 <nrfx_usbd_ep_max_packet_size_set>
            (NRFX_USBD_ISOSIZE / 2) : NRFX_USBD_EPSIZE);
        usbd_ep_state_t * p_state = ep_state_access(ep);
    d894:	7bfb      	ldrb	r3, [r7, #15]
    d896:	4618      	mov	r0, r3
    d898:	f7fe ffda 	bl	c850 <ep_state_access>
    d89c:	60b8      	str	r0, [r7, #8]
        p_state->status = NRFX_USBD_EP_OK;
    d89e:	68bb      	ldr	r3, [r7, #8]
    d8a0:	2200      	movs	r2, #0
    d8a2:	739a      	strb	r2, [r3, #14]
        p_state->handler.consumer = NULL;
    d8a4:	68bb      	ldr	r3, [r7, #8]
    d8a6:	2200      	movs	r2, #0
    d8a8:	601a      	str	r2, [r3, #0]
        p_state->transfer_cnt = 0;
    d8aa:	68bb      	ldr	r3, [r7, #8]
    d8ac:	2200      	movs	r2, #0
    d8ae:	609a      	str	r2, [r3, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    d8b0:	7dfb      	ldrb	r3, [r7, #23]
    d8b2:	3301      	adds	r3, #1
    d8b4:	75fb      	strb	r3, [r7, #23]
    d8b6:	7dfb      	ldrb	r3, [r7, #23]
    d8b8:	2b08      	cmp	r3, #8
    d8ba:	d9db      	bls.n	d874 <nrfx_usbd_init+0x8c>
    }

    return NRFX_SUCCESS;
    d8bc:	4b08      	ldr	r3, [pc, #32]	; (d8e0 <nrfx_usbd_init+0xf8>)
}
    d8be:	4618      	mov	r0, r3
    d8c0:	3718      	adds	r7, #24
    d8c2:	46bd      	mov	sp, r7
    d8c4:	bd80      	pop	{r7, pc}
    d8c6:	bf00      	nop
    d8c8:	0002df44 	.word	0x0002df44
    d8cc:	0002ed1c 	.word	0x0002ed1c
    d8d0:	0002dd40 	.word	0x0002dd40
    d8d4:	20006240 	.word	0x20006240
    d8d8:	0bad0005 	.word	0x0bad0005
    d8dc:	200024e0 	.word	0x200024e0
    d8e0:	0bad0000 	.word	0x0bad0000

0000d8e4 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    d8e4:	b580      	push	{r7, lr}
    d8e6:	af00      	add	r7, sp, #0
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);
    d8e8:	4b09      	ldr	r3, [pc, #36]	; (d910 <nrfx_usbd_uninit+0x2c>)
    d8ea:	781b      	ldrb	r3, [r3, #0]
    d8ec:	2b01      	cmp	r3, #1
    d8ee:	d006      	beq.n	d8fe <nrfx_usbd_uninit+0x1a>
    d8f0:	4b08      	ldr	r3, [pc, #32]	; (d914 <nrfx_usbd_uninit+0x30>)
    d8f2:	4a09      	ldr	r2, [pc, #36]	; (d918 <nrfx_usbd_uninit+0x34>)
    d8f4:	f240 61a3 	movw	r1, #1699	; 0x6a3
    d8f8:	4808      	ldr	r0, [pc, #32]	; (d91c <nrfx_usbd_uninit+0x38>)
    d8fa:	f7f2 ff3f 	bl	77c <__assert_func>

    m_event_handler = NULL;
    d8fe:	4b08      	ldr	r3, [pc, #32]	; (d920 <nrfx_usbd_uninit+0x3c>)
    d900:	2200      	movs	r2, #0
    d902:	601a      	str	r2, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    d904:	4b02      	ldr	r3, [pc, #8]	; (d910 <nrfx_usbd_uninit+0x2c>)
    d906:	2200      	movs	r2, #0
    d908:	701a      	strb	r2, [r3, #0]
    return;
    d90a:	bf00      	nop
}
    d90c:	bd80      	pop	{r7, pc}
    d90e:	bf00      	nop
    d910:	20006240 	.word	0x20006240
    d914:	0002df54 	.word	0x0002df54
    d918:	0002ed2c 	.word	0x0002ed2c
    d91c:	0002dd40 	.word	0x0002dd40
    d920:	200024e0 	.word	0x200024e0

0000d924 <nrfx_usbd_enable>:

void nrfx_usbd_enable(void)
{
    d924:	b580      	push	{r7, lr}
    d926:	b090      	sub	sp, #64	; 0x40
    d928:	af00      	add	r7, sp, #0
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);
    d92a:	4b79      	ldr	r3, [pc, #484]	; (db10 <nrfx_usbd_enable+0x1ec>)
    d92c:	781b      	ldrb	r3, [r3, #0]
    d92e:	2b01      	cmp	r3, #1
    d930:	d006      	beq.n	d940 <nrfx_usbd_enable+0x1c>
    d932:	4b78      	ldr	r3, [pc, #480]	; (db14 <nrfx_usbd_enable+0x1f0>)
    d934:	4a78      	ldr	r2, [pc, #480]	; (db18 <nrfx_usbd_enable+0x1f4>)
    d936:	f240 61ac 	movw	r1, #1708	; 0x6ac
    d93a:	4878      	ldr	r0, [pc, #480]	; (db1c <nrfx_usbd_enable+0x1f8>)
    d93c:	f7f2 ff1e 	bl	77c <__assert_func>

    /* Prepare for READY event receiving */
    nrf_usbd_eventcause_clear(NRF_USBD_EVENTCAUSE_READY_MASK);
    d940:	f44f 6000 	mov.w	r0, #2048	; 0x800
    d944:	f7fe f928 	bl	bb98 <nrf_usbd_eventcause_clear>

    if (nrfx_usbd_errata_187())
    d948:	f00e fd6a 	bl	1c420 <nrfx_usbd_errata_187>
    d94c:	4603      	mov	r3, r0
    d94e:	2b00      	cmp	r3, #0
    d950:	d025      	beq.n	d99e <nrfx_usbd_enable+0x7a>
	__asm__ volatile(
    d952:	f04f 0320 	mov.w	r3, #32
    d956:	f3ef 8211 	mrs	r2, BASEPRI
    d95a:	f383 8811 	msr	BASEPRI, r3
    d95e:	f3bf 8f6f 	isb	sy
    d962:	62fa      	str	r2, [r7, #44]	; 0x2c
    d964:	62bb      	str	r3, [r7, #40]	; 0x28
	return key;
    d966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    {
        NRFX_CRITICAL_SECTION_ENTER();
    d968:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    d96a:	4b6d      	ldr	r3, [pc, #436]	; (db20 <nrfx_usbd_enable+0x1fc>)
    d96c:	681b      	ldr	r3, [r3, #0]
    d96e:	2b00      	cmp	r3, #0
    d970:	d10b      	bne.n	d98a <nrfx_usbd_enable+0x66>
        {
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    d972:	4b6b      	ldr	r3, [pc, #428]	; (db20 <nrfx_usbd_enable+0x1fc>)
    d974:	f249 3275 	movw	r2, #37749	; 0x9375
    d978:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    d97a:	4b6a      	ldr	r3, [pc, #424]	; (db24 <nrfx_usbd_enable+0x200>)
    d97c:	2203      	movs	r2, #3
    d97e:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    d980:	4b67      	ldr	r3, [pc, #412]	; (db20 <nrfx_usbd_enable+0x1fc>)
    d982:	f249 3275 	movw	r2, #37749	; 0x9375
    d986:	601a      	str	r2, [r3, #0]
    d988:	e002      	b.n	d990 <nrfx_usbd_enable+0x6c>
        }
        else
        {
            *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    d98a:	4b66      	ldr	r3, [pc, #408]	; (db24 <nrfx_usbd_enable+0x200>)
    d98c:	2203      	movs	r2, #3
    d98e:	601a      	str	r2, [r3, #0]
    d990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d992:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
    d994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d996:	f383 8811 	msr	BASEPRI, r3
    d99a:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
    }
    
    if (nrfx_usbd_errata_171())
    d99e:	f00e fd38 	bl	1c412 <nrfx_usbd_errata_171>
    d9a2:	4603      	mov	r3, r0
    d9a4:	2b00      	cmp	r3, #0
    d9a6:	d025      	beq.n	d9f4 <nrfx_usbd_enable+0xd0>
	__asm__ volatile(
    d9a8:	f04f 0320 	mov.w	r3, #32
    d9ac:	f3ef 8211 	mrs	r2, BASEPRI
    d9b0:	f383 8811 	msr	BASEPRI, r3
    d9b4:	f3bf 8f6f 	isb	sy
    d9b8:	623a      	str	r2, [r7, #32]
    d9ba:	61fb      	str	r3, [r7, #28]
	return key;
    d9bc:	6a3b      	ldr	r3, [r7, #32]
    {
        NRFX_CRITICAL_SECTION_ENTER();
    d9be:	63bb      	str	r3, [r7, #56]	; 0x38
        if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    d9c0:	4b57      	ldr	r3, [pc, #348]	; (db20 <nrfx_usbd_enable+0x1fc>)
    d9c2:	681b      	ldr	r3, [r3, #0]
    d9c4:	2b00      	cmp	r3, #0
    d9c6:	d10b      	bne.n	d9e0 <nrfx_usbd_enable+0xbc>
        {
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    d9c8:	4b55      	ldr	r3, [pc, #340]	; (db20 <nrfx_usbd_enable+0x1fc>)
    d9ca:	f249 3275 	movw	r2, #37749	; 0x9375
    d9ce:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    d9d0:	4b55      	ldr	r3, [pc, #340]	; (db28 <nrfx_usbd_enable+0x204>)
    d9d2:	22c0      	movs	r2, #192	; 0xc0
    d9d4:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    d9d6:	4b52      	ldr	r3, [pc, #328]	; (db20 <nrfx_usbd_enable+0x1fc>)
    d9d8:	f249 3275 	movw	r2, #37749	; 0x9375
    d9dc:	601a      	str	r2, [r3, #0]
    d9de:	e002      	b.n	d9e6 <nrfx_usbd_enable+0xc2>
        }
        else
        {
            *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    d9e0:	4b51      	ldr	r3, [pc, #324]	; (db28 <nrfx_usbd_enable+0x204>)
    d9e2:	22c0      	movs	r2, #192	; 0xc0
    d9e4:	601a      	str	r2, [r3, #0]
    d9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d9e8:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
    d9ea:	69bb      	ldr	r3, [r7, #24]
    d9ec:	f383 8811 	msr	BASEPRI, r3
    d9f0:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
    }

    /* Enable the peripheral */
    nrf_usbd_enable();
    d9f4:	f7fe f8a4 	bl	bb40 <nrf_usbd_enable>
    /* Waiting for peripheral to enable, this should take a few us */
    while (0 == (NRF_USBD_EVENTCAUSE_READY_MASK & nrf_usbd_eventcause_get()))
    d9f8:	bf00      	nop
    d9fa:	f7fe f8c1 	bl	bb80 <nrf_usbd_eventcause_get>
    d9fe:	4603      	mov	r3, r0
    da00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    da04:	2b00      	cmp	r3, #0
    da06:	d0f8      	beq.n	d9fa <nrfx_usbd_enable+0xd6>
    {
        /* Empty loop */
    }
    nrf_usbd_eventcause_clear(NRF_USBD_EVENTCAUSE_READY_MASK);
    da08:	f44f 6000 	mov.w	r0, #2048	; 0x800
    da0c:	f7fe f8c4 	bl	bb98 <nrf_usbd_eventcause_clear>
    
    if (nrfx_usbd_errata_171())
    da10:	f00e fcff 	bl	1c412 <nrfx_usbd_errata_171>
    da14:	4603      	mov	r3, r0
    da16:	2b00      	cmp	r3, #0
    da18:	d025      	beq.n	da66 <nrfx_usbd_enable+0x142>
	__asm__ volatile(
    da1a:	f04f 0320 	mov.w	r3, #32
    da1e:	f3ef 8211 	mrs	r2, BASEPRI
    da22:	f383 8811 	msr	BASEPRI, r3
    da26:	f3bf 8f6f 	isb	sy
    da2a:	617a      	str	r2, [r7, #20]
    da2c:	613b      	str	r3, [r7, #16]
	return key;
    da2e:	697b      	ldr	r3, [r7, #20]
    {
        NRFX_CRITICAL_SECTION_ENTER();
    da30:	637b      	str	r3, [r7, #52]	; 0x34
        if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    da32:	4b3b      	ldr	r3, [pc, #236]	; (db20 <nrfx_usbd_enable+0x1fc>)
    da34:	681b      	ldr	r3, [r3, #0]
    da36:	2b00      	cmp	r3, #0
    da38:	d10b      	bne.n	da52 <nrfx_usbd_enable+0x12e>
        {
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    da3a:	4b39      	ldr	r3, [pc, #228]	; (db20 <nrfx_usbd_enable+0x1fc>)
    da3c:	f249 3275 	movw	r2, #37749	; 0x9375
    da40:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    da42:	4b39      	ldr	r3, [pc, #228]	; (db28 <nrfx_usbd_enable+0x204>)
    da44:	2200      	movs	r2, #0
    da46:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    da48:	4b35      	ldr	r3, [pc, #212]	; (db20 <nrfx_usbd_enable+0x1fc>)
    da4a:	f249 3275 	movw	r2, #37749	; 0x9375
    da4e:	601a      	str	r2, [r3, #0]
    da50:	e002      	b.n	da58 <nrfx_usbd_enable+0x134>
        }
        else
        {
            *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    da52:	4b35      	ldr	r3, [pc, #212]	; (db28 <nrfx_usbd_enable+0x204>)
    da54:	2200      	movs	r2, #0
    da56:	601a      	str	r2, [r3, #0]
    da58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    da5a:	60fb      	str	r3, [r7, #12]
	__asm__ volatile(
    da5c:	68fb      	ldr	r3, [r7, #12]
    da5e:	f383 8811 	msr	BASEPRI, r3
    da62:	f3bf 8f6f 	isb	sy
        }

        NRFX_CRITICAL_SECTION_EXIT();
    }

    if (nrfx_usbd_errata_166())
    da66:	f00e fccd 	bl	1c404 <nrfx_usbd_errata_166>
    da6a:	4603      	mov	r3, r0
    da6c:	2b00      	cmp	r3, #0
    da6e:	d00a      	beq.n	da86 <nrfx_usbd_enable+0x162>
    {
        *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7E3;
    da70:	4b2e      	ldr	r3, [pc, #184]	; (db2c <nrfx_usbd_enable+0x208>)
    da72:	f240 72e3 	movw	r2, #2019	; 0x7e3
    da76:	601a      	str	r2, [r3, #0]
        *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) = 0x40;
    da78:	4b2d      	ldr	r3, [pc, #180]	; (db30 <nrfx_usbd_enable+0x20c>)
    da7a:	2240      	movs	r2, #64	; 0x40
    da7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
    da7e:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    da82:	f3bf 8f4f 	dsb	sy
        __ISB();
        __DSB();
    }

    nrf_usbd_isosplit_set(NRF_USBD_ISOSPLIT_HALF);
    da86:	2080      	movs	r0, #128	; 0x80
    da88:	f7fe fb58 	bl	c13c <nrf_usbd_isosplit_set>
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_ZERODATA);
    }
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    da8c:	2000      	movs	r0, #0
    da8e:	f00e fd0f 	bl	1c4b0 <nrfx_usbd_isoinconfig_set>
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    da92:	4b28      	ldr	r3, [pc, #160]	; (db34 <nrfx_usbd_enable+0x210>)
    da94:	f240 12ff 	movw	r2, #511	; 0x1ff
    da98:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    da9a:	4b27      	ldr	r3, [pc, #156]	; (db38 <nrfx_usbd_enable+0x214>)
    da9c:	2200      	movs	r2, #0
    da9e:	601a      	str	r2, [r3, #0]
    usbd_dma_pending_clear();
    daa0:	f7fe ff5a 	bl	c958 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    daa4:	4b25      	ldr	r3, [pc, #148]	; (db3c <nrfx_usbd_enable+0x218>)
    daa6:	2200      	movs	r2, #0
    daa8:	701a      	strb	r2, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    daaa:	4b19      	ldr	r3, [pc, #100]	; (db10 <nrfx_usbd_enable+0x1ec>)
    daac:	2202      	movs	r2, #2
    daae:	701a      	strb	r2, [r3, #0]

    if (nrfx_usbd_errata_187())
    dab0:	f00e fcb6 	bl	1c420 <nrfx_usbd_errata_187>
    dab4:	4603      	mov	r3, r0
    dab6:	2b00      	cmp	r3, #0
    dab8:	d025      	beq.n	db06 <nrfx_usbd_enable+0x1e2>
	__asm__ volatile(
    daba:	f04f 0320 	mov.w	r3, #32
    dabe:	f3ef 8211 	mrs	r2, BASEPRI
    dac2:	f383 8811 	msr	BASEPRI, r3
    dac6:	f3bf 8f6f 	isb	sy
    daca:	60ba      	str	r2, [r7, #8]
    dacc:	607b      	str	r3, [r7, #4]
	return key;
    dace:	68bb      	ldr	r3, [r7, #8]
    {
        NRFX_CRITICAL_SECTION_ENTER();
    dad0:	633b      	str	r3, [r7, #48]	; 0x30
        if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    dad2:	4b13      	ldr	r3, [pc, #76]	; (db20 <nrfx_usbd_enable+0x1fc>)
    dad4:	681b      	ldr	r3, [r3, #0]
    dad6:	2b00      	cmp	r3, #0
    dad8:	d10b      	bne.n	daf2 <nrfx_usbd_enable+0x1ce>
        {
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    dada:	4b11      	ldr	r3, [pc, #68]	; (db20 <nrfx_usbd_enable+0x1fc>)
    dadc:	f249 3275 	movw	r2, #37749	; 0x9375
    dae0:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    dae2:	4b10      	ldr	r3, [pc, #64]	; (db24 <nrfx_usbd_enable+0x200>)
    dae4:	2200      	movs	r2, #0
    dae6:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    dae8:	4b0d      	ldr	r3, [pc, #52]	; (db20 <nrfx_usbd_enable+0x1fc>)
    daea:	f249 3275 	movw	r2, #37749	; 0x9375
    daee:	601a      	str	r2, [r3, #0]
    daf0:	e002      	b.n	daf8 <nrfx_usbd_enable+0x1d4>
        }
        else
        {
            *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    daf2:	4b0c      	ldr	r3, [pc, #48]	; (db24 <nrfx_usbd_enable+0x200>)
    daf4:	2200      	movs	r2, #0
    daf6:	601a      	str	r2, [r3, #0]
    daf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    dafa:	603b      	str	r3, [r7, #0]
	__asm__ volatile(
    dafc:	683b      	ldr	r3, [r7, #0]
    dafe:	f383 8811 	msr	BASEPRI, r3
    db02:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
    }
}
    db06:	bf00      	nop
    db08:	3740      	adds	r7, #64	; 0x40
    db0a:	46bd      	mov	sp, r7
    db0c:	bd80      	pop	{r7, pc}
    db0e:	bf00      	nop
    db10:	20006240 	.word	0x20006240
    db14:	0002df54 	.word	0x0002df54
    db18:	0002ed40 	.word	0x0002ed40
    db1c:	0002dd40 	.word	0x0002dd40
    db20:	4006ec00 	.word	0x4006ec00
    db24:	4006ed14 	.word	0x4006ed14
    db28:	4006ec14 	.word	0x4006ec14
    db2c:	40027800 	.word	0x40027800
    db30:	40027804 	.word	0x40027804
    db34:	200024e4 	.word	0x200024e4
    db38:	200024e8 	.word	0x200024e8
    db3c:	20006242 	.word	0x20006242

0000db40 <nrfx_usbd_disable>:

void nrfx_usbd_disable(void)
{
    db40:	b580      	push	{r7, lr}
    db42:	af00      	add	r7, sp, #0
    NRFX_ASSERT(m_drv_state != NRFX_DRV_STATE_UNINITIALIZED);
    db44:	4b0d      	ldr	r3, [pc, #52]	; (db7c <nrfx_usbd_disable+0x3c>)
    db46:	781b      	ldrb	r3, [r3, #0]
    db48:	2b00      	cmp	r3, #0
    db4a:	d106      	bne.n	db5a <nrfx_usbd_disable+0x1a>
    db4c:	4b0c      	ldr	r3, [pc, #48]	; (db80 <nrfx_usbd_disable+0x40>)
    db4e:	4a0d      	ldr	r2, [pc, #52]	; (db84 <nrfx_usbd_disable+0x44>)
    db50:	f44f 61e3 	mov.w	r1, #1816	; 0x718
    db54:	480c      	ldr	r0, [pc, #48]	; (db88 <nrfx_usbd_disable+0x48>)
    db56:	f7f2 fe11 	bl	77c <__assert_func>

    /* Stop just in case */
    nrfx_usbd_stop();
    db5a:	f000 f851 	bl	dc00 <nrfx_usbd_stop>

    /* Disable all parts */
    nrf_usbd_int_disable(nrf_usbd_int_enable_get());
    db5e:	f7fd ffd3 	bl	bb08 <nrf_usbd_int_enable_get>
    db62:	4603      	mov	r3, r0
    db64:	4618      	mov	r0, r3
    db66:	f7fd ffdb 	bl	bb20 <nrf_usbd_int_disable>
    nrf_usbd_disable();
    db6a:	f7fd fff9 	bl	bb60 <nrf_usbd_disable>
    usbd_dma_pending_clear();
    db6e:	f7fe fef3 	bl	c958 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    db72:	4b02      	ldr	r3, [pc, #8]	; (db7c <nrfx_usbd_disable+0x3c>)
    db74:	2201      	movs	r2, #1
    db76:	701a      	strb	r2, [r3, #0]
}
    db78:	bf00      	nop
    db7a:	bd80      	pop	{r7, pc}
    db7c:	20006240 	.word	0x20006240
    db80:	0002df80 	.word	0x0002df80
    db84:	0002ed54 	.word	0x0002ed54
    db88:	0002dd40 	.word	0x0002dd40

0000db8c <nrfx_usbd_start>:

void nrfx_usbd_start(bool enable_sof)
{
    db8c:	b580      	push	{r7, lr}
    db8e:	b084      	sub	sp, #16
    db90:	af00      	add	r7, sp, #0
    db92:	4603      	mov	r3, r0
    db94:	71fb      	strb	r3, [r7, #7]
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    db96:	4b14      	ldr	r3, [pc, #80]	; (dbe8 <nrfx_usbd_start+0x5c>)
    db98:	781b      	ldrb	r3, [r3, #0]
    db9a:	2b02      	cmp	r3, #2
    db9c:	d006      	beq.n	dbac <nrfx_usbd_start+0x20>
    db9e:	4b13      	ldr	r3, [pc, #76]	; (dbec <nrfx_usbd_start+0x60>)
    dba0:	4a13      	ldr	r2, [pc, #76]	; (dbf0 <nrfx_usbd_start+0x64>)
    dba2:	f240 7126 	movw	r1, #1830	; 0x726
    dba6:	4813      	ldr	r0, [pc, #76]	; (dbf4 <nrfx_usbd_start+0x68>)
    dba8:	f7f2 fde8 	bl	77c <__assert_func>
    m_bus_suspend = false;
    dbac:	4b12      	ldr	r3, [pc, #72]	; (dbf8 <nrfx_usbd_start+0x6c>)
    dbae:	2200      	movs	r2, #0
    dbb0:	701a      	strb	r2, [r3, #0]

    uint32_t ints_to_enable =
    dbb2:	4b12      	ldr	r3, [pc, #72]	; (dbfc <nrfx_usbd_start+0x70>)
    dbb4:	60fb      	str	r3, [r7, #12]
       NRF_USBD_INT_ENDEPOUT0_MASK    |
       NRF_USBD_INT_USBEVENT_MASK     |
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof || nrfx_usbd_errata_104())
    dbb6:	79fb      	ldrb	r3, [r7, #7]
    dbb8:	2b00      	cmp	r3, #0
    dbba:	d104      	bne.n	dbc6 <nrfx_usbd_start+0x3a>
    dbbc:	f00e fc10 	bl	1c3e0 <nrfx_usbd_errata_104>
    dbc0:	4603      	mov	r3, r0
    dbc2:	2b00      	cmp	r3, #0
    dbc4:	d003      	beq.n	dbce <nrfx_usbd_start+0x42>
   {
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
    dbc6:	68fb      	ldr	r3, [r7, #12]
    dbc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    dbcc:	60fb      	str	r3, [r7, #12]
   }

   /* Enable all required interrupts */
   nrf_usbd_int_enable(ints_to_enable);
    dbce:	68f8      	ldr	r0, [r7, #12]
    dbd0:	f7fd ff8a 	bl	bae8 <nrf_usbd_int_enable>

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    dbd4:	2027      	movs	r0, #39	; 0x27
    dbd6:	f013 fc56 	bl	21486 <z_arch_irq_enable>

   /* Enable pullups */
   nrf_usbd_pullup_enable();
    dbda:	f7fe f995 	bl	bf08 <nrf_usbd_pullup_enable>
}
    dbde:	bf00      	nop
    dbe0:	3710      	adds	r7, #16
    dbe2:	46bd      	mov	sp, r7
    dbe4:	bd80      	pop	{r7, pc}
    dbe6:	bf00      	nop
    dbe8:	20006240 	.word	0x20006240
    dbec:	0002dfac 	.word	0x0002dfac
    dbf0:	0002ed68 	.word	0x0002ed68
    dbf4:	0002dd40 	.word	0x0002dd40
    dbf8:	20006241 	.word	0x20006241
    dbfc:	01c01407 	.word	0x01c01407

0000dc00 <nrfx_usbd_stop>:

void nrfx_usbd_stop(void)
{
    dc00:	b580      	push	{r7, lr}
    dc02:	af00      	add	r7, sp, #0
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    dc04:	4b10      	ldr	r3, [pc, #64]	; (dc48 <nrfx_usbd_stop+0x48>)
    dc06:	781b      	ldrb	r3, [r3, #0]
    dc08:	2b02      	cmp	r3, #2
    dc0a:	d006      	beq.n	dc1a <nrfx_usbd_stop+0x1a>
    dc0c:	4b0f      	ldr	r3, [pc, #60]	; (dc4c <nrfx_usbd_stop+0x4c>)
    dc0e:	4a10      	ldr	r2, [pc, #64]	; (dc50 <nrfx_usbd_stop+0x50>)
    dc10:	f240 7145 	movw	r1, #1861	; 0x745
    dc14:	480f      	ldr	r0, [pc, #60]	; (dc54 <nrfx_usbd_stop+0x54>)
    dc16:	f7f2 fdb1 	bl	77c <__assert_func>

    /* Clear interrupt */
    NRFX_IRQ_PENDING_CLEAR(USBD_IRQn);
    dc1a:	2027      	movs	r0, #39	; 0x27
    dc1c:	f7fd ff36 	bl	ba8c <__NVIC_ClearPendingIRQ>

    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    dc20:	2027      	movs	r0, #39	; 0x27
    dc22:	f004 f90b 	bl	11e3c <z_arch_irq_is_enabled>
    dc26:	4603      	mov	r3, r0
    dc28:	2b00      	cmp	r3, #0
    dc2a:	d00a      	beq.n	dc42 <nrfx_usbd_stop+0x42>
    {
        /* Abort transfers */
        usbd_ep_abort_all();
    dc2c:	f7fe ff82 	bl	cb34 <usbd_ep_abort_all>

        /* Disable pullups */
        nrf_usbd_pullup_disable();
    dc30:	f7fe f97a 	bl	bf28 <nrf_usbd_pullup_disable>

        /* Disable interrupt globally */
        NRFX_IRQ_DISABLE(USBD_IRQn);
    dc34:	2027      	movs	r0, #39	; 0x27
    dc36:	f013 fc33 	bl	214a0 <z_arch_irq_disable>

        /* Disable all interrupts */
        nrf_usbd_int_disable(~0U);
    dc3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    dc3e:	f7fd ff6f 	bl	bb20 <nrf_usbd_int_disable>
    }
}
    dc42:	bf00      	nop
    dc44:	bd80      	pop	{r7, pc}
    dc46:	bf00      	nop
    dc48:	20006240 	.word	0x20006240
    dc4c:	0002dfac 	.word	0x0002dfac
    dc50:	0002ed78 	.word	0x0002ed78
    dc54:	0002dd40 	.word	0x0002dd40

0000dc58 <nrfx_usbd_is_enabled>:
{
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    dc58:	b480      	push	{r7}
    dc5a:	af00      	add	r7, sp, #0
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    dc5c:	4b05      	ldr	r3, [pc, #20]	; (dc74 <nrfx_usbd_is_enabled+0x1c>)
    dc5e:	781b      	ldrb	r3, [r3, #0]
    dc60:	2b01      	cmp	r3, #1
    dc62:	bf8c      	ite	hi
    dc64:	2301      	movhi	r3, #1
    dc66:	2300      	movls	r3, #0
    dc68:	b2db      	uxtb	r3, r3
}
    dc6a:	4618      	mov	r0, r3
    dc6c:	46bd      	mov	sp, r7
    dc6e:	bc80      	pop	{r7}
    dc70:	4770      	bx	lr
    dc72:	bf00      	nop
    dc74:	20006240 	.word	0x20006240

0000dc78 <nrfx_usbd_suspend>:
{
    return (nrfx_usbd_is_enabled() && NRFX_IRQ_IS_ENABLED(USBD_IRQn));
}

bool nrfx_usbd_suspend(void)
{
    dc78:	b580      	push	{r7, lr}
    dc7a:	b086      	sub	sp, #24
    dc7c:	af00      	add	r7, sp, #0
    bool suspended = false;
    dc7e:	2300      	movs	r3, #0
    dc80:	75fb      	strb	r3, [r7, #23]
	__asm__ volatile(
    dc82:	f04f 0320 	mov.w	r3, #32
    dc86:	f3ef 8211 	mrs	r2, BASEPRI
    dc8a:	f383 8811 	msr	BASEPRI, r3
    dc8e:	f3bf 8f6f 	isb	sy
    dc92:	60fa      	str	r2, [r7, #12]
    dc94:	60bb      	str	r3, [r7, #8]
	return key;
    dc96:	68fb      	ldr	r3, [r7, #12]

    NRFX_CRITICAL_SECTION_ENTER();
    dc98:	613b      	str	r3, [r7, #16]
    if (m_bus_suspend)
    dc9a:	4b14      	ldr	r3, [pc, #80]	; (dcec <nrfx_usbd_suspend+0x74>)
    dc9c:	781b      	ldrb	r3, [r3, #0]
    dc9e:	b2db      	uxtb	r3, r3
    dca0:	2b00      	cmp	r3, #0
    dca2:	d016      	beq.n	dcd2 <nrfx_usbd_suspend+0x5a>
    {
        usbd_ep_abort_all();
    dca4:	f7fe ff46 	bl	cb34 <usbd_ep_abort_all>

        if (!(nrf_usbd_eventcause_get() & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    dca8:	f7fd ff6a 	bl	bb80 <nrf_usbd_eventcause_get>
    dcac:	4603      	mov	r3, r0
    dcae:	f403 7300 	and.w	r3, r3, #512	; 0x200
    dcb2:	2b00      	cmp	r3, #0
    dcb4:	d10d      	bne.n	dcd2 <nrfx_usbd_suspend+0x5a>
        {
            nrf_usbd_lowpower_enable();
    dcb6:	f7fe fa69 	bl	c18c <nrf_usbd_lowpower_enable>
            if (nrf_usbd_eventcause_get() & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    dcba:	f7fd ff61 	bl	bb80 <nrf_usbd_eventcause_get>
    dcbe:	4603      	mov	r3, r0
    dcc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
    dcc4:	2b00      	cmp	r3, #0
    dcc6:	d002      	beq.n	dcce <nrfx_usbd_suspend+0x56>
            {
                nrf_usbd_lowpower_disable();
    dcc8:	f7fe fa6c 	bl	c1a4 <nrf_usbd_lowpower_disable>
    dccc:	e001      	b.n	dcd2 <nrfx_usbd_suspend+0x5a>
            }
            else
            {
                suspended = true;
    dcce:	2301      	movs	r3, #1
    dcd0:	75fb      	strb	r3, [r7, #23]
    dcd2:	693b      	ldr	r3, [r7, #16]
    dcd4:	607b      	str	r3, [r7, #4]
	__asm__ volatile(
    dcd6:	687b      	ldr	r3, [r7, #4]
    dcd8:	f383 8811 	msr	BASEPRI, r3
    dcdc:	f3bf 8f6f 	isb	sy
            }
        }
    }
    NRFX_CRITICAL_SECTION_EXIT();

    return suspended;
    dce0:	7dfb      	ldrb	r3, [r7, #23]
}
    dce2:	4618      	mov	r0, r3
    dce4:	3718      	adds	r7, #24
    dce6:	46bd      	mov	sp, r7
    dce8:	bd80      	pop	{r7, pc}
    dcea:	bf00      	nop
    dcec:	20006241 	.word	0x20006241

0000dcf0 <nrfx_usbd_ep_max_packet_size_set>:
{
    m_bus_suspend = false;
}

void nrfx_usbd_ep_max_packet_size_set(nrfx_usbd_ep_t ep, uint16_t size)
{
    dcf0:	b590      	push	{r4, r7, lr}
    dcf2:	b085      	sub	sp, #20
    dcf4:	af00      	add	r7, sp, #0
    dcf6:	4603      	mov	r3, r0
    dcf8:	460a      	mov	r2, r1
    dcfa:	71fb      	strb	r3, [r7, #7]
    dcfc:	4613      	mov	r3, r2
    dcfe:	80bb      	strh	r3, [r7, #4]
    /* Only power of 2 size allowed */
    NRFX_ASSERT((size != 0) && (size & (size - 1)) == 0);
    dd00:	88bb      	ldrh	r3, [r7, #4]
    dd02:	2b00      	cmp	r3, #0
    dd04:	d005      	beq.n	dd12 <nrfx_usbd_ep_max_packet_size_set+0x22>
    dd06:	88ba      	ldrh	r2, [r7, #4]
    dd08:	88bb      	ldrh	r3, [r7, #4]
    dd0a:	3b01      	subs	r3, #1
    dd0c:	4013      	ands	r3, r2
    dd0e:	2b00      	cmp	r3, #0
    dd10:	d006      	beq.n	dd20 <nrfx_usbd_ep_max_packet_size_set+0x30>
    dd12:	4b17      	ldr	r3, [pc, #92]	; (dd70 <nrfx_usbd_ep_max_packet_size_set+0x80>)
    dd14:	4a17      	ldr	r2, [pc, #92]	; (dd74 <nrfx_usbd_ep_max_packet_size_set+0x84>)
    dd16:	f240 71be 	movw	r1, #1982	; 0x7be
    dd1a:	4817      	ldr	r0, [pc, #92]	; (dd78 <nrfx_usbd_ep_max_packet_size_set+0x88>)
    dd1c:	f7f2 fd2e 	bl	77c <__assert_func>
    /* Packet size cannot be higher than maximum buffer size */
    NRFX_ASSERT((NRF_USBD_EPISO_CHECK(ep) && (size <= usbd_ep_iso_capacity(ep))) ||
    dd20:	79fb      	ldrb	r3, [r7, #7]
    dd22:	f003 0308 	and.w	r3, r3, #8
    dd26:	2b00      	cmp	r3, #0
    dd28:	d007      	beq.n	dd3a <nrfx_usbd_ep_max_packet_size_set+0x4a>
    dd2a:	88bc      	ldrh	r4, [r7, #4]
    dd2c:	79fb      	ldrb	r3, [r7, #7]
    dd2e:	4618      	mov	r0, r3
    dd30:	f00e fc67 	bl	1c602 <usbd_ep_iso_capacity>
    dd34:	4603      	mov	r3, r0
    dd36:	429c      	cmp	r4, r3
    dd38:	d90e      	bls.n	dd58 <nrfx_usbd_ep_max_packet_size_set+0x68>
    dd3a:	79fb      	ldrb	r3, [r7, #7]
    dd3c:	f003 0308 	and.w	r3, r3, #8
    dd40:	2b00      	cmp	r3, #0
    dd42:	d102      	bne.n	dd4a <nrfx_usbd_ep_max_packet_size_set+0x5a>
    dd44:	88bb      	ldrh	r3, [r7, #4]
    dd46:	2b40      	cmp	r3, #64	; 0x40
    dd48:	d906      	bls.n	dd58 <nrfx_usbd_ep_max_packet_size_set+0x68>
    dd4a:	4b0c      	ldr	r3, [pc, #48]	; (dd7c <nrfx_usbd_ep_max_packet_size_set+0x8c>)
    dd4c:	4a09      	ldr	r2, [pc, #36]	; (dd74 <nrfx_usbd_ep_max_packet_size_set+0x84>)
    dd4e:	f240 71c1 	movw	r1, #1985	; 0x7c1
    dd52:	4809      	ldr	r0, [pc, #36]	; (dd78 <nrfx_usbd_ep_max_packet_size_set+0x88>)
    dd54:	f7f2 fd12 	bl	77c <__assert_func>
                (!NRF_USBD_EPISO_CHECK(ep) && (size <= NRFX_USBD_EPSIZE)));

    usbd_ep_state_t * p_state = ep_state_access(ep);
    dd58:	79fb      	ldrb	r3, [r7, #7]
    dd5a:	4618      	mov	r0, r3
    dd5c:	f7fe fd78 	bl	c850 <ep_state_access>
    dd60:	60f8      	str	r0, [r7, #12]
    p_state->max_packet_size = size;
    dd62:	68fb      	ldr	r3, [r7, #12]
    dd64:	88ba      	ldrh	r2, [r7, #4]
    dd66:	819a      	strh	r2, [r3, #12]
}
    dd68:	bf00      	nop
    dd6a:	3714      	adds	r7, #20
    dd6c:	46bd      	mov	sp, r7
    dd6e:	bd90      	pop	{r4, r7, pc}
    dd70:	0002dfd8 	.word	0x0002dfd8
    dd74:	0002ed88 	.word	0x0002ed88
    dd78:	0002dd40 	.word	0x0002dd40
    dd7c:	0002e000 	.word	0x0002e000

0000dd80 <nrfx_usbd_ep_enable>:
{
    return nrf_usbd_ep_enable_check(ep_to_hal(ep));
}

void nrfx_usbd_ep_enable(nrfx_usbd_ep_t ep)
{
    dd80:	b580      	push	{r7, lr}
    dd82:	b086      	sub	sp, #24
    dd84:	af00      	add	r7, sp, #0
    dd86:	4603      	mov	r3, r0
    dd88:	71fb      	strb	r3, [r7, #7]
    nrf_usbd_int_enable(nrfx_usbd_ep_to_int(ep));
    dd8a:	79fb      	ldrb	r3, [r7, #7]
    dd8c:	4618      	mov	r0, r3
    dd8e:	f7fe fb13 	bl	c3b8 <nrfx_usbd_ep_to_int>
    dd92:	4603      	mov	r3, r0
    dd94:	4618      	mov	r0, r3
    dd96:	f7fd fea7 	bl	bae8 <nrf_usbd_int_enable>

    if (nrf_usbd_ep_enable_check(ep))
    dd9a:	79fb      	ldrb	r3, [r7, #7]
    dd9c:	4618      	mov	r0, r3
    dd9e:	f7fe f8e3 	bl	bf68 <nrf_usbd_ep_enable_check>
    dda2:	4603      	mov	r3, r0
    dda4:	2b00      	cmp	r3, #0
    dda6:	d13b      	bne.n	de20 <nrfx_usbd_ep_enable+0xa0>
    {
        return;
    }
    nrf_usbd_ep_enable(ep_to_hal(ep));
    dda8:	79fb      	ldrb	r3, [r7, #7]
    ddaa:	4618      	mov	r0, r3
    ddac:	f7fe fcee 	bl	c78c <ep_to_hal>
    ddb0:	4603      	mov	r3, r0
    ddb2:	4618      	mov	r0, r3
    ddb4:	f7fe f926 	bl	c004 <nrf_usbd_ep_enable>
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    ddb8:	79fb      	ldrb	r3, [r7, #7]
    ddba:	f003 030f 	and.w	r3, r3, #15
    ddbe:	2b00      	cmp	r3, #0
    ddc0:	d02f      	beq.n	de22 <nrfx_usbd_ep_enable+0xa2>
        NRF_USBD_EPOUT_CHECK(ep) &&
    ddc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    ddc6:	2b00      	cmp	r3, #0
    ddc8:	db2b      	blt.n	de22 <nrfx_usbd_ep_enable+0xa2>
        !NRF_USBD_EPISO_CHECK(ep))
    ddca:	79fb      	ldrb	r3, [r7, #7]
    ddcc:	f003 0308 	and.w	r3, r3, #8
        NRF_USBD_EPOUT_CHECK(ep) &&
    ddd0:	2b00      	cmp	r3, #0
    ddd2:	d126      	bne.n	de22 <nrfx_usbd_ep_enable+0xa2>
	__asm__ volatile(
    ddd4:	f04f 0320 	mov.w	r3, #32
    ddd8:	f3ef 8211 	mrs	r2, BASEPRI
    dddc:	f383 8811 	msr	BASEPRI, r3
    dde0:	f3bf 8f6f 	isb	sy
    dde4:	60fa      	str	r2, [r7, #12]
    dde6:	60bb      	str	r3, [r7, #8]
	return key;
    dde8:	68fb      	ldr	r3, [r7, #12]
    {
        NRFX_CRITICAL_SECTION_ENTER();
    ddea:	617b      	str	r3, [r7, #20]
        nrfx_usbd_transfer_out_drop(ep);
    ddec:	79fb      	ldrb	r3, [r7, #7]
    ddee:	4618      	mov	r0, r3
    ddf0:	f000 f912 	bl	e018 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    ddf4:	79fb      	ldrb	r3, [r7, #7]
    ddf6:	4618      	mov	r0, r3
    ddf8:	f7fe fd62 	bl	c8c0 <ep2bit>
    ddfc:	4603      	mov	r3, r0
    ddfe:	461a      	mov	r2, r3
    de00:	2301      	movs	r3, #1
    de02:	4093      	lsls	r3, r2
    de04:	43da      	mvns	r2, r3
    de06:	4b08      	ldr	r3, [pc, #32]	; (de28 <nrfx_usbd_ep_enable+0xa8>)
    de08:	681b      	ldr	r3, [r3, #0]
    de0a:	4013      	ands	r3, r2
    de0c:	4a06      	ldr	r2, [pc, #24]	; (de28 <nrfx_usbd_ep_enable+0xa8>)
    de0e:	6013      	str	r3, [r2, #0]
    de10:	697b      	ldr	r3, [r7, #20]
    de12:	613b      	str	r3, [r7, #16]
	__asm__ volatile(
    de14:	693b      	ldr	r3, [r7, #16]
    de16:	f383 8811 	msr	BASEPRI, r3
    de1a:	f3bf 8f6f 	isb	sy
    de1e:	e000      	b.n	de22 <nrfx_usbd_ep_enable+0xa2>
        return;
    de20:	bf00      	nop
        NRFX_CRITICAL_SECTION_EXIT();
    }
}
    de22:	3718      	adds	r7, #24
    de24:	46bd      	mov	sp, r7
    de26:	bd80      	pop	{r7, pc}
    de28:	200024e8 	.word	0x200024e8

0000de2c <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    de2c:	b580      	push	{r7, lr}
    de2e:	b08a      	sub	sp, #40	; 0x28
    de30:	af00      	add	r7, sp, #0
    de32:	4603      	mov	r3, r0
    de34:	6039      	str	r1, [r7, #0]
    de36:	71fb      	strb	r3, [r7, #7]
    nrfx_err_t ret;
    const uint8_t ep_bitpos = ep2bit(ep);
    de38:	79fb      	ldrb	r3, [r7, #7]
    de3a:	4618      	mov	r0, r3
    de3c:	f7fe fd40 	bl	c8c0 <ep2bit>
    de40:	4603      	mov	r3, r0
    de42:	77fb      	strb	r3, [r7, #31]
    NRFX_ASSERT(NULL != p_transfer);
    de44:	683b      	ldr	r3, [r7, #0]
    de46:	2b00      	cmp	r3, #0
    de48:	d106      	bne.n	de58 <nrfx_usbd_ep_transfer+0x2c>
    de4a:	4b58      	ldr	r3, [pc, #352]	; (dfac <nrfx_usbd_ep_transfer+0x180>)
    de4c:	4a58      	ldr	r2, [pc, #352]	; (dfb0 <nrfx_usbd_ep_transfer+0x184>)
    de4e:	f640 010b 	movw	r1, #2059	; 0x80b
    de52:	4858      	ldr	r0, [pc, #352]	; (dfb4 <nrfx_usbd_ep_transfer+0x188>)
    de54:	f7f2 fc92 	bl	77c <__assert_func>
	__asm__ volatile(
    de58:	f04f 0320 	mov.w	r3, #32
    de5c:	f3ef 8211 	mrs	r2, BASEPRI
    de60:	f383 8811 	msr	BASEPRI, r3
    de64:	f3bf 8f6f 	isb	sy
    de68:	613a      	str	r2, [r7, #16]
    de6a:	60fb      	str	r3, [r7, #12]
	return key;
    de6c:	693b      	ldr	r3, [r7, #16]

    NRFX_CRITICAL_SECTION_ENTER();
    de6e:	61bb      	str	r3, [r7, #24]
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    de70:	79fb      	ldrb	r3, [r7, #7]
    de72:	f003 030f 	and.w	r3, r3, #15
    de76:	2b00      	cmp	r3, #0
    de78:	d107      	bne.n	de8a <nrfx_usbd_ep_transfer+0x5e>
    de7a:	4b4f      	ldr	r3, [pc, #316]	; (dfb8 <nrfx_usbd_ep_transfer+0x18c>)
    de7c:	781b      	ldrb	r3, [r3, #0]
    de7e:	79fa      	ldrb	r2, [r7, #7]
    de80:	429a      	cmp	r2, r3
    de82:	d002      	beq.n	de8a <nrfx_usbd_ep_transfer+0x5e>
    {
        ret = NRFX_ERROR_INVALID_ADDR;
    de84:	4b4d      	ldr	r3, [pc, #308]	; (dfbc <nrfx_usbd_ep_transfer+0x190>)
    de86:	627b      	str	r3, [r7, #36]	; 0x24
        if (NRFX_USBD_FAILED_TRANSFERS_DEBUG &&
    de88:	e083      	b.n	df92 <nrfx_usbd_ep_transfer+0x166>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    de8a:	4b4d      	ldr	r3, [pc, #308]	; (dfc0 <nrfx_usbd_ep_transfer+0x194>)
    de8c:	681b      	ldr	r3, [r3, #0]
    de8e:	43db      	mvns	r3, r3
    de90:	b29a      	uxth	r2, r3
    de92:	4b4c      	ldr	r3, [pc, #304]	; (dfc4 <nrfx_usbd_ep_transfer+0x198>)
    de94:	681b      	ldr	r3, [r3, #0]
    de96:	431a      	orrs	r2, r3
    de98:	7ffb      	ldrb	r3, [r7, #31]
    de9a:	2101      	movs	r1, #1
    de9c:	fa01 f303 	lsl.w	r3, r1, r3
    dea0:	4013      	ands	r3, r2
    dea2:	2b00      	cmp	r3, #0
    dea4:	d002      	beq.n	deac <nrfx_usbd_ep_transfer+0x80>
    {
        /* IN (Device -> Host) transfer has to be transmitted out to allow new transmission */
        ret = NRFX_ERROR_BUSY;
    dea6:	4b48      	ldr	r3, [pc, #288]	; (dfc8 <nrfx_usbd_ep_transfer+0x19c>)
    dea8:	627b      	str	r3, [r7, #36]	; 0x24
    deaa:	e072      	b.n	df92 <nrfx_usbd_ep_transfer+0x166>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    deac:	79fb      	ldrb	r3, [r7, #7]
    deae:	4618      	mov	r0, r3
    deb0:	f7fe fcce 	bl	c850 <ep_state_access>
    deb4:	6178      	str	r0, [r7, #20]
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
    deb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
    deba:	2b00      	cmp	r3, #0
    debc:	da2e      	bge.n	df1c <nrfx_usbd_ep_transfer+0xf0>
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    debe:	79fb      	ldrb	r3, [r7, #7]
    dec0:	f003 020f 	and.w	r2, r3, #15
    dec4:	4613      	mov	r3, r2
    dec6:	005b      	lsls	r3, r3, #1
    dec8:	4413      	add	r3, r2
    deca:	009b      	lsls	r3, r3, #2
    decc:	461a      	mov	r2, r3
    dece:	4b3f      	ldr	r3, [pc, #252]	; (dfcc <nrfx_usbd_ep_transfer+0x1a0>)
    ded0:	4413      	add	r3, r2
    ded2:	623b      	str	r3, [r7, #32]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    ded4:	683b      	ldr	r3, [r7, #0]
    ded6:	681b      	ldr	r3, [r3, #0]
    ded8:	4618      	mov	r0, r3
    deda:	f00e f9ac 	bl	1c236 <nrfx_is_in_ram>
    dede:	4603      	mov	r3, r0
    dee0:	2b00      	cmp	r3, #0
    dee2:	d00d      	beq.n	df00 <nrfx_usbd_ep_transfer+0xd4>
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    dee4:	683b      	ldr	r3, [r7, #0]
    dee6:	689b      	ldr	r3, [r3, #8]
    dee8:	f003 0301 	and.w	r3, r3, #1
    deec:	2b00      	cmp	r3, #0
    deee:	d103      	bne.n	def8 <nrfx_usbd_ep_transfer+0xcc>
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
    def0:	697b      	ldr	r3, [r7, #20]
    def2:	4a37      	ldr	r2, [pc, #220]	; (dfd0 <nrfx_usbd_ep_transfer+0x1a4>)
    def4:	601a      	str	r2, [r3, #0]
    def6:	e032      	b.n	df5e <nrfx_usbd_ep_transfer+0x132>
                            p_transfer->size);
                    }
                }
                else
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
    def8:	697b      	ldr	r3, [r7, #20]
    defa:	4a36      	ldr	r2, [pc, #216]	; (dfd4 <nrfx_usbd_ep_transfer+0x1a8>)
    defc:	601a      	str	r2, [r3, #0]
    defe:	e02e      	b.n	df5e <nrfx_usbd_ep_transfer+0x132>
                }
            }
            else
            {
                /* Flash */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    df00:	683b      	ldr	r3, [r7, #0]
    df02:	689b      	ldr	r3, [r3, #8]
    df04:	f003 0301 	and.w	r3, r3, #1
    df08:	2b00      	cmp	r3, #0
    df0a:	d103      	bne.n	df14 <nrfx_usbd_ep_transfer+0xe8>
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
    df0c:	697b      	ldr	r3, [r7, #20]
    df0e:	4a32      	ldr	r2, [pc, #200]	; (dfd8 <nrfx_usbd_ep_transfer+0x1ac>)
    df10:	601a      	str	r2, [r3, #0]
    df12:	e024      	b.n	df5e <nrfx_usbd_ep_transfer+0x132>
                            p_transfer->size);
                    }
                }
                else
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
    df14:	697b      	ldr	r3, [r7, #20]
    df16:	4a31      	ldr	r2, [pc, #196]	; (dfdc <nrfx_usbd_ep_transfer+0x1b0>)
    df18:	601a      	str	r2, [r3, #0]
    df1a:	e020      	b.n	df5e <nrfx_usbd_ep_transfer+0x132>
                }
            }
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    df1c:	79fb      	ldrb	r3, [r7, #7]
    df1e:	f003 020f 	and.w	r2, r3, #15
    df22:	4613      	mov	r3, r2
    df24:	005b      	lsls	r3, r3, #1
    df26:	4413      	add	r3, r2
    df28:	009b      	lsls	r3, r3, #2
    df2a:	461a      	mov	r2, r3
    df2c:	4b2c      	ldr	r3, [pc, #176]	; (dfe0 <nrfx_usbd_ep_transfer+0x1b4>)
    df2e:	4413      	add	r3, r2
    df30:	623b      	str	r3, [r7, #32]
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
    df32:	683b      	ldr	r3, [r7, #0]
    df34:	681b      	ldr	r3, [r3, #0]
    df36:	2b00      	cmp	r3, #0
    df38:	d00e      	beq.n	df58 <nrfx_usbd_ep_transfer+0x12c>
    df3a:	683b      	ldr	r3, [r7, #0]
    df3c:	681b      	ldr	r3, [r3, #0]
    df3e:	4618      	mov	r0, r3
    df40:	f00e f979 	bl	1c236 <nrfx_is_in_ram>
    df44:	4603      	mov	r3, r0
    df46:	2b00      	cmp	r3, #0
    df48:	d106      	bne.n	df58 <nrfx_usbd_ep_transfer+0x12c>
    df4a:	4b26      	ldr	r3, [pc, #152]	; (dfe4 <nrfx_usbd_ep_transfer+0x1b8>)
    df4c:	4a18      	ldr	r2, [pc, #96]	; (dfb0 <nrfx_usbd_ep_transfer+0x184>)
    df4e:	f640 0165 	movw	r1, #2149	; 0x865
    df52:	4818      	ldr	r0, [pc, #96]	; (dfb4 <nrfx_usbd_ep_transfer+0x188>)
    df54:	f7f2 fc12 	bl	77c <__assert_func>
            p_state->handler.consumer = nrfx_usbd_consumer;
    df58:	697b      	ldr	r3, [r7, #20]
    df5a:	4a23      	ldr	r2, [pc, #140]	; (dfe8 <nrfx_usbd_ep_transfer+0x1bc>)
    df5c:	601a      	str	r2, [r3, #0]
        }
        *p_context = *p_transfer;
    df5e:	6a3b      	ldr	r3, [r7, #32]
    df60:	683a      	ldr	r2, [r7, #0]
    df62:	ca07      	ldmia	r2, {r0, r1, r2}
    df64:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
    df68:	697b      	ldr	r3, [r7, #20]
    df6a:	6a3a      	ldr	r2, [r7, #32]
    df6c:	605a      	str	r2, [r3, #4]

        p_state->transfer_cnt = 0;
    df6e:	697b      	ldr	r3, [r7, #20]
    df70:	2200      	movs	r2, #0
    df72:	609a      	str	r2, [r3, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    df74:	697b      	ldr	r3, [r7, #20]
    df76:	2200      	movs	r2, #0
    df78:	739a      	strb	r2, [r3, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    df7a:	7ffb      	ldrb	r3, [r7, #31]
    df7c:	2201      	movs	r2, #1
    df7e:	409a      	lsls	r2, r3
    df80:	4b10      	ldr	r3, [pc, #64]	; (dfc4 <nrfx_usbd_ep_transfer+0x198>)
    df82:	681b      	ldr	r3, [r3, #0]
    df84:	4313      	orrs	r3, r2
    df86:	4a0f      	ldr	r2, [pc, #60]	; (dfc4 <nrfx_usbd_ep_transfer+0x198>)
    df88:	6013      	str	r3, [r2, #0]
        ret = NRFX_SUCCESS;
    df8a:	4b18      	ldr	r3, [pc, #96]	; (dfec <nrfx_usbd_ep_transfer+0x1c0>)
    df8c:	627b      	str	r3, [r7, #36]	; 0x24
        usbd_int_rise();
    df8e:	f00e fa9c 	bl	1c4ca <usbd_int_rise>
    df92:	69bb      	ldr	r3, [r7, #24]
    df94:	60bb      	str	r3, [r7, #8]
	__asm__ volatile(
    df96:	68bb      	ldr	r3, [r7, #8]
    df98:	f383 8811 	msr	BASEPRI, r3
    df9c:	f3bf 8f6f 	isb	sy
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
    dfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    dfa2:	4618      	mov	r0, r3
    dfa4:	3728      	adds	r7, #40	; 0x28
    dfa6:	46bd      	mov	sp, r7
    dfa8:	bd80      	pop	{r7, pc}
    dfaa:	bf00      	nop
    dfac:	0002e094 	.word	0x0002e094
    dfb0:	0002ee14 	.word	0x0002ee14
    dfb4:	0002dd40 	.word	0x0002dd40
    dfb8:	20006242 	.word	0x20006242
    dfbc:	0bad000a 	.word	0x0bad000a
    dfc0:	200024e4 	.word	0x200024e4
    dfc4:	200024e8 	.word	0x200024e8
    dfc8:	0bad000b 	.word	0x0bad000b
    dfcc:	20002610 	.word	0x20002610
    dfd0:	0000c4f9 	.word	0x0000c4f9
    dfd4:	0000c581 	.word	0x0000c581
    dfd8:	0000c611 	.word	0x0000c611
    dfdc:	0000c6c9 	.word	0x0000c6c9
    dfe0:	2000267c 	.word	0x2000267c
    dfe4:	0002e0b0 	.word	0x0002e0b0
    dfe8:	0000c431 	.word	0x0000c431
    dfec:	0bad0000 	.word	0x0bad0000

0000dff0 <nrfx_usbd_feeder_buffer_get>:
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}

void * nrfx_usbd_feeder_buffer_get(void)
{
    dff0:	b480      	push	{r7}
    dff2:	af00      	add	r7, sp, #0
    return m_tx_buffer;
    dff4:	4b02      	ldr	r3, [pc, #8]	; (e000 <nrfx_usbd_feeder_buffer_get+0x10>)
}
    dff6:	4618      	mov	r0, r3
    dff8:	46bd      	mov	sp, r7
    dffa:	bc80      	pop	{r7}
    dffc:	4770      	bx	lr
    dffe:	bf00      	nop
    e000:	200026e8 	.word	0x200026e8

0000e004 <nrfx_usbd_last_setup_dir_get>:
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD_TASK_EP0STALL);
}

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    e004:	b480      	push	{r7}
    e006:	af00      	add	r7, sp, #0
    return m_last_setup_dir;
    e008:	4b02      	ldr	r3, [pc, #8]	; (e014 <nrfx_usbd_last_setup_dir_get+0x10>)
    e00a:	781b      	ldrb	r3, [r3, #0]
}
    e00c:	4618      	mov	r0, r3
    e00e:	46bd      	mov	sp, r7
    e010:	bc80      	pop	{r7}
    e012:	4770      	bx	lr
    e014:	20006242 	.word	0x20006242

0000e018 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    e018:	b580      	push	{r7, lr}
    e01a:	b08a      	sub	sp, #40	; 0x28
    e01c:	af00      	add	r7, sp, #0
    e01e:	4603      	mov	r3, r0
    e020:	71fb      	strb	r3, [r7, #7]
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));
    e022:	f997 3007 	ldrsb.w	r3, [r7, #7]
    e026:	2b00      	cmp	r3, #0
    e028:	da06      	bge.n	e038 <nrfx_usbd_transfer_out_drop+0x20>
    e02a:	4b34      	ldr	r3, [pc, #208]	; (e0fc <nrfx_usbd_transfer_out_drop+0xe4>)
    e02c:	4a34      	ldr	r2, [pc, #208]	; (e100 <nrfx_usbd_transfer_out_drop+0xe8>)
    e02e:	f640 110a 	movw	r1, #2314	; 0x90a
    e032:	4834      	ldr	r0, [pc, #208]	; (e104 <nrfx_usbd_transfer_out_drop+0xec>)
    e034:	f7f2 fba2 	bl	77c <__assert_func>

    if (nrfx_usbd_errata_200())
    e038:	f00e fa00 	bl	1c43c <nrfx_usbd_errata_200>
    e03c:	4603      	mov	r3, r0
    e03e:	2b00      	cmp	r3, #0
    e040:	d02e      	beq.n	e0a0 <nrfx_usbd_transfer_out_drop+0x88>
	__asm__ volatile(
    e042:	f04f 0320 	mov.w	r3, #32
    e046:	f3ef 8211 	mrs	r2, BASEPRI
    e04a:	f383 8811 	msr	BASEPRI, r3
    e04e:	f3bf 8f6f 	isb	sy
    e052:	61ba      	str	r2, [r7, #24]
    e054:	617b      	str	r3, [r7, #20]
	return key;
    e056:	69bb      	ldr	r3, [r7, #24]
    {
        NRFX_CRITICAL_SECTION_ENTER();
    e058:	627b      	str	r3, [r7, #36]	; 0x24
        m_ep_ready &= ~(1U << ep2bit(ep));
    e05a:	79fb      	ldrb	r3, [r7, #7]
    e05c:	4618      	mov	r0, r3
    e05e:	f7fe fc2f 	bl	c8c0 <ep2bit>
    e062:	4603      	mov	r3, r0
    e064:	461a      	mov	r2, r3
    e066:	2301      	movs	r3, #1
    e068:	4093      	lsls	r3, r2
    e06a:	43da      	mvns	r2, r3
    e06c:	4b26      	ldr	r3, [pc, #152]	; (e108 <nrfx_usbd_transfer_out_drop+0xf0>)
    e06e:	681b      	ldr	r3, [r3, #0]
    e070:	4013      	ands	r3, r2
    e072:	4a25      	ldr	r2, [pc, #148]	; (e108 <nrfx_usbd_transfer_out_drop+0xf0>)
    e074:	6013      	str	r3, [r2, #0]
        *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7C5 + (2u * NRF_USBD_EP_NR_GET(ep));
    e076:	79fb      	ldrb	r3, [r7, #7]
    e078:	f003 030f 	and.w	r3, r3, #15
    e07c:	005b      	lsls	r3, r3, #1
    e07e:	4a23      	ldr	r2, [pc, #140]	; (e10c <nrfx_usbd_transfer_out_drop+0xf4>)
    e080:	f203 73c5 	addw	r3, r3, #1989	; 0x7c5
    e084:	6013      	str	r3, [r2, #0]
        *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) = 0;
    e086:	4b22      	ldr	r3, [pc, #136]	; (e110 <nrfx_usbd_transfer_out_drop+0xf8>)
    e088:	2200      	movs	r2, #0
    e08a:	601a      	str	r2, [r3, #0]
        (void)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    e08c:	4b20      	ldr	r3, [pc, #128]	; (e110 <nrfx_usbd_transfer_out_drop+0xf8>)
    e08e:	681b      	ldr	r3, [r3, #0]
    e090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e092:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
    e094:	69fb      	ldr	r3, [r7, #28]
    e096:	f383 8811 	msr	BASEPRI, r3
    e09a:	f3bf 8f6f 	isb	sy
        {
            nrf_usbd_epout_clear(ep);
        }
        NRFX_CRITICAL_SECTION_EXIT();
    }
}
    e09e:	e029      	b.n	e0f4 <nrfx_usbd_transfer_out_drop+0xdc>
	__asm__ volatile(
    e0a0:	f04f 0320 	mov.w	r3, #32
    e0a4:	f3ef 8211 	mrs	r2, BASEPRI
    e0a8:	f383 8811 	msr	BASEPRI, r3
    e0ac:	f3bf 8f6f 	isb	sy
    e0b0:	613a      	str	r2, [r7, #16]
    e0b2:	60fb      	str	r3, [r7, #12]
	return key;
    e0b4:	693b      	ldr	r3, [r7, #16]
        NRFX_CRITICAL_SECTION_ENTER();
    e0b6:	623b      	str	r3, [r7, #32]
        m_ep_ready &= ~(1U << ep2bit(ep));
    e0b8:	79fb      	ldrb	r3, [r7, #7]
    e0ba:	4618      	mov	r0, r3
    e0bc:	f7fe fc00 	bl	c8c0 <ep2bit>
    e0c0:	4603      	mov	r3, r0
    e0c2:	461a      	mov	r2, r3
    e0c4:	2301      	movs	r3, #1
    e0c6:	4093      	lsls	r3, r2
    e0c8:	43da      	mvns	r2, r3
    e0ca:	4b0f      	ldr	r3, [pc, #60]	; (e108 <nrfx_usbd_transfer_out_drop+0xf0>)
    e0cc:	681b      	ldr	r3, [r3, #0]
    e0ce:	4013      	ands	r3, r2
    e0d0:	4a0d      	ldr	r2, [pc, #52]	; (e108 <nrfx_usbd_transfer_out_drop+0xf0>)
    e0d2:	6013      	str	r3, [r2, #0]
        if (!NRF_USBD_EPISO_CHECK(ep))
    e0d4:	79fb      	ldrb	r3, [r7, #7]
    e0d6:	f003 0308 	and.w	r3, r3, #8
    e0da:	2b00      	cmp	r3, #0
    e0dc:	d103      	bne.n	e0e6 <nrfx_usbd_transfer_out_drop+0xce>
            nrf_usbd_epout_clear(ep);
    e0de:	79fb      	ldrb	r3, [r7, #7]
    e0e0:	4618      	mov	r0, r3
    e0e2:	f7fd fee3 	bl	beac <nrf_usbd_epout_clear>
    e0e6:	6a3b      	ldr	r3, [r7, #32]
    e0e8:	60bb      	str	r3, [r7, #8]
	__asm__ volatile(
    e0ea:	68bb      	ldr	r3, [r7, #8]
    e0ec:	f383 8811 	msr	BASEPRI, r3
    e0f0:	f3bf 8f6f 	isb	sy
}
    e0f4:	bf00      	nop
    e0f6:	3728      	adds	r7, #40	; 0x28
    e0f8:	46bd      	mov	sp, r7
    e0fa:	bd80      	pop	{r7, pc}
    e0fc:	0002d9b4 	.word	0x0002d9b4
    e100:	0002ee80 	.word	0x0002ee80
    e104:	0002dd40 	.word	0x0002dd40
    e108:	200024e4 	.word	0x200024e4
    e10c:	40027800 	.word	0x40027800
    e110:	40027804 	.word	0x40027804

0000e114 <tty_init>:

	return out_size;
}

int tty_init(struct tty_serial *tty, struct device *uart_dev)
{
    e114:	b580      	push	{r7, lr}
    e116:	b082      	sub	sp, #8
    e118:	af00      	add	r7, sp, #0
    e11a:	6078      	str	r0, [r7, #4]
    e11c:	6039      	str	r1, [r7, #0]
	tty->uart_dev = uart_dev;
    e11e:	687b      	ldr	r3, [r7, #4]
    e120:	683a      	ldr	r2, [r7, #0]
    e122:	601a      	str	r2, [r3, #0]

	/* We start in unbuffer mode. */
	tty->rx_ringbuf = NULL;
    e124:	687b      	ldr	r3, [r7, #4]
    e126:	2200      	movs	r2, #0
    e128:	61da      	str	r2, [r3, #28]
	tty->rx_ringbuf_sz = 0U;
    e12a:	687b      	ldr	r3, [r7, #4]
    e12c:	2200      	movs	r2, #0
    e12e:	621a      	str	r2, [r3, #32]
	tty->tx_ringbuf = NULL;
    e130:	687b      	ldr	r3, [r7, #4]
    e132:	2200      	movs	r2, #0
    e134:	645a      	str	r2, [r3, #68]	; 0x44
	tty->tx_ringbuf_sz = 0U;
    e136:	687b      	ldr	r3, [r7, #4]
    e138:	2200      	movs	r2, #0
    e13a:	649a      	str	r2, [r3, #72]	; 0x48

	tty->rx_get = tty->rx_put = tty->tx_get = tty->tx_put = 0U;
    e13c:	687b      	ldr	r3, [r7, #4]
    e13e:	2200      	movs	r2, #0
    e140:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    e144:	687b      	ldr	r3, [r7, #4]
    e146:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
    e14a:	687b      	ldr	r3, [r7, #4]
    e14c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    e150:	687b      	ldr	r3, [r7, #4]
    e152:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
    e156:	687b      	ldr	r3, [r7, #4]
    e158:	84da      	strh	r2, [r3, #38]	; 0x26
    e15a:	687b      	ldr	r3, [r7, #4]
    e15c:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    e15e:	687b      	ldr	r3, [r7, #4]
    e160:	849a      	strh	r2, [r3, #36]	; 0x24

	tty->rx_timeout = K_FOREVER;
    e162:	687b      	ldr	r3, [r7, #4]
    e164:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e168:	629a      	str	r2, [r3, #40]	; 0x28
	tty->tx_timeout = K_FOREVER;
    e16a:	687b      	ldr	r3, [r7, #4]
    e16c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e170:	651a      	str	r2, [r3, #80]	; 0x50

	uart_irq_callback_user_data_set(uart_dev, tty_uart_isr, tty);
    e172:	687a      	ldr	r2, [r7, #4]
    e174:	4904      	ldr	r1, [pc, #16]	; (e188 <tty_init+0x74>)
    e176:	6838      	ldr	r0, [r7, #0]
    e178:	f00e fc52 	bl	1ca20 <uart_irq_callback_user_data_set>

	return 0;
    e17c:	2300      	movs	r3, #0
}
    e17e:	4618      	mov	r0, r3
    e180:	3708      	adds	r7, #8
    e182:	46bd      	mov	sp, r7
    e184:	bd80      	pop	{r7, pc}
    e186:	bf00      	nop
    e188:	0001caff 	.word	0x0001caff

0000e18c <console_putchar>:

	return tty_read(&console_serial, buf, size);
}

int console_putchar(char c)
{
    e18c:	b580      	push	{r7, lr}
    e18e:	b082      	sub	sp, #8
    e190:	af00      	add	r7, sp, #0
    e192:	4603      	mov	r3, r0
    e194:	71fb      	strb	r3, [r7, #7]
	return tty_write(&console_serial, &c, 1);
    e196:	1dfb      	adds	r3, r7, #7
    e198:	2201      	movs	r2, #1
    e19a:	4619      	mov	r1, r3
    e19c:	4803      	ldr	r0, [pc, #12]	; (e1ac <console_putchar+0x20>)
    e19e:	f00e fd96 	bl	1ccce <tty_write>
    e1a2:	4603      	mov	r3, r0
}
    e1a4:	4618      	mov	r0, r3
    e1a6:	3708      	adds	r7, #8
    e1a8:	46bd      	mov	sp, r7
    e1aa:	bd80      	pop	{r7, pc}
    e1ac:	20002728 	.word	0x20002728

0000e1b0 <console_getchar>:

int console_getchar(void)
{
    e1b0:	b580      	push	{r7, lr}
    e1b2:	b082      	sub	sp, #8
    e1b4:	af00      	add	r7, sp, #0
	u8_t c;
	int res;

	res = tty_read(&console_serial, &c, 1);
    e1b6:	1cfb      	adds	r3, r7, #3
    e1b8:	2201      	movs	r2, #1
    e1ba:	4619      	mov	r1, r3
    e1bc:	4806      	ldr	r0, [pc, #24]	; (e1d8 <console_getchar+0x28>)
    e1be:	f00e fe61 	bl	1ce84 <tty_read>
    e1c2:	6078      	str	r0, [r7, #4]
	if (res < 0) {
    e1c4:	687b      	ldr	r3, [r7, #4]
    e1c6:	2b00      	cmp	r3, #0
    e1c8:	da01      	bge.n	e1ce <console_getchar+0x1e>
		return res;
    e1ca:	687b      	ldr	r3, [r7, #4]
    e1cc:	e000      	b.n	e1d0 <console_getchar+0x20>
	}

	return c;
    e1ce:	78fb      	ldrb	r3, [r7, #3]
}
    e1d0:	4618      	mov	r0, r3
    e1d2:	3708      	adds	r7, #8
    e1d4:	46bd      	mov	sp, r7
    e1d6:	bd80      	pop	{r7, pc}
    e1d8:	20002728 	.word	0x20002728

0000e1dc <console_init>:

void console_init(void)
{
    e1dc:	b580      	push	{r7, lr}
    e1de:	b082      	sub	sp, #8
    e1e0:	af00      	add	r7, sp, #0
	struct device *uart_dev;

	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    e1e2:	480b      	ldr	r0, [pc, #44]	; (e210 <console_init+0x34>)
    e1e4:	f00e fed2 	bl	1cf8c <device_get_binding>
    e1e8:	6078      	str	r0, [r7, #4]
	tty_init(&console_serial, uart_dev);
    e1ea:	6879      	ldr	r1, [r7, #4]
    e1ec:	4809      	ldr	r0, [pc, #36]	; (e214 <console_init+0x38>)
    e1ee:	f7ff ff91 	bl	e114 <tty_init>
	tty_set_tx_buf(&console_serial, console_txbuf, sizeof(console_txbuf));
    e1f2:	f44f 7200 	mov.w	r2, #512	; 0x200
    e1f6:	4908      	ldr	r1, [pc, #32]	; (e218 <console_init+0x3c>)
    e1f8:	4806      	ldr	r0, [pc, #24]	; (e214 <console_init+0x38>)
    e1fa:	f00e fea7 	bl	1cf4c <tty_set_tx_buf>
	tty_set_rx_buf(&console_serial, console_rxbuf, sizeof(console_rxbuf));
    e1fe:	2240      	movs	r2, #64	; 0x40
    e200:	4906      	ldr	r1, [pc, #24]	; (e21c <console_init+0x40>)
    e202:	4804      	ldr	r0, [pc, #16]	; (e214 <console_init+0x38>)
    e204:	f00e fe7c 	bl	1cf00 <tty_set_rx_buf>
}
    e208:	bf00      	nop
    e20a:	3708      	adds	r7, #8
    e20c:	46bd      	mov	sp, r7
    e20e:	bd80      	pop	{r7, pc}
    e210:	0002e120 	.word	0x0002e120
    e214:	20002728 	.word	0x20002728
    e218:	200027bc 	.word	0x200027bc
    e21c:	2000277c 	.word	0x2000277c

0000e220 <coap_append_option_int>:
	return 0;
}

int coap_append_option_int(struct coap_packet *cpkt, u16_t code,
			   unsigned int val)
{
    e220:	b580      	push	{r7, lr}
    e222:	b086      	sub	sp, #24
    e224:	af00      	add	r7, sp, #0
    e226:	60f8      	str	r0, [r7, #12]
    e228:	460b      	mov	r3, r1
    e22a:	607a      	str	r2, [r7, #4]
    e22c:	817b      	strh	r3, [r7, #10]
	u8_t data[4], len;

	if (val == 0U) {
    e22e:	687b      	ldr	r3, [r7, #4]
    e230:	2b00      	cmp	r3, #0
    e232:	d104      	bne.n	e23e <coap_append_option_int+0x1e>
		data[0] = 0U;
    e234:	2300      	movs	r3, #0
    e236:	743b      	strb	r3, [r7, #16]
		len = 0U;
    e238:	2300      	movs	r3, #0
    e23a:	75fb      	strb	r3, [r7, #23]
    e23c:	e034      	b.n	e2a8 <coap_append_option_int+0x88>
	} else if (val < 0xFF) {
    e23e:	687b      	ldr	r3, [r7, #4]
    e240:	2bfe      	cmp	r3, #254	; 0xfe
    e242:	d805      	bhi.n	e250 <coap_append_option_int+0x30>
		data[0] = (u8_t) val;
    e244:	687b      	ldr	r3, [r7, #4]
    e246:	b2db      	uxtb	r3, r3
    e248:	743b      	strb	r3, [r7, #16]
		len = 1U;
    e24a:	2301      	movs	r3, #1
    e24c:	75fb      	strb	r3, [r7, #23]
    e24e:	e02b      	b.n	e2a8 <coap_append_option_int+0x88>
	} else if (val < 0xFFFF) {
    e250:	687b      	ldr	r3, [r7, #4]
    e252:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    e256:	4293      	cmp	r3, r2
    e258:	d80a      	bhi.n	e270 <coap_append_option_int+0x50>
		sys_put_be16(val, data);
    e25a:	687b      	ldr	r3, [r7, #4]
    e25c:	b29b      	uxth	r3, r3
    e25e:	f107 0210 	add.w	r2, r7, #16
    e262:	4611      	mov	r1, r2
    e264:	4618      	mov	r0, r3
    e266:	f00e ff92 	bl	1d18e <sys_put_be16>
		len = 2U;
    e26a:	2302      	movs	r3, #2
    e26c:	75fb      	strb	r3, [r7, #23]
    e26e:	e01b      	b.n	e2a8 <coap_append_option_int+0x88>
	} else if (val < 0xFFFFFF) {
    e270:	687b      	ldr	r3, [r7, #4]
    e272:	4a14      	ldr	r2, [pc, #80]	; (e2c4 <coap_append_option_int+0xa4>)
    e274:	4293      	cmp	r3, r2
    e276:	d80f      	bhi.n	e298 <coap_append_option_int+0x78>
		sys_put_be16(val, &data[1]);
    e278:	687b      	ldr	r3, [r7, #4]
    e27a:	b29a      	uxth	r2, r3
    e27c:	f107 0310 	add.w	r3, r7, #16
    e280:	3301      	adds	r3, #1
    e282:	4619      	mov	r1, r3
    e284:	4610      	mov	r0, r2
    e286:	f00e ff82 	bl	1d18e <sys_put_be16>
		data[0] = val >> 16;
    e28a:	687b      	ldr	r3, [r7, #4]
    e28c:	0c1b      	lsrs	r3, r3, #16
    e28e:	b2db      	uxtb	r3, r3
    e290:	743b      	strb	r3, [r7, #16]
		len = 3U;
    e292:	2303      	movs	r3, #3
    e294:	75fb      	strb	r3, [r7, #23]
    e296:	e007      	b.n	e2a8 <coap_append_option_int+0x88>
	} else {
		sys_put_be32(val, data);
    e298:	f107 0310 	add.w	r3, r7, #16
    e29c:	4619      	mov	r1, r3
    e29e:	6878      	ldr	r0, [r7, #4]
    e2a0:	f00e ff8b 	bl	1d1ba <sys_put_be32>
		len = 4U;
    e2a4:	2304      	movs	r3, #4
    e2a6:	75fb      	strb	r3, [r7, #23]
	}

	return coap_packet_append_option(cpkt, code, data, len);
    e2a8:	7dfb      	ldrb	r3, [r7, #23]
    e2aa:	b29b      	uxth	r3, r3
    e2ac:	f107 0210 	add.w	r2, r7, #16
    e2b0:	8979      	ldrh	r1, [r7, #10]
    e2b2:	68f8      	ldr	r0, [r7, #12]
    e2b4:	f00f fa3c 	bl	1d730 <coap_packet_append_option>
    e2b8:	4603      	mov	r3, r0
}
    e2ba:	4618      	mov	r0, r3
    e2bc:	3718      	adds	r7, #24
    e2be:	46bd      	mov	sp, r7
    e2c0:	bd80      	pop	{r7, pc}
    e2c2:	bf00      	nop
    e2c4:	00fffffe 	.word	0x00fffffe

0000e2c8 <coap_option_value_to_int>:

unsigned int coap_option_value_to_int(const struct coap_option *option)
{
    e2c8:	b480      	push	{r7}
    e2ca:	b083      	sub	sp, #12
    e2cc:	af00      	add	r7, sp, #0
    e2ce:	6078      	str	r0, [r7, #4]
	switch (option->len) {
    e2d0:	687b      	ldr	r3, [r7, #4]
    e2d2:	789b      	ldrb	r3, [r3, #2]
    e2d4:	2b04      	cmp	r3, #4
    e2d6:	d836      	bhi.n	e346 <coap_option_value_to_int+0x7e>
    e2d8:	a201      	add	r2, pc, #4	; (adr r2, e2e0 <coap_option_value_to_int+0x18>)
    e2da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e2de:	bf00      	nop
    e2e0:	0000e2f5 	.word	0x0000e2f5
    e2e4:	0000e2f9 	.word	0x0000e2f9
    e2e8:	0000e2ff 	.word	0x0000e2ff
    e2ec:	0000e30f 	.word	0x0000e30f
    e2f0:	0000e327 	.word	0x0000e327
	case 0:
		return 0;
    e2f4:	2300      	movs	r3, #0
    e2f6:	e027      	b.n	e348 <coap_option_value_to_int+0x80>
	case 1:
		return option->value[0];
    e2f8:	687b      	ldr	r3, [r7, #4]
    e2fa:	78db      	ldrb	r3, [r3, #3]
    e2fc:	e024      	b.n	e348 <coap_option_value_to_int+0x80>
	case 2:
		return (option->value[1] << 0) | (option->value[0] << 8);
    e2fe:	687b      	ldr	r3, [r7, #4]
    e300:	791b      	ldrb	r3, [r3, #4]
    e302:	461a      	mov	r2, r3
    e304:	687b      	ldr	r3, [r7, #4]
    e306:	78db      	ldrb	r3, [r3, #3]
    e308:	021b      	lsls	r3, r3, #8
    e30a:	4313      	orrs	r3, r2
    e30c:	e01c      	b.n	e348 <coap_option_value_to_int+0x80>
	case 3:
		return (option->value[2] << 0) | (option->value[1] << 8) |
    e30e:	687b      	ldr	r3, [r7, #4]
    e310:	795b      	ldrb	r3, [r3, #5]
    e312:	461a      	mov	r2, r3
    e314:	687b      	ldr	r3, [r7, #4]
    e316:	791b      	ldrb	r3, [r3, #4]
    e318:	021b      	lsls	r3, r3, #8
    e31a:	431a      	orrs	r2, r3
			(option->value[0] << 16);
    e31c:	687b      	ldr	r3, [r7, #4]
    e31e:	78db      	ldrb	r3, [r3, #3]
    e320:	041b      	lsls	r3, r3, #16
		return (option->value[2] << 0) | (option->value[1] << 8) |
    e322:	4313      	orrs	r3, r2
    e324:	e010      	b.n	e348 <coap_option_value_to_int+0x80>
	case 4:
		return (option->value[3] << 0) | (option->value[2] << 8) |
    e326:	687b      	ldr	r3, [r7, #4]
    e328:	799b      	ldrb	r3, [r3, #6]
    e32a:	461a      	mov	r2, r3
    e32c:	687b      	ldr	r3, [r7, #4]
    e32e:	795b      	ldrb	r3, [r3, #5]
    e330:	021b      	lsls	r3, r3, #8
    e332:	431a      	orrs	r2, r3
			(option->value[1] << 16) | (option->value[0] << 24);
    e334:	687b      	ldr	r3, [r7, #4]
    e336:	791b      	ldrb	r3, [r3, #4]
    e338:	041b      	lsls	r3, r3, #16
		return (option->value[3] << 0) | (option->value[2] << 8) |
    e33a:	431a      	orrs	r2, r3
			(option->value[1] << 16) | (option->value[0] << 24);
    e33c:	687b      	ldr	r3, [r7, #4]
    e33e:	78db      	ldrb	r3, [r3, #3]
    e340:	061b      	lsls	r3, r3, #24
    e342:	4313      	orrs	r3, r2
    e344:	e000      	b.n	e348 <coap_option_value_to_int+0x80>
	default:
		return 0;
    e346:	2300      	movs	r3, #0
	}

	return 0;
}
    e348:	4618      	mov	r0, r3
    e34a:	370c      	adds	r7, #12
    e34c:	46bd      	mov	sp, r7
    e34e:	bc80      	pop	{r7}
    e350:	4770      	bx	lr
    e352:	bf00      	nop

0000e354 <method_from_code>:
	return true;
}

static coap_method_t method_from_code(const struct coap_resource *resource,
				      u8_t code)
{
    e354:	b480      	push	{r7}
    e356:	b083      	sub	sp, #12
    e358:	af00      	add	r7, sp, #0
    e35a:	6078      	str	r0, [r7, #4]
    e35c:	460b      	mov	r3, r1
    e35e:	70fb      	strb	r3, [r7, #3]
	switch (code) {
    e360:	78fb      	ldrb	r3, [r7, #3]
    e362:	3b01      	subs	r3, #1
    e364:	2b03      	cmp	r3, #3
    e366:	d817      	bhi.n	e398 <method_from_code+0x44>
    e368:	a201      	add	r2, pc, #4	; (adr r2, e370 <method_from_code+0x1c>)
    e36a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e36e:	bf00      	nop
    e370:	0000e381 	.word	0x0000e381
    e374:	0000e387 	.word	0x0000e387
    e378:	0000e38d 	.word	0x0000e38d
    e37c:	0000e393 	.word	0x0000e393
	case COAP_METHOD_GET:
		return resource->get;
    e380:	687b      	ldr	r3, [r7, #4]
    e382:	681b      	ldr	r3, [r3, #0]
    e384:	e009      	b.n	e39a <method_from_code+0x46>
	case COAP_METHOD_POST:
		return resource->post;
    e386:	687b      	ldr	r3, [r7, #4]
    e388:	685b      	ldr	r3, [r3, #4]
    e38a:	e006      	b.n	e39a <method_from_code+0x46>
	case COAP_METHOD_PUT:
		return resource->put;
    e38c:	687b      	ldr	r3, [r7, #4]
    e38e:	689b      	ldr	r3, [r3, #8]
    e390:	e003      	b.n	e39a <method_from_code+0x46>
	case COAP_METHOD_DELETE:
		return resource->del;
    e392:	687b      	ldr	r3, [r7, #4]
    e394:	68db      	ldr	r3, [r3, #12]
    e396:	e000      	b.n	e39a <method_from_code+0x46>
	default:
		return NULL;
    e398:	2300      	movs	r3, #0
	}
}
    e39a:	4618      	mov	r0, r3
    e39c:	370c      	adds	r7, #12
    e39e:	46bd      	mov	sp, r7
    e3a0:	bc80      	pop	{r7}
    e3a2:	4770      	bx	lr

0000e3a4 <match_queries_resource>:
}

static bool match_queries_resource(const struct coap_resource *resource,
				   const struct coap_option *query,
				   int num_queries)
{
    e3a4:	b580      	push	{r7, lr}
    e3a6:	b08a      	sub	sp, #40	; 0x28
    e3a8:	af00      	add	r7, sp, #0
    e3aa:	60f8      	str	r0, [r7, #12]
    e3ac:	60b9      	str	r1, [r7, #8]
    e3ae:	607a      	str	r2, [r7, #4]
	struct coap_core_metadata *meta = resource->user_data;
    e3b0:	68fb      	ldr	r3, [r7, #12]
    e3b2:	699b      	ldr	r3, [r3, #24]
    e3b4:	623b      	str	r3, [r7, #32]
	const char * const *attributes = NULL;
    e3b6:	2300      	movs	r3, #0
    e3b8:	627b      	str	r3, [r7, #36]	; 0x24
	const int href_len = strlen("href");
    e3ba:	4826      	ldr	r0, [pc, #152]	; (e454 <match_queries_resource+0xb0>)
    e3bc:	f7f3 fe9b 	bl	20f6 <strlen>
    e3c0:	4603      	mov	r3, r0
    e3c2:	61fb      	str	r3, [r7, #28]

	if (num_queries == 0) {
    e3c4:	687b      	ldr	r3, [r7, #4]
    e3c6:	2b00      	cmp	r3, #0
    e3c8:	d101      	bne.n	e3ce <match_queries_resource+0x2a>
		return true;
    e3ca:	2301      	movs	r3, #1
    e3cc:	e03d      	b.n	e44a <match_queries_resource+0xa6>
	}

	if (meta && meta->attributes) {
    e3ce:	6a3b      	ldr	r3, [r7, #32]
    e3d0:	2b00      	cmp	r3, #0
    e3d2:	d006      	beq.n	e3e2 <match_queries_resource+0x3e>
    e3d4:	6a3b      	ldr	r3, [r7, #32]
    e3d6:	681b      	ldr	r3, [r3, #0]
    e3d8:	2b00      	cmp	r3, #0
    e3da:	d002      	beq.n	e3e2 <match_queries_resource+0x3e>
		attributes = meta->attributes;
    e3dc:	6a3b      	ldr	r3, [r7, #32]
    e3de:	681b      	ldr	r3, [r3, #0]
    e3e0:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if (!attributes) {
    e3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e3e4:	2b00      	cmp	r3, #0
    e3e6:	d101      	bne.n	e3ec <match_queries_resource+0x48>
		return false;
    e3e8:	2300      	movs	r3, #0
    e3ea:	e02e      	b.n	e44a <match_queries_resource+0xa6>
	}

	if (query->len > href_len + 1 &&
    e3ec:	68bb      	ldr	r3, [r7, #8]
    e3ee:	789b      	ldrb	r3, [r3, #2]
    e3f0:	461a      	mov	r2, r3
    e3f2:	69fb      	ldr	r3, [r7, #28]
    e3f4:	3301      	adds	r3, #1
    e3f6:	429a      	cmp	r2, r3
    e3f8:	dd22      	ble.n	e440 <match_queries_resource+0x9c>
	    !strncmp((char *) query->value, "href", href_len)) {
    e3fa:	68bb      	ldr	r3, [r7, #8]
    e3fc:	3303      	adds	r3, #3
    e3fe:	69fa      	ldr	r2, [r7, #28]
    e400:	4914      	ldr	r1, [pc, #80]	; (e454 <match_queries_resource+0xb0>)
    e402:	4618      	mov	r0, r3
    e404:	f7f3 fe7f 	bl	2106 <strncmp>
    e408:	4603      	mov	r3, r0
	if (query->len > href_len + 1 &&
    e40a:	2b00      	cmp	r3, #0
    e40c:	d118      	bne.n	e440 <match_queries_resource+0x9c>
		/* The stuff after 'href=' */
		const char *uri = (char *) query->value + href_len + 1;
    e40e:	68bb      	ldr	r3, [r7, #8]
    e410:	1cda      	adds	r2, r3, #3
    e412:	69fb      	ldr	r3, [r7, #28]
    e414:	3301      	adds	r3, #1
    e416:	4413      	add	r3, r2
    e418:	61bb      	str	r3, [r7, #24]
		u16_t uri_len  = query->len - (href_len + 1);
    e41a:	68bb      	ldr	r3, [r7, #8]
    e41c:	789b      	ldrb	r3, [r3, #2]
    e41e:	b21a      	sxth	r2, r3
    e420:	69fb      	ldr	r3, [r7, #28]
    e422:	b21b      	sxth	r3, r3
    e424:	1ad3      	subs	r3, r2, r3
    e426:	b21b      	sxth	r3, r3
    e428:	3b01      	subs	r3, #1
    e42a:	b21b      	sxth	r3, r3
    e42c:	82fb      	strh	r3, [r7, #22]

		return match_path_uri(resource->path, uri, uri_len);
    e42e:	68fb      	ldr	r3, [r7, #12]
    e430:	695b      	ldr	r3, [r3, #20]
    e432:	8afa      	ldrh	r2, [r7, #22]
    e434:	69b9      	ldr	r1, [r7, #24]
    e436:	4618      	mov	r0, r3
    e438:	f010 fb5d 	bl	1eaf6 <match_path_uri>
    e43c:	4603      	mov	r3, r0
    e43e:	e004      	b.n	e44a <match_queries_resource+0xa6>
	}

	return match_attributes(attributes, query);
    e440:	68b9      	ldr	r1, [r7, #8]
    e442:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e444:	f010 fbea 	bl	1ec1c <match_attributes>
    e448:	4603      	mov	r3, r0
}
    e44a:	4618      	mov	r0, r3
    e44c:	3728      	adds	r7, #40	; 0x28
    e44e:	46bd      	mov	sp, r7
    e450:	bd80      	pop	{r7, pc}
    e452:	bf00      	nop
    e454:	0002e128 	.word	0x0002e128

0000e458 <format_uri>:

static int format_uri(const char * const *path,
		      struct coap_packet *response,
		      u16_t *remaining, size_t *offset,
		      size_t current, bool *more)
{
    e458:	b580      	push	{r7, lr}
    e45a:	b088      	sub	sp, #32
    e45c:	af02      	add	r7, sp, #8
    e45e:	60f8      	str	r0, [r7, #12]
    e460:	60b9      	str	r1, [r7, #8]
    e462:	607a      	str	r2, [r7, #4]
    e464:	603b      	str	r3, [r7, #0]
	static const char prefix[] = "</";
	const char * const *p;
	bool res;

	if (!path) {
    e466:	68fb      	ldr	r3, [r7, #12]
    e468:	2b00      	cmp	r3, #0
    e46a:	d102      	bne.n	e472 <format_uri+0x1a>
		return -EINVAL;
    e46c:	f06f 0315 	mvn.w	r3, #21
    e470:	e092      	b.n	e598 <format_uri+0x140>
	}

	res = append_to_coap_pkt(response, &prefix[0], sizeof(prefix) - 1,
    e472:	6a3b      	ldr	r3, [r7, #32]
    e474:	9301      	str	r3, [sp, #4]
    e476:	683b      	ldr	r3, [r7, #0]
    e478:	9300      	str	r3, [sp, #0]
    e47a:	687b      	ldr	r3, [r7, #4]
    e47c:	2202      	movs	r2, #2
    e47e:	4948      	ldr	r1, [pc, #288]	; (e5a0 <format_uri+0x148>)
    e480:	68b8      	ldr	r0, [r7, #8]
    e482:	f010 fc04 	bl	1ec8e <append_to_coap_pkt>
    e486:	4603      	mov	r3, r0
    e488:	74fb      	strb	r3, [r7, #19]
				 remaining, offset, current);
	if (!res) {
    e48a:	7cfb      	ldrb	r3, [r7, #19]
    e48c:	f083 0301 	eor.w	r3, r3, #1
    e490:	b2db      	uxtb	r3, r3
    e492:	2b00      	cmp	r3, #0
    e494:	d002      	beq.n	e49c <format_uri+0x44>
		return -ENOMEM;
    e496:	f06f 030b 	mvn.w	r3, #11
    e49a:	e07d      	b.n	e598 <format_uri+0x140>
	}

	if (!*remaining) {
    e49c:	687b      	ldr	r3, [r7, #4]
    e49e:	881b      	ldrh	r3, [r3, #0]
    e4a0:	2b00      	cmp	r3, #0
    e4a2:	d104      	bne.n	e4ae <format_uri+0x56>
		*more = true;
    e4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e4a6:	2201      	movs	r2, #1
    e4a8:	701a      	strb	r2, [r3, #0]
		return 0;
    e4aa:	2300      	movs	r3, #0
    e4ac:	e074      	b.n	e598 <format_uri+0x140>
	}

	for (p = path; *p; ) {
    e4ae:	68fb      	ldr	r3, [r7, #12]
    e4b0:	617b      	str	r3, [r7, #20]
    e4b2:	e04b      	b.n	e54c <format_uri+0xf4>
		u16_t path_len = strlen(*p);
    e4b4:	697b      	ldr	r3, [r7, #20]
    e4b6:	681b      	ldr	r3, [r3, #0]
    e4b8:	4618      	mov	r0, r3
    e4ba:	f7f3 fe1c 	bl	20f6 <strlen>
    e4be:	4603      	mov	r3, r0
    e4c0:	823b      	strh	r3, [r7, #16]

		res = append_to_coap_pkt(response, *p, path_len, remaining,
    e4c2:	697b      	ldr	r3, [r7, #20]
    e4c4:	6819      	ldr	r1, [r3, #0]
    e4c6:	8a3a      	ldrh	r2, [r7, #16]
    e4c8:	6a3b      	ldr	r3, [r7, #32]
    e4ca:	9301      	str	r3, [sp, #4]
    e4cc:	683b      	ldr	r3, [r7, #0]
    e4ce:	9300      	str	r3, [sp, #0]
    e4d0:	687b      	ldr	r3, [r7, #4]
    e4d2:	68b8      	ldr	r0, [r7, #8]
    e4d4:	f010 fbdb 	bl	1ec8e <append_to_coap_pkt>
    e4d8:	4603      	mov	r3, r0
    e4da:	74fb      	strb	r3, [r7, #19]
					 offset, current);
		if (!res) {
    e4dc:	7cfb      	ldrb	r3, [r7, #19]
    e4de:	f083 0301 	eor.w	r3, r3, #1
    e4e2:	b2db      	uxtb	r3, r3
    e4e4:	2b00      	cmp	r3, #0
    e4e6:	d002      	beq.n	e4ee <format_uri+0x96>
			return -ENOMEM;
    e4e8:	f06f 030b 	mvn.w	r3, #11
    e4ec:	e054      	b.n	e598 <format_uri+0x140>
		}

		if (!*remaining) {
    e4ee:	687b      	ldr	r3, [r7, #4]
    e4f0:	881b      	ldrh	r3, [r3, #0]
    e4f2:	2b00      	cmp	r3, #0
    e4f4:	d104      	bne.n	e500 <format_uri+0xa8>
			*more = true;
    e4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e4f8:	2201      	movs	r2, #1
    e4fa:	701a      	strb	r2, [r3, #0]
			return 0;
    e4fc:	2300      	movs	r3, #0
    e4fe:	e04b      	b.n	e598 <format_uri+0x140>
		}

		p++;
    e500:	697b      	ldr	r3, [r7, #20]
    e502:	3304      	adds	r3, #4
    e504:	617b      	str	r3, [r7, #20]
		if (!*p) {
    e506:	697b      	ldr	r3, [r7, #20]
    e508:	681b      	ldr	r3, [r3, #0]
    e50a:	2b00      	cmp	r3, #0
    e50c:	d100      	bne.n	e510 <format_uri+0xb8>
			continue;
    e50e:	e01d      	b.n	e54c <format_uri+0xf4>
		}

		res = append_to_coap_pkt(response, "/", 1, remaining, offset,
    e510:	6a3b      	ldr	r3, [r7, #32]
    e512:	9301      	str	r3, [sp, #4]
    e514:	683b      	ldr	r3, [r7, #0]
    e516:	9300      	str	r3, [sp, #0]
    e518:	687b      	ldr	r3, [r7, #4]
    e51a:	2201      	movs	r2, #1
    e51c:	4921      	ldr	r1, [pc, #132]	; (e5a4 <format_uri+0x14c>)
    e51e:	68b8      	ldr	r0, [r7, #8]
    e520:	f010 fbb5 	bl	1ec8e <append_to_coap_pkt>
    e524:	4603      	mov	r3, r0
    e526:	74fb      	strb	r3, [r7, #19]
					 current);
		if (!res) {
    e528:	7cfb      	ldrb	r3, [r7, #19]
    e52a:	f083 0301 	eor.w	r3, r3, #1
    e52e:	b2db      	uxtb	r3, r3
    e530:	2b00      	cmp	r3, #0
    e532:	d002      	beq.n	e53a <format_uri+0xe2>
			return -ENOMEM;
    e534:	f06f 030b 	mvn.w	r3, #11
    e538:	e02e      	b.n	e598 <format_uri+0x140>
		}

		if (!*remaining) {
    e53a:	687b      	ldr	r3, [r7, #4]
    e53c:	881b      	ldrh	r3, [r3, #0]
    e53e:	2b00      	cmp	r3, #0
    e540:	d104      	bne.n	e54c <format_uri+0xf4>
			*more = true;
    e542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e544:	2201      	movs	r2, #1
    e546:	701a      	strb	r2, [r3, #0]
			return 0;
    e548:	2300      	movs	r3, #0
    e54a:	e025      	b.n	e598 <format_uri+0x140>
	for (p = path; *p; ) {
    e54c:	697b      	ldr	r3, [r7, #20]
    e54e:	681b      	ldr	r3, [r3, #0]
    e550:	2b00      	cmp	r3, #0
    e552:	d1af      	bne.n	e4b4 <format_uri+0x5c>
		}

	}

	res = append_to_coap_pkt(response, ">", 1, remaining, offset, current);
    e554:	6a3b      	ldr	r3, [r7, #32]
    e556:	9301      	str	r3, [sp, #4]
    e558:	683b      	ldr	r3, [r7, #0]
    e55a:	9300      	str	r3, [sp, #0]
    e55c:	687b      	ldr	r3, [r7, #4]
    e55e:	2201      	movs	r2, #1
    e560:	4911      	ldr	r1, [pc, #68]	; (e5a8 <format_uri+0x150>)
    e562:	68b8      	ldr	r0, [r7, #8]
    e564:	f010 fb93 	bl	1ec8e <append_to_coap_pkt>
    e568:	4603      	mov	r3, r0
    e56a:	74fb      	strb	r3, [r7, #19]
	if (!res) {
    e56c:	7cfb      	ldrb	r3, [r7, #19]
    e56e:	f083 0301 	eor.w	r3, r3, #1
    e572:	b2db      	uxtb	r3, r3
    e574:	2b00      	cmp	r3, #0
    e576:	d002      	beq.n	e57e <format_uri+0x126>
		return -ENOMEM;
    e578:	f06f 030b 	mvn.w	r3, #11
    e57c:	e00c      	b.n	e598 <format_uri+0x140>
	}

	if (!*remaining) {
    e57e:	687b      	ldr	r3, [r7, #4]
    e580:	881b      	ldrh	r3, [r3, #0]
    e582:	2b00      	cmp	r3, #0
    e584:	d104      	bne.n	e590 <format_uri+0x138>
		*more = true;
    e586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e588:	2201      	movs	r2, #1
    e58a:	701a      	strb	r2, [r3, #0]
		return 0;
    e58c:	2300      	movs	r3, #0
    e58e:	e003      	b.n	e598 <format_uri+0x140>
	}

	*more = false;
    e590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e592:	2200      	movs	r2, #0
    e594:	701a      	strb	r2, [r3, #0]

	return 0;
    e596:	2300      	movs	r3, #0
}
    e598:	4618      	mov	r0, r3
    e59a:	3718      	adds	r7, #24
    e59c:	46bd      	mov	sp, r7
    e59e:	bd80      	pop	{r7, pc}
    e5a0:	0002eeb4 	.word	0x0002eeb4
    e5a4:	0002e130 	.word	0x0002e130
    e5a8:	0002e134 	.word	0x0002e134

0000e5ac <format_attributes>:

static int format_attributes(const char * const *attributes,
			     struct coap_packet *response,
			     u16_t *remaining, size_t *offset,
			     size_t current, bool *more)
{
    e5ac:	b580      	push	{r7, lr}
    e5ae:	b08a      	sub	sp, #40	; 0x28
    e5b0:	af02      	add	r7, sp, #8
    e5b2:	60f8      	str	r0, [r7, #12]
    e5b4:	60b9      	str	r1, [r7, #8]
    e5b6:	607a      	str	r2, [r7, #4]
    e5b8:	603b      	str	r3, [r7, #0]
	const char * const *attr;
	bool res;

	if (!attributes) {
    e5ba:	68fb      	ldr	r3, [r7, #12]
    e5bc:	2b00      	cmp	r3, #0
    e5be:	d054      	beq.n	e66a <format_attributes+0xbe>
		goto terminator;
	}

	for (attr = attributes; *attr; ) {
    e5c0:	68fb      	ldr	r3, [r7, #12]
    e5c2:	61fb      	str	r3, [r7, #28]
    e5c4:	e04c      	b.n	e660 <format_attributes+0xb4>
		int attr_len = strlen(*attr);
    e5c6:	69fb      	ldr	r3, [r7, #28]
    e5c8:	681b      	ldr	r3, [r3, #0]
    e5ca:	4618      	mov	r0, r3
    e5cc:	f7f3 fd93 	bl	20f6 <strlen>
    e5d0:	4603      	mov	r3, r0
    e5d2:	61bb      	str	r3, [r7, #24]

		res = append_to_coap_pkt(response, *attr, attr_len,
    e5d4:	69fb      	ldr	r3, [r7, #28]
    e5d6:	6819      	ldr	r1, [r3, #0]
    e5d8:	69bb      	ldr	r3, [r7, #24]
    e5da:	b29a      	uxth	r2, r3
    e5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e5de:	9301      	str	r3, [sp, #4]
    e5e0:	683b      	ldr	r3, [r7, #0]
    e5e2:	9300      	str	r3, [sp, #0]
    e5e4:	687b      	ldr	r3, [r7, #4]
    e5e6:	68b8      	ldr	r0, [r7, #8]
    e5e8:	f010 fb51 	bl	1ec8e <append_to_coap_pkt>
    e5ec:	4603      	mov	r3, r0
    e5ee:	75fb      	strb	r3, [r7, #23]
					 remaining, offset, current);
		if (!res) {
    e5f0:	7dfb      	ldrb	r3, [r7, #23]
    e5f2:	f083 0301 	eor.w	r3, r3, #1
    e5f6:	b2db      	uxtb	r3, r3
    e5f8:	2b00      	cmp	r3, #0
    e5fa:	d002      	beq.n	e602 <format_attributes+0x56>
			return -ENOMEM;
    e5fc:	f06f 030b 	mvn.w	r3, #11
    e600:	e056      	b.n	e6b0 <format_attributes+0x104>
		}

		if (!*remaining) {
    e602:	687b      	ldr	r3, [r7, #4]
    e604:	881b      	ldrh	r3, [r3, #0]
    e606:	2b00      	cmp	r3, #0
    e608:	d104      	bne.n	e614 <format_attributes+0x68>
			*more = true;
    e60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e60c:	2201      	movs	r2, #1
    e60e:	701a      	strb	r2, [r3, #0]
			return 0;
    e610:	2300      	movs	r3, #0
    e612:	e04d      	b.n	e6b0 <format_attributes+0x104>
		}

		attr++;
    e614:	69fb      	ldr	r3, [r7, #28]
    e616:	3304      	adds	r3, #4
    e618:	61fb      	str	r3, [r7, #28]
		if (!*attr) {
    e61a:	69fb      	ldr	r3, [r7, #28]
    e61c:	681b      	ldr	r3, [r3, #0]
    e61e:	2b00      	cmp	r3, #0
    e620:	d100      	bne.n	e624 <format_attributes+0x78>
			continue;
    e622:	e01d      	b.n	e660 <format_attributes+0xb4>
		}

		res = append_to_coap_pkt(response, ";", 1,
    e624:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e626:	9301      	str	r3, [sp, #4]
    e628:	683b      	ldr	r3, [r7, #0]
    e62a:	9300      	str	r3, [sp, #0]
    e62c:	687b      	ldr	r3, [r7, #4]
    e62e:	2201      	movs	r2, #1
    e630:	4921      	ldr	r1, [pc, #132]	; (e6b8 <format_attributes+0x10c>)
    e632:	68b8      	ldr	r0, [r7, #8]
    e634:	f010 fb2b 	bl	1ec8e <append_to_coap_pkt>
    e638:	4603      	mov	r3, r0
    e63a:	75fb      	strb	r3, [r7, #23]
					 remaining, offset, current);
		if (!res) {
    e63c:	7dfb      	ldrb	r3, [r7, #23]
    e63e:	f083 0301 	eor.w	r3, r3, #1
    e642:	b2db      	uxtb	r3, r3
    e644:	2b00      	cmp	r3, #0
    e646:	d002      	beq.n	e64e <format_attributes+0xa2>
			return -ENOMEM;
    e648:	f06f 030b 	mvn.w	r3, #11
    e64c:	e030      	b.n	e6b0 <format_attributes+0x104>
		}

		if (!*remaining) {
    e64e:	687b      	ldr	r3, [r7, #4]
    e650:	881b      	ldrh	r3, [r3, #0]
    e652:	2b00      	cmp	r3, #0
    e654:	d104      	bne.n	e660 <format_attributes+0xb4>
			*more = true;
    e656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e658:	2201      	movs	r2, #1
    e65a:	701a      	strb	r2, [r3, #0]
			return 0;
    e65c:	2300      	movs	r3, #0
    e65e:	e027      	b.n	e6b0 <format_attributes+0x104>
	for (attr = attributes; *attr; ) {
    e660:	69fb      	ldr	r3, [r7, #28]
    e662:	681b      	ldr	r3, [r3, #0]
    e664:	2b00      	cmp	r3, #0
    e666:	d1ae      	bne.n	e5c6 <format_attributes+0x1a>
		}
	}

terminator:
    e668:	e000      	b.n	e66c <format_attributes+0xc0>
		goto terminator;
    e66a:	bf00      	nop
	res = append_to_coap_pkt(response, ";", 1, remaining, offset, current);
    e66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e66e:	9301      	str	r3, [sp, #4]
    e670:	683b      	ldr	r3, [r7, #0]
    e672:	9300      	str	r3, [sp, #0]
    e674:	687b      	ldr	r3, [r7, #4]
    e676:	2201      	movs	r2, #1
    e678:	490f      	ldr	r1, [pc, #60]	; (e6b8 <format_attributes+0x10c>)
    e67a:	68b8      	ldr	r0, [r7, #8]
    e67c:	f010 fb07 	bl	1ec8e <append_to_coap_pkt>
    e680:	4603      	mov	r3, r0
    e682:	75fb      	strb	r3, [r7, #23]
	if (!res) {
    e684:	7dfb      	ldrb	r3, [r7, #23]
    e686:	f083 0301 	eor.w	r3, r3, #1
    e68a:	b2db      	uxtb	r3, r3
    e68c:	2b00      	cmp	r3, #0
    e68e:	d002      	beq.n	e696 <format_attributes+0xea>
		return -ENOMEM;
    e690:	f06f 030b 	mvn.w	r3, #11
    e694:	e00c      	b.n	e6b0 <format_attributes+0x104>
	}

	if (!*remaining) {
    e696:	687b      	ldr	r3, [r7, #4]
    e698:	881b      	ldrh	r3, [r3, #0]
    e69a:	2b00      	cmp	r3, #0
    e69c:	d104      	bne.n	e6a8 <format_attributes+0xfc>
		*more = true;
    e69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e6a0:	2201      	movs	r2, #1
    e6a2:	701a      	strb	r2, [r3, #0]
		return 0;
    e6a4:	2300      	movs	r3, #0
    e6a6:	e003      	b.n	e6b0 <format_attributes+0x104>
	}

	*more = false;
    e6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e6aa:	2200      	movs	r2, #0
    e6ac:	701a      	strb	r2, [r3, #0]

	return 0;
    e6ae:	2300      	movs	r3, #0
}
    e6b0:	4618      	mov	r0, r3
    e6b2:	3720      	adds	r7, #32
    e6b4:	46bd      	mov	sp, r7
    e6b6:	bd80      	pop	{r7, pc}
    e6b8:	0002e138 	.word	0x0002e138

0000e6bc <coap_well_known_core_get>:

int coap_well_known_core_get(struct coap_resource *resource,
			      struct coap_packet *request,
			      struct coap_packet *response,
			      u8_t *data, u16_t len)
{
    e6bc:	b580      	push	{r7, lr}
    e6be:	b096      	sub	sp, #88	; 0x58
    e6c0:	af06      	add	r7, sp, #24
    e6c2:	60f8      	str	r0, [r7, #12]
    e6c4:	60b9      	str	r1, [r7, #8]
    e6c6:	607a      	str	r2, [r7, #4]
    e6c8:	603b      	str	r3, [r7, #0]
	u16_t remaining;
	u16_t id;
	u8_t tkl;
	u8_t format;
	int r;
	bool more = false;
    e6ca:	2300      	movs	r3, #0
    e6cc:	753b      	strb	r3, [r7, #20]

	if (!resource || !request || !response || !data || !len) {
    e6ce:	68fb      	ldr	r3, [r7, #12]
    e6d0:	2b00      	cmp	r3, #0
    e6d2:	d00c      	beq.n	e6ee <coap_well_known_core_get+0x32>
    e6d4:	68bb      	ldr	r3, [r7, #8]
    e6d6:	2b00      	cmp	r3, #0
    e6d8:	d009      	beq.n	e6ee <coap_well_known_core_get+0x32>
    e6da:	687b      	ldr	r3, [r7, #4]
    e6dc:	2b00      	cmp	r3, #0
    e6de:	d006      	beq.n	e6ee <coap_well_known_core_get+0x32>
    e6e0:	683b      	ldr	r3, [r7, #0]
    e6e2:	2b00      	cmp	r3, #0
    e6e4:	d003      	beq.n	e6ee <coap_well_known_core_get+0x32>
    e6e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
    e6ea:	2b00      	cmp	r3, #0
    e6ec:	d102      	bne.n	e6f4 <coap_well_known_core_get+0x38>
		return -EINVAL;
    e6ee:	f06f 0315 	mvn.w	r3, #21
    e6f2:	e0c9      	b.n	e888 <coap_well_known_core_get+0x1cc>
	}

	if (ctx.total_size == 0) {
    e6f4:	4b66      	ldr	r3, [pc, #408]	; (e890 <coap_well_known_core_get+0x1d4>)
    e6f6:	681b      	ldr	r3, [r3, #0]
    e6f8:	2b00      	cmp	r3, #0
    e6fa:	d108      	bne.n	e70e <coap_well_known_core_get+0x52>
		/* We have to iterate through resources and it's attributes,
		 * total size is unknown, so initialize it to
		 * MAX_BLOCK_WISE_TRANSFER_SIZE and update it according to
		 * offset.
		 */
		coap_block_transfer_init(&ctx, default_block_size(),
    e6fc:	f010 fac0 	bl	1ec80 <default_block_size>
    e700:	4603      	mov	r3, r0
    e702:	f44f 6200 	mov.w	r2, #2048	; 0x800
    e706:	4619      	mov	r1, r3
    e708:	4861      	ldr	r0, [pc, #388]	; (e890 <coap_well_known_core_get+0x1d4>)
    e70a:	f00f fd05 	bl	1e118 <coap_block_transfer_init>
					 MAX_BLOCK_WISE_TRANSFER_SIZE);
	}

	r = coap_update_from_block(request, &ctx);
    e70e:	4960      	ldr	r1, [pc, #384]	; (e890 <coap_well_known_core_get+0x1d4>)
    e710:	68b8      	ldr	r0, [r7, #8]
    e712:	f00f fea6 	bl	1e462 <coap_update_from_block>
    e716:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (r < 0) {
    e718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e71a:	2b00      	cmp	r3, #0
    e71c:	f2c0 8099 	blt.w	e852 <coap_well_known_core_get+0x196>
		goto end;
	}

	id = coap_header_get_id(request);
    e720:	68b8      	ldr	r0, [r7, #8]
    e722:	f00f fbd0 	bl	1dec6 <coap_header_get_id>
    e726:	4603      	mov	r3, r0
    e728:	877b      	strh	r3, [r7, #58]	; 0x3a
	tkl = coap_header_get_token(request, token);
    e72a:	f107 0318 	add.w	r3, r7, #24
    e72e:	4619      	mov	r1, r3
    e730:	68b8      	ldr	r0, [r7, #8]
    e732:	f00f fb77 	bl	1de24 <coap_header_get_token>
    e736:	4603      	mov	r3, r0
    e738:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39

	/* Per RFC 6690, Section 4.1, only one (or none) query parameter may be
	 * provided, use the first if multiple.
	 */
	r = coap_find_options(request, COAP_OPTION_URI_QUERY, &query, 1);
    e73c:	f107 0224 	add.w	r2, r7, #36	; 0x24
    e740:	2301      	movs	r3, #1
    e742:	210f      	movs	r1, #15
    e744:	68b8      	ldr	r0, [r7, #8]
    e746:	f00f faef 	bl	1dd28 <coap_find_options>
    e74a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (r < 0) {
    e74c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e74e:	2b00      	cmp	r3, #0
    e750:	f2c0 8081 	blt.w	e856 <coap_well_known_core_get+0x19a>
		goto end;
	}

	num_queries = r;
    e754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e756:	637b      	str	r3, [r7, #52]	; 0x34

	r = coap_packet_init(response, data, len, 1, COAP_TYPE_ACK,
    e758:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
    e75c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    e75e:	9304      	str	r3, [sp, #16]
    e760:	2345      	movs	r3, #69	; 0x45
    e762:	9303      	str	r3, [sp, #12]
    e764:	f107 0318 	add.w	r3, r7, #24
    e768:	9302      	str	r3, [sp, #8]
    e76a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
    e76e:	9301      	str	r3, [sp, #4]
    e770:	2302      	movs	r3, #2
    e772:	9300      	str	r3, [sp, #0]
    e774:	2301      	movs	r3, #1
    e776:	6839      	ldr	r1, [r7, #0]
    e778:	6878      	ldr	r0, [r7, #4]
    e77a:	f00e fe3a 	bl	1d3f2 <coap_packet_init>
    e77e:	63f8      	str	r0, [r7, #60]	; 0x3c
			     tkl, token, COAP_RESPONSE_CODE_CONTENT, id);
	if (r < 0) {
    e780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e782:	2b00      	cmp	r3, #0
    e784:	db69      	blt.n	e85a <coap_well_known_core_get+0x19e>
		goto end;
	}

	format = 40U; /* application/link-format */
    e786:	2328      	movs	r3, #40	; 0x28
    e788:	757b      	strb	r3, [r7, #21]

	r = coap_packet_append_option(response, COAP_OPTION_CONTENT_FORMAT,
    e78a:	f107 0215 	add.w	r2, r7, #21
    e78e:	2301      	movs	r3, #1
    e790:	210c      	movs	r1, #12
    e792:	6878      	ldr	r0, [r7, #4]
    e794:	f00e ffcc 	bl	1d730 <coap_packet_append_option>
    e798:	63f8      	str	r0, [r7, #60]	; 0x3c
				      &format, sizeof(format));
	if (r < 0) {
    e79a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e79c:	2b00      	cmp	r3, #0
    e79e:	db5e      	blt.n	e85e <coap_well_known_core_get+0x1a2>
		goto end;
	}

	r = coap_append_block2_option(response, &ctx);
    e7a0:	493b      	ldr	r1, [pc, #236]	; (e890 <coap_well_known_core_get+0x1d4>)
    e7a2:	6878      	ldr	r0, [r7, #4]
    e7a4:	f00f fd1c 	bl	1e1e0 <coap_append_block2_option>
    e7a8:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (r < 0) {
    e7aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e7ac:	2b00      	cmp	r3, #0
    e7ae:	db58      	blt.n	e862 <coap_well_known_core_get+0x1a6>
		goto end;
	}

	r = coap_packet_append_payload_marker(response);
    e7b0:	6878      	ldr	r0, [r7, #4]
    e7b2:	f00f f816 	bl	1d7e2 <coap_packet_append_payload_marker>
    e7b6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (r < 0) {
    e7b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e7ba:	2b00      	cmp	r3, #0
    e7bc:	db53      	blt.n	e866 <coap_well_known_core_get+0x1aa>
		goto end;
	}

	offset = 0;
    e7be:	2300      	movs	r3, #0
    e7c0:	623b      	str	r3, [r7, #32]
	remaining = coap_block_size_to_bytes(ctx.block_size);
    e7c2:	4b33      	ldr	r3, [pc, #204]	; (e890 <coap_well_known_core_get+0x1d4>)
    e7c4:	7a1b      	ldrb	r3, [r3, #8]
    e7c6:	4618      	mov	r0, r3
    e7c8:	f010 f955 	bl	1ea76 <coap_block_size_to_bytes>
    e7cc:	4603      	mov	r3, r0
    e7ce:	82fb      	strh	r3, [r7, #22]

	while (resource++ && resource->path) {
    e7d0:	e027      	b.n	e822 <coap_well_known_core_get+0x166>
		if (!remaining) {
    e7d2:	8afb      	ldrh	r3, [r7, #22]
    e7d4:	2b00      	cmp	r3, #0
    e7d6:	d102      	bne.n	e7de <coap_well_known_core_get+0x122>
			more = true;
    e7d8:	2301      	movs	r3, #1
    e7da:	753b      	strb	r3, [r7, #20]
			break;
    e7dc:	e02b      	b.n	e836 <coap_well_known_core_get+0x17a>
		}

		if (!match_queries_resource(resource, &query, num_queries)) {
    e7de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e7e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
    e7e4:	4619      	mov	r1, r3
    e7e6:	68f8      	ldr	r0, [r7, #12]
    e7e8:	f7ff fddc 	bl	e3a4 <match_queries_resource>
    e7ec:	4603      	mov	r3, r0
    e7ee:	f083 0301 	eor.w	r3, r3, #1
    e7f2:	b2db      	uxtb	r3, r3
    e7f4:	2b00      	cmp	r3, #0
    e7f6:	d000      	beq.n	e7fa <coap_well_known_core_get+0x13e>
			continue;
    e7f8:	e013      	b.n	e822 <coap_well_known_core_get+0x166>
		}

		r = format_resource(resource, response, &remaining, &offset,
    e7fa:	4b25      	ldr	r3, [pc, #148]	; (e890 <coap_well_known_core_get+0x1d4>)
    e7fc:	685b      	ldr	r3, [r3, #4]
    e7fe:	f107 0020 	add.w	r0, r7, #32
    e802:	f107 0116 	add.w	r1, r7, #22
    e806:	f107 0214 	add.w	r2, r7, #20
    e80a:	9201      	str	r2, [sp, #4]
    e80c:	9300      	str	r3, [sp, #0]
    e80e:	4603      	mov	r3, r0
    e810:	460a      	mov	r2, r1
    e812:	6879      	ldr	r1, [r7, #4]
    e814:	68f8      	ldr	r0, [r7, #12]
    e816:	f010 fa91 	bl	1ed3c <format_resource>
    e81a:	63f8      	str	r0, [r7, #60]	; 0x3c
				    ctx.current, &more);
		if (r < 0) {
    e81c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e81e:	2b00      	cmp	r3, #0
    e820:	db23      	blt.n	e86a <coap_well_known_core_get+0x1ae>
	while (resource++ && resource->path) {
    e822:	68fb      	ldr	r3, [r7, #12]
    e824:	f103 0228 	add.w	r2, r3, #40	; 0x28
    e828:	60fa      	str	r2, [r7, #12]
    e82a:	2b00      	cmp	r3, #0
    e82c:	d003      	beq.n	e836 <coap_well_known_core_get+0x17a>
    e82e:	68fb      	ldr	r3, [r7, #12]
    e830:	695b      	ldr	r3, [r3, #20]
    e832:	2b00      	cmp	r3, #0
    e834:	d1cd      	bne.n	e7d2 <coap_well_known_core_get+0x116>
	}

	/* Offset is the total size now, but block2 option is already
	 * appended. So update only 'more' flag.
	 */
	if (!more) {
    e836:	7d3b      	ldrb	r3, [r7, #20]
    e838:	f083 0301 	eor.w	r3, r3, #1
    e83c:	b2db      	uxtb	r3, r3
    e83e:	2b00      	cmp	r3, #0
    e840:	d015      	beq.n	e86e <coap_well_known_core_get+0x1b2>
		ctx.total_size = offset;
    e842:	6a3b      	ldr	r3, [r7, #32]
    e844:	4a12      	ldr	r2, [pc, #72]	; (e890 <coap_well_known_core_get+0x1d4>)
    e846:	6013      	str	r3, [r2, #0]
		r = clear_more_flag(response);
    e848:	6878      	ldr	r0, [r7, #4]
    e84a:	f010 fab6 	bl	1edba <clear_more_flag>
    e84e:	63f8      	str	r0, [r7, #60]	; 0x3c
    e850:	e00e      	b.n	e870 <coap_well_known_core_get+0x1b4>
		goto end;
    e852:	bf00      	nop
    e854:	e00c      	b.n	e870 <coap_well_known_core_get+0x1b4>
		goto end;
    e856:	bf00      	nop
    e858:	e00a      	b.n	e870 <coap_well_known_core_get+0x1b4>
		goto end;
    e85a:	bf00      	nop
    e85c:	e008      	b.n	e870 <coap_well_known_core_get+0x1b4>
		goto end;
    e85e:	bf00      	nop
    e860:	e006      	b.n	e870 <coap_well_known_core_get+0x1b4>
		goto end;
    e862:	bf00      	nop
    e864:	e004      	b.n	e870 <coap_well_known_core_get+0x1b4>
		goto end;
    e866:	bf00      	nop
    e868:	e002      	b.n	e870 <coap_well_known_core_get+0x1b4>
			goto end;
    e86a:	bf00      	nop
    e86c:	e000      	b.n	e870 <coap_well_known_core_get+0x1b4>
	}

end:
    e86e:	bf00      	nop
	/* So it's a last block, reset context */
	if (!more) {
    e870:	7d3b      	ldrb	r3, [r7, #20]
    e872:	f083 0301 	eor.w	r3, r3, #1
    e876:	b2db      	uxtb	r3, r3
    e878:	2b00      	cmp	r3, #0
    e87a:	d004      	beq.n	e886 <coap_well_known_core_get+0x1ca>
		(void)memset(&ctx, 0, sizeof(ctx));
    e87c:	220c      	movs	r2, #12
    e87e:	2100      	movs	r1, #0
    e880:	4803      	ldr	r0, [pc, #12]	; (e890 <coap_well_known_core_get+0x1d4>)
    e882:	f7f3 fc19 	bl	20b8 <memset>
	}

	return r;
    e886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    e888:	4618      	mov	r0, r3
    e88a:	3740      	adds	r7, #64	; 0x40
    e88c:	46bd      	mov	sp, r7
    e88e:	bd80      	pop	{r7, pc}
    e890:	200029bc 	.word	0x200029bc

0000e894 <zsock_socket_internal>:
	/* Some threads might be waiting on recv, cancel the wait */
	k_fifo_cancel_wait(&ctx->recv_q);
}

int zsock_socket_internal(int family, int type, int proto)
{
    e894:	b580      	push	{r7, lr}
    e896:	b08e      	sub	sp, #56	; 0x38
    e898:	af00      	add	r7, sp, #0
    e89a:	60f8      	str	r0, [r7, #12]
    e89c:	60b9      	str	r1, [r7, #8]
    e89e:	607a      	str	r2, [r7, #4]
	int fd = z_reserve_fd();
    e8a0:	f7fc fade 	bl	ae60 <z_reserve_fd>
    e8a4:	6378      	str	r0, [r7, #52]	; 0x34
	struct net_context *ctx;
	int res;

	if (fd < 0) {
    e8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e8a8:	2b00      	cmp	r3, #0
    e8aa:	da02      	bge.n	e8b2 <zsock_socket_internal+0x1e>
		return -1;
    e8ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e8b0:	e04b      	b.n	e94a <zsock_socket_internal+0xb6>
	}

	if (proto == 0) {
    e8b2:	687b      	ldr	r3, [r7, #4]
    e8b4:	2b00      	cmp	r3, #0
    e8b6:	d110      	bne.n	e8da <zsock_socket_internal+0x46>
		if (family == AF_INET || family == AF_INET6) {
    e8b8:	68fb      	ldr	r3, [r7, #12]
    e8ba:	2b01      	cmp	r3, #1
    e8bc:	d002      	beq.n	e8c4 <zsock_socket_internal+0x30>
    e8be:	68fb      	ldr	r3, [r7, #12]
    e8c0:	2b02      	cmp	r3, #2
    e8c2:	d10a      	bne.n	e8da <zsock_socket_internal+0x46>
			if (type == SOCK_DGRAM) {
    e8c4:	68bb      	ldr	r3, [r7, #8]
    e8c6:	2b02      	cmp	r3, #2
    e8c8:	d102      	bne.n	e8d0 <zsock_socket_internal+0x3c>
				proto = IPPROTO_UDP;
    e8ca:	2311      	movs	r3, #17
    e8cc:	607b      	str	r3, [r7, #4]
    e8ce:	e004      	b.n	e8da <zsock_socket_internal+0x46>
			} else if (type == SOCK_STREAM) {
    e8d0:	68bb      	ldr	r3, [r7, #8]
    e8d2:	2b01      	cmp	r3, #1
    e8d4:	d101      	bne.n	e8da <zsock_socket_internal+0x46>
				proto = IPPROTO_TCP;
    e8d6:	2306      	movs	r3, #6
    e8d8:	607b      	str	r3, [r7, #4]
			}
		}
	}

	res = net_context_get(family, type, proto, &ctx);
    e8da:	68fb      	ldr	r3, [r7, #12]
    e8dc:	b298      	uxth	r0, r3
    e8de:	68bb      	ldr	r3, [r7, #8]
    e8e0:	b2d9      	uxtb	r1, r3
    e8e2:	687b      	ldr	r3, [r7, #4]
    e8e4:	b29a      	uxth	r2, r3
    e8e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
    e8ea:	f004 fa27 	bl	12d3c <net_context_get>
    e8ee:	6338      	str	r0, [r7, #48]	; 0x30
	if (res < 0) {
    e8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e8f2:	2b00      	cmp	r3, #0
    e8f4:	da0b      	bge.n	e90e <zsock_socket_internal+0x7a>
		z_free_fd(fd);
    e8f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
    e8f8:	f7fc faea 	bl	aed0 <z_free_fd>
		errno = -res;
    e8fc:	f012 fffa 	bl	218f4 <__errno>
    e900:	4602      	mov	r2, r0
    e902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e904:	425b      	negs	r3, r3
    e906:	6013      	str	r3, [r2, #0]
		return -1;
    e908:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e90c:	e01d      	b.n	e94a <zsock_socket_internal+0xb6>
	}

	/* Initialize user_data, all other calls will preserve it */
	ctx->user_data = NULL;
    e90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e910:	2200      	movs	r2, #0
    e912:	601a      	str	r2, [r3, #0]

	/* The socket flags are stored here */
	ctx->socket_data = NULL;
    e914:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e916:	2200      	movs	r2, #0
    e918:	655a      	str	r2, [r3, #84]	; 0x54

	/* recv_q and accept_q are in union */
	k_fifo_init(&ctx->recv_q);
    e91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e91c:	3358      	adds	r3, #88	; 0x58
    e91e:	4618      	mov	r0, r3
    e920:	f010 fad0 	bl	1eec4 <k_queue_init>
	 * connection, but it must not dispose of the context behind
	 * the application back. Likewise, when application "closes"
	 * context, it's not disposed of immediately - there's yet
	 * closing handshake for stack to perform.
	 */
	if (proto == IPPROTO_TCP) {
    e924:	687b      	ldr	r3, [r7, #4]
    e926:	2b06      	cmp	r3, #6
    e928:	d103      	bne.n	e932 <zsock_socket_internal+0x9e>
		net_context_ref(ctx);
    e92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e92c:	4618      	mov	r0, r3
    e92e:	f015 f8b7 	bl	23aa0 <net_context_ref>
	}

	z_finalize_fd(fd, ctx, (const struct fd_op_vtable *)&sock_fd_op_vtable);
    e932:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e934:	4a07      	ldr	r2, [pc, #28]	; (e954 <zsock_socket_internal+0xc0>)
    e936:	4619      	mov	r1, r3
    e938:	6b78      	ldr	r0, [r7, #52]	; 0x34
    e93a:	f7fc fab1 	bl	aea0 <z_finalize_fd>

	NET_DBG("socket: ctx=%p, fd=%d", ctx, fd);
    e93e:	f010 fa96 	bl	1ee6e <_is_user_context>
    e942:	4603      	mov	r3, r0
    e944:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	return fd;
    e948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    e94a:	4618      	mov	r0, r3
    e94c:	3738      	adds	r7, #56	; 0x38
    e94e:	46bd      	mov	sp, r7
    e950:	bd80      	pop	{r7, pc}
    e952:	bf00      	nop
    e954:	0002eeb8 	.word	0x0002eeb8

0000e958 <zsock_accepted_cb>:
}
#endif /* CONFIG_USERSPACE */

static void zsock_accepted_cb(struct net_context *new_ctx,
			      struct sockaddr *addr, socklen_t addrlen,
			      int status, void *user_data) {
    e958:	b580      	push	{r7, lr}
    e95a:	b090      	sub	sp, #64	; 0x40
    e95c:	af00      	add	r7, sp, #0
    e95e:	60f8      	str	r0, [r7, #12]
    e960:	60b9      	str	r1, [r7, #8]
    e962:	607a      	str	r2, [r7, #4]
    e964:	603b      	str	r3, [r7, #0]
	struct net_context *parent = user_data;
    e966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    e968:	63fb      	str	r3, [r7, #60]	; 0x3c

	NET_DBG("parent=%p, ctx=%p, st=%d", parent, new_ctx, status);
    e96a:	f010 fa80 	bl	1ee6e <_is_user_context>
    e96e:	4603      	mov	r3, r0
    e970:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	if (status == 0) {
    e974:	683b      	ldr	r3, [r7, #0]
    e976:	2b00      	cmp	r3, #0
    e978:	d110      	bne.n	e99c <zsock_accepted_cb+0x44>
		/* This just installs a callback, so cannot fail. */
		(void)net_context_recv(new_ctx, zsock_received_cb, K_NO_WAIT,
    e97a:	2300      	movs	r3, #0
    e97c:	2200      	movs	r2, #0
    e97e:	4909      	ldr	r1, [pc, #36]	; (e9a4 <zsock_accepted_cb+0x4c>)
    e980:	68f8      	ldr	r0, [r7, #12]
    e982:	f015 fd79 	bl	24478 <net_context_recv>
				       NULL);
		k_fifo_init(&new_ctx->recv_q);
    e986:	68fb      	ldr	r3, [r7, #12]
    e988:	3358      	adds	r3, #88	; 0x58
    e98a:	4618      	mov	r0, r3
    e98c:	f010 fa9a 	bl	1eec4 <k_queue_init>

		k_fifo_put(&parent->accept_q, new_ctx);
    e990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e992:	3358      	adds	r3, #88	; 0x58
    e994:	68f9      	ldr	r1, [r7, #12]
    e996:	4618      	mov	r0, r3
    e998:	f01b fee9 	bl	2a76e <k_queue_append>
	}
}
    e99c:	bf00      	nop
    e99e:	3740      	adds	r7, #64	; 0x40
    e9a0:	46bd      	mov	sp, r7
    e9a2:	bd80      	pop	{r7, pc}
    e9a4:	0001f293 	.word	0x0001f293

0000e9a8 <zsock_bind_ctx>:
	k_fifo_put(&ctx->recv_q, pkt);
}

int zsock_bind_ctx(struct net_context *ctx, const struct sockaddr *addr,
		   socklen_t addrlen)
{
    e9a8:	b580      	push	{r7, lr}
    e9aa:	b086      	sub	sp, #24
    e9ac:	af00      	add	r7, sp, #0
    e9ae:	60f8      	str	r0, [r7, #12]
    e9b0:	60b9      	str	r1, [r7, #8]
    e9b2:	607a      	str	r2, [r7, #4]
	SET_ERRNO(net_context_bind(ctx, addr, addrlen));
    e9b4:	687a      	ldr	r2, [r7, #4]
    e9b6:	68b9      	ldr	r1, [r7, #8]
    e9b8:	68f8      	ldr	r0, [r7, #12]
    e9ba:	f015 f8f4 	bl	23ba6 <net_context_bind>
    e9be:	6178      	str	r0, [r7, #20]
    e9c0:	697b      	ldr	r3, [r7, #20]
    e9c2:	2b00      	cmp	r3, #0
    e9c4:	da08      	bge.n	e9d8 <zsock_bind_ctx+0x30>
    e9c6:	f012 ff95 	bl	218f4 <__errno>
    e9ca:	4602      	mov	r2, r0
    e9cc:	697b      	ldr	r3, [r7, #20]
    e9ce:	425b      	negs	r3, r3
    e9d0:	6013      	str	r3, [r2, #0]
    e9d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e9d6:	e01a      	b.n	ea0e <zsock_bind_ctx+0x66>
	/* For DGRAM socket, we expect to receive packets after call to
	 * bind(), but for STREAM socket, next expected operation is
	 * listen(), which doesn't work if recv callback is set.
	 */
	if (net_context_get_type(ctx) == SOCK_DGRAM) {
    e9d8:	68f8      	ldr	r0, [r7, #12]
    e9da:	f010 fb12 	bl	1f002 <net_context_get_type>
    e9de:	4603      	mov	r3, r0
    e9e0:	2b02      	cmp	r3, #2
    e9e2:	d113      	bne.n	ea0c <zsock_bind_ctx+0x64>
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
    e9e4:	68fb      	ldr	r3, [r7, #12]
    e9e6:	681b      	ldr	r3, [r3, #0]
    e9e8:	2200      	movs	r2, #0
    e9ea:	490b      	ldr	r1, [pc, #44]	; (ea18 <zsock_bind_ctx+0x70>)
    e9ec:	68f8      	ldr	r0, [r7, #12]
    e9ee:	f015 fd43 	bl	24478 <net_context_recv>
    e9f2:	6138      	str	r0, [r7, #16]
    e9f4:	693b      	ldr	r3, [r7, #16]
    e9f6:	2b00      	cmp	r3, #0
    e9f8:	da08      	bge.n	ea0c <zsock_bind_ctx+0x64>
    e9fa:	f012 ff7b 	bl	218f4 <__errno>
    e9fe:	4602      	mov	r2, r0
    ea00:	693b      	ldr	r3, [r7, #16]
    ea02:	425b      	negs	r3, r3
    ea04:	6013      	str	r3, [r2, #0]
    ea06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ea0a:	e000      	b.n	ea0e <zsock_bind_ctx+0x66>
					   ctx->user_data));
	}

	return 0;
    ea0c:	2300      	movs	r3, #0
}
    ea0e:	4618      	mov	r0, r3
    ea10:	3718      	adds	r7, #24
    ea12:	46bd      	mov	sp, r7
    ea14:	bd80      	pop	{r7, pc}
    ea16:	bf00      	nop
    ea18:	0001f293 	.word	0x0001f293

0000ea1c <zsock_connect_ctx>:
}
#endif /* CONFIG_USERSPACE */

int zsock_connect_ctx(struct net_context *ctx, const struct sockaddr *addr,
		      socklen_t addrlen)
{
    ea1c:	b580      	push	{r7, lr}
    ea1e:	b088      	sub	sp, #32
    ea20:	af02      	add	r7, sp, #8
    ea22:	60f8      	str	r0, [r7, #12]
    ea24:	60b9      	str	r1, [r7, #8]
    ea26:	607a      	str	r2, [r7, #4]
	SET_ERRNO(net_context_connect(ctx, addr, addrlen, NULL,
    ea28:	2300      	movs	r3, #0
    ea2a:	9301      	str	r3, [sp, #4]
    ea2c:	f640 33b8 	movw	r3, #3000	; 0xbb8
    ea30:	9300      	str	r3, [sp, #0]
    ea32:	2300      	movs	r3, #0
    ea34:	687a      	ldr	r2, [r7, #4]
    ea36:	68b9      	ldr	r1, [r7, #8]
    ea38:	68f8      	ldr	r0, [r7, #12]
    ea3a:	f015 fa02 	bl	23e42 <net_context_connect>
    ea3e:	6178      	str	r0, [r7, #20]
    ea40:	697b      	ldr	r3, [r7, #20]
    ea42:	2b00      	cmp	r3, #0
    ea44:	da08      	bge.n	ea58 <zsock_connect_ctx+0x3c>
    ea46:	f012 ff55 	bl	218f4 <__errno>
    ea4a:	4602      	mov	r2, r0
    ea4c:	697b      	ldr	r3, [r7, #20]
    ea4e:	425b      	negs	r3, r3
    ea50:	6013      	str	r3, [r2, #0]
    ea52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ea56:	e014      	b.n	ea82 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x22>
			      K_MSEC(CONFIG_NET_SOCKETS_CONNECT_TIMEOUT),
			      NULL));
	SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
    ea58:	68fb      	ldr	r3, [r7, #12]
    ea5a:	681b      	ldr	r3, [r3, #0]
    ea5c:	2200      	movs	r2, #0
    ea5e:	490b      	ldr	r1, [pc, #44]	; (ea8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2c>)
    ea60:	68f8      	ldr	r0, [r7, #12]
    ea62:	f015 fd09 	bl	24478 <net_context_recv>
    ea66:	6138      	str	r0, [r7, #16]
    ea68:	693b      	ldr	r3, [r7, #16]
    ea6a:	2b00      	cmp	r3, #0
    ea6c:	da08      	bge.n	ea80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x20>
    ea6e:	f012 ff41 	bl	218f4 <__errno>
    ea72:	4602      	mov	r2, r0
    ea74:	693b      	ldr	r3, [r7, #16]
    ea76:	425b      	negs	r3, r3
    ea78:	6013      	str	r3, [r2, #0]
    ea7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ea7e:	e000      	b.n	ea82 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x22>
				   ctx->user_data));

	return 0;
    ea80:	2300      	movs	r3, #0
}
    ea82:	4618      	mov	r0, r3
    ea84:	3718      	adds	r7, #24
    ea86:	46bd      	mov	sp, r7
    ea88:	bd80      	pop	{r7, pc}
    ea8a:	bf00      	nop
    ea8c:	0001f293 	.word	0x0001f293

0000ea90 <zsock_listen_ctx>:
				   addrlen);
}
#endif /* CONFIG_USERSPACE */

int zsock_listen_ctx(struct net_context *ctx, int backlog)
{
    ea90:	b580      	push	{r7, lr}
    ea92:	b084      	sub	sp, #16
    ea94:	af00      	add	r7, sp, #0
    ea96:	6078      	str	r0, [r7, #4]
    ea98:	6039      	str	r1, [r7, #0]
	SET_ERRNO(net_context_listen(ctx, backlog));
    ea9a:	6839      	ldr	r1, [r7, #0]
    ea9c:	6878      	ldr	r0, [r7, #4]
    ea9e:	f015 f95e 	bl	23d5e <net_context_listen>
    eaa2:	60f8      	str	r0, [r7, #12]
    eaa4:	68fb      	ldr	r3, [r7, #12]
    eaa6:	2b00      	cmp	r3, #0
    eaa8:	da08      	bge.n	eabc <zsock_listen_ctx+0x2c>
    eaaa:	f012 ff23 	bl	218f4 <__errno>
    eaae:	4602      	mov	r2, r0
    eab0:	68fb      	ldr	r3, [r7, #12]
    eab2:	425b      	negs	r3, r3
    eab4:	6013      	str	r3, [r2, #0]
    eab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    eaba:	e013      	b.n	eae4 <zsock_listen_ctx+0x54>
	SET_ERRNO(net_context_accept(ctx, zsock_accepted_cb, K_NO_WAIT, ctx));
    eabc:	687b      	ldr	r3, [r7, #4]
    eabe:	2200      	movs	r2, #0
    eac0:	490a      	ldr	r1, [pc, #40]	; (eaec <zsock_listen_ctx+0x5c>)
    eac2:	6878      	ldr	r0, [r7, #4]
    eac4:	f015 fab3 	bl	2402e <net_context_accept>
    eac8:	60b8      	str	r0, [r7, #8]
    eaca:	68bb      	ldr	r3, [r7, #8]
    eacc:	2b00      	cmp	r3, #0
    eace:	da08      	bge.n	eae2 <zsock_listen_ctx+0x52>
    ead0:	f012 ff10 	bl	218f4 <__errno>
    ead4:	4602      	mov	r2, r0
    ead6:	68bb      	ldr	r3, [r7, #8]
    ead8:	425b      	negs	r3, r3
    eada:	6013      	str	r3, [r2, #0]
    eadc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    eae0:	e000      	b.n	eae4 <zsock_listen_ctx+0x54>

	return 0;
    eae2:	2300      	movs	r3, #0
}
    eae4:	4618      	mov	r0, r3
    eae6:	3710      	adds	r7, #16
    eae8:	46bd      	mov	sp, r7
    eaea:	bd80      	pop	{r7, pc}
    eaec:	0000e959 	.word	0x0000e959

0000eaf0 <zsock_accept_ctx>:
}
#endif /* CONFIG_USERSPACE */

int zsock_accept_ctx(struct net_context *parent, struct sockaddr *addr,
		     socklen_t *addrlen)
{
    eaf0:	b580      	push	{r7, lr}
    eaf2:	b08c      	sub	sp, #48	; 0x30
    eaf4:	af00      	add	r7, sp, #0
    eaf6:	60f8      	str	r0, [r7, #12]
    eaf8:	60b9      	str	r1, [r7, #8]
    eafa:	607a      	str	r2, [r7, #4]
	int fd;

	fd = z_reserve_fd();
    eafc:	f7fc f9b0 	bl	ae60 <z_reserve_fd>
    eb00:	6278      	str	r0, [r7, #36]	; 0x24
	if (fd < 0) {
    eb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    eb04:	2b00      	cmp	r3, #0
    eb06:	da02      	bge.n	eb0e <zsock_accept_ctx+0x1e>
		return -1;
    eb08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    eb0c:	e04a      	b.n	eba4 <zsock_accept_ctx+0xb4>
	}

	if (net_context_get_ip_proto(parent) == IPPROTO_TCP) {
    eb0e:	68f8      	ldr	r0, [r7, #12]
    eb10:	f010 fa87 	bl	1f022 <net_context_get_ip_proto>
    eb14:	4603      	mov	r3, r0
    eb16:	2b06      	cmp	r3, #6
    eb18:	d103      	bne.n	eb22 <zsock_accept_ctx+0x32>
		net_context_set_state(parent, NET_CONTEXT_LISTENING);
    eb1a:	2103      	movs	r1, #3
    eb1c:	68f8      	ldr	r0, [r7, #12]
    eb1e:	f010 fa4c 	bl	1efba <net_context_set_state>
	}

	struct net_context *ctx = k_fifo_get(&parent->accept_q, K_FOREVER);
    eb22:	68fb      	ldr	r3, [r7, #12]
    eb24:	3358      	adds	r3, #88	; 0x58
    eb26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    eb2a:	4618      	mov	r0, r3
    eb2c:	f010 f9e0 	bl	1eef0 <k_queue_get>
    eb30:	62f8      	str	r0, [r7, #44]	; 0x2c

#ifdef CONFIG_USERSPACE
	z_object_recycle(ctx);
#endif

	if (addr != NULL && addrlen != NULL) {
    eb32:	68bb      	ldr	r3, [r7, #8]
    eb34:	2b00      	cmp	r3, #0
    eb36:	d027      	beq.n	eb88 <zsock_accept_ctx+0x98>
    eb38:	687b      	ldr	r3, [r7, #4]
    eb3a:	2b00      	cmp	r3, #0
    eb3c:	d024      	beq.n	eb88 <zsock_accept_ctx+0x98>
		int len = MIN(*addrlen, sizeof(ctx->remote));
    eb3e:	687b      	ldr	r3, [r7, #4]
    eb40:	681b      	ldr	r3, [r3, #0]
    eb42:	2b08      	cmp	r3, #8
    eb44:	bf28      	it	cs
    eb46:	2308      	movcs	r3, #8
    eb48:	62bb      	str	r3, [r7, #40]	; 0x28

		memcpy(addr, &ctx->remote, len);
    eb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eb4c:	3324      	adds	r3, #36	; 0x24
    eb4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    eb50:	4619      	mov	r1, r3
    eb52:	68b8      	ldr	r0, [r7, #8]
    eb54:	f7f3 fa88 	bl	2068 <memcpy>
		/* addrlen is a value-result argument, set to actual
		 * size of source address
		 */
		if (ctx->remote.sa_family == AF_INET) {
    eb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eb5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    eb5c:	2b01      	cmp	r3, #1
    eb5e:	d103      	bne.n	eb68 <zsock_accept_ctx+0x78>
			*addrlen = sizeof(struct sockaddr_in);
    eb60:	687b      	ldr	r3, [r7, #4]
    eb62:	2208      	movs	r2, #8
    eb64:	601a      	str	r2, [r3, #0]
    eb66:	e00f      	b.n	eb88 <zsock_accept_ctx+0x98>
		} else if (ctx->remote.sa_family == AF_INET6) {
    eb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eb6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    eb6c:	2b02      	cmp	r3, #2
    eb6e:	d103      	bne.n	eb78 <zsock_accept_ctx+0x88>
			*addrlen = sizeof(struct sockaddr_in6);
    eb70:	687b      	ldr	r3, [r7, #4]
    eb72:	2218      	movs	r2, #24
    eb74:	601a      	str	r2, [r3, #0]
    eb76:	e007      	b.n	eb88 <zsock_accept_ctx+0x98>
		} else {
			errno = ENOTSUP;
    eb78:	f012 febc 	bl	218f4 <__errno>
    eb7c:	4602      	mov	r2, r0
    eb7e:	2386      	movs	r3, #134	; 0x86
    eb80:	6013      	str	r3, [r2, #0]
			return -1;
    eb82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    eb86:	e00d      	b.n	eba4 <zsock_accept_ctx+0xb4>
	 * connection, but it must not dispose of the context behind
	 * the application back. Likewise, when application "closes"
	 * context, it's not disposed of immediately - there's yet
	 * closing handshake for stack to perform.
	 */
	net_context_ref(ctx);
    eb88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    eb8a:	f014 ff89 	bl	23aa0 <net_context_ref>

	NET_DBG("accept: ctx=%p, fd=%d", ctx, fd);
    eb8e:	f010 f96e 	bl	1ee6e <_is_user_context>
    eb92:	4603      	mov	r3, r0
    eb94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	z_finalize_fd(fd, ctx, (const struct fd_op_vtable *)&sock_fd_op_vtable);
    eb98:	4a04      	ldr	r2, [pc, #16]	; (ebac <zsock_accept_ctx+0xbc>)
    eb9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    eb9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    eb9e:	f7fc f97f 	bl	aea0 <z_finalize_fd>

	return fd;
    eba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    eba4:	4618      	mov	r0, r3
    eba6:	3730      	adds	r7, #48	; 0x30
    eba8:	46bd      	mov	sp, r7
    ebaa:	bd80      	pop	{r7, pc}
    ebac:	0002eeb8 	.word	0x0002eeb8

0000ebb0 <zsock_sendto_ctx>:
#endif /* CONFIG_USERSPACE */

ssize_t zsock_sendto_ctx(struct net_context *ctx, const void *buf, size_t len,
			 int flags,
			 const struct sockaddr *dest_addr, socklen_t addrlen)
{
    ebb0:	b580      	push	{r7, lr}
    ebb2:	b08a      	sub	sp, #40	; 0x28
    ebb4:	af04      	add	r7, sp, #16
    ebb6:	60f8      	str	r0, [r7, #12]
    ebb8:	60b9      	str	r1, [r7, #8]
    ebba:	607a      	str	r2, [r7, #4]
    ebbc:	603b      	str	r3, [r7, #0]
	s32_t timeout = K_FOREVER;
    ebbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ebc2:	617b      	str	r3, [r7, #20]
	int status;

	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
    ebc4:	683b      	ldr	r3, [r7, #0]
    ebc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ebca:	2b00      	cmp	r3, #0
    ebcc:	d106      	bne.n	ebdc <zsock_sendto_ctx+0x2c>
    ebce:	2102      	movs	r1, #2
    ebd0:	68f8      	ldr	r0, [r7, #12]
    ebd2:	f010 faaf 	bl	1f134 <sock_get_flag>
    ebd6:	4603      	mov	r3, r0
    ebd8:	2b00      	cmp	r3, #0
    ebda:	d001      	beq.n	ebe0 <zsock_sendto_ctx+0x30>
		timeout = K_NO_WAIT;
    ebdc:	2300      	movs	r3, #0
    ebde:	617b      	str	r3, [r7, #20]
	}

	/* Register the callback before sending in order to receive the response
	 * from the peer.
	 */
	status = net_context_recv(ctx, zsock_received_cb,
    ebe0:	68fb      	ldr	r3, [r7, #12]
    ebe2:	681b      	ldr	r3, [r3, #0]
    ebe4:	2200      	movs	r2, #0
    ebe6:	4921      	ldr	r1, [pc, #132]	; (ec6c <zsock_sendto_ctx+0xbc>)
    ebe8:	68f8      	ldr	r0, [r7, #12]
    ebea:	f015 fc45 	bl	24478 <net_context_recv>
    ebee:	6138      	str	r0, [r7, #16]
				  K_NO_WAIT, ctx->user_data);
	if (status < 0) {
    ebf0:	693b      	ldr	r3, [r7, #16]
    ebf2:	2b00      	cmp	r3, #0
    ebf4:	da08      	bge.n	ec08 <zsock_sendto_ctx+0x58>
		errno = -status;
    ebf6:	f012 fe7d 	bl	218f4 <__errno>
    ebfa:	4602      	mov	r2, r0
    ebfc:	693b      	ldr	r3, [r7, #16]
    ebfe:	425b      	negs	r3, r3
    ec00:	6013      	str	r3, [r2, #0]
		return -1;
    ec02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ec06:	e02c      	b.n	ec62 <zsock_sendto_ctx+0xb2>
	}

	if (dest_addr) {
    ec08:	6a3b      	ldr	r3, [r7, #32]
    ec0a:	2b00      	cmp	r3, #0
    ec0c:	d010      	beq.n	ec30 <zsock_sendto_ctx+0x80>
		status = net_context_sendto(ctx, buf, len, dest_addr,
    ec0e:	68fb      	ldr	r3, [r7, #12]
    ec10:	681b      	ldr	r3, [r3, #0]
    ec12:	9303      	str	r3, [sp, #12]
    ec14:	697b      	ldr	r3, [r7, #20]
    ec16:	9302      	str	r3, [sp, #8]
    ec18:	2300      	movs	r3, #0
    ec1a:	9301      	str	r3, [sp, #4]
    ec1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ec1e:	9300      	str	r3, [sp, #0]
    ec20:	6a3b      	ldr	r3, [r7, #32]
    ec22:	687a      	ldr	r2, [r7, #4]
    ec24:	68b9      	ldr	r1, [r7, #8]
    ec26:	68f8      	ldr	r0, [r7, #12]
    ec28:	f015 fbb8 	bl	2439c <net_context_sendto>
    ec2c:	6138      	str	r0, [r7, #16]
    ec2e:	e00b      	b.n	ec48 <zsock_sendto_ctx+0x98>
					    addrlen, NULL, timeout,
					    ctx->user_data);
	} else {
		status = net_context_send(ctx, buf, len, NULL, timeout,
    ec30:	68fb      	ldr	r3, [r7, #12]
    ec32:	681b      	ldr	r3, [r3, #0]
    ec34:	9301      	str	r3, [sp, #4]
    ec36:	697b      	ldr	r3, [r7, #20]
    ec38:	9300      	str	r3, [sp, #0]
    ec3a:	2300      	movs	r3, #0
    ec3c:	687a      	ldr	r2, [r7, #4]
    ec3e:	68b9      	ldr	r1, [r7, #8]
    ec40:	68f8      	ldr	r0, [r7, #12]
    ec42:	f015 fb5e 	bl	24302 <net_context_send>
    ec46:	6138      	str	r0, [r7, #16]
					  ctx->user_data);
	}

	if (status < 0) {
    ec48:	693b      	ldr	r3, [r7, #16]
    ec4a:	2b00      	cmp	r3, #0
    ec4c:	da08      	bge.n	ec60 <zsock_sendto_ctx+0xb0>
		errno = -status;
    ec4e:	f012 fe51 	bl	218f4 <__errno>
    ec52:	4602      	mov	r2, r0
    ec54:	693b      	ldr	r3, [r7, #16]
    ec56:	425b      	negs	r3, r3
    ec58:	6013      	str	r3, [r2, #0]
		return -1;
    ec5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ec5e:	e000      	b.n	ec62 <zsock_sendto_ctx+0xb2>
	}

	return status;
    ec60:	693b      	ldr	r3, [r7, #16]
}
    ec62:	4618      	mov	r0, r3
    ec64:	3718      	adds	r7, #24
    ec66:	46bd      	mov	sp, r7
    ec68:	bd80      	pop	{r7, pc}
    ec6a:	bf00      	nop
    ec6c:	0001f293 	.word	0x0001f293

0000ec70 <k_work_submit>:
 *
 * @return N/A
 * @req K-WORK-001
 */
static inline void k_work_submit(struct k_work *work)
{
    ec70:	b580      	push	{r7, lr}
    ec72:	b082      	sub	sp, #8
    ec74:	af00      	add	r7, sp, #0
    ec76:	6078      	str	r0, [r7, #4]
	k_work_submit_to_queue(&k_sys_work_q, work);
    ec78:	6879      	ldr	r1, [r7, #4]
    ec7a:	4803      	ldr	r0, [pc, #12]	; (ec88 <k_work_submit+0x18>)
    ec7c:	f011 f863 	bl	1fd46 <k_work_submit_to_queue>
}
    ec80:	bf00      	nop
    ec82:	3708      	adds	r7, #8
    ec84:	46bd      	mov	sp, r7
    ec86:	bd80      	pop	{r7, pc}
    ec88:	200061b4 	.word	0x200061b4

0000ec8c <usb_handle_request>:
 *
 * @return true if the request was handles successfully
 */
static bool usb_handle_request(struct usb_setup_packet *setup,
			       s32_t *len, u8_t **data)
{
    ec8c:	b580      	push	{r7, lr}
    ec8e:	b08c      	sub	sp, #48	; 0x30
    ec90:	af00      	add	r7, sp, #0
    ec92:	60f8      	str	r0, [r7, #12]
    ec94:	60b9      	str	r1, [r7, #8]
    ec96:	607a      	str	r2, [r7, #4]
	u32_t type = REQTYPE_GET_TYPE(setup->bmRequestType);
    ec98:	68fb      	ldr	r3, [r7, #12]
    ec9a:	781b      	ldrb	r3, [r3, #0]
    ec9c:	095b      	lsrs	r3, r3, #5
    ec9e:	b2db      	uxtb	r3, r3
    eca0:	f003 0303 	and.w	r3, r3, #3
    eca4:	62bb      	str	r3, [r7, #40]	; 0x28
	usb_request_handler handler = usb_dev.req_handlers[type];
    eca6:	4a1b      	ldr	r2, [pc, #108]	; (ed14 <usb_handle_request+0x88>)
    eca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ecaa:	3308      	adds	r3, #8
    ecac:	009b      	lsls	r3, r3, #2
    ecae:	4413      	add	r3, r2
    ecb0:	685b      	ldr	r3, [r3, #4]
    ecb2:	627b      	str	r3, [r7, #36]	; 0x24

	LOG_DBG("** %d **", type);
    ecb4:	f011 f82d 	bl	1fd12 <_is_user_context>
    ecb8:	4603      	mov	r3, r0
    ecba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (type >= MAX_NUM_REQ_HANDLERS) {
    ecbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ecc0:	2b03      	cmp	r3, #3
    ecc2:	d906      	bls.n	ecd2 <usb_handle_request+0x46>
		LOG_DBG("Error Incorrect iType %d", type);
    ecc4:	f011 f825 	bl	1fd12 <_is_user_context>
    ecc8:	4603      	mov	r3, r0
    ecca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		return false;
    ecce:	2300      	movs	r3, #0
    ecd0:	e01c      	b.n	ed0c <usb_handle_request+0x80>
	}

	if (handler == NULL) {
    ecd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ecd4:	2b00      	cmp	r3, #0
    ecd6:	d106      	bne.n	ece6 <usb_handle_request+0x5a>
		LOG_DBG("No handler for reqtype %d", type);
    ecd8:	f011 f81b 	bl	1fd12 <_is_user_context>
    ecdc:	4603      	mov	r3, r0
    ecde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		return false;
    ece2:	2300      	movs	r3, #0
    ece4:	e012      	b.n	ed0c <usb_handle_request+0x80>
	}

	if ((*handler)(setup, len, data) < 0) {
    ece6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ece8:	687a      	ldr	r2, [r7, #4]
    ecea:	68b9      	ldr	r1, [r7, #8]
    ecec:	68f8      	ldr	r0, [r7, #12]
    ecee:	4798      	blx	r3
    ecf0:	4603      	mov	r3, r0
    ecf2:	2b00      	cmp	r3, #0
    ecf4:	da09      	bge.n	ed0a <usb_handle_request+0x7e>
		LOG_DBG("Handler Error %d", type);
    ecf6:	f011 f80c 	bl	1fd12 <_is_user_context>
    ecfa:	4603      	mov	r3, r0
    ecfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		usb_print_setup(setup);
    ed00:	68f8      	ldr	r0, [r7, #12]
    ed02:	f011 f862 	bl	1fdca <usb_print_setup>
		return false;
    ed06:	2300      	movs	r3, #0
    ed08:	e000      	b.n	ed0c <usb_handle_request+0x80>
	}

	return true;
    ed0a:	2301      	movs	r3, #1
}
    ed0c:	4618      	mov	r0, r3
    ed0e:	3730      	adds	r7, #48	; 0x30
    ed10:	46bd      	mov	sp, r7
    ed12:	bd80      	pop	{r7, pc}
    ed14:	200029c8 	.word	0x200029c8

0000ed18 <usb_data_to_host>:
 * @brief send next chunk of data (possibly 0 bytes) to host
 *
 * @return N/A
 */
static void usb_data_to_host(u16_t len)
{
    ed18:	b580      	push	{r7, lr}
    ed1a:	b084      	sub	sp, #16
    ed1c:	af00      	add	r7, sp, #0
    ed1e:	4603      	mov	r3, r0
    ed20:	80fb      	strh	r3, [r7, #6]
	u32_t chunk = usb_dev.data_buf_residue;
    ed22:	4b19      	ldr	r3, [pc, #100]	; (ed88 <usb_data_to_host+0x70>)
    ed24:	68db      	ldr	r3, [r3, #12]
    ed26:	60bb      	str	r3, [r7, #8]

	/*Always EP0 for control*/
	usb_dc_ep_write(USB_CONTROL_IN_EP0, usb_dev.data_buf, chunk, &chunk);
    ed28:	4b17      	ldr	r3, [pc, #92]	; (ed88 <usb_data_to_host+0x70>)
    ed2a:	6899      	ldr	r1, [r3, #8]
    ed2c:	68ba      	ldr	r2, [r7, #8]
    ed2e:	f107 0308 	add.w	r3, r7, #8
    ed32:	2080      	movs	r0, #128	; 0x80
    ed34:	f002 fa9e 	bl	11274 <usb_dc_ep_write>
	usb_dev.data_buf += chunk;
    ed38:	4b13      	ldr	r3, [pc, #76]	; (ed88 <usb_data_to_host+0x70>)
    ed3a:	689a      	ldr	r2, [r3, #8]
    ed3c:	68bb      	ldr	r3, [r7, #8]
    ed3e:	4413      	add	r3, r2
    ed40:	4a11      	ldr	r2, [pc, #68]	; (ed88 <usb_data_to_host+0x70>)
    ed42:	6093      	str	r3, [r2, #8]
	usb_dev.data_buf_residue -= chunk;
    ed44:	4b10      	ldr	r3, [pc, #64]	; (ed88 <usb_data_to_host+0x70>)
    ed46:	68db      	ldr	r3, [r3, #12]
    ed48:	461a      	mov	r2, r3
    ed4a:	68bb      	ldr	r3, [r7, #8]
    ed4c:	1ad3      	subs	r3, r2, r3
    ed4e:	461a      	mov	r2, r3
    ed50:	4b0d      	ldr	r3, [pc, #52]	; (ed88 <usb_data_to_host+0x70>)
    ed52:	60da      	str	r2, [r3, #12]

	/*
	 * Send ZLP when host asks for a bigger length and the last chunk
	 * is wMaxPacketSize long, to indicate the last packet.
	 */
	if (!usb_dev.data_buf_residue && chunk == USB_MAX_CTRL_MPS
    ed54:	4b0c      	ldr	r3, [pc, #48]	; (ed88 <usb_data_to_host+0x70>)
    ed56:	68db      	ldr	r3, [r3, #12]
    ed58:	2b00      	cmp	r3, #0
    ed5a:	d111      	bne.n	ed80 <usb_data_to_host+0x68>
    ed5c:	68bb      	ldr	r3, [r7, #8]
    ed5e:	2b40      	cmp	r3, #64	; 0x40
    ed60:	d10e      	bne.n	ed80 <usb_data_to_host+0x68>
	    && len > chunk) {
    ed62:	88fa      	ldrh	r2, [r7, #6]
    ed64:	68bb      	ldr	r3, [r7, #8]
    ed66:	429a      	cmp	r2, r3
    ed68:	d90a      	bls.n	ed80 <usb_data_to_host+0x68>
		int ret;

		do {
			ret = usb_dc_ep_write(USB_CONTROL_IN_EP0, NULL, 0,
    ed6a:	2300      	movs	r3, #0
    ed6c:	2200      	movs	r2, #0
    ed6e:	2100      	movs	r1, #0
    ed70:	2080      	movs	r0, #128	; 0x80
    ed72:	f002 fa7f 	bl	11274 <usb_dc_ep_write>
    ed76:	60f8      	str	r0, [r7, #12]
					      NULL);
		} while (ret == -EAGAIN);
    ed78:	68fb      	ldr	r3, [r7, #12]
    ed7a:	f113 0f0b 	cmn.w	r3, #11
    ed7e:	d0f4      	beq.n	ed6a <usb_data_to_host+0x52>
	}
}
    ed80:	bf00      	nop
    ed82:	3710      	adds	r7, #16
    ed84:	46bd      	mov	sp, r7
    ed86:	bd80      	pop	{r7, pc}
    ed88:	200029c8 	.word	0x200029c8

0000ed8c <usb_handle_control_transfer>:
 *
 * @return N/A
 */
static void usb_handle_control_transfer(u8_t ep,
					enum usb_dc_ep_cb_status_code ep_status)
{
    ed8c:	b580      	push	{r7, lr}
    ed8e:	b092      	sub	sp, #72	; 0x48
    ed90:	af00      	add	r7, sp, #0
    ed92:	4603      	mov	r3, r0
    ed94:	460a      	mov	r2, r1
    ed96:	71fb      	strb	r3, [r7, #7]
    ed98:	4613      	mov	r3, r2
    ed9a:	71bb      	strb	r3, [r7, #6]
	u32_t chunk = 0U;
    ed9c:	2300      	movs	r3, #0
    ed9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	u32_t type = 0U;
    eda0:	2300      	movs	r3, #0
    eda2:	643b      	str	r3, [r7, #64]	; 0x40
	struct usb_setup_packet *setup = &usb_dev.setup;
    eda4:	4b7d      	ldr	r3, [pc, #500]	; (ef9c <usb_handle_control_transfer+0x210>)
    eda6:	637b      	str	r3, [r7, #52]	; 0x34

	LOG_DBG("ep %x, status %x", ep, ep_status);
    eda8:	f010 ffb3 	bl	1fd12 <_is_user_context>
    edac:	4603      	mov	r3, r0
    edae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if (ep == USB_CONTROL_OUT_EP0 && ep_status == USB_DC_EP_SETUP) {
    edb2:	79fb      	ldrb	r3, [r7, #7]
    edb4:	2b00      	cmp	r3, #0
    edb6:	d169      	bne.n	ee8c <usb_handle_control_transfer+0x100>
    edb8:	79bb      	ldrb	r3, [r7, #6]
    edba:	2b00      	cmp	r3, #0
    edbc:	d166      	bne.n	ee8c <usb_handle_control_transfer+0x100>

		/*
		 * OUT transfer, Setup packet,
		 * reset request message state machine
		 */
		if (usb_dc_ep_read(ep,
    edbe:	79f8      	ldrb	r0, [r7, #7]
    edc0:	2300      	movs	r3, #0
    edc2:	2208      	movs	r2, #8
    edc4:	6b79      	ldr	r1, [r7, #52]	; 0x34
    edc6:	f012 fa1a 	bl	211fe <usb_dc_ep_read>
    edca:	4603      	mov	r3, r0
    edcc:	2b00      	cmp	r3, #0
    edce:	da08      	bge.n	ede2 <usb_handle_control_transfer+0x56>
				   (u8_t *)setup, sizeof(*setup), NULL) < 0) {
			LOG_DBG("Read Setup Packet failed");
    edd0:	f010 ff9f 	bl	1fd12 <_is_user_context>
    edd4:	4603      	mov	r3, r0
    edd6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
    edda:	2080      	movs	r0, #128	; 0x80
    eddc:	f002 f9f4 	bl	111c8 <usb_dc_ep_set_stall>
			return;
    ede0:	e0d8      	b.n	ef94 <usb_handle_control_transfer+0x208>
		}

		length = sys_le16_to_cpu(setup->wLength);
    ede2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ede4:	88db      	ldrh	r3, [r3, #6]
    ede6:	877b      	strh	r3, [r7, #58]	; 0x3a

		/* Defaults for data pointer and residue */
		type = REQTYPE_GET_TYPE(setup->bmRequestType);
    ede8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    edea:	781b      	ldrb	r3, [r3, #0]
    edec:	095b      	lsrs	r3, r3, #5
    edee:	b2db      	uxtb	r3, r3
    edf0:	f003 0303 	and.w	r3, r3, #3
    edf4:	643b      	str	r3, [r7, #64]	; 0x40
		usb_dev.data_buf = usb_dev.data_store[type];
    edf6:	4a69      	ldr	r2, [pc, #420]	; (ef9c <usb_handle_control_transfer+0x210>)
    edf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    edfa:	330c      	adds	r3, #12
    edfc:	009b      	lsls	r3, r3, #2
    edfe:	4413      	add	r3, r2
    ee00:	685b      	ldr	r3, [r3, #4]
    ee02:	4a66      	ldr	r2, [pc, #408]	; (ef9c <usb_handle_control_transfer+0x210>)
    ee04:	6093      	str	r3, [r2, #8]
		if (!usb_dev.data_buf) {
    ee06:	4b65      	ldr	r3, [pc, #404]	; (ef9c <usb_handle_control_transfer+0x210>)
    ee08:	689b      	ldr	r3, [r3, #8]
    ee0a:	2b00      	cmp	r3, #0
    ee0c:	d10b      	bne.n	ee26 <usb_handle_control_transfer+0x9a>
			LOG_DBG("buffer not available");
    ee0e:	f010 ff80 	bl	1fd12 <_is_user_context>
    ee12:	4603      	mov	r3, r0
    ee14:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			usb_dc_ep_set_stall(USB_CONTROL_OUT_EP0);
    ee18:	2000      	movs	r0, #0
    ee1a:	f002 f9d5 	bl	111c8 <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
    ee1e:	2080      	movs	r0, #128	; 0x80
    ee20:	f002 f9d2 	bl	111c8 <usb_dc_ep_set_stall>
			return;
    ee24:	e0b6      	b.n	ef94 <usb_handle_control_transfer+0x208>
		}

		usb_dev.data_buf_residue = length;
    ee26:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    ee28:	4a5c      	ldr	r2, [pc, #368]	; (ef9c <usb_handle_control_transfer+0x210>)
    ee2a:	60d3      	str	r3, [r2, #12]
		usb_dev.data_buf_len = length;
    ee2c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    ee2e:	4a5b      	ldr	r2, [pc, #364]	; (ef9c <usb_handle_control_transfer+0x210>)
    ee30:	6113      	str	r3, [r2, #16]

		if (length &&
    ee32:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    ee34:	2b00      	cmp	r3, #0
    ee36:	d008      	beq.n	ee4a <usb_handle_control_transfer+0xbe>
		    REQTYPE_GET_DIR(setup->bmRequestType)
    ee38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ee3a:	781b      	ldrb	r3, [r3, #0]
    ee3c:	09db      	lsrs	r3, r3, #7
    ee3e:	b2db      	uxtb	r3, r3
    ee40:	f003 0301 	and.w	r3, r3, #1
		if (length &&
    ee44:	2b00      	cmp	r3, #0
    ee46:	f000 80a2 	beq.w	ef8e <usb_handle_control_transfer+0x202>
		    == REQTYPE_DIR_TO_DEVICE) {
			return;
		}

		/* Ask installed handler to process request */
		if (!usb_handle_request(setup,
    ee4a:	4a55      	ldr	r2, [pc, #340]	; (efa0 <usb_handle_control_transfer+0x214>)
    ee4c:	4955      	ldr	r1, [pc, #340]	; (efa4 <usb_handle_control_transfer+0x218>)
    ee4e:	6b78      	ldr	r0, [r7, #52]	; 0x34
    ee50:	f7ff ff1c 	bl	ec8c <usb_handle_request>
    ee54:	4603      	mov	r3, r0
    ee56:	f083 0301 	eor.w	r3, r3, #1
    ee5a:	b2db      	uxtb	r3, r3
    ee5c:	2b00      	cmp	r3, #0
    ee5e:	d008      	beq.n	ee72 <usb_handle_control_transfer+0xe6>
					&usb_dev.data_buf_len,
					&usb_dev.data_buf)) {
			LOG_DBG("usb_handle_request failed");
    ee60:	f010 ff57 	bl	1fd12 <_is_user_context>
    ee64:	4603      	mov	r3, r0
    ee66:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
    ee6a:	2080      	movs	r0, #128	; 0x80
    ee6c:	f002 f9ac 	bl	111c8 <usb_dc_ep_set_stall>
			return;
    ee70:	e090      	b.n	ef94 <usb_handle_control_transfer+0x208>
		}

		/* Send smallest of requested and offered length */
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len, length);
    ee72:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
    ee74:	4b49      	ldr	r3, [pc, #292]	; (ef9c <usb_handle_control_transfer+0x210>)
    ee76:	691b      	ldr	r3, [r3, #16]
    ee78:	4293      	cmp	r3, r2
    ee7a:	bfa8      	it	ge
    ee7c:	4613      	movge	r3, r2
    ee7e:	4a47      	ldr	r2, [pc, #284]	; (ef9c <usb_handle_control_transfer+0x210>)
    ee80:	60d3      	str	r3, [r2, #12]
		/* Send first part (possibly a zero-length status message) */
		usb_data_to_host(length);
    ee82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    ee84:	4618      	mov	r0, r3
    ee86:	f7ff ff47 	bl	ed18 <usb_data_to_host>
	if (ep == USB_CONTROL_OUT_EP0 && ep_status == USB_DC_EP_SETUP) {
    ee8a:	e083      	b.n	ef94 <usb_handle_control_transfer+0x208>
	} else if (ep == USB_CONTROL_OUT_EP0) {
    ee8c:	79fb      	ldrb	r3, [r7, #7]
    ee8e:	2b00      	cmp	r3, #0
    ee90:	d170      	bne.n	ef74 <usb_handle_control_transfer+0x1e8>
		/* OUT transfer, data or status packets */
		if (usb_dev.data_buf_residue <= 0) {
    ee92:	4b42      	ldr	r3, [pc, #264]	; (ef9c <usb_handle_control_transfer+0x210>)
    ee94:	68db      	ldr	r3, [r3, #12]
    ee96:	2b00      	cmp	r3, #0
    ee98:	dc13      	bgt.n	eec2 <usb_handle_control_transfer+0x136>
			/* absorb zero-length status message */
			if (usb_dc_ep_read(USB_CONTROL_OUT_EP0,
    ee9a:	4b40      	ldr	r3, [pc, #256]	; (ef9c <usb_handle_control_transfer+0x210>)
    ee9c:	6899      	ldr	r1, [r3, #8]
    ee9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    eea2:	2200      	movs	r2, #0
    eea4:	2000      	movs	r0, #0
    eea6:	f012 f9aa 	bl	211fe <usb_dc_ep_read>
    eeaa:	4603      	mov	r3, r0
    eeac:	2b00      	cmp	r3, #0
    eeae:	da70      	bge.n	ef92 <usb_handle_control_transfer+0x206>
					   usb_dev.data_buf, 0, &chunk) < 0) {
				LOG_DBG("Read DATA Packet failed");
    eeb0:	f010 ff2f 	bl	1fd12 <_is_user_context>
    eeb4:	4603      	mov	r3, r0
    eeb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
    eeba:	2080      	movs	r0, #128	; 0x80
    eebc:	f002 f984 	bl	111c8 <usb_dc_ep_set_stall>
			}
			return;
    eec0:	e067      	b.n	ef92 <usb_handle_control_transfer+0x206>
		}

		if (usb_dc_ep_read(USB_CONTROL_OUT_EP0,
    eec2:	4b36      	ldr	r3, [pc, #216]	; (ef9c <usb_handle_control_transfer+0x210>)
    eec4:	6899      	ldr	r1, [r3, #8]
				   usb_dev.data_buf,
				   usb_dev.data_buf_residue, &chunk) < 0) {
    eec6:	4b35      	ldr	r3, [pc, #212]	; (ef9c <usb_handle_control_transfer+0x210>)
    eec8:	68db      	ldr	r3, [r3, #12]
		if (usb_dc_ep_read(USB_CONTROL_OUT_EP0,
    eeca:	461a      	mov	r2, r3
    eecc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    eed0:	2000      	movs	r0, #0
    eed2:	f012 f994 	bl	211fe <usb_dc_ep_read>
    eed6:	4603      	mov	r3, r0
    eed8:	2b00      	cmp	r3, #0
    eeda:	da0b      	bge.n	eef4 <usb_handle_control_transfer+0x168>
			LOG_DBG("Read DATA Packet failed");
    eedc:	f010 ff19 	bl	1fd12 <_is_user_context>
    eee0:	4603      	mov	r3, r0
    eee2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
    eee6:	2080      	movs	r0, #128	; 0x80
    eee8:	f002 f96e 	bl	111c8 <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_OUT_EP0);
    eeec:	2000      	movs	r0, #0
    eeee:	f002 f96b 	bl	111c8 <usb_dc_ep_set_stall>
			return;
    eef2:	e04f      	b.n	ef94 <usb_handle_control_transfer+0x208>
		}

		usb_dev.data_buf += chunk;
    eef4:	4b29      	ldr	r3, [pc, #164]	; (ef9c <usb_handle_control_transfer+0x210>)
    eef6:	689a      	ldr	r2, [r3, #8]
    eef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eefa:	4413      	add	r3, r2
    eefc:	4a27      	ldr	r2, [pc, #156]	; (ef9c <usb_handle_control_transfer+0x210>)
    eefe:	6093      	str	r3, [r2, #8]
		usb_dev.data_buf_residue -= chunk;
    ef00:	4b26      	ldr	r3, [pc, #152]	; (ef9c <usb_handle_control_transfer+0x210>)
    ef02:	68db      	ldr	r3, [r3, #12]
    ef04:	461a      	mov	r2, r3
    ef06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ef08:	1ad3      	subs	r3, r2, r3
    ef0a:	461a      	mov	r2, r3
    ef0c:	4b23      	ldr	r3, [pc, #140]	; (ef9c <usb_handle_control_transfer+0x210>)
    ef0e:	60da      	str	r2, [r3, #12]
		if (usb_dev.data_buf_residue == 0) {
    ef10:	4b22      	ldr	r3, [pc, #136]	; (ef9c <usb_handle_control_transfer+0x210>)
    ef12:	68db      	ldr	r3, [r3, #12]
    ef14:	2b00      	cmp	r3, #0
    ef16:	d13d      	bne.n	ef94 <usb_handle_control_transfer+0x208>
			/* Received all, send data to handler */
			type = REQTYPE_GET_TYPE(setup->bmRequestType);
    ef18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ef1a:	781b      	ldrb	r3, [r3, #0]
    ef1c:	095b      	lsrs	r3, r3, #5
    ef1e:	b2db      	uxtb	r3, r3
    ef20:	f003 0303 	and.w	r3, r3, #3
    ef24:	643b      	str	r3, [r7, #64]	; 0x40
			usb_dev.data_buf = usb_dev.data_store[type];
    ef26:	4a1d      	ldr	r2, [pc, #116]	; (ef9c <usb_handle_control_transfer+0x210>)
    ef28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ef2a:	330c      	adds	r3, #12
    ef2c:	009b      	lsls	r3, r3, #2
    ef2e:	4413      	add	r3, r2
    ef30:	685b      	ldr	r3, [r3, #4]
    ef32:	4a1a      	ldr	r2, [pc, #104]	; (ef9c <usb_handle_control_transfer+0x210>)
    ef34:	6093      	str	r3, [r2, #8]
			if (!usb_handle_request(setup,
    ef36:	4a1a      	ldr	r2, [pc, #104]	; (efa0 <usb_handle_control_transfer+0x214>)
    ef38:	491a      	ldr	r1, [pc, #104]	; (efa4 <usb_handle_control_transfer+0x218>)
    ef3a:	6b78      	ldr	r0, [r7, #52]	; 0x34
    ef3c:	f7ff fea6 	bl	ec8c <usb_handle_request>
    ef40:	4603      	mov	r3, r0
    ef42:	f083 0301 	eor.w	r3, r3, #1
    ef46:	b2db      	uxtb	r3, r3
    ef48:	2b00      	cmp	r3, #0
    ef4a:	d008      	beq.n	ef5e <usb_handle_control_transfer+0x1d2>
						&usb_dev.data_buf_len,
						&usb_dev.data_buf)) {
				LOG_DBG("usb_handle_request1 failed");
    ef4c:	f010 fee1 	bl	1fd12 <_is_user_context>
    ef50:	4603      	mov	r3, r0
    ef52:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
				usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
    ef56:	2080      	movs	r0, #128	; 0x80
    ef58:	f002 f936 	bl	111c8 <usb_dc_ep_set_stall>
				return;
    ef5c:	e01a      	b.n	ef94 <usb_handle_control_transfer+0x208>
			}

			/*Send status to host*/
			LOG_DBG(">> usb_data_to_host(2)");
    ef5e:	f010 fed8 	bl	1fd12 <_is_user_context>
    ef62:	4603      	mov	r3, r0
    ef64:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
			usb_data_to_host(sys_le16_to_cpu(setup->wLength));
    ef68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ef6a:	88db      	ldrh	r3, [r3, #6]
    ef6c:	4618      	mov	r0, r3
    ef6e:	f7ff fed3 	bl	ed18 <usb_data_to_host>
    ef72:	e00f      	b.n	ef94 <usb_handle_control_transfer+0x208>
		}
	} else if (ep == USB_CONTROL_IN_EP0) {
    ef74:	79fb      	ldrb	r3, [r7, #7]
    ef76:	2b80      	cmp	r3, #128	; 0x80
    ef78:	d10c      	bne.n	ef94 <usb_handle_control_transfer+0x208>
		/* Send more data if available */
		if (usb_dev.data_buf_residue != 0) {
    ef7a:	4b08      	ldr	r3, [pc, #32]	; (ef9c <usb_handle_control_transfer+0x210>)
    ef7c:	68db      	ldr	r3, [r3, #12]
    ef7e:	2b00      	cmp	r3, #0
    ef80:	d008      	beq.n	ef94 <usb_handle_control_transfer+0x208>
			usb_data_to_host(sys_le16_to_cpu(setup->wLength));
    ef82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ef84:	88db      	ldrh	r3, [r3, #6]
    ef86:	4618      	mov	r0, r3
    ef88:	f7ff fec6 	bl	ed18 <usb_data_to_host>
    ef8c:	e002      	b.n	ef94 <usb_handle_control_transfer+0x208>
			return;
    ef8e:	bf00      	nop
    ef90:	e000      	b.n	ef94 <usb_handle_control_transfer+0x208>
			return;
    ef92:	bf00      	nop
		}
	} else {
		__ASSERT_NO_MSG(false);
	}
}
    ef94:	3748      	adds	r7, #72	; 0x48
    ef96:	46bd      	mov	sp, r7
    ef98:	bd80      	pop	{r7, pc}
    ef9a:	bf00      	nop
    ef9c:	200029c8 	.word	0x200029c8
    efa0:	200029d0 	.word	0x200029d0
    efa4:	200029d8 	.word	0x200029d8

0000efa8 <usb_register_request_handler>:
 * @return N/A
 */
static void usb_register_request_handler(s32_t type,
					 usb_request_handler handler,
					 u8_t *data_store)
{
    efa8:	b480      	push	{r7}
    efaa:	b085      	sub	sp, #20
    efac:	af00      	add	r7, sp, #0
    efae:	60f8      	str	r0, [r7, #12]
    efb0:	60b9      	str	r1, [r7, #8]
    efb2:	607a      	str	r2, [r7, #4]
	usb_dev.req_handlers[type] = handler;
    efb4:	4a09      	ldr	r2, [pc, #36]	; (efdc <usb_register_request_handler+0x34>)
    efb6:	68fb      	ldr	r3, [r7, #12]
    efb8:	3308      	adds	r3, #8
    efba:	009b      	lsls	r3, r3, #2
    efbc:	4413      	add	r3, r2
    efbe:	68ba      	ldr	r2, [r7, #8]
    efc0:	605a      	str	r2, [r3, #4]
	usb_dev.data_store[type] = data_store;
    efc2:	4a06      	ldr	r2, [pc, #24]	; (efdc <usb_register_request_handler+0x34>)
    efc4:	68fb      	ldr	r3, [r7, #12]
    efc6:	330c      	adds	r3, #12
    efc8:	009b      	lsls	r3, r3, #2
    efca:	4413      	add	r3, r2
    efcc:	687a      	ldr	r2, [r7, #4]
    efce:	605a      	str	r2, [r3, #4]
}
    efd0:	bf00      	nop
    efd2:	3714      	adds	r7, #20
    efd4:	46bd      	mov	sp, r7
    efd6:	bc80      	pop	{r7}
    efd8:	4770      	bx	lr
    efda:	bf00      	nop
    efdc:	200029c8 	.word	0x200029c8

0000efe0 <usb_register_descriptors>:
 * descriptors for the device.
 *
 * @param [in] usb_descriptors The descriptor byte array
 */
static void usb_register_descriptors(const u8_t *usb_descriptors)
{
    efe0:	b480      	push	{r7}
    efe2:	b083      	sub	sp, #12
    efe4:	af00      	add	r7, sp, #0
    efe6:	6078      	str	r0, [r7, #4]
	usb_dev.descriptors = usb_descriptors;
    efe8:	4a03      	ldr	r2, [pc, #12]	; (eff8 <usb_register_descriptors+0x18>)
    efea:	687b      	ldr	r3, [r7, #4]
    efec:	6213      	str	r3, [r2, #32]
}
    efee:	bf00      	nop
    eff0:	370c      	adds	r7, #12
    eff2:	46bd      	mov	sp, r7
    eff4:	bc80      	pop	{r7}
    eff6:	4770      	bx	lr
    eff8:	200029c8 	.word	0x200029c8

0000effc <usb_get_descriptor>:
 *
 * @return true if the descriptor was found, false otherwise
 */
static bool usb_get_descriptor(u16_t type_index, u16_t lang_id,
		s32_t *len, u8_t **data)
{
    effc:	b580      	push	{r7, lr}
    effe:	b08a      	sub	sp, #40	; 0x28
    f000:	af00      	add	r7, sp, #0
    f002:	60ba      	str	r2, [r7, #8]
    f004:	607b      	str	r3, [r7, #4]
    f006:	4603      	mov	r3, r0
    f008:	81fb      	strh	r3, [r7, #14]
    f00a:	460b      	mov	r3, r1
    f00c:	81bb      	strh	r3, [r7, #12]
	u8_t type = 0U;
    f00e:	2300      	movs	r3, #0
    f010:	76fb      	strb	r3, [r7, #27]
	u8_t index = 0U;
    f012:	2300      	movs	r3, #0
    f014:	76bb      	strb	r3, [r7, #26]
	u8_t *p = NULL;
    f016:	2300      	movs	r3, #0
    f018:	61fb      	str	r3, [r7, #28]
	s32_t cur_index = 0;
    f01a:	2300      	movs	r3, #0
    f01c:	627b      	str	r3, [r7, #36]	; 0x24
	bool found = false;
    f01e:	2300      	movs	r3, #0
    f020:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	/*Avoid compiler warning until this is used for something*/
	ARG_UNUSED(lang_id);

	type = GET_DESC_TYPE(type_index);
    f024:	89fb      	ldrh	r3, [r7, #14]
    f026:	0a1b      	lsrs	r3, r3, #8
    f028:	b29b      	uxth	r3, r3
    f02a:	76fb      	strb	r3, [r7, #27]
	index = GET_DESC_INDEX(type_index);
    f02c:	89fb      	ldrh	r3, [r7, #14]
    f02e:	76bb      	strb	r3, [r7, #26]

	/*
	 * Invalid types of descriptors,
	 * see USB Spec. Revision 2.0, 9.4.3 Get Descriptor
	 */
	if ((type == DESC_INTERFACE) || (type == DESC_ENDPOINT) ||
    f030:	7efb      	ldrb	r3, [r7, #27]
    f032:	2b04      	cmp	r3, #4
    f034:	d005      	beq.n	f042 <usb_get_descriptor+0x46>
    f036:	7efb      	ldrb	r3, [r7, #27]
    f038:	2b05      	cmp	r3, #5
    f03a:	d002      	beq.n	f042 <usb_get_descriptor+0x46>
    f03c:	7efb      	ldrb	r3, [r7, #27]
    f03e:	2b07      	cmp	r3, #7
    f040:	d901      	bls.n	f046 <usb_get_descriptor+0x4a>
	    (type > DESC_OTHER_SPEED)) {
		return false;
    f042:	2300      	movs	r3, #0
    f044:	e042      	b.n	f0cc <usb_get_descriptor+0xd0>
	}

	p = (u8_t *)usb_dev.descriptors;
    f046:	4b23      	ldr	r3, [pc, #140]	; (f0d4 <usb_get_descriptor+0xd8>)
    f048:	6a1b      	ldr	r3, [r3, #32]
    f04a:	61fb      	str	r3, [r7, #28]
	cur_index = 0;
    f04c:	2300      	movs	r3, #0
    f04e:	627b      	str	r3, [r7, #36]	; 0x24

	while (p[DESC_bLength] != 0U) {
    f050:	e016      	b.n	f080 <usb_get_descriptor+0x84>
		if (p[DESC_bDescriptorType] == type) {
    f052:	69fb      	ldr	r3, [r7, #28]
    f054:	3301      	adds	r3, #1
    f056:	781b      	ldrb	r3, [r3, #0]
    f058:	7efa      	ldrb	r2, [r7, #27]
    f05a:	429a      	cmp	r2, r3
    f05c:	d10a      	bne.n	f074 <usb_get_descriptor+0x78>
			if (cur_index == index) {
    f05e:	7ebb      	ldrb	r3, [r7, #26]
    f060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    f062:	429a      	cmp	r2, r3
    f064:	d103      	bne.n	f06e <usb_get_descriptor+0x72>
				found = true;
    f066:	2301      	movs	r3, #1
    f068:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
    f06c:	e00c      	b.n	f088 <usb_get_descriptor+0x8c>
			}
			cur_index++;
    f06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f070:	3301      	adds	r3, #1
    f072:	627b      	str	r3, [r7, #36]	; 0x24
		}
		/* skip to next descriptor */
		p += p[DESC_bLength];
    f074:	69fb      	ldr	r3, [r7, #28]
    f076:	781b      	ldrb	r3, [r3, #0]
    f078:	461a      	mov	r2, r3
    f07a:	69fb      	ldr	r3, [r7, #28]
    f07c:	4413      	add	r3, r2
    f07e:	61fb      	str	r3, [r7, #28]
	while (p[DESC_bLength] != 0U) {
    f080:	69fb      	ldr	r3, [r7, #28]
    f082:	781b      	ldrb	r3, [r3, #0]
    f084:	2b00      	cmp	r3, #0
    f086:	d1e4      	bne.n	f052 <usb_get_descriptor+0x56>
	}

	if (found) {
    f088:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    f08c:	2b00      	cmp	r3, #0
    f08e:	d017      	beq.n	f0c0 <usb_get_descriptor+0xc4>
		/* set data pointer */
		*data = p;
    f090:	687b      	ldr	r3, [r7, #4]
    f092:	69fa      	ldr	r2, [r7, #28]
    f094:	601a      	str	r2, [r3, #0]
		/* get length from structure */
		if (type == DESC_CONFIGURATION) {
    f096:	7efb      	ldrb	r3, [r7, #27]
    f098:	2b02      	cmp	r3, #2
    f09a:	d10b      	bne.n	f0b4 <usb_get_descriptor+0xb8>
			/* configuration descriptor is an
			 * exception, length is at offset
			 * 2 and 3
			 */
			*len = (p[CONF_DESC_wTotalLength]) |
    f09c:	69fb      	ldr	r3, [r7, #28]
    f09e:	3302      	adds	r3, #2
    f0a0:	781b      	ldrb	r3, [r3, #0]
    f0a2:	461a      	mov	r2, r3
			    (p[CONF_DESC_wTotalLength + 1] << 8);
    f0a4:	69fb      	ldr	r3, [r7, #28]
    f0a6:	3303      	adds	r3, #3
    f0a8:	781b      	ldrb	r3, [r3, #0]
    f0aa:	021b      	lsls	r3, r3, #8
			*len = (p[CONF_DESC_wTotalLength]) |
    f0ac:	431a      	orrs	r2, r3
    f0ae:	68bb      	ldr	r3, [r7, #8]
    f0b0:	601a      	str	r2, [r3, #0]
    f0b2:	e009      	b.n	f0c8 <usb_get_descriptor+0xcc>
		} else {
			/* normally length is at offset 0 */
			*len = p[DESC_bLength];
    f0b4:	69fb      	ldr	r3, [r7, #28]
    f0b6:	781b      	ldrb	r3, [r3, #0]
    f0b8:	461a      	mov	r2, r3
    f0ba:	68bb      	ldr	r3, [r7, #8]
    f0bc:	601a      	str	r2, [r3, #0]
    f0be:	e003      	b.n	f0c8 <usb_get_descriptor+0xcc>
		}
	} else {
		/* nothing found */
		LOG_DBG("Desc %x not found!", type_index);
    f0c0:	f010 fe27 	bl	1fd12 <_is_user_context>
    f0c4:	4603      	mov	r3, r0
    f0c6:	767b      	strb	r3, [r7, #25]
	}
	return found;
    f0c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
    f0cc:	4618      	mov	r0, r3
    f0ce:	3728      	adds	r7, #40	; 0x28
    f0d0:	46bd      	mov	sp, r7
    f0d2:	bd80      	pop	{r7, pc}
    f0d4:	200029c8 	.word	0x200029c8

0000f0d8 <usb_set_configuration>:
 * @param [in] alt_setting  Alternate setting number
 *
 * @return true if successfully configured false if error or unconfigured
 */
static bool usb_set_configuration(u8_t config_index, u8_t alt_setting)
{
    f0d8:	b580      	push	{r7, lr}
    f0da:	b088      	sub	sp, #32
    f0dc:	af00      	add	r7, sp, #0
    f0de:	4603      	mov	r3, r0
    f0e0:	460a      	mov	r2, r1
    f0e2:	71fb      	strb	r3, [r7, #7]
    f0e4:	4613      	mov	r3, r2
    f0e6:	71bb      	strb	r3, [r7, #6]
	u8_t *p = NULL;
    f0e8:	2300      	movs	r3, #0
    f0ea:	61fb      	str	r3, [r7, #28]
	u8_t cur_config = 0U;
    f0ec:	2300      	movs	r3, #0
    f0ee:	76fb      	strb	r3, [r7, #27]
	u8_t cur_alt_setting = 0U;
    f0f0:	2300      	movs	r3, #0
    f0f2:	76bb      	strb	r3, [r7, #26]

	if (config_index == 0U) {
    f0f4:	79fb      	ldrb	r3, [r7, #7]
    f0f6:	2b00      	cmp	r3, #0
    f0f8:	d105      	bne.n	f106 <usb_set_configuration+0x2e>
		/* unconfigure device */
		LOG_DBG("Device not configured - invalid configuration "
    f0fa:	f010 fe0a 	bl	1fd12 <_is_user_context>
    f0fe:	4603      	mov	r3, r0
    f100:	767b      	strb	r3, [r7, #25]
			"offset");
		return true;
    f102:	2301      	movs	r3, #1
    f104:	e056      	b.n	f1b4 <usb_set_configuration+0xdc>
	}

	/* configure endpoints for this configuration/altsetting */
	p = (u8_t *)usb_dev.descriptors;
    f106:	4b2d      	ldr	r3, [pc, #180]	; (f1bc <usb_set_configuration+0xe4>)
    f108:	6a1b      	ldr	r3, [r3, #32]
    f10a:	61fb      	str	r3, [r7, #28]
	cur_config = 0xFF;
    f10c:	23ff      	movs	r3, #255	; 0xff
    f10e:	76fb      	strb	r3, [r7, #27]
	cur_alt_setting = 0xFF;
    f110:	23ff      	movs	r3, #255	; 0xff
    f112:	76bb      	strb	r3, [r7, #26]

	while (p[DESC_bLength] != 0U) {
    f114:	e03f      	b.n	f196 <usb_set_configuration+0xbe>
		switch (p[DESC_bDescriptorType]) {
    f116:	69fb      	ldr	r3, [r7, #28]
    f118:	3301      	adds	r3, #1
    f11a:	781b      	ldrb	r3, [r3, #0]
    f11c:	2b04      	cmp	r3, #4
    f11e:	d007      	beq.n	f130 <usb_set_configuration+0x58>
    f120:	2b05      	cmp	r3, #5
    f122:	d009      	beq.n	f138 <usb_set_configuration+0x60>
    f124:	2b02      	cmp	r3, #2
    f126:	d12d      	bne.n	f184 <usb_set_configuration+0xac>
		case DESC_CONFIGURATION:
			/* remember current configuration index */
			cur_config = p[CONF_DESC_bConfigurationValue];
    f128:	69fb      	ldr	r3, [r7, #28]
    f12a:	795b      	ldrb	r3, [r3, #5]
    f12c:	76fb      	strb	r3, [r7, #27]
			break;
    f12e:	e02c      	b.n	f18a <usb_set_configuration+0xb2>

		case DESC_INTERFACE:
			/* remember current alternate setting */
			cur_alt_setting =
    f130:	69fb      	ldr	r3, [r7, #28]
    f132:	78db      	ldrb	r3, [r3, #3]
    f134:	76bb      	strb	r3, [r7, #26]
			    p[INTF_DESC_bAlternateSetting];
			break;
    f136:	e028      	b.n	f18a <usb_set_configuration+0xb2>

		case DESC_ENDPOINT:
			if ((cur_config == config_index) &&
    f138:	79fb      	ldrb	r3, [r7, #7]
    f13a:	7efa      	ldrb	r2, [r7, #27]
    f13c:	429a      	cmp	r2, r3
    f13e:	d123      	bne.n	f188 <usb_set_configuration+0xb0>
    f140:	7eba      	ldrb	r2, [r7, #26]
    f142:	79bb      	ldrb	r3, [r7, #6]
    f144:	429a      	cmp	r2, r3
    f146:	d11f      	bne.n	f188 <usb_set_configuration+0xb0>
				struct usb_dc_ep_cfg_data ep_cfg;
				/* endpoint found for desired config
				 * and alternate setting
				 */
				ep_cfg.ep_type =
				    p[ENDP_DESC_bmAttributes];
    f148:	69fb      	ldr	r3, [r7, #28]
    f14a:	3303      	adds	r3, #3
    f14c:	781b      	ldrb	r3, [r3, #0]
				ep_cfg.ep_type =
    f14e:	743b      	strb	r3, [r7, #16]
				ep_cfg.ep_mps =
				    (p[ENDP_DESC_wMaxPacketSize]) |
    f150:	69fb      	ldr	r3, [r7, #28]
    f152:	3304      	adds	r3, #4
    f154:	781b      	ldrb	r3, [r3, #0]
    f156:	b21a      	sxth	r2, r3
				    (p[ENDP_DESC_wMaxPacketSize + 1]
    f158:	69fb      	ldr	r3, [r7, #28]
    f15a:	3305      	adds	r3, #5
    f15c:	781b      	ldrb	r3, [r3, #0]
					    << 8);
    f15e:	021b      	lsls	r3, r3, #8
				    (p[ENDP_DESC_wMaxPacketSize]) |
    f160:	b21b      	sxth	r3, r3
    f162:	4313      	orrs	r3, r2
    f164:	b21b      	sxth	r3, r3
    f166:	b29b      	uxth	r3, r3
				ep_cfg.ep_mps =
    f168:	81fb      	strh	r3, [r7, #14]
				ep_cfg.ep_addr =
    f16a:	69fb      	ldr	r3, [r7, #28]
    f16c:	789b      	ldrb	r3, [r3, #2]
    f16e:	733b      	strb	r3, [r7, #12]
				    p[ENDP_DESC_bEndpointAddress];
				usb_dc_ep_configure(&ep_cfg);
    f170:	f107 030c 	add.w	r3, r7, #12
    f174:	4618      	mov	r0, r3
    f176:	f011 fe6f 	bl	20e58 <usb_dc_ep_configure>
				usb_dc_ep_enable(ep_cfg.ep_addr);
    f17a:	7b3b      	ldrb	r3, [r7, #12]
    f17c:	4618      	mov	r0, r3
    f17e:	f011 ff1e 	bl	20fbe <usb_dc_ep_enable>
			}
			break;
    f182:	e001      	b.n	f188 <usb_set_configuration+0xb0>

		default:
			break;
    f184:	bf00      	nop
    f186:	e000      	b.n	f18a <usb_set_configuration+0xb2>
			break;
    f188:	bf00      	nop
		}
		/* skip to next descriptor */
		p += p[DESC_bLength];
    f18a:	69fb      	ldr	r3, [r7, #28]
    f18c:	781b      	ldrb	r3, [r3, #0]
    f18e:	461a      	mov	r2, r3
    f190:	69fb      	ldr	r3, [r7, #28]
    f192:	4413      	add	r3, r2
    f194:	61fb      	str	r3, [r7, #28]
	while (p[DESC_bLength] != 0U) {
    f196:	69fb      	ldr	r3, [r7, #28]
    f198:	781b      	ldrb	r3, [r3, #0]
    f19a:	2b00      	cmp	r3, #0
    f19c:	d1bb      	bne.n	f116 <usb_set_configuration+0x3e>
	}

	if (usb_dev.status_callback) {
    f19e:	4b07      	ldr	r3, [pc, #28]	; (f1bc <usb_set_configuration+0xe4>)
    f1a0:	69db      	ldr	r3, [r3, #28]
    f1a2:	2b00      	cmp	r3, #0
    f1a4:	d005      	beq.n	f1b2 <usb_set_configuration+0xda>
		usb_dev.status_callback(USB_DC_CONFIGURED, &config_index);
    f1a6:	4b05      	ldr	r3, [pc, #20]	; (f1bc <usb_set_configuration+0xe4>)
    f1a8:	69db      	ldr	r3, [r3, #28]
    f1aa:	1dfa      	adds	r2, r7, #7
    f1ac:	4611      	mov	r1, r2
    f1ae:	2003      	movs	r0, #3
    f1b0:	4798      	blx	r3
	}

	return true;
    f1b2:	2301      	movs	r3, #1
}
    f1b4:	4618      	mov	r0, r3
    f1b6:	3720      	adds	r7, #32
    f1b8:	46bd      	mov	sp, r7
    f1ba:	bd80      	pop	{r7, pc}
    f1bc:	200029c8 	.word	0x200029c8

0000f1c0 <usb_set_interface>:
 * @param [in] alt_setting  Alternate setting number
 *
 * @return true if successfully configured false if error or unconfigured
 */
static bool usb_set_interface(u8_t iface, u8_t alt_setting)
{
    f1c0:	b580      	push	{r7, lr}
    f1c2:	b08c      	sub	sp, #48	; 0x30
    f1c4:	af00      	add	r7, sp, #0
    f1c6:	4603      	mov	r3, r0
    f1c8:	460a      	mov	r2, r1
    f1ca:	71fb      	strb	r3, [r7, #7]
    f1cc:	4613      	mov	r3, r2
    f1ce:	71bb      	strb	r3, [r7, #6]
	const u8_t *p = usb_dev.descriptors;
    f1d0:	4b3f      	ldr	r3, [pc, #252]	; (f2d0 <usb_set_interface+0x110>)
    f1d2:	6a1b      	ldr	r3, [r3, #32]
    f1d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	const u8_t *if_desc = NULL;
    f1d6:	2300      	movs	r3, #0
    f1d8:	627b      	str	r3, [r7, #36]	; 0x24
	u8_t cur_alt_setting = 0xFF;
    f1da:	23ff      	movs	r3, #255	; 0xff
    f1dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	u8_t cur_iface = 0xFF;
    f1e0:	23ff      	movs	r3, #255	; 0xff
    f1e2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	bool found = false;
    f1e6:	2300      	movs	r3, #0
    f1e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	LOG_DBG("iface %u alt_setting %u", iface, alt_setting);
    f1ec:	f010 fd91 	bl	1fd12 <_is_user_context>
    f1f0:	4603      	mov	r3, r0
    f1f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	while (p[DESC_bLength] != 0U) {
    f1f6:	e058      	b.n	f2aa <usb_set_interface+0xea>
		struct usb_dc_ep_cfg_data ep_cfg;

		switch (p[DESC_bDescriptorType]) {
    f1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f1fa:	3301      	adds	r3, #1
    f1fc:	781b      	ldrb	r3, [r3, #0]
    f1fe:	2b04      	cmp	r3, #4
    f200:	d002      	beq.n	f208 <usb_set_interface+0x48>
    f202:	2b05      	cmp	r3, #5
    f204:	d01a      	beq.n	f23c <usb_set_interface+0x7c>

			found = true;
			LOG_DBG("Found: ep_addr 0x%x", ep_cfg.ep_addr);
			break;
		default:
			break;
    f206:	e04a      	b.n	f29e <usb_set_interface+0xde>
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    f208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f20a:	78db      	ldrb	r3, [r3, #3]
    f20c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    f210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f212:	789b      	ldrb	r3, [r3, #2]
    f214:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			if (cur_iface == iface &&
    f218:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
    f21c:	79fb      	ldrb	r3, [r7, #7]
    f21e:	429a      	cmp	r2, r3
    f220:	d106      	bne.n	f230 <usb_set_interface+0x70>
    f222:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
    f226:	79bb      	ldrb	r3, [r7, #6]
    f228:	429a      	cmp	r2, r3
    f22a:	d101      	bne.n	f230 <usb_set_interface+0x70>
				if_desc = (void *)p;
    f22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f22e:	627b      	str	r3, [r7, #36]	; 0x24
			LOG_DBG("iface_num %u alt_set %u",
    f230:	f010 fd6f 	bl	1fd12 <_is_user_context>
    f234:	4603      	mov	r3, r0
    f236:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			break;
    f23a:	e030      	b.n	f29e <usb_set_interface+0xde>
			if ((cur_iface != iface) ||
    f23c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
    f240:	79fb      	ldrb	r3, [r7, #7]
    f242:	429a      	cmp	r2, r3
    f244:	d12a      	bne.n	f29c <usb_set_interface+0xdc>
    f246:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
    f24a:	79bb      	ldrb	r3, [r7, #6]
    f24c:	429a      	cmp	r2, r3
    f24e:	d125      	bne.n	f29c <usb_set_interface+0xdc>
			ep_cfg.ep_type = p[ENDP_DESC_bmAttributes];
    f250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f252:	3303      	adds	r3, #3
    f254:	781b      	ldrb	r3, [r3, #0]
    f256:	763b      	strb	r3, [r7, #24]
			ep_cfg.ep_mps = (p[ENDP_DESC_wMaxPacketSize]) |
    f258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f25a:	3304      	adds	r3, #4
    f25c:	781b      	ldrb	r3, [r3, #0]
    f25e:	b21a      	sxth	r2, r3
				(p[ENDP_DESC_wMaxPacketSize + 1] << 8);
    f260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f262:	3305      	adds	r3, #5
    f264:	781b      	ldrb	r3, [r3, #0]
    f266:	021b      	lsls	r3, r3, #8
			ep_cfg.ep_mps = (p[ENDP_DESC_wMaxPacketSize]) |
    f268:	b21b      	sxth	r3, r3
    f26a:	4313      	orrs	r3, r2
    f26c:	b21b      	sxth	r3, r3
    f26e:	b29b      	uxth	r3, r3
    f270:	82fb      	strh	r3, [r7, #22]
			ep_cfg.ep_addr = p[ENDP_DESC_bEndpointAddress];
    f272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f274:	789b      	ldrb	r3, [r3, #2]
    f276:	753b      	strb	r3, [r7, #20]
			usb_dc_ep_configure(&ep_cfg);
    f278:	f107 0314 	add.w	r3, r7, #20
    f27c:	4618      	mov	r0, r3
    f27e:	f011 fdeb 	bl	20e58 <usb_dc_ep_configure>
			usb_dc_ep_enable(ep_cfg.ep_addr);
    f282:	7d3b      	ldrb	r3, [r7, #20]
    f284:	4618      	mov	r0, r3
    f286:	f011 fe9a 	bl	20fbe <usb_dc_ep_enable>
			found = true;
    f28a:	2301      	movs	r3, #1
    f28c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			LOG_DBG("Found: ep_addr 0x%x", ep_cfg.ep_addr);
    f290:	f010 fd3f 	bl	1fd12 <_is_user_context>
    f294:	4603      	mov	r3, r0
    f296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			break;
    f29a:	e000      	b.n	f29e <usb_set_interface+0xde>
		}

		/* skip to next descriptor */
		p += p[DESC_bLength];
    f29c:	bf00      	nop
    f29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f2a0:	781b      	ldrb	r3, [r3, #0]
    f2a2:	461a      	mov	r2, r3
    f2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f2a6:	4413      	add	r3, r2
    f2a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (p[DESC_bLength] != 0U) {
    f2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f2ac:	781b      	ldrb	r3, [r3, #0]
    f2ae:	2b00      	cmp	r3, #0
    f2b0:	d1a2      	bne.n	f1f8 <usb_set_interface+0x38>
	}

	if (usb_dev.status_callback) {
    f2b2:	4b07      	ldr	r3, [pc, #28]	; (f2d0 <usb_set_interface+0x110>)
    f2b4:	69db      	ldr	r3, [r3, #28]
    f2b6:	2b00      	cmp	r3, #0
    f2b8:	d004      	beq.n	f2c4 <usb_set_interface+0x104>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    f2ba:	4b05      	ldr	r3, [pc, #20]	; (f2d0 <usb_set_interface+0x110>)
    f2bc:	69db      	ldr	r3, [r3, #28]
    f2be:	6a79      	ldr	r1, [r7, #36]	; 0x24
    f2c0:	2007      	movs	r0, #7
    f2c2:	4798      	blx	r3
	}

	return found;
    f2c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
    f2c8:	4618      	mov	r0, r3
    f2ca:	3730      	adds	r7, #48	; 0x30
    f2cc:	46bd      	mov	sp, r7
    f2ce:	bd80      	pop	{r7, pc}
    f2d0:	200029c8 	.word	0x200029c8

0000f2d4 <usb_handle_std_device_req>:
 *
 * @return true if the request was handled successfully
 */
static bool usb_handle_std_device_req(struct usb_setup_packet *setup,
				      s32_t *len, u8_t **data_buf)
{
    f2d4:	b580      	push	{r7, lr}
    f2d6:	b094      	sub	sp, #80	; 0x50
    f2d8:	af00      	add	r7, sp, #0
    f2da:	60f8      	str	r0, [r7, #12]
    f2dc:	60b9      	str	r1, [r7, #8]
    f2de:	607a      	str	r2, [r7, #4]
	u16_t value = sys_le16_to_cpu(setup->wValue);
    f2e0:	68fb      	ldr	r3, [r7, #12]
    f2e2:	885b      	ldrh	r3, [r3, #2]
    f2e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
	u16_t index = sys_le16_to_cpu(setup->wIndex);
    f2e6:	68fb      	ldr	r3, [r7, #12]
    f2e8:	889b      	ldrh	r3, [r3, #4]
    f2ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	bool ret = true;
    f2ee:	2301      	movs	r3, #1
    f2f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	u8_t *data = *data_buf;
    f2f4:	687b      	ldr	r3, [r7, #4]
    f2f6:	681b      	ldr	r3, [r3, #0]
    f2f8:	647b      	str	r3, [r7, #68]	; 0x44

	switch (setup->bRequest) {
    f2fa:	68fb      	ldr	r3, [r7, #12]
    f2fc:	785b      	ldrb	r3, [r3, #1]
    f2fe:	2b09      	cmp	r3, #9
    f300:	f200 80b3 	bhi.w	f46a <usb_handle_std_device_req+0x196>
    f304:	a201      	add	r2, pc, #4	; (adr r2, f30c <usb_handle_std_device_req+0x38>)
    f306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f30a:	bf00      	nop
    f30c:	0000f335 	.word	0x0000f335
    f310:	0000f40d 	.word	0x0000f40d
    f314:	0000f46b 	.word	0x0000f46b
    f318:	0000f433 	.word	0x0000f433
    f31c:	0000f46b 	.word	0x0000f46b
    f320:	0000f375 	.word	0x0000f375
    f324:	0000f38b 	.word	0x0000f38b
    f328:	0000f459 	.word	0x0000f459
    f32c:	0000f3ab 	.word	0x0000f3ab
    f330:	0000f3c7 	.word	0x0000f3c7
	case REQ_GET_STATUS:
		LOG_DBG("REQ_GET_STATUS");
    f334:	f010 fced 	bl	1fd12 <_is_user_context>
    f338:	4603      	mov	r3, r0
    f33a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		/* bit 0: self-powered */
		/* bit 1: remote wakeup */
		data[0] = 0U;
    f33e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f340:	2200      	movs	r2, #0
    f342:	701a      	strb	r2, [r3, #0]
		data[1] = 0U;
    f344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f346:	3301      	adds	r3, #1
    f348:	2200      	movs	r2, #0
    f34a:	701a      	strb	r2, [r3, #0]

		if (IS_ENABLED(CONFIG_USB_DEVICE_REMOTE_WAKEUP)) {
			data[0] |= (usb_dev.remote_wakeup ?
    f34c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f34e:	781b      	ldrb	r3, [r3, #0]
    f350:	b25b      	sxtb	r3, r3
    f352:	4a4f      	ldr	r2, [pc, #316]	; (f490 <usb_handle_std_device_req+0x1bc>)
    f354:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
    f358:	2a00      	cmp	r2, #0
    f35a:	d001      	beq.n	f360 <usb_handle_std_device_req+0x8c>
    f35c:	2202      	movs	r2, #2
    f35e:	e000      	b.n	f362 <usb_handle_std_device_req+0x8e>
    f360:	2200      	movs	r2, #0
    f362:	4313      	orrs	r3, r2
    f364:	b25b      	sxtb	r3, r3
    f366:	b2da      	uxtb	r2, r3
    f368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f36a:	701a      	strb	r2, [r3, #0]
				    DEVICE_STATUS_REMOTE_WAKEUP : 0);
		}

		*len = 2;
    f36c:	68bb      	ldr	r3, [r7, #8]
    f36e:	2202      	movs	r2, #2
    f370:	601a      	str	r2, [r3, #0]
		break;
    f372:	e086      	b.n	f482 <usb_handle_std_device_req+0x1ae>

	case REQ_SET_ADDRESS:
		LOG_DBG("REQ_SET_ADDRESS, addr 0x%x", value);
    f374:	f010 fccd 	bl	1fd12 <_is_user_context>
    f378:	4603      	mov	r3, r0
    f37a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		usb_dc_set_address(value);
    f37e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    f380:	b2db      	uxtb	r3, r3
    f382:	4618      	mov	r0, r3
    f384:	f011 fcf0 	bl	20d68 <usb_dc_set_address>
		break;
    f388:	e07b      	b.n	f482 <usb_handle_std_device_req+0x1ae>

	case REQ_GET_DESCRIPTOR:
		LOG_DBG("REQ_GET_DESCRIPTOR");
    f38a:	f010 fcc2 	bl	1fd12 <_is_user_context>
    f38e:	4603      	mov	r3, r0
    f390:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		ret = usb_get_descriptor(value, index, len, data_buf);
    f394:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
    f398:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
    f39a:	687b      	ldr	r3, [r7, #4]
    f39c:	68ba      	ldr	r2, [r7, #8]
    f39e:	f7ff fe2d 	bl	effc <usb_get_descriptor>
    f3a2:	4603      	mov	r3, r0
    f3a4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		break;
    f3a8:	e06b      	b.n	f482 <usb_handle_std_device_req+0x1ae>

	case REQ_GET_CONFIGURATION:
		LOG_DBG("REQ_GET_CONFIGURATION");
    f3aa:	f010 fcb2 	bl	1fd12 <_is_user_context>
    f3ae:	4603      	mov	r3, r0
    f3b0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		/* indicate if we are configured */
		data[0] = usb_dev.configuration;
    f3b4:	4b36      	ldr	r3, [pc, #216]	; (f490 <usb_handle_std_device_req+0x1bc>)
    f3b6:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
    f3ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f3bc:	701a      	strb	r2, [r3, #0]
		*len = 1;
    f3be:	68bb      	ldr	r3, [r7, #8]
    f3c0:	2201      	movs	r2, #1
    f3c2:	601a      	str	r2, [r3, #0]
		break;
    f3c4:	e05d      	b.n	f482 <usb_handle_std_device_req+0x1ae>

	case REQ_SET_CONFIGURATION:
		value &= 0xFF;
    f3c6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    f3c8:	b2db      	uxtb	r3, r3
    f3ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
		LOG_DBG("REQ_SET_CONFIGURATION, conf 0x%x", value);
    f3cc:	f010 fca1 	bl	1fd12 <_is_user_context>
    f3d0:	4603      	mov	r3, r0
    f3d2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		if (!usb_set_configuration(value, 0)) {
    f3d6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    f3d8:	b2db      	uxtb	r3, r3
    f3da:	2100      	movs	r1, #0
    f3dc:	4618      	mov	r0, r3
    f3de:	f7ff fe7b 	bl	f0d8 <usb_set_configuration>
    f3e2:	4603      	mov	r3, r0
    f3e4:	f083 0301 	eor.w	r3, r3, #1
    f3e8:	b2db      	uxtb	r3, r3
    f3ea:	2b00      	cmp	r3, #0
    f3ec:	d008      	beq.n	f400 <usb_handle_std_device_req+0x12c>
			LOG_DBG("USB Set Configuration failed");
    f3ee:	f010 fc90 	bl	1fd12 <_is_user_context>
    f3f2:	4603      	mov	r3, r0
    f3f4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
			ret = false;
    f3f8:	2300      	movs	r3, #0
    f3fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			/* configuration successful,
			 * update current configuration
			 */
			usb_dev.configuration = value;
		}
		break;
    f3fe:	e040      	b.n	f482 <usb_handle_std_device_req+0x1ae>
			usb_dev.configuration = value;
    f400:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    f402:	b2da      	uxtb	r2, r3
    f404:	4b22      	ldr	r3, [pc, #136]	; (f490 <usb_handle_std_device_req+0x1bc>)
    f406:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		break;
    f40a:	e03a      	b.n	f482 <usb_handle_std_device_req+0x1ae>

	case REQ_CLEAR_FEATURE:
		LOG_DBG("REQ_CLEAR_FEATURE");
    f40c:	f010 fc81 	bl	1fd12 <_is_user_context>
    f410:	4603      	mov	r3, r0
    f412:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		ret = false;
    f416:	2300      	movs	r3, #0
    f418:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		if (IS_ENABLED(CONFIG_USB_DEVICE_REMOTE_WAKEUP)) {
			if (value == FEA_REMOTE_WAKEUP) {
    f41c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    f41e:	2b01      	cmp	r3, #1
    f420:	d12c      	bne.n	f47c <usb_handle_std_device_req+0x1a8>
				usb_dev.remote_wakeup = false;
    f422:	4b1b      	ldr	r3, [pc, #108]	; (f490 <usb_handle_std_device_req+0x1bc>)
    f424:	2200      	movs	r2, #0
    f426:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
				ret = true;
    f42a:	2301      	movs	r3, #1
    f42c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			}
		}
		break;
    f430:	e024      	b.n	f47c <usb_handle_std_device_req+0x1a8>
	case REQ_SET_FEATURE:
		LOG_DBG("REQ_SET_FEATURE");
    f432:	f010 fc6e 	bl	1fd12 <_is_user_context>
    f436:	4603      	mov	r3, r0
    f438:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		ret = false;
    f43c:	2300      	movs	r3, #0
    f43e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		if (IS_ENABLED(CONFIG_USB_DEVICE_REMOTE_WAKEUP)) {
			if (value == FEA_REMOTE_WAKEUP) {
    f442:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    f444:	2b01      	cmp	r3, #1
    f446:	d11b      	bne.n	f480 <usb_handle_std_device_req+0x1ac>
				usb_dev.remote_wakeup = true;
    f448:	4b11      	ldr	r3, [pc, #68]	; (f490 <usb_handle_std_device_req+0x1bc>)
    f44a:	2201      	movs	r2, #1
    f44c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
				ret = true;
    f450:	2301      	movs	r3, #1
    f452:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		}

		if (value == FEA_TEST_MODE) {
			/* put TEST_MODE code here */
		}
		break;
    f456:	e013      	b.n	f480 <usb_handle_std_device_req+0x1ac>

	case REQ_SET_DESCRIPTOR:
		LOG_DBG("Device req %x not implemented", setup->bRequest);
    f458:	f010 fc5b 	bl	1fd12 <_is_user_context>
    f45c:	4603      	mov	r3, r0
    f45e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		ret = false;
    f462:	2300      	movs	r3, #0
    f464:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		break;
    f468:	e00b      	b.n	f482 <usb_handle_std_device_req+0x1ae>

	default:
		LOG_DBG("Illegal device req %x", setup->bRequest);
    f46a:	f010 fc52 	bl	1fd12 <_is_user_context>
    f46e:	4603      	mov	r3, r0
    f470:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		ret = false;
    f474:	2300      	movs	r3, #0
    f476:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		break;
    f47a:	e002      	b.n	f482 <usb_handle_std_device_req+0x1ae>
		break;
    f47c:	bf00      	nop
    f47e:	e000      	b.n	f482 <usb_handle_std_device_req+0x1ae>
		break;
    f480:	bf00      	nop
	}

	return ret;
    f482:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
    f486:	4618      	mov	r0, r3
    f488:	3750      	adds	r7, #80	; 0x50
    f48a:	46bd      	mov	sp, r7
    f48c:	bd80      	pop	{r7, pc}
    f48e:	bf00      	nop
    f490:	200029c8 	.word	0x200029c8

0000f494 <usb_handle_std_interface_req>:
 *
 * @return true if the request was handled successfully
 */
static bool usb_handle_std_interface_req(struct usb_setup_packet *setup,
					 s32_t *len, u8_t **data_buf)
{
    f494:	b580      	push	{r7, lr}
    f496:	b088      	sub	sp, #32
    f498:	af00      	add	r7, sp, #0
    f49a:	60f8      	str	r0, [r7, #12]
    f49c:	60b9      	str	r1, [r7, #8]
    f49e:	607a      	str	r2, [r7, #4]
	u8_t *data = *data_buf;
    f4a0:	687b      	ldr	r3, [r7, #4]
    f4a2:	681b      	ldr	r3, [r3, #0]
    f4a4:	61bb      	str	r3, [r7, #24]

	switch (setup->bRequest) {
    f4a6:	68fb      	ldr	r3, [r7, #12]
    f4a8:	785b      	ldrb	r3, [r3, #1]
    f4aa:	2b0b      	cmp	r3, #11
    f4ac:	d840      	bhi.n	f530 <usb_handle_std_interface_req+0x9c>
    f4ae:	a201      	add	r2, pc, #4	; (adr r2, f4b4 <usb_handle_std_interface_req+0x20>)
    f4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f4b4:	0000f4e5 	.word	0x0000f4e5
    f4b8:	0000f4fb 	.word	0x0000f4fb
    f4bc:	0000f531 	.word	0x0000f531
    f4c0:	0000f4fb 	.word	0x0000f4fb
    f4c4:	0000f531 	.word	0x0000f531
    f4c8:	0000f531 	.word	0x0000f531
    f4cc:	0000f531 	.word	0x0000f531
    f4d0:	0000f531 	.word	0x0000f531
    f4d4:	0000f531 	.word	0x0000f531
    f4d8:	0000f531 	.word	0x0000f531
    f4dc:	0000f4ff 	.word	0x0000f4ff
    f4e0:	0000f50d 	.word	0x0000f50d
	case REQ_GET_STATUS:
		/* no bits specified */
		data[0] = 0U;
    f4e4:	69bb      	ldr	r3, [r7, #24]
    f4e6:	2200      	movs	r2, #0
    f4e8:	701a      	strb	r2, [r3, #0]
		data[1] = 0U;
    f4ea:	69bb      	ldr	r3, [r7, #24]
    f4ec:	3301      	adds	r3, #1
    f4ee:	2200      	movs	r2, #0
    f4f0:	701a      	strb	r2, [r3, #0]
		*len = 2;
    f4f2:	68bb      	ldr	r3, [r7, #8]
    f4f4:	2202      	movs	r2, #2
    f4f6:	601a      	str	r2, [r3, #0]
		break;
    f4f8:	e020      	b.n	f53c <usb_handle_std_interface_req+0xa8>

	case REQ_CLEAR_FEATURE:
	case REQ_SET_FEATURE:
		/* not defined for interface */
		return false;
    f4fa:	2300      	movs	r3, #0
    f4fc:	e01f      	b.n	f53e <usb_handle_std_interface_req+0xaa>

	case REQ_GET_INTERFACE:
		/* there is only one interface, return n-1 (= 0) */
		data[0] = 0U;
    f4fe:	69bb      	ldr	r3, [r7, #24]
    f500:	2200      	movs	r2, #0
    f502:	701a      	strb	r2, [r3, #0]
		*len = 1;
    f504:	68bb      	ldr	r3, [r7, #8]
    f506:	2201      	movs	r2, #1
    f508:	601a      	str	r2, [r3, #0]
		break;
    f50a:	e017      	b.n	f53c <usb_handle_std_interface_req+0xa8>

	case REQ_SET_INTERFACE:
		LOG_DBG("REQ_SET_INTERFACE");
    f50c:	f010 fc01 	bl	1fd12 <_is_user_context>
    f510:	4603      	mov	r3, r0
    f512:	77bb      	strb	r3, [r7, #30]
		usb_set_interface(sys_le16_to_cpu(setup->wIndex),
    f514:	68fb      	ldr	r3, [r7, #12]
    f516:	889b      	ldrh	r3, [r3, #4]
    f518:	b2da      	uxtb	r2, r3
				  sys_le16_to_cpu(setup->wValue));
    f51a:	68fb      	ldr	r3, [r7, #12]
    f51c:	885b      	ldrh	r3, [r3, #2]
		usb_set_interface(sys_le16_to_cpu(setup->wIndex),
    f51e:	b2db      	uxtb	r3, r3
    f520:	4619      	mov	r1, r3
    f522:	4610      	mov	r0, r2
    f524:	f7ff fe4c 	bl	f1c0 <usb_set_interface>
		*len = 0;
    f528:	68bb      	ldr	r3, [r7, #8]
    f52a:	2200      	movs	r2, #0
    f52c:	601a      	str	r2, [r3, #0]
		break;
    f52e:	e005      	b.n	f53c <usb_handle_std_interface_req+0xa8>

	default:
		LOG_DBG("Illegal interface req %d", setup->bRequest);
    f530:	f010 fbef 	bl	1fd12 <_is_user_context>
    f534:	4603      	mov	r3, r0
    f536:	77fb      	strb	r3, [r7, #31]
		return false;
    f538:	2300      	movs	r3, #0
    f53a:	e000      	b.n	f53e <usb_handle_std_interface_req+0xaa>
	}

	return true;
    f53c:	2301      	movs	r3, #1
}
    f53e:	4618      	mov	r0, r3
    f540:	3720      	adds	r7, #32
    f542:	46bd      	mov	sp, r7
    f544:	bd80      	pop	{r7, pc}
    f546:	bf00      	nop

0000f548 <usb_handle_std_endpoint_req>:
 *
 * @return true if the request was handled successfully
 */
static bool usb_handle_std_endpoint_req(struct usb_setup_packet *setup,
					s32_t *len, u8_t **data_buf)
{
    f548:	b580      	push	{r7, lr}
    f54a:	b08a      	sub	sp, #40	; 0x28
    f54c:	af00      	add	r7, sp, #0
    f54e:	60f8      	str	r0, [r7, #12]
    f550:	60b9      	str	r1, [r7, #8]
    f552:	607a      	str	r2, [r7, #4]
	u8_t ep = sys_le16_to_cpu(setup->wIndex);
    f554:	68fb      	ldr	r3, [r7, #12]
    f556:	889b      	ldrh	r3, [r3, #4]
    f558:	b2db      	uxtb	r3, r3
    f55a:	77fb      	strb	r3, [r7, #31]
	u8_t *data = *data_buf;
    f55c:	687b      	ldr	r3, [r7, #4]
    f55e:	681b      	ldr	r3, [r3, #0]
    f560:	623b      	str	r3, [r7, #32]

	switch (setup->bRequest) {
    f562:	68fb      	ldr	r3, [r7, #12]
    f564:	785b      	ldrb	r3, [r3, #1]
    f566:	2b0c      	cmp	r3, #12
    f568:	d866      	bhi.n	f638 <usb_handle_std_endpoint_req+0xf0>
    f56a:	a201      	add	r2, pc, #4	; (adr r2, f570 <usb_handle_std_endpoint_req+0x28>)
    f56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f570:	0000f5a5 	.word	0x0000f5a5
    f574:	0000f5bf 	.word	0x0000f5bf
    f578:	0000f639 	.word	0x0000f639
    f57c:	0000f5f5 	.word	0x0000f5f5
    f580:	0000f639 	.word	0x0000f639
    f584:	0000f639 	.word	0x0000f639
    f588:	0000f639 	.word	0x0000f639
    f58c:	0000f639 	.word	0x0000f639
    f590:	0000f639 	.word	0x0000f639
    f594:	0000f639 	.word	0x0000f639
    f598:	0000f639 	.word	0x0000f639
    f59c:	0000f639 	.word	0x0000f639
    f5a0:	0000f62b 	.word	0x0000f62b
	case REQ_GET_STATUS:
		/* bit 0 = endpointed halted or not */
		usb_dc_ep_is_stalled(ep, &data[0]);
    f5a4:	7ffb      	ldrb	r3, [r7, #31]
    f5a6:	6a39      	ldr	r1, [r7, #32]
    f5a8:	4618      	mov	r0, r3
    f5aa:	f011 fcd3 	bl	20f54 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    f5ae:	6a3b      	ldr	r3, [r7, #32]
    f5b0:	3301      	adds	r3, #1
    f5b2:	2200      	movs	r2, #0
    f5b4:	701a      	strb	r2, [r3, #0]
		*len = 2;
    f5b6:	68bb      	ldr	r3, [r7, #8]
    f5b8:	2202      	movs	r2, #2
    f5ba:	601a      	str	r2, [r3, #0]
		break;
    f5bc:	e046      	b.n	f64c <usb_handle_std_endpoint_req+0x104>

	case REQ_CLEAR_FEATURE:
		if (sys_le16_to_cpu(setup->wValue) == FEA_ENDPOINT_HALT) {
    f5be:	68fb      	ldr	r3, [r7, #12]
    f5c0:	885b      	ldrh	r3, [r3, #2]
    f5c2:	2b00      	cmp	r3, #0
    f5c4:	d114      	bne.n	f5f0 <usb_handle_std_endpoint_req+0xa8>
			/* clear HALT by unstalling */
			LOG_INF("... EP clear halt %x", ep);
    f5c6:	f010 fba4 	bl	1fd12 <_is_user_context>
    f5ca:	4603      	mov	r3, r0
    f5cc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			usb_dc_ep_clear_stall(ep);
    f5d0:	7ffb      	ldrb	r3, [r7, #31]
    f5d2:	4618      	mov	r0, r3
    f5d4:	f011 fc8a 	bl	20eec <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    f5d8:	4b1f      	ldr	r3, [pc, #124]	; (f658 <usb_handle_std_endpoint_req+0x110>)
    f5da:	69db      	ldr	r3, [r3, #28]
    f5dc:	2b00      	cmp	r3, #0
    f5de:	d032      	beq.n	f646 <usb_handle_std_endpoint_req+0xfe>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    f5e0:	4b1d      	ldr	r3, [pc, #116]	; (f658 <usb_handle_std_endpoint_req+0x110>)
    f5e2:	69db      	ldr	r3, [r3, #28]
    f5e4:	f107 021f 	add.w	r2, r7, #31
    f5e8:	4611      	mov	r1, r2
    f5ea:	2009      	movs	r0, #9
    f5ec:	4798      	blx	r3
			}
			break;
    f5ee:	e02a      	b.n	f646 <usb_handle_std_endpoint_req+0xfe>
		}
		/* only ENDPOINT_HALT defined for endpoints */
		return false;
    f5f0:	2300      	movs	r3, #0
    f5f2:	e02c      	b.n	f64e <usb_handle_std_endpoint_req+0x106>

	case REQ_SET_FEATURE:
		if (sys_le16_to_cpu(setup->wValue) == FEA_ENDPOINT_HALT) {
    f5f4:	68fb      	ldr	r3, [r7, #12]
    f5f6:	885b      	ldrh	r3, [r3, #2]
    f5f8:	2b00      	cmp	r3, #0
    f5fa:	d114      	bne.n	f626 <usb_handle_std_endpoint_req+0xde>
			/* set HALT by stalling */
			LOG_INF("--- EP SET halt %x", ep);
    f5fc:	f010 fb89 	bl	1fd12 <_is_user_context>
    f600:	4603      	mov	r3, r0
    f602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			usb_dc_ep_set_stall(ep);
    f606:	7ffb      	ldrb	r3, [r7, #31]
    f608:	4618      	mov	r0, r3
    f60a:	f001 fddd 	bl	111c8 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    f60e:	4b12      	ldr	r3, [pc, #72]	; (f658 <usb_handle_std_endpoint_req+0x110>)
    f610:	69db      	ldr	r3, [r3, #28]
    f612:	2b00      	cmp	r3, #0
    f614:	d019      	beq.n	f64a <usb_handle_std_endpoint_req+0x102>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    f616:	4b10      	ldr	r3, [pc, #64]	; (f658 <usb_handle_std_endpoint_req+0x110>)
    f618:	69db      	ldr	r3, [r3, #28]
    f61a:	f107 021f 	add.w	r2, r7, #31
    f61e:	4611      	mov	r1, r2
    f620:	2008      	movs	r0, #8
    f622:	4798      	blx	r3
			}
			break;
    f624:	e011      	b.n	f64a <usb_handle_std_endpoint_req+0x102>
		}
		/* only ENDPOINT_HALT defined for endpoints */
		return false;
    f626:	2300      	movs	r3, #0
    f628:	e011      	b.n	f64e <usb_handle_std_endpoint_req+0x106>

	case REQ_SYNCH_FRAME:
		LOG_DBG("EP req %d not implemented", setup->bRequest);
    f62a:	f010 fb72 	bl	1fd12 <_is_user_context>
    f62e:	4603      	mov	r3, r0
    f630:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		return false;
    f634:	2300      	movs	r3, #0
    f636:	e00a      	b.n	f64e <usb_handle_std_endpoint_req+0x106>

	default:
		LOG_DBG("Illegal EP req %d", setup->bRequest);
    f638:	f010 fb6b 	bl	1fd12 <_is_user_context>
    f63c:	4603      	mov	r3, r0
    f63e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		return false;
    f642:	2300      	movs	r3, #0
    f644:	e003      	b.n	f64e <usb_handle_std_endpoint_req+0x106>
			break;
    f646:	bf00      	nop
    f648:	e000      	b.n	f64c <usb_handle_std_endpoint_req+0x104>
			break;
    f64a:	bf00      	nop
	}

	return true;
    f64c:	2301      	movs	r3, #1
}
    f64e:	4618      	mov	r0, r3
    f650:	3728      	adds	r7, #40	; 0x28
    f652:	46bd      	mov	sp, r7
    f654:	bd80      	pop	{r7, pc}
    f656:	bf00      	nop
    f658:	200029c8 	.word	0x200029c8

0000f65c <usb_handle_standard_request>:
 *
 * @return true if the request was handled successfully
 */
static int usb_handle_standard_request(struct usb_setup_packet *setup,
				       s32_t *len, u8_t **data_buf)
{
    f65c:	b580      	push	{r7, lr}
    f65e:	b086      	sub	sp, #24
    f660:	af00      	add	r7, sp, #0
    f662:	60f8      	str	r0, [r7, #12]
    f664:	60b9      	str	r1, [r7, #8]
    f666:	607a      	str	r2, [r7, #4]
	int rc = 0;
    f668:	2300      	movs	r3, #0
    f66a:	617b      	str	r3, [r7, #20]

	if (!usb_handle_bos(setup, len, data_buf)) {
		return 0;
	}

	if (!usb_handle_os_desc(setup, len, data_buf)) {
    f66c:	687a      	ldr	r2, [r7, #4]
    f66e:	68b9      	ldr	r1, [r7, #8]
    f670:	68f8      	ldr	r0, [r7, #12]
    f672:	f000 fc8b 	bl	ff8c <usb_handle_os_desc>
    f676:	4603      	mov	r3, r0
    f678:	2b00      	cmp	r3, #0
    f67a:	d101      	bne.n	f680 <usb_handle_standard_request+0x24>
		return 0;
    f67c:	2300      	movs	r3, #0
    f67e:	e04f      	b.n	f720 <usb_handle_standard_request+0xc4>
	}

	/* try the custom request handler first */
	if (usb_dev.custom_req_handler &&
    f680:	4b29      	ldr	r3, [pc, #164]	; (f728 <usb_handle_standard_request+0xcc>)
    f682:	695b      	ldr	r3, [r3, #20]
    f684:	2b00      	cmp	r3, #0
    f686:	d00a      	beq.n	f69e <usb_handle_standard_request+0x42>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    f688:	4b27      	ldr	r3, [pc, #156]	; (f728 <usb_handle_standard_request+0xcc>)
    f68a:	695b      	ldr	r3, [r3, #20]
    f68c:	687a      	ldr	r2, [r7, #4]
    f68e:	68b9      	ldr	r1, [r7, #8]
    f690:	68f8      	ldr	r0, [r7, #12]
    f692:	4798      	blx	r3
    f694:	4603      	mov	r3, r0
	if (usb_dev.custom_req_handler &&
    f696:	2b00      	cmp	r3, #0
    f698:	d101      	bne.n	f69e <usb_handle_standard_request+0x42>
		return 0;
    f69a:	2300      	movs	r3, #0
    f69c:	e040      	b.n	f720 <usb_handle_standard_request+0xc4>
	}

	switch (REQTYPE_GET_RECIP(setup->bmRequestType)) {
    f69e:	68fb      	ldr	r3, [r7, #12]
    f6a0:	781b      	ldrb	r3, [r3, #0]
    f6a2:	f003 031f 	and.w	r3, r3, #31
    f6a6:	2b01      	cmp	r3, #1
    f6a8:	d012      	beq.n	f6d0 <usb_handle_standard_request+0x74>
    f6aa:	2b02      	cmp	r3, #2
    f6ac:	d01f      	beq.n	f6ee <usb_handle_standard_request+0x92>
    f6ae:	2b00      	cmp	r3, #0
    f6b0:	d12c      	bne.n	f70c <usb_handle_standard_request+0xb0>
	case REQTYPE_RECIP_DEVICE:
		if (usb_handle_std_device_req(setup, len, data_buf) == false)
    f6b2:	687a      	ldr	r2, [r7, #4]
    f6b4:	68b9      	ldr	r1, [r7, #8]
    f6b6:	68f8      	ldr	r0, [r7, #12]
    f6b8:	f7ff fe0c 	bl	f2d4 <usb_handle_std_device_req>
    f6bc:	4603      	mov	r3, r0
    f6be:	f083 0301 	eor.w	r3, r3, #1
    f6c2:	b2db      	uxtb	r3, r3
    f6c4:	2b00      	cmp	r3, #0
    f6c6:	d025      	beq.n	f714 <usb_handle_standard_request+0xb8>
			rc = -EINVAL;
    f6c8:	f06f 0315 	mvn.w	r3, #21
    f6cc:	617b      	str	r3, [r7, #20]
		break;
    f6ce:	e021      	b.n	f714 <usb_handle_standard_request+0xb8>
	case REQTYPE_RECIP_INTERFACE:
		if (usb_handle_std_interface_req(setup, len, data_buf) == false)
    f6d0:	687a      	ldr	r2, [r7, #4]
    f6d2:	68b9      	ldr	r1, [r7, #8]
    f6d4:	68f8      	ldr	r0, [r7, #12]
    f6d6:	f7ff fedd 	bl	f494 <usb_handle_std_interface_req>
    f6da:	4603      	mov	r3, r0
    f6dc:	f083 0301 	eor.w	r3, r3, #1
    f6e0:	b2db      	uxtb	r3, r3
    f6e2:	2b00      	cmp	r3, #0
    f6e4:	d018      	beq.n	f718 <usb_handle_standard_request+0xbc>
			rc = -EINVAL;
    f6e6:	f06f 0315 	mvn.w	r3, #21
    f6ea:	617b      	str	r3, [r7, #20]
		break;
    f6ec:	e014      	b.n	f718 <usb_handle_standard_request+0xbc>
	case REQTYPE_RECIP_ENDPOINT:
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false)
    f6ee:	687a      	ldr	r2, [r7, #4]
    f6f0:	68b9      	ldr	r1, [r7, #8]
    f6f2:	68f8      	ldr	r0, [r7, #12]
    f6f4:	f7ff ff28 	bl	f548 <usb_handle_std_endpoint_req>
    f6f8:	4603      	mov	r3, r0
    f6fa:	f083 0301 	eor.w	r3, r3, #1
    f6fe:	b2db      	uxtb	r3, r3
    f700:	2b00      	cmp	r3, #0
    f702:	d00b      	beq.n	f71c <usb_handle_standard_request+0xc0>
			rc = -EINVAL;
    f704:	f06f 0315 	mvn.w	r3, #21
    f708:	617b      	str	r3, [r7, #20]
		break;
    f70a:	e007      	b.n	f71c <usb_handle_standard_request+0xc0>
	default:
		rc = -EINVAL;
    f70c:	f06f 0315 	mvn.w	r3, #21
    f710:	617b      	str	r3, [r7, #20]
    f712:	e004      	b.n	f71e <usb_handle_standard_request+0xc2>
		break;
    f714:	bf00      	nop
    f716:	e002      	b.n	f71e <usb_handle_standard_request+0xc2>
		break;
    f718:	bf00      	nop
    f71a:	e000      	b.n	f71e <usb_handle_standard_request+0xc2>
		break;
    f71c:	bf00      	nop
	}
	return rc;
    f71e:	697b      	ldr	r3, [r7, #20]
}
    f720:	4618      	mov	r0, r3
    f722:	3718      	adds	r7, #24
    f724:	46bd      	mov	sp, r7
    f726:	bd80      	pop	{r7, pc}
    f728:	200029c8 	.word	0x200029c8

0000f72c <usb_handle_vendor_request>:

static int usb_handle_vendor_request(struct usb_setup_packet *setup,
				     s32_t *len, u8_t **data_buf)
{
    f72c:	b580      	push	{r7, lr}
    f72e:	b086      	sub	sp, #24
    f730:	af00      	add	r7, sp, #0
    f732:	60f8      	str	r0, [r7, #12]
    f734:	60b9      	str	r1, [r7, #8]
    f736:	607a      	str	r2, [r7, #4]
	LOG_DBG("");
    f738:	f010 faeb 	bl	1fd12 <_is_user_context>
    f73c:	4603      	mov	r3, r0
    f73e:	75fb      	strb	r3, [r7, #23]

	if (usb_os_desc_enabled()) {
    f740:	f000 fc92 	bl	10068 <usb_os_desc_enabled>
    f744:	4603      	mov	r3, r0
    f746:	2b00      	cmp	r3, #0
    f748:	d009      	beq.n	f75e <usb_handle_vendor_request+0x32>
		if (!usb_handle_os_desc_feature(setup, len, data_buf)) {
    f74a:	687a      	ldr	r2, [r7, #4]
    f74c:	68b9      	ldr	r1, [r7, #8]
    f74e:	68f8      	ldr	r0, [r7, #12]
    f750:	f000 fc52 	bl	fff8 <usb_handle_os_desc_feature>
    f754:	4603      	mov	r3, r0
    f756:	2b00      	cmp	r3, #0
    f758:	d101      	bne.n	f75e <usb_handle_vendor_request+0x32>
			return 0;
    f75a:	2300      	movs	r3, #0
    f75c:	e00d      	b.n	f77a <usb_handle_vendor_request+0x4e>
		}
	}

	if (usb_dev.vendor_req_handler) {
    f75e:	4b09      	ldr	r3, [pc, #36]	; (f784 <usb_handle_vendor_request+0x58>)
    f760:	699b      	ldr	r3, [r3, #24]
    f762:	2b00      	cmp	r3, #0
    f764:	d007      	beq.n	f776 <usb_handle_vendor_request+0x4a>
		return usb_dev.vendor_req_handler(setup, len, data_buf);
    f766:	4b07      	ldr	r3, [pc, #28]	; (f784 <usb_handle_vendor_request+0x58>)
    f768:	699b      	ldr	r3, [r3, #24]
    f76a:	687a      	ldr	r2, [r7, #4]
    f76c:	68b9      	ldr	r1, [r7, #8]
    f76e:	68f8      	ldr	r0, [r7, #12]
    f770:	4798      	blx	r3
    f772:	4603      	mov	r3, r0
    f774:	e001      	b.n	f77a <usb_handle_vendor_request+0x4e>
	}

	return -ENOTSUP;
    f776:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    f77a:	4618      	mov	r0, r3
    f77c:	3718      	adds	r7, #24
    f77e:	46bd      	mov	sp, r7
    f780:	bd80      	pop	{r7, pc}
    f782:	bf00      	nop
    f784:	200029c8 	.word	0x200029c8

0000f788 <usb_register_custom_req_handler>:
 * specification.
 *
 * @param [in] handler Callback function pointer
 */
static void usb_register_custom_req_handler(usb_request_handler handler)
{
    f788:	b480      	push	{r7}
    f78a:	b083      	sub	sp, #12
    f78c:	af00      	add	r7, sp, #0
    f78e:	6078      	str	r0, [r7, #4]
	usb_dev.custom_req_handler = handler;
    f790:	4a03      	ldr	r2, [pc, #12]	; (f7a0 <usb_register_custom_req_handler+0x18>)
    f792:	687b      	ldr	r3, [r7, #4]
    f794:	6153      	str	r3, [r2, #20]
}
    f796:	bf00      	nop
    f798:	370c      	adds	r7, #12
    f79a:	46bd      	mov	sp, r7
    f79c:	bc80      	pop	{r7}
    f79e:	4770      	bx	lr
    f7a0:	200029c8 	.word	0x200029c8

0000f7a4 <usb_register_status_callback>:
 * is used to report changes in the status of the device controller.
 *
 * @param [in] cb Callback function pointer
 */
static void usb_register_status_callback(usb_dc_status_callback cb)
{
    f7a4:	b480      	push	{r7}
    f7a6:	b083      	sub	sp, #12
    f7a8:	af00      	add	r7, sp, #0
    f7aa:	6078      	str	r0, [r7, #4]
	usb_dev.status_callback = cb;
    f7ac:	4a03      	ldr	r2, [pc, #12]	; (f7bc <usb_register_status_callback+0x18>)
    f7ae:	687b      	ldr	r3, [r7, #4]
    f7b0:	61d3      	str	r3, [r2, #28]
}
    f7b2:	bf00      	nop
    f7b4:	370c      	adds	r7, #12
    f7b6:	46bd      	mov	sp, r7
    f7b8:	bc80      	pop	{r7}
    f7ba:	4770      	bx	lr
    f7bc:	200029c8 	.word	0x200029c8

0000f7c0 <forward_status_cb>:

static void forward_status_cb(enum usb_dc_status_code status, const u8_t *param)
{
    f7c0:	b580      	push	{r7, lr}
    f7c2:	b086      	sub	sp, #24
    f7c4:	af00      	add	r7, sp, #0
    f7c6:	4603      	mov	r3, r0
    f7c8:	6039      	str	r1, [r7, #0]
    f7ca:	71fb      	strb	r3, [r7, #7]
	size_t size = (__usb_data_end - __usb_data_start);
    f7cc:	4a13      	ldr	r2, [pc, #76]	; (f81c <forward_status_cb+0x5c>)
    f7ce:	4b14      	ldr	r3, [pc, #80]	; (f820 <forward_status_cb+0x60>)
    f7d0:	1ad3      	subs	r3, r2, r3
    f7d2:	109b      	asrs	r3, r3, #2
    f7d4:	4a13      	ldr	r2, [pc, #76]	; (f824 <forward_status_cb+0x64>)
    f7d6:	fb02 f303 	mul.w	r3, r2, r3
    f7da:	613b      	str	r3, [r7, #16]

	for (size_t i = 0; i < size; i++) {
    f7dc:	2300      	movs	r3, #0
    f7de:	617b      	str	r3, [r7, #20]
    f7e0:	e013      	b.n	f80a <forward_status_cb+0x4a>
		struct usb_cfg_data *cfg = &__usb_data_start[i];
    f7e2:	697b      	ldr	r3, [r7, #20]
    f7e4:	222c      	movs	r2, #44	; 0x2c
    f7e6:	fb02 f303 	mul.w	r3, r2, r3
    f7ea:	4a0d      	ldr	r2, [pc, #52]	; (f820 <forward_status_cb+0x60>)
    f7ec:	4413      	add	r3, r2
    f7ee:	60fb      	str	r3, [r7, #12]

		if (cfg->cb_usb_status) {
    f7f0:	68fb      	ldr	r3, [r7, #12]
    f7f2:	68db      	ldr	r3, [r3, #12]
    f7f4:	2b00      	cmp	r3, #0
    f7f6:	d005      	beq.n	f804 <forward_status_cb+0x44>
			cfg->cb_usb_status(cfg, status, param);
    f7f8:	68fb      	ldr	r3, [r7, #12]
    f7fa:	68db      	ldr	r3, [r3, #12]
    f7fc:	79f9      	ldrb	r1, [r7, #7]
    f7fe:	683a      	ldr	r2, [r7, #0]
    f800:	68f8      	ldr	r0, [r7, #12]
    f802:	4798      	blx	r3
	for (size_t i = 0; i < size; i++) {
    f804:	697b      	ldr	r3, [r7, #20]
    f806:	3301      	adds	r3, #1
    f808:	617b      	str	r3, [r7, #20]
    f80a:	697a      	ldr	r2, [r7, #20]
    f80c:	693b      	ldr	r3, [r7, #16]
    f80e:	429a      	cmp	r2, r3
    f810:	d3e7      	bcc.n	f7e2 <forward_status_cb+0x22>
		}
	}
}
    f812:	bf00      	nop
    f814:	3718      	adds	r7, #24
    f816:	46bd      	mov	sp, r7
    f818:	bd80      	pop	{r7, pc}
    f81a:	bf00      	nop
    f81c:	20010008 	.word	0x20010008
    f820:	2000ffdc 	.word	0x2000ffdc
    f824:	ba2e8ba3 	.word	0xba2e8ba3

0000f828 <usb_set_config>:

	return 0;
}

int usb_set_config(struct usb_cfg_data *config)
{
    f828:	b580      	push	{r7, lr}
    f82a:	b082      	sub	sp, #8
    f82c:	af00      	add	r7, sp, #0
    f82e:	6078      	str	r0, [r7, #4]
	if (!config)
    f830:	687b      	ldr	r3, [r7, #4]
    f832:	2b00      	cmp	r3, #0
    f834:	d102      	bne.n	f83c <usb_set_config+0x14>
		return -EINVAL;
    f836:	f06f 0315 	mvn.w	r3, #21
    f83a:	e037      	b.n	f8ac <usb_set_config+0x84>

	/* register descriptors */
	usb_register_descriptors(config->usb_device_description);
    f83c:	687b      	ldr	r3, [r7, #4]
    f83e:	681b      	ldr	r3, [r3, #0]
    f840:	4618      	mov	r0, r3
    f842:	f7ff fbcd 	bl	efe0 <usb_register_descriptors>

	/* register standard request handler */
	usb_register_request_handler(REQTYPE_TYPE_STANDARD,
    f846:	4a1b      	ldr	r2, [pc, #108]	; (f8b4 <usb_set_config+0x8c>)
    f848:	491b      	ldr	r1, [pc, #108]	; (f8b8 <usb_set_config+0x90>)
    f84a:	2000      	movs	r0, #0
    f84c:	f7ff fbac 	bl	efa8 <usb_register_request_handler>
				     usb_handle_standard_request,
				     usb_dev.std_req_data);

	/* register class request handlers for each interface*/
	if (config->interface.class_handler != NULL) {
    f850:	687b      	ldr	r3, [r7, #4]
    f852:	691b      	ldr	r3, [r3, #16]
    f854:	2b00      	cmp	r3, #0
    f856:	d007      	beq.n	f868 <usb_set_config+0x40>
		usb_register_request_handler(REQTYPE_TYPE_CLASS,
    f858:	687b      	ldr	r3, [r7, #4]
    f85a:	6919      	ldr	r1, [r3, #16]
    f85c:	687b      	ldr	r3, [r7, #4]
    f85e:	69db      	ldr	r3, [r3, #28]
    f860:	461a      	mov	r2, r3
    f862:	2001      	movs	r0, #1
    f864:	f7ff fba0 	bl	efa8 <usb_register_request_handler>
					     config->interface.class_handler,
					     config->interface.payload_data);
	}

	/* register vendor request handler */
	if (config->interface.vendor_handler || usb_os_desc_enabled()) {
    f868:	687b      	ldr	r3, [r7, #4]
    f86a:	695b      	ldr	r3, [r3, #20]
    f86c:	2b00      	cmp	r3, #0
    f86e:	d104      	bne.n	f87a <usb_set_config+0x52>
    f870:	f000 fbfa 	bl	10068 <usb_os_desc_enabled>
    f874:	4603      	mov	r3, r0
    f876:	2b00      	cmp	r3, #0
    f878:	d00e      	beq.n	f898 <usb_set_config+0x70>
		usb_register_request_handler(REQTYPE_TYPE_VENDOR,
    f87a:	687b      	ldr	r3, [r7, #4]
    f87c:	6a1b      	ldr	r3, [r3, #32]
    f87e:	461a      	mov	r2, r3
    f880:	490e      	ldr	r1, [pc, #56]	; (f8bc <usb_set_config+0x94>)
    f882:	2002      	movs	r0, #2
    f884:	f7ff fb90 	bl	efa8 <usb_register_request_handler>
					     usb_handle_vendor_request,
					     config->interface.vendor_data);

		if (config->interface.vendor_handler) {
    f888:	687b      	ldr	r3, [r7, #4]
    f88a:	695b      	ldr	r3, [r3, #20]
    f88c:	2b00      	cmp	r3, #0
    f88e:	d003      	beq.n	f898 <usb_set_config+0x70>
			usb_dev.vendor_req_handler =
				config->interface.vendor_handler;
    f890:	687b      	ldr	r3, [r7, #4]
    f892:	695b      	ldr	r3, [r3, #20]
			usb_dev.vendor_req_handler =
    f894:	4a0a      	ldr	r2, [pc, #40]	; (f8c0 <usb_set_config+0x98>)
    f896:	6193      	str	r3, [r2, #24]
		}
	}

	/* register class request handlers for each interface*/
	if (config->interface.custom_handler != NULL) {
    f898:	687b      	ldr	r3, [r7, #4]
    f89a:	699b      	ldr	r3, [r3, #24]
    f89c:	2b00      	cmp	r3, #0
    f89e:	d004      	beq.n	f8aa <usb_set_config+0x82>
		usb_register_custom_req_handler(
    f8a0:	687b      	ldr	r3, [r7, #4]
    f8a2:	699b      	ldr	r3, [r3, #24]
    f8a4:	4618      	mov	r0, r3
    f8a6:	f7ff ff6f 	bl	f788 <usb_register_custom_req_handler>
		    config->interface.custom_handler);
	}

	return 0;
    f8aa:	2300      	movs	r3, #0
}
    f8ac:	4618      	mov	r0, r3
    f8ae:	3708      	adds	r7, #8
    f8b0:	46bd      	mov	sp, r7
    f8b2:	bd80      	pop	{r7, pc}
    f8b4:	20002a0c 	.word	0x20002a0c
    f8b8:	0000f65d 	.word	0x0000f65d
    f8bc:	0000f72d 	.word	0x0000f72d
    f8c0:	200029c8 	.word	0x200029c8

0000f8c4 <usb_enable>:

	return 0;
}

int usb_enable(struct usb_cfg_data *config)
{
    f8c4:	b580      	push	{r7, lr}
    f8c6:	b086      	sub	sp, #24
    f8c8:	af00      	add	r7, sp, #0
    f8ca:	6078      	str	r0, [r7, #4]
	int ret;
	u32_t i;
	struct usb_dc_ep_cfg_data ep0_cfg;

	if (true == usb_dev.enabled) {
    f8cc:	4b5b      	ldr	r3, [pc, #364]	; (fa3c <usb_enable+0x178>)
    f8ce:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    f8d2:	2b00      	cmp	r3, #0
    f8d4:	d001      	beq.n	f8da <usb_enable+0x16>
		return 0;
    f8d6:	2300      	movs	r3, #0
    f8d8:	e0ab      	b.n	fa32 <usb_enable+0x16e>
	}

	/* Enable VBUS if needed */
	ret = usb_vbus_set(true);
    f8da:	2001      	movs	r0, #1
    f8dc:	f010 fa82 	bl	1fde4 <usb_vbus_set>
    f8e0:	6138      	str	r0, [r7, #16]
	if (ret < 0)
    f8e2:	693b      	ldr	r3, [r7, #16]
    f8e4:	2b00      	cmp	r3, #0
    f8e6:	da01      	bge.n	f8ec <usb_enable+0x28>
		return ret;
    f8e8:	693b      	ldr	r3, [r7, #16]
    f8ea:	e0a2      	b.n	fa32 <usb_enable+0x16e>

	usb_register_status_callback(forward_status_cb);
    f8ec:	4854      	ldr	r0, [pc, #336]	; (fa40 <usb_enable+0x17c>)
    f8ee:	f7ff ff59 	bl	f7a4 <usb_register_status_callback>
	ret = usb_dc_set_status_callback(forward_status_cb);
    f8f2:	4853      	ldr	r0, [pc, #332]	; (fa40 <usb_enable+0x17c>)
    f8f4:	f011 fcd1 	bl	2129a <usb_dc_set_status_callback>
    f8f8:	6138      	str	r0, [r7, #16]
	if (ret < 0) {
    f8fa:	693b      	ldr	r3, [r7, #16]
    f8fc:	2b00      	cmp	r3, #0
    f8fe:	da01      	bge.n	f904 <usb_enable+0x40>
		return ret;
    f900:	693b      	ldr	r3, [r7, #16]
    f902:	e096      	b.n	fa32 <usb_enable+0x16e>
	}

	ret = usb_dc_attach();
    f904:	f001 fc0a 	bl	1111c <usb_dc_attach>
    f908:	6138      	str	r0, [r7, #16]
	if (ret < 0)
    f90a:	693b      	ldr	r3, [r7, #16]
    f90c:	2b00      	cmp	r3, #0
    f90e:	da01      	bge.n	f914 <usb_enable+0x50>
		return ret;
    f910:	693b      	ldr	r3, [r7, #16]
    f912:	e08e      	b.n	fa32 <usb_enable+0x16e>

	/* Configure control EP */
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    f914:	2340      	movs	r3, #64	; 0x40
    f916:	817b      	strh	r3, [r7, #10]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    f918:	2300      	movs	r3, #0
    f91a:	733b      	strb	r3, [r7, #12]

	ep0_cfg.ep_addr = USB_CONTROL_OUT_EP0;
    f91c:	2300      	movs	r3, #0
    f91e:	723b      	strb	r3, [r7, #8]
	ret = usb_dc_ep_configure(&ep0_cfg);
    f920:	f107 0308 	add.w	r3, r7, #8
    f924:	4618      	mov	r0, r3
    f926:	f011 fa97 	bl	20e58 <usb_dc_ep_configure>
    f92a:	6138      	str	r0, [r7, #16]
	if (ret < 0)
    f92c:	693b      	ldr	r3, [r7, #16]
    f92e:	2b00      	cmp	r3, #0
    f930:	da01      	bge.n	f936 <usb_enable+0x72>
		return ret;
    f932:	693b      	ldr	r3, [r7, #16]
    f934:	e07d      	b.n	fa32 <usb_enable+0x16e>

	ep0_cfg.ep_addr = USB_CONTROL_IN_EP0;
    f936:	2380      	movs	r3, #128	; 0x80
    f938:	723b      	strb	r3, [r7, #8]
	ret = usb_dc_ep_configure(&ep0_cfg);
    f93a:	f107 0308 	add.w	r3, r7, #8
    f93e:	4618      	mov	r0, r3
    f940:	f011 fa8a 	bl	20e58 <usb_dc_ep_configure>
    f944:	6138      	str	r0, [r7, #16]
	if (ret < 0)
    f946:	693b      	ldr	r3, [r7, #16]
    f948:	2b00      	cmp	r3, #0
    f94a:	da01      	bge.n	f950 <usb_enable+0x8c>
		return ret;
    f94c:	693b      	ldr	r3, [r7, #16]
    f94e:	e070      	b.n	fa32 <usb_enable+0x16e>

	/*register endpoint 0 handlers*/
	ret = usb_dc_ep_set_callback(USB_CONTROL_OUT_EP0,
    f950:	493c      	ldr	r1, [pc, #240]	; (fa44 <usb_enable+0x180>)
    f952:	2000      	movs	r0, #0
    f954:	f011 fc7d 	bl	21252 <usb_dc_ep_set_callback>
    f958:	6138      	str	r0, [r7, #16]
	    usb_handle_control_transfer);
	if (ret < 0)
    f95a:	693b      	ldr	r3, [r7, #16]
    f95c:	2b00      	cmp	r3, #0
    f95e:	da01      	bge.n	f964 <usb_enable+0xa0>
		return ret;
    f960:	693b      	ldr	r3, [r7, #16]
    f962:	e066      	b.n	fa32 <usb_enable+0x16e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_IN_EP0,
    f964:	4937      	ldr	r1, [pc, #220]	; (fa44 <usb_enable+0x180>)
    f966:	2080      	movs	r0, #128	; 0x80
    f968:	f011 fc73 	bl	21252 <usb_dc_ep_set_callback>
    f96c:	6138      	str	r0, [r7, #16]
	    usb_handle_control_transfer);
	if (ret < 0)
    f96e:	693b      	ldr	r3, [r7, #16]
    f970:	2b00      	cmp	r3, #0
    f972:	da01      	bge.n	f978 <usb_enable+0xb4>
		return ret;
    f974:	693b      	ldr	r3, [r7, #16]
    f976:	e05c      	b.n	fa32 <usb_enable+0x16e>

	/*register endpoint handlers*/
	for (i = 0U; i < config->num_endpoints; i++) {
    f978:	2300      	movs	r3, #0
    f97a:	617b      	str	r3, [r7, #20]
    f97c:	e017      	b.n	f9ae <usb_enable+0xea>
		ret = usb_dc_ep_set_callback(config->endpoint[i].ep_addr,
    f97e:	687b      	ldr	r3, [r7, #4]
    f980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f982:	697b      	ldr	r3, [r7, #20]
    f984:	00db      	lsls	r3, r3, #3
    f986:	4413      	add	r3, r2
    f988:	7918      	ldrb	r0, [r3, #4]
		    config->endpoint[i].ep_cb);
    f98a:	687b      	ldr	r3, [r7, #4]
    f98c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f98e:	697b      	ldr	r3, [r7, #20]
    f990:	00db      	lsls	r3, r3, #3
    f992:	4413      	add	r3, r2
		ret = usb_dc_ep_set_callback(config->endpoint[i].ep_addr,
    f994:	681b      	ldr	r3, [r3, #0]
    f996:	4619      	mov	r1, r3
    f998:	f011 fc5b 	bl	21252 <usb_dc_ep_set_callback>
    f99c:	6138      	str	r0, [r7, #16]
		if (ret < 0)
    f99e:	693b      	ldr	r3, [r7, #16]
    f9a0:	2b00      	cmp	r3, #0
    f9a2:	da01      	bge.n	f9a8 <usb_enable+0xe4>
			return ret;
    f9a4:	693b      	ldr	r3, [r7, #16]
    f9a6:	e044      	b.n	fa32 <usb_enable+0x16e>
	for (i = 0U; i < config->num_endpoints; i++) {
    f9a8:	697b      	ldr	r3, [r7, #20]
    f9aa:	3301      	adds	r3, #1
    f9ac:	617b      	str	r3, [r7, #20]
    f9ae:	687b      	ldr	r3, [r7, #4]
    f9b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    f9b4:	461a      	mov	r2, r3
    f9b6:	697b      	ldr	r3, [r7, #20]
    f9b8:	4293      	cmp	r3, r2
    f9ba:	d3e0      	bcc.n	f97e <usb_enable+0xba>
	}

	/* init transfer slots */
	for (i = 0U; i < MAX_NUM_TRANSFERS; i++) {
    f9bc:	2300      	movs	r3, #0
    f9be:	617b      	str	r3, [r7, #20]
    f9c0:	e01d      	b.n	f9fe <usb_enable+0x13a>
		k_work_init(&usb_dev.transfer[i].work, usb_transfer_work);
    f9c2:	697a      	ldr	r2, [r7, #20]
    f9c4:	4613      	mov	r3, r2
    f9c6:	011b      	lsls	r3, r3, #4
    f9c8:	4413      	add	r3, r2
    f9ca:	009b      	lsls	r3, r3, #2
    f9cc:	3380      	adds	r3, #128	; 0x80
    f9ce:	4a1b      	ldr	r2, [pc, #108]	; (fa3c <usb_enable+0x178>)
    f9d0:	4413      	add	r3, r2
    f9d2:	3304      	adds	r3, #4
    f9d4:	491c      	ldr	r1, [pc, #112]	; (fa48 <usb_enable+0x184>)
    f9d6:	4618      	mov	r0, r3
    f9d8:	f010 f9a2 	bl	1fd20 <k_work_init>
		k_sem_init(&usb_dev.transfer[i].sem, 1, 1);
    f9dc:	697a      	ldr	r2, [r7, #20]
    f9de:	4613      	mov	r3, r2
    f9e0:	011b      	lsls	r3, r3, #4
    f9e2:	4413      	add	r3, r2
    f9e4:	009b      	lsls	r3, r3, #2
    f9e6:	3368      	adds	r3, #104	; 0x68
    f9e8:	4a14      	ldr	r2, [pc, #80]	; (fa3c <usb_enable+0x178>)
    f9ea:	4413      	add	r3, r2
    f9ec:	3304      	adds	r3, #4
    f9ee:	2201      	movs	r2, #1
    f9f0:	2101      	movs	r1, #1
    f9f2:	4618      	mov	r0, r3
    f9f4:	f010 f9c1 	bl	1fd7a <k_sem_init>
	for (i = 0U; i < MAX_NUM_TRANSFERS; i++) {
    f9f8:	697b      	ldr	r3, [r7, #20]
    f9fa:	3301      	adds	r3, #1
    f9fc:	617b      	str	r3, [r7, #20]
    f9fe:	697b      	ldr	r3, [r7, #20]
    fa00:	2b03      	cmp	r3, #3
    fa02:	d9de      	bls.n	f9c2 <usb_enable+0xfe>
	}

	/* enable control EP */
	ret = usb_dc_ep_enable(USB_CONTROL_OUT_EP0);
    fa04:	2000      	movs	r0, #0
    fa06:	f011 fada 	bl	20fbe <usb_dc_ep_enable>
    fa0a:	6138      	str	r0, [r7, #16]
	if (ret < 0)
    fa0c:	693b      	ldr	r3, [r7, #16]
    fa0e:	2b00      	cmp	r3, #0
    fa10:	da01      	bge.n	fa16 <usb_enable+0x152>
		return ret;
    fa12:	693b      	ldr	r3, [r7, #16]
    fa14:	e00d      	b.n	fa32 <usb_enable+0x16e>

	ret = usb_dc_ep_enable(USB_CONTROL_IN_EP0);
    fa16:	2080      	movs	r0, #128	; 0x80
    fa18:	f011 fad1 	bl	20fbe <usb_dc_ep_enable>
    fa1c:	6138      	str	r0, [r7, #16]
	if (ret < 0)
    fa1e:	693b      	ldr	r3, [r7, #16]
    fa20:	2b00      	cmp	r3, #0
    fa22:	da01      	bge.n	fa28 <usb_enable+0x164>
		return ret;
    fa24:	693b      	ldr	r3, [r7, #16]
    fa26:	e004      	b.n	fa32 <usb_enable+0x16e>

	usb_dev.enabled = true;
    fa28:	4b04      	ldr	r3, [pc, #16]	; (fa3c <usb_enable+0x178>)
    fa2a:	2201      	movs	r2, #1
    fa2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	return 0;
    fa30:	2300      	movs	r3, #0
}
    fa32:	4618      	mov	r0, r3
    fa34:	3718      	adds	r7, #24
    fa36:	46bd      	mov	sp, r7
    fa38:	bd80      	pop	{r7, pc}
    fa3a:	bf00      	nop
    fa3c:	200029c8 	.word	0x200029c8
    fa40:	0000f7c1 	.word	0x0000f7c1
    fa44:	0000ed8d 	.word	0x0000ed8d
    fa48:	0001fdfb 	.word	0x0001fdfb

0000fa4c <usb_ep_get_transfer>:
	return usb_dc_ep_read_continue(ep);
}

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(u8_t ep)
{
    fa4c:	b480      	push	{r7}
    fa4e:	b085      	sub	sp, #20
    fa50:	af00      	add	r7, sp, #0
    fa52:	4603      	mov	r3, r0
    fa54:	71fb      	strb	r3, [r7, #7]
	int i;

	for (i = 0; i < ARRAY_SIZE(usb_dev.transfer); i++) {
    fa56:	2300      	movs	r3, #0
    fa58:	60fb      	str	r3, [r7, #12]
    fa5a:	e017      	b.n	fa8c <usb_ep_get_transfer+0x40>
		if (usb_dev.transfer[i].ep == ep) {
    fa5c:	4910      	ldr	r1, [pc, #64]	; (faa0 <usb_ep_get_transfer+0x54>)
    fa5e:	68fa      	ldr	r2, [r7, #12]
    fa60:	4613      	mov	r3, r2
    fa62:	011b      	lsls	r3, r3, #4
    fa64:	4413      	add	r3, r2
    fa66:	009b      	lsls	r3, r3, #2
    fa68:	440b      	add	r3, r1
    fa6a:	3350      	adds	r3, #80	; 0x50
    fa6c:	781b      	ldrb	r3, [r3, #0]
    fa6e:	79fa      	ldrb	r2, [r7, #7]
    fa70:	429a      	cmp	r2, r3
    fa72:	d108      	bne.n	fa86 <usb_ep_get_transfer+0x3a>
			return &usb_dev.transfer[i];
    fa74:	68fa      	ldr	r2, [r7, #12]
    fa76:	4613      	mov	r3, r2
    fa78:	011b      	lsls	r3, r3, #4
    fa7a:	4413      	add	r3, r2
    fa7c:	009b      	lsls	r3, r3, #2
    fa7e:	3350      	adds	r3, #80	; 0x50
    fa80:	4a07      	ldr	r2, [pc, #28]	; (faa0 <usb_ep_get_transfer+0x54>)
    fa82:	4413      	add	r3, r2
    fa84:	e006      	b.n	fa94 <usb_ep_get_transfer+0x48>
	for (i = 0; i < ARRAY_SIZE(usb_dev.transfer); i++) {
    fa86:	68fb      	ldr	r3, [r7, #12]
    fa88:	3301      	adds	r3, #1
    fa8a:	60fb      	str	r3, [r7, #12]
    fa8c:	68fb      	ldr	r3, [r7, #12]
    fa8e:	2b03      	cmp	r3, #3
    fa90:	d9e4      	bls.n	fa5c <usb_ep_get_transfer+0x10>
		}
	}

	return NULL;
    fa92:	2300      	movs	r3, #0
}
    fa94:	4618      	mov	r0, r3
    fa96:	3714      	adds	r7, #20
    fa98:	46bd      	mov	sp, r7
    fa9a:	bc80      	pop	{r7}
    fa9c:	4770      	bx	lr
    fa9e:	bf00      	nop
    faa0:	200029c8 	.word	0x200029c8

0000faa4 <usb_transfer>:
	}
}

int usb_transfer(u8_t ep, u8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    faa4:	b580      	push	{r7, lr}
    faa6:	b092      	sub	sp, #72	; 0x48
    faa8:	af00      	add	r7, sp, #0
    faaa:	60b9      	str	r1, [r7, #8]
    faac:	607a      	str	r2, [r7, #4]
    faae:	603b      	str	r3, [r7, #0]
    fab0:	4603      	mov	r3, r0
    fab2:	73fb      	strb	r3, [r7, #15]
	struct usb_transfer_data *trans = NULL;
    fab4:	2300      	movs	r3, #0
    fab6:	647b      	str	r3, [r7, #68]	; 0x44
	int i, key, ret = 0;
    fab8:	2300      	movs	r3, #0
    faba:	63bb      	str	r3, [r7, #56]	; 0x38

	LOG_DBG("transfer start, ep=%02x, data=%p, dlen=%d", ep, data, dlen);
    fabc:	f010 f929 	bl	1fd12 <_is_user_context>
    fac0:	4603      	mov	r3, r0
    fac2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	__asm__ volatile(
    fac6:	f04f 0320 	mov.w	r3, #32
    faca:	f3ef 8211 	mrs	r2, BASEPRI
    face:	f383 8811 	msr	BASEPRI, r3
    fad2:	f3bf 8f6f 	isb	sy
    fad6:	633a      	str	r2, [r7, #48]	; 0x30
    fad8:	62fb      	str	r3, [r7, #44]	; 0x2c
	return key;
    fada:	6b3b      	ldr	r3, [r7, #48]	; 0x30

	key = irq_lock();
    fadc:	643b      	str	r3, [r7, #64]	; 0x40

	for (i = 0; i < MAX_NUM_TRANSFERS; i++) {
    fade:	2300      	movs	r3, #0
    fae0:	63fb      	str	r3, [r7, #60]	; 0x3c
    fae2:	e01c      	b.n	fb1e <usb_transfer+0x7a>
		if (!k_sem_take(&usb_dev.transfer[i].sem, K_NO_WAIT)) {
    fae4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    fae6:	4613      	mov	r3, r2
    fae8:	011b      	lsls	r3, r3, #4
    faea:	4413      	add	r3, r2
    faec:	009b      	lsls	r3, r3, #2
    faee:	3368      	adds	r3, #104	; 0x68
    faf0:	4a41      	ldr	r2, [pc, #260]	; (fbf8 <usb_transfer+0x154>)
    faf2:	4413      	add	r3, r2
    faf4:	3304      	adds	r3, #4
    faf6:	2100      	movs	r1, #0
    faf8:	4618      	mov	r0, r3
    fafa:	f010 f94d 	bl	1fd98 <k_sem_take>
    fafe:	4603      	mov	r3, r0
    fb00:	2b00      	cmp	r3, #0
    fb02:	d109      	bne.n	fb18 <usb_transfer+0x74>
			trans = &usb_dev.transfer[i];
    fb04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    fb06:	4613      	mov	r3, r2
    fb08:	011b      	lsls	r3, r3, #4
    fb0a:	4413      	add	r3, r2
    fb0c:	009b      	lsls	r3, r3, #2
    fb0e:	3350      	adds	r3, #80	; 0x50
    fb10:	4a39      	ldr	r2, [pc, #228]	; (fbf8 <usb_transfer+0x154>)
    fb12:	4413      	add	r3, r2
    fb14:	647b      	str	r3, [r7, #68]	; 0x44
			break;
    fb16:	e005      	b.n	fb24 <usb_transfer+0x80>
	for (i = 0; i < MAX_NUM_TRANSFERS; i++) {
    fb18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fb1a:	3301      	adds	r3, #1
    fb1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    fb1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fb20:	2b03      	cmp	r3, #3
    fb22:	dddf      	ble.n	fae4 <usb_transfer+0x40>
		}
	}

	if (!trans) {
    fb24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    fb26:	2b00      	cmp	r3, #0
    fb28:	d108      	bne.n	fb3c <usb_transfer+0x98>
		LOG_ERR("no transfer slot available");
    fb2a:	f010 f8f2 	bl	1fd12 <_is_user_context>
    fb2e:	4603      	mov	r3, r0
    fb30:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		ret = -ENOMEM;
    fb34:	f06f 030b 	mvn.w	r3, #11
    fb38:	63bb      	str	r3, [r7, #56]	; 0x38
		goto done;
    fb3a:	e051      	b.n	fbe0 <usb_transfer+0x13c>
	}

	if (trans->status == -EBUSY) {
    fb3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    fb3e:	685b      	ldr	r3, [r3, #4]
    fb40:	f113 0f10 	cmn.w	r3, #16
    fb44:	d108      	bne.n	fb58 <usb_transfer+0xb4>
		/* A transfer is already ongoing and not completed */
		k_sem_give(&trans->sem);
    fb46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    fb48:	331c      	adds	r3, #28
    fb4a:	4618      	mov	r0, r3
    fb4c:	f010 f932 	bl	1fdb4 <k_sem_give>
		ret = -EBUSY;
    fb50:	f06f 030f 	mvn.w	r3, #15
    fb54:	63bb      	str	r3, [r7, #56]	; 0x38
		goto done;
    fb56:	e043      	b.n	fbe0 <usb_transfer+0x13c>
	}

	/* Configure new transfer */
	trans->ep = ep;
    fb58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    fb5a:	7bfa      	ldrb	r2, [r7, #15]
    fb5c:	701a      	strb	r2, [r3, #0]
	trans->buffer = data;
    fb5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    fb60:	68ba      	ldr	r2, [r7, #8]
    fb62:	609a      	str	r2, [r3, #8]
	trans->bsize = dlen;
    fb64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    fb66:	687a      	ldr	r2, [r7, #4]
    fb68:	60da      	str	r2, [r3, #12]
	trans->tsize = 0;
    fb6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    fb6c:	2200      	movs	r2, #0
    fb6e:	611a      	str	r2, [r3, #16]
	trans->cb = cb;
    fb70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    fb72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    fb74:	615a      	str	r2, [r3, #20]
	trans->flags = flags;
    fb76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    fb78:	683a      	ldr	r2, [r7, #0]
    fb7a:	641a      	str	r2, [r3, #64]	; 0x40
	trans->priv = cb_data;
    fb7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    fb7e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    fb80:	619a      	str	r2, [r3, #24]
	trans->status = -EBUSY;
    fb82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    fb84:	f06f 020f 	mvn.w	r2, #15
    fb88:	605a      	str	r2, [r3, #4]

	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    fb8a:	7bfb      	ldrb	r3, [r7, #15]
    fb8c:	4618      	mov	r0, r3
    fb8e:	f011 fb92 	bl	212b6 <usb_dc_ep_mps>
    fb92:	4603      	mov	r3, r0
    fb94:	2b00      	cmp	r3, #0
    fb96:	d013      	beq.n	fbc0 <usb_transfer+0x11c>
    fb98:	7bfb      	ldrb	r3, [r7, #15]
    fb9a:	4618      	mov	r0, r3
    fb9c:	f011 fb8b 	bl	212b6 <usb_dc_ep_mps>
    fba0:	4603      	mov	r3, r0
    fba2:	461a      	mov	r2, r3
    fba4:	687b      	ldr	r3, [r7, #4]
    fba6:	fbb3 f1f2 	udiv	r1, r3, r2
    fbaa:	fb02 f201 	mul.w	r2, r2, r1
    fbae:	1a9b      	subs	r3, r3, r2
    fbb0:	2b00      	cmp	r3, #0
    fbb2:	d005      	beq.n	fbc0 <usb_transfer+0x11c>
		/* no need to send ZLP since last packet will be a short one */
		trans->flags |= USB_TRANS_NO_ZLP;
    fbb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    fbb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    fbb8:	f043 0204 	orr.w	r2, r3, #4
    fbbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    fbbe:	641a      	str	r2, [r3, #64]	; 0x40
	}

	if (flags & USB_TRANS_WRITE) {
    fbc0:	683b      	ldr	r3, [r7, #0]
    fbc2:	f003 0302 	and.w	r3, r3, #2
    fbc6:	2b00      	cmp	r3, #0
    fbc8:	d005      	beq.n	fbd6 <usb_transfer+0x132>
		/* start writing first chunk */
		k_work_submit(&trans->work);
    fbca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    fbcc:	3334      	adds	r3, #52	; 0x34
    fbce:	4618      	mov	r0, r3
    fbd0:	f7ff f84e 	bl	ec70 <k_work_submit>
    fbd4:	e004      	b.n	fbe0 <usb_transfer+0x13c>
	} else {
		/* ready to read, clear NAK */
		ret = usb_dc_ep_read_continue(ep);
    fbd6:	7bfb      	ldrb	r3, [r7, #15]
    fbd8:	4618      	mov	r0, r3
    fbda:	f011 faa9 	bl	21130 <usb_dc_ep_read_continue>
    fbde:	63b8      	str	r0, [r7, #56]	; 0x38
	}

done:
	irq_unlock(key);
    fbe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    fbe2:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm__ volatile(
    fbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fbe6:	f383 8811 	msr	BASEPRI, r3
    fbea:	f3bf 8f6f 	isb	sy
	return ret;
    fbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    fbf0:	4618      	mov	r0, r3
    fbf2:	3748      	adds	r7, #72	; 0x48
    fbf4:	46bd      	mov	sp, r7
    fbf6:	bd80      	pop	{r7, pc}
    fbf8:	200029c8 	.word	0x200029c8

0000fbfc <usb_transfer_sync>:
	pdata->tsize = size;
	k_sem_give(&pdata->sem);
}

int usb_transfer_sync(u8_t ep, u8_t *data, size_t dlen, unsigned int flags)
{
    fbfc:	b580      	push	{r7, lr}
    fbfe:	b08e      	sub	sp, #56	; 0x38
    fc00:	af02      	add	r7, sp, #8
    fc02:	60b9      	str	r1, [r7, #8]
    fc04:	607a      	str	r2, [r7, #4]
    fc06:	603b      	str	r3, [r7, #0]
    fc08:	4603      	mov	r3, r0
    fc0a:	73fb      	strb	r3, [r7, #15]
	struct usb_transfer_sync_priv pdata;
	int ret;

	k_sem_init(&pdata.sem, 0, 1);
    fc0c:	f107 0310 	add.w	r3, r7, #16
    fc10:	3304      	adds	r3, #4
    fc12:	2201      	movs	r2, #1
    fc14:	2100      	movs	r1, #0
    fc16:	4618      	mov	r0, r3
    fc18:	f010 f8af 	bl	1fd7a <k_sem_init>

	ret = usb_transfer(ep, data, dlen, flags, usb_transfer_sync_cb, &pdata);
    fc1c:	7bf8      	ldrb	r0, [r7, #15]
    fc1e:	f107 0310 	add.w	r3, r7, #16
    fc22:	9301      	str	r3, [sp, #4]
    fc24:	4b0c      	ldr	r3, [pc, #48]	; (fc58 <usb_transfer_sync+0x5c>)
    fc26:	9300      	str	r3, [sp, #0]
    fc28:	683b      	ldr	r3, [r7, #0]
    fc2a:	687a      	ldr	r2, [r7, #4]
    fc2c:	68b9      	ldr	r1, [r7, #8]
    fc2e:	f7ff ff39 	bl	faa4 <usb_transfer>
    fc32:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (ret) {
    fc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fc36:	2b00      	cmp	r3, #0
    fc38:	d001      	beq.n	fc3e <usb_transfer_sync+0x42>
		return ret;
    fc3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fc3c:	e008      	b.n	fc50 <usb_transfer_sync+0x54>
	}

	/* Semaphore will be released by the transfer completion callback */
	k_sem_take(&pdata.sem, K_FOREVER);
    fc3e:	f107 0310 	add.w	r3, r7, #16
    fc42:	3304      	adds	r3, #4
    fc44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fc48:	4618      	mov	r0, r3
    fc4a:	f010 f8a5 	bl	1fd98 <k_sem_take>

	return pdata.tsize;
    fc4e:	693b      	ldr	r3, [r7, #16]
}
    fc50:	4618      	mov	r0, r3
    fc52:	3730      	adds	r7, #48	; 0x30
    fc54:	46bd      	mov	sp, r7
    fc56:	bd80      	pop	{r7, pc}
    fc58:	0002008b 	.word	0x0002008b

0000fc5c <usb_get_str_descriptor_idx>:
 * Look for the bString that has the address equal to the ptr and
 * return its index. Use it to determine the index of the bString and
 * assign it to the interfaces iInterface variable.
 */
int usb_get_str_descriptor_idx(void *ptr)
{
    fc5c:	b480      	push	{r7}
    fc5e:	b087      	sub	sp, #28
    fc60:	af00      	add	r7, sp, #0
    fc62:	6078      	str	r0, [r7, #4]
	struct usb_desc_header *head = __usb_descriptor_start;
    fc64:	4b12      	ldr	r3, [pc, #72]	; (fcb0 <usb_get_str_descriptor_idx+0x54>)
    fc66:	617b      	str	r3, [r7, #20]
	struct usb_string_descriptor *str = ptr;
    fc68:	687b      	ldr	r3, [r7, #4]
    fc6a:	60fb      	str	r3, [r7, #12]
	int str_descr_idx = 0;
    fc6c:	2300      	movs	r3, #0
    fc6e:	613b      	str	r3, [r7, #16]

	while (head->bLength != 0U) {
    fc70:	e014      	b.n	fc9c <usb_get_str_descriptor_idx+0x40>
		switch (head->bDescriptorType) {
    fc72:	697b      	ldr	r3, [r7, #20]
    fc74:	785b      	ldrb	r3, [r3, #1]
    fc76:	2b03      	cmp	r3, #3
    fc78:	d109      	bne.n	fc8e <usb_get_str_descriptor_idx+0x32>
		case USB_STRING_DESC:
			if (head == (struct usb_desc_header *)str) {
    fc7a:	697a      	ldr	r2, [r7, #20]
    fc7c:	68fb      	ldr	r3, [r7, #12]
    fc7e:	429a      	cmp	r2, r3
    fc80:	d101      	bne.n	fc86 <usb_get_str_descriptor_idx+0x2a>
				return str_descr_idx;
    fc82:	693b      	ldr	r3, [r7, #16]
    fc84:	e00f      	b.n	fca6 <usb_get_str_descriptor_idx+0x4a>
			}

			str_descr_idx += 1;
    fc86:	693b      	ldr	r3, [r7, #16]
    fc88:	3301      	adds	r3, #1
    fc8a:	613b      	str	r3, [r7, #16]
			break;
    fc8c:	e000      	b.n	fc90 <usb_get_str_descriptor_idx+0x34>
		default:
			break;
    fc8e:	bf00      	nop
		}

		/* move to next descriptor */
		head = (struct usb_desc_header *)((u8_t *)head + head->bLength);
    fc90:	697b      	ldr	r3, [r7, #20]
    fc92:	781b      	ldrb	r3, [r3, #0]
    fc94:	461a      	mov	r2, r3
    fc96:	697b      	ldr	r3, [r7, #20]
    fc98:	4413      	add	r3, r2
    fc9a:	617b      	str	r3, [r7, #20]
	while (head->bLength != 0U) {
    fc9c:	697b      	ldr	r3, [r7, #20]
    fc9e:	781b      	ldrb	r3, [r3, #0]
    fca0:	2b00      	cmp	r3, #0
    fca2:	d1e6      	bne.n	fc72 <usb_get_str_descriptor_idx+0x16>
	}

	return 0;
    fca4:	2300      	movs	r3, #0
}
    fca6:	4618      	mov	r0, r3
    fca8:	371c      	adds	r7, #28
    fcaa:	46bd      	mov	sp, r7
    fcac:	bc80      	pop	{r7}
    fcae:	4770      	bx	lr
    fcb0:	2000ff30 	.word	0x2000ff30

0000fcb4 <usb_get_cfg_data>:
 * The interface descriptor of a USB function must be assigned to the
 * usb_cfg_data so that usb_ep_cfg_data and matching endpoint descriptor
 * can be found.
 */
static struct usb_cfg_data *usb_get_cfg_data(struct usb_if_descriptor *iface)
{
    fcb4:	b480      	push	{r7}
    fcb6:	b085      	sub	sp, #20
    fcb8:	af00      	add	r7, sp, #0
    fcba:	6078      	str	r0, [r7, #4]
	size_t length = (__usb_data_end - __usb_data_start);
    fcbc:	4a14      	ldr	r2, [pc, #80]	; (fd10 <usb_get_cfg_data+0x5c>)
    fcbe:	4b15      	ldr	r3, [pc, #84]	; (fd14 <usb_get_cfg_data+0x60>)
    fcc0:	1ad3      	subs	r3, r2, r3
    fcc2:	109b      	asrs	r3, r3, #2
    fcc4:	4a14      	ldr	r2, [pc, #80]	; (fd18 <usb_get_cfg_data+0x64>)
    fcc6:	fb02 f303 	mul.w	r3, r2, r3
    fcca:	60bb      	str	r3, [r7, #8]

	for (size_t i = 0; i < length; i++) {
    fccc:	2300      	movs	r3, #0
    fcce:	60fb      	str	r3, [r7, #12]
    fcd0:	e014      	b.n	fcfc <usb_get_cfg_data+0x48>
		if (__usb_data_start[i].interface_descriptor == iface) {
    fcd2:	4a10      	ldr	r2, [pc, #64]	; (fd14 <usb_get_cfg_data+0x60>)
    fcd4:	68fb      	ldr	r3, [r7, #12]
    fcd6:	212c      	movs	r1, #44	; 0x2c
    fcd8:	fb01 f303 	mul.w	r3, r1, r3
    fcdc:	4413      	add	r3, r2
    fcde:	3304      	adds	r3, #4
    fce0:	681b      	ldr	r3, [r3, #0]
    fce2:	687a      	ldr	r2, [r7, #4]
    fce4:	429a      	cmp	r2, r3
    fce6:	d106      	bne.n	fcf6 <usb_get_cfg_data+0x42>
			return &__usb_data_start[i];
    fce8:	68fb      	ldr	r3, [r7, #12]
    fcea:	222c      	movs	r2, #44	; 0x2c
    fcec:	fb02 f303 	mul.w	r3, r2, r3
    fcf0:	4a08      	ldr	r2, [pc, #32]	; (fd14 <usb_get_cfg_data+0x60>)
    fcf2:	4413      	add	r3, r2
    fcf4:	e007      	b.n	fd06 <usb_get_cfg_data+0x52>
	for (size_t i = 0; i < length; i++) {
    fcf6:	68fb      	ldr	r3, [r7, #12]
    fcf8:	3301      	adds	r3, #1
    fcfa:	60fb      	str	r3, [r7, #12]
    fcfc:	68fa      	ldr	r2, [r7, #12]
    fcfe:	68bb      	ldr	r3, [r7, #8]
    fd00:	429a      	cmp	r2, r3
    fd02:	d3e6      	bcc.n	fcd2 <usb_get_cfg_data+0x1e>
		}
	}

	return NULL;
    fd04:	2300      	movs	r3, #0
}
    fd06:	4618      	mov	r0, r3
    fd08:	3714      	adds	r7, #20
    fd0a:	46bd      	mov	sp, r7
    fd0c:	bc80      	pop	{r7}
    fd0e:	4770      	bx	lr
    fd10:	20010008 	.word	0x20010008
    fd14:	2000ffdc 	.word	0x2000ffdc
    fd18:	ba2e8ba3 	.word	0xba2e8ba3

0000fd1c <usb_fix_ascii_sn_string_descriptor>:
	return NULL;
}

static void
usb_fix_ascii_sn_string_descriptor(struct usb_sn_descriptor *sn)
{
    fd1c:	b580      	push	{r7, lr}
    fd1e:	b086      	sub	sp, #24
    fd20:	af00      	add	r7, sp, #0
    fd22:	6078      	str	r0, [r7, #4]
	u8_t *runtime_sn =  usb_update_sn_string_descriptor();
    fd24:	f010 fab4 	bl	20290 <usb_update_sn_string_descriptor>
    fd28:	6178      	str	r0, [r7, #20]
	int runtime_sn_len, default_sn_len;

	if (!runtime_sn) {
    fd2a:	697b      	ldr	r3, [r7, #20]
    fd2c:	2b00      	cmp	r3, #0
    fd2e:	d01a      	beq.n	fd66 <usb_fix_ascii_sn_string_descriptor+0x4a>
		return;
	}

	runtime_sn_len = strlen(runtime_sn);
    fd30:	6978      	ldr	r0, [r7, #20]
    fd32:	f7f2 f9e0 	bl	20f6 <strlen>
    fd36:	4603      	mov	r3, r0
    fd38:	613b      	str	r3, [r7, #16]
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    fd3a:	480d      	ldr	r0, [pc, #52]	; (fd70 <usb_fix_ascii_sn_string_descriptor+0x54>)
    fd3c:	f7f2 f9db 	bl	20f6 <strlen>
    fd40:	4603      	mov	r3, r0
    fd42:	60fb      	str	r3, [r7, #12]

	if (runtime_sn_len != default_sn_len) {
    fd44:	693a      	ldr	r2, [r7, #16]
    fd46:	68fb      	ldr	r3, [r7, #12]
    fd48:	429a      	cmp	r2, r3
    fd4a:	d004      	beq.n	fd56 <usb_fix_ascii_sn_string_descriptor+0x3a>
		LOG_ERR("the new SN descriptor doesn't has the same "
    fd4c:	f010 f9c8 	bl	200e0 <_is_user_context>
    fd50:	4603      	mov	r3, r0
    fd52:	72fb      	strb	r3, [r7, #11]
			"length as CONFIG_USB_DEVICE_SN");
		return;
    fd54:	e008      	b.n	fd68 <usb_fix_ascii_sn_string_descriptor+0x4c>
	}

	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    fd56:	687b      	ldr	r3, [r7, #4]
    fd58:	3302      	adds	r3, #2
    fd5a:	693a      	ldr	r2, [r7, #16]
    fd5c:	6979      	ldr	r1, [r7, #20]
    fd5e:	4618      	mov	r0, r3
    fd60:	f7f2 f982 	bl	2068 <memcpy>
    fd64:	e000      	b.n	fd68 <usb_fix_ascii_sn_string_descriptor+0x4c>
		return;
    fd66:	bf00      	nop
}
    fd68:	3718      	adds	r7, #24
    fd6a:	46bd      	mov	sp, r7
    fd6c:	bd80      	pop	{r7, pc}
    fd6e:	bf00      	nop
    fd70:	0002e13c 	.word	0x0002e13c

0000fd74 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    fd74:	b580      	push	{r7, lr}
    fd76:	b096      	sub	sp, #88	; 0x58
    fd78:	af00      	add	r7, sp, #0
    fd7a:	6078      	str	r0, [r7, #4]
	struct usb_cfg_descriptor *cfg_descr = NULL;
    fd7c:	2300      	movs	r3, #0
    fd7e:	64bb      	str	r3, [r7, #72]	; 0x48
	struct usb_if_descriptor *if_descr = NULL;
    fd80:	2300      	movs	r3, #0
    fd82:	647b      	str	r3, [r7, #68]	; 0x44
	struct usb_cfg_data *cfg_data = NULL;
    fd84:	2300      	movs	r3, #0
    fd86:	63fb      	str	r3, [r7, #60]	; 0x3c
	struct usb_ep_descriptor *ep_descr = NULL;
    fd88:	2300      	movs	r3, #0
    fd8a:	657b      	str	r3, [r7, #84]	; 0x54
	u8_t numof_ifaces = 0U;
    fd8c:	2300      	movs	r3, #0
    fd8e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	u8_t str_descr_idx = 0U;
    fd92:	2300      	movs	r3, #0
    fd94:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	u32_t requested_ep = BIT(16) | BIT(0);
    fd98:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    fd9c:	633b      	str	r3, [r7, #48]	; 0x30

	while (head->bLength != 0U) {
    fd9e:	e0b9      	b.n	ff14 <usb_fix_descriptor+0x1a0>
		switch (head->bDescriptorType) {
    fda0:	687b      	ldr	r3, [r7, #4]
    fda2:	785b      	ldrb	r3, [r3, #1]
    fda4:	2b0b      	cmp	r3, #11
    fda6:	f200 80ac 	bhi.w	ff02 <usb_fix_descriptor+0x18e>
    fdaa:	a201      	add	r2, pc, #4	; (adr r2, fdb0 <usb_fix_descriptor+0x3c>)
    fdac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    fdb0:	0000fe99 	.word	0x0000fe99
    fdb4:	0000ff03 	.word	0x0000ff03
    fdb8:	0000fde1 	.word	0x0000fde1
    fdbc:	0000fe99 	.word	0x0000fe99
    fdc0:	0000fdfd 	.word	0x0000fdfd
    fdc4:	0000fe67 	.word	0x0000fe67
    fdc8:	0000ff03 	.word	0x0000ff03
    fdcc:	0000ff03 	.word	0x0000ff03
    fdd0:	0000ff03 	.word	0x0000ff03
    fdd4:	0000ff03 	.word	0x0000ff03
    fdd8:	0000ff03 	.word	0x0000ff03
    fddc:	0000fdf1 	.word	0x0000fdf1
		case USB_CONFIGURATION_DESC:
			cfg_descr = (struct usb_cfg_descriptor *)head;
    fde0:	687b      	ldr	r3, [r7, #4]
    fde2:	64bb      	str	r3, [r7, #72]	; 0x48
			LOG_DBG("Configuration descriptor %p", head);
    fde4:	f010 f97c 	bl	200e0 <_is_user_context>
    fde8:	4603      	mov	r3, r0
    fdea:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			break;
    fdee:	e08b      	b.n	ff08 <usb_fix_descriptor+0x194>
		case USB_ASSOCIATION_DESC:
			LOG_DBG("Association descriptor %p", head);
    fdf0:	f010 f976 	bl	200e0 <_is_user_context>
    fdf4:	4603      	mov	r3, r0
    fdf6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			break;
    fdfa:	e085      	b.n	ff08 <usb_fix_descriptor+0x194>
		case USB_INTERFACE_DESC:
			if_descr = (struct usb_if_descriptor *)head;
    fdfc:	687b      	ldr	r3, [r7, #4]
    fdfe:	647b      	str	r3, [r7, #68]	; 0x44
			LOG_DBG("Interface descriptor %p", head);
    fe00:	f010 f96e 	bl	200e0 <_is_user_context>
    fe04:	4603      	mov	r3, r0
    fe06:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
			if (if_descr->bAlternateSetting) {
    fe0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    fe0c:	78db      	ldrb	r3, [r3, #3]
    fe0e:	2b00      	cmp	r3, #0
    fe10:	d005      	beq.n	fe1e <usb_fix_descriptor+0xaa>
				LOG_DBG("Skip alternate interface");
    fe12:	f010 f965 	bl	200e0 <_is_user_context>
    fe16:	4603      	mov	r3, r0
    fe18:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
				break;
    fe1c:	e074      	b.n	ff08 <usb_fix_descriptor+0x194>
			}

			if (if_descr->bInterfaceNumber == 0U) {
    fe1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    fe20:	789b      	ldrb	r3, [r3, #2]
    fe22:	2b00      	cmp	r3, #0
    fe24:	d119      	bne.n	fe5a <usb_fix_descriptor+0xe6>
				cfg_data = usb_get_cfg_data(if_descr);
    fe26:	6c78      	ldr	r0, [r7, #68]	; 0x44
    fe28:	f7ff ff44 	bl	fcb4 <usb_get_cfg_data>
    fe2c:	63f8      	str	r0, [r7, #60]	; 0x3c
				if (!cfg_data) {
    fe2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fe30:	2b00      	cmp	r3, #0
    fe32:	d107      	bne.n	fe44 <usb_fix_descriptor+0xd0>
					LOG_ERR("There is no usb_cfg_data "
    fe34:	f010 f954 	bl	200e0 <_is_user_context>
    fe38:	4603      	mov	r3, r0
    fe3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
						"for %p", head);
					return -1;
    fe3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fe42:	e07e      	b.n	ff42 <usb_fix_descriptor+0x1ce>
				}

				if (cfg_data->interface_config) {
    fe44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fe46:	689b      	ldr	r3, [r3, #8]
    fe48:	2b00      	cmp	r3, #0
    fe4a:	d006      	beq.n	fe5a <usb_fix_descriptor+0xe6>
					cfg_data->interface_config(head,
    fe4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fe4e:	689b      	ldr	r3, [r3, #8]
    fe50:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    fe54:	4611      	mov	r1, r2
    fe56:	6878      	ldr	r0, [r7, #4]
    fe58:	4798      	blx	r3
							numof_ifaces);
				}
			}

			numof_ifaces++;
    fe5a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
    fe5e:	3301      	adds	r3, #1
    fe60:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
			break;
    fe64:	e050      	b.n	ff08 <usb_fix_descriptor+0x194>
		case USB_ENDPOINT_DESC:
			LOG_DBG("Endpoint descriptor %p", head);
    fe66:	f010 f93b 	bl	200e0 <_is_user_context>
    fe6a:	4603      	mov	r3, r0
    fe6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			ep_descr = (struct usb_ep_descriptor *)head;
    fe70:	687b      	ldr	r3, [r7, #4]
    fe72:	657b      	str	r3, [r7, #84]	; 0x54
			if (usb_validate_ep_cfg_data(ep_descr,
    fe74:	f107 0330 	add.w	r3, r7, #48	; 0x30
    fe78:	461a      	mov	r2, r3
    fe7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    fe7c:	6d78      	ldr	r0, [r7, #84]	; 0x54
    fe7e:	f010 f971 	bl	20164 <usb_validate_ep_cfg_data>
    fe82:	4603      	mov	r3, r0
    fe84:	2b00      	cmp	r3, #0
    fe86:	d03e      	beq.n	ff06 <usb_fix_descriptor+0x192>
						     cfg_data,
						     &requested_ep)) {
				LOG_ERR("Failed to validate endpoints");
    fe88:	f010 f92a 	bl	200e0 <_is_user_context>
    fe8c:	4603      	mov	r3, r0
    fe8e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				return -1;
    fe92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fe96:	e054      	b.n	ff42 <usb_fix_descriptor+0x1ce>
		case 0:
		case USB_STRING_DESC:
			/*
			 * Copy runtime SN string descriptor first, if has
			 */
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    fe98:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    fe9c:	2b03      	cmp	r3, #3
    fe9e:	d104      	bne.n	feaa <usb_fix_descriptor+0x136>
				struct usb_sn_descriptor *sn =
    fea0:	687b      	ldr	r3, [r7, #4]
    fea2:	653b      	str	r3, [r7, #80]	; 0x50
					(struct usb_sn_descriptor *)head;
				usb_fix_ascii_sn_string_descriptor(sn);
    fea4:	6d38      	ldr	r0, [r7, #80]	; 0x50
    fea6:	f7ff ff39 	bl	fd1c <usb_fix_ascii_sn_string_descriptor>
			}
			/*
			 * Skip language descriptor but correct
			 * wTotalLength and bNumInterfaces once.
			 */
			if (str_descr_idx) {
    feaa:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    feae:	2b00      	cmp	r3, #0
    feb0:	d003      	beq.n	feba <usb_fix_descriptor+0x146>
				ascii7_to_utf16le(head);
    feb2:	6878      	ldr	r0, [r7, #4]
    feb4:	f010 f91b 	bl	200ee <ascii7_to_utf16le>
    feb8:	e01d      	b.n	fef6 <usb_fix_descriptor+0x182>
			} else {
				if (!cfg_descr) {
    feba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    febc:	2b00      	cmp	r3, #0
    febe:	d107      	bne.n	fed0 <usb_fix_descriptor+0x15c>
					LOG_ERR("Incomplete device descriptor");
    fec0:	f010 f90e 	bl	200e0 <_is_user_context>
    fec4:	4603      	mov	r3, r0
    fec6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					return -1;
    feca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fece:	e038      	b.n	ff42 <usb_fix_descriptor+0x1ce>
				}

				LOG_DBG("Now the wTotalLength is %d",
    fed0:	f010 f906 	bl	200e0 <_is_user_context>
    fed4:	4603      	mov	r3, r0
    fed6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					(u8_t *)head - (u8_t *)cfg_descr);
				sys_put_le16((u8_t *)head - (u8_t *)cfg_descr,
    feda:	687a      	ldr	r2, [r7, #4]
    fedc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fede:	1ad3      	subs	r3, r2, r3
    fee0:	b29a      	uxth	r2, r3
					     (u8_t *)&cfg_descr->wTotalLength);
    fee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fee4:	3302      	adds	r3, #2
				sys_put_le16((u8_t *)head - (u8_t *)cfg_descr,
    fee6:	4619      	mov	r1, r3
    fee8:	4610      	mov	r0, r2
    feea:	f010 f8e3 	bl	200b4 <sys_put_le16>
				cfg_descr->bNumInterfaces = numof_ifaces;
    feee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fef0:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    fef4:	711a      	strb	r2, [r3, #4]
			}

			str_descr_idx += 1U;
    fef6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    fefa:	3301      	adds	r3, #1
    fefc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

			break;
    ff00:	e002      	b.n	ff08 <usb_fix_descriptor+0x194>
		default:
			break;
    ff02:	bf00      	nop
    ff04:	e000      	b.n	ff08 <usb_fix_descriptor+0x194>
			break;
    ff06:	bf00      	nop
		}

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((u8_t *)head + head->bLength);
    ff08:	687b      	ldr	r3, [r7, #4]
    ff0a:	781b      	ldrb	r3, [r3, #0]
    ff0c:	461a      	mov	r2, r3
    ff0e:	687b      	ldr	r3, [r7, #4]
    ff10:	4413      	add	r3, r2
    ff12:	607b      	str	r3, [r7, #4]
	while (head->bLength != 0U) {
    ff14:	687b      	ldr	r3, [r7, #4]
    ff16:	781b      	ldrb	r3, [r3, #0]
    ff18:	2b00      	cmp	r3, #0
    ff1a:	f47f af41 	bne.w	fda0 <usb_fix_descriptor+0x2c>
	}

	if ((head + 1) != __usb_descriptor_end) {
    ff1e:	687b      	ldr	r3, [r7, #4]
    ff20:	3302      	adds	r3, #2
    ff22:	4a0a      	ldr	r2, [pc, #40]	; (ff4c <usb_fix_descriptor+0x1d8>)
    ff24:	4293      	cmp	r3, r2
    ff26:	d00b      	beq.n	ff40 <usb_fix_descriptor+0x1cc>
		LOG_DBG("try to fix next descriptor at %p", head + 1);
    ff28:	f010 f8da 	bl	200e0 <_is_user_context>
    ff2c:	4603      	mov	r3, r0
    ff2e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		return usb_fix_descriptor(head + 1);
    ff32:	687b      	ldr	r3, [r7, #4]
    ff34:	3302      	adds	r3, #2
    ff36:	4618      	mov	r0, r3
    ff38:	f7ff ff1c 	bl	fd74 <usb_fix_descriptor>
    ff3c:	4603      	mov	r3, r0
    ff3e:	e000      	b.n	ff42 <usb_fix_descriptor+0x1ce>
	}

	return 0;
    ff40:	2300      	movs	r3, #0
}
    ff42:	4618      	mov	r0, r3
    ff44:	3758      	adds	r7, #88	; 0x58
    ff46:	46bd      	mov	sp, r7
    ff48:	bd80      	pop	{r7, pc}
    ff4a:	bf00      	nop
    ff4c:	2000ffda 	.word	0x2000ffda

0000ff50 <usb_get_device_descriptor>:


u8_t *usb_get_device_descriptor(void)
{
    ff50:	b580      	push	{r7, lr}
    ff52:	b084      	sub	sp, #16
    ff54:	af00      	add	r7, sp, #0
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
    ff56:	f010 f8c3 	bl	200e0 <_is_user_context>
    ff5a:	4603      	mov	r3, r0
    ff5c:	73fb      	strb	r3, [r7, #15]
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);
    ff5e:	f010 f8bf 	bl	200e0 <_is_user_context>
    ff62:	4603      	mov	r3, r0
    ff64:	73bb      	strb	r3, [r7, #14]

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    ff66:	4808      	ldr	r0, [pc, #32]	; (ff88 <usb_get_device_descriptor+0x38>)
    ff68:	f7ff ff04 	bl	fd74 <usb_fix_descriptor>
    ff6c:	4603      	mov	r3, r0
    ff6e:	2b00      	cmp	r3, #0
    ff70:	d005      	beq.n	ff7e <usb_get_device_descriptor+0x2e>
		LOG_ERR("Failed to fixup USB descriptor");
    ff72:	f010 f8b5 	bl	200e0 <_is_user_context>
    ff76:	4603      	mov	r3, r0
    ff78:	737b      	strb	r3, [r7, #13]
		return NULL;
    ff7a:	2300      	movs	r3, #0
    ff7c:	e000      	b.n	ff80 <usb_get_device_descriptor+0x30>
	}

	return (u8_t *) __usb_descriptor_start;
    ff7e:	4b02      	ldr	r3, [pc, #8]	; (ff88 <usb_get_device_descriptor+0x38>)
}
    ff80:	4618      	mov	r0, r3
    ff82:	3710      	adds	r7, #16
    ff84:	46bd      	mov	sp, r7
    ff86:	bd80      	pop	{r7, pc}
    ff88:	2000ff30 	.word	0x2000ff30

0000ff8c <usb_handle_os_desc>:

static struct usb_os_descriptor *os_desc;

int usb_handle_os_desc(struct usb_setup_packet *setup,
		       s32_t *len, u8_t **data)
{
    ff8c:	b580      	push	{r7, lr}
    ff8e:	b086      	sub	sp, #24
    ff90:	af00      	add	r7, sp, #0
    ff92:	60f8      	str	r0, [r7, #12]
    ff94:	60b9      	str	r1, [r7, #8]
    ff96:	607a      	str	r2, [r7, #4]
	LOG_DBG("wValue 0x%x", setup->wValue);
    ff98:	f010 f981 	bl	2029e <_is_user_context>
    ff9c:	4603      	mov	r3, r0
    ff9e:	75bb      	strb	r3, [r7, #22]

	if (!os_desc) {
    ffa0:	4b14      	ldr	r3, [pc, #80]	; (fff4 <usb_handle_os_desc+0x68>)
    ffa2:	681b      	ldr	r3, [r3, #0]
    ffa4:	2b00      	cmp	r3, #0
    ffa6:	d102      	bne.n	ffae <usb_handle_os_desc+0x22>
		return -ENOTSUP;
    ffa8:	f06f 0385 	mvn.w	r3, #133	; 0x85
    ffac:	e01e      	b.n	ffec <usb_handle_os_desc+0x60>
	}

	if (GET_DESC_TYPE(setup->wValue) == DESC_STRING &&
    ffae:	68fb      	ldr	r3, [r7, #12]
    ffb0:	885b      	ldrh	r3, [r3, #2]
    ffb2:	0a1b      	lsrs	r3, r3, #8
    ffb4:	b29b      	uxth	r3, r3
    ffb6:	b2db      	uxtb	r3, r3
    ffb8:	2b03      	cmp	r3, #3
    ffba:	d115      	bne.n	ffe8 <usb_handle_os_desc+0x5c>
	    GET_DESC_INDEX(setup->wValue) == USB_OSDESC_STRING_DESC_INDEX) {
    ffbc:	68fb      	ldr	r3, [r7, #12]
    ffbe:	885b      	ldrh	r3, [r3, #2]
    ffc0:	b2db      	uxtb	r3, r3
	if (GET_DESC_TYPE(setup->wValue) == DESC_STRING &&
    ffc2:	2bee      	cmp	r3, #238	; 0xee
    ffc4:	d110      	bne.n	ffe8 <usb_handle_os_desc+0x5c>
		LOG_DBG("MS OS Descriptor string read");
    ffc6:	f010 f96a 	bl	2029e <_is_user_context>
    ffca:	4603      	mov	r3, r0
    ffcc:	75fb      	strb	r3, [r7, #23]
		*data = os_desc->string;
    ffce:	4b09      	ldr	r3, [pc, #36]	; (fff4 <usb_handle_os_desc+0x68>)
    ffd0:	681b      	ldr	r3, [r3, #0]
    ffd2:	681a      	ldr	r2, [r3, #0]
    ffd4:	687b      	ldr	r3, [r7, #4]
    ffd6:	601a      	str	r2, [r3, #0]
		*len = os_desc->string_len;
    ffd8:	4b06      	ldr	r3, [pc, #24]	; (fff4 <usb_handle_os_desc+0x68>)
    ffda:	681b      	ldr	r3, [r3, #0]
    ffdc:	685b      	ldr	r3, [r3, #4]
    ffde:	461a      	mov	r2, r3
    ffe0:	68bb      	ldr	r3, [r7, #8]
    ffe2:	601a      	str	r2, [r3, #0]

		return 0;
    ffe4:	2300      	movs	r3, #0
    ffe6:	e001      	b.n	ffec <usb_handle_os_desc+0x60>
	}

	return -ENOTSUP;
    ffe8:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    ffec:	4618      	mov	r0, r3
    ffee:	3718      	adds	r7, #24
    fff0:	46bd      	mov	sp, r7
    fff2:	bd80      	pop	{r7, pc}
    fff4:	20002b28 	.word	0x20002b28

0000fff8 <usb_handle_os_desc_feature>:

int usb_handle_os_desc_feature(struct usb_setup_packet *setup,
			       s32_t *len, u8_t **data)
{
    fff8:	b580      	push	{r7, lr}
    fffa:	b086      	sub	sp, #24
    fffc:	af00      	add	r7, sp, #0
    fffe:	60f8      	str	r0, [r7, #12]
   10000:	60b9      	str	r1, [r7, #8]
   10002:	607a      	str	r2, [r7, #4]
	LOG_DBG("bRequest 0x%x", setup->bRequest);
   10004:	f010 f94b 	bl	2029e <_is_user_context>
   10008:	4603      	mov	r3, r0
   1000a:	75bb      	strb	r3, [r7, #22]

	if (!os_desc) {
   1000c:	4b15      	ldr	r3, [pc, #84]	; (10064 <usb_handle_os_desc_feature+0x6c>)
   1000e:	681b      	ldr	r3, [r3, #0]
   10010:	2b00      	cmp	r3, #0
   10012:	d102      	bne.n	1001a <usb_handle_os_desc_feature+0x22>
		return -ENOTSUP;
   10014:	f06f 0385 	mvn.w	r3, #133	; 0x85
   10018:	e020      	b.n	1005c <usb_handle_os_desc_feature+0x64>
	}

	if (setup->bRequest == os_desc->vendor_code) {
   1001a:	68fb      	ldr	r3, [r7, #12]
   1001c:	785a      	ldrb	r2, [r3, #1]
   1001e:	4b11      	ldr	r3, [pc, #68]	; (10064 <usb_handle_os_desc_feature+0x6c>)
   10020:	681b      	ldr	r3, [r3, #0]
   10022:	7a1b      	ldrb	r3, [r3, #8]
   10024:	429a      	cmp	r2, r3
   10026:	d114      	bne.n	10052 <usb_handle_os_desc_feature+0x5a>
		switch (setup->wIndex) {
   10028:	68fb      	ldr	r3, [r7, #12]
   1002a:	889b      	ldrh	r3, [r3, #4]
   1002c:	2b04      	cmp	r3, #4
   1002e:	d112      	bne.n	10056 <usb_handle_os_desc_feature+0x5e>
		case USB_OSDESC_EXTENDED_COMPAT_ID:
			LOG_DBG("Handle Compat ID");
   10030:	f010 f935 	bl	2029e <_is_user_context>
   10034:	4603      	mov	r3, r0
   10036:	75fb      	strb	r3, [r7, #23]
			*data = os_desc->compat_id;
   10038:	4b0a      	ldr	r3, [pc, #40]	; (10064 <usb_handle_os_desc_feature+0x6c>)
   1003a:	681b      	ldr	r3, [r3, #0]
   1003c:	68da      	ldr	r2, [r3, #12]
   1003e:	687b      	ldr	r3, [r7, #4]
   10040:	601a      	str	r2, [r3, #0]
			*len = os_desc->compat_id_len;
   10042:	4b08      	ldr	r3, [pc, #32]	; (10064 <usb_handle_os_desc_feature+0x6c>)
   10044:	681b      	ldr	r3, [r3, #0]
   10046:	691b      	ldr	r3, [r3, #16]
   10048:	461a      	mov	r2, r3
   1004a:	68bb      	ldr	r3, [r7, #8]
   1004c:	601a      	str	r2, [r3, #0]

			return 0;
   1004e:	2300      	movs	r3, #0
   10050:	e004      	b.n	1005c <usb_handle_os_desc_feature+0x64>
		default:
			break;
		}
	}
   10052:	bf00      	nop
   10054:	e000      	b.n	10058 <usb_handle_os_desc_feature+0x60>
			break;
   10056:	bf00      	nop

	return -ENOTSUP;
   10058:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   1005c:	4618      	mov	r0, r3
   1005e:	3718      	adds	r7, #24
   10060:	46bd      	mov	sp, r7
   10062:	bd80      	pop	{r7, pc}
   10064:	20002b28 	.word	0x20002b28

00010068 <usb_os_desc_enabled>:
{
	os_desc = desc;
}

bool usb_os_desc_enabled(void)
{
   10068:	b480      	push	{r7}
   1006a:	af00      	add	r7, sp, #0
	return !!os_desc;
   1006c:	4b05      	ldr	r3, [pc, #20]	; (10084 <usb_os_desc_enabled+0x1c>)
   1006e:	681b      	ldr	r3, [r3, #0]
   10070:	2b00      	cmp	r3, #0
   10072:	bf14      	ite	ne
   10074:	2301      	movne	r3, #1
   10076:	2300      	moveq	r3, #0
   10078:	b2db      	uxtb	r3, r3
}
   1007a:	4618      	mov	r0, r3
   1007c:	46bd      	mov	sp, r7
   1007e:	bc80      	pop	{r7}
   10080:	4770      	bx	lr
   10082:	bf00      	nop
   10084:	20002b28 	.word	0x20002b28

00010088 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
   10088:	b580      	push	{r7, lr}
   1008a:	b084      	sub	sp, #16
   1008c:	af00      	add	r7, sp, #0
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
   1008e:	4815      	ldr	r0, [pc, #84]	; (100e4 <sys_rand32_get+0x5c>)
   10090:	f010 f90c 	bl	202ac <atomic_get>
   10094:	4603      	mov	r3, r0
   10096:	60fb      	str	r3, [r7, #12]
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
   10098:	68fb      	ldr	r3, [r7, #12]
   1009a:	2b00      	cmp	r3, #0
   1009c:	bf0c      	ite	eq
   1009e:	2301      	moveq	r3, #1
   100a0:	2300      	movne	r3, #0
   100a2:	b2db      	uxtb	r3, r3
   100a4:	2b00      	cmp	r3, #0
   100a6:	d008      	beq.n	100ba <sys_rand32_get+0x32>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
   100a8:	480f      	ldr	r0, [pc, #60]	; (100e8 <sys_rand32_get+0x60>)
   100aa:	f010 f925 	bl	202f8 <device_get_binding>
   100ae:	60f8      	str	r0, [r7, #12]
		__ASSERT((dev != NULL),
			"Device driver for %s (CONFIG_ENTROPY_NAME) not found. "
			"Check your build configuration!",
			CONFIG_ENTROPY_NAME);
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
   100b0:	68fb      	ldr	r3, [r7, #12]
   100b2:	4619      	mov	r1, r3
   100b4:	480b      	ldr	r0, [pc, #44]	; (100e4 <sys_rand32_get+0x5c>)
   100b6:	f010 f908 	bl	202ca <atomic_set>
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
   100ba:	1d3b      	adds	r3, r7, #4
   100bc:	2204      	movs	r2, #4
   100be:	4619      	mov	r1, r3
   100c0:	68f8      	ldr	r0, [r7, #12]
   100c2:	f010 f93a 	bl	2033a <entropy_get_entropy>
   100c6:	60b8      	str	r0, [r7, #8]
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
   100c8:	68bb      	ldr	r3, [r7, #8]
   100ca:	0fdb      	lsrs	r3, r3, #31
   100cc:	b2db      	uxtb	r3, r3
   100ce:	2b00      	cmp	r3, #0
   100d0:	d003      	beq.n	100da <sys_rand32_get+0x52>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
   100d2:	f001 fb33 	bl	1173c <z_timer_cycle_get_32>
   100d6:	4603      	mov	r3, r0
   100d8:	607b      	str	r3, [r7, #4]
	}

	return random_num;
   100da:	687b      	ldr	r3, [r7, #4]
}
   100dc:	4618      	mov	r0, r3
   100de:	3710      	adds	r7, #16
   100e0:	46bd      	mov	sp, r7
   100e2:	bd80      	pop	{r7, pc}
   100e4:	20002b2c 	.word	0x20002b2c
   100e8:	0002e144 	.word	0x0002e144

000100ec <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   100ec:	b580      	push	{r7, lr}
   100ee:	b084      	sub	sp, #16
   100f0:	af00      	add	r7, sp, #0
   100f2:	6078      	str	r0, [r7, #4]
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   100f4:	4b13      	ldr	r3, [pc, #76]	; (10144 <console_out+0x58>)
   100f6:	681b      	ldr	r3, [r3, #0]
   100f8:	687a      	ldr	r2, [r7, #4]
   100fa:	b2d2      	uxtb	r2, r2
   100fc:	4610      	mov	r0, r2
   100fe:	4798      	blx	r3
   10100:	4603      	mov	r3, r0
   10102:	2b01      	cmp	r3, #1
   10104:	bf0c      	ite	eq
   10106:	2301      	moveq	r3, #1
   10108:	2300      	movne	r3, #0
   1010a:	b2db      	uxtb	r3, r3
   1010c:	60fb      	str	r3, [r7, #12]

	if (handled_by_debug_server) {
   1010e:	68fb      	ldr	r3, [r7, #12]
   10110:	2b00      	cmp	r3, #0
   10112:	d001      	beq.n	10118 <console_out+0x2c>
		return c;
   10114:	687b      	ldr	r3, [r7, #4]
   10116:	e011      	b.n	1013c <console_out+0x50>
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   10118:	687b      	ldr	r3, [r7, #4]
   1011a:	2b0a      	cmp	r3, #10
   1011c:	d105      	bne.n	1012a <console_out+0x3e>
		uart_poll_out(uart_console_dev, '\r');
   1011e:	4b0a      	ldr	r3, [pc, #40]	; (10148 <console_out+0x5c>)
   10120:	681b      	ldr	r3, [r3, #0]
   10122:	210d      	movs	r1, #13
   10124:	4618      	mov	r0, r3
   10126:	f010 f939 	bl	2039c <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
   1012a:	4b07      	ldr	r3, [pc, #28]	; (10148 <console_out+0x5c>)
   1012c:	681b      	ldr	r3, [r3, #0]
   1012e:	687a      	ldr	r2, [r7, #4]
   10130:	b2d2      	uxtb	r2, r2
   10132:	4611      	mov	r1, r2
   10134:	4618      	mov	r0, r3
   10136:	f010 f931 	bl	2039c <uart_poll_out>

	return c;
   1013a:	687b      	ldr	r3, [r7, #4]
}
   1013c:	4618      	mov	r0, r3
   1013e:	3710      	adds	r7, #16
   10140:	46bd      	mov	sp, r7
   10142:	bd80      	pop	{r7, pc}
   10144:	2000fc10 	.word	0x2000fc10
   10148:	20002b30 	.word	0x20002b30

0001014c <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
   1014c:	b580      	push	{r7, lr}
   1014e:	af00      	add	r7, sp, #0
	__stdout_hook_install(console_out);
   10150:	4803      	ldr	r0, [pc, #12]	; (10160 <uart_console_hook_install+0x14>)
   10152:	f002 f907 	bl	12364 <__stdout_hook_install>
	__printk_hook_install(console_out);
   10156:	4802      	ldr	r0, [pc, #8]	; (10160 <uart_console_hook_install+0x14>)
   10158:	f7fa feca 	bl	aef0 <__printk_hook_install>
}
   1015c:	bf00      	nop
   1015e:	bd80      	pop	{r7, pc}
   10160:	000100ed 	.word	0x000100ed

00010164 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
   10164:	b580      	push	{r7, lr}
   10166:	b082      	sub	sp, #8
   10168:	af00      	add	r7, sp, #0
   1016a:	6078      	str	r0, [r7, #4]

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   1016c:	4806      	ldr	r0, [pc, #24]	; (10188 <uart_console_init+0x24>)
   1016e:	f010 f8f6 	bl	2035e <device_get_binding>
   10172:	4602      	mov	r2, r0
   10174:	4b05      	ldr	r3, [pc, #20]	; (1018c <uart_console_init+0x28>)
   10176:	601a      	str	r2, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
   10178:	f7ff ffe8 	bl	1014c <uart_console_hook_install>

	return 0;
   1017c:	2300      	movs	r3, #0
}
   1017e:	4618      	mov	r0, r3
   10180:	3708      	adds	r7, #8
   10182:	46bd      	mov	sp, r7
   10184:	bd80      	pop	{r7, pc}
   10186:	bf00      	nop
   10188:	0002e168 	.word	0x0002e168
   1018c:	20002b30 	.word	0x20002b30

00010190 <__NVIC_SetPendingIRQ>:
{
   10190:	b480      	push	{r7}
   10192:	b083      	sub	sp, #12
   10194:	af00      	add	r7, sp, #0
   10196:	4603      	mov	r3, r0
   10198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   1019a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1019e:	2b00      	cmp	r3, #0
   101a0:	db0c      	blt.n	101bc <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   101a2:	79fb      	ldrb	r3, [r7, #7]
   101a4:	f003 021f 	and.w	r2, r3, #31
   101a8:	4907      	ldr	r1, [pc, #28]	; (101c8 <__NVIC_SetPendingIRQ+0x38>)
   101aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
   101ae:	095b      	lsrs	r3, r3, #5
   101b0:	2001      	movs	r0, #1
   101b2:	fa00 f202 	lsl.w	r2, r0, r2
   101b6:	3340      	adds	r3, #64	; 0x40
   101b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   101bc:	bf00      	nop
   101be:	370c      	adds	r7, #12
   101c0:	46bd      	mov	sp, r7
   101c2:	bc80      	pop	{r7}
   101c4:	4770      	bx	lr
   101c6:	bf00      	nop
   101c8:	e000e100 	.word	0xe000e100

000101cc <__NVIC_ClearPendingIRQ>:
{
   101cc:	b480      	push	{r7}
   101ce:	b083      	sub	sp, #12
   101d0:	af00      	add	r7, sp, #0
   101d2:	4603      	mov	r3, r0
   101d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   101d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
   101da:	2b00      	cmp	r3, #0
   101dc:	db0c      	blt.n	101f8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   101de:	79fb      	ldrb	r3, [r7, #7]
   101e0:	f003 021f 	and.w	r2, r3, #31
   101e4:	4907      	ldr	r1, [pc, #28]	; (10204 <__NVIC_ClearPendingIRQ+0x38>)
   101e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
   101ea:	095b      	lsrs	r3, r3, #5
   101ec:	2001      	movs	r0, #1
   101ee:	fa00 f202 	lsl.w	r2, r0, r2
   101f2:	3360      	adds	r3, #96	; 0x60
   101f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   101f8:	bf00      	nop
   101fa:	370c      	adds	r7, #12
   101fc:	46bd      	mov	sp, r7
   101fe:	bc80      	pop	{r7}
   10200:	4770      	bx	lr
   10202:	bf00      	nop
   10204:	e000e100 	.word	0xe000e100

00010208 <m16src_start>:
static u8_t m16src_ref;
static u8_t m16src_grd;
static u8_t k32src_initialized;

static int m16src_start(struct device *dev, clock_control_subsys_t sub_system)
{
   10208:	b580      	push	{r7, lr}
   1020a:	b08c      	sub	sp, #48	; 0x30
   1020c:	af00      	add	r7, sp, #0
   1020e:	6078      	str	r0, [r7, #4]
   10210:	6039      	str	r1, [r7, #0]
	__asm__ volatile(
   10212:	f04f 0320 	mov.w	r3, #32
   10216:	f3ef 8211 	mrs	r2, BASEPRI
   1021a:	f383 8811 	msr	BASEPRI, r3
   1021e:	f3bf 8f6f 	isb	sy
   10222:	61fa      	str	r2, [r7, #28]
   10224:	61bb      	str	r3, [r7, #24]
	return key;
   10226:	69fb      	ldr	r3, [r7, #28]
	 * be caught and in that case system should assert.
	 */

	/* Test for reference increment from zero and resource guard not taken.
	 */
	imask = irq_lock();
   10228:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (m16src_ref++) {
   1022a:	4b44      	ldr	r3, [pc, #272]	; (1033c <m16src_start+0x134>)
   1022c:	781b      	ldrb	r3, [r3, #0]
   1022e:	1c5a      	adds	r2, r3, #1
   10230:	b2d1      	uxtb	r1, r2
   10232:	4a42      	ldr	r2, [pc, #264]	; (1033c <m16src_start+0x134>)
   10234:	7011      	strb	r1, [r2, #0]
   10236:	2b00      	cmp	r3, #0
   10238:	d007      	beq.n	1024a <m16src_start+0x42>
   1023a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1023c:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
   1023e:	697b      	ldr	r3, [r7, #20]
   10240:	f383 8811 	msr	BASEPRI, r3
   10244:	f3bf 8f6f 	isb	sy
		irq_unlock(imask);
		goto hf_already_started;
   10248:	e064      	b.n	10314 <m16src_start+0x10c>
	}

	if (m16src_grd) {
   1024a:	4b3d      	ldr	r3, [pc, #244]	; (10340 <m16src_start+0x138>)
   1024c:	781b      	ldrb	r3, [r3, #0]
   1024e:	2b00      	cmp	r3, #0
   10250:	d00f      	beq.n	10272 <m16src_start+0x6a>
		m16src_ref--;
   10252:	4b3a      	ldr	r3, [pc, #232]	; (1033c <m16src_start+0x134>)
   10254:	781b      	ldrb	r3, [r3, #0]
   10256:	3b01      	subs	r3, #1
   10258:	b2da      	uxtb	r2, r3
   1025a:	4b38      	ldr	r3, [pc, #224]	; (1033c <m16src_start+0x134>)
   1025c:	701a      	strb	r2, [r3, #0]
   1025e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10260:	613b      	str	r3, [r7, #16]
   10262:	693b      	ldr	r3, [r7, #16]
   10264:	f383 8811 	msr	BASEPRI, r3
   10268:	f3bf 8f6f 	isb	sy
		irq_unlock(imask);
		return -EAGAIN;
   1026c:	f06f 030a 	mvn.w	r3, #10
   10270:	e060      	b.n	10334 <m16src_start+0x12c>
	}

	m16src_grd = 1U;
   10272:	4b33      	ldr	r3, [pc, #204]	; (10340 <m16src_start+0x138>)
   10274:	2201      	movs	r2, #1
   10276:	701a      	strb	r2, [r3, #0]
   10278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1027a:	60fb      	str	r3, [r7, #12]
   1027c:	68fb      	ldr	r3, [r7, #12]
   1027e:	f383 8811 	msr	BASEPRI, r3
   10282:	f3bf 8f6f 	isb	sy

	irq_unlock(imask);

	/* If blocking then spin-wait in CPU sleep until 16MHz clock settles. */
	blocking = POINTER_TO_UINT(sub_system);
   10286:	683b      	ldr	r3, [r7, #0]
   10288:	2b00      	cmp	r3, #0
   1028a:	bf14      	ite	ne
   1028c:	2301      	movne	r3, #1
   1028e:	2300      	moveq	r3, #0
   10290:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if (blocking) {
   10294:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   10298:	2b00      	cmp	r3, #0
   1029a:	d030      	beq.n	102fe <m16src_start+0xf6>
		u32_t intenset;

		irq_disable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
   1029c:	2000      	movs	r0, #0
   1029e:	f011 f8ff 	bl	214a0 <z_arch_irq_disable>

		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   102a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   102a6:	2200      	movs	r2, #0
   102a8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		intenset = NRF_CLOCK->INTENSET;
   102ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   102b0:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   102b4:	627b      	str	r3, [r7, #36]	; 0x24
		nrf_clock_int_enable(NRF_CLOCK_INT_HF_STARTED_MASK);
   102b6:	2001      	movs	r0, #1
   102b8:	f010 f88a 	bl	203d0 <nrf_clock_int_enable>

		nrf_clock_task_trigger(NRF_CLOCK_TASK_HFCLKSTART);
   102bc:	2000      	movs	r0, #0
   102be:	f010 f8a3 	bl	20408 <nrf_clock_task_trigger>

		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
   102c2:	e002      	b.n	102ca <m16src_start+0xc2>
			__WFE();
   102c4:	bf20      	wfe
			__SEV();
   102c6:	bf40      	sev
			__WFE();
   102c8:	bf20      	wfe
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
   102ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   102ce:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   102d2:	2b00      	cmp	r3, #0
   102d4:	d0f6      	beq.n	102c4 <m16src_start+0xbc>
		}

		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   102d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   102da:	2200      	movs	r2, #0
   102dc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
   102e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   102e2:	f003 0301 	and.w	r3, r3, #1
   102e6:	2b00      	cmp	r3, #0
   102e8:	d102      	bne.n	102f0 <m16src_start+0xe8>
			nrf_clock_int_disable(NRF_CLOCK_INT_HF_STARTED_MASK);
   102ea:	2001      	movs	r0, #1
   102ec:	f010 f87e 	bl	203ec <nrf_clock_int_disable>
		}

		NVIC_ClearPendingIRQ(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
   102f0:	2000      	movs	r0, #0
   102f2:	f7ff ff6b 	bl	101cc <__NVIC_ClearPendingIRQ>

		irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
   102f6:	2000      	movs	r0, #0
   102f8:	f011 f8c5 	bl	21486 <z_arch_irq_enable>
   102fc:	e007      	b.n	1030e <m16src_start+0x106>
	} else {
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   102fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10302:	2200      	movs	r2, #0
   10304:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		nrf_clock_task_trigger(NRF_CLOCK_TASK_HFCLKSTART);
   10308:	2000      	movs	r0, #0
   1030a:	f010 f87d 	bl	20408 <nrf_clock_task_trigger>
	}

	/* release resource guard */
	m16src_grd = 0U;
   1030e:	4b0c      	ldr	r3, [pc, #48]	; (10340 <m16src_start+0x138>)
   10310:	2200      	movs	r2, #0
   10312:	701a      	strb	r2, [r3, #0]
	/* rollover should not happen as start and stop shall be
	 * called in pairs.
	 */
	__ASSERT_NO_MSG(m16src_ref);

	stat = NRF_CLOCK_HFCLK_HIGH_ACCURACY | CLOCK_HFCLKSTAT_STATE_Msk;
   10314:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   10318:	623b      	str	r3, [r7, #32]
	if ((NRF_CLOCK->HFCLKSTAT & stat) == stat) {
   1031a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1031e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
   10322:	6a3b      	ldr	r3, [r7, #32]
   10324:	4013      	ands	r3, r2
   10326:	6a3a      	ldr	r2, [r7, #32]
   10328:	429a      	cmp	r2, r3
   1032a:	d101      	bne.n	10330 <m16src_start+0x128>
		return 0;
   1032c:	2300      	movs	r3, #0
   1032e:	e001      	b.n	10334 <m16src_start+0x12c>
	} else {
		return -EINPROGRESS;
   10330:	f06f 0376 	mvn.w	r3, #118	; 0x76
	}
}
   10334:	4618      	mov	r0, r3
   10336:	3730      	adds	r7, #48	; 0x30
   10338:	46bd      	mov	sp, r7
   1033a:	bd80      	pop	{r7, pc}
   1033c:	20006244 	.word	0x20006244
   10340:	20006245 	.word	0x20006245

00010344 <m16src_stop>:

static int m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
   10344:	b580      	push	{r7, lr}
   10346:	b08a      	sub	sp, #40	; 0x28
   10348:	af00      	add	r7, sp, #0
   1034a:	6078      	str	r0, [r7, #4]
   1034c:	6039      	str	r1, [r7, #0]
	__asm__ volatile(
   1034e:	f04f 0320 	mov.w	r3, #32
   10352:	f3ef 8211 	mrs	r2, BASEPRI
   10356:	f383 8811 	msr	BASEPRI, r3
   1035a:	f3bf 8f6f 	isb	sy
   1035e:	623a      	str	r2, [r7, #32]
   10360:	61fb      	str	r3, [r7, #28]
	return key;
   10362:	6a3b      	ldr	r3, [r7, #32]
	ARG_UNUSED(sub_system);

	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();
   10364:	627b      	str	r3, [r7, #36]	; 0x24

	if (!m16src_ref) {
   10366:	4b25      	ldr	r3, [pc, #148]	; (103fc <m16src_stop+0xb8>)
   10368:	781b      	ldrb	r3, [r3, #0]
   1036a:	2b00      	cmp	r3, #0
   1036c:	d109      	bne.n	10382 <m16src_stop+0x3e>
   1036e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10370:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
   10372:	69bb      	ldr	r3, [r7, #24]
   10374:	f383 8811 	msr	BASEPRI, r3
   10378:	f3bf 8f6f 	isb	sy
		irq_unlock(imask);
		return -EALREADY;
   1037c:	f06f 0377 	mvn.w	r3, #119	; 0x77
   10380:	e038      	b.n	103f4 <m16src_stop+0xb0>
	}

	if (--m16src_ref) {
   10382:	4b1e      	ldr	r3, [pc, #120]	; (103fc <m16src_stop+0xb8>)
   10384:	781b      	ldrb	r3, [r3, #0]
   10386:	3b01      	subs	r3, #1
   10388:	b2da      	uxtb	r2, r3
   1038a:	4b1c      	ldr	r3, [pc, #112]	; (103fc <m16src_stop+0xb8>)
   1038c:	701a      	strb	r2, [r3, #0]
   1038e:	4b1b      	ldr	r3, [pc, #108]	; (103fc <m16src_stop+0xb8>)
   10390:	781b      	ldrb	r3, [r3, #0]
   10392:	2b00      	cmp	r3, #0
   10394:	d009      	beq.n	103aa <m16src_stop+0x66>
   10396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10398:	617b      	str	r3, [r7, #20]
   1039a:	697b      	ldr	r3, [r7, #20]
   1039c:	f383 8811 	msr	BASEPRI, r3
   103a0:	f3bf 8f6f 	isb	sy
		irq_unlock(imask);
		return -EBUSY;
   103a4:	f06f 030f 	mvn.w	r3, #15
   103a8:	e024      	b.n	103f4 <m16src_stop+0xb0>
	}

	if (m16src_grd) {
   103aa:	4b15      	ldr	r3, [pc, #84]	; (10400 <m16src_stop+0xbc>)
   103ac:	781b      	ldrb	r3, [r3, #0]
   103ae:	2b00      	cmp	r3, #0
   103b0:	d00f      	beq.n	103d2 <m16src_stop+0x8e>
		m16src_ref++;
   103b2:	4b12      	ldr	r3, [pc, #72]	; (103fc <m16src_stop+0xb8>)
   103b4:	781b      	ldrb	r3, [r3, #0]
   103b6:	3301      	adds	r3, #1
   103b8:	b2da      	uxtb	r2, r3
   103ba:	4b10      	ldr	r3, [pc, #64]	; (103fc <m16src_stop+0xb8>)
   103bc:	701a      	strb	r2, [r3, #0]
   103be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   103c0:	613b      	str	r3, [r7, #16]
   103c2:	693b      	ldr	r3, [r7, #16]
   103c4:	f383 8811 	msr	BASEPRI, r3
   103c8:	f3bf 8f6f 	isb	sy
		irq_unlock(imask);
		return -EAGAIN;
   103cc:	f06f 030a 	mvn.w	r3, #10
   103d0:	e010      	b.n	103f4 <m16src_stop+0xb0>
	}

	m16src_grd = 1U;
   103d2:	4b0b      	ldr	r3, [pc, #44]	; (10400 <m16src_stop+0xbc>)
   103d4:	2201      	movs	r2, #1
   103d6:	701a      	strb	r2, [r3, #0]
   103d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   103da:	60fb      	str	r3, [r7, #12]
   103dc:	68fb      	ldr	r3, [r7, #12]
   103de:	f383 8811 	msr	BASEPRI, r3
   103e2:	f3bf 8f6f 	isb	sy

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	nrf_clock_task_trigger(NRF_CLOCK_TASK_HFCLKSTOP);
   103e6:	2004      	movs	r0, #4
   103e8:	f010 f80e 	bl	20408 <nrf_clock_task_trigger>

	/* release resource guard */
	m16src_grd = 0U;
   103ec:	4b04      	ldr	r3, [pc, #16]	; (10400 <m16src_stop+0xbc>)
   103ee:	2200      	movs	r2, #0
   103f0:	701a      	strb	r2, [r3, #0]

	return 0;
   103f2:	2300      	movs	r3, #0
}
   103f4:	4618      	mov	r0, r3
   103f6:	3728      	adds	r7, #40	; 0x28
   103f8:	46bd      	mov	sp, r7
   103fa:	bd80      	pop	{r7, pc}
   103fc:	20006244 	.word	0x20006244
   10400:	20006245 	.word	0x20006245

00010404 <k32src_start>:

static int k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
   10404:	b580      	push	{r7, lr}
   10406:	b08a      	sub	sp, #40	; 0x28
   10408:	af00      	add	r7, sp, #0
   1040a:	6078      	str	r0, [r7, #4]
   1040c:	6039      	str	r1, [r7, #0]
	__asm__ volatile(
   1040e:	f04f 0320 	mov.w	r3, #32
   10412:	f3ef 8211 	mrs	r2, BASEPRI
   10416:	f383 8811 	msr	BASEPRI, r3
   1041a:	f3bf 8f6f 	isb	sy
   1041e:	617a      	str	r2, [r7, #20]
   10420:	613b      	str	r3, [r7, #16]
	return key;
   10422:	697b      	ldr	r3, [r7, #20]
	 * That is, a hardware check won't work here, because even if the LF
	 * clock is already running it might not be initialized. We need an
	 * initialized flag.
	 */

	imask = irq_lock();
   10424:	627b      	str	r3, [r7, #36]	; 0x24

	if (k32src_initialized) {
   10426:	4b3c      	ldr	r3, [pc, #240]	; (10518 <k32src_start+0x114>)
   10428:	781b      	ldrb	r3, [r3, #0]
   1042a:	2b00      	cmp	r3, #0
   1042c:	d007      	beq.n	1043e <k32src_start+0x3a>
   1042e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10430:	60fb      	str	r3, [r7, #12]
	__asm__ volatile(
   10432:	68fb      	ldr	r3, [r7, #12]
   10434:	f383 8811 	msr	BASEPRI, r3
   10438:	f3bf 8f6f 	isb	sy
		irq_unlock(imask);
		goto lf_already_started;
   1043c:	e051      	b.n	104e2 <k32src_start+0xde>
	}

	k32src_initialized = 1U;
   1043e:	4b36      	ldr	r3, [pc, #216]	; (10518 <k32src_start+0x114>)
   10440:	2201      	movs	r2, #1
   10442:	701a      	strb	r2, [r3, #0]
   10444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10446:	60bb      	str	r3, [r7, #8]
   10448:	68bb      	ldr	r3, [r7, #8]
   1044a:	f383 8811 	msr	BASEPRI, r3
   1044e:	f3bf 8f6f 	isb	sy

	irq_unlock(imask);

	/* Clear events if any */
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
   10452:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10456:	2200      	movs	r2, #0
   10458:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	/* Set LF Clock Source */
	lf_clk_src = POINTER_TO_UINT(sub_system);
   1045c:	683b      	ldr	r3, [r7, #0]
   1045e:	623b      	str	r3, [r7, #32]
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
   10460:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   10464:	6a3b      	ldr	r3, [r7, #32]
   10466:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518

#else /* !CONFIG_CLOCK_CONTROL_NRF_K32SRC_BLOCKING */
	/* NOTE: LFCLK will initially start running from the LFRC if LFXO is
	 *       selected.
	 */
	nrf_clock_int_enable(NRF_CLOCK_INT_LF_STARTED_MASK);
   1046a:	2002      	movs	r0, #2
   1046c:	f00f ffb0 	bl	203d0 <nrf_clock_int_enable>
	nrf_clock_task_trigger(NRF_CLOCK_TASK_LFCLKSTART);
   10470:	2008      	movs	r0, #8
   10472:	f00f ffc9 	bl	20408 <nrf_clock_task_trigger>

#if NRF_CLOCK_HAS_CALIBRATION
	/* If RC selected, calibrate and start timer for consecutive
	 * calibrations.
	 */
	nrf_clock_int_disable(NRF_CLOCK_INT_DONE_MASK |
   10476:	2018      	movs	r0, #24
   10478:	f00f ffb8 	bl	203ec <nrf_clock_int_disable>
			      NRF_CLOCK_INT_CTTO_MASK);
	NRF_CLOCK->EVENTS_DONE = 0;
   1047c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10480:	2200      	movs	r2, #0
   10482:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
   10486:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1048a:	2200      	movs	r2, #0
   1048c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
   10490:	6a3b      	ldr	r3, [r7, #32]
   10492:	f003 0303 	and.w	r3, r3, #3
   10496:	2b00      	cmp	r3, #0
   10498:	d122      	bne.n	104e0 <k32src_start+0xdc>
		int err;

		/* Set the Calibration Timer Initial Value */
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
   1049a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1049e:	2210      	movs	r2, #16
   104a0:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538

		/* Enable DONE and CTTO IRQs */
		nrf_clock_int_enable(NRF_CLOCK_INT_DONE_MASK |
   104a4:	2018      	movs	r0, #24
   104a6:	f00f ff93 	bl	203d0 <nrf_clock_int_enable>
				     NRF_CLOCK_INT_CTTO_MASK);

		/* If non-blocking LF clock start, then start HF clock in ISR */
		if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) == 0) {
   104aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   104ae:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
   104b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   104b6:	2b00      	cmp	r3, #0
   104b8:	d103      	bne.n	104c2 <k32src_start+0xbe>
			nrf_clock_int_enable(NRF_CLOCK_INT_LF_STARTED_MASK);
   104ba:	2002      	movs	r0, #2
   104bc:	f00f ff88 	bl	203d0 <nrf_clock_int_enable>
			goto lf_already_started;
   104c0:	e00f      	b.n	104e2 <k32src_start+0xde>
		/* Start HF clock, if already started then explicitly
		 * assert IRQ.
		 * NOTE: The INTENSET is used as state flag to start
		 * calibration in ISR.
		 */
		nrf_clock_int_enable(NRF_CLOCK_INT_HF_STARTED_MASK);
   104c2:	2001      	movs	r0, #1
   104c4:	f00f ff84 	bl	203d0 <nrf_clock_int_enable>

		err = m16src_start(dev, false);
   104c8:	2100      	movs	r1, #0
   104ca:	6878      	ldr	r0, [r7, #4]
   104cc:	f7ff fe9c 	bl	10208 <m16src_start>
   104d0:	61f8      	str	r0, [r7, #28]
		if (!err) {
   104d2:	69fb      	ldr	r3, [r7, #28]
   104d4:	2b00      	cmp	r3, #0
   104d6:	d103      	bne.n	104e0 <k32src_start+0xdc>
			NVIC_SetPendingIRQ(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
   104d8:	2000      	movs	r0, #0
   104da:	f7ff fe59 	bl	10190 <__NVIC_SetPendingIRQ>
   104de:	e000      	b.n	104e2 <k32src_start+0xde>
			__ASSERT_NO_MSG(err == -EINPROGRESS);
		}
	}
#endif /* NRF_CLOCK_HAS_CALIBRATION */

lf_already_started:
   104e0:	bf00      	nop
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
   104e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   104e6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   104ea:	f003 0303 	and.w	r3, r3, #3
   104ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   104f2:	61bb      	str	r3, [r7, #24]
	       CLOCK_LFCLKSTAT_STATE_Msk;
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
   104f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   104f8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
   104fc:	69bb      	ldr	r3, [r7, #24]
   104fe:	4013      	ands	r3, r2
   10500:	69ba      	ldr	r2, [r7, #24]
   10502:	429a      	cmp	r2, r3
   10504:	d101      	bne.n	1050a <k32src_start+0x106>
		return 0;
   10506:	2300      	movs	r3, #0
   10508:	e001      	b.n	1050e <k32src_start+0x10a>
	} else {
		return -EINPROGRESS;
   1050a:	f06f 0376 	mvn.w	r3, #118	; 0x76
	}
}
   1050e:	4618      	mov	r0, r3
   10510:	3728      	adds	r7, #40	; 0x28
   10512:	46bd      	mov	sp, r7
   10514:	bd80      	pop	{r7, pc}
   10516:	bf00      	nop
   10518:	20006246 	.word	0x20006246

0001051c <nrf_power_clock_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void nrf_power_clock_isr(void *arg)
{
   1051c:	b580      	push	{r7, lr}
   1051e:	b08a      	sub	sp, #40	; 0x28
   10520:	af00      	add	r7, sp, #0
   10522:	6078      	str	r0, [r7, #4]
	u8_t pof, hf_intenset, hf, lf_intenset, lf;
#if NRF_CLOCK_HAS_CALIBRATION
	u8_t ctto, done;
	struct device *dev = arg;
   10524:	687b      	ldr	r3, [r7, #4]
   10526:	623b      	str	r3, [r7, #32]
#endif
#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
	bool usb_detected, usb_pwr_rdy, usb_removed;
#endif

	pof = (NRF_POWER->EVENTS_POFWARN != 0);
   10528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1052c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   10530:	2b00      	cmp	r3, #0
   10532:	bf14      	ite	ne
   10534:	2301      	movne	r3, #1
   10536:	2300      	moveq	r3, #0
   10538:	b2db      	uxtb	r3, r3
   1053a:	77fb      	strb	r3, [r7, #31]

	hf_intenset = ((NRF_CLOCK->INTENSET &
   1053c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10540:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   10544:	f003 0301 	and.w	r3, r3, #1
		       CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
   10548:	2b00      	cmp	r3, #0
   1054a:	bf14      	ite	ne
   1054c:	2301      	movne	r3, #1
   1054e:	2300      	moveq	r3, #0
   10550:	b2db      	uxtb	r3, r3
	hf_intenset = ((NRF_CLOCK->INTENSET &
   10552:	77bb      	strb	r3, [r7, #30]
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
   10554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10558:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   1055c:	2b00      	cmp	r3, #0
   1055e:	bf14      	ite	ne
   10560:	2301      	movne	r3, #1
   10562:	2300      	moveq	r3, #0
   10564:	b2db      	uxtb	r3, r3
   10566:	777b      	strb	r3, [r7, #29]

	lf_intenset = ((NRF_CLOCK->INTENSET &
   10568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1056c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   10570:	f003 0302 	and.w	r3, r3, #2
		       CLOCK_INTENSET_LFCLKSTARTED_Msk) != 0);
   10574:	2b00      	cmp	r3, #0
   10576:	bf14      	ite	ne
   10578:	2301      	movne	r3, #1
   1057a:	2300      	moveq	r3, #0
   1057c:	b2db      	uxtb	r3, r3
	lf_intenset = ((NRF_CLOCK->INTENSET &
   1057e:	773b      	strb	r3, [r7, #28]
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
   10580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10584:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   10588:	2b00      	cmp	r3, #0
   1058a:	bf14      	ite	ne
   1058c:	2301      	movne	r3, #1
   1058e:	2300      	moveq	r3, #0
   10590:	b2db      	uxtb	r3, r3
   10592:	76fb      	strb	r3, [r7, #27]

#if NRF_CLOCK_HAS_CALIBRATION
	done = (NRF_CLOCK->EVENTS_DONE != 0);
   10594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10598:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   1059c:	2b00      	cmp	r3, #0
   1059e:	bf14      	ite	ne
   105a0:	2301      	movne	r3, #1
   105a2:	2300      	moveq	r3, #0
   105a4:	b2db      	uxtb	r3, r3
   105a6:	76bb      	strb	r3, [r7, #26]
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
   105a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   105ac:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   105b0:	2b00      	cmp	r3, #0
   105b2:	bf14      	ite	ne
   105b4:	2301      	movne	r3, #1
   105b6:	2300      	moveq	r3, #0
   105b8:	b2db      	uxtb	r3, r3
   105ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
	usb_detected = nrf_power_event_check(NRF_POWER_EVENT_USBDETECTED);
   105be:	f44f 708e 	mov.w	r0, #284	; 0x11c
   105c2:	f00f ff45 	bl	20450 <nrf_power_event_check>
   105c6:	4603      	mov	r3, r0
   105c8:	767b      	strb	r3, [r7, #25]
	usb_pwr_rdy = nrf_power_event_check(NRF_POWER_EVENT_USBPWRRDY);
   105ca:	f44f 7092 	mov.w	r0, #292	; 0x124
   105ce:	f00f ff3f 	bl	20450 <nrf_power_event_check>
   105d2:	4603      	mov	r3, r0
   105d4:	763b      	strb	r3, [r7, #24]
	usb_removed = nrf_power_event_check(NRF_POWER_EVENT_USBREMOVED);
   105d6:	f44f 7090 	mov.w	r0, #288	; 0x120
   105da:	f00f ff39 	bl	20450 <nrf_power_event_check>
   105de:	4603      	mov	r3, r0
   105e0:	75fb      	strb	r3, [r7, #23]
#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
			|| usb_detected || usb_pwr_rdy || usb_removed
#endif
	);

	if (pof) {
   105e2:	7ffb      	ldrb	r3, [r7, #31]
   105e4:	2b00      	cmp	r3, #0
   105e6:	d004      	beq.n	105f2 <nrf_power_clock_isr+0xd6>
		NRF_POWER->EVENTS_POFWARN = 0;
   105e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   105ec:	2200      	movs	r2, #0
   105ee:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}

	if (hf) {
   105f2:	7f7b      	ldrb	r3, [r7, #29]
   105f4:	2b00      	cmp	r3, #0
   105f6:	d004      	beq.n	10602 <nrf_power_clock_isr+0xe6>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   105f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   105fc:	2200      	movs	r2, #0
   105fe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}

	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
   10602:	7fbb      	ldrb	r3, [r7, #30]
   10604:	2b00      	cmp	r3, #0
   10606:	d017      	beq.n	10638 <nrf_power_clock_isr+0x11c>
   10608:	7f7b      	ldrb	r3, [r7, #29]
   1060a:	2b00      	cmp	r3, #0
   1060c:	d108      	bne.n	10620 <nrf_power_clock_isr+0x104>
   1060e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10612:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   10616:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
   1061a:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
   1061e:	d10b      	bne.n	10638 <nrf_power_clock_isr+0x11c>
				   (CLOCK_HFCLKSTAT_STATE_Msk |
				    CLOCK_HFCLKSTAT_SRC_Msk)))){
		/* INTENSET is used as state flag to start calibration,
		 * hence clear it here.
		 */
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
   10620:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10624:	2201      	movs	r2, #1
   10626:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
#if defined(CONFIG_SOC_SERIES_NRF52X)
		/* NOTE: Errata [192] CLOCK: LFRC frequency offset after
		 * calibration.
		 * Calibration start, workaround.
		 */
		*(volatile u32_t *)0x40000C34 = 0x00000002;
   1062a:	4b3a      	ldr	r3, [pc, #232]	; (10714 <nrf_power_clock_isr+0x1f8>)
   1062c:	2202      	movs	r2, #2
   1062e:	601a      	str	r2, [r3, #0]
#endif /* CONFIG_SOC_SERIES_NRF52X */

#if NRF_CLOCK_HAS_CALIBRATION
		/* Start Calibration */
		NRF_CLOCK->TASKS_CAL = 1;
   10630:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10634:	2201      	movs	r2, #1
   10636:	611a      	str	r2, [r3, #16]
#endif
	}

	if (lf) {
   10638:	7efb      	ldrb	r3, [r7, #27]
   1063a:	2b00      	cmp	r3, #0
   1063c:	d017      	beq.n	1066e <nrf_power_clock_isr+0x152>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
   1063e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10642:	2200      	movs	r2, #0
   10644:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

		if (lf_intenset) {
   10648:	7f3b      	ldrb	r3, [r7, #28]
   1064a:	2b00      	cmp	r3, #0
   1064c:	d00f      	beq.n	1066e <nrf_power_clock_isr+0x152>
			/* INTENSET is used as state flag to start calibration,
			 * hence clear it here.
			 */
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
   1064e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10652:	2202      	movs	r2, #2
   10654:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

#if NRF_CLOCK_HAS_CALIBRATION
			/* Start HF Clock if LF RC is used. */
			if ((NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) ==
   10658:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1065c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   10660:	f003 0303 	and.w	r3, r3, #3
   10664:	2b00      	cmp	r3, #0
   10666:	d102      	bne.n	1066e <nrf_power_clock_isr+0x152>
			    CLOCK_LFCLKSRCCOPY_SRC_RC) {
				ctto = 1U;
   10668:	2301      	movs	r3, #1
   1066a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
		}
	}

#if NRF_CLOCK_HAS_CALIBRATION
	if (done) {
   1066e:	7ebb      	ldrb	r3, [r7, #26]
   10670:	2b00      	cmp	r3, #0
   10672:	d010      	beq.n	10696 <nrf_power_clock_isr+0x17a>
#if defined(CONFIG_SOC_SERIES_NRF52X)
		/* NOTE: Errata [192] CLOCK: LFRC frequency offset after
		 * calibration.
		 * Calibration done, workaround.
		 */
		*(volatile u32_t *)0x40000C34 = 0x00000000;
   10674:	4b27      	ldr	r3, [pc, #156]	; (10714 <nrf_power_clock_isr+0x1f8>)
   10676:	2200      	movs	r2, #0
   10678:	601a      	str	r2, [r3, #0]
#endif /* CONFIG_SOC_SERIES_NRF52X */

		NRF_CLOCK->EVENTS_DONE = 0;
   1067a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1067e:	2200      	movs	r2, #0
   10680:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

		/* Calibration done, stop 16M Xtal. */
		err = m16src_stop(dev, NULL);
   10684:	2100      	movs	r1, #0
   10686:	6a38      	ldr	r0, [r7, #32]
   10688:	f7ff fe5c 	bl	10344 <m16src_stop>
   1068c:	6138      	str	r0, [r7, #16]
		__ASSERT_NO_MSG(!err || err == -EBUSY);

		/* Start timer for next calibration. */
		NRF_CLOCK->TASKS_CTSTART = 1;
   1068e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10692:	2201      	movs	r2, #1
   10694:	615a      	str	r2, [r3, #20]
	}

	if (ctto) {
   10696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   1069a:	2b00      	cmp	r3, #0
   1069c:	d014      	beq.n	106c8 <nrf_power_clock_isr+0x1ac>
		int err;

		NRF_CLOCK->EVENTS_CTTO = 0;
   1069e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   106a2:	2200      	movs	r2, #0
   106a4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

		/* Start HF clock, if already started
		 * then explicitly assert IRQ; we use the INTENSET
		 * as a state flag to start calibration.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
   106a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   106ac:	2201      	movs	r2, #1
   106ae:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

		err = m16src_start(dev, false);
   106b2:	2100      	movs	r1, #0
   106b4:	6a38      	ldr	r0, [r7, #32]
   106b6:	f7ff fda7 	bl	10208 <m16src_start>
   106ba:	60f8      	str	r0, [r7, #12]
		if (!err) {
   106bc:	68fb      	ldr	r3, [r7, #12]
   106be:	2b00      	cmp	r3, #0
   106c0:	d102      	bne.n	106c8 <nrf_power_clock_isr+0x1ac>
			NVIC_SetPendingIRQ(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
   106c2:	2000      	movs	r0, #0
   106c4:	f7ff fd64 	bl	10190 <__NVIC_SetPendingIRQ>
		}
	}
#endif /* NRF_CLOCK_HAS_CALIBRATION */

#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
	if (usb_detected) {
   106c8:	7e7b      	ldrb	r3, [r7, #25]
   106ca:	2b00      	cmp	r3, #0
   106cc:	d007      	beq.n	106de <nrf_power_clock_isr+0x1c2>
		nrf_power_event_clear(NRF_POWER_EVENT_USBDETECTED);
   106ce:	f44f 708e 	mov.w	r0, #284	; 0x11c
   106d2:	f00f fea8 	bl	20426 <nrf_power_event_clear>
		power_event_cb(NRF_POWER_EVENT_USBDETECTED);
   106d6:	f44f 708e 	mov.w	r0, #284	; 0x11c
   106da:	f00f fee8 	bl	204ae <power_event_cb>
	}

	if (usb_pwr_rdy) {
   106de:	7e3b      	ldrb	r3, [r7, #24]
   106e0:	2b00      	cmp	r3, #0
   106e2:	d007      	beq.n	106f4 <nrf_power_clock_isr+0x1d8>
		nrf_power_event_clear(NRF_POWER_EVENT_USBPWRRDY);
   106e4:	f44f 7092 	mov.w	r0, #292	; 0x124
   106e8:	f00f fe9d 	bl	20426 <nrf_power_event_clear>
		power_event_cb(NRF_POWER_EVENT_USBPWRRDY);
   106ec:	f44f 7092 	mov.w	r0, #292	; 0x124
   106f0:	f00f fedd 	bl	204ae <power_event_cb>
	}

	if (usb_removed) {
   106f4:	7dfb      	ldrb	r3, [r7, #23]
   106f6:	2b00      	cmp	r3, #0
   106f8:	d007      	beq.n	1070a <nrf_power_clock_isr+0x1ee>
		nrf_power_event_clear(NRF_POWER_EVENT_USBREMOVED);
   106fa:	f44f 7090 	mov.w	r0, #288	; 0x120
   106fe:	f00f fe92 	bl	20426 <nrf_power_event_clear>
		power_event_cb(NRF_POWER_EVENT_USBREMOVED);
   10702:	f44f 7090 	mov.w	r0, #288	; 0x120
   10706:	f00f fed2 	bl	204ae <power_event_cb>
	}
#endif
}
   1070a:	bf00      	nop
   1070c:	3728      	adds	r7, #40	; 0x28
   1070e:	46bd      	mov	sp, r7
   10710:	bd80      	pop	{r7, pc}
   10712:	bf00      	nop
   10714:	40000c34 	.word	0x40000c34

00010718 <k_work_submit>:
{
   10718:	b580      	push	{r7, lr}
   1071a:	b082      	sub	sp, #8
   1071c:	af00      	add	r7, sp, #0
   1071e:	6078      	str	r0, [r7, #4]
	k_work_submit_to_queue(&k_sys_work_q, work);
   10720:	6879      	ldr	r1, [r7, #4]
   10722:	4803      	ldr	r0, [pc, #12]	; (10730 <k_work_submit+0x18>)
   10724:	f00f ff79 	bl	2061a <k_work_submit_to_queue>
}
   10728:	bf00      	nop
   1072a:	3708      	adds	r7, #8
   1072c:	46bd      	mov	sp, r7
   1072e:	bd80      	pop	{r7, pc}
   10730:	200061b4 	.word	0x200061b4

00010734 <nrf_usbd_setup_bmrequesttype_get>:
{
   10734:	b480      	push	{r7}
   10736:	af00      	add	r7, sp, #0
    return (uint8_t)(NRF_USBD->BMREQUESTTYPE);
   10738:	4b03      	ldr	r3, [pc, #12]	; (10748 <nrf_usbd_setup_bmrequesttype_get+0x14>)
   1073a:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
   1073e:	b2db      	uxtb	r3, r3
}
   10740:	4618      	mov	r0, r3
   10742:	46bd      	mov	sp, r7
   10744:	bc80      	pop	{r7}
   10746:	4770      	bx	lr
   10748:	40027000 	.word	0x40027000

0001074c <nrf_usbd_setup_brequest_get>:
{
   1074c:	b480      	push	{r7}
   1074e:	af00      	add	r7, sp, #0
    return (uint8_t)(NRF_USBD->BREQUEST);
   10750:	4b03      	ldr	r3, [pc, #12]	; (10760 <nrf_usbd_setup_brequest_get+0x14>)
   10752:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
   10756:	b2db      	uxtb	r3, r3
}
   10758:	4618      	mov	r0, r3
   1075a:	46bd      	mov	sp, r7
   1075c:	bc80      	pop	{r7}
   1075e:	4770      	bx	lr
   10760:	40027000 	.word	0x40027000

00010764 <nrf_usbd_setup_wvalue_get>:
{
   10764:	b480      	push	{r7}
   10766:	b083      	sub	sp, #12
   10768:	af00      	add	r7, sp, #0
    const uint16_t val = NRF_USBD->WVALUEL;
   1076a:	4b09      	ldr	r3, [pc, #36]	; (10790 <nrf_usbd_setup_wvalue_get+0x2c>)
   1076c:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
   10770:	80fb      	strh	r3, [r7, #6]
    return (uint16_t)(val | ((NRF_USBD->WVALUEH) << 8));
   10772:	4b07      	ldr	r3, [pc, #28]	; (10790 <nrf_usbd_setup_wvalue_get+0x2c>)
   10774:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
   10778:	b29b      	uxth	r3, r3
   1077a:	021b      	lsls	r3, r3, #8
   1077c:	b29a      	uxth	r2, r3
   1077e:	88fb      	ldrh	r3, [r7, #6]
   10780:	4313      	orrs	r3, r2
   10782:	b29b      	uxth	r3, r3
}
   10784:	4618      	mov	r0, r3
   10786:	370c      	adds	r7, #12
   10788:	46bd      	mov	sp, r7
   1078a:	bc80      	pop	{r7}
   1078c:	4770      	bx	lr
   1078e:	bf00      	nop
   10790:	40027000 	.word	0x40027000

00010794 <nrf_usbd_setup_windex_get>:
{
   10794:	b480      	push	{r7}
   10796:	b083      	sub	sp, #12
   10798:	af00      	add	r7, sp, #0
    const uint16_t val = NRF_USBD->WINDEXL;
   1079a:	4b09      	ldr	r3, [pc, #36]	; (107c0 <nrf_usbd_setup_windex_get+0x2c>)
   1079c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
   107a0:	80fb      	strh	r3, [r7, #6]
    return (uint16_t)(val | ((NRF_USBD->WINDEXH) << 8));
   107a2:	4b07      	ldr	r3, [pc, #28]	; (107c0 <nrf_usbd_setup_windex_get+0x2c>)
   107a4:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
   107a8:	b29b      	uxth	r3, r3
   107aa:	021b      	lsls	r3, r3, #8
   107ac:	b29a      	uxth	r2, r3
   107ae:	88fb      	ldrh	r3, [r7, #6]
   107b0:	4313      	orrs	r3, r2
   107b2:	b29b      	uxth	r3, r3
}
   107b4:	4618      	mov	r0, r3
   107b6:	370c      	adds	r7, #12
   107b8:	46bd      	mov	sp, r7
   107ba:	bc80      	pop	{r7}
   107bc:	4770      	bx	lr
   107be:	bf00      	nop
   107c0:	40027000 	.word	0x40027000

000107c4 <nrf_usbd_setup_wlength_get>:
{
   107c4:	b480      	push	{r7}
   107c6:	b083      	sub	sp, #12
   107c8:	af00      	add	r7, sp, #0
    const uint16_t val = NRF_USBD->WLENGTHL;
   107ca:	4b09      	ldr	r3, [pc, #36]	; (107f0 <nrf_usbd_setup_wlength_get+0x2c>)
   107cc:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
   107d0:	80fb      	strh	r3, [r7, #6]
    return (uint16_t)(val | ((NRF_USBD->WLENGTHH) << 8));
   107d2:	4b07      	ldr	r3, [pc, #28]	; (107f0 <nrf_usbd_setup_wlength_get+0x2c>)
   107d4:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   107d8:	b29b      	uxth	r3, r3
   107da:	021b      	lsls	r3, r3, #8
   107dc:	b29a      	uxth	r2, r3
   107de:	88fb      	ldrh	r3, [r7, #6]
   107e0:	4313      	orrs	r3, r2
   107e2:	b29b      	uxth	r3, r3
}
   107e4:	4618      	mov	r0, r3
   107e6:	370c      	adds	r7, #12
   107e8:	46bd      	mov	sp, r7
   107ea:	bc80      	pop	{r7}
   107ec:	4770      	bx	lr
   107ee:	bf00      	nop
   107f0:	40027000 	.word	0x40027000

000107f4 <nrf_usbd_ep_amount_get>:

uint32_t nrf_usbd_ep_amount_get(uint8_t ep)
{
   107f4:	b580      	push	{r7, lr}
   107f6:	b084      	sub	sp, #16
   107f8:	af00      	add	r7, sp, #0
   107fa:	4603      	mov	r3, r0
   107fc:	71fb      	strb	r3, [r7, #7]
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
   107fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
   10802:	2b00      	cmp	r3, #0
   10804:	da23      	bge.n	1084e <nrf_usbd_ep_amount_get+0x5a>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   10806:	79fb      	ldrb	r3, [r7, #7]
   10808:	f003 0308 	and.w	r3, r3, #8
   1080c:	2b00      	cmp	r3, #0
   1080e:	d004      	beq.n	1081a <nrf_usbd_ep_amount_get+0x26>
        {
            ret = NRF_USBD->ISOIN.AMOUNT;
   10810:	4b23      	ldr	r3, [pc, #140]	; (108a0 <nrf_usbd_ep_amount_get+0xac>)
   10812:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
   10816:	60fb      	str	r3, [r7, #12]
   10818:	e03c      	b.n	10894 <nrf_usbd_ep_amount_get+0xa0>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   1081a:	79fb      	ldrb	r3, [r7, #7]
   1081c:	f003 030f 	and.w	r3, r3, #15
   10820:	72fb      	strb	r3, [r7, #11]
            NRFX_ASSERT(epnr < NRFX_ARRAY_SIZE(NRF_USBD->EPOUT));
   10822:	7afb      	ldrb	r3, [r7, #11]
   10824:	2b07      	cmp	r3, #7
   10826:	d906      	bls.n	10836 <nrf_usbd_ep_amount_get+0x42>
   10828:	4b1e      	ldr	r3, [pc, #120]	; (108a4 <nrf_usbd_ep_amount_get+0xb0>)
   1082a:	4a1f      	ldr	r2, [pc, #124]	; (108a8 <nrf_usbd_ep_amount_get+0xb4>)
   1082c:	f44f 61ad 	mov.w	r1, #1384	; 0x568
   10830:	481e      	ldr	r0, [pc, #120]	; (108ac <nrf_usbd_ep_amount_get+0xb8>)
   10832:	f7ef ffa3 	bl	77c <__assert_func>
            ret = NRF_USBD->EPIN[epnr].AMOUNT;
   10836:	491a      	ldr	r1, [pc, #104]	; (108a0 <nrf_usbd_ep_amount_get+0xac>)
   10838:	7afa      	ldrb	r2, [r7, #11]
   1083a:	4613      	mov	r3, r2
   1083c:	009b      	lsls	r3, r3, #2
   1083e:	4413      	add	r3, r2
   10840:	009b      	lsls	r3, r3, #2
   10842:	440b      	add	r3, r1
   10844:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
   10848:	681b      	ldr	r3, [r3, #0]
   1084a:	60fb      	str	r3, [r7, #12]
   1084c:	e022      	b.n	10894 <nrf_usbd_ep_amount_get+0xa0>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   1084e:	79fb      	ldrb	r3, [r7, #7]
   10850:	f003 0308 	and.w	r3, r3, #8
   10854:	2b00      	cmp	r3, #0
   10856:	d004      	beq.n	10862 <nrf_usbd_ep_amount_get+0x6e>
        {
            ret = NRF_USBD->ISOOUT.AMOUNT;
   10858:	4b11      	ldr	r3, [pc, #68]	; (108a0 <nrf_usbd_ep_amount_get+0xac>)
   1085a:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
   1085e:	60fb      	str	r3, [r7, #12]
   10860:	e018      	b.n	10894 <nrf_usbd_ep_amount_get+0xa0>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   10862:	79fb      	ldrb	r3, [r7, #7]
   10864:	f003 030f 	and.w	r3, r3, #15
   10868:	72bb      	strb	r3, [r7, #10]
            NRFX_ASSERT(epnr < NRFX_ARRAY_SIZE(NRF_USBD->EPOUT));
   1086a:	7abb      	ldrb	r3, [r7, #10]
   1086c:	2b07      	cmp	r3, #7
   1086e:	d906      	bls.n	1087e <nrf_usbd_ep_amount_get+0x8a>
   10870:	4b0c      	ldr	r3, [pc, #48]	; (108a4 <nrf_usbd_ep_amount_get+0xb0>)
   10872:	4a0d      	ldr	r2, [pc, #52]	; (108a8 <nrf_usbd_ep_amount_get+0xb4>)
   10874:	f240 5175 	movw	r1, #1397	; 0x575
   10878:	480c      	ldr	r0, [pc, #48]	; (108ac <nrf_usbd_ep_amount_get+0xb8>)
   1087a:	f7ef ff7f 	bl	77c <__assert_func>
            ret = NRF_USBD->EPOUT[epnr].AMOUNT;
   1087e:	4908      	ldr	r1, [pc, #32]	; (108a0 <nrf_usbd_ep_amount_get+0xac>)
   10880:	7aba      	ldrb	r2, [r7, #10]
   10882:	4613      	mov	r3, r2
   10884:	009b      	lsls	r3, r3, #2
   10886:	4413      	add	r3, r2
   10888:	009b      	lsls	r3, r3, #2
   1088a:	440b      	add	r3, r1
   1088c:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
   10890:	681b      	ldr	r3, [r3, #0]
   10892:	60fb      	str	r3, [r7, #12]
        }
    }

    return ret;
   10894:	68fb      	ldr	r3, [r7, #12]
}
   10896:	4618      	mov	r0, r3
   10898:	3710      	adds	r7, #16
   1089a:	46bd      	mov	sp, r7
   1089c:	bd80      	pop	{r7, pc}
   1089e:	bf00      	nop
   108a0:	40027000 	.word	0x40027000
   108a4:	0002e18c 	.word	0x0002e18c
   108a8:	0002eefc 	.word	0x0002eefc
   108ac:	0002e1fc 	.word	0x0002e1fc

000108b0 <get_usbd_ctx>:
	.attached = false,
	.ready = false,
};

static inline struct nrf_usbd_ctx *get_usbd_ctx(void)
{
   108b0:	b480      	push	{r7}
   108b2:	af00      	add	r7, sp, #0
	return &usbd_ctx;
   108b4:	4b02      	ldr	r3, [pc, #8]	; (108c0 <get_usbd_ctx+0x10>)
}
   108b6:	4618      	mov	r0, r3
   108b8:	46bd      	mov	sp, r7
   108ba:	bc80      	pop	{r7}
   108bc:	4770      	bx	lr
   108be:	bf00      	nop
   108c0:	20003a94 	.word	0x20003a94

000108c4 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
   108c4:	b580      	push	{r7, lr}
   108c6:	b082      	sub	sp, #8
   108c8:	af00      	add	r7, sp, #0
   108ca:	6078      	str	r0, [r7, #4]
	k_fifo_put(&work_queue, ev);
   108cc:	6879      	ldr	r1, [r7, #4]
   108ce:	4803      	ldr	r0, [pc, #12]	; (108dc <usbd_evt_put+0x18>)
   108d0:	f019 ff4d 	bl	2a76e <k_queue_append>
}
   108d4:	bf00      	nop
   108d6:	3708      	adds	r7, #8
   108d8:	46bd      	mov	sp, r7
   108da:	bd80      	pop	{r7, pc}
   108dc:	2000fe84 	.word	0x2000fe84

000108e0 <usbd_evt_get>:

/**
 * @brief Get next enqueued USBD event if present.
 */
static inline struct usbd_event *usbd_evt_get(void)
{
   108e0:	b580      	push	{r7, lr}
   108e2:	af00      	add	r7, sp, #0
	return k_fifo_get(&work_queue, K_NO_WAIT);
   108e4:	2100      	movs	r1, #0
   108e6:	4803      	ldr	r0, [pc, #12]	; (108f4 <usbd_evt_get+0x14>)
   108e8:	f00f feb1 	bl	2064e <k_queue_get>
   108ec:	4603      	mov	r3, r0
}
   108ee:	4618      	mov	r0, r3
   108f0:	bd80      	pop	{r7, pc}
   108f2:	bf00      	nop
   108f4:	2000fe84 	.word	0x2000fe84

000108f8 <usbd_evt_alloc>:
 * This function should be called prior to usbd_evt_put().
 *
 * @returns Pointer to the allocated event or NULL if there was no space left.
 */
static inline struct usbd_event *usbd_evt_alloc(void)
{
   108f8:	b580      	push	{r7, lr}
   108fa:	b088      	sub	sp, #32
   108fc:	af00      	add	r7, sp, #0
	int ret;
	struct usbd_event *ev;
	struct k_mem_block block;

	ret = k_mem_pool_alloc(&fifo_elem_pool, &block,
   108fe:	f107 010c 	add.w	r1, r7, #12
   10902:	2300      	movs	r3, #0
   10904:	2218      	movs	r2, #24
   10906:	4820      	ldr	r0, [pc, #128]	; (10988 <usbd_evt_alloc+0x90>)
   10908:	f019 fa0e 	bl	29d28 <k_mem_pool_alloc>
   1090c:	61f8      	str	r0, [r7, #28]
			       sizeof(struct usbd_event),
			       K_NO_WAIT);

	if (ret < 0) {
   1090e:	69fb      	ldr	r3, [r7, #28]
   10910:	2b00      	cmp	r3, #0
   10912:	da2a      	bge.n	1096a <usbd_evt_alloc+0x72>
		LOG_ERR("USBD event allocation failed!");
   10914:	f00f fe5a 	bl	205cc <_is_user_context>
   10918:	4603      	mov	r3, r0
   1091a:	76fb      	strb	r3, [r7, #27]
		/* This should NOT happen in a properly designed system.
		 * Allocation may fail if workqueue thread is starved
		 * or event queue size is too small (CONFIG_USB_NRFX_EVT_QUEUE_SIZE).
		 * Wipe all events, free the space and schedule reinitialization.
		 */
		usbd_evt_flush();
   1091c:	f00f ffef 	bl	208fe <usbd_evt_flush>

		ret = k_mem_pool_alloc(&fifo_elem_pool, &block,
   10920:	f107 010c 	add.w	r1, r7, #12
   10924:	2300      	movs	r3, #0
   10926:	2218      	movs	r2, #24
   10928:	4817      	ldr	r0, [pc, #92]	; (10988 <usbd_evt_alloc+0x90>)
   1092a:	f019 f9fd 	bl	29d28 <k_mem_pool_alloc>
   1092e:	61f8      	str	r0, [r7, #28]
					       sizeof(struct usbd_event),
					       K_NO_WAIT);
		if (ret < 0) {
   10930:	69fb      	ldr	r3, [r7, #28]
   10932:	2b00      	cmp	r3, #0
   10934:	da05      	bge.n	10942 <usbd_evt_alloc+0x4a>
			/* This should never fail in a properly operating system. */
			LOG_ERR("USBD event memory corrupted.");
   10936:	f00f fe49 	bl	205cc <_is_user_context>
   1093a:	4603      	mov	r3, r0
   1093c:	76bb      	strb	r3, [r7, #26]
			__ASSERT_NO_MSG(0);
			return NULL;
   1093e:	2300      	movs	r3, #0
   10940:	e01e      	b.n	10980 <usbd_evt_alloc+0x88>
		}

		ev = (struct usbd_event *)block.data;
   10942:	68fb      	ldr	r3, [r7, #12]
   10944:	617b      	str	r3, [r7, #20]
		ev->block = block;
   10946:	697b      	ldr	r3, [r7, #20]
   10948:	3304      	adds	r3, #4
   1094a:	f107 020c 	add.w	r2, r7, #12
   1094e:	e892 0003 	ldmia.w	r2, {r0, r1}
   10952:	e883 0003 	stmia.w	r3, {r0, r1}
		ev->evt_type = USBD_EVT_REINIT;
   10956:	697b      	ldr	r3, [r7, #20]
   10958:	2204      	movs	r2, #4
   1095a:	751a      	strb	r2, [r3, #20]
		usbd_evt_put(ev);
   1095c:	6978      	ldr	r0, [r7, #20]
   1095e:	f7ff ffb1 	bl	108c4 <usbd_evt_put>
		usbd_work_schedule();
   10962:	f00f ffb4 	bl	208ce <usbd_work_schedule>

		return NULL;
   10966:	2300      	movs	r3, #0
   10968:	e00a      	b.n	10980 <usbd_evt_alloc+0x88>
	}

	ev = (struct usbd_event *)block.data;
   1096a:	68fb      	ldr	r3, [r7, #12]
   1096c:	617b      	str	r3, [r7, #20]
	ev->block = block;
   1096e:	697b      	ldr	r3, [r7, #20]
   10970:	3304      	adds	r3, #4
   10972:	f107 020c 	add.w	r2, r7, #12
   10976:	e892 0003 	ldmia.w	r2, {r0, r1}
   1097a:	e883 0003 	stmia.w	r3, {r0, r1}

	return ev;
   1097e:	697b      	ldr	r3, [r7, #20]
}
   10980:	4618      	mov	r0, r3
   10982:	3720      	adds	r7, #32
   10984:	46bd      	mov	sp, r7
   10986:	bd80      	pop	{r7, pc}
   10988:	2000fdd4 	.word	0x2000fdd4

0001098c <usb_dc_nrfx_power_event_callback>:

void usb_dc_nrfx_power_event_callback(nrf_power_event_t event)
{
   1098c:	b580      	push	{r7, lr}
   1098e:	b086      	sub	sp, #24
   10990:	af00      	add	r7, sp, #0
   10992:	4603      	mov	r3, r0
   10994:	80fb      	strh	r3, [r7, #6]
	enum usbd_periph_state new_state;

	switch (event) {
   10996:	88fb      	ldrh	r3, [r7, #6]
   10998:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
   1099c:	d00b      	beq.n	109b6 <usb_dc_nrfx_power_event_callback+0x2a>
   1099e:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
   109a2:	d005      	beq.n	109b0 <usb_dc_nrfx_power_event_callback+0x24>
   109a4:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
   109a8:	d108      	bne.n	109bc <usb_dc_nrfx_power_event_callback+0x30>
	case NRF_POWER_EVENT_USBDETECTED:
		new_state = USBD_ATTACHED;
   109aa:	2301      	movs	r3, #1
   109ac:	75fb      	strb	r3, [r7, #23]
		break;
   109ae:	e00a      	b.n	109c6 <usb_dc_nrfx_power_event_callback+0x3a>
	case NRF_POWER_EVENT_USBPWRRDY:
		new_state = USBD_POWERED;
   109b0:	2302      	movs	r3, #2
   109b2:	75fb      	strb	r3, [r7, #23]
		break;
   109b4:	e007      	b.n	109c6 <usb_dc_nrfx_power_event_callback+0x3a>
	case NRF_POWER_EVENT_USBREMOVED:
		new_state = USBD_DETACHED;
   109b6:	2300      	movs	r3, #0
   109b8:	75fb      	strb	r3, [r7, #23]
		break;
   109ba:	e004      	b.n	109c6 <usb_dc_nrfx_power_event_callback+0x3a>
	default:
		LOG_ERR("Unknown USB power event");
   109bc:	f00f fe06 	bl	205cc <_is_user_context>
   109c0:	4603      	mov	r3, r0
   109c2:	75bb      	strb	r3, [r7, #22]
		return;
   109c4:	e016      	b.n	109f4 <usb_dc_nrfx_power_event_callback+0x68>
	}

	struct usbd_event *ev = usbd_evt_alloc();
   109c6:	f7ff ff97 	bl	108f8 <usbd_evt_alloc>
   109ca:	6138      	str	r0, [r7, #16]

	if (!ev) {
   109cc:	693b      	ldr	r3, [r7, #16]
   109ce:	2b00      	cmp	r3, #0
   109d0:	d00f      	beq.n	109f2 <usb_dc_nrfx_power_event_callback+0x66>
		return;
	}

	ev->evt_type = USBD_EVT_POWER;
   109d2:	693b      	ldr	r3, [r7, #16]
   109d4:	2200      	movs	r2, #0
   109d6:	751a      	strb	r2, [r3, #20]
	ev->evt.pwr_evt.state = new_state;
   109d8:	693b      	ldr	r3, [r7, #16]
   109da:	7dfa      	ldrb	r2, [r7, #23]
   109dc:	731a      	strb	r2, [r3, #12]


	usbd_evt_put(ev);
   109de:	6938      	ldr	r0, [r7, #16]
   109e0:	f7ff ff70 	bl	108c4 <usbd_evt_put>

	if (usbd_ctx.attached) {
   109e4:	4b05      	ldr	r3, [pc, #20]	; (109fc <usb_dc_nrfx_power_event_callback+0x70>)
   109e6:	791b      	ldrb	r3, [r3, #4]
   109e8:	2b00      	cmp	r3, #0
   109ea:	d003      	beq.n	109f4 <usb_dc_nrfx_power_event_callback+0x68>
		usbd_work_schedule();
   109ec:	f00f ff6f 	bl	208ce <usbd_work_schedule>
   109f0:	e000      	b.n	109f4 <usb_dc_nrfx_power_event_callback+0x68>
		return;
   109f2:	bf00      	nop
	}
}
   109f4:	3718      	adds	r7, #24
   109f6:	46bd      	mov	sp, r7
   109f8:	bd80      	pop	{r7, pc}
   109fa:	bf00      	nop
   109fc:	20003a94 	.word	0x20003a94

00010a00 <hf_clock_enable>:
 * @param blocking	Set true to block wait till HF clock stabilizes.
 *
 * @return 0 on success, error number otherwise
 */
static int hf_clock_enable(bool on, bool blocking)
{
   10a00:	b580      	push	{r7, lr}
   10a02:	b088      	sub	sp, #32
   10a04:	af00      	add	r7, sp, #0
   10a06:	4603      	mov	r3, r0
   10a08:	460a      	mov	r2, r1
   10a0a:	71fb      	strb	r3, [r7, #7]
   10a0c:	4613      	mov	r3, r2
   10a0e:	71bb      	strb	r3, [r7, #6]
	int ret = -ENODEV;
   10a10:	f06f 0312 	mvn.w	r3, #18
   10a14:	61fb      	str	r3, [r7, #28]
	struct device *clock;
	static bool clock_requested;

	clock = device_get_binding(DT_NORDIC_NRF_CLOCK_0_LABEL "_16M");
   10a16:	4827      	ldr	r0, [pc, #156]	; (10ab4 <hf_clock_enable+0xb4>)
   10a18:	f00f fe57 	bl	206ca <device_get_binding>
   10a1c:	61b8      	str	r0, [r7, #24]
	if (!clock) {
   10a1e:	69bb      	ldr	r3, [r7, #24]
   10a20:	2b00      	cmp	r3, #0
   10a22:	d105      	bne.n	10a30 <hf_clock_enable+0x30>
		LOG_ERR("NRF HF Clock device not found!");
   10a24:	f00f fdd2 	bl	205cc <_is_user_context>
   10a28:	4603      	mov	r3, r0
   10a2a:	75fb      	strb	r3, [r7, #23]
		return ret;
   10a2c:	69fb      	ldr	r3, [r7, #28]
   10a2e:	e03c      	b.n	10aaa <hf_clock_enable+0xaa>
	}

	if (on) {
   10a30:	79fb      	ldrb	r3, [r7, #7]
   10a32:	2b00      	cmp	r3, #0
   10a34:	d00c      	beq.n	10a50 <hf_clock_enable+0x50>
		if (clock_requested) {
   10a36:	4b20      	ldr	r3, [pc, #128]	; (10ab8 <hf_clock_enable+0xb8>)
   10a38:	781b      	ldrb	r3, [r3, #0]
   10a3a:	2b00      	cmp	r3, #0
   10a3c:	d001      	beq.n	10a42 <hf_clock_enable+0x42>
			/* Do not request HFCLK multiple times. */
			return 0;
   10a3e:	2300      	movs	r3, #0
   10a40:	e033      	b.n	10aaa <hf_clock_enable+0xaa>
		}
		ret = clock_control_on(clock, (void *)blocking);
   10a42:	79bb      	ldrb	r3, [r7, #6]
   10a44:	4619      	mov	r1, r3
   10a46:	69b8      	ldr	r0, [r7, #24]
   10a48:	f00f fe4b 	bl	206e2 <clock_control_on>
   10a4c:	61f8      	str	r0, [r7, #28]
   10a4e:	e014      	b.n	10a7a <hf_clock_enable+0x7a>
	} else {
		if (!clock_requested) {
   10a50:	4b19      	ldr	r3, [pc, #100]	; (10ab8 <hf_clock_enable+0xb8>)
   10a52:	781b      	ldrb	r3, [r3, #0]
   10a54:	f083 0301 	eor.w	r3, r3, #1
   10a58:	b2db      	uxtb	r3, r3
   10a5a:	2b00      	cmp	r3, #0
   10a5c:	d001      	beq.n	10a62 <hf_clock_enable+0x62>
			/* Cancel the operation if clock has not
			 * been requested by this driver before.
			 */
			return 0;
   10a5e:	2300      	movs	r3, #0
   10a60:	e023      	b.n	10aaa <hf_clock_enable+0xaa>
		}
		ret = clock_control_off(clock, (void *)blocking);
   10a62:	79bb      	ldrb	r3, [r7, #6]
   10a64:	4619      	mov	r1, r3
   10a66:	69b8      	ldr	r0, [r7, #24]
   10a68:	f00f fe4d 	bl	20706 <clock_control_off>
   10a6c:	61f8      	str	r0, [r7, #28]
		if (ret == -EBUSY) {
   10a6e:	69fb      	ldr	r3, [r7, #28]
   10a70:	f113 0f10 	cmn.w	r3, #16
   10a74:	d101      	bne.n	10a7a <hf_clock_enable+0x7a>
			/* This is an expected behaviour.
			 * -EBUSY means that some other module has also
			 * requested the clock to run.
			 */
			ret = 0;
   10a76:	2300      	movs	r3, #0
   10a78:	61fb      	str	r3, [r7, #28]
		}
	}

	if (ret && (blocking || (ret != -EINPROGRESS))) {
   10a7a:	69fb      	ldr	r3, [r7, #28]
   10a7c:	2b00      	cmp	r3, #0
   10a7e:	d00c      	beq.n	10a9a <hf_clock_enable+0x9a>
   10a80:	79bb      	ldrb	r3, [r7, #6]
   10a82:	2b00      	cmp	r3, #0
   10a84:	d103      	bne.n	10a8e <hf_clock_enable+0x8e>
   10a86:	69fb      	ldr	r3, [r7, #28]
   10a88:	f113 0f77 	cmn.w	r3, #119	; 0x77
   10a8c:	d005      	beq.n	10a9a <hf_clock_enable+0x9a>
		LOG_ERR("HF clock %s fail: %d",
   10a8e:	f00f fd9d 	bl	205cc <_is_user_context>
   10a92:	4603      	mov	r3, r0
   10a94:	75bb      	strb	r3, [r7, #22]
			on ? "start" : "stop", ret);
		return ret;
   10a96:	69fb      	ldr	r3, [r7, #28]
   10a98:	e007      	b.n	10aaa <hf_clock_enable+0xaa>
	}

	clock_requested = on;
   10a9a:	4a07      	ldr	r2, [pc, #28]	; (10ab8 <hf_clock_enable+0xb8>)
   10a9c:	79fb      	ldrb	r3, [r7, #7]
   10a9e:	7013      	strb	r3, [r2, #0]
	LOG_DBG("HF clock %s success (%d)", on ? "start" : "stop", ret);
   10aa0:	f00f fd94 	bl	205cc <_is_user_context>
   10aa4:	4603      	mov	r3, r0
   10aa6:	757b      	strb	r3, [r7, #21]

	/* NOTE: Non-blocking HF clock enable can return -EINPROGRESS
	 * if HF clock start was already requested. Such error code
	 * does not need to be propagated, hence returned value is 0.
	 */
	return 0;
   10aa8:	2300      	movs	r3, #0
}
   10aaa:	4618      	mov	r0, r3
   10aac:	3720      	adds	r7, #32
   10aae:	46bd      	mov	sp, r7
   10ab0:	bd80      	pop	{r7, pc}
   10ab2:	bf00      	nop
   10ab4:	0002e224 	.word	0x0002e224
   10ab8:	20006247 	.word	0x20006247

00010abc <eps_ctx_init>:
 * Endpoint buffers are allocated during the first call of this function.
 * This function may also be called again on every USB reset event
 * to reinitialize the state of all endpoints.
 */
static int eps_ctx_init(void)
{
   10abc:	b580      	push	{r7, lr}
   10abe:	b088      	sub	sp, #32
   10ac0:	af00      	add	r7, sp, #0
	struct nrf_usbd_ep_ctx *ep_ctx;
	int err;
	u32_t i;

	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   10ac2:	2300      	movs	r3, #0
   10ac4:	617b      	str	r3, [r7, #20]
   10ac6:	e022      	b.n	10b0e <eps_ctx_init+0x52>
		ep_ctx = in_endpoint_ctx(i);
   10ac8:	697b      	ldr	r3, [r7, #20]
   10aca:	b2db      	uxtb	r3, r3
   10acc:	4618      	mov	r0, r3
   10ace:	f00f fedf 	bl	20890 <in_endpoint_ctx>
   10ad2:	61f8      	str	r0, [r7, #28]
		__ASSERT_NO_MSG(ep_ctx);

		if (!ep_ctx->buf.block.data) {
   10ad4:	69fb      	ldr	r3, [r7, #28]
   10ad6:	691b      	ldr	r3, [r3, #16]
   10ad8:	2b00      	cmp	r3, #0
   10ada:	d112      	bne.n	10b02 <eps_ctx_init+0x46>
			err = k_mem_pool_alloc(&ep_buf_pool, &ep_ctx->buf.block,
   10adc:	69fb      	ldr	r3, [r7, #28]
   10ade:	f103 0110 	add.w	r1, r3, #16
   10ae2:	2300      	movs	r3, #0
   10ae4:	2240      	movs	r2, #64	; 0x40
   10ae6:	4841      	ldr	r0, [pc, #260]	; (10bec <eps_ctx_init+0x130>)
   10ae8:	f019 f91e 	bl	29d28 <k_mem_pool_alloc>
   10aec:	61b8      	str	r0, [r7, #24]
					       MAX_EP_BUF_SZ, K_NO_WAIT);
			if (err < 0) {
   10aee:	69bb      	ldr	r3, [r7, #24]
   10af0:	2b00      	cmp	r3, #0
   10af2:	da06      	bge.n	10b02 <eps_ctx_init+0x46>
				LOG_ERR("EP buffer alloc failed for EPIN%d", i);
   10af4:	f00f fd6a 	bl	205cc <_is_user_context>
   10af8:	4603      	mov	r3, r0
   10afa:	74fb      	strb	r3, [r7, #19]
				return -ENOMEM;
   10afc:	f06f 030b 	mvn.w	r3, #11
   10b00:	e070      	b.n	10be4 <eps_ctx_init+0x128>
			}
		}

		ep_ctx_reset(ep_ctx);
   10b02:	69f8      	ldr	r0, [r7, #28]
   10b04:	f00f ff70 	bl	209e8 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   10b08:	697b      	ldr	r3, [r7, #20]
   10b0a:	3301      	adds	r3, #1
   10b0c:	617b      	str	r3, [r7, #20]
   10b0e:	697b      	ldr	r3, [r7, #20]
   10b10:	2b07      	cmp	r3, #7
   10b12:	d9d9      	bls.n	10ac8 <eps_ctx_init+0xc>
	}

	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   10b14:	2300      	movs	r3, #0
   10b16:	617b      	str	r3, [r7, #20]
   10b18:	e022      	b.n	10b60 <eps_ctx_init+0xa4>
		ep_ctx = out_endpoint_ctx(i);
   10b1a:	697b      	ldr	r3, [r7, #20]
   10b1c:	b2db      	uxtb	r3, r3
   10b1e:	4618      	mov	r0, r3
   10b20:	f00f fec7 	bl	208b2 <out_endpoint_ctx>
   10b24:	61f8      	str	r0, [r7, #28]
		__ASSERT_NO_MSG(ep_ctx);

		if (!ep_ctx->buf.block.data) {
   10b26:	69fb      	ldr	r3, [r7, #28]
   10b28:	691b      	ldr	r3, [r3, #16]
   10b2a:	2b00      	cmp	r3, #0
   10b2c:	d112      	bne.n	10b54 <eps_ctx_init+0x98>
			err = k_mem_pool_alloc(&ep_buf_pool, &ep_ctx->buf.block,
   10b2e:	69fb      	ldr	r3, [r7, #28]
   10b30:	f103 0110 	add.w	r1, r3, #16
   10b34:	2300      	movs	r3, #0
   10b36:	2240      	movs	r2, #64	; 0x40
   10b38:	482c      	ldr	r0, [pc, #176]	; (10bec <eps_ctx_init+0x130>)
   10b3a:	f019 f8f5 	bl	29d28 <k_mem_pool_alloc>
   10b3e:	61b8      	str	r0, [r7, #24]
					       MAX_EP_BUF_SZ, K_NO_WAIT);
			if (err < 0) {
   10b40:	69bb      	ldr	r3, [r7, #24]
   10b42:	2b00      	cmp	r3, #0
   10b44:	da06      	bge.n	10b54 <eps_ctx_init+0x98>
				LOG_ERR("EP buffer alloc failed for EPOUT%d", i);
   10b46:	f00f fd41 	bl	205cc <_is_user_context>
   10b4a:	4603      	mov	r3, r0
   10b4c:	74bb      	strb	r3, [r7, #18]
				return -ENOMEM;
   10b4e:	f06f 030b 	mvn.w	r3, #11
   10b52:	e047      	b.n	10be4 <eps_ctx_init+0x128>
			}
		}

		ep_ctx_reset(ep_ctx);
   10b54:	69f8      	ldr	r0, [r7, #28]
   10b56:	f00f ff47 	bl	209e8 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   10b5a:	697b      	ldr	r3, [r7, #20]
   10b5c:	3301      	adds	r3, #1
   10b5e:	617b      	str	r3, [r7, #20]
   10b60:	697b      	ldr	r3, [r7, #20]
   10b62:	2b07      	cmp	r3, #7
   10b64:	d9d9      	bls.n	10b1a <eps_ctx_init+0x5e>
	}

	if (CFG_EP_ISOIN_CNT) {
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
   10b66:	2088      	movs	r0, #136	; 0x88
   10b68:	f00f fe92 	bl	20890 <in_endpoint_ctx>
   10b6c:	61f8      	str	r0, [r7, #28]
		__ASSERT_NO_MSG(ep_ctx);

		if (!ep_ctx->buf.block.data) {
   10b6e:	69fb      	ldr	r3, [r7, #28]
   10b70:	691b      	ldr	r3, [r3, #16]
   10b72:	2b00      	cmp	r3, #0
   10b74:	d113      	bne.n	10b9e <eps_ctx_init+0xe2>
			err = k_mem_pool_alloc(&ep_buf_pool, &ep_ctx->buf.block,
   10b76:	69fb      	ldr	r3, [r7, #28]
   10b78:	f103 0110 	add.w	r1, r3, #16
   10b7c:	2300      	movs	r3, #0
   10b7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10b82:	481a      	ldr	r0, [pc, #104]	; (10bec <eps_ctx_init+0x130>)
   10b84:	f019 f8d0 	bl	29d28 <k_mem_pool_alloc>
   10b88:	61b8      	str	r0, [r7, #24]
					       MAX_ISO_EP_BUF_SZ, K_NO_WAIT);
			if (err < 0) {
   10b8a:	69bb      	ldr	r3, [r7, #24]
   10b8c:	2b00      	cmp	r3, #0
   10b8e:	da06      	bge.n	10b9e <eps_ctx_init+0xe2>
				LOG_ERR("EP buffer alloc failed for ISOIN");
   10b90:	f00f fd1c 	bl	205cc <_is_user_context>
   10b94:	4603      	mov	r3, r0
   10b96:	747b      	strb	r3, [r7, #17]
				return -ENOMEM;
   10b98:	f06f 030b 	mvn.w	r3, #11
   10b9c:	e022      	b.n	10be4 <eps_ctx_init+0x128>
			}
		}

		ep_ctx_reset(ep_ctx);
   10b9e:	69f8      	ldr	r0, [r7, #28]
   10ba0:	f00f ff22 	bl	209e8 <ep_ctx_reset>
	}

	if (CFG_EP_ISOOUT_CNT) {
		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
   10ba4:	2008      	movs	r0, #8
   10ba6:	f00f fe84 	bl	208b2 <out_endpoint_ctx>
   10baa:	61f8      	str	r0, [r7, #28]
		__ASSERT_NO_MSG(ep_ctx);

		if (!ep_ctx->buf.block.data) {
   10bac:	69fb      	ldr	r3, [r7, #28]
   10bae:	691b      	ldr	r3, [r3, #16]
   10bb0:	2b00      	cmp	r3, #0
   10bb2:	d113      	bne.n	10bdc <eps_ctx_init+0x120>
			err = k_mem_pool_alloc(&ep_buf_pool, &ep_ctx->buf.block,
   10bb4:	69fb      	ldr	r3, [r7, #28]
   10bb6:	f103 0110 	add.w	r1, r3, #16
   10bba:	2300      	movs	r3, #0
   10bbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10bc0:	480a      	ldr	r0, [pc, #40]	; (10bec <eps_ctx_init+0x130>)
   10bc2:	f019 f8b1 	bl	29d28 <k_mem_pool_alloc>
   10bc6:	61b8      	str	r0, [r7, #24]
					       MAX_ISO_EP_BUF_SZ, K_NO_WAIT);
			if (err < 0) {
   10bc8:	69bb      	ldr	r3, [r7, #24]
   10bca:	2b00      	cmp	r3, #0
   10bcc:	da06      	bge.n	10bdc <eps_ctx_init+0x120>
				LOG_ERR("EP buffer alloc failed for ISOOUT");
   10bce:	f00f fcfd 	bl	205cc <_is_user_context>
   10bd2:	4603      	mov	r3, r0
   10bd4:	743b      	strb	r3, [r7, #16]
				return -ENOMEM;
   10bd6:	f06f 030b 	mvn.w	r3, #11
   10bda:	e003      	b.n	10be4 <eps_ctx_init+0x128>
			}
		}

		ep_ctx_reset(ep_ctx);
   10bdc:	69f8      	ldr	r0, [r7, #28]
   10bde:	f00f ff03 	bl	209e8 <ep_ctx_reset>
	}

	return 0;
   10be2:	2300      	movs	r3, #0
}
   10be4:	4618      	mov	r0, r3
   10be6:	3720      	adds	r7, #32
   10be8:	46bd      	mov	sp, r7
   10bea:	bd80      	pop	{r7, pc}
   10bec:	2000fdf0 	.word	0x2000fdf0

00010bf0 <usbd_work_process_pwr_events>:
		memset(ep_ctx, 0, sizeof(*ep_ctx));
	}
}

static inline void usbd_work_process_pwr_events(struct usbd_pwr_event *pwr_evt)
{
   10bf0:	b580      	push	{r7, lr}
   10bf2:	b08a      	sub	sp, #40	; 0x28
   10bf4:	af00      	add	r7, sp, #0
   10bf6:	6078      	str	r0, [r7, #4]
	struct nrf_usbd_ctx *ctx = get_usbd_ctx();
   10bf8:	f7ff fe5a 	bl	108b0 <get_usbd_ctx>
   10bfc:	6238      	str	r0, [r7, #32]

	switch (pwr_evt->state) {
   10bfe:	687b      	ldr	r3, [r7, #4]
   10c00:	781b      	ldrb	r3, [r3, #0]
   10c02:	2b04      	cmp	r3, #4
   10c04:	d876      	bhi.n	10cf4 <usbd_work_process_pwr_events+0x104>
   10c06:	a201      	add	r2, pc, #4	; (adr r2, 10c0c <usbd_work_process_pwr_events+0x1c>)
   10c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10c0c:	00010c77 	.word	0x00010c77
   10c10:	00010c21 	.word	0x00010c21
   10c14:	00010c49 	.word	0x00010c49
   10c18:	00010ca5 	.word	0x00010ca5
   10c1c:	00010ccf 	.word	0x00010ccf
	case USBD_ATTACHED:
		if (!nrfx_usbd_is_enabled()) {
   10c20:	f7fd f81a 	bl	dc58 <nrfx_usbd_is_enabled>
   10c24:	4603      	mov	r3, r0
   10c26:	f083 0301 	eor.w	r3, r3, #1
   10c2a:	b2db      	uxtb	r3, r3
   10c2c:	2b00      	cmp	r3, #0
   10c2e:	d063      	beq.n	10cf8 <usbd_work_process_pwr_events+0x108>
			LOG_DBG("USB detected");
   10c30:	f00f fccc 	bl	205cc <_is_user_context>
   10c34:	4603      	mov	r3, r0
   10c36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			nrfx_usbd_enable();
   10c3a:	f7fc fe73 	bl	d924 <nrfx_usbd_enable>
			(void) hf_clock_enable(true, false);
   10c3e:	2100      	movs	r1, #0
   10c40:	2001      	movs	r0, #1
   10c42:	f7ff fedd 	bl	10a00 <hf_clock_enable>
		}

		/* No callback here.
		 * Stack will be notified when the peripheral is ready.
		 */
		break;
   10c46:	e057      	b.n	10cf8 <usbd_work_process_pwr_events+0x108>

	case USBD_POWERED:
		usbd_enable_endpoints(ctx);
   10c48:	6a38      	ldr	r0, [r7, #32]
   10c4a:	f00f fe6b 	bl	20924 <usbd_enable_endpoints>
		nrfx_usbd_start(true);
   10c4e:	2001      	movs	r0, #1
   10c50:	f7fc ff9c 	bl	db8c <nrfx_usbd_start>
		ctx->ready = true;
   10c54:	6a3b      	ldr	r3, [r7, #32]
   10c56:	2201      	movs	r2, #1
   10c58:	715a      	strb	r2, [r3, #5]

		LOG_DBG("USB Powered");
   10c5a:	f00f fcb7 	bl	205cc <_is_user_context>
   10c5e:	4603      	mov	r3, r0
   10c60:	77fb      	strb	r3, [r7, #31]

		if (ctx->status_cb) {
   10c62:	6a3b      	ldr	r3, [r7, #32]
   10c64:	681b      	ldr	r3, [r3, #0]
   10c66:	2b00      	cmp	r3, #0
   10c68:	d048      	beq.n	10cfc <usbd_work_process_pwr_events+0x10c>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
   10c6a:	6a3b      	ldr	r3, [r7, #32]
   10c6c:	681b      	ldr	r3, [r3, #0]
   10c6e:	2100      	movs	r1, #0
   10c70:	2002      	movs	r0, #2
   10c72:	4798      	blx	r3
		}
		break;
   10c74:	e042      	b.n	10cfc <usbd_work_process_pwr_events+0x10c>

	case USBD_DETACHED:
		ctx->ready = false;
   10c76:	6a3b      	ldr	r3, [r7, #32]
   10c78:	2200      	movs	r2, #0
   10c7a:	715a      	strb	r2, [r3, #5]
		nrfx_usbd_disable();
   10c7c:	f7fc ff60 	bl	db40 <nrfx_usbd_disable>
		(void) hf_clock_enable(false, false);
   10c80:	2100      	movs	r1, #0
   10c82:	2000      	movs	r0, #0
   10c84:	f7ff febc 	bl	10a00 <hf_clock_enable>

		LOG_DBG("USB Removed");
   10c88:	f00f fca0 	bl	205cc <_is_user_context>
   10c8c:	4603      	mov	r3, r0
   10c8e:	77bb      	strb	r3, [r7, #30]

		if (ctx->status_cb) {
   10c90:	6a3b      	ldr	r3, [r7, #32]
   10c92:	681b      	ldr	r3, [r3, #0]
   10c94:	2b00      	cmp	r3, #0
   10c96:	d033      	beq.n	10d00 <usbd_work_process_pwr_events+0x110>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
   10c98:	6a3b      	ldr	r3, [r7, #32]
   10c9a:	681b      	ldr	r3, [r3, #0]
   10c9c:	2100      	movs	r1, #0
   10c9e:	2004      	movs	r0, #4
   10ca0:	4798      	blx	r3
		}
		break;
   10ca2:	e02d      	b.n	10d00 <usbd_work_process_pwr_events+0x110>

	case USBD_SUSPENDED:
		if (dev_ready()) {
   10ca4:	f00f fd61 	bl	2076a <dev_ready>
   10ca8:	4603      	mov	r3, r0
   10caa:	2b00      	cmp	r3, #0
   10cac:	d02a      	beq.n	10d04 <usbd_work_process_pwr_events+0x114>
			nrfx_usbd_suspend();
   10cae:	f7fc ffe3 	bl	dc78 <nrfx_usbd_suspend>
			LOG_DBG("USB Suspend state");
   10cb2:	f00f fc8b 	bl	205cc <_is_user_context>
   10cb6:	4603      	mov	r3, r0
   10cb8:	777b      	strb	r3, [r7, #29]

			if (ctx->status_cb) {
   10cba:	6a3b      	ldr	r3, [r7, #32]
   10cbc:	681b      	ldr	r3, [r3, #0]
   10cbe:	2b00      	cmp	r3, #0
   10cc0:	d020      	beq.n	10d04 <usbd_work_process_pwr_events+0x114>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
   10cc2:	6a3b      	ldr	r3, [r7, #32]
   10cc4:	681b      	ldr	r3, [r3, #0]
   10cc6:	2100      	movs	r1, #0
   10cc8:	2005      	movs	r0, #5
   10cca:	4798      	blx	r3
			}
		}
		break;
   10ccc:	e01a      	b.n	10d04 <usbd_work_process_pwr_events+0x114>
	case USBD_RESUMED:
		if (ctx->status_cb && dev_ready()) {
   10cce:	6a3b      	ldr	r3, [r7, #32]
   10cd0:	681b      	ldr	r3, [r3, #0]
   10cd2:	2b00      	cmp	r3, #0
   10cd4:	d018      	beq.n	10d08 <usbd_work_process_pwr_events+0x118>
   10cd6:	f00f fd48 	bl	2076a <dev_ready>
   10cda:	4603      	mov	r3, r0
   10cdc:	2b00      	cmp	r3, #0
   10cde:	d013      	beq.n	10d08 <usbd_work_process_pwr_events+0x118>
			LOG_DBG("USB resume");
   10ce0:	f00f fc74 	bl	205cc <_is_user_context>
   10ce4:	4603      	mov	r3, r0
   10ce6:	773b      	strb	r3, [r7, #28]
			ctx->status_cb(USB_DC_RESUME, NULL);
   10ce8:	6a3b      	ldr	r3, [r7, #32]
   10cea:	681b      	ldr	r3, [r3, #0]
   10cec:	2100      	movs	r1, #0
   10cee:	2006      	movs	r0, #6
   10cf0:	4798      	blx	r3
		}
		break;
   10cf2:	e009      	b.n	10d08 <usbd_work_process_pwr_events+0x118>

	default:
		break;
   10cf4:	bf00      	nop
   10cf6:	e008      	b.n	10d0a <usbd_work_process_pwr_events+0x11a>
		break;
   10cf8:	bf00      	nop
   10cfa:	e006      	b.n	10d0a <usbd_work_process_pwr_events+0x11a>
		break;
   10cfc:	bf00      	nop
   10cfe:	e004      	b.n	10d0a <usbd_work_process_pwr_events+0x11a>
		break;
   10d00:	bf00      	nop
   10d02:	e002      	b.n	10d0a <usbd_work_process_pwr_events+0x11a>
		break;
   10d04:	bf00      	nop
   10d06:	e000      	b.n	10d0a <usbd_work_process_pwr_events+0x11a>
		break;
   10d08:	bf00      	nop
	}
}
   10d0a:	bf00      	nop
   10d0c:	3728      	adds	r7, #40	; 0x28
   10d0e:	46bd      	mov	sp, r7
   10d10:	bd80      	pop	{r7, pc}
   10d12:	bf00      	nop

00010d14 <usbd_work_process_recvreq>:
	}
}

static inline void usbd_work_process_recvreq(struct nrf_usbd_ctx *ctx,
					     struct nrf_usbd_ep_ctx *ep_ctx)
{
   10d14:	b580      	push	{r7, lr}
   10d16:	b088      	sub	sp, #32
   10d18:	af00      	add	r7, sp, #0
   10d1a:	6078      	str	r0, [r7, #4]
   10d1c:	6039      	str	r1, [r7, #0]
	if (!ep_ctx->read_pending) {
   10d1e:	683b      	ldr	r3, [r7, #0]
   10d20:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   10d24:	b2db      	uxtb	r3, r3
   10d26:	f083 0301 	eor.w	r3, r3, #1
   10d2a:	b2db      	uxtb	r3, r3
   10d2c:	2b00      	cmp	r3, #0
   10d2e:	d13b      	bne.n	10da8 <usbd_work_process_recvreq+0x94>
		return;
	}
	if (!ep_ctx->read_complete) {
   10d30:	683b      	ldr	r3, [r7, #0]
   10d32:	f893 3020 	ldrb.w	r3, [r3, #32]
   10d36:	b2db      	uxtb	r3, r3
   10d38:	f083 0301 	eor.w	r3, r3, #1
   10d3c:	b2db      	uxtb	r3, r3
   10d3e:	2b00      	cmp	r3, #0
   10d40:	d134      	bne.n	10dac <usbd_work_process_recvreq+0x98>
		return;
	}

	ep_ctx->read_pending = false;
   10d42:	683b      	ldr	r3, [r7, #0]
   10d44:	2200      	movs	r2, #0
   10d46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	ep_ctx->read_complete = false;
   10d4a:	683b      	ldr	r3, [r7, #0]
   10d4c:	2200      	movs	r2, #0
   10d4e:	f883 2020 	strb.w	r2, [r3, #32]

	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   10d52:	687b      	ldr	r3, [r7, #4]
   10d54:	3314      	adds	r3, #20
   10d56:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10d5a:	4618      	mov	r0, r3
   10d5c:	f00f fc9c 	bl	20698 <k_mutex_lock>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
   10d60:	683b      	ldr	r3, [r7, #0]
   10d62:	699b      	ldr	r3, [r3, #24]
   10d64:	60fb      	str	r3, [r7, #12]
   10d66:	683b      	ldr	r3, [r7, #0]
   10d68:	685b      	ldr	r3, [r3, #4]
   10d6a:	613b      	str	r3, [r7, #16]
   10d6c:	2300      	movs	r3, #0
   10d6e:	617b      	str	r3, [r7, #20]
			       ep_ctx->cfg.max_sz);
	nrfx_err_t err = nrfx_usbd_ep_transfer(
   10d70:	683b      	ldr	r3, [r7, #0]
   10d72:	7a5b      	ldrb	r3, [r3, #9]
   10d74:	4618      	mov	r0, r3
   10d76:	f00f fd00 	bl	2077a <ep_addr_to_nrfx>
   10d7a:	4603      	mov	r3, r0
   10d7c:	461a      	mov	r2, r3
   10d7e:	f107 030c 	add.w	r3, r7, #12
   10d82:	4619      	mov	r1, r3
   10d84:	4610      	mov	r0, r2
   10d86:	f7fd f851 	bl	de2c <nrfx_usbd_ep_transfer>
   10d8a:	61f8      	str	r0, [r7, #28]
		ep_addr_to_nrfx(ep_ctx->cfg.addr), &transfer);
	if (err != NRFX_SUCCESS) {
   10d8c:	69fb      	ldr	r3, [r7, #28]
   10d8e:	4a09      	ldr	r2, [pc, #36]	; (10db4 <usbd_work_process_recvreq+0xa0>)
   10d90:	4293      	cmp	r3, r2
   10d92:	d003      	beq.n	10d9c <usbd_work_process_recvreq+0x88>
		LOG_ERR("nRF USBD transfer error (OUT): %d.", err);
   10d94:	f00f fc1a 	bl	205cc <_is_user_context>
   10d98:	4603      	mov	r3, r0
   10d9a:	76fb      	strb	r3, [r7, #27]
	}
	k_mutex_unlock(&ctx->drv_lock);
   10d9c:	687b      	ldr	r3, [r7, #4]
   10d9e:	3314      	adds	r3, #20
   10da0:	4618      	mov	r0, r3
   10da2:	f00f fc87 	bl	206b4 <k_mutex_unlock>
   10da6:	e002      	b.n	10dae <usbd_work_process_recvreq+0x9a>
		return;
   10da8:	bf00      	nop
   10daa:	e000      	b.n	10dae <usbd_work_process_recvreq+0x9a>
		return;
   10dac:	bf00      	nop
}
   10dae:	3720      	adds	r7, #32
   10db0:	46bd      	mov	sp, r7
   10db2:	bd80      	pop	{r7, pc}
   10db4:	0bad0000 	.word	0x0bad0000

00010db8 <usbd_work_process_ep_events>:


static inline void usbd_work_process_ep_events(struct usbd_ep_event *ep_evt)
{
   10db8:	b580      	push	{r7, lr}
   10dba:	b084      	sub	sp, #16
   10dbc:	af00      	add	r7, sp, #0
   10dbe:	6078      	str	r0, [r7, #4]
	struct nrf_usbd_ctx *ctx = get_usbd_ctx();
   10dc0:	f7ff fd76 	bl	108b0 <get_usbd_ctx>
   10dc4:	60f8      	str	r0, [r7, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
   10dc6:	687b      	ldr	r3, [r7, #4]
   10dc8:	681b      	ldr	r3, [r3, #0]
   10dca:	60bb      	str	r3, [r7, #8]

	__ASSERT_NO_MSG(ep_ctx);

	switch (ep_evt->evt_type) {
   10dcc:	687b      	ldr	r3, [r7, #4]
   10dce:	791b      	ldrb	r3, [r3, #4]
   10dd0:	2b03      	cmp	r3, #3
   10dd2:	d83e      	bhi.n	10e52 <usbd_work_process_ep_events+0x9a>
   10dd4:	a201      	add	r2, pc, #4	; (adr r2, 10ddc <usbd_work_process_ep_events+0x24>)
   10dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10dda:	bf00      	nop
   10ddc:	00010ded 	.word	0x00010ded
   10de0:	00010df5 	.word	0x00010df5
   10de4:	00010dff 	.word	0x00010dff
   10de8:	00010e0f 	.word	0x00010e0f
	case EP_EVT_SETUP_RECV:
		usbd_work_process_setup(ep_ctx);
   10dec:	68b8      	ldr	r0, [r7, #8]
   10dee:	f00f fe1b 	bl	20a28 <usbd_work_process_setup>
		break;
   10df2:	e02f      	b.n	10e54 <usbd_work_process_ep_events+0x9c>

	case EP_EVT_RECV_REQ:
		usbd_work_process_recvreq(ctx, ep_ctx);
   10df4:	68b9      	ldr	r1, [r7, #8]
   10df6:	68f8      	ldr	r0, [r7, #12]
   10df8:	f7ff ff8c 	bl	10d14 <usbd_work_process_recvreq>
		break;
   10dfc:	e02a      	b.n	10e54 <usbd_work_process_ep_events+0x9c>

	case EP_EVT_RECV_COMPLETE:
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   10dfe:	68bb      	ldr	r3, [r7, #8]
   10e00:	681b      	ldr	r3, [r3, #0]
   10e02:	68ba      	ldr	r2, [r7, #8]
   10e04:	7a52      	ldrb	r2, [r2, #9]
   10e06:	2101      	movs	r1, #1
   10e08:	4610      	mov	r0, r2
   10e0a:	4798      	blx	r3
			       USB_DC_EP_DATA_OUT);
		break;
   10e0c:	e022      	b.n	10e54 <usbd_work_process_ep_events+0x9c>

	case EP_EVT_WRITE_COMPLETE:
		if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
   10e0e:	68bb      	ldr	r3, [r7, #8]
   10e10:	7a9b      	ldrb	r3, [r3, #10]
   10e12:	2b00      	cmp	r3, #0
   10e14:	d115      	bne.n	10e42 <usbd_work_process_ep_events+0x8a>
		    && (!ep_ctx->write_fragmented)) {
   10e16:	68bb      	ldr	r3, [r7, #8]
   10e18:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   10e1c:	f083 0301 	eor.w	r3, r3, #1
   10e20:	b2db      	uxtb	r3, r3
   10e22:	2b00      	cmp	r3, #0
   10e24:	d00d      	beq.n	10e42 <usbd_work_process_ep_events+0x8a>
			/* Trigger the hardware to perform
			 * status stage, but only if there is
			 * no more data to send (IN transfer
			 * has not beed fragmented).
			 */
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   10e26:	68fb      	ldr	r3, [r7, #12]
   10e28:	3314      	adds	r3, #20
   10e2a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10e2e:	4618      	mov	r0, r3
   10e30:	f00f fc32 	bl	20698 <k_mutex_lock>
			nrfx_usbd_setup_clear();
   10e34:	f00b fccb 	bl	1c7ce <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
   10e38:	68fb      	ldr	r3, [r7, #12]
   10e3a:	3314      	adds	r3, #20
   10e3c:	4618      	mov	r0, r3
   10e3e:	f00f fc39 	bl	206b4 <k_mutex_unlock>
		}
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   10e42:	68bb      	ldr	r3, [r7, #8]
   10e44:	681b      	ldr	r3, [r3, #0]
   10e46:	68ba      	ldr	r2, [r7, #8]
   10e48:	7a52      	ldrb	r2, [r2, #9]
   10e4a:	2102      	movs	r1, #2
   10e4c:	4610      	mov	r0, r2
   10e4e:	4798      	blx	r3
			       USB_DC_EP_DATA_IN);
		break;
   10e50:	e000      	b.n	10e54 <usbd_work_process_ep_events+0x9c>
	default:
		break;
   10e52:	bf00      	nop
	}
}
   10e54:	bf00      	nop
   10e56:	3710      	adds	r7, #16
   10e58:	46bd      	mov	sp, r7
   10e5a:	bd80      	pop	{r7, pc}

00010e5c <usbd_event_handler>:

/**
 * @brief nRFx USBD driver event handler function.
 */
static void usbd_event_handler(nrfx_usbd_evt_t const *const p_event)
{
   10e5c:	b580      	push	{r7, lr}
   10e5e:	b092      	sub	sp, #72	; 0x48
   10e60:	af00      	add	r7, sp, #0
   10e62:	6078      	str	r0, [r7, #4]
	struct nrf_usbd_ep_ctx *ep_ctx;
	struct usbd_event evt = {0};
   10e64:	f107 0320 	add.w	r3, r7, #32
   10e68:	2200      	movs	r2, #0
   10e6a:	601a      	str	r2, [r3, #0]
   10e6c:	605a      	str	r2, [r3, #4]
   10e6e:	609a      	str	r2, [r3, #8]
   10e70:	60da      	str	r2, [r3, #12]
   10e72:	611a      	str	r2, [r3, #16]
   10e74:	615a      	str	r2, [r3, #20]
	bool put_evt = false;
   10e76:	2300      	movs	r3, #0
   10e78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	switch (p_event->type) {
   10e7c:	687b      	ldr	r3, [r7, #4]
   10e7e:	781b      	ldrb	r3, [r3, #0]
   10e80:	2b06      	cmp	r3, #6
   10e82:	d87d      	bhi.n	10f80 <usbd_event_handler+0x124>
   10e84:	a201      	add	r2, pc, #4	; (adr r2, 10e8c <usbd_event_handler+0x30>)
   10e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10e8a:	bf00      	nop
   10e8c:	00010f81 	.word	0x00010f81
   10e90:	00010ef1 	.word	0x00010ef1
   10e94:	00010ea9 	.word	0x00010ea9
   10e98:	00010ec7 	.word	0x00010ec7
   10e9c:	00010ee5 	.word	0x00010ee5
   10ea0:	00010f45 	.word	0x00010f45
   10ea4:	00010eff 	.word	0x00010eff
	case NRFX_USBD_EVT_SUSPEND:
		LOG_DBG("SUSPEND state detected.");
   10ea8:	f00f fb90 	bl	205cc <_is_user_context>
   10eac:	4603      	mov	r3, r0
   10eae:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		evt.evt_type = USBD_EVT_POWER;
   10eb2:	2300      	movs	r3, #0
   10eb4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
   10eb8:	2303      	movs	r3, #3
   10eba:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		put_evt = true;
   10ebe:	2301      	movs	r3, #1
   10ec0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		break;
   10ec4:	e05f      	b.n	10f86 <usbd_event_handler+0x12a>
	case NRFX_USBD_EVT_RESUME:
		LOG_DBG("RESUMING from suspend.");
   10ec6:	f00f fb81 	bl	205cc <_is_user_context>
   10eca:	4603      	mov	r3, r0
   10ecc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		evt.evt_type = USBD_EVT_POWER;
   10ed0:	2300      	movs	r3, #0
   10ed2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		evt.evt.pwr_evt.state = USBD_RESUMED;
   10ed6:	2304      	movs	r3, #4
   10ed8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		put_evt = true;
   10edc:	2301      	movs	r3, #1
   10ede:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		break;
   10ee2:	e050      	b.n	10f86 <usbd_event_handler+0x12a>
	case NRFX_USBD_EVT_WUREQ:
		LOG_DBG("RemoteWU initiated.");
   10ee4:	f00f fb72 	bl	205cc <_is_user_context>
   10ee8:	4603      	mov	r3, r0
   10eea:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		break;
   10eee:	e04a      	b.n	10f86 <usbd_event_handler+0x12a>
	case NRFX_USBD_EVT_RESET:
		evt.evt_type = USBD_EVT_RESET;
   10ef0:	2302      	movs	r3, #2
   10ef2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		put_evt = true;
   10ef6:	2301      	movs	r3, #1
   10ef8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		break;
   10efc:	e043      	b.n	10f86 <usbd_event_handler+0x12a>
			put_evt = true;
		}
		break;

	case NRFX_USBD_EVT_EPTRANSFER:
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   10efe:	687b      	ldr	r3, [r7, #4]
   10f00:	789b      	ldrb	r3, [r3, #2]
   10f02:	4618      	mov	r0, r3
   10f04:	f00f fc75 	bl	207f2 <endpoint_ctx>
   10f08:	6438      	str	r0, [r7, #64]	; 0x40
		switch (ep_ctx->cfg.type) {
   10f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10f0c:	7a9b      	ldrb	r3, [r3, #10]
   10f0e:	2b03      	cmp	r3, #3
   10f10:	d816      	bhi.n	10f40 <usbd_event_handler+0xe4>
   10f12:	a201      	add	r2, pc, #4	; (adr r2, 10f18 <usbd_event_handler+0xbc>)
   10f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10f18:	00010f29 	.word	0x00010f29
   10f1c:	00010f39 	.word	0x00010f39
   10f20:	00010f31 	.word	0x00010f31
   10f24:	00010f31 	.word	0x00010f31
		case USB_DC_EP_CONTROL:
			usbd_event_transfer_ctrl(p_event);
   10f28:	6878      	ldr	r0, [r7, #4]
   10f2a:	f00f fdda 	bl	20ae2 <usbd_event_transfer_ctrl>
			break;
   10f2e:	e008      	b.n	10f42 <usbd_event_handler+0xe6>
		case USB_DC_EP_BULK:
		case USB_DC_EP_INTERRUPT:
			usbd_event_transfer_data(p_event);
   10f30:	6878      	ldr	r0, [r7, #4]
   10f32:	f00f fe8c 	bl	20c4e <usbd_event_transfer_data>
			break;
   10f36:	e004      	b.n	10f42 <usbd_event_handler+0xe6>
		case USB_DC_EP_ISOCHRONOUS:
			usbd_event_transfer_data(p_event);
   10f38:	6878      	ldr	r0, [r7, #4]
   10f3a:	f00f fe88 	bl	20c4e <usbd_event_transfer_data>
			break;
   10f3e:	e000      	b.n	10f42 <usbd_event_handler+0xe6>
		default:
			break;
   10f40:	bf00      	nop
		}
		break;
   10f42:	e020      	b.n	10f86 <usbd_event_handler+0x12a>

	case NRFX_USBD_EVT_SETUP: {
		nrfx_usbd_setup_t drv_setup;

		nrfx_usbd_setup_get(&drv_setup);
   10f44:	f107 030c 	add.w	r3, r7, #12
   10f48:	4618      	mov	r0, r3
   10f4a:	f00b fbf4 	bl	1c736 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_BREQUEST_SETADDRESS)
   10f4e:	7b7b      	ldrb	r3, [r7, #13]
   10f50:	2b05      	cmp	r3, #5
   10f52:	d104      	bne.n	10f5e <usbd_event_handler+0x102>
		    || ((drv_setup.bmRequestType & USB_BMREQUESTTYPE_TYPE_MASK)
   10f54:	7b3b      	ldrb	r3, [r7, #12]
   10f56:	f003 0360 	and.w	r3, r3, #96	; 0x60
   10f5a:	2b00      	cmp	r3, #0
   10f5c:	d012      	beq.n	10f84 <usbd_event_handler+0x128>
			/* SetAddress is habdled by USBD hardware.
			 * No software action required.
			 */

			struct nrf_usbd_ep_ctx *ep_ctx =
				endpoint_ctx(NRF_USBD_EPOUT(0));
   10f5e:	2000      	movs	r0, #0
   10f60:	f00f fc47 	bl	207f2 <endpoint_ctx>
   10f64:	63f8      	str	r0, [r7, #60]	; 0x3c

			evt.evt_type = USBD_EVT_EP;
   10f66:	2301      	movs	r3, #1
   10f68:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			evt.evt.ep_evt.ep = ep_ctx;
   10f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
			evt.evt.ep_evt.evt_type = EP_EVT_SETUP_RECV;
   10f70:	2300      	movs	r3, #0
   10f72:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			put_evt = true;
   10f76:	2301      	movs	r3, #1
   10f78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
		break;
   10f7c:	bf00      	nop
   10f7e:	e001      	b.n	10f84 <usbd_event_handler+0x128>
	}

	default:
		break;
   10f80:	bf00      	nop
   10f82:	e000      	b.n	10f86 <usbd_event_handler+0x12a>
		break;
   10f84:	bf00      	nop
	}

	if (put_evt) {
   10f86:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   10f8a:	2b00      	cmp	r3, #0
   10f8c:	d018      	beq.n	10fc0 <usbd_event_handler+0x164>
		struct usbd_event *ev;

		ev = usbd_evt_alloc();
   10f8e:	f7ff fcb3 	bl	108f8 <usbd_evt_alloc>
   10f92:	63b8      	str	r0, [r7, #56]	; 0x38
		if (!ev) {
   10f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10f96:	2b00      	cmp	r3, #0
   10f98:	d011      	beq.n	10fbe <usbd_event_handler+0x162>
			return;
		}
		ev->evt_type = evt.evt_type;
   10f9a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
   10f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10fa0:	751a      	strb	r2, [r3, #20]
		ev->evt = evt.evt;
   10fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10fa4:	330c      	adds	r3, #12
   10fa6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   10faa:	e892 0003 	ldmia.w	r2, {r0, r1}
   10fae:	e883 0003 	stmia.w	r3, {r0, r1}
		usbd_evt_put(ev);
   10fb2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   10fb4:	f7ff fc86 	bl	108c4 <usbd_evt_put>
		usbd_work_schedule();
   10fb8:	f00f fc89 	bl	208ce <usbd_work_schedule>
   10fbc:	e000      	b.n	10fc0 <usbd_event_handler+0x164>
			return;
   10fbe:	bf00      	nop
	}
}
   10fc0:	3748      	adds	r7, #72	; 0x48
   10fc2:	46bd      	mov	sp, r7
   10fc4:	bd80      	pop	{r7, pc}
   10fc6:	bf00      	nop

00010fc8 <usbd_reinit>:

static inline void usbd_reinit(void)
{
   10fc8:	b580      	push	{r7, lr}
   10fca:	b084      	sub	sp, #16
   10fcc:	af00      	add	r7, sp, #0
	int ret;
	nrfx_err_t err;

	nrf5_power_usb_power_int_enable(false);
   10fce:	2000      	movs	r0, #0
   10fd0:	f00f fa8b 	bl	204ea <nrf5_power_usb_power_int_enable>
	nrfx_usbd_disable();
   10fd4:	f7fc fdb4 	bl	db40 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
   10fd8:	f7fc fc84 	bl	d8e4 <nrfx_usbd_uninit>

	usbd_evt_flush();
   10fdc:	f00f fc8f 	bl	208fe <usbd_evt_flush>
	ret = eps_ctx_init();
   10fe0:	f7ff fd6c 	bl	10abc <eps_ctx_init>
   10fe4:	60f8      	str	r0, [r7, #12]
	__ASSERT_NO_MSG(ret == 0);

	nrf5_power_usb_power_int_enable(true);
   10fe6:	2001      	movs	r0, #1
   10fe8:	f00f fa7f 	bl	204ea <nrf5_power_usb_power_int_enable>
	err = nrfx_usbd_init(usbd_event_handler);
   10fec:	4807      	ldr	r0, [pc, #28]	; (1100c <usbd_reinit+0x44>)
   10fee:	f7fc fbfb 	bl	d7e8 <nrfx_usbd_init>
   10ff2:	60b8      	str	r0, [r7, #8]

	if (err != NRFX_SUCCESS) {
   10ff4:	68bb      	ldr	r3, [r7, #8]
   10ff6:	4a06      	ldr	r2, [pc, #24]	; (11010 <usbd_reinit+0x48>)
   10ff8:	4293      	cmp	r3, r2
   10ffa:	d003      	beq.n	11004 <usbd_reinit+0x3c>
		LOG_DBG("nRF USBD driver reinit failed. Code: %d.",
   10ffc:	f00f fae6 	bl	205cc <_is_user_context>
   11000:	4603      	mov	r3, r0
   11002:	71fb      	strb	r3, [r7, #7]
			(u32_t)err);
		__ASSERT_NO_MSG(0);
	}
}
   11004:	bf00      	nop
   11006:	3710      	adds	r7, #16
   11008:	46bd      	mov	sp, r7
   1100a:	bd80      	pop	{r7, pc}
   1100c:	00010e5d 	.word	0x00010e5d
   11010:	0bad0000 	.word	0x0bad0000

00011014 <usbd_work_handler>:


/* Work handler */
static void usbd_work_handler(struct k_work *item)
{
   11014:	b580      	push	{r7, lr}
   11016:	b08a      	sub	sp, #40	; 0x28
   11018:	af00      	add	r7, sp, #0
   1101a:	6078      	str	r0, [r7, #4]
	struct nrf_usbd_ctx *ctx;
	struct usbd_event *ev;

	ctx = CONTAINER_OF(item, struct nrf_usbd_ctx, usb_work);
   1101c:	687b      	ldr	r3, [r7, #4]
   1101e:	3b08      	subs	r3, #8
   11020:	61fb      	str	r3, [r7, #28]

	while ((ev = usbd_evt_get()) != NULL) {
   11022:	e070      	b.n	11106 <usbd_work_handler+0xf2>
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   11024:	f00f fba1 	bl	2076a <dev_ready>
   11028:	4603      	mov	r3, r0
   1102a:	f083 0301 	eor.w	r3, r3, #1
   1102e:	b2db      	uxtb	r3, r3
   11030:	2b00      	cmp	r3, #0
   11032:	d004      	beq.n	1103e <usbd_work_handler+0x2a>
   11034:	6a3b      	ldr	r3, [r7, #32]
   11036:	7d1b      	ldrb	r3, [r3, #20]
   11038:	2b00      	cmp	r3, #0
   1103a:	d000      	beq.n	1103e <usbd_work_handler+0x2a>
			/* Drop non-power events when cable is detached. */
			continue;
   1103c:	e063      	b.n	11106 <usbd_work_handler+0xf2>
		}

		switch (ev->evt_type) {
   1103e:	6a3b      	ldr	r3, [r7, #32]
   11040:	7d1b      	ldrb	r3, [r3, #20]
   11042:	2b04      	cmp	r3, #4
   11044:	d853      	bhi.n	110ee <usbd_work_handler+0xda>
   11046:	a201      	add	r2, pc, #4	; (adr r2, 1104c <usbd_work_handler+0x38>)
   11048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1104c:	00011085 	.word	0x00011085
   11050:	00011061 	.word	0x00011061
   11054:	00011091 	.word	0x00011091
   11058:	000110cb 	.word	0x000110cb
   1105c:	000110df 	.word	0x000110df
		case USBD_EVT_EP:
			if (!ctx->attached) {
   11060:	69fb      	ldr	r3, [r7, #28]
   11062:	791b      	ldrb	r3, [r3, #4]
   11064:	f083 0301 	eor.w	r3, r3, #1
   11068:	b2db      	uxtb	r3, r3
   1106a:	2b00      	cmp	r3, #0
   1106c:	d004      	beq.n	11078 <usbd_work_handler+0x64>
				LOG_ERR("EP %d event dropped (not attached).",
   1106e:	f00f faad 	bl	205cc <_is_user_context>
   11072:	4603      	mov	r3, r0
   11074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					(u32_t)ev->evt.ep_evt.ep->cfg.addr);
			}
			usbd_work_process_ep_events(&ev->evt.ep_evt);
   11078:	6a3b      	ldr	r3, [r7, #32]
   1107a:	330c      	adds	r3, #12
   1107c:	4618      	mov	r0, r3
   1107e:	f7ff fe9b 	bl	10db8 <usbd_work_process_ep_events>
			break;
   11082:	e03d      	b.n	11100 <usbd_work_handler+0xec>
		case USBD_EVT_POWER:
			usbd_work_process_pwr_events(&ev->evt.pwr_evt);
   11084:	6a3b      	ldr	r3, [r7, #32]
   11086:	330c      	adds	r3, #12
   11088:	4618      	mov	r0, r3
   1108a:	f7ff fdb1 	bl	10bf0 <usbd_work_process_pwr_events>
			break;
   1108e:	e037      	b.n	11100 <usbd_work_handler+0xec>
		case USBD_EVT_RESET:
			LOG_DBG("USBD reset event.");
   11090:	f00f fa9c 	bl	205cc <_is_user_context>
   11094:	4603      	mov	r3, r0
   11096:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1109a:	69fb      	ldr	r3, [r7, #28]
   1109c:	3314      	adds	r3, #20
   1109e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   110a2:	4618      	mov	r0, r3
   110a4:	f00f faf8 	bl	20698 <k_mutex_lock>
			eps_ctx_init();
   110a8:	f7ff fd08 	bl	10abc <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
   110ac:	69fb      	ldr	r3, [r7, #28]
   110ae:	3314      	adds	r3, #20
   110b0:	4618      	mov	r0, r3
   110b2:	f00f faff 	bl	206b4 <k_mutex_unlock>

			if (ctx->status_cb) {
   110b6:	69fb      	ldr	r3, [r7, #28]
   110b8:	681b      	ldr	r3, [r3, #0]
   110ba:	2b00      	cmp	r3, #0
   110bc:	d01d      	beq.n	110fa <usbd_work_handler+0xe6>
				ctx->status_cb(USB_DC_RESET, NULL);
   110be:	69fb      	ldr	r3, [r7, #28]
   110c0:	681b      	ldr	r3, [r3, #0]
   110c2:	2100      	movs	r1, #0
   110c4:	2001      	movs	r0, #1
   110c6:	4798      	blx	r3
			}
			break;
   110c8:	e017      	b.n	110fa <usbd_work_handler+0xe6>
		case USBD_EVT_SOF:
			if (ctx->status_cb) {
   110ca:	69fb      	ldr	r3, [r7, #28]
   110cc:	681b      	ldr	r3, [r3, #0]
   110ce:	2b00      	cmp	r3, #0
   110d0:	d015      	beq.n	110fe <usbd_work_handler+0xea>
				ctx->status_cb(USB_DC_SOF, NULL);
   110d2:	69fb      	ldr	r3, [r7, #28]
   110d4:	681b      	ldr	r3, [r3, #0]
   110d6:	2100      	movs	r1, #0
   110d8:	200a      	movs	r0, #10
   110da:	4798      	blx	r3
			}
			break;
   110dc:	e00f      	b.n	110fe <usbd_work_handler+0xea>
		case USBD_EVT_REINIT: {
				/* Reinitialize the peripheral after queue overflow. */
				LOG_ERR("USBD event queue full!");
   110de:	f00f fa75 	bl	205cc <_is_user_context>
   110e2:	4603      	mov	r3, r0
   110e4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				usbd_reinit();
   110e8:	f7ff ff6e 	bl	10fc8 <usbd_reinit>
				break;
   110ec:	e008      	b.n	11100 <usbd_work_handler+0xec>
			}
		default:
			LOG_ERR("Unknown USBD event: %"PRId16".", ev->evt_type);
   110ee:	f00f fa6d 	bl	205cc <_is_user_context>
   110f2:	4603      	mov	r3, r0
   110f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			break;
   110f8:	e002      	b.n	11100 <usbd_work_handler+0xec>
			break;
   110fa:	bf00      	nop
   110fc:	e000      	b.n	11100 <usbd_work_handler+0xec>
			break;
   110fe:	bf00      	nop
		}
		usbd_evt_free(ev);
   11100:	6a38      	ldr	r0, [r7, #32]
   11102:	f00f fbef 	bl	208e4 <usbd_evt_free>
	while ((ev = usbd_evt_get()) != NULL) {
   11106:	f7ff fbeb 	bl	108e0 <usbd_evt_get>
   1110a:	6238      	str	r0, [r7, #32]
   1110c:	6a3b      	ldr	r3, [r7, #32]
   1110e:	2b00      	cmp	r3, #0
   11110:	d188      	bne.n	11024 <usbd_work_handler+0x10>
	}
}
   11112:	bf00      	nop
   11114:	3728      	adds	r7, #40	; 0x28
   11116:	46bd      	mov	sp, r7
   11118:	bd80      	pop	{r7, pc}
   1111a:	bf00      	nop

0001111c <usb_dc_attach>:

int usb_dc_attach(void)
{
   1111c:	b580      	push	{r7, lr}
   1111e:	b086      	sub	sp, #24
   11120:	af00      	add	r7, sp, #0
	struct nrf_usbd_ctx *ctx = get_usbd_ctx();
   11122:	f7ff fbc5 	bl	108b0 <get_usbd_ctx>
   11126:	6178      	str	r0, [r7, #20]
	nrfx_err_t err;
	int ret;

	if (ctx->attached) {
   11128:	697b      	ldr	r3, [r7, #20]
   1112a:	791b      	ldrb	r3, [r3, #4]
   1112c:	2b00      	cmp	r3, #0
   1112e:	d001      	beq.n	11134 <usb_dc_attach+0x18>
		return 0;
   11130:	2300      	movs	r3, #0
   11132:	e03c      	b.n	111ae <usb_dc_attach+0x92>
	}

	k_work_init(&ctx->usb_work, usbd_work_handler);
   11134:	697b      	ldr	r3, [r7, #20]
   11136:	3308      	adds	r3, #8
   11138:	491f      	ldr	r1, [pc, #124]	; (111b8 <usb_dc_attach+0x9c>)
   1113a:	4618      	mov	r0, r3
   1113c:	f00f fa5a 	bl	205f4 <k_work_init>
	k_mutex_init(&ctx->drv_lock);
   11140:	697b      	ldr	r3, [r7, #20]
   11142:	3314      	adds	r3, #20
   11144:	4618      	mov	r0, r3
   11146:	f00f fa9c 	bl	20682 <k_mutex_init>

	IRQ_CONNECT(DT_NORDIC_NRF_USBD_USBD_0_IRQ,
   1114a:	2200      	movs	r2, #0
   1114c:	2101      	movs	r1, #1
   1114e:	2027      	movs	r0, #39	; 0x27
   11150:	f010 f9b3 	bl	214ba <z_irq_priority_set>
		    DT_NORDIC_NRF_USBD_USBD_0_IRQ_PRIORITY,
		    nrfx_isr, nrfx_usbd_irq_handler, 0);

	err = nrfx_usbd_init(usbd_event_handler);
   11154:	4819      	ldr	r0, [pc, #100]	; (111bc <usb_dc_attach+0xa0>)
   11156:	f7fc fb47 	bl	d7e8 <nrfx_usbd_init>
   1115a:	6138      	str	r0, [r7, #16]

	if (err != NRFX_SUCCESS) {
   1115c:	693b      	ldr	r3, [r7, #16]
   1115e:	4a18      	ldr	r2, [pc, #96]	; (111c0 <usb_dc_attach+0xa4>)
   11160:	4293      	cmp	r3, r2
   11162:	d006      	beq.n	11172 <usb_dc_attach+0x56>
		LOG_DBG("nRF USBD driver init failed. Code: %d.",
   11164:	f00f fa32 	bl	205cc <_is_user_context>
   11168:	4603      	mov	r3, r0
   1116a:	73fb      	strb	r3, [r7, #15]
			(u32_t)err);
		return -EIO;
   1116c:	f06f 0304 	mvn.w	r3, #4
   11170:	e01d      	b.n	111ae <usb_dc_attach+0x92>
	}
	nrf5_power_usb_power_int_enable(true);
   11172:	2001      	movs	r0, #1
   11174:	f00f f9b9 	bl	204ea <nrf5_power_usb_power_int_enable>

	ret = eps_ctx_init();
   11178:	f7ff fca0 	bl	10abc <eps_ctx_init>
   1117c:	60b8      	str	r0, [r7, #8]
	if (ret == 0) {
   1117e:	68bb      	ldr	r3, [r7, #8]
   11180:	2b00      	cmp	r3, #0
   11182:	d102      	bne.n	1118a <usb_dc_attach+0x6e>
		ctx->attached = true;
   11184:	697b      	ldr	r3, [r7, #20]
   11186:	2201      	movs	r2, #1
   11188:	711a      	strb	r2, [r3, #4]
	}

	if (!k_fifo_is_empty(&work_queue)) {
   1118a:	480e      	ldr	r0, [pc, #56]	; (111c4 <usb_dc_attach+0xa8>)
   1118c:	f00f fa6d 	bl	2066a <k_queue_is_empty>
   11190:	4603      	mov	r3, r0
   11192:	2b00      	cmp	r3, #0
   11194:	d101      	bne.n	1119a <usb_dc_attach+0x7e>
		usbd_work_schedule();
   11196:	f00f fb9a 	bl	208ce <usbd_work_schedule>
	}

	if (nrf_power_usbregstatus_vbusdet_get()) {
   1119a:	f00f fad0 	bl	2073e <nrf_power_usbregstatus_vbusdet_get>
   1119e:	4603      	mov	r3, r0
   111a0:	2b00      	cmp	r3, #0
   111a2:	d003      	beq.n	111ac <usb_dc_attach+0x90>
		 * the peripheral is re-enabled.
		 * When USB-enabled bootloader is used, target application
		 * will not receive this event and it needs to be generated
		 * again here.
		 */
		usb_dc_nrfx_power_event_callback(NRF_POWER_EVENT_USBDETECTED);
   111a4:	f44f 708e 	mov.w	r0, #284	; 0x11c
   111a8:	f7ff fbf0 	bl	1098c <usb_dc_nrfx_power_event_callback>
	}

	return ret;
   111ac:	68bb      	ldr	r3, [r7, #8]
}
   111ae:	4618      	mov	r0, r3
   111b0:	3718      	adds	r7, #24
   111b2:	46bd      	mov	sp, r7
   111b4:	bd80      	pop	{r7, pc}
   111b6:	bf00      	nop
   111b8:	00011015 	.word	0x00011015
   111bc:	00010e5d 	.word	0x00010e5d
   111c0:	0bad0000 	.word	0x0bad0000
   111c4:	2000fe84 	.word	0x2000fe84

000111c8 <usb_dc_ep_set_stall>:

	return 0;
}

int usb_dc_ep_set_stall(const u8_t ep)
{
   111c8:	b580      	push	{r7, lr}
   111ca:	b086      	sub	sp, #24
   111cc:	af00      	add	r7, sp, #0
   111ce:	4603      	mov	r3, r0
   111d0:	71fb      	strb	r3, [r7, #7]
	struct nrf_usbd_ep_ctx *ep_ctx;

	if (!dev_attached() || !dev_ready()) {
   111d2:	f00f fac2 	bl	2075a <dev_attached>
   111d6:	4603      	mov	r3, r0
   111d8:	f083 0301 	eor.w	r3, r3, #1
   111dc:	b2db      	uxtb	r3, r3
   111de:	2b00      	cmp	r3, #0
   111e0:	d107      	bne.n	111f2 <usb_dc_ep_set_stall+0x2a>
   111e2:	f00f fac2 	bl	2076a <dev_ready>
   111e6:	4603      	mov	r3, r0
   111e8:	f083 0301 	eor.w	r3, r3, #1
   111ec:	b2db      	uxtb	r3, r3
   111ee:	2b00      	cmp	r3, #0
   111f0:	d002      	beq.n	111f8 <usb_dc_ep_set_stall+0x30>
		return -ENODEV;
   111f2:	f06f 0312 	mvn.w	r3, #18
   111f6:	e038      	b.n	1126a <usb_dc_ep_set_stall+0xa2>
	}

	ep_ctx = endpoint_ctx(ep);
   111f8:	79fb      	ldrb	r3, [r7, #7]
   111fa:	4618      	mov	r0, r3
   111fc:	f00f faf9 	bl	207f2 <endpoint_ctx>
   11200:	6178      	str	r0, [r7, #20]
	if (!ep_ctx) {
   11202:	697b      	ldr	r3, [r7, #20]
   11204:	2b00      	cmp	r3, #0
   11206:	d102      	bne.n	1120e <usb_dc_ep_set_stall+0x46>
		return -EINVAL;
   11208:	f06f 0315 	mvn.w	r3, #21
   1120c:	e02d      	b.n	1126a <usb_dc_ep_set_stall+0xa2>
	}

	switch (ep_ctx->cfg.type) {
   1120e:	697b      	ldr	r3, [r7, #20]
   11210:	7a9b      	ldrb	r3, [r3, #10]
   11212:	2b03      	cmp	r3, #3
   11214:	d81d      	bhi.n	11252 <usb_dc_ep_set_stall+0x8a>
   11216:	a201      	add	r2, pc, #4	; (adr r2, 1121c <usb_dc_ep_set_stall+0x54>)
   11218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1121c:	0001122d 	.word	0x0001122d
   11220:	00011245 	.word	0x00011245
   11224:	00011233 	.word	0x00011233
   11228:	00011233 	.word	0x00011233
	case USB_DC_EP_CONTROL:
		nrfx_usbd_setup_stall();
   1122c:	f00b fad6 	bl	1c7dc <nrfx_usbd_setup_stall>
		break;
   11230:	e00f      	b.n	11252 <usb_dc_ep_set_stall+0x8a>
	case USB_DC_EP_BULK:
	case USB_DC_EP_INTERRUPT:
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
   11232:	79fb      	ldrb	r3, [r7, #7]
   11234:	4618      	mov	r0, r3
   11236:	f00f faa0 	bl	2077a <ep_addr_to_nrfx>
   1123a:	4603      	mov	r3, r0
   1123c:	4618      	mov	r0, r3
   1123e:	f00b fa37 	bl	1c6b0 <nrfx_usbd_ep_stall>
		break;
   11242:	e006      	b.n	11252 <usb_dc_ep_set_stall+0x8a>
	case USB_DC_EP_ISOCHRONOUS:
		LOG_ERR("STALL unsupported on ISO endpoint.s");
   11244:	f00f f9c2 	bl	205cc <_is_user_context>
   11248:	4603      	mov	r3, r0
   1124a:	74fb      	strb	r3, [r7, #19]
		return -EINVAL;
   1124c:	f06f 0315 	mvn.w	r3, #21
   11250:	e00b      	b.n	1126a <usb_dc_ep_set_stall+0xa2>
	}

	ep_ctx->buf.len = 0U;
   11252:	697b      	ldr	r3, [r7, #20]
   11254:	2200      	movs	r2, #0
   11256:	60da      	str	r2, [r3, #12]
	ep_ctx->buf.curr = ep_ctx->buf.data;
   11258:	697b      	ldr	r3, [r7, #20]
   1125a:	699a      	ldr	r2, [r3, #24]
   1125c:	697b      	ldr	r3, [r7, #20]
   1125e:	61da      	str	r2, [r3, #28]

	LOG_DBG("STALL on EP %d.", ep);
   11260:	f00f f9b4 	bl	205cc <_is_user_context>
   11264:	4603      	mov	r3, r0
   11266:	74bb      	strb	r3, [r7, #18]

	return 0;
   11268:	2300      	movs	r3, #0
}
   1126a:	4618      	mov	r0, r3
   1126c:	3718      	adds	r7, #24
   1126e:	46bd      	mov	sp, r7
   11270:	bd80      	pop	{r7, pc}
   11272:	bf00      	nop

00011274 <usb_dc_ep_write>:
	return 0;
}

int usb_dc_ep_write(const u8_t ep, const u8_t *const data,
		    const u32_t data_len, u32_t *const ret_bytes)
{
   11274:	b580      	push	{r7, lr}
   11276:	b090      	sub	sp, #64	; 0x40
   11278:	af00      	add	r7, sp, #0
   1127a:	60b9      	str	r1, [r7, #8]
   1127c:	607a      	str	r2, [r7, #4]
   1127e:	603b      	str	r3, [r7, #0]
   11280:	4603      	mov	r3, r0
   11282:	73fb      	strb	r3, [r7, #15]
	LOG_DBG("ep_write: ep %d, len %d", ep, data_len);
   11284:	f00f f9a2 	bl	205cc <_is_user_context>
   11288:	4603      	mov	r3, r0
   1128a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct nrf_usbd_ctx *ctx = get_usbd_ctx();
   1128e:	f7ff fb0f 	bl	108b0 <get_usbd_ctx>
   11292:	63f8      	str	r0, [r7, #60]	; 0x3c
	struct nrf_usbd_ep_ctx *ep_ctx;
	u32_t bytes_to_copy;

	if (!dev_attached() || !dev_ready()) {
   11294:	f00f fa61 	bl	2075a <dev_attached>
   11298:	4603      	mov	r3, r0
   1129a:	f083 0301 	eor.w	r3, r3, #1
   1129e:	b2db      	uxtb	r3, r3
   112a0:	2b00      	cmp	r3, #0
   112a2:	d107      	bne.n	112b4 <usb_dc_ep_write+0x40>
   112a4:	f00f fa61 	bl	2076a <dev_ready>
   112a8:	4603      	mov	r3, r0
   112aa:	f083 0301 	eor.w	r3, r3, #1
   112ae:	b2db      	uxtb	r3, r3
   112b0:	2b00      	cmp	r3, #0
   112b2:	d002      	beq.n	112ba <usb_dc_ep_write+0x46>
		return -ENODEV;
   112b4:	f06f 0312 	mvn.w	r3, #18
   112b8:	e08e      	b.n	113d8 <usb_dc_ep_write+0x164>
	}

	if (NRF_USBD_EPOUT_CHECK(ep)) {
   112ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
   112be:	2b00      	cmp	r3, #0
   112c0:	db02      	blt.n	112c8 <usb_dc_ep_write+0x54>
		return -EINVAL;
   112c2:	f06f 0315 	mvn.w	r3, #21
   112c6:	e087      	b.n	113d8 <usb_dc_ep_write+0x164>
	}

	ep_ctx = endpoint_ctx(ep);
   112c8:	7bfb      	ldrb	r3, [r7, #15]
   112ca:	4618      	mov	r0, r3
   112cc:	f00f fa91 	bl	207f2 <endpoint_ctx>
   112d0:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (!ep_ctx) {
   112d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   112d4:	2b00      	cmp	r3, #0
   112d6:	d102      	bne.n	112de <usb_dc_ep_write+0x6a>
		return -EINVAL;
   112d8:	f06f 0315 	mvn.w	r3, #21
   112dc:	e07c      	b.n	113d8 <usb_dc_ep_write+0x164>
	}


	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   112de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   112e0:	3314      	adds	r3, #20
   112e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   112e6:	4618      	mov	r0, r3
   112e8:	f00f f9d6 	bl	20698 <k_mutex_lock>

	/* USBD driver does not allow scheduling multiple DMA transfers
	 * for one EP at a time. Next USB transfer on this endpoint can be
	 * triggered after the completion of previous one.
	 */
	if (ep_ctx->write_in_progress) {
   112ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   112ee:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   112f2:	b2db      	uxtb	r3, r3
   112f4:	2b00      	cmp	r3, #0
   112f6:	d007      	beq.n	11308 <usb_dc_ep_write+0x94>
		k_mutex_unlock(&ctx->drv_lock);
   112f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   112fa:	3314      	adds	r3, #20
   112fc:	4618      	mov	r0, r3
   112fe:	f00f f9d9 	bl	206b4 <k_mutex_unlock>
		return -EAGAIN;
   11302:	f06f 030a 	mvn.w	r3, #10
   11306:	e067      	b.n	113d8 <usb_dc_ep_write+0x164>
	 * copied to the internal buffer and must me fragmented here.
	 * In case of fragmentation, a flag is set to prevent triggering
	 * status stage which is handled by hardware, because there will be
	 * another write coming.
	 */
	if (data_len > ep_ctx->cfg.max_sz) {
   11308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1130a:	685b      	ldr	r3, [r3, #4]
   1130c:	687a      	ldr	r2, [r7, #4]
   1130e:	429a      	cmp	r2, r3
   11310:	d907      	bls.n	11322 <usb_dc_ep_write+0xae>
		bytes_to_copy = ep_ctx->cfg.max_sz;
   11312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11314:	685b      	ldr	r3, [r3, #4]
   11316:	637b      	str	r3, [r7, #52]	; 0x34
		ep_ctx->write_fragmented = true;
   11318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1131a:	2201      	movs	r2, #1
   1131c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
   11320:	e005      	b.n	1132e <usb_dc_ep_write+0xba>
	} else {
		bytes_to_copy = data_len;
   11322:	687b      	ldr	r3, [r7, #4]
   11324:	637b      	str	r3, [r7, #52]	; 0x34
		ep_ctx->write_fragmented = false;
   11326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11328:	2200      	movs	r2, #0
   1132a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	}
	memcpy(ep_ctx->buf.data, data, bytes_to_copy);
   1132e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11330:	699b      	ldr	r3, [r3, #24]
   11332:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   11334:	68b9      	ldr	r1, [r7, #8]
   11336:	4618      	mov	r0, r3
   11338:	f7f0 fe96 	bl	2068 <memcpy>
	ep_ctx->buf.len = bytes_to_copy;
   1133c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1133e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   11340:	60da      	str	r2, [r3, #12]

	if (ret_bytes) {
   11342:	683b      	ldr	r3, [r7, #0]
   11344:	2b00      	cmp	r3, #0
   11346:	d002      	beq.n	1134e <usb_dc_ep_write+0xda>
		*ret_bytes = bytes_to_copy;
   11348:	683b      	ldr	r3, [r7, #0]
   1134a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1134c:	601a      	str	r2, [r3, #0]

	/* Setup stage is handled by hardware.
	 * Detect the setup stage initiated by the stack
	 * and perform appropriate action.
	 */
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
   1134e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11350:	7a9b      	ldrb	r3, [r3, #10]
   11352:	2b00      	cmp	r3, #0
   11354:	d10f      	bne.n	11376 <usb_dc_ep_write+0x102>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
   11356:	f7fc fe55 	bl	e004 <nrfx_usbd_last_setup_dir_get>
   1135a:	4603      	mov	r3, r0
   1135c:	461a      	mov	r2, r3
   1135e:	7bfb      	ldrb	r3, [r7, #15]
   11360:	4293      	cmp	r3, r2
   11362:	d008      	beq.n	11376 <usb_dc_ep_write+0x102>
		nrfx_usbd_setup_clear();
   11364:	f00b fa33 	bl	1c7ce <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
   11368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1136a:	3314      	adds	r3, #20
   1136c:	4618      	mov	r0, r3
   1136e:	f00f f9a1 	bl	206b4 <k_mutex_unlock>
		return 0;
   11372:	2300      	movs	r3, #0
   11374:	e030      	b.n	113d8 <usb_dc_ep_write+0x164>
	}

	int result = 0;
   11376:	2300      	movs	r3, #0
   11378:	633b      	str	r3, [r7, #48]	; 0x30
	ep_ctx->write_in_progress = true;
   1137a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1137c:	2201      	movs	r2, #1
   1137e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	NRFX_USBD_TRANSFER_IN(transfer, ep_ctx->buf.data, ep_ctx->buf.len, 0);
   11382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11384:	699b      	ldr	r3, [r3, #24]
   11386:	61bb      	str	r3, [r7, #24]
   11388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1138a:	68db      	ldr	r3, [r3, #12]
   1138c:	61fb      	str	r3, [r7, #28]
   1138e:	2300      	movs	r3, #0
   11390:	623b      	str	r3, [r7, #32]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   11392:	7bfb      	ldrb	r3, [r7, #15]
   11394:	4618      	mov	r0, r3
   11396:	f00f f9f0 	bl	2077a <ep_addr_to_nrfx>
   1139a:	4603      	mov	r3, r0
   1139c:	461a      	mov	r2, r3
   1139e:	f107 0318 	add.w	r3, r7, #24
   113a2:	4619      	mov	r1, r3
   113a4:	4610      	mov	r0, r2
   113a6:	f7fc fd41 	bl	de2c <nrfx_usbd_ep_transfer>
   113aa:	62b8      	str	r0, [r7, #40]	; 0x28

	if (err != NRFX_SUCCESS) {
   113ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   113ae:	4a0c      	ldr	r2, [pc, #48]	; (113e0 <usb_dc_ep_write+0x16c>)
   113b0:	4293      	cmp	r3, r2
   113b2:	d00b      	beq.n	113cc <usb_dc_ep_write+0x158>
		ep_ctx->write_in_progress = false;
   113b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   113b6:	2200      	movs	r2, #0
   113b8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		result = -EIO;
   113bc:	f06f 0304 	mvn.w	r3, #4
   113c0:	633b      	str	r3, [r7, #48]	; 0x30
		LOG_ERR("nRF USBD write error: %d.", (u32_t)err);
   113c2:	f00f f903 	bl	205cc <_is_user_context>
   113c6:	4603      	mov	r3, r0
   113c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	k_mutex_unlock(&ctx->drv_lock);
   113cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   113ce:	3314      	adds	r3, #20
   113d0:	4618      	mov	r0, r3
   113d2:	f00f f96f 	bl	206b4 <k_mutex_unlock>
	return result;
   113d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   113d8:	4618      	mov	r0, r3
   113da:	3740      	adds	r7, #64	; 0x40
   113dc:	46bd      	mov	sp, r7
   113de:	bd80      	pop	{r7, pc}
   113e0:	0bad0000 	.word	0x0bad0000

000113e4 <__NVIC_ClearPendingIRQ>:
{
   113e4:	b480      	push	{r7}
   113e6:	b083      	sub	sp, #12
   113e8:	af00      	add	r7, sp, #0
   113ea:	4603      	mov	r3, r0
   113ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   113ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
   113f2:	2b00      	cmp	r3, #0
   113f4:	db0c      	blt.n	11410 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   113f6:	79fb      	ldrb	r3, [r7, #7]
   113f8:	f003 021f 	and.w	r2, r3, #31
   113fc:	4907      	ldr	r1, [pc, #28]	; (1141c <__NVIC_ClearPendingIRQ+0x38>)
   113fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
   11402:	095b      	lsrs	r3, r3, #5
   11404:	2001      	movs	r0, #1
   11406:	fa00 f202 	lsl.w	r2, r0, r2
   1140a:	3360      	adds	r3, #96	; 0x60
   1140c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11410:	bf00      	nop
   11412:	370c      	adds	r7, #12
   11414:	46bd      	mov	sp, r7
   11416:	bc80      	pop	{r7}
   11418:	4770      	bx	lr
   1141a:	bf00      	nop
   1141c:	e000e100 	.word	0xe000e100

00011420 <nrf_rtc_prescaler_set>:
{
     return p_reg->COUNTER;
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
   11420:	b580      	push	{r7, lr}
   11422:	b082      	sub	sp, #8
   11424:	af00      	add	r7, sp, #0
   11426:	6078      	str	r0, [r7, #4]
   11428:	6039      	str	r1, [r7, #0]
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
   1142a:	683b      	ldr	r3, [r7, #0]
   1142c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   11430:	d306      	bcc.n	11440 <nrf_rtc_prescaler_set+0x20>
   11432:	4b07      	ldr	r3, [pc, #28]	; (11450 <nrf_rtc_prescaler_set+0x30>)
   11434:	4a07      	ldr	r2, [pc, #28]	; (11454 <nrf_rtc_prescaler_set+0x34>)
   11436:	f240 116b 	movw	r1, #363	; 0x16b
   1143a:	4807      	ldr	r0, [pc, #28]	; (11458 <nrf_rtc_prescaler_set+0x38>)
   1143c:	f7ef f99e 	bl	77c <__assert_func>
    p_reg->PRESCALER = val;
   11440:	687b      	ldr	r3, [r7, #4]
   11442:	683a      	ldr	r2, [r7, #0]
   11444:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
   11448:	bf00      	nop
   1144a:	3708      	adds	r7, #8
   1144c:	46bd      	mov	sp, r7
   1144e:	bd80      	pop	{r7, pc}
   11450:	0002e23c 	.word	0x0002e23c
   11454:	0002ef14 	.word	0x0002ef14
   11458:	0002e264 	.word	0x0002e264

0001145c <set_comparator>:
{
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(u32_t cyc)
{
   1145c:	b580      	push	{r7, lr}
   1145e:	b082      	sub	sp, #8
   11460:	af00      	add	r7, sp, #0
   11462:	6078      	str	r0, [r7, #4]
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   11464:	687b      	ldr	r3, [r7, #4]
   11466:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1146a:	461a      	mov	r2, r3
   1146c:	2100      	movs	r1, #0
   1146e:	4803      	ldr	r0, [pc, #12]	; (1147c <set_comparator+0x20>)
   11470:	f00f ff6f 	bl	21352 <nrf_rtc_cc_set>
}
   11474:	bf00      	nop
   11476:	3708      	adds	r7, #8
   11478:	46bd      	mov	sp, r7
   1147a:	bd80      	pop	{r7, pc}
   1147c:	40011000 	.word	0x40011000

00011480 <counter>:

static u32_t counter(void)
{
   11480:	b580      	push	{r7, lr}
   11482:	af00      	add	r7, sp, #0
	return nrf_rtc_counter_get(RTC);
   11484:	4802      	ldr	r0, [pc, #8]	; (11490 <counter+0x10>)
   11486:	f00f ff9a 	bl	213be <nrf_rtc_counter_get>
   1148a:	4603      	mov	r3, r0
}
   1148c:	4618      	mov	r0, r3
   1148e:	bd80      	pop	{r7, pc}
   11490:	40011000 	.word	0x40011000

00011494 <rtc1_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
   11494:	b580      	push	{r7, lr}
   11496:	b08c      	sub	sp, #48	; 0x30
   11498:	af00      	add	r7, sp, #0
   1149a:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
   1149c:	4b21      	ldr	r3, [pc, #132]	; (11524 <rtc1_nrf_isr+0x90>)
   1149e:	2200      	movs	r2, #0
   114a0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
   114a4:	4b20      	ldr	r3, [pc, #128]	; (11528 <rtc1_nrf_isr+0x94>)
   114a6:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
   114a8:	f04f 0320 	mov.w	r3, #32
   114ac:	f3ef 8211 	mrs	r2, BASEPRI
   114b0:	f383 8811 	msr	BASEPRI, r3
   114b4:	f3bf 8f6f 	isb	sy
   114b8:	623a      	str	r2, [r7, #32]
   114ba:	61fb      	str	r3, [r7, #28]
	return key;
   114bc:	6a3b      	ldr	r3, [r7, #32]

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = z_arch_irq_lock();
   114be:	60bb      	str	r3, [r7, #8]
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   114c0:	68bb      	ldr	r3, [r7, #8]
   114c2:	613b      	str	r3, [r7, #16]

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
   114c4:	f7ff ffdc 	bl	11480 <counter>
   114c8:	62f8      	str	r0, [r7, #44]	; 0x2c
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   114ca:	4b18      	ldr	r3, [pc, #96]	; (1152c <rtc1_nrf_isr+0x98>)
   114cc:	681b      	ldr	r3, [r3, #0]
   114ce:	4619      	mov	r1, r3
   114d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   114d2:	f00f ff9f 	bl	21414 <counter_sub>
   114d6:	4602      	mov	r2, r0
   114d8:	4b15      	ldr	r3, [pc, #84]	; (11530 <rtc1_nrf_isr+0x9c>)
   114da:	fba3 1302 	umull	r1, r3, r3, r2
   114de:	1ad2      	subs	r2, r2, r3
   114e0:	0852      	lsrs	r2, r2, #1
   114e2:	4413      	add	r3, r2
   114e4:	0a1b      	lsrs	r3, r3, #8
   114e6:	62bb      	str	r3, [r7, #40]	; 0x28

	last_count += dticks * CYC_PER_TICK;
   114e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   114ea:	f240 1247 	movw	r2, #327	; 0x147
   114ee:	fb02 f203 	mul.w	r2, r2, r3
   114f2:	4b0e      	ldr	r3, [pc, #56]	; (1152c <rtc1_nrf_isr+0x98>)
   114f4:	681b      	ldr	r3, [r3, #0]
   114f6:	4413      	add	r3, r2
   114f8:	4a0c      	ldr	r2, [pc, #48]	; (1152c <rtc1_nrf_isr+0x98>)
   114fa:	6013      	str	r3, [r2, #0]
   114fc:	4b0a      	ldr	r3, [pc, #40]	; (11528 <rtc1_nrf_isr+0x94>)
   114fe:	61bb      	str	r3, [r7, #24]
   11500:	693b      	ldr	r3, [r7, #16]
   11502:	60fb      	str	r3, [r7, #12]
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	z_arch_irq_unlock(key.key);
   11504:	68fb      	ldr	r3, [r7, #12]
   11506:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
   11508:	697b      	ldr	r3, [r7, #20]
   1150a:	f383 8811 	msr	BASEPRI, r3
   1150e:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   11512:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11514:	4618      	mov	r0, r3
   11516:	f007 f8bd 	bl	18694 <z_clock_announce>
}
   1151a:	bf00      	nop
   1151c:	3730      	adds	r7, #48	; 0x30
   1151e:	46bd      	mov	sp, r7
   11520:	bd80      	pop	{r7, pc}
   11522:	bf00      	nop
   11524:	40011000 	.word	0x40011000
   11528:	20003d48 	.word	0x20003d48
   1152c:	20003d48 	.word	0x20003d48
   11530:	90d4f121 	.word	0x90d4f121

00011534 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
   11534:	b580      	push	{r7, lr}
   11536:	b084      	sub	sp, #16
   11538:	af00      	add	r7, sp, #0
   1153a:	6078      	str	r0, [r7, #4]
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_NORDIC_NRF_CLOCK_0_LABEL "_32K");
   1153c:	4823      	ldr	r0, [pc, #140]	; (115cc <z_clock_driver_init+0x98>)
   1153e:	f00f feea 	bl	21316 <device_get_binding>
   11542:	60f8      	str	r0, [r7, #12]
	if (!clock) {
   11544:	68fb      	ldr	r3, [r7, #12]
   11546:	2b00      	cmp	r3, #0
   11548:	d102      	bne.n	11550 <z_clock_driver_init+0x1c>
		return -1;
   1154a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1154e:	e038      	b.n	115c2 <z_clock_driver_init+0x8e>
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF_K32SRC);
   11550:	2101      	movs	r1, #1
   11552:	68f8      	ldr	r0, [r7, #12]
   11554:	f00f feeb 	bl	2132e <clock_control_on>

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
   11558:	2100      	movs	r1, #0
   1155a:	481d      	ldr	r0, [pc, #116]	; (115d0 <z_clock_driver_init+0x9c>)
   1155c:	f7ff ff60 	bl	11420 <nrf_rtc_prescaler_set>
	nrf_rtc_cc_set(RTC, 0, CYC_PER_TICK);
   11560:	f240 1247 	movw	r2, #327	; 0x147
   11564:	2100      	movs	r1, #0
   11566:	481a      	ldr	r0, [pc, #104]	; (115d0 <z_clock_driver_init+0x9c>)
   11568:	f00f fef3 	bl	21352 <nrf_rtc_cc_set>
	nrf_rtc_event_enable(RTC, RTC_EVTENSET_COMPARE0_Msk);
   1156c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   11570:	4817      	ldr	r0, [pc, #92]	; (115d0 <z_clock_driver_init+0x9c>)
   11572:	f00f ff41 	bl	213f8 <nrf_rtc_event_enable>
	nrf_rtc_int_enable(RTC, RTC_INTENSET_COMPARE0_Msk);
   11576:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1157a:	4815      	ldr	r0, [pc, #84]	; (115d0 <z_clock_driver_init+0x9c>)
   1157c:	f00f fefb 	bl	21376 <nrf_rtc_int_enable>

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
   11580:	f44f 71a0 	mov.w	r1, #320	; 0x140
   11584:	4812      	ldr	r0, [pc, #72]	; (115d0 <z_clock_driver_init+0x9c>)
   11586:	f00f ff04 	bl	21392 <nrf_rtc_event_clear>
	NVIC_ClearPendingIRQ(RTC1_IRQn);
   1158a:	2011      	movs	r0, #17
   1158c:	f7ff ff2a 	bl	113e4 <__NVIC_ClearPendingIRQ>

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
   11590:	2200      	movs	r2, #0
   11592:	2101      	movs	r1, #1
   11594:	2011      	movs	r0, #17
   11596:	f00f ff90 	bl	214ba <z_irq_priority_set>
	irq_enable(RTC1_IRQn);
   1159a:	2011      	movs	r0, #17
   1159c:	f00f ff73 	bl	21486 <z_arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
   115a0:	2108      	movs	r1, #8
   115a2:	480b      	ldr	r0, [pc, #44]	; (115d0 <z_clock_driver_init+0x9c>)
   115a4:	f00f ff17 	bl	213d6 <nrf_rtc_task_trigger>
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);
   115a8:	2100      	movs	r1, #0
   115aa:	4809      	ldr	r0, [pc, #36]	; (115d0 <z_clock_driver_init+0x9c>)
   115ac:	f00f ff13 	bl	213d6 <nrf_rtc_task_trigger>

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
   115b0:	f7ff ff66 	bl	11480 <counter>
   115b4:	4603      	mov	r3, r0
   115b6:	f203 1347 	addw	r3, r3, #327	; 0x147
   115ba:	4618      	mov	r0, r3
   115bc:	f7ff ff4e 	bl	1145c <set_comparator>
	}

	return 0;
   115c0:	2300      	movs	r3, #0
}
   115c2:	4618      	mov	r0, r3
   115c4:	3710      	adds	r7, #16
   115c6:	46bd      	mov	sp, r7
   115c8:	bd80      	pop	{r7, pc}
   115ca:	bf00      	nop
   115cc:	0002e28c 	.word	0x0002e28c
   115d0:	40011000 	.word	0x40011000

000115d4 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
   115d4:	b590      	push	{r4, r7, lr}
   115d6:	b08d      	sub	sp, #52	; 0x34
   115d8:	af00      	add	r7, sp, #0
   115da:	6078      	str	r0, [r7, #4]
   115dc:	460b      	mov	r3, r1
   115de:	70fb      	strb	r3, [r7, #3]
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
   115e0:	687b      	ldr	r3, [r7, #4]
   115e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   115e6:	d001      	beq.n	115ec <z_clock_set_timeout+0x18>
   115e8:	687b      	ldr	r3, [r7, #4]
   115ea:	e001      	b.n	115f0 <z_clock_set_timeout+0x1c>
   115ec:	f64c 0369 	movw	r3, #51305	; 0xc869
   115f0:	607b      	str	r3, [r7, #4]
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
   115f2:	687b      	ldr	r3, [r7, #4]
   115f4:	3b01      	subs	r3, #1
   115f6:	2b00      	cmp	r3, #0
   115f8:	dd07      	ble.n	1160a <z_clock_set_timeout+0x36>
   115fa:	687b      	ldr	r3, [r7, #4]
   115fc:	3b01      	subs	r3, #1
   115fe:	f64c 0269 	movw	r2, #51305	; 0xc869
   11602:	4293      	cmp	r3, r2
   11604:	bfa8      	it	ge
   11606:	4613      	movge	r3, r2
   11608:	e000      	b.n	1160c <z_clock_set_timeout+0x38>
   1160a:	2300      	movs	r3, #0
   1160c:	607b      	str	r3, [r7, #4]
   1160e:	4b2a      	ldr	r3, [pc, #168]	; (116b8 <z_clock_set_timeout+0xe4>)
   11610:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
   11612:	f04f 0320 	mov.w	r3, #32
   11616:	f3ef 8211 	mrs	r2, BASEPRI
   1161a:	f383 8811 	msr	BASEPRI, r3
   1161e:	f3bf 8f6f 	isb	sy
   11622:	623a      	str	r2, [r7, #32]
   11624:	61fb      	str	r3, [r7, #28]
	return key;
   11626:	6a3b      	ldr	r3, [r7, #32]
	k.key = z_arch_irq_lock();
   11628:	60bb      	str	r3, [r7, #8]
	return k;
   1162a:	68bb      	ldr	r3, [r7, #8]
   1162c:	613b      	str	r3, [r7, #16]

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, t = counter();
   1162e:	f7ff ff27 	bl	11480 <counter>
   11632:	62b8      	str	r0, [r7, #40]	; 0x28

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + counter_sub(t, last_count);
   11634:	687b      	ldr	r3, [r7, #4]
   11636:	f240 1247 	movw	r2, #327	; 0x147
   1163a:	fb02 f303 	mul.w	r3, r2, r3
   1163e:	461c      	mov	r4, r3
   11640:	4b1e      	ldr	r3, [pc, #120]	; (116bc <z_clock_set_timeout+0xe8>)
   11642:	681b      	ldr	r3, [r3, #0]
   11644:	4619      	mov	r1, r3
   11646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   11648:	f00f fee4 	bl	21414 <counter_sub>
   1164c:	4603      	mov	r3, r0
   1164e:	4423      	add	r3, r4
   11650:	62fb      	str	r3, [r7, #44]	; 0x2c
	cyc += (CYC_PER_TICK - 1);
   11652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11654:	f503 73a3 	add.w	r3, r3, #326	; 0x146
   11658:	62fb      	str	r3, [r7, #44]	; 0x2c
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
   1165a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1165c:	4b18      	ldr	r3, [pc, #96]	; (116c0 <z_clock_set_timeout+0xec>)
   1165e:	fba3 1302 	umull	r1, r3, r3, r2
   11662:	1ad2      	subs	r2, r2, r3
   11664:	0852      	lsrs	r2, r2, #1
   11666:	4413      	add	r3, r2
   11668:	0a1b      	lsrs	r3, r3, #8
   1166a:	f240 1247 	movw	r2, #327	; 0x147
   1166e:	fb02 f303 	mul.w	r3, r2, r3
   11672:	62fb      	str	r3, [r7, #44]	; 0x2c
	cyc += last_count;
   11674:	4b11      	ldr	r3, [pc, #68]	; (116bc <z_clock_set_timeout+0xe8>)
   11676:	681b      	ldr	r3, [r3, #0]
   11678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1167a:	4413      	add	r3, r2
   1167c:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (counter_sub(cyc, t) < MIN_DELAY) {
   1167e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11680:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   11682:	f00f fec7 	bl	21414 <counter_sub>
   11686:	4603      	mov	r3, r0
   11688:	2b1f      	cmp	r3, #31
   1168a:	d803      	bhi.n	11694 <z_clock_set_timeout+0xc0>
		cyc += CYC_PER_TICK;
   1168c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1168e:	f203 1347 	addw	r3, r3, #327	; 0x147
   11692:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	set_comparator(cyc);
   11694:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   11696:	f7ff fee1 	bl	1145c <set_comparator>
   1169a:	4b07      	ldr	r3, [pc, #28]	; (116b8 <z_clock_set_timeout+0xe4>)
   1169c:	61bb      	str	r3, [r7, #24]
   1169e:	693b      	ldr	r3, [r7, #16]
   116a0:	60fb      	str	r3, [r7, #12]
	z_arch_irq_unlock(key.key);
   116a2:	68fb      	ldr	r3, [r7, #12]
   116a4:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
   116a6:	697b      	ldr	r3, [r7, #20]
   116a8:	f383 8811 	msr	BASEPRI, r3
   116ac:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);
#endif
}
   116b0:	bf00      	nop
   116b2:	3734      	adds	r7, #52	; 0x34
   116b4:	46bd      	mov	sp, r7
   116b6:	bd90      	pop	{r4, r7, pc}
   116b8:	20003d48 	.word	0x20003d48
   116bc:	20003d48 	.word	0x20003d48
   116c0:	90d4f121 	.word	0x90d4f121

000116c4 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
   116c4:	b580      	push	{r7, lr}
   116c6:	b08a      	sub	sp, #40	; 0x28
   116c8:	af00      	add	r7, sp, #0
   116ca:	4b19      	ldr	r3, [pc, #100]	; (11730 <z_clock_elapsed+0x6c>)
   116cc:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
   116ce:	f04f 0320 	mov.w	r3, #32
   116d2:	f3ef 8211 	mrs	r2, BASEPRI
   116d6:	f383 8811 	msr	BASEPRI, r3
   116da:	f3bf 8f6f 	isb	sy
   116de:	617a      	str	r2, [r7, #20]
   116e0:	613b      	str	r3, [r7, #16]
	return key;
   116e2:	697b      	ldr	r3, [r7, #20]
	k.key = z_arch_irq_lock();
   116e4:	60bb      	str	r3, [r7, #8]
	return k;
   116e6:	68bb      	ldr	r3, [r7, #8]
   116e8:	60fb      	str	r3, [r7, #12]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   116ea:	f7ff fec9 	bl	11480 <counter>
   116ee:	4602      	mov	r2, r0
   116f0:	4b10      	ldr	r3, [pc, #64]	; (11734 <z_clock_elapsed+0x70>)
   116f2:	681b      	ldr	r3, [r3, #0]
   116f4:	4619      	mov	r1, r3
   116f6:	4610      	mov	r0, r2
   116f8:	f00f fe8c 	bl	21414 <counter_sub>
   116fc:	4602      	mov	r2, r0
   116fe:	4b0e      	ldr	r3, [pc, #56]	; (11738 <z_clock_elapsed+0x74>)
   11700:	fba3 1302 	umull	r1, r3, r3, r2
   11704:	1ad2      	subs	r2, r2, r3
   11706:	0852      	lsrs	r2, r2, #1
   11708:	4413      	add	r3, r2
   1170a:	0a1b      	lsrs	r3, r3, #8
   1170c:	627b      	str	r3, [r7, #36]	; 0x24
   1170e:	4b08      	ldr	r3, [pc, #32]	; (11730 <z_clock_elapsed+0x6c>)
   11710:	623b      	str	r3, [r7, #32]
   11712:	68fb      	ldr	r3, [r7, #12]
   11714:	607b      	str	r3, [r7, #4]
	z_arch_irq_unlock(key.key);
   11716:	687b      	ldr	r3, [r7, #4]
   11718:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   1171a:	69fb      	ldr	r3, [r7, #28]
   1171c:	f383 8811 	msr	BASEPRI, r3
   11720:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
   11724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   11726:	4618      	mov	r0, r3
   11728:	3728      	adds	r7, #40	; 0x28
   1172a:	46bd      	mov	sp, r7
   1172c:	bd80      	pop	{r7, pc}
   1172e:	bf00      	nop
   11730:	20003d48 	.word	0x20003d48
   11734:	20003d48 	.word	0x20003d48
   11738:	90d4f121 	.word	0x90d4f121

0001173c <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
   1173c:	b580      	push	{r7, lr}
   1173e:	b08a      	sub	sp, #40	; 0x28
   11740:	af00      	add	r7, sp, #0
   11742:	4b17      	ldr	r3, [pc, #92]	; (117a0 <z_timer_cycle_get_32+0x64>)
   11744:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
   11746:	f04f 0320 	mov.w	r3, #32
   1174a:	f3ef 8211 	mrs	r2, BASEPRI
   1174e:	f383 8811 	msr	BASEPRI, r3
   11752:	f3bf 8f6f 	isb	sy
   11756:	617a      	str	r2, [r7, #20]
   11758:	613b      	str	r3, [r7, #16]
	return key;
   1175a:	697b      	ldr	r3, [r7, #20]
	k.key = z_arch_irq_lock();
   1175c:	60bb      	str	r3, [r7, #8]
	return k;
   1175e:	68bb      	ldr	r3, [r7, #8]
   11760:	60fb      	str	r3, [r7, #12]
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   11762:	f7ff fe8d 	bl	11480 <counter>
   11766:	4602      	mov	r2, r0
   11768:	4b0e      	ldr	r3, [pc, #56]	; (117a4 <z_timer_cycle_get_32+0x68>)
   1176a:	681b      	ldr	r3, [r3, #0]
   1176c:	4619      	mov	r1, r3
   1176e:	4610      	mov	r0, r2
   11770:	f00f fe50 	bl	21414 <counter_sub>
   11774:	4602      	mov	r2, r0
   11776:	4b0b      	ldr	r3, [pc, #44]	; (117a4 <z_timer_cycle_get_32+0x68>)
   11778:	681b      	ldr	r3, [r3, #0]
   1177a:	4413      	add	r3, r2
   1177c:	627b      	str	r3, [r7, #36]	; 0x24
   1177e:	4b08      	ldr	r3, [pc, #32]	; (117a0 <z_timer_cycle_get_32+0x64>)
   11780:	623b      	str	r3, [r7, #32]
   11782:	68fb      	ldr	r3, [r7, #12]
   11784:	607b      	str	r3, [r7, #4]
	z_arch_irq_unlock(key.key);
   11786:	687b      	ldr	r3, [r7, #4]
   11788:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   1178a:	69fb      	ldr	r3, [r7, #28]
   1178c:	f383 8811 	msr	BASEPRI, r3
   11790:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
   11794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   11796:	4618      	mov	r0, r3
   11798:	3728      	adds	r7, #40	; 0x28
   1179a:	46bd      	mov	sp, r7
   1179c:	bd80      	pop	{r7, pc}
   1179e:	bf00      	nop
   117a0:	20003d48 	.word	0x20003d48
   117a4:	20003d48 	.word	0x20003d48

000117a8 <_IntExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   117a8:	4804      	ldr	r0, [pc, #16]	; (117bc <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
   117aa:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
   117ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
   117ae:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   117b0:	d003      	beq.n	117ba <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   117b2:	4903      	ldr	r1, [pc, #12]	; (117c0 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
   117b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
   117b8:	600a      	str	r2, [r1, #0]

000117ba <_EXIT_EXC>:
    mov lr, r1
#else
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */
    bx lr
   117ba:	4770      	bx	lr
    ldr r0, =_kernel
   117bc:	20006178 	.word	0x20006178
    ldr r1, =_SCS_ICSR
   117c0:	e000ed04 	.word	0xe000ed04

000117c4 <__NVIC_SetPriority>:
{
   117c4:	b480      	push	{r7}
   117c6:	b083      	sub	sp, #12
   117c8:	af00      	add	r7, sp, #0
   117ca:	4603      	mov	r3, r0
   117cc:	6039      	str	r1, [r7, #0]
   117ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   117d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   117d4:	2b00      	cmp	r3, #0
   117d6:	db0a      	blt.n	117ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   117d8:	683b      	ldr	r3, [r7, #0]
   117da:	b2da      	uxtb	r2, r3
   117dc:	490c      	ldr	r1, [pc, #48]	; (11810 <__NVIC_SetPriority+0x4c>)
   117de:	f997 3007 	ldrsb.w	r3, [r7, #7]
   117e2:	0152      	lsls	r2, r2, #5
   117e4:	b2d2      	uxtb	r2, r2
   117e6:	440b      	add	r3, r1
   117e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   117ec:	e00a      	b.n	11804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   117ee:	683b      	ldr	r3, [r7, #0]
   117f0:	b2da      	uxtb	r2, r3
   117f2:	4908      	ldr	r1, [pc, #32]	; (11814 <__NVIC_SetPriority+0x50>)
   117f4:	79fb      	ldrb	r3, [r7, #7]
   117f6:	f003 030f 	and.w	r3, r3, #15
   117fa:	3b04      	subs	r3, #4
   117fc:	0152      	lsls	r2, r2, #5
   117fe:	b2d2      	uxtb	r2, r2
   11800:	440b      	add	r3, r1
   11802:	761a      	strb	r2, [r3, #24]
}
   11804:	bf00      	nop
   11806:	370c      	adds	r7, #12
   11808:	46bd      	mov	sp, r7
   1180a:	bc80      	pop	{r7}
   1180c:	4770      	bx	lr
   1180e:	bf00      	nop
   11810:	e000e100 	.word	0xe000e100
   11814:	e000ed00 	.word	0xe000ed00

00011818 <__swap>:
 * @return -EAGAIN, or a return value set by a call to
 * z_set_thread_return_value()
 *
 */
int __swap(int key)
{
   11818:	b480      	push	{r7}
   1181a:	b085      	sub	sp, #20
   1181c:	af00      	add	r7, sp, #0
   1181e:	6078      	str	r0, [r7, #4]
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
   11820:	4b0e      	ldr	r3, [pc, #56]	; (1185c <__swap+0x44>)
   11822:	689b      	ldr	r3, [r3, #8]
   11824:	687a      	ldr	r2, [r7, #4]
   11826:	665a      	str	r2, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
   11828:	4b0d      	ldr	r3, [pc, #52]	; (11860 <__swap+0x48>)
   1182a:	681a      	ldr	r2, [r3, #0]
   1182c:	4b0b      	ldr	r3, [pc, #44]	; (1185c <__swap+0x44>)
   1182e:	689b      	ldr	r3, [r3, #8]
   11830:	669a      	str	r2, [r3, #104]	; 0x68

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11832:	4b0c      	ldr	r3, [pc, #48]	; (11864 <__swap+0x4c>)
   11834:	685b      	ldr	r3, [r3, #4]
   11836:	4a0b      	ldr	r2, [pc, #44]	; (11864 <__swap+0x4c>)
   11838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1183c:	6053      	str	r3, [r2, #4]
   1183e:	2300      	movs	r3, #0
   11840:	60fb      	str	r3, [r7, #12]
   11842:	68fb      	ldr	r3, [r7, #12]
   11844:	f383 8811 	msr	BASEPRI, r3
   11848:	f3bf 8f6f 	isb	sy
	irq_unlock(0);

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   1184c:	4b03      	ldr	r3, [pc, #12]	; (1185c <__swap+0x44>)
   1184e:	689b      	ldr	r3, [r3, #8]
   11850:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
   11852:	4618      	mov	r0, r3
   11854:	3714      	adds	r7, #20
   11856:	46bd      	mov	sp, r7
   11858:	bc80      	pop	{r7}
   1185a:	4770      	bx	lr
   1185c:	20006178 	.word	0x20006178
   11860:	0002f050 	.word	0x0002f050
   11864:	e000ed00 	.word	0xe000ed00

00011868 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   11868:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1186a:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1186e:	f3bf 8f6f 	isb	sy
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   11872:	4911      	ldr	r1, [pc, #68]	; (118b8 <__pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   11874:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   11876:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
   1187a:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
   1187c:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   11880:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
   11884:	4f0d      	ldr	r7, [pc, #52]	; (118bc <__pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   11886:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1188a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   1188c:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
   1188e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   11890:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs.n r3, #0
   11892:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   11894:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   11896:	f380 8811 	msr	BASEPRI, r0
    vldmia r0, {s16-s31}
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
   1189a:	b504      	push	{r2, lr}
    ldr r0, =_kernel
   1189c:	4806      	ldr	r0, [pc, #24]	; (118b8 <__pendsv+0x50>)
    ldr r0, [r0, #_kernel_offset_to_current]
   1189e:	6880      	ldr	r0, [r0, #8]
    bl z_arch_configure_dynamic_mpu_regions
   118a0:	f00f fe7b 	bl	2159a <z_arch_configure_dynamic_mpu_regions>
    pop {r2,lr}
   118a4:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   118a8:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
   118ac:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    /* clear stack pointer limit before setting the PSP */
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

    msr PSP, ip
   118b0:	f38c 8809 	msr	PSP, ip
    pop {r0, lr}
#endif
#endif /* CONFIG_TRACING */

    /* exc return */
    bx lr
   118b4:	4770      	bx	lr
   118b6:	0000      	.short	0x0000
    ldr r1, =_kernel
   118b8:	20006178 	.word	0x20006178
    ldr v4, =_SCS_ICSR
   118bc:	e000ed04 	.word	0xe000ed04

000118c0 <__svc>:
 * - System Calls (User mode)
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
   118c0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   118c4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   118c6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   118ca:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   118ce:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read encoding */
    ldrh r1, [r1, #-2]
   118d0:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call (if user mode supported)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
   118d4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
   118d8:	2902      	cmp	r1, #2
    beq _oops
   118da:	d0ff      	beq.n	118dc <_oops>

000118dc <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {r0, lr}
   118dc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   118de:	f00f fe1a 	bl	21516 <z_do_kernel_oops>
    pop {r0, pc}
   118e2:	bd01      	pop	{r0, pc}

000118e4 <MpuFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t MpuFault(NANO_ESF *esf, int fromHardFault)
{
   118e4:	b580      	push	{r7, lr}
   118e6:	b084      	sub	sp, #16
   118e8:	af00      	add	r7, sp, #0
   118ea:	6078      	str	r0, [r7, #4]
   118ec:	6039      	str	r1, [r7, #0]
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
   118ee:	2300      	movs	r3, #0
   118f0:	60fb      	str	r3, [r7, #12]
	u32_t mmfar = -EINVAL;
   118f2:	f06f 0315 	mvn.w	r3, #21
   118f6:	60bb      	str	r3, [r7, #8]

	PR_FAULT_INFO("***** MPU FAULT *****\n");
   118f8:	482d      	ldr	r0, [pc, #180]	; (119b0 <MpuFault+0xcc>)
   118fa:	f00a fb9b 	bl	1c034 <printk>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   118fe:	4b2d      	ldr	r3, [pc, #180]	; (119b4 <MpuFault+0xd0>)
   11900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11902:	f003 0310 	and.w	r3, r3, #16
   11906:	2b00      	cmp	r3, #0
   11908:	d002      	beq.n	11910 <MpuFault+0x2c>
		PR_FAULT_INFO("  Stacking error (context area might be"
   1190a:	482b      	ldr	r0, [pc, #172]	; (119b8 <MpuFault+0xd4>)
   1190c:	f00a fb92 	bl	1c034 <printk>
			" not valid)\n");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   11910:	4b28      	ldr	r3, [pc, #160]	; (119b4 <MpuFault+0xd0>)
   11912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11914:	f003 0308 	and.w	r3, r3, #8
   11918:	2b00      	cmp	r3, #0
   1191a:	d002      	beq.n	11922 <MpuFault+0x3e>
		PR_FAULT_INFO("  Unstacking error\n");
   1191c:	4827      	ldr	r0, [pc, #156]	; (119bc <MpuFault+0xd8>)
   1191e:	f00a fb89 	bl	1c034 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   11922:	4b24      	ldr	r3, [pc, #144]	; (119b4 <MpuFault+0xd0>)
   11924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11926:	f003 0302 	and.w	r3, r3, #2
   1192a:	2b00      	cmp	r3, #0
   1192c:	d018      	beq.n	11960 <MpuFault+0x7c>
		PR_FAULT_INFO("  Data Access Violation\n");
   1192e:	4824      	ldr	r0, [pc, #144]	; (119c0 <MpuFault+0xdc>)
   11930:	f00a fb80 	bl	1c034 <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
   11934:	4b1f      	ldr	r3, [pc, #124]	; (119b4 <MpuFault+0xd0>)
   11936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   11938:	60bb      	str	r3, [r7, #8]

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1193a:	4b1e      	ldr	r3, [pc, #120]	; (119b4 <MpuFault+0xd0>)
   1193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1193e:	f003 0380 	and.w	r3, r3, #128	; 0x80
   11942:	2b00      	cmp	r3, #0
   11944:	d00c      	beq.n	11960 <MpuFault+0x7c>
			PR_EXC("  MMFAR Address: 0x%x\n", mmfar);
   11946:	68b9      	ldr	r1, [r7, #8]
   11948:	481e      	ldr	r0, [pc, #120]	; (119c4 <MpuFault+0xe0>)
   1194a:	f00a fb73 	bl	1c034 <printk>
			if (fromHardFault) {
   1194e:	683b      	ldr	r3, [r7, #0]
   11950:	2b00      	cmp	r3, #0
   11952:	d005      	beq.n	11960 <MpuFault+0x7c>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   11954:	4b17      	ldr	r3, [pc, #92]	; (119b4 <MpuFault+0xd0>)
   11956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11958:	4a16      	ldr	r2, [pc, #88]	; (119b4 <MpuFault+0xd0>)
   1195a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1195e:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   11960:	4b14      	ldr	r3, [pc, #80]	; (119b4 <MpuFault+0xd0>)
   11962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11964:	f003 0301 	and.w	r3, r3, #1
   11968:	2b00      	cmp	r3, #0
   1196a:	d002      	beq.n	11972 <MpuFault+0x8e>
		PR_FAULT_INFO("  Instruction Access Violation\n");
   1196c:	4816      	ldr	r0, [pc, #88]	; (119c8 <MpuFault+0xe4>)
   1196e:	f00a fb61 	bl	1c034 <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   11972:	4b10      	ldr	r3, [pc, #64]	; (119b4 <MpuFault+0xd0>)
   11974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11976:	f003 0320 	and.w	r3, r3, #32
   1197a:	2b00      	cmp	r3, #0
   1197c:	d002      	beq.n	11984 <MpuFault+0xa0>
		PR_FAULT_INFO(
   1197e:	4813      	ldr	r0, [pc, #76]	; (119cc <MpuFault+0xe8>)
   11980:	f00a fb58 	bl	1c034 <printk>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   11984:	4b0b      	ldr	r3, [pc, #44]	; (119b4 <MpuFault+0xd0>)
   11986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   11988:	4b0a      	ldr	r3, [pc, #40]	; (119b4 <MpuFault+0xd0>)
   1198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1198c:	4a09      	ldr	r2, [pc, #36]	; (119b4 <MpuFault+0xd0>)
   1198e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   11992:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	if (MemoryFaultIsRecoverable(esf)) {
   11994:	6878      	ldr	r0, [r7, #4]
   11996:	f00f fd6c 	bl	21472 <MemoryFaultIsRecoverable>
   1199a:	4603      	mov	r3, r0
   1199c:	2b00      	cmp	r3, #0
   1199e:	d001      	beq.n	119a4 <MpuFault+0xc0>
		reason = _NANO_ERR_RECOVERABLE;
   119a0:	2306      	movs	r3, #6
   119a2:	60fb      	str	r3, [r7, #12]
	}

	return reason;
   119a4:	68fb      	ldr	r3, [r7, #12]
}
   119a6:	4618      	mov	r0, r3
   119a8:	3710      	adds	r7, #16
   119aa:	46bd      	mov	sp, r7
   119ac:	bd80      	pop	{r7, pc}
   119ae:	bf00      	nop
   119b0:	0002e298 	.word	0x0002e298
   119b4:	e000ed00 	.word	0xe000ed00
   119b8:	0002e2b0 	.word	0x0002e2b0
   119bc:	0002e2e4 	.word	0x0002e2e4
   119c0:	0002e2f8 	.word	0x0002e2f8
   119c4:	0002e314 	.word	0x0002e314
   119c8:	0002e32c 	.word	0x0002e32c
   119cc:	0002e34c 	.word	0x0002e34c

000119d0 <BusFault>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static int BusFault(NANO_ESF *esf, int fromHardFault)
{
   119d0:	b580      	push	{r7, lr}
   119d2:	b084      	sub	sp, #16
   119d4:	af00      	add	r7, sp, #0
   119d6:	6078      	str	r0, [r7, #4]
   119d8:	6039      	str	r1, [r7, #0]
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
   119da:	2300      	movs	r3, #0
   119dc:	60fb      	str	r3, [r7, #12]

	PR_FAULT_INFO("***** BUS FAULT *****\n");
   119de:	4831      	ldr	r0, [pc, #196]	; (11aa4 <BusFault+0xd4>)
   119e0:	f00a fb28 	bl	1c034 <printk>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   119e4:	4b30      	ldr	r3, [pc, #192]	; (11aa8 <BusFault+0xd8>)
   119e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   119e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   119ec:	2b00      	cmp	r3, #0
   119ee:	d002      	beq.n	119f6 <BusFault+0x26>
		PR_FAULT_INFO("  Stacking error\n");
   119f0:	482e      	ldr	r0, [pc, #184]	; (11aac <BusFault+0xdc>)
   119f2:	f00a fb1f 	bl	1c034 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   119f6:	4b2c      	ldr	r3, [pc, #176]	; (11aa8 <BusFault+0xd8>)
   119f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   119fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   119fe:	2b00      	cmp	r3, #0
   11a00:	d002      	beq.n	11a08 <BusFault+0x38>
		PR_FAULT_INFO("  Unstacking error\n");
   11a02:	482b      	ldr	r0, [pc, #172]	; (11ab0 <BusFault+0xe0>)
   11a04:	f00a fb16 	bl	1c034 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   11a08:	4b27      	ldr	r3, [pc, #156]	; (11aa8 <BusFault+0xd8>)
   11a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11a0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
   11a10:	2b00      	cmp	r3, #0
   11a12:	d018      	beq.n	11a46 <BusFault+0x76>
		PR_FAULT_INFO("  Precise data bus error\n");
   11a14:	4827      	ldr	r0, [pc, #156]	; (11ab4 <BusFault+0xe4>)
   11a16:	f00a fb0d 	bl	1c034 <printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   11a1a:	4b23      	ldr	r3, [pc, #140]	; (11aa8 <BusFault+0xd8>)
   11a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   11a1e:	60bb      	str	r3, [r7, #8]

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   11a20:	4b21      	ldr	r3, [pc, #132]	; (11aa8 <BusFault+0xd8>)
   11a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11a24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
   11a28:	2b00      	cmp	r3, #0
   11a2a:	d00c      	beq.n	11a46 <BusFault+0x76>
			PR_EXC("  BFAR Address: 0x%x\n", bfar);
   11a2c:	68b9      	ldr	r1, [r7, #8]
   11a2e:	4822      	ldr	r0, [pc, #136]	; (11ab8 <BusFault+0xe8>)
   11a30:	f00a fb00 	bl	1c034 <printk>
			if (fromHardFault) {
   11a34:	683b      	ldr	r3, [r7, #0]
   11a36:	2b00      	cmp	r3, #0
   11a38:	d005      	beq.n	11a46 <BusFault+0x76>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   11a3a:	4b1b      	ldr	r3, [pc, #108]	; (11aa8 <BusFault+0xd8>)
   11a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11a3e:	4a1a      	ldr	r2, [pc, #104]	; (11aa8 <BusFault+0xd8>)
   11a40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   11a44:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   11a46:	4b18      	ldr	r3, [pc, #96]	; (11aa8 <BusFault+0xd8>)
   11a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   11a4e:	2b00      	cmp	r3, #0
   11a50:	d002      	beq.n	11a58 <BusFault+0x88>
		PR_FAULT_INFO("  Imprecise data bus error\n");
   11a52:	481a      	ldr	r0, [pc, #104]	; (11abc <BusFault+0xec>)
   11a54:	f00a faee 	bl	1c034 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   11a58:	4b13      	ldr	r3, [pc, #76]	; (11aa8 <BusFault+0xd8>)
   11a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
   11a60:	2b00      	cmp	r3, #0
   11a62:	d003      	beq.n	11a6c <BusFault+0x9c>
		PR_FAULT_INFO("  Instruction bus error\n");
   11a64:	4816      	ldr	r0, [pc, #88]	; (11ac0 <BusFault+0xf0>)
   11a66:	f00a fae5 	bl	1c034 <printk>
   11a6a:	e008      	b.n	11a7e <BusFault+0xae>
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   11a6c:	4b0e      	ldr	r3, [pc, #56]	; (11aa8 <BusFault+0xd8>)
   11a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   11a74:	2b00      	cmp	r3, #0
   11a76:	d002      	beq.n	11a7e <BusFault+0xae>
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
   11a78:	4812      	ldr	r0, [pc, #72]	; (11ac4 <BusFault+0xf4>)
   11a7a:	f00a fadb 	bl	1c034 <printk>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   11a7e:	4b0a      	ldr	r3, [pc, #40]	; (11aa8 <BusFault+0xd8>)
   11a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11a82:	4a09      	ldr	r2, [pc, #36]	; (11aa8 <BusFault+0xd8>)
   11a84:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   11a88:	6293      	str	r3, [r2, #40]	; 0x28

	if (MemoryFaultIsRecoverable(esf)) {
   11a8a:	6878      	ldr	r0, [r7, #4]
   11a8c:	f00f fcf1 	bl	21472 <MemoryFaultIsRecoverable>
   11a90:	4603      	mov	r3, r0
   11a92:	2b00      	cmp	r3, #0
   11a94:	d001      	beq.n	11a9a <BusFault+0xca>
		reason = _NANO_ERR_RECOVERABLE;
   11a96:	2306      	movs	r3, #6
   11a98:	60fb      	str	r3, [r7, #12]
	}

	return reason;
   11a9a:	68fb      	ldr	r3, [r7, #12]
}
   11a9c:	4618      	mov	r0, r3
   11a9e:	3710      	adds	r7, #16
   11aa0:	46bd      	mov	sp, r7
   11aa2:	bd80      	pop	{r7, pc}
   11aa4:	0002e37c 	.word	0x0002e37c
   11aa8:	e000ed00 	.word	0xe000ed00
   11aac:	0002e394 	.word	0x0002e394
   11ab0:	0002e2e4 	.word	0x0002e2e4
   11ab4:	0002e3a8 	.word	0x0002e3a8
   11ab8:	0002e3c4 	.word	0x0002e3c4
   11abc:	0002e3dc 	.word	0x0002e3dc
   11ac0:	0002e3f8 	.word	0x0002e3f8
   11ac4:	0002e34c 	.word	0x0002e34c

00011ac8 <UsageFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t UsageFault(const NANO_ESF *esf)
{
   11ac8:	b580      	push	{r7, lr}
   11aca:	b084      	sub	sp, #16
   11acc:	af00      	add	r7, sp, #0
   11ace:	6078      	str	r0, [r7, #4]
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
   11ad0:	2300      	movs	r3, #0
   11ad2:	60fb      	str	r3, [r7, #12]

	PR_FAULT_INFO("***** USAGE FAULT *****\n");
   11ad4:	4822      	ldr	r0, [pc, #136]	; (11b60 <UsageFault+0x98>)
   11ad6:	f00a faad 	bl	1c034 <printk>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   11ada:	4b22      	ldr	r3, [pc, #136]	; (11b64 <UsageFault+0x9c>)
   11adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   11ae2:	2b00      	cmp	r3, #0
   11ae4:	d002      	beq.n	11aec <UsageFault+0x24>
		PR_FAULT_INFO("  Division by zero\n");
   11ae6:	4820      	ldr	r0, [pc, #128]	; (11b68 <UsageFault+0xa0>)
   11ae8:	f00a faa4 	bl	1c034 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   11aec:	4b1d      	ldr	r3, [pc, #116]	; (11b64 <UsageFault+0x9c>)
   11aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11af0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   11af4:	2b00      	cmp	r3, #0
   11af6:	d002      	beq.n	11afe <UsageFault+0x36>
		PR_FAULT_INFO("  Unaligned memory access\n");
   11af8:	481c      	ldr	r0, [pc, #112]	; (11b6c <UsageFault+0xa4>)
   11afa:	f00a fa9b 	bl	1c034 <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   11afe:	4b19      	ldr	r3, [pc, #100]	; (11b64 <UsageFault+0x9c>)
   11b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11b02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   11b06:	2b00      	cmp	r3, #0
   11b08:	d002      	beq.n	11b10 <UsageFault+0x48>
		PR_FAULT_INFO("  No coprocessor instructions\n");
   11b0a:	4819      	ldr	r0, [pc, #100]	; (11b70 <UsageFault+0xa8>)
   11b0c:	f00a fa92 	bl	1c034 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   11b10:	4b14      	ldr	r3, [pc, #80]	; (11b64 <UsageFault+0x9c>)
   11b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11b14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   11b18:	2b00      	cmp	r3, #0
   11b1a:	d002      	beq.n	11b22 <UsageFault+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC\n");
   11b1c:	4815      	ldr	r0, [pc, #84]	; (11b74 <UsageFault+0xac>)
   11b1e:	f00a fa89 	bl	1c034 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   11b22:	4b10      	ldr	r3, [pc, #64]	; (11b64 <UsageFault+0x9c>)
   11b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   11b2a:	2b00      	cmp	r3, #0
   11b2c:	d002      	beq.n	11b34 <UsageFault+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR\n");
   11b2e:	4812      	ldr	r0, [pc, #72]	; (11b78 <UsageFault+0xb0>)
   11b30:	f00a fa80 	bl	1c034 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   11b34:	4b0b      	ldr	r3, [pc, #44]	; (11b64 <UsageFault+0x9c>)
   11b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   11b3c:	2b00      	cmp	r3, #0
   11b3e:	d002      	beq.n	11b46 <UsageFault+0x7e>
		PR_FAULT_INFO("  Attempt to execute undefined instruction\n");
   11b40:	480e      	ldr	r0, [pc, #56]	; (11b7c <UsageFault+0xb4>)
   11b42:	f00a fa77 	bl	1c034 <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   11b46:	4b07      	ldr	r3, [pc, #28]	; (11b64 <UsageFault+0x9c>)
   11b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11b4a:	4a06      	ldr	r2, [pc, #24]	; (11b64 <UsageFault+0x9c>)
   11b4c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   11b50:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   11b54:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
   11b56:	68fb      	ldr	r3, [r7, #12]
}
   11b58:	4618      	mov	r0, r3
   11b5a:	3710      	adds	r7, #16
   11b5c:	46bd      	mov	sp, r7
   11b5e:	bd80      	pop	{r7, pc}
   11b60:	0002e414 	.word	0x0002e414
   11b64:	e000ed00 	.word	0xe000ed00
   11b68:	0002e430 	.word	0x0002e430
   11b6c:	0002e444 	.word	0x0002e444
   11b70:	0002e460 	.word	0x0002e460
   11b74:	0002e480 	.word	0x0002e480
   11b78:	0002e4a8 	.word	0x0002e4a8
   11b7c:	0002e4c4 	.word	0x0002e4c4

00011b80 <DebugMonitor>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void DebugMonitor(const NANO_ESF *esf)
{
   11b80:	b580      	push	{r7, lr}
   11b82:	b082      	sub	sp, #8
   11b84:	af00      	add	r7, sp, #0
   11b86:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(esf);

	PR_FAULT_INFO(
   11b88:	4803      	ldr	r0, [pc, #12]	; (11b98 <DebugMonitor+0x18>)
   11b8a:	f00a fa53 	bl	1c034 <printk>
		"***** Debug monitor exception (not implemented) *****\n");
}
   11b8e:	bf00      	nop
   11b90:	3708      	adds	r7, #8
   11b92:	46bd      	mov	sp, r7
   11b94:	bd80      	pop	{r7, pc}
   11b96:	bf00      	nop
   11b98:	0002e4f0 	.word	0x0002e4f0

00011b9c <HardFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t HardFault(NANO_ESF *esf)
{
   11b9c:	b580      	push	{r7, lr}
   11b9e:	b084      	sub	sp, #16
   11ba0:	af00      	add	r7, sp, #0
   11ba2:	6078      	str	r0, [r7, #4]
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
   11ba4:	2300      	movs	r3, #0
   11ba6:	60fb      	str	r3, [r7, #12]

	PR_FAULT_INFO("***** HARD FAULT *****\n");
   11ba8:	481d      	ldr	r0, [pc, #116]	; (11c20 <HardFault+0x84>)
   11baa:	f00a fa43 	bl	1c034 <printk>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	if (MemoryFaultIsRecoverable(esf) != 0) {
		reason = _NANO_ERR_RECOVERABLE;
	}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   11bae:	4b1d      	ldr	r3, [pc, #116]	; (11c24 <HardFault+0x88>)
   11bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   11bb2:	f003 0302 	and.w	r3, r3, #2
   11bb6:	2b00      	cmp	r3, #0
   11bb8:	d003      	beq.n	11bc2 <HardFault+0x26>
		PR_EXC("  Bus fault on vector table read\n");
   11bba:	481b      	ldr	r0, [pc, #108]	; (11c28 <HardFault+0x8c>)
   11bbc:	f00a fa3a 	bl	1c034 <printk>
   11bc0:	e028      	b.n	11c14 <HardFault+0x78>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   11bc2:	4b18      	ldr	r3, [pc, #96]	; (11c24 <HardFault+0x88>)
   11bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   11bc6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
   11bca:	2b00      	cmp	r3, #0
   11bcc:	d022      	beq.n	11c14 <HardFault+0x78>
		PR_EXC("  Fault escalation (see below)\n");
   11bce:	4817      	ldr	r0, [pc, #92]	; (11c2c <HardFault+0x90>)
   11bd0:	f00a fa30 	bl	1c034 <printk>
		if (SCB_MMFSR != 0) {
   11bd4:	4b16      	ldr	r3, [pc, #88]	; (11c30 <HardFault+0x94>)
   11bd6:	781b      	ldrb	r3, [r3, #0]
   11bd8:	b2db      	uxtb	r3, r3
   11bda:	2b00      	cmp	r3, #0
   11bdc:	d005      	beq.n	11bea <HardFault+0x4e>
			reason = MpuFault(esf, 1);
   11bde:	2101      	movs	r1, #1
   11be0:	6878      	ldr	r0, [r7, #4]
   11be2:	f7ff fe7f 	bl	118e4 <MpuFault>
   11be6:	60f8      	str	r0, [r7, #12]
   11be8:	e014      	b.n	11c14 <HardFault+0x78>
		} else if (SCB_BFSR != 0) {
   11bea:	4b12      	ldr	r3, [pc, #72]	; (11c34 <HardFault+0x98>)
   11bec:	781b      	ldrb	r3, [r3, #0]
   11bee:	b2db      	uxtb	r3, r3
   11bf0:	2b00      	cmp	r3, #0
   11bf2:	d006      	beq.n	11c02 <HardFault+0x66>
			reason = BusFault(esf, 1);
   11bf4:	2101      	movs	r1, #1
   11bf6:	6878      	ldr	r0, [r7, #4]
   11bf8:	f7ff feea 	bl	119d0 <BusFault>
   11bfc:	4603      	mov	r3, r0
   11bfe:	60fb      	str	r3, [r7, #12]
   11c00:	e008      	b.n	11c14 <HardFault+0x78>
		} else if (SCB_UFSR != 0) {
   11c02:	4b0d      	ldr	r3, [pc, #52]	; (11c38 <HardFault+0x9c>)
   11c04:	881b      	ldrh	r3, [r3, #0]
   11c06:	b29b      	uxth	r3, r3
   11c08:	2b00      	cmp	r3, #0
   11c0a:	d003      	beq.n	11c14 <HardFault+0x78>
			reason = UsageFault(esf);
   11c0c:	6878      	ldr	r0, [r7, #4]
   11c0e:	f7ff ff5b 	bl	11ac8 <UsageFault>
   11c12:	60f8      	str	r0, [r7, #12]
	}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
   11c14:	68fb      	ldr	r3, [r7, #12]
}
   11c16:	4618      	mov	r0, r3
   11c18:	3710      	adds	r7, #16
   11c1a:	46bd      	mov	sp, r7
   11c1c:	bd80      	pop	{r7, pc}
   11c1e:	bf00      	nop
   11c20:	0002e528 	.word	0x0002e528
   11c24:	e000ed00 	.word	0xe000ed00
   11c28:	0002e540 	.word	0x0002e540
   11c2c:	0002e564 	.word	0x0002e564
   11c30:	e000ed28 	.word	0xe000ed28
   11c34:	e000ed29 	.word	0xe000ed29
   11c38:	e000ed2a 	.word	0xe000ed2a

00011c3c <ReservedException>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void ReservedException(const NANO_ESF *esf, int fault)
{
   11c3c:	b580      	push	{r7, lr}
   11c3e:	b082      	sub	sp, #8
   11c40:	af00      	add	r7, sp, #0
   11c42:	6078      	str	r0, [r7, #4]
   11c44:	6039      	str	r1, [r7, #0]
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****\n",
   11c46:	683b      	ldr	r3, [r7, #0]
   11c48:	2b0f      	cmp	r3, #15
   11c4a:	dc01      	bgt.n	11c50 <ReservedException+0x14>
   11c4c:	4906      	ldr	r1, [pc, #24]	; (11c68 <ReservedException+0x2c>)
   11c4e:	e000      	b.n	11c52 <ReservedException+0x16>
   11c50:	4906      	ldr	r1, [pc, #24]	; (11c6c <ReservedException+0x30>)
   11c52:	683b      	ldr	r3, [r7, #0]
   11c54:	3b10      	subs	r3, #16
   11c56:	461a      	mov	r2, r3
   11c58:	4805      	ldr	r0, [pc, #20]	; (11c70 <ReservedException+0x34>)
   11c5a:	f00a f9eb 	bl	1c034 <printk>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
   11c5e:	bf00      	nop
   11c60:	3708      	adds	r7, #8
   11c62:	46bd      	mov	sp, r7
   11c64:	bd80      	pop	{r7, pc}
   11c66:	bf00      	nop
   11c68:	0002e584 	.word	0x0002e584
   11c6c:	0002e59c 	.word	0x0002e59c
   11c70:	0002e5b8 	.word	0x0002e5b8

00011c74 <FaultHandle>:

/* Handler function for ARM fault conditions. */
static u32_t FaultHandle(NANO_ESF *esf, int fault)
{
   11c74:	b580      	push	{r7, lr}
   11c76:	b084      	sub	sp, #16
   11c78:	af00      	add	r7, sp, #0
   11c7a:	6078      	str	r0, [r7, #4]
   11c7c:	6039      	str	r1, [r7, #0]
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
   11c7e:	2300      	movs	r3, #0
   11c80:	60fb      	str	r3, [r7, #12]

	switch (fault) {
   11c82:	683b      	ldr	r3, [r7, #0]
   11c84:	3b03      	subs	r3, #3
   11c86:	2b09      	cmp	r3, #9
   11c88:	d831      	bhi.n	11cee <FaultHandle+0x7a>
   11c8a:	a201      	add	r2, pc, #4	; (adr r2, 11c90 <FaultHandle+0x1c>)
   11c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11c90:	00011cb9 	.word	0x00011cb9
   11c94:	00011cc3 	.word	0x00011cc3
   11c98:	00011ccf 	.word	0x00011ccf
   11c9c:	00011cdd 	.word	0x00011cdd
   11ca0:	00011cef 	.word	0x00011cef
   11ca4:	00011cef 	.word	0x00011cef
   11ca8:	00011cef 	.word	0x00011cef
   11cac:	00011cef 	.word	0x00011cef
   11cb0:	00011cef 	.word	0x00011cef
   11cb4:	00011ce7 	.word	0x00011ce7
	case 3:
		reason = HardFault(esf);
   11cb8:	6878      	ldr	r0, [r7, #4]
   11cba:	f7ff ff6f 	bl	11b9c <HardFault>
   11cbe:	60f8      	str	r0, [r7, #12]
		break;
   11cc0:	e01a      	b.n	11cf8 <FaultHandle+0x84>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	/* HardFault is used for all fault conditions on ARMv6-M. */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	case 4:
		reason = MpuFault(esf, 0);
   11cc2:	2100      	movs	r1, #0
   11cc4:	6878      	ldr	r0, [r7, #4]
   11cc6:	f7ff fe0d 	bl	118e4 <MpuFault>
   11cca:	60f8      	str	r0, [r7, #12]
		break;
   11ccc:	e014      	b.n	11cf8 <FaultHandle+0x84>
	case 5:
		reason = BusFault(esf, 0);
   11cce:	2100      	movs	r1, #0
   11cd0:	6878      	ldr	r0, [r7, #4]
   11cd2:	f7ff fe7d 	bl	119d0 <BusFault>
   11cd6:	4603      	mov	r3, r0
   11cd8:	60fb      	str	r3, [r7, #12]
		break;
   11cda:	e00d      	b.n	11cf8 <FaultHandle+0x84>
	case 6:
		reason = UsageFault(esf);
   11cdc:	6878      	ldr	r0, [r7, #4]
   11cde:	f7ff fef3 	bl	11ac8 <UsageFault>
   11ce2:	60f8      	str	r0, [r7, #12]
		break;
   11ce4:	e008      	b.n	11cf8 <FaultHandle+0x84>
	case 7:
		SecureFault(esf);
		break;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	case 12:
		DebugMonitor(esf);
   11ce6:	6878      	ldr	r0, [r7, #4]
   11ce8:	f7ff ff4a 	bl	11b80 <DebugMonitor>
		break;
   11cec:	e004      	b.n	11cf8 <FaultHandle+0x84>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	default:
		ReservedException(esf, fault);
   11cee:	6839      	ldr	r1, [r7, #0]
   11cf0:	6878      	ldr	r0, [r7, #4]
   11cf2:	f7ff ffa3 	bl	11c3c <ReservedException>
		break;
   11cf6:	bf00      	nop
	}

	if (reason != _NANO_ERR_RECOVERABLE) {
   11cf8:	68fb      	ldr	r3, [r7, #12]
   11cfa:	2b06      	cmp	r3, #6
   11cfc:	d003      	beq.n	11d06 <FaultHandle+0x92>
		/* Dump generic information about the fault. */
		FaultShow(esf, fault);
   11cfe:	6839      	ldr	r1, [r7, #0]
   11d00:	6878      	ldr	r0, [r7, #4]
   11d02:	f00f fbac 	bl	2145e <FaultShow>
	}

	return reason;
   11d06:	68fb      	ldr	r3, [r7, #12]
}
   11d08:	4618      	mov	r0, r3
   11d0a:	3710      	adds	r7, #16
   11d0c:	46bd      	mov	sp, r7
   11d0e:	bd80      	pop	{r7, pc}

00011d10 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void _Fault(NANO_ESF *esf, u32_t exc_return)
{
   11d10:	b580      	push	{r7, lr}
   11d12:	b084      	sub	sp, #16
   11d14:	af00      	add	r7, sp, #0
   11d16:	6078      	str	r0, [r7, #4]
   11d18:	6039      	str	r1, [r7, #0]
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
   11d1a:	2300      	movs	r3, #0
   11d1c:	60fb      	str	r3, [r7, #12]
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11d1e:	4b0b      	ldr	r3, [pc, #44]	; (11d4c <_Fault+0x3c>)
   11d20:	685b      	ldr	r3, [r3, #4]
   11d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
   11d26:	60bb      	str	r3, [r7, #8]
	}
#else
	(void) exc_return;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	reason = FaultHandle(esf, fault);
   11d28:	68b9      	ldr	r1, [r7, #8]
   11d2a:	6878      	ldr	r0, [r7, #4]
   11d2c:	f7ff ffa2 	bl	11c74 <FaultHandle>
   11d30:	60f8      	str	r0, [r7, #12]

	if (reason == _NANO_ERR_RECOVERABLE) {
   11d32:	68fb      	ldr	r3, [r7, #12]
   11d34:	2b06      	cmp	r3, #6
   11d36:	d004      	beq.n	11d42 <_Fault+0x32>

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_NanoFatalErrorHandler(reason, esf);
   11d38:	6879      	ldr	r1, [r7, #4]
   11d3a:	68f8      	ldr	r0, [r7, #12]
   11d3c:	f000 f910 	bl	11f60 <z_NanoFatalErrorHandler>
   11d40:	e000      	b.n	11d44 <_Fault+0x34>
		return;
   11d42:	bf00      	nop
}
   11d44:	3710      	adds	r7, #16
   11d46:	46bd      	mov	sp, r7
   11d48:	bd80      	pop	{r7, pc}
   11d4a:	bf00      	nop
   11d4c:	e000ed00 	.word	0xe000ed00

00011d50 <z_FaultInit>:
 * Turns on the desired hardware faults.
 *
 * @return N/A
 */
void z_FaultInit(void)
{
   11d50:	b480      	push	{r7}
   11d52:	af00      	add	r7, sp, #0
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   11d54:	4b04      	ldr	r3, [pc, #16]	; (11d68 <z_FaultInit+0x18>)
   11d56:	695b      	ldr	r3, [r3, #20]
   11d58:	4a03      	ldr	r2, [pc, #12]	; (11d68 <z_FaultInit+0x18>)
   11d5a:	f043 0310 	orr.w	r3, r3, #16
   11d5e:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   11d60:	bf00      	nop
   11d62:	46bd      	mov	sp, r7
   11d64:	bc80      	pop	{r7}
   11d66:	4770      	bx	lr
   11d68:	e000ed00 	.word	0xe000ed00

00011d6c <__NVIC_EnableIRQ>:
{
   11d6c:	b480      	push	{r7}
   11d6e:	b083      	sub	sp, #12
   11d70:	af00      	add	r7, sp, #0
   11d72:	4603      	mov	r3, r0
   11d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   11d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
   11d7a:	2b00      	cmp	r3, #0
   11d7c:	db0b      	blt.n	11d96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11d7e:	79fb      	ldrb	r3, [r7, #7]
   11d80:	f003 021f 	and.w	r2, r3, #31
   11d84:	4906      	ldr	r1, [pc, #24]	; (11da0 <__NVIC_EnableIRQ+0x34>)
   11d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
   11d8a:	095b      	lsrs	r3, r3, #5
   11d8c:	2001      	movs	r0, #1
   11d8e:	fa00 f202 	lsl.w	r2, r0, r2
   11d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11d96:	bf00      	nop
   11d98:	370c      	adds	r7, #12
   11d9a:	46bd      	mov	sp, r7
   11d9c:	bc80      	pop	{r7}
   11d9e:	4770      	bx	lr
   11da0:	e000e100 	.word	0xe000e100

00011da4 <__NVIC_DisableIRQ>:
{
   11da4:	b480      	push	{r7}
   11da6:	b083      	sub	sp, #12
   11da8:	af00      	add	r7, sp, #0
   11daa:	4603      	mov	r3, r0
   11dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   11dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
   11db2:	2b00      	cmp	r3, #0
   11db4:	db10      	blt.n	11dd8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11db6:	79fb      	ldrb	r3, [r7, #7]
   11db8:	f003 021f 	and.w	r2, r3, #31
   11dbc:	4909      	ldr	r1, [pc, #36]	; (11de4 <__NVIC_DisableIRQ+0x40>)
   11dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
   11dc2:	095b      	lsrs	r3, r3, #5
   11dc4:	2001      	movs	r0, #1
   11dc6:	fa00 f202 	lsl.w	r2, r0, r2
   11dca:	3320      	adds	r3, #32
   11dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   11dd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11dd4:	f3bf 8f6f 	isb	sy
}
   11dd8:	bf00      	nop
   11dda:	370c      	adds	r7, #12
   11ddc:	46bd      	mov	sp, r7
   11dde:	bc80      	pop	{r7}
   11de0:	4770      	bx	lr
   11de2:	bf00      	nop
   11de4:	e000e100 	.word	0xe000e100

00011de8 <__NVIC_SetPriority>:
{
   11de8:	b480      	push	{r7}
   11dea:	b083      	sub	sp, #12
   11dec:	af00      	add	r7, sp, #0
   11dee:	4603      	mov	r3, r0
   11df0:	6039      	str	r1, [r7, #0]
   11df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   11df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   11df8:	2b00      	cmp	r3, #0
   11dfa:	db0a      	blt.n	11e12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11dfc:	683b      	ldr	r3, [r7, #0]
   11dfe:	b2da      	uxtb	r2, r3
   11e00:	490c      	ldr	r1, [pc, #48]	; (11e34 <__NVIC_SetPriority+0x4c>)
   11e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
   11e06:	0152      	lsls	r2, r2, #5
   11e08:	b2d2      	uxtb	r2, r2
   11e0a:	440b      	add	r3, r1
   11e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   11e10:	e00a      	b.n	11e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11e12:	683b      	ldr	r3, [r7, #0]
   11e14:	b2da      	uxtb	r2, r3
   11e16:	4908      	ldr	r1, [pc, #32]	; (11e38 <__NVIC_SetPriority+0x50>)
   11e18:	79fb      	ldrb	r3, [r7, #7]
   11e1a:	f003 030f 	and.w	r3, r3, #15
   11e1e:	3b04      	subs	r3, #4
   11e20:	0152      	lsls	r2, r2, #5
   11e22:	b2d2      	uxtb	r2, r2
   11e24:	440b      	add	r3, r1
   11e26:	761a      	strb	r2, [r3, #24]
}
   11e28:	bf00      	nop
   11e2a:	370c      	adds	r7, #12
   11e2c:	46bd      	mov	sp, r7
   11e2e:	bc80      	pop	{r7}
   11e30:	4770      	bx	lr
   11e32:	bf00      	nop
   11e34:	e000e100 	.word	0xe000e100
   11e38:	e000ed00 	.word	0xe000ed00

00011e3c <z_arch_irq_is_enabled>:
 *
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int z_arch_irq_is_enabled(unsigned int irq)
{
   11e3c:	b480      	push	{r7}
   11e3e:	b083      	sub	sp, #12
   11e40:	af00      	add	r7, sp, #0
   11e42:	6078      	str	r0, [r7, #4]
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   11e44:	4a08      	ldr	r2, [pc, #32]	; (11e68 <z_arch_irq_is_enabled+0x2c>)
   11e46:	687b      	ldr	r3, [r7, #4]
   11e48:	095b      	lsrs	r3, r3, #5
   11e4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   11e4e:	687b      	ldr	r3, [r7, #4]
   11e50:	f003 031f 	and.w	r3, r3, #31
   11e54:	2101      	movs	r1, #1
   11e56:	fa01 f303 	lsl.w	r3, r1, r3
   11e5a:	4013      	ands	r3, r2
}
   11e5c:	4618      	mov	r0, r3
   11e5e:	370c      	adds	r7, #12
   11e60:	46bd      	mov	sp, r7
   11e62:	bc80      	pop	{r7}
   11e64:	4770      	bx	lr
   11e66:	bf00      	nop
   11e68:	e000e100 	.word	0xe000e100

00011e6c <z_new_thread>:

void z_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
   11e6c:	b580      	push	{r7, lr}
   11e6e:	b08e      	sub	sp, #56	; 0x38
   11e70:	af00      	add	r7, sp, #0
   11e72:	60f8      	str	r0, [r7, #12]
   11e74:	60b9      	str	r1, [r7, #8]
   11e76:	607a      	str	r2, [r7, #4]
   11e78:	603b      	str	r3, [r7, #0]
	char *pStackMem = Z_THREAD_STACK_BUFFER(stack);
   11e7a:	68b8      	ldr	r0, [r7, #8]
   11e7c:	f00f fb3a 	bl	214f4 <Z_THREAD_STACK_BUFFER>
   11e80:	6378      	str	r0, [r7, #52]	; 0x34
	char *stackEnd;
	/* Offset between the top of stack and the high end of stack area. */
	u32_t top_of_stack_offset = 0U;
   11e82:	2300      	movs	r3, #0
   11e84:	633b      	str	r3, [r7, #48]	; 0x30
	 * k_thread_create(). If K_THREAD_STACK_SIZEOF() is used, the
	 * Guard size has already been take out of stackSize.
	 */
	stackSize -= MPU_GUARD_ALIGN_AND_SIZE;
#endif
	stackEnd = pStackMem + stackSize;
   11e86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   11e88:	687b      	ldr	r3, [r7, #4]
   11e8a:	4413      	add	r3, r2
   11e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   11e8e:	68fb      	ldr	r3, [r7, #12]
   11e90:	627b      	str	r3, [r7, #36]	; 0x24
   11e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11e94:	623b      	str	r3, [r7, #32]
   11e96:	687b      	ldr	r3, [r7, #4]
   11e98:	61fb      	str	r3, [r7, #28]
   11e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   11e9c:	61bb      	str	r3, [r7, #24]
   11e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   11ea0:	617b      	str	r3, [r7, #20]
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
   11ea2:	6a78      	ldr	r0, [r7, #36]	; 0x24
   11ea4:	697b      	ldr	r3, [r7, #20]
   11ea6:	2204      	movs	r2, #4
   11ea8:	69b9      	ldr	r1, [r7, #24]
   11eaa:	f019 fcb2 	bl	2b812 <z_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
   11eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11eb0:	2200      	movs	r2, #0
   11eb2:	64da      	str	r2, [r3, #76]	; 0x4c
	thread->fn_abort = NULL;
   11eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11eb6:	2200      	movs	r2, #0
   11eb8:	651a      	str	r2, [r3, #80]	; 0x50
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
   11eba:	6a3a      	ldr	r2, [r7, #32]
   11ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11ebe:	659a      	str	r2, [r3, #88]	; 0x58
	thread->stack_info.size = (u32_t)stackSize;
   11ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11ec2:	69fa      	ldr	r2, [r7, #28]
   11ec4:	65da      	str	r2, [r3, #92]	; 0x5c

	z_new_thread_init(thread, pStackMem, stackSize, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
   11ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   11ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   11eca:	1ad3      	subs	r3, r2, r3
   11ecc:	3b20      	subs	r3, #32
   11ece:	f023 0307 	bic.w	r3, r3, #7
   11ed2:	62bb      	str	r3, [r7, #40]	; 0x28
		pInitCtx->pc = (u32_t)z_arch_user_mode_enter;
	} else {
		pInitCtx->pc = (u32_t)z_thread_entry;
	}
#else
	pInitCtx->pc = (u32_t)z_thread_entry;
   11ed4:	4a11      	ldr	r2, [pc, #68]	; (11f1c <z_new_thread+0xb0>)
   11ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11ed8:	619a      	str	r2, [r3, #24]
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
   11eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11edc:	699b      	ldr	r3, [r3, #24]
   11ede:	f023 0201 	bic.w	r2, r3, #1
   11ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11ee4:	619a      	str	r2, [r3, #24]

	pInitCtx->a1 = (u32_t)pEntry;
   11ee6:	683a      	ldr	r2, [r7, #0]
   11ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11eea:	601a      	str	r2, [r3, #0]
	pInitCtx->a2 = (u32_t)parameter1;
   11eec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11ef0:	605a      	str	r2, [r3, #4]
	pInitCtx->a3 = (u32_t)parameter2;
   11ef2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   11ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11ef6:	609a      	str	r2, [r3, #8]
	pInitCtx->a4 = (u32_t)parameter3;
   11ef8:	6cba      	ldr	r2, [r7, #72]	; 0x48
   11efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11efc:	60da      	str	r2, [r3, #12]
	pInitCtx->xpsr =
   11efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11f00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   11f04:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */
#ifdef CONFIG_FLOAT
	pInitCtx->fpscr = (u32_t)0; /* clears FPU status/control register*/
#endif

	thread->callee_saved.psp = (u32_t)pInitCtx;
   11f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
   11f08:	68fb      	ldr	r3, [r7, #12]
   11f0a:	649a      	str	r2, [r3, #72]	; 0x48
	thread->arch.basepri = 0;
   11f0c:	68fb      	ldr	r3, [r7, #12]
   11f0e:	2200      	movs	r2, #0
   11f10:	665a      	str	r2, [r3, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   11f12:	bf00      	nop
   11f14:	3738      	adds	r7, #56	; 0x38
   11f16:	46bd      	mov	sp, r7
   11f18:	bd80      	pop	{r7, pc}
   11f1a:	bf00      	nop
   11f1c:	0001bee3 	.word	0x0001bee3

00011f20 <z_CpuIdleInit>:
 *
 * void z_CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, z_CpuIdleInit)
	ldr r1, =_SCB_SCR
   11f20:	4901      	ldr	r1, [pc, #4]	; (11f28 <z_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   11f22:	2210      	movs	r2, #16
	str r2, [r1]
   11f24:	600a      	str	r2, [r1, #0]
	bx lr
   11f26:	4770      	bx	lr
	ldr r1, =_SCB_SCR
   11f28:	e000ed10 	.word	0xe000ed10

00011f2c <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   11f2c:	4040      	eors	r0, r0
	msr BASEPRI, r0
   11f2e:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
   11f32:	bf30      	wfi

	bx lr
   11f34:	4770      	bx	lr
   11f36:	bf00      	nop

00011f38 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
   11f38:	4040      	eors	r0, r0
	msr BASEPRI, r0
   11f3a:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE) && \
	!defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
   11f3e:	f8df c01c 	ldr.w	ip, [pc, #28]	; 11f5c <__bus_fault+0x24>
	ldr ip, [ip]
   11f42:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
   11f46:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
   11f4a:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
   11f4c:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
   11f50:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
   11f54:	b501      	push	{r0, lr}
	bl _Fault
   11f56:	f7ff fedb 	bl	11d10 <_Fault>

	pop {r0, pc}
   11f5a:	bd01      	pop	{r0, pc}
	ldr ip, =_SCS_ICSR
   11f5c:	e000ed04 	.word	0xe000ed04

00011f60 <z_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void z_NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
   11f60:	b580      	push	{r7, lr}
   11f62:	b082      	sub	sp, #8
   11f64:	af00      	add	r7, sp, #0
   11f66:	6078      	str	r0, [r7, #4]
   11f68:	6039      	str	r1, [r7, #0]
	LOG_PANIC();

	switch (reason) {
   11f6a:	687b      	ldr	r3, [r7, #4]
   11f6c:	2b05      	cmp	r3, #5
   11f6e:	d81f      	bhi.n	11fb0 <z_NanoFatalErrorHandler+0x50>
   11f70:	a201      	add	r2, pc, #4	; (adr r2, 11f78 <z_NanoFatalErrorHandler+0x18>)
   11f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11f76:	bf00      	nop
   11f78:	00011f91 	.word	0x00011f91
   11f7c:	00011fb1 	.word	0x00011fb1
   11f80:	00011fb1 	.word	0x00011fb1
   11f84:	00011f99 	.word	0x00011f99
   11f88:	00011fa1 	.word	0x00011fa1
   11f8c:	00011fa9 	.word	0x00011fa9
	case _NANO_ERR_HW_EXCEPTION:
		printk("***** Hardware exception *****\n");
   11f90:	4812      	ldr	r0, [pc, #72]	; (11fdc <z_NanoFatalErrorHandler+0x7c>)
   11f92:	f00a f84f 	bl	1c034 <printk>
		break;
   11f96:	e010      	b.n	11fba <z_NanoFatalErrorHandler+0x5a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
   11f98:	4811      	ldr	r0, [pc, #68]	; (11fe0 <z_NanoFatalErrorHandler+0x80>)
   11f9a:	f00a f84b 	bl	1c034 <printk>
		break;
   11f9e:	e00c      	b.n	11fba <z_NanoFatalErrorHandler+0x5a>

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
   11fa0:	4810      	ldr	r0, [pc, #64]	; (11fe4 <z_NanoFatalErrorHandler+0x84>)
   11fa2:	f00a f847 	bl	1c034 <printk>
		break;
   11fa6:	e008      	b.n	11fba <z_NanoFatalErrorHandler+0x5a>

	case _NANO_ERR_KERNEL_PANIC:
		printk("***** Kernel Panic! *****\n");
   11fa8:	480f      	ldr	r0, [pc, #60]	; (11fe8 <z_NanoFatalErrorHandler+0x88>)
   11faa:	f00a f843 	bl	1c034 <printk>
		break;
   11fae:	e004      	b.n	11fba <z_NanoFatalErrorHandler+0x5a>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
   11fb0:	6879      	ldr	r1, [r7, #4]
   11fb2:	480e      	ldr	r0, [pc, #56]	; (11fec <z_NanoFatalErrorHandler+0x8c>)
   11fb4:	f00a f83e 	bl	1c034 <printk>
		break;
   11fb8:	bf00      	nop
	}
	printk("Current thread ID = %p\n"
   11fba:	f00f faa5 	bl	21508 <k_current_get>
   11fbe:	4601      	mov	r1, r0
   11fc0:	683b      	ldr	r3, [r7, #0]
   11fc2:	699b      	ldr	r3, [r3, #24]
   11fc4:	461a      	mov	r2, r3
   11fc6:	480a      	ldr	r0, [pc, #40]	; (11ff0 <z_NanoFatalErrorHandler+0x90>)
   11fc8:	f00a f834 	bl	1c034 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	z_SysFatalErrorHandler(reason, pEsf);
   11fcc:	6839      	ldr	r1, [r7, #0]
   11fce:	6878      	ldr	r0, [r7, #4]
   11fd0:	f000 f810 	bl	11ff4 <z_SysFatalErrorHandler>
}
   11fd4:	bf00      	nop
   11fd6:	3708      	adds	r7, #8
   11fd8:	46bd      	mov	sp, r7
   11fda:	bd80      	pop	{r7, pc}
   11fdc:	0002e5cc 	.word	0x0002e5cc
   11fe0:	0002e5ec 	.word	0x0002e5ec
   11fe4:	0002e614 	.word	0x0002e614
   11fe8:	0002e630 	.word	0x0002e630
   11fec:	0002e64c 	.word	0x0002e64c
   11ff0:	0002e670 	.word	0x0002e670

00011ff4 <z_SysFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void __weak z_SysFatalErrorHandler(unsigned int reason,
					 const NANO_ESF *pEsf)
{
   11ff4:	b580      	push	{r7, lr}
   11ff6:	b082      	sub	sp, #8
   11ff8:	af00      	add	r7, sp, #0
   11ffa:	6078      	str	r0, [r7, #4]
   11ffc:	6039      	str	r1, [r7, #0]
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
   11ffe:	687b      	ldr	r3, [r7, #4]
   12000:	2b05      	cmp	r3, #5
   12002:	d022      	beq.n	1204a <z_SysFatalErrorHandler+0x56>
		goto hang_system;
	}
	if (k_is_in_isr() || z_is_thread_essential()) {
   12004:	f005 fe70 	bl	17ce8 <k_is_in_isr>
   12008:	4603      	mov	r3, r0
   1200a:	2b00      	cmp	r3, #0
   1200c:	d104      	bne.n	12018 <z_SysFatalErrorHandler+0x24>
   1200e:	f005 fe9f 	bl	17d50 <z_is_thread_essential>
   12012:	4603      	mov	r3, r0
   12014:	2b00      	cmp	r3, #0
   12016:	d00c      	beq.n	12032 <z_SysFatalErrorHandler+0x3e>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
   12018:	f005 fe66 	bl	17ce8 <k_is_in_isr>
   1201c:	4603      	mov	r3, r0
		printk("Fatal fault in %s! Spinning...\n",
   1201e:	2b00      	cmp	r3, #0
   12020:	d001      	beq.n	12026 <z_SysFatalErrorHandler+0x32>
   12022:	4b0d      	ldr	r3, [pc, #52]	; (12058 <z_SysFatalErrorHandler+0x64>)
   12024:	e000      	b.n	12028 <z_SysFatalErrorHandler+0x34>
   12026:	4b0d      	ldr	r3, [pc, #52]	; (1205c <z_SysFatalErrorHandler+0x68>)
   12028:	4619      	mov	r1, r3
   1202a:	480d      	ldr	r0, [pc, #52]	; (12060 <z_SysFatalErrorHandler+0x6c>)
   1202c:	f00a f802 	bl	1c034 <printk>
		goto hang_system;
   12030:	e00c      	b.n	1204c <z_SysFatalErrorHandler+0x58>
	}
	printk("Fatal fault in thread %p! Aborting.\n", _current);
   12032:	4b0c      	ldr	r3, [pc, #48]	; (12064 <z_SysFatalErrorHandler+0x70>)
   12034:	689b      	ldr	r3, [r3, #8]
   12036:	4619      	mov	r1, r3
   12038:	480b      	ldr	r0, [pc, #44]	; (12068 <z_SysFatalErrorHandler+0x74>)
   1203a:	f009 fffb 	bl	1c034 <printk>
	k_thread_abort(_current);
   1203e:	4b09      	ldr	r3, [pc, #36]	; (12064 <z_SysFatalErrorHandler+0x70>)
   12040:	689b      	ldr	r3, [r3, #8]
   12042:	4618      	mov	r0, r3
   12044:	f00f fa75 	bl	21532 <k_thread_abort>
	return;
   12048:	e003      	b.n	12052 <z_SysFatalErrorHandler+0x5e>
		goto hang_system;
   1204a:	bf00      	nop
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
   1204c:	f7ff ff6e 	bl	11f2c <k_cpu_idle>
   12050:	e7fc      	b.n	1204c <z_SysFatalErrorHandler+0x58>
	}
	CODE_UNREACHABLE;
}
   12052:	3708      	adds	r7, #8
   12054:	46bd      	mov	sp, r7
   12056:	bd80      	pop	{r7, pc}
   12058:	0002e6ac 	.word	0x0002e6ac
   1205c:	0002e6b0 	.word	0x0002e6b0
   12060:	0002e6c4 	.word	0x0002e6c4
   12064:	20006178 	.word	0x20006178
   12068:	0002e6e4 	.word	0x0002e6e4

0001206c <z_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   1206c:	b580      	push	{r7, lr}
   1206e:	b086      	sub	sp, #24
   12070:	af00      	add	r7, sp, #0
   12072:	6078      	str	r0, [r7, #4]
	__asm__ volatile(
   12074:	f04f 0320 	mov.w	r3, #32
   12078:	f3ef 8211 	mrs	r2, BASEPRI
   1207c:	f383 8811 	msr	BASEPRI, r3
   12080:	f3bf 8f6f 	isb	sy
   12084:	613a      	str	r2, [r7, #16]
   12086:	60fb      	str	r3, [r7, #12]
	return key;
   12088:	693b      	ldr	r3, [r7, #16]
	unsigned int key;

	key = irq_lock();
   1208a:	617b      	str	r3, [r7, #20]

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
   1208c:	6878      	ldr	r0, [r7, #4]
   1208e:	f019 fb8e 	bl	2b7ae <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   12092:	4b0d      	ldr	r3, [pc, #52]	; (120c8 <z_impl_k_thread_abort+0x5c>)
   12094:	689b      	ldr	r3, [r3, #8]
   12096:	687a      	ldr	r2, [r7, #4]
   12098:	429a      	cmp	r2, r3
   1209a:	d10e      	bne.n	120ba <z_impl_k_thread_abort+0x4e>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   1209c:	4b0b      	ldr	r3, [pc, #44]	; (120cc <z_impl_k_thread_abort+0x60>)
   1209e:	685b      	ldr	r3, [r3, #4]
   120a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   120a4:	2b00      	cmp	r3, #0
   120a6:	d102      	bne.n	120ae <z_impl_k_thread_abort+0x42>
			(void)z_swap_irqlock(key);
   120a8:	6978      	ldr	r0, [r7, #20]
   120aa:	f00f fa4d 	bl	21548 <z_swap_irqlock>
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   120ae:	4b07      	ldr	r3, [pc, #28]	; (120cc <z_impl_k_thread_abort+0x60>)
   120b0:	685b      	ldr	r3, [r3, #4]
   120b2:	4a06      	ldr	r2, [pc, #24]	; (120cc <z_impl_k_thread_abort+0x60>)
   120b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   120b8:	6053      	str	r3, [r2, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   120ba:	6978      	ldr	r0, [r7, #20]
   120bc:	f019 f83c 	bl	2b138 <z_reschedule_irqlock>
}
   120c0:	bf00      	nop
   120c2:	3718      	adds	r7, #24
   120c4:	46bd      	mov	sp, r7
   120c6:	bd80      	pop	{r7, pc}
   120c8:	20006178 	.word	0x20006178
   120cc:	e000ed00 	.word	0xe000ed00

000120d0 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {r0,lr}		/* r0, lr are now the first items on the stack */
   120d0:	b501      	push	{r0, lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, z_sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
   120d2:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   120d4:	4a0b      	ldr	r2, [pc, #44]	; (12104 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   120d6:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   120d8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   120da:	bf1e      	ittt	ne
	movne	r1, #0
   120dc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   120de:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   120e0:	f017 fc5f 	blne	299a2 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   120e4:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
   120e6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   120ea:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   120ee:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
   120f2:	4905      	ldr	r1, [pc, #20]	; (12108 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   120f4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   120f6:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
   120f8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   120fa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * _IntExit() */
	ldr r0, =_IntExit
   120fe:	4803      	ldr	r0, [pc, #12]	; (1210c <_isr_wrapper+0x3c>)
	bx r0
   12100:	4700      	bx	r0
   12102:	0000      	.short	0x0000
	ldr r2, =_kernel
   12104:	20006178 	.word	0x20006178
	ldr r1, =_sw_isr_table
   12108:	0002c500 	.word	0x0002c500
	ldr r0, =_IntExit
   1210c:	000117a9 	.word	0x000117a9

00012110 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   12110:	2020      	movs	r0, #32
    msr BASEPRI, r0
   12112:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
   12116:	4808      	ldr	r0, [pc, #32]	; (12138 <__reset+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   12118:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    adds r0, r0, r1
   1211c:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1211e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   12122:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   12126:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   12128:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1212a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1212e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to _PrepC
     * (even though we do not intend to return).
     */
    bl _PrepC
   12132:	f00f fa1c 	bl	2156e <_PrepC>
   12136:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
   12138:	200083e8 	.word	0x200083e8

0001213c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   1213c:	bf30      	wfi
    b z_SysNmiOnReset
   1213e:	f7ff bffd 	b.w	1213c <z_SysNmiOnReset>
   12142:	bf00      	nop

00012144 <relocate_vector_table>:
#define VECTOR_ADDRESS ((uintptr_t)_vector_start)
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
   12144:	b480      	push	{r7}
   12146:	af00      	add	r7, sp, #0
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   12148:	4b06      	ldr	r3, [pc, #24]	; (12164 <relocate_vector_table+0x20>)
   1214a:	4a07      	ldr	r2, [pc, #28]	; (12168 <relocate_vector_table+0x24>)
   1214c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   12150:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   12152:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12156:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
   1215a:	bf00      	nop
   1215c:	46bd      	mov	sp, r7
   1215e:	bc80      	pop	{r7}
   12160:	4770      	bx	lr
   12162:	bf00      	nop
   12164:	00000000 	.word	0x00000000
   12168:	e000ed00 	.word	0xe000ed00

0001216c <z_arch_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_static_mpu_regions(void)
{
   1216c:	b580      	push	{r7, lr}
   1216e:	b084      	sub	sp, #16
   12170:	af00      	add	r7, sp, #0
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
		{
		.start = (u32_t)&_ramfunc_ram_start,
   12172:	4b09      	ldr	r3, [pc, #36]	; (12198 <z_arch_configure_static_mpu_regions+0x2c>)
		const struct k_mem_partition ramfunc_region =
   12174:	607b      	str	r3, [r7, #4]
		.size = (u32_t)&_ramfunc_ram_size,
   12176:	4b09      	ldr	r3, [pc, #36]	; (1219c <z_arch_configure_static_mpu_regions+0x30>)
		const struct k_mem_partition ramfunc_region =
   12178:	60bb      	str	r3, [r7, #8]
   1217a:	4b09      	ldr	r3, [pc, #36]	; (121a0 <z_arch_configure_static_mpu_regions+0x34>)
   1217c:	60fb      	str	r3, [r7, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
   1217e:	1d3b      	adds	r3, r7, #4
   12180:	603b      	str	r3, [r7, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   12182:	4a08      	ldr	r2, [pc, #32]	; (121a4 <z_arch_configure_static_mpu_regions+0x38>)
   12184:	4b08      	ldr	r3, [pc, #32]	; (121a8 <z_arch_configure_static_mpu_regions+0x3c>)
   12186:	4638      	mov	r0, r7
   12188:	2101      	movs	r1, #1
   1218a:	f00f fb19 	bl	217c0 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1218e:	bf00      	nop
   12190:	3710      	adds	r7, #16
   12192:	46bd      	mov	sp, r7
   12194:	bd80      	pop	{r7, pc}
   12196:	bf00      	nop
   12198:	20000000 	.word	0x20000000
   1219c:	00002000 	.word	0x00002000
   121a0:	030b0000 	.word	0x030b0000
   121a4:	20000000 	.word	0x20000000
   121a8:	20040000 	.word	0x20040000

000121ac <ARM_MPU_ClrRegion>:

/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
   121ac:	b480      	push	{r7}
   121ae:	b083      	sub	sp, #12
   121b0:	af00      	add	r7, sp, #0
   121b2:	6078      	str	r0, [r7, #4]
  MPU->RNR = rnr;
   121b4:	4a05      	ldr	r2, [pc, #20]	; (121cc <ARM_MPU_ClrRegion+0x20>)
   121b6:	687b      	ldr	r3, [r7, #4]
   121b8:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   121ba:	4b04      	ldr	r3, [pc, #16]	; (121cc <ARM_MPU_ClrRegion+0x20>)
   121bc:	2200      	movs	r2, #0
   121be:	611a      	str	r2, [r3, #16]
}
   121c0:	bf00      	nop
   121c2:	370c      	adds	r7, #12
   121c4:	46bd      	mov	sp, r7
   121c6:	bc80      	pop	{r7}
   121c8:	4770      	bx	lr
   121ca:	bf00      	nop
   121cc:	e000ed90 	.word	0xe000ed90

000121d0 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
   121d0:	b580      	push	{r7, lr}
   121d2:	b088      	sub	sp, #32
   121d4:	af00      	add	r7, sp, #0
   121d6:	6078      	str	r0, [r7, #4]
   121d8:	6039      	str	r1, [r7, #0]
	/* Select the region you want to access */
	MPU->RNR = index;
   121da:	4a0d      	ldr	r2, [pc, #52]	; (12210 <region_init+0x40>)
   121dc:	687b      	ldr	r3, [r7, #4]
   121de:	6093      	str	r3, [r2, #8]
	/* Configure the region */
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   121e0:	683b      	ldr	r3, [r7, #0]
   121e2:	681b      	ldr	r3, [r3, #0]
   121e4:	f023 021f 	bic.w	r2, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   121e8:	687b      	ldr	r3, [r7, #4]
   121ea:	4313      	orrs	r3, r2
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   121ec:	4a08      	ldr	r2, [pc, #32]	; (12210 <region_init+0x40>)
				| MPU_RBAR_VALID_Msk | index;
   121ee:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   121f2:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   121f4:	683b      	ldr	r3, [r7, #0]
   121f6:	689b      	ldr	r3, [r3, #8]
   121f8:	4a05      	ldr	r2, [pc, #20]	; (12210 <region_init+0x40>)
   121fa:	f043 0301 	orr.w	r3, r3, #1
   121fe:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
   12200:	f00f f9dc 	bl	215bc <_is_user_context>
   12204:	4603      	mov	r3, r0
   12206:	77fb      	strb	r3, [r7, #31]
		index, region_conf->base, region_conf->attr.rasr);
}
   12208:	bf00      	nop
   1220a:	3720      	adds	r7, #32
   1220c:	46bd      	mov	sp, r7
   1220e:	bd80      	pop	{r7, pc}
   12210:	e000ed90 	.word	0xe000ed90

00012214 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
   12214:	b580      	push	{r7, lr}
   12216:	b086      	sub	sp, #24
   12218:	af00      	add	r7, sp, #0
   1221a:	60f8      	str	r0, [r7, #12]
   1221c:	607a      	str	r2, [r7, #4]
   1221e:	603b      	str	r3, [r7, #0]
   12220:	460b      	mov	r3, r1
   12222:	72fb      	strb	r3, [r7, #11]
	int mpu_reg_index = static_regions_num;
   12224:	4b09      	ldr	r3, [pc, #36]	; (1224c <mpu_configure_static_mpu_regions+0x38>)
   12226:	781b      	ldrb	r3, [r3, #0]
   12228:	617b      	str	r3, [r7, #20]
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   1222a:	697b      	ldr	r3, [r7, #20]
   1222c:	b2da      	uxtb	r2, r3
   1222e:	7af9      	ldrb	r1, [r7, #11]
   12230:	2301      	movs	r3, #1
   12232:	68f8      	ldr	r0, [r7, #12]
   12234:	f00f fa2a 	bl	2168c <mpu_configure_regions>
   12238:	6178      	str	r0, [r7, #20]
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1223a:	697b      	ldr	r3, [r7, #20]
   1223c:	b2da      	uxtb	r2, r3
   1223e:	4b03      	ldr	r3, [pc, #12]	; (1224c <mpu_configure_static_mpu_regions+0x38>)
   12240:	701a      	strb	r2, [r3, #0]

	return mpu_reg_index;
   12242:	697b      	ldr	r3, [r7, #20]
}
   12244:	4618      	mov	r0, r3
   12246:	3718      	adds	r7, #24
   12248:	46bd      	mov	sp, r7
   1224a:	bd80      	pop	{r7, pc}
   1224c:	20006248 	.word	0x20006248

00012250 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
   12250:	b580      	push	{r7, lr}
   12252:	b084      	sub	sp, #16
   12254:	af00      	add	r7, sp, #0
   12256:	6078      	str	r0, [r7, #4]
   12258:	460b      	mov	r3, r1
   1225a:	70fb      	strb	r3, [r7, #3]
	int mpu_reg_index = static_regions_num;
   1225c:	4b12      	ldr	r3, [pc, #72]	; (122a8 <mpu_configure_dynamic_mpu_regions+0x58>)
   1225e:	781b      	ldrb	r3, [r3, #0]
   12260:	60bb      	str	r3, [r7, #8]

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   12262:	68bb      	ldr	r3, [r7, #8]
   12264:	b2da      	uxtb	r2, r3
   12266:	78f9      	ldrb	r1, [r7, #3]
   12268:	2300      	movs	r3, #0
   1226a:	6878      	ldr	r0, [r7, #4]
   1226c:	f00f fa0e 	bl	2168c <mpu_configure_regions>
   12270:	60b8      	str	r0, [r7, #8]
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   12272:	68bb      	ldr	r3, [r7, #8]
   12274:	f113 0f16 	cmn.w	r3, #22
   12278:	d010      	beq.n	1229c <mpu_configure_dynamic_mpu_regions+0x4c>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   1227a:	68bb      	ldr	r3, [r7, #8]
   1227c:	60fb      	str	r3, [r7, #12]
   1227e:	e006      	b.n	1228e <mpu_configure_dynamic_mpu_regions+0x3e>
			ARM_MPU_ClrRegion(i);
   12280:	68fb      	ldr	r3, [r7, #12]
   12282:	4618      	mov	r0, r3
   12284:	f7ff ff92 	bl	121ac <ARM_MPU_ClrRegion>
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   12288:	68fb      	ldr	r3, [r7, #12]
   1228a:	3301      	adds	r3, #1
   1228c:	60fb      	str	r3, [r7, #12]
   1228e:	f00f f99c 	bl	215ca <get_num_regions>
   12292:	4603      	mov	r3, r0
   12294:	461a      	mov	r2, r3
   12296:	68fb      	ldr	r3, [r7, #12]
   12298:	4293      	cmp	r3, r2
   1229a:	dbf1      	blt.n	12280 <mpu_configure_dynamic_mpu_regions+0x30>
		}
	}

	return mpu_reg_index;
   1229c:	68bb      	ldr	r3, [r7, #8]
}
   1229e:	4618      	mov	r0, r3
   122a0:	3710      	adds	r7, #16
   122a2:	46bd      	mov	sp, r7
   122a4:	bd80      	pop	{r7, pc}
   122a6:	bf00      	nop
   122a8:	20006248 	.word	0x20006248

000122ac <arm_core_mpu_enable>:

/**
 * @brief enable the MPU
 */
void arm_core_mpu_enable(void)
{
   122ac:	b480      	push	{r7}
   122ae:	af00      	add	r7, sp, #0
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   122b0:	4b05      	ldr	r3, [pc, #20]	; (122c8 <arm_core_mpu_enable+0x1c>)
   122b2:	2205      	movs	r2, #5
   122b4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   122b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   122ba:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   122be:	bf00      	nop
   122c0:	46bd      	mov	sp, r7
   122c2:	bc80      	pop	{r7}
   122c4:	4770      	bx	lr
   122c6:	bf00      	nop
   122c8:	e000ed90 	.word	0xe000ed90

000122cc <arm_core_mpu_disable>:

/**
 * @brief disable the MPU
 */
void arm_core_mpu_disable(void)
{
   122cc:	b480      	push	{r7}
   122ce:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
   122d0:	f3bf 8f5f 	dmb	sy
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   122d4:	4b03      	ldr	r3, [pc, #12]	; (122e4 <arm_core_mpu_disable+0x18>)
   122d6:	2200      	movs	r2, #0
   122d8:	605a      	str	r2, [r3, #4]
}
   122da:	bf00      	nop
   122dc:	46bd      	mov	sp, r7
   122de:	bc80      	pop	{r7}
   122e0:	4770      	bx	lr
   122e2:	bf00      	nop
   122e4:	e000ed90 	.word	0xe000ed90

000122e8 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
   122e8:	b590      	push	{r4, r7, lr}
   122ea:	b087      	sub	sp, #28
   122ec:	af00      	add	r7, sp, #0
   122ee:	6078      	str	r0, [r7, #4]
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   122f0:	4b1a      	ldr	r3, [pc, #104]	; (1235c <arm_mpu_init+0x74>)
   122f2:	681c      	ldr	r4, [r3, #0]
   122f4:	f00f f969 	bl	215ca <get_num_regions>
   122f8:	4603      	mov	r3, r0
   122fa:	429c      	cmp	r4, r3
   122fc:	d902      	bls.n	12304 <arm_mpu_init+0x1c>
		__ASSERT(0,
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   122fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12302:	e026      	b.n	12352 <arm_mpu_init+0x6a>
	}

	LOG_DBG("total region count: %d", get_num_regions());
   12304:	f00f f95a 	bl	215bc <_is_user_context>
   12308:	4603      	mov	r3, r0
   1230a:	75fb      	strb	r3, [r7, #23]

	arm_core_mpu_disable();
   1230c:	f7ff ffde 	bl	122cc <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();
   12310:	f00f f962 	bl	215d8 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   12314:	2300      	movs	r3, #0
   12316:	613b      	str	r3, [r7, #16]
   12318:	e00e      	b.n	12338 <arm_mpu_init+0x50>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1231a:	4b10      	ldr	r3, [pc, #64]	; (1235c <arm_mpu_init+0x74>)
   1231c:	6859      	ldr	r1, [r3, #4]
   1231e:	693a      	ldr	r2, [r7, #16]
   12320:	4613      	mov	r3, r2
   12322:	005b      	lsls	r3, r3, #1
   12324:	4413      	add	r3, r2
   12326:	009b      	lsls	r3, r3, #2
   12328:	440b      	add	r3, r1
   1232a:	4619      	mov	r1, r3
   1232c:	6938      	ldr	r0, [r7, #16]
   1232e:	f7ff ff4f 	bl	121d0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   12332:	693b      	ldr	r3, [r7, #16]
   12334:	3301      	adds	r3, #1
   12336:	613b      	str	r3, [r7, #16]
   12338:	4b08      	ldr	r3, [pc, #32]	; (1235c <arm_mpu_init+0x74>)
   1233a:	681b      	ldr	r3, [r3, #0]
   1233c:	693a      	ldr	r2, [r7, #16]
   1233e:	429a      	cmp	r2, r3
   12340:	d3eb      	bcc.n	1231a <arm_mpu_init+0x32>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   12342:	4b06      	ldr	r3, [pc, #24]	; (1235c <arm_mpu_init+0x74>)
   12344:	681b      	ldr	r3, [r3, #0]
   12346:	b2da      	uxtb	r2, r3
   12348:	4b05      	ldr	r3, [pc, #20]	; (12360 <arm_mpu_init+0x78>)
   1234a:	701a      	strb	r2, [r3, #0]


	arm_core_mpu_enable();
   1234c:	f7ff ffae 	bl	122ac <arm_core_mpu_enable>
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
   12350:	2300      	movs	r3, #0
}
   12352:	4618      	mov	r0, r3
   12354:	371c      	adds	r7, #28
   12356:	46bd      	mov	sp, r7
   12358:	bd90      	pop	{r4, r7, pc}
   1235a:	bf00      	nop
   1235c:	0002eabc 	.word	0x0002eabc
   12360:	20006248 	.word	0x20006248

00012364 <__stdout_hook_install>:
}

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
   12364:	b480      	push	{r7}
   12366:	b083      	sub	sp, #12
   12368:	af00      	add	r7, sp, #0
   1236a:	6078      	str	r0, [r7, #4]
	_stdout_hook = hook;
   1236c:	4a03      	ldr	r2, [pc, #12]	; (1237c <__stdout_hook_install+0x18>)
   1236e:	687b      	ldr	r3, [r7, #4]
   12370:	6013      	str	r3, [r2, #0]
}
   12372:	bf00      	nop
   12374:	370c      	adds	r7, #12
   12376:	46bd      	mov	sp, r7
   12378:	bc80      	pop	{r7}
   1237a:	4770      	bx	lr
   1237c:	2000fc14 	.word	0x2000fc14

00012380 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   12380:	b590      	push	{r4, r7, lr}
   12382:	b085      	sub	sp, #20
   12384:	af00      	add	r7, sp, #0
   12386:	6078      	str	r0, [r7, #4]
   12388:	6039      	str	r1, [r7, #0]
	int i = 0;
   1238a:	2300      	movs	r3, #0
   1238c:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < nbytes; i++) {
   1238e:	2300      	movs	r3, #0
   12390:	60fb      	str	r3, [r7, #12]
   12392:	e01a      	b.n	123ca <z_impl_zephyr_read_stdin+0x4a>
		*(buf + i) = _stdin_hook();
   12394:	4b11      	ldr	r3, [pc, #68]	; (123dc <z_impl_zephyr_read_stdin+0x5c>)
   12396:	681b      	ldr	r3, [r3, #0]
   12398:	68fa      	ldr	r2, [r7, #12]
   1239a:	6879      	ldr	r1, [r7, #4]
   1239c:	188c      	adds	r4, r1, r2
   1239e:	4798      	blx	r3
   123a0:	4603      	mov	r3, r0
   123a2:	7023      	strb	r3, [r4, #0]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   123a4:	68fb      	ldr	r3, [r7, #12]
   123a6:	687a      	ldr	r2, [r7, #4]
   123a8:	4413      	add	r3, r2
   123aa:	781b      	ldrb	r3, [r3, #0]
   123ac:	2b0a      	cmp	r3, #10
   123ae:	d005      	beq.n	123bc <z_impl_zephyr_read_stdin+0x3c>
   123b0:	68fb      	ldr	r3, [r7, #12]
   123b2:	687a      	ldr	r2, [r7, #4]
   123b4:	4413      	add	r3, r2
   123b6:	781b      	ldrb	r3, [r3, #0]
   123b8:	2b0d      	cmp	r3, #13
   123ba:	d103      	bne.n	123c4 <z_impl_zephyr_read_stdin+0x44>
			i++;
   123bc:	68fb      	ldr	r3, [r7, #12]
   123be:	3301      	adds	r3, #1
   123c0:	60fb      	str	r3, [r7, #12]
			break;
   123c2:	e006      	b.n	123d2 <z_impl_zephyr_read_stdin+0x52>
	for (i = 0; i < nbytes; i++) {
   123c4:	68fb      	ldr	r3, [r7, #12]
   123c6:	3301      	adds	r3, #1
   123c8:	60fb      	str	r3, [r7, #12]
   123ca:	68fa      	ldr	r2, [r7, #12]
   123cc:	683b      	ldr	r3, [r7, #0]
   123ce:	429a      	cmp	r2, r3
   123d0:	dbe0      	blt.n	12394 <z_impl_zephyr_read_stdin+0x14>
		}
	}
	return i;
   123d2:	68fb      	ldr	r3, [r7, #12]
}
   123d4:	4618      	mov	r0, r3
   123d6:	3714      	adds	r7, #20
   123d8:	46bd      	mov	sp, r7
   123da:	bd90      	pop	{r4, r7, pc}
   123dc:	2000fc18 	.word	0x2000fc18

000123e0 <z_impl_zephyr_write_stdout>:
	return z_impl_zephyr_read_stdin((char *)buf, nbytes);
}
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   123e0:	b580      	push	{r7, lr}
   123e2:	b084      	sub	sp, #16
   123e4:	af00      	add	r7, sp, #0
   123e6:	6078      	str	r0, [r7, #4]
   123e8:	6039      	str	r1, [r7, #0]
	const char *buf = buffer;
   123ea:	687b      	ldr	r3, [r7, #4]
   123ec:	60bb      	str	r3, [r7, #8]
	int i;

	for (i = 0; i < nbytes; i++) {
   123ee:	2300      	movs	r3, #0
   123f0:	60fb      	str	r3, [r7, #12]
   123f2:	e014      	b.n	1241e <z_impl_zephyr_write_stdout+0x3e>
		if (*(buf + i) == '\n') {
   123f4:	68fb      	ldr	r3, [r7, #12]
   123f6:	68ba      	ldr	r2, [r7, #8]
   123f8:	4413      	add	r3, r2
   123fa:	781b      	ldrb	r3, [r3, #0]
   123fc:	2b0a      	cmp	r3, #10
   123fe:	d103      	bne.n	12408 <z_impl_zephyr_write_stdout+0x28>
			_stdout_hook('\r');
   12400:	4b0b      	ldr	r3, [pc, #44]	; (12430 <z_impl_zephyr_write_stdout+0x50>)
   12402:	681b      	ldr	r3, [r3, #0]
   12404:	200d      	movs	r0, #13
   12406:	4798      	blx	r3
		}
		_stdout_hook(*(buf + i));
   12408:	4b09      	ldr	r3, [pc, #36]	; (12430 <z_impl_zephyr_write_stdout+0x50>)
   1240a:	681b      	ldr	r3, [r3, #0]
   1240c:	68fa      	ldr	r2, [r7, #12]
   1240e:	68b9      	ldr	r1, [r7, #8]
   12410:	440a      	add	r2, r1
   12412:	7812      	ldrb	r2, [r2, #0]
   12414:	4610      	mov	r0, r2
   12416:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   12418:	68fb      	ldr	r3, [r7, #12]
   1241a:	3301      	adds	r3, #1
   1241c:	60fb      	str	r3, [r7, #12]
   1241e:	68fa      	ldr	r2, [r7, #12]
   12420:	683b      	ldr	r3, [r7, #0]
   12422:	429a      	cmp	r2, r3
   12424:	dbe6      	blt.n	123f4 <z_impl_zephyr_write_stdout+0x14>
	}
	return nbytes;
   12426:	683b      	ldr	r3, [r7, #0]
}
   12428:	4618      	mov	r0, r3
   1242a:	3710      	adds	r7, #16
   1242c:	46bd      	mov	sp, r7
   1242e:	bd80      	pop	{r7, pc}
   12430:	2000fc14 	.word	0x2000fc14

00012434 <_exit>:
	return 0;
}
FUNC_ALIAS(_fstat, fstat, int);

void _exit(int status)
{
   12434:	b580      	push	{r7, lr}
   12436:	b082      	sub	sp, #8
   12438:	af00      	add	r7, sp, #0
   1243a:	6078      	str	r0, [r7, #4]
	_write(1, "exit\n", 5);
   1243c:	2205      	movs	r2, #5
   1243e:	4902      	ldr	r1, [pc, #8]	; (12448 <_exit+0x14>)
   12440:	2001      	movs	r0, #1
   12442:	f00f fa06 	bl	21852 <_write>
	while (1) {
   12446:	e7fe      	b.n	12446 <_exit+0x12>
   12448:	0002e710 	.word	0x0002e710

0001244c <_sbrk>:
		;
	}
}

void *_sbrk(int count)
{
   1244c:	b480      	push	{r7}
   1244e:	b085      	sub	sp, #20
   12450:	af00      	add	r7, sp, #0
   12452:	6078      	str	r0, [r7, #4]
#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	void *ptr = heap_base + heap_sz;
#else
	void *ptr = _end + heap_sz;
   12454:	4b0f      	ldr	r3, [pc, #60]	; (12494 <_sbrk+0x48>)
   12456:	681b      	ldr	r3, [r3, #0]
   12458:	4a0f      	ldr	r2, [pc, #60]	; (12498 <_sbrk+0x4c>)
   1245a:	4413      	add	r3, r2
   1245c:	60fb      	str	r3, [r7, #12]
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   1245e:	4b0d      	ldr	r3, [pc, #52]	; (12494 <_sbrk+0x48>)
   12460:	681a      	ldr	r2, [r3, #0]
   12462:	687b      	ldr	r3, [r7, #4]
   12464:	441a      	add	r2, r3
   12466:	4b0c      	ldr	r3, [pc, #48]	; (12498 <_sbrk+0x4c>)
   12468:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   1246c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   12470:	429a      	cmp	r2, r3
   12472:	d207      	bcs.n	12484 <_sbrk+0x38>
		heap_sz += count;
   12474:	4b07      	ldr	r3, [pc, #28]	; (12494 <_sbrk+0x48>)
   12476:	681a      	ldr	r2, [r3, #0]
   12478:	687b      	ldr	r3, [r7, #4]
   1247a:	4413      	add	r3, r2
   1247c:	4a05      	ldr	r2, [pc, #20]	; (12494 <_sbrk+0x48>)
   1247e:	6013      	str	r3, [r2, #0]
		return ptr;
   12480:	68fb      	ldr	r3, [r7, #12]
   12482:	e001      	b.n	12488 <_sbrk+0x3c>
	} else {
		return (void *)-1;
   12484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
   12488:	4618      	mov	r0, r3
   1248a:	3714      	adds	r7, #20
   1248c:	46bd      	mov	sp, r7
   1248e:	bc80      	pop	{r7}
   12490:	4770      	bx	lr
   12492:	bf00      	nop
   12494:	20003d4c 	.word	0x20003d4c
   12498:	20010008 	.word	0x20010008

0001249c <net_buf_pool_get>:

/* Linker-defined symbol bound to the static pool structs */
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
   1249c:	b480      	push	{r7}
   1249e:	b083      	sub	sp, #12
   124a0:	af00      	add	r7, sp, #0
   124a2:	6078      	str	r0, [r7, #4]
	return &_net_buf_pool_list[id];
   124a4:	687b      	ldr	r3, [r7, #4]
   124a6:	015b      	lsls	r3, r3, #5
   124a8:	4a03      	ldr	r2, [pc, #12]	; (124b8 <net_buf_pool_get+0x1c>)
   124aa:	4413      	add	r3, r2
}
   124ac:	4618      	mov	r0, r3
   124ae:	370c      	adds	r7, #12
   124b0:	46bd      	mov	sp, r7
   124b2:	bc80      	pop	{r7}
   124b4:	4770      	bx	lr
   124b6:	bf00      	nop
   124b8:	2000fe94 	.word	0x2000fe94

000124bc <pool_id>:

static int pool_id(struct net_buf_pool *pool)
{
   124bc:	b480      	push	{r7}
   124be:	b083      	sub	sp, #12
   124c0:	af00      	add	r7, sp, #0
   124c2:	6078      	str	r0, [r7, #4]
	return pool - _net_buf_pool_list;
   124c4:	687b      	ldr	r3, [r7, #4]
   124c6:	4a04      	ldr	r2, [pc, #16]	; (124d8 <pool_id+0x1c>)
   124c8:	1a9b      	subs	r3, r3, r2
   124ca:	115b      	asrs	r3, r3, #5
}
   124cc:	4618      	mov	r0, r3
   124ce:	370c      	adds	r7, #12
   124d0:	46bd      	mov	sp, r7
   124d2:	bc80      	pop	{r7}
   124d4:	4770      	bx	lr
   124d6:	bf00      	nop
   124d8:	2000fe94 	.word	0x2000fe94

000124dc <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
   124dc:	b580      	push	{r7, lr}
   124de:	b084      	sub	sp, #16
   124e0:	af00      	add	r7, sp, #0
   124e2:	6078      	str	r0, [r7, #4]
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   124e4:	687b      	ldr	r3, [r7, #4]
   124e6:	799b      	ldrb	r3, [r3, #6]
   124e8:	4618      	mov	r0, r3
   124ea:	f7ff ffd7 	bl	1249c <net_buf_pool_get>
   124ee:	60f8      	str	r0, [r7, #12]

	return buf - pool->__bufs;
   124f0:	68fb      	ldr	r3, [r7, #12]
   124f2:	69db      	ldr	r3, [r3, #28]
   124f4:	687a      	ldr	r2, [r7, #4]
   124f6:	1ad3      	subs	r3, r2, r3
   124f8:	10db      	asrs	r3, r3, #3
   124fa:	4a03      	ldr	r2, [pc, #12]	; (12508 <net_buf_id+0x2c>)
   124fc:	fb02 f303 	mul.w	r3, r2, r3
}
   12500:	4618      	mov	r0, r3
   12502:	3710      	adds	r7, #16
   12504:	46bd      	mov	sp, r7
   12506:	bd80      	pop	{r7, pc}
   12508:	aaaaaaab 	.word	0xaaaaaaab

0001250c <k_delayed_work_submit>:
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
   1250c:	b580      	push	{r7, lr}
   1250e:	b082      	sub	sp, #8
   12510:	af00      	add	r7, sp, #0
   12512:	6078      	str	r0, [r7, #4]
   12514:	6039      	str	r1, [r7, #0]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   12516:	683a      	ldr	r2, [r7, #0]
   12518:	6879      	ldr	r1, [r7, #4]
   1251a:	4804      	ldr	r0, [pc, #16]	; (1252c <k_delayed_work_submit+0x20>)
   1251c:	f005 fd82 	bl	18024 <k_delayed_work_submit_to_queue>
   12520:	4603      	mov	r3, r0
}
   12522:	4618      	mov	r0, r3
   12524:	3708      	adds	r7, #8
   12526:	46bd      	mov	sp, r7
   12528:	bd80      	pop	{r7, pc}
   1252a:	bf00      	nop
   1252c:	200061b4 	.word	0x200061b4

00012530 <arp_entry_find_move_first>:
	return NULL;
}

static inline struct arp_entry *arp_entry_find_move_first(struct net_if *iface,
							  struct in_addr *dst)
{
   12530:	b590      	push	{r4, r7, lr}
   12532:	b087      	sub	sp, #28
   12534:	af00      	add	r7, sp, #0
   12536:	6078      	str	r0, [r7, #4]
   12538:	6039      	str	r1, [r7, #0]
	sys_snode_t *prev = NULL;
   1253a:	2300      	movs	r3, #0
   1253c:	60fb      	str	r3, [r7, #12]
	struct arp_entry *entry;

	NET_DBG("dst %s", log_strdup(net_sprint_ipv4_addr(dst)));
   1253e:	f00f fd40 	bl	21fc2 <_is_user_context>
   12542:	4603      	mov	r3, r0
   12544:	75fb      	strb	r3, [r7, #23]

	entry = arp_entry_find(&arp_table, iface, dst, &prev);
   12546:	f107 030c 	add.w	r3, r7, #12
   1254a:	683a      	ldr	r2, [r7, #0]
   1254c:	6879      	ldr	r1, [r7, #4]
   1254e:	480f      	ldr	r0, [pc, #60]	; (1258c <arp_entry_find_move_first+0x5c>)
   12550:	f00f ff21 	bl	22396 <arp_entry_find>
   12554:	6138      	str	r0, [r7, #16]
	if (entry) {
   12556:	693b      	ldr	r3, [r7, #16]
   12558:	2b00      	cmp	r3, #0
   1255a:	d011      	beq.n	12580 <arp_entry_find_move_first+0x50>
		/* Let's assume the target is going to be accessed
		 * more than once here in a short time frame. So we
		 * place the entry first in position into the table
		 * in order to reduce subsequent find.
		 */
		if (&entry->node != sys_slist_peek_head(&arp_table)) {
   1255c:	693c      	ldr	r4, [r7, #16]
   1255e:	480b      	ldr	r0, [pc, #44]	; (1258c <arp_entry_find_move_first+0x5c>)
   12560:	f00f fc3f 	bl	21de2 <sys_slist_peek_head>
   12564:	4603      	mov	r3, r0
   12566:	429c      	cmp	r4, r3
   12568:	d00a      	beq.n	12580 <arp_entry_find_move_first+0x50>
			sys_slist_remove(&arp_table, prev, &entry->node);
   1256a:	68fb      	ldr	r3, [r7, #12]
   1256c:	693a      	ldr	r2, [r7, #16]
   1256e:	4619      	mov	r1, r3
   12570:	4806      	ldr	r0, [pc, #24]	; (1258c <arp_entry_find_move_first+0x5c>)
   12572:	f00f fcc5 	bl	21f00 <sys_slist_remove>
			sys_slist_prepend(&arp_table, &entry->node);
   12576:	693b      	ldr	r3, [r7, #16]
   12578:	4619      	mov	r1, r3
   1257a:	4804      	ldr	r0, [pc, #16]	; (1258c <arp_entry_find_move_first+0x5c>)
   1257c:	f00f fc75 	bl	21e6a <sys_slist_prepend>
		}
	}

	return entry;
   12580:	693b      	ldr	r3, [r7, #16]
}
   12582:	4618      	mov	r0, r3
   12584:	371c      	adds	r7, #28
   12586:	46bd      	mov	sp, r7
   12588:	bd90      	pop	{r4, r7, pc}
   1258a:	bf00      	nop
   1258c:	20003d60 	.word	0x20003d60

00012590 <arp_entry_find_pending>:

static inline
struct arp_entry *arp_entry_find_pending(struct net_if *iface,
					 struct in_addr *dst)
{
   12590:	b580      	push	{r7, lr}
   12592:	b084      	sub	sp, #16
   12594:	af00      	add	r7, sp, #0
   12596:	6078      	str	r0, [r7, #4]
   12598:	6039      	str	r1, [r7, #0]
	NET_DBG("dst %s", log_strdup(net_sprint_ipv4_addr(dst)));
   1259a:	f00f fd12 	bl	21fc2 <_is_user_context>
   1259e:	4603      	mov	r3, r0
   125a0:	73fb      	strb	r3, [r7, #15]

	return arp_entry_find(&arp_pending_entries, iface, dst, NULL);
   125a2:	2300      	movs	r3, #0
   125a4:	683a      	ldr	r2, [r7, #0]
   125a6:	6879      	ldr	r1, [r7, #4]
   125a8:	4803      	ldr	r0, [pc, #12]	; (125b8 <arp_entry_find_pending+0x28>)
   125aa:	f00f fef4 	bl	22396 <arp_entry_find>
   125ae:	4603      	mov	r3, r0
}
   125b0:	4618      	mov	r0, r3
   125b2:	3710      	adds	r7, #16
   125b4:	46bd      	mov	sp, r7
   125b6:	bd80      	pop	{r7, pc}
   125b8:	20003d58 	.word	0x20003d58

000125bc <arp_entry_get_pending>:

static struct arp_entry *arp_entry_get_pending(struct net_if *iface,
					       struct in_addr *dst)
{
   125bc:	b580      	push	{r7, lr}
   125be:	b086      	sub	sp, #24
   125c0:	af00      	add	r7, sp, #0
   125c2:	6078      	str	r0, [r7, #4]
   125c4:	6039      	str	r1, [r7, #0]
	sys_snode_t *prev = NULL;
   125c6:	2300      	movs	r3, #0
   125c8:	60fb      	str	r3, [r7, #12]
	struct arp_entry *entry;

	NET_DBG("dst %s", log_strdup(net_sprint_ipv4_addr(dst)));
   125ca:	f00f fcfa 	bl	21fc2 <_is_user_context>
   125ce:	4603      	mov	r3, r0
   125d0:	75fb      	strb	r3, [r7, #23]

	entry = arp_entry_find(&arp_pending_entries, iface, dst, &prev);
   125d2:	f107 030c 	add.w	r3, r7, #12
   125d6:	683a      	ldr	r2, [r7, #0]
   125d8:	6879      	ldr	r1, [r7, #4]
   125da:	480d      	ldr	r0, [pc, #52]	; (12610 <arp_entry_get_pending+0x54>)
   125dc:	f00f fedb 	bl	22396 <arp_entry_find>
   125e0:	6138      	str	r0, [r7, #16]
	if (entry) {
   125e2:	693b      	ldr	r3, [r7, #16]
   125e4:	2b00      	cmp	r3, #0
   125e6:	d005      	beq.n	125f4 <arp_entry_get_pending+0x38>
		/* We remove the entry from the pending list */
		sys_slist_remove(&arp_pending_entries, prev, &entry->node);
   125e8:	68fb      	ldr	r3, [r7, #12]
   125ea:	693a      	ldr	r2, [r7, #16]
   125ec:	4619      	mov	r1, r3
   125ee:	4808      	ldr	r0, [pc, #32]	; (12610 <arp_entry_get_pending+0x54>)
   125f0:	f00f fc86 	bl	21f00 <sys_slist_remove>
	}

	if (sys_slist_is_empty(&arp_pending_entries)) {
   125f4:	4806      	ldr	r0, [pc, #24]	; (12610 <arp_entry_get_pending+0x54>)
   125f6:	f00f fc0a 	bl	21e0e <sys_slist_is_empty>
   125fa:	4603      	mov	r3, r0
   125fc:	2b00      	cmp	r3, #0
   125fe:	d002      	beq.n	12606 <arp_entry_get_pending+0x4a>
		k_delayed_work_cancel(&arp_request_timer);
   12600:	4804      	ldr	r0, [pc, #16]	; (12614 <arp_entry_get_pending+0x58>)
   12602:	f005 fe0d 	bl	18220 <k_delayed_work_cancel>
	}

	return entry;
   12606:	693b      	ldr	r3, [r7, #16]
}
   12608:	4618      	mov	r0, r3
   1260a:	3718      	adds	r7, #24
   1260c:	46bd      	mov	sp, r7
   1260e:	bd80      	pop	{r7, pc}
   12610:	20003d58 	.word	0x20003d58
   12614:	20003d68 	.word	0x20003d68

00012618 <arp_entry_get_free>:

static struct arp_entry *arp_entry_get_free(void)
{
   12618:	b580      	push	{r7, lr}
   1261a:	b082      	sub	sp, #8
   1261c:	af00      	add	r7, sp, #0
	sys_snode_t *node;

	node = sys_slist_peek_head(&arp_free_entries);
   1261e:	4809      	ldr	r0, [pc, #36]	; (12644 <arp_entry_get_free+0x2c>)
   12620:	f00f fbdf 	bl	21de2 <sys_slist_peek_head>
   12624:	6078      	str	r0, [r7, #4]
	if (!node) {
   12626:	687b      	ldr	r3, [r7, #4]
   12628:	2b00      	cmp	r3, #0
   1262a:	d101      	bne.n	12630 <arp_entry_get_free+0x18>
		return NULL;
   1262c:	2300      	movs	r3, #0
   1262e:	e005      	b.n	1263c <arp_entry_get_free+0x24>
	}

	/* We remove the node from the free list */
	sys_slist_remove(&arp_free_entries, NULL, node);
   12630:	687a      	ldr	r2, [r7, #4]
   12632:	2100      	movs	r1, #0
   12634:	4803      	ldr	r0, [pc, #12]	; (12644 <arp_entry_get_free+0x2c>)
   12636:	f00f fc63 	bl	21f00 <sys_slist_remove>

	return CONTAINER_OF(node, struct arp_entry, node);
   1263a:	687b      	ldr	r3, [r7, #4]
}
   1263c:	4618      	mov	r0, r3
   1263e:	3708      	adds	r7, #8
   12640:	46bd      	mov	sp, r7
   12642:	bd80      	pop	{r7, pc}
   12644:	20003d50 	.word	0x20003d50

00012648 <arp_entry_get_last_from_table>:

static struct arp_entry *arp_entry_get_last_from_table(void)
{
   12648:	b580      	push	{r7, lr}
   1264a:	b082      	sub	sp, #8
   1264c:	af00      	add	r7, sp, #0

	/* We assume last entry is the oldest one,
	 * so is the preferred one to be taken out.
	 */

	node = sys_slist_peek_tail(&arp_table);
   1264e:	4809      	ldr	r0, [pc, #36]	; (12674 <arp_entry_get_last_from_table+0x2c>)
   12650:	f00f fbd2 	bl	21df8 <sys_slist_peek_tail>
   12654:	6078      	str	r0, [r7, #4]
	if (!node) {
   12656:	687b      	ldr	r3, [r7, #4]
   12658:	2b00      	cmp	r3, #0
   1265a:	d101      	bne.n	12660 <arp_entry_get_last_from_table+0x18>
		return NULL;
   1265c:	2300      	movs	r3, #0
   1265e:	e004      	b.n	1266a <arp_entry_get_last_from_table+0x22>
	}

	sys_slist_find_and_remove(&arp_table, node);
   12660:	6879      	ldr	r1, [r7, #4]
   12662:	4804      	ldr	r0, [pc, #16]	; (12674 <arp_entry_get_last_from_table+0x2c>)
   12664:	f00f fc88 	bl	21f78 <sys_slist_find_and_remove>

	return CONTAINER_OF(node, struct arp_entry, node);
   12668:	687b      	ldr	r3, [r7, #4]
}
   1266a:	4618      	mov	r0, r3
   1266c:	3708      	adds	r7, #8
   1266e:	46bd      	mov	sp, r7
   12670:	bd80      	pop	{r7, pc}
   12672:	bf00      	nop
   12674:	20003d60 	.word	0x20003d60

00012678 <arp_entry_register_pending>:


static void arp_entry_register_pending(struct arp_entry *entry)
{
   12678:	b590      	push	{r4, r7, lr}
   1267a:	b085      	sub	sp, #20
   1267c:	af00      	add	r7, sp, #0
   1267e:	6078      	str	r0, [r7, #4]
	NET_DBG("dst %s", log_strdup(net_sprint_ipv4_addr(&entry->ip)));
   12680:	f00f fc9f 	bl	21fc2 <_is_user_context>
   12684:	4603      	mov	r3, r0
   12686:	73fb      	strb	r3, [r7, #15]

	sys_slist_append(&arp_pending_entries, &entry->node);
   12688:	687b      	ldr	r3, [r7, #4]
   1268a:	4619      	mov	r1, r3
   1268c:	480c      	ldr	r0, [pc, #48]	; (126c0 <arp_entry_register_pending+0x48>)
   1268e:	f00f fc0f 	bl	21eb0 <sys_slist_append>

	entry->req_start = k_uptime_get();
   12692:	f00f fcef 	bl	22074 <k_uptime_get>
   12696:	4603      	mov	r3, r0
   12698:	460c      	mov	r4, r1
   1269a:	687a      	ldr	r2, [r7, #4]
   1269c:	e9c2 3402 	strd	r3, r4, [r2, #8]

	/* Let's start the timer if necessary */
	if (!k_delayed_work_remaining_get(&arp_request_timer)) {
   126a0:	4808      	ldr	r0, [pc, #32]	; (126c4 <arp_entry_register_pending+0x4c>)
   126a2:	f00f fcd1 	bl	22048 <k_delayed_work_remaining_get>
   126a6:	4603      	mov	r3, r0
   126a8:	2b00      	cmp	r3, #0
   126aa:	d104      	bne.n	126b6 <arp_entry_register_pending+0x3e>
		k_delayed_work_submit(&arp_request_timer,
   126ac:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   126b0:	4804      	ldr	r0, [pc, #16]	; (126c4 <arp_entry_register_pending+0x4c>)
   126b2:	f7ff ff2b 	bl	1250c <k_delayed_work_submit>
				      ARP_REQUEST_TIMEOUT);
	}
}
   126b6:	bf00      	nop
   126b8:	3714      	adds	r7, #20
   126ba:	46bd      	mov	sp, r7
   126bc:	bd90      	pop	{r4, r7, pc}
   126be:	bf00      	nop
   126c0:	20003d58 	.word	0x20003d58
   126c4:	20003d68 	.word	0x20003d68

000126c8 <arp_request_timeout>:

static void arp_request_timeout(struct k_work *work)
{
   126c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   126cc:	b086      	sub	sp, #24
   126ce:	af00      	add	r7, sp, #0
   126d0:	6078      	str	r0, [r7, #4]
	s64_t current = k_uptime_get();
   126d2:	f00f fccf 	bl	22074 <k_uptime_get>
   126d6:	e9c7 0102 	strd	r0, r1, [r7, #8]
	struct arp_entry *entry, *next;

	ARG_UNUSED(work);

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_pending_entries,
   126da:	4839      	ldr	r0, [pc, #228]	; (127c0 <arp_request_timeout+0xf8>)
   126dc:	f00f fb81 	bl	21de2 <sys_slist_peek_head>
   126e0:	4603      	mov	r3, r0
   126e2:	2b00      	cmp	r3, #0
   126e4:	d004      	beq.n	126f0 <arp_request_timeout+0x28>
   126e6:	4836      	ldr	r0, [pc, #216]	; (127c0 <arp_request_timeout+0xf8>)
   126e8:	f00f fb7b 	bl	21de2 <sys_slist_peek_head>
   126ec:	4603      	mov	r3, r0
   126ee:	e000      	b.n	126f2 <arp_request_timeout+0x2a>
   126f0:	2300      	movs	r3, #0
   126f2:	617b      	str	r3, [r7, #20]
   126f4:	697b      	ldr	r3, [r7, #20]
   126f6:	2b00      	cmp	r3, #0
   126f8:	d00e      	beq.n	12718 <arp_request_timeout+0x50>
   126fa:	697b      	ldr	r3, [r7, #20]
   126fc:	4618      	mov	r0, r3
   126fe:	f00f fba3 	bl	21e48 <sys_slist_peek_next>
   12702:	4603      	mov	r3, r0
   12704:	2b00      	cmp	r3, #0
   12706:	d005      	beq.n	12714 <arp_request_timeout+0x4c>
   12708:	697b      	ldr	r3, [r7, #20]
   1270a:	4618      	mov	r0, r3
   1270c:	f00f fb9c 	bl	21e48 <sys_slist_peek_next>
   12710:	4603      	mov	r3, r0
   12712:	e002      	b.n	1271a <arp_request_timeout+0x52>
   12714:	2300      	movs	r3, #0
   12716:	e000      	b.n	1271a <arp_request_timeout+0x52>
   12718:	2300      	movs	r3, #0
   1271a:	613b      	str	r3, [r7, #16]
   1271c:	e037      	b.n	1278e <arp_request_timeout+0xc6>
					  entry, next, node) {
		if ((entry->req_start + ARP_REQUEST_TIMEOUT - current) > 0) {
   1271e:	697b      	ldr	r3, [r7, #20]
   12720:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   12724:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   12728:	1a84      	subs	r4, r0, r2
   1272a:	eb61 0503 	sbc.w	r5, r1, r3
   1272e:	f514 68fa 	adds.w	r8, r4, #2000	; 0x7d0
   12732:	f145 0900 	adc.w	r9, r5, #0
   12736:	f1b8 0f01 	cmp.w	r8, #1
   1273a:	f179 0300 	sbcs.w	r3, r9, #0
   1273e:	da2a      	bge.n	12796 <arp_request_timeout+0xce>
			break;
		}

		arp_entry_cleanup(entry, true);
   12740:	2101      	movs	r1, #1
   12742:	6978      	ldr	r0, [r7, #20]
   12744:	f00f fdf9 	bl	2233a <arp_entry_cleanup>

		sys_slist_remove(&arp_pending_entries, NULL, &entry->node);
   12748:	697b      	ldr	r3, [r7, #20]
   1274a:	461a      	mov	r2, r3
   1274c:	2100      	movs	r1, #0
   1274e:	481c      	ldr	r0, [pc, #112]	; (127c0 <arp_request_timeout+0xf8>)
   12750:	f00f fbd6 	bl	21f00 <sys_slist_remove>
		sys_slist_append(&arp_free_entries, &entry->node);
   12754:	697b      	ldr	r3, [r7, #20]
   12756:	4619      	mov	r1, r3
   12758:	481a      	ldr	r0, [pc, #104]	; (127c4 <arp_request_timeout+0xfc>)
   1275a:	f00f fba9 	bl	21eb0 <sys_slist_append>

		entry = NULL;
   1275e:	2300      	movs	r3, #0
   12760:	617b      	str	r3, [r7, #20]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_pending_entries,
   12762:	693b      	ldr	r3, [r7, #16]
   12764:	617b      	str	r3, [r7, #20]
   12766:	697b      	ldr	r3, [r7, #20]
   12768:	2b00      	cmp	r3, #0
   1276a:	d00e      	beq.n	1278a <arp_request_timeout+0xc2>
   1276c:	697b      	ldr	r3, [r7, #20]
   1276e:	4618      	mov	r0, r3
   12770:	f00f fb6a 	bl	21e48 <sys_slist_peek_next>
   12774:	4603      	mov	r3, r0
   12776:	2b00      	cmp	r3, #0
   12778:	d005      	beq.n	12786 <arp_request_timeout+0xbe>
   1277a:	697b      	ldr	r3, [r7, #20]
   1277c:	4618      	mov	r0, r3
   1277e:	f00f fb63 	bl	21e48 <sys_slist_peek_next>
   12782:	4603      	mov	r3, r0
   12784:	e002      	b.n	1278c <arp_request_timeout+0xc4>
   12786:	2300      	movs	r3, #0
   12788:	e000      	b.n	1278c <arp_request_timeout+0xc4>
   1278a:	2300      	movs	r3, #0
   1278c:	613b      	str	r3, [r7, #16]
   1278e:	697b      	ldr	r3, [r7, #20]
   12790:	2b00      	cmp	r3, #0
   12792:	d1c4      	bne.n	1271e <arp_request_timeout+0x56>
   12794:	e000      	b.n	12798 <arp_request_timeout+0xd0>
			break;
   12796:	bf00      	nop
	}

	if (entry) {
   12798:	697b      	ldr	r3, [r7, #20]
   1279a:	2b00      	cmp	r3, #0
   1279c:	d00b      	beq.n	127b6 <arp_request_timeout+0xee>
		k_delayed_work_submit(&arp_request_timer,
				      entry->req_start +
   1279e:	697b      	ldr	r3, [r7, #20]
   127a0:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
				      ARP_REQUEST_TIMEOUT - current);
   127a4:	461a      	mov	r2, r3
   127a6:	68bb      	ldr	r3, [r7, #8]
   127a8:	1ad3      	subs	r3, r2, r3
		k_delayed_work_submit(&arp_request_timer,
   127aa:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
   127ae:	4619      	mov	r1, r3
   127b0:	4805      	ldr	r0, [pc, #20]	; (127c8 <arp_request_timeout+0x100>)
   127b2:	f7ff feab 	bl	1250c <k_delayed_work_submit>
	}
}
   127b6:	bf00      	nop
   127b8:	3718      	adds	r7, #24
   127ba:	46bd      	mov	sp, r7
   127bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   127c0:	20003d58 	.word	0x20003d58
   127c4:	20003d50 	.word	0x20003d50
   127c8:	20003d68 	.word	0x20003d68

000127cc <arp_gratuitous>:
}

static void arp_gratuitous(struct net_if *iface,
			   struct in_addr *src,
			   struct net_eth_addr *hwaddr)
{
   127cc:	b580      	push	{r7, lr}
   127ce:	b08c      	sub	sp, #48	; 0x30
   127d0:	af00      	add	r7, sp, #0
   127d2:	60f8      	str	r0, [r7, #12]
   127d4:	60b9      	str	r1, [r7, #8]
   127d6:	607a      	str	r2, [r7, #4]
	sys_snode_t *prev = NULL;
   127d8:	2300      	movs	r3, #0
   127da:	627b      	str	r3, [r7, #36]	; 0x24
	struct arp_entry *entry;

	entry = arp_entry_find(&arp_table, iface, src, &prev);
   127dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
   127e0:	68ba      	ldr	r2, [r7, #8]
   127e2:	68f9      	ldr	r1, [r7, #12]
   127e4:	480b      	ldr	r0, [pc, #44]	; (12814 <arp_gratuitous+0x48>)
   127e6:	f00f fdd6 	bl	22396 <arp_entry_find>
   127ea:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (entry) {
   127ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   127ee:	2b00      	cmp	r3, #0
   127f0:	d00b      	beq.n	1280a <arp_gratuitous+0x3e>
		NET_DBG("Gratuitous ARP hwaddr %s -> %s",
   127f2:	f00f fbe6 	bl	21fc2 <_is_user_context>
   127f6:	4603      	mov	r3, r0
   127f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					   sizeof(struct net_eth_addr))),
			log_strdup(net_sprint_ll_addr(
					   (const u8_t *)hwaddr,
					   sizeof(struct net_eth_addr))));

		memcpy(&entry->eth, hwaddr, sizeof(struct net_eth_addr));
   127fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   127fe:	3318      	adds	r3, #24
   12800:	2206      	movs	r2, #6
   12802:	6879      	ldr	r1, [r7, #4]
   12804:	4618      	mov	r0, r3
   12806:	f7ef fc2f 	bl	2068 <memcpy>
	}
}
   1280a:	bf00      	nop
   1280c:	3730      	adds	r7, #48	; 0x30
   1280e:	46bd      	mov	sp, r7
   12810:	bd80      	pop	{r7, pc}
   12812:	bf00      	nop
   12814:	20003d60 	.word	0x20003d60

00012818 <arp_update>:
static void arp_update(struct net_if *iface,
		       struct in_addr *src,
		       struct net_eth_addr *hwaddr,
		       bool gratuitous,
		       bool force)
{
   12818:	b590      	push	{r4, r7, lr}
   1281a:	b095      	sub	sp, #84	; 0x54
   1281c:	af00      	add	r7, sp, #0
   1281e:	60f8      	str	r0, [r7, #12]
   12820:	60b9      	str	r1, [r7, #8]
   12822:	607a      	str	r2, [r7, #4]
   12824:	70fb      	strb	r3, [r7, #3]
	struct arp_entry *entry;
	struct net_pkt *pkt;

	NET_DBG("src %s", log_strdup(net_sprint_ipv4_addr(src)));
   12826:	f00f fbcc 	bl	21fc2 <_is_user_context>
   1282a:	4603      	mov	r3, r0
   1282c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	entry = arp_entry_get_pending(iface, src);
   12830:	68b9      	ldr	r1, [r7, #8]
   12832:	68f8      	ldr	r0, [r7, #12]
   12834:	f7ff fec2 	bl	125bc <arp_entry_get_pending>
   12838:	64b8      	str	r0, [r7, #72]	; 0x48
	if (!entry) {
   1283a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1283c:	2b00      	cmp	r3, #0
   1283e:	d120      	bne.n	12882 <arp_update+0x6a>
		if (IS_ENABLED(CONFIG_NET_ARP_GRATUITOUS) && gratuitous) {
   12840:	78fb      	ldrb	r3, [r7, #3]
   12842:	2b00      	cmp	r3, #0
   12844:	d004      	beq.n	12850 <arp_update+0x38>
			arp_gratuitous(iface, src, hwaddr);
   12846:	687a      	ldr	r2, [r7, #4]
   12848:	68b9      	ldr	r1, [r7, #8]
   1284a:	68f8      	ldr	r0, [r7, #12]
   1284c:	f7ff ffbe 	bl	127cc <arp_gratuitous>
		}

		if (force) {
   12850:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
   12854:	2b00      	cmp	r3, #0
   12856:	d046      	beq.n	128e6 <arp_update+0xce>
			sys_snode_t *prev = NULL;
   12858:	2300      	movs	r3, #0
   1285a:	63bb      	str	r3, [r7, #56]	; 0x38
			struct arp_entry *entry;

			entry = arp_entry_find(&arp_table, iface, src, &prev);
   1285c:	f107 0338 	add.w	r3, r7, #56	; 0x38
   12860:	68ba      	ldr	r2, [r7, #8]
   12862:	68f9      	ldr	r1, [r7, #12]
   12864:	4822      	ldr	r0, [pc, #136]	; (128f0 <arp_update+0xd8>)
   12866:	f00f fd96 	bl	22396 <arp_entry_find>
   1286a:	64f8      	str	r0, [r7, #76]	; 0x4c
			if (entry) {
   1286c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1286e:	2b00      	cmp	r3, #0
   12870:	d039      	beq.n	128e6 <arp_update+0xce>
				memcpy(&entry->eth, hwaddr,
   12872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   12874:	3318      	adds	r3, #24
   12876:	2206      	movs	r2, #6
   12878:	6879      	ldr	r1, [r7, #4]
   1287a:	4618      	mov	r0, r3
   1287c:	f7ef fbf4 	bl	2068 <memcpy>
				       sizeof(struct net_eth_addr));
			}
		}

		return;
   12880:	e031      	b.n	128e6 <arp_update+0xce>
	}

	/* Set the dst in the pending packet */
	net_pkt_lladdr_dst(entry->pending)->len = sizeof(struct net_eth_addr);
   12882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   12884:	699b      	ldr	r3, [r3, #24]
   12886:	4618      	mov	r0, r3
   12888:	f00f fd13 	bl	222b2 <net_pkt_lladdr_dst>
   1288c:	4603      	mov	r3, r0
   1288e:	2206      	movs	r2, #6
   12890:	711a      	strb	r2, [r3, #4]
	net_pkt_lladdr_dst(entry->pending)->addr =
		(u8_t *) &NET_ETH_HDR(entry->pending)->dst.addr;
   12892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   12894:	699b      	ldr	r3, [r3, #24]
   12896:	4618      	mov	r0, r3
   12898:	f00f fce8 	bl	2226c <net_pkt_data>
   1289c:	4604      	mov	r4, r0
	net_pkt_lladdr_dst(entry->pending)->addr =
   1289e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   128a0:	699b      	ldr	r3, [r3, #24]
   128a2:	4618      	mov	r0, r3
   128a4:	f00f fd05 	bl	222b2 <net_pkt_lladdr_dst>
   128a8:	4603      	mov	r3, r0
		(u8_t *) &NET_ETH_HDR(entry->pending)->dst.addr;
   128aa:	4622      	mov	r2, r4
	net_pkt_lladdr_dst(entry->pending)->addr =
   128ac:	601a      	str	r2, [r3, #0]

	NET_DBG("dst %s pending %p frag %p",
   128ae:	f00f fb88 	bl	21fc2 <_is_user_context>
   128b2:	4603      	mov	r3, r0
   128b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		log_strdup(net_sprint_ipv4_addr(&entry->ip)),
		entry->pending, entry->pending->frags);

	pkt = entry->pending;
   128b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   128ba:	699b      	ldr	r3, [r3, #24]
   128bc:	643b      	str	r3, [r7, #64]	; 0x40
	entry->pending = NULL;
   128be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   128c0:	2200      	movs	r2, #0
   128c2:	619a      	str	r2, [r3, #24]

	memcpy(&entry->eth, hwaddr, sizeof(struct net_eth_addr));
   128c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   128c6:	3318      	adds	r3, #24
   128c8:	2206      	movs	r2, #6
   128ca:	6879      	ldr	r1, [r7, #4]
   128cc:	4618      	mov	r0, r3
   128ce:	f7ef fbcb 	bl	2068 <memcpy>

	/* Inserting entry into the table */
	sys_slist_prepend(&arp_table, &entry->node);
   128d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   128d4:	4619      	mov	r1, r3
   128d6:	4806      	ldr	r0, [pc, #24]	; (128f0 <arp_update+0xd8>)
   128d8:	f00f fac7 	bl	21e6a <sys_slist_prepend>

	net_if_queue_tx(iface, pkt);
   128dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
   128de:	68f8      	ldr	r0, [r7, #12]
   128e0:	f000 fd26 	bl	13330 <net_if_queue_tx>
   128e4:	e000      	b.n	128e8 <arp_update+0xd0>
		return;
   128e6:	bf00      	nop
}
   128e8:	3754      	adds	r7, #84	; 0x54
   128ea:	46bd      	mov	sp, r7
   128ec:	bd90      	pop	{r4, r7, pc}
   128ee:	bf00      	nop
   128f0:	20003d60 	.word	0x20003d60

000128f4 <net_arp_clear_cache>:

	return NET_OK;
}

void net_arp_clear_cache(struct net_if *iface)
{
   128f4:	b580      	push	{r7, lr}
   128f6:	b088      	sub	sp, #32
   128f8:	af00      	add	r7, sp, #0
   128fa:	6078      	str	r0, [r7, #4]
	sys_snode_t *prev = NULL;
   128fc:	2300      	movs	r3, #0
   128fe:	61fb      	str	r3, [r7, #28]
	struct arp_entry *entry, *next;

	NET_DBG("Flushing ARP table");
   12900:	f00f fb5f 	bl	21fc2 <_is_user_context>
   12904:	4603      	mov	r3, r0
   12906:	74fb      	strb	r3, [r7, #19]

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_table, entry, next, node) {
   12908:	485e      	ldr	r0, [pc, #376]	; (12a84 <net_arp_clear_cache+0x190>)
   1290a:	f00f fa6a 	bl	21de2 <sys_slist_peek_head>
   1290e:	4603      	mov	r3, r0
   12910:	2b00      	cmp	r3, #0
   12912:	d004      	beq.n	1291e <net_arp_clear_cache+0x2a>
   12914:	485b      	ldr	r0, [pc, #364]	; (12a84 <net_arp_clear_cache+0x190>)
   12916:	f00f fa64 	bl	21de2 <sys_slist_peek_head>
   1291a:	4603      	mov	r3, r0
   1291c:	e000      	b.n	12920 <net_arp_clear_cache+0x2c>
   1291e:	2300      	movs	r3, #0
   12920:	61bb      	str	r3, [r7, #24]
   12922:	69bb      	ldr	r3, [r7, #24]
   12924:	2b00      	cmp	r3, #0
   12926:	d00e      	beq.n	12946 <net_arp_clear_cache+0x52>
   12928:	69bb      	ldr	r3, [r7, #24]
   1292a:	4618      	mov	r0, r3
   1292c:	f00f fa8c 	bl	21e48 <sys_slist_peek_next>
   12930:	4603      	mov	r3, r0
   12932:	2b00      	cmp	r3, #0
   12934:	d005      	beq.n	12942 <net_arp_clear_cache+0x4e>
   12936:	69bb      	ldr	r3, [r7, #24]
   12938:	4618      	mov	r0, r3
   1293a:	f00f fa85 	bl	21e48 <sys_slist_peek_next>
   1293e:	4603      	mov	r3, r0
   12940:	e002      	b.n	12948 <net_arp_clear_cache+0x54>
   12942:	2300      	movs	r3, #0
   12944:	e000      	b.n	12948 <net_arp_clear_cache+0x54>
   12946:	2300      	movs	r3, #0
   12948:	617b      	str	r3, [r7, #20]
   1294a:	e02f      	b.n	129ac <net_arp_clear_cache+0xb8>
		if (iface && iface != entry->iface) {
   1294c:	687b      	ldr	r3, [r7, #4]
   1294e:	2b00      	cmp	r3, #0
   12950:	d007      	beq.n	12962 <net_arp_clear_cache+0x6e>
   12952:	69bb      	ldr	r3, [r7, #24]
   12954:	691b      	ldr	r3, [r3, #16]
   12956:	687a      	ldr	r2, [r7, #4]
   12958:	429a      	cmp	r2, r3
   1295a:	d002      	beq.n	12962 <net_arp_clear_cache+0x6e>
			prev = &entry->node;
   1295c:	69bb      	ldr	r3, [r7, #24]
   1295e:	61fb      	str	r3, [r7, #28]
			continue;
   12960:	e00e      	b.n	12980 <net_arp_clear_cache+0x8c>
		}

		arp_entry_cleanup(entry, false);
   12962:	2100      	movs	r1, #0
   12964:	69b8      	ldr	r0, [r7, #24]
   12966:	f00f fce8 	bl	2233a <arp_entry_cleanup>

		sys_slist_remove(&arp_table, prev, &entry->node);
   1296a:	69bb      	ldr	r3, [r7, #24]
   1296c:	461a      	mov	r2, r3
   1296e:	69f9      	ldr	r1, [r7, #28]
   12970:	4844      	ldr	r0, [pc, #272]	; (12a84 <net_arp_clear_cache+0x190>)
   12972:	f00f fac5 	bl	21f00 <sys_slist_remove>
		sys_slist_prepend(&arp_free_entries, &entry->node);
   12976:	69bb      	ldr	r3, [r7, #24]
   12978:	4619      	mov	r1, r3
   1297a:	4843      	ldr	r0, [pc, #268]	; (12a88 <net_arp_clear_cache+0x194>)
   1297c:	f00f fa75 	bl	21e6a <sys_slist_prepend>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_table, entry, next, node) {
   12980:	697b      	ldr	r3, [r7, #20]
   12982:	61bb      	str	r3, [r7, #24]
   12984:	69bb      	ldr	r3, [r7, #24]
   12986:	2b00      	cmp	r3, #0
   12988:	d00e      	beq.n	129a8 <net_arp_clear_cache+0xb4>
   1298a:	69bb      	ldr	r3, [r7, #24]
   1298c:	4618      	mov	r0, r3
   1298e:	f00f fa5b 	bl	21e48 <sys_slist_peek_next>
   12992:	4603      	mov	r3, r0
   12994:	2b00      	cmp	r3, #0
   12996:	d005      	beq.n	129a4 <net_arp_clear_cache+0xb0>
   12998:	69bb      	ldr	r3, [r7, #24]
   1299a:	4618      	mov	r0, r3
   1299c:	f00f fa54 	bl	21e48 <sys_slist_peek_next>
   129a0:	4603      	mov	r3, r0
   129a2:	e002      	b.n	129aa <net_arp_clear_cache+0xb6>
   129a4:	2300      	movs	r3, #0
   129a6:	e000      	b.n	129aa <net_arp_clear_cache+0xb6>
   129a8:	2300      	movs	r3, #0
   129aa:	617b      	str	r3, [r7, #20]
   129ac:	69bb      	ldr	r3, [r7, #24]
   129ae:	2b00      	cmp	r3, #0
   129b0:	d1cc      	bne.n	1294c <net_arp_clear_cache+0x58>
	}

	prev = NULL;
   129b2:	2300      	movs	r3, #0
   129b4:	61fb      	str	r3, [r7, #28]

	NET_DBG("Flushing ARP pending requests");
   129b6:	f00f fb04 	bl	21fc2 <_is_user_context>
   129ba:	4603      	mov	r3, r0
   129bc:	74bb      	strb	r3, [r7, #18]

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_pending_entries,
   129be:	4833      	ldr	r0, [pc, #204]	; (12a8c <net_arp_clear_cache+0x198>)
   129c0:	f00f fa0f 	bl	21de2 <sys_slist_peek_head>
   129c4:	4603      	mov	r3, r0
   129c6:	2b00      	cmp	r3, #0
   129c8:	d004      	beq.n	129d4 <net_arp_clear_cache+0xe0>
   129ca:	4830      	ldr	r0, [pc, #192]	; (12a8c <net_arp_clear_cache+0x198>)
   129cc:	f00f fa09 	bl	21de2 <sys_slist_peek_head>
   129d0:	4603      	mov	r3, r0
   129d2:	e000      	b.n	129d6 <net_arp_clear_cache+0xe2>
   129d4:	2300      	movs	r3, #0
   129d6:	61bb      	str	r3, [r7, #24]
   129d8:	69bb      	ldr	r3, [r7, #24]
   129da:	2b00      	cmp	r3, #0
   129dc:	d00e      	beq.n	129fc <net_arp_clear_cache+0x108>
   129de:	69bb      	ldr	r3, [r7, #24]
   129e0:	4618      	mov	r0, r3
   129e2:	f00f fa31 	bl	21e48 <sys_slist_peek_next>
   129e6:	4603      	mov	r3, r0
   129e8:	2b00      	cmp	r3, #0
   129ea:	d005      	beq.n	129f8 <net_arp_clear_cache+0x104>
   129ec:	69bb      	ldr	r3, [r7, #24]
   129ee:	4618      	mov	r0, r3
   129f0:	f00f fa2a 	bl	21e48 <sys_slist_peek_next>
   129f4:	4603      	mov	r3, r0
   129f6:	e002      	b.n	129fe <net_arp_clear_cache+0x10a>
   129f8:	2300      	movs	r3, #0
   129fa:	e000      	b.n	129fe <net_arp_clear_cache+0x10a>
   129fc:	2300      	movs	r3, #0
   129fe:	617b      	str	r3, [r7, #20]
   12a00:	e02f      	b.n	12a62 <net_arp_clear_cache+0x16e>
					  entry, next, node) {
		if (iface && iface != entry->iface) {
   12a02:	687b      	ldr	r3, [r7, #4]
   12a04:	2b00      	cmp	r3, #0
   12a06:	d007      	beq.n	12a18 <net_arp_clear_cache+0x124>
   12a08:	69bb      	ldr	r3, [r7, #24]
   12a0a:	691b      	ldr	r3, [r3, #16]
   12a0c:	687a      	ldr	r2, [r7, #4]
   12a0e:	429a      	cmp	r2, r3
   12a10:	d002      	beq.n	12a18 <net_arp_clear_cache+0x124>
			prev = &entry->node;
   12a12:	69bb      	ldr	r3, [r7, #24]
   12a14:	61fb      	str	r3, [r7, #28]
			continue;
   12a16:	e00e      	b.n	12a36 <net_arp_clear_cache+0x142>
		}

		arp_entry_cleanup(entry, true);
   12a18:	2101      	movs	r1, #1
   12a1a:	69b8      	ldr	r0, [r7, #24]
   12a1c:	f00f fc8d 	bl	2233a <arp_entry_cleanup>

		sys_slist_remove(&arp_pending_entries, prev, &entry->node);
   12a20:	69bb      	ldr	r3, [r7, #24]
   12a22:	461a      	mov	r2, r3
   12a24:	69f9      	ldr	r1, [r7, #28]
   12a26:	4819      	ldr	r0, [pc, #100]	; (12a8c <net_arp_clear_cache+0x198>)
   12a28:	f00f fa6a 	bl	21f00 <sys_slist_remove>
		sys_slist_prepend(&arp_free_entries, &entry->node);
   12a2c:	69bb      	ldr	r3, [r7, #24]
   12a2e:	4619      	mov	r1, r3
   12a30:	4815      	ldr	r0, [pc, #84]	; (12a88 <net_arp_clear_cache+0x194>)
   12a32:	f00f fa1a 	bl	21e6a <sys_slist_prepend>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_pending_entries,
   12a36:	697b      	ldr	r3, [r7, #20]
   12a38:	61bb      	str	r3, [r7, #24]
   12a3a:	69bb      	ldr	r3, [r7, #24]
   12a3c:	2b00      	cmp	r3, #0
   12a3e:	d00e      	beq.n	12a5e <net_arp_clear_cache+0x16a>
   12a40:	69bb      	ldr	r3, [r7, #24]
   12a42:	4618      	mov	r0, r3
   12a44:	f00f fa00 	bl	21e48 <sys_slist_peek_next>
   12a48:	4603      	mov	r3, r0
   12a4a:	2b00      	cmp	r3, #0
   12a4c:	d005      	beq.n	12a5a <net_arp_clear_cache+0x166>
   12a4e:	69bb      	ldr	r3, [r7, #24]
   12a50:	4618      	mov	r0, r3
   12a52:	f00f f9f9 	bl	21e48 <sys_slist_peek_next>
   12a56:	4603      	mov	r3, r0
   12a58:	e002      	b.n	12a60 <net_arp_clear_cache+0x16c>
   12a5a:	2300      	movs	r3, #0
   12a5c:	e000      	b.n	12a60 <net_arp_clear_cache+0x16c>
   12a5e:	2300      	movs	r3, #0
   12a60:	617b      	str	r3, [r7, #20]
   12a62:	69bb      	ldr	r3, [r7, #24]
   12a64:	2b00      	cmp	r3, #0
   12a66:	d1cc      	bne.n	12a02 <net_arp_clear_cache+0x10e>
	}

	if (sys_slist_is_empty(&arp_pending_entries)) {
   12a68:	4808      	ldr	r0, [pc, #32]	; (12a8c <net_arp_clear_cache+0x198>)
   12a6a:	f00f f9d0 	bl	21e0e <sys_slist_is_empty>
   12a6e:	4603      	mov	r3, r0
   12a70:	2b00      	cmp	r3, #0
   12a72:	d002      	beq.n	12a7a <net_arp_clear_cache+0x186>
		k_delayed_work_cancel(&arp_request_timer);
   12a74:	4806      	ldr	r0, [pc, #24]	; (12a90 <net_arp_clear_cache+0x19c>)
   12a76:	f005 fbd3 	bl	18220 <k_delayed_work_cancel>
	}
}
   12a7a:	bf00      	nop
   12a7c:	3720      	adds	r7, #32
   12a7e:	46bd      	mov	sp, r7
   12a80:	bd80      	pop	{r7, pc}
   12a82:	bf00      	nop
   12a84:	20003d60 	.word	0x20003d60
   12a88:	20003d50 	.word	0x20003d50
   12a8c:	20003d58 	.word	0x20003d58
   12a90:	20003d68 	.word	0x20003d68

00012a94 <net_arp_init>:

	return ret;
}

void net_arp_init(void)
{
   12a94:	b580      	push	{r7, lr}
   12a96:	b082      	sub	sp, #8
   12a98:	af00      	add	r7, sp, #0
	int i;

	if (arp_cache_initialized) {
   12a9a:	4b15      	ldr	r3, [pc, #84]	; (12af0 <net_arp_init+0x5c>)
   12a9c:	781b      	ldrb	r3, [r3, #0]
   12a9e:	2b00      	cmp	r3, #0
   12aa0:	d121      	bne.n	12ae6 <net_arp_init+0x52>
		return;
	}

	sys_slist_init(&arp_free_entries);
   12aa2:	4814      	ldr	r0, [pc, #80]	; (12af4 <net_arp_init+0x60>)
   12aa4:	f00f f95c 	bl	21d60 <sys_slist_init>
	sys_slist_init(&arp_pending_entries);
   12aa8:	4813      	ldr	r0, [pc, #76]	; (12af8 <net_arp_init+0x64>)
   12aaa:	f00f f959 	bl	21d60 <sys_slist_init>
	sys_slist_init(&arp_table);
   12aae:	4813      	ldr	r0, [pc, #76]	; (12afc <net_arp_init+0x68>)
   12ab0:	f00f f956 	bl	21d60 <sys_slist_init>

	for (i = 0; i < CONFIG_NET_ARP_TABLE_SIZE; i++) {
   12ab4:	2300      	movs	r3, #0
   12ab6:	607b      	str	r3, [r7, #4]
   12ab8:	e00a      	b.n	12ad0 <net_arp_init+0x3c>
		/* Inserting entry as free */
		sys_slist_prepend(&arp_free_entries, &arp_entries[i].node);
   12aba:	687b      	ldr	r3, [r7, #4]
   12abc:	015b      	lsls	r3, r3, #5
   12abe:	4a10      	ldr	r2, [pc, #64]	; (12b00 <net_arp_init+0x6c>)
   12ac0:	4413      	add	r3, r2
   12ac2:	4619      	mov	r1, r3
   12ac4:	480b      	ldr	r0, [pc, #44]	; (12af4 <net_arp_init+0x60>)
   12ac6:	f00f f9d0 	bl	21e6a <sys_slist_prepend>
	for (i = 0; i < CONFIG_NET_ARP_TABLE_SIZE; i++) {
   12aca:	687b      	ldr	r3, [r7, #4]
   12acc:	3301      	adds	r3, #1
   12ace:	607b      	str	r3, [r7, #4]
   12ad0:	687b      	ldr	r3, [r7, #4]
   12ad2:	2b01      	cmp	r3, #1
   12ad4:	ddf1      	ble.n	12aba <net_arp_init+0x26>
	}

	k_delayed_work_init(&arp_request_timer, arp_request_timeout);
   12ad6:	490b      	ldr	r1, [pc, #44]	; (12b04 <net_arp_init+0x70>)
   12ad8:	480b      	ldr	r0, [pc, #44]	; (12b08 <net_arp_init+0x74>)
   12ada:	f005 fa89 	bl	17ff0 <k_delayed_work_init>

	arp_cache_initialized = true;
   12ade:	4b04      	ldr	r3, [pc, #16]	; (12af0 <net_arp_init+0x5c>)
   12ae0:	2201      	movs	r2, #1
   12ae2:	701a      	strb	r2, [r3, #0]
   12ae4:	e000      	b.n	12ae8 <net_arp_init+0x54>
		return;
   12ae6:	bf00      	nop
}
   12ae8:	3708      	adds	r7, #8
   12aea:	46bd      	mov	sp, r7
   12aec:	bd80      	pop	{r7, pc}
   12aee:	bf00      	nop
   12af0:	20006249 	.word	0x20006249
   12af4:	20003d50 	.word	0x20003d50
   12af8:	20003d58 	.word	0x20003d58
   12afc:	20003d60 	.word	0x20003d60
   12b00:	20002010 	.word	0x20002010
   12b04:	000126c9 	.word	0x000126c9
   12b08:	20003d68 	.word	0x20003d68

00012b0c <net_eth_broadcast_addr>:

static const struct net_eth_addr broadcast_eth_addr = {
	{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } };

const struct net_eth_addr *net_eth_broadcast_addr(void)
{
   12b0c:	b480      	push	{r7}
   12b0e:	af00      	add	r7, sp, #0
	return &broadcast_eth_addr;
   12b10:	4b02      	ldr	r3, [pc, #8]	; (12b1c <net_eth_broadcast_addr+0x10>)
}
   12b12:	4618      	mov	r0, r3
   12b14:	46bd      	mov	sp, r7
   12b16:	bc80      	pop	{r7}
   12b18:	4770      	bx	lr
   12b1a:	bf00      	nop
   12b1c:	0002ef38 	.word	0x0002ef38

00012b20 <ethernet_send>:

	net_pkt_frag_unref(buf);
}

static int ethernet_send(struct net_if *iface, struct net_pkt *pkt)
{
   12b20:	b590      	push	{r4, r7, lr}
   12b22:	b089      	sub	sp, #36	; 0x24
   12b24:	af00      	add	r7, sp, #0
   12b26:	6078      	str	r0, [r7, #4]
   12b28:	6039      	str	r1, [r7, #0]
	const struct ethernet_api *api = net_if_get_device(iface)->driver_api;
   12b2a:	6878      	ldr	r0, [r7, #4]
   12b2c:	f010 f8b0 	bl	22c90 <net_if_get_device>
   12b30:	4603      	mov	r3, r0
   12b32:	685b      	ldr	r3, [r3, #4]
   12b34:	617b      	str	r3, [r7, #20]
	struct ethernet_context *ctx = net_if_l2_data(iface);
   12b36:	6878      	ldr	r0, [r7, #4]
   12b38:	f010 f89e 	bl	22c78 <net_if_l2_data>
   12b3c:	6138      	str	r0, [r7, #16]
	u16_t ptype;
	int ret;

	if (IS_ENABLED(CONFIG_NET_IPV4) &&
	    net_pkt_family(pkt) == AF_INET) {
   12b3e:	6838      	ldr	r0, [r7, #0]
   12b40:	f010 f8c9 	bl	22cd6 <net_pkt_family>
   12b44:	4603      	mov	r3, r0
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
   12b46:	2b01      	cmp	r3, #1
   12b48:	d126      	bne.n	12b98 <ethernet_send+0x78>
		struct net_pkt *tmp;

		if (net_pkt_ipv4_auto(pkt)) {
   12b4a:	6838      	ldr	r0, [r7, #0]
   12b4c:	f010 f92f 	bl	22dae <net_pkt_ipv4_auto>
   12b50:	4603      	mov	r3, r0
   12b52:	2b00      	cmp	r3, #0
   12b54:	d003      	beq.n	12b5e <ethernet_send+0x3e>
			ptype = htons(NET_ETH_PTYPE_ARP);
   12b56:	f44f 63c1 	mov.w	r3, #1544	; 0x608
   12b5a:	83fb      	strh	r3, [r7, #30]
   12b5c:	e023      	b.n	12ba6 <ethernet_send+0x86>
		} else {
			tmp = ethernet_ll_prepare_on_ipv4(iface, pkt);
   12b5e:	6839      	ldr	r1, [r7, #0]
   12b60:	6878      	ldr	r0, [r7, #4]
   12b62:	f010 fb91 	bl	23288 <ethernet_ll_prepare_on_ipv4>
   12b66:	60f8      	str	r0, [r7, #12]
			if (!tmp) {
   12b68:	68fb      	ldr	r3, [r7, #12]
   12b6a:	2b00      	cmp	r3, #0
   12b6c:	d103      	bne.n	12b76 <ethernet_send+0x56>
				ret = -ENOMEM;
   12b6e:	f06f 030b 	mvn.w	r3, #11
   12b72:	61bb      	str	r3, [r7, #24]
				goto error;
   12b74:	e056      	b.n	12c24 <ethernet_send+0x104>
			} else if (IS_ENABLED(CONFIG_NET_ARP) && tmp != pkt) {
   12b76:	68fa      	ldr	r2, [r7, #12]
   12b78:	683b      	ldr	r3, [r7, #0]
   12b7a:	429a      	cmp	r2, r3
   12b7c:	d009      	beq.n	12b92 <ethernet_send+0x72>
				/* Original pkt got queued and is replaced
				 * by an ARP request packet.
				 */
				pkt = tmp;
   12b7e:	68fb      	ldr	r3, [r7, #12]
   12b80:	603b      	str	r3, [r7, #0]
				ptype = htons(NET_ETH_PTYPE_ARP);
   12b82:	f44f 63c1 	mov.w	r3, #1544	; 0x608
   12b86:	83fb      	strh	r3, [r7, #30]
				net_pkt_set_family(pkt, AF_INET);
   12b88:	2101      	movs	r1, #1
   12b8a:	6838      	ldr	r0, [r7, #0]
   12b8c:	f010 f8b2 	bl	22cf4 <net_pkt_set_family>
   12b90:	e009      	b.n	12ba6 <ethernet_send+0x86>
			} else {
				ptype = htons(NET_ETH_PTYPE_IP);
   12b92:	2308      	movs	r3, #8
   12b94:	83fb      	strh	r3, [r7, #30]
   12b96:	e006      	b.n	12ba6 <ethernet_send+0x86>
	} else if (IS_ENABLED(CONFIG_NET_LLDP) && net_pkt_is_lldp(pkt)) {
		ptype = htons(NET_ETH_PTYPE_LLDP);
	} else if (IS_ENABLED(CONFIG_NET_ARP)) {
		/* Unktown type: Unqueued pkt is an ARP reply.
		 */
		ptype = htons(NET_ETH_PTYPE_ARP);
   12b98:	f44f 63c1 	mov.w	r3, #1544	; 0x608
   12b9c:	83fb      	strh	r3, [r7, #30]
		net_pkt_set_family(pkt, AF_INET);
   12b9e:	2101      	movs	r1, #1
   12ba0:	6838      	ldr	r0, [r7, #0]
   12ba2:	f010 f8a7 	bl	22cf4 <net_pkt_set_family>

	/* If the ll dst addr has not been set before, let's assume
	 * temporarly it's a broadcast one. When filling the header,
	 * it might detect this should be multicast and act accordingly.
	 */
	if (!net_pkt_lladdr_dst(pkt)->addr) {
   12ba6:	6838      	ldr	r0, [r7, #0]
   12ba8:	f010 f8f6 	bl	22d98 <net_pkt_lladdr_dst>
   12bac:	4603      	mov	r3, r0
   12bae:	681b      	ldr	r3, [r3, #0]
   12bb0:	2b00      	cmp	r3, #0
   12bb2:	d10b      	bne.n	12bcc <ethernet_send+0xac>
		net_pkt_lladdr_dst(pkt)->addr = (u8_t *)broadcast_eth_addr.addr;
   12bb4:	6838      	ldr	r0, [r7, #0]
   12bb6:	f010 f8ef 	bl	22d98 <net_pkt_lladdr_dst>
   12bba:	4602      	mov	r2, r0
   12bbc:	4b1c      	ldr	r3, [pc, #112]	; (12c30 <ethernet_send+0x110>)
   12bbe:	6013      	str	r3, [r2, #0]
		net_pkt_lladdr_dst(pkt)->len = sizeof(struct net_eth_addr);
   12bc0:	6838      	ldr	r0, [r7, #0]
   12bc2:	f010 f8e9 	bl	22d98 <net_pkt_lladdr_dst>
   12bc6:	4603      	mov	r3, r0
   12bc8:	2206      	movs	r2, #6
   12bca:	711a      	strb	r2, [r3, #4]
		set_vlan_priority(ctx, pkt);
	}

	/* Then set the ethernet header.
	 */
	if (!ethernet_fill_header(ctx, pkt, ptype)) {
   12bcc:	8bfb      	ldrh	r3, [r7, #30]
   12bce:	461a      	mov	r2, r3
   12bd0:	6839      	ldr	r1, [r7, #0]
   12bd2:	6938      	ldr	r0, [r7, #16]
   12bd4:	f010 fb8d 	bl	232f2 <ethernet_fill_header>
   12bd8:	4603      	mov	r3, r0
   12bda:	2b00      	cmp	r3, #0
   12bdc:	d103      	bne.n	12be6 <ethernet_send+0xc6>
		ret = -ENOMEM;
   12bde:	f06f 030b 	mvn.w	r3, #11
   12be2:	61bb      	str	r3, [r7, #24]
		goto error;
   12be4:	e01e      	b.n	12c24 <ethernet_send+0x104>
	}

	net_pkt_cursor_init(pkt);
   12be6:	6838      	ldr	r0, [r7, #0]
   12be8:	f013 f968 	bl	25ebc <net_pkt_cursor_init>

send:
	ret = api->send(net_if_get_device(iface), pkt);
   12bec:	697b      	ldr	r3, [r7, #20]
   12bee:	699c      	ldr	r4, [r3, #24]
   12bf0:	6878      	ldr	r0, [r7, #4]
   12bf2:	f010 f84d 	bl	22c90 <net_if_get_device>
   12bf6:	4603      	mov	r3, r0
   12bf8:	6839      	ldr	r1, [r7, #0]
   12bfa:	4618      	mov	r0, r3
   12bfc:	47a0      	blx	r4
   12bfe:	61b8      	str	r0, [r7, #24]
	if (ret != 0) {
   12c00:	69bb      	ldr	r3, [r7, #24]
   12c02:	2b00      	cmp	r3, #0
   12c04:	d003      	beq.n	12c0e <ethernet_send+0xee>
		eth_stats_update_errors_tx(iface);
		ethernet_remove_l2_header(pkt);
   12c06:	6838      	ldr	r0, [r7, #0]
   12c08:	f010 fbbb 	bl	23382 <ethernet_remove_l2_header>
		goto error;
   12c0c:	e00a      	b.n	12c24 <ethernet_send+0x104>
	}
#if defined(CONFIG_NET_STATISTICS_ETHERNET)
	ethernet_update_tx_stats(iface, pkt);
#endif
	ret = net_pkt_get_len(pkt);
   12c0e:	6838      	ldr	r0, [r7, #0]
   12c10:	f010 f891 	bl	22d36 <net_pkt_get_len>
   12c14:	4603      	mov	r3, r0
   12c16:	61bb      	str	r3, [r7, #24]
	ethernet_remove_l2_header(pkt);
   12c18:	6838      	ldr	r0, [r7, #0]
   12c1a:	f010 fbb2 	bl	23382 <ethernet_remove_l2_header>

	net_pkt_unref(pkt);
   12c1e:	6838      	ldr	r0, [r7, #0]
   12c20:	f012 fef3 	bl	25a0a <net_pkt_unref>
error:
	return ret;
   12c24:	69bb      	ldr	r3, [r7, #24]
}
   12c26:	4618      	mov	r0, r3
   12c28:	3724      	adds	r7, #36	; 0x24
   12c2a:	46bd      	mov	sp, r7
   12c2c:	bd90      	pop	{r4, r7, pc}
   12c2e:	bf00      	nop
   12c30:	0002ef38 	.word	0x0002ef38

00012c34 <check_used_port>:
#if defined(CONFIG_NET_UDP) || defined(CONFIG_NET_TCP)
static int check_used_port(enum net_ip_protocol ip_proto,
			   u16_t local_port,
			   const struct sockaddr *local_addr)

{
   12c34:	b580      	push	{r7, lr}
   12c36:	b084      	sub	sp, #16
   12c38:	af00      	add	r7, sp, #0
   12c3a:	4603      	mov	r3, r0
   12c3c:	603a      	str	r2, [r7, #0]
   12c3e:	71fb      	strb	r3, [r7, #7]
   12c40:	460b      	mov	r3, r1
   12c42:	80bb      	strh	r3, [r7, #4]
	int i;

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   12c44:	2300      	movs	r3, #0
   12c46:	60fb      	str	r3, [r7, #12]
   12c48:	e06e      	b.n	12d28 <check_used_port+0xf4>
		if (!net_context_is_used(&contexts[i])) {
   12c4a:	68fa      	ldr	r2, [r7, #12]
   12c4c:	4613      	mov	r3, r2
   12c4e:	00db      	lsls	r3, r3, #3
   12c50:	1a9b      	subs	r3, r3, r2
   12c52:	011b      	lsls	r3, r3, #4
   12c54:	4a38      	ldr	r2, [pc, #224]	; (12d38 <check_used_port+0x104>)
   12c56:	4413      	add	r3, r2
   12c58:	4618      	mov	r0, r3
   12c5a:	f010 fd66 	bl	2372a <net_context_is_used>
   12c5e:	4603      	mov	r3, r0
   12c60:	f083 0301 	eor.w	r3, r3, #1
   12c64:	b2db      	uxtb	r3, r3
   12c66:	2b00      	cmp	r3, #0
   12c68:	d158      	bne.n	12d1c <check_used_port+0xe8>
			continue;
		}

		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   12c6a:	68fa      	ldr	r2, [r7, #12]
   12c6c:	4613      	mov	r3, r2
   12c6e:	00db      	lsls	r3, r3, #3
   12c70:	1a9b      	subs	r3, r3, r2
   12c72:	011b      	lsls	r3, r3, #4
   12c74:	4a30      	ldr	r2, [pc, #192]	; (12d38 <check_used_port+0x104>)
   12c76:	4413      	add	r3, r2
   12c78:	4618      	mov	r0, r3
   12c7a:	f010 fe0d 	bl	23898 <net_context_get_ip_proto>
   12c7e:	4603      	mov	r3, r0
   12c80:	461a      	mov	r2, r3
   12c82:	79fb      	ldrb	r3, [r7, #7]
   12c84:	b29b      	uxth	r3, r3
   12c86:	429a      	cmp	r2, r3
   12c88:	d14a      	bne.n	12d20 <check_used_port+0xec>
		      net_sin((struct sockaddr *)&
   12c8a:	68fa      	ldr	r2, [r7, #12]
   12c8c:	4613      	mov	r3, r2
   12c8e:	00db      	lsls	r3, r3, #3
   12c90:	1a9b      	subs	r3, r3, r2
   12c92:	011b      	lsls	r3, r3, #4
   12c94:	3318      	adds	r3, #24
   12c96:	4a28      	ldr	r2, [pc, #160]	; (12d38 <check_used_port+0x104>)
   12c98:	4413      	add	r3, r2
   12c9a:	3304      	adds	r3, #4
   12c9c:	4618      	mov	r0, r3
   12c9e:	f010 fd26 	bl	236ee <net_sin>
   12ca2:	4603      	mov	r3, r0
			      contexts[i].local)->sin_port == local_port)) {
   12ca4:	885b      	ldrh	r3, [r3, #2]
		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   12ca6:	88ba      	ldrh	r2, [r7, #4]
   12ca8:	429a      	cmp	r2, r3
   12caa:	d139      	bne.n	12d20 <check_used_port+0xec>
			continue;
		}

		if (local_addr->sa_family == AF_INET6) {
   12cac:	683b      	ldr	r3, [r7, #0]
   12cae:	881b      	ldrh	r3, [r3, #0]
   12cb0:	2b02      	cmp	r3, #2
   12cb2:	d119      	bne.n	12ce8 <check_used_port+0xb4>
			if (net_ipv6_addr_cmp(
				    net_sin6_ptr(&contexts[i].local)->
   12cb4:	68fa      	ldr	r2, [r7, #12]
   12cb6:	4613      	mov	r3, r2
   12cb8:	00db      	lsls	r3, r3, #3
   12cba:	1a9b      	subs	r3, r3, r2
   12cbc:	011b      	lsls	r3, r3, #4
   12cbe:	3318      	adds	r3, #24
   12cc0:	4a1d      	ldr	r2, [pc, #116]	; (12d38 <check_used_port+0x104>)
   12cc2:	4413      	add	r3, r2
   12cc4:	3304      	adds	r3, #4
   12cc6:	4618      	mov	r0, r3
   12cc8:	f010 fd1b 	bl	23702 <net_sin6_ptr>
   12ccc:	4603      	mov	r3, r0
   12cce:	685a      	ldr	r2, [r3, #4]
							     sin6_addr,
				    &((struct sockaddr_in6 *)
   12cd0:	683b      	ldr	r3, [r7, #0]
   12cd2:	3304      	adds	r3, #4
			if (net_ipv6_addr_cmp(
   12cd4:	4619      	mov	r1, r3
   12cd6:	4610      	mov	r0, r2
   12cd8:	f010 fcf5 	bl	236c6 <net_ipv6_addr_cmp>
   12cdc:	4603      	mov	r3, r0
   12cde:	2b00      	cmp	r3, #0
   12ce0:	d01f      	beq.n	12d22 <check_used_port+0xee>
				      local_addr)->sin6_addr)) {
				return -EEXIST;
   12ce2:	f06f 0310 	mvn.w	r3, #16
   12ce6:	e023      	b.n	12d30 <check_used_port+0xfc>
			}
		} else {
			if (net_ipv4_addr_cmp(
				    net_sin_ptr(&contexts[i].local)->
   12ce8:	68fa      	ldr	r2, [r7, #12]
   12cea:	4613      	mov	r3, r2
   12cec:	00db      	lsls	r3, r3, #3
   12cee:	1a9b      	subs	r3, r3, r2
   12cf0:	011b      	lsls	r3, r3, #4
   12cf2:	3318      	adds	r3, #24
   12cf4:	4a10      	ldr	r2, [pc, #64]	; (12d38 <check_used_port+0x104>)
   12cf6:	4413      	add	r3, r2
   12cf8:	3304      	adds	r3, #4
   12cfa:	4618      	mov	r0, r3
   12cfc:	f010 fd0b 	bl	23716 <net_sin_ptr>
   12d00:	4603      	mov	r3, r0
   12d02:	685a      	ldr	r2, [r3, #4]
							      sin_addr,
				    &((struct sockaddr_in *)
   12d04:	683b      	ldr	r3, [r7, #0]
   12d06:	3304      	adds	r3, #4
			if (net_ipv4_addr_cmp(
   12d08:	4619      	mov	r1, r3
   12d0a:	4610      	mov	r0, r2
   12d0c:	f010 fcc4 	bl	23698 <net_ipv4_addr_cmp>
   12d10:	4603      	mov	r3, r0
   12d12:	2b00      	cmp	r3, #0
   12d14:	d005      	beq.n	12d22 <check_used_port+0xee>
				      local_addr)->sin_addr)) {
				return -EEXIST;
   12d16:	f06f 0310 	mvn.w	r3, #16
   12d1a:	e009      	b.n	12d30 <check_used_port+0xfc>
			continue;
   12d1c:	bf00      	nop
   12d1e:	e000      	b.n	12d22 <check_used_port+0xee>
			continue;
   12d20:	bf00      	nop
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   12d22:	68fb      	ldr	r3, [r7, #12]
   12d24:	3301      	adds	r3, #1
   12d26:	60fb      	str	r3, [r7, #12]
   12d28:	68fb      	ldr	r3, [r7, #12]
   12d2a:	2b05      	cmp	r3, #5
   12d2c:	dd8d      	ble.n	12c4a <check_used_port+0x16>
			}
		}
	}

	return 0;
   12d2e:	2300      	movs	r3, #0
}
   12d30:	4618      	mov	r0, r3
   12d32:	3710      	adds	r7, #16
   12d34:	46bd      	mov	sp, r7
   12d36:	bd80      	pop	{r7, pc}
   12d38:	20003d88 	.word	0x20003d88

00012d3c <net_context_get>:

int net_context_get(sa_family_t family,
		    enum net_sock_type type,
		    u16_t ip_proto,
		    struct net_context **context)
{
   12d3c:	b580      	push	{r7, lr}
   12d3e:	b088      	sub	sp, #32
   12d40:	af00      	add	r7, sp, #0
   12d42:	607b      	str	r3, [r7, #4]
   12d44:	4603      	mov	r3, r0
   12d46:	81fb      	strh	r3, [r7, #14]
   12d48:	460b      	mov	r3, r1
   12d4a:	737b      	strb	r3, [r7, #13]
   12d4c:	4613      	mov	r3, r2
   12d4e:	817b      	strh	r3, [r7, #10]
	int i, ret = -ENOENT;
   12d50:	f06f 0301 	mvn.w	r3, #1
   12d54:	61bb      	str	r3, [r7, #24]
		return -EPFNOSUPPORT;
	}
#endif

#if !defined(CONFIG_NET_IPV6)
	if (family == AF_INET6) {
   12d56:	89fb      	ldrh	r3, [r7, #14]
   12d58:	2b02      	cmp	r3, #2
   12d5a:	d102      	bne.n	12d62 <net_context_get+0x26>
		NET_ASSERT_INFO(family != AF_INET6, "IPv6 disabled");
		return -EPFNOSUPPORT;
   12d5c:	f06f 035f 	mvn.w	r3, #95	; 0x5f
   12d60:	e159      	b.n	13016 <net_context_get+0x2da>
	}
#endif

	if (!IS_ENABLED(CONFIG_NET_SOCKETS_CAN) && family == AF_CAN) {
   12d62:	89fb      	ldrh	r3, [r7, #14]
   12d64:	2b04      	cmp	r3, #4
   12d66:	d102      	bne.n	12d6e <net_context_get+0x32>
		NET_ASSERT_INFO((family != AF_CAN), "AF_CAN disabled");
		return -EPFNOSUPPORT;
   12d68:	f06f 035f 	mvn.w	r3, #95	; 0x5f
   12d6c:	e153      	b.n	13016 <net_context_get+0x2da>
	}

	if (type == SOCK_RAW) {
   12d6e:	7b7b      	ldrb	r3, [r7, #13]
   12d70:	2b03      	cmp	r3, #3
   12d72:	d008      	beq.n	12d86 <net_context_get+0x4a>
			if (family != AF_CAN) {
				return -EINVAL;
			}
		}
	} else {
		if (family == AF_PACKET || family == AF_CAN) {
   12d74:	89fb      	ldrh	r3, [r7, #14]
   12d76:	2b03      	cmp	r3, #3
   12d78:	d002      	beq.n	12d80 <net_context_get+0x44>
   12d7a:	89fb      	ldrh	r3, [r7, #14]
   12d7c:	2b04      	cmp	r3, #4
   12d7e:	d102      	bne.n	12d86 <net_context_get+0x4a>
			return -EPROTOTYPE;
   12d80:	f06f 036a 	mvn.w	r3, #106	; 0x6a
   12d84:	e147      	b.n	13016 <net_context_get+0x2da>
		return -EPROTONOSUPPORT;
	}
#endif

#if !defined(CONFIG_NET_TCP)
	if (type == SOCK_STREAM) {
   12d86:	7b7b      	ldrb	r3, [r7, #13]
   12d88:	2b01      	cmp	r3, #1
   12d8a:	d102      	bne.n	12d92 <net_context_get+0x56>
		NET_ASSERT_INFO(type != SOCK_STREAM,
				"Stream context disabled");
		return -EPROTOTYPE;
   12d8c:	f06f 036a 	mvn.w	r3, #106	; 0x6a
   12d90:	e141      	b.n	13016 <net_context_get+0x2da>
	}

	if (ip_proto == IPPROTO_TCP) {
   12d92:	897b      	ldrh	r3, [r7, #10]
   12d94:	2b06      	cmp	r3, #6
   12d96:	d102      	bne.n	12d9e <net_context_get+0x62>
		NET_ASSERT_INFO(ip_proto != IPPROTO_TCP, "TCP disabled");
		return -EPROTONOSUPPORT;
   12d98:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   12d9c:	e13b      	b.n	13016 <net_context_get+0x2da>
	}
#endif

	if (family != AF_INET && family != AF_INET6 && family != AF_PACKET &&
   12d9e:	89fb      	ldrh	r3, [r7, #14]
   12da0:	2b01      	cmp	r3, #1
   12da2:	d00b      	beq.n	12dbc <net_context_get+0x80>
   12da4:	89fb      	ldrh	r3, [r7, #14]
   12da6:	2b02      	cmp	r3, #2
   12da8:	d008      	beq.n	12dbc <net_context_get+0x80>
   12daa:	89fb      	ldrh	r3, [r7, #14]
   12dac:	2b03      	cmp	r3, #3
   12dae:	d005      	beq.n	12dbc <net_context_get+0x80>
   12db0:	89fb      	ldrh	r3, [r7, #14]
   12db2:	2b04      	cmp	r3, #4
   12db4:	d002      	beq.n	12dbc <net_context_get+0x80>
	    family != AF_CAN) {
		NET_ASSERT_INFO(family == AF_INET || family == AF_INET6 ||
				family == AF_PACKET || family == AF_CAN,
				"Unknown address family %d", family);
		return -EAFNOSUPPORT;
   12db6:	f06f 0369 	mvn.w	r3, #105	; 0x69
   12dba:	e12c      	b.n	13016 <net_context_get+0x2da>
	}

	if (type != SOCK_DGRAM && type != SOCK_STREAM && type != SOCK_RAW) {
   12dbc:	7b7b      	ldrb	r3, [r7, #13]
   12dbe:	2b02      	cmp	r3, #2
   12dc0:	d008      	beq.n	12dd4 <net_context_get+0x98>
   12dc2:	7b7b      	ldrb	r3, [r7, #13]
   12dc4:	2b01      	cmp	r3, #1
   12dc6:	d005      	beq.n	12dd4 <net_context_get+0x98>
   12dc8:	7b7b      	ldrb	r3, [r7, #13]
   12dca:	2b03      	cmp	r3, #3
   12dcc:	d002      	beq.n	12dd4 <net_context_get+0x98>
		NET_ASSERT_INFO(type == SOCK_DGRAM || type == SOCK_STREAM ||
				type == SOCK_RAW,
				"Unknown context type");
		return -EPROTOTYPE;
   12dce:	f06f 036a 	mvn.w	r3, #106	; 0x6a
   12dd2:	e120      	b.n	13016 <net_context_get+0x2da>
	}

	if (type != SOCK_RAW && ip_proto != IPPROTO_UDP &&
   12dd4:	7b7b      	ldrb	r3, [r7, #13]
   12dd6:	2b03      	cmp	r3, #3
   12dd8:	d008      	beq.n	12dec <net_context_get+0xb0>
   12dda:	897b      	ldrh	r3, [r7, #10]
   12ddc:	2b11      	cmp	r3, #17
   12dde:	d005      	beq.n	12dec <net_context_get+0xb0>
   12de0:	897b      	ldrh	r3, [r7, #10]
   12de2:	2b06      	cmp	r3, #6
   12de4:	d002      	beq.n	12dec <net_context_get+0xb0>
	    ip_proto != IPPROTO_TCP) {
		NET_ASSERT_INFO(ip_proto == IPPROTO_UDP ||
				ip_proto == IPPROTO_TCP,
				"Unknown IP protocol %d", ip_proto);
		return -EPROTONOSUPPORT;
   12de6:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   12dea:	e114      	b.n	13016 <net_context_get+0x2da>
	}

	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   12dec:	7b7b      	ldrb	r3, [r7, #13]
   12dee:	2b01      	cmp	r3, #1
   12df0:	d102      	bne.n	12df8 <net_context_get+0xbc>
   12df2:	897b      	ldrh	r3, [r7, #10]
   12df4:	2b11      	cmp	r3, #17
   12df6:	d005      	beq.n	12e04 <net_context_get+0xc8>
   12df8:	7b7b      	ldrb	r3, [r7, #13]
   12dfa:	2b02      	cmp	r3, #2
   12dfc:	d105      	bne.n	12e0a <net_context_get+0xce>
	    (type == SOCK_DGRAM && ip_proto == IPPROTO_TCP)) {
   12dfe:	897b      	ldrh	r3, [r7, #10]
   12e00:	2b06      	cmp	r3, #6
   12e02:	d102      	bne.n	12e0a <net_context_get+0xce>
		NET_ASSERT_INFO(\
			(type != SOCK_STREAM || ip_proto != IPPROTO_UDP) &&
			(type != SOCK_DGRAM || ip_proto != IPPROTO_TCP),
			"Context type and protocol mismatch, type %d proto %d",
			type, ip_proto);
		return -EOPNOTSUPP;
   12e04:	f06f 035e 	mvn.w	r3, #94	; 0x5e
   12e08:	e105      	b.n	13016 <net_context_get+0x2da>
	}

	if (!context) {
   12e0a:	687b      	ldr	r3, [r7, #4]
   12e0c:	2b00      	cmp	r3, #0
   12e0e:	d102      	bne.n	12e16 <net_context_get+0xda>
		NET_ASSERT_INFO(context, "Invalid context");
		return -EINVAL;
   12e10:	f06f 0315 	mvn.w	r3, #21
   12e14:	e0ff      	b.n	13016 <net_context_get+0x2da>
	}
#endif /* CONFIG_NET_CONTEXT_CHECK */

	k_sem_take(&contexts_lock, K_FOREVER);
   12e16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12e1a:	4881      	ldr	r0, [pc, #516]	; (13020 <net_context_get+0x2e4>)
   12e1c:	f010 fbd9 	bl	235d2 <k_sem_take>

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   12e20:	2300      	movs	r3, #0
   12e22:	61fb      	str	r3, [r7, #28]
   12e24:	e0ed      	b.n	13002 <net_context_get+0x2c6>
		if (net_context_is_used(&contexts[i])) {
   12e26:	69fa      	ldr	r2, [r7, #28]
   12e28:	4613      	mov	r3, r2
   12e2a:	00db      	lsls	r3, r3, #3
   12e2c:	1a9b      	subs	r3, r3, r2
   12e2e:	011b      	lsls	r3, r3, #4
   12e30:	4a7c      	ldr	r2, [pc, #496]	; (13024 <net_context_get+0x2e8>)
   12e32:	4413      	add	r3, r2
   12e34:	4618      	mov	r0, r3
   12e36:	f010 fc78 	bl	2372a <net_context_is_used>
   12e3a:	4603      	mov	r3, r0
   12e3c:	2b00      	cmp	r3, #0
   12e3e:	d003      	beq.n	12e48 <net_context_get+0x10c>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   12e40:	69fb      	ldr	r3, [r7, #28]
   12e42:	3301      	adds	r3, #1
   12e44:	61fb      	str	r3, [r7, #28]
   12e46:	e0dc      	b.n	13002 <net_context_get+0x2c6>
			continue;
		}

		memset(&contexts[i], 0, sizeof(contexts[i]));
   12e48:	69fa      	ldr	r2, [r7, #28]
   12e4a:	4613      	mov	r3, r2
   12e4c:	00db      	lsls	r3, r3, #3
   12e4e:	1a9b      	subs	r3, r3, r2
   12e50:	011b      	lsls	r3, r3, #4
   12e52:	4a74      	ldr	r2, [pc, #464]	; (13024 <net_context_get+0x2e8>)
   12e54:	4413      	add	r3, r2
   12e56:	2270      	movs	r2, #112	; 0x70
   12e58:	2100      	movs	r1, #0
   12e5a:	4618      	mov	r0, r3
   12e5c:	f7ef f92c 	bl	20b8 <memset>

		if (ip_proto == IPPROTO_TCP) {
   12e60:	897b      	ldrh	r3, [r7, #10]
   12e62:	2b06      	cmp	r3, #6
   12e64:	d10d      	bne.n	12e82 <net_context_get+0x146>
			if (net_tcp_get(&contexts[i]) < 0) {
   12e66:	69fa      	ldr	r2, [r7, #28]
   12e68:	4613      	mov	r3, r2
   12e6a:	00db      	lsls	r3, r3, #3
   12e6c:	1a9b      	subs	r3, r3, r2
   12e6e:	011b      	lsls	r3, r3, #4
   12e70:	4a6c      	ldr	r2, [pc, #432]	; (13024 <net_context_get+0x2e8>)
   12e72:	4413      	add	r3, r2
   12e74:	4618      	mov	r0, r3
   12e76:	f010 fdac 	bl	239d2 <net_tcp_get>
   12e7a:	4603      	mov	r3, r0
   12e7c:	2b00      	cmp	r3, #0
   12e7e:	f2c0 80c5 	blt.w	1300c <net_context_get+0x2d0>
				break;
			}
		}

		contexts[i].iface = -1;
   12e82:	4968      	ldr	r1, [pc, #416]	; (13024 <net_context_get+0x2e8>)
   12e84:	69fa      	ldr	r2, [r7, #28]
   12e86:	4613      	mov	r3, r2
   12e88:	00db      	lsls	r3, r3, #3
   12e8a:	1a9b      	subs	r3, r3, r2
   12e8c:	011b      	lsls	r3, r3, #4
   12e8e:	440b      	add	r3, r1
   12e90:	336c      	adds	r3, #108	; 0x6c
   12e92:	22ff      	movs	r2, #255	; 0xff
   12e94:	701a      	strb	r2, [r3, #0]
		contexts[i].flags = 0U;
   12e96:	4963      	ldr	r1, [pc, #396]	; (13024 <net_context_get+0x2e8>)
   12e98:	69fa      	ldr	r2, [r7, #28]
   12e9a:	4613      	mov	r3, r2
   12e9c:	00db      	lsls	r3, r3, #3
   12e9e:	1a9b      	subs	r3, r3, r2
   12ea0:	011b      	lsls	r3, r3, #4
   12ea2:	440b      	add	r3, r1
   12ea4:	336a      	adds	r3, #106	; 0x6a
   12ea6:	2200      	movs	r2, #0
   12ea8:	801a      	strh	r2, [r3, #0]
		atomic_set(&contexts[i].refcount, 1);
   12eaa:	69fa      	ldr	r2, [r7, #28]
   12eac:	4613      	mov	r3, r2
   12eae:	00db      	lsls	r3, r3, #3
   12eb0:	1a9b      	subs	r3, r3, r2
   12eb2:	011b      	lsls	r3, r3, #4
   12eb4:	4a5b      	ldr	r2, [pc, #364]	; (13024 <net_context_get+0x2e8>)
   12eb6:	4413      	add	r3, r2
   12eb8:	3304      	adds	r3, #4
   12eba:	2101      	movs	r1, #1
   12ebc:	4618      	mov	r0, r3
   12ebe:	f010 fb2b 	bl	23518 <atomic_set>

		net_context_set_family(&contexts[i], family);
   12ec2:	69fa      	ldr	r2, [r7, #28]
   12ec4:	4613      	mov	r3, r2
   12ec6:	00db      	lsls	r3, r3, #3
   12ec8:	1a9b      	subs	r3, r3, r2
   12eca:	011b      	lsls	r3, r3, #4
   12ecc:	4a55      	ldr	r2, [pc, #340]	; (13024 <net_context_get+0x2e8>)
   12ece:	4413      	add	r3, r2
   12ed0:	89fa      	ldrh	r2, [r7, #14]
   12ed2:	4611      	mov	r1, r2
   12ed4:	4618      	mov	r0, r3
   12ed6:	f010 fc82 	bl	237de <net_context_set_family>
		net_context_set_type(&contexts[i], type);
   12eda:	69fa      	ldr	r2, [r7, #28]
   12edc:	4613      	mov	r3, r2
   12ede:	00db      	lsls	r3, r3, #3
   12ee0:	1a9b      	subs	r3, r3, r2
   12ee2:	011b      	lsls	r3, r3, #4
   12ee4:	4a4f      	ldr	r2, [pc, #316]	; (13024 <net_context_get+0x2e8>)
   12ee6:	4413      	add	r3, r2
   12ee8:	7b7a      	ldrb	r2, [r7, #13]
   12eea:	4611      	mov	r1, r2
   12eec:	4618      	mov	r0, r3
   12eee:	f010 fcb0 	bl	23852 <net_context_set_type>
		net_context_set_ip_proto(&contexts[i], ip_proto);
   12ef2:	69fa      	ldr	r2, [r7, #28]
   12ef4:	4613      	mov	r3, r2
   12ef6:	00db      	lsls	r3, r3, #3
   12ef8:	1a9b      	subs	r3, r3, r2
   12efa:	011b      	lsls	r3, r3, #4
   12efc:	4a49      	ldr	r2, [pc, #292]	; (13024 <net_context_get+0x2e8>)
   12efe:	4413      	add	r3, r2
   12f00:	897a      	ldrh	r2, [r7, #10]
   12f02:	4611      	mov	r1, r2
   12f04:	4618      	mov	r0, r3
   12f06:	f010 fcd3 	bl	238b0 <net_context_set_ip_proto>

#if defined(CONFIG_NET_IPV4) || defined(CONFIG_NET_IPV6)
		(void)memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
   12f0a:	69fa      	ldr	r2, [r7, #28]
   12f0c:	4613      	mov	r3, r2
   12f0e:	00db      	lsls	r3, r3, #3
   12f10:	1a9b      	subs	r3, r3, r2
   12f12:	011b      	lsls	r3, r3, #4
   12f14:	3320      	adds	r3, #32
   12f16:	4a43      	ldr	r2, [pc, #268]	; (13024 <net_context_get+0x2e8>)
   12f18:	4413      	add	r3, r2
   12f1a:	3304      	adds	r3, #4
   12f1c:	2208      	movs	r2, #8
   12f1e:	2100      	movs	r1, #0
   12f20:	4618      	mov	r0, r3
   12f22:	f7ef f8c9 	bl	20b8 <memset>
		(void)memset(&contexts[i].local, 0,
   12f26:	69fa      	ldr	r2, [r7, #28]
   12f28:	4613      	mov	r3, r2
   12f2a:	00db      	lsls	r3, r3, #3
   12f2c:	1a9b      	subs	r3, r3, r2
   12f2e:	011b      	lsls	r3, r3, #4
   12f30:	3318      	adds	r3, #24
   12f32:	4a3c      	ldr	r2, [pc, #240]	; (13024 <net_context_get+0x2e8>)
   12f34:	4413      	add	r3, r2
   12f36:	3304      	adds	r3, #4
   12f38:	2208      	movs	r2, #8
   12f3a:	2100      	movs	r1, #0
   12f3c:	4618      	mov	r0, r3
   12f3e:	f7ef f8bb 	bl	20b8 <memset>
			}
		}
#endif

#if defined(CONFIG_NET_IPV4)
		if (family == AF_INET) {
   12f42:	89fb      	ldrh	r3, [r7, #14]
   12f44:	2b01      	cmp	r3, #1
   12f46:	d120      	bne.n	12f8a <net_context_get+0x24e>
			struct sockaddr_in *addr = (struct sockaddr_in
   12f48:	69fa      	ldr	r2, [r7, #28]
   12f4a:	4613      	mov	r3, r2
   12f4c:	00db      	lsls	r3, r3, #3
   12f4e:	1a9b      	subs	r3, r3, r2
   12f50:	011b      	lsls	r3, r3, #4
   12f52:	3318      	adds	r3, #24
   12f54:	4a33      	ldr	r2, [pc, #204]	; (13024 <net_context_get+0x2e8>)
   12f56:	4413      	add	r3, r2
   12f58:	3304      	adds	r3, #4
   12f5a:	617b      	str	r3, [r7, #20]
						      *)&contexts[i].local;
			addr->sin_port = find_available_port(&contexts[i],
   12f5c:	69fa      	ldr	r2, [r7, #28]
   12f5e:	4613      	mov	r3, r2
   12f60:	00db      	lsls	r3, r3, #3
   12f62:	1a9b      	subs	r3, r3, r2
   12f64:	011b      	lsls	r3, r3, #4
   12f66:	4a2f      	ldr	r2, [pc, #188]	; (13024 <net_context_get+0x2e8>)
   12f68:	4413      	add	r3, r2
   12f6a:	6979      	ldr	r1, [r7, #20]
   12f6c:	4618      	mov	r0, r3
   12f6e:	f010 fd61 	bl	23a34 <find_available_port>
   12f72:	4603      	mov	r3, r0
   12f74:	461a      	mov	r2, r3
   12f76:	697b      	ldr	r3, [r7, #20]
   12f78:	805a      	strh	r2, [r3, #2]
						    (struct sockaddr *)addr);

			if (!addr->sin_port) {
   12f7a:	697b      	ldr	r3, [r7, #20]
   12f7c:	885b      	ldrh	r3, [r3, #2]
   12f7e:	2b00      	cmp	r3, #0
   12f80:	d103      	bne.n	12f8a <net_context_get+0x24e>
				ret = -EADDRINUSE;
   12f82:	f06f 036f 	mvn.w	r3, #111	; 0x6f
   12f86:	61bb      	str	r3, [r7, #24]
				break;
   12f88:	e041      	b.n	1300e <net_context_get+0x2d2>
			}
		}
#endif

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
		k_sem_init(&contexts[i].recv_data_wait, 1, UINT_MAX);
   12f8a:	69fa      	ldr	r2, [r7, #28]
   12f8c:	4613      	mov	r3, r2
   12f8e:	00db      	lsls	r3, r3, #3
   12f90:	1a9b      	subs	r3, r3, r2
   12f92:	011b      	lsls	r3, r3, #4
   12f94:	3338      	adds	r3, #56	; 0x38
   12f96:	4a23      	ldr	r2, [pc, #140]	; (13024 <net_context_get+0x2e8>)
   12f98:	4413      	add	r3, r2
   12f9a:	3304      	adds	r3, #4
   12f9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12fa0:	2101      	movs	r1, #1
   12fa2:	4618      	mov	r0, r3
   12fa4:	f010 fb06 	bl	235b4 <k_sem_init>
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

		k_mutex_init(&contexts[i].lock);
   12fa8:	69fa      	ldr	r2, [r7, #28]
   12faa:	4613      	mov	r3, r2
   12fac:	00db      	lsls	r3, r3, #3
   12fae:	1a9b      	subs	r3, r3, r2
   12fb0:	011b      	lsls	r3, r3, #4
   12fb2:	3308      	adds	r3, #8
   12fb4:	4a1b      	ldr	r2, [pc, #108]	; (13024 <net_context_get+0x2e8>)
   12fb6:	4413      	add	r3, r2
   12fb8:	4618      	mov	r0, r3
   12fba:	f010 fad7 	bl	2356c <k_mutex_init>

		contexts[i].flags |= NET_CONTEXT_IN_USE;
   12fbe:	4919      	ldr	r1, [pc, #100]	; (13024 <net_context_get+0x2e8>)
   12fc0:	69fa      	ldr	r2, [r7, #28]
   12fc2:	4613      	mov	r3, r2
   12fc4:	00db      	lsls	r3, r3, #3
   12fc6:	1a9b      	subs	r3, r3, r2
   12fc8:	011b      	lsls	r3, r3, #4
   12fca:	440b      	add	r3, r1
   12fcc:	336a      	adds	r3, #106	; 0x6a
   12fce:	881b      	ldrh	r3, [r3, #0]
   12fd0:	f043 0301 	orr.w	r3, r3, #1
   12fd4:	b298      	uxth	r0, r3
   12fd6:	4913      	ldr	r1, [pc, #76]	; (13024 <net_context_get+0x2e8>)
   12fd8:	69fa      	ldr	r2, [r7, #28]
   12fda:	4613      	mov	r3, r2
   12fdc:	00db      	lsls	r3, r3, #3
   12fde:	1a9b      	subs	r3, r3, r2
   12fe0:	011b      	lsls	r3, r3, #4
   12fe2:	440b      	add	r3, r1
   12fe4:	336a      	adds	r3, #106	; 0x6a
   12fe6:	4602      	mov	r2, r0
   12fe8:	801a      	strh	r2, [r3, #0]
		*context = &contexts[i];
   12fea:	69fa      	ldr	r2, [r7, #28]
   12fec:	4613      	mov	r3, r2
   12fee:	00db      	lsls	r3, r3, #3
   12ff0:	1a9b      	subs	r3, r3, r2
   12ff2:	011b      	lsls	r3, r3, #4
   12ff4:	4a0b      	ldr	r2, [pc, #44]	; (13024 <net_context_get+0x2e8>)
   12ff6:	441a      	add	r2, r3
   12ff8:	687b      	ldr	r3, [r7, #4]
   12ffa:	601a      	str	r2, [r3, #0]

		ret = 0;
   12ffc:	2300      	movs	r3, #0
   12ffe:	61bb      	str	r3, [r7, #24]
		break;
   13000:	e005      	b.n	1300e <net_context_get+0x2d2>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   13002:	69fb      	ldr	r3, [r7, #28]
   13004:	2b05      	cmp	r3, #5
   13006:	f77f af0e 	ble.w	12e26 <net_context_get+0xea>
   1300a:	e000      	b.n	1300e <net_context_get+0x2d2>
				break;
   1300c:	bf00      	nop
	}

	k_sem_give(&contexts_lock);
   1300e:	4804      	ldr	r0, [pc, #16]	; (13020 <net_context_get+0x2e4>)
   13010:	f010 faed 	bl	235ee <k_sem_give>

		return ret;
	}
#endif /* CONFIG_NET_OFFLOAD */

	return ret;
   13014:	69bb      	ldr	r3, [r7, #24]
}
   13016:	4618      	mov	r0, r3
   13018:	3720      	adds	r7, #32
   1301a:	46bd      	mov	sp, r7
   1301c:	bd80      	pop	{r7, pc}
   1301e:	bf00      	nop
   13020:	20004028 	.word	0x20004028
   13024:	20003d88 	.word	0x20003d88

00013028 <net_context_put>:

	return 0;
}

int net_context_put(struct net_context *context)
{
   13028:	b580      	push	{r7, lr}
   1302a:	b084      	sub	sp, #16
   1302c:	af00      	add	r7, sp, #0
   1302e:	6078      	str	r0, [r7, #4]
	int ret = 0;
   13030:	2300      	movs	r3, #0
   13032:	60fb      	str	r3, [r7, #12]

	NET_ASSERT(context);

	if (!PART_OF_ARRAY(contexts, context)) {
   13034:	687b      	ldr	r3, [r7, #4]
   13036:	2b00      	cmp	r3, #0
   13038:	d007      	beq.n	1304a <net_context_put+0x22>
   1303a:	687b      	ldr	r3, [r7, #4]
   1303c:	4a15      	ldr	r2, [pc, #84]	; (13094 <net_context_put+0x6c>)
   1303e:	4293      	cmp	r3, r2
   13040:	d303      	bcc.n	1304a <net_context_put+0x22>
   13042:	687b      	ldr	r3, [r7, #4]
   13044:	4a14      	ldr	r2, [pc, #80]	; (13098 <net_context_put+0x70>)
   13046:	4293      	cmp	r3, r2
   13048:	d302      	bcc.n	13050 <net_context_put+0x28>
		return -EINVAL;
   1304a:	f06f 0315 	mvn.w	r3, #21
   1304e:	e01c      	b.n	1308a <net_context_put+0x62>
	}

	k_mutex_lock(&context->lock, K_FOREVER);
   13050:	687b      	ldr	r3, [r7, #4]
   13052:	3308      	adds	r3, #8
   13054:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13058:	4618      	mov	r0, r3
   1305a:	f010 fa92 	bl	23582 <k_mutex_lock>
			net_context_get_iface(context), context);
		goto unlock;
	}
#endif /* CONFIG_NET_OFFLOAD */

	context->connect_cb = NULL;
   1305e:	687b      	ldr	r3, [r7, #4]
   13060:	2200      	movs	r2, #0
   13062:	639a      	str	r2, [r3, #56]	; 0x38
	context->recv_cb = NULL;
   13064:	687b      	ldr	r3, [r7, #4]
   13066:	2200      	movs	r2, #0
   13068:	631a      	str	r2, [r3, #48]	; 0x30
	context->send_cb = NULL;
   1306a:	687b      	ldr	r3, [r7, #4]
   1306c:	2200      	movs	r2, #0
   1306e:	635a      	str	r2, [r3, #52]	; 0x34

	/* Decrement refcount on user app's behalf */
	net_context_unref(context);
   13070:	6878      	ldr	r0, [r7, #4]
   13072:	f010 fd25 	bl	23ac0 <net_context_unref>

	/* net_tcp_put() will handle decrementing refcount on stack's behalf */
	net_tcp_put(context);
   13076:	6878      	ldr	r0, [r7, #4]
   13078:	f010 fc89 	bl	2398e <net_tcp_put>
	/* Assume it's better to have goto to immediate label than ugly
	 * not indented #ifdef (if only they were intended!).
	 */
	goto unlock;
   1307c:	bf00      	nop

unlock:
	k_mutex_unlock(&context->lock);
   1307e:	687b      	ldr	r3, [r7, #4]
   13080:	3308      	adds	r3, #8
   13082:	4618      	mov	r0, r3
   13084:	f010 fa8b 	bl	2359e <k_mutex_unlock>

	return ret;
   13088:	68fb      	ldr	r3, [r7, #12]
}
   1308a:	4618      	mov	r0, r3
   1308c:	3710      	adds	r7, #16
   1308e:	46bd      	mov	sp, r7
   13090:	bd80      	pop	{r7, pc}
   13092:	bf00      	nop
   13094:	20003d88 	.word	0x20003d88
   13098:	20004028 	.word	0x20004028

0001309c <find_context>:

	return -EINVAL;
}

static inline struct net_context *find_context(void *conn_handler)
{
   1309c:	b580      	push	{r7, lr}
   1309e:	b084      	sub	sp, #16
   130a0:	af00      	add	r7, sp, #0
   130a2:	6078      	str	r0, [r7, #4]
	int i;

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   130a4:	2300      	movs	r3, #0
   130a6:	60fb      	str	r3, [r7, #12]
   130a8:	e027      	b.n	130fa <find_context+0x5e>
		if (!net_context_is_used(&contexts[i])) {
   130aa:	68fa      	ldr	r2, [r7, #12]
   130ac:	4613      	mov	r3, r2
   130ae:	00db      	lsls	r3, r3, #3
   130b0:	1a9b      	subs	r3, r3, r2
   130b2:	011b      	lsls	r3, r3, #4
   130b4:	4a15      	ldr	r2, [pc, #84]	; (1310c <find_context+0x70>)
   130b6:	4413      	add	r3, r2
   130b8:	4618      	mov	r0, r3
   130ba:	f010 fb36 	bl	2372a <net_context_is_used>
   130be:	4603      	mov	r3, r0
   130c0:	f083 0301 	eor.w	r3, r3, #1
   130c4:	b2db      	uxtb	r3, r3
   130c6:	2b00      	cmp	r3, #0
   130c8:	d113      	bne.n	130f2 <find_context+0x56>
			continue;
		}

		if (contexts[i].conn_handler == conn_handler) {
   130ca:	4910      	ldr	r1, [pc, #64]	; (1310c <find_context+0x70>)
   130cc:	68fa      	ldr	r2, [r7, #12]
   130ce:	4613      	mov	r3, r2
   130d0:	00db      	lsls	r3, r3, #3
   130d2:	1a9b      	subs	r3, r3, r2
   130d4:	011b      	lsls	r3, r3, #4
   130d6:	440b      	add	r3, r1
   130d8:	332c      	adds	r3, #44	; 0x2c
   130da:	681b      	ldr	r3, [r3, #0]
   130dc:	687a      	ldr	r2, [r7, #4]
   130de:	429a      	cmp	r2, r3
   130e0:	d108      	bne.n	130f4 <find_context+0x58>
			return &contexts[i];
   130e2:	68fa      	ldr	r2, [r7, #12]
   130e4:	4613      	mov	r3, r2
   130e6:	00db      	lsls	r3, r3, #3
   130e8:	1a9b      	subs	r3, r3, r2
   130ea:	011b      	lsls	r3, r3, #4
   130ec:	4a07      	ldr	r2, [pc, #28]	; (1310c <find_context+0x70>)
   130ee:	4413      	add	r3, r2
   130f0:	e007      	b.n	13102 <find_context+0x66>
			continue;
   130f2:	bf00      	nop
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   130f4:	68fb      	ldr	r3, [r7, #12]
   130f6:	3301      	adds	r3, #1
   130f8:	60fb      	str	r3, [r7, #12]
   130fa:	68fb      	ldr	r3, [r7, #12]
   130fc:	2b05      	cmp	r3, #5
   130fe:	ddd4      	ble.n	130aa <find_context+0xe>
		}
	}

	return NULL;
   13100:	2300      	movs	r3, #0
}
   13102:	4618      	mov	r0, r3
   13104:	3710      	adds	r7, #16
   13106:	46bd      	mov	sp, r7
   13108:	bd80      	pop	{r7, pc}
   1310a:	bf00      	nop
   1310c:	20003d88 	.word	0x20003d88

00013110 <recv_udp>:
#if defined(CONFIG_NET_UDP)
static int recv_udp(struct net_context *context,
		    net_context_recv_cb_t cb,
		    s32_t timeout,
		    void *user_data)
{
   13110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13114:	b092      	sub	sp, #72	; 0x48
   13116:	af06      	add	r7, sp, #24
   13118:	60f8      	str	r0, [r7, #12]
   1311a:	60b9      	str	r1, [r7, #8]
   1311c:	607a      	str	r2, [r7, #4]
   1311e:	603b      	str	r3, [r7, #0]
	struct sockaddr local_addr = {
   13120:	f107 0314 	add.w	r3, r7, #20
   13124:	2200      	movs	r2, #0
   13126:	601a      	str	r2, [r3, #0]
   13128:	605a      	str	r2, [r3, #4]
		.sa_family = net_context_get_family(context),
   1312a:	68f8      	ldr	r0, [r7, #12]
   1312c:	f010 fb46 	bl	237bc <net_context_get_family>
   13130:	4603      	mov	r3, r0
	struct sockaddr local_addr = {
   13132:	82bb      	strh	r3, [r7, #20]
	};
	struct sockaddr *laddr = NULL;
   13134:	2300      	movs	r3, #0
   13136:	62fb      	str	r3, [r7, #44]	; 0x2c
	u16_t lport = 0U;
   13138:	2300      	movs	r3, #0
   1313a:	857b      	strh	r3, [r7, #42]	; 0x2a
	int ret;

	ARG_UNUSED(timeout);

	if (context->conn_handler) {
   1313c:	68fb      	ldr	r3, [r7, #12]
   1313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13140:	2b00      	cmp	r3, #0
   13142:	d007      	beq.n	13154 <recv_udp+0x44>
		net_conn_unregister(context->conn_handler);
   13144:	68fb      	ldr	r3, [r7, #12]
   13146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13148:	4618      	mov	r0, r3
   1314a:	f001 fa27 	bl	1459c <net_conn_unregister>
		context->conn_handler = NULL;
   1314e:	68fb      	ldr	r3, [r7, #12]
   13150:	2200      	movs	r2, #0
   13152:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	ret = bind_default(context);
   13154:	68f8      	ldr	r0, [r7, #12]
   13156:	f010 fcf4 	bl	23b42 <bind_default>
   1315a:	6278      	str	r0, [r7, #36]	; 0x24
	if (ret) {
   1315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1315e:	2b00      	cmp	r3, #0
   13160:	d001      	beq.n	13166 <recv_udp+0x56>
		return ret;
   13162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13164:	e07c      	b.n	13260 <recv_udp+0x150>
		lport = net_sin6((struct sockaddr *)&context->local)->sin6_port;
	}
#endif /* CONFIG_NET_IPV6 */

#if defined(CONFIG_NET_IPV4)
	if (net_context_get_family(context) == AF_INET) {
   13166:	68f8      	ldr	r0, [r7, #12]
   13168:	f010 fb28 	bl	237bc <net_context_get_family>
   1316c:	4603      	mov	r3, r0
   1316e:	2b01      	cmp	r3, #1
   13170:	d127      	bne.n	131c2 <recv_udp+0xb2>
		if (net_sin_ptr(&context->local)->sin_addr) {
   13172:	68fb      	ldr	r3, [r7, #12]
   13174:	331c      	adds	r3, #28
   13176:	4618      	mov	r0, r3
   13178:	f010 facd 	bl	23716 <net_sin_ptr>
   1317c:	4603      	mov	r3, r0
   1317e:	685b      	ldr	r3, [r3, #4]
   13180:	2b00      	cmp	r3, #0
   13182:	d016      	beq.n	131b2 <recv_udp+0xa2>
			net_ipaddr_copy(&net_sin(&local_addr)->sin_addr,
   13184:	f107 0314 	add.w	r3, r7, #20
   13188:	4618      	mov	r0, r3
   1318a:	f010 fab0 	bl	236ee <net_sin>
   1318e:	4603      	mov	r3, r0
   13190:	3304      	adds	r3, #4
   13192:	623b      	str	r3, [r7, #32]
   13194:	68fb      	ldr	r3, [r7, #12]
   13196:	331c      	adds	r3, #28
   13198:	4618      	mov	r0, r3
   1319a:	f010 fabc 	bl	23716 <net_sin_ptr>
   1319e:	4603      	mov	r3, r0
   131a0:	685b      	ldr	r3, [r3, #4]
   131a2:	61fb      	str	r3, [r7, #28]
   131a4:	69fb      	ldr	r3, [r7, #28]
   131a6:	681a      	ldr	r2, [r3, #0]
   131a8:	6a3b      	ldr	r3, [r7, #32]
   131aa:	601a      	str	r2, [r3, #0]
				      net_sin_ptr(&context->local)->sin_addr);

			laddr = &local_addr;
   131ac:	f107 0314 	add.w	r3, r7, #20
   131b0:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		lport = net_sin((struct sockaddr *)&context->local)->sin_port;
   131b2:	68fb      	ldr	r3, [r7, #12]
   131b4:	331c      	adds	r3, #28
   131b6:	4618      	mov	r0, r3
   131b8:	f010 fa99 	bl	236ee <net_sin>
   131bc:	4603      	mov	r3, r0
   131be:	885b      	ldrh	r3, [r3, #2]
   131c0:	857b      	strh	r3, [r7, #42]	; 0x2a
	}
#endif /* CONFIG_NET_IPV4 */

	context->recv_cb = cb;
   131c2:	68fb      	ldr	r3, [r7, #12]
   131c4:	68ba      	ldr	r2, [r7, #8]
   131c6:	631a      	str	r2, [r3, #48]	; 0x30

	ret = net_conn_register(net_context_get_ip_proto(context),
   131c8:	68f8      	ldr	r0, [r7, #12]
   131ca:	f010 fb65 	bl	23898 <net_context_get_ip_proto>
   131ce:	4603      	mov	r3, r0
   131d0:	4698      	mov	r8, r3
				net_context_get_family(context),
   131d2:	68f8      	ldr	r0, [r7, #12]
   131d4:	f010 faf2 	bl	237bc <net_context_get_family>
   131d8:	4603      	mov	r3, r0
	ret = net_conn_register(net_context_get_ip_proto(context),
   131da:	b2de      	uxtb	r6, r3
				context->flags & NET_CONTEXT_REMOTE_ADDR_SET ?
   131dc:	68fb      	ldr	r3, [r7, #12]
   131de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
   131e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
	ret = net_conn_register(net_context_get_ip_proto(context),
   131e6:	2b00      	cmp	r3, #0
   131e8:	d003      	beq.n	131f2 <recv_udp+0xe2>
   131ea:	68fb      	ldr	r3, [r7, #12]
   131ec:	f103 0524 	add.w	r5, r3, #36	; 0x24
   131f0:	e000      	b.n	131f4 <recv_udp+0xe4>
   131f2:	2500      	movs	r5, #0
							&context->remote : NULL,
				laddr,
				ntohs(net_sin(&context->remote)->sin_port),
   131f4:	68fb      	ldr	r3, [r7, #12]
   131f6:	3324      	adds	r3, #36	; 0x24
   131f8:	4618      	mov	r0, r3
   131fa:	f010 fa78 	bl	236ee <net_sin>
   131fe:	4603      	mov	r3, r0
   13200:	885b      	ldrh	r3, [r3, #2]
   13202:	0a1b      	lsrs	r3, r3, #8
   13204:	b29b      	uxth	r3, r3
   13206:	b21b      	sxth	r3, r3
   13208:	b2db      	uxtb	r3, r3
   1320a:	b21c      	sxth	r4, r3
   1320c:	68fb      	ldr	r3, [r7, #12]
   1320e:	3324      	adds	r3, #36	; 0x24
   13210:	4618      	mov	r0, r3
   13212:	f010 fa6c 	bl	236ee <net_sin>
   13216:	4603      	mov	r3, r0
   13218:	885b      	ldrh	r3, [r3, #2]
   1321a:	021b      	lsls	r3, r3, #8
   1321c:	b21b      	sxth	r3, r3
   1321e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   13222:	b21b      	sxth	r3, r3
   13224:	4323      	orrs	r3, r4
   13226:	b21b      	sxth	r3, r3
	ret = net_conn_register(net_context_get_ip_proto(context),
   13228:	b29b      	uxth	r3, r3
				ntohs(lport),
   1322a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
   1322c:	0a12      	lsrs	r2, r2, #8
   1322e:	b292      	uxth	r2, r2
   13230:	b211      	sxth	r1, r2
   13232:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
   13234:	0212      	lsls	r2, r2, #8
   13236:	b212      	sxth	r2, r2
   13238:	430a      	orrs	r2, r1
   1323a:	b212      	sxth	r2, r2
	ret = net_conn_register(net_context_get_ip_proto(context),
   1323c:	b292      	uxth	r2, r2
   1323e:	68f9      	ldr	r1, [r7, #12]
   13240:	312c      	adds	r1, #44	; 0x2c
   13242:	9104      	str	r1, [sp, #16]
   13244:	6839      	ldr	r1, [r7, #0]
   13246:	9103      	str	r1, [sp, #12]
   13248:	4908      	ldr	r1, [pc, #32]	; (1326c <recv_udp+0x15c>)
   1324a:	9102      	str	r1, [sp, #8]
   1324c:	9201      	str	r2, [sp, #4]
   1324e:	9300      	str	r3, [sp, #0]
   13250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13252:	462a      	mov	r2, r5
   13254:	4631      	mov	r1, r6
   13256:	4640      	mov	r0, r8
   13258:	f001 fac8 	bl	147ec <net_conn_register>
   1325c:	6278      	str	r0, [r7, #36]	; 0x24
				net_context_packet_received,
				user_data,
				&context->conn_handler);

	return ret;
   1325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   13260:	4618      	mov	r0, r3
   13262:	3730      	adds	r7, #48	; 0x30
   13264:	46bd      	mov	sp, r7
   13266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1326a:	bf00      	nop
   1326c:	000243ef 	.word	0x000243ef

00013270 <net_context_init>:

	k_sem_give(&contexts_lock);
}

void net_context_init(void)
{
   13270:	b580      	push	{r7, lr}
   13272:	af00      	add	r7, sp, #0
	k_sem_init(&contexts_lock, 1, UINT_MAX);
   13274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13278:	2101      	movs	r1, #1
   1327a:	4802      	ldr	r0, [pc, #8]	; (13284 <net_context_init+0x14>)
   1327c:	f010 f99a 	bl	235b4 <k_sem_init>
}
   13280:	bf00      	nop
   13282:	bd80      	pop	{r7, pc}
   13284:	20004028 	.word	0x20004028

00013288 <net_queue_rx>:

	net_rx(net_pkt_iface(pkt), pkt);
}

static void net_queue_rx(struct net_if *iface, struct net_pkt *pkt)
{
   13288:	b580      	push	{r7, lr}
   1328a:	b084      	sub	sp, #16
   1328c:	af00      	add	r7, sp, #0
   1328e:	6078      	str	r0, [r7, #4]
   13290:	6039      	str	r1, [r7, #0]
	u8_t prio = net_pkt_priority(pkt);
   13292:	6838      	ldr	r0, [r7, #0]
   13294:	f011 fa8a 	bl	247ac <net_pkt_priority>
   13298:	4603      	mov	r3, r0
   1329a:	73fb      	strb	r3, [r7, #15]
	u8_t tc = net_rx_priority2tc(prio);
   1329c:	7bfb      	ldrb	r3, [r7, #15]
   1329e:	4618      	mov	r0, r3
   132a0:	f000 fdca 	bl	13e38 <net_rx_priority2tc>
   132a4:	4603      	mov	r3, r0
   132a6:	73bb      	strb	r3, [r7, #14]

	k_work_init(net_pkt_work(pkt), process_rx_packet);
   132a8:	6838      	ldr	r0, [r7, #0]
   132aa:	f011 fa3b 	bl	24724 <net_pkt_work>
   132ae:	4603      	mov	r3, r0
   132b0:	4906      	ldr	r1, [pc, #24]	; (132cc <net_queue_rx+0x44>)
   132b2:	4618      	mov	r0, r3
   132b4:	f011 f998 	bl	245e8 <k_work_init>

#if NET_TC_RX_COUNT > 1
	NET_DBG("TC %d with prio %d pkt %p", tc, prio, pkt);
#endif

	net_tc_submit_to_rx_queue(tc, pkt);
   132b8:	7bbb      	ldrb	r3, [r7, #14]
   132ba:	6839      	ldr	r1, [r7, #0]
   132bc:	4618      	mov	r0, r3
   132be:	f000 fd89 	bl	13dd4 <net_tc_submit_to_rx_queue>
}
   132c2:	bf00      	nop
   132c4:	3710      	adds	r7, #16
   132c6:	46bd      	mov	sp, r7
   132c8:	bd80      	pop	{r7, pc}
   132ca:	bf00      	nop
   132cc:	00024b51 	.word	0x00024b51

000132d0 <net_ipv4_is_ll_addr>:
 * @param addr A valid pointer on an IPv4 address
 *
 * @return True if it is, false otherwise.
 */
static inline bool net_ipv4_is_ll_addr(const struct in_addr *addr)
{
   132d0:	b480      	push	{r7}
   132d2:	b087      	sub	sp, #28
   132d4:	af00      	add	r7, sp, #0
   132d6:	6078      	str	r0, [r7, #4]
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xA9FE0000) == 0xA9FE0000;
   132d8:	687b      	ldr	r3, [r7, #4]
   132da:	617b      	str	r3, [r7, #20]
   132dc:	697b      	ldr	r3, [r7, #20]
   132de:	681b      	ldr	r3, [r3, #0]
   132e0:	0e1b      	lsrs	r3, r3, #24
   132e2:	b2da      	uxtb	r2, r3
   132e4:	687b      	ldr	r3, [r7, #4]
   132e6:	613b      	str	r3, [r7, #16]
   132e8:	693b      	ldr	r3, [r7, #16]
   132ea:	681b      	ldr	r3, [r3, #0]
   132ec:	0a1b      	lsrs	r3, r3, #8
   132ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   132f2:	431a      	orrs	r2, r3
   132f4:	687b      	ldr	r3, [r7, #4]
   132f6:	60fb      	str	r3, [r7, #12]
   132f8:	68fb      	ldr	r3, [r7, #12]
   132fa:	681b      	ldr	r3, [r3, #0]
   132fc:	021b      	lsls	r3, r3, #8
   132fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   13302:	431a      	orrs	r2, r3
   13304:	687b      	ldr	r3, [r7, #4]
   13306:	60bb      	str	r3, [r7, #8]
   13308:	68bb      	ldr	r3, [r7, #8]
   1330a:	681b      	ldr	r3, [r3, #0]
   1330c:	061b      	lsls	r3, r3, #24
   1330e:	431a      	orrs	r2, r3
   13310:	4b06      	ldr	r3, [pc, #24]	; (1332c <net_ipv4_is_ll_addr+0x5c>)
   13312:	4013      	ands	r3, r2
   13314:	4a05      	ldr	r2, [pc, #20]	; (1332c <net_ipv4_is_ll_addr+0x5c>)
   13316:	4293      	cmp	r3, r2
   13318:	bf0c      	ite	eq
   1331a:	2301      	moveq	r3, #1
   1331c:	2300      	movne	r3, #0
   1331e:	b2db      	uxtb	r3, r3
}
   13320:	4618      	mov	r0, r3
   13322:	371c      	adds	r7, #28
   13324:	46bd      	mov	sp, r7
   13326:	bc80      	pop	{r7}
   13328:	4770      	bx	lr
   1332a:	bf00      	nop
   1332c:	a9fe0000 	.word	0xa9fe0000

00013330 <net_if_queue_tx>:

	net_if_tx(net_pkt_iface(pkt), pkt);
}

void net_if_queue_tx(struct net_if *iface, struct net_pkt *pkt)
{
   13330:	b580      	push	{r7, lr}
   13332:	b084      	sub	sp, #16
   13334:	af00      	add	r7, sp, #0
   13336:	6078      	str	r0, [r7, #4]
   13338:	6039      	str	r1, [r7, #0]
	u8_t prio = net_pkt_priority(pkt);
   1333a:	6838      	ldr	r0, [r7, #0]
   1333c:	f011 fe1a 	bl	24f74 <net_pkt_priority>
   13340:	4603      	mov	r3, r0
   13342:	73fb      	strb	r3, [r7, #15]
	u8_t tc = net_tx_priority2tc(prio);
   13344:	7bfb      	ldrb	r3, [r7, #15]
   13346:	4618      	mov	r0, r3
   13348:	f000 fd60 	bl	13e0c <net_tx_priority2tc>
   1334c:	4603      	mov	r3, r0
   1334e:	73bb      	strb	r3, [r7, #14]

	k_work_init(net_pkt_work(pkt), process_tx_packet);
   13350:	6838      	ldr	r0, [r7, #0]
   13352:	f011 fde0 	bl	24f16 <net_pkt_work>
   13356:	4603      	mov	r3, r0
   13358:	4906      	ldr	r1, [pc, #24]	; (13374 <net_if_queue_tx+0x44>)
   1335a:	4618      	mov	r0, r3
   1335c:	f011 fd54 	bl	24e08 <k_work_init>

#if NET_TC_TX_COUNT > 1
	NET_DBG("TC %d with prio %d pkt %p", tc, prio, pkt);
#endif

	net_tc_submit_to_tx_queue(tc, pkt);
   13360:	7bbb      	ldrb	r3, [r7, #14]
   13362:	6839      	ldr	r1, [r7, #0]
   13364:	4618      	mov	r0, r3
   13366:	f000 fd19 	bl	13d9c <net_tc_submit_to_tx_queue>
}
   1336a:	bf00      	nop
   1336c:	3710      	adds	r7, #16
   1336e:	46bd      	mov	sp, r7
   13370:	bd80      	pop	{r7, pc}
   13372:	bf00      	nop
   13374:	000250dd 	.word	0x000250dd

00013378 <net_if_get_default>:

	return NULL;
}

struct net_if *net_if_get_default(void)
{
   13378:	b480      	push	{r7}
   1337a:	b083      	sub	sp, #12
   1337c:	af00      	add	r7, sp, #0
	struct net_if *iface = NULL;
   1337e:	2300      	movs	r3, #0
   13380:	607b      	str	r3, [r7, #4]

	if (__net_if_start == __net_if_end) {
   13382:	4a08      	ldr	r2, [pc, #32]	; (133a4 <net_if_get_default+0x2c>)
   13384:	4b08      	ldr	r3, [pc, #32]	; (133a8 <net_if_get_default+0x30>)
   13386:	429a      	cmp	r2, r3
   13388:	d101      	bne.n	1338e <net_if_get_default+0x16>
		return NULL;
   1338a:	2300      	movs	r3, #0
   1338c:	e005      	b.n	1339a <net_if_get_default+0x22>
#endif
#if defined(CONFIG_NET_DEFAULT_IF_CANBUS)
	iface = net_if_get_first_by_type(&NET_L2_GET_NAME(CANBUS));
#endif

	return iface ? iface : __net_if_start;
   1338e:	687b      	ldr	r3, [r7, #4]
   13390:	2b00      	cmp	r3, #0
   13392:	d001      	beq.n	13398 <net_if_get_default+0x20>
   13394:	687b      	ldr	r3, [r7, #4]
   13396:	e000      	b.n	1339a <net_if_get_default+0x22>
   13398:	4b02      	ldr	r3, [pc, #8]	; (133a4 <net_if_get_default+0x2c>)
}
   1339a:	4618      	mov	r0, r3
   1339c:	370c      	adds	r7, #12
   1339e:	46bd      	mov	sp, r7
   133a0:	bc80      	pop	{r7}
   133a2:	4770      	bx	lr
   133a4:	2000fee0 	.word	0x2000fee0
   133a8:	2000ff00 	.word	0x2000ff00

000133ac <net_if_config_ipv4_get>:
	return 0;
#endif
}

int net_if_config_ipv4_get(struct net_if *iface, struct net_if_ipv4 **ipv4)
{
   133ac:	b480      	push	{r7}
   133ae:	b085      	sub	sp, #20
   133b0:	af00      	add	r7, sp, #0
   133b2:	6078      	str	r0, [r7, #4]
   133b4:	6039      	str	r1, [r7, #0]
#if defined(CONFIG_NET_IPV4)
	int i;

	if (iface->config.ip.ipv4) {
   133b6:	687b      	ldr	r3, [r7, #4]
   133b8:	685b      	ldr	r3, [r3, #4]
   133ba:	2b00      	cmp	r3, #0
   133bc:	d008      	beq.n	133d0 <net_if_config_ipv4_get+0x24>
		if (ipv4) {
   133be:	683b      	ldr	r3, [r7, #0]
   133c0:	2b00      	cmp	r3, #0
   133c2:	d003      	beq.n	133cc <net_if_config_ipv4_get+0x20>
			*ipv4 = iface->config.ip.ipv4;
   133c4:	687b      	ldr	r3, [r7, #4]
   133c6:	685a      	ldr	r2, [r3, #4]
   133c8:	683b      	ldr	r3, [r7, #0]
   133ca:	601a      	str	r2, [r3, #0]
		}

		return 0;
   133cc:	2300      	movs	r3, #0
   133ce:	e037      	b.n	13440 <net_if_config_ipv4_get+0x94>
	}

	for (i = 0; i < ARRAY_SIZE(ipv4_addresses); i++) {
   133d0:	2300      	movs	r3, #0
   133d2:	60fb      	str	r3, [r7, #12]
   133d4:	e02f      	b.n	13436 <net_if_config_ipv4_get+0x8a>
		if (ipv4_addresses[i].iface) {
   133d6:	491d      	ldr	r1, [pc, #116]	; (1344c <net_if_config_ipv4_get+0xa0>)
   133d8:	68fa      	ldr	r2, [r7, #12]
   133da:	4613      	mov	r3, r2
   133dc:	009b      	lsls	r3, r3, #2
   133de:	4413      	add	r3, r2
   133e0:	00db      	lsls	r3, r3, #3
   133e2:	440b      	add	r3, r1
   133e4:	3324      	adds	r3, #36	; 0x24
   133e6:	681b      	ldr	r3, [r3, #0]
   133e8:	2b00      	cmp	r3, #0
   133ea:	d003      	beq.n	133f4 <net_if_config_ipv4_get+0x48>
	for (i = 0; i < ARRAY_SIZE(ipv4_addresses); i++) {
   133ec:	68fb      	ldr	r3, [r7, #12]
   133ee:	3301      	adds	r3, #1
   133f0:	60fb      	str	r3, [r7, #12]
   133f2:	e020      	b.n	13436 <net_if_config_ipv4_get+0x8a>
			continue;
		}

		iface->config.ip.ipv4 = &ipv4_addresses[i].ipv4;
   133f4:	68fa      	ldr	r2, [r7, #12]
   133f6:	4613      	mov	r3, r2
   133f8:	009b      	lsls	r3, r3, #2
   133fa:	4413      	add	r3, r2
   133fc:	00db      	lsls	r3, r3, #3
   133fe:	4a13      	ldr	r2, [pc, #76]	; (1344c <net_if_config_ipv4_get+0xa0>)
   13400:	441a      	add	r2, r3
   13402:	687b      	ldr	r3, [r7, #4]
   13404:	605a      	str	r2, [r3, #4]
		ipv4_addresses[i].iface = iface;
   13406:	4911      	ldr	r1, [pc, #68]	; (1344c <net_if_config_ipv4_get+0xa0>)
   13408:	68fa      	ldr	r2, [r7, #12]
   1340a:	4613      	mov	r3, r2
   1340c:	009b      	lsls	r3, r3, #2
   1340e:	4413      	add	r3, r2
   13410:	00db      	lsls	r3, r3, #3
   13412:	440b      	add	r3, r1
   13414:	3324      	adds	r3, #36	; 0x24
   13416:	687a      	ldr	r2, [r7, #4]
   13418:	601a      	str	r2, [r3, #0]

		if (ipv4) {
   1341a:	683b      	ldr	r3, [r7, #0]
   1341c:	2b00      	cmp	r3, #0
   1341e:	d008      	beq.n	13432 <net_if_config_ipv4_get+0x86>
			*ipv4 = &ipv4_addresses[i].ipv4;
   13420:	68fa      	ldr	r2, [r7, #12]
   13422:	4613      	mov	r3, r2
   13424:	009b      	lsls	r3, r3, #2
   13426:	4413      	add	r3, r2
   13428:	00db      	lsls	r3, r3, #3
   1342a:	4a08      	ldr	r2, [pc, #32]	; (1344c <net_if_config_ipv4_get+0xa0>)
   1342c:	441a      	add	r2, r3
   1342e:	683b      	ldr	r3, [r7, #0]
   13430:	601a      	str	r2, [r3, #0]
		}

		return 0;
   13432:	2300      	movs	r3, #0
   13434:	e004      	b.n	13440 <net_if_config_ipv4_get+0x94>
	for (i = 0; i < ARRAY_SIZE(ipv4_addresses); i++) {
   13436:	68fb      	ldr	r3, [r7, #12]
   13438:	2b00      	cmp	r3, #0
   1343a:	d0cc      	beq.n	133d6 <net_if_config_ipv4_get+0x2a>
	}

	return -ESRCH;
   1343c:	f06f 0302 	mvn.w	r3, #2
#else
	return -ENOTSUP;
#endif
}
   13440:	4618      	mov	r0, r3
   13442:	3714      	adds	r7, #20
   13444:	46bd      	mov	sp, r7
   13446:	bc80      	pop	{r7}
   13448:	4770      	bx	lr
   1344a:	bf00      	nop
   1344c:	20004040 	.word	0x20004040

00013450 <net_if_ipv4_is_addr_bcast>:
}
#endif

bool net_if_ipv4_is_addr_bcast(struct net_if *iface,
			       const struct in_addr *addr)
{
   13450:	b580      	push	{r7, lr}
   13452:	b084      	sub	sp, #16
   13454:	af00      	add	r7, sp, #0
   13456:	6078      	str	r0, [r7, #4]
   13458:	6039      	str	r1, [r7, #0]
#if defined(CONFIG_NET_IPV4)
	if (iface) {
   1345a:	687b      	ldr	r3, [r7, #4]
   1345c:	2b00      	cmp	r3, #0
   1345e:	d005      	beq.n	1346c <net_if_ipv4_is_addr_bcast+0x1c>
		return ipv4_is_broadcast_address(iface, addr);
   13460:	6839      	ldr	r1, [r7, #0]
   13462:	6878      	ldr	r0, [r7, #4]
   13464:	f011 ff74 	bl	25350 <ipv4_is_broadcast_address>
   13468:	4603      	mov	r3, r0
   1346a:	e015      	b.n	13498 <net_if_ipv4_is_addr_bcast+0x48>
	}

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1346c:	4b0c      	ldr	r3, [pc, #48]	; (134a0 <net_if_ipv4_is_addr_bcast+0x50>)
   1346e:	607b      	str	r3, [r7, #4]
   13470:	e00d      	b.n	1348e <net_if_ipv4_is_addr_bcast+0x3e>
		bool ret;

		ret = ipv4_is_broadcast_address(iface, addr);
   13472:	6839      	ldr	r1, [r7, #0]
   13474:	6878      	ldr	r0, [r7, #4]
   13476:	f011 ff6b 	bl	25350 <ipv4_is_broadcast_address>
   1347a:	4603      	mov	r3, r0
   1347c:	73fb      	strb	r3, [r7, #15]
		if (ret) {
   1347e:	7bfb      	ldrb	r3, [r7, #15]
   13480:	2b00      	cmp	r3, #0
   13482:	d001      	beq.n	13488 <net_if_ipv4_is_addr_bcast+0x38>
			return ret;
   13484:	7bfb      	ldrb	r3, [r7, #15]
   13486:	e007      	b.n	13498 <net_if_ipv4_is_addr_bcast+0x48>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   13488:	687b      	ldr	r3, [r7, #4]
   1348a:	3320      	adds	r3, #32
   1348c:	607b      	str	r3, [r7, #4]
   1348e:	687b      	ldr	r3, [r7, #4]
   13490:	4a04      	ldr	r2, [pc, #16]	; (134a4 <net_if_ipv4_is_addr_bcast+0x54>)
   13492:	4293      	cmp	r3, r2
   13494:	d1ed      	bne.n	13472 <net_if_ipv4_is_addr_bcast+0x22>
		}
	}
#endif

	return false;
   13496:	2300      	movs	r3, #0
}
   13498:	4618      	mov	r0, r3
   1349a:	3710      	adds	r7, #16
   1349c:	46bd      	mov	sp, r7
   1349e:	bd80      	pop	{r7, pc}
   134a0:	2000fee0 	.word	0x2000fee0
   134a4:	2000ff00 	.word	0x2000ff00

000134a8 <net_if_ipv4_select_src_iface>:

struct net_if *net_if_ipv4_select_src_iface(const struct in_addr *dst)
{
   134a8:	b580      	push	{r7, lr}
   134aa:	b084      	sub	sp, #16
   134ac:	af00      	add	r7, sp, #0
   134ae:	6078      	str	r0, [r7, #4]
#if defined(CONFIG_NET_IPV4)
	struct net_if *iface;

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   134b0:	4b0d      	ldr	r3, [pc, #52]	; (134e8 <net_if_ipv4_select_src_iface+0x40>)
   134b2:	60fb      	str	r3, [r7, #12]
   134b4:	e00d      	b.n	134d2 <net_if_ipv4_select_src_iface+0x2a>
		bool ret;

		ret = net_if_ipv4_addr_mask_cmp(iface, dst);
   134b6:	6879      	ldr	r1, [r7, #4]
   134b8:	68f8      	ldr	r0, [r7, #12]
   134ba:	f011 fefb 	bl	252b4 <net_if_ipv4_addr_mask_cmp>
   134be:	4603      	mov	r3, r0
   134c0:	72fb      	strb	r3, [r7, #11]
		if (ret) {
   134c2:	7afb      	ldrb	r3, [r7, #11]
   134c4:	2b00      	cmp	r3, #0
   134c6:	d001      	beq.n	134cc <net_if_ipv4_select_src_iface+0x24>
			return iface;
   134c8:	68fb      	ldr	r3, [r7, #12]
   134ca:	e009      	b.n	134e0 <net_if_ipv4_select_src_iface+0x38>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   134cc:	68fb      	ldr	r3, [r7, #12]
   134ce:	3320      	adds	r3, #32
   134d0:	60fb      	str	r3, [r7, #12]
   134d2:	68fb      	ldr	r3, [r7, #12]
   134d4:	4a05      	ldr	r2, [pc, #20]	; (134ec <net_if_ipv4_select_src_iface+0x44>)
   134d6:	4293      	cmp	r3, r2
   134d8:	d1ed      	bne.n	134b6 <net_if_ipv4_select_src_iface+0xe>
		}
	}
#endif

	return net_if_get_default();
   134da:	f7ff ff4d 	bl	13378 <net_if_get_default>
   134de:	4603      	mov	r3, r0
}
   134e0:	4618      	mov	r0, r3
   134e2:	3710      	adds	r7, #16
   134e4:	46bd      	mov	sp, r7
   134e6:	bd80      	pop	{r7, pc}
   134e8:	2000fee0 	.word	0x2000fee0
   134ec:	2000ff00 	.word	0x2000ff00

000134f0 <net_if_ipv4_select_src_addr>:
	return if_ipv4_get_addr(iface, addr_state, false);
}

const struct in_addr *net_if_ipv4_select_src_addr(struct net_if *dst_iface,
						  const struct in_addr *dst)
{
   134f0:	b580      	push	{r7, lr}
   134f2:	b088      	sub	sp, #32
   134f4:	af00      	add	r7, sp, #0
   134f6:	6078      	str	r0, [r7, #4]
   134f8:	6039      	str	r1, [r7, #0]
#if defined(CONFIG_NET_IPV4)
	struct in_addr *src = NULL;
   134fa:	2300      	movs	r3, #0
   134fc:	61fb      	str	r3, [r7, #28]
	u8_t best_match = 0U;
   134fe:	2300      	movs	r3, #0
   13500:	73fb      	strb	r3, [r7, #15]
	struct net_if *iface;

	if (!net_ipv4_is_ll_addr(dst) && !net_ipv4_is_addr_mcast(dst)) {
   13502:	6838      	ldr	r0, [r7, #0]
   13504:	f7ff fee4 	bl	132d0 <net_ipv4_is_ll_addr>
   13508:	4603      	mov	r3, r0
   1350a:	f083 0301 	eor.w	r3, r3, #1
   1350e:	b2db      	uxtb	r3, r3
   13510:	2b00      	cmp	r3, #0
   13512:	d02e      	beq.n	13572 <net_if_ipv4_select_src_addr+0x82>
   13514:	6838      	ldr	r0, [r7, #0]
   13516:	f011 fc8a 	bl	24e2e <net_ipv4_is_addr_mcast>
   1351a:	4603      	mov	r3, r0
   1351c:	f083 0301 	eor.w	r3, r3, #1
   13520:	b2db      	uxtb	r3, r3
   13522:	2b00      	cmp	r3, #0
   13524:	d025      	beq.n	13572 <net_if_ipv4_select_src_addr+0x82>

		for (iface = __net_if_start;
   13526:	4b2e      	ldr	r3, [pc, #184]	; (135e0 <net_if_ipv4_select_src_addr+0xf0>)
   13528:	61bb      	str	r3, [r7, #24]
   1352a:	e00f      	b.n	1354c <net_if_ipv4_select_src_addr+0x5c>
		     !dst_iface && iface != __net_if_end;
		     iface++) {
			struct in_addr *addr;

			addr = net_if_ipv4_get_best_match(iface, dst,
   1352c:	f107 030f 	add.w	r3, r7, #15
   13530:	461a      	mov	r2, r3
   13532:	6839      	ldr	r1, [r7, #0]
   13534:	69b8      	ldr	r0, [r7, #24]
   13536:	f011 ff6d 	bl	25414 <net_if_ipv4_get_best_match>
   1353a:	6178      	str	r0, [r7, #20]
							  &best_match);
			if (addr) {
   1353c:	697b      	ldr	r3, [r7, #20]
   1353e:	2b00      	cmp	r3, #0
   13540:	d001      	beq.n	13546 <net_if_ipv4_select_src_addr+0x56>
				src = addr;
   13542:	697b      	ldr	r3, [r7, #20]
   13544:	61fb      	str	r3, [r7, #28]
		     iface++) {
   13546:	69bb      	ldr	r3, [r7, #24]
   13548:	3320      	adds	r3, #32
   1354a:	61bb      	str	r3, [r7, #24]
		for (iface = __net_if_start;
   1354c:	687b      	ldr	r3, [r7, #4]
   1354e:	2b00      	cmp	r3, #0
   13550:	d103      	bne.n	1355a <net_if_ipv4_select_src_addr+0x6a>
		     !dst_iface && iface != __net_if_end;
   13552:	69bb      	ldr	r3, [r7, #24]
   13554:	4a23      	ldr	r2, [pc, #140]	; (135e4 <net_if_ipv4_select_src_addr+0xf4>)
   13556:	4293      	cmp	r3, r2
   13558:	d1e8      	bne.n	1352c <net_if_ipv4_select_src_addr+0x3c>
			}
		}

		/* If caller has supplied interface, then use that */
		if (dst_iface) {
   1355a:	687b      	ldr	r3, [r7, #4]
   1355c:	2b00      	cmp	r3, #0
   1355e:	d028      	beq.n	135b2 <net_if_ipv4_select_src_addr+0xc2>
			src = net_if_ipv4_get_best_match(dst_iface, dst,
   13560:	f107 030f 	add.w	r3, r7, #15
   13564:	461a      	mov	r2, r3
   13566:	6839      	ldr	r1, [r7, #0]
   13568:	6878      	ldr	r0, [r7, #4]
   1356a:	f011 ff53 	bl	25414 <net_if_ipv4_get_best_match>
   1356e:	61f8      	str	r0, [r7, #28]
		if (dst_iface) {
   13570:	e01f      	b.n	135b2 <net_if_ipv4_select_src_addr+0xc2>
							 &best_match);
		}

	} else {
		for (iface = __net_if_start;
   13572:	4b1b      	ldr	r3, [pc, #108]	; (135e0 <net_if_ipv4_select_src_addr+0xf0>)
   13574:	61bb      	str	r3, [r7, #24]
   13576:	e00d      	b.n	13594 <net_if_ipv4_select_src_addr+0xa4>
		     !dst_iface && iface != __net_if_end;
		     iface++) {
			struct in_addr *addr;

			addr = net_if_ipv4_get_ll(iface, NET_ADDR_PREFERRED);
   13578:	2101      	movs	r1, #1
   1357a:	69b8      	ldr	r0, [r7, #24]
   1357c:	f012 f80b 	bl	25596 <net_if_ipv4_get_ll>
   13580:	6138      	str	r0, [r7, #16]
			if (addr) {
   13582:	693b      	ldr	r3, [r7, #16]
   13584:	2b00      	cmp	r3, #0
   13586:	d002      	beq.n	1358e <net_if_ipv4_select_src_addr+0x9e>
				src = addr;
   13588:	693b      	ldr	r3, [r7, #16]
   1358a:	61fb      	str	r3, [r7, #28]
				break;
   1358c:	e009      	b.n	135a2 <net_if_ipv4_select_src_addr+0xb2>
		     iface++) {
   1358e:	69bb      	ldr	r3, [r7, #24]
   13590:	3320      	adds	r3, #32
   13592:	61bb      	str	r3, [r7, #24]
		for (iface = __net_if_start;
   13594:	687b      	ldr	r3, [r7, #4]
   13596:	2b00      	cmp	r3, #0
   13598:	d103      	bne.n	135a2 <net_if_ipv4_select_src_addr+0xb2>
		     !dst_iface && iface != __net_if_end;
   1359a:	69bb      	ldr	r3, [r7, #24]
   1359c:	4a11      	ldr	r2, [pc, #68]	; (135e4 <net_if_ipv4_select_src_addr+0xf4>)
   1359e:	4293      	cmp	r3, r2
   135a0:	d1ea      	bne.n	13578 <net_if_ipv4_select_src_addr+0x88>
			}
		}

		if (dst_iface) {
   135a2:	687b      	ldr	r3, [r7, #4]
   135a4:	2b00      	cmp	r3, #0
   135a6:	d004      	beq.n	135b2 <net_if_ipv4_select_src_addr+0xc2>
			src = net_if_ipv4_get_ll(dst_iface, NET_ADDR_PREFERRED);
   135a8:	2101      	movs	r1, #1
   135aa:	6878      	ldr	r0, [r7, #4]
   135ac:	f011 fff3 	bl	25596 <net_if_ipv4_get_ll>
   135b0:	61f8      	str	r0, [r7, #28]
		}
	}

	if (!src) {
   135b2:	69fb      	ldr	r3, [r7, #28]
   135b4:	2b00      	cmp	r3, #0
   135b6:	d10d      	bne.n	135d4 <net_if_ipv4_select_src_addr+0xe4>
		src = net_if_ipv4_get_global_addr(dst_iface,
   135b8:	2101      	movs	r1, #1
   135ba:	6878      	ldr	r0, [r7, #4]
   135bc:	f011 fffd 	bl	255ba <net_if_ipv4_get_global_addr>
   135c0:	61f8      	str	r0, [r7, #28]
						  NET_ADDR_PREFERRED);
		if (src) {
   135c2:	69fb      	ldr	r3, [r7, #28]
   135c4:	2b00      	cmp	r3, #0
   135c6:	d001      	beq.n	135cc <net_if_ipv4_select_src_addr+0xdc>
			return src;
   135c8:	69fb      	ldr	r3, [r7, #28]
   135ca:	e004      	b.n	135d6 <net_if_ipv4_select_src_addr+0xe6>
		}

		return net_ipv4_unspecified_address();
   135cc:	f000 fdac 	bl	14128 <net_ipv4_unspecified_address>
   135d0:	4603      	mov	r3, r0
   135d2:	e000      	b.n	135d6 <net_if_ipv4_select_src_addr+0xe6>
	}

	return src;
   135d4:	69fb      	ldr	r3, [r7, #28]
#else
	return NULL;
#endif
}
   135d6:	4618      	mov	r0, r3
   135d8:	3720      	adds	r7, #32
   135da:	46bd      	mov	sp, r7
   135dc:	bd80      	pop	{r7, pc}
   135de:	bf00      	nop
   135e0:	2000fee0 	.word	0x2000fee0
   135e4:	2000ff00 	.word	0x2000ff00

000135e8 <net_if_ipv4_addr_lookup>:

struct net_if_addr *net_if_ipv4_addr_lookup(const struct in_addr *addr,
					    struct net_if **ret)
{
   135e8:	b480      	push	{r7}
   135ea:	b087      	sub	sp, #28
   135ec:	af00      	add	r7, sp, #0
   135ee:	6078      	str	r0, [r7, #4]
   135f0:	6039      	str	r1, [r7, #0]
#if defined(CONFIG_NET_IPV4)
	struct net_if *iface;

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   135f2:	4b2b      	ldr	r3, [pc, #172]	; (136a0 <net_if_ipv4_addr_lookup+0xb8>)
   135f4:	617b      	str	r3, [r7, #20]
   135f6:	e049      	b.n	1368c <net_if_ipv4_addr_lookup+0xa4>
		struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
   135f8:	697b      	ldr	r3, [r7, #20]
   135fa:	685b      	ldr	r3, [r3, #4]
   135fc:	60fb      	str	r3, [r7, #12]
		int i;

		if (!ipv4) {
   135fe:	68fb      	ldr	r3, [r7, #12]
   13600:	2b00      	cmp	r3, #0
   13602:	d03f      	beq.n	13684 <net_if_ipv4_addr_lookup+0x9c>
			continue;
		}

		for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
   13604:	2300      	movs	r3, #0
   13606:	613b      	str	r3, [r7, #16]
   13608:	e038      	b.n	1367c <net_if_ipv4_addr_lookup+0x94>
			if (!ipv4->unicast[i].is_used ||
   1360a:	68f9      	ldr	r1, [r7, #12]
   1360c:	693a      	ldr	r2, [r7, #16]
   1360e:	4613      	mov	r3, r2
   13610:	005b      	lsls	r3, r3, #1
   13612:	4413      	add	r3, r2
   13614:	009b      	lsls	r3, r3, #2
   13616:	440b      	add	r3, r1
   13618:	3308      	adds	r3, #8
   1361a:	789b      	ldrb	r3, [r3, #2]
   1361c:	f3c3 0340 	ubfx	r3, r3, #1, #1
   13620:	b2db      	uxtb	r3, r3
   13622:	2b00      	cmp	r3, #0
   13624:	d026      	beq.n	13674 <net_if_ipv4_addr_lookup+0x8c>
			    ipv4->unicast[i].address.family != AF_INET) {
   13626:	68f9      	ldr	r1, [r7, #12]
   13628:	693a      	ldr	r2, [r7, #16]
   1362a:	4613      	mov	r3, r2
   1362c:	005b      	lsls	r3, r3, #1
   1362e:	4413      	add	r3, r2
   13630:	009b      	lsls	r3, r3, #2
   13632:	440b      	add	r3, r1
   13634:	881b      	ldrh	r3, [r3, #0]
			if (!ipv4->unicast[i].is_used ||
   13636:	2b01      	cmp	r3, #1
   13638:	d11c      	bne.n	13674 <net_if_ipv4_addr_lookup+0x8c>
				continue;
			}

			if (UNALIGNED_GET(&addr->s4_addr32[0]) ==
   1363a:	687b      	ldr	r3, [r7, #4]
   1363c:	60bb      	str	r3, [r7, #8]
   1363e:	68bb      	ldr	r3, [r7, #8]
   13640:	6819      	ldr	r1, [r3, #0]
			    ipv4->unicast[i].address.in_addr.s_addr) {
   13642:	68f8      	ldr	r0, [r7, #12]
   13644:	693a      	ldr	r2, [r7, #16]
   13646:	4613      	mov	r3, r2
   13648:	005b      	lsls	r3, r3, #1
   1364a:	4413      	add	r3, r2
   1364c:	009b      	lsls	r3, r3, #2
   1364e:	4403      	add	r3, r0
   13650:	3304      	adds	r3, #4
   13652:	681b      	ldr	r3, [r3, #0]
			if (UNALIGNED_GET(&addr->s4_addr32[0]) ==
   13654:	4299      	cmp	r1, r3
   13656:	d10e      	bne.n	13676 <net_if_ipv4_addr_lookup+0x8e>

				if (ret) {
   13658:	683b      	ldr	r3, [r7, #0]
   1365a:	2b00      	cmp	r3, #0
   1365c:	d002      	beq.n	13664 <net_if_ipv4_addr_lookup+0x7c>
					*ret = iface;
   1365e:	683b      	ldr	r3, [r7, #0]
   13660:	697a      	ldr	r2, [r7, #20]
   13662:	601a      	str	r2, [r3, #0]
				}

				return &ipv4->unicast[i];
   13664:	693a      	ldr	r2, [r7, #16]
   13666:	4613      	mov	r3, r2
   13668:	005b      	lsls	r3, r3, #1
   1366a:	4413      	add	r3, r2
   1366c:	009b      	lsls	r3, r3, #2
   1366e:	68fa      	ldr	r2, [r7, #12]
   13670:	4413      	add	r3, r2
   13672:	e010      	b.n	13696 <net_if_ipv4_addr_lookup+0xae>
				continue;
   13674:	bf00      	nop
		for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
   13676:	693b      	ldr	r3, [r7, #16]
   13678:	3301      	adds	r3, #1
   1367a:	613b      	str	r3, [r7, #16]
   1367c:	693b      	ldr	r3, [r7, #16]
   1367e:	2b00      	cmp	r3, #0
   13680:	ddc3      	ble.n	1360a <net_if_ipv4_addr_lookup+0x22>
   13682:	e000      	b.n	13686 <net_if_ipv4_addr_lookup+0x9e>
			continue;
   13684:	bf00      	nop
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   13686:	697b      	ldr	r3, [r7, #20]
   13688:	3320      	adds	r3, #32
   1368a:	617b      	str	r3, [r7, #20]
   1368c:	697b      	ldr	r3, [r7, #20]
   1368e:	4a05      	ldr	r2, [pc, #20]	; (136a4 <net_if_ipv4_addr_lookup+0xbc>)
   13690:	4293      	cmp	r3, r2
   13692:	d1b1      	bne.n	135f8 <net_if_ipv4_addr_lookup+0x10>
			}
		}
	}
#endif

	return NULL;
   13694:	2300      	movs	r3, #0
}
   13696:	4618      	mov	r0, r3
   13698:	371c      	adds	r7, #28
   1369a:	46bd      	mov	sp, r7
   1369c:	bc80      	pop	{r7}
   1369e:	4770      	bx	lr
   136a0:	2000fee0 	.word	0x2000fee0
   136a4:	2000ff00 	.word	0x2000ff00

000136a8 <net_if_ipv4_addr_add>:

struct net_if_addr *net_if_ipv4_addr_add(struct net_if *iface,
					 struct in_addr *addr,
					 enum net_addr_type addr_type,
					 u32_t vlifetime)
{
   136a8:	b580      	push	{r7, lr}
   136aa:	b096      	sub	sp, #88	; 0x58
   136ac:	af00      	add	r7, sp, #0
   136ae:	60f8      	str	r0, [r7, #12]
   136b0:	60b9      	str	r1, [r7, #8]
   136b2:	603b      	str	r3, [r7, #0]
   136b4:	4613      	mov	r3, r2
   136b6:	71fb      	strb	r3, [r7, #7]
#if defined(CONFIG_NET_IPV4)
	struct net_if_addr *ifaddr;
	struct net_if_ipv4 *ipv4;
	int i;

	if (net_if_config_ipv4_get(iface, &ipv4) < 0) {
   136b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
   136bc:	4619      	mov	r1, r3
   136be:	68f8      	ldr	r0, [r7, #12]
   136c0:	f7ff fe74 	bl	133ac <net_if_config_ipv4_get>
   136c4:	4603      	mov	r3, r0
   136c6:	2b00      	cmp	r3, #0
   136c8:	da01      	bge.n	136ce <net_if_ipv4_addr_add+0x26>
		return NULL;
   136ca:	2300      	movs	r3, #0
   136cc:	e067      	b.n	1379e <net_if_ipv4_addr_add+0xf6>
	}

	ifaddr = ipv4_addr_find(iface, addr);
   136ce:	68b9      	ldr	r1, [r7, #8]
   136d0:	68f8      	ldr	r0, [r7, #12]
   136d2:	f011 ff84 	bl	255de <ipv4_addr_find>
   136d6:	6578      	str	r0, [r7, #84]	; 0x54
	if (ifaddr) {
   136d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   136da:	2b00      	cmp	r3, #0
   136dc:	d001      	beq.n	136e2 <net_if_ipv4_addr_add+0x3a>
		/* TODO: should set addr_type/vlifetime */
		return ifaddr;
   136de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   136e0:	e05d      	b.n	1379e <net_if_ipv4_addr_add+0xf6>
	}

	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
   136e2:	2300      	movs	r3, #0
   136e4:	653b      	str	r3, [r7, #80]	; 0x50
   136e6:	e025      	b.n	13734 <net_if_ipv4_addr_add+0x8c>
		struct net_if_addr *cur = &ipv4->unicast[i];
   136e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
   136ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   136ec:	4613      	mov	r3, r2
   136ee:	005b      	lsls	r3, r3, #1
   136f0:	4413      	add	r3, r2
   136f2:	009b      	lsls	r3, r3, #2
   136f4:	440b      	add	r3, r1
   136f6:	64fb      	str	r3, [r7, #76]	; 0x4c

		if (addr_type == NET_ADDR_DHCP
   136f8:	79fb      	ldrb	r3, [r7, #7]
   136fa:	2b02      	cmp	r3, #2
   136fc:	d106      	bne.n	1370c <net_if_ipv4_addr_add+0x64>
		    && cur->addr_type == NET_ADDR_OVERRIDABLE) {
   136fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13700:	7a1b      	ldrb	r3, [r3, #8]
   13702:	2b04      	cmp	r3, #4
   13704:	d102      	bne.n	1370c <net_if_ipv4_addr_add+0x64>
			ifaddr = cur;
   13706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13708:	657b      	str	r3, [r7, #84]	; 0x54
			break;
   1370a:	e016      	b.n	1373a <net_if_ipv4_addr_add+0x92>
		}

		if (!ipv4->unicast[i].is_used) {
   1370c:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1370e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   13710:	4613      	mov	r3, r2
   13712:	005b      	lsls	r3, r3, #1
   13714:	4413      	add	r3, r2
   13716:	009b      	lsls	r3, r3, #2
   13718:	440b      	add	r3, r1
   1371a:	3308      	adds	r3, #8
   1371c:	789b      	ldrb	r3, [r3, #2]
   1371e:	f3c3 0340 	ubfx	r3, r3, #1, #1
   13722:	b2db      	uxtb	r3, r3
   13724:	2b00      	cmp	r3, #0
   13726:	d102      	bne.n	1372e <net_if_ipv4_addr_add+0x86>
			ifaddr = cur;
   13728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1372a:	657b      	str	r3, [r7, #84]	; 0x54
			break;
   1372c:	e005      	b.n	1373a <net_if_ipv4_addr_add+0x92>
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
   1372e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13730:	3301      	adds	r3, #1
   13732:	653b      	str	r3, [r7, #80]	; 0x50
   13734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13736:	2b00      	cmp	r3, #0
   13738:	ddd6      	ble.n	136e8 <net_if_ipv4_addr_add+0x40>
		}
	}

	if (ifaddr) {
   1373a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1373c:	2b00      	cmp	r3, #0
   1373e:	d02d      	beq.n	1379c <net_if_ipv4_addr_add+0xf4>
		ifaddr->is_used = true;
   13740:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   13742:	7a93      	ldrb	r3, [r2, #10]
   13744:	f043 0302 	orr.w	r3, r3, #2
   13748:	7293      	strb	r3, [r2, #10]
		ifaddr->address.family = AF_INET;
   1374a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1374c:	2201      	movs	r2, #1
   1374e:	801a      	strh	r2, [r3, #0]
		ifaddr->address.in_addr.s4_addr32[0] =
						addr->s4_addr32[0];
   13750:	68bb      	ldr	r3, [r7, #8]
   13752:	681a      	ldr	r2, [r3, #0]
		ifaddr->address.in_addr.s4_addr32[0] =
   13754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   13756:	605a      	str	r2, [r3, #4]
		ifaddr->addr_type = addr_type;
   13758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1375a:	79fa      	ldrb	r2, [r7, #7]
   1375c:	721a      	strb	r2, [r3, #8]

		/* Caller has to take care of timers and their expiry */
		if (vlifetime) {
   1375e:	683b      	ldr	r3, [r7, #0]
   13760:	2b00      	cmp	r3, #0
   13762:	d005      	beq.n	13770 <net_if_ipv4_addr_add+0xc8>
			ifaddr->is_infinite = false;
   13764:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   13766:	7a93      	ldrb	r3, [r2, #10]
   13768:	f36f 0300 	bfc	r3, #0, #1
   1376c:	7293      	strb	r3, [r2, #10]
   1376e:	e004      	b.n	1377a <net_if_ipv4_addr_add+0xd2>
		} else {
			ifaddr->is_infinite = true;
   13770:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   13772:	7a93      	ldrb	r3, [r2, #10]
   13774:	f043 0301 	orr.w	r3, r3, #1
   13778:	7293      	strb	r3, [r2, #10]

		/**
		 *  TODO: Handle properly PREFERRED/DEPRECATED state when
		 *  address in use, expired and renewal state.
		 */
		ifaddr->addr_state = NET_ADDR_PREFERRED;
   1377a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1377c:	2201      	movs	r2, #1
   1377e:	725a      	strb	r2, [r3, #9]

		NET_DBG("[%d] interface %p address %s type %s added", i, iface,
   13780:	f011 fb3b 	bl	24dfa <_is_user_context>
   13784:	4603      	mov	r3, r0
   13786:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			log_strdup(net_sprint_ipv4_addr(addr)),
			net_addr_type2str(addr_type));

		net_mgmt_event_notify_with_info(NET_EVENT_IPV4_ADDR_ADD, iface,
						&ifaddr->address.in_addr,
   1378a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1378c:	1d1a      	adds	r2, r3, #4
		net_mgmt_event_notify_with_info(NET_EVENT_IPV4_ADDR_ADD, iface,
   1378e:	2304      	movs	r3, #4
   13790:	68f9      	ldr	r1, [r7, #12]
   13792:	4805      	ldr	r0, [pc, #20]	; (137a8 <net_if_ipv4_addr_add+0x100>)
   13794:	f000 fe98 	bl	144c8 <net_mgmt_event_notify_with_info>
						sizeof(struct in_addr));

		return ifaddr;
   13798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1379a:	e000      	b.n	1379e <net_if_ipv4_addr_add+0xf6>
	}
#endif

	return NULL;
   1379c:	2300      	movs	r3, #0
}
   1379e:	4618      	mov	r0, r3
   137a0:	3758      	adds	r7, #88	; 0x58
   137a2:	46bd      	mov	sp, r7
   137a4:	bd80      	pop	{r7, pc}
   137a6:	bf00      	nop
   137a8:	f0040001 	.word	0xf0040001

000137ac <net_if_ipv4_maddr_lookup>:
	return false;
}

struct net_if_mcast_addr *net_if_ipv4_maddr_lookup(const struct in_addr *maddr,
						   struct net_if **ret)
{
   137ac:	b580      	push	{r7, lr}
   137ae:	b084      	sub	sp, #16
   137b0:	af00      	add	r7, sp, #0
   137b2:	6078      	str	r0, [r7, #4]
   137b4:	6039      	str	r1, [r7, #0]
#if defined(CONFIG_NET_IPV4)
	struct net_if_mcast_addr *addr;
	struct net_if *iface;

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   137b6:	4b16      	ldr	r3, [pc, #88]	; (13810 <net_if_ipv4_maddr_lookup+0x64>)
   137b8:	60fb      	str	r3, [r7, #12]
   137ba:	e020      	b.n	137fe <net_if_ipv4_maddr_lookup+0x52>
		if (ret && *ret && iface != *ret) {
   137bc:	683b      	ldr	r3, [r7, #0]
   137be:	2b00      	cmp	r3, #0
   137c0:	d008      	beq.n	137d4 <net_if_ipv4_maddr_lookup+0x28>
   137c2:	683b      	ldr	r3, [r7, #0]
   137c4:	681b      	ldr	r3, [r3, #0]
   137c6:	2b00      	cmp	r3, #0
   137c8:	d004      	beq.n	137d4 <net_if_ipv4_maddr_lookup+0x28>
   137ca:	683b      	ldr	r3, [r7, #0]
   137cc:	681b      	ldr	r3, [r3, #0]
   137ce:	68fa      	ldr	r2, [r7, #12]
   137d0:	429a      	cmp	r2, r3
   137d2:	d110      	bne.n	137f6 <net_if_ipv4_maddr_lookup+0x4a>
			continue;
		}

		addr = ipv4_maddr_find(iface, true, maddr);
   137d4:	687a      	ldr	r2, [r7, #4]
   137d6:	2101      	movs	r1, #1
   137d8:	68f8      	ldr	r0, [r7, #12]
   137da:	f011 ff3c 	bl	25656 <ipv4_maddr_find>
   137de:	60b8      	str	r0, [r7, #8]
		if (addr) {
   137e0:	68bb      	ldr	r3, [r7, #8]
   137e2:	2b00      	cmp	r3, #0
   137e4:	d008      	beq.n	137f8 <net_if_ipv4_maddr_lookup+0x4c>
			if (ret) {
   137e6:	683b      	ldr	r3, [r7, #0]
   137e8:	2b00      	cmp	r3, #0
   137ea:	d002      	beq.n	137f2 <net_if_ipv4_maddr_lookup+0x46>
				*ret = iface;
   137ec:	683b      	ldr	r3, [r7, #0]
   137ee:	68fa      	ldr	r2, [r7, #12]
   137f0:	601a      	str	r2, [r3, #0]
			}

			return addr;
   137f2:	68bb      	ldr	r3, [r7, #8]
   137f4:	e008      	b.n	13808 <net_if_ipv4_maddr_lookup+0x5c>
			continue;
   137f6:	bf00      	nop
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   137f8:	68fb      	ldr	r3, [r7, #12]
   137fa:	3320      	adds	r3, #32
   137fc:	60fb      	str	r3, [r7, #12]
   137fe:	68fb      	ldr	r3, [r7, #12]
   13800:	4a04      	ldr	r2, [pc, #16]	; (13814 <net_if_ipv4_maddr_lookup+0x68>)
   13802:	4293      	cmp	r3, r2
   13804:	d1da      	bne.n	137bc <net_if_ipv4_maddr_lookup+0x10>
		}
	}
#endif

	return NULL;
   13806:	2300      	movs	r3, #0
}
   13808:	4618      	mov	r0, r3
   1380a:	3710      	adds	r7, #16
   1380c:	46bd      	mov	sp, r7
   1380e:	bd80      	pop	{r7, pc}
   13810:	2000fee0 	.word	0x2000fee0
   13814:	2000ff00 	.word	0x2000ff00

00013818 <net_if_call_link_cb>:
	sys_slist_find_and_remove(&link_callbacks, &link->node);
}

void net_if_call_link_cb(struct net_if *iface, struct net_linkaddr *lladdr,
			 int status)
{
   13818:	b580      	push	{r7, lr}
   1381a:	b086      	sub	sp, #24
   1381c:	af00      	add	r7, sp, #0
   1381e:	60f8      	str	r0, [r7, #12]
   13820:	60b9      	str	r1, [r7, #8]
   13822:	607a      	str	r2, [r7, #4]
	struct net_if_link_cb *link, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   13824:	4822      	ldr	r0, [pc, #136]	; (138b0 <net_if_call_link_cb+0x98>)
   13826:	f011 fac0 	bl	24daa <sys_slist_peek_head>
   1382a:	4603      	mov	r3, r0
   1382c:	2b00      	cmp	r3, #0
   1382e:	d004      	beq.n	1383a <net_if_call_link_cb+0x22>
   13830:	481f      	ldr	r0, [pc, #124]	; (138b0 <net_if_call_link_cb+0x98>)
   13832:	f011 faba 	bl	24daa <sys_slist_peek_head>
   13836:	4603      	mov	r3, r0
   13838:	e000      	b.n	1383c <net_if_call_link_cb+0x24>
   1383a:	2300      	movs	r3, #0
   1383c:	617b      	str	r3, [r7, #20]
   1383e:	697b      	ldr	r3, [r7, #20]
   13840:	2b00      	cmp	r3, #0
   13842:	d00e      	beq.n	13862 <net_if_call_link_cb+0x4a>
   13844:	697b      	ldr	r3, [r7, #20]
   13846:	4618      	mov	r0, r3
   13848:	f011 fac6 	bl	24dd8 <sys_slist_peek_next>
   1384c:	4603      	mov	r3, r0
   1384e:	2b00      	cmp	r3, #0
   13850:	d005      	beq.n	1385e <net_if_call_link_cb+0x46>
   13852:	697b      	ldr	r3, [r7, #20]
   13854:	4618      	mov	r0, r3
   13856:	f011 fabf 	bl	24dd8 <sys_slist_peek_next>
   1385a:	4603      	mov	r3, r0
   1385c:	e002      	b.n	13864 <net_if_call_link_cb+0x4c>
   1385e:	2300      	movs	r3, #0
   13860:	e000      	b.n	13864 <net_if_call_link_cb+0x4c>
   13862:	2300      	movs	r3, #0
   13864:	613b      	str	r3, [r7, #16]
   13866:	e01b      	b.n	138a0 <net_if_call_link_cb+0x88>
		link->cb(iface, lladdr, status);
   13868:	697b      	ldr	r3, [r7, #20]
   1386a:	685b      	ldr	r3, [r3, #4]
   1386c:	687a      	ldr	r2, [r7, #4]
   1386e:	68b9      	ldr	r1, [r7, #8]
   13870:	68f8      	ldr	r0, [r7, #12]
   13872:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   13874:	693b      	ldr	r3, [r7, #16]
   13876:	617b      	str	r3, [r7, #20]
   13878:	697b      	ldr	r3, [r7, #20]
   1387a:	2b00      	cmp	r3, #0
   1387c:	d00e      	beq.n	1389c <net_if_call_link_cb+0x84>
   1387e:	697b      	ldr	r3, [r7, #20]
   13880:	4618      	mov	r0, r3
   13882:	f011 faa9 	bl	24dd8 <sys_slist_peek_next>
   13886:	4603      	mov	r3, r0
   13888:	2b00      	cmp	r3, #0
   1388a:	d005      	beq.n	13898 <net_if_call_link_cb+0x80>
   1388c:	697b      	ldr	r3, [r7, #20]
   1388e:	4618      	mov	r0, r3
   13890:	f011 faa2 	bl	24dd8 <sys_slist_peek_next>
   13894:	4603      	mov	r3, r0
   13896:	e002      	b.n	1389e <net_if_call_link_cb+0x86>
   13898:	2300      	movs	r3, #0
   1389a:	e000      	b.n	1389e <net_if_call_link_cb+0x86>
   1389c:	2300      	movs	r3, #0
   1389e:	613b      	str	r3, [r7, #16]
   138a0:	697b      	ldr	r3, [r7, #20]
   138a2:	2b00      	cmp	r3, #0
   138a4:	d1e0      	bne.n	13868 <net_if_call_link_cb+0x50>
	}
}
   138a6:	bf00      	nop
   138a8:	3718      	adds	r7, #24
   138aa:	46bd      	mov	sp, r7
   138ac:	bd80      	pop	{r7, pc}
   138ae:	bf00      	nop
   138b0:	20004068 	.word	0x20004068

000138b4 <need_calc_checksum>:

static bool need_calc_checksum(struct net_if *iface, enum ethernet_hw_caps caps)
{
   138b4:	b580      	push	{r7, lr}
   138b6:	b082      	sub	sp, #8
   138b8:	af00      	add	r7, sp, #0
   138ba:	6078      	str	r0, [r7, #4]
   138bc:	460b      	mov	r3, r1
   138be:	807b      	strh	r3, [r7, #2]
#if defined(CONFIG_NET_L2_ETHERNET)
	if (net_if_l2(iface) != &NET_L2_GET_NAME(ETHERNET)) {
   138c0:	6878      	ldr	r0, [r7, #4]
   138c2:	f011 faf8 	bl	24eb6 <net_if_l2>
   138c6:	4602      	mov	r2, r0
   138c8:	4b0a      	ldr	r3, [pc, #40]	; (138f4 <need_calc_checksum+0x40>)
   138ca:	429a      	cmp	r2, r3
   138cc:	d001      	beq.n	138d2 <need_calc_checksum+0x1e>
		return true;
   138ce:	2301      	movs	r3, #1
   138d0:	e00c      	b.n	138ec <need_calc_checksum+0x38>
	}

	return !(net_eth_get_hw_capabilities(iface) & caps);
   138d2:	6878      	ldr	r0, [r7, #4]
   138d4:	f011 fb7d 	bl	24fd2 <net_eth_get_hw_capabilities>
   138d8:	4603      	mov	r3, r0
   138da:	461a      	mov	r2, r3
   138dc:	887b      	ldrh	r3, [r7, #2]
   138de:	4013      	ands	r3, r2
   138e0:	b29b      	uxth	r3, r3
   138e2:	2b00      	cmp	r3, #0
   138e4:	bf0c      	ite	eq
   138e6:	2301      	moveq	r3, #1
   138e8:	2300      	movne	r3, #0
   138ea:	b2db      	uxtb	r3, r3
#else
	return true;
#endif
}
   138ec:	4618      	mov	r0, r3
   138ee:	3708      	adds	r7, #8
   138f0:	46bd      	mov	sp, r7
   138f2:	bd80      	pop	{r7, pc}
   138f4:	0002c740 	.word	0x0002c740

000138f8 <net_if_get_by_index>:
{
	return need_calc_checksum(iface, ETHERNET_HW_RX_CHKSUM_OFFLOAD);
}

struct net_if *net_if_get_by_index(int index)
{
   138f8:	b580      	push	{r7, lr}
   138fa:	b084      	sub	sp, #16
   138fc:	af00      	add	r7, sp, #0
   138fe:	6078      	str	r0, [r7, #4]
	if (index <= 0) {
   13900:	687b      	ldr	r3, [r7, #4]
   13902:	2b00      	cmp	r3, #0
   13904:	dc01      	bgt.n	1390a <net_if_get_by_index+0x12>
		return NULL;
   13906:	2300      	movs	r3, #0
   13908:	e012      	b.n	13930 <net_if_get_by_index+0x38>
	}

	if (&__net_if_start[index - 1] >= __net_if_end) {
   1390a:	687b      	ldr	r3, [r7, #4]
   1390c:	3b01      	subs	r3, #1
   1390e:	015b      	lsls	r3, r3, #5
   13910:	4a09      	ldr	r2, [pc, #36]	; (13938 <net_if_get_by_index+0x40>)
   13912:	4413      	add	r3, r2
   13914:	4a09      	ldr	r2, [pc, #36]	; (1393c <net_if_get_by_index+0x44>)
   13916:	4293      	cmp	r3, r2
   13918:	d305      	bcc.n	13926 <net_if_get_by_index+0x2e>
		NET_DBG("Index %d is too large", index);
   1391a:	f011 fa6e 	bl	24dfa <_is_user_context>
   1391e:	4603      	mov	r3, r0
   13920:	73fb      	strb	r3, [r7, #15]
		return NULL;
   13922:	2300      	movs	r3, #0
   13924:	e004      	b.n	13930 <net_if_get_by_index+0x38>
	}

	return &__net_if_start[index - 1];
   13926:	687b      	ldr	r3, [r7, #4]
   13928:	3b01      	subs	r3, #1
   1392a:	015b      	lsls	r3, r3, #5
   1392c:	4a02      	ldr	r2, [pc, #8]	; (13938 <net_if_get_by_index+0x40>)
   1392e:	4413      	add	r3, r2
}
   13930:	4618      	mov	r0, r3
   13932:	3710      	adds	r7, #16
   13934:	46bd      	mov	sp, r7
   13936:	bd80      	pop	{r7, pc}
   13938:	2000fee0 	.word	0x2000fee0
   1393c:	2000ff00 	.word	0x2000ff00

00013940 <net_if_get_by_iface>:

int net_if_get_by_iface(struct net_if *iface)
{
   13940:	b480      	push	{r7}
   13942:	b083      	sub	sp, #12
   13944:	af00      	add	r7, sp, #0
   13946:	6078      	str	r0, [r7, #4]
	if (!(iface >= __net_if_start && iface < __net_if_end)) {
   13948:	687b      	ldr	r3, [r7, #4]
   1394a:	4a0a      	ldr	r2, [pc, #40]	; (13974 <net_if_get_by_iface+0x34>)
   1394c:	4293      	cmp	r3, r2
   1394e:	d303      	bcc.n	13958 <net_if_get_by_iface+0x18>
   13950:	687b      	ldr	r3, [r7, #4]
   13952:	4a09      	ldr	r2, [pc, #36]	; (13978 <net_if_get_by_iface+0x38>)
   13954:	4293      	cmp	r3, r2
   13956:	d302      	bcc.n	1395e <net_if_get_by_iface+0x1e>
		return -1;
   13958:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1395c:	e004      	b.n	13968 <net_if_get_by_iface+0x28>
	}

	return (iface - __net_if_start) + 1;
   1395e:	687b      	ldr	r3, [r7, #4]
   13960:	4a04      	ldr	r2, [pc, #16]	; (13974 <net_if_get_by_iface+0x34>)
   13962:	1a9b      	subs	r3, r3, r2
   13964:	115b      	asrs	r3, r3, #5
   13966:	3301      	adds	r3, #1
}
   13968:	4618      	mov	r0, r3
   1396a:	370c      	adds	r7, #12
   1396c:	46bd      	mov	sp, r7
   1396e:	bc80      	pop	{r7}
   13970:	4770      	bx	lr
   13972:	bf00      	nop
   13974:	2000fee0 	.word	0x2000fee0
   13978:	2000ff00 	.word	0x2000ff00

0001397c <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   1397c:	b580      	push	{r7, lr}
   1397e:	b086      	sub	sp, #24
   13980:	af00      	add	r7, sp, #0
   13982:	6078      	str	r0, [r7, #4]
	int status;

	NET_DBG("iface %p", iface);
   13984:	f011 fa39 	bl	24dfa <_is_user_context>
   13988:	4603      	mov	r3, r0
   1398a:	75fb      	strb	r3, [r7, #23]

	if (atomic_test_bit(iface->if_dev->flags, NET_IF_UP)) {
   1398c:	687b      	ldr	r3, [r7, #4]
   1398e:	681b      	ldr	r3, [r3, #0]
   13990:	330c      	adds	r3, #12
   13992:	2100      	movs	r1, #0
   13994:	4618      	mov	r0, r3
   13996:	f011 f9aa 	bl	24cee <atomic_test_bit>
   1399a:	4603      	mov	r3, r0
   1399c:	2b00      	cmp	r3, #0
   1399e:	d001      	beq.n	139a4 <net_if_up+0x28>
		return 0;
   139a0:	2300      	movs	r3, #0
   139a2:	e023      	b.n	139ec <net_if_up+0x70>
		goto done;
	}
#endif

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface)->enable) {
   139a4:	6878      	ldr	r0, [r7, #4]
   139a6:	f011 fa86 	bl	24eb6 <net_if_l2>
   139aa:	4603      	mov	r3, r0
   139ac:	689b      	ldr	r3, [r3, #8]
   139ae:	2b00      	cmp	r3, #0
   139b0:	d00d      	beq.n	139ce <net_if_up+0x52>
		goto done;
	}

	/* Notify L2 to enable the interface */
	status = net_if_l2(iface)->enable(iface, true);
   139b2:	6878      	ldr	r0, [r7, #4]
   139b4:	f011 fa7f 	bl	24eb6 <net_if_l2>
   139b8:	4603      	mov	r3, r0
   139ba:	689b      	ldr	r3, [r3, #8]
   139bc:	2101      	movs	r1, #1
   139be:	6878      	ldr	r0, [r7, #4]
   139c0:	4798      	blx	r3
   139c2:	6138      	str	r0, [r7, #16]
	if (status < 0) {
   139c4:	693b      	ldr	r3, [r7, #16]
   139c6:	2b00      	cmp	r3, #0
   139c8:	da03      	bge.n	139d2 <net_if_up+0x56>
		return status;
   139ca:	693b      	ldr	r3, [r7, #16]
   139cc:	e00e      	b.n	139ec <net_if_up+0x70>
		goto done;
   139ce:	bf00      	nop
   139d0:	e000      	b.n	139d4 <net_if_up+0x58>
	}

done:
   139d2:	bf00      	nop
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);

	atomic_set_bit(iface->if_dev->flags, NET_IF_UP);
   139d4:	687b      	ldr	r3, [r7, #4]
   139d6:	681b      	ldr	r3, [r3, #0]
   139d8:	330c      	adds	r3, #12
   139da:	2100      	movs	r1, #0
   139dc:	4618      	mov	r0, r3
   139de:	f011 f9c0 	bl	24d62 <atomic_set_bit>

#if defined(CONFIG_NET_IPV4_AUTO)
	net_ipv4_autoconf_start(iface);
#endif

	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);
   139e2:	6879      	ldr	r1, [r7, #4]
   139e4:	4803      	ldr	r0, [pc, #12]	; (139f4 <net_if_up+0x78>)
   139e6:	f011 fae5 	bl	24fb4 <net_mgmt_event_notify>

	return 0;
   139ea:	2300      	movs	r3, #0
}
   139ec:	4618      	mov	r0, r3
   139ee:	3718      	adds	r7, #24
   139f0:	46bd      	mov	sp, r7
   139f2:	bd80      	pop	{r7, pc}
   139f4:	d0010002 	.word	0xd0010002

000139f8 <net_if_down>:

	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);
}

int net_if_down(struct net_if *iface)
{
   139f8:	b580      	push	{r7, lr}
   139fa:	b086      	sub	sp, #24
   139fc:	af00      	add	r7, sp, #0
   139fe:	6078      	str	r0, [r7, #4]
	int status;

	NET_DBG("iface %p", iface);
   13a00:	f011 f9fb 	bl	24dfa <_is_user_context>
   13a04:	4603      	mov	r3, r0
   13a06:	75fb      	strb	r3, [r7, #23]
		goto done;
	}
#endif

	/* If the L2 does not support enable just clear the flag */
	if (!net_if_l2(iface)->enable) {
   13a08:	6878      	ldr	r0, [r7, #4]
   13a0a:	f011 fa54 	bl	24eb6 <net_if_l2>
   13a0e:	4603      	mov	r3, r0
   13a10:	689b      	ldr	r3, [r3, #8]
   13a12:	2b00      	cmp	r3, #0
   13a14:	d00d      	beq.n	13a32 <net_if_down+0x3a>
		goto done;
	}

	/* Notify L2 to disable the interface */
	status = net_if_l2(iface)->enable(iface, false);
   13a16:	6878      	ldr	r0, [r7, #4]
   13a18:	f011 fa4d 	bl	24eb6 <net_if_l2>
   13a1c:	4603      	mov	r3, r0
   13a1e:	689b      	ldr	r3, [r3, #8]
   13a20:	2100      	movs	r1, #0
   13a22:	6878      	ldr	r0, [r7, #4]
   13a24:	4798      	blx	r3
   13a26:	6138      	str	r0, [r7, #16]
	if (status < 0) {
   13a28:	693b      	ldr	r3, [r7, #16]
   13a2a:	2b00      	cmp	r3, #0
   13a2c:	da03      	bge.n	13a36 <net_if_down+0x3e>
		return status;
   13a2e:	693b      	ldr	r3, [r7, #16]
   13a30:	e00e      	b.n	13a50 <net_if_down+0x58>
		goto done;
   13a32:	bf00      	nop
   13a34:	e000      	b.n	13a38 <net_if_down+0x40>
	}

done:
   13a36:	bf00      	nop
	atomic_clear_bit(iface->if_dev->flags, NET_IF_UP);
   13a38:	687b      	ldr	r3, [r7, #4]
   13a3a:	681b      	ldr	r3, [r3, #0]
   13a3c:	330c      	adds	r3, #12
   13a3e:	2100      	movs	r1, #0
   13a40:	4618      	mov	r0, r3
   13a42:	f011 f973 	bl	24d2c <atomic_clear_bit>

	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);
   13a46:	6879      	ldr	r1, [r7, #4]
   13a48:	4803      	ldr	r0, [pc, #12]	; (13a58 <net_if_down+0x60>)
   13a4a:	f011 fab3 	bl	24fb4 <net_mgmt_event_notify>

	return 0;
   13a4e:	2300      	movs	r3, #0
}
   13a50:	4618      	mov	r0, r3
   13a52:	3718      	adds	r7, #24
   13a54:	46bd      	mov	sp, r7
   13a56:	bd80      	pop	{r7, pc}
   13a58:	d0010001 	.word	0xd0010001

00013a5c <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP */

void net_if_init(void)
{
   13a5c:	b580      	push	{r7, lr}
   13a5e:	b08a      	sub	sp, #40	; 0x28
   13a60:	af00      	add	r7, sp, #0
	int if_count;
#if defined(CONFIG_NET_IPV4) || defined(CONFIG_NET_IPV6)
	int i;
#endif

	NET_DBG("");
   13a62:	f011 f9ca 	bl	24dfa <_is_user_context>
   13a66:	4603      	mov	r3, r0
   13a68:	74fb      	strb	r3, [r7, #19]

	net_tc_tx_init();
   13a6a:	f000 fa1b 	bl	13ea4 <net_tc_tx_init>
#if defined(CONFIG_NET_IPV6)
	k_delayed_work_init(&address_lifetime_timer, address_lifetime_timeout);
	k_delayed_work_init(&prefix_lifetime_timer, prefix_lifetime_timeout);
#endif

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   13a6e:	4b1f      	ldr	r3, [pc, #124]	; (13aec <net_if_init+0x90>)
   13a70:	617b      	str	r3, [r7, #20]
   13a72:	2300      	movs	r3, #0
   13a74:	627b      	str	r3, [r7, #36]	; 0x24
   13a76:	e008      	b.n	13a8a <net_if_init+0x2e>
	     iface++, if_count++) {
		init_iface(iface);
   13a78:	6978      	ldr	r0, [r7, #20]
   13a7a:	f011 fb42 	bl	25102 <init_iface>
	     iface++, if_count++) {
   13a7e:	697b      	ldr	r3, [r7, #20]
   13a80:	3320      	adds	r3, #32
   13a82:	617b      	str	r3, [r7, #20]
   13a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13a86:	3301      	adds	r3, #1
   13a88:	627b      	str	r3, [r7, #36]	; 0x24
	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   13a8a:	697b      	ldr	r3, [r7, #20]
   13a8c:	4a18      	ldr	r2, [pc, #96]	; (13af0 <net_if_init+0x94>)
   13a8e:	4293      	cmp	r3, r2
   13a90:	d1f2      	bne.n	13a78 <net_if_init+0x1c>
	}

	if (iface == __net_if_start) {
   13a92:	697b      	ldr	r3, [r7, #20]
   13a94:	4a15      	ldr	r2, [pc, #84]	; (13aec <net_if_init+0x90>)
   13a96:	4293      	cmp	r3, r2
   13a98:	d105      	bne.n	13aa6 <net_if_init+0x4a>
		NET_ERR("There is no network interface to work with!");
   13a9a:	f011 f9ae 	bl	24dfa <_is_user_context>
   13a9e:	4603      	mov	r3, r0
   13aa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		return;
   13aa4:	e01e      	b.n	13ae4 <net_if_init+0x88>
	}

#if defined(CONFIG_NET_IPV4)
	if (if_count > ARRAY_SIZE(ipv4_addresses)) {
   13aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13aa8:	2b01      	cmp	r3, #1
   13aaa:	d908      	bls.n	13abe <net_if_init+0x62>
		NET_WARN("You have %lu IPv4 net_if addresses but %d "
   13aac:	f011 f9a5 	bl	24dfa <_is_user_context>
   13ab0:	4603      	mov	r3, r0
   13ab2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			 "network interfaces", ARRAY_SIZE(ipv4_addresses),
			 if_count);
		NET_WARN("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT "
   13ab6:	f011 f9a0 	bl	24dfa <_is_user_context>
   13aba:	4603      	mov	r3, r0
   13abc:	76fb      	strb	r3, [r7, #27]
			 "value.");
	}

	for (i = 0; i < ARRAY_SIZE(ipv4_addresses); i++) {
   13abe:	2300      	movs	r3, #0
   13ac0:	61fb      	str	r3, [r7, #28]
   13ac2:	e00c      	b.n	13ade <net_if_init+0x82>
		ipv4_addresses[i].ipv4.ttl = CONFIG_NET_INITIAL_TTL;
   13ac4:	490b      	ldr	r1, [pc, #44]	; (13af4 <net_if_init+0x98>)
   13ac6:	69fa      	ldr	r2, [r7, #28]
   13ac8:	4613      	mov	r3, r2
   13aca:	009b      	lsls	r3, r3, #2
   13acc:	4413      	add	r3, r2
   13ace:	00db      	lsls	r3, r3, #3
   13ad0:	440b      	add	r3, r1
   13ad2:	3320      	adds	r3, #32
   13ad4:	2240      	movs	r2, #64	; 0x40
   13ad6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < ARRAY_SIZE(ipv4_addresses); i++) {
   13ad8:	69fb      	ldr	r3, [r7, #28]
   13ada:	3301      	adds	r3, #1
   13adc:	61fb      	str	r3, [r7, #28]
   13ade:	69fb      	ldr	r3, [r7, #28]
   13ae0:	2b00      	cmp	r3, #0
   13ae2:	d0ef      	beq.n	13ac4 <net_if_init+0x68>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   13ae4:	3728      	adds	r7, #40	; 0x28
   13ae6:	46bd      	mov	sp, r7
   13ae8:	bd80      	pop	{r7, pc}
   13aea:	bf00      	nop
   13aec:	2000fee0 	.word	0x2000fee0
   13af0:	2000ff00 	.word	0x2000ff00
   13af4:	20004040 	.word	0x20004040

00013af8 <net_if_post_init>:

void net_if_post_init(void)
{
   13af8:	b580      	push	{r7, lr}
   13afa:	b082      	sub	sp, #8
   13afc:	af00      	add	r7, sp, #0
	struct net_if *iface;

	NET_DBG("");
   13afe:	f011 f97c 	bl	24dfa <_is_user_context>
   13b02:	4603      	mov	r3, r0
   13b04:	70fb      	strb	r3, [r7, #3]

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   13b06:	4b08      	ldr	r3, [pc, #32]	; (13b28 <net_if_post_init+0x30>)
   13b08:	607b      	str	r3, [r7, #4]
   13b0a:	e005      	b.n	13b18 <net_if_post_init+0x20>
		net_if_up(iface);
   13b0c:	6878      	ldr	r0, [r7, #4]
   13b0e:	f7ff ff35 	bl	1397c <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   13b12:	687b      	ldr	r3, [r7, #4]
   13b14:	3320      	adds	r3, #32
   13b16:	607b      	str	r3, [r7, #4]
   13b18:	687b      	ldr	r3, [r7, #4]
   13b1a:	4a04      	ldr	r2, [pc, #16]	; (13b2c <net_if_post_init+0x34>)
   13b1c:	4293      	cmp	r3, r2
   13b1e:	d1f5      	bne.n	13b0c <net_if_post_init+0x14>
	}
}
   13b20:	bf00      	nop
   13b22:	3708      	adds	r7, #8
   13b24:	46bd      	mov	sp, r7
   13b26:	bd80      	pop	{r7, pc}
   13b28:	2000fee0 	.word	0x2000fee0
   13b2c:	2000ff00 	.word	0x2000ff00

00013b30 <net_pkt_get_frag>:
				       const char *caller, int line)
#else
struct net_buf *net_pkt_get_frag(struct net_pkt *pkt,
				 s32_t timeout)
#endif
{
   13b30:	b580      	push	{r7, lr}
   13b32:	b082      	sub	sp, #8
   13b34:	af00      	add	r7, sp, #0
   13b36:	6078      	str	r0, [r7, #4]
   13b38:	6039      	str	r1, [r7, #0]
		return net_pkt_get_reserve_data(context->data_pool(), timeout);
#endif /* NET_LOG_LEVEL >= LOG_LEVEL_DBG */
	}
#endif /* CONFIG_NET_CONTEXT_NET_PKT_POOL */

	if (pkt->slab == &rx_pkts) {
   13b3a:	687b      	ldr	r3, [r7, #4]
   13b3c:	691b      	ldr	r3, [r3, #16]
   13b3e:	4a08      	ldr	r2, [pc, #32]	; (13b60 <net_pkt_get_frag+0x30>)
   13b40:	4293      	cmp	r3, r2
   13b42:	d104      	bne.n	13b4e <net_pkt_get_frag+0x1e>
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
		return net_pkt_get_reserve_rx_data_debug(timeout,
							 caller, line);
#else
		return net_pkt_get_reserve_rx_data(timeout);
   13b44:	6838      	ldr	r0, [r7, #0]
   13b46:	f000 f80d 	bl	13b64 <net_pkt_get_reserve_rx_data>
   13b4a:	4603      	mov	r3, r0
   13b4c:	e003      	b.n	13b56 <net_pkt_get_frag+0x26>
	}

#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return net_pkt_get_reserve_tx_data_debug(timeout, caller, line);
#else
	return net_pkt_get_reserve_tx_data(timeout);
   13b4e:	6838      	ldr	r0, [r7, #0]
   13b50:	f000 f818 	bl	13b84 <net_pkt_get_reserve_tx_data>
   13b54:	4603      	mov	r3, r0
#endif
}
   13b56:	4618      	mov	r0, r3
   13b58:	3708      	adds	r7, #8
   13b5a:	46bd      	mov	sp, r7
   13b5c:	bd80      	pop	{r7, pc}
   13b5e:	bf00      	nop
   13b60:	2000fd9c 	.word	0x2000fd9c

00013b64 <net_pkt_get_reserve_rx_data>:
}

#else /* NET_LOG_LEVEL >= LOG_LEVEL_DBG */

struct net_buf *net_pkt_get_reserve_rx_data(s32_t timeout)
{
   13b64:	b580      	push	{r7, lr}
   13b66:	b082      	sub	sp, #8
   13b68:	af00      	add	r7, sp, #0
   13b6a:	6078      	str	r0, [r7, #4]
	return net_pkt_get_reserve_data(&rx_bufs, timeout);
   13b6c:	6879      	ldr	r1, [r7, #4]
   13b6e:	4804      	ldr	r0, [pc, #16]	; (13b80 <net_pkt_get_reserve_rx_data+0x1c>)
   13b70:	f011 ff2c 	bl	259cc <net_pkt_get_reserve_data>
   13b74:	4603      	mov	r3, r0
}
   13b76:	4618      	mov	r0, r3
   13b78:	3708      	adds	r7, #8
   13b7a:	46bd      	mov	sp, r7
   13b7c:	bd80      	pop	{r7, pc}
   13b7e:	bf00      	nop
   13b80:	2000fe94 	.word	0x2000fe94

00013b84 <net_pkt_get_reserve_tx_data>:

struct net_buf *net_pkt_get_reserve_tx_data(s32_t timeout)
{
   13b84:	b580      	push	{r7, lr}
   13b86:	b082      	sub	sp, #8
   13b88:	af00      	add	r7, sp, #0
   13b8a:	6078      	str	r0, [r7, #4]
	return net_pkt_get_reserve_data(&tx_bufs, timeout);
   13b8c:	6879      	ldr	r1, [r7, #4]
   13b8e:	4804      	ldr	r0, [pc, #16]	; (13ba0 <net_pkt_get_reserve_tx_data+0x1c>)
   13b90:	f011 ff1c 	bl	259cc <net_pkt_get_reserve_data>
   13b94:	4603      	mov	r3, r0
}
   13b96:	4618      	mov	r0, r3
   13b98:	3708      	adds	r7, #8
   13b9a:	46bd      	mov	sp, r7
   13b9c:	bd80      	pop	{r7, pc}
   13b9e:	bf00      	nop
   13ba0:	2000feb4 	.word	0x2000feb4

00013ba4 <pkt_buffer_length>:

static size_t pkt_buffer_length(struct net_pkt *pkt,
				size_t size,
				enum net_ip_protocol proto,
				size_t existing)
{
   13ba4:	b580      	push	{r7, lr}
   13ba6:	b086      	sub	sp, #24
   13ba8:	af00      	add	r7, sp, #0
   13baa:	60f8      	str	r0, [r7, #12]
   13bac:	60b9      	str	r1, [r7, #8]
   13bae:	603b      	str	r3, [r7, #0]
   13bb0:	4613      	mov	r3, r2
   13bb2:	71fb      	strb	r3, [r7, #7]
	sa_family_t family = net_pkt_family(pkt);
   13bb4:	68f8      	ldr	r0, [r7, #12]
   13bb6:	f011 fe93 	bl	258e0 <net_pkt_family>
   13bba:	4603      	mov	r3, r0
   13bbc:	827b      	strh	r3, [r7, #18]
	size_t max_len;

	if (net_pkt_iface(pkt)) {
   13bbe:	68f8      	ldr	r0, [r7, #12]
   13bc0:	f011 fe64 	bl	2588c <net_pkt_iface>
   13bc4:	4603      	mov	r3, r0
   13bc6:	2b00      	cmp	r3, #0
   13bc8:	d009      	beq.n	13bde <pkt_buffer_length+0x3a>
		max_len = net_if_get_mtu(net_pkt_iface(pkt));
   13bca:	68f8      	ldr	r0, [r7, #12]
   13bcc:	f011 fe5e 	bl	2588c <net_pkt_iface>
   13bd0:	4603      	mov	r3, r0
   13bd2:	4618      	mov	r0, r3
   13bd4:	f011 fe4e 	bl	25874 <net_if_get_mtu>
   13bd8:	4603      	mov	r3, r0
   13bda:	617b      	str	r3, [r7, #20]
   13bdc:	e001      	b.n	13be2 <pkt_buffer_length+0x3e>
	} else {
		max_len = 0;
   13bde:	2300      	movs	r3, #0
   13be0:	617b      	str	r3, [r7, #20]
			 */
			max_len = size;
		}

		max_len = MAX(max_len, NET_IPV6_MTU);
	} else if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   13be2:	8a7b      	ldrh	r3, [r7, #18]
   13be4:	2b01      	cmp	r3, #1
   13be6:	d107      	bne.n	13bf8 <pkt_buffer_length+0x54>
		max_len = MAX(max_len, NET_IPV4_MTU);
   13be8:	697b      	ldr	r3, [r7, #20]
   13bea:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
   13bee:	bf38      	it	cc
   13bf0:	f44f 7310 	movcc.w	r3, #576	; 0x240
   13bf4:	617b      	str	r3, [r7, #20]
   13bf6:	e010      	b.n	13c1a <pkt_buffer_length+0x76>
	} else { /* family == AF_UNSPEC */
#if defined (CONFIG_NET_L2_ETHERNET)
		if (net_if_l2(net_pkt_iface(pkt)) ==
   13bf8:	68f8      	ldr	r0, [r7, #12]
   13bfa:	f011 fe47 	bl	2588c <net_pkt_iface>
   13bfe:	4603      	mov	r3, r0
   13c00:	4618      	mov	r0, r3
   13c02:	f011 fe1f 	bl	25844 <net_if_l2>
   13c06:	4602      	mov	r2, r0
   13c08:	4b0a      	ldr	r3, [pc, #40]	; (13c34 <pkt_buffer_length+0x90>)
   13c0a:	429a      	cmp	r2, r3
   13c0c:	d103      	bne.n	13c16 <pkt_buffer_length+0x72>
		    &NET_L2_GET_NAME(ETHERNET)) {
			max_len += sizeof(struct net_eth_hdr);
   13c0e:	697b      	ldr	r3, [r7, #20]
   13c10:	330e      	adds	r3, #14
   13c12:	617b      	str	r3, [r7, #20]
   13c14:	e001      	b.n	13c1a <pkt_buffer_length+0x76>
#endif /* CONFIG_NET_L2_ETHERNET */
		{
			/* Other L2 are not checked as the pkt MTU in this case
			 * is based on the IP layer (IPv6 most of the time).
			 */
			max_len = size;
   13c16:	68bb      	ldr	r3, [r7, #8]
   13c18:	617b      	str	r3, [r7, #20]
		}
	}

	max_len -= existing;
   13c1a:	697a      	ldr	r2, [r7, #20]
   13c1c:	683b      	ldr	r3, [r7, #0]
   13c1e:	1ad3      	subs	r3, r2, r3
   13c20:	617b      	str	r3, [r7, #20]

	return MIN(size, max_len);
   13c22:	697a      	ldr	r2, [r7, #20]
   13c24:	68bb      	ldr	r3, [r7, #8]
   13c26:	4293      	cmp	r3, r2
   13c28:	bf28      	it	cs
   13c2a:	4613      	movcs	r3, r2
}
   13c2c:	4618      	mov	r0, r3
   13c2e:	3718      	adds	r7, #24
   13c30:	46bd      	mov	sp, r7
   13c32:	bd80      	pop	{r7, pc}
   13c34:	0002c740 	.word	0x0002c740

00013c38 <net_pkt_alloc_buffer>:
int net_pkt_alloc_buffer(struct net_pkt *pkt,
			 size_t size,
			 enum net_ip_protocol proto,
			 s32_t timeout)
#endif
{
   13c38:	b590      	push	{r4, r7, lr}
   13c3a:	b093      	sub	sp, #76	; 0x4c
   13c3c:	af00      	add	r7, sp, #0
   13c3e:	60f8      	str	r0, [r7, #12]
   13c40:	60b9      	str	r1, [r7, #8]
   13c42:	603b      	str	r3, [r7, #0]
   13c44:	4613      	mov	r3, r2
   13c46:	71fb      	strb	r3, [r7, #7]
	u32_t alloc_start = k_uptime_get_32();
   13c48:	f011 fdd2 	bl	257f0 <k_uptime_get_32>
   13c4c:	6438      	str	r0, [r7, #64]	; 0x40
	struct net_buf_pool *pool = NULL;
   13c4e:	2300      	movs	r3, #0
   13c50:	63fb      	str	r3, [r7, #60]	; 0x3c
	size_t alloc_len = 0;
   13c52:	2300      	movs	r3, #0
   13c54:	63bb      	str	r3, [r7, #56]	; 0x38
	size_t hdr_len = 0;
   13c56:	2300      	movs	r3, #0
   13c58:	647b      	str	r3, [r7, #68]	; 0x44
	struct net_buf *buf;

	if (!size && proto == 0 && net_pkt_family(pkt) == AF_UNSPEC) {
   13c5a:	68bb      	ldr	r3, [r7, #8]
   13c5c:	2b00      	cmp	r3, #0
   13c5e:	d10a      	bne.n	13c76 <net_pkt_alloc_buffer+0x3e>
   13c60:	79fb      	ldrb	r3, [r7, #7]
   13c62:	2b00      	cmp	r3, #0
   13c64:	d107      	bne.n	13c76 <net_pkt_alloc_buffer+0x3e>
   13c66:	68f8      	ldr	r0, [r7, #12]
   13c68:	f011 fe3a 	bl	258e0 <net_pkt_family>
   13c6c:	4603      	mov	r3, r0
   13c6e:	2b00      	cmp	r3, #0
   13c70:	d101      	bne.n	13c76 <net_pkt_alloc_buffer+0x3e>
		return 0;
   13c72:	2300      	movs	r3, #0
   13c74:	e069      	b.n	13d4a <net_pkt_alloc_buffer+0x112>
	}

	if (k_is_in_isr()) {
   13c76:	f004 f837 	bl	17ce8 <k_is_in_isr>
   13c7a:	4603      	mov	r3, r0
   13c7c:	2b00      	cmp	r3, #0
   13c7e:	d001      	beq.n	13c84 <net_pkt_alloc_buffer+0x4c>
		timeout = K_NO_WAIT;
   13c80:	2300      	movs	r3, #0
   13c82:	603b      	str	r3, [r7, #0]
	}

	/* Verifying existing buffer and take into account free space there */
	alloc_len = pkt_get_size(pkt) - net_pkt_get_len(pkt);
   13c84:	68f8      	ldr	r0, [r7, #12]
   13c86:	f011 ffce 	bl	25c26 <pkt_get_size>
   13c8a:	4604      	mov	r4, r0
   13c8c:	68f8      	ldr	r0, [r7, #12]
   13c8e:	f011 fe57 	bl	25940 <net_pkt_get_len>
   13c92:	4603      	mov	r3, r0
   13c94:	1ae3      	subs	r3, r4, r3
   13c96:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!alloc_len) {
   13c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13c9a:	2b00      	cmp	r3, #0
   13c9c:	d10a      	bne.n	13cb4 <net_pkt_alloc_buffer+0x7c>
		/* In case of no free space, it will account for header
		 * space estimation
		 */
		hdr_len = pkt_estimate_headers_length(pkt,
						      net_pkt_family(pkt),
   13c9e:	68f8      	ldr	r0, [r7, #12]
   13ca0:	f011 fe1e 	bl	258e0 <net_pkt_family>
   13ca4:	4603      	mov	r3, r0
		hdr_len = pkt_estimate_headers_length(pkt,
   13ca6:	b29b      	uxth	r3, r3
   13ca8:	79fa      	ldrb	r2, [r7, #7]
   13caa:	4619      	mov	r1, r3
   13cac:	68f8      	ldr	r0, [r7, #12]
   13cae:	f011 ff8c 	bl	25bca <pkt_estimate_headers_length>
   13cb2:	6478      	str	r0, [r7, #68]	; 0x44
						      proto);
	}

	/* Calculate the maximum that can be allocated depending on size */
	alloc_len = pkt_buffer_length(pkt, size + hdr_len, proto, alloc_len);
   13cb4:	68ba      	ldr	r2, [r7, #8]
   13cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13cb8:	18d1      	adds	r1, r2, r3
   13cba:	79fa      	ldrb	r2, [r7, #7]
   13cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13cbe:	68f8      	ldr	r0, [r7, #12]
   13cc0:	f7ff ff70 	bl	13ba4 <pkt_buffer_length>
   13cc4:	63b8      	str	r0, [r7, #56]	; 0x38

	NET_DBG("Data allocation maximum size %zu (requested %zu)",
   13cc6:	f011 fd8c 	bl	257e2 <_is_user_context>
   13cca:	4603      	mov	r3, r0
   13ccc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		alloc_len, size);

	if (pkt->context) {
   13cd0:	68fb      	ldr	r3, [r7, #12]
   13cd2:	6a1b      	ldr	r3, [r3, #32]
   13cd4:	2b00      	cmp	r3, #0
   13cd6:	d001      	beq.n	13cdc <net_pkt_alloc_buffer+0xa4>
		pool = get_data_pool(pkt->context);
   13cd8:	2300      	movs	r3, #0
   13cda:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (!pool) {
   13cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13cde:	2b00      	cmp	r3, #0
   13ce0:	d108      	bne.n	13cf4 <net_pkt_alloc_buffer+0xbc>
		pool = pkt->slab == &tx_pkts ? &tx_bufs : &rx_bufs;
   13ce2:	68fb      	ldr	r3, [r7, #12]
   13ce4:	691b      	ldr	r3, [r3, #16]
   13ce6:	4a1b      	ldr	r2, [pc, #108]	; (13d54 <net_pkt_alloc_buffer+0x11c>)
   13ce8:	4293      	cmp	r3, r2
   13cea:	d101      	bne.n	13cf0 <net_pkt_alloc_buffer+0xb8>
   13cec:	4b1a      	ldr	r3, [pc, #104]	; (13d58 <net_pkt_alloc_buffer+0x120>)
   13cee:	e000      	b.n	13cf2 <net_pkt_alloc_buffer+0xba>
   13cf0:	4b1a      	ldr	r3, [pc, #104]	; (13d5c <net_pkt_alloc_buffer+0x124>)
   13cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   13cf4:	683b      	ldr	r3, [r7, #0]
   13cf6:	2b00      	cmp	r3, #0
   13cf8:	d011      	beq.n	13d1e <net_pkt_alloc_buffer+0xe6>
   13cfa:	683b      	ldr	r3, [r7, #0]
   13cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   13d00:	d00d      	beq.n	13d1e <net_pkt_alloc_buffer+0xe6>
		u32_t diff = k_uptime_get_32() - alloc_start;
   13d02:	f011 fd75 	bl	257f0 <k_uptime_get_32>
   13d06:	4602      	mov	r2, r0
   13d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13d0a:	1ad3      	subs	r3, r2, r3
   13d0c:	633b      	str	r3, [r7, #48]	; 0x30

		timeout -= MIN(timeout, diff);
   13d0e:	683a      	ldr	r2, [r7, #0]
   13d10:	6839      	ldr	r1, [r7, #0]
   13d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13d14:	428b      	cmp	r3, r1
   13d16:	bf28      	it	cs
   13d18:	460b      	movcs	r3, r1
   13d1a:	1ad3      	subs	r3, r2, r3
   13d1c:	603b      	str	r3, [r7, #0]
	}

#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	buf = pkt_alloc_buffer(pool, alloc_len, timeout, caller, line);
#else
	buf = pkt_alloc_buffer(pool, alloc_len, timeout);
   13d1e:	683a      	ldr	r2, [r7, #0]
   13d20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   13d22:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   13d24:	f011 fef7 	bl	25b16 <pkt_alloc_buffer>
   13d28:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

	if (!buf) {
   13d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13d2c:	2b00      	cmp	r3, #0
   13d2e:	d107      	bne.n	13d40 <net_pkt_alloc_buffer+0x108>
		NET_ERR("Data buffer allocation failed.");
   13d30:	f011 fd57 	bl	257e2 <_is_user_context>
   13d34:	4603      	mov	r3, r0
   13d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		return -ENOMEM;
   13d3a:	f06f 030b 	mvn.w	r3, #11
   13d3e:	e004      	b.n	13d4a <net_pkt_alloc_buffer+0x112>
	}

	net_pkt_append_buffer(pkt, buf);
   13d40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   13d42:	68f8      	ldr	r0, [r7, #12]
   13d44:	f012 f89c 	bl	25e80 <net_pkt_append_buffer>

	return 0;
   13d48:	2300      	movs	r3, #0
}
   13d4a:	4618      	mov	r0, r3
   13d4c:	374c      	adds	r7, #76	; 0x4c
   13d4e:	46bd      	mov	sp, r7
   13d50:	bd90      	pop	{r4, r7, pc}
   13d52:	bf00      	nop
   13d54:	2000fdb8 	.word	0x2000fdb8
   13d58:	2000feb4 	.word	0x2000feb4
   13d5c:	2000fe94 	.word	0x2000fe94

00013d60 <net_pkt_alloc_with_buffer>:
					  size_t size,
					  sa_family_t family,
					  enum net_ip_protocol proto,
					  s32_t timeout)
#endif
{
   13d60:	b580      	push	{r7, lr}
   13d62:	b086      	sub	sp, #24
   13d64:	af02      	add	r7, sp, #8
   13d66:	60f8      	str	r0, [r7, #12]
   13d68:	60b9      	str	r1, [r7, #8]
   13d6a:	4611      	mov	r1, r2
   13d6c:	461a      	mov	r2, r3
   13d6e:	460b      	mov	r3, r1
   13d70:	80fb      	strh	r3, [r7, #6]
   13d72:	4613      	mov	r3, r2
   13d74:	717b      	strb	r3, [r7, #5]
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
				     proto, timeout, caller, line);
#else
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
   13d76:	88fa      	ldrh	r2, [r7, #6]
   13d78:	69bb      	ldr	r3, [r7, #24]
   13d7a:	9301      	str	r3, [sp, #4]
   13d7c:	797b      	ldrb	r3, [r7, #5]
   13d7e:	9300      	str	r3, [sp, #0]
   13d80:	4613      	mov	r3, r2
   13d82:	68ba      	ldr	r2, [r7, #8]
   13d84:	68f9      	ldr	r1, [r7, #12]
   13d86:	4804      	ldr	r0, [pc, #16]	; (13d98 <net_pkt_alloc_with_buffer+0x38>)
   13d88:	f012 f830 	bl	25dec <pkt_alloc_with_buffer>
   13d8c:	4603      	mov	r3, r0
				     proto, timeout);
#endif
}
   13d8e:	4618      	mov	r0, r3
   13d90:	3710      	adds	r7, #16
   13d92:	46bd      	mov	sp, r7
   13d94:	bd80      	pop	{r7, pc}
   13d96:	bf00      	nop
   13d98:	2000fdb8 	.word	0x2000fdb8

00013d9c <net_tc_submit_to_tx_queue>:

static struct net_traffic_class tx_classes[NET_TC_TX_COUNT];
static struct net_traffic_class rx_classes[NET_TC_RX_COUNT];

void net_tc_submit_to_tx_queue(u8_t tc, struct net_pkt *pkt)
{
   13d9c:	b590      	push	{r4, r7, lr}
   13d9e:	b083      	sub	sp, #12
   13da0:	af00      	add	r7, sp, #0
   13da2:	4603      	mov	r3, r0
   13da4:	6039      	str	r1, [r7, #0]
   13da6:	71fb      	strb	r3, [r7, #7]
	k_work_submit_to_queue(&tx_classes[tc].work_q, net_pkt_work(pkt));
   13da8:	79fa      	ldrb	r2, [r7, #7]
   13daa:	4613      	mov	r3, r2
   13dac:	015b      	lsls	r3, r3, #5
   13dae:	4413      	add	r3, r2
   13db0:	009b      	lsls	r3, r3, #2
   13db2:	4a07      	ldr	r2, [pc, #28]	; (13dd0 <net_tc_submit_to_tx_queue+0x34>)
   13db4:	189c      	adds	r4, r3, r2
   13db6:	6838      	ldr	r0, [r7, #0]
   13db8:	f012 fc5f 	bl	2667a <net_pkt_work>
   13dbc:	4603      	mov	r3, r0
   13dbe:	4619      	mov	r1, r3
   13dc0:	4620      	mov	r0, r4
   13dc2:	f012 fc32 	bl	2662a <k_work_submit_to_queue>
}
   13dc6:	bf00      	nop
   13dc8:	370c      	adds	r7, #12
   13dca:	46bd      	mov	sp, r7
   13dcc:	bd90      	pop	{r4, r7, pc}
   13dce:	bf00      	nop
   13dd0:	20004070 	.word	0x20004070

00013dd4 <net_tc_submit_to_rx_queue>:

void net_tc_submit_to_rx_queue(u8_t tc, struct net_pkt *pkt)
{
   13dd4:	b590      	push	{r4, r7, lr}
   13dd6:	b083      	sub	sp, #12
   13dd8:	af00      	add	r7, sp, #0
   13dda:	4603      	mov	r3, r0
   13ddc:	6039      	str	r1, [r7, #0]
   13dde:	71fb      	strb	r3, [r7, #7]
	k_work_submit_to_queue(&rx_classes[tc].work_q, net_pkt_work(pkt));
   13de0:	79fa      	ldrb	r2, [r7, #7]
   13de2:	4613      	mov	r3, r2
   13de4:	015b      	lsls	r3, r3, #5
   13de6:	4413      	add	r3, r2
   13de8:	009b      	lsls	r3, r3, #2
   13dea:	4a07      	ldr	r2, [pc, #28]	; (13e08 <net_tc_submit_to_rx_queue+0x34>)
   13dec:	189c      	adds	r4, r3, r2
   13dee:	6838      	ldr	r0, [r7, #0]
   13df0:	f012 fc43 	bl	2667a <net_pkt_work>
   13df4:	4603      	mov	r3, r0
   13df6:	4619      	mov	r1, r3
   13df8:	4620      	mov	r0, r4
   13dfa:	f012 fc16 	bl	2662a <k_work_submit_to_queue>
}
   13dfe:	bf00      	nop
   13e00:	370c      	adds	r7, #12
   13e02:	46bd      	mov	sp, r7
   13e04:	bd90      	pop	{r4, r7, pc}
   13e06:	bf00      	nop
   13e08:	200040f4 	.word	0x200040f4

00013e0c <net_tx_priority2tc>:

int net_tx_priority2tc(enum net_priority prio)
{
   13e0c:	b480      	push	{r7}
   13e0e:	b083      	sub	sp, #12
   13e10:	af00      	add	r7, sp, #0
   13e12:	4603      	mov	r3, r0
   13e14:	71fb      	strb	r3, [r7, #7]
	if (prio > NET_PRIORITY_NC) {
   13e16:	79fb      	ldrb	r3, [r7, #7]
   13e18:	2b07      	cmp	r3, #7
   13e1a:	d901      	bls.n	13e20 <net_tx_priority2tc+0x14>
		/* Use default value suggested in 802.1Q */
		prio = NET_PRIORITY_BE;
   13e1c:	2300      	movs	r3, #0
   13e1e:	71fb      	strb	r3, [r7, #7]
	}

	return tx_prio2tc_map[prio];
   13e20:	4b04      	ldr	r3, [pc, #16]	; (13e34 <net_tx_priority2tc+0x28>)
   13e22:	681a      	ldr	r2, [r3, #0]
   13e24:	79fb      	ldrb	r3, [r7, #7]
   13e26:	4413      	add	r3, r2
   13e28:	781b      	ldrb	r3, [r3, #0]
}
   13e2a:	4618      	mov	r0, r3
   13e2c:	370c      	adds	r7, #12
   13e2e:	46bd      	mov	sp, r7
   13e30:	bc80      	pop	{r7}
   13e32:	4770      	bx	lr
   13e34:	2000fc1c 	.word	0x2000fc1c

00013e38 <net_rx_priority2tc>:

int net_rx_priority2tc(enum net_priority prio)
{
   13e38:	b480      	push	{r7}
   13e3a:	b083      	sub	sp, #12
   13e3c:	af00      	add	r7, sp, #0
   13e3e:	4603      	mov	r3, r0
   13e40:	71fb      	strb	r3, [r7, #7]
	if (prio > NET_PRIORITY_NC) {
   13e42:	79fb      	ldrb	r3, [r7, #7]
   13e44:	2b07      	cmp	r3, #7
   13e46:	d901      	bls.n	13e4c <net_rx_priority2tc+0x14>
		/* Use default value suggested in 802.1Q */
		prio = NET_PRIORITY_BE;
   13e48:	2300      	movs	r3, #0
   13e4a:	71fb      	strb	r3, [r7, #7]
	}

	return rx_prio2tc_map[prio];
   13e4c:	4b04      	ldr	r3, [pc, #16]	; (13e60 <net_rx_priority2tc+0x28>)
   13e4e:	681a      	ldr	r2, [r3, #0]
   13e50:	79fb      	ldrb	r3, [r7, #7]
   13e52:	4413      	add	r3, r2
   13e54:	781b      	ldrb	r3, [r3, #0]
}
   13e56:	4618      	mov	r0, r3
   13e58:	370c      	adds	r7, #12
   13e5a:	46bd      	mov	sp, r7
   13e5c:	bc80      	pop	{r7}
   13e5e:	4770      	bx	lr
   13e60:	2000fc20 	.word	0x2000fc20

00013e64 <tx_tc2thread>:

/* Convert traffic class to thread priority */
static u8_t tx_tc2thread(u8_t tc)
{
   13e64:	b480      	push	{r7}
   13e66:	b083      	sub	sp, #12
   13e68:	af00      	add	r7, sp, #0
   13e6a:	4603      	mov	r3, r0
   13e6c:	71fb      	strb	r3, [r7, #7]
	BUILD_ASSERT_MSG(NET_TC_TX_COUNT <= CONFIG_NUM_COOP_PRIORITIES,
			 "Too many traffic classes");

	NET_ASSERT(tc < ARRAY_SIZE(thread_priorities));

	return thread_priorities[tc];
   13e6e:	79fb      	ldrb	r3, [r7, #7]
   13e70:	4a03      	ldr	r2, [pc, #12]	; (13e80 <tx_tc2thread+0x1c>)
   13e72:	5cd3      	ldrb	r3, [r2, r3]
}
   13e74:	4618      	mov	r0, r3
   13e76:	370c      	adds	r7, #12
   13e78:	46bd      	mov	sp, r7
   13e7a:	bc80      	pop	{r7}
   13e7c:	4770      	bx	lr
   13e7e:	bf00      	nop
   13e80:	0002ef68 	.word	0x0002ef68

00013e84 <rx_tc2thread>:

/* Convert traffic class to thread priority */
static u8_t rx_tc2thread(u8_t tc)
{
   13e84:	b480      	push	{r7}
   13e86:	b083      	sub	sp, #12
   13e88:	af00      	add	r7, sp, #0
   13e8a:	4603      	mov	r3, r0
   13e8c:	71fb      	strb	r3, [r7, #7]
	BUILD_ASSERT_MSG(NET_TC_RX_COUNT <= CONFIG_NUM_COOP_PRIORITIES,
			 "Too many traffic classes");

	NET_ASSERT(tc < ARRAY_SIZE(thread_priorities));

	return thread_priorities[tc];
   13e8e:	79fb      	ldrb	r3, [r7, #7]
   13e90:	4a03      	ldr	r2, [pc, #12]	; (13ea0 <rx_tc2thread+0x1c>)
   13e92:	5cd3      	ldrb	r3, [r2, r3]
}
   13e94:	4618      	mov	r0, r3
   13e96:	370c      	adds	r7, #12
   13e98:	46bd      	mov	sp, r7
   13e9a:	bc80      	pop	{r7}
   13e9c:	4770      	bx	lr
   13e9e:	bf00      	nop
   13ea0:	0002ef6c 	.word	0x0002ef6c

00013ea4 <net_tc_tx_init>:
/* Create workqueue for each traffic class we are using. All the network
 * traffic goes through these classes. There needs to be at least one traffic
 * class in the system.
 */
void net_tc_tx_init(void)
{
   13ea4:	b580      	push	{r7, lr}
   13ea6:	b092      	sub	sp, #72	; 0x48
   13ea8:	af00      	add	r7, sp, #0

#if defined(CONFIG_NET_STATISTICS)
	net_if_foreach(net_tc_tx_stats_priority_setup, NULL);
#endif

	for (i = 0; i < NET_TC_TX_COUNT; i++) {
   13eaa:	2300      	movs	r3, #0
   13eac:	643b      	str	r3, [r7, #64]	; 0x40
   13eae:	e03b      	b.n	13f28 <net_tc_tx_init+0x84>
		u8_t thread_priority;

		thread_priority = tx_tc2thread(i);
   13eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13eb2:	b2db      	uxtb	r3, r3
   13eb4:	4618      	mov	r0, r3
   13eb6:	f7ff ffd5 	bl	13e64 <tx_tc2thread>
   13eba:	4603      	mov	r3, r0
   13ebc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		tx_classes[i].tc = thread_priority;
   13ec0:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
   13ec4:	481c      	ldr	r0, [pc, #112]	; (13f38 <net_tc_tx_init+0x94>)
   13ec6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   13ec8:	4613      	mov	r3, r2
   13eca:	015b      	lsls	r3, r3, #5
   13ecc:	4413      	add	r3, r2
   13ece:	009b      	lsls	r3, r3, #2
   13ed0:	4403      	add	r3, r0
   13ed2:	3380      	adds	r3, #128	; 0x80
   13ed4:	6019      	str	r1, [r3, #0]
		NET_STACK_GET_NAME(TX, tx_stack, 0)[i].stack = tx_stack[i];
		NET_STACK_GET_NAME(TX, tx_stack, 0)[i].prio = thread_priority;
		NET_STACK_GET_NAME(TX, tx_stack, 0)[i].idx = i;
#endif

		NET_DBG("[%d] Starting TX queue %p stack %p size %zd "
   13ed6:	f012 fba1 	bl	2661c <_is_user_context>
   13eda:	4603      	mov	r3, r0
   13edc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			"prio %d (%d)", i,
			&tx_classes[i].work_q.queue, TX_STACK(i),
			K_THREAD_STACK_SIZEOF(tx_stack[i]),
			thread_priority, K_PRIO_COOP(thread_priority));

		k_work_q_start(&tx_classes[i].work_q,
   13ee0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   13ee2:	4613      	mov	r3, r2
   13ee4:	015b      	lsls	r3, r3, #5
   13ee6:	4413      	add	r3, r2
   13ee8:	009b      	lsls	r3, r3, #2
   13eea:	4a13      	ldr	r2, [pc, #76]	; (13f38 <net_tc_tx_init+0x94>)
   13eec:	1898      	adds	r0, r3, r2
			       tx_stack[i],
   13eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13ef0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   13ef4:	fb02 f303 	mul.w	r3, r2, r3
   13ef8:	4a10      	ldr	r2, [pc, #64]	; (13f3c <net_tc_tx_init+0x98>)
   13efa:	1899      	adds	r1, r3, r2
		k_work_q_start(&tx_classes[i].work_q,
   13efc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   13f00:	3b10      	subs	r3, #16
   13f02:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   13f06:	f004 f845 	bl	17f94 <k_work_q_start>
			       K_THREAD_STACK_SIZEOF(tx_stack[i]),
			       K_PRIO_COOP(thread_priority));
		k_thread_name_set(&tx_classes[i].work_q.thread, "tx_workq");
   13f0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   13f0c:	4613      	mov	r3, r2
   13f0e:	015b      	lsls	r3, r3, #5
   13f10:	4413      	add	r3, r2
   13f12:	009b      	lsls	r3, r3, #2
   13f14:	3310      	adds	r3, #16
   13f16:	4a08      	ldr	r2, [pc, #32]	; (13f38 <net_tc_tx_init+0x94>)
   13f18:	4413      	add	r3, r2
   13f1a:	4909      	ldr	r1, [pc, #36]	; (13f40 <net_tc_tx_init+0x9c>)
   13f1c:	4618      	mov	r0, r3
   13f1e:	f012 fb9e 	bl	2665e <k_thread_name_set>
	for (i = 0; i < NET_TC_TX_COUNT; i++) {
   13f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13f24:	3301      	adds	r3, #1
   13f26:	643b      	str	r3, [r7, #64]	; 0x40
   13f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13f2a:	2b00      	cmp	r3, #0
   13f2c:	ddc0      	ble.n	13eb0 <net_tc_tx_init+0xc>
	}
}
   13f2e:	bf00      	nop
   13f30:	3748      	adds	r7, #72	; 0x48
   13f32:	46bd      	mov	sp, r7
   13f34:	bd80      	pop	{r7, pc}
   13f36:	bf00      	nop
   13f38:	20004070 	.word	0x20004070
   13f3c:	20007658 	.word	0x20007658
   13f40:	0002e71c 	.word	0x0002e71c

00013f44 <net_tc_rx_init>:

void net_tc_rx_init(void)
{
   13f44:	b580      	push	{r7, lr}
   13f46:	b092      	sub	sp, #72	; 0x48
   13f48:	af00      	add	r7, sp, #0

#if defined(CONFIG_NET_STATISTICS)
	net_if_foreach(net_tc_rx_stats_priority_setup, NULL);
#endif

	for (i = 0; i < NET_TC_RX_COUNT; i++) {
   13f4a:	2300      	movs	r3, #0
   13f4c:	643b      	str	r3, [r7, #64]	; 0x40
   13f4e:	e03b      	b.n	13fc8 <net_tc_rx_init+0x84>
		u8_t thread_priority;

		thread_priority = rx_tc2thread(i);
   13f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13f52:	b2db      	uxtb	r3, r3
   13f54:	4618      	mov	r0, r3
   13f56:	f7ff ff95 	bl	13e84 <rx_tc2thread>
   13f5a:	4603      	mov	r3, r0
   13f5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		rx_classes[i].tc = thread_priority;
   13f60:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
   13f64:	481c      	ldr	r0, [pc, #112]	; (13fd8 <net_tc_rx_init+0x94>)
   13f66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   13f68:	4613      	mov	r3, r2
   13f6a:	015b      	lsls	r3, r3, #5
   13f6c:	4413      	add	r3, r2
   13f6e:	009b      	lsls	r3, r3, #2
   13f70:	4403      	add	r3, r0
   13f72:	3380      	adds	r3, #128	; 0x80
   13f74:	6019      	str	r1, [r3, #0]
		NET_STACK_GET_NAME(RX, rx_stack, 0)[i].stack = rx_stack[i];
		NET_STACK_GET_NAME(RX, rx_stack, 0)[i].prio = thread_priority;
		NET_STACK_GET_NAME(RX, rx_stack, 0)[i].idx = i;
#endif

		NET_DBG("[%d] Starting RX queue %p stack %p size %zd "
   13f76:	f012 fb51 	bl	2661c <_is_user_context>
   13f7a:	4603      	mov	r3, r0
   13f7c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			"prio %d (%d)", i,
			&rx_classes[i].work_q.queue, RX_STACK(i),
			K_THREAD_STACK_SIZEOF(rx_stack[i]),
			thread_priority, K_PRIO_COOP(thread_priority));

		k_work_q_start(&rx_classes[i].work_q,
   13f80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   13f82:	4613      	mov	r3, r2
   13f84:	015b      	lsls	r3, r3, #5
   13f86:	4413      	add	r3, r2
   13f88:	009b      	lsls	r3, r3, #2
   13f8a:	4a13      	ldr	r2, [pc, #76]	; (13fd8 <net_tc_rx_init+0x94>)
   13f8c:	1898      	adds	r0, r3, r2
			       rx_stack[i],
   13f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13f90:	f240 52dc 	movw	r2, #1500	; 0x5dc
   13f94:	fb02 f303 	mul.w	r3, r2, r3
   13f98:	4a10      	ldr	r2, [pc, #64]	; (13fdc <net_tc_rx_init+0x98>)
   13f9a:	1899      	adds	r1, r3, r2
		k_work_q_start(&rx_classes[i].work_q,
   13f9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   13fa0:	3b10      	subs	r3, #16
   13fa2:	f240 52dc 	movw	r2, #1500	; 0x5dc
   13fa6:	f003 fff5 	bl	17f94 <k_work_q_start>
			       K_THREAD_STACK_SIZEOF(rx_stack[i]),
			       K_PRIO_COOP(thread_priority));
		k_thread_name_set(&rx_classes[i].work_q.thread, "rx_workq");
   13faa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   13fac:	4613      	mov	r3, r2
   13fae:	015b      	lsls	r3, r3, #5
   13fb0:	4413      	add	r3, r2
   13fb2:	009b      	lsls	r3, r3, #2
   13fb4:	3310      	adds	r3, #16
   13fb6:	4a08      	ldr	r2, [pc, #32]	; (13fd8 <net_tc_rx_init+0x94>)
   13fb8:	4413      	add	r3, r2
   13fba:	4909      	ldr	r1, [pc, #36]	; (13fe0 <net_tc_rx_init+0x9c>)
   13fbc:	4618      	mov	r0, r3
   13fbe:	f012 fb4e 	bl	2665e <k_thread_name_set>
	for (i = 0; i < NET_TC_RX_COUNT; i++) {
   13fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13fc4:	3301      	adds	r3, #1
   13fc6:	643b      	str	r3, [r7, #64]	; 0x40
   13fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13fca:	2b00      	cmp	r3, #0
   13fcc:	ddc0      	ble.n	13f50 <net_tc_rx_init+0xc>
	}
}
   13fce:	bf00      	nop
   13fd0:	3748      	adds	r7, #72	; 0x48
   13fd2:	46bd      	mov	sp, r7
   13fd4:	bd80      	pop	{r7, pc}
   13fd6:	bf00      	nop
   13fd8:	200040f4 	.word	0x200040f4
   13fdc:	20007b08 	.word	0x20007b08
   13fe0:	0002e728 	.word	0x0002e728

00013fe4 <net_icmpv4_register_handler>:
	return err;

}

void net_icmpv4_register_handler(struct net_icmpv4_handler *handler)
{
   13fe4:	b580      	push	{r7, lr}
   13fe6:	b082      	sub	sp, #8
   13fe8:	af00      	add	r7, sp, #0
   13fea:	6078      	str	r0, [r7, #4]
	sys_slist_prepend(&handlers, &handler->node);
   13fec:	687b      	ldr	r3, [r7, #4]
   13fee:	4619      	mov	r1, r3
   13ff0:	4803      	ldr	r0, [pc, #12]	; (14000 <net_icmpv4_register_handler+0x1c>)
   13ff2:	f012 ff29 	bl	26e48 <sys_slist_prepend>
}
   13ff6:	bf00      	nop
   13ff8:	3708      	adds	r7, #8
   13ffa:	46bd      	mov	sp, r7
   13ffc:	bd80      	pop	{r7, pc}
   13ffe:	bf00      	nop
   14000:	20004178 	.word	0x20004178

00014004 <net_icmpv4_input>:
	sys_slist_find_and_remove(&handlers, &handler->node);
}

enum net_verdict net_icmpv4_input(struct net_pkt *pkt,
				  struct net_ipv4_hdr *ip_hdr)
{
   14004:	b580      	push	{r7, lr}
   14006:	b090      	sub	sp, #64	; 0x40
   14008:	af00      	add	r7, sp, #0
   1400a:	6078      	str	r0, [r7, #4]
   1400c:	6039      	str	r1, [r7, #0]
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   1400e:	2300      	movs	r3, #0
   14010:	62fb      	str	r3, [r7, #44]	; 0x2c
   14012:	2304      	movs	r3, #4
   14014:	633b      	str	r3, [r7, #48]	; 0x30
					      struct net_icmp_hdr);
	struct net_icmp_hdr *icmp_hdr;
	struct net_icmpv4_handler *cb;

	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
   14016:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1401a:	4619      	mov	r1, r3
   1401c:	6878      	ldr	r0, [r7, #4]
   1401e:	f012 fa61 	bl	264e4 <net_pkt_get_data>
   14022:	63b8      	str	r0, [r7, #56]	; 0x38
	if (!icmp_hdr) {
   14024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14026:	2b00      	cmp	r3, #0
   14028:	d106      	bne.n	14038 <net_icmpv4_input+0x34>
		NET_DBG("DROP: NULL ICMPv4 header");
   1402a:	f012 ff30 	bl	26e8e <_is_user_context>
   1402e:	4603      	mov	r3, r0
   14030:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		return NET_DROP;
   14034:	2302      	movs	r3, #2
   14036:	e067      	b.n	14108 <net_icmpv4_input+0x104>
	}

	if (net_calc_chksum_icmpv4(pkt) != 0U) {
   14038:	6878      	ldr	r0, [r7, #4]
   1403a:	f013 f803 	bl	27044 <net_calc_chksum_icmpv4>
   1403e:	4603      	mov	r3, r0
   14040:	2b00      	cmp	r3, #0
   14042:	d005      	beq.n	14050 <net_icmpv4_input+0x4c>
		NET_DBG("DROP: Invalid checksum");
   14044:	f012 ff23 	bl	26e8e <_is_user_context>
   14048:	4603      	mov	r3, r0
   1404a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		goto drop;
   1404e:	e05a      	b.n	14106 <net_icmpv4_input+0x102>
	}

	if (net_ipv4_is_addr_bcast(net_pkt_iface(pkt), &ip_hdr->dst) &&
   14050:	6878      	ldr	r0, [r7, #4]
   14052:	f012 ffac 	bl	26fae <net_pkt_iface>
   14056:	4602      	mov	r2, r0
   14058:	683b      	ldr	r3, [r7, #0]
   1405a:	3310      	adds	r3, #16
   1405c:	4619      	mov	r1, r3
   1405e:	4610      	mov	r0, r2
   14060:	f012 ff8b 	bl	26f7a <net_ipv4_is_addr_bcast>
   14064:	4603      	mov	r3, r0
   14066:	2b00      	cmp	r3, #0
   14068:	d005      	beq.n	14076 <net_icmpv4_input+0x72>
	    (!IS_ENABLED(CONFIG_NET_ICMPV4_ACCEPT_BROADCAST) ||
	     icmp_hdr->type != NET_ICMPV4_ECHO_REQUEST)) {
		NET_DBG("DROP: broadcast pkt");
   1406a:	f012 ff10 	bl	26e8e <_is_user_context>
   1406e:	4603      	mov	r3, r0
   14070:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		goto drop;
   14074:	e047      	b.n	14106 <net_icmpv4_input+0x102>
	}

	net_pkt_acknowledge_data(pkt, &icmp_access);
   14076:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1407a:	4619      	mov	r1, r3
   1407c:	6878      	ldr	r0, [r7, #4]
   1407e:	f012 ffd1 	bl	27024 <net_pkt_acknowledge_data>

	NET_DBG("ICMPv4 packet received type %d code %d",
   14082:	f012 ff04 	bl	26e8e <_is_user_context>
   14086:	4603      	mov	r3, r0
   14088:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		icmp_hdr->type, icmp_hdr->code);

	net_stats_update_icmp_recv(net_pkt_iface(pkt));

	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1408c:	4820      	ldr	r0, [pc, #128]	; (14110 <net_icmpv4_input+0x10c>)
   1408e:	f012 fea8 	bl	26de2 <sys_slist_peek_head>
   14092:	4603      	mov	r3, r0
   14094:	2b00      	cmp	r3, #0
   14096:	d004      	beq.n	140a2 <net_icmpv4_input+0x9e>
   14098:	481d      	ldr	r0, [pc, #116]	; (14110 <net_icmpv4_input+0x10c>)
   1409a:	f012 fea2 	bl	26de2 <sys_slist_peek_head>
   1409e:	4603      	mov	r3, r0
   140a0:	e000      	b.n	140a4 <net_icmpv4_input+0xa0>
   140a2:	2300      	movs	r3, #0
   140a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   140a6:	e02a      	b.n	140fe <net_icmpv4_input+0xfa>
		if (cb->type == icmp_hdr->type &&
   140a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   140aa:	7a1a      	ldrb	r2, [r3, #8]
   140ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   140ae:	781b      	ldrb	r3, [r3, #0]
   140b0:	429a      	cmp	r2, r3
   140b2:	d110      	bne.n	140d6 <net_icmpv4_input+0xd2>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
   140b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   140b6:	7a5a      	ldrb	r2, [r3, #9]
   140b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   140ba:	785b      	ldrb	r3, [r3, #1]
		if (cb->type == icmp_hdr->type &&
   140bc:	429a      	cmp	r2, r3
   140be:	d003      	beq.n	140c8 <net_icmpv4_input+0xc4>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
   140c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   140c2:	7a5b      	ldrb	r3, [r3, #9]
   140c4:	2b00      	cmp	r3, #0
   140c6:	d106      	bne.n	140d6 <net_icmpv4_input+0xd2>
			return cb->handler(pkt, ip_hdr);
   140c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   140ca:	685b      	ldr	r3, [r3, #4]
   140cc:	6839      	ldr	r1, [r7, #0]
   140ce:	6878      	ldr	r0, [r7, #4]
   140d0:	4798      	blx	r3
   140d2:	4603      	mov	r3, r0
   140d4:	e018      	b.n	14108 <net_icmpv4_input+0x104>
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   140d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   140d8:	2b00      	cmp	r3, #0
   140da:	d00e      	beq.n	140fa <net_icmpv4_input+0xf6>
   140dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   140de:	4618      	mov	r0, r3
   140e0:	f012 fea1 	bl	26e26 <sys_slist_peek_next>
   140e4:	4603      	mov	r3, r0
   140e6:	2b00      	cmp	r3, #0
   140e8:	d005      	beq.n	140f6 <net_icmpv4_input+0xf2>
   140ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   140ec:	4618      	mov	r0, r3
   140ee:	f012 fe9a 	bl	26e26 <sys_slist_peek_next>
   140f2:	4603      	mov	r3, r0
   140f4:	e002      	b.n	140fc <net_icmpv4_input+0xf8>
   140f6:	2300      	movs	r3, #0
   140f8:	e000      	b.n	140fc <net_icmpv4_input+0xf8>
   140fa:	2300      	movs	r3, #0
   140fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   140fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14100:	2b00      	cmp	r3, #0
   14102:	d1d1      	bne.n	140a8 <net_icmpv4_input+0xa4>
		}
	}

drop:
   14104:	bf00      	nop
	net_stats_update_icmp_drop(net_pkt_iface(pkt));

	return NET_DROP;
   14106:	2302      	movs	r3, #2
}
   14108:	4618      	mov	r0, r3
   1410a:	3740      	adds	r7, #64	; 0x40
   1410c:	46bd      	mov	sp, r7
   1410e:	bd80      	pop	{r7, pc}
   14110:	20004178 	.word	0x20004178

00014114 <net_icmpv4_init>:
	.code = 0,
	.handler = icmpv4_handle_echo_request,
};

void net_icmpv4_init(void)
{
   14114:	b580      	push	{r7, lr}
   14116:	af00      	add	r7, sp, #0
	net_icmpv4_register_handler(&echo_request_handler);
   14118:	4802      	ldr	r0, [pc, #8]	; (14124 <net_icmpv4_init+0x10>)
   1411a:	f7ff ff63 	bl	13fe4 <net_icmpv4_register_handler>
}
   1411e:	bf00      	nop
   14120:	bd80      	pop	{r7, pc}
   14122:	bf00      	nop
   14124:	2000fc24 	.word	0x2000fc24

00014128 <net_ipv4_unspecified_address>:

	return 0;
}

const struct in_addr *net_ipv4_unspecified_address(void)
{
   14128:	b480      	push	{r7}
   1412a:	af00      	add	r7, sp, #0
	static const struct in_addr addr;

	return &addr;
   1412c:	4b02      	ldr	r3, [pc, #8]	; (14138 <net_ipv4_unspecified_address+0x10>)
}
   1412e:	4618      	mov	r0, r3
   14130:	46bd      	mov	sp, r7
   14132:	bc80      	pop	{r7}
   14134:	4770      	bx	lr
   14136:	bf00      	nop
   14138:	0002ef70 	.word	0x0002ef70

0001413c <net_ipv4_broadcast_address>:

const struct in_addr *net_ipv4_broadcast_address(void)
{
   1413c:	b480      	push	{r7}
   1413e:	af00      	add	r7, sp, #0
	static const struct in_addr addr = { { { 255, 255, 255, 255 } } };

	return &addr;
   14140:	4b02      	ldr	r3, [pc, #8]	; (1414c <net_ipv4_broadcast_address+0x10>)
}
   14142:	4618      	mov	r0, r3
   14144:	46bd      	mov	sp, r7
   14146:	bc80      	pop	{r7}
   14148:	4770      	bx	lr
   1414a:	bf00      	nop
   1414c:	0002ef74 	.word	0x0002ef74

00014150 <mgmt_push_event>:
static s16_t in_event;
static s16_t out_event;

static inline void mgmt_push_event(u32_t mgmt_event, struct net_if *iface,
				   void *info, size_t length)
{
   14150:	b580      	push	{r7, lr}
   14152:	b086      	sub	sp, #24
   14154:	af00      	add	r7, sp, #0
   14156:	60f8      	str	r0, [r7, #12]
   14158:	60b9      	str	r1, [r7, #8]
   1415a:	607a      	str	r2, [r7, #4]
   1415c:	603b      	str	r3, [r7, #0]
#ifndef CONFIG_NET_MGMT_EVENT_INFO
	ARG_UNUSED(info);
	ARG_UNUSED(length);
#endif /* CONFIG_NET_MGMT_EVENT_INFO */

	k_sem_take(&net_mgmt_lock, K_FOREVER);
   1415e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14162:	4825      	ldr	r0, [pc, #148]	; (141f8 <mgmt_push_event+0xa8>)
   14164:	f013 fdbc 	bl	27ce0 <k_sem_take>

	i_idx = in_event + 1;
   14168:	4b24      	ldr	r3, [pc, #144]	; (141fc <mgmt_push_event+0xac>)
   1416a:	f9b3 3000 	ldrsh.w	r3, [r3]
   1416e:	3301      	adds	r3, #1
   14170:	82fb      	strh	r3, [r7, #22]
	if (i_idx == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   14172:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   14176:	2b02      	cmp	r3, #2
   14178:	d101      	bne.n	1417e <mgmt_push_event+0x2e>
		i_idx = 0;
   1417a:	2300      	movs	r3, #0
   1417c:	82fb      	strh	r3, [r7, #22]
	} else {
		events[i_idx].info_length = 0;
	}
#endif /* CONFIG_NET_MGMT_EVENT_INFO */

	events[i_idx].event = mgmt_event;
   1417e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   14182:	491f      	ldr	r1, [pc, #124]	; (14200 <mgmt_push_event+0xb0>)
   14184:	68fa      	ldr	r2, [r7, #12]
   14186:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	events[i_idx].iface = iface;
   1418a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   1418e:	4a1c      	ldr	r2, [pc, #112]	; (14200 <mgmt_push_event+0xb0>)
   14190:	00db      	lsls	r3, r3, #3
   14192:	4413      	add	r3, r2
   14194:	68ba      	ldr	r2, [r7, #8]
   14196:	605a      	str	r2, [r3, #4]

	if (i_idx == out_event) {
   14198:	4b1a      	ldr	r3, [pc, #104]	; (14204 <mgmt_push_event+0xb4>)
   1419a:	f9b3 3000 	ldrsh.w	r3, [r3]
   1419e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
   141a2:	429a      	cmp	r2, r3
   141a4:	d115      	bne.n	141d2 <mgmt_push_event+0x82>
		u16_t o_idx = out_event + 1;
   141a6:	4b17      	ldr	r3, [pc, #92]	; (14204 <mgmt_push_event+0xb4>)
   141a8:	f9b3 3000 	ldrsh.w	r3, [r3]
   141ac:	3301      	adds	r3, #1
   141ae:	b21b      	sxth	r3, r3
   141b0:	82bb      	strh	r3, [r7, #20]

		if (o_idx == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   141b2:	8abb      	ldrh	r3, [r7, #20]
   141b4:	2b02      	cmp	r3, #2
   141b6:	d101      	bne.n	141bc <mgmt_push_event+0x6c>
			o_idx = 0U;
   141b8:	2300      	movs	r3, #0
   141ba:	82bb      	strh	r3, [r7, #20]
		}

		if (events[o_idx].event) {
   141bc:	8abb      	ldrh	r3, [r7, #20]
   141be:	4a10      	ldr	r2, [pc, #64]	; (14200 <mgmt_push_event+0xb0>)
   141c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   141c4:	2b00      	cmp	r3, #0
   141c6:	d00c      	beq.n	141e2 <mgmt_push_event+0x92>
			out_event = o_idx;
   141c8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
   141cc:	4b0d      	ldr	r3, [pc, #52]	; (14204 <mgmt_push_event+0xb4>)
   141ce:	801a      	strh	r2, [r3, #0]
   141d0:	e007      	b.n	141e2 <mgmt_push_event+0x92>
		}
	} else if (out_event < 0) {
   141d2:	4b0c      	ldr	r3, [pc, #48]	; (14204 <mgmt_push_event+0xb4>)
   141d4:	f9b3 3000 	ldrsh.w	r3, [r3]
   141d8:	2b00      	cmp	r3, #0
   141da:	da02      	bge.n	141e2 <mgmt_push_event+0x92>
		out_event = i_idx;
   141dc:	4a09      	ldr	r2, [pc, #36]	; (14204 <mgmt_push_event+0xb4>)
   141de:	8afb      	ldrh	r3, [r7, #22]
   141e0:	8013      	strh	r3, [r2, #0]
	}

	in_event = i_idx;
   141e2:	4a06      	ldr	r2, [pc, #24]	; (141fc <mgmt_push_event+0xac>)
   141e4:	8afb      	ldrh	r3, [r7, #22]
   141e6:	8013      	strh	r3, [r2, #0]

	k_sem_give(&net_mgmt_lock);
   141e8:	4803      	ldr	r0, [pc, #12]	; (141f8 <mgmt_push_event+0xa8>)
   141ea:	f013 fd87 	bl	27cfc <k_sem_give>
}
   141ee:	bf00      	nop
   141f0:	3718      	adds	r7, #24
   141f2:	46bd      	mov	sp, r7
   141f4:	bd80      	pop	{r7, pc}
   141f6:	bf00      	nop
   141f8:	2000fe40 	.word	0x2000fe40
   141fc:	20006236 	.word	0x20006236
   14200:	200041ec 	.word	0x200041ec
   14204:	20006238 	.word	0x20006238

00014208 <mgmt_pop_event>:

static inline struct mgmt_event_entry *mgmt_pop_event(void)
{
   14208:	b480      	push	{r7}
   1420a:	b083      	sub	sp, #12
   1420c:	af00      	add	r7, sp, #0
	s16_t o_idx;

	if (out_event < 0 || !events[out_event].event) {
   1420e:	4b1e      	ldr	r3, [pc, #120]	; (14288 <mgmt_pop_event+0x80>)
   14210:	f9b3 3000 	ldrsh.w	r3, [r3]
   14214:	2b00      	cmp	r3, #0
   14216:	db08      	blt.n	1422a <mgmt_pop_event+0x22>
   14218:	4b1b      	ldr	r3, [pc, #108]	; (14288 <mgmt_pop_event+0x80>)
   1421a:	f9b3 3000 	ldrsh.w	r3, [r3]
   1421e:	461a      	mov	r2, r3
   14220:	4b1a      	ldr	r3, [pc, #104]	; (1428c <mgmt_pop_event+0x84>)
   14222:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
   14226:	2b00      	cmp	r3, #0
   14228:	d101      	bne.n	1422e <mgmt_pop_event+0x26>
		return NULL;
   1422a:	2300      	movs	r3, #0
   1422c:	e026      	b.n	1427c <mgmt_pop_event+0x74>
	}

	o_idx = out_event;
   1422e:	4b16      	ldr	r3, [pc, #88]	; (14288 <mgmt_pop_event+0x80>)
   14230:	881b      	ldrh	r3, [r3, #0]
   14232:	80fb      	strh	r3, [r7, #6]
	out_event++;
   14234:	4b14      	ldr	r3, [pc, #80]	; (14288 <mgmt_pop_event+0x80>)
   14236:	f9b3 3000 	ldrsh.w	r3, [r3]
   1423a:	3301      	adds	r3, #1
   1423c:	b21a      	sxth	r2, r3
   1423e:	4b12      	ldr	r3, [pc, #72]	; (14288 <mgmt_pop_event+0x80>)
   14240:	801a      	strh	r2, [r3, #0]

	if (o_idx == in_event) {
   14242:	4b13      	ldr	r3, [pc, #76]	; (14290 <mgmt_pop_event+0x88>)
   14244:	f9b3 3000 	ldrsh.w	r3, [r3]
   14248:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   1424c:	429a      	cmp	r2, r3
   1424e:	d108      	bne.n	14262 <mgmt_pop_event+0x5a>
		in_event = -1;
   14250:	4b0f      	ldr	r3, [pc, #60]	; (14290 <mgmt_pop_event+0x88>)
   14252:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14256:	801a      	strh	r2, [r3, #0]
		out_event = -1;
   14258:	4b0b      	ldr	r3, [pc, #44]	; (14288 <mgmt_pop_event+0x80>)
   1425a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1425e:	801a      	strh	r2, [r3, #0]
   14260:	e007      	b.n	14272 <mgmt_pop_event+0x6a>
	} else if (out_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   14262:	4b09      	ldr	r3, [pc, #36]	; (14288 <mgmt_pop_event+0x80>)
   14264:	f9b3 3000 	ldrsh.w	r3, [r3]
   14268:	2b02      	cmp	r3, #2
   1426a:	d102      	bne.n	14272 <mgmt_pop_event+0x6a>
		out_event = 0;
   1426c:	4b06      	ldr	r3, [pc, #24]	; (14288 <mgmt_pop_event+0x80>)
   1426e:	2200      	movs	r2, #0
   14270:	801a      	strh	r2, [r3, #0]
	}

	return &events[o_idx];
   14272:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   14276:	00db      	lsls	r3, r3, #3
   14278:	4a04      	ldr	r2, [pc, #16]	; (1428c <mgmt_pop_event+0x84>)
   1427a:	4413      	add	r3, r2
}
   1427c:	4618      	mov	r0, r3
   1427e:	370c      	adds	r7, #12
   14280:	46bd      	mov	sp, r7
   14282:	bc80      	pop	{r7}
   14284:	4770      	bx	lr
   14286:	bf00      	nop
   14288:	20006238 	.word	0x20006238
   1428c:	200041ec 	.word	0x200041ec
   14290:	20006236 	.word	0x20006236

00014294 <mgmt_is_event_handled>:
		mgmt_add_event_mask(cb->event_mask);
	}
}

static inline bool mgmt_is_event_handled(u32_t mgmt_event)
{
   14294:	b480      	push	{r7}
   14296:	b083      	sub	sp, #12
   14298:	af00      	add	r7, sp, #0
   1429a:	6078      	str	r0, [r7, #4]
	return (((NET_MGMT_GET_LAYER(mgmt_event) &
		  NET_MGMT_GET_LAYER(global_event_mask)) ==
   1429c:	4b14      	ldr	r3, [pc, #80]	; (142f0 <mgmt_is_event_handled+0x5c>)
   1429e:	681b      	ldr	r3, [r3, #0]
   142a0:	0f1b      	lsrs	r3, r3, #28
   142a2:	43da      	mvns	r2, r3
	return (((NET_MGMT_GET_LAYER(mgmt_event) &
   142a4:	687b      	ldr	r3, [r7, #4]
   142a6:	0f1b      	lsrs	r3, r3, #28
		  NET_MGMT_GET_LAYER(global_event_mask)) ==
   142a8:	4013      	ands	r3, r2
   142aa:	f003 0303 	and.w	r3, r3, #3
		 NET_MGMT_GET_LAYER(mgmt_event)) &&
		((NET_MGMT_GET_LAYER_CODE(mgmt_event) &
		  NET_MGMT_GET_LAYER_CODE(global_event_mask)) ==
		 NET_MGMT_GET_LAYER_CODE(mgmt_event)) &&
   142ae:	2b00      	cmp	r3, #0
   142b0:	d114      	bne.n	142dc <mgmt_is_event_handled+0x48>
		  NET_MGMT_GET_LAYER_CODE(global_event_mask)) ==
   142b2:	4b0f      	ldr	r3, [pc, #60]	; (142f0 <mgmt_is_event_handled+0x5c>)
   142b4:	681b      	ldr	r3, [r3, #0]
   142b6:	0c1b      	lsrs	r3, r3, #16
   142b8:	43da      	mvns	r2, r3
		((NET_MGMT_GET_LAYER_CODE(mgmt_event) &
   142ba:	687b      	ldr	r3, [r7, #4]
   142bc:	0c1b      	lsrs	r3, r3, #16
		  NET_MGMT_GET_LAYER_CODE(global_event_mask)) ==
   142be:	4013      	ands	r3, r2
   142c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
		 NET_MGMT_GET_LAYER(mgmt_event)) &&
   142c4:	2b00      	cmp	r3, #0
   142c6:	d109      	bne.n	142dc <mgmt_is_event_handled+0x48>
		((NET_MGMT_GET_COMMAND(mgmt_event) &
		  NET_MGMT_GET_COMMAND(global_event_mask)) ==
   142c8:	4b09      	ldr	r3, [pc, #36]	; (142f0 <mgmt_is_event_handled+0x5c>)
   142ca:	681b      	ldr	r3, [r3, #0]
   142cc:	43da      	mvns	r2, r3
   142ce:	687b      	ldr	r3, [r7, #4]
   142d0:	4013      	ands	r3, r2
   142d2:	b29b      	uxth	r3, r3
		 NET_MGMT_GET_LAYER_CODE(mgmt_event)) &&
   142d4:	2b00      	cmp	r3, #0
   142d6:	d101      	bne.n	142dc <mgmt_is_event_handled+0x48>
   142d8:	2301      	movs	r3, #1
   142da:	e000      	b.n	142de <mgmt_is_event_handled+0x4a>
   142dc:	2300      	movs	r3, #0
   142de:	f003 0301 	and.w	r3, r3, #1
   142e2:	b2db      	uxtb	r3, r3
		 NET_MGMT_GET_COMMAND(mgmt_event)));
}
   142e4:	4618      	mov	r0, r3
   142e6:	370c      	adds	r7, #12
   142e8:	46bd      	mov	sp, r7
   142ea:	bc80      	pop	{r7}
   142ec:	4770      	bx	lr
   142ee:	bf00      	nop
   142f0:	200041fc 	.word	0x200041fc

000142f4 <mgmt_run_callbacks>:

static inline void mgmt_run_callbacks(struct mgmt_event_entry *mgmt_event)
{
   142f4:	b580      	push	{r7, lr}
   142f6:	b098      	sub	sp, #96	; 0x60
   142f8:	af00      	add	r7, sp, #0
   142fa:	6078      	str	r0, [r7, #4]
	sys_snode_t *prev = NULL;
   142fc:	2300      	movs	r3, #0
   142fe:	657b      	str	r3, [r7, #84]	; 0x54
	struct net_mgmt_event_callback *cb, *tmp;

	NET_DBG("Event layer %u code %u cmd %u",
   14300:	f013 fca6 	bl	27c50 <_is_user_context>
   14304:	4603      	mov	r3, r0
   14306:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		NET_MGMT_GET_LAYER(mgmt_event->event),
		NET_MGMT_GET_LAYER_CODE(mgmt_event->event),
		NET_MGMT_GET_COMMAND(mgmt_event->event));

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   1430a:	4853      	ldr	r0, [pc, #332]	; (14458 <mgmt_run_callbacks+0x164>)
   1430c:	f013 fc31 	bl	27b72 <sys_slist_peek_head>
   14310:	4603      	mov	r3, r0
   14312:	2b00      	cmp	r3, #0
   14314:	d004      	beq.n	14320 <mgmt_run_callbacks+0x2c>
   14316:	4850      	ldr	r0, [pc, #320]	; (14458 <mgmt_run_callbacks+0x164>)
   14318:	f013 fc2b 	bl	27b72 <sys_slist_peek_head>
   1431c:	4603      	mov	r3, r0
   1431e:	e000      	b.n	14322 <mgmt_run_callbacks+0x2e>
   14320:	2300      	movs	r3, #0
   14322:	653b      	str	r3, [r7, #80]	; 0x50
   14324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   14326:	2b00      	cmp	r3, #0
   14328:	d00e      	beq.n	14348 <mgmt_run_callbacks+0x54>
   1432a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1432c:	4618      	mov	r0, r3
   1432e:	f013 fc42 	bl	27bb6 <sys_slist_peek_next>
   14332:	4603      	mov	r3, r0
   14334:	2b00      	cmp	r3, #0
   14336:	d005      	beq.n	14344 <mgmt_run_callbacks+0x50>
   14338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1433a:	4618      	mov	r0, r3
   1433c:	f013 fc3b 	bl	27bb6 <sys_slist_peek_next>
   14340:	4603      	mov	r3, r0
   14342:	e002      	b.n	1434a <mgmt_run_callbacks+0x56>
   14344:	2300      	movs	r3, #0
   14346:	e000      	b.n	1434a <mgmt_run_callbacks+0x56>
   14348:	2300      	movs	r3, #0
   1434a:	65fb      	str	r3, [r7, #92]	; 0x5c
   1434c:	e07c      	b.n	14448 <mgmt_run_callbacks+0x154>
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
   1434e:	687b      	ldr	r3, [r7, #4]
   14350:	681b      	ldr	r3, [r3, #0]
   14352:	0f1a      	lsrs	r2, r3, #28
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   14354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   14356:	689b      	ldr	r3, [r3, #8]
   14358:	0f1b      	lsrs	r3, r3, #28
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
   1435a:	4053      	eors	r3, r2
   1435c:	f003 0303 	and.w	r3, r3, #3
   14360:	2b00      	cmp	r3, #0
   14362:	d158      	bne.n	14416 <mgmt_run_callbacks+0x122>
		    !(NET_MGMT_GET_LAYER_CODE(mgmt_event->event) ==
   14364:	687b      	ldr	r3, [r7, #4]
   14366:	681b      	ldr	r3, [r3, #0]
   14368:	0c1a      	lsrs	r2, r3, #16
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   1436a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1436c:	689b      	ldr	r3, [r3, #8]
   1436e:	0c1b      	lsrs	r3, r3, #16
		    !(NET_MGMT_GET_LAYER_CODE(mgmt_event->event) ==
   14370:	4053      	eors	r3, r2
   14372:	f3c3 030a 	ubfx	r3, r3, #0, #11
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   14376:	2b00      	cmp	r3, #0
   14378:	d14d      	bne.n	14416 <mgmt_run_callbacks+0x122>
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   1437a:	687b      	ldr	r3, [r7, #4]
   1437c:	681b      	ldr	r3, [r3, #0]
   1437e:	b29b      	uxth	r3, r3
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   14380:	2b00      	cmp	r3, #0
   14382:	d00c      	beq.n	1439e <mgmt_run_callbacks+0xaa>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   14384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   14386:	689b      	ldr	r3, [r3, #8]
   14388:	b29b      	uxth	r3, r3
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   1438a:	2b00      	cmp	r3, #0
   1438c:	d007      	beq.n	1439e <mgmt_run_callbacks+0xaa>
		     !(NET_MGMT_GET_COMMAND(mgmt_event->event) &
   1438e:	687b      	ldr	r3, [r7, #4]
   14390:	681a      	ldr	r2, [r3, #0]
		       NET_MGMT_GET_COMMAND(cb->event_mask)))) {
   14392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   14394:	689b      	ldr	r3, [r3, #8]
		     !(NET_MGMT_GET_COMMAND(mgmt_event->event) &
   14396:	4013      	ands	r3, r2
   14398:	b29b      	uxth	r3, r3
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   1439a:	2b00      	cmp	r3, #0
   1439c:	d03b      	beq.n	14416 <mgmt_run_callbacks+0x122>
			cb->info = NULL;
			cb->info_length = 0;
		}
#endif /* CONFIG_NET_MGMT_EVENT_INFO */

		if (NET_MGMT_EVENT_SYNCHRONOUS(cb->event_mask)) {
   1439e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   143a0:	689b      	ldr	r3, [r3, #8]
   143a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
   143a6:	2b00      	cmp	r3, #0
   143a8:	d025      	beq.n	143f6 <mgmt_run_callbacks+0x102>
			struct mgmt_event_wait *sync_data =
   143aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   143ac:	685b      	ldr	r3, [r3, #4]
   143ae:	64bb      	str	r3, [r7, #72]	; 0x48
				CONTAINER_OF(cb->sync_call,
					     struct mgmt_event_wait, sync_call);

			if (sync_data->iface &&
   143b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   143b2:	699b      	ldr	r3, [r3, #24]
   143b4:	2b00      	cmp	r3, #0
   143b6:	d005      	beq.n	143c4 <mgmt_run_callbacks+0xd0>
			    sync_data->iface != mgmt_event->iface) {
   143b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   143ba:	699a      	ldr	r2, [r3, #24]
   143bc:	687b      	ldr	r3, [r7, #4]
   143be:	685b      	ldr	r3, [r3, #4]
			if (sync_data->iface &&
   143c0:	429a      	cmp	r2, r3
   143c2:	d12a      	bne.n	1441a <mgmt_run_callbacks+0x126>
				continue;
			}

			NET_DBG("Unlocking %p synchronous call", cb);
   143c4:	f013 fc44 	bl	27c50 <_is_user_context>
   143c8:	4603      	mov	r3, r0
   143ca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

			cb->raised_event = mgmt_event->event;
   143ce:	687b      	ldr	r3, [r7, #4]
   143d0:	681a      	ldr	r2, [r3, #0]
   143d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   143d4:	609a      	str	r2, [r3, #8]
			sync_data->iface = mgmt_event->iface;
   143d6:	687b      	ldr	r3, [r7, #4]
   143d8:	685a      	ldr	r2, [r3, #4]
   143da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   143dc:	619a      	str	r2, [r3, #24]

			sys_slist_remove(&event_callbacks, prev, &cb->node);
   143de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   143e0:	461a      	mov	r2, r3
   143e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
   143e4:	481c      	ldr	r0, [pc, #112]	; (14458 <mgmt_run_callbacks+0x164>)
   143e6:	f013 fbf7 	bl	27bd8 <sys_slist_remove>

			k_sem_give(cb->sync_call);
   143ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   143ec:	685b      	ldr	r3, [r3, #4]
   143ee:	4618      	mov	r0, r3
   143f0:	f013 fc84 	bl	27cfc <k_sem_give>
   143f4:	e012      	b.n	1441c <mgmt_run_callbacks+0x128>
		} else {
			NET_DBG("Running callback %p : %p",
   143f6:	f013 fc2b 	bl	27c50 <_is_user_context>
   143fa:	4603      	mov	r3, r0
   143fc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
				cb, cb->handler);

			cb->handler(cb, mgmt_event->event, mgmt_event->iface);
   14400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   14402:	685b      	ldr	r3, [r3, #4]
   14404:	687a      	ldr	r2, [r7, #4]
   14406:	6811      	ldr	r1, [r2, #0]
   14408:	687a      	ldr	r2, [r7, #4]
   1440a:	6852      	ldr	r2, [r2, #4]
   1440c:	6d38      	ldr	r0, [r7, #80]	; 0x50
   1440e:	4798      	blx	r3
			prev = &cb->node;
   14410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   14412:	657b      	str	r3, [r7, #84]	; 0x54
   14414:	e002      	b.n	1441c <mgmt_run_callbacks+0x128>
			continue;
   14416:	bf00      	nop
   14418:	e000      	b.n	1441c <mgmt_run_callbacks+0x128>
				continue;
   1441a:	bf00      	nop
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   1441c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1441e:	653b      	str	r3, [r7, #80]	; 0x50
   14420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   14422:	2b00      	cmp	r3, #0
   14424:	d00e      	beq.n	14444 <mgmt_run_callbacks+0x150>
   14426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   14428:	4618      	mov	r0, r3
   1442a:	f013 fbc4 	bl	27bb6 <sys_slist_peek_next>
   1442e:	4603      	mov	r3, r0
   14430:	2b00      	cmp	r3, #0
   14432:	d005      	beq.n	14440 <mgmt_run_callbacks+0x14c>
   14434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   14436:	4618      	mov	r0, r3
   14438:	f013 fbbd 	bl	27bb6 <sys_slist_peek_next>
   1443c:	4603      	mov	r3, r0
   1443e:	e002      	b.n	14446 <mgmt_run_callbacks+0x152>
   14440:	2300      	movs	r3, #0
   14442:	e000      	b.n	14446 <mgmt_run_callbacks+0x152>
   14444:	2300      	movs	r3, #0
   14446:	65fb      	str	r3, [r7, #92]	; 0x5c
   14448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1444a:	2b00      	cmp	r3, #0
   1444c:	f47f af7f 	bne.w	1434e <mgmt_run_callbacks+0x5a>
#ifdef CONFIG_NET_DEBUG_MGMT_EVENT_STACK
	net_analyze_stack("Net MGMT event stack",
			  Z_THREAD_STACK_BUFFER(mgmt_stack),
			  K_THREAD_STACK_SIZEOF(mgmt_stack));
#endif
}
   14450:	bf00      	nop
   14452:	3760      	adds	r7, #96	; 0x60
   14454:	46bd      	mov	sp, r7
   14456:	bd80      	pop	{r7, pc}
   14458:	20004200 	.word	0x20004200

0001445c <mgmt_thread>:

static void mgmt_thread(void)
{
   1445c:	b580      	push	{r7, lr}
   1445e:	b084      	sub	sp, #16
   14460:	af00      	add	r7, sp, #0
	struct mgmt_event_entry *mgmt_event;

	while (1) {
		k_sem_take(&network_event, K_FOREVER);
   14462:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14466:	4816      	ldr	r0, [pc, #88]	; (144c0 <mgmt_thread+0x64>)
   14468:	f013 fc3a 	bl	27ce0 <k_sem_take>
		k_sem_take(&net_mgmt_lock, K_FOREVER);
   1446c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14470:	4814      	ldr	r0, [pc, #80]	; (144c4 <mgmt_thread+0x68>)
   14472:	f013 fc35 	bl	27ce0 <k_sem_take>

		NET_DBG("Handling events, forwarding it relevantly");
   14476:	f013 fbeb 	bl	27c50 <_is_user_context>
   1447a:	4603      	mov	r3, r0
   1447c:	72fb      	strb	r3, [r7, #11]

		mgmt_event = mgmt_pop_event();
   1447e:	f7ff fec3 	bl	14208 <mgmt_pop_event>
   14482:	60f8      	str	r0, [r7, #12]
		if (!mgmt_event) {
   14484:	68fb      	ldr	r3, [r7, #12]
   14486:	2b00      	cmp	r3, #0
   14488:	d10d      	bne.n	144a6 <mgmt_thread+0x4a>
			/* System is over-loaded?
			 * At this point we have most probably notified
			 * more events than we could handle
			 */
			NET_DBG("Some event got probably lost (%u)",
   1448a:	f013 fbe1 	bl	27c50 <_is_user_context>
   1448e:	4603      	mov	r3, r0
   14490:	72bb      	strb	r3, [r7, #10]
				k_sem_count_get(&network_event));

			k_sem_init(&network_event, 0, UINT_MAX);
   14492:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14496:	2100      	movs	r1, #0
   14498:	4809      	ldr	r0, [pc, #36]	; (144c0 <mgmt_thread+0x64>)
   1449a:	f013 fc12 	bl	27cc2 <k_sem_init>
			k_sem_give(&net_mgmt_lock);
   1449e:	4809      	ldr	r0, [pc, #36]	; (144c4 <mgmt_thread+0x68>)
   144a0:	f013 fc2c 	bl	27cfc <k_sem_give>

			continue;
   144a4:	e00a      	b.n	144bc <mgmt_thread+0x60>
		}

		mgmt_run_callbacks(mgmt_event);
   144a6:	68f8      	ldr	r0, [r7, #12]
   144a8:	f7ff ff24 	bl	142f4 <mgmt_run_callbacks>

		mgmt_clean_event(mgmt_event);
   144ac:	68f8      	ldr	r0, [r7, #12]
   144ae:	f013 fc30 	bl	27d12 <mgmt_clean_event>

		k_sem_give(&net_mgmt_lock);
   144b2:	4804      	ldr	r0, [pc, #16]	; (144c4 <mgmt_thread+0x68>)
   144b4:	f013 fc22 	bl	27cfc <k_sem_give>

		k_yield();
   144b8:	f013 fbef 	bl	27c9a <k_yield>
		k_sem_take(&network_event, K_FOREVER);
   144bc:	e7d1      	b.n	14462 <mgmt_thread+0x6>
   144be:	bf00      	nop
   144c0:	2000fe28 	.word	0x2000fe28
   144c4:	2000fe40 	.word	0x2000fe40

000144c8 <net_mgmt_event_notify_with_info>:
	k_sem_give(&net_mgmt_lock);
}

void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length)
{
   144c8:	b580      	push	{r7, lr}
   144ca:	b08e      	sub	sp, #56	; 0x38
   144cc:	af00      	add	r7, sp, #0
   144ce:	60f8      	str	r0, [r7, #12]
   144d0:	60b9      	str	r1, [r7, #8]
   144d2:	607a      	str	r2, [r7, #4]
   144d4:	603b      	str	r3, [r7, #0]
	if (mgmt_is_event_handled(mgmt_event)) {
   144d6:	68f8      	ldr	r0, [r7, #12]
   144d8:	f7ff fedc 	bl	14294 <mgmt_is_event_handled>
   144dc:	4603      	mov	r3, r0
   144de:	2b00      	cmp	r3, #0
   144e0:	d00d      	beq.n	144fe <net_mgmt_event_notify_with_info+0x36>
		NET_DBG("Notifying Event layer %u code %u type %u",
   144e2:	f013 fbb5 	bl	27c50 <_is_user_context>
   144e6:	4603      	mov	r3, r0
   144e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			NET_MGMT_GET_LAYER(mgmt_event),
			NET_MGMT_GET_LAYER_CODE(mgmt_event),
			NET_MGMT_GET_COMMAND(mgmt_event));

		mgmt_push_event(mgmt_event, iface, info, length);
   144ec:	683b      	ldr	r3, [r7, #0]
   144ee:	687a      	ldr	r2, [r7, #4]
   144f0:	68b9      	ldr	r1, [r7, #8]
   144f2:	68f8      	ldr	r0, [r7, #12]
   144f4:	f7ff fe2c 	bl	14150 <mgmt_push_event>
		k_sem_give(&network_event);
   144f8:	4803      	ldr	r0, [pc, #12]	; (14508 <net_mgmt_event_notify_with_info+0x40>)
   144fa:	f013 fbff 	bl	27cfc <k_sem_give>
	}
}
   144fe:	bf00      	nop
   14500:	3738      	adds	r7, #56	; 0x38
   14502:	46bd      	mov	sp, r7
   14504:	bd80      	pop	{r7, pc}
   14506:	bf00      	nop
   14508:	2000fe28 	.word	0x2000fe28

0001450c <net_mgmt_event_init>:
				    raised_event, NULL, info, info_length,
				    timeout);
}

void net_mgmt_event_init(void)
{
   1450c:	b580      	push	{r7, lr}
   1450e:	b08c      	sub	sp, #48	; 0x30
   14510:	af06      	add	r7, sp, #24
	sys_slist_init(&event_callbacks);
   14512:	4819      	ldr	r0, [pc, #100]	; (14578 <net_mgmt_event_init+0x6c>)
   14514:	f013 faec 	bl	27af0 <sys_slist_init>
	global_event_mask = 0U;
   14518:	4b18      	ldr	r3, [pc, #96]	; (1457c <net_mgmt_event_init+0x70>)
   1451a:	2200      	movs	r2, #0
   1451c:	601a      	str	r2, [r3, #0]

	in_event = -1;
   1451e:	4b18      	ldr	r3, [pc, #96]	; (14580 <net_mgmt_event_init+0x74>)
   14520:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14524:	801a      	strh	r2, [r3, #0]
	out_event = -1;
   14526:	4b17      	ldr	r3, [pc, #92]	; (14584 <net_mgmt_event_init+0x78>)
   14528:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1452c:	801a      	strh	r2, [r3, #0]

	(void)memset(events, 0, CONFIG_NET_MGMT_EVENT_QUEUE_SIZE *
   1452e:	2210      	movs	r2, #16
   14530:	2100      	movs	r1, #0
   14532:	4815      	ldr	r0, [pc, #84]	; (14588 <net_mgmt_event_init+0x7c>)
   14534:	f7ed fdc0 	bl	20b8 <memset>
			sizeof(struct mgmt_event_entry));

	k_thread_create(&mgmt_thread_data, mgmt_stack,
   14538:	2300      	movs	r3, #0
   1453a:	9305      	str	r3, [sp, #20]
   1453c:	2300      	movs	r3, #0
   1453e:	9304      	str	r3, [sp, #16]
   14540:	f06f 0308 	mvn.w	r3, #8
   14544:	9303      	str	r3, [sp, #12]
   14546:	2300      	movs	r3, #0
   14548:	9302      	str	r3, [sp, #8]
   1454a:	2300      	movs	r3, #0
   1454c:	9301      	str	r3, [sp, #4]
   1454e:	2300      	movs	r3, #0
   14550:	9300      	str	r3, [sp, #0]
   14552:	4b0e      	ldr	r3, [pc, #56]	; (1458c <net_mgmt_event_init+0x80>)
   14554:	f44f 7240 	mov.w	r2, #768	; 0x300
   14558:	490d      	ldr	r1, [pc, #52]	; (14590 <net_mgmt_event_init+0x84>)
   1455a:	480e      	ldr	r0, [pc, #56]	; (14594 <net_mgmt_event_init+0x88>)
   1455c:	f013 fb7f 	bl	27c5e <k_thread_create>
			K_THREAD_STACK_SIZEOF(mgmt_stack),
			(k_thread_entry_t)mgmt_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_NET_MGMT_EVENT_THREAD_PRIO), 0, 0);
	k_thread_name_set(&mgmt_thread_data, "net_mgmt");
   14560:	490d      	ldr	r1, [pc, #52]	; (14598 <net_mgmt_event_init+0x8c>)
   14562:	480c      	ldr	r0, [pc, #48]	; (14594 <net_mgmt_event_init+0x88>)
   14564:	f013 fb9f 	bl	27ca6 <k_thread_name_set>

	NET_DBG("Net MGMT initialized: queue of %u entries, stack size of %u",
   14568:	f013 fb72 	bl	27c50 <_is_user_context>
   1456c:	4603      	mov	r3, r0
   1456e:	75fb      	strb	r3, [r7, #23]
		CONFIG_NET_MGMT_EVENT_QUEUE_SIZE,
		CONFIG_NET_MGMT_EVENT_STACK_SIZE);
}
   14570:	bf00      	nop
   14572:	3718      	adds	r7, #24
   14574:	46bd      	mov	sp, r7
   14576:	bd80      	pop	{r7, pc}
   14578:	20004200 	.word	0x20004200
   1457c:	200041fc 	.word	0x200041fc
   14580:	20006236 	.word	0x20006236
   14584:	20006238 	.word	0x20006238
   14588:	200041ec 	.word	0x200041ec
   1458c:	0001445d 	.word	0x0001445d
   14590:	200080e8 	.word	0x200080e8
   14594:	20004180 	.word	0x20004180
   14598:	0002e734 	.word	0x0002e734

0001459c <net_conn_unregister>:
#define cache_check(...) NET_CONTINUE
#define cache_remove(...)
#endif /* CONFIG_NET_CONN_CACHE */

int net_conn_unregister(struct net_conn_handle *handle)
{
   1459c:	b580      	push	{r7, lr}
   1459e:	b088      	sub	sp, #32
   145a0:	af00      	add	r7, sp, #0
   145a2:	6078      	str	r0, [r7, #4]
	struct net_conn *conn = (struct net_conn *)handle;
   145a4:	687b      	ldr	r3, [r7, #4]
   145a6:	61fb      	str	r3, [r7, #28]

	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
   145a8:	69fb      	ldr	r3, [r7, #28]
   145aa:	4a10      	ldr	r2, [pc, #64]	; (145ec <net_conn_unregister+0x50>)
   145ac:	4293      	cmp	r3, r2
   145ae:	d303      	bcc.n	145b8 <net_conn_unregister+0x1c>
   145b0:	69fb      	ldr	r3, [r7, #28]
   145b2:	4a0f      	ldr	r2, [pc, #60]	; (145f0 <net_conn_unregister+0x54>)
   145b4:	4293      	cmp	r3, r2
   145b6:	d902      	bls.n	145be <net_conn_unregister+0x22>
		return -EINVAL;
   145b8:	f06f 0315 	mvn.w	r3, #21
   145bc:	e012      	b.n	145e4 <net_conn_unregister+0x48>
	}

	if (!(conn->flags & NET_CONN_IN_USE)) {
   145be:	69fb      	ldr	r3, [r7, #28]
   145c0:	7edb      	ldrb	r3, [r3, #27]
   145c2:	f003 0301 	and.w	r3, r3, #1
   145c6:	2b00      	cmp	r3, #0
   145c8:	d102      	bne.n	145d0 <net_conn_unregister+0x34>
		return -ENOENT;
   145ca:	f06f 0301 	mvn.w	r3, #1
   145ce:	e009      	b.n	145e4 <net_conn_unregister+0x48>
	}

	cache_remove(conn);

	NET_DBG("[%zu] connection handler %p removed",
   145d0:	f013 fbae 	bl	27d30 <_is_user_context>
   145d4:	4603      	mov	r3, r0
   145d6:	76fb      	strb	r3, [r7, #27]
		conn - conns, conn);

	(void)memset(conn, 0, sizeof(*conn));
   145d8:	2220      	movs	r2, #32
   145da:	2100      	movs	r1, #0
   145dc:	69f8      	ldr	r0, [r7, #28]
   145de:	f7ed fd6b 	bl	20b8 <memset>

	return 0;
   145e2:	2300      	movs	r3, #0
}
   145e4:	4618      	mov	r0, r3
   145e6:	3720      	adds	r7, #32
   145e8:	46bd      	mov	sp, r7
   145ea:	bd80      	pop	{r7, pc}
   145ec:	20004208 	.word	0x20004208
   145f0:	20004288 	.word	0x20004288

000145f4 <find_conn_handler>:
static int find_conn_handler(u16_t proto, u8_t family,
			     const struct sockaddr *remote_addr,
			     const struct sockaddr *local_addr,
			     u16_t remote_port,
			     u16_t local_port)
{
   145f4:	b590      	push	{r4, r7, lr}
   145f6:	b087      	sub	sp, #28
   145f8:	af00      	add	r7, sp, #0
   145fa:	60ba      	str	r2, [r7, #8]
   145fc:	607b      	str	r3, [r7, #4]
   145fe:	4603      	mov	r3, r0
   14600:	81fb      	strh	r3, [r7, #14]
   14602:	460b      	mov	r3, r1
   14604:	737b      	strb	r3, [r7, #13]
	int i;

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   14606:	2300      	movs	r3, #0
   14608:	617b      	str	r3, [r7, #20]
   1460a:	e0e2      	b.n	147d2 <find_conn_handler+0x1de>
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   1460c:	4a76      	ldr	r2, [pc, #472]	; (147e8 <find_conn_handler+0x1f4>)
   1460e:	697b      	ldr	r3, [r7, #20]
   14610:	015b      	lsls	r3, r3, #5
   14612:	4413      	add	r3, r2
   14614:	331b      	adds	r3, #27
   14616:	781b      	ldrb	r3, [r3, #0]
   14618:	f003 0301 	and.w	r3, r3, #1
   1461c:	2b00      	cmp	r3, #0
   1461e:	f000 80c0 	beq.w	147a2 <find_conn_handler+0x1ae>
			continue;
		}

		if (conns[i].proto != proto) {
   14622:	4a71      	ldr	r2, [pc, #452]	; (147e8 <find_conn_handler+0x1f4>)
   14624:	697b      	ldr	r3, [r7, #20]
   14626:	015b      	lsls	r3, r3, #5
   14628:	4413      	add	r3, r2
   1462a:	3318      	adds	r3, #24
   1462c:	881b      	ldrh	r3, [r3, #0]
   1462e:	89fa      	ldrh	r2, [r7, #14]
   14630:	429a      	cmp	r2, r3
   14632:	f040 80b8 	bne.w	147a6 <find_conn_handler+0x1b2>
			continue;
		}

		if (conns[i].family != family) {
   14636:	4a6c      	ldr	r2, [pc, #432]	; (147e8 <find_conn_handler+0x1f4>)
   14638:	697b      	ldr	r3, [r7, #20]
   1463a:	015b      	lsls	r3, r3, #5
   1463c:	4413      	add	r3, r2
   1463e:	331a      	adds	r3, #26
   14640:	781b      	ldrb	r3, [r3, #0]
   14642:	7b7a      	ldrb	r2, [r7, #13]
   14644:	429a      	cmp	r2, r3
   14646:	f040 80b0 	bne.w	147aa <find_conn_handler+0x1b6>
			continue;
		}

		if (remote_addr) {
   1464a:	68bb      	ldr	r3, [r7, #8]
   1464c:	2b00      	cmp	r3, #0
   1464e:	d032      	beq.n	146b6 <find_conn_handler+0xc2>
			if (!(conns[i].flags & NET_CONN_REMOTE_ADDR_SET)) {
   14650:	4a65      	ldr	r2, [pc, #404]	; (147e8 <find_conn_handler+0x1f4>)
   14652:	697b      	ldr	r3, [r7, #20]
   14654:	015b      	lsls	r3, r3, #5
   14656:	4413      	add	r3, r2
   14658:	331b      	adds	r3, #27
   1465a:	781b      	ldrb	r3, [r3, #0]
   1465c:	f003 0302 	and.w	r3, r3, #2
   14660:	2b00      	cmp	r3, #0
   14662:	f000 80a4 	beq.w	147ae <find_conn_handler+0x1ba>
					continue;
				}
			} else
#endif
#if defined(CONFIG_NET_IPV4)
			if (remote_addr->sa_family == AF_INET &&
   14666:	68bb      	ldr	r3, [r7, #8]
   14668:	881b      	ldrh	r3, [r3, #0]
   1466a:	2b01      	cmp	r3, #1
   1466c:	f040 80a1 	bne.w	147b2 <find_conn_handler+0x1be>
			    remote_addr->sa_family ==
   14670:	68bb      	ldr	r3, [r7, #8]
   14672:	881a      	ldrh	r2, [r3, #0]
			    conns[i].remote_addr.sa_family) {
   14674:	495c      	ldr	r1, [pc, #368]	; (147e8 <find_conn_handler+0x1f4>)
   14676:	697b      	ldr	r3, [r7, #20]
   14678:	015b      	lsls	r3, r3, #5
   1467a:	440b      	add	r3, r1
   1467c:	881b      	ldrh	r3, [r3, #0]
			if (remote_addr->sa_family == AF_INET &&
   1467e:	429a      	cmp	r2, r3
   14680:	f040 8097 	bne.w	147b2 <find_conn_handler+0x1be>
				if (!net_ipv4_addr_cmp(
					    &net_sin(remote_addr)->sin_addr,
   14684:	68b8      	ldr	r0, [r7, #8]
   14686:	f013 fbd7 	bl	27e38 <net_sin>
   1468a:	4603      	mov	r3, r0
   1468c:	1d1c      	adds	r4, r3, #4
					    &net_sin(&conns[i].remote_addr)->
   1468e:	697b      	ldr	r3, [r7, #20]
   14690:	015b      	lsls	r3, r3, #5
   14692:	4a55      	ldr	r2, [pc, #340]	; (147e8 <find_conn_handler+0x1f4>)
   14694:	4413      	add	r3, r2
   14696:	4618      	mov	r0, r3
   14698:	f013 fbce 	bl	27e38 <net_sin>
   1469c:	4603      	mov	r3, r0
   1469e:	3304      	adds	r3, #4
				if (!net_ipv4_addr_cmp(
   146a0:	4619      	mov	r1, r3
   146a2:	4620      	mov	r0, r4
   146a4:	f013 fb78 	bl	27d98 <net_ipv4_addr_cmp>
   146a8:	4603      	mov	r3, r0
   146aa:	f083 0301 	eor.w	r3, r3, #1
   146ae:	b2db      	uxtb	r3, r3
   146b0:	2b00      	cmp	r3, #0
   146b2:	d00a      	beq.n	146ca <find_conn_handler+0xd6>
								sin_addr)) {
					continue;
   146b4:	e08a      	b.n	147cc <find_conn_handler+0x1d8>
#endif
			{
				continue;
			}
		} else {
			if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   146b6:	4a4c      	ldr	r2, [pc, #304]	; (147e8 <find_conn_handler+0x1f4>)
   146b8:	697b      	ldr	r3, [r7, #20]
   146ba:	015b      	lsls	r3, r3, #5
   146bc:	4413      	add	r3, r2
   146be:	331b      	adds	r3, #27
   146c0:	781b      	ldrb	r3, [r3, #0]
   146c2:	f003 0302 	and.w	r3, r3, #2
   146c6:	2b00      	cmp	r3, #0
   146c8:	d175      	bne.n	147b6 <find_conn_handler+0x1c2>
				continue;
			}
		}

		if (local_addr) {
   146ca:	687b      	ldr	r3, [r7, #4]
   146cc:	2b00      	cmp	r3, #0
   146ce:	d031      	beq.n	14734 <find_conn_handler+0x140>
			if (!(conns[i].flags & NET_CONN_LOCAL_ADDR_SET)) {
   146d0:	4a45      	ldr	r2, [pc, #276]	; (147e8 <find_conn_handler+0x1f4>)
   146d2:	697b      	ldr	r3, [r7, #20]
   146d4:	015b      	lsls	r3, r3, #5
   146d6:	4413      	add	r3, r2
   146d8:	331b      	adds	r3, #27
   146da:	781b      	ldrb	r3, [r3, #0]
   146dc:	f003 0304 	and.w	r3, r3, #4
   146e0:	2b00      	cmp	r3, #0
   146e2:	d06a      	beq.n	147ba <find_conn_handler+0x1c6>
					continue;
				}
			} else
#endif
#if defined(CONFIG_NET_IPV4)
			if (local_addr->sa_family == AF_INET &&
   146e4:	687b      	ldr	r3, [r7, #4]
   146e6:	881b      	ldrh	r3, [r3, #0]
   146e8:	2b01      	cmp	r3, #1
   146ea:	d168      	bne.n	147be <find_conn_handler+0x1ca>
			    local_addr->sa_family ==
   146ec:	687b      	ldr	r3, [r7, #4]
   146ee:	881a      	ldrh	r2, [r3, #0]
			    conns[i].local_addr.sa_family) {
   146f0:	493d      	ldr	r1, [pc, #244]	; (147e8 <find_conn_handler+0x1f4>)
   146f2:	697b      	ldr	r3, [r7, #20]
   146f4:	015b      	lsls	r3, r3, #5
   146f6:	440b      	add	r3, r1
   146f8:	3308      	adds	r3, #8
   146fa:	881b      	ldrh	r3, [r3, #0]
			if (local_addr->sa_family == AF_INET &&
   146fc:	429a      	cmp	r2, r3
   146fe:	d15e      	bne.n	147be <find_conn_handler+0x1ca>
				if (!net_ipv4_addr_cmp(
					    &net_sin(local_addr)->sin_addr,
   14700:	6878      	ldr	r0, [r7, #4]
   14702:	f013 fb99 	bl	27e38 <net_sin>
   14706:	4603      	mov	r3, r0
   14708:	1d1c      	adds	r4, r3, #4
					    &net_sin(&conns[i].local_addr)->
   1470a:	697b      	ldr	r3, [r7, #20]
   1470c:	015b      	lsls	r3, r3, #5
   1470e:	3308      	adds	r3, #8
   14710:	4a35      	ldr	r2, [pc, #212]	; (147e8 <find_conn_handler+0x1f4>)
   14712:	4413      	add	r3, r2
   14714:	4618      	mov	r0, r3
   14716:	f013 fb8f 	bl	27e38 <net_sin>
   1471a:	4603      	mov	r3, r0
   1471c:	3304      	adds	r3, #4
				if (!net_ipv4_addr_cmp(
   1471e:	4619      	mov	r1, r3
   14720:	4620      	mov	r0, r4
   14722:	f013 fb39 	bl	27d98 <net_ipv4_addr_cmp>
   14726:	4603      	mov	r3, r0
   14728:	f083 0301 	eor.w	r3, r3, #1
   1472c:	b2db      	uxtb	r3, r3
   1472e:	2b00      	cmp	r3, #0
   14730:	d00a      	beq.n	14748 <find_conn_handler+0x154>
								sin_addr)) {
					continue;
   14732:	e04b      	b.n	147cc <find_conn_handler+0x1d8>
#endif
			{
				continue;
			}
		} else {
			if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   14734:	4a2c      	ldr	r2, [pc, #176]	; (147e8 <find_conn_handler+0x1f4>)
   14736:	697b      	ldr	r3, [r7, #20]
   14738:	015b      	lsls	r3, r3, #5
   1473a:	4413      	add	r3, r2
   1473c:	331b      	adds	r3, #27
   1473e:	781b      	ldrb	r3, [r3, #0]
   14740:	f003 0304 	and.w	r3, r3, #4
   14744:	2b00      	cmp	r3, #0
   14746:	d13c      	bne.n	147c2 <find_conn_handler+0x1ce>
				continue;
			}
		}

		if (net_sin(&conns[i].remote_addr)->sin_port !=
   14748:	697b      	ldr	r3, [r7, #20]
   1474a:	015b      	lsls	r3, r3, #5
   1474c:	4a26      	ldr	r2, [pc, #152]	; (147e8 <find_conn_handler+0x1f4>)
   1474e:	4413      	add	r3, r2
   14750:	4618      	mov	r0, r3
   14752:	f013 fb71 	bl	27e38 <net_sin>
   14756:	4603      	mov	r3, r0
   14758:	885a      	ldrh	r2, [r3, #2]
		    htons(remote_port)) {
   1475a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   1475c:	0a1b      	lsrs	r3, r3, #8
   1475e:	b29b      	uxth	r3, r3
   14760:	b219      	sxth	r1, r3
   14762:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   14764:	021b      	lsls	r3, r3, #8
   14766:	b21b      	sxth	r3, r3
   14768:	430b      	orrs	r3, r1
   1476a:	b21b      	sxth	r3, r3
		if (net_sin(&conns[i].remote_addr)->sin_port !=
   1476c:	b29b      	uxth	r3, r3
   1476e:	429a      	cmp	r2, r3
   14770:	d129      	bne.n	147c6 <find_conn_handler+0x1d2>
			continue;
		}

		if (net_sin(&conns[i].local_addr)->sin_port !=
   14772:	697b      	ldr	r3, [r7, #20]
   14774:	015b      	lsls	r3, r3, #5
   14776:	3308      	adds	r3, #8
   14778:	4a1b      	ldr	r2, [pc, #108]	; (147e8 <find_conn_handler+0x1f4>)
   1477a:	4413      	add	r3, r2
   1477c:	4618      	mov	r0, r3
   1477e:	f013 fb5b 	bl	27e38 <net_sin>
   14782:	4603      	mov	r3, r0
   14784:	885a      	ldrh	r2, [r3, #2]
		    htons(local_port)) {
   14786:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   14788:	0a1b      	lsrs	r3, r3, #8
   1478a:	b29b      	uxth	r3, r3
   1478c:	b219      	sxth	r1, r3
   1478e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   14790:	021b      	lsls	r3, r3, #8
   14792:	b21b      	sxth	r3, r3
   14794:	430b      	orrs	r3, r1
   14796:	b21b      	sxth	r3, r3
		if (net_sin(&conns[i].local_addr)->sin_port !=
   14798:	b29b      	uxth	r3, r3
   1479a:	429a      	cmp	r2, r3
   1479c:	d115      	bne.n	147ca <find_conn_handler+0x1d6>
			continue;
		}

		return i;
   1479e:	697b      	ldr	r3, [r7, #20]
   147a0:	e01d      	b.n	147de <find_conn_handler+0x1ea>
			continue;
   147a2:	bf00      	nop
   147a4:	e012      	b.n	147cc <find_conn_handler+0x1d8>
			continue;
   147a6:	bf00      	nop
   147a8:	e010      	b.n	147cc <find_conn_handler+0x1d8>
			continue;
   147aa:	bf00      	nop
   147ac:	e00e      	b.n	147cc <find_conn_handler+0x1d8>
				continue;
   147ae:	bf00      	nop
   147b0:	e00c      	b.n	147cc <find_conn_handler+0x1d8>
				continue;
   147b2:	bf00      	nop
   147b4:	e00a      	b.n	147cc <find_conn_handler+0x1d8>
				continue;
   147b6:	bf00      	nop
   147b8:	e008      	b.n	147cc <find_conn_handler+0x1d8>
				continue;
   147ba:	bf00      	nop
   147bc:	e006      	b.n	147cc <find_conn_handler+0x1d8>
				continue;
   147be:	bf00      	nop
   147c0:	e004      	b.n	147cc <find_conn_handler+0x1d8>
				continue;
   147c2:	bf00      	nop
   147c4:	e002      	b.n	147cc <find_conn_handler+0x1d8>
			continue;
   147c6:	bf00      	nop
   147c8:	e000      	b.n	147cc <find_conn_handler+0x1d8>
			continue;
   147ca:	bf00      	nop
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   147cc:	697b      	ldr	r3, [r7, #20]
   147ce:	3301      	adds	r3, #1
   147d0:	617b      	str	r3, [r7, #20]
   147d2:	697b      	ldr	r3, [r7, #20]
   147d4:	2b03      	cmp	r3, #3
   147d6:	f77f af19 	ble.w	1460c <find_conn_handler+0x18>
	}

	return -ENOENT;
   147da:	f06f 0301 	mvn.w	r3, #1
}
   147de:	4618      	mov	r0, r3
   147e0:	371c      	adds	r7, #28
   147e2:	46bd      	mov	sp, r7
   147e4:	bd90      	pop	{r4, r7, pc}
   147e6:	bf00      	nop
   147e8:	20004208 	.word	0x20004208

000147ec <net_conn_register>:
		      u16_t remote_port,
		      u16_t local_port,
		      net_conn_cb_t cb,
		      void *user_data,
		      struct net_conn_handle **handle)
{
   147ec:	b590      	push	{r4, r7, lr}
   147ee:	b0a7      	sub	sp, #156	; 0x9c
   147f0:	af02      	add	r7, sp, #8
   147f2:	60ba      	str	r2, [r7, #8]
   147f4:	607b      	str	r3, [r7, #4]
   147f6:	4603      	mov	r3, r0
   147f8:	81fb      	strh	r3, [r7, #14]
   147fa:	460b      	mov	r3, r1
   147fc:	737b      	strb	r3, [r7, #13]
	int i;
	u8_t rank = 0U;
   147fe:	2300      	movs	r3, #0
   14800:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

	i = find_conn_handler(proto, family, remote_addr, local_addr,
   14804:	7b79      	ldrb	r1, [r7, #13]
   14806:	89f8      	ldrh	r0, [r7, #14]
   14808:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
   1480c:	9301      	str	r3, [sp, #4]
   1480e:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
   14812:	9300      	str	r3, [sp, #0]
   14814:	687b      	ldr	r3, [r7, #4]
   14816:	68ba      	ldr	r2, [r7, #8]
   14818:	f7ff feec 	bl	145f4 <find_conn_handler>
   1481c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			      remote_port, local_port);
	if (i != -ENOENT) {
   14820:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14824:	f113 0f02 	cmn.w	r3, #2
   14828:	d007      	beq.n	1483a <net_conn_register+0x4e>
		NET_ERR("Identical connection handler %p already found.",
   1482a:	f013 fa81 	bl	27d30 <_is_user_context>
   1482e:	4603      	mov	r3, r0
   14830:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
			&conns[i]);
		return -EALREADY;
   14834:	f06f 0377 	mvn.w	r3, #119	; 0x77
   14838:	e13c      	b.n	14ab4 <net_conn_register+0x2c8>
	}

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   1483a:	2300      	movs	r3, #0
   1483c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14840:	e131      	b.n	14aa6 <net_conn_register+0x2ba>
		if (conns[i].flags & NET_CONN_IN_USE) {
   14842:	4a9e      	ldr	r2, [pc, #632]	; (14abc <net_conn_register+0x2d0>)
   14844:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14848:	015b      	lsls	r3, r3, #5
   1484a:	4413      	add	r3, r2
   1484c:	331b      	adds	r3, #27
   1484e:	781b      	ldrb	r3, [r3, #0]
   14850:	f003 0301 	and.w	r3, r3, #1
   14854:	2b00      	cmp	r3, #0
   14856:	d005      	beq.n	14864 <net_conn_register+0x78>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   14858:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1485c:	3301      	adds	r3, #1
   1485e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14862:	e120      	b.n	14aa6 <net_conn_register+0x2ba>
			continue;
		}

		if (remote_addr) {
   14864:	68bb      	ldr	r3, [r7, #8]
   14866:	2b00      	cmp	r3, #0
   14868:	d03c      	beq.n	148e4 <net_conn_register+0xf8>
				}
			} else
#endif

#if defined(CONFIG_NET_IPV4)
			if (remote_addr->sa_family == AF_INET) {
   1486a:	68bb      	ldr	r3, [r7, #8]
   1486c:	881b      	ldrh	r3, [r3, #0]
   1486e:	2b01      	cmp	r3, #1
   14870:	d11e      	bne.n	148b0 <net_conn_register+0xc4>
				memcpy(&conns[i].remote_addr, remote_addr,
   14872:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14876:	015b      	lsls	r3, r3, #5
   14878:	4a90      	ldr	r2, [pc, #576]	; (14abc <net_conn_register+0x2d0>)
   1487a:	4413      	add	r3, r2
   1487c:	2208      	movs	r2, #8
   1487e:	68b9      	ldr	r1, [r7, #8]
   14880:	4618      	mov	r0, r3
   14882:	f7ed fbf1 	bl	2068 <memcpy>
				       sizeof(struct sockaddr_in));

				if (!net_sin(remote_addr)->
   14886:	68b8      	ldr	r0, [r7, #8]
   14888:	f013 fad6 	bl	27e38 <net_sin>
   1488c:	4603      	mov	r3, r0
							sin_addr.s_addr) {
   1488e:	685b      	ldr	r3, [r3, #4]
				if (!net_sin(remote_addr)->
   14890:	2b00      	cmp	r3, #0
   14892:	d106      	bne.n	148a2 <net_conn_register+0xb6>
					rank |= NET_RANK_REMOTE_UNSPEC_ADDR;
   14894:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
   14898:	f043 0308 	orr.w	r3, r3, #8
   1489c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
   148a0:	e00e      	b.n	148c0 <net_conn_register+0xd4>
				} else {
					rank |= NET_RANK_REMOTE_SPEC_ADDR;
   148a2:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
   148a6:	f043 0320 	orr.w	r3, r3, #32
   148aa:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
   148ae:	e007      	b.n	148c0 <net_conn_register+0xd4>
				}
			} else
#endif
			{
				NET_ERR("Remote address family not set");
   148b0:	f013 fa3e 	bl	27d30 <_is_user_context>
   148b4:	4603      	mov	r3, r0
   148b6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				return -EINVAL;
   148ba:	f06f 0315 	mvn.w	r3, #21
   148be:	e0f9      	b.n	14ab4 <net_conn_register+0x2c8>
			}

			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   148c0:	4a7e      	ldr	r2, [pc, #504]	; (14abc <net_conn_register+0x2d0>)
   148c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   148c6:	015b      	lsls	r3, r3, #5
   148c8:	4413      	add	r3, r2
   148ca:	331b      	adds	r3, #27
   148cc:	781b      	ldrb	r3, [r3, #0]
   148ce:	f043 0302 	orr.w	r3, r3, #2
   148d2:	b2d9      	uxtb	r1, r3
   148d4:	4a79      	ldr	r2, [pc, #484]	; (14abc <net_conn_register+0x2d0>)
   148d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   148da:	015b      	lsls	r3, r3, #5
   148dc:	4413      	add	r3, r2
   148de:	331b      	adds	r3, #27
   148e0:	460a      	mov	r2, r1
   148e2:	701a      	strb	r2, [r3, #0]
		}

		if (local_addr) {
   148e4:	687b      	ldr	r3, [r7, #4]
   148e6:	2b00      	cmp	r3, #0
   148e8:	d03d      	beq.n	14966 <net_conn_register+0x17a>
				}
			} else
#endif

#if defined(CONFIG_NET_IPV4)
			if (local_addr->sa_family == AF_INET) {
   148ea:	687b      	ldr	r3, [r7, #4]
   148ec:	881b      	ldrh	r3, [r3, #0]
   148ee:	2b01      	cmp	r3, #1
   148f0:	d11f      	bne.n	14932 <net_conn_register+0x146>
				memcpy(&conns[i].local_addr, local_addr,
   148f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   148f6:	015b      	lsls	r3, r3, #5
   148f8:	3308      	adds	r3, #8
   148fa:	4a70      	ldr	r2, [pc, #448]	; (14abc <net_conn_register+0x2d0>)
   148fc:	4413      	add	r3, r2
   148fe:	2208      	movs	r2, #8
   14900:	6879      	ldr	r1, [r7, #4]
   14902:	4618      	mov	r0, r3
   14904:	f7ed fbb0 	bl	2068 <memcpy>
				       sizeof(struct sockaddr_in));

				if (!net_sin(local_addr)->sin_addr.s_addr) {
   14908:	6878      	ldr	r0, [r7, #4]
   1490a:	f013 fa95 	bl	27e38 <net_sin>
   1490e:	4603      	mov	r3, r0
   14910:	685b      	ldr	r3, [r3, #4]
   14912:	2b00      	cmp	r3, #0
   14914:	d106      	bne.n	14924 <net_conn_register+0x138>
					rank |= NET_RANK_LOCAL_UNSPEC_ADDR;
   14916:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
   1491a:	f043 0304 	orr.w	r3, r3, #4
   1491e:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
   14922:	e00e      	b.n	14942 <net_conn_register+0x156>
				} else {
					rank |= NET_RANK_LOCAL_SPEC_ADDR;
   14924:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
   14928:	f043 0310 	orr.w	r3, r3, #16
   1492c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
   14930:	e007      	b.n	14942 <net_conn_register+0x156>
				}
			} else
#endif
			{
				NET_ERR("Local address family not set");
   14932:	f013 f9fd 	bl	27d30 <_is_user_context>
   14936:	4603      	mov	r3, r0
   14938:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
				return -EINVAL;
   1493c:	f06f 0315 	mvn.w	r3, #21
   14940:	e0b8      	b.n	14ab4 <net_conn_register+0x2c8>
			}

			conns[i].flags |= NET_CONN_LOCAL_ADDR_SET;
   14942:	4a5e      	ldr	r2, [pc, #376]	; (14abc <net_conn_register+0x2d0>)
   14944:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14948:	015b      	lsls	r3, r3, #5
   1494a:	4413      	add	r3, r2
   1494c:	331b      	adds	r3, #27
   1494e:	781b      	ldrb	r3, [r3, #0]
   14950:	f043 0304 	orr.w	r3, r3, #4
   14954:	b2d9      	uxtb	r1, r3
   14956:	4a59      	ldr	r2, [pc, #356]	; (14abc <net_conn_register+0x2d0>)
   14958:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1495c:	015b      	lsls	r3, r3, #5
   1495e:	4413      	add	r3, r2
   14960:	331b      	adds	r3, #27
   14962:	460a      	mov	r2, r1
   14964:	701a      	strb	r2, [r3, #0]
		}

		if (remote_addr && local_addr) {
   14966:	68bb      	ldr	r3, [r7, #8]
   14968:	2b00      	cmp	r3, #0
   1496a:	d010      	beq.n	1498e <net_conn_register+0x1a2>
   1496c:	687b      	ldr	r3, [r7, #4]
   1496e:	2b00      	cmp	r3, #0
   14970:	d00d      	beq.n	1498e <net_conn_register+0x1a2>
			if (remote_addr->sa_family != local_addr->sa_family) {
   14972:	68bb      	ldr	r3, [r7, #8]
   14974:	881a      	ldrh	r2, [r3, #0]
   14976:	687b      	ldr	r3, [r7, #4]
   14978:	881b      	ldrh	r3, [r3, #0]
   1497a:	429a      	cmp	r2, r3
   1497c:	d007      	beq.n	1498e <net_conn_register+0x1a2>
				NET_ERR("Address families different");
   1497e:	f013 f9d7 	bl	27d30 <_is_user_context>
   14982:	4603      	mov	r3, r0
   14984:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
				return -EINVAL;
   14988:	f06f 0315 	mvn.w	r3, #21
   1498c:	e092      	b.n	14ab4 <net_conn_register+0x2c8>
			}
		}

		if (remote_port) {
   1498e:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
   14992:	2b00      	cmp	r3, #0
   14994:	d01b      	beq.n	149ce <net_conn_register+0x1e2>
			rank |= NET_RANK_REMOTE_PORT;
   14996:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
   1499a:	f043 0302 	orr.w	r3, r3, #2
   1499e:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			net_sin(&conns[i].remote_addr)->sin_port =
				htons(remote_port);
   149a2:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
   149a6:	0a1b      	lsrs	r3, r3, #8
   149a8:	b29b      	uxth	r3, r3
   149aa:	b21a      	sxth	r2, r3
   149ac:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
   149b0:	021b      	lsls	r3, r3, #8
   149b2:	b21b      	sxth	r3, r3
   149b4:	4313      	orrs	r3, r2
   149b6:	b21c      	sxth	r4, r3
			net_sin(&conns[i].remote_addr)->sin_port =
   149b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   149bc:	015b      	lsls	r3, r3, #5
   149be:	4a3f      	ldr	r2, [pc, #252]	; (14abc <net_conn_register+0x2d0>)
   149c0:	4413      	add	r3, r2
   149c2:	4618      	mov	r0, r3
   149c4:	f013 fa38 	bl	27e38 <net_sin>
   149c8:	4603      	mov	r3, r0
				htons(remote_port);
   149ca:	b2a2      	uxth	r2, r4
			net_sin(&conns[i].remote_addr)->sin_port =
   149cc:	805a      	strh	r2, [r3, #2]
		}

		if (local_port) {
   149ce:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
   149d2:	2b00      	cmp	r3, #0
   149d4:	d01c      	beq.n	14a10 <net_conn_register+0x224>
			rank |= NET_RANK_LOCAL_PORT;
   149d6:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
   149da:	f043 0301 	orr.w	r3, r3, #1
   149de:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			net_sin(&conns[i].local_addr)->sin_port =
				htons(local_port);
   149e2:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
   149e6:	0a1b      	lsrs	r3, r3, #8
   149e8:	b29b      	uxth	r3, r3
   149ea:	b21a      	sxth	r2, r3
   149ec:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
   149f0:	021b      	lsls	r3, r3, #8
   149f2:	b21b      	sxth	r3, r3
   149f4:	4313      	orrs	r3, r2
   149f6:	b21c      	sxth	r4, r3
			net_sin(&conns[i].local_addr)->sin_port =
   149f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   149fc:	015b      	lsls	r3, r3, #5
   149fe:	3308      	adds	r3, #8
   14a00:	4a2e      	ldr	r2, [pc, #184]	; (14abc <net_conn_register+0x2d0>)
   14a02:	4413      	add	r3, r2
   14a04:	4618      	mov	r0, r3
   14a06:	f013 fa17 	bl	27e38 <net_sin>
   14a0a:	4603      	mov	r3, r0
				htons(local_port);
   14a0c:	b2a2      	uxth	r2, r4
			net_sin(&conns[i].local_addr)->sin_port =
   14a0e:	805a      	strh	r2, [r3, #2]
		}

		conns[i].flags |= NET_CONN_IN_USE;
   14a10:	4a2a      	ldr	r2, [pc, #168]	; (14abc <net_conn_register+0x2d0>)
   14a12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14a16:	015b      	lsls	r3, r3, #5
   14a18:	4413      	add	r3, r2
   14a1a:	331b      	adds	r3, #27
   14a1c:	781b      	ldrb	r3, [r3, #0]
   14a1e:	f043 0301 	orr.w	r3, r3, #1
   14a22:	b2d9      	uxtb	r1, r3
   14a24:	4a25      	ldr	r2, [pc, #148]	; (14abc <net_conn_register+0x2d0>)
   14a26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14a2a:	015b      	lsls	r3, r3, #5
   14a2c:	4413      	add	r3, r2
   14a2e:	331b      	adds	r3, #27
   14a30:	460a      	mov	r2, r1
   14a32:	701a      	strb	r2, [r3, #0]
		conns[i].cb = cb;
   14a34:	4a21      	ldr	r2, [pc, #132]	; (14abc <net_conn_register+0x2d0>)
   14a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14a3a:	015b      	lsls	r3, r3, #5
   14a3c:	4413      	add	r3, r2
   14a3e:	3310      	adds	r3, #16
   14a40:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
   14a44:	601a      	str	r2, [r3, #0]
		conns[i].user_data = user_data;
   14a46:	4a1d      	ldr	r2, [pc, #116]	; (14abc <net_conn_register+0x2d0>)
   14a48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14a4c:	015b      	lsls	r3, r3, #5
   14a4e:	4413      	add	r3, r2
   14a50:	3314      	adds	r3, #20
   14a52:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
   14a56:	601a      	str	r2, [r3, #0]
		conns[i].rank = rank;
   14a58:	4a18      	ldr	r2, [pc, #96]	; (14abc <net_conn_register+0x2d0>)
   14a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14a5e:	015b      	lsls	r3, r3, #5
   14a60:	4413      	add	r3, r2
   14a62:	331c      	adds	r3, #28
   14a64:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
   14a68:	701a      	strb	r2, [r3, #0]
		conns[i].proto = proto;
   14a6a:	4a14      	ldr	r2, [pc, #80]	; (14abc <net_conn_register+0x2d0>)
   14a6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14a70:	015b      	lsls	r3, r3, #5
   14a72:	4413      	add	r3, r2
   14a74:	3318      	adds	r3, #24
   14a76:	89fa      	ldrh	r2, [r7, #14]
   14a78:	801a      	strh	r2, [r3, #0]
		conns[i].family = family;
   14a7a:	4a10      	ldr	r2, [pc, #64]	; (14abc <net_conn_register+0x2d0>)
   14a7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14a80:	015b      	lsls	r3, r3, #5
   14a82:	4413      	add	r3, r2
   14a84:	331a      	adds	r3, #26
   14a86:	7b7a      	ldrb	r2, [r7, #13]
   14a88:	701a      	strb	r2, [r3, #0]
			NET_DBG("  local %p/%s/%u cb %p ud %p",
				local_addr, log_strdup(src), local_port,
				cb, user_data);
		}

		if (handle) {
   14a8a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   14a8e:	2b00      	cmp	r3, #0
   14a90:	d007      	beq.n	14aa2 <net_conn_register+0x2b6>
			*handle = (struct net_conn_handle *)&conns[i];
   14a92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14a96:	015b      	lsls	r3, r3, #5
   14a98:	4a08      	ldr	r2, [pc, #32]	; (14abc <net_conn_register+0x2d0>)
   14a9a:	441a      	add	r2, r3
   14a9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   14aa0:	601a      	str	r2, [r3, #0]
		}

		return 0;
   14aa2:	2300      	movs	r3, #0
   14aa4:	e006      	b.n	14ab4 <net_conn_register+0x2c8>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   14aa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14aaa:	2b03      	cmp	r3, #3
   14aac:	f77f aec9 	ble.w	14842 <net_conn_register+0x56>
	}

	return -ENOENT;
   14ab0:	f06f 0301 	mvn.w	r3, #1
}
   14ab4:	4618      	mov	r0, r3
   14ab6:	3794      	adds	r7, #148	; 0x94
   14ab8:	46bd      	mov	sp, r7
   14aba:	bd90      	pop	{r4, r7, pc}
   14abc:	20004208 	.word	0x20004208

00014ac0 <net_conn_input>:

enum net_verdict net_conn_input(struct net_pkt *pkt,
				union net_ip_header *ip_hdr,
				u8_t proto,
				union net_proto_header *proto_hdr)
{
   14ac0:	b590      	push	{r4, r7, lr}
   14ac2:	b0ab      	sub	sp, #172	; 0xac
   14ac4:	af02      	add	r7, sp, #8
   14ac6:	60f8      	str	r0, [r7, #12]
   14ac8:	60b9      	str	r1, [r7, #8]
   14aca:	603b      	str	r3, [r7, #0]
   14acc:	4613      	mov	r3, r2
   14ace:	71fb      	strb	r3, [r7, #7]
	struct net_if *pkt_iface = net_pkt_iface(pkt);
   14ad0:	68f8      	ldr	r0, [r7, #12]
   14ad2:	f013 f9bb 	bl	27e4c <net_pkt_iface>
   14ad6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	int i, best_match = -1;
   14ada:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14ade:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	s16_t best_rank = -1;
   14ae2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14ae6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	enum net_verdict verdict;
	u32_t cache_value = 0U;
	s32_t pos;
#endif

	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   14aea:	79fb      	ldrb	r3, [r7, #7]
   14aec:	2b11      	cmp	r3, #17
   14aee:	d11e      	bne.n	14b2e <net_conn_input+0x6e>
		src_port = proto_hdr->udp->src_port;
   14af0:	683b      	ldr	r3, [r7, #0]
   14af2:	681b      	ldr	r3, [r3, #0]
   14af4:	781a      	ldrb	r2, [r3, #0]
   14af6:	785b      	ldrb	r3, [r3, #1]
   14af8:	021b      	lsls	r3, r3, #8
   14afa:	4313      	orrs	r3, r2
   14afc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
		dst_port = proto_hdr->udp->dst_port;
   14b00:	683b      	ldr	r3, [r7, #0]
   14b02:	681b      	ldr	r3, [r3, #0]
   14b04:	789a      	ldrb	r2, [r3, #2]
   14b06:	78db      	ldrb	r3, [r3, #3]
   14b08:	021b      	lsls	r3, r3, #8
   14b0a:	4313      	orrs	r3, r2
   14b0c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	} else {
		NET_DBG("No suitable protocol handler configured");
		return NET_DROP;
	}

	if (!is_valid_packet(pkt, ip_hdr, src_port, dst_port)) {
   14b10:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
   14b14:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
   14b18:	68b9      	ldr	r1, [r7, #8]
   14b1a:	68f8      	ldr	r0, [r7, #12]
   14b1c:	f013 fa1e 	bl	27f5c <is_valid_packet>
   14b20:	4603      	mov	r3, r0
   14b22:	f083 0301 	eor.w	r3, r3, #1
   14b26:	b2db      	uxtb	r3, r3
   14b28:	2b00      	cmp	r3, #0
   14b2a:	d00e      	beq.n	14b4a <net_conn_input+0x8a>
   14b2c:	e006      	b.n	14b3c <net_conn_input+0x7c>
		NET_DBG("No suitable protocol handler configured");
   14b2e:	f013 f8ff 	bl	27d30 <_is_user_context>
   14b32:	4603      	mov	r3, r0
   14b34:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
		return NET_DROP;
   14b38:	2302      	movs	r3, #2
   14b3a:	e13a      	b.n	14db2 <net_conn_input+0x2f2>
		NET_DBG("Dropping invalid packet");
   14b3c:	f013 f8f8 	bl	27d30 <_is_user_context>
   14b40:	4603      	mov	r3, r0
   14b42:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		return NET_DROP;
   14b46:	2302      	movs	r3, #2
   14b48:	e133      	b.n	14db2 <net_conn_input+0x2f2>
	if (verdict != NET_CONTINUE) {
		return verdict;
	}
#endif

	NET_DBG("Check %s listener for pkt %p src port %u dst port %u"
   14b4a:	f013 f8f1 	bl	27d30 <_is_user_context>
   14b4e:	4603      	mov	r3, r0
   14b50:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		" family %d", net_proto2str(net_pkt_family(pkt), proto), pkt,
		ntohs(src_port), ntohs(dst_port), net_pkt_family(pkt));

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   14b54:	2300      	movs	r3, #0
   14b56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   14b5a:	e0d9      	b.n	14d10 <net_conn_input+0x250>
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   14b5c:	4a97      	ldr	r2, [pc, #604]	; (14dbc <net_conn_input+0x2fc>)
   14b5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   14b62:	015b      	lsls	r3, r3, #5
   14b64:	4413      	add	r3, r2
   14b66:	331b      	adds	r3, #27
   14b68:	781b      	ldrb	r3, [r3, #0]
   14b6a:	f003 0301 	and.w	r3, r3, #1
   14b6e:	2b00      	cmp	r3, #0
   14b70:	f000 80ba 	beq.w	14ce8 <net_conn_input+0x228>
			continue;
		}

		if (conns[i].proto != proto) {
   14b74:	4a91      	ldr	r2, [pc, #580]	; (14dbc <net_conn_input+0x2fc>)
   14b76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   14b7a:	015b      	lsls	r3, r3, #5
   14b7c:	4413      	add	r3, r2
   14b7e:	3318      	adds	r3, #24
   14b80:	881a      	ldrh	r2, [r3, #0]
   14b82:	79fb      	ldrb	r3, [r7, #7]
   14b84:	b29b      	uxth	r3, r3
   14b86:	429a      	cmp	r2, r3
   14b88:	f040 80b0 	bne.w	14cec <net_conn_input+0x22c>
			continue;
		}

		if (conns[i].family != AF_UNSPEC &&
   14b8c:	4a8b      	ldr	r2, [pc, #556]	; (14dbc <net_conn_input+0x2fc>)
   14b8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   14b92:	015b      	lsls	r3, r3, #5
   14b94:	4413      	add	r3, r2
   14b96:	331a      	adds	r3, #26
   14b98:	781b      	ldrb	r3, [r3, #0]
   14b9a:	2b00      	cmp	r3, #0
   14b9c:	d00d      	beq.n	14bba <net_conn_input+0xfa>
		    conns[i].family != net_pkt_family(pkt)) {
   14b9e:	4a87      	ldr	r2, [pc, #540]	; (14dbc <net_conn_input+0x2fc>)
   14ba0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   14ba4:	015b      	lsls	r3, r3, #5
   14ba6:	4413      	add	r3, r2
   14ba8:	331a      	adds	r3, #26
   14baa:	781c      	ldrb	r4, [r3, #0]
   14bac:	68f8      	ldr	r0, [r7, #12]
   14bae:	f013 f958 	bl	27e62 <net_pkt_family>
   14bb2:	4603      	mov	r3, r0
		if (conns[i].family != AF_UNSPEC &&
   14bb4:	429c      	cmp	r4, r3
   14bb6:	f040 809b 	bne.w	14cf0 <net_conn_input+0x230>
			continue;
		}

		if (IS_ENABLED(CONFIG_NET_UDP) ||
		    IS_ENABLED(CONFIG_NET_TCP)) {
			if (net_sin(&conns[i].remote_addr)->sin_port) {
   14bba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   14bbe:	015b      	lsls	r3, r3, #5
   14bc0:	4a7e      	ldr	r2, [pc, #504]	; (14dbc <net_conn_input+0x2fc>)
   14bc2:	4413      	add	r3, r2
   14bc4:	4618      	mov	r0, r3
   14bc6:	f013 f937 	bl	27e38 <net_sin>
   14bca:	4603      	mov	r3, r0
   14bcc:	885b      	ldrh	r3, [r3, #2]
   14bce:	2b00      	cmp	r3, #0
   14bd0:	d00e      	beq.n	14bf0 <net_conn_input+0x130>
				if (net_sin(&conns[i].remote_addr)->sin_port !=
   14bd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   14bd6:	015b      	lsls	r3, r3, #5
   14bd8:	4a78      	ldr	r2, [pc, #480]	; (14dbc <net_conn_input+0x2fc>)
   14bda:	4413      	add	r3, r2
   14bdc:	4618      	mov	r0, r3
   14bde:	f013 f92b 	bl	27e38 <net_sin>
   14be2:	4603      	mov	r3, r0
   14be4:	885b      	ldrh	r3, [r3, #2]
   14be6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
   14bea:	429a      	cmp	r2, r3
   14bec:	f040 8082 	bne.w	14cf4 <net_conn_input+0x234>
				    src_port) {
					continue;
				}
			}

			if (net_sin(&conns[i].local_addr)->sin_port) {
   14bf0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   14bf4:	015b      	lsls	r3, r3, #5
   14bf6:	3308      	adds	r3, #8
   14bf8:	4a70      	ldr	r2, [pc, #448]	; (14dbc <net_conn_input+0x2fc>)
   14bfa:	4413      	add	r3, r2
   14bfc:	4618      	mov	r0, r3
   14bfe:	f013 f91b 	bl	27e38 <net_sin>
   14c02:	4603      	mov	r3, r0
   14c04:	885b      	ldrh	r3, [r3, #2]
   14c06:	2b00      	cmp	r3, #0
   14c08:	d00e      	beq.n	14c28 <net_conn_input+0x168>
				if (net_sin(&conns[i].local_addr)->sin_port !=
   14c0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   14c0e:	015b      	lsls	r3, r3, #5
   14c10:	3308      	adds	r3, #8
   14c12:	4a6a      	ldr	r2, [pc, #424]	; (14dbc <net_conn_input+0x2fc>)
   14c14:	4413      	add	r3, r2
   14c16:	4618      	mov	r0, r3
   14c18:	f013 f90e 	bl	27e38 <net_sin>
   14c1c:	4603      	mov	r3, r0
   14c1e:	885b      	ldrh	r3, [r3, #2]
   14c20:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
   14c24:	429a      	cmp	r2, r3
   14c26:	d167      	bne.n	14cf8 <net_conn_input+0x238>
				    dst_port) {
					continue;
				}
			}

			if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   14c28:	4a64      	ldr	r2, [pc, #400]	; (14dbc <net_conn_input+0x2fc>)
   14c2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   14c2e:	015b      	lsls	r3, r3, #5
   14c30:	4413      	add	r3, r2
   14c32:	331b      	adds	r3, #27
   14c34:	781b      	ldrb	r3, [r3, #0]
   14c36:	f003 0302 	and.w	r3, r3, #2
   14c3a:	2b00      	cmp	r3, #0
   14c3c:	d00f      	beq.n	14c5e <net_conn_input+0x19e>
				if (!check_addr(pkt, ip_hdr,
   14c3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   14c42:	015b      	lsls	r3, r3, #5
   14c44:	4a5d      	ldr	r2, [pc, #372]	; (14dbc <net_conn_input+0x2fc>)
   14c46:	441a      	add	r2, r3
   14c48:	2301      	movs	r3, #1
   14c4a:	68b9      	ldr	r1, [r7, #8]
   14c4c:	68f8      	ldr	r0, [r7, #12]
   14c4e:	f013 f92d 	bl	27eac <check_addr>
   14c52:	4603      	mov	r3, r0
   14c54:	f083 0301 	eor.w	r3, r3, #1
   14c58:	b2db      	uxtb	r3, r3
   14c5a:	2b00      	cmp	r3, #0
   14c5c:	d14e      	bne.n	14cfc <net_conn_input+0x23c>
						true)) {
					continue;
				}
			}

			if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   14c5e:	4a57      	ldr	r2, [pc, #348]	; (14dbc <net_conn_input+0x2fc>)
   14c60:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   14c64:	015b      	lsls	r3, r3, #5
   14c66:	4413      	add	r3, r2
   14c68:	331b      	adds	r3, #27
   14c6a:	781b      	ldrb	r3, [r3, #0]
   14c6c:	f003 0304 	and.w	r3, r3, #4
   14c70:	2b00      	cmp	r3, #0
   14c72:	d010      	beq.n	14c96 <net_conn_input+0x1d6>
				if (!check_addr(pkt, ip_hdr,
   14c74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   14c78:	015b      	lsls	r3, r3, #5
   14c7a:	3308      	adds	r3, #8
   14c7c:	4a4f      	ldr	r2, [pc, #316]	; (14dbc <net_conn_input+0x2fc>)
   14c7e:	441a      	add	r2, r3
   14c80:	2300      	movs	r3, #0
   14c82:	68b9      	ldr	r1, [r7, #8]
   14c84:	68f8      	ldr	r0, [r7, #12]
   14c86:	f013 f911 	bl	27eac <check_addr>
   14c8a:	4603      	mov	r3, r0
   14c8c:	f083 0301 	eor.w	r3, r3, #1
   14c90:	b2db      	uxtb	r3, r3
   14c92:	2b00      	cmp	r3, #0
   14c94:	d134      	bne.n	14d00 <net_conn_input+0x240>

			/* If we have an existing best_match, and that one
			 * specifies a remote port, then we've matched to a
			 * LISTENING connection that should not override.
			 */
			if (best_match >= 0 &&
   14c96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   14c9a:	2b00      	cmp	r3, #0
   14c9c:	db0b      	blt.n	14cb6 <net_conn_input+0x1f6>
			    net_sin(&conns[best_match].remote_addr)->sin_port) {
   14c9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   14ca2:	015b      	lsls	r3, r3, #5
   14ca4:	4a45      	ldr	r2, [pc, #276]	; (14dbc <net_conn_input+0x2fc>)
   14ca6:	4413      	add	r3, r2
   14ca8:	4618      	mov	r0, r3
   14caa:	f013 f8c5 	bl	27e38 <net_sin>
   14cae:	4603      	mov	r3, r0
   14cb0:	885b      	ldrh	r3, [r3, #2]
			if (best_match >= 0 &&
   14cb2:	2b00      	cmp	r3, #0
   14cb4:	d126      	bne.n	14d04 <net_conn_input+0x244>
				continue;
			}

			if (best_rank < conns[i].rank) {
   14cb6:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
   14cba:	4940      	ldr	r1, [pc, #256]	; (14dbc <net_conn_input+0x2fc>)
   14cbc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
   14cc0:	0152      	lsls	r2, r2, #5
   14cc2:	440a      	add	r2, r1
   14cc4:	321c      	adds	r2, #28
   14cc6:	7812      	ldrb	r2, [r2, #0]
   14cc8:	4293      	cmp	r3, r2
   14cca:	da1c      	bge.n	14d06 <net_conn_input+0x246>
				best_rank = conns[i].rank;
   14ccc:	4a3b      	ldr	r2, [pc, #236]	; (14dbc <net_conn_input+0x2fc>)
   14cce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   14cd2:	015b      	lsls	r3, r3, #5
   14cd4:	4413      	add	r3, r2
   14cd6:	331c      	adds	r3, #28
   14cd8:	781b      	ldrb	r3, [r3, #0]
   14cda:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
				best_match = i;
   14cde:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   14ce2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   14ce6:	e00e      	b.n	14d06 <net_conn_input+0x246>
			continue;
   14ce8:	bf00      	nop
   14cea:	e00c      	b.n	14d06 <net_conn_input+0x246>
			continue;
   14cec:	bf00      	nop
   14cee:	e00a      	b.n	14d06 <net_conn_input+0x246>
			continue;
   14cf0:	bf00      	nop
   14cf2:	e008      	b.n	14d06 <net_conn_input+0x246>
					continue;
   14cf4:	bf00      	nop
   14cf6:	e006      	b.n	14d06 <net_conn_input+0x246>
					continue;
   14cf8:	bf00      	nop
   14cfa:	e004      	b.n	14d06 <net_conn_input+0x246>
					continue;
   14cfc:	bf00      	nop
   14cfe:	e002      	b.n	14d06 <net_conn_input+0x246>
					continue;
   14d00:	bf00      	nop
   14d02:	e000      	b.n	14d06 <net_conn_input+0x246>
				continue;
   14d04:	bf00      	nop
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   14d06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   14d0a:	3301      	adds	r3, #1
   14d0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   14d10:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   14d14:	2b03      	cmp	r3, #3
   14d16:	f77f af21 	ble.w	14b5c <net_conn_input+0x9c>
			best_rank = 0;
			best_match = i;
		}
	}

	if (best_match >= 0) {
   14d1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   14d1e:	2b00      	cmp	r3, #0
   14d20:	db27      	blt.n	14d72 <net_conn_input+0x2b2>

		if (pos >= 0) {
			conn_cache[pos].idx = best_match;
		}
#else
		NET_DBG("[%d] match found cb %p ud %p rank 0x%02x",
   14d22:	f013 f805 	bl	27d30 <_is_user_context>
   14d26:	4603      	mov	r3, r0
   14d28:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
			conns[best_match].cb,
			conns[best_match].user_data,
			conns[best_match].rank);
#endif /* CONFIG_NET_CONN_CACHE */

		if (conns[best_match].cb(&conns[best_match], pkt, ip_hdr,
   14d2c:	4a23      	ldr	r2, [pc, #140]	; (14dbc <net_conn_input+0x2fc>)
   14d2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   14d32:	015b      	lsls	r3, r3, #5
   14d34:	4413      	add	r3, r2
   14d36:	3310      	adds	r3, #16
   14d38:	681c      	ldr	r4, [r3, #0]
   14d3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   14d3e:	015b      	lsls	r3, r3, #5
   14d40:	4a1e      	ldr	r2, [pc, #120]	; (14dbc <net_conn_input+0x2fc>)
   14d42:	1898      	adds	r0, r3, r2
   14d44:	4a1d      	ldr	r2, [pc, #116]	; (14dbc <net_conn_input+0x2fc>)
   14d46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   14d4a:	015b      	lsls	r3, r3, #5
   14d4c:	4413      	add	r3, r2
   14d4e:	3314      	adds	r3, #20
   14d50:	681b      	ldr	r3, [r3, #0]
   14d52:	9300      	str	r3, [sp, #0]
   14d54:	683b      	ldr	r3, [r7, #0]
   14d56:	68ba      	ldr	r2, [r7, #8]
   14d58:	68f9      	ldr	r1, [r7, #12]
   14d5a:	47a0      	blx	r4
   14d5c:	4603      	mov	r3, r0
   14d5e:	2b02      	cmp	r3, #2
   14d60:	d01f      	beq.n	14da2 <net_conn_input+0x2e2>
			proto_hdr, conns[best_match].user_data) == NET_DROP) {
			goto drop;
		}

		net_stats_update_per_proto_recv(pkt_iface, proto);
   14d62:	79fb      	ldrb	r3, [r7, #7]
   14d64:	4619      	mov	r1, r3
   14d66:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14d6a:	f013 f889 	bl	27e80 <net_stats_update_per_proto_recv>

		return NET_OK;
   14d6e:	2300      	movs	r3, #0
   14d70:	e01f      	b.n	14db2 <net_conn_input+0x2f2>
	}

	NET_DBG("No match found.");
   14d72:	f012 ffdd 	bl	27d30 <_is_user_context>
   14d76:	4603      	mov	r3, r0
   14d78:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
	    net_pkt_family(pkt) == AF_INET6 &&
	    net_ipv6_is_addr_mcast(&ip_hdr->ipv6->dst)) {
		;
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
		   net_pkt_family(pkt) == AF_INET &&
   14d7c:	68f8      	ldr	r0, [r7, #12]
   14d7e:	f013 f870 	bl	27e62 <net_pkt_family>
   14d82:	4603      	mov	r3, r0
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   14d84:	2b01      	cmp	r3, #1
   14d86:	d108      	bne.n	14d9a <net_conn_input+0x2da>
		   net_ipv4_is_addr_mcast(&ip_hdr->ipv4->dst)) {
   14d88:	68bb      	ldr	r3, [r7, #8]
   14d8a:	681b      	ldr	r3, [r3, #0]
   14d8c:	3310      	adds	r3, #16
   14d8e:	4618      	mov	r0, r3
   14d90:	f012 ffd5 	bl	27d3e <net_ipv4_is_addr_mcast>
   14d94:	4603      	mov	r3, r0
		   net_pkt_family(pkt) == AF_INET &&
   14d96:	2b00      	cmp	r3, #0
   14d98:	d104      	bne.n	14da4 <net_conn_input+0x2e4>
		;
	} else if (IS_ENABLED(CONFIG_NET_SOCKETS_PACKET) &&
		    net_pkt_family(pkt) == AF_PACKET) {
		;
	} else {
		send_icmp_error(pkt);
   14d9a:	68f8      	ldr	r0, [r7, #12]
   14d9c:	f013 f8cb 	bl	27f36 <send_icmp_error>
		if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
			net_stats_update_tcp_seg_connrst(net_pkt_iface(pkt));
		}
	}

drop:
   14da0:	e000      	b.n	14da4 <net_conn_input+0x2e4>
			goto drop;
   14da2:	bf00      	nop
	net_stats_update_per_proto_drop(pkt_iface, proto);
   14da4:	79fb      	ldrb	r3, [r7, #7]
   14da6:	4619      	mov	r1, r3
   14da8:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14dac:	f013 f873 	bl	27e96 <net_stats_update_per_proto_drop>

	return NET_DROP;
   14db0:	2302      	movs	r3, #2
}
   14db2:	4618      	mov	r0, r3
   14db4:	37a4      	adds	r7, #164	; 0xa4
   14db6:	46bd      	mov	sp, r7
   14db8:	bd90      	pop	{r4, r7, pc}
   14dba:	bf00      	nop
   14dbc:	20004208 	.word	0x20004208

00014dc0 <setup_ipv4>:
#endif

#if defined(CONFIG_NET_IPV4) && defined(CONFIG_NET_CONFIG_MY_IPV4_ADDR)

static void setup_ipv4(struct net_if *iface)
{
   14dc0:	b580      	push	{r7, lr}
   14dc2:	b088      	sub	sp, #32
   14dc4:	af00      	add	r7, sp, #0
   14dc6:	6078      	str	r0, [r7, #4]
	if (sizeof(CONFIG_NET_CONFIG_MY_IPV4_ADDR) == 1) {
		/* Empty address, skip setting ANY address in this case */
		return;
	}

	if (net_addr_pton(AF_INET, CONFIG_NET_CONFIG_MY_IPV4_ADDR, &addr)) {
   14dc8:	f107 0318 	add.w	r3, r7, #24
   14dcc:	461a      	mov	r2, r3
   14dce:	4919      	ldr	r1, [pc, #100]	; (14e34 <setup_ipv4+0x74>)
   14dd0:	2001      	movs	r0, #1
   14dd2:	f011 fcfb 	bl	267cc <net_addr_pton>
   14dd6:	4603      	mov	r3, r0
   14dd8:	2b00      	cmp	r3, #0
   14dda:	d004      	beq.n	14de6 <setup_ipv4+0x26>
		NET_ERR("Invalid address: %s", CONFIG_NET_CONFIG_MY_IPV4_ADDR);
   14ddc:	f013 fa30 	bl	28240 <_is_user_context>
   14de0:	4603      	mov	r3, r0
   14de2:	77bb      	strb	r3, [r7, #30]
   14de4:	e022      	b.n	14e2c <setup_ipv4+0x6c>
	 * (In this case, an app will need to bind to the needed addr
	 * explicitly.)
	 */
	net_if_ipv4_addr_add(iface, &addr, NET_ADDR_OVERRIDABLE, 0);
#else
	net_if_ipv4_addr_add(iface, &addr, NET_ADDR_MANUAL, 0);
   14de6:	f107 0118 	add.w	r1, r7, #24
   14dea:	2300      	movs	r3, #0
   14dec:	2203      	movs	r2, #3
   14dee:	6878      	ldr	r0, [r7, #4]
   14df0:	f7fe fc5a 	bl	136a8 <net_if_ipv4_addr_add>
					  sizeof(hr_addr))));
#endif

	if (sizeof(CONFIG_NET_CONFIG_MY_IPV4_NETMASK) > 1) {
		/* If not empty */
		if (net_addr_pton(AF_INET, CONFIG_NET_CONFIG_MY_IPV4_NETMASK,
   14df4:	f107 0318 	add.w	r3, r7, #24
   14df8:	461a      	mov	r2, r3
   14dfa:	490f      	ldr	r1, [pc, #60]	; (14e38 <setup_ipv4+0x78>)
   14dfc:	2001      	movs	r0, #1
   14dfe:	f011 fce5 	bl	267cc <net_addr_pton>
   14e02:	4603      	mov	r3, r0
   14e04:	2b00      	cmp	r3, #0
   14e06:	d004      	beq.n	14e12 <setup_ipv4+0x52>
				  &addr)) {
			NET_ERR("Invalid netmask: %s",
   14e08:	f013 fa1a 	bl	28240 <_is_user_context>
   14e0c:	4603      	mov	r3, r0
   14e0e:	77fb      	strb	r3, [r7, #31]
   14e10:	e005      	b.n	14e1e <setup_ipv4+0x5e>
				CONFIG_NET_CONFIG_MY_IPV4_NETMASK);
		} else {
			net_if_ipv4_set_netmask(iface, &addr);
   14e12:	f107 0318 	add.w	r3, r7, #24
   14e16:	4619      	mov	r1, r3
   14e18:	6878      	ldr	r0, [r7, #4]
   14e1a:	f013 fa57 	bl	282cc <net_if_ipv4_set_netmask>
		} else {
			net_if_ipv4_set_gw(iface, &addr);
		}
	}

	k_sem_take(&counter, K_NO_WAIT);
   14e1e:	2100      	movs	r1, #0
   14e20:	4806      	ldr	r0, [pc, #24]	; (14e3c <setup_ipv4+0x7c>)
   14e22:	f013 fa2e 	bl	28282 <k_sem_take>
	k_sem_give(&waiter);
   14e26:	4806      	ldr	r0, [pc, #24]	; (14e40 <setup_ipv4+0x80>)
   14e28:	f013 fa39 	bl	2829e <k_sem_give>
}
   14e2c:	3720      	adds	r7, #32
   14e2e:	46bd      	mov	sp, r7
   14e30:	bd80      	pop	{r7, pc}
   14e32:	bf00      	nop
   14e34:	0002e740 	.word	0x0002e740
   14e38:	0002e74c 	.word	0x0002e74c
   14e3c:	20004288 	.word	0x20004288
   14e40:	2000fe58 	.word	0x2000fe58

00014e44 <net_config_init>:
#else
#define setup_ipv6(...)
#endif /* CONFIG_NET_IPV6 */

int net_config_init(const char *app_info, u32_t flags, s32_t timeout)
{
   14e44:	b580      	push	{r7, lr}
   14e46:	b08c      	sub	sp, #48	; 0x30
   14e48:	af00      	add	r7, sp, #0
   14e4a:	60f8      	str	r0, [r7, #12]
   14e4c:	60b9      	str	r1, [r7, #8]
   14e4e:	607a      	str	r2, [r7, #4]
#define LOOP_DIVIDER 10
	struct net_if *iface = net_if_get_default();
   14e50:	f7fe fa92 	bl	13378 <net_if_get_default>
   14e54:	62f8      	str	r0, [r7, #44]	; 0x2c
	int loop = timeout / LOOP_DIVIDER;
   14e56:	687b      	ldr	r3, [r7, #4]
   14e58:	4a39      	ldr	r2, [pc, #228]	; (14f40 <net_config_init+0xfc>)
   14e5a:	fb82 1203 	smull	r1, r2, r2, r3
   14e5e:	1092      	asrs	r2, r2, #2
   14e60:	17db      	asrs	r3, r3, #31
   14e62:	1ad3      	subs	r3, r2, r3
   14e64:	62bb      	str	r3, [r7, #40]	; 0x28
	int count = 0;
   14e66:	2300      	movs	r3, #0
   14e68:	623b      	str	r3, [r7, #32]

	if (app_info) {
   14e6a:	68fb      	ldr	r3, [r7, #12]
   14e6c:	2b00      	cmp	r3, #0
   14e6e:	d004      	beq.n	14e7a <net_config_init+0x36>
		NET_INFO("%s", log_strdup(app_info));
   14e70:	f013 f9e6 	bl	28240 <_is_user_context>
   14e74:	4603      	mov	r3, r0
   14e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	if (!iface) {
   14e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14e7c:	2b00      	cmp	r3, #0
   14e7e:	d107      	bne.n	14e90 <net_config_init+0x4c>
		NET_ERR("No network interfaces");
   14e80:	f013 f9de 	bl	28240 <_is_user_context>
   14e84:	4603      	mov	r3, r0
   14e86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		return -ENODEV;
   14e8a:	f06f 0312 	mvn.w	r3, #18
   14e8e:	e052      	b.n	14f36 <net_config_init+0xf2>
	}

	if (flags & NET_CONFIG_NEED_IPV6) {
   14e90:	68bb      	ldr	r3, [r7, #8]
   14e92:	f003 0302 	and.w	r3, r3, #2
   14e96:	2b00      	cmp	r3, #0
   14e98:	d002      	beq.n	14ea0 <net_config_init+0x5c>
		count++;
   14e9a:	6a3b      	ldr	r3, [r7, #32]
   14e9c:	3301      	adds	r3, #1
   14e9e:	623b      	str	r3, [r7, #32]
	}

	if (flags & NET_CONFIG_NEED_IPV4) {
   14ea0:	68bb      	ldr	r3, [r7, #8]
   14ea2:	f003 0304 	and.w	r3, r3, #4
   14ea6:	2b00      	cmp	r3, #0
   14ea8:	d002      	beq.n	14eb0 <net_config_init+0x6c>
		count++;
   14eaa:	6a3b      	ldr	r3, [r7, #32]
   14eac:	3301      	adds	r3, #1
   14eae:	623b      	str	r3, [r7, #32]
	}

	k_sem_init(&counter, count, UINT_MAX);
   14eb0:	6a3b      	ldr	r3, [r7, #32]
   14eb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14eb6:	4619      	mov	r1, r3
   14eb8:	4822      	ldr	r0, [pc, #136]	; (14f44 <net_config_init+0x100>)
   14eba:	f013 f9d3 	bl	28264 <k_sem_init>

	setup_ipv4(iface);
   14ebe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   14ec0:	f7ff ff7e 	bl	14dc0 <setup_ipv4>

	setup_dhcpv4(iface);

	setup_ipv6(iface, flags);

	if (timeout < 0) {
   14ec4:	687b      	ldr	r3, [r7, #4]
   14ec6:	2b00      	cmp	r3, #0
   14ec8:	da03      	bge.n	14ed2 <net_config_init+0x8e>
		count = -1;
   14eca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14ece:	623b      	str	r3, [r7, #32]
   14ed0:	e01c      	b.n	14f0c <net_config_init+0xc8>
	} else if (timeout == 0) {
   14ed2:	687b      	ldr	r3, [r7, #4]
   14ed4:	2b00      	cmp	r3, #0
   14ed6:	d102      	bne.n	14ede <net_config_init+0x9a>
		count = 0;
   14ed8:	2300      	movs	r3, #0
   14eda:	623b      	str	r3, [r7, #32]
   14edc:	e016      	b.n	14f0c <net_config_init+0xc8>
	} else {
		count = timeout / 1000 + 1;
   14ede:	687b      	ldr	r3, [r7, #4]
   14ee0:	4a19      	ldr	r2, [pc, #100]	; (14f48 <net_config_init+0x104>)
   14ee2:	fb82 1203 	smull	r1, r2, r2, r3
   14ee6:	1192      	asrs	r2, r2, #6
   14ee8:	17db      	asrs	r3, r3, #31
   14eea:	1ad3      	subs	r3, r2, r3
   14eec:	3301      	adds	r3, #1
   14eee:	623b      	str	r3, [r7, #32]
	}

	/* Loop here until we are ready to continue. As we might need
	 * to wait multiple events, sleep smaller amounts of data.
	 */
	while (count--) {
   14ef0:	e00c      	b.n	14f0c <net_config_init+0xc8>
		if (k_sem_take(&waiter, loop)) {
   14ef2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   14ef4:	4815      	ldr	r0, [pc, #84]	; (14f4c <net_config_init+0x108>)
   14ef6:	f013 f9c4 	bl	28282 <k_sem_take>
   14efa:	4603      	mov	r3, r0
   14efc:	2b00      	cmp	r3, #0
   14efe:	d005      	beq.n	14f0c <net_config_init+0xc8>
			if (!k_sem_count_get(&counter)) {
   14f00:	4810      	ldr	r0, [pc, #64]	; (14f44 <net_config_init+0x100>)
   14f02:	f013 f9d7 	bl	282b4 <k_sem_count_get>
   14f06:	4603      	mov	r3, r0
   14f08:	2b00      	cmp	r3, #0
   14f0a:	d005      	beq.n	14f18 <net_config_init+0xd4>
	while (count--) {
   14f0c:	6a3b      	ldr	r3, [r7, #32]
   14f0e:	1e5a      	subs	r2, r3, #1
   14f10:	623a      	str	r2, [r7, #32]
   14f12:	2b00      	cmp	r3, #0
   14f14:	d1ed      	bne.n	14ef2 <net_config_init+0xae>
   14f16:	e000      	b.n	14f1a <net_config_init+0xd6>
				break;
   14f18:	bf00      	nop
			}
		}
	}

	if (!count && timeout) {
   14f1a:	6a3b      	ldr	r3, [r7, #32]
   14f1c:	2b00      	cmp	r3, #0
   14f1e:	d109      	bne.n	14f34 <net_config_init+0xf0>
   14f20:	687b      	ldr	r3, [r7, #4]
   14f22:	2b00      	cmp	r3, #0
   14f24:	d006      	beq.n	14f34 <net_config_init+0xf0>
		NET_ERR("Timeout while waiting setup");
   14f26:	f013 f98b 	bl	28240 <_is_user_context>
   14f2a:	4603      	mov	r3, r0
   14f2c:	77fb      	strb	r3, [r7, #31]
		return -ETIMEDOUT;
   14f2e:	f06f 0373 	mvn.w	r3, #115	; 0x73
   14f32:	e000      	b.n	14f36 <net_config_init+0xf2>
	}

	return 0;
   14f34:	2300      	movs	r3, #0
}
   14f36:	4618      	mov	r0, r3
   14f38:	3730      	adds	r7, #48	; 0x30
   14f3a:	46bd      	mov	sp, r7
   14f3c:	bd80      	pop	{r7, pc}
   14f3e:	bf00      	nop
   14f40:	66666667 	.word	0x66666667
   14f44:	20004288 	.word	0x20004288
   14f48:	10624dd3 	.word	0x10624dd3
   14f4c:	2000fe58 	.word	0x2000fe58

00014f50 <init_app>:

#if defined(CONFIG_NET_CONFIG_AUTO_INIT)
static int init_app(struct device *device)
{
   14f50:	b580      	push	{r7, lr}
   14f52:	b086      	sub	sp, #24
   14f54:	af00      	add	r7, sp, #0
   14f56:	6078      	str	r0, [r7, #4]
	u32_t flags = 0U;
   14f58:	2300      	movs	r3, #0
   14f5a:	617b      	str	r3, [r7, #20]
	if (IS_ENABLED(CONFIG_NET_CONFIG_NEED_IPV6_ROUTER)) {
		flags |= NET_CONFIG_NEED_ROUTER;
	}

	if (IS_ENABLED(CONFIG_NET_CONFIG_NEED_IPV4)) {
		flags |= NET_CONFIG_NEED_IPV4;
   14f5c:	697b      	ldr	r3, [r7, #20]
   14f5e:	f043 0304 	orr.w	r3, r3, #4
   14f62:	617b      	str	r3, [r7, #20]
	}

	/* Initialize the application automatically if needed */
	ret = net_config_init("Initializing network", flags,
   14f64:	f247 5230 	movw	r2, #30000	; 0x7530
   14f68:	6979      	ldr	r1, [r7, #20]
   14f6a:	4808      	ldr	r0, [pc, #32]	; (14f8c <init_app+0x3c>)
   14f6c:	f7ff ff6a 	bl	14e44 <net_config_init>
   14f70:	60f8      	str	r0, [r7, #12]
			      K_SECONDS(CONFIG_NET_CONFIG_INIT_TIMEOUT));
	if (ret < 0) {
   14f72:	68fb      	ldr	r3, [r7, #12]
   14f74:	2b00      	cmp	r3, #0
   14f76:	da03      	bge.n	14f80 <init_app+0x30>
		NET_ERR("Network initialization failed (%d)", ret);
   14f78:	f013 f962 	bl	28240 <_is_user_context>
   14f7c:	4603      	mov	r3, r0
   14f7e:	74fb      	strb	r3, [r7, #19]
		if (!log_backend_is_active(backend)) {
			log_backend_activate(backend, NULL);
		}
	}

	return ret;
   14f80:	68fb      	ldr	r3, [r7, #12]
}
   14f82:	4618      	mov	r0, r3
   14f84:	3718      	adds	r7, #24
   14f86:	46bd      	mov	sp, r7
   14f88:	bd80      	pop	{r7, pc}
   14f8a:	bf00      	nop
   14f8c:	0002e75c 	.word	0x0002e75c

00014f90 <netusb_send>:
/* TODO: FIXME: correct buffer size */
static u8_t interface_data[300];
#endif

static int netusb_send(struct device *dev, struct net_pkt *pkt)
{
   14f90:	b580      	push	{r7, lr}
   14f92:	b086      	sub	sp, #24
   14f94:	af00      	add	r7, sp, #0
   14f96:	6078      	str	r0, [r7, #4]
   14f98:	6039      	str	r1, [r7, #0]
	int ret;

	ARG_UNUSED(dev);

	LOG_DBG("Send pkt, len %u", net_pkt_get_len(pkt));
   14f9a:	f013 f9e6 	bl	2836a <_is_user_context>
   14f9e:	4603      	mov	r3, r0
   14fa0:	73fb      	strb	r3, [r7, #15]

	if (!netusb_enabled()) {
   14fa2:	f000 f8d3 	bl	1514c <netusb_enabled>
   14fa6:	4603      	mov	r3, r0
   14fa8:	f083 0301 	eor.w	r3, r3, #1
   14fac:	b2db      	uxtb	r3, r3
   14fae:	2b00      	cmp	r3, #0
   14fb0:	d006      	beq.n	14fc0 <netusb_send+0x30>
		LOG_ERR("interface disabled");
   14fb2:	f013 f9da 	bl	2836a <_is_user_context>
   14fb6:	4603      	mov	r3, r0
   14fb8:	75fb      	strb	r3, [r7, #23]
		return -ENODEV;
   14fba:	f06f 0312 	mvn.w	r3, #18
   14fbe:	e00b      	b.n	14fd8 <netusb_send+0x48>
	}

	ret = netusb.func->send_pkt(pkt);
   14fc0:	4b07      	ldr	r3, [pc, #28]	; (14fe0 <netusb_send+0x50>)
   14fc2:	685b      	ldr	r3, [r3, #4]
   14fc4:	685b      	ldr	r3, [r3, #4]
   14fc6:	6838      	ldr	r0, [r7, #0]
   14fc8:	4798      	blx	r3
   14fca:	6138      	str	r0, [r7, #16]
	if (ret) {
   14fcc:	693b      	ldr	r3, [r7, #16]
   14fce:	2b00      	cmp	r3, #0
   14fd0:	d001      	beq.n	14fd6 <netusb_send+0x46>
		return ret;
   14fd2:	693b      	ldr	r3, [r7, #16]
   14fd4:	e000      	b.n	14fd8 <netusb_send+0x48>
	}

	return 0;
   14fd6:	2300      	movs	r3, #0
}
   14fd8:	4618      	mov	r0, r3
   14fda:	3718      	adds	r7, #24
   14fdc:	46bd      	mov	sp, r7
   14fde:	bd80      	pop	{r7, pc}
   14fe0:	200042a0 	.word	0x200042a0

00014fe4 <netusb_net_iface>:

struct net_if *netusb_net_iface(void)
{
   14fe4:	b480      	push	{r7}
   14fe6:	af00      	add	r7, sp, #0
	return netusb.iface;
   14fe8:	4b02      	ldr	r3, [pc, #8]	; (14ff4 <netusb_net_iface+0x10>)
   14fea:	681b      	ldr	r3, [r3, #0]
}
   14fec:	4618      	mov	r0, r3
   14fee:	46bd      	mov	sp, r7
   14ff0:	bc80      	pop	{r7}
   14ff2:	4770      	bx	lr
   14ff4:	200042a0 	.word	0x200042a0

00014ff8 <netusb_recv>:

void netusb_recv(struct net_pkt *pkt)
{
   14ff8:	b580      	push	{r7, lr}
   14ffa:	b084      	sub	sp, #16
   14ffc:	af00      	add	r7, sp, #0
   14ffe:	6078      	str	r0, [r7, #4]
	LOG_DBG("Recv pkt, len %u", net_pkt_get_len(pkt));
   15000:	f013 f9b3 	bl	2836a <_is_user_context>
   15004:	4603      	mov	r3, r0
   15006:	73bb      	strb	r3, [r7, #14]

	if (net_recv_data(netusb.iface, pkt) < 0) {
   15008:	4b09      	ldr	r3, [pc, #36]	; (15030 <netusb_recv+0x38>)
   1500a:	681b      	ldr	r3, [r3, #0]
   1500c:	6879      	ldr	r1, [r7, #4]
   1500e:	4618      	mov	r0, r3
   15010:	f00f fdb1 	bl	24b76 <net_recv_data>
   15014:	4603      	mov	r3, r0
   15016:	2b00      	cmp	r3, #0
   15018:	da06      	bge.n	15028 <netusb_recv+0x30>
		LOG_ERR("Packet %p dropped by NET stack", pkt);
   1501a:	f013 f9a6 	bl	2836a <_is_user_context>
   1501e:	4603      	mov	r3, r0
   15020:	73fb      	strb	r3, [r7, #15]
		net_pkt_unref(pkt);
   15022:	6878      	ldr	r0, [r7, #4]
   15024:	f010 fcf1 	bl	25a0a <net_pkt_unref>
	}
}
   15028:	bf00      	nop
   1502a:	3710      	adds	r7, #16
   1502c:	46bd      	mov	sp, r7
   1502e:	bd80      	pop	{r7, pc}
   15030:	200042a0 	.word	0x200042a0

00015034 <netusb_connect_media>:

static int netusb_connect_media(void)
{
   15034:	b580      	push	{r7, lr}
   15036:	b082      	sub	sp, #8
   15038:	af00      	add	r7, sp, #0
	LOG_DBG("");
   1503a:	f013 f996 	bl	2836a <_is_user_context>
   1503e:	4603      	mov	r3, r0
   15040:	71fb      	strb	r3, [r7, #7]

	if (!netusb_enabled()) {
   15042:	f000 f883 	bl	1514c <netusb_enabled>
   15046:	4603      	mov	r3, r0
   15048:	f083 0301 	eor.w	r3, r3, #1
   1504c:	b2db      	uxtb	r3, r3
   1504e:	2b00      	cmp	r3, #0
   15050:	d006      	beq.n	15060 <netusb_connect_media+0x2c>
		LOG_ERR("interface disabled");
   15052:	f013 f98a 	bl	2836a <_is_user_context>
   15056:	4603      	mov	r3, r0
   15058:	71bb      	strb	r3, [r7, #6]
		return -ENODEV;
   1505a:	f06f 0312 	mvn.w	r3, #18
   1505e:	e00d      	b.n	1507c <netusb_connect_media+0x48>
	}

	if (!netusb.func->connect_media) {
   15060:	4b08      	ldr	r3, [pc, #32]	; (15084 <netusb_connect_media+0x50>)
   15062:	685b      	ldr	r3, [r3, #4]
   15064:	681b      	ldr	r3, [r3, #0]
   15066:	2b00      	cmp	r3, #0
   15068:	d102      	bne.n	15070 <netusb_connect_media+0x3c>
		return -ENOTSUP;
   1506a:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1506e:	e005      	b.n	1507c <netusb_connect_media+0x48>
	}

	return netusb.func->connect_media(true);
   15070:	4b04      	ldr	r3, [pc, #16]	; (15084 <netusb_connect_media+0x50>)
   15072:	685b      	ldr	r3, [r3, #4]
   15074:	681b      	ldr	r3, [r3, #0]
   15076:	2001      	movs	r0, #1
   15078:	4798      	blx	r3
   1507a:	4603      	mov	r3, r0
}
   1507c:	4618      	mov	r0, r3
   1507e:	3708      	adds	r7, #8
   15080:	46bd      	mov	sp, r7
   15082:	bd80      	pop	{r7, pc}
   15084:	200042a0 	.word	0x200042a0

00015088 <netusb_disconnect_media>:

static int netusb_disconnect_media(void)
{
   15088:	b580      	push	{r7, lr}
   1508a:	b082      	sub	sp, #8
   1508c:	af00      	add	r7, sp, #0
	LOG_DBG("");
   1508e:	f013 f96c 	bl	2836a <_is_user_context>
   15092:	4603      	mov	r3, r0
   15094:	71fb      	strb	r3, [r7, #7]

	if (!netusb_enabled()) {
   15096:	f000 f859 	bl	1514c <netusb_enabled>
   1509a:	4603      	mov	r3, r0
   1509c:	f083 0301 	eor.w	r3, r3, #1
   150a0:	b2db      	uxtb	r3, r3
   150a2:	2b00      	cmp	r3, #0
   150a4:	d006      	beq.n	150b4 <netusb_disconnect_media+0x2c>
		LOG_ERR("interface disabled");
   150a6:	f013 f960 	bl	2836a <_is_user_context>
   150aa:	4603      	mov	r3, r0
   150ac:	71bb      	strb	r3, [r7, #6]
		return -ENODEV;
   150ae:	f06f 0312 	mvn.w	r3, #18
   150b2:	e00d      	b.n	150d0 <netusb_disconnect_media+0x48>
	}

	if (!netusb.func->connect_media) {
   150b4:	4b08      	ldr	r3, [pc, #32]	; (150d8 <netusb_disconnect_media+0x50>)
   150b6:	685b      	ldr	r3, [r3, #4]
   150b8:	681b      	ldr	r3, [r3, #0]
   150ba:	2b00      	cmp	r3, #0
   150bc:	d102      	bne.n	150c4 <netusb_disconnect_media+0x3c>
		return -ENOTSUP;
   150be:	f06f 0385 	mvn.w	r3, #133	; 0x85
   150c2:	e005      	b.n	150d0 <netusb_disconnect_media+0x48>
	}

	return netusb.func->connect_media(false);
   150c4:	4b04      	ldr	r3, [pc, #16]	; (150d8 <netusb_disconnect_media+0x50>)
   150c6:	685b      	ldr	r3, [r3, #4]
   150c8:	681b      	ldr	r3, [r3, #0]
   150ca:	2000      	movs	r0, #0
   150cc:	4798      	blx	r3
   150ce:	4603      	mov	r3, r0
}
   150d0:	4618      	mov	r0, r3
   150d2:	3708      	adds	r7, #8
   150d4:	46bd      	mov	sp, r7
   150d6:	bd80      	pop	{r7, pc}
   150d8:	200042a0 	.word	0x200042a0

000150dc <netusb_enable>:

void netusb_enable(const struct netusb_function *func)
{
   150dc:	b580      	push	{r7, lr}
   150de:	b084      	sub	sp, #16
   150e0:	af00      	add	r7, sp, #0
   150e2:	6078      	str	r0, [r7, #4]
	LOG_DBG("");
   150e4:	f013 f941 	bl	2836a <_is_user_context>
   150e8:	4603      	mov	r3, r0
   150ea:	73fb      	strb	r3, [r7, #15]

	netusb.func = func;
   150ec:	4a06      	ldr	r2, [pc, #24]	; (15108 <netusb_enable+0x2c>)
   150ee:	687b      	ldr	r3, [r7, #4]
   150f0:	6053      	str	r3, [r2, #4]

	net_if_up(netusb.iface);
   150f2:	4b05      	ldr	r3, [pc, #20]	; (15108 <netusb_enable+0x2c>)
   150f4:	681b      	ldr	r3, [r3, #0]
   150f6:	4618      	mov	r0, r3
   150f8:	f7fe fc40 	bl	1397c <net_if_up>
	netusb_connect_media();
   150fc:	f7ff ff9a 	bl	15034 <netusb_connect_media>
}
   15100:	bf00      	nop
   15102:	3710      	adds	r7, #16
   15104:	46bd      	mov	sp, r7
   15106:	bd80      	pop	{r7, pc}
   15108:	200042a0 	.word	0x200042a0

0001510c <netusb_disable>:

void netusb_disable(void)
{
   1510c:	b580      	push	{r7, lr}
   1510e:	b082      	sub	sp, #8
   15110:	af00      	add	r7, sp, #0
	LOG_DBG("");
   15112:	f013 f92a 	bl	2836a <_is_user_context>
   15116:	4603      	mov	r3, r0
   15118:	71fb      	strb	r3, [r7, #7]

	if (!netusb_enabled()) {
   1511a:	f000 f817 	bl	1514c <netusb_enabled>
   1511e:	4603      	mov	r3, r0
   15120:	f083 0301 	eor.w	r3, r3, #1
   15124:	b2db      	uxtb	r3, r3
   15126:	2b00      	cmp	r3, #0
   15128:	d10a      	bne.n	15140 <netusb_disable+0x34>
		return;
	}

	netusb.func = NULL;
   1512a:	4b07      	ldr	r3, [pc, #28]	; (15148 <netusb_disable+0x3c>)
   1512c:	2200      	movs	r2, #0
   1512e:	605a      	str	r2, [r3, #4]

	netusb_disconnect_media();
   15130:	f7ff ffaa 	bl	15088 <netusb_disconnect_media>
	net_if_down(netusb.iface);
   15134:	4b04      	ldr	r3, [pc, #16]	; (15148 <netusb_disable+0x3c>)
   15136:	681b      	ldr	r3, [r3, #0]
   15138:	4618      	mov	r0, r3
   1513a:	f7fe fc5d 	bl	139f8 <net_if_down>
   1513e:	e000      	b.n	15142 <netusb_disable+0x36>
		return;
   15140:	bf00      	nop
}
   15142:	3708      	adds	r7, #8
   15144:	46bd      	mov	sp, r7
   15146:	bd80      	pop	{r7, pc}
   15148:	200042a0 	.word	0x200042a0

0001514c <netusb_enabled>:

bool netusb_enabled(void)
{
   1514c:	b480      	push	{r7}
   1514e:	af00      	add	r7, sp, #0
	return !!netusb.func;
   15150:	4b05      	ldr	r3, [pc, #20]	; (15168 <netusb_enabled+0x1c>)
   15152:	685b      	ldr	r3, [r3, #4]
   15154:	2b00      	cmp	r3, #0
   15156:	bf14      	ite	ne
   15158:	2301      	movne	r3, #1
   1515a:	2300      	moveq	r3, #0
   1515c:	b2db      	uxtb	r3, r3
}
   1515e:	4618      	mov	r0, r3
   15160:	46bd      	mov	sp, r7
   15162:	bc80      	pop	{r7}
   15164:	4770      	bx	lr
   15166:	bf00      	nop
   15168:	200042a0 	.word	0x200042a0

0001516c <netusb_init>:

static void netusb_init(struct net_if *iface)
{
   1516c:	b580      	push	{r7, lr}
   1516e:	b08e      	sub	sp, #56	; 0x38
   15170:	af00      	add	r7, sp, #0
   15172:	6078      	str	r0, [r7, #4]
	static u8_t mac[6] = { 0x00, 0x00, 0x5E, 0x00, 0x53, 0x00 };

	LOG_DBG("netusb device initialization");
   15174:	f013 f8f9 	bl	2836a <_is_user_context>
   15178:	4603      	mov	r3, r0
   1517a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	netusb.iface = iface;
   1517e:	4a2a      	ldr	r2, [pc, #168]	; (15228 <netusb_init+0xbc>)
   15180:	687b      	ldr	r3, [r7, #4]
   15182:	6013      	str	r3, [r2, #0]

	ethernet_init(iface);
   15184:	6878      	ldr	r0, [r7, #4]
   15186:	f00e f952 	bl	2342e <ethernet_init>

	net_if_set_link_addr(iface, mac, sizeof(mac), NET_LINK_ETHERNET);
   1518a:	2303      	movs	r3, #3
   1518c:	2206      	movs	r2, #6
   1518e:	4927      	ldr	r1, [pc, #156]	; (1522c <netusb_init+0xc0>)
   15190:	6878      	ldr	r0, [r7, #4]
   15192:	f013 f909 	bl	283a8 <net_if_set_link_addr>

	net_if_down(iface);
   15196:	6878      	ldr	r0, [r7, #4]
   15198:	f7fe fc2e 	bl	139f8 <net_if_down>

#ifndef CONFIG_USB_COMPOSITE_DEVICE
	/* Linker-defined symbols bound the USB descriptor structs */
	extern struct usb_cfg_data __usb_data_start[];
	extern struct usb_cfg_data __usb_data_end[];
	size_t size = (__usb_data_end - __usb_data_start);
   1519c:	4a24      	ldr	r2, [pc, #144]	; (15230 <netusb_init+0xc4>)
   1519e:	4b25      	ldr	r3, [pc, #148]	; (15234 <netusb_init+0xc8>)
   151a0:	1ad3      	subs	r3, r2, r3
   151a2:	109b      	asrs	r3, r3, #2
   151a4:	4a24      	ldr	r2, [pc, #144]	; (15238 <netusb_init+0xcc>)
   151a6:	fb02 f303 	mul.w	r3, r2, r3
   151aa:	62bb      	str	r3, [r7, #40]	; 0x28

	for (size_t i = 0; i < size; i++) {
   151ac:	2300      	movs	r3, #0
   151ae:	637b      	str	r3, [r7, #52]	; 0x34
   151b0:	e02e      	b.n	15210 <netusb_init+0xa4>
		struct usb_cfg_data *cfg = &(__usb_data_start[i]);
   151b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   151b4:	222c      	movs	r2, #44	; 0x2c
   151b6:	fb02 f303 	mul.w	r3, r2, r3
   151ba:	4a1e      	ldr	r2, [pc, #120]	; (15234 <netusb_init+0xc8>)
   151bc:	4413      	add	r3, r2
   151be:	633b      	str	r3, [r7, #48]	; 0x30
		int ret;

		LOG_DBG("Registering function %u", i);
   151c0:	f013 f8d3 	bl	2836a <_is_user_context>
   151c4:	4603      	mov	r3, r0
   151c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		cfg->interface.payload_data = interface_data;
   151ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   151cc:	4a1b      	ldr	r2, [pc, #108]	; (1523c <netusb_init+0xd0>)
   151ce:	61da      	str	r2, [r3, #28]
		cfg->usb_device_description = usb_get_device_descriptor();
   151d0:	f7fa febe 	bl	ff50 <usb_get_device_descriptor>
   151d4:	4602      	mov	r2, r0
   151d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   151d8:	601a      	str	r2, [r3, #0]

		ret = usb_set_config(cfg);
   151da:	6b38      	ldr	r0, [r7, #48]	; 0x30
   151dc:	f7fa fb24 	bl	f828 <usb_set_config>
   151e0:	6238      	str	r0, [r7, #32]
		if (ret < 0) {
   151e2:	6a3b      	ldr	r3, [r7, #32]
   151e4:	2b00      	cmp	r3, #0
   151e6:	da04      	bge.n	151f2 <netusb_init+0x86>
			LOG_ERR("Failed to configure USB device");
   151e8:	f013 f8bf 	bl	2836a <_is_user_context>
   151ec:	4603      	mov	r3, r0
   151ee:	77fb      	strb	r3, [r7, #31]
			return;
   151f0:	e016      	b.n	15220 <netusb_init+0xb4>
		}

		ret = usb_enable(cfg);
   151f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
   151f4:	f7fa fb66 	bl	f8c4 <usb_enable>
   151f8:	6238      	str	r0, [r7, #32]
		if (ret < 0) {
   151fa:	6a3b      	ldr	r3, [r7, #32]
   151fc:	2b00      	cmp	r3, #0
   151fe:	da04      	bge.n	1520a <netusb_init+0x9e>
			LOG_ERR("Failed to enable USB");
   15200:	f013 f8b3 	bl	2836a <_is_user_context>
   15204:	4603      	mov	r3, r0
   15206:	77bb      	strb	r3, [r7, #30]
			return;
   15208:	e00a      	b.n	15220 <netusb_init+0xb4>
	for (size_t i = 0; i < size; i++) {
   1520a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1520c:	3301      	adds	r3, #1
   1520e:	637b      	str	r3, [r7, #52]	; 0x34
   15210:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   15212:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15214:	429a      	cmp	r2, r3
   15216:	d3cc      	bcc.n	151b2 <netusb_init+0x46>
		}
	}
#endif /* CONFIG_USB_COMPOSITE_DEVICE */

	LOG_INF("netusb initialized");
   15218:	f013 f8a7 	bl	2836a <_is_user_context>
   1521c:	4603      	mov	r3, r0
   1521e:	777b      	strb	r3, [r7, #29]
}
   15220:	3738      	adds	r7, #56	; 0x38
   15222:	46bd      	mov	sp, r7
   15224:	bd80      	pop	{r7, pc}
   15226:	bf00      	nop
   15228:	200042a0 	.word	0x200042a0
   1522c:	2000fc30 	.word	0x2000fc30
   15230:	20010008 	.word	0x20010008
   15234:	2000ffdc 	.word	0x2000ffdc
   15238:	ba2e8ba3 	.word	0xba2e8ba3
   1523c:	200042a8 	.word	0x200042a8

00015240 <ecm_get_first_iface_number>:
		.bInterval = 0x00,
	},
};

static u8_t ecm_get_first_iface_number(void)
{
   15240:	b480      	push	{r7}
   15242:	af00      	add	r7, sp, #0
	return cdc_ecm_cfg.if0.bInterfaceNumber;
   15244:	4b02      	ldr	r3, [pc, #8]	; (15250 <ecm_get_first_iface_number+0x10>)
   15246:	789b      	ldrb	r3, [r3, #2]
}
   15248:	4618      	mov	r0, r3
   1524a:	46bd      	mov	sp, r7
   1524c:	bc80      	pop	{r7}
   1524e:	4770      	bx	lr
   15250:	2000ff4b 	.word	0x2000ff4b

00015254 <ecm_send>:

	return sizeof(struct net_eth_hdr) + ip_len;
}

static int ecm_send(struct net_pkt *pkt)
{
   15254:	b580      	push	{r7, lr}
   15256:	b088      	sub	sp, #32
   15258:	af00      	add	r7, sp, #0
   1525a:	6078      	str	r0, [r7, #4]
	size_t len = net_pkt_get_len(pkt);
   1525c:	6878      	ldr	r0, [r7, #4]
   1525e:	f013 f901 	bl	28464 <net_pkt_get_len>
   15262:	61f8      	str	r0, [r7, #28]

	if (IS_ENABLED(VERBOSE_DEBUG)) {
		net_pkt_hexdump(pkt, "<");
	}

	if (len > sizeof(tx_buf)) {
   15264:	69fb      	ldr	r3, [r7, #28]
   15266:	f240 52ea 	movw	r2, #1514	; 0x5ea
   1526a:	4293      	cmp	r3, r2
   1526c:	d906      	bls.n	1527c <ecm_send+0x28>
		LOG_WRN("Trying to send too large packet, drop");
   1526e:	f013 f8d9 	bl	28424 <_is_user_context>
   15272:	4603      	mov	r3, r0
   15274:	76fb      	strb	r3, [r7, #27]
		return -ENOMEM;
   15276:	f06f 030b 	mvn.w	r3, #11
   1527a:	e01e      	b.n	152ba <ecm_send+0x66>
	}

	if (net_pkt_read(pkt, tx_buf, len)) {
   1527c:	69fa      	ldr	r2, [r7, #28]
   1527e:	4911      	ldr	r1, [pc, #68]	; (152c4 <ecm_send+0x70>)
   15280:	6878      	ldr	r0, [r7, #4]
   15282:	f010 ffcd 	bl	26220 <net_pkt_read>
   15286:	4603      	mov	r3, r0
   15288:	2b00      	cmp	r3, #0
   1528a:	d002      	beq.n	15292 <ecm_send+0x3e>
		return -ENOBUFS;
   1528c:	f06f 0368 	mvn.w	r3, #104	; 0x68
   15290:	e013      	b.n	152ba <ecm_send+0x66>
	}

	/* transfer data to host */
	ret = usb_transfer_sync(ecm_ep_data[ECM_IN_EP_IDX].ep_addr,
   15292:	4b0d      	ldr	r3, [pc, #52]	; (152c8 <ecm_send+0x74>)
   15294:	7d18      	ldrb	r0, [r3, #20]
   15296:	2302      	movs	r3, #2
   15298:	69fa      	ldr	r2, [r7, #28]
   1529a:	490a      	ldr	r1, [pc, #40]	; (152c4 <ecm_send+0x70>)
   1529c:	f7fa fcae 	bl	fbfc <usb_transfer_sync>
   152a0:	6178      	str	r0, [r7, #20]
				tx_buf, len, USB_TRANS_WRITE);
	if (ret != len) {
   152a2:	697b      	ldr	r3, [r7, #20]
   152a4:	69fa      	ldr	r2, [r7, #28]
   152a6:	429a      	cmp	r2, r3
   152a8:	d006      	beq.n	152b8 <ecm_send+0x64>
		LOG_ERR("Transfer failure");
   152aa:	f013 f8bb 	bl	28424 <_is_user_context>
   152ae:	4603      	mov	r3, r0
   152b0:	74fb      	strb	r3, [r7, #19]
		return -EINVAL;
   152b2:	f06f 0315 	mvn.w	r3, #21
   152b6:	e000      	b.n	152ba <ecm_send+0x66>
	}

	return 0;
   152b8:	2300      	movs	r3, #0
}
   152ba:	4618      	mov	r0, r3
   152bc:	3720      	adds	r7, #32
   152be:	46bd      	mov	sp, r7
   152c0:	bd80      	pop	{r7, pc}
   152c2:	bf00      	nop
   152c4:	200043d4 	.word	0x200043d4
   152c8:	2000fc38 	.word	0x2000fc38

000152cc <ecm_read_cb>:

static void ecm_read_cb(u8_t ep, int size, void *priv)
{
   152cc:	b580      	push	{r7, lr}
   152ce:	b08a      	sub	sp, #40	; 0x28
   152d0:	af02      	add	r7, sp, #8
   152d2:	4603      	mov	r3, r0
   152d4:	60b9      	str	r1, [r7, #8]
   152d6:	607a      	str	r2, [r7, #4]
   152d8:	73fb      	strb	r3, [r7, #15]
	struct net_pkt *pkt;

	if (size <= 0) {
   152da:	68bb      	ldr	r3, [r7, #8]
   152dc:	2b00      	cmp	r3, #0
   152de:	dd3a      	ble.n	15356 <ecm_read_cb+0x8a>
	/* Linux considers by default that network usb device controllers are
	 * not able to handle Zero Lenght Packet (ZLP) and then generates
	 * a short packet containing a null byte. Handle by checking the IP
	 * header length and dropping the extra byte.
	 */
	if (rx_buf[size - 1] == 0U) { /* last byte is null */
   152e0:	68bb      	ldr	r3, [r7, #8]
   152e2:	3b01      	subs	r3, #1
   152e4:	4a24      	ldr	r2, [pc, #144]	; (15378 <ecm_read_cb+0xac>)
   152e6:	5cd3      	ldrb	r3, [r2, r3]
   152e8:	2b00      	cmp	r3, #0
   152ea:	d10c      	bne.n	15306 <ecm_read_cb+0x3a>
		if (ecm_eth_size(rx_buf, size) == (size - 1)) {
   152ec:	68bb      	ldr	r3, [r7, #8]
   152ee:	4619      	mov	r1, r3
   152f0:	4821      	ldr	r0, [pc, #132]	; (15378 <ecm_read_cb+0xac>)
   152f2:	f013 f90b 	bl	2850c <ecm_eth_size>
   152f6:	4602      	mov	r2, r0
   152f8:	68bb      	ldr	r3, [r7, #8]
   152fa:	3b01      	subs	r3, #1
   152fc:	429a      	cmp	r2, r3
   152fe:	d102      	bne.n	15306 <ecm_read_cb+0x3a>
			/* last byte has been appended as delimiter, drop it */
			size--;
   15300:	68bb      	ldr	r3, [r7, #8]
   15302:	3b01      	subs	r3, #1
   15304:	60bb      	str	r3, [r7, #8]
		}
	}

	pkt = net_pkt_alloc_with_buffer(netusb_net_iface(), size,
   15306:	f7ff fe6d 	bl	14fe4 <netusb_net_iface>
   1530a:	68b9      	ldr	r1, [r7, #8]
   1530c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15310:	9300      	str	r3, [sp, #0]
   15312:	2300      	movs	r3, #0
   15314:	2200      	movs	r2, #0
   15316:	f7fe fd23 	bl	13d60 <net_pkt_alloc_with_buffer>
   1531a:	61f8      	str	r0, [r7, #28]
					AF_UNSPEC, 0, K_FOREVER);
	if (!pkt) {
   1531c:	69fb      	ldr	r3, [r7, #28]
   1531e:	2b00      	cmp	r3, #0
   15320:	d104      	bne.n	1532c <ecm_read_cb+0x60>
		LOG_ERR("no memory for network packet\n");
   15322:	f013 f87f 	bl	28424 <_is_user_context>
   15326:	4603      	mov	r3, r0
   15328:	76fb      	strb	r3, [r7, #27]
		goto done;
   1532a:	e015      	b.n	15358 <ecm_read_cb+0x8c>
	}

	if (net_pkt_write(pkt, rx_buf, size)) {
   1532c:	68bb      	ldr	r3, [r7, #8]
   1532e:	461a      	mov	r2, r3
   15330:	4911      	ldr	r1, [pc, #68]	; (15378 <ecm_read_cb+0xac>)
   15332:	69f8      	ldr	r0, [r7, #28]
   15334:	f010 ff8c 	bl	26250 <net_pkt_write>
   15338:	4603      	mov	r3, r0
   1533a:	2b00      	cmp	r3, #0
   1533c:	d007      	beq.n	1534e <ecm_read_cb+0x82>
		LOG_ERR("Unable to write into pkt\n");
   1533e:	f013 f871 	bl	28424 <_is_user_context>
   15342:	4603      	mov	r3, r0
   15344:	76bb      	strb	r3, [r7, #26]
		net_pkt_unref(pkt);
   15346:	69f8      	ldr	r0, [r7, #28]
   15348:	f010 fb5f 	bl	25a0a <net_pkt_unref>
		goto done;
   1534c:	e004      	b.n	15358 <ecm_read_cb+0x8c>

	if (IS_ENABLED(VERBOSE_DEBUG)) {
		net_pkt_hexdump(pkt, ">");
	}

	netusb_recv(pkt);
   1534e:	69f8      	ldr	r0, [r7, #28]
   15350:	f7ff fe52 	bl	14ff8 <netusb_recv>
   15354:	e000      	b.n	15358 <ecm_read_cb+0x8c>
		goto done;
   15356:	bf00      	nop

done:
	usb_transfer(ecm_ep_data[ECM_OUT_EP_IDX].ep_addr, rx_buf,
   15358:	4b08      	ldr	r3, [pc, #32]	; (1537c <ecm_read_cb+0xb0>)
   1535a:	7b18      	ldrb	r0, [r3, #12]
   1535c:	2300      	movs	r3, #0
   1535e:	9301      	str	r3, [sp, #4]
   15360:	4b07      	ldr	r3, [pc, #28]	; (15380 <ecm_read_cb+0xb4>)
   15362:	9300      	str	r3, [sp, #0]
   15364:	2301      	movs	r3, #1
   15366:	f240 52ea 	movw	r2, #1514	; 0x5ea
   1536a:	4903      	ldr	r1, [pc, #12]	; (15378 <ecm_read_cb+0xac>)
   1536c:	f7fa fb9a 	bl	faa4 <usb_transfer>
		     sizeof(rx_buf), USB_TRANS_READ, ecm_read_cb, NULL);
}
   15370:	bf00      	nop
   15372:	3720      	adds	r7, #32
   15374:	46bd      	mov	sp, r7
   15376:	bd80      	pop	{r7, pc}
   15378:	200049c0 	.word	0x200049c0
   1537c:	2000fc38 	.word	0x2000fc38
   15380:	000152cd 	.word	0x000152cd

00015384 <ecm_connect>:

static int ecm_connect(bool connected)
{
   15384:	b580      	push	{r7, lr}
   15386:	b082      	sub	sp, #8
   15388:	af00      	add	r7, sp, #0
   1538a:	4603      	mov	r3, r0
   1538c:	71fb      	strb	r3, [r7, #7]
	if (connected) {
   1538e:	79fb      	ldrb	r3, [r7, #7]
   15390:	2b00      	cmp	r3, #0
   15392:	d007      	beq.n	153a4 <ecm_connect+0x20>
		ecm_read_cb(ecm_ep_data[ECM_OUT_EP_IDX].ep_addr, 0, NULL);
   15394:	4b0b      	ldr	r3, [pc, #44]	; (153c4 <ecm_connect+0x40>)
   15396:	7b1b      	ldrb	r3, [r3, #12]
   15398:	2200      	movs	r2, #0
   1539a:	2100      	movs	r1, #0
   1539c:	4618      	mov	r0, r3
   1539e:	f7ff ff95 	bl	152cc <ecm_read_cb>
   153a2:	e009      	b.n	153b8 <ecm_connect+0x34>
	} else {
		/* Cancel any transfer */
		usb_cancel_transfer(ecm_ep_data[ECM_OUT_EP_IDX].ep_addr);
   153a4:	4b07      	ldr	r3, [pc, #28]	; (153c4 <ecm_connect+0x40>)
   153a6:	7b1b      	ldrb	r3, [r3, #12]
   153a8:	4618      	mov	r0, r3
   153aa:	f00a fe38 	bl	2001e <usb_cancel_transfer>
		usb_cancel_transfer(ecm_ep_data[ECM_IN_EP_IDX].ep_addr);
   153ae:	4b05      	ldr	r3, [pc, #20]	; (153c4 <ecm_connect+0x40>)
   153b0:	7d1b      	ldrb	r3, [r3, #20]
   153b2:	4618      	mov	r0, r3
   153b4:	f00a fe33 	bl	2001e <usb_cancel_transfer>
	}

	return 0;
   153b8:	2300      	movs	r3, #0
}
   153ba:	4618      	mov	r0, r3
   153bc:	3708      	adds	r7, #8
   153be:	46bd      	mov	sp, r7
   153c0:	bd80      	pop	{r7, pc}
   153c2:	bf00      	nop
   153c4:	2000fc38 	.word	0x2000fc38

000153c8 <ecm_status_interface>:
	.connect_media = ecm_connect,
	.send_pkt = ecm_send,
};

static inline void ecm_status_interface(const u8_t *desc)
{
   153c8:	b590      	push	{r4, r7, lr}
   153ca:	b087      	sub	sp, #28
   153cc:	af00      	add	r7, sp, #0
   153ce:	6078      	str	r0, [r7, #4]
	const struct usb_if_descriptor *if_desc = (void *)desc;
   153d0:	687b      	ldr	r3, [r7, #4]
   153d2:	617b      	str	r3, [r7, #20]
	u8_t iface_num = if_desc->bInterfaceNumber;
   153d4:	697b      	ldr	r3, [r7, #20]
   153d6:	789b      	ldrb	r3, [r3, #2]
   153d8:	74fb      	strb	r3, [r7, #19]
	u8_t alt_set = if_desc->bAlternateSetting;
   153da:	697b      	ldr	r3, [r7, #20]
   153dc:	78db      	ldrb	r3, [r3, #3]
   153de:	747b      	strb	r3, [r7, #17]

	LOG_DBG("iface %u alt_set %u", iface_num, if_desc->bAlternateSetting);
   153e0:	f013 f820 	bl	28424 <_is_user_context>
   153e4:	4603      	mov	r3, r0
   153e6:	74bb      	strb	r3, [r7, #18]

	/* First interface is CDC Comm interface */
	if (iface_num != ecm_get_first_iface_number() + 1 || !alt_set) {
   153e8:	7cfc      	ldrb	r4, [r7, #19]
   153ea:	f7ff ff29 	bl	15240 <ecm_get_first_iface_number>
   153ee:	4603      	mov	r3, r0
   153f0:	3301      	adds	r3, #1
   153f2:	429c      	cmp	r4, r3
   153f4:	d102      	bne.n	153fc <ecm_status_interface+0x34>
   153f6:	7c7b      	ldrb	r3, [r7, #17]
   153f8:	2b00      	cmp	r3, #0
   153fa:	d104      	bne.n	15406 <ecm_status_interface+0x3e>
		LOG_DBG("Skip iface_num %u alt_set %u", iface_num, alt_set);
   153fc:	f013 f812 	bl	28424 <_is_user_context>
   15400:	4603      	mov	r3, r0
   15402:	743b      	strb	r3, [r7, #16]
		return;
   15404:	e002      	b.n	1540c <ecm_status_interface+0x44>
	}

	netusb_enable(&ecm_function);
   15406:	4803      	ldr	r0, [pc, #12]	; (15414 <ecm_status_interface+0x4c>)
   15408:	f7ff fe68 	bl	150dc <netusb_enable>
}
   1540c:	371c      	adds	r7, #28
   1540e:	46bd      	mov	sp, r7
   15410:	bd90      	pop	{r4, r7, pc}
   15412:	bf00      	nop
   15414:	2000fc50 	.word	0x2000fc50

00015418 <ecm_status_cb>:

static void ecm_status_cb(struct usb_cfg_data *cfg,
			  enum usb_dc_status_code status,
			  const u8_t *param)
{
   15418:	b580      	push	{r7, lr}
   1541a:	b08a      	sub	sp, #40	; 0x28
   1541c:	af00      	add	r7, sp, #0
   1541e:	60f8      	str	r0, [r7, #12]
   15420:	460b      	mov	r3, r1
   15422:	607a      	str	r2, [r7, #4]
   15424:	72fb      	strb	r3, [r7, #11]
	ARG_UNUSED(cfg);

	/* Check the USB status and do needed action if required */
	switch (status) {
   15426:	7afb      	ldrb	r3, [r7, #11]
   15428:	2b0a      	cmp	r3, #10
   1542a:	d830      	bhi.n	1548e <ecm_status_cb+0x76>
   1542c:	a201      	add	r2, pc, #4	; (adr r2, 15434 <ecm_status_cb+0x1c>)
   1542e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15432:	bf00      	nop
   15434:	00015483 	.word	0x00015483
   15438:	00015483 	.word	0x00015483
   1543c:	00015483 	.word	0x00015483
   15440:	00015483 	.word	0x00015483
   15444:	00015461 	.word	0x00015461
   15448:	00015483 	.word	0x00015483
   1544c:	00015483 	.word	0x00015483
   15450:	00015471 	.word	0x00015471
   15454:	0001548f 	.word	0x0001548f
   15458:	0001548f 	.word	0x0001548f
   1545c:	0001549b 	.word	0x0001549b
	case USB_DC_DISCONNECTED:
		LOG_DBG("USB device disconnected");
   15460:	f012 ffe0 	bl	28424 <_is_user_context>
   15464:	4603      	mov	r3, r0
   15466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		netusb_disable();
   1546a:	f7ff fe4f 	bl	1510c <netusb_disable>
		break;
   1546e:	e015      	b.n	1549c <ecm_status_cb+0x84>

	case USB_DC_INTERFACE:
		LOG_DBG("USB interface selected");
   15470:	f012 ffd8 	bl	28424 <_is_user_context>
   15474:	4603      	mov	r3, r0
   15476:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		ecm_status_interface(param);
   1547a:	6878      	ldr	r0, [r7, #4]
   1547c:	f7ff ffa4 	bl	153c8 <ecm_status_interface>
		break;
   15480:	e00c      	b.n	1549c <ecm_status_cb+0x84>
	case USB_DC_RESET:
	case USB_DC_CONNECTED:
	case USB_DC_CONFIGURED:
	case USB_DC_SUSPEND:
	case USB_DC_RESUME:
		LOG_DBG("USB unhandlded state: %d", status);
   15482:	f012 ffcf 	bl	28424 <_is_user_context>
   15486:	4603      	mov	r3, r0
   15488:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		break;
   1548c:	e006      	b.n	1549c <ecm_status_cb+0x84>
	case USB_DC_SOF:
		break;

	case USB_DC_UNKNOWN:
	default:
		LOG_DBG("USB unknown state: %d", status);
   1548e:	f012 ffc9 	bl	28424 <_is_user_context>
   15492:	4603      	mov	r3, r0
   15494:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		break;
   15498:	e000      	b.n	1549c <ecm_status_cb+0x84>
		break;
   1549a:	bf00      	nop
	}
}
   1549c:	bf00      	nop
   1549e:	3728      	adds	r7, #40	; 0x28
   154a0:	46bd      	mov	sp, r7
   154a2:	bd80      	pop	{r7, pc}

000154a4 <ecm_interface_config>:
	.bString = CONFIG_USB_DEVICE_NETWORK_ECM_MAC
};

static void ecm_interface_config(struct usb_desc_header *head,
				 u8_t bInterfaceNumber)
{
   154a4:	b580      	push	{r7, lr}
   154a6:	b086      	sub	sp, #24
   154a8:	af00      	add	r7, sp, #0
   154aa:	6078      	str	r0, [r7, #4]
   154ac:	460b      	mov	r3, r1
   154ae:	70fb      	strb	r3, [r7, #3]
	int idx = usb_get_str_descriptor_idx(&utf16le_mac);
   154b0:	4817      	ldr	r0, [pc, #92]	; (15510 <ecm_interface_config+0x6c>)
   154b2:	f7fa fbd3 	bl	fc5c <usb_get_str_descriptor_idx>
   154b6:	6138      	str	r0, [r7, #16]

	ARG_UNUSED(head);

	if (idx) {
   154b8:	693b      	ldr	r3, [r7, #16]
   154ba:	2b00      	cmp	r3, #0
   154bc:	d007      	beq.n	154ce <ecm_interface_config+0x2a>
		LOG_DBG("fixup string %d", idx);
   154be:	f012 ffb1 	bl	28424 <_is_user_context>
   154c2:	4603      	mov	r3, r0
   154c4:	75fb      	strb	r3, [r7, #23]
		cdc_ecm_cfg.if0_netfun_ecm.iMACAddress = idx;
   154c6:	693b      	ldr	r3, [r7, #16]
   154c8:	b2da      	uxtb	r2, r3
   154ca:	4b12      	ldr	r3, [pc, #72]	; (15514 <ecm_interface_config+0x70>)
   154cc:	759a      	strb	r2, [r3, #22]
	}

	cdc_ecm_cfg.if0.bInterfaceNumber = bInterfaceNumber;
   154ce:	4a11      	ldr	r2, [pc, #68]	; (15514 <ecm_interface_config+0x70>)
   154d0:	78fb      	ldrb	r3, [r7, #3]
   154d2:	7093      	strb	r3, [r2, #2]
	cdc_ecm_cfg.if0_union.bControlInterface = bInterfaceNumber;
   154d4:	4a0f      	ldr	r2, [pc, #60]	; (15514 <ecm_interface_config+0x70>)
   154d6:	78fb      	ldrb	r3, [r7, #3]
   154d8:	7453      	strb	r3, [r2, #17]
	cdc_ecm_cfg.if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
   154da:	f997 3003 	ldrsb.w	r3, [r7, #3]
   154de:	3301      	adds	r3, #1
   154e0:	b25b      	sxtb	r3, r3
   154e2:	b2da      	uxtb	r2, r3
   154e4:	4b0b      	ldr	r3, [pc, #44]	; (15514 <ecm_interface_config+0x70>)
   154e6:	749a      	strb	r2, [r3, #18]
	cdc_ecm_cfg.if1_0.bInterfaceNumber = bInterfaceNumber + 1;
   154e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
   154ec:	3301      	adds	r3, #1
   154ee:	b25b      	sxtb	r3, r3
   154f0:	b2da      	uxtb	r2, r3
   154f2:	4b08      	ldr	r3, [pc, #32]	; (15514 <ecm_interface_config+0x70>)
   154f4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	cdc_ecm_cfg.if1_1.bInterfaceNumber = bInterfaceNumber + 1;
   154f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
   154fc:	3301      	adds	r3, #1
   154fe:	b25b      	sxtb	r3, r3
   15500:	b2da      	uxtb	r2, r3
   15502:	4b04      	ldr	r3, [pc, #16]	; (15514 <ecm_interface_config+0x70>)
   15504:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
#ifdef CONFIG_USB_COMPOSITE_DEVICE
	cdc_ecm_cfg.iad.bFirstInterface = bInterfaceNumber;
#endif
}
   15508:	bf00      	nop
   1550a:	3718      	adds	r7, #24
   1550c:	46bd      	mov	sp, r7
   1550e:	bd80      	pop	{r7, pc}
   15510:	2000ffbe 	.word	0x2000ffbe
   15514:	2000ff4b 	.word	0x2000ff4b

00015518 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   15518:	b580      	push	{r7, lr}
   1551a:	b082      	sub	sp, #8
   1551c:	af00      	add	r7, sp, #0
   1551e:	6078      	str	r0, [r7, #4]
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   15520:	687b      	ldr	r3, [r7, #4]
   15522:	681b      	ldr	r3, [r3, #0]
   15524:	2b2f      	cmp	r3, #47	; 0x2f
   15526:	d906      	bls.n	15536 <nrf_gpio_pin_port_decode+0x1e>
   15528:	4b0c      	ldr	r3, [pc, #48]	; (1555c <nrf_gpio_pin_port_decode+0x44>)
   1552a:	4a0d      	ldr	r2, [pc, #52]	; (15560 <nrf_gpio_pin_port_decode+0x48>)
   1552c:	f240 11dd 	movw	r1, #477	; 0x1dd
   15530:	480c      	ldr	r0, [pc, #48]	; (15564 <nrf_gpio_pin_port_decode+0x4c>)
   15532:	f7eb f923 	bl	77c <__assert_func>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   15536:	687b      	ldr	r3, [r7, #4]
   15538:	681b      	ldr	r3, [r3, #0]
   1553a:	2b1f      	cmp	r3, #31
   1553c:	d802      	bhi.n	15544 <nrf_gpio_pin_port_decode+0x2c>
    {
        return NRF_P0;
   1553e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   15542:	e006      	b.n	15552 <nrf_gpio_pin_port_decode+0x3a>
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   15544:	687b      	ldr	r3, [r7, #4]
   15546:	681b      	ldr	r3, [r3, #0]
   15548:	f003 021f 	and.w	r2, r3, #31
   1554c:	687b      	ldr	r3, [r7, #4]
   1554e:	601a      	str	r2, [r3, #0]
        return NRF_P1;
   15550:	4b05      	ldr	r3, [pc, #20]	; (15568 <nrf_gpio_pin_port_decode+0x50>)
    }
#endif
}
   15552:	4618      	mov	r0, r3
   15554:	3708      	adds	r7, #8
   15556:	46bd      	mov	sp, r7
   15558:	bd80      	pop	{r7, pc}
   1555a:	bf00      	nop
   1555c:	0002e784 	.word	0x0002e784
   15560:	0002efc0 	.word	0x0002efc0
   15564:	0002e798 	.word	0x0002e798
   15568:	50000300 	.word	0x50000300

0001556c <nrf_gpiote_int_enable>:
{
    return ((uint32_t)NRF_GPIOTE + event);
}

__STATIC_INLINE void nrf_gpiote_int_enable(uint32_t mask)
{
   1556c:	b480      	push	{r7}
   1556e:	b083      	sub	sp, #12
   15570:	af00      	add	r7, sp, #0
   15572:	6078      	str	r0, [r7, #4]
    NRF_GPIOTE->INTENSET = mask;
   15574:	4a04      	ldr	r2, [pc, #16]	; (15588 <nrf_gpiote_int_enable+0x1c>)
   15576:	687b      	ldr	r3, [r7, #4]
   15578:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1557c:	bf00      	nop
   1557e:	370c      	adds	r7, #12
   15580:	46bd      	mov	sp, r7
   15582:	bc80      	pop	{r7}
   15584:	4770      	bx	lr
   15586:	bf00      	nop
   15588:	40006000 	.word	0x40006000

0001558c <nrf_gpiote_int_disable>:

__STATIC_INLINE void nrf_gpiote_int_disable(uint32_t mask)
{
   1558c:	b480      	push	{r7}
   1558e:	b083      	sub	sp, #12
   15590:	af00      	add	r7, sp, #0
   15592:	6078      	str	r0, [r7, #4]
    NRF_GPIOTE->INTENCLR = mask;
   15594:	4a04      	ldr	r2, [pc, #16]	; (155a8 <nrf_gpiote_int_disable+0x1c>)
   15596:	687b      	ldr	r3, [r7, #4]
   15598:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   1559c:	bf00      	nop
   1559e:	370c      	adds	r7, #12
   155a0:	46bd      	mov	sp, r7
   155a2:	bc80      	pop	{r7}
   155a4:	4770      	bx	lr
   155a6:	bf00      	nop
   155a8:	40006000 	.word	0x40006000

000155ac <nrf_gpiote_int_is_enabled>:

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
   155ac:	b480      	push	{r7}
   155ae:	b083      	sub	sp, #12
   155b0:	af00      	add	r7, sp, #0
   155b2:	6078      	str	r0, [r7, #4]
    return (NRF_GPIOTE->INTENSET & mask);
   155b4:	4b04      	ldr	r3, [pc, #16]	; (155c8 <nrf_gpiote_int_is_enabled+0x1c>)
   155b6:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
   155ba:	687b      	ldr	r3, [r7, #4]
   155bc:	4013      	ands	r3, r2
}
   155be:	4618      	mov	r0, r3
   155c0:	370c      	adds	r7, #12
   155c2:	46bd      	mov	sp, r7
   155c4:	bc80      	pop	{r7}
   155c6:	4770      	bx	lr
   155c8:	40006000 	.word	0x40006000

000155cc <nrf_gpiote_event_enable>:
    *((volatile uint32_t *) ((uint8_t *) NRF_GPIOTE + (uint32_t) event + 0x80uL)) = 0;
}
#endif // defined(DPPI_PRESENT)

__STATIC_INLINE void nrf_gpiote_event_enable(uint32_t idx)
{
   155cc:	b480      	push	{r7}
   155ce:	b083      	sub	sp, #12
   155d0:	af00      	add	r7, sp, #0
   155d2:	6078      	str	r0, [r7, #4]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   155d4:	4a09      	ldr	r2, [pc, #36]	; (155fc <nrf_gpiote_event_enable+0x30>)
   155d6:	687b      	ldr	r3, [r7, #4]
   155d8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   155dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155e0:	4906      	ldr	r1, [pc, #24]	; (155fc <nrf_gpiote_event_enable+0x30>)
   155e2:	f043 0201 	orr.w	r2, r3, #1
   155e6:	687b      	ldr	r3, [r7, #4]
   155e8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   155ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   155f0:	bf00      	nop
   155f2:	370c      	adds	r7, #12
   155f4:	46bd      	mov	sp, r7
   155f6:	bc80      	pop	{r7}
   155f8:	4770      	bx	lr
   155fa:	bf00      	nop
   155fc:	40006000 	.word	0x40006000

00015600 <nrf_gpiote_event_disable>:

__STATIC_INLINE void nrf_gpiote_event_disable(uint32_t idx)
{
   15600:	b480      	push	{r7}
   15602:	b083      	sub	sp, #12
   15604:	af00      	add	r7, sp, #0
   15606:	6078      	str	r0, [r7, #4]
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   15608:	4a09      	ldr	r2, [pc, #36]	; (15630 <nrf_gpiote_event_disable+0x30>)
   1560a:	687b      	ldr	r3, [r7, #4]
   1560c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   15610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15614:	4906      	ldr	r1, [pc, #24]	; (15630 <nrf_gpiote_event_disable+0x30>)
   15616:	f023 0201 	bic.w	r2, r3, #1
   1561a:	687b      	ldr	r3, [r7, #4]
   1561c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   15620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15624:	bf00      	nop
   15626:	370c      	adds	r7, #12
   15628:	46bd      	mov	sp, r7
   1562a:	bc80      	pop	{r7}
   1562c:	4770      	bx	lr
   1562e:	bf00      	nop
   15630:	40006000 	.word	0x40006000

00015634 <nrf_gpiote_event_configure>:

__STATIC_INLINE void nrf_gpiote_event_configure(uint32_t idx, uint32_t pin, nrf_gpiote_polarity_t polarity)
{
   15634:	b480      	push	{r7}
   15636:	b085      	sub	sp, #20
   15638:	af00      	add	r7, sp, #0
   1563a:	60f8      	str	r0, [r7, #12]
   1563c:	60b9      	str	r1, [r7, #8]
   1563e:	4613      	mov	r3, r2
   15640:	71fb      	strb	r3, [r7, #7]
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   15642:	4a15      	ldr	r2, [pc, #84]	; (15698 <nrf_gpiote_event_configure+0x64>)
   15644:	68fb      	ldr	r3, [r7, #12]
   15646:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1564a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1564e:	4912      	ldr	r1, [pc, #72]	; (15698 <nrf_gpiote_event_configure+0x64>)
   15650:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
   15654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   15658:	68fa      	ldr	r2, [r7, #12]
   1565a:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   1565e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15662:	4a0d      	ldr	r2, [pc, #52]	; (15698 <nrf_gpiote_event_configure+0x64>)
   15664:	68fb      	ldr	r3, [r7, #12]
   15666:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1566a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1566e:	68bb      	ldr	r3, [r7, #8]
   15670:	021b      	lsls	r3, r3, #8
   15672:	f403 517c 	and.w	r1, r3, #16128	; 0x3f00
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   15676:	79fb      	ldrb	r3, [r7, #7]
   15678:	041b      	lsls	r3, r3, #16
   1567a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1567e:	430b      	orrs	r3, r1
   15680:	4905      	ldr	r1, [pc, #20]	; (15698 <nrf_gpiote_event_configure+0x64>)
   15682:	431a      	orrs	r2, r3
   15684:	68fb      	ldr	r3, [r7, #12]
   15686:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1568a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1568e:	bf00      	nop
   15690:	3714      	adds	r7, #20
   15692:	46bd      	mov	sp, r7
   15694:	bc80      	pop	{r7}
   15696:	4770      	bx	lr
   15698:	40006000 	.word	0x40006000

0001569c <nrf_gpiote_event_pin_get>:

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
   1569c:	b480      	push	{r7}
   1569e:	b083      	sub	sp, #12
   156a0:	af00      	add	r7, sp, #0
   156a2:	6078      	str	r0, [r7, #4]
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   156a4:	4a06      	ldr	r2, [pc, #24]	; (156c0 <nrf_gpiote_event_pin_get+0x24>)
   156a6:	687b      	ldr	r3, [r7, #4]
   156a8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   156ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156b0:	0a1b      	lsrs	r3, r3, #8
   156b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
   156b6:	4618      	mov	r0, r3
   156b8:	370c      	adds	r7, #12
   156ba:	46bd      	mov	sp, r7
   156bc:	bc80      	pop	{r7}
   156be:	4770      	bx	lr
   156c0:	40006000 	.word	0x40006000

000156c4 <nrf_gpiote_te_is_enabled>:
{
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
   156c4:	b480      	push	{r7}
   156c6:	b083      	sub	sp, #12
   156c8:	af00      	add	r7, sp, #0
   156ca:	6078      	str	r0, [r7, #4]
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   156cc:	4a08      	ldr	r2, [pc, #32]	; (156f0 <nrf_gpiote_te_is_enabled+0x2c>)
   156ce:	687b      	ldr	r3, [r7, #4]
   156d0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   156d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156d8:	f003 0303 	and.w	r3, r3, #3
   156dc:	2b00      	cmp	r3, #0
   156de:	bf14      	ite	ne
   156e0:	2301      	movne	r3, #1
   156e2:	2300      	moveq	r3, #0
   156e4:	b2db      	uxtb	r3, r3
}
   156e6:	4618      	mov	r0, r3
   156e8:	370c      	adds	r7, #12
   156ea:	46bd      	mov	sp, r7
   156ec:	bc80      	pop	{r7}
   156ee:	4770      	bx	lr
   156f0:	40006000 	.word	0x40006000

000156f4 <gpiote_event_handler>:
#ifdef CONFIG_GPIO_NRF_P1
DEVICE_DECLARE(gpio_nrfx_p1);
#endif

static void gpiote_event_handler(void)
{
   156f4:	b580      	push	{r7, lr}
   156f6:	b086      	sub	sp, #24
   156f8:	af00      	add	r7, sp, #0
	u32_t fired_triggers[GPIO_COUNT] = {0};
   156fa:	1d3b      	adds	r3, r7, #4
   156fc:	2200      	movs	r2, #0
   156fe:	601a      	str	r2, [r3, #0]
   15700:	605a      	str	r2, [r3, #4]
	bool port_event = nrf_gpiote_event_is_set(NRF_GPIOTE_EVENTS_PORT);
   15702:	f44f 70be 	mov.w	r0, #380	; 0x17c
   15706:	f013 f8f2 	bl	288ee <nrf_gpiote_event_is_set>
   1570a:	4603      	mov	r3, r0
   1570c:	74fb      	strb	r3, [r7, #19]

	if (port_event) {
   1570e:	7cfb      	ldrb	r3, [r7, #19]
   15710:	2b00      	cmp	r3, #0
   15712:	d00d      	beq.n	15730 <gpiote_event_handler+0x3c>
#ifdef CONFIG_GPIO_NRF_P0
		fired_triggers[0] =
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
   15714:	4833      	ldr	r0, [pc, #204]	; (157e4 <gpiote_event_handler+0xf0>)
   15716:	f013 fd62 	bl	291de <check_level_trigger_pins>
   1571a:	4603      	mov	r3, r0
		fired_triggers[0] =
   1571c:	607b      	str	r3, [r7, #4]
#endif
#ifdef CONFIG_GPIO_NRF_P1
		fired_triggers[1] =
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p1));
   1571e:	4832      	ldr	r0, [pc, #200]	; (157e8 <gpiote_event_handler+0xf4>)
   15720:	f013 fd5d 	bl	291de <check_level_trigger_pins>
   15724:	4603      	mov	r3, r0
		fired_triggers[1] =
   15726:	60bb      	str	r3, [r7, #8]
#endif

		/* Sense detect was disabled while checking pins so
		 * DETECT should be deasserted.
		 */
		nrf_gpiote_event_clear(NRF_GPIOTE_EVENTS_PORT);
   15728:	f44f 70be 	mov.w	r0, #380	; 0x17c
   1572c:	f013 f8f3 	bl	28916 <nrf_gpiote_event_clear>
	}

	/* Handle interrupt from GPIOTE channels. */
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15730:	2300      	movs	r3, #0
   15732:	617b      	str	r3, [r7, #20]
   15734:	e035      	b.n	157a2 <gpiote_event_handler+0xae>
		nrf_gpiote_events_t evt =
   15736:	697b      	ldr	r3, [r7, #20]
   15738:	3340      	adds	r3, #64	; 0x40
   1573a:	b29b      	uxth	r3, r3
   1573c:	009b      	lsls	r3, r3, #2
   1573e:	823b      	strh	r3, [r7, #16]
			offsetof(NRF_GPIOTE_Type, EVENTS_IN[i]);

		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
   15740:	2201      	movs	r2, #1
   15742:	697b      	ldr	r3, [r7, #20]
   15744:	fa02 f303 	lsl.w	r3, r2, r3
   15748:	4618      	mov	r0, r3
   1574a:	f7ff ff2f 	bl	155ac <nrf_gpiote_int_is_enabled>
   1574e:	4603      	mov	r3, r0
   15750:	2b00      	cmp	r3, #0
   15752:	d023      	beq.n	1579c <gpiote_event_handler+0xa8>
		    nrf_gpiote_event_is_set(evt)) {
   15754:	8a3b      	ldrh	r3, [r7, #16]
   15756:	4618      	mov	r0, r3
   15758:	f013 f8c9 	bl	288ee <nrf_gpiote_event_is_set>
   1575c:	4603      	mov	r3, r0
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
   1575e:	2b00      	cmp	r3, #0
   15760:	d01c      	beq.n	1579c <gpiote_event_handler+0xa8>
			u32_t abs_pin = nrf_gpiote_event_pin_get(i);
   15762:	6978      	ldr	r0, [r7, #20]
   15764:	f7ff ff9a 	bl	1569c <nrf_gpiote_event_pin_get>
   15768:	60f8      	str	r0, [r7, #12]
			/* Divide absolute pin number to port and pin parts. */
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1576a:	68fb      	ldr	r3, [r7, #12]
   1576c:	095a      	lsrs	r2, r3, #5
   1576e:	0093      	lsls	r3, r2, #2
   15770:	f107 0118 	add.w	r1, r7, #24
   15774:	440b      	add	r3, r1
   15776:	f853 1c14 	ldr.w	r1, [r3, #-20]
   1577a:	68fb      	ldr	r3, [r7, #12]
   1577c:	f003 031f 	and.w	r3, r3, #31
   15780:	2001      	movs	r0, #1
   15782:	fa00 f303 	lsl.w	r3, r0, r3
   15786:	4319      	orrs	r1, r3
   15788:	0093      	lsls	r3, r2, #2
   1578a:	f107 0218 	add.w	r2, r7, #24
   1578e:	4413      	add	r3, r2
   15790:	f843 1c14 	str.w	r1, [r3, #-20]
			nrf_gpiote_event_clear(evt);
   15794:	8a3b      	ldrh	r3, [r7, #16]
   15796:	4618      	mov	r0, r3
   15798:	f013 f8bd 	bl	28916 <nrf_gpiote_event_clear>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1579c:	697b      	ldr	r3, [r7, #20]
   1579e:	3301      	adds	r3, #1
   157a0:	617b      	str	r3, [r7, #20]
   157a2:	697b      	ldr	r3, [r7, #20]
   157a4:	2b07      	cmp	r3, #7
   157a6:	d9c6      	bls.n	15736 <gpiote_event_handler+0x42>
		}
	}

#ifdef CONFIG_GPIO_NRF_P0
	if (fired_triggers[0]) {
   157a8:	687b      	ldr	r3, [r7, #4]
   157aa:	2b00      	cmp	r3, #0
   157ac:	d004      	beq.n	157b8 <gpiote_event_handler+0xc4>
		fire_callbacks(DEVICE_GET(gpio_nrfx_p0), fired_triggers[0]);
   157ae:	687b      	ldr	r3, [r7, #4]
   157b0:	4619      	mov	r1, r3
   157b2:	480c      	ldr	r0, [pc, #48]	; (157e4 <gpiote_event_handler+0xf0>)
   157b4:	f013 fd63 	bl	2927e <fire_callbacks>
	}
#endif
#ifdef CONFIG_GPIO_NRF_P1
	if (fired_triggers[1]) {
   157b8:	68bb      	ldr	r3, [r7, #8]
   157ba:	2b00      	cmp	r3, #0
   157bc:	d004      	beq.n	157c8 <gpiote_event_handler+0xd4>
		fire_callbacks(DEVICE_GET(gpio_nrfx_p1), fired_triggers[1]);
   157be:	68bb      	ldr	r3, [r7, #8]
   157c0:	4619      	mov	r1, r3
   157c2:	4809      	ldr	r0, [pc, #36]	; (157e8 <gpiote_event_handler+0xf4>)
   157c4:	f013 fd5b 	bl	2927e <fire_callbacks>
	}
#endif

	if (port_event) {
   157c8:	7cfb      	ldrb	r3, [r7, #19]
   157ca:	2b00      	cmp	r3, #0
   157cc:	d005      	beq.n	157da <gpiote_event_handler+0xe6>
		/* Reprogram sense to match current configuration.
		 * This may cause DETECT to be re-asserted.
		 */
#ifdef CONFIG_GPIO_NRF_P0
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p0));
   157ce:	4805      	ldr	r0, [pc, #20]	; (157e4 <gpiote_event_handler+0xf0>)
   157d0:	f013 fcc2 	bl	29158 <cfg_level_pins>
#endif
#ifdef CONFIG_GPIO_NRF_P1
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
   157d4:	4804      	ldr	r0, [pc, #16]	; (157e8 <gpiote_event_handler+0xf4>)
   157d6:	f013 fcbf 	bl	29158 <cfg_level_pins>
#endif
	}
}
   157da:	bf00      	nop
   157dc:	3718      	adds	r7, #24
   157de:	46bd      	mov	sp, r7
   157e0:	bd80      	pop	{r7, pc}
   157e2:	bf00      	nop
   157e4:	2000fcf4 	.word	0x2000fcf4
   157e8:	2000fd00 	.word	0x2000fd00

000157ec <gpio_nrfx_init>:

static int gpio_nrfx_init(struct device *port)
{
   157ec:	b580      	push	{r7, lr}
   157ee:	b082      	sub	sp, #8
   157f0:	af00      	add	r7, sp, #0
   157f2:	6078      	str	r0, [r7, #4]
	static bool gpio_initialized;

	if (!gpio_initialized) {
   157f4:	4b0d      	ldr	r3, [pc, #52]	; (1582c <gpio_nrfx_init+0x40>)
   157f6:	781b      	ldrb	r3, [r3, #0]
   157f8:	f083 0301 	eor.w	r3, r3, #1
   157fc:	b2db      	uxtb	r3, r3
   157fe:	2b00      	cmp	r3, #0
   15800:	d00e      	beq.n	15820 <gpio_nrfx_init+0x34>
		gpio_initialized = true;
   15802:	4b0a      	ldr	r3, [pc, #40]	; (1582c <gpio_nrfx_init+0x40>)
   15804:	2201      	movs	r2, #1
   15806:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ,
   15808:	2200      	movs	r2, #0
   1580a:	2105      	movs	r1, #5
   1580c:	2006      	movs	r0, #6
   1580e:	f00b fe54 	bl	214ba <z_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ);
   15812:	2006      	movs	r0, #6
   15814:	f00b fe37 	bl	21486 <z_arch_irq_enable>
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
   15818:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   1581c:	f7ff fea6 	bl	1556c <nrf_gpiote_int_enable>
	}

	return 0;
   15820:	2300      	movs	r3, #0
}
   15822:	4618      	mov	r0, r3
   15824:	3708      	adds	r7, #8
   15826:	46bd      	mov	sp, r7
   15828:	bd80      	pop	{r7, pc}
   1582a:	bf00      	nop
   1582c:	2000624a 	.word	0x2000624a

00015830 <__NVIC_SetPendingIRQ>:
{
   15830:	b480      	push	{r7}
   15832:	b083      	sub	sp, #12
   15834:	af00      	add	r7, sp, #0
   15836:	4603      	mov	r3, r0
   15838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   1583a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1583e:	2b00      	cmp	r3, #0
   15840:	db0c      	blt.n	1585c <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15842:	79fb      	ldrb	r3, [r7, #7]
   15844:	f003 021f 	and.w	r2, r3, #31
   15848:	4907      	ldr	r1, [pc, #28]	; (15868 <__NVIC_SetPendingIRQ+0x38>)
   1584a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1584e:	095b      	lsrs	r3, r3, #5
   15850:	2001      	movs	r0, #1
   15852:	fa00 f202 	lsl.w	r2, r0, r2
   15856:	3340      	adds	r3, #64	; 0x40
   15858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1585c:	bf00      	nop
   1585e:	370c      	adds	r7, #12
   15860:	46bd      	mov	sp, r7
   15862:	bc80      	pop	{r7}
   15864:	4770      	bx	lr
   15866:	bf00      	nop
   15868:	e000e100 	.word	0xe000e100

0001586c <nrf_gpio_pin_port_decode>:
{
   1586c:	b580      	push	{r7, lr}
   1586e:	b082      	sub	sp, #8
   15870:	af00      	add	r7, sp, #0
   15872:	6078      	str	r0, [r7, #4]
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   15874:	687b      	ldr	r3, [r7, #4]
   15876:	681b      	ldr	r3, [r3, #0]
   15878:	2b2f      	cmp	r3, #47	; 0x2f
   1587a:	d906      	bls.n	1588a <nrf_gpio_pin_port_decode+0x1e>
   1587c:	4b0c      	ldr	r3, [pc, #48]	; (158b0 <nrf_gpio_pin_port_decode+0x44>)
   1587e:	4a0d      	ldr	r2, [pc, #52]	; (158b4 <nrf_gpio_pin_port_decode+0x48>)
   15880:	f240 11dd 	movw	r1, #477	; 0x1dd
   15884:	480c      	ldr	r0, [pc, #48]	; (158b8 <nrf_gpio_pin_port_decode+0x4c>)
   15886:	f7ea ff79 	bl	77c <__assert_func>
    if (*p_pin < P0_PIN_NUM)
   1588a:	687b      	ldr	r3, [r7, #4]
   1588c:	681b      	ldr	r3, [r3, #0]
   1588e:	2b1f      	cmp	r3, #31
   15890:	d802      	bhi.n	15898 <nrf_gpio_pin_port_decode+0x2c>
        return NRF_P0;
   15892:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   15896:	e006      	b.n	158a6 <nrf_gpio_pin_port_decode+0x3a>
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   15898:	687b      	ldr	r3, [r7, #4]
   1589a:	681b      	ldr	r3, [r3, #0]
   1589c:	f003 021f 	and.w	r2, r3, #31
   158a0:	687b      	ldr	r3, [r7, #4]
   158a2:	601a      	str	r2, [r3, #0]
        return NRF_P1;
   158a4:	4b05      	ldr	r3, [pc, #20]	; (158bc <nrf_gpio_pin_port_decode+0x50>)
}
   158a6:	4618      	mov	r0, r3
   158a8:	3708      	adds	r7, #8
   158aa:	46bd      	mov	sp, r7
   158ac:	bd80      	pop	{r7, pc}
   158ae:	bf00      	nop
   158b0:	0002e7d0 	.word	0x0002e7d0
   158b4:	0002f02c 	.word	0x0002f02c
   158b8:	0002e7e4 	.word	0x0002e7e4
   158bc:	50000300 	.word	0x50000300

000158c0 <event_txdrdy_check>:

#endif /* CONFIG_UART_0_INTERRUPT_DRIVEN */


static bool event_txdrdy_check(void)
{
   158c0:	b580      	push	{r7, lr}
   158c2:	af00      	add	r7, sp, #0
	return (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_TXDRDY)
   158c4:	4b0a      	ldr	r3, [pc, #40]	; (158f0 <event_txdrdy_check+0x30>)
   158c6:	f44f 718e 	mov.w	r1, #284	; 0x11c
   158ca:	4618      	mov	r0, r3
   158cc:	f013 fcff 	bl	292ce <nrf_uart_event_check>
   158d0:	4603      	mov	r3, r0
#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
		|| uart_sw_event_txdrdy
   158d2:	2b00      	cmp	r3, #0
   158d4:	d104      	bne.n	158e0 <event_txdrdy_check+0x20>
   158d6:	4b07      	ldr	r3, [pc, #28]	; (158f4 <event_txdrdy_check+0x34>)
   158d8:	781b      	ldrb	r3, [r3, #0]
   158da:	b2db      	uxtb	r3, r3
   158dc:	2b00      	cmp	r3, #0
   158de:	d001      	beq.n	158e4 <event_txdrdy_check+0x24>
   158e0:	2301      	movs	r3, #1
   158e2:	e000      	b.n	158e6 <event_txdrdy_check+0x26>
   158e4:	2300      	movs	r3, #0
   158e6:	f003 0301 	and.w	r3, r3, #1
   158ea:	b2db      	uxtb	r3, r3
#endif
	       );
}
   158ec:	4618      	mov	r0, r3
   158ee:	bd80      	pop	{r7, pc}
   158f0:	40002000 	.word	0x40002000
   158f4:	2000624b 	.word	0x2000624b

000158f8 <event_txdrdy_clear>:

static void event_txdrdy_clear(void)
{
   158f8:	b580      	push	{r7, lr}
   158fa:	af00      	add	r7, sp, #0
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_TXDRDY);
   158fc:	4b05      	ldr	r3, [pc, #20]	; (15914 <event_txdrdy_clear+0x1c>)
   158fe:	f44f 718e 	mov.w	r1, #284	; 0x11c
   15902:	4618      	mov	r0, r3
   15904:	f013 fccd 	bl	292a2 <nrf_uart_event_clear>
#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
	uart_sw_event_txdrdy = 0U;
   15908:	4b03      	ldr	r3, [pc, #12]	; (15918 <event_txdrdy_clear+0x20>)
   1590a:	2200      	movs	r2, #0
   1590c:	701a      	strb	r2, [r3, #0]
#endif
}
   1590e:	bf00      	nop
   15910:	bd80      	pop	{r7, pc}
   15912:	bf00      	nop
   15914:	40002000 	.word	0x40002000
   15918:	2000624b 	.word	0x2000624b

0001591c <baudrate_set>:
 *
 * @return N/A
 */

static int baudrate_set(struct device *dev, u32_t baudrate)
{
   1591c:	b580      	push	{r7, lr}
   1591e:	b084      	sub	sp, #16
   15920:	af00      	add	r7, sp, #0
   15922:	6078      	str	r0, [r7, #4]
   15924:	6039      	str	r1, [r7, #0]
	nrf_uart_baudrate_t nrf_baudrate; /* calculated baudrate divisor */

	switch (baudrate) {
   15926:	683b      	ldr	r3, [r7, #0]
   15928:	f647 2212 	movw	r2, #31250	; 0x7a12
   1592c:	4293      	cmp	r3, r2
   1592e:	f000 8093 	beq.w	15a58 <baudrate_set+0x13c>
   15932:	683b      	ldr	r3, [r7, #0]
   15934:	f647 2212 	movw	r2, #31250	; 0x7a12
   15938:	4293      	cmp	r3, r2
   1593a:	d833      	bhi.n	159a4 <baudrate_set+0x88>
   1593c:	683b      	ldr	r3, [r7, #0]
   1593e:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   15942:	d079      	beq.n	15a38 <baudrate_set+0x11c>
   15944:	683b      	ldr	r3, [r7, #0]
   15946:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1594a:	d815      	bhi.n	15978 <baudrate_set+0x5c>
   1594c:	683b      	ldr	r3, [r7, #0]
   1594e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   15952:	d065      	beq.n	15a20 <baudrate_set+0x104>
   15954:	683b      	ldr	r3, [r7, #0]
   15956:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1595a:	d804      	bhi.n	15966 <baudrate_set+0x4a>
   1595c:	683b      	ldr	r3, [r7, #0]
   1595e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   15962:	d059      	beq.n	15a18 <baudrate_set+0xfc>
   15964:	e09d      	b.n	15aa2 <baudrate_set+0x186>
   15966:	683b      	ldr	r3, [r7, #0]
   15968:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1596c:	d05c      	beq.n	15a28 <baudrate_set+0x10c>
   1596e:	683b      	ldr	r3, [r7, #0]
   15970:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   15974:	d05c      	beq.n	15a30 <baudrate_set+0x114>
   15976:	e094      	b.n	15aa2 <baudrate_set+0x186>
   15978:	683b      	ldr	r3, [r7, #0]
   1597a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1597e:	d061      	beq.n	15a44 <baudrate_set+0x128>
   15980:	683b      	ldr	r3, [r7, #0]
   15982:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   15986:	d804      	bhi.n	15992 <baudrate_set+0x76>
   15988:	683b      	ldr	r3, [r7, #0]
   1598a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1598e:	d056      	beq.n	15a3e <baudrate_set+0x122>
   15990:	e087      	b.n	15aa2 <baudrate_set+0x186>
   15992:	683b      	ldr	r3, [r7, #0]
   15994:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   15998:	d058      	beq.n	15a4c <baudrate_set+0x130>
   1599a:	683b      	ldr	r3, [r7, #0]
   1599c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   159a0:	d057      	beq.n	15a52 <baudrate_set+0x136>
   159a2:	e07e      	b.n	15aa2 <baudrate_set+0x186>
   159a4:	683b      	ldr	r3, [r7, #0]
   159a6:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   159aa:	d066      	beq.n	15a7a <baudrate_set+0x15e>
   159ac:	683b      	ldr	r3, [r7, #0]
   159ae:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   159b2:	d817      	bhi.n	159e4 <baudrate_set+0xc8>
   159b4:	683b      	ldr	r3, [r7, #0]
   159b6:	f64d 22c0 	movw	r2, #56000	; 0xdac0
   159ba:	4293      	cmp	r3, r2
   159bc:	d053      	beq.n	15a66 <baudrate_set+0x14a>
   159be:	683b      	ldr	r3, [r7, #0]
   159c0:	f64d 22c0 	movw	r2, #56000	; 0xdac0
   159c4:	4293      	cmp	r3, r2
   159c6:	d804      	bhi.n	159d2 <baudrate_set+0xb6>
   159c8:	683b      	ldr	r3, [r7, #0]
   159ca:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   159ce:	d047      	beq.n	15a60 <baudrate_set+0x144>
   159d0:	e067      	b.n	15aa2 <baudrate_set+0x186>
   159d2:	683b      	ldr	r3, [r7, #0]
   159d4:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   159d8:	d049      	beq.n	15a6e <baudrate_set+0x152>
   159da:	683b      	ldr	r3, [r7, #0]
   159dc:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   159e0:	d048      	beq.n	15a74 <baudrate_set+0x158>
   159e2:	e05e      	b.n	15aa2 <baudrate_set+0x186>
   159e4:	683b      	ldr	r3, [r7, #0]
   159e6:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   159ea:	d050      	beq.n	15a8e <baudrate_set+0x172>
   159ec:	683b      	ldr	r3, [r7, #0]
   159ee:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   159f2:	d808      	bhi.n	15a06 <baudrate_set+0xea>
   159f4:	683b      	ldr	r3, [r7, #0]
   159f6:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   159fa:	d041      	beq.n	15a80 <baudrate_set+0x164>
   159fc:	683b      	ldr	r3, [r7, #0]
   159fe:	4a2f      	ldr	r2, [pc, #188]	; (15abc <baudrate_set+0x1a0>)
   15a00:	4293      	cmp	r3, r2
   15a02:	d040      	beq.n	15a86 <baudrate_set+0x16a>
   15a04:	e04d      	b.n	15aa2 <baudrate_set+0x186>
   15a06:	683b      	ldr	r3, [r7, #0]
   15a08:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   15a0c:	d042      	beq.n	15a94 <baudrate_set+0x178>
   15a0e:	683b      	ldr	r3, [r7, #0]
   15a10:	4a2b      	ldr	r2, [pc, #172]	; (15ac0 <baudrate_set+0x1a4>)
   15a12:	4293      	cmp	r3, r2
   15a14:	d041      	beq.n	15a9a <baudrate_set+0x17e>
   15a16:	e044      	b.n	15aa2 <baudrate_set+0x186>
	case 300:
		/* value not supported by Nordic HAL */
		nrf_baudrate = 0x00014000;
   15a18:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   15a1c:	60fb      	str	r3, [r7, #12]
		break;
   15a1e:	e043      	b.n	15aa8 <baudrate_set+0x18c>
	case 600:
		/* value not supported by Nordic HAL */
		nrf_baudrate = 0x00027000;
   15a20:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   15a24:	60fb      	str	r3, [r7, #12]
		break;
   15a26:	e03f      	b.n	15aa8 <baudrate_set+0x18c>
	case 1200:
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   15a28:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   15a2c:	60fb      	str	r3, [r7, #12]
		break;
   15a2e:	e03b      	b.n	15aa8 <baudrate_set+0x18c>
	case 2400:
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   15a30:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   15a34:	60fb      	str	r3, [r7, #12]
		break;
   15a36:	e037      	b.n	15aa8 <baudrate_set+0x18c>
	case 4800:
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   15a38:	4b22      	ldr	r3, [pc, #136]	; (15ac4 <baudrate_set+0x1a8>)
   15a3a:	60fb      	str	r3, [r7, #12]
		break;
   15a3c:	e034      	b.n	15aa8 <baudrate_set+0x18c>
	case 9600:
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   15a3e:	4b22      	ldr	r3, [pc, #136]	; (15ac8 <baudrate_set+0x1ac>)
   15a40:	60fb      	str	r3, [r7, #12]
		break;
   15a42:	e031      	b.n	15aa8 <baudrate_set+0x18c>
	case 14400:
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   15a44:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   15a48:	60fb      	str	r3, [r7, #12]
		break;
   15a4a:	e02d      	b.n	15aa8 <baudrate_set+0x18c>
	case 19200:
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   15a4c:	4b1f      	ldr	r3, [pc, #124]	; (15acc <baudrate_set+0x1b0>)
   15a4e:	60fb      	str	r3, [r7, #12]
		break;
   15a50:	e02a      	b.n	15aa8 <baudrate_set+0x18c>
	case 28800:
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   15a52:	4b1f      	ldr	r3, [pc, #124]	; (15ad0 <baudrate_set+0x1b4>)
   15a54:	60fb      	str	r3, [r7, #12]
		break;
   15a56:	e027      	b.n	15aa8 <baudrate_set+0x18c>
	case 31250:
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   15a58:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   15a5c:	60fb      	str	r3, [r7, #12]
		break;
   15a5e:	e023      	b.n	15aa8 <baudrate_set+0x18c>
	case 38400:
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   15a60:	4b1c      	ldr	r3, [pc, #112]	; (15ad4 <baudrate_set+0x1b8>)
   15a62:	60fb      	str	r3, [r7, #12]
		break;
   15a64:	e020      	b.n	15aa8 <baudrate_set+0x18c>
	case 56000:
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   15a66:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   15a6a:	60fb      	str	r3, [r7, #12]
		break;
   15a6c:	e01c      	b.n	15aa8 <baudrate_set+0x18c>
	case 57600:
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   15a6e:	4b1a      	ldr	r3, [pc, #104]	; (15ad8 <baudrate_set+0x1bc>)
   15a70:	60fb      	str	r3, [r7, #12]
		break;
   15a72:	e019      	b.n	15aa8 <baudrate_set+0x18c>
	case 76800:
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   15a74:	4b19      	ldr	r3, [pc, #100]	; (15adc <baudrate_set+0x1c0>)
   15a76:	60fb      	str	r3, [r7, #12]
		break;
   15a78:	e016      	b.n	15aa8 <baudrate_set+0x18c>
	case 115200:
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   15a7a:	4b19      	ldr	r3, [pc, #100]	; (15ae0 <baudrate_set+0x1c4>)
   15a7c:	60fb      	str	r3, [r7, #12]
		break;
   15a7e:	e013      	b.n	15aa8 <baudrate_set+0x18c>
	case 230400:
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   15a80:	4b18      	ldr	r3, [pc, #96]	; (15ae4 <baudrate_set+0x1c8>)
   15a82:	60fb      	str	r3, [r7, #12]
		break;
   15a84:	e010      	b.n	15aa8 <baudrate_set+0x18c>
	case 250000:
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   15a86:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   15a8a:	60fb      	str	r3, [r7, #12]
		break;
   15a8c:	e00c      	b.n	15aa8 <baudrate_set+0x18c>
	case 460800:
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   15a8e:	4b16      	ldr	r3, [pc, #88]	; (15ae8 <baudrate_set+0x1cc>)
   15a90:	60fb      	str	r3, [r7, #12]
		break;
   15a92:	e009      	b.n	15aa8 <baudrate_set+0x18c>
	case 921600:
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   15a94:	4b15      	ldr	r3, [pc, #84]	; (15aec <baudrate_set+0x1d0>)
   15a96:	60fb      	str	r3, [r7, #12]
		break;
   15a98:	e006      	b.n	15aa8 <baudrate_set+0x18c>
	case 1000000:
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   15a9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   15a9e:	60fb      	str	r3, [r7, #12]
		break;
   15aa0:	e002      	b.n	15aa8 <baudrate_set+0x18c>
	default:
		return -EINVAL;
   15aa2:	f06f 0315 	mvn.w	r3, #21
   15aa6:	e005      	b.n	15ab4 <baudrate_set+0x198>
	}

	nrf_uart_baudrate_set(uart0_addr, nrf_baudrate);
   15aa8:	4b11      	ldr	r3, [pc, #68]	; (15af0 <baudrate_set+0x1d4>)
   15aaa:	68f9      	ldr	r1, [r7, #12]
   15aac:	4618      	mov	r0, r3
   15aae:	f013 fcd8 	bl	29462 <nrf_uart_baudrate_set>

	return 0;
   15ab2:	2300      	movs	r3, #0
}
   15ab4:	4618      	mov	r0, r3
   15ab6:	3710      	adds	r7, #16
   15ab8:	46bd      	mov	sp, r7
   15aba:	bd80      	pop	{r7, pc}
   15abc:	0003d090 	.word	0x0003d090
   15ac0:	000f4240 	.word	0x000f4240
   15ac4:	0013b000 	.word	0x0013b000
   15ac8:	00275000 	.word	0x00275000
   15acc:	004ea000 	.word	0x004ea000
   15ad0:	0075f000 	.word	0x0075f000
   15ad4:	009d5000 	.word	0x009d5000
   15ad8:	00ebf000 	.word	0x00ebf000
   15adc:	013a9000 	.word	0x013a9000
   15ae0:	01d7e000 	.word	0x01d7e000
   15ae4:	03afb000 	.word	0x03afb000
   15ae8:	075f7000 	.word	0x075f7000
   15aec:	0ebed000 	.word	0x0ebed000
   15af0:	40002000 	.word	0x40002000

00015af4 <uart_nrfx_poll_in>:
 *
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(struct device *dev, unsigned char *c)
{
   15af4:	b580      	push	{r7, lr}
   15af6:	b082      	sub	sp, #8
   15af8:	af00      	add	r7, sp, #0
   15afa:	6078      	str	r0, [r7, #4]
   15afc:	6039      	str	r1, [r7, #0]
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   15afe:	4b11      	ldr	r3, [pc, #68]	; (15b44 <uart_nrfx_poll_in+0x50>)
   15b00:	f44f 7184 	mov.w	r1, #264	; 0x108
   15b04:	4618      	mov	r0, r3
   15b06:	f013 fbe2 	bl	292ce <nrf_uart_event_check>
   15b0a:	4603      	mov	r3, r0
   15b0c:	f083 0301 	eor.w	r3, r3, #1
   15b10:	b2db      	uxtb	r3, r3
   15b12:	2b00      	cmp	r3, #0
   15b14:	d002      	beq.n	15b1c <uart_nrfx_poll_in+0x28>
		return -1;
   15b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15b1a:	e00e      	b.n	15b3a <uart_nrfx_poll_in+0x46>
	}

	/* Clear the interrupt */
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);
   15b1c:	4b09      	ldr	r3, [pc, #36]	; (15b44 <uart_nrfx_poll_in+0x50>)
   15b1e:	f44f 7184 	mov.w	r1, #264	; 0x108
   15b22:	4618      	mov	r0, r3
   15b24:	f013 fbbd 	bl	292a2 <nrf_uart_event_clear>

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);
   15b28:	4b06      	ldr	r3, [pc, #24]	; (15b44 <uart_nrfx_poll_in+0x50>)
   15b2a:	4618      	mov	r0, r3
   15b2c:	f013 fc58 	bl	293e0 <nrf_uart_rxd_get>
   15b30:	4603      	mov	r3, r0
   15b32:	461a      	mov	r2, r3
   15b34:	683b      	ldr	r3, [r7, #0]
   15b36:	701a      	strb	r2, [r3, #0]

	return 0;
   15b38:	2300      	movs	r3, #0
}
   15b3a:	4618      	mov	r0, r3
   15b3c:	3708      	adds	r7, #8
   15b3e:	46bd      	mov	sp, r7
   15b40:	bd80      	pop	{r7, pc}
   15b42:	bf00      	nop
   15b44:	40002000 	.word	0x40002000

00015b48 <uart_nrfx_poll_out>:
 * @param dev UART device struct
 * @param c Character to send
 */
static void uart_nrfx_poll_out(struct device *dev,
					unsigned char c)
{
   15b48:	b580      	push	{r7, lr}
   15b4a:	b082      	sub	sp, #8
   15b4c:	af00      	add	r7, sp, #0
   15b4e:	6078      	str	r0, [r7, #4]
   15b50:	460b      	mov	r3, r1
   15b52:	70fb      	strb	r3, [r7, #3]
	 * before writing. This is a trade-off between losing a byte once in a
	 * blue moon against hanging up the whole thread permanently
	 */

	/* Reset the transmitter ready state. */
	event_txdrdy_clear();
   15b54:	f7ff fed0 	bl	158f8 <event_txdrdy_clear>

	/* Activate the transmitter. */
	nrf_uart_task_trigger(uart0_addr, NRF_UART_TASK_STARTTX);
   15b58:	4b0e      	ldr	r3, [pc, #56]	; (15b94 <uart_nrfx_poll_out+0x4c>)
   15b5a:	2108      	movs	r1, #8
   15b5c:	4618      	mov	r0, r3
   15b5e:	f013 fc5b 	bl	29418 <nrf_uart_task_trigger>

	/* Send the provided character. */
	nrf_uart_txd_set(uart0_addr, (u8_t)c);
   15b62:	4a0c      	ldr	r2, [pc, #48]	; (15b94 <uart_nrfx_poll_out+0x4c>)
   15b64:	78fb      	ldrb	r3, [r7, #3]
   15b66:	4619      	mov	r1, r3
   15b68:	4610      	mov	r0, r2
   15b6a:	f013 fc46 	bl	293fa <nrf_uart_txd_set>

	/* Wait until the transmitter is ready, i.e. the character is sent. */
	while (!event_txdrdy_check()) {
   15b6e:	bf00      	nop
   15b70:	f7ff fea6 	bl	158c0 <event_txdrdy_check>
   15b74:	4603      	mov	r3, r0
   15b76:	f083 0301 	eor.w	r3, r3, #1
   15b7a:	b2db      	uxtb	r3, r3
   15b7c:	2b00      	cmp	r3, #0
   15b7e:	d1f7      	bne.n	15b70 <uart_nrfx_poll_out+0x28>
	}

	/* Deactivate the transmitter so that it does not needlessly consume
	 * power.
	 */
	nrf_uart_task_trigger(uart0_addr, NRF_UART_TASK_STOPTX);
   15b80:	4b04      	ldr	r3, [pc, #16]	; (15b94 <uart_nrfx_poll_out+0x4c>)
   15b82:	210c      	movs	r1, #12
   15b84:	4618      	mov	r0, r3
   15b86:	f013 fc47 	bl	29418 <nrf_uart_task_trigger>
}
   15b8a:	bf00      	nop
   15b8c:	3708      	adds	r7, #8
   15b8e:	46bd      	mov	sp, r7
   15b90:	bd80      	pop	{r7, pc}
   15b92:	bf00      	nop
   15b94:	40002000 	.word	0x40002000

00015b98 <uart_nrfx_err_check>:

/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
   15b98:	b580      	push	{r7, lr}
   15b9a:	b084      	sub	sp, #16
   15b9c:	af00      	add	r7, sp, #0
   15b9e:	6078      	str	r0, [r7, #4]
	u32_t error = 0U;
   15ba0:	2300      	movs	r3, #0
   15ba2:	60fb      	str	r3, [r7, #12]

	if (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_ERROR)) {
   15ba4:	4b09      	ldr	r3, [pc, #36]	; (15bcc <uart_nrfx_err_check+0x34>)
   15ba6:	f44f 7192 	mov.w	r1, #292	; 0x124
   15baa:	4618      	mov	r0, r3
   15bac:	f013 fb8f 	bl	292ce <nrf_uart_event_check>
   15bb0:	4603      	mov	r3, r0
   15bb2:	2b00      	cmp	r3, #0
   15bb4:	d004      	beq.n	15bc0 <uart_nrfx_err_check+0x28>
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(uart0_addr);
   15bb6:	4b05      	ldr	r3, [pc, #20]	; (15bcc <uart_nrfx_err_check+0x34>)
   15bb8:	4618      	mov	r0, r3
   15bba:	f013 fbcc 	bl	29356 <nrf_uart_errorsrc_get_and_clear>
   15bbe:	60f8      	str	r0, [r7, #12]
	}

	return error;
   15bc0:	68fb      	ldr	r3, [r7, #12]
}
   15bc2:	4618      	mov	r0, r3
   15bc4:	3710      	adds	r7, #16
   15bc6:	46bd      	mov	sp, r7
   15bc8:	bd80      	pop	{r7, pc}
   15bca:	bf00      	nop
   15bcc:	40002000 	.word	0x40002000

00015bd0 <uart_nrfx_configure>:

static int uart_nrfx_configure(struct device *dev,
			       const struct uart_config *cfg)
{
   15bd0:	b580      	push	{r7, lr}
   15bd2:	b084      	sub	sp, #16
   15bd4:	af00      	add	r7, sp, #0
   15bd6:	6078      	str	r0, [r7, #4]
   15bd8:	6039      	str	r1, [r7, #0]
	nrf_uart_parity_t parity;
	nrf_uart_hwfc_t hwfc;

	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   15bda:	683b      	ldr	r3, [r7, #0]
   15bdc:	795b      	ldrb	r3, [r3, #5]
   15bde:	2b01      	cmp	r3, #1
   15be0:	d002      	beq.n	15be8 <uart_nrfx_configure+0x18>
		return -ENOTSUP;
   15be2:	f06f 0385 	mvn.w	r3, #133	; 0x85
   15be6:	e04c      	b.n	15c82 <uart_nrfx_configure+0xb2>
	}

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   15be8:	683b      	ldr	r3, [r7, #0]
   15bea:	799b      	ldrb	r3, [r3, #6]
   15bec:	2b03      	cmp	r3, #3
   15bee:	d002      	beq.n	15bf6 <uart_nrfx_configure+0x26>
		return -ENOTSUP;
   15bf0:	f06f 0385 	mvn.w	r3, #133	; 0x85
   15bf4:	e045      	b.n	15c82 <uart_nrfx_configure+0xb2>
	}

	switch (cfg->flow_ctrl) {
   15bf6:	683b      	ldr	r3, [r7, #0]
   15bf8:	79db      	ldrb	r3, [r3, #7]
   15bfa:	2b00      	cmp	r3, #0
   15bfc:	d002      	beq.n	15c04 <uart_nrfx_configure+0x34>
   15bfe:	2b01      	cmp	r3, #1
   15c00:	d003      	beq.n	15c0a <uart_nrfx_configure+0x3a>
   15c02:	e00f      	b.n	15c24 <uart_nrfx_configure+0x54>
	case UART_CFG_FLOW_CTRL_NONE:
		hwfc = NRF_UART_HWFC_DISABLED;
   15c04:	2300      	movs	r3, #0
   15c06:	73bb      	strb	r3, [r7, #14]
		break;
   15c08:	e00f      	b.n	15c2a <uart_nrfx_configure+0x5a>
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   15c0a:	6878      	ldr	r0, [r7, #4]
   15c0c:	f013 fcec 	bl	295e8 <get_dev_config>
   15c10:	4603      	mov	r3, r0
   15c12:	781b      	ldrb	r3, [r3, #0]
   15c14:	2b00      	cmp	r3, #0
   15c16:	d002      	beq.n	15c1e <uart_nrfx_configure+0x4e>
			hwfc = NRF_UART_HWFC_ENABLED;
   15c18:	2301      	movs	r3, #1
   15c1a:	73bb      	strb	r3, [r7, #14]
		} else {
			return -ENOTSUP;
		}
		break;
   15c1c:	e005      	b.n	15c2a <uart_nrfx_configure+0x5a>
			return -ENOTSUP;
   15c1e:	f06f 0385 	mvn.w	r3, #133	; 0x85
   15c22:	e02e      	b.n	15c82 <uart_nrfx_configure+0xb2>
	default:
		return -ENOTSUP;
   15c24:	f06f 0385 	mvn.w	r3, #133	; 0x85
   15c28:	e02b      	b.n	15c82 <uart_nrfx_configure+0xb2>
	}

	switch (cfg->parity) {
   15c2a:	683b      	ldr	r3, [r7, #0]
   15c2c:	791b      	ldrb	r3, [r3, #4]
   15c2e:	2b00      	cmp	r3, #0
   15c30:	d002      	beq.n	15c38 <uart_nrfx_configure+0x68>
   15c32:	2b02      	cmp	r3, #2
   15c34:	d003      	beq.n	15c3e <uart_nrfx_configure+0x6e>
   15c36:	e005      	b.n	15c44 <uart_nrfx_configure+0x74>
	case UART_CFG_PARITY_NONE:
		parity = NRF_UART_PARITY_EXCLUDED;
   15c38:	2300      	movs	r3, #0
   15c3a:	73fb      	strb	r3, [r7, #15]
		break;
   15c3c:	e005      	b.n	15c4a <uart_nrfx_configure+0x7a>
	case UART_CFG_PARITY_EVEN:
		parity = NRF_UART_PARITY_INCLUDED;
   15c3e:	230e      	movs	r3, #14
   15c40:	73fb      	strb	r3, [r7, #15]
		break;
   15c42:	e002      	b.n	15c4a <uart_nrfx_configure+0x7a>
	default:
		return -ENOTSUP;
   15c44:	f06f 0385 	mvn.w	r3, #133	; 0x85
   15c48:	e01b      	b.n	15c82 <uart_nrfx_configure+0xb2>
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   15c4a:	683b      	ldr	r3, [r7, #0]
   15c4c:	681b      	ldr	r3, [r3, #0]
   15c4e:	4619      	mov	r1, r3
   15c50:	6878      	ldr	r0, [r7, #4]
   15c52:	f7ff fe63 	bl	1591c <baudrate_set>
   15c56:	4603      	mov	r3, r0
   15c58:	2b00      	cmp	r3, #0
   15c5a:	d002      	beq.n	15c62 <uart_nrfx_configure+0x92>
		return -ENOTSUP;
   15c5c:	f06f 0385 	mvn.w	r3, #133	; 0x85
   15c60:	e00f      	b.n	15c82 <uart_nrfx_configure+0xb2>
	}

	nrf_uart_configure(uart0_addr, parity, hwfc);
   15c62:	480a      	ldr	r0, [pc, #40]	; (15c8c <uart_nrfx_configure+0xbc>)
   15c64:	7bba      	ldrb	r2, [r7, #14]
   15c66:	7bfb      	ldrb	r3, [r7, #15]
   15c68:	4619      	mov	r1, r3
   15c6a:	f013 fbe5 	bl	29438 <nrf_uart_configure>

	get_dev_data(dev)->uart_config = *cfg;
   15c6e:	6878      	ldr	r0, [r7, #4]
   15c70:	f013 fcaf 	bl	295d2 <get_dev_data>
   15c74:	4603      	mov	r3, r0
   15c76:	683a      	ldr	r2, [r7, #0]
   15c78:	e892 0003 	ldmia.w	r2, {r0, r1}
   15c7c:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   15c80:	2300      	movs	r3, #0
}
   15c82:	4618      	mov	r0, r3
   15c84:	3710      	adds	r7, #16
   15c86:	46bd      	mov	sp, r7
   15c88:	bd80      	pop	{r7, pc}
   15c8a:	bf00      	nop
   15c8c:	40002000 	.word	0x40002000

00015c90 <uart_nrfx_fifo_fill>:

/** Interrupt driven FIFO fill function */
static int uart_nrfx_fifo_fill(struct device *dev,
			       const u8_t *tx_data,
			       int len)
{
   15c90:	b580      	push	{r7, lr}
   15c92:	b086      	sub	sp, #24
   15c94:	af00      	add	r7, sp, #0
   15c96:	60f8      	str	r0, [r7, #12]
   15c98:	60b9      	str	r1, [r7, #8]
   15c9a:	607a      	str	r2, [r7, #4]
	u8_t num_tx = 0U;
   15c9c:	2300      	movs	r3, #0
   15c9e:	75fb      	strb	r3, [r7, #23]

	while ((len - num_tx > 0) &&
   15ca0:	e00c      	b.n	15cbc <uart_nrfx_fifo_fill+0x2c>
	       event_txdrdy_check()) {

		/* Clear the interrupt */
		event_txdrdy_clear();
   15ca2:	f7ff fe29 	bl	158f8 <event_txdrdy_clear>

		/* Send a character */
		nrf_uart_txd_set(uart0_addr, (u8_t)tx_data[num_tx++]);
   15ca6:	480d      	ldr	r0, [pc, #52]	; (15cdc <uart_nrfx_fifo_fill+0x4c>)
   15ca8:	7dfb      	ldrb	r3, [r7, #23]
   15caa:	1c5a      	adds	r2, r3, #1
   15cac:	75fa      	strb	r2, [r7, #23]
   15cae:	461a      	mov	r2, r3
   15cb0:	68bb      	ldr	r3, [r7, #8]
   15cb2:	4413      	add	r3, r2
   15cb4:	781b      	ldrb	r3, [r3, #0]
   15cb6:	4619      	mov	r1, r3
   15cb8:	f013 fb9f 	bl	293fa <nrf_uart_txd_set>
	while ((len - num_tx > 0) &&
   15cbc:	7dfb      	ldrb	r3, [r7, #23]
   15cbe:	687a      	ldr	r2, [r7, #4]
   15cc0:	1ad3      	subs	r3, r2, r3
   15cc2:	2b00      	cmp	r3, #0
   15cc4:	dd04      	ble.n	15cd0 <uart_nrfx_fifo_fill+0x40>
	       event_txdrdy_check()) {
   15cc6:	f7ff fdfb 	bl	158c0 <event_txdrdy_check>
   15cca:	4603      	mov	r3, r0
	while ((len - num_tx > 0) &&
   15ccc:	2b00      	cmp	r3, #0
   15cce:	d1e8      	bne.n	15ca2 <uart_nrfx_fifo_fill+0x12>
	}

	return (int)num_tx;
   15cd0:	7dfb      	ldrb	r3, [r7, #23]
}
   15cd2:	4618      	mov	r0, r3
   15cd4:	3718      	adds	r7, #24
   15cd6:	46bd      	mov	sp, r7
   15cd8:	bd80      	pop	{r7, pc}
   15cda:	bf00      	nop
   15cdc:	40002000 	.word	0x40002000

00015ce0 <uart_nrfx_fifo_read>:

/** Interrupt driven FIFO read function */
static int uart_nrfx_fifo_read(struct device *dev,
			       u8_t *rx_data,
			       const int size)
{
   15ce0:	b590      	push	{r4, r7, lr}
   15ce2:	b087      	sub	sp, #28
   15ce4:	af00      	add	r7, sp, #0
   15ce6:	60f8      	str	r0, [r7, #12]
   15ce8:	60b9      	str	r1, [r7, #8]
   15cea:	607a      	str	r2, [r7, #4]
	u8_t num_rx = 0U;
   15cec:	2300      	movs	r3, #0
   15cee:	75fb      	strb	r3, [r7, #23]

	while ((size - num_rx > 0) &&
   15cf0:	e011      	b.n	15d16 <uart_nrfx_fifo_read+0x36>
	       nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
		/* Clear the interrupt */
		nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);
   15cf2:	4b12      	ldr	r3, [pc, #72]	; (15d3c <uart_nrfx_fifo_read+0x5c>)
   15cf4:	f44f 7184 	mov.w	r1, #264	; 0x108
   15cf8:	4618      	mov	r0, r3
   15cfa:	f013 fad2 	bl	292a2 <nrf_uart_event_clear>

		/* Receive a character */
		rx_data[num_rx++] = (u8_t)nrf_uart_rxd_get(uart0_addr);
   15cfe:	490f      	ldr	r1, [pc, #60]	; (15d3c <uart_nrfx_fifo_read+0x5c>)
   15d00:	7dfb      	ldrb	r3, [r7, #23]
   15d02:	1c5a      	adds	r2, r3, #1
   15d04:	75fa      	strb	r2, [r7, #23]
   15d06:	461a      	mov	r2, r3
   15d08:	68bb      	ldr	r3, [r7, #8]
   15d0a:	189c      	adds	r4, r3, r2
   15d0c:	4608      	mov	r0, r1
   15d0e:	f013 fb67 	bl	293e0 <nrf_uart_rxd_get>
   15d12:	4603      	mov	r3, r0
   15d14:	7023      	strb	r3, [r4, #0]
	while ((size - num_rx > 0) &&
   15d16:	7dfb      	ldrb	r3, [r7, #23]
   15d18:	687a      	ldr	r2, [r7, #4]
   15d1a:	1ad3      	subs	r3, r2, r3
   15d1c:	2b00      	cmp	r3, #0
   15d1e:	dd08      	ble.n	15d32 <uart_nrfx_fifo_read+0x52>
	       nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   15d20:	4b06      	ldr	r3, [pc, #24]	; (15d3c <uart_nrfx_fifo_read+0x5c>)
   15d22:	f44f 7184 	mov.w	r1, #264	; 0x108
   15d26:	4618      	mov	r0, r3
   15d28:	f013 fad1 	bl	292ce <nrf_uart_event_check>
   15d2c:	4603      	mov	r3, r0
	while ((size - num_rx > 0) &&
   15d2e:	2b00      	cmp	r3, #0
   15d30:	d1df      	bne.n	15cf2 <uart_nrfx_fifo_read+0x12>
	}

	return num_rx;
   15d32:	7dfb      	ldrb	r3, [r7, #23]
}
   15d34:	4618      	mov	r0, r3
   15d36:	371c      	adds	r7, #28
   15d38:	46bd      	mov	sp, r7
   15d3a:	bd90      	pop	{r4, r7, pc}
   15d3c:	40002000 	.word	0x40002000

00015d40 <uart_nrfx_irq_tx_enable>:

/** Interrupt driven transfer enabling function */
static void uart_nrfx_irq_tx_enable(struct device *dev)
{
   15d40:	b580      	push	{r7, lr}
   15d42:	b086      	sub	sp, #24
   15d44:	af00      	add	r7, sp, #0
   15d46:	6078      	str	r0, [r7, #4]
	u32_t key;

	/* Indicate that this device started a transaction that should not be
	 * interrupted by putting the SoC into the deep sleep mode.
	 */
	device_busy_set(dev);
   15d48:	6878      	ldr	r0, [r7, #4]
   15d4a:	f013 fdff 	bl	2994c <device_busy_set>

	/* Activate the transmitter. */
	nrf_uart_task_trigger(uart0_addr, NRF_UART_TASK_STARTTX);
   15d4e:	4b14      	ldr	r3, [pc, #80]	; (15da0 <uart_nrfx_irq_tx_enable+0x60>)
   15d50:	2108      	movs	r1, #8
   15d52:	4618      	mov	r0, r3
   15d54:	f013 fb60 	bl	29418 <nrf_uart_task_trigger>

	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_TXDRDY);
   15d58:	4b11      	ldr	r3, [pc, #68]	; (15da0 <uart_nrfx_irq_tx_enable+0x60>)
   15d5a:	2180      	movs	r1, #128	; 0x80
   15d5c:	4618      	mov	r0, r3
   15d5e:	f013 faca 	bl	292f6 <nrf_uart_int_enable>
	__asm__ volatile(
   15d62:	f04f 0320 	mov.w	r3, #32
   15d66:	f3ef 8211 	mrs	r2, BASEPRI
   15d6a:	f383 8811 	msr	BASEPRI, r3
   15d6e:	f3bf 8f6f 	isb	sy
   15d72:	613a      	str	r2, [r7, #16]
   15d74:	60fb      	str	r3, [r7, #12]
	return key;
   15d76:	693b      	ldr	r3, [r7, #16]

	/* Critical section is used to avoid any UART related interrupt which
	 * can occur after the if statement and before call of the function
	 * forcing an interrupt.
	 */
	key = irq_lock();
   15d78:	617b      	str	r3, [r7, #20]
	if (uart_sw_event_txdrdy) {
   15d7a:	4b0a      	ldr	r3, [pc, #40]	; (15da4 <uart_nrfx_irq_tx_enable+0x64>)
   15d7c:	781b      	ldrb	r3, [r3, #0]
   15d7e:	b2db      	uxtb	r3, r3
   15d80:	2b00      	cmp	r3, #0
   15d82:	d002      	beq.n	15d8a <uart_nrfx_irq_tx_enable+0x4a>
		/* Due to HW limitation first TXDRDY interrupt shall be
		 * triggered by the software.
		 */
		NVIC_SetPendingIRQ(DT_NORDIC_NRF_UART_UART_0_IRQ);
   15d84:	2002      	movs	r0, #2
   15d86:	f7ff fd53 	bl	15830 <__NVIC_SetPendingIRQ>
   15d8a:	697b      	ldr	r3, [r7, #20]
   15d8c:	60bb      	str	r3, [r7, #8]
	__asm__ volatile(
   15d8e:	68bb      	ldr	r3, [r7, #8]
   15d90:	f383 8811 	msr	BASEPRI, r3
   15d94:	f3bf 8f6f 	isb	sy
	}
	irq_unlock(key);
}
   15d98:	bf00      	nop
   15d9a:	3718      	adds	r7, #24
   15d9c:	46bd      	mov	sp, r7
   15d9e:	bd80      	pop	{r7, pc}
   15da0:	40002000 	.word	0x40002000
   15da4:	2000624b 	.word	0x2000624b

00015da8 <uart_nrfx_irq_tx_disable>:

/** Interrupt driven transfer disabling function */
static void uart_nrfx_irq_tx_disable(struct device *dev)
{
   15da8:	b580      	push	{r7, lr}
   15daa:	b082      	sub	sp, #8
   15dac:	af00      	add	r7, sp, #0
   15dae:	6078      	str	r0, [r7, #4]
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_TXDRDY);
   15db0:	4b08      	ldr	r3, [pc, #32]	; (15dd4 <uart_nrfx_irq_tx_disable+0x2c>)
   15db2:	2180      	movs	r1, #128	; 0x80
   15db4:	4618      	mov	r0, r3
   15db6:	f013 fac0 	bl	2933a <nrf_uart_int_disable>

	/* Deactivate the transmitter so that it does not needlessly consume
	 * power.
	 */
	nrf_uart_task_trigger(uart0_addr, NRF_UART_TASK_STOPTX);
   15dba:	4b06      	ldr	r3, [pc, #24]	; (15dd4 <uart_nrfx_irq_tx_disable+0x2c>)
   15dbc:	210c      	movs	r1, #12
   15dbe:	4618      	mov	r0, r3
   15dc0:	f013 fb2a 	bl	29418 <nrf_uart_task_trigger>

	/* The transaction is over. It is okay to enter the deep sleep mode
	 * if needed.
	 */
	device_busy_clear(dev);
   15dc4:	6878      	ldr	r0, [r7, #4]
   15dc6:	f013 fdca 	bl	2995e <device_busy_clear>
}
   15dca:	bf00      	nop
   15dcc:	3708      	adds	r7, #8
   15dce:	46bd      	mov	sp, r7
   15dd0:	bd80      	pop	{r7, pc}
   15dd2:	bf00      	nop
   15dd4:	40002000 	.word	0x40002000

00015dd8 <uart_nrfx_irq_rx_enable>:

/** Interrupt driven receiver enabling function */
static void uart_nrfx_irq_rx_enable(struct device *dev)
{
   15dd8:	b580      	push	{r7, lr}
   15dda:	b082      	sub	sp, #8
   15ddc:	af00      	add	r7, sp, #0
   15dde:	6078      	str	r0, [r7, #4]
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
   15de0:	4b04      	ldr	r3, [pc, #16]	; (15df4 <uart_nrfx_irq_rx_enable+0x1c>)
   15de2:	2104      	movs	r1, #4
   15de4:	4618      	mov	r0, r3
   15de6:	f013 fa86 	bl	292f6 <nrf_uart_int_enable>
}
   15dea:	bf00      	nop
   15dec:	3708      	adds	r7, #8
   15dee:	46bd      	mov	sp, r7
   15df0:	bd80      	pop	{r7, pc}
   15df2:	bf00      	nop
   15df4:	40002000 	.word	0x40002000

00015df8 <uart_nrfx_irq_rx_disable>:

/** Interrupt driven receiver disabling function */
static void uart_nrfx_irq_rx_disable(struct device *dev)
{
   15df8:	b580      	push	{r7, lr}
   15dfa:	b082      	sub	sp, #8
   15dfc:	af00      	add	r7, sp, #0
   15dfe:	6078      	str	r0, [r7, #4]
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
   15e00:	4b04      	ldr	r3, [pc, #16]	; (15e14 <uart_nrfx_irq_rx_disable+0x1c>)
   15e02:	2104      	movs	r1, #4
   15e04:	4618      	mov	r0, r3
   15e06:	f013 fa98 	bl	2933a <nrf_uart_int_disable>
}
   15e0a:	bf00      	nop
   15e0c:	3708      	adds	r7, #8
   15e0e:	46bd      	mov	sp, r7
   15e10:	bd80      	pop	{r7, pc}
   15e12:	bf00      	nop
   15e14:	40002000 	.word	0x40002000

00015e18 <uart_nrfx_irq_rx_ready>:
	return event_txdrdy_check();
}

/** Interrupt driven receiver ready function */
static int uart_nrfx_irq_rx_ready(struct device *dev)
{
   15e18:	b580      	push	{r7, lr}
   15e1a:	b082      	sub	sp, #8
   15e1c:	af00      	add	r7, sp, #0
   15e1e:	6078      	str	r0, [r7, #4]
	return nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY);
   15e20:	4b05      	ldr	r3, [pc, #20]	; (15e38 <uart_nrfx_irq_rx_ready+0x20>)
   15e22:	f44f 7184 	mov.w	r1, #264	; 0x108
   15e26:	4618      	mov	r0, r3
   15e28:	f013 fa51 	bl	292ce <nrf_uart_event_check>
   15e2c:	4603      	mov	r3, r0
}
   15e2e:	4618      	mov	r0, r3
   15e30:	3708      	adds	r7, #8
   15e32:	46bd      	mov	sp, r7
   15e34:	bd80      	pop	{r7, pc}
   15e36:	bf00      	nop
   15e38:	40002000 	.word	0x40002000

00015e3c <uart_nrfx_irq_err_enable>:

/** Interrupt driven error enabling function */
static void uart_nrfx_irq_err_enable(struct device *dev)
{
   15e3c:	b580      	push	{r7, lr}
   15e3e:	b082      	sub	sp, #8
   15e40:	af00      	add	r7, sp, #0
   15e42:	6078      	str	r0, [r7, #4]
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_ERROR);
   15e44:	4b04      	ldr	r3, [pc, #16]	; (15e58 <uart_nrfx_irq_err_enable+0x1c>)
   15e46:	f44f 7100 	mov.w	r1, #512	; 0x200
   15e4a:	4618      	mov	r0, r3
   15e4c:	f013 fa53 	bl	292f6 <nrf_uart_int_enable>
}
   15e50:	bf00      	nop
   15e52:	3708      	adds	r7, #8
   15e54:	46bd      	mov	sp, r7
   15e56:	bd80      	pop	{r7, pc}
   15e58:	40002000 	.word	0x40002000

00015e5c <uart_nrfx_irq_err_disable>:

/** Interrupt driven error disabling function */
static void uart_nrfx_irq_err_disable(struct device *dev)
{
   15e5c:	b580      	push	{r7, lr}
   15e5e:	b082      	sub	sp, #8
   15e60:	af00      	add	r7, sp, #0
   15e62:	6078      	str	r0, [r7, #4]
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_ERROR);
   15e64:	4b04      	ldr	r3, [pc, #16]	; (15e78 <uart_nrfx_irq_err_disable+0x1c>)
   15e66:	f44f 7100 	mov.w	r1, #512	; 0x200
   15e6a:	4618      	mov	r0, r3
   15e6c:	f013 fa65 	bl	2933a <nrf_uart_int_disable>
}
   15e70:	bf00      	nop
   15e72:	3708      	adds	r7, #8
   15e74:	46bd      	mov	sp, r7
   15e76:	bd80      	pop	{r7, pc}
   15e78:	40002000 	.word	0x40002000

00015e7c <uart_nrfx_irq_is_pending>:

/** Interrupt driven pending status function */
static int uart_nrfx_irq_is_pending(struct device *dev)
{
   15e7c:	b580      	push	{r7, lr}
   15e7e:	b082      	sub	sp, #8
   15e80:	af00      	add	r7, sp, #0
   15e82:	6078      	str	r0, [r7, #4]
	return ((nrf_uart_int_enable_check(uart0_addr,
   15e84:	4b10      	ldr	r3, [pc, #64]	; (15ec8 <uart_nrfx_irq_is_pending+0x4c>)
   15e86:	2180      	movs	r1, #128	; 0x80
   15e88:	4618      	mov	r0, r3
   15e8a:	f013 fa42 	bl	29312 <nrf_uart_int_enable_check>
   15e8e:	4603      	mov	r3, r0
					   NRF_UART_INT_MASK_TXDRDY) &&
		 event_txdrdy_check())
		||
   15e90:	2b00      	cmp	r3, #0
   15e92:	d004      	beq.n	15e9e <uart_nrfx_irq_is_pending+0x22>
		 event_txdrdy_check())
   15e94:	f7ff fd14 	bl	158c0 <event_txdrdy_check>
   15e98:	4603      	mov	r3, r0
					   NRF_UART_INT_MASK_TXDRDY) &&
   15e9a:	2b00      	cmp	r3, #0
   15e9c:	d10d      	bne.n	15eba <uart_nrfx_irq_is_pending+0x3e>
		(nrf_uart_int_enable_check(uart0_addr,
   15e9e:	4b0a      	ldr	r3, [pc, #40]	; (15ec8 <uart_nrfx_irq_is_pending+0x4c>)
   15ea0:	2104      	movs	r1, #4
   15ea2:	4618      	mov	r0, r3
   15ea4:	f013 fa35 	bl	29312 <nrf_uart_int_enable_check>
   15ea8:	4603      	mov	r3, r0
		||
   15eaa:	2b00      	cmp	r3, #0
   15eac:	d007      	beq.n	15ebe <uart_nrfx_irq_is_pending+0x42>
					   NRF_UART_INT_MASK_RXDRDY) &&
		 uart_nrfx_irq_rx_ready(dev)));
   15eae:	6878      	ldr	r0, [r7, #4]
   15eb0:	f7ff ffb2 	bl	15e18 <uart_nrfx_irq_rx_ready>
   15eb4:	4603      	mov	r3, r0
					   NRF_UART_INT_MASK_RXDRDY) &&
   15eb6:	2b00      	cmp	r3, #0
   15eb8:	d001      	beq.n	15ebe <uart_nrfx_irq_is_pending+0x42>
		||
   15eba:	2301      	movs	r3, #1
   15ebc:	e000      	b.n	15ec0 <uart_nrfx_irq_is_pending+0x44>
   15ebe:	2300      	movs	r3, #0
}
   15ec0:	4618      	mov	r0, r3
   15ec2:	3708      	adds	r7, #8
   15ec4:	46bd      	mov	sp, r7
   15ec6:	bd80      	pop	{r7, pc}
   15ec8:	40002000 	.word	0x40002000

00015ecc <uart_nrfx_irq_callback_set>:

/** Set the callback function */
static void uart_nrfx_irq_callback_set(struct device *dev,
				       uart_irq_callback_user_data_t cb,
				       void *cb_data)
{
   15ecc:	b480      	push	{r7}
   15ece:	b085      	sub	sp, #20
   15ed0:	af00      	add	r7, sp, #0
   15ed2:	60f8      	str	r0, [r7, #12]
   15ed4:	60b9      	str	r1, [r7, #8]
   15ed6:	607a      	str	r2, [r7, #4]
	(void)dev;
	irq_callback = cb;
   15ed8:	4a05      	ldr	r2, [pc, #20]	; (15ef0 <uart_nrfx_irq_callback_set+0x24>)
   15eda:	68bb      	ldr	r3, [r7, #8]
   15edc:	6013      	str	r3, [r2, #0]
	irq_cb_data = cb_data;
   15ede:	4a05      	ldr	r2, [pc, #20]	; (15ef4 <uart_nrfx_irq_callback_set+0x28>)
   15ee0:	687b      	ldr	r3, [r7, #4]
   15ee2:	6013      	str	r3, [r2, #0]
}
   15ee4:	bf00      	nop
   15ee6:	3714      	adds	r7, #20
   15ee8:	46bd      	mov	sp, r7
   15eea:	bc80      	pop	{r7}
   15eec:	4770      	bx	lr
   15eee:	bf00      	nop
   15ef0:	20004fec 	.word	0x20004fec
   15ef4:	20004ff0 	.word	0x20004ff0

00015ef8 <uart_nrfx_isr>:
 * @param arg Argument to ISR.
 *
 * @return N/A
 */
static void uart_nrfx_isr(void *arg)
{
   15ef8:	b580      	push	{r7, lr}
   15efa:	b082      	sub	sp, #8
   15efc:	af00      	add	r7, sp, #0
   15efe:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(arg);

	if (irq_callback) {
   15f00:	4b06      	ldr	r3, [pc, #24]	; (15f1c <uart_nrfx_isr+0x24>)
   15f02:	681b      	ldr	r3, [r3, #0]
   15f04:	2b00      	cmp	r3, #0
   15f06:	d005      	beq.n	15f14 <uart_nrfx_isr+0x1c>
		irq_callback(irq_cb_data);
   15f08:	4b04      	ldr	r3, [pc, #16]	; (15f1c <uart_nrfx_isr+0x24>)
   15f0a:	681b      	ldr	r3, [r3, #0]
   15f0c:	4a04      	ldr	r2, [pc, #16]	; (15f20 <uart_nrfx_isr+0x28>)
   15f0e:	6812      	ldr	r2, [r2, #0]
   15f10:	4610      	mov	r0, r2
   15f12:	4798      	blx	r3
	}
}
   15f14:	bf00      	nop
   15f16:	3708      	adds	r7, #8
   15f18:	46bd      	mov	sp, r7
   15f1a:	bd80      	pop	{r7, pc}
   15f1c:	20004fec 	.word	0x20004fec
   15f20:	20004ff0 	.word	0x20004ff0

00015f24 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   15f24:	b580      	push	{r7, lr}
   15f26:	b084      	sub	sp, #16
   15f28:	af00      	add	r7, sp, #0
   15f2a:	6078      	str	r0, [r7, #4]
	int err;

	/* Setting default height state of the TX PIN to avoid glitches
	 * on the line during peripheral activation/deactivation.
	 */
	nrf_gpio_pin_write(DT_NORDIC_NRF_UART_UART_0_TX_PIN, 1);
   15f2c:	2101      	movs	r1, #1
   15f2e:	2006      	movs	r0, #6
   15f30:	f013 fb20 	bl	29574 <nrf_gpio_pin_write>
	nrf_gpio_cfg_output(DT_NORDIC_NRF_UART_UART_0_TX_PIN);
   15f34:	2006      	movs	r0, #6
   15f36:	f013 facc 	bl	294d2 <nrf_gpio_cfg_output>

	nrf_gpio_cfg_input(DT_NORDIC_NRF_UART_UART_0_RX_PIN,
   15f3a:	2100      	movs	r1, #0
   15f3c:	2008      	movs	r0, #8
   15f3e:	f013 fada 	bl	294f6 <nrf_gpio_cfg_input>
			   NRF_GPIO_PIN_NOPULL);

	nrf_uart_txrx_pins_set(uart0_addr,
   15f42:	4b22      	ldr	r3, [pc, #136]	; (15fcc <uart_nrfx_init+0xa8>)
   15f44:	2208      	movs	r2, #8
   15f46:	2106      	movs	r1, #6
   15f48:	4618      	mov	r0, r3
   15f4a:	f013 fa23 	bl	29394 <nrf_uart_txrx_pins_set>
#if	defined(DT_NORDIC_NRF_UART_UART_0_RTS_PIN) && \
	defined(DT_NORDIC_NRF_UART_UART_0_CTS_PIN)
	/* Setting default height state of the RTS PIN to avoid glitches
	 * on the line during peripheral activation/deactivation.
	 */
	nrf_gpio_pin_write(DT_NORDIC_NRF_UART_UART_0_RTS_PIN, 1);
   15f4e:	2101      	movs	r1, #1
   15f50:	2005      	movs	r0, #5
   15f52:	f013 fb0f 	bl	29574 <nrf_gpio_pin_write>
	nrf_gpio_cfg_output(DT_NORDIC_NRF_UART_UART_0_RTS_PIN);
   15f56:	2005      	movs	r0, #5
   15f58:	f013 fabb 	bl	294d2 <nrf_gpio_cfg_output>

	nrf_gpio_cfg_input(DT_NORDIC_NRF_UART_UART_0_CTS_PIN,
   15f5c:	2100      	movs	r1, #0
   15f5e:	2007      	movs	r0, #7
   15f60:	f013 fac9 	bl	294f6 <nrf_gpio_cfg_input>
			   NRF_GPIO_PIN_NOPULL);

	nrf_uart_hwfc_pins_set(uart0_addr,
   15f64:	4b19      	ldr	r3, [pc, #100]	; (15fcc <uart_nrfx_init+0xa8>)
   15f66:	2207      	movs	r2, #7
   15f68:	2105      	movs	r1, #5
   15f6a:	4618      	mov	r0, r3
   15f6c:	f013 fa25 	bl	293ba <nrf_uart_hwfc_pins_set>
			       DT_NORDIC_NRF_UART_UART_0_RTS_PIN,
			       DT_NORDIC_NRF_UART_UART_0_CTS_PIN);
#endif

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   15f70:	6878      	ldr	r0, [r7, #4]
   15f72:	f013 fb2e 	bl	295d2 <get_dev_data>
   15f76:	4603      	mov	r3, r0
   15f78:	4619      	mov	r1, r3
   15f7a:	6878      	ldr	r0, [r7, #4]
   15f7c:	f7ff fe28 	bl	15bd0 <uart_nrfx_configure>
   15f80:	60f8      	str	r0, [r7, #12]
	if (err) {
   15f82:	68fb      	ldr	r3, [r7, #12]
   15f84:	2b00      	cmp	r3, #0
   15f86:	d001      	beq.n	15f8c <uart_nrfx_init+0x68>
		return err;
   15f88:	68fb      	ldr	r3, [r7, #12]
   15f8a:	e01a      	b.n	15fc2 <uart_nrfx_init+0x9e>

	/* Enable the UART and activate its receiver. With the current API
	 * the receiver needs to be active all the time. The transmitter
	 * will be activated when there is something to send.
	 */
	nrf_uart_enable(uart0_addr);
   15f8c:	4b0f      	ldr	r3, [pc, #60]	; (15fcc <uart_nrfx_init+0xa8>)
   15f8e:	4618      	mov	r0, r3
   15f90:	f013 f9f3 	bl	2937a <nrf_uart_enable>

	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);
   15f94:	4b0d      	ldr	r3, [pc, #52]	; (15fcc <uart_nrfx_init+0xa8>)
   15f96:	f44f 7184 	mov.w	r1, #264	; 0x108
   15f9a:	4618      	mov	r0, r3
   15f9c:	f013 f981 	bl	292a2 <nrf_uart_event_clear>

	nrf_uart_task_trigger(uart0_addr, NRF_UART_TASK_STARTRX);
   15fa0:	4b0a      	ldr	r3, [pc, #40]	; (15fcc <uart_nrfx_init+0xa8>)
   15fa2:	2100      	movs	r1, #0
   15fa4:	4618      	mov	r0, r3
   15fa6:	f013 fa37 	bl	29418 <nrf_uart_task_trigger>

#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
	/* Simulate that the TXDRDY event is set, so that the transmitter status
	 * is indicated correctly.
	 */
	uart_sw_event_txdrdy = 1U;
   15faa:	4b09      	ldr	r3, [pc, #36]	; (15fd0 <uart_nrfx_init+0xac>)
   15fac:	2201      	movs	r2, #1
   15fae:	701a      	strb	r2, [r3, #0]
#endif

#if defined(CONFIG_UART_ASYNC_API) || defined(CONFIG_UART_0_INTERRUPT_DRIVEN)

	IRQ_CONNECT(DT_NORDIC_NRF_UART_UART_0_IRQ,
   15fb0:	2200      	movs	r2, #0
   15fb2:	2101      	movs	r1, #1
   15fb4:	2002      	movs	r0, #2
   15fb6:	f00b fa80 	bl	214ba <z_irq_priority_set>
		    DT_NORDIC_NRF_UART_UART_0_IRQ_PRIORITY,
		    uart_nrfx_isr,
		    DEVICE_GET(uart_nrfx_uart0),
		    0);
	irq_enable(DT_NORDIC_NRF_UART_UART_0_IRQ);
   15fba:	2002      	movs	r0, #2
   15fbc:	f00b fa63 	bl	21486 <z_arch_irq_enable>
#if	defined(DT_NORDIC_NRF_UART_UART_0_RTS_PIN) && \
	defined(DT_NORDIC_NRF_UART_UART_0_CTS_PIN)
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
   15fc0:	2300      	movs	r3, #0
}
   15fc2:	4618      	mov	r0, r3
   15fc4:	3710      	adds	r7, #16
   15fc6:	46bd      	mov	sp, r7
   15fc8:	bd80      	pop	{r7, pc}
   15fca:	bf00      	nop
   15fcc:	40002000 	.word	0x40002000
   15fd0:	2000624b 	.word	0x2000624b

00015fd4 <__NVIC_ClearPendingIRQ>:
{
   15fd4:	b480      	push	{r7}
   15fd6:	b083      	sub	sp, #12
   15fd8:	af00      	add	r7, sp, #0
   15fda:	4603      	mov	r3, r0
   15fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   15fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
   15fe2:	2b00      	cmp	r3, #0
   15fe4:	db0c      	blt.n	16000 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15fe6:	79fb      	ldrb	r3, [r7, #7]
   15fe8:	f003 021f 	and.w	r2, r3, #31
   15fec:	4907      	ldr	r1, [pc, #28]	; (1600c <__NVIC_ClearPendingIRQ+0x38>)
   15fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
   15ff2:	095b      	lsrs	r3, r3, #5
   15ff4:	2001      	movs	r0, #1
   15ff6:	fa00 f202 	lsl.w	r2, r0, r2
   15ffa:	3360      	adds	r3, #96	; 0x60
   15ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16000:	bf00      	nop
   16002:	370c      	adds	r7, #12
   16004:	46bd      	mov	sp, r7
   16006:	bc80      	pop	{r7}
   16008:	4770      	bx	lr
   1600a:	bf00      	nop
   1600c:	e000e100 	.word	0xe000e100

00016010 <nrf_rng_int_enable>:
__STATIC_INLINE void nrf_rng_error_correction_disable(void);

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE void nrf_rng_int_enable(uint32_t rng_int_mask)
{
   16010:	b480      	push	{r7}
   16012:	b083      	sub	sp, #12
   16014:	af00      	add	r7, sp, #0
   16016:	6078      	str	r0, [r7, #4]
    NRF_RNG->INTENSET = rng_int_mask;
   16018:	4a04      	ldr	r2, [pc, #16]	; (1602c <nrf_rng_int_enable+0x1c>)
   1601a:	687b      	ldr	r3, [r7, #4]
   1601c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   16020:	bf00      	nop
   16022:	370c      	adds	r7, #12
   16024:	46bd      	mov	sp, r7
   16026:	bc80      	pop	{r7}
   16028:	4770      	bx	lr
   1602a:	bf00      	nop
   1602c:	4000d000 	.word	0x4000d000

00016030 <nrf_rng_random_value_get>:
{
     NRF_RNG->SHORTS &= ~rng_short_mask;
}

__STATIC_INLINE uint8_t nrf_rng_random_value_get(void)
{
   16030:	b480      	push	{r7}
   16032:	af00      	add	r7, sp, #0
    return (uint8_t)(NRF_RNG->VALUE & RNG_VALUE_VALUE_Msk);
   16034:	4b03      	ldr	r3, [pc, #12]	; (16044 <nrf_rng_random_value_get+0x14>)
   16036:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
   1603a:	b2db      	uxtb	r3, r3
}
   1603c:	4618      	mov	r0, r3
   1603e:	46bd      	mov	sp, r7
   16040:	bc80      	pop	{r7}
   16042:	4770      	bx	lr
   16044:	4000d000 	.word	0x4000d000

00016048 <nrf_rng_error_correction_disable>:
{
    NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

__STATIC_INLINE void nrf_rng_error_correction_disable(void)
{
   16048:	b480      	push	{r7}
   1604a:	af00      	add	r7, sp, #0
    NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1604c:	4b05      	ldr	r3, [pc, #20]	; (16064 <nrf_rng_error_correction_disable+0x1c>)
   1604e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   16052:	4a04      	ldr	r2, [pc, #16]	; (16064 <nrf_rng_error_correction_disable+0x1c>)
   16054:	f023 0301 	bic.w	r3, r3, #1
   16058:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1605c:	bf00      	nop
   1605e:	46bd      	mov	sp, r7
   16060:	bc80      	pop	{r7}
   16062:	4770      	bx	lr
   16064:	4000d000 	.word	0x4000d000

00016068 <isr>:
	rngp->mask	  = size - 1;
	rngp->threshold	  = threshold;
}

static void isr(void *arg)
{
   16068:	b580      	push	{r7, lr}
   1606a:	b084      	sub	sp, #16
   1606c:	af00      	add	r7, sp, #0
   1606e:	6078      	str	r0, [r7, #4]
	int byte, ret;

	ARG_UNUSED(arg);

	byte = random_byte_get();
   16070:	f013 fb55 	bl	2971e <random_byte_get>
   16074:	60f8      	str	r0, [r7, #12]
	if (byte < 0) {
   16076:	68fb      	ldr	r3, [r7, #12]
   16078:	2b00      	cmp	r3, #0
   1607a:	db1a      	blt.n	160b2 <isr+0x4a>
		return;
	}

	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1607c:	68fb      	ldr	r3, [r7, #12]
   1607e:	b2db      	uxtb	r3, r3
   16080:	4619      	mov	r1, r3
   16082:	480e      	ldr	r0, [pc, #56]	; (160bc <isr+0x54>)
   16084:	f013 fc09 	bl	2989a <rng_pool_put>
   16088:	60b8      	str	r0, [r7, #8]
	if (ret < 0) {
   1608a:	68bb      	ldr	r3, [r7, #8]
   1608c:	2b00      	cmp	r3, #0
   1608e:	da11      	bge.n	160b4 <isr+0x4c>
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
   16090:	68fb      	ldr	r3, [r7, #12]
   16092:	b2db      	uxtb	r3, r3
   16094:	4619      	mov	r1, r3
   16096:	480a      	ldr	r0, [pc, #40]	; (160c0 <isr+0x58>)
   16098:	f013 fbff 	bl	2989a <rng_pool_put>
   1609c:	60b8      	str	r0, [r7, #8]
				   byte);
		if (ret < 0) {
   1609e:	68bb      	ldr	r3, [r7, #8]
   160a0:	2b00      	cmp	r3, #0
   160a2:	da02      	bge.n	160aa <isr+0x42>
			nrf_rng_task_trigger(NRF_RNG_TASK_STOP);
   160a4:	2004      	movs	r0, #4
   160a6:	f013 fafb 	bl	296a0 <nrf_rng_task_trigger>
		}

		k_sem_give(&entropy_nrf5_data.sem_sync);
   160aa:	4806      	ldr	r0, [pc, #24]	; (160c4 <isr+0x5c>)
   160ac:	f013 faed 	bl	2968a <k_sem_give>
   160b0:	e000      	b.n	160b4 <isr+0x4c>
		return;
   160b2:	bf00      	nop
	}
}
   160b4:	3710      	adds	r7, #16
   160b6:	46bd      	mov	sp, r7
   160b8:	bd80      	pop	{r7, pc}
   160ba:	bf00      	nop
   160bc:	20005024 	.word	0x20005024
   160c0:	20005039 	.word	0x20005039
   160c4:	2000500c 	.word	0x2000500c

000160c8 <entropy_nrf5_get_entropy>:

static int entropy_nrf5_get_entropy(struct device *device, u8_t *buf, u16_t len)
{
   160c8:	b580      	push	{r7, lr}
   160ca:	b086      	sub	sp, #24
   160cc:	af00      	add	r7, sp, #0
   160ce:	60f8      	str	r0, [r7, #12]
   160d0:	60b9      	str	r1, [r7, #8]
   160d2:	4613      	mov	r3, r2
   160d4:	80fb      	strh	r3, [r7, #6]
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(device));

	while (len) {
   160d6:	e020      	b.n	1611a <entropy_nrf5_get_entropy+0x52>
		u16_t bytes;

		k_sem_take(&entropy_nrf5_data.sem_lock, K_FOREVER);
   160d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   160dc:	4813      	ldr	r0, [pc, #76]	; (1612c <entropy_nrf5_get_entropy+0x64>)
   160de:	f013 fac6 	bl	2966e <k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   160e2:	88fb      	ldrh	r3, [r7, #6]
   160e4:	461a      	mov	r2, r3
   160e6:	68b9      	ldr	r1, [r7, #8]
   160e8:	4811      	ldr	r0, [pc, #68]	; (16130 <entropy_nrf5_get_entropy+0x68>)
   160ea:	f013 fb45 	bl	29778 <rng_pool_get>
   160ee:	4603      	mov	r3, r0
   160f0:	82fb      	strh	r3, [r7, #22]
				     buf, len);
		k_sem_give(&entropy_nrf5_data.sem_lock);
   160f2:	480e      	ldr	r0, [pc, #56]	; (1612c <entropy_nrf5_get_entropy+0x64>)
   160f4:	f013 fac9 	bl	2968a <k_sem_give>

		if (bytes == 0U) {
   160f8:	8afb      	ldrh	r3, [r7, #22]
   160fa:	2b00      	cmp	r3, #0
   160fc:	d105      	bne.n	1610a <entropy_nrf5_get_entropy+0x42>
			/* Pool is empty: Sleep until next interrupt. */
			k_sem_take(&entropy_nrf5_data.sem_sync, K_FOREVER);
   160fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16102:	480c      	ldr	r0, [pc, #48]	; (16134 <entropy_nrf5_get_entropy+0x6c>)
   16104:	f013 fab3 	bl	2966e <k_sem_take>
			continue;
   16108:	e007      	b.n	1611a <entropy_nrf5_get_entropy+0x52>
		}

		len -= bytes;
   1610a:	88fa      	ldrh	r2, [r7, #6]
   1610c:	8afb      	ldrh	r3, [r7, #22]
   1610e:	1ad3      	subs	r3, r2, r3
   16110:	80fb      	strh	r3, [r7, #6]
		buf += bytes;
   16112:	8afb      	ldrh	r3, [r7, #22]
   16114:	68ba      	ldr	r2, [r7, #8]
   16116:	4413      	add	r3, r2
   16118:	60bb      	str	r3, [r7, #8]
	while (len) {
   1611a:	88fb      	ldrh	r3, [r7, #6]
   1611c:	2b00      	cmp	r3, #0
   1611e:	d1db      	bne.n	160d8 <entropy_nrf5_get_entropy+0x10>
	}

	return 0;
   16120:	2300      	movs	r3, #0
}
   16122:	4618      	mov	r0, r3
   16124:	3718      	adds	r7, #24
   16126:	46bd      	mov	sp, r7
   16128:	bd80      	pop	{r7, pc}
   1612a:	bf00      	nop
   1612c:	20004ff4 	.word	0x20004ff4
   16130:	20005039 	.word	0x20005039
   16134:	2000500c 	.word	0x2000500c

00016138 <entropy_nrf5_get_entropy_isr>:

static int entropy_nrf5_get_entropy_isr(struct device *dev, u8_t *buf, u16_t len,
					u32_t flags)
{
   16138:	b580      	push	{r7, lr}
   1613a:	b08c      	sub	sp, #48	; 0x30
   1613c:	af00      	add	r7, sp, #0
   1613e:	60f8      	str	r0, [r7, #12]
   16140:	60b9      	str	r1, [r7, #8]
   16142:	603b      	str	r3, [r7, #0]
   16144:	4613      	mov	r3, r2
   16146:	80fb      	strh	r3, [r7, #6]
	u16_t cnt = len;
   16148:	88fb      	ldrh	r3, [r7, #6]
   1614a:	85fb      	strh	r3, [r7, #46]	; 0x2e

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1614c:	683b      	ldr	r3, [r7, #0]
   1614e:	f003 0301 	and.w	r3, r3, #1
   16152:	2b00      	cmp	r3, #0
   16154:	bf0c      	ite	eq
   16156:	2301      	moveq	r3, #1
   16158:	2300      	movne	r3, #0
   1615a:	b2db      	uxtb	r3, r3
   1615c:	2b00      	cmp	r3, #0
   1615e:	d007      	beq.n	16170 <entropy_nrf5_get_entropy_isr+0x38>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   16160:	88fb      	ldrh	r3, [r7, #6]
   16162:	461a      	mov	r2, r3
   16164:	68b9      	ldr	r1, [r7, #8]
   16166:	482c      	ldr	r0, [pc, #176]	; (16218 <entropy_nrf5_get_entropy_isr+0xe0>)
   16168:	f013 fb06 	bl	29778 <rng_pool_get>
   1616c:	4603      	mov	r3, r0
   1616e:	e04f      	b.n	16210 <entropy_nrf5_get_entropy_isr+0xd8>
				    buf, len);
	}

	if (len) {
   16170:	88fb      	ldrh	r3, [r7, #6]
   16172:	2b00      	cmp	r3, #0
   16174:	d04b      	beq.n	1620e <entropy_nrf5_get_entropy_isr+0xd6>
	__asm__ volatile(
   16176:	f04f 0320 	mov.w	r3, #32
   1617a:	f3ef 8211 	mrs	r2, BASEPRI
   1617e:	f383 8811 	msr	BASEPRI, r3
   16182:	f3bf 8f6f 	isb	sy
   16186:	61ba      	str	r2, [r7, #24]
   16188:	617b      	str	r3, [r7, #20]
	return key;
   1618a:	69bb      	ldr	r3, [r7, #24]
		unsigned int key;
		int irq_enabled;

		key = irq_lock();
   1618c:	62bb      	str	r3, [r7, #40]	; 0x28
		irq_enabled = irq_is_enabled(RNG_IRQn);
   1618e:	200d      	movs	r0, #13
   16190:	f7fb fe54 	bl	11e3c <z_arch_irq_is_enabled>
   16194:	6278      	str	r0, [r7, #36]	; 0x24
		irq_disable(RNG_IRQn);
   16196:	200d      	movs	r0, #13
   16198:	f00b f982 	bl	214a0 <z_arch_irq_disable>
   1619c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1619e:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   161a0:	69fb      	ldr	r3, [r7, #28]
   161a2:	f383 8811 	msr	BASEPRI, r3
   161a6:	f3bf 8f6f 	isb	sy
		irq_unlock(key);

		nrf_rng_event_clear(NRF_RNG_EVENT_VALRDY);
   161aa:	f44f 7080 	mov.w	r0, #256	; 0x100
   161ae:	f013 fa88 	bl	296c2 <nrf_rng_event_clear>
		nrf_rng_task_trigger(NRF_RNG_TASK_START);
   161b2:	2000      	movs	r0, #0
   161b4:	f013 fa74 	bl	296a0 <nrf_rng_task_trigger>

		do {
			int byte;

			while (!nrf_rng_event_get(NRF_RNG_EVENT_VALRDY)) {
   161b8:	e002      	b.n	161c0 <entropy_nrf5_get_entropy_isr+0x88>
				__WFE();
   161ba:	bf20      	wfe
				__SEV();
   161bc:	bf40      	sev
				__WFE();
   161be:	bf20      	wfe
			while (!nrf_rng_event_get(NRF_RNG_EVENT_VALRDY)) {
   161c0:	f44f 7080 	mov.w	r0, #256	; 0x100
   161c4:	f013 fa96 	bl	296f4 <nrf_rng_event_get>
   161c8:	4603      	mov	r3, r0
   161ca:	f083 0301 	eor.w	r3, r3, #1
   161ce:	b2db      	uxtb	r3, r3
   161d0:	2b00      	cmp	r3, #0
   161d2:	d1f2      	bne.n	161ba <entropy_nrf5_get_entropy_isr+0x82>
			}

			byte = random_byte_get();
   161d4:	f013 faa3 	bl	2971e <random_byte_get>
   161d8:	6238      	str	r0, [r7, #32]
			NVIC_ClearPendingIRQ(RNG_IRQn);
   161da:	200d      	movs	r0, #13
   161dc:	f7ff fefa 	bl	15fd4 <__NVIC_ClearPendingIRQ>

			if (byte < 0) {
   161e0:	6a3b      	ldr	r3, [r7, #32]
   161e2:	2b00      	cmp	r3, #0
   161e4:	db09      	blt.n	161fa <entropy_nrf5_get_entropy_isr+0xc2>
				continue;
			}

			buf[--len] = byte;
   161e6:	88fb      	ldrh	r3, [r7, #6]
   161e8:	3b01      	subs	r3, #1
   161ea:	80fb      	strh	r3, [r7, #6]
   161ec:	88fb      	ldrh	r3, [r7, #6]
   161ee:	68ba      	ldr	r2, [r7, #8]
   161f0:	4413      	add	r3, r2
   161f2:	6a3a      	ldr	r2, [r7, #32]
   161f4:	b2d2      	uxtb	r2, r2
   161f6:	701a      	strb	r2, [r3, #0]
   161f8:	e000      	b.n	161fc <entropy_nrf5_get_entropy_isr+0xc4>
				continue;
   161fa:	bf00      	nop
		} while (len);
   161fc:	88fb      	ldrh	r3, [r7, #6]
   161fe:	2b00      	cmp	r3, #0
   16200:	d1de      	bne.n	161c0 <entropy_nrf5_get_entropy_isr+0x88>

		if (irq_enabled) {
   16202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16204:	2b00      	cmp	r3, #0
   16206:	d002      	beq.n	1620e <entropy_nrf5_get_entropy_isr+0xd6>
			irq_enable(RNG_IRQn);
   16208:	200d      	movs	r0, #13
   1620a:	f00b f93c 	bl	21486 <z_arch_irq_enable>
		}
	}

	return cnt;
   1620e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
   16210:	4618      	mov	r0, r3
   16212:	3730      	adds	r7, #48	; 0x30
   16214:	46bd      	mov	sp, r7
   16216:	bd80      	pop	{r7, pc}
   16218:	20005024 	.word	0x20005024

0001621c <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   1621c:	b580      	push	{r7, lr}
   1621e:	b082      	sub	sp, #8
   16220:	af00      	add	r7, sp, #0
   16222:	6078      	str	r0, [r7, #4]
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(device));

	/* Locking semaphore initialized to 1 (unlocked) */
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);
   16224:	2201      	movs	r2, #1
   16226:	2101      	movs	r1, #1
   16228:	4815      	ldr	r0, [pc, #84]	; (16280 <entropy_nrf5_init+0x64>)
   1622a:	f013 fa11 	bl	29650 <k_sem_init>

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);
   1622e:	2201      	movs	r2, #1
   16230:	2100      	movs	r1, #0
   16232:	4814      	ldr	r0, [pc, #80]	; (16284 <entropy_nrf5_init+0x68>)
   16234:	f013 fa0c 	bl	29650 <k_sem_init>

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
   16238:	2204      	movs	r2, #4
   1623a:	2108      	movs	r1, #8
   1623c:	4812      	ldr	r0, [pc, #72]	; (16288 <entropy_nrf5_init+0x6c>)
   1623e:	f013 fb5c 	bl	298fa <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
   16242:	220c      	movs	r2, #12
   16244:	2110      	movs	r1, #16
   16246:	4811      	ldr	r0, [pc, #68]	; (1628c <entropy_nrf5_init+0x70>)
   16248:	f013 fb57 	bl	298fa <rng_pool_init>

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		nrf_rng_error_correction_enable();
	} else {
		nrf_rng_error_correction_disable();
   1624c:	f7ff fefc 	bl	16048 <nrf_rng_error_correction_disable>
	}

	nrf_rng_event_clear(NRF_RNG_EVENT_VALRDY);
   16250:	f44f 7080 	mov.w	r0, #256	; 0x100
   16254:	f013 fa35 	bl	296c2 <nrf_rng_event_clear>
	nrf_rng_int_enable(NRF_RNG_INT_VALRDY_MASK);
   16258:	2001      	movs	r0, #1
   1625a:	f7ff fed9 	bl	16010 <nrf_rng_int_enable>
	nrf_rng_task_trigger(NRF_RNG_TASK_START);
   1625e:	2000      	movs	r0, #0
   16260:	f013 fa1e 	bl	296a0 <nrf_rng_task_trigger>

	IRQ_CONNECT(RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr,
   16264:	2200      	movs	r2, #0
   16266:	2105      	movs	r1, #5
   16268:	200d      	movs	r0, #13
   1626a:	f00b f926 	bl	214ba <z_irq_priority_set>
		    &entropy_nrf5_data, 0);
	irq_enable(RNG_IRQn);
   1626e:	200d      	movs	r0, #13
   16270:	f00b f909 	bl	21486 <z_arch_irq_enable>

	return 0;
   16274:	2300      	movs	r3, #0
}
   16276:	4618      	mov	r0, r3
   16278:	3708      	adds	r7, #8
   1627a:	46bd      	mov	sp, r7
   1627c:	bd80      	pop	{r7, pc}
   1627e:	bf00      	nop
   16280:	20004ff4 	.word	0x20004ff4
   16284:	2000500c 	.word	0x2000500c
   16288:	20005039 	.word	0x20005039
   1628c:	20005024 	.word	0x20005024

00016290 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   16290:	b580      	push	{r7, lr}
   16292:	b086      	sub	sp, #24
   16294:	af00      	add	r7, sp, #0
   16296:	6078      	str	r0, [r7, #4]
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
   16298:	4a13      	ldr	r2, [pc, #76]	; (162e8 <z_sys_device_do_config_level+0x58>)
   1629a:	687b      	ldr	r3, [r7, #4]
   1629c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162a0:	617b      	str	r3, [r7, #20]
   162a2:	e014      	b.n	162ce <z_sys_device_do_config_level+0x3e>
								info++) {
		int retval;
		struct device_config *device_conf = info->config;
   162a4:	697b      	ldr	r3, [r7, #20]
   162a6:	681b      	ldr	r3, [r3, #0]
   162a8:	613b      	str	r3, [r7, #16]

		retval = device_conf->init(info);
   162aa:	693b      	ldr	r3, [r7, #16]
   162ac:	685b      	ldr	r3, [r3, #4]
   162ae:	6978      	ldr	r0, [r7, #20]
   162b0:	4798      	blx	r3
   162b2:	60f8      	str	r0, [r7, #12]
		if (retval != 0) {
   162b4:	68fb      	ldr	r3, [r7, #12]
   162b6:	2b00      	cmp	r3, #0
   162b8:	d003      	beq.n	162c2 <z_sys_device_do_config_level+0x32>
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   162ba:	697b      	ldr	r3, [r7, #20]
   162bc:	2200      	movs	r2, #0
   162be:	605a      	str	r2, [r3, #4]
   162c0:	e002      	b.n	162c8 <z_sys_device_do_config_level+0x38>
		} else {
			z_object_init(info);
   162c2:	6978      	ldr	r0, [r7, #20]
   162c4:	f013 fb39 	bl	2993a <z_object_init>
								info++) {
   162c8:	697b      	ldr	r3, [r7, #20]
   162ca:	330c      	adds	r3, #12
   162cc:	617b      	str	r3, [r7, #20]
	for (info = config_levels[level]; info < config_levels[level+1];
   162ce:	687b      	ldr	r3, [r7, #4]
   162d0:	3301      	adds	r3, #1
   162d2:	4a05      	ldr	r2, [pc, #20]	; (162e8 <z_sys_device_do_config_level+0x58>)
   162d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162d8:	697a      	ldr	r2, [r7, #20]
   162da:	429a      	cmp	r2, r3
   162dc:	d3e2      	bcc.n	162a4 <z_sys_device_do_config_level+0x14>
		}
	}
}
   162de:	bf00      	nop
   162e0:	3718      	adds	r7, #24
   162e2:	46bd      	mov	sp, r7
   162e4:	bd80      	pop	{r7, pc}
   162e6:	bf00      	nop
   162e8:	2000fc60 	.word	0x2000fc60

000162ec <z_impl_device_get_binding>:

struct device *z_impl_device_get_binding(const char *name)
{
   162ec:	b580      	push	{r7, lr}
   162ee:	b084      	sub	sp, #16
   162f0:	af00      	add	r7, sp, #0
   162f2:	6078      	str	r0, [r7, #4]
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   162f4:	4b1a      	ldr	r3, [pc, #104]	; (16360 <z_impl_device_get_binding+0x74>)
   162f6:	60fb      	str	r3, [r7, #12]
   162f8:	e00e      	b.n	16318 <z_impl_device_get_binding+0x2c>
		if ((info->driver_api != NULL) &&
   162fa:	68fb      	ldr	r3, [r7, #12]
   162fc:	685b      	ldr	r3, [r3, #4]
   162fe:	2b00      	cmp	r3, #0
   16300:	d007      	beq.n	16312 <z_impl_device_get_binding+0x26>
		    (info->config->name == name)) {
   16302:	68fb      	ldr	r3, [r7, #12]
   16304:	681b      	ldr	r3, [r3, #0]
   16306:	681b      	ldr	r3, [r3, #0]
		if ((info->driver_api != NULL) &&
   16308:	687a      	ldr	r2, [r7, #4]
   1630a:	429a      	cmp	r2, r3
   1630c:	d101      	bne.n	16312 <z_impl_device_get_binding+0x26>
			return info;
   1630e:	68fb      	ldr	r3, [r7, #12]
   16310:	e022      	b.n	16358 <z_impl_device_get_binding+0x6c>
	for (info = __device_init_start; info != __device_init_end; info++) {
   16312:	68fb      	ldr	r3, [r7, #12]
   16314:	330c      	adds	r3, #12
   16316:	60fb      	str	r3, [r7, #12]
   16318:	68fb      	ldr	r3, [r7, #12]
   1631a:	4a12      	ldr	r2, [pc, #72]	; (16364 <z_impl_device_get_binding+0x78>)
   1631c:	4293      	cmp	r3, r2
   1631e:	d1ec      	bne.n	162fa <z_impl_device_get_binding+0xe>
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   16320:	4b0f      	ldr	r3, [pc, #60]	; (16360 <z_impl_device_get_binding+0x74>)
   16322:	60fb      	str	r3, [r7, #12]
   16324:	e013      	b.n	1634e <z_impl_device_get_binding+0x62>
		if (info->driver_api == NULL) {
   16326:	68fb      	ldr	r3, [r7, #12]
   16328:	685b      	ldr	r3, [r3, #4]
   1632a:	2b00      	cmp	r3, #0
   1632c:	d00b      	beq.n	16346 <z_impl_device_get_binding+0x5a>
			continue;
		}

		if (strcmp(name, info->config->name) == 0) {
   1632e:	68fb      	ldr	r3, [r7, #12]
   16330:	681b      	ldr	r3, [r3, #0]
   16332:	681b      	ldr	r3, [r3, #0]
   16334:	4619      	mov	r1, r3
   16336:	6878      	ldr	r0, [r7, #4]
   16338:	f7eb fed3 	bl	20e2 <strcmp>
   1633c:	4603      	mov	r3, r0
   1633e:	2b00      	cmp	r3, #0
   16340:	d102      	bne.n	16348 <z_impl_device_get_binding+0x5c>
			return info;
   16342:	68fb      	ldr	r3, [r7, #12]
   16344:	e008      	b.n	16358 <z_impl_device_get_binding+0x6c>
			continue;
   16346:	bf00      	nop
	for (info = __device_init_start; info != __device_init_end; info++) {
   16348:	68fb      	ldr	r3, [r7, #12]
   1634a:	330c      	adds	r3, #12
   1634c:	60fb      	str	r3, [r7, #12]
   1634e:	68fb      	ldr	r3, [r7, #12]
   16350:	4a04      	ldr	r2, [pc, #16]	; (16364 <z_impl_device_get_binding+0x78>)
   16352:	4293      	cmp	r3, r2
   16354:	d1e7      	bne.n	16326 <z_impl_device_get_binding+0x3a>
		}
	}

	return NULL;
   16356:	2300      	movs	r3, #0
}
   16358:	4618      	mov	r0, r3
   1635a:	3710      	adds	r7, #16
   1635c:	46bd      	mov	sp, r7
   1635e:	bd80      	pop	{r7, pc}
   16360:	2000fc7c 	.word	0x2000fc7c
   16364:	2000fd3c 	.word	0x2000fd3c

00016368 <z_impl_z_errno>:
}

Z_SYSCALL_HANDLER0_SIMPLE(z_errno);
#else
int *z_impl_z_errno(void)
{
   16368:	b480      	push	{r7}
   1636a:	af00      	add	r7, sp, #0
	return &_current->errno_var;
   1636c:	4b03      	ldr	r3, [pc, #12]	; (1637c <z_impl_z_errno+0x14>)
   1636e:	689b      	ldr	r3, [r3, #8]
   16370:	3354      	adds	r3, #84	; 0x54
}
   16372:	4618      	mov	r0, r3
   16374:	46bd      	mov	sp, r7
   16376:	bc80      	pop	{r7}
   16378:	4770      	bx	lr
   1637a:	bf00      	nop
   1637c:	20006178 	.word	0x20006178

00016380 <set_kernel_idle_time_in_ticks>:
 *
 * @return N/A
 */
#ifndef CONFIG_SMP
static void set_kernel_idle_time_in_ticks(s32_t ticks)
{
   16380:	b480      	push	{r7}
   16382:	b083      	sub	sp, #12
   16384:	af00      	add	r7, sp, #0
   16386:	6078      	str	r0, [r7, #4]
#ifdef CONFIG_SYS_POWER_MANAGEMENT
	_kernel.idle = ticks;
   16388:	4a03      	ldr	r2, [pc, #12]	; (16398 <set_kernel_idle_time_in_ticks+0x18>)
   1638a:	687b      	ldr	r3, [r7, #4]
   1638c:	6213      	str	r3, [r2, #32]
#endif
}
   1638e:	bf00      	nop
   16390:	370c      	adds	r7, #12
   16392:	46bd      	mov	sp, r7
   16394:	bc80      	pop	{r7}
   16396:	4770      	bx	lr
   16398:	20006178 	.word	0x20006178

0001639c <__NVIC_SetPriority>:
{
   1639c:	b480      	push	{r7}
   1639e:	b083      	sub	sp, #12
   163a0:	af00      	add	r7, sp, #0
   163a2:	4603      	mov	r3, r0
   163a4:	6039      	str	r1, [r7, #0]
   163a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   163a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   163ac:	2b00      	cmp	r3, #0
   163ae:	db0a      	blt.n	163c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   163b0:	683b      	ldr	r3, [r7, #0]
   163b2:	b2da      	uxtb	r2, r3
   163b4:	490c      	ldr	r1, [pc, #48]	; (163e8 <__NVIC_SetPriority+0x4c>)
   163b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
   163ba:	0152      	lsls	r2, r2, #5
   163bc:	b2d2      	uxtb	r2, r2
   163be:	440b      	add	r3, r1
   163c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   163c4:	e00a      	b.n	163dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   163c6:	683b      	ldr	r3, [r7, #0]
   163c8:	b2da      	uxtb	r2, r3
   163ca:	4908      	ldr	r1, [pc, #32]	; (163ec <__NVIC_SetPriority+0x50>)
   163cc:	79fb      	ldrb	r3, [r7, #7]
   163ce:	f003 030f 	and.w	r3, r3, #15
   163d2:	3b04      	subs	r3, #4
   163d4:	0152      	lsls	r2, r2, #5
   163d6:	b2d2      	uxtb	r2, r2
   163d8:	440b      	add	r3, r1
   163da:	761a      	strb	r2, [r3, #24]
}
   163dc:	bf00      	nop
   163de:	370c      	adds	r7, #12
   163e0:	46bd      	mov	sp, r7
   163e2:	bc80      	pop	{r7}
   163e4:	4770      	bx	lr
   163e6:	bf00      	nop
   163e8:	e000e100 	.word	0xe000e100
   163ec:	e000ed00 	.word	0xe000ed00

000163f0 <z_bss_zero>:
 * This routine clears the BSS region, so all bytes are 0.
 *
 * @return N/A
 */
void z_bss_zero(void)
{
   163f0:	b580      	push	{r7, lr}
   163f2:	af00      	add	r7, sp, #0
	(void)memset(&__bss_start, 0,
		     ((u32_t) &__bss_end - (u32_t) &__bss_start));
   163f4:	4a04      	ldr	r2, [pc, #16]	; (16408 <z_bss_zero+0x18>)
   163f6:	4b05      	ldr	r3, [pc, #20]	; (1640c <z_bss_zero+0x1c>)
	(void)memset(&__bss_start, 0,
   163f8:	1ad3      	subs	r3, r2, r3
   163fa:	461a      	mov	r2, r3
   163fc:	2100      	movs	r1, #0
   163fe:	4803      	ldr	r0, [pc, #12]	; (1640c <z_bss_zero+0x1c>)
   16400:	f7eb fe5a 	bl	20b8 <memset>
#endif	/* CONFIG_CODE_DATA_RELOCATION */
#ifdef CONFIG_COVERAGE_GCOV
	(void)memset(&__gcov_bss_start, 0,
		 ((u32_t) &__gcov_bss_end - (u32_t) &__gcov_bss_start));
#endif
}
   16404:	bf00      	nop
   16406:	bd80      	pop	{r7, pc}
   16408:	20006254 	.word	0x20006254
   1640c:	20002000 	.word	0x20002000

00016410 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   16410:	b580      	push	{r7, lr}
   16412:	af00      	add	r7, sp, #0
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 ((u32_t) &__data_ram_end - (u32_t) &__data_ram_start));
   16414:	4a07      	ldr	r2, [pc, #28]	; (16434 <z_data_copy+0x24>)
   16416:	4b08      	ldr	r3, [pc, #32]	; (16438 <z_data_copy+0x28>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   16418:	1ad3      	subs	r3, r2, r3
   1641a:	461a      	mov	r2, r3
   1641c:	4907      	ldr	r1, [pc, #28]	; (1643c <z_data_copy+0x2c>)
   1641e:	4806      	ldr	r0, [pc, #24]	; (16438 <z_data_copy+0x28>)
   16420:	f7eb fe22 	bl	2068 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   16424:	4b06      	ldr	r3, [pc, #24]	; (16440 <z_data_copy+0x30>)
   16426:	461a      	mov	r2, r3
   16428:	4906      	ldr	r1, [pc, #24]	; (16444 <z_data_copy+0x34>)
   1642a:	4807      	ldr	r0, [pc, #28]	; (16448 <z_data_copy+0x38>)
   1642c:	f7eb fe1c 	bl	2068 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 ((u32_t) &_app_smem_end - (u32_t) &_app_smem_start));
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   16430:	bf00      	nop
   16432:	bd80      	pop	{r7, pc}
   16434:	20010008 	.word	0x20010008
   16438:	2000e758 	.word	0x2000e758
   1643c:	000310cc 	.word	0x000310cc
   16440:	00002000 	.word	0x00002000
   16444:	0002f0cc 	.word	0x0002f0cc
   16448:	20000000 	.word	0x20000000

0001644c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1644c:	b580      	push	{r7, lr}
   1644e:	b084      	sub	sp, #16
   16450:	af00      	add	r7, sp, #0
   16452:	60f8      	str	r0, [r7, #12]
   16454:	60b9      	str	r1, [r7, #8]
   16456:	607a      	str	r2, [r7, #4]
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   16458:	2002      	movs	r0, #2
   1645a:	f7ff ff19 	bl	16290 <z_sys_device_do_config_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1645e:	4b10      	ldr	r3, [pc, #64]	; (164a0 <bg_thread_main+0x54>)
   16460:	681b      	ldr	r3, [r3, #0]
   16462:	2b00      	cmp	r3, #0
   16464:	d005      	beq.n	16472 <bg_thread_main+0x26>
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
   16466:	480f      	ldr	r0, [pc, #60]	; (164a4 <bg_thread_main+0x58>)
   16468:	f005 fde4 	bl	1c034 <printk>
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
   1646c:	2000      	movs	r0, #0
   1646e:	f013 fade 	bl	29a2e <k_busy_wait>
	}
	PRINT_BOOT_BANNER();
   16472:	480d      	ldr	r0, [pc, #52]	; (164a8 <bg_thread_main+0x5c>)
   16474:	f005 fdde 	bl	1c034 <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   16478:	2003      	movs	r0, #3
   1647a:	f7ff ff09 	bl	16290 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   1647e:	f001 fd17 	bl	17eb0 <z_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   16482:	f7f3 f927 	bl	96d4 <main>

	/* Mark nonessenrial since main() has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   16486:	4b09      	ldr	r3, [pc, #36]	; (164ac <bg_thread_main+0x60>)
   16488:	7b1b      	ldrb	r3, [r3, #12]
   1648a:	4a08      	ldr	r2, [pc, #32]	; (164ac <bg_thread_main+0x60>)
   1648c:	f023 0301 	bic.w	r3, r3, #1
   16490:	b2db      	uxtb	r3, r3
   16492:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
   16494:	f013 fb4b 	bl	29b2e <gcov_coverage_dump>
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   16498:	bf00      	nop
   1649a:	3710      	adds	r7, #16
   1649c:	46bd      	mov	sp, r7
   1649e:	bd80      	pop	{r7, pc}
   164a0:	0002f058 	.word	0x0002f058
   164a4:	0002e820 	.word	0x0002e820
   164a8:	0002e85c 	.word	0x0002e85c
   164ac:	20005048 	.word	0x20005048

000164b0 <init_idle_thread>:

/* LCOV_EXCL_STOP */

#if defined(CONFIG_MULTITHREADING)
static void init_idle_thread(struct k_thread *thr, k_thread_stack_t *stack)
{
   164b0:	b580      	push	{r7, lr}
   164b2:	b088      	sub	sp, #32
   164b4:	af06      	add	r7, sp, #24
   164b6:	6078      	str	r0, [r7, #4]
   164b8:	6039      	str	r1, [r7, #0]
#ifdef CONFIG_SMP
	thr->base.is_idle = 1U;
#endif

	z_setup_new_thread(thr, stack,
   164ba:	4b0d      	ldr	r3, [pc, #52]	; (164f0 <init_idle_thread+0x40>)
   164bc:	9305      	str	r3, [sp, #20]
   164be:	2301      	movs	r3, #1
   164c0:	9304      	str	r3, [sp, #16]
   164c2:	230f      	movs	r3, #15
   164c4:	9303      	str	r3, [sp, #12]
   164c6:	2300      	movs	r3, #0
   164c8:	9302      	str	r3, [sp, #8]
   164ca:	2300      	movs	r3, #0
   164cc:	9301      	str	r3, [sp, #4]
   164ce:	2300      	movs	r3, #0
   164d0:	9300      	str	r3, [sp, #0]
   164d2:	4b08      	ldr	r3, [pc, #32]	; (164f4 <init_idle_thread+0x44>)
   164d4:	f44f 72a0 	mov.w	r2, #320	; 0x140
   164d8:	6839      	ldr	r1, [r7, #0]
   164da:	6878      	ldr	r0, [r7, #4]
   164dc:	f001 fcba 	bl	17e54 <z_setup_new_thread>
			  IDLE_STACK_SIZE, idle, NULL, NULL, NULL,
			  K_LOWEST_THREAD_PRIO, K_ESSENTIAL, IDLE_THREAD_NAME);
	z_mark_thread_as_started(thr);
   164e0:	6878      	ldr	r0, [r7, #4]
   164e2:	f013 fb14 	bl	29b0e <z_mark_thread_as_started>
}
   164e6:	bf00      	nop
   164e8:	3708      	adds	r7, #8
   164ea:	46bd      	mov	sp, r7
   164ec:	bd80      	pop	{r7, pc}
   164ee:	bf00      	nop
   164f0:	0002e88c 	.word	0x0002e88c
   164f4:	000299b7 	.word	0x000299b7

000164f8 <prepare_multithreading>:
 *
 * @return N/A
 */
#ifdef CONFIG_MULTITHREADING
static void prepare_multithreading(struct k_thread *dummy_thread)
{
   164f8:	b580      	push	{r7, lr}
   164fa:	b08a      	sub	sp, #40	; 0x28
   164fc:	af06      	add	r7, sp, #24
   164fe:	6078      	str	r0, [r7, #4]
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif
#endif

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
   16500:	f001 f9be 	bl	17880 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = _main_thread;
   16504:	4a19      	ldr	r2, [pc, #100]	; (1656c <prepare_multithreading+0x74>)
   16506:	4b1a      	ldr	r3, [pc, #104]	; (16570 <prepare_multithreading+0x78>)
   16508:	625a      	str	r2, [r3, #36]	; 0x24
#endif

	z_setup_new_thread(_main_thread, _main_stack,
   1650a:	4818      	ldr	r0, [pc, #96]	; (1656c <prepare_multithreading+0x74>)
   1650c:	4b19      	ldr	r3, [pc, #100]	; (16574 <prepare_multithreading+0x7c>)
   1650e:	9305      	str	r3, [sp, #20]
   16510:	2301      	movs	r3, #1
   16512:	9304      	str	r3, [sp, #16]
   16514:	2300      	movs	r3, #0
   16516:	9303      	str	r3, [sp, #12]
   16518:	2300      	movs	r3, #0
   1651a:	9302      	str	r3, [sp, #8]
   1651c:	2300      	movs	r3, #0
   1651e:	9301      	str	r3, [sp, #4]
   16520:	2300      	movs	r3, #0
   16522:	9300      	str	r3, [sp, #0]
   16524:	4b14      	ldr	r3, [pc, #80]	; (16578 <prepare_multithreading+0x80>)
   16526:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1652a:	4914      	ldr	r1, [pc, #80]	; (1657c <prepare_multithreading+0x84>)
   1652c:	f001 fc92 	bl	17e54 <z_setup_new_thread>
			  MAIN_STACK_SIZE, bg_thread_main,
			  NULL, NULL, NULL,
			  CONFIG_MAIN_THREAD_PRIORITY, K_ESSENTIAL, "main");
	sys_trace_thread_create(_main_thread);

	z_mark_thread_as_started(_main_thread);
   16530:	4b0e      	ldr	r3, [pc, #56]	; (1656c <prepare_multithreading+0x74>)
   16532:	4618      	mov	r0, r3
   16534:	f013 faeb 	bl	29b0e <z_mark_thread_as_started>
	z_ready_thread(_main_thread);
   16538:	4b0c      	ldr	r3, [pc, #48]	; (1656c <prepare_multithreading+0x74>)
   1653a:	60fb      	str	r3, [r7, #12]
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   1653c:	68f8      	ldr	r0, [r7, #12]
   1653e:	f013 fac6 	bl	29ace <z_is_thread_ready>
   16542:	4603      	mov	r3, r0
   16544:	2b00      	cmp	r3, #0
   16546:	d002      	beq.n	1654e <prepare_multithreading+0x56>
		z_add_thread_to_ready_q(thread);
   16548:	68f8      	ldr	r0, [r7, #12]
   1654a:	f000 fdcf 	bl	170ec <z_add_thread_to_ready_q>

#ifdef CONFIG_MULTITHREADING
	init_idle_thread(_idle_thread, _idle_stack);
   1654e:	4b0c      	ldr	r3, [pc, #48]	; (16580 <prepare_multithreading+0x88>)
   16550:	490c      	ldr	r1, [pc, #48]	; (16584 <prepare_multithreading+0x8c>)
   16552:	4618      	mov	r0, r3
   16554:	f7ff ffac 	bl	164b0 <init_idle_thread>
	_kernel.cpus[0].idle_thread = _idle_thread;
   16558:	4a09      	ldr	r2, [pc, #36]	; (16580 <prepare_multithreading+0x88>)
   1655a:	4b05      	ldr	r3, [pc, #20]	; (16570 <prepare_multithreading+0x78>)
   1655c:	60da      	str	r2, [r3, #12]
	_kernel.cpus[3].id = 3;
	_kernel.cpus[3].irq_stack = Z_THREAD_STACK_BUFFER(_interrupt_stack3)
		+ CONFIG_ISR_STACK_SIZE;
#endif

	initialize_timeouts();
   1655e:	480a      	ldr	r0, [pc, #40]	; (16588 <prepare_multithreading+0x90>)
   16560:	f013 fa3c 	bl	299dc <sys_dlist_init>

}
   16564:	bf00      	nop
   16566:	3710      	adds	r7, #16
   16568:	46bd      	mov	sp, r7
   1656a:	bd80      	pop	{r7, pc}
   1656c:	20005048 	.word	0x20005048
   16570:	20006178 	.word	0x20006178
   16574:	0002e894 	.word	0x0002e894
   16578:	0001644d 	.word	0x0001644d
   1657c:	200093e8 	.word	0x200093e8
   16580:	200050b4 	.word	0x200050b4
   16584:	2000a3e8 	.word	0x2000a3e8
   16588:	20006190 	.word	0x20006190

0001658c <switch_to_main_thread>:

static FUNC_NORETURN void switch_to_main_thread(void)
{
   1658c:	b580      	push	{r7, lr}
   1658e:	b086      	sub	sp, #24
   16590:	af00      	add	r7, sp, #0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	z_arch_switch_to_main_thread(_main_thread, _main_stack, MAIN_STACK_SIZE,
   16592:	4b16      	ldr	r3, [pc, #88]	; (165ec <switch_to_main_thread+0x60>)
   16594:	617b      	str	r3, [r7, #20]
   16596:	4b16      	ldr	r3, [pc, #88]	; (165f0 <switch_to_main_thread+0x64>)
   16598:	613b      	str	r3, [r7, #16]
   1659a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1659e:	60fb      	str	r3, [r7, #12]
   165a0:	4b14      	ldr	r3, [pc, #80]	; (165f4 <switch_to_main_thread+0x68>)
   165a2:	60bb      	str	r3, [r7, #8]
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arch_configure_static_mpu_regions();
   165a4:	f7fb fde2 	bl	1216c <z_arch_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size -
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
   165a8:	6938      	ldr	r0, [r7, #16]
   165aa:	f013 fa36 	bl	29a1a <Z_THREAD_STACK_BUFFER>
   165ae:	4602      	mov	r2, r0
	start_of_main_stack =
   165b0:	68fb      	ldr	r3, [r7, #12]
   165b2:	4413      	add	r3, r2
   165b4:	607b      	str	r3, [r7, #4]
#endif
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
   165b6:	687b      	ldr	r3, [r7, #4]
   165b8:	f023 0307 	bic.w	r3, r3, #7
   165bc:	607b      	str	r3, [r7, #4]

#ifdef CONFIG_TRACING
	z_sys_trace_thread_switched_out();
#endif
	_current = main_thread;
   165be:	4a0e      	ldr	r2, [pc, #56]	; (165f8 <switch_to_main_thread+0x6c>)
   165c0:	697b      	ldr	r3, [r7, #20]
   165c2:	6093      	str	r3, [r2, #8]
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arch_configure_dynamic_mpu_regions(main_thread);
   165c4:	6978      	ldr	r0, [r7, #20]
   165c6:	f00a ffe8 	bl	2159a <z_arch_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   165ca:	68bb      	ldr	r3, [r7, #8]
   165cc:	687a      	ldr	r2, [r7, #4]
   165ce:	4618      	mov	r0, r3
   165d0:	f382 8809 	msr	PSP, r2
   165d4:	b663      	cpsie	if
   165d6:	f04f 0100 	mov.w	r1, #0
   165da:	f381 8811 	msr	BASEPRI, r1
   165de:	f3bf 8f6f 	isb	sy
   165e2:	2100      	movs	r1, #0
   165e4:	2200      	movs	r2, #0
   165e6:	2300      	movs	r3, #0
   165e8:	f005 fc7b 	bl	1bee2 <z_thread_entry>
   165ec:	20005048 	.word	0x20005048
   165f0:	200093e8 	.word	0x200093e8
   165f4:	0001644d 	.word	0x0001644d
   165f8:	20006178 	.word	0x20006178

000165fc <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   165fc:	b580      	push	{r7, lr}
   165fe:	b09e      	sub	sp, #120	; 0x78
   16600:	af00      	add	r7, sp, #0
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();
   16602:	f013 fa9a 	bl	29b3a <gcov_static_init>
#if defined(CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT) && \
	defined(CONFIG_USERSPACE)
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack) +
			    CONFIG_ISR_STACK_SIZE - MPU_GUARD_ALIGN_AND_SIZE);
#else
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack) +
   16606:	4826      	ldr	r0, [pc, #152]	; (166a0 <z_cstart+0xa4>)
   16608:	f013 fa07 	bl	29a1a <Z_THREAD_STACK_BUFFER>
   1660c:	4603      	mov	r3, r0
   1660e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   16612:	677b      	str	r3, [r7, #116]	; 0x74
   16614:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   16616:	673b      	str	r3, [r7, #112]	; 0x70
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   16618:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1661a:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1661e:	4b21      	ldr	r3, [pc, #132]	; (166a4 <z_cstart+0xa8>)
   16620:	695b      	ldr	r3, [r3, #20]
   16622:	4a20      	ldr	r2, [pc, #128]	; (166a4 <z_cstart+0xa8>)
   16624:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   16628:	6153      	str	r3, [r2, #20]
	NVIC_SetPriority(PendSV_IRQn, 0xff);
   1662a:	21ff      	movs	r1, #255	; 0xff
   1662c:	f06f 0001 	mvn.w	r0, #1
   16630:	f7ff feb4 	bl	1639c <__NVIC_SetPriority>
	NVIC_SetPriority(SVCall_IRQn, _EXC_SVC_PRIO);
   16634:	2100      	movs	r1, #0
   16636:	f06f 0004 	mvn.w	r0, #4
   1663a:	f7ff feaf 	bl	1639c <__NVIC_SetPriority>
	NVIC_SetPriority(MemoryManagement_IRQn, _EXC_FAULT_PRIO);
   1663e:	2100      	movs	r1, #0
   16640:	f06f 000b 	mvn.w	r0, #11
   16644:	f7ff feaa 	bl	1639c <__NVIC_SetPriority>
	NVIC_SetPriority(BusFault_IRQn, _EXC_FAULT_PRIO);
   16648:	2100      	movs	r1, #0
   1664a:	f06f 000a 	mvn.w	r0, #10
   1664e:	f7ff fea5 	bl	1639c <__NVIC_SetPriority>
	NVIC_SetPriority(UsageFault_IRQn, _EXC_FAULT_PRIO);
   16652:	2100      	movs	r1, #0
   16654:	f06f 0009 	mvn.w	r0, #9
   16658:	f7ff fea0 	bl	1639c <__NVIC_SetPriority>
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1665c:	4b11      	ldr	r3, [pc, #68]	; (166a4 <z_cstart+0xa8>)
   1665e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16660:	4a10      	ldr	r2, [pc, #64]	; (166a4 <z_cstart+0xa8>)
   16662:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   16666:	6253      	str	r3, [r2, #36]	; 0x24
	z_FaultInit();
   16668:	f7fb fb72 	bl	11d50 <z_FaultInit>
	z_CpuIdleInit();
   1666c:	f7fb fc58 	bl	11f20 <z_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   16670:	1d3b      	adds	r3, r7, #4
   16672:	226c      	movs	r2, #108	; 0x6c
   16674:	2100      	movs	r1, #0
   16676:	4618      	mov	r0, r3
   16678:	f7eb fd1e 	bl	20b8 <memset>
   1667c:	2301      	movs	r3, #1
   1667e:	747b      	strb	r3, [r7, #17]
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   16680:	4a09      	ldr	r2, [pc, #36]	; (166a8 <z_cstart+0xac>)
   16682:	1d3b      	adds	r3, r7, #4
   16684:	6093      	str	r3, [r2, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   16686:	2000      	movs	r0, #0
   16688:	f7ff fe02 	bl	16290 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1668c:	2001      	movs	r0, #1
   1668e:	f7ff fdff 	bl	16290 <z_sys_device_do_config_level>
#ifdef CONFIG_STACK_CANARIES
	__stack_chk_guard = z_early_boot_rand32_get();
#endif

#ifdef CONFIG_MULTITHREADING
	prepare_multithreading(&dummy_thread);
   16692:	1d3b      	adds	r3, r7, #4
   16694:	4618      	mov	r0, r3
   16696:	f7ff ff2f 	bl	164f8 <prepare_multithreading>
	switch_to_main_thread();
   1669a:	f7ff ff77 	bl	1658c <switch_to_main_thread>
   1669e:	bf00      	nop
   166a0:	200083e8 	.word	0x200083e8
   166a4:	e000ed00 	.word	0xe000ed00
   166a8:	20006178 	.word	0x20006178

000166ac <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   166ac:	b580      	push	{r7, lr}
   166ae:	b084      	sub	sp, #16
   166b0:	af00      	add	r7, sp, #0
   166b2:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(dev);

	struct k_mem_slab *slab;

	for (slab = _k_mem_slab_list_start;
   166b4:	4b0a      	ldr	r3, [pc, #40]	; (166e0 <init_mem_slab_module+0x34>)
   166b6:	60fb      	str	r3, [r7, #12]
   166b8:	e008      	b.n	166cc <init_mem_slab_module+0x20>
	     slab < _k_mem_slab_list_end;
	     slab++) {
		create_free_list(slab);
   166ba:	68f8      	ldr	r0, [r7, #12]
   166bc:	f013 fac1 	bl	29c42 <create_free_list>
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
   166c0:	68f8      	ldr	r0, [r7, #12]
   166c2:	f013 fa50 	bl	29b66 <z_object_init>
	     slab++) {
   166c6:	68fb      	ldr	r3, [r7, #12]
   166c8:	331c      	adds	r3, #28
   166ca:	60fb      	str	r3, [r7, #12]
	for (slab = _k_mem_slab_list_start;
   166cc:	68fb      	ldr	r3, [r7, #12]
   166ce:	4a05      	ldr	r2, [pc, #20]	; (166e4 <init_mem_slab_module+0x38>)
   166d0:	4293      	cmp	r3, r2
   166d2:	d3f2      	bcc.n	166ba <init_mem_slab_module+0xe>
	}
	return 0;
   166d4:	2300      	movs	r3, #0
}
   166d6:	4618      	mov	r0, r3
   166d8:	3710      	adds	r7, #16
   166da:	46bd      	mov	sp, r7
   166dc:	bd80      	pop	{r7, pc}
   166de:	bf00      	nop
   166e0:	2000fd9c 	.word	0x2000fd9c
   166e4:	2000fdd4 	.word	0x2000fdd4

000166e8 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   166e8:	b580      	push	{r7, lr}
   166ea:	b08e      	sub	sp, #56	; 0x38
   166ec:	af00      	add	r7, sp, #0
   166ee:	60f8      	str	r0, [r7, #12]
   166f0:	60b9      	str	r1, [r7, #8]
   166f2:	607a      	str	r2, [r7, #4]
   166f4:	4b27      	ldr	r3, [pc, #156]	; (16794 <k_mem_slab_alloc+0xac>)
   166f6:	633b      	str	r3, [r7, #48]	; 0x30
	__asm__ volatile(
   166f8:	f04f 0320 	mov.w	r3, #32
   166fc:	f3ef 8211 	mrs	r2, BASEPRI
   16700:	f383 8811 	msr	BASEPRI, r3
   16704:	f3bf 8f6f 	isb	sy
   16708:	62fa      	str	r2, [r7, #44]	; 0x2c
   1670a:	62bb      	str	r3, [r7, #40]	; 0x28
	return key;
   1670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	k.key = z_arch_irq_lock();
   1670e:	617b      	str	r3, [r7, #20]
	return k;
   16710:	697b      	ldr	r3, [r7, #20]
   16712:	61fb      	str	r3, [r7, #28]

	/* block size must be word aligned */
	__ASSERT((slab->block_size & (sizeof(void *) - 1)) == 0,
		 "block size not word aligned");

	if (slab->free_list != NULL) {
   16714:	68fb      	ldr	r3, [r7, #12]
   16716:	695b      	ldr	r3, [r3, #20]
   16718:	2b00      	cmp	r3, #0
   1671a:	d010      	beq.n	1673e <k_mem_slab_alloc+0x56>
		/* take a free block */
		*mem = slab->free_list;
   1671c:	68fb      	ldr	r3, [r7, #12]
   1671e:	695a      	ldr	r2, [r3, #20]
   16720:	68bb      	ldr	r3, [r7, #8]
   16722:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)(slab->free_list);
   16724:	68fb      	ldr	r3, [r7, #12]
   16726:	695b      	ldr	r3, [r3, #20]
   16728:	681a      	ldr	r2, [r3, #0]
   1672a:	68fb      	ldr	r3, [r7, #12]
   1672c:	615a      	str	r2, [r3, #20]
		slab->num_used++;
   1672e:	68fb      	ldr	r3, [r7, #12]
   16730:	699b      	ldr	r3, [r3, #24]
   16732:	1c5a      	adds	r2, r3, #1
   16734:	68fb      	ldr	r3, [r7, #12]
   16736:	619a      	str	r2, [r3, #24]
		result = 0;
   16738:	2300      	movs	r3, #0
   1673a:	637b      	str	r3, [r7, #52]	; 0x34
   1673c:	e01a      	b.n	16774 <k_mem_slab_alloc+0x8c>
	} else if (timeout == K_NO_WAIT) {
   1673e:	687b      	ldr	r3, [r7, #4]
   16740:	2b00      	cmp	r3, #0
   16742:	d106      	bne.n	16752 <k_mem_slab_alloc+0x6a>
		/* don't wait for a free block to become available */
		*mem = NULL;
   16744:	68bb      	ldr	r3, [r7, #8]
   16746:	2200      	movs	r2, #0
   16748:	601a      	str	r2, [r3, #0]
		result = -ENOMEM;
   1674a:	f06f 030b 	mvn.w	r3, #11
   1674e:	637b      	str	r3, [r7, #52]	; 0x34
   16750:	e010      	b.n	16774 <k_mem_slab_alloc+0x8c>
	} else {
		/* wait for a free block or timeout */
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   16752:	68fa      	ldr	r2, [r7, #12]
   16754:	687b      	ldr	r3, [r7, #4]
   16756:	69f9      	ldr	r1, [r7, #28]
   16758:	480e      	ldr	r0, [pc, #56]	; (16794 <k_mem_slab_alloc+0xac>)
   1675a:	f000 fee5 	bl	17528 <z_pend_curr>
   1675e:	6378      	str	r0, [r7, #52]	; 0x34
		if (result == 0) {
   16760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16762:	2b00      	cmp	r3, #0
   16764:	d104      	bne.n	16770 <k_mem_slab_alloc+0x88>
			*mem = _current->base.swap_data;
   16766:	4b0c      	ldr	r3, [pc, #48]	; (16798 <k_mem_slab_alloc+0xb0>)
   16768:	689b      	ldr	r3, [r3, #8]
   1676a:	695a      	ldr	r2, [r3, #20]
   1676c:	68bb      	ldr	r3, [r7, #8]
   1676e:	601a      	str	r2, [r3, #0]
		}
		return result;
   16770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16772:	e00b      	b.n	1678c <k_mem_slab_alloc+0xa4>
   16774:	4b07      	ldr	r3, [pc, #28]	; (16794 <k_mem_slab_alloc+0xac>)
   16776:	627b      	str	r3, [r7, #36]	; 0x24
   16778:	69fb      	ldr	r3, [r7, #28]
   1677a:	61bb      	str	r3, [r7, #24]
	z_arch_irq_unlock(key.key);
   1677c:	69bb      	ldr	r3, [r7, #24]
   1677e:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
   16780:	6a3b      	ldr	r3, [r7, #32]
   16782:	f383 8811 	msr	BASEPRI, r3
   16786:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	return result;
   1678a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   1678c:	4618      	mov	r0, r3
   1678e:	3738      	adds	r7, #56	; 0x38
   16790:	46bd      	mov	sp, r7
   16792:	bd80      	pop	{r7, pc}
   16794:	20005120 	.word	0x20005120
   16798:	20006178 	.word	0x20006178

0001679c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1679c:	b580      	push	{r7, lr}
   1679e:	b092      	sub	sp, #72	; 0x48
   167a0:	af00      	add	r7, sp, #0
   167a2:	6078      	str	r0, [r7, #4]
   167a4:	6039      	str	r1, [r7, #0]
   167a6:	4b2b      	ldr	r3, [pc, #172]	; (16854 <k_mem_slab_free+0xb8>)
   167a8:	643b      	str	r3, [r7, #64]	; 0x40
	__asm__ volatile(
   167aa:	f04f 0320 	mov.w	r3, #32
   167ae:	f3ef 8211 	mrs	r2, BASEPRI
   167b2:	f383 8811 	msr	BASEPRI, r3
   167b6:	f3bf 8f6f 	isb	sy
   167ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   167bc:	63bb      	str	r3, [r7, #56]	; 0x38
	return key;
   167be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	k.key = z_arch_irq_lock();
   167c0:	60fb      	str	r3, [r7, #12]
	return k;
   167c2:	68fb      	ldr	r3, [r7, #12]
   167c4:	617b      	str	r3, [r7, #20]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   167c6:	687b      	ldr	r3, [r7, #4]
   167c8:	4618      	mov	r0, r3
   167ca:	f014 fc7e 	bl	2b0ca <z_unpend_first_thread>
   167ce:	6478      	str	r0, [r7, #68]	; 0x44

	if (pending_thread != NULL) {
   167d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   167d2:	2b00      	cmp	r3, #0
   167d4:	d020      	beq.n	16818 <k_mem_slab_free+0x7c>
		z_set_thread_return_value_with_data(pending_thread, 0, *mem);
   167d6:	683b      	ldr	r3, [r7, #0]
   167d8:	681b      	ldr	r3, [r3, #0]
   167da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   167dc:	633a      	str	r2, [r7, #48]	; 0x30
   167de:	2200      	movs	r2, #0
   167e0:	62fa      	str	r2, [r7, #44]	; 0x2c
   167e2:	62bb      	str	r3, [r7, #40]	; 0x28
   167e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   167e6:	627b      	str	r3, [r7, #36]	; 0x24
   167e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   167ea:	623b      	str	r3, [r7, #32]
}

static ALWAYS_INLINE void
z_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   167ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   167ee:	6a3a      	ldr	r2, [r7, #32]
   167f0:	669a      	str	r2, [r3, #104]	; 0x68
	thread->base.swap_data = data;
   167f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   167f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   167f6:	615a      	str	r2, [r3, #20]
   167f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   167fa:	637b      	str	r3, [r7, #52]	; 0x34
	if (z_is_thread_ready(thread)) {
   167fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
   167fe:	f013 fa00 	bl	29c02 <z_is_thread_ready>
   16802:	4603      	mov	r3, r0
   16804:	2b00      	cmp	r3, #0
   16806:	d002      	beq.n	1680e <k_mem_slab_free+0x72>
		z_add_thread_to_ready_q(thread);
   16808:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1680a:	f000 fc6f 	bl	170ec <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   1680e:	6979      	ldr	r1, [r7, #20]
   16810:	4810      	ldr	r0, [pc, #64]	; (16854 <k_mem_slab_free+0xb8>)
   16812:	f014 fc6d 	bl	2b0f0 <z_reschedule>
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   16816:	e018      	b.n	1684a <k_mem_slab_free+0xae>
		**(char ***)mem = slab->free_list;
   16818:	683b      	ldr	r3, [r7, #0]
   1681a:	681b      	ldr	r3, [r3, #0]
   1681c:	687a      	ldr	r2, [r7, #4]
   1681e:	6952      	ldr	r2, [r2, #20]
   16820:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   16822:	683b      	ldr	r3, [r7, #0]
   16824:	681a      	ldr	r2, [r3, #0]
   16826:	687b      	ldr	r3, [r7, #4]
   16828:	615a      	str	r2, [r3, #20]
		slab->num_used--;
   1682a:	687b      	ldr	r3, [r7, #4]
   1682c:	699b      	ldr	r3, [r3, #24]
   1682e:	1e5a      	subs	r2, r3, #1
   16830:	687b      	ldr	r3, [r7, #4]
   16832:	619a      	str	r2, [r3, #24]
   16834:	4b07      	ldr	r3, [pc, #28]	; (16854 <k_mem_slab_free+0xb8>)
   16836:	61fb      	str	r3, [r7, #28]
   16838:	697b      	ldr	r3, [r7, #20]
   1683a:	613b      	str	r3, [r7, #16]
	z_arch_irq_unlock(key.key);
   1683c:	693b      	ldr	r3, [r7, #16]
   1683e:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
   16840:	69bb      	ldr	r3, [r7, #24]
   16842:	f383 8811 	msr	BASEPRI, r3
   16846:	f3bf 8f6f 	isb	sy
}
   1684a:	bf00      	nop
   1684c:	3748      	adds	r7, #72	; 0x48
   1684e:	46bd      	mov	sp, r7
   16850:	bd80      	pop	{r7, pc}
   16852:	bf00      	nop
   16854:	20005120 	.word	0x20005120

00016858 <get_pool>:
extern struct k_mem_pool _k_mem_pool_list_end[];

static struct k_spinlock lock;

static struct k_mem_pool *get_pool(int id)
{
   16858:	b480      	push	{r7}
   1685a:	b083      	sub	sp, #12
   1685c:	af00      	add	r7, sp, #0
   1685e:	6078      	str	r0, [r7, #4]
	return &_k_mem_pool_list_start[id];
   16860:	687a      	ldr	r2, [r7, #4]
   16862:	4613      	mov	r3, r2
   16864:	00db      	lsls	r3, r3, #3
   16866:	1a9b      	subs	r3, r3, r2
   16868:	009b      	lsls	r3, r3, #2
   1686a:	4a03      	ldr	r2, [pc, #12]	; (16878 <get_pool+0x20>)
   1686c:	4413      	add	r3, r2
}
   1686e:	4618      	mov	r0, r3
   16870:	370c      	adds	r7, #12
   16872:	46bd      	mov	sp, r7
   16874:	bc80      	pop	{r7}
   16876:	4770      	bx	lr
   16878:	2000fdd4 	.word	0x2000fdd4

0001687c <pool_id>:

static int pool_id(struct k_mem_pool *pool)
{
   1687c:	b480      	push	{r7}
   1687e:	b083      	sub	sp, #12
   16880:	af00      	add	r7, sp, #0
   16882:	6078      	str	r0, [r7, #4]
	return pool - &_k_mem_pool_list_start[0];
   16884:	687b      	ldr	r3, [r7, #4]
   16886:	4a05      	ldr	r2, [pc, #20]	; (1689c <pool_id+0x20>)
   16888:	1a9b      	subs	r3, r3, r2
   1688a:	109b      	asrs	r3, r3, #2
   1688c:	4a04      	ldr	r2, [pc, #16]	; (168a0 <pool_id+0x24>)
   1688e:	fb02 f303 	mul.w	r3, r2, r3
}
   16892:	4618      	mov	r0, r3
   16894:	370c      	adds	r7, #12
   16896:	46bd      	mov	sp, r7
   16898:	bc80      	pop	{r7}
   1689a:	4770      	bx	lr
   1689c:	2000fdd4 	.word	0x2000fdd4
   168a0:	b6db6db7 	.word	0xb6db6db7

000168a4 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   168a4:	b580      	push	{r7, lr}
   168a6:	b084      	sub	sp, #16
   168a8:	af00      	add	r7, sp, #0
   168aa:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   168ac:	4b08      	ldr	r3, [pc, #32]	; (168d0 <init_static_pools+0x2c>)
   168ae:	60fb      	str	r3, [r7, #12]
   168b0:	e005      	b.n	168be <init_static_pools+0x1a>
		k_mem_pool_init(p);
   168b2:	68f8      	ldr	r0, [r7, #12]
   168b4:	f013 fa27 	bl	29d06 <k_mem_pool_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   168b8:	68fb      	ldr	r3, [r7, #12]
   168ba:	331c      	adds	r3, #28
   168bc:	60fb      	str	r3, [r7, #12]
   168be:	68fb      	ldr	r3, [r7, #12]
   168c0:	4a04      	ldr	r2, [pc, #16]	; (168d4 <init_static_pools+0x30>)
   168c2:	4293      	cmp	r3, r2
   168c4:	d3f5      	bcc.n	168b2 <init_static_pools+0xe>
	}

	return 0;
   168c6:	2300      	movs	r3, #0
}
   168c8:	4618      	mov	r0, r3
   168ca:	3710      	adds	r7, #16
   168cc:	46bd      	mov	sp, r7
   168ce:	bd80      	pop	{r7, pc}
   168d0:	2000fdd4 	.word	0x2000fdd4
   168d4:	2000fe28 	.word	0x2000fe28

000168d8 <k_mem_pool_free_id>:

	return -EAGAIN;
}

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   168d8:	b580      	push	{r7, lr}
   168da:	b08c      	sub	sp, #48	; 0x30
   168dc:	af00      	add	r7, sp, #0
   168de:	6078      	str	r0, [r7, #4]
	int need_sched = 0;
   168e0:	2300      	movs	r3, #0
   168e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct k_mem_pool *p = get_pool(id->pool);
   168e4:	687b      	ldr	r3, [r7, #4]
   168e6:	781b      	ldrb	r3, [r3, #0]
   168e8:	4618      	mov	r0, r3
   168ea:	f7ff ffb5 	bl	16858 <get_pool>
   168ee:	62b8      	str	r0, [r7, #40]	; 0x28

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   168f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   168f2:	687b      	ldr	r3, [r7, #4]
   168f4:	785b      	ldrb	r3, [r3, #1]
   168f6:	f3c3 0303 	ubfx	r3, r3, #0, #4
   168fa:	b2db      	uxtb	r3, r3
   168fc:	4619      	mov	r1, r3
   168fe:	687b      	ldr	r3, [r7, #4]
   16900:	681b      	ldr	r3, [r3, #0]
   16902:	f3c3 3313 	ubfx	r3, r3, #12, #20
   16906:	461a      	mov	r2, r3
   16908:	f005 fa84 	bl	1be14 <z_sys_mem_pool_block_free>
   1690c:	4b16      	ldr	r3, [pc, #88]	; (16968 <k_mem_pool_free_id+0x90>)
   1690e:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
   16910:	f04f 0320 	mov.w	r3, #32
   16914:	f3ef 8211 	mrs	r2, BASEPRI
   16918:	f383 8811 	msr	BASEPRI, r3
   1691c:	f3bf 8f6f 	isb	sy
   16920:	623a      	str	r2, [r7, #32]
   16922:	61fb      	str	r3, [r7, #28]
	return key;
   16924:	6a3b      	ldr	r3, [r7, #32]
	k.key = z_arch_irq_lock();
   16926:	60bb      	str	r3, [r7, #8]
	return k;
   16928:	68bb      	ldr	r3, [r7, #8]
   1692a:	613b      	str	r3, [r7, #16]
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   1692c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1692e:	3314      	adds	r3, #20
   16930:	4618      	mov	r0, r3
   16932:	f014 fc2d 	bl	2b190 <z_unpend_all>
   16936:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (need_sched != 0) {
   16938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1693a:	2b00      	cmp	r3, #0
   1693c:	d004      	beq.n	16948 <k_mem_pool_free_id+0x70>
		z_reschedule(&lock, key);
   1693e:	6939      	ldr	r1, [r7, #16]
   16940:	4809      	ldr	r0, [pc, #36]	; (16968 <k_mem_pool_free_id+0x90>)
   16942:	f014 fbd5 	bl	2b0f0 <z_reschedule>
	} else {
		k_spin_unlock(&lock, key);
	}
}
   16946:	e00a      	b.n	1695e <k_mem_pool_free_id+0x86>
   16948:	4b07      	ldr	r3, [pc, #28]	; (16968 <k_mem_pool_free_id+0x90>)
   1694a:	61bb      	str	r3, [r7, #24]
   1694c:	693b      	ldr	r3, [r7, #16]
   1694e:	60fb      	str	r3, [r7, #12]
	z_arch_irq_unlock(key.key);
   16950:	68fb      	ldr	r3, [r7, #12]
   16952:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
   16954:	697b      	ldr	r3, [r7, #20]
   16956:	f383 8811 	msr	BASEPRI, r3
   1695a:	f3bf 8f6f 	isb	sy
   1695e:	bf00      	nop
   16960:	3730      	adds	r7, #48	; 0x30
   16962:	46bd      	mov	sp, r7
   16964:	bd80      	pop	{r7, pc}
   16966:	bf00      	nop
   16968:	20005120 	.word	0x20005120

0001696c <k_malloc>:
K_MEM_POOL_DEFINE(_heap_mem_pool, CONFIG_HEAP_MEM_POOL_MIN_SIZE,
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
   1696c:	b580      	push	{r7, lr}
   1696e:	b082      	sub	sp, #8
   16970:	af00      	add	r7, sp, #0
   16972:	6078      	str	r0, [r7, #4]
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   16974:	6879      	ldr	r1, [r7, #4]
   16976:	4804      	ldr	r0, [pc, #16]	; (16988 <k_malloc+0x1c>)
   16978:	f013 fafd 	bl	29f76 <k_mem_pool_malloc>
   1697c:	4603      	mov	r3, r0
}
   1697e:	4618      	mov	r0, r3
   16980:	3708      	adds	r7, #8
   16982:	46bd      	mov	sp, r7
   16984:	bd80      	pop	{r7, pc}
   16986:	bf00      	nop
   16988:	2000fe0c 	.word	0x2000fe0c

0001698c <z_thread_malloc>:
	thread->resource_pool = _HEAP_MEM_POOL;
}
#endif

void *z_thread_malloc(size_t size)
{
   1698c:	b580      	push	{r7, lr}
   1698e:	b084      	sub	sp, #16
   16990:	af00      	add	r7, sp, #0
   16992:	6078      	str	r0, [r7, #4]
	void *ret;

	if (_current->resource_pool != NULL) {
   16994:	4b0a      	ldr	r3, [pc, #40]	; (169c0 <z_thread_malloc+0x34>)
   16996:	689b      	ldr	r3, [r3, #8]
   16998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1699a:	2b00      	cmp	r3, #0
   1699c:	d008      	beq.n	169b0 <z_thread_malloc+0x24>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   1699e:	4b08      	ldr	r3, [pc, #32]	; (169c0 <z_thread_malloc+0x34>)
   169a0:	689b      	ldr	r3, [r3, #8]
   169a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   169a4:	6879      	ldr	r1, [r7, #4]
   169a6:	4618      	mov	r0, r3
   169a8:	f013 fae5 	bl	29f76 <k_mem_pool_malloc>
   169ac:	60f8      	str	r0, [r7, #12]
   169ae:	e001      	b.n	169b4 <z_thread_malloc+0x28>
	} else {
		ret = NULL;
   169b0:	2300      	movs	r3, #0
   169b2:	60fb      	str	r3, [r7, #12]
	}

	return ret;
   169b4:	68fb      	ldr	r3, [r7, #12]
}
   169b6:	4618      	mov	r0, r3
   169b8:	3710      	adds	r7, #16
   169ba:	46bd      	mov	sp, r7
   169bc:	bd80      	pop	{r7, pc}
   169be:	bf00      	nop
   169c0:	20006178 	.word	0x20006178

000169c4 <z_sched_lock>:
		z_ready_thread(th);
	}
}

static inline void z_sched_lock(void)
{
   169c4:	b480      	push	{r7}
   169c6:	af00      	add	r7, sp, #0
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   169c8:	4b04      	ldr	r3, [pc, #16]	; (169dc <z_sched_lock+0x18>)
   169ca:	689b      	ldr	r3, [r3, #8]
   169cc:	7bda      	ldrb	r2, [r3, #15]
   169ce:	3a01      	subs	r2, #1
   169d0:	b2d2      	uxtb	r2, r2
   169d2:	73da      	strb	r2, [r3, #15]
	compiler_barrier();

	K_DEBUG("scheduler locked (%p:%d)\n",
		_current, _current->base.sched_locked);
#endif
}
   169d4:	bf00      	nop
   169d6:	46bd      	mov	sp, r7
   169d8:	bc80      	pop	{r7}
   169da:	4770      	bx	lr
   169dc:	20006178 	.word	0x20006178

000169e0 <z_impl_k_mutex_lock>:
		z_thread_priority_set(mutex->owner, new_prio);
	}
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   169e0:	b580      	push	{r7, lr}
   169e2:	b092      	sub	sp, #72	; 0x48
   169e4:	af00      	add	r7, sp, #0
   169e6:	6078      	str	r0, [r7, #4]
   169e8:	6039      	str	r1, [r7, #0]
	int new_prio;
	k_spinlock_key_t key;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	z_sched_lock();
   169ea:	f7ff ffeb 	bl	169c4 <z_sched_lock>

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   169ee:	687b      	ldr	r3, [r7, #4]
   169f0:	68db      	ldr	r3, [r3, #12]
   169f2:	2b00      	cmp	r3, #0
   169f4:	bf0c      	ite	eq
   169f6:	2301      	moveq	r3, #1
   169f8:	2300      	movne	r3, #0
   169fa:	b2db      	uxtb	r3, r3
   169fc:	2b00      	cmp	r3, #0
   169fe:	d10a      	bne.n	16a16 <z_impl_k_mutex_lock+0x36>
   16a00:	687b      	ldr	r3, [r7, #4]
   16a02:	689a      	ldr	r2, [r3, #8]
   16a04:	4b53      	ldr	r3, [pc, #332]	; (16b54 <z_impl_k_mutex_lock+0x174>)
   16a06:	689b      	ldr	r3, [r3, #8]
   16a08:	429a      	cmp	r2, r3
   16a0a:	bf0c      	ite	eq
   16a0c:	2301      	moveq	r3, #1
   16a0e:	2300      	movne	r3, #0
   16a10:	b2db      	uxtb	r3, r3
   16a12:	2b00      	cmp	r3, #0
   16a14:	d019      	beq.n	16a4a <z_impl_k_mutex_lock+0x6a>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   16a16:	687b      	ldr	r3, [r7, #4]
   16a18:	68db      	ldr	r3, [r3, #12]
					_current->base.prio :
   16a1a:	2b00      	cmp	r3, #0
   16a1c:	d104      	bne.n	16a28 <z_impl_k_mutex_lock+0x48>
   16a1e:	4b4d      	ldr	r3, [pc, #308]	; (16b54 <z_impl_k_mutex_lock+0x174>)
   16a20:	689b      	ldr	r3, [r3, #8]
   16a22:	f993 300e 	ldrsb.w	r3, [r3, #14]
   16a26:	e001      	b.n	16a2c <z_impl_k_mutex_lock+0x4c>
   16a28:	687b      	ldr	r3, [r7, #4]
   16a2a:	691b      	ldr	r3, [r3, #16]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   16a2c:	687a      	ldr	r2, [r7, #4]
   16a2e:	6113      	str	r3, [r2, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   16a30:	687b      	ldr	r3, [r7, #4]
   16a32:	68db      	ldr	r3, [r3, #12]
   16a34:	1c5a      	adds	r2, r3, #1
   16a36:	687b      	ldr	r3, [r7, #4]
   16a38:	60da      	str	r2, [r3, #12]
		mutex->owner = _current;
   16a3a:	4b46      	ldr	r3, [pc, #280]	; (16b54 <z_impl_k_mutex_lock+0x174>)
   16a3c:	689a      	ldr	r2, [r3, #8]
   16a3e:	687b      	ldr	r3, [r7, #4]
   16a40:	609a      	str	r2, [r3, #8]

		K_DEBUG("%p took mutex %p, count: %d, orig prio: %d\n",
			_current, mutex, mutex->lock_count,
			mutex->owner_orig_prio);

		k_sched_unlock();
   16a42:	f000 fec1 	bl	177c8 <k_sched_unlock>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
   16a46:	2300      	movs	r3, #0
   16a48:	e080      	b.n	16b4c <z_impl_k_mutex_lock+0x16c>
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   16a4a:	683b      	ldr	r3, [r7, #0]
   16a4c:	2b00      	cmp	r3, #0
   16a4e:	bf0c      	ite	eq
   16a50:	2301      	moveq	r3, #1
   16a52:	2300      	movne	r3, #0
   16a54:	b2db      	uxtb	r3, r3
   16a56:	2b00      	cmp	r3, #0
   16a58:	d004      	beq.n	16a64 <z_impl_k_mutex_lock+0x84>
		k_sched_unlock();
   16a5a:	f000 feb5 	bl	177c8 <k_sched_unlock>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   16a5e:	f06f 030f 	mvn.w	r3, #15
   16a62:	e073      	b.n	16b4c <z_impl_k_mutex_lock+0x16c>
	}

	new_prio = new_prio_for_inheritance(_current->base.prio,
   16a64:	4b3b      	ldr	r3, [pc, #236]	; (16b54 <z_impl_k_mutex_lock+0x174>)
   16a66:	689b      	ldr	r3, [r3, #8]
   16a68:	f993 300e 	ldrsb.w	r3, [r3, #14]
   16a6c:	461a      	mov	r2, r3
					    mutex->owner->base.prio);
   16a6e:	687b      	ldr	r3, [r7, #4]
   16a70:	689b      	ldr	r3, [r3, #8]
   16a72:	f993 300e 	ldrsb.w	r3, [r3, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   16a76:	4619      	mov	r1, r3
   16a78:	4610      	mov	r0, r2
   16a7a:	f013 fc06 	bl	2a28a <new_prio_for_inheritance>
   16a7e:	6478      	str	r0, [r7, #68]	; 0x44
   16a80:	4b35      	ldr	r3, [pc, #212]	; (16b58 <z_impl_k_mutex_lock+0x178>)
   16a82:	63bb      	str	r3, [r7, #56]	; 0x38
	__asm__ volatile(
   16a84:	f04f 0320 	mov.w	r3, #32
   16a88:	f3ef 8211 	mrs	r2, BASEPRI
   16a8c:	f383 8811 	msr	BASEPRI, r3
   16a90:	f3bf 8f6f 	isb	sy
   16a94:	637a      	str	r2, [r7, #52]	; 0x34
   16a96:	633b      	str	r3, [r7, #48]	; 0x30
	return key;
   16a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	k.key = z_arch_irq_lock();
   16a9a:	60fb      	str	r3, [r7, #12]
	return k;
   16a9c:	68fb      	ldr	r3, [r7, #12]
   16a9e:	61bb      	str	r3, [r7, #24]

	key = k_spin_lock(&lock);

	K_DEBUG("adjusting prio up on mutex %p\n", mutex);

	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   16aa0:	687b      	ldr	r3, [r7, #4]
   16aa2:	689b      	ldr	r3, [r3, #8]
   16aa4:	f993 300e 	ldrsb.w	r3, [r3, #14]
   16aa8:	4619      	mov	r1, r3
   16aaa:	6c78      	ldr	r0, [r7, #68]	; 0x44
   16aac:	f013 fbb1 	bl	2a212 <z_is_prio_higher>
   16ab0:	4603      	mov	r3, r0
   16ab2:	2b00      	cmp	r3, #0
   16ab4:	d003      	beq.n	16abe <z_impl_k_mutex_lock+0xde>
		adjust_owner_prio(mutex, new_prio);
   16ab6:	6c79      	ldr	r1, [r7, #68]	; 0x44
   16ab8:	6878      	ldr	r0, [r7, #4]
   16aba:	f013 fbff 	bl	2a2bc <adjust_owner_prio>
	}

	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   16abe:	687a      	ldr	r2, [r7, #4]
   16ac0:	683b      	ldr	r3, [r7, #0]
   16ac2:	69b9      	ldr	r1, [r7, #24]
   16ac4:	4824      	ldr	r0, [pc, #144]	; (16b58 <z_impl_k_mutex_lock+0x178>)
   16ac6:	f000 fd2f 	bl	17528 <z_pend_curr>
   16aca:	6438      	str	r0, [r7, #64]	; 0x40
	K_DEBUG("on mutex %p got_mutex value: %d\n", mutex, got_mutex);

	K_DEBUG("%p got mutex %p (y/n): %c\n", _current, mutex,
		got_mutex ? 'y' : 'n');

	if (got_mutex == 0) {
   16acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16ace:	2b00      	cmp	r3, #0
   16ad0:	d103      	bne.n	16ada <z_impl_k_mutex_lock+0xfa>
		k_sched_unlock();
   16ad2:	f000 fe79 	bl	177c8 <k_sched_unlock>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return 0;
   16ad6:	2300      	movs	r3, #0
   16ad8:	e038      	b.n	16b4c <z_impl_k_mutex_lock+0x16c>

	/* timed out */

	K_DEBUG("%p timeout on mutex %p\n", _current, mutex);

	struct k_thread *waiter = z_waitq_head(&mutex->wait_q);
   16ada:	687b      	ldr	r3, [r7, #4]
   16adc:	4618      	mov	r0, r3
   16ade:	f013 fbb2 	bl	2a246 <z_waitq_head>
   16ae2:	63f8      	str	r0, [r7, #60]	; 0x3c

	new_prio = mutex->owner_orig_prio;
   16ae4:	687b      	ldr	r3, [r7, #4]
   16ae6:	691b      	ldr	r3, [r3, #16]
   16ae8:	647b      	str	r3, [r7, #68]	; 0x44
	new_prio = (waiter != NULL) ?
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
   16aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16aec:	2b00      	cmp	r3, #0
   16aee:	d008      	beq.n	16b02 <z_impl_k_mutex_lock+0x122>
   16af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16af2:	f993 300e 	ldrsb.w	r3, [r3, #14]
   16af6:	6c79      	ldr	r1, [r7, #68]	; 0x44
   16af8:	4618      	mov	r0, r3
   16afa:	f013 fbc6 	bl	2a28a <new_prio_for_inheritance>
   16afe:	4603      	mov	r3, r0
   16b00:	e000      	b.n	16b04 <z_impl_k_mutex_lock+0x124>
   16b02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	new_prio = (waiter != NULL) ?
   16b04:	647b      	str	r3, [r7, #68]	; 0x44
   16b06:	4b14      	ldr	r3, [pc, #80]	; (16b58 <z_impl_k_mutex_lock+0x178>)
   16b08:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
   16b0a:	f04f 0320 	mov.w	r3, #32
   16b0e:	f3ef 8211 	mrs	r2, BASEPRI
   16b12:	f383 8811 	msr	BASEPRI, r3
   16b16:	f3bf 8f6f 	isb	sy
   16b1a:	623a      	str	r2, [r7, #32]
   16b1c:	61fb      	str	r3, [r7, #28]
	return key;
   16b1e:	6a3b      	ldr	r3, [r7, #32]
	k.key = z_arch_irq_lock();
   16b20:	617b      	str	r3, [r7, #20]
	return k;
   16b22:	697b      	ldr	r3, [r7, #20]
   16b24:	61bb      	str	r3, [r7, #24]
		new_prio;

	K_DEBUG("adjusting prio down on mutex %p\n", mutex);

	key = k_spin_lock(&lock);
	adjust_owner_prio(mutex, new_prio);
   16b26:	6c79      	ldr	r1, [r7, #68]	; 0x44
   16b28:	6878      	ldr	r0, [r7, #4]
   16b2a:	f013 fbc7 	bl	2a2bc <adjust_owner_prio>
   16b2e:	4b0a      	ldr	r3, [pc, #40]	; (16b58 <z_impl_k_mutex_lock+0x178>)
   16b30:	62fb      	str	r3, [r7, #44]	; 0x2c
   16b32:	69bb      	ldr	r3, [r7, #24]
   16b34:	613b      	str	r3, [r7, #16]
	z_arch_irq_unlock(key.key);
   16b36:	693b      	ldr	r3, [r7, #16]
   16b38:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm__ volatile(
   16b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16b3c:	f383 8811 	msr	BASEPRI, r3
   16b40:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	k_sched_unlock();
   16b44:	f000 fe40 	bl	177c8 <k_sched_unlock>

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
   16b48:	f06f 030a 	mvn.w	r3, #10
}
   16b4c:	4618      	mov	r0, r3
   16b4e:	3748      	adds	r7, #72	; 0x48
   16b50:	46bd      	mov	sp, r7
   16b52:	bd80      	pop	{r7, pc}
   16b54:	20006178 	.word	0x20006178
   16b58:	20006178 	.word	0x20006178

00016b5c <z_impl_k_mutex_unlock>:
	return z_impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   16b5c:	b580      	push	{r7, lr}
   16b5e:	b092      	sub	sp, #72	; 0x48
   16b60:	af00      	add	r7, sp, #0
   16b62:	6078      	str	r0, [r7, #4]

	__ASSERT(mutex->lock_count > 0U, "");
	__ASSERT(mutex->owner == _current, "");

	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();
   16b64:	f7ff ff2e 	bl	169c4 <z_sched_lock>

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
   16b68:	687b      	ldr	r3, [r7, #4]
   16b6a:	68db      	ldr	r3, [r3, #12]
   16b6c:	2b01      	cmp	r3, #1
   16b6e:	d005      	beq.n	16b7c <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
   16b70:	687b      	ldr	r3, [r7, #4]
   16b72:	68db      	ldr	r3, [r3, #12]
   16b74:	1e5a      	subs	r2, r3, #1
   16b76:	687b      	ldr	r3, [r7, #4]
   16b78:	60da      	str	r2, [r3, #12]
		goto k_mutex_unlock_return;
   16b7a:	e052      	b.n	16c22 <z_impl_k_mutex_unlock+0xc6>
   16b7c:	4b2c      	ldr	r3, [pc, #176]	; (16c30 <z_impl_k_mutex_unlock+0xd4>)
   16b7e:	643b      	str	r3, [r7, #64]	; 0x40
	__asm__ volatile(
   16b80:	f04f 0320 	mov.w	r3, #32
   16b84:	f3ef 8211 	mrs	r2, BASEPRI
   16b88:	f383 8811 	msr	BASEPRI, r3
   16b8c:	f3bf 8f6f 	isb	sy
   16b90:	63fa      	str	r2, [r7, #60]	; 0x3c
   16b92:	63bb      	str	r3, [r7, #56]	; 0x38
	return key;
   16b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	k.key = z_arch_irq_lock();
   16b96:	60fb      	str	r3, [r7, #12]
	return k;
   16b98:	68fb      	ldr	r3, [r7, #12]
   16b9a:	61bb      	str	r3, [r7, #24]
	}

	k_spinlock_key_t key = k_spin_lock(&lock);

	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   16b9c:	687b      	ldr	r3, [r7, #4]
   16b9e:	691b      	ldr	r3, [r3, #16]
   16ba0:	4619      	mov	r1, r3
   16ba2:	6878      	ldr	r0, [r7, #4]
   16ba4:	f013 fb8a 	bl	2a2bc <adjust_owner_prio>

	new_owner = z_unpend_first_thread(&mutex->wait_q);
   16ba8:	687b      	ldr	r3, [r7, #4]
   16baa:	4618      	mov	r0, r3
   16bac:	f014 fa8d 	bl	2b0ca <z_unpend_first_thread>
   16bb0:	6478      	str	r0, [r7, #68]	; 0x44

	mutex->owner = new_owner;
   16bb2:	687b      	ldr	r3, [r7, #4]
   16bb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   16bb6:	609a      	str	r2, [r3, #8]

	K_DEBUG("new owner of mutex %p: %p (prio: %d)\n",
		mutex, new_owner, new_owner ? new_owner->base.prio : -1000);

	if (new_owner != NULL) {
   16bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16bba:	2b00      	cmp	r3, #0
   16bbc:	d023      	beq.n	16c06 <z_impl_k_mutex_unlock+0xaa>
   16bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16bc0:	627b      	str	r3, [r7, #36]	; 0x24
	if (z_is_thread_ready(thread)) {
   16bc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
   16bc4:	f013 fad6 	bl	2a174 <z_is_thread_ready>
   16bc8:	4603      	mov	r3, r0
   16bca:	2b00      	cmp	r3, #0
   16bcc:	d002      	beq.n	16bd4 <z_impl_k_mutex_unlock+0x78>
		z_add_thread_to_ready_q(thread);
   16bce:	6a78      	ldr	r0, [r7, #36]	; 0x24
   16bd0:	f000 fa8c 	bl	170ec <z_add_thread_to_ready_q>
   16bd4:	4b16      	ldr	r3, [pc, #88]	; (16c30 <z_impl_k_mutex_unlock+0xd4>)
   16bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   16bd8:	69bb      	ldr	r3, [r7, #24]
   16bda:	613b      	str	r3, [r7, #16]
	z_arch_irq_unlock(key.key);
   16bdc:	693b      	ldr	r3, [r7, #16]
   16bde:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm__ volatile(
   16be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16be2:	f383 8811 	msr	BASEPRI, r3
   16be6:	f3bf 8f6f 	isb	sy
   16bea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16bec:	637b      	str	r3, [r7, #52]	; 0x34
   16bee:	2300      	movs	r3, #0
   16bf0:	633b      	str	r3, [r7, #48]	; 0x30
   16bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   16bf6:	669a      	str	r2, [r3, #104]	; 0x68
		/*
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner_orig_prio = new_owner->base.prio;
   16bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16bfa:	f993 300e 	ldrsb.w	r3, [r3, #14]
   16bfe:	461a      	mov	r2, r3
   16c00:	687b      	ldr	r3, [r7, #4]
   16c02:	611a      	str	r2, [r3, #16]
   16c04:	e00d      	b.n	16c22 <z_impl_k_mutex_unlock+0xc6>
	} else {
		mutex->lock_count = 0U;
   16c06:	687b      	ldr	r3, [r7, #4]
   16c08:	2200      	movs	r2, #0
   16c0a:	60da      	str	r2, [r3, #12]
   16c0c:	4b08      	ldr	r3, [pc, #32]	; (16c30 <z_impl_k_mutex_unlock+0xd4>)
   16c0e:	623b      	str	r3, [r7, #32]
   16c10:	69bb      	ldr	r3, [r7, #24]
   16c12:	617b      	str	r3, [r7, #20]
   16c14:	697b      	ldr	r3, [r7, #20]
   16c16:	61fb      	str	r3, [r7, #28]
   16c18:	69fb      	ldr	r3, [r7, #28]
   16c1a:	f383 8811 	msr	BASEPRI, r3
   16c1e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   16c22:	f000 fdd1 	bl	177c8 <k_sched_unlock>
}
   16c26:	bf00      	nop
   16c28:	3748      	adds	r7, #72	; 0x48
   16c2a:	46bd      	mov	sp, r7
   16c2c:	bd80      	pop	{r7, pc}
   16c2e:	bf00      	nop
   16c30:	20006178 	.word	0x20006178

00016c34 <z_add_thread_timeout>:
}

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
   16c34:	b580      	push	{r7, lr}
   16c36:	b082      	sub	sp, #8
   16c38:	af00      	add	r7, sp, #0
   16c3a:	6078      	str	r0, [r7, #4]
   16c3c:	6039      	str	r1, [r7, #0]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   16c3e:	687b      	ldr	r3, [r7, #4]
   16c40:	3318      	adds	r3, #24
   16c42:	683a      	ldr	r2, [r7, #0]
   16c44:	4903      	ldr	r1, [pc, #12]	; (16c54 <z_add_thread_timeout+0x20>)
   16c46:	4618      	mov	r0, r3
   16c48:	f001 fb88 	bl	1835c <z_add_timeout>
}
   16c4c:	bf00      	nop
   16c4e:	3708      	adds	r7, #8
   16c50:	46bd      	mov	sp, r7
   16c52:	bd80      	pop	{r7, pc}
   16c54:	000173e5 	.word	0x000173e5

00016c58 <z_sched_lock>:
{
   16c58:	b480      	push	{r7}
   16c5a:	af00      	add	r7, sp, #0
	--_current->base.sched_locked;
   16c5c:	4b04      	ldr	r3, [pc, #16]	; (16c70 <z_sched_lock+0x18>)
   16c5e:	689b      	ldr	r3, [r3, #8]
   16c60:	7bda      	ldrb	r2, [r3, #15]
   16c62:	3a01      	subs	r2, #1
   16c64:	b2d2      	uxtb	r2, r2
   16c66:	73da      	strb	r2, [r3, #15]
}
   16c68:	bf00      	nop
   16c6a:	46bd      	mov	sp, r7
   16c6c:	bc80      	pop	{r7}
   16c6e:	4770      	bx	lr
   16c70:	20006178 	.word	0x20006178

00016c74 <z_unpend1_no_timeout>:
	return 0;
#endif
}

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
   16c74:	b580      	push	{r7, lr}
   16c76:	b09a      	sub	sp, #104	; 0x68
   16c78:	af00      	add	r7, sp, #0
   16c7a:	6078      	str	r0, [r7, #4]
   16c7c:	687b      	ldr	r3, [r7, #4]
   16c7e:	663b      	str	r3, [r7, #96]	; 0x60
   16c80:	2300      	movs	r3, #0
   16c82:	65fb      	str	r3, [r7, #92]	; 0x5c
ALWAYS_INLINE struct k_thread *z_find_first_thread_to_unpend(_wait_q_t *wait_q,
						     struct k_thread *from)
{
	ARG_UNUSED(from);

	struct k_thread *ret = NULL;
   16c84:	2300      	movs	r3, #0
   16c86:	65bb      	str	r3, [r7, #88]	; 0x58

	LOCKED(&sched_spinlock) {
   16c88:	2300      	movs	r3, #0
   16c8a:	61bb      	str	r3, [r7, #24]
   16c8c:	4b31      	ldr	r3, [pc, #196]	; (16d54 <z_unpend1_no_timeout+0xe0>)
   16c8e:	657b      	str	r3, [r7, #84]	; 0x54
	__asm__ volatile(
   16c90:	f04f 0320 	mov.w	r3, #32
   16c94:	f3ef 8211 	mrs	r2, BASEPRI
   16c98:	f383 8811 	msr	BASEPRI, r3
   16c9c:	f3bf 8f6f 	isb	sy
   16ca0:	653a      	str	r2, [r7, #80]	; 0x50
   16ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
	return key;
   16ca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	k.key = z_arch_irq_lock();
   16ca6:	60fb      	str	r3, [r7, #12]
	return k;
   16ca8:	68fb      	ldr	r3, [r7, #12]
   16caa:	617b      	str	r3, [r7, #20]
   16cac:	e011      	b.n	16cd2 <z_unpend1_no_timeout+0x5e>
		ret = _priq_wait_best(&wait_q->waitq);
   16cae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   16cb0:	4618      	mov	r0, r3
   16cb2:	f014 fa59 	bl	2b168 <z_priq_dumb_best>
   16cb6:	65b8      	str	r0, [r7, #88]	; 0x58
   16cb8:	4b26      	ldr	r3, [pc, #152]	; (16d54 <z_unpend1_no_timeout+0xe0>)
   16cba:	64bb      	str	r3, [r7, #72]	; 0x48
   16cbc:	697b      	ldr	r3, [r7, #20]
   16cbe:	613b      	str	r3, [r7, #16]
	z_arch_irq_unlock(key.key);
   16cc0:	693b      	ldr	r3, [r7, #16]
   16cc2:	647b      	str	r3, [r7, #68]	; 0x44
	__asm__ volatile(
   16cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16cc6:	f383 8811 	msr	BASEPRI, r3
   16cca:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   16cce:	2301      	movs	r3, #1
   16cd0:	61bb      	str	r3, [r7, #24]
   16cd2:	69bb      	ldr	r3, [r7, #24]
   16cd4:	2b00      	cmp	r3, #0
   16cd6:	d0ea      	beq.n	16cae <z_unpend1_no_timeout+0x3a>
	}

	return ret;
   16cd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   16cda:	667b      	str	r3, [r7, #100]	; 0x64

	if (thread != NULL) {
   16cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   16cde:	2b00      	cmp	r3, #0
   16ce0:	d032      	beq.n	16d48 <z_unpend1_no_timeout+0xd4>
   16ce2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   16ce4:	643b      	str	r3, [r7, #64]	; 0x40
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
	LOCKED(&sched_spinlock) {
   16ce6:	2300      	movs	r3, #0
   16ce8:	62bb      	str	r3, [r7, #40]	; 0x28
   16cea:	4b1a      	ldr	r3, [pc, #104]	; (16d54 <z_unpend1_no_timeout+0xe0>)
   16cec:	63fb      	str	r3, [r7, #60]	; 0x3c
	__asm__ volatile(
   16cee:	f04f 0320 	mov.w	r3, #32
   16cf2:	f3ef 8211 	mrs	r2, BASEPRI
   16cf6:	f383 8811 	msr	BASEPRI, r3
   16cfa:	f3bf 8f6f 	isb	sy
   16cfe:	63ba      	str	r2, [r7, #56]	; 0x38
   16d00:	637b      	str	r3, [r7, #52]	; 0x34
	return key;
   16d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	k.key = z_arch_irq_lock();
   16d04:	61fb      	str	r3, [r7, #28]
	return k;
   16d06:	69fb      	ldr	r3, [r7, #28]
   16d08:	627b      	str	r3, [r7, #36]	; 0x24
   16d0a:	e017      	b.n	16d3c <z_unpend1_no_timeout+0xc8>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   16d0c:	6c38      	ldr	r0, [r7, #64]	; 0x40
   16d0e:	f014 f9d1 	bl	2b0b4 <pended_on>
   16d12:	4603      	mov	r3, r0
   16d14:	6c39      	ldr	r1, [r7, #64]	; 0x40
   16d16:	4618      	mov	r0, r3
   16d18:	f000 fd90 	bl	1783c <z_priq_dumb_remove>
		z_mark_thread_as_not_pending(thread);
   16d1c:	6c38      	ldr	r0, [r7, #64]	; 0x40
   16d1e:	f014 f80a 	bl	2ad36 <z_mark_thread_as_not_pending>
   16d22:	4b0c      	ldr	r3, [pc, #48]	; (16d54 <z_unpend1_no_timeout+0xe0>)
   16d24:	633b      	str	r3, [r7, #48]	; 0x30
   16d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16d28:	623b      	str	r3, [r7, #32]
	z_arch_irq_unlock(key.key);
   16d2a:	6a3b      	ldr	r3, [r7, #32]
   16d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
   16d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16d30:	f383 8811 	msr	BASEPRI, r3
   16d34:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   16d38:	2301      	movs	r3, #1
   16d3a:	62bb      	str	r3, [r7, #40]	; 0x28
   16d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16d3e:	2b00      	cmp	r3, #0
   16d40:	d0e4      	beq.n	16d0c <z_unpend1_no_timeout+0x98>
	}

	thread->base.pended_on = NULL;
   16d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16d44:	2200      	movs	r2, #0
   16d46:	609a      	str	r2, [r3, #8]
		z_unpend_thread_no_timeout(thread);
	}

	return thread;
   16d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
   16d4a:	4618      	mov	r0, r3
   16d4c:	3768      	adds	r7, #104	; 0x68
   16d4e:	46bd      	mov	sp, r7
   16d50:	bd80      	pop	{r7, pc}
   16d52:	bf00      	nop
   16d54:	200061a8 	.word	0x200061a8

00016d58 <is_idle>:
{
   16d58:	b480      	push	{r7}
   16d5a:	b083      	sub	sp, #12
   16d5c:	af00      	add	r7, sp, #0
   16d5e:	6078      	str	r0, [r7, #4]
	return thread == _idle_thread;
   16d60:	4b06      	ldr	r3, [pc, #24]	; (16d7c <is_idle+0x24>)
   16d62:	681b      	ldr	r3, [r3, #0]
   16d64:	687a      	ldr	r2, [r7, #4]
   16d66:	429a      	cmp	r2, r3
   16d68:	bf0c      	ite	eq
   16d6a:	2301      	moveq	r3, #1
   16d6c:	2300      	movne	r3, #0
   16d6e:	b2db      	uxtb	r3, r3
}
   16d70:	4618      	mov	r0, r3
   16d72:	370c      	adds	r7, #12
   16d74:	46bd      	mov	sp, r7
   16d76:	bc80      	pop	{r7}
   16d78:	4770      	bx	lr
   16d7a:	bf00      	nop
   16d7c:	0002f054 	.word	0x0002f054

00016d80 <reset_time_slice>:
{
   16d80:	b580      	push	{r7, lr}
   16d82:	af00      	add	r7, sp, #0
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   16d84:	f7fa fc9e 	bl	116c4 <z_clock_elapsed>
   16d88:	4602      	mov	r2, r0
   16d8a:	4b07      	ldr	r3, [pc, #28]	; (16da8 <reset_time_slice+0x28>)
   16d8c:	681b      	ldr	r3, [r3, #0]
   16d8e:	4413      	add	r3, r2
   16d90:	461a      	mov	r2, r3
   16d92:	4b06      	ldr	r3, [pc, #24]	; (16dac <reset_time_slice+0x2c>)
   16d94:	611a      	str	r2, [r3, #16]
	z_set_timeout_expiry(slice_time, false);
   16d96:	4b04      	ldr	r3, [pc, #16]	; (16da8 <reset_time_slice+0x28>)
   16d98:	681b      	ldr	r3, [r3, #0]
   16d9a:	2100      	movs	r1, #0
   16d9c:	4618      	mov	r0, r3
   16d9e:	f001 fc1d 	bl	185dc <z_set_timeout_expiry>
}
   16da2:	bf00      	nop
   16da4:	bd80      	pop	{r7, pc}
   16da6:	bf00      	nop
   16da8:	200061a8 	.word	0x200061a8
   16dac:	20006178 	.word	0x20006178

00016db0 <k_sched_time_slice_set>:
{
   16db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16db4:	b08f      	sub	sp, #60	; 0x3c
   16db6:	af00      	add	r7, sp, #0
   16db8:	60f8      	str	r0, [r7, #12]
   16dba:	60b9      	str	r1, [r7, #8]
	LOCKED(&sched_spinlock) {
   16dbc:	2300      	movs	r3, #0
   16dbe:	61fb      	str	r3, [r7, #28]
   16dc0:	4b62      	ldr	r3, [pc, #392]	; (16f4c <k_sched_time_slice_set+0x19c>)
   16dc2:	637b      	str	r3, [r7, #52]	; 0x34
	__asm__ volatile(
   16dc4:	f04f 0320 	mov.w	r3, #32
   16dc8:	f3ef 8211 	mrs	r2, BASEPRI
   16dcc:	f383 8811 	msr	BASEPRI, r3
   16dd0:	f3bf 8f6f 	isb	sy
   16dd4:	633a      	str	r2, [r7, #48]	; 0x30
   16dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	return key;
   16dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	k.key = z_arch_irq_lock();
   16dda:	613b      	str	r3, [r7, #16]
	return k;
   16ddc:	693b      	ldr	r3, [r7, #16]
   16dde:	61bb      	str	r3, [r7, #24]
   16de0:	e0aa      	b.n	16f38 <k_sched_time_slice_set+0x188>
		_current_cpu->slice_ticks = 0;
   16de2:	4b5b      	ldr	r3, [pc, #364]	; (16f50 <k_sched_time_slice_set+0x1a0>)
   16de4:	2200      	movs	r2, #0
   16de6:	611a      	str	r2, [r3, #16]
   16de8:	68fb      	ldr	r3, [r7, #12]
   16dea:	623b      	str	r3, [r7, #32]
{
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction(
   16dec:	6a3b      	ldr	r3, [r7, #32]
   16dee:	461d      	mov	r5, r3
   16df0:	ea4f 76e5 	mov.w	r6, r5, asr #31
   16df4:	f013 fe6c 	bl	2aad0 <sys_clock_hw_cycles_per_sec>
   16df8:	4603      	mov	r3, r0
   16dfa:	ea4f 74e3 	mov.w	r4, r3, asr #31
   16dfe:	fb03 f106 	mul.w	r1, r3, r6
   16e02:	fb05 f204 	mul.w	r2, r5, r4
   16e06:	440a      	add	r2, r1
   16e08:	fba5 8903 	umull	r8, r9, r5, r3
   16e0c:	eb02 0309 	add.w	r3, r2, r9
   16e10:	4699      	mov	r9, r3
   16e12:	f013 fe5d 	bl	2aad0 <sys_clock_hw_cycles_per_sec>
   16e16:	4603      	mov	r3, r0
   16e18:	4619      	mov	r1, r3
   16e1a:	ea4f 72e1 	mov.w	r2, r1, asr #31
   16e1e:	460b      	mov	r3, r1
   16e20:	4614      	mov	r4, r2
   16e22:	f04f 0500 	mov.w	r5, #0
   16e26:	f04f 0600 	mov.w	r6, #0
   16e2a:	0166      	lsls	r6, r4, #5
   16e2c:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
   16e30:	015d      	lsls	r5, r3, #5
   16e32:	462b      	mov	r3, r5
   16e34:	4634      	mov	r4, r6
   16e36:	1a5b      	subs	r3, r3, r1
   16e38:	eb64 0402 	sbc.w	r4, r4, r2
   16e3c:	f04f 0500 	mov.w	r5, #0
   16e40:	f04f 0600 	mov.w	r6, #0
   16e44:	00a6      	lsls	r6, r4, #2
   16e46:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
   16e4a:	009d      	lsls	r5, r3, #2
   16e4c:	462b      	mov	r3, r5
   16e4e:	4634      	mov	r4, r6
   16e50:	185b      	adds	r3, r3, r1
   16e52:	eb42 0404 	adc.w	r4, r2, r4
   16e56:	f04f 0100 	mov.w	r1, #0
   16e5a:	f04f 0200 	mov.w	r2, #0
   16e5e:	00e2      	lsls	r2, r4, #3
   16e60:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   16e64:	00d9      	lsls	r1, r3, #3
   16e66:	460b      	mov	r3, r1
   16e68:	4614      	mov	r4, r2
   16e6a:	4618      	mov	r0, r3
   16e6c:	4621      	mov	r1, r4
   16e6e:	f04f 0264 	mov.w	r2, #100	; 0x64
   16e72:	f04f 0300 	mov.w	r3, #0
   16e76:	f7e9 fc17 	bl	6a8 <__aeabi_ldivmod>
   16e7a:	4603      	mov	r3, r0
   16e7c:	460c      	mov	r4, r1
   16e7e:	eb18 0a03 	adds.w	sl, r8, r3
   16e82:	eb49 0b04 	adc.w	fp, r9, r4
   16e86:	f11a 33ff 	adds.w	r3, sl, #4294967295	; 0xffffffff
   16e8a:	603b      	str	r3, [r7, #0]
   16e8c:	f14b 33ff 	adc.w	r3, fp, #4294967295	; 0xffffffff
   16e90:	607b      	str	r3, [r7, #4]
   16e92:	f013 fe1d 	bl	2aad0 <sys_clock_hw_cycles_per_sec>
   16e96:	4603      	mov	r3, r0
   16e98:	4619      	mov	r1, r3
   16e9a:	ea4f 72e1 	mov.w	r2, r1, asr #31
   16e9e:	460b      	mov	r3, r1
   16ea0:	4614      	mov	r4, r2
   16ea2:	f04f 0500 	mov.w	r5, #0
   16ea6:	f04f 0600 	mov.w	r6, #0
   16eaa:	0166      	lsls	r6, r4, #5
   16eac:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
   16eb0:	015d      	lsls	r5, r3, #5
   16eb2:	462b      	mov	r3, r5
   16eb4:	4634      	mov	r4, r6
   16eb6:	1a5b      	subs	r3, r3, r1
   16eb8:	eb64 0402 	sbc.w	r4, r4, r2
   16ebc:	f04f 0500 	mov.w	r5, #0
   16ec0:	f04f 0600 	mov.w	r6, #0
   16ec4:	00a6      	lsls	r6, r4, #2
   16ec6:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
   16eca:	009d      	lsls	r5, r3, #2
   16ecc:	462b      	mov	r3, r5
   16ece:	4634      	mov	r4, r6
   16ed0:	185b      	adds	r3, r3, r1
   16ed2:	eb42 0404 	adc.w	r4, r2, r4
   16ed6:	f04f 0100 	mov.w	r1, #0
   16eda:	f04f 0200 	mov.w	r2, #0
   16ede:	00e2      	lsls	r2, r4, #3
   16ee0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   16ee4:	00d9      	lsls	r1, r3, #3
   16ee6:	460b      	mov	r3, r1
   16ee8:	4614      	mov	r4, r2
   16eea:	4618      	mov	r0, r3
   16eec:	4621      	mov	r1, r4
   16eee:	f04f 0264 	mov.w	r2, #100	; 0x64
   16ef2:	f04f 0300 	mov.w	r3, #0
   16ef6:	f7e9 fbd7 	bl	6a8 <__aeabi_ldivmod>
   16efa:	4603      	mov	r3, r0
   16efc:	460c      	mov	r4, r1
   16efe:	461a      	mov	r2, r3
   16f00:	4623      	mov	r3, r4
   16f02:	e9d7 0100 	ldrd	r0, r1, [r7]
   16f06:	f7e9 fbcf 	bl	6a8 <__aeabi_ldivmod>
   16f0a:	4603      	mov	r3, r0
   16f0c:	460c      	mov	r4, r1
   16f0e:	461a      	mov	r2, r3
		slice_time = z_ms_to_ticks(slice);
   16f10:	4b10      	ldr	r3, [pc, #64]	; (16f54 <k_sched_time_slice_set+0x1a4>)
   16f12:	601a      	str	r2, [r3, #0]
		slice_max_prio = prio;
   16f14:	4a10      	ldr	r2, [pc, #64]	; (16f58 <k_sched_time_slice_set+0x1a8>)
   16f16:	68bb      	ldr	r3, [r7, #8]
   16f18:	6013      	str	r3, [r2, #0]
		reset_time_slice();
   16f1a:	f7ff ff31 	bl	16d80 <reset_time_slice>
   16f1e:	4b0b      	ldr	r3, [pc, #44]	; (16f4c <k_sched_time_slice_set+0x19c>)
   16f20:	62bb      	str	r3, [r7, #40]	; 0x28
   16f22:	69bb      	ldr	r3, [r7, #24]
   16f24:	617b      	str	r3, [r7, #20]
	z_arch_irq_unlock(key.key);
   16f26:	697b      	ldr	r3, [r7, #20]
   16f28:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
   16f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16f2c:	f383 8811 	msr	BASEPRI, r3
   16f30:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   16f34:	2301      	movs	r3, #1
   16f36:	61fb      	str	r3, [r7, #28]
   16f38:	69fb      	ldr	r3, [r7, #28]
   16f3a:	2b00      	cmp	r3, #0
   16f3c:	f43f af51 	beq.w	16de2 <k_sched_time_slice_set+0x32>
}
   16f40:	bf00      	nop
   16f42:	373c      	adds	r7, #60	; 0x3c
   16f44:	46bd      	mov	sp, r7
   16f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f4a:	bf00      	nop
   16f4c:	200061a8 	.word	0x200061a8
   16f50:	20006178 	.word	0x20006178
   16f54:	200061a8 	.word	0x200061a8
   16f58:	200061ac 	.word	0x200061ac

00016f5c <sliceable>:
{
   16f5c:	b580      	push	{r7, lr}
   16f5e:	b082      	sub	sp, #8
   16f60:	af00      	add	r7, sp, #0
   16f62:	6078      	str	r0, [r7, #4]
	return is_preempt(t)
   16f64:	6878      	ldr	r0, [r7, #4]
   16f66:	f013 ff82 	bl	2ae6e <is_preempt>
   16f6a:	4603      	mov	r3, r0
		&& !z_is_thread_timeout_active(t);
   16f6c:	2b00      	cmp	r3, #0
   16f6e:	d023      	beq.n	16fb8 <sliceable+0x5c>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
   16f70:	687b      	ldr	r3, [r7, #4]
   16f72:	f993 300e 	ldrsb.w	r3, [r3, #14]
   16f76:	461a      	mov	r2, r3
   16f78:	4b12      	ldr	r3, [pc, #72]	; (16fc4 <sliceable+0x68>)
   16f7a:	681b      	ldr	r3, [r3, #0]
   16f7c:	4619      	mov	r1, r3
   16f7e:	4610      	mov	r0, r2
   16f80:	f013 ff38 	bl	2adf4 <z_is_prio_higher>
   16f84:	4603      	mov	r3, r0
   16f86:	f083 0301 	eor.w	r3, r3, #1
   16f8a:	b2db      	uxtb	r3, r3
   16f8c:	2b00      	cmp	r3, #0
   16f8e:	d013      	beq.n	16fb8 <sliceable+0x5c>
		&& !is_idle(t)
   16f90:	6878      	ldr	r0, [r7, #4]
   16f92:	f7ff fee1 	bl	16d58 <is_idle>
   16f96:	4603      	mov	r3, r0
   16f98:	f083 0301 	eor.w	r3, r3, #1
   16f9c:	b2db      	uxtb	r3, r3
   16f9e:	2b00      	cmp	r3, #0
   16fa0:	d00a      	beq.n	16fb8 <sliceable+0x5c>
		&& !z_is_thread_timeout_active(t);
   16fa2:	6878      	ldr	r0, [r7, #4]
   16fa4:	f013 fe2d 	bl	2ac02 <z_is_thread_timeout_active>
   16fa8:	4603      	mov	r3, r0
   16faa:	f083 0301 	eor.w	r3, r3, #1
   16fae:	b2db      	uxtb	r3, r3
   16fb0:	2b00      	cmp	r3, #0
   16fb2:	d001      	beq.n	16fb8 <sliceable+0x5c>
   16fb4:	2301      	movs	r3, #1
   16fb6:	e000      	b.n	16fba <sliceable+0x5e>
   16fb8:	2300      	movs	r3, #0
}
   16fba:	4618      	mov	r0, r3
   16fbc:	3708      	adds	r7, #8
   16fbe:	46bd      	mov	sp, r7
   16fc0:	bd80      	pop	{r7, pc}
   16fc2:	bf00      	nop
   16fc4:	200061ac 	.word	0x200061ac

00016fc8 <z_time_slice>:
{
   16fc8:	b580      	push	{r7, lr}
   16fca:	b082      	sub	sp, #8
   16fcc:	af00      	add	r7, sp, #0
   16fce:	6078      	str	r0, [r7, #4]
	if (pending_current == _current) {
   16fd0:	4b18      	ldr	r3, [pc, #96]	; (17034 <z_time_slice+0x6c>)
   16fd2:	689a      	ldr	r2, [r3, #8]
   16fd4:	4b18      	ldr	r3, [pc, #96]	; (17038 <z_time_slice+0x70>)
   16fd6:	681b      	ldr	r3, [r3, #0]
   16fd8:	429a      	cmp	r2, r3
   16fda:	d102      	bne.n	16fe2 <z_time_slice+0x1a>
		reset_time_slice();
   16fdc:	f7ff fed0 	bl	16d80 <reset_time_slice>
		return;
   16fe0:	e025      	b.n	1702e <z_time_slice+0x66>
	pending_current = NULL;
   16fe2:	4b15      	ldr	r3, [pc, #84]	; (17038 <z_time_slice+0x70>)
   16fe4:	2200      	movs	r2, #0
   16fe6:	601a      	str	r2, [r3, #0]
	if (slice_time && sliceable(_current)) {
   16fe8:	4b14      	ldr	r3, [pc, #80]	; (1703c <z_time_slice+0x74>)
   16fea:	681b      	ldr	r3, [r3, #0]
   16fec:	2b00      	cmp	r3, #0
   16fee:	d01b      	beq.n	17028 <z_time_slice+0x60>
   16ff0:	4b10      	ldr	r3, [pc, #64]	; (17034 <z_time_slice+0x6c>)
   16ff2:	689b      	ldr	r3, [r3, #8]
   16ff4:	4618      	mov	r0, r3
   16ff6:	f7ff ffb1 	bl	16f5c <sliceable>
   16ffa:	4603      	mov	r3, r0
   16ffc:	2b00      	cmp	r3, #0
   16ffe:	d013      	beq.n	17028 <z_time_slice+0x60>
		if (ticks >= _current_cpu->slice_ticks) {
   17000:	4b0c      	ldr	r3, [pc, #48]	; (17034 <z_time_slice+0x6c>)
   17002:	691b      	ldr	r3, [r3, #16]
   17004:	687a      	ldr	r2, [r7, #4]
   17006:	429a      	cmp	r2, r3
   17008:	db07      	blt.n	1701a <z_time_slice+0x52>
			z_move_thread_to_end_of_prio_q(_current);
   1700a:	4b0a      	ldr	r3, [pc, #40]	; (17034 <z_time_slice+0x6c>)
   1700c:	689b      	ldr	r3, [r3, #8]
   1700e:	4618      	mov	r0, r3
   17010:	f000 f8e0 	bl	171d4 <z_move_thread_to_end_of_prio_q>
			reset_time_slice();
   17014:	f7ff feb4 	bl	16d80 <reset_time_slice>
		if (ticks >= _current_cpu->slice_ticks) {
   17018:	e009      	b.n	1702e <z_time_slice+0x66>
			_current_cpu->slice_ticks -= ticks;
   1701a:	4b06      	ldr	r3, [pc, #24]	; (17034 <z_time_slice+0x6c>)
   1701c:	691a      	ldr	r2, [r3, #16]
   1701e:	687b      	ldr	r3, [r7, #4]
   17020:	1ad3      	subs	r3, r2, r3
   17022:	4a04      	ldr	r2, [pc, #16]	; (17034 <z_time_slice+0x6c>)
   17024:	6113      	str	r3, [r2, #16]
		if (ticks >= _current_cpu->slice_ticks) {
   17026:	e002      	b.n	1702e <z_time_slice+0x66>
		_current_cpu->slice_ticks = 0;
   17028:	4b02      	ldr	r3, [pc, #8]	; (17034 <z_time_slice+0x6c>)
   1702a:	2200      	movs	r2, #0
   1702c:	611a      	str	r2, [r3, #16]
}
   1702e:	3708      	adds	r7, #8
   17030:	46bd      	mov	sp, r7
   17032:	bd80      	pop	{r7, pc}
   17034:	20006178 	.word	0x20006178
   17038:	200061b0 	.word	0x200061b0
   1703c:	200061a8 	.word	0x200061a8

00017040 <update_cache>:
{
   17040:	b580      	push	{r7, lr}
   17042:	b086      	sub	sp, #24
   17044:	af00      	add	r7, sp, #0
   17046:	6078      	str	r0, [r7, #4]
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   17048:	4826      	ldr	r0, [pc, #152]	; (170e4 <update_cache+0xa4>)
   1704a:	f014 f88d 	bl	2b168 <z_priq_dumb_best>
   1704e:	60b8      	str	r0, [r7, #8]
	return th ? th : _current_cpu->idle_thread;
   17050:	68bb      	ldr	r3, [r7, #8]
   17052:	2b00      	cmp	r3, #0
   17054:	d102      	bne.n	1705c <update_cache+0x1c>
   17056:	4b24      	ldr	r3, [pc, #144]	; (170e8 <update_cache+0xa8>)
   17058:	68db      	ldr	r3, [r3, #12]
   1705a:	e000      	b.n	1705e <update_cache+0x1e>
   1705c:	68bb      	ldr	r3, [r7, #8]
	struct k_thread *th = next_up();
   1705e:	617b      	str	r3, [r7, #20]
   17060:	697b      	ldr	r3, [r7, #20]
   17062:	613b      	str	r3, [r7, #16]
   17064:	687b      	ldr	r3, [r7, #4]
   17066:	60fb      	str	r3, [r7, #12]
	if (preempt_ok != 0) {
   17068:	68fb      	ldr	r3, [r7, #12]
   1706a:	2b00      	cmp	r3, #0
   1706c:	d001      	beq.n	17072 <update_cache+0x32>
		return true;
   1706e:	2301      	movs	r3, #1
   17070:	e022      	b.n	170b8 <update_cache+0x78>
	if (z_is_thread_prevented_from_running(_current)) {
   17072:	4b1d      	ldr	r3, [pc, #116]	; (170e8 <update_cache+0xa8>)
   17074:	689b      	ldr	r3, [r3, #8]
   17076:	4618      	mov	r0, r3
   17078:	f013 fdaf 	bl	2abda <z_is_thread_prevented_from_running>
   1707c:	4603      	mov	r3, r0
   1707e:	2b00      	cmp	r3, #0
   17080:	d001      	beq.n	17086 <update_cache+0x46>
		return true;
   17082:	2301      	movs	r3, #1
   17084:	e018      	b.n	170b8 <update_cache+0x78>
	    && z_is_thread_timeout_active(th)) {
   17086:	6938      	ldr	r0, [r7, #16]
   17088:	f013 fdbb 	bl	2ac02 <z_is_thread_timeout_active>
   1708c:	4603      	mov	r3, r0
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1708e:	2b00      	cmp	r3, #0
   17090:	d001      	beq.n	17096 <update_cache+0x56>
		return true;
   17092:	2301      	movs	r3, #1
   17094:	e010      	b.n	170b8 <update_cache+0x78>
	if (is_preempt(_current) || is_metairq(th)) {
   17096:	4b14      	ldr	r3, [pc, #80]	; (170e8 <update_cache+0xa8>)
   17098:	689b      	ldr	r3, [r3, #8]
   1709a:	4618      	mov	r0, r3
   1709c:	f013 fee7 	bl	2ae6e <is_preempt>
   170a0:	4603      	mov	r3, r0
   170a2:	2b00      	cmp	r3, #0
   170a4:	d105      	bne.n	170b2 <update_cache+0x72>
   170a6:	6938      	ldr	r0, [r7, #16]
   170a8:	f013 fef1 	bl	2ae8e <is_metairq>
   170ac:	4603      	mov	r3, r0
   170ae:	2b00      	cmp	r3, #0
   170b0:	d001      	beq.n	170b6 <update_cache+0x76>
		return true;
   170b2:	2301      	movs	r3, #1
   170b4:	e000      	b.n	170b8 <update_cache+0x78>
	return false;
   170b6:	2300      	movs	r3, #0
	if (should_preempt(th, preempt_ok)) {
   170b8:	2b00      	cmp	r3, #0
   170ba:	d00a      	beq.n	170d2 <update_cache+0x92>
		if (th != _current) {
   170bc:	4b0a      	ldr	r3, [pc, #40]	; (170e8 <update_cache+0xa8>)
   170be:	689b      	ldr	r3, [r3, #8]
   170c0:	697a      	ldr	r2, [r7, #20]
   170c2:	429a      	cmp	r2, r3
   170c4:	d001      	beq.n	170ca <update_cache+0x8a>
			reset_time_slice();
   170c6:	f7ff fe5b 	bl	16d80 <reset_time_slice>
		_kernel.ready_q.cache = th;
   170ca:	4a07      	ldr	r2, [pc, #28]	; (170e8 <update_cache+0xa8>)
   170cc:	697b      	ldr	r3, [r7, #20]
   170ce:	6253      	str	r3, [r2, #36]	; 0x24
}
   170d0:	e003      	b.n	170da <update_cache+0x9a>
		_kernel.ready_q.cache = _current;
   170d2:	4b05      	ldr	r3, [pc, #20]	; (170e8 <update_cache+0xa8>)
   170d4:	689b      	ldr	r3, [r3, #8]
   170d6:	4a04      	ldr	r2, [pc, #16]	; (170e8 <update_cache+0xa8>)
   170d8:	6253      	str	r3, [r2, #36]	; 0x24
}
   170da:	bf00      	nop
   170dc:	3718      	adds	r7, #24
   170de:	46bd      	mov	sp, r7
   170e0:	bd80      	pop	{r7, pc}
   170e2:	bf00      	nop
   170e4:	200061a0 	.word	0x200061a0
   170e8:	20006178 	.word	0x20006178

000170ec <z_add_thread_to_ready_q>:
{
   170ec:	b580      	push	{r7, lr}
   170ee:	b08e      	sub	sp, #56	; 0x38
   170f0:	af00      	add	r7, sp, #0
   170f2:	6078      	str	r0, [r7, #4]
	LOCKED(&sched_spinlock) {
   170f4:	2300      	movs	r3, #0
   170f6:	617b      	str	r3, [r7, #20]
   170f8:	4b34      	ldr	r3, [pc, #208]	; (171cc <z_add_thread_to_ready_q+0xe0>)
   170fa:	637b      	str	r3, [r7, #52]	; 0x34
	__asm__ volatile(
   170fc:	f04f 0320 	mov.w	r3, #32
   17100:	f3ef 8211 	mrs	r2, BASEPRI
   17104:	f383 8811 	msr	BASEPRI, r3
   17108:	f3bf 8f6f 	isb	sy
   1710c:	633a      	str	r2, [r7, #48]	; 0x30
   1710e:	62fb      	str	r3, [r7, #44]	; 0x2c
	return key;
   17110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	k.key = z_arch_irq_lock();
   17112:	60bb      	str	r3, [r7, #8]
	return k;
   17114:	68bb      	ldr	r3, [r7, #8]
   17116:	613b      	str	r3, [r7, #16]
   17118:	e050      	b.n	171bc <z_add_thread_to_ready_q+0xd0>
   1711a:	4b2d      	ldr	r3, [pc, #180]	; (171d0 <z_add_thread_to_ready_q+0xe4>)
   1711c:	623b      	str	r3, [r7, #32]
   1711e:	687b      	ldr	r3, [r7, #4]
   17120:	61fb      	str	r3, [r7, #28]
{
	struct k_thread *t;

	__ASSERT_NO_MSG(!is_idle(thread));

	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17122:	6a38      	ldr	r0, [r7, #32]
   17124:	f013 fc57 	bl	2a9d6 <sys_dlist_peek_head>
   17128:	4603      	mov	r3, r0
   1712a:	2b00      	cmp	r3, #0
   1712c:	d004      	beq.n	17138 <z_add_thread_to_ready_q+0x4c>
   1712e:	6a38      	ldr	r0, [r7, #32]
   17130:	f013 fc51 	bl	2a9d6 <sys_dlist_peek_head>
   17134:	4603      	mov	r3, r0
   17136:	e000      	b.n	1713a <z_add_thread_to_ready_q+0x4e>
   17138:	2300      	movs	r3, #0
   1713a:	61bb      	str	r3, [r7, #24]
   1713c:	e023      	b.n	17186 <z_add_thread_to_ready_q+0x9a>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
   1713e:	69b9      	ldr	r1, [r7, #24]
   17140:	69f8      	ldr	r0, [r7, #28]
   17142:	f013 feae 	bl	2aea2 <z_is_t1_higher_prio_than_t2>
   17146:	4603      	mov	r3, r0
   17148:	2b00      	cmp	r3, #0
   1714a:	d006      	beq.n	1715a <z_add_thread_to_ready_q+0x6e>
			sys_dlist_insert(&t->base.qnode_dlist,
   1714c:	69bb      	ldr	r3, [r7, #24]
   1714e:	69fa      	ldr	r2, [r7, #28]
   17150:	4611      	mov	r1, r2
   17152:	4618      	mov	r0, r3
   17154:	f013 fc8f 	bl	2aa76 <sys_dlist_insert>
   17158:	e01d      	b.n	17196 <z_add_thread_to_ready_q+0xaa>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1715a:	69bb      	ldr	r3, [r7, #24]
   1715c:	2b00      	cmp	r3, #0
   1715e:	d010      	beq.n	17182 <z_add_thread_to_ready_q+0x96>
   17160:	69bb      	ldr	r3, [r7, #24]
   17162:	4619      	mov	r1, r3
   17164:	6a38      	ldr	r0, [r7, #32]
   17166:	f013 fc5b 	bl	2aa20 <sys_dlist_peek_next>
   1716a:	4603      	mov	r3, r0
   1716c:	2b00      	cmp	r3, #0
   1716e:	d006      	beq.n	1717e <z_add_thread_to_ready_q+0x92>
   17170:	69bb      	ldr	r3, [r7, #24]
   17172:	4619      	mov	r1, r3
   17174:	6a38      	ldr	r0, [r7, #32]
   17176:	f013 fc53 	bl	2aa20 <sys_dlist_peek_next>
   1717a:	4603      	mov	r3, r0
   1717c:	e002      	b.n	17184 <z_add_thread_to_ready_q+0x98>
   1717e:	2300      	movs	r3, #0
   17180:	e000      	b.n	17184 <z_add_thread_to_ready_q+0x98>
   17182:	2300      	movs	r3, #0
   17184:	61bb      	str	r3, [r7, #24]
   17186:	69bb      	ldr	r3, [r7, #24]
   17188:	2b00      	cmp	r3, #0
   1718a:	d1d8      	bne.n	1713e <z_add_thread_to_ready_q+0x52>
					 &thread->base.qnode_dlist);
			return;
		}
	}

	sys_dlist_append(pq, &thread->base.qnode_dlist);
   1718c:	69fb      	ldr	r3, [r7, #28]
   1718e:	4619      	mov	r1, r3
   17190:	6a38      	ldr	r0, [r7, #32]
   17192:	f013 fc58 	bl	2aa46 <sys_dlist_append>
		z_mark_thread_as_queued(thread);
   17196:	6878      	ldr	r0, [r7, #4]
   17198:	f013 fe03 	bl	2ada2 <z_mark_thread_as_queued>
		update_cache(0);
   1719c:	2000      	movs	r0, #0
   1719e:	f7ff ff4f 	bl	17040 <update_cache>
   171a2:	4b0a      	ldr	r3, [pc, #40]	; (171cc <z_add_thread_to_ready_q+0xe0>)
   171a4:	62bb      	str	r3, [r7, #40]	; 0x28
   171a6:	693b      	ldr	r3, [r7, #16]
   171a8:	60fb      	str	r3, [r7, #12]
	z_arch_irq_unlock(key.key);
   171aa:	68fb      	ldr	r3, [r7, #12]
   171ac:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
   171ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   171b0:	f383 8811 	msr	BASEPRI, r3
   171b4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   171b8:	2301      	movs	r3, #1
   171ba:	617b      	str	r3, [r7, #20]
   171bc:	697b      	ldr	r3, [r7, #20]
   171be:	2b00      	cmp	r3, #0
   171c0:	d0ab      	beq.n	1711a <z_add_thread_to_ready_q+0x2e>
}
   171c2:	bf00      	nop
   171c4:	3738      	adds	r7, #56	; 0x38
   171c6:	46bd      	mov	sp, r7
   171c8:	bd80      	pop	{r7, pc}
   171ca:	bf00      	nop
   171cc:	200061a8 	.word	0x200061a8
   171d0:	200061a0 	.word	0x200061a0

000171d4 <z_move_thread_to_end_of_prio_q>:
{
   171d4:	b580      	push	{r7, lr}
   171d6:	b08e      	sub	sp, #56	; 0x38
   171d8:	af00      	add	r7, sp, #0
   171da:	6078      	str	r0, [r7, #4]
	LOCKED(&sched_spinlock) {
   171dc:	2300      	movs	r3, #0
   171de:	617b      	str	r3, [r7, #20]
   171e0:	4b3a      	ldr	r3, [pc, #232]	; (172cc <z_move_thread_to_end_of_prio_q+0xf8>)
   171e2:	637b      	str	r3, [r7, #52]	; 0x34
	__asm__ volatile(
   171e4:	f04f 0320 	mov.w	r3, #32
   171e8:	f3ef 8211 	mrs	r2, BASEPRI
   171ec:	f383 8811 	msr	BASEPRI, r3
   171f0:	f3bf 8f6f 	isb	sy
   171f4:	633a      	str	r2, [r7, #48]	; 0x30
   171f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	return key;
   171f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	k.key = z_arch_irq_lock();
   171fa:	60bb      	str	r3, [r7, #8]
	return k;
   171fc:	68bb      	ldr	r3, [r7, #8]
   171fe:	613b      	str	r3, [r7, #16]
   17200:	e05c      	b.n	172bc <z_move_thread_to_end_of_prio_q+0xe8>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   17202:	6879      	ldr	r1, [r7, #4]
   17204:	4832      	ldr	r0, [pc, #200]	; (172d0 <z_move_thread_to_end_of_prio_q+0xfc>)
   17206:	f000 fb19 	bl	1783c <z_priq_dumb_remove>
   1720a:	4b31      	ldr	r3, [pc, #196]	; (172d0 <z_move_thread_to_end_of_prio_q+0xfc>)
   1720c:	623b      	str	r3, [r7, #32]
   1720e:	687b      	ldr	r3, [r7, #4]
   17210:	61fb      	str	r3, [r7, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17212:	6a38      	ldr	r0, [r7, #32]
   17214:	f013 fbdf 	bl	2a9d6 <sys_dlist_peek_head>
   17218:	4603      	mov	r3, r0
   1721a:	2b00      	cmp	r3, #0
   1721c:	d004      	beq.n	17228 <z_move_thread_to_end_of_prio_q+0x54>
   1721e:	6a38      	ldr	r0, [r7, #32]
   17220:	f013 fbd9 	bl	2a9d6 <sys_dlist_peek_head>
   17224:	4603      	mov	r3, r0
   17226:	e000      	b.n	1722a <z_move_thread_to_end_of_prio_q+0x56>
   17228:	2300      	movs	r3, #0
   1722a:	61bb      	str	r3, [r7, #24]
   1722c:	e023      	b.n	17276 <z_move_thread_to_end_of_prio_q+0xa2>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
   1722e:	69b9      	ldr	r1, [r7, #24]
   17230:	69f8      	ldr	r0, [r7, #28]
   17232:	f013 fe36 	bl	2aea2 <z_is_t1_higher_prio_than_t2>
   17236:	4603      	mov	r3, r0
   17238:	2b00      	cmp	r3, #0
   1723a:	d006      	beq.n	1724a <z_move_thread_to_end_of_prio_q+0x76>
			sys_dlist_insert(&t->base.qnode_dlist,
   1723c:	69bb      	ldr	r3, [r7, #24]
   1723e:	69fa      	ldr	r2, [r7, #28]
   17240:	4611      	mov	r1, r2
   17242:	4618      	mov	r0, r3
   17244:	f013 fc17 	bl	2aa76 <sys_dlist_insert>
   17248:	e01d      	b.n	17286 <z_move_thread_to_end_of_prio_q+0xb2>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1724a:	69bb      	ldr	r3, [r7, #24]
   1724c:	2b00      	cmp	r3, #0
   1724e:	d010      	beq.n	17272 <z_move_thread_to_end_of_prio_q+0x9e>
   17250:	69bb      	ldr	r3, [r7, #24]
   17252:	4619      	mov	r1, r3
   17254:	6a38      	ldr	r0, [r7, #32]
   17256:	f013 fbe3 	bl	2aa20 <sys_dlist_peek_next>
   1725a:	4603      	mov	r3, r0
   1725c:	2b00      	cmp	r3, #0
   1725e:	d006      	beq.n	1726e <z_move_thread_to_end_of_prio_q+0x9a>
   17260:	69bb      	ldr	r3, [r7, #24]
   17262:	4619      	mov	r1, r3
   17264:	6a38      	ldr	r0, [r7, #32]
   17266:	f013 fbdb 	bl	2aa20 <sys_dlist_peek_next>
   1726a:	4603      	mov	r3, r0
   1726c:	e002      	b.n	17274 <z_move_thread_to_end_of_prio_q+0xa0>
   1726e:	2300      	movs	r3, #0
   17270:	e000      	b.n	17274 <z_move_thread_to_end_of_prio_q+0xa0>
   17272:	2300      	movs	r3, #0
   17274:	61bb      	str	r3, [r7, #24]
   17276:	69bb      	ldr	r3, [r7, #24]
   17278:	2b00      	cmp	r3, #0
   1727a:	d1d8      	bne.n	1722e <z_move_thread_to_end_of_prio_q+0x5a>
	sys_dlist_append(pq, &thread->base.qnode_dlist);
   1727c:	69fb      	ldr	r3, [r7, #28]
   1727e:	4619      	mov	r1, r3
   17280:	6a38      	ldr	r0, [r7, #32]
   17282:	f013 fbe0 	bl	2aa46 <sys_dlist_append>
		z_mark_thread_as_queued(thread);
   17286:	6878      	ldr	r0, [r7, #4]
   17288:	f013 fd8b 	bl	2ada2 <z_mark_thread_as_queued>
		update_cache(thread == _current);
   1728c:	4b11      	ldr	r3, [pc, #68]	; (172d4 <z_move_thread_to_end_of_prio_q+0x100>)
   1728e:	689b      	ldr	r3, [r3, #8]
   17290:	687a      	ldr	r2, [r7, #4]
   17292:	429a      	cmp	r2, r3
   17294:	bf0c      	ite	eq
   17296:	2301      	moveq	r3, #1
   17298:	2300      	movne	r3, #0
   1729a:	b2db      	uxtb	r3, r3
   1729c:	4618      	mov	r0, r3
   1729e:	f7ff fecf 	bl	17040 <update_cache>
   172a2:	4b0a      	ldr	r3, [pc, #40]	; (172cc <z_move_thread_to_end_of_prio_q+0xf8>)
   172a4:	62bb      	str	r3, [r7, #40]	; 0x28
   172a6:	693b      	ldr	r3, [r7, #16]
   172a8:	60fb      	str	r3, [r7, #12]
	z_arch_irq_unlock(key.key);
   172aa:	68fb      	ldr	r3, [r7, #12]
   172ac:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
   172ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   172b0:	f383 8811 	msr	BASEPRI, r3
   172b4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   172b8:	2301      	movs	r3, #1
   172ba:	617b      	str	r3, [r7, #20]
   172bc:	697b      	ldr	r3, [r7, #20]
   172be:	2b00      	cmp	r3, #0
   172c0:	d09f      	beq.n	17202 <z_move_thread_to_end_of_prio_q+0x2e>
}
   172c2:	bf00      	nop
   172c4:	3738      	adds	r7, #56	; 0x38
   172c6:	46bd      	mov	sp, r7
   172c8:	bd80      	pop	{r7, pc}
   172ca:	bf00      	nop
   172cc:	200061a8 	.word	0x200061a8
   172d0:	200061a0 	.word	0x200061a0
   172d4:	20006178 	.word	0x20006178

000172d8 <z_remove_thread_from_ready_q>:
{
   172d8:	b580      	push	{r7, lr}
   172da:	b08c      	sub	sp, #48	; 0x30
   172dc:	af00      	add	r7, sp, #0
   172de:	6078      	str	r0, [r7, #4]
	LOCKED(&sched_spinlock) {
   172e0:	2300      	movs	r3, #0
   172e2:	61bb      	str	r3, [r7, #24]
   172e4:	4b1e      	ldr	r3, [pc, #120]	; (17360 <z_remove_thread_from_ready_q+0x88>)
   172e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
   172e8:	f04f 0320 	mov.w	r3, #32
   172ec:	f3ef 8211 	mrs	r2, BASEPRI
   172f0:	f383 8811 	msr	BASEPRI, r3
   172f4:	f3bf 8f6f 	isb	sy
   172f8:	62ba      	str	r2, [r7, #40]	; 0x28
   172fa:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
   172fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = z_arch_irq_lock();
   172fe:	60fb      	str	r3, [r7, #12]
	return k;
   17300:	68fb      	ldr	r3, [r7, #12]
   17302:	617b      	str	r3, [r7, #20]
   17304:	e024      	b.n	17350 <z_remove_thread_from_ready_q+0x78>
		if (z_is_thread_queued(thread)) {
   17306:	6878      	ldr	r0, [r7, #4]
   17308:	f013 fcc8 	bl	2ac9c <z_is_thread_queued>
   1730c:	4603      	mov	r3, r0
   1730e:	2b00      	cmp	r3, #0
   17310:	d006      	beq.n	17320 <z_remove_thread_from_ready_q+0x48>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   17312:	6879      	ldr	r1, [r7, #4]
   17314:	4813      	ldr	r0, [pc, #76]	; (17364 <z_remove_thread_from_ready_q+0x8c>)
   17316:	f000 fa91 	bl	1783c <z_priq_dumb_remove>
			z_mark_thread_as_not_queued(thread);
   1731a:	6878      	ldr	r0, [r7, #4]
   1731c:	f013 fd4d 	bl	2adba <z_mark_thread_as_not_queued>
		update_cache(thread == _current);
   17320:	4b11      	ldr	r3, [pc, #68]	; (17368 <z_remove_thread_from_ready_q+0x90>)
   17322:	689b      	ldr	r3, [r3, #8]
   17324:	687a      	ldr	r2, [r7, #4]
   17326:	429a      	cmp	r2, r3
   17328:	bf0c      	ite	eq
   1732a:	2301      	moveq	r3, #1
   1732c:	2300      	movne	r3, #0
   1732e:	b2db      	uxtb	r3, r3
   17330:	4618      	mov	r0, r3
   17332:	f7ff fe85 	bl	17040 <update_cache>
   17336:	4b0a      	ldr	r3, [pc, #40]	; (17360 <z_remove_thread_from_ready_q+0x88>)
   17338:	623b      	str	r3, [r7, #32]
   1733a:	697b      	ldr	r3, [r7, #20]
   1733c:	613b      	str	r3, [r7, #16]
	z_arch_irq_unlock(key.key);
   1733e:	693b      	ldr	r3, [r7, #16]
   17340:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   17342:	69fb      	ldr	r3, [r7, #28]
   17344:	f383 8811 	msr	BASEPRI, r3
   17348:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1734c:	2301      	movs	r3, #1
   1734e:	61bb      	str	r3, [r7, #24]
   17350:	69bb      	ldr	r3, [r7, #24]
   17352:	2b00      	cmp	r3, #0
   17354:	d0d7      	beq.n	17306 <z_remove_thread_from_ready_q+0x2e>
}
   17356:	bf00      	nop
   17358:	3730      	adds	r7, #48	; 0x30
   1735a:	46bd      	mov	sp, r7
   1735c:	bd80      	pop	{r7, pc}
   1735e:	bf00      	nop
   17360:	200061a8 	.word	0x200061a8
   17364:	200061a0 	.word	0x200061a0
   17368:	20006178 	.word	0x20006178

0001736c <z_unpend_thread_no_timeout>:
{
   1736c:	b580      	push	{r7, lr}
   1736e:	b08c      	sub	sp, #48	; 0x30
   17370:	af00      	add	r7, sp, #0
   17372:	6078      	str	r0, [r7, #4]
	LOCKED(&sched_spinlock) {
   17374:	2300      	movs	r3, #0
   17376:	61bb      	str	r3, [r7, #24]
   17378:	4b19      	ldr	r3, [pc, #100]	; (173e0 <z_unpend_thread_no_timeout+0x74>)
   1737a:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
   1737c:	f04f 0320 	mov.w	r3, #32
   17380:	f3ef 8211 	mrs	r2, BASEPRI
   17384:	f383 8811 	msr	BASEPRI, r3
   17388:	f3bf 8f6f 	isb	sy
   1738c:	62ba      	str	r2, [r7, #40]	; 0x28
   1738e:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
   17390:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = z_arch_irq_lock();
   17392:	60fb      	str	r3, [r7, #12]
	return k;
   17394:	68fb      	ldr	r3, [r7, #12]
   17396:	617b      	str	r3, [r7, #20]
   17398:	e017      	b.n	173ca <z_unpend_thread_no_timeout+0x5e>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1739a:	6878      	ldr	r0, [r7, #4]
   1739c:	f013 fe8a 	bl	2b0b4 <pended_on>
   173a0:	4603      	mov	r3, r0
   173a2:	6879      	ldr	r1, [r7, #4]
   173a4:	4618      	mov	r0, r3
   173a6:	f000 fa49 	bl	1783c <z_priq_dumb_remove>
		z_mark_thread_as_not_pending(thread);
   173aa:	6878      	ldr	r0, [r7, #4]
   173ac:	f013 fcc3 	bl	2ad36 <z_mark_thread_as_not_pending>
   173b0:	4b0b      	ldr	r3, [pc, #44]	; (173e0 <z_unpend_thread_no_timeout+0x74>)
   173b2:	623b      	str	r3, [r7, #32]
   173b4:	697b      	ldr	r3, [r7, #20]
   173b6:	613b      	str	r3, [r7, #16]
	z_arch_irq_unlock(key.key);
   173b8:	693b      	ldr	r3, [r7, #16]
   173ba:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   173bc:	69fb      	ldr	r3, [r7, #28]
   173be:	f383 8811 	msr	BASEPRI, r3
   173c2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   173c6:	2301      	movs	r3, #1
   173c8:	61bb      	str	r3, [r7, #24]
   173ca:	69bb      	ldr	r3, [r7, #24]
   173cc:	2b00      	cmp	r3, #0
   173ce:	d0e4      	beq.n	1739a <z_unpend_thread_no_timeout+0x2e>
	thread->base.pended_on = NULL;
   173d0:	687b      	ldr	r3, [r7, #4]
   173d2:	2200      	movs	r2, #0
   173d4:	609a      	str	r2, [r3, #8]
}
   173d6:	bf00      	nop
   173d8:	3730      	adds	r7, #48	; 0x30
   173da:	46bd      	mov	sp, r7
   173dc:	bd80      	pop	{r7, pc}
   173de:	bf00      	nop
   173e0:	200061a8 	.word	0x200061a8

000173e4 <z_thread_timeout>:
{
   173e4:	b580      	push	{r7, lr}
   173e6:	b08e      	sub	sp, #56	; 0x38
   173e8:	af00      	add	r7, sp, #0
   173ea:	6078      	str	r0, [r7, #4]
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   173ec:	687b      	ldr	r3, [r7, #4]
   173ee:	3b18      	subs	r3, #24
   173f0:	637b      	str	r3, [r7, #52]	; 0x34
	if (th->base.pended_on != NULL) {
   173f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   173f4:	689b      	ldr	r3, [r3, #8]
   173f6:	2b00      	cmp	r3, #0
   173f8:	d032      	beq.n	17460 <z_thread_timeout+0x7c>
   173fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   173fc:	633b      	str	r3, [r7, #48]	; 0x30
	LOCKED(&sched_spinlock) {
   173fe:	2300      	movs	r3, #0
   17400:	617b      	str	r3, [r7, #20]
   17402:	4b22      	ldr	r3, [pc, #136]	; (1748c <z_thread_timeout+0xa8>)
   17404:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
   17406:	f04f 0320 	mov.w	r3, #32
   1740a:	f3ef 8211 	mrs	r2, BASEPRI
   1740e:	f383 8811 	msr	BASEPRI, r3
   17412:	f3bf 8f6f 	isb	sy
   17416:	62ba      	str	r2, [r7, #40]	; 0x28
   17418:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
   1741a:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = z_arch_irq_lock();
   1741c:	60bb      	str	r3, [r7, #8]
	return k;
   1741e:	68bb      	ldr	r3, [r7, #8]
   17420:	613b      	str	r3, [r7, #16]
   17422:	e017      	b.n	17454 <z_thread_timeout+0x70>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   17424:	6b38      	ldr	r0, [r7, #48]	; 0x30
   17426:	f013 fe45 	bl	2b0b4 <pended_on>
   1742a:	4603      	mov	r3, r0
   1742c:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1742e:	4618      	mov	r0, r3
   17430:	f000 fa04 	bl	1783c <z_priq_dumb_remove>
		z_mark_thread_as_not_pending(thread);
   17434:	6b38      	ldr	r0, [r7, #48]	; 0x30
   17436:	f013 fc7e 	bl	2ad36 <z_mark_thread_as_not_pending>
   1743a:	4b14      	ldr	r3, [pc, #80]	; (1748c <z_thread_timeout+0xa8>)
   1743c:	623b      	str	r3, [r7, #32]
   1743e:	693b      	ldr	r3, [r7, #16]
   17440:	60fb      	str	r3, [r7, #12]
	z_arch_irq_unlock(key.key);
   17442:	68fb      	ldr	r3, [r7, #12]
   17444:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   17446:	69fb      	ldr	r3, [r7, #28]
   17448:	f383 8811 	msr	BASEPRI, r3
   1744c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   17450:	2301      	movs	r3, #1
   17452:	617b      	str	r3, [r7, #20]
   17454:	697b      	ldr	r3, [r7, #20]
   17456:	2b00      	cmp	r3, #0
   17458:	d0e4      	beq.n	17424 <z_thread_timeout+0x40>
	thread->base.pended_on = NULL;
   1745a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1745c:	2200      	movs	r2, #0
   1745e:	609a      	str	r2, [r3, #8]
	z_mark_thread_as_started(th);
   17460:	6b78      	ldr	r0, [r7, #52]	; 0x34
   17462:	f013 fc48 	bl	2acf6 <z_mark_thread_as_started>
	z_mark_thread_as_not_suspended(th);
   17466:	6b78      	ldr	r0, [r7, #52]	; 0x34
   17468:	f013 fc35 	bl	2acd6 <z_mark_thread_as_not_suspended>
   1746c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1746e:	61bb      	str	r3, [r7, #24]
	if (z_is_thread_ready(thread)) {
   17470:	69b8      	ldr	r0, [r7, #24]
   17472:	f013 fbdf 	bl	2ac34 <z_is_thread_ready>
   17476:	4603      	mov	r3, r0
   17478:	2b00      	cmp	r3, #0
   1747a:	d002      	beq.n	17482 <z_thread_timeout+0x9e>
		z_add_thread_to_ready_q(thread);
   1747c:	69b8      	ldr	r0, [r7, #24]
   1747e:	f7ff fe35 	bl	170ec <z_add_thread_to_ready_q>
}
   17482:	bf00      	nop
   17484:	3738      	adds	r7, #56	; 0x38
   17486:	46bd      	mov	sp, r7
   17488:	bd80      	pop	{r7, pc}
   1748a:	bf00      	nop
   1748c:	200061a8 	.word	0x200061a8

00017490 <z_pend_curr_irqlock>:
{
   17490:	b580      	push	{r7, lr}
   17492:	b08e      	sub	sp, #56	; 0x38
   17494:	af00      	add	r7, sp, #0
   17496:	60f8      	str	r0, [r7, #12]
   17498:	60b9      	str	r1, [r7, #8]
   1749a:	607a      	str	r2, [r7, #4]
	pend(_current, wait_q, timeout);
   1749c:	4b1f      	ldr	r3, [pc, #124]	; (1751c <z_pend_curr_irqlock+0x8c>)
   1749e:	689b      	ldr	r3, [r3, #8]
   174a0:	687a      	ldr	r2, [r7, #4]
   174a2:	68b9      	ldr	r1, [r7, #8]
   174a4:	4618      	mov	r0, r3
   174a6:	f013 fd11 	bl	2aecc <pend>
	pending_current = _current;
   174aa:	4b1c      	ldr	r3, [pc, #112]	; (1751c <z_pend_curr_irqlock+0x8c>)
   174ac:	689b      	ldr	r3, [r3, #8]
   174ae:	4a1c      	ldr	r2, [pc, #112]	; (17520 <z_pend_curr_irqlock+0x90>)
   174b0:	6013      	str	r3, [r2, #0]
	int ret = z_swap_irqlock(key);
   174b2:	68f8      	ldr	r0, [r7, #12]
   174b4:	f013 fcb9 	bl	2ae2a <z_swap_irqlock>
   174b8:	6378      	str	r0, [r7, #52]	; 0x34
	LOCKED(&sched_spinlock) {
   174ba:	2300      	movs	r3, #0
   174bc:	61fb      	str	r3, [r7, #28]
   174be:	4b19      	ldr	r3, [pc, #100]	; (17524 <z_pend_curr_irqlock+0x94>)
   174c0:	633b      	str	r3, [r7, #48]	; 0x30
	__asm__ volatile(
   174c2:	f04f 0320 	mov.w	r3, #32
   174c6:	f3ef 8211 	mrs	r2, BASEPRI
   174ca:	f383 8811 	msr	BASEPRI, r3
   174ce:	f3bf 8f6f 	isb	sy
   174d2:	62fa      	str	r2, [r7, #44]	; 0x2c
   174d4:	62bb      	str	r3, [r7, #40]	; 0x28
	return key;
   174d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	k.key = z_arch_irq_lock();
   174d8:	613b      	str	r3, [r7, #16]
	return k;
   174da:	693b      	ldr	r3, [r7, #16]
   174dc:	61bb      	str	r3, [r7, #24]
   174de:	e015      	b.n	1750c <z_pend_curr_irqlock+0x7c>
		if (pending_current == _current) {
   174e0:	4b0e      	ldr	r3, [pc, #56]	; (1751c <z_pend_curr_irqlock+0x8c>)
   174e2:	689a      	ldr	r2, [r3, #8]
   174e4:	4b0e      	ldr	r3, [pc, #56]	; (17520 <z_pend_curr_irqlock+0x90>)
   174e6:	681b      	ldr	r3, [r3, #0]
   174e8:	429a      	cmp	r2, r3
   174ea:	d102      	bne.n	174f2 <z_pend_curr_irqlock+0x62>
			pending_current = NULL;
   174ec:	4b0c      	ldr	r3, [pc, #48]	; (17520 <z_pend_curr_irqlock+0x90>)
   174ee:	2200      	movs	r2, #0
   174f0:	601a      	str	r2, [r3, #0]
   174f2:	4b0c      	ldr	r3, [pc, #48]	; (17524 <z_pend_curr_irqlock+0x94>)
   174f4:	627b      	str	r3, [r7, #36]	; 0x24
   174f6:	69bb      	ldr	r3, [r7, #24]
   174f8:	617b      	str	r3, [r7, #20]
	z_arch_irq_unlock(key.key);
   174fa:	697b      	ldr	r3, [r7, #20]
   174fc:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
   174fe:	6a3b      	ldr	r3, [r7, #32]
   17500:	f383 8811 	msr	BASEPRI, r3
   17504:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   17508:	2301      	movs	r3, #1
   1750a:	61fb      	str	r3, [r7, #28]
   1750c:	69fb      	ldr	r3, [r7, #28]
   1750e:	2b00      	cmp	r3, #0
   17510:	d0e6      	beq.n	174e0 <z_pend_curr_irqlock+0x50>
	return ret;
   17512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   17514:	4618      	mov	r0, r3
   17516:	3738      	adds	r7, #56	; 0x38
   17518:	46bd      	mov	sp, r7
   1751a:	bd80      	pop	{r7, pc}
   1751c:	20006178 	.word	0x20006178
   17520:	200061b0 	.word	0x200061b0
   17524:	200061a8 	.word	0x200061a8

00017528 <z_pend_curr>:
{
   17528:	b580      	push	{r7, lr}
   1752a:	b088      	sub	sp, #32
   1752c:	af00      	add	r7, sp, #0
   1752e:	60f8      	str	r0, [r7, #12]
   17530:	60b9      	str	r1, [r7, #8]
   17532:	607a      	str	r2, [r7, #4]
   17534:	603b      	str	r3, [r7, #0]
	pending_current = _current;
   17536:	4b0d      	ldr	r3, [pc, #52]	; (1756c <z_pend_curr+0x44>)
   17538:	689b      	ldr	r3, [r3, #8]
   1753a:	4a0d      	ldr	r2, [pc, #52]	; (17570 <z_pend_curr+0x48>)
   1753c:	6013      	str	r3, [r2, #0]
	pend(_current, wait_q, timeout);
   1753e:	4b0b      	ldr	r3, [pc, #44]	; (1756c <z_pend_curr+0x44>)
   17540:	689b      	ldr	r3, [r3, #8]
   17542:	683a      	ldr	r2, [r7, #0]
   17544:	6879      	ldr	r1, [r7, #4]
   17546:	4618      	mov	r0, r3
   17548:	f013 fcc0 	bl	2aecc <pend>
   1754c:	68fb      	ldr	r3, [r7, #12]
   1754e:	61fb      	str	r3, [r7, #28]
   17550:	68bb      	ldr	r3, [r7, #8]
   17552:	617b      	str	r3, [r7, #20]
   17554:	69fb      	ldr	r3, [r7, #28]
   17556:	61bb      	str	r3, [r7, #24]
 * handling.
 */
static ALWAYS_INLINE int z_swap(struct k_spinlock *lock, k_spinlock_key_t key)
{
	k_spin_release(lock);
	return z_swap_irqlock(key.key);
   17558:	697b      	ldr	r3, [r7, #20]
   1755a:	4618      	mov	r0, r3
   1755c:	f013 fc65 	bl	2ae2a <z_swap_irqlock>
   17560:	4603      	mov	r3, r0
	return z_swap(lock, key);
   17562:	bf00      	nop
}
   17564:	4618      	mov	r0, r3
   17566:	3720      	adds	r7, #32
   17568:	46bd      	mov	sp, r7
   1756a:	bd80      	pop	{r7, pc}
   1756c:	20006178 	.word	0x20006178
   17570:	200061b0 	.word	0x200061b0

00017574 <z_unpend_thread>:
{
   17574:	b580      	push	{r7, lr}
   17576:	b08c      	sub	sp, #48	; 0x30
   17578:	af00      	add	r7, sp, #0
   1757a:	6078      	str	r0, [r7, #4]
   1757c:	687b      	ldr	r3, [r7, #4]
   1757e:	62fb      	str	r3, [r7, #44]	; 0x2c
	LOCKED(&sched_spinlock) {
   17580:	2300      	movs	r3, #0
   17582:	617b      	str	r3, [r7, #20]
   17584:	4b1a      	ldr	r3, [pc, #104]	; (175f0 <z_unpend_thread+0x7c>)
   17586:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm__ volatile(
   17588:	f04f 0320 	mov.w	r3, #32
   1758c:	f3ef 8211 	mrs	r2, BASEPRI
   17590:	f383 8811 	msr	BASEPRI, r3
   17594:	f3bf 8f6f 	isb	sy
   17598:	627a      	str	r2, [r7, #36]	; 0x24
   1759a:	623b      	str	r3, [r7, #32]
	return key;
   1759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	k.key = z_arch_irq_lock();
   1759e:	60bb      	str	r3, [r7, #8]
	return k;
   175a0:	68bb      	ldr	r3, [r7, #8]
   175a2:	613b      	str	r3, [r7, #16]
   175a4:	e017      	b.n	175d6 <z_unpend_thread+0x62>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   175a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   175a8:	f013 fd84 	bl	2b0b4 <pended_on>
   175ac:	4603      	mov	r3, r0
   175ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   175b0:	4618      	mov	r0, r3
   175b2:	f000 f943 	bl	1783c <z_priq_dumb_remove>
		z_mark_thread_as_not_pending(thread);
   175b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   175b8:	f013 fbbd 	bl	2ad36 <z_mark_thread_as_not_pending>
   175bc:	4b0c      	ldr	r3, [pc, #48]	; (175f0 <z_unpend_thread+0x7c>)
   175be:	61fb      	str	r3, [r7, #28]
   175c0:	693b      	ldr	r3, [r7, #16]
   175c2:	60fb      	str	r3, [r7, #12]
	z_arch_irq_unlock(key.key);
   175c4:	68fb      	ldr	r3, [r7, #12]
   175c6:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
   175c8:	69bb      	ldr	r3, [r7, #24]
   175ca:	f383 8811 	msr	BASEPRI, r3
   175ce:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   175d2:	2301      	movs	r3, #1
   175d4:	617b      	str	r3, [r7, #20]
   175d6:	697b      	ldr	r3, [r7, #20]
   175d8:	2b00      	cmp	r3, #0
   175da:	d0e4      	beq.n	175a6 <z_unpend_thread+0x32>
	thread->base.pended_on = NULL;
   175dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   175de:	2200      	movs	r2, #0
   175e0:	609a      	str	r2, [r3, #8]
	(void)z_abort_thread_timeout(thread);
   175e2:	6878      	ldr	r0, [r7, #4]
   175e4:	f013 fad6 	bl	2ab94 <z_abort_thread_timeout>
}
   175e8:	bf00      	nop
   175ea:	3730      	adds	r7, #48	; 0x30
   175ec:	46bd      	mov	sp, r7
   175ee:	bd80      	pop	{r7, pc}
   175f0:	200061a8 	.word	0x200061a8

000175f4 <z_thread_priority_set>:
{
   175f4:	b580      	push	{r7, lr}
   175f6:	b090      	sub	sp, #64	; 0x40
   175f8:	af00      	add	r7, sp, #0
   175fa:	6078      	str	r0, [r7, #4]
   175fc:	6039      	str	r1, [r7, #0]
	bool need_sched = 0;
   175fe:	2300      	movs	r3, #0
   17600:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	LOCKED(&sched_spinlock) {
   17604:	2300      	movs	r3, #0
   17606:	61bb      	str	r3, [r7, #24]
   17608:	4b43      	ldr	r3, [pc, #268]	; (17718 <z_thread_priority_set+0x124>)
   1760a:	63bb      	str	r3, [r7, #56]	; 0x38
	__asm__ volatile(
   1760c:	f04f 0320 	mov.w	r3, #32
   17610:	f3ef 8211 	mrs	r2, BASEPRI
   17614:	f383 8811 	msr	BASEPRI, r3
   17618:	f3bf 8f6f 	isb	sy
   1761c:	637a      	str	r2, [r7, #52]	; 0x34
   1761e:	633b      	str	r3, [r7, #48]	; 0x30
	return key;
   17620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	k.key = z_arch_irq_lock();
   17622:	60fb      	str	r3, [r7, #12]
	return k;
   17624:	68fb      	ldr	r3, [r7, #12]
   17626:	617b      	str	r3, [r7, #20]
   17628:	e064      	b.n	176f4 <z_thread_priority_set+0x100>
		need_sched = z_is_thread_ready(thread);
   1762a:	6878      	ldr	r0, [r7, #4]
   1762c:	f013 fb02 	bl	2ac34 <z_is_thread_ready>
   17630:	4603      	mov	r3, r0
   17632:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (need_sched) {
   17636:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   1763a:	2b00      	cmp	r3, #0
   1763c:	d049      	beq.n	176d2 <z_thread_priority_set+0xde>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1763e:	6879      	ldr	r1, [r7, #4]
   17640:	4836      	ldr	r0, [pc, #216]	; (1771c <z_thread_priority_set+0x128>)
   17642:	f000 f8fb 	bl	1783c <z_priq_dumb_remove>
			thread->base.prio = prio;
   17646:	683b      	ldr	r3, [r7, #0]
   17648:	b25a      	sxtb	r2, r3
   1764a:	687b      	ldr	r3, [r7, #4]
   1764c:	739a      	strb	r2, [r3, #14]
   1764e:	4b33      	ldr	r3, [pc, #204]	; (1771c <z_thread_priority_set+0x128>)
   17650:	62fb      	str	r3, [r7, #44]	; 0x2c
   17652:	687b      	ldr	r3, [r7, #4]
   17654:	62bb      	str	r3, [r7, #40]	; 0x28
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17656:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17658:	f013 f9bd 	bl	2a9d6 <sys_dlist_peek_head>
   1765c:	4603      	mov	r3, r0
   1765e:	2b00      	cmp	r3, #0
   17660:	d004      	beq.n	1766c <z_thread_priority_set+0x78>
   17662:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17664:	f013 f9b7 	bl	2a9d6 <sys_dlist_peek_head>
   17668:	4603      	mov	r3, r0
   1766a:	e000      	b.n	1766e <z_thread_priority_set+0x7a>
   1766c:	2300      	movs	r3, #0
   1766e:	627b      	str	r3, [r7, #36]	; 0x24
   17670:	e023      	b.n	176ba <z_thread_priority_set+0xc6>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
   17672:	6a79      	ldr	r1, [r7, #36]	; 0x24
   17674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   17676:	f013 fc14 	bl	2aea2 <z_is_t1_higher_prio_than_t2>
   1767a:	4603      	mov	r3, r0
   1767c:	2b00      	cmp	r3, #0
   1767e:	d006      	beq.n	1768e <z_thread_priority_set+0x9a>
			sys_dlist_insert(&t->base.qnode_dlist,
   17680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17682:	6aba      	ldr	r2, [r7, #40]	; 0x28
   17684:	4611      	mov	r1, r2
   17686:	4618      	mov	r0, r3
   17688:	f013 f9f5 	bl	2aa76 <sys_dlist_insert>
   1768c:	e01d      	b.n	176ca <z_thread_priority_set+0xd6>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17690:	2b00      	cmp	r3, #0
   17692:	d010      	beq.n	176b6 <z_thread_priority_set+0xc2>
   17694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17696:	4619      	mov	r1, r3
   17698:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1769a:	f013 f9c1 	bl	2aa20 <sys_dlist_peek_next>
   1769e:	4603      	mov	r3, r0
   176a0:	2b00      	cmp	r3, #0
   176a2:	d006      	beq.n	176b2 <z_thread_priority_set+0xbe>
   176a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   176a6:	4619      	mov	r1, r3
   176a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   176aa:	f013 f9b9 	bl	2aa20 <sys_dlist_peek_next>
   176ae:	4603      	mov	r3, r0
   176b0:	e002      	b.n	176b8 <z_thread_priority_set+0xc4>
   176b2:	2300      	movs	r3, #0
   176b4:	e000      	b.n	176b8 <z_thread_priority_set+0xc4>
   176b6:	2300      	movs	r3, #0
   176b8:	627b      	str	r3, [r7, #36]	; 0x24
   176ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   176bc:	2b00      	cmp	r3, #0
   176be:	d1d8      	bne.n	17672 <z_thread_priority_set+0x7e>
	sys_dlist_append(pq, &thread->base.qnode_dlist);
   176c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   176c2:	4619      	mov	r1, r3
   176c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   176c6:	f013 f9be 	bl	2aa46 <sys_dlist_append>
			update_cache(1);
   176ca:	2001      	movs	r0, #1
   176cc:	f7ff fcb8 	bl	17040 <update_cache>
   176d0:	e003      	b.n	176da <z_thread_priority_set+0xe6>
			thread->base.prio = prio;
   176d2:	683b      	ldr	r3, [r7, #0]
   176d4:	b25a      	sxtb	r2, r3
   176d6:	687b      	ldr	r3, [r7, #4]
   176d8:	739a      	strb	r2, [r3, #14]
   176da:	4b0f      	ldr	r3, [pc, #60]	; (17718 <z_thread_priority_set+0x124>)
   176dc:	623b      	str	r3, [r7, #32]
   176de:	697b      	ldr	r3, [r7, #20]
   176e0:	613b      	str	r3, [r7, #16]
	z_arch_irq_unlock(key.key);
   176e2:	693b      	ldr	r3, [r7, #16]
   176e4:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   176e6:	69fb      	ldr	r3, [r7, #28]
   176e8:	f383 8811 	msr	BASEPRI, r3
   176ec:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   176f0:	2301      	movs	r3, #1
   176f2:	61bb      	str	r3, [r7, #24]
   176f4:	69bb      	ldr	r3, [r7, #24]
   176f6:	2b00      	cmp	r3, #0
   176f8:	d097      	beq.n	1762a <z_thread_priority_set+0x36>
	if (need_sched && _current->base.sched_locked == 0) {
   176fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   176fe:	2b00      	cmp	r3, #0
   17700:	d006      	beq.n	17710 <z_thread_priority_set+0x11c>
   17702:	4b07      	ldr	r3, [pc, #28]	; (17720 <z_thread_priority_set+0x12c>)
   17704:	689b      	ldr	r3, [r3, #8]
   17706:	7bdb      	ldrb	r3, [r3, #15]
   17708:	2b00      	cmp	r3, #0
   1770a:	d101      	bne.n	17710 <z_thread_priority_set+0x11c>
		z_reschedule_unlocked();
   1770c:	f013 fa50 	bl	2abb0 <z_reschedule_unlocked>
}
   17710:	bf00      	nop
   17712:	3740      	adds	r7, #64	; 0x40
   17714:	46bd      	mov	sp, r7
   17716:	bd80      	pop	{r7, pc}
   17718:	200061a8 	.word	0x200061a8
   1771c:	200061a0 	.word	0x200061a0
   17720:	20006178 	.word	0x20006178

00017724 <resched>:
{
   17724:	b480      	push	{r7}
   17726:	b083      	sub	sp, #12
   17728:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1772a:	f3ef 8305 	mrs	r3, IPSR
   1772e:	607b      	str	r3, [r7, #4]
  return(result);
   17730:	687b      	ldr	r3, [r7, #4]
	u32_t vector = __get_IPSR();
   17732:	603b      	str	r3, [r7, #0]
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   17734:	683b      	ldr	r3, [r7, #0]
   17736:	2b0d      	cmp	r3, #13
   17738:	d808      	bhi.n	1774c <resched+0x28>
   1773a:	683b      	ldr	r3, [r7, #0]
   1773c:	2b00      	cmp	r3, #0
   1773e:	d007      	beq.n	17750 <resched+0x2c>
   17740:	4b09      	ldr	r3, [pc, #36]	; (17768 <resched+0x44>)
   17742:	685b      	ldr	r3, [r3, #4]
   17744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   17748:	2b00      	cmp	r3, #0
   1774a:	d101      	bne.n	17750 <resched+0x2c>
   1774c:	2301      	movs	r3, #1
   1774e:	e000      	b.n	17752 <resched+0x2e>
   17750:	2300      	movs	r3, #0
   17752:	f003 0301 	and.w	r3, r3, #1
   17756:	b2db      	uxtb	r3, r3
	return !z_is_in_isr();
   17758:	f083 0301 	eor.w	r3, r3, #1
   1775c:	b2db      	uxtb	r3, r3
}
   1775e:	4618      	mov	r0, r3
   17760:	370c      	adds	r7, #12
   17762:	46bd      	mov	sp, r7
   17764:	bc80      	pop	{r7}
   17766:	4770      	bx	lr
   17768:	e000ed00 	.word	0xe000ed00

0001776c <k_sched_lock>:
{
   1776c:	b580      	push	{r7, lr}
   1776e:	b08a      	sub	sp, #40	; 0x28
   17770:	af00      	add	r7, sp, #0
	LOCKED(&sched_spinlock) {
   17772:	2300      	movs	r3, #0
   17774:	613b      	str	r3, [r7, #16]
   17776:	4b13      	ldr	r3, [pc, #76]	; (177c4 <k_sched_lock+0x58>)
   17778:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
   1777a:	f04f 0320 	mov.w	r3, #32
   1777e:	f3ef 8211 	mrs	r2, BASEPRI
   17782:	f383 8811 	msr	BASEPRI, r3
   17786:	f3bf 8f6f 	isb	sy
   1778a:	623a      	str	r2, [r7, #32]
   1778c:	61fb      	str	r3, [r7, #28]
	return key;
   1778e:	6a3b      	ldr	r3, [r7, #32]
	k.key = z_arch_irq_lock();
   17790:	607b      	str	r3, [r7, #4]
	return k;
   17792:	687b      	ldr	r3, [r7, #4]
   17794:	60fb      	str	r3, [r7, #12]
   17796:	e00e      	b.n	177b6 <k_sched_lock+0x4a>
		z_sched_lock();
   17798:	f7ff fa5e 	bl	16c58 <z_sched_lock>
   1779c:	4b09      	ldr	r3, [pc, #36]	; (177c4 <k_sched_lock+0x58>)
   1779e:	61bb      	str	r3, [r7, #24]
   177a0:	68fb      	ldr	r3, [r7, #12]
   177a2:	60bb      	str	r3, [r7, #8]
	z_arch_irq_unlock(key.key);
   177a4:	68bb      	ldr	r3, [r7, #8]
   177a6:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
   177a8:	697b      	ldr	r3, [r7, #20]
   177aa:	f383 8811 	msr	BASEPRI, r3
   177ae:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   177b2:	2301      	movs	r3, #1
   177b4:	613b      	str	r3, [r7, #16]
   177b6:	693b      	ldr	r3, [r7, #16]
   177b8:	2b00      	cmp	r3, #0
   177ba:	d0ed      	beq.n	17798 <k_sched_lock+0x2c>
}
   177bc:	bf00      	nop
   177be:	3728      	adds	r7, #40	; 0x28
   177c0:	46bd      	mov	sp, r7
   177c2:	bd80      	pop	{r7, pc}
   177c4:	200061a8 	.word	0x200061a8

000177c8 <k_sched_unlock>:
{
   177c8:	b580      	push	{r7, lr}
   177ca:	b08a      	sub	sp, #40	; 0x28
   177cc:	af00      	add	r7, sp, #0
	LOCKED(&sched_spinlock) {
   177ce:	2300      	movs	r3, #0
   177d0:	613b      	str	r3, [r7, #16]
   177d2:	4b18      	ldr	r3, [pc, #96]	; (17834 <k_sched_unlock+0x6c>)
   177d4:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
   177d6:	f04f 0320 	mov.w	r3, #32
   177da:	f3ef 8211 	mrs	r2, BASEPRI
   177de:	f383 8811 	msr	BASEPRI, r3
   177e2:	f3bf 8f6f 	isb	sy
   177e6:	623a      	str	r2, [r7, #32]
   177e8:	61fb      	str	r3, [r7, #28]
	return key;
   177ea:	6a3b      	ldr	r3, [r7, #32]
	k.key = z_arch_irq_lock();
   177ec:	607b      	str	r3, [r7, #4]
	return k;
   177ee:	687b      	ldr	r3, [r7, #4]
   177f0:	60fb      	str	r3, [r7, #12]
   177f2:	e015      	b.n	17820 <k_sched_unlock+0x58>
		++_current->base.sched_locked;
   177f4:	4b10      	ldr	r3, [pc, #64]	; (17838 <k_sched_unlock+0x70>)
   177f6:	689b      	ldr	r3, [r3, #8]
   177f8:	7bda      	ldrb	r2, [r3, #15]
   177fa:	3201      	adds	r2, #1
   177fc:	b2d2      	uxtb	r2, r2
   177fe:	73da      	strb	r2, [r3, #15]
		update_cache(1);
   17800:	2001      	movs	r0, #1
   17802:	f7ff fc1d 	bl	17040 <update_cache>
   17806:	4b0b      	ldr	r3, [pc, #44]	; (17834 <k_sched_unlock+0x6c>)
   17808:	61bb      	str	r3, [r7, #24]
   1780a:	68fb      	ldr	r3, [r7, #12]
   1780c:	60bb      	str	r3, [r7, #8]
	z_arch_irq_unlock(key.key);
   1780e:	68bb      	ldr	r3, [r7, #8]
   17810:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
   17812:	697b      	ldr	r3, [r7, #20]
   17814:	f383 8811 	msr	BASEPRI, r3
   17818:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1781c:	2301      	movs	r3, #1
   1781e:	613b      	str	r3, [r7, #16]
   17820:	693b      	ldr	r3, [r7, #16]
   17822:	2b00      	cmp	r3, #0
   17824:	d0e6      	beq.n	177f4 <k_sched_unlock+0x2c>
	z_reschedule_unlocked();
   17826:	f013 f9c3 	bl	2abb0 <z_reschedule_unlocked>
}
   1782a:	bf00      	nop
   1782c:	3728      	adds	r7, #40	; 0x28
   1782e:	46bd      	mov	sp, r7
   17830:	bd80      	pop	{r7, pc}
   17832:	bf00      	nop
   17834:	200061a8 	.word	0x200061a8
   17838:	20006178 	.word	0x20006178

0001783c <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   1783c:	b580      	push	{r7, lr}
   1783e:	b082      	sub	sp, #8
   17840:	af00      	add	r7, sp, #0
   17842:	6078      	str	r0, [r7, #4]
   17844:	6039      	str	r1, [r7, #0]
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   17846:	687b      	ldr	r3, [r7, #4]
   17848:	4a0b      	ldr	r2, [pc, #44]	; (17878 <z_priq_dumb_remove+0x3c>)
   1784a:	4293      	cmp	r3, r2
   1784c:	d10a      	bne.n	17864 <z_priq_dumb_remove+0x28>
   1784e:	4b0b      	ldr	r3, [pc, #44]	; (1787c <z_priq_dumb_remove+0x40>)
   17850:	689b      	ldr	r3, [r3, #8]
   17852:	683a      	ldr	r2, [r7, #0]
   17854:	429a      	cmp	r2, r3
   17856:	d105      	bne.n	17864 <z_priq_dumb_remove+0x28>
	    z_is_thread_prevented_from_running(thread)) {
   17858:	6838      	ldr	r0, [r7, #0]
   1785a:	f013 f9be 	bl	2abda <z_is_thread_prevented_from_running>
   1785e:	4603      	mov	r3, r0
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   17860:	2b00      	cmp	r3, #0
   17862:	d104      	bne.n	1786e <z_priq_dumb_remove+0x32>
	}
#endif

	__ASSERT_NO_MSG(!is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   17864:	683b      	ldr	r3, [r7, #0]
   17866:	4618      	mov	r0, r3
   17868:	f013 f91d 	bl	2aaa6 <sys_dlist_remove>
   1786c:	e000      	b.n	17870 <z_priq_dumb_remove+0x34>
		return;
   1786e:	bf00      	nop
}
   17870:	3708      	adds	r7, #8
   17872:	46bd      	mov	sp, r7
   17874:	bd80      	pop	{r7, pc}
   17876:	bf00      	nop
   17878:	200061a0 	.word	0x200061a0
   1787c:	20006178 	.word	0x20006178

00017880 <z_sched_init>:

	return need_sched;
}

void z_sched_init(void)
{
   17880:	b580      	push	{r7, lr}
   17882:	af00      	add	r7, sp, #0
#ifdef CONFIG_SCHED_DUMB
	sys_dlist_init(&_kernel.ready_q.runq);
   17884:	4804      	ldr	r0, [pc, #16]	; (17898 <z_sched_init+0x18>)
   17886:	f013 f867 	bl	2a958 <sys_dlist_init>
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1788a:	2100      	movs	r1, #0
   1788c:	2000      	movs	r0, #0
   1788e:	f7ff fa8f 	bl	16db0 <k_sched_time_slice_set>
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
   17892:	bf00      	nop
   17894:	bd80      	pop	{r7, pc}
   17896:	bf00      	nop
   17898:	200061a0 	.word	0x200061a0

0001789c <z_impl_k_yield>:
}
#endif
#endif

void z_impl_k_yield(void)
{
   1789c:	b580      	push	{r7, lr}
   1789e:	b08c      	sub	sp, #48	; 0x30
   178a0:	af00      	add	r7, sp, #0
	__ASSERT(!z_is_in_isr(), "");

	if (!is_idle(_current)) {
   178a2:	4b3e      	ldr	r3, [pc, #248]	; (1799c <z_impl_k_yield+0x100>)
   178a4:	689b      	ldr	r3, [r3, #8]
   178a6:	4618      	mov	r0, r3
   178a8:	f7ff fa56 	bl	16d58 <is_idle>
   178ac:	4603      	mov	r3, r0
   178ae:	f083 0301 	eor.w	r3, r3, #1
   178b2:	b2db      	uxtb	r3, r3
   178b4:	2b00      	cmp	r3, #0
   178b6:	d06a      	beq.n	1798e <z_impl_k_yield+0xf2>
		LOCKED(&sched_spinlock) {
   178b8:	2300      	movs	r3, #0
   178ba:	60fb      	str	r3, [r7, #12]
   178bc:	4b38      	ldr	r3, [pc, #224]	; (179a0 <z_impl_k_yield+0x104>)
   178be:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
   178c0:	f04f 0320 	mov.w	r3, #32
   178c4:	f3ef 8211 	mrs	r2, BASEPRI
   178c8:	f383 8811 	msr	BASEPRI, r3
   178cc:	f3bf 8f6f 	isb	sy
   178d0:	62ba      	str	r2, [r7, #40]	; 0x28
   178d2:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
   178d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = z_arch_irq_lock();
   178d6:	603b      	str	r3, [r7, #0]
	return k;
   178d8:	683b      	ldr	r3, [r7, #0]
   178da:	60bb      	str	r3, [r7, #8]
   178dc:	e054      	b.n	17988 <z_impl_k_yield+0xec>
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   178de:	4b2f      	ldr	r3, [pc, #188]	; (1799c <z_impl_k_yield+0x100>)
   178e0:	689b      	ldr	r3, [r3, #8]
   178e2:	4619      	mov	r1, r3
   178e4:	482f      	ldr	r0, [pc, #188]	; (179a4 <z_impl_k_yield+0x108>)
   178e6:	f7ff ffa9 	bl	1783c <z_priq_dumb_remove>
						 _current);
				_priq_run_add(&_kernel.ready_q.runq,
   178ea:	4b2c      	ldr	r3, [pc, #176]	; (1799c <z_impl_k_yield+0x100>)
   178ec:	689b      	ldr	r3, [r3, #8]
   178ee:	4a2d      	ldr	r2, [pc, #180]	; (179a4 <z_impl_k_yield+0x108>)
   178f0:	61ba      	str	r2, [r7, #24]
   178f2:	617b      	str	r3, [r7, #20]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   178f4:	69b8      	ldr	r0, [r7, #24]
   178f6:	f013 f86e 	bl	2a9d6 <sys_dlist_peek_head>
   178fa:	4603      	mov	r3, r0
   178fc:	2b00      	cmp	r3, #0
   178fe:	d004      	beq.n	1790a <z_impl_k_yield+0x6e>
   17900:	69b8      	ldr	r0, [r7, #24]
   17902:	f013 f868 	bl	2a9d6 <sys_dlist_peek_head>
   17906:	4603      	mov	r3, r0
   17908:	e000      	b.n	1790c <z_impl_k_yield+0x70>
   1790a:	2300      	movs	r3, #0
   1790c:	613b      	str	r3, [r7, #16]
   1790e:	e023      	b.n	17958 <z_impl_k_yield+0xbc>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
   17910:	6939      	ldr	r1, [r7, #16]
   17912:	6978      	ldr	r0, [r7, #20]
   17914:	f013 fac5 	bl	2aea2 <z_is_t1_higher_prio_than_t2>
   17918:	4603      	mov	r3, r0
   1791a:	2b00      	cmp	r3, #0
   1791c:	d006      	beq.n	1792c <z_impl_k_yield+0x90>
			sys_dlist_insert(&t->base.qnode_dlist,
   1791e:	693b      	ldr	r3, [r7, #16]
   17920:	697a      	ldr	r2, [r7, #20]
   17922:	4611      	mov	r1, r2
   17924:	4618      	mov	r0, r3
   17926:	f013 f8a6 	bl	2aa76 <sys_dlist_insert>
   1792a:	e01d      	b.n	17968 <z_impl_k_yield+0xcc>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1792c:	693b      	ldr	r3, [r7, #16]
   1792e:	2b00      	cmp	r3, #0
   17930:	d010      	beq.n	17954 <z_impl_k_yield+0xb8>
   17932:	693b      	ldr	r3, [r7, #16]
   17934:	4619      	mov	r1, r3
   17936:	69b8      	ldr	r0, [r7, #24]
   17938:	f013 f872 	bl	2aa20 <sys_dlist_peek_next>
   1793c:	4603      	mov	r3, r0
   1793e:	2b00      	cmp	r3, #0
   17940:	d006      	beq.n	17950 <z_impl_k_yield+0xb4>
   17942:	693b      	ldr	r3, [r7, #16]
   17944:	4619      	mov	r1, r3
   17946:	69b8      	ldr	r0, [r7, #24]
   17948:	f013 f86a 	bl	2aa20 <sys_dlist_peek_next>
   1794c:	4603      	mov	r3, r0
   1794e:	e002      	b.n	17956 <z_impl_k_yield+0xba>
   17950:	2300      	movs	r3, #0
   17952:	e000      	b.n	17956 <z_impl_k_yield+0xba>
   17954:	2300      	movs	r3, #0
   17956:	613b      	str	r3, [r7, #16]
   17958:	693b      	ldr	r3, [r7, #16]
   1795a:	2b00      	cmp	r3, #0
   1795c:	d1d8      	bne.n	17910 <z_impl_k_yield+0x74>
	sys_dlist_append(pq, &thread->base.qnode_dlist);
   1795e:	697b      	ldr	r3, [r7, #20]
   17960:	4619      	mov	r1, r3
   17962:	69b8      	ldr	r0, [r7, #24]
   17964:	f013 f86f 	bl	2aa46 <sys_dlist_append>
					      _current);
			}
			update_cache(1);
   17968:	2001      	movs	r0, #1
   1796a:	f7ff fb69 	bl	17040 <update_cache>
   1796e:	4b0c      	ldr	r3, [pc, #48]	; (179a0 <z_impl_k_yield+0x104>)
   17970:	623b      	str	r3, [r7, #32]
   17972:	68bb      	ldr	r3, [r7, #8]
   17974:	607b      	str	r3, [r7, #4]
	z_arch_irq_unlock(key.key);
   17976:	687b      	ldr	r3, [r7, #4]
   17978:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   1797a:	69fb      	ldr	r3, [r7, #28]
   1797c:	f383 8811 	msr	BASEPRI, r3
   17980:	f3bf 8f6f 	isb	sy
		LOCKED(&sched_spinlock) {
   17984:	2301      	movs	r3, #1
   17986:	60fb      	str	r3, [r7, #12]
   17988:	68fb      	ldr	r3, [r7, #12]
   1798a:	2b00      	cmp	r3, #0
   1798c:	d0a7      	beq.n	178de <z_impl_k_yield+0x42>
		}
	}
	z_swap_unlocked();
   1798e:	f013 fa59 	bl	2ae44 <z_swap_unlocked>
}
   17992:	bf00      	nop
   17994:	3730      	adds	r7, #48	; 0x30
   17996:	46bd      	mov	sp, r7
   17998:	bd80      	pop	{r7, pc}
   1799a:	bf00      	nop
   1799c:	20006178 	.word	0x20006178
   179a0:	200061a8 	.word	0x200061a8
   179a4:	200061a0 	.word	0x200061a0

000179a8 <z_impl_k_sleep>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE_VOID(k_yield);
#endif

s32_t z_impl_k_sleep(s32_t duration)
{
   179a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179ac:	b091      	sub	sp, #68	; 0x44
   179ae:	af00      	add	r7, sp, #0
   179b0:	60f8      	str	r0, [r7, #12]
	__ASSERT(!z_is_in_isr(), "");

	K_DEBUG("thread %p for %d ns\n", _current, duration);

	/* wait of 0 ms is treated as a 'yield' */
	if (duration == 0) {
   179b2:	68fb      	ldr	r3, [r7, #12]
   179b4:	2b00      	cmp	r3, #0
   179b6:	d103      	bne.n	179c0 <z_impl_k_sleep+0x18>
		k_yield();
   179b8:	f013 f8ce 	bl	2ab58 <k_yield>
		return 0;
   179bc:	2300      	movs	r3, #0
   179be:	e0de      	b.n	17b7e <z_impl_k_sleep+0x1d6>
   179c0:	68fb      	ldr	r3, [r7, #12]
   179c2:	623b      	str	r3, [r7, #32]
   179c4:	6a3b      	ldr	r3, [r7, #32]
   179c6:	461d      	mov	r5, r3
   179c8:	ea4f 76e5 	mov.w	r6, r5, asr #31
   179cc:	f013 f880 	bl	2aad0 <sys_clock_hw_cycles_per_sec>
   179d0:	4603      	mov	r3, r0
   179d2:	ea4f 74e3 	mov.w	r4, r3, asr #31
   179d6:	fb03 f106 	mul.w	r1, r3, r6
   179da:	fb05 f204 	mul.w	r2, r5, r4
   179de:	440a      	add	r2, r1
   179e0:	fba5 8903 	umull	r8, r9, r5, r3
   179e4:	eb02 0309 	add.w	r3, r2, r9
   179e8:	4699      	mov	r9, r3
   179ea:	f013 f871 	bl	2aad0 <sys_clock_hw_cycles_per_sec>
   179ee:	4603      	mov	r3, r0
   179f0:	4619      	mov	r1, r3
   179f2:	ea4f 72e1 	mov.w	r2, r1, asr #31
   179f6:	460b      	mov	r3, r1
   179f8:	4614      	mov	r4, r2
   179fa:	f04f 0500 	mov.w	r5, #0
   179fe:	f04f 0600 	mov.w	r6, #0
   17a02:	0166      	lsls	r6, r4, #5
   17a04:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
   17a08:	015d      	lsls	r5, r3, #5
   17a0a:	462b      	mov	r3, r5
   17a0c:	4634      	mov	r4, r6
   17a0e:	1a5b      	subs	r3, r3, r1
   17a10:	eb64 0402 	sbc.w	r4, r4, r2
   17a14:	f04f 0500 	mov.w	r5, #0
   17a18:	f04f 0600 	mov.w	r6, #0
   17a1c:	00a6      	lsls	r6, r4, #2
   17a1e:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
   17a22:	009d      	lsls	r5, r3, #2
   17a24:	462b      	mov	r3, r5
   17a26:	4634      	mov	r4, r6
   17a28:	185b      	adds	r3, r3, r1
   17a2a:	eb42 0404 	adc.w	r4, r2, r4
   17a2e:	f04f 0100 	mov.w	r1, #0
   17a32:	f04f 0200 	mov.w	r2, #0
   17a36:	00e2      	lsls	r2, r4, #3
   17a38:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   17a3c:	00d9      	lsls	r1, r3, #3
   17a3e:	460b      	mov	r3, r1
   17a40:	4614      	mov	r4, r2
   17a42:	4618      	mov	r0, r3
   17a44:	4621      	mov	r1, r4
   17a46:	f04f 0264 	mov.w	r2, #100	; 0x64
   17a4a:	f04f 0300 	mov.w	r3, #0
   17a4e:	f7e8 fe2b 	bl	6a8 <__aeabi_ldivmod>
   17a52:	4603      	mov	r3, r0
   17a54:	460c      	mov	r4, r1
   17a56:	eb18 0a03 	adds.w	sl, r8, r3
   17a5a:	eb49 0b04 	adc.w	fp, r9, r4
   17a5e:	f11a 33ff 	adds.w	r3, sl, #4294967295	; 0xffffffff
   17a62:	603b      	str	r3, [r7, #0]
   17a64:	f14b 33ff 	adc.w	r3, fp, #4294967295	; 0xffffffff
   17a68:	607b      	str	r3, [r7, #4]
   17a6a:	f013 f831 	bl	2aad0 <sys_clock_hw_cycles_per_sec>
   17a6e:	4603      	mov	r3, r0
   17a70:	4619      	mov	r1, r3
   17a72:	ea4f 72e1 	mov.w	r2, r1, asr #31
   17a76:	460b      	mov	r3, r1
   17a78:	4614      	mov	r4, r2
   17a7a:	f04f 0500 	mov.w	r5, #0
   17a7e:	f04f 0600 	mov.w	r6, #0
   17a82:	0166      	lsls	r6, r4, #5
   17a84:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
   17a88:	015d      	lsls	r5, r3, #5
   17a8a:	462b      	mov	r3, r5
   17a8c:	4634      	mov	r4, r6
   17a8e:	1a5b      	subs	r3, r3, r1
   17a90:	eb64 0402 	sbc.w	r4, r4, r2
   17a94:	f04f 0500 	mov.w	r5, #0
   17a98:	f04f 0600 	mov.w	r6, #0
   17a9c:	00a6      	lsls	r6, r4, #2
   17a9e:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
   17aa2:	009d      	lsls	r5, r3, #2
   17aa4:	462b      	mov	r3, r5
   17aa6:	4634      	mov	r4, r6
   17aa8:	185b      	adds	r3, r3, r1
   17aaa:	eb42 0404 	adc.w	r4, r2, r4
   17aae:	f04f 0100 	mov.w	r1, #0
   17ab2:	f04f 0200 	mov.w	r2, #0
   17ab6:	00e2      	lsls	r2, r4, #3
   17ab8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   17abc:	00d9      	lsls	r1, r3, #3
   17abe:	460b      	mov	r3, r1
   17ac0:	4614      	mov	r4, r2
   17ac2:	4618      	mov	r0, r3
   17ac4:	4621      	mov	r1, r4
   17ac6:	f04f 0264 	mov.w	r2, #100	; 0x64
   17aca:	f04f 0300 	mov.w	r3, #0
   17ace:	f7e8 fdeb 	bl	6a8 <__aeabi_ldivmod>
   17ad2:	4603      	mov	r3, r0
   17ad4:	460c      	mov	r4, r1
   17ad6:	461a      	mov	r2, r3
   17ad8:	4623      	mov	r3, r4
   17ada:	e9d7 0100 	ldrd	r0, r1, [r7]
   17ade:	f7e8 fde3 	bl	6a8 <__aeabi_ldivmod>
   17ae2:	4603      	mov	r3, r0
   17ae4:	460c      	mov	r4, r1
	}

	ticks = _TICK_ALIGN + z_ms_to_ticks(duration);
   17ae6:	3301      	adds	r3, #1
   17ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
	expected_wakeup_time = ticks + z_tick_get_32();
   17aea:	f014 fa2e 	bl	2bf4a <z_tick_get_32>
   17aee:	4602      	mov	r2, r0
   17af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17af2:	4413      	add	r3, r2
   17af4:	63bb      	str	r3, [r7, #56]	; 0x38
   17af6:	f107 0320 	add.w	r3, r7, #32
   17afa:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
   17afc:	f04f 0320 	mov.w	r3, #32
   17b00:	f3ef 8211 	mrs	r2, BASEPRI
   17b04:	f383 8811 	msr	BASEPRI, r3
   17b08:	f3bf 8f6f 	isb	sy
   17b0c:	62ba      	str	r2, [r7, #40]	; 0x28
   17b0e:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
   17b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = z_arch_irq_lock();
   17b12:	61bb      	str	r3, [r7, #24]
	return k;
   17b14:	69bb      	ldr	r3, [r7, #24]
   17b16:	61fb      	str	r3, [r7, #28]
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   17b18:	4b1b      	ldr	r3, [pc, #108]	; (17b88 <z_impl_k_sleep+0x1e0>)
   17b1a:	689b      	ldr	r3, [r3, #8]
   17b1c:	4a1b      	ldr	r2, [pc, #108]	; (17b8c <z_impl_k_sleep+0x1e4>)
   17b1e:	6013      	str	r3, [r2, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   17b20:	4b19      	ldr	r3, [pc, #100]	; (17b88 <z_impl_k_sleep+0x1e0>)
   17b22:	689b      	ldr	r3, [r3, #8]
   17b24:	4618      	mov	r0, r3
   17b26:	f7ff fbd7 	bl	172d8 <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, ticks);
   17b2a:	4b17      	ldr	r3, [pc, #92]	; (17b88 <z_impl_k_sleep+0x1e0>)
   17b2c:	689b      	ldr	r3, [r3, #8]
   17b2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   17b30:	4618      	mov	r0, r3
   17b32:	f7ff f87f 	bl	16c34 <z_add_thread_timeout>
	z_mark_thread_as_suspended(_current);
   17b36:	4b14      	ldr	r3, [pc, #80]	; (17b88 <z_impl_k_sleep+0x1e0>)
   17b38:	689b      	ldr	r3, [r3, #8]
   17b3a:	4618      	mov	r0, r3
   17b3c:	f013 f8bb 	bl	2acb6 <z_mark_thread_as_suspended>
   17b40:	f107 0320 	add.w	r3, r7, #32
   17b44:	637b      	str	r3, [r7, #52]	; 0x34
   17b46:	69fb      	ldr	r3, [r7, #28]
   17b48:	617b      	str	r3, [r7, #20]
   17b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17b4c:	633b      	str	r3, [r7, #48]	; 0x30
   17b4e:	697b      	ldr	r3, [r7, #20]
   17b50:	4618      	mov	r0, r3
   17b52:	f013 f96a 	bl	2ae2a <z_swap_irqlock>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   17b56:	f014 f9f8 	bl	2bf4a <z_tick_get_32>
   17b5a:	4602      	mov	r2, r0
   17b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17b5e:	1a9b      	subs	r3, r3, r2
   17b60:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (ticks > 0) {
   17b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17b64:	2b00      	cmp	r3, #0
   17b66:	dd09      	ble.n	17b7c <z_impl_k_sleep+0x1d4>
		return __ticks_to_ms(ticks);
   17b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17b6a:	ea4f 74e3 	mov.w	r4, r3, asr #31
   17b6e:	4618      	mov	r0, r3
   17b70:	4621      	mov	r1, r4
   17b72:	f012 ffb5 	bl	2aae0 <__ticks_to_ms>
   17b76:	4603      	mov	r3, r0
   17b78:	460c      	mov	r4, r1
   17b7a:	e000      	b.n	17b7e <z_impl_k_sleep+0x1d6>
	}
#endif

	return 0;
   17b7c:	2300      	movs	r3, #0
}
   17b7e:	4618      	mov	r0, r3
   17b80:	3744      	adds	r7, #68	; 0x44
   17b82:	46bd      	mov	sp, r7
   17b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b88:	20006178 	.word	0x20006178
   17b8c:	200061b0 	.word	0x200061b0

00017b90 <z_impl_k_current_get>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_wakeup, K_OBJ_THREAD, k_tid_t);
#endif

k_tid_t z_impl_k_current_get(void)
{
   17b90:	b480      	push	{r7}
   17b92:	af00      	add	r7, sp, #0
	return _current;
   17b94:	4b02      	ldr	r3, [pc, #8]	; (17ba0 <z_impl_k_current_get+0x10>)
   17b96:	689b      	ldr	r3, [r3, #8]
}
   17b98:	4618      	mov	r0, r3
   17b9a:	46bd      	mov	sp, r7
   17b9c:	bc80      	pop	{r7}
   17b9e:	4770      	bx	lr
   17ba0:	20006178 	.word	0x20006178

00017ba4 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   17ba4:	b580      	push	{r7, lr}
   17ba6:	b088      	sub	sp, #32
   17ba8:	af00      	add	r7, sp, #0
   17baa:	6078      	str	r0, [r7, #4]
   17bac:	4b0d      	ldr	r3, [pc, #52]	; (17be4 <z_impl_k_sem_give+0x40>)
   17bae:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   17bb0:	f04f 0320 	mov.w	r3, #32
   17bb4:	f3ef 8211 	mrs	r2, BASEPRI
   17bb8:	f383 8811 	msr	BASEPRI, r3
   17bbc:	f3bf 8f6f 	isb	sy
   17bc0:	61ba      	str	r2, [r7, #24]
   17bc2:	617b      	str	r3, [r7, #20]
	return key;
   17bc4:	69bb      	ldr	r3, [r7, #24]
	k.key = z_arch_irq_lock();
   17bc6:	60fb      	str	r3, [r7, #12]
	return k;
   17bc8:	68fb      	ldr	r3, [r7, #12]
   17bca:	613b      	str	r3, [r7, #16]
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
   17bcc:	6878      	ldr	r0, [r7, #4]
   17bce:	f013 fbdc 	bl	2b38a <do_sem_give>
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   17bd2:	6939      	ldr	r1, [r7, #16]
   17bd4:	4803      	ldr	r0, [pc, #12]	; (17be4 <z_impl_k_sem_give+0x40>)
   17bd6:	f013 fa8b 	bl	2b0f0 <z_reschedule>
}
   17bda:	bf00      	nop
   17bdc:	3720      	adds	r7, #32
   17bde:	46bd      	mov	sp, r7
   17be0:	bd80      	pop	{r7, pc}
   17be2:	bf00      	nop
   17be4:	200061b4 	.word	0x200061b4

00017be8 <z_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   17be8:	b580      	push	{r7, lr}
   17bea:	b08e      	sub	sp, #56	; 0x38
   17bec:	af00      	add	r7, sp, #0
   17bee:	6078      	str	r0, [r7, #4]
   17bf0:	6039      	str	r1, [r7, #0]
   17bf2:	4b24      	ldr	r3, [pc, #144]	; (17c84 <z_impl_k_sem_take+0x9c>)
   17bf4:	633b      	str	r3, [r7, #48]	; 0x30
	__asm__ volatile(
   17bf6:	f04f 0320 	mov.w	r3, #32
   17bfa:	f3ef 8211 	mrs	r2, BASEPRI
   17bfe:	f383 8811 	msr	BASEPRI, r3
   17c02:	f3bf 8f6f 	isb	sy
   17c06:	62fa      	str	r2, [r7, #44]	; 0x2c
   17c08:	62bb      	str	r3, [r7, #40]	; 0x28
	return key;
   17c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	k.key = z_arch_irq_lock();
   17c0c:	60bb      	str	r3, [r7, #8]
	return k;
   17c0e:	68bb      	ldr	r3, [r7, #8]
   17c10:	617b      	str	r3, [r7, #20]
	__ASSERT(((z_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   17c12:	687b      	ldr	r3, [r7, #4]
   17c14:	689b      	ldr	r3, [r3, #8]
   17c16:	2b00      	cmp	r3, #0
   17c18:	bf14      	ite	ne
   17c1a:	2301      	movne	r3, #1
   17c1c:	2300      	moveq	r3, #0
   17c1e:	b2db      	uxtb	r3, r3
   17c20:	2b00      	cmp	r3, #0
   17c22:	d011      	beq.n	17c48 <z_impl_k_sem_take+0x60>
		sem->count--;
   17c24:	687b      	ldr	r3, [r7, #4]
   17c26:	689b      	ldr	r3, [r3, #8]
   17c28:	1e5a      	subs	r2, r3, #1
   17c2a:	687b      	ldr	r3, [r7, #4]
   17c2c:	609a      	str	r2, [r3, #8]
   17c2e:	4b15      	ldr	r3, [pc, #84]	; (17c84 <z_impl_k_sem_take+0x9c>)
   17c30:	627b      	str	r3, [r7, #36]	; 0x24
   17c32:	697b      	ldr	r3, [r7, #20]
   17c34:	60fb      	str	r3, [r7, #12]
	z_arch_irq_unlock(key.key);
   17c36:	68fb      	ldr	r3, [r7, #12]
   17c38:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
   17c3a:	6a3b      	ldr	r3, [r7, #32]
   17c3c:	f383 8811 	msr	BASEPRI, r3
   17c40:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   17c44:	2300      	movs	r3, #0
   17c46:	e018      	b.n	17c7a <z_impl_k_sem_take+0x92>
	}

	if (timeout == K_NO_WAIT) {
   17c48:	683b      	ldr	r3, [r7, #0]
   17c4a:	2b00      	cmp	r3, #0
   17c4c:	d10d      	bne.n	17c6a <z_impl_k_sem_take+0x82>
   17c4e:	4b0d      	ldr	r3, [pc, #52]	; (17c84 <z_impl_k_sem_take+0x9c>)
   17c50:	61fb      	str	r3, [r7, #28]
   17c52:	697b      	ldr	r3, [r7, #20]
   17c54:	613b      	str	r3, [r7, #16]
   17c56:	693b      	ldr	r3, [r7, #16]
   17c58:	61bb      	str	r3, [r7, #24]
   17c5a:	69bb      	ldr	r3, [r7, #24]
   17c5c:	f383 8811 	msr	BASEPRI, r3
   17c60:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return -EBUSY;
   17c64:	f06f 030f 	mvn.w	r3, #15
   17c68:	e007      	b.n	17c7a <z_impl_k_sem_take+0x92>
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   17c6a:	687a      	ldr	r2, [r7, #4]
   17c6c:	683b      	ldr	r3, [r7, #0]
   17c6e:	6979      	ldr	r1, [r7, #20]
   17c70:	4804      	ldr	r0, [pc, #16]	; (17c84 <z_impl_k_sem_take+0x9c>)
   17c72:	f7ff fc59 	bl	17528 <z_pend_curr>
   17c76:	6378      	str	r0, [r7, #52]	; 0x34
	return ret;
   17c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   17c7a:	4618      	mov	r0, r3
   17c7c:	3738      	adds	r7, #56	; 0x38
   17c7e:	46bd      	mov	sp, r7
   17c80:	bd80      	pop	{r7, pc}
   17c82:	bf00      	nop
   17c84:	200061b4 	.word	0x200061b4

00017c88 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   17c88:	b580      	push	{r7, lr}
   17c8a:	b082      	sub	sp, #8
   17c8c:	af00      	add	r7, sp, #0
   17c8e:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   17c90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17c94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   17c98:	4906      	ldr	r1, [pc, #24]	; (17cb4 <k_sys_work_q_init+0x2c>)
   17c9a:	4807      	ldr	r0, [pc, #28]	; (17cb8 <k_sys_work_q_init+0x30>)
   17c9c:	f000 f97a 	bl	17f94 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");
   17ca0:	4906      	ldr	r1, [pc, #24]	; (17cbc <k_sys_work_q_init+0x34>)
   17ca2:	4807      	ldr	r0, [pc, #28]	; (17cc0 <k_sys_work_q_init+0x38>)
   17ca4:	f013 fb9a 	bl	2b3dc <k_thread_name_set>

	return 0;
   17ca8:	2300      	movs	r3, #0
}
   17caa:	4618      	mov	r0, r3
   17cac:	3708      	adds	r7, #8
   17cae:	46bd      	mov	sp, r7
   17cb0:	bd80      	pop	{r7, pc}
   17cb2:	bf00      	nop
   17cb4:	2000a528 	.word	0x2000a528
   17cb8:	200061b4 	.word	0x200061b4
   17cbc:	0002e8b0 	.word	0x0002e8b0
   17cc0:	200061c4 	.word	0x200061c4

00017cc4 <z_add_thread_timeout>:
{
   17cc4:	b580      	push	{r7, lr}
   17cc6:	b082      	sub	sp, #8
   17cc8:	af00      	add	r7, sp, #0
   17cca:	6078      	str	r0, [r7, #4]
   17ccc:	6039      	str	r1, [r7, #0]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   17cce:	687b      	ldr	r3, [r7, #4]
   17cd0:	3318      	adds	r3, #24
   17cd2:	683a      	ldr	r2, [r7, #0]
   17cd4:	4903      	ldr	r1, [pc, #12]	; (17ce4 <z_add_thread_timeout+0x20>)
   17cd6:	4618      	mov	r0, r3
   17cd8:	f000 fb40 	bl	1835c <z_add_timeout>
}
   17cdc:	bf00      	nop
   17cde:	3708      	adds	r7, #8
   17ce0:	46bd      	mov	sp, r7
   17ce2:	bd80      	pop	{r7, pc}
   17ce4:	000173e5 	.word	0x000173e5

00017ce8 <k_is_in_isr>:
	k_spin_unlock(&lock, key);
#endif
}

bool k_is_in_isr(void)
{
   17ce8:	b480      	push	{r7}
   17cea:	b083      	sub	sp, #12
   17cec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   17cee:	f3ef 8305 	mrs	r3, IPSR
   17cf2:	607b      	str	r3, [r7, #4]
  return(result);
   17cf4:	687b      	ldr	r3, [r7, #4]
	u32_t vector = __get_IPSR();
   17cf6:	603b      	str	r3, [r7, #0]
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   17cf8:	683b      	ldr	r3, [r7, #0]
   17cfa:	2b0d      	cmp	r3, #13
   17cfc:	d808      	bhi.n	17d10 <k_is_in_isr+0x28>
   17cfe:	683b      	ldr	r3, [r7, #0]
   17d00:	2b00      	cmp	r3, #0
   17d02:	d007      	beq.n	17d14 <k_is_in_isr+0x2c>
   17d04:	4b08      	ldr	r3, [pc, #32]	; (17d28 <k_is_in_isr+0x40>)
   17d06:	685b      	ldr	r3, [r3, #4]
   17d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   17d0c:	2b00      	cmp	r3, #0
   17d0e:	d101      	bne.n	17d14 <k_is_in_isr+0x2c>
   17d10:	2301      	movs	r3, #1
   17d12:	e000      	b.n	17d16 <k_is_in_isr+0x2e>
   17d14:	2300      	movs	r3, #0
   17d16:	f003 0301 	and.w	r3, r3, #1
   17d1a:	b2db      	uxtb	r3, r3
	return z_is_in_isr();
}
   17d1c:	4618      	mov	r0, r3
   17d1e:	370c      	adds	r7, #12
   17d20:	46bd      	mov	sp, r7
   17d22:	bc80      	pop	{r7}
   17d24:	4770      	bx	lr
   17d26:	bf00      	nop
   17d28:	e000ed00 	.word	0xe000ed00

00017d2c <z_thread_essential_clear>:
 * This function tags the current thread as not essential to system operation.
 * Exceptions raised by this thread may be recoverable.
 * (This is the default tag for a thread.)
 */
void z_thread_essential_clear(void)
{
   17d2c:	b480      	push	{r7}
   17d2e:	af00      	add	r7, sp, #0
	_current->base.user_options &= ~K_ESSENTIAL;
   17d30:	4b06      	ldr	r3, [pc, #24]	; (17d4c <z_thread_essential_clear+0x20>)
   17d32:	689b      	ldr	r3, [r3, #8]
   17d34:	7b1a      	ldrb	r2, [r3, #12]
   17d36:	4b05      	ldr	r3, [pc, #20]	; (17d4c <z_thread_essential_clear+0x20>)
   17d38:	689b      	ldr	r3, [r3, #8]
   17d3a:	f022 0201 	bic.w	r2, r2, #1
   17d3e:	b2d2      	uxtb	r2, r2
   17d40:	731a      	strb	r2, [r3, #12]
}
   17d42:	bf00      	nop
   17d44:	46bd      	mov	sp, r7
   17d46:	bc80      	pop	{r7}
   17d48:	4770      	bx	lr
   17d4a:	bf00      	nop
   17d4c:	20006178 	.word	0x20006178

00017d50 <z_is_thread_essential>:
 * This routine indicates if the current thread is an essential system thread.
 *
 * Returns true if current thread is essential, false if it is not.
 */
bool z_is_thread_essential(void)
{
   17d50:	b480      	push	{r7}
   17d52:	af00      	add	r7, sp, #0
	return (_current->base.user_options & K_ESSENTIAL) == K_ESSENTIAL;
   17d54:	4b06      	ldr	r3, [pc, #24]	; (17d70 <z_is_thread_essential+0x20>)
   17d56:	689b      	ldr	r3, [r3, #8]
   17d58:	7b1b      	ldrb	r3, [r3, #12]
   17d5a:	f003 0301 	and.w	r3, r3, #1
   17d5e:	2b00      	cmp	r3, #0
   17d60:	bf14      	ite	ne
   17d62:	2301      	movne	r3, #1
   17d64:	2300      	moveq	r3, #0
   17d66:	b2db      	uxtb	r3, r3
}
   17d68:	4618      	mov	r0, r3
   17d6a:	46bd      	mov	sp, r7
   17d6c:	bc80      	pop	{r7}
   17d6e:	4770      	bx	lr
   17d70:	20006178 	.word	0x20006178

00017d74 <z_impl_k_busy_wait>:

#ifdef CONFIG_SYS_CLOCK_EXISTS
void z_impl_k_busy_wait(u32_t usec_to_wait)
{
   17d74:	b5f0      	push	{r4, r5, r6, r7, lr}
   17d76:	b087      	sub	sp, #28
   17d78:	af00      	add	r7, sp, #0
   17d7a:	6078      	str	r0, [r7, #4]
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	/* use 64-bit math to prevent overflow when multiplying */
	u32_t cycles_to_wait = (u32_t)(
		(u64_t)usec_to_wait *
   17d7c:	687b      	ldr	r3, [r7, #4]
   17d7e:	461d      	mov	r5, r3
   17d80:	f04f 0600 	mov.w	r6, #0
		(u64_t)sys_clock_hw_cycles_per_sec() /
   17d84:	f013 fb57 	bl	2b436 <sys_clock_hw_cycles_per_sec>
   17d88:	4603      	mov	r3, r0
   17d8a:	ea4f 74e3 	mov.w	r4, r3, asr #31
		(u64_t)usec_to_wait *
   17d8e:	fb03 f106 	mul.w	r1, r3, r6
   17d92:	fb05 f204 	mul.w	r2, r5, r4
   17d96:	440a      	add	r2, r1
   17d98:	fba5 0103 	umull	r0, r1, r5, r3
   17d9c:	1853      	adds	r3, r2, r1
   17d9e:	4619      	mov	r1, r3
		(u64_t)sys_clock_hw_cycles_per_sec() /
   17da0:	4a0c      	ldr	r2, [pc, #48]	; (17dd4 <z_impl_k_busy_wait+0x60>)
   17da2:	f04f 0300 	mov.w	r3, #0
   17da6:	f7e8 fccf 	bl	748 <__aeabi_uldivmod>
   17daa:	4603      	mov	r3, r0
   17dac:	460c      	mov	r4, r1
	u32_t cycles_to_wait = (u32_t)(
   17dae:	617b      	str	r3, [r7, #20]
		(u64_t)USEC_PER_SEC
	);
	u32_t start_cycles = k_cycle_get_32();
   17db0:	f7f9 fcc4 	bl	1173c <z_timer_cycle_get_32>
   17db4:	6138      	str	r0, [r7, #16]

	for (;;) {
		u32_t current_cycles = k_cycle_get_32();
   17db6:	f7f9 fcc1 	bl	1173c <z_timer_cycle_get_32>
   17dba:	60f8      	str	r0, [r7, #12]

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
   17dbc:	68fa      	ldr	r2, [r7, #12]
   17dbe:	693b      	ldr	r3, [r7, #16]
   17dc0:	1ad3      	subs	r3, r2, r3
   17dc2:	697a      	ldr	r2, [r7, #20]
   17dc4:	429a      	cmp	r2, r3
   17dc6:	d900      	bls.n	17dca <z_impl_k_busy_wait+0x56>
	for (;;) {
   17dc8:	e7f5      	b.n	17db6 <z_impl_k_busy_wait+0x42>
			break;
   17dca:	bf00      	nop
		}
	}
#else
	z_arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
}
   17dcc:	bf00      	nop
   17dce:	371c      	adds	r7, #28
   17dd0:	46bd      	mov	sp, r7
   17dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17dd4:	000f4240 	.word	0x000f4240

00017dd8 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
   17dd8:	b580      	push	{r7, lr}
   17dda:	b08c      	sub	sp, #48	; 0x30
   17ddc:	af00      	add	r7, sp, #0
   17dde:	6078      	str	r0, [r7, #4]
   17de0:	4b1b      	ldr	r3, [pc, #108]	; (17e50 <z_impl_k_thread_start+0x78>)
   17de2:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
   17de4:	f04f 0320 	mov.w	r3, #32
   17de8:	f3ef 8211 	mrs	r2, BASEPRI
   17dec:	f383 8811 	msr	BASEPRI, r3
   17df0:	f3bf 8f6f 	isb	sy
   17df4:	62ba      	str	r2, [r7, #40]	; 0x28
   17df6:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
   17df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = z_arch_irq_lock();
   17dfa:	60fb      	str	r3, [r7, #12]
	return k;
   17dfc:	68fb      	ldr	r3, [r7, #12]
   17dfe:	617b      	str	r3, [r7, #20]
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
   17e00:	6878      	ldr	r0, [r7, #4]
   17e02:	f013 fbcb 	bl	2b59c <z_has_thread_started>
   17e06:	4603      	mov	r3, r0
   17e08:	2b00      	cmp	r3, #0
   17e0a:	d00b      	beq.n	17e24 <z_impl_k_thread_start+0x4c>
   17e0c:	4b10      	ldr	r3, [pc, #64]	; (17e50 <z_impl_k_thread_start+0x78>)
   17e0e:	623b      	str	r3, [r7, #32]
   17e10:	697b      	ldr	r3, [r7, #20]
   17e12:	613b      	str	r3, [r7, #16]
	z_arch_irq_unlock(key.key);
   17e14:	693b      	ldr	r3, [r7, #16]
   17e16:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   17e18:	69fb      	ldr	r3, [r7, #28]
   17e1a:	f383 8811 	msr	BASEPRI, r3
   17e1e:	f3bf 8f6f 	isb	sy
   17e22:	e011      	b.n	17e48 <z_impl_k_thread_start+0x70>
		k_spin_unlock(&lock, key);
		return;
	}

	z_mark_thread_as_started(thread);
   17e24:	6878      	ldr	r0, [r7, #4]
   17e26:	f013 fbcb 	bl	2b5c0 <z_mark_thread_as_started>
   17e2a:	687b      	ldr	r3, [r7, #4]
   17e2c:	61bb      	str	r3, [r7, #24]
	if (z_is_thread_ready(thread)) {
   17e2e:	69b8      	ldr	r0, [r7, #24]
   17e30:	f013 fb94 	bl	2b55c <z_is_thread_ready>
   17e34:	4603      	mov	r3, r0
   17e36:	2b00      	cmp	r3, #0
   17e38:	d002      	beq.n	17e40 <z_impl_k_thread_start+0x68>
		z_add_thread_to_ready_q(thread);
   17e3a:	69b8      	ldr	r0, [r7, #24]
   17e3c:	f7ff f956 	bl	170ec <z_add_thread_to_ready_q>
	z_ready_thread(thread);
	z_reschedule(&lock, key);
   17e40:	6979      	ldr	r1, [r7, #20]
   17e42:	4803      	ldr	r0, [pc, #12]	; (17e50 <z_impl_k_thread_start+0x78>)
   17e44:	f013 f954 	bl	2b0f0 <z_reschedule>
}
   17e48:	3730      	adds	r7, #48	; 0x30
   17e4a:	46bd      	mov	sp, r7
   17e4c:	bd80      	pop	{r7, pc}
   17e4e:	bf00      	nop
   17e50:	20006230 	.word	0x20006230

00017e54 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   17e54:	b580      	push	{r7, lr}
   17e56:	b08a      	sub	sp, #40	; 0x28
   17e58:	af06      	add	r7, sp, #24
   17e5a:	60f8      	str	r0, [r7, #12]
   17e5c:	60b9      	str	r1, [r7, #8]
   17e5e:	607a      	str	r2, [r7, #4]
   17e60:	603b      	str	r3, [r7, #0]
	stack_size = adjust_stack_size(stack_size);
   17e62:	6878      	ldr	r0, [r7, #4]
   17e64:	f013 fc73 	bl	2b74e <adjust_stack_size>
   17e68:	6078      	str	r0, [r7, #4]
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   17e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17e6c:	9304      	str	r3, [sp, #16]
   17e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17e70:	9303      	str	r3, [sp, #12]
   17e72:	6a3b      	ldr	r3, [r7, #32]
   17e74:	9302      	str	r3, [sp, #8]
   17e76:	69fb      	ldr	r3, [r7, #28]
   17e78:	9301      	str	r3, [sp, #4]
   17e7a:	69bb      	ldr	r3, [r7, #24]
   17e7c:	9300      	str	r3, [sp, #0]
   17e7e:	683b      	ldr	r3, [r7, #0]
   17e80:	687a      	ldr	r2, [r7, #4]
   17e82:	68b9      	ldr	r1, [r7, #8]
   17e84:	68f8      	ldr	r0, [r7, #12]
   17e86:	f7f9 fff1 	bl	11e6c <z_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   17e8a:	4b08      	ldr	r3, [pc, #32]	; (17eac <z_setup_new_thread+0x58>)
   17e8c:	689b      	ldr	r3, [r3, #8]
   17e8e:	2b00      	cmp	r3, #0
   17e90:	d103      	bne.n	17e9a <z_setup_new_thread+0x46>
		new_thread->resource_pool = NULL;
   17e92:	68fb      	ldr	r3, [r7, #12]
   17e94:	2200      	movs	r2, #0
   17e96:	661a      	str	r2, [r3, #96]	; 0x60
		return;
   17e98:	e004      	b.n	17ea4 <z_setup_new_thread+0x50>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   17e9a:	4b04      	ldr	r3, [pc, #16]	; (17eac <z_setup_new_thread+0x58>)
   17e9c:	689b      	ldr	r3, [r3, #8]
   17e9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   17ea0:	68fb      	ldr	r3, [r7, #12]
   17ea2:	661a      	str	r2, [r3, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   17ea4:	3710      	adds	r7, #16
   17ea6:	46bd      	mov	sp, r7
   17ea8:	bd80      	pop	{r7, pc}
   17eaa:	bf00      	nop
   17eac:	20006178 	.word	0x20006178

00017eb0 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   17eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   17eb2:	b08d      	sub	sp, #52	; 0x34
   17eb4:	af06      	add	r7, sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   17eb6:	4b28      	ldr	r3, [pc, #160]	; (17f58 <z_init_static_threads+0xa8>)
   17eb8:	617b      	str	r3, [r7, #20]
   17eba:	e029      	b.n	17f10 <z_init_static_threads+0x60>
		z_setup_new_thread(
   17ebc:	697b      	ldr	r3, [r7, #20]
   17ebe:	681e      	ldr	r6, [r3, #0]
   17ec0:	697b      	ldr	r3, [r7, #20]
   17ec2:	685b      	ldr	r3, [r3, #4]
   17ec4:	60fb      	str	r3, [r7, #12]
   17ec6:	697b      	ldr	r3, [r7, #20]
   17ec8:	689a      	ldr	r2, [r3, #8]
   17eca:	60ba      	str	r2, [r7, #8]
   17ecc:	697b      	ldr	r3, [r7, #20]
   17ece:	68d8      	ldr	r0, [r3, #12]
   17ed0:	6078      	str	r0, [r7, #4]
   17ed2:	697b      	ldr	r3, [r7, #20]
   17ed4:	691b      	ldr	r3, [r3, #16]
   17ed6:	697a      	ldr	r2, [r7, #20]
   17ed8:	6952      	ldr	r2, [r2, #20]
   17eda:	6979      	ldr	r1, [r7, #20]
   17edc:	6989      	ldr	r1, [r1, #24]
   17ede:	6978      	ldr	r0, [r7, #20]
   17ee0:	69c0      	ldr	r0, [r0, #28]
   17ee2:	697c      	ldr	r4, [r7, #20]
   17ee4:	6a24      	ldr	r4, [r4, #32]
   17ee6:	697d      	ldr	r5, [r7, #20]
   17ee8:	6aed      	ldr	r5, [r5, #44]	; 0x2c
   17eea:	9505      	str	r5, [sp, #20]
   17eec:	9404      	str	r4, [sp, #16]
   17eee:	9003      	str	r0, [sp, #12]
   17ef0:	9102      	str	r1, [sp, #8]
   17ef2:	9201      	str	r2, [sp, #4]
   17ef4:	9300      	str	r3, [sp, #0]
   17ef6:	687b      	ldr	r3, [r7, #4]
   17ef8:	68ba      	ldr	r2, [r7, #8]
   17efa:	68f9      	ldr	r1, [r7, #12]
   17efc:	4630      	mov	r0, r6
   17efe:	f7ff ffa9 	bl	17e54 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   17f02:	697b      	ldr	r3, [r7, #20]
   17f04:	681b      	ldr	r3, [r3, #0]
   17f06:	697a      	ldr	r2, [r7, #20]
   17f08:	64da      	str	r2, [r3, #76]	; 0x4c
	_FOREACH_STATIC_THREAD(thread_data) {
   17f0a:	697b      	ldr	r3, [r7, #20]
   17f0c:	3330      	adds	r3, #48	; 0x30
   17f0e:	617b      	str	r3, [r7, #20]
   17f10:	697b      	ldr	r3, [r7, #20]
   17f12:	4a12      	ldr	r2, [pc, #72]	; (17f5c <z_init_static_threads+0xac>)
   17f14:	4293      	cmp	r3, r2
   17f16:	d3d1      	bcc.n	17ebc <z_init_static_threads+0xc>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   17f18:	f7ff fc28 	bl	1776c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   17f1c:	4b0e      	ldr	r3, [pc, #56]	; (17f58 <z_init_static_threads+0xa8>)
   17f1e:	613b      	str	r3, [r7, #16]
   17f20:	e00f      	b.n	17f42 <z_init_static_threads+0x92>
		if (thread_data->init_delay != K_FOREVER) {
   17f22:	693b      	ldr	r3, [r7, #16]
   17f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17f26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   17f2a:	d007      	beq.n	17f3c <z_init_static_threads+0x8c>
			schedule_new_thread(thread_data->init_thread,
   17f2c:	693b      	ldr	r3, [r7, #16]
   17f2e:	681a      	ldr	r2, [r3, #0]
   17f30:	693b      	ldr	r3, [r7, #16]
   17f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17f34:	4619      	mov	r1, r3
   17f36:	4610      	mov	r0, r2
   17f38:	f013 fb5e 	bl	2b5f8 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
   17f3c:	693b      	ldr	r3, [r7, #16]
   17f3e:	3330      	adds	r3, #48	; 0x30
   17f40:	613b      	str	r3, [r7, #16]
   17f42:	693b      	ldr	r3, [r7, #16]
   17f44:	4a05      	ldr	r2, [pc, #20]	; (17f5c <z_init_static_threads+0xac>)
   17f46:	4293      	cmp	r3, r2
   17f48:	d3eb      	bcc.n	17f22 <z_init_static_threads+0x72>
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
   17f4a:	f7ff fc3d 	bl	177c8 <k_sched_unlock>
}
   17f4e:	bf00      	nop
   17f50:	371c      	adds	r7, #28
   17f52:	46bd      	mov	sp, r7
   17f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17f56:	bf00      	nop
   17f58:	2000fd3c 	.word	0x2000fd3c
   17f5c:	2000fd9c 	.word	0x2000fd9c

00017f60 <k_thread_user_mode_enter>:
	z_init_thread_timeout(thread_base);
}

FUNC_NORETURN void k_thread_user_mode_enter(k_thread_entry_t entry,
					    void *p1, void *p2, void *p3)
{
   17f60:	b580      	push	{r7, lr}
   17f62:	b084      	sub	sp, #16
   17f64:	af00      	add	r7, sp, #0
   17f66:	60f8      	str	r0, [r7, #12]
   17f68:	60b9      	str	r1, [r7, #8]
   17f6a:	607a      	str	r2, [r7, #4]
   17f6c:	603b      	str	r3, [r7, #0]
	_current->base.user_options |= K_USER;
   17f6e:	4b08      	ldr	r3, [pc, #32]	; (17f90 <k_thread_user_mode_enter+0x30>)
   17f70:	689b      	ldr	r3, [r3, #8]
   17f72:	7b1a      	ldrb	r2, [r3, #12]
   17f74:	4b06      	ldr	r3, [pc, #24]	; (17f90 <k_thread_user_mode_enter+0x30>)
   17f76:	689b      	ldr	r3, [r3, #8]
   17f78:	f042 0204 	orr.w	r2, r2, #4
   17f7c:	b2d2      	uxtb	r2, r2
   17f7e:	731a      	strb	r2, [r3, #12]
	z_thread_essential_clear();
   17f80:	f7ff fed4 	bl	17d2c <z_thread_essential_clear>
#endif
#ifdef CONFIG_USERSPACE
	z_arch_user_mode_enter(entry, p1, p2, p3);
#else
	/* XXX In this case we do not reset the stack */
	z_thread_entry(entry, p1, p2, p3);
   17f84:	683b      	ldr	r3, [r7, #0]
   17f86:	687a      	ldr	r2, [r7, #4]
   17f88:	68b9      	ldr	r1, [r7, #8]
   17f8a:	68f8      	ldr	r0, [r7, #12]
   17f8c:	f003 ffa9 	bl	1bee2 <z_thread_entry>
   17f90:	20006178 	.word	0x20006178

00017f94 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   17f94:	b580      	push	{r7, lr}
   17f96:	b08a      	sub	sp, #40	; 0x28
   17f98:	af06      	add	r7, sp, #24
   17f9a:	60f8      	str	r0, [r7, #12]
   17f9c:	60b9      	str	r1, [r7, #8]
   17f9e:	607a      	str	r2, [r7, #4]
   17fa0:	603b      	str	r3, [r7, #0]
	k_queue_init(&work_q->queue);
   17fa2:	68fb      	ldr	r3, [r7, #12]
   17fa4:	4618      	mov	r0, r3
   17fa6:	f013 fe5b 	bl	2bc60 <k_queue_init>
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   17faa:	68fb      	ldr	r3, [r7, #12]
   17fac:	f103 0010 	add.w	r0, r3, #16
   17fb0:	2300      	movs	r3, #0
   17fb2:	9305      	str	r3, [sp, #20]
   17fb4:	2300      	movs	r3, #0
   17fb6:	9304      	str	r3, [sp, #16]
   17fb8:	683b      	ldr	r3, [r7, #0]
   17fba:	9303      	str	r3, [sp, #12]
   17fbc:	2300      	movs	r3, #0
   17fbe:	9302      	str	r3, [sp, #8]
   17fc0:	2300      	movs	r3, #0
   17fc2:	9301      	str	r3, [sp, #4]
   17fc4:	68fb      	ldr	r3, [r7, #12]
   17fc6:	9300      	str	r3, [sp, #0]
   17fc8:	4b07      	ldr	r3, [pc, #28]	; (17fe8 <k_work_q_start+0x54>)
   17fca:	687a      	ldr	r2, [r7, #4]
   17fcc:	68b9      	ldr	r1, [r7, #8]
   17fce:	f013 fe1b 	bl	2bc08 <k_thread_create>
			work_q, NULL, NULL, prio, 0, 0);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
   17fd2:	68fb      	ldr	r3, [r7, #12]
   17fd4:	3310      	adds	r3, #16
   17fd6:	4905      	ldr	r1, [pc, #20]	; (17fec <k_work_q_start+0x58>)
   17fd8:	4618      	mov	r0, r3
   17fda:	f013 fe33 	bl	2bc44 <k_thread_name_set>
}
   17fde:	bf00      	nop
   17fe0:	3710      	adds	r7, #16
   17fe2:	46bd      	mov	sp, r7
   17fe4:	bd80      	pop	{r7, pc}
   17fe6:	bf00      	nop
   17fe8:	0001bfab 	.word	0x0001bfab
   17fec:	0002e8c0 	.word	0x0002e8c0

00017ff0 <k_delayed_work_init>:
	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
}

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
   17ff0:	b580      	push	{r7, lr}
   17ff2:	b082      	sub	sp, #8
   17ff4:	af00      	add	r7, sp, #0
   17ff6:	6078      	str	r0, [r7, #4]
   17ff8:	6039      	str	r1, [r7, #0]
	k_work_init(&work->work, handler);
   17ffa:	687b      	ldr	r3, [r7, #4]
   17ffc:	6839      	ldr	r1, [r7, #0]
   17ffe:	4618      	mov	r0, r3
   18000:	f013 fdc6 	bl	2bb90 <k_work_init>
	z_init_timeout(&work->timeout, work_timeout);
   18004:	687b      	ldr	r3, [r7, #4]
   18006:	330c      	adds	r3, #12
   18008:	4905      	ldr	r1, [pc, #20]	; (18020 <k_delayed_work_init+0x30>)
   1800a:	4618      	mov	r0, r3
   1800c:	f013 fe33 	bl	2bc76 <z_init_timeout>
	work->work_q = NULL;
   18010:	687b      	ldr	r3, [r7, #4]
   18012:	2200      	movs	r2, #0
   18014:	61da      	str	r2, [r3, #28]
}
   18016:	bf00      	nop
   18018:	3708      	adds	r7, #8
   1801a:	46bd      	mov	sp, r7
   1801c:	bd80      	pop	{r7, pc}
   1801e:	bf00      	nop
   18020:	0002bc91 	.word	0x0002bc91

00018024 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   s32_t delay)
{
   18024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18028:	b095      	sub	sp, #84	; 0x54
   1802a:	af00      	add	r7, sp, #0
   1802c:	6178      	str	r0, [r7, #20]
   1802e:	6139      	str	r1, [r7, #16]
   18030:	60fa      	str	r2, [r7, #12]
   18032:	4b79      	ldr	r3, [pc, #484]	; (18218 <k_delayed_work_submit_to_queue+0x1f4>)
   18034:	64bb      	str	r3, [r7, #72]	; 0x48
	__asm__ volatile(
   18036:	f04f 0320 	mov.w	r3, #32
   1803a:	f3ef 8211 	mrs	r2, BASEPRI
   1803e:	f383 8811 	msr	BASEPRI, r3
   18042:	f3bf 8f6f 	isb	sy
   18046:	647a      	str	r2, [r7, #68]	; 0x44
   18048:	643b      	str	r3, [r7, #64]	; 0x40
	return key;
   1804a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	k.key = z_arch_irq_lock();
   1804c:	61fb      	str	r3, [r7, #28]
	return k;
   1804e:	69fb      	ldr	r3, [r7, #28]
   18050:	62bb      	str	r3, [r7, #40]	; 0x28
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;
   18052:	2300      	movs	r3, #0
   18054:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   18056:	693b      	ldr	r3, [r7, #16]
   18058:	69db      	ldr	r3, [r3, #28]
   1805a:	2b00      	cmp	r3, #0
   1805c:	d008      	beq.n	18070 <k_delayed_work_submit_to_queue+0x4c>
   1805e:	693b      	ldr	r3, [r7, #16]
   18060:	69db      	ldr	r3, [r3, #28]
   18062:	697a      	ldr	r2, [r7, #20]
   18064:	429a      	cmp	r2, r3
   18066:	d003      	beq.n	18070 <k_delayed_work_submit_to_queue+0x4c>
		err = -EADDRINUSE;
   18068:	f06f 036f 	mvn.w	r3, #111	; 0x6f
   1806c:	64fb      	str	r3, [r7, #76]	; 0x4c
		goto done;
   1806e:	e0c2      	b.n	181f6 <k_delayed_work_submit_to_queue+0x1d2>
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
   18070:	693b      	ldr	r3, [r7, #16]
   18072:	69db      	ldr	r3, [r3, #28]
   18074:	697a      	ldr	r2, [r7, #20]
   18076:	429a      	cmp	r2, r3
   18078:	d107      	bne.n	1808a <k_delayed_work_submit_to_queue+0x66>
		err = work_cancel(work);
   1807a:	6938      	ldr	r0, [r7, #16]
   1807c:	f013 fe1a 	bl	2bcb4 <work_cancel>
   18080:	64f8      	str	r0, [r7, #76]	; 0x4c
		if (err < 0) {
   18082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   18084:	2b00      	cmp	r3, #0
   18086:	f2c0 80b5 	blt.w	181f4 <k_delayed_work_submit_to_queue+0x1d0>
			goto done;
		}
	}

	/* Attach workqueue so the timeout callback can submit it */
	work->work_q = work_q;
   1808a:	693b      	ldr	r3, [r7, #16]
   1808c:	697a      	ldr	r2, [r7, #20]
   1808e:	61da      	str	r2, [r3, #28]

	/* Submit work directly if no delay.  Note that this is a
	 * blocking operation, so release the lock first.
	 */
	if (delay == 0) {
   18090:	68fb      	ldr	r3, [r7, #12]
   18092:	2b00      	cmp	r3, #0
   18094:	d111      	bne.n	180ba <k_delayed_work_submit_to_queue+0x96>
   18096:	4b60      	ldr	r3, [pc, #384]	; (18218 <k_delayed_work_submit_to_queue+0x1f4>)
   18098:	63fb      	str	r3, [r7, #60]	; 0x3c
   1809a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1809c:	623b      	str	r3, [r7, #32]
	z_arch_irq_unlock(key.key);
   1809e:	6a3b      	ldr	r3, [r7, #32]
   180a0:	63bb      	str	r3, [r7, #56]	; 0x38
	__asm__ volatile(
   180a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   180a4:	f383 8811 	msr	BASEPRI, r3
   180a8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		k_work_submit_to_queue(work_q, &work->work);
   180ac:	693b      	ldr	r3, [r7, #16]
   180ae:	4619      	mov	r1, r3
   180b0:	6978      	ldr	r0, [r7, #20]
   180b2:	f013 fd80 	bl	2bbb6 <k_work_submit_to_queue>
		return 0;
   180b6:	2300      	movs	r3, #0
   180b8:	e0a9      	b.n	1820e <k_delayed_work_submit_to_queue+0x1ea>
	}

	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout,
   180ba:	693b      	ldr	r3, [r7, #16]
   180bc:	330c      	adds	r3, #12
   180be:	60bb      	str	r3, [r7, #8]
   180c0:	68fb      	ldr	r3, [r7, #12]
   180c2:	637b      	str	r3, [r7, #52]	; 0x34
   180c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   180c6:	461d      	mov	r5, r3
   180c8:	ea4f 76e5 	mov.w	r6, r5, asr #31
   180cc:	f013 fd49 	bl	2bb62 <sys_clock_hw_cycles_per_sec>
   180d0:	4603      	mov	r3, r0
   180d2:	ea4f 74e3 	mov.w	r4, r3, asr #31
   180d6:	fb03 f106 	mul.w	r1, r3, r6
   180da:	fb05 f204 	mul.w	r2, r5, r4
   180de:	440a      	add	r2, r1
   180e0:	fba5 8903 	umull	r8, r9, r5, r3
   180e4:	eb02 0309 	add.w	r3, r2, r9
   180e8:	4699      	mov	r9, r3
   180ea:	f013 fd3a 	bl	2bb62 <sys_clock_hw_cycles_per_sec>
   180ee:	4603      	mov	r3, r0
   180f0:	4619      	mov	r1, r3
   180f2:	ea4f 72e1 	mov.w	r2, r1, asr #31
   180f6:	460b      	mov	r3, r1
   180f8:	4614      	mov	r4, r2
   180fa:	f04f 0500 	mov.w	r5, #0
   180fe:	f04f 0600 	mov.w	r6, #0
   18102:	0166      	lsls	r6, r4, #5
   18104:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
   18108:	015d      	lsls	r5, r3, #5
   1810a:	462b      	mov	r3, r5
   1810c:	4634      	mov	r4, r6
   1810e:	1a5b      	subs	r3, r3, r1
   18110:	eb64 0402 	sbc.w	r4, r4, r2
   18114:	f04f 0500 	mov.w	r5, #0
   18118:	f04f 0600 	mov.w	r6, #0
   1811c:	00a6      	lsls	r6, r4, #2
   1811e:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
   18122:	009d      	lsls	r5, r3, #2
   18124:	462b      	mov	r3, r5
   18126:	4634      	mov	r4, r6
   18128:	185b      	adds	r3, r3, r1
   1812a:	eb42 0404 	adc.w	r4, r2, r4
   1812e:	f04f 0100 	mov.w	r1, #0
   18132:	f04f 0200 	mov.w	r2, #0
   18136:	00e2      	lsls	r2, r4, #3
   18138:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   1813c:	00d9      	lsls	r1, r3, #3
   1813e:	460b      	mov	r3, r1
   18140:	4614      	mov	r4, r2
   18142:	4618      	mov	r0, r3
   18144:	4621      	mov	r1, r4
   18146:	f04f 0264 	mov.w	r2, #100	; 0x64
   1814a:	f04f 0300 	mov.w	r3, #0
   1814e:	f7e8 faab 	bl	6a8 <__aeabi_ldivmod>
   18152:	4603      	mov	r3, r0
   18154:	460c      	mov	r4, r1
   18156:	eb18 0a03 	adds.w	sl, r8, r3
   1815a:	eb49 0b04 	adc.w	fp, r9, r4
   1815e:	f11a 32ff 	adds.w	r2, sl, #4294967295	; 0xffffffff
   18162:	603a      	str	r2, [r7, #0]
   18164:	f14b 32ff 	adc.w	r2, fp, #4294967295	; 0xffffffff
   18168:	607a      	str	r2, [r7, #4]
   1816a:	f013 fcfa 	bl	2bb62 <sys_clock_hw_cycles_per_sec>
   1816e:	4603      	mov	r3, r0
   18170:	4619      	mov	r1, r3
   18172:	ea4f 72e1 	mov.w	r2, r1, asr #31
   18176:	460b      	mov	r3, r1
   18178:	4614      	mov	r4, r2
   1817a:	f04f 0500 	mov.w	r5, #0
   1817e:	f04f 0600 	mov.w	r6, #0
   18182:	0166      	lsls	r6, r4, #5
   18184:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
   18188:	015d      	lsls	r5, r3, #5
   1818a:	462b      	mov	r3, r5
   1818c:	4634      	mov	r4, r6
   1818e:	1a5b      	subs	r3, r3, r1
   18190:	eb64 0402 	sbc.w	r4, r4, r2
   18194:	f04f 0500 	mov.w	r5, #0
   18198:	f04f 0600 	mov.w	r6, #0
   1819c:	00a6      	lsls	r6, r4, #2
   1819e:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
   181a2:	009d      	lsls	r5, r3, #2
   181a4:	462b      	mov	r3, r5
   181a6:	4634      	mov	r4, r6
   181a8:	185b      	adds	r3, r3, r1
   181aa:	eb42 0404 	adc.w	r4, r2, r4
   181ae:	f04f 0100 	mov.w	r1, #0
   181b2:	f04f 0200 	mov.w	r2, #0
   181b6:	00e2      	lsls	r2, r4, #3
   181b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   181bc:	00d9      	lsls	r1, r3, #3
   181be:	460b      	mov	r3, r1
   181c0:	4614      	mov	r4, r2
   181c2:	4618      	mov	r0, r3
   181c4:	4621      	mov	r1, r4
   181c6:	f04f 0264 	mov.w	r2, #100	; 0x64
   181ca:	f04f 0300 	mov.w	r3, #0
   181ce:	f7e8 fa6b 	bl	6a8 <__aeabi_ldivmod>
   181d2:	4603      	mov	r3, r0
   181d4:	460c      	mov	r4, r1
   181d6:	461a      	mov	r2, r3
   181d8:	4623      	mov	r3, r4
   181da:	e9d7 0100 	ldrd	r0, r1, [r7]
   181de:	f7e8 fa63 	bl	6a8 <__aeabi_ldivmod>
   181e2:	4603      	mov	r3, r0
   181e4:	460c      	mov	r4, r1
   181e6:	3301      	adds	r3, #1
   181e8:	461a      	mov	r2, r3
   181ea:	490c      	ldr	r1, [pc, #48]	; (1821c <k_delayed_work_submit_to_queue+0x1f8>)
   181ec:	68b8      	ldr	r0, [r7, #8]
   181ee:	f000 f8b5 	bl	1835c <z_add_timeout>
   181f2:	e000      	b.n	181f6 <k_delayed_work_submit_to_queue+0x1d2>
			goto done;
   181f4:	bf00      	nop
   181f6:	4b08      	ldr	r3, [pc, #32]	; (18218 <k_delayed_work_submit_to_queue+0x1f4>)
   181f8:	633b      	str	r3, [r7, #48]	; 0x30
   181fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   181fc:	627b      	str	r3, [r7, #36]	; 0x24
   181fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18200:	62fb      	str	r3, [r7, #44]	; 0x2c
   18202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18204:	f383 8811 	msr	BASEPRI, r3
   18208:	f3bf 8f6f 	isb	sy
		     _TICK_ALIGN + z_ms_to_ticks(delay));

done:
	k_spin_unlock(&lock, key);
	return err;
   1820c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
   1820e:	4618      	mov	r0, r3
   18210:	3754      	adds	r7, #84	; 0x54
   18212:	46bd      	mov	sp, r7
   18214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18218:	20006230 	.word	0x20006230
   1821c:	0002bc91 	.word	0x0002bc91

00018220 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   18220:	b580      	push	{r7, lr}
   18222:	b08c      	sub	sp, #48	; 0x30
   18224:	af00      	add	r7, sp, #0
   18226:	6078      	str	r0, [r7, #4]
	if (!work->work_q) {
   18228:	687b      	ldr	r3, [r7, #4]
   1822a:	69db      	ldr	r3, [r3, #28]
   1822c:	2b00      	cmp	r3, #0
   1822e:	d102      	bne.n	18236 <k_delayed_work_cancel+0x16>
		return -EINVAL;
   18230:	f06f 0315 	mvn.w	r3, #21
   18234:	e01f      	b.n	18276 <k_delayed_work_cancel+0x56>
   18236:	4b12      	ldr	r3, [pc, #72]	; (18280 <k_delayed_work_cancel+0x60>)
   18238:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
   1823a:	f04f 0320 	mov.w	r3, #32
   1823e:	f3ef 8211 	mrs	r2, BASEPRI
   18242:	f383 8811 	msr	BASEPRI, r3
   18246:	f3bf 8f6f 	isb	sy
   1824a:	61fa      	str	r2, [r7, #28]
   1824c:	61bb      	str	r3, [r7, #24]
	return key;
   1824e:	69fb      	ldr	r3, [r7, #28]
	k.key = z_arch_irq_lock();
   18250:	613b      	str	r3, [r7, #16]
	return k;
   18252:	693b      	ldr	r3, [r7, #16]
   18254:	617b      	str	r3, [r7, #20]
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   18256:	6878      	ldr	r0, [r7, #4]
   18258:	f013 fd2c 	bl	2bcb4 <work_cancel>
   1825c:	62f8      	str	r0, [r7, #44]	; 0x2c
   1825e:	4b08      	ldr	r3, [pc, #32]	; (18280 <k_delayed_work_cancel+0x60>)
   18260:	62bb      	str	r3, [r7, #40]	; 0x28
   18262:	697b      	ldr	r3, [r7, #20]
   18264:	60fb      	str	r3, [r7, #12]
	z_arch_irq_unlock(key.key);
   18266:	68fb      	ldr	r3, [r7, #12]
   18268:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
   1826a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1826c:	f383 8811 	msr	BASEPRI, r3
   18270:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
   18274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   18276:	4618      	mov	r0, r3
   18278:	3730      	adds	r7, #48	; 0x30
   1827a:	46bd      	mov	sp, r7
   1827c:	bd80      	pop	{r7, pc}
   1827e:	bf00      	nop
   18280:	20006230 	.word	0x20006230

00018284 <first>:
#if defined(CONFIG_TIMER_READS_ITS_FREQUENCY_AT_RUNTIME)
int z_clock_hw_cycles_per_sec = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
#endif

static struct _timeout *first(void)
{
   18284:	b580      	push	{r7, lr}
   18286:	b082      	sub	sp, #8
   18288:	af00      	add	r7, sp, #0
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);
   1828a:	4804      	ldr	r0, [pc, #16]	; (1829c <first+0x18>)
   1828c:	f013 fd71 	bl	2bd72 <sys_dlist_peek_head>
   18290:	6078      	str	r0, [r7, #4]

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   18292:	687b      	ldr	r3, [r7, #4]
}
   18294:	4618      	mov	r0, r3
   18296:	3708      	adds	r7, #8
   18298:	46bd      	mov	sp, r7
   1829a:	bd80      	pop	{r7, pc}
   1829c:	2000fc74 	.word	0x2000fc74

000182a0 <next>:

static struct _timeout *next(struct _timeout *t)
{
   182a0:	b580      	push	{r7, lr}
   182a2:	b084      	sub	sp, #16
   182a4:	af00      	add	r7, sp, #0
   182a6:	6078      	str	r0, [r7, #4]
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);
   182a8:	687b      	ldr	r3, [r7, #4]
   182aa:	4619      	mov	r1, r3
   182ac:	4804      	ldr	r0, [pc, #16]	; (182c0 <next+0x20>)
   182ae:	f013 fd85 	bl	2bdbc <sys_dlist_peek_next>
   182b2:	60f8      	str	r0, [r7, #12]

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
   182b4:	68fb      	ldr	r3, [r7, #12]
}
   182b6:	4618      	mov	r0, r3
   182b8:	3710      	adds	r7, #16
   182ba:	46bd      	mov	sp, r7
   182bc:	bd80      	pop	{r7, pc}
   182be:	bf00      	nop
   182c0:	2000fc74 	.word	0x2000fc74

000182c4 <elapsed>:

	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
   182c4:	b580      	push	{r7, lr}
   182c6:	af00      	add	r7, sp, #0
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   182c8:	4b05      	ldr	r3, [pc, #20]	; (182e0 <elapsed+0x1c>)
   182ca:	681b      	ldr	r3, [r3, #0]
   182cc:	2b00      	cmp	r3, #0
   182ce:	d103      	bne.n	182d8 <elapsed+0x14>
   182d0:	f7f9 f9f8 	bl	116c4 <z_clock_elapsed>
   182d4:	4603      	mov	r3, r0
   182d6:	e000      	b.n	182da <elapsed+0x16>
   182d8:	2300      	movs	r3, #0
}
   182da:	4618      	mov	r0, r3
   182dc:	bd80      	pop	{r7, pc}
   182de:	bf00      	nop
   182e0:	20006230 	.word	0x20006230

000182e4 <next_timeout>:

static s32_t next_timeout(void)
{
   182e4:	b590      	push	{r4, r7, lr}
   182e6:	b085      	sub	sp, #20
   182e8:	af00      	add	r7, sp, #0
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
   182ea:	4b1a      	ldr	r3, [pc, #104]	; (18354 <next_timeout+0x70>)
   182ec:	781b      	ldrb	r3, [r3, #0]
   182ee:	2b00      	cmp	r3, #0
   182f0:	d002      	beq.n	182f8 <next_timeout+0x14>
   182f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   182f6:	e001      	b.n	182fc <next_timeout+0x18>
   182f8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   182fc:	60bb      	str	r3, [r7, #8]
	struct _timeout *to = first();
   182fe:	f7ff ffc1 	bl	18284 <first>
   18302:	6078      	str	r0, [r7, #4]
	s32_t ret = to == NULL ? maxw : MAX(0, to->dticks - elapsed());
   18304:	687b      	ldr	r3, [r7, #4]
   18306:	2b00      	cmp	r3, #0
   18308:	d010      	beq.n	1832c <next_timeout+0x48>
   1830a:	687b      	ldr	r3, [r7, #4]
   1830c:	689c      	ldr	r4, [r3, #8]
   1830e:	f7ff ffd9 	bl	182c4 <elapsed>
   18312:	4603      	mov	r3, r0
   18314:	1ae3      	subs	r3, r4, r3
   18316:	2b00      	cmp	r3, #0
   18318:	db06      	blt.n	18328 <next_timeout+0x44>
   1831a:	687b      	ldr	r3, [r7, #4]
   1831c:	689c      	ldr	r4, [r3, #8]
   1831e:	f7ff ffd1 	bl	182c4 <elapsed>
   18322:	4603      	mov	r3, r0
   18324:	1ae3      	subs	r3, r4, r3
   18326:	e002      	b.n	1832e <next_timeout+0x4a>
   18328:	2300      	movs	r3, #0
   1832a:	e000      	b.n	1832e <next_timeout+0x4a>
   1832c:	68bb      	ldr	r3, [r7, #8]
   1832e:	60fb      	str	r3, [r7, #12]

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   18330:	4b09      	ldr	r3, [pc, #36]	; (18358 <next_timeout+0x74>)
   18332:	691b      	ldr	r3, [r3, #16]
   18334:	2b00      	cmp	r3, #0
   18336:	d007      	beq.n	18348 <next_timeout+0x64>
   18338:	4b07      	ldr	r3, [pc, #28]	; (18358 <next_timeout+0x74>)
   1833a:	691b      	ldr	r3, [r3, #16]
   1833c:	68fa      	ldr	r2, [r7, #12]
   1833e:	429a      	cmp	r2, r3
   18340:	dd02      	ble.n	18348 <next_timeout+0x64>
		ret = _current_cpu->slice_ticks;
   18342:	4b05      	ldr	r3, [pc, #20]	; (18358 <next_timeout+0x74>)
   18344:	691b      	ldr	r3, [r3, #16]
   18346:	60fb      	str	r3, [r7, #12]
	}
#endif
	return ret;
   18348:	68fb      	ldr	r3, [r7, #12]
}
   1834a:	4618      	mov	r0, r3
   1834c:	3714      	adds	r7, #20
   1834e:	46bd      	mov	sp, r7
   18350:	bd90      	pop	{r4, r7, pc}
   18352:	bf00      	nop
   18354:	2000624c 	.word	0x2000624c
   18358:	20006178 	.word	0x20006178

0001835c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
   1835c:	b580      	push	{r7, lr}
   1835e:	b08e      	sub	sp, #56	; 0x38
   18360:	af00      	add	r7, sp, #0
   18362:	60f8      	str	r0, [r7, #12]
   18364:	60b9      	str	r1, [r7, #8]
   18366:	607a      	str	r2, [r7, #4]
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   18368:	68fb      	ldr	r3, [r7, #12]
   1836a:	68ba      	ldr	r2, [r7, #8]
   1836c:	60da      	str	r2, [r3, #12]
	ticks = MAX(1, ticks);
   1836e:	687b      	ldr	r3, [r7, #4]
   18370:	2b01      	cmp	r3, #1
   18372:	bfb8      	it	lt
   18374:	2301      	movlt	r3, #1
   18376:	607b      	str	r3, [r7, #4]

	LOCKED(&timeout_lock) {
   18378:	2300      	movs	r3, #0
   1837a:	61fb      	str	r3, [r7, #28]
   1837c:	4b33      	ldr	r3, [pc, #204]	; (1844c <z_add_timeout+0xf0>)
   1837e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm__ volatile(
   18380:	f04f 0320 	mov.w	r3, #32
   18384:	f3ef 8211 	mrs	r2, BASEPRI
   18388:	f383 8811 	msr	BASEPRI, r3
   1838c:	f3bf 8f6f 	isb	sy
   18390:	62fa      	str	r2, [r7, #44]	; 0x2c
   18392:	62bb      	str	r3, [r7, #40]	; 0x28
	return key;
   18394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	k.key = z_arch_irq_lock();
   18396:	613b      	str	r3, [r7, #16]
	return k;
   18398:	693b      	ldr	r3, [r7, #16]
   1839a:	61bb      	str	r3, [r7, #24]
   1839c:	e04e      	b.n	1843c <z_add_timeout+0xe0>
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1839e:	f7ff ff91 	bl	182c4 <elapsed>
   183a2:	4602      	mov	r2, r0
   183a4:	687b      	ldr	r3, [r7, #4]
   183a6:	441a      	add	r2, r3
   183a8:	68fb      	ldr	r3, [r7, #12]
   183aa:	609a      	str	r2, [r3, #8]
		for (t = first(); t != NULL; t = next(t)) {
   183ac:	f7ff ff6a 	bl	18284 <first>
   183b0:	6378      	str	r0, [r7, #52]	; 0x34
   183b2:	e01e      	b.n	183f2 <z_add_timeout+0x96>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   183b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   183b6:	689a      	ldr	r2, [r3, #8]
   183b8:	68fb      	ldr	r3, [r7, #12]
   183ba:	689b      	ldr	r3, [r3, #8]
   183bc:	429a      	cmp	r2, r3
   183be:	dd0d      	ble.n	183dc <z_add_timeout+0x80>
				t->dticks -= to->dticks;
   183c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   183c2:	689a      	ldr	r2, [r3, #8]
   183c4:	68fb      	ldr	r3, [r7, #12]
   183c6:	689b      	ldr	r3, [r3, #8]
   183c8:	1ad2      	subs	r2, r2, r3
   183ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   183cc:	609a      	str	r2, [r3, #8]
				sys_dlist_insert(&t->node, &to->node);
   183ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   183d0:	68fa      	ldr	r2, [r7, #12]
   183d2:	4611      	mov	r1, r2
   183d4:	4618      	mov	r0, r3
   183d6:	f013 fd1c 	bl	2be12 <sys_dlist_insert>
				break;
   183da:	e00d      	b.n	183f8 <z_add_timeout+0x9c>
			}
			to->dticks -= t->dticks;
   183dc:	68fb      	ldr	r3, [r7, #12]
   183de:	689a      	ldr	r2, [r3, #8]
   183e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   183e2:	689b      	ldr	r3, [r3, #8]
   183e4:	1ad2      	subs	r2, r2, r3
   183e6:	68fb      	ldr	r3, [r7, #12]
   183e8:	609a      	str	r2, [r3, #8]
		for (t = first(); t != NULL; t = next(t)) {
   183ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
   183ec:	f7ff ff58 	bl	182a0 <next>
   183f0:	6378      	str	r0, [r7, #52]	; 0x34
   183f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   183f4:	2b00      	cmp	r3, #0
   183f6:	d1dd      	bne.n	183b4 <z_add_timeout+0x58>
		}

		if (t == NULL) {
   183f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   183fa:	2b00      	cmp	r3, #0
   183fc:	d104      	bne.n	18408 <z_add_timeout+0xac>
			sys_dlist_append(&timeout_list, &to->node);
   183fe:	68fb      	ldr	r3, [r7, #12]
   18400:	4619      	mov	r1, r3
   18402:	4813      	ldr	r0, [pc, #76]	; (18450 <z_add_timeout+0xf4>)
   18404:	f013 fced 	bl	2bde2 <sys_dlist_append>
		}

		if (to == first()) {
   18408:	f7ff ff3c 	bl	18284 <first>
   1840c:	4602      	mov	r2, r0
   1840e:	68fb      	ldr	r3, [r7, #12]
   18410:	4293      	cmp	r3, r2
   18412:	d106      	bne.n	18422 <z_add_timeout+0xc6>
			z_clock_set_timeout(next_timeout(), false);
   18414:	f7ff ff66 	bl	182e4 <next_timeout>
   18418:	4603      	mov	r3, r0
   1841a:	2100      	movs	r1, #0
   1841c:	4618      	mov	r0, r3
   1841e:	f7f9 f8d9 	bl	115d4 <z_clock_set_timeout>
   18422:	4b0a      	ldr	r3, [pc, #40]	; (1844c <z_add_timeout+0xf0>)
   18424:	627b      	str	r3, [r7, #36]	; 0x24
   18426:	69bb      	ldr	r3, [r7, #24]
   18428:	617b      	str	r3, [r7, #20]
	z_arch_irq_unlock(key.key);
   1842a:	697b      	ldr	r3, [r7, #20]
   1842c:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
   1842e:	6a3b      	ldr	r3, [r7, #32]
   18430:	f383 8811 	msr	BASEPRI, r3
   18434:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   18438:	2301      	movs	r3, #1
   1843a:	61fb      	str	r3, [r7, #28]
   1843c:	69fb      	ldr	r3, [r7, #28]
   1843e:	2b00      	cmp	r3, #0
   18440:	d0ad      	beq.n	1839e <z_add_timeout+0x42>
		}
	}
}
   18442:	bf00      	nop
   18444:	3738      	adds	r7, #56	; 0x38
   18446:	46bd      	mov	sp, r7
   18448:	bd80      	pop	{r7, pc}
   1844a:	bf00      	nop
   1844c:	20006230 	.word	0x20006230
   18450:	2000fc74 	.word	0x2000fc74

00018454 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   18454:	b580      	push	{r7, lr}
   18456:	b08c      	sub	sp, #48	; 0x30
   18458:	af00      	add	r7, sp, #0
   1845a:	6078      	str	r0, [r7, #4]
	int ret = -EINVAL;
   1845c:	f06f 0315 	mvn.w	r3, #21
   18460:	62fb      	str	r3, [r7, #44]	; 0x2c

	LOCKED(&timeout_lock) {
   18462:	2300      	movs	r3, #0
   18464:	617b      	str	r3, [r7, #20]
   18466:	4b19      	ldr	r3, [pc, #100]	; (184cc <z_abort_timeout+0x78>)
   18468:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm__ volatile(
   1846a:	f04f 0320 	mov.w	r3, #32
   1846e:	f3ef 8211 	mrs	r2, BASEPRI
   18472:	f383 8811 	msr	BASEPRI, r3
   18476:	f3bf 8f6f 	isb	sy
   1847a:	627a      	str	r2, [r7, #36]	; 0x24
   1847c:	623b      	str	r3, [r7, #32]
	return key;
   1847e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	k.key = z_arch_irq_lock();
   18480:	60bb      	str	r3, [r7, #8]
	return k;
   18482:	68bb      	ldr	r3, [r7, #8]
   18484:	613b      	str	r3, [r7, #16]
   18486:	e018      	b.n	184ba <z_abort_timeout+0x66>
		if (sys_dnode_is_linked(&to->node)) {
   18488:	687b      	ldr	r3, [r7, #4]
   1848a:	4618      	mov	r0, r3
   1848c:	f013 fc50 	bl	2bd30 <sys_dnode_is_linked>
   18490:	4603      	mov	r3, r0
   18492:	2b00      	cmp	r3, #0
   18494:	d004      	beq.n	184a0 <z_abort_timeout+0x4c>
			remove_timeout(to);
   18496:	6878      	ldr	r0, [r7, #4]
   18498:	f013 fd3c 	bl	2bf14 <remove_timeout>
			ret = 0;
   1849c:	2300      	movs	r3, #0
   1849e:	62fb      	str	r3, [r7, #44]	; 0x2c
   184a0:	4b0a      	ldr	r3, [pc, #40]	; (184cc <z_abort_timeout+0x78>)
   184a2:	61fb      	str	r3, [r7, #28]
   184a4:	693b      	ldr	r3, [r7, #16]
   184a6:	60fb      	str	r3, [r7, #12]
	z_arch_irq_unlock(key.key);
   184a8:	68fb      	ldr	r3, [r7, #12]
   184aa:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
   184ac:	69bb      	ldr	r3, [r7, #24]
   184ae:	f383 8811 	msr	BASEPRI, r3
   184b2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   184b6:	2301      	movs	r3, #1
   184b8:	617b      	str	r3, [r7, #20]
   184ba:	697b      	ldr	r3, [r7, #20]
   184bc:	2b00      	cmp	r3, #0
   184be:	d0e3      	beq.n	18488 <z_abort_timeout+0x34>
		}
	}

	return ret;
   184c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   184c2:	4618      	mov	r0, r3
   184c4:	3730      	adds	r7, #48	; 0x30
   184c6:	46bd      	mov	sp, r7
   184c8:	bd80      	pop	{r7, pc}
   184ca:	bf00      	nop
   184cc:	20006230 	.word	0x20006230

000184d0 <z_timeout_remaining>:

s32_t z_timeout_remaining(struct _timeout *timeout)
{
   184d0:	b580      	push	{r7, lr}
   184d2:	b08e      	sub	sp, #56	; 0x38
   184d4:	af00      	add	r7, sp, #0
   184d6:	6078      	str	r0, [r7, #4]
	s32_t ticks = 0;
   184d8:	2300      	movs	r3, #0
   184da:	637b      	str	r3, [r7, #52]	; 0x34

	if (z_is_inactive_timeout(timeout)) {
   184dc:	6878      	ldr	r0, [r7, #4]
   184de:	f013 fd01 	bl	2bee4 <z_is_inactive_timeout>
   184e2:	4603      	mov	r3, r0
   184e4:	2b00      	cmp	r3, #0
   184e6:	d001      	beq.n	184ec <z_timeout_remaining+0x1c>
		return 0;
   184e8:	2300      	movs	r3, #0
   184ea:	e03d      	b.n	18568 <z_timeout_remaining+0x98>
	}

	LOCKED(&timeout_lock) {
   184ec:	2300      	movs	r3, #0
   184ee:	61bb      	str	r3, [r7, #24]
   184f0:	4b1f      	ldr	r3, [pc, #124]	; (18570 <z_timeout_remaining+0xa0>)
   184f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
   184f4:	f04f 0320 	mov.w	r3, #32
   184f8:	f3ef 8211 	mrs	r2, BASEPRI
   184fc:	f383 8811 	msr	BASEPRI, r3
   18500:	f3bf 8f6f 	isb	sy
   18504:	62ba      	str	r2, [r7, #40]	; 0x28
   18506:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
   18508:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = z_arch_irq_lock();
   1850a:	60fb      	str	r3, [r7, #12]
	return k;
   1850c:	68fb      	ldr	r3, [r7, #12]
   1850e:	617b      	str	r3, [r7, #20]
   18510:	e022      	b.n	18558 <z_timeout_remaining+0x88>
		for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   18512:	f7ff feb7 	bl	18284 <first>
   18516:	6338      	str	r0, [r7, #48]	; 0x30
   18518:	e00c      	b.n	18534 <z_timeout_remaining+0x64>
			ticks += t->dticks;
   1851a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1851c:	689b      	ldr	r3, [r3, #8]
   1851e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   18520:	4413      	add	r3, r2
   18522:	637b      	str	r3, [r7, #52]	; 0x34
			if (timeout == t) {
   18524:	687a      	ldr	r2, [r7, #4]
   18526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18528:	429a      	cmp	r2, r3
   1852a:	d007      	beq.n	1853c <z_timeout_remaining+0x6c>
		for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   1852c:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1852e:	f7ff feb7 	bl	182a0 <next>
   18532:	6338      	str	r0, [r7, #48]	; 0x30
   18534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18536:	2b00      	cmp	r3, #0
   18538:	d1ef      	bne.n	1851a <z_timeout_remaining+0x4a>
   1853a:	e000      	b.n	1853e <z_timeout_remaining+0x6e>
				break;
   1853c:	bf00      	nop
   1853e:	4b0c      	ldr	r3, [pc, #48]	; (18570 <z_timeout_remaining+0xa0>)
   18540:	623b      	str	r3, [r7, #32]
   18542:	697b      	ldr	r3, [r7, #20]
   18544:	613b      	str	r3, [r7, #16]
	z_arch_irq_unlock(key.key);
   18546:	693b      	ldr	r3, [r7, #16]
   18548:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   1854a:	69fb      	ldr	r3, [r7, #28]
   1854c:	f383 8811 	msr	BASEPRI, r3
   18550:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   18554:	2301      	movs	r3, #1
   18556:	61bb      	str	r3, [r7, #24]
   18558:	69bb      	ldr	r3, [r7, #24]
   1855a:	2b00      	cmp	r3, #0
   1855c:	d0d9      	beq.n	18512 <z_timeout_remaining+0x42>
			}
		}
	}

	return ticks - elapsed();
   1855e:	f7ff feb1 	bl	182c4 <elapsed>
   18562:	4602      	mov	r2, r0
   18564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18566:	1a9b      	subs	r3, r3, r2
}
   18568:	4618      	mov	r0, r3
   1856a:	3738      	adds	r7, #56	; 0x38
   1856c:	46bd      	mov	sp, r7
   1856e:	bd80      	pop	{r7, pc}
   18570:	20006230 	.word	0x20006230

00018574 <z_get_next_timeout_expiry>:

s32_t z_get_next_timeout_expiry(void)
{
   18574:	b580      	push	{r7, lr}
   18576:	b08a      	sub	sp, #40	; 0x28
   18578:	af00      	add	r7, sp, #0
	s32_t ret = K_FOREVER;
   1857a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1857e:	627b      	str	r3, [r7, #36]	; 0x24

	LOCKED(&timeout_lock) {
   18580:	2300      	movs	r3, #0
   18582:	60fb      	str	r3, [r7, #12]
   18584:	4b14      	ldr	r3, [pc, #80]	; (185d8 <z_get_next_timeout_expiry+0x64>)
   18586:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
   18588:	f04f 0320 	mov.w	r3, #32
   1858c:	f3ef 8211 	mrs	r2, BASEPRI
   18590:	f383 8811 	msr	BASEPRI, r3
   18594:	f3bf 8f6f 	isb	sy
   18598:	61fa      	str	r2, [r7, #28]
   1859a:	61bb      	str	r3, [r7, #24]
	return key;
   1859c:	69fb      	ldr	r3, [r7, #28]
	k.key = z_arch_irq_lock();
   1859e:	603b      	str	r3, [r7, #0]
	return k;
   185a0:	683b      	ldr	r3, [r7, #0]
   185a2:	60bb      	str	r3, [r7, #8]
   185a4:	e00f      	b.n	185c6 <z_get_next_timeout_expiry+0x52>
		ret = next_timeout();
   185a6:	f7ff fe9d 	bl	182e4 <next_timeout>
   185aa:	6278      	str	r0, [r7, #36]	; 0x24
   185ac:	4b0a      	ldr	r3, [pc, #40]	; (185d8 <z_get_next_timeout_expiry+0x64>)
   185ae:	617b      	str	r3, [r7, #20]
   185b0:	68bb      	ldr	r3, [r7, #8]
   185b2:	607b      	str	r3, [r7, #4]
	z_arch_irq_unlock(key.key);
   185b4:	687b      	ldr	r3, [r7, #4]
   185b6:	613b      	str	r3, [r7, #16]
	__asm__ volatile(
   185b8:	693b      	ldr	r3, [r7, #16]
   185ba:	f383 8811 	msr	BASEPRI, r3
   185be:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   185c2:	2301      	movs	r3, #1
   185c4:	60fb      	str	r3, [r7, #12]
   185c6:	68fb      	ldr	r3, [r7, #12]
   185c8:	2b00      	cmp	r3, #0
   185ca:	d0ec      	beq.n	185a6 <z_get_next_timeout_expiry+0x32>
	}
	return ret;
   185cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   185ce:	4618      	mov	r0, r3
   185d0:	3728      	adds	r7, #40	; 0x28
   185d2:	46bd      	mov	sp, r7
   185d4:	bd80      	pop	{r7, pc}
   185d6:	bf00      	nop
   185d8:	20006230 	.word	0x20006230

000185dc <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
   185dc:	b580      	push	{r7, lr}
   185de:	b08e      	sub	sp, #56	; 0x38
   185e0:	af00      	add	r7, sp, #0
   185e2:	6078      	str	r0, [r7, #4]
   185e4:	460b      	mov	r3, r1
   185e6:	70fb      	strb	r3, [r7, #3]
	LOCKED(&timeout_lock) {
   185e8:	2300      	movs	r3, #0
   185ea:	61bb      	str	r3, [r7, #24]
   185ec:	4b28      	ldr	r3, [pc, #160]	; (18690 <z_set_timeout_expiry+0xb4>)
   185ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
   185f0:	f04f 0320 	mov.w	r3, #32
   185f4:	f3ef 8211 	mrs	r2, BASEPRI
   185f8:	f383 8811 	msr	BASEPRI, r3
   185fc:	f3bf 8f6f 	isb	sy
   18600:	62ba      	str	r2, [r7, #40]	; 0x28
   18602:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
   18604:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = z_arch_irq_lock();
   18606:	60fb      	str	r3, [r7, #12]
	return k;
   18608:	68fb      	ldr	r3, [r7, #12]
   1860a:	617b      	str	r3, [r7, #20]
   1860c:	e039      	b.n	18682 <z_set_timeout_expiry+0xa6>
		int next = next_timeout();
   1860e:	f7ff fe69 	bl	182e4 <next_timeout>
   18612:	6378      	str	r0, [r7, #52]	; 0x34
		bool sooner = (next == K_FOREVER) || (ticks < next);
   18614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1861a:	d003      	beq.n	18624 <z_set_timeout_expiry+0x48>
   1861c:	687a      	ldr	r2, [r7, #4]
   1861e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18620:	429a      	cmp	r2, r3
   18622:	da01      	bge.n	18628 <z_set_timeout_expiry+0x4c>
   18624:	2301      	movs	r3, #1
   18626:	e000      	b.n	1862a <z_set_timeout_expiry+0x4e>
   18628:	2300      	movs	r3, #0
   1862a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
   1862e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   18632:	f003 0301 	and.w	r3, r3, #1
   18636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		bool imminent = next <= 1;
   1863a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1863c:	2b01      	cmp	r3, #1
   1863e:	bfd4      	ite	le
   18640:	2301      	movle	r3, #1
   18642:	2300      	movgt	r3, #0
   18644:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		 * what we have.  Also don't try to set a timeout when
		 * one is about to expire: drivers have internal logic
		 * that will bump the timeout to the "next" tick if
		 * it's not considered to be settable as directed.
		 */
		if (sooner && !imminent) {
   18648:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   1864c:	2b00      	cmp	r3, #0
   1864e:	d00b      	beq.n	18668 <z_set_timeout_expiry+0x8c>
   18650:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
   18654:	f083 0301 	eor.w	r3, r3, #1
   18658:	b2db      	uxtb	r3, r3
   1865a:	2b00      	cmp	r3, #0
   1865c:	d004      	beq.n	18668 <z_set_timeout_expiry+0x8c>
			z_clock_set_timeout(ticks, idle);
   1865e:	78fb      	ldrb	r3, [r7, #3]
   18660:	4619      	mov	r1, r3
   18662:	6878      	ldr	r0, [r7, #4]
   18664:	f7f8 ffb6 	bl	115d4 <z_clock_set_timeout>
   18668:	4b09      	ldr	r3, [pc, #36]	; (18690 <z_set_timeout_expiry+0xb4>)
   1866a:	623b      	str	r3, [r7, #32]
   1866c:	697b      	ldr	r3, [r7, #20]
   1866e:	613b      	str	r3, [r7, #16]
	z_arch_irq_unlock(key.key);
   18670:	693b      	ldr	r3, [r7, #16]
   18672:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   18674:	69fb      	ldr	r3, [r7, #28]
   18676:	f383 8811 	msr	BASEPRI, r3
   1867a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1867e:	2301      	movs	r3, #1
   18680:	61bb      	str	r3, [r7, #24]
   18682:	69bb      	ldr	r3, [r7, #24]
   18684:	2b00      	cmp	r3, #0
   18686:	d0c2      	beq.n	1860e <z_set_timeout_expiry+0x32>
		}
	}
}
   18688:	bf00      	nop
   1868a:	3738      	adds	r7, #56	; 0x38
   1868c:	46bd      	mov	sp, r7
   1868e:	bd80      	pop	{r7, pc}
   18690:	20006230 	.word	0x20006230

00018694 <z_clock_announce>:

void z_clock_announce(s32_t ticks)
{
   18694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18698:	b095      	sub	sp, #84	; 0x54
   1869a:	af00      	add	r7, sp, #0
   1869c:	6078      	str	r0, [r7, #4]
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1869e:	6878      	ldr	r0, [r7, #4]
   186a0:	f7fe fc92 	bl	16fc8 <z_time_slice>
   186a4:	4b4a      	ldr	r3, [pc, #296]	; (187d0 <z_clock_announce+0x13c>)
   186a6:	647b      	str	r3, [r7, #68]	; 0x44
	__asm__ volatile(
   186a8:	f04f 0320 	mov.w	r3, #32
   186ac:	f3ef 8211 	mrs	r2, BASEPRI
   186b0:	f383 8811 	msr	BASEPRI, r3
   186b4:	f3bf 8f6f 	isb	sy
   186b8:	643a      	str	r2, [r7, #64]	; 0x40
   186ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	return key;
   186bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	k.key = z_arch_irq_lock();
   186be:	617b      	str	r3, [r7, #20]
	return k;
   186c0:	697b      	ldr	r3, [r7, #20]
   186c2:	61fb      	str	r3, [r7, #28]
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   186c4:	4a43      	ldr	r2, [pc, #268]	; (187d4 <z_clock_announce+0x140>)
   186c6:	687b      	ldr	r3, [r7, #4]
   186c8:	6013      	str	r3, [r2, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   186ca:	e03e      	b.n	1874a <z_clock_announce+0xb6>
		struct _timeout *t = first();
   186cc:	f7ff fdda 	bl	18284 <first>
   186d0:	64f8      	str	r0, [r7, #76]	; 0x4c
		int dt = t->dticks;
   186d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   186d4:	689b      	ldr	r3, [r3, #8]
   186d6:	64bb      	str	r3, [r7, #72]	; 0x48

		curr_tick += dt;
   186d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   186da:	4619      	mov	r1, r3
   186dc:	ea4f 72e1 	mov.w	r2, r1, asr #31
   186e0:	4b3d      	ldr	r3, [pc, #244]	; (187d8 <z_clock_announce+0x144>)
   186e2:	e9d3 3400 	ldrd	r3, r4, [r3]
   186e6:	eb11 0803 	adds.w	r8, r1, r3
   186ea:	eb42 0904 	adc.w	r9, r2, r4
   186ee:	4b3a      	ldr	r3, [pc, #232]	; (187d8 <z_clock_announce+0x144>)
   186f0:	e9c3 8900 	strd	r8, r9, [r3]
		announce_remaining -= dt;
   186f4:	4b37      	ldr	r3, [pc, #220]	; (187d4 <z_clock_announce+0x140>)
   186f6:	681a      	ldr	r2, [r3, #0]
   186f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   186fa:	1ad3      	subs	r3, r2, r3
   186fc:	4a35      	ldr	r2, [pc, #212]	; (187d4 <z_clock_announce+0x140>)
   186fe:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
   18700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   18702:	2200      	movs	r2, #0
   18704:	609a      	str	r2, [r3, #8]
		remove_timeout(t);
   18706:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   18708:	f013 fc04 	bl	2bf14 <remove_timeout>
   1870c:	4b30      	ldr	r3, [pc, #192]	; (187d0 <z_clock_announce+0x13c>)
   1870e:	62fb      	str	r3, [r7, #44]	; 0x2c
   18710:	69fb      	ldr	r3, [r7, #28]
   18712:	613b      	str	r3, [r7, #16]
	z_arch_irq_unlock(key.key);
   18714:	693b      	ldr	r3, [r7, #16]
   18716:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm__ volatile(
   18718:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1871a:	f383 8811 	msr	BASEPRI, r3
   1871e:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   18722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   18724:	68db      	ldr	r3, [r3, #12]
   18726:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   18728:	4798      	blx	r3
   1872a:	4b29      	ldr	r3, [pc, #164]	; (187d0 <z_clock_announce+0x13c>)
   1872c:	63bb      	str	r3, [r7, #56]	; 0x38
	__asm__ volatile(
   1872e:	f04f 0320 	mov.w	r3, #32
   18732:	f3ef 8211 	mrs	r2, BASEPRI
   18736:	f383 8811 	msr	BASEPRI, r3
   1873a:	f3bf 8f6f 	isb	sy
   1873e:	637a      	str	r2, [r7, #52]	; 0x34
   18740:	633b      	str	r3, [r7, #48]	; 0x30
	return key;
   18742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	k.key = z_arch_irq_lock();
   18744:	60fb      	str	r3, [r7, #12]
	return k;
   18746:	68fb      	ldr	r3, [r7, #12]
   18748:	61fb      	str	r3, [r7, #28]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1874a:	f7ff fd9b 	bl	18284 <first>
   1874e:	4603      	mov	r3, r0
   18750:	2b00      	cmp	r3, #0
   18752:	d007      	beq.n	18764 <z_clock_announce+0xd0>
   18754:	f7ff fd96 	bl	18284 <first>
   18758:	4603      	mov	r3, r0
   1875a:	689a      	ldr	r2, [r3, #8]
   1875c:	4b1d      	ldr	r3, [pc, #116]	; (187d4 <z_clock_announce+0x140>)
   1875e:	681b      	ldr	r3, [r3, #0]
   18760:	429a      	cmp	r2, r3
   18762:	ddb3      	ble.n	186cc <z_clock_announce+0x38>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   18764:	f7ff fd8e 	bl	18284 <first>
   18768:	4603      	mov	r3, r0
   1876a:	2b00      	cmp	r3, #0
   1876c:	d007      	beq.n	1877e <z_clock_announce+0xea>
		first()->dticks -= announce_remaining;
   1876e:	f7ff fd89 	bl	18284 <first>
   18772:	4603      	mov	r3, r0
   18774:	6899      	ldr	r1, [r3, #8]
   18776:	4a17      	ldr	r2, [pc, #92]	; (187d4 <z_clock_announce+0x140>)
   18778:	6812      	ldr	r2, [r2, #0]
   1877a:	1a8a      	subs	r2, r1, r2
   1877c:	609a      	str	r2, [r3, #8]
	}

	curr_tick += announce_remaining;
   1877e:	4b15      	ldr	r3, [pc, #84]	; (187d4 <z_clock_announce+0x140>)
   18780:	681b      	ldr	r3, [r3, #0]
   18782:	4619      	mov	r1, r3
   18784:	ea4f 72e1 	mov.w	r2, r1, asr #31
   18788:	4b13      	ldr	r3, [pc, #76]	; (187d8 <z_clock_announce+0x144>)
   1878a:	e9d3 3400 	ldrd	r3, r4, [r3]
   1878e:	18cd      	adds	r5, r1, r3
   18790:	eb42 0604 	adc.w	r6, r2, r4
   18794:	4b10      	ldr	r3, [pc, #64]	; (187d8 <z_clock_announce+0x144>)
   18796:	e9c3 5600 	strd	r5, r6, [r3]
	announce_remaining = 0;
   1879a:	4b0e      	ldr	r3, [pc, #56]	; (187d4 <z_clock_announce+0x140>)
   1879c:	2200      	movs	r2, #0
   1879e:	601a      	str	r2, [r3, #0]

	z_clock_set_timeout(next_timeout(), false);
   187a0:	f7ff fda0 	bl	182e4 <next_timeout>
   187a4:	4603      	mov	r3, r0
   187a6:	2100      	movs	r1, #0
   187a8:	4618      	mov	r0, r3
   187aa:	f7f8 ff13 	bl	115d4 <z_clock_set_timeout>
   187ae:	4b08      	ldr	r3, [pc, #32]	; (187d0 <z_clock_announce+0x13c>)
   187b0:	627b      	str	r3, [r7, #36]	; 0x24
   187b2:	69fb      	ldr	r3, [r7, #28]
   187b4:	61bb      	str	r3, [r7, #24]
	z_arch_irq_unlock(key.key);
   187b6:	69bb      	ldr	r3, [r7, #24]
   187b8:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
   187ba:	6a3b      	ldr	r3, [r7, #32]
   187bc:	f383 8811 	msr	BASEPRI, r3
   187c0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   187c4:	bf00      	nop
   187c6:	3754      	adds	r7, #84	; 0x54
   187c8:	46bd      	mov	sp, r7
   187ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   187ce:	bf00      	nop
   187d0:	20006230 	.word	0x20006230
   187d4:	20006230 	.word	0x20006230
   187d8:	20002050 	.word	0x20002050

000187dc <z_tick_get>:
{
	can_wait_forever = 1;
}

s64_t z_tick_get(void)
{
   187dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   187de:	b08d      	sub	sp, #52	; 0x34
   187e0:	af00      	add	r7, sp, #0
	u64_t t = 0U;
   187e2:	f04f 0300 	mov.w	r3, #0
   187e6:	f04f 0400 	mov.w	r4, #0
   187ea:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

	LOCKED(&timeout_lock) {
   187ee:	2300      	movs	r3, #0
   187f0:	613b      	str	r3, [r7, #16]
   187f2:	4b1b      	ldr	r3, [pc, #108]	; (18860 <z_tick_get+0x84>)
   187f4:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
   187f6:	f04f 0320 	mov.w	r3, #32
   187fa:	f3ef 8211 	mrs	r2, BASEPRI
   187fe:	f383 8811 	msr	BASEPRI, r3
   18802:	f3bf 8f6f 	isb	sy
   18806:	623a      	str	r2, [r7, #32]
   18808:	61fb      	str	r3, [r7, #28]
	return key;
   1880a:	6a3b      	ldr	r3, [r7, #32]
	k.key = z_arch_irq_lock();
   1880c:	607b      	str	r3, [r7, #4]
	return k;
   1880e:	687b      	ldr	r3, [r7, #4]
   18810:	60fb      	str	r3, [r7, #12]
   18812:	e01a      	b.n	1884a <z_tick_get+0x6e>
		t = curr_tick + z_clock_elapsed();
   18814:	f7f8 ff56 	bl	116c4 <z_clock_elapsed>
   18818:	4603      	mov	r3, r0
   1881a:	4619      	mov	r1, r3
   1881c:	f04f 0200 	mov.w	r2, #0
   18820:	4b10      	ldr	r3, [pc, #64]	; (18864 <z_tick_get+0x88>)
   18822:	e9d3 3400 	ldrd	r3, r4, [r3]
   18826:	18cd      	adds	r5, r1, r3
   18828:	eb42 0604 	adc.w	r6, r2, r4
   1882c:	e9c7 560a 	strd	r5, r6, [r7, #40]	; 0x28
   18830:	4b0b      	ldr	r3, [pc, #44]	; (18860 <z_tick_get+0x84>)
   18832:	61bb      	str	r3, [r7, #24]
   18834:	68fb      	ldr	r3, [r7, #12]
   18836:	60bb      	str	r3, [r7, #8]
	z_arch_irq_unlock(key.key);
   18838:	68bb      	ldr	r3, [r7, #8]
   1883a:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
   1883c:	697b      	ldr	r3, [r7, #20]
   1883e:	f383 8811 	msr	BASEPRI, r3
   18842:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   18846:	2301      	movs	r3, #1
   18848:	613b      	str	r3, [r7, #16]
   1884a:	693b      	ldr	r3, [r7, #16]
   1884c:	2b00      	cmp	r3, #0
   1884e:	d0e1      	beq.n	18814 <z_tick_get+0x38>
	}
	return t;
   18850:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
}
   18854:	4618      	mov	r0, r3
   18856:	4621      	mov	r1, r4
   18858:	3734      	adds	r7, #52	; 0x34
   1885a:	46bd      	mov	sp, r7
   1885c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1885e:	bf00      	nop
   18860:	20006230 	.word	0x20006230
   18864:	20002050 	.word	0x20002050

00018868 <is_condition_met>:
	event->obj = obj;
}

/* must be called with interrupts locked */
static inline bool is_condition_met(struct k_poll_event *event, u32_t *state)
{
   18868:	b580      	push	{r7, lr}
   1886a:	b082      	sub	sp, #8
   1886c:	af00      	add	r7, sp, #0
   1886e:	6078      	str	r0, [r7, #4]
   18870:	6039      	str	r1, [r7, #0]
	switch (event->type) {
   18872:	687b      	ldr	r3, [r7, #4]
   18874:	7b5b      	ldrb	r3, [r3, #13]
   18876:	f3c3 0303 	ubfx	r3, r3, #0, #4
   1887a:	b2db      	uxtb	r3, r3
   1887c:	2b04      	cmp	r3, #4
   1887e:	d831      	bhi.n	188e4 <is_condition_met+0x7c>
   18880:	a201      	add	r2, pc, #4	; (adr r2, 18888 <is_condition_met+0x20>)
   18882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18886:	bf00      	nop
   18888:	000188e5 	.word	0x000188e5
   1888c:	000188d1 	.word	0x000188d1
   18890:	0001889d 	.word	0x0001889d
   18894:	000188e5 	.word	0x000188e5
   18898:	000188b7 	.word	0x000188b7
	case K_POLL_TYPE_SEM_AVAILABLE:
		if (k_sem_count_get(event->sem) > 0) {
   1889c:	687b      	ldr	r3, [r7, #4]
   1889e:	691b      	ldr	r3, [r3, #16]
   188a0:	4618      	mov	r0, r3
   188a2:	f013 fc82 	bl	2c1aa <k_sem_count_get>
   188a6:	4603      	mov	r3, r0
   188a8:	2b00      	cmp	r3, #0
   188aa:	d01d      	beq.n	188e8 <is_condition_met+0x80>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   188ac:	683b      	ldr	r3, [r7, #0]
   188ae:	2202      	movs	r2, #2
   188b0:	601a      	str	r2, [r3, #0]
			return true;
   188b2:	2301      	movs	r3, #1
   188b4:	e01e      	b.n	188f4 <is_condition_met+0x8c>
		}
		break;
	case K_POLL_TYPE_DATA_AVAILABLE:
		if (!k_queue_is_empty(event->queue)) {
   188b6:	687b      	ldr	r3, [r7, #4]
   188b8:	691b      	ldr	r3, [r3, #16]
   188ba:	4618      	mov	r0, r3
   188bc:	f013 fc69 	bl	2c192 <k_queue_is_empty>
   188c0:	4603      	mov	r3, r0
   188c2:	2b00      	cmp	r3, #0
   188c4:	d112      	bne.n	188ec <is_condition_met+0x84>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   188c6:	683b      	ldr	r3, [r7, #0]
   188c8:	2204      	movs	r2, #4
   188ca:	601a      	str	r2, [r3, #0]
			return true;
   188cc:	2301      	movs	r3, #1
   188ce:	e011      	b.n	188f4 <is_condition_met+0x8c>
		}
		break;
	case K_POLL_TYPE_SIGNAL:
		if (event->signal->signaled != 0U) {
   188d0:	687b      	ldr	r3, [r7, #4]
   188d2:	691b      	ldr	r3, [r3, #16]
   188d4:	689b      	ldr	r3, [r3, #8]
   188d6:	2b00      	cmp	r3, #0
   188d8:	d00a      	beq.n	188f0 <is_condition_met+0x88>
			*state = K_POLL_STATE_SIGNALED;
   188da:	683b      	ldr	r3, [r7, #0]
   188dc:	2201      	movs	r2, #1
   188de:	601a      	str	r2, [r3, #0]
			return true;
   188e0:	2301      	movs	r3, #1
   188e2:	e007      	b.n	188f4 <is_condition_met+0x8c>
		break;
	case K_POLL_TYPE_IGNORE:
		break;
	default:
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
		break;
   188e4:	bf00      	nop
   188e6:	e004      	b.n	188f2 <is_condition_met+0x8a>
		break;
   188e8:	bf00      	nop
   188ea:	e002      	b.n	188f2 <is_condition_met+0x8a>
		break;
   188ec:	bf00      	nop
   188ee:	e000      	b.n	188f2 <is_condition_met+0x8a>
		break;
   188f0:	bf00      	nop
	}

	return false;
   188f2:	2300      	movs	r3, #0
}
   188f4:	4618      	mov	r0, r3
   188f6:	3708      	adds	r7, #8
   188f8:	46bd      	mov	sp, r7
   188fa:	bd80      	pop	{r7, pc}

000188fc <register_event>:
}

/* must be called with interrupts locked */
static inline int register_event(struct k_poll_event *event,
				 struct _poller *poller)
{
   188fc:	b580      	push	{r7, lr}
   188fe:	b082      	sub	sp, #8
   18900:	af00      	add	r7, sp, #0
   18902:	6078      	str	r0, [r7, #4]
   18904:	6039      	str	r1, [r7, #0]
	switch (event->type) {
   18906:	687b      	ldr	r3, [r7, #4]
   18908:	7b5b      	ldrb	r3, [r3, #13]
   1890a:	f3c3 0303 	ubfx	r3, r3, #0, #4
   1890e:	b2db      	uxtb	r3, r3
   18910:	2b04      	cmp	r3, #4
   18912:	d827      	bhi.n	18964 <register_event+0x68>
   18914:	a201      	add	r2, pc, #4	; (adr r2, 1891c <register_event+0x20>)
   18916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1891a:	bf00      	nop
   1891c:	00018965 	.word	0x00018965
   18920:	00018955 	.word	0x00018955
   18924:	00018931 	.word	0x00018931
   18928:	00018965 	.word	0x00018965
   1892c:	00018943 	.word	0x00018943
	case K_POLL_TYPE_SEM_AVAILABLE:
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
		add_event(&event->sem->poll_events, event, poller);
   18930:	687b      	ldr	r3, [r7, #4]
   18932:	691b      	ldr	r3, [r3, #16]
   18934:	3310      	adds	r3, #16
   18936:	683a      	ldr	r2, [r7, #0]
   18938:	6879      	ldr	r1, [r7, #4]
   1893a:	4618      	mov	r0, r3
   1893c:	f013 fce6 	bl	2c30c <add_event>
		break;
   18940:	e011      	b.n	18966 <register_event+0x6a>
	case K_POLL_TYPE_DATA_AVAILABLE:
		__ASSERT(event->queue != NULL, "invalid queue\n");
		add_event(&event->queue->poll_events, event, poller);
   18942:	687b      	ldr	r3, [r7, #4]
   18944:	691b      	ldr	r3, [r3, #16]
   18946:	3308      	adds	r3, #8
   18948:	683a      	ldr	r2, [r7, #0]
   1894a:	6879      	ldr	r1, [r7, #4]
   1894c:	4618      	mov	r0, r3
   1894e:	f013 fcdd 	bl	2c30c <add_event>
		break;
   18952:	e008      	b.n	18966 <register_event+0x6a>
	case K_POLL_TYPE_SIGNAL:
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
		add_event(&event->signal->poll_events, event, poller);
   18954:	687b      	ldr	r3, [r7, #4]
   18956:	691b      	ldr	r3, [r3, #16]
   18958:	683a      	ldr	r2, [r7, #0]
   1895a:	6879      	ldr	r1, [r7, #4]
   1895c:	4618      	mov	r0, r3
   1895e:	f013 fcd5 	bl	2c30c <add_event>
		break;
   18962:	e000      	b.n	18966 <register_event+0x6a>
	case K_POLL_TYPE_IGNORE:
		/* nothing to do */
		break;
	default:
		__ASSERT(false, "invalid event type\n");
		break;
   18964:	bf00      	nop
	}

	event->poller = poller;
   18966:	687b      	ldr	r3, [r7, #4]
   18968:	683a      	ldr	r2, [r7, #0]
   1896a:	609a      	str	r2, [r3, #8]

	return 0;
   1896c:	2300      	movs	r3, #0
}
   1896e:	4618      	mov	r0, r3
   18970:	3708      	adds	r7, #8
   18972:	46bd      	mov	sp, r7
   18974:	bd80      	pop	{r7, pc}
   18976:	bf00      	nop

00018978 <clear_event_registration>:

/* must be called with interrupts locked */
static inline void clear_event_registration(struct k_poll_event *event)
{
   18978:	b580      	push	{r7, lr}
   1897a:	b084      	sub	sp, #16
   1897c:	af00      	add	r7, sp, #0
   1897e:	6078      	str	r0, [r7, #4]
	bool remove = false;
   18980:	2300      	movs	r3, #0
   18982:	73fb      	strb	r3, [r7, #15]

	event->poller = NULL;
   18984:	687b      	ldr	r3, [r7, #4]
   18986:	2200      	movs	r2, #0
   18988:	609a      	str	r2, [r3, #8]

	switch (event->type) {
   1898a:	687b      	ldr	r3, [r7, #4]
   1898c:	7b5b      	ldrb	r3, [r3, #13]
   1898e:	f3c3 0303 	ubfx	r3, r3, #0, #4
   18992:	b2db      	uxtb	r3, r3
   18994:	2b04      	cmp	r3, #4
   18996:	d816      	bhi.n	189c6 <clear_event_registration+0x4e>
   18998:	a201      	add	r2, pc, #4	; (adr r2, 189a0 <clear_event_registration+0x28>)
   1899a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1899e:	bf00      	nop
   189a0:	000189c7 	.word	0x000189c7
   189a4:	000189c1 	.word	0x000189c1
   189a8:	000189b5 	.word	0x000189b5
   189ac:	000189c7 	.word	0x000189c7
   189b0:	000189bb 	.word	0x000189bb
	case K_POLL_TYPE_SEM_AVAILABLE:
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
		remove = true;
   189b4:	2301      	movs	r3, #1
   189b6:	73fb      	strb	r3, [r7, #15]
		break;
   189b8:	e006      	b.n	189c8 <clear_event_registration+0x50>
	case K_POLL_TYPE_DATA_AVAILABLE:
		__ASSERT(event->queue != NULL, "invalid queue\n");
		remove = true;
   189ba:	2301      	movs	r3, #1
   189bc:	73fb      	strb	r3, [r7, #15]
		break;
   189be:	e003      	b.n	189c8 <clear_event_registration+0x50>
	case K_POLL_TYPE_SIGNAL:
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
		remove = true;
   189c0:	2301      	movs	r3, #1
   189c2:	73fb      	strb	r3, [r7, #15]
		break;
   189c4:	e000      	b.n	189c8 <clear_event_registration+0x50>
	case K_POLL_TYPE_IGNORE:
		/* nothing to do */
		break;
	default:
		__ASSERT(false, "invalid event type\n");
		break;
   189c6:	bf00      	nop
	}
	if (remove && sys_dnode_is_linked(&event->_node)) {
   189c8:	7bfb      	ldrb	r3, [r7, #15]
   189ca:	2b00      	cmp	r3, #0
   189cc:	d00a      	beq.n	189e4 <clear_event_registration+0x6c>
   189ce:	687b      	ldr	r3, [r7, #4]
   189d0:	4618      	mov	r0, r3
   189d2:	f013 fae0 	bl	2bf96 <sys_dnode_is_linked>
   189d6:	4603      	mov	r3, r0
   189d8:	2b00      	cmp	r3, #0
   189da:	d003      	beq.n	189e4 <clear_event_registration+0x6c>
		sys_dlist_remove(&event->_node);
   189dc:	687b      	ldr	r3, [r7, #4]
   189de:	4618      	mov	r0, r3
   189e0:	f013 fb74 	bl	2c0cc <sys_dlist_remove>
	}
}
   189e4:	bf00      	nop
   189e6:	3710      	adds	r7, #16
   189e8:	46bd      	mov	sp, r7
   189ea:	bd80      	pop	{r7, pc}

000189ec <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      k_spinlock_key_t key)
{
   189ec:	b580      	push	{r7, lr}
   189ee:	b08c      	sub	sp, #48	; 0x30
   189f0:	af00      	add	r7, sp, #0
   189f2:	60f8      	str	r0, [r7, #12]
   189f4:	60b9      	str	r1, [r7, #8]
   189f6:	607a      	str	r2, [r7, #4]
	for (; last_registered >= 0; last_registered--) {
   189f8:	e028      	b.n	18a4c <clear_event_registrations+0x60>
		clear_event_registration(&events[last_registered]);
   189fa:	68ba      	ldr	r2, [r7, #8]
   189fc:	4613      	mov	r3, r2
   189fe:	009b      	lsls	r3, r3, #2
   18a00:	4413      	add	r3, r2
   18a02:	009b      	lsls	r3, r3, #2
   18a04:	461a      	mov	r2, r3
   18a06:	68fb      	ldr	r3, [r7, #12]
   18a08:	4413      	add	r3, r2
   18a0a:	4618      	mov	r0, r3
   18a0c:	f7ff ffb4 	bl	18978 <clear_event_registration>
   18a10:	4b12      	ldr	r3, [pc, #72]	; (18a5c <clear_event_registrations+0x70>)
   18a12:	623b      	str	r3, [r7, #32]
   18a14:	687b      	ldr	r3, [r7, #4]
   18a16:	61bb      	str	r3, [r7, #24]
   18a18:	69bb      	ldr	r3, [r7, #24]
   18a1a:	61fb      	str	r3, [r7, #28]
   18a1c:	69fb      	ldr	r3, [r7, #28]
   18a1e:	f383 8811 	msr	BASEPRI, r3
   18a22:	f3bf 8f6f 	isb	sy
   18a26:	4b0d      	ldr	r3, [pc, #52]	; (18a5c <clear_event_registrations+0x70>)
   18a28:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
   18a2a:	f04f 0320 	mov.w	r3, #32
   18a2e:	f3ef 8211 	mrs	r2, BASEPRI
   18a32:	f383 8811 	msr	BASEPRI, r3
   18a36:	f3bf 8f6f 	isb	sy
   18a3a:	62ba      	str	r2, [r7, #40]	; 0x28
   18a3c:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
   18a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = z_arch_irq_lock();
   18a40:	617b      	str	r3, [r7, #20]
	return k;
   18a42:	697b      	ldr	r3, [r7, #20]
   18a44:	607b      	str	r3, [r7, #4]
	for (; last_registered >= 0; last_registered--) {
   18a46:	68bb      	ldr	r3, [r7, #8]
   18a48:	3b01      	subs	r3, #1
   18a4a:	60bb      	str	r3, [r7, #8]
   18a4c:	68bb      	ldr	r3, [r7, #8]
   18a4e:	2b00      	cmp	r3, #0
   18a50:	dad3      	bge.n	189fa <clear_event_registrations+0xe>
		k_spin_unlock(&lock, key);
		key = k_spin_lock(&lock);
	}
}
   18a52:	bf00      	nop
   18a54:	3730      	adds	r7, #48	; 0x30
   18a56:	46bd      	mov	sp, r7
   18a58:	bd80      	pop	{r7, pc}
   18a5a:	bf00      	nop
   18a5c:	20006234 	.word	0x20006234

00018a60 <z_impl_k_poll>:
	event->poller = NULL;
	event->state |= state;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
   18a60:	b580      	push	{r7, lr}
   18a62:	b0a6      	sub	sp, #152	; 0x98
   18a64:	af00      	add	r7, sp, #0
   18a66:	60f8      	str	r0, [r7, #12]
   18a68:	60b9      	str	r1, [r7, #8]
   18a6a:	607a      	str	r2, [r7, #4]
	__ASSERT(!z_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events > 0, "zero events\n");

	int last_registered = -1, rc;
   18a6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18a70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	k_spinlock_key_t key;

	struct _poller poller = { .thread = _current, .is_polling = true, };
   18a74:	4b76      	ldr	r3, [pc, #472]	; (18c50 <z_impl_k_poll+0x1f0>)
   18a76:	689b      	ldr	r3, [r3, #8]
   18a78:	63bb      	str	r3, [r7, #56]	; 0x38
   18a7a:	2301      	movs	r3, #1
   18a7c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

	/* find events whose condition is already fulfilled */
	for (int ii = 0; ii < num_events; ii++) {
   18a80:	2300      	movs	r3, #0
   18a82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   18a86:	e068      	b.n	18b5a <z_impl_k_poll+0xfa>
   18a88:	4b72      	ldr	r3, [pc, #456]	; (18c54 <z_impl_k_poll+0x1f4>)
   18a8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	__asm__ volatile(
   18a8e:	f04f 0320 	mov.w	r3, #32
   18a92:	f3ef 8211 	mrs	r2, BASEPRI
   18a96:	f383 8811 	msr	BASEPRI, r3
   18a9a:	f3bf 8f6f 	isb	sy
   18a9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
   18aa2:	67fb      	str	r3, [r7, #124]	; 0x7c
	return key;
   18aa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
	k.key = z_arch_irq_lock();
   18aa8:	613b      	str	r3, [r7, #16]
	return k;
   18aaa:	693b      	ldr	r3, [r7, #16]
   18aac:	643b      	str	r3, [r7, #64]	; 0x40
		u32_t state;

		key = k_spin_lock(&lock);
		if (is_condition_met(&events[ii], &state)) {
   18aae:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
   18ab2:	4613      	mov	r3, r2
   18ab4:	009b      	lsls	r3, r3, #2
   18ab6:	4413      	add	r3, r2
   18ab8:	009b      	lsls	r3, r3, #2
   18aba:	461a      	mov	r2, r3
   18abc:	68fb      	ldr	r3, [r7, #12]
   18abe:	4413      	add	r3, r2
   18ac0:	f107 0218 	add.w	r2, r7, #24
   18ac4:	4611      	mov	r1, r2
   18ac6:	4618      	mov	r0, r3
   18ac8:	f7ff fece 	bl	18868 <is_condition_met>
   18acc:	4603      	mov	r3, r0
   18ace:	2b00      	cmp	r3, #0
   18ad0:	d011      	beq.n	18af6 <z_impl_k_poll+0x96>
			set_event_ready(&events[ii], state);
   18ad2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
   18ad6:	4613      	mov	r3, r2
   18ad8:	009b      	lsls	r3, r3, #2
   18ada:	4413      	add	r3, r2
   18adc:	009b      	lsls	r3, r3, #2
   18ade:	461a      	mov	r2, r3
   18ae0:	68fb      	ldr	r3, [r7, #12]
   18ae2:	4413      	add	r3, r2
   18ae4:	69ba      	ldr	r2, [r7, #24]
   18ae6:	4611      	mov	r1, r2
   18ae8:	4618      	mov	r0, r3
   18aea:	f013 fc70 	bl	2c3ce <set_event_ready>
			poller.is_polling = false;
   18aee:	2300      	movs	r3, #0
   18af0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
   18af4:	e021      	b.n	18b3a <z_impl_k_poll+0xda>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   18af6:	687b      	ldr	r3, [r7, #4]
   18af8:	2b00      	cmp	r3, #0
   18afa:	d01e      	beq.n	18b3a <z_impl_k_poll+0xda>
   18afc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
   18b00:	b2db      	uxtb	r3, r3
   18b02:	2b00      	cmp	r3, #0
   18b04:	d019      	beq.n	18b3a <z_impl_k_poll+0xda>
			rc = register_event(&events[ii], &poller);
   18b06:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
   18b0a:	4613      	mov	r3, r2
   18b0c:	009b      	lsls	r3, r3, #2
   18b0e:	4413      	add	r3, r2
   18b10:	009b      	lsls	r3, r3, #2
   18b12:	461a      	mov	r2, r3
   18b14:	68fb      	ldr	r3, [r7, #12]
   18b16:	4413      	add	r3, r2
   18b18:	f107 0238 	add.w	r2, r7, #56	; 0x38
   18b1c:	4611      	mov	r1, r2
   18b1e:	4618      	mov	r0, r3
   18b20:	f7ff feec 	bl	188fc <register_event>
   18b24:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			if (rc == 0) {
   18b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   18b2c:	2b00      	cmp	r3, #0
   18b2e:	d104      	bne.n	18b3a <z_impl_k_poll+0xda>
				++last_registered;
   18b30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   18b34:	3301      	adds	r3, #1
   18b36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   18b3a:	4b46      	ldr	r3, [pc, #280]	; (18c54 <z_impl_k_poll+0x1f4>)
   18b3c:	67bb      	str	r3, [r7, #120]	; 0x78
   18b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18b40:	617b      	str	r3, [r7, #20]
	z_arch_irq_unlock(key.key);
   18b42:	697b      	ldr	r3, [r7, #20]
   18b44:	677b      	str	r3, [r7, #116]	; 0x74
	__asm__ volatile(
   18b46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   18b48:	f383 8811 	msr	BASEPRI, r3
   18b4c:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   18b50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   18b54:	3301      	adds	r3, #1
   18b56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   18b5a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
   18b5e:	68bb      	ldr	r3, [r7, #8]
   18b60:	429a      	cmp	r2, r3
   18b62:	db91      	blt.n	18a88 <z_impl_k_poll+0x28>
   18b64:	4b3b      	ldr	r3, [pc, #236]	; (18c54 <z_impl_k_poll+0x1f4>)
   18b66:	673b      	str	r3, [r7, #112]	; 0x70
	__asm__ volatile(
   18b68:	f04f 0320 	mov.w	r3, #32
   18b6c:	f3ef 8211 	mrs	r2, BASEPRI
   18b70:	f383 8811 	msr	BASEPRI, r3
   18b74:	f3bf 8f6f 	isb	sy
   18b78:	66fa      	str	r2, [r7, #108]	; 0x6c
   18b7a:	66bb      	str	r3, [r7, #104]	; 0x68
	return key;
   18b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
	k.key = z_arch_irq_lock();
   18b7e:	61fb      	str	r3, [r7, #28]
	return k;
   18b80:	69fb      	ldr	r3, [r7, #28]
   18b82:	643b      	str	r3, [r7, #64]	; 0x40
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   18b84:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
   18b88:	b2db      	uxtb	r3, r3
   18b8a:	f083 0301 	eor.w	r3, r3, #1
   18b8e:	b2db      	uxtb	r3, r3
   18b90:	2b00      	cmp	r3, #0
   18b92:	d012      	beq.n	18bba <z_impl_k_poll+0x15a>
		clear_event_registrations(events, last_registered, key);
   18b94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   18b96:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
   18b9a:	68f8      	ldr	r0, [r7, #12]
   18b9c:	f7ff ff26 	bl	189ec <clear_event_registrations>
   18ba0:	4b2c      	ldr	r3, [pc, #176]	; (18c54 <z_impl_k_poll+0x1f4>)
   18ba2:	667b      	str	r3, [r7, #100]	; 0x64
   18ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18ba6:	623b      	str	r3, [r7, #32]
	z_arch_irq_unlock(key.key);
   18ba8:	6a3b      	ldr	r3, [r7, #32]
   18baa:	663b      	str	r3, [r7, #96]	; 0x60
	__asm__ volatile(
   18bac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   18bae:	f383 8811 	msr	BASEPRI, r3
   18bb2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return 0;
   18bb6:	2300      	movs	r3, #0
   18bb8:	e045      	b.n	18c46 <z_impl_k_poll+0x1e6>
	}

	poller.is_polling = false;
   18bba:	2300      	movs	r3, #0
   18bbc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

	if (timeout == K_NO_WAIT) {
   18bc0:	687b      	ldr	r3, [r7, #4]
   18bc2:	2b00      	cmp	r3, #0
   18bc4:	d10d      	bne.n	18be2 <z_impl_k_poll+0x182>
   18bc6:	4b23      	ldr	r3, [pc, #140]	; (18c54 <z_impl_k_poll+0x1f4>)
   18bc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   18bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18bcc:	627b      	str	r3, [r7, #36]	; 0x24
   18bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18bd0:	65bb      	str	r3, [r7, #88]	; 0x58
   18bd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   18bd4:	f383 8811 	msr	BASEPRI, r3
   18bd8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return -EAGAIN;
   18bdc:	f06f 030a 	mvn.w	r3, #10
   18be0:	e031      	b.n	18c46 <z_impl_k_poll+0x1e6>
	}

	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   18be2:	f107 0330 	add.w	r3, r7, #48	; 0x30
   18be6:	633b      	str	r3, [r7, #48]	; 0x30
   18be8:	f107 0330 	add.w	r3, r7, #48	; 0x30
   18bec:	637b      	str	r3, [r7, #52]	; 0x34

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   18bee:	f107 0230 	add.w	r2, r7, #48	; 0x30
   18bf2:	687b      	ldr	r3, [r7, #4]
   18bf4:	6c39      	ldr	r1, [r7, #64]	; 0x40
   18bf6:	4817      	ldr	r0, [pc, #92]	; (18c54 <z_impl_k_poll+0x1f4>)
   18bf8:	f7fe fc96 	bl	17528 <z_pend_curr>
   18bfc:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
   18c00:	4b14      	ldr	r3, [pc, #80]	; (18c54 <z_impl_k_poll+0x1f4>)
   18c02:	64fb      	str	r3, [r7, #76]	; 0x4c
	__asm__ volatile(
   18c04:	f04f 0320 	mov.w	r3, #32
   18c08:	f3ef 8211 	mrs	r2, BASEPRI
   18c0c:	f383 8811 	msr	BASEPRI, r3
   18c10:	f3bf 8f6f 	isb	sy
   18c14:	64ba      	str	r2, [r7, #72]	; 0x48
   18c16:	647b      	str	r3, [r7, #68]	; 0x44
	return key;
   18c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
	k.key = z_arch_irq_lock();
   18c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	return k;
   18c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18c1e:	643b      	str	r3, [r7, #64]	; 0x40
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, last_registered, key);
   18c20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   18c22:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
   18c26:	68f8      	ldr	r0, [r7, #12]
   18c28:	f7ff fee0 	bl	189ec <clear_event_registrations>
   18c2c:	4b09      	ldr	r3, [pc, #36]	; (18c54 <z_impl_k_poll+0x1f4>)
   18c2e:	657b      	str	r3, [r7, #84]	; 0x54
   18c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18c32:	62bb      	str	r3, [r7, #40]	; 0x28
	z_arch_irq_unlock(key.key);
   18c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18c36:	653b      	str	r3, [r7, #80]	; 0x50
	__asm__ volatile(
   18c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   18c3a:	f383 8811 	msr	BASEPRI, r3
   18c3e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return swap_rc;
   18c42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
   18c46:	4618      	mov	r0, r3
   18c48:	3798      	adds	r7, #152	; 0x98
   18c4a:	46bd      	mov	sp, r7
   18c4c:	bd80      	pop	{r7, pc}
   18c4e:	bf00      	nop
   18c50:	20006178 	.word	0x20006178
   18c54:	20006234 	.word	0x20006234

00018c58 <shell_echo>:
static void shell_echo(char c) {
   18c58:	b580      	push	{r7, lr}
   18c5a:	b082      	sub	sp, #8
   18c5c:	af00      	add	r7, sp, #0
   18c5e:	4603      	mov	r3, r0
   18c60:	71fb      	strb	r3, [r7, #7]
	if (c == '\n') {
   18c62:	79fb      	ldrb	r3, [r7, #7]
   18c64:	2b0a      	cmp	r3, #10
   18c66:	d106      	bne.n	18c76 <shell_echo+0x1e>
		shell_put_char('\r');
   18c68:	200d      	movs	r0, #13
   18c6a:	f000 f892 	bl	18d92 <shell_put_char>
		shell_put_char('\n');
   18c6e:	200a      	movs	r0, #10
   18c70:	f000 f88f 	bl	18d92 <shell_put_char>
}
   18c74:	e003      	b.n	18c7e <shell_echo+0x26>
		shell_put_char(c);
   18c76:	79fb      	ldrb	r3, [r7, #7]
   18c78:	4618      	mov	r0, r3
   18c7a:	f000 f88a 	bl	18d92 <shell_put_char>
}
   18c7e:	bf00      	nop
   18c80:	3708      	adds	r7, #8
   18c82:	46bd      	mov	sp, r7
   18c84:	bd80      	pop	{r7, pc}

00018c86 <shell_echo_str>:
static void shell_echo_str(char *str) {
   18c86:	b580      	push	{r7, lr}
   18c88:	b084      	sub	sp, #16
   18c8a:	af00      	add	r7, sp, #0
   18c8c:	6078      	str	r0, [r7, #4]
	for (const char *c = str; *c != '\0'; c++) {
   18c8e:	687b      	ldr	r3, [r7, #4]
   18c90:	60fb      	str	r3, [r7, #12]
   18c92:	e007      	b.n	18ca4 <shell_echo_str+0x1e>
		shell_echo(*c);
   18c94:	68fb      	ldr	r3, [r7, #12]
   18c96:	781b      	ldrb	r3, [r3, #0]
   18c98:	4618      	mov	r0, r3
   18c9a:	f7ff ffdd 	bl	18c58 <shell_echo>
	for (const char *c = str; *c != '\0'; c++) {
   18c9e:	68fb      	ldr	r3, [r7, #12]
   18ca0:	3301      	adds	r3, #1
   18ca2:	60fb      	str	r3, [r7, #12]
   18ca4:	68fb      	ldr	r3, [r7, #12]
   18ca6:	781b      	ldrb	r3, [r3, #0]
   18ca8:	2b00      	cmp	r3, #0
   18caa:	d1f3      	bne.n	18c94 <shell_echo_str+0xe>
}
   18cac:	bf00      	nop
   18cae:	3710      	adds	r7, #16
   18cb0:	46bd      	mov	sp, r7
   18cb2:	bd80      	pop	{r7, pc}

00018cb4 <test_patch_trigger>:
static void test_patch_trigger(void) {
   18cb4:	b580      	push	{r7, lr}
   18cb6:	af00      	add	r7, sp, #0
	trigger_debugmon();
   18cb8:	f000 f99a 	bl	18ff0 <trigger_debugmon>
}
   18cbc:	bf00      	nop
   18cbe:	bd80      	pop	{r7, pc}

00018cc0 <reset_patch>:
static void reset_patch() {
   18cc0:	b580      	push	{r7, lr}
   18cc2:	af00      	add	r7, sp, #0
	show_hw_bkpt();
   18cc4:	f7e9 fe7a 	bl	29bc <show_hw_bkpt>
	clear_all_hw_bkpt();
   18cc8:	f7ea f8ba 	bl	2e40 <clear_all_hw_bkpt>
}
   18ccc:	bf00      	nop
   18cce:	bd80      	pop	{r7, pc}

00018cd0 <run_eva_test>:
static void run_eva_test() {
   18cd0:	b580      	push	{r7, lr}
   18cd2:	af00      	add	r7, sp, #0
	run_ebpf_test();
   18cd4:	f7ea ff5e 	bl	3b94 <run_ebpf_test>
}
   18cd8:	bf00      	nop
   18cda:	bd80      	pop	{r7, pc}

00018cdc <run_fixed_patch_point_test>:
static void run_fixed_patch_point_test() {
   18cdc:	b580      	push	{r7, lr}
   18cde:	af00      	add	r7, sp, #0
	load_local_fixed_patch(2);
   18ce0:	2002      	movs	r0, #2
   18ce2:	f7ea ff87 	bl	3bf4 <load_local_fixed_patch>
	test_fixed_patch_point();
   18ce6:	f7eb f813 	bl	3d10 <test_fixed_patch_point>
}
   18cea:	bf00      	nop
   18cec:	bd80      	pop	{r7, pc}

00018cee <z_impl_gpio_enable_callback>:
__syscall int gpio_enable_callback(struct device *port, int access_op,
				   u32_t pin);

static inline int z_impl_gpio_enable_callback(struct device *port,
					     int access_op, u32_t pin)
{
   18cee:	b580      	push	{r7, lr}
   18cf0:	b086      	sub	sp, #24
   18cf2:	af00      	add	r7, sp, #0
   18cf4:	60f8      	str	r0, [r7, #12]
   18cf6:	60b9      	str	r1, [r7, #8]
   18cf8:	607a      	str	r2, [r7, #4]
	const struct gpio_driver_api *api =
   18cfa:	68fb      	ldr	r3, [r7, #12]
   18cfc:	685b      	ldr	r3, [r3, #4]
   18cfe:	617b      	str	r3, [r7, #20]
		(const struct gpio_driver_api *)port->driver_api;

	if (api->enable_callback == NULL) {
   18d00:	697b      	ldr	r3, [r7, #20]
   18d02:	691b      	ldr	r3, [r3, #16]
   18d04:	2b00      	cmp	r3, #0
   18d06:	d102      	bne.n	18d0e <z_impl_gpio_enable_callback+0x20>
		return -ENOTSUP;
   18d08:	f06f 0385 	mvn.w	r3, #133	; 0x85
   18d0c:	e006      	b.n	18d1c <z_impl_gpio_enable_callback+0x2e>
	}

	return api->enable_callback(port, access_op, pin);
   18d0e:	697b      	ldr	r3, [r7, #20]
   18d10:	691b      	ldr	r3, [r3, #16]
   18d12:	687a      	ldr	r2, [r7, #4]
   18d14:	68b9      	ldr	r1, [r7, #8]
   18d16:	68f8      	ldr	r0, [r7, #12]
   18d18:	4798      	blx	r3
   18d1a:	4603      	mov	r3, r0
}
   18d1c:	4618      	mov	r0, r3
   18d1e:	3718      	adds	r7, #24
   18d20:	46bd      	mov	sp, r7
   18d22:	bd80      	pop	{r7, pc}

00018d24 <gpio_enable_callback>:

K_SYSCALL_DECLARE4(K_SYSCALL_GPIO_WRITE, gpio_write, int, struct device *, port, int, access_op, u32_t, pin, u32_t, value)

K_SYSCALL_DECLARE4(K_SYSCALL_GPIO_READ, gpio_read, int, struct device *, port, int, access_op, u32_t, pin, u32_t *, value)

K_SYSCALL_DECLARE3(K_SYSCALL_GPIO_ENABLE_CALLBACK, gpio_enable_callback, int, struct device *, port, int, access_op, u32_t, pin)
   18d24:	b580      	push	{r7, lr}
   18d26:	b084      	sub	sp, #16
   18d28:	af00      	add	r7, sp, #0
   18d2a:	60f8      	str	r0, [r7, #12]
   18d2c:	60b9      	str	r1, [r7, #8]
   18d2e:	607a      	str	r2, [r7, #4]
   18d30:	687a      	ldr	r2, [r7, #4]
   18d32:	68b9      	ldr	r1, [r7, #8]
   18d34:	68f8      	ldr	r0, [r7, #12]
   18d36:	f7ff ffda 	bl	18cee <z_impl_gpio_enable_callback>
   18d3a:	4603      	mov	r3, r0
   18d3c:	4618      	mov	r0, r3
   18d3e:	3710      	adds	r7, #16
   18d40:	46bd      	mov	sp, r7
   18d42:	bd80      	pop	{r7, pc}

00018d44 <handle_patch_func>:
static void handle_patch_func(int pid) {
   18d44:	b580      	push	{r7, lr}
   18d46:	b082      	sub	sp, #8
   18d48:	af00      	add	r7, sp, #0
   18d4a:	6078      	str	r0, [r7, #4]
	show_patch_list();
   18d4c:	f7e9 fdb8 	bl	28c0 <show_patch_list>
	set_patch_mode(CORTEX_DEB_MON_PATCH);
   18d50:	2001      	movs	r0, #1
   18d52:	f7ea fa37 	bl	31c4 <set_patch_mode>
	read_local_patch(pid);
   18d56:	6878      	ldr	r0, [r7, #4]
   18d58:	f7ea fb6a 	bl	3430 <read_local_patch>
	show_hw_bkpt();
   18d5c:	f7e9 fe2e 	bl	29bc <show_hw_bkpt>
	show_all_patches();
   18d60:	f7eb f9fc 	bl	415c <show_all_patches>
}
   18d64:	bf00      	nop
   18d66:	3708      	adds	r7, #8
   18d68:	46bd      	mov	sp, r7
   18d6a:	bd80      	pop	{r7, pc}

00018d6c <handle_eBPF_vm_run_patch>:
static void handle_eBPF_vm_run_patch(int vid) {
   18d6c:	b580      	push	{r7, lr}
   18d6e:	b082      	sub	sp, #8
   18d70:	af00      	add	r7, sp, #0
   18d72:	6078      	str	r0, [r7, #4]
	run_ebpf_eva(vid);
   18d74:	6878      	ldr	r0, [r7, #4]
   18d76:	f7ea fe51 	bl	3a1c <run_ebpf_eva>
}
   18d7a:	bf00      	nop
   18d7c:	3708      	adds	r7, #8
   18d7e:	46bd      	mov	sp, r7
   18d80:	bd80      	pop	{r7, pc}

00018d82 <shell_get_char>:
#include <misc/printk.h>
#include <console.h>

#pragma message("USE ZEPHYR_OS print-----------------------")

char shell_get_char() {
   18d82:	b580      	push	{r7, lr}
   18d84:	af00      	add	r7, sp, #0
	return console_getchar();
   18d86:	f7f5 fa13 	bl	e1b0 <console_getchar>
   18d8a:	4603      	mov	r3, r0
   18d8c:	b2db      	uxtb	r3, r3
}
   18d8e:	4618      	mov	r0, r3
   18d90:	bd80      	pop	{r7, pc}

00018d92 <shell_put_char>:

void shell_put_char(char c) {
   18d92:	b580      	push	{r7, lr}
   18d94:	b082      	sub	sp, #8
   18d96:	af00      	add	r7, sp, #0
   18d98:	4603      	mov	r3, r0
   18d9a:	71fb      	strb	r3, [r7, #7]
	console_putchar(c);
   18d9c:	79fb      	ldrb	r3, [r7, #7]
   18d9e:	4618      	mov	r0, r3
   18da0:	f7f5 f9f4 	bl	e18c <console_putchar>
}
   18da4:	bf00      	nop
   18da6:	3708      	adds	r7, #8
   18da8:	46bd      	mov	sp, r7
   18daa:	bd80      	pop	{r7, pc}

00018dac <log_print_porting>:

void log_print_porting(const char *fmt, va_list *args) {
   18dac:	b580      	push	{r7, lr}
   18dae:	b082      	sub	sp, #8
   18db0:	af00      	add	r7, sp, #0
   18db2:	6078      	str	r0, [r7, #4]
   18db4:	6039      	str	r1, [r7, #0]
	vprintk(fmt, *args);
   18db6:	683b      	ldr	r3, [r7, #0]
   18db8:	6819      	ldr	r1, [r3, #0]
   18dba:	6878      	ldr	r0, [r7, #4]
   18dbc:	f7f2 fae2 	bl	b384 <vprintk>
}
   18dc0:	bf00      	nop
   18dc2:	3708      	adds	r7, #8
   18dc4:	46bd      	mov	sp, r7
   18dc6:	bd80      	pop	{r7, pc}

00018dc8 <FPB_Handler1>:
DECLARE_FPB_HANDLE(1);
   18dc8:	b480      	push	{r7}
   18dca:	af00      	add	r7, sp, #0
   18dcc:	e92d 500f 	stmdb	sp!, {r0, r1, r2, r3, ip, lr}
   18dd0:	f01e 0f04 	tst.w	lr, #4
   18dd4:	bf0c      	ite	eq
   18dd6:	f3ef 8008 	mrseq	r0, MSP
   18dda:	f3ef 8009 	mrsne	r0, PSP
   18dde:	2101      	movs	r1, #1
   18de0:	f7ea f940 	bl	3064 <leave_fpb_bpkt>
   18de4:	e8bd 500f 	ldmia.w	sp!, {r0, r1, r2, r3, ip, lr}
   18de8:	bf00      	nop
   18dea:	46bd      	mov	sp, r7
   18dec:	bc80      	pop	{r7}
   18dee:	4770      	bx	lr

00018df0 <FPB_Handler2>:
DECLARE_FPB_HANDLE(2);
   18df0:	b480      	push	{r7}
   18df2:	af00      	add	r7, sp, #0
   18df4:	e92d 500f 	stmdb	sp!, {r0, r1, r2, r3, ip, lr}
   18df8:	f01e 0f04 	tst.w	lr, #4
   18dfc:	bf0c      	ite	eq
   18dfe:	f3ef 8008 	mrseq	r0, MSP
   18e02:	f3ef 8009 	mrsne	r0, PSP
   18e06:	2102      	movs	r1, #2
   18e08:	f7ea f92c 	bl	3064 <leave_fpb_bpkt>
   18e0c:	e8bd 500f 	ldmia.w	sp!, {r0, r1, r2, r3, ip, lr}
   18e10:	bf00      	nop
   18e12:	46bd      	mov	sp, r7
   18e14:	bc80      	pop	{r7}
   18e16:	4770      	bx	lr

00018e18 <FPB_Handler3>:
DECLARE_FPB_HANDLE(3);
   18e18:	b480      	push	{r7}
   18e1a:	af00      	add	r7, sp, #0
   18e1c:	e92d 500f 	stmdb	sp!, {r0, r1, r2, r3, ip, lr}
   18e20:	f01e 0f04 	tst.w	lr, #4
   18e24:	bf0c      	ite	eq
   18e26:	f3ef 8008 	mrseq	r0, MSP
   18e2a:	f3ef 8009 	mrsne	r0, PSP
   18e2e:	2103      	movs	r1, #3
   18e30:	f7ea f918 	bl	3064 <leave_fpb_bpkt>
   18e34:	e8bd 500f 	ldmia.w	sp!, {r0, r1, r2, r3, ip, lr}
   18e38:	bf00      	nop
   18e3a:	46bd      	mov	sp, r7
   18e3c:	bc80      	pop	{r7}
   18e3e:	4770      	bx	lr

00018e40 <FPB_Handler4>:
DECLARE_FPB_HANDLE(4);
   18e40:	b480      	push	{r7}
   18e42:	af00      	add	r7, sp, #0
   18e44:	e92d 500f 	stmdb	sp!, {r0, r1, r2, r3, ip, lr}
   18e48:	f01e 0f04 	tst.w	lr, #4
   18e4c:	bf0c      	ite	eq
   18e4e:	f3ef 8008 	mrseq	r0, MSP
   18e52:	f3ef 8009 	mrsne	r0, PSP
   18e56:	2104      	movs	r1, #4
   18e58:	f7ea f904 	bl	3064 <leave_fpb_bpkt>
   18e5c:	e8bd 500f 	ldmia.w	sp!, {r0, r1, r2, r3, ip, lr}
   18e60:	bf00      	nop
   18e62:	46bd      	mov	sp, r7
   18e64:	bc80      	pop	{r7}
   18e66:	4770      	bx	lr

00018e68 <FPB_Handler5>:
{
   18e68:	b480      	push	{r7}
   18e6a:	af00      	add	r7, sp, #0
	__asm__("PUSH {r0-r3, r12, lr}");
   18e6c:	e92d 500f 	stmdb	sp!, {r0, r1, r2, r3, ip, lr}
	__asm__("BL fpb_enable_callback");
   18e70:	f7ea f8c8 	bl	3004 <fpb_enable_callback>
	__asm__("MOV r5, r0");
   18e74:	4605      	mov	r5, r0
	__asm__("POP {r0-r3, r12, lr}");
   18e76:	e8bd 500f 	ldmia.w	sp!, {r0, r1, r2, r3, ip, lr}
	__asm__("MOV PC, r5");
   18e7a:	46af      	mov	pc, r5
}
   18e7c:	bf00      	nop
   18e7e:	46bd      	mov	sp, r7
   18e80:	bc80      	pop	{r7}
   18e82:	4770      	bx	lr

00018e84 <calc_bpkt_addr>:
uint32_t calc_bpkt_addr(uint32_t inst_addr) {
   18e84:	b480      	push	{r7}
   18e86:	b087      	sub	sp, #28
   18e88:	af00      	add	r7, sp, #0
   18e8a:	6078      	str	r0, [r7, #4]
	uint32_t replace = (inst_addr & 0x2) == 0 ? 1 : 2;
   18e8c:	687b      	ldr	r3, [r7, #4]
   18e8e:	f003 0302 	and.w	r3, r3, #2
   18e92:	2b00      	cmp	r3, #0
   18e94:	d101      	bne.n	18e9a <calc_bpkt_addr+0x16>
   18e96:	2301      	movs	r3, #1
   18e98:	e000      	b.n	18e9c <calc_bpkt_addr+0x18>
   18e9a:	2302      	movs	r3, #2
   18e9c:	613b      	str	r3, [r7, #16]
	uint32_t fp_comp = (inst_addr & ~0x3) | 0x1 | (replace << 30);
   18e9e:	687b      	ldr	r3, [r7, #4]
   18ea0:	f023 0203 	bic.w	r2, r3, #3
   18ea4:	693b      	ldr	r3, [r7, #16]
   18ea6:	079b      	lsls	r3, r3, #30
   18ea8:	4313      	orrs	r3, r2
   18eaa:	f043 0301 	orr.w	r3, r3, #1
   18eae:	60fb      	str	r3, [r7, #12]
	replace = fp_comp >> 30;
   18eb0:	68fb      	ldr	r3, [r7, #12]
   18eb2:	0f9b      	lsrs	r3, r3, #30
   18eb4:	613b      	str	r3, [r7, #16]
	uint32_t final_addr = fp_comp & 0x1FFFFFFC;
   18eb6:	68fb      	ldr	r3, [r7, #12]
   18eb8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   18ebc:	f023 0303 	bic.w	r3, r3, #3
   18ec0:	617b      	str	r3, [r7, #20]
	if (replace == 0x2) {
   18ec2:	693b      	ldr	r3, [r7, #16]
   18ec4:	2b02      	cmp	r3, #2
   18ec6:	d103      	bne.n	18ed0 <calc_bpkt_addr+0x4c>
		final_addr |= 0x2;
   18ec8:	697b      	ldr	r3, [r7, #20]
   18eca:	f043 0302 	orr.w	r3, r3, #2
   18ece:	617b      	str	r3, [r7, #20]
	return final_addr;
   18ed0:	697b      	ldr	r3, [r7, #20]
}
   18ed2:	4618      	mov	r0, r3
   18ed4:	371c      	adds	r7, #28
   18ed6:	46bd      	mov	sp, r7
   18ed8:	bc80      	pop	{r7}
   18eda:	4770      	bx	lr

00018edc <get_hw_bkpt_num>:
int get_hw_bkpt_num() {
   18edc:	b480      	push	{r7}
   18ede:	af00      	add	r7, sp, #0
	return 6;
   18ee0:	2306      	movs	r3, #6
}
   18ee2:	4618      	mov	r0, r3
   18ee4:	46bd      	mov	sp, r7
   18ee6:	bc80      	pop	{r7}
   18ee8:	4770      	bx	lr

00018eea <run_patch_here>:
static inline bool run_patch_here(stack_context *ctx) {
   18eea:	b590      	push	{r4, r7, lr}
   18eec:	b089      	sub	sp, #36	; 0x24
   18eee:	af00      	add	r7, sp, #0
   18ef0:	6078      	str	r0, [r7, #4]
	ebpf_patch *patch = get_dynamic_patch_by_bpkt(ctx->pc);
   18ef2:	687b      	ldr	r3, [r7, #4]
   18ef4:	699b      	ldr	r3, [r3, #24]
   18ef6:	4618      	mov	r0, r3
   18ef8:	f7eb f980 	bl	41fc <get_dynamic_patch_by_bpkt>
   18efc:	61f8      	str	r0, [r7, #28]
	if (patch != NULL) {
   18efe:	69fb      	ldr	r3, [r7, #28]
   18f00:	2b00      	cmp	r3, #0
   18f02:	d031      	beq.n	18f68 <run_patch_here+0x7e>
		ebpf_args_frame *args = (ebpf_args_frame *) ctx;
   18f04:	687b      	ldr	r3, [r7, #4]
   18f06:	61bb      	str	r3, [r7, #24]
		profile_start(EV1);
   18f08:	2001      	movs	r0, #1
   18f0a:	f7eb fa97 	bl	443c <profile_start>
		ret = run_ebpf_filter(patch, args, sizeof(ebpf_args_frame));
   18f0e:	2210      	movs	r2, #16
   18f10:	69b9      	ldr	r1, [r7, #24]
   18f12:	69f8      	ldr	r0, [r7, #28]
   18f14:	f000 f898 	bl	19048 <run_ebpf_filter>
   18f18:	e9c7 0104 	strd	r0, r1, [r7, #16]
		profile_end(EV1);
   18f1c:	2001      	movs	r0, #1
   18f1e:	f7eb fa9f 	bl	4460 <profile_end>
		uint32_t op = ret >> 32;
   18f22:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
   18f26:	f04f 0300 	mov.w	r3, #0
   18f2a:	f04f 0400 	mov.w	r4, #0
   18f2e:	0013      	movs	r3, r2
   18f30:	2400      	movs	r4, #0
   18f32:	60fb      	str	r3, [r7, #12]
		uint32_t ret_code = ret & 0x00000000ffffffff;
   18f34:	693b      	ldr	r3, [r7, #16]
   18f36:	60bb      	str	r3, [r7, #8]
		if (op == FILTER_DROP) {
   18f38:	68fb      	ldr	r3, [r7, #12]
   18f3a:	2b01      	cmp	r3, #1
   18f3c:	d109      	bne.n	18f52 <run_patch_here+0x68>
			*(volatile uint32_t *) &(ctx->r0) = ret_code;
   18f3e:	687b      	ldr	r3, [r7, #4]
   18f40:	68ba      	ldr	r2, [r7, #8]
   18f42:	601a      	str	r2, [r3, #0]
			*(volatile uint32_t *) &(ctx->pc) = ctx->lr; // calc_bpkt_addr(ctx->lr); //
   18f44:	687b      	ldr	r3, [r7, #4]
   18f46:	3318      	adds	r3, #24
   18f48:	687a      	ldr	r2, [r7, #4]
   18f4a:	6952      	ldr	r2, [r2, #20]
   18f4c:	601a      	str	r2, [r3, #0]
			return true;
   18f4e:	2301      	movs	r3, #1
   18f50:	e00b      	b.n	18f6a <run_patch_here+0x80>
		} else if (op == FILTER_REDIRECT) { // redirect pc to other address
   18f52:	68fb      	ldr	r3, [r7, #12]
   18f54:	2b02      	cmp	r3, #2
   18f56:	d105      	bne.n	18f64 <run_patch_here+0x7a>
			*(volatile uint32_t *) &(ctx->pc) = ret_code; 
   18f58:	687b      	ldr	r3, [r7, #4]
   18f5a:	3318      	adds	r3, #24
   18f5c:	68ba      	ldr	r2, [r7, #8]
   18f5e:	601a      	str	r2, [r3, #0]
			return true;
   18f60:	2301      	movs	r3, #1
   18f62:	e002      	b.n	18f6a <run_patch_here+0x80>
		return false;
   18f64:	2300      	movs	r3, #0
   18f66:	e000      	b.n	18f6a <run_patch_here+0x80>
	return false;
   18f68:	2300      	movs	r3, #0
}
   18f6a:	4618      	mov	r0, r3
   18f6c:	3724      	adds	r7, #36	; 0x24
   18f6e:	46bd      	mov	sp, r7
   18f70:	bd90      	pop	{r4, r7, pc}

00018f72 <__debug_monitor>:
	__asm__ __volatile__("and r0, lr, #4");
   18f72:	f00e 0004 	and.w	r0, lr, #4
	__asm__ __volatile__("cmp r0, #0");
   18f76:	2800      	cmp	r0, #0
	__asm__ __volatile__("ite eq");
   18f78:	bf0c      	ite	eq
	__asm__ __volatile__("mrseq r0, msp");
   18f7a:	f3ef 8008 	mrseq	r0, MSP
	__asm__ __volatile__("mrsne r0, psp");
   18f7e:	f3ef 8009 	mrsne	r0, PSP
	__asm__ __volatile__("b leave_debug_monitor");
   18f82:	f7ea b8c3 	b.w	310c <leave_debug_monitor>
}
   18f86:	bf00      	nop

00018f88 <freertos_cve_func>:
int freertos_cve_func(const IPPacket_t * const pxIPPacket, NetworkBufferDescriptor_t * const pxNetworkBuffer) {
   18f88:	b480      	push	{r7}
   18f8a:	b085      	sub	sp, #20
   18f8c:	af00      	add	r7, sp, #0
   18f8e:	6078      	str	r0, [r7, #4]
   18f90:	6039      	str	r1, [r7, #0]
	const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
   18f92:	687b      	ldr	r3, [r7, #4]
   18f94:	3310      	adds	r3, #16
   18f96:	60fb      	str	r3, [r7, #12]
	uint32_t uxHeaderLength = ( uint32_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0x0Fu ) << 2 );
   18f98:	68fb      	ldr	r3, [r7, #12]
   18f9a:	781b      	ldrb	r3, [r3, #0]
   18f9c:	009b      	lsls	r3, r3, #2
   18f9e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
   18fa2:	60bb      	str	r3, [r7, #8]
	return 0;
   18fa4:	2300      	movs	r3, #0
}
   18fa6:	4618      	mov	r0, r3
   18fa8:	3714      	adds	r7, #20
   18faa:	46bd      	mov	sp, r7
   18fac:	bc80      	pop	{r7}
   18fae:	4770      	bx	lr

00018fb0 <hera_fix_func>:
int hera_fix_func(const IPPacket_t * const pxIPPacket, NetworkBufferDescriptor_t * const pxNetworkBuffer) {
   18fb0:	b480      	push	{r7}
   18fb2:	b085      	sub	sp, #20
   18fb4:	af00      	add	r7, sp, #0
   18fb6:	6078      	str	r0, [r7, #4]
   18fb8:	6039      	str	r1, [r7, #0]
	const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
   18fba:	687b      	ldr	r3, [r7, #4]
   18fbc:	3310      	adds	r3, #16
   18fbe:	60fb      	str	r3, [r7, #12]
	uint32_t uxHeaderLength = ( uint32_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0x0Fu ) << 2 );
   18fc0:	68fb      	ldr	r3, [r7, #12]
   18fc2:	781b      	ldrb	r3, [r3, #0]
   18fc4:	009b      	lsls	r3, r3, #2
   18fc6:	f003 033c 	and.w	r3, r3, #60	; 0x3c
   18fca:	60bb      	str	r3, [r7, #8]
	if (uxHeaderLength > pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ||
   18fcc:	683b      	ldr	r3, [r7, #0]
   18fce:	681b      	ldr	r3, [r3, #0]
   18fd0:	3b0e      	subs	r3, #14
   18fd2:	68ba      	ldr	r2, [r7, #8]
   18fd4:	429a      	cmp	r2, r3
   18fd6:	d802      	bhi.n	18fde <hera_fix_func+0x2e>
   18fd8:	68bb      	ldr	r3, [r7, #8]
   18fda:	2b13      	cmp	r3, #19
   18fdc:	d802      	bhi.n	18fe4 <hera_fix_func+0x34>
		return -1;
   18fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18fe2:	e000      	b.n	18fe6 <hera_fix_func+0x36>
	return 0;
   18fe4:	2300      	movs	r3, #0
}
   18fe6:	4618      	mov	r0, r3
   18fe8:	3714      	adds	r7, #20
   18fea:	46bd      	mov	sp, r7
   18fec:	bc80      	pop	{r7}
   18fee:	4770      	bx	lr

00018ff0 <trigger_debugmon>:

void trigger_debugmon(void) {
   18ff0:	b580      	push	{r7, lr}
   18ff2:	af00      	add	r7, sp, #0
	//test_func();
	//RawBuggyFunc();
	test_freertos_cve();
   18ff4:	f7ea f928 	bl	3248 <test_freertos_cve>
}
   18ff8:	bf00      	nop
   18ffa:	bd80      	pop	{r7, pc}

00018ffc <orig_c0>:
int orig_c0(int v) {
   18ffc:	b480      	push	{r7}
   18ffe:	b083      	sub	sp, #12
   19000:	af00      	add	r7, sp, #0
   19002:	6078      	str	r0, [r7, #4]
	if (v > 2000) { // fixed: v > 5000 return -1
   19004:	687b      	ldr	r3, [r7, #4]
   19006:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   1900a:	dd02      	ble.n	19012 <orig_c0+0x16>
		return -1;
   1900c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19010:	e000      	b.n	19014 <orig_c0+0x18>
	return 0;
   19012:	2300      	movs	r3, #0
}
   19014:	4618      	mov	r0, r3
   19016:	370c      	adds	r7, #12
   19018:	46bd      	mov	sp, r7
   1901a:	bc80      	pop	{r7}
   1901c:	4770      	bx	lr

0001901e <setup_cve_list>:
void setup_cve_list() {
   1901e:	b480      	push	{r7}
   19020:	af00      	add	r7, sp, #0
}
   19022:	bf00      	nop
   19024:	46bd      	mov	sp, r7
   19026:	bc80      	pop	{r7}
   19028:	4770      	bx	lr

0001902a <fixed_patch_point_hanlder>:
	__asm volatile("PUSH {r0, lr}");
   1902a:	b501      	push	{r0, lr}
	__asm volatile("MRS r0, CONTROL");
   1902c:	f3ef 8014 	mrs	r0, CONTROL
	__asm volatile("TST r0, #2");
   19030:	f010 0f02 	tst.w	r0, #2
	__asm volatile("ITE EQ");
   19034:	bf0c      	ite	eq
	__asm volatile("MRSEQ r0, MSP");
   19036:	f3ef 8008 	mrseq	r0, MSP
	__asm volatile("MRSNE r0, PSP");
   1903a:	f3ef 8009 	mrsne	r0, PSP
	__asm volatile("BL dispatch_fixed_patch_point");
   1903e:	f7ea fe75 	bl	3d2c <dispatch_fixed_patch_point>
	__asm volatile("POP {r0, pc}");
   19042:	bd01      	pop	{r0, pc}
}
   19044:	bf00      	nop
   19046:	4618      	mov	r0, r3

00019048 <run_ebpf_filter>:

uint64_t run_ebpf_filter(ebpf_patch *patch, void *args, int args_size) {
   19048:	b590      	push	{r4, r7, lr}
   1904a:	b085      	sub	sp, #20
   1904c:	af00      	add	r7, sp, #0
   1904e:	60f8      	str	r0, [r7, #12]
   19050:	60b9      	str	r1, [r7, #8]
   19052:	607a      	str	r2, [r7, #4]
	if (patch->vm->use_jit) {
   19054:	68fb      	ldr	r3, [r7, #12]
   19056:	685b      	ldr	r3, [r3, #4]
   19058:	7d1b      	ldrb	r3, [r3, #20]
   1905a:	2b00      	cmp	r3, #0
   1905c:	d00a      	beq.n	19074 <run_ebpf_filter+0x2c>
		// disable mpu
		// arm_core_mpu_disable();
		return patch->vm->jit_func(args, args_size);
   1905e:	68fb      	ldr	r3, [r7, #12]
   19060:	685b      	ldr	r3, [r3, #4]
   19062:	68db      	ldr	r3, [r3, #12]
   19064:	687a      	ldr	r2, [r7, #4]
   19066:	b292      	uxth	r2, r2
   19068:	4611      	mov	r1, r2
   1906a:	68b8      	ldr	r0, [r7, #8]
   1906c:	4798      	blx	r3
   1906e:	4603      	mov	r3, r0
   19070:	460c      	mov	r4, r1
   19072:	e008      	b.n	19086 <run_ebpf_filter+0x3e>
	} else {
		return ebpf_vm_exec(patch->vm, args, args_size);
   19074:	68fb      	ldr	r3, [r7, #12]
   19076:	685b      	ldr	r3, [r3, #4]
   19078:	687a      	ldr	r2, [r7, #4]
   1907a:	68b9      	ldr	r1, [r7, #8]
   1907c:	4618      	mov	r0, r3
   1907e:	f7eb fb43 	bl	4708 <ebpf_vm_exec>
   19082:	4603      	mov	r3, r0
   19084:	460c      	mov	r4, r1
	}
   19086:	4618      	mov	r0, r3
   19088:	4621      	mov	r1, r4
   1908a:	3714      	adds	r7, #20
   1908c:	46bd      	mov	sp, r7
   1908e:	bd90      	pop	{r4, r7, pc}

00019090 <start_patch_service>:
// 	//pthread_join(task, NULL);
// 	return true;
// }
// #endif

bool start_patch_service() {
   19090:	b580      	push	{r7, lr}
   19092:	af00      	add	r7, sp, #0
	init_patch_sys();
   19094:	f7eb f838 	bl	4108 <init_patch_sys>
	// 	DEBUG_LOG("ERROR: Patch Service Init Failed\n");
	// 	return false;
	// }

	// wait_for_patch();
	return false;
   19098:	2300      	movs	r3, #0
}
   1909a:	4618      	mov	r0, r3
   1909c:	bd80      	pop	{r7, pc}

0001909e <get_cur_tick>:
int get_cur_tick() {
   1909e:	b580      	push	{r7, lr}
   190a0:	af00      	add	r7, sp, #0
	return dwt_get_counter();
   190a2:	f7eb f969 	bl	4378 <dwt_get_counter>
   190a6:	4603      	mov	r3, r0
}
   190a8:	4618      	mov	r0, r3
   190aa:	bd80      	pop	{r7, pc}

000190ac <cycles2us>:
float cycles2us(int cycles) {
   190ac:	b580      	push	{r7, lr}
   190ae:	b082      	sub	sp, #8
   190b0:	af00      	add	r7, sp, #0
   190b2:	6078      	str	r0, [r7, #4]
	return cycles_to_us(cycles);
   190b4:	687b      	ldr	r3, [r7, #4]
   190b6:	4618      	mov	r0, r3
   190b8:	f7eb f924 	bl	4304 <cycles_to_us>
   190bc:	4603      	mov	r3, r0
}
   190be:	4618      	mov	r0, r3
   190c0:	3708      	adds	r7, #8
   190c2:	46bd      	mov	sp, r7
   190c4:	bd80      	pop	{r7, pc}

000190c6 <debug_log>:

#ifdef DEBUG

extern void log_print_porting(const char *fmt, va_list *args);

void debug_log(const char *fmt, ...) {
   190c6:	b40f      	push	{r0, r1, r2, r3}
   190c8:	b580      	push	{r7, lr}
   190ca:	b082      	sub	sp, #8
   190cc:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, fmt);
   190ce:	f107 0314 	add.w	r3, r7, #20
   190d2:	607b      	str	r3, [r7, #4]
	log_print_porting(fmt, &args);
   190d4:	1d3b      	adds	r3, r7, #4
   190d6:	4619      	mov	r1, r3
   190d8:	6938      	ldr	r0, [r7, #16]
   190da:	f7ff fe67 	bl	18dac <log_print_porting>
	va_end(args);
}
   190de:	bf00      	nop
   190e0:	3708      	adds	r7, #8
   190e2:	46bd      	mov	sp, r7
   190e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   190e8:	b004      	add	sp, #16
   190ea:	4770      	bx	lr

000190ec <str2int>:

#else
void debug_log(const char *fmt, ...) {}
#endif // end DEBUG

int str2int(char *str) {
   190ec:	b480      	push	{r7}
   190ee:	b085      	sub	sp, #20
   190f0:	af00      	add	r7, sp, #0
   190f2:	6078      	str	r0, [r7, #4]
	int val = 0;
   190f4:	2300      	movs	r3, #0
   190f6:	60fb      	str	r3, [r7, #12]
	for (const char *c = str; *c != '\0'; c++) {
   190f8:	687b      	ldr	r3, [r7, #4]
   190fa:	60bb      	str	r3, [r7, #8]
   190fc:	e00f      	b.n	1911e <str2int+0x32>
		val *= 10;
   190fe:	68fa      	ldr	r2, [r7, #12]
   19100:	4613      	mov	r3, r2
   19102:	009b      	lsls	r3, r3, #2
   19104:	4413      	add	r3, r2
   19106:	005b      	lsls	r3, r3, #1
   19108:	60fb      	str	r3, [r7, #12]
		val += *c - '0';
   1910a:	68bb      	ldr	r3, [r7, #8]
   1910c:	781b      	ldrb	r3, [r3, #0]
   1910e:	461a      	mov	r2, r3
   19110:	68fb      	ldr	r3, [r7, #12]
   19112:	4413      	add	r3, r2
   19114:	3b30      	subs	r3, #48	; 0x30
   19116:	60fb      	str	r3, [r7, #12]
	for (const char *c = str; *c != '\0'; c++) {
   19118:	68bb      	ldr	r3, [r7, #8]
   1911a:	3301      	adds	r3, #1
   1911c:	60bb      	str	r3, [r7, #8]
   1911e:	68bb      	ldr	r3, [r7, #8]
   19120:	781b      	ldrb	r3, [r3, #0]
   19122:	2b00      	cmp	r3, #0
   19124:	d1eb      	bne.n	190fe <str2int+0x12>
	}
	return val;
   19126:	68fb      	ldr	r3, [r7, #12]
}
   19128:	4618      	mov	r0, r3
   1912a:	3714      	adds	r7, #20
   1912c:	46bd      	mov	sp, r7
   1912e:	bc80      	pop	{r7}
   19130:	4770      	bx	lr

00019132 <calc_bpkt_pc>:
	}
	return val;
}


uint32_t calc_bpkt_pc(uint32_t inst_addr) {
   19132:	b480      	push	{r7}
   19134:	b085      	sub	sp, #20
   19136:	af00      	add	r7, sp, #0
   19138:	6078      	str	r0, [r7, #4]
#ifdef SYS_CORTEX_M4
	uint32_t inst_val = (uint32_t) (inst_addr & ~(0x1));
   1913a:	687b      	ldr	r3, [r7, #4]
   1913c:	f023 0301 	bic.w	r3, r3, #1
   19140:	60fb      	str	r3, [r7, #12]
	uint16_t thumb_inst = *(uint16_t *) inst_val;
   19142:	68fb      	ldr	r3, [r7, #12]
   19144:	881b      	ldrh	r3, [r3, #0]
   19146:	817b      	strh	r3, [r7, #10]
	// DEBUG_LOG("calc_bpkt_pc 0x%08x -> 0x%08x\n", inst_addr, thumb_inst);
	if ((uint32_t) thumb_inst >= 0xe800) {
   19148:	897b      	ldrh	r3, [r7, #10]
   1914a:	f5b3 4f68 	cmp.w	r3, #59392	; 0xe800
   1914e:	d302      	bcc.n	19156 <calc_bpkt_pc+0x24>
		return inst_val + 4;
   19150:	68fb      	ldr	r3, [r7, #12]
   19152:	3304      	adds	r3, #4
   19154:	e001      	b.n	1915a <calc_bpkt_pc+0x28>
	} else {
		return inst_val + 2;
   19156:	68fb      	ldr	r3, [r7, #12]
   19158:	3302      	adds	r3, #2
	}
#endif

	return inst_addr;
}
   1915a:	4618      	mov	r0, r3
   1915c:	3714      	adds	r7, #20
   1915e:	46bd      	mov	sp, r7
   19160:	bc80      	pop	{r7}
   19162:	4770      	bx	lr

00019164 <little_endian_16_bit>:

	return next_inst;
}


uint32_t little_endian_16_bit(uint32_t val) {
   19164:	b480      	push	{r7}
   19166:	b083      	sub	sp, #12
   19168:	af00      	add	r7, sp, #0
   1916a:	6078      	str	r0, [r7, #4]
	return ((val & 0xFFFF0000) >> 16) | ((val & 0x0000FFFF) << 16);
   1916c:	687b      	ldr	r3, [r7, #4]
   1916e:	ea4f 4333 	mov.w	r3, r3, ror #16
}
   19172:	4618      	mov	r0, r3
   19174:	370c      	adds	r7, #12
   19176:	46bd      	mov	sp, r7
   19178:	bc80      	pop	{r7}
   1917a:	4770      	bx	lr

0001917c <ebpf_free>:
void ebpf_free(void* rmem) {
   1917c:	b580      	push	{r7, lr}
   1917e:	b082      	sub	sp, #8
   19180:	af00      	add	r7, sp, #0
   19182:	6078      	str	r0, [r7, #4]
	my_os_free(rmem);
   19184:	6878      	ldr	r0, [r7, #4]
   19186:	f010 ff24 	bl	29fd2 <k_free>
}
   1918a:	bf00      	nop
   1918c:	3708      	adds	r7, #8
   1918e:	46bd      	mov	sp, r7
   19190:	bd80      	pop	{r7, pc}

00019192 <__swap16>:
//#ifndef false
//#define false 0
//#endif

static inline u16 __swap16(u16 x)
{
   19192:	b480      	push	{r7}
   19194:	b083      	sub	sp, #12
   19196:	af00      	add	r7, sp, #0
   19198:	4603      	mov	r3, r0
   1919a:	80fb      	strh	r3, [r7, #6]
	return (u16) ((((u16)(x) & (u16)0x00ffU) << 8) | (((u16)(x) & (u16)0xff00U) >> 8));
   1919c:	88fb      	ldrh	r3, [r7, #6]
   1919e:	021b      	lsls	r3, r3, #8
   191a0:	b21a      	sxth	r2, r3
   191a2:	88fb      	ldrh	r3, [r7, #6]
   191a4:	0a1b      	lsrs	r3, r3, #8
   191a6:	b29b      	uxth	r3, r3
   191a8:	b21b      	sxth	r3, r3
   191aa:	4313      	orrs	r3, r2
   191ac:	b21b      	sxth	r3, r3
   191ae:	b29b      	uxth	r3, r3
}
   191b0:	4618      	mov	r0, r3
   191b2:	370c      	adds	r7, #12
   191b4:	46bd      	mov	sp, r7
   191b6:	bc80      	pop	{r7}
   191b8:	4770      	bx	lr

000191ba <__swap32>:

static inline u32 __swap32(u32 x) {
   191ba:	b480      	push	{r7}
   191bc:	b083      	sub	sp, #12
   191be:	af00      	add	r7, sp, #0
   191c0:	6078      	str	r0, [r7, #4]
	return (u32) ((((u32)(x) & (u32)0x000000ffUL) << 24) |
   191c2:	687b      	ldr	r3, [r7, #4]
   191c4:	061a      	lsls	r2, r3, #24
		(((u32)(x) & (u32)0x0000ff00UL) << 8) | 
   191c6:	687b      	ldr	r3, [r7, #4]
   191c8:	021b      	lsls	r3, r3, #8
   191ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
	return (u32) ((((u32)(x) & (u32)0x000000ffUL) << 24) |
   191ce:	431a      	orrs	r2, r3
		(((u32)(x) & (u32)0x00ff0000UL) >> 8) | 
   191d0:	687b      	ldr	r3, [r7, #4]
   191d2:	0a1b      	lsrs	r3, r3, #8
   191d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
		(((u32)(x) & (u32)0x0000ff00UL) << 8) | 
   191d8:	431a      	orrs	r2, r3
		(((u32)(x) & (u32)0xff000000UL) >> 24));
   191da:	687b      	ldr	r3, [r7, #4]
   191dc:	0e1b      	lsrs	r3, r3, #24
	return (u32) ((((u32)(x) & (u32)0x000000ffUL) << 24) |
   191de:	4313      	orrs	r3, r2
}
   191e0:	4618      	mov	r0, r3
   191e2:	370c      	adds	r7, #12
   191e4:	46bd      	mov	sp, r7
   191e6:	bc80      	pop	{r7}
   191e8:	4770      	bx	lr

000191ea <__swap64>:

static inline u64 __swap64(u64 x) {
   191ea:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   191ee:	b098      	sub	sp, #96	; 0x60
   191f0:	af00      	add	r7, sp, #0
   191f2:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
	return (u64) ((((u64)(x) & (u64)0x00000000000000ffULL) << 56) |
   191f6:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
   191fa:	f04f 0800 	mov.w	r8, #0
   191fe:	f04f 0900 	mov.w	r9, #0
   19202:	ea4f 6903 	mov.w	r9, r3, lsl #24
   19206:	f04f 0800 	mov.w	r8, #0
		(((u64)(x) & (u64)0x000000000000ff00ULL) << 40) |
   1920a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
   1920e:	f04f 0100 	mov.w	r1, #0
   19212:	f04f 0200 	mov.w	r2, #0
   19216:	021a      	lsls	r2, r3, #8
   19218:	2100      	movs	r1, #0
   1921a:	f04f 0300 	mov.w	r3, #0
   1921e:	f44f 047f 	mov.w	r4, #16711680	; 0xff0000
   19222:	ea01 0503 	and.w	r5, r1, r3
   19226:	ea02 0604 	and.w	r6, r2, r4
	return (u64) ((((u64)(x) & (u64)0x00000000000000ffULL) << 56) |
   1922a:	ea48 0305 	orr.w	r3, r8, r5
   1922e:	653b      	str	r3, [r7, #80]	; 0x50
   19230:	ea49 0306 	orr.w	r3, r9, r6
   19234:	657b      	str	r3, [r7, #84]	; 0x54
		(((u64)(x) & (u64)0x0000000000ff0000ULL) << 24) |
   19236:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
   1923a:	f04f 0100 	mov.w	r1, #0
   1923e:	f04f 0200 	mov.w	r2, #0
   19242:	0622      	lsls	r2, r4, #24
   19244:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
   19248:	0619      	lsls	r1, r3, #24
   1924a:	f04f 0300 	mov.w	r3, #0
   1924e:	f44f 447f 	mov.w	r4, #65280	; 0xff00
   19252:	ea01 0a03 	and.w	sl, r1, r3
   19256:	ea02 0b04 	and.w	fp, r2, r4
		(((u64)(x) & (u64)0x000000000000ff00ULL) << 40) |
   1925a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
   1925e:	460b      	mov	r3, r1
   19260:	ea43 030a 	orr.w	r3, r3, sl
   19264:	64bb      	str	r3, [r7, #72]	; 0x48
   19266:	4613      	mov	r3, r2
   19268:	ea43 030b 	orr.w	r3, r3, fp
   1926c:	64fb      	str	r3, [r7, #76]	; 0x4c
		(((u64)(x) & (u64)0x00000000ff000000ULL) << 8) |
   1926e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
   19272:	f04f 0100 	mov.w	r1, #0
   19276:	f04f 0200 	mov.w	r2, #0
   1927a:	0222      	lsls	r2, r4, #8
   1927c:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
   19280:	0219      	lsls	r1, r3, #8
   19282:	f04f 0300 	mov.w	r3, #0
   19286:	f04f 04ff 	mov.w	r4, #255	; 0xff
   1928a:	ea01 0003 	and.w	r0, r1, r3
   1928e:	6438      	str	r0, [r7, #64]	; 0x40
   19290:	ea02 0304 	and.w	r3, r2, r4
   19294:	647b      	str	r3, [r7, #68]	; 0x44
		(((u64)(x) & (u64)0x0000000000ff0000ULL) << 24) |
   19296:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
   1929a:	4623      	mov	r3, r4
   1929c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   192a0:	4602      	mov	r2, r0
   192a2:	4313      	orrs	r3, r2
   192a4:	63bb      	str	r3, [r7, #56]	; 0x38
   192a6:	462b      	mov	r3, r5
   192a8:	460a      	mov	r2, r1
   192aa:	4313      	orrs	r3, r2
   192ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		(((u64)(x) & (u64)0x000000ff00000000ULL) >> 8) |
   192ae:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
   192b2:	f04f 0100 	mov.w	r1, #0
   192b6:	f04f 0200 	mov.w	r2, #0
   192ba:	0a19      	lsrs	r1, r3, #8
   192bc:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
   192c0:	0a22      	lsrs	r2, r4, #8
   192c2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
   192c6:	f04f 0400 	mov.w	r4, #0
   192ca:	ea01 0003 	and.w	r0, r1, r3
   192ce:	6338      	str	r0, [r7, #48]	; 0x30
   192d0:	ea02 0304 	and.w	r3, r2, r4
   192d4:	637b      	str	r3, [r7, #52]	; 0x34
		(((u64)(x) & (u64)0x00000000ff000000ULL) << 8) |
   192d6:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
   192da:	4623      	mov	r3, r4
   192dc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
   192e0:	4602      	mov	r2, r0
   192e2:	4313      	orrs	r3, r2
   192e4:	62bb      	str	r3, [r7, #40]	; 0x28
   192e6:	462b      	mov	r3, r5
   192e8:	460a      	mov	r2, r1
   192ea:	4313      	orrs	r3, r2
   192ec:	62fb      	str	r3, [r7, #44]	; 0x2c
		(((u64)(x) & (u64)0x0000ff0000000000ULL) >> 24) |
   192ee:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
   192f2:	f04f 0100 	mov.w	r1, #0
   192f6:	f04f 0200 	mov.w	r2, #0
   192fa:	0e19      	lsrs	r1, r3, #24
   192fc:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
   19300:	0e22      	lsrs	r2, r4, #24
   19302:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   19306:	f04f 0400 	mov.w	r4, #0
   1930a:	ea01 0003 	and.w	r0, r1, r3
   1930e:	6238      	str	r0, [r7, #32]
   19310:	ea02 0304 	and.w	r3, r2, r4
   19314:	627b      	str	r3, [r7, #36]	; 0x24
		(((u64)(x) & (u64)0x000000ff00000000ULL) >> 8) |
   19316:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
   1931a:	4623      	mov	r3, r4
   1931c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   19320:	4602      	mov	r2, r0
   19322:	4313      	orrs	r3, r2
   19324:	61bb      	str	r3, [r7, #24]
   19326:	462b      	mov	r3, r5
   19328:	460a      	mov	r2, r1
   1932a:	4313      	orrs	r3, r2
   1932c:	61fb      	str	r3, [r7, #28]
		(((u64)(x) & (u64)0x00ff000000000000ULL) >> 40) |
   1932e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
   19332:	f04f 0300 	mov.w	r3, #0
   19336:	f04f 0400 	mov.w	r4, #0
   1933a:	0a13      	lsrs	r3, r2, #8
   1933c:	2400      	movs	r4, #0
   1933e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
   19342:	f04f 0200 	mov.w	r2, #0
   19346:	ea03 0001 	and.w	r0, r3, r1
   1934a:	6138      	str	r0, [r7, #16]
   1934c:	ea04 0302 	and.w	r3, r4, r2
   19350:	617b      	str	r3, [r7, #20]
		(((u64)(x) & (u64)0x0000ff0000000000ULL) >> 24) |
   19352:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
   19356:	4623      	mov	r3, r4
   19358:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   1935c:	4602      	mov	r2, r0
   1935e:	4313      	orrs	r3, r2
   19360:	60bb      	str	r3, [r7, #8]
   19362:	462b      	mov	r3, r5
   19364:	460a      	mov	r2, r1
   19366:	4313      	orrs	r3, r2
   19368:	60fb      	str	r3, [r7, #12]
		(((u64)(x) & (u64)0xff00000000000000ULL) >> 56));
   1936a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
   1936e:	f04f 0300 	mov.w	r3, #0
   19372:	f04f 0400 	mov.w	r4, #0
   19376:	0e13      	lsrs	r3, r2, #24
   19378:	2400      	movs	r4, #0
	return (u64) ((((u64)(x) & (u64)0x00000000000000ffULL) << 56) |
   1937a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   1937e:	4602      	mov	r2, r0
   19380:	431a      	orrs	r2, r3
   19382:	603a      	str	r2, [r7, #0]
   19384:	460a      	mov	r2, r1
   19386:	4322      	orrs	r2, r4
   19388:	607a      	str	r2, [r7, #4]
   1938a:	e9d7 3400 	ldrd	r3, r4, [r7]

}
   1938e:	4618      	mov	r0, r3
   19390:	4621      	mov	r1, r4
   19392:	3760      	adds	r7, #96	; 0x60
   19394:	46bd      	mov	sp, r7
   19396:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   1939a:	4770      	bx	lr

0001939c <iot_print_log>:
static void iot_print_log(char *str) {
   1939c:	b580      	push	{r7, lr}
   1939e:	b082      	sub	sp, #8
   193a0:	af00      	add	r7, sp, #0
   193a2:	6078      	str	r0, [r7, #4]
	DEBUG_LOG(str);
   193a4:	6878      	ldr	r0, [r7, #4]
   193a6:	f7ff fe8e 	bl	190c6 <debug_log>
}
   193aa:	bf00      	nop
   193ac:	3708      	adds	r7, #8
   193ae:	46bd      	mov	sp, r7
   193b0:	bd80      	pop	{r7, pc}

000193b2 <init_ebpf_vm>:
ebpf_vm *init_ebpf_vm(const uint8_t *code, uint32_t code_len) {
   193b2:	b580      	push	{r7, lr}
   193b4:	b084      	sub	sp, #16
   193b6:	af00      	add	r7, sp, #0
   193b8:	6078      	str	r0, [r7, #4]
   193ba:	6039      	str	r1, [r7, #0]
	ebpf_vm *vm = (ebpf_vm *) ebpf_malloc(sizeof(ebpf_vm));
   193bc:	2018      	movs	r0, #24
   193be:	f7eb f891 	bl	44e4 <ebpf_malloc>
   193c2:	60f8      	str	r0, [r7, #12]
	if (vm == NULL) {
   193c4:	68fb      	ldr	r3, [r7, #12]
   193c6:	2b00      	cmp	r3, #0
   193c8:	d101      	bne.n	193ce <init_ebpf_vm+0x1c>
		return NULL;
   193ca:	2300      	movs	r3, #0
   193cc:	e00c      	b.n	193e8 <init_ebpf_vm+0x36>
	vm->insts = (struct ebpf_inst *) code;
   193ce:	68fb      	ldr	r3, [r7, #12]
   193d0:	687a      	ldr	r2, [r7, #4]
   193d2:	601a      	str	r2, [r3, #0]
	vm->num_insts = (u16) code_len / sizeof(vm->insts[0]);
   193d4:	683b      	ldr	r3, [r7, #0]
   193d6:	b29b      	uxth	r3, r3
   193d8:	08db      	lsrs	r3, r3, #3
   193da:	b29a      	uxth	r2, r3
   193dc:	68fb      	ldr	r3, [r7, #12]
   193de:	809a      	strh	r2, [r3, #4]
	init_iot_ebpf_helpers(vm);
   193e0:	68f8      	ldr	r0, [r7, #12]
   193e2:	f000 f843 	bl	1946c <init_iot_ebpf_helpers>
	return vm;
   193e6:	68fb      	ldr	r3, [r7, #12]
}
   193e8:	4618      	mov	r0, r3
   193ea:	3710      	adds	r7, #16
   193ec:	46bd      	mov	sp, r7
   193ee:	bd80      	pop	{r7, pc}

000193f0 <ebpf_vm_set_inst>:
void ebpf_vm_set_inst(struct ebpf_vm *vm, const uint8_t *code, uint32_t code_len) {
   193f0:	b580      	push	{r7, lr}
   193f2:	b084      	sub	sp, #16
   193f4:	af00      	add	r7, sp, #0
   193f6:	60f8      	str	r0, [r7, #12]
   193f8:	60b9      	str	r1, [r7, #8]
   193fa:	607a      	str	r2, [r7, #4]
	memset(vm, 0, sizeof(struct ebpf_vm));
   193fc:	2218      	movs	r2, #24
   193fe:	2100      	movs	r1, #0
   19400:	68f8      	ldr	r0, [r7, #12]
   19402:	f7e8 fe59 	bl	20b8 <memset>
	vm->insts = (struct ebpf_inst *) code;
   19406:	68fb      	ldr	r3, [r7, #12]
   19408:	68ba      	ldr	r2, [r7, #8]
   1940a:	601a      	str	r2, [r3, #0]
	vm->num_insts = (u16) code_len / sizeof(vm->insts[0]);
   1940c:	687b      	ldr	r3, [r7, #4]
   1940e:	b29b      	uxth	r3, r3
   19410:	08db      	lsrs	r3, r3, #3
   19412:	b29a      	uxth	r2, r3
   19414:	68fb      	ldr	r3, [r7, #12]
   19416:	809a      	strh	r2, [r3, #4]
	init_iot_ebpf_helpers(vm);
   19418:	68f8      	ldr	r0, [r7, #12]
   1941a:	f000 f827 	bl	1946c <init_iot_ebpf_helpers>
}
   1941e:	bf00      	nop
   19420:	3710      	adds	r7, #16
   19422:	46bd      	mov	sp, r7
   19424:	bd80      	pop	{r7, pc}

00019426 <ebpf_register>:
{
   19426:	b580      	push	{r7, lr}
   19428:	b084      	sub	sp, #16
   1942a:	af00      	add	r7, sp, #0
   1942c:	60f8      	str	r0, [r7, #12]
   1942e:	60b9      	str	r1, [r7, #8]
   19430:	607a      	str	r2, [r7, #4]
   19432:	603b      	str	r3, [r7, #0]
	if (vm->helper_func == NULL) {
   19434:	68fb      	ldr	r3, [r7, #12]
   19436:	689b      	ldr	r3, [r3, #8]
   19438:	2b00      	cmp	r3, #0
   1943a:	d104      	bne.n	19446 <ebpf_register+0x20>
		vm->helper_func = use_default_helper_func();
   1943c:	f7eb f944 	bl	46c8 <use_default_helper_func>
   19440:	4602      	mov	r2, r0
   19442:	68fb      	ldr	r3, [r7, #12]
   19444:	609a      	str	r2, [r3, #8]
	if (idx >= MAX_EXT_FUNCS) {
   19446:	68bb      	ldr	r3, [r7, #8]
   19448:	2b0b      	cmp	r3, #11
   1944a:	d902      	bls.n	19452 <ebpf_register+0x2c>
		return -1;
   1944c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19450:	e008      	b.n	19464 <ebpf_register+0x3e>
	vm->helper_func->ext_funcs[idx] = (ext_func)fn;
   19452:	68fb      	ldr	r3, [r7, #12]
   19454:	689b      	ldr	r3, [r3, #8]
   19456:	681a      	ldr	r2, [r3, #0]
   19458:	68bb      	ldr	r3, [r7, #8]
   1945a:	009b      	lsls	r3, r3, #2
   1945c:	4413      	add	r3, r2
   1945e:	683a      	ldr	r2, [r7, #0]
   19460:	601a      	str	r2, [r3, #0]
	return 0;
   19462:	2300      	movs	r3, #0
}
   19464:	4618      	mov	r0, r3
   19466:	3710      	adds	r7, #16
   19468:	46bd      	mov	sp, r7
   1946a:	bd80      	pop	{r7, pc}

0001946c <init_iot_ebpf_helpers>:
void init_iot_ebpf_helpers(struct ebpf_vm *vm) {
   1946c:	b580      	push	{r7, lr}
   1946e:	b082      	sub	sp, #8
   19470:	af00      	add	r7, sp, #0
   19472:	6078      	str	r0, [r7, #4]
	vm->helper_func = use_default_helper_func();
   19474:	f7eb f928 	bl	46c8 <use_default_helper_func>
   19478:	4602      	mov	r2, r0
   1947a:	687b      	ldr	r3, [r7, #4]
   1947c:	609a      	str	r2, [r3, #8]
	set_default_helpers(vm);
   1947e:	6878      	ldr	r0, [r7, #4]
   19480:	f7eb f8f2 	bl	4668 <set_default_helpers>
}
   19484:	bf00      	nop
   19486:	3708      	adds	r7, #8
   19488:	46bd      	mov	sp, r7
   1948a:	bd80      	pop	{r7, pc}

0001948c <bounds_check>:

bool bounds_check(const struct ebpf_vm *vm, void *addr, int size, const char *type, u16 cur_pc, void *mem, size_t mem_len, void *stack) {
   1948c:	b480      	push	{r7}
   1948e:	b085      	sub	sp, #20
   19490:	af00      	add	r7, sp, #0
   19492:	60f8      	str	r0, [r7, #12]
   19494:	60b9      	str	r1, [r7, #8]
   19496:	607a      	str	r2, [r7, #4]
   19498:	603b      	str	r3, [r7, #0]
	if (!vm->bounds_check_enabled) {
   1949a:	68fb      	ldr	r3, [r7, #12]
   1949c:	799b      	ldrb	r3, [r3, #6]
   1949e:	f083 0301 	eor.w	r3, r3, #1
   194a2:	b2db      	uxtb	r3, r3
   194a4:	2b00      	cmp	r3, #0
   194a6:	d001      	beq.n	194ac <bounds_check+0x20>
		return true;
   194a8:	2301      	movs	r3, #1
   194aa:	e022      	b.n	194f2 <bounds_check+0x66>
	}
	if (mem && (addr >= mem && ((u32*)addr + size) <= ((u32*)mem + mem_len))) {
   194ac:	69fb      	ldr	r3, [r7, #28]
   194ae:	2b00      	cmp	r3, #0
   194b0:	d00f      	beq.n	194d2 <bounds_check+0x46>
   194b2:	68ba      	ldr	r2, [r7, #8]
   194b4:	69fb      	ldr	r3, [r7, #28]
   194b6:	429a      	cmp	r2, r3
   194b8:	d30b      	bcc.n	194d2 <bounds_check+0x46>
   194ba:	687b      	ldr	r3, [r7, #4]
   194bc:	009b      	lsls	r3, r3, #2
   194be:	68ba      	ldr	r2, [r7, #8]
   194c0:	441a      	add	r2, r3
   194c2:	6a3b      	ldr	r3, [r7, #32]
   194c4:	009b      	lsls	r3, r3, #2
   194c6:	69f9      	ldr	r1, [r7, #28]
   194c8:	440b      	add	r3, r1
   194ca:	429a      	cmp	r2, r3
   194cc:	d801      	bhi.n	194d2 <bounds_check+0x46>
		return true;
   194ce:	2301      	movs	r3, #1
   194d0:	e00f      	b.n	194f2 <bounds_check+0x66>
	}
	else if (addr >= stack && ((u32*)addr + size) <= ((u32*)stack + STACK_SIZE)) {
   194d2:	68ba      	ldr	r2, [r7, #8]
   194d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   194d6:	429a      	cmp	r2, r3
   194d8:	d30a      	bcc.n	194f0 <bounds_check+0x64>
   194da:	687b      	ldr	r3, [r7, #4]
   194dc:	009b      	lsls	r3, r3, #2
   194de:	68ba      	ldr	r2, [r7, #8]
   194e0:	441a      	add	r2, r3
   194e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   194e4:	f503 7300 	add.w	r3, r3, #512	; 0x200
   194e8:	429a      	cmp	r2, r3
   194ea:	d801      	bhi.n	194f0 <bounds_check+0x64>
		return true;
   194ec:	2301      	movs	r3, #1
   194ee:	e000      	b.n	194f2 <bounds_check+0x66>
	}
	else {
		//fprintf(stderr, "uBPF error: out of bounds memory %s at PC %u, addr %p, size %d\n", type, cur_pc, addr, size);
		//fprintf(stderr, "mem %p/%zd stack %p/%d\n", mem, mem_len, stack, STACK_SIZE);
		return false;
   194f0:	2300      	movs	r3, #0
	}
	return true;
}
   194f2:	4618      	mov	r0, r3
   194f4:	3714      	adds	r7, #20
   194f6:	46bd      	mov	sp, r7
   194f8:	bc80      	pop	{r7}
   194fa:	4770      	bx	lr

000194fc <binary_search>:
#include <string.h>
// #include "hotpatch/include/utils.h"

#define MAP_GROW 4

static int binary_search(void **arr, int size, uint32_t val) {
   194fc:	b480      	push	{r7}
   194fe:	b089      	sub	sp, #36	; 0x24
   19500:	af00      	add	r7, sp, #0
   19502:	60f8      	str	r0, [r7, #12]
   19504:	60b9      	str	r1, [r7, #8]
   19506:	607a      	str	r2, [r7, #4]
	int start = 0;
   19508:	2300      	movs	r3, #0
   1950a:	61fb      	str	r3, [r7, #28]
	int end = size - 1;
   1950c:	68bb      	ldr	r3, [r7, #8]
   1950e:	3b01      	subs	r3, #1
   19510:	61bb      	str	r3, [r7, #24]
	while (start <= end) {
   19512:	e01d      	b.n	19550 <binary_search+0x54>
		int mid = (start + end) / 2;
   19514:	69fa      	ldr	r2, [r7, #28]
   19516:	69bb      	ldr	r3, [r7, #24]
   19518:	4413      	add	r3, r2
   1951a:	0fda      	lsrs	r2, r3, #31
   1951c:	4413      	add	r3, r2
   1951e:	105b      	asrs	r3, r3, #1
   19520:	617b      	str	r3, [r7, #20]
		int m = (uint32_t) arr[mid];
   19522:	697b      	ldr	r3, [r7, #20]
   19524:	009b      	lsls	r3, r3, #2
   19526:	68fa      	ldr	r2, [r7, #12]
   19528:	4413      	add	r3, r2
   1952a:	681b      	ldr	r3, [r3, #0]
   1952c:	613b      	str	r3, [r7, #16]
		if (m == val) {
   1952e:	687b      	ldr	r3, [r7, #4]
   19530:	693a      	ldr	r2, [r7, #16]
   19532:	429a      	cmp	r2, r3
   19534:	d101      	bne.n	1953a <binary_search+0x3e>
			return mid;
   19536:	697b      	ldr	r3, [r7, #20]
   19538:	e010      	b.n	1955c <binary_search+0x60>
		} else if (m > val) {
   1953a:	693b      	ldr	r3, [r7, #16]
   1953c:	687a      	ldr	r2, [r7, #4]
   1953e:	429a      	cmp	r2, r3
   19540:	d203      	bcs.n	1954a <binary_search+0x4e>
			end = mid - 1;
   19542:	697b      	ldr	r3, [r7, #20]
   19544:	3b01      	subs	r3, #1
   19546:	61bb      	str	r3, [r7, #24]
   19548:	e002      	b.n	19550 <binary_search+0x54>
		} else {
			start = mid + 1;
   1954a:	697b      	ldr	r3, [r7, #20]
   1954c:	3301      	adds	r3, #1
   1954e:	61fb      	str	r3, [r7, #28]
	while (start <= end) {
   19550:	69fa      	ldr	r2, [r7, #28]
   19552:	69bb      	ldr	r3, [r7, #24]
   19554:	429a      	cmp	r2, r3
   19556:	dddd      	ble.n	19514 <binary_search+0x18>
		}
	}
	return -1;
   19558:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   1955c:	4618      	mov	r0, r3
   1955e:	3724      	adds	r7, #36	; 0x24
   19560:	46bd      	mov	sp, r7
   19562:	bc80      	pop	{r7}
   19564:	4770      	bx	lr

00019566 <lower_bound>:

/*
 * lower_bound: find the first one not less than target
 */
static int lower_bound(void **arr, int size, uint32_t val) {
   19566:	b480      	push	{r7}
   19568:	b089      	sub	sp, #36	; 0x24
   1956a:	af00      	add	r7, sp, #0
   1956c:	60f8      	str	r0, [r7, #12]
   1956e:	60b9      	str	r1, [r7, #8]
   19570:	607a      	str	r2, [r7, #4]
	int start = 0;
   19572:	2300      	movs	r3, #0
   19574:	61fb      	str	r3, [r7, #28]
	int end = size; // return the tail
   19576:	68bb      	ldr	r3, [r7, #8]
   19578:	61bb      	str	r3, [r7, #24]
	int mid = 0;
   1957a:	2300      	movs	r3, #0
   1957c:	617b      	str	r3, [r7, #20]
	while (start + 1 < end) {
   1957e:	e014      	b.n	195aa <lower_bound+0x44>
		mid = (start + end) / 2;
   19580:	69fa      	ldr	r2, [r7, #28]
   19582:	69bb      	ldr	r3, [r7, #24]
   19584:	4413      	add	r3, r2
   19586:	0fda      	lsrs	r2, r3, #31
   19588:	4413      	add	r3, r2
   1958a:	105b      	asrs	r3, r3, #1
   1958c:	617b      	str	r3, [r7, #20]
		if ((uint32_t) arr[mid] < val) { // (start, mid]
   1958e:	697b      	ldr	r3, [r7, #20]
   19590:	009b      	lsls	r3, r3, #2
   19592:	68fa      	ldr	r2, [r7, #12]
   19594:	4413      	add	r3, r2
   19596:	681b      	ldr	r3, [r3, #0]
   19598:	461a      	mov	r2, r3
   1959a:	687b      	ldr	r3, [r7, #4]
   1959c:	4293      	cmp	r3, r2
   1959e:	d902      	bls.n	195a6 <lower_bound+0x40>
			start = mid;
   195a0:	697b      	ldr	r3, [r7, #20]
   195a2:	61fb      	str	r3, [r7, #28]
   195a4:	e001      	b.n	195aa <lower_bound+0x44>
		} else {
			end = mid;
   195a6:	697b      	ldr	r3, [r7, #20]
   195a8:	61bb      	str	r3, [r7, #24]
	while (start + 1 < end) {
   195aa:	69fb      	ldr	r3, [r7, #28]
   195ac:	3301      	adds	r3, #1
   195ae:	69ba      	ldr	r2, [r7, #24]
   195b0:	429a      	cmp	r2, r3
   195b2:	dce5      	bgt.n	19580 <lower_bound+0x1a>
		}
	}
	return end;
   195b4:	69bb      	ldr	r3, [r7, #24]
}
   195b6:	4618      	mov	r0, r3
   195b8:	3724      	adds	r7, #36	; 0x24
   195ba:	46bd      	mov	sp, r7
   195bc:	bc80      	pop	{r7}
   195be:	4770      	bx	lr

000195c0 <arraymap_new>:
	if (key < arr->cur_size) {
		arr->vals[key] = NULL;
	}
}

arraymap *arraymap_new(int initial_size) {
   195c0:	b580      	push	{r7, lr}
   195c2:	b084      	sub	sp, #16
   195c4:	af00      	add	r7, sp, #0
   195c6:	6078      	str	r0, [r7, #4]
	arraymap *map = ebpf_malloc(sizeof(arraymap));
   195c8:	200c      	movs	r0, #12
   195ca:	f7ea ff8b 	bl	44e4 <ebpf_malloc>
   195ce:	60f8      	str	r0, [r7, #12]
	map->cur_size = 0;
   195d0:	68fb      	ldr	r3, [r7, #12]
   195d2:	2200      	movs	r2, #0
   195d4:	805a      	strh	r2, [r3, #2]
	map->max_size = initial_size;
   195d6:	687b      	ldr	r3, [r7, #4]
   195d8:	b29a      	uxth	r2, r3
   195da:	68fb      	ldr	r3, [r7, #12]
   195dc:	801a      	strh	r2, [r3, #0]
	map->keys = ebpf_malloc(initial_size * sizeof(void *));
   195de:	687b      	ldr	r3, [r7, #4]
   195e0:	009b      	lsls	r3, r3, #2
   195e2:	4618      	mov	r0, r3
   195e4:	f7ea ff7e 	bl	44e4 <ebpf_malloc>
   195e8:	4602      	mov	r2, r0
   195ea:	68fb      	ldr	r3, [r7, #12]
   195ec:	605a      	str	r2, [r3, #4]
	map->vals = ebpf_malloc(initial_size * sizeof(void *));
   195ee:	687b      	ldr	r3, [r7, #4]
   195f0:	009b      	lsls	r3, r3, #2
   195f2:	4618      	mov	r0, r3
   195f4:	f7ea ff76 	bl	44e4 <ebpf_malloc>
   195f8:	4602      	mov	r2, r0
   195fa:	68fb      	ldr	r3, [r7, #12]
   195fc:	609a      	str	r2, [r3, #8]
	return map;
   195fe:	68fb      	ldr	r3, [r7, #12]
}
   19600:	4618      	mov	r0, r3
   19602:	3710      	adds	r7, #16
   19604:	46bd      	mov	sp, r7
   19606:	bd80      	pop	{r7, pc}

00019608 <arraymap_destroy>:

void arraymap_destroy(arraymap *map) {
   19608:	b580      	push	{r7, lr}
   1960a:	b082      	sub	sp, #8
   1960c:	af00      	add	r7, sp, #0
   1960e:	6078      	str	r0, [r7, #4]
	ebpf_free(map->keys);
   19610:	687b      	ldr	r3, [r7, #4]
   19612:	685b      	ldr	r3, [r3, #4]
   19614:	4618      	mov	r0, r3
   19616:	f7ff fdb1 	bl	1917c <ebpf_free>
	ebpf_free(map->vals);
   1961a:	687b      	ldr	r3, [r7, #4]
   1961c:	689b      	ldr	r3, [r3, #8]
   1961e:	4618      	mov	r0, r3
   19620:	f7ff fdac 	bl	1917c <ebpf_free>
	ebpf_free(map);
   19624:	6878      	ldr	r0, [r7, #4]
   19626:	f7ff fda9 	bl	1917c <ebpf_free>
}
   1962a:	bf00      	nop
   1962c:	3708      	adds	r7, #8
   1962e:	46bd      	mov	sp, r7
   19630:	bd80      	pop	{r7, pc}

00019632 <arraymap_set>:

int arraymap_set(arraymap *map, void *key, void *val) {
   19632:	b580      	push	{r7, lr}
   19634:	b088      	sub	sp, #32
   19636:	af00      	add	r7, sp, #0
   19638:	60f8      	str	r0, [r7, #12]
   1963a:	60b9      	str	r1, [r7, #8]
   1963c:	607a      	str	r2, [r7, #4]
	if (map->cur_size == 0) {
   1963e:	68fb      	ldr	r3, [r7, #12]
   19640:	885b      	ldrh	r3, [r3, #2]
   19642:	2b00      	cmp	r3, #0
   19644:	d10f      	bne.n	19666 <arraymap_set+0x34>
		map->keys[0] = key;
   19646:	68fb      	ldr	r3, [r7, #12]
   19648:	685b      	ldr	r3, [r3, #4]
   1964a:	68ba      	ldr	r2, [r7, #8]
   1964c:	601a      	str	r2, [r3, #0]
		map->vals[0] = val;
   1964e:	68fb      	ldr	r3, [r7, #12]
   19650:	689b      	ldr	r3, [r3, #8]
   19652:	687a      	ldr	r2, [r7, #4]
   19654:	601a      	str	r2, [r3, #0]
		map->cur_size++;
   19656:	68fb      	ldr	r3, [r7, #12]
   19658:	885b      	ldrh	r3, [r3, #2]
   1965a:	3301      	adds	r3, #1
   1965c:	b29a      	uxth	r2, r3
   1965e:	68fb      	ldr	r3, [r7, #12]
   19660:	805a      	strh	r2, [r3, #2]
		return 0;
   19662:	2300      	movs	r3, #0
   19664:	e082      	b.n	1976c <arraymap_set+0x13a>
	}
	int insert = lower_bound(map->keys, map->cur_size, (uint32_t) key);
   19666:	68fb      	ldr	r3, [r7, #12]
   19668:	6858      	ldr	r0, [r3, #4]
   1966a:	68fb      	ldr	r3, [r7, #12]
   1966c:	885b      	ldrh	r3, [r3, #2]
   1966e:	4619      	mov	r1, r3
   19670:	68bb      	ldr	r3, [r7, #8]
   19672:	461a      	mov	r2, r3
   19674:	f7ff ff77 	bl	19566 <lower_bound>
   19678:	61b8      	str	r0, [r7, #24]
	// modify
	if ((uint32_t)(map->keys[insert]) == (uint32_t) key) {
   1967a:	68fb      	ldr	r3, [r7, #12]
   1967c:	685a      	ldr	r2, [r3, #4]
   1967e:	69bb      	ldr	r3, [r7, #24]
   19680:	009b      	lsls	r3, r3, #2
   19682:	4413      	add	r3, r2
   19684:	681b      	ldr	r3, [r3, #0]
   19686:	461a      	mov	r2, r3
   19688:	68bb      	ldr	r3, [r7, #8]
   1968a:	429a      	cmp	r2, r3
   1968c:	d107      	bne.n	1969e <arraymap_set+0x6c>
		map->vals[insert] = val;
   1968e:	68fb      	ldr	r3, [r7, #12]
   19690:	689a      	ldr	r2, [r3, #8]
   19692:	69bb      	ldr	r3, [r7, #24]
   19694:	009b      	lsls	r3, r3, #2
   19696:	4413      	add	r3, r2
   19698:	687a      	ldr	r2, [r7, #4]
   1969a:	601a      	str	r2, [r3, #0]
		return;
   1969c:	e066      	b.n	1976c <arraymap_set+0x13a>
	}
	// insert
	if (map->cur_size >= map->max_size) {
   1969e:	68fb      	ldr	r3, [r7, #12]
   196a0:	885a      	ldrh	r2, [r3, #2]
   196a2:	68fb      	ldr	r3, [r7, #12]
   196a4:	881b      	ldrh	r3, [r3, #0]
   196a6:	429a      	cmp	r2, r3
   196a8:	d322      	bcc.n	196f0 <arraymap_set+0xbe>
		int new_size = map->max_size + MAP_GROW;
   196aa:	68fb      	ldr	r3, [r7, #12]
   196ac:	881b      	ldrh	r3, [r3, #0]
   196ae:	3304      	adds	r3, #4
   196b0:	617b      	str	r3, [r7, #20]
		int ori_size = sizeof(darray) + map->max_size * sizeof(void *);
   196b2:	68fb      	ldr	r3, [r7, #12]
   196b4:	881b      	ldrh	r3, [r3, #0]
   196b6:	3302      	adds	r3, #2
   196b8:	009b      	lsls	r3, r3, #2
   196ba:	613b      	str	r3, [r7, #16]
		map->keys = ebpf_realloc(map->keys, ori_size, new_size * sizeof(void *));
   196bc:	68fb      	ldr	r3, [r7, #12]
   196be:	6858      	ldr	r0, [r3, #4]
   196c0:	6939      	ldr	r1, [r7, #16]
   196c2:	697b      	ldr	r3, [r7, #20]
   196c4:	009b      	lsls	r3, r3, #2
   196c6:	461a      	mov	r2, r3
   196c8:	f7ea ff22 	bl	4510 <ebpf_realloc>
   196cc:	4602      	mov	r2, r0
   196ce:	68fb      	ldr	r3, [r7, #12]
   196d0:	605a      	str	r2, [r3, #4]
		map->vals = ebpf_realloc(map->vals, ori_size, new_size * sizeof(void *));
   196d2:	68fb      	ldr	r3, [r7, #12]
   196d4:	6898      	ldr	r0, [r3, #8]
   196d6:	6939      	ldr	r1, [r7, #16]
   196d8:	697b      	ldr	r3, [r7, #20]
   196da:	009b      	lsls	r3, r3, #2
   196dc:	461a      	mov	r2, r3
   196de:	f7ea ff17 	bl	4510 <ebpf_realloc>
   196e2:	4602      	mov	r2, r0
   196e4:	68fb      	ldr	r3, [r7, #12]
   196e6:	609a      	str	r2, [r3, #8]
		map->max_size = new_size;
   196e8:	697b      	ldr	r3, [r7, #20]
   196ea:	b29a      	uxth	r2, r3
   196ec:	68fb      	ldr	r3, [r7, #12]
   196ee:	801a      	strh	r2, [r3, #0]
	}
	for (int i = map->cur_size; i > insert; i--) {
   196f0:	68fb      	ldr	r3, [r7, #12]
   196f2:	885b      	ldrh	r3, [r3, #2]
   196f4:	61fb      	str	r3, [r7, #28]
   196f6:	e020      	b.n	1973a <arraymap_set+0x108>
		map->keys[i] = map->keys[i - 1];
   196f8:	68fb      	ldr	r3, [r7, #12]
   196fa:	685a      	ldr	r2, [r3, #4]
   196fc:	69fb      	ldr	r3, [r7, #28]
   196fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19702:	3b01      	subs	r3, #1
   19704:	009b      	lsls	r3, r3, #2
   19706:	441a      	add	r2, r3
   19708:	68fb      	ldr	r3, [r7, #12]
   1970a:	6859      	ldr	r1, [r3, #4]
   1970c:	69fb      	ldr	r3, [r7, #28]
   1970e:	009b      	lsls	r3, r3, #2
   19710:	440b      	add	r3, r1
   19712:	6812      	ldr	r2, [r2, #0]
   19714:	601a      	str	r2, [r3, #0]
		map->vals[i] = map->vals[i - 1];
   19716:	68fb      	ldr	r3, [r7, #12]
   19718:	689a      	ldr	r2, [r3, #8]
   1971a:	69fb      	ldr	r3, [r7, #28]
   1971c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19720:	3b01      	subs	r3, #1
   19722:	009b      	lsls	r3, r3, #2
   19724:	441a      	add	r2, r3
   19726:	68fb      	ldr	r3, [r7, #12]
   19728:	6899      	ldr	r1, [r3, #8]
   1972a:	69fb      	ldr	r3, [r7, #28]
   1972c:	009b      	lsls	r3, r3, #2
   1972e:	440b      	add	r3, r1
   19730:	6812      	ldr	r2, [r2, #0]
   19732:	601a      	str	r2, [r3, #0]
	for (int i = map->cur_size; i > insert; i--) {
   19734:	69fb      	ldr	r3, [r7, #28]
   19736:	3b01      	subs	r3, #1
   19738:	61fb      	str	r3, [r7, #28]
   1973a:	69fa      	ldr	r2, [r7, #28]
   1973c:	69bb      	ldr	r3, [r7, #24]
   1973e:	429a      	cmp	r2, r3
   19740:	dcda      	bgt.n	196f8 <arraymap_set+0xc6>
	}
	map->keys[insert] = key;
   19742:	68fb      	ldr	r3, [r7, #12]
   19744:	685a      	ldr	r2, [r3, #4]
   19746:	69bb      	ldr	r3, [r7, #24]
   19748:	009b      	lsls	r3, r3, #2
   1974a:	4413      	add	r3, r2
   1974c:	68ba      	ldr	r2, [r7, #8]
   1974e:	601a      	str	r2, [r3, #0]
	map->vals[insert] = val;
   19750:	68fb      	ldr	r3, [r7, #12]
   19752:	689a      	ldr	r2, [r3, #8]
   19754:	69bb      	ldr	r3, [r7, #24]
   19756:	009b      	lsls	r3, r3, #2
   19758:	4413      	add	r3, r2
   1975a:	687a      	ldr	r2, [r7, #4]
   1975c:	601a      	str	r2, [r3, #0]
	map->cur_size++;
   1975e:	68fb      	ldr	r3, [r7, #12]
   19760:	885b      	ldrh	r3, [r3, #2]
   19762:	3301      	adds	r3, #1
   19764:	b29a      	uxth	r2, r3
   19766:	68fb      	ldr	r3, [r7, #12]
   19768:	805a      	strh	r2, [r3, #2]
	//DEBUG_LOG("%u insert: %d sz: %d\n", (uint32_t) key, insert, map->cur_size);
	return insert;
   1976a:	69bb      	ldr	r3, [r7, #24]
}
   1976c:	4618      	mov	r0, r3
   1976e:	3720      	adds	r7, #32
   19770:	46bd      	mov	sp, r7
   19772:	bd80      	pop	{r7, pc}

00019774 <arraymap_get>:

void* arraymap_get(arraymap *map, void * key) {
   19774:	b580      	push	{r7, lr}
   19776:	b084      	sub	sp, #16
   19778:	af00      	add	r7, sp, #0
   1977a:	6078      	str	r0, [r7, #4]
   1977c:	6039      	str	r1, [r7, #0]
	int idx = binary_search(map->keys, map->cur_size, (uint32_t) key);
   1977e:	687b      	ldr	r3, [r7, #4]
   19780:	6858      	ldr	r0, [r3, #4]
   19782:	687b      	ldr	r3, [r7, #4]
   19784:	885b      	ldrh	r3, [r3, #2]
   19786:	4619      	mov	r1, r3
   19788:	683b      	ldr	r3, [r7, #0]
   1978a:	461a      	mov	r2, r3
   1978c:	f7ff feb6 	bl	194fc <binary_search>
   19790:	60f8      	str	r0, [r7, #12]
	// DEBUG_LOG("search: %d key: %u sz: %d %d\n", idx, key, map->cur_size);
	if (idx != -1) {
   19792:	68fb      	ldr	r3, [r7, #12]
   19794:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   19798:	d006      	beq.n	197a8 <arraymap_get+0x34>
		return map->vals[idx];
   1979a:	687b      	ldr	r3, [r7, #4]
   1979c:	689a      	ldr	r2, [r3, #8]
   1979e:	68fb      	ldr	r3, [r7, #12]
   197a0:	009b      	lsls	r3, r3, #2
   197a2:	4413      	add	r3, r2
   197a4:	681b      	ldr	r3, [r3, #0]
   197a6:	e000      	b.n	197aa <arraymap_get+0x36>
	}
	return NULL;
   197a8:	2300      	movs	r3, #0
}
   197aa:	4618      	mov	r0, r3
   197ac:	3710      	adds	r7, #16
   197ae:	46bd      	mov	sp, r7
   197b0:	bd80      	pop	{r7, pc}

000197b2 <arraymap_iter_val>:
		return NULL;
	}
	return map->keys[idx];
}

void* arraymap_iter_val(arraymap *map, int idx) {
   197b2:	b480      	push	{r7}
   197b4:	b083      	sub	sp, #12
   197b6:	af00      	add	r7, sp, #0
   197b8:	6078      	str	r0, [r7, #4]
   197ba:	6039      	str	r1, [r7, #0]
	if (idx < 0 || idx >= map->cur_size) {
   197bc:	683b      	ldr	r3, [r7, #0]
   197be:	2b00      	cmp	r3, #0
   197c0:	db05      	blt.n	197ce <arraymap_iter_val+0x1c>
   197c2:	687b      	ldr	r3, [r7, #4]
   197c4:	885b      	ldrh	r3, [r3, #2]
   197c6:	461a      	mov	r2, r3
   197c8:	683b      	ldr	r3, [r7, #0]
   197ca:	4293      	cmp	r3, r2
   197cc:	db01      	blt.n	197d2 <arraymap_iter_val+0x20>
		return NULL;
   197ce:	2300      	movs	r3, #0
   197d0:	e005      	b.n	197de <arraymap_iter_val+0x2c>
	}
	return map->vals[idx];
   197d2:	687b      	ldr	r3, [r7, #4]
   197d4:	689a      	ldr	r2, [r3, #8]
   197d6:	683b      	ldr	r3, [r7, #0]
   197d8:	009b      	lsls	r3, r3, #2
   197da:	4413      	add	r3, r2
   197dc:	681b      	ldr	r3, [r3, #0]
}
   197de:	4618      	mov	r0, r3
   197e0:	370c      	adds	r7, #12
   197e2:	46bd      	mov	sp, r7
   197e4:	bc80      	pop	{r7}
   197e6:	4770      	bx	lr

000197e8 <jit_mem_free>:

void jit_mem_free(jit_mem *mem) {
   197e8:	b480      	push	{r7}
   197ea:	b083      	sub	sp, #12
   197ec:	af00      	add	r7, sp, #0
   197ee:	6078      	str	r0, [r7, #4]
	mem->code_size = 0;
   197f0:	687b      	ldr	r3, [r7, #4]
   197f2:	2200      	movs	r2, #0
   197f4:	605a      	str	r2, [r3, #4]
	mem->jit_code = NULL;
   197f6:	687b      	ldr	r3, [r7, #4]
   197f8:	2200      	movs	r2, #0
   197fa:	601a      	str	r2, [r3, #0]
	mem->jmp_offsets = NULL;
   197fc:	687b      	ldr	r3, [r7, #4]
   197fe:	2200      	movs	r2, #0
   19800:	609a      	str	r2, [r3, #8]
}
   19802:	bf00      	nop
   19804:	370c      	adds	r7, #12
   19806:	46bd      	mov	sp, r7
   19808:	bc80      	pop	{r7}
   1980a:	4770      	bx	lr

0001980c <jit_state_set_mem>:
	ebpf_free(mem);
}

#endif

void jit_state_set_mem(jit_state *state, jit_mem *mem) {
   1980c:	b480      	push	{r7}
   1980e:	b083      	sub	sp, #12
   19810:	af00      	add	r7, sp, #0
   19812:	6078      	str	r0, [r7, #4]
   19814:	6039      	str	r1, [r7, #0]
	state->jmem = mem;
   19816:	687b      	ldr	r3, [r7, #4]
   19818:	683a      	ldr	r2, [r7, #0]
   1981a:	625a      	str	r2, [r3, #36]	; 0x24
	state->jit_code = (uint8_t *) ((uint32_t) mem->jit_code & (~0x3));
   1981c:	683b      	ldr	r3, [r7, #0]
   1981e:	681b      	ldr	r3, [r3, #0]
   19820:	f023 0303 	bic.w	r3, r3, #3
   19824:	461a      	mov	r2, r3
   19826:	687b      	ldr	r3, [r7, #4]
   19828:	609a      	str	r2, [r3, #8]
	state->offsets = (uint32_t *) mem->jmp_offsets;
   1982a:	683b      	ldr	r3, [r7, #0]
   1982c:	689a      	ldr	r2, [r3, #8]
   1982e:	687b      	ldr	r3, [r7, #4]
   19830:	61da      	str	r2, [r3, #28]
}
   19832:	bf00      	nop
   19834:	370c      	adds	r7, #12
   19836:	46bd      	mov	sp, r7
   19838:	bc80      	pop	{r7}
   1983a:	4770      	bx	lr

0001983c <gen_jit_code>:

void gen_jit_code(struct ebpf_vm *vm) {
   1983c:	b580      	push	{r7, lr}
   1983e:	b08e      	sub	sp, #56	; 0x38
   19840:	af00      	add	r7, sp, #0
   19842:	6078      	str	r0, [r7, #4]
	if (vm->jmem != NULL) {
   19844:	687b      	ldr	r3, [r7, #4]
   19846:	691b      	ldr	r3, [r3, #16]
   19848:	2b00      	cmp	r3, #0
   1984a:	d004      	beq.n	19856 <gen_jit_code+0x1a>
		jit_mem_free(vm->jmem);
   1984c:	687b      	ldr	r3, [r7, #4]
   1984e:	691b      	ldr	r3, [r3, #16]
   19850:	4618      	mov	r0, r3
   19852:	f7ff ffc9 	bl	197e8 <jit_mem_free>
	}
	vm->jmem = jit_mem_allocate(vm->num_insts);
   19856:	687b      	ldr	r3, [r7, #4]
   19858:	889b      	ldrh	r3, [r3, #4]
   1985a:	4618      	mov	r0, r3
   1985c:	f7ed fb74 	bl	6f48 <jit_mem_allocate>
   19860:	4602      	mov	r2, r0
   19862:	687b      	ldr	r3, [r7, #4]
   19864:	611a      	str	r2, [r3, #16]
	jit_state state;
	state.insts = vm->insts;
   19866:	687b      	ldr	r3, [r7, #4]
   19868:	681b      	ldr	r3, [r3, #0]
   1986a:	60fb      	str	r3, [r7, #12]
	state.inst_num = vm->num_insts;
   1986c:	687b      	ldr	r3, [r7, #4]
   1986e:	889b      	ldrh	r3, [r3, #4]
   19870:	613b      	str	r3, [r7, #16]
	state.idx = 0;
   19872:	2300      	movs	r3, #0
   19874:	61fb      	str	r3, [r7, #28]
	//state.jit_code = (uint8_t *) ((uint32_t) vm->jmem->jit_code & (~0x3));
	state.err_line = 0;
   19876:	2300      	movs	r3, #0
   19878:	627b      	str	r3, [r7, #36]	; 0x24
	state.__bpf_call_base = vm->helper_func->ext_funcs;
   1987a:	687b      	ldr	r3, [r7, #4]
   1987c:	689b      	ldr	r3, [r3, #8]
   1987e:	681b      	ldr	r3, [r3, #0]
   19880:	62fb      	str	r3, [r7, #44]	; 0x2c
	jit_state_set_mem(&state, vm->jmem);
   19882:	687b      	ldr	r3, [r7, #4]
   19884:	691a      	ldr	r2, [r3, #16]
   19886:	f107 030c 	add.w	r3, r7, #12
   1988a:	4611      	mov	r1, r2
   1988c:	4618      	mov	r0, r3
   1988e:	f7ff ffbd 	bl	1980c <jit_state_set_mem>
	jit_compile(&state);
   19892:	f107 030c 	add.w	r3, r7, #12
   19896:	4618      	mov	r0, r3
   19898:	f001 fc63 	bl	1b162 <jit_compile>
	vm->jit_func = (ebpf_jit_fn) ((uint32_t) vm->jmem->jit_code | 0x1);
   1989c:	687b      	ldr	r3, [r7, #4]
   1989e:	691b      	ldr	r3, [r3, #16]
   198a0:	681b      	ldr	r3, [r3, #0]
   198a2:	f043 0301 	orr.w	r3, r3, #1
   198a6:	461a      	mov	r2, r3
   198a8:	687b      	ldr	r3, [r7, #4]
   198aa:	60da      	str	r2, [r3, #12]

#ifdef SYS_CORTEX_M4
	__asm__("DSB");
   198ac:	f3bf 8f4f 	dsb	sy
	__asm__("ISB");
   198b0:	f3bf 8f6f 	isb	sy
#endif
	jit_dump_inst(&state);
   198b4:	f107 030c 	add.w	r3, r7, #12
   198b8:	4618      	mov	r0, r3
   198ba:	f7ed fd5d 	bl	7378 <jit_dump_inst>
#ifdef LINUX_TEST
	// jit_dump_inst(&state);
#endif
}
   198be:	bf00      	nop
   198c0:	3738      	adds	r7, #56	; 0x38
   198c2:	46bd      	mov	sp, r7
   198c4:	bd80      	pop	{r7, pc}

000198c6 <jit_mem_statistic>:

int jit_mem_statistic(struct ebpf_vm *vm) {
   198c6:	b480      	push	{r7}
   198c8:	b087      	sub	sp, #28
   198ca:	af00      	add	r7, sp, #0
   198cc:	6078      	str	r0, [r7, #4]
	int code_size = vm->num_insts * 4;
   198ce:	687b      	ldr	r3, [r7, #4]
   198d0:	889b      	ldrh	r3, [r3, #4]
   198d2:	009b      	lsls	r3, r3, #2
   198d4:	617b      	str	r3, [r7, #20]
	int jit_size = 10 * vm->num_insts + 16;
   198d6:	687b      	ldr	r3, [r7, #4]
   198d8:	889b      	ldrh	r3, [r3, #4]
   198da:	461a      	mov	r2, r3
   198dc:	4613      	mov	r3, r2
   198de:	009b      	lsls	r3, r3, #2
   198e0:	4413      	add	r3, r2
   198e2:	005b      	lsls	r3, r3, #1
   198e4:	3310      	adds	r3, #16
   198e6:	613b      	str	r3, [r7, #16]
	int offset_size = 4 * vm->num_insts + 16;
   198e8:	687b      	ldr	r3, [r7, #4]
   198ea:	889b      	ldrh	r3, [r3, #4]
   198ec:	3304      	adds	r3, #4
   198ee:	009b      	lsls	r3, r3, #2
   198f0:	60fb      	str	r3, [r7, #12]
	int mem = code_size + jit_size + offset_size;
   198f2:	697a      	ldr	r2, [r7, #20]
   198f4:	693b      	ldr	r3, [r7, #16]
   198f6:	4413      	add	r3, r2
   198f8:	68fa      	ldr	r2, [r7, #12]
   198fa:	4413      	add	r3, r2
   198fc:	60bb      	str	r3, [r7, #8]
	return code_size;
   198fe:	697b      	ldr	r3, [r7, #20]
}
   19900:	4618      	mov	r0, r3
   19902:	371c      	adds	r7, #28
   19904:	46bd      	mov	sp, r7
   19906:	bc80      	pop	{r7}
   19908:	4770      	bx	lr

0001990a <_thumb32_UMULL_T2>:
static inline u32 _thumb32_UMULL_T2(s8 RdLo, s8 RdHi, s8 Rn, s8 Rm) {
   1990a:	b490      	push	{r4, r7}
   1990c:	b082      	sub	sp, #8
   1990e:	af00      	add	r7, sp, #0
   19910:	4604      	mov	r4, r0
   19912:	4608      	mov	r0, r1
   19914:	4611      	mov	r1, r2
   19916:	461a      	mov	r2, r3
   19918:	4623      	mov	r3, r4
   1991a:	71fb      	strb	r3, [r7, #7]
   1991c:	4603      	mov	r3, r0
   1991e:	71bb      	strb	r3, [r7, #6]
   19920:	460b      	mov	r3, r1
   19922:	717b      	strb	r3, [r7, #5]
   19924:	4613      	mov	r3, r2
   19926:	713b      	strb	r3, [r7, #4]
    return (THUMB2_UMULL_T2) | (Rn << 16) | (RdLo << 12) | (RdHi << 8) | (Rm);
   19928:	f997 3005 	ldrsb.w	r3, [r7, #5]
   1992c:	041b      	lsls	r3, r3, #16
   1992e:	461a      	mov	r2, r3
   19930:	f997 3007 	ldrsb.w	r3, [r7, #7]
   19934:	031b      	lsls	r3, r3, #12
   19936:	4313      	orrs	r3, r2
   19938:	f997 2006 	ldrsb.w	r2, [r7, #6]
   1993c:	0212      	lsls	r2, r2, #8
   1993e:	431a      	orrs	r2, r3
   19940:	f997 3004 	ldrsb.w	r3, [r7, #4]
   19944:	4313      	orrs	r3, r2
   19946:	f043 437b 	orr.w	r3, r3, #4211081216	; 0xfb000000
   1994a:	f443 0320 	orr.w	r3, r3, #10485760	; 0xa00000
}
   1994e:	4618      	mov	r0, r3
   19950:	3708      	adds	r7, #8
   19952:	46bd      	mov	sp, r7
   19954:	bc90      	pop	{r4, r7}
   19956:	4770      	bx	lr

00019958 <_thumb32_MUL_T2>:
static inline u32 _thumb32_MUL_T2(s8 Rd, s8 Rn, s8 Rm) {
   19958:	b480      	push	{r7}
   1995a:	b083      	sub	sp, #12
   1995c:	af00      	add	r7, sp, #0
   1995e:	4603      	mov	r3, r0
   19960:	71fb      	strb	r3, [r7, #7]
   19962:	460b      	mov	r3, r1
   19964:	71bb      	strb	r3, [r7, #6]
   19966:	4613      	mov	r3, r2
   19968:	717b      	strb	r3, [r7, #5]
    return (THUMB2_MUL_T2) | (Rn << 16) | (Rd << 8) | (Rm);
   1996a:	f997 3006 	ldrsb.w	r3, [r7, #6]
   1996e:	041b      	lsls	r3, r3, #16
   19970:	461a      	mov	r2, r3
   19972:	f997 3007 	ldrsb.w	r3, [r7, #7]
   19976:	021b      	lsls	r3, r3, #8
   19978:	431a      	orrs	r2, r3
   1997a:	f997 3005 	ldrsb.w	r3, [r7, #5]
   1997e:	4313      	orrs	r3, r2
   19980:	f043 437b 	orr.w	r3, r3, #4211081216	; 0xfb000000
   19984:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
}
   19988:	4618      	mov	r0, r3
   1998a:	370c      	adds	r7, #12
   1998c:	46bd      	mov	sp, r7
   1998e:	bc80      	pop	{r7}
   19990:	4770      	bx	lr

00019992 <_thumb32_RSBW_IMM_T2>:
static inline u32 _thumb32_RSBW_IMM_T2(s8 Rd, s8 Rn, s32 shiftImm12, u8 flagS) {
   19992:	b480      	push	{r7}
   19994:	b087      	sub	sp, #28
   19996:	af00      	add	r7, sp, #0
   19998:	603a      	str	r2, [r7, #0]
   1999a:	461a      	mov	r2, r3
   1999c:	4603      	mov	r3, r0
   1999e:	71fb      	strb	r3, [r7, #7]
   199a0:	460b      	mov	r3, r1
   199a2:	71bb      	strb	r3, [r7, #6]
   199a4:	4613      	mov	r3, r2
   199a6:	717b      	strb	r3, [r7, #5]
    s32 imm8 = shiftImm12 & 0xff;
   199a8:	683b      	ldr	r3, [r7, #0]
   199aa:	b2db      	uxtb	r3, r3
   199ac:	617b      	str	r3, [r7, #20]
    s32 imm3 = (shiftImm12 >> 8) & 0b111;
   199ae:	683b      	ldr	r3, [r7, #0]
   199b0:	121b      	asrs	r3, r3, #8
   199b2:	f003 0307 	and.w	r3, r3, #7
   199b6:	613b      	str	r3, [r7, #16]
    s32 i = (shiftImm12 >> 11) & 0x1;
   199b8:	683b      	ldr	r3, [r7, #0]
   199ba:	12db      	asrs	r3, r3, #11
   199bc:	f003 0301 	and.w	r3, r3, #1
   199c0:	60fb      	str	r3, [r7, #12]
    return (THUMB2_RSBW_IMM) | (i << 26) | (flagS << 20) | (Rn << 16) | (imm3 << 12) | (Rd << 8) | (imm8);
   199c2:	68fb      	ldr	r3, [r7, #12]
   199c4:	069b      	lsls	r3, r3, #26
   199c6:	461a      	mov	r2, r3
   199c8:	797b      	ldrb	r3, [r7, #5]
   199ca:	051b      	lsls	r3, r3, #20
   199cc:	4313      	orrs	r3, r2
   199ce:	f997 2006 	ldrsb.w	r2, [r7, #6]
   199d2:	0412      	lsls	r2, r2, #16
   199d4:	4313      	orrs	r3, r2
   199d6:	693a      	ldr	r2, [r7, #16]
   199d8:	0312      	lsls	r2, r2, #12
   199da:	4313      	orrs	r3, r2
   199dc:	f997 2007 	ldrsb.w	r2, [r7, #7]
   199e0:	0212      	lsls	r2, r2, #8
   199e2:	431a      	orrs	r2, r3
   199e4:	697b      	ldr	r3, [r7, #20]
   199e6:	4313      	orrs	r3, r2
   199e8:	f043 4371 	orr.w	r3, r3, #4043309056	; 0xf1000000
   199ec:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
}
   199f0:	4618      	mov	r0, r3
   199f2:	371c      	adds	r7, #28
   199f4:	46bd      	mov	sp, r7
   199f6:	bc80      	pop	{r7}
   199f8:	4770      	bx	lr

000199fa <_thumb16_B_T2>:
static inline u16 _thumb16_B_T2(s32 offImm12) {
   199fa:	b480      	push	{r7}
   199fc:	b085      	sub	sp, #20
   199fe:	af00      	add	r7, sp, #0
   19a00:	6078      	str	r0, [r7, #4]
    u16 imm11 = (offImm12 >> 1) & 0x7ff;
   19a02:	687b      	ldr	r3, [r7, #4]
   19a04:	105b      	asrs	r3, r3, #1
   19a06:	b29b      	uxth	r3, r3
   19a08:	f3c3 030a 	ubfx	r3, r3, #0, #11
   19a0c:	81fb      	strh	r3, [r7, #14]
    return (THUMB2_B_T2) | (imm11);
   19a0e:	89fb      	ldrh	r3, [r7, #14]
   19a10:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
   19a14:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
   19a18:	b29b      	uxth	r3, r3
}
   19a1a:	4618      	mov	r0, r3
   19a1c:	3714      	adds	r7, #20
   19a1e:	46bd      	mov	sp, r7
   19a20:	bc80      	pop	{r7}
   19a22:	4770      	bx	lr

00019a24 <_thumb16_BLX_REG_T1>:
static inline u16 _thumb16_BLX_REG_T1(s8 Rm) {
   19a24:	b480      	push	{r7}
   19a26:	b083      	sub	sp, #12
   19a28:	af00      	add	r7, sp, #0
   19a2a:	4603      	mov	r3, r0
   19a2c:	71fb      	strb	r3, [r7, #7]
    return (THUMB2_BLX_REG_T1) | (Rm << 3);
   19a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   19a32:	00db      	lsls	r3, r3, #3
   19a34:	b21b      	sxth	r3, r3
   19a36:	f443 438f 	orr.w	r3, r3, #18304	; 0x4780
   19a3a:	b21b      	sxth	r3, r3
   19a3c:	b29b      	uxth	r3, r3
}
   19a3e:	4618      	mov	r0, r3
   19a40:	370c      	adds	r7, #12
   19a42:	46bd      	mov	sp, r7
   19a44:	bc80      	pop	{r7}
   19a46:	4770      	bx	lr

00019a48 <_thumb32_BW_T3>:
static inline u32 _thumb32_BW_T3(s32 offImm20, s8 cond) {
   19a48:	b480      	push	{r7}
   19a4a:	b089      	sub	sp, #36	; 0x24
   19a4c:	af00      	add	r7, sp, #0
   19a4e:	6078      	str	r0, [r7, #4]
   19a50:	460b      	mov	r3, r1
   19a52:	70fb      	strb	r3, [r7, #3]
    u32 S = offImm20 < 0;
   19a54:	687b      	ldr	r3, [r7, #4]
   19a56:	0fdb      	lsrs	r3, r3, #31
   19a58:	b2db      	uxtb	r3, r3
   19a5a:	61fb      	str	r3, [r7, #28]
    u32 imm11 = (offImm20 >> 1) & 0x7ff;
   19a5c:	687b      	ldr	r3, [r7, #4]
   19a5e:	105b      	asrs	r3, r3, #1
   19a60:	f3c3 030a 	ubfx	r3, r3, #0, #11
   19a64:	61bb      	str	r3, [r7, #24]
    u32 imm6 = (offImm20 >> 12) & 0x3f;
   19a66:	687b      	ldr	r3, [r7, #4]
   19a68:	131b      	asrs	r3, r3, #12
   19a6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   19a6e:	617b      	str	r3, [r7, #20]
    u32 J1 = (offImm20 >> 18) & 0x1;
   19a70:	687b      	ldr	r3, [r7, #4]
   19a72:	149b      	asrs	r3, r3, #18
   19a74:	f003 0301 	and.w	r3, r3, #1
   19a78:	613b      	str	r3, [r7, #16]
    u32 J2 = (offImm20 >> 19) & 0x1;
   19a7a:	687b      	ldr	r3, [r7, #4]
   19a7c:	14db      	asrs	r3, r3, #19
   19a7e:	f003 0301 	and.w	r3, r3, #1
   19a82:	60fb      	str	r3, [r7, #12]
    return (THUMB2_BW_COND_T3) | (S << 26) | (cond << 22) | (imm6 << 16) | (J1 << 13) | (J2 << 11) | (imm11);
   19a84:	69fb      	ldr	r3, [r7, #28]
   19a86:	069b      	lsls	r3, r3, #26
   19a88:	f997 2003 	ldrsb.w	r2, [r7, #3]
   19a8c:	0592      	lsls	r2, r2, #22
   19a8e:	431a      	orrs	r2, r3
   19a90:	697b      	ldr	r3, [r7, #20]
   19a92:	041b      	lsls	r3, r3, #16
   19a94:	431a      	orrs	r2, r3
   19a96:	693b      	ldr	r3, [r7, #16]
   19a98:	035b      	lsls	r3, r3, #13
   19a9a:	431a      	orrs	r2, r3
   19a9c:	68fb      	ldr	r3, [r7, #12]
   19a9e:	02db      	lsls	r3, r3, #11
   19aa0:	431a      	orrs	r2, r3
   19aa2:	69bb      	ldr	r3, [r7, #24]
   19aa4:	4313      	orrs	r3, r2
   19aa6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
   19aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
}
   19aae:	4618      	mov	r0, r3
   19ab0:	3724      	adds	r7, #36	; 0x24
   19ab2:	46bd      	mov	sp, r7
   19ab4:	bc80      	pop	{r7}
   19ab6:	4770      	bx	lr

00019ab8 <_thumb32_BW_T4>:
static inline u32 _thumb32_BW_T4(s32 offImm23) {
   19ab8:	b480      	push	{r7}
   19aba:	b08b      	sub	sp, #44	; 0x2c
   19abc:	af00      	add	r7, sp, #0
   19abe:	6078      	str	r0, [r7, #4]
    s32 S = offImm23 < 0;
   19ac0:	687b      	ldr	r3, [r7, #4]
   19ac2:	0fdb      	lsrs	r3, r3, #31
   19ac4:	b2db      	uxtb	r3, r3
   19ac6:	627b      	str	r3, [r7, #36]	; 0x24
    s32 imm11 = (offImm23 >> 1) & 0x7ff;
   19ac8:	687b      	ldr	r3, [r7, #4]
   19aca:	105b      	asrs	r3, r3, #1
   19acc:	f3c3 030a 	ubfx	r3, r3, #0, #11
   19ad0:	623b      	str	r3, [r7, #32]
    s32 imm10 = (offImm23 >> 12) & 0x3ff;
   19ad2:	687b      	ldr	r3, [r7, #4]
   19ad4:	131b      	asrs	r3, r3, #12
   19ad6:	f3c3 0309 	ubfx	r3, r3, #0, #10
   19ada:	61fb      	str	r3, [r7, #28]
    s32 I1 = (offImm23 >> 18) & 0x1;
   19adc:	687b      	ldr	r3, [r7, #4]
   19ade:	149b      	asrs	r3, r3, #18
   19ae0:	f003 0301 	and.w	r3, r3, #1
   19ae4:	61bb      	str	r3, [r7, #24]
    s32 I2 = (offImm23 >> 19) & 0x1;
   19ae6:	687b      	ldr	r3, [r7, #4]
   19ae8:	14db      	asrs	r3, r3, #19
   19aea:	f003 0301 	and.w	r3, r3, #1
   19aee:	617b      	str	r3, [r7, #20]
    s32 J1 = (~I1 ^ S) & 0x1;
   19af0:	69ba      	ldr	r2, [r7, #24]
   19af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19af4:	4053      	eors	r3, r2
   19af6:	f003 0301 	and.w	r3, r3, #1
   19afa:	2b00      	cmp	r3, #0
   19afc:	bf0c      	ite	eq
   19afe:	2301      	moveq	r3, #1
   19b00:	2300      	movne	r3, #0
   19b02:	b2db      	uxtb	r3, r3
   19b04:	613b      	str	r3, [r7, #16]
    s32 J2 = (~I2 ^ S) & 0x1;
   19b06:	697a      	ldr	r2, [r7, #20]
   19b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19b0a:	4053      	eors	r3, r2
   19b0c:	f003 0301 	and.w	r3, r3, #1
   19b10:	2b00      	cmp	r3, #0
   19b12:	bf0c      	ite	eq
   19b14:	2301      	moveq	r3, #1
   19b16:	2300      	movne	r3, #0
   19b18:	b2db      	uxtb	r3, r3
   19b1a:	60fb      	str	r3, [r7, #12]
    return (THUMB2_BW_COND_T3) | (S << 26) | (imm10 << 16) | (J1 << 13) | (J2 << 11) | (imm11);
   19b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19b1e:	069b      	lsls	r3, r3, #26
   19b20:	461a      	mov	r2, r3
   19b22:	69fb      	ldr	r3, [r7, #28]
   19b24:	041b      	lsls	r3, r3, #16
   19b26:	4313      	orrs	r3, r2
   19b28:	693a      	ldr	r2, [r7, #16]
   19b2a:	0352      	lsls	r2, r2, #13
   19b2c:	4313      	orrs	r3, r2
   19b2e:	68fa      	ldr	r2, [r7, #12]
   19b30:	02d2      	lsls	r2, r2, #11
   19b32:	431a      	orrs	r2, r3
   19b34:	6a3b      	ldr	r3, [r7, #32]
   19b36:	4313      	orrs	r3, r2
   19b38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
   19b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
}
   19b40:	4618      	mov	r0, r3
   19b42:	372c      	adds	r7, #44	; 0x2c
   19b44:	46bd      	mov	sp, r7
   19b46:	bc80      	pop	{r7}
   19b48:	4770      	bx	lr

00019b4a <_thumb32_SBCW_T2>:
static inline u32 _thumb32_SBCW_T2(s8 Rd, s8 Rn, s8 Rm, s32 shiftImm5, u8 srtype, u8 flagS) {
   19b4a:	b480      	push	{r7}
   19b4c:	b085      	sub	sp, #20
   19b4e:	af00      	add	r7, sp, #0
   19b50:	603b      	str	r3, [r7, #0]
   19b52:	4603      	mov	r3, r0
   19b54:	71fb      	strb	r3, [r7, #7]
   19b56:	460b      	mov	r3, r1
   19b58:	71bb      	strb	r3, [r7, #6]
   19b5a:	4613      	mov	r3, r2
   19b5c:	717b      	strb	r3, [r7, #5]
    s32 imm3 = (shiftImm5 >> 2) & 0b111;
   19b5e:	683b      	ldr	r3, [r7, #0]
   19b60:	109b      	asrs	r3, r3, #2
   19b62:	f003 0307 	and.w	r3, r3, #7
   19b66:	60fb      	str	r3, [r7, #12]
    s32 imm2 = shiftImm5 & 0b11;
   19b68:	683b      	ldr	r3, [r7, #0]
   19b6a:	f003 0303 	and.w	r3, r3, #3
   19b6e:	60bb      	str	r3, [r7, #8]
    return (THUMB2_SBCW_REG) | (flagS << 20) | (Rn << 16) | (imm3 << 12) | (Rd << 8) |
   19b70:	7f3b      	ldrb	r3, [r7, #28]
   19b72:	051b      	lsls	r3, r3, #20
   19b74:	461a      	mov	r2, r3
   19b76:	f997 3006 	ldrsb.w	r3, [r7, #6]
   19b7a:	041b      	lsls	r3, r3, #16
   19b7c:	4313      	orrs	r3, r2
   19b7e:	68fa      	ldr	r2, [r7, #12]
   19b80:	0312      	lsls	r2, r2, #12
   19b82:	4313      	orrs	r3, r2
   19b84:	f997 2007 	ldrsb.w	r2, [r7, #7]
   19b88:	0212      	lsls	r2, r2, #8
   19b8a:	4313      	orrs	r3, r2
         (imm2 << 6) | (srtype << 4) | (Rm);
   19b8c:	68ba      	ldr	r2, [r7, #8]
   19b8e:	0192      	lsls	r2, r2, #6
    return (THUMB2_SBCW_REG) | (flagS << 20) | (Rn << 16) | (imm3 << 12) | (Rd << 8) |
   19b90:	4313      	orrs	r3, r2
         (imm2 << 6) | (srtype << 4) | (Rm);
   19b92:	7e3a      	ldrb	r2, [r7, #24]
   19b94:	0112      	lsls	r2, r2, #4
   19b96:	431a      	orrs	r2, r3
   19b98:	f997 3005 	ldrsb.w	r3, [r7, #5]
   19b9c:	4313      	orrs	r3, r2
   19b9e:	f043 436b 	orr.w	r3, r3, #3942645760	; 0xeb000000
   19ba2:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
}
   19ba6:	4618      	mov	r0, r3
   19ba8:	3714      	adds	r7, #20
   19baa:	46bd      	mov	sp, r7
   19bac:	bc80      	pop	{r7}
   19bae:	4770      	bx	lr

00019bb0 <_thumb16_CMP_REG_T1>:
static inline u16 _thumb16_CMP_REG_T1(s8 Rn, s8 Rm) {
   19bb0:	b480      	push	{r7}
   19bb2:	b083      	sub	sp, #12
   19bb4:	af00      	add	r7, sp, #0
   19bb6:	4603      	mov	r3, r0
   19bb8:	460a      	mov	r2, r1
   19bba:	71fb      	strb	r3, [r7, #7]
   19bbc:	4613      	mov	r3, r2
   19bbe:	71bb      	strb	r3, [r7, #6]
    return (THUMB2_CMP_REG_T1) | (Rm << 3) | (Rn);
   19bc0:	f997 3006 	ldrsb.w	r3, [r7, #6]
   19bc4:	00db      	lsls	r3, r3, #3
   19bc6:	b21a      	sxth	r2, r3
   19bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   19bcc:	b21b      	sxth	r3, r3
   19bce:	4313      	orrs	r3, r2
   19bd0:	b21b      	sxth	r3, r3
   19bd2:	f443 4385 	orr.w	r3, r3, #17024	; 0x4280
   19bd6:	b21b      	sxth	r3, r3
   19bd8:	b29b      	uxth	r3, r3
}
   19bda:	4618      	mov	r0, r3
   19bdc:	370c      	adds	r7, #12
   19bde:	46bd      	mov	sp, r7
   19be0:	bc80      	pop	{r7}
   19be2:	4770      	bx	lr

00019be4 <_thumb16_CMP_REG_T2>:
static inline u16 _thumb16_CMP_REG_T2(s8 Rn, s8 Rm) {
   19be4:	b480      	push	{r7}
   19be6:	b085      	sub	sp, #20
   19be8:	af00      	add	r7, sp, #0
   19bea:	4603      	mov	r3, r0
   19bec:	460a      	mov	r2, r1
   19bee:	71fb      	strb	r3, [r7, #7]
   19bf0:	4613      	mov	r3, r2
   19bf2:	71bb      	strb	r3, [r7, #6]
    u16 N = (Rn & 0b1000) >> 3;
   19bf4:	79fb      	ldrb	r3, [r7, #7]
   19bf6:	10db      	asrs	r3, r3, #3
   19bf8:	b29b      	uxth	r3, r3
   19bfa:	f003 0301 	and.w	r3, r3, #1
   19bfe:	81fb      	strh	r3, [r7, #14]
    u16 Rn3 = Rn & 0b111;
   19c00:	79fb      	ldrb	r3, [r7, #7]
   19c02:	b29b      	uxth	r3, r3
   19c04:	f003 0307 	and.w	r3, r3, #7
   19c08:	81bb      	strh	r3, [r7, #12]
    return (THUMB2_CMP_REG_T2) | (N << 7) | (Rm << 3) | (Rn3);
   19c0a:	89fb      	ldrh	r3, [r7, #14]
   19c0c:	01db      	lsls	r3, r3, #7
   19c0e:	b21a      	sxth	r2, r3
   19c10:	f997 3006 	ldrsb.w	r3, [r7, #6]
   19c14:	00db      	lsls	r3, r3, #3
   19c16:	b21b      	sxth	r3, r3
   19c18:	4313      	orrs	r3, r2
   19c1a:	b21a      	sxth	r2, r3
   19c1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   19c20:	4313      	orrs	r3, r2
   19c22:	b21b      	sxth	r3, r3
   19c24:	f443 438a 	orr.w	r3, r3, #17664	; 0x4500
   19c28:	b21b      	sxth	r3, r3
   19c2a:	b29b      	uxth	r3, r3
}
   19c2c:	4618      	mov	r0, r3
   19c2e:	3714      	adds	r7, #20
   19c30:	46bd      	mov	sp, r7
   19c32:	bc80      	pop	{r7}
   19c34:	4770      	bx	lr

00019c36 <_thumb32_MUL_REG_T2>:
static inline u32 _thumb32_MUL_REG_T2(s8 Rd, s8 Rn, s8 Rm) {
   19c36:	b480      	push	{r7}
   19c38:	b083      	sub	sp, #12
   19c3a:	af00      	add	r7, sp, #0
   19c3c:	4603      	mov	r3, r0
   19c3e:	71fb      	strb	r3, [r7, #7]
   19c40:	460b      	mov	r3, r1
   19c42:	71bb      	strb	r3, [r7, #6]
   19c44:	4613      	mov	r3, r2
   19c46:	717b      	strb	r3, [r7, #5]
    return (THUMB2_MUL_REG_T2) | (Rn << 16) | (Rd << 8) | (Rm);
   19c48:	f997 3006 	ldrsb.w	r3, [r7, #6]
   19c4c:	041b      	lsls	r3, r3, #16
   19c4e:	461a      	mov	r2, r3
   19c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
   19c54:	021b      	lsls	r3, r3, #8
   19c56:	431a      	orrs	r2, r3
   19c58:	f997 3005 	ldrsb.w	r3, [r7, #5]
   19c5c:	4313      	orrs	r3, r2
   19c5e:	f043 437b 	orr.w	r3, r3, #4211081216	; 0xfb000000
   19c62:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
}
   19c66:	4618      	mov	r0, r3
   19c68:	370c      	adds	r7, #12
   19c6a:	46bd      	mov	sp, r7
   19c6c:	bc80      	pop	{r7}
   19c6e:	4770      	bx	lr

00019c70 <_thumb16_ADD_IMM_T2>:
static inline u16 _thumb16_ADD_IMM_T2(s8 RDn, s32 imm8) {
   19c70:	b480      	push	{r7}
   19c72:	b085      	sub	sp, #20
   19c74:	af00      	add	r7, sp, #0
   19c76:	4603      	mov	r3, r0
   19c78:	6039      	str	r1, [r7, #0]
   19c7a:	71fb      	strb	r3, [r7, #7]
    u16 imm = imm8 & 0xff;
   19c7c:	683b      	ldr	r3, [r7, #0]
   19c7e:	b29b      	uxth	r3, r3
   19c80:	b2db      	uxtb	r3, r3
   19c82:	81fb      	strh	r3, [r7, #14]
    return (THUMB2_ADD_IMM_T2) | (RDn << 8) | (imm);
   19c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
   19c88:	021b      	lsls	r3, r3, #8
   19c8a:	b21a      	sxth	r2, r3
   19c8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   19c90:	4313      	orrs	r3, r2
   19c92:	b21b      	sxth	r3, r3
   19c94:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
   19c98:	b21b      	sxth	r3, r3
   19c9a:	b29b      	uxth	r3, r3
}
   19c9c:	4618      	mov	r0, r3
   19c9e:	3714      	adds	r7, #20
   19ca0:	46bd      	mov	sp, r7
   19ca2:	bc80      	pop	{r7}
   19ca4:	4770      	bx	lr

00019ca6 <_thumb32_ADD_IMM_T4>:
static inline u32 _thumb32_ADD_IMM_T4(s8 Rd, s8 Rn, s32 imm12) {
   19ca6:	b480      	push	{r7}
   19ca8:	b087      	sub	sp, #28
   19caa:	af00      	add	r7, sp, #0
   19cac:	4603      	mov	r3, r0
   19cae:	603a      	str	r2, [r7, #0]
   19cb0:	71fb      	strb	r3, [r7, #7]
   19cb2:	460b      	mov	r3, r1
   19cb4:	71bb      	strb	r3, [r7, #6]
    u32 i = (imm12 >> 11) & 0x1;
   19cb6:	683b      	ldr	r3, [r7, #0]
   19cb8:	12db      	asrs	r3, r3, #11
   19cba:	f003 0301 	and.w	r3, r3, #1
   19cbe:	617b      	str	r3, [r7, #20]
    u32 imm3 = (imm12 >> 8) & 0b111;
   19cc0:	683b      	ldr	r3, [r7, #0]
   19cc2:	121b      	asrs	r3, r3, #8
   19cc4:	f003 0307 	and.w	r3, r3, #7
   19cc8:	613b      	str	r3, [r7, #16]
    u32 imm8 = imm12 & 0xff;
   19cca:	683b      	ldr	r3, [r7, #0]
   19ccc:	b2db      	uxtb	r3, r3
   19cce:	60fb      	str	r3, [r7, #12]
    return (THUMB2_ADD_IMM_T4) | (i << 26) | (Rn << 16) | (imm3 << 12) | (Rd << 8) | imm8;
   19cd0:	697b      	ldr	r3, [r7, #20]
   19cd2:	069b      	lsls	r3, r3, #26
   19cd4:	f997 2006 	ldrsb.w	r2, [r7, #6]
   19cd8:	0412      	lsls	r2, r2, #16
   19cda:	431a      	orrs	r2, r3
   19cdc:	693b      	ldr	r3, [r7, #16]
   19cde:	031b      	lsls	r3, r3, #12
   19ce0:	4313      	orrs	r3, r2
   19ce2:	f997 2007 	ldrsb.w	r2, [r7, #7]
   19ce6:	0212      	lsls	r2, r2, #8
   19ce8:	431a      	orrs	r2, r3
   19cea:	68fb      	ldr	r3, [r7, #12]
   19cec:	4313      	orrs	r3, r2
   19cee:	f043 4372 	orr.w	r3, r3, #4060086272	; 0xf2000000
}
   19cf2:	4618      	mov	r0, r3
   19cf4:	371c      	adds	r7, #28
   19cf6:	46bd      	mov	sp, r7
   19cf8:	bc80      	pop	{r7}
   19cfa:	4770      	bx	lr

00019cfc <_thumb16_ADD_REG_T2>:
static inline u16 _thumb16_ADD_REG_T2(s8 RDn, s8 Rm) {
   19cfc:	b480      	push	{r7}
   19cfe:	b085      	sub	sp, #20
   19d00:	af00      	add	r7, sp, #0
   19d02:	4603      	mov	r3, r0
   19d04:	460a      	mov	r2, r1
   19d06:	71fb      	strb	r3, [r7, #7]
   19d08:	4613      	mov	r3, r2
   19d0a:	71bb      	strb	r3, [r7, #6]
    u16 DN = (RDn >> 3) & 0x1;
   19d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   19d10:	10db      	asrs	r3, r3, #3
   19d12:	b25b      	sxtb	r3, r3
   19d14:	b2db      	uxtb	r3, r3
   19d16:	b29b      	uxth	r3, r3
   19d18:	f003 0301 	and.w	r3, r3, #1
   19d1c:	81fb      	strh	r3, [r7, #14]
    u16 rdn = RDn & 0b111;
   19d1e:	79fb      	ldrb	r3, [r7, #7]
   19d20:	b29b      	uxth	r3, r3
   19d22:	f003 0307 	and.w	r3, r3, #7
   19d26:	81bb      	strh	r3, [r7, #12]
    return (THUMB2_ADD_REG_T2) | (DN << 7) | (Rm << 3) | (rdn);
   19d28:	89fb      	ldrh	r3, [r7, #14]
   19d2a:	01db      	lsls	r3, r3, #7
   19d2c:	b21a      	sxth	r2, r3
   19d2e:	f997 3006 	ldrsb.w	r3, [r7, #6]
   19d32:	00db      	lsls	r3, r3, #3
   19d34:	b21b      	sxth	r3, r3
   19d36:	4313      	orrs	r3, r2
   19d38:	b21a      	sxth	r2, r3
   19d3a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   19d3e:	4313      	orrs	r3, r2
   19d40:	b21b      	sxth	r3, r3
   19d42:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
   19d46:	b21b      	sxth	r3, r3
   19d48:	b29b      	uxth	r3, r3
}
   19d4a:	4618      	mov	r0, r3
   19d4c:	3714      	adds	r7, #20
   19d4e:	46bd      	mov	sp, r7
   19d50:	bc80      	pop	{r7}
   19d52:	4770      	bx	lr

00019d54 <_thumb32_ADDW_REG_T3>:
static inline u32 _thumb32_ADDW_REG_T3(s8 Rd, s8 Rn, s8 Rm, s32 offImm5, u8 srtype, u8 flagS) {
   19d54:	b480      	push	{r7}
   19d56:	b085      	sub	sp, #20
   19d58:	af00      	add	r7, sp, #0
   19d5a:	603b      	str	r3, [r7, #0]
   19d5c:	4603      	mov	r3, r0
   19d5e:	71fb      	strb	r3, [r7, #7]
   19d60:	460b      	mov	r3, r1
   19d62:	71bb      	strb	r3, [r7, #6]
   19d64:	4613      	mov	r3, r2
   19d66:	717b      	strb	r3, [r7, #5]
    u32 imm3 = (offImm5 >> 2) & 0b111;
   19d68:	683b      	ldr	r3, [r7, #0]
   19d6a:	109b      	asrs	r3, r3, #2
   19d6c:	f003 0307 	and.w	r3, r3, #7
   19d70:	60fb      	str	r3, [r7, #12]
    u32 imm2 = offImm5 & 0b11;
   19d72:	683b      	ldr	r3, [r7, #0]
   19d74:	f003 0303 	and.w	r3, r3, #3
   19d78:	60bb      	str	r3, [r7, #8]
    return (THUMB2_ADDW_REG) | (flagS << 20) | (Rn << 16) | (imm3 << 12) | (Rd << 8) | 
   19d7a:	7f3b      	ldrb	r3, [r7, #28]
   19d7c:	051b      	lsls	r3, r3, #20
   19d7e:	461a      	mov	r2, r3
   19d80:	f997 3006 	ldrsb.w	r3, [r7, #6]
   19d84:	041b      	lsls	r3, r3, #16
   19d86:	431a      	orrs	r2, r3
   19d88:	68fb      	ldr	r3, [r7, #12]
   19d8a:	031b      	lsls	r3, r3, #12
   19d8c:	4313      	orrs	r3, r2
   19d8e:	f997 2007 	ldrsb.w	r2, [r7, #7]
   19d92:	0212      	lsls	r2, r2, #8
   19d94:	431a      	orrs	r2, r3
        (imm2 << 6) | (srtype << 4) | (Rm);
   19d96:	68bb      	ldr	r3, [r7, #8]
   19d98:	019b      	lsls	r3, r3, #6
    return (THUMB2_ADDW_REG) | (flagS << 20) | (Rn << 16) | (imm3 << 12) | (Rd << 8) | 
   19d9a:	4313      	orrs	r3, r2
        (imm2 << 6) | (srtype << 4) | (Rm);
   19d9c:	7e3a      	ldrb	r2, [r7, #24]
   19d9e:	0112      	lsls	r2, r2, #4
   19da0:	431a      	orrs	r2, r3
   19da2:	f997 3005 	ldrsb.w	r3, [r7, #5]
   19da6:	4313      	orrs	r3, r2
   19da8:	f043 436b 	orr.w	r3, r3, #3942645760	; 0xeb000000
}
   19dac:	4618      	mov	r0, r3
   19dae:	3714      	adds	r7, #20
   19db0:	46bd      	mov	sp, r7
   19db2:	bc80      	pop	{r7}
   19db4:	4770      	bx	lr

00019db6 <_thumb16_AND_REG_T1>:
static inline u16 _thumb16_AND_REG_T1(s8 RDn, s8 Rm) {
   19db6:	b480      	push	{r7}
   19db8:	b083      	sub	sp, #12
   19dba:	af00      	add	r7, sp, #0
   19dbc:	4603      	mov	r3, r0
   19dbe:	460a      	mov	r2, r1
   19dc0:	71fb      	strb	r3, [r7, #7]
   19dc2:	4613      	mov	r3, r2
   19dc4:	71bb      	strb	r3, [r7, #6]
    return (THUMB2_AND_REG_T1) | (Rm << 3) | (RDn);
   19dc6:	f997 3006 	ldrsb.w	r3, [r7, #6]
   19dca:	00db      	lsls	r3, r3, #3
   19dcc:	b21a      	sxth	r2, r3
   19dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
   19dd2:	b21b      	sxth	r3, r3
   19dd4:	4313      	orrs	r3, r2
   19dd6:	b21b      	sxth	r3, r3
   19dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   19ddc:	b21b      	sxth	r3, r3
   19dde:	b29b      	uxth	r3, r3
}
   19de0:	4618      	mov	r0, r3
   19de2:	370c      	adds	r7, #12
   19de4:	46bd      	mov	sp, r7
   19de6:	bc80      	pop	{r7}
   19de8:	4770      	bx	lr

00019dea <_thumb32_AND_REG_T2>:
static inline u32 _thumb32_AND_REG_T2(s8 Rd, s8 Rn, s8 Rm, s32 offImm5, u8 srtype, u8 flagS) {
   19dea:	b480      	push	{r7}
   19dec:	b085      	sub	sp, #20
   19dee:	af00      	add	r7, sp, #0
   19df0:	603b      	str	r3, [r7, #0]
   19df2:	4603      	mov	r3, r0
   19df4:	71fb      	strb	r3, [r7, #7]
   19df6:	460b      	mov	r3, r1
   19df8:	71bb      	strb	r3, [r7, #6]
   19dfa:	4613      	mov	r3, r2
   19dfc:	717b      	strb	r3, [r7, #5]
    u32 imm3 = (offImm5 >> 2) & 0b111;
   19dfe:	683b      	ldr	r3, [r7, #0]
   19e00:	109b      	asrs	r3, r3, #2
   19e02:	f003 0307 	and.w	r3, r3, #7
   19e06:	60fb      	str	r3, [r7, #12]
    u32 imm2 = offImm5 & 0b11;
   19e08:	683b      	ldr	r3, [r7, #0]
   19e0a:	f003 0303 	and.w	r3, r3, #3
   19e0e:	60bb      	str	r3, [r7, #8]
    return (THUMB2_AND_REG_T2) | (flagS << 20) | (Rn << 16) | (imm3 << 12) | (Rd << 8) | 
   19e10:	7f3b      	ldrb	r3, [r7, #28]
   19e12:	051b      	lsls	r3, r3, #20
   19e14:	461a      	mov	r2, r3
   19e16:	f997 3006 	ldrsb.w	r3, [r7, #6]
   19e1a:	041b      	lsls	r3, r3, #16
   19e1c:	431a      	orrs	r2, r3
   19e1e:	68fb      	ldr	r3, [r7, #12]
   19e20:	031b      	lsls	r3, r3, #12
   19e22:	4313      	orrs	r3, r2
   19e24:	f997 2007 	ldrsb.w	r2, [r7, #7]
   19e28:	0212      	lsls	r2, r2, #8
   19e2a:	431a      	orrs	r2, r3
        (imm2 << 6) | (srtype << 4) | (Rm);
   19e2c:	68bb      	ldr	r3, [r7, #8]
   19e2e:	019b      	lsls	r3, r3, #6
    return (THUMB2_AND_REG_T2) | (flagS << 20) | (Rn << 16) | (imm3 << 12) | (Rd << 8) | 
   19e30:	4313      	orrs	r3, r2
        (imm2 << 6) | (srtype << 4) | (Rm);
   19e32:	7e3a      	ldrb	r2, [r7, #24]
   19e34:	0112      	lsls	r2, r2, #4
   19e36:	431a      	orrs	r2, r3
   19e38:	f997 3005 	ldrsb.w	r3, [r7, #5]
   19e3c:	4313      	orrs	r3, r2
   19e3e:	f043 436a 	orr.w	r3, r3, #3925868544	; 0xea000000
}
   19e42:	4618      	mov	r0, r3
   19e44:	3714      	adds	r7, #20
   19e46:	46bd      	mov	sp, r7
   19e48:	bc80      	pop	{r7}
   19e4a:	4770      	bx	lr

00019e4c <_thumb16_MOV_REG_T1>:
static inline u16 _thumb16_MOV_REG_T1(s8 Rd, s8 Rm) {
   19e4c:	b480      	push	{r7}
   19e4e:	b085      	sub	sp, #20
   19e50:	af00      	add	r7, sp, #0
   19e52:	4603      	mov	r3, r0
   19e54:	460a      	mov	r2, r1
   19e56:	71fb      	strb	r3, [r7, #7]
   19e58:	4613      	mov	r3, r2
   19e5a:	71bb      	strb	r3, [r7, #6]
    u16 D = (Rd >> 3) & 0b0001;
   19e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   19e60:	10db      	asrs	r3, r3, #3
   19e62:	b25b      	sxtb	r3, r3
   19e64:	b2db      	uxtb	r3, r3
   19e66:	b29b      	uxth	r3, r3
   19e68:	f003 0301 	and.w	r3, r3, #1
   19e6c:	81fb      	strh	r3, [r7, #14]
    u16 Rd3 = Rd & 0b111;
   19e6e:	79fb      	ldrb	r3, [r7, #7]
   19e70:	b29b      	uxth	r3, r3
   19e72:	f003 0307 	and.w	r3, r3, #7
   19e76:	81bb      	strh	r3, [r7, #12]
    return (THUMB2_MOV_REG) | (D << 7) | (Rm << 3) | (Rd3);
   19e78:	89fb      	ldrh	r3, [r7, #14]
   19e7a:	01db      	lsls	r3, r3, #7
   19e7c:	b21a      	sxth	r2, r3
   19e7e:	f997 3006 	ldrsb.w	r3, [r7, #6]
   19e82:	00db      	lsls	r3, r3, #3
   19e84:	b21b      	sxth	r3, r3
   19e86:	4313      	orrs	r3, r2
   19e88:	b21a      	sxth	r2, r3
   19e8a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   19e8e:	4313      	orrs	r3, r2
   19e90:	b21b      	sxth	r3, r3
   19e92:	f443 438c 	orr.w	r3, r3, #17920	; 0x4600
   19e96:	b21b      	sxth	r3, r3
   19e98:	b29b      	uxth	r3, r3
}
   19e9a:	4618      	mov	r0, r3
   19e9c:	3714      	adds	r7, #20
   19e9e:	46bd      	mov	sp, r7
   19ea0:	bc80      	pop	{r7}
   19ea2:	4770      	bx	lr

00019ea4 <_thumb32_MOVW_REG_T3>:
static inline u32 _thumb32_MOVW_REG_T3(s8 Rd, s8 Rm, u8 flagS) {
   19ea4:	b480      	push	{r7}
   19ea6:	b083      	sub	sp, #12
   19ea8:	af00      	add	r7, sp, #0
   19eaa:	4603      	mov	r3, r0
   19eac:	71fb      	strb	r3, [r7, #7]
   19eae:	460b      	mov	r3, r1
   19eb0:	71bb      	strb	r3, [r7, #6]
   19eb2:	4613      	mov	r3, r2
   19eb4:	717b      	strb	r3, [r7, #5]
    return (THUMB2_MOVW_REG) | (flagS << 20) | (Rd << 8) | (Rm);
   19eb6:	797b      	ldrb	r3, [r7, #5]
   19eb8:	051b      	lsls	r3, r3, #20
   19eba:	461a      	mov	r2, r3
   19ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
   19ec0:	021b      	lsls	r3, r3, #8
   19ec2:	431a      	orrs	r2, r3
   19ec4:	f997 3006 	ldrsb.w	r3, [r7, #6]
   19ec8:	4313      	orrs	r3, r2
   19eca:	f043 436a 	orr.w	r3, r3, #3925868544	; 0xea000000
   19ece:	f443 039e 	orr.w	r3, r3, #5177344	; 0x4f0000
}
   19ed2:	4618      	mov	r0, r3
   19ed4:	370c      	adds	r7, #12
   19ed6:	46bd      	mov	sp, r7
   19ed8:	bc80      	pop	{r7}
   19eda:	4770      	bx	lr

00019edc <_thumb16_SUB_IMM_T1>:
static inline u16 _thumb16_SUB_IMM_T1(s8 Rd3, s8 Rn3, s32 imm3) {
   19edc:	b480      	push	{r7}
   19ede:	b083      	sub	sp, #12
   19ee0:	af00      	add	r7, sp, #0
   19ee2:	4603      	mov	r3, r0
   19ee4:	603a      	str	r2, [r7, #0]
   19ee6:	71fb      	strb	r3, [r7, #7]
   19ee8:	460b      	mov	r3, r1
   19eea:	71bb      	strb	r3, [r7, #6]
    imm3 = imm3 & 0b111;
   19eec:	683b      	ldr	r3, [r7, #0]
   19eee:	f003 0307 	and.w	r3, r3, #7
   19ef2:	603b      	str	r3, [r7, #0]
    return (THUMB2_SUB_IMM_T1) | (imm3 << 6) | (Rn3 << 3) | (Rd3);
   19ef4:	683b      	ldr	r3, [r7, #0]
   19ef6:	019b      	lsls	r3, r3, #6
   19ef8:	b21a      	sxth	r2, r3
   19efa:	f997 3006 	ldrsb.w	r3, [r7, #6]
   19efe:	00db      	lsls	r3, r3, #3
   19f00:	b21b      	sxth	r3, r3
   19f02:	4313      	orrs	r3, r2
   19f04:	b21a      	sxth	r2, r3
   19f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
   19f0a:	b21b      	sxth	r3, r3
   19f0c:	4313      	orrs	r3, r2
   19f0e:	b21b      	sxth	r3, r3
   19f10:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
   19f14:	b21b      	sxth	r3, r3
   19f16:	b29b      	uxth	r3, r3
}
   19f18:	4618      	mov	r0, r3
   19f1a:	370c      	adds	r7, #12
   19f1c:	46bd      	mov	sp, r7
   19f1e:	bc80      	pop	{r7}
   19f20:	4770      	bx	lr

00019f22 <_thumb16_SUB_IMM_T2>:
static inline u16 _thumb16_SUB_IMM_T2(s8 Rdn3, s32 imm8) {
   19f22:	b480      	push	{r7}
   19f24:	b083      	sub	sp, #12
   19f26:	af00      	add	r7, sp, #0
   19f28:	4603      	mov	r3, r0
   19f2a:	6039      	str	r1, [r7, #0]
   19f2c:	71fb      	strb	r3, [r7, #7]
    imm8 = imm8 & 0xff;
   19f2e:	683b      	ldr	r3, [r7, #0]
   19f30:	b2db      	uxtb	r3, r3
   19f32:	603b      	str	r3, [r7, #0]
    return (THUMB2_SUB_IMM_T2) | (Rdn3 << 8) | imm8;
   19f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
   19f38:	021b      	lsls	r3, r3, #8
   19f3a:	b21a      	sxth	r2, r3
   19f3c:	683b      	ldr	r3, [r7, #0]
   19f3e:	b21b      	sxth	r3, r3
   19f40:	4313      	orrs	r3, r2
   19f42:	b21b      	sxth	r3, r3
   19f44:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
   19f48:	b21b      	sxth	r3, r3
   19f4a:	b29b      	uxth	r3, r3
}
   19f4c:	4618      	mov	r0, r3
   19f4e:	370c      	adds	r7, #12
   19f50:	46bd      	mov	sp, r7
   19f52:	bc80      	pop	{r7}
   19f54:	4770      	bx	lr

00019f56 <_thumb32_SUBW_IMM_T4>:
static inline u32 _thumb32_SUBW_IMM_T4(s8 Rd, s8 Rn, s32 imm12, u8 flagS) {
   19f56:	b480      	push	{r7}
   19f58:	b087      	sub	sp, #28
   19f5a:	af00      	add	r7, sp, #0
   19f5c:	603a      	str	r2, [r7, #0]
   19f5e:	461a      	mov	r2, r3
   19f60:	4603      	mov	r3, r0
   19f62:	71fb      	strb	r3, [r7, #7]
   19f64:	460b      	mov	r3, r1
   19f66:	71bb      	strb	r3, [r7, #6]
   19f68:	4613      	mov	r3, r2
   19f6a:	717b      	strb	r3, [r7, #5]
    u32 i = (imm12 >> 11) & 0x1;
   19f6c:	683b      	ldr	r3, [r7, #0]
   19f6e:	12db      	asrs	r3, r3, #11
   19f70:	f003 0301 	and.w	r3, r3, #1
   19f74:	617b      	str	r3, [r7, #20]
    u32 imm3 = (imm12 >> 8) & 0b11;
   19f76:	683b      	ldr	r3, [r7, #0]
   19f78:	121b      	asrs	r3, r3, #8
   19f7a:	f003 0303 	and.w	r3, r3, #3
   19f7e:	613b      	str	r3, [r7, #16]
    u32 imm8 = imm12 & 0xff;
   19f80:	683b      	ldr	r3, [r7, #0]
   19f82:	b2db      	uxtb	r3, r3
   19f84:	60fb      	str	r3, [r7, #12]
    return (THUMB2_SUBW_IMM_T4) | (i << 26) | (Rn << 16) | (imm3 << 12) | (Rd << 8) | (imm8); 
   19f86:	697b      	ldr	r3, [r7, #20]
   19f88:	069b      	lsls	r3, r3, #26
   19f8a:	f997 2006 	ldrsb.w	r2, [r7, #6]
   19f8e:	0412      	lsls	r2, r2, #16
   19f90:	431a      	orrs	r2, r3
   19f92:	693b      	ldr	r3, [r7, #16]
   19f94:	031b      	lsls	r3, r3, #12
   19f96:	4313      	orrs	r3, r2
   19f98:	f997 2007 	ldrsb.w	r2, [r7, #7]
   19f9c:	0212      	lsls	r2, r2, #8
   19f9e:	431a      	orrs	r2, r3
   19fa0:	68fb      	ldr	r3, [r7, #12]
   19fa2:	4313      	orrs	r3, r2
   19fa4:	f043 4372 	orr.w	r3, r3, #4060086272	; 0xf2000000
   19fa8:	f443 0320 	orr.w	r3, r3, #10485760	; 0xa00000
}
   19fac:	4618      	mov	r0, r3
   19fae:	371c      	adds	r7, #28
   19fb0:	46bd      	mov	sp, r7
   19fb2:	bc80      	pop	{r7}
   19fb4:	4770      	bx	lr

00019fb6 <_thumb16_SUB_REG_T1>:
static inline u16 _thumb16_SUB_REG_T1(s8 Rd, s8 Rn, s8 Rm) {
   19fb6:	b480      	push	{r7}
   19fb8:	b083      	sub	sp, #12
   19fba:	af00      	add	r7, sp, #0
   19fbc:	4603      	mov	r3, r0
   19fbe:	71fb      	strb	r3, [r7, #7]
   19fc0:	460b      	mov	r3, r1
   19fc2:	71bb      	strb	r3, [r7, #6]
   19fc4:	4613      	mov	r3, r2
   19fc6:	717b      	strb	r3, [r7, #5]
    return (THUMB2_SUB_REG_T1) | (Rm << 6) | (Rn << 3) | (Rd);
   19fc8:	f997 3005 	ldrsb.w	r3, [r7, #5]
   19fcc:	019b      	lsls	r3, r3, #6
   19fce:	b21a      	sxth	r2, r3
   19fd0:	f997 3006 	ldrsb.w	r3, [r7, #6]
   19fd4:	00db      	lsls	r3, r3, #3
   19fd6:	b21b      	sxth	r3, r3
   19fd8:	4313      	orrs	r3, r2
   19fda:	b21a      	sxth	r2, r3
   19fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
   19fe0:	b21b      	sxth	r3, r3
   19fe2:	4313      	orrs	r3, r2
   19fe4:	b21b      	sxth	r3, r3
   19fe6:	f443 53d0 	orr.w	r3, r3, #6656	; 0x1a00
   19fea:	b21b      	sxth	r3, r3
   19fec:	b29b      	uxth	r3, r3
}
   19fee:	4618      	mov	r0, r3
   19ff0:	370c      	adds	r7, #12
   19ff2:	46bd      	mov	sp, r7
   19ff4:	bc80      	pop	{r7}
   19ff6:	4770      	bx	lr

00019ff8 <_thumb32_SUB_REG_T2>:
static inline u32 _thumb32_SUB_REG_T2(s8 Rd, s8 Rn, s8 Rm, s32 shiftOff5, u8 srtype, u8 flagS) {
   19ff8:	b480      	push	{r7}
   19ffa:	b085      	sub	sp, #20
   19ffc:	af00      	add	r7, sp, #0
   19ffe:	603b      	str	r3, [r7, #0]
   1a000:	4603      	mov	r3, r0
   1a002:	71fb      	strb	r3, [r7, #7]
   1a004:	460b      	mov	r3, r1
   1a006:	71bb      	strb	r3, [r7, #6]
   1a008:	4613      	mov	r3, r2
   1a00a:	717b      	strb	r3, [r7, #5]
    u32 imm3 = (shiftOff5 >> 2) & 0b111;
   1a00c:	683b      	ldr	r3, [r7, #0]
   1a00e:	109b      	asrs	r3, r3, #2
   1a010:	f003 0307 	and.w	r3, r3, #7
   1a014:	60fb      	str	r3, [r7, #12]
    u32 imm2 = shiftOff5 & 0b11;
   1a016:	683b      	ldr	r3, [r7, #0]
   1a018:	f003 0303 	and.w	r3, r3, #3
   1a01c:	60bb      	str	r3, [r7, #8]
    return (THUMB2_SUB_REG_T2) | (flagS << 20) | (Rn << 16) | (imm3 << 12) | (Rd << 8) | (imm2 << 6) | (srtype << 4) | (Rm);
   1a01e:	7f3b      	ldrb	r3, [r7, #28]
   1a020:	051b      	lsls	r3, r3, #20
   1a022:	461a      	mov	r2, r3
   1a024:	f997 3006 	ldrsb.w	r3, [r7, #6]
   1a028:	041b      	lsls	r3, r3, #16
   1a02a:	431a      	orrs	r2, r3
   1a02c:	68fb      	ldr	r3, [r7, #12]
   1a02e:	031b      	lsls	r3, r3, #12
   1a030:	4313      	orrs	r3, r2
   1a032:	f997 2007 	ldrsb.w	r2, [r7, #7]
   1a036:	0212      	lsls	r2, r2, #8
   1a038:	431a      	orrs	r2, r3
   1a03a:	68bb      	ldr	r3, [r7, #8]
   1a03c:	019b      	lsls	r3, r3, #6
   1a03e:	4313      	orrs	r3, r2
   1a040:	7e3a      	ldrb	r2, [r7, #24]
   1a042:	0112      	lsls	r2, r2, #4
   1a044:	431a      	orrs	r2, r3
   1a046:	f997 3005 	ldrsb.w	r3, [r7, #5]
   1a04a:	4313      	orrs	r3, r2
   1a04c:	f043 436b 	orr.w	r3, r3, #3942645760	; 0xeb000000
   1a050:	f443 0320 	orr.w	r3, r3, #10485760	; 0xa00000
}
   1a054:	4618      	mov	r0, r3
   1a056:	3714      	adds	r7, #20
   1a058:	46bd      	mov	sp, r7
   1a05a:	bc80      	pop	{r7}
   1a05c:	4770      	bx	lr

0001a05e <_thumb32_PUSHW_T2>:
static inline u32 _thumb32_PUSHW_T2(s32 reg_mask) {
   1a05e:	b480      	push	{r7}
   1a060:	b085      	sub	sp, #20
   1a062:	af00      	add	r7, sp, #0
   1a064:	6078      	str	r0, [r7, #4]
    u32 M = (reg_mask >> 14) & 0x1;
   1a066:	687b      	ldr	r3, [r7, #4]
   1a068:	139b      	asrs	r3, r3, #14
   1a06a:	f003 0301 	and.w	r3, r3, #1
   1a06e:	60fb      	str	r3, [r7, #12]
    u32 reg_list = reg_mask & 0x1fff;
   1a070:	687b      	ldr	r3, [r7, #4]
   1a072:	f3c3 030c 	ubfx	r3, r3, #0, #13
   1a076:	60bb      	str	r3, [r7, #8]
    return (THUMB2_PUSH_W) | (M << 14) | (reg_list);
   1a078:	68fb      	ldr	r3, [r7, #12]
   1a07a:	039a      	lsls	r2, r3, #14
   1a07c:	68bb      	ldr	r3, [r7, #8]
   1a07e:	4313      	orrs	r3, r2
   1a080:	f043 4369 	orr.w	r3, r3, #3909091328	; 0xe9000000
   1a084:	f443 1334 	orr.w	r3, r3, #2949120	; 0x2d0000
}
   1a088:	4618      	mov	r0, r3
   1a08a:	3714      	adds	r7, #20
   1a08c:	46bd      	mov	sp, r7
   1a08e:	bc80      	pop	{r7}
   1a090:	4770      	bx	lr

0001a092 <_thumb32_POPW_T2>:
static inline u32 _thumb32_POPW_T2(s32 reg_mask) {
   1a092:	b480      	push	{r7}
   1a094:	b087      	sub	sp, #28
   1a096:	af00      	add	r7, sp, #0
   1a098:	6078      	str	r0, [r7, #4]
    u32 M = (reg_mask >> 14) & 0x1;
   1a09a:	687b      	ldr	r3, [r7, #4]
   1a09c:	139b      	asrs	r3, r3, #14
   1a09e:	f003 0301 	and.w	r3, r3, #1
   1a0a2:	617b      	str	r3, [r7, #20]
    u32 P = (reg_mask >> 15) & 0x1;
   1a0a4:	687b      	ldr	r3, [r7, #4]
   1a0a6:	13db      	asrs	r3, r3, #15
   1a0a8:	f003 0301 	and.w	r3, r3, #1
   1a0ac:	613b      	str	r3, [r7, #16]
    u32 reg_list = reg_mask & 0x1fff;
   1a0ae:	687b      	ldr	r3, [r7, #4]
   1a0b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
   1a0b4:	60fb      	str	r3, [r7, #12]
    return (THUMB2_POP_W) | (P << 15) | (M << 14) | (reg_list);
   1a0b6:	693b      	ldr	r3, [r7, #16]
   1a0b8:	03da      	lsls	r2, r3, #15
   1a0ba:	697b      	ldr	r3, [r7, #20]
   1a0bc:	039b      	lsls	r3, r3, #14
   1a0be:	431a      	orrs	r2, r3
   1a0c0:	68fb      	ldr	r3, [r7, #12]
   1a0c2:	4313      	orrs	r3, r2
   1a0c4:	f043 4368 	orr.w	r3, r3, #3892314112	; 0xe8000000
   1a0c8:	f443 033d 	orr.w	r3, r3, #12386304	; 0xbd0000
}
   1a0cc:	4618      	mov	r0, r3
   1a0ce:	371c      	adds	r7, #28
   1a0d0:	46bd      	mov	sp, r7
   1a0d2:	bc80      	pop	{r7}
   1a0d4:	4770      	bx	lr

0001a0d6 <_thumb16_LDRB_IMM_T1>:
static inline u16 _thumb16_LDRB_IMM_T1(s8 Rt, s8 Rn, s16 offImm5) {
   1a0d6:	b480      	push	{r7}
   1a0d8:	b083      	sub	sp, #12
   1a0da:	af00      	add	r7, sp, #0
   1a0dc:	4603      	mov	r3, r0
   1a0de:	71fb      	strb	r3, [r7, #7]
   1a0e0:	460b      	mov	r3, r1
   1a0e2:	71bb      	strb	r3, [r7, #6]
   1a0e4:	4613      	mov	r3, r2
   1a0e6:	80bb      	strh	r3, [r7, #4]
    return (THUMB2_LDRB_IMM_T1) | (offImm5 << 6) | (Rn << 3) | (Rt);
   1a0e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   1a0ec:	019b      	lsls	r3, r3, #6
   1a0ee:	b21a      	sxth	r2, r3
   1a0f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
   1a0f4:	00db      	lsls	r3, r3, #3
   1a0f6:	b21b      	sxth	r3, r3
   1a0f8:	4313      	orrs	r3, r2
   1a0fa:	b21a      	sxth	r2, r3
   1a0fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1a100:	b21b      	sxth	r3, r3
   1a102:	4313      	orrs	r3, r2
   1a104:	b21b      	sxth	r3, r3
   1a106:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   1a10a:	b21b      	sxth	r3, r3
   1a10c:	b29b      	uxth	r3, r3
}
   1a10e:	4618      	mov	r0, r3
   1a110:	370c      	adds	r7, #12
   1a112:	46bd      	mov	sp, r7
   1a114:	bc80      	pop	{r7}
   1a116:	4770      	bx	lr

0001a118 <_thumb32_LDRB_IMM_T3>:
static inline u32 _thumb32_LDRB_IMM_T3(s8 Rt, s8 Rn, s32 offImm8) {
   1a118:	b480      	push	{r7}
   1a11a:	b089      	sub	sp, #36	; 0x24
   1a11c:	af00      	add	r7, sp, #0
   1a11e:	4603      	mov	r3, r0
   1a120:	603a      	str	r2, [r7, #0]
   1a122:	71fb      	strb	r3, [r7, #7]
   1a124:	460b      	mov	r3, r1
   1a126:	71bb      	strb	r3, [r7, #6]
    s32 imm8 = offImm8 > 0 ? offImm8 : -offImm8;
   1a128:	683b      	ldr	r3, [r7, #0]
   1a12a:	2b00      	cmp	r3, #0
   1a12c:	bfb8      	it	lt
   1a12e:	425b      	neglt	r3, r3
   1a130:	61fb      	str	r3, [r7, #28]
    u32 P = 1, U = offImm8 >= 0, W = 0; // p = 0 && w = 0 -> undefined
   1a132:	2301      	movs	r3, #1
   1a134:	61bb      	str	r3, [r7, #24]
   1a136:	683b      	ldr	r3, [r7, #0]
   1a138:	43db      	mvns	r3, r3
   1a13a:	0fdb      	lsrs	r3, r3, #31
   1a13c:	b2db      	uxtb	r3, r3
   1a13e:	617b      	str	r3, [r7, #20]
   1a140:	2300      	movs	r3, #0
   1a142:	613b      	str	r3, [r7, #16]
    u32 flag = 0b1000 | (P << 2) | (U << 1) | W;
   1a144:	69bb      	ldr	r3, [r7, #24]
   1a146:	009a      	lsls	r2, r3, #2
   1a148:	697b      	ldr	r3, [r7, #20]
   1a14a:	005b      	lsls	r3, r3, #1
   1a14c:	431a      	orrs	r2, r3
   1a14e:	693b      	ldr	r3, [r7, #16]
   1a150:	4313      	orrs	r3, r2
   1a152:	f043 0308 	orr.w	r3, r3, #8
   1a156:	60fb      	str	r3, [r7, #12]
    u32 inst = (THUMB2_LDRB_IMM_T3) | (Rn << 16) | (Rt << 12) | (flag << 8) | (imm8);
   1a158:	f997 3006 	ldrsb.w	r3, [r7, #6]
   1a15c:	041b      	lsls	r3, r3, #16
   1a15e:	461a      	mov	r2, r3
   1a160:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1a164:	031b      	lsls	r3, r3, #12
   1a166:	431a      	orrs	r2, r3
   1a168:	68fb      	ldr	r3, [r7, #12]
   1a16a:	021b      	lsls	r3, r3, #8
   1a16c:	431a      	orrs	r2, r3
   1a16e:	69fb      	ldr	r3, [r7, #28]
   1a170:	4313      	orrs	r3, r2
   1a172:	f043 4378 	orr.w	r3, r3, #4160749568	; 0xf8000000
   1a176:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1a17a:	60bb      	str	r3, [r7, #8]
    return inst;
   1a17c:	68bb      	ldr	r3, [r7, #8]
}
   1a17e:	4618      	mov	r0, r3
   1a180:	3724      	adds	r7, #36	; 0x24
   1a182:	46bd      	mov	sp, r7
   1a184:	bc80      	pop	{r7}
   1a186:	4770      	bx	lr

0001a188 <_thumb32_LDRD_IMM_T1>:
static inline u32 _thumb32_LDRD_IMM_T1(s8 Rt[], s8 Rn, s32 offImm8) {
   1a188:	b480      	push	{r7}
   1a18a:	b08b      	sub	sp, #44	; 0x2c
   1a18c:	af00      	add	r7, sp, #0
   1a18e:	60f8      	str	r0, [r7, #12]
   1a190:	460b      	mov	r3, r1
   1a192:	607a      	str	r2, [r7, #4]
   1a194:	72fb      	strb	r3, [r7, #11]
    u32 P = offImm8 != 0, U = offImm8 > 0, W = 0;
   1a196:	687b      	ldr	r3, [r7, #4]
   1a198:	2b00      	cmp	r3, #0
   1a19a:	bf14      	ite	ne
   1a19c:	2301      	movne	r3, #1
   1a19e:	2300      	moveq	r3, #0
   1a1a0:	b2db      	uxtb	r3, r3
   1a1a2:	627b      	str	r3, [r7, #36]	; 0x24
   1a1a4:	687b      	ldr	r3, [r7, #4]
   1a1a6:	2b00      	cmp	r3, #0
   1a1a8:	bfcc      	ite	gt
   1a1aa:	2301      	movgt	r3, #1
   1a1ac:	2300      	movle	r3, #0
   1a1ae:	b2db      	uxtb	r3, r3
   1a1b0:	623b      	str	r3, [r7, #32]
   1a1b2:	2300      	movs	r3, #0
   1a1b4:	61fb      	str	r3, [r7, #28]
    u32 imm8 = offImm8 > 0 ? offImm8 : -offImm8;
   1a1b6:	687b      	ldr	r3, [r7, #4]
   1a1b8:	2b00      	cmp	r3, #0
   1a1ba:	bfb8      	it	lt
   1a1bc:	425b      	neglt	r3, r3
   1a1be:	61bb      	str	r3, [r7, #24]
    imm8 = (imm8 >> 2) & 0xff;
   1a1c0:	69bb      	ldr	r3, [r7, #24]
   1a1c2:	089b      	lsrs	r3, r3, #2
   1a1c4:	b2db      	uxtb	r3, r3
   1a1c6:	61bb      	str	r3, [r7, #24]
    u32 flag = 0b0010 | (P << 3) | (U << 2) | W;
   1a1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a1ca:	00da      	lsls	r2, r3, #3
   1a1cc:	6a3b      	ldr	r3, [r7, #32]
   1a1ce:	009b      	lsls	r3, r3, #2
   1a1d0:	431a      	orrs	r2, r3
   1a1d2:	69fb      	ldr	r3, [r7, #28]
   1a1d4:	4313      	orrs	r3, r2
   1a1d6:	f043 0302 	orr.w	r3, r3, #2
   1a1da:	617b      	str	r3, [r7, #20]
    u32 inst = (THUMB2_LDRD_IMM) | (flag << 21) | (Rn << 16) | (Rt[1] << 12) | (Rt[0] << 8) | (imm8);
   1a1dc:	697b      	ldr	r3, [r7, #20]
   1a1de:	055b      	lsls	r3, r3, #21
   1a1e0:	f997 200b 	ldrsb.w	r2, [r7, #11]
   1a1e4:	0412      	lsls	r2, r2, #16
   1a1e6:	4313      	orrs	r3, r2
   1a1e8:	68fa      	ldr	r2, [r7, #12]
   1a1ea:	3201      	adds	r2, #1
   1a1ec:	f992 2000 	ldrsb.w	r2, [r2]
   1a1f0:	0312      	lsls	r2, r2, #12
   1a1f2:	4313      	orrs	r3, r2
   1a1f4:	68fa      	ldr	r2, [r7, #12]
   1a1f6:	f992 2000 	ldrsb.w	r2, [r2]
   1a1fa:	0212      	lsls	r2, r2, #8
   1a1fc:	431a      	orrs	r2, r3
   1a1fe:	69bb      	ldr	r3, [r7, #24]
   1a200:	4313      	orrs	r3, r2
   1a202:	f043 4368 	orr.w	r3, r3, #3892314112	; 0xe8000000
   1a206:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
   1a20a:	613b      	str	r3, [r7, #16]
    return inst;
   1a20c:	693b      	ldr	r3, [r7, #16]
}
   1a20e:	4618      	mov	r0, r3
   1a210:	372c      	adds	r7, #44	; 0x2c
   1a212:	46bd      	mov	sp, r7
   1a214:	bc80      	pop	{r7}
   1a216:	4770      	bx	lr

0001a218 <_thumb32_STRB_IMM_T3>:
static inline u32 _thumb32_STRB_IMM_T3(s8 Rn, s8 Rt, s16 offImm8) {
   1a218:	b480      	push	{r7}
   1a21a:	b089      	sub	sp, #36	; 0x24
   1a21c:	af00      	add	r7, sp, #0
   1a21e:	4603      	mov	r3, r0
   1a220:	71fb      	strb	r3, [r7, #7]
   1a222:	460b      	mov	r3, r1
   1a224:	71bb      	strb	r3, [r7, #6]
   1a226:	4613      	mov	r3, r2
   1a228:	80bb      	strh	r3, [r7, #4]
    u32 P = offImm8 != 0;
   1a22a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   1a22e:	2b00      	cmp	r3, #0
   1a230:	bf14      	ite	ne
   1a232:	2301      	movne	r3, #1
   1a234:	2300      	moveq	r3, #0
   1a236:	b2db      	uxtb	r3, r3
   1a238:	61fb      	str	r3, [r7, #28]
    u32 U = offImm8 > 0, W = 0;
   1a23a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   1a23e:	2b00      	cmp	r3, #0
   1a240:	bfcc      	ite	gt
   1a242:	2301      	movgt	r3, #1
   1a244:	2300      	movle	r3, #0
   1a246:	b2db      	uxtb	r3, r3
   1a248:	61bb      	str	r3, [r7, #24]
   1a24a:	2300      	movs	r3, #0
   1a24c:	617b      	str	r3, [r7, #20]
    u32 imm8 = offImm8 > 0 ? offImm8 : -offImm8;
   1a24e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   1a252:	2b00      	cmp	r3, #0
   1a254:	bfb8      	it	lt
   1a256:	425b      	neglt	r3, r3
   1a258:	613b      	str	r3, [r7, #16]
    u32 flag = 0b111 | (P << 2) | (U << 1) | (W);
   1a25a:	69fb      	ldr	r3, [r7, #28]
   1a25c:	009a      	lsls	r2, r3, #2
   1a25e:	69bb      	ldr	r3, [r7, #24]
   1a260:	005b      	lsls	r3, r3, #1
   1a262:	431a      	orrs	r2, r3
   1a264:	697b      	ldr	r3, [r7, #20]
   1a266:	4313      	orrs	r3, r2
   1a268:	f043 0307 	orr.w	r3, r3, #7
   1a26c:	60fb      	str	r3, [r7, #12]
    u32 inst = (THUMB2_STRB_IMM_T3) | (Rn << 16) | (Rt << 12) | (flag << 8) | (imm8);
   1a26e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1a272:	041b      	lsls	r3, r3, #16
   1a274:	461a      	mov	r2, r3
   1a276:	f997 3006 	ldrsb.w	r3, [r7, #6]
   1a27a:	031b      	lsls	r3, r3, #12
   1a27c:	431a      	orrs	r2, r3
   1a27e:	68fb      	ldr	r3, [r7, #12]
   1a280:	021b      	lsls	r3, r3, #8
   1a282:	431a      	orrs	r2, r3
   1a284:	693b      	ldr	r3, [r7, #16]
   1a286:	4313      	orrs	r3, r2
   1a288:	f043 4378 	orr.w	r3, r3, #4160749568	; 0xf8000000
   1a28c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1a290:	60bb      	str	r3, [r7, #8]
    return inst;
   1a292:	68bb      	ldr	r3, [r7, #8]
}
   1a294:	4618      	mov	r0, r3
   1a296:	3724      	adds	r7, #36	; 0x24
   1a298:	46bd      	mov	sp, r7
   1a29a:	bc80      	pop	{r7}
   1a29c:	4770      	bx	lr

0001a29e <_thumb32_STRD_IMM_T1>:
static inline u32 _thumb32_STRD_IMM_T1(s8 RnSrc[], s8 RtDst, s16 offImm8) {
   1a29e:	b480      	push	{r7}
   1a2a0:	b089      	sub	sp, #36	; 0x24
   1a2a2:	af00      	add	r7, sp, #0
   1a2a4:	6078      	str	r0, [r7, #4]
   1a2a6:	460b      	mov	r3, r1
   1a2a8:	70fb      	strb	r3, [r7, #3]
   1a2aa:	4613      	mov	r3, r2
   1a2ac:	803b      	strh	r3, [r7, #0]
    u32 P = offImm8 != 0;
   1a2ae:	f9b7 3000 	ldrsh.w	r3, [r7]
   1a2b2:	2b00      	cmp	r3, #0
   1a2b4:	bf14      	ite	ne
   1a2b6:	2301      	movne	r3, #1
   1a2b8:	2300      	moveq	r3, #0
   1a2ba:	b2db      	uxtb	r3, r3
   1a2bc:	61fb      	str	r3, [r7, #28]
    u32 U = offImm8 > 0, W = 0;
   1a2be:	f9b7 3000 	ldrsh.w	r3, [r7]
   1a2c2:	2b00      	cmp	r3, #0
   1a2c4:	bfcc      	ite	gt
   1a2c6:	2301      	movgt	r3, #1
   1a2c8:	2300      	movle	r3, #0
   1a2ca:	b2db      	uxtb	r3, r3
   1a2cc:	61bb      	str	r3, [r7, #24]
   1a2ce:	2300      	movs	r3, #0
   1a2d0:	617b      	str	r3, [r7, #20]
    u32 imm8 = offImm8 > 0 ? offImm8 : -offImm8;
   1a2d2:	f9b7 3000 	ldrsh.w	r3, [r7]
   1a2d6:	2b00      	cmp	r3, #0
   1a2d8:	bfb8      	it	lt
   1a2da:	425b      	neglt	r3, r3
   1a2dc:	613b      	str	r3, [r7, #16]
    imm8 = (imm8 >> 2) & 0xff;
   1a2de:	693b      	ldr	r3, [r7, #16]
   1a2e0:	089b      	lsrs	r3, r3, #2
   1a2e2:	b2db      	uxtb	r3, r3
   1a2e4:	613b      	str	r3, [r7, #16]
    u32 inst = (THUMB2_STRD_IMM) | (P << 24) | (U << 23) | (W << 22) | 
   1a2e6:	69fb      	ldr	r3, [r7, #28]
   1a2e8:	061a      	lsls	r2, r3, #24
   1a2ea:	69bb      	ldr	r3, [r7, #24]
   1a2ec:	05db      	lsls	r3, r3, #23
   1a2ee:	431a      	orrs	r2, r3
   1a2f0:	697b      	ldr	r3, [r7, #20]
   1a2f2:	059b      	lsls	r3, r3, #22
   1a2f4:	4313      	orrs	r3, r2
        (RtDst << 16) | (RnSrc[1] << 12) | (RnSrc[0] << 8) | (imm8);
   1a2f6:	f997 2003 	ldrsb.w	r2, [r7, #3]
   1a2fa:	0412      	lsls	r2, r2, #16
    u32 inst = (THUMB2_STRD_IMM) | (P << 24) | (U << 23) | (W << 22) | 
   1a2fc:	4313      	orrs	r3, r2
        (RtDst << 16) | (RnSrc[1] << 12) | (RnSrc[0] << 8) | (imm8);
   1a2fe:	687a      	ldr	r2, [r7, #4]
   1a300:	3201      	adds	r2, #1
   1a302:	f992 2000 	ldrsb.w	r2, [r2]
   1a306:	0312      	lsls	r2, r2, #12
   1a308:	4313      	orrs	r3, r2
   1a30a:	687a      	ldr	r2, [r7, #4]
   1a30c:	f992 2000 	ldrsb.w	r2, [r2]
   1a310:	0212      	lsls	r2, r2, #8
   1a312:	431a      	orrs	r2, r3
   1a314:	693b      	ldr	r3, [r7, #16]
   1a316:	4313      	orrs	r3, r2
    u32 inst = (THUMB2_STRD_IMM) | (P << 24) | (U << 23) | (W << 22) | 
   1a318:	f043 4368 	orr.w	r3, r3, #3892314112	; 0xe8000000
   1a31c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1a320:	60fb      	str	r3, [r7, #12]
    return inst;
   1a322:	68fb      	ldr	r3, [r7, #12]
}
   1a324:	4618      	mov	r0, r3
   1a326:	3724      	adds	r7, #36	; 0x24
   1a328:	46bd      	mov	sp, r7
   1a32a:	bc80      	pop	{r7}
   1a32c:	4770      	bx	lr

0001a32e <_thumb32_LSLW_REG_T2>:
static inline u32 _thumb32_LSLW_REG_T2(s8 Rd, s8 Rn, s8 Rm, u8 flagS) {
   1a32e:	b490      	push	{r4, r7}
   1a330:	b082      	sub	sp, #8
   1a332:	af00      	add	r7, sp, #0
   1a334:	4604      	mov	r4, r0
   1a336:	4608      	mov	r0, r1
   1a338:	4611      	mov	r1, r2
   1a33a:	461a      	mov	r2, r3
   1a33c:	4623      	mov	r3, r4
   1a33e:	71fb      	strb	r3, [r7, #7]
   1a340:	4603      	mov	r3, r0
   1a342:	71bb      	strb	r3, [r7, #6]
   1a344:	460b      	mov	r3, r1
   1a346:	717b      	strb	r3, [r7, #5]
   1a348:	4613      	mov	r3, r2
   1a34a:	713b      	strb	r3, [r7, #4]
    return (THUMB2_LSLW_REG_T2) | (flagS << 20) | (Rn << 16) | (Rd << 8) | (Rm);
   1a34c:	793b      	ldrb	r3, [r7, #4]
   1a34e:	051b      	lsls	r3, r3, #20
   1a350:	461a      	mov	r2, r3
   1a352:	f997 3006 	ldrsb.w	r3, [r7, #6]
   1a356:	041b      	lsls	r3, r3, #16
   1a358:	4313      	orrs	r3, r2
   1a35a:	f997 2007 	ldrsb.w	r2, [r7, #7]
   1a35e:	0212      	lsls	r2, r2, #8
   1a360:	431a      	orrs	r2, r3
   1a362:	f997 3005 	ldrsb.w	r3, [r7, #5]
   1a366:	4313      	orrs	r3, r2
   1a368:	f043 437a 	orr.w	r3, r3, #4194304000	; 0xfa000000
   1a36c:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
}
   1a370:	4618      	mov	r0, r3
   1a372:	3708      	adds	r7, #8
   1a374:	46bd      	mov	sp, r7
   1a376:	bc90      	pop	{r4, r7}
   1a378:	4770      	bx	lr

0001a37a <_thumb16_ORR_REG_T1>:

static inline u16 _thumb16_ORR_REG_T1(s8 RDn, s8 Rm) {
   1a37a:	b480      	push	{r7}
   1a37c:	b085      	sub	sp, #20
   1a37e:	af00      	add	r7, sp, #0
   1a380:	4603      	mov	r3, r0
   1a382:	460a      	mov	r2, r1
   1a384:	71fb      	strb	r3, [r7, #7]
   1a386:	4613      	mov	r3, r2
   1a388:	71bb      	strb	r3, [r7, #6]
    u16 RDn3 = RDn & 0b111;
   1a38a:	79fb      	ldrb	r3, [r7, #7]
   1a38c:	b29b      	uxth	r3, r3
   1a38e:	f003 0307 	and.w	r3, r3, #7
   1a392:	81fb      	strh	r3, [r7, #14]
    u16 Rm3 = Rm & 0b111;
   1a394:	79bb      	ldrb	r3, [r7, #6]
   1a396:	b29b      	uxth	r3, r3
   1a398:	f003 0307 	and.w	r3, r3, #7
   1a39c:	81bb      	strh	r3, [r7, #12]
    return (THUMB2_ORR_REG) | (RDn3 << 4) | (Rm3);
   1a39e:	89fb      	ldrh	r3, [r7, #14]
   1a3a0:	011b      	lsls	r3, r3, #4
   1a3a2:	b21a      	sxth	r2, r3
   1a3a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   1a3a8:	4313      	orrs	r3, r2
   1a3aa:	b21b      	sxth	r3, r3
   1a3ac:	f443 4386 	orr.w	r3, r3, #17152	; 0x4300
   1a3b0:	b21b      	sxth	r3, r3
   1a3b2:	b29b      	uxth	r3, r3
}
   1a3b4:	4618      	mov	r0, r3
   1a3b6:	3714      	adds	r7, #20
   1a3b8:	46bd      	mov	sp, r7
   1a3ba:	bc80      	pop	{r7}
   1a3bc:	4770      	bx	lr

0001a3be <_thumb32_EOR_REG_T2>:

static inline u32 _thumb32_EOR_REG_T2(s8 Rd, s8 Rn, s8 Rm, s32 shiftImm5, u8 srtype, u8 flagS) {
   1a3be:	b480      	push	{r7}
   1a3c0:	b085      	sub	sp, #20
   1a3c2:	af00      	add	r7, sp, #0
   1a3c4:	603b      	str	r3, [r7, #0]
   1a3c6:	4603      	mov	r3, r0
   1a3c8:	71fb      	strb	r3, [r7, #7]
   1a3ca:	460b      	mov	r3, r1
   1a3cc:	71bb      	strb	r3, [r7, #6]
   1a3ce:	4613      	mov	r3, r2
   1a3d0:	717b      	strb	r3, [r7, #5]
    u32 imm3 = (shiftImm5 >> 2) & 0b111;
   1a3d2:	683b      	ldr	r3, [r7, #0]
   1a3d4:	109b      	asrs	r3, r3, #2
   1a3d6:	f003 0307 	and.w	r3, r3, #7
   1a3da:	60fb      	str	r3, [r7, #12]
    u32 imm2 = shiftImm5 & 0b11; 
   1a3dc:	683b      	ldr	r3, [r7, #0]
   1a3de:	f003 0303 	and.w	r3, r3, #3
   1a3e2:	60bb      	str	r3, [r7, #8]
    return (THUMB2_EOR_REG_T2) | (flagS << 20) | (Rn << 16) | (imm3 << 12)
   1a3e4:	7f3b      	ldrb	r3, [r7, #28]
   1a3e6:	051b      	lsls	r3, r3, #20
   1a3e8:	461a      	mov	r2, r3
   1a3ea:	f997 3006 	ldrsb.w	r3, [r7, #6]
   1a3ee:	041b      	lsls	r3, r3, #16
   1a3f0:	431a      	orrs	r2, r3
   1a3f2:	68fb      	ldr	r3, [r7, #12]
   1a3f4:	031b      	lsls	r3, r3, #12
   1a3f6:	4313      	orrs	r3, r2
             | (Rd << 8) | (imm2 << 6) | (srtype << 4) | (Rm); 
   1a3f8:	f997 2007 	ldrsb.w	r2, [r7, #7]
   1a3fc:	0212      	lsls	r2, r2, #8
   1a3fe:	431a      	orrs	r2, r3
   1a400:	68bb      	ldr	r3, [r7, #8]
   1a402:	019b      	lsls	r3, r3, #6
   1a404:	4313      	orrs	r3, r2
   1a406:	7e3a      	ldrb	r2, [r7, #24]
   1a408:	0112      	lsls	r2, r2, #4
   1a40a:	431a      	orrs	r2, r3
   1a40c:	f997 3005 	ldrsb.w	r3, [r7, #5]
   1a410:	4313      	orrs	r3, r2
   1a412:	f043 436a 	orr.w	r3, r3, #3925868544	; 0xea000000
   1a416:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
}
   1a41a:	4618      	mov	r0, r3
   1a41c:	3714      	adds	r7, #20
   1a41e:	46bd      	mov	sp, r7
   1a420:	bc80      	pop	{r7}
   1a422:	4770      	bx	lr

0001a424 <_thumb32_ORRW_REG_T2>:

// ARM_ORR_SI Page A7-310
// type: Shift_C(R[m], shift_t, shift_n, APSR.C);
static inline u32 _thumb32_ORRW_REG_T2(s8 Rd, s8 Rn, s8 Rm, s32 shiftImm5, u8 srtype, u8 flagS) {
   1a424:	b480      	push	{r7}
   1a426:	b087      	sub	sp, #28
   1a428:	af00      	add	r7, sp, #0
   1a42a:	603b      	str	r3, [r7, #0]
   1a42c:	4603      	mov	r3, r0
   1a42e:	71fb      	strb	r3, [r7, #7]
   1a430:	460b      	mov	r3, r1
   1a432:	71bb      	strb	r3, [r7, #6]
   1a434:	4613      	mov	r3, r2
   1a436:	717b      	strb	r3, [r7, #5]
    if (shiftImm5 < 0 || shiftImm5 > 0b11111) {
   1a438:	683b      	ldr	r3, [r7, #0]
   1a43a:	2b00      	cmp	r3, #0
   1a43c:	db02      	blt.n	1a444 <_thumb32_ORRW_REG_T2+0x20>
   1a43e:	683b      	ldr	r3, [r7, #0]
   1a440:	2b1f      	cmp	r3, #31
   1a442:	dd02      	ble.n	1a44a <_thumb32_ORRW_REG_T2+0x26>
        // DEBUG_LOG("Invalide imm value. Line:%d Val:%d\n", __LINE__, shiftImm5);
        return -1;
   1a444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a448:	e027      	b.n	1a49a <_thumb32_ORRW_REG_T2+0x76>
    }
    u32 imm3 = (shiftImm5 >> 2) & 0b111;
   1a44a:	683b      	ldr	r3, [r7, #0]
   1a44c:	109b      	asrs	r3, r3, #2
   1a44e:	f003 0307 	and.w	r3, r3, #7
   1a452:	617b      	str	r3, [r7, #20]
    u32 imm2 = shiftImm5 & 0b11; 
   1a454:	683b      	ldr	r3, [r7, #0]
   1a456:	f003 0303 	and.w	r3, r3, #3
   1a45a:	613b      	str	r3, [r7, #16]
    u32 inst = (THUMB2_ORRW_REG) | (flagS << 20) | (Rn << 16) | (imm3 << 12)
   1a45c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   1a460:	051b      	lsls	r3, r3, #20
   1a462:	461a      	mov	r2, r3
   1a464:	f997 3006 	ldrsb.w	r3, [r7, #6]
   1a468:	041b      	lsls	r3, r3, #16
   1a46a:	431a      	orrs	r2, r3
   1a46c:	697b      	ldr	r3, [r7, #20]
   1a46e:	031b      	lsls	r3, r3, #12
   1a470:	4313      	orrs	r3, r2
             | (Rd << 8) | (imm2 << 6) | (srtype << 4) | (Rm); 
   1a472:	f997 2007 	ldrsb.w	r2, [r7, #7]
   1a476:	0212      	lsls	r2, r2, #8
   1a478:	431a      	orrs	r2, r3
   1a47a:	693b      	ldr	r3, [r7, #16]
   1a47c:	019b      	lsls	r3, r3, #6
   1a47e:	4313      	orrs	r3, r2
   1a480:	f897 2020 	ldrb.w	r2, [r7, #32]
   1a484:	0112      	lsls	r2, r2, #4
   1a486:	431a      	orrs	r2, r3
   1a488:	f997 3005 	ldrsb.w	r3, [r7, #5]
   1a48c:	4313      	orrs	r3, r2
    u32 inst = (THUMB2_ORRW_REG) | (flagS << 20) | (Rn << 16) | (imm3 << 12)
   1a48e:	f043 436a 	orr.w	r3, r3, #3925868544	; 0xea000000
   1a492:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1a496:	60fb      	str	r3, [r7, #12]
    return inst;
   1a498:	68fb      	ldr	r3, [r7, #12]
}
   1a49a:	4618      	mov	r0, r3
   1a49c:	371c      	adds	r7, #28
   1a49e:	46bd      	mov	sp, r7
   1a4a0:	bc80      	pop	{r7}
   1a4a2:	4770      	bx	lr

0001a4a4 <emit_bytes>:
void jit_dump_inst(jit_state *state);
void jit_state_set_mem(jit_state *state, jit_mem *mem);

static inline void
emit_bytes(struct jit_state *state, void *data, uint32_t len) 
{
   1a4a4:	b580      	push	{r7, lr}
   1a4a6:	b084      	sub	sp, #16
   1a4a8:	af00      	add	r7, sp, #0
   1a4aa:	60f8      	str	r0, [r7, #12]
   1a4ac:	60b9      	str	r1, [r7, #8]
   1a4ae:	607a      	str	r2, [r7, #4]
    // my_printf("emit_bytes: %s 0x%x\n", state->jit_code, *((uint16_t*) data));
    if (state->needGen) {
   1a4b0:	68fb      	ldr	r3, [r7, #12]
   1a4b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   1a4b6:	2b00      	cmp	r3, #0
   1a4b8:	d009      	beq.n	1a4ce <emit_bytes+0x2a>
        memcpy(state->jit_code + state->idx, data, len);
   1a4ba:	68fb      	ldr	r3, [r7, #12]
   1a4bc:	689b      	ldr	r3, [r3, #8]
   1a4be:	68fa      	ldr	r2, [r7, #12]
   1a4c0:	6912      	ldr	r2, [r2, #16]
   1a4c2:	4413      	add	r3, r2
   1a4c4:	687a      	ldr	r2, [r7, #4]
   1a4c6:	68b9      	ldr	r1, [r7, #8]
   1a4c8:	4618      	mov	r0, r3
   1a4ca:	f7e7 fdcd 	bl	2068 <memcpy>
    // uint8_t *d = (uint8_t *) data;
    // for (int i = 0; i < len; i++) {
    //     state->jit_code[state->idx + i] = d[i];
    //     my_printf("state->jit_code[%d] = 0x%x\n", state->idx + i, d[i]);
    // }
    state->idx += len;
   1a4ce:	68fb      	ldr	r3, [r7, #12]
   1a4d0:	691b      	ldr	r3, [r3, #16]
   1a4d2:	461a      	mov	r2, r3
   1a4d4:	687b      	ldr	r3, [r7, #4]
   1a4d6:	4413      	add	r3, r2
   1a4d8:	461a      	mov	r2, r3
   1a4da:	68fb      	ldr	r3, [r7, #12]
   1a4dc:	611a      	str	r2, [r3, #16]
}
   1a4de:	bf00      	nop
   1a4e0:	3710      	adds	r7, #16
   1a4e2:	46bd      	mov	sp, r7
   1a4e4:	bd80      	pop	{r7, pc}

0001a4e6 <emit2>:
//     emit_bytes(state, &x, sizeof(x));
// }

static inline void
emit2(struct jit_state *state, uint16_t x)
{
   1a4e6:	b580      	push	{r7, lr}
   1a4e8:	b082      	sub	sp, #8
   1a4ea:	af00      	add	r7, sp, #0
   1a4ec:	6078      	str	r0, [r7, #4]
   1a4ee:	460b      	mov	r3, r1
   1a4f0:	807b      	strh	r3, [r7, #2]
    emit_bytes(state, &x, sizeof(x));
   1a4f2:	1cbb      	adds	r3, r7, #2
   1a4f4:	2202      	movs	r2, #2
   1a4f6:	4619      	mov	r1, r3
   1a4f8:	6878      	ldr	r0, [r7, #4]
   1a4fa:	f7ff ffd3 	bl	1a4a4 <emit_bytes>
    //state->inst_loc += 1;
}
   1a4fe:	bf00      	nop
   1a500:	3708      	adds	r7, #8
   1a502:	46bd      	mov	sp, r7
   1a504:	bd80      	pop	{r7, pc}

0001a506 <emit4>:

// little edian
static inline void
emit4(struct jit_state *state, uint32_t x)
{
   1a506:	b580      	push	{r7, lr}
   1a508:	b084      	sub	sp, #16
   1a50a:	af00      	add	r7, sp, #0
   1a50c:	6078      	str	r0, [r7, #4]
   1a50e:	6039      	str	r1, [r7, #0]
    uint16_t *u2 = (uint16_t *) (&x);
   1a510:	463b      	mov	r3, r7
   1a512:	60fb      	str	r3, [r7, #12]
    emit2(state, u2[1]);
   1a514:	68fb      	ldr	r3, [r7, #12]
   1a516:	3302      	adds	r3, #2
   1a518:	881b      	ldrh	r3, [r3, #0]
   1a51a:	4619      	mov	r1, r3
   1a51c:	6878      	ldr	r0, [r7, #4]
   1a51e:	f7ff ffe2 	bl	1a4e6 <emit2>
    emit2(state, u2[0]);
   1a522:	68fb      	ldr	r3, [r7, #12]
   1a524:	881b      	ldrh	r3, [r3, #0]
   1a526:	4619      	mov	r1, r3
   1a528:	6878      	ldr	r0, [r7, #4]
   1a52a:	f7ff ffdc 	bl	1a4e6 <emit2>
    // emit_bytes(state, &u2[1], sizeof(u2[1]));
    // emit_bytes(state, &u2[0], sizeof(u2[0]));
}
   1a52e:	bf00      	nop
   1a530:	3710      	adds	r7, #16
   1a532:	46bd      	mov	sp, r7
   1a534:	bd80      	pop	{r7, pc}

0001a536 <is_stacked>:
static bool is_stacked(int8_t reg) {
   1a536:	b480      	push	{r7}
   1a538:	b083      	sub	sp, #12
   1a53a:	af00      	add	r7, sp, #0
   1a53c:	4603      	mov	r3, r0
   1a53e:	71fb      	strb	r3, [r7, #7]
	return reg < 0;
   1a540:	79fb      	ldrb	r3, [r7, #7]
   1a542:	09db      	lsrs	r3, r3, #7
   1a544:	b2db      	uxtb	r3, r3
}
   1a546:	4618      	mov	r0, r3
   1a548:	370c      	adds	r7, #12
   1a54a:	46bd      	mov	sp, r7
   1a54c:	bc80      	pop	{r7}
   1a54e:	4770      	bx	lr

0001a550 <arm_bpf_get_reg32>:
static int8_t arm_bpf_get_reg32(jit_state *state, s8 reg, s8 tmp) {
   1a550:	b580      	push	{r7, lr}
   1a552:	b084      	sub	sp, #16
   1a554:	af00      	add	r7, sp, #0
   1a556:	6078      	str	r0, [r7, #4]
   1a558:	460b      	mov	r3, r1
   1a55a:	70fb      	strb	r3, [r7, #3]
   1a55c:	4613      	mov	r3, r2
   1a55e:	70bb      	strb	r3, [r7, #2]
	if (is_stacked(reg)) {
   1a560:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1a564:	4618      	mov	r0, r3
   1a566:	f7ff ffe6 	bl	1a536 <is_stacked>
   1a56a:	4603      	mov	r3, r0
   1a56c:	2b00      	cmp	r3, #0
   1a56e:	d00c      	beq.n	1a58a <arm_bpf_get_reg32+0x3a>
        s16 off = EBPF_SCRATCH_TO_ARM_FP(reg);
   1a570:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1a574:	81fb      	strh	r3, [r7, #14]
        _emit_ldr_i(state, tmp, ARM_FP, off);
   1a576:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   1a57a:	f997 1002 	ldrsb.w	r1, [r7, #2]
   1a57e:	220b      	movs	r2, #11
   1a580:	6878      	ldr	r0, [r7, #4]
   1a582:	f000 f8a2 	bl	1a6ca <_emit_ldr_i>
		reg = tmp;
   1a586:	78bb      	ldrb	r3, [r7, #2]
   1a588:	70fb      	strb	r3, [r7, #3]
	return reg;
   1a58a:	f997 3003 	ldrsb.w	r3, [r7, #3]
}
   1a58e:	4618      	mov	r0, r3
   1a590:	3710      	adds	r7, #16
   1a592:	46bd      	mov	sp, r7
   1a594:	bd80      	pop	{r7, pc}

0001a596 <arm_bpf_put_reg32>:
static void arm_bpf_put_reg32(jit_state *state, s8 reg, s8 src) {
   1a596:	b580      	push	{r7, lr}
   1a598:	b084      	sub	sp, #16
   1a59a:	af00      	add	r7, sp, #0
   1a59c:	6078      	str	r0, [r7, #4]
   1a59e:	460b      	mov	r3, r1
   1a5a0:	70fb      	strb	r3, [r7, #3]
   1a5a2:	4613      	mov	r3, r2
   1a5a4:	70bb      	strb	r3, [r7, #2]
	if (is_stacked(reg)) {
   1a5a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1a5aa:	4618      	mov	r0, r3
   1a5ac:	f7ff ffc3 	bl	1a536 <is_stacked>
   1a5b0:	4603      	mov	r3, r0
   1a5b2:	2b00      	cmp	r3, #0
   1a5b4:	d00b      	beq.n	1a5ce <arm_bpf_put_reg32+0x38>
        s16 off = EBPF_SCRATCH_TO_ARM_FP(reg);
   1a5b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1a5ba:	81fb      	strh	r3, [r7, #14]
        _emit_str_i(state, ARM_FP, src, off);
   1a5bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   1a5c0:	f997 2002 	ldrsb.w	r2, [r7, #2]
   1a5c4:	210b      	movs	r1, #11
   1a5c6:	6878      	ldr	r0, [r7, #4]
   1a5c8:	f000 f94e 	bl	1a868 <_emit_str_i>
}
   1a5cc:	e00d      	b.n	1a5ea <arm_bpf_put_reg32+0x54>
	} else if (reg != src) {
   1a5ce:	f997 2003 	ldrsb.w	r2, [r7, #3]
   1a5d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
   1a5d6:	429a      	cmp	r2, r3
   1a5d8:	d007      	beq.n	1a5ea <arm_bpf_put_reg32+0x54>
        _emit_mov_reg(state, src, reg);
   1a5da:	f997 2003 	ldrsb.w	r2, [r7, #3]
   1a5de:	f997 3002 	ldrsb.w	r3, [r7, #2]
   1a5e2:	4619      	mov	r1, r3
   1a5e4:	6878      	ldr	r0, [r7, #4]
   1a5e6:	f000 fcf9 	bl	1afdc <_emit_mov_reg>
}
   1a5ea:	bf00      	nop
   1a5ec:	3710      	adds	r7, #16
   1a5ee:	46bd      	mov	sp, r7
   1a5f0:	bd80      	pop	{r7, pc}

0001a5f2 <arm_bpf_get_reg64>:
static const s8 *arm_bpf_get_reg64(jit_state *state, const s8 *reg, const s8 *tmp) {
   1a5f2:	b580      	push	{r7, lr}
   1a5f4:	b086      	sub	sp, #24
   1a5f6:	af00      	add	r7, sp, #0
   1a5f8:	60f8      	str	r0, [r7, #12]
   1a5fa:	60b9      	str	r1, [r7, #8]
   1a5fc:	607a      	str	r2, [r7, #4]
    if (is_stacked(reg[1])) {
   1a5fe:	68bb      	ldr	r3, [r7, #8]
   1a600:	3301      	adds	r3, #1
   1a602:	f993 3000 	ldrsb.w	r3, [r3]
   1a606:	4618      	mov	r0, r3
   1a608:	f7ff ff95 	bl	1a536 <is_stacked>
   1a60c:	4603      	mov	r3, r0
   1a60e:	2b00      	cmp	r3, #0
   1a610:	d00d      	beq.n	1a62e <arm_bpf_get_reg64+0x3c>
         s16 off = EBPF_SCRATCH_TO_ARM_FP(reg[1]);
   1a612:	68bb      	ldr	r3, [r7, #8]
   1a614:	3301      	adds	r3, #1
   1a616:	f993 3000 	ldrsb.w	r3, [r3]
   1a61a:	82fb      	strh	r3, [r7, #22]
        _emit_ldrd_i(state, tmp, ARM_FP, off);
   1a61c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   1a620:	220b      	movs	r2, #11
   1a622:	6879      	ldr	r1, [r7, #4]
   1a624:	68f8      	ldr	r0, [r7, #12]
   1a626:	f000 f903 	bl	1a830 <_emit_ldrd_i>
        reg = tmp;
   1a62a:	687b      	ldr	r3, [r7, #4]
   1a62c:	60bb      	str	r3, [r7, #8]
    return reg;
   1a62e:	68bb      	ldr	r3, [r7, #8]
}
   1a630:	4618      	mov	r0, r3
   1a632:	3718      	adds	r7, #24
   1a634:	46bd      	mov	sp, r7
   1a636:	bd80      	pop	{r7, pc}

0001a638 <arm_bpf_put_reg64>:
static void arm_bpf_put_reg64(jit_state *state, const s8 *reg, const s8 *src) {
   1a638:	b580      	push	{r7, lr}
   1a63a:	b086      	sub	sp, #24
   1a63c:	af00      	add	r7, sp, #0
   1a63e:	60f8      	str	r0, [r7, #12]
   1a640:	60b9      	str	r1, [r7, #8]
   1a642:	607a      	str	r2, [r7, #4]
	if (is_stacked(reg[1])) {
   1a644:	68bb      	ldr	r3, [r7, #8]
   1a646:	3301      	adds	r3, #1
   1a648:	f993 3000 	ldrsb.w	r3, [r3]
   1a64c:	4618      	mov	r0, r3
   1a64e:	f7ff ff72 	bl	1a536 <is_stacked>
   1a652:	4603      	mov	r3, r0
   1a654:	2b00      	cmp	r3, #0
   1a656:	d00c      	beq.n	1a672 <arm_bpf_put_reg64+0x3a>
        s16 off = EBPF_SCRATCH_TO_ARM_FP(reg[1]);
   1a658:	68bb      	ldr	r3, [r7, #8]
   1a65a:	3301      	adds	r3, #1
   1a65c:	f993 3000 	ldrsb.w	r3, [r3]
   1a660:	82fb      	strh	r3, [r7, #22]
        _emit_strd_i(state, src, ARM_FP, off);
   1a662:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   1a666:	220b      	movs	r2, #11
   1a668:	6879      	ldr	r1, [r7, #4]
   1a66a:	68f8      	ldr	r0, [r7, #12]
   1a66c:	f000 f94b 	bl	1a906 <_emit_strd_i>
}
   1a670:	e027      	b.n	1a6c2 <arm_bpf_put_reg64+0x8a>
		if (reg[1] != src[1]) {
   1a672:	68bb      	ldr	r3, [r7, #8]
   1a674:	3301      	adds	r3, #1
   1a676:	f993 2000 	ldrsb.w	r2, [r3]
   1a67a:	687b      	ldr	r3, [r7, #4]
   1a67c:	3301      	adds	r3, #1
   1a67e:	f993 3000 	ldrsb.w	r3, [r3]
   1a682:	429a      	cmp	r2, r3
   1a684:	d00b      	beq.n	1a69e <arm_bpf_put_reg64+0x66>
            emit_a32_mov_reg(state, src[1], reg[1]);
   1a686:	687b      	ldr	r3, [r7, #4]
   1a688:	3301      	adds	r3, #1
   1a68a:	f993 1000 	ldrsb.w	r1, [r3]
   1a68e:	68bb      	ldr	r3, [r7, #8]
   1a690:	3301      	adds	r3, #1
   1a692:	f993 3000 	ldrsb.w	r3, [r3]
   1a696:	461a      	mov	r2, r3
   1a698:	68f8      	ldr	r0, [r7, #12]
   1a69a:	f7ee f97d 	bl	8998 <emit_a32_mov_reg>
        if (reg[0] != src[0]) {
   1a69e:	68bb      	ldr	r3, [r7, #8]
   1a6a0:	f993 2000 	ldrsb.w	r2, [r3]
   1a6a4:	687b      	ldr	r3, [r7, #4]
   1a6a6:	f993 3000 	ldrsb.w	r3, [r3]
   1a6aa:	429a      	cmp	r2, r3
   1a6ac:	d009      	beq.n	1a6c2 <arm_bpf_put_reg64+0x8a>
            emit_a32_mov_reg(state, src[0], reg[0]);
   1a6ae:	687b      	ldr	r3, [r7, #4]
   1a6b0:	f993 1000 	ldrsb.w	r1, [r3]
   1a6b4:	68bb      	ldr	r3, [r7, #8]
   1a6b6:	f993 3000 	ldrsb.w	r3, [r3]
   1a6ba:	461a      	mov	r2, r3
   1a6bc:	68f8      	ldr	r0, [r7, #12]
   1a6be:	f7ee f96b 	bl	8998 <emit_a32_mov_reg>
}
   1a6c2:	bf00      	nop
   1a6c4:	3718      	adds	r7, #24
   1a6c6:	46bd      	mov	sp, r7
   1a6c8:	bd80      	pop	{r7, pc}

0001a6ca <_emit_ldr_i>:
static void _emit_ldr_i(jit_state *state, const s8 Rt, const s8 Rn, s16 off) {
   1a6ca:	b580      	push	{r7, lr}
   1a6cc:	b084      	sub	sp, #16
   1a6ce:	af00      	add	r7, sp, #0
   1a6d0:	6078      	str	r0, [r7, #4]
   1a6d2:	4608      	mov	r0, r1
   1a6d4:	4611      	mov	r1, r2
   1a6d6:	461a      	mov	r2, r3
   1a6d8:	4603      	mov	r3, r0
   1a6da:	70fb      	strb	r3, [r7, #3]
   1a6dc:	460b      	mov	r3, r1
   1a6de:	70bb      	strb	r3, [r7, #2]
   1a6e0:	4613      	mov	r3, r2
   1a6e2:	803b      	strh	r3, [r7, #0]
    if (off == 0) { // imm12
   1a6e4:	f9b7 3000 	ldrsh.w	r3, [r7]
   1a6e8:	2b00      	cmp	r3, #0
   1a6ea:	d116      	bne.n	1a71a <_emit_ldr_i+0x50>
        s32 inst = 0xf8d00000 | (Rn << 16) | (Rt << 12) | (off & 0xfff);
   1a6ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
   1a6f0:	041b      	lsls	r3, r3, #16
   1a6f2:	461a      	mov	r2, r3
   1a6f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1a6f8:	031b      	lsls	r3, r3, #12
   1a6fa:	431a      	orrs	r2, r3
   1a6fc:	883b      	ldrh	r3, [r7, #0]
   1a6fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
   1a702:	4313      	orrs	r3, r2
   1a704:	f043 4378 	orr.w	r3, r3, #4160749568	; 0xf8000000
   1a708:	f443 0350 	orr.w	r3, r3, #13631488	; 0xd00000
   1a70c:	60fb      	str	r3, [r7, #12]
        emit4(state, inst);
   1a70e:	68fb      	ldr	r3, [r7, #12]
   1a710:	4619      	mov	r1, r3
   1a712:	6878      	ldr	r0, [r7, #4]
   1a714:	f7ff fef7 	bl	1a506 <emit4>
}
   1a718:	e00d      	b.n	1a736 <_emit_ldr_i+0x6c>
        emit4(state, _thumb32_LDR_IMM_T4(Rt, Rn, off));
   1a71a:	f9b7 2000 	ldrsh.w	r2, [r7]
   1a71e:	f997 1002 	ldrsb.w	r1, [r7, #2]
   1a722:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1a726:	4618      	mov	r0, r3
   1a728:	f7ec fc8e 	bl	7048 <_thumb32_LDR_IMM_T4>
   1a72c:	4603      	mov	r3, r0
   1a72e:	4619      	mov	r1, r3
   1a730:	6878      	ldr	r0, [r7, #4]
   1a732:	f7ff fee8 	bl	1a506 <emit4>
}
   1a736:	bf00      	nop
   1a738:	3710      	adds	r7, #16
   1a73a:	46bd      	mov	sp, r7
   1a73c:	bd80      	pop	{r7, pc}

0001a73e <_emit_ldrb_i>:
static void _emit_ldrb_i(jit_state *state, const s8 Rt, const s8 Rn, s16 off) {
   1a73e:	b580      	push	{r7, lr}
   1a740:	b086      	sub	sp, #24
   1a742:	af00      	add	r7, sp, #0
   1a744:	6078      	str	r0, [r7, #4]
   1a746:	4608      	mov	r0, r1
   1a748:	4611      	mov	r1, r2
   1a74a:	461a      	mov	r2, r3
   1a74c:	4603      	mov	r3, r0
   1a74e:	70fb      	strb	r3, [r7, #3]
   1a750:	460b      	mov	r3, r1
   1a752:	70bb      	strb	r3, [r7, #2]
   1a754:	4613      	mov	r3, r2
   1a756:	803b      	strh	r3, [r7, #0]
    s16 imm5 = 0b11111, imm8 = 0xff, imm12 = 0xfff;
   1a758:	231f      	movs	r3, #31
   1a75a:	82fb      	strh	r3, [r7, #22]
   1a75c:	23ff      	movs	r3, #255	; 0xff
   1a75e:	82bb      	strh	r3, [r7, #20]
   1a760:	f640 73ff 	movw	r3, #4095	; 0xfff
   1a764:	827b      	strh	r3, [r7, #18]
    if (off <= imm5 && off >= -imm5) {
   1a766:	f9b7 2000 	ldrsh.w	r2, [r7]
   1a76a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   1a76e:	429a      	cmp	r2, r3
   1a770:	dc1d      	bgt.n	1a7ae <_emit_ldrb_i+0x70>
   1a772:	f9b7 2000 	ldrsh.w	r2, [r7]
   1a776:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   1a77a:	425b      	negs	r3, r3
   1a77c:	429a      	cmp	r2, r3
   1a77e:	db16      	blt.n	1a7ae <_emit_ldrb_i+0x70>
        if (Rt < 8 && Rn < 8) {
   1a780:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1a784:	2b07      	cmp	r3, #7
   1a786:	dc12      	bgt.n	1a7ae <_emit_ldrb_i+0x70>
   1a788:	f997 3002 	ldrsb.w	r3, [r7, #2]
   1a78c:	2b07      	cmp	r3, #7
   1a78e:	dc0e      	bgt.n	1a7ae <_emit_ldrb_i+0x70>
            emit2(state, _thumb16_LDRB_IMM_T1(Rt, Rn, off));
   1a790:	f9b7 2000 	ldrsh.w	r2, [r7]
   1a794:	f997 1002 	ldrsb.w	r1, [r7, #2]
   1a798:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1a79c:	4618      	mov	r0, r3
   1a79e:	f7ff fc9a 	bl	1a0d6 <_thumb16_LDRB_IMM_T1>
   1a7a2:	4603      	mov	r3, r0
   1a7a4:	4619      	mov	r1, r3
   1a7a6:	6878      	ldr	r0, [r7, #4]
   1a7a8:	f7ff fe9d 	bl	1a4e6 <emit2>
            return;
   1a7ac:	e03d      	b.n	1a82a <_emit_ldrb_i+0xec>
    if (off <= imm8 && off >= -imm8) {
   1a7ae:	f9b7 2000 	ldrsh.w	r2, [r7]
   1a7b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
   1a7b6:	429a      	cmp	r2, r3
   1a7b8:	dc15      	bgt.n	1a7e6 <_emit_ldrb_i+0xa8>
   1a7ba:	f9b7 2000 	ldrsh.w	r2, [r7]
   1a7be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
   1a7c2:	425b      	negs	r3, r3
   1a7c4:	429a      	cmp	r2, r3
   1a7c6:	db0e      	blt.n	1a7e6 <_emit_ldrb_i+0xa8>
        emit4(state, _thumb32_LDRB_IMM_T3(Rt, Rn, off));
   1a7c8:	f9b7 2000 	ldrsh.w	r2, [r7]
   1a7cc:	f997 1002 	ldrsb.w	r1, [r7, #2]
   1a7d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1a7d4:	4618      	mov	r0, r3
   1a7d6:	f7ff fc9f 	bl	1a118 <_thumb32_LDRB_IMM_T3>
   1a7da:	4603      	mov	r3, r0
   1a7dc:	4619      	mov	r1, r3
   1a7de:	6878      	ldr	r0, [r7, #4]
   1a7e0:	f7ff fe91 	bl	1a506 <emit4>
   1a7e4:	e021      	b.n	1a82a <_emit_ldrb_i+0xec>
    } else if (off <= imm12 && off >= -imm12) {
   1a7e6:	f9b7 2000 	ldrsh.w	r2, [r7]
   1a7ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
   1a7ee:	429a      	cmp	r2, r3
   1a7f0:	dc1b      	bgt.n	1a82a <_emit_ldrb_i+0xec>
   1a7f2:	f9b7 2000 	ldrsh.w	r2, [r7]
   1a7f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
   1a7fa:	425b      	negs	r3, r3
   1a7fc:	429a      	cmp	r2, r3
   1a7fe:	db14      	blt.n	1a82a <_emit_ldrb_i+0xec>
        s32 inst = 0xf8900000 | (Rn << 16) | (Rt << 12) | off;
   1a800:	f997 3002 	ldrsb.w	r3, [r7, #2]
   1a804:	041b      	lsls	r3, r3, #16
   1a806:	461a      	mov	r2, r3
   1a808:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1a80c:	031b      	lsls	r3, r3, #12
   1a80e:	431a      	orrs	r2, r3
   1a810:	f9b7 3000 	ldrsh.w	r3, [r7]
   1a814:	4313      	orrs	r3, r2
   1a816:	f043 4378 	orr.w	r3, r3, #4160749568	; 0xf8000000
   1a81a:	f443 0310 	orr.w	r3, r3, #9437184	; 0x900000
   1a81e:	60fb      	str	r3, [r7, #12]
        emit4(state, inst);
   1a820:	68fb      	ldr	r3, [r7, #12]
   1a822:	4619      	mov	r1, r3
   1a824:	6878      	ldr	r0, [r7, #4]
   1a826:	f7ff fe6e 	bl	1a506 <emit4>
}
   1a82a:	3718      	adds	r7, #24
   1a82c:	46bd      	mov	sp, r7
   1a82e:	bd80      	pop	{r7, pc}

0001a830 <_emit_ldrd_i>:
static void _emit_ldrd_i(jit_state *state, const s8 Rt[], const s8 Rn, s16 off) {
   1a830:	b580      	push	{r7, lr}
   1a832:	b084      	sub	sp, #16
   1a834:	af00      	add	r7, sp, #0
   1a836:	60f8      	str	r0, [r7, #12]
   1a838:	60b9      	str	r1, [r7, #8]
   1a83a:	4611      	mov	r1, r2
   1a83c:	461a      	mov	r2, r3
   1a83e:	460b      	mov	r3, r1
   1a840:	71fb      	strb	r3, [r7, #7]
   1a842:	4613      	mov	r3, r2
   1a844:	80bb      	strh	r3, [r7, #4]
    emit4(state, _thumb32_LDRD_IMM_T1(Rt, Rn, off));
   1a846:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
   1a84a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1a84e:	4619      	mov	r1, r3
   1a850:	68b8      	ldr	r0, [r7, #8]
   1a852:	f7ff fc99 	bl	1a188 <_thumb32_LDRD_IMM_T1>
   1a856:	4603      	mov	r3, r0
   1a858:	4619      	mov	r1, r3
   1a85a:	68f8      	ldr	r0, [r7, #12]
   1a85c:	f7ff fe53 	bl	1a506 <emit4>
}
   1a860:	bf00      	nop
   1a862:	3710      	adds	r7, #16
   1a864:	46bd      	mov	sp, r7
   1a866:	bd80      	pop	{r7, pc}

0001a868 <_emit_str_i>:
static void _emit_str_i(jit_state *state, const s8 RnSrc, const s8 Rt,  s16 off) {
   1a868:	b580      	push	{r7, lr}
   1a86a:	b086      	sub	sp, #24
   1a86c:	af00      	add	r7, sp, #0
   1a86e:	6078      	str	r0, [r7, #4]
   1a870:	4608      	mov	r0, r1
   1a872:	4611      	mov	r1, r2
   1a874:	461a      	mov	r2, r3
   1a876:	4603      	mov	r3, r0
   1a878:	70fb      	strb	r3, [r7, #3]
   1a87a:	460b      	mov	r3, r1
   1a87c:	70bb      	strb	r3, [r7, #2]
   1a87e:	4613      	mov	r3, r2
   1a880:	803b      	strh	r3, [r7, #0]
    u8 P = off != 0;
   1a882:	f9b7 3000 	ldrsh.w	r3, [r7]
   1a886:	2b00      	cmp	r3, #0
   1a888:	bf14      	ite	ne
   1a88a:	2301      	movne	r3, #1
   1a88c:	2300      	moveq	r3, #0
   1a88e:	b2db      	uxtb	r3, r3
   1a890:	75fb      	strb	r3, [r7, #23]
    u8 U = off > 0, W = 0;
   1a892:	f9b7 3000 	ldrsh.w	r3, [r7]
   1a896:	2b00      	cmp	r3, #0
   1a898:	bfcc      	ite	gt
   1a89a:	2301      	movgt	r3, #1
   1a89c:	2300      	movle	r3, #0
   1a89e:	b2db      	uxtb	r3, r3
   1a8a0:	75bb      	strb	r3, [r7, #22]
   1a8a2:	2300      	movs	r3, #0
   1a8a4:	757b      	strb	r3, [r7, #21]
    u8 imm8 = off > 0 ? off : -off;
   1a8a6:	f9b7 3000 	ldrsh.w	r3, [r7]
   1a8aa:	2b00      	cmp	r3, #0
   1a8ac:	bfb8      	it	lt
   1a8ae:	425b      	neglt	r3, r3
   1a8b0:	753b      	strb	r3, [r7, #20]
    u8 flag = 0b1000 | (P << 2) | (U << 1) | (W);
   1a8b2:	7dfb      	ldrb	r3, [r7, #23]
   1a8b4:	009b      	lsls	r3, r3, #2
   1a8b6:	b25a      	sxtb	r2, r3
   1a8b8:	7dbb      	ldrb	r3, [r7, #22]
   1a8ba:	005b      	lsls	r3, r3, #1
   1a8bc:	b25b      	sxtb	r3, r3
   1a8be:	4313      	orrs	r3, r2
   1a8c0:	b25a      	sxtb	r2, r3
   1a8c2:	f997 3015 	ldrsb.w	r3, [r7, #21]
   1a8c6:	4313      	orrs	r3, r2
   1a8c8:	b25b      	sxtb	r3, r3
   1a8ca:	f043 0308 	orr.w	r3, r3, #8
   1a8ce:	b25b      	sxtb	r3, r3
   1a8d0:	74fb      	strb	r3, [r7, #19]
    u32 inst = (THUMB2_STR_IMM)  | (RnSrc << 16) | (Rt << 12) | (flag << 8) | (imm8);
   1a8d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1a8d6:	041b      	lsls	r3, r3, #16
   1a8d8:	461a      	mov	r2, r3
   1a8da:	f997 3002 	ldrsb.w	r3, [r7, #2]
   1a8de:	031b      	lsls	r3, r3, #12
   1a8e0:	4313      	orrs	r3, r2
   1a8e2:	7cfa      	ldrb	r2, [r7, #19]
   1a8e4:	0212      	lsls	r2, r2, #8
   1a8e6:	431a      	orrs	r2, r3
   1a8e8:	7d3b      	ldrb	r3, [r7, #20]
   1a8ea:	4313      	orrs	r3, r2
   1a8ec:	f043 4378 	orr.w	r3, r3, #4160749568	; 0xf8000000
   1a8f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1a8f4:	60fb      	str	r3, [r7, #12]
    emit4(state, inst);
   1a8f6:	68f9      	ldr	r1, [r7, #12]
   1a8f8:	6878      	ldr	r0, [r7, #4]
   1a8fa:	f7ff fe04 	bl	1a506 <emit4>
}
   1a8fe:	bf00      	nop
   1a900:	3718      	adds	r7, #24
   1a902:	46bd      	mov	sp, r7
   1a904:	bd80      	pop	{r7, pc}

0001a906 <_emit_strd_i>:
static void _emit_strd_i(jit_state *state, const s8 RnSrc[], const s8 RtDst,  s16 off) {
   1a906:	b580      	push	{r7, lr}
   1a908:	b084      	sub	sp, #16
   1a90a:	af00      	add	r7, sp, #0
   1a90c:	60f8      	str	r0, [r7, #12]
   1a90e:	60b9      	str	r1, [r7, #8]
   1a910:	4611      	mov	r1, r2
   1a912:	461a      	mov	r2, r3
   1a914:	460b      	mov	r3, r1
   1a916:	71fb      	strb	r3, [r7, #7]
   1a918:	4613      	mov	r3, r2
   1a91a:	80bb      	strh	r3, [r7, #4]
    emit4(state, _thumb32_STRD_IMM_T1(RnSrc, RtDst, off));
   1a91c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
   1a920:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1a924:	4619      	mov	r1, r3
   1a926:	68b8      	ldr	r0, [r7, #8]
   1a928:	f7ff fcb9 	bl	1a29e <_thumb32_STRD_IMM_T1>
   1a92c:	4603      	mov	r3, r0
   1a92e:	4619      	mov	r1, r3
   1a930:	68f8      	ldr	r0, [r7, #12]
   1a932:	f7ff fde8 	bl	1a506 <emit4>
}
   1a936:	bf00      	nop
   1a938:	3710      	adds	r7, #16
   1a93a:	46bd      	mov	sp, r7
   1a93c:	bd80      	pop	{r7, pc}

0001a93e <_emit_add_reg>:
static void inline _emit_add_reg(jit_state *state, const s8 dst, const s8 src, const bool is64, const bool hi) {
   1a93e:	b580      	push	{r7, lr}
   1a940:	b084      	sub	sp, #16
   1a942:	af00      	add	r7, sp, #0
   1a944:	6078      	str	r0, [r7, #4]
   1a946:	4608      	mov	r0, r1
   1a948:	4611      	mov	r1, r2
   1a94a:	461a      	mov	r2, r3
   1a94c:	4603      	mov	r3, r0
   1a94e:	70fb      	strb	r3, [r7, #3]
   1a950:	460b      	mov	r3, r1
   1a952:	70bb      	strb	r3, [r7, #2]
   1a954:	4613      	mov	r3, r2
   1a956:	707b      	strb	r3, [r7, #1]
    if (is64) {
   1a958:	787b      	ldrb	r3, [r7, #1]
   1a95a:	2b00      	cmp	r3, #0
   1a95c:	d02c      	beq.n	1a9b8 <_emit_add_reg+0x7a>
        if (hi) { // ADC should not update flag
   1a95e:	7e3b      	ldrb	r3, [r7, #24]
   1a960:	2b00      	cmp	r3, #0
   1a962:	d014      	beq.n	1a98e <_emit_add_reg+0x50>
            uint32_t inst = (0xeb400000) | (src << 16) | (dst << 8) | (dst);
   1a964:	f997 3002 	ldrsb.w	r3, [r7, #2]
   1a968:	041b      	lsls	r3, r3, #16
   1a96a:	461a      	mov	r2, r3
   1a96c:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1a970:	021b      	lsls	r3, r3, #8
   1a972:	431a      	orrs	r2, r3
   1a974:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1a978:	4313      	orrs	r3, r2
   1a97a:	f043 436b 	orr.w	r3, r3, #3942645760	; 0xeb000000
   1a97e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1a982:	60fb      	str	r3, [r7, #12]
            emit4(state, inst);
   1a984:	68f9      	ldr	r1, [r7, #12]
   1a986:	6878      	ldr	r0, [r7, #4]
   1a988:	f7ff fdbd 	bl	1a506 <emit4>
}
   1a98c:	e021      	b.n	1a9d2 <_emit_add_reg+0x94>
            uint32_t inst = (0xeb100000) | (src << 16) | (dst << 8) | (dst);
   1a98e:	f997 3002 	ldrsb.w	r3, [r7, #2]
   1a992:	041b      	lsls	r3, r3, #16
   1a994:	461a      	mov	r2, r3
   1a996:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1a99a:	021b      	lsls	r3, r3, #8
   1a99c:	431a      	orrs	r2, r3
   1a99e:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1a9a2:	4313      	orrs	r3, r2
   1a9a4:	f043 436b 	orr.w	r3, r3, #3942645760	; 0xeb000000
   1a9a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1a9ac:	60bb      	str	r3, [r7, #8]
            emit4(state, inst);
   1a9ae:	68b9      	ldr	r1, [r7, #8]
   1a9b0:	6878      	ldr	r0, [r7, #4]
   1a9b2:	f7ff fda8 	bl	1a506 <emit4>
}
   1a9b6:	e00c      	b.n	1a9d2 <_emit_add_reg+0x94>
        emit2(state, _thumb16_ADD_REG_T2(dst, src));
   1a9b8:	f997 2002 	ldrsb.w	r2, [r7, #2]
   1a9bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1a9c0:	4611      	mov	r1, r2
   1a9c2:	4618      	mov	r0, r3
   1a9c4:	f7ff f99a 	bl	19cfc <_thumb16_ADD_REG_T2>
   1a9c8:	4603      	mov	r3, r0
   1a9ca:	4619      	mov	r1, r3
   1a9cc:	6878      	ldr	r0, [r7, #4]
   1a9ce:	f7ff fd8a 	bl	1a4e6 <emit2>
}
   1a9d2:	bf00      	nop
   1a9d4:	3710      	adds	r7, #16
   1a9d6:	46bd      	mov	sp, r7
   1a9d8:	bd80      	pop	{r7, pc}

0001a9da <_emit_add_imm>:
static void _emit_add_imm(jit_state *state, const s8 dst, const s8 src, s32 val) {
   1a9da:	b580      	push	{r7, lr}
   1a9dc:	b084      	sub	sp, #16
   1a9de:	af00      	add	r7, sp, #0
   1a9e0:	60f8      	str	r0, [r7, #12]
   1a9e2:	607b      	str	r3, [r7, #4]
   1a9e4:	460b      	mov	r3, r1
   1a9e6:	72fb      	strb	r3, [r7, #11]
   1a9e8:	4613      	mov	r3, r2
   1a9ea:	72bb      	strb	r3, [r7, #10]
    if (val >= 0 && val <= 255) {
   1a9ec:	687b      	ldr	r3, [r7, #4]
   1a9ee:	2b00      	cmp	r3, #0
   1a9f0:	db18      	blt.n	1aa24 <_emit_add_imm+0x4a>
   1a9f2:	687b      	ldr	r3, [r7, #4]
   1a9f4:	2bff      	cmp	r3, #255	; 0xff
   1a9f6:	dc15      	bgt.n	1aa24 <_emit_add_imm+0x4a>
        if (dst == src && dst < 8) {
   1a9f8:	f997 200b 	ldrsb.w	r2, [r7, #11]
   1a9fc:	f997 300a 	ldrsb.w	r3, [r7, #10]
   1aa00:	429a      	cmp	r2, r3
   1aa02:	d10f      	bne.n	1aa24 <_emit_add_imm+0x4a>
   1aa04:	f997 300b 	ldrsb.w	r3, [r7, #11]
   1aa08:	2b07      	cmp	r3, #7
   1aa0a:	dc0b      	bgt.n	1aa24 <_emit_add_imm+0x4a>
            emit2(state, _thumb16_ADD_IMM_T2(dst, val));
   1aa0c:	f997 300b 	ldrsb.w	r3, [r7, #11]
   1aa10:	6879      	ldr	r1, [r7, #4]
   1aa12:	4618      	mov	r0, r3
   1aa14:	f7ff f92c 	bl	19c70 <_thumb16_ADD_IMM_T2>
   1aa18:	4603      	mov	r3, r0
   1aa1a:	4619      	mov	r1, r3
   1aa1c:	68f8      	ldr	r0, [r7, #12]
   1aa1e:	f7ff fd62 	bl	1a4e6 <emit2>
            return;
   1aa22:	e013      	b.n	1aa4c <_emit_add_imm+0x72>
    if (val >= 0 && val <= 4095) {
   1aa24:	687b      	ldr	r3, [r7, #4]
   1aa26:	2b00      	cmp	r3, #0
   1aa28:	db10      	blt.n	1aa4c <_emit_add_imm+0x72>
   1aa2a:	687b      	ldr	r3, [r7, #4]
   1aa2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1aa30:	da0c      	bge.n	1aa4c <_emit_add_imm+0x72>
        emit4(state, _thumb32_ADD_IMM_T4(dst, src, val));
   1aa32:	f997 100a 	ldrsb.w	r1, [r7, #10]
   1aa36:	f997 300b 	ldrsb.w	r3, [r7, #11]
   1aa3a:	687a      	ldr	r2, [r7, #4]
   1aa3c:	4618      	mov	r0, r3
   1aa3e:	f7ff f932 	bl	19ca6 <_thumb32_ADD_IMM_T4>
   1aa42:	4603      	mov	r3, r0
   1aa44:	4619      	mov	r1, r3
   1aa46:	68f8      	ldr	r0, [r7, #12]
   1aa48:	f7ff fd5d 	bl	1a506 <emit4>
}
   1aa4c:	3710      	adds	r7, #16
   1aa4e:	46bd      	mov	sp, r7
   1aa50:	bd80      	pop	{r7, pc}

0001aa52 <_emit_sub_reg>:
static void inline _emit_sub_reg(jit_state *state, const s8 dst, const s8 src, const bool is64, const bool hi) {
   1aa52:	b580      	push	{r7, lr}
   1aa54:	b086      	sub	sp, #24
   1aa56:	af02      	add	r7, sp, #8
   1aa58:	6078      	str	r0, [r7, #4]
   1aa5a:	4608      	mov	r0, r1
   1aa5c:	4611      	mov	r1, r2
   1aa5e:	461a      	mov	r2, r3
   1aa60:	4603      	mov	r3, r0
   1aa62:	70fb      	strb	r3, [r7, #3]
   1aa64:	460b      	mov	r3, r1
   1aa66:	70bb      	strb	r3, [r7, #2]
   1aa68:	4613      	mov	r3, r2
   1aa6a:	707b      	strb	r3, [r7, #1]
    if (is64 && !hi) { // subs.w
   1aa6c:	787b      	ldrb	r3, [r7, #1]
   1aa6e:	2b00      	cmp	r3, #0
   1aa70:	d018      	beq.n	1aaa4 <_emit_sub_reg+0x52>
   1aa72:	7e3b      	ldrb	r3, [r7, #24]
   1aa74:	f083 0301 	eor.w	r3, r3, #1
   1aa78:	b2db      	uxtb	r3, r3
   1aa7a:	2b00      	cmp	r3, #0
   1aa7c:	d012      	beq.n	1aaa4 <_emit_sub_reg+0x52>
        emit4(state, _thumb32_SUB_REG_T2(dst, dst, src, 0, SRTYPE_LSL, FLAG_S));
   1aa7e:	f997 2002 	ldrsb.w	r2, [r7, #2]
   1aa82:	f997 1003 	ldrsb.w	r1, [r7, #3]
   1aa86:	f997 0003 	ldrsb.w	r0, [r7, #3]
   1aa8a:	2301      	movs	r3, #1
   1aa8c:	9301      	str	r3, [sp, #4]
   1aa8e:	2300      	movs	r3, #0
   1aa90:	9300      	str	r3, [sp, #0]
   1aa92:	2300      	movs	r3, #0
   1aa94:	f7ff fab0 	bl	19ff8 <_thumb32_SUB_REG_T2>
   1aa98:	4603      	mov	r3, r0
   1aa9a:	4619      	mov	r1, r3
   1aa9c:	6878      	ldr	r0, [r7, #4]
   1aa9e:	f7ff fd32 	bl	1a506 <emit4>
   1aaa2:	e051      	b.n	1ab48 <_emit_sub_reg+0xf6>
    } else if (is64 && hi) { // suc
   1aaa4:	787b      	ldrb	r3, [r7, #1]
   1aaa6:	2b00      	cmp	r3, #0
   1aaa8:	d025      	beq.n	1aaf6 <_emit_sub_reg+0xa4>
   1aaaa:	7e3b      	ldrb	r3, [r7, #24]
   1aaac:	2b00      	cmp	r3, #0
   1aaae:	d022      	beq.n	1aaf6 <_emit_sub_reg+0xa4>
        uint32_t inst = (0xeb600000) | (src << 16) | (dst << 8) | (dst);
   1aab0:	f997 3002 	ldrsb.w	r3, [r7, #2]
   1aab4:	041b      	lsls	r3, r3, #16
   1aab6:	461a      	mov	r2, r3
   1aab8:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1aabc:	021b      	lsls	r3, r3, #8
   1aabe:	431a      	orrs	r2, r3
   1aac0:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1aac4:	4313      	orrs	r3, r2
   1aac6:	f043 436b 	orr.w	r3, r3, #3942645760	; 0xeb000000
   1aaca:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
   1aace:	60fb      	str	r3, [r7, #12]
        emit4(state, _thumb32_SBCW_T2(dst, dst, src, 0, SRTYPE_LSL, FLAG_NOS));
   1aad0:	f997 2002 	ldrsb.w	r2, [r7, #2]
   1aad4:	f997 1003 	ldrsb.w	r1, [r7, #3]
   1aad8:	f997 0003 	ldrsb.w	r0, [r7, #3]
   1aadc:	2300      	movs	r3, #0
   1aade:	9301      	str	r3, [sp, #4]
   1aae0:	2300      	movs	r3, #0
   1aae2:	9300      	str	r3, [sp, #0]
   1aae4:	2300      	movs	r3, #0
   1aae6:	f7ff f830 	bl	19b4a <_thumb32_SBCW_T2>
   1aaea:	4603      	mov	r3, r0
   1aaec:	4619      	mov	r1, r3
   1aaee:	6878      	ldr	r0, [r7, #4]
   1aaf0:	f7ff fd09 	bl	1a506 <emit4>
    } else if (is64 && hi) { // suc
   1aaf4:	e028      	b.n	1ab48 <_emit_sub_reg+0xf6>
        if (src < 8 && dst < 8) {
   1aaf6:	f997 3002 	ldrsb.w	r3, [r7, #2]
   1aafa:	2b07      	cmp	r3, #7
   1aafc:	dc12      	bgt.n	1ab24 <_emit_sub_reg+0xd2>
   1aafe:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1ab02:	2b07      	cmp	r3, #7
   1ab04:	dc0e      	bgt.n	1ab24 <_emit_sub_reg+0xd2>
            emit2(state, _thumb16_SUB_REG_T1(dst, dst, src));
   1ab06:	f997 2002 	ldrsb.w	r2, [r7, #2]
   1ab0a:	f997 1003 	ldrsb.w	r1, [r7, #3]
   1ab0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1ab12:	4618      	mov	r0, r3
   1ab14:	f7ff fa4f 	bl	19fb6 <_thumb16_SUB_REG_T1>
   1ab18:	4603      	mov	r3, r0
   1ab1a:	4619      	mov	r1, r3
   1ab1c:	6878      	ldr	r0, [r7, #4]
   1ab1e:	f7ff fce2 	bl	1a4e6 <emit2>
   1ab22:	e011      	b.n	1ab48 <_emit_sub_reg+0xf6>
            emit4(state, _thumb32_SUB_REG_T2(dst, dst, src, 0, SRTYPE_LSL, FLAG_NOS));
   1ab24:	f997 2002 	ldrsb.w	r2, [r7, #2]
   1ab28:	f997 1003 	ldrsb.w	r1, [r7, #3]
   1ab2c:	f997 0003 	ldrsb.w	r0, [r7, #3]
   1ab30:	2300      	movs	r3, #0
   1ab32:	9301      	str	r3, [sp, #4]
   1ab34:	2300      	movs	r3, #0
   1ab36:	9300      	str	r3, [sp, #0]
   1ab38:	2300      	movs	r3, #0
   1ab3a:	f7ff fa5d 	bl	19ff8 <_thumb32_SUB_REG_T2>
   1ab3e:	4603      	mov	r3, r0
   1ab40:	4619      	mov	r1, r3
   1ab42:	6878      	ldr	r0, [r7, #4]
   1ab44:	f7ff fcdf 	bl	1a506 <emit4>
}
   1ab48:	bf00      	nop
   1ab4a:	3710      	adds	r7, #16
   1ab4c:	46bd      	mov	sp, r7
   1ab4e:	bd80      	pop	{r7, pc}

0001ab50 <_emit_orr_reg>:
static void inline _emit_orr_reg(jit_state *state, const s8 dst, const s8 src) {
   1ab50:	b580      	push	{r7, lr}
   1ab52:	b084      	sub	sp, #16
   1ab54:	af02      	add	r7, sp, #8
   1ab56:	6078      	str	r0, [r7, #4]
   1ab58:	460b      	mov	r3, r1
   1ab5a:	70fb      	strb	r3, [r7, #3]
   1ab5c:	4613      	mov	r3, r2
   1ab5e:	70bb      	strb	r3, [r7, #2]
    if (dst < 8 && src < 8) {
   1ab60:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1ab64:	2b07      	cmp	r3, #7
   1ab66:	dc11      	bgt.n	1ab8c <_emit_orr_reg+0x3c>
   1ab68:	f997 3002 	ldrsb.w	r3, [r7, #2]
   1ab6c:	2b07      	cmp	r3, #7
   1ab6e:	dc0d      	bgt.n	1ab8c <_emit_orr_reg+0x3c>
        emit2(state, _thumb16_ORR_REG_T1(dst, src));
   1ab70:	f997 2002 	ldrsb.w	r2, [r7, #2]
   1ab74:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1ab78:	4611      	mov	r1, r2
   1ab7a:	4618      	mov	r0, r3
   1ab7c:	f7ff fbfd 	bl	1a37a <_thumb16_ORR_REG_T1>
   1ab80:	4603      	mov	r3, r0
   1ab82:	4619      	mov	r1, r3
   1ab84:	6878      	ldr	r0, [r7, #4]
   1ab86:	f7ff fcae 	bl	1a4e6 <emit2>
   1ab8a:	e011      	b.n	1abb0 <_emit_orr_reg+0x60>
        emit4(state, _thumb32_ORRW_REG_T2(dst, dst, src, 0, SRTYPE_ASL, FLAG_NOS));
   1ab8c:	f997 2002 	ldrsb.w	r2, [r7, #2]
   1ab90:	f997 1003 	ldrsb.w	r1, [r7, #3]
   1ab94:	f997 0003 	ldrsb.w	r0, [r7, #3]
   1ab98:	2300      	movs	r3, #0
   1ab9a:	9301      	str	r3, [sp, #4]
   1ab9c:	2300      	movs	r3, #0
   1ab9e:	9300      	str	r3, [sp, #0]
   1aba0:	2300      	movs	r3, #0
   1aba2:	f7ff fc3f 	bl	1a424 <_thumb32_ORRW_REG_T2>
   1aba6:	4603      	mov	r3, r0
   1aba8:	4619      	mov	r1, r3
   1abaa:	6878      	ldr	r0, [r7, #4]
   1abac:	f7ff fcab 	bl	1a506 <emit4>
}
   1abb0:	bf00      	nop
   1abb2:	3708      	adds	r7, #8
   1abb4:	46bd      	mov	sp, r7
   1abb6:	bd80      	pop	{r7, pc}

0001abb8 <_emit_and_reg>:
static void inline _emit_and_reg(jit_state *state, const s8 dst, const s8 src) {
   1abb8:	b580      	push	{r7, lr}
   1abba:	b084      	sub	sp, #16
   1abbc:	af02      	add	r7, sp, #8
   1abbe:	6078      	str	r0, [r7, #4]
   1abc0:	460b      	mov	r3, r1
   1abc2:	70fb      	strb	r3, [r7, #3]
   1abc4:	4613      	mov	r3, r2
   1abc6:	70bb      	strb	r3, [r7, #2]
    if (dst < 8 && src < 8) {
   1abc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1abcc:	2b07      	cmp	r3, #7
   1abce:	dc11      	bgt.n	1abf4 <_emit_and_reg+0x3c>
   1abd0:	f997 3002 	ldrsb.w	r3, [r7, #2]
   1abd4:	2b07      	cmp	r3, #7
   1abd6:	dc0d      	bgt.n	1abf4 <_emit_and_reg+0x3c>
        emit2(state, _thumb16_AND_REG_T1(dst, src));
   1abd8:	f997 2002 	ldrsb.w	r2, [r7, #2]
   1abdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1abe0:	4611      	mov	r1, r2
   1abe2:	4618      	mov	r0, r3
   1abe4:	f7ff f8e7 	bl	19db6 <_thumb16_AND_REG_T1>
   1abe8:	4603      	mov	r3, r0
   1abea:	4619      	mov	r1, r3
   1abec:	6878      	ldr	r0, [r7, #4]
   1abee:	f7ff fc7a 	bl	1a4e6 <emit2>
   1abf2:	e011      	b.n	1ac18 <_emit_and_reg+0x60>
        emit4(state, _thumb32_AND_REG_T2(dst, dst, src, 0, SRTYPE_ASL, FLAG_NOS));
   1abf4:	f997 2002 	ldrsb.w	r2, [r7, #2]
   1abf8:	f997 1003 	ldrsb.w	r1, [r7, #3]
   1abfc:	f997 0003 	ldrsb.w	r0, [r7, #3]
   1ac00:	2300      	movs	r3, #0
   1ac02:	9301      	str	r3, [sp, #4]
   1ac04:	2300      	movs	r3, #0
   1ac06:	9300      	str	r3, [sp, #0]
   1ac08:	2300      	movs	r3, #0
   1ac0a:	f7ff f8ee 	bl	19dea <_thumb32_AND_REG_T2>
   1ac0e:	4603      	mov	r3, r0
   1ac10:	4619      	mov	r1, r3
   1ac12:	6878      	ldr	r0, [r7, #4]
   1ac14:	f7ff fc77 	bl	1a506 <emit4>
}
   1ac18:	bf00      	nop
   1ac1a:	3708      	adds	r7, #8
   1ac1c:	46bd      	mov	sp, r7
   1ac1e:	bd80      	pop	{r7, pc}

0001ac20 <_emit_cmp_reg>:
static void inline _emit_cmp_reg(jit_state *state, const s8 Rn, const s8 Rm) {
   1ac20:	b580      	push	{r7, lr}
   1ac22:	b082      	sub	sp, #8
   1ac24:	af00      	add	r7, sp, #0
   1ac26:	6078      	str	r0, [r7, #4]
   1ac28:	460b      	mov	r3, r1
   1ac2a:	70fb      	strb	r3, [r7, #3]
   1ac2c:	4613      	mov	r3, r2
   1ac2e:	70bb      	strb	r3, [r7, #2]
    if (Rn < 0x8 && Rm < 0x8) {
   1ac30:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1ac34:	2b07      	cmp	r3, #7
   1ac36:	dc11      	bgt.n	1ac5c <_emit_cmp_reg+0x3c>
   1ac38:	f997 3002 	ldrsb.w	r3, [r7, #2]
   1ac3c:	2b07      	cmp	r3, #7
   1ac3e:	dc0d      	bgt.n	1ac5c <_emit_cmp_reg+0x3c>
        emit2(state, _thumb16_CMP_REG_T1(Rn, Rm));
   1ac40:	f997 2002 	ldrsb.w	r2, [r7, #2]
   1ac44:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1ac48:	4611      	mov	r1, r2
   1ac4a:	4618      	mov	r0, r3
   1ac4c:	f7fe ffb0 	bl	19bb0 <_thumb16_CMP_REG_T1>
   1ac50:	4603      	mov	r3, r0
   1ac52:	4619      	mov	r1, r3
   1ac54:	6878      	ldr	r0, [r7, #4]
   1ac56:	f7ff fc46 	bl	1a4e6 <emit2>
   1ac5a:	e00c      	b.n	1ac76 <_emit_cmp_reg+0x56>
        emit2(state, _thumb16_CMP_REG_T2(Rn, Rm));
   1ac5c:	f997 2002 	ldrsb.w	r2, [r7, #2]
   1ac60:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1ac64:	4611      	mov	r1, r2
   1ac66:	4618      	mov	r0, r3
   1ac68:	f7fe ffbc 	bl	19be4 <_thumb16_CMP_REG_T2>
   1ac6c:	4603      	mov	r3, r0
   1ac6e:	4619      	mov	r1, r3
   1ac70:	6878      	ldr	r0, [r7, #4]
   1ac72:	f7ff fc38 	bl	1a4e6 <emit2>
}
   1ac76:	bf00      	nop
   1ac78:	3708      	adds	r7, #8
   1ac7a:	46bd      	mov	sp, r7
   1ac7c:	bd80      	pop	{r7, pc}

0001ac7e <_use_b4>:
static bool inline _use_b4(jit_state *state) {
   1ac7e:	b480      	push	{r7}
   1ac80:	b083      	sub	sp, #12
   1ac82:	af00      	add	r7, sp, #0
   1ac84:	6078      	str	r0, [r7, #4]
    return state->inst_num > 20;
   1ac86:	687b      	ldr	r3, [r7, #4]
   1ac88:	685b      	ldr	r3, [r3, #4]
   1ac8a:	2b14      	cmp	r3, #20
   1ac8c:	bfcc      	ite	gt
   1ac8e:	2301      	movgt	r3, #1
   1ac90:	2300      	movle	r3, #0
   1ac92:	b2db      	uxtb	r3, r3
}
   1ac94:	4618      	mov	r0, r3
   1ac96:	370c      	adds	r7, #12
   1ac98:	46bd      	mov	sp, r7
   1ac9a:	bc80      	pop	{r7}
   1ac9c:	4770      	bx	lr

0001ac9e <_emit_cmp_cond>:
static void _emit_cmp_cond(jit_state *state, s8 rd, s8 rt, s8 rm, s8 rn, u8 op, bool is_jmp64) {
   1ac9e:	b580      	push	{r7, lr}
   1aca0:	b084      	sub	sp, #16
   1aca2:	af02      	add	r7, sp, #8
   1aca4:	6078      	str	r0, [r7, #4]
   1aca6:	4608      	mov	r0, r1
   1aca8:	4611      	mov	r1, r2
   1acaa:	461a      	mov	r2, r3
   1acac:	4603      	mov	r3, r0
   1acae:	70fb      	strb	r3, [r7, #3]
   1acb0:	460b      	mov	r3, r1
   1acb2:	70bb      	strb	r3, [r7, #2]
   1acb4:	4613      	mov	r3, r2
   1acb6:	707b      	strb	r3, [r7, #1]
    switch (op)
   1acb8:	7d3b      	ldrb	r3, [r7, #20]
   1acba:	2b60      	cmp	r3, #96	; 0x60
   1acbc:	f000 8084 	beq.w	1adc8 <_emit_cmp_cond+0x12a>
   1acc0:	2b60      	cmp	r3, #96	; 0x60
   1acc2:	dc0d      	bgt.n	1ace0 <_emit_cmp_cond+0x42>
   1acc4:	2b30      	cmp	r3, #48	; 0x30
   1acc6:	d062      	beq.n	1ad8e <_emit_cmp_cond+0xf0>
   1acc8:	2b30      	cmp	r3, #48	; 0x30
   1acca:	dc04      	bgt.n	1acd6 <_emit_cmp_cond+0x38>
   1accc:	2b10      	cmp	r3, #16
   1acce:	d05e      	beq.n	1ad8e <_emit_cmp_cond+0xf0>
   1acd0:	2b20      	cmp	r3, #32
   1acd2:	d05c      	beq.n	1ad8e <_emit_cmp_cond+0xf0>
        break;
   1acd4:	e0b5      	b.n	1ae42 <_emit_cmp_cond+0x1a4>
    switch (op)
   1acd6:	2b40      	cmp	r3, #64	; 0x40
   1acd8:	d012      	beq.n	1ad00 <_emit_cmp_cond+0x62>
   1acda:	2b50      	cmp	r3, #80	; 0x50
   1acdc:	d057      	beq.n	1ad8e <_emit_cmp_cond+0xf0>
        break;
   1acde:	e0b0      	b.n	1ae42 <_emit_cmp_cond+0x1a4>
    switch (op)
   1ace0:	2bb0      	cmp	r3, #176	; 0xb0
   1ace2:	d054      	beq.n	1ad8e <_emit_cmp_cond+0xf0>
   1ace4:	2bb0      	cmp	r3, #176	; 0xb0
   1ace6:	dc05      	bgt.n	1acf4 <_emit_cmp_cond+0x56>
   1ace8:	2b70      	cmp	r3, #112	; 0x70
   1acea:	f000 808a 	beq.w	1ae02 <_emit_cmp_cond+0x164>
   1acee:	2ba0      	cmp	r3, #160	; 0xa0
   1acf0:	d04d      	beq.n	1ad8e <_emit_cmp_cond+0xf0>
        break;
   1acf2:	e0a6      	b.n	1ae42 <_emit_cmp_cond+0x1a4>
    switch (op)
   1acf4:	2bc0      	cmp	r3, #192	; 0xc0
   1acf6:	f000 8084 	beq.w	1ae02 <_emit_cmp_cond+0x164>
   1acfa:	2bd0      	cmp	r3, #208	; 0xd0
   1acfc:	d064      	beq.n	1adc8 <_emit_cmp_cond+0x12a>
        break;
   1acfe:	e0a0      	b.n	1ae42 <_emit_cmp_cond+0x1a4>
        if (is_jmp64) {
   1ad00:	7e3b      	ldrb	r3, [r7, #24]
   1ad02:	2b00      	cmp	r3, #0
   1ad04:	d031      	beq.n	1ad6a <_emit_cmp_cond+0xcc>
            emit4(state, _thumb32_ADDW_REG_T3(ARM_IP, rt, rn, 0, SRTYPE_LSL, FLAG_NOS));
   1ad06:	f997 2010 	ldrsb.w	r2, [r7, #16]
   1ad0a:	f997 1002 	ldrsb.w	r1, [r7, #2]
   1ad0e:	2300      	movs	r3, #0
   1ad10:	9301      	str	r3, [sp, #4]
   1ad12:	2300      	movs	r3, #0
   1ad14:	9300      	str	r3, [sp, #0]
   1ad16:	2300      	movs	r3, #0
   1ad18:	200c      	movs	r0, #12
   1ad1a:	f7ff f81b 	bl	19d54 <_thumb32_ADDW_REG_T3>
   1ad1e:	4603      	mov	r3, r0
   1ad20:	4619      	mov	r1, r3
   1ad22:	6878      	ldr	r0, [r7, #4]
   1ad24:	f7ff fbef 	bl	1a506 <emit4>
            emit4(state, _thumb32_ADDW_REG_T3(ARM_LR, rd, rm, 0, SRTYPE_LSL, FLAG_NOS));
   1ad28:	f997 2001 	ldrsb.w	r2, [r7, #1]
   1ad2c:	f997 1003 	ldrsb.w	r1, [r7, #3]
   1ad30:	2300      	movs	r3, #0
   1ad32:	9301      	str	r3, [sp, #4]
   1ad34:	2300      	movs	r3, #0
   1ad36:	9300      	str	r3, [sp, #0]
   1ad38:	2300      	movs	r3, #0
   1ad3a:	200e      	movs	r0, #14
   1ad3c:	f7ff f80a 	bl	19d54 <_thumb32_ADDW_REG_T3>
   1ad40:	4603      	mov	r3, r0
   1ad42:	4619      	mov	r1, r3
   1ad44:	6878      	ldr	r0, [r7, #4]
   1ad46:	f7ff fbde 	bl	1a506 <emit4>
            emit4(state, _thumb32_ORRW_REG_T2(ARM_IP, ARM_LR, ARM_IP, 0, SRTYPE_LSL, FLAG_S));
   1ad4a:	2301      	movs	r3, #1
   1ad4c:	9301      	str	r3, [sp, #4]
   1ad4e:	2300      	movs	r3, #0
   1ad50:	9300      	str	r3, [sp, #0]
   1ad52:	2300      	movs	r3, #0
   1ad54:	220c      	movs	r2, #12
   1ad56:	210e      	movs	r1, #14
   1ad58:	200c      	movs	r0, #12
   1ad5a:	f7ff fb63 	bl	1a424 <_thumb32_ORRW_REG_T2>
   1ad5e:	4603      	mov	r3, r0
   1ad60:	4619      	mov	r1, r3
   1ad62:	6878      	ldr	r0, [r7, #4]
   1ad64:	f7ff fbcf 	bl	1a506 <emit4>
        break;
   1ad68:	e06b      	b.n	1ae42 <_emit_cmp_cond+0x1a4>
            emit4(state, _thumb32_ADDW_REG_T3(ARM_IP, rt, rn, 0, SRTYPE_LSL, FLAG_S));
   1ad6a:	f997 2010 	ldrsb.w	r2, [r7, #16]
   1ad6e:	f997 1002 	ldrsb.w	r1, [r7, #2]
   1ad72:	2301      	movs	r3, #1
   1ad74:	9301      	str	r3, [sp, #4]
   1ad76:	2300      	movs	r3, #0
   1ad78:	9300      	str	r3, [sp, #0]
   1ad7a:	2300      	movs	r3, #0
   1ad7c:	200c      	movs	r0, #12
   1ad7e:	f7fe ffe9 	bl	19d54 <_thumb32_ADDW_REG_T3>
   1ad82:	4603      	mov	r3, r0
   1ad84:	4619      	mov	r1, r3
   1ad86:	6878      	ldr	r0, [r7, #4]
   1ad88:	f7ff fbbd 	bl	1a506 <emit4>
        break;
   1ad8c:	e059      	b.n	1ae42 <_emit_cmp_cond+0x1a4>
        if (is_jmp64) {
   1ad8e:	7e3b      	ldrb	r3, [r7, #24]
   1ad90:	2b00      	cmp	r3, #0
   1ad92:	d010      	beq.n	1adb6 <_emit_cmp_cond+0x118>
            _emit_cmp_reg(state, rd, rm);
   1ad94:	f997 2001 	ldrsb.w	r2, [r7, #1]
   1ad98:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1ad9c:	4619      	mov	r1, r3
   1ad9e:	6878      	ldr	r0, [r7, #4]
   1ada0:	f7ff ff3e 	bl	1ac20 <_emit_cmp_reg>
             _emit_cmp_reg(state, rt, rn);
   1ada4:	f997 2010 	ldrsb.w	r2, [r7, #16]
   1ada8:	f997 3002 	ldrsb.w	r3, [r7, #2]
   1adac:	4619      	mov	r1, r3
   1adae:	6878      	ldr	r0, [r7, #4]
   1adb0:	f7ff ff36 	bl	1ac20 <_emit_cmp_reg>
        break;
   1adb4:	e045      	b.n	1ae42 <_emit_cmp_cond+0x1a4>
             _emit_cmp_reg(state, rt, rn);
   1adb6:	f997 2010 	ldrsb.w	r2, [r7, #16]
   1adba:	f997 3002 	ldrsb.w	r3, [r7, #2]
   1adbe:	4619      	mov	r1, r3
   1adc0:	6878      	ldr	r0, [r7, #4]
   1adc2:	f7ff ff2d 	bl	1ac20 <_emit_cmp_reg>
        break;
   1adc6:	e03c      	b.n	1ae42 <_emit_cmp_cond+0x1a4>
        _emit_cmp_reg(state, rn, rt); // low cmp: rn - rt
   1adc8:	f997 2002 	ldrsb.w	r2, [r7, #2]
   1adcc:	f997 3010 	ldrsb.w	r3, [r7, #16]
   1add0:	4619      	mov	r1, r3
   1add2:	6878      	ldr	r0, [r7, #4]
   1add4:	f7ff ff24 	bl	1ac20 <_emit_cmp_reg>
        if (is_jmp64) { // subtract with carray b - a, rm - rd
   1add8:	7e3b      	ldrb	r3, [r7, #24]
   1adda:	2b00      	cmp	r3, #0
   1addc:	d02e      	beq.n	1ae3c <_emit_cmp_cond+0x19e>
            emit4(state, _thumb32_SBCW_T2(ARM_IP, rm, rd, 0, SRTYPE_LSL, FLAG_S));
   1adde:	f997 2003 	ldrsb.w	r2, [r7, #3]
   1ade2:	f997 1001 	ldrsb.w	r1, [r7, #1]
   1ade6:	2301      	movs	r3, #1
   1ade8:	9301      	str	r3, [sp, #4]
   1adea:	2300      	movs	r3, #0
   1adec:	9300      	str	r3, [sp, #0]
   1adee:	2300      	movs	r3, #0
   1adf0:	200c      	movs	r0, #12
   1adf2:	f7fe feaa 	bl	19b4a <_thumb32_SBCW_T2>
   1adf6:	4603      	mov	r3, r0
   1adf8:	4619      	mov	r1, r3
   1adfa:	6878      	ldr	r0, [r7, #4]
   1adfc:	f7ff fb83 	bl	1a506 <emit4>
        break;
   1ae00:	e01c      	b.n	1ae3c <_emit_cmp_cond+0x19e>
        _emit_cmp_reg(state, rt, rn);
   1ae02:	f997 2010 	ldrsb.w	r2, [r7, #16]
   1ae06:	f997 3002 	ldrsb.w	r3, [r7, #2]
   1ae0a:	4619      	mov	r1, r3
   1ae0c:	6878      	ldr	r0, [r7, #4]
   1ae0e:	f7ff ff07 	bl	1ac20 <_emit_cmp_reg>
        if (is_jmp64) {
   1ae12:	7e3b      	ldrb	r3, [r7, #24]
   1ae14:	2b00      	cmp	r3, #0
   1ae16:	d013      	beq.n	1ae40 <_emit_cmp_cond+0x1a2>
            emit4(state, _thumb32_SBCW_T2(ARM_IP, rd, rm, 0, SRTYPE_LSL, FLAG_S));
   1ae18:	f997 2001 	ldrsb.w	r2, [r7, #1]
   1ae1c:	f997 1003 	ldrsb.w	r1, [r7, #3]
   1ae20:	2301      	movs	r3, #1
   1ae22:	9301      	str	r3, [sp, #4]
   1ae24:	2300      	movs	r3, #0
   1ae26:	9300      	str	r3, [sp, #0]
   1ae28:	2300      	movs	r3, #0
   1ae2a:	200c      	movs	r0, #12
   1ae2c:	f7fe fe8d 	bl	19b4a <_thumb32_SBCW_T2>
   1ae30:	4603      	mov	r3, r0
   1ae32:	4619      	mov	r1, r3
   1ae34:	6878      	ldr	r0, [r7, #4]
   1ae36:	f7ff fb66 	bl	1a506 <emit4>
        break;
   1ae3a:	e001      	b.n	1ae40 <_emit_cmp_cond+0x1a2>
        break;
   1ae3c:	bf00      	nop
   1ae3e:	e000      	b.n	1ae42 <_emit_cmp_cond+0x1a4>
        break;
   1ae40:	bf00      	nop
}
   1ae42:	bf00      	nop
   1ae44:	3708      	adds	r7, #8
   1ae46:	46bd      	mov	sp, r7
   1ae48:	bd80      	pop	{r7, pc}

0001ae4a <_emit_jump>:
static void _emit_jump(jit_state *state, s32 jmp_off, s8 op) {
   1ae4a:	b580      	push	{r7, lr}
   1ae4c:	b084      	sub	sp, #16
   1ae4e:	af00      	add	r7, sp, #0
   1ae50:	60f8      	str	r0, [r7, #12]
   1ae52:	60b9      	str	r1, [r7, #8]
   1ae54:	4613      	mov	r3, r2
   1ae56:	71fb      	strb	r3, [r7, #7]
    switch (op)
   1ae58:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1ae5c:	2b40      	cmp	r3, #64	; 0x40
   1ae5e:	d00e      	beq.n	1ae7e <_emit_jump+0x34>
   1ae60:	2b40      	cmp	r3, #64	; 0x40
   1ae62:	dc06      	bgt.n	1ae72 <_emit_jump+0x28>
   1ae64:	2b20      	cmp	r3, #32
   1ae66:	d016      	beq.n	1ae96 <_emit_jump+0x4c>
   1ae68:	2b30      	cmp	r3, #48	; 0x30
   1ae6a:	d01a      	beq.n	1aea2 <_emit_jump+0x58>
   1ae6c:	2b10      	cmp	r3, #16
   1ae6e:	d00c      	beq.n	1ae8a <_emit_jump+0x40>
        break;
   1ae70:	e029      	b.n	1aec6 <_emit_jump+0x7c>
    switch (op)
   1ae72:	2b60      	cmp	r3, #96	; 0x60
   1ae74:	d01b      	beq.n	1aeae <_emit_jump+0x64>
   1ae76:	2b70      	cmp	r3, #112	; 0x70
   1ae78:	d01f      	beq.n	1aeba <_emit_jump+0x70>
   1ae7a:	2b50      	cmp	r3, #80	; 0x50
   1ae7c:	d123      	bne.n	1aec6 <_emit_jump+0x7c>
        _emit_b_cond(state, jmp_off, COND_NE);
   1ae7e:	2201      	movs	r2, #1
   1ae80:	68b9      	ldr	r1, [r7, #8]
   1ae82:	68f8      	ldr	r0, [r7, #12]
   1ae84:	f7ec fb8c 	bl	75a0 <_emit_b_cond>
        break;
   1ae88:	e01e      	b.n	1aec8 <_emit_jump+0x7e>
        _emit_b_cond(state, jmp_off, COND_EQ);
   1ae8a:	2200      	movs	r2, #0
   1ae8c:	68b9      	ldr	r1, [r7, #8]
   1ae8e:	68f8      	ldr	r0, [r7, #12]
   1ae90:	f7ec fb86 	bl	75a0 <_emit_b_cond>
        break;
   1ae94:	e018      	b.n	1aec8 <_emit_jump+0x7e>
        _emit_b_cond(state, jmp_off, COND_HI);
   1ae96:	2208      	movs	r2, #8
   1ae98:	68b9      	ldr	r1, [r7, #8]
   1ae9a:	68f8      	ldr	r0, [r7, #12]
   1ae9c:	f7ec fb80 	bl	75a0 <_emit_b_cond>
        break;
   1aea0:	e012      	b.n	1aec8 <_emit_jump+0x7e>
        _emit_b_cond(state, jmp_off, COND_CS);
   1aea2:	2202      	movs	r2, #2
   1aea4:	68b9      	ldr	r1, [r7, #8]
   1aea6:	68f8      	ldr	r0, [r7, #12]
   1aea8:	f7ec fb7a 	bl	75a0 <_emit_b_cond>
        break;
   1aeac:	e00c      	b.n	1aec8 <_emit_jump+0x7e>
        _emit_b_cond(state, jmp_off, COND_LT);
   1aeae:	220b      	movs	r2, #11
   1aeb0:	68b9      	ldr	r1, [r7, #8]
   1aeb2:	68f8      	ldr	r0, [r7, #12]
   1aeb4:	f7ec fb74 	bl	75a0 <_emit_b_cond>
        break;
   1aeb8:	e006      	b.n	1aec8 <_emit_jump+0x7e>
        _emit_b_cond(state, jmp_off, COND_GE);
   1aeba:	220a      	movs	r2, #10
   1aebc:	68b9      	ldr	r1, [r7, #8]
   1aebe:	68f8      	ldr	r0, [r7, #12]
   1aec0:	f7ec fb6e 	bl	75a0 <_emit_b_cond>
        break;
   1aec4:	e000      	b.n	1aec8 <_emit_jump+0x7e>
        break;
   1aec6:	bf00      	nop
}
   1aec8:	bf00      	nop
   1aeca:	3710      	adds	r7, #16
   1aecc:	46bd      	mov	sp, r7
   1aece:	bd80      	pop	{r7, pc}

0001aed0 <emit_mov_imm>:
{
   1aed0:	b580      	push	{r7, lr}
   1aed2:	b08a      	sub	sp, #40	; 0x28
   1aed4:	af00      	add	r7, sp, #0
   1aed6:	60f8      	str	r0, [r7, #12]
   1aed8:	460b      	mov	r3, r1
   1aeda:	607a      	str	r2, [r7, #4]
   1aedc:	72fb      	strb	r3, [r7, #11]
    u16 imm8 = 0xff, imm13 = 0xff, imm16 = 0xffff;
   1aede:	23ff      	movs	r3, #255	; 0xff
   1aee0:	84fb      	strh	r3, [r7, #38]	; 0x26
   1aee2:	23ff      	movs	r3, #255	; 0xff
   1aee4:	84bb      	strh	r3, [r7, #36]	; 0x24
   1aee6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1aeea:	847b      	strh	r3, [r7, #34]	; 0x22
	if (val <= imm8 && val >= 0 && rd < 8) {
   1aeec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   1aeee:	687a      	ldr	r2, [r7, #4]
   1aef0:	429a      	cmp	r2, r3
   1aef2:	d814      	bhi.n	1af1e <emit_mov_imm+0x4e>
   1aef4:	7afb      	ldrb	r3, [r7, #11]
   1aef6:	2b07      	cmp	r3, #7
   1aef8:	d811      	bhi.n	1af1e <emit_mov_imm+0x4e>
        uint16_t inst = 0x2000 | (rd << 8) | (val);
   1aefa:	7afb      	ldrb	r3, [r7, #11]
   1aefc:	b29b      	uxth	r3, r3
   1aefe:	021b      	lsls	r3, r3, #8
   1af00:	b29a      	uxth	r2, r3
   1af02:	687b      	ldr	r3, [r7, #4]
   1af04:	b29b      	uxth	r3, r3
   1af06:	4313      	orrs	r3, r2
   1af08:	b29b      	uxth	r3, r3
   1af0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1af0e:	843b      	strh	r3, [r7, #32]
        emit2(state, inst);
   1af10:	8c3b      	ldrh	r3, [r7, #32]
   1af12:	4619      	mov	r1, r3
   1af14:	68f8      	ldr	r0, [r7, #12]
   1af16:	f7ff fae6 	bl	1a4e6 <emit2>
	if (val <= imm8 && val >= 0 && rd < 8) {
   1af1a:	bf00      	nop
}
   1af1c:	e05a      	b.n	1afd4 <emit_mov_imm+0x104>
        uint16_t v1 = val & 0xffff;
   1af1e:	687b      	ldr	r3, [r7, #4]
   1af20:	83fb      	strh	r3, [r7, #30]
        uint16_t i4 = (v1 & 0xf000) >> 12;
   1af22:	8bfb      	ldrh	r3, [r7, #30]
   1af24:	0b1b      	lsrs	r3, r3, #12
   1af26:	83bb      	strh	r3, [r7, #28]
        uint16_t i = (v1 & 0x0800) >> 11;
   1af28:	8bfb      	ldrh	r3, [r7, #30]
   1af2a:	12db      	asrs	r3, r3, #11
   1af2c:	b29b      	uxth	r3, r3
   1af2e:	f003 0301 	and.w	r3, r3, #1
   1af32:	837b      	strh	r3, [r7, #26]
        uint16_t i3 = (v1 & 0x0700) >> 8;
   1af34:	8bfb      	ldrh	r3, [r7, #30]
   1af36:	121b      	asrs	r3, r3, #8
   1af38:	b29b      	uxth	r3, r3
   1af3a:	f003 0307 	and.w	r3, r3, #7
   1af3e:	833b      	strh	r3, [r7, #24]
        uint16_t i8 = v1 & 0x00ff;
   1af40:	8bfb      	ldrh	r3, [r7, #30]
   1af42:	b2db      	uxtb	r3, r3
   1af44:	82fb      	strh	r3, [r7, #22]
        uint32_t inst = 0xf2400000 | (i << 26) | (i4 << 16) | (i3 << 12) | (rd << 8) | i8;
   1af46:	8b7b      	ldrh	r3, [r7, #26]
   1af48:	069b      	lsls	r3, r3, #26
   1af4a:	461a      	mov	r2, r3
   1af4c:	8bbb      	ldrh	r3, [r7, #28]
   1af4e:	041b      	lsls	r3, r3, #16
   1af50:	4313      	orrs	r3, r2
   1af52:	8b3a      	ldrh	r2, [r7, #24]
   1af54:	0312      	lsls	r2, r2, #12
   1af56:	4313      	orrs	r3, r2
   1af58:	7afa      	ldrb	r2, [r7, #11]
   1af5a:	0212      	lsls	r2, r2, #8
   1af5c:	431a      	orrs	r2, r3
   1af5e:	8afb      	ldrh	r3, [r7, #22]
   1af60:	4313      	orrs	r3, r2
   1af62:	f043 4372 	orr.w	r3, r3, #4060086272	; 0xf2000000
   1af66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1af6a:	613b      	str	r3, [r7, #16]
        emit4(state, inst);
   1af6c:	6939      	ldr	r1, [r7, #16]
   1af6e:	68f8      	ldr	r0, [r7, #12]
   1af70:	f7ff fac9 	bl	1a506 <emit4>
        if (val > 0xffff) { // movt
   1af74:	687b      	ldr	r3, [r7, #4]
   1af76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1af7a:	d32b      	bcc.n	1afd4 <emit_mov_imm+0x104>
            v1 = val >> 16;
   1af7c:	687b      	ldr	r3, [r7, #4]
   1af7e:	0c1b      	lsrs	r3, r3, #16
   1af80:	83fb      	strh	r3, [r7, #30]
            i4 = (v1 & 0xf000) >> 12;
   1af82:	8bfb      	ldrh	r3, [r7, #30]
   1af84:	0b1b      	lsrs	r3, r3, #12
   1af86:	83bb      	strh	r3, [r7, #28]
            i = (v1 & 0x0800) >> 11;
   1af88:	8bfb      	ldrh	r3, [r7, #30]
   1af8a:	12db      	asrs	r3, r3, #11
   1af8c:	b29b      	uxth	r3, r3
   1af8e:	f003 0301 	and.w	r3, r3, #1
   1af92:	837b      	strh	r3, [r7, #26]
            i3 = (v1 & 0x0700) >> 8;
   1af94:	8bfb      	ldrh	r3, [r7, #30]
   1af96:	121b      	asrs	r3, r3, #8
   1af98:	b29b      	uxth	r3, r3
   1af9a:	f003 0307 	and.w	r3, r3, #7
   1af9e:	833b      	strh	r3, [r7, #24]
            i8 = v1 & 0x00ff;
   1afa0:	8bfb      	ldrh	r3, [r7, #30]
   1afa2:	b2db      	uxtb	r3, r3
   1afa4:	82fb      	strh	r3, [r7, #22]
            inst = 0xf2c00000 | (i << 26) | (i4 << 16) | (i3 << 12) | (rd << 8) | i8;
   1afa6:	8b7b      	ldrh	r3, [r7, #26]
   1afa8:	069b      	lsls	r3, r3, #26
   1afaa:	461a      	mov	r2, r3
   1afac:	8bbb      	ldrh	r3, [r7, #28]
   1afae:	041b      	lsls	r3, r3, #16
   1afb0:	4313      	orrs	r3, r2
   1afb2:	8b3a      	ldrh	r2, [r7, #24]
   1afb4:	0312      	lsls	r2, r2, #12
   1afb6:	4313      	orrs	r3, r2
   1afb8:	7afa      	ldrb	r2, [r7, #11]
   1afba:	0212      	lsls	r2, r2, #8
   1afbc:	431a      	orrs	r2, r3
   1afbe:	8afb      	ldrh	r3, [r7, #22]
   1afc0:	4313      	orrs	r3, r2
   1afc2:	f043 4372 	orr.w	r3, r3, #4060086272	; 0xf2000000
   1afc6:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
   1afca:	613b      	str	r3, [r7, #16]
            emit4(state, inst);
   1afcc:	6939      	ldr	r1, [r7, #16]
   1afce:	68f8      	ldr	r0, [r7, #12]
   1afd0:	f7ff fa99 	bl	1a506 <emit4>
}
   1afd4:	bf00      	nop
   1afd6:	3728      	adds	r7, #40	; 0x28
   1afd8:	46bd      	mov	sp, r7
   1afda:	bd80      	pop	{r7, pc}

0001afdc <_emit_mov_reg>:
static void _emit_mov_reg(jit_state *state, s8 src, s8 dst) {
   1afdc:	b580      	push	{r7, lr}
   1afde:	b082      	sub	sp, #8
   1afe0:	af00      	add	r7, sp, #0
   1afe2:	6078      	str	r0, [r7, #4]
   1afe4:	460b      	mov	r3, r1
   1afe6:	70fb      	strb	r3, [r7, #3]
   1afe8:	4613      	mov	r3, r2
   1afea:	70bb      	strb	r3, [r7, #2]
    if (dst != ARM_SP && src != ARM_SP) {
   1afec:	f997 3002 	ldrsb.w	r3, [r7, #2]
   1aff0:	2b0d      	cmp	r3, #13
   1aff2:	d011      	beq.n	1b018 <_emit_mov_reg+0x3c>
   1aff4:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1aff8:	2b0d      	cmp	r3, #13
   1affa:	d00d      	beq.n	1b018 <_emit_mov_reg+0x3c>
        emit2(state, _thumb16_MOV_REG_T1(dst, src));
   1affc:	f997 2003 	ldrsb.w	r2, [r7, #3]
   1b000:	f997 3002 	ldrsb.w	r3, [r7, #2]
   1b004:	4611      	mov	r1, r2
   1b006:	4618      	mov	r0, r3
   1b008:	f7fe ff20 	bl	19e4c <_thumb16_MOV_REG_T1>
   1b00c:	4603      	mov	r3, r0
   1b00e:	4619      	mov	r1, r3
   1b010:	6878      	ldr	r0, [r7, #4]
   1b012:	f7ff fa68 	bl	1a4e6 <emit2>
        return;
   1b016:	e00c      	b.n	1b032 <_emit_mov_reg+0x56>
    emit4(state, _thumb32_MOVW_REG_T3(dst, src, FLAG_NOS));
   1b018:	f997 1003 	ldrsb.w	r1, [r7, #3]
   1b01c:	f997 3002 	ldrsb.w	r3, [r7, #2]
   1b020:	2200      	movs	r2, #0
   1b022:	4618      	mov	r0, r3
   1b024:	f7fe ff3e 	bl	19ea4 <_thumb32_MOVW_REG_T3>
   1b028:	4603      	mov	r3, r0
   1b02a:	4619      	mov	r1, r3
   1b02c:	6878      	ldr	r0, [r7, #4]
   1b02e:	f7ff fa6a 	bl	1a506 <emit4>
}
   1b032:	3708      	adds	r7, #8
   1b034:	46bd      	mov	sp, r7
   1b036:	bd80      	pop	{r7, pc}

0001b038 <emit_mov_se_imm64>:
static void emit_mov_se_imm64(jit_state *state, const bool is64, const s8 dst[], const u32 val) {
   1b038:	b5b0      	push	{r4, r5, r7, lr}
   1b03a:	b086      	sub	sp, #24
   1b03c:	af00      	add	r7, sp, #0
   1b03e:	60f8      	str	r0, [r7, #12]
   1b040:	607a      	str	r2, [r7, #4]
   1b042:	603b      	str	r3, [r7, #0]
   1b044:	460b      	mov	r3, r1
   1b046:	72fb      	strb	r3, [r7, #11]
    if (is64) {
   1b048:	7afb      	ldrb	r3, [r7, #11]
   1b04a:	2b00      	cmp	r3, #0
   1b04c:	d01e      	beq.n	1b08c <emit_mov_se_imm64+0x54>
        u64 val64 = val;
   1b04e:	683b      	ldr	r3, [r7, #0]
   1b050:	461a      	mov	r2, r3
   1b052:	f04f 0300 	mov.w	r3, #0
   1b056:	e9c7 2304 	strd	r2, r3, [r7, #16]
        if (is64 && (val & (1<<31))) // < 0
   1b05a:	7afb      	ldrb	r3, [r7, #11]
   1b05c:	2b00      	cmp	r3, #0
   1b05e:	d00e      	beq.n	1b07e <emit_mov_se_imm64+0x46>
   1b060:	683b      	ldr	r3, [r7, #0]
   1b062:	2b00      	cmp	r3, #0
   1b064:	da0b      	bge.n	1b07e <emit_mov_se_imm64+0x46>
            val64 |= 0xffffffff00000000ULL;
   1b066:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1b06a:	f04f 0000 	mov.w	r0, #0
   1b06e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b072:	ea42 0400 	orr.w	r4, r2, r0
   1b076:	ea43 0501 	orr.w	r5, r3, r1
   1b07a:	e9c7 4504 	strd	r4, r5, [r7, #16]
        emit_mov_i64(state, dst, val64);
   1b07e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1b082:	6879      	ldr	r1, [r7, #4]
   1b084:	68f8      	ldr	r0, [r7, #12]
   1b086:	f7ed fd89 	bl	8b9c <emit_mov_i64>
}
   1b08a:	e009      	b.n	1b0a0 <emit_mov_se_imm64+0x68>
        emit_mov_imm(state, dst[1], val);
   1b08c:	687b      	ldr	r3, [r7, #4]
   1b08e:	3301      	adds	r3, #1
   1b090:	f993 3000 	ldrsb.w	r3, [r3]
   1b094:	b2db      	uxtb	r3, r3
   1b096:	683a      	ldr	r2, [r7, #0]
   1b098:	4619      	mov	r1, r3
   1b09a:	68f8      	ldr	r0, [r7, #12]
   1b09c:	f7ff ff18 	bl	1aed0 <emit_mov_imm>
}
   1b0a0:	bf00      	nop
   1b0a2:	3718      	adds	r7, #24
   1b0a4:	46bd      	mov	sp, r7
   1b0a6:	bdb0      	pop	{r4, r5, r7, pc}

0001b0a8 <bpf2a32_offset>:
static inline int bpf2a32_offset(jit_state *state, int bpf_from, int bpf_to, int bsize) {
   1b0a8:	b480      	push	{r7}
   1b0aa:	b087      	sub	sp, #28
   1b0ac:	af00      	add	r7, sp, #0
   1b0ae:	60f8      	str	r0, [r7, #12]
   1b0b0:	60b9      	str	r1, [r7, #8]
   1b0b2:	607a      	str	r2, [r7, #4]
   1b0b4:	603b      	str	r3, [r7, #0]
    if (!state->needGen) {
   1b0b6:	68fb      	ldr	r3, [r7, #12]
   1b0b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   1b0bc:	f083 0301 	eor.w	r3, r3, #1
   1b0c0:	b2db      	uxtb	r3, r3
   1b0c2:	2b00      	cmp	r3, #0
   1b0c4:	d001      	beq.n	1b0ca <bpf2a32_offset+0x22>
        return 0;
   1b0c6:	2300      	movs	r3, #0
   1b0c8:	e013      	b.n	1b0f2 <bpf2a32_offset+0x4a>
    to = state->offsets[bpf_to];
   1b0ca:	68fb      	ldr	r3, [r7, #12]
   1b0cc:	69da      	ldr	r2, [r3, #28]
   1b0ce:	687b      	ldr	r3, [r7, #4]
   1b0d0:	009b      	lsls	r3, r3, #2
   1b0d2:	4413      	add	r3, r2
   1b0d4:	681b      	ldr	r3, [r3, #0]
   1b0d6:	617b      	str	r3, [r7, #20]
    from = state->offsets[bpf_from] - bsize;
   1b0d8:	68fb      	ldr	r3, [r7, #12]
   1b0da:	69da      	ldr	r2, [r3, #28]
   1b0dc:	68bb      	ldr	r3, [r7, #8]
   1b0de:	009b      	lsls	r3, r3, #2
   1b0e0:	4413      	add	r3, r2
   1b0e2:	681a      	ldr	r2, [r3, #0]
   1b0e4:	683b      	ldr	r3, [r7, #0]
   1b0e6:	1ad3      	subs	r3, r2, r3
   1b0e8:	613b      	str	r3, [r7, #16]
    return to - from - 4;
   1b0ea:	697a      	ldr	r2, [r7, #20]
   1b0ec:	693b      	ldr	r3, [r7, #16]
   1b0ee:	1ad3      	subs	r3, r2, r3
   1b0f0:	3b04      	subs	r3, #4
}
   1b0f2:	4618      	mov	r0, r3
   1b0f4:	371c      	adds	r7, #28
   1b0f6:	46bd      	mov	sp, r7
   1b0f8:	bc80      	pop	{r7}
   1b0fa:	4770      	bx	lr

0001b0fc <epilogue_offset>:
static inline int epilogue_offset(jit_state *state) {
   1b0fc:	b480      	push	{r7}
   1b0fe:	b085      	sub	sp, #20
   1b100:	af00      	add	r7, sp, #0
   1b102:	6078      	str	r0, [r7, #4]
    if (!state->needGen) {
   1b104:	687b      	ldr	r3, [r7, #4]
   1b106:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   1b10a:	f083 0301 	eor.w	r3, r3, #1
   1b10e:	b2db      	uxtb	r3, r3
   1b110:	2b00      	cmp	r3, #0
   1b112:	d001      	beq.n	1b118 <epilogue_offset+0x1c>
        return 0;
   1b114:	2300      	movs	r3, #0
   1b116:	e009      	b.n	1b12c <epilogue_offset+0x30>
    to = state->epilogue_offset; // <---- epilogue
   1b118:	687b      	ldr	r3, [r7, #4]
   1b11a:	695b      	ldr	r3, [r3, #20]
   1b11c:	60fb      	str	r3, [r7, #12]
    from = state->idx; // <-----
   1b11e:	687b      	ldr	r3, [r7, #4]
   1b120:	691b      	ldr	r3, [r3, #16]
   1b122:	60bb      	str	r3, [r7, #8]
    return to - from - 4;
   1b124:	68fa      	ldr	r2, [r7, #12]
   1b126:	68bb      	ldr	r3, [r7, #8]
   1b128:	1ad3      	subs	r3, r2, r3
   1b12a:	3b04      	subs	r3, #4
}
   1b12c:	4618      	mov	r0, r3
   1b12e:	3714      	adds	r7, #20
   1b130:	46bd      	mov	sp, r7
   1b132:	bc80      	pop	{r7}
   1b134:	4770      	bx	lr

0001b136 <build_epilogue>:

/* restore callee saved registers. */
static void build_epilogue(jit_state *state) {
   1b136:	b580      	push	{r7, lr}
   1b138:	b082      	sub	sp, #8
   1b13a:	af00      	add	r7, sp, #0
   1b13c:	6078      	str	r0, [r7, #4]
    /* Restore callee saved registers. */
	// emit(ARM_MOV_R(ARM_SP, ARM_FP), ctx);
    _emit_mov_reg(state, ARM_FP, ARM_SP);
   1b13e:	220d      	movs	r2, #13
   1b140:	210b      	movs	r1, #11
   1b142:	6878      	ldr	r0, [r7, #4]
   1b144:	f7ff ff4a 	bl	1afdc <_emit_mov_reg>
	// emit(ARM_POP(CALLEE_POP_MASK), ctx);
    emit4(state, _thumb32_POPW_T2(CALLEE_POP_MASK));
   1b148:	f648 30f0 	movw	r0, #35824	; 0x8bf0
   1b14c:	f7fe ffa1 	bl	1a092 <_thumb32_POPW_T2>
   1b150:	4603      	mov	r3, r0
   1b152:	4619      	mov	r1, r3
   1b154:	6878      	ldr	r0, [r7, #4]
   1b156:	f7ff f9d6 	bl	1a506 <emit4>
}
   1b15a:	bf00      	nop
   1b15c:	3708      	adds	r7, #8
   1b15e:	46bd      	mov	sp, r7
   1b160:	bd80      	pop	{r7, pc}

0001b162 <jit_compile>:
    emit4(state, _thumb32_ORRW_REG_T2(0, 0, 1, 0, SRTYPE_LSL, FLAG_S));
    _emit_b_cond(state, 1, COND_NE);
    emit_mov_imm(state, 0, 2);
}

void jit_compile(jit_state *state) {
   1b162:	b580      	push	{r7, lr}
   1b164:	b082      	sub	sp, #8
   1b166:	af00      	add	r7, sp, #0
   1b168:	6078      	str	r0, [r7, #4]
    // test_ldr(state);
    // test_alu(state);
    // return state;
    // PrePass: clac offset
	state->idx = 0;
   1b16a:	687b      	ldr	r3, [r7, #4]
   1b16c:	2200      	movs	r2, #0
   1b16e:	611a      	str	r2, [r3, #16]
    state->needGen = false;
   1b170:	687b      	ldr	r3, [r7, #4]
   1b172:	2200      	movs	r2, #0
   1b174:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    build_prologue(state);
   1b178:	6878      	ldr	r0, [r7, #4]
   1b17a:	f7ee fa05 	bl	9588 <build_prologue>
    build_body(state);
   1b17e:	6878      	ldr	r0, [r7, #4]
   1b180:	f7ee fa52 	bl	9628 <build_body>
    state->epilogue_offset = state->idx;
   1b184:	687b      	ldr	r3, [r7, #4]
   1b186:	691a      	ldr	r2, [r3, #16]
   1b188:	687b      	ldr	r3, [r7, #4]
   1b18a:	615a      	str	r2, [r3, #20]
    // for (int i = 0; i < state->inst_num; i++) {
    //     DEBUG_LOG("build offset: i=%d %d\n", i, state->offsets[i]);
    // }
    // GenPass: generate jit code
    state->idx = 0;
   1b18c:	687b      	ldr	r3, [r7, #4]
   1b18e:	2200      	movs	r2, #0
   1b190:	611a      	str	r2, [r3, #16]
    state->needGen = true;
   1b192:	687b      	ldr	r3, [r7, #4]
   1b194:	2201      	movs	r2, #1
   1b196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    // DEBUG_LOG("epil: %d\n", epilogue_offset(state));
    build_prologue(state);
   1b19a:	6878      	ldr	r0, [r7, #4]
   1b19c:	f7ee f9f4 	bl	9588 <build_prologue>

    // test_branch(state);
    build_body(state);
   1b1a0:	6878      	ldr	r0, [r7, #4]
   1b1a2:	f7ee fa41 	bl	9628 <build_body>
    // DEBUG_LOG("epilogue_offset PASS1:%d PASS2:%d\n", state->epilogue_offset, state->idx);
    build_epilogue(state);
   1b1a6:	6878      	ldr	r0, [r7, #4]
   1b1a8:	f7ff ffc5 	bl	1b136 <build_epilogue>

    // return state;
}
   1b1ac:	bf00      	nop
   1b1ae:	3708      	adds	r7, #8
   1b1b0:	46bd      	mov	sp, r7
   1b1b2:	bd80      	pop	{r7, pc}

0001b1b4 <k_thread_start>:

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
   1b1b4:	b580      	push	{r7, lr}
   1b1b6:	b082      	sub	sp, #8
   1b1b8:	af00      	add	r7, sp, #0
   1b1ba:	6078      	str	r0, [r7, #4]
   1b1bc:	6878      	ldr	r0, [r7, #4]
   1b1be:	f7fc fe0b 	bl	17dd8 <z_impl_k_thread_start>
   1b1c2:	bf00      	nop
   1b1c4:	3708      	adds	r7, #8
   1b1c6:	46bd      	mov	sp, r7
   1b1c8:	bd80      	pop	{r7, pc}

0001b1ca <z_snode_next_peek>:
}

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
   1b1ca:	b480      	push	{r7}
   1b1cc:	b083      	sub	sp, #12
   1b1ce:	af00      	add	r7, sp, #0
   1b1d0:	6078      	str	r0, [r7, #4]
	return node->next;
   1b1d2:	687b      	ldr	r3, [r7, #4]
   1b1d4:	681b      	ldr	r3, [r3, #0]
}
   1b1d6:	4618      	mov	r0, r3
   1b1d8:	370c      	adds	r7, #12
   1b1da:	46bd      	mov	sp, r7
   1b1dc:	bc80      	pop	{r7}
   1b1de:	4770      	bx	lr

0001b1e0 <sys_slist_peek_head>:
 * @param list A point on the list to peek the first node from
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
   1b1e0:	b480      	push	{r7}
   1b1e2:	b083      	sub	sp, #12
   1b1e4:	af00      	add	r7, sp, #0
   1b1e6:	6078      	str	r0, [r7, #4]
	return list->head;
   1b1e8:	687b      	ldr	r3, [r7, #4]
   1b1ea:	681b      	ldr	r3, [r3, #0]
}
   1b1ec:	4618      	mov	r0, r3
   1b1ee:	370c      	adds	r7, #12
   1b1f0:	46bd      	mov	sp, r7
   1b1f2:	bc80      	pop	{r7}
   1b1f4:	4770      	bx	lr

0001b1f6 <sys_slist_peek_next_no_check>:
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b1f6:	b580      	push	{r7, lr}
   1b1f8:	b082      	sub	sp, #8
   1b1fa:	af00      	add	r7, sp, #0
   1b1fc:	6078      	str	r0, [r7, #4]
   1b1fe:	6878      	ldr	r0, [r7, #4]
   1b200:	f7ff ffe3 	bl	1b1ca <z_snode_next_peek>
   1b204:	4603      	mov	r3, r0
   1b206:	4618      	mov	r0, r3
   1b208:	3708      	adds	r7, #8
   1b20a:	46bd      	mov	sp, r7
   1b20c:	bd80      	pop	{r7, pc}

0001b20e <sys_slist_peek_next>:
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   1b20e:	b580      	push	{r7, lr}
   1b210:	b082      	sub	sp, #8
   1b212:	af00      	add	r7, sp, #0
   1b214:	6078      	str	r0, [r7, #4]
   1b216:	687b      	ldr	r3, [r7, #4]
   1b218:	2b00      	cmp	r3, #0
   1b21a:	d004      	beq.n	1b226 <sys_slist_peek_next+0x18>
   1b21c:	6878      	ldr	r0, [r7, #4]
   1b21e:	f7ff ffea 	bl	1b1f6 <sys_slist_peek_next_no_check>
   1b222:	4603      	mov	r3, r0
   1b224:	e000      	b.n	1b228 <sys_slist_peek_next+0x1a>
   1b226:	2300      	movs	r3, #0
   1b228:	4618      	mov	r0, r3
   1b22a:	3708      	adds	r7, #8
   1b22c:	46bd      	mov	sp, r7
   1b22e:	bd80      	pop	{r7, pc}

0001b230 <_is_user_context>:
 * Indicate whether the CPU is currently in user mode
 *
 * @return true if the CPU is currently running with user permissions
 */
static inline bool _is_user_context(void)
{
   1b230:	b480      	push	{r7}
   1b232:	af00      	add	r7, sp, #0
#ifdef CONFIG_USERSPACE
	return z_arch_is_user_context();
#else
	return false;
   1b234:	2300      	movs	r3, #0
#endif
}
   1b236:	4618      	mov	r0, r3
   1b238:	46bd      	mov	sp, r7
   1b23a:	bc80      	pop	{r7}
   1b23c:	4770      	bx	lr

0001b23e <socket>:

#define pollfd zsock_pollfd

#if !defined(CONFIG_NET_SOCKETS_OFFLOAD)
static inline int socket(int family, int type, int proto)
{
   1b23e:	b580      	push	{r7, lr}
   1b240:	b084      	sub	sp, #16
   1b242:	af00      	add	r7, sp, #0
   1b244:	60f8      	str	r0, [r7, #12]
   1b246:	60b9      	str	r1, [r7, #8]
   1b248:	607a      	str	r2, [r7, #4]
	return zsock_socket(family, type, proto);
   1b24a:	687a      	ldr	r2, [r7, #4]
   1b24c:	68b9      	ldr	r1, [r7, #8]
   1b24e:	68f8      	ldr	r0, [r7, #12]
   1b250:	f000 f841 	bl	1b2d6 <zsock_socket>
   1b254:	4603      	mov	r3, r0
}
   1b256:	4618      	mov	r0, r3
   1b258:	3710      	adds	r7, #16
   1b25a:	46bd      	mov	sp, r7
   1b25c:	bd80      	pop	{r7, pc}

0001b25e <bind>:
{
	return zsock_shutdown(sock, how);
}

static inline int bind(int sock, const struct sockaddr *addr, socklen_t addrlen)
{
   1b25e:	b580      	push	{r7, lr}
   1b260:	b084      	sub	sp, #16
   1b262:	af00      	add	r7, sp, #0
   1b264:	60f8      	str	r0, [r7, #12]
   1b266:	60b9      	str	r1, [r7, #8]
   1b268:	607a      	str	r2, [r7, #4]
	return zsock_bind(sock, addr, addrlen);
   1b26a:	687a      	ldr	r2, [r7, #4]
   1b26c:	68b9      	ldr	r1, [r7, #8]
   1b26e:	68f8      	ldr	r0, [r7, #12]
   1b270:	f000 f841 	bl	1b2f6 <zsock_bind>
   1b274:	4603      	mov	r3, r0
}
   1b276:	4618      	mov	r0, r3
   1b278:	3710      	adds	r7, #16
   1b27a:	46bd      	mov	sp, r7
   1b27c:	bd80      	pop	{r7, pc}

0001b27e <sendto>:
#define fcntl zsock_fcntl

static inline ssize_t sendto(int sock, const void *buf, size_t len, int flags,
			     const struct sockaddr *dest_addr,
			     socklen_t addrlen)
{
   1b27e:	b580      	push	{r7, lr}
   1b280:	b086      	sub	sp, #24
   1b282:	af02      	add	r7, sp, #8
   1b284:	60f8      	str	r0, [r7, #12]
   1b286:	60b9      	str	r1, [r7, #8]
   1b288:	607a      	str	r2, [r7, #4]
   1b28a:	603b      	str	r3, [r7, #0]
	return zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1b28c:	69fb      	ldr	r3, [r7, #28]
   1b28e:	9301      	str	r3, [sp, #4]
   1b290:	69bb      	ldr	r3, [r7, #24]
   1b292:	9300      	str	r3, [sp, #0]
   1b294:	683b      	ldr	r3, [r7, #0]
   1b296:	687a      	ldr	r2, [r7, #4]
   1b298:	68b9      	ldr	r1, [r7, #8]
   1b29a:	68f8      	ldr	r0, [r7, #12]
   1b29c:	f000 f83b 	bl	1b316 <zsock_sendto>
   1b2a0:	4603      	mov	r3, r0
}
   1b2a2:	4618      	mov	r0, r3
   1b2a4:	3710      	adds	r7, #16
   1b2a6:	46bd      	mov	sp, r7
   1b2a8:	bd80      	pop	{r7, pc}

0001b2aa <recvfrom>:

static inline ssize_t recvfrom(int sock, void *buf, size_t max_len, int flags,
			       struct sockaddr *src_addr, socklen_t *addrlen)
{
   1b2aa:	b580      	push	{r7, lr}
   1b2ac:	b086      	sub	sp, #24
   1b2ae:	af02      	add	r7, sp, #8
   1b2b0:	60f8      	str	r0, [r7, #12]
   1b2b2:	60b9      	str	r1, [r7, #8]
   1b2b4:	607a      	str	r2, [r7, #4]
   1b2b6:	603b      	str	r3, [r7, #0]
	return zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1b2b8:	69fb      	ldr	r3, [r7, #28]
   1b2ba:	9301      	str	r3, [sp, #4]
   1b2bc:	69bb      	ldr	r3, [r7, #24]
   1b2be:	9300      	str	r3, [sp, #0]
   1b2c0:	683b      	ldr	r3, [r7, #0]
   1b2c2:	687a      	ldr	r2, [r7, #4]
   1b2c4:	68b9      	ldr	r1, [r7, #8]
   1b2c6:	68f8      	ldr	r0, [r7, #12]
   1b2c8:	f000 f83b 	bl	1b342 <zsock_recvfrom>
   1b2cc:	4603      	mov	r3, r0
}
   1b2ce:	4618      	mov	r0, r3
   1b2d0:	3710      	adds	r7, #16
   1b2d2:	46bd      	mov	sp, r7
   1b2d4:	bd80      	pop	{r7, pc}

0001b2d6 <zsock_socket>:

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE3(K_SYSCALL_ZSOCK_SOCKET, zsock_socket, int, int, family, int, type, int, proto)
   1b2d6:	b580      	push	{r7, lr}
   1b2d8:	b084      	sub	sp, #16
   1b2da:	af00      	add	r7, sp, #0
   1b2dc:	60f8      	str	r0, [r7, #12]
   1b2de:	60b9      	str	r1, [r7, #8]
   1b2e0:	607a      	str	r2, [r7, #4]
   1b2e2:	687a      	ldr	r2, [r7, #4]
   1b2e4:	68b9      	ldr	r1, [r7, #8]
   1b2e6:	68f8      	ldr	r0, [r7, #12]
   1b2e8:	f003 ff94 	bl	1f214 <z_impl_zsock_socket>
   1b2ec:	4603      	mov	r3, r0
   1b2ee:	4618      	mov	r0, r3
   1b2f0:	3710      	adds	r7, #16
   1b2f2:	46bd      	mov	sp, r7
   1b2f4:	bd80      	pop	{r7, pc}

0001b2f6 <zsock_bind>:

K_SYSCALL_DECLARE1(K_SYSCALL_ZSOCK_CLOSE, zsock_close, int, int, sock)

K_SYSCALL_DECLARE2(K_SYSCALL_ZSOCK_SHUTDOWN, zsock_shutdown, int, int, sock, int, how)

K_SYSCALL_DECLARE3(K_SYSCALL_ZSOCK_BIND, zsock_bind, int, int, sock, const struct sockaddr *, addr, socklen_t, addrlen)
   1b2f6:	b580      	push	{r7, lr}
   1b2f8:	b084      	sub	sp, #16
   1b2fa:	af00      	add	r7, sp, #0
   1b2fc:	60f8      	str	r0, [r7, #12]
   1b2fe:	60b9      	str	r1, [r7, #8]
   1b300:	607a      	str	r2, [r7, #4]
   1b302:	687a      	ldr	r2, [r7, #4]
   1b304:	68b9      	ldr	r1, [r7, #8]
   1b306:	68f8      	ldr	r0, [r7, #12]
   1b308:	f004 f811 	bl	1f32e <z_impl_zsock_bind>
   1b30c:	4603      	mov	r3, r0
   1b30e:	4618      	mov	r0, r3
   1b310:	3710      	adds	r7, #16
   1b312:	46bd      	mov	sp, r7
   1b314:	bd80      	pop	{r7, pc}

0001b316 <zsock_sendto>:

K_SYSCALL_DECLARE2(K_SYSCALL_ZSOCK_LISTEN, zsock_listen, int, int, sock, int, backlog)

K_SYSCALL_DECLARE3(K_SYSCALL_ZSOCK_ACCEPT, zsock_accept, int, int, sock, struct sockaddr *, addr, socklen_t *, addrlen)

K_SYSCALL_DECLARE6(K_SYSCALL_ZSOCK_SENDTO, zsock_sendto, ssize_t, int, sock, const void *, buf, size_t, len, int, flags, const struct sockaddr *, dest_addr, socklen_t, addrlen)
   1b316:	b580      	push	{r7, lr}
   1b318:	b086      	sub	sp, #24
   1b31a:	af02      	add	r7, sp, #8
   1b31c:	60f8      	str	r0, [r7, #12]
   1b31e:	60b9      	str	r1, [r7, #8]
   1b320:	607a      	str	r2, [r7, #4]
   1b322:	603b      	str	r3, [r7, #0]
   1b324:	69fb      	ldr	r3, [r7, #28]
   1b326:	9301      	str	r3, [sp, #4]
   1b328:	69bb      	ldr	r3, [r7, #24]
   1b32a:	9300      	str	r3, [sp, #0]
   1b32c:	683b      	ldr	r3, [r7, #0]
   1b32e:	687a      	ldr	r2, [r7, #4]
   1b330:	68b9      	ldr	r1, [r7, #8]
   1b332:	68f8      	ldr	r0, [r7, #12]
   1b334:	f004 f81d 	bl	1f372 <z_impl_zsock_sendto>
   1b338:	4603      	mov	r3, r0
   1b33a:	4618      	mov	r0, r3
   1b33c:	3710      	adds	r7, #16
   1b33e:	46bd      	mov	sp, r7
   1b340:	bd80      	pop	{r7, pc}

0001b342 <zsock_recvfrom>:

K_SYSCALL_DECLARE6(K_SYSCALL_ZSOCK_RECVFROM, zsock_recvfrom, ssize_t, int, sock, void *, buf, size_t, max_len, int, flags, struct sockaddr *, src_addr, socklen_t *, addrlen)
   1b342:	b580      	push	{r7, lr}
   1b344:	b086      	sub	sp, #24
   1b346:	af02      	add	r7, sp, #8
   1b348:	60f8      	str	r0, [r7, #12]
   1b34a:	60b9      	str	r1, [r7, #8]
   1b34c:	607a      	str	r2, [r7, #4]
   1b34e:	603b      	str	r3, [r7, #0]
   1b350:	69fb      	ldr	r3, [r7, #28]
   1b352:	9301      	str	r3, [sp, #4]
   1b354:	69bb      	ldr	r3, [r7, #24]
   1b356:	9300      	str	r3, [sp, #0]
   1b358:	683b      	ldr	r3, [r7, #0]
   1b35a:	687a      	ldr	r2, [r7, #4]
   1b35c:	68b9      	ldr	r1, [r7, #8]
   1b35e:	68f8      	ldr	r0, [r7, #12]
   1b360:	f004 fa6f 	bl	1f842 <z_impl_zsock_recvfrom>
   1b364:	4603      	mov	r3, r0
   1b366:	4618      	mov	r0, r3
   1b368:	3710      	adds	r7, #16
   1b36a:	46bd      	mov	sp, r7
   1b36c:	bd80      	pop	{r7, pc}

0001b36e <coap_block_size_to_bytes>:
 *
 * @return The size in bytes that the block_size represents
 */
static inline u16_t coap_block_size_to_bytes(
	enum coap_block_size block_size)
{
   1b36e:	b480      	push	{r7}
   1b370:	b083      	sub	sp, #12
   1b372:	af00      	add	r7, sp, #0
   1b374:	4603      	mov	r3, r0
   1b376:	71fb      	strb	r3, [r7, #7]
	return (1 << (block_size + 4));
   1b378:	79fb      	ldrb	r3, [r7, #7]
   1b37a:	3304      	adds	r3, #4
   1b37c:	2201      	movs	r2, #1
   1b37e:	fa02 f303 	lsl.w	r3, r2, r3
   1b382:	b29b      	uxth	r3, r3
}
   1b384:	4618      	mov	r0, r3
   1b386:	370c      	adds	r7, #12
   1b388:	46bd      	mov	sp, r7
   1b38a:	bc80      	pop	{r7}
   1b38c:	4770      	bx	lr

0001b38e <net_hexdump>:
	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
}

static inline void net_hexdump(const char *str,
			       const u8_t *packet, size_t length)
{
   1b38e:	b580      	push	{r7, lr}
   1b390:	b086      	sub	sp, #24
   1b392:	af00      	add	r7, sp, #0
   1b394:	60f8      	str	r0, [r7, #12]
   1b396:	60b9      	str	r1, [r7, #8]
   1b398:	607a      	str	r2, [r7, #4]
	if (!length) {
   1b39a:	687b      	ldr	r3, [r7, #4]
   1b39c:	2b00      	cmp	r3, #0
   1b39e:	d104      	bne.n	1b3aa <net_hexdump+0x1c>
		LOG_DBG("%s zero-length packet", str);
   1b3a0:	f7ff ff46 	bl	1b230 <_is_user_context>
   1b3a4:	4603      	mov	r3, r0
   1b3a6:	75fb      	strb	r3, [r7, #23]
		return;
   1b3a8:	e003      	b.n	1b3b2 <net_hexdump+0x24>
	}

	LOG_HEXDUMP_DBG(packet, length, str);
   1b3aa:	f7ff ff41 	bl	1b230 <_is_user_context>
   1b3ae:	4603      	mov	r3, r0
   1b3b0:	75bb      	strb	r3, [r7, #22]
}
   1b3b2:	3718      	adds	r7, #24
   1b3b4:	46bd      	mov	sp, r7
   1b3b6:	bd80      	pop	{r7, pc}

0001b3b8 <well_known_core_get>:
{
   1b3b8:	b580      	push	{r7, lr}
   1b3ba:	b08c      	sub	sp, #48	; 0x30
   1b3bc:	af02      	add	r7, sp, #8
   1b3be:	60f8      	str	r0, [r7, #12]
   1b3c0:	60b9      	str	r1, [r7, #8]
   1b3c2:	607a      	str	r2, [r7, #4]
   1b3c4:	603b      	str	r3, [r7, #0]
	data = (u8_t *)k_malloc(MAX_COAP_MSG_LEN);
   1b3c6:	f44f 7080 	mov.w	r0, #256	; 0x100
   1b3ca:	f7fb facf 	bl	1696c <k_malloc>
   1b3ce:	6238      	str	r0, [r7, #32]
	if (!data) {
   1b3d0:	6a3b      	ldr	r3, [r7, #32]
   1b3d2:	2b00      	cmp	r3, #0
   1b3d4:	d102      	bne.n	1b3dc <well_known_core_get+0x24>
		return -ENOMEM;
   1b3d6:	f06f 030b 	mvn.w	r3, #11
   1b3da:	e01b      	b.n	1b414 <well_known_core_get+0x5c>
	r = coap_well_known_core_get(resource, request, &response,
   1b3dc:	f107 0210 	add.w	r2, r7, #16
   1b3e0:	f44f 7380 	mov.w	r3, #256	; 0x100
   1b3e4:	9300      	str	r3, [sp, #0]
   1b3e6:	6a3b      	ldr	r3, [r7, #32]
   1b3e8:	68b9      	ldr	r1, [r7, #8]
   1b3ea:	68f8      	ldr	r0, [r7, #12]
   1b3ec:	f7f3 f966 	bl	e6bc <coap_well_known_core_get>
   1b3f0:	6278      	str	r0, [r7, #36]	; 0x24
	if (r < 0) {
   1b3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b3f4:	2b00      	cmp	r3, #0
   1b3f6:	db08      	blt.n	1b40a <well_known_core_get+0x52>
	r = send_coap_reply(&response, addr, addr_len);
   1b3f8:	f107 0310 	add.w	r3, r7, #16
   1b3fc:	683a      	ldr	r2, [r7, #0]
   1b3fe:	6879      	ldr	r1, [r7, #4]
   1b400:	4618      	mov	r0, r3
   1b402:	f7ee f9f5 	bl	97f0 <send_coap_reply>
   1b406:	6278      	str	r0, [r7, #36]	; 0x24
   1b408:	e000      	b.n	1b40c <well_known_core_get+0x54>
		goto end;
   1b40a:	bf00      	nop
	k_free(data);
   1b40c:	6a38      	ldr	r0, [r7, #32]
   1b40e:	f00e fde0 	bl	29fd2 <k_free>
	return r;
   1b412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1b414:	4618      	mov	r0, r3
   1b416:	3728      	adds	r7, #40	; 0x28
   1b418:	46bd      	mov	sp, r7
   1b41a:	bd80      	pop	{r7, pc}

0001b41c <test_del>:
{
   1b41c:	b580      	push	{r7, lr}
   1b41e:	b09c      	sub	sp, #112	; 0x70
   1b420:	af06      	add	r7, sp, #24
   1b422:	60f8      	str	r0, [r7, #12]
   1b424:	60b9      	str	r1, [r7, #8]
   1b426:	607a      	str	r2, [r7, #4]
   1b428:	603b      	str	r3, [r7, #0]
	code = coap_header_get_code(request);
   1b42a:	68b8      	ldr	r0, [r7, #8]
   1b42c:	f002 fd1e 	bl	1de6c <coap_header_get_code>
   1b430:	4603      	mov	r3, r0
   1b432:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	type = coap_header_get_type(request);
   1b436:	68b8      	ldr	r0, [r7, #8]
   1b438:	f002 fcc5 	bl	1ddc6 <coap_header_get_type>
   1b43c:	4603      	mov	r3, r0
   1b43e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	id = coap_header_get_id(request);
   1b442:	68b8      	ldr	r0, [r7, #8]
   1b444:	f002 fd3f 	bl	1dec6 <coap_header_get_id>
   1b448:	4603      	mov	r3, r0
   1b44a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	tkl = coap_header_get_token(request, token);
   1b44e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1b452:	4619      	mov	r1, r3
   1b454:	68b8      	ldr	r0, [r7, #8]
   1b456:	f002 fce5 	bl	1de24 <coap_header_get_token>
   1b45a:	4603      	mov	r3, r0
   1b45c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	LOG_INF("*******");
   1b460:	f7ff fee6 	bl	1b230 <_is_user_context>
   1b464:	4603      	mov	r3, r0
   1b466:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	LOG_INF("type: %u code %u id %u", type, code, id);
   1b46a:	f7ff fee1 	bl	1b230 <_is_user_context>
   1b46e:	4603      	mov	r3, r0
   1b470:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_INF("*******");
   1b474:	f7ff fedc 	bl	1b230 <_is_user_context>
   1b478:	4603      	mov	r3, r0
   1b47a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	if (type == COAP_TYPE_CON) {
   1b47e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
   1b482:	2b00      	cmp	r3, #0
   1b484:	d103      	bne.n	1b48e <test_del+0x72>
		type = COAP_TYPE_ACK;
   1b486:	2302      	movs	r3, #2
   1b488:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
   1b48c:	e002      	b.n	1b494 <test_del+0x78>
		type = COAP_TYPE_NON_CON;
   1b48e:	2301      	movs	r3, #1
   1b490:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	data = (u8_t *)k_malloc(MAX_COAP_MSG_LEN);
   1b494:	f44f 7080 	mov.w	r0, #256	; 0x100
   1b498:	f7fb fa68 	bl	1696c <k_malloc>
   1b49c:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (!data) {
   1b49e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1b4a0:	2b00      	cmp	r3, #0
   1b4a2:	d102      	bne.n	1b4aa <test_del+0x8e>
		return -ENOMEM;
   1b4a4:	f06f 030b 	mvn.w	r3, #11
   1b4a8:	e027      	b.n	1b4fa <test_del+0xde>
	r = coap_packet_init(&response, data, MAX_COAP_MSG_LEN,
   1b4aa:	f107 0034 	add.w	r0, r7, #52	; 0x34
   1b4ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
   1b4b2:	9304      	str	r3, [sp, #16]
   1b4b4:	2342      	movs	r3, #66	; 0x42
   1b4b6:	9303      	str	r3, [sp, #12]
   1b4b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1b4bc:	9302      	str	r3, [sp, #8]
   1b4be:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
   1b4c2:	9301      	str	r3, [sp, #4]
   1b4c4:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
   1b4c8:	9300      	str	r3, [sp, #0]
   1b4ca:	2301      	movs	r3, #1
   1b4cc:	f44f 7280 	mov.w	r2, #256	; 0x100
   1b4d0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   1b4d2:	f001 ff8e 	bl	1d3f2 <coap_packet_init>
   1b4d6:	6578      	str	r0, [r7, #84]	; 0x54
	if (r < 0) {
   1b4d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1b4da:	2b00      	cmp	r3, #0
   1b4dc:	db08      	blt.n	1b4f0 <test_del+0xd4>
	r = send_coap_reply(&response, addr, addr_len);
   1b4de:	f107 0334 	add.w	r3, r7, #52	; 0x34
   1b4e2:	683a      	ldr	r2, [r7, #0]
   1b4e4:	6879      	ldr	r1, [r7, #4]
   1b4e6:	4618      	mov	r0, r3
   1b4e8:	f7ee f982 	bl	97f0 <send_coap_reply>
   1b4ec:	6578      	str	r0, [r7, #84]	; 0x54
   1b4ee:	e000      	b.n	1b4f2 <test_del+0xd6>
		goto end;
   1b4f0:	bf00      	nop
	k_free(data);
   1b4f2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   1b4f4:	f00e fd6d 	bl	29fd2 <k_free>
	return r;
   1b4f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
   1b4fa:	4618      	mov	r0, r3
   1b4fc:	3758      	adds	r7, #88	; 0x58
   1b4fe:	46bd      	mov	sp, r7
   1b500:	bd80      	pop	{r7, pc}

0001b502 <get_option_int>:
{
   1b502:	b580      	push	{r7, lr}
   1b504:	b088      	sub	sp, #32
   1b506:	af00      	add	r7, sp, #0
   1b508:	6078      	str	r0, [r7, #4]
   1b50a:	460b      	mov	r3, r1
   1b50c:	70fb      	strb	r3, [r7, #3]
	r = coap_find_options(pkt, opt, &option, 1);
   1b50e:	78fb      	ldrb	r3, [r7, #3]
   1b510:	b299      	uxth	r1, r3
   1b512:	f107 020c 	add.w	r2, r7, #12
   1b516:	2301      	movs	r3, #1
   1b518:	6878      	ldr	r0, [r7, #4]
   1b51a:	f002 fc05 	bl	1dd28 <coap_find_options>
   1b51e:	61f8      	str	r0, [r7, #28]
	if (r <= 0) {
   1b520:	69fb      	ldr	r3, [r7, #28]
   1b522:	2b00      	cmp	r3, #0
   1b524:	dc02      	bgt.n	1b52c <get_option_int+0x2a>
		return -ENOENT;
   1b526:	f06f 0301 	mvn.w	r3, #1
   1b52a:	e005      	b.n	1b538 <get_option_int+0x36>
	return coap_option_value_to_int(&option);
   1b52c:	f107 030c 	add.w	r3, r7, #12
   1b530:	4618      	mov	r0, r3
   1b532:	f7f2 fec9 	bl	e2c8 <coap_option_value_to_int>
   1b536:	4603      	mov	r3, r0
}
   1b538:	4618      	mov	r0, r3
   1b53a:	3720      	adds	r7, #32
   1b53c:	46bd      	mov	sp, r7
   1b53e:	bd80      	pop	{r7, pc}

0001b540 <obs_notify>:
{
   1b540:	b590      	push	{r4, r7, lr}
   1b542:	b087      	sub	sp, #28
   1b544:	af04      	add	r7, sp, #16
   1b546:	6078      	str	r0, [r7, #4]
   1b548:	6039      	str	r1, [r7, #0]
	send_notification_packet(&observer->addr,
   1b54a:	683b      	ldr	r3, [r7, #0]
   1b54c:	1d18      	adds	r0, r3, #4
				 resource->age, 0,
   1b54e:	687b      	ldr	r3, [r7, #4]
   1b550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	send_notification_packet(&observer->addr,
   1b552:	b29c      	uxth	r4, r3
				 observer->token, observer->tkl, false);
   1b554:	683b      	ldr	r3, [r7, #0]
   1b556:	330c      	adds	r3, #12
	send_notification_packet(&observer->addr,
   1b558:	683a      	ldr	r2, [r7, #0]
   1b55a:	7d12      	ldrb	r2, [r2, #20]
   1b55c:	2100      	movs	r1, #0
   1b55e:	9102      	str	r1, [sp, #8]
   1b560:	9201      	str	r2, [sp, #4]
   1b562:	9300      	str	r3, [sp, #0]
   1b564:	2300      	movs	r3, #0
   1b566:	4622      	mov	r2, r4
   1b568:	2108      	movs	r1, #8
   1b56a:	f7ef f935 	bl	a7d8 <send_notification_packet>
}
   1b56e:	bf00      	nop
   1b570:	370c      	adds	r7, #12
   1b572:	46bd      	mov	sp, r7
   1b574:	bd90      	pop	{r4, r7, pc}

0001b576 <find_resouce_by_observer>:
{
   1b576:	b580      	push	{r7, lr}
   1b578:	b084      	sub	sp, #16
   1b57a:	af00      	add	r7, sp, #0
   1b57c:	6078      	str	r0, [r7, #4]
   1b57e:	6039      	str	r1, [r7, #0]
	for (r = resources; r && r->path; r++) {
   1b580:	687b      	ldr	r3, [r7, #4]
   1b582:	60fb      	str	r3, [r7, #12]
   1b584:	e016      	b.n	1b5b4 <find_resouce_by_observer+0x3e>
		SYS_SLIST_FOR_EACH_NODE(&r->observers, node) {
   1b586:	68fb      	ldr	r3, [r7, #12]
   1b588:	331c      	adds	r3, #28
   1b58a:	4618      	mov	r0, r3
   1b58c:	f7ff fe28 	bl	1b1e0 <sys_slist_peek_head>
   1b590:	60b8      	str	r0, [r7, #8]
   1b592:	e009      	b.n	1b5a8 <find_resouce_by_observer+0x32>
			if (&o->list == node) {
   1b594:	683b      	ldr	r3, [r7, #0]
   1b596:	68ba      	ldr	r2, [r7, #8]
   1b598:	429a      	cmp	r2, r3
   1b59a:	d101      	bne.n	1b5a0 <find_resouce_by_observer+0x2a>
				return r;
   1b59c:	68fb      	ldr	r3, [r7, #12]
   1b59e:	e011      	b.n	1b5c4 <find_resouce_by_observer+0x4e>
		SYS_SLIST_FOR_EACH_NODE(&r->observers, node) {
   1b5a0:	68b8      	ldr	r0, [r7, #8]
   1b5a2:	f7ff fe34 	bl	1b20e <sys_slist_peek_next>
   1b5a6:	60b8      	str	r0, [r7, #8]
   1b5a8:	68bb      	ldr	r3, [r7, #8]
   1b5aa:	2b00      	cmp	r3, #0
   1b5ac:	d1f2      	bne.n	1b594 <find_resouce_by_observer+0x1e>
	for (r = resources; r && r->path; r++) {
   1b5ae:	68fb      	ldr	r3, [r7, #12]
   1b5b0:	3328      	adds	r3, #40	; 0x28
   1b5b2:	60fb      	str	r3, [r7, #12]
   1b5b4:	68fb      	ldr	r3, [r7, #12]
   1b5b6:	2b00      	cmp	r3, #0
   1b5b8:	d003      	beq.n	1b5c2 <find_resouce_by_observer+0x4c>
   1b5ba:	68fb      	ldr	r3, [r7, #12]
   1b5bc:	695b      	ldr	r3, [r3, #20]
   1b5be:	2b00      	cmp	r3, #0
   1b5c0:	d1e1      	bne.n	1b586 <find_resouce_by_observer+0x10>
	return NULL;
   1b5c2:	2300      	movs	r3, #0
}
   1b5c4:	4618      	mov	r0, r3
   1b5c6:	3710      	adds	r7, #16
   1b5c8:	46bd      	mov	sp, r7
   1b5ca:	bd80      	pop	{r7, pc}

0001b5cc <k_mutex_lock>:

K_SYSCALL_DECLARE3(K_SYSCALL_K_STACK_POP, k_stack_pop, int, struct k_stack *, stack, u32_t *, data, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   1b5cc:	b580      	push	{r7, lr}
   1b5ce:	b082      	sub	sp, #8
   1b5d0:	af00      	add	r7, sp, #0
   1b5d2:	6078      	str	r0, [r7, #4]
   1b5d4:	6039      	str	r1, [r7, #0]
   1b5d6:	6839      	ldr	r1, [r7, #0]
   1b5d8:	6878      	ldr	r0, [r7, #4]
   1b5da:	f7fb fa01 	bl	169e0 <z_impl_k_mutex_lock>
   1b5de:	4603      	mov	r3, r0
   1b5e0:	4618      	mov	r0, r3
   1b5e2:	3708      	adds	r7, #8
   1b5e4:	46bd      	mov	sp, r7
   1b5e6:	bd80      	pop	{r7, pc}

0001b5e8 <k_mutex_unlock>:

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
   1b5e8:	b580      	push	{r7, lr}
   1b5ea:	b082      	sub	sp, #8
   1b5ec:	af00      	add	r7, sp, #0
   1b5ee:	6078      	str	r0, [r7, #4]
   1b5f0:	6878      	ldr	r0, [r7, #4]
   1b5f2:	f7fb fab3 	bl	16b5c <z_impl_k_mutex_unlock>
   1b5f6:	bf00      	nop
   1b5f8:	3708      	adds	r7, #8
   1b5fa:	46bd      	mov	sp, r7
   1b5fc:	bd80      	pop	{r7, pc}

0001b5fe <k_array_index_sanitize>:
 * @param index Untrusted array index which has been validated, but not used
 * @param array_size Size of the array
 * @return The original index value if < size, or 0
 */
static inline u32_t k_array_index_sanitize(u32_t index, u32_t array_size)
{
   1b5fe:	b480      	push	{r7}
   1b600:	b083      	sub	sp, #12
   1b602:	af00      	add	r7, sp, #0
   1b604:	6078      	str	r0, [r7, #4]
   1b606:	6039      	str	r1, [r7, #0]

	return index & mask;
#else
	ARG_UNUSED(array_size);

	return index;
   1b608:	687b      	ldr	r3, [r7, #4]
#endif /* CONFIG_BOUNDS_CHECK_BYPASS_MITIGATION */
}
   1b60a:	4618      	mov	r0, r3
   1b60c:	370c      	adds	r7, #12
   1b60e:	46bd      	mov	sp, r7
   1b610:	bc80      	pop	{r7}
   1b612:	4770      	bx	lr

0001b614 <sys_dlist_init>:
 *
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
   1b614:	b480      	push	{r7}
   1b616:	b083      	sub	sp, #12
   1b618:	af00      	add	r7, sp, #0
   1b61a:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
   1b61c:	687b      	ldr	r3, [r7, #4]
   1b61e:	687a      	ldr	r2, [r7, #4]
   1b620:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   1b622:	687b      	ldr	r3, [r7, #4]
   1b624:	687a      	ldr	r2, [r7, #4]
   1b626:	605a      	str	r2, [r3, #4]
}
   1b628:	bf00      	nop
   1b62a:	370c      	adds	r7, #12
   1b62c:	46bd      	mov	sp, r7
   1b62e:	bc80      	pop	{r7}
   1b630:	4770      	bx	lr

0001b632 <sys_dnode_init>:
 *
 * @return N/A
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
   1b632:	b480      	push	{r7}
   1b634:	b083      	sub	sp, #12
   1b636:	af00      	add	r7, sp, #0
   1b638:	6078      	str	r0, [r7, #4]
	node->next = NULL;
   1b63a:	687b      	ldr	r3, [r7, #4]
   1b63c:	2200      	movs	r2, #0
   1b63e:	601a      	str	r2, [r3, #0]
	node->prev = NULL;
   1b640:	687b      	ldr	r3, [r7, #4]
   1b642:	2200      	movs	r2, #0
   1b644:	605a      	str	r2, [r3, #4]
}
   1b646:	bf00      	nop
   1b648:	370c      	adds	r7, #12
   1b64a:	46bd      	mov	sp, r7
   1b64c:	bc80      	pop	{r7}
   1b64e:	4770      	bx	lr

0001b650 <sys_dlist_is_empty>:
 *
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
   1b650:	b480      	push	{r7}
   1b652:	b083      	sub	sp, #12
   1b654:	af00      	add	r7, sp, #0
   1b656:	6078      	str	r0, [r7, #4]
	return list->head == list;
   1b658:	687b      	ldr	r3, [r7, #4]
   1b65a:	681b      	ldr	r3, [r3, #0]
   1b65c:	687a      	ldr	r2, [r7, #4]
   1b65e:	429a      	cmp	r2, r3
   1b660:	bf0c      	ite	eq
   1b662:	2301      	moveq	r3, #1
   1b664:	2300      	movne	r3, #0
   1b666:	b2db      	uxtb	r3, r3
}
   1b668:	4618      	mov	r0, r3
   1b66a:	370c      	adds	r7, #12
   1b66c:	46bd      	mov	sp, r7
   1b66e:	bc80      	pop	{r7}
   1b670:	4770      	bx	lr

0001b672 <sys_dlist_append>:
 *
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
   1b672:	b480      	push	{r7}
   1b674:	b083      	sub	sp, #12
   1b676:	af00      	add	r7, sp, #0
   1b678:	6078      	str	r0, [r7, #4]
   1b67a:	6039      	str	r1, [r7, #0]
	node->next = list;
   1b67c:	683b      	ldr	r3, [r7, #0]
   1b67e:	687a      	ldr	r2, [r7, #4]
   1b680:	601a      	str	r2, [r3, #0]
	node->prev = list->tail;
   1b682:	687b      	ldr	r3, [r7, #4]
   1b684:	685a      	ldr	r2, [r3, #4]
   1b686:	683b      	ldr	r3, [r7, #0]
   1b688:	605a      	str	r2, [r3, #4]

	list->tail->next = node;
   1b68a:	687b      	ldr	r3, [r7, #4]
   1b68c:	685b      	ldr	r3, [r3, #4]
   1b68e:	683a      	ldr	r2, [r7, #0]
   1b690:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1b692:	687b      	ldr	r3, [r7, #4]
   1b694:	683a      	ldr	r2, [r7, #0]
   1b696:	605a      	str	r2, [r3, #4]
}
   1b698:	bf00      	nop
   1b69a:	370c      	adds	r7, #12
   1b69c:	46bd      	mov	sp, r7
   1b69e:	bc80      	pop	{r7}
   1b6a0:	4770      	bx	lr

0001b6a2 <sys_dlist_remove>:
 *
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
   1b6a2:	b580      	push	{r7, lr}
   1b6a4:	b082      	sub	sp, #8
   1b6a6:	af00      	add	r7, sp, #0
   1b6a8:	6078      	str	r0, [r7, #4]
	node->prev->next = node->next;
   1b6aa:	687b      	ldr	r3, [r7, #4]
   1b6ac:	685b      	ldr	r3, [r3, #4]
   1b6ae:	687a      	ldr	r2, [r7, #4]
   1b6b0:	6812      	ldr	r2, [r2, #0]
   1b6b2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1b6b4:	687b      	ldr	r3, [r7, #4]
   1b6b6:	681b      	ldr	r3, [r3, #0]
   1b6b8:	687a      	ldr	r2, [r7, #4]
   1b6ba:	6852      	ldr	r2, [r2, #4]
   1b6bc:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
   1b6be:	6878      	ldr	r0, [r7, #4]
   1b6c0:	f7ff ffb7 	bl	1b632 <sys_dnode_init>
}
   1b6c4:	bf00      	nop
   1b6c6:	3708      	adds	r7, #8
   1b6c8:	46bd      	mov	sp, r7
   1b6ca:	bd80      	pop	{r7, pc}

0001b6cc <sys_dlist_get>:
 *
 * @return the first node in the list, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
   1b6cc:	b580      	push	{r7, lr}
   1b6ce:	b084      	sub	sp, #16
   1b6d0:	af00      	add	r7, sp, #0
   1b6d2:	6078      	str	r0, [r7, #4]
	sys_dnode_t *node = NULL;
   1b6d4:	2300      	movs	r3, #0
   1b6d6:	60fb      	str	r3, [r7, #12]

	if (!sys_dlist_is_empty(list)) {
   1b6d8:	6878      	ldr	r0, [r7, #4]
   1b6da:	f7ff ffb9 	bl	1b650 <sys_dlist_is_empty>
   1b6de:	4603      	mov	r3, r0
   1b6e0:	f083 0301 	eor.w	r3, r3, #1
   1b6e4:	b2db      	uxtb	r3, r3
   1b6e6:	2b00      	cmp	r3, #0
   1b6e8:	d005      	beq.n	1b6f6 <sys_dlist_get+0x2a>
		node = list->head;
   1b6ea:	687b      	ldr	r3, [r7, #4]
   1b6ec:	681b      	ldr	r3, [r3, #0]
   1b6ee:	60fb      	str	r3, [r7, #12]
		sys_dlist_remove(node);
   1b6f0:	68f8      	ldr	r0, [r7, #12]
   1b6f2:	f7ff ffd6 	bl	1b6a2 <sys_dlist_remove>
	}

	return node;
   1b6f6:	68fb      	ldr	r3, [r7, #12]
}
   1b6f8:	4618      	mov	r0, r3
   1b6fa:	3710      	adds	r7, #16
   1b6fc:	46bd      	mov	sp, r7
   1b6fe:	bd80      	pop	{r7, pc}

0001b700 <block_ptr>:
#else
#define LVL_ARRAY_SZ(n) (n)
#endif

static void *block_ptr(struct sys_mem_pool_base *p, size_t lsz, int block)
{
   1b700:	b480      	push	{r7}
   1b702:	b085      	sub	sp, #20
   1b704:	af00      	add	r7, sp, #0
   1b706:	60f8      	str	r0, [r7, #12]
   1b708:	60b9      	str	r1, [r7, #8]
   1b70a:	607a      	str	r2, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   1b70c:	68fb      	ldr	r3, [r7, #12]
   1b70e:	681a      	ldr	r2, [r3, #0]
   1b710:	687b      	ldr	r3, [r7, #4]
   1b712:	68b9      	ldr	r1, [r7, #8]
   1b714:	fb01 f303 	mul.w	r3, r1, r3
   1b718:	4413      	add	r3, r2
}
   1b71a:	4618      	mov	r0, r3
   1b71c:	3714      	adds	r7, #20
   1b71e:	46bd      	mov	sp, r7
   1b720:	bc80      	pop	{r7}
   1b722:	4770      	bx	lr

0001b724 <block_num>:

static int block_num(struct sys_mem_pool_base *p, void *block, int sz)
{
   1b724:	b480      	push	{r7}
   1b726:	b085      	sub	sp, #20
   1b728:	af00      	add	r7, sp, #0
   1b72a:	60f8      	str	r0, [r7, #12]
   1b72c:	60b9      	str	r1, [r7, #8]
   1b72e:	607a      	str	r2, [r7, #4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1b730:	68fb      	ldr	r3, [r7, #12]
   1b732:	681b      	ldr	r3, [r3, #0]
   1b734:	68ba      	ldr	r2, [r7, #8]
   1b736:	1ad2      	subs	r2, r2, r3
   1b738:	687b      	ldr	r3, [r7, #4]
   1b73a:	fb92 f3f3 	sdiv	r3, r2, r3
}
   1b73e:	4618      	mov	r0, r3
   1b740:	3714      	adds	r7, #20
   1b742:	46bd      	mov	sp, r7
   1b744:	bc80      	pop	{r7}
   1b746:	4770      	bx	lr

0001b748 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
   1b748:	b480      	push	{r7}
   1b74a:	b087      	sub	sp, #28
   1b74c:	af00      	add	r7, sp, #0
   1b74e:	60f8      	str	r0, [r7, #12]
   1b750:	60b9      	str	r1, [r7, #8]
   1b752:	607a      	str	r2, [r7, #4]
   1b754:	603b      	str	r3, [r7, #0]
	u32_t *bitarray = level <= p->max_inline_level ?
   1b756:	68fb      	ldr	r3, [r7, #12]
   1b758:	f993 300b 	ldrsb.w	r3, [r3, #11]
   1b75c:	461a      	mov	r2, r3
		&p->levels[level].bits : p->levels[level].bits_p;
   1b75e:	68bb      	ldr	r3, [r7, #8]
   1b760:	4293      	cmp	r3, r2
   1b762:	dc08      	bgt.n	1b776 <get_bit_ptr+0x2e>
   1b764:	68fb      	ldr	r3, [r7, #12]
   1b766:	68d9      	ldr	r1, [r3, #12]
   1b768:	68ba      	ldr	r2, [r7, #8]
   1b76a:	4613      	mov	r3, r2
   1b76c:	005b      	lsls	r3, r3, #1
   1b76e:	4413      	add	r3, r2
   1b770:	009b      	lsls	r3, r3, #2
   1b772:	440b      	add	r3, r1
   1b774:	e008      	b.n	1b788 <get_bit_ptr+0x40>
   1b776:	68fb      	ldr	r3, [r7, #12]
   1b778:	68d9      	ldr	r1, [r3, #12]
   1b77a:	68ba      	ldr	r2, [r7, #8]
   1b77c:	4613      	mov	r3, r2
   1b77e:	005b      	lsls	r3, r3, #1
   1b780:	4413      	add	r3, r2
   1b782:	009b      	lsls	r3, r3, #2
   1b784:	440b      	add	r3, r1
   1b786:	681b      	ldr	r3, [r3, #0]
	u32_t *bitarray = level <= p->max_inline_level ?
   1b788:	617b      	str	r3, [r7, #20]

	*word = &bitarray[bn / 32];
   1b78a:	687b      	ldr	r3, [r7, #4]
   1b78c:	2b00      	cmp	r3, #0
   1b78e:	da00      	bge.n	1b792 <get_bit_ptr+0x4a>
   1b790:	331f      	adds	r3, #31
   1b792:	115b      	asrs	r3, r3, #5
   1b794:	009b      	lsls	r3, r3, #2
   1b796:	697a      	ldr	r2, [r7, #20]
   1b798:	441a      	add	r2, r3
   1b79a:	683b      	ldr	r3, [r7, #0]
   1b79c:	601a      	str	r2, [r3, #0]

	return bn & 0x1f;
   1b79e:	687b      	ldr	r3, [r7, #4]
   1b7a0:	f003 031f 	and.w	r3, r3, #31
}
   1b7a4:	4618      	mov	r0, r3
   1b7a6:	371c      	adds	r7, #28
   1b7a8:	46bd      	mov	sp, r7
   1b7aa:	bc80      	pop	{r7}
   1b7ac:	4770      	bx	lr

0001b7ae <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
   1b7ae:	b580      	push	{r7, lr}
   1b7b0:	b086      	sub	sp, #24
   1b7b2:	af00      	add	r7, sp, #0
   1b7b4:	60f8      	str	r0, [r7, #12]
   1b7b6:	60b9      	str	r1, [r7, #8]
   1b7b8:	607a      	str	r2, [r7, #4]
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
   1b7ba:	f107 0310 	add.w	r3, r7, #16
   1b7be:	687a      	ldr	r2, [r7, #4]
   1b7c0:	68b9      	ldr	r1, [r7, #8]
   1b7c2:	68f8      	ldr	r0, [r7, #12]
   1b7c4:	f7ff ffc0 	bl	1b748 <get_bit_ptr>
   1b7c8:	6178      	str	r0, [r7, #20]

	*word |= (1<<bit);
   1b7ca:	693b      	ldr	r3, [r7, #16]
   1b7cc:	681a      	ldr	r2, [r3, #0]
   1b7ce:	2101      	movs	r1, #1
   1b7d0:	697b      	ldr	r3, [r7, #20]
   1b7d2:	fa01 f303 	lsl.w	r3, r1, r3
   1b7d6:	4619      	mov	r1, r3
   1b7d8:	693b      	ldr	r3, [r7, #16]
   1b7da:	430a      	orrs	r2, r1
   1b7dc:	601a      	str	r2, [r3, #0]
}
   1b7de:	bf00      	nop
   1b7e0:	3718      	adds	r7, #24
   1b7e2:	46bd      	mov	sp, r7
   1b7e4:	bd80      	pop	{r7, pc}

0001b7e6 <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
   1b7e6:	b580      	push	{r7, lr}
   1b7e8:	b086      	sub	sp, #24
   1b7ea:	af00      	add	r7, sp, #0
   1b7ec:	60f8      	str	r0, [r7, #12]
   1b7ee:	60b9      	str	r1, [r7, #8]
   1b7f0:	607a      	str	r2, [r7, #4]
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
   1b7f2:	f107 0310 	add.w	r3, r7, #16
   1b7f6:	687a      	ldr	r2, [r7, #4]
   1b7f8:	68b9      	ldr	r1, [r7, #8]
   1b7fa:	68f8      	ldr	r0, [r7, #12]
   1b7fc:	f7ff ffa4 	bl	1b748 <get_bit_ptr>
   1b800:	6178      	str	r0, [r7, #20]

	*word &= ~(1<<bit);
   1b802:	693b      	ldr	r3, [r7, #16]
   1b804:	681a      	ldr	r2, [r3, #0]
   1b806:	2101      	movs	r1, #1
   1b808:	697b      	ldr	r3, [r7, #20]
   1b80a:	fa01 f303 	lsl.w	r3, r1, r3
   1b80e:	43db      	mvns	r3, r3
   1b810:	4619      	mov	r1, r3
   1b812:	693b      	ldr	r3, [r7, #16]
   1b814:	400a      	ands	r2, r1
   1b816:	601a      	str	r2, [r3, #0]
}
   1b818:	bf00      	nop
   1b81a:	3718      	adds	r7, #24
   1b81c:	46bd      	mov	sp, r7
   1b81e:	bd80      	pop	{r7, pc}

0001b820 <partner_bits>:

/* Returns all four of the free bits for the specified blocks
 * "partners" in the bottom 4 bits of the return value
 */
static int partner_bits(struct sys_mem_pool_base *p, int level, int bn)
{
   1b820:	b580      	push	{r7, lr}
   1b822:	b086      	sub	sp, #24
   1b824:	af00      	add	r7, sp, #0
   1b826:	60f8      	str	r0, [r7, #12]
   1b828:	60b9      	str	r1, [r7, #8]
   1b82a:	607a      	str	r2, [r7, #4]
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
   1b82c:	f107 0310 	add.w	r3, r7, #16
   1b830:	687a      	ldr	r2, [r7, #4]
   1b832:	68b9      	ldr	r1, [r7, #8]
   1b834:	68f8      	ldr	r0, [r7, #12]
   1b836:	f7ff ff87 	bl	1b748 <get_bit_ptr>
   1b83a:	6178      	str	r0, [r7, #20]

	return (*word >> (4*(bit / 4))) & 0xf;
   1b83c:	693b      	ldr	r3, [r7, #16]
   1b83e:	681a      	ldr	r2, [r3, #0]
   1b840:	697b      	ldr	r3, [r7, #20]
   1b842:	2b00      	cmp	r3, #0
   1b844:	da00      	bge.n	1b848 <partner_bits+0x28>
   1b846:	3303      	adds	r3, #3
   1b848:	109b      	asrs	r3, r3, #2
   1b84a:	009b      	lsls	r3, r3, #2
   1b84c:	fa22 f303 	lsr.w	r3, r2, r3
   1b850:	f003 030f 	and.w	r3, r3, #15
}
   1b854:	4618      	mov	r0, r3
   1b856:	3718      	adds	r7, #24
   1b858:	46bd      	mov	sp, r7
   1b85a:	bd80      	pop	{r7, pc}

0001b85c <buf_size>:

static size_t buf_size(struct sys_mem_pool_base *p)
{
   1b85c:	b480      	push	{r7}
   1b85e:	b083      	sub	sp, #12
   1b860:	af00      	add	r7, sp, #0
   1b862:	6078      	str	r0, [r7, #4]
	return p->n_max * p->max_sz;
   1b864:	687b      	ldr	r3, [r7, #4]
   1b866:	891b      	ldrh	r3, [r3, #8]
   1b868:	461a      	mov	r2, r3
   1b86a:	687b      	ldr	r3, [r7, #4]
   1b86c:	685b      	ldr	r3, [r3, #4]
   1b86e:	fb03 f302 	mul.w	r3, r3, r2
}
   1b872:	4618      	mov	r0, r3
   1b874:	370c      	adds	r7, #12
   1b876:	46bd      	mov	sp, r7
   1b878:	bc80      	pop	{r7}
   1b87a:	4770      	bx	lr

0001b87c <block_fits>:

static bool block_fits(struct sys_mem_pool_base *p,
		       int lvl, int bn, size_t *lsizes)
{
   1b87c:	b580      	push	{r7, lr}
   1b87e:	b088      	sub	sp, #32
   1b880:	af00      	add	r7, sp, #0
   1b882:	60f8      	str	r0, [r7, #12]
   1b884:	60b9      	str	r1, [r7, #8]
   1b886:	607a      	str	r2, [r7, #4]
   1b888:	603b      	str	r3, [r7, #0]
	u8_t *parent, *block_end;
	size_t parent_sz;

	block_end = (u8_t *)block_ptr(p, lsizes[lvl], bn) + lsizes[lvl];
   1b88a:	68bb      	ldr	r3, [r7, #8]
   1b88c:	009b      	lsls	r3, r3, #2
   1b88e:	683a      	ldr	r2, [r7, #0]
   1b890:	4413      	add	r3, r2
   1b892:	681b      	ldr	r3, [r3, #0]
   1b894:	687a      	ldr	r2, [r7, #4]
   1b896:	4619      	mov	r1, r3
   1b898:	68f8      	ldr	r0, [r7, #12]
   1b89a:	f7ff ff31 	bl	1b700 <block_ptr>
   1b89e:	4601      	mov	r1, r0
   1b8a0:	68bb      	ldr	r3, [r7, #8]
   1b8a2:	009b      	lsls	r3, r3, #2
   1b8a4:	683a      	ldr	r2, [r7, #0]
   1b8a6:	4413      	add	r3, r2
   1b8a8:	681b      	ldr	r3, [r3, #0]
   1b8aa:	440b      	add	r3, r1
   1b8ac:	617b      	str	r3, [r7, #20]

	if (lvl == 0) {
   1b8ae:	68bb      	ldr	r3, [r7, #8]
   1b8b0:	2b00      	cmp	r3, #0
   1b8b2:	d107      	bne.n	1b8c4 <block_fits+0x48>
		parent_sz = buf_size(p);
   1b8b4:	68f8      	ldr	r0, [r7, #12]
   1b8b6:	f7ff ffd1 	bl	1b85c <buf_size>
   1b8ba:	61b8      	str	r0, [r7, #24]
		parent = p->buf;
   1b8bc:	68fb      	ldr	r3, [r7, #12]
   1b8be:	681b      	ldr	r3, [r3, #0]
   1b8c0:	61fb      	str	r3, [r7, #28]
   1b8c2:	e01a      	b.n	1b8fa <block_fits+0x7e>
	} else {
		parent_sz = lsizes[lvl - 1];
   1b8c4:	68bb      	ldr	r3, [r7, #8]
   1b8c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b8ca:	3b01      	subs	r3, #1
   1b8cc:	009b      	lsls	r3, r3, #2
   1b8ce:	683a      	ldr	r2, [r7, #0]
   1b8d0:	4413      	add	r3, r2
   1b8d2:	681b      	ldr	r3, [r3, #0]
   1b8d4:	61bb      	str	r3, [r7, #24]
		parent = block_ptr(p, lsizes[lvl - 1], bn / 4);
   1b8d6:	68bb      	ldr	r3, [r7, #8]
   1b8d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b8dc:	3b01      	subs	r3, #1
   1b8de:	009b      	lsls	r3, r3, #2
   1b8e0:	683a      	ldr	r2, [r7, #0]
   1b8e2:	4413      	add	r3, r2
   1b8e4:	6819      	ldr	r1, [r3, #0]
   1b8e6:	687b      	ldr	r3, [r7, #4]
   1b8e8:	2b00      	cmp	r3, #0
   1b8ea:	da00      	bge.n	1b8ee <block_fits+0x72>
   1b8ec:	3303      	adds	r3, #3
   1b8ee:	109b      	asrs	r3, r3, #2
   1b8f0:	461a      	mov	r2, r3
   1b8f2:	68f8      	ldr	r0, [r7, #12]
   1b8f4:	f7ff ff04 	bl	1b700 <block_ptr>
   1b8f8:	61f8      	str	r0, [r7, #28]
	}

	return block_end <= (parent + parent_sz);
   1b8fa:	69fa      	ldr	r2, [r7, #28]
   1b8fc:	69bb      	ldr	r3, [r7, #24]
   1b8fe:	4413      	add	r3, r2
   1b900:	697a      	ldr	r2, [r7, #20]
   1b902:	429a      	cmp	r2, r3
   1b904:	bf94      	ite	ls
   1b906:	2301      	movls	r3, #1
   1b908:	2300      	movhi	r3, #0
   1b90a:	b2db      	uxtb	r3, r3
}
   1b90c:	4618      	mov	r0, r3
   1b90e:	3720      	adds	r7, #32
   1b910:	46bd      	mov	sp, r7
   1b912:	bd80      	pop	{r7, pc}

0001b914 <z_sys_mem_pool_base_init>:

void z_sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
   1b914:	b580      	push	{r7, lr}
   1b916:	b088      	sub	sp, #32
   1b918:	af00      	add	r7, sp, #0
   1b91a:	6078      	str	r0, [r7, #4]
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1b91c:	687b      	ldr	r3, [r7, #4]
   1b91e:	891b      	ldrh	r3, [r3, #8]
   1b920:	461a      	mov	r2, r3
   1b922:	687b      	ldr	r3, [r7, #4]
   1b924:	685b      	ldr	r3, [r3, #4]
   1b926:	fb03 f302 	mul.w	r3, r3, r2
   1b92a:	613b      	str	r3, [r7, #16]
   1b92c:	687b      	ldr	r3, [r7, #4]
   1b92e:	685b      	ldr	r3, [r3, #4]
   1b930:	61bb      	str	r3, [r7, #24]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1b932:	687b      	ldr	r3, [r7, #4]
   1b934:	681a      	ldr	r2, [r3, #0]
   1b936:	693b      	ldr	r3, [r7, #16]
   1b938:	4413      	add	r3, r2
   1b93a:	617b      	str	r3, [r7, #20]

	p->max_inline_level = -1;
   1b93c:	687b      	ldr	r3, [r7, #4]
   1b93e:	22ff      	movs	r2, #255	; 0xff
   1b940:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < p->n_levels; i++) {
   1b942:	2300      	movs	r3, #0
   1b944:	61fb      	str	r3, [r7, #28]
   1b946:	e035      	b.n	1b9b4 <z_sys_mem_pool_base_init+0xa0>
		int nblocks = buflen / sz;
   1b948:	693a      	ldr	r2, [r7, #16]
   1b94a:	69bb      	ldr	r3, [r7, #24]
   1b94c:	fbb2 f3f3 	udiv	r3, r2, r3
   1b950:	60fb      	str	r3, [r7, #12]

		sys_dlist_init(&p->levels[i].free_list);
   1b952:	687b      	ldr	r3, [r7, #4]
   1b954:	68d9      	ldr	r1, [r3, #12]
   1b956:	69fa      	ldr	r2, [r7, #28]
   1b958:	4613      	mov	r3, r2
   1b95a:	005b      	lsls	r3, r3, #1
   1b95c:	4413      	add	r3, r2
   1b95e:	009b      	lsls	r3, r3, #2
   1b960:	440b      	add	r3, r1
   1b962:	3304      	adds	r3, #4
   1b964:	4618      	mov	r0, r3
   1b966:	f7ff fe55 	bl	1b614 <sys_dlist_init>

		if (nblocks < 32) {
   1b96a:	68fb      	ldr	r3, [r7, #12]
   1b96c:	2b1f      	cmp	r3, #31
   1b96e:	dc04      	bgt.n	1b97a <z_sys_mem_pool_base_init+0x66>
			p->max_inline_level = i;
   1b970:	69fb      	ldr	r3, [r7, #28]
   1b972:	b25a      	sxtb	r2, r3
   1b974:	687b      	ldr	r3, [r7, #4]
   1b976:	72da      	strb	r2, [r3, #11]
   1b978:	e013      	b.n	1b9a2 <z_sys_mem_pool_base_init+0x8e>
		} else {
			p->levels[i].bits_p = bits;
   1b97a:	687b      	ldr	r3, [r7, #4]
   1b97c:	68d9      	ldr	r1, [r3, #12]
   1b97e:	69fa      	ldr	r2, [r7, #28]
   1b980:	4613      	mov	r3, r2
   1b982:	005b      	lsls	r3, r3, #1
   1b984:	4413      	add	r3, r2
   1b986:	009b      	lsls	r3, r3, #2
   1b988:	440b      	add	r3, r1
   1b98a:	697a      	ldr	r2, [r7, #20]
   1b98c:	601a      	str	r2, [r3, #0]
			bits += (nblocks + 31)/32;
   1b98e:	68fb      	ldr	r3, [r7, #12]
   1b990:	331f      	adds	r3, #31
   1b992:	2b00      	cmp	r3, #0
   1b994:	da00      	bge.n	1b998 <z_sys_mem_pool_base_init+0x84>
   1b996:	331f      	adds	r3, #31
   1b998:	115b      	asrs	r3, r3, #5
   1b99a:	009b      	lsls	r3, r3, #2
   1b99c:	697a      	ldr	r2, [r7, #20]
   1b99e:	4413      	add	r3, r2
   1b9a0:	617b      	str	r3, [r7, #20]
		}

		sz = _ALIGN4(sz / 4);
   1b9a2:	69bb      	ldr	r3, [r7, #24]
   1b9a4:	089b      	lsrs	r3, r3, #2
   1b9a6:	3303      	adds	r3, #3
   1b9a8:	f023 0303 	bic.w	r3, r3, #3
   1b9ac:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < p->n_levels; i++) {
   1b9ae:	69fb      	ldr	r3, [r7, #28]
   1b9b0:	3301      	adds	r3, #1
   1b9b2:	61fb      	str	r3, [r7, #28]
   1b9b4:	687b      	ldr	r3, [r7, #4]
   1b9b6:	7a9b      	ldrb	r3, [r3, #10]
   1b9b8:	461a      	mov	r2, r3
   1b9ba:	69fb      	ldr	r3, [r7, #28]
   1b9bc:	4293      	cmp	r3, r2
   1b9be:	dbc3      	blt.n	1b948 <z_sys_mem_pool_base_init+0x34>
	}

	for (i = 0; i < p->n_max; i++) {
   1b9c0:	2300      	movs	r3, #0
   1b9c2:	61fb      	str	r3, [r7, #28]
   1b9c4:	e016      	b.n	1b9f4 <z_sys_mem_pool_base_init+0xe0>
		void *block = block_ptr(p, p->max_sz, i);
   1b9c6:	687b      	ldr	r3, [r7, #4]
   1b9c8:	685b      	ldr	r3, [r3, #4]
   1b9ca:	69fa      	ldr	r2, [r7, #28]
   1b9cc:	4619      	mov	r1, r3
   1b9ce:	6878      	ldr	r0, [r7, #4]
   1b9d0:	f7ff fe96 	bl	1b700 <block_ptr>
   1b9d4:	60b8      	str	r0, [r7, #8]

		sys_dlist_append(&p->levels[0].free_list, block);
   1b9d6:	687b      	ldr	r3, [r7, #4]
   1b9d8:	68db      	ldr	r3, [r3, #12]
   1b9da:	3304      	adds	r3, #4
   1b9dc:	68b9      	ldr	r1, [r7, #8]
   1b9de:	4618      	mov	r0, r3
   1b9e0:	f7ff fe47 	bl	1b672 <sys_dlist_append>
		set_free_bit(p, 0, i);
   1b9e4:	69fa      	ldr	r2, [r7, #28]
   1b9e6:	2100      	movs	r1, #0
   1b9e8:	6878      	ldr	r0, [r7, #4]
   1b9ea:	f7ff fee0 	bl	1b7ae <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
   1b9ee:	69fb      	ldr	r3, [r7, #28]
   1b9f0:	3301      	adds	r3, #1
   1b9f2:	61fb      	str	r3, [r7, #28]
   1b9f4:	687b      	ldr	r3, [r7, #4]
   1b9f6:	891b      	ldrh	r3, [r3, #8]
   1b9f8:	461a      	mov	r2, r3
   1b9fa:	69fb      	ldr	r3, [r7, #28]
   1b9fc:	4293      	cmp	r3, r2
   1b9fe:	dbe2      	blt.n	1b9c6 <z_sys_mem_pool_base_init+0xb2>
	}
}
   1ba00:	bf00      	nop
   1ba02:	3720      	adds	r7, #32
   1ba04:	46bd      	mov	sp, r7
   1ba06:	bd80      	pop	{r7, pc}

0001ba08 <pool_irq_lock>:
 * level since using that does not introduce latency issues like locking
 * interrupts does.
 */

static inline int pool_irq_lock(struct sys_mem_pool_base *p)
{
   1ba08:	b480      	push	{r7}
   1ba0a:	b085      	sub	sp, #20
   1ba0c:	af00      	add	r7, sp, #0
   1ba0e:	6078      	str	r0, [r7, #4]
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1ba10:	687b      	ldr	r3, [r7, #4]
   1ba12:	7c1b      	ldrb	r3, [r3, #16]
   1ba14:	f003 0301 	and.w	r3, r3, #1
   1ba18:	2b00      	cmp	r3, #0
   1ba1a:	d00b      	beq.n	1ba34 <pool_irq_lock+0x2c>
	__asm__ volatile(
   1ba1c:	f04f 0320 	mov.w	r3, #32
   1ba20:	f3ef 8211 	mrs	r2, BASEPRI
   1ba24:	f383 8811 	msr	BASEPRI, r3
   1ba28:	f3bf 8f6f 	isb	sy
   1ba2c:	60fa      	str	r2, [r7, #12]
   1ba2e:	60bb      	str	r3, [r7, #8]
	return key;
   1ba30:	68fb      	ldr	r3, [r7, #12]
		return irq_lock();
   1ba32:	e000      	b.n	1ba36 <pool_irq_lock+0x2e>
	} else {
		return 0;
   1ba34:	2300      	movs	r3, #0
	}
}
   1ba36:	4618      	mov	r0, r3
   1ba38:	3714      	adds	r7, #20
   1ba3a:	46bd      	mov	sp, r7
   1ba3c:	bc80      	pop	{r7}
   1ba3e:	4770      	bx	lr

0001ba40 <pool_irq_unlock>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
   1ba40:	b480      	push	{r7}
   1ba42:	b085      	sub	sp, #20
   1ba44:	af00      	add	r7, sp, #0
   1ba46:	6078      	str	r0, [r7, #4]
   1ba48:	6039      	str	r1, [r7, #0]
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1ba4a:	687b      	ldr	r3, [r7, #4]
   1ba4c:	7c1b      	ldrb	r3, [r3, #16]
   1ba4e:	f003 0301 	and.w	r3, r3, #1
   1ba52:	2b00      	cmp	r3, #0
   1ba54:	d006      	beq.n	1ba64 <pool_irq_unlock+0x24>
		irq_unlock(key);
   1ba56:	683b      	ldr	r3, [r7, #0]
   1ba58:	60fb      	str	r3, [r7, #12]
	__asm__ volatile(
   1ba5a:	68fb      	ldr	r3, [r7, #12]
   1ba5c:	f383 8811 	msr	BASEPRI, r3
   1ba60:	f3bf 8f6f 	isb	sy
	}
}
   1ba64:	bf00      	nop
   1ba66:	3714      	adds	r7, #20
   1ba68:	46bd      	mov	sp, r7
   1ba6a:	bc80      	pop	{r7}
   1ba6c:	4770      	bx	lr

0001ba6e <block_alloc>:

static void *block_alloc(struct sys_mem_pool_base *p, int l, size_t lsz)
{
   1ba6e:	b580      	push	{r7, lr}
   1ba70:	b086      	sub	sp, #24
   1ba72:	af00      	add	r7, sp, #0
   1ba74:	60f8      	str	r0, [r7, #12]
   1ba76:	60b9      	str	r1, [r7, #8]
   1ba78:	607a      	str	r2, [r7, #4]
	sys_dnode_t *block;

	block = sys_dlist_get(&p->levels[l].free_list);
   1ba7a:	68fb      	ldr	r3, [r7, #12]
   1ba7c:	68d9      	ldr	r1, [r3, #12]
   1ba7e:	68ba      	ldr	r2, [r7, #8]
   1ba80:	4613      	mov	r3, r2
   1ba82:	005b      	lsls	r3, r3, #1
   1ba84:	4413      	add	r3, r2
   1ba86:	009b      	lsls	r3, r3, #2
   1ba88:	440b      	add	r3, r1
   1ba8a:	3304      	adds	r3, #4
   1ba8c:	4618      	mov	r0, r3
   1ba8e:	f7ff fe1d 	bl	1b6cc <sys_dlist_get>
   1ba92:	6178      	str	r0, [r7, #20]
	if (block != NULL) {
   1ba94:	697b      	ldr	r3, [r7, #20]
   1ba96:	2b00      	cmp	r3, #0
   1ba98:	d00b      	beq.n	1bab2 <block_alloc+0x44>
		clear_free_bit(p, l, block_num(p, block, lsz));
   1ba9a:	687b      	ldr	r3, [r7, #4]
   1ba9c:	461a      	mov	r2, r3
   1ba9e:	6979      	ldr	r1, [r7, #20]
   1baa0:	68f8      	ldr	r0, [r7, #12]
   1baa2:	f7ff fe3f 	bl	1b724 <block_num>
   1baa6:	4603      	mov	r3, r0
   1baa8:	461a      	mov	r2, r3
   1baaa:	68b9      	ldr	r1, [r7, #8]
   1baac:	68f8      	ldr	r0, [r7, #12]
   1baae:	f7ff fe9a 	bl	1b7e6 <clear_free_bit>
	}
	return block;
   1bab2:	697b      	ldr	r3, [r7, #20]
}
   1bab4:	4618      	mov	r0, r3
   1bab6:	3718      	adds	r7, #24
   1bab8:	46bd      	mov	sp, r7
   1baba:	bd80      	pop	{r7, pc}

0001babc <bfree_recombine>:

/* Called with lock held */
static unsigned int bfree_recombine(struct sys_mem_pool_base *p, int level,
				    size_t *lsizes, int bn, unsigned int key)
{
   1babc:	b580      	push	{r7, lr}
   1babe:	b088      	sub	sp, #32
   1bac0:	af00      	add	r7, sp, #0
   1bac2:	60f8      	str	r0, [r7, #12]
   1bac4:	60b9      	str	r1, [r7, #8]
   1bac6:	607a      	str	r2, [r7, #4]
   1bac8:	603b      	str	r3, [r7, #0]
	while (level >= 0) {
   1baca:	e065      	b.n	1bb98 <bfree_recombine+0xdc>
		int i, lsz = lsizes[level];
   1bacc:	68bb      	ldr	r3, [r7, #8]
   1bace:	009b      	lsls	r3, r3, #2
   1bad0:	687a      	ldr	r2, [r7, #4]
   1bad2:	4413      	add	r3, r2
   1bad4:	681b      	ldr	r3, [r3, #0]
   1bad6:	61bb      	str	r3, [r7, #24]
		void *block = block_ptr(p, lsz, bn);
   1bad8:	69bb      	ldr	r3, [r7, #24]
   1bada:	683a      	ldr	r2, [r7, #0]
   1badc:	4619      	mov	r1, r3
   1bade:	68f8      	ldr	r0, [r7, #12]
   1bae0:	f7ff fe0e 	bl	1b700 <block_ptr>
   1bae4:	6178      	str	r0, [r7, #20]

		__ASSERT(block_fits(p, level, bn, lsizes), "");

		/* Put it back */
		set_free_bit(p, level, bn);
   1bae6:	683a      	ldr	r2, [r7, #0]
   1bae8:	68b9      	ldr	r1, [r7, #8]
   1baea:	68f8      	ldr	r0, [r7, #12]
   1baec:	f7ff fe5f 	bl	1b7ae <set_free_bit>
		sys_dlist_append(&p->levels[level].free_list, block);
   1baf0:	68fb      	ldr	r3, [r7, #12]
   1baf2:	68d9      	ldr	r1, [r3, #12]
   1baf4:	68ba      	ldr	r2, [r7, #8]
   1baf6:	4613      	mov	r3, r2
   1baf8:	005b      	lsls	r3, r3, #1
   1bafa:	4413      	add	r3, r2
   1bafc:	009b      	lsls	r3, r3, #2
   1bafe:	440b      	add	r3, r1
   1bb00:	3304      	adds	r3, #4
   1bb02:	6979      	ldr	r1, [r7, #20]
   1bb04:	4618      	mov	r0, r3
   1bb06:	f7ff fdb4 	bl	1b672 <sys_dlist_append>

		/* Relax the lock (might result in it being taken, which is OK!) */
		pool_irq_unlock(p, key);
   1bb0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bb0c:	4619      	mov	r1, r3
   1bb0e:	68f8      	ldr	r0, [r7, #12]
   1bb10:	f7ff ff96 	bl	1ba40 <pool_irq_unlock>
		key = pool_irq_lock(p);
   1bb14:	68f8      	ldr	r0, [r7, #12]
   1bb16:	f7ff ff77 	bl	1ba08 <pool_irq_lock>
   1bb1a:	4603      	mov	r3, r0
   1bb1c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Check if we can recombine its superblock, and repeat */
		if (level == 0 || partner_bits(p, level, bn) != 0xf) {
   1bb1e:	68bb      	ldr	r3, [r7, #8]
   1bb20:	2b00      	cmp	r3, #0
   1bb22:	d007      	beq.n	1bb34 <bfree_recombine+0x78>
   1bb24:	683a      	ldr	r2, [r7, #0]
   1bb26:	68b9      	ldr	r1, [r7, #8]
   1bb28:	68f8      	ldr	r0, [r7, #12]
   1bb2a:	f7ff fe79 	bl	1b820 <partner_bits>
   1bb2e:	4603      	mov	r3, r0
   1bb30:	2b0f      	cmp	r3, #15
   1bb32:	d001      	beq.n	1bb38 <bfree_recombine+0x7c>
			return key;
   1bb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bb36:	e034      	b.n	1bba2 <bfree_recombine+0xe6>
		}

		for (i = 0; i < 4; i++) {
   1bb38:	2300      	movs	r3, #0
   1bb3a:	61fb      	str	r3, [r7, #28]
   1bb3c:	e020      	b.n	1bb80 <bfree_recombine+0xc4>
			int b = (bn & ~3) + i;
   1bb3e:	683b      	ldr	r3, [r7, #0]
   1bb40:	f023 0303 	bic.w	r3, r3, #3
   1bb44:	69fa      	ldr	r2, [r7, #28]
   1bb46:	4413      	add	r3, r2
   1bb48:	613b      	str	r3, [r7, #16]

			if (block_fits(p, level, b, lsizes)) {
   1bb4a:	687b      	ldr	r3, [r7, #4]
   1bb4c:	693a      	ldr	r2, [r7, #16]
   1bb4e:	68b9      	ldr	r1, [r7, #8]
   1bb50:	68f8      	ldr	r0, [r7, #12]
   1bb52:	f7ff fe93 	bl	1b87c <block_fits>
   1bb56:	4603      	mov	r3, r0
   1bb58:	2b00      	cmp	r3, #0
   1bb5a:	d00e      	beq.n	1bb7a <bfree_recombine+0xbe>
				clear_free_bit(p, level, b);
   1bb5c:	693a      	ldr	r2, [r7, #16]
   1bb5e:	68b9      	ldr	r1, [r7, #8]
   1bb60:	68f8      	ldr	r0, [r7, #12]
   1bb62:	f7ff fe40 	bl	1b7e6 <clear_free_bit>
				sys_dlist_remove(block_ptr(p, lsz, b));
   1bb66:	69bb      	ldr	r3, [r7, #24]
   1bb68:	693a      	ldr	r2, [r7, #16]
   1bb6a:	4619      	mov	r1, r3
   1bb6c:	68f8      	ldr	r0, [r7, #12]
   1bb6e:	f7ff fdc7 	bl	1b700 <block_ptr>
   1bb72:	4603      	mov	r3, r0
   1bb74:	4618      	mov	r0, r3
   1bb76:	f7ff fd94 	bl	1b6a2 <sys_dlist_remove>
		for (i = 0; i < 4; i++) {
   1bb7a:	69fb      	ldr	r3, [r7, #28]
   1bb7c:	3301      	adds	r3, #1
   1bb7e:	61fb      	str	r3, [r7, #28]
   1bb80:	69fb      	ldr	r3, [r7, #28]
   1bb82:	2b03      	cmp	r3, #3
   1bb84:	dddb      	ble.n	1bb3e <bfree_recombine+0x82>
			}
		}

		/* Free the larger block */
		level = level - 1;
   1bb86:	68bb      	ldr	r3, [r7, #8]
   1bb88:	3b01      	subs	r3, #1
   1bb8a:	60bb      	str	r3, [r7, #8]
		bn = bn / 4;
   1bb8c:	683b      	ldr	r3, [r7, #0]
   1bb8e:	2b00      	cmp	r3, #0
   1bb90:	da00      	bge.n	1bb94 <bfree_recombine+0xd8>
   1bb92:	3303      	adds	r3, #3
   1bb94:	109b      	asrs	r3, r3, #2
   1bb96:	603b      	str	r3, [r7, #0]
	while (level >= 0) {
   1bb98:	68bb      	ldr	r3, [r7, #8]
   1bb9a:	2b00      	cmp	r3, #0
   1bb9c:	da96      	bge.n	1bacc <bfree_recombine+0x10>
	}
	__ASSERT(0, "out of levels");
	return -1;
   1bb9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   1bba2:	4618      	mov	r0, r3
   1bba4:	3720      	adds	r7, #32
   1bba6:	46bd      	mov	sp, r7
   1bba8:	bd80      	pop	{r7, pc}

0001bbaa <block_free>:

static void block_free(struct sys_mem_pool_base *p, int level,
		       size_t *lsizes, int bn)
{
   1bbaa:	b580      	push	{r7, lr}
   1bbac:	b088      	sub	sp, #32
   1bbae:	af02      	add	r7, sp, #8
   1bbb0:	60f8      	str	r0, [r7, #12]
   1bbb2:	60b9      	str	r1, [r7, #8]
   1bbb4:	607a      	str	r2, [r7, #4]
   1bbb6:	603b      	str	r3, [r7, #0]
	unsigned int key = pool_irq_lock(p);
   1bbb8:	68f8      	ldr	r0, [r7, #12]
   1bbba:	f7ff ff25 	bl	1ba08 <pool_irq_lock>
   1bbbe:	4603      	mov	r3, r0
   1bbc0:	617b      	str	r3, [r7, #20]

	key = bfree_recombine(p, level, lsizes, bn, key);
   1bbc2:	697b      	ldr	r3, [r7, #20]
   1bbc4:	9300      	str	r3, [sp, #0]
   1bbc6:	683b      	ldr	r3, [r7, #0]
   1bbc8:	687a      	ldr	r2, [r7, #4]
   1bbca:	68b9      	ldr	r1, [r7, #8]
   1bbcc:	68f8      	ldr	r0, [r7, #12]
   1bbce:	f7ff ff75 	bl	1babc <bfree_recombine>
   1bbd2:	6178      	str	r0, [r7, #20]
	pool_irq_unlock(p, key);
   1bbd4:	697b      	ldr	r3, [r7, #20]
   1bbd6:	4619      	mov	r1, r3
   1bbd8:	68f8      	ldr	r0, [r7, #12]
   1bbda:	f7ff ff31 	bl	1ba40 <pool_irq_unlock>
}
   1bbde:	bf00      	nop
   1bbe0:	3718      	adds	r7, #24
   1bbe2:	46bd      	mov	sp, r7
   1bbe4:	bd80      	pop	{r7, pc}

0001bbe6 <block_break>:
 * block_free() but without the need to check adjacent bits or
 * recombine, and returns the remaining smaller block.
 */
static void *block_break(struct sys_mem_pool_base *p, void *block, int l,
				size_t *lsizes)
{
   1bbe6:	b580      	push	{r7, lr}
   1bbe8:	b08a      	sub	sp, #40	; 0x28
   1bbea:	af00      	add	r7, sp, #0
   1bbec:	60f8      	str	r0, [r7, #12]
   1bbee:	60b9      	str	r1, [r7, #8]
   1bbf0:	607a      	str	r2, [r7, #4]
   1bbf2:	603b      	str	r3, [r7, #0]
	int i, bn;

	bn = block_num(p, block, lsizes[l]);
   1bbf4:	687b      	ldr	r3, [r7, #4]
   1bbf6:	009b      	lsls	r3, r3, #2
   1bbf8:	683a      	ldr	r2, [r7, #0]
   1bbfa:	4413      	add	r3, r2
   1bbfc:	681b      	ldr	r3, [r3, #0]
   1bbfe:	461a      	mov	r2, r3
   1bc00:	68b9      	ldr	r1, [r7, #8]
   1bc02:	68f8      	ldr	r0, [r7, #12]
   1bc04:	f7ff fd8e 	bl	1b724 <block_num>
   1bc08:	6238      	str	r0, [r7, #32]

	for (i = 1; i < 4; i++) {
   1bc0a:	2301      	movs	r3, #1
   1bc0c:	627b      	str	r3, [r7, #36]	; 0x24
   1bc0e:	e035      	b.n	1bc7c <block_break+0x96>
		int lbn = 4*bn + i;
   1bc10:	6a3b      	ldr	r3, [r7, #32]
   1bc12:	009b      	lsls	r3, r3, #2
   1bc14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1bc16:	4413      	add	r3, r2
   1bc18:	61fb      	str	r3, [r7, #28]
		int lsz = lsizes[l + 1];
   1bc1a:	687b      	ldr	r3, [r7, #4]
   1bc1c:	3301      	adds	r3, #1
   1bc1e:	009b      	lsls	r3, r3, #2
   1bc20:	683a      	ldr	r2, [r7, #0]
   1bc22:	4413      	add	r3, r2
   1bc24:	681b      	ldr	r3, [r3, #0]
   1bc26:	61bb      	str	r3, [r7, #24]
		void *block2 = (lsz * i) + (char *)block;
   1bc28:	69bb      	ldr	r3, [r7, #24]
   1bc2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1bc2c:	fb02 f303 	mul.w	r3, r2, r3
   1bc30:	461a      	mov	r2, r3
   1bc32:	68bb      	ldr	r3, [r7, #8]
   1bc34:	4413      	add	r3, r2
   1bc36:	617b      	str	r3, [r7, #20]

		set_free_bit(p, l + 1, lbn);
   1bc38:	687b      	ldr	r3, [r7, #4]
   1bc3a:	3301      	adds	r3, #1
   1bc3c:	69fa      	ldr	r2, [r7, #28]
   1bc3e:	4619      	mov	r1, r3
   1bc40:	68f8      	ldr	r0, [r7, #12]
   1bc42:	f7ff fdb4 	bl	1b7ae <set_free_bit>
		if (block_fits(p, l + 1, lbn, lsizes)) {
   1bc46:	687b      	ldr	r3, [r7, #4]
   1bc48:	1c59      	adds	r1, r3, #1
   1bc4a:	683b      	ldr	r3, [r7, #0]
   1bc4c:	69fa      	ldr	r2, [r7, #28]
   1bc4e:	68f8      	ldr	r0, [r7, #12]
   1bc50:	f7ff fe14 	bl	1b87c <block_fits>
   1bc54:	4603      	mov	r3, r0
   1bc56:	2b00      	cmp	r3, #0
   1bc58:	d00d      	beq.n	1bc76 <block_break+0x90>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1bc5a:	68fb      	ldr	r3, [r7, #12]
   1bc5c:	68d9      	ldr	r1, [r3, #12]
   1bc5e:	687b      	ldr	r3, [r7, #4]
   1bc60:	1c5a      	adds	r2, r3, #1
   1bc62:	4613      	mov	r3, r2
   1bc64:	005b      	lsls	r3, r3, #1
   1bc66:	4413      	add	r3, r2
   1bc68:	009b      	lsls	r3, r3, #2
   1bc6a:	440b      	add	r3, r1
   1bc6c:	3304      	adds	r3, #4
   1bc6e:	6979      	ldr	r1, [r7, #20]
   1bc70:	4618      	mov	r0, r3
   1bc72:	f7ff fcfe 	bl	1b672 <sys_dlist_append>
	for (i = 1; i < 4; i++) {
   1bc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bc78:	3301      	adds	r3, #1
   1bc7a:	627b      	str	r3, [r7, #36]	; 0x24
   1bc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bc7e:	2b03      	cmp	r3, #3
   1bc80:	ddc6      	ble.n	1bc10 <block_break+0x2a>
		}
	}

	return block;
   1bc82:	68bb      	ldr	r3, [r7, #8]
}
   1bc84:	4618      	mov	r0, r3
   1bc86:	3728      	adds	r7, #40	; 0x28
   1bc88:	46bd      	mov	sp, r7
   1bc8a:	bd80      	pop	{r7, pc}

0001bc8c <z_sys_mem_pool_block_alloc>:

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
   1bc8c:	b5b0      	push	{r4, r5, r7, lr}
   1bc8e:	b08c      	sub	sp, #48	; 0x30
   1bc90:	af00      	add	r7, sp, #0
   1bc92:	60f8      	str	r0, [r7, #12]
   1bc94:	60b9      	str	r1, [r7, #8]
   1bc96:	607a      	str	r2, [r7, #4]
   1bc98:	603b      	str	r3, [r7, #0]
   1bc9a:	466b      	mov	r3, sp
   1bc9c:	461d      	mov	r5, r3
	int i, from_l, alloc_l = -1;
   1bc9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bca2:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int key;
	void *data = NULL;
   1bca4:	2300      	movs	r3, #0
   1bca6:	61fb      	str	r3, [r7, #28]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1bca8:	68fb      	ldr	r3, [r7, #12]
   1bcaa:	7a98      	ldrb	r0, [r3, #10]
   1bcac:	4603      	mov	r3, r0
   1bcae:	3b01      	subs	r3, #1
   1bcb0:	61bb      	str	r3, [r7, #24]
   1bcb2:	b2c1      	uxtb	r1, r0
   1bcb4:	f04f 0200 	mov.w	r2, #0
   1bcb8:	f04f 0300 	mov.w	r3, #0
   1bcbc:	f04f 0400 	mov.w	r4, #0
   1bcc0:	0154      	lsls	r4, r2, #5
   1bcc2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
   1bcc6:	014b      	lsls	r3, r1, #5
   1bcc8:	b2c1      	uxtb	r1, r0
   1bcca:	f04f 0200 	mov.w	r2, #0
   1bcce:	f04f 0300 	mov.w	r3, #0
   1bcd2:	f04f 0400 	mov.w	r4, #0
   1bcd6:	0154      	lsls	r4, r2, #5
   1bcd8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
   1bcdc:	014b      	lsls	r3, r1, #5
   1bcde:	4603      	mov	r3, r0
   1bce0:	009b      	lsls	r3, r3, #2
   1bce2:	3307      	adds	r3, #7
   1bce4:	08db      	lsrs	r3, r3, #3
   1bce6:	00db      	lsls	r3, r3, #3
   1bce8:	ebad 0d03 	sub.w	sp, sp, r3
   1bcec:	466b      	mov	r3, sp
   1bcee:	3303      	adds	r3, #3
   1bcf0:	089b      	lsrs	r3, r3, #2
   1bcf2:	009b      	lsls	r3, r3, #2
   1bcf4:	617b      	str	r3, [r7, #20]
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
   1bcf6:	68fb      	ldr	r3, [r7, #12]
   1bcf8:	685a      	ldr	r2, [r3, #4]
   1bcfa:	697b      	ldr	r3, [r7, #20]
   1bcfc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < p->n_levels; i++) {
   1bcfe:	2300      	movs	r3, #0
   1bd00:	623b      	str	r3, [r7, #32]
   1bd02:	e01b      	b.n	1bd3c <z_sys_mem_pool_block_alloc+0xb0>
		if (i > 0) {
   1bd04:	6a3b      	ldr	r3, [r7, #32]
   1bd06:	2b00      	cmp	r3, #0
   1bd08:	dd0c      	ble.n	1bd24 <z_sys_mem_pool_block_alloc+0x98>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
   1bd0a:	6a3b      	ldr	r3, [r7, #32]
   1bd0c:	1e5a      	subs	r2, r3, #1
   1bd0e:	697b      	ldr	r3, [r7, #20]
   1bd10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1bd14:	089b      	lsrs	r3, r3, #2
   1bd16:	3303      	adds	r3, #3
   1bd18:	f023 0103 	bic.w	r1, r3, #3
   1bd1c:	697b      	ldr	r3, [r7, #20]
   1bd1e:	6a3a      	ldr	r2, [r7, #32]
   1bd20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}

		if (lsizes[i] < size) {
   1bd24:	697b      	ldr	r3, [r7, #20]
   1bd26:	6a3a      	ldr	r2, [r7, #32]
   1bd28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1bd2c:	68ba      	ldr	r2, [r7, #8]
   1bd2e:	429a      	cmp	r2, r3
   1bd30:	d80b      	bhi.n	1bd4a <z_sys_mem_pool_block_alloc+0xbe>
			break;
		}

		alloc_l = i;
   1bd32:	6a3b      	ldr	r3, [r7, #32]
   1bd34:	62bb      	str	r3, [r7, #40]	; 0x28
	for (i = 0; i < p->n_levels; i++) {
   1bd36:	6a3b      	ldr	r3, [r7, #32]
   1bd38:	3301      	adds	r3, #1
   1bd3a:	623b      	str	r3, [r7, #32]
   1bd3c:	68fb      	ldr	r3, [r7, #12]
   1bd3e:	7a9b      	ldrb	r3, [r3, #10]
   1bd40:	461a      	mov	r2, r3
   1bd42:	6a3b      	ldr	r3, [r7, #32]
   1bd44:	4293      	cmp	r3, r2
   1bd46:	dbdd      	blt.n	1bd04 <z_sys_mem_pool_block_alloc+0x78>
   1bd48:	e000      	b.n	1bd4c <z_sys_mem_pool_block_alloc+0xc0>
			break;
   1bd4a:	bf00      	nop
	}

	if (alloc_l < 0) {
   1bd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bd4e:	2b00      	cmp	r3, #0
   1bd50:	da05      	bge.n	1bd5e <z_sys_mem_pool_block_alloc+0xd2>
		*data_p = NULL;
   1bd52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1bd54:	2200      	movs	r2, #0
   1bd56:	601a      	str	r2, [r3, #0]
		return -ENOMEM;
   1bd58:	f06f 030b 	mvn.w	r3, #11
   1bd5c:	e055      	b.n	1be0a <z_sys_mem_pool_block_alloc+0x17e>
	 * its the three unused children needs to be performed
	 * atomically, otherwise we open up a situation where we can
	 * "steal" the top level block of the whole heap, causing a
	 * spurious -ENOMEM.
	 */
	key = pool_irq_lock(p);
   1bd5e:	68f8      	ldr	r0, [r7, #12]
   1bd60:	f7ff fe52 	bl	1ba08 <pool_irq_lock>
   1bd64:	4603      	mov	r3, r0
   1bd66:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = alloc_l; i >= 0; i--) {
   1bd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bd6a:	623b      	str	r3, [r7, #32]
   1bd6c:	e02b      	b.n	1bdc6 <z_sys_mem_pool_block_alloc+0x13a>
		data = block_alloc(p, i, lsizes[i]);
   1bd6e:	697b      	ldr	r3, [r7, #20]
   1bd70:	6a3a      	ldr	r2, [r7, #32]
   1bd72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1bd76:	461a      	mov	r2, r3
   1bd78:	6a39      	ldr	r1, [r7, #32]
   1bd7a:	68f8      	ldr	r0, [r7, #12]
   1bd7c:	f7ff fe77 	bl	1ba6e <block_alloc>
   1bd80:	61f8      	str	r0, [r7, #28]
		/* Found one.  Iteratively break it down to the size
		 * we need.  Note that we relax the lock to allow a
		 * pending interrupt to fire so we don't hurt latency
		 * by locking the full loop.
		 */
		if (data != NULL) {
   1bd82:	69fb      	ldr	r3, [r7, #28]
   1bd84:	2b00      	cmp	r3, #0
   1bd86:	d01b      	beq.n	1bdc0 <z_sys_mem_pool_block_alloc+0x134>
			for (from_l = i; from_l < alloc_l; from_l++) {
   1bd88:	6a3b      	ldr	r3, [r7, #32]
   1bd8a:	627b      	str	r3, [r7, #36]	; 0x24
   1bd8c:	e013      	b.n	1bdb6 <z_sys_mem_pool_block_alloc+0x12a>
				data = block_break(p, data, from_l, lsizes);
   1bd8e:	697b      	ldr	r3, [r7, #20]
   1bd90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1bd92:	69f9      	ldr	r1, [r7, #28]
   1bd94:	68f8      	ldr	r0, [r7, #12]
   1bd96:	f7ff ff26 	bl	1bbe6 <block_break>
   1bd9a:	61f8      	str	r0, [r7, #28]
				pool_irq_unlock(p, key);
   1bd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1bd9e:	4619      	mov	r1, r3
   1bda0:	68f8      	ldr	r0, [r7, #12]
   1bda2:	f7ff fe4d 	bl	1ba40 <pool_irq_unlock>
				key = pool_irq_lock(p);
   1bda6:	68f8      	ldr	r0, [r7, #12]
   1bda8:	f7ff fe2e 	bl	1ba08 <pool_irq_lock>
   1bdac:	4603      	mov	r3, r0
   1bdae:	62fb      	str	r3, [r7, #44]	; 0x2c
			for (from_l = i; from_l < alloc_l; from_l++) {
   1bdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bdb2:	3301      	adds	r3, #1
   1bdb4:	627b      	str	r3, [r7, #36]	; 0x24
   1bdb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1bdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bdba:	429a      	cmp	r2, r3
   1bdbc:	dbe7      	blt.n	1bd8e <z_sys_mem_pool_block_alloc+0x102>
			}
			break;
   1bdbe:	e005      	b.n	1bdcc <z_sys_mem_pool_block_alloc+0x140>
	for (i = alloc_l; i >= 0; i--) {
   1bdc0:	6a3b      	ldr	r3, [r7, #32]
   1bdc2:	3b01      	subs	r3, #1
   1bdc4:	623b      	str	r3, [r7, #32]
   1bdc6:	6a3b      	ldr	r3, [r7, #32]
   1bdc8:	2b00      	cmp	r3, #0
   1bdca:	dad0      	bge.n	1bd6e <z_sys_mem_pool_block_alloc+0xe2>
		}
	}
	pool_irq_unlock(p, key);
   1bdcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1bdce:	4619      	mov	r1, r3
   1bdd0:	68f8      	ldr	r0, [r7, #12]
   1bdd2:	f7ff fe35 	bl	1ba40 <pool_irq_unlock>

	*data_p = data;
   1bdd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1bdd8:	69fa      	ldr	r2, [r7, #28]
   1bdda:	601a      	str	r2, [r3, #0]

	if (data == NULL) {
   1bddc:	69fb      	ldr	r3, [r7, #28]
   1bdde:	2b00      	cmp	r3, #0
   1bde0:	d102      	bne.n	1bde8 <z_sys_mem_pool_block_alloc+0x15c>
		return -ENOMEM;
   1bde2:	f06f 030b 	mvn.w	r3, #11
   1bde6:	e010      	b.n	1be0a <z_sys_mem_pool_block_alloc+0x17e>
	}

	*level_p = alloc_l;
   1bde8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bdea:	687b      	ldr	r3, [r7, #4]
   1bdec:	601a      	str	r2, [r3, #0]
	*block_p = block_num(p, data, lsizes[alloc_l]);
   1bdee:	697b      	ldr	r3, [r7, #20]
   1bdf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bdf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1bdf6:	461a      	mov	r2, r3
   1bdf8:	69f9      	ldr	r1, [r7, #28]
   1bdfa:	68f8      	ldr	r0, [r7, #12]
   1bdfc:	f7ff fc92 	bl	1b724 <block_num>
   1be00:	4603      	mov	r3, r0
   1be02:	461a      	mov	r2, r3
   1be04:	683b      	ldr	r3, [r7, #0]
   1be06:	601a      	str	r2, [r3, #0]

	return 0;
   1be08:	2300      	movs	r3, #0
   1be0a:	46ad      	mov	sp, r5
}
   1be0c:	4618      	mov	r0, r3
   1be0e:	3730      	adds	r7, #48	; 0x30
   1be10:	46bd      	mov	sp, r7
   1be12:	bdb0      	pop	{r4, r5, r7, pc}

0001be14 <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   1be14:	b5b0      	push	{r4, r5, r7, lr}
   1be16:	b088      	sub	sp, #32
   1be18:	af00      	add	r7, sp, #0
   1be1a:	60f8      	str	r0, [r7, #12]
   1be1c:	60b9      	str	r1, [r7, #8]
   1be1e:	607a      	str	r2, [r7, #4]
   1be20:	466b      	mov	r3, sp
   1be22:	461d      	mov	r5, r3
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1be24:	68fb      	ldr	r3, [r7, #12]
   1be26:	7a98      	ldrb	r0, [r3, #10]
   1be28:	4603      	mov	r3, r0
   1be2a:	3b01      	subs	r3, #1
   1be2c:	61bb      	str	r3, [r7, #24]
   1be2e:	b2c1      	uxtb	r1, r0
   1be30:	f04f 0200 	mov.w	r2, #0
   1be34:	f04f 0300 	mov.w	r3, #0
   1be38:	f04f 0400 	mov.w	r4, #0
   1be3c:	0154      	lsls	r4, r2, #5
   1be3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
   1be42:	014b      	lsls	r3, r1, #5
   1be44:	b2c1      	uxtb	r1, r0
   1be46:	f04f 0200 	mov.w	r2, #0
   1be4a:	f04f 0300 	mov.w	r3, #0
   1be4e:	f04f 0400 	mov.w	r4, #0
   1be52:	0154      	lsls	r4, r2, #5
   1be54:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
   1be58:	014b      	lsls	r3, r1, #5
   1be5a:	4603      	mov	r3, r0
   1be5c:	009b      	lsls	r3, r3, #2
   1be5e:	3307      	adds	r3, #7
   1be60:	08db      	lsrs	r3, r3, #3
   1be62:	00db      	lsls	r3, r3, #3
   1be64:	ebad 0d03 	sub.w	sp, sp, r3
   1be68:	466b      	mov	r3, sp
   1be6a:	3303      	adds	r3, #3
   1be6c:	089b      	lsrs	r3, r3, #2
   1be6e:	009b      	lsls	r3, r3, #2
   1be70:	617b      	str	r3, [r7, #20]
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   1be72:	68fb      	ldr	r3, [r7, #12]
   1be74:	685a      	ldr	r2, [r3, #4]
   1be76:	697b      	ldr	r3, [r7, #20]
   1be78:	601a      	str	r2, [r3, #0]
	for (i = 1; i <= level; i++) {
   1be7a:	2301      	movs	r3, #1
   1be7c:	61fb      	str	r3, [r7, #28]
   1be7e:	e00f      	b.n	1bea0 <z_sys_mem_pool_block_free+0x8c>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
   1be80:	69fb      	ldr	r3, [r7, #28]
   1be82:	1e5a      	subs	r2, r3, #1
   1be84:	697b      	ldr	r3, [r7, #20]
   1be86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1be8a:	089b      	lsrs	r3, r3, #2
   1be8c:	3303      	adds	r3, #3
   1be8e:	f023 0103 	bic.w	r1, r3, #3
   1be92:	697b      	ldr	r3, [r7, #20]
   1be94:	69fa      	ldr	r2, [r7, #28]
   1be96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 1; i <= level; i++) {
   1be9a:	69fb      	ldr	r3, [r7, #28]
   1be9c:	3301      	adds	r3, #1
   1be9e:	61fb      	str	r3, [r7, #28]
   1bea0:	69fb      	ldr	r3, [r7, #28]
   1bea2:	68ba      	ldr	r2, [r7, #8]
   1bea4:	429a      	cmp	r2, r3
   1bea6:	d2eb      	bcs.n	1be80 <z_sys_mem_pool_block_free+0x6c>
	}

	block_free(p, level, lsizes, block);
   1bea8:	68b9      	ldr	r1, [r7, #8]
   1beaa:	697a      	ldr	r2, [r7, #20]
   1beac:	687b      	ldr	r3, [r7, #4]
   1beae:	68f8      	ldr	r0, [r7, #12]
   1beb0:	f7ff fe7b 	bl	1bbaa <block_free>
   1beb4:	46ad      	mov	sp, r5
}
   1beb6:	bf00      	nop
   1beb8:	3720      	adds	r7, #32
   1beba:	46bd      	mov	sp, r7
   1bebc:	bdb0      	pop	{r4, r5, r7, pc}

0001bebe <k_current_get>:
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
   1bebe:	b580      	push	{r7, lr}
   1bec0:	af00      	add	r7, sp, #0
   1bec2:	f7fb fe65 	bl	17b90 <z_impl_k_current_get>
   1bec6:	4603      	mov	r3, r0
   1bec8:	4618      	mov	r0, r3
   1beca:	bd80      	pop	{r7, pc}

0001becc <k_thread_abort>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
   1becc:	b580      	push	{r7, lr}
   1bece:	b082      	sub	sp, #8
   1bed0:	af00      	add	r7, sp, #0
   1bed2:	6078      	str	r0, [r7, #4]
   1bed4:	6878      	ldr	r0, [r7, #4]
   1bed6:	f7f6 f8c9 	bl	1206c <z_impl_k_thread_abort>
   1beda:	bf00      	nop
   1bedc:	3708      	adds	r7, #8
   1bede:	46bd      	mov	sp, r7
   1bee0:	bd80      	pop	{r7, pc}

0001bee2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1bee2:	b580      	push	{r7, lr}
   1bee4:	b084      	sub	sp, #16
   1bee6:	af00      	add	r7, sp, #0
   1bee8:	60f8      	str	r0, [r7, #12]
   1beea:	60b9      	str	r1, [r7, #8]
   1beec:	607a      	str	r2, [r7, #4]
   1beee:	603b      	str	r3, [r7, #0]
	entry(p1, p2, p3);
   1bef0:	68fb      	ldr	r3, [r7, #12]
   1bef2:	683a      	ldr	r2, [r7, #0]
   1bef4:	6879      	ldr	r1, [r7, #4]
   1bef6:	68b8      	ldr	r0, [r7, #8]
   1bef8:	4798      	blx	r3

	k_thread_abort(k_current_get());
   1befa:	f7ff ffe0 	bl	1bebe <k_current_get>
   1befe:	4603      	mov	r3, r0
   1bf00:	4618      	mov	r0, r3
   1bf02:	f7ff ffe3 	bl	1becc <k_thread_abort>

0001bf06 <atomic_and>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
   1bf06:	b480      	push	{r7}
   1bf08:	b083      	sub	sp, #12
   1bf0a:	af00      	add	r7, sp, #0
   1bf0c:	6078      	str	r0, [r7, #4]
   1bf0e:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bf10:	683a      	ldr	r2, [r7, #0]
   1bf12:	687b      	ldr	r3, [r7, #4]
   1bf14:	f3bf 8f5b 	dmb	ish
   1bf18:	e853 1f00 	ldrex	r1, [r3]
   1bf1c:	ea01 0002 	and.w	r0, r1, r2
   1bf20:	e843 0c00 	strex	ip, r0, [r3]
   1bf24:	f1bc 0f00 	cmp.w	ip, #0
   1bf28:	d1f6      	bne.n	1bf18 <atomic_and+0x12>
   1bf2a:	f3bf 8f5b 	dmb	ish
   1bf2e:	460b      	mov	r3, r1
}
   1bf30:	4618      	mov	r0, r3
   1bf32:	370c      	adds	r7, #12
   1bf34:	46bd      	mov	sp, r7
   1bf36:	bc80      	pop	{r7}
   1bf38:	4770      	bx	lr

0001bf3a <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
   1bf3a:	b580      	push	{r7, lr}
   1bf3c:	b084      	sub	sp, #16
   1bf3e:	af00      	add	r7, sp, #0
   1bf40:	6078      	str	r0, [r7, #4]
   1bf42:	6039      	str	r1, [r7, #0]
	atomic_val_t mask = ATOMIC_MASK(bit);
   1bf44:	683b      	ldr	r3, [r7, #0]
   1bf46:	f003 031f 	and.w	r3, r3, #31
   1bf4a:	2201      	movs	r2, #1
   1bf4c:	fa02 f303 	lsl.w	r3, r2, r3
   1bf50:	60fb      	str	r3, [r7, #12]
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1bf52:	683b      	ldr	r3, [r7, #0]
   1bf54:	095b      	lsrs	r3, r3, #5
   1bf56:	009b      	lsls	r3, r3, #2
   1bf58:	687a      	ldr	r2, [r7, #4]
   1bf5a:	441a      	add	r2, r3
   1bf5c:	68fb      	ldr	r3, [r7, #12]
   1bf5e:	43db      	mvns	r3, r3
   1bf60:	4619      	mov	r1, r3
   1bf62:	4610      	mov	r0, r2
   1bf64:	f7ff ffcf 	bl	1bf06 <atomic_and>
   1bf68:	60b8      	str	r0, [r7, #8]

	return (old & mask) != 0;
   1bf6a:	68ba      	ldr	r2, [r7, #8]
   1bf6c:	68fb      	ldr	r3, [r7, #12]
   1bf6e:	4013      	ands	r3, r2
   1bf70:	2b00      	cmp	r3, #0
   1bf72:	bf14      	ite	ne
   1bf74:	2301      	movne	r3, #1
   1bf76:	2300      	moveq	r3, #0
   1bf78:	b2db      	uxtb	r3, r3
}
   1bf7a:	4618      	mov	r0, r3
   1bf7c:	3710      	adds	r7, #16
   1bf7e:	46bd      	mov	sp, r7
   1bf80:	bd80      	pop	{r7, pc}

0001bf82 <k_yield>:
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   1bf82:	b580      	push	{r7, lr}
   1bf84:	af00      	add	r7, sp, #0
   1bf86:	f7fb fc89 	bl	1789c <z_impl_k_yield>
   1bf8a:	bf00      	nop
   1bf8c:	bd80      	pop	{r7, pc}

0001bf8e <k_queue_get>:
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   1bf8e:	b580      	push	{r7, lr}
   1bf90:	b082      	sub	sp, #8
   1bf92:	af00      	add	r7, sp, #0
   1bf94:	6078      	str	r0, [r7, #4]
   1bf96:	6039      	str	r1, [r7, #0]
   1bf98:	6839      	ldr	r1, [r7, #0]
   1bf9a:	6878      	ldr	r0, [r7, #4]
   1bf9c:	f00e fc7e 	bl	2a89c <z_impl_k_queue_get>
   1bfa0:	4603      	mov	r3, r0
   1bfa2:	4618      	mov	r0, r3
   1bfa4:	3708      	adds	r7, #8
   1bfa6:	46bd      	mov	sp, r7
   1bfa8:	bd80      	pop	{r7, pc}

0001bfaa <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1bfaa:	b580      	push	{r7, lr}
   1bfac:	b088      	sub	sp, #32
   1bfae:	af00      	add	r7, sp, #0
   1bfb0:	60f8      	str	r0, [r7, #12]
   1bfb2:	60b9      	str	r1, [r7, #8]
   1bfb4:	607a      	str	r2, [r7, #4]
	struct k_work_q *work_q = work_q_ptr;
   1bfb6:	68fb      	ldr	r3, [r7, #12]
   1bfb8:	61fb      	str	r3, [r7, #28]

	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
   1bfba:	69fb      	ldr	r3, [r7, #28]
   1bfbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1bfc0:	4618      	mov	r0, r3
   1bfc2:	f7ff ffe4 	bl	1bf8e <k_queue_get>
   1bfc6:	61b8      	str	r0, [r7, #24]
		if (work == NULL) {
   1bfc8:	69bb      	ldr	r3, [r7, #24]
   1bfca:	2b00      	cmp	r3, #0
   1bfcc:	d011      	beq.n	1bff2 <z_work_q_main+0x48>
			continue;
		}

		handler = work->handler;
   1bfce:	69bb      	ldr	r3, [r7, #24]
   1bfd0:	685b      	ldr	r3, [r3, #4]
   1bfd2:	617b      	str	r3, [r7, #20]

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1bfd4:	69bb      	ldr	r3, [r7, #24]
   1bfd6:	3308      	adds	r3, #8
   1bfd8:	2100      	movs	r1, #0
   1bfda:	4618      	mov	r0, r3
   1bfdc:	f7ff ffad 	bl	1bf3a <atomic_test_and_clear_bit>
   1bfe0:	4603      	mov	r3, r0
   1bfe2:	2b00      	cmp	r3, #0
   1bfe4:	d002      	beq.n	1bfec <z_work_q_main+0x42>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1bfe6:	697b      	ldr	r3, [r7, #20]
   1bfe8:	69b8      	ldr	r0, [r7, #24]
   1bfea:	4798      	blx	r3
		}

		/* Make sure we don't hog up the CPU if the FIFO never (or
		 * very rarely) gets empty.
		 */
		k_yield();
   1bfec:	f7ff ffc9 	bl	1bf82 <k_yield>
   1bff0:	e7e3      	b.n	1bfba <z_work_q_main+0x10>
			continue;
   1bff2:	bf00      	nop
	while (true) {
   1bff4:	e7e1      	b.n	1bfba <z_work_q_main+0x10>

0001bff6 <z_arch_printk_char_out>:
{
   1bff6:	b480      	push	{r7}
   1bff8:	b083      	sub	sp, #12
   1bffa:	af00      	add	r7, sp, #0
   1bffc:	6078      	str	r0, [r7, #4]
	return 0;
   1bffe:	2300      	movs	r3, #0
}
   1c000:	4618      	mov	r0, r3
   1c002:	370c      	adds	r7, #12
   1c004:	46bd      	mov	sp, r7
   1c006:	bc80      	pop	{r7}
   1c008:	4770      	bx	lr

0001c00a <print_err>:
{
   1c00a:	b580      	push	{r7, lr}
   1c00c:	b082      	sub	sp, #8
   1c00e:	af00      	add	r7, sp, #0
   1c010:	6078      	str	r0, [r7, #4]
   1c012:	6039      	str	r1, [r7, #0]
	out('E', ctx);
   1c014:	687b      	ldr	r3, [r7, #4]
   1c016:	6839      	ldr	r1, [r7, #0]
   1c018:	2045      	movs	r0, #69	; 0x45
   1c01a:	4798      	blx	r3
	out('R', ctx);
   1c01c:	687b      	ldr	r3, [r7, #4]
   1c01e:	6839      	ldr	r1, [r7, #0]
   1c020:	2052      	movs	r0, #82	; 0x52
   1c022:	4798      	blx	r3
	out('R', ctx);
   1c024:	687b      	ldr	r3, [r7, #4]
   1c026:	6839      	ldr	r1, [r7, #0]
   1c028:	2052      	movs	r0, #82	; 0x52
   1c02a:	4798      	blx	r3
}
   1c02c:	bf00      	nop
   1c02e:	3708      	adds	r7, #8
   1c030:	46bd      	mov	sp, r7
   1c032:	bd80      	pop	{r7, pc}

0001c034 <printk>:
{
   1c034:	b40f      	push	{r0, r1, r2, r3}
   1c036:	b580      	push	{r7, lr}
   1c038:	b082      	sub	sp, #8
   1c03a:	af00      	add	r7, sp, #0
	va_start(ap, fmt);
   1c03c:	f107 0314 	add.w	r3, r7, #20
   1c040:	607b      	str	r3, [r7, #4]
		vprintk(fmt, ap);
   1c042:	6879      	ldr	r1, [r7, #4]
   1c044:	6938      	ldr	r0, [r7, #16]
   1c046:	f7ef f99d 	bl	b384 <vprintk>
}
   1c04a:	bf00      	nop
   1c04c:	3708      	adds	r7, #8
   1c04e:	46bd      	mov	sp, r7
   1c050:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   1c054:	b004      	add	sp, #16
   1c056:	4770      	bx	lr

0001c058 <_printk_hex_ulong>:
{
   1c058:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c05a:	b08b      	sub	sp, #44	; 0x2c
   1c05c:	af00      	add	r7, sp, #0
   1c05e:	60f8      	str	r0, [r7, #12]
   1c060:	60b9      	str	r1, [r7, #8]
   1c062:	e9c7 2300 	strd	r2, r3, [r7]
	int size = sizeof(num) * 2;
   1c066:	2310      	movs	r3, #16
   1c068:	627b      	str	r3, [r7, #36]	; 0x24
	int found_largest_digit = 0;
   1c06a:	2300      	movs	r3, #0
   1c06c:	623b      	str	r3, [r7, #32]
	int remaining = 16; /* 16 digits max */
   1c06e:	2310      	movs	r3, #16
   1c070:	61fb      	str	r3, [r7, #28]
	int digits = 0;
   1c072:	2300      	movs	r3, #0
   1c074:	61bb      	str	r3, [r7, #24]
	for (; size != 0; size--) {
   1c076:	e04f      	b.n	1c118 <_printk_hex_ulong+0xc0>
		char nibble = (num >> ((size - 1) << 2) & 0xf);
   1c078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c07a:	3b01      	subs	r3, #1
   1c07c:	0099      	lsls	r1, r3, #2
   1c07e:	e9d7 2300 	ldrd	r2, r3, [r7]
   1c082:	f1c1 0620 	rsb	r6, r1, #32
   1c086:	f1a1 0020 	sub.w	r0, r1, #32
   1c08a:	fa22 f401 	lsr.w	r4, r2, r1
   1c08e:	fa03 f606 	lsl.w	r6, r3, r6
   1c092:	4334      	orrs	r4, r6
   1c094:	fa23 f000 	lsr.w	r0, r3, r0
   1c098:	4304      	orrs	r4, r0
   1c09a:	fa23 f501 	lsr.w	r5, r3, r1
   1c09e:	b2e3      	uxtb	r3, r4
   1c0a0:	f003 030f 	and.w	r3, r3, #15
   1c0a4:	75fb      	strb	r3, [r7, #23]
		if (nibble != 0 || found_largest_digit != 0 || size == 1) {
   1c0a6:	7dfb      	ldrb	r3, [r7, #23]
   1c0a8:	2b00      	cmp	r3, #0
   1c0aa:	d105      	bne.n	1c0b8 <_printk_hex_ulong+0x60>
   1c0ac:	6a3b      	ldr	r3, [r7, #32]
   1c0ae:	2b00      	cmp	r3, #0
   1c0b0:	d102      	bne.n	1c0b8 <_printk_hex_ulong+0x60>
   1c0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c0b4:	2b01      	cmp	r3, #1
   1c0b6:	d115      	bne.n	1c0e4 <_printk_hex_ulong+0x8c>
			found_largest_digit = 1;
   1c0b8:	2301      	movs	r3, #1
   1c0ba:	623b      	str	r3, [r7, #32]
			nibble += nibble > 9 ? 87 : 48;
   1c0bc:	7dfb      	ldrb	r3, [r7, #23]
   1c0be:	2b09      	cmp	r3, #9
   1c0c0:	d901      	bls.n	1c0c6 <_printk_hex_ulong+0x6e>
   1c0c2:	2257      	movs	r2, #87	; 0x57
   1c0c4:	e000      	b.n	1c0c8 <_printk_hex_ulong+0x70>
   1c0c6:	2230      	movs	r2, #48	; 0x30
   1c0c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
   1c0cc:	4413      	add	r3, r2
   1c0ce:	b25b      	sxtb	r3, r3
   1c0d0:	75fb      	strb	r3, [r7, #23]
			out((int)nibble, ctx);
   1c0d2:	7dfa      	ldrb	r2, [r7, #23]
   1c0d4:	68fb      	ldr	r3, [r7, #12]
   1c0d6:	68b9      	ldr	r1, [r7, #8]
   1c0d8:	4610      	mov	r0, r2
   1c0da:	4798      	blx	r3
			digits++;
   1c0dc:	69bb      	ldr	r3, [r7, #24]
   1c0de:	3301      	adds	r3, #1
   1c0e0:	61bb      	str	r3, [r7, #24]
			continue;
   1c0e2:	e016      	b.n	1c112 <_printk_hex_ulong+0xba>
		if (remaining-- <= min_width) {
   1c0e4:	69fb      	ldr	r3, [r7, #28]
   1c0e6:	1e5a      	subs	r2, r3, #1
   1c0e8:	61fa      	str	r2, [r7, #28]
   1c0ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1c0ec:	429a      	cmp	r2, r3
   1c0ee:	db10      	blt.n	1c112 <_printk_hex_ulong+0xba>
			if (padding == PAD_ZERO_BEFORE) {
   1c0f0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   1c0f4:	2b01      	cmp	r3, #1
   1c0f6:	d104      	bne.n	1c102 <_printk_hex_ulong+0xaa>
				out('0', ctx);
   1c0f8:	68fb      	ldr	r3, [r7, #12]
   1c0fa:	68b9      	ldr	r1, [r7, #8]
   1c0fc:	2030      	movs	r0, #48	; 0x30
   1c0fe:	4798      	blx	r3
   1c100:	e007      	b.n	1c112 <_printk_hex_ulong+0xba>
			} else if (padding == PAD_SPACE_BEFORE) {
   1c102:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   1c106:	2b02      	cmp	r3, #2
   1c108:	d103      	bne.n	1c112 <_printk_hex_ulong+0xba>
				out(' ', ctx);
   1c10a:	68fb      	ldr	r3, [r7, #12]
   1c10c:	68b9      	ldr	r1, [r7, #8]
   1c10e:	2020      	movs	r0, #32
   1c110:	4798      	blx	r3
	for (; size != 0; size--) {
   1c112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c114:	3b01      	subs	r3, #1
   1c116:	627b      	str	r3, [r7, #36]	; 0x24
   1c118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c11a:	2b00      	cmp	r3, #0
   1c11c:	d1ac      	bne.n	1c078 <_printk_hex_ulong+0x20>
	if (padding == PAD_SPACE_AFTER) {
   1c11e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   1c122:	2b03      	cmp	r3, #3
   1c124:	d10e      	bne.n	1c144 <_printk_hex_ulong+0xec>
		remaining = min_width * 2 - digits;
   1c126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1c128:	005a      	lsls	r2, r3, #1
   1c12a:	69bb      	ldr	r3, [r7, #24]
   1c12c:	1ad3      	subs	r3, r2, r3
   1c12e:	61fb      	str	r3, [r7, #28]
		while (remaining-- > 0) {
   1c130:	e003      	b.n	1c13a <_printk_hex_ulong+0xe2>
			out(' ', ctx);
   1c132:	68fb      	ldr	r3, [r7, #12]
   1c134:	68b9      	ldr	r1, [r7, #8]
   1c136:	2020      	movs	r0, #32
   1c138:	4798      	blx	r3
		while (remaining-- > 0) {
   1c13a:	69fb      	ldr	r3, [r7, #28]
   1c13c:	1e5a      	subs	r2, r3, #1
   1c13e:	61fa      	str	r2, [r7, #28]
   1c140:	2b00      	cmp	r3, #0
   1c142:	dcf6      	bgt.n	1c132 <_printk_hex_ulong+0xda>
}
   1c144:	bf00      	nop
   1c146:	372c      	adds	r7, #44	; 0x2c
   1c148:	46bd      	mov	sp, r7
   1c14a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c14c <str_out>:
{
   1c14c:	b480      	push	{r7}
   1c14e:	b083      	sub	sp, #12
   1c150:	af00      	add	r7, sp, #0
   1c152:	6078      	str	r0, [r7, #4]
   1c154:	6039      	str	r1, [r7, #0]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1c156:	683b      	ldr	r3, [r7, #0]
   1c158:	681b      	ldr	r3, [r3, #0]
   1c15a:	2b00      	cmp	r3, #0
   1c15c:	d005      	beq.n	1c16a <str_out+0x1e>
   1c15e:	683b      	ldr	r3, [r7, #0]
   1c160:	689a      	ldr	r2, [r3, #8]
   1c162:	683b      	ldr	r3, [r7, #0]
   1c164:	685b      	ldr	r3, [r3, #4]
   1c166:	429a      	cmp	r2, r3
   1c168:	db06      	blt.n	1c178 <str_out+0x2c>
		ctx->count++;
   1c16a:	683b      	ldr	r3, [r7, #0]
   1c16c:	689b      	ldr	r3, [r3, #8]
   1c16e:	1c5a      	adds	r2, r3, #1
   1c170:	683b      	ldr	r3, [r7, #0]
   1c172:	609a      	str	r2, [r3, #8]
		return c;
   1c174:	687b      	ldr	r3, [r7, #4]
   1c176:	e01d      	b.n	1c1b4 <str_out+0x68>
	if (ctx->count == ctx->max - 1) {
   1c178:	683b      	ldr	r3, [r7, #0]
   1c17a:	689a      	ldr	r2, [r3, #8]
   1c17c:	683b      	ldr	r3, [r7, #0]
   1c17e:	685b      	ldr	r3, [r3, #4]
   1c180:	3b01      	subs	r3, #1
   1c182:	429a      	cmp	r2, r3
   1c184:	d10a      	bne.n	1c19c <str_out+0x50>
		ctx->str[ctx->count++] = '\0';
   1c186:	683b      	ldr	r3, [r7, #0]
   1c188:	681a      	ldr	r2, [r3, #0]
   1c18a:	683b      	ldr	r3, [r7, #0]
   1c18c:	689b      	ldr	r3, [r3, #8]
   1c18e:	1c58      	adds	r0, r3, #1
   1c190:	6839      	ldr	r1, [r7, #0]
   1c192:	6088      	str	r0, [r1, #8]
   1c194:	4413      	add	r3, r2
   1c196:	2200      	movs	r2, #0
   1c198:	701a      	strb	r2, [r3, #0]
   1c19a:	e00a      	b.n	1c1b2 <str_out+0x66>
		ctx->str[ctx->count++] = c;
   1c19c:	683b      	ldr	r3, [r7, #0]
   1c19e:	681a      	ldr	r2, [r3, #0]
   1c1a0:	683b      	ldr	r3, [r7, #0]
   1c1a2:	689b      	ldr	r3, [r3, #8]
   1c1a4:	1c58      	adds	r0, r3, #1
   1c1a6:	6839      	ldr	r1, [r7, #0]
   1c1a8:	6088      	str	r0, [r1, #8]
   1c1aa:	4413      	add	r3, r2
   1c1ac:	687a      	ldr	r2, [r7, #4]
   1c1ae:	b2d2      	uxtb	r2, r2
   1c1b0:	701a      	strb	r2, [r3, #0]
	return c;
   1c1b2:	687b      	ldr	r3, [r7, #4]
}
   1c1b4:	4618      	mov	r0, r3
   1c1b6:	370c      	adds	r7, #12
   1c1b8:	46bd      	mov	sp, r7
   1c1ba:	bc80      	pop	{r7}
   1c1bc:	4770      	bx	lr

0001c1be <snprintk>:
{
   1c1be:	b40c      	push	{r2, r3}
   1c1c0:	b580      	push	{r7, lr}
   1c1c2:	b084      	sub	sp, #16
   1c1c4:	af00      	add	r7, sp, #0
   1c1c6:	6078      	str	r0, [r7, #4]
   1c1c8:	6039      	str	r1, [r7, #0]
	va_start(ap, fmt);
   1c1ca:	f107 031c 	add.w	r3, r7, #28
   1c1ce:	60bb      	str	r3, [r7, #8]
	ret = vsnprintk(str, size, fmt, ap);
   1c1d0:	68bb      	ldr	r3, [r7, #8]
   1c1d2:	69ba      	ldr	r2, [r7, #24]
   1c1d4:	6839      	ldr	r1, [r7, #0]
   1c1d6:	6878      	ldr	r0, [r7, #4]
   1c1d8:	f7ef f960 	bl	b49c <vsnprintk>
   1c1dc:	60f8      	str	r0, [r7, #12]
	return ret;
   1c1de:	68fb      	ldr	r3, [r7, #12]
}
   1c1e0:	4618      	mov	r0, r3
   1c1e2:	3710      	adds	r7, #16
   1c1e4:	46bd      	mov	sp, r7
   1c1e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   1c1ea:	b002      	add	sp, #8
   1c1ec:	4770      	bx	lr

0001c1ee <_ConfigAbsSyms>:

/* file is auto-generated, do not modify ! */

#include <toolchain.h>

GEN_ABS_SYM_BEGIN (_ConfigAbsSyms)
   1c1ee:	b480      	push	{r7}
   1c1f0:	af00      	add	r7, sp, #0
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_STAT, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);

GEN_ABS_SYM_END
   1c1f2:	bf00      	nop
   1c1f4:	46bd      	mov	sp, r7
   1c1f6:	bc80      	pop	{r7}
   1c1f8:	4770      	bx	lr

0001c1fa <nrf_power_dcdcen_set>:
}
#endif

#if NRF_POWER_HAS_DCDCEN
__STATIC_INLINE void nrf_power_dcdcen_set(bool enable)
{
   1c1fa:	b480      	push	{r7}
   1c1fc:	b083      	sub	sp, #12
   1c1fe:	af00      	add	r7, sp, #0
   1c200:	4603      	mov	r3, r0
   1c202:	71fb      	strb	r3, [r7, #7]
    NRF_POWER->DCDCEN = (enable ?
        POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   1c204:	79fb      	ldrb	r3, [r7, #7]
   1c206:	2b00      	cmp	r3, #0
   1c208:	d001      	beq.n	1c20e <nrf_power_dcdcen_set+0x14>
   1c20a:	2301      	movs	r3, #1
   1c20c:	e000      	b.n	1c210 <nrf_power_dcdcen_set+0x16>
   1c20e:	2300      	movs	r3, #0
    NRF_POWER->DCDCEN = (enable ?
   1c210:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1c214:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            POWER_DCDCEN_DCDCEN_Pos;
}
   1c218:	bf00      	nop
   1c21a:	370c      	adds	r7, #12
   1c21c:	46bd      	mov	sp, r7
   1c21e:	bc80      	pop	{r7}
   1c220:	4770      	bx	lr

0001c222 <nrfx_isr>:
 */

#include <nrfx.h>

void nrfx_isr(void *irq_handler)
{
   1c222:	b580      	push	{r7, lr}
   1c224:	b082      	sub	sp, #8
   1c226:	af00      	add	r7, sp, #0
   1c228:	6078      	str	r0, [r7, #4]
	((nrfx_irq_handler_t)irq_handler)();
   1c22a:	687b      	ldr	r3, [r7, #4]
   1c22c:	4798      	blx	r3
}
   1c22e:	bf00      	nop
   1c230:	3708      	adds	r7, #8
   1c232:	46bd      	mov	sp, r7
   1c234:	bd80      	pop	{r7, pc}

0001c236 <nrfx_is_in_ram>:
{
   1c236:	b480      	push	{r7}
   1c238:	b083      	sub	sp, #12
   1c23a:	af00      	add	r7, sp, #0
   1c23c:	6078      	str	r0, [r7, #4]
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1c23e:	687b      	ldr	r3, [r7, #4]
   1c240:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   1c244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1c248:	bf0c      	ite	eq
   1c24a:	2301      	moveq	r3, #1
   1c24c:	2300      	movne	r3, #0
   1c24e:	b2db      	uxtb	r3, r3
}
   1c250:	4618      	mov	r0, r3
   1c252:	370c      	adds	r7, #12
   1c254:	46bd      	mov	sp, r7
   1c256:	bc80      	pop	{r7}
   1c258:	4770      	bx	lr

0001c25a <atomic_and>:
{
   1c25a:	b480      	push	{r7}
   1c25c:	b083      	sub	sp, #12
   1c25e:	af00      	add	r7, sp, #0
   1c260:	6078      	str	r0, [r7, #4]
   1c262:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c264:	683a      	ldr	r2, [r7, #0]
   1c266:	687b      	ldr	r3, [r7, #4]
   1c268:	f3bf 8f5b 	dmb	ish
   1c26c:	e853 1f00 	ldrex	r1, [r3]
   1c270:	ea01 0002 	and.w	r0, r1, r2
   1c274:	e843 0c00 	strex	ip, r0, [r3]
   1c278:	f1bc 0f00 	cmp.w	ip, #0
   1c27c:	d1f6      	bne.n	1c26c <atomic_and+0x12>
   1c27e:	f3bf 8f5b 	dmb	ish
   1c282:	460b      	mov	r3, r1
}
   1c284:	4618      	mov	r0, r3
   1c286:	370c      	adds	r7, #12
   1c288:	46bd      	mov	sp, r7
   1c28a:	bc80      	pop	{r7}
   1c28c:	4770      	bx	lr

0001c28e <nrf_usbd_getRegPtr>:
{
   1c28e:	b480      	push	{r7}
   1c290:	b083      	sub	sp, #12
   1c292:	af00      	add	r7, sp, #0
   1c294:	6078      	str	r0, [r7, #4]
    return (volatile uint32_t*)(((uint8_t *)NRF_USBD) + (uint32_t)offset);
   1c296:	687b      	ldr	r3, [r7, #4]
   1c298:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c29c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
}
   1c2a0:	4618      	mov	r0, r3
   1c2a2:	370c      	adds	r7, #12
   1c2a4:	46bd      	mov	sp, r7
   1c2a6:	bc80      	pop	{r7}
   1c2a8:	4770      	bx	lr

0001c2aa <nrf_usbd_getRegPtr_c>:
{
   1c2aa:	b480      	push	{r7}
   1c2ac:	b083      	sub	sp, #12
   1c2ae:	af00      	add	r7, sp, #0
   1c2b0:	6078      	str	r0, [r7, #4]
    return (volatile const uint32_t*)(((uint8_t *)NRF_USBD) + (uint32_t)offset);
   1c2b2:	687b      	ldr	r3, [r7, #4]
   1c2b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c2b8:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
}
   1c2bc:	4618      	mov	r0, r3
   1c2be:	370c      	adds	r7, #12
   1c2c0:	46bd      	mov	sp, r7
   1c2c2:	bc80      	pop	{r7}
   1c2c4:	4770      	bx	lr

0001c2c6 <nrf_usbd_task_trigger>:
{
   1c2c6:	b580      	push	{r7, lr}
   1c2c8:	b082      	sub	sp, #8
   1c2ca:	af00      	add	r7, sp, #0
   1c2cc:	4603      	mov	r3, r0
   1c2ce:	71fb      	strb	r3, [r7, #7]
    *(nrf_usbd_getRegPtr((uint32_t)task)) = 1UL;
   1c2d0:	79fb      	ldrb	r3, [r7, #7]
   1c2d2:	4618      	mov	r0, r3
   1c2d4:	f7ff ffdb 	bl	1c28e <nrf_usbd_getRegPtr>
   1c2d8:	4602      	mov	r2, r0
   1c2da:	2301      	movs	r3, #1
   1c2dc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("isb 0xF":::"memory");
   1c2de:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   1c2e2:	f3bf 8f4f 	dsb	sy
}
   1c2e6:	bf00      	nop
   1c2e8:	3708      	adds	r7, #8
   1c2ea:	46bd      	mov	sp, r7
   1c2ec:	bd80      	pop	{r7, pc}

0001c2ee <nrf_usbd_event_clear>:
{
   1c2ee:	b580      	push	{r7, lr}
   1c2f0:	b082      	sub	sp, #8
   1c2f2:	af00      	add	r7, sp, #0
   1c2f4:	4603      	mov	r3, r0
   1c2f6:	80fb      	strh	r3, [r7, #6]
    *(nrf_usbd_getRegPtr((uint32_t)event)) = 0UL;
   1c2f8:	88fb      	ldrh	r3, [r7, #6]
   1c2fa:	4618      	mov	r0, r3
   1c2fc:	f7ff ffc7 	bl	1c28e <nrf_usbd_getRegPtr>
   1c300:	4602      	mov	r2, r0
   1c302:	2300      	movs	r3, #0
   1c304:	6013      	str	r3, [r2, #0]
  __ASM volatile ("isb 0xF":::"memory");
   1c306:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   1c30a:	f3bf 8f4f 	dsb	sy
}
   1c30e:	bf00      	nop
   1c310:	3708      	adds	r7, #8
   1c312:	46bd      	mov	sp, r7
   1c314:	bd80      	pop	{r7, pc}

0001c316 <nrf_usbd_event_check>:
{
   1c316:	b580      	push	{r7, lr}
   1c318:	b082      	sub	sp, #8
   1c31a:	af00      	add	r7, sp, #0
   1c31c:	4603      	mov	r3, r0
   1c31e:	80fb      	strh	r3, [r7, #6]
    return (bool)*nrf_usbd_getRegPtr_c((uint32_t)event);
   1c320:	88fb      	ldrh	r3, [r7, #6]
   1c322:	4618      	mov	r0, r3
   1c324:	f7ff ffc1 	bl	1c2aa <nrf_usbd_getRegPtr_c>
   1c328:	4603      	mov	r3, r0
   1c32a:	681b      	ldr	r3, [r3, #0]
   1c32c:	2b00      	cmp	r3, #0
   1c32e:	bf14      	ite	ne
   1c330:	2301      	movne	r3, #1
   1c332:	2300      	moveq	r3, #0
   1c334:	b2db      	uxtb	r3, r3
}
   1c336:	4618      	mov	r0, r3
   1c338:	3708      	adds	r7, #8
   1c33a:	46bd      	mov	sp, r7
   1c33c:	bd80      	pop	{r7, pc}

0001c33e <nrf_usbd_event_get_and_clear>:
{
   1c33e:	b580      	push	{r7, lr}
   1c340:	b084      	sub	sp, #16
   1c342:	af00      	add	r7, sp, #0
   1c344:	4603      	mov	r3, r0
   1c346:	80fb      	strh	r3, [r7, #6]
    bool ret = nrf_usbd_event_check(event);
   1c348:	88fb      	ldrh	r3, [r7, #6]
   1c34a:	4618      	mov	r0, r3
   1c34c:	f7ff ffe3 	bl	1c316 <nrf_usbd_event_check>
   1c350:	4603      	mov	r3, r0
   1c352:	73fb      	strb	r3, [r7, #15]
    if (ret)
   1c354:	7bfb      	ldrb	r3, [r7, #15]
   1c356:	2b00      	cmp	r3, #0
   1c358:	d003      	beq.n	1c362 <nrf_usbd_event_get_and_clear+0x24>
        nrf_usbd_event_clear(event);
   1c35a:	88fb      	ldrh	r3, [r7, #6]
   1c35c:	4618      	mov	r0, r3
   1c35e:	f7ff ffc6 	bl	1c2ee <nrf_usbd_event_clear>
    return ret;
   1c362:	7bfb      	ldrb	r3, [r7, #15]
}
   1c364:	4618      	mov	r0, r3
   1c366:	3710      	adds	r7, #16
   1c368:	46bd      	mov	sp, r7
   1c36a:	bd80      	pop	{r7, pc}

0001c36c <nrf_usbd_eventcause_get_and_clear>:
{
   1c36c:	b580      	push	{r7, lr}
   1c36e:	b082      	sub	sp, #8
   1c370:	af00      	add	r7, sp, #0
    ret = nrf_usbd_eventcause_get();
   1c372:	f7ef fc05 	bl	bb80 <nrf_usbd_eventcause_get>
   1c376:	6078      	str	r0, [r7, #4]
    nrf_usbd_eventcause_clear(ret);
   1c378:	6878      	ldr	r0, [r7, #4]
   1c37a:	f7ef fc0d 	bl	bb98 <nrf_usbd_eventcause_clear>
  __ASM volatile ("isb 0xF":::"memory");
   1c37e:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   1c382:	f3bf 8f4f 	dsb	sy
    return ret;
   1c386:	687b      	ldr	r3, [r7, #4]
}
   1c388:	4618      	mov	r0, r3
   1c38a:	3708      	adds	r7, #8
   1c38c:	46bd      	mov	sp, r7
   1c38e:	bd80      	pop	{r7, pc}

0001c390 <nrf_usbd_ep_is_stall>:
{
   1c390:	b580      	push	{r7, lr}
   1c392:	b082      	sub	sp, #8
   1c394:	af00      	add	r7, sp, #0
   1c396:	4603      	mov	r3, r0
   1c398:	71fb      	strb	r3, [r7, #7]
    if (NRF_USBD_EPISO_CHECK(ep))
   1c39a:	79fb      	ldrb	r3, [r7, #7]
   1c39c:	f003 0308 	and.w	r3, r3, #8
   1c3a0:	2b00      	cmp	r3, #0
   1c3a2:	d001      	beq.n	1c3a8 <nrf_usbd_ep_is_stall+0x18>
        return false;
   1c3a4:	2300      	movs	r3, #0
   1c3a6:	e009      	b.n	1c3bc <nrf_usbd_ep_is_stall+0x2c>
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_haltedep(ep);
   1c3a8:	79fb      	ldrb	r3, [r7, #7]
   1c3aa:	4618      	mov	r0, r3
   1c3ac:	f7ef fc08 	bl	bbc0 <nrf_usbd_haltedep>
   1c3b0:	4603      	mov	r3, r0
   1c3b2:	2b01      	cmp	r3, #1
   1c3b4:	bf0c      	ite	eq
   1c3b6:	2301      	moveq	r3, #1
   1c3b8:	2300      	movne	r3, #0
   1c3ba:	b2db      	uxtb	r3, r3
}
   1c3bc:	4618      	mov	r0, r3
   1c3be:	3708      	adds	r7, #8
   1c3c0:	46bd      	mov	sp, r7
   1c3c2:	bd80      	pop	{r7, pc}

0001c3c4 <nrf_usbd_epdatastatus_get_and_clear>:
{
   1c3c4:	b580      	push	{r7, lr}
   1c3c6:	b082      	sub	sp, #8
   1c3c8:	af00      	add	r7, sp, #0
    ret = nrf_usbd_epdatastatus_get();
   1c3ca:	f7ef fc37 	bl	bc3c <nrf_usbd_epdatastatus_get>
   1c3ce:	6078      	str	r0, [r7, #4]
    nrf_usbd_epdatastatus_clear(ret);
   1c3d0:	6878      	ldr	r0, [r7, #4]
   1c3d2:	f7ef fc3f 	bl	bc54 <nrf_usbd_epdatastatus_clear>
    return ret;
   1c3d6:	687b      	ldr	r3, [r7, #4]
}
   1c3d8:	4618      	mov	r0, r3
   1c3da:	3708      	adds	r7, #8
   1c3dc:	46bd      	mov	sp, r7
   1c3de:	bd80      	pop	{r7, pc}

0001c3e0 <nrfx_usbd_errata_104>:
    return (nrfx_usbd_errata_type_52840() && (*(uint32_t *)0x10000134UL >= 0x3UL));
}

/* Errata: USBD: EPDATA event is not always generated. */
static inline bool nrfx_usbd_errata_104(void)
{
   1c3e0:	b580      	push	{r7, lr}
   1c3e2:	af00      	add	r7, sp, #0
    return (NRFX_USBD_ERRATA_ENABLE && (!nrfx_usbd_errata_type_52840_eng_b()));
   1c3e4:	f7ef ff98 	bl	c318 <nrfx_usbd_errata_type_52840_eng_b>
   1c3e8:	4603      	mov	r3, r0
   1c3ea:	2b00      	cmp	r3, #0
   1c3ec:	bf14      	ite	ne
   1c3ee:	2301      	movne	r3, #1
   1c3f0:	2300      	moveq	r3, #0
   1c3f2:	b2db      	uxtb	r3, r3
   1c3f4:	f083 0301 	eor.w	r3, r3, #1
   1c3f8:	b2db      	uxtb	r3, r3
   1c3fa:	f003 0301 	and.w	r3, r3, #1
   1c3fe:	b2db      	uxtb	r3, r3
}
   1c400:	4618      	mov	r0, r3
   1c402:	bd80      	pop	{r7, pc}

0001c404 <nrfx_usbd_errata_166>:
    return (NRFX_USBD_ERRATA_ENABLE && (!nrfx_usbd_errata_type_52840_eng_b()));
}

/* Errata: ISO double buffering not functional. */
static inline bool nrfx_usbd_errata_166(void)
{
   1c404:	b480      	push	{r7}
   1c406:	af00      	add	r7, sp, #0
    return (NRFX_USBD_ERRATA_ENABLE && true);
   1c408:	2301      	movs	r3, #1
}
   1c40a:	4618      	mov	r0, r3
   1c40c:	46bd      	mov	sp, r7
   1c40e:	bc80      	pop	{r7}
   1c410:	4770      	bx	lr

0001c412 <nrfx_usbd_errata_171>:

/* Errata: USBD might not reach its active state. */
static inline bool nrfx_usbd_errata_171(void)
{
   1c412:	b480      	push	{r7}
   1c414:	af00      	add	r7, sp, #0
    return (NRFX_USBD_ERRATA_ENABLE && true);
   1c416:	2301      	movs	r3, #1
}
   1c418:	4618      	mov	r0, r3
   1c41a:	46bd      	mov	sp, r7
   1c41c:	bc80      	pop	{r7}
   1c41e:	4770      	bx	lr

0001c420 <nrfx_usbd_errata_187>:

/* Errata: USB cannot be enabled. */
static inline bool nrfx_usbd_errata_187(void)
{
   1c420:	b580      	push	{r7, lr}
   1c422:	af00      	add	r7, sp, #0
    return (NRFX_USBD_ERRATA_ENABLE && nrfx_usbd_errata_type_52840_eng_b());
   1c424:	f7ef ff78 	bl	c318 <nrfx_usbd_errata_type_52840_eng_b>
   1c428:	4603      	mov	r3, r0
}
   1c42a:	4618      	mov	r0, r3
   1c42c:	bd80      	pop	{r7, pc}

0001c42e <nrfx_usbd_errata_199>:

/* Errata: USBD cannot receive tasks during DMA. */
static inline bool nrfx_usbd_errata_199(void)
{
   1c42e:	b480      	push	{r7}
   1c430:	af00      	add	r7, sp, #0
    return (NRFX_USBD_ERRATA_ENABLE && true);
   1c432:	2301      	movs	r3, #1
}
   1c434:	4618      	mov	r0, r3
   1c436:	46bd      	mov	sp, r7
   1c438:	bc80      	pop	{r7}
   1c43a:	4770      	bx	lr

0001c43c <nrfx_usbd_errata_200>:

/* Errata: SIZE.EPOUT not writable. */
static inline bool nrfx_usbd_errata_200(void)
{
   1c43c:	b580      	push	{r7, lr}
   1c43e:	af00      	add	r7, sp, #0
    return (NRFX_USBD_ERRATA_ENABLE && (!nrfx_usbd_errata_type_52840_eng_b()));
   1c440:	f7ef ff6a 	bl	c318 <nrfx_usbd_errata_type_52840_eng_b>
   1c444:	4603      	mov	r3, r0
   1c446:	2b00      	cmp	r3, #0
   1c448:	bf14      	ite	ne
   1c44a:	2301      	movne	r3, #1
   1c44c:	2300      	moveq	r3, #0
   1c44e:	b2db      	uxtb	r3, r3
   1c450:	f083 0301 	eor.w	r3, r3, #1
   1c454:	b2db      	uxtb	r3, r3
   1c456:	f003 0301 	and.w	r3, r3, #1
   1c45a:	b2db      	uxtb	r3, r3
}
   1c45c:	4618      	mov	r0, r3
   1c45e:	bd80      	pop	{r7, pc}

0001c460 <bit2ep>:
{
   1c460:	b480      	push	{r7}
   1c462:	b083      	sub	sp, #12
   1c464:	af00      	add	r7, sp, #0
   1c466:	4603      	mov	r3, r0
   1c468:	71fb      	strb	r3, [r7, #7]
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1c46a:	79fb      	ldrb	r3, [r7, #7]
   1c46c:	2b0f      	cmp	r3, #15
   1c46e:	d905      	bls.n	1c47c <bit2ep+0x1c>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
   1c470:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1c474:	3b10      	subs	r3, #16
   1c476:	b25b      	sxtb	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1c478:	b2db      	uxtb	r3, r3
   1c47a:	e003      	b.n	1c484 <bit2ep+0x24>
   1c47c:	79fb      	ldrb	r3, [r7, #7]
   1c47e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1c482:	b2db      	uxtb	r3, r3
}
   1c484:	4618      	mov	r0, r3
   1c486:	370c      	adds	r7, #12
   1c488:	46bd      	mov	sp, r7
   1c48a:	bc80      	pop	{r7}
   1c48c:	4770      	bx	lr

0001c48e <usbd_dma_start>:
{
   1c48e:	b580      	push	{r7, lr}
   1c490:	b082      	sub	sp, #8
   1c492:	af00      	add	r7, sp, #0
   1c494:	4603      	mov	r3, r0
   1c496:	71fb      	strb	r3, [r7, #7]
    nrf_usbd_task_trigger(task_start_ep(ep));
   1c498:	79fb      	ldrb	r3, [r7, #7]
   1c49a:	4618      	mov	r0, r3
   1c49c:	f7f0 f9a0 	bl	c7e0 <task_start_ep>
   1c4a0:	4603      	mov	r3, r0
   1c4a2:	4618      	mov	r0, r3
   1c4a4:	f7ff ff0f 	bl	1c2c6 <nrf_usbd_task_trigger>
}
   1c4a8:	bf00      	nop
   1c4aa:	3708      	adds	r7, #8
   1c4ac:	46bd      	mov	sp, r7
   1c4ae:	bd80      	pop	{r7, pc}

0001c4b0 <nrfx_usbd_isoinconfig_set>:
{
   1c4b0:	b580      	push	{r7, lr}
   1c4b2:	b082      	sub	sp, #8
   1c4b4:	af00      	add	r7, sp, #0
   1c4b6:	4603      	mov	r3, r0
   1c4b8:	71fb      	strb	r3, [r7, #7]
    nrf_usbd_isoinconfig_set(config);
   1c4ba:	79fb      	ldrb	r3, [r7, #7]
   1c4bc:	4618      	mov	r0, r3
   1c4be:	f7ef fe8d 	bl	c1dc <nrf_usbd_isoinconfig_set>
}
   1c4c2:	bf00      	nop
   1c4c4:	3708      	adds	r7, #8
   1c4c6:	46bd      	mov	sp, r7
   1c4c8:	bd80      	pop	{r7, pc}

0001c4ca <usbd_int_rise>:
{
   1c4ca:	b580      	push	{r7, lr}
   1c4cc:	af00      	add	r7, sp, #0
    NRFX_IRQ_PENDING_SET(USBD_IRQn);
   1c4ce:	2027      	movs	r0, #39	; 0x27
   1c4d0:	f7ef fabe 	bl	ba50 <__NVIC_SetPendingIRQ>
}
   1c4d4:	bf00      	nop
   1c4d6:	bd80      	pop	{r7, pc}

0001c4d8 <ev_started_handler>:
{
   1c4d8:	b480      	push	{r7}
   1c4da:	af00      	add	r7, sp, #0
}
   1c4dc:	bf00      	nop
   1c4de:	46bd      	mov	sp, r7
   1c4e0:	bc80      	pop	{r7}
   1c4e2:	4770      	bx	lr

0001c4e4 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
   1c4e4:	b580      	push	{r7, lr}
   1c4e6:	af00      	add	r7, sp, #0
   1c4e8:	f7f0 fb7e 	bl	cbe8 <nrf_usbd_ep0in_dma_handler>
   1c4ec:	bf00      	nop
   1c4ee:	bd80      	pop	{r7, pc}

0001c4f0 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   1c4f0:	b580      	push	{r7, lr}
   1c4f2:	af00      	add	r7, sp, #0
   1c4f4:	2081      	movs	r0, #129	; 0x81
   1c4f6:	f7f0 fbad 	bl	cc54 <nrf_usbd_epin_dma_handler>
   1c4fa:	bf00      	nop
   1c4fc:	bd80      	pop	{r7, pc}

0001c4fe <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   1c4fe:	b580      	push	{r7, lr}
   1c500:	af00      	add	r7, sp, #0
   1c502:	2082      	movs	r0, #130	; 0x82
   1c504:	f7f0 fba6 	bl	cc54 <nrf_usbd_epin_dma_handler>
   1c508:	bf00      	nop
   1c50a:	bd80      	pop	{r7, pc}

0001c50c <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   1c50c:	b580      	push	{r7, lr}
   1c50e:	af00      	add	r7, sp, #0
   1c510:	2083      	movs	r0, #131	; 0x83
   1c512:	f7f0 fb9f 	bl	cc54 <nrf_usbd_epin_dma_handler>
   1c516:	bf00      	nop
   1c518:	bd80      	pop	{r7, pc}

0001c51a <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   1c51a:	b580      	push	{r7, lr}
   1c51c:	af00      	add	r7, sp, #0
   1c51e:	2084      	movs	r0, #132	; 0x84
   1c520:	f7f0 fb98 	bl	cc54 <nrf_usbd_epin_dma_handler>
   1c524:	bf00      	nop
   1c526:	bd80      	pop	{r7, pc}

0001c528 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   1c528:	b580      	push	{r7, lr}
   1c52a:	af00      	add	r7, sp, #0
   1c52c:	2085      	movs	r0, #133	; 0x85
   1c52e:	f7f0 fb91 	bl	cc54 <nrf_usbd_epin_dma_handler>
   1c532:	bf00      	nop
   1c534:	bd80      	pop	{r7, pc}

0001c536 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   1c536:	b580      	push	{r7, lr}
   1c538:	af00      	add	r7, sp, #0
   1c53a:	2086      	movs	r0, #134	; 0x86
   1c53c:	f7f0 fb8a 	bl	cc54 <nrf_usbd_epin_dma_handler>
   1c540:	bf00      	nop
   1c542:	bd80      	pop	{r7, pc}

0001c544 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   1c544:	b580      	push	{r7, lr}
   1c546:	af00      	add	r7, sp, #0
   1c548:	2087      	movs	r0, #135	; 0x87
   1c54a:	f7f0 fb83 	bl	cc54 <nrf_usbd_epin_dma_handler>
   1c54e:	bf00      	nop
   1c550:	bd80      	pop	{r7, pc}

0001c552 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   1c552:	b580      	push	{r7, lr}
   1c554:	af00      	add	r7, sp, #0
   1c556:	2088      	movs	r0, #136	; 0x88
   1c558:	f7f0 fbde 	bl	cd18 <nrf_usbd_epiniso_dma_handler>
   1c55c:	bf00      	nop
   1c55e:	bd80      	pop	{r7, pc}

0001c560 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   1c560:	b580      	push	{r7, lr}
   1c562:	af00      	add	r7, sp, #0
   1c564:	f7f0 fc3a 	bl	cddc <nrf_usbd_ep0out_dma_handler>
   1c568:	bf00      	nop
   1c56a:	bd80      	pop	{r7, pc}

0001c56c <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   1c56c:	b580      	push	{r7, lr}
   1c56e:	af00      	add	r7, sp, #0
   1c570:	2001      	movs	r0, #1
   1c572:	f7f0 fc79 	bl	ce68 <nrf_usbd_epout_dma_handler>
   1c576:	bf00      	nop
   1c578:	bd80      	pop	{r7, pc}

0001c57a <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   1c57a:	b580      	push	{r7, lr}
   1c57c:	af00      	add	r7, sp, #0
   1c57e:	2002      	movs	r0, #2
   1c580:	f7f0 fc72 	bl	ce68 <nrf_usbd_epout_dma_handler>
   1c584:	bf00      	nop
   1c586:	bd80      	pop	{r7, pc}

0001c588 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   1c588:	b580      	push	{r7, lr}
   1c58a:	af00      	add	r7, sp, #0
   1c58c:	2003      	movs	r0, #3
   1c58e:	f7f0 fc6b 	bl	ce68 <nrf_usbd_epout_dma_handler>
   1c592:	bf00      	nop
   1c594:	bd80      	pop	{r7, pc}

0001c596 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   1c596:	b580      	push	{r7, lr}
   1c598:	af00      	add	r7, sp, #0
   1c59a:	2004      	movs	r0, #4
   1c59c:	f7f0 fc64 	bl	ce68 <nrf_usbd_epout_dma_handler>
   1c5a0:	bf00      	nop
   1c5a2:	bd80      	pop	{r7, pc}

0001c5a4 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   1c5a4:	b580      	push	{r7, lr}
   1c5a6:	af00      	add	r7, sp, #0
   1c5a8:	2005      	movs	r0, #5
   1c5aa:	f7f0 fc5d 	bl	ce68 <nrf_usbd_epout_dma_handler>
   1c5ae:	bf00      	nop
   1c5b0:	bd80      	pop	{r7, pc}

0001c5b2 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   1c5b2:	b580      	push	{r7, lr}
   1c5b4:	af00      	add	r7, sp, #0
   1c5b6:	2006      	movs	r0, #6
   1c5b8:	f7f0 fc56 	bl	ce68 <nrf_usbd_epout_dma_handler>
   1c5bc:	bf00      	nop
   1c5be:	bd80      	pop	{r7, pc}

0001c5c0 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   1c5c0:	b580      	push	{r7, lr}
   1c5c2:	af00      	add	r7, sp, #0
   1c5c4:	2007      	movs	r0, #7
   1c5c6:	f7f0 fc4f 	bl	ce68 <nrf_usbd_epout_dma_handler>
   1c5ca:	bf00      	nop
   1c5cc:	bd80      	pop	{r7, pc}

0001c5ce <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   1c5ce:	b580      	push	{r7, lr}
   1c5d0:	af00      	add	r7, sp, #0
   1c5d2:	2008      	movs	r0, #8
   1c5d4:	f7f0 fcba 	bl	cf4c <nrf_usbd_epoutiso_dma_handler>
   1c5d8:	bf00      	nop
   1c5da:	bd80      	pop	{r7, pc}

0001c5dc <usbd_dma_scheduler_algorithm>:
{
   1c5dc:	b480      	push	{r7}
   1c5de:	b085      	sub	sp, #20
   1c5e0:	af00      	add	r7, sp, #0
   1c5e2:	6078      	str	r0, [r7, #4]
   1c5e4:	687b      	ldr	r3, [r7, #4]
   1c5e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
   1c5e8:	68fb      	ldr	r3, [r7, #12]
   1c5ea:	fa93 f3a3 	rbit	r3, r3
   1c5ee:	60bb      	str	r3, [r7, #8]
  return result;
   1c5f0:	68bb      	ldr	r3, [r7, #8]
    return __CLZ(__RBIT(req));
   1c5f2:	fab3 f383 	clz	r3, r3
   1c5f6:	b2db      	uxtb	r3, r3
}
   1c5f8:	4618      	mov	r0, r3
   1c5fa:	3714      	adds	r7, #20
   1c5fc:	46bd      	mov	sp, r7
   1c5fe:	bc80      	pop	{r7}
   1c600:	4770      	bx	lr

0001c602 <usbd_ep_iso_capacity>:
{
   1c602:	b580      	push	{r7, lr}
   1c604:	b084      	sub	sp, #16
   1c606:	af00      	add	r7, sp, #0
   1c608:	4603      	mov	r3, r0
   1c60a:	71fb      	strb	r3, [r7, #7]
    nrf_usbd_isosplit_t split = nrf_usbd_isosplit_get();
   1c60c:	f7ef fda6 	bl	c15c <nrf_usbd_isosplit_get>
   1c610:	4603      	mov	r3, r0
   1c612:	73fb      	strb	r3, [r7, #15]
    if (NRF_USBD_ISOSPLIT_HALF == split)
   1c614:	7bfb      	ldrb	r3, [r7, #15]
   1c616:	2b80      	cmp	r3, #128	; 0x80
   1c618:	d102      	bne.n	1c620 <usbd_ep_iso_capacity+0x1e>
        return NRFX_USBD_ISOSIZE / 2;
   1c61a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1c61e:	e001      	b.n	1c624 <usbd_ep_iso_capacity+0x22>
    return NRFX_USBD_ISOSIZE;
   1c620:	f44f 6380 	mov.w	r3, #1024	; 0x400
}
   1c624:	4618      	mov	r0, r3
   1c626:	3710      	adds	r7, #16
   1c628:	46bd      	mov	sp, r7
   1c62a:	bd80      	pop	{r7, pc}

0001c62c <nrfx_usbd_ep_status_get>:
{
   1c62c:	b580      	push	{r7, lr}
   1c62e:	b088      	sub	sp, #32
   1c630:	af00      	add	r7, sp, #0
   1c632:	4603      	mov	r3, r0
   1c634:	6039      	str	r1, [r7, #0]
   1c636:	71fb      	strb	r3, [r7, #7]
    usbd_ep_state_t const * p_state = ep_state_access(ep);
   1c638:	79fb      	ldrb	r3, [r7, #7]
   1c63a:	4618      	mov	r0, r3
   1c63c:	f7f0 f908 	bl	c850 <ep_state_access>
   1c640:	61f8      	str	r0, [r7, #28]
	__asm__ volatile(
   1c642:	f04f 0320 	mov.w	r3, #32
   1c646:	f3ef 8211 	mrs	r2, BASEPRI
   1c64a:	f383 8811 	msr	BASEPRI, r3
   1c64e:	f3bf 8f6f 	isb	sy
   1c652:	613a      	str	r2, [r7, #16]
   1c654:	60fb      	str	r3, [r7, #12]
	return key;
   1c656:	693b      	ldr	r3, [r7, #16]
    NRFX_CRITICAL_SECTION_ENTER();
   1c658:	61bb      	str	r3, [r7, #24]
    *p_size = p_state->transfer_cnt;
   1c65a:	69fb      	ldr	r3, [r7, #28]
   1c65c:	689a      	ldr	r2, [r3, #8]
   1c65e:	683b      	ldr	r3, [r7, #0]
   1c660:	601a      	str	r2, [r3, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   1c662:	69fb      	ldr	r3, [r7, #28]
   1c664:	681b      	ldr	r3, [r3, #0]
   1c666:	2b00      	cmp	r3, #0
   1c668:	d102      	bne.n	1c670 <nrfx_usbd_ep_status_get+0x44>
   1c66a:	69fb      	ldr	r3, [r7, #28]
   1c66c:	7b9b      	ldrb	r3, [r3, #14]
   1c66e:	e000      	b.n	1c672 <nrfx_usbd_ep_status_get+0x46>
   1c670:	2304      	movs	r3, #4
   1c672:	75fb      	strb	r3, [r7, #23]
   1c674:	69bb      	ldr	r3, [r7, #24]
   1c676:	60bb      	str	r3, [r7, #8]
	__asm__ volatile(
   1c678:	68bb      	ldr	r3, [r7, #8]
   1c67a:	f383 8811 	msr	BASEPRI, r3
   1c67e:	f3bf 8f6f 	isb	sy
    return ret;
   1c682:	7dfb      	ldrb	r3, [r7, #23]
}
   1c684:	4618      	mov	r0, r3
   1c686:	3720      	adds	r7, #32
   1c688:	46bd      	mov	sp, r7
   1c68a:	bd80      	pop	{r7, pc}

0001c68c <nrfx_usbd_epout_size_get>:
{
   1c68c:	b580      	push	{r7, lr}
   1c68e:	b082      	sub	sp, #8
   1c690:	af00      	add	r7, sp, #0
   1c692:	4603      	mov	r3, r0
   1c694:	71fb      	strb	r3, [r7, #7]
    return nrf_usbd_epout_size_get(ep_to_hal(ep));
   1c696:	79fb      	ldrb	r3, [r7, #7]
   1c698:	4618      	mov	r0, r3
   1c69a:	f7f0 f877 	bl	c78c <ep_to_hal>
   1c69e:	4603      	mov	r3, r0
   1c6a0:	4618      	mov	r0, r3
   1c6a2:	f7ef fb4b 	bl	bd3c <nrf_usbd_epout_size_get>
   1c6a6:	4603      	mov	r3, r0
}
   1c6a8:	4618      	mov	r0, r3
   1c6aa:	3708      	adds	r7, #8
   1c6ac:	46bd      	mov	sp, r7
   1c6ae:	bd80      	pop	{r7, pc}

0001c6b0 <nrfx_usbd_ep_stall>:
{
   1c6b0:	b580      	push	{r7, lr}
   1c6b2:	b082      	sub	sp, #8
   1c6b4:	af00      	add	r7, sp, #0
   1c6b6:	4603      	mov	r3, r0
   1c6b8:	71fb      	strb	r3, [r7, #7]
    nrf_usbd_ep_stall(ep_to_hal(ep));
   1c6ba:	79fb      	ldrb	r3, [r7, #7]
   1c6bc:	4618      	mov	r0, r3
   1c6be:	f7f0 f865 	bl	c78c <ep_to_hal>
   1c6c2:	4603      	mov	r3, r0
   1c6c4:	4618      	mov	r0, r3
   1c6c6:	f7ef fceb 	bl	c0a0 <nrf_usbd_ep_stall>
}
   1c6ca:	bf00      	nop
   1c6cc:	3708      	adds	r7, #8
   1c6ce:	46bd      	mov	sp, r7
   1c6d0:	bd80      	pop	{r7, pc}

0001c6d2 <nrfx_usbd_ep_stall_clear>:
{
   1c6d2:	b580      	push	{r7, lr}
   1c6d4:	b082      	sub	sp, #8
   1c6d6:	af00      	add	r7, sp, #0
   1c6d8:	4603      	mov	r3, r0
   1c6da:	71fb      	strb	r3, [r7, #7]
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   1c6dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1c6e0:	2b00      	cmp	r3, #0
   1c6e2:	db0a      	blt.n	1c6fa <nrfx_usbd_ep_stall_clear+0x28>
   1c6e4:	79fb      	ldrb	r3, [r7, #7]
   1c6e6:	4618      	mov	r0, r3
   1c6e8:	f000 f813 	bl	1c712 <nrfx_usbd_ep_stall_check>
   1c6ec:	4603      	mov	r3, r0
   1c6ee:	2b00      	cmp	r3, #0
   1c6f0:	d003      	beq.n	1c6fa <nrfx_usbd_ep_stall_clear+0x28>
        nrfx_usbd_transfer_out_drop(ep);
   1c6f2:	79fb      	ldrb	r3, [r7, #7]
   1c6f4:	4618      	mov	r0, r3
   1c6f6:	f7f1 fc8f 	bl	e018 <nrfx_usbd_transfer_out_drop>
    nrf_usbd_ep_unstall(ep_to_hal(ep));
   1c6fa:	79fb      	ldrb	r3, [r7, #7]
   1c6fc:	4618      	mov	r0, r3
   1c6fe:	f7f0 f845 	bl	c78c <ep_to_hal>
   1c702:	4603      	mov	r3, r0
   1c704:	4618      	mov	r0, r3
   1c706:	f7ef fcf3 	bl	c0f0 <nrf_usbd_ep_unstall>
}
   1c70a:	bf00      	nop
   1c70c:	3708      	adds	r7, #8
   1c70e:	46bd      	mov	sp, r7
   1c710:	bd80      	pop	{r7, pc}

0001c712 <nrfx_usbd_ep_stall_check>:
{
   1c712:	b580      	push	{r7, lr}
   1c714:	b082      	sub	sp, #8
   1c716:	af00      	add	r7, sp, #0
   1c718:	4603      	mov	r3, r0
   1c71a:	71fb      	strb	r3, [r7, #7]
    return nrf_usbd_ep_is_stall(ep_to_hal(ep));
   1c71c:	79fb      	ldrb	r3, [r7, #7]
   1c71e:	4618      	mov	r0, r3
   1c720:	f7f0 f834 	bl	c78c <ep_to_hal>
   1c724:	4603      	mov	r3, r0
   1c726:	4618      	mov	r0, r3
   1c728:	f7ff fe32 	bl	1c390 <nrf_usbd_ep_is_stall>
   1c72c:	4603      	mov	r3, r0
}
   1c72e:	4618      	mov	r0, r3
   1c730:	3708      	adds	r7, #8
   1c732:	46bd      	mov	sp, r7
   1c734:	bd80      	pop	{r7, pc}

0001c736 <nrfx_usbd_setup_get>:
{
   1c736:	b580      	push	{r7, lr}
   1c738:	b082      	sub	sp, #8
   1c73a:	af00      	add	r7, sp, #0
   1c73c:	6078      	str	r0, [r7, #4]
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   1c73e:	2208      	movs	r2, #8
   1c740:	2100      	movs	r1, #0
   1c742:	6878      	ldr	r0, [r7, #4]
   1c744:	f7e5 fcb8 	bl	20b8 <memset>
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get();
   1c748:	f7ef fa98 	bl	bc7c <nrf_usbd_setup_bmrequesttype_get>
   1c74c:	4603      	mov	r3, r0
   1c74e:	461a      	mov	r2, r3
   1c750:	687b      	ldr	r3, [r7, #4]
   1c752:	701a      	strb	r2, [r3, #0]
    p_setup->bRequest      = nrf_usbd_setup_brequest_get();
   1c754:	f7ef fa9e 	bl	bc94 <nrf_usbd_setup_brequest_get>
   1c758:	4603      	mov	r3, r0
   1c75a:	461a      	mov	r2, r3
   1c75c:	687b      	ldr	r3, [r7, #4]
   1c75e:	705a      	strb	r2, [r3, #1]
    p_setup->wValue        = nrf_usbd_setup_wvalue_get();
   1c760:	f7ef faa4 	bl	bcac <nrf_usbd_setup_wvalue_get>
   1c764:	4603      	mov	r3, r0
   1c766:	461a      	mov	r2, r3
   1c768:	687b      	ldr	r3, [r7, #4]
   1c76a:	805a      	strh	r2, [r3, #2]
    p_setup->wIndex        = nrf_usbd_setup_windex_get();
   1c76c:	f7ef fab6 	bl	bcdc <nrf_usbd_setup_windex_get>
   1c770:	4603      	mov	r3, r0
   1c772:	461a      	mov	r2, r3
   1c774:	687b      	ldr	r3, [r7, #4]
   1c776:	809a      	strh	r2, [r3, #4]
    p_setup->wLength       = nrf_usbd_setup_wlength_get();
   1c778:	f7ef fac8 	bl	bd0c <nrf_usbd_setup_wlength_get>
   1c77c:	4603      	mov	r3, r0
   1c77e:	461a      	mov	r2, r3
   1c780:	687b      	ldr	r3, [r7, #4]
   1c782:	80da      	strh	r2, [r3, #6]
}
   1c784:	bf00      	nop
   1c786:	3708      	adds	r7, #8
   1c788:	46bd      	mov	sp, r7
   1c78a:	bd80      	pop	{r7, pc}

0001c78c <nrfx_usbd_setup_data_clear>:
{
   1c78c:	b580      	push	{r7, lr}
   1c78e:	b084      	sub	sp, #16
   1c790:	af00      	add	r7, sp, #0
    if (nrfx_usbd_errata_104())
   1c792:	f7ff fe25 	bl	1c3e0 <nrfx_usbd_errata_104>
   1c796:	4603      	mov	r3, r0
   1c798:	2b00      	cmp	r3, #0
   1c79a:	d011      	beq.n	1c7c0 <nrfx_usbd_setup_data_clear+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1c79c:	f3ef 8310 	mrs	r3, PRIMASK
   1c7a0:	607b      	str	r3, [r7, #4]
  return(result);
   1c7a2:	687b      	ldr	r3, [r7, #4]
        uint32_t primask_copy = __get_PRIMASK();
   1c7a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
   1c7a6:	b672      	cpsid	i
        nrf_usbd_task_trigger(NRF_USBD_TASK_EP0RCVOUT);
   1c7a8:	204c      	movs	r0, #76	; 0x4c
   1c7aa:	f7ff fd8c 	bl	1c2c6 <nrf_usbd_task_trigger>
        nrf_usbd_task_trigger(NRF_USBD_TASK_EP0RCVOUT);
   1c7ae:	204c      	movs	r0, #76	; 0x4c
   1c7b0:	f7ff fd89 	bl	1c2c6 <nrf_usbd_task_trigger>
   1c7b4:	68fb      	ldr	r3, [r7, #12]
   1c7b6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1c7b8:	68bb      	ldr	r3, [r7, #8]
   1c7ba:	f383 8810 	msr	PRIMASK, r3
}
   1c7be:	e002      	b.n	1c7c6 <nrfx_usbd_setup_data_clear+0x3a>
        nrf_usbd_task_trigger(NRF_USBD_TASK_EP0RCVOUT);
   1c7c0:	204c      	movs	r0, #76	; 0x4c
   1c7c2:	f7ff fd80 	bl	1c2c6 <nrf_usbd_task_trigger>
}
   1c7c6:	bf00      	nop
   1c7c8:	3710      	adds	r7, #16
   1c7ca:	46bd      	mov	sp, r7
   1c7cc:	bd80      	pop	{r7, pc}

0001c7ce <nrfx_usbd_setup_clear>:
{
   1c7ce:	b580      	push	{r7, lr}
   1c7d0:	af00      	add	r7, sp, #0
    nrf_usbd_task_trigger(NRF_USBD_TASK_EP0STATUS);
   1c7d2:	2050      	movs	r0, #80	; 0x50
   1c7d4:	f7ff fd77 	bl	1c2c6 <nrf_usbd_task_trigger>
}
   1c7d8:	bf00      	nop
   1c7da:	bd80      	pop	{r7, pc}

0001c7dc <nrfx_usbd_setup_stall>:
{
   1c7dc:	b580      	push	{r7, lr}
   1c7de:	af00      	add	r7, sp, #0
    nrf_usbd_task_trigger(NRF_USBD_TASK_EP0STALL);
   1c7e0:	2054      	movs	r0, #84	; 0x54
   1c7e2:	f7ff fd70 	bl	1c2c6 <nrf_usbd_task_trigger>
}
   1c7e6:	bf00      	nop
   1c7e8:	bd80      	pop	{r7, pc}

0001c7ea <k_sleep>:
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
   1c7ea:	b580      	push	{r7, lr}
   1c7ec:	b082      	sub	sp, #8
   1c7ee:	af00      	add	r7, sp, #0
   1c7f0:	6078      	str	r0, [r7, #4]
   1c7f2:	6878      	ldr	r0, [r7, #4]
   1c7f4:	f7fb f8d8 	bl	179a8 <z_impl_k_sleep>
   1c7f8:	4603      	mov	r3, r0
   1c7fa:	4618      	mov	r0, r3
   1c7fc:	3708      	adds	r7, #8
   1c7fe:	46bd      	mov	sp, r7
   1c800:	bd80      	pop	{r7, pc}

0001c802 <k_sem_init>:

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   1c802:	b580      	push	{r7, lr}
   1c804:	b084      	sub	sp, #16
   1c806:	af00      	add	r7, sp, #0
   1c808:	60f8      	str	r0, [r7, #12]
   1c80a:	60b9      	str	r1, [r7, #8]
   1c80c:	607a      	str	r2, [r7, #4]
   1c80e:	687a      	ldr	r2, [r7, #4]
   1c810:	68b9      	ldr	r1, [r7, #8]
   1c812:	68f8      	ldr	r0, [r7, #12]
   1c814:	f00e fd78 	bl	2b308 <z_impl_k_sem_init>
   1c818:	bf00      	nop
   1c81a:	3710      	adds	r7, #16
   1c81c:	46bd      	mov	sp, r7
   1c81e:	bd80      	pop	{r7, pc}

0001c820 <k_sem_take>:

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   1c820:	b580      	push	{r7, lr}
   1c822:	b082      	sub	sp, #8
   1c824:	af00      	add	r7, sp, #0
   1c826:	6078      	str	r0, [r7, #4]
   1c828:	6039      	str	r1, [r7, #0]
   1c82a:	6839      	ldr	r1, [r7, #0]
   1c82c:	6878      	ldr	r0, [r7, #4]
   1c82e:	f7fb f9db 	bl	17be8 <z_impl_k_sem_take>
   1c832:	4603      	mov	r3, r0
   1c834:	4618      	mov	r0, r3
   1c836:	3708      	adds	r7, #8
   1c838:	46bd      	mov	sp, r7
   1c83a:	bd80      	pop	{r7, pc}

0001c83c <k_sem_give>:

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   1c83c:	b580      	push	{r7, lr}
   1c83e:	b082      	sub	sp, #8
   1c840:	af00      	add	r7, sp, #0
   1c842:	6078      	str	r0, [r7, #4]
   1c844:	6878      	ldr	r0, [r7, #4]
   1c846:	f7fb f9ad 	bl	17ba4 <z_impl_k_sem_give>
   1c84a:	bf00      	nop
   1c84c:	3708      	adds	r7, #8
   1c84e:	46bd      	mov	sp, r7
   1c850:	bd80      	pop	{r7, pc}

0001c852 <z_impl_uart_poll_in>:
 * @retval -EBUSY If reception was enabled using uart_rx_enabled
 */
__syscall int uart_poll_in(struct device *dev, unsigned char *p_char);

static inline int z_impl_uart_poll_in(struct device *dev, unsigned char *p_char)
{
   1c852:	b580      	push	{r7, lr}
   1c854:	b084      	sub	sp, #16
   1c856:	af00      	add	r7, sp, #0
   1c858:	6078      	str	r0, [r7, #4]
   1c85a:	6039      	str	r1, [r7, #0]
	const struct uart_driver_api *api =
   1c85c:	687b      	ldr	r3, [r7, #4]
   1c85e:	685b      	ldr	r3, [r3, #4]
   1c860:	60fb      	str	r3, [r7, #12]
		(const struct uart_driver_api *)dev->driver_api;

	return api->poll_in(dev, p_char);
   1c862:	68fb      	ldr	r3, [r7, #12]
   1c864:	681b      	ldr	r3, [r3, #0]
   1c866:	6839      	ldr	r1, [r7, #0]
   1c868:	6878      	ldr	r0, [r7, #4]
   1c86a:	4798      	blx	r3
   1c86c:	4603      	mov	r3, r0
}
   1c86e:	4618      	mov	r0, r3
   1c870:	3710      	adds	r7, #16
   1c872:	46bd      	mov	sp, r7
   1c874:	bd80      	pop	{r7, pc}

0001c876 <z_impl_uart_poll_out>:
__syscall void uart_poll_out(struct device *dev,
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(struct device *dev,
						unsigned char out_char)
{
   1c876:	b580      	push	{r7, lr}
   1c878:	b084      	sub	sp, #16
   1c87a:	af00      	add	r7, sp, #0
   1c87c:	6078      	str	r0, [r7, #4]
   1c87e:	460b      	mov	r3, r1
   1c880:	70fb      	strb	r3, [r7, #3]
	const struct uart_driver_api *api =
   1c882:	687b      	ldr	r3, [r7, #4]
   1c884:	685b      	ldr	r3, [r3, #4]
   1c886:	60fb      	str	r3, [r7, #12]
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
   1c888:	68fb      	ldr	r3, [r7, #12]
   1c88a:	685b      	ldr	r3, [r3, #4]
   1c88c:	78fa      	ldrb	r2, [r7, #3]
   1c88e:	4611      	mov	r1, r2
   1c890:	6878      	ldr	r0, [r7, #4]
   1c892:	4798      	blx	r3
}
   1c894:	bf00      	nop
   1c896:	3710      	adds	r7, #16
   1c898:	46bd      	mov	sp, r7
   1c89a:	bd80      	pop	{r7, pc}

0001c89c <uart_fifo_fill>:
 *
 * @return Number of bytes sent.
 */
static inline int uart_fifo_fill(struct device *dev, const u8_t *tx_data,
				 int size)
{
   1c89c:	b580      	push	{r7, lr}
   1c89e:	b086      	sub	sp, #24
   1c8a0:	af00      	add	r7, sp, #0
   1c8a2:	60f8      	str	r0, [r7, #12]
   1c8a4:	60b9      	str	r1, [r7, #8]
   1c8a6:	607a      	str	r2, [r7, #4]
	const struct uart_driver_api *api =
   1c8a8:	68fb      	ldr	r3, [r7, #12]
   1c8aa:	685b      	ldr	r3, [r3, #4]
   1c8ac:	617b      	str	r3, [r7, #20]
		(const struct uart_driver_api *)dev->driver_api;

	if (api->fifo_fill) {
   1c8ae:	697b      	ldr	r3, [r7, #20]
   1c8b0:	695b      	ldr	r3, [r3, #20]
   1c8b2:	2b00      	cmp	r3, #0
   1c8b4:	d007      	beq.n	1c8c6 <uart_fifo_fill+0x2a>
		return api->fifo_fill(dev, tx_data, size);
   1c8b6:	697b      	ldr	r3, [r7, #20]
   1c8b8:	695b      	ldr	r3, [r3, #20]
   1c8ba:	687a      	ldr	r2, [r7, #4]
   1c8bc:	68b9      	ldr	r1, [r7, #8]
   1c8be:	68f8      	ldr	r0, [r7, #12]
   1c8c0:	4798      	blx	r3
   1c8c2:	4603      	mov	r3, r0
   1c8c4:	e000      	b.n	1c8c8 <uart_fifo_fill+0x2c>
	}

	return 0;
   1c8c6:	2300      	movs	r3, #0
}
   1c8c8:	4618      	mov	r0, r3
   1c8ca:	3718      	adds	r7, #24
   1c8cc:	46bd      	mov	sp, r7
   1c8ce:	bd80      	pop	{r7, pc}

0001c8d0 <uart_fifo_read>:
 *
 * @return Number of bytes read.
 */
static inline int uart_fifo_read(struct device *dev, u8_t *rx_data,
				 const int size)
{
   1c8d0:	b580      	push	{r7, lr}
   1c8d2:	b086      	sub	sp, #24
   1c8d4:	af00      	add	r7, sp, #0
   1c8d6:	60f8      	str	r0, [r7, #12]
   1c8d8:	60b9      	str	r1, [r7, #8]
   1c8da:	607a      	str	r2, [r7, #4]
	const struct uart_driver_api *api =
   1c8dc:	68fb      	ldr	r3, [r7, #12]
   1c8de:	685b      	ldr	r3, [r3, #4]
   1c8e0:	617b      	str	r3, [r7, #20]
		(const struct uart_driver_api *)dev->driver_api;

	if (api->fifo_read) {
   1c8e2:	697b      	ldr	r3, [r7, #20]
   1c8e4:	699b      	ldr	r3, [r3, #24]
   1c8e6:	2b00      	cmp	r3, #0
   1c8e8:	d007      	beq.n	1c8fa <uart_fifo_read+0x2a>
		return api->fifo_read(dev, rx_data, size);
   1c8ea:	697b      	ldr	r3, [r7, #20]
   1c8ec:	699b      	ldr	r3, [r3, #24]
   1c8ee:	687a      	ldr	r2, [r7, #4]
   1c8f0:	68b9      	ldr	r1, [r7, #8]
   1c8f2:	68f8      	ldr	r0, [r7, #12]
   1c8f4:	4798      	blx	r3
   1c8f6:	4603      	mov	r3, r0
   1c8f8:	e000      	b.n	1c8fc <uart_fifo_read+0x2c>
	}

	return 0;
   1c8fa:	2300      	movs	r3, #0
}
   1c8fc:	4618      	mov	r0, r3
   1c8fe:	3718      	adds	r7, #24
   1c900:	46bd      	mov	sp, r7
   1c902:	bd80      	pop	{r7, pc}

0001c904 <z_impl_uart_irq_tx_enable>:
 * @return N/A
 */
__syscall void uart_irq_tx_enable(struct device *dev);

static inline void z_impl_uart_irq_tx_enable(struct device *dev)
{
   1c904:	b580      	push	{r7, lr}
   1c906:	b084      	sub	sp, #16
   1c908:	af00      	add	r7, sp, #0
   1c90a:	6078      	str	r0, [r7, #4]
	const struct uart_driver_api *api =
   1c90c:	687b      	ldr	r3, [r7, #4]
   1c90e:	685b      	ldr	r3, [r3, #4]
   1c910:	60fb      	str	r3, [r7, #12]
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_tx_enable) {
   1c912:	68fb      	ldr	r3, [r7, #12]
   1c914:	69db      	ldr	r3, [r3, #28]
   1c916:	2b00      	cmp	r3, #0
   1c918:	d003      	beq.n	1c922 <z_impl_uart_irq_tx_enable+0x1e>
		api->irq_tx_enable(dev);
   1c91a:	68fb      	ldr	r3, [r7, #12]
   1c91c:	69db      	ldr	r3, [r3, #28]
   1c91e:	6878      	ldr	r0, [r7, #4]
   1c920:	4798      	blx	r3
	}
}
   1c922:	bf00      	nop
   1c924:	3710      	adds	r7, #16
   1c926:	46bd      	mov	sp, r7
   1c928:	bd80      	pop	{r7, pc}

0001c92a <z_impl_uart_irq_tx_disable>:
 * @return N/A
 */
__syscall void uart_irq_tx_disable(struct device *dev);

static inline void z_impl_uart_irq_tx_disable(struct device *dev)
{
   1c92a:	b580      	push	{r7, lr}
   1c92c:	b084      	sub	sp, #16
   1c92e:	af00      	add	r7, sp, #0
   1c930:	6078      	str	r0, [r7, #4]
	const struct uart_driver_api *api =
   1c932:	687b      	ldr	r3, [r7, #4]
   1c934:	685b      	ldr	r3, [r3, #4]
   1c936:	60fb      	str	r3, [r7, #12]
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_tx_disable) {
   1c938:	68fb      	ldr	r3, [r7, #12]
   1c93a:	6a1b      	ldr	r3, [r3, #32]
   1c93c:	2b00      	cmp	r3, #0
   1c93e:	d003      	beq.n	1c948 <z_impl_uart_irq_tx_disable+0x1e>
		api->irq_tx_disable(dev);
   1c940:	68fb      	ldr	r3, [r7, #12]
   1c942:	6a1b      	ldr	r3, [r3, #32]
   1c944:	6878      	ldr	r0, [r7, #4]
   1c946:	4798      	blx	r3
	}
}
   1c948:	bf00      	nop
   1c94a:	3710      	adds	r7, #16
   1c94c:	46bd      	mov	sp, r7
   1c94e:	bd80      	pop	{r7, pc}

0001c950 <uart_irq_tx_ready>:
 *
 * @retval 1 If at least one char can be written to UART.
 * @retval 0 Otherwise.
 */
static inline int uart_irq_tx_ready(struct device *dev)
{
   1c950:	b580      	push	{r7, lr}
   1c952:	b084      	sub	sp, #16
   1c954:	af00      	add	r7, sp, #0
   1c956:	6078      	str	r0, [r7, #4]
	const struct uart_driver_api *api =
   1c958:	687b      	ldr	r3, [r7, #4]
   1c95a:	685b      	ldr	r3, [r3, #4]
   1c95c:	60fb      	str	r3, [r7, #12]
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_tx_ready) {
   1c95e:	68fb      	ldr	r3, [r7, #12]
   1c960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c962:	2b00      	cmp	r3, #0
   1c964:	d005      	beq.n	1c972 <uart_irq_tx_ready+0x22>
		return api->irq_tx_ready(dev);
   1c966:	68fb      	ldr	r3, [r7, #12]
   1c968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c96a:	6878      	ldr	r0, [r7, #4]
   1c96c:	4798      	blx	r3
   1c96e:	4603      	mov	r3, r0
   1c970:	e000      	b.n	1c974 <uart_irq_tx_ready+0x24>
	}

	return 0;
   1c972:	2300      	movs	r3, #0
}
   1c974:	4618      	mov	r0, r3
   1c976:	3710      	adds	r7, #16
   1c978:	46bd      	mov	sp, r7
   1c97a:	bd80      	pop	{r7, pc}

0001c97c <z_impl_uart_irq_rx_enable>:
 * @return N/A
 */
__syscall void uart_irq_rx_enable(struct device *dev);

static inline void z_impl_uart_irq_rx_enable(struct device *dev)
{
   1c97c:	b580      	push	{r7, lr}
   1c97e:	b084      	sub	sp, #16
   1c980:	af00      	add	r7, sp, #0
   1c982:	6078      	str	r0, [r7, #4]
	const struct uart_driver_api *api =
   1c984:	687b      	ldr	r3, [r7, #4]
   1c986:	685b      	ldr	r3, [r3, #4]
   1c988:	60fb      	str	r3, [r7, #12]
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_rx_enable) {
   1c98a:	68fb      	ldr	r3, [r7, #12]
   1c98c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c98e:	2b00      	cmp	r3, #0
   1c990:	d003      	beq.n	1c99a <z_impl_uart_irq_rx_enable+0x1e>
		api->irq_rx_enable(dev);
   1c992:	68fb      	ldr	r3, [r7, #12]
   1c994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c996:	6878      	ldr	r0, [r7, #4]
   1c998:	4798      	blx	r3
	}
}
   1c99a:	bf00      	nop
   1c99c:	3710      	adds	r7, #16
   1c99e:	46bd      	mov	sp, r7
   1c9a0:	bd80      	pop	{r7, pc}

0001c9a2 <z_impl_uart_irq_rx_disable>:
 * @return N/A
 */
__syscall void uart_irq_rx_disable(struct device *dev);

static inline void z_impl_uart_irq_rx_disable(struct device *dev)
{
   1c9a2:	b580      	push	{r7, lr}
   1c9a4:	b084      	sub	sp, #16
   1c9a6:	af00      	add	r7, sp, #0
   1c9a8:	6078      	str	r0, [r7, #4]
	const struct uart_driver_api *api =
   1c9aa:	687b      	ldr	r3, [r7, #4]
   1c9ac:	685b      	ldr	r3, [r3, #4]
   1c9ae:	60fb      	str	r3, [r7, #12]
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_rx_disable) {
   1c9b0:	68fb      	ldr	r3, [r7, #12]
   1c9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c9b4:	2b00      	cmp	r3, #0
   1c9b6:	d003      	beq.n	1c9c0 <z_impl_uart_irq_rx_disable+0x1e>
		api->irq_rx_disable(dev);
   1c9b8:	68fb      	ldr	r3, [r7, #12]
   1c9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c9bc:	6878      	ldr	r0, [r7, #4]
   1c9be:	4798      	blx	r3
	}
}
   1c9c0:	bf00      	nop
   1c9c2:	3710      	adds	r7, #16
   1c9c4:	46bd      	mov	sp, r7
   1c9c6:	bd80      	pop	{r7, pc}

0001c9c8 <uart_irq_rx_ready>:
 * @retval 1 If a received char is ready.
 * @retval 0 Otherwise.
 * @retval -ENOTSUP if this function is not supported
 */
static inline int uart_irq_rx_ready(struct device *dev)
{
   1c9c8:	b580      	push	{r7, lr}
   1c9ca:	b084      	sub	sp, #16
   1c9cc:	af00      	add	r7, sp, #0
   1c9ce:	6078      	str	r0, [r7, #4]
	const struct uart_driver_api *api =
   1c9d0:	687b      	ldr	r3, [r7, #4]
   1c9d2:	685b      	ldr	r3, [r3, #4]
   1c9d4:	60fb      	str	r3, [r7, #12]
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_rx_ready) {
   1c9d6:	68fb      	ldr	r3, [r7, #12]
   1c9d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1c9da:	2b00      	cmp	r3, #0
   1c9dc:	d005      	beq.n	1c9ea <uart_irq_rx_ready+0x22>
		return api->irq_rx_ready(dev);
   1c9de:	68fb      	ldr	r3, [r7, #12]
   1c9e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1c9e2:	6878      	ldr	r0, [r7, #4]
   1c9e4:	4798      	blx	r3
   1c9e6:	4603      	mov	r3, r0
   1c9e8:	e000      	b.n	1c9ec <uart_irq_rx_ready+0x24>
	}

	return 0;
   1c9ea:	2300      	movs	r3, #0
}
   1c9ec:	4618      	mov	r0, r3
   1c9ee:	3710      	adds	r7, #16
   1c9f0:	46bd      	mov	sp, r7
   1c9f2:	bd80      	pop	{r7, pc}

0001c9f4 <z_impl_uart_irq_update>:
 * @retval 1 Always.
 */
__syscall int uart_irq_update(struct device *dev);

static inline int z_impl_uart_irq_update(struct device *dev)
{
   1c9f4:	b580      	push	{r7, lr}
   1c9f6:	b084      	sub	sp, #16
   1c9f8:	af00      	add	r7, sp, #0
   1c9fa:	6078      	str	r0, [r7, #4]
	const struct uart_driver_api *api =
   1c9fc:	687b      	ldr	r3, [r7, #4]
   1c9fe:	685b      	ldr	r3, [r3, #4]
   1ca00:	60fb      	str	r3, [r7, #12]
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
   1ca02:	68fb      	ldr	r3, [r7, #12]
   1ca04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ca06:	2b00      	cmp	r3, #0
   1ca08:	d005      	beq.n	1ca16 <z_impl_uart_irq_update+0x22>
		return api->irq_update(dev);
   1ca0a:	68fb      	ldr	r3, [r7, #12]
   1ca0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ca0e:	6878      	ldr	r0, [r7, #4]
   1ca10:	4798      	blx	r3
   1ca12:	4603      	mov	r3, r0
   1ca14:	e000      	b.n	1ca18 <z_impl_uart_irq_update+0x24>
	}

	return 0;
   1ca16:	2300      	movs	r3, #0
}
   1ca18:	4618      	mov	r0, r3
   1ca1a:	3710      	adds	r7, #16
   1ca1c:	46bd      	mov	sp, r7
   1ca1e:	bd80      	pop	{r7, pc}

0001ca20 <uart_irq_callback_user_data_set>:
 */
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
   1ca20:	b580      	push	{r7, lr}
   1ca22:	b086      	sub	sp, #24
   1ca24:	af00      	add	r7, sp, #0
   1ca26:	60f8      	str	r0, [r7, #12]
   1ca28:	60b9      	str	r1, [r7, #8]
   1ca2a:	607a      	str	r2, [r7, #4]
	const struct uart_driver_api *api =
   1ca2c:	68fb      	ldr	r3, [r7, #12]
   1ca2e:	685b      	ldr	r3, [r3, #4]
   1ca30:	617b      	str	r3, [r7, #20]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   1ca32:	697b      	ldr	r3, [r7, #20]
   1ca34:	2b00      	cmp	r3, #0
   1ca36:	d009      	beq.n	1ca4c <uart_irq_callback_user_data_set+0x2c>
   1ca38:	697b      	ldr	r3, [r7, #20]
   1ca3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ca3c:	2b00      	cmp	r3, #0
   1ca3e:	d005      	beq.n	1ca4c <uart_irq_callback_user_data_set+0x2c>
		api->irq_callback_set(dev, cb, user_data);
   1ca40:	697b      	ldr	r3, [r7, #20]
   1ca42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ca44:	687a      	ldr	r2, [r7, #4]
   1ca46:	68b9      	ldr	r1, [r7, #8]
   1ca48:	68f8      	ldr	r0, [r7, #12]
   1ca4a:	4798      	blx	r3
	}
}
   1ca4c:	bf00      	nop
   1ca4e:	3718      	adds	r7, #24
   1ca50:	46bd      	mov	sp, r7
   1ca52:	bd80      	pop	{r7, pc}

0001ca54 <uart_poll_in>:
extern "C" {
#endif

K_SYSCALL_DECLARE1(K_SYSCALL_UART_ERR_CHECK, uart_err_check, int, struct device *, dev)

K_SYSCALL_DECLARE2(K_SYSCALL_UART_POLL_IN, uart_poll_in, int, struct device *, dev, unsigned char *, p_char)
   1ca54:	b580      	push	{r7, lr}
   1ca56:	b082      	sub	sp, #8
   1ca58:	af00      	add	r7, sp, #0
   1ca5a:	6078      	str	r0, [r7, #4]
   1ca5c:	6039      	str	r1, [r7, #0]
   1ca5e:	6839      	ldr	r1, [r7, #0]
   1ca60:	6878      	ldr	r0, [r7, #4]
   1ca62:	f7ff fef6 	bl	1c852 <z_impl_uart_poll_in>
   1ca66:	4603      	mov	r3, r0
   1ca68:	4618      	mov	r0, r3
   1ca6a:	3708      	adds	r7, #8
   1ca6c:	46bd      	mov	sp, r7
   1ca6e:	bd80      	pop	{r7, pc}

0001ca70 <uart_poll_out>:

K_SYSCALL_DECLARE2_VOID(K_SYSCALL_UART_POLL_OUT, uart_poll_out, struct device *, dev, unsigned char, out_char)
   1ca70:	b580      	push	{r7, lr}
   1ca72:	b082      	sub	sp, #8
   1ca74:	af00      	add	r7, sp, #0
   1ca76:	6078      	str	r0, [r7, #4]
   1ca78:	460b      	mov	r3, r1
   1ca7a:	70fb      	strb	r3, [r7, #3]
   1ca7c:	78fb      	ldrb	r3, [r7, #3]
   1ca7e:	4619      	mov	r1, r3
   1ca80:	6878      	ldr	r0, [r7, #4]
   1ca82:	f7ff fef8 	bl	1c876 <z_impl_uart_poll_out>
   1ca86:	bf00      	nop
   1ca88:	3708      	adds	r7, #8
   1ca8a:	46bd      	mov	sp, r7
   1ca8c:	bd80      	pop	{r7, pc}

0001ca8e <uart_irq_tx_enable>:

K_SYSCALL_DECLARE2(K_SYSCALL_UART_CONFIGURE, uart_configure, int, struct device *, dev, const struct uart_config *, cfg)

K_SYSCALL_DECLARE2(K_SYSCALL_UART_CONFIG_GET, uart_config_get, int, struct device *, dev, struct uart_config *, cfg)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_TX_ENABLE, uart_irq_tx_enable, struct device *, dev)
   1ca8e:	b580      	push	{r7, lr}
   1ca90:	b082      	sub	sp, #8
   1ca92:	af00      	add	r7, sp, #0
   1ca94:	6078      	str	r0, [r7, #4]
   1ca96:	6878      	ldr	r0, [r7, #4]
   1ca98:	f7ff ff34 	bl	1c904 <z_impl_uart_irq_tx_enable>
   1ca9c:	bf00      	nop
   1ca9e:	3708      	adds	r7, #8
   1caa0:	46bd      	mov	sp, r7
   1caa2:	bd80      	pop	{r7, pc}

0001caa4 <uart_irq_tx_disable>:

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_TX_DISABLE, uart_irq_tx_disable, struct device *, dev)
   1caa4:	b580      	push	{r7, lr}
   1caa6:	b082      	sub	sp, #8
   1caa8:	af00      	add	r7, sp, #0
   1caaa:	6078      	str	r0, [r7, #4]
   1caac:	6878      	ldr	r0, [r7, #4]
   1caae:	f7ff ff3c 	bl	1c92a <z_impl_uart_irq_tx_disable>
   1cab2:	bf00      	nop
   1cab4:	3708      	adds	r7, #8
   1cab6:	46bd      	mov	sp, r7
   1cab8:	bd80      	pop	{r7, pc}

0001caba <uart_irq_rx_enable>:

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_RX_ENABLE, uart_irq_rx_enable, struct device *, dev)
   1caba:	b580      	push	{r7, lr}
   1cabc:	b082      	sub	sp, #8
   1cabe:	af00      	add	r7, sp, #0
   1cac0:	6078      	str	r0, [r7, #4]
   1cac2:	6878      	ldr	r0, [r7, #4]
   1cac4:	f7ff ff5a 	bl	1c97c <z_impl_uart_irq_rx_enable>
   1cac8:	bf00      	nop
   1caca:	3708      	adds	r7, #8
   1cacc:	46bd      	mov	sp, r7
   1cace:	bd80      	pop	{r7, pc}

0001cad0 <uart_irq_rx_disable>:

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_RX_DISABLE, uart_irq_rx_disable, struct device *, dev)
   1cad0:	b580      	push	{r7, lr}
   1cad2:	b082      	sub	sp, #8
   1cad4:	af00      	add	r7, sp, #0
   1cad6:	6078      	str	r0, [r7, #4]
   1cad8:	6878      	ldr	r0, [r7, #4]
   1cada:	f7ff ff62 	bl	1c9a2 <z_impl_uart_irq_rx_disable>
   1cade:	bf00      	nop
   1cae0:	3708      	adds	r7, #8
   1cae2:	46bd      	mov	sp, r7
   1cae4:	bd80      	pop	{r7, pc}

0001cae6 <uart_irq_update>:

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_ERR_DISABLE, uart_irq_err_disable, struct device *, dev)

K_SYSCALL_DECLARE1(K_SYSCALL_UART_IRQ_IS_PENDING, uart_irq_is_pending, int, struct device *, dev)

K_SYSCALL_DECLARE1(K_SYSCALL_UART_IRQ_UPDATE, uart_irq_update, int, struct device *, dev)
   1cae6:	b580      	push	{r7, lr}
   1cae8:	b082      	sub	sp, #8
   1caea:	af00      	add	r7, sp, #0
   1caec:	6078      	str	r0, [r7, #4]
   1caee:	6878      	ldr	r0, [r7, #4]
   1caf0:	f7ff ff80 	bl	1c9f4 <z_impl_uart_irq_update>
   1caf4:	4603      	mov	r3, r0
   1caf6:	4618      	mov	r0, r3
   1caf8:	3708      	adds	r7, #8
   1cafa:	46bd      	mov	sp, r7
   1cafc:	bd80      	pop	{r7, pc}

0001cafe <tty_uart_isr>:
{
   1cafe:	b580      	push	{r7, lr}
   1cb00:	b086      	sub	sp, #24
   1cb02:	af00      	add	r7, sp, #0
   1cb04:	6078      	str	r0, [r7, #4]
	struct tty_serial *tty = user_data;
   1cb06:	687b      	ldr	r3, [r7, #4]
   1cb08:	617b      	str	r3, [r7, #20]
	struct device *dev = tty->uart_dev;
   1cb0a:	697b      	ldr	r3, [r7, #20]
   1cb0c:	681b      	ldr	r3, [r3, #0]
   1cb0e:	613b      	str	r3, [r7, #16]
	uart_irq_update(dev);
   1cb10:	6938      	ldr	r0, [r7, #16]
   1cb12:	f7ff ffe8 	bl	1cae6 <uart_irq_update>
	if (uart_irq_rx_ready(dev)) {
   1cb16:	6938      	ldr	r0, [r7, #16]
   1cb18:	f7ff ff56 	bl	1c9c8 <uart_irq_rx_ready>
   1cb1c:	4603      	mov	r3, r0
   1cb1e:	2b00      	cmp	r3, #0
   1cb20:	d010      	beq.n	1cb44 <tty_uart_isr+0x46>
			if (uart_fifo_read(dev, &c, 1) == 0) {
   1cb22:	f107 030f 	add.w	r3, r7, #15
   1cb26:	2201      	movs	r2, #1
   1cb28:	4619      	mov	r1, r3
   1cb2a:	6938      	ldr	r0, [r7, #16]
   1cb2c:	f7ff fed0 	bl	1c8d0 <uart_fifo_read>
   1cb30:	4603      	mov	r3, r0
   1cb32:	2b00      	cmp	r3, #0
   1cb34:	d005      	beq.n	1cb42 <tty_uart_isr+0x44>
			tty_irq_input_hook(tty, c);
   1cb36:	7bfb      	ldrb	r3, [r7, #15]
   1cb38:	4619      	mov	r1, r3
   1cb3a:	6978      	ldr	r0, [r7, #20]
   1cb3c:	f000 f839 	bl	1cbb2 <tty_irq_input_hook>
			if (uart_fifo_read(dev, &c, 1) == 0) {
   1cb40:	e7ef      	b.n	1cb22 <tty_uart_isr+0x24>
				break;
   1cb42:	bf00      	nop
	if (uart_irq_tx_ready(dev)) {
   1cb44:	6938      	ldr	r0, [r7, #16]
   1cb46:	f7ff ff03 	bl	1c950 <uart_irq_tx_ready>
   1cb4a:	4603      	mov	r3, r0
   1cb4c:	2b00      	cmp	r3, #0
   1cb4e:	d02c      	beq.n	1cbaa <tty_uart_isr+0xac>
		if (tty->tx_get == tty->tx_put) {
   1cb50:	697b      	ldr	r3, [r7, #20]
   1cb52:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
   1cb56:	697b      	ldr	r3, [r7, #20]
   1cb58:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
   1cb5c:	429a      	cmp	r2, r3
   1cb5e:	d103      	bne.n	1cb68 <tty_uart_isr+0x6a>
			uart_irq_tx_disable(dev);
   1cb60:	6938      	ldr	r0, [r7, #16]
   1cb62:	f7ff ff9f 	bl	1caa4 <uart_irq_tx_disable>
}
   1cb66:	e020      	b.n	1cbaa <tty_uart_isr+0xac>
			uart_fifo_fill(dev, &tty->tx_ringbuf[tty->tx_get++], 1);
   1cb68:	697b      	ldr	r3, [r7, #20]
   1cb6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1cb6c:	697b      	ldr	r3, [r7, #20]
   1cb6e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
   1cb72:	1c59      	adds	r1, r3, #1
   1cb74:	b288      	uxth	r0, r1
   1cb76:	6979      	ldr	r1, [r7, #20]
   1cb78:	f8a1 004c 	strh.w	r0, [r1, #76]	; 0x4c
   1cb7c:	4413      	add	r3, r2
   1cb7e:	2201      	movs	r2, #1
   1cb80:	4619      	mov	r1, r3
   1cb82:	6938      	ldr	r0, [r7, #16]
   1cb84:	f7ff fe8a 	bl	1c89c <uart_fifo_fill>
			if (tty->tx_get >= tty->tx_ringbuf_sz) {
   1cb88:	697b      	ldr	r3, [r7, #20]
   1cb8a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
   1cb8e:	461a      	mov	r2, r3
   1cb90:	697b      	ldr	r3, [r7, #20]
   1cb92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1cb94:	429a      	cmp	r2, r3
   1cb96:	d303      	bcc.n	1cba0 <tty_uart_isr+0xa2>
				tty->tx_get = 0U;
   1cb98:	697b      	ldr	r3, [r7, #20]
   1cb9a:	2200      	movs	r2, #0
   1cb9c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			k_sem_give(&tty->tx_sem);
   1cba0:	697b      	ldr	r3, [r7, #20]
   1cba2:	332c      	adds	r3, #44	; 0x2c
   1cba4:	4618      	mov	r0, r3
   1cba6:	f7ff fe49 	bl	1c83c <k_sem_give>
}
   1cbaa:	bf00      	nop
   1cbac:	3718      	adds	r7, #24
   1cbae:	46bd      	mov	sp, r7
   1cbb0:	bd80      	pop	{r7, pc}

0001cbb2 <tty_irq_input_hook>:
{
   1cbb2:	b580      	push	{r7, lr}
   1cbb4:	b084      	sub	sp, #16
   1cbb6:	af00      	add	r7, sp, #0
   1cbb8:	6078      	str	r0, [r7, #4]
   1cbba:	460b      	mov	r3, r1
   1cbbc:	70fb      	strb	r3, [r7, #3]
	int rx_next = tty->rx_put + 1;
   1cbbe:	687b      	ldr	r3, [r7, #4]
   1cbc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   1cbc2:	3301      	adds	r3, #1
   1cbc4:	60fb      	str	r3, [r7, #12]
	if (rx_next >= tty->rx_ringbuf_sz) {
   1cbc6:	687b      	ldr	r3, [r7, #4]
   1cbc8:	6a1a      	ldr	r2, [r3, #32]
   1cbca:	68fb      	ldr	r3, [r7, #12]
   1cbcc:	429a      	cmp	r2, r3
   1cbce:	d801      	bhi.n	1cbd4 <tty_irq_input_hook+0x22>
		rx_next = 0;
   1cbd0:	2300      	movs	r3, #0
   1cbd2:	60fb      	str	r3, [r7, #12]
	if (rx_next == tty->rx_get) {
   1cbd4:	687b      	ldr	r3, [r7, #4]
   1cbd6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1cbd8:	461a      	mov	r2, r3
   1cbda:	68fb      	ldr	r3, [r7, #12]
   1cbdc:	4293      	cmp	r3, r2
   1cbde:	d105      	bne.n	1cbec <tty_irq_input_hook+0x3a>
		tty_putchar(tty, '~');
   1cbe0:	217e      	movs	r1, #126	; 0x7e
   1cbe2:	6878      	ldr	r0, [r7, #4]
   1cbe4:	f000 f817 	bl	1cc16 <tty_putchar>
		return 1;
   1cbe8:	2301      	movs	r3, #1
   1cbea:	e010      	b.n	1cc0e <tty_irq_input_hook+0x5c>
	tty->rx_ringbuf[tty->rx_put] = c;
   1cbec:	687b      	ldr	r3, [r7, #4]
   1cbee:	69db      	ldr	r3, [r3, #28]
   1cbf0:	687a      	ldr	r2, [r7, #4]
   1cbf2:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
   1cbf4:	4413      	add	r3, r2
   1cbf6:	78fa      	ldrb	r2, [r7, #3]
   1cbf8:	701a      	strb	r2, [r3, #0]
	tty->rx_put = rx_next;
   1cbfa:	68fb      	ldr	r3, [r7, #12]
   1cbfc:	b29a      	uxth	r2, r3
   1cbfe:	687b      	ldr	r3, [r7, #4]
   1cc00:	84da      	strh	r2, [r3, #38]	; 0x26
	k_sem_give(&tty->rx_sem);
   1cc02:	687b      	ldr	r3, [r7, #4]
   1cc04:	3304      	adds	r3, #4
   1cc06:	4618      	mov	r0, r3
   1cc08:	f7ff fe18 	bl	1c83c <k_sem_give>
	return 1;
   1cc0c:	2301      	movs	r3, #1
}
   1cc0e:	4618      	mov	r0, r3
   1cc10:	3710      	adds	r7, #16
   1cc12:	46bd      	mov	sp, r7
   1cc14:	bd80      	pop	{r7, pc}

0001cc16 <tty_putchar>:
{
   1cc16:	b580      	push	{r7, lr}
   1cc18:	b08a      	sub	sp, #40	; 0x28
   1cc1a:	af00      	add	r7, sp, #0
   1cc1c:	6078      	str	r0, [r7, #4]
   1cc1e:	460b      	mov	r3, r1
   1cc20:	70fb      	strb	r3, [r7, #3]
	res = k_sem_take(&tty->tx_sem, tty->tx_timeout);
   1cc22:	687b      	ldr	r3, [r7, #4]
   1cc24:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   1cc28:	687b      	ldr	r3, [r7, #4]
   1cc2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1cc2c:	4619      	mov	r1, r3
   1cc2e:	4610      	mov	r0, r2
   1cc30:	f7ff fdf6 	bl	1c820 <k_sem_take>
   1cc34:	6238      	str	r0, [r7, #32]
	if (res < 0) {
   1cc36:	6a3b      	ldr	r3, [r7, #32]
   1cc38:	2b00      	cmp	r3, #0
   1cc3a:	da01      	bge.n	1cc40 <tty_putchar+0x2a>
		return res;
   1cc3c:	6a3b      	ldr	r3, [r7, #32]
   1cc3e:	e042      	b.n	1ccc6 <tty_putchar+0xb0>
	__asm__ volatile(
   1cc40:	f04f 0320 	mov.w	r3, #32
   1cc44:	f3ef 8211 	mrs	r2, BASEPRI
   1cc48:	f383 8811 	msr	BASEPRI, r3
   1cc4c:	f3bf 8f6f 	isb	sy
   1cc50:	61ba      	str	r2, [r7, #24]
   1cc52:	617b      	str	r3, [r7, #20]
	return key;
   1cc54:	69bb      	ldr	r3, [r7, #24]
	key = irq_lock();
   1cc56:	61fb      	str	r3, [r7, #28]
	tx_next = tty->tx_put + 1;
   1cc58:	687b      	ldr	r3, [r7, #4]
   1cc5a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
   1cc5e:	3301      	adds	r3, #1
   1cc60:	627b      	str	r3, [r7, #36]	; 0x24
	if (tx_next >= tty->tx_ringbuf_sz) {
   1cc62:	687b      	ldr	r3, [r7, #4]
   1cc64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1cc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cc68:	429a      	cmp	r2, r3
   1cc6a:	d801      	bhi.n	1cc70 <tty_putchar+0x5a>
		tx_next = 0;
   1cc6c:	2300      	movs	r3, #0
   1cc6e:	627b      	str	r3, [r7, #36]	; 0x24
	if (tx_next == tty->tx_get) {
   1cc70:	687b      	ldr	r3, [r7, #4]
   1cc72:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
   1cc76:	461a      	mov	r2, r3
   1cc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cc7a:	4293      	cmp	r3, r2
   1cc7c:	d109      	bne.n	1cc92 <tty_putchar+0x7c>
   1cc7e:	69fb      	ldr	r3, [r7, #28]
   1cc80:	613b      	str	r3, [r7, #16]
	__asm__ volatile(
   1cc82:	693b      	ldr	r3, [r7, #16]
   1cc84:	f383 8811 	msr	BASEPRI, r3
   1cc88:	f3bf 8f6f 	isb	sy
		return -ENOSPC;
   1cc8c:	f06f 031b 	mvn.w	r3, #27
   1cc90:	e019      	b.n	1ccc6 <tty_putchar+0xb0>
	tty->tx_ringbuf[tty->tx_put] = c;
   1cc92:	687b      	ldr	r3, [r7, #4]
   1cc94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cc96:	687a      	ldr	r2, [r7, #4]
   1cc98:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
   1cc9c:	4413      	add	r3, r2
   1cc9e:	78fa      	ldrb	r2, [r7, #3]
   1cca0:	701a      	strb	r2, [r3, #0]
	tty->tx_put = tx_next;
   1cca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cca4:	b29a      	uxth	r2, r3
   1cca6:	687b      	ldr	r3, [r7, #4]
   1cca8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
   1ccac:	69fb      	ldr	r3, [r7, #28]
   1ccae:	60fb      	str	r3, [r7, #12]
   1ccb0:	68fb      	ldr	r3, [r7, #12]
   1ccb2:	f383 8811 	msr	BASEPRI, r3
   1ccb6:	f3bf 8f6f 	isb	sy
	uart_irq_tx_enable(tty->uart_dev);
   1ccba:	687b      	ldr	r3, [r7, #4]
   1ccbc:	681b      	ldr	r3, [r3, #0]
   1ccbe:	4618      	mov	r0, r3
   1ccc0:	f7ff fee5 	bl	1ca8e <uart_irq_tx_enable>
	return 0;
   1ccc4:	2300      	movs	r3, #0
}
   1ccc6:	4618      	mov	r0, r3
   1ccc8:	3728      	adds	r7, #40	; 0x28
   1ccca:	46bd      	mov	sp, r7
   1cccc:	bd80      	pop	{r7, pc}

0001ccce <tty_write>:
{
   1ccce:	b580      	push	{r7, lr}
   1ccd0:	b088      	sub	sp, #32
   1ccd2:	af00      	add	r7, sp, #0
   1ccd4:	60f8      	str	r0, [r7, #12]
   1ccd6:	60b9      	str	r1, [r7, #8]
   1ccd8:	607a      	str	r2, [r7, #4]
	const u8_t *p = buf;
   1ccda:	68bb      	ldr	r3, [r7, #8]
   1ccdc:	61fb      	str	r3, [r7, #28]
	size_t out_size = 0;
   1ccde:	2300      	movs	r3, #0
   1cce0:	61bb      	str	r3, [r7, #24]
	int res = 0;
   1cce2:	2300      	movs	r3, #0
   1cce4:	617b      	str	r3, [r7, #20]
	if (tty->tx_ringbuf_sz == 0U) {
   1cce6:	68fb      	ldr	r3, [r7, #12]
   1cce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ccea:	2b00      	cmp	r3, #0
   1ccec:	d12e      	bne.n	1cd4c <tty_write+0x7e>
		out_size = size;
   1ccee:	687b      	ldr	r3, [r7, #4]
   1ccf0:	61bb      	str	r3, [r7, #24]
		while (size--) {
   1ccf2:	e008      	b.n	1cd06 <tty_write+0x38>
			uart_poll_out(tty->uart_dev, *p++);
   1ccf4:	68fb      	ldr	r3, [r7, #12]
   1ccf6:	6818      	ldr	r0, [r3, #0]
   1ccf8:	69fb      	ldr	r3, [r7, #28]
   1ccfa:	1c5a      	adds	r2, r3, #1
   1ccfc:	61fa      	str	r2, [r7, #28]
   1ccfe:	781b      	ldrb	r3, [r3, #0]
   1cd00:	4619      	mov	r1, r3
   1cd02:	f7ff feb5 	bl	1ca70 <uart_poll_out>
		while (size--) {
   1cd06:	687b      	ldr	r3, [r7, #4]
   1cd08:	1e5a      	subs	r2, r3, #1
   1cd0a:	607a      	str	r2, [r7, #4]
   1cd0c:	2b00      	cmp	r3, #0
   1cd0e:	d1f1      	bne.n	1ccf4 <tty_write+0x26>
		return out_size;
   1cd10:	69bb      	ldr	r3, [r7, #24]
   1cd12:	e021      	b.n	1cd58 <tty_write+0x8a>
		res = tty_putchar(tty, *p++);
   1cd14:	69fb      	ldr	r3, [r7, #28]
   1cd16:	1c5a      	adds	r2, r3, #1
   1cd18:	61fa      	str	r2, [r7, #28]
   1cd1a:	781b      	ldrb	r3, [r3, #0]
   1cd1c:	4619      	mov	r1, r3
   1cd1e:	68f8      	ldr	r0, [r7, #12]
   1cd20:	f7ff ff79 	bl	1cc16 <tty_putchar>
   1cd24:	6178      	str	r0, [r7, #20]
		if (res < 0) {
   1cd26:	697b      	ldr	r3, [r7, #20]
   1cd28:	2b00      	cmp	r3, #0
   1cd2a:	da0c      	bge.n	1cd46 <tty_write+0x78>
			if (out_size == 0) {
   1cd2c:	69bb      	ldr	r3, [r7, #24]
   1cd2e:	2b00      	cmp	r3, #0
   1cd30:	d107      	bne.n	1cd42 <tty_write+0x74>
				errno = -res;
   1cd32:	f004 fddf 	bl	218f4 <__errno>
   1cd36:	4602      	mov	r2, r0
   1cd38:	697b      	ldr	r3, [r7, #20]
   1cd3a:	425b      	negs	r3, r3
   1cd3c:	6013      	str	r3, [r2, #0]
				return res;
   1cd3e:	697b      	ldr	r3, [r7, #20]
   1cd40:	e00a      	b.n	1cd58 <tty_write+0x8a>
			return out_size;
   1cd42:	69bb      	ldr	r3, [r7, #24]
   1cd44:	e008      	b.n	1cd58 <tty_write+0x8a>
		out_size++;
   1cd46:	69bb      	ldr	r3, [r7, #24]
   1cd48:	3301      	adds	r3, #1
   1cd4a:	61bb      	str	r3, [r7, #24]
	while (size--) {
   1cd4c:	687b      	ldr	r3, [r7, #4]
   1cd4e:	1e5a      	subs	r2, r3, #1
   1cd50:	607a      	str	r2, [r7, #4]
   1cd52:	2b00      	cmp	r3, #0
   1cd54:	d1de      	bne.n	1cd14 <tty_write+0x46>
	return out_size;
   1cd56:	69bb      	ldr	r3, [r7, #24]
}
   1cd58:	4618      	mov	r0, r3
   1cd5a:	3720      	adds	r7, #32
   1cd5c:	46bd      	mov	sp, r7
   1cd5e:	bd80      	pop	{r7, pc}

0001cd60 <tty_getchar>:
{
   1cd60:	b580      	push	{r7, lr}
   1cd62:	b088      	sub	sp, #32
   1cd64:	af00      	add	r7, sp, #0
   1cd66:	6078      	str	r0, [r7, #4]
	res = k_sem_take(&tty->rx_sem, tty->rx_timeout);
   1cd68:	687b      	ldr	r3, [r7, #4]
   1cd6a:	1d1a      	adds	r2, r3, #4
   1cd6c:	687b      	ldr	r3, [r7, #4]
   1cd6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1cd70:	4619      	mov	r1, r3
   1cd72:	4610      	mov	r0, r2
   1cd74:	f7ff fd54 	bl	1c820 <k_sem_take>
   1cd78:	61f8      	str	r0, [r7, #28]
	if (res < 0) {
   1cd7a:	69fb      	ldr	r3, [r7, #28]
   1cd7c:	2b00      	cmp	r3, #0
   1cd7e:	da01      	bge.n	1cd84 <tty_getchar+0x24>
		return res;
   1cd80:	69fb      	ldr	r3, [r7, #28]
   1cd82:	e028      	b.n	1cdd6 <tty_getchar+0x76>
	__asm__ volatile(
   1cd84:	f04f 0320 	mov.w	r3, #32
   1cd88:	f3ef 8211 	mrs	r2, BASEPRI
   1cd8c:	f383 8811 	msr	BASEPRI, r3
   1cd90:	f3bf 8f6f 	isb	sy
   1cd94:	613a      	str	r2, [r7, #16]
   1cd96:	60fb      	str	r3, [r7, #12]
	return key;
   1cd98:	693b      	ldr	r3, [r7, #16]
	key = irq_lock();
   1cd9a:	61bb      	str	r3, [r7, #24]
	c = tty->rx_ringbuf[tty->rx_get++];
   1cd9c:	687b      	ldr	r3, [r7, #4]
   1cd9e:	69da      	ldr	r2, [r3, #28]
   1cda0:	687b      	ldr	r3, [r7, #4]
   1cda2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1cda4:	1c59      	adds	r1, r3, #1
   1cda6:	b288      	uxth	r0, r1
   1cda8:	6879      	ldr	r1, [r7, #4]
   1cdaa:	8488      	strh	r0, [r1, #36]	; 0x24
   1cdac:	4413      	add	r3, r2
   1cdae:	781b      	ldrb	r3, [r3, #0]
   1cdb0:	75fb      	strb	r3, [r7, #23]
	if (tty->rx_get >= tty->rx_ringbuf_sz) {
   1cdb2:	687b      	ldr	r3, [r7, #4]
   1cdb4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1cdb6:	461a      	mov	r2, r3
   1cdb8:	687b      	ldr	r3, [r7, #4]
   1cdba:	6a1b      	ldr	r3, [r3, #32]
   1cdbc:	429a      	cmp	r2, r3
   1cdbe:	d302      	bcc.n	1cdc6 <tty_getchar+0x66>
		tty->rx_get = 0U;
   1cdc0:	687b      	ldr	r3, [r7, #4]
   1cdc2:	2200      	movs	r2, #0
   1cdc4:	849a      	strh	r2, [r3, #36]	; 0x24
   1cdc6:	69bb      	ldr	r3, [r7, #24]
   1cdc8:	60bb      	str	r3, [r7, #8]
	__asm__ volatile(
   1cdca:	68bb      	ldr	r3, [r7, #8]
   1cdcc:	f383 8811 	msr	BASEPRI, r3
   1cdd0:	f3bf 8f6f 	isb	sy
	return c;
   1cdd4:	7dfb      	ldrb	r3, [r7, #23]
}
   1cdd6:	4618      	mov	r0, r3
   1cdd8:	3720      	adds	r7, #32
   1cdda:	46bd      	mov	sp, r7
   1cddc:	bd80      	pop	{r7, pc}

0001cdde <tty_read_unbuf>:
{
   1cdde:	b580      	push	{r7, lr}
   1cde0:	b08a      	sub	sp, #40	; 0x28
   1cde2:	af00      	add	r7, sp, #0
   1cde4:	60f8      	str	r0, [r7, #12]
   1cde6:	60b9      	str	r1, [r7, #8]
   1cde8:	607a      	str	r2, [r7, #4]
	u8_t *p = buf;
   1cdea:	68bb      	ldr	r3, [r7, #8]
   1cdec:	627b      	str	r3, [r7, #36]	; 0x24
	size_t out_size = 0;
   1cdee:	2300      	movs	r3, #0
   1cdf0:	623b      	str	r3, [r7, #32]
	int res = 0;
   1cdf2:	2300      	movs	r3, #0
   1cdf4:	61bb      	str	r3, [r7, #24]
	u32_t timeout = tty->rx_timeout;
   1cdf6:	68fb      	ldr	r3, [r7, #12]
   1cdf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1cdfa:	61fb      	str	r3, [r7, #28]
	while (size) {
   1cdfc:	e038      	b.n	1ce70 <tty_read_unbuf+0x92>
		res = uart_poll_in(tty->uart_dev, &c);
   1cdfe:	68fb      	ldr	r3, [r7, #12]
   1ce00:	681b      	ldr	r3, [r3, #0]
   1ce02:	f107 0217 	add.w	r2, r7, #23
   1ce06:	4611      	mov	r1, r2
   1ce08:	4618      	mov	r0, r3
   1ce0a:	f7ff fe23 	bl	1ca54 <uart_poll_in>
   1ce0e:	61b8      	str	r0, [r7, #24]
		if (res <= -2) {
   1ce10:	69bb      	ldr	r3, [r7, #24]
   1ce12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1ce16:	da0a      	bge.n	1ce2e <tty_read_unbuf+0x50>
			if (out_size == 0) {
   1ce18:	6a3b      	ldr	r3, [r7, #32]
   1ce1a:	2b00      	cmp	r3, #0
   1ce1c:	d12c      	bne.n	1ce78 <tty_read_unbuf+0x9a>
				errno = res;
   1ce1e:	f004 fd69 	bl	218f4 <__errno>
   1ce22:	4602      	mov	r2, r0
   1ce24:	69bb      	ldr	r3, [r7, #24]
   1ce26:	6013      	str	r3, [r2, #0]
				return -1;
   1ce28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ce2c:	e026      	b.n	1ce7c <tty_read_unbuf+0x9e>
		if (res == 0) {
   1ce2e:	69bb      	ldr	r3, [r7, #24]
   1ce30:	2b00      	cmp	r3, #0
   1ce32:	d10a      	bne.n	1ce4a <tty_read_unbuf+0x6c>
			*p++ = c;
   1ce34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ce36:	1c5a      	adds	r2, r3, #1
   1ce38:	627a      	str	r2, [r7, #36]	; 0x24
   1ce3a:	7dfa      	ldrb	r2, [r7, #23]
   1ce3c:	701a      	strb	r2, [r3, #0]
			out_size++;
   1ce3e:	6a3b      	ldr	r3, [r7, #32]
   1ce40:	3301      	adds	r3, #1
   1ce42:	623b      	str	r3, [r7, #32]
			size--;
   1ce44:	687b      	ldr	r3, [r7, #4]
   1ce46:	3b01      	subs	r3, #1
   1ce48:	607b      	str	r3, [r7, #4]
		if (size == 0 || (timeout != K_FOREVER && timeout-- == 0U)) {
   1ce4a:	687b      	ldr	r3, [r7, #4]
   1ce4c:	2b00      	cmp	r3, #0
   1ce4e:	d013      	beq.n	1ce78 <tty_read_unbuf+0x9a>
   1ce50:	69fb      	ldr	r3, [r7, #28]
   1ce52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1ce56:	d004      	beq.n	1ce62 <tty_read_unbuf+0x84>
   1ce58:	69fb      	ldr	r3, [r7, #28]
   1ce5a:	1e5a      	subs	r2, r3, #1
   1ce5c:	61fa      	str	r2, [r7, #28]
   1ce5e:	2b00      	cmp	r3, #0
   1ce60:	d00a      	beq.n	1ce78 <tty_read_unbuf+0x9a>
		if (res == -1) {
   1ce62:	69bb      	ldr	r3, [r7, #24]
   1ce64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1ce68:	d102      	bne.n	1ce70 <tty_read_unbuf+0x92>
			k_sleep(1);
   1ce6a:	2001      	movs	r0, #1
   1ce6c:	f7ff fcbd 	bl	1c7ea <k_sleep>
	while (size) {
   1ce70:	687b      	ldr	r3, [r7, #4]
   1ce72:	2b00      	cmp	r3, #0
   1ce74:	d1c3      	bne.n	1cdfe <tty_read_unbuf+0x20>
   1ce76:	e000      	b.n	1ce7a <tty_read_unbuf+0x9c>
			break;
   1ce78:	bf00      	nop
	return out_size;
   1ce7a:	6a3b      	ldr	r3, [r7, #32]
}
   1ce7c:	4618      	mov	r0, r3
   1ce7e:	3728      	adds	r7, #40	; 0x28
   1ce80:	46bd      	mov	sp, r7
   1ce82:	bd80      	pop	{r7, pc}

0001ce84 <tty_read>:
{
   1ce84:	b580      	push	{r7, lr}
   1ce86:	b088      	sub	sp, #32
   1ce88:	af00      	add	r7, sp, #0
   1ce8a:	60f8      	str	r0, [r7, #12]
   1ce8c:	60b9      	str	r1, [r7, #8]
   1ce8e:	607a      	str	r2, [r7, #4]
	u8_t *p = buf;
   1ce90:	68bb      	ldr	r3, [r7, #8]
   1ce92:	61fb      	str	r3, [r7, #28]
	size_t out_size = 0;
   1ce94:	2300      	movs	r3, #0
   1ce96:	61bb      	str	r3, [r7, #24]
	int res = 0;
   1ce98:	2300      	movs	r3, #0
   1ce9a:	617b      	str	r3, [r7, #20]
	if (tty->rx_ringbuf_sz == 0U) {
   1ce9c:	68fb      	ldr	r3, [r7, #12]
   1ce9e:	6a1b      	ldr	r3, [r3, #32]
   1cea0:	2b00      	cmp	r3, #0
   1cea2:	d123      	bne.n	1ceec <tty_read+0x68>
		return tty_read_unbuf(tty, buf, size);
   1cea4:	687a      	ldr	r2, [r7, #4]
   1cea6:	68b9      	ldr	r1, [r7, #8]
   1cea8:	68f8      	ldr	r0, [r7, #12]
   1ceaa:	f7ff ff98 	bl	1cdde <tty_read_unbuf>
   1ceae:	4603      	mov	r3, r0
   1ceb0:	e022      	b.n	1cef8 <tty_read+0x74>
		res = tty_getchar(tty);
   1ceb2:	68f8      	ldr	r0, [r7, #12]
   1ceb4:	f7ff ff54 	bl	1cd60 <tty_getchar>
   1ceb8:	6178      	str	r0, [r7, #20]
		if (res < 0) {
   1ceba:	697b      	ldr	r3, [r7, #20]
   1cebc:	2b00      	cmp	r3, #0
   1cebe:	da0c      	bge.n	1ceda <tty_read+0x56>
			if (out_size == 0) {
   1cec0:	69bb      	ldr	r3, [r7, #24]
   1cec2:	2b00      	cmp	r3, #0
   1cec4:	d107      	bne.n	1ced6 <tty_read+0x52>
				errno = -res;
   1cec6:	f004 fd15 	bl	218f4 <__errno>
   1ceca:	4602      	mov	r2, r0
   1cecc:	697b      	ldr	r3, [r7, #20]
   1cece:	425b      	negs	r3, r3
   1ced0:	6013      	str	r3, [r2, #0]
				return res;
   1ced2:	697b      	ldr	r3, [r7, #20]
   1ced4:	e010      	b.n	1cef8 <tty_read+0x74>
			return out_size;
   1ced6:	69bb      	ldr	r3, [r7, #24]
   1ced8:	e00e      	b.n	1cef8 <tty_read+0x74>
		*p++ = (u8_t)res;
   1ceda:	69fb      	ldr	r3, [r7, #28]
   1cedc:	1c5a      	adds	r2, r3, #1
   1cede:	61fa      	str	r2, [r7, #28]
   1cee0:	697a      	ldr	r2, [r7, #20]
   1cee2:	b2d2      	uxtb	r2, r2
   1cee4:	701a      	strb	r2, [r3, #0]
		out_size++;
   1cee6:	69bb      	ldr	r3, [r7, #24]
   1cee8:	3301      	adds	r3, #1
   1ceea:	61bb      	str	r3, [r7, #24]
	while (size--) {
   1ceec:	687b      	ldr	r3, [r7, #4]
   1ceee:	1e5a      	subs	r2, r3, #1
   1cef0:	607a      	str	r2, [r7, #4]
   1cef2:	2b00      	cmp	r3, #0
   1cef4:	d1dd      	bne.n	1ceb2 <tty_read+0x2e>
	return out_size;
   1cef6:	69bb      	ldr	r3, [r7, #24]
}
   1cef8:	4618      	mov	r0, r3
   1cefa:	3720      	adds	r7, #32
   1cefc:	46bd      	mov	sp, r7
   1cefe:	bd80      	pop	{r7, pc}

0001cf00 <tty_set_rx_buf>:

int tty_set_rx_buf(struct tty_serial *tty, void *buf, size_t size)
{
   1cf00:	b580      	push	{r7, lr}
   1cf02:	b084      	sub	sp, #16
   1cf04:	af00      	add	r7, sp, #0
   1cf06:	60f8      	str	r0, [r7, #12]
   1cf08:	60b9      	str	r1, [r7, #8]
   1cf0a:	607a      	str	r2, [r7, #4]
	uart_irq_rx_disable(tty->uart_dev);
   1cf0c:	68fb      	ldr	r3, [r7, #12]
   1cf0e:	681b      	ldr	r3, [r3, #0]
   1cf10:	4618      	mov	r0, r3
   1cf12:	f7ff fddd 	bl	1cad0 <uart_irq_rx_disable>

	tty->rx_ringbuf = buf;
   1cf16:	68fb      	ldr	r3, [r7, #12]
   1cf18:	68ba      	ldr	r2, [r7, #8]
   1cf1a:	61da      	str	r2, [r3, #28]
	tty->rx_ringbuf_sz = size;
   1cf1c:	68fb      	ldr	r3, [r7, #12]
   1cf1e:	687a      	ldr	r2, [r7, #4]
   1cf20:	621a      	str	r2, [r3, #32]

	if (size > 0) {
   1cf22:	687b      	ldr	r3, [r7, #4]
   1cf24:	2b00      	cmp	r3, #0
   1cf26:	d00c      	beq.n	1cf42 <tty_set_rx_buf+0x42>
		k_sem_init(&tty->rx_sem, 0, UINT_MAX);
   1cf28:	68fb      	ldr	r3, [r7, #12]
   1cf2a:	3304      	adds	r3, #4
   1cf2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cf30:	2100      	movs	r1, #0
   1cf32:	4618      	mov	r0, r3
   1cf34:	f7ff fc65 	bl	1c802 <k_sem_init>
		uart_irq_rx_enable(tty->uart_dev);
   1cf38:	68fb      	ldr	r3, [r7, #12]
   1cf3a:	681b      	ldr	r3, [r3, #0]
   1cf3c:	4618      	mov	r0, r3
   1cf3e:	f7ff fdbc 	bl	1caba <uart_irq_rx_enable>
	}

	return 0;
   1cf42:	2300      	movs	r3, #0
}
   1cf44:	4618      	mov	r0, r3
   1cf46:	3710      	adds	r7, #16
   1cf48:	46bd      	mov	sp, r7
   1cf4a:	bd80      	pop	{r7, pc}

0001cf4c <tty_set_tx_buf>:

int tty_set_tx_buf(struct tty_serial *tty, void *buf, size_t size)
{
   1cf4c:	b580      	push	{r7, lr}
   1cf4e:	b084      	sub	sp, #16
   1cf50:	af00      	add	r7, sp, #0
   1cf52:	60f8      	str	r0, [r7, #12]
   1cf54:	60b9      	str	r1, [r7, #8]
   1cf56:	607a      	str	r2, [r7, #4]
	uart_irq_tx_disable(tty->uart_dev);
   1cf58:	68fb      	ldr	r3, [r7, #12]
   1cf5a:	681b      	ldr	r3, [r3, #0]
   1cf5c:	4618      	mov	r0, r3
   1cf5e:	f7ff fda1 	bl	1caa4 <uart_irq_tx_disable>

	tty->tx_ringbuf = buf;
   1cf62:	68fb      	ldr	r3, [r7, #12]
   1cf64:	68ba      	ldr	r2, [r7, #8]
   1cf66:	645a      	str	r2, [r3, #68]	; 0x44
	tty->tx_ringbuf_sz = size;
   1cf68:	68fb      	ldr	r3, [r7, #12]
   1cf6a:	687a      	ldr	r2, [r7, #4]
   1cf6c:	649a      	str	r2, [r3, #72]	; 0x48

	k_sem_init(&tty->tx_sem, size - 1, UINT_MAX);
   1cf6e:	68fb      	ldr	r3, [r7, #12]
   1cf70:	f103 002c 	add.w	r0, r3, #44	; 0x2c
   1cf74:	687b      	ldr	r3, [r7, #4]
   1cf76:	3b01      	subs	r3, #1
   1cf78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cf7c:	4619      	mov	r1, r3
   1cf7e:	f7ff fc40 	bl	1c802 <k_sem_init>

	/* New buffer is initially empty, no need to re-enable interrupts,
	 * it will be done when needed (on first output char).
	 */

	return 0;
   1cf82:	2300      	movs	r3, #0
}
   1cf84:	4618      	mov	r0, r3
   1cf86:	3710      	adds	r7, #16
   1cf88:	46bd      	mov	sp, r7
   1cf8a:	bd80      	pop	{r7, pc}

0001cf8c <device_get_binding>:

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE1(K_SYSCALL_DEVICE_GET_BINDING, device_get_binding, struct device *, const char *, name)
   1cf8c:	b580      	push	{r7, lr}
   1cf8e:	b082      	sub	sp, #8
   1cf90:	af00      	add	r7, sp, #0
   1cf92:	6078      	str	r0, [r7, #4]
   1cf94:	6878      	ldr	r0, [r7, #4]
   1cf96:	f7f9 f9a9 	bl	162ec <z_impl_device_get_binding>
   1cf9a:	4603      	mov	r3, r0
   1cf9c:	4618      	mov	r0, r3
   1cf9e:	3708      	adds	r7, #8
   1cfa0:	46bd      	mov	sp, r7
   1cfa2:	bd80      	pop	{r7, pc}

0001cfa4 <z_snode_next_peek>:
}

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
   1cfa4:	b480      	push	{r7}
   1cfa6:	b083      	sub	sp, #12
   1cfa8:	af00      	add	r7, sp, #0
   1cfaa:	6078      	str	r0, [r7, #4]
	return node->next;
   1cfac:	687b      	ldr	r3, [r7, #4]
   1cfae:	681b      	ldr	r3, [r3, #0]
}
   1cfb0:	4618      	mov	r0, r3
   1cfb2:	370c      	adds	r7, #12
   1cfb4:	46bd      	mov	sp, r7
   1cfb6:	bc80      	pop	{r7}
   1cfb8:	4770      	bx	lr

0001cfba <z_snode_next_set>:

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
   1cfba:	b480      	push	{r7}
   1cfbc:	b083      	sub	sp, #12
   1cfbe:	af00      	add	r7, sp, #0
   1cfc0:	6078      	str	r0, [r7, #4]
   1cfc2:	6039      	str	r1, [r7, #0]
	parent->next = child;
   1cfc4:	687b      	ldr	r3, [r7, #4]
   1cfc6:	683a      	ldr	r2, [r7, #0]
   1cfc8:	601a      	str	r2, [r3, #0]
}
   1cfca:	bf00      	nop
   1cfcc:	370c      	adds	r7, #12
   1cfce:	46bd      	mov	sp, r7
   1cfd0:	bc80      	pop	{r7}
   1cfd2:	4770      	bx	lr

0001cfd4 <z_slist_head_set>:

static inline void z_slist_head_set(sys_slist_t *list, sys_snode_t *node)
{
   1cfd4:	b480      	push	{r7}
   1cfd6:	b083      	sub	sp, #12
   1cfd8:	af00      	add	r7, sp, #0
   1cfda:	6078      	str	r0, [r7, #4]
   1cfdc:	6039      	str	r1, [r7, #0]
	list->head = node;
   1cfde:	687b      	ldr	r3, [r7, #4]
   1cfe0:	683a      	ldr	r2, [r7, #0]
   1cfe2:	601a      	str	r2, [r3, #0]
}
   1cfe4:	bf00      	nop
   1cfe6:	370c      	adds	r7, #12
   1cfe8:	46bd      	mov	sp, r7
   1cfea:	bc80      	pop	{r7}
   1cfec:	4770      	bx	lr

0001cfee <z_slist_tail_set>:

static inline void z_slist_tail_set(sys_slist_t *list, sys_snode_t *node)
{
   1cfee:	b480      	push	{r7}
   1cff0:	b083      	sub	sp, #12
   1cff2:	af00      	add	r7, sp, #0
   1cff4:	6078      	str	r0, [r7, #4]
   1cff6:	6039      	str	r1, [r7, #0]
	list->tail = node;
   1cff8:	687b      	ldr	r3, [r7, #4]
   1cffa:	683a      	ldr	r2, [r7, #0]
   1cffc:	605a      	str	r2, [r3, #4]
}
   1cffe:	bf00      	nop
   1d000:	370c      	adds	r7, #12
   1d002:	46bd      	mov	sp, r7
   1d004:	bc80      	pop	{r7}
   1d006:	4770      	bx	lr

0001d008 <sys_slist_peek_head>:
 * @param list A point on the list to peek the first node from
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
   1d008:	b480      	push	{r7}
   1d00a:	b083      	sub	sp, #12
   1d00c:	af00      	add	r7, sp, #0
   1d00e:	6078      	str	r0, [r7, #4]
	return list->head;
   1d010:	687b      	ldr	r3, [r7, #4]
   1d012:	681b      	ldr	r3, [r3, #0]
}
   1d014:	4618      	mov	r0, r3
   1d016:	370c      	adds	r7, #12
   1d018:	46bd      	mov	sp, r7
   1d01a:	bc80      	pop	{r7}
   1d01c:	4770      	bx	lr

0001d01e <sys_slist_peek_tail>:
 * @param list A point on the list to peek the last node from
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
   1d01e:	b480      	push	{r7}
   1d020:	b083      	sub	sp, #12
   1d022:	af00      	add	r7, sp, #0
   1d024:	6078      	str	r0, [r7, #4]
	return list->tail;
   1d026:	687b      	ldr	r3, [r7, #4]
   1d028:	685b      	ldr	r3, [r3, #4]
}
   1d02a:	4618      	mov	r0, r3
   1d02c:	370c      	adds	r7, #12
   1d02e:	46bd      	mov	sp, r7
   1d030:	bc80      	pop	{r7}
   1d032:	4770      	bx	lr

0001d034 <sys_slist_peek_next_no_check>:
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d034:	b580      	push	{r7, lr}
   1d036:	b082      	sub	sp, #8
   1d038:	af00      	add	r7, sp, #0
   1d03a:	6078      	str	r0, [r7, #4]
   1d03c:	6878      	ldr	r0, [r7, #4]
   1d03e:	f7ff ffb1 	bl	1cfa4 <z_snode_next_peek>
   1d042:	4603      	mov	r3, r0
   1d044:	4618      	mov	r0, r3
   1d046:	3708      	adds	r7, #8
   1d048:	46bd      	mov	sp, r7
   1d04a:	bd80      	pop	{r7, pc}

0001d04c <sys_slist_peek_next>:
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   1d04c:	b580      	push	{r7, lr}
   1d04e:	b082      	sub	sp, #8
   1d050:	af00      	add	r7, sp, #0
   1d052:	6078      	str	r0, [r7, #4]
   1d054:	687b      	ldr	r3, [r7, #4]
   1d056:	2b00      	cmp	r3, #0
   1d058:	d004      	beq.n	1d064 <sys_slist_peek_next+0x18>
   1d05a:	6878      	ldr	r0, [r7, #4]
   1d05c:	f7ff ffea 	bl	1d034 <sys_slist_peek_next_no_check>
   1d060:	4603      	mov	r3, r0
   1d062:	e000      	b.n	1d066 <sys_slist_peek_next+0x1a>
   1d064:	2300      	movs	r3, #0
   1d066:	4618      	mov	r0, r3
   1d068:	3708      	adds	r7, #8
   1d06a:	46bd      	mov	sp, r7
   1d06c:	bd80      	pop	{r7, pc}

0001d06e <sys_slist_append>:
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1d06e:	b580      	push	{r7, lr}
   1d070:	b082      	sub	sp, #8
   1d072:	af00      	add	r7, sp, #0
   1d074:	6078      	str	r0, [r7, #4]
   1d076:	6039      	str	r1, [r7, #0]
   1d078:	2100      	movs	r1, #0
   1d07a:	6838      	ldr	r0, [r7, #0]
   1d07c:	f7ff ff9d 	bl	1cfba <z_snode_next_set>
   1d080:	6878      	ldr	r0, [r7, #4]
   1d082:	f7ff ffcc 	bl	1d01e <sys_slist_peek_tail>
   1d086:	4603      	mov	r3, r0
   1d088:	2b00      	cmp	r3, #0
   1d08a:	d108      	bne.n	1d09e <sys_slist_append+0x30>
   1d08c:	6839      	ldr	r1, [r7, #0]
   1d08e:	6878      	ldr	r0, [r7, #4]
   1d090:	f7ff ffad 	bl	1cfee <z_slist_tail_set>
   1d094:	6839      	ldr	r1, [r7, #0]
   1d096:	6878      	ldr	r0, [r7, #4]
   1d098:	f7ff ff9c 	bl	1cfd4 <z_slist_head_set>
   1d09c:	e00b      	b.n	1d0b6 <sys_slist_append+0x48>
   1d09e:	6878      	ldr	r0, [r7, #4]
   1d0a0:	f7ff ffbd 	bl	1d01e <sys_slist_peek_tail>
   1d0a4:	4603      	mov	r3, r0
   1d0a6:	6839      	ldr	r1, [r7, #0]
   1d0a8:	4618      	mov	r0, r3
   1d0aa:	f7ff ff86 	bl	1cfba <z_snode_next_set>
   1d0ae:	6839      	ldr	r1, [r7, #0]
   1d0b0:	6878      	ldr	r0, [r7, #4]
   1d0b2:	f7ff ff9c 	bl	1cfee <z_slist_tail_set>
   1d0b6:	bf00      	nop
   1d0b8:	3708      	adds	r7, #8
   1d0ba:	46bd      	mov	sp, r7
   1d0bc:	bd80      	pop	{r7, pc}

0001d0be <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   1d0be:	b580      	push	{r7, lr}
   1d0c0:	b084      	sub	sp, #16
   1d0c2:	af00      	add	r7, sp, #0
   1d0c4:	60f8      	str	r0, [r7, #12]
   1d0c6:	60b9      	str	r1, [r7, #8]
   1d0c8:	607a      	str	r2, [r7, #4]
   1d0ca:	68bb      	ldr	r3, [r7, #8]
   1d0cc:	2b00      	cmp	r3, #0
   1d0ce:	d117      	bne.n	1d100 <sys_slist_remove+0x42>
   1d0d0:	6878      	ldr	r0, [r7, #4]
   1d0d2:	f7ff ff67 	bl	1cfa4 <z_snode_next_peek>
   1d0d6:	4603      	mov	r3, r0
   1d0d8:	4619      	mov	r1, r3
   1d0da:	68f8      	ldr	r0, [r7, #12]
   1d0dc:	f7ff ff7a 	bl	1cfd4 <z_slist_head_set>
   1d0e0:	68f8      	ldr	r0, [r7, #12]
   1d0e2:	f7ff ff9c 	bl	1d01e <sys_slist_peek_tail>
   1d0e6:	4602      	mov	r2, r0
   1d0e8:	687b      	ldr	r3, [r7, #4]
   1d0ea:	4293      	cmp	r3, r2
   1d0ec:	d11b      	bne.n	1d126 <sys_slist_remove+0x68>
   1d0ee:	68f8      	ldr	r0, [r7, #12]
   1d0f0:	f7ff ff8a 	bl	1d008 <sys_slist_peek_head>
   1d0f4:	4603      	mov	r3, r0
   1d0f6:	4619      	mov	r1, r3
   1d0f8:	68f8      	ldr	r0, [r7, #12]
   1d0fa:	f7ff ff78 	bl	1cfee <z_slist_tail_set>
   1d0fe:	e012      	b.n	1d126 <sys_slist_remove+0x68>
   1d100:	6878      	ldr	r0, [r7, #4]
   1d102:	f7ff ff4f 	bl	1cfa4 <z_snode_next_peek>
   1d106:	4603      	mov	r3, r0
   1d108:	4619      	mov	r1, r3
   1d10a:	68b8      	ldr	r0, [r7, #8]
   1d10c:	f7ff ff55 	bl	1cfba <z_snode_next_set>
   1d110:	68f8      	ldr	r0, [r7, #12]
   1d112:	f7ff ff84 	bl	1d01e <sys_slist_peek_tail>
   1d116:	4602      	mov	r2, r0
   1d118:	687b      	ldr	r3, [r7, #4]
   1d11a:	4293      	cmp	r3, r2
   1d11c:	d103      	bne.n	1d126 <sys_slist_remove+0x68>
   1d11e:	68b9      	ldr	r1, [r7, #8]
   1d120:	68f8      	ldr	r0, [r7, #12]
   1d122:	f7ff ff64 	bl	1cfee <z_slist_tail_set>
   1d126:	2100      	movs	r1, #0
   1d128:	6878      	ldr	r0, [r7, #4]
   1d12a:	f7ff ff46 	bl	1cfba <z_snode_next_set>
   1d12e:	bf00      	nop
   1d130:	3710      	adds	r7, #16
   1d132:	46bd      	mov	sp, r7
   1d134:	bd80      	pop	{r7, pc}

0001d136 <sys_slist_find_and_remove>:
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d136:	b580      	push	{r7, lr}
   1d138:	b084      	sub	sp, #16
   1d13a:	af00      	add	r7, sp, #0
   1d13c:	6078      	str	r0, [r7, #4]
   1d13e:	6039      	str	r1, [r7, #0]
   1d140:	2300      	movs	r3, #0
   1d142:	60fb      	str	r3, [r7, #12]
   1d144:	6878      	ldr	r0, [r7, #4]
   1d146:	f7ff ff5f 	bl	1d008 <sys_slist_peek_head>
   1d14a:	60b8      	str	r0, [r7, #8]
   1d14c:	e010      	b.n	1d170 <sys_slist_find_and_remove+0x3a>
   1d14e:	68ba      	ldr	r2, [r7, #8]
   1d150:	683b      	ldr	r3, [r7, #0]
   1d152:	429a      	cmp	r2, r3
   1d154:	d106      	bne.n	1d164 <sys_slist_find_and_remove+0x2e>
   1d156:	683a      	ldr	r2, [r7, #0]
   1d158:	68f9      	ldr	r1, [r7, #12]
   1d15a:	6878      	ldr	r0, [r7, #4]
   1d15c:	f7ff ffaf 	bl	1d0be <sys_slist_remove>
   1d160:	2301      	movs	r3, #1
   1d162:	e009      	b.n	1d178 <sys_slist_find_and_remove+0x42>
   1d164:	68bb      	ldr	r3, [r7, #8]
   1d166:	60fb      	str	r3, [r7, #12]
   1d168:	68b8      	ldr	r0, [r7, #8]
   1d16a:	f7ff ff6f 	bl	1d04c <sys_slist_peek_next>
   1d16e:	60b8      	str	r0, [r7, #8]
   1d170:	68bb      	ldr	r3, [r7, #8]
   1d172:	2b00      	cmp	r3, #0
   1d174:	d1eb      	bne.n	1d14e <sys_slist_find_and_remove+0x18>
   1d176:	2300      	movs	r3, #0
   1d178:	4618      	mov	r0, r3
   1d17a:	3710      	adds	r7, #16
   1d17c:	46bd      	mov	sp, r7
   1d17e:	bd80      	pop	{r7, pc}

0001d180 <_is_user_context>:
 * Indicate whether the CPU is currently in user mode
 *
 * @return true if the CPU is currently running with user permissions
 */
static inline bool _is_user_context(void)
{
   1d180:	b480      	push	{r7}
   1d182:	af00      	add	r7, sp, #0
#ifdef CONFIG_USERSPACE
	return z_arch_is_user_context();
#else
	return false;
   1d184:	2300      	movs	r3, #0
#endif
}
   1d186:	4618      	mov	r0, r3
   1d188:	46bd      	mov	sp, r7
   1d18a:	bc80      	pop	{r7}
   1d18c:	4770      	bx	lr

0001d18e <sys_put_be16>:
 *
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_be16(u16_t val, u8_t dst[2])
{
   1d18e:	b480      	push	{r7}
   1d190:	b083      	sub	sp, #12
   1d192:	af00      	add	r7, sp, #0
   1d194:	4603      	mov	r3, r0
   1d196:	6039      	str	r1, [r7, #0]
   1d198:	80fb      	strh	r3, [r7, #6]
	dst[0] = val >> 8;
   1d19a:	88fb      	ldrh	r3, [r7, #6]
   1d19c:	0a1b      	lsrs	r3, r3, #8
   1d19e:	b29b      	uxth	r3, r3
   1d1a0:	b2da      	uxtb	r2, r3
   1d1a2:	683b      	ldr	r3, [r7, #0]
   1d1a4:	701a      	strb	r2, [r3, #0]
	dst[1] = val;
   1d1a6:	683b      	ldr	r3, [r7, #0]
   1d1a8:	3301      	adds	r3, #1
   1d1aa:	88fa      	ldrh	r2, [r7, #6]
   1d1ac:	b2d2      	uxtb	r2, r2
   1d1ae:	701a      	strb	r2, [r3, #0]
}
   1d1b0:	bf00      	nop
   1d1b2:	370c      	adds	r7, #12
   1d1b4:	46bd      	mov	sp, r7
   1d1b6:	bc80      	pop	{r7}
   1d1b8:	4770      	bx	lr

0001d1ba <sys_put_be32>:
 *
 *  @param val 32-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_be32(u32_t val, u8_t dst[4])
{
   1d1ba:	b580      	push	{r7, lr}
   1d1bc:	b082      	sub	sp, #8
   1d1be:	af00      	add	r7, sp, #0
   1d1c0:	6078      	str	r0, [r7, #4]
   1d1c2:	6039      	str	r1, [r7, #0]
	sys_put_be16(val >> 16, dst);
   1d1c4:	687b      	ldr	r3, [r7, #4]
   1d1c6:	0c1b      	lsrs	r3, r3, #16
   1d1c8:	b29b      	uxth	r3, r3
   1d1ca:	6839      	ldr	r1, [r7, #0]
   1d1cc:	4618      	mov	r0, r3
   1d1ce:	f7ff ffde 	bl	1d18e <sys_put_be16>
	sys_put_be16(val, &dst[2]);
   1d1d2:	687b      	ldr	r3, [r7, #4]
   1d1d4:	b29a      	uxth	r2, r3
   1d1d6:	683b      	ldr	r3, [r7, #0]
   1d1d8:	3302      	adds	r3, #2
   1d1da:	4619      	mov	r1, r3
   1d1dc:	4610      	mov	r0, r2
   1d1de:	f7ff ffd6 	bl	1d18e <sys_put_be16>
}
   1d1e2:	bf00      	nop
   1d1e4:	3708      	adds	r7, #8
   1d1e6:	46bd      	mov	sp, r7
   1d1e8:	bd80      	pop	{r7, pc}

0001d1ea <net_ipv4_addr_cmp>:
 *
 *  @return True if the addresses are the same, false otherwise.
 */
static inline bool net_ipv4_addr_cmp(const struct in_addr *addr1,
				     const struct in_addr *addr2)
{
   1d1ea:	b480      	push	{r7}
   1d1ec:	b085      	sub	sp, #20
   1d1ee:	af00      	add	r7, sp, #0
   1d1f0:	6078      	str	r0, [r7, #4]
   1d1f2:	6039      	str	r1, [r7, #0]
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1d1f4:	687b      	ldr	r3, [r7, #4]
   1d1f6:	60fb      	str	r3, [r7, #12]
   1d1f8:	68fb      	ldr	r3, [r7, #12]
   1d1fa:	681a      	ldr	r2, [r3, #0]
   1d1fc:	683b      	ldr	r3, [r7, #0]
   1d1fe:	60bb      	str	r3, [r7, #8]
   1d200:	68bb      	ldr	r3, [r7, #8]
   1d202:	681b      	ldr	r3, [r3, #0]
   1d204:	429a      	cmp	r2, r3
   1d206:	bf0c      	ite	eq
   1d208:	2301      	moveq	r3, #1
   1d20a:	2300      	movne	r3, #0
   1d20c:	b2db      	uxtb	r3, r3
}
   1d20e:	4618      	mov	r0, r3
   1d210:	3714      	adds	r7, #20
   1d212:	46bd      	mov	sp, r7
   1d214:	bc80      	pop	{r7}
   1d216:	4770      	bx	lr

0001d218 <net_ipv6_addr_cmp>:
 *
 *  @return True if the addresses are the same, false otherwise.
 */
static inline bool net_ipv6_addr_cmp(const struct in6_addr *addr1,
				     const struct in6_addr *addr2)
{
   1d218:	b580      	push	{r7, lr}
   1d21a:	b082      	sub	sp, #8
   1d21c:	af00      	add	r7, sp, #0
   1d21e:	6078      	str	r0, [r7, #4]
   1d220:	6039      	str	r1, [r7, #0]
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1d222:	2210      	movs	r2, #16
   1d224:	6839      	ldr	r1, [r7, #0]
   1d226:	6878      	ldr	r0, [r7, #4]
   1d228:	f7e4 ff10 	bl	204c <memcmp>
   1d22c:	4603      	mov	r3, r0
   1d22e:	2b00      	cmp	r3, #0
   1d230:	bf0c      	ite	eq
   1d232:	2301      	moveq	r3, #1
   1d234:	2300      	movne	r3, #0
   1d236:	b2db      	uxtb	r3, r3
}
   1d238:	4618      	mov	r0, r3
   1d23a:	3708      	adds	r7, #8
   1d23c:	46bd      	mov	sp, r7
   1d23e:	bd80      	pop	{r7, pc}

0001d240 <net_ipv6_is_addr_unspecified>:
 *  @param addr IPv6 address.
 *
 *  @return True if the address is unspecified, false otherwise.
 */
static inline bool net_ipv6_is_addr_unspecified(const struct in6_addr *addr)
{
   1d240:	b480      	push	{r7}
   1d242:	b087      	sub	sp, #28
   1d244:	af00      	add	r7, sp, #0
   1d246:	6078      	str	r0, [r7, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d248:	687b      	ldr	r3, [r7, #4]
   1d24a:	617b      	str	r3, [r7, #20]
   1d24c:	697b      	ldr	r3, [r7, #20]
   1d24e:	681b      	ldr	r3, [r3, #0]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d250:	2b00      	cmp	r3, #0
   1d252:	d116      	bne.n	1d282 <net_ipv6_is_addr_unspecified+0x42>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d254:	687b      	ldr	r3, [r7, #4]
   1d256:	3304      	adds	r3, #4
   1d258:	613b      	str	r3, [r7, #16]
   1d25a:	693b      	ldr	r3, [r7, #16]
   1d25c:	681b      	ldr	r3, [r3, #0]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d25e:	2b00      	cmp	r3, #0
   1d260:	d10f      	bne.n	1d282 <net_ipv6_is_addr_unspecified+0x42>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d262:	687b      	ldr	r3, [r7, #4]
   1d264:	3308      	adds	r3, #8
   1d266:	60fb      	str	r3, [r7, #12]
   1d268:	68fb      	ldr	r3, [r7, #12]
   1d26a:	681b      	ldr	r3, [r3, #0]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d26c:	2b00      	cmp	r3, #0
   1d26e:	d108      	bne.n	1d282 <net_ipv6_is_addr_unspecified+0x42>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1d270:	687b      	ldr	r3, [r7, #4]
   1d272:	330c      	adds	r3, #12
   1d274:	60bb      	str	r3, [r7, #8]
   1d276:	68bb      	ldr	r3, [r7, #8]
   1d278:	681b      	ldr	r3, [r3, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d27a:	2b00      	cmp	r3, #0
   1d27c:	d101      	bne.n	1d282 <net_ipv6_is_addr_unspecified+0x42>
   1d27e:	2301      	movs	r3, #1
   1d280:	e000      	b.n	1d284 <net_ipv6_is_addr_unspecified+0x44>
   1d282:	2300      	movs	r3, #0
   1d284:	f003 0301 	and.w	r3, r3, #1
   1d288:	b2db      	uxtb	r3, r3
}
   1d28a:	4618      	mov	r0, r3
   1d28c:	371c      	adds	r7, #28
   1d28e:	46bd      	mov	sp, r7
   1d290:	bc80      	pop	{r7}
   1d292:	4770      	bx	lr

0001d294 <net_sin6>:
 * @param addr Socket address
 *
 * @return Pointer to IPv6 socket address
 */
static inline struct sockaddr_in6 *net_sin6(const struct sockaddr *addr)
{
   1d294:	b480      	push	{r7}
   1d296:	b083      	sub	sp, #12
   1d298:	af00      	add	r7, sp, #0
   1d29a:	6078      	str	r0, [r7, #4]
	return (struct sockaddr_in6 *)addr;
   1d29c:	687b      	ldr	r3, [r7, #4]
}
   1d29e:	4618      	mov	r0, r3
   1d2a0:	370c      	adds	r7, #12
   1d2a2:	46bd      	mov	sp, r7
   1d2a4:	bc80      	pop	{r7}
   1d2a6:	4770      	bx	lr

0001d2a8 <net_sin>:
 * @param addr Socket address
 *
 * @return Pointer to IPv4 socket address
 */
static inline struct sockaddr_in *net_sin(const struct sockaddr *addr)
{
   1d2a8:	b480      	push	{r7}
   1d2aa:	b083      	sub	sp, #12
   1d2ac:	af00      	add	r7, sp, #0
   1d2ae:	6078      	str	r0, [r7, #4]
	return (struct sockaddr_in *)addr;
   1d2b0:	687b      	ldr	r3, [r7, #4]
}
   1d2b2:	4618      	mov	r0, r3
   1d2b4:	370c      	adds	r7, #12
   1d2b6:	46bd      	mov	sp, r7
   1d2b8:	bc80      	pop	{r7}
   1d2ba:	4770      	bx	lr

0001d2bc <coap_block_size_to_bytes>:
 *
 * @return The size in bytes that the block_size represents
 */
static inline u16_t coap_block_size_to_bytes(
	enum coap_block_size block_size)
{
   1d2bc:	b480      	push	{r7}
   1d2be:	b083      	sub	sp, #12
   1d2c0:	af00      	add	r7, sp, #0
   1d2c2:	4603      	mov	r3, r0
   1d2c4:	71fb      	strb	r3, [r7, #7]
	return (1 << (block_size + 4));
   1d2c6:	79fb      	ldrb	r3, [r7, #7]
   1d2c8:	3304      	adds	r3, #4
   1d2ca:	2201      	movs	r2, #1
   1d2cc:	fa02 f303 	lsl.w	r3, r2, r3
   1d2d0:	b29b      	uxth	r3, r3
}
   1d2d2:	4618      	mov	r0, r3
   1d2d4:	370c      	adds	r7, #12
   1d2d6:	46bd      	mov	sp, r7
   1d2d8:	bc80      	pop	{r7}
   1d2da:	4770      	bx	lr

0001d2dc <append_u8>:
{
   1d2dc:	b480      	push	{r7}
   1d2de:	b083      	sub	sp, #12
   1d2e0:	af00      	add	r7, sp, #0
   1d2e2:	6078      	str	r0, [r7, #4]
   1d2e4:	460b      	mov	r3, r1
   1d2e6:	70fb      	strb	r3, [r7, #3]
	if (!cpkt) {
   1d2e8:	687b      	ldr	r3, [r7, #4]
   1d2ea:	2b00      	cmp	r3, #0
   1d2ec:	d101      	bne.n	1d2f2 <append_u8+0x16>
		return false;
   1d2ee:	2300      	movs	r3, #0
   1d2f0:	e015      	b.n	1d31e <append_u8+0x42>
	if (cpkt->max_len - cpkt->offset < 1) {
   1d2f2:	687b      	ldr	r3, [r7, #4]
   1d2f4:	88db      	ldrh	r3, [r3, #6]
   1d2f6:	461a      	mov	r2, r3
   1d2f8:	687b      	ldr	r3, [r7, #4]
   1d2fa:	889b      	ldrh	r3, [r3, #4]
   1d2fc:	1ad3      	subs	r3, r2, r3
   1d2fe:	2b00      	cmp	r3, #0
   1d300:	dc01      	bgt.n	1d306 <append_u8+0x2a>
		return false;
   1d302:	2300      	movs	r3, #0
   1d304:	e00b      	b.n	1d31e <append_u8+0x42>
	cpkt->data[cpkt->offset++] = data;
   1d306:	687b      	ldr	r3, [r7, #4]
   1d308:	681a      	ldr	r2, [r3, #0]
   1d30a:	687b      	ldr	r3, [r7, #4]
   1d30c:	889b      	ldrh	r3, [r3, #4]
   1d30e:	1c59      	adds	r1, r3, #1
   1d310:	b288      	uxth	r0, r1
   1d312:	6879      	ldr	r1, [r7, #4]
   1d314:	8088      	strh	r0, [r1, #4]
   1d316:	4413      	add	r3, r2
   1d318:	78fa      	ldrb	r2, [r7, #3]
   1d31a:	701a      	strb	r2, [r3, #0]
	return true;
   1d31c:	2301      	movs	r3, #1
}
   1d31e:	4618      	mov	r0, r3
   1d320:	370c      	adds	r7, #12
   1d322:	46bd      	mov	sp, r7
   1d324:	bc80      	pop	{r7}
   1d326:	4770      	bx	lr

0001d328 <append_be16>:
{
   1d328:	b490      	push	{r4, r7}
   1d32a:	b082      	sub	sp, #8
   1d32c:	af00      	add	r7, sp, #0
   1d32e:	6078      	str	r0, [r7, #4]
   1d330:	460b      	mov	r3, r1
   1d332:	807b      	strh	r3, [r7, #2]
	if (!cpkt) {
   1d334:	687b      	ldr	r3, [r7, #4]
   1d336:	2b00      	cmp	r3, #0
   1d338:	d101      	bne.n	1d33e <append_be16+0x16>
		return false;
   1d33a:	2300      	movs	r3, #0
   1d33c:	e024      	b.n	1d388 <append_be16+0x60>
	if (cpkt->max_len - cpkt->offset < 2) {
   1d33e:	687b      	ldr	r3, [r7, #4]
   1d340:	88db      	ldrh	r3, [r3, #6]
   1d342:	461a      	mov	r2, r3
   1d344:	687b      	ldr	r3, [r7, #4]
   1d346:	889b      	ldrh	r3, [r3, #4]
   1d348:	1ad3      	subs	r3, r2, r3
   1d34a:	2b01      	cmp	r3, #1
   1d34c:	dc01      	bgt.n	1d352 <append_be16+0x2a>
		return false;
   1d34e:	2300      	movs	r3, #0
   1d350:	e01a      	b.n	1d388 <append_be16+0x60>
	cpkt->data[cpkt->offset++] = data >> 8;
   1d352:	887b      	ldrh	r3, [r7, #2]
   1d354:	0a1b      	lsrs	r3, r3, #8
   1d356:	b298      	uxth	r0, r3
   1d358:	687b      	ldr	r3, [r7, #4]
   1d35a:	681a      	ldr	r2, [r3, #0]
   1d35c:	687b      	ldr	r3, [r7, #4]
   1d35e:	889b      	ldrh	r3, [r3, #4]
   1d360:	1c59      	adds	r1, r3, #1
   1d362:	b28c      	uxth	r4, r1
   1d364:	6879      	ldr	r1, [r7, #4]
   1d366:	808c      	strh	r4, [r1, #4]
   1d368:	4413      	add	r3, r2
   1d36a:	b2c2      	uxtb	r2, r0
   1d36c:	701a      	strb	r2, [r3, #0]
	cpkt->data[cpkt->offset++] = (u8_t) data;
   1d36e:	687b      	ldr	r3, [r7, #4]
   1d370:	681a      	ldr	r2, [r3, #0]
   1d372:	687b      	ldr	r3, [r7, #4]
   1d374:	889b      	ldrh	r3, [r3, #4]
   1d376:	1c59      	adds	r1, r3, #1
   1d378:	b288      	uxth	r0, r1
   1d37a:	6879      	ldr	r1, [r7, #4]
   1d37c:	8088      	strh	r0, [r1, #4]
   1d37e:	4413      	add	r3, r2
   1d380:	887a      	ldrh	r2, [r7, #2]
   1d382:	b2d2      	uxtb	r2, r2
   1d384:	701a      	strb	r2, [r3, #0]
	return true;
   1d386:	2301      	movs	r3, #1
}
   1d388:	4618      	mov	r0, r3
   1d38a:	3708      	adds	r7, #8
   1d38c:	46bd      	mov	sp, r7
   1d38e:	bc90      	pop	{r4, r7}
   1d390:	4770      	bx	lr

0001d392 <append>:
{
   1d392:	b580      	push	{r7, lr}
   1d394:	b084      	sub	sp, #16
   1d396:	af00      	add	r7, sp, #0
   1d398:	60f8      	str	r0, [r7, #12]
   1d39a:	60b9      	str	r1, [r7, #8]
   1d39c:	4613      	mov	r3, r2
   1d39e:	80fb      	strh	r3, [r7, #6]
	if (!cpkt || !data) {
   1d3a0:	68fb      	ldr	r3, [r7, #12]
   1d3a2:	2b00      	cmp	r3, #0
   1d3a4:	d002      	beq.n	1d3ac <append+0x1a>
   1d3a6:	68bb      	ldr	r3, [r7, #8]
   1d3a8:	2b00      	cmp	r3, #0
   1d3aa:	d101      	bne.n	1d3b0 <append+0x1e>
		return false;
   1d3ac:	2300      	movs	r3, #0
   1d3ae:	e01c      	b.n	1d3ea <append+0x58>
	if (cpkt->max_len - cpkt->offset < len) {
   1d3b0:	68fb      	ldr	r3, [r7, #12]
   1d3b2:	88db      	ldrh	r3, [r3, #6]
   1d3b4:	461a      	mov	r2, r3
   1d3b6:	68fb      	ldr	r3, [r7, #12]
   1d3b8:	889b      	ldrh	r3, [r3, #4]
   1d3ba:	1ad2      	subs	r2, r2, r3
   1d3bc:	88fb      	ldrh	r3, [r7, #6]
   1d3be:	429a      	cmp	r2, r3
   1d3c0:	da01      	bge.n	1d3c6 <append+0x34>
		return false;
   1d3c2:	2300      	movs	r3, #0
   1d3c4:	e011      	b.n	1d3ea <append+0x58>
	memcpy(cpkt->data + cpkt->offset, data, len);
   1d3c6:	68fb      	ldr	r3, [r7, #12]
   1d3c8:	681b      	ldr	r3, [r3, #0]
   1d3ca:	68fa      	ldr	r2, [r7, #12]
   1d3cc:	8892      	ldrh	r2, [r2, #4]
   1d3ce:	4413      	add	r3, r2
   1d3d0:	88fa      	ldrh	r2, [r7, #6]
   1d3d2:	68b9      	ldr	r1, [r7, #8]
   1d3d4:	4618      	mov	r0, r3
   1d3d6:	f7e4 fe47 	bl	2068 <memcpy>
	cpkt->offset += len;
   1d3da:	68fb      	ldr	r3, [r7, #12]
   1d3dc:	889a      	ldrh	r2, [r3, #4]
   1d3de:	88fb      	ldrh	r3, [r7, #6]
   1d3e0:	4413      	add	r3, r2
   1d3e2:	b29a      	uxth	r2, r3
   1d3e4:	68fb      	ldr	r3, [r7, #12]
   1d3e6:	809a      	strh	r2, [r3, #4]
	return true;
   1d3e8:	2301      	movs	r3, #1
}
   1d3ea:	4618      	mov	r0, r3
   1d3ec:	3710      	adds	r7, #16
   1d3ee:	46bd      	mov	sp, r7
   1d3f0:	bd80      	pop	{r7, pc}

0001d3f2 <coap_packet_init>:
{
   1d3f2:	b580      	push	{r7, lr}
   1d3f4:	b086      	sub	sp, #24
   1d3f6:	af00      	add	r7, sp, #0
   1d3f8:	60f8      	str	r0, [r7, #12]
   1d3fa:	60b9      	str	r1, [r7, #8]
   1d3fc:	4611      	mov	r1, r2
   1d3fe:	461a      	mov	r2, r3
   1d400:	460b      	mov	r3, r1
   1d402:	80fb      	strh	r3, [r7, #6]
   1d404:	4613      	mov	r3, r2
   1d406:	717b      	strb	r3, [r7, #5]
	if (!cpkt || !data || !max_len) {
   1d408:	68fb      	ldr	r3, [r7, #12]
   1d40a:	2b00      	cmp	r3, #0
   1d40c:	d005      	beq.n	1d41a <coap_packet_init+0x28>
   1d40e:	68bb      	ldr	r3, [r7, #8]
   1d410:	2b00      	cmp	r3, #0
   1d412:	d002      	beq.n	1d41a <coap_packet_init+0x28>
   1d414:	88fb      	ldrh	r3, [r7, #6]
   1d416:	2b00      	cmp	r3, #0
   1d418:	d102      	bne.n	1d420 <coap_packet_init+0x2e>
		return -EINVAL;
   1d41a:	f06f 0315 	mvn.w	r3, #21
   1d41e:	e07c      	b.n	1d51a <coap_packet_init+0x128>
	memset(cpkt, 0, sizeof(*cpkt));
   1d420:	2210      	movs	r2, #16
   1d422:	2100      	movs	r1, #0
   1d424:	68f8      	ldr	r0, [r7, #12]
   1d426:	f7e4 fe47 	bl	20b8 <memset>
	cpkt->data = data;
   1d42a:	68fb      	ldr	r3, [r7, #12]
   1d42c:	68ba      	ldr	r2, [r7, #8]
   1d42e:	601a      	str	r2, [r3, #0]
	cpkt->offset = 0U;
   1d430:	68fb      	ldr	r3, [r7, #12]
   1d432:	2200      	movs	r2, #0
   1d434:	809a      	strh	r2, [r3, #4]
	cpkt->max_len = max_len;
   1d436:	68fb      	ldr	r3, [r7, #12]
   1d438:	88fa      	ldrh	r2, [r7, #6]
   1d43a:	80da      	strh	r2, [r3, #6]
	cpkt->delta = 0U;
   1d43c:	68fb      	ldr	r3, [r7, #12]
   1d43e:	2200      	movs	r2, #0
   1d440:	819a      	strh	r2, [r3, #12]
	hdr = (ver & 0x3) << 6;
   1d442:	797b      	ldrb	r3, [r7, #5]
   1d444:	019b      	lsls	r3, r3, #6
   1d446:	75fb      	strb	r3, [r7, #23]
	hdr |= (type & 0x3) << 4;
   1d448:	f897 3020 	ldrb.w	r3, [r7, #32]
   1d44c:	011b      	lsls	r3, r3, #4
   1d44e:	b25b      	sxtb	r3, r3
   1d450:	f003 0330 	and.w	r3, r3, #48	; 0x30
   1d454:	b25a      	sxtb	r2, r3
   1d456:	f997 3017 	ldrsb.w	r3, [r7, #23]
   1d45a:	4313      	orrs	r3, r2
   1d45c:	b25b      	sxtb	r3, r3
   1d45e:	75fb      	strb	r3, [r7, #23]
	hdr |= tokenlen & 0xF;
   1d460:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
   1d464:	f003 030f 	and.w	r3, r3, #15
   1d468:	b25a      	sxtb	r2, r3
   1d46a:	f997 3017 	ldrsb.w	r3, [r7, #23]
   1d46e:	4313      	orrs	r3, r2
   1d470:	b25b      	sxtb	r3, r3
   1d472:	75fb      	strb	r3, [r7, #23]
	res = append_u8(cpkt, hdr);
   1d474:	7dfb      	ldrb	r3, [r7, #23]
   1d476:	4619      	mov	r1, r3
   1d478:	68f8      	ldr	r0, [r7, #12]
   1d47a:	f7ff ff2f 	bl	1d2dc <append_u8>
   1d47e:	4603      	mov	r3, r0
   1d480:	75bb      	strb	r3, [r7, #22]
	if (!res) {
   1d482:	7dbb      	ldrb	r3, [r7, #22]
   1d484:	f083 0301 	eor.w	r3, r3, #1
   1d488:	b2db      	uxtb	r3, r3
   1d48a:	2b00      	cmp	r3, #0
   1d48c:	d002      	beq.n	1d494 <coap_packet_init+0xa2>
		return -EINVAL;
   1d48e:	f06f 0315 	mvn.w	r3, #21
   1d492:	e042      	b.n	1d51a <coap_packet_init+0x128>
	res = append_u8(cpkt, code);
   1d494:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   1d498:	4619      	mov	r1, r3
   1d49a:	68f8      	ldr	r0, [r7, #12]
   1d49c:	f7ff ff1e 	bl	1d2dc <append_u8>
   1d4a0:	4603      	mov	r3, r0
   1d4a2:	75bb      	strb	r3, [r7, #22]
	if (!res) {
   1d4a4:	7dbb      	ldrb	r3, [r7, #22]
   1d4a6:	f083 0301 	eor.w	r3, r3, #1
   1d4aa:	b2db      	uxtb	r3, r3
   1d4ac:	2b00      	cmp	r3, #0
   1d4ae:	d002      	beq.n	1d4b6 <coap_packet_init+0xc4>
		return -EINVAL;
   1d4b0:	f06f 0315 	mvn.w	r3, #21
   1d4b4:	e031      	b.n	1d51a <coap_packet_init+0x128>
	res = append_be16(cpkt, id);
   1d4b6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   1d4b8:	4619      	mov	r1, r3
   1d4ba:	68f8      	ldr	r0, [r7, #12]
   1d4bc:	f7ff ff34 	bl	1d328 <append_be16>
   1d4c0:	4603      	mov	r3, r0
   1d4c2:	75bb      	strb	r3, [r7, #22]
	if (!res) {
   1d4c4:	7dbb      	ldrb	r3, [r7, #22]
   1d4c6:	f083 0301 	eor.w	r3, r3, #1
   1d4ca:	b2db      	uxtb	r3, r3
   1d4cc:	2b00      	cmp	r3, #0
   1d4ce:	d002      	beq.n	1d4d6 <coap_packet_init+0xe4>
		return -EINVAL;
   1d4d0:	f06f 0315 	mvn.w	r3, #21
   1d4d4:	e021      	b.n	1d51a <coap_packet_init+0x128>
	if (token && tokenlen) {
   1d4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d4d8:	2b00      	cmp	r3, #0
   1d4da:	d016      	beq.n	1d50a <coap_packet_init+0x118>
   1d4dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   1d4e0:	2b00      	cmp	r3, #0
   1d4e2:	d012      	beq.n	1d50a <coap_packet_init+0x118>
		res = append(cpkt, token, tokenlen);
   1d4e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   1d4e8:	b29b      	uxth	r3, r3
   1d4ea:	461a      	mov	r2, r3
   1d4ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1d4ee:	68f8      	ldr	r0, [r7, #12]
   1d4f0:	f7ff ff4f 	bl	1d392 <append>
   1d4f4:	4603      	mov	r3, r0
   1d4f6:	75bb      	strb	r3, [r7, #22]
		if (!res) {
   1d4f8:	7dbb      	ldrb	r3, [r7, #22]
   1d4fa:	f083 0301 	eor.w	r3, r3, #1
   1d4fe:	b2db      	uxtb	r3, r3
   1d500:	2b00      	cmp	r3, #0
   1d502:	d002      	beq.n	1d50a <coap_packet_init+0x118>
			return -EINVAL;
   1d504:	f06f 0315 	mvn.w	r3, #21
   1d508:	e007      	b.n	1d51a <coap_packet_init+0x128>
	cpkt->hdr_len = 1 + 1 + 2 + tokenlen;
   1d50a:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
   1d50e:	3304      	adds	r3, #4
   1d510:	b25b      	sxtb	r3, r3
   1d512:	b2da      	uxtb	r2, r3
   1d514:	68fb      	ldr	r3, [r7, #12]
   1d516:	721a      	strb	r2, [r3, #8]
	return 0;
   1d518:	2300      	movs	r3, #0
}
   1d51a:	4618      	mov	r0, r3
   1d51c:	3718      	adds	r7, #24
   1d51e:	46bd      	mov	sp, r7
   1d520:	bd80      	pop	{r7, pc}

0001d522 <option_header_set_delta>:
{
   1d522:	b480      	push	{r7}
   1d524:	b083      	sub	sp, #12
   1d526:	af00      	add	r7, sp, #0
   1d528:	6078      	str	r0, [r7, #4]
   1d52a:	460b      	mov	r3, r1
   1d52c:	70fb      	strb	r3, [r7, #3]
	*opt = (delta & 0xF) << 4;
   1d52e:	78fb      	ldrb	r3, [r7, #3]
   1d530:	011b      	lsls	r3, r3, #4
   1d532:	b2da      	uxtb	r2, r3
   1d534:	687b      	ldr	r3, [r7, #4]
   1d536:	701a      	strb	r2, [r3, #0]
}
   1d538:	bf00      	nop
   1d53a:	370c      	adds	r7, #12
   1d53c:	46bd      	mov	sp, r7
   1d53e:	bc80      	pop	{r7}
   1d540:	4770      	bx	lr

0001d542 <option_header_set_len>:
{
   1d542:	b480      	push	{r7}
   1d544:	b083      	sub	sp, #12
   1d546:	af00      	add	r7, sp, #0
   1d548:	6078      	str	r0, [r7, #4]
   1d54a:	460b      	mov	r3, r1
   1d54c:	70fb      	strb	r3, [r7, #3]
	*opt |= (len & 0xF);
   1d54e:	687b      	ldr	r3, [r7, #4]
   1d550:	781b      	ldrb	r3, [r3, #0]
   1d552:	b25a      	sxtb	r2, r3
   1d554:	f997 3003 	ldrsb.w	r3, [r7, #3]
   1d558:	f003 030f 	and.w	r3, r3, #15
   1d55c:	b25b      	sxtb	r3, r3
   1d55e:	4313      	orrs	r3, r2
   1d560:	b25b      	sxtb	r3, r3
   1d562:	b2da      	uxtb	r2, r3
   1d564:	687b      	ldr	r3, [r7, #4]
   1d566:	701a      	strb	r2, [r3, #0]
}
   1d568:	bf00      	nop
   1d56a:	370c      	adds	r7, #12
   1d56c:	46bd      	mov	sp, r7
   1d56e:	bc80      	pop	{r7}
   1d570:	4770      	bx	lr

0001d572 <encode_extended_option>:
{
   1d572:	b480      	push	{r7}
   1d574:	b085      	sub	sp, #20
   1d576:	af00      	add	r7, sp, #0
   1d578:	4603      	mov	r3, r0
   1d57a:	60b9      	str	r1, [r7, #8]
   1d57c:	607a      	str	r2, [r7, #4]
   1d57e:	81fb      	strh	r3, [r7, #14]
	if (num < COAP_OPTION_EXT_13) {
   1d580:	89fb      	ldrh	r3, [r7, #14]
   1d582:	2b0c      	cmp	r3, #12
   1d584:	d808      	bhi.n	1d598 <encode_extended_option+0x26>
		*opt = num;
   1d586:	89fb      	ldrh	r3, [r7, #14]
   1d588:	b2da      	uxtb	r2, r3
   1d58a:	68bb      	ldr	r3, [r7, #8]
   1d58c:	701a      	strb	r2, [r3, #0]
		*ext = 0U;
   1d58e:	687b      	ldr	r3, [r7, #4]
   1d590:	2200      	movs	r2, #0
   1d592:	801a      	strh	r2, [r3, #0]
		return 0;
   1d594:	2300      	movs	r3, #0
   1d596:	e01b      	b.n	1d5d0 <encode_extended_option+0x5e>
	} else if (num < COAP_OPTION_EXT_269) {
   1d598:	89fb      	ldrh	r3, [r7, #14]
   1d59a:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
   1d59e:	d80b      	bhi.n	1d5b8 <encode_extended_option+0x46>
		*opt = COAP_OPTION_EXT_13;
   1d5a0:	68bb      	ldr	r3, [r7, #8]
   1d5a2:	220d      	movs	r2, #13
   1d5a4:	701a      	strb	r2, [r3, #0]
		*ext = num - COAP_OPTION_EXT_13;
   1d5a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   1d5aa:	3b0d      	subs	r3, #13
   1d5ac:	b21b      	sxth	r3, r3
   1d5ae:	b29a      	uxth	r2, r3
   1d5b0:	687b      	ldr	r3, [r7, #4]
   1d5b2:	801a      	strh	r2, [r3, #0]
		return 1;
   1d5b4:	2301      	movs	r3, #1
   1d5b6:	e00b      	b.n	1d5d0 <encode_extended_option+0x5e>
	*opt = COAP_OPTION_EXT_14;
   1d5b8:	68bb      	ldr	r3, [r7, #8]
   1d5ba:	220e      	movs	r2, #14
   1d5bc:	701a      	strb	r2, [r3, #0]
	*ext = num - COAP_OPTION_EXT_269;
   1d5be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   1d5c2:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
   1d5c6:	b21b      	sxth	r3, r3
   1d5c8:	b29a      	uxth	r2, r3
   1d5ca:	687b      	ldr	r3, [r7, #4]
   1d5cc:	801a      	strh	r2, [r3, #0]
	return 2;
   1d5ce:	2302      	movs	r3, #2
}
   1d5d0:	4618      	mov	r0, r3
   1d5d2:	3714      	adds	r7, #20
   1d5d4:	46bd      	mov	sp, r7
   1d5d6:	bc80      	pop	{r7}
   1d5d8:	4770      	bx	lr

0001d5da <encode_option>:
{
   1d5da:	b580      	push	{r7, lr}
   1d5dc:	b088      	sub	sp, #32
   1d5de:	af00      	add	r7, sp, #0
   1d5e0:	60f8      	str	r0, [r7, #12]
   1d5e2:	607a      	str	r2, [r7, #4]
   1d5e4:	461a      	mov	r2, r3
   1d5e6:	460b      	mov	r3, r1
   1d5e8:	817b      	strh	r3, [r7, #10]
   1d5ea:	4613      	mov	r3, r2
   1d5ec:	813b      	strh	r3, [r7, #8]
	delta_size = encode_extended_option(code, &opt_delta, &delta_ext);
   1d5ee:	f107 021a 	add.w	r2, r7, #26
   1d5f2:	f107 0116 	add.w	r1, r7, #22
   1d5f6:	897b      	ldrh	r3, [r7, #10]
   1d5f8:	4618      	mov	r0, r3
   1d5fa:	f7ff ffba 	bl	1d572 <encode_extended_option>
   1d5fe:	4603      	mov	r3, r0
   1d600:	77fb      	strb	r3, [r7, #31]
	len_size = encode_extended_option(len, &opt_len, &len_ext);
   1d602:	f107 0218 	add.w	r2, r7, #24
   1d606:	f107 0115 	add.w	r1, r7, #21
   1d60a:	893b      	ldrh	r3, [r7, #8]
   1d60c:	4618      	mov	r0, r3
   1d60e:	f7ff ffb0 	bl	1d572 <encode_extended_option>
   1d612:	4603      	mov	r3, r0
   1d614:	77bb      	strb	r3, [r7, #30]
	option_header_set_delta(&opt, opt_delta);
   1d616:	7dba      	ldrb	r2, [r7, #22]
   1d618:	f107 0317 	add.w	r3, r7, #23
   1d61c:	4611      	mov	r1, r2
   1d61e:	4618      	mov	r0, r3
   1d620:	f7ff ff7f 	bl	1d522 <option_header_set_delta>
	option_header_set_len(&opt, opt_len);
   1d624:	7d7a      	ldrb	r2, [r7, #21]
   1d626:	f107 0317 	add.w	r3, r7, #23
   1d62a:	4611      	mov	r1, r2
   1d62c:	4618      	mov	r0, r3
   1d62e:	f7ff ff88 	bl	1d542 <option_header_set_len>
	res = append_u8(cpkt, opt);
   1d632:	7dfb      	ldrb	r3, [r7, #23]
   1d634:	4619      	mov	r1, r3
   1d636:	68f8      	ldr	r0, [r7, #12]
   1d638:	f7ff fe50 	bl	1d2dc <append_u8>
   1d63c:	4603      	mov	r3, r0
   1d63e:	777b      	strb	r3, [r7, #29]
	if (!res) {
   1d640:	7f7b      	ldrb	r3, [r7, #29]
   1d642:	f083 0301 	eor.w	r3, r3, #1
   1d646:	b2db      	uxtb	r3, r3
   1d648:	2b00      	cmp	r3, #0
   1d64a:	d002      	beq.n	1d652 <encode_option+0x78>
		return -EINVAL;
   1d64c:	f06f 0315 	mvn.w	r3, #21
   1d650:	e06a      	b.n	1d728 <encode_option+0x14e>
	if (delta_size == 1U) {
   1d652:	7ffb      	ldrb	r3, [r7, #31]
   1d654:	2b01      	cmp	r3, #1
   1d656:	d110      	bne.n	1d67a <encode_option+0xa0>
		res = append_u8(cpkt, (u8_t)delta_ext);
   1d658:	8b7b      	ldrh	r3, [r7, #26]
   1d65a:	b2db      	uxtb	r3, r3
   1d65c:	4619      	mov	r1, r3
   1d65e:	68f8      	ldr	r0, [r7, #12]
   1d660:	f7ff fe3c 	bl	1d2dc <append_u8>
   1d664:	4603      	mov	r3, r0
   1d666:	777b      	strb	r3, [r7, #29]
		if (!res) {
   1d668:	7f7b      	ldrb	r3, [r7, #29]
   1d66a:	f083 0301 	eor.w	r3, r3, #1
   1d66e:	b2db      	uxtb	r3, r3
   1d670:	2b00      	cmp	r3, #0
   1d672:	d015      	beq.n	1d6a0 <encode_option+0xc6>
			return -EINVAL;
   1d674:	f06f 0315 	mvn.w	r3, #21
   1d678:	e056      	b.n	1d728 <encode_option+0x14e>
	} else if (delta_size == 2U) {
   1d67a:	7ffb      	ldrb	r3, [r7, #31]
   1d67c:	2b02      	cmp	r3, #2
   1d67e:	d10f      	bne.n	1d6a0 <encode_option+0xc6>
		res = append_be16(cpkt, delta_ext);
   1d680:	8b7b      	ldrh	r3, [r7, #26]
   1d682:	4619      	mov	r1, r3
   1d684:	68f8      	ldr	r0, [r7, #12]
   1d686:	f7ff fe4f 	bl	1d328 <append_be16>
   1d68a:	4603      	mov	r3, r0
   1d68c:	777b      	strb	r3, [r7, #29]
		if (!res) {
   1d68e:	7f7b      	ldrb	r3, [r7, #29]
   1d690:	f083 0301 	eor.w	r3, r3, #1
   1d694:	b2db      	uxtb	r3, r3
   1d696:	2b00      	cmp	r3, #0
   1d698:	d002      	beq.n	1d6a0 <encode_option+0xc6>
			return -EINVAL;
   1d69a:	f06f 0315 	mvn.w	r3, #21
   1d69e:	e043      	b.n	1d728 <encode_option+0x14e>
	if (len_size == 1U) {
   1d6a0:	7fbb      	ldrb	r3, [r7, #30]
   1d6a2:	2b01      	cmp	r3, #1
   1d6a4:	d110      	bne.n	1d6c8 <encode_option+0xee>
		res = append_u8(cpkt, (u8_t)len_ext);
   1d6a6:	8b3b      	ldrh	r3, [r7, #24]
   1d6a8:	b2db      	uxtb	r3, r3
   1d6aa:	4619      	mov	r1, r3
   1d6ac:	68f8      	ldr	r0, [r7, #12]
   1d6ae:	f7ff fe15 	bl	1d2dc <append_u8>
   1d6b2:	4603      	mov	r3, r0
   1d6b4:	777b      	strb	r3, [r7, #29]
		if (!res) {
   1d6b6:	7f7b      	ldrb	r3, [r7, #29]
   1d6b8:	f083 0301 	eor.w	r3, r3, #1
   1d6bc:	b2db      	uxtb	r3, r3
   1d6be:	2b00      	cmp	r3, #0
   1d6c0:	d015      	beq.n	1d6ee <encode_option+0x114>
			return -EINVAL;
   1d6c2:	f06f 0315 	mvn.w	r3, #21
   1d6c6:	e02f      	b.n	1d728 <encode_option+0x14e>
	} else if (delta_size == 2U) {
   1d6c8:	7ffb      	ldrb	r3, [r7, #31]
   1d6ca:	2b02      	cmp	r3, #2
   1d6cc:	d10f      	bne.n	1d6ee <encode_option+0x114>
		res = append_be16(cpkt, len_ext);
   1d6ce:	8b3b      	ldrh	r3, [r7, #24]
   1d6d0:	4619      	mov	r1, r3
   1d6d2:	68f8      	ldr	r0, [r7, #12]
   1d6d4:	f7ff fe28 	bl	1d328 <append_be16>
   1d6d8:	4603      	mov	r3, r0
   1d6da:	777b      	strb	r3, [r7, #29]
		if (!res) {
   1d6dc:	7f7b      	ldrb	r3, [r7, #29]
   1d6de:	f083 0301 	eor.w	r3, r3, #1
   1d6e2:	b2db      	uxtb	r3, r3
   1d6e4:	2b00      	cmp	r3, #0
   1d6e6:	d002      	beq.n	1d6ee <encode_option+0x114>
			return -EINVAL;
   1d6e8:	f06f 0315 	mvn.w	r3, #21
   1d6ec:	e01c      	b.n	1d728 <encode_option+0x14e>
	if (len && value) {
   1d6ee:	893b      	ldrh	r3, [r7, #8]
   1d6f0:	2b00      	cmp	r3, #0
   1d6f2:	d013      	beq.n	1d71c <encode_option+0x142>
   1d6f4:	687b      	ldr	r3, [r7, #4]
   1d6f6:	2b00      	cmp	r3, #0
   1d6f8:	d010      	beq.n	1d71c <encode_option+0x142>
		res = append(cpkt, value, len);
   1d6fa:	893b      	ldrh	r3, [r7, #8]
   1d6fc:	461a      	mov	r2, r3
   1d6fe:	6879      	ldr	r1, [r7, #4]
   1d700:	68f8      	ldr	r0, [r7, #12]
   1d702:	f7ff fe46 	bl	1d392 <append>
   1d706:	4603      	mov	r3, r0
   1d708:	777b      	strb	r3, [r7, #29]
		if (!res) {
   1d70a:	7f7b      	ldrb	r3, [r7, #29]
   1d70c:	f083 0301 	eor.w	r3, r3, #1
   1d710:	b2db      	uxtb	r3, r3
   1d712:	2b00      	cmp	r3, #0
   1d714:	d002      	beq.n	1d71c <encode_option+0x142>
			return -EINVAL;
   1d716:	f06f 0315 	mvn.w	r3, #21
   1d71a:	e005      	b.n	1d728 <encode_option+0x14e>
	return  (1 + delta_size + len_size + len);
   1d71c:	7ffa      	ldrb	r2, [r7, #31]
   1d71e:	7fbb      	ldrb	r3, [r7, #30]
   1d720:	441a      	add	r2, r3
   1d722:	893b      	ldrh	r3, [r7, #8]
   1d724:	4413      	add	r3, r2
   1d726:	3301      	adds	r3, #1
}
   1d728:	4618      	mov	r0, r3
   1d72a:	3720      	adds	r7, #32
   1d72c:	46bd      	mov	sp, r7
   1d72e:	bd80      	pop	{r7, pc}

0001d730 <coap_packet_append_option>:
{
   1d730:	b580      	push	{r7, lr}
   1d732:	b088      	sub	sp, #32
   1d734:	af00      	add	r7, sp, #0
   1d736:	60f8      	str	r0, [r7, #12]
   1d738:	607a      	str	r2, [r7, #4]
   1d73a:	461a      	mov	r2, r3
   1d73c:	460b      	mov	r3, r1
   1d73e:	817b      	strh	r3, [r7, #10]
   1d740:	4613      	mov	r3, r2
   1d742:	813b      	strh	r3, [r7, #8]
	if (!cpkt) {
   1d744:	68fb      	ldr	r3, [r7, #12]
   1d746:	2b00      	cmp	r3, #0
   1d748:	d102      	bne.n	1d750 <coap_packet_append_option+0x20>
		return -EINVAL;
   1d74a:	f06f 0315 	mvn.w	r3, #21
   1d74e:	e044      	b.n	1d7da <coap_packet_append_option+0xaa>
	if (len && !value) {
   1d750:	893b      	ldrh	r3, [r7, #8]
   1d752:	2b00      	cmp	r3, #0
   1d754:	d005      	beq.n	1d762 <coap_packet_append_option+0x32>
   1d756:	687b      	ldr	r3, [r7, #4]
   1d758:	2b00      	cmp	r3, #0
   1d75a:	d102      	bne.n	1d762 <coap_packet_append_option+0x32>
		return -EINVAL;
   1d75c:	f06f 0315 	mvn.w	r3, #21
   1d760:	e03b      	b.n	1d7da <coap_packet_append_option+0xaa>
	if (code < cpkt->delta) {
   1d762:	68fb      	ldr	r3, [r7, #12]
   1d764:	899b      	ldrh	r3, [r3, #12]
   1d766:	897a      	ldrh	r2, [r7, #10]
   1d768:	429a      	cmp	r2, r3
   1d76a:	d206      	bcs.n	1d77a <coap_packet_append_option+0x4a>
		NET_ERR("Options should be in ascending order");
   1d76c:	f7ff fd08 	bl	1d180 <_is_user_context>
   1d770:	4603      	mov	r3, r0
   1d772:	77fb      	strb	r3, [r7, #31]
		return -EINVAL;
   1d774:	f06f 0315 	mvn.w	r3, #21
   1d778:	e02f      	b.n	1d7da <coap_packet_append_option+0xaa>
	if (cpkt->opt_len) {
   1d77a:	68fb      	ldr	r3, [r7, #12]
   1d77c:	895b      	ldrh	r3, [r3, #10]
   1d77e:	2b00      	cmp	r3, #0
   1d780:	d00c      	beq.n	1d79c <coap_packet_append_option+0x6c>
		code = (code == cpkt->delta) ? 0 : code - cpkt->delta;
   1d782:	68fb      	ldr	r3, [r7, #12]
   1d784:	899b      	ldrh	r3, [r3, #12]
   1d786:	897a      	ldrh	r2, [r7, #10]
   1d788:	429a      	cmp	r2, r3
   1d78a:	d005      	beq.n	1d798 <coap_packet_append_option+0x68>
   1d78c:	68fb      	ldr	r3, [r7, #12]
   1d78e:	899b      	ldrh	r3, [r3, #12]
   1d790:	897a      	ldrh	r2, [r7, #10]
   1d792:	1ad3      	subs	r3, r2, r3
   1d794:	b29b      	uxth	r3, r3
   1d796:	e000      	b.n	1d79a <coap_packet_append_option+0x6a>
   1d798:	2300      	movs	r3, #0
   1d79a:	817b      	strh	r3, [r7, #10]
	r = encode_option(cpkt, code, value, len);
   1d79c:	893b      	ldrh	r3, [r7, #8]
   1d79e:	8979      	ldrh	r1, [r7, #10]
   1d7a0:	687a      	ldr	r2, [r7, #4]
   1d7a2:	68f8      	ldr	r0, [r7, #12]
   1d7a4:	f7ff ff19 	bl	1d5da <encode_option>
   1d7a8:	61b8      	str	r0, [r7, #24]
	if (r < 0) {
   1d7aa:	69bb      	ldr	r3, [r7, #24]
   1d7ac:	2b00      	cmp	r3, #0
   1d7ae:	da02      	bge.n	1d7b6 <coap_packet_append_option+0x86>
		return -EINVAL;
   1d7b0:	f06f 0315 	mvn.w	r3, #21
   1d7b4:	e011      	b.n	1d7da <coap_packet_append_option+0xaa>
	cpkt->opt_len += r;
   1d7b6:	68fb      	ldr	r3, [r7, #12]
   1d7b8:	895b      	ldrh	r3, [r3, #10]
   1d7ba:	b21a      	sxth	r2, r3
   1d7bc:	69bb      	ldr	r3, [r7, #24]
   1d7be:	b21b      	sxth	r3, r3
   1d7c0:	4413      	add	r3, r2
   1d7c2:	b21b      	sxth	r3, r3
   1d7c4:	b29a      	uxth	r2, r3
   1d7c6:	68fb      	ldr	r3, [r7, #12]
   1d7c8:	815a      	strh	r2, [r3, #10]
	cpkt->delta += code;
   1d7ca:	68fb      	ldr	r3, [r7, #12]
   1d7cc:	899a      	ldrh	r2, [r3, #12]
   1d7ce:	897b      	ldrh	r3, [r7, #10]
   1d7d0:	4413      	add	r3, r2
   1d7d2:	b29a      	uxth	r2, r3
   1d7d4:	68fb      	ldr	r3, [r7, #12]
   1d7d6:	819a      	strh	r2, [r3, #12]
	return 0;
   1d7d8:	2300      	movs	r3, #0
}
   1d7da:	4618      	mov	r0, r3
   1d7dc:	3720      	adds	r7, #32
   1d7de:	46bd      	mov	sp, r7
   1d7e0:	bd80      	pop	{r7, pc}

0001d7e2 <coap_packet_append_payload_marker>:
{
   1d7e2:	b580      	push	{r7, lr}
   1d7e4:	b082      	sub	sp, #8
   1d7e6:	af00      	add	r7, sp, #0
   1d7e8:	6078      	str	r0, [r7, #4]
	return append_u8(cpkt, COAP_MARKER) ? 0 : -EINVAL;
   1d7ea:	21ff      	movs	r1, #255	; 0xff
   1d7ec:	6878      	ldr	r0, [r7, #4]
   1d7ee:	f7ff fd75 	bl	1d2dc <append_u8>
   1d7f2:	4603      	mov	r3, r0
   1d7f4:	2b00      	cmp	r3, #0
   1d7f6:	d001      	beq.n	1d7fc <coap_packet_append_payload_marker+0x1a>
   1d7f8:	2300      	movs	r3, #0
   1d7fa:	e001      	b.n	1d800 <coap_packet_append_payload_marker+0x1e>
   1d7fc:	f06f 0315 	mvn.w	r3, #21
}
   1d800:	4618      	mov	r0, r3
   1d802:	3708      	adds	r7, #8
   1d804:	46bd      	mov	sp, r7
   1d806:	bd80      	pop	{r7, pc}

0001d808 <coap_packet_append_payload>:
{
   1d808:	b580      	push	{r7, lr}
   1d80a:	b084      	sub	sp, #16
   1d80c:	af00      	add	r7, sp, #0
   1d80e:	60f8      	str	r0, [r7, #12]
   1d810:	60b9      	str	r1, [r7, #8]
   1d812:	4613      	mov	r3, r2
   1d814:	80fb      	strh	r3, [r7, #6]
	return append(cpkt, payload, payload_len) ? 0 : -EINVAL;
   1d816:	88fb      	ldrh	r3, [r7, #6]
   1d818:	461a      	mov	r2, r3
   1d81a:	68b9      	ldr	r1, [r7, #8]
   1d81c:	68f8      	ldr	r0, [r7, #12]
   1d81e:	f7ff fdb8 	bl	1d392 <append>
   1d822:	4603      	mov	r3, r0
   1d824:	2b00      	cmp	r3, #0
   1d826:	d001      	beq.n	1d82c <coap_packet_append_payload+0x24>
   1d828:	2300      	movs	r3, #0
   1d82a:	e001      	b.n	1d830 <coap_packet_append_payload+0x28>
   1d82c:	f06f 0315 	mvn.w	r3, #21
}
   1d830:	4618      	mov	r0, r3
   1d832:	3710      	adds	r7, #16
   1d834:	46bd      	mov	sp, r7
   1d836:	bd80      	pop	{r7, pc}

0001d838 <option_header_get_delta>:
{
   1d838:	b480      	push	{r7}
   1d83a:	b083      	sub	sp, #12
   1d83c:	af00      	add	r7, sp, #0
   1d83e:	4603      	mov	r3, r0
   1d840:	71fb      	strb	r3, [r7, #7]
	return (opt & 0xF0) >> 4;
   1d842:	79fb      	ldrb	r3, [r7, #7]
   1d844:	091b      	lsrs	r3, r3, #4
   1d846:	b2db      	uxtb	r3, r3
}
   1d848:	4618      	mov	r0, r3
   1d84a:	370c      	adds	r7, #12
   1d84c:	46bd      	mov	sp, r7
   1d84e:	bc80      	pop	{r7}
   1d850:	4770      	bx	lr

0001d852 <option_header_get_len>:
{
   1d852:	b480      	push	{r7}
   1d854:	b083      	sub	sp, #12
   1d856:	af00      	add	r7, sp, #0
   1d858:	4603      	mov	r3, r0
   1d85a:	71fb      	strb	r3, [r7, #7]
	return opt & 0x0F;
   1d85c:	79fb      	ldrb	r3, [r7, #7]
   1d85e:	f003 030f 	and.w	r3, r3, #15
   1d862:	b2db      	uxtb	r3, r3
}
   1d864:	4618      	mov	r0, r3
   1d866:	370c      	adds	r7, #12
   1d868:	46bd      	mov	sp, r7
   1d86a:	bc80      	pop	{r7}
   1d86c:	4770      	bx	lr

0001d86e <read_u8>:
{
   1d86e:	b480      	push	{r7}
   1d870:	b085      	sub	sp, #20
   1d872:	af00      	add	r7, sp, #0
   1d874:	60f8      	str	r0, [r7, #12]
   1d876:	607a      	str	r2, [r7, #4]
   1d878:	461a      	mov	r2, r3
   1d87a:	460b      	mov	r3, r1
   1d87c:	817b      	strh	r3, [r7, #10]
   1d87e:	4613      	mov	r3, r2
   1d880:	813b      	strh	r3, [r7, #8]
	if (max_len - offset < 1) {
   1d882:	893a      	ldrh	r2, [r7, #8]
   1d884:	897b      	ldrh	r3, [r7, #10]
   1d886:	1ad3      	subs	r3, r2, r3
   1d888:	2b00      	cmp	r3, #0
   1d88a:	dc02      	bgt.n	1d892 <read_u8+0x24>
		return -EINVAL;
   1d88c:	f06f 0315 	mvn.w	r3, #21
   1d890:	e00e      	b.n	1d8b0 <read_u8+0x42>
	*value = data[offset++];
   1d892:	897b      	ldrh	r3, [r7, #10]
   1d894:	1c5a      	adds	r2, r3, #1
   1d896:	817a      	strh	r2, [r7, #10]
   1d898:	461a      	mov	r2, r3
   1d89a:	68fb      	ldr	r3, [r7, #12]
   1d89c:	4413      	add	r3, r2
   1d89e:	781a      	ldrb	r2, [r3, #0]
   1d8a0:	69bb      	ldr	r3, [r7, #24]
   1d8a2:	701a      	strb	r2, [r3, #0]
	*pos = offset;
   1d8a4:	687b      	ldr	r3, [r7, #4]
   1d8a6:	897a      	ldrh	r2, [r7, #10]
   1d8a8:	801a      	strh	r2, [r3, #0]
	return max_len - offset;
   1d8aa:	893a      	ldrh	r2, [r7, #8]
   1d8ac:	897b      	ldrh	r3, [r7, #10]
   1d8ae:	1ad3      	subs	r3, r2, r3
}
   1d8b0:	4618      	mov	r0, r3
   1d8b2:	3714      	adds	r7, #20
   1d8b4:	46bd      	mov	sp, r7
   1d8b6:	bc80      	pop	{r7}
   1d8b8:	4770      	bx	lr

0001d8ba <read_be16>:
{
   1d8ba:	b480      	push	{r7}
   1d8bc:	b085      	sub	sp, #20
   1d8be:	af00      	add	r7, sp, #0
   1d8c0:	60f8      	str	r0, [r7, #12]
   1d8c2:	607a      	str	r2, [r7, #4]
   1d8c4:	461a      	mov	r2, r3
   1d8c6:	460b      	mov	r3, r1
   1d8c8:	817b      	strh	r3, [r7, #10]
   1d8ca:	4613      	mov	r3, r2
   1d8cc:	813b      	strh	r3, [r7, #8]
	if (max_len - offset < 2) {
   1d8ce:	893a      	ldrh	r2, [r7, #8]
   1d8d0:	897b      	ldrh	r3, [r7, #10]
   1d8d2:	1ad3      	subs	r3, r2, r3
   1d8d4:	2b01      	cmp	r3, #1
   1d8d6:	dc02      	bgt.n	1d8de <read_be16+0x24>
		return -EINVAL;
   1d8d8:	f06f 0315 	mvn.w	r3, #21
   1d8dc:	e01f      	b.n	1d91e <read_be16+0x64>
	*value = data[offset++] << 8;
   1d8de:	897b      	ldrh	r3, [r7, #10]
   1d8e0:	1c5a      	adds	r2, r3, #1
   1d8e2:	817a      	strh	r2, [r7, #10]
   1d8e4:	461a      	mov	r2, r3
   1d8e6:	68fb      	ldr	r3, [r7, #12]
   1d8e8:	4413      	add	r3, r2
   1d8ea:	781b      	ldrb	r3, [r3, #0]
   1d8ec:	b29b      	uxth	r3, r3
   1d8ee:	021b      	lsls	r3, r3, #8
   1d8f0:	b29a      	uxth	r2, r3
   1d8f2:	69bb      	ldr	r3, [r7, #24]
   1d8f4:	801a      	strh	r2, [r3, #0]
	*value |= data[offset++];
   1d8f6:	897b      	ldrh	r3, [r7, #10]
   1d8f8:	1c5a      	adds	r2, r3, #1
   1d8fa:	817a      	strh	r2, [r7, #10]
   1d8fc:	461a      	mov	r2, r3
   1d8fe:	68fb      	ldr	r3, [r7, #12]
   1d900:	4413      	add	r3, r2
   1d902:	7819      	ldrb	r1, [r3, #0]
   1d904:	69bb      	ldr	r3, [r7, #24]
   1d906:	881a      	ldrh	r2, [r3, #0]
   1d908:	b28b      	uxth	r3, r1
   1d90a:	4313      	orrs	r3, r2
   1d90c:	b29a      	uxth	r2, r3
   1d90e:	69bb      	ldr	r3, [r7, #24]
   1d910:	801a      	strh	r2, [r3, #0]
	*pos = offset;
   1d912:	687b      	ldr	r3, [r7, #4]
   1d914:	897a      	ldrh	r2, [r7, #10]
   1d916:	801a      	strh	r2, [r3, #0]
	return max_len - offset;
   1d918:	893a      	ldrh	r2, [r7, #8]
   1d91a:	897b      	ldrh	r3, [r7, #10]
   1d91c:	1ad3      	subs	r3, r2, r3
}
   1d91e:	4618      	mov	r0, r3
   1d920:	3714      	adds	r7, #20
   1d922:	46bd      	mov	sp, r7
   1d924:	bc80      	pop	{r7}
   1d926:	4770      	bx	lr

0001d928 <read>:
{
   1d928:	b580      	push	{r7, lr}
   1d92a:	b084      	sub	sp, #16
   1d92c:	af00      	add	r7, sp, #0
   1d92e:	60f8      	str	r0, [r7, #12]
   1d930:	607a      	str	r2, [r7, #4]
   1d932:	461a      	mov	r2, r3
   1d934:	460b      	mov	r3, r1
   1d936:	817b      	strh	r3, [r7, #10]
   1d938:	4613      	mov	r3, r2
   1d93a:	813b      	strh	r3, [r7, #8]
	if (max_len - offset < len) {
   1d93c:	893a      	ldrh	r2, [r7, #8]
   1d93e:	897b      	ldrh	r3, [r7, #10]
   1d940:	1ad2      	subs	r2, r2, r3
   1d942:	8b3b      	ldrh	r3, [r7, #24]
   1d944:	429a      	cmp	r2, r3
   1d946:	da02      	bge.n	1d94e <read+0x26>
		return -EINVAL;
   1d948:	f06f 0315 	mvn.w	r3, #21
   1d94c:	e011      	b.n	1d972 <read+0x4a>
	memcpy(value, data + offset, len);
   1d94e:	897b      	ldrh	r3, [r7, #10]
   1d950:	68fa      	ldr	r2, [r7, #12]
   1d952:	4413      	add	r3, r2
   1d954:	8b3a      	ldrh	r2, [r7, #24]
   1d956:	4619      	mov	r1, r3
   1d958:	69f8      	ldr	r0, [r7, #28]
   1d95a:	f7e4 fb85 	bl	2068 <memcpy>
	offset += len;
   1d95e:	897a      	ldrh	r2, [r7, #10]
   1d960:	8b3b      	ldrh	r3, [r7, #24]
   1d962:	4413      	add	r3, r2
   1d964:	817b      	strh	r3, [r7, #10]
	*pos = offset;
   1d966:	687b      	ldr	r3, [r7, #4]
   1d968:	897a      	ldrh	r2, [r7, #10]
   1d96a:	801a      	strh	r2, [r3, #0]
	return max_len - offset;
   1d96c:	893a      	ldrh	r2, [r7, #8]
   1d96e:	897b      	ldrh	r3, [r7, #10]
   1d970:	1ad3      	subs	r3, r2, r3
}
   1d972:	4618      	mov	r0, r3
   1d974:	3710      	adds	r7, #16
   1d976:	46bd      	mov	sp, r7
   1d978:	bd80      	pop	{r7, pc}

0001d97a <decode_delta>:
{
   1d97a:	b580      	push	{r7, lr}
   1d97c:	b088      	sub	sp, #32
   1d97e:	af02      	add	r7, sp, #8
   1d980:	60f8      	str	r0, [r7, #12]
   1d982:	607a      	str	r2, [r7, #4]
   1d984:	461a      	mov	r2, r3
   1d986:	460b      	mov	r3, r1
   1d988:	817b      	strh	r3, [r7, #10]
   1d98a:	4613      	mov	r3, r2
   1d98c:	813b      	strh	r3, [r7, #8]
	int ret = 0;
   1d98e:	2300      	movs	r3, #0
   1d990:	617b      	str	r3, [r7, #20]
	if (opt == COAP_OPTION_EXT_13) {
   1d992:	8c3b      	ldrh	r3, [r7, #32]
   1d994:	2b0d      	cmp	r3, #13
   1d996:	d119      	bne.n	1d9cc <decode_delta+0x52>
		*hdr_len = 1U;
   1d998:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d99a:	2201      	movs	r2, #1
   1d99c:	801a      	strh	r2, [r3, #0]
		ret = read_u8(data, offset, pos, max_len, &val);
   1d99e:	893a      	ldrh	r2, [r7, #8]
   1d9a0:	8979      	ldrh	r1, [r7, #10]
   1d9a2:	f107 0313 	add.w	r3, r7, #19
   1d9a6:	9300      	str	r3, [sp, #0]
   1d9a8:	4613      	mov	r3, r2
   1d9aa:	687a      	ldr	r2, [r7, #4]
   1d9ac:	68f8      	ldr	r0, [r7, #12]
   1d9ae:	f7ff ff5e 	bl	1d86e <read_u8>
   1d9b2:	6178      	str	r0, [r7, #20]
		if (ret < 0) {
   1d9b4:	697b      	ldr	r3, [r7, #20]
   1d9b6:	2b00      	cmp	r3, #0
   1d9b8:	da02      	bge.n	1d9c0 <decode_delta+0x46>
			return -EINVAL;
   1d9ba:	f06f 0315 	mvn.w	r3, #21
   1d9be:	e02d      	b.n	1da1c <decode_delta+0xa2>
		opt = val + COAP_OPTION_EXT_13;
   1d9c0:	7cfb      	ldrb	r3, [r7, #19]
   1d9c2:	b21b      	sxth	r3, r3
   1d9c4:	330d      	adds	r3, #13
   1d9c6:	b21b      	sxth	r3, r3
   1d9c8:	843b      	strh	r3, [r7, #32]
   1d9ca:	e023      	b.n	1da14 <decode_delta+0x9a>
	} else if (opt == COAP_OPTION_EXT_14) {
   1d9cc:	8c3b      	ldrh	r3, [r7, #32]
   1d9ce:	2b0e      	cmp	r3, #14
   1d9d0:	d11a      	bne.n	1da08 <decode_delta+0x8e>
		*hdr_len = 2U;
   1d9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d9d4:	2202      	movs	r2, #2
   1d9d6:	801a      	strh	r2, [r3, #0]
		ret = read_be16(data, offset, pos, max_len, &val);
   1d9d8:	893a      	ldrh	r2, [r7, #8]
   1d9da:	8979      	ldrh	r1, [r7, #10]
   1d9dc:	f107 0310 	add.w	r3, r7, #16
   1d9e0:	9300      	str	r3, [sp, #0]
   1d9e2:	4613      	mov	r3, r2
   1d9e4:	687a      	ldr	r2, [r7, #4]
   1d9e6:	68f8      	ldr	r0, [r7, #12]
   1d9e8:	f7ff ff67 	bl	1d8ba <read_be16>
   1d9ec:	6178      	str	r0, [r7, #20]
		if (ret < 0) {
   1d9ee:	697b      	ldr	r3, [r7, #20]
   1d9f0:	2b00      	cmp	r3, #0
   1d9f2:	da02      	bge.n	1d9fa <decode_delta+0x80>
			return -EINVAL;
   1d9f4:	f06f 0315 	mvn.w	r3, #21
   1d9f8:	e010      	b.n	1da1c <decode_delta+0xa2>
		opt = val + COAP_OPTION_EXT_269;
   1d9fa:	8a3b      	ldrh	r3, [r7, #16]
   1d9fc:	b21b      	sxth	r3, r3
   1d9fe:	f203 130d 	addw	r3, r3, #269	; 0x10d
   1da02:	b21b      	sxth	r3, r3
   1da04:	843b      	strh	r3, [r7, #32]
   1da06:	e005      	b.n	1da14 <decode_delta+0x9a>
	} else if (opt == COAP_OPTION_EXT_15) {
   1da08:	8c3b      	ldrh	r3, [r7, #32]
   1da0a:	2b0f      	cmp	r3, #15
   1da0c:	d102      	bne.n	1da14 <decode_delta+0x9a>
		return -EINVAL;
   1da0e:	f06f 0315 	mvn.w	r3, #21
   1da12:	e003      	b.n	1da1c <decode_delta+0xa2>
	*opt_ext = opt;
   1da14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1da16:	8c3a      	ldrh	r2, [r7, #32]
   1da18:	801a      	strh	r2, [r3, #0]
	return ret;
   1da1a:	697b      	ldr	r3, [r7, #20]
}
   1da1c:	4618      	mov	r0, r3
   1da1e:	3718      	adds	r7, #24
   1da20:	46bd      	mov	sp, r7
   1da22:	bd80      	pop	{r7, pc}

0001da24 <parse_option>:
{	
   1da24:	b580      	push	{r7, lr}
   1da26:	b08c      	sub	sp, #48	; 0x30
   1da28:	af04      	add	r7, sp, #16
   1da2a:	60f8      	str	r0, [r7, #12]
   1da2c:	607a      	str	r2, [r7, #4]
   1da2e:	461a      	mov	r2, r3
   1da30:	460b      	mov	r3, r1
   1da32:	817b      	strh	r3, [r7, #10]
   1da34:	4613      	mov	r3, r2
   1da36:	813b      	strh	r3, [r7, #8]
	r = read_u8(data, offset, pos, max_len, &opt);
   1da38:	893a      	ldrh	r2, [r7, #8]
   1da3a:	8979      	ldrh	r1, [r7, #10]
   1da3c:	f107 0313 	add.w	r3, r7, #19
   1da40:	9300      	str	r3, [sp, #0]
   1da42:	4613      	mov	r3, r2
   1da44:	687a      	ldr	r2, [r7, #4]
   1da46:	68f8      	ldr	r0, [r7, #12]
   1da48:	f7ff ff11 	bl	1d86e <read_u8>
   1da4c:	61f8      	str	r0, [r7, #28]
	if (r < 0) {
   1da4e:	69fb      	ldr	r3, [r7, #28]
   1da50:	2b00      	cmp	r3, #0
   1da52:	da01      	bge.n	1da58 <parse_option+0x34>
		return r;
   1da54:	69fb      	ldr	r3, [r7, #28]
   1da56:	e0be      	b.n	1dbd6 <parse_option+0x1b2>
	*opt_len += 1U;
   1da58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1da5a:	881b      	ldrh	r3, [r3, #0]
   1da5c:	3301      	adds	r3, #1
   1da5e:	b29a      	uxth	r2, r3
   1da60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1da62:	801a      	strh	r2, [r3, #0]
	if (opt == COAP_MARKER) {
   1da64:	7cfb      	ldrb	r3, [r7, #19]
   1da66:	2bff      	cmp	r3, #255	; 0xff
   1da68:	d107      	bne.n	1da7a <parse_option+0x56>
		return r > 0 ? 0 : -EINVAL;
   1da6a:	69fb      	ldr	r3, [r7, #28]
   1da6c:	2b00      	cmp	r3, #0
   1da6e:	dd01      	ble.n	1da74 <parse_option+0x50>
   1da70:	2300      	movs	r3, #0
   1da72:	e0b0      	b.n	1dbd6 <parse_option+0x1b2>
   1da74:	f06f 0315 	mvn.w	r3, #21
   1da78:	e0ad      	b.n	1dbd6 <parse_option+0x1b2>
	delta = option_header_get_delta(opt);
   1da7a:	7cfb      	ldrb	r3, [r7, #19]
   1da7c:	4618      	mov	r0, r3
   1da7e:	f7ff fedb 	bl	1d838 <option_header_get_delta>
   1da82:	4603      	mov	r3, r0
   1da84:	b29b      	uxth	r3, r3
   1da86:	82fb      	strh	r3, [r7, #22]
	len = option_header_get_len(opt);
   1da88:	7cfb      	ldrb	r3, [r7, #19]
   1da8a:	4618      	mov	r0, r3
   1da8c:	f7ff fee1 	bl	1d852 <option_header_get_len>
   1da90:	4603      	mov	r3, r0
   1da92:	b29b      	uxth	r3, r3
   1da94:	82bb      	strh	r3, [r7, #20]
	if (r == 0 && delta > COAP_OPTION_NO_EXT) {
   1da96:	69fb      	ldr	r3, [r7, #28]
   1da98:	2b00      	cmp	r3, #0
   1da9a:	d105      	bne.n	1daa8 <parse_option+0x84>
   1da9c:	8afb      	ldrh	r3, [r7, #22]
   1da9e:	2b0c      	cmp	r3, #12
   1daa0:	d902      	bls.n	1daa8 <parse_option+0x84>
		return -EINVAL;
   1daa2:	f06f 0315 	mvn.w	r3, #21
   1daa6:	e096      	b.n	1dbd6 <parse_option+0x1b2>
	if (delta > COAP_OPTION_NO_EXT) {
   1daa8:	8afb      	ldrh	r3, [r7, #22]
   1daaa:	2b0c      	cmp	r3, #12
   1daac:	d923      	bls.n	1daf6 <parse_option+0xd2>
		r = decode_delta(data, *pos, pos, max_len,
   1daae:	687b      	ldr	r3, [r7, #4]
   1dab0:	8819      	ldrh	r1, [r3, #0]
   1dab2:	8afb      	ldrh	r3, [r7, #22]
   1dab4:	8938      	ldrh	r0, [r7, #8]
   1dab6:	f107 0218 	add.w	r2, r7, #24
   1daba:	9202      	str	r2, [sp, #8]
   1dabc:	f107 0216 	add.w	r2, r7, #22
   1dac0:	9201      	str	r2, [sp, #4]
   1dac2:	9300      	str	r3, [sp, #0]
   1dac4:	4603      	mov	r3, r0
   1dac6:	687a      	ldr	r2, [r7, #4]
   1dac8:	68f8      	ldr	r0, [r7, #12]
   1daca:	f7ff ff56 	bl	1d97a <decode_delta>
   1dace:	61f8      	str	r0, [r7, #28]
		if ((r < 0) || (r == 0 && len > COAP_OPTION_NO_EXT)) {
   1dad0:	69fb      	ldr	r3, [r7, #28]
   1dad2:	2b00      	cmp	r3, #0
   1dad4:	db05      	blt.n	1dae2 <parse_option+0xbe>
   1dad6:	69fb      	ldr	r3, [r7, #28]
   1dad8:	2b00      	cmp	r3, #0
   1dada:	d105      	bne.n	1dae8 <parse_option+0xc4>
   1dadc:	8abb      	ldrh	r3, [r7, #20]
   1dade:	2b0c      	cmp	r3, #12
   1dae0:	d902      	bls.n	1dae8 <parse_option+0xc4>
			return -EINVAL;
   1dae2:	f06f 0315 	mvn.w	r3, #21
   1dae6:	e076      	b.n	1dbd6 <parse_option+0x1b2>
		*opt_len += hdr_len;
   1dae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1daea:	881a      	ldrh	r2, [r3, #0]
   1daec:	8b3b      	ldrh	r3, [r7, #24]
   1daee:	4413      	add	r3, r2
   1daf0:	b29a      	uxth	r2, r3
   1daf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1daf4:	801a      	strh	r2, [r3, #0]
	if (len > COAP_OPTION_NO_EXT) {
   1daf6:	8abb      	ldrh	r3, [r7, #20]
   1daf8:	2b0c      	cmp	r3, #12
   1dafa:	d91d      	bls.n	1db38 <parse_option+0x114>
		r = decode_delta(data, *pos, pos, max_len,
   1dafc:	687b      	ldr	r3, [r7, #4]
   1dafe:	8819      	ldrh	r1, [r3, #0]
   1db00:	8abb      	ldrh	r3, [r7, #20]
   1db02:	8938      	ldrh	r0, [r7, #8]
   1db04:	f107 0218 	add.w	r2, r7, #24
   1db08:	9202      	str	r2, [sp, #8]
   1db0a:	f107 0214 	add.w	r2, r7, #20
   1db0e:	9201      	str	r2, [sp, #4]
   1db10:	9300      	str	r3, [sp, #0]
   1db12:	4603      	mov	r3, r0
   1db14:	687a      	ldr	r2, [r7, #4]
   1db16:	68f8      	ldr	r0, [r7, #12]
   1db18:	f7ff ff2f 	bl	1d97a <decode_delta>
   1db1c:	61f8      	str	r0, [r7, #28]
		if (r < 0) {
   1db1e:	69fb      	ldr	r3, [r7, #28]
   1db20:	2b00      	cmp	r3, #0
   1db22:	da02      	bge.n	1db2a <parse_option+0x106>
			return -EINVAL;
   1db24:	f06f 0315 	mvn.w	r3, #21
   1db28:	e055      	b.n	1dbd6 <parse_option+0x1b2>
		*opt_len += hdr_len;
   1db2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1db2c:	881a      	ldrh	r2, [r3, #0]
   1db2e:	8b3b      	ldrh	r3, [r7, #24]
   1db30:	4413      	add	r3, r2
   1db32:	b29a      	uxth	r2, r3
   1db34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1db36:	801a      	strh	r2, [r3, #0]
	*opt_delta += delta;
   1db38:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1db3a:	881a      	ldrh	r2, [r3, #0]
   1db3c:	8afb      	ldrh	r3, [r7, #22]
   1db3e:	4413      	add	r3, r2
   1db40:	b29a      	uxth	r2, r3
   1db42:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1db44:	801a      	strh	r2, [r3, #0]
	*opt_len += len;
   1db46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1db48:	881a      	ldrh	r2, [r3, #0]
   1db4a:	8abb      	ldrh	r3, [r7, #20]
   1db4c:	4413      	add	r3, r2
   1db4e:	b29a      	uxth	r2, r3
   1db50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1db52:	801a      	strh	r2, [r3, #0]
	if (r == 0) {
   1db54:	69fb      	ldr	r3, [r7, #28]
   1db56:	2b00      	cmp	r3, #0
   1db58:	d107      	bne.n	1db6a <parse_option+0x146>
		if (len == 0U) {
   1db5a:	8abb      	ldrh	r3, [r7, #20]
   1db5c:	2b00      	cmp	r3, #0
   1db5e:	d101      	bne.n	1db64 <parse_option+0x140>
			return r;
   1db60:	69fb      	ldr	r3, [r7, #28]
   1db62:	e038      	b.n	1dbd6 <parse_option+0x1b2>
		return -EINVAL;
   1db64:	f06f 0315 	mvn.w	r3, #21
   1db68:	e035      	b.n	1dbd6 <parse_option+0x1b2>
	if (option) {
   1db6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1db6c:	2b00      	cmp	r3, #0
   1db6e:	d025      	beq.n	1dbbc <parse_option+0x198>
		if (len > sizeof(option->value)) {
   1db70:	8abb      	ldrh	r3, [r7, #20]
   1db72:	2b0c      	cmp	r3, #12
   1db74:	d906      	bls.n	1db84 <parse_option+0x160>
			NET_ERR("%u is > sizeof(coap_option->value)(%zu)!",
   1db76:	f7ff fb03 	bl	1d180 <_is_user_context>
   1db7a:	4603      	mov	r3, r0
   1db7c:	76fb      	strb	r3, [r7, #27]
			return -EINVAL;
   1db7e:	f06f 0315 	mvn.w	r3, #21
   1db82:	e028      	b.n	1dbd6 <parse_option+0x1b2>
		option->delta = *opt_delta;
   1db84:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1db86:	881a      	ldrh	r2, [r3, #0]
   1db88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1db8a:	801a      	strh	r2, [r3, #0]
		option->len = len;
   1db8c:	8abb      	ldrh	r3, [r7, #20]
   1db8e:	b2da      	uxtb	r2, r3
   1db90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1db92:	709a      	strb	r2, [r3, #2]
		r = read(data, *pos, pos, max_len, len, &option->value[0]);
   1db94:	687b      	ldr	r3, [r7, #4]
   1db96:	8819      	ldrh	r1, [r3, #0]
   1db98:	8abb      	ldrh	r3, [r7, #20]
   1db9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1db9c:	3203      	adds	r2, #3
   1db9e:	8938      	ldrh	r0, [r7, #8]
   1dba0:	9201      	str	r2, [sp, #4]
   1dba2:	9300      	str	r3, [sp, #0]
   1dba4:	4603      	mov	r3, r0
   1dba6:	687a      	ldr	r2, [r7, #4]
   1dba8:	68f8      	ldr	r0, [r7, #12]
   1dbaa:	f7ff febd 	bl	1d928 <read>
   1dbae:	61f8      	str	r0, [r7, #28]
		if (r < 0) {
   1dbb0:	69fb      	ldr	r3, [r7, #28]
   1dbb2:	2b00      	cmp	r3, #0
   1dbb4:	da0e      	bge.n	1dbd4 <parse_option+0x1b0>
			return -EINVAL;
   1dbb6:	f06f 0315 	mvn.w	r3, #21
   1dbba:	e00c      	b.n	1dbd6 <parse_option+0x1b2>
		*pos += len;
   1dbbc:	687b      	ldr	r3, [r7, #4]
   1dbbe:	881a      	ldrh	r2, [r3, #0]
   1dbc0:	8abb      	ldrh	r3, [r7, #20]
   1dbc2:	4413      	add	r3, r2
   1dbc4:	b29a      	uxth	r2, r3
   1dbc6:	687b      	ldr	r3, [r7, #4]
   1dbc8:	801a      	strh	r2, [r3, #0]
		r = max_len - *pos;
   1dbca:	893b      	ldrh	r3, [r7, #8]
   1dbcc:	687a      	ldr	r2, [r7, #4]
   1dbce:	8812      	ldrh	r2, [r2, #0]
   1dbd0:	1a9b      	subs	r3, r3, r2
   1dbd2:	61fb      	str	r3, [r7, #28]
	return r;
   1dbd4:	69fb      	ldr	r3, [r7, #28]
}
   1dbd6:	4618      	mov	r0, r3
   1dbd8:	3720      	adds	r7, #32
   1dbda:	46bd      	mov	sp, r7
   1dbdc:	bd80      	pop	{r7, pc}

0001dbde <coap_packet_parse>:
{
   1dbde:	b590      	push	{r4, r7, lr}
   1dbe0:	b08f      	sub	sp, #60	; 0x3c
   1dbe2:	af04      	add	r7, sp, #16
   1dbe4:	60f8      	str	r0, [r7, #12]
   1dbe6:	60b9      	str	r1, [r7, #8]
   1dbe8:	603b      	str	r3, [r7, #0]
   1dbea:	4613      	mov	r3, r2
   1dbec:	80fb      	strh	r3, [r7, #6]
	if (!cpkt || !data) {
   1dbee:	68fb      	ldr	r3, [r7, #12]
   1dbf0:	2b00      	cmp	r3, #0
   1dbf2:	d002      	beq.n	1dbfa <coap_packet_parse+0x1c>
   1dbf4:	68bb      	ldr	r3, [r7, #8]
   1dbf6:	2b00      	cmp	r3, #0
   1dbf8:	d102      	bne.n	1dc00 <coap_packet_parse+0x22>
		return -EINVAL;
   1dbfa:	f06f 0315 	mvn.w	r3, #21
   1dbfe:	e08f      	b.n	1dd20 <coap_packet_parse+0x142>
	if (len < BASIC_HEADER_SIZE) {
   1dc00:	88fb      	ldrh	r3, [r7, #6]
   1dc02:	2b03      	cmp	r3, #3
   1dc04:	d802      	bhi.n	1dc0c <coap_packet_parse+0x2e>
		return -EINVAL;
   1dc06:	f06f 0315 	mvn.w	r3, #21
   1dc0a:	e089      	b.n	1dd20 <coap_packet_parse+0x142>
	if (options) {
   1dc0c:	683b      	ldr	r3, [r7, #0]
   1dc0e:	2b00      	cmp	r3, #0
   1dc10:	d007      	beq.n	1dc22 <coap_packet_parse+0x44>
		memset(options, 0, opt_num * sizeof(struct coap_option));
   1dc12:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
   1dc16:	011b      	lsls	r3, r3, #4
   1dc18:	461a      	mov	r2, r3
   1dc1a:	2100      	movs	r1, #0
   1dc1c:	6838      	ldr	r0, [r7, #0]
   1dc1e:	f7e4 fa4b 	bl	20b8 <memset>
	cpkt->data = data;
   1dc22:	68fb      	ldr	r3, [r7, #12]
   1dc24:	68ba      	ldr	r2, [r7, #8]
   1dc26:	601a      	str	r2, [r3, #0]
	cpkt->offset = 0U;
   1dc28:	68fb      	ldr	r3, [r7, #12]
   1dc2a:	2200      	movs	r2, #0
   1dc2c:	809a      	strh	r2, [r3, #4]
	cpkt->max_len = len;
   1dc2e:	68fb      	ldr	r3, [r7, #12]
   1dc30:	88fa      	ldrh	r2, [r7, #6]
   1dc32:	80da      	strh	r2, [r3, #6]
	cpkt->opt_len = 0U;
   1dc34:	68fb      	ldr	r3, [r7, #12]
   1dc36:	2200      	movs	r2, #0
   1dc38:	815a      	strh	r2, [r3, #10]
	cpkt->hdr_len = 0U;
   1dc3a:	68fb      	ldr	r3, [r7, #12]
   1dc3c:	2200      	movs	r2, #0
   1dc3e:	721a      	strb	r2, [r3, #8]
	cpkt->delta = 0U;
   1dc40:	68fb      	ldr	r3, [r7, #12]
   1dc42:	2200      	movs	r2, #0
   1dc44:	819a      	strh	r2, [r3, #12]
	tkl = cpkt->data[0] & 0x0f;
   1dc46:	68fb      	ldr	r3, [r7, #12]
   1dc48:	681b      	ldr	r3, [r3, #0]
   1dc4a:	781b      	ldrb	r3, [r3, #0]
   1dc4c:	f003 030f 	and.w	r3, r3, #15
   1dc50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (tkl > 8) {
   1dc54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   1dc58:	2b08      	cmp	r3, #8
   1dc5a:	d902      	bls.n	1dc62 <coap_packet_parse+0x84>
		return -EINVAL;
   1dc5c:	f06f 0315 	mvn.w	r3, #21
   1dc60:	e05e      	b.n	1dd20 <coap_packet_parse+0x142>
	cpkt->hdr_len = BASIC_HEADER_SIZE + tkl;
   1dc62:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
   1dc66:	3304      	adds	r3, #4
   1dc68:	b25b      	sxtb	r3, r3
   1dc6a:	b2da      	uxtb	r2, r3
   1dc6c:	68fb      	ldr	r3, [r7, #12]
   1dc6e:	721a      	strb	r2, [r3, #8]
	if (cpkt->hdr_len > len) {
   1dc70:	68fb      	ldr	r3, [r7, #12]
   1dc72:	7a1b      	ldrb	r3, [r3, #8]
   1dc74:	b29b      	uxth	r3, r3
   1dc76:	88fa      	ldrh	r2, [r7, #6]
   1dc78:	429a      	cmp	r2, r3
   1dc7a:	d202      	bcs.n	1dc82 <coap_packet_parse+0xa4>
		return -EINVAL;
   1dc7c:	f06f 0315 	mvn.w	r3, #21
   1dc80:	e04e      	b.n	1dd20 <coap_packet_parse+0x142>
	cpkt->offset = cpkt->hdr_len;
   1dc82:	68fb      	ldr	r3, [r7, #12]
   1dc84:	7a1b      	ldrb	r3, [r3, #8]
   1dc86:	b29a      	uxth	r2, r3
   1dc88:	68fb      	ldr	r3, [r7, #12]
   1dc8a:	809a      	strh	r2, [r3, #4]
	if (cpkt->hdr_len == len) {
   1dc8c:	68fb      	ldr	r3, [r7, #12]
   1dc8e:	7a1b      	ldrb	r3, [r3, #8]
   1dc90:	b29b      	uxth	r3, r3
   1dc92:	88fa      	ldrh	r2, [r7, #6]
   1dc94:	429a      	cmp	r2, r3
   1dc96:	d101      	bne.n	1dc9c <coap_packet_parse+0xbe>
		return 0;
   1dc98:	2300      	movs	r3, #0
   1dc9a:	e041      	b.n	1dd20 <coap_packet_parse+0x142>
	offset = cpkt->offset;
   1dc9c:	68fb      	ldr	r3, [r7, #12]
   1dc9e:	889b      	ldrh	r3, [r3, #4]
   1dca0:	833b      	strh	r3, [r7, #24]
	opt_len = 0U;
   1dca2:	2300      	movs	r3, #0
   1dca4:	837b      	strh	r3, [r7, #26]
	delta = 0U;
   1dca6:	2300      	movs	r3, #0
   1dca8:	82fb      	strh	r3, [r7, #22]
	num = 0U;
   1dcaa:	2300      	movs	r3, #0
   1dcac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		option = num < opt_num ? &options[num++] : NULL;
   1dcb0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   1dcb4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
   1dcb8:	429a      	cmp	r2, r3
   1dcba:	d208      	bcs.n	1dcce <coap_packet_parse+0xf0>
   1dcbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   1dcc0:	1c5a      	adds	r2, r3, #1
   1dcc2:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   1dcc6:	011b      	lsls	r3, r3, #4
   1dcc8:	683a      	ldr	r2, [r7, #0]
   1dcca:	4413      	add	r3, r2
   1dccc:	e000      	b.n	1dcd0 <coap_packet_parse+0xf2>
   1dcce:	2300      	movs	r3, #0
   1dcd0:	623b      	str	r3, [r7, #32]
		ret = parse_option(cpkt->data, offset, &offset, cpkt->max_len,
   1dcd2:	68fb      	ldr	r3, [r7, #12]
   1dcd4:	6818      	ldr	r0, [r3, #0]
   1dcd6:	8b39      	ldrh	r1, [r7, #24]
   1dcd8:	68fb      	ldr	r3, [r7, #12]
   1dcda:	88dc      	ldrh	r4, [r3, #6]
   1dcdc:	f107 0218 	add.w	r2, r7, #24
   1dce0:	6a3b      	ldr	r3, [r7, #32]
   1dce2:	9302      	str	r3, [sp, #8]
   1dce4:	f107 031a 	add.w	r3, r7, #26
   1dce8:	9301      	str	r3, [sp, #4]
   1dcea:	f107 0316 	add.w	r3, r7, #22
   1dcee:	9300      	str	r3, [sp, #0]
   1dcf0:	4623      	mov	r3, r4
   1dcf2:	f7ff fe97 	bl	1da24 <parse_option>
   1dcf6:	61f8      	str	r0, [r7, #28]
		if (ret < 0) {
   1dcf8:	69fb      	ldr	r3, [r7, #28]
   1dcfa:	2b00      	cmp	r3, #0
   1dcfc:	da01      	bge.n	1dd02 <coap_packet_parse+0x124>
			return ret;
   1dcfe:	69fb      	ldr	r3, [r7, #28]
   1dd00:	e00e      	b.n	1dd20 <coap_packet_parse+0x142>
		} else if (ret == 0) {
   1dd02:	69fb      	ldr	r3, [r7, #28]
   1dd04:	2b00      	cmp	r3, #0
   1dd06:	d000      	beq.n	1dd0a <coap_packet_parse+0x12c>
	while (1) {
   1dd08:	e7d2      	b.n	1dcb0 <coap_packet_parse+0xd2>
			break;
   1dd0a:	bf00      	nop
	cpkt->opt_len = opt_len;
   1dd0c:	8b7a      	ldrh	r2, [r7, #26]
   1dd0e:	68fb      	ldr	r3, [r7, #12]
   1dd10:	815a      	strh	r2, [r3, #10]
	cpkt->delta = delta;
   1dd12:	8afa      	ldrh	r2, [r7, #22]
   1dd14:	68fb      	ldr	r3, [r7, #12]
   1dd16:	819a      	strh	r2, [r3, #12]
	cpkt->offset = offset;
   1dd18:	8b3a      	ldrh	r2, [r7, #24]
   1dd1a:	68fb      	ldr	r3, [r7, #12]
   1dd1c:	809a      	strh	r2, [r3, #4]
	return 0;
   1dd1e:	2300      	movs	r3, #0
}
   1dd20:	4618      	mov	r0, r3
   1dd22:	372c      	adds	r7, #44	; 0x2c
   1dd24:	46bd      	mov	sp, r7
   1dd26:	bd90      	pop	{r4, r7, pc}

0001dd28 <coap_find_options>:
{
   1dd28:	b590      	push	{r4, r7, lr}
   1dd2a:	b08d      	sub	sp, #52	; 0x34
   1dd2c:	af04      	add	r7, sp, #16
   1dd2e:	60f8      	str	r0, [r7, #12]
   1dd30:	607a      	str	r2, [r7, #4]
   1dd32:	461a      	mov	r2, r3
   1dd34:	460b      	mov	r3, r1
   1dd36:	817b      	strh	r3, [r7, #10]
   1dd38:	4613      	mov	r3, r2
   1dd3a:	813b      	strh	r3, [r7, #8]
	offset = cpkt->hdr_len;
   1dd3c:	68fb      	ldr	r3, [r7, #12]
   1dd3e:	7a1b      	ldrb	r3, [r3, #8]
   1dd40:	b29b      	uxth	r3, r3
   1dd42:	82bb      	strh	r3, [r7, #20]
	opt_len = 0U;
   1dd44:	2300      	movs	r3, #0
   1dd46:	82fb      	strh	r3, [r7, #22]
	delta = 0U;
   1dd48:	2300      	movs	r3, #0
   1dd4a:	827b      	strh	r3, [r7, #18]
	num = 0U;
   1dd4c:	2300      	movs	r3, #0
   1dd4e:	77fb      	strb	r3, [r7, #31]
	while (delta <= code && num < veclen) {
   1dd50:	e029      	b.n	1dda6 <coap_find_options+0x7e>
		r = parse_option(cpkt->data, offset, &offset,
   1dd52:	68fb      	ldr	r3, [r7, #12]
   1dd54:	6818      	ldr	r0, [r3, #0]
   1dd56:	8ab9      	ldrh	r1, [r7, #20]
   1dd58:	68fb      	ldr	r3, [r7, #12]
   1dd5a:	88dc      	ldrh	r4, [r3, #6]
				 &options[num]);
   1dd5c:	7ffb      	ldrb	r3, [r7, #31]
   1dd5e:	011b      	lsls	r3, r3, #4
		r = parse_option(cpkt->data, offset, &offset,
   1dd60:	687a      	ldr	r2, [r7, #4]
   1dd62:	4413      	add	r3, r2
   1dd64:	f107 0214 	add.w	r2, r7, #20
   1dd68:	9302      	str	r3, [sp, #8]
   1dd6a:	f107 0316 	add.w	r3, r7, #22
   1dd6e:	9301      	str	r3, [sp, #4]
   1dd70:	f107 0312 	add.w	r3, r7, #18
   1dd74:	9300      	str	r3, [sp, #0]
   1dd76:	4623      	mov	r3, r4
   1dd78:	f7ff fe54 	bl	1da24 <parse_option>
   1dd7c:	61b8      	str	r0, [r7, #24]
		if (r < 0) {
   1dd7e:	69bb      	ldr	r3, [r7, #24]
   1dd80:	2b00      	cmp	r3, #0
   1dd82:	da02      	bge.n	1dd8a <coap_find_options+0x62>
			return -EINVAL;
   1dd84:	f06f 0315 	mvn.w	r3, #21
   1dd88:	e019      	b.n	1ddbe <coap_find_options+0x96>
		if (code == options[num].delta) {
   1dd8a:	7ffb      	ldrb	r3, [r7, #31]
   1dd8c:	011b      	lsls	r3, r3, #4
   1dd8e:	687a      	ldr	r2, [r7, #4]
   1dd90:	4413      	add	r3, r2
   1dd92:	881b      	ldrh	r3, [r3, #0]
   1dd94:	897a      	ldrh	r2, [r7, #10]
   1dd96:	429a      	cmp	r2, r3
   1dd98:	d102      	bne.n	1dda0 <coap_find_options+0x78>
			num++;
   1dd9a:	7ffb      	ldrb	r3, [r7, #31]
   1dd9c:	3301      	adds	r3, #1
   1dd9e:	77fb      	strb	r3, [r7, #31]
		if (r == 0) {
   1dda0:	69bb      	ldr	r3, [r7, #24]
   1dda2:	2b00      	cmp	r3, #0
   1dda4:	d009      	beq.n	1ddba <coap_find_options+0x92>
	while (delta <= code && num < veclen) {
   1dda6:	8a7b      	ldrh	r3, [r7, #18]
   1dda8:	897a      	ldrh	r2, [r7, #10]
   1ddaa:	429a      	cmp	r2, r3
   1ddac:	d306      	bcc.n	1ddbc <coap_find_options+0x94>
   1ddae:	7ffb      	ldrb	r3, [r7, #31]
   1ddb0:	b29b      	uxth	r3, r3
   1ddb2:	893a      	ldrh	r2, [r7, #8]
   1ddb4:	429a      	cmp	r2, r3
   1ddb6:	d8cc      	bhi.n	1dd52 <coap_find_options+0x2a>
   1ddb8:	e000      	b.n	1ddbc <coap_find_options+0x94>
			break;
   1ddba:	bf00      	nop
	return num;
   1ddbc:	7ffb      	ldrb	r3, [r7, #31]
}
   1ddbe:	4618      	mov	r0, r3
   1ddc0:	3724      	adds	r7, #36	; 0x24
   1ddc2:	46bd      	mov	sp, r7
   1ddc4:	bd90      	pop	{r4, r7, pc}

0001ddc6 <coap_header_get_type>:
{
   1ddc6:	b480      	push	{r7}
   1ddc8:	b083      	sub	sp, #12
   1ddca:	af00      	add	r7, sp, #0
   1ddcc:	6078      	str	r0, [r7, #4]
	if (!cpkt || !cpkt->data) {
   1ddce:	687b      	ldr	r3, [r7, #4]
   1ddd0:	2b00      	cmp	r3, #0
   1ddd2:	d003      	beq.n	1dddc <coap_header_get_type+0x16>
   1ddd4:	687b      	ldr	r3, [r7, #4]
   1ddd6:	681b      	ldr	r3, [r3, #0]
   1ddd8:	2b00      	cmp	r3, #0
   1ddda:	d101      	bne.n	1dde0 <coap_header_get_type+0x1a>
		return 0;
   1dddc:	2300      	movs	r3, #0
   1ddde:	e007      	b.n	1ddf0 <coap_header_get_type+0x2a>
	return (cpkt->data[0] & 0x30) >> 4;
   1dde0:	687b      	ldr	r3, [r7, #4]
   1dde2:	681b      	ldr	r3, [r3, #0]
   1dde4:	781b      	ldrb	r3, [r3, #0]
   1dde6:	111b      	asrs	r3, r3, #4
   1dde8:	b2db      	uxtb	r3, r3
   1ddea:	f003 0303 	and.w	r3, r3, #3
   1ddee:	b2db      	uxtb	r3, r3
}
   1ddf0:	4618      	mov	r0, r3
   1ddf2:	370c      	adds	r7, #12
   1ddf4:	46bd      	mov	sp, r7
   1ddf6:	bc80      	pop	{r7}
   1ddf8:	4770      	bx	lr

0001ddfa <__coap_header_get_code>:
{
   1ddfa:	b480      	push	{r7}
   1ddfc:	b083      	sub	sp, #12
   1ddfe:	af00      	add	r7, sp, #0
   1de00:	6078      	str	r0, [r7, #4]
	if (!cpkt || !cpkt->data) {
   1de02:	687b      	ldr	r3, [r7, #4]
   1de04:	2b00      	cmp	r3, #0
   1de06:	d003      	beq.n	1de10 <__coap_header_get_code+0x16>
   1de08:	687b      	ldr	r3, [r7, #4]
   1de0a:	681b      	ldr	r3, [r3, #0]
   1de0c:	2b00      	cmp	r3, #0
   1de0e:	d101      	bne.n	1de14 <__coap_header_get_code+0x1a>
		return 0;
   1de10:	2300      	movs	r3, #0
   1de12:	e002      	b.n	1de1a <__coap_header_get_code+0x20>
	return cpkt->data[1];
   1de14:	687b      	ldr	r3, [r7, #4]
   1de16:	681b      	ldr	r3, [r3, #0]
   1de18:	785b      	ldrb	r3, [r3, #1]
}
   1de1a:	4618      	mov	r0, r3
   1de1c:	370c      	adds	r7, #12
   1de1e:	46bd      	mov	sp, r7
   1de20:	bc80      	pop	{r7}
   1de22:	4770      	bx	lr

0001de24 <coap_header_get_token>:
{
   1de24:	b580      	push	{r7, lr}
   1de26:	b084      	sub	sp, #16
   1de28:	af00      	add	r7, sp, #0
   1de2a:	6078      	str	r0, [r7, #4]
   1de2c:	6039      	str	r1, [r7, #0]
	if (!cpkt || !cpkt->data) {
   1de2e:	687b      	ldr	r3, [r7, #4]
   1de30:	2b00      	cmp	r3, #0
   1de32:	d003      	beq.n	1de3c <coap_header_get_token+0x18>
   1de34:	687b      	ldr	r3, [r7, #4]
   1de36:	681b      	ldr	r3, [r3, #0]
   1de38:	2b00      	cmp	r3, #0
   1de3a:	d101      	bne.n	1de40 <coap_header_get_token+0x1c>
		return 0;
   1de3c:	2300      	movs	r3, #0
   1de3e:	e011      	b.n	1de64 <coap_header_get_token+0x40>
	tkl = cpkt->data[0] & 0x0f;
   1de40:	687b      	ldr	r3, [r7, #4]
   1de42:	681b      	ldr	r3, [r3, #0]
   1de44:	781b      	ldrb	r3, [r3, #0]
   1de46:	f003 030f 	and.w	r3, r3, #15
   1de4a:	73fb      	strb	r3, [r7, #15]
	if (tkl) {
   1de4c:	7bfb      	ldrb	r3, [r7, #15]
   1de4e:	2b00      	cmp	r3, #0
   1de50:	d007      	beq.n	1de62 <coap_header_get_token+0x3e>
		memcpy(token, cpkt->data + BASIC_HEADER_SIZE, tkl);
   1de52:	687b      	ldr	r3, [r7, #4]
   1de54:	681b      	ldr	r3, [r3, #0]
   1de56:	3304      	adds	r3, #4
   1de58:	7bfa      	ldrb	r2, [r7, #15]
   1de5a:	4619      	mov	r1, r3
   1de5c:	6838      	ldr	r0, [r7, #0]
   1de5e:	f7e4 f903 	bl	2068 <memcpy>
	return tkl;
   1de62:	7bfb      	ldrb	r3, [r7, #15]
}
   1de64:	4618      	mov	r0, r3
   1de66:	3710      	adds	r7, #16
   1de68:	46bd      	mov	sp, r7
   1de6a:	bd80      	pop	{r7, pc}

0001de6c <coap_header_get_code>:
{
   1de6c:	b580      	push	{r7, lr}
   1de6e:	b084      	sub	sp, #16
   1de70:	af00      	add	r7, sp, #0
   1de72:	6078      	str	r0, [r7, #4]
	u8_t code = __coap_header_get_code(cpkt);
   1de74:	6878      	ldr	r0, [r7, #4]
   1de76:	f7ff ffc0 	bl	1ddfa <__coap_header_get_code>
   1de7a:	4603      	mov	r3, r0
   1de7c:	73fb      	strb	r3, [r7, #15]
	switch (code) {
   1de7e:	7bfb      	ldrb	r3, [r7, #15]
   1de80:	2b86      	cmp	r3, #134	; 0x86
   1de82:	dc0b      	bgt.n	1de9c <coap_header_get_code+0x30>
   1de84:	2b80      	cmp	r3, #128	; 0x80
   1de86:	da17      	bge.n	1deb8 <coap_header_get_code+0x4c>
   1de88:	2b45      	cmp	r3, #69	; 0x45
   1de8a:	dc04      	bgt.n	1de96 <coap_header_get_code+0x2a>
   1de8c:	2b40      	cmp	r3, #64	; 0x40
   1de8e:	da13      	bge.n	1deb8 <coap_header_get_code+0x4c>
   1de90:	2b04      	cmp	r3, #4
   1de92:	d813      	bhi.n	1debc <coap_header_get_code+0x50>
   1de94:	e010      	b.n	1deb8 <coap_header_get_code+0x4c>
   1de96:	2b5f      	cmp	r3, #95	; 0x5f
   1de98:	d00e      	beq.n	1deb8 <coap_header_get_code+0x4c>
   1de9a:	e00f      	b.n	1debc <coap_header_get_code+0x50>
   1de9c:	2b8d      	cmp	r3, #141	; 0x8d
   1de9e:	dc04      	bgt.n	1deaa <coap_header_get_code+0x3e>
   1dea0:	2b8c      	cmp	r3, #140	; 0x8c
   1dea2:	da09      	bge.n	1deb8 <coap_header_get_code+0x4c>
   1dea4:	2b88      	cmp	r3, #136	; 0x88
   1dea6:	d007      	beq.n	1deb8 <coap_header_get_code+0x4c>
   1dea8:	e008      	b.n	1debc <coap_header_get_code+0x50>
   1deaa:	2b8f      	cmp	r3, #143	; 0x8f
   1deac:	d004      	beq.n	1deb8 <coap_header_get_code+0x4c>
   1deae:	2b8f      	cmp	r3, #143	; 0x8f
   1deb0:	db04      	blt.n	1debc <coap_header_get_code+0x50>
   1deb2:	3ba0      	subs	r3, #160	; 0xa0
   1deb4:	2b05      	cmp	r3, #5
   1deb6:	d801      	bhi.n	1debc <coap_header_get_code+0x50>
		return code;
   1deb8:	7bfb      	ldrb	r3, [r7, #15]
   1deba:	e000      	b.n	1debe <coap_header_get_code+0x52>
		return COAP_CODE_EMPTY;
   1debc:	2300      	movs	r3, #0
}
   1debe:	4618      	mov	r0, r3
   1dec0:	3710      	adds	r7, #16
   1dec2:	46bd      	mov	sp, r7
   1dec4:	bd80      	pop	{r7, pc}

0001dec6 <coap_header_get_id>:
{
   1dec6:	b480      	push	{r7}
   1dec8:	b083      	sub	sp, #12
   1deca:	af00      	add	r7, sp, #0
   1decc:	6078      	str	r0, [r7, #4]
	if (!cpkt || !cpkt->data) {
   1dece:	687b      	ldr	r3, [r7, #4]
   1ded0:	2b00      	cmp	r3, #0
   1ded2:	d003      	beq.n	1dedc <coap_header_get_id+0x16>
   1ded4:	687b      	ldr	r3, [r7, #4]
   1ded6:	681b      	ldr	r3, [r3, #0]
   1ded8:	2b00      	cmp	r3, #0
   1deda:	d101      	bne.n	1dee0 <coap_header_get_id+0x1a>
		return 0;
   1dedc:	2300      	movs	r3, #0
   1dede:	e00d      	b.n	1defc <coap_header_get_id+0x36>
	return (cpkt->data[2] << 8) | cpkt->data[3];
   1dee0:	687b      	ldr	r3, [r7, #4]
   1dee2:	681b      	ldr	r3, [r3, #0]
   1dee4:	3302      	adds	r3, #2
   1dee6:	781b      	ldrb	r3, [r3, #0]
   1dee8:	021b      	lsls	r3, r3, #8
   1deea:	b21a      	sxth	r2, r3
   1deec:	687b      	ldr	r3, [r7, #4]
   1deee:	681b      	ldr	r3, [r3, #0]
   1def0:	3303      	adds	r3, #3
   1def2:	781b      	ldrb	r3, [r3, #0]
   1def4:	b21b      	sxth	r3, r3
   1def6:	4313      	orrs	r3, r2
   1def8:	b21b      	sxth	r3, r3
   1defa:	b29b      	uxth	r3, r3
}
   1defc:	4618      	mov	r0, r3
   1defe:	370c      	adds	r7, #12
   1df00:	46bd      	mov	sp, r7
   1df02:	bc80      	pop	{r7}
   1df04:	4770      	bx	lr

0001df06 <coap_packet_get_payload>:
{
   1df06:	b480      	push	{r7}
   1df08:	b085      	sub	sp, #20
   1df0a:	af00      	add	r7, sp, #0
   1df0c:	6078      	str	r0, [r7, #4]
   1df0e:	6039      	str	r1, [r7, #0]
	if (!cpkt || !len) {
   1df10:	687b      	ldr	r3, [r7, #4]
   1df12:	2b00      	cmp	r3, #0
   1df14:	d002      	beq.n	1df1c <coap_packet_get_payload+0x16>
   1df16:	683b      	ldr	r3, [r7, #0]
   1df18:	2b00      	cmp	r3, #0
   1df1a:	d101      	bne.n	1df20 <coap_packet_get_payload+0x1a>
		return NULL;
   1df1c:	2300      	movs	r3, #0
   1df1e:	e023      	b.n	1df68 <coap_packet_get_payload+0x62>
	payload_len = cpkt->max_len - cpkt->hdr_len - cpkt->opt_len;
   1df20:	687b      	ldr	r3, [r7, #4]
   1df22:	88db      	ldrh	r3, [r3, #6]
   1df24:	461a      	mov	r2, r3
   1df26:	687b      	ldr	r3, [r7, #4]
   1df28:	7a1b      	ldrb	r3, [r3, #8]
   1df2a:	1ad3      	subs	r3, r2, r3
   1df2c:	687a      	ldr	r2, [r7, #4]
   1df2e:	8952      	ldrh	r2, [r2, #10]
   1df30:	1a9b      	subs	r3, r3, r2
   1df32:	60fb      	str	r3, [r7, #12]
	if (payload_len > 0) {
   1df34:	68fb      	ldr	r3, [r7, #12]
   1df36:	2b00      	cmp	r3, #0
   1df38:	dd04      	ble.n	1df44 <coap_packet_get_payload+0x3e>
		*len = payload_len;
   1df3a:	68fb      	ldr	r3, [r7, #12]
   1df3c:	b29a      	uxth	r2, r3
   1df3e:	683b      	ldr	r3, [r7, #0]
   1df40:	801a      	strh	r2, [r3, #0]
   1df42:	e002      	b.n	1df4a <coap_packet_get_payload+0x44>
		*len = 0U;
   1df44:	683b      	ldr	r3, [r7, #0]
   1df46:	2200      	movs	r2, #0
   1df48:	801a      	strh	r2, [r3, #0]
	return !(*len) ? NULL :
   1df4a:	683b      	ldr	r3, [r7, #0]
   1df4c:	881b      	ldrh	r3, [r3, #0]
   1df4e:	2b00      	cmp	r3, #0
   1df50:	d009      	beq.n	1df66 <coap_packet_get_payload+0x60>
		cpkt->data + cpkt->hdr_len + cpkt->opt_len;
   1df52:	687b      	ldr	r3, [r7, #4]
   1df54:	681a      	ldr	r2, [r3, #0]
   1df56:	687b      	ldr	r3, [r7, #4]
   1df58:	7a1b      	ldrb	r3, [r3, #8]
   1df5a:	4619      	mov	r1, r3
   1df5c:	687b      	ldr	r3, [r7, #4]
   1df5e:	895b      	ldrh	r3, [r3, #10]
   1df60:	440b      	add	r3, r1
	return !(*len) ? NULL :
   1df62:	4413      	add	r3, r2
   1df64:	e000      	b.n	1df68 <coap_packet_get_payload+0x62>
   1df66:	2300      	movs	r3, #0
}
   1df68:	4618      	mov	r0, r3
   1df6a:	3714      	adds	r7, #20
   1df6c:	46bd      	mov	sp, r7
   1df6e:	bc80      	pop	{r7}
   1df70:	4770      	bx	lr

0001df72 <uri_path_eq>:
{
   1df72:	b590      	push	{r4, r7, lr}
   1df74:	b087      	sub	sp, #28
   1df76:	af00      	add	r7, sp, #0
   1df78:	60f8      	str	r0, [r7, #12]
   1df7a:	60b9      	str	r1, [r7, #8]
   1df7c:	607a      	str	r2, [r7, #4]
   1df7e:	70fb      	strb	r3, [r7, #3]
	u8_t j = 0U;
   1df80:	2300      	movs	r3, #0
   1df82:	75bb      	strb	r3, [r7, #22]
	for (i = 0U; i < opt_num && path[j]; i++) {
   1df84:	2300      	movs	r3, #0
   1df86:	75fb      	strb	r3, [r7, #23]
   1df88:	e038      	b.n	1dffc <uri_path_eq+0x8a>
		if (options[i].delta != COAP_OPTION_URI_PATH) {
   1df8a:	7dfb      	ldrb	r3, [r7, #23]
   1df8c:	011b      	lsls	r3, r3, #4
   1df8e:	687a      	ldr	r2, [r7, #4]
   1df90:	4413      	add	r3, r2
   1df92:	881b      	ldrh	r3, [r3, #0]
   1df94:	2b0b      	cmp	r3, #11
   1df96:	d12d      	bne.n	1dff4 <uri_path_eq+0x82>
		if (options[i].len != strlen(path[j])) {
   1df98:	7dfb      	ldrb	r3, [r7, #23]
   1df9a:	011b      	lsls	r3, r3, #4
   1df9c:	687a      	ldr	r2, [r7, #4]
   1df9e:	4413      	add	r3, r2
   1dfa0:	789b      	ldrb	r3, [r3, #2]
   1dfa2:	461c      	mov	r4, r3
   1dfa4:	7dbb      	ldrb	r3, [r7, #22]
   1dfa6:	009b      	lsls	r3, r3, #2
   1dfa8:	68ba      	ldr	r2, [r7, #8]
   1dfaa:	4413      	add	r3, r2
   1dfac:	681b      	ldr	r3, [r3, #0]
   1dfae:	4618      	mov	r0, r3
   1dfb0:	f7e4 f8a1 	bl	20f6 <strlen>
   1dfb4:	4603      	mov	r3, r0
   1dfb6:	429c      	cmp	r4, r3
   1dfb8:	d001      	beq.n	1dfbe <uri_path_eq+0x4c>
			return false;
   1dfba:	2300      	movs	r3, #0
   1dfbc:	e043      	b.n	1e046 <uri_path_eq+0xd4>
		if (memcmp(options[i].value, path[j], options[i].len)) {
   1dfbe:	7dfb      	ldrb	r3, [r7, #23]
   1dfc0:	011b      	lsls	r3, r3, #4
   1dfc2:	687a      	ldr	r2, [r7, #4]
   1dfc4:	4413      	add	r3, r2
   1dfc6:	1cd8      	adds	r0, r3, #3
   1dfc8:	7dbb      	ldrb	r3, [r7, #22]
   1dfca:	009b      	lsls	r3, r3, #2
   1dfcc:	68ba      	ldr	r2, [r7, #8]
   1dfce:	4413      	add	r3, r2
   1dfd0:	6819      	ldr	r1, [r3, #0]
   1dfd2:	7dfb      	ldrb	r3, [r7, #23]
   1dfd4:	011b      	lsls	r3, r3, #4
   1dfd6:	687a      	ldr	r2, [r7, #4]
   1dfd8:	4413      	add	r3, r2
   1dfda:	789b      	ldrb	r3, [r3, #2]
   1dfdc:	461a      	mov	r2, r3
   1dfde:	f7e4 f835 	bl	204c <memcmp>
   1dfe2:	4603      	mov	r3, r0
   1dfe4:	2b00      	cmp	r3, #0
   1dfe6:	d001      	beq.n	1dfec <uri_path_eq+0x7a>
			return false;
   1dfe8:	2300      	movs	r3, #0
   1dfea:	e02c      	b.n	1e046 <uri_path_eq+0xd4>
		j++;
   1dfec:	7dbb      	ldrb	r3, [r7, #22]
   1dfee:	3301      	adds	r3, #1
   1dff0:	75bb      	strb	r3, [r7, #22]
   1dff2:	e000      	b.n	1dff6 <uri_path_eq+0x84>
			continue;
   1dff4:	bf00      	nop
	for (i = 0U; i < opt_num && path[j]; i++) {
   1dff6:	7dfb      	ldrb	r3, [r7, #23]
   1dff8:	3301      	adds	r3, #1
   1dffa:	75fb      	strb	r3, [r7, #23]
   1dffc:	7dfa      	ldrb	r2, [r7, #23]
   1dffe:	78fb      	ldrb	r3, [r7, #3]
   1e000:	429a      	cmp	r2, r3
   1e002:	d206      	bcs.n	1e012 <uri_path_eq+0xa0>
   1e004:	7dbb      	ldrb	r3, [r7, #22]
   1e006:	009b      	lsls	r3, r3, #2
   1e008:	68ba      	ldr	r2, [r7, #8]
   1e00a:	4413      	add	r3, r2
   1e00c:	681b      	ldr	r3, [r3, #0]
   1e00e:	2b00      	cmp	r3, #0
   1e010:	d1bb      	bne.n	1df8a <uri_path_eq+0x18>
	if (path[j]) {
   1e012:	7dbb      	ldrb	r3, [r7, #22]
   1e014:	009b      	lsls	r3, r3, #2
   1e016:	68ba      	ldr	r2, [r7, #8]
   1e018:	4413      	add	r3, r2
   1e01a:	681b      	ldr	r3, [r3, #0]
   1e01c:	2b00      	cmp	r3, #0
   1e01e:	d00d      	beq.n	1e03c <uri_path_eq+0xca>
		return false;
   1e020:	2300      	movs	r3, #0
   1e022:	e010      	b.n	1e046 <uri_path_eq+0xd4>
		if (options[i].delta == COAP_OPTION_URI_PATH) {
   1e024:	7dfb      	ldrb	r3, [r7, #23]
   1e026:	011b      	lsls	r3, r3, #4
   1e028:	687a      	ldr	r2, [r7, #4]
   1e02a:	4413      	add	r3, r2
   1e02c:	881b      	ldrh	r3, [r3, #0]
   1e02e:	2b0b      	cmp	r3, #11
   1e030:	d101      	bne.n	1e036 <uri_path_eq+0xc4>
			return false;
   1e032:	2300      	movs	r3, #0
   1e034:	e007      	b.n	1e046 <uri_path_eq+0xd4>
	for (; i < opt_num; i++) {
   1e036:	7dfb      	ldrb	r3, [r7, #23]
   1e038:	3301      	adds	r3, #1
   1e03a:	75fb      	strb	r3, [r7, #23]
   1e03c:	7dfa      	ldrb	r2, [r7, #23]
   1e03e:	78fb      	ldrb	r3, [r7, #3]
   1e040:	429a      	cmp	r2, r3
   1e042:	d3ef      	bcc.n	1e024 <uri_path_eq+0xb2>
	return true;
   1e044:	2301      	movs	r3, #1
}
   1e046:	4618      	mov	r0, r3
   1e048:	371c      	adds	r7, #28
   1e04a:	46bd      	mov	sp, r7
   1e04c:	bd90      	pop	{r4, r7, pc}

0001e04e <is_request>:

static bool is_request(const struct coap_packet *cpkt)
{
   1e04e:	b580      	push	{r7, lr}
   1e050:	b084      	sub	sp, #16
   1e052:	af00      	add	r7, sp, #0
   1e054:	6078      	str	r0, [r7, #4]
	u8_t code = coap_header_get_code(cpkt);
   1e056:	6878      	ldr	r0, [r7, #4]
   1e058:	f7ff ff08 	bl	1de6c <coap_header_get_code>
   1e05c:	4603      	mov	r3, r0
   1e05e:	73fb      	strb	r3, [r7, #15]

	return !(code & ~COAP_REQUEST_MASK);
   1e060:	7bfb      	ldrb	r3, [r7, #15]
   1e062:	f023 0307 	bic.w	r3, r3, #7
   1e066:	2b00      	cmp	r3, #0
   1e068:	bf0c      	ite	eq
   1e06a:	2301      	moveq	r3, #1
   1e06c:	2300      	movne	r3, #0
   1e06e:	b2db      	uxtb	r3, r3
}
   1e070:	4618      	mov	r0, r3
   1e072:	3710      	adds	r7, #16
   1e074:	46bd      	mov	sp, r7
   1e076:	bd80      	pop	{r7, pc}

0001e078 <coap_handle_request>:
int coap_handle_request(struct coap_packet *cpkt,
			struct coap_resource *resources,
			struct coap_option *options,
			u8_t opt_num,
			struct sockaddr *addr, socklen_t addr_len)
{
   1e078:	b590      	push	{r4, r7, lr}
   1e07a:	b089      	sub	sp, #36	; 0x24
   1e07c:	af00      	add	r7, sp, #0
   1e07e:	60f8      	str	r0, [r7, #12]
   1e080:	60b9      	str	r1, [r7, #8]
   1e082:	607a      	str	r2, [r7, #4]
   1e084:	70fb      	strb	r3, [r7, #3]
	struct coap_resource *resource;

	if (!is_request(cpkt)) {
   1e086:	68f8      	ldr	r0, [r7, #12]
   1e088:	f7ff ffe1 	bl	1e04e <is_request>
   1e08c:	4603      	mov	r3, r0
   1e08e:	f083 0301 	eor.w	r3, r3, #1
   1e092:	b2db      	uxtb	r3, r3
   1e094:	2b00      	cmp	r3, #0
   1e096:	d001      	beq.n	1e09c <coap_handle_request+0x24>
		return 0;
   1e098:	2300      	movs	r3, #0
   1e09a:	e039      	b.n	1e110 <coap_handle_request+0x98>
	}

	/* FIXME: deal with hierarchical resources */
	for (resource = resources; resource && resource->path; resource++) {
   1e09c:	68bb      	ldr	r3, [r7, #8]
   1e09e:	61fb      	str	r3, [r7, #28]
   1e0a0:	e029      	b.n	1e0f6 <coap_handle_request+0x7e>
		coap_method_t method;
		u8_t code;

		if (!uri_path_eq(cpkt, resource->path, options, opt_num)) {
   1e0a2:	69fb      	ldr	r3, [r7, #28]
   1e0a4:	6959      	ldr	r1, [r3, #20]
   1e0a6:	78fb      	ldrb	r3, [r7, #3]
   1e0a8:	687a      	ldr	r2, [r7, #4]
   1e0aa:	68f8      	ldr	r0, [r7, #12]
   1e0ac:	f7ff ff61 	bl	1df72 <uri_path_eq>
   1e0b0:	4603      	mov	r3, r0
   1e0b2:	f083 0301 	eor.w	r3, r3, #1
   1e0b6:	b2db      	uxtb	r3, r3
   1e0b8:	2b00      	cmp	r3, #0
   1e0ba:	d003      	beq.n	1e0c4 <coap_handle_request+0x4c>
	for (resource = resources; resource && resource->path; resource++) {
   1e0bc:	69fb      	ldr	r3, [r7, #28]
   1e0be:	3328      	adds	r3, #40	; 0x28
   1e0c0:	61fb      	str	r3, [r7, #28]
   1e0c2:	e018      	b.n	1e0f6 <coap_handle_request+0x7e>
			continue;
		}

		code = coap_header_get_code(cpkt);
   1e0c4:	68f8      	ldr	r0, [r7, #12]
   1e0c6:	f7ff fed1 	bl	1de6c <coap_header_get_code>
   1e0ca:	4603      	mov	r3, r0
   1e0cc:	76fb      	strb	r3, [r7, #27]
		method = method_from_code(resource, code);
   1e0ce:	7efb      	ldrb	r3, [r7, #27]
   1e0d0:	4619      	mov	r1, r3
   1e0d2:	69f8      	ldr	r0, [r7, #28]
   1e0d4:	f7f0 f93e 	bl	e354 <method_from_code>
   1e0d8:	6178      	str	r0, [r7, #20]
		if (!method) {
   1e0da:	697b      	ldr	r3, [r7, #20]
   1e0dc:	2b00      	cmp	r3, #0
   1e0de:	d102      	bne.n	1e0e6 <coap_handle_request+0x6e>
			return -EPERM;
   1e0e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e0e4:	e014      	b.n	1e110 <coap_handle_request+0x98>
		}

		return method(resource, cpkt, addr, addr_len);
   1e0e6:	697c      	ldr	r4, [r7, #20]
   1e0e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1e0ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1e0ec:	68f9      	ldr	r1, [r7, #12]
   1e0ee:	69f8      	ldr	r0, [r7, #28]
   1e0f0:	47a0      	blx	r4
   1e0f2:	4603      	mov	r3, r0
   1e0f4:	e00c      	b.n	1e110 <coap_handle_request+0x98>
	for (resource = resources; resource && resource->path; resource++) {
   1e0f6:	69fb      	ldr	r3, [r7, #28]
   1e0f8:	2b00      	cmp	r3, #0
   1e0fa:	d003      	beq.n	1e104 <coap_handle_request+0x8c>
   1e0fc:	69fb      	ldr	r3, [r7, #28]
   1e0fe:	695b      	ldr	r3, [r3, #20]
   1e100:	2b00      	cmp	r3, #0
   1e102:	d1ce      	bne.n	1e0a2 <coap_handle_request+0x2a>
	}

	NET_DBG("%d", __LINE__);
   1e104:	f7ff f83c 	bl	1d180 <_is_user_context>
   1e108:	4603      	mov	r3, r0
   1e10a:	74fb      	strb	r3, [r7, #19]
	return -ENOENT;
   1e10c:	f06f 0301 	mvn.w	r3, #1
}
   1e110:	4618      	mov	r0, r3
   1e112:	3724      	adds	r7, #36	; 0x24
   1e114:	46bd      	mov	sp, r7
   1e116:	bd90      	pop	{r4, r7, pc}

0001e118 <coap_block_transfer_init>:

int coap_block_transfer_init(struct coap_block_context *ctx,
			      enum coap_block_size block_size,
			      size_t total_size)
{
   1e118:	b480      	push	{r7}
   1e11a:	b085      	sub	sp, #20
   1e11c:	af00      	add	r7, sp, #0
   1e11e:	60f8      	str	r0, [r7, #12]
   1e120:	460b      	mov	r3, r1
   1e122:	607a      	str	r2, [r7, #4]
   1e124:	72fb      	strb	r3, [r7, #11]
	ctx->block_size = block_size;
   1e126:	68fb      	ldr	r3, [r7, #12]
   1e128:	7afa      	ldrb	r2, [r7, #11]
   1e12a:	721a      	strb	r2, [r3, #8]
	ctx->total_size = total_size;
   1e12c:	68fb      	ldr	r3, [r7, #12]
   1e12e:	687a      	ldr	r2, [r7, #4]
   1e130:	601a      	str	r2, [r3, #0]
	ctx->current = 0;
   1e132:	68fb      	ldr	r3, [r7, #12]
   1e134:	2200      	movs	r2, #0
   1e136:	605a      	str	r2, [r3, #4]

	return 0;
   1e138:	2300      	movs	r3, #0
}
   1e13a:	4618      	mov	r0, r3
   1e13c:	3714      	adds	r7, #20
   1e13e:	46bd      	mov	sp, r7
   1e140:	bc80      	pop	{r7}
   1e142:	4770      	bx	lr

0001e144 <coap_append_block1_option>:
#define SET_MORE(v, m) ((v) |= (m) ? 0x08 : 0x00)
#define SET_NUM(v, n) ((v) |= ((n) << 4))

int coap_append_block1_option(struct coap_packet *cpkt,
			      struct coap_block_context *ctx)
{
   1e144:	b580      	push	{r7, lr}
   1e146:	b086      	sub	sp, #24
   1e148:	af00      	add	r7, sp, #0
   1e14a:	6078      	str	r0, [r7, #4]
   1e14c:	6039      	str	r1, [r7, #0]
	u16_t bytes = coap_block_size_to_bytes(ctx->block_size);
   1e14e:	683b      	ldr	r3, [r7, #0]
   1e150:	7a1b      	ldrb	r3, [r3, #8]
   1e152:	4618      	mov	r0, r3
   1e154:	f7ff f8b2 	bl	1d2bc <coap_block_size_to_bytes>
   1e158:	4603      	mov	r3, r0
   1e15a:	827b      	strh	r3, [r7, #18]
	unsigned int val = 0U;
   1e15c:	2300      	movs	r3, #0
   1e15e:	617b      	str	r3, [r7, #20]
	int r;

	if (is_request(cpkt)) {
   1e160:	6878      	ldr	r0, [r7, #4]
   1e162:	f7ff ff74 	bl	1e04e <is_request>
   1e166:	4603      	mov	r3, r0
   1e168:	2b00      	cmp	r3, #0
   1e16a:	d01e      	beq.n	1e1aa <coap_append_block1_option+0x66>
		SET_BLOCK_SIZE(val, ctx->block_size);
   1e16c:	683b      	ldr	r3, [r7, #0]
   1e16e:	7a1b      	ldrb	r3, [r3, #8]
   1e170:	f003 0307 	and.w	r3, r3, #7
   1e174:	697a      	ldr	r2, [r7, #20]
   1e176:	4313      	orrs	r3, r2
   1e178:	617b      	str	r3, [r7, #20]
		SET_MORE(val, ctx->current + bytes < ctx->total_size);
   1e17a:	683b      	ldr	r3, [r7, #0]
   1e17c:	685a      	ldr	r2, [r3, #4]
   1e17e:	8a7b      	ldrh	r3, [r7, #18]
   1e180:	441a      	add	r2, r3
   1e182:	683b      	ldr	r3, [r7, #0]
   1e184:	681b      	ldr	r3, [r3, #0]
   1e186:	429a      	cmp	r2, r3
   1e188:	d201      	bcs.n	1e18e <coap_append_block1_option+0x4a>
   1e18a:	2308      	movs	r3, #8
   1e18c:	e000      	b.n	1e190 <coap_append_block1_option+0x4c>
   1e18e:	2300      	movs	r3, #0
   1e190:	697a      	ldr	r2, [r7, #20]
   1e192:	4313      	orrs	r3, r2
   1e194:	617b      	str	r3, [r7, #20]
		SET_NUM(val, ctx->current / bytes);
   1e196:	683b      	ldr	r3, [r7, #0]
   1e198:	685a      	ldr	r2, [r3, #4]
   1e19a:	8a7b      	ldrh	r3, [r7, #18]
   1e19c:	fbb2 f3f3 	udiv	r3, r2, r3
   1e1a0:	011b      	lsls	r3, r3, #4
   1e1a2:	697a      	ldr	r2, [r7, #20]
   1e1a4:	4313      	orrs	r3, r2
   1e1a6:	617b      	str	r3, [r7, #20]
   1e1a8:	e00f      	b.n	1e1ca <coap_append_block1_option+0x86>
	} else {
		SET_BLOCK_SIZE(val, ctx->block_size);
   1e1aa:	683b      	ldr	r3, [r7, #0]
   1e1ac:	7a1b      	ldrb	r3, [r3, #8]
   1e1ae:	f003 0307 	and.w	r3, r3, #7
   1e1b2:	697a      	ldr	r2, [r7, #20]
   1e1b4:	4313      	orrs	r3, r2
   1e1b6:	617b      	str	r3, [r7, #20]
		SET_NUM(val, ctx->current / bytes);
   1e1b8:	683b      	ldr	r3, [r7, #0]
   1e1ba:	685a      	ldr	r2, [r3, #4]
   1e1bc:	8a7b      	ldrh	r3, [r7, #18]
   1e1be:	fbb2 f3f3 	udiv	r3, r2, r3
   1e1c2:	011b      	lsls	r3, r3, #4
   1e1c4:	697a      	ldr	r2, [r7, #20]
   1e1c6:	4313      	orrs	r3, r2
   1e1c8:	617b      	str	r3, [r7, #20]
	}

	r = coap_append_option_int(cpkt, COAP_OPTION_BLOCK1, val);
   1e1ca:	697a      	ldr	r2, [r7, #20]
   1e1cc:	211b      	movs	r1, #27
   1e1ce:	6878      	ldr	r0, [r7, #4]
   1e1d0:	f7f0 f826 	bl	e220 <coap_append_option_int>
   1e1d4:	60f8      	str	r0, [r7, #12]

	return r;
   1e1d6:	68fb      	ldr	r3, [r7, #12]
}
   1e1d8:	4618      	mov	r0, r3
   1e1da:	3718      	adds	r7, #24
   1e1dc:	46bd      	mov	sp, r7
   1e1de:	bd80      	pop	{r7, pc}

0001e1e0 <coap_append_block2_option>:

int coap_append_block2_option(struct coap_packet *cpkt,
			      struct coap_block_context *ctx)
{
   1e1e0:	b580      	push	{r7, lr}
   1e1e2:	b086      	sub	sp, #24
   1e1e4:	af00      	add	r7, sp, #0
   1e1e6:	6078      	str	r0, [r7, #4]
   1e1e8:	6039      	str	r1, [r7, #0]
	int r, val = 0;
   1e1ea:	2300      	movs	r3, #0
   1e1ec:	617b      	str	r3, [r7, #20]
	u16_t bytes = coap_block_size_to_bytes(ctx->block_size);
   1e1ee:	683b      	ldr	r3, [r7, #0]
   1e1f0:	7a1b      	ldrb	r3, [r3, #8]
   1e1f2:	4618      	mov	r0, r3
   1e1f4:	f7ff f862 	bl	1d2bc <coap_block_size_to_bytes>
   1e1f8:	4603      	mov	r3, r0
   1e1fa:	827b      	strh	r3, [r7, #18]

	if (is_request(cpkt)) {
   1e1fc:	6878      	ldr	r0, [r7, #4]
   1e1fe:	f7ff ff26 	bl	1e04e <is_request>
   1e202:	4603      	mov	r3, r0
   1e204:	2b00      	cmp	r3, #0
   1e206:	d010      	beq.n	1e22a <coap_append_block2_option+0x4a>
		SET_BLOCK_SIZE(val, ctx->block_size);
   1e208:	683b      	ldr	r3, [r7, #0]
   1e20a:	7a1b      	ldrb	r3, [r3, #8]
   1e20c:	f003 0307 	and.w	r3, r3, #7
   1e210:	697a      	ldr	r2, [r7, #20]
   1e212:	4313      	orrs	r3, r2
   1e214:	617b      	str	r3, [r7, #20]
		SET_NUM(val, ctx->current / bytes);
   1e216:	683b      	ldr	r3, [r7, #0]
   1e218:	685a      	ldr	r2, [r3, #4]
   1e21a:	8a7b      	ldrh	r3, [r7, #18]
   1e21c:	fbb2 f3f3 	udiv	r3, r2, r3
   1e220:	011a      	lsls	r2, r3, #4
   1e222:	697b      	ldr	r3, [r7, #20]
   1e224:	4313      	orrs	r3, r2
   1e226:	617b      	str	r3, [r7, #20]
   1e228:	e01d      	b.n	1e266 <coap_append_block2_option+0x86>
	} else {
		SET_BLOCK_SIZE(val, ctx->block_size);
   1e22a:	683b      	ldr	r3, [r7, #0]
   1e22c:	7a1b      	ldrb	r3, [r3, #8]
   1e22e:	f003 0307 	and.w	r3, r3, #7
   1e232:	697a      	ldr	r2, [r7, #20]
   1e234:	4313      	orrs	r3, r2
   1e236:	617b      	str	r3, [r7, #20]
		SET_MORE(val, ctx->current + bytes < ctx->total_size);
   1e238:	683b      	ldr	r3, [r7, #0]
   1e23a:	685a      	ldr	r2, [r3, #4]
   1e23c:	8a7b      	ldrh	r3, [r7, #18]
   1e23e:	441a      	add	r2, r3
   1e240:	683b      	ldr	r3, [r7, #0]
   1e242:	681b      	ldr	r3, [r3, #0]
   1e244:	429a      	cmp	r2, r3
   1e246:	d201      	bcs.n	1e24c <coap_append_block2_option+0x6c>
   1e248:	2308      	movs	r3, #8
   1e24a:	e000      	b.n	1e24e <coap_append_block2_option+0x6e>
   1e24c:	2300      	movs	r3, #0
   1e24e:	697a      	ldr	r2, [r7, #20]
   1e250:	4313      	orrs	r3, r2
   1e252:	617b      	str	r3, [r7, #20]
		SET_NUM(val, ctx->current / bytes);
   1e254:	683b      	ldr	r3, [r7, #0]
   1e256:	685a      	ldr	r2, [r3, #4]
   1e258:	8a7b      	ldrh	r3, [r7, #18]
   1e25a:	fbb2 f3f3 	udiv	r3, r2, r3
   1e25e:	011a      	lsls	r2, r3, #4
   1e260:	697b      	ldr	r3, [r7, #20]
   1e262:	4313      	orrs	r3, r2
   1e264:	617b      	str	r3, [r7, #20]
	}

	r = coap_append_option_int(cpkt, COAP_OPTION_BLOCK2, val);
   1e266:	697b      	ldr	r3, [r7, #20]
   1e268:	461a      	mov	r2, r3
   1e26a:	2117      	movs	r1, #23
   1e26c:	6878      	ldr	r0, [r7, #4]
   1e26e:	f7ef ffd7 	bl	e220 <coap_append_option_int>
   1e272:	60f8      	str	r0, [r7, #12]

	return r;
   1e274:	68fb      	ldr	r3, [r7, #12]
}
   1e276:	4618      	mov	r0, r3
   1e278:	3718      	adds	r7, #24
   1e27a:	46bd      	mov	sp, r7
   1e27c:	bd80      	pop	{r7, pc}

0001e27e <get_block_option>:
{
	return coap_append_option_int(cpkt, COAP_OPTION_SIZE2, ctx->total_size);
}

static int get_block_option(const struct coap_packet *cpkt, u16_t code)
{
   1e27e:	b580      	push	{r7, lr}
   1e280:	b088      	sub	sp, #32
   1e282:	af00      	add	r7, sp, #0
   1e284:	6078      	str	r0, [r7, #4]
   1e286:	460b      	mov	r3, r1
   1e288:	807b      	strh	r3, [r7, #2]
	struct coap_option option;
	unsigned int val;
	int count = 1;
   1e28a:	2301      	movs	r3, #1
   1e28c:	61fb      	str	r3, [r7, #28]

	count = coap_find_options(cpkt, code, &option, count);
   1e28e:	69fb      	ldr	r3, [r7, #28]
   1e290:	b29b      	uxth	r3, r3
   1e292:	f107 0208 	add.w	r2, r7, #8
   1e296:	8879      	ldrh	r1, [r7, #2]
   1e298:	6878      	ldr	r0, [r7, #4]
   1e29a:	f7ff fd45 	bl	1dd28 <coap_find_options>
   1e29e:	61f8      	str	r0, [r7, #28]
	if (count <= 0) {
   1e2a0:	69fb      	ldr	r3, [r7, #28]
   1e2a2:	2b00      	cmp	r3, #0
   1e2a4:	dc02      	bgt.n	1e2ac <get_block_option+0x2e>
		return -ENOENT;
   1e2a6:	f06f 0301 	mvn.w	r3, #1
   1e2aa:	e006      	b.n	1e2ba <get_block_option+0x3c>
	}

	val = coap_option_value_to_int(&option);
   1e2ac:	f107 0308 	add.w	r3, r7, #8
   1e2b0:	4618      	mov	r0, r3
   1e2b2:	f7f0 f809 	bl	e2c8 <coap_option_value_to_int>
   1e2b6:	61b8      	str	r0, [r7, #24]

	return val;
   1e2b8:	69bb      	ldr	r3, [r7, #24]
}
   1e2ba:	4618      	mov	r0, r3
   1e2bc:	3720      	adds	r7, #32
   1e2be:	46bd      	mov	sp, r7
   1e2c0:	bd80      	pop	{r7, pc}

0001e2c2 <update_descriptive_block>:

static int update_descriptive_block(struct coap_block_context *ctx,
				    int block, int size)
{
   1e2c2:	b480      	push	{r7}
   1e2c4:	b087      	sub	sp, #28
   1e2c6:	af00      	add	r7, sp, #0
   1e2c8:	60f8      	str	r0, [r7, #12]
   1e2ca:	60b9      	str	r1, [r7, #8]
   1e2cc:	607a      	str	r2, [r7, #4]
	size_t new_current = GET_NUM(block) << (GET_BLOCK_SIZE(block) + 4);
   1e2ce:	68bb      	ldr	r3, [r7, #8]
   1e2d0:	111a      	asrs	r2, r3, #4
   1e2d2:	68bb      	ldr	r3, [r7, #8]
   1e2d4:	f003 0307 	and.w	r3, r3, #7
   1e2d8:	3304      	adds	r3, #4
   1e2da:	fa02 f303 	lsl.w	r3, r2, r3
   1e2de:	617b      	str	r3, [r7, #20]

	if (block == -ENOENT) {
   1e2e0:	68bb      	ldr	r3, [r7, #8]
   1e2e2:	f113 0f02 	cmn.w	r3, #2
   1e2e6:	d101      	bne.n	1e2ec <update_descriptive_block+0x2a>
		return 0;
   1e2e8:	2300      	movs	r3, #0
   1e2ea:	e03e      	b.n	1e36a <update_descriptive_block+0xa8>
	}

	if (size && ctx->total_size && ctx->total_size != size) {
   1e2ec:	687b      	ldr	r3, [r7, #4]
   1e2ee:	2b00      	cmp	r3, #0
   1e2f0:	d00b      	beq.n	1e30a <update_descriptive_block+0x48>
   1e2f2:	68fb      	ldr	r3, [r7, #12]
   1e2f4:	681b      	ldr	r3, [r3, #0]
   1e2f6:	2b00      	cmp	r3, #0
   1e2f8:	d007      	beq.n	1e30a <update_descriptive_block+0x48>
   1e2fa:	68fb      	ldr	r3, [r7, #12]
   1e2fc:	681a      	ldr	r2, [r3, #0]
   1e2fe:	687b      	ldr	r3, [r7, #4]
   1e300:	429a      	cmp	r2, r3
   1e302:	d002      	beq.n	1e30a <update_descriptive_block+0x48>
		return -EINVAL;
   1e304:	f06f 0315 	mvn.w	r3, #21
   1e308:	e02f      	b.n	1e36a <update_descriptive_block+0xa8>
	}

	if (ctx->current > 0 && GET_BLOCK_SIZE(block) > ctx->block_size) {
   1e30a:	68fb      	ldr	r3, [r7, #12]
   1e30c:	685b      	ldr	r3, [r3, #4]
   1e30e:	2b00      	cmp	r3, #0
   1e310:	d009      	beq.n	1e326 <update_descriptive_block+0x64>
   1e312:	68bb      	ldr	r3, [r7, #8]
   1e314:	f003 0307 	and.w	r3, r3, #7
   1e318:	68fa      	ldr	r2, [r7, #12]
   1e31a:	7a12      	ldrb	r2, [r2, #8]
   1e31c:	4293      	cmp	r3, r2
   1e31e:	dd02      	ble.n	1e326 <update_descriptive_block+0x64>
		return -EINVAL;
   1e320:	f06f 0315 	mvn.w	r3, #21
   1e324:	e021      	b.n	1e36a <update_descriptive_block+0xa8>
	}

	if (ctx->total_size && new_current > ctx->total_size) {
   1e326:	68fb      	ldr	r3, [r7, #12]
   1e328:	681b      	ldr	r3, [r3, #0]
   1e32a:	2b00      	cmp	r3, #0
   1e32c:	d007      	beq.n	1e33e <update_descriptive_block+0x7c>
   1e32e:	68fb      	ldr	r3, [r7, #12]
   1e330:	681b      	ldr	r3, [r3, #0]
   1e332:	697a      	ldr	r2, [r7, #20]
   1e334:	429a      	cmp	r2, r3
   1e336:	d902      	bls.n	1e33e <update_descriptive_block+0x7c>
		return -EINVAL;
   1e338:	f06f 0315 	mvn.w	r3, #21
   1e33c:	e015      	b.n	1e36a <update_descriptive_block+0xa8>
	}

	if (size) {
   1e33e:	687b      	ldr	r3, [r7, #4]
   1e340:	2b00      	cmp	r3, #0
   1e342:	d002      	beq.n	1e34a <update_descriptive_block+0x88>
		ctx->total_size = size;
   1e344:	687a      	ldr	r2, [r7, #4]
   1e346:	68fb      	ldr	r3, [r7, #12]
   1e348:	601a      	str	r2, [r3, #0]
	}
	ctx->current = new_current;
   1e34a:	68fb      	ldr	r3, [r7, #12]
   1e34c:	697a      	ldr	r2, [r7, #20]
   1e34e:	605a      	str	r2, [r3, #4]
	ctx->block_size = MIN(GET_BLOCK_SIZE(block), ctx->block_size);
   1e350:	68fb      	ldr	r3, [r7, #12]
   1e352:	7a1b      	ldrb	r3, [r3, #8]
   1e354:	461a      	mov	r2, r3
   1e356:	68bb      	ldr	r3, [r7, #8]
   1e358:	f003 0307 	and.w	r3, r3, #7
   1e35c:	4293      	cmp	r3, r2
   1e35e:	bfa8      	it	ge
   1e360:	4613      	movge	r3, r2
   1e362:	b2da      	uxtb	r2, r3
   1e364:	68fb      	ldr	r3, [r7, #12]
   1e366:	721a      	strb	r2, [r3, #8]

	return 0;
   1e368:	2300      	movs	r3, #0
}
   1e36a:	4618      	mov	r0, r3
   1e36c:	371c      	adds	r7, #28
   1e36e:	46bd      	mov	sp, r7
   1e370:	bc80      	pop	{r7}
   1e372:	4770      	bx	lr

0001e374 <update_control_block1>:

static int update_control_block1(struct coap_block_context *ctx,
				     int block, int size)
{
   1e374:	b480      	push	{r7}
   1e376:	b087      	sub	sp, #28
   1e378:	af00      	add	r7, sp, #0
   1e37a:	60f8      	str	r0, [r7, #12]
   1e37c:	60b9      	str	r1, [r7, #8]
   1e37e:	607a      	str	r2, [r7, #4]
	size_t new_current = GET_NUM(block) << (GET_BLOCK_SIZE(block) + 4);
   1e380:	68bb      	ldr	r3, [r7, #8]
   1e382:	111a      	asrs	r2, r3, #4
   1e384:	68bb      	ldr	r3, [r7, #8]
   1e386:	f003 0307 	and.w	r3, r3, #7
   1e38a:	3304      	adds	r3, #4
   1e38c:	fa02 f303 	lsl.w	r3, r2, r3
   1e390:	617b      	str	r3, [r7, #20]

	if (block == -ENOENT) {
   1e392:	68bb      	ldr	r3, [r7, #8]
   1e394:	f113 0f02 	cmn.w	r3, #2
   1e398:	d101      	bne.n	1e39e <update_control_block1+0x2a>
		return 0;
   1e39a:	2300      	movs	r3, #0
   1e39c:	e01c      	b.n	1e3d8 <update_control_block1+0x64>
	}

	if (new_current != ctx->current) {
   1e39e:	68fb      	ldr	r3, [r7, #12]
   1e3a0:	685b      	ldr	r3, [r3, #4]
   1e3a2:	697a      	ldr	r2, [r7, #20]
   1e3a4:	429a      	cmp	r2, r3
   1e3a6:	d002      	beq.n	1e3ae <update_control_block1+0x3a>
		return -EINVAL;
   1e3a8:	f06f 0315 	mvn.w	r3, #21
   1e3ac:	e014      	b.n	1e3d8 <update_control_block1+0x64>
	}

	if (GET_BLOCK_SIZE(block) > ctx->block_size) {
   1e3ae:	68bb      	ldr	r3, [r7, #8]
   1e3b0:	f003 0307 	and.w	r3, r3, #7
   1e3b4:	68fa      	ldr	r2, [r7, #12]
   1e3b6:	7a12      	ldrb	r2, [r2, #8]
   1e3b8:	4293      	cmp	r3, r2
   1e3ba:	dd02      	ble.n	1e3c2 <update_control_block1+0x4e>
		return -EINVAL;
   1e3bc:	f06f 0315 	mvn.w	r3, #21
   1e3c0:	e00a      	b.n	1e3d8 <update_control_block1+0x64>
	}

	ctx->block_size = GET_BLOCK_SIZE(block);
   1e3c2:	68bb      	ldr	r3, [r7, #8]
   1e3c4:	b2db      	uxtb	r3, r3
   1e3c6:	f003 0307 	and.w	r3, r3, #7
   1e3ca:	b2da      	uxtb	r2, r3
   1e3cc:	68fb      	ldr	r3, [r7, #12]
   1e3ce:	721a      	strb	r2, [r3, #8]
	ctx->total_size = size;
   1e3d0:	687a      	ldr	r2, [r7, #4]
   1e3d2:	68fb      	ldr	r3, [r7, #12]
   1e3d4:	601a      	str	r2, [r3, #0]

	return 0;
   1e3d6:	2300      	movs	r3, #0
}
   1e3d8:	4618      	mov	r0, r3
   1e3da:	371c      	adds	r7, #28
   1e3dc:	46bd      	mov	sp, r7
   1e3de:	bc80      	pop	{r7}
   1e3e0:	4770      	bx	lr

0001e3e2 <update_control_block2>:

static int update_control_block2(struct coap_block_context *ctx,
				 int block, int size)
{
   1e3e2:	b480      	push	{r7}
   1e3e4:	b087      	sub	sp, #28
   1e3e6:	af00      	add	r7, sp, #0
   1e3e8:	60f8      	str	r0, [r7, #12]
   1e3ea:	60b9      	str	r1, [r7, #8]
   1e3ec:	607a      	str	r2, [r7, #4]
	size_t new_current = GET_NUM(block) << (GET_BLOCK_SIZE(block) + 4);
   1e3ee:	68bb      	ldr	r3, [r7, #8]
   1e3f0:	111a      	asrs	r2, r3, #4
   1e3f2:	68bb      	ldr	r3, [r7, #8]
   1e3f4:	f003 0307 	and.w	r3, r3, #7
   1e3f8:	3304      	adds	r3, #4
   1e3fa:	fa02 f303 	lsl.w	r3, r2, r3
   1e3fe:	617b      	str	r3, [r7, #20]

	if (block == -ENOENT) {
   1e400:	68bb      	ldr	r3, [r7, #8]
   1e402:	f113 0f02 	cmn.w	r3, #2
   1e406:	d101      	bne.n	1e40c <update_control_block2+0x2a>
		return 0;
   1e408:	2300      	movs	r3, #0
   1e40a:	e025      	b.n	1e458 <update_control_block2+0x76>
	}

	if (GET_MORE(block)) {
   1e40c:	68bb      	ldr	r3, [r7, #8]
   1e40e:	f003 0308 	and.w	r3, r3, #8
   1e412:	2b00      	cmp	r3, #0
   1e414:	d002      	beq.n	1e41c <update_control_block2+0x3a>
		return -EINVAL;
   1e416:	f06f 0315 	mvn.w	r3, #21
   1e41a:	e01d      	b.n	1e458 <update_control_block2+0x76>
	}

	if (GET_NUM(block) > 0 && GET_BLOCK_SIZE(block) != ctx->block_size) {
   1e41c:	68bb      	ldr	r3, [r7, #8]
   1e41e:	111b      	asrs	r3, r3, #4
   1e420:	2b00      	cmp	r3, #0
   1e422:	dd09      	ble.n	1e438 <update_control_block2+0x56>
   1e424:	68bb      	ldr	r3, [r7, #8]
   1e426:	f003 0307 	and.w	r3, r3, #7
   1e42a:	68fa      	ldr	r2, [r7, #12]
   1e42c:	7a12      	ldrb	r2, [r2, #8]
   1e42e:	4293      	cmp	r3, r2
   1e430:	d002      	beq.n	1e438 <update_control_block2+0x56>
		return -EINVAL;
   1e432:	f06f 0315 	mvn.w	r3, #21
   1e436:	e00f      	b.n	1e458 <update_control_block2+0x76>
	}

	ctx->current = new_current;
   1e438:	68fb      	ldr	r3, [r7, #12]
   1e43a:	697a      	ldr	r2, [r7, #20]
   1e43c:	605a      	str	r2, [r3, #4]
	ctx->block_size = MIN(GET_BLOCK_SIZE(block), ctx->block_size);
   1e43e:	68fb      	ldr	r3, [r7, #12]
   1e440:	7a1b      	ldrb	r3, [r3, #8]
   1e442:	461a      	mov	r2, r3
   1e444:	68bb      	ldr	r3, [r7, #8]
   1e446:	f003 0307 	and.w	r3, r3, #7
   1e44a:	4293      	cmp	r3, r2
   1e44c:	bfa8      	it	ge
   1e44e:	4613      	movge	r3, r2
   1e450:	b2da      	uxtb	r2, r3
   1e452:	68fb      	ldr	r3, [r7, #12]
   1e454:	721a      	strb	r2, [r3, #8]

	return 0;
   1e456:	2300      	movs	r3, #0
}
   1e458:	4618      	mov	r0, r3
   1e45a:	371c      	adds	r7, #28
   1e45c:	46bd      	mov	sp, r7
   1e45e:	bc80      	pop	{r7}
   1e460:	4770      	bx	lr

0001e462 <coap_update_from_block>:

int coap_update_from_block(const struct coap_packet *cpkt,
			   struct coap_block_context *ctx)
{
   1e462:	b580      	push	{r7, lr}
   1e464:	b088      	sub	sp, #32
   1e466:	af00      	add	r7, sp, #0
   1e468:	6078      	str	r0, [r7, #4]
   1e46a:	6039      	str	r1, [r7, #0]
	int r, block1, block2, size1, size2;

	block1 = get_block_option(cpkt, COAP_OPTION_BLOCK1);
   1e46c:	211b      	movs	r1, #27
   1e46e:	6878      	ldr	r0, [r7, #4]
   1e470:	f7ff ff05 	bl	1e27e <get_block_option>
   1e474:	61f8      	str	r0, [r7, #28]
	block2 = get_block_option(cpkt, COAP_OPTION_BLOCK2);
   1e476:	2117      	movs	r1, #23
   1e478:	6878      	ldr	r0, [r7, #4]
   1e47a:	f7ff ff00 	bl	1e27e <get_block_option>
   1e47e:	61b8      	str	r0, [r7, #24]
	size1 = get_block_option(cpkt, COAP_OPTION_SIZE1);
   1e480:	213c      	movs	r1, #60	; 0x3c
   1e482:	6878      	ldr	r0, [r7, #4]
   1e484:	f7ff fefb 	bl	1e27e <get_block_option>
   1e488:	6178      	str	r0, [r7, #20]
	size2 = get_block_option(cpkt, COAP_OPTION_SIZE2);
   1e48a:	211c      	movs	r1, #28
   1e48c:	6878      	ldr	r0, [r7, #4]
   1e48e:	f7ff fef6 	bl	1e27e <get_block_option>
   1e492:	6138      	str	r0, [r7, #16]

	size1 = size1 == -ENOENT ? 0 : size1;
   1e494:	697b      	ldr	r3, [r7, #20]
   1e496:	f113 0f02 	cmn.w	r3, #2
   1e49a:	d001      	beq.n	1e4a0 <coap_update_from_block+0x3e>
   1e49c:	697b      	ldr	r3, [r7, #20]
   1e49e:	e000      	b.n	1e4a2 <coap_update_from_block+0x40>
   1e4a0:	2300      	movs	r3, #0
   1e4a2:	617b      	str	r3, [r7, #20]
	size2 = size2 == -ENOENT ? 0 : size2;
   1e4a4:	693b      	ldr	r3, [r7, #16]
   1e4a6:	f113 0f02 	cmn.w	r3, #2
   1e4aa:	d001      	beq.n	1e4b0 <coap_update_from_block+0x4e>
   1e4ac:	693b      	ldr	r3, [r7, #16]
   1e4ae:	e000      	b.n	1e4b2 <coap_update_from_block+0x50>
   1e4b0:	2300      	movs	r3, #0
   1e4b2:	613b      	str	r3, [r7, #16]

	if (is_request(cpkt)) {
   1e4b4:	6878      	ldr	r0, [r7, #4]
   1e4b6:	f7ff fdca 	bl	1e04e <is_request>
   1e4ba:	4603      	mov	r3, r0
   1e4bc:	2b00      	cmp	r3, #0
   1e4be:	d011      	beq.n	1e4e4 <coap_update_from_block+0x82>
		r = update_control_block2(ctx, block2, size2);
   1e4c0:	693a      	ldr	r2, [r7, #16]
   1e4c2:	69b9      	ldr	r1, [r7, #24]
   1e4c4:	6838      	ldr	r0, [r7, #0]
   1e4c6:	f7ff ff8c 	bl	1e3e2 <update_control_block2>
   1e4ca:	60f8      	str	r0, [r7, #12]
		if (r) {
   1e4cc:	68fb      	ldr	r3, [r7, #12]
   1e4ce:	2b00      	cmp	r3, #0
   1e4d0:	d001      	beq.n	1e4d6 <coap_update_from_block+0x74>
			return r;
   1e4d2:	68fb      	ldr	r3, [r7, #12]
   1e4d4:	e017      	b.n	1e506 <coap_update_from_block+0xa4>
		}

		return update_descriptive_block(ctx, block1, size1);
   1e4d6:	697a      	ldr	r2, [r7, #20]
   1e4d8:	69f9      	ldr	r1, [r7, #28]
   1e4da:	6838      	ldr	r0, [r7, #0]
   1e4dc:	f7ff fef1 	bl	1e2c2 <update_descriptive_block>
   1e4e0:	4603      	mov	r3, r0
   1e4e2:	e010      	b.n	1e506 <coap_update_from_block+0xa4>
	}

	r = update_control_block1(ctx, block1, size1);
   1e4e4:	697a      	ldr	r2, [r7, #20]
   1e4e6:	69f9      	ldr	r1, [r7, #28]
   1e4e8:	6838      	ldr	r0, [r7, #0]
   1e4ea:	f7ff ff43 	bl	1e374 <update_control_block1>
   1e4ee:	60f8      	str	r0, [r7, #12]
	if (r) {
   1e4f0:	68fb      	ldr	r3, [r7, #12]
   1e4f2:	2b00      	cmp	r3, #0
   1e4f4:	d001      	beq.n	1e4fa <coap_update_from_block+0x98>
		return r;
   1e4f6:	68fb      	ldr	r3, [r7, #12]
   1e4f8:	e005      	b.n	1e506 <coap_update_from_block+0xa4>
	}

	return update_descriptive_block(ctx, block2, size2);
   1e4fa:	693a      	ldr	r2, [r7, #16]
   1e4fc:	69b9      	ldr	r1, [r7, #24]
   1e4fe:	6838      	ldr	r0, [r7, #0]
   1e500:	f7ff fedf 	bl	1e2c2 <update_descriptive_block>
   1e504:	4603      	mov	r3, r0
}
   1e506:	4618      	mov	r0, r3
   1e508:	3720      	adds	r7, #32
   1e50a:	46bd      	mov	sp, r7
   1e50c:	bd80      	pop	{r7, pc}

0001e50e <coap_next_block>:

size_t coap_next_block(const struct coap_packet *cpkt,
		       struct coap_block_context *ctx)
{
   1e50e:	b580      	push	{r7, lr}
   1e510:	b084      	sub	sp, #16
   1e512:	af00      	add	r7, sp, #0
   1e514:	6078      	str	r0, [r7, #4]
   1e516:	6039      	str	r1, [r7, #0]
	int block;

	if (is_request(cpkt)) {
   1e518:	6878      	ldr	r0, [r7, #4]
   1e51a:	f7ff fd98 	bl	1e04e <is_request>
   1e51e:	4603      	mov	r3, r0
   1e520:	2b00      	cmp	r3, #0
   1e522:	d005      	beq.n	1e530 <coap_next_block+0x22>
		block = get_block_option(cpkt, COAP_OPTION_BLOCK1);
   1e524:	211b      	movs	r1, #27
   1e526:	6878      	ldr	r0, [r7, #4]
   1e528:	f7ff fea9 	bl	1e27e <get_block_option>
   1e52c:	60f8      	str	r0, [r7, #12]
   1e52e:	e004      	b.n	1e53a <coap_next_block+0x2c>
	} else {
		block = get_block_option(cpkt, COAP_OPTION_BLOCK2);
   1e530:	2117      	movs	r1, #23
   1e532:	6878      	ldr	r0, [r7, #4]
   1e534:	f7ff fea3 	bl	1e27e <get_block_option>
   1e538:	60f8      	str	r0, [r7, #12]
	}

	if (!GET_MORE(block)) {
   1e53a:	68fb      	ldr	r3, [r7, #12]
   1e53c:	f003 0308 	and.w	r3, r3, #8
   1e540:	2b00      	cmp	r3, #0
   1e542:	d101      	bne.n	1e548 <coap_next_block+0x3a>
		return 0;
   1e544:	2300      	movs	r3, #0
   1e546:	e00d      	b.n	1e564 <coap_next_block+0x56>
	}

	ctx->current += coap_block_size_to_bytes(ctx->block_size);
   1e548:	683b      	ldr	r3, [r7, #0]
   1e54a:	7a1b      	ldrb	r3, [r3, #8]
   1e54c:	4618      	mov	r0, r3
   1e54e:	f7fe feb5 	bl	1d2bc <coap_block_size_to_bytes>
   1e552:	4603      	mov	r3, r0
   1e554:	461a      	mov	r2, r3
   1e556:	683b      	ldr	r3, [r7, #0]
   1e558:	685b      	ldr	r3, [r3, #4]
   1e55a:	441a      	add	r2, r3
   1e55c:	683b      	ldr	r3, [r7, #0]
   1e55e:	605a      	str	r2, [r3, #4]

	return ctx->current;
   1e560:	683b      	ldr	r3, [r7, #0]
   1e562:	685b      	ldr	r3, [r3, #4]
}
   1e564:	4618      	mov	r0, r3
   1e566:	3710      	adds	r7, #16
   1e568:	46bd      	mov	sp, r7
   1e56a:	bd80      	pop	{r7, pc}

0001e56c <coap_pending_init>:

int coap_pending_init(struct coap_pending *pending,
		      const struct coap_packet *request,
		      const struct sockaddr *addr)
{
   1e56c:	b580      	push	{r7, lr}
   1e56e:	b084      	sub	sp, #16
   1e570:	af00      	add	r7, sp, #0
   1e572:	60f8      	str	r0, [r7, #12]
   1e574:	60b9      	str	r1, [r7, #8]
   1e576:	607a      	str	r2, [r7, #4]
	memset(pending, 0, sizeof(*pending));
   1e578:	2218      	movs	r2, #24
   1e57a:	2100      	movs	r1, #0
   1e57c:	68f8      	ldr	r0, [r7, #12]
   1e57e:	f7e3 fd9b 	bl	20b8 <memset>

	pending->id = coap_header_get_id(request);
   1e582:	68b8      	ldr	r0, [r7, #8]
   1e584:	f7ff fc9f 	bl	1dec6 <coap_header_get_id>
   1e588:	4603      	mov	r3, r0
   1e58a:	461a      	mov	r2, r3
   1e58c:	68fb      	ldr	r3, [r7, #12]
   1e58e:	819a      	strh	r2, [r3, #12]

	memcpy(&pending->addr, addr, sizeof(*addr));
   1e590:	68fb      	ldr	r3, [r7, #12]
   1e592:	2208      	movs	r2, #8
   1e594:	6879      	ldr	r1, [r7, #4]
   1e596:	4618      	mov	r0, r3
   1e598:	f7e3 fd66 	bl	2068 <memcpy>

	pending->data = request->data;
   1e59c:	68bb      	ldr	r3, [r7, #8]
   1e59e:	681a      	ldr	r2, [r3, #0]
   1e5a0:	68fb      	ldr	r3, [r7, #12]
   1e5a2:	611a      	str	r2, [r3, #16]
	pending->len = request->offset;
   1e5a4:	68bb      	ldr	r3, [r7, #8]
   1e5a6:	889a      	ldrh	r2, [r3, #4]
   1e5a8:	68fb      	ldr	r3, [r7, #12]
   1e5aa:	829a      	strh	r2, [r3, #20]

	return 0;
   1e5ac:	2300      	movs	r3, #0
}
   1e5ae:	4618      	mov	r0, r3
   1e5b0:	3710      	adds	r7, #16
   1e5b2:	46bd      	mov	sp, r7
   1e5b4:	bd80      	pop	{r7, pc}

0001e5b6 <coap_pending_next_unused>:

struct coap_pending *coap_pending_next_unused(
	struct coap_pending *pendings, size_t len)
{
   1e5b6:	b480      	push	{r7}
   1e5b8:	b085      	sub	sp, #20
   1e5ba:	af00      	add	r7, sp, #0
   1e5bc:	6078      	str	r0, [r7, #4]
   1e5be:	6039      	str	r1, [r7, #0]
	struct coap_pending *p;
	size_t i;

	for (i = 0, p = pendings; i < len; i++, p++) {
   1e5c0:	2300      	movs	r3, #0
   1e5c2:	60bb      	str	r3, [r7, #8]
   1e5c4:	687b      	ldr	r3, [r7, #4]
   1e5c6:	60fb      	str	r3, [r7, #12]
   1e5c8:	e00b      	b.n	1e5e2 <coap_pending_next_unused+0x2c>
		if (p->timeout == 0) {
   1e5ca:	68fb      	ldr	r3, [r7, #12]
   1e5cc:	689b      	ldr	r3, [r3, #8]
   1e5ce:	2b00      	cmp	r3, #0
   1e5d0:	d101      	bne.n	1e5d6 <coap_pending_next_unused+0x20>
			return p;
   1e5d2:	68fb      	ldr	r3, [r7, #12]
   1e5d4:	e00a      	b.n	1e5ec <coap_pending_next_unused+0x36>
	for (i = 0, p = pendings; i < len; i++, p++) {
   1e5d6:	68bb      	ldr	r3, [r7, #8]
   1e5d8:	3301      	adds	r3, #1
   1e5da:	60bb      	str	r3, [r7, #8]
   1e5dc:	68fb      	ldr	r3, [r7, #12]
   1e5de:	3318      	adds	r3, #24
   1e5e0:	60fb      	str	r3, [r7, #12]
   1e5e2:	68ba      	ldr	r2, [r7, #8]
   1e5e4:	683b      	ldr	r3, [r7, #0]
   1e5e6:	429a      	cmp	r2, r3
   1e5e8:	d3ef      	bcc.n	1e5ca <coap_pending_next_unused+0x14>
		}
	}

	return NULL;
   1e5ea:	2300      	movs	r3, #0
}
   1e5ec:	4618      	mov	r0, r3
   1e5ee:	3714      	adds	r7, #20
   1e5f0:	46bd      	mov	sp, r7
   1e5f2:	bc80      	pop	{r7}
   1e5f4:	4770      	bx	lr

0001e5f6 <is_addr_unspecified>:

	return NULL;
}

static inline bool is_addr_unspecified(const struct sockaddr *addr)
{
   1e5f6:	b580      	push	{r7, lr}
   1e5f8:	b082      	sub	sp, #8
   1e5fa:	af00      	add	r7, sp, #0
   1e5fc:	6078      	str	r0, [r7, #4]
	if (addr->sa_family == AF_UNSPEC) {
   1e5fe:	687b      	ldr	r3, [r7, #4]
   1e600:	881b      	ldrh	r3, [r3, #0]
   1e602:	2b00      	cmp	r3, #0
   1e604:	d101      	bne.n	1e60a <is_addr_unspecified+0x14>
		return true;
   1e606:	2301      	movs	r3, #1
   1e608:	e01d      	b.n	1e646 <is_addr_unspecified+0x50>
	}

	if (addr->sa_family == AF_INET6) {
   1e60a:	687b      	ldr	r3, [r7, #4]
   1e60c:	881b      	ldrh	r3, [r3, #0]
   1e60e:	2b02      	cmp	r3, #2
   1e610:	d109      	bne.n	1e626 <is_addr_unspecified+0x30>
		return net_ipv6_is_addr_unspecified(
			&(net_sin6(addr)->sin6_addr));
   1e612:	6878      	ldr	r0, [r7, #4]
   1e614:	f7fe fe3e 	bl	1d294 <net_sin6>
   1e618:	4603      	mov	r3, r0
   1e61a:	3304      	adds	r3, #4
		return net_ipv6_is_addr_unspecified(
   1e61c:	4618      	mov	r0, r3
   1e61e:	f7fe fe0f 	bl	1d240 <net_ipv6_is_addr_unspecified>
   1e622:	4603      	mov	r3, r0
   1e624:	e00f      	b.n	1e646 <is_addr_unspecified+0x50>
	} else if (addr->sa_family == AF_INET) {
   1e626:	687b      	ldr	r3, [r7, #4]
   1e628:	881b      	ldrh	r3, [r3, #0]
   1e62a:	2b01      	cmp	r3, #1
   1e62c:	d10a      	bne.n	1e644 <is_addr_unspecified+0x4e>
		return net_sin(addr)->sin_addr.s4_addr32[0] == 0U;
   1e62e:	6878      	ldr	r0, [r7, #4]
   1e630:	f7fe fe3a 	bl	1d2a8 <net_sin>
   1e634:	4603      	mov	r3, r0
   1e636:	685b      	ldr	r3, [r3, #4]
   1e638:	2b00      	cmp	r3, #0
   1e63a:	bf0c      	ite	eq
   1e63c:	2301      	moveq	r3, #1
   1e63e:	2300      	movne	r3, #0
   1e640:	b2db      	uxtb	r3, r3
   1e642:	e000      	b.n	1e646 <is_addr_unspecified+0x50>
	}

	return false;
   1e644:	2300      	movs	r3, #0
}
   1e646:	4618      	mov	r0, r3
   1e648:	3708      	adds	r7, #8
   1e64a:	46bd      	mov	sp, r7
   1e64c:	bd80      	pop	{r7, pc}

0001e64e <coap_observer_next_unused>:

struct coap_observer *coap_observer_next_unused(
	struct coap_observer *observers, size_t len)
{
   1e64e:	b580      	push	{r7, lr}
   1e650:	b084      	sub	sp, #16
   1e652:	af00      	add	r7, sp, #0
   1e654:	6078      	str	r0, [r7, #4]
   1e656:	6039      	str	r1, [r7, #0]
	struct coap_observer *o;
	size_t i;

	for (i = 0, o = observers; i < len; i++, o++) {
   1e658:	2300      	movs	r3, #0
   1e65a:	60bb      	str	r3, [r7, #8]
   1e65c:	687b      	ldr	r3, [r7, #4]
   1e65e:	60fb      	str	r3, [r7, #12]
   1e660:	e00f      	b.n	1e682 <coap_observer_next_unused+0x34>
		if (is_addr_unspecified(&o->addr)) {
   1e662:	68fb      	ldr	r3, [r7, #12]
   1e664:	3304      	adds	r3, #4
   1e666:	4618      	mov	r0, r3
   1e668:	f7ff ffc5 	bl	1e5f6 <is_addr_unspecified>
   1e66c:	4603      	mov	r3, r0
   1e66e:	2b00      	cmp	r3, #0
   1e670:	d001      	beq.n	1e676 <coap_observer_next_unused+0x28>
			return o;
   1e672:	68fb      	ldr	r3, [r7, #12]
   1e674:	e00a      	b.n	1e68c <coap_observer_next_unused+0x3e>
	for (i = 0, o = observers; i < len; i++, o++) {
   1e676:	68bb      	ldr	r3, [r7, #8]
   1e678:	3301      	adds	r3, #1
   1e67a:	60bb      	str	r3, [r7, #8]
   1e67c:	68fb      	ldr	r3, [r7, #12]
   1e67e:	3318      	adds	r3, #24
   1e680:	60fb      	str	r3, [r7, #12]
   1e682:	68ba      	ldr	r2, [r7, #8]
   1e684:	683b      	ldr	r3, [r7, #0]
   1e686:	429a      	cmp	r2, r3
   1e688:	d3eb      	bcc.n	1e662 <coap_observer_next_unused+0x14>
		}
	}

	return NULL;
   1e68a:	2300      	movs	r3, #0
}
   1e68c:	4618      	mov	r0, r3
   1e68e:	3710      	adds	r7, #16
   1e690:	46bd      	mov	sp, r7
   1e692:	bd80      	pop	{r7, pc}

0001e694 <coap_pending_received>:

struct coap_pending *coap_pending_received(
	const struct coap_packet *response,
	struct coap_pending *pendings, size_t len)
{
   1e694:	b580      	push	{r7, lr}
   1e696:	b088      	sub	sp, #32
   1e698:	af00      	add	r7, sp, #0
   1e69a:	60f8      	str	r0, [r7, #12]
   1e69c:	60b9      	str	r1, [r7, #8]
   1e69e:	607a      	str	r2, [r7, #4]
	struct coap_pending *p;
	u16_t resp_id = coap_header_get_id(response);
   1e6a0:	68f8      	ldr	r0, [r7, #12]
   1e6a2:	f7ff fc10 	bl	1dec6 <coap_header_get_id>
   1e6a6:	4603      	mov	r3, r0
   1e6a8:	82fb      	strh	r3, [r7, #22]
	size_t i;

	for (i = 0, p = pendings; i < len; i++, p++) {
   1e6aa:	2300      	movs	r3, #0
   1e6ac:	61bb      	str	r3, [r7, #24]
   1e6ae:	68bb      	ldr	r3, [r7, #8]
   1e6b0:	61fb      	str	r3, [r7, #28]
   1e6b2:	e013      	b.n	1e6dc <coap_pending_received+0x48>
		if (!p->timeout) {
   1e6b4:	69fb      	ldr	r3, [r7, #28]
   1e6b6:	689b      	ldr	r3, [r3, #8]
   1e6b8:	2b00      	cmp	r3, #0
   1e6ba:	d006      	beq.n	1e6ca <coap_pending_received+0x36>
			continue;
		}

		if (resp_id != p->id) {
   1e6bc:	69fb      	ldr	r3, [r7, #28]
   1e6be:	899b      	ldrh	r3, [r3, #12]
   1e6c0:	8afa      	ldrh	r2, [r7, #22]
   1e6c2:	429a      	cmp	r2, r3
   1e6c4:	d103      	bne.n	1e6ce <coap_pending_received+0x3a>
			continue;
		}

		return p;
   1e6c6:	69fb      	ldr	r3, [r7, #28]
   1e6c8:	e00d      	b.n	1e6e6 <coap_pending_received+0x52>
			continue;
   1e6ca:	bf00      	nop
   1e6cc:	e000      	b.n	1e6d0 <coap_pending_received+0x3c>
			continue;
   1e6ce:	bf00      	nop
	for (i = 0, p = pendings; i < len; i++, p++) {
   1e6d0:	69bb      	ldr	r3, [r7, #24]
   1e6d2:	3301      	adds	r3, #1
   1e6d4:	61bb      	str	r3, [r7, #24]
   1e6d6:	69fb      	ldr	r3, [r7, #28]
   1e6d8:	3318      	adds	r3, #24
   1e6da:	61fb      	str	r3, [r7, #28]
   1e6dc:	69ba      	ldr	r2, [r7, #24]
   1e6de:	687b      	ldr	r3, [r7, #4]
   1e6e0:	429a      	cmp	r2, r3
   1e6e2:	d3e7      	bcc.n	1e6b4 <coap_pending_received+0x20>
	}

	return NULL;
   1e6e4:	2300      	movs	r3, #0
}
   1e6e6:	4618      	mov	r0, r3
   1e6e8:	3720      	adds	r7, #32
   1e6ea:	46bd      	mov	sp, r7
   1e6ec:	bd80      	pop	{r7, pc}

0001e6ee <coap_pending_next_to_expire>:

struct coap_pending *coap_pending_next_to_expire(
	struct coap_pending *pendings, size_t len)
{
   1e6ee:	b480      	push	{r7}
   1e6f0:	b087      	sub	sp, #28
   1e6f2:	af00      	add	r7, sp, #0
   1e6f4:	6078      	str	r0, [r7, #4]
   1e6f6:	6039      	str	r1, [r7, #0]
	struct coap_pending *p, *found = NULL;
   1e6f8:	2300      	movs	r3, #0
   1e6fa:	613b      	str	r3, [r7, #16]
	size_t i;

	for (i = 0, p = pendings; i < len; i++, p++) {
   1e6fc:	2300      	movs	r3, #0
   1e6fe:	60fb      	str	r3, [r7, #12]
   1e700:	687b      	ldr	r3, [r7, #4]
   1e702:	617b      	str	r3, [r7, #20]
   1e704:	e014      	b.n	1e730 <coap_pending_next_to_expire+0x42>
		if (p->timeout && (!found || found->timeout < p->timeout)) {
   1e706:	697b      	ldr	r3, [r7, #20]
   1e708:	689b      	ldr	r3, [r3, #8]
   1e70a:	2b00      	cmp	r3, #0
   1e70c:	d00a      	beq.n	1e724 <coap_pending_next_to_expire+0x36>
   1e70e:	693b      	ldr	r3, [r7, #16]
   1e710:	2b00      	cmp	r3, #0
   1e712:	d005      	beq.n	1e720 <coap_pending_next_to_expire+0x32>
   1e714:	693b      	ldr	r3, [r7, #16]
   1e716:	689a      	ldr	r2, [r3, #8]
   1e718:	697b      	ldr	r3, [r7, #20]
   1e71a:	689b      	ldr	r3, [r3, #8]
   1e71c:	429a      	cmp	r2, r3
   1e71e:	da01      	bge.n	1e724 <coap_pending_next_to_expire+0x36>
			found = p;
   1e720:	697b      	ldr	r3, [r7, #20]
   1e722:	613b      	str	r3, [r7, #16]
	for (i = 0, p = pendings; i < len; i++, p++) {
   1e724:	68fb      	ldr	r3, [r7, #12]
   1e726:	3301      	adds	r3, #1
   1e728:	60fb      	str	r3, [r7, #12]
   1e72a:	697b      	ldr	r3, [r7, #20]
   1e72c:	3318      	adds	r3, #24
   1e72e:	617b      	str	r3, [r7, #20]
   1e730:	68fa      	ldr	r2, [r7, #12]
   1e732:	683b      	ldr	r3, [r7, #0]
   1e734:	429a      	cmp	r2, r3
   1e736:	d3e6      	bcc.n	1e706 <coap_pending_next_to_expire+0x18>
		}
	}

	return found;
   1e738:	693b      	ldr	r3, [r7, #16]
}
   1e73a:	4618      	mov	r0, r3
   1e73c:	371c      	adds	r7, #28
   1e73e:	46bd      	mov	sp, r7
   1e740:	bc80      	pop	{r7}
   1e742:	4770      	bx	lr

0001e744 <next_timeout>:
 * Ref: https://tools.ietf.org/html/rfc7252#section-4.8
 */
#define INIT_ACK_TIMEOUT	CONFIG_COAP_INIT_ACK_TIMEOUT_MS

static s32_t next_timeout(s32_t previous)
{
   1e744:	b480      	push	{r7}
   1e746:	b083      	sub	sp, #12
   1e748:	af00      	add	r7, sp, #0
   1e74a:	6078      	str	r0, [r7, #4]
	switch (previous) {
   1e74c:	687b      	ldr	r3, [r7, #4]
   1e74e:	f241 2252 	movw	r2, #4690	; 0x1252
   1e752:	4293      	cmp	r3, r2
   1e754:	d015      	beq.n	1e782 <next_timeout+0x3e>
   1e756:	687b      	ldr	r3, [r7, #4]
   1e758:	f241 2252 	movw	r2, #4690	; 0x1252
   1e75c:	4293      	cmp	r3, r2
   1e75e:	dc05      	bgt.n	1e76c <next_timeout+0x28>
   1e760:	687b      	ldr	r3, [r7, #4]
   1e762:	f640 1229 	movw	r2, #2345	; 0x929
   1e766:	4293      	cmp	r3, r2
   1e768:	d00b      	beq.n	1e782 <next_timeout+0x3e>
   1e76a:	e00f      	b.n	1e78c <next_timeout+0x48>
   1e76c:	687b      	ldr	r3, [r7, #4]
   1e76e:	f242 42a4 	movw	r2, #9380	; 0x24a4
   1e772:	4293      	cmp	r3, r2
   1e774:	d005      	beq.n	1e782 <next_timeout+0x3e>
   1e776:	687b      	ldr	r3, [r7, #4]
   1e778:	f644 1248 	movw	r2, #18760	; 0x4948
   1e77c:	4293      	cmp	r3, r2
   1e77e:	d003      	beq.n	1e788 <next_timeout+0x44>
   1e780:	e004      	b.n	1e78c <next_timeout+0x48>
	case INIT_ACK_TIMEOUT:
	case (INIT_ACK_TIMEOUT * 2):
	case (INIT_ACK_TIMEOUT * 4):
		return previous << 1;
   1e782:	687b      	ldr	r3, [r7, #4]
   1e784:	005b      	lsls	r3, r3, #1
   1e786:	e003      	b.n	1e790 <next_timeout+0x4c>
	case (INIT_ACK_TIMEOUT * 8):
		/* equal value is returned to end retransmit */
		return previous;
   1e788:	687b      	ldr	r3, [r7, #4]
   1e78a:	e001      	b.n	1e790 <next_timeout+0x4c>
	}

	/* initial or unrecognized */
	return INIT_ACK_TIMEOUT;
   1e78c:	f640 1329 	movw	r3, #2345	; 0x929
}
   1e790:	4618      	mov	r0, r3
   1e792:	370c      	adds	r7, #12
   1e794:	46bd      	mov	sp, r7
   1e796:	bc80      	pop	{r7}
   1e798:	4770      	bx	lr

0001e79a <coap_pending_cycle>:

bool coap_pending_cycle(struct coap_pending *pending)
{
   1e79a:	b580      	push	{r7, lr}
   1e79c:	b084      	sub	sp, #16
   1e79e:	af00      	add	r7, sp, #0
   1e7a0:	6078      	str	r0, [r7, #4]
	s32_t old = pending->timeout;
   1e7a2:	687b      	ldr	r3, [r7, #4]
   1e7a4:	689b      	ldr	r3, [r3, #8]
   1e7a6:	60fb      	str	r3, [r7, #12]

	pending->timeout = next_timeout(pending->timeout);
   1e7a8:	687b      	ldr	r3, [r7, #4]
   1e7aa:	689b      	ldr	r3, [r3, #8]
   1e7ac:	4618      	mov	r0, r3
   1e7ae:	f7ff ffc9 	bl	1e744 <next_timeout>
   1e7b2:	4602      	mov	r2, r0
   1e7b4:	687b      	ldr	r3, [r7, #4]
   1e7b6:	609a      	str	r2, [r3, #8]

	return (old != pending->timeout);
   1e7b8:	687b      	ldr	r3, [r7, #4]
   1e7ba:	689b      	ldr	r3, [r3, #8]
   1e7bc:	68fa      	ldr	r2, [r7, #12]
   1e7be:	429a      	cmp	r2, r3
   1e7c0:	bf14      	ite	ne
   1e7c2:	2301      	movne	r3, #1
   1e7c4:	2300      	moveq	r3, #0
   1e7c6:	b2db      	uxtb	r3, r3
}
   1e7c8:	4618      	mov	r0, r3
   1e7ca:	3710      	adds	r7, #16
   1e7cc:	46bd      	mov	sp, r7
   1e7ce:	bd80      	pop	{r7, pc}

0001e7d0 <coap_pending_clear>:

void coap_pending_clear(struct coap_pending *pending)
{
   1e7d0:	b480      	push	{r7}
   1e7d2:	b083      	sub	sp, #12
   1e7d4:	af00      	add	r7, sp, #0
   1e7d6:	6078      	str	r0, [r7, #4]
	pending->timeout = 0;
   1e7d8:	687b      	ldr	r3, [r7, #4]
   1e7da:	2200      	movs	r2, #0
   1e7dc:	609a      	str	r2, [r3, #8]
	pending->data = NULL;
   1e7de:	687b      	ldr	r3, [r7, #4]
   1e7e0:	2200      	movs	r2, #0
   1e7e2:	611a      	str	r2, [r3, #16]
}
   1e7e4:	bf00      	nop
   1e7e6:	370c      	adds	r7, #12
   1e7e8:	46bd      	mov	sp, r7
   1e7ea:	bc80      	pop	{r7}
   1e7ec:	4770      	bx	lr

0001e7ee <get_observe_option>:

static int get_observe_option(const struct coap_packet *cpkt)
{
   1e7ee:	b580      	push	{r7, lr}
   1e7f0:	b088      	sub	sp, #32
   1e7f2:	af00      	add	r7, sp, #0
   1e7f4:	6078      	str	r0, [r7, #4]
	struct coap_option option = {};
   1e7f6:	f107 0308 	add.w	r3, r7, #8
   1e7fa:	2200      	movs	r2, #0
   1e7fc:	601a      	str	r2, [r3, #0]
   1e7fe:	605a      	str	r2, [r3, #4]
   1e800:	609a      	str	r2, [r3, #8]
   1e802:	60da      	str	r2, [r3, #12]
	u16_t count = 1U;
   1e804:	2301      	movs	r3, #1
   1e806:	83fb      	strh	r3, [r7, #30]
	int r;

	r = coap_find_options(cpkt, COAP_OPTION_OBSERVE, &option, count);
   1e808:	8bfb      	ldrh	r3, [r7, #30]
   1e80a:	f107 0208 	add.w	r2, r7, #8
   1e80e:	2106      	movs	r1, #6
   1e810:	6878      	ldr	r0, [r7, #4]
   1e812:	f7ff fa89 	bl	1dd28 <coap_find_options>
   1e816:	61b8      	str	r0, [r7, #24]
	if (r <= 0) {
   1e818:	69bb      	ldr	r3, [r7, #24]
   1e81a:	2b00      	cmp	r3, #0
   1e81c:	dc02      	bgt.n	1e824 <get_observe_option+0x36>
		return -ENOENT;
   1e81e:	f06f 0301 	mvn.w	r3, #1
   1e822:	e005      	b.n	1e830 <get_observe_option+0x42>
	}

	return coap_option_value_to_int(&option);
   1e824:	f107 0308 	add.w	r3, r7, #8
   1e828:	4618      	mov	r0, r3
   1e82a:	f7ef fd4d 	bl	e2c8 <coap_option_value_to_int>
   1e82e:	4603      	mov	r3, r0
}
   1e830:	4618      	mov	r0, r3
   1e832:	3720      	adds	r7, #32
   1e834:	46bd      	mov	sp, r7
   1e836:	bd80      	pop	{r7, pc}

0001e838 <coap_resource_notify>:
{
	(void)memset(reply, 0, sizeof(*reply));
}

int coap_resource_notify(struct coap_resource *resource)
{
   1e838:	b580      	push	{r7, lr}
   1e83a:	b084      	sub	sp, #16
   1e83c:	af00      	add	r7, sp, #0
   1e83e:	6078      	str	r0, [r7, #4]
	struct coap_observer *o;

	if (!resource->notify) {
   1e840:	687b      	ldr	r3, [r7, #4]
   1e842:	691b      	ldr	r3, [r3, #16]
   1e844:	2b00      	cmp	r3, #0
   1e846:	d102      	bne.n	1e84e <coap_resource_notify+0x16>
		return -ENOENT;
   1e848:	f06f 0301 	mvn.w	r3, #1
   1e84c:	e033      	b.n	1e8b6 <coap_resource_notify+0x7e>
	}

	resource->age++;
   1e84e:	687b      	ldr	r3, [r7, #4]
   1e850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e852:	1c5a      	adds	r2, r3, #1
   1e854:	687b      	ldr	r3, [r7, #4]
   1e856:	625a      	str	r2, [r3, #36]	; 0x24

	SYS_SLIST_FOR_EACH_CONTAINER(&resource->observers, o, list) {
   1e858:	687b      	ldr	r3, [r7, #4]
   1e85a:	331c      	adds	r3, #28
   1e85c:	4618      	mov	r0, r3
   1e85e:	f7fe fbd3 	bl	1d008 <sys_slist_peek_head>
   1e862:	4603      	mov	r3, r0
   1e864:	2b00      	cmp	r3, #0
   1e866:	d006      	beq.n	1e876 <coap_resource_notify+0x3e>
   1e868:	687b      	ldr	r3, [r7, #4]
   1e86a:	331c      	adds	r3, #28
   1e86c:	4618      	mov	r0, r3
   1e86e:	f7fe fbcb 	bl	1d008 <sys_slist_peek_head>
   1e872:	4603      	mov	r3, r0
   1e874:	e000      	b.n	1e878 <coap_resource_notify+0x40>
   1e876:	2300      	movs	r3, #0
   1e878:	60fb      	str	r3, [r7, #12]
   1e87a:	e018      	b.n	1e8ae <coap_resource_notify+0x76>
		resource->notify(resource, o);
   1e87c:	687b      	ldr	r3, [r7, #4]
   1e87e:	691b      	ldr	r3, [r3, #16]
   1e880:	68f9      	ldr	r1, [r7, #12]
   1e882:	6878      	ldr	r0, [r7, #4]
   1e884:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER(&resource->observers, o, list) {
   1e886:	68fb      	ldr	r3, [r7, #12]
   1e888:	2b00      	cmp	r3, #0
   1e88a:	d00e      	beq.n	1e8aa <coap_resource_notify+0x72>
   1e88c:	68fb      	ldr	r3, [r7, #12]
   1e88e:	4618      	mov	r0, r3
   1e890:	f7fe fbdc 	bl	1d04c <sys_slist_peek_next>
   1e894:	4603      	mov	r3, r0
   1e896:	2b00      	cmp	r3, #0
   1e898:	d005      	beq.n	1e8a6 <coap_resource_notify+0x6e>
   1e89a:	68fb      	ldr	r3, [r7, #12]
   1e89c:	4618      	mov	r0, r3
   1e89e:	f7fe fbd5 	bl	1d04c <sys_slist_peek_next>
   1e8a2:	4603      	mov	r3, r0
   1e8a4:	e002      	b.n	1e8ac <coap_resource_notify+0x74>
   1e8a6:	2300      	movs	r3, #0
   1e8a8:	e000      	b.n	1e8ac <coap_resource_notify+0x74>
   1e8aa:	2300      	movs	r3, #0
   1e8ac:	60fb      	str	r3, [r7, #12]
   1e8ae:	68fb      	ldr	r3, [r7, #12]
   1e8b0:	2b00      	cmp	r3, #0
   1e8b2:	d1e3      	bne.n	1e87c <coap_resource_notify+0x44>
	}

	return 0;
   1e8b4:	2300      	movs	r3, #0
}
   1e8b6:	4618      	mov	r0, r3
   1e8b8:	3710      	adds	r7, #16
   1e8ba:	46bd      	mov	sp, r7
   1e8bc:	bd80      	pop	{r7, pc}

0001e8be <coap_request_is_observe>:

bool coap_request_is_observe(const struct coap_packet *request)
{
   1e8be:	b580      	push	{r7, lr}
   1e8c0:	b082      	sub	sp, #8
   1e8c2:	af00      	add	r7, sp, #0
   1e8c4:	6078      	str	r0, [r7, #4]
	return get_observe_option(request) == 0;
   1e8c6:	6878      	ldr	r0, [r7, #4]
   1e8c8:	f7ff ff91 	bl	1e7ee <get_observe_option>
   1e8cc:	4603      	mov	r3, r0
   1e8ce:	2b00      	cmp	r3, #0
   1e8d0:	bf0c      	ite	eq
   1e8d2:	2301      	moveq	r3, #1
   1e8d4:	2300      	movne	r3, #0
   1e8d6:	b2db      	uxtb	r3, r3
}
   1e8d8:	4618      	mov	r0, r3
   1e8da:	3708      	adds	r7, #8
   1e8dc:	46bd      	mov	sp, r7
   1e8de:	bd80      	pop	{r7, pc}

0001e8e0 <coap_observer_init>:

void coap_observer_init(struct coap_observer *observer,
			const struct coap_packet *request,
			const struct sockaddr *addr)
{
   1e8e0:	b580      	push	{r7, lr}
   1e8e2:	b088      	sub	sp, #32
   1e8e4:	af00      	add	r7, sp, #0
   1e8e6:	60f8      	str	r0, [r7, #12]
   1e8e8:	60b9      	str	r1, [r7, #8]
   1e8ea:	607a      	str	r2, [r7, #4]
	observer->tkl = coap_header_get_token(request, observer->token);
   1e8ec:	68fb      	ldr	r3, [r7, #12]
   1e8ee:	330c      	adds	r3, #12
   1e8f0:	4619      	mov	r1, r3
   1e8f2:	68b8      	ldr	r0, [r7, #8]
   1e8f4:	f7ff fa96 	bl	1de24 <coap_header_get_token>
   1e8f8:	4603      	mov	r3, r0
   1e8fa:	461a      	mov	r2, r3
   1e8fc:	68fb      	ldr	r3, [r7, #12]
   1e8fe:	751a      	strb	r2, [r3, #20]

	net_ipaddr_copy(&observer->addr, addr);
   1e900:	68fb      	ldr	r3, [r7, #12]
   1e902:	3304      	adds	r3, #4
   1e904:	61fb      	str	r3, [r7, #28]
   1e906:	687b      	ldr	r3, [r7, #4]
   1e908:	61bb      	str	r3, [r7, #24]
   1e90a:	69ba      	ldr	r2, [r7, #24]
   1e90c:	f107 0310 	add.w	r3, r7, #16
   1e910:	6810      	ldr	r0, [r2, #0]
   1e912:	6851      	ldr	r1, [r2, #4]
   1e914:	c303      	stmia	r3!, {r0, r1}
   1e916:	69fb      	ldr	r3, [r7, #28]
   1e918:	461a      	mov	r2, r3
   1e91a:	f107 0310 	add.w	r3, r7, #16
   1e91e:	cb03      	ldmia	r3!, {r0, r1}
   1e920:	6010      	str	r0, [r2, #0]
   1e922:	6051      	str	r1, [r2, #4]
}
   1e924:	bf00      	nop
   1e926:	3720      	adds	r7, #32
   1e928:	46bd      	mov	sp, r7
   1e92a:	bd80      	pop	{r7, pc}

0001e92c <coap_register_observer>:

bool coap_register_observer(struct coap_resource *resource,
			    struct coap_observer *observer)
{
   1e92c:	b580      	push	{r7, lr}
   1e92e:	b084      	sub	sp, #16
   1e930:	af00      	add	r7, sp, #0
   1e932:	6078      	str	r0, [r7, #4]
   1e934:	6039      	str	r1, [r7, #0]
	bool first;

	sys_slist_append(&resource->observers, &observer->list);
   1e936:	687b      	ldr	r3, [r7, #4]
   1e938:	331c      	adds	r3, #28
   1e93a:	683a      	ldr	r2, [r7, #0]
   1e93c:	4611      	mov	r1, r2
   1e93e:	4618      	mov	r0, r3
   1e940:	f7fe fb95 	bl	1d06e <sys_slist_append>

	first = resource->age == 0;
   1e944:	687b      	ldr	r3, [r7, #4]
   1e946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e948:	2b00      	cmp	r3, #0
   1e94a:	bf0c      	ite	eq
   1e94c:	2301      	moveq	r3, #1
   1e94e:	2300      	movne	r3, #0
   1e950:	73fb      	strb	r3, [r7, #15]
	if (first) {
   1e952:	7bfb      	ldrb	r3, [r7, #15]
   1e954:	2b00      	cmp	r3, #0
   1e956:	d002      	beq.n	1e95e <coap_register_observer+0x32>
		resource->age = 2;
   1e958:	687b      	ldr	r3, [r7, #4]
   1e95a:	2202      	movs	r2, #2
   1e95c:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return first;
   1e95e:	7bfb      	ldrb	r3, [r7, #15]
}
   1e960:	4618      	mov	r0, r3
   1e962:	3710      	adds	r7, #16
   1e964:	46bd      	mov	sp, r7
   1e966:	bd80      	pop	{r7, pc}

0001e968 <coap_remove_observer>:

void coap_remove_observer(struct coap_resource *resource,
			  struct coap_observer *observer)
{
   1e968:	b580      	push	{r7, lr}
   1e96a:	b082      	sub	sp, #8
   1e96c:	af00      	add	r7, sp, #0
   1e96e:	6078      	str	r0, [r7, #4]
   1e970:	6039      	str	r1, [r7, #0]
	sys_slist_find_and_remove(&resource->observers, &observer->list);
   1e972:	687b      	ldr	r3, [r7, #4]
   1e974:	331c      	adds	r3, #28
   1e976:	683a      	ldr	r2, [r7, #0]
   1e978:	4611      	mov	r1, r2
   1e97a:	4618      	mov	r0, r3
   1e97c:	f7fe fbdb 	bl	1d136 <sys_slist_find_and_remove>
}
   1e980:	bf00      	nop
   1e982:	3708      	adds	r7, #8
   1e984:	46bd      	mov	sp, r7
   1e986:	bd80      	pop	{r7, pc}

0001e988 <sockaddr_equal>:

static bool sockaddr_equal(const struct sockaddr *a,
			   const struct sockaddr *b)
{
   1e988:	b580      	push	{r7, lr}
   1e98a:	b086      	sub	sp, #24
   1e98c:	af00      	add	r7, sp, #0
   1e98e:	6078      	str	r0, [r7, #4]
   1e990:	6039      	str	r1, [r7, #0]
	/* FIXME: Should we consider ipv6-mapped ipv4 addresses as equal to
	 * ipv4 addresses?
	 */
	if (a->sa_family != b->sa_family) {
   1e992:	687b      	ldr	r3, [r7, #4]
   1e994:	881a      	ldrh	r2, [r3, #0]
   1e996:	683b      	ldr	r3, [r7, #0]
   1e998:	881b      	ldrh	r3, [r3, #0]
   1e99a:	429a      	cmp	r2, r3
   1e99c:	d001      	beq.n	1e9a2 <sockaddr_equal+0x1a>
		return false;
   1e99e:	2300      	movs	r3, #0
   1e9a0:	e03c      	b.n	1ea1c <sockaddr_equal+0x94>
	}

	if (a->sa_family == AF_INET) {
   1e9a2:	687b      	ldr	r3, [r7, #4]
   1e9a4:	881b      	ldrh	r3, [r3, #0]
   1e9a6:	2b01      	cmp	r3, #1
   1e9a8:	d119      	bne.n	1e9de <sockaddr_equal+0x56>
		const struct sockaddr_in *a4 = net_sin(a);
   1e9aa:	6878      	ldr	r0, [r7, #4]
   1e9ac:	f7fe fc7c 	bl	1d2a8 <net_sin>
   1e9b0:	6178      	str	r0, [r7, #20]
		const struct sockaddr_in *b4 = net_sin(b);
   1e9b2:	6838      	ldr	r0, [r7, #0]
   1e9b4:	f7fe fc78 	bl	1d2a8 <net_sin>
   1e9b8:	6138      	str	r0, [r7, #16]

		if (a4->sin_port != b4->sin_port) {
   1e9ba:	697b      	ldr	r3, [r7, #20]
   1e9bc:	885a      	ldrh	r2, [r3, #2]
   1e9be:	693b      	ldr	r3, [r7, #16]
   1e9c0:	885b      	ldrh	r3, [r3, #2]
   1e9c2:	429a      	cmp	r2, r3
   1e9c4:	d001      	beq.n	1e9ca <sockaddr_equal+0x42>
			return false;
   1e9c6:	2300      	movs	r3, #0
   1e9c8:	e028      	b.n	1ea1c <sockaddr_equal+0x94>
		}

		return net_ipv4_addr_cmp(&a4->sin_addr, &b4->sin_addr);
   1e9ca:	697b      	ldr	r3, [r7, #20]
   1e9cc:	1d1a      	adds	r2, r3, #4
   1e9ce:	693b      	ldr	r3, [r7, #16]
   1e9d0:	3304      	adds	r3, #4
   1e9d2:	4619      	mov	r1, r3
   1e9d4:	4610      	mov	r0, r2
   1e9d6:	f7fe fc08 	bl	1d1ea <net_ipv4_addr_cmp>
   1e9da:	4603      	mov	r3, r0
   1e9dc:	e01e      	b.n	1ea1c <sockaddr_equal+0x94>
	}

	if (b->sa_family == AF_INET6) {
   1e9de:	683b      	ldr	r3, [r7, #0]
   1e9e0:	881b      	ldrh	r3, [r3, #0]
   1e9e2:	2b02      	cmp	r3, #2
   1e9e4:	d119      	bne.n	1ea1a <sockaddr_equal+0x92>
		const struct sockaddr_in6 *a6 = net_sin6(a);
   1e9e6:	6878      	ldr	r0, [r7, #4]
   1e9e8:	f7fe fc54 	bl	1d294 <net_sin6>
   1e9ec:	60f8      	str	r0, [r7, #12]
		const struct sockaddr_in6 *b6 = net_sin6(b);
   1e9ee:	6838      	ldr	r0, [r7, #0]
   1e9f0:	f7fe fc50 	bl	1d294 <net_sin6>
   1e9f4:	60b8      	str	r0, [r7, #8]

		if (a6->sin6_port != b6->sin6_port) {
   1e9f6:	68fb      	ldr	r3, [r7, #12]
   1e9f8:	885a      	ldrh	r2, [r3, #2]
   1e9fa:	68bb      	ldr	r3, [r7, #8]
   1e9fc:	885b      	ldrh	r3, [r3, #2]
   1e9fe:	429a      	cmp	r2, r3
   1ea00:	d001      	beq.n	1ea06 <sockaddr_equal+0x7e>
			return false;
   1ea02:	2300      	movs	r3, #0
   1ea04:	e00a      	b.n	1ea1c <sockaddr_equal+0x94>
		}

		return net_ipv6_addr_cmp(&a6->sin6_addr, &b6->sin6_addr);
   1ea06:	68fb      	ldr	r3, [r7, #12]
   1ea08:	1d1a      	adds	r2, r3, #4
   1ea0a:	68bb      	ldr	r3, [r7, #8]
   1ea0c:	3304      	adds	r3, #4
   1ea0e:	4619      	mov	r1, r3
   1ea10:	4610      	mov	r0, r2
   1ea12:	f7fe fc01 	bl	1d218 <net_ipv6_addr_cmp>
   1ea16:	4603      	mov	r3, r0
   1ea18:	e000      	b.n	1ea1c <sockaddr_equal+0x94>
	}

	/* Invalid address family */
	return false;
   1ea1a:	2300      	movs	r3, #0
}
   1ea1c:	4618      	mov	r0, r3
   1ea1e:	3718      	adds	r7, #24
   1ea20:	46bd      	mov	sp, r7
   1ea22:	bd80      	pop	{r7, pc}

0001ea24 <coap_find_observer_by_addr>:

struct coap_observer *coap_find_observer_by_addr(
	struct coap_observer *observers, size_t len,
	const struct sockaddr *addr)
{
   1ea24:	b580      	push	{r7, lr}
   1ea26:	b086      	sub	sp, #24
   1ea28:	af00      	add	r7, sp, #0
   1ea2a:	60f8      	str	r0, [r7, #12]
   1ea2c:	60b9      	str	r1, [r7, #8]
   1ea2e:	607a      	str	r2, [r7, #4]
	size_t i;

	for (i = 0; i < len; i++) {
   1ea30:	2300      	movs	r3, #0
   1ea32:	617b      	str	r3, [r7, #20]
   1ea34:	e016      	b.n	1ea64 <coap_find_observer_by_addr+0x40>
		struct coap_observer *o = &observers[i];
   1ea36:	697a      	ldr	r2, [r7, #20]
   1ea38:	4613      	mov	r3, r2
   1ea3a:	005b      	lsls	r3, r3, #1
   1ea3c:	4413      	add	r3, r2
   1ea3e:	00db      	lsls	r3, r3, #3
   1ea40:	461a      	mov	r2, r3
   1ea42:	68fb      	ldr	r3, [r7, #12]
   1ea44:	4413      	add	r3, r2
   1ea46:	613b      	str	r3, [r7, #16]

		if (sockaddr_equal(&o->addr, addr)) {
   1ea48:	693b      	ldr	r3, [r7, #16]
   1ea4a:	3304      	adds	r3, #4
   1ea4c:	6879      	ldr	r1, [r7, #4]
   1ea4e:	4618      	mov	r0, r3
   1ea50:	f7ff ff9a 	bl	1e988 <sockaddr_equal>
   1ea54:	4603      	mov	r3, r0
   1ea56:	2b00      	cmp	r3, #0
   1ea58:	d001      	beq.n	1ea5e <coap_find_observer_by_addr+0x3a>
			return o;
   1ea5a:	693b      	ldr	r3, [r7, #16]
   1ea5c:	e007      	b.n	1ea6e <coap_find_observer_by_addr+0x4a>
	for (i = 0; i < len; i++) {
   1ea5e:	697b      	ldr	r3, [r7, #20]
   1ea60:	3301      	adds	r3, #1
   1ea62:	617b      	str	r3, [r7, #20]
   1ea64:	697a      	ldr	r2, [r7, #20]
   1ea66:	68bb      	ldr	r3, [r7, #8]
   1ea68:	429a      	cmp	r2, r3
   1ea6a:	d3e4      	bcc.n	1ea36 <coap_find_observer_by_addr+0x12>
		}
	}

	return NULL;
   1ea6c:	2300      	movs	r3, #0
}
   1ea6e:	4618      	mov	r0, r3
   1ea70:	3718      	adds	r7, #24
   1ea72:	46bd      	mov	sp, r7
   1ea74:	bd80      	pop	{r7, pc}

0001ea76 <coap_block_size_to_bytes>:
{
   1ea76:	b480      	push	{r7}
   1ea78:	b083      	sub	sp, #12
   1ea7a:	af00      	add	r7, sp, #0
   1ea7c:	4603      	mov	r3, r0
   1ea7e:	71fb      	strb	r3, [r7, #7]
	return (1 << (block_size + 4));
   1ea80:	79fb      	ldrb	r3, [r7, #7]
   1ea82:	3304      	adds	r3, #4
   1ea84:	2201      	movs	r2, #1
   1ea86:	fa02 f303 	lsl.w	r3, r2, r3
   1ea8a:	b29b      	uxth	r3, r3
}
   1ea8c:	4618      	mov	r0, r3
   1ea8e:	370c      	adds	r7, #12
   1ea90:	46bd      	mov	sp, r7
   1ea92:	bc80      	pop	{r7}
   1ea94:	4770      	bx	lr

0001ea96 <append>:
{
   1ea96:	b580      	push	{r7, lr}
   1ea98:	b084      	sub	sp, #16
   1ea9a:	af00      	add	r7, sp, #0
   1ea9c:	60f8      	str	r0, [r7, #12]
   1ea9e:	60b9      	str	r1, [r7, #8]
   1eaa0:	4613      	mov	r3, r2
   1eaa2:	80fb      	strh	r3, [r7, #6]
	if (!cpkt || !data) {
   1eaa4:	68fb      	ldr	r3, [r7, #12]
   1eaa6:	2b00      	cmp	r3, #0
   1eaa8:	d002      	beq.n	1eab0 <append+0x1a>
   1eaaa:	68bb      	ldr	r3, [r7, #8]
   1eaac:	2b00      	cmp	r3, #0
   1eaae:	d101      	bne.n	1eab4 <append+0x1e>
		return false;
   1eab0:	2300      	movs	r3, #0
   1eab2:	e01c      	b.n	1eaee <append+0x58>
	if (cpkt->max_len - cpkt->offset < len) {
   1eab4:	68fb      	ldr	r3, [r7, #12]
   1eab6:	88db      	ldrh	r3, [r3, #6]
   1eab8:	461a      	mov	r2, r3
   1eaba:	68fb      	ldr	r3, [r7, #12]
   1eabc:	889b      	ldrh	r3, [r3, #4]
   1eabe:	1ad2      	subs	r2, r2, r3
   1eac0:	88fb      	ldrh	r3, [r7, #6]
   1eac2:	429a      	cmp	r2, r3
   1eac4:	da01      	bge.n	1eaca <append+0x34>
		return false;
   1eac6:	2300      	movs	r3, #0
   1eac8:	e011      	b.n	1eaee <append+0x58>
	memcpy(cpkt->data + cpkt->offset, data, len);
   1eaca:	68fb      	ldr	r3, [r7, #12]
   1eacc:	681b      	ldr	r3, [r3, #0]
   1eace:	68fa      	ldr	r2, [r7, #12]
   1ead0:	8892      	ldrh	r2, [r2, #4]
   1ead2:	4413      	add	r3, r2
   1ead4:	88fa      	ldrh	r2, [r7, #6]
   1ead6:	68b9      	ldr	r1, [r7, #8]
   1ead8:	4618      	mov	r0, r3
   1eada:	f7e3 fac5 	bl	2068 <memcpy>
	cpkt->offset += len;
   1eade:	68fb      	ldr	r3, [r7, #12]
   1eae0:	889a      	ldrh	r2, [r3, #4]
   1eae2:	88fb      	ldrh	r3, [r7, #6]
   1eae4:	4413      	add	r3, r2
   1eae6:	b29a      	uxth	r2, r3
   1eae8:	68fb      	ldr	r3, [r7, #12]
   1eaea:	809a      	strh	r2, [r3, #4]
	return true;
   1eaec:	2301      	movs	r3, #1
}
   1eaee:	4618      	mov	r0, r3
   1eaf0:	3710      	adds	r7, #16
   1eaf2:	46bd      	mov	sp, r7
   1eaf4:	bd80      	pop	{r7, pc}

0001eaf6 <match_path_uri>:
{
   1eaf6:	b580      	push	{r7, lr}
   1eaf8:	b08a      	sub	sp, #40	; 0x28
   1eafa:	af00      	add	r7, sp, #0
   1eafc:	60f8      	str	r0, [r7, #12]
   1eafe:	60b9      	str	r1, [r7, #8]
   1eb00:	4613      	mov	r3, r2
   1eb02:	80fb      	strh	r3, [r7, #6]
	const char * const *p = NULL;
   1eb04:	2300      	movs	r3, #0
   1eb06:	627b      	str	r3, [r7, #36]	; 0x24
	if (!path) {
   1eb08:	68fb      	ldr	r3, [r7, #12]
   1eb0a:	2b00      	cmp	r3, #0
   1eb0c:	d101      	bne.n	1eb12 <match_path_uri+0x1c>
		return false;
   1eb0e:	2300      	movs	r3, #0
   1eb10:	e080      	b.n	1ec14 <match_path_uri+0x11e>
	if (len <= 1U || uri[0] != '/') {
   1eb12:	88fb      	ldrh	r3, [r7, #6]
   1eb14:	2b01      	cmp	r3, #1
   1eb16:	d903      	bls.n	1eb20 <match_path_uri+0x2a>
   1eb18:	68bb      	ldr	r3, [r7, #8]
   1eb1a:	781b      	ldrb	r3, [r3, #0]
   1eb1c:	2b2f      	cmp	r3, #47	; 0x2f
   1eb1e:	d001      	beq.n	1eb24 <match_path_uri+0x2e>
		return false;
   1eb20:	2300      	movs	r3, #0
   1eb22:	e077      	b.n	1ec14 <match_path_uri+0x11e>
	p = path;
   1eb24:	68fb      	ldr	r3, [r7, #12]
   1eb26:	627b      	str	r3, [r7, #36]	; 0x24
	plen = *p ? strlen(*p) : 0;
   1eb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eb2a:	681b      	ldr	r3, [r3, #0]
   1eb2c:	2b00      	cmp	r3, #0
   1eb2e:	d006      	beq.n	1eb3e <match_path_uri+0x48>
   1eb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eb32:	681b      	ldr	r3, [r3, #0]
   1eb34:	4618      	mov	r0, r3
   1eb36:	f7e3 fade 	bl	20f6 <strlen>
   1eb3a:	4603      	mov	r3, r0
   1eb3c:	e000      	b.n	1eb40 <match_path_uri+0x4a>
   1eb3e:	2300      	movs	r3, #0
   1eb40:	617b      	str	r3, [r7, #20]
	j = 0;
   1eb42:	2300      	movs	r3, #0
   1eb44:	61fb      	str	r3, [r7, #28]
	if (plen == 0) {
   1eb46:	697b      	ldr	r3, [r7, #20]
   1eb48:	2b00      	cmp	r3, #0
   1eb4a:	d101      	bne.n	1eb50 <match_path_uri+0x5a>
		return false;
   1eb4c:	2300      	movs	r3, #0
   1eb4e:	e061      	b.n	1ec14 <match_path_uri+0x11e>
	for (i = 1; i < len; i++) {
   1eb50:	2301      	movs	r3, #1
   1eb52:	623b      	str	r3, [r7, #32]
   1eb54:	e04f      	b.n	1ebf6 <match_path_uri+0x100>
			plen = strlen(*p);
   1eb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eb58:	681b      	ldr	r3, [r3, #0]
   1eb5a:	4618      	mov	r0, r3
   1eb5c:	f7e3 facb 	bl	20f6 <strlen>
   1eb60:	4603      	mov	r3, r0
   1eb62:	617b      	str	r3, [r7, #20]
			k = i;
   1eb64:	6a3b      	ldr	r3, [r7, #32]
   1eb66:	61bb      	str	r3, [r7, #24]
			for (j = 0; j < plen; j++) {
   1eb68:	2300      	movs	r3, #0
   1eb6a:	61fb      	str	r3, [r7, #28]
   1eb6c:	e01d      	b.n	1ebaa <match_path_uri+0xb4>
				if (uri[k] == '*') {
   1eb6e:	69bb      	ldr	r3, [r7, #24]
   1eb70:	68ba      	ldr	r2, [r7, #8]
   1eb72:	4413      	add	r3, r2
   1eb74:	781b      	ldrb	r3, [r3, #0]
   1eb76:	2b2a      	cmp	r3, #42	; 0x2a
   1eb78:	d106      	bne.n	1eb88 <match_path_uri+0x92>
					if ((k + 1) == len) {
   1eb7a:	69bb      	ldr	r3, [r7, #24]
   1eb7c:	1c5a      	adds	r2, r3, #1
   1eb7e:	88fb      	ldrh	r3, [r7, #6]
   1eb80:	429a      	cmp	r2, r3
   1eb82:	d101      	bne.n	1eb88 <match_path_uri+0x92>
						return true;
   1eb84:	2301      	movs	r3, #1
   1eb86:	e045      	b.n	1ec14 <match_path_uri+0x11e>
				if (uri[k] != (*p)[j]) {
   1eb88:	69bb      	ldr	r3, [r7, #24]
   1eb8a:	68ba      	ldr	r2, [r7, #8]
   1eb8c:	4413      	add	r3, r2
   1eb8e:	781a      	ldrb	r2, [r3, #0]
   1eb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eb92:	6819      	ldr	r1, [r3, #0]
   1eb94:	69fb      	ldr	r3, [r7, #28]
   1eb96:	440b      	add	r3, r1
   1eb98:	781b      	ldrb	r3, [r3, #0]
   1eb9a:	429a      	cmp	r2, r3
   1eb9c:	d11e      	bne.n	1ebdc <match_path_uri+0xe6>
				k++;
   1eb9e:	69bb      	ldr	r3, [r7, #24]
   1eba0:	3301      	adds	r3, #1
   1eba2:	61bb      	str	r3, [r7, #24]
			for (j = 0; j < plen; j++) {
   1eba4:	69fb      	ldr	r3, [r7, #28]
   1eba6:	3301      	adds	r3, #1
   1eba8:	61fb      	str	r3, [r7, #28]
   1ebaa:	69fa      	ldr	r2, [r7, #28]
   1ebac:	697b      	ldr	r3, [r7, #20]
   1ebae:	429a      	cmp	r2, r3
   1ebb0:	dbdd      	blt.n	1eb6e <match_path_uri+0x78>
			if (i == (k - 1) && j == plen) {
   1ebb2:	69bb      	ldr	r3, [r7, #24]
   1ebb4:	3b01      	subs	r3, #1
   1ebb6:	6a3a      	ldr	r2, [r7, #32]
   1ebb8:	429a      	cmp	r2, r3
   1ebba:	d105      	bne.n	1ebc8 <match_path_uri+0xd2>
   1ebbc:	69fa      	ldr	r2, [r7, #28]
   1ebbe:	697b      	ldr	r3, [r7, #20]
   1ebc0:	429a      	cmp	r2, r3
   1ebc2:	d101      	bne.n	1ebc8 <match_path_uri+0xd2>
				return true;
   1ebc4:	2301      	movs	r3, #1
   1ebc6:	e025      	b.n	1ec14 <match_path_uri+0x11e>
			if (k == len && j == plen) {
   1ebc8:	88fb      	ldrh	r3, [r7, #6]
   1ebca:	69ba      	ldr	r2, [r7, #24]
   1ebcc:	429a      	cmp	r2, r3
   1ebce:	d107      	bne.n	1ebe0 <match_path_uri+0xea>
   1ebd0:	69fa      	ldr	r2, [r7, #28]
   1ebd2:	697b      	ldr	r3, [r7, #20]
   1ebd4:	429a      	cmp	r2, r3
   1ebd6:	d103      	bne.n	1ebe0 <match_path_uri+0xea>
				return true;
   1ebd8:	2301      	movs	r3, #1
   1ebda:	e01b      	b.n	1ec14 <match_path_uri+0x11e>
					goto next;
   1ebdc:	bf00      	nop
   1ebde:	e000      	b.n	1ebe2 <match_path_uri+0xec>
next:
   1ebe0:	bf00      	nop
			p++;
   1ebe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ebe4:	3304      	adds	r3, #4
   1ebe6:	627b      	str	r3, [r7, #36]	; 0x24
		while (*p) {
   1ebe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ebea:	681b      	ldr	r3, [r3, #0]
   1ebec:	2b00      	cmp	r3, #0
   1ebee:	d1b2      	bne.n	1eb56 <match_path_uri+0x60>
	for (i = 1; i < len; i++) {
   1ebf0:	6a3b      	ldr	r3, [r7, #32]
   1ebf2:	3301      	adds	r3, #1
   1ebf4:	623b      	str	r3, [r7, #32]
   1ebf6:	88fb      	ldrh	r3, [r7, #6]
   1ebf8:	6a3a      	ldr	r2, [r7, #32]
   1ebfa:	429a      	cmp	r2, r3
   1ebfc:	dbf4      	blt.n	1ebe8 <match_path_uri+0xf2>
	if (i == len && !*p) {
   1ebfe:	88fb      	ldrh	r3, [r7, #6]
   1ec00:	6a3a      	ldr	r2, [r7, #32]
   1ec02:	429a      	cmp	r2, r3
   1ec04:	d105      	bne.n	1ec12 <match_path_uri+0x11c>
   1ec06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ec08:	681b      	ldr	r3, [r3, #0]
   1ec0a:	2b00      	cmp	r3, #0
   1ec0c:	d101      	bne.n	1ec12 <match_path_uri+0x11c>
		return false;
   1ec0e:	2300      	movs	r3, #0
   1ec10:	e000      	b.n	1ec14 <match_path_uri+0x11e>
	return true;
   1ec12:	2301      	movs	r3, #1
}
   1ec14:	4618      	mov	r0, r3
   1ec16:	3728      	adds	r7, #40	; 0x28
   1ec18:	46bd      	mov	sp, r7
   1ec1a:	bd80      	pop	{r7, pc}

0001ec1c <match_attributes>:
{
   1ec1c:	b580      	push	{r7, lr}
   1ec1e:	b084      	sub	sp, #16
   1ec20:	af00      	add	r7, sp, #0
   1ec22:	6078      	str	r0, [r7, #4]
   1ec24:	6039      	str	r1, [r7, #0]
	for (attr = attributes; attr && *attr; attr++) {
   1ec26:	687b      	ldr	r3, [r7, #4]
   1ec28:	60fb      	str	r3, [r7, #12]
   1ec2a:	e01d      	b.n	1ec68 <match_attributes+0x4c>
		u16_t attr_len = strlen(*attr);
   1ec2c:	68fb      	ldr	r3, [r7, #12]
   1ec2e:	681b      	ldr	r3, [r3, #0]
   1ec30:	4618      	mov	r0, r3
   1ec32:	f7e3 fa60 	bl	20f6 <strlen>
   1ec36:	4603      	mov	r3, r0
   1ec38:	817b      	strh	r3, [r7, #10]
		if (query->len != attr_len) {
   1ec3a:	683b      	ldr	r3, [r7, #0]
   1ec3c:	789b      	ldrb	r3, [r3, #2]
   1ec3e:	b29b      	uxth	r3, r3
   1ec40:	897a      	ldrh	r2, [r7, #10]
   1ec42:	429a      	cmp	r2, r3
   1ec44:	d10c      	bne.n	1ec60 <match_attributes+0x44>
		if (!strncmp((char *) query->value, *attr, attr_len)) {
   1ec46:	683b      	ldr	r3, [r7, #0]
   1ec48:	1cd8      	adds	r0, r3, #3
   1ec4a:	68fb      	ldr	r3, [r7, #12]
   1ec4c:	681b      	ldr	r3, [r3, #0]
   1ec4e:	897a      	ldrh	r2, [r7, #10]
   1ec50:	4619      	mov	r1, r3
   1ec52:	f7e3 fa58 	bl	2106 <strncmp>
   1ec56:	4603      	mov	r3, r0
   1ec58:	2b00      	cmp	r3, #0
   1ec5a:	d102      	bne.n	1ec62 <match_attributes+0x46>
			return true;
   1ec5c:	2301      	movs	r3, #1
   1ec5e:	e00b      	b.n	1ec78 <match_attributes+0x5c>
			continue;
   1ec60:	bf00      	nop
	for (attr = attributes; attr && *attr; attr++) {
   1ec62:	68fb      	ldr	r3, [r7, #12]
   1ec64:	3304      	adds	r3, #4
   1ec66:	60fb      	str	r3, [r7, #12]
   1ec68:	68fb      	ldr	r3, [r7, #12]
   1ec6a:	2b00      	cmp	r3, #0
   1ec6c:	d003      	beq.n	1ec76 <match_attributes+0x5a>
   1ec6e:	68fb      	ldr	r3, [r7, #12]
   1ec70:	681b      	ldr	r3, [r3, #0]
   1ec72:	2b00      	cmp	r3, #0
   1ec74:	d1da      	bne.n	1ec2c <match_attributes+0x10>
	return false;
   1ec76:	2300      	movs	r3, #0
}
   1ec78:	4618      	mov	r0, r3
   1ec7a:	3710      	adds	r7, #16
   1ec7c:	46bd      	mov	sp, r7
   1ec7e:	bd80      	pop	{r7, pc}

0001ec80 <default_block_size>:
{
   1ec80:	b480      	push	{r7}
   1ec82:	af00      	add	r7, sp, #0
		return COAP_BLOCK_32;
   1ec84:	2301      	movs	r3, #1
}
   1ec86:	4618      	mov	r0, r3
   1ec88:	46bd      	mov	sp, r7
   1ec8a:	bc80      	pop	{r7}
   1ec8c:	4770      	bx	lr

0001ec8e <append_to_coap_pkt>:
{
   1ec8e:	b580      	push	{r7, lr}
   1ec90:	b086      	sub	sp, #24
   1ec92:	af00      	add	r7, sp, #0
   1ec94:	60f8      	str	r0, [r7, #12]
   1ec96:	60b9      	str	r1, [r7, #8]
   1ec98:	603b      	str	r3, [r7, #0]
   1ec9a:	4613      	mov	r3, r2
   1ec9c:	80fb      	strh	r3, [r7, #6]
	u16_t pos = 0U;
   1ec9e:	2300      	movs	r3, #0
   1eca0:	82fb      	strh	r3, [r7, #22]
	if (!*remaining) {
   1eca2:	683b      	ldr	r3, [r7, #0]
   1eca4:	881b      	ldrh	r3, [r3, #0]
   1eca6:	2b00      	cmp	r3, #0
   1eca8:	d101      	bne.n	1ecae <append_to_coap_pkt+0x20>
		return true;
   1ecaa:	2301      	movs	r3, #1
   1ecac:	e042      	b.n	1ed34 <append_to_coap_pkt+0xa6>
	if (*offset < current) {
   1ecae:	6a3b      	ldr	r3, [r7, #32]
   1ecb0:	681b      	ldr	r3, [r3, #0]
   1ecb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1ecb4:	429a      	cmp	r2, r3
   1ecb6:	d91d      	bls.n	1ecf4 <append_to_coap_pkt+0x66>
		pos = current - *offset;
   1ecb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ecba:	b29a      	uxth	r2, r3
   1ecbc:	6a3b      	ldr	r3, [r7, #32]
   1ecbe:	681b      	ldr	r3, [r3, #0]
   1ecc0:	b29b      	uxth	r3, r3
   1ecc2:	1ad3      	subs	r3, r2, r3
   1ecc4:	82fb      	strh	r3, [r7, #22]
		if (len >= pos) {
   1ecc6:	88fa      	ldrh	r2, [r7, #6]
   1ecc8:	8afb      	ldrh	r3, [r7, #22]
   1ecca:	429a      	cmp	r2, r3
   1eccc:	d30a      	bcc.n	1ece4 <append_to_coap_pkt+0x56>
			len -= pos;
   1ecce:	88fa      	ldrh	r2, [r7, #6]
   1ecd0:	8afb      	ldrh	r3, [r7, #22]
   1ecd2:	1ad3      	subs	r3, r2, r3
   1ecd4:	80fb      	strh	r3, [r7, #6]
			*offset += pos;
   1ecd6:	6a3b      	ldr	r3, [r7, #32]
   1ecd8:	681a      	ldr	r2, [r3, #0]
   1ecda:	8afb      	ldrh	r3, [r7, #22]
   1ecdc:	441a      	add	r2, r3
   1ecde:	6a3b      	ldr	r3, [r7, #32]
   1ece0:	601a      	str	r2, [r3, #0]
   1ece2:	e007      	b.n	1ecf4 <append_to_coap_pkt+0x66>
			*offset += len;
   1ece4:	6a3b      	ldr	r3, [r7, #32]
   1ece6:	681a      	ldr	r2, [r3, #0]
   1ece8:	88fb      	ldrh	r3, [r7, #6]
   1ecea:	441a      	add	r2, r3
   1ecec:	6a3b      	ldr	r3, [r7, #32]
   1ecee:	601a      	str	r2, [r3, #0]
			return true;
   1ecf0:	2301      	movs	r3, #1
   1ecf2:	e01f      	b.n	1ed34 <append_to_coap_pkt+0xa6>
	if (len > *remaining) {
   1ecf4:	683b      	ldr	r3, [r7, #0]
   1ecf6:	881b      	ldrh	r3, [r3, #0]
   1ecf8:	88fa      	ldrh	r2, [r7, #6]
   1ecfa:	429a      	cmp	r2, r3
   1ecfc:	d902      	bls.n	1ed04 <append_to_coap_pkt+0x76>
		len = *remaining;
   1ecfe:	683b      	ldr	r3, [r7, #0]
   1ed00:	881b      	ldrh	r3, [r3, #0]
   1ed02:	80fb      	strh	r3, [r7, #6]
	res = append(response, str + pos, len);
   1ed04:	8afb      	ldrh	r3, [r7, #22]
   1ed06:	68ba      	ldr	r2, [r7, #8]
   1ed08:	4413      	add	r3, r2
   1ed0a:	88fa      	ldrh	r2, [r7, #6]
   1ed0c:	4619      	mov	r1, r3
   1ed0e:	68f8      	ldr	r0, [r7, #12]
   1ed10:	f7ff fec1 	bl	1ea96 <append>
   1ed14:	4603      	mov	r3, r0
   1ed16:	757b      	strb	r3, [r7, #21]
	*remaining -= len;
   1ed18:	683b      	ldr	r3, [r7, #0]
   1ed1a:	881a      	ldrh	r2, [r3, #0]
   1ed1c:	88fb      	ldrh	r3, [r7, #6]
   1ed1e:	1ad3      	subs	r3, r2, r3
   1ed20:	b29a      	uxth	r2, r3
   1ed22:	683b      	ldr	r3, [r7, #0]
   1ed24:	801a      	strh	r2, [r3, #0]
	*offset += len;
   1ed26:	6a3b      	ldr	r3, [r7, #32]
   1ed28:	681a      	ldr	r2, [r3, #0]
   1ed2a:	88fb      	ldrh	r3, [r7, #6]
   1ed2c:	441a      	add	r2, r3
   1ed2e:	6a3b      	ldr	r3, [r7, #32]
   1ed30:	601a      	str	r2, [r3, #0]
	return res;
   1ed32:	7d7b      	ldrb	r3, [r7, #21]
}
   1ed34:	4618      	mov	r0, r3
   1ed36:	3718      	adds	r7, #24
   1ed38:	46bd      	mov	sp, r7
   1ed3a:	bd80      	pop	{r7, pc}

0001ed3c <format_resource>:
{
   1ed3c:	b580      	push	{r7, lr}
   1ed3e:	b08a      	sub	sp, #40	; 0x28
   1ed40:	af02      	add	r7, sp, #8
   1ed42:	60f8      	str	r0, [r7, #12]
   1ed44:	60b9      	str	r1, [r7, #8]
   1ed46:	607a      	str	r2, [r7, #4]
   1ed48:	603b      	str	r3, [r7, #0]
	struct coap_core_metadata *meta = resource->user_data;
   1ed4a:	68fb      	ldr	r3, [r7, #12]
   1ed4c:	699b      	ldr	r3, [r3, #24]
   1ed4e:	61bb      	str	r3, [r7, #24]
	const char * const *attributes = NULL;
   1ed50:	2300      	movs	r3, #0
   1ed52:	61fb      	str	r3, [r7, #28]
	r = format_uri(resource->path, response, remaining,
   1ed54:	68fb      	ldr	r3, [r7, #12]
   1ed56:	6958      	ldr	r0, [r3, #20]
   1ed58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ed5a:	9301      	str	r3, [sp, #4]
   1ed5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ed5e:	9300      	str	r3, [sp, #0]
   1ed60:	683b      	ldr	r3, [r7, #0]
   1ed62:	687a      	ldr	r2, [r7, #4]
   1ed64:	68b9      	ldr	r1, [r7, #8]
   1ed66:	f7ef fb77 	bl	e458 <format_uri>
   1ed6a:	6178      	str	r0, [r7, #20]
	if (r < 0) {
   1ed6c:	697b      	ldr	r3, [r7, #20]
   1ed6e:	2b00      	cmp	r3, #0
   1ed70:	da01      	bge.n	1ed76 <format_resource+0x3a>
		return r;
   1ed72:	697b      	ldr	r3, [r7, #20]
   1ed74:	e01d      	b.n	1edb2 <format_resource+0x76>
	if (!*remaining) {
   1ed76:	687b      	ldr	r3, [r7, #4]
   1ed78:	881b      	ldrh	r3, [r3, #0]
   1ed7a:	2b00      	cmp	r3, #0
   1ed7c:	d104      	bne.n	1ed88 <format_resource+0x4c>
		*more = true;
   1ed7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ed80:	2201      	movs	r2, #1
   1ed82:	701a      	strb	r2, [r3, #0]
		return 0;
   1ed84:	2300      	movs	r3, #0
   1ed86:	e014      	b.n	1edb2 <format_resource+0x76>
	if (meta && meta->attributes) {
   1ed88:	69bb      	ldr	r3, [r7, #24]
   1ed8a:	2b00      	cmp	r3, #0
   1ed8c:	d006      	beq.n	1ed9c <format_resource+0x60>
   1ed8e:	69bb      	ldr	r3, [r7, #24]
   1ed90:	681b      	ldr	r3, [r3, #0]
   1ed92:	2b00      	cmp	r3, #0
   1ed94:	d002      	beq.n	1ed9c <format_resource+0x60>
		attributes = meta->attributes;
   1ed96:	69bb      	ldr	r3, [r7, #24]
   1ed98:	681b      	ldr	r3, [r3, #0]
   1ed9a:	61fb      	str	r3, [r7, #28]
	return format_attributes(attributes, response, remaining, offset,
   1ed9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ed9e:	9301      	str	r3, [sp, #4]
   1eda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1eda2:	9300      	str	r3, [sp, #0]
   1eda4:	683b      	ldr	r3, [r7, #0]
   1eda6:	687a      	ldr	r2, [r7, #4]
   1eda8:	68b9      	ldr	r1, [r7, #8]
   1edaa:	69f8      	ldr	r0, [r7, #28]
   1edac:	f7ef fbfe 	bl	e5ac <format_attributes>
   1edb0:	4603      	mov	r3, r0
}
   1edb2:	4618      	mov	r0, r3
   1edb4:	3720      	adds	r7, #32
   1edb6:	46bd      	mov	sp, r7
   1edb8:	bd80      	pop	{r7, pc}

0001edba <clear_more_flag>:
{
   1edba:	b480      	push	{r7}
   1edbc:	b085      	sub	sp, #20
   1edbe:	af00      	add	r7, sp, #0
   1edc0:	6078      	str	r0, [r7, #4]
	offset = cpkt->hdr_len;
   1edc2:	687b      	ldr	r3, [r7, #4]
   1edc4:	7a1b      	ldrb	r3, [r3, #8]
   1edc6:	81fb      	strh	r3, [r7, #14]
	delta = 0U;
   1edc8:	2300      	movs	r3, #0
   1edca:	737b      	strb	r3, [r7, #13]
		opt = cpkt->data[offset++];
   1edcc:	687b      	ldr	r3, [r7, #4]
   1edce:	681a      	ldr	r2, [r3, #0]
   1edd0:	89fb      	ldrh	r3, [r7, #14]
   1edd2:	1c59      	adds	r1, r3, #1
   1edd4:	81f9      	strh	r1, [r7, #14]
   1edd6:	4413      	add	r3, r2
   1edd8:	781b      	ldrb	r3, [r3, #0]
   1edda:	733b      	strb	r3, [r7, #12]
		delta += ((opt & 0xF0) >> 4);
   1eddc:	7b3b      	ldrb	r3, [r7, #12]
   1edde:	091b      	lsrs	r3, r3, #4
   1ede0:	b2da      	uxtb	r2, r3
   1ede2:	7b7b      	ldrb	r3, [r7, #13]
   1ede4:	4413      	add	r3, r2
   1ede6:	737b      	strb	r3, [r7, #13]
		len = (opt & 0xF);
   1ede8:	7b3b      	ldrb	r3, [r7, #12]
   1edea:	f003 030f 	and.w	r3, r3, #15
   1edee:	72fb      	strb	r3, [r7, #11]
		if (delta == COAP_OPTION_BLOCK2) {
   1edf0:	7b7b      	ldrb	r3, [r7, #13]
   1edf2:	2b17      	cmp	r3, #23
   1edf4:	d005      	beq.n	1ee02 <clear_more_flag+0x48>
		offset += len;
   1edf6:	7afb      	ldrb	r3, [r7, #11]
   1edf8:	b29a      	uxth	r2, r3
   1edfa:	89fb      	ldrh	r3, [r7, #14]
   1edfc:	4413      	add	r3, r2
   1edfe:	81fb      	strh	r3, [r7, #14]
		opt = cpkt->data[offset++];
   1ee00:	e7e4      	b.n	1edcc <clear_more_flag+0x12>
			break;
   1ee02:	bf00      	nop
	if (len > 1) {
   1ee04:	7afb      	ldrb	r3, [r7, #11]
   1ee06:	2b01      	cmp	r3, #1
   1ee08:	d908      	bls.n	1ee1c <clear_more_flag+0x62>
		offset = offset + len - 1;
   1ee0a:	7afb      	ldrb	r3, [r7, #11]
   1ee0c:	b29a      	uxth	r2, r3
   1ee0e:	89fb      	ldrh	r3, [r7, #14]
   1ee10:	4413      	add	r3, r2
   1ee12:	b29b      	uxth	r3, r3
   1ee14:	b21b      	sxth	r3, r3
   1ee16:	3b01      	subs	r3, #1
   1ee18:	b21b      	sxth	r3, r3
   1ee1a:	81fb      	strh	r3, [r7, #14]
	cpkt->data[offset] = cpkt->data[offset] & 0xF7;
   1ee1c:	687b      	ldr	r3, [r7, #4]
   1ee1e:	681a      	ldr	r2, [r3, #0]
   1ee20:	89fb      	ldrh	r3, [r7, #14]
   1ee22:	4413      	add	r3, r2
   1ee24:	781a      	ldrb	r2, [r3, #0]
   1ee26:	687b      	ldr	r3, [r7, #4]
   1ee28:	6819      	ldr	r1, [r3, #0]
   1ee2a:	89fb      	ldrh	r3, [r7, #14]
   1ee2c:	440b      	add	r3, r1
   1ee2e:	f022 0208 	bic.w	r2, r2, #8
   1ee32:	b2d2      	uxtb	r2, r2
   1ee34:	701a      	strb	r2, [r3, #0]
	return 0;
   1ee36:	2300      	movs	r3, #0
}
   1ee38:	4618      	mov	r0, r3
   1ee3a:	3714      	adds	r7, #20
   1ee3c:	46bd      	mov	sp, r7
   1ee3e:	bc80      	pop	{r7}
   1ee40:	4770      	bx	lr

0001ee42 <sys_sflist_peek_head>:
 * @param list A point on the list to peek the first node from
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
   1ee42:	b480      	push	{r7}
   1ee44:	b083      	sub	sp, #12
   1ee46:	af00      	add	r7, sp, #0
   1ee48:	6078      	str	r0, [r7, #4]
	return list->head;
   1ee4a:	687b      	ldr	r3, [r7, #4]
   1ee4c:	681b      	ldr	r3, [r3, #0]
}
   1ee4e:	4618      	mov	r0, r3
   1ee50:	370c      	adds	r7, #12
   1ee52:	46bd      	mov	sp, r7
   1ee54:	bc80      	pop	{r7}
   1ee56:	4770      	bx	lr

0001ee58 <sys_sflist_peek_tail>:
 * @param list A point on the list to peek the last node from
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
   1ee58:	b480      	push	{r7}
   1ee5a:	b083      	sub	sp, #12
   1ee5c:	af00      	add	r7, sp, #0
   1ee5e:	6078      	str	r0, [r7, #4]
	return list->tail;
   1ee60:	687b      	ldr	r3, [r7, #4]
   1ee62:	685b      	ldr	r3, [r3, #4]
}
   1ee64:	4618      	mov	r0, r3
   1ee66:	370c      	adds	r7, #12
   1ee68:	46bd      	mov	sp, r7
   1ee6a:	bc80      	pop	{r7}
   1ee6c:	4770      	bx	lr

0001ee6e <_is_user_context>:
{
   1ee6e:	b480      	push	{r7}
   1ee70:	af00      	add	r7, sp, #0
	return false;
   1ee72:	2300      	movs	r3, #0
}
   1ee74:	4618      	mov	r0, r3
   1ee76:	46bd      	mov	sp, r7
   1ee78:	bc80      	pop	{r7}
   1ee7a:	4770      	bx	lr

0001ee7c <z_impl_k_queue_peek_head>:
{
   1ee7c:	b580      	push	{r7, lr}
   1ee7e:	b082      	sub	sp, #8
   1ee80:	af00      	add	r7, sp, #0
   1ee82:	6078      	str	r0, [r7, #4]
	return z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   1ee84:	687b      	ldr	r3, [r7, #4]
   1ee86:	4618      	mov	r0, r3
   1ee88:	f7ff ffdb 	bl	1ee42 <sys_sflist_peek_head>
   1ee8c:	4603      	mov	r3, r0
   1ee8e:	2100      	movs	r1, #0
   1ee90:	4618      	mov	r0, r3
   1ee92:	f00b fba8 	bl	2a5e6 <z_queue_node_peek>
   1ee96:	4603      	mov	r3, r0
}
   1ee98:	4618      	mov	r0, r3
   1ee9a:	3708      	adds	r7, #8
   1ee9c:	46bd      	mov	sp, r7
   1ee9e:	bd80      	pop	{r7, pc}

0001eea0 <z_impl_k_queue_peek_tail>:
{
   1eea0:	b580      	push	{r7, lr}
   1eea2:	b082      	sub	sp, #8
   1eea4:	af00      	add	r7, sp, #0
   1eea6:	6078      	str	r0, [r7, #4]
	return z_queue_node_peek(sys_sflist_peek_tail(&queue->data_q), false);
   1eea8:	687b      	ldr	r3, [r7, #4]
   1eeaa:	4618      	mov	r0, r3
   1eeac:	f7ff ffd4 	bl	1ee58 <sys_sflist_peek_tail>
   1eeb0:	4603      	mov	r3, r0
   1eeb2:	2100      	movs	r1, #0
   1eeb4:	4618      	mov	r0, r3
   1eeb6:	f00b fb96 	bl	2a5e6 <z_queue_node_peek>
   1eeba:	4603      	mov	r3, r0
}
   1eebc:	4618      	mov	r0, r3
   1eebe:	3708      	adds	r7, #8
   1eec0:	46bd      	mov	sp, r7
   1eec2:	bd80      	pop	{r7, pc}

0001eec4 <k_queue_init>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
   1eec4:	b580      	push	{r7, lr}
   1eec6:	b082      	sub	sp, #8
   1eec8:	af00      	add	r7, sp, #0
   1eeca:	6078      	str	r0, [r7, #4]
   1eecc:	6878      	ldr	r0, [r7, #4]
   1eece:	f00b fbae 	bl	2a62e <z_impl_k_queue_init>
   1eed2:	bf00      	nop
   1eed4:	3708      	adds	r7, #8
   1eed6:	46bd      	mov	sp, r7
   1eed8:	bd80      	pop	{r7, pc}

0001eeda <k_queue_cancel_wait>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_CANCEL_WAIT, k_queue_cancel_wait, struct k_queue *, queue)
   1eeda:	b580      	push	{r7, lr}
   1eedc:	b082      	sub	sp, #8
   1eede:	af00      	add	r7, sp, #0
   1eee0:	6078      	str	r0, [r7, #4]
   1eee2:	6878      	ldr	r0, [r7, #4]
   1eee4:	f00b fbcb 	bl	2a67e <z_impl_k_queue_cancel_wait>
   1eee8:	bf00      	nop
   1eeea:	3708      	adds	r7, #8
   1eeec:	46bd      	mov	sp, r7
   1eeee:	bd80      	pop	{r7, pc}

0001eef0 <k_queue_get>:
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   1eef0:	b580      	push	{r7, lr}
   1eef2:	b082      	sub	sp, #8
   1eef4:	af00      	add	r7, sp, #0
   1eef6:	6078      	str	r0, [r7, #4]
   1eef8:	6039      	str	r1, [r7, #0]
   1eefa:	6839      	ldr	r1, [r7, #0]
   1eefc:	6878      	ldr	r0, [r7, #4]
   1eefe:	f00b fccd 	bl	2a89c <z_impl_k_queue_get>
   1ef02:	4603      	mov	r3, r0
   1ef04:	4618      	mov	r0, r3
   1ef06:	3708      	adds	r7, #8
   1ef08:	46bd      	mov	sp, r7
   1ef0a:	bd80      	pop	{r7, pc}

0001ef0c <k_queue_peek_head>:
K_SYSCALL_DECLARE1(K_SYSCALL_K_QUEUE_PEEK_HEAD, k_queue_peek_head, void *, struct k_queue *, queue)
   1ef0c:	b580      	push	{r7, lr}
   1ef0e:	b082      	sub	sp, #8
   1ef10:	af00      	add	r7, sp, #0
   1ef12:	6078      	str	r0, [r7, #4]
   1ef14:	6878      	ldr	r0, [r7, #4]
   1ef16:	f7ff ffb1 	bl	1ee7c <z_impl_k_queue_peek_head>
   1ef1a:	4603      	mov	r3, r0
   1ef1c:	4618      	mov	r0, r3
   1ef1e:	3708      	adds	r7, #8
   1ef20:	46bd      	mov	sp, r7
   1ef22:	bd80      	pop	{r7, pc}

0001ef24 <k_queue_peek_tail>:
K_SYSCALL_DECLARE1(K_SYSCALL_K_QUEUE_PEEK_TAIL, k_queue_peek_tail, void *, struct k_queue *, queue)
   1ef24:	b580      	push	{r7, lr}
   1ef26:	b082      	sub	sp, #8
   1ef28:	af00      	add	r7, sp, #0
   1ef2a:	6078      	str	r0, [r7, #4]
   1ef2c:	6878      	ldr	r0, [r7, #4]
   1ef2e:	f7ff ffb7 	bl	1eea0 <z_impl_k_queue_peek_tail>
   1ef32:	4603      	mov	r3, r0
   1ef34:	4618      	mov	r0, r3
   1ef36:	3708      	adds	r7, #8
   1ef38:	46bd      	mov	sp, r7
   1ef3a:	bd80      	pop	{r7, pc}

0001ef3c <k_poll>:

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout)

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout)

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
   1ef3c:	b580      	push	{r7, lr}
   1ef3e:	b084      	sub	sp, #16
   1ef40:	af00      	add	r7, sp, #0
   1ef42:	60f8      	str	r0, [r7, #12]
   1ef44:	60b9      	str	r1, [r7, #8]
   1ef46:	607a      	str	r2, [r7, #4]
   1ef48:	687a      	ldr	r2, [r7, #4]
   1ef4a:	68b9      	ldr	r1, [r7, #8]
   1ef4c:	68f8      	ldr	r0, [r7, #12]
   1ef4e:	f7f9 fd87 	bl	18a60 <z_impl_k_poll>
   1ef52:	4603      	mov	r3, r0
   1ef54:	4618      	mov	r0, r3
   1ef56:	3710      	adds	r7, #16
   1ef58:	46bd      	mov	sp, r7
   1ef5a:	bd80      	pop	{r7, pc}

0001ef5c <net_sin>:
{
   1ef5c:	b480      	push	{r7}
   1ef5e:	b083      	sub	sp, #12
   1ef60:	af00      	add	r7, sp, #0
   1ef62:	6078      	str	r0, [r7, #4]
	return (struct sockaddr_in *)addr;
   1ef64:	687b      	ldr	r3, [r7, #4]
}
   1ef66:	4618      	mov	r0, r3
   1ef68:	370c      	adds	r7, #12
   1ef6a:	46bd      	mov	sp, r7
   1ef6c:	bc80      	pop	{r7}
   1ef6e:	4770      	bx	lr

0001ef70 <net_context_is_used>:
		u8_t ipv4_ttl;
	};
};

static inline bool net_context_is_used(struct net_context *context)
{
   1ef70:	b480      	push	{r7}
   1ef72:	b083      	sub	sp, #12
   1ef74:	af00      	add	r7, sp, #0
   1ef76:	6078      	str	r0, [r7, #4]
	NET_ASSERT(context);

	return context->flags & NET_CONTEXT_IN_USE;
   1ef78:	687b      	ldr	r3, [r7, #4]
   1ef7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
   1ef7e:	f003 0301 	and.w	r3, r3, #1
   1ef82:	2b00      	cmp	r3, #0
   1ef84:	bf14      	ite	ne
   1ef86:	2301      	movne	r3, #1
   1ef88:	2300      	moveq	r3, #0
   1ef8a:	b2db      	uxtb	r3, r3
}
   1ef8c:	4618      	mov	r0, r3
   1ef8e:	370c      	adds	r7, #12
   1ef90:	46bd      	mov	sp, r7
   1ef92:	bc80      	pop	{r7}
   1ef94:	4770      	bx	lr

0001ef96 <net_context_get_state>:
 *
 * @return Network state.
 */
static inline
enum net_context_state net_context_get_state(struct net_context *context)
{
   1ef96:	b480      	push	{r7}
   1ef98:	b083      	sub	sp, #12
   1ef9a:	af00      	add	r7, sp, #0
   1ef9c:	6078      	str	r0, [r7, #4]
	NET_ASSERT(context);

	return (enum net_context_state)
		((context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1ef9e:	687b      	ldr	r3, [r7, #4]
   1efa0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
   1efa4:	085b      	lsrs	r3, r3, #1
   1efa6:	b29b      	uxth	r3, r3
   1efa8:	b2db      	uxtb	r3, r3
	return (enum net_context_state)
   1efaa:	f003 0303 	and.w	r3, r3, #3
   1efae:	b2db      	uxtb	r3, r3
		NET_CONTEXT_STATE_MASK);
}
   1efb0:	4618      	mov	r0, r3
   1efb2:	370c      	adds	r7, #12
   1efb4:	46bd      	mov	sp, r7
   1efb6:	bc80      	pop	{r7}
   1efb8:	4770      	bx	lr

0001efba <net_context_set_state>:
 * @param context Network context.
 * @param state New network context state.
 */
static inline void net_context_set_state(struct net_context *context,
					 enum net_context_state state)
{
   1efba:	b480      	push	{r7}
   1efbc:	b083      	sub	sp, #12
   1efbe:	af00      	add	r7, sp, #0
   1efc0:	6078      	str	r0, [r7, #4]
   1efc2:	460b      	mov	r3, r1
   1efc4:	70fb      	strb	r3, [r7, #3]
	NET_ASSERT(context);

	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1efc6:	687b      	ldr	r3, [r7, #4]
   1efc8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
   1efcc:	f023 0306 	bic.w	r3, r3, #6
   1efd0:	b29a      	uxth	r2, r3
   1efd2:	687b      	ldr	r3, [r7, #4]
   1efd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1efd8:	687b      	ldr	r3, [r7, #4]
   1efda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
   1efde:	b21a      	sxth	r2, r3
   1efe0:	78fb      	ldrb	r3, [r7, #3]
   1efe2:	005b      	lsls	r3, r3, #1
   1efe4:	b21b      	sxth	r3, r3
   1efe6:	f003 0306 	and.w	r3, r3, #6
   1efea:	b21b      	sxth	r3, r3
   1efec:	4313      	orrs	r3, r2
   1efee:	b21b      	sxth	r3, r3
   1eff0:	b29a      	uxth	r2, r3
   1eff2:	687b      	ldr	r3, [r7, #4]
   1eff4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
			   NET_CONTEXT_STATE_SHIFT);
}
   1eff8:	bf00      	nop
   1effa:	370c      	adds	r7, #12
   1effc:	46bd      	mov	sp, r7
   1effe:	bc80      	pop	{r7}
   1f000:	4770      	bx	lr

0001f002 <net_context_get_type>:
 *
 * @return Network context type.
 */
static inline
enum net_sock_type net_context_get_type(struct net_context *context)
{
   1f002:	b480      	push	{r7}
   1f004:	b083      	sub	sp, #12
   1f006:	af00      	add	r7, sp, #0
   1f008:	6078      	str	r0, [r7, #4]
	NET_ASSERT(context);

	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   1f00a:	687b      	ldr	r3, [r7, #4]
   1f00c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
   1f010:	099b      	lsrs	r3, r3, #6
   1f012:	f003 0303 	and.w	r3, r3, #3
   1f016:	b2db      	uxtb	r3, r3
}
   1f018:	4618      	mov	r0, r3
   1f01a:	370c      	adds	r7, #12
   1f01c:	46bd      	mov	sp, r7
   1f01e:	bc80      	pop	{r7}
   1f020:	4770      	bx	lr

0001f022 <net_context_get_ip_proto>:
 * @param context Network context.
 *
 * @return Network context IP protocol.
 */
static inline u16_t net_context_get_ip_proto(struct net_context *context)
{
   1f022:	b480      	push	{r7}
   1f024:	b083      	sub	sp, #12
   1f026:	af00      	add	r7, sp, #0
   1f028:	6078      	str	r0, [r7, #4]
	return context->proto;
   1f02a:	687b      	ldr	r3, [r7, #4]
   1f02c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
}
   1f030:	4618      	mov	r0, r3
   1f032:	370c      	adds	r7, #12
   1f034:	46bd      	mov	sp, r7
   1f036:	bc80      	pop	{r7}
   1f038:	4770      	bx	lr

0001f03a <net_pkt_family>:
	pkt->orig_iface = iface;
#endif
}

static inline u8_t net_pkt_family(struct net_pkt *pkt)
{
   1f03a:	b480      	push	{r7}
   1f03c:	b083      	sub	sp, #12
   1f03e:	af00      	add	r7, sp, #0
   1f040:	6078      	str	r0, [r7, #4]
	return pkt->family;
   1f042:	687b      	ldr	r3, [r7, #4]
   1f044:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
   1f048:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1f04c:	b2db      	uxtb	r3, r3
}
   1f04e:	4618      	mov	r0, r3
   1f050:	370c      	adds	r7, #12
   1f052:	46bd      	mov	sp, r7
   1f054:	bc80      	pop	{r7}
   1f056:	4770      	bx	lr

0001f058 <net_pkt_eof>:
	pkt->pkt_queued = send;
}

#if defined(CONFIG_NET_SOCKETS)
static inline u8_t net_pkt_eof(struct net_pkt *pkt)
{
   1f058:	b480      	push	{r7}
   1f05a:	b083      	sub	sp, #12
   1f05c:	af00      	add	r7, sp, #0
   1f05e:	6078      	str	r0, [r7, #4]
	return pkt->sent_or_eof;
   1f060:	687b      	ldr	r3, [r7, #4]
   1f062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1f066:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1f06a:	b2db      	uxtb	r3, r3
}
   1f06c:	4618      	mov	r0, r3
   1f06e:	370c      	adds	r7, #12
   1f070:	46bd      	mov	sp, r7
   1f072:	bc80      	pop	{r7}
   1f074:	4770      	bx	lr

0001f076 <net_pkt_set_eof>:

static inline void net_pkt_set_eof(struct net_pkt *pkt, bool eof)
{
   1f076:	b480      	push	{r7}
   1f078:	b083      	sub	sp, #12
   1f07a:	af00      	add	r7, sp, #0
   1f07c:	6078      	str	r0, [r7, #4]
   1f07e:	460b      	mov	r3, r1
   1f080:	70fb      	strb	r3, [r7, #3]
	pkt->sent_or_eof = eof;
   1f082:	687a      	ldr	r2, [r7, #4]
   1f084:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
   1f088:	78f9      	ldrb	r1, [r7, #3]
   1f08a:	f361 0341 	bfi	r3, r1, #1, #1
   1f08e:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
}
   1f092:	bf00      	nop
   1f094:	370c      	adds	r7, #12
   1f096:	46bd      	mov	sp, r7
   1f098:	bc80      	pop	{r7}
   1f09a:	4770      	bx	lr

0001f09c <net_pkt_cursor_backup>:
 * @param pkt    The net_pkt whose cursor is going to be backed up
 * @param backup The cursor where to backup net_pkt cursor
 */
static inline void net_pkt_cursor_backup(struct net_pkt *pkt,
					 struct net_pkt_cursor *backup)
{
   1f09c:	b480      	push	{r7}
   1f09e:	b083      	sub	sp, #12
   1f0a0:	af00      	add	r7, sp, #0
   1f0a2:	6078      	str	r0, [r7, #4]
   1f0a4:	6039      	str	r1, [r7, #0]
	backup->buf = pkt->cursor.buf;
   1f0a6:	687b      	ldr	r3, [r7, #4]
   1f0a8:	699a      	ldr	r2, [r3, #24]
   1f0aa:	683b      	ldr	r3, [r7, #0]
   1f0ac:	601a      	str	r2, [r3, #0]
	backup->pos = pkt->cursor.pos;
   1f0ae:	687b      	ldr	r3, [r7, #4]
   1f0b0:	69da      	ldr	r2, [r3, #28]
   1f0b2:	683b      	ldr	r3, [r7, #0]
   1f0b4:	605a      	str	r2, [r3, #4]
}
   1f0b6:	bf00      	nop
   1f0b8:	370c      	adds	r7, #12
   1f0ba:	46bd      	mov	sp, r7
   1f0bc:	bc80      	pop	{r7}
   1f0be:	4770      	bx	lr

0001f0c0 <net_pkt_cursor_restore>:
 * @param pkt    The net_pkt whose cursor is going to be restored
 * @param backup The cursor from where to restore net_pkt cursor
 */
static inline void net_pkt_cursor_restore(struct net_pkt *pkt,
					  struct net_pkt_cursor *backup)
{
   1f0c0:	b480      	push	{r7}
   1f0c2:	b083      	sub	sp, #12
   1f0c4:	af00      	add	r7, sp, #0
   1f0c6:	6078      	str	r0, [r7, #4]
   1f0c8:	6039      	str	r1, [r7, #0]
	pkt->cursor.buf = backup->buf;
   1f0ca:	683b      	ldr	r3, [r7, #0]
   1f0cc:	681a      	ldr	r2, [r3, #0]
   1f0ce:	687b      	ldr	r3, [r7, #4]
   1f0d0:	619a      	str	r2, [r3, #24]
	pkt->cursor.pos = backup->pos;
   1f0d2:	683b      	ldr	r3, [r7, #0]
   1f0d4:	685a      	ldr	r2, [r3, #4]
   1f0d6:	687b      	ldr	r3, [r7, #4]
   1f0d8:	61da      	str	r2, [r3, #28]
}
   1f0da:	bf00      	nop
   1f0dc:	370c      	adds	r7, #12
   1f0de:	46bd      	mov	sp, r7
   1f0e0:	bc80      	pop	{r7}
   1f0e2:	4770      	bx	lr

0001f0e4 <net_pkt_acknowledge_data>:
 * Acknowledge previously contiguous data taken from a network packet
 * Packet needs to be set to overwrite mode.
 */
static inline int net_pkt_acknowledge_data(struct net_pkt *pkt,
					   struct net_pkt_data_access *access)
{
   1f0e4:	b580      	push	{r7, lr}
   1f0e6:	b082      	sub	sp, #8
   1f0e8:	af00      	add	r7, sp, #0
   1f0ea:	6078      	str	r0, [r7, #4]
   1f0ec:	6039      	str	r1, [r7, #0]
	return net_pkt_skip(pkt, access->size);
   1f0ee:	683b      	ldr	r3, [r7, #0]
   1f0f0:	685b      	ldr	r3, [r3, #4]
   1f0f2:	4619      	mov	r1, r3
   1f0f4:	6878      	ldr	r0, [r7, #4]
   1f0f6:	f007 f864 	bl	261c2 <net_pkt_skip>
   1f0fa:	4603      	mov	r3, r0
}
   1f0fc:	4618      	mov	r0, r3
   1f0fe:	3708      	adds	r7, #8
   1f100:	46bd      	mov	sp, r7
   1f102:	bd80      	pop	{r7, pc}

0001f104 <sock_set_flag>:
#define SOCK_EOF 1
#define SOCK_NONBLOCK 2

static inline void sock_set_flag(struct net_context *ctx, uintptr_t mask,
				 uintptr_t flag)
{
   1f104:	b480      	push	{r7}
   1f106:	b087      	sub	sp, #28
   1f108:	af00      	add	r7, sp, #0
   1f10a:	60f8      	str	r0, [r7, #12]
   1f10c:	60b9      	str	r1, [r7, #8]
   1f10e:	607a      	str	r2, [r7, #4]
	uintptr_t val = POINTER_TO_UINT(ctx->socket_data);
   1f110:	68fb      	ldr	r3, [r7, #12]
   1f112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1f114:	617b      	str	r3, [r7, #20]

	val = (val & ~mask) | flag;
   1f116:	68bb      	ldr	r3, [r7, #8]
   1f118:	43da      	mvns	r2, r3
   1f11a:	697b      	ldr	r3, [r7, #20]
   1f11c:	4013      	ands	r3, r2
   1f11e:	687a      	ldr	r2, [r7, #4]
   1f120:	4313      	orrs	r3, r2
   1f122:	617b      	str	r3, [r7, #20]
	(ctx)->socket_data = UINT_TO_POINTER(val);
   1f124:	697a      	ldr	r2, [r7, #20]
   1f126:	68fb      	ldr	r3, [r7, #12]
   1f128:	655a      	str	r2, [r3, #84]	; 0x54
}
   1f12a:	bf00      	nop
   1f12c:	371c      	adds	r7, #28
   1f12e:	46bd      	mov	sp, r7
   1f130:	bc80      	pop	{r7}
   1f132:	4770      	bx	lr

0001f134 <sock_get_flag>:

static inline uintptr_t sock_get_flag(struct net_context *ctx, uintptr_t mask)
{
   1f134:	b480      	push	{r7}
   1f136:	b083      	sub	sp, #12
   1f138:	af00      	add	r7, sp, #0
   1f13a:	6078      	str	r0, [r7, #4]
   1f13c:	6039      	str	r1, [r7, #0]
	return POINTER_TO_UINT(ctx->socket_data) & mask;
   1f13e:	687b      	ldr	r3, [r7, #4]
   1f140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1f142:	461a      	mov	r2, r3
   1f144:	683b      	ldr	r3, [r7, #0]
   1f146:	4013      	ands	r3, r2
}
   1f148:	4618      	mov	r0, r3
   1f14a:	370c      	adds	r7, #12
   1f14c:	46bd      	mov	sp, r7
   1f14e:	bc80      	pop	{r7}
   1f150:	4770      	bx	lr

0001f152 <get_sock_vtable>:
{
   1f152:	b580      	push	{r7, lr}
   1f154:	b082      	sub	sp, #8
   1f156:	af00      	add	r7, sp, #0
   1f158:	6078      	str	r0, [r7, #4]
   1f15a:	6039      	str	r1, [r7, #0]
	return z_get_fd_obj_and_vtable(sock,
   1f15c:	6839      	ldr	r1, [r7, #0]
   1f15e:	6878      	ldr	r0, [r7, #4]
   1f160:	f7eb fe60 	bl	ae24 <z_get_fd_obj_and_vtable>
   1f164:	4603      	mov	r3, r0
}
   1f166:	4618      	mov	r0, r3
   1f168:	3708      	adds	r7, #8
   1f16a:	46bd      	mov	sp, r7
   1f16c:	bd80      	pop	{r7, pc}

0001f16e <k_fifo_wait_non_empty>:
{
   1f16e:	b580      	push	{r7, lr}
   1f170:	b088      	sub	sp, #32
   1f172:	af00      	add	r7, sp, #0
   1f174:	6078      	str	r0, [r7, #4]
   1f176:	6039      	str	r1, [r7, #0]
	struct k_poll_event events[] = {
   1f178:	f107 030c 	add.w	r3, r7, #12
   1f17c:	2200      	movs	r2, #0
   1f17e:	601a      	str	r2, [r3, #0]
   1f180:	605a      	str	r2, [r3, #4]
   1f182:	609a      	str	r2, [r3, #8]
   1f184:	60da      	str	r2, [r3, #12]
   1f186:	611a      	str	r2, [r3, #16]
   1f188:	7e7b      	ldrb	r3, [r7, #25]
   1f18a:	2204      	movs	r2, #4
   1f18c:	f362 0303 	bfi	r3, r2, #0, #4
   1f190:	767b      	strb	r3, [r7, #25]
   1f192:	687b      	ldr	r3, [r7, #4]
   1f194:	61fb      	str	r3, [r7, #28]
	return k_poll(events, ARRAY_SIZE(events), timeout);
   1f196:	f107 030c 	add.w	r3, r7, #12
   1f19a:	683a      	ldr	r2, [r7, #0]
   1f19c:	2101      	movs	r1, #1
   1f19e:	4618      	mov	r0, r3
   1f1a0:	f7ff fecc 	bl	1ef3c <k_poll>
   1f1a4:	4603      	mov	r3, r0
}
   1f1a6:	4618      	mov	r0, r3
   1f1a8:	3720      	adds	r7, #32
   1f1aa:	46bd      	mov	sp, r7
   1f1ac:	bd80      	pop	{r7, pc}

0001f1ae <zsock_flush_queue>:
{
   1f1ae:	b580      	push	{r7, lr}
   1f1b0:	b086      	sub	sp, #24
   1f1b2:	af00      	add	r7, sp, #0
   1f1b4:	6078      	str	r0, [r7, #4]
	bool is_listen = net_context_get_state(ctx) == NET_CONTEXT_LISTENING;
   1f1b6:	6878      	ldr	r0, [r7, #4]
   1f1b8:	f7ff feed 	bl	1ef96 <net_context_get_state>
   1f1bc:	4603      	mov	r3, r0
   1f1be:	2b03      	cmp	r3, #3
   1f1c0:	bf0c      	ite	eq
   1f1c2:	2301      	moveq	r3, #1
   1f1c4:	2300      	movne	r3, #0
   1f1c6:	75bb      	strb	r3, [r7, #22]
	while ((p = k_fifo_get(&ctx->recv_q, K_NO_WAIT)) != NULL) {
   1f1c8:	e011      	b.n	1f1ee <zsock_flush_queue+0x40>
		if (is_listen) {
   1f1ca:	7dbb      	ldrb	r3, [r7, #22]
   1f1cc:	2b00      	cmp	r3, #0
   1f1ce:	d007      	beq.n	1f1e0 <zsock_flush_queue+0x32>
			NET_DBG("discarding ctx %p", p);
   1f1d0:	f7ff fe4d 	bl	1ee6e <_is_user_context>
   1f1d4:	4603      	mov	r3, r0
   1f1d6:	73fb      	strb	r3, [r7, #15]
			net_context_put(p);
   1f1d8:	6938      	ldr	r0, [r7, #16]
   1f1da:	f7f3 ff25 	bl	13028 <net_context_put>
   1f1de:	e006      	b.n	1f1ee <zsock_flush_queue+0x40>
			NET_DBG("discarding pkt %p", p);
   1f1e0:	f7ff fe45 	bl	1ee6e <_is_user_context>
   1f1e4:	4603      	mov	r3, r0
   1f1e6:	75fb      	strb	r3, [r7, #23]
			net_pkt_unref(p);
   1f1e8:	6938      	ldr	r0, [r7, #16]
   1f1ea:	f006 fc0e 	bl	25a0a <net_pkt_unref>
	while ((p = k_fifo_get(&ctx->recv_q, K_NO_WAIT)) != NULL) {
   1f1ee:	687b      	ldr	r3, [r7, #4]
   1f1f0:	3358      	adds	r3, #88	; 0x58
   1f1f2:	2100      	movs	r1, #0
   1f1f4:	4618      	mov	r0, r3
   1f1f6:	f7ff fe7b 	bl	1eef0 <k_queue_get>
   1f1fa:	6138      	str	r0, [r7, #16]
   1f1fc:	693b      	ldr	r3, [r7, #16]
   1f1fe:	2b00      	cmp	r3, #0
   1f200:	d1e3      	bne.n	1f1ca <zsock_flush_queue+0x1c>
	k_fifo_cancel_wait(&ctx->recv_q);
   1f202:	687b      	ldr	r3, [r7, #4]
   1f204:	3358      	adds	r3, #88	; 0x58
   1f206:	4618      	mov	r0, r3
   1f208:	f7ff fe67 	bl	1eeda <k_queue_cancel_wait>
}
   1f20c:	bf00      	nop
   1f20e:	3718      	adds	r7, #24
   1f210:	46bd      	mov	sp, r7
   1f212:	bd80      	pop	{r7, pc}

0001f214 <z_impl_zsock_socket>:
{
   1f214:	b580      	push	{r7, lr}
   1f216:	b084      	sub	sp, #16
   1f218:	af00      	add	r7, sp, #0
   1f21a:	60f8      	str	r0, [r7, #12]
   1f21c:	60b9      	str	r1, [r7, #8]
   1f21e:	607a      	str	r2, [r7, #4]
	return zsock_socket_internal(family, type, proto);
   1f220:	687a      	ldr	r2, [r7, #4]
   1f222:	68b9      	ldr	r1, [r7, #8]
   1f224:	68f8      	ldr	r0, [r7, #12]
   1f226:	f7ef fb35 	bl	e894 <zsock_socket_internal>
   1f22a:	4603      	mov	r3, r0
}
   1f22c:	4618      	mov	r0, r3
   1f22e:	3710      	adds	r7, #16
   1f230:	46bd      	mov	sp, r7
   1f232:	bd80      	pop	{r7, pc}

0001f234 <zsock_close_ctx>:
{
   1f234:	b580      	push	{r7, lr}
   1f236:	b084      	sub	sp, #16
   1f238:	af00      	add	r7, sp, #0
   1f23a:	6078      	str	r0, [r7, #4]
	if (net_context_get_state(ctx) == NET_CONTEXT_LISTENING) {
   1f23c:	6878      	ldr	r0, [r7, #4]
   1f23e:	f7ff feaa 	bl	1ef96 <net_context_get_state>
   1f242:	4603      	mov	r3, r0
   1f244:	2b03      	cmp	r3, #3
   1f246:	d106      	bne.n	1f256 <zsock_close_ctx+0x22>
		(void)net_context_accept(ctx, NULL, K_NO_WAIT, NULL);
   1f248:	2300      	movs	r3, #0
   1f24a:	2200      	movs	r2, #0
   1f24c:	2100      	movs	r1, #0
   1f24e:	6878      	ldr	r0, [r7, #4]
   1f250:	f004 feed 	bl	2402e <net_context_accept>
   1f254:	e005      	b.n	1f262 <zsock_close_ctx+0x2e>
		(void)net_context_recv(ctx, NULL, K_NO_WAIT, NULL);
   1f256:	2300      	movs	r3, #0
   1f258:	2200      	movs	r2, #0
   1f25a:	2100      	movs	r1, #0
   1f25c:	6878      	ldr	r0, [r7, #4]
   1f25e:	f005 f90b 	bl	24478 <net_context_recv>
	zsock_flush_queue(ctx);
   1f262:	6878      	ldr	r0, [r7, #4]
   1f264:	f7ff ffa3 	bl	1f1ae <zsock_flush_queue>
	SET_ERRNO(net_context_put(ctx));
   1f268:	6878      	ldr	r0, [r7, #4]
   1f26a:	f7f3 fedd 	bl	13028 <net_context_put>
   1f26e:	60f8      	str	r0, [r7, #12]
   1f270:	68fb      	ldr	r3, [r7, #12]
   1f272:	2b00      	cmp	r3, #0
   1f274:	da08      	bge.n	1f288 <zsock_close_ctx+0x54>
   1f276:	f002 fb3d 	bl	218f4 <__errno>
   1f27a:	4602      	mov	r2, r0
   1f27c:	68fb      	ldr	r3, [r7, #12]
   1f27e:	425b      	negs	r3, r3
   1f280:	6013      	str	r3, [r2, #0]
   1f282:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f286:	e000      	b.n	1f28a <zsock_close_ctx+0x56>
	return 0;
   1f288:	2300      	movs	r3, #0
}
   1f28a:	4618      	mov	r0, r3
   1f28c:	3710      	adds	r7, #16
   1f28e:	46bd      	mov	sp, r7
   1f290:	bd80      	pop	{r7, pc}

0001f292 <zsock_received_cb>:
{
   1f292:	b580      	push	{r7, lr}
   1f294:	b094      	sub	sp, #80	; 0x50
   1f296:	af00      	add	r7, sp, #0
   1f298:	60f8      	str	r0, [r7, #12]
   1f29a:	60b9      	str	r1, [r7, #8]
   1f29c:	607a      	str	r2, [r7, #4]
   1f29e:	603b      	str	r3, [r7, #0]
	NET_DBG("ctx=%p, pkt=%p, st=%d, user_data=%p", ctx, pkt, status,
   1f2a0:	f7ff fde5 	bl	1ee6e <_is_user_context>
   1f2a4:	4603      	mov	r3, r0
   1f2a6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	if (!pkt) {
   1f2aa:	68bb      	ldr	r3, [r7, #8]
   1f2ac:	2b00      	cmp	r3, #0
   1f2ae:	d122      	bne.n	1f2f6 <zsock_received_cb+0x64>
		struct net_pkt *last_pkt = k_fifo_peek_tail(&ctx->recv_q);
   1f2b0:	68fb      	ldr	r3, [r7, #12]
   1f2b2:	3358      	adds	r3, #88	; 0x58
   1f2b4:	4618      	mov	r0, r3
   1f2b6:	f7ff fe35 	bl	1ef24 <k_queue_peek_tail>
   1f2ba:	64b8      	str	r0, [r7, #72]	; 0x48
		if (!last_pkt) {
   1f2bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1f2be:	2b00      	cmp	r3, #0
   1f2c0:	d10f      	bne.n	1f2e2 <zsock_received_cb+0x50>
			sock_set_eof(ctx);
   1f2c2:	2201      	movs	r2, #1
   1f2c4:	2101      	movs	r1, #1
   1f2c6:	68f8      	ldr	r0, [r7, #12]
   1f2c8:	f7ff ff1c 	bl	1f104 <sock_set_flag>
			k_fifo_cancel_wait(&ctx->recv_q);
   1f2cc:	68fb      	ldr	r3, [r7, #12]
   1f2ce:	3358      	adds	r3, #88	; 0x58
   1f2d0:	4618      	mov	r0, r3
   1f2d2:	f7ff fe02 	bl	1eeda <k_queue_cancel_wait>
			NET_DBG("Marked socket %p as peer-closed", ctx);
   1f2d6:	f7ff fdca 	bl	1ee6e <_is_user_context>
   1f2da:	4603      	mov	r3, r0
   1f2dc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		return;
   1f2e0:	e022      	b.n	1f328 <zsock_received_cb+0x96>
			net_pkt_set_eof(last_pkt, true);
   1f2e2:	2101      	movs	r1, #1
   1f2e4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   1f2e6:	f7ff fec6 	bl	1f076 <net_pkt_set_eof>
			NET_DBG("Set EOF flag on pkt %p", last_pkt);
   1f2ea:	f7ff fdc0 	bl	1ee6e <_is_user_context>
   1f2ee:	4603      	mov	r3, r0
   1f2f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		return;
   1f2f4:	e018      	b.n	1f328 <zsock_received_cb+0x96>
	net_pkt_set_eof(pkt, false);
   1f2f6:	2100      	movs	r1, #0
   1f2f8:	68b8      	ldr	r0, [r7, #8]
   1f2fa:	f7ff febc 	bl	1f076 <net_pkt_set_eof>
	if (net_context_get_type(ctx) == SOCK_STREAM) {
   1f2fe:	68f8      	ldr	r0, [r7, #12]
   1f300:	f7ff fe7f 	bl	1f002 <net_context_get_type>
   1f304:	4603      	mov	r3, r0
   1f306:	2b01      	cmp	r3, #1
   1f308:	d108      	bne.n	1f31c <zsock_received_cb+0x8a>
		net_context_update_recv_wnd(ctx, -net_pkt_remaining_data(pkt));
   1f30a:	68b8      	ldr	r0, [r7, #8]
   1f30c:	f007 f858 	bl	263c0 <net_pkt_remaining_data>
   1f310:	4603      	mov	r3, r0
   1f312:	425b      	negs	r3, r3
   1f314:	4619      	mov	r1, r3
   1f316:	68f8      	ldr	r0, [r7, #12]
   1f318:	f005 f916 	bl	24548 <net_context_update_recv_wnd>
	k_fifo_put(&ctx->recv_q, pkt);
   1f31c:	68fb      	ldr	r3, [r7, #12]
   1f31e:	3358      	adds	r3, #88	; 0x58
   1f320:	68b9      	ldr	r1, [r7, #8]
   1f322:	4618      	mov	r0, r3
   1f324:	f00b fa23 	bl	2a76e <k_queue_append>
}
   1f328:	3750      	adds	r7, #80	; 0x50
   1f32a:	46bd      	mov	sp, r7
   1f32c:	bd80      	pop	{r7, pc}

0001f32e <z_impl_zsock_bind>:
{
   1f32e:	b580      	push	{r7, lr}
   1f330:	b086      	sub	sp, #24
   1f332:	af00      	add	r7, sp, #0
   1f334:	60f8      	str	r0, [r7, #12]
   1f336:	60b9      	str	r1, [r7, #8]
   1f338:	607a      	str	r2, [r7, #4]
	VTABLE_CALL(bind, sock, addr, addrlen);
   1f33a:	f107 0310 	add.w	r3, r7, #16
   1f33e:	4619      	mov	r1, r3
   1f340:	68f8      	ldr	r0, [r7, #12]
   1f342:	f7ff ff06 	bl	1f152 <get_sock_vtable>
   1f346:	6178      	str	r0, [r7, #20]
   1f348:	697b      	ldr	r3, [r7, #20]
   1f34a:	2b00      	cmp	r3, #0
   1f34c:	d003      	beq.n	1f356 <z_impl_zsock_bind+0x28>
   1f34e:	693b      	ldr	r3, [r7, #16]
   1f350:	68db      	ldr	r3, [r3, #12]
   1f352:	2b00      	cmp	r3, #0
   1f354:	d102      	bne.n	1f35c <z_impl_zsock_bind+0x2e>
   1f356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f35a:	e006      	b.n	1f36a <z_impl_zsock_bind+0x3c>
   1f35c:	693b      	ldr	r3, [r7, #16]
   1f35e:	68db      	ldr	r3, [r3, #12]
   1f360:	687a      	ldr	r2, [r7, #4]
   1f362:	68b9      	ldr	r1, [r7, #8]
   1f364:	6978      	ldr	r0, [r7, #20]
   1f366:	4798      	blx	r3
   1f368:	4603      	mov	r3, r0
}
   1f36a:	4618      	mov	r0, r3
   1f36c:	3718      	adds	r7, #24
   1f36e:	46bd      	mov	sp, r7
   1f370:	bd80      	pop	{r7, pc}

0001f372 <z_impl_zsock_sendto>:

ssize_t z_impl_zsock_sendto(int sock, const void *buf, size_t len, int flags,
			   const struct sockaddr *dest_addr, socklen_t addrlen)
{
   1f372:	b590      	push	{r4, r7, lr}
   1f374:	b089      	sub	sp, #36	; 0x24
   1f376:	af02      	add	r7, sp, #8
   1f378:	60f8      	str	r0, [r7, #12]
   1f37a:	60b9      	str	r1, [r7, #8]
   1f37c:	607a      	str	r2, [r7, #4]
   1f37e:	603b      	str	r3, [r7, #0]
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   1f380:	f107 0310 	add.w	r3, r7, #16
   1f384:	4619      	mov	r1, r3
   1f386:	68f8      	ldr	r0, [r7, #12]
   1f388:	f7ff fee3 	bl	1f152 <get_sock_vtable>
   1f38c:	6178      	str	r0, [r7, #20]
   1f38e:	697b      	ldr	r3, [r7, #20]
   1f390:	2b00      	cmp	r3, #0
   1f392:	d003      	beq.n	1f39c <z_impl_zsock_sendto+0x2a>
   1f394:	693b      	ldr	r3, [r7, #16]
   1f396:	69db      	ldr	r3, [r3, #28]
   1f398:	2b00      	cmp	r3, #0
   1f39a:	d102      	bne.n	1f3a2 <z_impl_zsock_sendto+0x30>
   1f39c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f3a0:	e00b      	b.n	1f3ba <z_impl_zsock_sendto+0x48>
   1f3a2:	693b      	ldr	r3, [r7, #16]
   1f3a4:	69dc      	ldr	r4, [r3, #28]
   1f3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1f3a8:	9301      	str	r3, [sp, #4]
   1f3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f3ac:	9300      	str	r3, [sp, #0]
   1f3ae:	683b      	ldr	r3, [r7, #0]
   1f3b0:	687a      	ldr	r2, [r7, #4]
   1f3b2:	68b9      	ldr	r1, [r7, #8]
   1f3b4:	6978      	ldr	r0, [r7, #20]
   1f3b6:	47a0      	blx	r4
   1f3b8:	4603      	mov	r3, r0
}
   1f3ba:	4618      	mov	r0, r3
   1f3bc:	371c      	adds	r7, #28
   1f3be:	46bd      	mov	sp, r7
   1f3c0:	bd90      	pop	{r4, r7, pc}

0001f3c2 <sock_get_pkt_src_addr>:

static int sock_get_pkt_src_addr(struct net_pkt *pkt,
				 enum net_ip_protocol proto,
				 struct sockaddr *addr,
				 socklen_t addrlen)
{
   1f3c2:	b580      	push	{r7, lr}
   1f3c4:	b0a0      	sub	sp, #128	; 0x80
   1f3c6:	af00      	add	r7, sp, #0
   1f3c8:	60f8      	str	r0, [r7, #12]
   1f3ca:	607a      	str	r2, [r7, #4]
   1f3cc:	603b      	str	r3, [r7, #0]
   1f3ce:	460b      	mov	r3, r1
   1f3d0:	72fb      	strb	r3, [r7, #11]
	int ret = 0;
   1f3d2:	2300      	movs	r3, #0
   1f3d4:	67fb      	str	r3, [r7, #124]	; 0x7c
	struct net_pkt_cursor backup;
	u16_t *port;

	if (!addr || !pkt) {
   1f3d6:	687b      	ldr	r3, [r7, #4]
   1f3d8:	2b00      	cmp	r3, #0
   1f3da:	d002      	beq.n	1f3e2 <sock_get_pkt_src_addr+0x20>
   1f3dc:	68fb      	ldr	r3, [r7, #12]
   1f3de:	2b00      	cmp	r3, #0
   1f3e0:	d102      	bne.n	1f3e8 <sock_get_pkt_src_addr+0x26>
		return -EINVAL;
   1f3e2:	f06f 0315 	mvn.w	r3, #21
   1f3e6:	e074      	b.n	1f4d2 <sock_get_pkt_src_addr+0x110>
	}

	net_pkt_cursor_backup(pkt, &backup);
   1f3e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   1f3ec:	4619      	mov	r1, r3
   1f3ee:	68f8      	ldr	r0, [r7, #12]
   1f3f0:	f7ff fe54 	bl	1f09c <net_pkt_cursor_backup>
	net_pkt_cursor_init(pkt);
   1f3f4:	68f8      	ldr	r0, [r7, #12]
   1f3f6:	f006 fd61 	bl	25ebc <net_pkt_cursor_init>

	addr->sa_family = net_pkt_family(pkt);
   1f3fa:	68f8      	ldr	r0, [r7, #12]
   1f3fc:	f7ff fe1d 	bl	1f03a <net_pkt_family>
   1f400:	4603      	mov	r3, r0
   1f402:	b29a      	uxth	r2, r3
   1f404:	687b      	ldr	r3, [r7, #4]
   1f406:	801a      	strh	r2, [r3, #0]

	if (IS_ENABLED(CONFIG_NET_IPV4) &&
	    net_pkt_family(pkt) == AF_INET) {
   1f408:	68f8      	ldr	r0, [r7, #12]
   1f40a:	f7ff fe16 	bl	1f03a <net_pkt_family>
   1f40e:	4603      	mov	r3, r0
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1f410:	2b01      	cmp	r3, #1
   1f412:	d137      	bne.n	1f484 <sock_get_pkt_src_addr+0xc2>
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access,
   1f414:	2300      	movs	r3, #0
   1f416:	647b      	str	r3, [r7, #68]	; 0x44
   1f418:	2314      	movs	r3, #20
   1f41a:	64bb      	str	r3, [r7, #72]	; 0x48
						      struct net_ipv4_hdr);
		struct sockaddr_in *addr4 = net_sin(addr);
   1f41c:	6878      	ldr	r0, [r7, #4]
   1f41e:	f7ff fd9d 	bl	1ef5c <net_sin>
   1f422:	67b8      	str	r0, [r7, #120]	; 0x78
		struct net_ipv4_hdr *ipv4_hdr;

		if (addrlen < sizeof(struct sockaddr_in)) {
   1f424:	683b      	ldr	r3, [r7, #0]
   1f426:	2b07      	cmp	r3, #7
   1f428:	d803      	bhi.n	1f432 <sock_get_pkt_src_addr+0x70>
			ret = -EINVAL;
   1f42a:	f06f 0315 	mvn.w	r3, #21
   1f42e:	67fb      	str	r3, [r7, #124]	; 0x7c
			goto error;
   1f430:	e048      	b.n	1f4c4 <sock_get_pkt_src_addr+0x102>
		}

		ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(
   1f432:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1f436:	4619      	mov	r1, r3
   1f438:	68f8      	ldr	r0, [r7, #12]
   1f43a:	f007 f853 	bl	264e4 <net_pkt_get_data>
   1f43e:	6778      	str	r0, [r7, #116]	; 0x74
							pkt, &ipv4_access);
		if (!ipv4_hdr || net_pkt_acknowledge_data(pkt, &ipv4_access)) {
   1f440:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1f442:	2b00      	cmp	r3, #0
   1f444:	d008      	beq.n	1f458 <sock_get_pkt_src_addr+0x96>
   1f446:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1f44a:	4619      	mov	r1, r3
   1f44c:	68f8      	ldr	r0, [r7, #12]
   1f44e:	f7ff fe49 	bl	1f0e4 <net_pkt_acknowledge_data>
   1f452:	4603      	mov	r3, r0
   1f454:	2b00      	cmp	r3, #0
   1f456:	d004      	beq.n	1f462 <sock_get_pkt_src_addr+0xa0>
			ret = -ENOBUFS;
   1f458:	f06f 0368 	mvn.w	r3, #104	; 0x68
   1f45c:	67fb      	str	r3, [r7, #124]	; 0x7c
			goto error;
   1f45e:	bf00      	nop
   1f460:	e030      	b.n	1f4c4 <sock_get_pkt_src_addr+0x102>
		}

		net_ipaddr_copy(&addr4->sin_addr, &ipv4_hdr->src);
   1f462:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1f464:	3304      	adds	r3, #4
   1f466:	673b      	str	r3, [r7, #112]	; 0x70
   1f468:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1f46a:	330c      	adds	r3, #12
   1f46c:	66fb      	str	r3, [r7, #108]	; 0x6c
   1f46e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1f470:	681a      	ldr	r2, [r3, #0]
   1f472:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1f474:	601a      	str	r2, [r3, #0]
		port = &addr4->sin_port;
   1f476:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1f478:	3302      	adds	r3, #2
   1f47a:	66bb      	str	r3, [r7, #104]	; 0x68
	} else {
		ret = -ENOTSUP;
		goto error;
	}

	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   1f47c:	7afb      	ldrb	r3, [r7, #11]
   1f47e:	2b11      	cmp	r3, #17
   1f480:	d11d      	bne.n	1f4be <sock_get_pkt_src_addr+0xfc>
   1f482:	e003      	b.n	1f48c <sock_get_pkt_src_addr+0xca>
		ret = -ENOTSUP;
   1f484:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1f488:	67fb      	str	r3, [r7, #124]	; 0x7c
		goto error;
   1f48a:	e01b      	b.n	1f4c4 <sock_get_pkt_src_addr+0x102>
		NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   1f48c:	f107 0334 	add.w	r3, r7, #52	; 0x34
   1f490:	62fb      	str	r3, [r7, #44]	; 0x2c
   1f492:	2308      	movs	r3, #8
   1f494:	633b      	str	r3, [r7, #48]	; 0x30
		struct net_udp_hdr *udp_hdr;

		udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt,
   1f496:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1f49a:	4619      	mov	r1, r3
   1f49c:	68f8      	ldr	r0, [r7, #12]
   1f49e:	f007 f821 	bl	264e4 <net_pkt_get_data>
   1f4a2:	6678      	str	r0, [r7, #100]	; 0x64
								 &udp_access);
		if (!udp_hdr) {
   1f4a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1f4a6:	2b00      	cmp	r3, #0
   1f4a8:	d103      	bne.n	1f4b2 <sock_get_pkt_src_addr+0xf0>
			ret = -ENOBUFS;
   1f4aa:	f06f 0368 	mvn.w	r3, #104	; 0x68
   1f4ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   1f4b0:	e008      	b.n	1f4c4 <sock_get_pkt_src_addr+0x102>
			goto error;
		}

		*port = udp_hdr->src_port;
   1f4b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1f4b4:	881b      	ldrh	r3, [r3, #0]
   1f4b6:	b29a      	uxth	r2, r3
   1f4b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1f4ba:	801a      	strh	r2, [r3, #0]
   1f4bc:	e002      	b.n	1f4c4 <sock_get_pkt_src_addr+0x102>
			goto error;
		}

		*port = tcp_hdr->src_port;
	} else {
		ret = -ENOTSUP;
   1f4be:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1f4c2:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

error:
	net_pkt_cursor_restore(pkt, &backup);
   1f4c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   1f4c8:	4619      	mov	r1, r3
   1f4ca:	68f8      	ldr	r0, [r7, #12]
   1f4cc:	f7ff fdf8 	bl	1f0c0 <net_pkt_cursor_restore>

	return ret;
   1f4d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
   1f4d2:	4618      	mov	r0, r3
   1f4d4:	3780      	adds	r7, #128	; 0x80
   1f4d6:	46bd      	mov	sp, r7
   1f4d8:	bd80      	pop	{r7, pc}

0001f4da <zsock_recv_dgram>:
				       void *buf,
				       size_t max_len,
				       int flags,
				       struct sockaddr *src_addr,
				       socklen_t *addrlen)
{
   1f4da:	b580      	push	{r7, lr}
   1f4dc:	b08c      	sub	sp, #48	; 0x30
   1f4de:	af00      	add	r7, sp, #0
   1f4e0:	60f8      	str	r0, [r7, #12]
   1f4e2:	60b9      	str	r1, [r7, #8]
   1f4e4:	607a      	str	r2, [r7, #4]
   1f4e6:	603b      	str	r3, [r7, #0]
	s32_t timeout = K_FOREVER;
   1f4e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f4ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	size_t recv_len = 0;
   1f4ee:	2300      	movs	r3, #0
   1f4f0:	62bb      	str	r3, [r7, #40]	; 0x28
	struct net_pkt_cursor backup;
	struct net_pkt *pkt;

	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   1f4f2:	683b      	ldr	r3, [r7, #0]
   1f4f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1f4f8:	2b00      	cmp	r3, #0
   1f4fa:	d106      	bne.n	1f50a <zsock_recv_dgram+0x30>
   1f4fc:	2102      	movs	r1, #2
   1f4fe:	68f8      	ldr	r0, [r7, #12]
   1f500:	f7ff fe18 	bl	1f134 <sock_get_flag>
   1f504:	4603      	mov	r3, r0
   1f506:	2b00      	cmp	r3, #0
   1f508:	d001      	beq.n	1f50e <zsock_recv_dgram+0x34>
		timeout = K_NO_WAIT;
   1f50a:	2300      	movs	r3, #0
   1f50c:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	if (flags & ZSOCK_MSG_PEEK) {
   1f50e:	683b      	ldr	r3, [r7, #0]
   1f510:	f003 0302 	and.w	r3, r3, #2
   1f514:	2b00      	cmp	r3, #0
   1f516:	d021      	beq.n	1f55c <zsock_recv_dgram+0x82>
		int res;

		res = k_fifo_wait_non_empty(&ctx->recv_q, timeout);
   1f518:	68fb      	ldr	r3, [r7, #12]
   1f51a:	3358      	adds	r3, #88	; 0x58
   1f51c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1f51e:	4618      	mov	r0, r3
   1f520:	f7ff fe25 	bl	1f16e <k_fifo_wait_non_empty>
   1f524:	6238      	str	r0, [r7, #32]
		/* EAGAIN when timeout expired, EINTR when cancelled */
		if (res && res != -EAGAIN && res != -EINTR) {
   1f526:	6a3b      	ldr	r3, [r7, #32]
   1f528:	2b00      	cmp	r3, #0
   1f52a:	d010      	beq.n	1f54e <zsock_recv_dgram+0x74>
   1f52c:	6a3b      	ldr	r3, [r7, #32]
   1f52e:	f113 0f0b 	cmn.w	r3, #11
   1f532:	d00c      	beq.n	1f54e <zsock_recv_dgram+0x74>
   1f534:	6a3b      	ldr	r3, [r7, #32]
   1f536:	f113 0f04 	cmn.w	r3, #4
   1f53a:	d008      	beq.n	1f54e <zsock_recv_dgram+0x74>
			errno = -res;
   1f53c:	f002 f9da 	bl	218f4 <__errno>
   1f540:	4602      	mov	r2, r0
   1f542:	6a3b      	ldr	r3, [r7, #32]
   1f544:	425b      	negs	r3, r3
   1f546:	6013      	str	r3, [r2, #0]
			return -1;
   1f548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f54c:	e07e      	b.n	1f64c <zsock_recv_dgram+0x172>
		}

		pkt = k_fifo_peek_head(&ctx->recv_q);
   1f54e:	68fb      	ldr	r3, [r7, #12]
   1f550:	3358      	adds	r3, #88	; 0x58
   1f552:	4618      	mov	r0, r3
   1f554:	f7ff fcda 	bl	1ef0c <k_queue_peek_head>
   1f558:	6278      	str	r0, [r7, #36]	; 0x24
   1f55a:	e006      	b.n	1f56a <zsock_recv_dgram+0x90>
	} else {
		pkt = k_fifo_get(&ctx->recv_q, timeout);
   1f55c:	68fb      	ldr	r3, [r7, #12]
   1f55e:	3358      	adds	r3, #88	; 0x58
   1f560:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1f562:	4618      	mov	r0, r3
   1f564:	f7ff fcc4 	bl	1eef0 <k_queue_get>
   1f568:	6278      	str	r0, [r7, #36]	; 0x24
	}

	if (!pkt) {
   1f56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f56c:	2b00      	cmp	r3, #0
   1f56e:	d107      	bne.n	1f580 <zsock_recv_dgram+0xa6>
		errno = EAGAIN;
   1f570:	f002 f9c0 	bl	218f4 <__errno>
   1f574:	4602      	mov	r2, r0
   1f576:	230b      	movs	r3, #11
   1f578:	6013      	str	r3, [r2, #0]
		return -1;
   1f57a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f57e:	e065      	b.n	1f64c <zsock_recv_dgram+0x172>
	}

	net_pkt_cursor_backup(pkt, &backup);
   1f580:	f107 0314 	add.w	r3, r7, #20
   1f584:	4619      	mov	r1, r3
   1f586:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1f588:	f7ff fd88 	bl	1f09c <net_pkt_cursor_backup>

	if (src_addr && addrlen) {
   1f58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f58e:	2b00      	cmp	r3, #0
   1f590:	d032      	beq.n	1f5f8 <zsock_recv_dgram+0x11e>
   1f592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f594:	2b00      	cmp	r3, #0
   1f596:	d02f      	beq.n	1f5f8 <zsock_recv_dgram+0x11e>
		int rv;

		rv = sock_get_pkt_src_addr(pkt, net_context_get_ip_proto(ctx),
   1f598:	68f8      	ldr	r0, [r7, #12]
   1f59a:	f7ff fd42 	bl	1f022 <net_context_get_ip_proto>
   1f59e:	4603      	mov	r3, r0
   1f5a0:	b2d9      	uxtb	r1, r3
   1f5a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f5a4:	681b      	ldr	r3, [r3, #0]
   1f5a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1f5a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1f5aa:	f7ff ff0a 	bl	1f3c2 <sock_get_pkt_src_addr>
   1f5ae:	61f8      	str	r0, [r7, #28]
					   src_addr, *addrlen);
		if (rv < 0) {
   1f5b0:	69fb      	ldr	r3, [r7, #28]
   1f5b2:	2b00      	cmp	r3, #0
   1f5b4:	da08      	bge.n	1f5c8 <zsock_recv_dgram+0xee>
			errno = -rv;
   1f5b6:	f002 f99d 	bl	218f4 <__errno>
   1f5ba:	4602      	mov	r2, r0
   1f5bc:	69fb      	ldr	r3, [r7, #28]
   1f5be:	425b      	negs	r3, r3
   1f5c0:	6013      	str	r3, [r2, #0]
			return -1;
   1f5c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f5c6:	e041      	b.n	1f64c <zsock_recv_dgram+0x172>
		}

		/* addrlen is a value-result argument, set to actual
		 * size of source address
		 */
		if (src_addr->sa_family == AF_INET) {
   1f5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f5ca:	881b      	ldrh	r3, [r3, #0]
   1f5cc:	2b01      	cmp	r3, #1
   1f5ce:	d103      	bne.n	1f5d8 <zsock_recv_dgram+0xfe>
			*addrlen = sizeof(struct sockaddr_in);
   1f5d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f5d2:	2208      	movs	r2, #8
   1f5d4:	601a      	str	r2, [r3, #0]
   1f5d6:	e00f      	b.n	1f5f8 <zsock_recv_dgram+0x11e>
		} else if (src_addr->sa_family == AF_INET6) {
   1f5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f5da:	881b      	ldrh	r3, [r3, #0]
   1f5dc:	2b02      	cmp	r3, #2
   1f5de:	d103      	bne.n	1f5e8 <zsock_recv_dgram+0x10e>
			*addrlen = sizeof(struct sockaddr_in6);
   1f5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f5e2:	2218      	movs	r2, #24
   1f5e4:	601a      	str	r2, [r3, #0]
   1f5e6:	e007      	b.n	1f5f8 <zsock_recv_dgram+0x11e>
		} else {
			errno = ENOTSUP;
   1f5e8:	f002 f984 	bl	218f4 <__errno>
   1f5ec:	4602      	mov	r2, r0
   1f5ee:	2386      	movs	r3, #134	; 0x86
   1f5f0:	6013      	str	r3, [r2, #0]
			return -1;
   1f5f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f5f6:	e029      	b.n	1f64c <zsock_recv_dgram+0x172>
		}
	}

	recv_len = net_pkt_remaining_data(pkt);
   1f5f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1f5fa:	f006 fee1 	bl	263c0 <net_pkt_remaining_data>
   1f5fe:	62b8      	str	r0, [r7, #40]	; 0x28
	if (recv_len > max_len) {
   1f600:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1f602:	687b      	ldr	r3, [r7, #4]
   1f604:	429a      	cmp	r2, r3
   1f606:	d901      	bls.n	1f60c <zsock_recv_dgram+0x132>
		recv_len = max_len;
   1f608:	687b      	ldr	r3, [r7, #4]
   1f60a:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	if (net_pkt_read(pkt, buf, recv_len)) {
   1f60c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1f60e:	68b9      	ldr	r1, [r7, #8]
   1f610:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1f612:	f006 fe05 	bl	26220 <net_pkt_read>
   1f616:	4603      	mov	r3, r0
   1f618:	2b00      	cmp	r3, #0
   1f61a:	d007      	beq.n	1f62c <zsock_recv_dgram+0x152>
		errno = ENOBUFS;
   1f61c:	f002 f96a 	bl	218f4 <__errno>
   1f620:	4602      	mov	r2, r0
   1f622:	2369      	movs	r3, #105	; 0x69
   1f624:	6013      	str	r3, [r2, #0]
		return -1;
   1f626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f62a:	e00f      	b.n	1f64c <zsock_recv_dgram+0x172>
	}

	if (!(flags & ZSOCK_MSG_PEEK)) {
   1f62c:	683b      	ldr	r3, [r7, #0]
   1f62e:	f003 0302 	and.w	r3, r3, #2
   1f632:	2b00      	cmp	r3, #0
   1f634:	d103      	bne.n	1f63e <zsock_recv_dgram+0x164>
		net_pkt_unref(pkt);
   1f636:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1f638:	f006 f9e7 	bl	25a0a <net_pkt_unref>
   1f63c:	e005      	b.n	1f64a <zsock_recv_dgram+0x170>
	} else {
		net_pkt_cursor_restore(pkt, &backup);
   1f63e:	f107 0314 	add.w	r3, r7, #20
   1f642:	4619      	mov	r1, r3
   1f644:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1f646:	f7ff fd3b 	bl	1f0c0 <net_pkt_cursor_restore>
	}

	return recv_len;
   1f64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
   1f64c:	4618      	mov	r0, r3
   1f64e:	3730      	adds	r7, #48	; 0x30
   1f650:	46bd      	mov	sp, r7
   1f652:	bd80      	pop	{r7, pc}

0001f654 <zsock_recv_stream>:

static inline ssize_t zsock_recv_stream(struct net_context *ctx,
					void *buf,
					size_t max_len,
					int flags)
{
   1f654:	b580      	push	{r7, lr}
   1f656:	b08e      	sub	sp, #56	; 0x38
   1f658:	af00      	add	r7, sp, #0
   1f65a:	60f8      	str	r0, [r7, #12]
   1f65c:	60b9      	str	r1, [r7, #8]
   1f65e:	607a      	str	r2, [r7, #4]
   1f660:	603b      	str	r3, [r7, #0]
	s32_t timeout = K_FOREVER;
   1f662:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f666:	633b      	str	r3, [r7, #48]	; 0x30
	size_t recv_len = 0;
   1f668:	2300      	movs	r3, #0
   1f66a:	637b      	str	r3, [r7, #52]	; 0x34
	struct net_pkt_cursor backup;
	int res;

	if (!net_context_is_used(ctx)) {
   1f66c:	68f8      	ldr	r0, [r7, #12]
   1f66e:	f7ff fc7f 	bl	1ef70 <net_context_is_used>
   1f672:	4603      	mov	r3, r0
   1f674:	f083 0301 	eor.w	r3, r3, #1
   1f678:	b2db      	uxtb	r3, r3
   1f67a:	2b00      	cmp	r3, #0
   1f67c:	d007      	beq.n	1f68e <zsock_recv_stream+0x3a>
		errno = EBADF;
   1f67e:	f002 f939 	bl	218f4 <__errno>
   1f682:	4602      	mov	r2, r0
   1f684:	2309      	movs	r3, #9
   1f686:	6013      	str	r3, [r2, #0]
		return -1;
   1f688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f68c:	e0a5      	b.n	1f7da <zsock_recv_stream+0x186>
	}

	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   1f68e:	683b      	ldr	r3, [r7, #0]
   1f690:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1f694:	2b00      	cmp	r3, #0
   1f696:	d106      	bne.n	1f6a6 <zsock_recv_stream+0x52>
   1f698:	2102      	movs	r1, #2
   1f69a:	68f8      	ldr	r0, [r7, #12]
   1f69c:	f7ff fd4a 	bl	1f134 <sock_get_flag>
   1f6a0:	4603      	mov	r3, r0
   1f6a2:	2b00      	cmp	r3, #0
   1f6a4:	d001      	beq.n	1f6aa <zsock_recv_stream+0x56>
		timeout = K_NO_WAIT;
   1f6a6:	2300      	movs	r3, #0
   1f6a8:	633b      	str	r3, [r7, #48]	; 0x30

	do {
		struct net_pkt *pkt;
		size_t data_len;

		if (sock_is_eof(ctx)) {
   1f6aa:	2101      	movs	r1, #1
   1f6ac:	68f8      	ldr	r0, [r7, #12]
   1f6ae:	f7ff fd41 	bl	1f134 <sock_get_flag>
   1f6b2:	4603      	mov	r3, r0
   1f6b4:	2b00      	cmp	r3, #0
   1f6b6:	d001      	beq.n	1f6bc <zsock_recv_stream+0x68>
			return 0;
   1f6b8:	2300      	movs	r3, #0
   1f6ba:	e08e      	b.n	1f7da <zsock_recv_stream+0x186>
		}

		res = k_fifo_wait_non_empty(&ctx->recv_q, timeout);
   1f6bc:	68fb      	ldr	r3, [r7, #12]
   1f6be:	3358      	adds	r3, #88	; 0x58
   1f6c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1f6c2:	4618      	mov	r0, r3
   1f6c4:	f7ff fd53 	bl	1f16e <k_fifo_wait_non_empty>
   1f6c8:	62f8      	str	r0, [r7, #44]	; 0x2c
		/* EAGAIN when timeout expired, EINTR when cancelled */
		if (res && res != -EAGAIN && res != -EINTR) {
   1f6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1f6cc:	2b00      	cmp	r3, #0
   1f6ce:	d010      	beq.n	1f6f2 <zsock_recv_stream+0x9e>
   1f6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1f6d2:	f113 0f0b 	cmn.w	r3, #11
   1f6d6:	d00c      	beq.n	1f6f2 <zsock_recv_stream+0x9e>
   1f6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1f6da:	f113 0f04 	cmn.w	r3, #4
   1f6de:	d008      	beq.n	1f6f2 <zsock_recv_stream+0x9e>
			errno = -res;
   1f6e0:	f002 f908 	bl	218f4 <__errno>
   1f6e4:	4602      	mov	r2, r0
   1f6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1f6e8:	425b      	negs	r3, r3
   1f6ea:	6013      	str	r3, [r2, #0]
			return -1;
   1f6ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f6f0:	e073      	b.n	1f7da <zsock_recv_stream+0x186>
		}

		pkt = k_fifo_peek_head(&ctx->recv_q);
   1f6f2:	68fb      	ldr	r3, [r7, #12]
   1f6f4:	3358      	adds	r3, #88	; 0x58
   1f6f6:	4618      	mov	r0, r3
   1f6f8:	f7ff fc08 	bl	1ef0c <k_queue_peek_head>
   1f6fc:	62b8      	str	r0, [r7, #40]	; 0x28
		if (!pkt) {
   1f6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f700:	2b00      	cmp	r3, #0
   1f702:	d115      	bne.n	1f730 <zsock_recv_stream+0xdc>
			/* Either timeout expired, or wait was cancelled
			 * due to connection closure by peer.
			 */
			NET_DBG("NULL return from fifo");
   1f704:	f7ff fbb3 	bl	1ee6e <_is_user_context>
   1f708:	4603      	mov	r3, r0
   1f70a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (sock_is_eof(ctx)) {
   1f70e:	2101      	movs	r1, #1
   1f710:	68f8      	ldr	r0, [r7, #12]
   1f712:	f7ff fd0f 	bl	1f134 <sock_get_flag>
   1f716:	4603      	mov	r3, r0
   1f718:	2b00      	cmp	r3, #0
   1f71a:	d001      	beq.n	1f720 <zsock_recv_stream+0xcc>
				return 0;
   1f71c:	2300      	movs	r3, #0
   1f71e:	e05c      	b.n	1f7da <zsock_recv_stream+0x186>
			} else {
				errno = EAGAIN;
   1f720:	f002 f8e8 	bl	218f4 <__errno>
   1f724:	4602      	mov	r2, r0
   1f726:	230b      	movs	r3, #11
   1f728:	6013      	str	r3, [r2, #0]
				return -1;
   1f72a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f72e:	e054      	b.n	1f7da <zsock_recv_stream+0x186>
			}
		}

		net_pkt_cursor_backup(pkt, &backup);
   1f730:	f107 0318 	add.w	r3, r7, #24
   1f734:	4619      	mov	r1, r3
   1f736:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1f738:	f7ff fcb0 	bl	1f09c <net_pkt_cursor_backup>

		data_len = net_pkt_remaining_data(pkt);
   1f73c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1f73e:	f006 fe3f 	bl	263c0 <net_pkt_remaining_data>
   1f742:	6238      	str	r0, [r7, #32]
		recv_len = data_len;
   1f744:	6a3b      	ldr	r3, [r7, #32]
   1f746:	637b      	str	r3, [r7, #52]	; 0x34
		if (recv_len > max_len) {
   1f748:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1f74a:	687b      	ldr	r3, [r7, #4]
   1f74c:	429a      	cmp	r2, r3
   1f74e:	d901      	bls.n	1f754 <zsock_recv_stream+0x100>
			recv_len = max_len;
   1f750:	687b      	ldr	r3, [r7, #4]
   1f752:	637b      	str	r3, [r7, #52]	; 0x34
		}

		/* Actually copy data to application buffer */
		if (net_pkt_read(pkt, buf, recv_len)) {
   1f754:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1f756:	68b9      	ldr	r1, [r7, #8]
   1f758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1f75a:	f006 fd61 	bl	26220 <net_pkt_read>
   1f75e:	4603      	mov	r3, r0
   1f760:	2b00      	cmp	r3, #0
   1f762:	d007      	beq.n	1f774 <zsock_recv_stream+0x120>
			errno = ENOBUFS;
   1f764:	f002 f8c6 	bl	218f4 <__errno>
   1f768:	4602      	mov	r2, r0
   1f76a:	2369      	movs	r3, #105	; 0x69
   1f76c:	6013      	str	r3, [r2, #0]
			return -1;
   1f76e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f772:	e032      	b.n	1f7da <zsock_recv_stream+0x186>
		}

		if (!(flags & ZSOCK_MSG_PEEK)) {
   1f774:	683b      	ldr	r3, [r7, #0]
   1f776:	f003 0302 	and.w	r3, r3, #2
   1f77a:	2b00      	cmp	r3, #0
   1f77c:	d118      	bne.n	1f7b0 <zsock_recv_stream+0x15c>
			if (recv_len == data_len) {
   1f77e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1f780:	6a3b      	ldr	r3, [r7, #32]
   1f782:	429a      	cmp	r2, r3
   1f784:	d11a      	bne.n	1f7bc <zsock_recv_stream+0x168>
				/* Finished processing head pkt in
				 * the fifo. Drop it from there.
				 */
				k_fifo_get(&ctx->recv_q, K_NO_WAIT);
   1f786:	68fb      	ldr	r3, [r7, #12]
   1f788:	3358      	adds	r3, #88	; 0x58
   1f78a:	2100      	movs	r1, #0
   1f78c:	4618      	mov	r0, r3
   1f78e:	f7ff fbaf 	bl	1eef0 <k_queue_get>
				if (net_pkt_eof(pkt)) {
   1f792:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1f794:	f7ff fc60 	bl	1f058 <net_pkt_eof>
   1f798:	4603      	mov	r3, r0
   1f79a:	2b00      	cmp	r3, #0
   1f79c:	d004      	beq.n	1f7a8 <zsock_recv_stream+0x154>
					sock_set_eof(ctx);
   1f79e:	2201      	movs	r2, #1
   1f7a0:	2101      	movs	r1, #1
   1f7a2:	68f8      	ldr	r0, [r7, #12]
   1f7a4:	f7ff fcae 	bl	1f104 <sock_set_flag>
				}

				net_pkt_unref(pkt);
   1f7a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1f7aa:	f006 f92e 	bl	25a0a <net_pkt_unref>
   1f7ae:	e005      	b.n	1f7bc <zsock_recv_stream+0x168>
			}
		} else {
			net_pkt_cursor_restore(pkt, &backup);
   1f7b0:	f107 0318 	add.w	r3, r7, #24
   1f7b4:	4619      	mov	r1, r3
   1f7b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1f7b8:	f7ff fc82 	bl	1f0c0 <net_pkt_cursor_restore>
		}
	} while (recv_len == 0);
   1f7bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1f7be:	2b00      	cmp	r3, #0
   1f7c0:	f43f af73 	beq.w	1f6aa <zsock_recv_stream+0x56>

	if (!(flags & ZSOCK_MSG_PEEK)) {
   1f7c4:	683b      	ldr	r3, [r7, #0]
   1f7c6:	f003 0302 	and.w	r3, r3, #2
   1f7ca:	2b00      	cmp	r3, #0
   1f7cc:	d104      	bne.n	1f7d8 <zsock_recv_stream+0x184>
		net_context_update_recv_wnd(ctx, recv_len);
   1f7ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1f7d0:	4619      	mov	r1, r3
   1f7d2:	68f8      	ldr	r0, [r7, #12]
   1f7d4:	f004 feb8 	bl	24548 <net_context_update_recv_wnd>
	}

	return recv_len;
   1f7d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   1f7da:	4618      	mov	r0, r3
   1f7dc:	3738      	adds	r7, #56	; 0x38
   1f7de:	46bd      	mov	sp, r7
   1f7e0:	bd80      	pop	{r7, pc}

0001f7e2 <zsock_recvfrom_ctx>:

ssize_t zsock_recvfrom_ctx(struct net_context *ctx, void *buf, size_t max_len,
			   int flags,
			   struct sockaddr *src_addr, socklen_t *addrlen)
{
   1f7e2:	b580      	push	{r7, lr}
   1f7e4:	b088      	sub	sp, #32
   1f7e6:	af02      	add	r7, sp, #8
   1f7e8:	60f8      	str	r0, [r7, #12]
   1f7ea:	60b9      	str	r1, [r7, #8]
   1f7ec:	607a      	str	r2, [r7, #4]
   1f7ee:	603b      	str	r3, [r7, #0]
	enum net_sock_type sock_type = net_context_get_type(ctx);
   1f7f0:	68f8      	ldr	r0, [r7, #12]
   1f7f2:	f7ff fc06 	bl	1f002 <net_context_get_type>
   1f7f6:	4603      	mov	r3, r0
   1f7f8:	75fb      	strb	r3, [r7, #23]

	if (max_len == 0) {
   1f7fa:	687b      	ldr	r3, [r7, #4]
   1f7fc:	2b00      	cmp	r3, #0
   1f7fe:	d101      	bne.n	1f804 <zsock_recvfrom_ctx+0x22>
		return 0;
   1f800:	2300      	movs	r3, #0
   1f802:	e01a      	b.n	1f83a <zsock_recvfrom_ctx+0x58>
	}

	if (sock_type == SOCK_DGRAM) {
   1f804:	7dfb      	ldrb	r3, [r7, #23]
   1f806:	2b02      	cmp	r3, #2
   1f808:	d10b      	bne.n	1f822 <zsock_recvfrom_ctx+0x40>
		return zsock_recv_dgram(ctx, buf, max_len, flags, src_addr, addrlen);
   1f80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f80c:	9301      	str	r3, [sp, #4]
   1f80e:	6a3b      	ldr	r3, [r7, #32]
   1f810:	9300      	str	r3, [sp, #0]
   1f812:	683b      	ldr	r3, [r7, #0]
   1f814:	687a      	ldr	r2, [r7, #4]
   1f816:	68b9      	ldr	r1, [r7, #8]
   1f818:	68f8      	ldr	r0, [r7, #12]
   1f81a:	f7ff fe5e 	bl	1f4da <zsock_recv_dgram>
   1f81e:	4603      	mov	r3, r0
   1f820:	e00b      	b.n	1f83a <zsock_recvfrom_ctx+0x58>
	} else if (sock_type == SOCK_STREAM) {
   1f822:	7dfb      	ldrb	r3, [r7, #23]
   1f824:	2b01      	cmp	r3, #1
   1f826:	d107      	bne.n	1f838 <zsock_recvfrom_ctx+0x56>
		return zsock_recv_stream(ctx, buf, max_len, flags);
   1f828:	683b      	ldr	r3, [r7, #0]
   1f82a:	687a      	ldr	r2, [r7, #4]
   1f82c:	68b9      	ldr	r1, [r7, #8]
   1f82e:	68f8      	ldr	r0, [r7, #12]
   1f830:	f7ff ff10 	bl	1f654 <zsock_recv_stream>
   1f834:	4603      	mov	r3, r0
   1f836:	e000      	b.n	1f83a <zsock_recvfrom_ctx+0x58>
	} else {
		__ASSERT(0, "Unknown socket type");
	}

	return 0;
   1f838:	2300      	movs	r3, #0
}
   1f83a:	4618      	mov	r0, r3
   1f83c:	3718      	adds	r7, #24
   1f83e:	46bd      	mov	sp, r7
   1f840:	bd80      	pop	{r7, pc}

0001f842 <z_impl_zsock_recvfrom>:

ssize_t z_impl_zsock_recvfrom(int sock, void *buf, size_t max_len, int flags,
			     struct sockaddr *src_addr, socklen_t *addrlen)
{
   1f842:	b590      	push	{r4, r7, lr}
   1f844:	b089      	sub	sp, #36	; 0x24
   1f846:	af02      	add	r7, sp, #8
   1f848:	60f8      	str	r0, [r7, #12]
   1f84a:	60b9      	str	r1, [r7, #8]
   1f84c:	607a      	str	r2, [r7, #4]
   1f84e:	603b      	str	r3, [r7, #0]
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   1f850:	f107 0310 	add.w	r3, r7, #16
   1f854:	4619      	mov	r1, r3
   1f856:	68f8      	ldr	r0, [r7, #12]
   1f858:	f7ff fc7b 	bl	1f152 <get_sock_vtable>
   1f85c:	6178      	str	r0, [r7, #20]
   1f85e:	697b      	ldr	r3, [r7, #20]
   1f860:	2b00      	cmp	r3, #0
   1f862:	d003      	beq.n	1f86c <z_impl_zsock_recvfrom+0x2a>
   1f864:	693b      	ldr	r3, [r7, #16]
   1f866:	6a1b      	ldr	r3, [r3, #32]
   1f868:	2b00      	cmp	r3, #0
   1f86a:	d102      	bne.n	1f872 <z_impl_zsock_recvfrom+0x30>
   1f86c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f870:	e00b      	b.n	1f88a <z_impl_zsock_recvfrom+0x48>
   1f872:	693b      	ldr	r3, [r7, #16]
   1f874:	6a1c      	ldr	r4, [r3, #32]
   1f876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1f878:	9301      	str	r3, [sp, #4]
   1f87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f87c:	9300      	str	r3, [sp, #0]
   1f87e:	683b      	ldr	r3, [r7, #0]
   1f880:	687a      	ldr	r2, [r7, #4]
   1f882:	68b9      	ldr	r1, [r7, #8]
   1f884:	6978      	ldr	r0, [r7, #20]
   1f886:	47a0      	blx	r4
   1f888:	4603      	mov	r3, r0
}
   1f88a:	4618      	mov	r0, r3
   1f88c:	371c      	adds	r7, #28
   1f88e:	46bd      	mov	sp, r7
   1f890:	bd90      	pop	{r4, r7, pc}

0001f892 <zsock_poll_prepare_ctx>:

static int zsock_poll_prepare_ctx(struct net_context *ctx,
				  struct zsock_pollfd *pfd,
				  struct k_poll_event **pev,
				  struct k_poll_event *pev_end)
{
   1f892:	b580      	push	{r7, lr}
   1f894:	b084      	sub	sp, #16
   1f896:	af00      	add	r7, sp, #0
   1f898:	60f8      	str	r0, [r7, #12]
   1f89a:	60b9      	str	r1, [r7, #8]
   1f89c:	607a      	str	r2, [r7, #4]
   1f89e:	603b      	str	r3, [r7, #0]
	if (pfd->events & ZSOCK_POLLIN) {
   1f8a0:	68bb      	ldr	r3, [r7, #8]
   1f8a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   1f8a6:	b29b      	uxth	r3, r3
   1f8a8:	f003 0301 	and.w	r3, r3, #1
   1f8ac:	2b00      	cmp	r3, #0
   1f8ae:	d02a      	beq.n	1f906 <zsock_poll_prepare_ctx+0x74>
		if (*pev == pev_end) {
   1f8b0:	687b      	ldr	r3, [r7, #4]
   1f8b2:	681b      	ldr	r3, [r3, #0]
   1f8b4:	683a      	ldr	r2, [r7, #0]
   1f8b6:	429a      	cmp	r2, r3
   1f8b8:	d107      	bne.n	1f8ca <zsock_poll_prepare_ctx+0x38>
			errno = ENOMEM;
   1f8ba:	f002 f81b 	bl	218f4 <__errno>
   1f8be:	4602      	mov	r2, r0
   1f8c0:	230c      	movs	r3, #12
   1f8c2:	6013      	str	r3, [r2, #0]
			return -1;
   1f8c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f8c8:	e02d      	b.n	1f926 <zsock_poll_prepare_ctx+0x94>
		}

		(*pev)->obj = &ctx->recv_q;
   1f8ca:	687b      	ldr	r3, [r7, #4]
   1f8cc:	681b      	ldr	r3, [r3, #0]
   1f8ce:	68fa      	ldr	r2, [r7, #12]
   1f8d0:	3258      	adds	r2, #88	; 0x58
   1f8d2:	611a      	str	r2, [r3, #16]
		(*pev)->type = K_POLL_TYPE_FIFO_DATA_AVAILABLE;
   1f8d4:	687b      	ldr	r3, [r7, #4]
   1f8d6:	681a      	ldr	r2, [r3, #0]
   1f8d8:	7b53      	ldrb	r3, [r2, #13]
   1f8da:	2104      	movs	r1, #4
   1f8dc:	f361 0303 	bfi	r3, r1, #0, #4
   1f8e0:	7353      	strb	r3, [r2, #13]
		(*pev)->mode = K_POLL_MODE_NOTIFY_ONLY;
   1f8e2:	687b      	ldr	r3, [r7, #4]
   1f8e4:	681a      	ldr	r2, [r3, #0]
   1f8e6:	7b93      	ldrb	r3, [r2, #14]
   1f8e8:	f36f 0341 	bfc	r3, #1, #1
   1f8ec:	7393      	strb	r3, [r2, #14]
		(*pev)->state = K_POLL_STATE_NOT_READY;
   1f8ee:	687b      	ldr	r3, [r7, #4]
   1f8f0:	681a      	ldr	r2, [r3, #0]
   1f8f2:	68d3      	ldr	r3, [r2, #12]
   1f8f4:	f36f 3310 	bfc	r3, #12, #5
   1f8f8:	60d3      	str	r3, [r2, #12]
		(*pev)++;
   1f8fa:	687b      	ldr	r3, [r7, #4]
   1f8fc:	681b      	ldr	r3, [r3, #0]
   1f8fe:	f103 0214 	add.w	r2, r3, #20
   1f902:	687b      	ldr	r3, [r7, #4]
   1f904:	601a      	str	r2, [r3, #0]
	}

	/* If socket is already in EOF, it can be reported
	 * immediately, so we tell poll() to short-circuit wait.
	 */
	if (sock_is_eof(ctx)) {
   1f906:	2101      	movs	r1, #1
   1f908:	68f8      	ldr	r0, [r7, #12]
   1f90a:	f7ff fc13 	bl	1f134 <sock_get_flag>
   1f90e:	4603      	mov	r3, r0
   1f910:	2b00      	cmp	r3, #0
   1f912:	d007      	beq.n	1f924 <zsock_poll_prepare_ctx+0x92>
		errno = EALREADY;
   1f914:	f001 ffee 	bl	218f4 <__errno>
   1f918:	4602      	mov	r2, r0
   1f91a:	2378      	movs	r3, #120	; 0x78
   1f91c:	6013      	str	r3, [r2, #0]
		return -1;
   1f91e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f922:	e000      	b.n	1f926 <zsock_poll_prepare_ctx+0x94>
	}

	return 0;
   1f924:	2300      	movs	r3, #0
}
   1f926:	4618      	mov	r0, r3
   1f928:	3710      	adds	r7, #16
   1f92a:	46bd      	mov	sp, r7
   1f92c:	bd80      	pop	{r7, pc}

0001f92e <zsock_poll_update_ctx>:

static int zsock_poll_update_ctx(struct net_context *ctx,
				 struct zsock_pollfd *pfd,
				 struct k_poll_event **pev)
{
   1f92e:	b580      	push	{r7, lr}
   1f930:	b084      	sub	sp, #16
   1f932:	af00      	add	r7, sp, #0
   1f934:	60f8      	str	r0, [r7, #12]
   1f936:	60b9      	str	r1, [r7, #8]
   1f938:	607a      	str	r2, [r7, #4]
	ARG_UNUSED(ctx);

	/* For now, assume that socket is always writable */
	if (pfd->events & ZSOCK_POLLOUT) {
   1f93a:	68bb      	ldr	r3, [r7, #8]
   1f93c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   1f940:	b29b      	uxth	r3, r3
   1f942:	f003 0304 	and.w	r3, r3, #4
   1f946:	2b00      	cmp	r3, #0
   1f948:	d007      	beq.n	1f95a <zsock_poll_update_ctx+0x2c>
		pfd->revents |= ZSOCK_POLLOUT;
   1f94a:	68bb      	ldr	r3, [r7, #8]
   1f94c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
   1f950:	f043 0304 	orr.w	r3, r3, #4
   1f954:	b21a      	sxth	r2, r3
   1f956:	68bb      	ldr	r3, [r7, #8]
   1f958:	80da      	strh	r2, [r3, #6]
	}

	if (pfd->events & ZSOCK_POLLIN) {
   1f95a:	68bb      	ldr	r3, [r7, #8]
   1f95c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   1f960:	b29b      	uxth	r3, r3
   1f962:	f003 0301 	and.w	r3, r3, #1
   1f966:	2b00      	cmp	r3, #0
   1f968:	d01b      	beq.n	1f9a2 <zsock_poll_update_ctx+0x74>
		if ((*pev)->state != K_POLL_STATE_NOT_READY || sock_is_eof(ctx)) {
   1f96a:	687b      	ldr	r3, [r7, #4]
   1f96c:	681b      	ldr	r3, [r3, #0]
   1f96e:	68db      	ldr	r3, [r3, #12]
   1f970:	f403 33f8 	and.w	r3, r3, #126976	; 0x1f000
   1f974:	2b00      	cmp	r3, #0
   1f976:	d106      	bne.n	1f986 <zsock_poll_update_ctx+0x58>
   1f978:	2101      	movs	r1, #1
   1f97a:	68f8      	ldr	r0, [r7, #12]
   1f97c:	f7ff fbda 	bl	1f134 <sock_get_flag>
   1f980:	4603      	mov	r3, r0
   1f982:	2b00      	cmp	r3, #0
   1f984:	d007      	beq.n	1f996 <zsock_poll_update_ctx+0x68>
			pfd->revents |= ZSOCK_POLLIN;
   1f986:	68bb      	ldr	r3, [r7, #8]
   1f988:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
   1f98c:	f043 0301 	orr.w	r3, r3, #1
   1f990:	b21a      	sxth	r2, r3
   1f992:	68bb      	ldr	r3, [r7, #8]
   1f994:	80da      	strh	r2, [r3, #6]
		}
		(*pev)++;
   1f996:	687b      	ldr	r3, [r7, #4]
   1f998:	681b      	ldr	r3, [r3, #0]
   1f99a:	f103 0214 	add.w	r2, r3, #20
   1f99e:	687b      	ldr	r3, [r7, #4]
   1f9a0:	601a      	str	r2, [r3, #0]
	}

	return 0;
   1f9a2:	2300      	movs	r3, #0
}
   1f9a4:	4618      	mov	r0, r3
   1f9a6:	3710      	adds	r7, #16
   1f9a8:	46bd      	mov	sp, r7
   1f9aa:	bd80      	pop	{r7, pc}

0001f9ac <zsock_getsockopt_ctx>:
}
#endif

int zsock_getsockopt_ctx(struct net_context *ctx, int level, int optname,
			 void *optval, socklen_t *optlen)
{
   1f9ac:	b580      	push	{r7, lr}
   1f9ae:	b084      	sub	sp, #16
   1f9b0:	af00      	add	r7, sp, #0
   1f9b2:	60f8      	str	r0, [r7, #12]
   1f9b4:	60b9      	str	r1, [r7, #8]
   1f9b6:	607a      	str	r2, [r7, #4]
   1f9b8:	603b      	str	r3, [r7, #0]
	errno = ENOPROTOOPT;
   1f9ba:	f001 ff9b 	bl	218f4 <__errno>
   1f9be:	4602      	mov	r2, r0
   1f9c0:	236d      	movs	r3, #109	; 0x6d
   1f9c2:	6013      	str	r3, [r2, #0]
	return -1;
   1f9c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   1f9c8:	4618      	mov	r0, r3
   1f9ca:	3710      	adds	r7, #16
   1f9cc:	46bd      	mov	sp, r7
   1f9ce:	bd80      	pop	{r7, pc}

0001f9d0 <zsock_setsockopt_ctx>:
	VTABLE_CALL(getsockopt, sock, level, optname, optval, optlen);
}

int zsock_setsockopt_ctx(struct net_context *ctx, int level, int optname,
			 const void *optval, socklen_t optlen)
{
   1f9d0:	b580      	push	{r7, lr}
   1f9d2:	b084      	sub	sp, #16
   1f9d4:	af00      	add	r7, sp, #0
   1f9d6:	60f8      	str	r0, [r7, #12]
   1f9d8:	60b9      	str	r1, [r7, #8]
   1f9da:	607a      	str	r2, [r7, #4]
   1f9dc:	603b      	str	r3, [r7, #0]
	switch (level) {
   1f9de:	68bb      	ldr	r3, [r7, #8]
   1f9e0:	2b06      	cmp	r3, #6
   1f9e2:	d00a      	beq.n	1f9fa <zsock_setsockopt_ctx+0x2a>
   1f9e4:	68bb      	ldr	r3, [r7, #8]
   1f9e6:	2b29      	cmp	r3, #41	; 0x29
   1f9e8:	d00c      	beq.n	1fa04 <zsock_setsockopt_ctx+0x34>
   1f9ea:	68bb      	ldr	r3, [r7, #8]
   1f9ec:	2b01      	cmp	r3, #1
   1f9ee:	d113      	bne.n	1fa18 <zsock_setsockopt_ctx+0x48>
   1f9f0:	687b      	ldr	r3, [r7, #4]
   1f9f2:	2b02      	cmp	r3, #2
   1f9f4:	d10b      	bne.n	1fa0e <zsock_setsockopt_ctx+0x3e>
		switch (optname) {
		case SO_REUSEADDR:
			/* Ignore for now. Provided to let port
			 * existing apps.
			 */
			return 0;
   1f9f6:	2300      	movs	r3, #0
   1f9f8:	e015      	b.n	1fa26 <zsock_setsockopt_ctx+0x56>
   1f9fa:	687b      	ldr	r3, [r7, #4]
   1f9fc:	2b01      	cmp	r3, #1
   1f9fe:	d108      	bne.n	1fa12 <zsock_setsockopt_ctx+0x42>
		switch (optname) {
		case TCP_NODELAY:
			/* Ignore for now. Provided to let port
			 * existing apps.
			 */
			return 0;
   1fa00:	2300      	movs	r3, #0
   1fa02:	e010      	b.n	1fa26 <zsock_setsockopt_ctx+0x56>
   1fa04:	687b      	ldr	r3, [r7, #4]
   1fa06:	2b1a      	cmp	r3, #26
   1fa08:	d105      	bne.n	1fa16 <zsock_setsockopt_ctx+0x46>
		switch (optname) {
		case IPV6_V6ONLY:
			/* Ignore for now. Provided to let port
			 * existing apps.
			 */
			return 0;
   1fa0a:	2300      	movs	r3, #0
   1fa0c:	e00b      	b.n	1fa26 <zsock_setsockopt_ctx+0x56>
		break;
   1fa0e:	bf00      	nop
   1fa10:	e002      	b.n	1fa18 <zsock_setsockopt_ctx+0x48>
		break;
   1fa12:	bf00      	nop
   1fa14:	e000      	b.n	1fa18 <zsock_setsockopt_ctx+0x48>
		}
		break;
   1fa16:	bf00      	nop
	}

	errno = ENOPROTOOPT;
   1fa18:	f001 ff6c 	bl	218f4 <__errno>
   1fa1c:	4602      	mov	r2, r0
   1fa1e:	236d      	movs	r3, #109	; 0x6d
   1fa20:	6013      	str	r3, [r2, #0]
	return -1;
   1fa22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   1fa26:	4618      	mov	r0, r3
   1fa28:	3710      	adds	r7, #16
   1fa2a:	46bd      	mov	sp, r7
   1fa2c:	bd80      	pop	{r7, pc}

0001fa2e <sock_read_vmeth>:
{
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
}

static ssize_t sock_read_vmeth(void *obj, void *buffer, size_t count)
{
   1fa2e:	b580      	push	{r7, lr}
   1fa30:	b086      	sub	sp, #24
   1fa32:	af02      	add	r7, sp, #8
   1fa34:	60f8      	str	r0, [r7, #12]
   1fa36:	60b9      	str	r1, [r7, #8]
   1fa38:	607a      	str	r2, [r7, #4]
	return zsock_recvfrom_ctx(obj, buffer, count, 0, NULL, 0);
   1fa3a:	2300      	movs	r3, #0
   1fa3c:	9301      	str	r3, [sp, #4]
   1fa3e:	2300      	movs	r3, #0
   1fa40:	9300      	str	r3, [sp, #0]
   1fa42:	2300      	movs	r3, #0
   1fa44:	687a      	ldr	r2, [r7, #4]
   1fa46:	68b9      	ldr	r1, [r7, #8]
   1fa48:	68f8      	ldr	r0, [r7, #12]
   1fa4a:	f7ff feca 	bl	1f7e2 <zsock_recvfrom_ctx>
   1fa4e:	4603      	mov	r3, r0
}
   1fa50:	4618      	mov	r0, r3
   1fa52:	3710      	adds	r7, #16
   1fa54:	46bd      	mov	sp, r7
   1fa56:	bd80      	pop	{r7, pc}

0001fa58 <sock_write_vmeth>:

static ssize_t sock_write_vmeth(void *obj, const void *buffer, size_t count)
{
   1fa58:	b580      	push	{r7, lr}
   1fa5a:	b086      	sub	sp, #24
   1fa5c:	af02      	add	r7, sp, #8
   1fa5e:	60f8      	str	r0, [r7, #12]
   1fa60:	60b9      	str	r1, [r7, #8]
   1fa62:	607a      	str	r2, [r7, #4]
	return zsock_sendto_ctx(obj, buffer, count, 0, NULL, 0);
   1fa64:	2300      	movs	r3, #0
   1fa66:	9301      	str	r3, [sp, #4]
   1fa68:	2300      	movs	r3, #0
   1fa6a:	9300      	str	r3, [sp, #0]
   1fa6c:	2300      	movs	r3, #0
   1fa6e:	687a      	ldr	r2, [r7, #4]
   1fa70:	68b9      	ldr	r1, [r7, #8]
   1fa72:	68f8      	ldr	r0, [r7, #12]
   1fa74:	f7ef f89c 	bl	ebb0 <zsock_sendto_ctx>
   1fa78:	4603      	mov	r3, r0
}
   1fa7a:	4618      	mov	r0, r3
   1fa7c:	3710      	adds	r7, #16
   1fa7e:	46bd      	mov	sp, r7
   1fa80:	bd80      	pop	{r7, pc}

0001fa82 <sock_ioctl_vmeth>:

static int sock_ioctl_vmeth(void *obj, unsigned int request, va_list args)
{
   1fa82:	b580      	push	{r7, lr}
   1fa84:	b08a      	sub	sp, #40	; 0x28
   1fa86:	af00      	add	r7, sp, #0
   1fa88:	60f8      	str	r0, [r7, #12]
   1fa8a:	60b9      	str	r1, [r7, #8]
   1fa8c:	607a      	str	r2, [r7, #4]
	switch (request) {
   1fa8e:	68bb      	ldr	r3, [r7, #8]
   1fa90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1fa94:	d037      	beq.n	1fb06 <sock_ioctl_vmeth+0x84>
   1fa96:	68bb      	ldr	r3, [r7, #8]
   1fa98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1fa9c:	d806      	bhi.n	1faac <sock_ioctl_vmeth+0x2a>
   1fa9e:	68bb      	ldr	r3, [r7, #8]
   1faa0:	2b03      	cmp	r3, #3
   1faa2:	d00d      	beq.n	1fac0 <sock_ioctl_vmeth+0x3e>
   1faa4:	68bb      	ldr	r3, [r7, #8]
   1faa6:	2b04      	cmp	r3, #4
   1faa8:	d016      	beq.n	1fad8 <sock_ioctl_vmeth+0x56>
   1faaa:	e059      	b.n	1fb60 <sock_ioctl_vmeth+0xde>
   1faac:	68bb      	ldr	r3, [r7, #8]
   1faae:	f240 1203 	movw	r2, #259	; 0x103
   1fab2:	4293      	cmp	r3, r2
   1fab4:	d02c      	beq.n	1fb10 <sock_ioctl_vmeth+0x8e>
   1fab6:	68bb      	ldr	r3, [r7, #8]
   1fab8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1fabc:	d03f      	beq.n	1fb3e <sock_ioctl_vmeth+0xbc>
   1fabe:	e04f      	b.n	1fb60 <sock_ioctl_vmeth+0xde>

	/* In Zephyr, fcntl() is just an alias of ioctl(). */
	case F_GETFL:
		if (sock_is_nonblock(obj)) {
   1fac0:	2102      	movs	r1, #2
   1fac2:	68f8      	ldr	r0, [r7, #12]
   1fac4:	f7ff fb36 	bl	1f134 <sock_get_flag>
   1fac8:	4603      	mov	r3, r0
   1faca:	2b00      	cmp	r3, #0
   1facc:	d002      	beq.n	1fad4 <sock_ioctl_vmeth+0x52>
		    return O_NONBLOCK;
   1face:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   1fad2:	e04c      	b.n	1fb6e <sock_ioctl_vmeth+0xec>
		}

		return 0;
   1fad4:	2300      	movs	r3, #0
   1fad6:	e04a      	b.n	1fb6e <sock_ioctl_vmeth+0xec>

	case F_SETFL: {
		int flags;

		flags = va_arg(args, int);
   1fad8:	687b      	ldr	r3, [r7, #4]
   1fada:	1d1a      	adds	r2, r3, #4
   1fadc:	607a      	str	r2, [r7, #4]
   1fade:	681b      	ldr	r3, [r3, #0]
   1fae0:	627b      	str	r3, [r7, #36]	; 0x24

		if (flags & O_NONBLOCK) {
   1fae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   1fae8:	2b00      	cmp	r3, #0
   1faea:	d005      	beq.n	1faf8 <sock_ioctl_vmeth+0x76>
			sock_set_flag(obj, SOCK_NONBLOCK, SOCK_NONBLOCK);
   1faec:	2202      	movs	r2, #2
   1faee:	2102      	movs	r1, #2
   1faf0:	68f8      	ldr	r0, [r7, #12]
   1faf2:	f7ff fb07 	bl	1f104 <sock_set_flag>
   1faf6:	e004      	b.n	1fb02 <sock_ioctl_vmeth+0x80>
		} else {
			sock_set_flag(obj, SOCK_NONBLOCK, 0);
   1faf8:	2200      	movs	r2, #0
   1fafa:	2102      	movs	r1, #2
   1fafc:	68f8      	ldr	r0, [r7, #12]
   1fafe:	f7ff fb01 	bl	1f104 <sock_set_flag>
		}

		return 0;
   1fb02:	2300      	movs	r3, #0
   1fb04:	e033      	b.n	1fb6e <sock_ioctl_vmeth+0xec>
	}

	case ZFD_IOCTL_CLOSE:
		return zsock_close_ctx(obj);
   1fb06:	68f8      	ldr	r0, [r7, #12]
   1fb08:	f7ff fb94 	bl	1f234 <zsock_close_ctx>
   1fb0c:	4603      	mov	r3, r0
   1fb0e:	e02e      	b.n	1fb6e <sock_ioctl_vmeth+0xec>
	case ZFD_IOCTL_POLL_PREPARE: {
		struct zsock_pollfd *pfd;
		struct k_poll_event **pev;
		struct k_poll_event *pev_end;

		pfd = va_arg(args, struct zsock_pollfd *);
   1fb10:	687b      	ldr	r3, [r7, #4]
   1fb12:	1d1a      	adds	r2, r3, #4
   1fb14:	607a      	str	r2, [r7, #4]
   1fb16:	681b      	ldr	r3, [r3, #0]
   1fb18:	623b      	str	r3, [r7, #32]
		pev = va_arg(args, struct k_poll_event **);
   1fb1a:	687b      	ldr	r3, [r7, #4]
   1fb1c:	1d1a      	adds	r2, r3, #4
   1fb1e:	607a      	str	r2, [r7, #4]
   1fb20:	681b      	ldr	r3, [r3, #0]
   1fb22:	61fb      	str	r3, [r7, #28]
		pev_end = va_arg(args, struct k_poll_event *);
   1fb24:	687b      	ldr	r3, [r7, #4]
   1fb26:	1d1a      	adds	r2, r3, #4
   1fb28:	607a      	str	r2, [r7, #4]
   1fb2a:	681b      	ldr	r3, [r3, #0]
   1fb2c:	61bb      	str	r3, [r7, #24]

		return zsock_poll_prepare_ctx(obj, pfd, pev, pev_end);
   1fb2e:	69bb      	ldr	r3, [r7, #24]
   1fb30:	69fa      	ldr	r2, [r7, #28]
   1fb32:	6a39      	ldr	r1, [r7, #32]
   1fb34:	68f8      	ldr	r0, [r7, #12]
   1fb36:	f7ff feac 	bl	1f892 <zsock_poll_prepare_ctx>
   1fb3a:	4603      	mov	r3, r0
   1fb3c:	e017      	b.n	1fb6e <sock_ioctl_vmeth+0xec>

	case ZFD_IOCTL_POLL_UPDATE: {
		struct zsock_pollfd *pfd;
		struct k_poll_event **pev;

		pfd = va_arg(args, struct zsock_pollfd *);
   1fb3e:	687b      	ldr	r3, [r7, #4]
   1fb40:	1d1a      	adds	r2, r3, #4
   1fb42:	607a      	str	r2, [r7, #4]
   1fb44:	681b      	ldr	r3, [r3, #0]
   1fb46:	617b      	str	r3, [r7, #20]
		pev = va_arg(args, struct k_poll_event **);
   1fb48:	687b      	ldr	r3, [r7, #4]
   1fb4a:	1d1a      	adds	r2, r3, #4
   1fb4c:	607a      	str	r2, [r7, #4]
   1fb4e:	681b      	ldr	r3, [r3, #0]
   1fb50:	613b      	str	r3, [r7, #16]

		return zsock_poll_update_ctx(obj, pfd, pev);
   1fb52:	693a      	ldr	r2, [r7, #16]
   1fb54:	6979      	ldr	r1, [r7, #20]
   1fb56:	68f8      	ldr	r0, [r7, #12]
   1fb58:	f7ff fee9 	bl	1f92e <zsock_poll_update_ctx>
   1fb5c:	4603      	mov	r3, r0
   1fb5e:	e006      	b.n	1fb6e <sock_ioctl_vmeth+0xec>
	}

	default:
		errno = EOPNOTSUPP;
   1fb60:	f001 fec8 	bl	218f4 <__errno>
   1fb64:	4602      	mov	r2, r0
   1fb66:	235f      	movs	r3, #95	; 0x5f
   1fb68:	6013      	str	r3, [r2, #0]
		return -1;
   1fb6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
   1fb6e:	4618      	mov	r0, r3
   1fb70:	3728      	adds	r7, #40	; 0x28
   1fb72:	46bd      	mov	sp, r7
   1fb74:	bd80      	pop	{r7, pc}

0001fb76 <sock_bind_vmeth>:

static int sock_bind_vmeth(void *obj, const struct sockaddr *addr,
			   socklen_t addrlen)
{
   1fb76:	b580      	push	{r7, lr}
   1fb78:	b084      	sub	sp, #16
   1fb7a:	af00      	add	r7, sp, #0
   1fb7c:	60f8      	str	r0, [r7, #12]
   1fb7e:	60b9      	str	r1, [r7, #8]
   1fb80:	607a      	str	r2, [r7, #4]
	return zsock_bind_ctx(obj, addr, addrlen);
   1fb82:	687a      	ldr	r2, [r7, #4]
   1fb84:	68b9      	ldr	r1, [r7, #8]
   1fb86:	68f8      	ldr	r0, [r7, #12]
   1fb88:	f7ee ff0e 	bl	e9a8 <zsock_bind_ctx>
   1fb8c:	4603      	mov	r3, r0
}
   1fb8e:	4618      	mov	r0, r3
   1fb90:	3710      	adds	r7, #16
   1fb92:	46bd      	mov	sp, r7
   1fb94:	bd80      	pop	{r7, pc}

0001fb96 <sock_connect_vmeth>:

static int sock_connect_vmeth(void *obj, const struct sockaddr *addr,
			      socklen_t addrlen)
{
   1fb96:	b580      	push	{r7, lr}
   1fb98:	b084      	sub	sp, #16
   1fb9a:	af00      	add	r7, sp, #0
   1fb9c:	60f8      	str	r0, [r7, #12]
   1fb9e:	60b9      	str	r1, [r7, #8]
   1fba0:	607a      	str	r2, [r7, #4]
	return zsock_connect_ctx(obj, addr, addrlen);
   1fba2:	687a      	ldr	r2, [r7, #4]
   1fba4:	68b9      	ldr	r1, [r7, #8]
   1fba6:	68f8      	ldr	r0, [r7, #12]
   1fba8:	f7ee ff38 	bl	ea1c <zsock_connect_ctx>
   1fbac:	4603      	mov	r3, r0
}
   1fbae:	4618      	mov	r0, r3
   1fbb0:	3710      	adds	r7, #16
   1fbb2:	46bd      	mov	sp, r7
   1fbb4:	bd80      	pop	{r7, pc}

0001fbb6 <sock_listen_vmeth>:

static int sock_listen_vmeth(void *obj, int backlog)
{
   1fbb6:	b580      	push	{r7, lr}
   1fbb8:	b082      	sub	sp, #8
   1fbba:	af00      	add	r7, sp, #0
   1fbbc:	6078      	str	r0, [r7, #4]
   1fbbe:	6039      	str	r1, [r7, #0]
	return zsock_listen_ctx(obj, backlog);
   1fbc0:	6839      	ldr	r1, [r7, #0]
   1fbc2:	6878      	ldr	r0, [r7, #4]
   1fbc4:	f7ee ff64 	bl	ea90 <zsock_listen_ctx>
   1fbc8:	4603      	mov	r3, r0
}
   1fbca:	4618      	mov	r0, r3
   1fbcc:	3708      	adds	r7, #8
   1fbce:	46bd      	mov	sp, r7
   1fbd0:	bd80      	pop	{r7, pc}

0001fbd2 <sock_accept_vmeth>:

static int sock_accept_vmeth(void *obj, struct sockaddr *addr,
			     socklen_t *addrlen)
{
   1fbd2:	b580      	push	{r7, lr}
   1fbd4:	b084      	sub	sp, #16
   1fbd6:	af00      	add	r7, sp, #0
   1fbd8:	60f8      	str	r0, [r7, #12]
   1fbda:	60b9      	str	r1, [r7, #8]
   1fbdc:	607a      	str	r2, [r7, #4]
	return zsock_accept_ctx(obj, addr, addrlen);
   1fbde:	687a      	ldr	r2, [r7, #4]
   1fbe0:	68b9      	ldr	r1, [r7, #8]
   1fbe2:	68f8      	ldr	r0, [r7, #12]
   1fbe4:	f7ee ff84 	bl	eaf0 <zsock_accept_ctx>
   1fbe8:	4603      	mov	r3, r0
}
   1fbea:	4618      	mov	r0, r3
   1fbec:	3710      	adds	r7, #16
   1fbee:	46bd      	mov	sp, r7
   1fbf0:	bd80      	pop	{r7, pc}

0001fbf2 <sock_sendto_vmeth>:

static ssize_t sock_sendto_vmeth(void *obj, const void *buf, size_t len,
				 int flags, const struct sockaddr *dest_addr,
				 socklen_t addrlen)
{
   1fbf2:	b580      	push	{r7, lr}
   1fbf4:	b086      	sub	sp, #24
   1fbf6:	af02      	add	r7, sp, #8
   1fbf8:	60f8      	str	r0, [r7, #12]
   1fbfa:	60b9      	str	r1, [r7, #8]
   1fbfc:	607a      	str	r2, [r7, #4]
   1fbfe:	603b      	str	r3, [r7, #0]
	return zsock_sendto_ctx(obj, buf, len, flags, dest_addr, addrlen);
   1fc00:	69fb      	ldr	r3, [r7, #28]
   1fc02:	9301      	str	r3, [sp, #4]
   1fc04:	69bb      	ldr	r3, [r7, #24]
   1fc06:	9300      	str	r3, [sp, #0]
   1fc08:	683b      	ldr	r3, [r7, #0]
   1fc0a:	687a      	ldr	r2, [r7, #4]
   1fc0c:	68b9      	ldr	r1, [r7, #8]
   1fc0e:	68f8      	ldr	r0, [r7, #12]
   1fc10:	f7ee ffce 	bl	ebb0 <zsock_sendto_ctx>
   1fc14:	4603      	mov	r3, r0
}
   1fc16:	4618      	mov	r0, r3
   1fc18:	3710      	adds	r7, #16
   1fc1a:	46bd      	mov	sp, r7
   1fc1c:	bd80      	pop	{r7, pc}

0001fc1e <sock_recvfrom_vmeth>:

static ssize_t sock_recvfrom_vmeth(void *obj, void *buf, size_t max_len,
				   int flags, struct sockaddr *src_addr,
				   socklen_t *addrlen)
{
   1fc1e:	b580      	push	{r7, lr}
   1fc20:	b086      	sub	sp, #24
   1fc22:	af02      	add	r7, sp, #8
   1fc24:	60f8      	str	r0, [r7, #12]
   1fc26:	60b9      	str	r1, [r7, #8]
   1fc28:	607a      	str	r2, [r7, #4]
   1fc2a:	603b      	str	r3, [r7, #0]
	return zsock_recvfrom_ctx(obj, buf, max_len, flags,
   1fc2c:	69fb      	ldr	r3, [r7, #28]
   1fc2e:	9301      	str	r3, [sp, #4]
   1fc30:	69bb      	ldr	r3, [r7, #24]
   1fc32:	9300      	str	r3, [sp, #0]
   1fc34:	683b      	ldr	r3, [r7, #0]
   1fc36:	687a      	ldr	r2, [r7, #4]
   1fc38:	68b9      	ldr	r1, [r7, #8]
   1fc3a:	68f8      	ldr	r0, [r7, #12]
   1fc3c:	f7ff fdd1 	bl	1f7e2 <zsock_recvfrom_ctx>
   1fc40:	4603      	mov	r3, r0
				  src_addr, addrlen);
}
   1fc42:	4618      	mov	r0, r3
   1fc44:	3710      	adds	r7, #16
   1fc46:	46bd      	mov	sp, r7
   1fc48:	bd80      	pop	{r7, pc}

0001fc4a <sock_getsockopt_vmeth>:

static int sock_getsockopt_vmeth(void *obj, int level, int optname,
				 void *optval, socklen_t *optlen)
{
   1fc4a:	b580      	push	{r7, lr}
   1fc4c:	b086      	sub	sp, #24
   1fc4e:	af02      	add	r7, sp, #8
   1fc50:	60f8      	str	r0, [r7, #12]
   1fc52:	60b9      	str	r1, [r7, #8]
   1fc54:	607a      	str	r2, [r7, #4]
   1fc56:	603b      	str	r3, [r7, #0]
	return zsock_getsockopt_ctx(obj, level, optname, optval, optlen);
   1fc58:	69bb      	ldr	r3, [r7, #24]
   1fc5a:	9300      	str	r3, [sp, #0]
   1fc5c:	683b      	ldr	r3, [r7, #0]
   1fc5e:	687a      	ldr	r2, [r7, #4]
   1fc60:	68b9      	ldr	r1, [r7, #8]
   1fc62:	68f8      	ldr	r0, [r7, #12]
   1fc64:	f7ff fea2 	bl	1f9ac <zsock_getsockopt_ctx>
   1fc68:	4603      	mov	r3, r0
}
   1fc6a:	4618      	mov	r0, r3
   1fc6c:	3710      	adds	r7, #16
   1fc6e:	46bd      	mov	sp, r7
   1fc70:	bd80      	pop	{r7, pc}

0001fc72 <sock_setsockopt_vmeth>:

static int sock_setsockopt_vmeth(void *obj, int level, int optname,
				 const void *optval, socklen_t optlen)
{
   1fc72:	b580      	push	{r7, lr}
   1fc74:	b086      	sub	sp, #24
   1fc76:	af02      	add	r7, sp, #8
   1fc78:	60f8      	str	r0, [r7, #12]
   1fc7a:	60b9      	str	r1, [r7, #8]
   1fc7c:	607a      	str	r2, [r7, #4]
   1fc7e:	603b      	str	r3, [r7, #0]
	return zsock_setsockopt_ctx(obj, level, optname, optval, optlen);
   1fc80:	69bb      	ldr	r3, [r7, #24]
   1fc82:	9300      	str	r3, [sp, #0]
   1fc84:	683b      	ldr	r3, [r7, #0]
   1fc86:	687a      	ldr	r2, [r7, #4]
   1fc88:	68b9      	ldr	r1, [r7, #8]
   1fc8a:	68f8      	ldr	r0, [r7, #12]
   1fc8c:	f7ff fea0 	bl	1f9d0 <zsock_setsockopt_ctx>
   1fc90:	4603      	mov	r3, r0
}
   1fc92:	4618      	mov	r0, r3
   1fc94:	3710      	adds	r7, #16
   1fc96:	46bd      	mov	sp, r7
   1fc98:	bd80      	pop	{r7, pc}

0001fc9a <atomic_or>:
{
   1fc9a:	b480      	push	{r7}
   1fc9c:	b083      	sub	sp, #12
   1fc9e:	af00      	add	r7, sp, #0
   1fca0:	6078      	str	r0, [r7, #4]
   1fca2:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1fca4:	683a      	ldr	r2, [r7, #0]
   1fca6:	687b      	ldr	r3, [r7, #4]
   1fca8:	f3bf 8f5b 	dmb	ish
   1fcac:	e853 1f00 	ldrex	r1, [r3]
   1fcb0:	ea41 0002 	orr.w	r0, r1, r2
   1fcb4:	e843 0c00 	strex	ip, r0, [r3]
   1fcb8:	f1bc 0f00 	cmp.w	ip, #0
   1fcbc:	d1f6      	bne.n	1fcac <atomic_or+0x12>
   1fcbe:	f3bf 8f5b 	dmb	ish
   1fcc2:	460b      	mov	r3, r1
}
   1fcc4:	4618      	mov	r0, r3
   1fcc6:	370c      	adds	r7, #12
   1fcc8:	46bd      	mov	sp, r7
   1fcca:	bc80      	pop	{r7}
   1fccc:	4770      	bx	lr

0001fcce <atomic_test_and_set_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
   1fcce:	b580      	push	{r7, lr}
   1fcd0:	b084      	sub	sp, #16
   1fcd2:	af00      	add	r7, sp, #0
   1fcd4:	6078      	str	r0, [r7, #4]
   1fcd6:	6039      	str	r1, [r7, #0]
	atomic_val_t mask = ATOMIC_MASK(bit);
   1fcd8:	683b      	ldr	r3, [r7, #0]
   1fcda:	f003 031f 	and.w	r3, r3, #31
   1fcde:	2201      	movs	r2, #1
   1fce0:	fa02 f303 	lsl.w	r3, r2, r3
   1fce4:	60fb      	str	r3, [r7, #12]
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1fce6:	683b      	ldr	r3, [r7, #0]
   1fce8:	095b      	lsrs	r3, r3, #5
   1fcea:	009b      	lsls	r3, r3, #2
   1fcec:	687a      	ldr	r2, [r7, #4]
   1fcee:	4413      	add	r3, r2
   1fcf0:	68f9      	ldr	r1, [r7, #12]
   1fcf2:	4618      	mov	r0, r3
   1fcf4:	f7ff ffd1 	bl	1fc9a <atomic_or>
   1fcf8:	60b8      	str	r0, [r7, #8]

	return (old & mask) != 0;
   1fcfa:	68ba      	ldr	r2, [r7, #8]
   1fcfc:	68fb      	ldr	r3, [r7, #12]
   1fcfe:	4013      	ands	r3, r2
   1fd00:	2b00      	cmp	r3, #0
   1fd02:	bf14      	ite	ne
   1fd04:	2301      	movne	r3, #1
   1fd06:	2300      	moveq	r3, #0
   1fd08:	b2db      	uxtb	r3, r3
}
   1fd0a:	4618      	mov	r0, r3
   1fd0c:	3710      	adds	r7, #16
   1fd0e:	46bd      	mov	sp, r7
   1fd10:	bd80      	pop	{r7, pc}

0001fd12 <_is_user_context>:
{
   1fd12:	b480      	push	{r7}
   1fd14:	af00      	add	r7, sp, #0
	return false;
   1fd16:	2300      	movs	r3, #0
}
   1fd18:	4618      	mov	r0, r3
   1fd1a:	46bd      	mov	sp, r7
   1fd1c:	bc80      	pop	{r7}
   1fd1e:	4770      	bx	lr

0001fd20 <k_work_init>:
{
   1fd20:	b480      	push	{r7}
   1fd22:	b083      	sub	sp, #12
   1fd24:	af00      	add	r7, sp, #0
   1fd26:	6078      	str	r0, [r7, #4]
   1fd28:	6039      	str	r1, [r7, #0]
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1fd2a:	687b      	ldr	r3, [r7, #4]
   1fd2c:	2200      	movs	r2, #0
   1fd2e:	601a      	str	r2, [r3, #0]
   1fd30:	687b      	ldr	r3, [r7, #4]
   1fd32:	683a      	ldr	r2, [r7, #0]
   1fd34:	605a      	str	r2, [r3, #4]
   1fd36:	687b      	ldr	r3, [r7, #4]
   1fd38:	2200      	movs	r2, #0
   1fd3a:	609a      	str	r2, [r3, #8]
}
   1fd3c:	bf00      	nop
   1fd3e:	370c      	adds	r7, #12
   1fd40:	46bd      	mov	sp, r7
   1fd42:	bc80      	pop	{r7}
   1fd44:	4770      	bx	lr

0001fd46 <k_work_submit_to_queue>:
{
   1fd46:	b580      	push	{r7, lr}
   1fd48:	b082      	sub	sp, #8
   1fd4a:	af00      	add	r7, sp, #0
   1fd4c:	6078      	str	r0, [r7, #4]
   1fd4e:	6039      	str	r1, [r7, #0]
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1fd50:	683b      	ldr	r3, [r7, #0]
   1fd52:	3308      	adds	r3, #8
   1fd54:	2100      	movs	r1, #0
   1fd56:	4618      	mov	r0, r3
   1fd58:	f7ff ffb9 	bl	1fcce <atomic_test_and_set_bit>
   1fd5c:	4603      	mov	r3, r0
   1fd5e:	f083 0301 	eor.w	r3, r3, #1
   1fd62:	b2db      	uxtb	r3, r3
   1fd64:	2b00      	cmp	r3, #0
   1fd66:	d004      	beq.n	1fd72 <k_work_submit_to_queue+0x2c>
		k_queue_append(&work_q->queue, work);
   1fd68:	687b      	ldr	r3, [r7, #4]
   1fd6a:	6839      	ldr	r1, [r7, #0]
   1fd6c:	4618      	mov	r0, r3
   1fd6e:	f00a fcfe 	bl	2a76e <k_queue_append>
}
   1fd72:	bf00      	nop
   1fd74:	3708      	adds	r7, #8
   1fd76:	46bd      	mov	sp, r7
   1fd78:	bd80      	pop	{r7, pc}

0001fd7a <k_sem_init>:
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   1fd7a:	b580      	push	{r7, lr}
   1fd7c:	b084      	sub	sp, #16
   1fd7e:	af00      	add	r7, sp, #0
   1fd80:	60f8      	str	r0, [r7, #12]
   1fd82:	60b9      	str	r1, [r7, #8]
   1fd84:	607a      	str	r2, [r7, #4]
   1fd86:	687a      	ldr	r2, [r7, #4]
   1fd88:	68b9      	ldr	r1, [r7, #8]
   1fd8a:	68f8      	ldr	r0, [r7, #12]
   1fd8c:	f00b fabc 	bl	2b308 <z_impl_k_sem_init>
   1fd90:	bf00      	nop
   1fd92:	3710      	adds	r7, #16
   1fd94:	46bd      	mov	sp, r7
   1fd96:	bd80      	pop	{r7, pc}

0001fd98 <k_sem_take>:
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   1fd98:	b580      	push	{r7, lr}
   1fd9a:	b082      	sub	sp, #8
   1fd9c:	af00      	add	r7, sp, #0
   1fd9e:	6078      	str	r0, [r7, #4]
   1fda0:	6039      	str	r1, [r7, #0]
   1fda2:	6839      	ldr	r1, [r7, #0]
   1fda4:	6878      	ldr	r0, [r7, #4]
   1fda6:	f7f7 ff1f 	bl	17be8 <z_impl_k_sem_take>
   1fdaa:	4603      	mov	r3, r0
   1fdac:	4618      	mov	r0, r3
   1fdae:	3708      	adds	r7, #8
   1fdb0:	46bd      	mov	sp, r7
   1fdb2:	bd80      	pop	{r7, pc}

0001fdb4 <k_sem_give>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   1fdb4:	b580      	push	{r7, lr}
   1fdb6:	b082      	sub	sp, #8
   1fdb8:	af00      	add	r7, sp, #0
   1fdba:	6078      	str	r0, [r7, #4]
   1fdbc:	6878      	ldr	r0, [r7, #4]
   1fdbe:	f7f7 fef1 	bl	17ba4 <z_impl_k_sem_give>
   1fdc2:	bf00      	nop
   1fdc4:	3708      	adds	r7, #8
   1fdc6:	46bd      	mov	sp, r7
   1fdc8:	bd80      	pop	{r7, pc}

0001fdca <usb_print_setup>:
{
   1fdca:	b580      	push	{r7, lr}
   1fdcc:	b08e      	sub	sp, #56	; 0x38
   1fdce:	af00      	add	r7, sp, #0
   1fdd0:	6078      	str	r0, [r7, #4]
	LOG_DBG("Setup: %x %x %x %x %x",
   1fdd2:	f7ff ff9e 	bl	1fd12 <_is_user_context>
   1fdd6:	4603      	mov	r3, r0
   1fdd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
}
   1fddc:	bf00      	nop
   1fdde:	3738      	adds	r7, #56	; 0x38
   1fde0:	46bd      	mov	sp, r7
   1fde2:	bd80      	pop	{r7, pc}

0001fde4 <usb_vbus_set>:
{
   1fde4:	b480      	push	{r7}
   1fde6:	b083      	sub	sp, #12
   1fde8:	af00      	add	r7, sp, #0
   1fdea:	4603      	mov	r3, r0
   1fdec:	71fb      	strb	r3, [r7, #7]
	return 0;
   1fdee:	2300      	movs	r3, #0
}
   1fdf0:	4618      	mov	r0, r3
   1fdf2:	370c      	adds	r7, #12
   1fdf4:	46bd      	mov	sp, r7
   1fdf6:	bc80      	pop	{r7}
   1fdf8:	4770      	bx	lr

0001fdfa <usb_transfer_work>:
{
   1fdfa:	b590      	push	{r4, r7, lr}
   1fdfc:	b08f      	sub	sp, #60	; 0x3c
   1fdfe:	af00      	add	r7, sp, #0
   1fe00:	6078      	str	r0, [r7, #4]
	int ret = 0;
   1fe02:	2300      	movs	r3, #0
   1fe04:	637b      	str	r3, [r7, #52]	; 0x34
	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
   1fe06:	687b      	ldr	r3, [r7, #4]
   1fe08:	3b34      	subs	r3, #52	; 0x34
   1fe0a:	627b      	str	r3, [r7, #36]	; 0x24
	ep = trans->ep;
   1fe0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fe0e:	781b      	ldrb	r3, [r3, #0]
   1fe10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (trans->status != -EBUSY) {
   1fe14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fe16:	685b      	ldr	r3, [r3, #4]
   1fe18:	f113 0f10 	cmn.w	r3, #16
   1fe1c:	f040 8085 	bne.w	1ff2a <usb_transfer_work+0x130>
	if (trans->flags & USB_TRANS_WRITE) {
   1fe20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fe22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1fe24:	f003 0302 	and.w	r3, r3, #2
   1fe28:	2b00      	cmp	r3, #0
   1fe2a:	d03a      	beq.n	1fea2 <usb_transfer_work+0xa8>
		if (!trans->bsize) {
   1fe2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fe2e:	68db      	ldr	r3, [r3, #12]
   1fe30:	2b00      	cmp	r3, #0
   1fe32:	d110      	bne.n	1fe56 <usb_transfer_work+0x5c>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
   1fe34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fe36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1fe38:	f003 0304 	and.w	r3, r3, #4
   1fe3c:	2b00      	cmp	r3, #0
   1fe3e:	d106      	bne.n	1fe4e <usb_transfer_work+0x54>
				usb_dc_ep_write(ep, NULL, 0, NULL);
   1fe40:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
   1fe44:	2300      	movs	r3, #0
   1fe46:	2200      	movs	r2, #0
   1fe48:	2100      	movs	r1, #0
   1fe4a:	f7f1 fa13 	bl	11274 <usb_dc_ep_write>
			trans->status = 0;
   1fe4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fe50:	2200      	movs	r2, #0
   1fe52:	605a      	str	r2, [r3, #4]
			goto done;
   1fe54:	e06a      	b.n	1ff2c <usb_transfer_work+0x132>
		ret = usb_dc_ep_write(ep, trans->buffer, trans->bsize, &bytes);
   1fe56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fe58:	6899      	ldr	r1, [r3, #8]
   1fe5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fe5c:	68da      	ldr	r2, [r3, #12]
   1fe5e:	f107 031c 	add.w	r3, r7, #28
   1fe62:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
   1fe66:	f7f1 fa05 	bl	11274 <usb_dc_ep_write>
   1fe6a:	6378      	str	r0, [r7, #52]	; 0x34
		if (ret) {
   1fe6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1fe6e:	2b00      	cmp	r3, #0
   1fe70:	d004      	beq.n	1fe7c <usb_transfer_work+0x82>
			trans->status = -EINVAL;
   1fe72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fe74:	f06f 0215 	mvn.w	r2, #21
   1fe78:	605a      	str	r2, [r3, #4]
			goto done;
   1fe7a:	e057      	b.n	1ff2c <usb_transfer_work+0x132>
		trans->buffer += bytes;
   1fe7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fe7e:	689a      	ldr	r2, [r3, #8]
   1fe80:	69fb      	ldr	r3, [r7, #28]
   1fe82:	441a      	add	r2, r3
   1fe84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fe86:	609a      	str	r2, [r3, #8]
		trans->bsize -= bytes;
   1fe88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fe8a:	68da      	ldr	r2, [r3, #12]
   1fe8c:	69fb      	ldr	r3, [r7, #28]
   1fe8e:	1ad2      	subs	r2, r2, r3
   1fe90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fe92:	60da      	str	r2, [r3, #12]
		trans->tsize += bytes;
   1fe94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fe96:	691a      	ldr	r2, [r3, #16]
   1fe98:	69fb      	ldr	r3, [r7, #28]
   1fe9a:	441a      	add	r2, r3
   1fe9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fe9e:	611a      	str	r2, [r3, #16]
   1fea0:	e044      	b.n	1ff2c <usb_transfer_work+0x132>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
   1fea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fea4:	6899      	ldr	r1, [r3, #8]
   1fea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fea8:	68da      	ldr	r2, [r3, #12]
   1feaa:	f107 031c 	add.w	r3, r7, #28
   1feae:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
   1feb2:	f001 f8bf 	bl	21034 <usb_dc_ep_read_wait>
   1feb6:	6378      	str	r0, [r7, #52]	; 0x34
		if (ret) {
   1feb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1feba:	2b00      	cmp	r3, #0
   1febc:	d004      	beq.n	1fec8 <usb_transfer_work+0xce>
			trans->status = -EINVAL;
   1febe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fec0:	f06f 0215 	mvn.w	r2, #21
   1fec4:	605a      	str	r2, [r3, #4]
			goto done;
   1fec6:	e031      	b.n	1ff2c <usb_transfer_work+0x132>
		trans->buffer += bytes;
   1fec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1feca:	689a      	ldr	r2, [r3, #8]
   1fecc:	69fb      	ldr	r3, [r7, #28]
   1fece:	441a      	add	r2, r3
   1fed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fed2:	609a      	str	r2, [r3, #8]
		trans->bsize -= bytes;
   1fed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fed6:	68da      	ldr	r2, [r3, #12]
   1fed8:	69fb      	ldr	r3, [r7, #28]
   1feda:	1ad2      	subs	r2, r2, r3
   1fedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fede:	60da      	str	r2, [r3, #12]
		trans->tsize += bytes;
   1fee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fee2:	691a      	ldr	r2, [r3, #16]
   1fee4:	69fb      	ldr	r3, [r7, #28]
   1fee6:	441a      	add	r2, r3
   1fee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1feea:	611a      	str	r2, [r3, #16]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
   1feec:	69fb      	ldr	r3, [r7, #28]
   1feee:	2b00      	cmp	r3, #0
   1fef0:	d011      	beq.n	1ff16 <usb_transfer_work+0x11c>
   1fef2:	69fc      	ldr	r4, [r7, #28]
   1fef4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   1fef8:	4618      	mov	r0, r3
   1fefa:	f001 f9dc 	bl	212b6 <usb_dc_ep_mps>
   1fefe:	4603      	mov	r3, r0
   1ff00:	fbb4 f2f3 	udiv	r2, r4, r3
   1ff04:	fb03 f302 	mul.w	r3, r3, r2
   1ff08:	1ae3      	subs	r3, r4, r3
   1ff0a:	2b00      	cmp	r3, #0
   1ff0c:	d103      	bne.n	1ff16 <usb_transfer_work+0x11c>
   1ff0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ff10:	68db      	ldr	r3, [r3, #12]
   1ff12:	2b00      	cmp	r3, #0
   1ff14:	d103      	bne.n	1ff1e <usb_transfer_work+0x124>
			trans->status = 0;
   1ff16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ff18:	2200      	movs	r2, #0
   1ff1a:	605a      	str	r2, [r3, #4]
			goto done;
   1ff1c:	e006      	b.n	1ff2c <usb_transfer_work+0x132>
		usb_dc_ep_read_continue(ep);
   1ff1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   1ff22:	4618      	mov	r0, r3
   1ff24:	f001 f904 	bl	21130 <usb_dc_ep_read_continue>
   1ff28:	e000      	b.n	1ff2c <usb_transfer_work+0x132>
		goto done;
   1ff2a:	bf00      	nop
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
   1ff2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ff2e:	685b      	ldr	r3, [r3, #4]
   1ff30:	f113 0f10 	cmn.w	r3, #16
   1ff34:	d02a      	beq.n	1ff8c <usb_transfer_work+0x192>
   1ff36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ff38:	695b      	ldr	r3, [r3, #20]
   1ff3a:	2b00      	cmp	r3, #0
   1ff3c:	d026      	beq.n	1ff8c <usb_transfer_work+0x192>
		usb_transfer_callback cb = trans->cb;
   1ff3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ff40:	695b      	ldr	r3, [r3, #20]
   1ff42:	633b      	str	r3, [r7, #48]	; 0x30
		int tsize = trans->tsize;
   1ff44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ff46:	691b      	ldr	r3, [r3, #16]
   1ff48:	62fb      	str	r3, [r7, #44]	; 0x2c
		void *priv = trans->priv;
   1ff4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ff4c:	699b      	ldr	r3, [r3, #24]
   1ff4e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (k_is_in_isr()) {
   1ff50:	f7f7 feca 	bl	17ce8 <k_is_in_isr>
   1ff54:	4603      	mov	r3, r0
   1ff56:	2b00      	cmp	r3, #0
   1ff58:	d005      	beq.n	1ff66 <usb_transfer_work+0x16c>
			k_work_submit(&trans->work);
   1ff5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ff5c:	3334      	adds	r3, #52	; 0x34
   1ff5e:	4618      	mov	r0, r3
   1ff60:	f7ee fe86 	bl	ec70 <k_work_submit>
   1ff64:	e012      	b.n	1ff8c <usb_transfer_work+0x192>
		LOG_DBG("transfer done, ep=%02x, status=%d, size=%u",
   1ff66:	f7ff fed4 	bl	1fd12 <_is_user_context>
   1ff6a:	4603      	mov	r3, r0
   1ff6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		trans->cb = NULL;
   1ff70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ff72:	2200      	movs	r2, #0
   1ff74:	615a      	str	r2, [r3, #20]
		k_sem_give(&trans->sem);
   1ff76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ff78:	331c      	adds	r3, #28
   1ff7a:	4618      	mov	r0, r3
   1ff7c:	f7ff ff1a 	bl	1fdb4 <k_sem_give>
		cb(ep, tsize, priv);
   1ff80:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
   1ff84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ff86:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ff88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1ff8a:	4798      	blx	r3
}
   1ff8c:	373c      	adds	r7, #60	; 0x3c
   1ff8e:	46bd      	mov	sp, r7
   1ff90:	bd90      	pop	{r4, r7, pc}

0001ff92 <usb_transfer_ep_callback>:
{
   1ff92:	b580      	push	{r7, lr}
   1ff94:	b086      	sub	sp, #24
   1ff96:	af00      	add	r7, sp, #0
   1ff98:	4603      	mov	r3, r0
   1ff9a:	460a      	mov	r2, r1
   1ff9c:	71fb      	strb	r3, [r7, #7]
   1ff9e:	4613      	mov	r3, r2
   1ffa0:	71bb      	strb	r3, [r7, #6]
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
   1ffa2:	79fb      	ldrb	r3, [r7, #7]
   1ffa4:	4618      	mov	r0, r3
   1ffa6:	f7ef fd51 	bl	fa4c <usb_ep_get_transfer>
   1ffaa:	6178      	str	r0, [r7, #20]
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
   1ffac:	79bb      	ldrb	r3, [r7, #6]
   1ffae:	2b02      	cmp	r3, #2
   1ffb0:	d002      	beq.n	1ffb8 <usb_transfer_ep_callback+0x26>
   1ffb2:	79bb      	ldrb	r3, [r7, #6]
   1ffb4:	2b01      	cmp	r3, #1
   1ffb6:	d12c      	bne.n	20012 <usb_transfer_ep_callback+0x80>
	if (!trans) {
   1ffb8:	697b      	ldr	r3, [r7, #20]
   1ffba:	2b00      	cmp	r3, #0
   1ffbc:	d112      	bne.n	1ffe4 <usb_transfer_ep_callback+0x52>
		if (status == USB_DC_EP_DATA_OUT) {
   1ffbe:	79bb      	ldrb	r3, [r7, #6]
   1ffc0:	2b01      	cmp	r3, #1
   1ffc2:	d128      	bne.n	20016 <usb_transfer_ep_callback+0x84>
				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
   1ffc4:	f107 030c 	add.w	r3, r7, #12
   1ffc8:	f107 010b 	add.w	r1, r7, #11
   1ffcc:	79f8      	ldrb	r0, [r7, #7]
   1ffce:	2201      	movs	r2, #1
   1ffd0:	f001 f830 	bl	21034 <usb_dc_ep_read_wait>
			} while (bytes);
   1ffd4:	68fb      	ldr	r3, [r7, #12]
   1ffd6:	2b00      	cmp	r3, #0
   1ffd8:	d1f4      	bne.n	1ffc4 <usb_transfer_ep_callback+0x32>
			LOG_ERR("RX data lost, no transfer");
   1ffda:	f7ff fe9a 	bl	1fd12 <_is_user_context>
   1ffde:	4603      	mov	r3, r0
   1ffe0:	74fb      	strb	r3, [r7, #19]
		return;
   1ffe2:	e018      	b.n	20016 <usb_transfer_ep_callback+0x84>
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
   1ffe4:	f7f7 fe80 	bl	17ce8 <k_is_in_isr>
   1ffe8:	4603      	mov	r3, r0
   1ffea:	f083 0301 	eor.w	r3, r3, #1
   1ffee:	b2db      	uxtb	r3, r3
   1fff0:	2b00      	cmp	r3, #0
   1fff2:	d102      	bne.n	1fffa <usb_transfer_ep_callback+0x68>
   1fff4:	79bb      	ldrb	r3, [r7, #6]
   1fff6:	2b01      	cmp	r3, #1
   1fff8:	d105      	bne.n	20006 <usb_transfer_ep_callback+0x74>
		usb_transfer_work(&trans->work);
   1fffa:	697b      	ldr	r3, [r7, #20]
   1fffc:	3334      	adds	r3, #52	; 0x34
   1fffe:	4618      	mov	r0, r3
   20000:	f7ff fefb 	bl	1fdfa <usb_transfer_work>
   20004:	e008      	b.n	20018 <usb_transfer_ep_callback+0x86>
		k_work_submit(&trans->work);
   20006:	697b      	ldr	r3, [r7, #20]
   20008:	3334      	adds	r3, #52	; 0x34
   2000a:	4618      	mov	r0, r3
   2000c:	f7ee fe30 	bl	ec70 <k_work_submit>
   20010:	e002      	b.n	20018 <usb_transfer_ep_callback+0x86>
		return;
   20012:	bf00      	nop
   20014:	e000      	b.n	20018 <usb_transfer_ep_callback+0x86>
		return;
   20016:	bf00      	nop
}
   20018:	3718      	adds	r7, #24
   2001a:	46bd      	mov	sp, r7
   2001c:	bd80      	pop	{r7, pc}

0002001e <usb_cancel_transfer>:
{
   2001e:	b580      	push	{r7, lr}
   20020:	b088      	sub	sp, #32
   20022:	af00      	add	r7, sp, #0
   20024:	4603      	mov	r3, r0
   20026:	71fb      	strb	r3, [r7, #7]
	__asm__ volatile(
   20028:	f04f 0320 	mov.w	r3, #32
   2002c:	f3ef 8211 	mrs	r2, BASEPRI
   20030:	f383 8811 	msr	BASEPRI, r3
   20034:	f3bf 8f6f 	isb	sy
   20038:	617a      	str	r2, [r7, #20]
   2003a:	613b      	str	r3, [r7, #16]
	return key;
   2003c:	697b      	ldr	r3, [r7, #20]
	key = irq_lock();
   2003e:	61fb      	str	r3, [r7, #28]
	trans = usb_ep_get_transfer(ep);
   20040:	79fb      	ldrb	r3, [r7, #7]
   20042:	4618      	mov	r0, r3
   20044:	f7ef fd02 	bl	fa4c <usb_ep_get_transfer>
   20048:	61b8      	str	r0, [r7, #24]
	if (!trans) {
   2004a:	69bb      	ldr	r3, [r7, #24]
   2004c:	2b00      	cmp	r3, #0
   2004e:	d00e      	beq.n	2006e <usb_cancel_transfer+0x50>
	if (trans->status != -EBUSY) {
   20050:	69bb      	ldr	r3, [r7, #24]
   20052:	685b      	ldr	r3, [r3, #4]
   20054:	f113 0f10 	cmn.w	r3, #16
   20058:	d10b      	bne.n	20072 <usb_cancel_transfer+0x54>
	trans->status = -ECANCELED;
   2005a:	69bb      	ldr	r3, [r7, #24]
   2005c:	f06f 028b 	mvn.w	r2, #139	; 0x8b
   20060:	605a      	str	r2, [r3, #4]
	k_work_submit(&trans->work);
   20062:	69bb      	ldr	r3, [r7, #24]
   20064:	3334      	adds	r3, #52	; 0x34
   20066:	4618      	mov	r0, r3
   20068:	f7ee fe02 	bl	ec70 <k_work_submit>
   2006c:	e002      	b.n	20074 <usb_cancel_transfer+0x56>
		goto done;
   2006e:	bf00      	nop
   20070:	e000      	b.n	20074 <usb_cancel_transfer+0x56>
		goto done;
   20072:	bf00      	nop
   20074:	69fb      	ldr	r3, [r7, #28]
   20076:	60fb      	str	r3, [r7, #12]
	__asm__ volatile(
   20078:	68fb      	ldr	r3, [r7, #12]
   2007a:	f383 8811 	msr	BASEPRI, r3
   2007e:	f3bf 8f6f 	isb	sy
}
   20082:	bf00      	nop
   20084:	3720      	adds	r7, #32
   20086:	46bd      	mov	sp, r7
   20088:	bd80      	pop	{r7, pc}

0002008a <usb_transfer_sync_cb>:
{
   2008a:	b580      	push	{r7, lr}
   2008c:	b086      	sub	sp, #24
   2008e:	af00      	add	r7, sp, #0
   20090:	4603      	mov	r3, r0
   20092:	60b9      	str	r1, [r7, #8]
   20094:	607a      	str	r2, [r7, #4]
   20096:	73fb      	strb	r3, [r7, #15]
	struct usb_transfer_sync_priv *pdata = priv;
   20098:	687b      	ldr	r3, [r7, #4]
   2009a:	617b      	str	r3, [r7, #20]
	pdata->tsize = size;
   2009c:	697b      	ldr	r3, [r7, #20]
   2009e:	68ba      	ldr	r2, [r7, #8]
   200a0:	601a      	str	r2, [r3, #0]
	k_sem_give(&pdata->sem);
   200a2:	697b      	ldr	r3, [r7, #20]
   200a4:	3304      	adds	r3, #4
   200a6:	4618      	mov	r0, r3
   200a8:	f7ff fe84 	bl	1fdb4 <k_sem_give>
}
   200ac:	bf00      	nop
   200ae:	3718      	adds	r7, #24
   200b0:	46bd      	mov	sp, r7
   200b2:	bd80      	pop	{r7, pc}

000200b4 <sys_put_le16>:
 *
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
   200b4:	b480      	push	{r7}
   200b6:	b083      	sub	sp, #12
   200b8:	af00      	add	r7, sp, #0
   200ba:	4603      	mov	r3, r0
   200bc:	6039      	str	r1, [r7, #0]
   200be:	80fb      	strh	r3, [r7, #6]
	dst[0] = val;
   200c0:	88fb      	ldrh	r3, [r7, #6]
   200c2:	b2da      	uxtb	r2, r3
   200c4:	683b      	ldr	r3, [r7, #0]
   200c6:	701a      	strb	r2, [r3, #0]
	dst[1] = val >> 8;
   200c8:	88fb      	ldrh	r3, [r7, #6]
   200ca:	0a1b      	lsrs	r3, r3, #8
   200cc:	b29a      	uxth	r2, r3
   200ce:	683b      	ldr	r3, [r7, #0]
   200d0:	3301      	adds	r3, #1
   200d2:	b2d2      	uxtb	r2, r2
   200d4:	701a      	strb	r2, [r3, #0]
}
   200d6:	bf00      	nop
   200d8:	370c      	adds	r7, #12
   200da:	46bd      	mov	sp, r7
   200dc:	bc80      	pop	{r7}
   200de:	4770      	bx	lr

000200e0 <_is_user_context>:
{
   200e0:	b480      	push	{r7}
   200e2:	af00      	add	r7, sp, #0
	return false;
   200e4:	2300      	movs	r3, #0
}
   200e6:	4618      	mov	r0, r3
   200e8:	46bd      	mov	sp, r7
   200ea:	bc80      	pop	{r7}
   200ec:	4770      	bx	lr

000200ee <ascii7_to_utf16le>:
{
   200ee:	b580      	push	{r7, lr}
   200f0:	b098      	sub	sp, #96	; 0x60
   200f2:	af00      	add	r7, sp, #0
   200f4:	6078      	str	r0, [r7, #4]
	struct usb_string_descriptor *str_descr = descriptor;
   200f6:	687b      	ldr	r3, [r7, #4]
   200f8:	64bb      	str	r3, [r7, #72]	; 0x48
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
   200fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   200fc:	781b      	ldrb	r3, [r3, #0]
   200fe:	3b03      	subs	r3, #3
   20100:	647b      	str	r3, [r7, #68]	; 0x44
	int ascii_idx_max = USB_BSTRING_ASCII_IDX_MAX(str_descr->bLength);
   20102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   20104:	781b      	ldrb	r3, [r3, #0]
   20106:	085b      	lsrs	r3, r3, #1
   20108:	b2db      	uxtb	r3, r3
   2010a:	3b02      	subs	r3, #2
   2010c:	64fb      	str	r3, [r7, #76]	; 0x4c
	u8_t *buf = (u8_t *)&str_descr->bString;
   2010e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   20110:	3302      	adds	r3, #2
   20112:	65fb      	str	r3, [r7, #92]	; 0x5c
	LOG_DBG("idx_max %d, ascii_idx_max %d, buf %x",
   20114:	f7ff ffe4 	bl	200e0 <_is_user_context>
   20118:	4603      	mov	r3, r0
   2011a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	for (int i = idx_max; i >= 0; i -= 2) {
   2011e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   20120:	657b      	str	r3, [r7, #84]	; 0x54
   20122:	e018      	b.n	20156 <ascii7_to_utf16le+0x68>
		LOG_DBG("char %c : %x, idx %d -> %d",
   20124:	f7ff ffdc 	bl	200e0 <_is_user_context>
   20128:	4603      	mov	r3, r0
   2012a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		buf[i] = 0U;
   2012e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   20130:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   20132:	4413      	add	r3, r2
   20134:	2200      	movs	r2, #0
   20136:	701a      	strb	r2, [r3, #0]
		buf[i - 1] = buf[ascii_idx_max--];
   20138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2013a:	1e5a      	subs	r2, r3, #1
   2013c:	64fa      	str	r2, [r7, #76]	; 0x4c
   2013e:	461a      	mov	r2, r3
   20140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   20142:	441a      	add	r2, r3
   20144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   20146:	3b01      	subs	r3, #1
   20148:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   2014a:	440b      	add	r3, r1
   2014c:	7812      	ldrb	r2, [r2, #0]
   2014e:	701a      	strb	r2, [r3, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
   20150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   20152:	3b02      	subs	r3, #2
   20154:	657b      	str	r3, [r7, #84]	; 0x54
   20156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   20158:	2b00      	cmp	r3, #0
   2015a:	dae3      	bge.n	20124 <ascii7_to_utf16le+0x36>
}
   2015c:	bf00      	nop
   2015e:	3760      	adds	r7, #96	; 0x60
   20160:	46bd      	mov	sp, r7
   20162:	bd80      	pop	{r7, pc}

00020164 <usb_validate_ep_cfg_data>:
{
   20164:	b580      	push	{r7, lr}
   20166:	b08a      	sub	sp, #40	; 0x28
   20168:	af00      	add	r7, sp, #0
   2016a:	60f8      	str	r0, [r7, #12]
   2016c:	60b9      	str	r1, [r7, #8]
   2016e:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < cfg_data->num_endpoints; i++) {
   20170:	2300      	movs	r3, #0
   20172:	61fb      	str	r3, [r7, #28]
   20174:	e07e      	b.n	20274 <usb_validate_ep_cfg_data+0x110>
		struct usb_ep_cfg_data *ep_data = cfg_data->endpoint;
   20176:	68bb      	ldr	r3, [r7, #8]
   20178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2017a:	627b      	str	r3, [r7, #36]	; 0x24
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
   2017c:	68fb      	ldr	r3, [r7, #12]
   2017e:	789a      	ldrb	r2, [r3, #2]
   20180:	69fb      	ldr	r3, [r7, #28]
   20182:	00db      	lsls	r3, r3, #3
   20184:	6a79      	ldr	r1, [r7, #36]	; 0x24
   20186:	440b      	add	r3, r1
   20188:	791b      	ldrb	r3, [r3, #4]
   2018a:	429a      	cmp	r2, r3
   2018c:	d16e      	bne.n	2026c <usb_validate_ep_cfg_data+0x108>
		for (u8_t idx = 1; idx < 16; idx++) {
   2018e:	2301      	movs	r3, #1
   20190:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   20194:	e065      	b.n	20262 <usb_validate_ep_cfg_data+0xfe>
			ep_cfg.ep_type = ep_descr->bmAttributes;
   20196:	68fb      	ldr	r3, [r7, #12]
   20198:	78db      	ldrb	r3, [r3, #3]
   2019a:	763b      	strb	r3, [r7, #24]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   2019c:	68fb      	ldr	r3, [r7, #12]
   2019e:	889b      	ldrh	r3, [r3, #4]
   201a0:	b29b      	uxth	r3, r3
   201a2:	82fb      	strh	r3, [r7, #22]
			ep_cfg.ep_addr = ep_descr->bEndpointAddress;
   201a4:	68fb      	ldr	r3, [r7, #12]
   201a6:	789b      	ldrb	r3, [r3, #2]
   201a8:	753b      	strb	r3, [r7, #20]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   201aa:	7d3b      	ldrb	r3, [r7, #20]
   201ac:	b25b      	sxtb	r3, r3
   201ae:	2b00      	cmp	r3, #0
   201b0:	da11      	bge.n	201d6 <usb_validate_ep_cfg_data+0x72>
				if ((*requested_ep & (1 << (idx + 16)))) {
   201b2:	687b      	ldr	r3, [r7, #4]
   201b4:	681b      	ldr	r3, [r3, #0]
   201b6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
   201ba:	3210      	adds	r2, #16
   201bc:	2101      	movs	r1, #1
   201be:	fa01 f202 	lsl.w	r2, r1, r2
   201c2:	4013      	ands	r3, r2
   201c4:	2b00      	cmp	r3, #0
   201c6:	d144      	bne.n	20252 <usb_validate_ep_cfg_data+0xee>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
   201c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   201cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   201d0:	b2db      	uxtb	r3, r3
   201d2:	753b      	strb	r3, [r7, #20]
   201d4:	e00c      	b.n	201f0 <usb_validate_ep_cfg_data+0x8c>
				if ((*requested_ep & (1 << (idx)))) {
   201d6:	687b      	ldr	r3, [r7, #4]
   201d8:	681b      	ldr	r3, [r3, #0]
   201da:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
   201de:	2101      	movs	r1, #1
   201e0:	fa01 f202 	lsl.w	r2, r1, r2
   201e4:	4013      	ands	r3, r2
   201e6:	2b00      	cmp	r3, #0
   201e8:	d135      	bne.n	20256 <usb_validate_ep_cfg_data+0xf2>
				ep_cfg.ep_addr = idx;
   201ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   201ee:	753b      	strb	r3, [r7, #20]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
   201f0:	f107 0314 	add.w	r3, r7, #20
   201f4:	4618      	mov	r0, r3
   201f6:	f000 fddb 	bl	20db0 <usb_dc_ep_check_cap>
   201fa:	4603      	mov	r3, r0
   201fc:	2b00      	cmp	r3, #0
   201fe:	d12b      	bne.n	20258 <usb_validate_ep_cfg_data+0xf4>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
   20200:	7d3a      	ldrb	r2, [r7, #20]
   20202:	68fb      	ldr	r3, [r7, #12]
   20204:	709a      	strb	r2, [r3, #2]
				ep_data[i].ep_addr = ep_cfg.ep_addr;
   20206:	69fb      	ldr	r3, [r7, #28]
   20208:	00db      	lsls	r3, r3, #3
   2020a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2020c:	4413      	add	r3, r2
   2020e:	7d3a      	ldrb	r2, [r7, #20]
   20210:	711a      	strb	r2, [r3, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   20212:	7d3b      	ldrb	r3, [r7, #20]
   20214:	b25b      	sxtb	r3, r3
   20216:	2b00      	cmp	r3, #0
   20218:	da0b      	bge.n	20232 <usb_validate_ep_cfg_data+0xce>
					*requested_ep |= (1 << (idx + 16));
   2021a:	687b      	ldr	r3, [r7, #4]
   2021c:	681b      	ldr	r3, [r3, #0]
   2021e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
   20222:	3210      	adds	r2, #16
   20224:	2101      	movs	r1, #1
   20226:	fa01 f202 	lsl.w	r2, r1, r2
   2022a:	431a      	orrs	r2, r3
   2022c:	687b      	ldr	r3, [r7, #4]
   2022e:	601a      	str	r2, [r3, #0]
   20230:	e009      	b.n	20246 <usb_validate_ep_cfg_data+0xe2>
					*requested_ep |= (1 << idx);
   20232:	687b      	ldr	r3, [r7, #4]
   20234:	681b      	ldr	r3, [r3, #0]
   20236:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
   2023a:	2101      	movs	r1, #1
   2023c:	fa01 f202 	lsl.w	r2, r1, r2
   20240:	431a      	orrs	r2, r3
   20242:	687b      	ldr	r3, [r7, #4]
   20244:	601a      	str	r2, [r3, #0]
				LOG_DBG("endpoint 0x%x", ep_data[i].ep_addr);
   20246:	f7ff ff4b 	bl	200e0 <_is_user_context>
   2024a:	4603      	mov	r3, r0
   2024c:	76fb      	strb	r3, [r7, #27]
				return 0;
   2024e:	2300      	movs	r3, #0
   20250:	e01a      	b.n	20288 <usb_validate_ep_cfg_data+0x124>
					continue;
   20252:	bf00      	nop
   20254:	e000      	b.n	20258 <usb_validate_ep_cfg_data+0xf4>
					continue;
   20256:	bf00      	nop
		for (u8_t idx = 1; idx < 16; idx++) {
   20258:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   2025c:	3301      	adds	r3, #1
   2025e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   20262:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   20266:	2b0f      	cmp	r3, #15
   20268:	d995      	bls.n	20196 <usb_validate_ep_cfg_data+0x32>
   2026a:	e000      	b.n	2026e <usb_validate_ep_cfg_data+0x10a>
			continue;
   2026c:	bf00      	nop
	for (int i = 0; i < cfg_data->num_endpoints; i++) {
   2026e:	69fb      	ldr	r3, [r7, #28]
   20270:	3301      	adds	r3, #1
   20272:	61fb      	str	r3, [r7, #28]
   20274:	68bb      	ldr	r3, [r7, #8]
   20276:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   2027a:	461a      	mov	r2, r3
   2027c:	69fb      	ldr	r3, [r7, #28]
   2027e:	4293      	cmp	r3, r2
   20280:	f6ff af79 	blt.w	20176 <usb_validate_ep_cfg_data+0x12>
	return -1;
   20284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   20288:	4618      	mov	r0, r3
   2028a:	3728      	adds	r7, #40	; 0x28
   2028c:	46bd      	mov	sp, r7
   2028e:	bd80      	pop	{r7, pc}

00020290 <usb_update_sn_string_descriptor>:
{
   20290:	b480      	push	{r7}
   20292:	af00      	add	r7, sp, #0
	return NULL;
   20294:	2300      	movs	r3, #0
}
   20296:	4618      	mov	r0, r3
   20298:	46bd      	mov	sp, r7
   2029a:	bc80      	pop	{r7}
   2029c:	4770      	bx	lr

0002029e <_is_user_context>:
{
   2029e:	b480      	push	{r7}
   202a0:	af00      	add	r7, sp, #0
	return false;
   202a2:	2300      	movs	r3, #0
}
   202a4:	4618      	mov	r0, r3
   202a6:	46bd      	mov	sp, r7
   202a8:	bc80      	pop	{r7}
   202aa:	4770      	bx	lr

000202ac <atomic_get>:
{
   202ac:	b480      	push	{r7}
   202ae:	b083      	sub	sp, #12
   202b0:	af00      	add	r7, sp, #0
   202b2:	6078      	str	r0, [r7, #4]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   202b4:	687b      	ldr	r3, [r7, #4]
   202b6:	f3bf 8f5b 	dmb	ish
   202ba:	681b      	ldr	r3, [r3, #0]
   202bc:	f3bf 8f5b 	dmb	ish
}
   202c0:	4618      	mov	r0, r3
   202c2:	370c      	adds	r7, #12
   202c4:	46bd      	mov	sp, r7
   202c6:	bc80      	pop	{r7}
   202c8:	4770      	bx	lr

000202ca <atomic_set>:
{
   202ca:	b480      	push	{r7}
   202cc:	b083      	sub	sp, #12
   202ce:	af00      	add	r7, sp, #0
   202d0:	6078      	str	r0, [r7, #4]
   202d2:	6039      	str	r1, [r7, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   202d4:	683a      	ldr	r2, [r7, #0]
   202d6:	687b      	ldr	r3, [r7, #4]
   202d8:	f3bf 8f5b 	dmb	ish
   202dc:	e853 1f00 	ldrex	r1, [r3]
   202e0:	e843 2000 	strex	r0, r2, [r3]
   202e4:	2800      	cmp	r0, #0
   202e6:	d1f9      	bne.n	202dc <atomic_set+0x12>
   202e8:	f3bf 8f5b 	dmb	ish
   202ec:	460b      	mov	r3, r1
}
   202ee:	4618      	mov	r0, r3
   202f0:	370c      	adds	r7, #12
   202f2:	46bd      	mov	sp, r7
   202f4:	bc80      	pop	{r7}
   202f6:	4770      	bx	lr

000202f8 <device_get_binding>:
   202f8:	b580      	push	{r7, lr}
   202fa:	b082      	sub	sp, #8
   202fc:	af00      	add	r7, sp, #0
   202fe:	6078      	str	r0, [r7, #4]
   20300:	6878      	ldr	r0, [r7, #4]
   20302:	f7f5 fff3 	bl	162ec <z_impl_device_get_binding>
   20306:	4603      	mov	r3, r0
   20308:	4618      	mov	r0, r3
   2030a:	3708      	adds	r7, #8
   2030c:	46bd      	mov	sp, r7
   2030e:	bd80      	pop	{r7, pc}

00020310 <z_impl_entropy_get_entropy>:
				  u16_t length);

static inline int z_impl_entropy_get_entropy(struct device *dev,
					    u8_t *buffer,
					    u16_t length)
{
   20310:	b580      	push	{r7, lr}
   20312:	b086      	sub	sp, #24
   20314:	af00      	add	r7, sp, #0
   20316:	60f8      	str	r0, [r7, #12]
   20318:	60b9      	str	r1, [r7, #8]
   2031a:	4613      	mov	r3, r2
   2031c:	80fb      	strh	r3, [r7, #6]
	const struct entropy_driver_api *api =
   2031e:	68fb      	ldr	r3, [r7, #12]
   20320:	685b      	ldr	r3, [r3, #4]
   20322:	617b      	str	r3, [r7, #20]
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   20324:	697b      	ldr	r3, [r7, #20]
   20326:	681b      	ldr	r3, [r3, #0]
   20328:	88fa      	ldrh	r2, [r7, #6]
   2032a:	68b9      	ldr	r1, [r7, #8]
   2032c:	68f8      	ldr	r0, [r7, #12]
   2032e:	4798      	blx	r3
   20330:	4603      	mov	r3, r0
}
   20332:	4618      	mov	r0, r3
   20334:	3718      	adds	r7, #24
   20336:	46bd      	mov	sp, r7
   20338:	bd80      	pop	{r7, pc}

0002033a <entropy_get_entropy>:

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE3(K_SYSCALL_ENTROPY_GET_ENTROPY, entropy_get_entropy, int, struct device *, dev, u8_t *, buffer, u16_t, length)
   2033a:	b580      	push	{r7, lr}
   2033c:	b084      	sub	sp, #16
   2033e:	af00      	add	r7, sp, #0
   20340:	60f8      	str	r0, [r7, #12]
   20342:	60b9      	str	r1, [r7, #8]
   20344:	4613      	mov	r3, r2
   20346:	80fb      	strh	r3, [r7, #6]
   20348:	88fb      	ldrh	r3, [r7, #6]
   2034a:	461a      	mov	r2, r3
   2034c:	68b9      	ldr	r1, [r7, #8]
   2034e:	68f8      	ldr	r0, [r7, #12]
   20350:	f7ff ffde 	bl	20310 <z_impl_entropy_get_entropy>
   20354:	4603      	mov	r3, r0
   20356:	4618      	mov	r0, r3
   20358:	3710      	adds	r7, #16
   2035a:	46bd      	mov	sp, r7
   2035c:	bd80      	pop	{r7, pc}

0002035e <device_get_binding>:
   2035e:	b580      	push	{r7, lr}
   20360:	b082      	sub	sp, #8
   20362:	af00      	add	r7, sp, #0
   20364:	6078      	str	r0, [r7, #4]
   20366:	6878      	ldr	r0, [r7, #4]
   20368:	f7f5 ffc0 	bl	162ec <z_impl_device_get_binding>
   2036c:	4603      	mov	r3, r0
   2036e:	4618      	mov	r0, r3
   20370:	3708      	adds	r7, #8
   20372:	46bd      	mov	sp, r7
   20374:	bd80      	pop	{r7, pc}

00020376 <z_impl_uart_poll_out>:
{
   20376:	b580      	push	{r7, lr}
   20378:	b084      	sub	sp, #16
   2037a:	af00      	add	r7, sp, #0
   2037c:	6078      	str	r0, [r7, #4]
   2037e:	460b      	mov	r3, r1
   20380:	70fb      	strb	r3, [r7, #3]
	const struct uart_driver_api *api =
   20382:	687b      	ldr	r3, [r7, #4]
   20384:	685b      	ldr	r3, [r3, #4]
   20386:	60fb      	str	r3, [r7, #12]
	api->poll_out(dev, out_char);
   20388:	68fb      	ldr	r3, [r7, #12]
   2038a:	685b      	ldr	r3, [r3, #4]
   2038c:	78fa      	ldrb	r2, [r7, #3]
   2038e:	4611      	mov	r1, r2
   20390:	6878      	ldr	r0, [r7, #4]
   20392:	4798      	blx	r3
}
   20394:	bf00      	nop
   20396:	3710      	adds	r7, #16
   20398:	46bd      	mov	sp, r7
   2039a:	bd80      	pop	{r7, pc}

0002039c <uart_poll_out>:
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_UART_POLL_OUT, uart_poll_out, struct device *, dev, unsigned char, out_char)
   2039c:	b580      	push	{r7, lr}
   2039e:	b082      	sub	sp, #8
   203a0:	af00      	add	r7, sp, #0
   203a2:	6078      	str	r0, [r7, #4]
   203a4:	460b      	mov	r3, r1
   203a6:	70fb      	strb	r3, [r7, #3]
   203a8:	78fb      	ldrb	r3, [r7, #3]
   203aa:	4619      	mov	r1, r3
   203ac:	6878      	ldr	r0, [r7, #4]
   203ae:	f7ff ffe2 	bl	20376 <z_impl_uart_poll_out>
   203b2:	bf00      	nop
   203b4:	3708      	adds	r7, #8
   203b6:	46bd      	mov	sp, r7
   203b8:	bd80      	pop	{r7, pc}

000203ba <debug_hook_out_nop>:
static UART_CONSOLE_OUT_DEBUG_HOOK_SIG(debug_hook_out_nop) {
   203ba:	b480      	push	{r7}
   203bc:	b083      	sub	sp, #12
   203be:	af00      	add	r7, sp, #0
   203c0:	4603      	mov	r3, r0
   203c2:	71fb      	strb	r3, [r7, #7]
	return !UART_CONSOLE_DEBUG_HOOK_HANDLED;
   203c4:	2300      	movs	r3, #0
}
   203c6:	4618      	mov	r0, r3
   203c8:	370c      	adds	r7, #12
   203ca:	46bd      	mov	sp, r7
   203cc:	bc80      	pop	{r7}
   203ce:	4770      	bx	lr

000203d0 <nrf_clock_int_enable>:
#endif // defined(DPPI_PRESENT) || defined(__NRFX_DOXYGEN__)

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE void nrf_clock_int_enable(uint32_t int_mask)
{
   203d0:	b480      	push	{r7}
   203d2:	b083      	sub	sp, #12
   203d4:	af00      	add	r7, sp, #0
   203d6:	6078      	str	r0, [r7, #4]
    NRF_CLOCK->INTENSET = int_mask;
   203d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   203dc:	687b      	ldr	r3, [r7, #4]
   203de:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   203e2:	bf00      	nop
   203e4:	370c      	adds	r7, #12
   203e6:	46bd      	mov	sp, r7
   203e8:	bc80      	pop	{r7}
   203ea:	4770      	bx	lr

000203ec <nrf_clock_int_disable>:

__STATIC_INLINE void nrf_clock_int_disable(uint32_t int_mask)
{
   203ec:	b480      	push	{r7}
   203ee:	b083      	sub	sp, #12
   203f0:	af00      	add	r7, sp, #0
   203f2:	6078      	str	r0, [r7, #4]
    NRF_CLOCK->INTENCLR = int_mask;
   203f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   203f8:	687b      	ldr	r3, [r7, #4]
   203fa:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   203fe:	bf00      	nop
   20400:	370c      	adds	r7, #12
   20402:	46bd      	mov	sp, r7
   20404:	bc80      	pop	{r7}
   20406:	4770      	bx	lr

00020408 <nrf_clock_task_trigger>:
{
    return ((uint32_t )NRF_CLOCK + task);
}

__STATIC_INLINE void nrf_clock_task_trigger(nrf_clock_task_t task)
{
   20408:	b480      	push	{r7}
   2040a:	b083      	sub	sp, #12
   2040c:	af00      	add	r7, sp, #0
   2040e:	4603      	mov	r3, r0
   20410:	71fb      	strb	r3, [r7, #7]
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
   20412:	79fb      	ldrb	r3, [r7, #7]
   20414:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20418:	2201      	movs	r2, #1
   2041a:	601a      	str	r2, [r3, #0]
}
   2041c:	bf00      	nop
   2041e:	370c      	adds	r7, #12
   20420:	46bd      	mov	sp, r7
   20422:	bc80      	pop	{r7}
   20424:	4770      	bx	lr

00020426 <nrf_power_event_clear>:
{
   20426:	b480      	push	{r7}
   20428:	b085      	sub	sp, #20
   2042a:	af00      	add	r7, sp, #0
   2042c:	4603      	mov	r3, r0
   2042e:	80fb      	strh	r3, [r7, #6]
    *((volatile uint32_t *)((uint8_t *)NRF_POWER + (uint32_t)event)) = 0x0UL;
   20430:	88fb      	ldrh	r3, [r7, #6]
   20432:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20436:	2200      	movs	r2, #0
   20438:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_POWER + (uint32_t)event));
   2043a:	88fb      	ldrh	r3, [r7, #6]
   2043c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20440:	681b      	ldr	r3, [r3, #0]
   20442:	60fb      	str	r3, [r7, #12]
    (void)dummy;
   20444:	68fb      	ldr	r3, [r7, #12]
}
   20446:	bf00      	nop
   20448:	3714      	adds	r7, #20
   2044a:	46bd      	mov	sp, r7
   2044c:	bc80      	pop	{r7}
   2044e:	4770      	bx	lr

00020450 <nrf_power_event_check>:
{
   20450:	b480      	push	{r7}
   20452:	b083      	sub	sp, #12
   20454:	af00      	add	r7, sp, #0
   20456:	4603      	mov	r3, r0
   20458:	80fb      	strh	r3, [r7, #6]
    return (bool)*(volatile uint32_t *)((uint8_t *)NRF_POWER + (uint32_t)event);
   2045a:	88fb      	ldrh	r3, [r7, #6]
   2045c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20460:	681b      	ldr	r3, [r3, #0]
   20462:	2b00      	cmp	r3, #0
   20464:	bf14      	ite	ne
   20466:	2301      	movne	r3, #1
   20468:	2300      	moveq	r3, #0
   2046a:	b2db      	uxtb	r3, r3
}
   2046c:	4618      	mov	r0, r3
   2046e:	370c      	adds	r7, #12
   20470:	46bd      	mov	sp, r7
   20472:	bc80      	pop	{r7}
   20474:	4770      	bx	lr

00020476 <nrf_power_int_enable>:
{
   20476:	b480      	push	{r7}
   20478:	b083      	sub	sp, #12
   2047a:	af00      	add	r7, sp, #0
   2047c:	6078      	str	r0, [r7, #4]
    NRF_POWER->INTENSET = int_mask;
   2047e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   20482:	687b      	ldr	r3, [r7, #4]
   20484:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   20488:	bf00      	nop
   2048a:	370c      	adds	r7, #12
   2048c:	46bd      	mov	sp, r7
   2048e:	bc80      	pop	{r7}
   20490:	4770      	bx	lr

00020492 <nrf_power_int_disable>:
{
   20492:	b480      	push	{r7}
   20494:	b083      	sub	sp, #12
   20496:	af00      	add	r7, sp, #0
   20498:	6078      	str	r0, [r7, #4]
    NRF_POWER->INTENCLR = int_mask;
   2049a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2049e:	687b      	ldr	r3, [r7, #4]
   204a0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   204a4:	bf00      	nop
   204a6:	370c      	adds	r7, #12
   204a8:	46bd      	mov	sp, r7
   204aa:	bc80      	pop	{r7}
   204ac:	4770      	bx	lr

000204ae <power_event_cb>:
{
   204ae:	b580      	push	{r7, lr}
   204b0:	b082      	sub	sp, #8
   204b2:	af00      	add	r7, sp, #0
   204b4:	4603      	mov	r3, r0
   204b6:	80fb      	strh	r3, [r7, #6]
	usb_dc_nrfx_power_event_callback(event);
   204b8:	88fb      	ldrh	r3, [r7, #6]
   204ba:	4618      	mov	r0, r3
   204bc:	f7f0 fa66 	bl	1098c <usb_dc_nrfx_power_event_callback>
}
   204c0:	bf00      	nop
   204c2:	3708      	adds	r7, #8
   204c4:	46bd      	mov	sp, r7
   204c6:	bd80      	pop	{r7, pc}

000204c8 <clock_control_init>:

static int clock_control_init(struct device *dev)
{
   204c8:	b580      	push	{r7, lr}
   204ca:	b082      	sub	sp, #8
   204cc:	af00      	add	r7, sp, #0
   204ce:	6078      	str	r0, [r7, #4]
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(DT_NORDIC_NRF_CLOCK_0_IRQ_0,
   204d0:	2200      	movs	r2, #0
   204d2:	2101      	movs	r1, #1
   204d4:	2000      	movs	r0, #0
   204d6:	f000 fff0 	bl	214ba <z_irq_priority_set>
		    DT_NORDIC_NRF_CLOCK_0_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
   204da:	2000      	movs	r0, #0
   204dc:	f000 ffd3 	bl	21486 <z_arch_irq_enable>

	return 0;
   204e0:	2300      	movs	r3, #0
}
   204e2:	4618      	mov	r0, r3
   204e4:	3708      	adds	r7, #8
   204e6:	46bd      	mov	sp, r7
   204e8:	bd80      	pop	{r7, pc}

000204ea <nrf5_power_usb_power_int_enable>:
		    &_k32src_clock_control_api);

#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)

void nrf5_power_usb_power_int_enable(bool enable)
{
   204ea:	b580      	push	{r7, lr}
   204ec:	b084      	sub	sp, #16
   204ee:	af00      	add	r7, sp, #0
   204f0:	4603      	mov	r3, r0
   204f2:	71fb      	strb	r3, [r7, #7]
	u32_t mask;


	mask = NRF_POWER_INT_USBDETECTED_MASK |
   204f4:	f44f 7360 	mov.w	r3, #896	; 0x380
   204f8:	60fb      	str	r3, [r7, #12]
	       NRF_POWER_INT_USBREMOVED_MASK |
	       NRF_POWER_INT_USBPWRRDY_MASK;

	if (enable) {
   204fa:	79fb      	ldrb	r3, [r7, #7]
   204fc:	2b00      	cmp	r3, #0
   204fe:	d006      	beq.n	2050e <nrf5_power_usb_power_int_enable+0x24>
		nrf_power_int_enable(mask);
   20500:	68f8      	ldr	r0, [r7, #12]
   20502:	f7ff ffb8 	bl	20476 <nrf_power_int_enable>
		irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
   20506:	2000      	movs	r0, #0
   20508:	f000 ffbd 	bl	21486 <z_arch_irq_enable>
	} else {
		nrf_power_int_disable(mask);
	}
}
   2050c:	e002      	b.n	20514 <nrf5_power_usb_power_int_enable+0x2a>
		nrf_power_int_disable(mask);
   2050e:	68f8      	ldr	r0, [r7, #12]
   20510:	f7ff ffbf 	bl	20492 <nrf_power_int_disable>
}
   20514:	bf00      	nop
   20516:	3710      	adds	r7, #16
   20518:	46bd      	mov	sp, r7
   2051a:	bd80      	pop	{r7, pc}

0002051c <atomic_or>:
{
   2051c:	b480      	push	{r7}
   2051e:	b083      	sub	sp, #12
   20520:	af00      	add	r7, sp, #0
   20522:	6078      	str	r0, [r7, #4]
   20524:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20526:	683a      	ldr	r2, [r7, #0]
   20528:	687b      	ldr	r3, [r7, #4]
   2052a:	f3bf 8f5b 	dmb	ish
   2052e:	e853 1f00 	ldrex	r1, [r3]
   20532:	ea41 0002 	orr.w	r0, r1, r2
   20536:	e843 0c00 	strex	ip, r0, [r3]
   2053a:	f1bc 0f00 	cmp.w	ip, #0
   2053e:	d1f6      	bne.n	2052e <atomic_or+0x12>
   20540:	f3bf 8f5b 	dmb	ish
   20544:	460b      	mov	r3, r1
}
   20546:	4618      	mov	r0, r3
   20548:	370c      	adds	r7, #12
   2054a:	46bd      	mov	sp, r7
   2054c:	bc80      	pop	{r7}
   2054e:	4770      	bx	lr

00020550 <atomic_test_and_set_bit>:
{
   20550:	b580      	push	{r7, lr}
   20552:	b084      	sub	sp, #16
   20554:	af00      	add	r7, sp, #0
   20556:	6078      	str	r0, [r7, #4]
   20558:	6039      	str	r1, [r7, #0]
	atomic_val_t mask = ATOMIC_MASK(bit);
   2055a:	683b      	ldr	r3, [r7, #0]
   2055c:	f003 031f 	and.w	r3, r3, #31
   20560:	2201      	movs	r2, #1
   20562:	fa02 f303 	lsl.w	r3, r2, r3
   20566:	60fb      	str	r3, [r7, #12]
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   20568:	683b      	ldr	r3, [r7, #0]
   2056a:	095b      	lsrs	r3, r3, #5
   2056c:	009b      	lsls	r3, r3, #2
   2056e:	687a      	ldr	r2, [r7, #4]
   20570:	4413      	add	r3, r2
   20572:	68f9      	ldr	r1, [r7, #12]
   20574:	4618      	mov	r0, r3
   20576:	f7ff ffd1 	bl	2051c <atomic_or>
   2057a:	60b8      	str	r0, [r7, #8]
	return (old & mask) != 0;
   2057c:	68ba      	ldr	r2, [r7, #8]
   2057e:	68fb      	ldr	r3, [r7, #12]
   20580:	4013      	ands	r3, r2
   20582:	2b00      	cmp	r3, #0
   20584:	bf14      	ite	ne
   20586:	2301      	movne	r3, #1
   20588:	2300      	moveq	r3, #0
   2058a:	b2db      	uxtb	r3, r3
}
   2058c:	4618      	mov	r0, r3
   2058e:	3710      	adds	r7, #16
   20590:	46bd      	mov	sp, r7
   20592:	bd80      	pop	{r7, pc}

00020594 <sys_sflist_peek_head>:
{
   20594:	b480      	push	{r7}
   20596:	b083      	sub	sp, #12
   20598:	af00      	add	r7, sp, #0
   2059a:	6078      	str	r0, [r7, #4]
	return list->head;
   2059c:	687b      	ldr	r3, [r7, #4]
   2059e:	681b      	ldr	r3, [r3, #0]
}
   205a0:	4618      	mov	r0, r3
   205a2:	370c      	adds	r7, #12
   205a4:	46bd      	mov	sp, r7
   205a6:	bc80      	pop	{r7}
   205a8:	4770      	bx	lr

000205aa <sys_sflist_is_empty>:
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   205aa:	b580      	push	{r7, lr}
   205ac:	b082      	sub	sp, #8
   205ae:	af00      	add	r7, sp, #0
   205b0:	6078      	str	r0, [r7, #4]
   205b2:	6878      	ldr	r0, [r7, #4]
   205b4:	f7ff ffee 	bl	20594 <sys_sflist_peek_head>
   205b8:	4603      	mov	r3, r0
   205ba:	2b00      	cmp	r3, #0
   205bc:	bf0c      	ite	eq
   205be:	2301      	moveq	r3, #1
   205c0:	2300      	movne	r3, #0
   205c2:	b2db      	uxtb	r3, r3
   205c4:	4618      	mov	r0, r3
   205c6:	3708      	adds	r7, #8
   205c8:	46bd      	mov	sp, r7
   205ca:	bd80      	pop	{r7, pc}

000205cc <_is_user_context>:
{
   205cc:	b480      	push	{r7}
   205ce:	af00      	add	r7, sp, #0
	return false;
   205d0:	2300      	movs	r3, #0
}
   205d2:	4618      	mov	r0, r3
   205d4:	46bd      	mov	sp, r7
   205d6:	bc80      	pop	{r7}
   205d8:	4770      	bx	lr

000205da <z_impl_k_queue_is_empty>:
{
   205da:	b580      	push	{r7, lr}
   205dc:	b082      	sub	sp, #8
   205de:	af00      	add	r7, sp, #0
   205e0:	6078      	str	r0, [r7, #4]
	return (int)sys_sflist_is_empty(&queue->data_q);
   205e2:	687b      	ldr	r3, [r7, #4]
   205e4:	4618      	mov	r0, r3
   205e6:	f7ff ffe0 	bl	205aa <sys_sflist_is_empty>
   205ea:	4603      	mov	r3, r0
}
   205ec:	4618      	mov	r0, r3
   205ee:	3708      	adds	r7, #8
   205f0:	46bd      	mov	sp, r7
   205f2:	bd80      	pop	{r7, pc}

000205f4 <k_work_init>:
{
   205f4:	b480      	push	{r7}
   205f6:	b083      	sub	sp, #12
   205f8:	af00      	add	r7, sp, #0
   205fa:	6078      	str	r0, [r7, #4]
   205fc:	6039      	str	r1, [r7, #0]
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   205fe:	687b      	ldr	r3, [r7, #4]
   20600:	2200      	movs	r2, #0
   20602:	601a      	str	r2, [r3, #0]
   20604:	687b      	ldr	r3, [r7, #4]
   20606:	683a      	ldr	r2, [r7, #0]
   20608:	605a      	str	r2, [r3, #4]
   2060a:	687b      	ldr	r3, [r7, #4]
   2060c:	2200      	movs	r2, #0
   2060e:	609a      	str	r2, [r3, #8]
}
   20610:	bf00      	nop
   20612:	370c      	adds	r7, #12
   20614:	46bd      	mov	sp, r7
   20616:	bc80      	pop	{r7}
   20618:	4770      	bx	lr

0002061a <k_work_submit_to_queue>:
{
   2061a:	b580      	push	{r7, lr}
   2061c:	b082      	sub	sp, #8
   2061e:	af00      	add	r7, sp, #0
   20620:	6078      	str	r0, [r7, #4]
   20622:	6039      	str	r1, [r7, #0]
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   20624:	683b      	ldr	r3, [r7, #0]
   20626:	3308      	adds	r3, #8
   20628:	2100      	movs	r1, #0
   2062a:	4618      	mov	r0, r3
   2062c:	f7ff ff90 	bl	20550 <atomic_test_and_set_bit>
   20630:	4603      	mov	r3, r0
   20632:	f083 0301 	eor.w	r3, r3, #1
   20636:	b2db      	uxtb	r3, r3
   20638:	2b00      	cmp	r3, #0
   2063a:	d004      	beq.n	20646 <k_work_submit_to_queue+0x2c>
		k_queue_append(&work_q->queue, work);
   2063c:	687b      	ldr	r3, [r7, #4]
   2063e:	6839      	ldr	r1, [r7, #0]
   20640:	4618      	mov	r0, r3
   20642:	f00a f894 	bl	2a76e <k_queue_append>
}
   20646:	bf00      	nop
   20648:	3708      	adds	r7, #8
   2064a:	46bd      	mov	sp, r7
   2064c:	bd80      	pop	{r7, pc}

0002064e <k_queue_get>:
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   2064e:	b580      	push	{r7, lr}
   20650:	b082      	sub	sp, #8
   20652:	af00      	add	r7, sp, #0
   20654:	6078      	str	r0, [r7, #4]
   20656:	6039      	str	r1, [r7, #0]
   20658:	6839      	ldr	r1, [r7, #0]
   2065a:	6878      	ldr	r0, [r7, #4]
   2065c:	f00a f91e 	bl	2a89c <z_impl_k_queue_get>
   20660:	4603      	mov	r3, r0
   20662:	4618      	mov	r0, r3
   20664:	3708      	adds	r7, #8
   20666:	46bd      	mov	sp, r7
   20668:	bd80      	pop	{r7, pc}

0002066a <k_queue_is_empty>:
K_SYSCALL_DECLARE1(K_SYSCALL_K_QUEUE_IS_EMPTY, k_queue_is_empty, int, struct k_queue *, queue)
   2066a:	b580      	push	{r7, lr}
   2066c:	b082      	sub	sp, #8
   2066e:	af00      	add	r7, sp, #0
   20670:	6078      	str	r0, [r7, #4]
   20672:	6878      	ldr	r0, [r7, #4]
   20674:	f7ff ffb1 	bl	205da <z_impl_k_queue_is_empty>
   20678:	4603      	mov	r3, r0
   2067a:	4618      	mov	r0, r3
   2067c:	3708      	adds	r7, #8
   2067e:	46bd      	mov	sp, r7
   20680:	bd80      	pop	{r7, pc}

00020682 <k_mutex_init>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)
   20682:	b580      	push	{r7, lr}
   20684:	b082      	sub	sp, #8
   20686:	af00      	add	r7, sp, #0
   20688:	6078      	str	r0, [r7, #4]
   2068a:	6878      	ldr	r0, [r7, #4]
   2068c:	f009 fde8 	bl	2a260 <z_impl_k_mutex_init>
   20690:	bf00      	nop
   20692:	3708      	adds	r7, #8
   20694:	46bd      	mov	sp, r7
   20696:	bd80      	pop	{r7, pc}

00020698 <k_mutex_lock>:
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   20698:	b580      	push	{r7, lr}
   2069a:	b082      	sub	sp, #8
   2069c:	af00      	add	r7, sp, #0
   2069e:	6078      	str	r0, [r7, #4]
   206a0:	6039      	str	r1, [r7, #0]
   206a2:	6839      	ldr	r1, [r7, #0]
   206a4:	6878      	ldr	r0, [r7, #4]
   206a6:	f7f6 f99b 	bl	169e0 <z_impl_k_mutex_lock>
   206aa:	4603      	mov	r3, r0
   206ac:	4618      	mov	r0, r3
   206ae:	3708      	adds	r7, #8
   206b0:	46bd      	mov	sp, r7
   206b2:	bd80      	pop	{r7, pc}

000206b4 <k_mutex_unlock>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
   206b4:	b580      	push	{r7, lr}
   206b6:	b082      	sub	sp, #8
   206b8:	af00      	add	r7, sp, #0
   206ba:	6078      	str	r0, [r7, #4]
   206bc:	6878      	ldr	r0, [r7, #4]
   206be:	f7f6 fa4d 	bl	16b5c <z_impl_k_mutex_unlock>
   206c2:	bf00      	nop
   206c4:	3708      	adds	r7, #8
   206c6:	46bd      	mov	sp, r7
   206c8:	bd80      	pop	{r7, pc}

000206ca <device_get_binding>:
   206ca:	b580      	push	{r7, lr}
   206cc:	b082      	sub	sp, #8
   206ce:	af00      	add	r7, sp, #0
   206d0:	6078      	str	r0, [r7, #4]
   206d2:	6878      	ldr	r0, [r7, #4]
   206d4:	f7f5 fe0a 	bl	162ec <z_impl_device_get_binding>
   206d8:	4603      	mov	r3, r0
   206da:	4618      	mov	r0, r3
   206dc:	3708      	adds	r7, #8
   206de:	46bd      	mov	sp, r7
   206e0:	bd80      	pop	{r7, pc}

000206e2 <clock_control_on>:
 * 	instance
 * @param sys A pointer to an opaque data representing the sub-system
 */
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
   206e2:	b580      	push	{r7, lr}
   206e4:	b084      	sub	sp, #16
   206e6:	af00      	add	r7, sp, #0
   206e8:	6078      	str	r0, [r7, #4]
   206ea:	6039      	str	r1, [r7, #0]
	const struct clock_control_driver_api *api =
   206ec:	687b      	ldr	r3, [r7, #4]
   206ee:	685b      	ldr	r3, [r3, #4]
   206f0:	60fb      	str	r3, [r7, #12]
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
   206f2:	68fb      	ldr	r3, [r7, #12]
   206f4:	681b      	ldr	r3, [r3, #0]
   206f6:	6839      	ldr	r1, [r7, #0]
   206f8:	6878      	ldr	r0, [r7, #4]
   206fa:	4798      	blx	r3
   206fc:	4603      	mov	r3, r0
}
   206fe:	4618      	mov	r0, r3
   20700:	3710      	adds	r7, #16
   20702:	46bd      	mov	sp, r7
   20704:	bd80      	pop	{r7, pc}

00020706 <clock_control_off>:
 * 	instance
 * @param sys A pointer to an opaque data representing the sub-system
 */
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
   20706:	b580      	push	{r7, lr}
   20708:	b084      	sub	sp, #16
   2070a:	af00      	add	r7, sp, #0
   2070c:	6078      	str	r0, [r7, #4]
   2070e:	6039      	str	r1, [r7, #0]
	const struct clock_control_driver_api *api =
   20710:	687b      	ldr	r3, [r7, #4]
   20712:	685b      	ldr	r3, [r3, #4]
   20714:	60fb      	str	r3, [r7, #12]
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->off(dev, sys);
   20716:	68fb      	ldr	r3, [r7, #12]
   20718:	685b      	ldr	r3, [r3, #4]
   2071a:	6839      	ldr	r1, [r7, #0]
   2071c:	6878      	ldr	r0, [r7, #4]
   2071e:	4798      	blx	r3
   20720:	4603      	mov	r3, r0
}
   20722:	4618      	mov	r0, r3
   20724:	3710      	adds	r7, #16
   20726:	46bd      	mov	sp, r7
   20728:	bd80      	pop	{r7, pc}

0002072a <nrf_power_usbregstatus_get>:
}
#endif // NRF_POWER_HAS_VDDH

#if NRF_POWER_HAS_USBREG
__STATIC_INLINE uint32_t nrf_power_usbregstatus_get(void)
{
   2072a:	b480      	push	{r7}
   2072c:	af00      	add	r7, sp, #0
    return NRF_POWER->USBREGSTATUS;
   2072e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20732:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
}
   20736:	4618      	mov	r0, r3
   20738:	46bd      	mov	sp, r7
   2073a:	bc80      	pop	{r7}
   2073c:	4770      	bx	lr

0002073e <nrf_power_usbregstatus_vbusdet_get>:

__STATIC_INLINE bool nrf_power_usbregstatus_vbusdet_get(void)
{
   2073e:	b580      	push	{r7, lr}
   20740:	af00      	add	r7, sp, #0
    return (nrf_power_usbregstatus_get() &
   20742:	f7ff fff2 	bl	2072a <nrf_power_usbregstatus_get>
   20746:	4603      	mov	r3, r0
   20748:	f003 0301 	and.w	r3, r3, #1
        NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK) != 0;
   2074c:	2b00      	cmp	r3, #0
   2074e:	bf14      	ite	ne
   20750:	2301      	movne	r3, #1
   20752:	2300      	moveq	r3, #0
   20754:	b2db      	uxtb	r3, r3
}
   20756:	4618      	mov	r0, r3
   20758:	bd80      	pop	{r7, pc}

0002075a <dev_attached>:
{
   2075a:	b580      	push	{r7, lr}
   2075c:	af00      	add	r7, sp, #0
	return get_usbd_ctx()->attached;
   2075e:	f7f0 f8a7 	bl	108b0 <get_usbd_ctx>
   20762:	4603      	mov	r3, r0
   20764:	791b      	ldrb	r3, [r3, #4]
}
   20766:	4618      	mov	r0, r3
   20768:	bd80      	pop	{r7, pc}

0002076a <dev_ready>:
{
   2076a:	b580      	push	{r7, lr}
   2076c:	af00      	add	r7, sp, #0
	return get_usbd_ctx()->ready;
   2076e:	f7f0 f89f 	bl	108b0 <get_usbd_ctx>
   20772:	4603      	mov	r3, r0
   20774:	795b      	ldrb	r3, [r3, #5]
}
   20776:	4618      	mov	r0, r3
   20778:	bd80      	pop	{r7, pc}

0002077a <ep_addr_to_nrfx>:
{
   2077a:	b480      	push	{r7}
   2077c:	b083      	sub	sp, #12
   2077e:	af00      	add	r7, sp, #0
   20780:	4603      	mov	r3, r0
   20782:	71fb      	strb	r3, [r7, #7]
	return (nrfx_usbd_ep_t)ep;
   20784:	79fb      	ldrb	r3, [r7, #7]
}
   20786:	4618      	mov	r0, r3
   20788:	370c      	adds	r7, #12
   2078a:	46bd      	mov	sp, r7
   2078c:	bc80      	pop	{r7}
   2078e:	4770      	bx	lr

00020790 <ep_is_valid>:
{
   20790:	b480      	push	{r7}
   20792:	b085      	sub	sp, #20
   20794:	af00      	add	r7, sp, #0
   20796:	4603      	mov	r3, r0
   20798:	71fb      	strb	r3, [r7, #7]
	u8_t ep_num = NRF_USBD_EP_NR_GET(ep);
   2079a:	79fb      	ldrb	r3, [r7, #7]
   2079c:	f003 030f 	and.w	r3, r3, #15
   207a0:	73fb      	strb	r3, [r7, #15]
	if (NRF_USBD_EPIN_CHECK(ep)) {
   207a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
   207a6:	2b00      	cmp	r3, #0
   207a8:	da0e      	bge.n	207c8 <ep_is_valid+0x38>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   207aa:	79fb      	ldrb	r3, [r7, #7]
   207ac:	f003 0308 	and.w	r3, r3, #8
   207b0:	2b00      	cmp	r3, #0
   207b2:	bf14      	ite	ne
   207b4:	2301      	movne	r3, #1
   207b6:	2300      	moveq	r3, #0
   207b8:	b2db      	uxtb	r3, r3
   207ba:	2b00      	cmp	r3, #0
   207bc:	d113      	bne.n	207e6 <ep_is_valid+0x56>
			if (ep_num >= CFG_EPIN_CNT) {
   207be:	7bfb      	ldrb	r3, [r7, #15]
   207c0:	2b07      	cmp	r3, #7
   207c2:	d910      	bls.n	207e6 <ep_is_valid+0x56>
				return false;
   207c4:	2300      	movs	r3, #0
   207c6:	e00f      	b.n	207e8 <ep_is_valid+0x58>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   207c8:	79fb      	ldrb	r3, [r7, #7]
   207ca:	f003 0308 	and.w	r3, r3, #8
   207ce:	2b00      	cmp	r3, #0
   207d0:	bf14      	ite	ne
   207d2:	2301      	movne	r3, #1
   207d4:	2300      	moveq	r3, #0
   207d6:	b2db      	uxtb	r3, r3
   207d8:	2b00      	cmp	r3, #0
   207da:	d104      	bne.n	207e6 <ep_is_valid+0x56>
			if (ep_num >= CFG_EPOUT_CNT) {
   207dc:	7bfb      	ldrb	r3, [r7, #15]
   207de:	2b07      	cmp	r3, #7
   207e0:	d901      	bls.n	207e6 <ep_is_valid+0x56>
				return false;
   207e2:	2300      	movs	r3, #0
   207e4:	e000      	b.n	207e8 <ep_is_valid+0x58>
	return true;
   207e6:	2301      	movs	r3, #1
}
   207e8:	4618      	mov	r0, r3
   207ea:	3714      	adds	r7, #20
   207ec:	46bd      	mov	sp, r7
   207ee:	bc80      	pop	{r7}
   207f0:	4770      	bx	lr

000207f2 <endpoint_ctx>:
{
   207f2:	b580      	push	{r7, lr}
   207f4:	b084      	sub	sp, #16
   207f6:	af00      	add	r7, sp, #0
   207f8:	4603      	mov	r3, r0
   207fa:	71fb      	strb	r3, [r7, #7]
	if (!ep_is_valid(ep)) {
   207fc:	79fb      	ldrb	r3, [r7, #7]
   207fe:	4618      	mov	r0, r3
   20800:	f7ff ffc6 	bl	20790 <ep_is_valid>
   20804:	4603      	mov	r3, r0
   20806:	f083 0301 	eor.w	r3, r3, #1
   2080a:	b2db      	uxtb	r3, r3
   2080c:	2b00      	cmp	r3, #0
   2080e:	d001      	beq.n	20814 <endpoint_ctx+0x22>
		return NULL;
   20810:	2300      	movs	r3, #0
   20812:	e039      	b.n	20888 <endpoint_ctx+0x96>
	ctx = get_usbd_ctx();
   20814:	f7f0 f84c 	bl	108b0 <get_usbd_ctx>
   20818:	60f8      	str	r0, [r7, #12]
	ep_num = NRF_USBD_EP_NR_GET(ep);
   2081a:	79fb      	ldrb	r3, [r7, #7]
   2081c:	f003 030f 	and.w	r3, r3, #15
   20820:	72fb      	strb	r3, [r7, #11]
	if (NRF_USBD_EPIN_CHECK(ep)) {
   20822:	f997 3007 	ldrsb.w	r3, [r7, #7]
   20826:	2b00      	cmp	r3, #0
   20828:	da16      	bge.n	20858 <endpoint_ctx+0x66>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   2082a:	79fb      	ldrb	r3, [r7, #7]
   2082c:	f003 0308 	and.w	r3, r3, #8
   20830:	2b00      	cmp	r3, #0
   20832:	bf14      	ite	ne
   20834:	2301      	movne	r3, #1
   20836:	2300      	moveq	r3, #0
   20838:	b2db      	uxtb	r3, r3
   2083a:	2b00      	cmp	r3, #0
   2083c:	d003      	beq.n	20846 <endpoint_ctx+0x54>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
   2083e:	68fb      	ldr	r3, [r7, #12]
   20840:	f503 73a4 	add.w	r3, r3, #328	; 0x148
   20844:	e020      	b.n	20888 <endpoint_ctx+0x96>
			return &ctx->ep_ctx[ep_num];
   20846:	7afa      	ldrb	r2, [r7, #11]
   20848:	4613      	mov	r3, r2
   2084a:	00db      	lsls	r3, r3, #3
   2084c:	4413      	add	r3, r2
   2084e:	009b      	lsls	r3, r3, #2
   20850:	3328      	adds	r3, #40	; 0x28
   20852:	68fa      	ldr	r2, [r7, #12]
   20854:	4413      	add	r3, r2
   20856:	e017      	b.n	20888 <endpoint_ctx+0x96>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   20858:	79fb      	ldrb	r3, [r7, #7]
   2085a:	f003 0308 	and.w	r3, r3, #8
   2085e:	2b00      	cmp	r3, #0
   20860:	bf14      	ite	ne
   20862:	2301      	movne	r3, #1
   20864:	2300      	moveq	r3, #0
   20866:	b2db      	uxtb	r3, r3
   20868:	2b00      	cmp	r3, #0
   2086a:	d003      	beq.n	20874 <endpoint_ctx+0x82>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
   2086c:	68fb      	ldr	r3, [r7, #12]
   2086e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
   20872:	e009      	b.n	20888 <endpoint_ctx+0x96>
					    CFG_EP_ISOIN_CNT +
   20874:	7afb      	ldrb	r3, [r7, #11]
   20876:	f103 0209 	add.w	r2, r3, #9
			return &ctx->ep_ctx[CFG_EPIN_CNT +
   2087a:	4613      	mov	r3, r2
   2087c:	00db      	lsls	r3, r3, #3
   2087e:	4413      	add	r3, r2
   20880:	009b      	lsls	r3, r3, #2
   20882:	3328      	adds	r3, #40	; 0x28
   20884:	68fa      	ldr	r2, [r7, #12]
   20886:	4413      	add	r3, r2
}
   20888:	4618      	mov	r0, r3
   2088a:	3710      	adds	r7, #16
   2088c:	46bd      	mov	sp, r7
   2088e:	bd80      	pop	{r7, pc}

00020890 <in_endpoint_ctx>:
{
   20890:	b580      	push	{r7, lr}
   20892:	b082      	sub	sp, #8
   20894:	af00      	add	r7, sp, #0
   20896:	4603      	mov	r3, r0
   20898:	71fb      	strb	r3, [r7, #7]
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   2089a:	79fb      	ldrb	r3, [r7, #7]
   2089c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   208a0:	b2db      	uxtb	r3, r3
   208a2:	4618      	mov	r0, r3
   208a4:	f7ff ffa5 	bl	207f2 <endpoint_ctx>
   208a8:	4603      	mov	r3, r0
}
   208aa:	4618      	mov	r0, r3
   208ac:	3708      	adds	r7, #8
   208ae:	46bd      	mov	sp, r7
   208b0:	bd80      	pop	{r7, pc}

000208b2 <out_endpoint_ctx>:
{
   208b2:	b580      	push	{r7, lr}
   208b4:	b082      	sub	sp, #8
   208b6:	af00      	add	r7, sp, #0
   208b8:	4603      	mov	r3, r0
   208ba:	71fb      	strb	r3, [r7, #7]
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   208bc:	79fb      	ldrb	r3, [r7, #7]
   208be:	4618      	mov	r0, r3
   208c0:	f7ff ff97 	bl	207f2 <endpoint_ctx>
   208c4:	4603      	mov	r3, r0
}
   208c6:	4618      	mov	r0, r3
   208c8:	3708      	adds	r7, #8
   208ca:	46bd      	mov	sp, r7
   208cc:	bd80      	pop	{r7, pc}

000208ce <usbd_work_schedule>:
{
   208ce:	b580      	push	{r7, lr}
   208d0:	af00      	add	r7, sp, #0
	k_work_submit(&get_usbd_ctx()->usb_work);
   208d2:	f7ef ffed 	bl	108b0 <get_usbd_ctx>
   208d6:	4603      	mov	r3, r0
   208d8:	3308      	adds	r3, #8
   208da:	4618      	mov	r0, r3
   208dc:	f7ef ff1c 	bl	10718 <k_work_submit>
}
   208e0:	bf00      	nop
   208e2:	bd80      	pop	{r7, pc}

000208e4 <usbd_evt_free>:
{
   208e4:	b580      	push	{r7, lr}
   208e6:	b082      	sub	sp, #8
   208e8:	af00      	add	r7, sp, #0
   208ea:	6078      	str	r0, [r7, #4]
	k_mem_pool_free(&ev->block);
   208ec:	687b      	ldr	r3, [r7, #4]
   208ee:	3304      	adds	r3, #4
   208f0:	4618      	mov	r0, r3
   208f2:	f009 fb33 	bl	29f5c <k_mem_pool_free>
}
   208f6:	bf00      	nop
   208f8:	3708      	adds	r7, #8
   208fa:	46bd      	mov	sp, r7
   208fc:	bd80      	pop	{r7, pc}

000208fe <usbd_evt_flush>:
{
   208fe:	b580      	push	{r7, lr}
   20900:	b082      	sub	sp, #8
   20902:	af00      	add	r7, sp, #0
		ev = usbd_evt_get();
   20904:	f7ef ffec 	bl	108e0 <usbd_evt_get>
   20908:	6078      	str	r0, [r7, #4]
		if (ev) {
   2090a:	687b      	ldr	r3, [r7, #4]
   2090c:	2b00      	cmp	r3, #0
   2090e:	d002      	beq.n	20916 <usbd_evt_flush+0x18>
			usbd_evt_free(ev);
   20910:	6878      	ldr	r0, [r7, #4]
   20912:	f7ff ffe7 	bl	208e4 <usbd_evt_free>
	} while (ev != NULL);
   20916:	687b      	ldr	r3, [r7, #4]
   20918:	2b00      	cmp	r3, #0
   2091a:	d1f3      	bne.n	20904 <usbd_evt_flush+0x6>
}
   2091c:	bf00      	nop
   2091e:	3708      	adds	r7, #8
   20920:	46bd      	mov	sp, r7
   20922:	bd80      	pop	{r7, pc}

00020924 <usbd_enable_endpoints>:
{
   20924:	b580      	push	{r7, lr}
   20926:	b084      	sub	sp, #16
   20928:	af00      	add	r7, sp, #0
   2092a:	6078      	str	r0, [r7, #4]
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   2092c:	2300      	movs	r3, #0
   2092e:	60fb      	str	r3, [r7, #12]
   20930:	e015      	b.n	2095e <usbd_enable_endpoints+0x3a>
		ep_ctx = in_endpoint_ctx(i);
   20932:	68fb      	ldr	r3, [r7, #12]
   20934:	b2db      	uxtb	r3, r3
   20936:	4618      	mov	r0, r3
   20938:	f7ff ffaa 	bl	20890 <in_endpoint_ctx>
   2093c:	60b8      	str	r0, [r7, #8]
		if (ep_ctx->cfg.en) {
   2093e:	68bb      	ldr	r3, [r7, #8]
   20940:	7a1b      	ldrb	r3, [r3, #8]
   20942:	2b00      	cmp	r3, #0
   20944:	d008      	beq.n	20958 <usbd_enable_endpoints+0x34>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   20946:	68bb      	ldr	r3, [r7, #8]
   20948:	7a5b      	ldrb	r3, [r3, #9]
   2094a:	4618      	mov	r0, r3
   2094c:	f7ff ff15 	bl	2077a <ep_addr_to_nrfx>
   20950:	4603      	mov	r3, r0
   20952:	4618      	mov	r0, r3
   20954:	f7ed fa14 	bl	dd80 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   20958:	68fb      	ldr	r3, [r7, #12]
   2095a:	3301      	adds	r3, #1
   2095c:	60fb      	str	r3, [r7, #12]
   2095e:	68fb      	ldr	r3, [r7, #12]
   20960:	2b07      	cmp	r3, #7
   20962:	dde6      	ble.n	20932 <usbd_enable_endpoints+0xe>
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
   20964:	2088      	movs	r0, #136	; 0x88
   20966:	f7ff ff93 	bl	20890 <in_endpoint_ctx>
   2096a:	60b8      	str	r0, [r7, #8]
		if (ep_ctx->cfg.en) {
   2096c:	68bb      	ldr	r3, [r7, #8]
   2096e:	7a1b      	ldrb	r3, [r3, #8]
   20970:	2b00      	cmp	r3, #0
   20972:	d008      	beq.n	20986 <usbd_enable_endpoints+0x62>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   20974:	68bb      	ldr	r3, [r7, #8]
   20976:	7a5b      	ldrb	r3, [r3, #9]
   20978:	4618      	mov	r0, r3
   2097a:	f7ff fefe 	bl	2077a <ep_addr_to_nrfx>
   2097e:	4603      	mov	r3, r0
   20980:	4618      	mov	r0, r3
   20982:	f7ed f9fd 	bl	dd80 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   20986:	2300      	movs	r3, #0
   20988:	60fb      	str	r3, [r7, #12]
   2098a:	e015      	b.n	209b8 <usbd_enable_endpoints+0x94>
		ep_ctx = out_endpoint_ctx(i);
   2098c:	68fb      	ldr	r3, [r7, #12]
   2098e:	b2db      	uxtb	r3, r3
   20990:	4618      	mov	r0, r3
   20992:	f7ff ff8e 	bl	208b2 <out_endpoint_ctx>
   20996:	60b8      	str	r0, [r7, #8]
		if (ep_ctx->cfg.en) {
   20998:	68bb      	ldr	r3, [r7, #8]
   2099a:	7a1b      	ldrb	r3, [r3, #8]
   2099c:	2b00      	cmp	r3, #0
   2099e:	d008      	beq.n	209b2 <usbd_enable_endpoints+0x8e>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   209a0:	68bb      	ldr	r3, [r7, #8]
   209a2:	7a5b      	ldrb	r3, [r3, #9]
   209a4:	4618      	mov	r0, r3
   209a6:	f7ff fee8 	bl	2077a <ep_addr_to_nrfx>
   209aa:	4603      	mov	r3, r0
   209ac:	4618      	mov	r0, r3
   209ae:	f7ed f9e7 	bl	dd80 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   209b2:	68fb      	ldr	r3, [r7, #12]
   209b4:	3301      	adds	r3, #1
   209b6:	60fb      	str	r3, [r7, #12]
   209b8:	68fb      	ldr	r3, [r7, #12]
   209ba:	2b07      	cmp	r3, #7
   209bc:	dde6      	ble.n	2098c <usbd_enable_endpoints+0x68>
		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
   209be:	2008      	movs	r0, #8
   209c0:	f7ff ff77 	bl	208b2 <out_endpoint_ctx>
   209c4:	60b8      	str	r0, [r7, #8]
		if (ep_ctx->cfg.en) {
   209c6:	68bb      	ldr	r3, [r7, #8]
   209c8:	7a1b      	ldrb	r3, [r3, #8]
   209ca:	2b00      	cmp	r3, #0
   209cc:	d008      	beq.n	209e0 <usbd_enable_endpoints+0xbc>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   209ce:	68bb      	ldr	r3, [r7, #8]
   209d0:	7a5b      	ldrb	r3, [r3, #9]
   209d2:	4618      	mov	r0, r3
   209d4:	f7ff fed1 	bl	2077a <ep_addr_to_nrfx>
   209d8:	4603      	mov	r3, r0
   209da:	4618      	mov	r0, r3
   209dc:	f7ed f9d0 	bl	dd80 <nrfx_usbd_ep_enable>
}
   209e0:	bf00      	nop
   209e2:	3710      	adds	r7, #16
   209e4:	46bd      	mov	sp, r7
   209e6:	bd80      	pop	{r7, pc}

000209e8 <ep_ctx_reset>:
{
   209e8:	b480      	push	{r7}
   209ea:	b083      	sub	sp, #12
   209ec:	af00      	add	r7, sp, #0
   209ee:	6078      	str	r0, [r7, #4]
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   209f0:	687b      	ldr	r3, [r7, #4]
   209f2:	691a      	ldr	r2, [r3, #16]
   209f4:	687b      	ldr	r3, [r7, #4]
   209f6:	619a      	str	r2, [r3, #24]
	ep_ctx->buf.curr = ep_ctx->buf.data;
   209f8:	687b      	ldr	r3, [r7, #4]
   209fa:	699a      	ldr	r2, [r3, #24]
   209fc:	687b      	ldr	r3, [r7, #4]
   209fe:	61da      	str	r2, [r3, #28]
	ep_ctx->buf.len  = 0U;
   20a00:	687b      	ldr	r3, [r7, #4]
   20a02:	2200      	movs	r2, #0
   20a04:	60da      	str	r2, [r3, #12]
	ep_ctx->read_complete = true;
   20a06:	687b      	ldr	r3, [r7, #4]
   20a08:	2201      	movs	r2, #1
   20a0a:	f883 2020 	strb.w	r2, [r3, #32]
	ep_ctx->read_pending = false;
   20a0e:	687b      	ldr	r3, [r7, #4]
   20a10:	2200      	movs	r2, #0
   20a12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	ep_ctx->write_in_progress = false;
   20a16:	687b      	ldr	r3, [r7, #4]
   20a18:	2200      	movs	r2, #0
   20a1a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
   20a1e:	bf00      	nop
   20a20:	370c      	adds	r7, #12
   20a22:	46bd      	mov	sp, r7
   20a24:	bc80      	pop	{r7}
   20a26:	4770      	bx	lr

00020a28 <usbd_work_process_setup>:
{
   20a28:	b580      	push	{r7, lr}
   20a2a:	b092      	sub	sp, #72	; 0x48
   20a2c:	af00      	add	r7, sp, #0
   20a2e:	6078      	str	r0, [r7, #4]
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
   20a30:	687b      	ldr	r3, [r7, #4]
   20a32:	699b      	ldr	r3, [r3, #24]
   20a34:	63bb      	str	r3, [r7, #56]	; 0x38
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
   20a36:	2208      	movs	r2, #8
   20a38:	2100      	movs	r1, #0
   20a3a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   20a3c:	f7e1 fb3c 	bl	20b8 <memset>
	usbd_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get();
   20a40:	f7ef fe78 	bl	10734 <nrf_usbd_setup_bmrequesttype_get>
   20a44:	4603      	mov	r3, r0
   20a46:	461a      	mov	r2, r3
   20a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   20a4a:	701a      	strb	r2, [r3, #0]
	usbd_setup->bRequest = nrf_usbd_setup_brequest_get();
   20a4c:	f7ef fe7e 	bl	1074c <nrf_usbd_setup_brequest_get>
   20a50:	4603      	mov	r3, r0
   20a52:	461a      	mov	r2, r3
   20a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   20a56:	705a      	strb	r2, [r3, #1]
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get();
   20a58:	f7ef fe84 	bl	10764 <nrf_usbd_setup_wvalue_get>
   20a5c:	4603      	mov	r3, r0
   20a5e:	461a      	mov	r2, r3
   20a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   20a62:	805a      	strh	r2, [r3, #2]
	usbd_setup->wIndex = nrf_usbd_setup_windex_get();
   20a64:	f7ef fe96 	bl	10794 <nrf_usbd_setup_windex_get>
   20a68:	4603      	mov	r3, r0
   20a6a:	461a      	mov	r2, r3
   20a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   20a6e:	809a      	strh	r2, [r3, #4]
	usbd_setup->wLength = nrf_usbd_setup_wlength_get();
   20a70:	f7ef fea8 	bl	107c4 <nrf_usbd_setup_wlength_get>
   20a74:	4603      	mov	r3, r0
   20a76:	461a      	mov	r2, r3
   20a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   20a7a:	80da      	strh	r2, [r3, #6]
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   20a7c:	687b      	ldr	r3, [r7, #4]
   20a7e:	2208      	movs	r2, #8
   20a80:	60da      	str	r2, [r3, #12]
	LOG_DBG("SETUP: r:%d rt:%d v:%d i:%d l:%d",
   20a82:	f7ff fda3 	bl	205cc <_is_user_context>
   20a86:	4603      	mov	r3, r0
   20a88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
   20a8c:	687b      	ldr	r3, [r7, #4]
   20a8e:	681b      	ldr	r3, [r3, #0]
   20a90:	687a      	ldr	r2, [r7, #4]
   20a92:	7a52      	ldrb	r2, [r2, #9]
   20a94:	2100      	movs	r1, #0
   20a96:	4610      	mov	r0, r2
   20a98:	4798      	blx	r3
	struct nrf_usbd_ctx *ctx = get_usbd_ctx();
   20a9a:	f7ef ff09 	bl	108b0 <get_usbd_ctx>
   20a9e:	6438      	str	r0, [r7, #64]	; 0x40
	if (((usbd_setup->bmRequestType & USB_BMREQUESTTYPE_DIR_MASK)
   20aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   20aa2:	781b      	ldrb	r3, [r3, #0]
	     == USB_BMREQUESTTYPE_DIR_HOSTTODEVICE_MASK)
   20aa4:	b25b      	sxtb	r3, r3
	if (((usbd_setup->bmRequestType & USB_BMREQUESTTYPE_DIR_MASK)
   20aa6:	2b00      	cmp	r3, #0
   20aa8:	db13      	blt.n	20ad2 <usbd_work_process_setup+0xaa>
	    && (usbd_setup->wLength)) {
   20aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   20aac:	88db      	ldrh	r3, [r3, #6]
   20aae:	2b00      	cmp	r3, #0
   20ab0:	d00f      	beq.n	20ad2 <usbd_work_process_setup+0xaa>
		struct nrf_usbd_ctx *ctx = get_usbd_ctx();
   20ab2:	f7ef fefd 	bl	108b0 <get_usbd_ctx>
   20ab6:	63f8      	str	r0, [r7, #60]	; 0x3c
		ctx->ctrl_read_len -= usbd_setup->wLength;
   20ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   20aba:	f8b3 22b0 	ldrh.w	r2, [r3, #688]	; 0x2b0
   20abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   20ac0:	88db      	ldrh	r3, [r3, #6]
   20ac2:	1ad3      	subs	r3, r2, r3
   20ac4:	b29a      	uxth	r2, r3
   20ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   20ac8:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0
		nrfx_usbd_setup_data_clear();
   20acc:	f7fb fe5e 	bl	1c78c <nrfx_usbd_setup_data_clear>
	    && (usbd_setup->wLength)) {
   20ad0:	e003      	b.n	20ada <usbd_work_process_setup+0xb2>
		ctx->ctrl_read_len = 0U;
   20ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   20ad4:	2200      	movs	r2, #0
   20ad6:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0
}
   20ada:	bf00      	nop
   20adc:	3748      	adds	r7, #72	; 0x48
   20ade:	46bd      	mov	sp, r7
   20ae0:	bd80      	pop	{r7, pc}

00020ae2 <usbd_event_transfer_ctrl>:
{
   20ae2:	b580      	push	{r7, lr}
   20ae4:	b090      	sub	sp, #64	; 0x40
   20ae6:	af00      	add	r7, sp, #0
   20ae8:	6078      	str	r0, [r7, #4]
		endpoint_ctx(p_event->data.eptransfer.ep);
   20aea:	687b      	ldr	r3, [r7, #4]
   20aec:	789b      	ldrb	r3, [r3, #2]
   20aee:	4618      	mov	r0, r3
   20af0:	f7ff fe7f 	bl	207f2 <endpoint_ctx>
   20af4:	6338      	str	r0, [r7, #48]	; 0x30
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   20af6:	687b      	ldr	r3, [r7, #4]
   20af8:	789b      	ldrb	r3, [r3, #2]
   20afa:	b25b      	sxtb	r3, r3
   20afc:	2b00      	cmp	r3, #0
   20afe:	da29      	bge.n	20b54 <usbd_event_transfer_ctrl+0x72>
		switch (p_event->data.eptransfer.status) {
   20b00:	687b      	ldr	r3, [r7, #4]
   20b02:	78db      	ldrb	r3, [r3, #3]
   20b04:	2b00      	cmp	r3, #0
   20b06:	d11e      	bne.n	20b46 <usbd_event_transfer_ctrl+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
   20b08:	f7ef fef6 	bl	108f8 <usbd_evt_alloc>
   20b0c:	62f8      	str	r0, [r7, #44]	; 0x2c
			if (!ev) {
   20b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   20b10:	2b00      	cmp	r3, #0
   20b12:	f000 8094 	beq.w	20c3e <usbd_event_transfer_ctrl+0x15c>
			ep_ctx->write_in_progress = false;
   20b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20b18:	2200      	movs	r2, #0
   20b1a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			ev->evt_type = USBD_EVT_EP;
   20b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   20b20:	2201      	movs	r2, #1
   20b22:	751a      	strb	r2, [r3, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   20b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   20b26:	2203      	movs	r2, #3
   20b28:	741a      	strb	r2, [r3, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   20b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   20b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   20b2e:	60da      	str	r2, [r3, #12]
			LOG_DBG("ctrl write complete");
   20b30:	f7ff fd4c 	bl	205cc <_is_user_context>
   20b34:	4603      	mov	r3, r0
   20b36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			usbd_evt_put(ev);
   20b3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   20b3c:	f7ef fec2 	bl	108c4 <usbd_evt_put>
			usbd_work_schedule();
   20b40:	f7ff fec5 	bl	208ce <usbd_work_schedule>
		break;
   20b44:	e080      	b.n	20c48 <usbd_event_transfer_ctrl+0x166>
			LOG_ERR(
   20b46:	f7ff fd41 	bl	205cc <_is_user_context>
   20b4a:	4603      	mov	r3, r0
   20b4c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		break;
   20b50:	bf00      	nop
   20b52:	e079      	b.n	20c48 <usbd_event_transfer_ctrl+0x166>
		switch (p_event->data.eptransfer.status) {
   20b54:	687b      	ldr	r3, [r7, #4]
   20b56:	78db      	ldrb	r3, [r3, #3]
   20b58:	2b00      	cmp	r3, #0
   20b5a:	d01f      	beq.n	20b9c <usbd_event_transfer_ctrl+0xba>
   20b5c:	2b01      	cmp	r3, #1
   20b5e:	d167      	bne.n	20c30 <usbd_event_transfer_ctrl+0x14e>
			struct usbd_event *ev = usbd_evt_alloc();
   20b60:	f7ef feca 	bl	108f8 <usbd_evt_alloc>
   20b64:	63b8      	str	r0, [r7, #56]	; 0x38
			if (!ev) {
   20b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   20b68:	2b00      	cmp	r3, #0
   20b6a:	d06a      	beq.n	20c42 <usbd_event_transfer_ctrl+0x160>
			LOG_DBG("ctrl read request");
   20b6c:	f7ff fd2e 	bl	205cc <_is_user_context>
   20b70:	4603      	mov	r3, r0
   20b72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ep_ctx->read_pending = true;
   20b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20b78:	2201      	movs	r2, #1
   20b7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			ev->evt_type = USBD_EVT_EP;
   20b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   20b80:	2201      	movs	r2, #1
   20b82:	751a      	strb	r2, [r3, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   20b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   20b86:	2201      	movs	r2, #1
   20b88:	741a      	strb	r2, [r3, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   20b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   20b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   20b8e:	60da      	str	r2, [r3, #12]
			usbd_evt_put(ev);
   20b90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   20b92:	f7ef fe97 	bl	108c4 <usbd_evt_put>
			usbd_work_schedule();
   20b96:	f7ff fe9a 	bl	208ce <usbd_work_schedule>
		break;
   20b9a:	e055      	b.n	20c48 <usbd_event_transfer_ctrl+0x166>
			struct nrf_usbd_ctx *ctx = get_usbd_ctx();
   20b9c:	f7ef fe88 	bl	108b0 <get_usbd_ctx>
   20ba0:	62b8      	str	r0, [r7, #40]	; 0x28
			struct usbd_event *ev = usbd_evt_alloc();
   20ba2:	f7ef fea9 	bl	108f8 <usbd_evt_alloc>
   20ba6:	6238      	str	r0, [r7, #32]
			if (!ev) {
   20ba8:	6a3b      	ldr	r3, [r7, #32]
   20baa:	2b00      	cmp	r3, #0
   20bac:	d04b      	beq.n	20c46 <usbd_event_transfer_ctrl+0x164>
			ev->evt_type = USBD_EVT_EP;
   20bae:	6a3b      	ldr	r3, [r7, #32]
   20bb0:	2201      	movs	r2, #1
   20bb2:	751a      	strb	r2, [r3, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   20bb4:	6a3b      	ldr	r3, [r7, #32]
   20bb6:	2202      	movs	r2, #2
   20bb8:	741a      	strb	r2, [r3, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   20bba:	6a3b      	ldr	r3, [r7, #32]
   20bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   20bbe:	60da      	str	r2, [r3, #12]
			err_code = nrfx_usbd_ep_status_get(
   20bc0:	687b      	ldr	r3, [r7, #4]
   20bc2:	789a      	ldrb	r2, [r3, #2]
				p_event->data.eptransfer.ep, &ep_ctx->buf.len);
   20bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20bc6:	330c      	adds	r3, #12
			err_code = nrfx_usbd_ep_status_get(
   20bc8:	4619      	mov	r1, r3
   20bca:	4610      	mov	r0, r2
   20bcc:	f7fb fd2e 	bl	1c62c <nrfx_usbd_ep_status_get>
   20bd0:	4603      	mov	r3, r0
   20bd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (err_code != NRFX_USBD_EP_OK) {
   20bd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   20bda:	2b00      	cmp	r3, #0
   20bdc:	d004      	beq.n	20be8 <usbd_event_transfer_ctrl+0x106>
				LOG_ERR("_ep_status_get failed! Code: %d.",
   20bde:	f7ff fcf5 	bl	205cc <_is_user_context>
   20be2:	4603      	mov	r3, r0
   20be4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			LOG_DBG("ctrl read done: %d", ep_ctx->buf.len);
   20be8:	f7ff fcf0 	bl	205cc <_is_user_context>
   20bec:	4603      	mov	r3, r0
   20bee:	77fb      	strb	r3, [r7, #31]
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
   20bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20bf2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
   20bf6:	461a      	mov	r2, r3
   20bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20bfa:	68db      	ldr	r3, [r3, #12]
   20bfc:	429a      	cmp	r2, r3
   20bfe:	d90d      	bls.n	20c1c <usbd_event_transfer_ctrl+0x13a>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
   20c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20c02:	f8b3 22b0 	ldrh.w	r2, [r3, #688]	; 0x2b0
   20c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20c08:	68db      	ldr	r3, [r3, #12]
   20c0a:	b29b      	uxth	r3, r3
   20c0c:	1ad3      	subs	r3, r2, r3
   20c0e:	b29a      	uxth	r2, r3
   20c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20c12:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0
				nrfx_usbd_setup_data_clear();
   20c16:	f7fb fdb9 	bl	1c78c <nrfx_usbd_setup_data_clear>
   20c1a:	e003      	b.n	20c24 <usbd_event_transfer_ctrl+0x142>
				ctx->ctrl_read_len = 0U;
   20c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20c1e:	2200      	movs	r2, #0
   20c20:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0
			usbd_evt_put(ev);
   20c24:	6a38      	ldr	r0, [r7, #32]
   20c26:	f7ef fe4d 	bl	108c4 <usbd_evt_put>
			usbd_work_schedule();
   20c2a:	f7ff fe50 	bl	208ce <usbd_work_schedule>
		break;
   20c2e:	e00b      	b.n	20c48 <usbd_event_transfer_ctrl+0x166>
			LOG_ERR("Unexpected event from nrfx_usbd: %d, ep %d",
   20c30:	f7ff fccc 	bl	205cc <_is_user_context>
   20c34:	4603      	mov	r3, r0
   20c36:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		break;
   20c3a:	bf00      	nop
   20c3c:	e004      	b.n	20c48 <usbd_event_transfer_ctrl+0x166>
				return;
   20c3e:	bf00      	nop
   20c40:	e002      	b.n	20c48 <usbd_event_transfer_ctrl+0x166>
				return;
   20c42:	bf00      	nop
   20c44:	e000      	b.n	20c48 <usbd_event_transfer_ctrl+0x166>
				return;
   20c46:	bf00      	nop
}
   20c48:	3740      	adds	r7, #64	; 0x40
   20c4a:	46bd      	mov	sp, r7
   20c4c:	bd80      	pop	{r7, pc}

00020c4e <usbd_event_transfer_data>:
{
   20c4e:	b580      	push	{r7, lr}
   20c50:	b08e      	sub	sp, #56	; 0x38
   20c52:	af00      	add	r7, sp, #0
   20c54:	6078      	str	r0, [r7, #4]
		endpoint_ctx(p_event->data.eptransfer.ep);
   20c56:	687b      	ldr	r3, [r7, #4]
   20c58:	789b      	ldrb	r3, [r3, #2]
   20c5a:	4618      	mov	r0, r3
   20c5c:	f7ff fdc9 	bl	207f2 <endpoint_ctx>
   20c60:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   20c62:	687b      	ldr	r3, [r7, #4]
   20c64:	789b      	ldrb	r3, [r3, #2]
   20c66:	b25b      	sxtb	r3, r3
   20c68:	2b00      	cmp	r3, #0
   20c6a:	da28      	bge.n	20cbe <usbd_event_transfer_data+0x70>
		switch (p_event->data.eptransfer.status) {
   20c6c:	687b      	ldr	r3, [r7, #4]
   20c6e:	78db      	ldrb	r3, [r3, #3]
   20c70:	2b00      	cmp	r3, #0
   20c72:	d11d      	bne.n	20cb0 <usbd_event_transfer_data+0x62>
			struct usbd_event *ev = usbd_evt_alloc();
   20c74:	f7ef fe40 	bl	108f8 <usbd_evt_alloc>
   20c78:	6378      	str	r0, [r7, #52]	; 0x34
			if (!ev) {
   20c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   20c7c:	2b00      	cmp	r3, #0
   20c7e:	d06b      	beq.n	20d58 <usbd_event_transfer_data+0x10a>
			LOG_DBG("write complete, ep %d",
   20c80:	f7ff fca4 	bl	205cc <_is_user_context>
   20c84:	4603      	mov	r3, r0
   20c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			ep_ctx->write_in_progress = false;
   20c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   20c8c:	2200      	movs	r2, #0
   20c8e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			ev->evt_type = USBD_EVT_EP;
   20c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   20c94:	2201      	movs	r2, #1
   20c96:	751a      	strb	r2, [r3, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   20c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   20c9a:	2203      	movs	r2, #3
   20c9c:	741a      	strb	r2, [r3, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   20c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   20ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   20ca2:	60da      	str	r2, [r3, #12]
			usbd_evt_put(ev);
   20ca4:	6b78      	ldr	r0, [r7, #52]	; 0x34
   20ca6:	f7ef fe0d 	bl	108c4 <usbd_evt_put>
			usbd_work_schedule();
   20caa:	f7ff fe10 	bl	208ce <usbd_work_schedule>
		break;
   20cae:	e058      	b.n	20d62 <usbd_event_transfer_data+0x114>
			LOG_ERR("Unexpected event from nrfx_usbd: %d, ep %d",
   20cb0:	f7ff fc8c 	bl	205cc <_is_user_context>
   20cb4:	4603      	mov	r3, r0
   20cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		break;
   20cba:	bf00      	nop
   20cbc:	e051      	b.n	20d62 <usbd_event_transfer_data+0x114>
		switch (p_event->data.eptransfer.status) {
   20cbe:	687b      	ldr	r3, [r7, #4]
   20cc0:	78db      	ldrb	r3, [r3, #3]
   20cc2:	2b00      	cmp	r3, #0
   20cc4:	d01f      	beq.n	20d06 <usbd_event_transfer_data+0xb8>
   20cc6:	2b01      	cmp	r3, #1
   20cc8:	d13f      	bne.n	20d4a <usbd_event_transfer_data+0xfc>
			struct usbd_event *ev = usbd_evt_alloc();
   20cca:	f7ef fe15 	bl	108f8 <usbd_evt_alloc>
   20cce:	61f8      	str	r0, [r7, #28]
			if (!ev) {
   20cd0:	69fb      	ldr	r3, [r7, #28]
   20cd2:	2b00      	cmp	r3, #0
   20cd4:	d042      	beq.n	20d5c <usbd_event_transfer_data+0x10e>
			LOG_DBG("read request, ep %d",
   20cd6:	f7ff fc79 	bl	205cc <_is_user_context>
   20cda:	4603      	mov	r3, r0
   20cdc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			ep_ctx->read_pending = true;
   20ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   20ce2:	2201      	movs	r2, #1
   20ce4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			ev->evt_type = USBD_EVT_EP;
   20ce8:	69fb      	ldr	r3, [r7, #28]
   20cea:	2201      	movs	r2, #1
   20cec:	751a      	strb	r2, [r3, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   20cee:	69fb      	ldr	r3, [r7, #28]
   20cf0:	2201      	movs	r2, #1
   20cf2:	741a      	strb	r2, [r3, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   20cf4:	69fb      	ldr	r3, [r7, #28]
   20cf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   20cf8:	60da      	str	r2, [r3, #12]
			usbd_evt_put(ev);
   20cfa:	69f8      	ldr	r0, [r7, #28]
   20cfc:	f7ef fde2 	bl	108c4 <usbd_evt_put>
			usbd_work_schedule();
   20d00:	f7ff fde5 	bl	208ce <usbd_work_schedule>
		break;
   20d04:	e02d      	b.n	20d62 <usbd_event_transfer_data+0x114>
			struct usbd_event *ev = usbd_evt_alloc();
   20d06:	f7ef fdf7 	bl	108f8 <usbd_evt_alloc>
   20d0a:	6278      	str	r0, [r7, #36]	; 0x24
			if (!ev) {
   20d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20d0e:	2b00      	cmp	r3, #0
   20d10:	d026      	beq.n	20d60 <usbd_event_transfer_data+0x112>
				p_event->data.eptransfer.ep);
   20d12:	687b      	ldr	r3, [r7, #4]
   20d14:	789b      	ldrb	r3, [r3, #2]
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(
   20d16:	4618      	mov	r0, r3
   20d18:	f7ef fd6c 	bl	107f4 <nrf_usbd_ep_amount_get>
   20d1c:	4602      	mov	r2, r0
   20d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   20d20:	60da      	str	r2, [r3, #12]
			LOG_DBG("read complete, ep %d, len %d",
   20d22:	f7ff fc53 	bl	205cc <_is_user_context>
   20d26:	4603      	mov	r3, r0
   20d28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			ev->evt_type = USBD_EVT_EP;
   20d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20d2e:	2201      	movs	r2, #1
   20d30:	751a      	strb	r2, [r3, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   20d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20d34:	2202      	movs	r2, #2
   20d36:	741a      	strb	r2, [r3, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   20d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20d3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   20d3c:	60da      	str	r2, [r3, #12]
			usbd_evt_put(ev);
   20d3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
   20d40:	f7ef fdc0 	bl	108c4 <usbd_evt_put>
			usbd_work_schedule();
   20d44:	f7ff fdc3 	bl	208ce <usbd_work_schedule>
		break;
   20d48:	e00b      	b.n	20d62 <usbd_event_transfer_data+0x114>
			LOG_ERR("Unexpected event from nrfx_usbd: %d, ep %d",
   20d4a:	f7ff fc3f 	bl	205cc <_is_user_context>
   20d4e:	4603      	mov	r3, r0
   20d50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		break;
   20d54:	bf00      	nop
   20d56:	e004      	b.n	20d62 <usbd_event_transfer_data+0x114>
				return;
   20d58:	bf00      	nop
   20d5a:	e002      	b.n	20d62 <usbd_event_transfer_data+0x114>
				return;
   20d5c:	bf00      	nop
   20d5e:	e000      	b.n	20d62 <usbd_event_transfer_data+0x114>
				return;
   20d60:	bf00      	nop
}
   20d62:	3738      	adds	r7, #56	; 0x38
   20d64:	46bd      	mov	sp, r7
   20d66:	bd80      	pop	{r7, pc}

00020d68 <usb_dc_set_address>:
{
   20d68:	b580      	push	{r7, lr}
   20d6a:	b086      	sub	sp, #24
   20d6c:	af00      	add	r7, sp, #0
   20d6e:	4603      	mov	r3, r0
   20d70:	71fb      	strb	r3, [r7, #7]
	if (!dev_attached() || !dev_ready()) {
   20d72:	f7ff fcf2 	bl	2075a <dev_attached>
   20d76:	4603      	mov	r3, r0
   20d78:	f083 0301 	eor.w	r3, r3, #1
   20d7c:	b2db      	uxtb	r3, r3
   20d7e:	2b00      	cmp	r3, #0
   20d80:	d107      	bne.n	20d92 <usb_dc_set_address+0x2a>
   20d82:	f7ff fcf2 	bl	2076a <dev_ready>
   20d86:	4603      	mov	r3, r0
   20d88:	f083 0301 	eor.w	r3, r3, #1
   20d8c:	b2db      	uxtb	r3, r3
   20d8e:	2b00      	cmp	r3, #0
   20d90:	d002      	beq.n	20d98 <usb_dc_set_address+0x30>
		return -ENODEV;
   20d92:	f06f 0312 	mvn.w	r3, #18
   20d96:	e007      	b.n	20da8 <usb_dc_set_address+0x40>
	ctx = get_usbd_ctx();
   20d98:	f7ef fd8a 	bl	108b0 <get_usbd_ctx>
   20d9c:	6138      	str	r0, [r7, #16]
	LOG_DBG("Address set to: %d.", addr);
   20d9e:	f7ff fc15 	bl	205cc <_is_user_context>
   20da2:	4603      	mov	r3, r0
   20da4:	75fb      	strb	r3, [r7, #23]
	return 0;
   20da6:	2300      	movs	r3, #0
}
   20da8:	4618      	mov	r0, r3
   20daa:	3718      	adds	r7, #24
   20dac:	46bd      	mov	sp, r7
   20dae:	bd80      	pop	{r7, pc}

00020db0 <usb_dc_ep_check_cap>:
{
   20db0:	b580      	push	{r7, lr}
   20db2:	b08c      	sub	sp, #48	; 0x30
   20db4:	af00      	add	r7, sp, #0
   20db6:	6078      	str	r0, [r7, #4]
	u8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   20db8:	687b      	ldr	r3, [r7, #4]
   20dba:	781b      	ldrb	r3, [r3, #0]
   20dbc:	f003 030f 	and.w	r3, r3, #15
   20dc0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	LOG_DBG("ep %x, mps %d, type %d", ep_cfg->ep_addr, ep_cfg->ep_mps,
   20dc4:	f7ff fc02 	bl	205cc <_is_user_context>
   20dc8:	4603      	mov	r3, r0
   20dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   20dce:	687b      	ldr	r3, [r7, #4]
   20dd0:	791b      	ldrb	r3, [r3, #4]
   20dd2:	2b00      	cmp	r3, #0
   20dd4:	d10b      	bne.n	20dee <usb_dc_ep_check_cap+0x3e>
   20dd6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   20dda:	2b00      	cmp	r3, #0
   20ddc:	d007      	beq.n	20dee <usb_dc_ep_check_cap+0x3e>
		LOG_ERR("invalid endpoint configuration");
   20dde:	f7ff fbf5 	bl	205cc <_is_user_context>
   20de2:	4603      	mov	r3, r0
   20de4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		return -1;
   20de8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20dec:	e030      	b.n	20e50 <usb_dc_ep_check_cap+0xa0>
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
   20dee:	687b      	ldr	r3, [r7, #4]
   20df0:	781b      	ldrb	r3, [r3, #0]
   20df2:	b25b      	sxtb	r3, r3
   20df4:	2b00      	cmp	r3, #0
   20df6:	da05      	bge.n	20e04 <usb_dc_ep_check_cap+0x54>
   20df8:	687b      	ldr	r3, [r7, #4]
   20dfa:	781b      	ldrb	r3, [r3, #0]
   20dfc:	f003 030f 	and.w	r3, r3, #15
   20e00:	2b08      	cmp	r3, #8
   20e02:	dd12      	ble.n	20e2a <usb_dc_ep_check_cap+0x7a>
   20e04:	687b      	ldr	r3, [r7, #4]
   20e06:	781b      	ldrb	r3, [r3, #0]
   20e08:	b25b      	sxtb	r3, r3
   20e0a:	2b00      	cmp	r3, #0
   20e0c:	db05      	blt.n	20e1a <usb_dc_ep_check_cap+0x6a>
   20e0e:	687b      	ldr	r3, [r7, #4]
   20e10:	781b      	ldrb	r3, [r3, #0]
   20e12:	f003 030f 	and.w	r3, r3, #15
   20e16:	2b08      	cmp	r3, #8
   20e18:	dd07      	ble.n	20e2a <usb_dc_ep_check_cap+0x7a>
		LOG_ERR("invalid endpoint index/address");
   20e1a:	f7ff fbd7 	bl	205cc <_is_user_context>
   20e1e:	4603      	mov	r3, r0
   20e20:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		return -1;
   20e24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20e28:	e012      	b.n	20e50 <usb_dc_ep_check_cap+0xa0>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   20e2a:	687b      	ldr	r3, [r7, #4]
   20e2c:	791b      	ldrb	r3, [r3, #4]
   20e2e:	2b01      	cmp	r3, #1
   20e30:	d10d      	bne.n	20e4e <usb_dc_ep_check_cap+0x9e>
	    (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr))) {
   20e32:	687b      	ldr	r3, [r7, #4]
   20e34:	781b      	ldrb	r3, [r3, #0]
   20e36:	f003 0308 	and.w	r3, r3, #8
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   20e3a:	2b00      	cmp	r3, #0
   20e3c:	d107      	bne.n	20e4e <usb_dc_ep_check_cap+0x9e>
		LOG_WRN("invalid endpoint type");
   20e3e:	f7ff fbc5 	bl	205cc <_is_user_context>
   20e42:	4603      	mov	r3, r0
   20e44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		return -1;
   20e48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20e4c:	e000      	b.n	20e50 <usb_dc_ep_check_cap+0xa0>
	return 0;
   20e4e:	2300      	movs	r3, #0
}
   20e50:	4618      	mov	r0, r3
   20e52:	3730      	adds	r7, #48	; 0x30
   20e54:	46bd      	mov	sp, r7
   20e56:	bd80      	pop	{r7, pc}

00020e58 <usb_dc_ep_configure>:
{
   20e58:	b580      	push	{r7, lr}
   20e5a:	b084      	sub	sp, #16
   20e5c:	af00      	add	r7, sp, #0
   20e5e:	6078      	str	r0, [r7, #4]
	if (!dev_attached()) {
   20e60:	f7ff fc7b 	bl	2075a <dev_attached>
   20e64:	4603      	mov	r3, r0
   20e66:	f083 0301 	eor.w	r3, r3, #1
   20e6a:	b2db      	uxtb	r3, r3
   20e6c:	2b00      	cmp	r3, #0
   20e6e:	d002      	beq.n	20e76 <usb_dc_ep_configure+0x1e>
		return -ENODEV;
   20e70:	f06f 0312 	mvn.w	r3, #18
   20e74:	e036      	b.n	20ee4 <usb_dc_ep_configure+0x8c>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
   20e76:	687b      	ldr	r3, [r7, #4]
   20e78:	781b      	ldrb	r3, [r3, #0]
   20e7a:	4618      	mov	r0, r3
   20e7c:	f7ff fcb9 	bl	207f2 <endpoint_ctx>
   20e80:	60f8      	str	r0, [r7, #12]
	if (!ep_ctx) {
   20e82:	68fb      	ldr	r3, [r7, #12]
   20e84:	2b00      	cmp	r3, #0
   20e86:	d102      	bne.n	20e8e <usb_dc_ep_configure+0x36>
		return -EINVAL;
   20e88:	f06f 0315 	mvn.w	r3, #21
   20e8c:	e02a      	b.n	20ee4 <usb_dc_ep_configure+0x8c>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
   20e8e:	687b      	ldr	r3, [r7, #4]
   20e90:	781a      	ldrb	r2, [r3, #0]
   20e92:	68fb      	ldr	r3, [r7, #12]
   20e94:	725a      	strb	r2, [r3, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
   20e96:	687b      	ldr	r3, [r7, #4]
   20e98:	791a      	ldrb	r2, [r3, #4]
   20e9a:	68fb      	ldr	r3, [r7, #12]
   20e9c:	729a      	strb	r2, [r3, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
   20e9e:	687b      	ldr	r3, [r7, #4]
   20ea0:	885b      	ldrh	r3, [r3, #2]
   20ea2:	461a      	mov	r2, r3
   20ea4:	68fb      	ldr	r3, [r7, #12]
   20ea6:	605a      	str	r2, [r3, #4]
	if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
   20ea8:	687b      	ldr	r3, [r7, #4]
   20eaa:	885b      	ldrh	r3, [r3, #2]
   20eac:	461a      	mov	r2, r3
   20eae:	687b      	ldr	r3, [r7, #4]
   20eb0:	885b      	ldrh	r3, [r3, #2]
   20eb2:	3b01      	subs	r3, #1
   20eb4:	4013      	ands	r3, r2
   20eb6:	2b00      	cmp	r3, #0
   20eb8:	d006      	beq.n	20ec8 <usb_dc_ep_configure+0x70>
		LOG_ERR("EP max packet size must be a power of 2.");
   20eba:	f7ff fb87 	bl	205cc <_is_user_context>
   20ebe:	4603      	mov	r3, r0
   20ec0:	72fb      	strb	r3, [r7, #11]
		return -EINVAL;
   20ec2:	f06f 0315 	mvn.w	r3, #21
   20ec6:	e00d      	b.n	20ee4 <usb_dc_ep_configure+0x8c>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
   20ec8:	687b      	ldr	r3, [r7, #4]
   20eca:	781b      	ldrb	r3, [r3, #0]
   20ecc:	4618      	mov	r0, r3
   20ece:	f7ff fc54 	bl	2077a <ep_addr_to_nrfx>
   20ed2:	4603      	mov	r3, r0
   20ed4:	461a      	mov	r2, r3
   20ed6:	687b      	ldr	r3, [r7, #4]
   20ed8:	885b      	ldrh	r3, [r3, #2]
   20eda:	4619      	mov	r1, r3
   20edc:	4610      	mov	r0, r2
   20ede:	f7ec ff07 	bl	dcf0 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
   20ee2:	2300      	movs	r3, #0
}
   20ee4:	4618      	mov	r0, r3
   20ee6:	3710      	adds	r7, #16
   20ee8:	46bd      	mov	sp, r7
   20eea:	bd80      	pop	{r7, pc}

00020eec <usb_dc_ep_clear_stall>:
{
   20eec:	b580      	push	{r7, lr}
   20eee:	b084      	sub	sp, #16
   20ef0:	af00      	add	r7, sp, #0
   20ef2:	4603      	mov	r3, r0
   20ef4:	71fb      	strb	r3, [r7, #7]
	if (!dev_attached() || !dev_ready()) {
   20ef6:	f7ff fc30 	bl	2075a <dev_attached>
   20efa:	4603      	mov	r3, r0
   20efc:	f083 0301 	eor.w	r3, r3, #1
   20f00:	b2db      	uxtb	r3, r3
   20f02:	2b00      	cmp	r3, #0
   20f04:	d107      	bne.n	20f16 <usb_dc_ep_clear_stall+0x2a>
   20f06:	f7ff fc30 	bl	2076a <dev_ready>
   20f0a:	4603      	mov	r3, r0
   20f0c:	f083 0301 	eor.w	r3, r3, #1
   20f10:	b2db      	uxtb	r3, r3
   20f12:	2b00      	cmp	r3, #0
   20f14:	d002      	beq.n	20f1c <usb_dc_ep_clear_stall+0x30>
		return -ENODEV;
   20f16:	f06f 0312 	mvn.w	r3, #18
   20f1a:	e017      	b.n	20f4c <usb_dc_ep_clear_stall+0x60>
	ep_ctx = endpoint_ctx(ep);
   20f1c:	79fb      	ldrb	r3, [r7, #7]
   20f1e:	4618      	mov	r0, r3
   20f20:	f7ff fc67 	bl	207f2 <endpoint_ctx>
   20f24:	60f8      	str	r0, [r7, #12]
	if (!ep_ctx) {
   20f26:	68fb      	ldr	r3, [r7, #12]
   20f28:	2b00      	cmp	r3, #0
   20f2a:	d102      	bne.n	20f32 <usb_dc_ep_clear_stall+0x46>
		return -EINVAL;
   20f2c:	f06f 0315 	mvn.w	r3, #21
   20f30:	e00c      	b.n	20f4c <usb_dc_ep_clear_stall+0x60>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   20f32:	79fb      	ldrb	r3, [r7, #7]
   20f34:	4618      	mov	r0, r3
   20f36:	f7ff fc20 	bl	2077a <ep_addr_to_nrfx>
   20f3a:	4603      	mov	r3, r0
   20f3c:	4618      	mov	r0, r3
   20f3e:	f7fb fbc8 	bl	1c6d2 <nrfx_usbd_ep_stall_clear>
	LOG_DBG("Unstall on EP %d", ep);
   20f42:	f7ff fb43 	bl	205cc <_is_user_context>
   20f46:	4603      	mov	r3, r0
   20f48:	72fb      	strb	r3, [r7, #11]
	return 0;
   20f4a:	2300      	movs	r3, #0
}
   20f4c:	4618      	mov	r0, r3
   20f4e:	3710      	adds	r7, #16
   20f50:	46bd      	mov	sp, r7
   20f52:	bd80      	pop	{r7, pc}

00020f54 <usb_dc_ep_is_stalled>:
{
   20f54:	b580      	push	{r7, lr}
   20f56:	b084      	sub	sp, #16
   20f58:	af00      	add	r7, sp, #0
   20f5a:	4603      	mov	r3, r0
   20f5c:	6039      	str	r1, [r7, #0]
   20f5e:	71fb      	strb	r3, [r7, #7]
	if (!dev_attached() || !dev_ready()) {
   20f60:	f7ff fbfb 	bl	2075a <dev_attached>
   20f64:	4603      	mov	r3, r0
   20f66:	f083 0301 	eor.w	r3, r3, #1
   20f6a:	b2db      	uxtb	r3, r3
   20f6c:	2b00      	cmp	r3, #0
   20f6e:	d107      	bne.n	20f80 <usb_dc_ep_is_stalled+0x2c>
   20f70:	f7ff fbfb 	bl	2076a <dev_ready>
   20f74:	4603      	mov	r3, r0
   20f76:	f083 0301 	eor.w	r3, r3, #1
   20f7a:	b2db      	uxtb	r3, r3
   20f7c:	2b00      	cmp	r3, #0
   20f7e:	d002      	beq.n	20f86 <usb_dc_ep_is_stalled+0x32>
		return -ENODEV;
   20f80:	f06f 0312 	mvn.w	r3, #18
   20f84:	e017      	b.n	20fb6 <usb_dc_ep_is_stalled+0x62>
	ep_ctx = endpoint_ctx(ep);
   20f86:	79fb      	ldrb	r3, [r7, #7]
   20f88:	4618      	mov	r0, r3
   20f8a:	f7ff fc32 	bl	207f2 <endpoint_ctx>
   20f8e:	60f8      	str	r0, [r7, #12]
	if (!ep_ctx) {
   20f90:	68fb      	ldr	r3, [r7, #12]
   20f92:	2b00      	cmp	r3, #0
   20f94:	d102      	bne.n	20f9c <usb_dc_ep_is_stalled+0x48>
		return -EINVAL;
   20f96:	f06f 0315 	mvn.w	r3, #21
   20f9a:	e00c      	b.n	20fb6 <usb_dc_ep_is_stalled+0x62>
	*stalled = (u8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
   20f9c:	79fb      	ldrb	r3, [r7, #7]
   20f9e:	4618      	mov	r0, r3
   20fa0:	f7ff fbeb 	bl	2077a <ep_addr_to_nrfx>
   20fa4:	4603      	mov	r3, r0
   20fa6:	4618      	mov	r0, r3
   20fa8:	f7fb fbb3 	bl	1c712 <nrfx_usbd_ep_stall_check>
   20fac:	4603      	mov	r3, r0
   20fae:	461a      	mov	r2, r3
   20fb0:	683b      	ldr	r3, [r7, #0]
   20fb2:	701a      	strb	r2, [r3, #0]
	return 0;
   20fb4:	2300      	movs	r3, #0
}
   20fb6:	4618      	mov	r0, r3
   20fb8:	3710      	adds	r7, #16
   20fba:	46bd      	mov	sp, r7
   20fbc:	bd80      	pop	{r7, pc}

00020fbe <usb_dc_ep_enable>:
{
   20fbe:	b580      	push	{r7, lr}
   20fc0:	b084      	sub	sp, #16
   20fc2:	af00      	add	r7, sp, #0
   20fc4:	4603      	mov	r3, r0
   20fc6:	71fb      	strb	r3, [r7, #7]
	if (!dev_attached()) {
   20fc8:	f7ff fbc7 	bl	2075a <dev_attached>
   20fcc:	4603      	mov	r3, r0
   20fce:	f083 0301 	eor.w	r3, r3, #1
   20fd2:	b2db      	uxtb	r3, r3
   20fd4:	2b00      	cmp	r3, #0
   20fd6:	d002      	beq.n	20fde <usb_dc_ep_enable+0x20>
		return -ENODEV;
   20fd8:	f06f 0312 	mvn.w	r3, #18
   20fdc:	e026      	b.n	2102c <usb_dc_ep_enable+0x6e>
	ep_ctx = endpoint_ctx(ep);
   20fde:	79fb      	ldrb	r3, [r7, #7]
   20fe0:	4618      	mov	r0, r3
   20fe2:	f7ff fc06 	bl	207f2 <endpoint_ctx>
   20fe6:	60f8      	str	r0, [r7, #12]
	if (!ep_ctx) {
   20fe8:	68fb      	ldr	r3, [r7, #12]
   20fea:	2b00      	cmp	r3, #0
   20fec:	d102      	bne.n	20ff4 <usb_dc_ep_enable+0x36>
		return -EINVAL;
   20fee:	f06f 0315 	mvn.w	r3, #21
   20ff2:	e01b      	b.n	2102c <usb_dc_ep_enable+0x6e>
	if (ep_ctx->cfg.en) {
   20ff4:	68fb      	ldr	r3, [r7, #12]
   20ff6:	7a1b      	ldrb	r3, [r3, #8]
   20ff8:	2b00      	cmp	r3, #0
   20ffa:	d002      	beq.n	21002 <usb_dc_ep_enable+0x44>
		return -EALREADY;
   20ffc:	f06f 0377 	mvn.w	r3, #119	; 0x77
   21000:	e014      	b.n	2102c <usb_dc_ep_enable+0x6e>
	LOG_DBG("EP enable: %d.", ep);
   21002:	f7ff fae3 	bl	205cc <_is_user_context>
   21006:	4603      	mov	r3, r0
   21008:	72fb      	strb	r3, [r7, #11]
	ep_ctx->cfg.en = true;
   2100a:	68fb      	ldr	r3, [r7, #12]
   2100c:	2201      	movs	r2, #1
   2100e:	721a      	strb	r2, [r3, #8]
	if (dev_ready()) {
   21010:	f7ff fbab 	bl	2076a <dev_ready>
   21014:	4603      	mov	r3, r0
   21016:	2b00      	cmp	r3, #0
   21018:	d007      	beq.n	2102a <usb_dc_ep_enable+0x6c>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
   2101a:	79fb      	ldrb	r3, [r7, #7]
   2101c:	4618      	mov	r0, r3
   2101e:	f7ff fbac 	bl	2077a <ep_addr_to_nrfx>
   21022:	4603      	mov	r3, r0
   21024:	4618      	mov	r0, r3
   21026:	f7ec feab 	bl	dd80 <nrfx_usbd_ep_enable>
	return 0;
   2102a:	2300      	movs	r3, #0
}
   2102c:	4618      	mov	r0, r3
   2102e:	3710      	adds	r7, #16
   21030:	46bd      	mov	sp, r7
   21032:	bd80      	pop	{r7, pc}

00021034 <usb_dc_ep_read_wait>:

int usb_dc_ep_read_wait(u8_t ep, u8_t *data, u32_t max_data_len,
			u32_t *read_bytes)
{
   21034:	b580      	push	{r7, lr}
   21036:	b088      	sub	sp, #32
   21038:	af00      	add	r7, sp, #0
   2103a:	60b9      	str	r1, [r7, #8]
   2103c:	607a      	str	r2, [r7, #4]
   2103e:	603b      	str	r3, [r7, #0]
   21040:	4603      	mov	r3, r0
   21042:	73fb      	strb	r3, [r7, #15]
	struct nrf_usbd_ep_ctx *ep_ctx;
	struct nrf_usbd_ctx *ctx = get_usbd_ctx();
   21044:	f7ef fc34 	bl	108b0 <get_usbd_ctx>
   21048:	61f8      	str	r0, [r7, #28]
	u32_t bytes_to_copy;

	if (!dev_attached() || !dev_ready()) {
   2104a:	f7ff fb86 	bl	2075a <dev_attached>
   2104e:	4603      	mov	r3, r0
   21050:	f083 0301 	eor.w	r3, r3, #1
   21054:	b2db      	uxtb	r3, r3
   21056:	2b00      	cmp	r3, #0
   21058:	d107      	bne.n	2106a <usb_dc_ep_read_wait+0x36>
   2105a:	f7ff fb86 	bl	2076a <dev_ready>
   2105e:	4603      	mov	r3, r0
   21060:	f083 0301 	eor.w	r3, r3, #1
   21064:	b2db      	uxtb	r3, r3
   21066:	2b00      	cmp	r3, #0
   21068:	d002      	beq.n	21070 <usb_dc_ep_read_wait+0x3c>
		return -ENODEV;
   2106a:	f06f 0312 	mvn.w	r3, #18
   2106e:	e05b      	b.n	21128 <usb_dc_ep_read_wait+0xf4>
	}

	if (NRF_USBD_EPIN_CHECK(ep)) {
   21070:	f997 300f 	ldrsb.w	r3, [r7, #15]
   21074:	2b00      	cmp	r3, #0
   21076:	da02      	bge.n	2107e <usb_dc_ep_read_wait+0x4a>
		return -EINVAL;
   21078:	f06f 0315 	mvn.w	r3, #21
   2107c:	e054      	b.n	21128 <usb_dc_ep_read_wait+0xf4>
	}

	if (!data && max_data_len) {
   2107e:	68bb      	ldr	r3, [r7, #8]
   21080:	2b00      	cmp	r3, #0
   21082:	d105      	bne.n	21090 <usb_dc_ep_read_wait+0x5c>
   21084:	687b      	ldr	r3, [r7, #4]
   21086:	2b00      	cmp	r3, #0
   21088:	d002      	beq.n	21090 <usb_dc_ep_read_wait+0x5c>
		return -EINVAL;
   2108a:	f06f 0315 	mvn.w	r3, #21
   2108e:	e04b      	b.n	21128 <usb_dc_ep_read_wait+0xf4>
	}

	ep_ctx = endpoint_ctx(ep);
   21090:	7bfb      	ldrb	r3, [r7, #15]
   21092:	4618      	mov	r0, r3
   21094:	f7ff fbad 	bl	207f2 <endpoint_ctx>
   21098:	61b8      	str	r0, [r7, #24]
	if (!ep_ctx) {
   2109a:	69bb      	ldr	r3, [r7, #24]
   2109c:	2b00      	cmp	r3, #0
   2109e:	d102      	bne.n	210a6 <usb_dc_ep_read_wait+0x72>
		return -EINVAL;
   210a0:	f06f 0315 	mvn.w	r3, #21
   210a4:	e040      	b.n	21128 <usb_dc_ep_read_wait+0xf4>
	}

	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   210a6:	69fb      	ldr	r3, [r7, #28]
   210a8:	3314      	adds	r3, #20
   210aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   210ae:	4618      	mov	r0, r3
   210b0:	f7ff faf2 	bl	20698 <k_mutex_lock>

	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
   210b4:	69bb      	ldr	r3, [r7, #24]
   210b6:	68db      	ldr	r3, [r3, #12]
   210b8:	687a      	ldr	r2, [r7, #4]
   210ba:	4293      	cmp	r3, r2
   210bc:	bf28      	it	cs
   210be:	4613      	movcs	r3, r2
   210c0:	617b      	str	r3, [r7, #20]

	if (!data && !max_data_len) {
   210c2:	68bb      	ldr	r3, [r7, #8]
   210c4:	2b00      	cmp	r3, #0
   210c6:	d110      	bne.n	210ea <usb_dc_ep_read_wait+0xb6>
   210c8:	687b      	ldr	r3, [r7, #4]
   210ca:	2b00      	cmp	r3, #0
   210cc:	d10d      	bne.n	210ea <usb_dc_ep_read_wait+0xb6>
		if (read_bytes) {
   210ce:	683b      	ldr	r3, [r7, #0]
   210d0:	2b00      	cmp	r3, #0
   210d2:	d003      	beq.n	210dc <usb_dc_ep_read_wait+0xa8>
			*read_bytes = ep_ctx->buf.len;
   210d4:	69bb      	ldr	r3, [r7, #24]
   210d6:	68da      	ldr	r2, [r3, #12]
   210d8:	683b      	ldr	r3, [r7, #0]
   210da:	601a      	str	r2, [r3, #0]
		}
		k_mutex_unlock(&ctx->drv_lock);
   210dc:	69fb      	ldr	r3, [r7, #28]
   210de:	3314      	adds	r3, #20
   210e0:	4618      	mov	r0, r3
   210e2:	f7ff fae7 	bl	206b4 <k_mutex_unlock>
		return 0;
   210e6:	2300      	movs	r3, #0
   210e8:	e01e      	b.n	21128 <usb_dc_ep_read_wait+0xf4>
	}

	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
   210ea:	69bb      	ldr	r3, [r7, #24]
   210ec:	69db      	ldr	r3, [r3, #28]
   210ee:	697a      	ldr	r2, [r7, #20]
   210f0:	4619      	mov	r1, r3
   210f2:	68b8      	ldr	r0, [r7, #8]
   210f4:	f7e0 ffb8 	bl	2068 <memcpy>

	ep_ctx->buf.curr += bytes_to_copy;
   210f8:	69bb      	ldr	r3, [r7, #24]
   210fa:	69da      	ldr	r2, [r3, #28]
   210fc:	697b      	ldr	r3, [r7, #20]
   210fe:	441a      	add	r2, r3
   21100:	69bb      	ldr	r3, [r7, #24]
   21102:	61da      	str	r2, [r3, #28]
	ep_ctx->buf.len -= bytes_to_copy;
   21104:	69bb      	ldr	r3, [r7, #24]
   21106:	68da      	ldr	r2, [r3, #12]
   21108:	697b      	ldr	r3, [r7, #20]
   2110a:	1ad2      	subs	r2, r2, r3
   2110c:	69bb      	ldr	r3, [r7, #24]
   2110e:	60da      	str	r2, [r3, #12]
	if (read_bytes) {
   21110:	683b      	ldr	r3, [r7, #0]
   21112:	2b00      	cmp	r3, #0
   21114:	d002      	beq.n	2111c <usb_dc_ep_read_wait+0xe8>
		*read_bytes = bytes_to_copy;
   21116:	683b      	ldr	r3, [r7, #0]
   21118:	697a      	ldr	r2, [r7, #20]
   2111a:	601a      	str	r2, [r3, #0]
	}

	k_mutex_unlock(&ctx->drv_lock);
   2111c:	69fb      	ldr	r3, [r7, #28]
   2111e:	3314      	adds	r3, #20
   21120:	4618      	mov	r0, r3
   21122:	f7ff fac7 	bl	206b4 <k_mutex_unlock>
	return 0;
   21126:	2300      	movs	r3, #0
}
   21128:	4618      	mov	r0, r3
   2112a:	3720      	adds	r7, #32
   2112c:	46bd      	mov	sp, r7
   2112e:	bd80      	pop	{r7, pc}

00021130 <usb_dc_ep_read_continue>:

int usb_dc_ep_read_continue(u8_t ep)
{
   21130:	b580      	push	{r7, lr}
   21132:	b086      	sub	sp, #24
   21134:	af00      	add	r7, sp, #0
   21136:	4603      	mov	r3, r0
   21138:	71fb      	strb	r3, [r7, #7]
	struct nrf_usbd_ep_ctx *ep_ctx;
	struct nrf_usbd_ctx *ctx = get_usbd_ctx();
   2113a:	f7ef fbb9 	bl	108b0 <get_usbd_ctx>
   2113e:	6178      	str	r0, [r7, #20]

	if (!dev_attached() || !dev_ready()) {
   21140:	f7ff fb0b 	bl	2075a <dev_attached>
   21144:	4603      	mov	r3, r0
   21146:	f083 0301 	eor.w	r3, r3, #1
   2114a:	b2db      	uxtb	r3, r3
   2114c:	2b00      	cmp	r3, #0
   2114e:	d107      	bne.n	21160 <usb_dc_ep_read_continue+0x30>
   21150:	f7ff fb0b 	bl	2076a <dev_ready>
   21154:	4603      	mov	r3, r0
   21156:	f083 0301 	eor.w	r3, r3, #1
   2115a:	b2db      	uxtb	r3, r3
   2115c:	2b00      	cmp	r3, #0
   2115e:	d002      	beq.n	21166 <usb_dc_ep_read_continue+0x36>
		return -ENODEV;
   21160:	f06f 0312 	mvn.w	r3, #18
   21164:	e047      	b.n	211f6 <usb_dc_ep_read_continue+0xc6>
	}

	if (NRF_USBD_EPIN_CHECK(ep)) {
   21166:	f997 3007 	ldrsb.w	r3, [r7, #7]
   2116a:	2b00      	cmp	r3, #0
   2116c:	da02      	bge.n	21174 <usb_dc_ep_read_continue+0x44>
		return -EINVAL;
   2116e:	f06f 0315 	mvn.w	r3, #21
   21172:	e040      	b.n	211f6 <usb_dc_ep_read_continue+0xc6>
	}

	ep_ctx = endpoint_ctx(ep);
   21174:	79fb      	ldrb	r3, [r7, #7]
   21176:	4618      	mov	r0, r3
   21178:	f7ff fb3b 	bl	207f2 <endpoint_ctx>
   2117c:	6138      	str	r0, [r7, #16]
	if (!ep_ctx) {
   2117e:	693b      	ldr	r3, [r7, #16]
   21180:	2b00      	cmp	r3, #0
   21182:	d102      	bne.n	2118a <usb_dc_ep_read_continue+0x5a>
		return -EINVAL;
   21184:	f06f 0315 	mvn.w	r3, #21
   21188:	e035      	b.n	211f6 <usb_dc_ep_read_continue+0xc6>
	}

	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   2118a:	697b      	ldr	r3, [r7, #20]
   2118c:	3314      	adds	r3, #20
   2118e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21192:	4618      	mov	r0, r3
   21194:	f7ff fa80 	bl	20698 <k_mutex_lock>
	if (!ep_ctx->buf.len) {
   21198:	693b      	ldr	r3, [r7, #16]
   2119a:	68db      	ldr	r3, [r3, #12]
   2119c:	2b00      	cmp	r3, #0
   2119e:	d124      	bne.n	211ea <usb_dc_ep_read_continue+0xba>
		ep_ctx->buf.curr = ep_ctx->buf.data;
   211a0:	693b      	ldr	r3, [r7, #16]
   211a2:	699a      	ldr	r2, [r3, #24]
   211a4:	693b      	ldr	r3, [r7, #16]
   211a6:	61da      	str	r2, [r3, #28]
		ep_ctx->read_complete = true;
   211a8:	693b      	ldr	r3, [r7, #16]
   211aa:	2201      	movs	r2, #1
   211ac:	f883 2020 	strb.w	r2, [r3, #32]

		if (ep_ctx->read_pending) {
   211b0:	693b      	ldr	r3, [r7, #16]
   211b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   211b6:	b2db      	uxtb	r3, r3
   211b8:	2b00      	cmp	r3, #0
   211ba:	d016      	beq.n	211ea <usb_dc_ep_read_continue+0xba>
			struct usbd_event *ev = usbd_evt_alloc();
   211bc:	f7ef fb9c 	bl	108f8 <usbd_evt_alloc>
   211c0:	60f8      	str	r0, [r7, #12]

			if (!ev) {
   211c2:	68fb      	ldr	r3, [r7, #12]
   211c4:	2b00      	cmp	r3, #0
   211c6:	d102      	bne.n	211ce <usb_dc_ep_read_continue+0x9e>
				return -ENOMEM;
   211c8:	f06f 030b 	mvn.w	r3, #11
   211cc:	e013      	b.n	211f6 <usb_dc_ep_read_continue+0xc6>
			}

			ev->evt_type = USBD_EVT_EP;
   211ce:	68fb      	ldr	r3, [r7, #12]
   211d0:	2201      	movs	r2, #1
   211d2:	751a      	strb	r2, [r3, #20]
			ev->evt.ep_evt.ep = ep_ctx;
   211d4:	68fb      	ldr	r3, [r7, #12]
   211d6:	693a      	ldr	r2, [r7, #16]
   211d8:	60da      	str	r2, [r3, #12]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   211da:	68fb      	ldr	r3, [r7, #12]
   211dc:	2201      	movs	r2, #1
   211de:	741a      	strb	r2, [r3, #16]
			usbd_evt_put(ev);
   211e0:	68f8      	ldr	r0, [r7, #12]
   211e2:	f7ef fb6f 	bl	108c4 <usbd_evt_put>
			usbd_work_schedule();
   211e6:	f7ff fb72 	bl	208ce <usbd_work_schedule>
		}
	}
	k_mutex_unlock(&ctx->drv_lock);
   211ea:	697b      	ldr	r3, [r7, #20]
   211ec:	3314      	adds	r3, #20
   211ee:	4618      	mov	r0, r3
   211f0:	f7ff fa60 	bl	206b4 <k_mutex_unlock>

	return 0;
   211f4:	2300      	movs	r3, #0
}
   211f6:	4618      	mov	r0, r3
   211f8:	3718      	adds	r7, #24
   211fa:	46bd      	mov	sp, r7
   211fc:	bd80      	pop	{r7, pc}

000211fe <usb_dc_ep_read>:

int usb_dc_ep_read(const u8_t ep, u8_t *const data,
		   const u32_t max_data_len, u32_t *const read_bytes)
{
   211fe:	b580      	push	{r7, lr}
   21200:	b086      	sub	sp, #24
   21202:	af00      	add	r7, sp, #0
   21204:	60b9      	str	r1, [r7, #8]
   21206:	607a      	str	r2, [r7, #4]
   21208:	603b      	str	r3, [r7, #0]
   2120a:	4603      	mov	r3, r0
   2120c:	73fb      	strb	r3, [r7, #15]
	LOG_DBG("ep_read: ep %d, maxlen %d", ep, max_data_len);
   2120e:	f7ff f9dd 	bl	205cc <_is_user_context>
   21212:	4603      	mov	r3, r0
   21214:	74fb      	strb	r3, [r7, #19]
	int ret;

	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   21216:	7bf8      	ldrb	r0, [r7, #15]
   21218:	683b      	ldr	r3, [r7, #0]
   2121a:	687a      	ldr	r2, [r7, #4]
   2121c:	68b9      	ldr	r1, [r7, #8]
   2121e:	f7ff ff09 	bl	21034 <usb_dc_ep_read_wait>
   21222:	6178      	str	r0, [r7, #20]
	if (ret) {
   21224:	697b      	ldr	r3, [r7, #20]
   21226:	2b00      	cmp	r3, #0
   21228:	d001      	beq.n	2122e <usb_dc_ep_read+0x30>
		return ret;
   2122a:	697b      	ldr	r3, [r7, #20]
   2122c:	e00d      	b.n	2124a <usb_dc_ep_read+0x4c>
	}

	if (!data && !max_data_len) {
   2122e:	68bb      	ldr	r3, [r7, #8]
   21230:	2b00      	cmp	r3, #0
   21232:	d104      	bne.n	2123e <usb_dc_ep_read+0x40>
   21234:	687b      	ldr	r3, [r7, #4]
   21236:	2b00      	cmp	r3, #0
   21238:	d101      	bne.n	2123e <usb_dc_ep_read+0x40>
		return ret;
   2123a:	697b      	ldr	r3, [r7, #20]
   2123c:	e005      	b.n	2124a <usb_dc_ep_read+0x4c>
	}

	ret = usb_dc_ep_read_continue(ep);
   2123e:	7bfb      	ldrb	r3, [r7, #15]
   21240:	4618      	mov	r0, r3
   21242:	f7ff ff75 	bl	21130 <usb_dc_ep_read_continue>
   21246:	6178      	str	r0, [r7, #20]
	return ret;
   21248:	697b      	ldr	r3, [r7, #20]
}
   2124a:	4618      	mov	r0, r3
   2124c:	3718      	adds	r7, #24
   2124e:	46bd      	mov	sp, r7
   21250:	bd80      	pop	{r7, pc}

00021252 <usb_dc_ep_set_callback>:

int usb_dc_ep_set_callback(const u8_t ep, const usb_dc_ep_callback cb)
{
   21252:	b580      	push	{r7, lr}
   21254:	b084      	sub	sp, #16
   21256:	af00      	add	r7, sp, #0
   21258:	4603      	mov	r3, r0
   2125a:	6039      	str	r1, [r7, #0]
   2125c:	71fb      	strb	r3, [r7, #7]
	struct nrf_usbd_ep_ctx *ep_ctx;

	if (!dev_attached()) {
   2125e:	f7ff fa7c 	bl	2075a <dev_attached>
   21262:	4603      	mov	r3, r0
   21264:	f083 0301 	eor.w	r3, r3, #1
   21268:	b2db      	uxtb	r3, r3
   2126a:	2b00      	cmp	r3, #0
   2126c:	d002      	beq.n	21274 <usb_dc_ep_set_callback+0x22>
		return -ENODEV;
   2126e:	f06f 0312 	mvn.w	r3, #18
   21272:	e00e      	b.n	21292 <usb_dc_ep_set_callback+0x40>
	}

	ep_ctx = endpoint_ctx(ep);
   21274:	79fb      	ldrb	r3, [r7, #7]
   21276:	4618      	mov	r0, r3
   21278:	f7ff fabb 	bl	207f2 <endpoint_ctx>
   2127c:	60f8      	str	r0, [r7, #12]
	if (!ep_ctx) {
   2127e:	68fb      	ldr	r3, [r7, #12]
   21280:	2b00      	cmp	r3, #0
   21282:	d102      	bne.n	2128a <usb_dc_ep_set_callback+0x38>
		return -EINVAL;
   21284:	f06f 0315 	mvn.w	r3, #21
   21288:	e003      	b.n	21292 <usb_dc_ep_set_callback+0x40>
	}

	ep_ctx->cfg.cb = cb;
   2128a:	68fb      	ldr	r3, [r7, #12]
   2128c:	683a      	ldr	r2, [r7, #0]
   2128e:	601a      	str	r2, [r3, #0]

	return 0;
   21290:	2300      	movs	r3, #0
}
   21292:	4618      	mov	r0, r3
   21294:	3710      	adds	r7, #16
   21296:	46bd      	mov	sp, r7
   21298:	bd80      	pop	{r7, pc}

0002129a <usb_dc_set_status_callback>:

int usb_dc_set_status_callback(const usb_dc_status_callback cb)
{
   2129a:	b580      	push	{r7, lr}
   2129c:	b082      	sub	sp, #8
   2129e:	af00      	add	r7, sp, #0
   212a0:	6078      	str	r0, [r7, #4]
	get_usbd_ctx()->status_cb = cb;
   212a2:	f7ef fb05 	bl	108b0 <get_usbd_ctx>
   212a6:	4602      	mov	r2, r0
   212a8:	687b      	ldr	r3, [r7, #4]
   212aa:	6013      	str	r3, [r2, #0]
	return 0;
   212ac:	2300      	movs	r3, #0
}
   212ae:	4618      	mov	r0, r3
   212b0:	3708      	adds	r7, #8
   212b2:	46bd      	mov	sp, r7
   212b4:	bd80      	pop	{r7, pc}

000212b6 <usb_dc_ep_mps>:

int usb_dc_ep_mps(const u8_t ep)
{
   212b6:	b580      	push	{r7, lr}
   212b8:	b084      	sub	sp, #16
   212ba:	af00      	add	r7, sp, #0
   212bc:	4603      	mov	r3, r0
   212be:	71fb      	strb	r3, [r7, #7]
	struct nrf_usbd_ep_ctx *ep_ctx;

	if (!dev_attached()) {
   212c0:	f7ff fa4b 	bl	2075a <dev_attached>
   212c4:	4603      	mov	r3, r0
   212c6:	f083 0301 	eor.w	r3, r3, #1
   212ca:	b2db      	uxtb	r3, r3
   212cc:	2b00      	cmp	r3, #0
   212ce:	d002      	beq.n	212d6 <usb_dc_ep_mps+0x20>
		return -ENODEV;
   212d0:	f06f 0312 	mvn.w	r3, #18
   212d4:	e00c      	b.n	212f0 <usb_dc_ep_mps+0x3a>
	}

	ep_ctx = endpoint_ctx(ep);
   212d6:	79fb      	ldrb	r3, [r7, #7]
   212d8:	4618      	mov	r0, r3
   212da:	f7ff fa8a 	bl	207f2 <endpoint_ctx>
   212de:	60f8      	str	r0, [r7, #12]
	if (!ep_ctx) {
   212e0:	68fb      	ldr	r3, [r7, #12]
   212e2:	2b00      	cmp	r3, #0
   212e4:	d102      	bne.n	212ec <usb_dc_ep_mps+0x36>
		return -EINVAL;
   212e6:	f06f 0315 	mvn.w	r3, #21
   212ea:	e001      	b.n	212f0 <usb_dc_ep_mps+0x3a>
	}

	return ep_ctx->cfg.max_sz;
   212ec:	68fb      	ldr	r3, [r7, #12]
   212ee:	685b      	ldr	r3, [r3, #4]
}
   212f0:	4618      	mov	r0, r3
   212f2:	3710      	adds	r7, #16
   212f4:	46bd      	mov	sp, r7
   212f6:	bd80      	pop	{r7, pc}

000212f8 <z_clock_isr>:
#include <drivers/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
   212f8:	b480      	push	{r7}
   212fa:	b083      	sub	sp, #12
   212fc:	af00      	add	r7, sp, #0
   212fe:	6078      	str	r0, [r7, #4]
	__ASSERT_NO_MSG(false);
}
   21300:	bf00      	nop
   21302:	370c      	adds	r7, #12
   21304:	46bd      	mov	sp, r7
   21306:	bc80      	pop	{r7}
   21308:	4770      	bx	lr

0002130a <z_clock_idle_exit>:
void __weak z_clock_set_timeout(s32_t ticks, bool idle)
{
}

void __weak z_clock_idle_exit(void)
{
   2130a:	b480      	push	{r7}
   2130c:	af00      	add	r7, sp, #0
}
   2130e:	bf00      	nop
   21310:	46bd      	mov	sp, r7
   21312:	bc80      	pop	{r7}
   21314:	4770      	bx	lr

00021316 <device_get_binding>:
   21316:	b580      	push	{r7, lr}
   21318:	b082      	sub	sp, #8
   2131a:	af00      	add	r7, sp, #0
   2131c:	6078      	str	r0, [r7, #4]
   2131e:	6878      	ldr	r0, [r7, #4]
   21320:	f7f4 ffe4 	bl	162ec <z_impl_device_get_binding>
   21324:	4603      	mov	r3, r0
   21326:	4618      	mov	r0, r3
   21328:	3708      	adds	r7, #8
   2132a:	46bd      	mov	sp, r7
   2132c:	bd80      	pop	{r7, pc}

0002132e <clock_control_on>:
{
   2132e:	b580      	push	{r7, lr}
   21330:	b084      	sub	sp, #16
   21332:	af00      	add	r7, sp, #0
   21334:	6078      	str	r0, [r7, #4]
   21336:	6039      	str	r1, [r7, #0]
	const struct clock_control_driver_api *api =
   21338:	687b      	ldr	r3, [r7, #4]
   2133a:	685b      	ldr	r3, [r3, #4]
   2133c:	60fb      	str	r3, [r7, #12]
	return api->on(dev, sys);
   2133e:	68fb      	ldr	r3, [r7, #12]
   21340:	681b      	ldr	r3, [r3, #0]
   21342:	6839      	ldr	r1, [r7, #0]
   21344:	6878      	ldr	r0, [r7, #4]
   21346:	4798      	blx	r3
   21348:	4603      	mov	r3, r0
}
   2134a:	4618      	mov	r0, r3
   2134c:	3710      	adds	r7, #16
   2134e:	46bd      	mov	sp, r7
   21350:	bd80      	pop	{r7, pc}

00021352 <nrf_rtc_cc_set>:
{
   21352:	b480      	push	{r7}
   21354:	b085      	sub	sp, #20
   21356:	af00      	add	r7, sp, #0
   21358:	60f8      	str	r0, [r7, #12]
   2135a:	60b9      	str	r1, [r7, #8]
   2135c:	607a      	str	r2, [r7, #4]
    p_reg->CC[ch] = cc_val;
   2135e:	68fb      	ldr	r3, [r7, #12]
   21360:	68ba      	ldr	r2, [r7, #8]
   21362:	f502 72a8 	add.w	r2, r2, #336	; 0x150
   21366:	6879      	ldr	r1, [r7, #4]
   21368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   2136c:	bf00      	nop
   2136e:	3714      	adds	r7, #20
   21370:	46bd      	mov	sp, r7
   21372:	bc80      	pop	{r7}
   21374:	4770      	bx	lr

00021376 <nrf_rtc_int_enable>:
{
   21376:	b480      	push	{r7}
   21378:	b083      	sub	sp, #12
   2137a:	af00      	add	r7, sp, #0
   2137c:	6078      	str	r0, [r7, #4]
   2137e:	6039      	str	r1, [r7, #0]
    p_reg->INTENSET = mask;
   21380:	687b      	ldr	r3, [r7, #4]
   21382:	683a      	ldr	r2, [r7, #0]
   21384:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   21388:	bf00      	nop
   2138a:	370c      	adds	r7, #12
   2138c:	46bd      	mov	sp, r7
   2138e:	bc80      	pop	{r7}
   21390:	4770      	bx	lr

00021392 <nrf_rtc_event_clear>:
{
   21392:	b480      	push	{r7}
   21394:	b085      	sub	sp, #20
   21396:	af00      	add	r7, sp, #0
   21398:	6078      	str	r0, [r7, #4]
   2139a:	460b      	mov	r3, r1
   2139c:	807b      	strh	r3, [r7, #2]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2139e:	887b      	ldrh	r3, [r7, #2]
   213a0:	687a      	ldr	r2, [r7, #4]
   213a2:	4413      	add	r3, r2
   213a4:	2200      	movs	r2, #0
   213a6:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   213a8:	887b      	ldrh	r3, [r7, #2]
   213aa:	687a      	ldr	r2, [r7, #4]
   213ac:	4413      	add	r3, r2
   213ae:	681b      	ldr	r3, [r3, #0]
   213b0:	60fb      	str	r3, [r7, #12]
    (void)dummy;
   213b2:	68fb      	ldr	r3, [r7, #12]
}
   213b4:	bf00      	nop
   213b6:	3714      	adds	r7, #20
   213b8:	46bd      	mov	sp, r7
   213ba:	bc80      	pop	{r7}
   213bc:	4770      	bx	lr

000213be <nrf_rtc_counter_get>:
{
   213be:	b480      	push	{r7}
   213c0:	b083      	sub	sp, #12
   213c2:	af00      	add	r7, sp, #0
   213c4:	6078      	str	r0, [r7, #4]
     return p_reg->COUNTER;
   213c6:	687b      	ldr	r3, [r7, #4]
   213c8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
}
   213cc:	4618      	mov	r0, r3
   213ce:	370c      	adds	r7, #12
   213d0:	46bd      	mov	sp, r7
   213d2:	bc80      	pop	{r7}
   213d4:	4770      	bx	lr

000213d6 <nrf_rtc_task_trigger>:
{
    return (uint32_t)p_reg + task;
}

__STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
   213d6:	b480      	push	{r7}
   213d8:	b083      	sub	sp, #12
   213da:	af00      	add	r7, sp, #0
   213dc:	6078      	str	r0, [r7, #4]
   213de:	460b      	mov	r3, r1
   213e0:	70fb      	strb	r3, [r7, #3]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   213e2:	78fa      	ldrb	r2, [r7, #3]
   213e4:	687b      	ldr	r3, [r7, #4]
   213e6:	4413      	add	r3, r2
   213e8:	461a      	mov	r2, r3
   213ea:	2301      	movs	r3, #1
   213ec:	6013      	str	r3, [r2, #0]
}
   213ee:	bf00      	nop
   213f0:	370c      	adds	r7, #12
   213f2:	46bd      	mov	sp, r7
   213f4:	bc80      	pop	{r7}
   213f6:	4770      	bx	lr

000213f8 <nrf_rtc_event_enable>:

__STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
   213f8:	b480      	push	{r7}
   213fa:	b083      	sub	sp, #12
   213fc:	af00      	add	r7, sp, #0
   213fe:	6078      	str	r0, [r7, #4]
   21400:	6039      	str	r1, [r7, #0]
    p_reg->EVTENSET = mask;
   21402:	687b      	ldr	r3, [r7, #4]
   21404:	683a      	ldr	r2, [r7, #0]
   21406:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
}
   2140a:	bf00      	nop
   2140c:	370c      	adds	r7, #12
   2140e:	46bd      	mov	sp, r7
   21410:	bc80      	pop	{r7}
   21412:	4770      	bx	lr

00021414 <counter_sub>:
{
   21414:	b480      	push	{r7}
   21416:	b083      	sub	sp, #12
   21418:	af00      	add	r7, sp, #0
   2141a:	6078      	str	r0, [r7, #4]
   2141c:	6039      	str	r1, [r7, #0]
	return (a - b) & COUNTER_MAX;
   2141e:	687a      	ldr	r2, [r7, #4]
   21420:	683b      	ldr	r3, [r7, #0]
   21422:	1ad3      	subs	r3, r2, r3
   21424:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
   21428:	4618      	mov	r0, r3
   2142a:	370c      	adds	r7, #12
   2142c:	46bd      	mov	sp, r7
   2142e:	bc80      	pop	{r7}
   21430:	4770      	bx	lr

00021432 <z_IntLibInit>:
 *
 * @return N/A
 */

void z_IntLibInit(void)
{
   21432:	b580      	push	{r7, lr}
   21434:	b082      	sub	sp, #8
   21436:	af00      	add	r7, sp, #0
	int irq = 0;
   21438:	2300      	movs	r3, #0
   2143a:	607b      	str	r3, [r7, #4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   2143c:	e008      	b.n	21450 <z_IntLibInit+0x1e>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   2143e:	687b      	ldr	r3, [r7, #4]
   21440:	b25b      	sxtb	r3, r3
   21442:	2101      	movs	r1, #1
   21444:	4618      	mov	r0, r3
   21446:	f7f0 f9bd 	bl	117c4 <__NVIC_SetPriority>
	for (; irq < CONFIG_NUM_IRQS; irq++) {
   2144a:	687b      	ldr	r3, [r7, #4]
   2144c:	3301      	adds	r3, #1
   2144e:	607b      	str	r3, [r7, #4]
   21450:	687b      	ldr	r3, [r7, #4]
   21452:	2b2f      	cmp	r3, #47	; 0x2f
   21454:	ddf3      	ble.n	2143e <z_IntLibInit+0xc>
	}
}
   21456:	bf00      	nop
   21458:	3708      	adds	r7, #8
   2145a:	46bd      	mov	sp, r7
   2145c:	bd80      	pop	{r7, pc}

0002145e <FaultShow>:
{
   2145e:	b480      	push	{r7}
   21460:	b083      	sub	sp, #12
   21462:	af00      	add	r7, sp, #0
   21464:	6078      	str	r0, [r7, #4]
   21466:	6039      	str	r1, [r7, #0]
}
   21468:	bf00      	nop
   2146a:	370c      	adds	r7, #12
   2146c:	46bd      	mov	sp, r7
   2146e:	bc80      	pop	{r7}
   21470:	4770      	bx	lr

00021472 <MemoryFaultIsRecoverable>:
{
   21472:	b480      	push	{r7}
   21474:	b083      	sub	sp, #12
   21476:	af00      	add	r7, sp, #0
   21478:	6078      	str	r0, [r7, #4]
	return 0;
   2147a:	2300      	movs	r3, #0
}
   2147c:	4618      	mov	r0, r3
   2147e:	370c      	adds	r7, #12
   21480:	46bd      	mov	sp, r7
   21482:	bc80      	pop	{r7}
   21484:	4770      	bx	lr

00021486 <z_arch_irq_enable>:
{
   21486:	b580      	push	{r7, lr}
   21488:	b082      	sub	sp, #8
   2148a:	af00      	add	r7, sp, #0
   2148c:	6078      	str	r0, [r7, #4]
	NVIC_EnableIRQ((IRQn_Type)irq);
   2148e:	687b      	ldr	r3, [r7, #4]
   21490:	b25b      	sxtb	r3, r3
   21492:	4618      	mov	r0, r3
   21494:	f7f0 fc6a 	bl	11d6c <__NVIC_EnableIRQ>
}
   21498:	bf00      	nop
   2149a:	3708      	adds	r7, #8
   2149c:	46bd      	mov	sp, r7
   2149e:	bd80      	pop	{r7, pc}

000214a0 <z_arch_irq_disable>:
{
   214a0:	b580      	push	{r7, lr}
   214a2:	b082      	sub	sp, #8
   214a4:	af00      	add	r7, sp, #0
   214a6:	6078      	str	r0, [r7, #4]
	NVIC_DisableIRQ((IRQn_Type)irq);
   214a8:	687b      	ldr	r3, [r7, #4]
   214aa:	b25b      	sxtb	r3, r3
   214ac:	4618      	mov	r0, r3
   214ae:	f7f0 fc79 	bl	11da4 <__NVIC_DisableIRQ>
}
   214b2:	bf00      	nop
   214b4:	3708      	adds	r7, #8
   214b6:	46bd      	mov	sp, r7
   214b8:	bd80      	pop	{r7, pc}

000214ba <z_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
   214ba:	b580      	push	{r7, lr}
   214bc:	b084      	sub	sp, #16
   214be:	af00      	add	r7, sp, #0
   214c0:	60f8      	str	r0, [r7, #12]
   214c2:	60b9      	str	r1, [r7, #8]
   214c4:	607a      	str	r2, [r7, #4]
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   214c6:	68bb      	ldr	r3, [r7, #8]
   214c8:	3301      	adds	r3, #1
   214ca:	60bb      	str	r3, [r7, #8]
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   214cc:	68fb      	ldr	r3, [r7, #12]
   214ce:	b25b      	sxtb	r3, r3
   214d0:	68b9      	ldr	r1, [r7, #8]
   214d2:	4618      	mov	r0, r3
   214d4:	f7f0 fc88 	bl	11de8 <__NVIC_SetPriority>
}
   214d8:	bf00      	nop
   214da:	3710      	adds	r7, #16
   214dc:	46bd      	mov	sp, r7
   214de:	bd80      	pop	{r7, pc}

000214e0 <z_irq_spurious>:
 * See __reserved().
 *
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
   214e0:	b580      	push	{r7, lr}
   214e2:	b082      	sub	sp, #8
   214e4:	af00      	add	r7, sp, #0
   214e6:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(unused);
	__reserved();
   214e8:	f7f0 fd26 	bl	11f38 <__bus_fault>
}
   214ec:	bf00      	nop
   214ee:	3708      	adds	r7, #8
   214f0:	46bd      	mov	sp, r7
   214f2:	bd80      	pop	{r7, pc}

000214f4 <Z_THREAD_STACK_BUFFER>:
#define K_THREAD_STACK_LEN(size) Z_ARCH_THREAD_STACK_LEN(size)
#define K_THREAD_STACK_MEMBER(sym, size) Z_ARCH_THREAD_STACK_MEMBER(sym, size)
#define K_THREAD_STACK_SIZEOF(sym) Z_ARCH_THREAD_STACK_SIZEOF(sym)
#define K_THREAD_STACK_RESERVED Z_ARCH_THREAD_STACK_RESERVED
static inline char *Z_THREAD_STACK_BUFFER(k_thread_stack_t *sym)
{
   214f4:	b480      	push	{r7}
   214f6:	b083      	sub	sp, #12
   214f8:	af00      	add	r7, sp, #0
   214fa:	6078      	str	r0, [r7, #4]
	return Z_ARCH_THREAD_STACK_BUFFER(sym);
   214fc:	687b      	ldr	r3, [r7, #4]
}
   214fe:	4618      	mov	r0, r3
   21500:	370c      	adds	r7, #12
   21502:	46bd      	mov	sp, r7
   21504:	bc80      	pop	{r7}
   21506:	4770      	bx	lr

00021508 <k_current_get>:
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
   21508:	b580      	push	{r7, lr}
   2150a:	af00      	add	r7, sp, #0
   2150c:	f7f6 fb40 	bl	17b90 <z_impl_k_current_get>
   21510:	4603      	mov	r3, r0
   21512:	4618      	mov	r0, r3
   21514:	bd80      	pop	{r7, pc}

00021516 <z_do_kernel_oops>:

void z_do_kernel_oops(const NANO_ESF *esf)
{
   21516:	b580      	push	{r7, lr}
   21518:	b082      	sub	sp, #8
   2151a:	af00      	add	r7, sp, #0
   2151c:	6078      	str	r0, [r7, #4]
	z_NanoFatalErrorHandler(esf->r0, esf);
   2151e:	687b      	ldr	r3, [r7, #4]
   21520:	681b      	ldr	r3, [r3, #0]
   21522:	6879      	ldr	r1, [r7, #4]
   21524:	4618      	mov	r0, r3
   21526:	f7f0 fd1b 	bl	11f60 <z_NanoFatalErrorHandler>
}
   2152a:	bf00      	nop
   2152c:	3708      	adds	r7, #8
   2152e:	46bd      	mov	sp, r7
   21530:	bd80      	pop	{r7, pc}

00021532 <k_thread_abort>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
   21532:	b580      	push	{r7, lr}
   21534:	b082      	sub	sp, #8
   21536:	af00      	add	r7, sp, #0
   21538:	6078      	str	r0, [r7, #4]
   2153a:	6878      	ldr	r0, [r7, #4]
   2153c:	f7f0 fd96 	bl	1206c <z_impl_k_thread_abort>
   21540:	bf00      	nop
   21542:	3708      	adds	r7, #8
   21544:	46bd      	mov	sp, r7
   21546:	bd80      	pop	{r7, pc}

00021548 <z_swap_irqlock>:
{
   21548:	b580      	push	{r7, lr}
   2154a:	b084      	sub	sp, #16
   2154c:	af00      	add	r7, sp, #0
   2154e:	6078      	str	r0, [r7, #4]
	ret = __swap(key);
   21550:	6878      	ldr	r0, [r7, #4]
   21552:	f7f0 f961 	bl	11818 <__swap>
   21556:	60f8      	str	r0, [r7, #12]
	return ret;
   21558:	68fb      	ldr	r3, [r7, #12]
}
   2155a:	4618      	mov	r0, r3
   2155c:	3710      	adds	r7, #16
   2155e:	46bd      	mov	sp, r7
   21560:	bd80      	pop	{r7, pc}

00021562 <enable_floating_point>:
		"isb;\n\t"
		);
}
#else
static inline void enable_floating_point(void)
{
   21562:	b480      	push	{r7}
   21564:	af00      	add	r7, sp, #0
}
   21566:	bf00      	nop
   21568:	46bd      	mov	sp, r7
   2156a:	bc80      	pop	{r7}
   2156c:	4770      	bx	lr

0002156e <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
   2156e:	b580      	push	{r7, lr}
   21570:	af00      	add	r7, sp, #0
	relocate_vector_table();
   21572:	f7f0 fde7 	bl	12144 <relocate_vector_table>
	enable_floating_point();
   21576:	f7ff fff4 	bl	21562 <enable_floating_point>
	z_bss_zero();
   2157a:	f7f4 ff39 	bl	163f0 <z_bss_zero>
	z_data_copy();
   2157e:	f7f4 ff47 	bl	16410 <z_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0U;
#endif
	z_IntLibInit();
   21582:	f7ff ff56 	bl	21432 <z_IntLibInit>
	z_cstart();
   21586:	f7f5 f839 	bl	165fc <z_cstart>

0002158a <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
   2158a:	b580      	push	{r7, lr}
   2158c:	af00      	add	r7, sp, #0
	handler();
   2158e:	f7f0 fdd5 	bl	1213c <z_SysNmiOnReset>
	z_ExcExit();
   21592:	f7f0 f909 	bl	117a8 <_IntExit>
}
   21596:	bf00      	nop
   21598:	bd80      	pop	{r7, pc}

0002159a <z_arch_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   2159a:	b580      	push	{r7, lr}
   2159c:	b084      	sub	sp, #16
   2159e:	af00      	add	r7, sp, #0
   215a0:	6078      	str	r0, [r7, #4]
	 * the given thread. The array of partitions (along with its
	 * actual size) will be supplied to the underlying MPU driver.
	 */
	struct k_mem_partition *dynamic_regions[_MAX_DYNAMIC_MPU_REGIONS_NUM];

	u8_t region_num = 0U;
   215a2:	2300      	movs	r3, #0
   215a4:	73fb      	strb	r3, [r7, #15]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   215a6:	7bfa      	ldrb	r2, [r7, #15]
   215a8:	f107 030c 	add.w	r3, r7, #12
   215ac:	4611      	mov	r1, r2
   215ae:	4618      	mov	r0, r3
   215b0:	f000 f918 	bl	217e4 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   215b4:	bf00      	nop
   215b6:	3710      	adds	r7, #16
   215b8:	46bd      	mov	sp, r7
   215ba:	bd80      	pop	{r7, pc}

000215bc <_is_user_context>:
{
   215bc:	b480      	push	{r7}
   215be:	af00      	add	r7, sp, #0
	return false;
   215c0:	2300      	movs	r3, #0
}
   215c2:	4618      	mov	r0, r3
   215c4:	46bd      	mov	sp, r7
   215c6:	bc80      	pop	{r7}
   215c8:	4770      	bx	lr

000215ca <get_num_regions>:
{
   215ca:	b480      	push	{r7}
   215cc:	af00      	add	r7, sp, #0
	return 8;
   215ce:	2308      	movs	r3, #8
}
   215d0:	4618      	mov	r0, r3
   215d2:	46bd      	mov	sp, r7
   215d4:	bc80      	pop	{r7}
   215d6:	4770      	bx	lr

000215d8 <mpu_init>:
{
   215d8:	b480      	push	{r7}
   215da:	af00      	add	r7, sp, #0
}
   215dc:	bf00      	nop
   215de:	46bd      	mov	sp, r7
   215e0:	bc80      	pop	{r7}
   215e2:	4770      	bx	lr

000215e4 <mpu_partition_is_valid>:
{
   215e4:	b480      	push	{r7}
   215e6:	b085      	sub	sp, #20
   215e8:	af00      	add	r7, sp, #0
   215ea:	6078      	str	r0, [r7, #4]
		((part->size & (part->size - 1)) == 0U)
   215ec:	687b      	ldr	r3, [r7, #4]
   215ee:	685a      	ldr	r2, [r3, #4]
   215f0:	687b      	ldr	r3, [r7, #4]
   215f2:	685b      	ldr	r3, [r3, #4]
   215f4:	3b01      	subs	r3, #1
   215f6:	4013      	ands	r3, r2
		&&
   215f8:	2b00      	cmp	r3, #0
   215fa:	d10d      	bne.n	21618 <mpu_partition_is_valid+0x34>
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
   215fc:	687b      	ldr	r3, [r7, #4]
   215fe:	685b      	ldr	r3, [r3, #4]
		&&
   21600:	2b1f      	cmp	r3, #31
   21602:	d909      	bls.n	21618 <mpu_partition_is_valid+0x34>
		((part->start & (part->size - 1)) == 0U);
   21604:	687b      	ldr	r3, [r7, #4]
   21606:	681a      	ldr	r2, [r3, #0]
   21608:	687b      	ldr	r3, [r7, #4]
   2160a:	685b      	ldr	r3, [r3, #4]
   2160c:	3b01      	subs	r3, #1
   2160e:	4013      	ands	r3, r2
		&&
   21610:	2b00      	cmp	r3, #0
   21612:	d101      	bne.n	21618 <mpu_partition_is_valid+0x34>
   21614:	2301      	movs	r3, #1
   21616:	e000      	b.n	2161a <mpu_partition_is_valid+0x36>
   21618:	2300      	movs	r3, #0
	int partition_is_valid =
   2161a:	60fb      	str	r3, [r7, #12]
	return partition_is_valid;
   2161c:	68fb      	ldr	r3, [r7, #12]
}
   2161e:	4618      	mov	r0, r3
   21620:	3714      	adds	r7, #20
   21622:	46bd      	mov	sp, r7
   21624:	bc80      	pop	{r7}
   21626:	4770      	bx	lr

00021628 <size_to_mpu_rasr_size>:
{
   21628:	b480      	push	{r7}
   2162a:	b083      	sub	sp, #12
   2162c:	af00      	add	r7, sp, #0
   2162e:	6078      	str	r0, [r7, #4]
	if (size <= 32U) {
   21630:	687b      	ldr	r3, [r7, #4]
   21632:	2b20      	cmp	r3, #32
   21634:	d801      	bhi.n	2163a <size_to_mpu_rasr_size+0x12>
		return REGION_32B;
   21636:	2308      	movs	r3, #8
   21638:	e00e      	b.n	21658 <size_to_mpu_rasr_size+0x30>
	if (size > (1UL << 31)) {
   2163a:	687b      	ldr	r3, [r7, #4]
   2163c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   21640:	d901      	bls.n	21646 <size_to_mpu_rasr_size+0x1e>
		return REGION_4G;
   21642:	233e      	movs	r3, #62	; 0x3e
   21644:	e008      	b.n	21658 <size_to_mpu_rasr_size+0x30>
	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   21646:	687b      	ldr	r3, [r7, #4]
   21648:	3b01      	subs	r3, #1
   2164a:	fab3 f383 	clz	r3, r3
   2164e:	f1c3 031f 	rsb	r3, r3, #31
   21652:	005b      	lsls	r3, r3, #1
   21654:	f003 033e 	and.w	r3, r3, #62	; 0x3e
}
   21658:	4618      	mov	r0, r3
   2165a:	370c      	adds	r7, #12
   2165c:	46bd      	mov	sp, r7
   2165e:	bc80      	pop	{r7}
   21660:	4770      	bx	lr

00021662 <get_region_attr_from_k_mem_partition_info>:
{
   21662:	b590      	push	{r4, r7, lr}
   21664:	b085      	sub	sp, #20
   21666:	af00      	add	r7, sp, #0
   21668:	60f8      	str	r0, [r7, #12]
   2166a:	60b9      	str	r1, [r7, #8]
   2166c:	607a      	str	r2, [r7, #4]
   2166e:	603b      	str	r3, [r7, #0]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   21670:	68bb      	ldr	r3, [r7, #8]
   21672:	681c      	ldr	r4, [r3, #0]
   21674:	6838      	ldr	r0, [r7, #0]
   21676:	f7ff ffd7 	bl	21628 <size_to_mpu_rasr_size>
   2167a:	4603      	mov	r3, r0
   2167c:	ea44 0203 	orr.w	r2, r4, r3
   21680:	68fb      	ldr	r3, [r7, #12]
   21682:	601a      	str	r2, [r3, #0]
}
   21684:	bf00      	nop
   21686:	3714      	adds	r7, #20
   21688:	46bd      	mov	sp, r7
   2168a:	bd90      	pop	{r4, r7, pc}

0002168c <mpu_configure_regions>:
{
   2168c:	b580      	push	{r7, lr}
   2168e:	b086      	sub	sp, #24
   21690:	af00      	add	r7, sp, #0
   21692:	6078      	str	r0, [r7, #4]
   21694:	4608      	mov	r0, r1
   21696:	4611      	mov	r1, r2
   21698:	461a      	mov	r2, r3
   2169a:	4603      	mov	r3, r0
   2169c:	70fb      	strb	r3, [r7, #3]
   2169e:	460b      	mov	r3, r1
   216a0:	70bb      	strb	r3, [r7, #2]
   216a2:	4613      	mov	r3, r2
   216a4:	707b      	strb	r3, [r7, #1]
	int reg_index = start_reg_index;
   216a6:	78bb      	ldrb	r3, [r7, #2]
   216a8:	613b      	str	r3, [r7, #16]
	for (i = 0; i < regions_num; i++) {
   216aa:	2300      	movs	r3, #0
   216ac:	617b      	str	r3, [r7, #20]
   216ae:	e035      	b.n	2171c <mpu_configure_regions+0x90>
		if (regions[i]->size == 0U) {
   216b0:	697b      	ldr	r3, [r7, #20]
   216b2:	009b      	lsls	r3, r3, #2
   216b4:	687a      	ldr	r2, [r7, #4]
   216b6:	4413      	add	r3, r2
   216b8:	681b      	ldr	r3, [r3, #0]
   216ba:	685b      	ldr	r3, [r3, #4]
   216bc:	2b00      	cmp	r3, #0
   216be:	d029      	beq.n	21714 <mpu_configure_regions+0x88>
		if (do_sanity_check &&
   216c0:	787b      	ldrb	r3, [r7, #1]
   216c2:	2b00      	cmp	r3, #0
   216c4:	d011      	beq.n	216ea <mpu_configure_regions+0x5e>
				(!mpu_partition_is_valid(regions[i]))) {
   216c6:	697b      	ldr	r3, [r7, #20]
   216c8:	009b      	lsls	r3, r3, #2
   216ca:	687a      	ldr	r2, [r7, #4]
   216cc:	4413      	add	r3, r2
   216ce:	681b      	ldr	r3, [r3, #0]
   216d0:	4618      	mov	r0, r3
   216d2:	f7ff ff87 	bl	215e4 <mpu_partition_is_valid>
   216d6:	4603      	mov	r3, r0
		if (do_sanity_check &&
   216d8:	2b00      	cmp	r3, #0
   216da:	d106      	bne.n	216ea <mpu_configure_regions+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
   216dc:	f7ff ff6e 	bl	215bc <_is_user_context>
   216e0:	4603      	mov	r3, r0
   216e2:	73fb      	strb	r3, [r7, #15]
			return -EINVAL;
   216e4:	f06f 0315 	mvn.w	r3, #21
   216e8:	e01d      	b.n	21726 <mpu_configure_regions+0x9a>
		reg_index = mpu_configure_region(reg_index, regions[i]);
   216ea:	693b      	ldr	r3, [r7, #16]
   216ec:	b2d8      	uxtb	r0, r3
   216ee:	697b      	ldr	r3, [r7, #20]
   216f0:	009b      	lsls	r3, r3, #2
   216f2:	687a      	ldr	r2, [r7, #4]
   216f4:	4413      	add	r3, r2
   216f6:	681b      	ldr	r3, [r3, #0]
   216f8:	4619      	mov	r1, r3
   216fa:	f000 f83a 	bl	21772 <mpu_configure_region>
   216fe:	6138      	str	r0, [r7, #16]
		if (reg_index == -EINVAL) {
   21700:	693b      	ldr	r3, [r7, #16]
   21702:	f113 0f16 	cmn.w	r3, #22
   21706:	d101      	bne.n	2170c <mpu_configure_regions+0x80>
			return reg_index;
   21708:	693b      	ldr	r3, [r7, #16]
   2170a:	e00c      	b.n	21726 <mpu_configure_regions+0x9a>
		reg_index++;
   2170c:	693b      	ldr	r3, [r7, #16]
   2170e:	3301      	adds	r3, #1
   21710:	613b      	str	r3, [r7, #16]
   21712:	e000      	b.n	21716 <mpu_configure_regions+0x8a>
			continue;
   21714:	bf00      	nop
	for (i = 0; i < regions_num; i++) {
   21716:	697b      	ldr	r3, [r7, #20]
   21718:	3301      	adds	r3, #1
   2171a:	617b      	str	r3, [r7, #20]
   2171c:	78fb      	ldrb	r3, [r7, #3]
   2171e:	697a      	ldr	r2, [r7, #20]
   21720:	429a      	cmp	r2, r3
   21722:	dbc5      	blt.n	216b0 <mpu_configure_regions+0x24>
	return reg_index;
   21724:	693b      	ldr	r3, [r7, #16]
}
   21726:	4618      	mov	r0, r3
   21728:	3718      	adds	r7, #24
   2172a:	46bd      	mov	sp, r7
   2172c:	bd80      	pop	{r7, pc}

0002172e <region_allocate_and_init>:
{
   2172e:	b590      	push	{r4, r7, lr}
   21730:	b085      	sub	sp, #20
   21732:	af00      	add	r7, sp, #0
   21734:	4603      	mov	r3, r0
   21736:	6039      	str	r1, [r7, #0]
   21738:	71fb      	strb	r3, [r7, #7]
	if (index > (get_num_regions() - 1)) {
   2173a:	79fc      	ldrb	r4, [r7, #7]
   2173c:	f7ff ff45 	bl	215ca <get_num_regions>
   21740:	4603      	mov	r3, r0
   21742:	3b01      	subs	r3, #1
   21744:	429c      	cmp	r4, r3
   21746:	dd06      	ble.n	21756 <region_allocate_and_init+0x28>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   21748:	f7ff ff38 	bl	215bc <_is_user_context>
   2174c:	4603      	mov	r3, r0
   2174e:	73bb      	strb	r3, [r7, #14]
		return -EINVAL;
   21750:	f06f 0315 	mvn.w	r3, #21
   21754:	e009      	b.n	2176a <region_allocate_and_init+0x3c>
	LOG_DBG("Program MPU region at index 0x%x", index);
   21756:	f7ff ff31 	bl	215bc <_is_user_context>
   2175a:	4603      	mov	r3, r0
   2175c:	73fb      	strb	r3, [r7, #15]
	region_init(index, region_conf);
   2175e:	79fb      	ldrb	r3, [r7, #7]
   21760:	6839      	ldr	r1, [r7, #0]
   21762:	4618      	mov	r0, r3
   21764:	f7f0 fd34 	bl	121d0 <region_init>
	return index;
   21768:	79fb      	ldrb	r3, [r7, #7]
}
   2176a:	4618      	mov	r0, r3
   2176c:	3714      	adds	r7, #20
   2176e:	46bd      	mov	sp, r7
   21770:	bd90      	pop	{r4, r7, pc}

00021772 <mpu_configure_region>:
{
   21772:	b590      	push	{r4, r7, lr}
   21774:	b089      	sub	sp, #36	; 0x24
   21776:	af00      	add	r7, sp, #0
   21778:	4603      	mov	r3, r0
   2177a:	6039      	str	r1, [r7, #0]
   2177c:	71fb      	strb	r3, [r7, #7]
	LOG_DBG("Configure MPU region at index 0x%x", index);
   2177e:	f7ff ff1d 	bl	215bc <_is_user_context>
   21782:	4603      	mov	r3, r0
   21784:	77fb      	strb	r3, [r7, #31]
	region_conf.base = new_region->start;
   21786:	683b      	ldr	r3, [r7, #0]
   21788:	681b      	ldr	r3, [r3, #0]
   2178a:	613b      	str	r3, [r7, #16]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   2178c:	683b      	ldr	r3, [r7, #0]
   2178e:	f103 0108 	add.w	r1, r3, #8
   21792:	683b      	ldr	r3, [r7, #0]
   21794:	681a      	ldr	r2, [r3, #0]
   21796:	683b      	ldr	r3, [r7, #0]
   21798:	685c      	ldr	r4, [r3, #4]
   2179a:	f107 0310 	add.w	r3, r7, #16
   2179e:	f103 0008 	add.w	r0, r3, #8
   217a2:	4623      	mov	r3, r4
   217a4:	f7ff ff5d 	bl	21662 <get_region_attr_from_k_mem_partition_info>
	return region_allocate_and_init(index,
   217a8:	f107 0210 	add.w	r2, r7, #16
   217ac:	79fb      	ldrb	r3, [r7, #7]
   217ae:	4611      	mov	r1, r2
   217b0:	4618      	mov	r0, r3
   217b2:	f7ff ffbc 	bl	2172e <region_allocate_and_init>
   217b6:	4603      	mov	r3, r0
}
   217b8:	4618      	mov	r0, r3
   217ba:	3724      	adds	r7, #36	; 0x24
   217bc:	46bd      	mov	sp, r7
   217be:	bd90      	pop	{r4, r7, pc}

000217c0 <arm_core_mpu_configure_static_mpu_regions>:
{
   217c0:	b580      	push	{r7, lr}
   217c2:	b084      	sub	sp, #16
   217c4:	af00      	add	r7, sp, #0
   217c6:	60f8      	str	r0, [r7, #12]
   217c8:	607a      	str	r2, [r7, #4]
   217ca:	603b      	str	r3, [r7, #0]
   217cc:	460b      	mov	r3, r1
   217ce:	72fb      	strb	r3, [r7, #11]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   217d0:	7af9      	ldrb	r1, [r7, #11]
   217d2:	683b      	ldr	r3, [r7, #0]
   217d4:	687a      	ldr	r2, [r7, #4]
   217d6:	68f8      	ldr	r0, [r7, #12]
   217d8:	f7f0 fd1c 	bl	12214 <mpu_configure_static_mpu_regions>
}
   217dc:	bf00      	nop
   217de:	3710      	adds	r7, #16
   217e0:	46bd      	mov	sp, r7
   217e2:	bd80      	pop	{r7, pc}

000217e4 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   217e4:	b580      	push	{r7, lr}
   217e6:	b082      	sub	sp, #8
   217e8:	af00      	add	r7, sp, #0
   217ea:	6078      	str	r0, [r7, #4]
   217ec:	460b      	mov	r3, r1
   217ee:	70fb      	strb	r3, [r7, #3]
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   217f0:	78fb      	ldrb	r3, [r7, #3]
   217f2:	4619      	mov	r1, r3
   217f4:	6878      	ldr	r0, [r7, #4]
   217f6:	f7f0 fd2b 	bl	12250 <mpu_configure_dynamic_mpu_regions>
}
   217fa:	bf00      	nop
   217fc:	3708      	adds	r7, #8
   217fe:	46bd      	mov	sp, r7
   21800:	bd80      	pop	{r7, pc}

00021802 <z_errno>:

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE0(K_SYSCALL_Z_ERRNO, z_errno, int *)
   21802:	b580      	push	{r7, lr}
   21804:	af00      	add	r7, sp, #0
   21806:	f7f4 fdaf 	bl	16368 <z_impl_z_errno>
   2180a:	4603      	mov	r3, r0
   2180c:	4618      	mov	r0, r3
   2180e:	bd80      	pop	{r7, pc}

00021810 <_stdout_hook_default>:
{
   21810:	b480      	push	{r7}
   21812:	b083      	sub	sp, #12
   21814:	af00      	add	r7, sp, #0
   21816:	6078      	str	r0, [r7, #4]
	return EOF;
   21818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   2181c:	4618      	mov	r0, r3
   2181e:	370c      	adds	r7, #12
   21820:	46bd      	mov	sp, r7
   21822:	bc80      	pop	{r7}
   21824:	4770      	bx	lr

00021826 <_stdin_hook_default>:
{
   21826:	b480      	push	{r7}
   21828:	af00      	add	r7, sp, #0
	return 0;
   2182a:	2300      	movs	r3, #0
}
   2182c:	4618      	mov	r0, r3
   2182e:	46bd      	mov	sp, r7
   21830:	bc80      	pop	{r7}
   21832:	4770      	bx	lr

00021834 <_read>:
{
   21834:	b580      	push	{r7, lr}
   21836:	b084      	sub	sp, #16
   21838:	af00      	add	r7, sp, #0
   2183a:	60f8      	str	r0, [r7, #12]
   2183c:	60b9      	str	r1, [r7, #8]
   2183e:	607a      	str	r2, [r7, #4]
	return z_impl_zephyr_read_stdin(buf, nbytes);
   21840:	6879      	ldr	r1, [r7, #4]
   21842:	68b8      	ldr	r0, [r7, #8]
   21844:	f7f0 fd9c 	bl	12380 <z_impl_zephyr_read_stdin>
   21848:	4603      	mov	r3, r0
}
   2184a:	4618      	mov	r0, r3
   2184c:	3710      	adds	r7, #16
   2184e:	46bd      	mov	sp, r7
   21850:	bd80      	pop	{r7, pc}

00021852 <_write>:
{
   21852:	b580      	push	{r7, lr}
   21854:	b084      	sub	sp, #16
   21856:	af00      	add	r7, sp, #0
   21858:	60f8      	str	r0, [r7, #12]
   2185a:	60b9      	str	r1, [r7, #8]
   2185c:	607a      	str	r2, [r7, #4]
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2185e:	6879      	ldr	r1, [r7, #4]
   21860:	68b8      	ldr	r0, [r7, #8]
   21862:	f7f0 fdbd 	bl	123e0 <z_impl_zephyr_write_stdout>
   21866:	4603      	mov	r3, r0
}
   21868:	4618      	mov	r0, r3
   2186a:	3710      	adds	r7, #16
   2186c:	46bd      	mov	sp, r7
   2186e:	bd80      	pop	{r7, pc}

00021870 <_close>:
{
   21870:	b480      	push	{r7}
   21872:	b083      	sub	sp, #12
   21874:	af00      	add	r7, sp, #0
   21876:	6078      	str	r0, [r7, #4]
	return -1;
   21878:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   2187c:	4618      	mov	r0, r3
   2187e:	370c      	adds	r7, #12
   21880:	46bd      	mov	sp, r7
   21882:	bc80      	pop	{r7}
   21884:	4770      	bx	lr

00021886 <_lseek>:
{
   21886:	b480      	push	{r7}
   21888:	b085      	sub	sp, #20
   2188a:	af00      	add	r7, sp, #0
   2188c:	60f8      	str	r0, [r7, #12]
   2188e:	60b9      	str	r1, [r7, #8]
   21890:	607a      	str	r2, [r7, #4]
	return 0;
   21892:	2300      	movs	r3, #0
}
   21894:	4618      	mov	r0, r3
   21896:	3714      	adds	r7, #20
   21898:	46bd      	mov	sp, r7
   2189a:	bc80      	pop	{r7}
   2189c:	4770      	bx	lr

0002189e <_isatty>:
{
   2189e:	b480      	push	{r7}
   218a0:	b083      	sub	sp, #12
   218a2:	af00      	add	r7, sp, #0
   218a4:	6078      	str	r0, [r7, #4]
	return 1;
   218a6:	2301      	movs	r3, #1
}
   218a8:	4618      	mov	r0, r3
   218aa:	370c      	adds	r7, #12
   218ac:	46bd      	mov	sp, r7
   218ae:	bc80      	pop	{r7}
   218b0:	4770      	bx	lr

000218b2 <_kill>:
{
   218b2:	b480      	push	{r7}
   218b4:	b083      	sub	sp, #12
   218b6:	af00      	add	r7, sp, #0
   218b8:	6078      	str	r0, [r7, #4]
   218ba:	6039      	str	r1, [r7, #0]
	return 0;
   218bc:	2300      	movs	r3, #0
}
   218be:	4618      	mov	r0, r3
   218c0:	370c      	adds	r7, #12
   218c2:	46bd      	mov	sp, r7
   218c4:	bc80      	pop	{r7}
   218c6:	4770      	bx	lr

000218c8 <_getpid>:
{
   218c8:	b480      	push	{r7}
   218ca:	af00      	add	r7, sp, #0
	return 0;
   218cc:	2300      	movs	r3, #0
}
   218ce:	4618      	mov	r0, r3
   218d0:	46bd      	mov	sp, r7
   218d2:	bc80      	pop	{r7}
   218d4:	4770      	bx	lr

000218d6 <_fstat>:
{
   218d6:	b480      	push	{r7}
   218d8:	b083      	sub	sp, #12
   218da:	af00      	add	r7, sp, #0
   218dc:	6078      	str	r0, [r7, #4]
   218de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   218e0:	683b      	ldr	r3, [r7, #0]
   218e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   218e6:	605a      	str	r2, [r3, #4]
	return 0;
   218e8:	2300      	movs	r3, #0
}
   218ea:	4618      	mov	r0, r3
   218ec:	370c      	adds	r7, #12
   218ee:	46bd      	mov	sp, r7
   218f0:	bc80      	pop	{r7}
   218f2:	4770      	bx	lr

000218f4 <__errno>:
FUNC_ALIAS(_sbrk, sbrk, void *);

int *__errno(void)
{
   218f4:	b580      	push	{r7, lr}
   218f6:	af00      	add	r7, sp, #0
	return z_errno();
   218f8:	f7ff ff83 	bl	21802 <z_errno>
   218fc:	4603      	mov	r3, r0
}
   218fe:	4618      	mov	r0, r3
   21900:	bd80      	pop	{r7, pc}

00021902 <k_uptime_get_32>:
{
   21902:	b598      	push	{r3, r4, r7, lr}
   21904:	af00      	add	r7, sp, #0
	return (u32_t)k_uptime_get();
   21906:	f000 f804 	bl	21912 <k_uptime_get>
   2190a:	4603      	mov	r3, r0
   2190c:	460c      	mov	r4, r1
}
   2190e:	4618      	mov	r0, r3
   21910:	bd98      	pop	{r3, r4, r7, pc}

00021912 <k_uptime_get>:
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   21912:	b598      	push	{r3, r4, r7, lr}
   21914:	af00      	add	r7, sp, #0
   21916:	f00a fb20 	bl	2bf5a <z_impl_k_uptime_get>
   2191a:	4603      	mov	r3, r0
   2191c:	460c      	mov	r4, r1
   2191e:	4618      	mov	r0, r3
   21920:	4621      	mov	r1, r4
   21922:	bd98      	pop	{r3, r4, r7, pc}

00021924 <k_queue_get>:
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   21924:	b580      	push	{r7, lr}
   21926:	b082      	sub	sp, #8
   21928:	af00      	add	r7, sp, #0
   2192a:	6078      	str	r0, [r7, #4]
   2192c:	6039      	str	r1, [r7, #0]
   2192e:	6839      	ldr	r1, [r7, #0]
   21930:	6878      	ldr	r0, [r7, #4]
   21932:	f008 ffb3 	bl	2a89c <z_impl_k_queue_get>
   21936:	4603      	mov	r3, r0
   21938:	4618      	mov	r0, r3
   2193a:	3708      	adds	r7, #8
   2193c:	46bd      	mov	sp, r7
   2193e:	bd80      	pop	{r7, pc}

00021940 <net_buf_simple_reset>:
 * Reset buffer data so it can be reused for other purposes.
 *
 * @param buf Buffer to reset.
 */
static inline void net_buf_simple_reset(struct net_buf_simple *buf)
{
   21940:	b480      	push	{r7}
   21942:	b083      	sub	sp, #12
   21944:	af00      	add	r7, sp, #0
   21946:	6078      	str	r0, [r7, #4]
	buf->len  = 0U;
   21948:	687b      	ldr	r3, [r7, #4]
   2194a:	2200      	movs	r2, #0
   2194c:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
   2194e:	687b      	ldr	r3, [r7, #4]
   21950:	689a      	ldr	r2, [r3, #8]
   21952:	687b      	ldr	r3, [r7, #4]
   21954:	601a      	str	r2, [r3, #0]
}
   21956:	bf00      	nop
   21958:	370c      	adds	r7, #12
   2195a:	46bd      	mov	sp, r7
   2195c:	bc80      	pop	{r7}
   2195e:	4770      	bx	lr

00021960 <net_buf_simple_tail>:
 * @param buf Buffer.
 *
 * @return Tail pointer for the buffer.
 */
static inline u8_t *net_buf_simple_tail(struct net_buf_simple *buf)
{
   21960:	b480      	push	{r7}
   21962:	b083      	sub	sp, #12
   21964:	af00      	add	r7, sp, #0
   21966:	6078      	str	r0, [r7, #4]
	return buf->data + buf->len;
   21968:	687b      	ldr	r3, [r7, #4]
   2196a:	681b      	ldr	r3, [r3, #0]
   2196c:	687a      	ldr	r2, [r7, #4]
   2196e:	8892      	ldrh	r2, [r2, #4]
   21970:	4413      	add	r3, r2
}
   21972:	4618      	mov	r0, r3
   21974:	370c      	adds	r7, #12
   21976:	46bd      	mov	sp, r7
   21978:	bc80      	pop	{r7}
   2197a:	4770      	bx	lr

0002197c <net_buf_destroy>:
 * there is no need to use this API.
 *
 * @param buf Buffer to destroy.
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
   2197c:	b580      	push	{r7, lr}
   2197e:	b084      	sub	sp, #16
   21980:	af00      	add	r7, sp, #0
   21982:	6078      	str	r0, [r7, #4]
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   21984:	687b      	ldr	r3, [r7, #4]
   21986:	799b      	ldrb	r3, [r3, #6]
   21988:	4618      	mov	r0, r3
   2198a:	f7f0 fd87 	bl	1249c <net_buf_pool_get>
   2198e:	60f8      	str	r0, [r7, #12]

	k_lifo_put(&pool->free, buf);
   21990:	68fb      	ldr	r3, [r7, #12]
   21992:	6879      	ldr	r1, [r7, #4]
   21994:	4618      	mov	r0, r3
   21996:	f008 fefd 	bl	2a794 <k_queue_prepend>
}
   2199a:	bf00      	nop
   2199c:	3710      	adds	r7, #16
   2199e:	46bd      	mov	sp, r7
   219a0:	bd80      	pop	{r7, pc}

000219a2 <pool_get_uninit>:

static inline struct net_buf *pool_get_uninit(struct net_buf_pool *pool,
					      u16_t uninit_count)
{
   219a2:	b580      	push	{r7, lr}
   219a4:	b084      	sub	sp, #16
   219a6:	af00      	add	r7, sp, #0
   219a8:	6078      	str	r0, [r7, #4]
   219aa:	460b      	mov	r3, r1
   219ac:	807b      	strh	r3, [r7, #2]
	struct net_buf *buf;

	buf = &pool->__bufs[pool->buf_count - uninit_count];
   219ae:	687b      	ldr	r3, [r7, #4]
   219b0:	69da      	ldr	r2, [r3, #28]
   219b2:	687b      	ldr	r3, [r7, #4]
   219b4:	8a1b      	ldrh	r3, [r3, #16]
   219b6:	4619      	mov	r1, r3
   219b8:	887b      	ldrh	r3, [r7, #2]
   219ba:	1acb      	subs	r3, r1, r3
   219bc:	4619      	mov	r1, r3
   219be:	460b      	mov	r3, r1
   219c0:	005b      	lsls	r3, r3, #1
   219c2:	440b      	add	r3, r1
   219c4:	00db      	lsls	r3, r3, #3
   219c6:	4413      	add	r3, r2
   219c8:	60fb      	str	r3, [r7, #12]

	buf->pool_id = pool_id(pool);
   219ca:	6878      	ldr	r0, [r7, #4]
   219cc:	f7f0 fd76 	bl	124bc <pool_id>
   219d0:	4603      	mov	r3, r0
   219d2:	b2da      	uxtb	r2, r3
   219d4:	68fb      	ldr	r3, [r7, #12]
   219d6:	719a      	strb	r2, [r3, #6]

	return buf;
   219d8:	68fb      	ldr	r3, [r7, #12]
}
   219da:	4618      	mov	r0, r3
   219dc:	3710      	adds	r7, #16
   219de:	46bd      	mov	sp, r7
   219e0:	bd80      	pop	{r7, pc}

000219e2 <net_buf_reset>:

void net_buf_reset(struct net_buf *buf)
{
   219e2:	b580      	push	{r7, lr}
   219e4:	b082      	sub	sp, #8
   219e6:	af00      	add	r7, sp, #0
   219e8:	6078      	str	r0, [r7, #4]
	NET_BUF_ASSERT(buf->flags == 0U);
	NET_BUF_ASSERT(buf->frags == NULL);

	net_buf_simple_reset(&buf->b);
   219ea:	687b      	ldr	r3, [r7, #4]
   219ec:	3308      	adds	r3, #8
   219ee:	4618      	mov	r0, r3
   219f0:	f7ff ffa6 	bl	21940 <net_buf_simple_reset>
}
   219f4:	bf00      	nop
   219f6:	3708      	adds	r7, #8
   219f8:	46bd      	mov	sp, r7
   219fa:	bd80      	pop	{r7, pc}

000219fc <fixed_data_alloc>:
	.ref   = generic_data_ref,
	.unref = mem_pool_data_unref,
};

static u8_t *fixed_data_alloc(struct net_buf *buf, size_t *size, s32_t timeout)
{
   219fc:	b5b0      	push	{r4, r5, r7, lr}
   219fe:	b086      	sub	sp, #24
   21a00:	af00      	add	r7, sp, #0
   21a02:	60f8      	str	r0, [r7, #12]
   21a04:	60b9      	str	r1, [r7, #8]
   21a06:	607a      	str	r2, [r7, #4]
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   21a08:	68fb      	ldr	r3, [r7, #12]
   21a0a:	799b      	ldrb	r3, [r3, #6]
   21a0c:	4618      	mov	r0, r3
   21a0e:	f7f0 fd45 	bl	1249c <net_buf_pool_get>
   21a12:	6178      	str	r0, [r7, #20]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   21a14:	697b      	ldr	r3, [r7, #20]
   21a16:	699b      	ldr	r3, [r3, #24]
   21a18:	685b      	ldr	r3, [r3, #4]
   21a1a:	613b      	str	r3, [r7, #16]

	*size = MIN(fixed->data_size, *size);
   21a1c:	68bb      	ldr	r3, [r7, #8]
   21a1e:	681a      	ldr	r2, [r3, #0]
   21a20:	693b      	ldr	r3, [r7, #16]
   21a22:	681b      	ldr	r3, [r3, #0]
   21a24:	429a      	cmp	r2, r3
   21a26:	bf28      	it	cs
   21a28:	461a      	movcs	r2, r3
   21a2a:	68bb      	ldr	r3, [r7, #8]
   21a2c:	601a      	str	r2, [r3, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   21a2e:	693b      	ldr	r3, [r7, #16]
   21a30:	685c      	ldr	r4, [r3, #4]
   21a32:	693b      	ldr	r3, [r7, #16]
   21a34:	681d      	ldr	r5, [r3, #0]
   21a36:	68f8      	ldr	r0, [r7, #12]
   21a38:	f7f0 fd50 	bl	124dc <net_buf_id>
   21a3c:	4603      	mov	r3, r0
   21a3e:	fb03 f305 	mul.w	r3, r3, r5
   21a42:	4423      	add	r3, r4
}
   21a44:	4618      	mov	r0, r3
   21a46:	3718      	adds	r7, #24
   21a48:	46bd      	mov	sp, r7
   21a4a:	bdb0      	pop	{r4, r5, r7, pc}

00021a4c <fixed_data_unref>:

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
   21a4c:	b480      	push	{r7}
   21a4e:	b083      	sub	sp, #12
   21a50:	af00      	add	r7, sp, #0
   21a52:	6078      	str	r0, [r7, #4]
   21a54:	6039      	str	r1, [r7, #0]
	/* Nothing needed for fixed-size data pools */
}
   21a56:	bf00      	nop
   21a58:	370c      	adds	r7, #12
   21a5a:	46bd      	mov	sp, r7
   21a5c:	bc80      	pop	{r7}
   21a5e:	4770      	bx	lr

00021a60 <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static u8_t *data_alloc(struct net_buf *buf, size_t *size, s32_t timeout)
{
   21a60:	b580      	push	{r7, lr}
   21a62:	b086      	sub	sp, #24
   21a64:	af00      	add	r7, sp, #0
   21a66:	60f8      	str	r0, [r7, #12]
   21a68:	60b9      	str	r1, [r7, #8]
   21a6a:	607a      	str	r2, [r7, #4]
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   21a6c:	68fb      	ldr	r3, [r7, #12]
   21a6e:	799b      	ldrb	r3, [r3, #6]
   21a70:	4618      	mov	r0, r3
   21a72:	f7f0 fd13 	bl	1249c <net_buf_pool_get>
   21a76:	6178      	str	r0, [r7, #20]

	return pool->alloc->cb->alloc(buf, size, timeout);
   21a78:	697b      	ldr	r3, [r7, #20]
   21a7a:	699b      	ldr	r3, [r3, #24]
   21a7c:	681b      	ldr	r3, [r3, #0]
   21a7e:	681b      	ldr	r3, [r3, #0]
   21a80:	687a      	ldr	r2, [r7, #4]
   21a82:	68b9      	ldr	r1, [r7, #8]
   21a84:	68f8      	ldr	r0, [r7, #12]
   21a86:	4798      	blx	r3
   21a88:	4603      	mov	r3, r0
}
   21a8a:	4618      	mov	r0, r3
   21a8c:	3718      	adds	r7, #24
   21a8e:	46bd      	mov	sp, r7
   21a90:	bd80      	pop	{r7, pc}

00021a92 <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, u8_t *data)
{
   21a92:	b580      	push	{r7, lr}
   21a94:	b084      	sub	sp, #16
   21a96:	af00      	add	r7, sp, #0
   21a98:	6078      	str	r0, [r7, #4]
   21a9a:	6039      	str	r1, [r7, #0]
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   21a9c:	687b      	ldr	r3, [r7, #4]
   21a9e:	799b      	ldrb	r3, [r3, #6]
   21aa0:	4618      	mov	r0, r3
   21aa2:	f7f0 fcfb 	bl	1249c <net_buf_pool_get>
   21aa6:	60f8      	str	r0, [r7, #12]

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   21aa8:	687b      	ldr	r3, [r7, #4]
   21aaa:	795b      	ldrb	r3, [r3, #5]
   21aac:	f003 0302 	and.w	r3, r3, #2
   21ab0:	2b00      	cmp	r3, #0
   21ab2:	d107      	bne.n	21ac4 <data_unref+0x32>
		return;
	}

	pool->alloc->cb->unref(buf, data);
   21ab4:	68fb      	ldr	r3, [r7, #12]
   21ab6:	699b      	ldr	r3, [r3, #24]
   21ab8:	681b      	ldr	r3, [r3, #0]
   21aba:	689b      	ldr	r3, [r3, #8]
   21abc:	6839      	ldr	r1, [r7, #0]
   21abe:	6878      	ldr	r0, [r7, #4]
   21ac0:	4798      	blx	r3
   21ac2:	e000      	b.n	21ac6 <data_unref+0x34>
		return;
   21ac4:	bf00      	nop
}
   21ac6:	3710      	adds	r7, #16
   21ac8:	46bd      	mov	sp, r7
   21aca:	bd80      	pop	{r7, pc}

00021acc <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   21acc:	b580      	push	{r7, lr}
   21ace:	b08e      	sub	sp, #56	; 0x38
   21ad0:	af00      	add	r7, sp, #0
   21ad2:	60f8      	str	r0, [r7, #12]
   21ad4:	60b9      	str	r1, [r7, #8]
   21ad6:	607a      	str	r2, [r7, #4]
	u32_t alloc_start = k_uptime_get_32();
   21ad8:	f7ff ff13 	bl	21902 <k_uptime_get_32>
   21adc:	6338      	str	r0, [r7, #48]	; 0x30
	__asm__ volatile(
   21ade:	f04f 0320 	mov.w	r3, #32
   21ae2:	f3ef 8211 	mrs	r2, BASEPRI
   21ae6:	f383 8811 	msr	BASEPRI, r3
   21aea:	f3bf 8f6f 	isb	sy
   21aee:	623a      	str	r2, [r7, #32]
   21af0:	61fb      	str	r3, [r7, #28]
	return key;
   21af2:	6a3b      	ldr	r3, [r7, #32]
		    size, timeout);

	/* We need to lock interrupts temporarily to prevent race conditions
	 * when accessing pool->uninit_count.
	 */
	key = irq_lock();
   21af4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   21af6:	68fb      	ldr	r3, [r7, #12]
   21af8:	8a5b      	ldrh	r3, [r3, #18]
   21afa:	2b00      	cmp	r3, #0
   21afc:	d02b      	beq.n	21b56 <net_buf_alloc_len+0x8a>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   21afe:	68fb      	ldr	r3, [r7, #12]
   21b00:	8a5a      	ldrh	r2, [r3, #18]
   21b02:	68fb      	ldr	r3, [r7, #12]
   21b04:	8a1b      	ldrh	r3, [r3, #16]
   21b06:	429a      	cmp	r2, r3
   21b08:	d210      	bcs.n	21b2c <net_buf_alloc_len+0x60>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
   21b0a:	68fb      	ldr	r3, [r7, #12]
   21b0c:	2100      	movs	r1, #0
   21b0e:	4618      	mov	r0, r3
   21b10:	f7ff ff08 	bl	21924 <k_queue_get>
   21b14:	6378      	str	r0, [r7, #52]	; 0x34
			if (buf) {
   21b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21b18:	2b00      	cmp	r3, #0
   21b1a:	d007      	beq.n	21b2c <net_buf_alloc_len+0x60>
   21b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21b1e:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
   21b20:	69bb      	ldr	r3, [r7, #24]
   21b22:	f383 8811 	msr	BASEPRI, r3
   21b26:	f3bf 8f6f 	isb	sy
				irq_unlock(key);
				goto success;
   21b2a:	e027      	b.n	21b7c <net_buf_alloc_len+0xb0>
			}
		}

		uninit_count = pool->uninit_count--;
   21b2c:	68fb      	ldr	r3, [r7, #12]
   21b2e:	8a5b      	ldrh	r3, [r3, #18]
   21b30:	1e5a      	subs	r2, r3, #1
   21b32:	b291      	uxth	r1, r2
   21b34:	68fa      	ldr	r2, [r7, #12]
   21b36:	8251      	strh	r1, [r2, #18]
   21b38:	857b      	strh	r3, [r7, #42]	; 0x2a
   21b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21b3c:	617b      	str	r3, [r7, #20]
   21b3e:	697b      	ldr	r3, [r7, #20]
   21b40:	f383 8811 	msr	BASEPRI, r3
   21b44:	f3bf 8f6f 	isb	sy
		irq_unlock(key);

		buf = pool_get_uninit(pool, uninit_count);
   21b48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   21b4a:	4619      	mov	r1, r3
   21b4c:	68f8      	ldr	r0, [r7, #12]
   21b4e:	f7ff ff28 	bl	219a2 <pool_get_uninit>
   21b52:	6378      	str	r0, [r7, #52]	; 0x34
		goto success;
   21b54:	e012      	b.n	21b7c <net_buf_alloc_len+0xb0>
   21b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21b58:	613b      	str	r3, [r7, #16]
   21b5a:	693b      	ldr	r3, [r7, #16]
   21b5c:	f383 8811 	msr	BASEPRI, r3
   21b60:	f3bf 8f6f 	isb	sy
		}
	} else {
		buf = k_lifo_get(&pool->free, timeout);
	}
#else
	buf = k_lifo_get(&pool->free, timeout);
   21b64:	68fb      	ldr	r3, [r7, #12]
   21b66:	6879      	ldr	r1, [r7, #4]
   21b68:	4618      	mov	r0, r3
   21b6a:	f7ff fedb 	bl	21924 <k_queue_get>
   21b6e:	6378      	str	r0, [r7, #52]	; 0x34
#endif
	if (!buf) {
   21b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21b72:	2b00      	cmp	r3, #0
   21b74:	d101      	bne.n	21b7a <net_buf_alloc_len+0xae>
		NET_BUF_ERR("%s():%d: Failed to get free buffer", func, line);
		return NULL;
   21b76:	2300      	movs	r3, #0
   21b78:	e03f      	b.n	21bfa <net_buf_alloc_len+0x12e>
	}

success:
   21b7a:	bf00      	nop
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   21b7c:	68bb      	ldr	r3, [r7, #8]
   21b7e:	2b00      	cmp	r3, #0
   21b80:	d027      	beq.n	21bd2 <net_buf_alloc_len+0x106>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   21b82:	687b      	ldr	r3, [r7, #4]
   21b84:	2b00      	cmp	r3, #0
   21b86:	d011      	beq.n	21bac <net_buf_alloc_len+0xe0>
   21b88:	687b      	ldr	r3, [r7, #4]
   21b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   21b8e:	d00d      	beq.n	21bac <net_buf_alloc_len+0xe0>
			u32_t diff = k_uptime_get_32() - alloc_start;
   21b90:	f7ff feb7 	bl	21902 <k_uptime_get_32>
   21b94:	4602      	mov	r2, r0
   21b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21b98:	1ad3      	subs	r3, r2, r3
   21b9a:	627b      	str	r3, [r7, #36]	; 0x24

			timeout -= MIN(timeout, diff);
   21b9c:	687a      	ldr	r2, [r7, #4]
   21b9e:	6879      	ldr	r1, [r7, #4]
   21ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21ba2:	428b      	cmp	r3, r1
   21ba4:	bf28      	it	cs
   21ba6:	460b      	movcs	r3, r1
   21ba8:	1ad3      	subs	r3, r2, r3
   21baa:	607b      	str	r3, [r7, #4]
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   21bac:	f107 0308 	add.w	r3, r7, #8
   21bb0:	687a      	ldr	r2, [r7, #4]
   21bb2:	4619      	mov	r1, r3
   21bb4:	6b78      	ldr	r0, [r7, #52]	; 0x34
   21bb6:	f7ff ff53 	bl	21a60 <data_alloc>
   21bba:	4602      	mov	r2, r0
   21bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21bbe:	611a      	str	r2, [r3, #16]
		if (!buf->__buf) {
   21bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21bc2:	691b      	ldr	r3, [r3, #16]
   21bc4:	2b00      	cmp	r3, #0
   21bc6:	d107      	bne.n	21bd8 <net_buf_alloc_len+0x10c>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
   21bc8:	6b78      	ldr	r0, [r7, #52]	; 0x34
   21bca:	f7ff fed7 	bl	2197c <net_buf_destroy>
			return NULL;
   21bce:	2300      	movs	r3, #0
   21bd0:	e013      	b.n	21bfa <net_buf_alloc_len+0x12e>
		}
	} else {
		buf->__buf = NULL;
   21bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21bd4:	2200      	movs	r2, #0
   21bd6:	611a      	str	r2, [r3, #16]
	}

	buf->ref   = 1U;
   21bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21bda:	2201      	movs	r2, #1
   21bdc:	711a      	strb	r2, [r3, #4]
	buf->flags = 0U;
   21bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21be0:	2200      	movs	r2, #0
   21be2:	715a      	strb	r2, [r3, #5]
	buf->frags = NULL;
   21be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21be6:	2200      	movs	r2, #0
   21be8:	601a      	str	r2, [r3, #0]
	buf->size  = size;
   21bea:	68bb      	ldr	r3, [r7, #8]
   21bec:	b29a      	uxth	r2, r3
   21bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21bf0:	81da      	strh	r2, [r3, #14]
	net_buf_reset(buf);
   21bf2:	6b78      	ldr	r0, [r7, #52]	; 0x34
   21bf4:	f7ff fef5 	bl	219e2 <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
   21bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   21bfa:	4618      	mov	r0, r3
   21bfc:	3738      	adds	r7, #56	; 0x38
   21bfe:	46bd      	mov	sp, r7
   21c00:	bd80      	pop	{r7, pc}

00021c02 <net_buf_alloc_fixed>:
	return net_buf_alloc_len_debug(pool, fixed->data_size, timeout, func,
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
   21c02:	b580      	push	{r7, lr}
   21c04:	b084      	sub	sp, #16
   21c06:	af00      	add	r7, sp, #0
   21c08:	6078      	str	r0, [r7, #4]
   21c0a:	6039      	str	r1, [r7, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   21c0c:	687b      	ldr	r3, [r7, #4]
   21c0e:	699b      	ldr	r3, [r3, #24]
   21c10:	685b      	ldr	r3, [r3, #4]
   21c12:	60fb      	str	r3, [r7, #12]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   21c14:	68fb      	ldr	r3, [r7, #12]
   21c16:	681b      	ldr	r3, [r3, #0]
   21c18:	683a      	ldr	r2, [r7, #0]
   21c1a:	4619      	mov	r1, r3
   21c1c:	6878      	ldr	r0, [r7, #4]
   21c1e:	f7ff ff55 	bl	21acc <net_buf_alloc_len>
   21c22:	4603      	mov	r3, r0
}
   21c24:	4618      	mov	r0, r3
   21c26:	3710      	adds	r7, #16
   21c28:	46bd      	mov	sp, r7
   21c2a:	bd80      	pop	{r7, pc}

00021c2c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   21c2c:	b580      	push	{r7, lr}
   21c2e:	b084      	sub	sp, #16
   21c30:	af00      	add	r7, sp, #0
   21c32:	6078      	str	r0, [r7, #4]
	NET_BUF_ASSERT(buf);

	while (buf) {
   21c34:	e033      	b.n	21c9e <net_buf_unref+0x72>
		struct net_buf *frags = buf->frags;
   21c36:	687b      	ldr	r3, [r7, #4]
   21c38:	681b      	ldr	r3, [r3, #0]
   21c3a:	60fb      	str	r3, [r7, #12]
		}
#endif
		NET_BUF_DBG("buf %p ref %u pool_id %u frags %p", buf, buf->ref,
			    buf->pool_id, buf->frags);

		if (--buf->ref > 0) {
   21c3c:	687b      	ldr	r3, [r7, #4]
   21c3e:	791b      	ldrb	r3, [r3, #4]
   21c40:	3b01      	subs	r3, #1
   21c42:	b2da      	uxtb	r2, r3
   21c44:	687b      	ldr	r3, [r7, #4]
   21c46:	711a      	strb	r2, [r3, #4]
   21c48:	687b      	ldr	r3, [r7, #4]
   21c4a:	791b      	ldrb	r3, [r3, #4]
   21c4c:	2b00      	cmp	r3, #0
   21c4e:	d12a      	bne.n	21ca6 <net_buf_unref+0x7a>
			return;
		}

		if (buf->__buf) {
   21c50:	687b      	ldr	r3, [r7, #4]
   21c52:	691b      	ldr	r3, [r3, #16]
   21c54:	2b00      	cmp	r3, #0
   21c56:	d008      	beq.n	21c6a <net_buf_unref+0x3e>
			data_unref(buf, buf->__buf);
   21c58:	687b      	ldr	r3, [r7, #4]
   21c5a:	691b      	ldr	r3, [r3, #16]
   21c5c:	4619      	mov	r1, r3
   21c5e:	6878      	ldr	r0, [r7, #4]
   21c60:	f7ff ff17 	bl	21a92 <data_unref>
			buf->__buf = NULL;
   21c64:	687b      	ldr	r3, [r7, #4]
   21c66:	2200      	movs	r2, #0
   21c68:	611a      	str	r2, [r3, #16]
		}

		buf->data = NULL;
   21c6a:	687b      	ldr	r3, [r7, #4]
   21c6c:	2200      	movs	r2, #0
   21c6e:	609a      	str	r2, [r3, #8]
		buf->frags = NULL;
   21c70:	687b      	ldr	r3, [r7, #4]
   21c72:	2200      	movs	r2, #0
   21c74:	601a      	str	r2, [r3, #0]

		pool = net_buf_pool_get(buf->pool_id);
   21c76:	687b      	ldr	r3, [r7, #4]
   21c78:	799b      	ldrb	r3, [r3, #6]
   21c7a:	4618      	mov	r0, r3
   21c7c:	f7f0 fc0e 	bl	1249c <net_buf_pool_get>
   21c80:	60b8      	str	r0, [r7, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   21c82:	68bb      	ldr	r3, [r7, #8]
   21c84:	695b      	ldr	r3, [r3, #20]
   21c86:	2b00      	cmp	r3, #0
   21c88:	d004      	beq.n	21c94 <net_buf_unref+0x68>
			pool->destroy(buf);
   21c8a:	68bb      	ldr	r3, [r7, #8]
   21c8c:	695b      	ldr	r3, [r3, #20]
   21c8e:	6878      	ldr	r0, [r7, #4]
   21c90:	4798      	blx	r3
   21c92:	e002      	b.n	21c9a <net_buf_unref+0x6e>
		} else {
			net_buf_destroy(buf);
   21c94:	6878      	ldr	r0, [r7, #4]
   21c96:	f7ff fe71 	bl	2197c <net_buf_destroy>
		}

		buf = frags;
   21c9a:	68fb      	ldr	r3, [r7, #12]
   21c9c:	607b      	str	r3, [r7, #4]
	while (buf) {
   21c9e:	687b      	ldr	r3, [r7, #4]
   21ca0:	2b00      	cmp	r3, #0
   21ca2:	d1c8      	bne.n	21c36 <net_buf_unref+0xa>
   21ca4:	e000      	b.n	21ca8 <net_buf_unref+0x7c>
			return;
   21ca6:	bf00      	nop
	}
}
   21ca8:	3710      	adds	r7, #16
   21caa:	46bd      	mov	sp, r7
   21cac:	bd80      	pop	{r7, pc}

00021cae <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   21cae:	b480      	push	{r7}
   21cb0:	b083      	sub	sp, #12
   21cb2:	af00      	add	r7, sp, #0
   21cb4:	6078      	str	r0, [r7, #4]
	NET_BUF_ASSERT(buf);

	while (buf->frags) {
   21cb6:	e002      	b.n	21cbe <net_buf_frag_last+0x10>
		buf = buf->frags;
   21cb8:	687b      	ldr	r3, [r7, #4]
   21cba:	681b      	ldr	r3, [r3, #0]
   21cbc:	607b      	str	r3, [r7, #4]
	while (buf->frags) {
   21cbe:	687b      	ldr	r3, [r7, #4]
   21cc0:	681b      	ldr	r3, [r3, #0]
   21cc2:	2b00      	cmp	r3, #0
   21cc4:	d1f8      	bne.n	21cb8 <net_buf_frag_last+0xa>
	}

	return buf;
   21cc6:	687b      	ldr	r3, [r7, #4]
}
   21cc8:	4618      	mov	r0, r3
   21cca:	370c      	adds	r7, #12
   21ccc:	46bd      	mov	sp, r7
   21cce:	bc80      	pop	{r7}
   21cd0:	4770      	bx	lr

00021cd2 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   21cd2:	b580      	push	{r7, lr}
   21cd4:	b082      	sub	sp, #8
   21cd6:	af00      	add	r7, sp, #0
   21cd8:	6078      	str	r0, [r7, #4]
   21cda:	6039      	str	r1, [r7, #0]
	NET_BUF_ASSERT(parent);
	NET_BUF_ASSERT(frag);

	if (parent->frags) {
   21cdc:	687b      	ldr	r3, [r7, #4]
   21cde:	681b      	ldr	r3, [r3, #0]
   21ce0:	2b00      	cmp	r3, #0
   21ce2:	d006      	beq.n	21cf2 <net_buf_frag_insert+0x20>
		net_buf_frag_last(frag)->frags = parent->frags;
   21ce4:	6838      	ldr	r0, [r7, #0]
   21ce6:	f7ff ffe2 	bl	21cae <net_buf_frag_last>
   21cea:	4602      	mov	r2, r0
   21cec:	687b      	ldr	r3, [r7, #4]
   21cee:	681b      	ldr	r3, [r3, #0]
   21cf0:	6013      	str	r3, [r2, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   21cf2:	687b      	ldr	r3, [r7, #4]
   21cf4:	683a      	ldr	r2, [r7, #0]
   21cf6:	601a      	str	r2, [r3, #0]
}
   21cf8:	bf00      	nop
   21cfa:	3708      	adds	r7, #8
   21cfc:	46bd      	mov	sp, r7
   21cfe:	bd80      	pop	{r7, pc}

00021d00 <net_buf_simple_add>:
#define NET_BUF_SIMPLE_INFO(fmt, ...)
#define NET_BUF_SIMPLE_ASSERT(cond)
#endif /* CONFIG_NET_BUF_SIMPLE_LOG */

void *net_buf_simple_add(struct net_buf_simple *buf, size_t len)
{
   21d00:	b580      	push	{r7, lr}
   21d02:	b084      	sub	sp, #16
   21d04:	af00      	add	r7, sp, #0
   21d06:	6078      	str	r0, [r7, #4]
   21d08:	6039      	str	r1, [r7, #0]
	u8_t *tail = net_buf_simple_tail(buf);
   21d0a:	6878      	ldr	r0, [r7, #4]
   21d0c:	f7ff fe28 	bl	21960 <net_buf_simple_tail>
   21d10:	60f8      	str	r0, [r7, #12]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   21d12:	687b      	ldr	r3, [r7, #4]
   21d14:	889a      	ldrh	r2, [r3, #4]
   21d16:	683b      	ldr	r3, [r7, #0]
   21d18:	b29b      	uxth	r3, r3
   21d1a:	4413      	add	r3, r2
   21d1c:	b29a      	uxth	r2, r3
   21d1e:	687b      	ldr	r3, [r7, #4]
   21d20:	809a      	strh	r2, [r3, #4]
	return tail;
   21d22:	68fb      	ldr	r3, [r7, #12]
}
   21d24:	4618      	mov	r0, r3
   21d26:	3710      	adds	r7, #16
   21d28:	46bd      	mov	sp, r7
   21d2a:	bd80      	pop	{r7, pc}

00021d2c <net_buf_simple_pull>:

	*data = val;
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   21d2c:	b480      	push	{r7}
   21d2e:	b083      	sub	sp, #12
   21d30:	af00      	add	r7, sp, #0
   21d32:	6078      	str	r0, [r7, #4]
   21d34:	6039      	str	r1, [r7, #0]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   21d36:	687b      	ldr	r3, [r7, #4]
   21d38:	889a      	ldrh	r2, [r3, #4]
   21d3a:	683b      	ldr	r3, [r7, #0]
   21d3c:	b29b      	uxth	r3, r3
   21d3e:	1ad3      	subs	r3, r2, r3
   21d40:	b29a      	uxth	r2, r3
   21d42:	687b      	ldr	r3, [r7, #4]
   21d44:	809a      	strh	r2, [r3, #4]
	return buf->data += len;
   21d46:	687b      	ldr	r3, [r7, #4]
   21d48:	681a      	ldr	r2, [r3, #0]
   21d4a:	683b      	ldr	r3, [r7, #0]
   21d4c:	441a      	add	r2, r3
   21d4e:	687b      	ldr	r3, [r7, #4]
   21d50:	601a      	str	r2, [r3, #0]
   21d52:	687b      	ldr	r3, [r7, #4]
   21d54:	681b      	ldr	r3, [r3, #0]
}
   21d56:	4618      	mov	r0, r3
   21d58:	370c      	adds	r7, #12
   21d5a:	46bd      	mov	sp, r7
   21d5c:	bc80      	pop	{r7}
   21d5e:	4770      	bx	lr

00021d60 <sys_slist_init>:
{
   21d60:	b480      	push	{r7}
   21d62:	b083      	sub	sp, #12
   21d64:	af00      	add	r7, sp, #0
   21d66:	6078      	str	r0, [r7, #4]
	list->head = NULL;
   21d68:	687b      	ldr	r3, [r7, #4]
   21d6a:	2200      	movs	r2, #0
   21d6c:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   21d6e:	687b      	ldr	r3, [r7, #4]
   21d70:	2200      	movs	r2, #0
   21d72:	605a      	str	r2, [r3, #4]
}
   21d74:	bf00      	nop
   21d76:	370c      	adds	r7, #12
   21d78:	46bd      	mov	sp, r7
   21d7a:	bc80      	pop	{r7}
   21d7c:	4770      	bx	lr

00021d7e <z_snode_next_peek>:
{
   21d7e:	b480      	push	{r7}
   21d80:	b083      	sub	sp, #12
   21d82:	af00      	add	r7, sp, #0
   21d84:	6078      	str	r0, [r7, #4]
	return node->next;
   21d86:	687b      	ldr	r3, [r7, #4]
   21d88:	681b      	ldr	r3, [r3, #0]
}
   21d8a:	4618      	mov	r0, r3
   21d8c:	370c      	adds	r7, #12
   21d8e:	46bd      	mov	sp, r7
   21d90:	bc80      	pop	{r7}
   21d92:	4770      	bx	lr

00021d94 <z_snode_next_set>:
{
   21d94:	b480      	push	{r7}
   21d96:	b083      	sub	sp, #12
   21d98:	af00      	add	r7, sp, #0
   21d9a:	6078      	str	r0, [r7, #4]
   21d9c:	6039      	str	r1, [r7, #0]
	parent->next = child;
   21d9e:	687b      	ldr	r3, [r7, #4]
   21da0:	683a      	ldr	r2, [r7, #0]
   21da2:	601a      	str	r2, [r3, #0]
}
   21da4:	bf00      	nop
   21da6:	370c      	adds	r7, #12
   21da8:	46bd      	mov	sp, r7
   21daa:	bc80      	pop	{r7}
   21dac:	4770      	bx	lr

00021dae <z_slist_head_set>:
{
   21dae:	b480      	push	{r7}
   21db0:	b083      	sub	sp, #12
   21db2:	af00      	add	r7, sp, #0
   21db4:	6078      	str	r0, [r7, #4]
   21db6:	6039      	str	r1, [r7, #0]
	list->head = node;
   21db8:	687b      	ldr	r3, [r7, #4]
   21dba:	683a      	ldr	r2, [r7, #0]
   21dbc:	601a      	str	r2, [r3, #0]
}
   21dbe:	bf00      	nop
   21dc0:	370c      	adds	r7, #12
   21dc2:	46bd      	mov	sp, r7
   21dc4:	bc80      	pop	{r7}
   21dc6:	4770      	bx	lr

00021dc8 <z_slist_tail_set>:
{
   21dc8:	b480      	push	{r7}
   21dca:	b083      	sub	sp, #12
   21dcc:	af00      	add	r7, sp, #0
   21dce:	6078      	str	r0, [r7, #4]
   21dd0:	6039      	str	r1, [r7, #0]
	list->tail = node;
   21dd2:	687b      	ldr	r3, [r7, #4]
   21dd4:	683a      	ldr	r2, [r7, #0]
   21dd6:	605a      	str	r2, [r3, #4]
}
   21dd8:	bf00      	nop
   21dda:	370c      	adds	r7, #12
   21ddc:	46bd      	mov	sp, r7
   21dde:	bc80      	pop	{r7}
   21de0:	4770      	bx	lr

00021de2 <sys_slist_peek_head>:
{
   21de2:	b480      	push	{r7}
   21de4:	b083      	sub	sp, #12
   21de6:	af00      	add	r7, sp, #0
   21de8:	6078      	str	r0, [r7, #4]
	return list->head;
   21dea:	687b      	ldr	r3, [r7, #4]
   21dec:	681b      	ldr	r3, [r3, #0]
}
   21dee:	4618      	mov	r0, r3
   21df0:	370c      	adds	r7, #12
   21df2:	46bd      	mov	sp, r7
   21df4:	bc80      	pop	{r7}
   21df6:	4770      	bx	lr

00021df8 <sys_slist_peek_tail>:
{
   21df8:	b480      	push	{r7}
   21dfa:	b083      	sub	sp, #12
   21dfc:	af00      	add	r7, sp, #0
   21dfe:	6078      	str	r0, [r7, #4]
	return list->tail;
   21e00:	687b      	ldr	r3, [r7, #4]
   21e02:	685b      	ldr	r3, [r3, #4]
}
   21e04:	4618      	mov	r0, r3
   21e06:	370c      	adds	r7, #12
   21e08:	46bd      	mov	sp, r7
   21e0a:	bc80      	pop	{r7}
   21e0c:	4770      	bx	lr

00021e0e <sys_slist_is_empty>:
Z_GENLIST_IS_EMPTY(slist)
   21e0e:	b580      	push	{r7, lr}
   21e10:	b082      	sub	sp, #8
   21e12:	af00      	add	r7, sp, #0
   21e14:	6078      	str	r0, [r7, #4]
   21e16:	6878      	ldr	r0, [r7, #4]
   21e18:	f7ff ffe3 	bl	21de2 <sys_slist_peek_head>
   21e1c:	4603      	mov	r3, r0
   21e1e:	2b00      	cmp	r3, #0
   21e20:	bf0c      	ite	eq
   21e22:	2301      	moveq	r3, #1
   21e24:	2300      	movne	r3, #0
   21e26:	b2db      	uxtb	r3, r3
   21e28:	4618      	mov	r0, r3
   21e2a:	3708      	adds	r7, #8
   21e2c:	46bd      	mov	sp, r7
   21e2e:	bd80      	pop	{r7, pc}

00021e30 <sys_slist_peek_next_no_check>:
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21e30:	b580      	push	{r7, lr}
   21e32:	b082      	sub	sp, #8
   21e34:	af00      	add	r7, sp, #0
   21e36:	6078      	str	r0, [r7, #4]
   21e38:	6878      	ldr	r0, [r7, #4]
   21e3a:	f7ff ffa0 	bl	21d7e <z_snode_next_peek>
   21e3e:	4603      	mov	r3, r0
   21e40:	4618      	mov	r0, r3
   21e42:	3708      	adds	r7, #8
   21e44:	46bd      	mov	sp, r7
   21e46:	bd80      	pop	{r7, pc}

00021e48 <sys_slist_peek_next>:
Z_GENLIST_PEEK_NEXT(slist, snode)
   21e48:	b580      	push	{r7, lr}
   21e4a:	b082      	sub	sp, #8
   21e4c:	af00      	add	r7, sp, #0
   21e4e:	6078      	str	r0, [r7, #4]
   21e50:	687b      	ldr	r3, [r7, #4]
   21e52:	2b00      	cmp	r3, #0
   21e54:	d004      	beq.n	21e60 <sys_slist_peek_next+0x18>
   21e56:	6878      	ldr	r0, [r7, #4]
   21e58:	f7ff ffea 	bl	21e30 <sys_slist_peek_next_no_check>
   21e5c:	4603      	mov	r3, r0
   21e5e:	e000      	b.n	21e62 <sys_slist_peek_next+0x1a>
   21e60:	2300      	movs	r3, #0
   21e62:	4618      	mov	r0, r3
   21e64:	3708      	adds	r7, #8
   21e66:	46bd      	mov	sp, r7
   21e68:	bd80      	pop	{r7, pc}

00021e6a <sys_slist_prepend>:
Z_GENLIST_PREPEND(slist, snode)
   21e6a:	b580      	push	{r7, lr}
   21e6c:	b082      	sub	sp, #8
   21e6e:	af00      	add	r7, sp, #0
   21e70:	6078      	str	r0, [r7, #4]
   21e72:	6039      	str	r1, [r7, #0]
   21e74:	6878      	ldr	r0, [r7, #4]
   21e76:	f7ff ffb4 	bl	21de2 <sys_slist_peek_head>
   21e7a:	4603      	mov	r3, r0
   21e7c:	4619      	mov	r1, r3
   21e7e:	6838      	ldr	r0, [r7, #0]
   21e80:	f7ff ff88 	bl	21d94 <z_snode_next_set>
   21e84:	6839      	ldr	r1, [r7, #0]
   21e86:	6878      	ldr	r0, [r7, #4]
   21e88:	f7ff ff91 	bl	21dae <z_slist_head_set>
   21e8c:	6878      	ldr	r0, [r7, #4]
   21e8e:	f7ff ffb3 	bl	21df8 <sys_slist_peek_tail>
   21e92:	4603      	mov	r3, r0
   21e94:	2b00      	cmp	r3, #0
   21e96:	d107      	bne.n	21ea8 <sys_slist_prepend+0x3e>
   21e98:	6878      	ldr	r0, [r7, #4]
   21e9a:	f7ff ffa2 	bl	21de2 <sys_slist_peek_head>
   21e9e:	4603      	mov	r3, r0
   21ea0:	4619      	mov	r1, r3
   21ea2:	6878      	ldr	r0, [r7, #4]
   21ea4:	f7ff ff90 	bl	21dc8 <z_slist_tail_set>
   21ea8:	bf00      	nop
   21eaa:	3708      	adds	r7, #8
   21eac:	46bd      	mov	sp, r7
   21eae:	bd80      	pop	{r7, pc}

00021eb0 <sys_slist_append>:
Z_GENLIST_APPEND(slist, snode)
   21eb0:	b580      	push	{r7, lr}
   21eb2:	b082      	sub	sp, #8
   21eb4:	af00      	add	r7, sp, #0
   21eb6:	6078      	str	r0, [r7, #4]
   21eb8:	6039      	str	r1, [r7, #0]
   21eba:	2100      	movs	r1, #0
   21ebc:	6838      	ldr	r0, [r7, #0]
   21ebe:	f7ff ff69 	bl	21d94 <z_snode_next_set>
   21ec2:	6878      	ldr	r0, [r7, #4]
   21ec4:	f7ff ff98 	bl	21df8 <sys_slist_peek_tail>
   21ec8:	4603      	mov	r3, r0
   21eca:	2b00      	cmp	r3, #0
   21ecc:	d108      	bne.n	21ee0 <sys_slist_append+0x30>
   21ece:	6839      	ldr	r1, [r7, #0]
   21ed0:	6878      	ldr	r0, [r7, #4]
   21ed2:	f7ff ff79 	bl	21dc8 <z_slist_tail_set>
   21ed6:	6839      	ldr	r1, [r7, #0]
   21ed8:	6878      	ldr	r0, [r7, #4]
   21eda:	f7ff ff68 	bl	21dae <z_slist_head_set>
   21ede:	e00b      	b.n	21ef8 <sys_slist_append+0x48>
   21ee0:	6878      	ldr	r0, [r7, #4]
   21ee2:	f7ff ff89 	bl	21df8 <sys_slist_peek_tail>
   21ee6:	4603      	mov	r3, r0
   21ee8:	6839      	ldr	r1, [r7, #0]
   21eea:	4618      	mov	r0, r3
   21eec:	f7ff ff52 	bl	21d94 <z_snode_next_set>
   21ef0:	6839      	ldr	r1, [r7, #0]
   21ef2:	6878      	ldr	r0, [r7, #4]
   21ef4:	f7ff ff68 	bl	21dc8 <z_slist_tail_set>
   21ef8:	bf00      	nop
   21efa:	3708      	adds	r7, #8
   21efc:	46bd      	mov	sp, r7
   21efe:	bd80      	pop	{r7, pc}

00021f00 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   21f00:	b580      	push	{r7, lr}
   21f02:	b084      	sub	sp, #16
   21f04:	af00      	add	r7, sp, #0
   21f06:	60f8      	str	r0, [r7, #12]
   21f08:	60b9      	str	r1, [r7, #8]
   21f0a:	607a      	str	r2, [r7, #4]
   21f0c:	68bb      	ldr	r3, [r7, #8]
   21f0e:	2b00      	cmp	r3, #0
   21f10:	d117      	bne.n	21f42 <sys_slist_remove+0x42>
   21f12:	6878      	ldr	r0, [r7, #4]
   21f14:	f7ff ff33 	bl	21d7e <z_snode_next_peek>
   21f18:	4603      	mov	r3, r0
   21f1a:	4619      	mov	r1, r3
   21f1c:	68f8      	ldr	r0, [r7, #12]
   21f1e:	f7ff ff46 	bl	21dae <z_slist_head_set>
   21f22:	68f8      	ldr	r0, [r7, #12]
   21f24:	f7ff ff68 	bl	21df8 <sys_slist_peek_tail>
   21f28:	4602      	mov	r2, r0
   21f2a:	687b      	ldr	r3, [r7, #4]
   21f2c:	4293      	cmp	r3, r2
   21f2e:	d11b      	bne.n	21f68 <sys_slist_remove+0x68>
   21f30:	68f8      	ldr	r0, [r7, #12]
   21f32:	f7ff ff56 	bl	21de2 <sys_slist_peek_head>
   21f36:	4603      	mov	r3, r0
   21f38:	4619      	mov	r1, r3
   21f3a:	68f8      	ldr	r0, [r7, #12]
   21f3c:	f7ff ff44 	bl	21dc8 <z_slist_tail_set>
   21f40:	e012      	b.n	21f68 <sys_slist_remove+0x68>
   21f42:	6878      	ldr	r0, [r7, #4]
   21f44:	f7ff ff1b 	bl	21d7e <z_snode_next_peek>
   21f48:	4603      	mov	r3, r0
   21f4a:	4619      	mov	r1, r3
   21f4c:	68b8      	ldr	r0, [r7, #8]
   21f4e:	f7ff ff21 	bl	21d94 <z_snode_next_set>
   21f52:	68f8      	ldr	r0, [r7, #12]
   21f54:	f7ff ff50 	bl	21df8 <sys_slist_peek_tail>
   21f58:	4602      	mov	r2, r0
   21f5a:	687b      	ldr	r3, [r7, #4]
   21f5c:	4293      	cmp	r3, r2
   21f5e:	d103      	bne.n	21f68 <sys_slist_remove+0x68>
   21f60:	68b9      	ldr	r1, [r7, #8]
   21f62:	68f8      	ldr	r0, [r7, #12]
   21f64:	f7ff ff30 	bl	21dc8 <z_slist_tail_set>
   21f68:	2100      	movs	r1, #0
   21f6a:	6878      	ldr	r0, [r7, #4]
   21f6c:	f7ff ff12 	bl	21d94 <z_snode_next_set>
   21f70:	bf00      	nop
   21f72:	3710      	adds	r7, #16
   21f74:	46bd      	mov	sp, r7
   21f76:	bd80      	pop	{r7, pc}

00021f78 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21f78:	b580      	push	{r7, lr}
   21f7a:	b084      	sub	sp, #16
   21f7c:	af00      	add	r7, sp, #0
   21f7e:	6078      	str	r0, [r7, #4]
   21f80:	6039      	str	r1, [r7, #0]
   21f82:	2300      	movs	r3, #0
   21f84:	60fb      	str	r3, [r7, #12]
   21f86:	6878      	ldr	r0, [r7, #4]
   21f88:	f7ff ff2b 	bl	21de2 <sys_slist_peek_head>
   21f8c:	60b8      	str	r0, [r7, #8]
   21f8e:	e010      	b.n	21fb2 <sys_slist_find_and_remove+0x3a>
   21f90:	68ba      	ldr	r2, [r7, #8]
   21f92:	683b      	ldr	r3, [r7, #0]
   21f94:	429a      	cmp	r2, r3
   21f96:	d106      	bne.n	21fa6 <sys_slist_find_and_remove+0x2e>
   21f98:	683a      	ldr	r2, [r7, #0]
   21f9a:	68f9      	ldr	r1, [r7, #12]
   21f9c:	6878      	ldr	r0, [r7, #4]
   21f9e:	f7ff ffaf 	bl	21f00 <sys_slist_remove>
   21fa2:	2301      	movs	r3, #1
   21fa4:	e009      	b.n	21fba <sys_slist_find_and_remove+0x42>
   21fa6:	68bb      	ldr	r3, [r7, #8]
   21fa8:	60fb      	str	r3, [r7, #12]
   21faa:	68b8      	ldr	r0, [r7, #8]
   21fac:	f7ff ff4c 	bl	21e48 <sys_slist_peek_next>
   21fb0:	60b8      	str	r0, [r7, #8]
   21fb2:	68bb      	ldr	r3, [r7, #8]
   21fb4:	2b00      	cmp	r3, #0
   21fb6:	d1eb      	bne.n	21f90 <sys_slist_find_and_remove+0x18>
   21fb8:	2300      	movs	r3, #0
   21fba:	4618      	mov	r0, r3
   21fbc:	3710      	adds	r7, #16
   21fbe:	46bd      	mov	sp, r7
   21fc0:	bd80      	pop	{r7, pc}

00021fc2 <_is_user_context>:
{
   21fc2:	b480      	push	{r7}
   21fc4:	af00      	add	r7, sp, #0
	return false;
   21fc6:	2300      	movs	r3, #0
}
   21fc8:	4618      	mov	r0, r3
   21fca:	46bd      	mov	sp, r7
   21fcc:	bc80      	pop	{r7}
   21fce:	4770      	bx	lr

00021fd0 <__ticks_to_ms>:
	return 0;
#endif
}

static inline u64_t __ticks_to_ms(s64_t ticks)
{
   21fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   21fd2:	b083      	sub	sp, #12
   21fd4:	af00      	add	r7, sp, #0
   21fd6:	e9c7 0100 	strd	r0, r1, [r7]
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	return (u64_t)ticks * MSEC_PER_SEC / (u64_t)CONFIG_SYS_CLOCK_TICKS_PER_SEC;
   21fda:	e9d7 1200 	ldrd	r1, r2, [r7]
   21fde:	460b      	mov	r3, r1
   21fe0:	4614      	mov	r4, r2
   21fe2:	f04f 0500 	mov.w	r5, #0
   21fe6:	f04f 0600 	mov.w	r6, #0
   21fea:	0166      	lsls	r6, r4, #5
   21fec:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
   21ff0:	015d      	lsls	r5, r3, #5
   21ff2:	462b      	mov	r3, r5
   21ff4:	4634      	mov	r4, r6
   21ff6:	1a5b      	subs	r3, r3, r1
   21ff8:	eb64 0402 	sbc.w	r4, r4, r2
   21ffc:	f04f 0500 	mov.w	r5, #0
   22000:	f04f 0600 	mov.w	r6, #0
   22004:	00a6      	lsls	r6, r4, #2
   22006:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
   2200a:	009d      	lsls	r5, r3, #2
   2200c:	462b      	mov	r3, r5
   2200e:	4634      	mov	r4, r6
   22010:	185b      	adds	r3, r3, r1
   22012:	eb42 0404 	adc.w	r4, r2, r4
   22016:	f04f 0100 	mov.w	r1, #0
   2201a:	f04f 0200 	mov.w	r2, #0
   2201e:	00e2      	lsls	r2, r4, #3
   22020:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   22024:	00d9      	lsls	r1, r3, #3
   22026:	460b      	mov	r3, r1
   22028:	4614      	mov	r4, r2
   2202a:	4618      	mov	r0, r3
   2202c:	4621      	mov	r1, r4
   2202e:	f04f 0264 	mov.w	r2, #100	; 0x64
   22032:	f04f 0300 	mov.w	r3, #0
   22036:	f7de fb87 	bl	748 <__aeabi_uldivmod>
   2203a:	4603      	mov	r3, r0
   2203c:	460c      	mov	r4, r1

#else
	__ASSERT(ticks == 0, "ticks not zero");
	return 0ULL;
#endif
}
   2203e:	4618      	mov	r0, r3
   22040:	4621      	mov	r1, r4
   22042:	370c      	adds	r7, #12
   22044:	46bd      	mov	sp, r7
   22046:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022048 <k_delayed_work_remaining_get>:
{
   22048:	b590      	push	{r4, r7, lr}
   2204a:	b083      	sub	sp, #12
   2204c:	af00      	add	r7, sp, #0
   2204e:	6078      	str	r0, [r7, #4]
	return __ticks_to_ms(z_timeout_remaining(&work->timeout));
   22050:	687b      	ldr	r3, [r7, #4]
   22052:	330c      	adds	r3, #12
   22054:	4618      	mov	r0, r3
   22056:	f7f6 fa3b 	bl	184d0 <z_timeout_remaining>
   2205a:	4603      	mov	r3, r0
   2205c:	ea4f 74e3 	mov.w	r4, r3, asr #31
   22060:	4618      	mov	r0, r3
   22062:	4621      	mov	r1, r4
   22064:	f7ff ffb4 	bl	21fd0 <__ticks_to_ms>
   22068:	4603      	mov	r3, r0
   2206a:	460c      	mov	r4, r1
}
   2206c:	4618      	mov	r0, r3
   2206e:	370c      	adds	r7, #12
   22070:	46bd      	mov	sp, r7
   22072:	bd90      	pop	{r4, r7, pc}

00022074 <k_uptime_get>:
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   22074:	b598      	push	{r3, r4, r7, lr}
   22076:	af00      	add	r7, sp, #0
   22078:	f009 ff6f 	bl	2bf5a <z_impl_k_uptime_get>
   2207c:	4603      	mov	r3, r0
   2207e:	460c      	mov	r4, r1
   22080:	4618      	mov	r0, r3
   22082:	4621      	mov	r1, r4
   22084:	bd98      	pop	{r3, r4, r7, pc}

00022086 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   22086:	b480      	push	{r7}
   22088:	b085      	sub	sp, #20
   2208a:	af00      	add	r7, sp, #0
   2208c:	6078      	str	r0, [r7, #4]
	size_t bytes = 0;
   2208e:	2300      	movs	r3, #0
   22090:	60fb      	str	r3, [r7, #12]

	while (buf) {
   22092:	e008      	b.n	220a6 <net_buf_frags_len+0x20>
		bytes += buf->len;
   22094:	687b      	ldr	r3, [r7, #4]
   22096:	899b      	ldrh	r3, [r3, #12]
   22098:	461a      	mov	r2, r3
   2209a:	68fb      	ldr	r3, [r7, #12]
   2209c:	4413      	add	r3, r2
   2209e:	60fb      	str	r3, [r7, #12]
		buf = buf->frags;
   220a0:	687b      	ldr	r3, [r7, #4]
   220a2:	681b      	ldr	r3, [r3, #0]
   220a4:	607b      	str	r3, [r7, #4]
	while (buf) {
   220a6:	687b      	ldr	r3, [r7, #4]
   220a8:	2b00      	cmp	r3, #0
   220aa:	d1f3      	bne.n	22094 <net_buf_frags_len+0xe>
	}

	return bytes;
   220ac:	68fb      	ldr	r3, [r7, #12]
}
   220ae:	4618      	mov	r0, r3
   220b0:	3714      	adds	r7, #20
   220b2:	46bd      	mov	sp, r7
   220b4:	bc80      	pop	{r7}
   220b6:	4770      	bx	lr

000220b8 <net_ipv4_is_addr_loopback>:
{
   220b8:	b480      	push	{r7}
   220ba:	b083      	sub	sp, #12
   220bc:	af00      	add	r7, sp, #0
   220be:	6078      	str	r0, [r7, #4]
	return addr->s4_addr[0] == 127U;
   220c0:	687b      	ldr	r3, [r7, #4]
   220c2:	781b      	ldrb	r3, [r3, #0]
   220c4:	2b7f      	cmp	r3, #127	; 0x7f
   220c6:	bf0c      	ite	eq
   220c8:	2301      	moveq	r3, #1
   220ca:	2300      	movne	r3, #0
   220cc:	b2db      	uxtb	r3, r3
}
   220ce:	4618      	mov	r0, r3
   220d0:	370c      	adds	r7, #12
   220d2:	46bd      	mov	sp, r7
   220d4:	bc80      	pop	{r7}
   220d6:	4770      	bx	lr

000220d8 <net_ipv4_is_addr_unspecified>:
{
   220d8:	b480      	push	{r7}
   220da:	b085      	sub	sp, #20
   220dc:	af00      	add	r7, sp, #0
   220de:	6078      	str	r0, [r7, #4]
	return UNALIGNED_GET(&addr->s_addr) == 0;
   220e0:	687b      	ldr	r3, [r7, #4]
   220e2:	60fb      	str	r3, [r7, #12]
   220e4:	68fb      	ldr	r3, [r7, #12]
   220e6:	681b      	ldr	r3, [r3, #0]
   220e8:	2b00      	cmp	r3, #0
   220ea:	bf0c      	ite	eq
   220ec:	2301      	moveq	r3, #1
   220ee:	2300      	movne	r3, #0
   220f0:	b2db      	uxtb	r3, r3
}
   220f2:	4618      	mov	r0, r3
   220f4:	3714      	adds	r7, #20
   220f6:	46bd      	mov	sp, r7
   220f8:	bc80      	pop	{r7}
   220fa:	4770      	bx	lr

000220fc <net_ipv4_is_addr_mcast>:
{
   220fc:	b480      	push	{r7}
   220fe:	b087      	sub	sp, #28
   22100:	af00      	add	r7, sp, #0
   22102:	6078      	str	r0, [r7, #4]
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xE0000000) == 0xE0000000;
   22104:	687b      	ldr	r3, [r7, #4]
   22106:	617b      	str	r3, [r7, #20]
   22108:	697b      	ldr	r3, [r7, #20]
   2210a:	681b      	ldr	r3, [r3, #0]
   2210c:	0e1b      	lsrs	r3, r3, #24
   2210e:	b2da      	uxtb	r2, r3
   22110:	687b      	ldr	r3, [r7, #4]
   22112:	613b      	str	r3, [r7, #16]
   22114:	693b      	ldr	r3, [r7, #16]
   22116:	681b      	ldr	r3, [r3, #0]
   22118:	0a1b      	lsrs	r3, r3, #8
   2211a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   2211e:	431a      	orrs	r2, r3
   22120:	687b      	ldr	r3, [r7, #4]
   22122:	60fb      	str	r3, [r7, #12]
   22124:	68fb      	ldr	r3, [r7, #12]
   22126:	681b      	ldr	r3, [r3, #0]
   22128:	021b      	lsls	r3, r3, #8
   2212a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   2212e:	431a      	orrs	r2, r3
   22130:	687b      	ldr	r3, [r7, #4]
   22132:	60bb      	str	r3, [r7, #8]
   22134:	68bb      	ldr	r3, [r7, #8]
   22136:	681b      	ldr	r3, [r3, #0]
   22138:	061b      	lsls	r3, r3, #24
   2213a:	4313      	orrs	r3, r2
   2213c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   22140:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
   22144:	bf0c      	ite	eq
   22146:	2301      	moveq	r3, #1
   22148:	2300      	movne	r3, #0
   2214a:	b2db      	uxtb	r3, r3
}
   2214c:	4618      	mov	r0, r3
   2214e:	371c      	adds	r7, #28
   22150:	46bd      	mov	sp, r7
   22152:	bc80      	pop	{r7}
   22154:	4770      	bx	lr

00022156 <net_ipv4_addr_cmp>:
{
   22156:	b480      	push	{r7}
   22158:	b085      	sub	sp, #20
   2215a:	af00      	add	r7, sp, #0
   2215c:	6078      	str	r0, [r7, #4]
   2215e:	6039      	str	r1, [r7, #0]
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   22160:	687b      	ldr	r3, [r7, #4]
   22162:	60fb      	str	r3, [r7, #12]
   22164:	68fb      	ldr	r3, [r7, #12]
   22166:	681a      	ldr	r2, [r3, #0]
   22168:	683b      	ldr	r3, [r7, #0]
   2216a:	60bb      	str	r3, [r7, #8]
   2216c:	68bb      	ldr	r3, [r7, #8]
   2216e:	681b      	ldr	r3, [r3, #0]
   22170:	429a      	cmp	r2, r3
   22172:	bf0c      	ite	eq
   22174:	2301      	moveq	r3, #1
   22176:	2300      	movne	r3, #0
   22178:	b2db      	uxtb	r3, r3
}
   2217a:	4618      	mov	r0, r3
   2217c:	3714      	adds	r7, #20
   2217e:	46bd      	mov	sp, r7
   22180:	bc80      	pop	{r7}
   22182:	4770      	bx	lr

00022184 <net_ipv4_is_addr_bcast>:
{
   22184:	b580      	push	{r7, lr}
   22186:	b082      	sub	sp, #8
   22188:	af00      	add	r7, sp, #0
   2218a:	6078      	str	r0, [r7, #4]
   2218c:	6039      	str	r1, [r7, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   2218e:	f7f1 ffd5 	bl	1413c <net_ipv4_broadcast_address>
   22192:	4603      	mov	r3, r0
   22194:	4619      	mov	r1, r3
   22196:	6838      	ldr	r0, [r7, #0]
   22198:	f7ff ffdd 	bl	22156 <net_ipv4_addr_cmp>
   2219c:	4603      	mov	r3, r0
   2219e:	2b00      	cmp	r3, #0
   221a0:	d001      	beq.n	221a6 <net_ipv4_is_addr_bcast+0x22>
		return true;
   221a2:	2301      	movs	r3, #1
   221a4:	e004      	b.n	221b0 <net_ipv4_is_addr_bcast+0x2c>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   221a6:	6839      	ldr	r1, [r7, #0]
   221a8:	6878      	ldr	r0, [r7, #4]
   221aa:	f7f1 f951 	bl	13450 <net_if_ipv4_is_addr_bcast>
   221ae:	4603      	mov	r3, r0
}
   221b0:	4618      	mov	r0, r3
   221b2:	3708      	adds	r7, #8
   221b4:	46bd      	mov	sp, r7
   221b6:	bd80      	pop	{r7, pc}

000221b8 <net_ipv4_is_my_addr>:
{
   221b8:	b580      	push	{r7, lr}
   221ba:	b084      	sub	sp, #16
   221bc:	af00      	add	r7, sp, #0
   221be:	6078      	str	r0, [r7, #4]
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
   221c0:	2100      	movs	r1, #0
   221c2:	6878      	ldr	r0, [r7, #4]
   221c4:	f7f1 fa10 	bl	135e8 <net_if_ipv4_addr_lookup>
   221c8:	4603      	mov	r3, r0
   221ca:	2b00      	cmp	r3, #0
   221cc:	bf14      	ite	ne
   221ce:	2301      	movne	r3, #1
   221d0:	2300      	moveq	r3, #0
   221d2:	73fb      	strb	r3, [r7, #15]
	if (!ret) {
   221d4:	7bfb      	ldrb	r3, [r7, #15]
   221d6:	f083 0301 	eor.w	r3, r3, #1
   221da:	b2db      	uxtb	r3, r3
   221dc:	2b00      	cmp	r3, #0
   221de:	d005      	beq.n	221ec <net_ipv4_is_my_addr+0x34>
		ret = net_ipv4_is_addr_bcast(NULL, addr);
   221e0:	6879      	ldr	r1, [r7, #4]
   221e2:	2000      	movs	r0, #0
   221e4:	f7ff ffce 	bl	22184 <net_ipv4_is_addr_bcast>
   221e8:	4603      	mov	r3, r0
   221ea:	73fb      	strb	r3, [r7, #15]
	return ret;
   221ec:	7bfb      	ldrb	r3, [r7, #15]
}
   221ee:	4618      	mov	r0, r3
   221f0:	3710      	adds	r7, #16
   221f2:	46bd      	mov	sp, r7
   221f4:	bd80      	pop	{r7, pc}

000221f6 <net_if_get_link_addr>:
 * @param iface Pointer to a network interface structure
 *
 * @return a pointer to the network link address
 */
static inline struct net_linkaddr *net_if_get_link_addr(struct net_if *iface)
{
   221f6:	b480      	push	{r7}
   221f8:	b083      	sub	sp, #12
   221fa:	af00      	add	r7, sp, #0
   221fc:	6078      	str	r0, [r7, #4]
	return &iface->if_dev->link_addr;
   221fe:	687b      	ldr	r3, [r7, #4]
   22200:	681b      	ldr	r3, [r3, #0]
   22202:	3310      	adds	r3, #16
}
   22204:	4618      	mov	r0, r3
   22206:	370c      	adds	r7, #12
   22208:	46bd      	mov	sp, r7
   2220a:	bc80      	pop	{r7}
   2220c:	4770      	bx	lr

0002220e <net_pkt_iface>:
{
   2220e:	b480      	push	{r7}
   22210:	b083      	sub	sp, #12
   22212:	af00      	add	r7, sp, #0
   22214:	6078      	str	r0, [r7, #4]
	return pkt->iface;
   22216:	687b      	ldr	r3, [r7, #4]
   22218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   2221a:	4618      	mov	r0, r3
   2221c:	370c      	adds	r7, #12
   2221e:	46bd      	mov	sp, r7
   22220:	bc80      	pop	{r7}
   22222:	4770      	bx	lr

00022224 <net_pkt_vlan_tag>:
{
   22224:	b480      	push	{r7}
   22226:	b083      	sub	sp, #12
   22228:	af00      	add	r7, sp, #0
   2222a:	6078      	str	r0, [r7, #4]
	return NET_VLAN_TAG_UNSPEC;
   2222c:	f640 73ff 	movw	r3, #4095	; 0xfff
}
   22230:	4618      	mov	r0, r3
   22232:	370c      	adds	r7, #12
   22234:	46bd      	mov	sp, r7
   22236:	bc80      	pop	{r7}
   22238:	4770      	bx	lr

0002223a <net_pkt_set_vlan_tag>:
{
   2223a:	b480      	push	{r7}
   2223c:	b083      	sub	sp, #12
   2223e:	af00      	add	r7, sp, #0
   22240:	6078      	str	r0, [r7, #4]
   22242:	460b      	mov	r3, r1
   22244:	807b      	strh	r3, [r7, #2]
}
   22246:	bf00      	nop
   22248:	370c      	adds	r7, #12
   2224a:	46bd      	mov	sp, r7
   2224c:	bc80      	pop	{r7}
   2224e:	4770      	bx	lr

00022250 <net_pkt_get_len>:
{
   22250:	b580      	push	{r7, lr}
   22252:	b082      	sub	sp, #8
   22254:	af00      	add	r7, sp, #0
   22256:	6078      	str	r0, [r7, #4]
	return net_buf_frags_len(pkt->frags);
   22258:	687b      	ldr	r3, [r7, #4]
   2225a:	695b      	ldr	r3, [r3, #20]
   2225c:	4618      	mov	r0, r3
   2225e:	f7ff ff12 	bl	22086 <net_buf_frags_len>
   22262:	4603      	mov	r3, r0
}
   22264:	4618      	mov	r0, r3
   22266:	3708      	adds	r7, #8
   22268:	46bd      	mov	sp, r7
   2226a:	bd80      	pop	{r7, pc}

0002226c <net_pkt_data>:
{
   2226c:	b480      	push	{r7}
   2226e:	b083      	sub	sp, #12
   22270:	af00      	add	r7, sp, #0
   22272:	6078      	str	r0, [r7, #4]
	return pkt->frags->data;
   22274:	687b      	ldr	r3, [r7, #4]
   22276:	695b      	ldr	r3, [r3, #20]
   22278:	689b      	ldr	r3, [r3, #8]
}
   2227a:	4618      	mov	r0, r3
   2227c:	370c      	adds	r7, #12
   2227e:	46bd      	mov	sp, r7
   22280:	bc80      	pop	{r7}
   22282:	4770      	bx	lr

00022284 <net_pkt_ip_data>:
{
   22284:	b480      	push	{r7}
   22286:	b083      	sub	sp, #12
   22288:	af00      	add	r7, sp, #0
   2228a:	6078      	str	r0, [r7, #4]
	return pkt->frags->data;
   2228c:	687b      	ldr	r3, [r7, #4]
   2228e:	695b      	ldr	r3, [r3, #20]
   22290:	689b      	ldr	r3, [r3, #8]
}
   22292:	4618      	mov	r0, r3
   22294:	370c      	adds	r7, #12
   22296:	46bd      	mov	sp, r7
   22298:	bc80      	pop	{r7}
   2229a:	4770      	bx	lr

0002229c <net_pkt_lladdr_src>:
{
   2229c:	b480      	push	{r7}
   2229e:	b083      	sub	sp, #12
   222a0:	af00      	add	r7, sp, #0
   222a2:	6078      	str	r0, [r7, #4]
	return &pkt->lladdr_src;
   222a4:	687b      	ldr	r3, [r7, #4]
   222a6:	332c      	adds	r3, #44	; 0x2c
}
   222a8:	4618      	mov	r0, r3
   222aa:	370c      	adds	r7, #12
   222ac:	46bd      	mov	sp, r7
   222ae:	bc80      	pop	{r7}
   222b0:	4770      	bx	lr

000222b2 <net_pkt_lladdr_dst>:
{
   222b2:	b480      	push	{r7}
   222b4:	b083      	sub	sp, #12
   222b6:	af00      	add	r7, sp, #0
   222b8:	6078      	str	r0, [r7, #4]
	return &pkt->lladdr_dst;
   222ba:	687b      	ldr	r3, [r7, #4]
   222bc:	3334      	adds	r3, #52	; 0x34
}
   222be:	4618      	mov	r0, r3
   222c0:	370c      	adds	r7, #12
   222c2:	46bd      	mov	sp, r7
   222c4:	bc80      	pop	{r7}
   222c6:	4770      	bx	lr

000222c8 <net_pkt_ipv4_auto>:
{
   222c8:	b480      	push	{r7}
   222ca:	b083      	sub	sp, #12
   222cc:	af00      	add	r7, sp, #0
   222ce:	6078      	str	r0, [r7, #4]
	return false;
   222d0:	2300      	movs	r3, #0
}
   222d2:	4618      	mov	r0, r3
   222d4:	370c      	adds	r7, #12
   222d6:	46bd      	mov	sp, r7
   222d8:	bc80      	pop	{r7}
   222da:	4770      	bx	lr

000222dc <net_eth_is_addr_unspecified>:

	return false;
}

static inline bool net_eth_is_addr_unspecified(struct net_eth_addr *addr)
{
   222dc:	b480      	push	{r7}
   222de:	b083      	sub	sp, #12
   222e0:	af00      	add	r7, sp, #0
   222e2:	6078      	str	r0, [r7, #4]
	if (addr->addr[0] == 0x00 &&
   222e4:	687b      	ldr	r3, [r7, #4]
   222e6:	781b      	ldrb	r3, [r3, #0]
   222e8:	2b00      	cmp	r3, #0
   222ea:	d115      	bne.n	22318 <net_eth_is_addr_unspecified+0x3c>
	    addr->addr[1] == 0x00 &&
   222ec:	687b      	ldr	r3, [r7, #4]
   222ee:	785b      	ldrb	r3, [r3, #1]
	if (addr->addr[0] == 0x00 &&
   222f0:	2b00      	cmp	r3, #0
   222f2:	d111      	bne.n	22318 <net_eth_is_addr_unspecified+0x3c>
	    addr->addr[2] == 0x00 &&
   222f4:	687b      	ldr	r3, [r7, #4]
   222f6:	789b      	ldrb	r3, [r3, #2]
	    addr->addr[1] == 0x00 &&
   222f8:	2b00      	cmp	r3, #0
   222fa:	d10d      	bne.n	22318 <net_eth_is_addr_unspecified+0x3c>
	    addr->addr[3] == 0x00 &&
   222fc:	687b      	ldr	r3, [r7, #4]
   222fe:	78db      	ldrb	r3, [r3, #3]
	    addr->addr[2] == 0x00 &&
   22300:	2b00      	cmp	r3, #0
   22302:	d109      	bne.n	22318 <net_eth_is_addr_unspecified+0x3c>
	    addr->addr[4] == 0x00 &&
   22304:	687b      	ldr	r3, [r7, #4]
   22306:	791b      	ldrb	r3, [r3, #4]
	    addr->addr[3] == 0x00 &&
   22308:	2b00      	cmp	r3, #0
   2230a:	d105      	bne.n	22318 <net_eth_is_addr_unspecified+0x3c>
	    addr->addr[5] == 0x00) {
   2230c:	687b      	ldr	r3, [r7, #4]
   2230e:	795b      	ldrb	r3, [r3, #5]
	    addr->addr[4] == 0x00 &&
   22310:	2b00      	cmp	r3, #0
   22312:	d101      	bne.n	22318 <net_eth_is_addr_unspecified+0x3c>
		return true;
   22314:	2301      	movs	r3, #1
   22316:	e000      	b.n	2231a <net_eth_is_addr_unspecified+0x3e>
	}

	return false;
   22318:	2300      	movs	r3, #0
}
   2231a:	4618      	mov	r0, r3
   2231c:	370c      	adds	r7, #12
   2231e:	46bd      	mov	sp, r7
   22320:	bc80      	pop	{r7}
   22322:	4770      	bx	lr

00022324 <net_eth_get_vlan_tag>:
 */
#if defined(CONFIG_NET_VLAN)
u16_t net_eth_get_vlan_tag(struct net_if *iface);
#else
static inline u16_t net_eth_get_vlan_tag(struct net_if *iface)
{
   22324:	b480      	push	{r7}
   22326:	b083      	sub	sp, #12
   22328:	af00      	add	r7, sp, #0
   2232a:	6078      	str	r0, [r7, #4]
	return NET_VLAN_TAG_UNSPEC;
   2232c:	f640 73ff 	movw	r3, #4095	; 0xfff
}
   22330:	4618      	mov	r0, r3
   22332:	370c      	adds	r7, #12
   22334:	46bd      	mov	sp, r7
   22336:	bc80      	pop	{r7}
   22338:	4770      	bx	lr

0002233a <arp_entry_cleanup>:
{
   2233a:	b580      	push	{r7, lr}
   2233c:	b088      	sub	sp, #32
   2233e:	af00      	add	r7, sp, #0
   22340:	6078      	str	r0, [r7, #4]
   22342:	460b      	mov	r3, r1
   22344:	70fb      	strb	r3, [r7, #3]
	NET_DBG("%p", entry);
   22346:	f7ff fe3c 	bl	21fc2 <_is_user_context>
   2234a:	4603      	mov	r3, r0
   2234c:	77bb      	strb	r3, [r7, #30]
	if (pending) {
   2234e:	78fb      	ldrb	r3, [r7, #3]
   22350:	2b00      	cmp	r3, #0
   22352:	d00b      	beq.n	2236c <arp_entry_cleanup+0x32>
		NET_DBG("Releasing pending pkt %p (ref %d)",
   22354:	f7ff fe35 	bl	21fc2 <_is_user_context>
   22358:	4603      	mov	r3, r0
   2235a:	77fb      	strb	r3, [r7, #31]
		net_pkt_unref(entry->pending);
   2235c:	687b      	ldr	r3, [r7, #4]
   2235e:	699b      	ldr	r3, [r3, #24]
   22360:	4618      	mov	r0, r3
   22362:	f003 fb52 	bl	25a0a <net_pkt_unref>
		entry->pending = NULL;
   22366:	687b      	ldr	r3, [r7, #4]
   22368:	2200      	movs	r2, #0
   2236a:	619a      	str	r2, [r3, #24]
	entry->iface = NULL;
   2236c:	687b      	ldr	r3, [r7, #4]
   2236e:	2200      	movs	r2, #0
   22370:	611a      	str	r2, [r3, #16]
	(void)memset(&entry->ip, 0, sizeof(struct in_addr));
   22372:	687b      	ldr	r3, [r7, #4]
   22374:	3314      	adds	r3, #20
   22376:	2204      	movs	r2, #4
   22378:	2100      	movs	r1, #0
   2237a:	4618      	mov	r0, r3
   2237c:	f7df fe9c 	bl	20b8 <memset>
	(void)memset(&entry->eth, 0, sizeof(struct net_eth_addr));
   22380:	687b      	ldr	r3, [r7, #4]
   22382:	3318      	adds	r3, #24
   22384:	2206      	movs	r2, #6
   22386:	2100      	movs	r1, #0
   22388:	4618      	mov	r0, r3
   2238a:	f7df fe95 	bl	20b8 <memset>
}
   2238e:	bf00      	nop
   22390:	3720      	adds	r7, #32
   22392:	46bd      	mov	sp, r7
   22394:	bd80      	pop	{r7, pc}

00022396 <arp_entry_find>:
{
   22396:	b580      	push	{r7, lr}
   22398:	b08a      	sub	sp, #40	; 0x28
   2239a:	af00      	add	r7, sp, #0
   2239c:	60f8      	str	r0, [r7, #12]
   2239e:	60b9      	str	r1, [r7, #8]
   223a0:	607a      	str	r2, [r7, #4]
   223a2:	603b      	str	r3, [r7, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(list, entry, node) {
   223a4:	68f8      	ldr	r0, [r7, #12]
   223a6:	f7ff fd1c 	bl	21de2 <sys_slist_peek_head>
   223aa:	4603      	mov	r3, r0
   223ac:	2b00      	cmp	r3, #0
   223ae:	d004      	beq.n	223ba <arp_entry_find+0x24>
   223b0:	68f8      	ldr	r0, [r7, #12]
   223b2:	f7ff fd16 	bl	21de2 <sys_slist_peek_head>
   223b6:	4603      	mov	r3, r0
   223b8:	e000      	b.n	223bc <arp_entry_find+0x26>
   223ba:	2300      	movs	r3, #0
   223bc:	627b      	str	r3, [r7, #36]	; 0x24
   223be:	e02e      	b.n	2241e <arp_entry_find+0x88>
		NET_DBG("iface %p dst %s",
   223c0:	f7ff fdff 	bl	21fc2 <_is_user_context>
   223c4:	4603      	mov	r3, r0
   223c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if (entry->iface == iface &&
   223ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   223cc:	691b      	ldr	r3, [r3, #16]
   223ce:	68ba      	ldr	r2, [r7, #8]
   223d0:	429a      	cmp	r2, r3
   223d2:	d10a      	bne.n	223ea <arp_entry_find+0x54>
		    net_ipv4_addr_cmp(&entry->ip, dst)) {
   223d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   223d6:	3314      	adds	r3, #20
   223d8:	6879      	ldr	r1, [r7, #4]
   223da:	4618      	mov	r0, r3
   223dc:	f7ff febb 	bl	22156 <net_ipv4_addr_cmp>
   223e0:	4603      	mov	r3, r0
		if (entry->iface == iface &&
   223e2:	2b00      	cmp	r3, #0
   223e4:	d001      	beq.n	223ea <arp_entry_find+0x54>
			return entry;
   223e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   223e8:	e01d      	b.n	22426 <arp_entry_find+0x90>
		if (previous) {
   223ea:	683b      	ldr	r3, [r7, #0]
   223ec:	2b00      	cmp	r3, #0
   223ee:	d002      	beq.n	223f6 <arp_entry_find+0x60>
			*previous = &entry->node;
   223f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   223f2:	683b      	ldr	r3, [r7, #0]
   223f4:	601a      	str	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(list, entry, node) {
   223f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   223f8:	2b00      	cmp	r3, #0
   223fa:	d00e      	beq.n	2241a <arp_entry_find+0x84>
   223fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   223fe:	4618      	mov	r0, r3
   22400:	f7ff fd22 	bl	21e48 <sys_slist_peek_next>
   22404:	4603      	mov	r3, r0
   22406:	2b00      	cmp	r3, #0
   22408:	d005      	beq.n	22416 <arp_entry_find+0x80>
   2240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2240c:	4618      	mov	r0, r3
   2240e:	f7ff fd1b 	bl	21e48 <sys_slist_peek_next>
   22412:	4603      	mov	r3, r0
   22414:	e002      	b.n	2241c <arp_entry_find+0x86>
   22416:	2300      	movs	r3, #0
   22418:	e000      	b.n	2241c <arp_entry_find+0x86>
   2241a:	2300      	movs	r3, #0
   2241c:	627b      	str	r3, [r7, #36]	; 0x24
   2241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22420:	2b00      	cmp	r3, #0
   22422:	d1cd      	bne.n	223c0 <arp_entry_find+0x2a>
	return NULL;
   22424:	2300      	movs	r3, #0
}
   22426:	4618      	mov	r0, r3
   22428:	3728      	adds	r7, #40	; 0x28
   2242a:	46bd      	mov	sp, r7
   2242c:	bd80      	pop	{r7, pc}

0002242e <if_get_addr>:
{
   2242e:	b580      	push	{r7, lr}
   22430:	b084      	sub	sp, #16
   22432:	af00      	add	r7, sp, #0
   22434:	6078      	str	r0, [r7, #4]
   22436:	6039      	str	r1, [r7, #0]
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
   22438:	687b      	ldr	r3, [r7, #4]
   2243a:	685b      	ldr	r3, [r3, #4]
   2243c:	60bb      	str	r3, [r7, #8]
	if (!ipv4) {
   2243e:	68bb      	ldr	r3, [r7, #8]
   22440:	2b00      	cmp	r3, #0
   22442:	d101      	bne.n	22448 <if_get_addr+0x1a>
		return NULL;
   22444:	2300      	movs	r3, #0
   22446:	e048      	b.n	224da <if_get_addr+0xac>
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
   22448:	2300      	movs	r3, #0
   2244a:	60fb      	str	r3, [r7, #12]
   2244c:	e041      	b.n	224d2 <if_get_addr+0xa4>
		if (ipv4->unicast[i].is_used &&
   2244e:	68b9      	ldr	r1, [r7, #8]
   22450:	68fa      	ldr	r2, [r7, #12]
   22452:	4613      	mov	r3, r2
   22454:	005b      	lsls	r3, r3, #1
   22456:	4413      	add	r3, r2
   22458:	009b      	lsls	r3, r3, #2
   2245a:	440b      	add	r3, r1
   2245c:	3308      	adds	r3, #8
   2245e:	789b      	ldrb	r3, [r3, #2]
   22460:	f3c3 0340 	ubfx	r3, r3, #1, #1
   22464:	b2db      	uxtb	r3, r3
   22466:	2b00      	cmp	r3, #0
   22468:	d030      	beq.n	224cc <if_get_addr+0x9e>
		    ipv4->unicast[i].address.family == AF_INET &&
   2246a:	68b9      	ldr	r1, [r7, #8]
   2246c:	68fa      	ldr	r2, [r7, #12]
   2246e:	4613      	mov	r3, r2
   22470:	005b      	lsls	r3, r3, #1
   22472:	4413      	add	r3, r2
   22474:	009b      	lsls	r3, r3, #2
   22476:	440b      	add	r3, r1
   22478:	881b      	ldrh	r3, [r3, #0]
		if (ipv4->unicast[i].is_used &&
   2247a:	2b01      	cmp	r3, #1
   2247c:	d126      	bne.n	224cc <if_get_addr+0x9e>
		    ipv4->unicast[i].addr_state == NET_ADDR_PREFERRED &&
   2247e:	68b9      	ldr	r1, [r7, #8]
   22480:	68fa      	ldr	r2, [r7, #12]
   22482:	4613      	mov	r3, r2
   22484:	005b      	lsls	r3, r3, #1
   22486:	4413      	add	r3, r2
   22488:	009b      	lsls	r3, r3, #2
   2248a:	440b      	add	r3, r1
   2248c:	3309      	adds	r3, #9
   2248e:	f993 3000 	ldrsb.w	r3, [r3]
		    ipv4->unicast[i].address.family == AF_INET &&
   22492:	2b01      	cmp	r3, #1
   22494:	d11a      	bne.n	224cc <if_get_addr+0x9e>
		    ipv4->unicast[i].addr_state == NET_ADDR_PREFERRED &&
   22496:	683b      	ldr	r3, [r7, #0]
   22498:	2b00      	cmp	r3, #0
   2249a:	d00e      	beq.n	224ba <if_get_addr+0x8c>
				       &ipv4->unicast[i].address.in_addr))) {
   2249c:	68fa      	ldr	r2, [r7, #12]
   2249e:	4613      	mov	r3, r2
   224a0:	005b      	lsls	r3, r3, #1
   224a2:	4413      	add	r3, r2
   224a4:	009b      	lsls	r3, r3, #2
   224a6:	68ba      	ldr	r2, [r7, #8]
   224a8:	4413      	add	r3, r2
   224aa:	3304      	adds	r3, #4
		     net_ipv4_addr_cmp(addr,
   224ac:	4619      	mov	r1, r3
   224ae:	6838      	ldr	r0, [r7, #0]
   224b0:	f7ff fe51 	bl	22156 <net_ipv4_addr_cmp>
   224b4:	4603      	mov	r3, r0
		    (!addr ||
   224b6:	2b00      	cmp	r3, #0
   224b8:	d008      	beq.n	224cc <if_get_addr+0x9e>
			return &ipv4->unicast[i].address.in_addr;
   224ba:	68fa      	ldr	r2, [r7, #12]
   224bc:	4613      	mov	r3, r2
   224be:	005b      	lsls	r3, r3, #1
   224c0:	4413      	add	r3, r2
   224c2:	009b      	lsls	r3, r3, #2
   224c4:	68ba      	ldr	r2, [r7, #8]
   224c6:	4413      	add	r3, r2
   224c8:	3304      	adds	r3, #4
   224ca:	e006      	b.n	224da <if_get_addr+0xac>
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
   224cc:	68fb      	ldr	r3, [r7, #12]
   224ce:	3301      	adds	r3, #1
   224d0:	60fb      	str	r3, [r7, #12]
   224d2:	68fb      	ldr	r3, [r7, #12]
   224d4:	2b00      	cmp	r3, #0
   224d6:	ddba      	ble.n	2244e <if_get_addr+0x20>
	return NULL;
   224d8:	2300      	movs	r3, #0
}
   224da:	4618      	mov	r0, r3
   224dc:	3710      	adds	r7, #16
   224de:	46bd      	mov	sp, r7
   224e0:	bd80      	pop	{r7, pc}

000224e2 <arp_prepare>:
{
   224e2:	b590      	push	{r4, r7, lr}
   224e4:	b091      	sub	sp, #68	; 0x44
   224e6:	af02      	add	r7, sp, #8
   224e8:	60f8      	str	r0, [r7, #12]
   224ea:	60b9      	str	r1, [r7, #8]
   224ec:	607a      	str	r2, [r7, #4]
   224ee:	603b      	str	r3, [r7, #0]
	if (current_ip) {
   224f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   224f2:	2b00      	cmp	r3, #0
   224f4:	d002      	beq.n	224fc <arp_prepare+0x1a>
		pkt = pending;
   224f6:	683b      	ldr	r3, [r7, #0]
   224f8:	633b      	str	r3, [r7, #48]	; 0x30
   224fa:	e00d      	b.n	22518 <arp_prepare+0x36>
		pkt = net_pkt_alloc_with_buffer(iface,
   224fc:	2364      	movs	r3, #100	; 0x64
   224fe:	9300      	str	r3, [sp, #0]
   22500:	2300      	movs	r3, #0
   22502:	2200      	movs	r2, #0
   22504:	211c      	movs	r1, #28
   22506:	68f8      	ldr	r0, [r7, #12]
   22508:	f7f1 fc2a 	bl	13d60 <net_pkt_alloc_with_buffer>
   2250c:	6338      	str	r0, [r7, #48]	; 0x30
		if (!pkt) {
   2250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   22510:	2b00      	cmp	r3, #0
   22512:	d101      	bne.n	22518 <arp_prepare+0x36>
			return NULL;
   22514:	2300      	movs	r3, #0
   22516:	e0bb      	b.n	22690 <arp_prepare+0x1ae>
	net_pkt_set_vlan_tag(pkt, net_eth_get_vlan_tag(iface));
   22518:	68f8      	ldr	r0, [r7, #12]
   2251a:	f7ff ff03 	bl	22324 <net_eth_get_vlan_tag>
   2251e:	4603      	mov	r3, r0
   22520:	4619      	mov	r1, r3
   22522:	6b38      	ldr	r0, [r7, #48]	; 0x30
   22524:	f7ff fe89 	bl	2223a <net_pkt_set_vlan_tag>
	net_buf_add(pkt->buffer, sizeof(struct net_arp_hdr));
   22528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2252a:	695b      	ldr	r3, [r3, #20]
   2252c:	3308      	adds	r3, #8
   2252e:	211c      	movs	r1, #28
   22530:	4618      	mov	r0, r3
   22532:	f7ff fbe5 	bl	21d00 <net_buf_simple_add>
	hdr = NET_ARP_HDR(pkt);
   22536:	6b38      	ldr	r0, [r7, #48]	; 0x30
   22538:	f7ff fe98 	bl	2226c <net_pkt_data>
   2253c:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (entry) {
   2253e:	687b      	ldr	r3, [r7, #4]
   22540:	2b00      	cmp	r3, #0
   22542:	d024      	beq.n	2258e <arp_prepare+0xac>
		entry->pending = net_pkt_ref(pending);
   22544:	6838      	ldr	r0, [r7, #0]
   22546:	f003 fa9b 	bl	25a80 <net_pkt_ref>
   2254a:	4602      	mov	r2, r0
   2254c:	687b      	ldr	r3, [r7, #4]
   2254e:	619a      	str	r2, [r3, #24]
		entry->iface = net_pkt_iface(pkt);
   22550:	6b38      	ldr	r0, [r7, #48]	; 0x30
   22552:	f7ff fe5c 	bl	2220e <net_pkt_iface>
   22556:	4602      	mov	r2, r0
   22558:	687b      	ldr	r3, [r7, #4]
   2255a:	611a      	str	r2, [r3, #16]
		net_ipaddr_copy(&entry->ip, next_addr);
   2255c:	687b      	ldr	r3, [r7, #4]
   2255e:	3314      	adds	r3, #20
   22560:	62bb      	str	r3, [r7, #40]	; 0x28
   22562:	68bb      	ldr	r3, [r7, #8]
   22564:	627b      	str	r3, [r7, #36]	; 0x24
   22566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22568:	681a      	ldr	r2, [r3, #0]
   2256a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2256c:	601a      	str	r2, [r3, #0]
			(u8_t *)net_if_get_link_addr(entry->iface)->addr;
   2256e:	687b      	ldr	r3, [r7, #4]
   22570:	691b      	ldr	r3, [r3, #16]
   22572:	4618      	mov	r0, r3
   22574:	f7ff fe3f 	bl	221f6 <net_if_get_link_addr>
   22578:	4604      	mov	r4, r0
		net_pkt_lladdr_src(pkt)->addr =
   2257a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   2257c:	f7ff fe8e 	bl	2229c <net_pkt_lladdr_src>
   22580:	4602      	mov	r2, r0
			(u8_t *)net_if_get_link_addr(entry->iface)->addr;
   22582:	6823      	ldr	r3, [r4, #0]
		net_pkt_lladdr_src(pkt)->addr =
   22584:	6013      	str	r3, [r2, #0]
		arp_entry_register_pending(entry);
   22586:	6878      	ldr	r0, [r7, #4]
   22588:	f7f0 f876 	bl	12678 <arp_entry_register_pending>
   2258c:	e009      	b.n	225a2 <arp_prepare+0xc0>
			(u8_t *)net_if_get_link_addr(iface)->addr;
   2258e:	68f8      	ldr	r0, [r7, #12]
   22590:	f7ff fe31 	bl	221f6 <net_if_get_link_addr>
   22594:	4604      	mov	r4, r0
		net_pkt_lladdr_src(pkt)->addr =
   22596:	6b38      	ldr	r0, [r7, #48]	; 0x30
   22598:	f7ff fe80 	bl	2229c <net_pkt_lladdr_src>
   2259c:	4602      	mov	r2, r0
			(u8_t *)net_if_get_link_addr(iface)->addr;
   2259e:	6823      	ldr	r3, [r4, #0]
		net_pkt_lladdr_src(pkt)->addr =
   225a0:	6013      	str	r3, [r2, #0]
	net_pkt_lladdr_src(pkt)->len = sizeof(struct net_eth_addr);
   225a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
   225a4:	f7ff fe7a 	bl	2229c <net_pkt_lladdr_src>
   225a8:	4603      	mov	r3, r0
   225aa:	2206      	movs	r2, #6
   225ac:	711a      	strb	r2, [r3, #4]
	net_pkt_lladdr_dst(pkt)->addr = (u8_t *)net_eth_broadcast_addr();
   225ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
   225b0:	f7ff fe7f 	bl	222b2 <net_pkt_lladdr_dst>
   225b4:	4604      	mov	r4, r0
   225b6:	f7f0 faa9 	bl	12b0c <net_eth_broadcast_addr>
   225ba:	4603      	mov	r3, r0
   225bc:	6023      	str	r3, [r4, #0]
	net_pkt_lladdr_dst(pkt)->len = sizeof(struct net_eth_addr);
   225be:	6b38      	ldr	r0, [r7, #48]	; 0x30
   225c0:	f7ff fe77 	bl	222b2 <net_pkt_lladdr_dst>
   225c4:	4603      	mov	r3, r0
   225c6:	2206      	movs	r2, #6
   225c8:	711a      	strb	r2, [r3, #4]
	hdr->hwtype = htons(NET_ARP_HTYPE_ETH);
   225ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   225cc:	2200      	movs	r2, #0
   225ce:	701a      	strb	r2, [r3, #0]
   225d0:	2200      	movs	r2, #0
   225d2:	f042 0201 	orr.w	r2, r2, #1
   225d6:	705a      	strb	r2, [r3, #1]
	hdr->protocol = htons(NET_ETH_PTYPE_IP);
   225d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   225da:	2200      	movs	r2, #0
   225dc:	f042 0208 	orr.w	r2, r2, #8
   225e0:	709a      	strb	r2, [r3, #2]
   225e2:	2200      	movs	r2, #0
   225e4:	70da      	strb	r2, [r3, #3]
	hdr->hwlen = sizeof(struct net_eth_addr);
   225e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   225e8:	2206      	movs	r2, #6
   225ea:	711a      	strb	r2, [r3, #4]
	hdr->protolen = sizeof(struct in_addr);
   225ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   225ee:	2204      	movs	r2, #4
   225f0:	715a      	strb	r2, [r3, #5]
	hdr->opcode = htons(NET_ARP_REQUEST);
   225f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   225f4:	2200      	movs	r2, #0
   225f6:	719a      	strb	r2, [r3, #6]
   225f8:	2200      	movs	r2, #0
   225fa:	f042 0201 	orr.w	r2, r2, #1
   225fe:	71da      	strb	r2, [r3, #7]
	(void)memset(&hdr->dst_hwaddr.addr, 0x00, sizeof(struct net_eth_addr));
   22600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   22602:	3312      	adds	r3, #18
   22604:	2206      	movs	r2, #6
   22606:	2100      	movs	r1, #0
   22608:	4618      	mov	r0, r3
   2260a:	f7df fd55 	bl	20b8 <memset>
	net_ipaddr_copy(&hdr->dst_ipaddr, next_addr);
   2260e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   22610:	3318      	adds	r3, #24
   22612:	623b      	str	r3, [r7, #32]
   22614:	68bb      	ldr	r3, [r7, #8]
   22616:	61fb      	str	r3, [r7, #28]
   22618:	69fb      	ldr	r3, [r7, #28]
   2261a:	681a      	ldr	r2, [r3, #0]
   2261c:	6a3b      	ldr	r3, [r7, #32]
   2261e:	601a      	str	r2, [r3, #0]
	memcpy(hdr->src_hwaddr.addr, net_pkt_lladdr_src(pkt)->addr,
   22620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   22622:	f103 0408 	add.w	r4, r3, #8
   22626:	6b38      	ldr	r0, [r7, #48]	; 0x30
   22628:	f7ff fe38 	bl	2229c <net_pkt_lladdr_src>
   2262c:	4603      	mov	r3, r0
   2262e:	681b      	ldr	r3, [r3, #0]
   22630:	2206      	movs	r2, #6
   22632:	4619      	mov	r1, r3
   22634:	4620      	mov	r0, r4
   22636:	f7df fd17 	bl	2068 <memcpy>
	if (!entry || (pkt != NULL && net_pkt_ipv4_auto(pkt))) {
   2263a:	687b      	ldr	r3, [r7, #4]
   2263c:	2b00      	cmp	r3, #0
   2263e:	d008      	beq.n	22652 <arp_prepare+0x170>
   22640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   22642:	2b00      	cmp	r3, #0
   22644:	d008      	beq.n	22658 <arp_prepare+0x176>
   22646:	6b38      	ldr	r0, [r7, #48]	; 0x30
   22648:	f7ff fe3e 	bl	222c8 <net_pkt_ipv4_auto>
   2264c:	4603      	mov	r3, r0
   2264e:	2b00      	cmp	r3, #0
   22650:	d002      	beq.n	22658 <arp_prepare+0x176>
		my_addr = current_ip;
   22652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   22654:	637b      	str	r3, [r7, #52]	; 0x34
   22656:	e006      	b.n	22666 <arp_prepare+0x184>
		my_addr = if_get_addr(entry->iface, current_ip);
   22658:	687b      	ldr	r3, [r7, #4]
   2265a:	691b      	ldr	r3, [r3, #16]
   2265c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   2265e:	4618      	mov	r0, r3
   22660:	f7ff fee5 	bl	2242e <if_get_addr>
   22664:	6378      	str	r0, [r7, #52]	; 0x34
	if (my_addr) {
   22666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   22668:	2b00      	cmp	r3, #0
   2266a:	d009      	beq.n	22680 <arp_prepare+0x19e>
		net_ipaddr_copy(&hdr->src_ipaddr, my_addr);
   2266c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2266e:	330e      	adds	r3, #14
   22670:	61bb      	str	r3, [r7, #24]
   22672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   22674:	617b      	str	r3, [r7, #20]
   22676:	697b      	ldr	r3, [r7, #20]
   22678:	681a      	ldr	r2, [r3, #0]
   2267a:	69bb      	ldr	r3, [r7, #24]
   2267c:	601a      	str	r2, [r3, #0]
   2267e:	e006      	b.n	2268e <arp_prepare+0x1ac>
		(void)memset(&hdr->src_ipaddr, 0, sizeof(struct in_addr));
   22680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   22682:	330e      	adds	r3, #14
   22684:	2204      	movs	r2, #4
   22686:	2100      	movs	r1, #0
   22688:	4618      	mov	r0, r3
   2268a:	f7df fd15 	bl	20b8 <memset>
	return pkt;
   2268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   22690:	4618      	mov	r0, r3
   22692:	373c      	adds	r7, #60	; 0x3c
   22694:	46bd      	mov	sp, r7
   22696:	bd90      	pop	{r4, r7, pc}

00022698 <net_arp_prepare>:
{
   22698:	b590      	push	{r4, r7, lr}
   2269a:	b095      	sub	sp, #84	; 0x54
   2269c:	af02      	add	r7, sp, #8
   2269e:	60f8      	str	r0, [r7, #12]
   226a0:	60b9      	str	r1, [r7, #8]
   226a2:	607a      	str	r2, [r7, #4]
	if (!pkt || !pkt->buffer) {
   226a4:	68fb      	ldr	r3, [r7, #12]
   226a6:	2b00      	cmp	r3, #0
   226a8:	d003      	beq.n	226b2 <net_arp_prepare+0x1a>
   226aa:	68fb      	ldr	r3, [r7, #12]
   226ac:	695b      	ldr	r3, [r3, #20]
   226ae:	2b00      	cmp	r3, #0
   226b0:	d101      	bne.n	226b6 <net_arp_prepare+0x1e>
		return NULL;
   226b2:	2300      	movs	r3, #0
   226b4:	e08e      	b.n	227d4 <net_arp_prepare+0x13c>
	if (!current_ip &&
   226b6:	687b      	ldr	r3, [r7, #4]
   226b8:	2b00      	cmp	r3, #0
   226ba:	d129      	bne.n	22710 <net_arp_prepare+0x78>
	    !net_if_ipv4_addr_mask_cmp(net_pkt_iface(pkt), request_ip)) {
   226bc:	68f8      	ldr	r0, [r7, #12]
   226be:	f7ff fda6 	bl	2220e <net_pkt_iface>
   226c2:	4603      	mov	r3, r0
   226c4:	68b9      	ldr	r1, [r7, #8]
   226c6:	4618      	mov	r0, r3
   226c8:	f002 fdf4 	bl	252b4 <net_if_ipv4_addr_mask_cmp>
   226cc:	4603      	mov	r3, r0
   226ce:	f083 0301 	eor.w	r3, r3, #1
   226d2:	b2db      	uxtb	r3, r3
	if (!current_ip &&
   226d4:	2b00      	cmp	r3, #0
   226d6:	d01b      	beq.n	22710 <net_arp_prepare+0x78>
		struct net_if_ipv4 *ipv4 = net_pkt_iface(pkt)->config.ip.ipv4;
   226d8:	68f8      	ldr	r0, [r7, #12]
   226da:	f7ff fd98 	bl	2220e <net_pkt_iface>
   226de:	4603      	mov	r3, r0
   226e0:	685b      	ldr	r3, [r3, #4]
   226e2:	637b      	str	r3, [r7, #52]	; 0x34
		if (ipv4) {
   226e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   226e6:	2b00      	cmp	r3, #0
   226e8:	d00f      	beq.n	2270a <net_arp_prepare+0x72>
			addr = &ipv4->gw;
   226ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   226ec:	3318      	adds	r3, #24
   226ee:	643b      	str	r3, [r7, #64]	; 0x40
			if (net_ipv4_is_addr_unspecified(addr)) {
   226f0:	6c38      	ldr	r0, [r7, #64]	; 0x40
   226f2:	f7ff fcf1 	bl	220d8 <net_ipv4_is_addr_unspecified>
   226f6:	4603      	mov	r3, r0
   226f8:	2b00      	cmp	r3, #0
   226fa:	d00c      	beq.n	22716 <net_arp_prepare+0x7e>
				NET_ERR("Gateway not set for iface %p",
   226fc:	f7ff fc61 	bl	21fc2 <_is_user_context>
   22700:	4603      	mov	r3, r0
   22702:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				return NULL;
   22706:	2300      	movs	r3, #0
   22708:	e064      	b.n	227d4 <net_arp_prepare+0x13c>
			addr = request_ip;
   2270a:	68bb      	ldr	r3, [r7, #8]
   2270c:	643b      	str	r3, [r7, #64]	; 0x40
	    !net_if_ipv4_addr_mask_cmp(net_pkt_iface(pkt), request_ip)) {
   2270e:	e002      	b.n	22716 <net_arp_prepare+0x7e>
		addr = request_ip;
   22710:	68bb      	ldr	r3, [r7, #8]
   22712:	643b      	str	r3, [r7, #64]	; 0x40
   22714:	e000      	b.n	22718 <net_arp_prepare+0x80>
	    !net_if_ipv4_addr_mask_cmp(net_pkt_iface(pkt), request_ip)) {
   22716:	bf00      	nop
	entry = arp_entry_find_move_first(net_pkt_iface(pkt), addr);
   22718:	68f8      	ldr	r0, [r7, #12]
   2271a:	f7ff fd78 	bl	2220e <net_pkt_iface>
   2271e:	4603      	mov	r3, r0
   22720:	6c39      	ldr	r1, [r7, #64]	; 0x40
   22722:	4618      	mov	r0, r3
   22724:	f7ef ff04 	bl	12530 <arp_entry_find_move_first>
   22728:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (!entry) {
   2272a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2272c:	2b00      	cmp	r3, #0
   2272e:	d12c      	bne.n	2278a <net_arp_prepare+0xf2>
		entry = arp_entry_find_pending(net_pkt_iface(pkt), addr);
   22730:	68f8      	ldr	r0, [r7, #12]
   22732:	f7ff fd6c 	bl	2220e <net_pkt_iface>
   22736:	4603      	mov	r3, r0
   22738:	6c39      	ldr	r1, [r7, #64]	; 0x40
   2273a:	4618      	mov	r0, r3
   2273c:	f7ef ff28 	bl	12590 <arp_entry_find_pending>
   22740:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (!entry) {
   22742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   22744:	2b00      	cmp	r3, #0
   22746:	d109      	bne.n	2275c <net_arp_prepare+0xc4>
			entry = arp_entry_get_free();
   22748:	f7ef ff66 	bl	12618 <arp_entry_get_free>
   2274c:	63f8      	str	r0, [r7, #60]	; 0x3c
			if (!entry) {
   2274e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   22750:	2b00      	cmp	r3, #0
   22752:	d105      	bne.n	22760 <net_arp_prepare+0xc8>
				entry = arp_entry_get_last_from_table();
   22754:	f7ef ff78 	bl	12648 <arp_entry_get_last_from_table>
   22758:	63f8      	str	r0, [r7, #60]	; 0x3c
   2275a:	e001      	b.n	22760 <net_arp_prepare+0xc8>
			entry = NULL;
   2275c:	2300      	movs	r3, #0
   2275e:	63fb      	str	r3, [r7, #60]	; 0x3c
		req = arp_prepare(net_pkt_iface(pkt), addr, entry, pkt,
   22760:	68f8      	ldr	r0, [r7, #12]
   22762:	f7ff fd54 	bl	2220e <net_pkt_iface>
   22766:	687b      	ldr	r3, [r7, #4]
   22768:	9300      	str	r3, [sp, #0]
   2276a:	68fb      	ldr	r3, [r7, #12]
   2276c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2276e:	6c39      	ldr	r1, [r7, #64]	; 0x40
   22770:	f7ff feb7 	bl	224e2 <arp_prepare>
   22774:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (!entry) {
   22776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   22778:	2b00      	cmp	r3, #0
   2277a:	d104      	bne.n	22786 <net_arp_prepare+0xee>
			NET_DBG("Resending ARP %p", req);
   2277c:	f7ff fc21 	bl	21fc2 <_is_user_context>
   22780:	4603      	mov	r3, r0
   22782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		return req;
   22786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   22788:	e024      	b.n	227d4 <net_arp_prepare+0x13c>
		(u8_t *)net_if_get_link_addr(entry->iface)->addr;
   2278a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2278c:	691b      	ldr	r3, [r3, #16]
   2278e:	4618      	mov	r0, r3
   22790:	f7ff fd31 	bl	221f6 <net_if_get_link_addr>
   22794:	4604      	mov	r4, r0
	net_pkt_lladdr_src(pkt)->addr =
   22796:	68f8      	ldr	r0, [r7, #12]
   22798:	f7ff fd80 	bl	2229c <net_pkt_lladdr_src>
   2279c:	4602      	mov	r2, r0
		(u8_t *)net_if_get_link_addr(entry->iface)->addr;
   2279e:	6823      	ldr	r3, [r4, #0]
	net_pkt_lladdr_src(pkt)->addr =
   227a0:	6013      	str	r3, [r2, #0]
	net_pkt_lladdr_src(pkt)->len = sizeof(struct net_eth_addr);
   227a2:	68f8      	ldr	r0, [r7, #12]
   227a4:	f7ff fd7a 	bl	2229c <net_pkt_lladdr_src>
   227a8:	4603      	mov	r3, r0
   227aa:	2206      	movs	r2, #6
   227ac:	711a      	strb	r2, [r3, #4]
	net_pkt_lladdr_dst(pkt)->addr = (u8_t *)&entry->eth;
   227ae:	68f8      	ldr	r0, [r7, #12]
   227b0:	f7ff fd7f 	bl	222b2 <net_pkt_lladdr_dst>
   227b4:	4602      	mov	r2, r0
   227b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   227b8:	3318      	adds	r3, #24
   227ba:	6013      	str	r3, [r2, #0]
	net_pkt_lladdr_dst(pkt)->len = sizeof(struct net_eth_addr);
   227bc:	68f8      	ldr	r0, [r7, #12]
   227be:	f7ff fd78 	bl	222b2 <net_pkt_lladdr_dst>
   227c2:	4603      	mov	r3, r0
   227c4:	2206      	movs	r2, #6
   227c6:	711a      	strb	r2, [r3, #4]
	NET_DBG("ARP using ll %s for IP %s",
   227c8:	f7ff fbfb 	bl	21fc2 <_is_user_context>
   227cc:	4603      	mov	r3, r0
   227ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	return pkt;
   227d2:	68fb      	ldr	r3, [r7, #12]
}
   227d4:	4618      	mov	r0, r3
   227d6:	374c      	adds	r7, #76	; 0x4c
   227d8:	46bd      	mov	sp, r7
   227da:	bd90      	pop	{r4, r7, pc}

000227dc <arp_prepare_reply>:
{
   227dc:	b590      	push	{r4, r7, lr}
   227de:	b08f      	sub	sp, #60	; 0x3c
   227e0:	af02      	add	r7, sp, #8
   227e2:	60f8      	str	r0, [r7, #12]
   227e4:	60b9      	str	r1, [r7, #8]
   227e6:	607a      	str	r2, [r7, #4]
	pkt = net_pkt_alloc_with_buffer(iface, sizeof(struct net_arp_hdr),
   227e8:	2364      	movs	r3, #100	; 0x64
   227ea:	9300      	str	r3, [sp, #0]
   227ec:	2300      	movs	r3, #0
   227ee:	2200      	movs	r2, #0
   227f0:	211c      	movs	r1, #28
   227f2:	68f8      	ldr	r0, [r7, #12]
   227f4:	f7f1 fab4 	bl	13d60 <net_pkt_alloc_with_buffer>
   227f8:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (!pkt) {
   227fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   227fc:	2b00      	cmp	r3, #0
   227fe:	d101      	bne.n	22804 <arp_prepare_reply+0x28>
		return NULL;
   22800:	2300      	movs	r3, #0
   22802:	e079      	b.n	228f8 <arp_prepare_reply+0x11c>
	net_buf_add(pkt->buffer, sizeof(struct net_arp_hdr));
   22804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   22806:	695b      	ldr	r3, [r3, #20]
   22808:	3308      	adds	r3, #8
   2280a:	211c      	movs	r1, #28
   2280c:	4618      	mov	r0, r3
   2280e:	f7ff fa77 	bl	21d00 <net_buf_simple_add>
	hdr = NET_ARP_HDR(pkt);
   22812:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   22814:	f7ff fd2a 	bl	2226c <net_pkt_data>
   22818:	62b8      	str	r0, [r7, #40]	; 0x28
	query = NET_ARP_HDR(req);
   2281a:	68b8      	ldr	r0, [r7, #8]
   2281c:	f7ff fd26 	bl	2226c <net_pkt_data>
   22820:	6278      	str	r0, [r7, #36]	; 0x24
	net_pkt_set_vlan_tag(pkt, net_pkt_vlan_tag(req));
   22822:	68b8      	ldr	r0, [r7, #8]
   22824:	f7ff fcfe 	bl	22224 <net_pkt_vlan_tag>
   22828:	4603      	mov	r3, r0
   2282a:	4619      	mov	r1, r3
   2282c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   2282e:	f7ff fd04 	bl	2223a <net_pkt_set_vlan_tag>
	hdr->hwtype = htons(NET_ARP_HTYPE_ETH);
   22832:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22834:	2200      	movs	r2, #0
   22836:	701a      	strb	r2, [r3, #0]
   22838:	2200      	movs	r2, #0
   2283a:	f042 0201 	orr.w	r2, r2, #1
   2283e:	705a      	strb	r2, [r3, #1]
	hdr->protocol = htons(NET_ETH_PTYPE_IP);
   22840:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22842:	2200      	movs	r2, #0
   22844:	f042 0208 	orr.w	r2, r2, #8
   22848:	709a      	strb	r2, [r3, #2]
   2284a:	2200      	movs	r2, #0
   2284c:	70da      	strb	r2, [r3, #3]
	hdr->hwlen = sizeof(struct net_eth_addr);
   2284e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22850:	2206      	movs	r2, #6
   22852:	711a      	strb	r2, [r3, #4]
	hdr->protolen = sizeof(struct in_addr);
   22854:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22856:	2204      	movs	r2, #4
   22858:	715a      	strb	r2, [r3, #5]
	hdr->opcode = htons(NET_ARP_REPLY);
   2285a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2285c:	2200      	movs	r2, #0
   2285e:	719a      	strb	r2, [r3, #6]
   22860:	2200      	movs	r2, #0
   22862:	f042 0202 	orr.w	r2, r2, #2
   22866:	71da      	strb	r2, [r3, #7]
	memcpy(&hdr->dst_hwaddr.addr, &eth_query->src.addr,
   22868:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2286a:	f103 0012 	add.w	r0, r3, #18
   2286e:	687b      	ldr	r3, [r7, #4]
   22870:	3306      	adds	r3, #6
   22872:	2206      	movs	r2, #6
   22874:	4619      	mov	r1, r3
   22876:	f7df fbf7 	bl	2068 <memcpy>
	memcpy(&hdr->src_hwaddr.addr, net_if_get_link_addr(iface)->addr,
   2287a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2287c:	f103 0408 	add.w	r4, r3, #8
   22880:	68f8      	ldr	r0, [r7, #12]
   22882:	f7ff fcb8 	bl	221f6 <net_if_get_link_addr>
   22886:	4603      	mov	r3, r0
   22888:	681b      	ldr	r3, [r3, #0]
   2288a:	2206      	movs	r2, #6
   2288c:	4619      	mov	r1, r3
   2288e:	4620      	mov	r0, r4
   22890:	f7df fbea 	bl	2068 <memcpy>
	net_ipaddr_copy(&hdr->dst_ipaddr, &query->src_ipaddr);
   22894:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22896:	3318      	adds	r3, #24
   22898:	623b      	str	r3, [r7, #32]
   2289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2289c:	330e      	adds	r3, #14
   2289e:	61fb      	str	r3, [r7, #28]
   228a0:	69fb      	ldr	r3, [r7, #28]
   228a2:	681a      	ldr	r2, [r3, #0]
   228a4:	6a3b      	ldr	r3, [r7, #32]
   228a6:	601a      	str	r2, [r3, #0]
	net_ipaddr_copy(&hdr->src_ipaddr, &query->dst_ipaddr);
   228a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   228aa:	330e      	adds	r3, #14
   228ac:	61bb      	str	r3, [r7, #24]
   228ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   228b0:	3318      	adds	r3, #24
   228b2:	617b      	str	r3, [r7, #20]
   228b4:	697b      	ldr	r3, [r7, #20]
   228b6:	681a      	ldr	r2, [r3, #0]
   228b8:	69bb      	ldr	r3, [r7, #24]
   228ba:	601a      	str	r2, [r3, #0]
	net_pkt_lladdr_src(pkt)->addr = net_if_get_link_addr(iface)->addr;
   228bc:	68f8      	ldr	r0, [r7, #12]
   228be:	f7ff fc9a 	bl	221f6 <net_if_get_link_addr>
   228c2:	4604      	mov	r4, r0
   228c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   228c6:	f7ff fce9 	bl	2229c <net_pkt_lladdr_src>
   228ca:	4602      	mov	r2, r0
   228cc:	6823      	ldr	r3, [r4, #0]
   228ce:	6013      	str	r3, [r2, #0]
	net_pkt_lladdr_src(pkt)->len = sizeof(struct net_eth_addr);
   228d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   228d2:	f7ff fce3 	bl	2229c <net_pkt_lladdr_src>
   228d6:	4603      	mov	r3, r0
   228d8:	2206      	movs	r2, #6
   228da:	711a      	strb	r2, [r3, #4]
	net_pkt_lladdr_dst(pkt)->addr = (u8_t *)&hdr->dst_hwaddr.addr;
   228dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   228de:	f7ff fce8 	bl	222b2 <net_pkt_lladdr_dst>
   228e2:	4602      	mov	r2, r0
   228e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   228e6:	3312      	adds	r3, #18
   228e8:	6013      	str	r3, [r2, #0]
	net_pkt_lladdr_dst(pkt)->len = sizeof(struct net_eth_addr);
   228ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   228ec:	f7ff fce1 	bl	222b2 <net_pkt_lladdr_dst>
   228f0:	4603      	mov	r3, r0
   228f2:	2206      	movs	r2, #6
   228f4:	711a      	strb	r2, [r3, #4]
	return pkt;
   228f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   228f8:	4618      	mov	r0, r3
   228fa:	3734      	adds	r7, #52	; 0x34
   228fc:	46bd      	mov	sp, r7
   228fe:	bd90      	pop	{r4, r7, pc}

00022900 <arp_hdr_check>:
{
   22900:	b580      	push	{r7, lr}
   22902:	b084      	sub	sp, #16
   22904:	af00      	add	r7, sp, #0
   22906:	6078      	str	r0, [r7, #4]
	if (ntohs(arp_hdr->hwtype) != NET_ARP_HTYPE_ETH ||
   22908:	687b      	ldr	r3, [r7, #4]
   2290a:	881b      	ldrh	r3, [r3, #0]
   2290c:	b29b      	uxth	r3, r3
   2290e:	0a1b      	lsrs	r3, r3, #8
   22910:	b29b      	uxth	r3, r3
   22912:	b21a      	sxth	r2, r3
   22914:	687b      	ldr	r3, [r7, #4]
   22916:	881b      	ldrh	r3, [r3, #0]
   22918:	b29b      	uxth	r3, r3
   2291a:	021b      	lsls	r3, r3, #8
   2291c:	b21b      	sxth	r3, r3
   2291e:	4313      	orrs	r3, r2
   22920:	b21b      	sxth	r3, r3
   22922:	2b01      	cmp	r3, #1
   22924:	d11f      	bne.n	22966 <arp_hdr_check+0x66>
	    ntohs(arp_hdr->protocol) != NET_ETH_PTYPE_IP ||
   22926:	687b      	ldr	r3, [r7, #4]
   22928:	885b      	ldrh	r3, [r3, #2]
   2292a:	b29b      	uxth	r3, r3
   2292c:	0a1b      	lsrs	r3, r3, #8
   2292e:	b29b      	uxth	r3, r3
   22930:	b21a      	sxth	r2, r3
   22932:	687b      	ldr	r3, [r7, #4]
   22934:	885b      	ldrh	r3, [r3, #2]
   22936:	b29b      	uxth	r3, r3
   22938:	021b      	lsls	r3, r3, #8
   2293a:	b21b      	sxth	r3, r3
   2293c:	4313      	orrs	r3, r2
   2293e:	b21b      	sxth	r3, r3
	if (ntohs(arp_hdr->hwtype) != NET_ARP_HTYPE_ETH ||
   22940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   22944:	d10f      	bne.n	22966 <arp_hdr_check+0x66>
	    arp_hdr->hwlen != sizeof(struct net_eth_addr) ||
   22946:	687b      	ldr	r3, [r7, #4]
   22948:	791b      	ldrb	r3, [r3, #4]
	    ntohs(arp_hdr->protocol) != NET_ETH_PTYPE_IP ||
   2294a:	2b06      	cmp	r3, #6
   2294c:	d10b      	bne.n	22966 <arp_hdr_check+0x66>
	    arp_hdr->protolen != NET_ARP_IPV4_PTYPE_SIZE ||
   2294e:	687b      	ldr	r3, [r7, #4]
   22950:	795b      	ldrb	r3, [r3, #5]
	    arp_hdr->hwlen != sizeof(struct net_eth_addr) ||
   22952:	2b04      	cmp	r3, #4
   22954:	d107      	bne.n	22966 <arp_hdr_check+0x66>
	    net_ipv4_is_addr_loopback(&arp_hdr->src_ipaddr)) {
   22956:	687b      	ldr	r3, [r7, #4]
   22958:	330e      	adds	r3, #14
   2295a:	4618      	mov	r0, r3
   2295c:	f7ff fbac 	bl	220b8 <net_ipv4_is_addr_loopback>
   22960:	4603      	mov	r3, r0
	    arp_hdr->protolen != NET_ARP_IPV4_PTYPE_SIZE ||
   22962:	2b00      	cmp	r3, #0
   22964:	d005      	beq.n	22972 <arp_hdr_check+0x72>
		NET_DBG("DROP: Invalid ARP header");
   22966:	f7ff fb2c 	bl	21fc2 <_is_user_context>
   2296a:	4603      	mov	r3, r0
   2296c:	73fb      	strb	r3, [r7, #15]
		return false;
   2296e:	2300      	movs	r3, #0
   22970:	e000      	b.n	22974 <arp_hdr_check+0x74>
	return true;
   22972:	2301      	movs	r3, #1
}
   22974:	4618      	mov	r0, r3
   22976:	3710      	adds	r7, #16
   22978:	46bd      	mov	sp, r7
   2297a:	bd80      	pop	{r7, pc}

0002297c <net_arp_input>:
{
   2297c:	b590      	push	{r4, r7, lr}
   2297e:	b0a5      	sub	sp, #148	; 0x94
   22980:	af02      	add	r7, sp, #8
   22982:	6078      	str	r0, [r7, #4]
   22984:	6039      	str	r1, [r7, #0]
	if (net_pkt_get_len(pkt) < (sizeof(struct net_arp_hdr) -
   22986:	6878      	ldr	r0, [r7, #4]
   22988:	f7ff fc62 	bl	22250 <net_pkt_get_len>
   2298c:	4604      	mov	r4, r0
				    (net_pkt_ip_data(pkt) - (u8_t *)eth_hdr))) {
   2298e:	6878      	ldr	r0, [r7, #4]
   22990:	f7ff fc78 	bl	22284 <net_pkt_ip_data>
   22994:	4602      	mov	r2, r0
   22996:	683b      	ldr	r3, [r7, #0]
   22998:	1ad3      	subs	r3, r2, r3
	if (net_pkt_get_len(pkt) < (sizeof(struct net_arp_hdr) -
   2299a:	f1c3 031c 	rsb	r3, r3, #28
   2299e:	429c      	cmp	r4, r3
   229a0:	d206      	bcs.n	229b0 <net_arp_input+0x34>
		NET_DBG("Invalid ARP header (len %zu, min %zu bytes) %p",
   229a2:	f7ff fb0e 	bl	21fc2 <_is_user_context>
   229a6:	4603      	mov	r3, r0
   229a8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		return NET_DROP;
   229ac:	2302      	movs	r3, #2
   229ae:	e0e6      	b.n	22b7e <net_arp_input+0x202>
	arp_hdr = NET_ARP_HDR(pkt);
   229b0:	6878      	ldr	r0, [r7, #4]
   229b2:	f7ff fc5b 	bl	2226c <net_pkt_data>
   229b6:	6778      	str	r0, [r7, #116]	; 0x74
	if (!arp_hdr_check(arp_hdr)) {
   229b8:	6f78      	ldr	r0, [r7, #116]	; 0x74
   229ba:	f7ff ffa1 	bl	22900 <arp_hdr_check>
   229be:	4603      	mov	r3, r0
   229c0:	f083 0301 	eor.w	r3, r3, #1
   229c4:	b2db      	uxtb	r3, r3
   229c6:	2b00      	cmp	r3, #0
   229c8:	d001      	beq.n	229ce <net_arp_input+0x52>
		return NET_DROP;
   229ca:	2302      	movs	r3, #2
   229cc:	e0d7      	b.n	22b7e <net_arp_input+0x202>
	switch (ntohs(arp_hdr->opcode)) {
   229ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   229d0:	88db      	ldrh	r3, [r3, #6]
   229d2:	b29b      	uxth	r3, r3
   229d4:	0a1b      	lsrs	r3, r3, #8
   229d6:	b29b      	uxth	r3, r3
   229d8:	b21a      	sxth	r2, r3
   229da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   229dc:	88db      	ldrh	r3, [r3, #6]
   229de:	b29b      	uxth	r3, r3
   229e0:	021b      	lsls	r3, r3, #8
   229e2:	b21b      	sxth	r3, r3
   229e4:	4313      	orrs	r3, r2
   229e6:	b21b      	sxth	r3, r3
   229e8:	b29b      	uxth	r3, r3
   229ea:	2b01      	cmp	r3, #1
   229ec:	d003      	beq.n	229f6 <net_arp_input+0x7a>
   229ee:	2b02      	cmp	r3, #2
   229f0:	f000 80aa 	beq.w	22b48 <net_arp_input+0x1cc>
   229f4:	e0bf      	b.n	22b76 <net_arp_input+0x1fa>
			if (memcmp(&eth_hdr->dst,
   229f6:	683c      	ldr	r4, [r7, #0]
				   net_eth_broadcast_addr(),
   229f8:	f7f0 f888 	bl	12b0c <net_eth_broadcast_addr>
   229fc:	4603      	mov	r3, r0
			if (memcmp(&eth_hdr->dst,
   229fe:	2206      	movs	r2, #6
   22a00:	4619      	mov	r1, r3
   22a02:	4620      	mov	r0, r4
   22a04:	f7df fb22 	bl	204c <memcmp>
   22a08:	4603      	mov	r3, r0
   22a0a:	2b00      	cmp	r3, #0
   22a0c:	d128      	bne.n	22a60 <net_arp_input+0xe4>
			    memcmp(&arp_hdr->dst_hwaddr,
   22a0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   22a10:	f103 0412 	add.w	r4, r3, #18
				   net_eth_broadcast_addr(),
   22a14:	f7f0 f87a 	bl	12b0c <net_eth_broadcast_addr>
   22a18:	4603      	mov	r3, r0
			    memcmp(&arp_hdr->dst_hwaddr,
   22a1a:	2206      	movs	r2, #6
   22a1c:	4619      	mov	r1, r3
   22a1e:	4620      	mov	r0, r4
   22a20:	f7df fb14 	bl	204c <memcmp>
   22a24:	4603      	mov	r3, r0
				   sizeof(struct net_eth_addr)) == 0 &&
   22a26:	2b00      	cmp	r3, #0
   22a28:	d11a      	bne.n	22a60 <net_arp_input+0xe4>
			    memcmp(&arp_hdr->dst_ipaddr, &arp_hdr->src_ipaddr,
   22a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   22a2c:	f103 0018 	add.w	r0, r3, #24
   22a30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   22a32:	330e      	adds	r3, #14
   22a34:	2204      	movs	r2, #4
   22a36:	4619      	mov	r1, r3
   22a38:	f7df fb08 	bl	204c <memcmp>
   22a3c:	4603      	mov	r3, r0
				   sizeof(struct net_eth_addr)) == 0 &&
   22a3e:	2b00      	cmp	r3, #0
   22a40:	d10e      	bne.n	22a60 <net_arp_input+0xe4>
				arp_update(net_pkt_iface(pkt),
   22a42:	6878      	ldr	r0, [r7, #4]
   22a44:	f7ff fbe3 	bl	2220e <net_pkt_iface>
   22a48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   22a4a:	f103 010e 	add.w	r1, r3, #14
   22a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   22a50:	f103 0208 	add.w	r2, r3, #8
   22a54:	2300      	movs	r3, #0
   22a56:	9300      	str	r3, [sp, #0]
   22a58:	2301      	movs	r3, #1
   22a5a:	f7ef fedd 	bl	12818 <arp_update>
				break;
   22a5e:	e08a      	b.n	22b76 <net_arp_input+0x1fa>
		if (memcmp(&eth_hdr->dst, net_eth_broadcast_addr(),
   22a60:	683c      	ldr	r4, [r7, #0]
   22a62:	f7f0 f853 	bl	12b0c <net_eth_broadcast_addr>
   22a66:	4603      	mov	r3, r0
   22a68:	2206      	movs	r2, #6
   22a6a:	4619      	mov	r1, r3
   22a6c:	4620      	mov	r0, r4
   22a6e:	f7df faed 	bl	204c <memcmp>
   22a72:	4603      	mov	r3, r0
   22a74:	2b00      	cmp	r3, #0
   22a76:	d10e      	bne.n	22a96 <net_arp_input+0x11a>
		    net_ipv4_is_addr_mcast(&arp_hdr->src_ipaddr)) {
   22a78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   22a7a:	330e      	adds	r3, #14
   22a7c:	4618      	mov	r0, r3
   22a7e:	f7ff fb3d 	bl	220fc <net_ipv4_is_addr_mcast>
   22a82:	4603      	mov	r3, r0
			   sizeof(struct net_eth_addr)) == 0 &&
   22a84:	2b00      	cmp	r3, #0
   22a86:	d006      	beq.n	22a96 <net_arp_input+0x11a>
			NET_DBG("DROP: eth addr is bcast, src addr is mcast");
   22a88:	f7ff fa9b 	bl	21fc2 <_is_user_context>
   22a8c:	4603      	mov	r3, r0
   22a8e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			return NET_DROP;
   22a92:	2302      	movs	r3, #2
   22a94:	e073      	b.n	22b7e <net_arp_input+0x202>
		addr = if_get_addr(net_pkt_iface(pkt), &arp_hdr->dst_ipaddr);
   22a96:	6878      	ldr	r0, [r7, #4]
   22a98:	f7ff fbb9 	bl	2220e <net_pkt_iface>
   22a9c:	4602      	mov	r2, r0
   22a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   22aa0:	3318      	adds	r3, #24
   22aa2:	4619      	mov	r1, r3
   22aa4:	4610      	mov	r0, r2
   22aa6:	f7ff fcc2 	bl	2242e <if_get_addr>
   22aaa:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		if (!addr) {
   22aae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   22ab2:	2b00      	cmp	r3, #0
   22ab4:	d101      	bne.n	22aba <net_arp_input+0x13e>
			return NET_DROP;
   22ab6:	2302      	movs	r3, #2
   22ab8:	e061      	b.n	22b7e <net_arp_input+0x202>
		NET_DBG("ARP request from %s [%s] for %s",
   22aba:	f7ff fa82 	bl	21fc2 <_is_user_context>
   22abe:	4603      	mov	r3, r0
   22ac0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (memcmp(&eth_hdr->src, &arp_hdr->src_hwaddr,
   22ac4:	683b      	ldr	r3, [r7, #0]
   22ac6:	1d98      	adds	r0, r3, #6
   22ac8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   22aca:	3308      	adds	r3, #8
   22acc:	2206      	movs	r2, #6
   22ace:	4619      	mov	r1, r3
   22ad0:	f7df fabc 	bl	204c <memcmp>
   22ad4:	4603      	mov	r3, r0
   22ad6:	2b00      	cmp	r3, #0
   22ad8:	d11a      	bne.n	22b10 <net_arp_input+0x194>
		    net_eth_is_addr_unspecified(&arp_hdr->dst_hwaddr)) {
   22ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   22adc:	3312      	adds	r3, #18
   22ade:	4618      	mov	r0, r3
   22ae0:	f7ff fbfc 	bl	222dc <net_eth_is_addr_unspecified>
   22ae4:	4603      	mov	r3, r0
			   sizeof(struct net_eth_addr)) == 0 &&
   22ae6:	2b00      	cmp	r3, #0
   22ae8:	d012      	beq.n	22b10 <net_arp_input+0x194>
			NET_DBG("Updating ARP cache for %s [%s]",
   22aea:	f7ff fa6a 	bl	21fc2 <_is_user_context>
   22aee:	4603      	mov	r3, r0
   22af0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
			arp_update(net_pkt_iface(pkt),
   22af4:	6878      	ldr	r0, [r7, #4]
   22af6:	f7ff fb8a 	bl	2220e <net_pkt_iface>
   22afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   22afc:	f103 010e 	add.w	r1, r3, #14
   22b00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   22b02:	f103 0208 	add.w	r2, r3, #8
   22b06:	2301      	movs	r3, #1
   22b08:	9300      	str	r3, [sp, #0]
   22b0a:	2300      	movs	r3, #0
   22b0c:	f7ef fe84 	bl	12818 <arp_update>
		reply = arp_prepare_reply(net_pkt_iface(pkt), pkt, eth_hdr);
   22b10:	6878      	ldr	r0, [r7, #4]
   22b12:	f7ff fb7c 	bl	2220e <net_pkt_iface>
   22b16:	4603      	mov	r3, r0
   22b18:	683a      	ldr	r2, [r7, #0]
   22b1a:	6879      	ldr	r1, [r7, #4]
   22b1c:	4618      	mov	r0, r3
   22b1e:	f7ff fe5d 	bl	227dc <arp_prepare_reply>
   22b22:	67f8      	str	r0, [r7, #124]	; 0x7c
		if (reply) {
   22b24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   22b26:	2b00      	cmp	r3, #0
   22b28:	d008      	beq.n	22b3c <net_arp_input+0x1c0>
			net_if_queue_tx(net_pkt_iface(reply), reply);
   22b2a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
   22b2c:	f7ff fb6f 	bl	2220e <net_pkt_iface>
   22b30:	4603      	mov	r3, r0
   22b32:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
   22b34:	4618      	mov	r0, r3
   22b36:	f7f0 fbfb 	bl	13330 <net_if_queue_tx>
		break;
   22b3a:	e01c      	b.n	22b76 <net_arp_input+0x1fa>
			NET_DBG("Cannot send ARP reply");
   22b3c:	f7ff fa41 	bl	21fc2 <_is_user_context>
   22b40:	4603      	mov	r3, r0
   22b42:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
		break;
   22b46:	e016      	b.n	22b76 <net_arp_input+0x1fa>
		if (net_ipv4_is_my_addr(&arp_hdr->dst_ipaddr)) {
   22b48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   22b4a:	3318      	adds	r3, #24
   22b4c:	4618      	mov	r0, r3
   22b4e:	f7ff fb33 	bl	221b8 <net_ipv4_is_my_addr>
   22b52:	4603      	mov	r3, r0
   22b54:	2b00      	cmp	r3, #0
   22b56:	d00d      	beq.n	22b74 <net_arp_input+0x1f8>
			arp_update(net_pkt_iface(pkt),
   22b58:	6878      	ldr	r0, [r7, #4]
   22b5a:	f7ff fb58 	bl	2220e <net_pkt_iface>
   22b5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   22b60:	f103 010e 	add.w	r1, r3, #14
   22b64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   22b66:	f103 0208 	add.w	r2, r3, #8
   22b6a:	2300      	movs	r3, #0
   22b6c:	9300      	str	r3, [sp, #0]
   22b6e:	2300      	movs	r3, #0
   22b70:	f7ef fe52 	bl	12818 <arp_update>
		break;
   22b74:	bf00      	nop
	net_pkt_unref(pkt);
   22b76:	6878      	ldr	r0, [r7, #4]
   22b78:	f002 ff47 	bl	25a0a <net_pkt_unref>
	return NET_OK;
   22b7c:	2300      	movs	r3, #0
}
   22b7e:	4618      	mov	r0, r3
   22b80:	378c      	adds	r7, #140	; 0x8c
   22b82:	46bd      	mov	sp, r7
   22b84:	bd90      	pop	{r4, r7, pc}

00022b86 <_is_user_context>:
{
   22b86:	b480      	push	{r7}
   22b88:	af00      	add	r7, sp, #0
	return false;
   22b8a:	2300      	movs	r3, #0
}
   22b8c:	4618      	mov	r0, r3
   22b8e:	46bd      	mov	sp, r7
   22b90:	bc80      	pop	{r7}
   22b92:	4770      	bx	lr

00022b94 <net_buf_frags_len>:
{
   22b94:	b480      	push	{r7}
   22b96:	b085      	sub	sp, #20
   22b98:	af00      	add	r7, sp, #0
   22b9a:	6078      	str	r0, [r7, #4]
	size_t bytes = 0;
   22b9c:	2300      	movs	r3, #0
   22b9e:	60fb      	str	r3, [r7, #12]
	while (buf) {
   22ba0:	e008      	b.n	22bb4 <net_buf_frags_len+0x20>
		bytes += buf->len;
   22ba2:	687b      	ldr	r3, [r7, #4]
   22ba4:	899b      	ldrh	r3, [r3, #12]
   22ba6:	461a      	mov	r2, r3
   22ba8:	68fb      	ldr	r3, [r7, #12]
   22baa:	4413      	add	r3, r2
   22bac:	60fb      	str	r3, [r7, #12]
		buf = buf->frags;
   22bae:	687b      	ldr	r3, [r7, #4]
   22bb0:	681b      	ldr	r3, [r3, #0]
   22bb2:	607b      	str	r3, [r7, #4]
	while (buf) {
   22bb4:	687b      	ldr	r3, [r7, #4]
   22bb6:	2b00      	cmp	r3, #0
   22bb8:	d1f3      	bne.n	22ba2 <net_buf_frags_len+0xe>
	return bytes;
   22bba:	68fb      	ldr	r3, [r7, #12]
}
   22bbc:	4618      	mov	r0, r3
   22bbe:	3714      	adds	r7, #20
   22bc0:	46bd      	mov	sp, r7
   22bc2:	bc80      	pop	{r7}
   22bc4:	4770      	bx	lr

00022bc6 <net_linkaddr_cmp>:
 *
 * @return True if the addresses are the same, false otherwise.
 */
static inline bool net_linkaddr_cmp(struct net_linkaddr *lladdr1,
				    struct net_linkaddr *lladdr2)
{
   22bc6:	b580      	push	{r7, lr}
   22bc8:	b082      	sub	sp, #8
   22bca:	af00      	add	r7, sp, #0
   22bcc:	6078      	str	r0, [r7, #4]
   22bce:	6039      	str	r1, [r7, #0]
	if (!lladdr1 || !lladdr2) {
   22bd0:	687b      	ldr	r3, [r7, #4]
   22bd2:	2b00      	cmp	r3, #0
   22bd4:	d002      	beq.n	22bdc <net_linkaddr_cmp+0x16>
   22bd6:	683b      	ldr	r3, [r7, #0]
   22bd8:	2b00      	cmp	r3, #0
   22bda:	d101      	bne.n	22be0 <net_linkaddr_cmp+0x1a>
		return false;
   22bdc:	2300      	movs	r3, #0
   22bde:	e016      	b.n	22c0e <net_linkaddr_cmp+0x48>
	}

	if (lladdr1->len != lladdr2->len) {
   22be0:	687b      	ldr	r3, [r7, #4]
   22be2:	791a      	ldrb	r2, [r3, #4]
   22be4:	683b      	ldr	r3, [r7, #0]
   22be6:	791b      	ldrb	r3, [r3, #4]
   22be8:	429a      	cmp	r2, r3
   22bea:	d001      	beq.n	22bf0 <net_linkaddr_cmp+0x2a>
		return false;
   22bec:	2300      	movs	r3, #0
   22bee:	e00e      	b.n	22c0e <net_linkaddr_cmp+0x48>
	}

	return !memcmp(lladdr1->addr, lladdr2->addr, lladdr1->len);
   22bf0:	687b      	ldr	r3, [r7, #4]
   22bf2:	6818      	ldr	r0, [r3, #0]
   22bf4:	683b      	ldr	r3, [r7, #0]
   22bf6:	6819      	ldr	r1, [r3, #0]
   22bf8:	687b      	ldr	r3, [r7, #4]
   22bfa:	791b      	ldrb	r3, [r3, #4]
   22bfc:	461a      	mov	r2, r3
   22bfe:	f7df fa25 	bl	204c <memcmp>
   22c02:	4603      	mov	r3, r0
   22c04:	2b00      	cmp	r3, #0
   22c06:	bf0c      	ite	eq
   22c08:	2301      	moveq	r3, #1
   22c0a:	2300      	movne	r3, #0
   22c0c:	b2db      	uxtb	r3, r3
}
   22c0e:	4618      	mov	r0, r3
   22c10:	3708      	adds	r7, #8
   22c12:	46bd      	mov	sp, r7
   22c14:	bd80      	pop	{r7, pc}

00022c16 <net_ipv4_addr_cmp>:
{
   22c16:	b480      	push	{r7}
   22c18:	b085      	sub	sp, #20
   22c1a:	af00      	add	r7, sp, #0
   22c1c:	6078      	str	r0, [r7, #4]
   22c1e:	6039      	str	r1, [r7, #0]
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   22c20:	687b      	ldr	r3, [r7, #4]
   22c22:	60fb      	str	r3, [r7, #12]
   22c24:	68fb      	ldr	r3, [r7, #12]
   22c26:	681a      	ldr	r2, [r3, #0]
   22c28:	683b      	ldr	r3, [r7, #0]
   22c2a:	60bb      	str	r3, [r7, #8]
   22c2c:	68bb      	ldr	r3, [r7, #8]
   22c2e:	681b      	ldr	r3, [r3, #0]
   22c30:	429a      	cmp	r2, r3
   22c32:	bf0c      	ite	eq
   22c34:	2301      	moveq	r3, #1
   22c36:	2300      	movne	r3, #0
   22c38:	b2db      	uxtb	r3, r3
}
   22c3a:	4618      	mov	r0, r3
   22c3c:	3714      	adds	r7, #20
   22c3e:	46bd      	mov	sp, r7
   22c40:	bc80      	pop	{r7}
   22c42:	4770      	bx	lr

00022c44 <net_ipv4_is_addr_bcast>:
{
   22c44:	b580      	push	{r7, lr}
   22c46:	b082      	sub	sp, #8
   22c48:	af00      	add	r7, sp, #0
   22c4a:	6078      	str	r0, [r7, #4]
   22c4c:	6039      	str	r1, [r7, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   22c4e:	f7f1 fa75 	bl	1413c <net_ipv4_broadcast_address>
   22c52:	4603      	mov	r3, r0
   22c54:	4619      	mov	r1, r3
   22c56:	6838      	ldr	r0, [r7, #0]
   22c58:	f7ff ffdd 	bl	22c16 <net_ipv4_addr_cmp>
   22c5c:	4603      	mov	r3, r0
   22c5e:	2b00      	cmp	r3, #0
   22c60:	d001      	beq.n	22c66 <net_ipv4_is_addr_bcast+0x22>
		return true;
   22c62:	2301      	movs	r3, #1
   22c64:	e004      	b.n	22c70 <net_ipv4_is_addr_bcast+0x2c>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   22c66:	6839      	ldr	r1, [r7, #0]
   22c68:	6878      	ldr	r0, [r7, #4]
   22c6a:	f7f0 fbf1 	bl	13450 <net_if_ipv4_is_addr_bcast>
   22c6e:	4603      	mov	r3, r0
}
   22c70:	4618      	mov	r0, r3
   22c72:	3708      	adds	r7, #8
   22c74:	46bd      	mov	sp, r7
   22c76:	bd80      	pop	{r7, pc}

00022c78 <net_if_l2_data>:
{
   22c78:	b480      	push	{r7}
   22c7a:	b083      	sub	sp, #12
   22c7c:	af00      	add	r7, sp, #0
   22c7e:	6078      	str	r0, [r7, #4]
	return iface->if_dev->l2_data;
   22c80:	687b      	ldr	r3, [r7, #4]
   22c82:	681b      	ldr	r3, [r3, #0]
   22c84:	689b      	ldr	r3, [r3, #8]
}
   22c86:	4618      	mov	r0, r3
   22c88:	370c      	adds	r7, #12
   22c8a:	46bd      	mov	sp, r7
   22c8c:	bc80      	pop	{r7}
   22c8e:	4770      	bx	lr

00022c90 <net_if_get_device>:
{
   22c90:	b480      	push	{r7}
   22c92:	b083      	sub	sp, #12
   22c94:	af00      	add	r7, sp, #0
   22c96:	6078      	str	r0, [r7, #4]
	return iface->if_dev->dev;
   22c98:	687b      	ldr	r3, [r7, #4]
   22c9a:	681b      	ldr	r3, [r3, #0]
   22c9c:	681b      	ldr	r3, [r3, #0]
}
   22c9e:	4618      	mov	r0, r3
   22ca0:	370c      	adds	r7, #12
   22ca2:	46bd      	mov	sp, r7
   22ca4:	bc80      	pop	{r7}
   22ca6:	4770      	bx	lr

00022ca8 <net_if_get_link_addr>:
{
   22ca8:	b480      	push	{r7}
   22caa:	b083      	sub	sp, #12
   22cac:	af00      	add	r7, sp, #0
   22cae:	6078      	str	r0, [r7, #4]
	return &iface->if_dev->link_addr;
   22cb0:	687b      	ldr	r3, [r7, #4]
   22cb2:	681b      	ldr	r3, [r3, #0]
   22cb4:	3310      	adds	r3, #16
}
   22cb6:	4618      	mov	r0, r3
   22cb8:	370c      	adds	r7, #12
   22cba:	46bd      	mov	sp, r7
   22cbc:	bc80      	pop	{r7}
   22cbe:	4770      	bx	lr

00022cc0 <net_pkt_iface>:
{
   22cc0:	b480      	push	{r7}
   22cc2:	b083      	sub	sp, #12
   22cc4:	af00      	add	r7, sp, #0
   22cc6:	6078      	str	r0, [r7, #4]
	return pkt->iface;
   22cc8:	687b      	ldr	r3, [r7, #4]
   22cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   22ccc:	4618      	mov	r0, r3
   22cce:	370c      	adds	r7, #12
   22cd0:	46bd      	mov	sp, r7
   22cd2:	bc80      	pop	{r7}
   22cd4:	4770      	bx	lr

00022cd6 <net_pkt_family>:
{
   22cd6:	b480      	push	{r7}
   22cd8:	b083      	sub	sp, #12
   22cda:	af00      	add	r7, sp, #0
   22cdc:	6078      	str	r0, [r7, #4]
	return pkt->family;
   22cde:	687b      	ldr	r3, [r7, #4]
   22ce0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
   22ce4:	f3c3 0342 	ubfx	r3, r3, #1, #3
   22ce8:	b2db      	uxtb	r3, r3
}
   22cea:	4618      	mov	r0, r3
   22cec:	370c      	adds	r7, #12
   22cee:	46bd      	mov	sp, r7
   22cf0:	bc80      	pop	{r7}
   22cf2:	4770      	bx	lr

00022cf4 <net_pkt_set_family>:
{
   22cf4:	b480      	push	{r7}
   22cf6:	b083      	sub	sp, #12
   22cf8:	af00      	add	r7, sp, #0
   22cfa:	6078      	str	r0, [r7, #4]
   22cfc:	460b      	mov	r3, r1
   22cfe:	70fb      	strb	r3, [r7, #3]
	pkt->family = family;
   22d00:	78fb      	ldrb	r3, [r7, #3]
   22d02:	f003 0307 	and.w	r3, r3, #7
   22d06:	b2d9      	uxtb	r1, r3
   22d08:	687a      	ldr	r2, [r7, #4]
   22d0a:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
   22d0e:	f361 0343 	bfi	r3, r1, #1, #3
   22d12:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
}
   22d16:	bf00      	nop
   22d18:	370c      	adds	r7, #12
   22d1a:	46bd      	mov	sp, r7
   22d1c:	bc80      	pop	{r7}
   22d1e:	4770      	bx	lr

00022d20 <net_pkt_set_vlan_tci>:
{
   22d20:	b480      	push	{r7}
   22d22:	b083      	sub	sp, #12
   22d24:	af00      	add	r7, sp, #0
   22d26:	6078      	str	r0, [r7, #4]
   22d28:	460b      	mov	r3, r1
   22d2a:	807b      	strh	r3, [r7, #2]
}
   22d2c:	bf00      	nop
   22d2e:	370c      	adds	r7, #12
   22d30:	46bd      	mov	sp, r7
   22d32:	bc80      	pop	{r7}
   22d34:	4770      	bx	lr

00022d36 <net_pkt_get_len>:
{
   22d36:	b580      	push	{r7, lr}
   22d38:	b082      	sub	sp, #8
   22d3a:	af00      	add	r7, sp, #0
   22d3c:	6078      	str	r0, [r7, #4]
	return net_buf_frags_len(pkt->frags);
   22d3e:	687b      	ldr	r3, [r7, #4]
   22d40:	695b      	ldr	r3, [r3, #20]
   22d42:	4618      	mov	r0, r3
   22d44:	f7ff ff26 	bl	22b94 <net_buf_frags_len>
   22d48:	4603      	mov	r3, r0
}
   22d4a:	4618      	mov	r0, r3
   22d4c:	3708      	adds	r7, #8
   22d4e:	46bd      	mov	sp, r7
   22d50:	bd80      	pop	{r7, pc}

00022d52 <net_pkt_data>:
{
   22d52:	b480      	push	{r7}
   22d54:	b083      	sub	sp, #12
   22d56:	af00      	add	r7, sp, #0
   22d58:	6078      	str	r0, [r7, #4]
	return pkt->frags->data;
   22d5a:	687b      	ldr	r3, [r7, #4]
   22d5c:	695b      	ldr	r3, [r3, #20]
   22d5e:	689b      	ldr	r3, [r3, #8]
}
   22d60:	4618      	mov	r0, r3
   22d62:	370c      	adds	r7, #12
   22d64:	46bd      	mov	sp, r7
   22d66:	bc80      	pop	{r7}
   22d68:	4770      	bx	lr

00022d6a <net_pkt_ip_data>:
{
   22d6a:	b480      	push	{r7}
   22d6c:	b083      	sub	sp, #12
   22d6e:	af00      	add	r7, sp, #0
   22d70:	6078      	str	r0, [r7, #4]
	return pkt->frags->data;
   22d72:	687b      	ldr	r3, [r7, #4]
   22d74:	695b      	ldr	r3, [r3, #20]
   22d76:	689b      	ldr	r3, [r3, #8]
}
   22d78:	4618      	mov	r0, r3
   22d7a:	370c      	adds	r7, #12
   22d7c:	46bd      	mov	sp, r7
   22d7e:	bc80      	pop	{r7}
   22d80:	4770      	bx	lr

00022d82 <net_pkt_lladdr_src>:
{
   22d82:	b480      	push	{r7}
   22d84:	b083      	sub	sp, #12
   22d86:	af00      	add	r7, sp, #0
   22d88:	6078      	str	r0, [r7, #4]
	return &pkt->lladdr_src;
   22d8a:	687b      	ldr	r3, [r7, #4]
   22d8c:	332c      	adds	r3, #44	; 0x2c
}
   22d8e:	4618      	mov	r0, r3
   22d90:	370c      	adds	r7, #12
   22d92:	46bd      	mov	sp, r7
   22d94:	bc80      	pop	{r7}
   22d96:	4770      	bx	lr

00022d98 <net_pkt_lladdr_dst>:
{
   22d98:	b480      	push	{r7}
   22d9a:	b083      	sub	sp, #12
   22d9c:	af00      	add	r7, sp, #0
   22d9e:	6078      	str	r0, [r7, #4]
	return &pkt->lladdr_dst;
   22da0:	687b      	ldr	r3, [r7, #4]
   22da2:	3334      	adds	r3, #52	; 0x34
}
   22da4:	4618      	mov	r0, r3
   22da6:	370c      	adds	r7, #12
   22da8:	46bd      	mov	sp, r7
   22daa:	bc80      	pop	{r7}
   22dac:	4770      	bx	lr

00022dae <net_pkt_ipv4_auto>:
{
   22dae:	b480      	push	{r7}
   22db0:	b083      	sub	sp, #12
   22db2:	af00      	add	r7, sp, #0
   22db4:	6078      	str	r0, [r7, #4]
	return false;
   22db6:	2300      	movs	r3, #0
}
   22db8:	4618      	mov	r0, r3
   22dba:	370c      	adds	r7, #12
   22dbc:	46bd      	mov	sp, r7
   22dbe:	bc80      	pop	{r7}
   22dc0:	4770      	bx	lr

00022dc2 <net_eth_is_addr_broadcast>:
{
   22dc2:	b480      	push	{r7}
   22dc4:	b083      	sub	sp, #12
   22dc6:	af00      	add	r7, sp, #0
   22dc8:	6078      	str	r0, [r7, #4]
	if (addr->addr[0] == 0xff &&
   22dca:	687b      	ldr	r3, [r7, #4]
   22dcc:	781b      	ldrb	r3, [r3, #0]
   22dce:	2bff      	cmp	r3, #255	; 0xff
   22dd0:	d115      	bne.n	22dfe <net_eth_is_addr_broadcast+0x3c>
	    addr->addr[1] == 0xff &&
   22dd2:	687b      	ldr	r3, [r7, #4]
   22dd4:	785b      	ldrb	r3, [r3, #1]
	if (addr->addr[0] == 0xff &&
   22dd6:	2bff      	cmp	r3, #255	; 0xff
   22dd8:	d111      	bne.n	22dfe <net_eth_is_addr_broadcast+0x3c>
	    addr->addr[2] == 0xff &&
   22dda:	687b      	ldr	r3, [r7, #4]
   22ddc:	789b      	ldrb	r3, [r3, #2]
	    addr->addr[1] == 0xff &&
   22dde:	2bff      	cmp	r3, #255	; 0xff
   22de0:	d10d      	bne.n	22dfe <net_eth_is_addr_broadcast+0x3c>
	    addr->addr[3] == 0xff &&
   22de2:	687b      	ldr	r3, [r7, #4]
   22de4:	78db      	ldrb	r3, [r3, #3]
	    addr->addr[2] == 0xff &&
   22de6:	2bff      	cmp	r3, #255	; 0xff
   22de8:	d109      	bne.n	22dfe <net_eth_is_addr_broadcast+0x3c>
	    addr->addr[4] == 0xff &&
   22dea:	687b      	ldr	r3, [r7, #4]
   22dec:	791b      	ldrb	r3, [r3, #4]
	    addr->addr[3] == 0xff &&
   22dee:	2bff      	cmp	r3, #255	; 0xff
   22df0:	d105      	bne.n	22dfe <net_eth_is_addr_broadcast+0x3c>
	    addr->addr[5] == 0xff) {
   22df2:	687b      	ldr	r3, [r7, #4]
   22df4:	795b      	ldrb	r3, [r3, #5]
	    addr->addr[4] == 0xff &&
   22df6:	2bff      	cmp	r3, #255	; 0xff
   22df8:	d101      	bne.n	22dfe <net_eth_is_addr_broadcast+0x3c>
		return true;
   22dfa:	2301      	movs	r3, #1
   22dfc:	e000      	b.n	22e00 <net_eth_is_addr_broadcast+0x3e>
	return false;
   22dfe:	2300      	movs	r3, #0
}
   22e00:	4618      	mov	r0, r3
   22e02:	370c      	adds	r7, #12
   22e04:	46bd      	mov	sp, r7
   22e06:	bc80      	pop	{r7}
   22e08:	4770      	bx	lr

00022e0a <net_eth_is_addr_multicast>:
{
   22e0a:	b480      	push	{r7}
   22e0c:	b083      	sub	sp, #12
   22e0e:	af00      	add	r7, sp, #0
   22e10:	6078      	str	r0, [r7, #4]
	if (addr->addr[0] == 0x01 &&
   22e12:	687b      	ldr	r3, [r7, #4]
   22e14:	781b      	ldrb	r3, [r3, #0]
   22e16:	2b01      	cmp	r3, #1
   22e18:	d109      	bne.n	22e2e <net_eth_is_addr_multicast+0x24>
	    addr->addr[1] == 0x00 &&
   22e1a:	687b      	ldr	r3, [r7, #4]
   22e1c:	785b      	ldrb	r3, [r3, #1]
	if (addr->addr[0] == 0x01 &&
   22e1e:	2b00      	cmp	r3, #0
   22e20:	d105      	bne.n	22e2e <net_eth_is_addr_multicast+0x24>
	    addr->addr[2] == 0x5e) {
   22e22:	687b      	ldr	r3, [r7, #4]
   22e24:	789b      	ldrb	r3, [r3, #2]
	    addr->addr[1] == 0x00 &&
   22e26:	2b5e      	cmp	r3, #94	; 0x5e
   22e28:	d101      	bne.n	22e2e <net_eth_is_addr_multicast+0x24>
		return true;
   22e2a:	2301      	movs	r3, #1
   22e2c:	e000      	b.n	22e30 <net_eth_is_addr_multicast+0x26>
	return false;
   22e2e:	2300      	movs	r3, #0
}
   22e30:	4618      	mov	r0, r3
   22e32:	370c      	adds	r7, #12
   22e34:	46bd      	mov	sp, r7
   22e36:	bc80      	pop	{r7}
   22e38:	4770      	bx	lr

00022e3a <net_eth_is_addr_lldp_multicast>:
{
   22e3a:	b480      	push	{r7}
   22e3c:	b083      	sub	sp, #12
   22e3e:	af00      	add	r7, sp, #0
   22e40:	6078      	str	r0, [r7, #4]
	return false;
   22e42:	2300      	movs	r3, #0
}
   22e44:	4618      	mov	r0, r3
   22e46:	370c      	adds	r7, #12
   22e48:	46bd      	mov	sp, r7
   22e4a:	bc80      	pop	{r7}
   22e4c:	4770      	bx	lr

00022e4e <net_eth_get_hw_capabilities>:
{
   22e4e:	b590      	push	{r4, r7, lr}
   22e50:	b085      	sub	sp, #20
   22e52:	af00      	add	r7, sp, #0
   22e54:	6078      	str	r0, [r7, #4]
		(struct ethernet_api *)net_if_get_device(iface)->driver_api;
   22e56:	6878      	ldr	r0, [r7, #4]
   22e58:	f7ff ff1a 	bl	22c90 <net_if_get_device>
   22e5c:	4603      	mov	r3, r0
	const struct ethernet_api *eth =
   22e5e:	685b      	ldr	r3, [r3, #4]
   22e60:	60fb      	str	r3, [r7, #12]
	if (!eth->get_capabilities) {
   22e62:	68fb      	ldr	r3, [r7, #12]
   22e64:	68db      	ldr	r3, [r3, #12]
   22e66:	2b00      	cmp	r3, #0
   22e68:	d101      	bne.n	22e6e <net_eth_get_hw_capabilities+0x20>
		return (enum ethernet_hw_caps)0;
   22e6a:	2300      	movs	r3, #0
   22e6c:	e008      	b.n	22e80 <net_eth_get_hw_capabilities+0x32>
	return eth->get_capabilities(net_if_get_device(iface));
   22e6e:	68fb      	ldr	r3, [r7, #12]
   22e70:	68dc      	ldr	r4, [r3, #12]
   22e72:	6878      	ldr	r0, [r7, #4]
   22e74:	f7ff ff0c 	bl	22c90 <net_if_get_device>
   22e78:	4603      	mov	r3, r0
   22e7a:	4618      	mov	r0, r3
   22e7c:	47a0      	blx	r4
   22e7e:	4603      	mov	r3, r0
}
   22e80:	4618      	mov	r0, r3
   22e82:	3714      	adds	r7, #20
   22e84:	46bd      	mov	sp, r7
   22e86:	bd90      	pop	{r4, r7, pc}

00022e88 <net_eth_is_vlan_enabled>:
bool net_eth_is_vlan_enabled(struct ethernet_context *ctx,
			     struct net_if *iface);
#else
static inline bool net_eth_is_vlan_enabled(struct ethernet_context *ctx,
					   struct net_if *iface)
{
   22e88:	b480      	push	{r7}
   22e8a:	b083      	sub	sp, #12
   22e8c:	af00      	add	r7, sp, #0
   22e8e:	6078      	str	r0, [r7, #4]
   22e90:	6039      	str	r1, [r7, #0]
	return false;
   22e92:	2300      	movs	r3, #0
}
   22e94:	4618      	mov	r0, r3
   22e96:	370c      	adds	r7, #12
   22e98:	46bd      	mov	sp, r7
   22e9a:	bc80      	pop	{r7}
   22e9c:	4770      	bx	lr

00022e9e <ethernet_update_length>:
{
   22e9e:	b590      	push	{r4, r7, lr}
   22ea0:	b085      	sub	sp, #20
   22ea2:	af00      	add	r7, sp, #0
   22ea4:	6078      	str	r0, [r7, #4]
   22ea6:	6039      	str	r1, [r7, #0]
	if (net_pkt_family(pkt) == AF_INET) {
   22ea8:	6838      	ldr	r0, [r7, #0]
   22eaa:	f7ff ff14 	bl	22cd6 <net_pkt_family>
   22eae:	4603      	mov	r3, r0
   22eb0:	2b01      	cmp	r3, #1
   22eb2:	d119      	bne.n	22ee8 <ethernet_update_length+0x4a>
		len = ntohs(NET_IPV4_HDR(pkt)->len);
   22eb4:	6838      	ldr	r0, [r7, #0]
   22eb6:	f7ff ff58 	bl	22d6a <net_pkt_ip_data>
   22eba:	4603      	mov	r3, r0
   22ebc:	885b      	ldrh	r3, [r3, #2]
   22ebe:	b29b      	uxth	r3, r3
   22ec0:	0a1b      	lsrs	r3, r3, #8
   22ec2:	b29b      	uxth	r3, r3
   22ec4:	b21b      	sxth	r3, r3
   22ec6:	b2db      	uxtb	r3, r3
   22ec8:	b21c      	sxth	r4, r3
   22eca:	6838      	ldr	r0, [r7, #0]
   22ecc:	f7ff ff4d 	bl	22d6a <net_pkt_ip_data>
   22ed0:	4603      	mov	r3, r0
   22ed2:	885b      	ldrh	r3, [r3, #2]
   22ed4:	b29b      	uxth	r3, r3
   22ed6:	021b      	lsls	r3, r3, #8
   22ed8:	b21b      	sxth	r3, r3
   22eda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   22ede:	b21b      	sxth	r3, r3
   22ee0:	4323      	orrs	r3, r4
   22ee2:	b21b      	sxth	r3, r3
   22ee4:	81fb      	strh	r3, [r7, #14]
   22ee6:	e01a      	b.n	22f1e <ethernet_update_length+0x80>
		len = ntohs(NET_IPV6_HDR(pkt)->len) + NET_IPV6H_LEN;
   22ee8:	6838      	ldr	r0, [r7, #0]
   22eea:	f7ff ff3e 	bl	22d6a <net_pkt_ip_data>
   22eee:	4603      	mov	r3, r0
   22ef0:	889b      	ldrh	r3, [r3, #4]
   22ef2:	b29b      	uxth	r3, r3
   22ef4:	0a1b      	lsrs	r3, r3, #8
   22ef6:	b29b      	uxth	r3, r3
   22ef8:	b21b      	sxth	r3, r3
   22efa:	b2db      	uxtb	r3, r3
   22efc:	b21c      	sxth	r4, r3
   22efe:	6838      	ldr	r0, [r7, #0]
   22f00:	f7ff ff33 	bl	22d6a <net_pkt_ip_data>
   22f04:	4603      	mov	r3, r0
   22f06:	889b      	ldrh	r3, [r3, #4]
   22f08:	b29b      	uxth	r3, r3
   22f0a:	021b      	lsls	r3, r3, #8
   22f0c:	b21b      	sxth	r3, r3
   22f0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   22f12:	b21b      	sxth	r3, r3
   22f14:	4323      	orrs	r3, r4
   22f16:	b21b      	sxth	r3, r3
   22f18:	3328      	adds	r3, #40	; 0x28
   22f1a:	b21b      	sxth	r3, r3
   22f1c:	81fb      	strh	r3, [r7, #14]
	if (len < NET_ETH_MINIMAL_FRAME_SIZE - sizeof(struct net_eth_hdr)) {
   22f1e:	89fb      	ldrh	r3, [r7, #14]
   22f20:	2b2d      	cmp	r3, #45	; 0x2d
   22f22:	d819      	bhi.n	22f58 <ethernet_update_length+0xba>
		for (frag = pkt->frags; frag; frag = frag->frags) {
   22f24:	683b      	ldr	r3, [r7, #0]
   22f26:	695b      	ldr	r3, [r3, #20]
   22f28:	60bb      	str	r3, [r7, #8]
   22f2a:	e012      	b.n	22f52 <ethernet_update_length+0xb4>
			if (frag->len < len) {
   22f2c:	68bb      	ldr	r3, [r7, #8]
   22f2e:	899b      	ldrh	r3, [r3, #12]
   22f30:	89fa      	ldrh	r2, [r7, #14]
   22f32:	429a      	cmp	r2, r3
   22f34:	d905      	bls.n	22f42 <ethernet_update_length+0xa4>
				len -= frag->len;
   22f36:	68bb      	ldr	r3, [r7, #8]
   22f38:	899b      	ldrh	r3, [r3, #12]
   22f3a:	89fa      	ldrh	r2, [r7, #14]
   22f3c:	1ad3      	subs	r3, r2, r3
   22f3e:	81fb      	strh	r3, [r7, #14]
   22f40:	e004      	b.n	22f4c <ethernet_update_length+0xae>
				frag->len = len;
   22f42:	68bb      	ldr	r3, [r7, #8]
   22f44:	89fa      	ldrh	r2, [r7, #14]
   22f46:	819a      	strh	r2, [r3, #12]
				len = 0U;
   22f48:	2300      	movs	r3, #0
   22f4a:	81fb      	strh	r3, [r7, #14]
		for (frag = pkt->frags; frag; frag = frag->frags) {
   22f4c:	68bb      	ldr	r3, [r7, #8]
   22f4e:	681b      	ldr	r3, [r3, #0]
   22f50:	60bb      	str	r3, [r7, #8]
   22f52:	68bb      	ldr	r3, [r7, #8]
   22f54:	2b00      	cmp	r3, #0
   22f56:	d1e9      	bne.n	22f2c <ethernet_update_length+0x8e>
}
   22f58:	bf00      	nop
   22f5a:	3714      	adds	r7, #20
   22f5c:	46bd      	mov	sp, r7
   22f5e:	bd90      	pop	{r4, r7, pc}

00022f60 <ethernet_update_rx_stats>:
{
   22f60:	b480      	push	{r7}
   22f62:	b085      	sub	sp, #20
   22f64:	af00      	add	r7, sp, #0
   22f66:	60f8      	str	r0, [r7, #12]
   22f68:	60b9      	str	r1, [r7, #8]
   22f6a:	607a      	str	r2, [r7, #4]
}
   22f6c:	bf00      	nop
   22f6e:	3714      	adds	r7, #20
   22f70:	46bd      	mov	sp, r7
   22f72:	bc80      	pop	{r7}
   22f74:	4770      	bx	lr

00022f76 <ethernet_recv>:
{
   22f76:	b580      	push	{r7, lr}
   22f78:	b0a6      	sub	sp, #152	; 0x98
   22f7a:	af00      	add	r7, sp, #0
   22f7c:	6078      	str	r0, [r7, #4]
   22f7e:	6039      	str	r1, [r7, #0]
	struct ethernet_context *ctx = net_if_l2_data(iface);
   22f80:	6878      	ldr	r0, [r7, #4]
   22f82:	f7ff fe79 	bl	22c78 <net_if_l2_data>
   22f86:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	struct net_eth_hdr *hdr = NET_ETH_HDR(pkt);
   22f8a:	6838      	ldr	r0, [r7, #0]
   22f8c:	f7ff fee1 	bl	22d52 <net_pkt_data>
   22f90:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	u8_t hdr_len = sizeof(struct net_eth_hdr);
   22f94:	230e      	movs	r3, #14
   22f96:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	u16_t type = ntohs(hdr->type);
   22f9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   22f9e:	899b      	ldrh	r3, [r3, #12]
   22fa0:	b29b      	uxth	r3, r3
   22fa2:	0a1b      	lsrs	r3, r3, #8
   22fa4:	b29b      	uxth	r3, r3
   22fa6:	b21a      	sxth	r2, r3
   22fa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   22fac:	899b      	ldrh	r3, [r3, #12]
   22fae:	b29b      	uxth	r3, r3
   22fb0:	021b      	lsls	r3, r3, #8
   22fb2:	b21b      	sxth	r3, r3
   22fb4:	4313      	orrs	r3, r2
   22fb6:	b21b      	sxth	r3, r3
   22fb8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	if (net_eth_is_vlan_enabled(ctx, iface) &&
   22fbc:	6879      	ldr	r1, [r7, #4]
   22fbe:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
   22fc2:	f7ff ff61 	bl	22e88 <net_eth_is_vlan_enabled>
   22fc6:	4603      	mov	r3, r0
   22fc8:	2b00      	cmp	r3, #0
   22fca:	d02c      	beq.n	23026 <ethernet_recv+0xb0>
   22fcc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
   22fd0:	f5b3 4f01 	cmp.w	r3, #33024	; 0x8100
   22fd4:	d127      	bne.n	23026 <ethernet_recv+0xb0>
			(struct net_eth_vlan_hdr *)NET_ETH_HDR(pkt);
   22fd6:	6838      	ldr	r0, [r7, #0]
   22fd8:	f7ff febb 	bl	22d52 <net_pkt_data>
   22fdc:	67b8      	str	r0, [r7, #120]	; 0x78
		net_pkt_set_vlan_tci(pkt, ntohs(hdr_vlan->vlan.tci));
   22fde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   22fe0:	89db      	ldrh	r3, [r3, #14]
   22fe2:	b29b      	uxth	r3, r3
   22fe4:	0a1b      	lsrs	r3, r3, #8
   22fe6:	b29b      	uxth	r3, r3
   22fe8:	b21a      	sxth	r2, r3
   22fea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   22fec:	89db      	ldrh	r3, [r3, #14]
   22fee:	b29b      	uxth	r3, r3
   22ff0:	021b      	lsls	r3, r3, #8
   22ff2:	b21b      	sxth	r3, r3
   22ff4:	4313      	orrs	r3, r2
   22ff6:	b21b      	sxth	r3, r3
   22ff8:	b29b      	uxth	r3, r3
   22ffa:	4619      	mov	r1, r3
   22ffc:	6838      	ldr	r0, [r7, #0]
   22ffe:	f7ff fe8f 	bl	22d20 <net_pkt_set_vlan_tci>
		type = ntohs(hdr_vlan->type);
   23002:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   23004:	8a1b      	ldrh	r3, [r3, #16]
   23006:	b29b      	uxth	r3, r3
   23008:	0a1b      	lsrs	r3, r3, #8
   2300a:	b29b      	uxth	r3, r3
   2300c:	b21a      	sxth	r2, r3
   2300e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   23010:	8a1b      	ldrh	r3, [r3, #16]
   23012:	b29b      	uxth	r3, r3
   23014:	021b      	lsls	r3, r3, #8
   23016:	b21b      	sxth	r3, r3
   23018:	4313      	orrs	r3, r2
   2301a:	b21b      	sxth	r3, r3
   2301c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
		hdr_len = sizeof(struct net_eth_vlan_hdr);
   23020:	2312      	movs	r3, #18
   23022:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	switch (type) {
   23026:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
   2302a:	f640 0206 	movw	r2, #2054	; 0x806
   2302e:	4293      	cmp	r3, r2
   23030:	d010      	beq.n	23054 <ethernet_recv+0xde>
   23032:	f640 0206 	movw	r2, #2054	; 0x806
   23036:	4293      	cmp	r3, r2
   23038:	dc03      	bgt.n	23042 <ethernet_recv+0xcc>
   2303a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   2303e:	d009      	beq.n	23054 <ethernet_recv+0xde>
   23040:	e01e      	b.n	23080 <ethernet_recv+0x10a>
   23042:	f248 62dd 	movw	r2, #34525	; 0x86dd
   23046:	4293      	cmp	r3, r2
   23048:	d00c      	beq.n	23064 <ethernet_recv+0xee>
   2304a:	f648 02cc 	movw	r2, #35020	; 0x88cc
   2304e:	4293      	cmp	r3, r2
   23050:	d010      	beq.n	23074 <ethernet_recv+0xfe>
   23052:	e015      	b.n	23080 <ethernet_recv+0x10a>
		net_pkt_set_family(pkt, AF_INET);
   23054:	2101      	movs	r1, #1
   23056:	6838      	ldr	r0, [r7, #0]
   23058:	f7ff fe4c 	bl	22cf4 <net_pkt_set_family>
		family = AF_INET;
   2305c:	2301      	movs	r3, #1
   2305e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
		break;
   23062:	e013      	b.n	2308c <ethernet_recv+0x116>
		net_pkt_set_family(pkt, AF_INET6);
   23064:	2102      	movs	r1, #2
   23066:	6838      	ldr	r0, [r7, #0]
   23068:	f7ff fe44 	bl	22cf4 <net_pkt_set_family>
		family = AF_INET6;
   2306c:	2302      	movs	r3, #2
   2306e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
		break;
   23072:	e00b      	b.n	2308c <ethernet_recv+0x116>
		NET_DBG("LLDP Rx agent not enabled");
   23074:	f7ff fd87 	bl	22b86 <_is_user_context>
   23078:	4603      	mov	r3, r0
   2307a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		goto drop;
   2307e:	e09e      	b.n	231be <ethernet_recv+0x248>
		NET_DBG("Unknown hdr type 0x%04x iface %p", type, iface);
   23080:	f7ff fd81 	bl	22b86 <_is_user_context>
   23084:	4603      	mov	r3, r0
   23086:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
		goto drop;
   2308a:	e098      	b.n	231be <ethernet_recv+0x248>
	lladdr = net_pkt_lladdr_src(pkt);
   2308c:	6838      	ldr	r0, [r7, #0]
   2308e:	f7ff fe78 	bl	22d82 <net_pkt_lladdr_src>
   23092:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	lladdr->addr = hdr->src.addr;
   23096:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   2309a:	1d9a      	adds	r2, r3, #6
   2309c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   230a0:	601a      	str	r2, [r3, #0]
	lladdr->len = sizeof(struct net_eth_addr);
   230a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   230a6:	2206      	movs	r2, #6
   230a8:	711a      	strb	r2, [r3, #4]
	lladdr->type = NET_LINK_ETHERNET;
   230aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   230ae:	2203      	movs	r2, #3
   230b0:	715a      	strb	r2, [r3, #5]
	lladdr = net_pkt_lladdr_dst(pkt);
   230b2:	6838      	ldr	r0, [r7, #0]
   230b4:	f7ff fe70 	bl	22d98 <net_pkt_lladdr_dst>
   230b8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	lladdr->addr = hdr->dst.addr;
   230bc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   230c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   230c4:	601a      	str	r2, [r3, #0]
	lladdr->len = sizeof(struct net_eth_addr);
   230c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   230ca:	2206      	movs	r2, #6
   230cc:	711a      	strb	r2, [r3, #4]
	lladdr->type = NET_LINK_ETHERNET;
   230ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   230d2:	2203      	movs	r2, #3
   230d4:	715a      	strb	r2, [r3, #5]
	if (net_eth_is_vlan_enabled(ctx, iface)) {
   230d6:	6879      	ldr	r1, [r7, #4]
   230d8:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
   230dc:	f7ff fed4 	bl	22e88 <net_eth_is_vlan_enabled>
   230e0:	4603      	mov	r3, r0
   230e2:	2b00      	cmp	r3, #0
   230e4:	d004      	beq.n	230f0 <ethernet_recv+0x17a>
			(struct net_eth_vlan_hdr *)NET_ETH_HDR(pkt);
   230e6:	6838      	ldr	r0, [r7, #0]
   230e8:	f7ff fe33 	bl	22d52 <net_pkt_data>
   230ec:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
	if (!net_eth_is_addr_broadcast((struct net_eth_addr *)lladdr->addr) &&
   230f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   230f4:	681b      	ldr	r3, [r3, #0]
   230f6:	4618      	mov	r0, r3
   230f8:	f7ff fe63 	bl	22dc2 <net_eth_is_addr_broadcast>
   230fc:	4603      	mov	r3, r0
   230fe:	f083 0301 	eor.w	r3, r3, #1
   23102:	b2db      	uxtb	r3, r3
   23104:	2b00      	cmp	r3, #0
   23106:	d02c      	beq.n	23162 <ethernet_recv+0x1ec>
	    !net_eth_is_addr_multicast((struct net_eth_addr *)lladdr->addr) &&
   23108:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   2310c:	681b      	ldr	r3, [r3, #0]
   2310e:	4618      	mov	r0, r3
   23110:	f7ff fe7b 	bl	22e0a <net_eth_is_addr_multicast>
   23114:	4603      	mov	r3, r0
   23116:	f083 0301 	eor.w	r3, r3, #1
   2311a:	b2db      	uxtb	r3, r3
	if (!net_eth_is_addr_broadcast((struct net_eth_addr *)lladdr->addr) &&
   2311c:	2b00      	cmp	r3, #0
   2311e:	d020      	beq.n	23162 <ethernet_recv+0x1ec>
		    (struct net_eth_addr *)lladdr->addr) &&
   23120:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   23124:	681b      	ldr	r3, [r3, #0]
	    !net_eth_is_addr_lldp_multicast(
   23126:	4618      	mov	r0, r3
   23128:	f7ff fe87 	bl	22e3a <net_eth_is_addr_lldp_multicast>
   2312c:	4603      	mov	r3, r0
   2312e:	f083 0301 	eor.w	r3, r3, #1
   23132:	b2db      	uxtb	r3, r3
	    !net_eth_is_addr_multicast((struct net_eth_addr *)lladdr->addr) &&
   23134:	2b00      	cmp	r3, #0
   23136:	d014      	beq.n	23162 <ethernet_recv+0x1ec>
	    !net_linkaddr_cmp(net_if_get_link_addr(iface), lladdr)) {
   23138:	6878      	ldr	r0, [r7, #4]
   2313a:	f7ff fdb5 	bl	22ca8 <net_if_get_link_addr>
   2313e:	4603      	mov	r3, r0
   23140:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   23144:	4618      	mov	r0, r3
   23146:	f7ff fd3e 	bl	22bc6 <net_linkaddr_cmp>
   2314a:	4603      	mov	r3, r0
   2314c:	f083 0301 	eor.w	r3, r3, #1
   23150:	b2db      	uxtb	r3, r3
		    (struct net_eth_addr *)lladdr->addr) &&
   23152:	2b00      	cmp	r3, #0
   23154:	d005      	beq.n	23162 <ethernet_recv+0x1ec>
		NET_DBG("Dropping frame, not for me [%s]",
   23156:	f7ff fd16 	bl	22b86 <_is_user_context>
   2315a:	4603      	mov	r3, r0
   2315c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
		goto drop;
   23160:	e02d      	b.n	231be <ethernet_recv+0x248>
	ethernet_update_rx_stats(iface, pkt, net_pkt_get_len(pkt));
   23162:	6838      	ldr	r0, [r7, #0]
   23164:	f7ff fde7 	bl	22d36 <net_pkt_get_len>
   23168:	4603      	mov	r3, r0
   2316a:	461a      	mov	r2, r3
   2316c:	6839      	ldr	r1, [r7, #0]
   2316e:	6878      	ldr	r0, [r7, #4]
   23170:	f7ff fef6 	bl	22f60 <ethernet_update_rx_stats>
	net_buf_pull(pkt->frags, hdr_len);
   23174:	683b      	ldr	r3, [r7, #0]
   23176:	695b      	ldr	r3, [r3, #20]
   23178:	3308      	adds	r3, #8
   2317a:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
   2317e:	4611      	mov	r1, r2
   23180:	4618      	mov	r0, r3
   23182:	f7fe fdd3 	bl	21d2c <net_buf_simple_pull>
	if (family == AF_INET && type == NET_ETH_PTYPE_ARP) {
   23186:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
   2318a:	2b01      	cmp	r3, #1
   2318c:	d111      	bne.n	231b2 <ethernet_recv+0x23c>
   2318e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
   23192:	f640 0206 	movw	r2, #2054	; 0x806
   23196:	4293      	cmp	r3, r2
   23198:	d10b      	bne.n	231b2 <ethernet_recv+0x23c>
		NET_DBG("ARP packet from %s received",
   2319a:	f7ff fcf4 	bl	22b86 <_is_user_context>
   2319e:	4603      	mov	r3, r0
   231a0:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
		return net_arp_input(pkt, hdr);
   231a4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   231a8:	6838      	ldr	r0, [r7, #0]
   231aa:	f7ff fbe7 	bl	2297c <net_arp_input>
   231ae:	4603      	mov	r3, r0
   231b0:	e006      	b.n	231c0 <ethernet_recv+0x24a>
	ethernet_update_length(iface, pkt);
   231b2:	6839      	ldr	r1, [r7, #0]
   231b4:	6878      	ldr	r0, [r7, #4]
   231b6:	f7ff fe72 	bl	22e9e <ethernet_update_length>
	return NET_CONTINUE;
   231ba:	2301      	movs	r3, #1
   231bc:	e000      	b.n	231c0 <ethernet_recv+0x24a>
	return NET_DROP;
   231be:	2302      	movs	r3, #2
}
   231c0:	4618      	mov	r0, r3
   231c2:	3798      	adds	r7, #152	; 0x98
   231c4:	46bd      	mov	sp, r7
   231c6:	bd80      	pop	{r7, pc}

000231c8 <ethernet_ipv4_dst_is_broadcast_or_mcast>:
{
   231c8:	b590      	push	{r4, r7, lr}
   231ca:	b083      	sub	sp, #12
   231cc:	af00      	add	r7, sp, #0
   231ce:	6078      	str	r0, [r7, #4]
	if (net_ipv4_is_addr_bcast(net_pkt_iface(pkt),
   231d0:	6878      	ldr	r0, [r7, #4]
   231d2:	f7ff fd75 	bl	22cc0 <net_pkt_iface>
   231d6:	4604      	mov	r4, r0
				   &NET_IPV4_HDR(pkt)->dst) ||
   231d8:	6878      	ldr	r0, [r7, #4]
   231da:	f7ff fdc6 	bl	22d6a <net_pkt_ip_data>
   231de:	4603      	mov	r3, r0
   231e0:	3310      	adds	r3, #16
	if (net_ipv4_is_addr_bcast(net_pkt_iface(pkt),
   231e2:	4619      	mov	r1, r3
   231e4:	4620      	mov	r0, r4
   231e6:	f7ff fd2d 	bl	22c44 <net_ipv4_is_addr_bcast>
   231ea:	4603      	mov	r3, r0
   231ec:	2b00      	cmp	r3, #0
   231ee:	d106      	bne.n	231fe <ethernet_ipv4_dst_is_broadcast_or_mcast+0x36>
	    NET_IPV4_HDR(pkt)->dst.s4_addr[0] == 224U) {
   231f0:	6878      	ldr	r0, [r7, #4]
   231f2:	f7ff fdba 	bl	22d6a <net_pkt_ip_data>
   231f6:	4603      	mov	r3, r0
   231f8:	7c1b      	ldrb	r3, [r3, #16]
				   &NET_IPV4_HDR(pkt)->dst) ||
   231fa:	2be0      	cmp	r3, #224	; 0xe0
   231fc:	d101      	bne.n	23202 <ethernet_ipv4_dst_is_broadcast_or_mcast+0x3a>
		return true;
   231fe:	2301      	movs	r3, #1
   23200:	e000      	b.n	23204 <ethernet_ipv4_dst_is_broadcast_or_mcast+0x3c>
	return false;
   23202:	2300      	movs	r3, #0
}
   23204:	4618      	mov	r0, r3
   23206:	370c      	adds	r7, #12
   23208:	46bd      	mov	sp, r7
   2320a:	bd90      	pop	{r4, r7, pc}

0002320c <ethernet_fill_in_dst_on_ipv4_mcast>:
{
   2320c:	b580      	push	{r7, lr}
   2320e:	b082      	sub	sp, #8
   23210:	af00      	add	r7, sp, #0
   23212:	6078      	str	r0, [r7, #4]
   23214:	6039      	str	r1, [r7, #0]
	if (net_pkt_family(pkt) == AF_INET &&
   23216:	6878      	ldr	r0, [r7, #4]
   23218:	f7ff fd5d 	bl	22cd6 <net_pkt_family>
   2321c:	4603      	mov	r3, r0
   2321e:	2b01      	cmp	r3, #1
   23220:	d12d      	bne.n	2327e <ethernet_fill_in_dst_on_ipv4_mcast+0x72>
	    NET_IPV4_HDR(pkt)->dst.s4_addr[0] == 224U) {
   23222:	6878      	ldr	r0, [r7, #4]
   23224:	f7ff fda1 	bl	22d6a <net_pkt_ip_data>
   23228:	4603      	mov	r3, r0
   2322a:	7c1b      	ldrb	r3, [r3, #16]
	if (net_pkt_family(pkt) == AF_INET &&
   2322c:	2be0      	cmp	r3, #224	; 0xe0
   2322e:	d126      	bne.n	2327e <ethernet_fill_in_dst_on_ipv4_mcast+0x72>
		dst->addr[0] = 0x01;
   23230:	683b      	ldr	r3, [r7, #0]
   23232:	2201      	movs	r2, #1
   23234:	701a      	strb	r2, [r3, #0]
		dst->addr[1] = 0x00;
   23236:	683b      	ldr	r3, [r7, #0]
   23238:	2200      	movs	r2, #0
   2323a:	705a      	strb	r2, [r3, #1]
		dst->addr[2] = 0x5e;
   2323c:	683b      	ldr	r3, [r7, #0]
   2323e:	225e      	movs	r2, #94	; 0x5e
   23240:	709a      	strb	r2, [r3, #2]
		dst->addr[3] = NET_IPV4_HDR(pkt)->dst.s4_addr[1];
   23242:	6878      	ldr	r0, [r7, #4]
   23244:	f7ff fd91 	bl	22d6a <net_pkt_ip_data>
   23248:	4603      	mov	r3, r0
   2324a:	7c5a      	ldrb	r2, [r3, #17]
   2324c:	683b      	ldr	r3, [r7, #0]
   2324e:	70da      	strb	r2, [r3, #3]
		dst->addr[4] = NET_IPV4_HDR(pkt)->dst.s4_addr[2];
   23250:	6878      	ldr	r0, [r7, #4]
   23252:	f7ff fd8a 	bl	22d6a <net_pkt_ip_data>
   23256:	4603      	mov	r3, r0
   23258:	7c9a      	ldrb	r2, [r3, #18]
   2325a:	683b      	ldr	r3, [r7, #0]
   2325c:	711a      	strb	r2, [r3, #4]
		dst->addr[5] = NET_IPV4_HDR(pkt)->dst.s4_addr[3];
   2325e:	6878      	ldr	r0, [r7, #4]
   23260:	f7ff fd83 	bl	22d6a <net_pkt_ip_data>
   23264:	4603      	mov	r3, r0
   23266:	7cda      	ldrb	r2, [r3, #19]
   23268:	683b      	ldr	r3, [r7, #0]
   2326a:	715a      	strb	r2, [r3, #5]
		dst->addr[3] &= 0x7f;
   2326c:	683b      	ldr	r3, [r7, #0]
   2326e:	78db      	ldrb	r3, [r3, #3]
   23270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23274:	b2da      	uxtb	r2, r3
   23276:	683b      	ldr	r3, [r7, #0]
   23278:	70da      	strb	r2, [r3, #3]
		return true;
   2327a:	2301      	movs	r3, #1
   2327c:	e000      	b.n	23280 <ethernet_fill_in_dst_on_ipv4_mcast+0x74>
	return false;
   2327e:	2300      	movs	r3, #0
}
   23280:	4618      	mov	r0, r3
   23282:	3708      	adds	r7, #8
   23284:	46bd      	mov	sp, r7
   23286:	bd80      	pop	{r7, pc}

00023288 <ethernet_ll_prepare_on_ipv4>:
{
   23288:	b580      	push	{r7, lr}
   2328a:	b094      	sub	sp, #80	; 0x50
   2328c:	af00      	add	r7, sp, #0
   2328e:	6078      	str	r0, [r7, #4]
   23290:	6039      	str	r1, [r7, #0]
	if (ethernet_ipv4_dst_is_broadcast_or_mcast(pkt)) {
   23292:	6838      	ldr	r0, [r7, #0]
   23294:	f7ff ff98 	bl	231c8 <ethernet_ipv4_dst_is_broadcast_or_mcast>
   23298:	4603      	mov	r3, r0
   2329a:	2b00      	cmp	r3, #0
   2329c:	d001      	beq.n	232a2 <ethernet_ll_prepare_on_ipv4+0x1a>
		return pkt;
   2329e:	683b      	ldr	r3, [r7, #0]
   232a0:	e023      	b.n	232ea <ethernet_ll_prepare_on_ipv4+0x62>
		arp_pkt = net_arp_prepare(pkt, &NET_IPV4_HDR(pkt)->dst, NULL);
   232a2:	6838      	ldr	r0, [r7, #0]
   232a4:	f7ff fd61 	bl	22d6a <net_pkt_ip_data>
   232a8:	4603      	mov	r3, r0
   232aa:	3310      	adds	r3, #16
   232ac:	2200      	movs	r2, #0
   232ae:	4619      	mov	r1, r3
   232b0:	6838      	ldr	r0, [r7, #0]
   232b2:	f7ff f9f1 	bl	22698 <net_arp_prepare>
   232b6:	64b8      	str	r0, [r7, #72]	; 0x48
		if (!arp_pkt) {
   232b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   232ba:	2b00      	cmp	r3, #0
   232bc:	d101      	bne.n	232c2 <ethernet_ll_prepare_on_ipv4+0x3a>
			return NULL;
   232be:	2300      	movs	r3, #0
   232c0:	e013      	b.n	232ea <ethernet_ll_prepare_on_ipv4+0x62>
		if (pkt != arp_pkt) {
   232c2:	683a      	ldr	r2, [r7, #0]
   232c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   232c6:	429a      	cmp	r2, r3
   232c8:	d009      	beq.n	232de <ethernet_ll_prepare_on_ipv4+0x56>
			NET_DBG("Sending arp pkt %p (orig %p) to iface %p",
   232ca:	f7ff fc5c 	bl	22b86 <_is_user_context>
   232ce:	4603      	mov	r3, r0
   232d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			net_pkt_unref(pkt);
   232d4:	6838      	ldr	r0, [r7, #0]
   232d6:	f002 fb98 	bl	25a0a <net_pkt_unref>
			return arp_pkt;
   232da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   232dc:	e005      	b.n	232ea <ethernet_ll_prepare_on_ipv4+0x62>
		NET_DBG("Found ARP entry, sending pkt %p to iface %p",
   232de:	f7ff fc52 	bl	22b86 <_is_user_context>
   232e2:	4603      	mov	r3, r0
   232e4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	return pkt;
   232e8:	683b      	ldr	r3, [r7, #0]
}
   232ea:	4618      	mov	r0, r3
   232ec:	3750      	adds	r7, #80	; 0x50
   232ee:	46bd      	mov	sp, r7
   232f0:	bd80      	pop	{r7, pc}

000232f2 <ethernet_fill_header>:
{
   232f2:	b590      	push	{r4, r7, lr}
   232f4:	b09b      	sub	sp, #108	; 0x6c
   232f6:	af00      	add	r7, sp, #0
   232f8:	60f8      	str	r0, [r7, #12]
   232fa:	60b9      	str	r1, [r7, #8]
   232fc:	607a      	str	r2, [r7, #4]
	hdr_frag = net_pkt_get_frag(pkt, NET_BUF_TIMEOUT);
   232fe:	2164      	movs	r1, #100	; 0x64
   23300:	68b8      	ldr	r0, [r7, #8]
   23302:	f7f0 fc15 	bl	13b30 <net_pkt_get_frag>
   23306:	6678      	str	r0, [r7, #100]	; 0x64
	if (!hdr_frag) {
   23308:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2330a:	2b00      	cmp	r3, #0
   2330c:	d101      	bne.n	23312 <ethernet_fill_header+0x20>
		return NULL;
   2330e:	2300      	movs	r3, #0
   23310:	e033      	b.n	2337a <ethernet_fill_header+0x88>
		hdr = (struct net_eth_hdr *)(hdr_frag->data);
   23312:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   23314:	689b      	ldr	r3, [r3, #8]
   23316:	663b      	str	r3, [r7, #96]	; 0x60
		if (!ethernet_fill_in_dst_on_ipv4_mcast(pkt, &hdr->dst) &&
   23318:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2331a:	4619      	mov	r1, r3
   2331c:	68b8      	ldr	r0, [r7, #8]
   2331e:	f7ff ff75 	bl	2320c <ethernet_fill_in_dst_on_ipv4_mcast>
   23322:	4603      	mov	r3, r0
   23324:	f083 0301 	eor.w	r3, r3, #1
   23328:	b2db      	uxtb	r3, r3
   2332a:	2b00      	cmp	r3, #0
   2332c:	d00a      	beq.n	23344 <ethernet_fill_header+0x52>
			memcpy(&hdr->dst, net_pkt_lladdr_dst(pkt)->addr,
   2332e:	6e3c      	ldr	r4, [r7, #96]	; 0x60
   23330:	68b8      	ldr	r0, [r7, #8]
   23332:	f7ff fd31 	bl	22d98 <net_pkt_lladdr_dst>
   23336:	4603      	mov	r3, r0
   23338:	681b      	ldr	r3, [r3, #0]
   2333a:	2206      	movs	r2, #6
   2333c:	4619      	mov	r1, r3
   2333e:	4620      	mov	r0, r4
   23340:	f7de fe92 	bl	2068 <memcpy>
		memcpy(&hdr->src, net_pkt_lladdr_src(pkt)->addr,
   23344:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23346:	1d9c      	adds	r4, r3, #6
   23348:	68b8      	ldr	r0, [r7, #8]
   2334a:	f7ff fd1a 	bl	22d82 <net_pkt_lladdr_src>
   2334e:	4603      	mov	r3, r0
   23350:	681b      	ldr	r3, [r3, #0]
   23352:	2206      	movs	r2, #6
   23354:	4619      	mov	r1, r3
   23356:	4620      	mov	r0, r4
   23358:	f7de fe86 	bl	2068 <memcpy>
		hdr->type = ptype;
   2335c:	687b      	ldr	r3, [r7, #4]
   2335e:	b29a      	uxth	r2, r3
   23360:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23362:	819a      	strh	r2, [r3, #12]
		net_buf_add(hdr_frag, sizeof(struct net_eth_hdr));
   23364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   23366:	3308      	adds	r3, #8
   23368:	210e      	movs	r1, #14
   2336a:	4618      	mov	r0, r3
   2336c:	f7fe fcc8 	bl	21d00 <net_buf_simple_add>
	net_pkt_frag_insert(pkt, hdr_frag);
   23370:	6e79      	ldr	r1, [r7, #100]	; 0x64
   23372:	68b8      	ldr	r0, [r7, #8]
   23374:	f002 fbbc 	bl	25af0 <net_pkt_frag_insert>
	return hdr_frag;
   23378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
   2337a:	4618      	mov	r0, r3
   2337c:	376c      	adds	r7, #108	; 0x6c
   2337e:	46bd      	mov	sp, r7
   23380:	bd90      	pop	{r4, r7, pc}

00023382 <ethernet_remove_l2_header>:
{
   23382:	b580      	push	{r7, lr}
   23384:	b084      	sub	sp, #16
   23386:	af00      	add	r7, sp, #0
   23388:	6078      	str	r0, [r7, #4]
	buf = pkt->buffer;
   2338a:	687b      	ldr	r3, [r7, #4]
   2338c:	695b      	ldr	r3, [r3, #20]
   2338e:	60fb      	str	r3, [r7, #12]
	pkt->buffer = buf->frags;
   23390:	68fb      	ldr	r3, [r7, #12]
   23392:	681a      	ldr	r2, [r3, #0]
   23394:	687b      	ldr	r3, [r7, #4]
   23396:	615a      	str	r2, [r3, #20]
	buf->frags = NULL;
   23398:	68fb      	ldr	r3, [r7, #12]
   2339a:	2200      	movs	r2, #0
   2339c:	601a      	str	r2, [r3, #0]
	net_pkt_frag_unref(buf);
   2339e:	68f8      	ldr	r0, [r7, #12]
   233a0:	f002 fb97 	bl	25ad2 <net_pkt_frag_unref>
}
   233a4:	bf00      	nop
   233a6:	3710      	adds	r7, #16
   233a8:	46bd      	mov	sp, r7
   233aa:	bd80      	pop	{r7, pc}

000233ac <ethernet_enable>:

static inline int ethernet_enable(struct net_if *iface, bool state)
{
   233ac:	b590      	push	{r4, r7, lr}
   233ae:	b085      	sub	sp, #20
   233b0:	af00      	add	r7, sp, #0
   233b2:	6078      	str	r0, [r7, #4]
   233b4:	460b      	mov	r3, r1
   233b6:	70fb      	strb	r3, [r7, #3]
	const struct ethernet_api *eth =
		net_if_get_device(iface)->driver_api;
   233b8:	6878      	ldr	r0, [r7, #4]
   233ba:	f7ff fc69 	bl	22c90 <net_if_get_device>
   233be:	4603      	mov	r3, r0
	const struct ethernet_api *eth =
   233c0:	685b      	ldr	r3, [r3, #4]
   233c2:	60fb      	str	r3, [r7, #12]

	if (!state) {
   233c4:	78fb      	ldrb	r3, [r7, #3]
   233c6:	f083 0301 	eor.w	r3, r3, #1
   233ca:	b2db      	uxtb	r3, r3
   233cc:	2b00      	cmp	r3, #0
   233ce:	d00f      	beq.n	233f0 <ethernet_enable+0x44>
		net_arp_clear_cache(iface);
   233d0:	6878      	ldr	r0, [r7, #4]
   233d2:	f7ef fa8f 	bl	128f4 <net_arp_clear_cache>

		if (eth->stop) {
   233d6:	68fb      	ldr	r3, [r7, #12]
   233d8:	689b      	ldr	r3, [r3, #8]
   233da:	2b00      	cmp	r3, #0
   233dc:	d014      	beq.n	23408 <ethernet_enable+0x5c>
			eth->stop(net_if_get_device(iface));
   233de:	68fb      	ldr	r3, [r7, #12]
   233e0:	689c      	ldr	r4, [r3, #8]
   233e2:	6878      	ldr	r0, [r7, #4]
   233e4:	f7ff fc54 	bl	22c90 <net_if_get_device>
   233e8:	4603      	mov	r3, r0
   233ea:	4618      	mov	r0, r3
   233ec:	47a0      	blx	r4
   233ee:	e00b      	b.n	23408 <ethernet_enable+0x5c>
		}
	} else {
		if (eth->start) {
   233f0:	68fb      	ldr	r3, [r7, #12]
   233f2:	685b      	ldr	r3, [r3, #4]
   233f4:	2b00      	cmp	r3, #0
   233f6:	d007      	beq.n	23408 <ethernet_enable+0x5c>
			eth->start(net_if_get_device(iface));
   233f8:	68fb      	ldr	r3, [r7, #12]
   233fa:	685c      	ldr	r4, [r3, #4]
   233fc:	6878      	ldr	r0, [r7, #4]
   233fe:	f7ff fc47 	bl	22c90 <net_if_get_device>
   23402:	4603      	mov	r3, r0
   23404:	4618      	mov	r0, r3
   23406:	47a0      	blx	r4
		}
	}

	return 0;
   23408:	2300      	movs	r3, #0
}
   2340a:	4618      	mov	r0, r3
   2340c:	3714      	adds	r7, #20
   2340e:	46bd      	mov	sp, r7
   23410:	bd90      	pop	{r4, r7, pc}

00023412 <ethernet_flags>:

enum net_l2_flags ethernet_flags(struct net_if *iface)
{
   23412:	b580      	push	{r7, lr}
   23414:	b084      	sub	sp, #16
   23416:	af00      	add	r7, sp, #0
   23418:	6078      	str	r0, [r7, #4]
	struct ethernet_context *ctx = net_if_l2_data(iface);
   2341a:	6878      	ldr	r0, [r7, #4]
   2341c:	f7ff fc2c 	bl	22c78 <net_if_l2_data>
   23420:	60f8      	str	r0, [r7, #12]

	return ctx->ethernet_l2_flags;
   23422:	68fb      	ldr	r3, [r7, #12]
   23424:	7c1b      	ldrb	r3, [r3, #16]
}
   23426:	4618      	mov	r0, r3
   23428:	3710      	adds	r7, #16
   2342a:	46bd      	mov	sp, r7
   2342c:	bd80      	pop	{r7, pc}

0002342e <ethernet_init>:
	return net_mgmt(NET_REQUEST_ETHERNET_SET_PROMISC_MODE, iface,
			&params, sizeof(struct ethernet_req_params));
}

void ethernet_init(struct net_if *iface)
{
   2342e:	b580      	push	{r7, lr}
   23430:	b088      	sub	sp, #32
   23432:	af00      	add	r7, sp, #0
   23434:	6078      	str	r0, [r7, #4]
	struct ethernet_context *ctx = net_if_l2_data(iface);
   23436:	6878      	ldr	r0, [r7, #4]
   23438:	f7ff fc1e 	bl	22c78 <net_if_l2_data>
   2343c:	61f8      	str	r0, [r7, #28]

#if defined(CONFIG_NET_VLAN)
	int i;
#endif

	NET_DBG("Initializing Ethernet L2 %p for iface %p", ctx, iface);
   2343e:	f7ff fba2 	bl	22b86 <_is_user_context>
   23442:	4603      	mov	r3, r0
   23444:	76fb      	strb	r3, [r7, #27]

	ctx->ethernet_l2_flags = NET_L2_MULTICAST;
   23446:	69fb      	ldr	r3, [r7, #28]
   23448:	2201      	movs	r2, #1
   2344a:	741a      	strb	r2, [r3, #16]

	if (net_eth_get_hw_capabilities(iface) & ETHERNET_PROMISC_MODE) {
   2344c:	6878      	ldr	r0, [r7, #4]
   2344e:	f7ff fcfe 	bl	22e4e <net_eth_get_hw_capabilities>
   23452:	4603      	mov	r3, r0
   23454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   23458:	2b00      	cmp	r3, #0
   2345a:	d006      	beq.n	2346a <ethernet_init+0x3c>
		ctx->ethernet_l2_flags |= NET_L2_PROMISC_MODE;
   2345c:	69fb      	ldr	r3, [r7, #28]
   2345e:	7c1b      	ldrb	r3, [r3, #16]
   23460:	f043 0304 	orr.w	r3, r3, #4
   23464:	b2da      	uxtb	r2, r3
   23466:	69fb      	ldr	r3, [r7, #28]
   23468:	741a      	strb	r2, [r3, #16]
			break;
		}
	}
#endif

	net_arp_init();
   2346a:	f7ef fb13 	bl	12a94 <net_arp_init>

	ctx->is_init = true;
   2346e:	69fb      	ldr	r3, [r7, #28]
   23470:	2201      	movs	r2, #1
   23472:	745a      	strb	r2, [r3, #17]
}
   23474:	bf00      	nop
   23476:	3720      	adds	r7, #32
   23478:	46bd      	mov	sp, r7
   2347a:	bd80      	pop	{r7, pc}

0002347c <atomic_add>:
{
   2347c:	b480      	push	{r7}
   2347e:	b083      	sub	sp, #12
   23480:	af00      	add	r7, sp, #0
   23482:	6078      	str	r0, [r7, #4]
   23484:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   23486:	683a      	ldr	r2, [r7, #0]
   23488:	687b      	ldr	r3, [r7, #4]
   2348a:	f3bf 8f5b 	dmb	ish
   2348e:	e853 1f00 	ldrex	r1, [r3]
   23492:	eb01 0002 	add.w	r0, r1, r2
   23496:	e843 0c00 	strex	ip, r0, [r3]
   2349a:	f1bc 0f00 	cmp.w	ip, #0
   2349e:	d1f6      	bne.n	2348e <atomic_add+0x12>
   234a0:	f3bf 8f5b 	dmb	ish
   234a4:	460b      	mov	r3, r1
}
   234a6:	4618      	mov	r0, r3
   234a8:	370c      	adds	r7, #12
   234aa:	46bd      	mov	sp, r7
   234ac:	bc80      	pop	{r7}
   234ae:	4770      	bx	lr

000234b0 <atomic_sub>:
{
   234b0:	b480      	push	{r7}
   234b2:	b083      	sub	sp, #12
   234b4:	af00      	add	r7, sp, #0
   234b6:	6078      	str	r0, [r7, #4]
   234b8:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   234ba:	683a      	ldr	r2, [r7, #0]
   234bc:	687b      	ldr	r3, [r7, #4]
   234be:	f3bf 8f5b 	dmb	ish
   234c2:	e853 1f00 	ldrex	r1, [r3]
   234c6:	eba1 0002 	sub.w	r0, r1, r2
   234ca:	e843 0c00 	strex	ip, r0, [r3]
   234ce:	f1bc 0f00 	cmp.w	ip, #0
   234d2:	d1f6      	bne.n	234c2 <atomic_sub+0x12>
   234d4:	f3bf 8f5b 	dmb	ish
   234d8:	460b      	mov	r3, r1
}
   234da:	4618      	mov	r0, r3
   234dc:	370c      	adds	r7, #12
   234de:	46bd      	mov	sp, r7
   234e0:	bc80      	pop	{r7}
   234e2:	4770      	bx	lr

000234e4 <atomic_inc>:
{
   234e4:	b580      	push	{r7, lr}
   234e6:	b082      	sub	sp, #8
   234e8:	af00      	add	r7, sp, #0
   234ea:	6078      	str	r0, [r7, #4]
	return atomic_add(target, 1);
   234ec:	2101      	movs	r1, #1
   234ee:	6878      	ldr	r0, [r7, #4]
   234f0:	f7ff ffc4 	bl	2347c <atomic_add>
   234f4:	4603      	mov	r3, r0
}
   234f6:	4618      	mov	r0, r3
   234f8:	3708      	adds	r7, #8
   234fa:	46bd      	mov	sp, r7
   234fc:	bd80      	pop	{r7, pc}

000234fe <atomic_dec>:
{
   234fe:	b580      	push	{r7, lr}
   23500:	b082      	sub	sp, #8
   23502:	af00      	add	r7, sp, #0
   23504:	6078      	str	r0, [r7, #4]
	return atomic_sub(target, 1);
   23506:	2101      	movs	r1, #1
   23508:	6878      	ldr	r0, [r7, #4]
   2350a:	f7ff ffd1 	bl	234b0 <atomic_sub>
   2350e:	4603      	mov	r3, r0
}
   23510:	4618      	mov	r0, r3
   23512:	3708      	adds	r7, #8
   23514:	46bd      	mov	sp, r7
   23516:	bd80      	pop	{r7, pc}

00023518 <atomic_set>:
{
   23518:	b480      	push	{r7}
   2351a:	b083      	sub	sp, #12
   2351c:	af00      	add	r7, sp, #0
   2351e:	6078      	str	r0, [r7, #4]
   23520:	6039      	str	r1, [r7, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   23522:	683a      	ldr	r2, [r7, #0]
   23524:	687b      	ldr	r3, [r7, #4]
   23526:	f3bf 8f5b 	dmb	ish
   2352a:	e853 1f00 	ldrex	r1, [r3]
   2352e:	e843 2000 	strex	r0, r2, [r3]
   23532:	2800      	cmp	r0, #0
   23534:	d1f9      	bne.n	2352a <atomic_set+0x12>
   23536:	f3bf 8f5b 	dmb	ish
   2353a:	460b      	mov	r3, r1
}
   2353c:	4618      	mov	r0, r3
   2353e:	370c      	adds	r7, #12
   23540:	46bd      	mov	sp, r7
   23542:	bc80      	pop	{r7}
   23544:	4770      	bx	lr

00023546 <_is_user_context>:
{
   23546:	b480      	push	{r7}
   23548:	af00      	add	r7, sp, #0
	return false;
   2354a:	2300      	movs	r3, #0
}
   2354c:	4618      	mov	r0, r3
   2354e:	46bd      	mov	sp, r7
   23550:	bc80      	pop	{r7}
   23552:	4770      	bx	lr

00023554 <z_impl_k_sem_reset>:
{
   23554:	b480      	push	{r7}
   23556:	b083      	sub	sp, #12
   23558:	af00      	add	r7, sp, #0
   2355a:	6078      	str	r0, [r7, #4]
	sem->count = 0U;
   2355c:	687b      	ldr	r3, [r7, #4]
   2355e:	2200      	movs	r2, #0
   23560:	609a      	str	r2, [r3, #8]
}
   23562:	bf00      	nop
   23564:	370c      	adds	r7, #12
   23566:	46bd      	mov	sp, r7
   23568:	bc80      	pop	{r7}
   2356a:	4770      	bx	lr

0002356c <k_mutex_init>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)
   2356c:	b580      	push	{r7, lr}
   2356e:	b082      	sub	sp, #8
   23570:	af00      	add	r7, sp, #0
   23572:	6078      	str	r0, [r7, #4]
   23574:	6878      	ldr	r0, [r7, #4]
   23576:	f006 fe73 	bl	2a260 <z_impl_k_mutex_init>
   2357a:	bf00      	nop
   2357c:	3708      	adds	r7, #8
   2357e:	46bd      	mov	sp, r7
   23580:	bd80      	pop	{r7, pc}

00023582 <k_mutex_lock>:
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   23582:	b580      	push	{r7, lr}
   23584:	b082      	sub	sp, #8
   23586:	af00      	add	r7, sp, #0
   23588:	6078      	str	r0, [r7, #4]
   2358a:	6039      	str	r1, [r7, #0]
   2358c:	6839      	ldr	r1, [r7, #0]
   2358e:	6878      	ldr	r0, [r7, #4]
   23590:	f7f3 fa26 	bl	169e0 <z_impl_k_mutex_lock>
   23594:	4603      	mov	r3, r0
   23596:	4618      	mov	r0, r3
   23598:	3708      	adds	r7, #8
   2359a:	46bd      	mov	sp, r7
   2359c:	bd80      	pop	{r7, pc}

0002359e <k_mutex_unlock>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
   2359e:	b580      	push	{r7, lr}
   235a0:	b082      	sub	sp, #8
   235a2:	af00      	add	r7, sp, #0
   235a4:	6078      	str	r0, [r7, #4]
   235a6:	6878      	ldr	r0, [r7, #4]
   235a8:	f7f3 fad8 	bl	16b5c <z_impl_k_mutex_unlock>
   235ac:	bf00      	nop
   235ae:	3708      	adds	r7, #8
   235b0:	46bd      	mov	sp, r7
   235b2:	bd80      	pop	{r7, pc}

000235b4 <k_sem_init>:
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   235b4:	b580      	push	{r7, lr}
   235b6:	b084      	sub	sp, #16
   235b8:	af00      	add	r7, sp, #0
   235ba:	60f8      	str	r0, [r7, #12]
   235bc:	60b9      	str	r1, [r7, #8]
   235be:	607a      	str	r2, [r7, #4]
   235c0:	687a      	ldr	r2, [r7, #4]
   235c2:	68b9      	ldr	r1, [r7, #8]
   235c4:	68f8      	ldr	r0, [r7, #12]
   235c6:	f007 fe9f 	bl	2b308 <z_impl_k_sem_init>
   235ca:	bf00      	nop
   235cc:	3710      	adds	r7, #16
   235ce:	46bd      	mov	sp, r7
   235d0:	bd80      	pop	{r7, pc}

000235d2 <k_sem_take>:
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   235d2:	b580      	push	{r7, lr}
   235d4:	b082      	sub	sp, #8
   235d6:	af00      	add	r7, sp, #0
   235d8:	6078      	str	r0, [r7, #4]
   235da:	6039      	str	r1, [r7, #0]
   235dc:	6839      	ldr	r1, [r7, #0]
   235de:	6878      	ldr	r0, [r7, #4]
   235e0:	f7f4 fb02 	bl	17be8 <z_impl_k_sem_take>
   235e4:	4603      	mov	r3, r0
   235e6:	4618      	mov	r0, r3
   235e8:	3708      	adds	r7, #8
   235ea:	46bd      	mov	sp, r7
   235ec:	bd80      	pop	{r7, pc}

000235ee <k_sem_give>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   235ee:	b580      	push	{r7, lr}
   235f0:	b082      	sub	sp, #8
   235f2:	af00      	add	r7, sp, #0
   235f4:	6078      	str	r0, [r7, #4]
   235f6:	6878      	ldr	r0, [r7, #4]
   235f8:	f7f4 fad4 	bl	17ba4 <z_impl_k_sem_give>
   235fc:	bf00      	nop
   235fe:	3708      	adds	r7, #8
   23600:	46bd      	mov	sp, r7
   23602:	bd80      	pop	{r7, pc}

00023604 <k_sem_reset>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_RESET, k_sem_reset, struct k_sem *, sem)
   23604:	b580      	push	{r7, lr}
   23606:	b082      	sub	sp, #8
   23608:	af00      	add	r7, sp, #0
   2360a:	6078      	str	r0, [r7, #4]
   2360c:	6878      	ldr	r0, [r7, #4]
   2360e:	f7ff ffa1 	bl	23554 <z_impl_k_sem_reset>
   23612:	bf00      	nop
   23614:	3708      	adds	r7, #8
   23616:	46bd      	mov	sp, r7
   23618:	bd80      	pop	{r7, pc}

0002361a <net_ipv4_is_addr_unspecified>:
{
   2361a:	b480      	push	{r7}
   2361c:	b085      	sub	sp, #20
   2361e:	af00      	add	r7, sp, #0
   23620:	6078      	str	r0, [r7, #4]
	return UNALIGNED_GET(&addr->s_addr) == 0;
   23622:	687b      	ldr	r3, [r7, #4]
   23624:	60fb      	str	r3, [r7, #12]
   23626:	68fb      	ldr	r3, [r7, #12]
   23628:	681b      	ldr	r3, [r3, #0]
   2362a:	2b00      	cmp	r3, #0
   2362c:	bf0c      	ite	eq
   2362e:	2301      	moveq	r3, #1
   23630:	2300      	movne	r3, #0
   23632:	b2db      	uxtb	r3, r3
}
   23634:	4618      	mov	r0, r3
   23636:	3714      	adds	r7, #20
   23638:	46bd      	mov	sp, r7
   2363a:	bc80      	pop	{r7}
   2363c:	4770      	bx	lr

0002363e <net_ipv4_is_addr_mcast>:
{
   2363e:	b480      	push	{r7}
   23640:	b087      	sub	sp, #28
   23642:	af00      	add	r7, sp, #0
   23644:	6078      	str	r0, [r7, #4]
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xE0000000) == 0xE0000000;
   23646:	687b      	ldr	r3, [r7, #4]
   23648:	617b      	str	r3, [r7, #20]
   2364a:	697b      	ldr	r3, [r7, #20]
   2364c:	681b      	ldr	r3, [r3, #0]
   2364e:	0e1b      	lsrs	r3, r3, #24
   23650:	b2da      	uxtb	r2, r3
   23652:	687b      	ldr	r3, [r7, #4]
   23654:	613b      	str	r3, [r7, #16]
   23656:	693b      	ldr	r3, [r7, #16]
   23658:	681b      	ldr	r3, [r3, #0]
   2365a:	0a1b      	lsrs	r3, r3, #8
   2365c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   23660:	431a      	orrs	r2, r3
   23662:	687b      	ldr	r3, [r7, #4]
   23664:	60fb      	str	r3, [r7, #12]
   23666:	68fb      	ldr	r3, [r7, #12]
   23668:	681b      	ldr	r3, [r3, #0]
   2366a:	021b      	lsls	r3, r3, #8
   2366c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   23670:	431a      	orrs	r2, r3
   23672:	687b      	ldr	r3, [r7, #4]
   23674:	60bb      	str	r3, [r7, #8]
   23676:	68bb      	ldr	r3, [r7, #8]
   23678:	681b      	ldr	r3, [r3, #0]
   2367a:	061b      	lsls	r3, r3, #24
   2367c:	4313      	orrs	r3, r2
   2367e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   23682:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
   23686:	bf0c      	ite	eq
   23688:	2301      	moveq	r3, #1
   2368a:	2300      	movne	r3, #0
   2368c:	b2db      	uxtb	r3, r3
}
   2368e:	4618      	mov	r0, r3
   23690:	371c      	adds	r7, #28
   23692:	46bd      	mov	sp, r7
   23694:	bc80      	pop	{r7}
   23696:	4770      	bx	lr

00023698 <net_ipv4_addr_cmp>:
{
   23698:	b480      	push	{r7}
   2369a:	b085      	sub	sp, #20
   2369c:	af00      	add	r7, sp, #0
   2369e:	6078      	str	r0, [r7, #4]
   236a0:	6039      	str	r1, [r7, #0]
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   236a2:	687b      	ldr	r3, [r7, #4]
   236a4:	60fb      	str	r3, [r7, #12]
   236a6:	68fb      	ldr	r3, [r7, #12]
   236a8:	681a      	ldr	r2, [r3, #0]
   236aa:	683b      	ldr	r3, [r7, #0]
   236ac:	60bb      	str	r3, [r7, #8]
   236ae:	68bb      	ldr	r3, [r7, #8]
   236b0:	681b      	ldr	r3, [r3, #0]
   236b2:	429a      	cmp	r2, r3
   236b4:	bf0c      	ite	eq
   236b6:	2301      	moveq	r3, #1
   236b8:	2300      	movne	r3, #0
   236ba:	b2db      	uxtb	r3, r3
}
   236bc:	4618      	mov	r0, r3
   236be:	3714      	adds	r7, #20
   236c0:	46bd      	mov	sp, r7
   236c2:	bc80      	pop	{r7}
   236c4:	4770      	bx	lr

000236c6 <net_ipv6_addr_cmp>:
{
   236c6:	b580      	push	{r7, lr}
   236c8:	b082      	sub	sp, #8
   236ca:	af00      	add	r7, sp, #0
   236cc:	6078      	str	r0, [r7, #4]
   236ce:	6039      	str	r1, [r7, #0]
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   236d0:	2210      	movs	r2, #16
   236d2:	6839      	ldr	r1, [r7, #0]
   236d4:	6878      	ldr	r0, [r7, #4]
   236d6:	f7de fcb9 	bl	204c <memcmp>
   236da:	4603      	mov	r3, r0
   236dc:	2b00      	cmp	r3, #0
   236de:	bf0c      	ite	eq
   236e0:	2301      	moveq	r3, #1
   236e2:	2300      	movne	r3, #0
   236e4:	b2db      	uxtb	r3, r3
}
   236e6:	4618      	mov	r0, r3
   236e8:	3708      	adds	r7, #8
   236ea:	46bd      	mov	sp, r7
   236ec:	bd80      	pop	{r7, pc}

000236ee <net_sin>:
{
   236ee:	b480      	push	{r7}
   236f0:	b083      	sub	sp, #12
   236f2:	af00      	add	r7, sp, #0
   236f4:	6078      	str	r0, [r7, #4]
	return (struct sockaddr_in *)addr;
   236f6:	687b      	ldr	r3, [r7, #4]
}
   236f8:	4618      	mov	r0, r3
   236fa:	370c      	adds	r7, #12
   236fc:	46bd      	mov	sp, r7
   236fe:	bc80      	pop	{r7}
   23700:	4770      	bx	lr

00023702 <net_sin6_ptr>:
 *
 * @return Pointer to IPv6 socket address
 */
static inline
struct sockaddr_in6_ptr *net_sin6_ptr(const struct sockaddr_ptr *addr)
{
   23702:	b480      	push	{r7}
   23704:	b083      	sub	sp, #12
   23706:	af00      	add	r7, sp, #0
   23708:	6078      	str	r0, [r7, #4]
	return (struct sockaddr_in6_ptr *)addr;
   2370a:	687b      	ldr	r3, [r7, #4]
}
   2370c:	4618      	mov	r0, r3
   2370e:	370c      	adds	r7, #12
   23710:	46bd      	mov	sp, r7
   23712:	bc80      	pop	{r7}
   23714:	4770      	bx	lr

00023716 <net_sin_ptr>:
 *
 * @return Pointer to IPv4 socket address
 */
static inline
struct sockaddr_in_ptr *net_sin_ptr(const struct sockaddr_ptr *addr)
{
   23716:	b480      	push	{r7}
   23718:	b083      	sub	sp, #12
   2371a:	af00      	add	r7, sp, #0
   2371c:	6078      	str	r0, [r7, #4]
	return (struct sockaddr_in_ptr *)addr;
   2371e:	687b      	ldr	r3, [r7, #4]
}
   23720:	4618      	mov	r0, r3
   23722:	370c      	adds	r7, #12
   23724:	46bd      	mov	sp, r7
   23726:	bc80      	pop	{r7}
   23728:	4770      	bx	lr

0002372a <net_context_is_used>:
{
   2372a:	b480      	push	{r7}
   2372c:	b083      	sub	sp, #12
   2372e:	af00      	add	r7, sp, #0
   23730:	6078      	str	r0, [r7, #4]
	return context->flags & NET_CONTEXT_IN_USE;
   23732:	687b      	ldr	r3, [r7, #4]
   23734:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
   23738:	f003 0301 	and.w	r3, r3, #1
   2373c:	2b00      	cmp	r3, #0
   2373e:	bf14      	ite	ne
   23740:	2301      	movne	r3, #1
   23742:	2300      	moveq	r3, #0
   23744:	b2db      	uxtb	r3, r3
}
   23746:	4618      	mov	r0, r3
   23748:	370c      	adds	r7, #12
   2374a:	46bd      	mov	sp, r7
   2374c:	bc80      	pop	{r7}
   2374e:	4770      	bx	lr

00023750 <net_context_get_state>:
{
   23750:	b480      	push	{r7}
   23752:	b083      	sub	sp, #12
   23754:	af00      	add	r7, sp, #0
   23756:	6078      	str	r0, [r7, #4]
		((context->flags >> NET_CONTEXT_STATE_SHIFT) &
   23758:	687b      	ldr	r3, [r7, #4]
   2375a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
   2375e:	085b      	lsrs	r3, r3, #1
   23760:	b29b      	uxth	r3, r3
   23762:	b2db      	uxtb	r3, r3
	return (enum net_context_state)
   23764:	f003 0303 	and.w	r3, r3, #3
   23768:	b2db      	uxtb	r3, r3
}
   2376a:	4618      	mov	r0, r3
   2376c:	370c      	adds	r7, #12
   2376e:	46bd      	mov	sp, r7
   23770:	bc80      	pop	{r7}
   23772:	4770      	bx	lr

00023774 <net_context_set_state>:
{
   23774:	b480      	push	{r7}
   23776:	b083      	sub	sp, #12
   23778:	af00      	add	r7, sp, #0
   2377a:	6078      	str	r0, [r7, #4]
   2377c:	460b      	mov	r3, r1
   2377e:	70fb      	strb	r3, [r7, #3]
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   23780:	687b      	ldr	r3, [r7, #4]
   23782:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
   23786:	f023 0306 	bic.w	r3, r3, #6
   2378a:	b29a      	uxth	r2, r3
   2378c:	687b      	ldr	r3, [r7, #4]
   2378e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   23792:	687b      	ldr	r3, [r7, #4]
   23794:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
   23798:	b21a      	sxth	r2, r3
   2379a:	78fb      	ldrb	r3, [r7, #3]
   2379c:	005b      	lsls	r3, r3, #1
   2379e:	b21b      	sxth	r3, r3
   237a0:	f003 0306 	and.w	r3, r3, #6
   237a4:	b21b      	sxth	r3, r3
   237a6:	4313      	orrs	r3, r2
   237a8:	b21b      	sxth	r3, r3
   237aa:	b29a      	uxth	r2, r3
   237ac:	687b      	ldr	r3, [r7, #4]
   237ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
   237b2:	bf00      	nop
   237b4:	370c      	adds	r7, #12
   237b6:	46bd      	mov	sp, r7
   237b8:	bc80      	pop	{r7}
   237ba:	4770      	bx	lr

000237bc <net_context_get_family>:
{
   237bc:	b480      	push	{r7}
   237be:	b083      	sub	sp, #12
   237c0:	af00      	add	r7, sp, #0
   237c2:	6078      	str	r0, [r7, #4]
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
   237c4:	687b      	ldr	r3, [r7, #4]
   237c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
   237ca:	08db      	lsrs	r3, r3, #3
   237cc:	b29b      	uxth	r3, r3
   237ce:	f003 0307 	and.w	r3, r3, #7
   237d2:	b29b      	uxth	r3, r3
}
   237d4:	4618      	mov	r0, r3
   237d6:	370c      	adds	r7, #12
   237d8:	46bd      	mov	sp, r7
   237da:	bc80      	pop	{r7}
   237dc:	4770      	bx	lr

000237de <net_context_set_family>:
{
   237de:	b480      	push	{r7}
   237e0:	b085      	sub	sp, #20
   237e2:	af00      	add	r7, sp, #0
   237e4:	6078      	str	r0, [r7, #4]
   237e6:	460b      	mov	r3, r1
   237e8:	807b      	strh	r3, [r7, #2]
	u8_t flag = 0U;
   237ea:	2300      	movs	r3, #0
   237ec:	73fb      	strb	r3, [r7, #15]
	if (family == AF_UNSPEC || family == AF_INET || family == AF_INET6 ||
   237ee:	887b      	ldrh	r3, [r7, #2]
   237f0:	2b00      	cmp	r3, #0
   237f2:	d00b      	beq.n	2380c <net_context_set_family+0x2e>
   237f4:	887b      	ldrh	r3, [r7, #2]
   237f6:	2b01      	cmp	r3, #1
   237f8:	d008      	beq.n	2380c <net_context_set_family+0x2e>
   237fa:	887b      	ldrh	r3, [r7, #2]
   237fc:	2b02      	cmp	r3, #2
   237fe:	d005      	beq.n	2380c <net_context_set_family+0x2e>
   23800:	887b      	ldrh	r3, [r7, #2]
   23802:	2b03      	cmp	r3, #3
   23804:	d002      	beq.n	2380c <net_context_set_family+0x2e>
	    family == AF_PACKET || family == AF_CAN) {
   23806:	887b      	ldrh	r3, [r7, #2]
   23808:	2b04      	cmp	r3, #4
   2380a:	d103      	bne.n	23814 <net_context_set_family+0x36>
		flag = family << 3;
   2380c:	887b      	ldrh	r3, [r7, #2]
   2380e:	b2db      	uxtb	r3, r3
   23810:	00db      	lsls	r3, r3, #3
   23812:	73fb      	strb	r3, [r7, #15]
	context->flags |= flag;
   23814:	687b      	ldr	r3, [r7, #4]
   23816:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
   2381a:	7bfb      	ldrb	r3, [r7, #15]
   2381c:	b29b      	uxth	r3, r3
   2381e:	4313      	orrs	r3, r2
   23820:	b29a      	uxth	r2, r3
   23822:	687b      	ldr	r3, [r7, #4]
   23824:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
   23828:	bf00      	nop
   2382a:	3714      	adds	r7, #20
   2382c:	46bd      	mov	sp, r7
   2382e:	bc80      	pop	{r7}
   23830:	4770      	bx	lr

00023832 <net_context_get_type>:
{
   23832:	b480      	push	{r7}
   23834:	b083      	sub	sp, #12
   23836:	af00      	add	r7, sp, #0
   23838:	6078      	str	r0, [r7, #4]
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   2383a:	687b      	ldr	r3, [r7, #4]
   2383c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
   23840:	099b      	lsrs	r3, r3, #6
   23842:	f003 0303 	and.w	r3, r3, #3
   23846:	b2db      	uxtb	r3, r3
}
   23848:	4618      	mov	r0, r3
   2384a:	370c      	adds	r7, #12
   2384c:	46bd      	mov	sp, r7
   2384e:	bc80      	pop	{r7}
   23850:	4770      	bx	lr

00023852 <net_context_set_type>:
{
   23852:	b480      	push	{r7}
   23854:	b085      	sub	sp, #20
   23856:	af00      	add	r7, sp, #0
   23858:	6078      	str	r0, [r7, #4]
   2385a:	460b      	mov	r3, r1
   2385c:	70fb      	strb	r3, [r7, #3]
	u16_t flag = 0U;
   2385e:	2300      	movs	r3, #0
   23860:	81fb      	strh	r3, [r7, #14]
	if (type == SOCK_DGRAM || type == SOCK_STREAM || type == SOCK_RAW) {
   23862:	78fb      	ldrb	r3, [r7, #3]
   23864:	2b02      	cmp	r3, #2
   23866:	d005      	beq.n	23874 <net_context_set_type+0x22>
   23868:	78fb      	ldrb	r3, [r7, #3]
   2386a:	2b01      	cmp	r3, #1
   2386c:	d002      	beq.n	23874 <net_context_set_type+0x22>
   2386e:	78fb      	ldrb	r3, [r7, #3]
   23870:	2b03      	cmp	r3, #3
   23872:	d103      	bne.n	2387c <net_context_set_type+0x2a>
		flag = type << 6;
   23874:	78fb      	ldrb	r3, [r7, #3]
   23876:	b29b      	uxth	r3, r3
   23878:	019b      	lsls	r3, r3, #6
   2387a:	81fb      	strh	r3, [r7, #14]
	context->flags |= flag;
   2387c:	687b      	ldr	r3, [r7, #4]
   2387e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
   23882:	89fb      	ldrh	r3, [r7, #14]
   23884:	4313      	orrs	r3, r2
   23886:	b29a      	uxth	r2, r3
   23888:	687b      	ldr	r3, [r7, #4]
   2388a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
   2388e:	bf00      	nop
   23890:	3714      	adds	r7, #20
   23892:	46bd      	mov	sp, r7
   23894:	bc80      	pop	{r7}
   23896:	4770      	bx	lr

00023898 <net_context_get_ip_proto>:
{
   23898:	b480      	push	{r7}
   2389a:	b083      	sub	sp, #12
   2389c:	af00      	add	r7, sp, #0
   2389e:	6078      	str	r0, [r7, #4]
	return context->proto;
   238a0:	687b      	ldr	r3, [r7, #4]
   238a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
}
   238a6:	4618      	mov	r0, r3
   238a8:	370c      	adds	r7, #12
   238aa:	46bd      	mov	sp, r7
   238ac:	bc80      	pop	{r7}
   238ae:	4770      	bx	lr

000238b0 <net_context_set_ip_proto>:
 * @param proto Context IP protocol (IPPROTO_UDP, IPPROTO_TCP or IEEE 802.3
 * protocol value)
 */
static inline void net_context_set_ip_proto(struct net_context *context,
					    u16_t proto)
{
   238b0:	b480      	push	{r7}
   238b2:	b083      	sub	sp, #12
   238b4:	af00      	add	r7, sp, #0
   238b6:	6078      	str	r0, [r7, #4]
   238b8:	460b      	mov	r3, r1
   238ba:	807b      	strh	r3, [r7, #2]
	context->proto = proto;
   238bc:	687b      	ldr	r3, [r7, #4]
   238be:	887a      	ldrh	r2, [r7, #2]
   238c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
   238c4:	bf00      	nop
   238c6:	370c      	adds	r7, #12
   238c8:	46bd      	mov	sp, r7
   238ca:	bc80      	pop	{r7}
   238cc:	4770      	bx	lr

000238ce <net_context_get_iface>:
 * @return Context network interface if context is bind to interface,
 * NULL otherwise.
 */
static inline
struct net_if *net_context_get_iface(struct net_context *context)
{
   238ce:	b580      	push	{r7, lr}
   238d0:	b082      	sub	sp, #8
   238d2:	af00      	add	r7, sp, #0
   238d4:	6078      	str	r0, [r7, #4]
	NET_ASSERT(context);

	return net_if_get_by_index(context->iface);
   238d6:	687b      	ldr	r3, [r7, #4]
   238d8:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
   238dc:	4618      	mov	r0, r3
   238de:	f7f0 f80b 	bl	138f8 <net_if_get_by_index>
   238e2:	4603      	mov	r3, r0
}
   238e4:	4618      	mov	r0, r3
   238e6:	3708      	adds	r7, #8
   238e8:	46bd      	mov	sp, r7
   238ea:	bd80      	pop	{r7, pc}

000238ec <net_context_set_iface>:
 * @param context Network context.
 * @param iface Network interface.
 */
static inline void net_context_set_iface(struct net_context *context,
					 struct net_if *iface)
{
   238ec:	b580      	push	{r7, lr}
   238ee:	b082      	sub	sp, #8
   238f0:	af00      	add	r7, sp, #0
   238f2:	6078      	str	r0, [r7, #4]
   238f4:	6039      	str	r1, [r7, #0]
	NET_ASSERT(iface);

	context->iface = net_if_get_by_iface(iface);
   238f6:	6838      	ldr	r0, [r7, #0]
   238f8:	f7f0 f822 	bl	13940 <net_if_get_by_iface>
   238fc:	4603      	mov	r3, r0
   238fe:	b25a      	sxtb	r2, r3
   23900:	687b      	ldr	r3, [r7, #4]
   23902:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
}
   23906:	bf00      	nop
   23908:	3708      	adds	r7, #8
   2390a:	46bd      	mov	sp, r7
   2390c:	bd80      	pop	{r7, pc}

0002390e <net_context_get_ipv4_ttl>:

static inline u8_t net_context_get_ipv4_ttl(struct net_context *context)
{
   2390e:	b480      	push	{r7}
   23910:	b083      	sub	sp, #12
   23912:	af00      	add	r7, sp, #0
   23914:	6078      	str	r0, [r7, #4]
	return context->ipv4_ttl;
   23916:	687b      	ldr	r3, [r7, #4]
   23918:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
}
   2391c:	4618      	mov	r0, r3
   2391e:	370c      	adds	r7, #12
   23920:	46bd      	mov	sp, r7
   23922:	bc80      	pop	{r7}
   23924:	4770      	bx	lr

00023926 <net_pkt_set_context>:
{
   23926:	b480      	push	{r7}
   23928:	b083      	sub	sp, #12
   2392a:	af00      	add	r7, sp, #0
   2392c:	6078      	str	r0, [r7, #4]
   2392e:	6039      	str	r1, [r7, #0]
	pkt->context = ctx;
   23930:	687b      	ldr	r3, [r7, #4]
   23932:	683a      	ldr	r2, [r7, #0]
   23934:	621a      	str	r2, [r3, #32]
}
   23936:	bf00      	nop
   23938:	370c      	adds	r7, #12
   2393a:	46bd      	mov	sp, r7
   2393c:	bc80      	pop	{r7}
   2393e:	4770      	bx	lr

00023940 <net_pkt_iface>:
{
   23940:	b480      	push	{r7}
   23942:	b083      	sub	sp, #12
   23944:	af00      	add	r7, sp, #0
   23946:	6078      	str	r0, [r7, #4]
	return pkt->iface;
   23948:	687b      	ldr	r3, [r7, #4]
   2394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   2394c:	4618      	mov	r0, r3
   2394e:	370c      	adds	r7, #12
   23950:	46bd      	mov	sp, r7
   23952:	bc80      	pop	{r7}
   23954:	4770      	bx	lr

00023956 <net_pkt_set_ipv4_ttl>:
{
   23956:	b480      	push	{r7}
   23958:	b083      	sub	sp, #12
   2395a:	af00      	add	r7, sp, #0
   2395c:	6078      	str	r0, [r7, #4]
   2395e:	460b      	mov	r3, r1
   23960:	70fb      	strb	r3, [r7, #3]
	pkt->ipv4_ttl = ttl;
   23962:	687b      	ldr	r3, [r7, #4]
   23964:	78fa      	ldrb	r2, [r7, #3]
   23966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
   2396a:	bf00      	nop
   2396c:	370c      	adds	r7, #12
   2396e:	46bd      	mov	sp, r7
   23970:	bc80      	pop	{r7}
   23972:	4770      	bx	lr

00023974 <net_tcp_recv>:
int net_tcp_recv(struct net_context *context, net_context_recv_cb_t cb,
		 void *user_data);
#else
static inline int net_tcp_recv(struct net_context *context,
			       net_context_recv_cb_t cb, void *user_data)
{
   23974:	b480      	push	{r7}
   23976:	b085      	sub	sp, #20
   23978:	af00      	add	r7, sp, #0
   2397a:	60f8      	str	r0, [r7, #12]
   2397c:	60b9      	str	r1, [r7, #8]
   2397e:	607a      	str	r2, [r7, #4]
	ARG_UNUSED(context);
	ARG_UNUSED(cb);
	ARG_UNUSED(user_data);

	return -EPROTOTYPE;
   23980:	f06f 036a 	mvn.w	r3, #106	; 0x6a
}
   23984:	4618      	mov	r0, r3
   23986:	3714      	adds	r7, #20
   23988:	46bd      	mov	sp, r7
   2398a:	bc80      	pop	{r7}
   2398c:	4770      	bx	lr

0002398e <net_tcp_put>:
 */
#if defined(CONFIG_NET_TCP)
int net_tcp_put(struct net_context *context);
#else
static inline int net_tcp_put(struct net_context *context)
{
   2398e:	b480      	push	{r7}
   23990:	b083      	sub	sp, #12
   23992:	af00      	add	r7, sp, #0
   23994:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(context);

	return -EPROTONOSUPPORT;
   23996:	f06f 037a 	mvn.w	r3, #122	; 0x7a
}
   2399a:	4618      	mov	r0, r3
   2399c:	370c      	adds	r7, #12
   2399e:	46bd      	mov	sp, r7
   239a0:	bc80      	pop	{r7}
   239a2:	4770      	bx	lr

000239a4 <net_tcp_listen>:
 */
#if defined(CONFIG_NET_TCP)
int net_tcp_listen(struct net_context *context);
#else
static inline int net_tcp_listen(struct net_context *context)
{
   239a4:	b480      	push	{r7}
   239a6:	b083      	sub	sp, #12
   239a8:	af00      	add	r7, sp, #0
   239aa:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(context);

	return -EPROTONOSUPPORT;
   239ac:	f06f 037a 	mvn.w	r3, #122	; 0x7a
}
   239b0:	4618      	mov	r0, r3
   239b2:	370c      	adds	r7, #12
   239b4:	46bd      	mov	sp, r7
   239b6:	bc80      	pop	{r7}
   239b8:	4770      	bx	lr

000239ba <net_tcp_update_recv_wnd>:
#if defined(CONFIG_NET_TCP)
int net_tcp_update_recv_wnd(struct net_context *context, s32_t delta);
#else
static inline int net_tcp_update_recv_wnd(struct net_context *context,
					  s32_t delta)
{
   239ba:	b480      	push	{r7}
   239bc:	b083      	sub	sp, #12
   239be:	af00      	add	r7, sp, #0
   239c0:	6078      	str	r0, [r7, #4]
   239c2:	6039      	str	r1, [r7, #0]
	ARG_UNUSED(context);
	ARG_UNUSED(delta);

	return -EPROTONOSUPPORT;
   239c4:	f06f 037a 	mvn.w	r3, #122	; 0x7a
}
   239c8:	4618      	mov	r0, r3
   239ca:	370c      	adds	r7, #12
   239cc:	46bd      	mov	sp, r7
   239ce:	bc80      	pop	{r7}
   239d0:	4770      	bx	lr

000239d2 <net_tcp_get>:
 */
#if defined(CONFIG_NET_TCP)
int net_tcp_get(struct net_context *context);
#else
static inline int net_tcp_get(struct net_context *context)
{
   239d2:	b480      	push	{r7}
   239d4:	b083      	sub	sp, #12
   239d6:	af00      	add	r7, sp, #0
   239d8:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(context);

	return -EPROTONOSUPPORT;
   239da:	f06f 037a 	mvn.w	r3, #122	; 0x7a
}
   239de:	4618      	mov	r0, r3
   239e0:	370c      	adds	r7, #12
   239e2:	46bd      	mov	sp, r7
   239e4:	bc80      	pop	{r7}
   239e6:	4770      	bx	lr

000239e8 <net_tcp_unref>:
 */
#if defined(CONFIG_NET_TCP)
int net_tcp_unref(struct net_context *context);
#else
static inline int net_tcp_unref(struct net_context *context)
{
   239e8:	b480      	push	{r7}
   239ea:	b083      	sub	sp, #12
   239ec:	af00      	add	r7, sp, #0
   239ee:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(context);

	return -EPROTONOSUPPORT;
   239f0:	f06f 037a 	mvn.w	r3, #122	; 0x7a
}
   239f4:	4618      	mov	r0, r3
   239f6:	370c      	adds	r7, #12
   239f8:	46bd      	mov	sp, r7
   239fa:	bc80      	pop	{r7}
   239fc:	4770      	bx	lr

000239fe <net_tcp_accept>:
int net_tcp_accept(struct net_context *context, net_tcp_accept_cb_t cb,
		   void *user_data);
#else
static inline int net_tcp_accept(struct net_context *context,
				 net_tcp_accept_cb_t cb, void *user_data)
{
   239fe:	b480      	push	{r7}
   23a00:	b085      	sub	sp, #20
   23a02:	af00      	add	r7, sp, #0
   23a04:	60f8      	str	r0, [r7, #12]
   23a06:	60b9      	str	r1, [r7, #8]
   23a08:	607a      	str	r2, [r7, #4]
	ARG_UNUSED(context);
	ARG_UNUSED(cb);
	ARG_UNUSED(user_data);

	return -EPROTONOSUPPORT;
   23a0a:	f06f 037a 	mvn.w	r3, #122	; 0x7a
}
   23a0e:	4618      	mov	r0, r3
   23a10:	3714      	adds	r7, #20
   23a12:	46bd      	mov	sp, r7
   23a14:	bc80      	pop	{r7}
   23a16:	4770      	bx	lr

00023a18 <net_tcp_connect>:
static inline int net_tcp_connect(struct net_context *context,
				  const struct sockaddr *addr,
				  struct sockaddr *laddr,
				  u16_t rport, u16_t lport, s32_t timeout,
				  net_context_connect_cb_t cb, void *user_data)
{
   23a18:	b480      	push	{r7}
   23a1a:	b085      	sub	sp, #20
   23a1c:	af00      	add	r7, sp, #0
   23a1e:	60f8      	str	r0, [r7, #12]
   23a20:	60b9      	str	r1, [r7, #8]
   23a22:	607a      	str	r2, [r7, #4]
   23a24:	807b      	strh	r3, [r7, #2]
	ARG_UNUSED(rport);
	ARG_UNUSED(lport);
	ARG_UNUSED(cb);
	ARG_UNUSED(user_data);

	return -EPROTONOSUPPORT;
   23a26:	f06f 037a 	mvn.w	r3, #122	; 0x7a
}
   23a2a:	4618      	mov	r0, r3
   23a2c:	3714      	adds	r7, #20
   23a2e:	46bd      	mov	sp, r7
   23a30:	bc80      	pop	{r7}
   23a32:	4770      	bx	lr

00023a34 <find_available_port>:
{
   23a34:	b580      	push	{r7, lr}
   23a36:	b084      	sub	sp, #16
   23a38:	af00      	add	r7, sp, #0
   23a3a:	6078      	str	r0, [r7, #4]
   23a3c:	6039      	str	r1, [r7, #0]
		local_port = sys_rand32_get() | 0x8000;
   23a3e:	f7ec fb23 	bl	10088 <sys_rand32_get>
   23a42:	4603      	mov	r3, r0
   23a44:	b29b      	uxth	r3, r3
   23a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
   23a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
   23a4e:	81fb      	strh	r3, [r7, #14]
		if (local_port <= 1023U) {
   23a50:	89fb      	ldrh	r3, [r7, #14]
   23a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
				net_context_get_ip_proto(context),
   23a56:	6878      	ldr	r0, [r7, #4]
   23a58:	f7ff ff1e 	bl	23898 <net_context_get_ip_proto>
   23a5c:	4603      	mov	r3, r0
	} while (check_used_port(
   23a5e:	b2d8      	uxtb	r0, r3
				htons(local_port), addr) == -EEXIST);
   23a60:	89fb      	ldrh	r3, [r7, #14]
   23a62:	0a1b      	lsrs	r3, r3, #8
   23a64:	b29b      	uxth	r3, r3
   23a66:	b21a      	sxth	r2, r3
   23a68:	89fb      	ldrh	r3, [r7, #14]
   23a6a:	021b      	lsls	r3, r3, #8
   23a6c:	b21b      	sxth	r3, r3
   23a6e:	4313      	orrs	r3, r2
   23a70:	b21b      	sxth	r3, r3
	} while (check_used_port(
   23a72:	b29b      	uxth	r3, r3
   23a74:	683a      	ldr	r2, [r7, #0]
   23a76:	4619      	mov	r1, r3
   23a78:	f7ef f8dc 	bl	12c34 <check_used_port>
   23a7c:	4603      	mov	r3, r0
				htons(local_port), addr) == -EEXIST);
   23a7e:	f113 0f11 	cmn.w	r3, #17
   23a82:	d0dc      	beq.n	23a3e <find_available_port+0xa>
	return htons(local_port);
   23a84:	89fb      	ldrh	r3, [r7, #14]
   23a86:	0a1b      	lsrs	r3, r3, #8
   23a88:	b29b      	uxth	r3, r3
   23a8a:	b21a      	sxth	r2, r3
   23a8c:	89fb      	ldrh	r3, [r7, #14]
   23a8e:	021b      	lsls	r3, r3, #8
   23a90:	b21b      	sxth	r3, r3
   23a92:	4313      	orrs	r3, r2
   23a94:	b21b      	sxth	r3, r3
   23a96:	b29b      	uxth	r3, r3
}
   23a98:	4618      	mov	r0, r3
   23a9a:	3710      	adds	r7, #16
   23a9c:	46bd      	mov	sp, r7
   23a9e:	bd80      	pop	{r7, pc}

00023aa0 <net_context_ref>:
{
   23aa0:	b580      	push	{r7, lr}
   23aa2:	b084      	sub	sp, #16
   23aa4:	af00      	add	r7, sp, #0
   23aa6:	6078      	str	r0, [r7, #4]
	int old_rc = atomic_inc(&context->refcount);
   23aa8:	687b      	ldr	r3, [r7, #4]
   23aaa:	3304      	adds	r3, #4
   23aac:	4618      	mov	r0, r3
   23aae:	f7ff fd19 	bl	234e4 <atomic_inc>
   23ab2:	60f8      	str	r0, [r7, #12]
	return old_rc + 1;
   23ab4:	68fb      	ldr	r3, [r7, #12]
   23ab6:	3301      	adds	r3, #1
}
   23ab8:	4618      	mov	r0, r3
   23aba:	3710      	adds	r7, #16
   23abc:	46bd      	mov	sp, r7
   23abe:	bd80      	pop	{r7, pc}

00023ac0 <net_context_unref>:
{
   23ac0:	b580      	push	{r7, lr}
   23ac2:	b084      	sub	sp, #16
   23ac4:	af00      	add	r7, sp, #0
   23ac6:	6078      	str	r0, [r7, #4]
	int old_rc = atomic_dec(&context->refcount);
   23ac8:	687b      	ldr	r3, [r7, #4]
   23aca:	3304      	adds	r3, #4
   23acc:	4618      	mov	r0, r3
   23ace:	f7ff fd16 	bl	234fe <atomic_dec>
   23ad2:	60f8      	str	r0, [r7, #12]
	if (old_rc != 1) {
   23ad4:	68fb      	ldr	r3, [r7, #12]
   23ad6:	2b01      	cmp	r3, #1
   23ad8:	d002      	beq.n	23ae0 <net_context_unref+0x20>
		return old_rc - 1;
   23ada:	68fb      	ldr	r3, [r7, #12]
   23adc:	3b01      	subs	r3, #1
   23ade:	e02c      	b.n	23b3a <net_context_unref+0x7a>
	k_mutex_lock(&context->lock, K_FOREVER);
   23ae0:	687b      	ldr	r3, [r7, #4]
   23ae2:	3308      	adds	r3, #8
   23ae4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23ae8:	4618      	mov	r0, r3
   23aea:	f7ff fd4a 	bl	23582 <k_mutex_lock>
	net_tcp_unref(context);
   23aee:	6878      	ldr	r0, [r7, #4]
   23af0:	f7ff ff7a 	bl	239e8 <net_tcp_unref>
	if (context->conn_handler) {
   23af4:	687b      	ldr	r3, [r7, #4]
   23af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   23af8:	2b00      	cmp	r3, #0
   23afa:	d007      	beq.n	23b0c <net_context_unref+0x4c>
		net_conn_unregister(context->conn_handler);
   23afc:	687b      	ldr	r3, [r7, #4]
   23afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   23b00:	4618      	mov	r0, r3
   23b02:	f7f0 fd4b 	bl	1459c <net_conn_unregister>
		context->conn_handler = NULL;
   23b06:	687b      	ldr	r3, [r7, #4]
   23b08:	2200      	movs	r2, #0
   23b0a:	62da      	str	r2, [r3, #44]	; 0x2c
	net_context_set_state(context, NET_CONTEXT_UNCONNECTED);
   23b0c:	2100      	movs	r1, #0
   23b0e:	6878      	ldr	r0, [r7, #4]
   23b10:	f7ff fe30 	bl	23774 <net_context_set_state>
	context->flags &= ~NET_CONTEXT_IN_USE;
   23b14:	687b      	ldr	r3, [r7, #4]
   23b16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
   23b1a:	f023 0301 	bic.w	r3, r3, #1
   23b1e:	b29a      	uxth	r2, r3
   23b20:	687b      	ldr	r3, [r7, #4]
   23b22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	NET_DBG("Context %p released", context);
   23b26:	f7ff fd0e 	bl	23546 <_is_user_context>
   23b2a:	4603      	mov	r3, r0
   23b2c:	72fb      	strb	r3, [r7, #11]
	k_mutex_unlock(&context->lock);
   23b2e:	687b      	ldr	r3, [r7, #4]
   23b30:	3308      	adds	r3, #8
   23b32:	4618      	mov	r0, r3
   23b34:	f7ff fd33 	bl	2359e <k_mutex_unlock>
	return 0;
   23b38:	2300      	movs	r3, #0
}
   23b3a:	4618      	mov	r0, r3
   23b3c:	3710      	adds	r7, #16
   23b3e:	46bd      	mov	sp, r7
   23b40:	bd80      	pop	{r7, pc}

00023b42 <bind_default>:
{
   23b42:	b580      	push	{r7, lr}
   23b44:	b08c      	sub	sp, #48	; 0x30
   23b46:	af00      	add	r7, sp, #0
   23b48:	6078      	str	r0, [r7, #4]
	sa_family_t family = net_context_get_family(context);
   23b4a:	6878      	ldr	r0, [r7, #4]
   23b4c:	f7ff fe36 	bl	237bc <net_context_get_family>
   23b50:	4603      	mov	r3, r0
   23b52:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (family == AF_INET) {
   23b54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
   23b56:	2b01      	cmp	r3, #1
   23b58:	d11f      	bne.n	23b9a <bind_default+0x58>
		if (net_sin_ptr(&context->local)->sin_addr) {
   23b5a:	687b      	ldr	r3, [r7, #4]
   23b5c:	331c      	adds	r3, #28
   23b5e:	4618      	mov	r0, r3
   23b60:	f7ff fdd9 	bl	23716 <net_sin_ptr>
   23b64:	4603      	mov	r3, r0
   23b66:	685b      	ldr	r3, [r3, #4]
   23b68:	2b00      	cmp	r3, #0
   23b6a:	d001      	beq.n	23b70 <bind_default+0x2e>
			return 0;
   23b6c:	2300      	movs	r3, #0
   23b6e:	e016      	b.n	23b9e <bind_default+0x5c>
		addr4.sin_family = AF_INET;
   23b70:	2301      	movs	r3, #1
   23b72:	84bb      	strh	r3, [r7, #36]	; 0x24
		addr4.sin_addr.s_addr = INADDR_ANY;
   23b74:	2300      	movs	r3, #0
   23b76:	62bb      	str	r3, [r7, #40]	; 0x28
			find_available_port(context,
   23b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
   23b7c:	4619      	mov	r1, r3
   23b7e:	6878      	ldr	r0, [r7, #4]
   23b80:	f7ff ff58 	bl	23a34 <find_available_port>
   23b84:	4603      	mov	r3, r0
		addr4.sin_port =
   23b86:	84fb      	strh	r3, [r7, #38]	; 0x26
		return net_context_bind(context, (struct sockaddr *)&addr4,
   23b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
   23b8c:	2208      	movs	r2, #8
   23b8e:	4619      	mov	r1, r3
   23b90:	6878      	ldr	r0, [r7, #4]
   23b92:	f000 f808 	bl	23ba6 <net_context_bind>
   23b96:	4603      	mov	r3, r0
   23b98:	e001      	b.n	23b9e <bind_default+0x5c>
	return -EINVAL;
   23b9a:	f06f 0315 	mvn.w	r3, #21
}
   23b9e:	4618      	mov	r0, r3
   23ba0:	3730      	adds	r7, #48	; 0x30
   23ba2:	46bd      	mov	sp, r7
   23ba4:	bd80      	pop	{r7, pc}

00023ba6 <net_context_bind>:
{
   23ba6:	b580      	push	{r7, lr}
   23ba8:	b0b8      	sub	sp, #224	; 0xe0
   23baa:	af00      	add	r7, sp, #0
   23bac:	60f8      	str	r0, [r7, #12]
   23bae:	60b9      	str	r1, [r7, #8]
   23bb0:	607a      	str	r2, [r7, #4]
	if (context->conn_handler) {
   23bb2:	68fb      	ldr	r3, [r7, #12]
   23bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   23bb6:	2b00      	cmp	r3, #0
   23bb8:	d002      	beq.n	23bc0 <net_context_bind+0x1a>
		return -EISCONN;
   23bba:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   23bbe:	e0ca      	b.n	23d56 <net_context_bind+0x1b0>
	if (addr->sa_family == AF_INET) {
   23bc0:	68bb      	ldr	r3, [r7, #8]
   23bc2:	881b      	ldrh	r3, [r3, #0]
   23bc4:	2b01      	cmp	r3, #1
   23bc6:	f040 80c4 	bne.w	23d52 <net_context_bind+0x1ac>
		struct sockaddr_in *addr4 = (struct sockaddr_in *)addr;
   23bca:	68bb      	ldr	r3, [r7, #8]
   23bcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		struct net_if *iface = NULL;
   23bd0:	2300      	movs	r3, #0
   23bd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		if (addrlen < sizeof(struct sockaddr_in)) {
   23bd6:	687b      	ldr	r3, [r7, #4]
   23bd8:	2b07      	cmp	r3, #7
   23bda:	d802      	bhi.n	23be2 <net_context_bind+0x3c>
			return -EINVAL;
   23bdc:	f06f 0315 	mvn.w	r3, #21
   23be0:	e0b9      	b.n	23d56 <net_context_bind+0x1b0>
		if (net_ipv4_is_addr_mcast(&addr4->sin_addr)) {
   23be2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
   23be6:	3304      	adds	r3, #4
   23be8:	4618      	mov	r0, r3
   23bea:	f7ff fd28 	bl	2363e <net_ipv4_is_addr_mcast>
   23bee:	4603      	mov	r3, r0
   23bf0:	2b00      	cmp	r3, #0
   23bf2:	d017      	beq.n	23c24 <net_context_bind+0x7e>
			maddr = net_if_ipv4_maddr_lookup(&addr4->sin_addr,
   23bf4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
   23bf8:	3304      	adds	r3, #4
   23bfa:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
   23bfe:	4611      	mov	r1, r2
   23c00:	4618      	mov	r0, r3
   23c02:	f7ef fdd3 	bl	137ac <net_if_ipv4_maddr_lookup>
   23c06:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
			if (!maddr) {
   23c0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
   23c0e:	2b00      	cmp	r3, #0
   23c10:	d102      	bne.n	23c18 <net_context_bind+0x72>
				return -ENOENT;
   23c12:	f06f 0301 	mvn.w	r3, #1
   23c16:	e09e      	b.n	23d56 <net_context_bind+0x1b0>
			ptr = &maddr->address.in_addr;
   23c18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
   23c1c:	3304      	adds	r3, #4
   23c1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
   23c22:	e02d      	b.n	23c80 <net_context_bind+0xda>
		} else if (addr4->sin_addr.s_addr == INADDR_ANY) {
   23c24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
   23c28:	685b      	ldr	r3, [r3, #4]
   23c2a:	2b00      	cmp	r3, #0
   23c2c:	d111      	bne.n	23c52 <net_context_bind+0xac>
				&net_sin(&context->remote)->sin_addr);
   23c2e:	68fb      	ldr	r3, [r7, #12]
   23c30:	3324      	adds	r3, #36	; 0x24
   23c32:	4618      	mov	r0, r3
   23c34:	f7ff fd5b 	bl	236ee <net_sin>
   23c38:	4603      	mov	r3, r0
   23c3a:	3304      	adds	r3, #4
			iface = net_if_ipv4_select_src_iface(
   23c3c:	4618      	mov	r0, r3
   23c3e:	f7ef fc33 	bl	134a8 <net_if_ipv4_select_src_iface>
   23c42:	4603      	mov	r3, r0
   23c44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			ptr = (struct in_addr *)net_ipv4_unspecified_address();
   23c48:	f7f0 fa6e 	bl	14128 <net_ipv4_unspecified_address>
   23c4c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
   23c50:	e016      	b.n	23c80 <net_context_bind+0xda>
			ifaddr = net_if_ipv4_addr_lookup(&addr4->sin_addr,
   23c52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
   23c56:	3304      	adds	r3, #4
   23c58:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
   23c5c:	4611      	mov	r1, r2
   23c5e:	4618      	mov	r0, r3
   23c60:	f7ef fcc2 	bl	135e8 <net_if_ipv4_addr_lookup>
   23c64:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
			if (!ifaddr) {
   23c68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
   23c6c:	2b00      	cmp	r3, #0
   23c6e:	d102      	bne.n	23c76 <net_context_bind+0xd0>
				return -ENOENT;
   23c70:	f06f 0301 	mvn.w	r3, #1
   23c74:	e06f      	b.n	23d56 <net_context_bind+0x1b0>
			ptr = &ifaddr->address.in_addr;
   23c76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
   23c7a:	3304      	adds	r3, #4
   23c7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		if (!iface) {
   23c80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   23c84:	2b00      	cmp	r3, #0
   23c86:	d107      	bne.n	23c98 <net_context_bind+0xf2>
			NET_ERR("Cannot bind to %s",
   23c88:	f7ff fc5d 	bl	23546 <_is_user_context>
   23c8c:	4603      	mov	r3, r0
   23c8e:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
			return -EADDRNOTAVAIL;
   23c92:	f06f 037c 	mvn.w	r3, #124	; 0x7c
   23c96:	e05e      	b.n	23d56 <net_context_bind+0x1b0>
		k_mutex_lock(&context->lock, K_FOREVER);
   23c98:	68fb      	ldr	r3, [r7, #12]
   23c9a:	3308      	adds	r3, #8
   23c9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23ca0:	4618      	mov	r0, r3
   23ca2:	f7ff fc6e 	bl	23582 <k_mutex_lock>
		ret = 0;
   23ca6:	2300      	movs	r3, #0
   23ca8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		net_context_set_iface(context, iface);
   23cac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   23cb0:	4619      	mov	r1, r3
   23cb2:	68f8      	ldr	r0, [r7, #12]
   23cb4:	f7ff fe1a 	bl	238ec <net_context_set_iface>
		net_sin_ptr(&context->local)->sin_family = AF_INET;
   23cb8:	68fb      	ldr	r3, [r7, #12]
   23cba:	331c      	adds	r3, #28
   23cbc:	4618      	mov	r0, r3
   23cbe:	f7ff fd2a 	bl	23716 <net_sin_ptr>
   23cc2:	4603      	mov	r3, r0
   23cc4:	2201      	movs	r2, #1
   23cc6:	801a      	strh	r2, [r3, #0]
		net_sin_ptr(&context->local)->sin_addr = ptr;
   23cc8:	68fb      	ldr	r3, [r7, #12]
   23cca:	331c      	adds	r3, #28
   23ccc:	4618      	mov	r0, r3
   23cce:	f7ff fd22 	bl	23716 <net_sin_ptr>
   23cd2:	4602      	mov	r2, r0
   23cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
   23cd8:	6053      	str	r3, [r2, #4]
		if (addr4->sin_port) {
   23cda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
   23cde:	885b      	ldrh	r3, [r3, #2]
   23ce0:	2b00      	cmp	r3, #0
   23ce2:	d01e      	beq.n	23d22 <net_context_bind+0x17c>
			ret = check_used_port(AF_INET, addr4->sin_port,
   23ce4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
   23ce8:	885b      	ldrh	r3, [r3, #2]
   23cea:	68ba      	ldr	r2, [r7, #8]
   23cec:	4619      	mov	r1, r3
   23cee:	2001      	movs	r0, #1
   23cf0:	f7ee ffa0 	bl	12c34 <check_used_port>
   23cf4:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
			if (!ret) {
   23cf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
   23cfc:	2b00      	cmp	r3, #0
   23cfe:	d10a      	bne.n	23d16 <net_context_bind+0x170>
				net_sin_ptr(&context->local)->sin_port =
   23d00:	68fb      	ldr	r3, [r7, #12]
   23d02:	331c      	adds	r3, #28
   23d04:	4618      	mov	r0, r3
   23d06:	f7ff fd06 	bl	23716 <net_sin_ptr>
   23d0a:	4602      	mov	r2, r0
					addr4->sin_port;
   23d0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
   23d10:	885b      	ldrh	r3, [r3, #2]
				net_sin_ptr(&context->local)->sin_port =
   23d12:	8053      	strh	r3, [r2, #2]
   23d14:	e00f      	b.n	23d36 <net_context_bind+0x190>
				NET_ERR("Port %d is in use!",
   23d16:	f7ff fc16 	bl	23546 <_is_user_context>
   23d1a:	4603      	mov	r3, r0
   23d1c:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
				goto unlock;
   23d20:	e00f      	b.n	23d42 <net_context_bind+0x19c>
				net_sin_ptr(&context->local)->sin_port;
   23d22:	68fb      	ldr	r3, [r7, #12]
   23d24:	331c      	adds	r3, #28
   23d26:	4618      	mov	r0, r3
   23d28:	f7ff fcf5 	bl	23716 <net_sin_ptr>
   23d2c:	4603      	mov	r3, r0
   23d2e:	885a      	ldrh	r2, [r3, #2]
			addr4->sin_port =
   23d30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
   23d34:	805a      	strh	r2, [r3, #2]
		NET_DBG("Context %p binding to %s %s:%d iface %p",
   23d36:	f7ff fc06 	bl	23546 <_is_user_context>
   23d3a:	4603      	mov	r3, r0
   23d3c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
	unlock:
   23d40:	bf00      	nop
		k_mutex_unlock(&context->lock);
   23d42:	68fb      	ldr	r3, [r7, #12]
   23d44:	3308      	adds	r3, #8
   23d46:	4618      	mov	r0, r3
   23d48:	f7ff fc29 	bl	2359e <k_mutex_unlock>
		return ret;
   23d4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
   23d50:	e001      	b.n	23d56 <net_context_bind+0x1b0>
	return -EINVAL;
   23d52:	f06f 0315 	mvn.w	r3, #21
}
   23d56:	4618      	mov	r0, r3
   23d58:	37e0      	adds	r7, #224	; 0xe0
   23d5a:	46bd      	mov	sp, r7
   23d5c:	bd80      	pop	{r7, pc}

00023d5e <net_context_listen>:
{
   23d5e:	b580      	push	{r7, lr}
   23d60:	b082      	sub	sp, #8
   23d62:	af00      	add	r7, sp, #0
   23d64:	6078      	str	r0, [r7, #4]
   23d66:	6039      	str	r1, [r7, #0]
	if (!net_context_is_used(context)) {
   23d68:	6878      	ldr	r0, [r7, #4]
   23d6a:	f7ff fcde 	bl	2372a <net_context_is_used>
   23d6e:	4603      	mov	r3, r0
   23d70:	f083 0301 	eor.w	r3, r3, #1
   23d74:	b2db      	uxtb	r3, r3
   23d76:	2b00      	cmp	r3, #0
   23d78:	d002      	beq.n	23d80 <net_context_listen+0x22>
		return -EBADF;
   23d7a:	f06f 0308 	mvn.w	r3, #8
   23d7e:	e01a      	b.n	23db6 <net_context_listen+0x58>
	k_mutex_lock(&context->lock, K_FOREVER);
   23d80:	687b      	ldr	r3, [r7, #4]
   23d82:	3308      	adds	r3, #8
   23d84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23d88:	4618      	mov	r0, r3
   23d8a:	f7ff fbfa 	bl	23582 <k_mutex_lock>
	if (net_tcp_listen(context) >= 0) {
   23d8e:	6878      	ldr	r0, [r7, #4]
   23d90:	f7ff fe08 	bl	239a4 <net_tcp_listen>
   23d94:	4603      	mov	r3, r0
   23d96:	2b00      	cmp	r3, #0
   23d98:	db06      	blt.n	23da8 <net_context_listen+0x4a>
		k_mutex_unlock(&context->lock);
   23d9a:	687b      	ldr	r3, [r7, #4]
   23d9c:	3308      	adds	r3, #8
   23d9e:	4618      	mov	r0, r3
   23da0:	f7ff fbfd 	bl	2359e <k_mutex_unlock>
		return 0;
   23da4:	2300      	movs	r3, #0
   23da6:	e006      	b.n	23db6 <net_context_listen+0x58>
	k_mutex_unlock(&context->lock);
   23da8:	687b      	ldr	r3, [r7, #4]
   23daa:	3308      	adds	r3, #8
   23dac:	4618      	mov	r0, r3
   23dae:	f7ff fbf6 	bl	2359e <k_mutex_unlock>
	return -EOPNOTSUPP;
   23db2:	f06f 035e 	mvn.w	r3, #94	; 0x5e
}
   23db6:	4618      	mov	r0, r3
   23db8:	3708      	adds	r7, #8
   23dba:	46bd      	mov	sp, r7
   23dbc:	bd80      	pop	{r7, pc}

00023dbe <net_context_create_ipv4_new>:
{
   23dbe:	b580      	push	{r7, lr}
   23dc0:	b086      	sub	sp, #24
   23dc2:	af00      	add	r7, sp, #0
   23dc4:	60f8      	str	r0, [r7, #12]
   23dc6:	60b9      	str	r1, [r7, #8]
   23dc8:	607a      	str	r2, [r7, #4]
   23dca:	603b      	str	r3, [r7, #0]
	if (!src) {
   23dcc:	687b      	ldr	r3, [r7, #4]
   23dce:	2b00      	cmp	r3, #0
   23dd0:	d103      	bne.n	23dda <net_context_create_ipv4_new+0x1c>
		src = ((struct sockaddr_in_ptr *)&context->local)->sin_addr;
   23dd2:	68fb      	ldr	r3, [r7, #12]
   23dd4:	331c      	adds	r3, #28
   23dd6:	685b      	ldr	r3, [r3, #4]
   23dd8:	607b      	str	r3, [r7, #4]
	if (net_ipv4_is_addr_unspecified(src)
   23dda:	6878      	ldr	r0, [r7, #4]
   23ddc:	f7ff fc1d 	bl	2361a <net_ipv4_is_addr_unspecified>
   23de0:	4603      	mov	r3, r0
   23de2:	2b00      	cmp	r3, #0
   23de4:	d105      	bne.n	23df2 <net_context_create_ipv4_new+0x34>
	    || net_ipv4_is_addr_mcast(src)) {
   23de6:	6878      	ldr	r0, [r7, #4]
   23de8:	f7ff fc29 	bl	2363e <net_ipv4_is_addr_mcast>
   23dec:	4603      	mov	r3, r0
   23dee:	2b00      	cmp	r3, #0
   23df0:	d015      	beq.n	23e1e <net_context_create_ipv4_new+0x60>
		src = net_if_ipv4_select_src_addr(net_pkt_iface(pkt),
   23df2:	68b8      	ldr	r0, [r7, #8]
   23df4:	f7ff fda4 	bl	23940 <net_pkt_iface>
   23df8:	4603      	mov	r3, r0
   23dfa:	6839      	ldr	r1, [r7, #0]
   23dfc:	4618      	mov	r0, r3
   23dfe:	f7ef fb77 	bl	134f0 <net_if_ipv4_select_src_addr>
   23e02:	6078      	str	r0, [r7, #4]
		if (net_ipv4_is_addr_unspecified(src)) {
   23e04:	6878      	ldr	r0, [r7, #4]
   23e06:	f7ff fc08 	bl	2361a <net_ipv4_is_addr_unspecified>
   23e0a:	4603      	mov	r3, r0
   23e0c:	2b00      	cmp	r3, #0
   23e0e:	d006      	beq.n	23e1e <net_context_create_ipv4_new+0x60>
			NET_DBG("DROP: src addr is unspecified");
   23e10:	f7ff fb99 	bl	23546 <_is_user_context>
   23e14:	4603      	mov	r3, r0
   23e16:	75fb      	strb	r3, [r7, #23]
			return -EINVAL;
   23e18:	f06f 0315 	mvn.w	r3, #21
   23e1c:	e00d      	b.n	23e3a <net_context_create_ipv4_new+0x7c>
	net_pkt_set_ipv4_ttl(pkt, net_context_get_ipv4_ttl(context));
   23e1e:	68f8      	ldr	r0, [r7, #12]
   23e20:	f7ff fd75 	bl	2390e <net_context_get_ipv4_ttl>
   23e24:	4603      	mov	r3, r0
   23e26:	4619      	mov	r1, r3
   23e28:	68b8      	ldr	r0, [r7, #8]
   23e2a:	f7ff fd94 	bl	23956 <net_pkt_set_ipv4_ttl>
	return net_ipv4_create(pkt, src, dst);
   23e2e:	683a      	ldr	r2, [r7, #0]
   23e30:	6879      	ldr	r1, [r7, #4]
   23e32:	68b8      	ldr	r0, [r7, #8]
   23e34:	f003 fc09 	bl	2764a <net_ipv4_create>
   23e38:	4603      	mov	r3, r0
}
   23e3a:	4618      	mov	r0, r3
   23e3c:	3718      	adds	r7, #24
   23e3e:	46bd      	mov	sp, r7
   23e40:	bd80      	pop	{r7, pc}

00023e42 <net_context_connect>:
{
   23e42:	b590      	push	{r4, r7, lr}
   23e44:	b091      	sub	sp, #68	; 0x44
   23e46:	af04      	add	r7, sp, #16
   23e48:	60f8      	str	r0, [r7, #12]
   23e4a:	60b9      	str	r1, [r7, #8]
   23e4c:	607a      	str	r2, [r7, #4]
   23e4e:	603b      	str	r3, [r7, #0]
	struct sockaddr *laddr = NULL;
   23e50:	2300      	movs	r3, #0
   23e52:	62fb      	str	r3, [r7, #44]	; 0x2c
	k_mutex_lock(&context->lock, K_FOREVER);
   23e54:	68fb      	ldr	r3, [r7, #12]
   23e56:	3308      	adds	r3, #8
   23e58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23e5c:	4618      	mov	r0, r3
   23e5e:	f7ff fb90 	bl	23582 <k_mutex_lock>
	if (!net_context_is_used(context)) {
   23e62:	68f8      	ldr	r0, [r7, #12]
   23e64:	f7ff fc61 	bl	2372a <net_context_is_used>
   23e68:	4603      	mov	r3, r0
   23e6a:	f083 0301 	eor.w	r3, r3, #1
   23e6e:	b2db      	uxtb	r3, r3
   23e70:	2b00      	cmp	r3, #0
   23e72:	d003      	beq.n	23e7c <net_context_connect+0x3a>
		ret = -EBADF;
   23e74:	f06f 0308 	mvn.w	r3, #8
   23e78:	62bb      	str	r3, [r7, #40]	; 0x28
		goto unlock;
   23e7a:	e0ce      	b.n	2401a <net_context_connect+0x1d8>
	if (addr->sa_family != net_context_get_family(context)) {
   23e7c:	68bb      	ldr	r3, [r7, #8]
   23e7e:	881c      	ldrh	r4, [r3, #0]
   23e80:	68f8      	ldr	r0, [r7, #12]
   23e82:	f7ff fc9b 	bl	237bc <net_context_get_family>
   23e86:	4603      	mov	r3, r0
   23e88:	429c      	cmp	r4, r3
   23e8a:	d003      	beq.n	23e94 <net_context_connect+0x52>
		ret = -EINVAL;
   23e8c:	f06f 0315 	mvn.w	r3, #21
   23e90:	62bb      	str	r3, [r7, #40]	; 0x28
		goto unlock;
   23e92:	e0c2      	b.n	2401a <net_context_connect+0x1d8>
	if (net_context_get_state(context) == NET_CONTEXT_LISTENING) {
   23e94:	68f8      	ldr	r0, [r7, #12]
   23e96:	f7ff fc5b 	bl	23750 <net_context_get_state>
   23e9a:	4603      	mov	r3, r0
   23e9c:	2b03      	cmp	r3, #3
   23e9e:	d103      	bne.n	23ea8 <net_context_connect+0x66>
		ret = -EOPNOTSUPP;
   23ea0:	f06f 035e 	mvn.w	r3, #94	; 0x5e
   23ea4:	62bb      	str	r3, [r7, #40]	; 0x28
		goto unlock;
   23ea6:	e0b8      	b.n	2401a <net_context_connect+0x1d8>
	if (net_context_get_family(context) == AF_INET) {
   23ea8:	68f8      	ldr	r0, [r7, #12]
   23eaa:	f7ff fc87 	bl	237bc <net_context_get_family>
   23eae:	4603      	mov	r3, r0
   23eb0:	2b01      	cmp	r3, #1
   23eb2:	f040 8085 	bne.w	23fc0 <net_context_connect+0x17e>
		struct sockaddr_in *addr4 = (struct sockaddr_in *)
   23eb6:	68fb      	ldr	r3, [r7, #12]
   23eb8:	3324      	adds	r3, #36	; 0x24
   23eba:	627b      	str	r3, [r7, #36]	; 0x24
		if (addrlen < sizeof(struct sockaddr_in)) {
   23ebc:	687b      	ldr	r3, [r7, #4]
   23ebe:	2b07      	cmp	r3, #7
   23ec0:	d803      	bhi.n	23eca <net_context_connect+0x88>
			ret = -EINVAL;
   23ec2:	f06f 0315 	mvn.w	r3, #21
   23ec6:	62bb      	str	r3, [r7, #40]	; 0x28
			goto unlock;
   23ec8:	e0a7      	b.n	2401a <net_context_connect+0x1d8>
		addr4 = (struct sockaddr_in *)&context->remote;
   23eca:	68fb      	ldr	r3, [r7, #12]
   23ecc:	3324      	adds	r3, #36	; 0x24
   23ece:	627b      	str	r3, [r7, #36]	; 0x24
		memcpy(&addr4->sin_addr, &net_sin(addr)->sin_addr,
   23ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23ed2:	1d1c      	adds	r4, r3, #4
   23ed4:	68b8      	ldr	r0, [r7, #8]
   23ed6:	f7ff fc0a 	bl	236ee <net_sin>
   23eda:	4603      	mov	r3, r0
   23edc:	3304      	adds	r3, #4
   23ede:	2204      	movs	r2, #4
   23ee0:	4619      	mov	r1, r3
   23ee2:	4620      	mov	r0, r4
   23ee4:	f7de f8c0 	bl	2068 <memcpy>
		addr4->sin_port = net_sin(addr)->sin_port;
   23ee8:	68b8      	ldr	r0, [r7, #8]
   23eea:	f7ff fc00 	bl	236ee <net_sin>
   23eee:	4603      	mov	r3, r0
   23ef0:	885a      	ldrh	r2, [r3, #2]
   23ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23ef4:	805a      	strh	r2, [r3, #2]
		addr4->sin_family = AF_INET;
   23ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23ef8:	2201      	movs	r2, #1
   23efa:	801a      	strh	r2, [r3, #0]
		if (addr4->sin_addr.s_addr) {
   23efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23efe:	685b      	ldr	r3, [r3, #4]
   23f00:	2b00      	cmp	r3, #0
   23f02:	d009      	beq.n	23f18 <net_context_connect+0xd6>
			context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
   23f04:	68fb      	ldr	r3, [r7, #12]
   23f06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
   23f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   23f0e:	b29a      	uxth	r2, r3
   23f10:	68fb      	ldr	r3, [r7, #12]
   23f12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
   23f16:	e008      	b.n	23f2a <net_context_connect+0xe8>
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
   23f18:	68fb      	ldr	r3, [r7, #12]
   23f1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
   23f1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   23f22:	b29a      	uxth	r2, r3
   23f24:	68fb      	ldr	r3, [r7, #12]
   23f26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		rport = addr4->sin_port;
   23f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23f2c:	885b      	ldrh	r3, [r3, #2]
   23f2e:	847b      	strh	r3, [r7, #34]	; 0x22
		ret = bind_default(context);
   23f30:	68f8      	ldr	r0, [r7, #12]
   23f32:	f7ff fe06 	bl	23b42 <bind_default>
   23f36:	62b8      	str	r0, [r7, #40]	; 0x28
		if (ret) {
   23f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
   23f3a:	2b00      	cmp	r3, #0
   23f3c:	d16c      	bne.n	24018 <net_context_connect+0x1d6>
		net_sin_ptr(&context->local)->sin_family = AF_INET;
   23f3e:	68fb      	ldr	r3, [r7, #12]
   23f40:	331c      	adds	r3, #28
   23f42:	4618      	mov	r0, r3
   23f44:	f7ff fbe7 	bl	23716 <net_sin_ptr>
   23f48:	4603      	mov	r3, r0
   23f4a:	2201      	movs	r2, #1
   23f4c:	801a      	strh	r2, [r3, #0]
		net_sin(&local_addr)->sin_family = AF_INET;
   23f4e:	f107 0310 	add.w	r3, r7, #16
   23f52:	4618      	mov	r0, r3
   23f54:	f7ff fbcb 	bl	236ee <net_sin>
   23f58:	4603      	mov	r3, r0
   23f5a:	2201      	movs	r2, #1
   23f5c:	801a      	strh	r2, [r3, #0]
			net_sin((struct sockaddr *)&context->local)->sin_port;
   23f5e:	68fb      	ldr	r3, [r7, #12]
   23f60:	331c      	adds	r3, #28
   23f62:	4618      	mov	r0, r3
   23f64:	f7ff fbc3 	bl	236ee <net_sin>
   23f68:	4603      	mov	r3, r0
		net_sin(&local_addr)->sin_port = lport =
   23f6a:	885b      	ldrh	r3, [r3, #2]
   23f6c:	843b      	strh	r3, [r7, #32]
   23f6e:	f107 0310 	add.w	r3, r7, #16
   23f72:	4618      	mov	r0, r3
   23f74:	f7ff fbbb 	bl	236ee <net_sin>
   23f78:	4602      	mov	r2, r0
   23f7a:	8c3b      	ldrh	r3, [r7, #32]
   23f7c:	8053      	strh	r3, [r2, #2]
		if (net_sin_ptr(&context->local)->sin_addr) {
   23f7e:	68fb      	ldr	r3, [r7, #12]
   23f80:	331c      	adds	r3, #28
   23f82:	4618      	mov	r0, r3
   23f84:	f7ff fbc7 	bl	23716 <net_sin_ptr>
   23f88:	4603      	mov	r3, r0
   23f8a:	685b      	ldr	r3, [r3, #4]
   23f8c:	2b00      	cmp	r3, #0
   23f8e:	d01b      	beq.n	23fc8 <net_context_connect+0x186>
			net_ipaddr_copy(&net_sin(&local_addr)->sin_addr,
   23f90:	f107 0310 	add.w	r3, r7, #16
   23f94:	4618      	mov	r0, r3
   23f96:	f7ff fbaa 	bl	236ee <net_sin>
   23f9a:	4603      	mov	r3, r0
   23f9c:	3304      	adds	r3, #4
   23f9e:	61fb      	str	r3, [r7, #28]
   23fa0:	68fb      	ldr	r3, [r7, #12]
   23fa2:	331c      	adds	r3, #28
   23fa4:	4618      	mov	r0, r3
   23fa6:	f7ff fbb6 	bl	23716 <net_sin_ptr>
   23faa:	4603      	mov	r3, r0
   23fac:	685b      	ldr	r3, [r3, #4]
   23fae:	61bb      	str	r3, [r7, #24]
   23fb0:	69bb      	ldr	r3, [r7, #24]
   23fb2:	681a      	ldr	r2, [r3, #0]
   23fb4:	69fb      	ldr	r3, [r7, #28]
   23fb6:	601a      	str	r2, [r3, #0]
			laddr = &local_addr;
   23fb8:	f107 0310 	add.w	r3, r7, #16
   23fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   23fbe:	e003      	b.n	23fc8 <net_context_connect+0x186>
		ret = -EINVAL; /* Not IPv4 or IPv6 */
   23fc0:	f06f 0315 	mvn.w	r3, #21
   23fc4:	62bb      	str	r3, [r7, #40]	; 0x28
		goto unlock;
   23fc6:	e028      	b.n	2401a <net_context_connect+0x1d8>
	switch (net_context_get_type(context)) {
   23fc8:	68f8      	ldr	r0, [r7, #12]
   23fca:	f7ff fc32 	bl	23832 <net_context_get_type>
   23fce:	4603      	mov	r3, r0
   23fd0:	2b01      	cmp	r3, #1
   23fd2:	d00c      	beq.n	23fee <net_context_connect+0x1ac>
   23fd4:	2b02      	cmp	r3, #2
   23fd6:	d11b      	bne.n	24010 <net_context_connect+0x1ce>
		if (cb) {
   23fd8:	683b      	ldr	r3, [r7, #0]
   23fda:	2b00      	cmp	r3, #0
   23fdc:	d004      	beq.n	23fe8 <net_context_connect+0x1a6>
			cb(context, 0, user_data);
   23fde:	683b      	ldr	r3, [r7, #0]
   23fe0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   23fe2:	2100      	movs	r1, #0
   23fe4:	68f8      	ldr	r0, [r7, #12]
   23fe6:	4798      	blx	r3
		ret = 0;
   23fe8:	2300      	movs	r3, #0
   23fea:	62bb      	str	r3, [r7, #40]	; 0x28
		goto unlock;
   23fec:	e015      	b.n	2401a <net_context_connect+0x1d8>
		ret = net_tcp_connect(context, addr, laddr, rport, lport,
   23fee:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
   23ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   23ff2:	9303      	str	r3, [sp, #12]
   23ff4:	683b      	ldr	r3, [r7, #0]
   23ff6:	9302      	str	r3, [sp, #8]
   23ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   23ffa:	9301      	str	r3, [sp, #4]
   23ffc:	8c3b      	ldrh	r3, [r7, #32]
   23ffe:	9300      	str	r3, [sp, #0]
   24000:	4613      	mov	r3, r2
   24002:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   24004:	68b9      	ldr	r1, [r7, #8]
   24006:	68f8      	ldr	r0, [r7, #12]
   24008:	f7ff fd06 	bl	23a18 <net_tcp_connect>
   2400c:	62b8      	str	r0, [r7, #40]	; 0x28
		goto unlock;
   2400e:	e004      	b.n	2401a <net_context_connect+0x1d8>
		ret = -ENOTSUP;
   24010:	f06f 0385 	mvn.w	r3, #133	; 0x85
   24014:	62bb      	str	r3, [r7, #40]	; 0x28
		goto unlock;
   24016:	e000      	b.n	2401a <net_context_connect+0x1d8>
			goto unlock;
   24018:	bf00      	nop
	k_mutex_unlock(&context->lock);
   2401a:	68fb      	ldr	r3, [r7, #12]
   2401c:	3308      	adds	r3, #8
   2401e:	4618      	mov	r0, r3
   24020:	f7ff fabd 	bl	2359e <k_mutex_unlock>
	return ret;
   24024:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
   24026:	4618      	mov	r0, r3
   24028:	3734      	adds	r7, #52	; 0x34
   2402a:	46bd      	mov	sp, r7
   2402c:	bd90      	pop	{r4, r7, pc}

0002402e <net_context_accept>:
{
   2402e:	b580      	push	{r7, lr}
   24030:	b08a      	sub	sp, #40	; 0x28
   24032:	af00      	add	r7, sp, #0
   24034:	60f8      	str	r0, [r7, #12]
   24036:	60b9      	str	r1, [r7, #8]
   24038:	607a      	str	r2, [r7, #4]
   2403a:	603b      	str	r3, [r7, #0]
	int ret = 0;
   2403c:	2300      	movs	r3, #0
   2403e:	627b      	str	r3, [r7, #36]	; 0x24
	if (!net_context_is_used(context)) {
   24040:	68f8      	ldr	r0, [r7, #12]
   24042:	f7ff fb72 	bl	2372a <net_context_is_used>
   24046:	4603      	mov	r3, r0
   24048:	f083 0301 	eor.w	r3, r3, #1
   2404c:	b2db      	uxtb	r3, r3
   2404e:	2b00      	cmp	r3, #0
   24050:	d002      	beq.n	24058 <net_context_accept+0x2a>
		return -EBADF;
   24052:	f06f 0308 	mvn.w	r3, #8
   24056:	e02f      	b.n	240b8 <net_context_accept+0x8a>
	k_mutex_lock(&context->lock, K_FOREVER);
   24058:	68fb      	ldr	r3, [r7, #12]
   2405a:	3308      	adds	r3, #8
   2405c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   24060:	4618      	mov	r0, r3
   24062:	f7ff fa8e 	bl	23582 <k_mutex_lock>
	if ((net_context_get_state(context) != NET_CONTEXT_LISTENING) &&
   24066:	68f8      	ldr	r0, [r7, #12]
   24068:	f7ff fb72 	bl	23750 <net_context_get_state>
   2406c:	4603      	mov	r3, r0
   2406e:	2b03      	cmp	r3, #3
   24070:	d00e      	beq.n	24090 <net_context_accept+0x62>
	    (net_context_get_type(context) != SOCK_STREAM)) {
   24072:	68f8      	ldr	r0, [r7, #12]
   24074:	f7ff fbdd 	bl	23832 <net_context_get_type>
   24078:	4603      	mov	r3, r0
	if ((net_context_get_state(context) != NET_CONTEXT_LISTENING) &&
   2407a:	2b01      	cmp	r3, #1
   2407c:	d008      	beq.n	24090 <net_context_accept+0x62>
		NET_DBG("Invalid socket, state %d type %d",
   2407e:	f7ff fa62 	bl	23546 <_is_user_context>
   24082:	4603      	mov	r3, r0
   24084:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		ret = -EINVAL;
   24088:	f06f 0315 	mvn.w	r3, #21
   2408c:	627b      	str	r3, [r7, #36]	; 0x24
		goto unlock;
   2408e:	e00d      	b.n	240ac <net_context_accept+0x7e>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   24090:	68f8      	ldr	r0, [r7, #12]
   24092:	f7ff fc01 	bl	23898 <net_context_get_ip_proto>
   24096:	4603      	mov	r3, r0
   24098:	2b06      	cmp	r3, #6
   2409a:	d106      	bne.n	240aa <net_context_accept+0x7c>
		ret = net_tcp_accept(context, cb, user_data);
   2409c:	683a      	ldr	r2, [r7, #0]
   2409e:	68b9      	ldr	r1, [r7, #8]
   240a0:	68f8      	ldr	r0, [r7, #12]
   240a2:	f7ff fcac 	bl	239fe <net_tcp_accept>
   240a6:	6278      	str	r0, [r7, #36]	; 0x24
		goto unlock;
   240a8:	e000      	b.n	240ac <net_context_accept+0x7e>
unlock:
   240aa:	bf00      	nop
	k_mutex_unlock(&context->lock);
   240ac:	68fb      	ldr	r3, [r7, #12]
   240ae:	3308      	adds	r3, #8
   240b0:	4618      	mov	r0, r3
   240b2:	f7ff fa74 	bl	2359e <k_mutex_unlock>
	return ret;
   240b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   240b8:	4618      	mov	r0, r3
   240ba:	3728      	adds	r7, #40	; 0x28
   240bc:	46bd      	mov	sp, r7
   240be:	bd80      	pop	{r7, pc}

000240c0 <context_setup_udp_packet>:
{
   240c0:	b580      	push	{r7, lr}
   240c2:	b088      	sub	sp, #32
   240c4:	af00      	add	r7, sp, #0
   240c6:	60f8      	str	r0, [r7, #12]
   240c8:	60b9      	str	r1, [r7, #8]
   240ca:	607a      	str	r2, [r7, #4]
   240cc:	603b      	str	r3, [r7, #0]
	int ret = -EINVAL;
   240ce:	f06f 0315 	mvn.w	r3, #21
   240d2:	61fb      	str	r3, [r7, #28]
	u16_t dst_port = 0U;
   240d4:	2300      	movs	r3, #0
   240d6:	837b      	strh	r3, [r7, #26]
	    net_context_get_family(context) == AF_INET) {
   240d8:	68f8      	ldr	r0, [r7, #12]
   240da:	f7ff fb6f 	bl	237bc <net_context_get_family>
   240de:	4603      	mov	r3, r0
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
   240e0:	2b01      	cmp	r3, #1
   240e2:	d10c      	bne.n	240fe <context_setup_udp_packet+0x3e>
		struct sockaddr_in *addr4 = (struct sockaddr_in *)dst_addr;
   240e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   240e6:	617b      	str	r3, [r7, #20]
		dst_port = addr4->sin_port;
   240e8:	697b      	ldr	r3, [r7, #20]
   240ea:	885b      	ldrh	r3, [r3, #2]
   240ec:	837b      	strh	r3, [r7, #26]
						  NULL, &addr4->sin_addr);
   240ee:	697b      	ldr	r3, [r7, #20]
   240f0:	3304      	adds	r3, #4
		ret = net_context_create_ipv4_new(context, pkt,
   240f2:	2200      	movs	r2, #0
   240f4:	68b9      	ldr	r1, [r7, #8]
   240f6:	68f8      	ldr	r0, [r7, #12]
   240f8:	f7ff fe61 	bl	23dbe <net_context_create_ipv4_new>
   240fc:	61f8      	str	r0, [r7, #28]
	if (ret < 0) {
   240fe:	69fb      	ldr	r3, [r7, #28]
   24100:	2b00      	cmp	r3, #0
   24102:	da01      	bge.n	24108 <context_setup_udp_packet+0x48>
		return ret;
   24104:	69fb      	ldr	r3, [r7, #28]
   24106:	e026      	b.n	24156 <context_setup_udp_packet+0x96>
	ret = bind_default(context);
   24108:	68f8      	ldr	r0, [r7, #12]
   2410a:	f7ff fd1a 	bl	23b42 <bind_default>
   2410e:	61f8      	str	r0, [r7, #28]
	if (ret) {
   24110:	69fb      	ldr	r3, [r7, #28]
   24112:	2b00      	cmp	r3, #0
   24114:	d001      	beq.n	2411a <context_setup_udp_packet+0x5a>
		return ret;
   24116:	69fb      	ldr	r3, [r7, #28]
   24118:	e01d      	b.n	24156 <context_setup_udp_packet+0x96>
				     &context->local)->sin_port,
   2411a:	68fb      	ldr	r3, [r7, #12]
   2411c:	331c      	adds	r3, #28
			     net_sin((struct sockaddr *)
   2411e:	4618      	mov	r0, r3
   24120:	f7ff fae5 	bl	236ee <net_sin>
   24124:	4603      	mov	r3, r0
	ret = net_udp_create(pkt,
   24126:	885b      	ldrh	r3, [r3, #2]
   24128:	8b7a      	ldrh	r2, [r7, #26]
   2412a:	4619      	mov	r1, r3
   2412c:	68b8      	ldr	r0, [r7, #8]
   2412e:	f003 ffcc 	bl	280ca <net_udp_create>
   24132:	61f8      	str	r0, [r7, #28]
	if (ret) {
   24134:	69fb      	ldr	r3, [r7, #28]
   24136:	2b00      	cmp	r3, #0
   24138:	d001      	beq.n	2413e <context_setup_udp_packet+0x7e>
		return ret;
   2413a:	69fb      	ldr	r3, [r7, #28]
   2413c:	e00b      	b.n	24156 <context_setup_udp_packet+0x96>
	ret = net_pkt_write(pkt, buf, len);
   2413e:	683a      	ldr	r2, [r7, #0]
   24140:	6879      	ldr	r1, [r7, #4]
   24142:	68b8      	ldr	r0, [r7, #8]
   24144:	f002 f884 	bl	26250 <net_pkt_write>
   24148:	61f8      	str	r0, [r7, #28]
	if (ret) {
   2414a:	69fb      	ldr	r3, [r7, #28]
   2414c:	2b00      	cmp	r3, #0
   2414e:	d001      	beq.n	24154 <context_setup_udp_packet+0x94>
		return ret;
   24150:	69fb      	ldr	r3, [r7, #28]
   24152:	e000      	b.n	24156 <context_setup_udp_packet+0x96>
	return 0;
   24154:	2300      	movs	r3, #0
}
   24156:	4618      	mov	r0, r3
   24158:	3720      	adds	r7, #32
   2415a:	46bd      	mov	sp, r7
   2415c:	bd80      	pop	{r7, pc}

0002415e <context_finalize_packet>:
{
   2415e:	b580      	push	{r7, lr}
   24160:	b082      	sub	sp, #8
   24162:	af00      	add	r7, sp, #0
   24164:	6078      	str	r0, [r7, #4]
   24166:	6039      	str	r1, [r7, #0]
	net_pkt_cursor_init(pkt);
   24168:	6838      	ldr	r0, [r7, #0]
   2416a:	f001 fea7 	bl	25ebc <net_pkt_cursor_init>
	    net_context_get_family(context) == AF_INET) {
   2416e:	6878      	ldr	r0, [r7, #4]
   24170:	f7ff fb24 	bl	237bc <net_context_get_family>
   24174:	4603      	mov	r3, r0
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
   24176:	2b01      	cmp	r3, #1
   24178:	d108      	bne.n	2418c <context_finalize_packet+0x2e>
		net_ipv4_finalize(pkt, net_context_get_ip_proto(context));
   2417a:	6878      	ldr	r0, [r7, #4]
   2417c:	f7ff fb8c 	bl	23898 <net_context_get_ip_proto>
   24180:	4603      	mov	r3, r0
   24182:	b2db      	uxtb	r3, r3
   24184:	4619      	mov	r1, r3
   24186:	6838      	ldr	r0, [r7, #0]
   24188:	f003 facc 	bl	27724 <net_ipv4_finalize>
}
   2418c:	bf00      	nop
   2418e:	3708      	adds	r7, #8
   24190:	46bd      	mov	sp, r7
   24192:	bd80      	pop	{r7, pc}

00024194 <context_alloc_pkt>:
{
   24194:	b5b0      	push	{r4, r5, r7, lr}
   24196:	b088      	sub	sp, #32
   24198:	af02      	add	r7, sp, #8
   2419a:	60f8      	str	r0, [r7, #12]
   2419c:	60b9      	str	r1, [r7, #8]
   2419e:	607a      	str	r2, [r7, #4]
	pkt = net_pkt_alloc_with_buffer(net_context_get_iface(context), len,
   241a0:	68f8      	ldr	r0, [r7, #12]
   241a2:	f7ff fb94 	bl	238ce <net_context_get_iface>
   241a6:	4604      	mov	r4, r0
   241a8:	68f8      	ldr	r0, [r7, #12]
   241aa:	f7ff fb07 	bl	237bc <net_context_get_family>
   241ae:	4603      	mov	r3, r0
   241b0:	461d      	mov	r5, r3
					net_context_get_ip_proto(context),
   241b2:	68f8      	ldr	r0, [r7, #12]
   241b4:	f7ff fb70 	bl	23898 <net_context_get_ip_proto>
   241b8:	4603      	mov	r3, r0
	pkt = net_pkt_alloc_with_buffer(net_context_get_iface(context), len,
   241ba:	b2da      	uxtb	r2, r3
   241bc:	687b      	ldr	r3, [r7, #4]
   241be:	9300      	str	r3, [sp, #0]
   241c0:	4613      	mov	r3, r2
   241c2:	462a      	mov	r2, r5
   241c4:	68b9      	ldr	r1, [r7, #8]
   241c6:	4620      	mov	r0, r4
   241c8:	f7ef fdca 	bl	13d60 <net_pkt_alloc_with_buffer>
   241cc:	6178      	str	r0, [r7, #20]
	if (pkt) {
   241ce:	697b      	ldr	r3, [r7, #20]
   241d0:	2b00      	cmp	r3, #0
   241d2:	d003      	beq.n	241dc <context_alloc_pkt+0x48>
		net_pkt_set_context(pkt, context);
   241d4:	68f9      	ldr	r1, [r7, #12]
   241d6:	6978      	ldr	r0, [r7, #20]
   241d8:	f7ff fba5 	bl	23926 <net_pkt_set_context>
	return pkt;
   241dc:	697b      	ldr	r3, [r7, #20]
}
   241de:	4618      	mov	r0, r3
   241e0:	3718      	adds	r7, #24
   241e2:	46bd      	mov	sp, r7
   241e4:	bdb0      	pop	{r4, r5, r7, pc}

000241e6 <context_sendto>:
{
   241e6:	b580      	push	{r7, lr}
   241e8:	b096      	sub	sp, #88	; 0x58
   241ea:	af02      	add	r7, sp, #8
   241ec:	60f8      	str	r0, [r7, #12]
   241ee:	60b9      	str	r1, [r7, #8]
   241f0:	607a      	str	r2, [r7, #4]
   241f2:	603b      	str	r3, [r7, #0]
	if (!net_context_is_used(context)) {
   241f4:	68f8      	ldr	r0, [r7, #12]
   241f6:	f7ff fa98 	bl	2372a <net_context_is_used>
   241fa:	4603      	mov	r3, r0
   241fc:	f083 0301 	eor.w	r3, r3, #1
   24200:	b2db      	uxtb	r3, r3
   24202:	2b00      	cmp	r3, #0
   24204:	d002      	beq.n	2420c <context_sendto+0x26>
		return -EBADF;
   24206:	f06f 0308 	mvn.w	r3, #8
   2420a:	e076      	b.n	242fa <context_sendto+0x114>
	if (!dst_addr &&
   2420c:	683b      	ldr	r3, [r7, #0]
   2420e:	2b00      	cmp	r3, #0
   24210:	d102      	bne.n	24218 <context_sendto+0x32>
		return -EDESTADDRREQ;
   24212:	f06f 0378 	mvn.w	r3, #120	; 0x78
   24216:	e070      	b.n	242fa <context_sendto+0x114>
	    net_context_get_family(context) == AF_INET) {
   24218:	68f8      	ldr	r0, [r7, #12]
   2421a:	f7ff facf 	bl	237bc <net_context_get_family>
   2421e:	4603      	mov	r3, r0
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
   24220:	2b01      	cmp	r3, #1
   24222:	d10e      	bne.n	24242 <context_sendto+0x5c>
		struct sockaddr_in *addr4 = (struct sockaddr_in *)dst_addr;
   24224:	683b      	ldr	r3, [r7, #0]
   24226:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (addrlen < sizeof(struct sockaddr_in)) {
   24228:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2422a:	2b07      	cmp	r3, #7
   2422c:	d802      	bhi.n	24234 <context_sendto+0x4e>
			return -EINVAL;
   2422e:	f06f 0315 	mvn.w	r3, #21
   24232:	e062      	b.n	242fa <context_sendto+0x114>
		if (!addr4->sin_addr.s_addr) {
   24234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   24236:	685b      	ldr	r3, [r3, #4]
   24238:	2b00      	cmp	r3, #0
   2423a:	d10a      	bne.n	24252 <context_sendto+0x6c>
			return -EDESTADDRREQ;
   2423c:	f06f 0378 	mvn.w	r3, #120	; 0x78
   24240:	e05b      	b.n	242fa <context_sendto+0x114>
		NET_DBG("Invalid protocol family %d",
   24242:	f7ff f980 	bl	23546 <_is_user_context>
   24246:	4603      	mov	r3, r0
   24248:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
		return -EINVAL;
   2424c:	f06f 0315 	mvn.w	r3, #21
   24250:	e053      	b.n	242fa <context_sendto+0x114>
	pkt = context_alloc_pkt(context, len, PKT_WAIT_TIME);
   24252:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   24256:	6879      	ldr	r1, [r7, #4]
   24258:	68f8      	ldr	r0, [r7, #12]
   2425a:	f7ff ff9b 	bl	24194 <context_alloc_pkt>
   2425e:	6438      	str	r0, [r7, #64]	; 0x40
	if (!pkt) {
   24260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   24262:	2b00      	cmp	r3, #0
   24264:	d102      	bne.n	2426c <context_sendto+0x86>
		return -ENOMEM;
   24266:	f06f 030b 	mvn.w	r3, #11
   2426a:	e046      	b.n	242fa <context_sendto+0x114>
				pkt, net_context_get_ip_proto(context));
   2426c:	68f8      	ldr	r0, [r7, #12]
   2426e:	f7ff fb13 	bl	23898 <net_context_get_ip_proto>
   24272:	4603      	mov	r3, r0
	tmp_len = net_pkt_available_payload_buffer(
   24274:	b2db      	uxtb	r3, r3
   24276:	4619      	mov	r1, r3
   24278:	6c38      	ldr	r0, [r7, #64]	; 0x40
   2427a:	f001 fd06 	bl	25c8a <net_pkt_available_payload_buffer>
   2427e:	6478      	str	r0, [r7, #68]	; 0x44
	if (tmp_len < len) {
   24280:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   24282:	687b      	ldr	r3, [r7, #4]
   24284:	429a      	cmp	r2, r3
   24286:	d201      	bcs.n	2428c <context_sendto+0xa6>
		len = tmp_len;
   24288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2428a:	607b      	str	r3, [r7, #4]
	context->send_cb = cb;
   2428c:	68fb      	ldr	r3, [r7, #12]
   2428e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   24290:	635a      	str	r2, [r3, #52]	; 0x34
	context->user_data = user_data;
   24292:	68fb      	ldr	r3, [r7, #12]
   24294:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   24296:	601a      	str	r2, [r3, #0]
	    net_context_get_ip_proto(context) == IPPROTO_UDP) {
   24298:	68f8      	ldr	r0, [r7, #12]
   2429a:	f7ff fafd 	bl	23898 <net_context_get_ip_proto>
   2429e:	4603      	mov	r3, r0
	} else if (IS_ENABLED(CONFIG_NET_UDP) &&
   242a0:	2b11      	cmp	r3, #17
   242a2:	d116      	bne.n	242d2 <context_sendto+0xec>
		ret = context_setup_udp_packet(context, pkt, buf, len,
   242a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   242a6:	9301      	str	r3, [sp, #4]
   242a8:	683b      	ldr	r3, [r7, #0]
   242aa:	9300      	str	r3, [sp, #0]
   242ac:	687b      	ldr	r3, [r7, #4]
   242ae:	68ba      	ldr	r2, [r7, #8]
   242b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
   242b2:	68f8      	ldr	r0, [r7, #12]
   242b4:	f7ff ff04 	bl	240c0 <context_setup_udp_packet>
   242b8:	64f8      	str	r0, [r7, #76]	; 0x4c
		if (ret < 0) {
   242ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   242bc:	2b00      	cmp	r3, #0
   242be:	db15      	blt.n	242ec <context_sendto+0x106>
		context_finalize_packet(context, pkt);
   242c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
   242c2:	68f8      	ldr	r0, [r7, #12]
   242c4:	f7ff ff4b 	bl	2415e <context_finalize_packet>
		ret = net_send_data(pkt);
   242c8:	6c38      	ldr	r0, [r7, #64]	; 0x40
   242ca:	f000 fbe6 	bl	24a9a <net_send_data>
   242ce:	64f8      	str	r0, [r7, #76]	; 0x4c
   242d0:	e007      	b.n	242e2 <context_sendto+0xfc>
		NET_DBG("Unknown protocol while sending packet: %d",
   242d2:	f7ff f938 	bl	23546 <_is_user_context>
   242d6:	4603      	mov	r3, r0
   242d8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		ret = -EPROTONOSUPPORT;
   242dc:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   242e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (ret < 0) {
   242e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   242e4:	2b00      	cmp	r3, #0
   242e6:	db03      	blt.n	242f0 <context_sendto+0x10a>
	return len;
   242e8:	687b      	ldr	r3, [r7, #4]
   242ea:	e006      	b.n	242fa <context_sendto+0x114>
			goto fail;
   242ec:	bf00      	nop
   242ee:	e000      	b.n	242f2 <context_sendto+0x10c>
		goto fail;
   242f0:	bf00      	nop
	net_pkt_unref(pkt);
   242f2:	6c38      	ldr	r0, [r7, #64]	; 0x40
   242f4:	f001 fb89 	bl	25a0a <net_pkt_unref>
	return ret;
   242f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
   242fa:	4618      	mov	r0, r3
   242fc:	3750      	adds	r7, #80	; 0x50
   242fe:	46bd      	mov	sp, r7
   24300:	bd80      	pop	{r7, pc}

00024302 <net_context_send>:
{
   24302:	b580      	push	{r7, lr}
   24304:	b08c      	sub	sp, #48	; 0x30
   24306:	af06      	add	r7, sp, #24
   24308:	60f8      	str	r0, [r7, #12]
   2430a:	60b9      	str	r1, [r7, #8]
   2430c:	607a      	str	r2, [r7, #4]
   2430e:	603b      	str	r3, [r7, #0]
	int ret = 0;
   24310:	2300      	movs	r3, #0
   24312:	613b      	str	r3, [r7, #16]
	k_mutex_lock(&context->lock, K_FOREVER);
   24314:	68fb      	ldr	r3, [r7, #12]
   24316:	3308      	adds	r3, #8
   24318:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2431c:	4618      	mov	r0, r3
   2431e:	f7ff f930 	bl	23582 <k_mutex_lock>
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   24322:	68fb      	ldr	r3, [r7, #12]
   24324:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
   24328:	f403 7380 	and.w	r3, r3, #256	; 0x100
   2432c:	2b00      	cmp	r3, #0
   2432e:	d008      	beq.n	24342 <net_context_send+0x40>
	    !net_sin(&context->remote)->sin_port) {
   24330:	68fb      	ldr	r3, [r7, #12]
   24332:	3324      	adds	r3, #36	; 0x24
   24334:	4618      	mov	r0, r3
   24336:	f7ff f9da 	bl	236ee <net_sin>
   2433a:	4603      	mov	r3, r0
   2433c:	885b      	ldrh	r3, [r3, #2]
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   2433e:	2b00      	cmp	r3, #0
   24340:	d103      	bne.n	2434a <net_context_send+0x48>
		ret = -EDESTADDRREQ;
   24342:	f06f 0378 	mvn.w	r3, #120	; 0x78
   24346:	613b      	str	r3, [r7, #16]
		goto unlock;
   24348:	e01e      	b.n	24388 <net_context_send+0x86>
	    net_context_get_family(context) == AF_INET) {
   2434a:	68f8      	ldr	r0, [r7, #12]
   2434c:	f7ff fa36 	bl	237bc <net_context_get_family>
   24350:	4603      	mov	r3, r0
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
   24352:	2b01      	cmp	r3, #1
   24354:	d102      	bne.n	2435c <net_context_send+0x5a>
		addrlen = sizeof(struct sockaddr_in);
   24356:	2308      	movs	r3, #8
   24358:	617b      	str	r3, [r7, #20]
   2435a:	e001      	b.n	24360 <net_context_send+0x5e>
		addrlen = 0;
   2435c:	2300      	movs	r3, #0
   2435e:	617b      	str	r3, [r7, #20]
	ret = context_sendto(context, buf, len, &context->remote,
   24360:	68fb      	ldr	r3, [r7, #12]
   24362:	f103 0224 	add.w	r2, r3, #36	; 0x24
   24366:	2300      	movs	r3, #0
   24368:	9304      	str	r3, [sp, #16]
   2436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2436c:	9303      	str	r3, [sp, #12]
   2436e:	6a3b      	ldr	r3, [r7, #32]
   24370:	9302      	str	r3, [sp, #8]
   24372:	683b      	ldr	r3, [r7, #0]
   24374:	9301      	str	r3, [sp, #4]
   24376:	697b      	ldr	r3, [r7, #20]
   24378:	9300      	str	r3, [sp, #0]
   2437a:	4613      	mov	r3, r2
   2437c:	687a      	ldr	r2, [r7, #4]
   2437e:	68b9      	ldr	r1, [r7, #8]
   24380:	68f8      	ldr	r0, [r7, #12]
   24382:	f7ff ff30 	bl	241e6 <context_sendto>
   24386:	6138      	str	r0, [r7, #16]
	k_mutex_unlock(&context->lock);
   24388:	68fb      	ldr	r3, [r7, #12]
   2438a:	3308      	adds	r3, #8
   2438c:	4618      	mov	r0, r3
   2438e:	f7ff f906 	bl	2359e <k_mutex_unlock>
	return ret;
   24392:	693b      	ldr	r3, [r7, #16]
}
   24394:	4618      	mov	r0, r3
   24396:	3718      	adds	r7, #24
   24398:	46bd      	mov	sp, r7
   2439a:	bd80      	pop	{r7, pc}

0002439c <net_context_sendto>:
{
   2439c:	b580      	push	{r7, lr}
   2439e:	b08c      	sub	sp, #48	; 0x30
   243a0:	af06      	add	r7, sp, #24
   243a2:	60f8      	str	r0, [r7, #12]
   243a4:	60b9      	str	r1, [r7, #8]
   243a6:	607a      	str	r2, [r7, #4]
   243a8:	603b      	str	r3, [r7, #0]
	k_mutex_lock(&context->lock, K_FOREVER);
   243aa:	68fb      	ldr	r3, [r7, #12]
   243ac:	3308      	adds	r3, #8
   243ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   243b2:	4618      	mov	r0, r3
   243b4:	f7ff f8e5 	bl	23582 <k_mutex_lock>
	ret = context_sendto(context, buf, len, dst_addr, addrlen,
   243b8:	2301      	movs	r3, #1
   243ba:	9304      	str	r3, [sp, #16]
   243bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   243be:	9303      	str	r3, [sp, #12]
   243c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   243c2:	9302      	str	r3, [sp, #8]
   243c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   243c6:	9301      	str	r3, [sp, #4]
   243c8:	6a3b      	ldr	r3, [r7, #32]
   243ca:	9300      	str	r3, [sp, #0]
   243cc:	683b      	ldr	r3, [r7, #0]
   243ce:	687a      	ldr	r2, [r7, #4]
   243d0:	68b9      	ldr	r1, [r7, #8]
   243d2:	68f8      	ldr	r0, [r7, #12]
   243d4:	f7ff ff07 	bl	241e6 <context_sendto>
   243d8:	6178      	str	r0, [r7, #20]
	k_mutex_unlock(&context->lock);
   243da:	68fb      	ldr	r3, [r7, #12]
   243dc:	3308      	adds	r3, #8
   243de:	4618      	mov	r0, r3
   243e0:	f7ff f8dd 	bl	2359e <k_mutex_unlock>
	return ret;
   243e4:	697b      	ldr	r3, [r7, #20]
}
   243e6:	4618      	mov	r0, r3
   243e8:	3718      	adds	r7, #24
   243ea:	46bd      	mov	sp, r7
   243ec:	bd80      	pop	{r7, pc}

000243ee <net_context_packet_received>:
{
   243ee:	b590      	push	{r4, r7, lr}
   243f0:	b089      	sub	sp, #36	; 0x24
   243f2:	af02      	add	r7, sp, #8
   243f4:	60f8      	str	r0, [r7, #12]
   243f6:	60b9      	str	r1, [r7, #8]
   243f8:	607a      	str	r2, [r7, #4]
   243fa:	603b      	str	r3, [r7, #0]
	struct net_context *context = find_context(conn);
   243fc:	68f8      	ldr	r0, [r7, #12]
   243fe:	f7ee fe4d 	bl	1309c <find_context>
   24402:	6138      	str	r0, [r7, #16]
	enum net_verdict verdict = NET_DROP;
   24404:	2302      	movs	r3, #2
   24406:	75fb      	strb	r3, [r7, #23]
	k_mutex_lock(&context->lock, K_FOREVER);
   24408:	693b      	ldr	r3, [r7, #16]
   2440a:	3308      	adds	r3, #8
   2440c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   24410:	4618      	mov	r0, r3
   24412:	f7ff f8b6 	bl	23582 <k_mutex_lock>
	net_context_set_iface(context, net_pkt_iface(pkt));
   24416:	68b8      	ldr	r0, [r7, #8]
   24418:	f7ff fa92 	bl	23940 <net_pkt_iface>
   2441c:	4603      	mov	r3, r0
   2441e:	4619      	mov	r1, r3
   24420:	6938      	ldr	r0, [r7, #16]
   24422:	f7ff fa63 	bl	238ec <net_context_set_iface>
	net_pkt_set_context(pkt, context);
   24426:	6939      	ldr	r1, [r7, #16]
   24428:	68b8      	ldr	r0, [r7, #8]
   2442a:	f7ff fa7c 	bl	23926 <net_pkt_set_context>
	if (!context->recv_cb) {
   2442e:	693b      	ldr	r3, [r7, #16]
   24430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   24432:	2b00      	cmp	r3, #0
   24434:	d015      	beq.n	24462 <net_context_packet_received+0x74>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   24436:	6938      	ldr	r0, [r7, #16]
   24438:	f7ff fa2e 	bl	23898 <net_context_get_ip_proto>
	context->recv_cb(context, pkt, ip_hdr, proto_hdr, 0, user_data);
   2443c:	693b      	ldr	r3, [r7, #16]
   2443e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   24440:	6abb      	ldr	r3, [r7, #40]	; 0x28
   24442:	9301      	str	r3, [sp, #4]
   24444:	2300      	movs	r3, #0
   24446:	9300      	str	r3, [sp, #0]
   24448:	683b      	ldr	r3, [r7, #0]
   2444a:	687a      	ldr	r2, [r7, #4]
   2444c:	68b9      	ldr	r1, [r7, #8]
   2444e:	6938      	ldr	r0, [r7, #16]
   24450:	47a0      	blx	r4
	k_sem_give(&context->recv_data_wait);
   24452:	693b      	ldr	r3, [r7, #16]
   24454:	333c      	adds	r3, #60	; 0x3c
   24456:	4618      	mov	r0, r3
   24458:	f7ff f8c9 	bl	235ee <k_sem_give>
	verdict = NET_OK;
   2445c:	2300      	movs	r3, #0
   2445e:	75fb      	strb	r3, [r7, #23]
   24460:	e000      	b.n	24464 <net_context_packet_received+0x76>
		goto unlock;
   24462:	bf00      	nop
	k_mutex_unlock(&context->lock);
   24464:	693b      	ldr	r3, [r7, #16]
   24466:	3308      	adds	r3, #8
   24468:	4618      	mov	r0, r3
   2446a:	f7ff f898 	bl	2359e <k_mutex_unlock>
	return verdict;
   2446e:	7dfb      	ldrb	r3, [r7, #23]
}
   24470:	4618      	mov	r0, r3
   24472:	371c      	adds	r7, #28
   24474:	46bd      	mov	sp, r7
   24476:	bd90      	pop	{r4, r7, pc}

00024478 <net_context_recv>:
{
   24478:	b580      	push	{r7, lr}
   2447a:	b086      	sub	sp, #24
   2447c:	af00      	add	r7, sp, #0
   2447e:	60f8      	str	r0, [r7, #12]
   24480:	60b9      	str	r1, [r7, #8]
   24482:	607a      	str	r2, [r7, #4]
   24484:	603b      	str	r3, [r7, #0]
	if (!net_context_is_used(context)) {
   24486:	68f8      	ldr	r0, [r7, #12]
   24488:	f7ff f94f 	bl	2372a <net_context_is_used>
   2448c:	4603      	mov	r3, r0
   2448e:	f083 0301 	eor.w	r3, r3, #1
   24492:	b2db      	uxtb	r3, r3
   24494:	2b00      	cmp	r3, #0
   24496:	d002      	beq.n	2449e <net_context_recv+0x26>
		return -EBADF;
   24498:	f06f 0308 	mvn.w	r3, #8
   2449c:	e050      	b.n	24540 <net_context_recv+0xc8>
	k_mutex_lock(&context->lock, K_FOREVER);
   2449e:	68fb      	ldr	r3, [r7, #12]
   244a0:	3308      	adds	r3, #8
   244a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   244a6:	4618      	mov	r0, r3
   244a8:	f7ff f86b 	bl	23582 <k_mutex_lock>
	switch (net_context_get_ip_proto(context)) {
   244ac:	68f8      	ldr	r0, [r7, #12]
   244ae:	f7ff f9f3 	bl	23898 <net_context_get_ip_proto>
   244b2:	4603      	mov	r3, r0
   244b4:	2b06      	cmp	r3, #6
   244b6:	d009      	beq.n	244cc <net_context_recv+0x54>
   244b8:	2b11      	cmp	r3, #17
   244ba:	d10e      	bne.n	244da <net_context_recv+0x62>
		ret = recv_udp(context, cb, timeout, user_data);
   244bc:	683b      	ldr	r3, [r7, #0]
   244be:	687a      	ldr	r2, [r7, #4]
   244c0:	68b9      	ldr	r1, [r7, #8]
   244c2:	68f8      	ldr	r0, [r7, #12]
   244c4:	f7ee fe24 	bl	13110 <recv_udp>
   244c8:	6178      	str	r0, [r7, #20]
		break;
   244ca:	e00a      	b.n	244e2 <net_context_recv+0x6a>
		ret = net_tcp_recv(context, cb, user_data);
   244cc:	683a      	ldr	r2, [r7, #0]
   244ce:	68b9      	ldr	r1, [r7, #8]
   244d0:	68f8      	ldr	r0, [r7, #12]
   244d2:	f7ff fa4f 	bl	23974 <net_tcp_recv>
   244d6:	6178      	str	r0, [r7, #20]
		break;
   244d8:	e003      	b.n	244e2 <net_context_recv+0x6a>
		ret = -EPROTOTYPE;
   244da:	f06f 036a 	mvn.w	r3, #106	; 0x6a
   244de:	617b      	str	r3, [r7, #20]
		break;
   244e0:	bf00      	nop
	if (ret < 0) {
   244e2:	697b      	ldr	r3, [r7, #20]
   244e4:	2b00      	cmp	r3, #0
   244e6:	db22      	blt.n	2452e <net_context_recv+0xb6>
	if (timeout) {
   244e8:	687b      	ldr	r3, [r7, #4]
   244ea:	2b00      	cmp	r3, #0
   244ec:	d021      	beq.n	24532 <net_context_recv+0xba>
		k_sem_reset(&context->recv_data_wait);
   244ee:	68fb      	ldr	r3, [r7, #12]
   244f0:	333c      	adds	r3, #60	; 0x3c
   244f2:	4618      	mov	r0, r3
   244f4:	f7ff f886 	bl	23604 <k_sem_reset>
		k_mutex_unlock(&context->lock);
   244f8:	68fb      	ldr	r3, [r7, #12]
   244fa:	3308      	adds	r3, #8
   244fc:	4618      	mov	r0, r3
   244fe:	f7ff f84e 	bl	2359e <k_mutex_unlock>
		ret = k_sem_take(&context->recv_data_wait, timeout);
   24502:	68fb      	ldr	r3, [r7, #12]
   24504:	333c      	adds	r3, #60	; 0x3c
   24506:	6879      	ldr	r1, [r7, #4]
   24508:	4618      	mov	r0, r3
   2450a:	f7ff f862 	bl	235d2 <k_sem_take>
   2450e:	6138      	str	r0, [r7, #16]
		k_mutex_lock(&context->lock, K_FOREVER);
   24510:	68fb      	ldr	r3, [r7, #12]
   24512:	3308      	adds	r3, #8
   24514:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   24518:	4618      	mov	r0, r3
   2451a:	f7ff f832 	bl	23582 <k_mutex_lock>
		if (ret == -EAGAIN) {
   2451e:	693b      	ldr	r3, [r7, #16]
   24520:	f113 0f0b 	cmn.w	r3, #11
   24524:	d105      	bne.n	24532 <net_context_recv+0xba>
			ret = -ETIMEDOUT;
   24526:	f06f 0373 	mvn.w	r3, #115	; 0x73
   2452a:	613b      	str	r3, [r7, #16]
			goto unlock;
   2452c:	e002      	b.n	24534 <net_context_recv+0xbc>
		goto unlock;
   2452e:	bf00      	nop
   24530:	e000      	b.n	24534 <net_context_recv+0xbc>
unlock:
   24532:	bf00      	nop
	k_mutex_unlock(&context->lock);
   24534:	68fb      	ldr	r3, [r7, #12]
   24536:	3308      	adds	r3, #8
   24538:	4618      	mov	r0, r3
   2453a:	f7ff f830 	bl	2359e <k_mutex_unlock>
	return ret;
   2453e:	697b      	ldr	r3, [r7, #20]
}
   24540:	4618      	mov	r0, r3
   24542:	3718      	adds	r7, #24
   24544:	46bd      	mov	sp, r7
   24546:	bd80      	pop	{r7, pc}

00024548 <net_context_update_recv_wnd>:
{
   24548:	b580      	push	{r7, lr}
   2454a:	b084      	sub	sp, #16
   2454c:	af00      	add	r7, sp, #0
   2454e:	6078      	str	r0, [r7, #4]
   24550:	6039      	str	r1, [r7, #0]
	k_mutex_lock(&context->lock, K_FOREVER);
   24552:	687b      	ldr	r3, [r7, #4]
   24554:	3308      	adds	r3, #8
   24556:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2455a:	4618      	mov	r0, r3
   2455c:	f7ff f811 	bl	23582 <k_mutex_lock>
	ret = net_tcp_update_recv_wnd(context, delta);
   24560:	6839      	ldr	r1, [r7, #0]
   24562:	6878      	ldr	r0, [r7, #4]
   24564:	f7ff fa29 	bl	239ba <net_tcp_update_recv_wnd>
   24568:	60f8      	str	r0, [r7, #12]
	k_mutex_unlock(&context->lock);
   2456a:	687b      	ldr	r3, [r7, #4]
   2456c:	3308      	adds	r3, #8
   2456e:	4618      	mov	r0, r3
   24570:	f7ff f815 	bl	2359e <k_mutex_unlock>
	return ret;
   24574:	68fb      	ldr	r3, [r7, #12]
}
   24576:	4618      	mov	r0, r3
   24578:	3710      	adds	r7, #16
   2457a:	46bd      	mov	sp, r7
   2457c:	bd80      	pop	{r7, pc}

0002457e <atomic_get>:
{
   2457e:	b480      	push	{r7}
   24580:	b083      	sub	sp, #12
   24582:	af00      	add	r7, sp, #0
   24584:	6078      	str	r0, [r7, #4]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24586:	687b      	ldr	r3, [r7, #4]
   24588:	f3bf 8f5b 	dmb	ish
   2458c:	681b      	ldr	r3, [r3, #0]
   2458e:	f3bf 8f5b 	dmb	ish
}
   24592:	4618      	mov	r0, r3
   24594:	370c      	adds	r7, #12
   24596:	46bd      	mov	sp, r7
   24598:	bc80      	pop	{r7}
   2459a:	4770      	bx	lr

0002459c <atomic_test_bit>:
{
   2459c:	b580      	push	{r7, lr}
   2459e:	b084      	sub	sp, #16
   245a0:	af00      	add	r7, sp, #0
   245a2:	6078      	str	r0, [r7, #4]
   245a4:	6039      	str	r1, [r7, #0]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   245a6:	683b      	ldr	r3, [r7, #0]
   245a8:	095b      	lsrs	r3, r3, #5
   245aa:	009b      	lsls	r3, r3, #2
   245ac:	687a      	ldr	r2, [r7, #4]
   245ae:	4413      	add	r3, r2
   245b0:	4618      	mov	r0, r3
   245b2:	f7ff ffe4 	bl	2457e <atomic_get>
   245b6:	60f8      	str	r0, [r7, #12]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   245b8:	683b      	ldr	r3, [r7, #0]
   245ba:	f003 031f 	and.w	r3, r3, #31
   245be:	68fa      	ldr	r2, [r7, #12]
   245c0:	fa42 f303 	asr.w	r3, r2, r3
   245c4:	f003 0301 	and.w	r3, r3, #1
   245c8:	2b00      	cmp	r3, #0
   245ca:	bf14      	ite	ne
   245cc:	2301      	movne	r3, #1
   245ce:	2300      	moveq	r3, #0
   245d0:	b2db      	uxtb	r3, r3
}
   245d2:	4618      	mov	r0, r3
   245d4:	3710      	adds	r7, #16
   245d6:	46bd      	mov	sp, r7
   245d8:	bd80      	pop	{r7, pc}

000245da <_is_user_context>:
{
   245da:	b480      	push	{r7}
   245dc:	af00      	add	r7, sp, #0
	return false;
   245de:	2300      	movs	r3, #0
}
   245e0:	4618      	mov	r0, r3
   245e2:	46bd      	mov	sp, r7
   245e4:	bc80      	pop	{r7}
   245e6:	4770      	bx	lr

000245e8 <k_work_init>:
{
   245e8:	b480      	push	{r7}
   245ea:	b083      	sub	sp, #12
   245ec:	af00      	add	r7, sp, #0
   245ee:	6078      	str	r0, [r7, #4]
   245f0:	6039      	str	r1, [r7, #0]
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   245f2:	687b      	ldr	r3, [r7, #4]
   245f4:	2200      	movs	r2, #0
   245f6:	601a      	str	r2, [r3, #0]
   245f8:	687b      	ldr	r3, [r7, #4]
   245fa:	683a      	ldr	r2, [r7, #0]
   245fc:	605a      	str	r2, [r3, #4]
   245fe:	687b      	ldr	r3, [r7, #4]
   24600:	2200      	movs	r2, #0
   24602:	609a      	str	r2, [r3, #8]
}
   24604:	bf00      	nop
   24606:	370c      	adds	r7, #12
   24608:	46bd      	mov	sp, r7
   2460a:	bc80      	pop	{r7}
   2460c:	4770      	bx	lr

0002460e <net_hostname_init>:
 */
#if defined(CONFIG_NET_HOSTNAME_ENABLE)
void net_hostname_init(void);
#else
static inline void net_hostname_init(void)
{
   2460e:	b480      	push	{r7}
   24610:	af00      	add	r7, sp, #0
}
   24612:	bf00      	nop
   24614:	46bd      	mov	sp, r7
   24616:	bc80      	pop	{r7}
   24618:	4770      	bx	lr

0002461a <net_ipv4_is_addr_loopback>:
{
   2461a:	b480      	push	{r7}
   2461c:	b083      	sub	sp, #12
   2461e:	af00      	add	r7, sp, #0
   24620:	6078      	str	r0, [r7, #4]
	return addr->s4_addr[0] == 127U;
   24622:	687b      	ldr	r3, [r7, #4]
   24624:	781b      	ldrb	r3, [r3, #0]
   24626:	2b7f      	cmp	r3, #127	; 0x7f
   24628:	bf0c      	ite	eq
   2462a:	2301      	moveq	r3, #1
   2462c:	2300      	movne	r3, #0
   2462e:	b2db      	uxtb	r3, r3
}
   24630:	4618      	mov	r0, r3
   24632:	370c      	adds	r7, #12
   24634:	46bd      	mov	sp, r7
   24636:	bc80      	pop	{r7}
   24638:	4770      	bx	lr

0002463a <net_ipv4_addr_cmp>:
{
   2463a:	b480      	push	{r7}
   2463c:	b085      	sub	sp, #20
   2463e:	af00      	add	r7, sp, #0
   24640:	6078      	str	r0, [r7, #4]
   24642:	6039      	str	r1, [r7, #0]
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   24644:	687b      	ldr	r3, [r7, #4]
   24646:	60fb      	str	r3, [r7, #12]
   24648:	68fb      	ldr	r3, [r7, #12]
   2464a:	681a      	ldr	r2, [r3, #0]
   2464c:	683b      	ldr	r3, [r7, #0]
   2464e:	60bb      	str	r3, [r7, #8]
   24650:	68bb      	ldr	r3, [r7, #8]
   24652:	681b      	ldr	r3, [r3, #0]
   24654:	429a      	cmp	r2, r3
   24656:	bf0c      	ite	eq
   24658:	2301      	moveq	r3, #1
   2465a:	2300      	movne	r3, #0
   2465c:	b2db      	uxtb	r3, r3
}
   2465e:	4618      	mov	r0, r3
   24660:	3714      	adds	r7, #20
   24662:	46bd      	mov	sp, r7
   24664:	bc80      	pop	{r7}
   24666:	4770      	bx	lr

00024668 <net_ipv4_is_addr_bcast>:
{
   24668:	b580      	push	{r7, lr}
   2466a:	b082      	sub	sp, #8
   2466c:	af00      	add	r7, sp, #0
   2466e:	6078      	str	r0, [r7, #4]
   24670:	6039      	str	r1, [r7, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   24672:	f7ef fd63 	bl	1413c <net_ipv4_broadcast_address>
   24676:	4603      	mov	r3, r0
   24678:	4619      	mov	r1, r3
   2467a:	6838      	ldr	r0, [r7, #0]
   2467c:	f7ff ffdd 	bl	2463a <net_ipv4_addr_cmp>
   24680:	4603      	mov	r3, r0
   24682:	2b00      	cmp	r3, #0
   24684:	d001      	beq.n	2468a <net_ipv4_is_addr_bcast+0x22>
		return true;
   24686:	2301      	movs	r3, #1
   24688:	e004      	b.n	24694 <net_ipv4_is_addr_bcast+0x2c>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   2468a:	6839      	ldr	r1, [r7, #0]
   2468c:	6878      	ldr	r0, [r7, #4]
   2468e:	f7ee fedf 	bl	13450 <net_if_ipv4_is_addr_bcast>
   24692:	4603      	mov	r3, r0
}
   24694:	4618      	mov	r0, r3
   24696:	3708      	adds	r7, #8
   24698:	46bd      	mov	sp, r7
   2469a:	bd80      	pop	{r7, pc}

0002469c <net_ipv4_is_my_addr>:
{
   2469c:	b580      	push	{r7, lr}
   2469e:	b084      	sub	sp, #16
   246a0:	af00      	add	r7, sp, #0
   246a2:	6078      	str	r0, [r7, #4]
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
   246a4:	2100      	movs	r1, #0
   246a6:	6878      	ldr	r0, [r7, #4]
   246a8:	f7ee ff9e 	bl	135e8 <net_if_ipv4_addr_lookup>
   246ac:	4603      	mov	r3, r0
   246ae:	2b00      	cmp	r3, #0
   246b0:	bf14      	ite	ne
   246b2:	2301      	movne	r3, #1
   246b4:	2300      	moveq	r3, #0
   246b6:	73fb      	strb	r3, [r7, #15]
	if (!ret) {
   246b8:	7bfb      	ldrb	r3, [r7, #15]
   246ba:	f083 0301 	eor.w	r3, r3, #1
   246be:	b2db      	uxtb	r3, r3
   246c0:	2b00      	cmp	r3, #0
   246c2:	d005      	beq.n	246d0 <net_ipv4_is_my_addr+0x34>
		ret = net_ipv4_is_addr_bcast(NULL, addr);
   246c4:	6879      	ldr	r1, [r7, #4]
   246c6:	2000      	movs	r0, #0
   246c8:	f7ff ffce 	bl	24668 <net_ipv4_is_addr_bcast>
   246cc:	4603      	mov	r3, r0
   246ce:	73fb      	strb	r3, [r7, #15]
	return ret;
   246d0:	7bfb      	ldrb	r3, [r7, #15]
}
   246d2:	4618      	mov	r0, r3
   246d4:	3710      	adds	r7, #16
   246d6:	46bd      	mov	sp, r7
   246d8:	bd80      	pop	{r7, pc}

000246da <net_buf_frags_len>:
{
   246da:	b480      	push	{r7}
   246dc:	b085      	sub	sp, #20
   246de:	af00      	add	r7, sp, #0
   246e0:	6078      	str	r0, [r7, #4]
	size_t bytes = 0;
   246e2:	2300      	movs	r3, #0
   246e4:	60fb      	str	r3, [r7, #12]
	while (buf) {
   246e6:	e008      	b.n	246fa <net_buf_frags_len+0x20>
		bytes += buf->len;
   246e8:	687b      	ldr	r3, [r7, #4]
   246ea:	899b      	ldrh	r3, [r3, #12]
   246ec:	461a      	mov	r2, r3
   246ee:	68fb      	ldr	r3, [r7, #12]
   246f0:	4413      	add	r3, r2
   246f2:	60fb      	str	r3, [r7, #12]
		buf = buf->frags;
   246f4:	687b      	ldr	r3, [r7, #4]
   246f6:	681b      	ldr	r3, [r3, #0]
   246f8:	607b      	str	r3, [r7, #4]
	while (buf) {
   246fa:	687b      	ldr	r3, [r7, #4]
   246fc:	2b00      	cmp	r3, #0
   246fe:	d1f3      	bne.n	246e8 <net_buf_frags_len+0xe>
	return bytes;
   24700:	68fb      	ldr	r3, [r7, #12]
}
   24702:	4618      	mov	r0, r3
   24704:	3714      	adds	r7, #20
   24706:	46bd      	mov	sp, r7
   24708:	bc80      	pop	{r7}
   2470a:	4770      	bx	lr

0002470c <net_if_get_link_addr>:
{
   2470c:	b480      	push	{r7}
   2470e:	b083      	sub	sp, #12
   24710:	af00      	add	r7, sp, #0
   24712:	6078      	str	r0, [r7, #4]
	return &iface->if_dev->link_addr;
   24714:	687b      	ldr	r3, [r7, #4]
   24716:	681b      	ldr	r3, [r3, #0]
   24718:	3310      	adds	r3, #16
}
   2471a:	4618      	mov	r0, r3
   2471c:	370c      	adds	r7, #12
   2471e:	46bd      	mov	sp, r7
   24720:	bc80      	pop	{r7}
   24722:	4770      	bx	lr

00024724 <net_pkt_work>:
{
   24724:	b480      	push	{r7}
   24726:	b083      	sub	sp, #12
   24728:	af00      	add	r7, sp, #0
   2472a:	6078      	str	r0, [r7, #4]
	return &pkt->work;
   2472c:	687b      	ldr	r3, [r7, #4]
   2472e:	3304      	adds	r3, #4
}
   24730:	4618      	mov	r0, r3
   24732:	370c      	adds	r7, #12
   24734:	46bd      	mov	sp, r7
   24736:	bc80      	pop	{r7}
   24738:	4770      	bx	lr

0002473a <net_pkt_iface>:
{
   2473a:	b480      	push	{r7}
   2473c:	b083      	sub	sp, #12
   2473e:	af00      	add	r7, sp, #0
   24740:	6078      	str	r0, [r7, #4]
	return pkt->iface;
   24742:	687b      	ldr	r3, [r7, #4]
   24744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   24746:	4618      	mov	r0, r3
   24748:	370c      	adds	r7, #12
   2474a:	46bd      	mov	sp, r7
   2474c:	bc80      	pop	{r7}
   2474e:	4770      	bx	lr

00024750 <net_pkt_set_iface>:
{
   24750:	b580      	push	{r7, lr}
   24752:	b082      	sub	sp, #8
   24754:	af00      	add	r7, sp, #0
   24756:	6078      	str	r0, [r7, #4]
   24758:	6039      	str	r1, [r7, #0]
	pkt->iface = iface;
   2475a:	687b      	ldr	r3, [r7, #4]
   2475c:	683a      	ldr	r2, [r7, #0]
   2475e:	625a      	str	r2, [r3, #36]	; 0x24
	if (iface) {
   24760:	683b      	ldr	r3, [r7, #0]
   24762:	2b00      	cmp	r3, #0
   24764:	d00f      	beq.n	24786 <net_pkt_set_iface+0x36>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   24766:	6838      	ldr	r0, [r7, #0]
   24768:	f7ff ffd0 	bl	2470c <net_if_get_link_addr>
   2476c:	4603      	mov	r3, r0
   2476e:	795a      	ldrb	r2, [r3, #5]
   24770:	687b      	ldr	r3, [r7, #4]
   24772:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   24776:	6838      	ldr	r0, [r7, #0]
   24778:	f7ff ffc8 	bl	2470c <net_if_get_link_addr>
   2477c:	4603      	mov	r3, r0
   2477e:	795a      	ldrb	r2, [r3, #5]
   24780:	687b      	ldr	r3, [r7, #4]
   24782:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
   24786:	bf00      	nop
   24788:	3708      	adds	r7, #8
   2478a:	46bd      	mov	sp, r7
   2478c:	bd80      	pop	{r7, pc}

0002478e <net_pkt_family>:
{
   2478e:	b480      	push	{r7}
   24790:	b083      	sub	sp, #12
   24792:	af00      	add	r7, sp, #0
   24794:	6078      	str	r0, [r7, #4]
	return pkt->family;
   24796:	687b      	ldr	r3, [r7, #4]
   24798:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
   2479c:	f3c3 0342 	ubfx	r3, r3, #1, #3
   247a0:	b2db      	uxtb	r3, r3
}
   247a2:	4618      	mov	r0, r3
   247a4:	370c      	adds	r7, #12
   247a6:	46bd      	mov	sp, r7
   247a8:	bc80      	pop	{r7}
   247aa:	4770      	bx	lr

000247ac <net_pkt_priority>:
{
   247ac:	b480      	push	{r7}
   247ae:	b083      	sub	sp, #12
   247b0:	af00      	add	r7, sp, #0
   247b2:	6078      	str	r0, [r7, #4]
	return 0;
   247b4:	2300      	movs	r3, #0
}
   247b6:	4618      	mov	r0, r3
   247b8:	370c      	adds	r7, #12
   247ba:	46bd      	mov	sp, r7
   247bc:	bc80      	pop	{r7}
   247be:	4770      	bx	lr

000247c0 <net_pkt_get_len>:
{
   247c0:	b580      	push	{r7, lr}
   247c2:	b082      	sub	sp, #8
   247c4:	af00      	add	r7, sp, #0
   247c6:	6078      	str	r0, [r7, #4]
	return net_buf_frags_len(pkt->frags);
   247c8:	687b      	ldr	r3, [r7, #4]
   247ca:	695b      	ldr	r3, [r3, #20]
   247cc:	4618      	mov	r0, r3
   247ce:	f7ff ff84 	bl	246da <net_buf_frags_len>
   247d2:	4603      	mov	r3, r0
}
   247d4:	4618      	mov	r0, r3
   247d6:	3708      	adds	r7, #8
   247d8:	46bd      	mov	sp, r7
   247da:	bd80      	pop	{r7, pc}

000247dc <net_pkt_ip_data>:
{
   247dc:	b480      	push	{r7}
   247de:	b083      	sub	sp, #12
   247e0:	af00      	add	r7, sp, #0
   247e2:	6078      	str	r0, [r7, #4]
	return pkt->frags->data;
   247e4:	687b      	ldr	r3, [r7, #4]
   247e6:	695b      	ldr	r3, [r3, #20]
   247e8:	689b      	ldr	r3, [r3, #8]
}
   247ea:	4618      	mov	r0, r3
   247ec:	370c      	adds	r7, #12
   247ee:	46bd      	mov	sp, r7
   247f0:	bc80      	pop	{r7}
   247f2:	4770      	bx	lr

000247f4 <net_pkt_set_overwrite>:
{
   247f4:	b480      	push	{r7}
   247f6:	b083      	sub	sp, #12
   247f8:	af00      	add	r7, sp, #0
   247fa:	6078      	str	r0, [r7, #4]
   247fc:	460b      	mov	r3, r1
   247fe:	70fb      	strb	r3, [r7, #3]
	pkt->overwrite = overwrite;
   24800:	687a      	ldr	r2, [r7, #4]
   24802:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
   24806:	78f9      	ldrb	r1, [r7, #3]
   24808:	f361 0300 	bfi	r3, r1, #0, #1
   2480c:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
}
   24810:	bf00      	nop
   24812:	370c      	adds	r7, #12
   24814:	46bd      	mov	sp, r7
   24816:	bc80      	pop	{r7}
   24818:	4770      	bx	lr

0002481a <net_shell_init>:

#if defined(CONFIG_NET_SHELL)
extern int net_shell_init(void);
#else
static inline int net_shell_init(void)
{
   2481a:	b480      	push	{r7}
   2481c:	af00      	add	r7, sp, #0
	return 0;
   2481e:	2300      	movs	r3, #0
}
   24820:	4618      	mov	r0, r3
   24822:	46bd      	mov	sp, r7
   24824:	bc80      	pop	{r7}
   24826:	4770      	bx	lr

00024828 <net_packet_socket_input>:
 */
#if defined(CONFIG_NET_SOCKETS_PACKET)
enum net_verdict net_packet_socket_input(struct net_pkt *pkt);
#else
static inline enum net_verdict net_packet_socket_input(struct net_pkt *pkt)
{
   24828:	b480      	push	{r7}
   2482a:	b083      	sub	sp, #12
   2482c:	af00      	add	r7, sp, #0
   2482e:	6078      	str	r0, [r7, #4]
	return NET_CONTINUE;
   24830:	2301      	movs	r3, #1
}
   24832:	4618      	mov	r0, r3
   24834:	370c      	adds	r7, #12
   24836:	46bd      	mov	sp, r7
   24838:	bc80      	pop	{r7}
   2483a:	4770      	bx	lr

0002483c <net_canbus_socket_input>:
 */
#if defined(CONFIG_NET_SOCKETS_CAN)
enum net_verdict net_canbus_socket_input(struct net_pkt *pkt);
#else
static inline enum net_verdict net_canbus_socket_input(struct net_pkt *pkt)
{
   2483c:	b480      	push	{r7}
   2483e:	b083      	sub	sp, #12
   24840:	af00      	add	r7, sp, #0
   24842:	6078      	str	r0, [r7, #4]
	return NET_CONTINUE;
   24844:	2301      	movs	r3, #1
}
   24846:	4618      	mov	r0, r3
   24848:	370c      	adds	r7, #12
   2484a:	46bd      	mov	sp, r7
   2484c:	bc80      	pop	{r7}
   2484e:	4770      	bx	lr

00024850 <process_data>:
{
   24850:	b580      	push	{r7, lr}
   24852:	b088      	sub	sp, #32
   24854:	af00      	add	r7, sp, #0
   24856:	6078      	str	r0, [r7, #4]
   24858:	460b      	mov	r3, r1
   2485a:	70fb      	strb	r3, [r7, #3]
	bool locally_routed = false;
   2485c:	2300      	movs	r3, #0
   2485e:	763b      	strb	r3, [r7, #24]
	ret = net_packet_socket_input(pkt);
   24860:	6878      	ldr	r0, [r7, #4]
   24862:	f7ff ffe1 	bl	24828 <net_packet_socket_input>
   24866:	4603      	mov	r3, r0
   24868:	61fb      	str	r3, [r7, #28]
	if (ret != NET_CONTINUE) {
   2486a:	69fb      	ldr	r3, [r7, #28]
   2486c:	2b01      	cmp	r3, #1
   2486e:	d002      	beq.n	24876 <process_data+0x26>
		return ret;
   24870:	69fb      	ldr	r3, [r7, #28]
   24872:	b2db      	uxtb	r3, r3
   24874:	e04d      	b.n	24912 <process_data+0xc2>
	if (!pkt->frags) {
   24876:	687b      	ldr	r3, [r7, #4]
   24878:	695b      	ldr	r3, [r3, #20]
   2487a:	2b00      	cmp	r3, #0
   2487c:	d105      	bne.n	2488a <process_data+0x3a>
		NET_DBG("Corrupted packet (frags %p)", pkt->frags);
   2487e:	f7ff feac 	bl	245da <_is_user_context>
   24882:	4603      	mov	r3, r0
   24884:	76fb      	strb	r3, [r7, #27]
		return NET_DROP;
   24886:	2302      	movs	r3, #2
   24888:	e043      	b.n	24912 <process_data+0xc2>
	if (!is_loopback && !locally_routed) {
   2488a:	78fb      	ldrb	r3, [r7, #3]
   2488c:	f083 0301 	eor.w	r3, r3, #1
   24890:	b2db      	uxtb	r3, r3
   24892:	2b00      	cmp	r3, #0
   24894:	d01c      	beq.n	248d0 <process_data+0x80>
   24896:	7e3b      	ldrb	r3, [r7, #24]
   24898:	f083 0301 	eor.w	r3, r3, #1
   2489c:	b2db      	uxtb	r3, r3
   2489e:	2b00      	cmp	r3, #0
   248a0:	d016      	beq.n	248d0 <process_data+0x80>
		ret = net_if_recv_data(net_pkt_iface(pkt), pkt);
   248a2:	6878      	ldr	r0, [r7, #4]
   248a4:	f7ff ff49 	bl	2473a <net_pkt_iface>
   248a8:	4603      	mov	r3, r0
   248aa:	6879      	ldr	r1, [r7, #4]
   248ac:	4618      	mov	r0, r3
   248ae:	f000 ff37 	bl	25720 <net_if_recv_data>
   248b2:	4603      	mov	r3, r0
   248b4:	61fb      	str	r3, [r7, #28]
		if (ret != NET_CONTINUE) {
   248b6:	69fb      	ldr	r3, [r7, #28]
   248b8:	2b01      	cmp	r3, #1
   248ba:	d009      	beq.n	248d0 <process_data+0x80>
			if (ret == NET_DROP) {
   248bc:	69fb      	ldr	r3, [r7, #28]
   248be:	2b02      	cmp	r3, #2
   248c0:	d103      	bne.n	248ca <process_data+0x7a>
				NET_DBG("Packet %p discarded by L2", pkt);
   248c2:	f7ff fe8a 	bl	245da <_is_user_context>
   248c6:	4603      	mov	r3, r0
   248c8:	767b      	strb	r3, [r7, #25]
			return ret;
   248ca:	69fb      	ldr	r3, [r7, #28]
   248cc:	b2db      	uxtb	r3, r3
   248ce:	e020      	b.n	24912 <process_data+0xc2>
	ret = net_canbus_socket_input(pkt);
   248d0:	6878      	ldr	r0, [r7, #4]
   248d2:	f7ff ffb3 	bl	2483c <net_canbus_socket_input>
   248d6:	4603      	mov	r3, r0
   248d8:	61fb      	str	r3, [r7, #28]
	if (ret != NET_CONTINUE) {
   248da:	69fb      	ldr	r3, [r7, #28]
   248dc:	2b01      	cmp	r3, #1
   248de:	d002      	beq.n	248e6 <process_data+0x96>
		return ret;
   248e0:	69fb      	ldr	r3, [r7, #28]
   248e2:	b2db      	uxtb	r3, r3
   248e4:	e015      	b.n	24912 <process_data+0xc2>
	net_pkt_cursor_init(pkt);
   248e6:	6878      	ldr	r0, [r7, #4]
   248e8:	f001 fae8 	bl	25ebc <net_pkt_cursor_init>
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
   248ec:	6878      	ldr	r0, [r7, #4]
   248ee:	f7ff ff75 	bl	247dc <net_pkt_ip_data>
   248f2:	4603      	mov	r3, r0
   248f4:	781b      	ldrb	r3, [r3, #0]
   248f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   248fa:	2b40      	cmp	r3, #64	; 0x40
   248fc:	d104      	bne.n	24908 <process_data+0xb8>
		return net_ipv4_input(pkt);
   248fe:	6878      	ldr	r0, [r7, #4]
   24900:	f002 ff6d 	bl	277de <net_ipv4_input>
   24904:	4603      	mov	r3, r0
   24906:	e004      	b.n	24912 <process_data+0xc2>
	NET_DBG("Unknown IP family packet (0x%x)",
   24908:	f7ff fe67 	bl	245da <_is_user_context>
   2490c:	4603      	mov	r3, r0
   2490e:	76bb      	strb	r3, [r7, #26]
	return NET_DROP;
   24910:	2302      	movs	r3, #2
}
   24912:	4618      	mov	r0, r3
   24914:	3720      	adds	r7, #32
   24916:	46bd      	mov	sp, r7
   24918:	bd80      	pop	{r7, pc}

0002491a <processing_data>:
{
   2491a:	b580      	push	{r7, lr}
   2491c:	b084      	sub	sp, #16
   2491e:	af00      	add	r7, sp, #0
   24920:	6078      	str	r0, [r7, #4]
   24922:	460b      	mov	r3, r1
   24924:	70fb      	strb	r3, [r7, #3]
	switch (process_data(pkt, is_loopback)) {
   24926:	78fb      	ldrb	r3, [r7, #3]
   24928:	4619      	mov	r1, r3
   2492a:	6878      	ldr	r0, [r7, #4]
   2492c:	f7ff ff90 	bl	24850 <process_data>
   24930:	4603      	mov	r3, r0
   24932:	2b00      	cmp	r3, #0
   24934:	d104      	bne.n	24940 <processing_data+0x26>
		NET_DBG("Consumed pkt %p", pkt);
   24936:	f7ff fe50 	bl	245da <_is_user_context>
   2493a:	4603      	mov	r3, r0
   2493c:	73fb      	strb	r3, [r7, #15]
		break;
   2493e:	e007      	b.n	24950 <processing_data+0x36>
		NET_DBG("Dropping pkt %p", pkt);
   24940:	f7ff fe4b 	bl	245da <_is_user_context>
   24944:	4603      	mov	r3, r0
   24946:	73bb      	strb	r3, [r7, #14]
		net_pkt_unref(pkt);
   24948:	6878      	ldr	r0, [r7, #4]
   2494a:	f001 f85e 	bl	25a0a <net_pkt_unref>
		break;
   2494e:	bf00      	nop
}
   24950:	bf00      	nop
   24952:	3710      	adds	r7, #16
   24954:	46bd      	mov	sp, r7
   24956:	bd80      	pop	{r7, pc}

00024958 <net_post_init>:
{
   24958:	b480      	push	{r7}
   2495a:	af00      	add	r7, sp, #0
}
   2495c:	bf00      	nop
   2495e:	46bd      	mov	sp, r7
   24960:	bc80      	pop	{r7}
   24962:	4770      	bx	lr

00024964 <init_rx_queues>:
{
   24964:	b580      	push	{r7, lr}
   24966:	af00      	add	r7, sp, #0
	net_if_init();
   24968:	f7ef f878 	bl	13a5c <net_if_init>
	net_tc_rx_init();
   2496c:	f7ef faea 	bl	13f44 <net_tc_rx_init>
	net_if_post_init();
   24970:	f7ef f8c2 	bl	13af8 <net_if_post_init>
	net_post_init();
   24974:	f7ff fff0 	bl	24958 <net_post_init>
}
   24978:	bf00      	nop
   2497a:	bd80      	pop	{r7, pc}

0002497c <check_ip_addr>:
{
   2497c:	b590      	push	{r4, r7, lr}
   2497e:	b08d      	sub	sp, #52	; 0x34
   24980:	af00      	add	r7, sp, #0
   24982:	6078      	str	r0, [r7, #4]
	if (net_pkt_family(pkt) == AF_INET) {
   24984:	6878      	ldr	r0, [r7, #4]
   24986:	f7ff ff02 	bl	2478e <net_pkt_family>
   2498a:	4603      	mov	r3, r0
   2498c:	2b01      	cmp	r3, #1
   2498e:	d17f      	bne.n	24a90 <check_ip_addr+0x114>
		if (net_ipv4_addr_cmp(&NET_IPV4_HDR(pkt)->dst,
   24990:	6878      	ldr	r0, [r7, #4]
   24992:	f7ff ff23 	bl	247dc <net_pkt_ip_data>
   24996:	4603      	mov	r3, r0
   24998:	f103 0410 	add.w	r4, r3, #16
   2499c:	f7ef fbc4 	bl	14128 <net_ipv4_unspecified_address>
   249a0:	4603      	mov	r3, r0
   249a2:	4619      	mov	r1, r3
   249a4:	4620      	mov	r0, r4
   249a6:	f7ff fe48 	bl	2463a <net_ipv4_addr_cmp>
   249aa:	4603      	mov	r3, r0
   249ac:	2b00      	cmp	r3, #0
   249ae:	d007      	beq.n	249c0 <check_ip_addr+0x44>
			NET_DBG("IPv4 dst address missing");
   249b0:	f7ff fe13 	bl	245da <_is_user_context>
   249b4:	4603      	mov	r3, r0
   249b6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			return -EADDRNOTAVAIL;
   249ba:	f06f 037c 	mvn.w	r3, #124	; 0x7c
   249be:	e068      	b.n	24a92 <check_ip_addr+0x116>
		if (net_ipv4_is_addr_loopback(&NET_IPV4_HDR(pkt)->dst) ||
   249c0:	6878      	ldr	r0, [r7, #4]
   249c2:	f7ff ff0b 	bl	247dc <net_pkt_ip_data>
   249c6:	4603      	mov	r3, r0
   249c8:	3310      	adds	r3, #16
   249ca:	4618      	mov	r0, r3
   249cc:	f7ff fe25 	bl	2461a <net_ipv4_is_addr_loopback>
   249d0:	4603      	mov	r3, r0
   249d2:	2b00      	cmp	r3, #0
   249d4:	d11d      	bne.n	24a12 <check_ip_addr+0x96>
		    (net_ipv4_is_addr_bcast(net_pkt_iface(pkt),
   249d6:	6878      	ldr	r0, [r7, #4]
   249d8:	f7ff feaf 	bl	2473a <net_pkt_iface>
   249dc:	4604      	mov	r4, r0
				     &NET_IPV4_HDR(pkt)->dst) == false &&
   249de:	6878      	ldr	r0, [r7, #4]
   249e0:	f7ff fefc 	bl	247dc <net_pkt_ip_data>
   249e4:	4603      	mov	r3, r0
   249e6:	3310      	adds	r3, #16
		    (net_ipv4_is_addr_bcast(net_pkt_iface(pkt),
   249e8:	4619      	mov	r1, r3
   249ea:	4620      	mov	r0, r4
   249ec:	f7ff fe3c 	bl	24668 <net_ipv4_is_addr_bcast>
   249f0:	4603      	mov	r3, r0
				     &NET_IPV4_HDR(pkt)->dst) == false &&
   249f2:	f083 0301 	eor.w	r3, r3, #1
   249f6:	b2db      	uxtb	r3, r3
		if (net_ipv4_is_addr_loopback(&NET_IPV4_HDR(pkt)->dst) ||
   249f8:	2b00      	cmp	r3, #0
   249fa:	d036      	beq.n	24a6a <check_ip_addr+0xee>
		     net_ipv4_is_my_addr(&NET_IPV4_HDR(pkt)->dst))) {
   249fc:	6878      	ldr	r0, [r7, #4]
   249fe:	f7ff feed 	bl	247dc <net_pkt_ip_data>
   24a02:	4603      	mov	r3, r0
   24a04:	3310      	adds	r3, #16
   24a06:	4618      	mov	r0, r3
   24a08:	f7ff fe48 	bl	2469c <net_ipv4_is_my_addr>
   24a0c:	4603      	mov	r3, r0
				     &NET_IPV4_HDR(pkt)->dst) == false &&
   24a0e:	2b00      	cmp	r3, #0
   24a10:	d02b      	beq.n	24a6a <check_ip_addr+0xee>
			net_ipaddr_copy(&addr, &NET_IPV4_HDR(pkt)->src);
   24a12:	f107 030c 	add.w	r3, r7, #12
   24a16:	62bb      	str	r3, [r7, #40]	; 0x28
   24a18:	6878      	ldr	r0, [r7, #4]
   24a1a:	f7ff fedf 	bl	247dc <net_pkt_ip_data>
   24a1e:	4603      	mov	r3, r0
   24a20:	330c      	adds	r3, #12
   24a22:	627b      	str	r3, [r7, #36]	; 0x24
   24a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   24a26:	681a      	ldr	r2, [r3, #0]
   24a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
   24a2a:	601a      	str	r2, [r3, #0]
			net_ipaddr_copy(&NET_IPV4_HDR(pkt)->src,
   24a2c:	6878      	ldr	r0, [r7, #4]
   24a2e:	f7ff fed5 	bl	247dc <net_pkt_ip_data>
   24a32:	4603      	mov	r3, r0
   24a34:	330c      	adds	r3, #12
   24a36:	623b      	str	r3, [r7, #32]
   24a38:	6878      	ldr	r0, [r7, #4]
   24a3a:	f7ff fecf 	bl	247dc <net_pkt_ip_data>
   24a3e:	4603      	mov	r3, r0
   24a40:	3310      	adds	r3, #16
   24a42:	61fb      	str	r3, [r7, #28]
   24a44:	69fb      	ldr	r3, [r7, #28]
   24a46:	681a      	ldr	r2, [r3, #0]
   24a48:	6a3b      	ldr	r3, [r7, #32]
   24a4a:	601a      	str	r2, [r3, #0]
			net_ipaddr_copy(&NET_IPV4_HDR(pkt)->dst, &addr);
   24a4c:	6878      	ldr	r0, [r7, #4]
   24a4e:	f7ff fec5 	bl	247dc <net_pkt_ip_data>
   24a52:	4603      	mov	r3, r0
   24a54:	3310      	adds	r3, #16
   24a56:	61bb      	str	r3, [r7, #24]
   24a58:	f107 030c 	add.w	r3, r7, #12
   24a5c:	617b      	str	r3, [r7, #20]
   24a5e:	697b      	ldr	r3, [r7, #20]
   24a60:	681a      	ldr	r2, [r3, #0]
   24a62:	69bb      	ldr	r3, [r7, #24]
   24a64:	601a      	str	r2, [r3, #0]
			return 1;
   24a66:	2301      	movs	r3, #1
   24a68:	e013      	b.n	24a92 <check_ip_addr+0x116>
		if (net_ipv4_is_addr_loopback(&NET_IPV4_HDR(pkt)->src)) {
   24a6a:	6878      	ldr	r0, [r7, #4]
   24a6c:	f7ff feb6 	bl	247dc <net_pkt_ip_data>
   24a70:	4603      	mov	r3, r0
   24a72:	330c      	adds	r3, #12
   24a74:	4618      	mov	r0, r3
   24a76:	f7ff fdd0 	bl	2461a <net_ipv4_is_addr_loopback>
   24a7a:	4603      	mov	r3, r0
   24a7c:	2b00      	cmp	r3, #0
   24a7e:	d007      	beq.n	24a90 <check_ip_addr+0x114>
			NET_DBG("IPv4 loopback src address");
   24a80:	f7ff fdab 	bl	245da <_is_user_context>
   24a84:	4603      	mov	r3, r0
   24a86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			return -EADDRNOTAVAIL;
   24a8a:	f06f 037c 	mvn.w	r3, #124	; 0x7c
   24a8e:	e000      	b.n	24a92 <check_ip_addr+0x116>
	return 0;
   24a90:	2300      	movs	r3, #0
}
   24a92:	4618      	mov	r0, r3
   24a94:	3734      	adds	r7, #52	; 0x34
   24a96:	46bd      	mov	sp, r7
   24a98:	bd90      	pop	{r4, r7, pc}

00024a9a <net_send_data>:
{
   24a9a:	b580      	push	{r7, lr}
   24a9c:	b086      	sub	sp, #24
   24a9e:	af00      	add	r7, sp, #0
   24aa0:	6078      	str	r0, [r7, #4]
	if (!pkt || !pkt->frags) {
   24aa2:	687b      	ldr	r3, [r7, #4]
   24aa4:	2b00      	cmp	r3, #0
   24aa6:	d003      	beq.n	24ab0 <net_send_data+0x16>
   24aa8:	687b      	ldr	r3, [r7, #4]
   24aaa:	695b      	ldr	r3, [r3, #20]
   24aac:	2b00      	cmp	r3, #0
   24aae:	d102      	bne.n	24ab6 <net_send_data+0x1c>
		return -ENODATA;
   24ab0:	f06f 033c 	mvn.w	r3, #60	; 0x3c
   24ab4:	e033      	b.n	24b1e <net_send_data+0x84>
	if (!net_pkt_iface(pkt)) {
   24ab6:	6878      	ldr	r0, [r7, #4]
   24ab8:	f7ff fe3f 	bl	2473a <net_pkt_iface>
   24abc:	4603      	mov	r3, r0
   24abe:	2b00      	cmp	r3, #0
   24ac0:	d102      	bne.n	24ac8 <net_send_data+0x2e>
		return -EINVAL;
   24ac2:	f06f 0315 	mvn.w	r3, #21
   24ac6:	e02a      	b.n	24b1e <net_send_data+0x84>
	net_pkt_trim_buffer(pkt);
   24ac8:	6878      	ldr	r0, [r7, #4]
   24aca:	f001 f910 	bl	25cee <net_pkt_trim_buffer>
	net_pkt_cursor_init(pkt);
   24ace:	6878      	ldr	r0, [r7, #4]
   24ad0:	f001 f9f4 	bl	25ebc <net_pkt_cursor_init>
	status = check_ip_addr(pkt);
   24ad4:	6878      	ldr	r0, [r7, #4]
   24ad6:	f7ff ff51 	bl	2497c <check_ip_addr>
   24ada:	6138      	str	r0, [r7, #16]
	if (status < 0) {
   24adc:	693b      	ldr	r3, [r7, #16]
   24ade:	2b00      	cmp	r3, #0
   24ae0:	da01      	bge.n	24ae6 <net_send_data+0x4c>
		return status;
   24ae2:	693b      	ldr	r3, [r7, #16]
   24ae4:	e01b      	b.n	24b1e <net_send_data+0x84>
	} else if (status > 0) {
   24ae6:	693b      	ldr	r3, [r7, #16]
   24ae8:	2b00      	cmp	r3, #0
   24aea:	dd09      	ble.n	24b00 <net_send_data+0x66>
		NET_DBG("Loopback pkt %p back to us", pkt);
   24aec:	f7ff fd75 	bl	245da <_is_user_context>
   24af0:	4603      	mov	r3, r0
   24af2:	75fb      	strb	r3, [r7, #23]
		processing_data(pkt, true);
   24af4:	2101      	movs	r1, #1
   24af6:	6878      	ldr	r0, [r7, #4]
   24af8:	f7ff ff0f 	bl	2491a <processing_data>
		return 0;
   24afc:	2300      	movs	r3, #0
   24afe:	e00e      	b.n	24b1e <net_send_data+0x84>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
   24b00:	6878      	ldr	r0, [r7, #4]
   24b02:	f7ff fe1a 	bl	2473a <net_pkt_iface>
   24b06:	4603      	mov	r3, r0
   24b08:	6879      	ldr	r1, [r7, #4]
   24b0a:	4618      	mov	r0, r3
   24b0c:	f000 fb0f 	bl	2512e <net_if_send_data>
   24b10:	4603      	mov	r3, r0
   24b12:	2b02      	cmp	r3, #2
   24b14:	d102      	bne.n	24b1c <net_send_data+0x82>
		return -EIO;
   24b16:	f06f 0304 	mvn.w	r3, #4
   24b1a:	e000      	b.n	24b1e <net_send_data+0x84>
	return 0;
   24b1c:	2300      	movs	r3, #0
}
   24b1e:	4618      	mov	r0, r3
   24b20:	3718      	adds	r7, #24
   24b22:	46bd      	mov	sp, r7
   24b24:	bd80      	pop	{r7, pc}

00024b26 <net_rx>:
{
   24b26:	b580      	push	{r7, lr}
   24b28:	b088      	sub	sp, #32
   24b2a:	af00      	add	r7, sp, #0
   24b2c:	6078      	str	r0, [r7, #4]
   24b2e:	6039      	str	r1, [r7, #0]
	pkt_len = net_pkt_get_len(pkt);
   24b30:	6838      	ldr	r0, [r7, #0]
   24b32:	f7ff fe45 	bl	247c0 <net_pkt_get_len>
   24b36:	61f8      	str	r0, [r7, #28]
	NET_DBG("Received pkt %p len %zu", pkt, pkt_len);
   24b38:	f7ff fd4f 	bl	245da <_is_user_context>
   24b3c:	4603      	mov	r3, r0
   24b3e:	76fb      	strb	r3, [r7, #27]
	processing_data(pkt, false);
   24b40:	2100      	movs	r1, #0
   24b42:	6838      	ldr	r0, [r7, #0]
   24b44:	f7ff fee9 	bl	2491a <processing_data>
}
   24b48:	bf00      	nop
   24b4a:	3720      	adds	r7, #32
   24b4c:	46bd      	mov	sp, r7
   24b4e:	bd80      	pop	{r7, pc}

00024b50 <process_rx_packet>:
{
   24b50:	b580      	push	{r7, lr}
   24b52:	b084      	sub	sp, #16
   24b54:	af00      	add	r7, sp, #0
   24b56:	6078      	str	r0, [r7, #4]
	pkt = CONTAINER_OF(work, struct net_pkt, work);
   24b58:	687b      	ldr	r3, [r7, #4]
   24b5a:	3b04      	subs	r3, #4
   24b5c:	60fb      	str	r3, [r7, #12]
	net_rx(net_pkt_iface(pkt), pkt);
   24b5e:	68f8      	ldr	r0, [r7, #12]
   24b60:	f7ff fdeb 	bl	2473a <net_pkt_iface>
   24b64:	4603      	mov	r3, r0
   24b66:	68f9      	ldr	r1, [r7, #12]
   24b68:	4618      	mov	r0, r3
   24b6a:	f7ff ffdc 	bl	24b26 <net_rx>
}
   24b6e:	bf00      	nop
   24b70:	3710      	adds	r7, #16
   24b72:	46bd      	mov	sp, r7
   24b74:	bd80      	pop	{r7, pc}

00024b76 <net_recv_data>:

/* Called by driver when an IP packet has been received */
int net_recv_data(struct net_if *iface, struct net_pkt *pkt)
{
   24b76:	b580      	push	{r7, lr}
   24b78:	b08e      	sub	sp, #56	; 0x38
   24b7a:	af00      	add	r7, sp, #0
   24b7c:	6078      	str	r0, [r7, #4]
   24b7e:	6039      	str	r1, [r7, #0]
	if (!pkt || !iface) {
   24b80:	683b      	ldr	r3, [r7, #0]
   24b82:	2b00      	cmp	r3, #0
   24b84:	d002      	beq.n	24b8c <net_recv_data+0x16>
   24b86:	687b      	ldr	r3, [r7, #4]
   24b88:	2b00      	cmp	r3, #0
   24b8a:	d102      	bne.n	24b92 <net_recv_data+0x1c>
		return -EINVAL;
   24b8c:	f06f 0315 	mvn.w	r3, #21
   24b90:	e02b      	b.n	24bea <net_recv_data+0x74>
	}

	if (!pkt->frags) {
   24b92:	683b      	ldr	r3, [r7, #0]
   24b94:	695b      	ldr	r3, [r3, #20]
   24b96:	2b00      	cmp	r3, #0
   24b98:	d102      	bne.n	24ba0 <net_recv_data+0x2a>
		return -ENODATA;
   24b9a:	f06f 033c 	mvn.w	r3, #60	; 0x3c
   24b9e:	e024      	b.n	24bea <net_recv_data+0x74>
	}

	if (!atomic_test_bit(iface->if_dev->flags, NET_IF_UP)) {
   24ba0:	687b      	ldr	r3, [r7, #4]
   24ba2:	681b      	ldr	r3, [r3, #0]
   24ba4:	330c      	adds	r3, #12
   24ba6:	2100      	movs	r1, #0
   24ba8:	4618      	mov	r0, r3
   24baa:	f7ff fcf7 	bl	2459c <atomic_test_bit>
   24bae:	4603      	mov	r3, r0
   24bb0:	f083 0301 	eor.w	r3, r3, #1
   24bb4:	b2db      	uxtb	r3, r3
   24bb6:	2b00      	cmp	r3, #0
   24bb8:	d002      	beq.n	24bc0 <net_recv_data+0x4a>
		return -ENETDOWN;
   24bba:	f06f 0372 	mvn.w	r3, #114	; 0x72
   24bbe:	e014      	b.n	24bea <net_recv_data+0x74>
	}

	net_pkt_set_overwrite(pkt, true);
   24bc0:	2101      	movs	r1, #1
   24bc2:	6838      	ldr	r0, [r7, #0]
   24bc4:	f7ff fe16 	bl	247f4 <net_pkt_set_overwrite>
	net_pkt_cursor_init(pkt);
   24bc8:	6838      	ldr	r0, [r7, #0]
   24bca:	f001 f977 	bl	25ebc <net_pkt_cursor_init>

	NET_DBG("prio %d iface %p pkt %p len %zu", net_pkt_priority(pkt),
   24bce:	f7ff fd04 	bl	245da <_is_user_context>
   24bd2:	4603      	mov	r3, r0
   24bd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	if (IS_ENABLED(CONFIG_NET_ROUTING)) {
		net_pkt_set_orig_iface(pkt, iface);
	}

	net_pkt_set_iface(pkt, iface);
   24bd8:	6879      	ldr	r1, [r7, #4]
   24bda:	6838      	ldr	r0, [r7, #0]
   24bdc:	f7ff fdb8 	bl	24750 <net_pkt_set_iface>

	net_queue_rx(iface, pkt);
   24be0:	6839      	ldr	r1, [r7, #0]
   24be2:	6878      	ldr	r0, [r7, #4]
   24be4:	f7ee fb50 	bl	13288 <net_queue_rx>

	return 0;
   24be8:	2300      	movs	r3, #0
}
   24bea:	4618      	mov	r0, r3
   24bec:	3738      	adds	r7, #56	; 0x38
   24bee:	46bd      	mov	sp, r7
   24bf0:	bd80      	pop	{r7, pc}

00024bf2 <l3_init>:

static inline void l3_init(void)
{
   24bf2:	b580      	push	{r7, lr}
   24bf4:	b082      	sub	sp, #8
   24bf6:	af00      	add	r7, sp, #0
	net_icmpv4_init();
   24bf8:	f7ef fa8c 	bl	14114 <net_icmpv4_init>
	net_ipv6_init();

	net_ipv4_autoconf_init();

#if defined(CONFIG_NET_UDP) || defined(CONFIG_NET_TCP)
	net_conn_init();
   24bfc:	f003 f9ee 	bl	27fdc <net_conn_init>
#endif
	net_tcp_init();

	net_route_init();

	NET_DBG("Network L3 init done");
   24c00:	f7ff fceb 	bl	245da <_is_user_context>
   24c04:	4603      	mov	r3, r0
   24c06:	71fb      	strb	r3, [r7, #7]
}
   24c08:	bf00      	nop
   24c0a:	3708      	adds	r7, #8
   24c0c:	46bd      	mov	sp, r7
   24c0e:	bd80      	pop	{r7, pc}

00024c10 <services_init>:

static inline int services_init(void)
{
   24c10:	b580      	push	{r7, lr}
   24c12:	b082      	sub	sp, #8
   24c14:	af00      	add	r7, sp, #0
	int status;

	status = net_dhcpv4_init();
   24c16:	2300      	movs	r3, #0
   24c18:	607b      	str	r3, [r7, #4]
	if (status) {
   24c1a:	687b      	ldr	r3, [r7, #4]
   24c1c:	2b00      	cmp	r3, #0
   24c1e:	d001      	beq.n	24c24 <services_init+0x14>
		return status;
   24c20:	687b      	ldr	r3, [r7, #4]
   24c22:	e002      	b.n	24c2a <services_init+0x1a>
	}

	dns_init_resolver();

	net_shell_init();
   24c24:	f7ff fdf9 	bl	2481a <net_shell_init>

	return status;
   24c28:	687b      	ldr	r3, [r7, #4]
}
   24c2a:	4618      	mov	r0, r3
   24c2c:	3708      	adds	r7, #8
   24c2e:	46bd      	mov	sp, r7
   24c30:	bd80      	pop	{r7, pc}

00024c32 <net_init>:

static int net_init(struct device *unused)
{
   24c32:	b580      	push	{r7, lr}
   24c34:	b084      	sub	sp, #16
   24c36:	af00      	add	r7, sp, #0
   24c38:	6078      	str	r0, [r7, #4]
	net_hostname_init();
   24c3a:	f7ff fce8 	bl	2460e <net_hostname_init>

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);
   24c3e:	f7ff fccc 	bl	245da <_is_user_context>
   24c42:	4603      	mov	r3, r0
   24c44:	73fb      	strb	r3, [r7, #15]

	net_pkt_init();
   24c46:	f001 fca7 	bl	26598 <net_pkt_init>

	net_context_init();
   24c4a:	f7ee fb11 	bl	13270 <net_context_init>

	l3_init();
   24c4e:	f7ff ffd0 	bl	24bf2 <l3_init>

	net_mgmt_event_init();
   24c52:	f7ef fc5b 	bl	1450c <net_mgmt_event_init>

	init_rx_queues();
   24c56:	f7ff fe85 	bl	24964 <init_rx_queues>

	return services_init();
   24c5a:	f7ff ffd9 	bl	24c10 <services_init>
   24c5e:	4603      	mov	r3, r0
}
   24c60:	4618      	mov	r0, r3
   24c62:	3710      	adds	r7, #16
   24c64:	46bd      	mov	sp, r7
   24c66:	bd80      	pop	{r7, pc}

00024c68 <atomic_get>:
{
   24c68:	b480      	push	{r7}
   24c6a:	b083      	sub	sp, #12
   24c6c:	af00      	add	r7, sp, #0
   24c6e:	6078      	str	r0, [r7, #4]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24c70:	687b      	ldr	r3, [r7, #4]
   24c72:	f3bf 8f5b 	dmb	ish
   24c76:	681b      	ldr	r3, [r3, #0]
   24c78:	f3bf 8f5b 	dmb	ish
}
   24c7c:	4618      	mov	r0, r3
   24c7e:	370c      	adds	r7, #12
   24c80:	46bd      	mov	sp, r7
   24c82:	bc80      	pop	{r7}
   24c84:	4770      	bx	lr

00024c86 <atomic_or>:
{
   24c86:	b480      	push	{r7}
   24c88:	b083      	sub	sp, #12
   24c8a:	af00      	add	r7, sp, #0
   24c8c:	6078      	str	r0, [r7, #4]
   24c8e:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   24c90:	683a      	ldr	r2, [r7, #0]
   24c92:	687b      	ldr	r3, [r7, #4]
   24c94:	f3bf 8f5b 	dmb	ish
   24c98:	e853 1f00 	ldrex	r1, [r3]
   24c9c:	ea41 0002 	orr.w	r0, r1, r2
   24ca0:	e843 0c00 	strex	ip, r0, [r3]
   24ca4:	f1bc 0f00 	cmp.w	ip, #0
   24ca8:	d1f6      	bne.n	24c98 <atomic_or+0x12>
   24caa:	f3bf 8f5b 	dmb	ish
   24cae:	460b      	mov	r3, r1
}
   24cb0:	4618      	mov	r0, r3
   24cb2:	370c      	adds	r7, #12
   24cb4:	46bd      	mov	sp, r7
   24cb6:	bc80      	pop	{r7}
   24cb8:	4770      	bx	lr

00024cba <atomic_and>:
{
   24cba:	b480      	push	{r7}
   24cbc:	b083      	sub	sp, #12
   24cbe:	af00      	add	r7, sp, #0
   24cc0:	6078      	str	r0, [r7, #4]
   24cc2:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24cc4:	683a      	ldr	r2, [r7, #0]
   24cc6:	687b      	ldr	r3, [r7, #4]
   24cc8:	f3bf 8f5b 	dmb	ish
   24ccc:	e853 1f00 	ldrex	r1, [r3]
   24cd0:	ea01 0002 	and.w	r0, r1, r2
   24cd4:	e843 0c00 	strex	ip, r0, [r3]
   24cd8:	f1bc 0f00 	cmp.w	ip, #0
   24cdc:	d1f6      	bne.n	24ccc <atomic_and+0x12>
   24cde:	f3bf 8f5b 	dmb	ish
   24ce2:	460b      	mov	r3, r1
}
   24ce4:	4618      	mov	r0, r3
   24ce6:	370c      	adds	r7, #12
   24ce8:	46bd      	mov	sp, r7
   24cea:	bc80      	pop	{r7}
   24cec:	4770      	bx	lr

00024cee <atomic_test_bit>:
{
   24cee:	b580      	push	{r7, lr}
   24cf0:	b084      	sub	sp, #16
   24cf2:	af00      	add	r7, sp, #0
   24cf4:	6078      	str	r0, [r7, #4]
   24cf6:	6039      	str	r1, [r7, #0]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   24cf8:	683b      	ldr	r3, [r7, #0]
   24cfa:	095b      	lsrs	r3, r3, #5
   24cfc:	009b      	lsls	r3, r3, #2
   24cfe:	687a      	ldr	r2, [r7, #4]
   24d00:	4413      	add	r3, r2
   24d02:	4618      	mov	r0, r3
   24d04:	f7ff ffb0 	bl	24c68 <atomic_get>
   24d08:	60f8      	str	r0, [r7, #12]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   24d0a:	683b      	ldr	r3, [r7, #0]
   24d0c:	f003 031f 	and.w	r3, r3, #31
   24d10:	68fa      	ldr	r2, [r7, #12]
   24d12:	fa42 f303 	asr.w	r3, r2, r3
   24d16:	f003 0301 	and.w	r3, r3, #1
   24d1a:	2b00      	cmp	r3, #0
   24d1c:	bf14      	ite	ne
   24d1e:	2301      	movne	r3, #1
   24d20:	2300      	moveq	r3, #0
   24d22:	b2db      	uxtb	r3, r3
}
   24d24:	4618      	mov	r0, r3
   24d26:	3710      	adds	r7, #16
   24d28:	46bd      	mov	sp, r7
   24d2a:	bd80      	pop	{r7, pc}

00024d2c <atomic_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return N/A
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
   24d2c:	b580      	push	{r7, lr}
   24d2e:	b084      	sub	sp, #16
   24d30:	af00      	add	r7, sp, #0
   24d32:	6078      	str	r0, [r7, #4]
   24d34:	6039      	str	r1, [r7, #0]
	atomic_val_t mask = ATOMIC_MASK(bit);
   24d36:	683b      	ldr	r3, [r7, #0]
   24d38:	f003 031f 	and.w	r3, r3, #31
   24d3c:	2201      	movs	r2, #1
   24d3e:	fa02 f303 	lsl.w	r3, r2, r3
   24d42:	60fb      	str	r3, [r7, #12]

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   24d44:	683b      	ldr	r3, [r7, #0]
   24d46:	095b      	lsrs	r3, r3, #5
   24d48:	009b      	lsls	r3, r3, #2
   24d4a:	687a      	ldr	r2, [r7, #4]
   24d4c:	441a      	add	r2, r3
   24d4e:	68fb      	ldr	r3, [r7, #12]
   24d50:	43db      	mvns	r3, r3
   24d52:	4619      	mov	r1, r3
   24d54:	4610      	mov	r0, r2
   24d56:	f7ff ffb0 	bl	24cba <atomic_and>
}
   24d5a:	bf00      	nop
   24d5c:	3710      	adds	r7, #16
   24d5e:	46bd      	mov	sp, r7
   24d60:	bd80      	pop	{r7, pc}

00024d62 <atomic_set_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
   24d62:	b580      	push	{r7, lr}
   24d64:	b084      	sub	sp, #16
   24d66:	af00      	add	r7, sp, #0
   24d68:	6078      	str	r0, [r7, #4]
   24d6a:	6039      	str	r1, [r7, #0]
	atomic_val_t mask = ATOMIC_MASK(bit);
   24d6c:	683b      	ldr	r3, [r7, #0]
   24d6e:	f003 031f 	and.w	r3, r3, #31
   24d72:	2201      	movs	r2, #1
   24d74:	fa02 f303 	lsl.w	r3, r2, r3
   24d78:	60fb      	str	r3, [r7, #12]

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   24d7a:	683b      	ldr	r3, [r7, #0]
   24d7c:	095b      	lsrs	r3, r3, #5
   24d7e:	009b      	lsls	r3, r3, #2
   24d80:	687a      	ldr	r2, [r7, #4]
   24d82:	4413      	add	r3, r2
   24d84:	68f9      	ldr	r1, [r7, #12]
   24d86:	4618      	mov	r0, r3
   24d88:	f7ff ff7d 	bl	24c86 <atomic_or>
}
   24d8c:	bf00      	nop
   24d8e:	3710      	adds	r7, #16
   24d90:	46bd      	mov	sp, r7
   24d92:	bd80      	pop	{r7, pc}

00024d94 <z_snode_next_peek>:
{
   24d94:	b480      	push	{r7}
   24d96:	b083      	sub	sp, #12
   24d98:	af00      	add	r7, sp, #0
   24d9a:	6078      	str	r0, [r7, #4]
	return node->next;
   24d9c:	687b      	ldr	r3, [r7, #4]
   24d9e:	681b      	ldr	r3, [r3, #0]
}
   24da0:	4618      	mov	r0, r3
   24da2:	370c      	adds	r7, #12
   24da4:	46bd      	mov	sp, r7
   24da6:	bc80      	pop	{r7}
   24da8:	4770      	bx	lr

00024daa <sys_slist_peek_head>:
{
   24daa:	b480      	push	{r7}
   24dac:	b083      	sub	sp, #12
   24dae:	af00      	add	r7, sp, #0
   24db0:	6078      	str	r0, [r7, #4]
	return list->head;
   24db2:	687b      	ldr	r3, [r7, #4]
   24db4:	681b      	ldr	r3, [r3, #0]
}
   24db6:	4618      	mov	r0, r3
   24db8:	370c      	adds	r7, #12
   24dba:	46bd      	mov	sp, r7
   24dbc:	bc80      	pop	{r7}
   24dbe:	4770      	bx	lr

00024dc0 <sys_slist_peek_next_no_check>:
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   24dc0:	b580      	push	{r7, lr}
   24dc2:	b082      	sub	sp, #8
   24dc4:	af00      	add	r7, sp, #0
   24dc6:	6078      	str	r0, [r7, #4]
   24dc8:	6878      	ldr	r0, [r7, #4]
   24dca:	f7ff ffe3 	bl	24d94 <z_snode_next_peek>
   24dce:	4603      	mov	r3, r0
   24dd0:	4618      	mov	r0, r3
   24dd2:	3708      	adds	r7, #8
   24dd4:	46bd      	mov	sp, r7
   24dd6:	bd80      	pop	{r7, pc}

00024dd8 <sys_slist_peek_next>:
Z_GENLIST_PEEK_NEXT(slist, snode)
   24dd8:	b580      	push	{r7, lr}
   24dda:	b082      	sub	sp, #8
   24ddc:	af00      	add	r7, sp, #0
   24dde:	6078      	str	r0, [r7, #4]
   24de0:	687b      	ldr	r3, [r7, #4]
   24de2:	2b00      	cmp	r3, #0
   24de4:	d004      	beq.n	24df0 <sys_slist_peek_next+0x18>
   24de6:	6878      	ldr	r0, [r7, #4]
   24de8:	f7ff ffea 	bl	24dc0 <sys_slist_peek_next_no_check>
   24dec:	4603      	mov	r3, r0
   24dee:	e000      	b.n	24df2 <sys_slist_peek_next+0x1a>
   24df0:	2300      	movs	r3, #0
   24df2:	4618      	mov	r0, r3
   24df4:	3708      	adds	r7, #8
   24df6:	46bd      	mov	sp, r7
   24df8:	bd80      	pop	{r7, pc}

00024dfa <_is_user_context>:
{
   24dfa:	b480      	push	{r7}
   24dfc:	af00      	add	r7, sp, #0
	return false;
   24dfe:	2300      	movs	r3, #0
}
   24e00:	4618      	mov	r0, r3
   24e02:	46bd      	mov	sp, r7
   24e04:	bc80      	pop	{r7}
   24e06:	4770      	bx	lr

00024e08 <k_work_init>:
{
   24e08:	b480      	push	{r7}
   24e0a:	b083      	sub	sp, #12
   24e0c:	af00      	add	r7, sp, #0
   24e0e:	6078      	str	r0, [r7, #4]
   24e10:	6039      	str	r1, [r7, #0]
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   24e12:	687b      	ldr	r3, [r7, #4]
   24e14:	2200      	movs	r2, #0
   24e16:	601a      	str	r2, [r3, #0]
   24e18:	687b      	ldr	r3, [r7, #4]
   24e1a:	683a      	ldr	r2, [r7, #0]
   24e1c:	605a      	str	r2, [r3, #4]
   24e1e:	687b      	ldr	r3, [r7, #4]
   24e20:	2200      	movs	r2, #0
   24e22:	609a      	str	r2, [r3, #8]
}
   24e24:	bf00      	nop
   24e26:	370c      	adds	r7, #12
   24e28:	46bd      	mov	sp, r7
   24e2a:	bc80      	pop	{r7}
   24e2c:	4770      	bx	lr

00024e2e <net_ipv4_is_addr_mcast>:
{
   24e2e:	b480      	push	{r7}
   24e30:	b087      	sub	sp, #28
   24e32:	af00      	add	r7, sp, #0
   24e34:	6078      	str	r0, [r7, #4]
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xE0000000) == 0xE0000000;
   24e36:	687b      	ldr	r3, [r7, #4]
   24e38:	617b      	str	r3, [r7, #20]
   24e3a:	697b      	ldr	r3, [r7, #20]
   24e3c:	681b      	ldr	r3, [r3, #0]
   24e3e:	0e1b      	lsrs	r3, r3, #24
   24e40:	b2da      	uxtb	r2, r3
   24e42:	687b      	ldr	r3, [r7, #4]
   24e44:	613b      	str	r3, [r7, #16]
   24e46:	693b      	ldr	r3, [r7, #16]
   24e48:	681b      	ldr	r3, [r3, #0]
   24e4a:	0a1b      	lsrs	r3, r3, #8
   24e4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   24e50:	431a      	orrs	r2, r3
   24e52:	687b      	ldr	r3, [r7, #4]
   24e54:	60fb      	str	r3, [r7, #12]
   24e56:	68fb      	ldr	r3, [r7, #12]
   24e58:	681b      	ldr	r3, [r3, #0]
   24e5a:	021b      	lsls	r3, r3, #8
   24e5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   24e60:	431a      	orrs	r2, r3
   24e62:	687b      	ldr	r3, [r7, #4]
   24e64:	60bb      	str	r3, [r7, #8]
   24e66:	68bb      	ldr	r3, [r7, #8]
   24e68:	681b      	ldr	r3, [r3, #0]
   24e6a:	061b      	lsls	r3, r3, #24
   24e6c:	4313      	orrs	r3, r2
   24e6e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   24e72:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
   24e76:	bf0c      	ite	eq
   24e78:	2301      	moveq	r3, #1
   24e7a:	2300      	movne	r3, #0
   24e7c:	b2db      	uxtb	r3, r3
}
   24e7e:	4618      	mov	r0, r3
   24e80:	371c      	adds	r7, #28
   24e82:	46bd      	mov	sp, r7
   24e84:	bc80      	pop	{r7}
   24e86:	4770      	bx	lr

00024e88 <net_ipv4_addr_cmp>:
{
   24e88:	b480      	push	{r7}
   24e8a:	b085      	sub	sp, #20
   24e8c:	af00      	add	r7, sp, #0
   24e8e:	6078      	str	r0, [r7, #4]
   24e90:	6039      	str	r1, [r7, #0]
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   24e92:	687b      	ldr	r3, [r7, #4]
   24e94:	60fb      	str	r3, [r7, #12]
   24e96:	68fb      	ldr	r3, [r7, #12]
   24e98:	681a      	ldr	r2, [r3, #0]
   24e9a:	683b      	ldr	r3, [r7, #0]
   24e9c:	60bb      	str	r3, [r7, #8]
   24e9e:	68bb      	ldr	r3, [r7, #8]
   24ea0:	681b      	ldr	r3, [r3, #0]
   24ea2:	429a      	cmp	r2, r3
   24ea4:	bf0c      	ite	eq
   24ea6:	2301      	moveq	r3, #1
   24ea8:	2300      	movne	r3, #0
   24eaa:	b2db      	uxtb	r3, r3
}
   24eac:	4618      	mov	r0, r3
   24eae:	3714      	adds	r7, #20
   24eb0:	46bd      	mov	sp, r7
   24eb2:	bc80      	pop	{r7}
   24eb4:	4770      	bx	lr

00024eb6 <net_if_l2>:
{
   24eb6:	b480      	push	{r7}
   24eb8:	b083      	sub	sp, #12
   24eba:	af00      	add	r7, sp, #0
   24ebc:	6078      	str	r0, [r7, #4]
	return iface->if_dev->l2;
   24ebe:	687b      	ldr	r3, [r7, #4]
   24ec0:	681b      	ldr	r3, [r3, #0]
   24ec2:	685b      	ldr	r3, [r3, #4]
}
   24ec4:	4618      	mov	r0, r3
   24ec6:	370c      	adds	r7, #12
   24ec8:	46bd      	mov	sp, r7
   24eca:	bc80      	pop	{r7}
   24ecc:	4770      	bx	lr

00024ece <net_if_get_device>:
{
   24ece:	b480      	push	{r7}
   24ed0:	b083      	sub	sp, #12
   24ed2:	af00      	add	r7, sp, #0
   24ed4:	6078      	str	r0, [r7, #4]
	return iface->if_dev->dev;
   24ed6:	687b      	ldr	r3, [r7, #4]
   24ed8:	681b      	ldr	r3, [r3, #0]
   24eda:	681b      	ldr	r3, [r3, #0]
}
   24edc:	4618      	mov	r0, r3
   24ede:	370c      	adds	r7, #12
   24ee0:	46bd      	mov	sp, r7
   24ee2:	bc80      	pop	{r7}
   24ee4:	4770      	bx	lr

00024ee6 <net_if_get_link_addr>:
{
   24ee6:	b480      	push	{r7}
   24ee8:	b083      	sub	sp, #12
   24eea:	af00      	add	r7, sp, #0
   24eec:	6078      	str	r0, [r7, #4]
	return &iface->if_dev->link_addr;
   24eee:	687b      	ldr	r3, [r7, #4]
   24ef0:	681b      	ldr	r3, [r3, #0]
   24ef2:	3310      	adds	r3, #16
}
   24ef4:	4618      	mov	r0, r3
   24ef6:	370c      	adds	r7, #12
   24ef8:	46bd      	mov	sp, r7
   24efa:	bc80      	pop	{r7}
   24efc:	4770      	bx	lr

00024efe <net_context_get_ip_proto>:
{
   24efe:	b480      	push	{r7}
   24f00:	b083      	sub	sp, #12
   24f02:	af00      	add	r7, sp, #0
   24f04:	6078      	str	r0, [r7, #4]
	return context->proto;
   24f06:	687b      	ldr	r3, [r7, #4]
   24f08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
}
   24f0c:	4618      	mov	r0, r3
   24f0e:	370c      	adds	r7, #12
   24f10:	46bd      	mov	sp, r7
   24f12:	bc80      	pop	{r7}
   24f14:	4770      	bx	lr

00024f16 <net_pkt_work>:
{
   24f16:	b480      	push	{r7}
   24f18:	b083      	sub	sp, #12
   24f1a:	af00      	add	r7, sp, #0
   24f1c:	6078      	str	r0, [r7, #4]
	return &pkt->work;
   24f1e:	687b      	ldr	r3, [r7, #4]
   24f20:	3304      	adds	r3, #4
}
   24f22:	4618      	mov	r0, r3
   24f24:	370c      	adds	r7, #12
   24f26:	46bd      	mov	sp, r7
   24f28:	bc80      	pop	{r7}
   24f2a:	4770      	bx	lr

00024f2c <net_pkt_lladdr_if>:
{
   24f2c:	b580      	push	{r7, lr}
   24f2e:	b082      	sub	sp, #8
   24f30:	af00      	add	r7, sp, #0
   24f32:	6078      	str	r0, [r7, #4]
	return net_if_get_link_addr(pkt->iface);
   24f34:	687b      	ldr	r3, [r7, #4]
   24f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   24f38:	4618      	mov	r0, r3
   24f3a:	f7ff ffd4 	bl	24ee6 <net_if_get_link_addr>
   24f3e:	4603      	mov	r3, r0
}
   24f40:	4618      	mov	r0, r3
   24f42:	3708      	adds	r7, #8
   24f44:	46bd      	mov	sp, r7
   24f46:	bd80      	pop	{r7, pc}

00024f48 <net_pkt_context>:
{
   24f48:	b480      	push	{r7}
   24f4a:	b083      	sub	sp, #12
   24f4c:	af00      	add	r7, sp, #0
   24f4e:	6078      	str	r0, [r7, #4]
	return pkt->context;
   24f50:	687b      	ldr	r3, [r7, #4]
   24f52:	6a1b      	ldr	r3, [r3, #32]
}
   24f54:	4618      	mov	r0, r3
   24f56:	370c      	adds	r7, #12
   24f58:	46bd      	mov	sp, r7
   24f5a:	bc80      	pop	{r7}
   24f5c:	4770      	bx	lr

00024f5e <net_pkt_iface>:
{
   24f5e:	b480      	push	{r7}
   24f60:	b083      	sub	sp, #12
   24f62:	af00      	add	r7, sp, #0
   24f64:	6078      	str	r0, [r7, #4]
	return pkt->iface;
   24f66:	687b      	ldr	r3, [r7, #4]
   24f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   24f6a:	4618      	mov	r0, r3
   24f6c:	370c      	adds	r7, #12
   24f6e:	46bd      	mov	sp, r7
   24f70:	bc80      	pop	{r7}
   24f72:	4770      	bx	lr

00024f74 <net_pkt_priority>:
{
   24f74:	b480      	push	{r7}
   24f76:	b083      	sub	sp, #12
   24f78:	af00      	add	r7, sp, #0
   24f7a:	6078      	str	r0, [r7, #4]
	return 0;
   24f7c:	2300      	movs	r3, #0
}
   24f7e:	4618      	mov	r0, r3
   24f80:	370c      	adds	r7, #12
   24f82:	46bd      	mov	sp, r7
   24f84:	bc80      	pop	{r7}
   24f86:	4770      	bx	lr

00024f88 <net_pkt_lladdr_src>:
{
   24f88:	b480      	push	{r7}
   24f8a:	b083      	sub	sp, #12
   24f8c:	af00      	add	r7, sp, #0
   24f8e:	6078      	str	r0, [r7, #4]
	return &pkt->lladdr_src;
   24f90:	687b      	ldr	r3, [r7, #4]
   24f92:	332c      	adds	r3, #44	; 0x2c
}
   24f94:	4618      	mov	r0, r3
   24f96:	370c      	adds	r7, #12
   24f98:	46bd      	mov	sp, r7
   24f9a:	bc80      	pop	{r7}
   24f9c:	4770      	bx	lr

00024f9e <net_pkt_lladdr_dst>:
{
   24f9e:	b480      	push	{r7}
   24fa0:	b083      	sub	sp, #12
   24fa2:	af00      	add	r7, sp, #0
   24fa4:	6078      	str	r0, [r7, #4]
	return &pkt->lladdr_dst;
   24fa6:	687b      	ldr	r3, [r7, #4]
   24fa8:	3334      	adds	r3, #52	; 0x34
}
   24faa:	4618      	mov	r0, r3
   24fac:	370c      	adds	r7, #12
   24fae:	46bd      	mov	sp, r7
   24fb0:	bc80      	pop	{r7}
   24fb2:	4770      	bx	lr

00024fb4 <net_mgmt_event_notify>:
#ifdef CONFIG_NET_MGMT_EVENT
void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length);

static inline void net_mgmt_event_notify(u32_t mgmt_event, struct net_if *iface)
{
   24fb4:	b580      	push	{r7, lr}
   24fb6:	b082      	sub	sp, #8
   24fb8:	af00      	add	r7, sp, #0
   24fba:	6078      	str	r0, [r7, #4]
   24fbc:	6039      	str	r1, [r7, #0]
	net_mgmt_event_notify_with_info(mgmt_event, iface, NULL, 0);
   24fbe:	2300      	movs	r3, #0
   24fc0:	2200      	movs	r2, #0
   24fc2:	6839      	ldr	r1, [r7, #0]
   24fc4:	6878      	ldr	r0, [r7, #4]
   24fc6:	f7ef fa7f 	bl	144c8 <net_mgmt_event_notify_with_info>
}
   24fca:	bf00      	nop
   24fcc:	3708      	adds	r7, #8
   24fce:	46bd      	mov	sp, r7
   24fd0:	bd80      	pop	{r7, pc}

00024fd2 <net_eth_get_hw_capabilities>:
{
   24fd2:	b590      	push	{r4, r7, lr}
   24fd4:	b085      	sub	sp, #20
   24fd6:	af00      	add	r7, sp, #0
   24fd8:	6078      	str	r0, [r7, #4]
		(struct ethernet_api *)net_if_get_device(iface)->driver_api;
   24fda:	6878      	ldr	r0, [r7, #4]
   24fdc:	f7ff ff77 	bl	24ece <net_if_get_device>
   24fe0:	4603      	mov	r3, r0
	const struct ethernet_api *eth =
   24fe2:	685b      	ldr	r3, [r3, #4]
   24fe4:	60fb      	str	r3, [r7, #12]
	if (!eth->get_capabilities) {
   24fe6:	68fb      	ldr	r3, [r7, #12]
   24fe8:	68db      	ldr	r3, [r3, #12]
   24fea:	2b00      	cmp	r3, #0
   24fec:	d101      	bne.n	24ff2 <net_eth_get_hw_capabilities+0x20>
		return (enum ethernet_hw_caps)0;
   24fee:	2300      	movs	r3, #0
   24ff0:	e008      	b.n	25004 <net_eth_get_hw_capabilities+0x32>
	return eth->get_capabilities(net_if_get_device(iface));
   24ff2:	68fb      	ldr	r3, [r7, #12]
   24ff4:	68dc      	ldr	r4, [r3, #12]
   24ff6:	6878      	ldr	r0, [r7, #4]
   24ff8:	f7ff ff69 	bl	24ece <net_if_get_device>
   24ffc:	4603      	mov	r3, r0
   24ffe:	4618      	mov	r0, r3
   25000:	47a0      	blx	r4
   25002:	4603      	mov	r3, r0
}
   25004:	4618      	mov	r0, r3
   25006:	3714      	adds	r7, #20
   25008:	46bd      	mov	sp, r7
   2500a:	bd90      	pop	{r4, r7, pc}

0002500c <net_context_send_cb>:
{
   2500c:	b580      	push	{r7, lr}
   2500e:	b082      	sub	sp, #8
   25010:	af00      	add	r7, sp, #0
   25012:	6078      	str	r0, [r7, #4]
   25014:	6039      	str	r1, [r7, #0]
	if (!context) {
   25016:	687b      	ldr	r3, [r7, #4]
   25018:	2b00      	cmp	r3, #0
   2501a:	d00e      	beq.n	2503a <net_context_send_cb+0x2e>
	if (context->send_cb) {
   2501c:	687b      	ldr	r3, [r7, #4]
   2501e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   25020:	2b00      	cmp	r3, #0
   25022:	d006      	beq.n	25032 <net_context_send_cb+0x26>
		context->send_cb(context, status, context->user_data);
   25024:	687b      	ldr	r3, [r7, #4]
   25026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   25028:	687a      	ldr	r2, [r7, #4]
   2502a:	6812      	ldr	r2, [r2, #0]
   2502c:	6839      	ldr	r1, [r7, #0]
   2502e:	6878      	ldr	r0, [r7, #4]
   25030:	4798      	blx	r3
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   25032:	6878      	ldr	r0, [r7, #4]
   25034:	f7ff ff63 	bl	24efe <net_context_get_ip_proto>
   25038:	e000      	b.n	2503c <net_context_send_cb+0x30>
		return;
   2503a:	bf00      	nop
}
   2503c:	3708      	adds	r7, #8
   2503e:	46bd      	mov	sp, r7
   25040:	bd80      	pop	{r7, pc}

00025042 <net_if_tx>:
{
   25042:	b580      	push	{r7, lr}
   25044:	b08c      	sub	sp, #48	; 0x30
   25046:	af00      	add	r7, sp, #0
   25048:	6078      	str	r0, [r7, #4]
   2504a:	6039      	str	r1, [r7, #0]
	if (!pkt) {
   2504c:	683b      	ldr	r3, [r7, #0]
   2504e:	2b00      	cmp	r3, #0
   25050:	d101      	bne.n	25056 <net_if_tx+0x14>
		return false;
   25052:	2300      	movs	r3, #0
   25054:	e03e      	b.n	250d4 <net_if_tx+0x92>
	dst = net_pkt_lladdr_dst(pkt);
   25056:	6838      	ldr	r0, [r7, #0]
   25058:	f7ff ffa1 	bl	24f9e <net_pkt_lladdr_dst>
   2505c:	62b8      	str	r0, [r7, #40]	; 0x28
	context = net_pkt_context(pkt);
   2505e:	6838      	ldr	r0, [r7, #0]
   25060:	f7ff ff72 	bl	24f48 <net_pkt_context>
   25064:	6238      	str	r0, [r7, #32]
	if (atomic_test_bit(iface->if_dev->flags, NET_IF_UP)) {
   25066:	687b      	ldr	r3, [r7, #4]
   25068:	681b      	ldr	r3, [r3, #0]
   2506a:	330c      	adds	r3, #12
   2506c:	2100      	movs	r1, #0
   2506e:	4618      	mov	r0, r3
   25070:	f7ff fe3d 	bl	24cee <atomic_test_bit>
   25074:	4603      	mov	r3, r0
   25076:	2b00      	cmp	r3, #0
   25078:	d009      	beq.n	2508e <net_if_tx+0x4c>
		status = net_if_l2(iface)->send(iface, pkt);
   2507a:	6878      	ldr	r0, [r7, #4]
   2507c:	f7ff ff1b 	bl	24eb6 <net_if_l2>
   25080:	4603      	mov	r3, r0
   25082:	685b      	ldr	r3, [r3, #4]
   25084:	6839      	ldr	r1, [r7, #0]
   25086:	6878      	ldr	r0, [r7, #4]
   25088:	4798      	blx	r3
   2508a:	62f8      	str	r0, [r7, #44]	; 0x2c
   2508c:	e007      	b.n	2509e <net_if_tx+0x5c>
		NET_WARN("iface %p is down", iface);
   2508e:	f7ff feb4 	bl	24dfa <_is_user_context>
   25092:	4603      	mov	r3, r0
   25094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status = -ENETDOWN;
   25098:	f06f 0372 	mvn.w	r3, #114	; 0x72
   2509c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (status < 0) {
   2509e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   250a0:	2b00      	cmp	r3, #0
   250a2:	da02      	bge.n	250aa <net_if_tx+0x68>
		net_pkt_unref(pkt);
   250a4:	6838      	ldr	r0, [r7, #0]
   250a6:	f000 fcb0 	bl	25a0a <net_pkt_unref>
	if (context) {
   250aa:	6a3b      	ldr	r3, [r7, #32]
   250ac:	2b00      	cmp	r3, #0
   250ae:	d007      	beq.n	250c0 <net_if_tx+0x7e>
		NET_DBG("Calling context send cb %p status %d",
   250b0:	f7ff fea3 	bl	24dfa <_is_user_context>
   250b4:	4603      	mov	r3, r0
   250b6:	77fb      	strb	r3, [r7, #31]
		net_context_send_cb(context, status);
   250b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   250ba:	6a38      	ldr	r0, [r7, #32]
   250bc:	f7ff ffa6 	bl	2500c <net_context_send_cb>
	if (dst->addr) {
   250c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   250c2:	681b      	ldr	r3, [r3, #0]
   250c4:	2b00      	cmp	r3, #0
   250c6:	d004      	beq.n	250d2 <net_if_tx+0x90>
		net_if_call_link_cb(iface, dst, status);
   250c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   250ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   250cc:	6878      	ldr	r0, [r7, #4]
   250ce:	f7ee fba3 	bl	13818 <net_if_call_link_cb>
	return true;
   250d2:	2301      	movs	r3, #1
}
   250d4:	4618      	mov	r0, r3
   250d6:	3730      	adds	r7, #48	; 0x30
   250d8:	46bd      	mov	sp, r7
   250da:	bd80      	pop	{r7, pc}

000250dc <process_tx_packet>:
{
   250dc:	b580      	push	{r7, lr}
   250de:	b084      	sub	sp, #16
   250e0:	af00      	add	r7, sp, #0
   250e2:	6078      	str	r0, [r7, #4]
	pkt = CONTAINER_OF(work, struct net_pkt, work);
   250e4:	687b      	ldr	r3, [r7, #4]
   250e6:	3b04      	subs	r3, #4
   250e8:	60fb      	str	r3, [r7, #12]
	net_if_tx(net_pkt_iface(pkt), pkt);
   250ea:	68f8      	ldr	r0, [r7, #12]
   250ec:	f7ff ff37 	bl	24f5e <net_pkt_iface>
   250f0:	4603      	mov	r3, r0
   250f2:	68f9      	ldr	r1, [r7, #12]
   250f4:	4618      	mov	r0, r3
   250f6:	f7ff ffa4 	bl	25042 <net_if_tx>
}
   250fa:	bf00      	nop
   250fc:	3710      	adds	r7, #16
   250fe:	46bd      	mov	sp, r7
   25100:	bd80      	pop	{r7, pc}

00025102 <init_iface>:
{
   25102:	b580      	push	{r7, lr}
   25104:	b084      	sub	sp, #16
   25106:	af00      	add	r7, sp, #0
   25108:	6078      	str	r0, [r7, #4]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   2510a:	6878      	ldr	r0, [r7, #4]
   2510c:	f7ff fedf 	bl	24ece <net_if_get_device>
   25110:	4603      	mov	r3, r0
   25112:	685b      	ldr	r3, [r3, #4]
   25114:	60fb      	str	r3, [r7, #12]
	NET_DBG("On iface %p", iface);
   25116:	f7ff fe70 	bl	24dfa <_is_user_context>
   2511a:	4603      	mov	r3, r0
   2511c:	72fb      	strb	r3, [r7, #11]
	api->init(iface);
   2511e:	68fb      	ldr	r3, [r7, #12]
   25120:	681b      	ldr	r3, [r3, #0]
   25122:	6878      	ldr	r0, [r7, #4]
   25124:	4798      	blx	r3
}
   25126:	bf00      	nop
   25128:	3710      	adds	r7, #16
   2512a:	46bd      	mov	sp, r7
   2512c:	bd80      	pop	{r7, pc}

0002512e <net_if_send_data>:
{
   2512e:	b590      	push	{r4, r7, lr}
   25130:	b08d      	sub	sp, #52	; 0x34
   25132:	af00      	add	r7, sp, #0
   25134:	6078      	str	r0, [r7, #4]
   25136:	6039      	str	r1, [r7, #0]
	struct net_context *context = net_pkt_context(pkt);
   25138:	6838      	ldr	r0, [r7, #0]
   2513a:	f7ff ff05 	bl	24f48 <net_pkt_context>
   2513e:	6278      	str	r0, [r7, #36]	; 0x24
	struct net_linkaddr *dst = net_pkt_lladdr_dst(pkt);
   25140:	6838      	ldr	r0, [r7, #0]
   25142:	f7ff ff2c 	bl	24f9e <net_pkt_lladdr_dst>
   25146:	6238      	str	r0, [r7, #32]
	enum net_verdict verdict = NET_OK;
   25148:	2300      	movs	r3, #0
   2514a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	int status = -EIO;
   2514e:	f06f 0304 	mvn.w	r3, #4
   25152:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!atomic_test_bit(iface->if_dev->flags, NET_IF_UP)) {
   25154:	687b      	ldr	r3, [r7, #4]
   25156:	681b      	ldr	r3, [r3, #0]
   25158:	330c      	adds	r3, #12
   2515a:	2100      	movs	r1, #0
   2515c:	4618      	mov	r0, r3
   2515e:	f7ff fdc6 	bl	24cee <atomic_test_bit>
   25162:	4603      	mov	r3, r0
   25164:	f083 0301 	eor.w	r3, r3, #1
   25168:	b2db      	uxtb	r3, r3
   2516a:	2b00      	cmp	r3, #0
   2516c:	d00b      	beq.n	25186 <net_if_send_data+0x58>
		NET_WARN("iface %p is down", iface);
   2516e:	f7ff fe44 	bl	24dfa <_is_user_context>
   25172:	4603      	mov	r3, r0
   25174:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		verdict = NET_DROP;
   25178:	2302      	movs	r3, #2
   2517a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		status = -ENETDOWN;
   2517e:	f06f 0372 	mvn.w	r3, #114	; 0x72
   25182:	62bb      	str	r3, [r7, #40]	; 0x28
		goto done;
   25184:	e029      	b.n	251da <net_if_send_data+0xac>
	if (!atomic_test_bit(iface->if_dev->flags, NET_IF_POINTOPOINT) &&
   25186:	687b      	ldr	r3, [r7, #4]
   25188:	681b      	ldr	r3, [r3, #0]
   2518a:	330c      	adds	r3, #12
   2518c:	2101      	movs	r1, #1
   2518e:	4618      	mov	r0, r3
   25190:	f7ff fdad 	bl	24cee <atomic_test_bit>
   25194:	4603      	mov	r3, r0
   25196:	f083 0301 	eor.w	r3, r3, #1
   2519a:	b2db      	uxtb	r3, r3
   2519c:	2b00      	cmp	r3, #0
   2519e:	d01b      	beq.n	251d8 <net_if_send_data+0xaa>
	    !net_pkt_lladdr_src(pkt)->addr) {
   251a0:	6838      	ldr	r0, [r7, #0]
   251a2:	f7ff fef1 	bl	24f88 <net_pkt_lladdr_src>
   251a6:	4603      	mov	r3, r0
   251a8:	681b      	ldr	r3, [r3, #0]
	if (!atomic_test_bit(iface->if_dev->flags, NET_IF_POINTOPOINT) &&
   251aa:	2b00      	cmp	r3, #0
   251ac:	d114      	bne.n	251d8 <net_if_send_data+0xaa>
		net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
   251ae:	6838      	ldr	r0, [r7, #0]
   251b0:	f7ff febc 	bl	24f2c <net_pkt_lladdr_if>
   251b4:	4604      	mov	r4, r0
   251b6:	6838      	ldr	r0, [r7, #0]
   251b8:	f7ff fee6 	bl	24f88 <net_pkt_lladdr_src>
   251bc:	4602      	mov	r2, r0
   251be:	6823      	ldr	r3, [r4, #0]
   251c0:	6013      	str	r3, [r2, #0]
		net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
   251c2:	6838      	ldr	r0, [r7, #0]
   251c4:	f7ff feb2 	bl	24f2c <net_pkt_lladdr_if>
   251c8:	4604      	mov	r4, r0
   251ca:	6838      	ldr	r0, [r7, #0]
   251cc:	f7ff fedc 	bl	24f88 <net_pkt_lladdr_src>
   251d0:	4603      	mov	r3, r0
   251d2:	7922      	ldrb	r2, [r4, #4]
   251d4:	711a      	strb	r2, [r3, #4]
   251d6:	e000      	b.n	251da <net_if_send_data+0xac>
done:
   251d8:	bf00      	nop
	if (verdict == NET_DROP) {
   251da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   251de:	2b02      	cmp	r3, #2
   251e0:	d114      	bne.n	2520c <net_if_send_data+0xde>
		if (context) {
   251e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   251e4:	2b00      	cmp	r3, #0
   251e6:	d007      	beq.n	251f8 <net_if_send_data+0xca>
			NET_DBG("Calling ctx send cb %p verdict %d",
   251e8:	f7ff fe07 	bl	24dfa <_is_user_context>
   251ec:	4603      	mov	r3, r0
   251ee:	77fb      	strb	r3, [r7, #31]
			net_context_send_cb(context, status);
   251f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   251f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
   251f4:	f7ff ff0a 	bl	2500c <net_context_send_cb>
		if (dst->addr) {
   251f8:	6a3b      	ldr	r3, [r7, #32]
   251fa:	681b      	ldr	r3, [r3, #0]
   251fc:	2b00      	cmp	r3, #0
   251fe:	d00d      	beq.n	2521c <net_if_send_data+0xee>
			net_if_call_link_cb(iface, dst, status);
   25200:	6aba      	ldr	r2, [r7, #40]	; 0x28
   25202:	6a39      	ldr	r1, [r7, #32]
   25204:	6878      	ldr	r0, [r7, #4]
   25206:	f7ee fb07 	bl	13818 <net_if_call_link_cb>
   2520a:	e007      	b.n	2521c <net_if_send_data+0xee>
	} else if (verdict == NET_OK) {
   2520c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   25210:	2b00      	cmp	r3, #0
   25212:	d103      	bne.n	2521c <net_if_send_data+0xee>
		net_if_queue_tx(iface, pkt);
   25214:	6839      	ldr	r1, [r7, #0]
   25216:	6878      	ldr	r0, [r7, #4]
   25218:	f7ee f88a 	bl	13330 <net_if_queue_tx>
	return verdict;
   2521c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
}
   25220:	4618      	mov	r0, r3
   25222:	3734      	adds	r7, #52	; 0x34
   25224:	46bd      	mov	sp, r7
   25226:	bd90      	pop	{r4, r7, pc}

00025228 <get_ipaddr_diff>:
{
   25228:	b480      	push	{r7}
   2522a:	b087      	sub	sp, #28
   2522c:	af00      	add	r7, sp, #0
   2522e:	60f8      	str	r0, [r7, #12]
   25230:	60b9      	str	r1, [r7, #8]
   25232:	607a      	str	r2, [r7, #4]
	u8_t len = 0U;
   25234:	2300      	movs	r3, #0
   25236:	753b      	strb	r3, [r7, #20]
	for (j = 0U; j < addr_len; j++) {
   25238:	2300      	movs	r3, #0
   2523a:	75fb      	strb	r3, [r7, #23]
   2523c:	e030      	b.n	252a0 <get_ipaddr_diff+0x78>
		if (src[j] == dst[j]) {
   2523e:	7dfb      	ldrb	r3, [r7, #23]
   25240:	68fa      	ldr	r2, [r7, #12]
   25242:	4413      	add	r3, r2
   25244:	781a      	ldrb	r2, [r3, #0]
   25246:	7dfb      	ldrb	r3, [r7, #23]
   25248:	68b9      	ldr	r1, [r7, #8]
   2524a:	440b      	add	r3, r1
   2524c:	781b      	ldrb	r3, [r3, #0]
   2524e:	429a      	cmp	r2, r3
   25250:	d103      	bne.n	2525a <get_ipaddr_diff+0x32>
			len += 8U;
   25252:	7d3b      	ldrb	r3, [r7, #20]
   25254:	3308      	adds	r3, #8
   25256:	753b      	strb	r3, [r7, #20]
   25258:	e01f      	b.n	2529a <get_ipaddr_diff+0x72>
			xor = src[j] ^ dst[j];
   2525a:	7dfb      	ldrb	r3, [r7, #23]
   2525c:	68fa      	ldr	r2, [r7, #12]
   2525e:	4413      	add	r3, r2
   25260:	781a      	ldrb	r2, [r3, #0]
   25262:	7dfb      	ldrb	r3, [r7, #23]
   25264:	68b9      	ldr	r1, [r7, #8]
   25266:	440b      	add	r3, r1
   25268:	781b      	ldrb	r3, [r3, #0]
   2526a:	4053      	eors	r3, r2
   2526c:	757b      	strb	r3, [r7, #21]
			for (k = 0U; k < 8; k++) {
   2526e:	2300      	movs	r3, #0
   25270:	75bb      	strb	r3, [r7, #22]
   25272:	e00c      	b.n	2528e <get_ipaddr_diff+0x66>
				if (!(xor & 0x80)) {
   25274:	f997 3015 	ldrsb.w	r3, [r7, #21]
   25278:	2b00      	cmp	r3, #0
   2527a:	db0c      	blt.n	25296 <get_ipaddr_diff+0x6e>
					len++;
   2527c:	7d3b      	ldrb	r3, [r7, #20]
   2527e:	3301      	adds	r3, #1
   25280:	753b      	strb	r3, [r7, #20]
					xor <<= 1;
   25282:	7d7b      	ldrb	r3, [r7, #21]
   25284:	005b      	lsls	r3, r3, #1
   25286:	757b      	strb	r3, [r7, #21]
			for (k = 0U; k < 8; k++) {
   25288:	7dbb      	ldrb	r3, [r7, #22]
   2528a:	3301      	adds	r3, #1
   2528c:	75bb      	strb	r3, [r7, #22]
   2528e:	7dbb      	ldrb	r3, [r7, #22]
   25290:	2b07      	cmp	r3, #7
   25292:	d9ef      	bls.n	25274 <get_ipaddr_diff+0x4c>
			break;
   25294:	e008      	b.n	252a8 <get_ipaddr_diff+0x80>
					break;
   25296:	bf00      	nop
			break;
   25298:	e006      	b.n	252a8 <get_ipaddr_diff+0x80>
	for (j = 0U; j < addr_len; j++) {
   2529a:	7dfb      	ldrb	r3, [r7, #23]
   2529c:	3301      	adds	r3, #1
   2529e:	75fb      	strb	r3, [r7, #23]
   252a0:	7dfb      	ldrb	r3, [r7, #23]
   252a2:	687a      	ldr	r2, [r7, #4]
   252a4:	429a      	cmp	r2, r3
   252a6:	dcca      	bgt.n	2523e <get_ipaddr_diff+0x16>
	return len;
   252a8:	7d3b      	ldrb	r3, [r7, #20]
}
   252aa:	4618      	mov	r0, r3
   252ac:	371c      	adds	r7, #28
   252ae:	46bd      	mov	sp, r7
   252b0:	bc80      	pop	{r7}
   252b2:	4770      	bx	lr

000252b4 <net_if_ipv4_addr_mask_cmp>:
{
   252b4:	b480      	push	{r7}
   252b6:	b087      	sub	sp, #28
   252b8:	af00      	add	r7, sp, #0
   252ba:	6078      	str	r0, [r7, #4]
   252bc:	6039      	str	r1, [r7, #0]
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
   252be:	687b      	ldr	r3, [r7, #4]
   252c0:	685b      	ldr	r3, [r3, #4]
   252c2:	613b      	str	r3, [r7, #16]
	if (!ipv4) {
   252c4:	693b      	ldr	r3, [r7, #16]
   252c6:	2b00      	cmp	r3, #0
   252c8:	d101      	bne.n	252ce <net_if_ipv4_addr_mask_cmp+0x1a>
		return false;
   252ca:	2300      	movs	r3, #0
   252cc:	e03b      	b.n	25346 <net_if_ipv4_addr_mask_cmp+0x92>
	subnet = UNALIGNED_GET(&addr->s_addr) & ipv4->netmask.s_addr;
   252ce:	683b      	ldr	r3, [r7, #0]
   252d0:	60fb      	str	r3, [r7, #12]
   252d2:	68fb      	ldr	r3, [r7, #12]
   252d4:	681a      	ldr	r2, [r3, #0]
   252d6:	693b      	ldr	r3, [r7, #16]
   252d8:	69db      	ldr	r3, [r3, #28]
   252da:	4013      	ands	r3, r2
   252dc:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
   252de:	2300      	movs	r3, #0
   252e0:	617b      	str	r3, [r7, #20]
   252e2:	e02c      	b.n	2533e <net_if_ipv4_addr_mask_cmp+0x8a>
		if (!ipv4->unicast[i].is_used ||
   252e4:	6939      	ldr	r1, [r7, #16]
   252e6:	697a      	ldr	r2, [r7, #20]
   252e8:	4613      	mov	r3, r2
   252ea:	005b      	lsls	r3, r3, #1
   252ec:	4413      	add	r3, r2
   252ee:	009b      	lsls	r3, r3, #2
   252f0:	440b      	add	r3, r1
   252f2:	3308      	adds	r3, #8
   252f4:	789b      	ldrb	r3, [r3, #2]
   252f6:	f3c3 0340 	ubfx	r3, r3, #1, #1
   252fa:	b2db      	uxtb	r3, r3
   252fc:	2b00      	cmp	r3, #0
   252fe:	d01a      	beq.n	25336 <net_if_ipv4_addr_mask_cmp+0x82>
		    ipv4->unicast[i].address.family != AF_INET) {
   25300:	6939      	ldr	r1, [r7, #16]
   25302:	697a      	ldr	r2, [r7, #20]
   25304:	4613      	mov	r3, r2
   25306:	005b      	lsls	r3, r3, #1
   25308:	4413      	add	r3, r2
   2530a:	009b      	lsls	r3, r3, #2
   2530c:	440b      	add	r3, r1
   2530e:	881b      	ldrh	r3, [r3, #0]
		if (!ipv4->unicast[i].is_used ||
   25310:	2b01      	cmp	r3, #1
   25312:	d110      	bne.n	25336 <net_if_ipv4_addr_mask_cmp+0x82>
		if ((ipv4->unicast[i].address.in_addr.s_addr &
   25314:	6939      	ldr	r1, [r7, #16]
   25316:	697a      	ldr	r2, [r7, #20]
   25318:	4613      	mov	r3, r2
   2531a:	005b      	lsls	r3, r3, #1
   2531c:	4413      	add	r3, r2
   2531e:	009b      	lsls	r3, r3, #2
   25320:	440b      	add	r3, r1
   25322:	3304      	adds	r3, #4
   25324:	681a      	ldr	r2, [r3, #0]
		     ipv4->netmask.s_addr) == subnet) {
   25326:	693b      	ldr	r3, [r7, #16]
   25328:	69db      	ldr	r3, [r3, #28]
		if ((ipv4->unicast[i].address.in_addr.s_addr &
   2532a:	4013      	ands	r3, r2
   2532c:	68ba      	ldr	r2, [r7, #8]
   2532e:	429a      	cmp	r2, r3
   25330:	d102      	bne.n	25338 <net_if_ipv4_addr_mask_cmp+0x84>
			return true;
   25332:	2301      	movs	r3, #1
   25334:	e007      	b.n	25346 <net_if_ipv4_addr_mask_cmp+0x92>
			continue;
   25336:	bf00      	nop
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
   25338:	697b      	ldr	r3, [r7, #20]
   2533a:	3301      	adds	r3, #1
   2533c:	617b      	str	r3, [r7, #20]
   2533e:	697b      	ldr	r3, [r7, #20]
   25340:	2b00      	cmp	r3, #0
   25342:	ddcf      	ble.n	252e4 <net_if_ipv4_addr_mask_cmp+0x30>
	return false;
   25344:	2300      	movs	r3, #0
}
   25346:	4618      	mov	r0, r3
   25348:	371c      	adds	r7, #28
   2534a:	46bd      	mov	sp, r7
   2534c:	bc80      	pop	{r7}
   2534e:	4770      	bx	lr

00025350 <ipv4_is_broadcast_address>:
{
   25350:	b580      	push	{r7, lr}
   25352:	b084      	sub	sp, #16
   25354:	af00      	add	r7, sp, #0
   25356:	6078      	str	r0, [r7, #4]
   25358:	6039      	str	r1, [r7, #0]
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
   2535a:	687b      	ldr	r3, [r7, #4]
   2535c:	685b      	ldr	r3, [r3, #4]
   2535e:	60fb      	str	r3, [r7, #12]
	if (!ipv4) {
   25360:	68fb      	ldr	r3, [r7, #12]
   25362:	2b00      	cmp	r3, #0
   25364:	d101      	bne.n	2536a <ipv4_is_broadcast_address+0x1a>
		return false;
   25366:	2300      	movs	r3, #0
   25368:	e01b      	b.n	253a2 <ipv4_is_broadcast_address+0x52>
	if (!net_if_ipv4_addr_mask_cmp(iface, addr)) {
   2536a:	6839      	ldr	r1, [r7, #0]
   2536c:	6878      	ldr	r0, [r7, #4]
   2536e:	f7ff ffa1 	bl	252b4 <net_if_ipv4_addr_mask_cmp>
   25372:	4603      	mov	r3, r0
   25374:	f083 0301 	eor.w	r3, r3, #1
   25378:	b2db      	uxtb	r3, r3
   2537a:	2b00      	cmp	r3, #0
   2537c:	d001      	beq.n	25382 <ipv4_is_broadcast_address+0x32>
		return false;
   2537e:	2300      	movs	r3, #0
   25380:	e00f      	b.n	253a2 <ipv4_is_broadcast_address+0x52>
	if ((UNALIGNED_GET(&addr->s_addr) & ~ipv4->netmask.s_addr) ==
   25382:	683b      	ldr	r3, [r7, #0]
   25384:	60bb      	str	r3, [r7, #8]
   25386:	68bb      	ldr	r3, [r7, #8]
   25388:	681a      	ldr	r2, [r3, #0]
   2538a:	68fb      	ldr	r3, [r7, #12]
   2538c:	69db      	ldr	r3, [r3, #28]
   2538e:	43db      	mvns	r3, r3
   25390:	401a      	ands	r2, r3
	    ~ipv4->netmask.s_addr) {
   25392:	68fb      	ldr	r3, [r7, #12]
   25394:	69db      	ldr	r3, [r3, #28]
   25396:	43db      	mvns	r3, r3
	if ((UNALIGNED_GET(&addr->s_addr) & ~ipv4->netmask.s_addr) ==
   25398:	429a      	cmp	r2, r3
   2539a:	d101      	bne.n	253a0 <ipv4_is_broadcast_address+0x50>
		return true;
   2539c:	2301      	movs	r3, #1
   2539e:	e000      	b.n	253a2 <ipv4_is_broadcast_address+0x52>
	return false;
   253a0:	2300      	movs	r3, #0
}
   253a2:	4618      	mov	r0, r3
   253a4:	3710      	adds	r7, #16
   253a6:	46bd      	mov	sp, r7
   253a8:	bd80      	pop	{r7, pc}

000253aa <get_diff_ipv4>:
{
   253aa:	b580      	push	{r7, lr}
   253ac:	b082      	sub	sp, #8
   253ae:	af00      	add	r7, sp, #0
   253b0:	6078      	str	r0, [r7, #4]
   253b2:	6039      	str	r1, [r7, #0]
	return get_ipaddr_diff((const u8_t *)src, (const u8_t *)dst, 4);
   253b4:	2204      	movs	r2, #4
   253b6:	6839      	ldr	r1, [r7, #0]
   253b8:	6878      	ldr	r0, [r7, #4]
   253ba:	f7ff ff35 	bl	25228 <get_ipaddr_diff>
   253be:	4603      	mov	r3, r0
}
   253c0:	4618      	mov	r0, r3
   253c2:	3708      	adds	r7, #8
   253c4:	46bd      	mov	sp, r7
   253c6:	bd80      	pop	{r7, pc}

000253c8 <is_proper_ipv4_address>:
{
   253c8:	b580      	push	{r7, lr}
   253ca:	b082      	sub	sp, #8
   253cc:	af00      	add	r7, sp, #0
   253ce:	6078      	str	r0, [r7, #4]
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   253d0:	687b      	ldr	r3, [r7, #4]
   253d2:	7a9b      	ldrb	r3, [r3, #10]
   253d4:	f003 0302 	and.w	r3, r3, #2
   253d8:	b2db      	uxtb	r3, r3
   253da:	2b00      	cmp	r3, #0
   253dc:	d015      	beq.n	2540a <is_proper_ipv4_address+0x42>
   253de:	687b      	ldr	r3, [r7, #4]
   253e0:	f993 3009 	ldrsb.w	r3, [r3, #9]
   253e4:	2b01      	cmp	r3, #1
   253e6:	d110      	bne.n	2540a <is_proper_ipv4_address+0x42>
	    addr->address.family == AF_INET &&
   253e8:	687b      	ldr	r3, [r7, #4]
   253ea:	881b      	ldrh	r3, [r3, #0]
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   253ec:	2b01      	cmp	r3, #1
   253ee:	d10c      	bne.n	2540a <is_proper_ipv4_address+0x42>
	    !net_ipv4_is_ll_addr(&addr->address.in_addr)) {
   253f0:	687b      	ldr	r3, [r7, #4]
   253f2:	3304      	adds	r3, #4
   253f4:	4618      	mov	r0, r3
   253f6:	f7ed ff6b 	bl	132d0 <net_ipv4_is_ll_addr>
   253fa:	4603      	mov	r3, r0
   253fc:	f083 0301 	eor.w	r3, r3, #1
   25400:	b2db      	uxtb	r3, r3
	    addr->address.family == AF_INET &&
   25402:	2b00      	cmp	r3, #0
   25404:	d001      	beq.n	2540a <is_proper_ipv4_address+0x42>
		return true;
   25406:	2301      	movs	r3, #1
   25408:	e000      	b.n	2540c <is_proper_ipv4_address+0x44>
	return false;
   2540a:	2300      	movs	r3, #0
}
   2540c:	4618      	mov	r0, r3
   2540e:	3708      	adds	r7, #8
   25410:	46bd      	mov	sp, r7
   25412:	bd80      	pop	{r7, pc}

00025414 <net_if_ipv4_get_best_match>:
{
   25414:	b580      	push	{r7, lr}
   25416:	b088      	sub	sp, #32
   25418:	af00      	add	r7, sp, #0
   2541a:	60f8      	str	r0, [r7, #12]
   2541c:	60b9      	str	r1, [r7, #8]
   2541e:	607a      	str	r2, [r7, #4]
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
   25420:	68fb      	ldr	r3, [r7, #12]
   25422:	685b      	ldr	r3, [r3, #4]
   25424:	617b      	str	r3, [r7, #20]
	struct in_addr *src = NULL;
   25426:	2300      	movs	r3, #0
   25428:	61fb      	str	r3, [r7, #28]
	if (!ipv4) {
   2542a:	697b      	ldr	r3, [r7, #20]
   2542c:	2b00      	cmp	r3, #0
   2542e:	d101      	bne.n	25434 <net_if_ipv4_get_best_match+0x20>
		return NULL;
   25430:	2300      	movs	r3, #0
   25432:	e03a      	b.n	254aa <net_if_ipv4_get_best_match+0x96>
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
   25434:	2300      	movs	r3, #0
   25436:	61bb      	str	r3, [r7, #24]
   25438:	e033      	b.n	254a2 <net_if_ipv4_get_best_match+0x8e>
		if (!is_proper_ipv4_address(&ipv4->unicast[i])) {
   2543a:	69ba      	ldr	r2, [r7, #24]
   2543c:	4613      	mov	r3, r2
   2543e:	005b      	lsls	r3, r3, #1
   25440:	4413      	add	r3, r2
   25442:	009b      	lsls	r3, r3, #2
   25444:	697a      	ldr	r2, [r7, #20]
   25446:	4413      	add	r3, r2
   25448:	4618      	mov	r0, r3
   2544a:	f7ff ffbd 	bl	253c8 <is_proper_ipv4_address>
   2544e:	4603      	mov	r3, r0
   25450:	f083 0301 	eor.w	r3, r3, #1
   25454:	b2db      	uxtb	r3, r3
   25456:	2b00      	cmp	r3, #0
   25458:	d11f      	bne.n	2549a <net_if_ipv4_get_best_match+0x86>
		len = get_diff_ipv4(dst, &ipv4->unicast[i].address.in_addr);
   2545a:	69ba      	ldr	r2, [r7, #24]
   2545c:	4613      	mov	r3, r2
   2545e:	005b      	lsls	r3, r3, #1
   25460:	4413      	add	r3, r2
   25462:	009b      	lsls	r3, r3, #2
   25464:	697a      	ldr	r2, [r7, #20]
   25466:	4413      	add	r3, r2
   25468:	3304      	adds	r3, #4
   2546a:	4619      	mov	r1, r3
   2546c:	68b8      	ldr	r0, [r7, #8]
   2546e:	f7ff ff9c 	bl	253aa <get_diff_ipv4>
   25472:	4603      	mov	r3, r0
   25474:	74fb      	strb	r3, [r7, #19]
		if (len >= *best_so_far) {
   25476:	687b      	ldr	r3, [r7, #4]
   25478:	781b      	ldrb	r3, [r3, #0]
   2547a:	7cfa      	ldrb	r2, [r7, #19]
   2547c:	429a      	cmp	r2, r3
   2547e:	d30d      	bcc.n	2549c <net_if_ipv4_get_best_match+0x88>
			*best_so_far = len;
   25480:	687b      	ldr	r3, [r7, #4]
   25482:	7cfa      	ldrb	r2, [r7, #19]
   25484:	701a      	strb	r2, [r3, #0]
			src = &ipv4->unicast[i].address.in_addr;
   25486:	69ba      	ldr	r2, [r7, #24]
   25488:	4613      	mov	r3, r2
   2548a:	005b      	lsls	r3, r3, #1
   2548c:	4413      	add	r3, r2
   2548e:	009b      	lsls	r3, r3, #2
   25490:	697a      	ldr	r2, [r7, #20]
   25492:	4413      	add	r3, r2
   25494:	3304      	adds	r3, #4
   25496:	61fb      	str	r3, [r7, #28]
   25498:	e000      	b.n	2549c <net_if_ipv4_get_best_match+0x88>
			continue;
   2549a:	bf00      	nop
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
   2549c:	69bb      	ldr	r3, [r7, #24]
   2549e:	3301      	adds	r3, #1
   254a0:	61bb      	str	r3, [r7, #24]
   254a2:	69bb      	ldr	r3, [r7, #24]
   254a4:	2b00      	cmp	r3, #0
   254a6:	ddc8      	ble.n	2543a <net_if_ipv4_get_best_match+0x26>
	return src;
   254a8:	69fb      	ldr	r3, [r7, #28]
}
   254aa:	4618      	mov	r0, r3
   254ac:	3720      	adds	r7, #32
   254ae:	46bd      	mov	sp, r7
   254b0:	bd80      	pop	{r7, pc}

000254b2 <if_ipv4_get_addr>:
{
   254b2:	b580      	push	{r7, lr}
   254b4:	b084      	sub	sp, #16
   254b6:	af00      	add	r7, sp, #0
   254b8:	6078      	str	r0, [r7, #4]
   254ba:	460b      	mov	r3, r1
   254bc:	70fb      	strb	r3, [r7, #3]
   254be:	4613      	mov	r3, r2
   254c0:	70bb      	strb	r3, [r7, #2]
	if (!iface) {
   254c2:	687b      	ldr	r3, [r7, #4]
   254c4:	2b00      	cmp	r3, #0
   254c6:	d101      	bne.n	254cc <if_ipv4_get_addr+0x1a>
		return NULL;
   254c8:	2300      	movs	r3, #0
   254ca:	e060      	b.n	2558e <if_ipv4_get_addr+0xdc>
	ipv4 = iface->config.ip.ipv4;
   254cc:	687b      	ldr	r3, [r7, #4]
   254ce:	685b      	ldr	r3, [r3, #4]
   254d0:	60bb      	str	r3, [r7, #8]
	if (!ipv4) {
   254d2:	68bb      	ldr	r3, [r7, #8]
   254d4:	2b00      	cmp	r3, #0
   254d6:	d101      	bne.n	254dc <if_ipv4_get_addr+0x2a>
		return NULL;
   254d8:	2300      	movs	r3, #0
   254da:	e058      	b.n	2558e <if_ipv4_get_addr+0xdc>
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
   254dc:	2300      	movs	r3, #0
   254de:	60fb      	str	r3, [r7, #12]
   254e0:	e051      	b.n	25586 <if_ipv4_get_addr+0xd4>
		if (!ipv4->unicast[i].is_used ||
   254e2:	68b9      	ldr	r1, [r7, #8]
   254e4:	68fa      	ldr	r2, [r7, #12]
   254e6:	4613      	mov	r3, r2
   254e8:	005b      	lsls	r3, r3, #1
   254ea:	4413      	add	r3, r2
   254ec:	009b      	lsls	r3, r3, #2
   254ee:	440b      	add	r3, r1
   254f0:	3308      	adds	r3, #8
   254f2:	789b      	ldrb	r3, [r3, #2]
   254f4:	f3c3 0340 	ubfx	r3, r3, #1, #1
   254f8:	b2db      	uxtb	r3, r3
   254fa:	2b00      	cmp	r3, #0
   254fc:	d03d      	beq.n	2557a <if_ipv4_get_addr+0xc8>
   254fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
   25502:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   25506:	d00d      	beq.n	25524 <if_ipv4_get_addr+0x72>
		     ipv4->unicast[i].addr_state != addr_state) ||
   25508:	68b9      	ldr	r1, [r7, #8]
   2550a:	68fa      	ldr	r2, [r7, #12]
   2550c:	4613      	mov	r3, r2
   2550e:	005b      	lsls	r3, r3, #1
   25510:	4413      	add	r3, r2
   25512:	009b      	lsls	r3, r3, #2
   25514:	440b      	add	r3, r1
   25516:	3309      	adds	r3, #9
   25518:	f993 3000 	ldrsb.w	r3, [r3]
		    (addr_state != NET_ADDR_ANY_STATE &&
   2551c:	f997 2003 	ldrsb.w	r2, [r7, #3]
   25520:	429a      	cmp	r2, r3
   25522:	d12a      	bne.n	2557a <if_ipv4_get_addr+0xc8>
		    ipv4->unicast[i].address.family != AF_INET) {
   25524:	68b9      	ldr	r1, [r7, #8]
   25526:	68fa      	ldr	r2, [r7, #12]
   25528:	4613      	mov	r3, r2
   2552a:	005b      	lsls	r3, r3, #1
   2552c:	4413      	add	r3, r2
   2552e:	009b      	lsls	r3, r3, #2
   25530:	440b      	add	r3, r1
   25532:	881b      	ldrh	r3, [r3, #0]
		     ipv4->unicast[i].addr_state != addr_state) ||
   25534:	2b01      	cmp	r3, #1
   25536:	d120      	bne.n	2557a <if_ipv4_get_addr+0xc8>
		if (net_ipv4_is_ll_addr(&ipv4->unicast[i].address.in_addr)) {
   25538:	68fa      	ldr	r2, [r7, #12]
   2553a:	4613      	mov	r3, r2
   2553c:	005b      	lsls	r3, r3, #1
   2553e:	4413      	add	r3, r2
   25540:	009b      	lsls	r3, r3, #2
   25542:	68ba      	ldr	r2, [r7, #8]
   25544:	4413      	add	r3, r2
   25546:	3304      	adds	r3, #4
   25548:	4618      	mov	r0, r3
   2554a:	f7ed fec1 	bl	132d0 <net_ipv4_is_ll_addr>
   2554e:	4603      	mov	r3, r0
   25550:	2b00      	cmp	r3, #0
   25552:	d006      	beq.n	25562 <if_ipv4_get_addr+0xb0>
			if (!ll) {
   25554:	78bb      	ldrb	r3, [r7, #2]
   25556:	f083 0301 	eor.w	r3, r3, #1
   2555a:	b2db      	uxtb	r3, r3
   2555c:	2b00      	cmp	r3, #0
   2555e:	d003      	beq.n	25568 <if_ipv4_get_addr+0xb6>
				continue;
   25560:	e00e      	b.n	25580 <if_ipv4_get_addr+0xce>
			if (ll) {
   25562:	78bb      	ldrb	r3, [r7, #2]
   25564:	2b00      	cmp	r3, #0
   25566:	d10a      	bne.n	2557e <if_ipv4_get_addr+0xcc>
		return &ipv4->unicast[i].address.in_addr;
   25568:	68fa      	ldr	r2, [r7, #12]
   2556a:	4613      	mov	r3, r2
   2556c:	005b      	lsls	r3, r3, #1
   2556e:	4413      	add	r3, r2
   25570:	009b      	lsls	r3, r3, #2
   25572:	68ba      	ldr	r2, [r7, #8]
   25574:	4413      	add	r3, r2
   25576:	3304      	adds	r3, #4
   25578:	e009      	b.n	2558e <if_ipv4_get_addr+0xdc>
			continue;
   2557a:	bf00      	nop
   2557c:	e000      	b.n	25580 <if_ipv4_get_addr+0xce>
				continue;
   2557e:	bf00      	nop
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
   25580:	68fb      	ldr	r3, [r7, #12]
   25582:	3301      	adds	r3, #1
   25584:	60fb      	str	r3, [r7, #12]
   25586:	68fb      	ldr	r3, [r7, #12]
   25588:	2b00      	cmp	r3, #0
   2558a:	ddaa      	ble.n	254e2 <if_ipv4_get_addr+0x30>
	return NULL;
   2558c:	2300      	movs	r3, #0
}
   2558e:	4618      	mov	r0, r3
   25590:	3710      	adds	r7, #16
   25592:	46bd      	mov	sp, r7
   25594:	bd80      	pop	{r7, pc}

00025596 <net_if_ipv4_get_ll>:
{
   25596:	b580      	push	{r7, lr}
   25598:	b082      	sub	sp, #8
   2559a:	af00      	add	r7, sp, #0
   2559c:	6078      	str	r0, [r7, #4]
   2559e:	460b      	mov	r3, r1
   255a0:	70fb      	strb	r3, [r7, #3]
	return if_ipv4_get_addr(iface, addr_state, true);
   255a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
   255a6:	2201      	movs	r2, #1
   255a8:	4619      	mov	r1, r3
   255aa:	6878      	ldr	r0, [r7, #4]
   255ac:	f7ff ff81 	bl	254b2 <if_ipv4_get_addr>
   255b0:	4603      	mov	r3, r0
}
   255b2:	4618      	mov	r0, r3
   255b4:	3708      	adds	r7, #8
   255b6:	46bd      	mov	sp, r7
   255b8:	bd80      	pop	{r7, pc}

000255ba <net_if_ipv4_get_global_addr>:
{
   255ba:	b580      	push	{r7, lr}
   255bc:	b082      	sub	sp, #8
   255be:	af00      	add	r7, sp, #0
   255c0:	6078      	str	r0, [r7, #4]
   255c2:	460b      	mov	r3, r1
   255c4:	70fb      	strb	r3, [r7, #3]
	return if_ipv4_get_addr(iface, addr_state, false);
   255c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
   255ca:	2200      	movs	r2, #0
   255cc:	4619      	mov	r1, r3
   255ce:	6878      	ldr	r0, [r7, #4]
   255d0:	f7ff ff6f 	bl	254b2 <if_ipv4_get_addr>
   255d4:	4603      	mov	r3, r0
}
   255d6:	4618      	mov	r0, r3
   255d8:	3708      	adds	r7, #8
   255da:	46bd      	mov	sp, r7
   255dc:	bd80      	pop	{r7, pc}

000255de <ipv4_addr_find>:
{
   255de:	b580      	push	{r7, lr}
   255e0:	b084      	sub	sp, #16
   255e2:	af00      	add	r7, sp, #0
   255e4:	6078      	str	r0, [r7, #4]
   255e6:	6039      	str	r1, [r7, #0]
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
   255e8:	687b      	ldr	r3, [r7, #4]
   255ea:	685b      	ldr	r3, [r3, #4]
   255ec:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
   255ee:	2300      	movs	r3, #0
   255f0:	60fb      	str	r3, [r7, #12]
   255f2:	e028      	b.n	25646 <ipv4_addr_find+0x68>
		if (!ipv4->unicast[i].is_used) {
   255f4:	68b9      	ldr	r1, [r7, #8]
   255f6:	68fa      	ldr	r2, [r7, #12]
   255f8:	4613      	mov	r3, r2
   255fa:	005b      	lsls	r3, r3, #1
   255fc:	4413      	add	r3, r2
   255fe:	009b      	lsls	r3, r3, #2
   25600:	440b      	add	r3, r1
   25602:	3308      	adds	r3, #8
   25604:	789b      	ldrb	r3, [r3, #2]
   25606:	f3c3 0340 	ubfx	r3, r3, #1, #1
   2560a:	b2db      	uxtb	r3, r3
   2560c:	2b00      	cmp	r3, #0
   2560e:	d016      	beq.n	2563e <ipv4_addr_find+0x60>
				      &ipv4->unicast[i].address.in_addr)) {
   25610:	68fa      	ldr	r2, [r7, #12]
   25612:	4613      	mov	r3, r2
   25614:	005b      	lsls	r3, r3, #1
   25616:	4413      	add	r3, r2
   25618:	009b      	lsls	r3, r3, #2
   2561a:	68ba      	ldr	r2, [r7, #8]
   2561c:	4413      	add	r3, r2
   2561e:	3304      	adds	r3, #4
		if (net_ipv4_addr_cmp(addr,
   25620:	4619      	mov	r1, r3
   25622:	6838      	ldr	r0, [r7, #0]
   25624:	f7ff fc30 	bl	24e88 <net_ipv4_addr_cmp>
   25628:	4603      	mov	r3, r0
   2562a:	2b00      	cmp	r3, #0
   2562c:	d008      	beq.n	25640 <ipv4_addr_find+0x62>
			return &ipv4->unicast[i];
   2562e:	68fa      	ldr	r2, [r7, #12]
   25630:	4613      	mov	r3, r2
   25632:	005b      	lsls	r3, r3, #1
   25634:	4413      	add	r3, r2
   25636:	009b      	lsls	r3, r3, #2
   25638:	68ba      	ldr	r2, [r7, #8]
   2563a:	4413      	add	r3, r2
   2563c:	e007      	b.n	2564e <ipv4_addr_find+0x70>
			continue;
   2563e:	bf00      	nop
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
   25640:	68fb      	ldr	r3, [r7, #12]
   25642:	3301      	adds	r3, #1
   25644:	60fb      	str	r3, [r7, #12]
   25646:	68fb      	ldr	r3, [r7, #12]
   25648:	2b00      	cmp	r3, #0
   2564a:	ddd3      	ble.n	255f4 <ipv4_addr_find+0x16>
	return NULL;
   2564c:	2300      	movs	r3, #0
}
   2564e:	4618      	mov	r0, r3
   25650:	3710      	adds	r7, #16
   25652:	46bd      	mov	sp, r7
   25654:	bd80      	pop	{r7, pc}

00025656 <ipv4_maddr_find>:
{
   25656:	b580      	push	{r7, lr}
   25658:	b086      	sub	sp, #24
   2565a:	af00      	add	r7, sp, #0
   2565c:	60f8      	str	r0, [r7, #12]
   2565e:	460b      	mov	r3, r1
   25660:	607a      	str	r2, [r7, #4]
   25662:	72fb      	strb	r3, [r7, #11]
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
   25664:	68fb      	ldr	r3, [r7, #12]
   25666:	685b      	ldr	r3, [r3, #4]
   25668:	613b      	str	r3, [r7, #16]
	if (!ipv4) {
   2566a:	693b      	ldr	r3, [r7, #16]
   2566c:	2b00      	cmp	r3, #0
   2566e:	d101      	bne.n	25674 <ipv4_maddr_find+0x1e>
		return NULL;
   25670:	2300      	movs	r3, #0
   25672:	e051      	b.n	25718 <ipv4_maddr_find+0xc2>
	for (i = 0; i < NET_IF_MAX_IPV4_MADDR; i++) {
   25674:	2300      	movs	r3, #0
   25676:	617b      	str	r3, [r7, #20]
   25678:	e04a      	b.n	25710 <ipv4_maddr_find+0xba>
		if ((is_used && !ipv4->mcast[i].is_used) ||
   2567a:	7afb      	ldrb	r3, [r7, #11]
   2567c:	2b00      	cmp	r3, #0
   2567e:	d00d      	beq.n	2569c <ipv4_maddr_find+0x46>
   25680:	6939      	ldr	r1, [r7, #16]
   25682:	697a      	ldr	r2, [r7, #20]
   25684:	4613      	mov	r3, r2
   25686:	005b      	lsls	r3, r3, #1
   25688:	4413      	add	r3, r2
   2568a:	009b      	lsls	r3, r3, #2
   2568c:	440b      	add	r3, r1
   2568e:	3310      	adds	r3, #16
   25690:	791b      	ldrb	r3, [r3, #4]
   25692:	f3c3 0300 	ubfx	r3, r3, #0, #1
   25696:	b2db      	uxtb	r3, r3
   25698:	2b00      	cmp	r3, #0
   2569a:	d033      	beq.n	25704 <ipv4_maddr_find+0xae>
		    (!is_used && ipv4->mcast[i].is_used)) {
   2569c:	7afb      	ldrb	r3, [r7, #11]
   2569e:	f083 0301 	eor.w	r3, r3, #1
   256a2:	b2db      	uxtb	r3, r3
		if ((is_used && !ipv4->mcast[i].is_used) ||
   256a4:	2b00      	cmp	r3, #0
   256a6:	d00d      	beq.n	256c4 <ipv4_maddr_find+0x6e>
		    (!is_used && ipv4->mcast[i].is_used)) {
   256a8:	6939      	ldr	r1, [r7, #16]
   256aa:	697a      	ldr	r2, [r7, #20]
   256ac:	4613      	mov	r3, r2
   256ae:	005b      	lsls	r3, r3, #1
   256b0:	4413      	add	r3, r2
   256b2:	009b      	lsls	r3, r3, #2
   256b4:	440b      	add	r3, r1
   256b6:	3310      	adds	r3, #16
   256b8:	791b      	ldrb	r3, [r3, #4]
   256ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
   256be:	b2db      	uxtb	r3, r3
   256c0:	2b00      	cmp	r3, #0
   256c2:	d11f      	bne.n	25704 <ipv4_maddr_find+0xae>
		if (addr) {
   256c4:	687b      	ldr	r3, [r7, #4]
   256c6:	2b00      	cmp	r3, #0
   256c8:	d012      	beq.n	256f0 <ipv4_maddr_find+0x9a>
			if (!net_ipv4_addr_cmp(&ipv4->mcast[i].address.in_addr,
   256ca:	697a      	ldr	r2, [r7, #20]
   256cc:	4613      	mov	r3, r2
   256ce:	005b      	lsls	r3, r3, #1
   256d0:	4413      	add	r3, r2
   256d2:	009b      	lsls	r3, r3, #2
   256d4:	3308      	adds	r3, #8
   256d6:	693a      	ldr	r2, [r7, #16]
   256d8:	4413      	add	r3, r2
   256da:	3308      	adds	r3, #8
   256dc:	6879      	ldr	r1, [r7, #4]
   256de:	4618      	mov	r0, r3
   256e0:	f7ff fbd2 	bl	24e88 <net_ipv4_addr_cmp>
   256e4:	4603      	mov	r3, r0
   256e6:	f083 0301 	eor.w	r3, r3, #1
   256ea:	b2db      	uxtb	r3, r3
   256ec:	2b00      	cmp	r3, #0
   256ee:	d10b      	bne.n	25708 <ipv4_maddr_find+0xb2>
		return &ipv4->mcast[i];
   256f0:	697a      	ldr	r2, [r7, #20]
   256f2:	4613      	mov	r3, r2
   256f4:	005b      	lsls	r3, r3, #1
   256f6:	4413      	add	r3, r2
   256f8:	009b      	lsls	r3, r3, #2
   256fa:	3308      	adds	r3, #8
   256fc:	693a      	ldr	r2, [r7, #16]
   256fe:	4413      	add	r3, r2
   25700:	3304      	adds	r3, #4
   25702:	e009      	b.n	25718 <ipv4_maddr_find+0xc2>
			continue;
   25704:	bf00      	nop
   25706:	e000      	b.n	2570a <ipv4_maddr_find+0xb4>
				continue;
   25708:	bf00      	nop
	for (i = 0; i < NET_IF_MAX_IPV4_MADDR; i++) {
   2570a:	697b      	ldr	r3, [r7, #20]
   2570c:	3301      	adds	r3, #1
   2570e:	617b      	str	r3, [r7, #20]
   25710:	697b      	ldr	r3, [r7, #20]
   25712:	2b00      	cmp	r3, #0
   25714:	ddb1      	ble.n	2567a <ipv4_maddr_find+0x24>
	return NULL;
   25716:	2300      	movs	r3, #0
}
   25718:	4618      	mov	r0, r3
   2571a:	3718      	adds	r7, #24
   2571c:	46bd      	mov	sp, r7
   2571e:	bd80      	pop	{r7, pc}

00025720 <net_if_recv_data>:
{
   25720:	b580      	push	{r7, lr}
   25722:	b082      	sub	sp, #8
   25724:	af00      	add	r7, sp, #0
   25726:	6078      	str	r0, [r7, #4]
   25728:	6039      	str	r1, [r7, #0]
	return net_if_l2(iface)->recv(iface, pkt);
   2572a:	6878      	ldr	r0, [r7, #4]
   2572c:	f7ff fbc3 	bl	24eb6 <net_if_l2>
   25730:	4603      	mov	r3, r0
   25732:	681b      	ldr	r3, [r3, #0]
   25734:	6839      	ldr	r1, [r7, #0]
   25736:	6878      	ldr	r0, [r7, #4]
   25738:	4798      	blx	r3
   2573a:	4603      	mov	r3, r0
}
   2573c:	4618      	mov	r0, r3
   2573e:	3708      	adds	r7, #8
   25740:	46bd      	mov	sp, r7
   25742:	bd80      	pop	{r7, pc}

00025744 <net_if_need_calc_tx_checksum>:
{
   25744:	b580      	push	{r7, lr}
   25746:	b082      	sub	sp, #8
   25748:	af00      	add	r7, sp, #0
   2574a:	6078      	str	r0, [r7, #4]
	return need_calc_checksum(iface, ETHERNET_HW_TX_CHKSUM_OFFLOAD);
   2574c:	2101      	movs	r1, #1
   2574e:	6878      	ldr	r0, [r7, #4]
   25750:	f7ee f8b0 	bl	138b4 <need_calc_checksum>
   25754:	4603      	mov	r3, r0
}
   25756:	4618      	mov	r0, r3
   25758:	3708      	adds	r7, #8
   2575a:	46bd      	mov	sp, r7
   2575c:	bd80      	pop	{r7, pc}

0002575e <net_if_need_calc_rx_checksum>:
{
   2575e:	b580      	push	{r7, lr}
   25760:	b082      	sub	sp, #8
   25762:	af00      	add	r7, sp, #0
   25764:	6078      	str	r0, [r7, #4]
	return need_calc_checksum(iface, ETHERNET_HW_RX_CHKSUM_OFFLOAD);
   25766:	2102      	movs	r1, #2
   25768:	6878      	ldr	r0, [r7, #4]
   2576a:	f7ee f8a3 	bl	138b4 <need_calc_checksum>
   2576e:	4603      	mov	r3, r0
}
   25770:	4618      	mov	r0, r3
   25772:	3708      	adds	r7, #8
   25774:	46bd      	mov	sp, r7
   25776:	bd80      	pop	{r7, pc}

00025778 <atomic_cas>:
{
   25778:	b490      	push	{r4, r7}
   2577a:	b084      	sub	sp, #16
   2577c:	af00      	add	r7, sp, #0
   2577e:	60f8      	str	r0, [r7, #12]
   25780:	60b9      	str	r1, [r7, #8]
   25782:	607a      	str	r2, [r7, #4]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   25784:	687c      	ldr	r4, [r7, #4]
   25786:	68fa      	ldr	r2, [r7, #12]
   25788:	f107 0308 	add.w	r3, r7, #8
   2578c:	6818      	ldr	r0, [r3, #0]
   2578e:	f3bf 8f5b 	dmb	ish
   25792:	e852 1f00 	ldrex	r1, [r2]
   25796:	4281      	cmp	r1, r0
   25798:	d106      	bne.n	257a8 <atomic_cas+0x30>
   2579a:	e842 4c00 	strex	ip, r4, [r2]
   2579e:	f1bc 0f00 	cmp.w	ip, #0
   257a2:	f1bc 0f00 	cmp.w	ip, #0
   257a6:	d1f4      	bne.n	25792 <atomic_cas+0x1a>
   257a8:	f3bf 8f5b 	dmb	ish
   257ac:	bf0c      	ite	eq
   257ae:	2201      	moveq	r2, #1
   257b0:	2200      	movne	r2, #0
   257b2:	2a00      	cmp	r2, #0
   257b4:	d100      	bne.n	257b8 <atomic_cas+0x40>
   257b6:	6019      	str	r1, [r3, #0]
   257b8:	4613      	mov	r3, r2
}
   257ba:	4618      	mov	r0, r3
   257bc:	3710      	adds	r7, #16
   257be:	46bd      	mov	sp, r7
   257c0:	bc90      	pop	{r4, r7}
   257c2:	4770      	bx	lr

000257c4 <atomic_get>:
{
   257c4:	b480      	push	{r7}
   257c6:	b083      	sub	sp, #12
   257c8:	af00      	add	r7, sp, #0
   257ca:	6078      	str	r0, [r7, #4]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   257cc:	687b      	ldr	r3, [r7, #4]
   257ce:	f3bf 8f5b 	dmb	ish
   257d2:	681b      	ldr	r3, [r3, #0]
   257d4:	f3bf 8f5b 	dmb	ish
}
   257d8:	4618      	mov	r0, r3
   257da:	370c      	adds	r7, #12
   257dc:	46bd      	mov	sp, r7
   257de:	bc80      	pop	{r7}
   257e0:	4770      	bx	lr

000257e2 <_is_user_context>:
{
   257e2:	b480      	push	{r7}
   257e4:	af00      	add	r7, sp, #0
	return false;
   257e6:	2300      	movs	r3, #0
}
   257e8:	4618      	mov	r0, r3
   257ea:	46bd      	mov	sp, r7
   257ec:	bc80      	pop	{r7}
   257ee:	4770      	bx	lr

000257f0 <k_uptime_get_32>:
{
   257f0:	b598      	push	{r3, r4, r7, lr}
   257f2:	af00      	add	r7, sp, #0
	return (u32_t)k_uptime_get();
   257f4:	f000 f804 	bl	25800 <k_uptime_get>
   257f8:	4603      	mov	r3, r0
   257fa:	460c      	mov	r4, r1
}
   257fc:	4618      	mov	r0, r3
   257fe:	bd98      	pop	{r3, r4, r7, pc}

00025800 <k_uptime_get>:
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   25800:	b598      	push	{r3, r4, r7, lr}
   25802:	af00      	add	r7, sp, #0
   25804:	f006 fba9 	bl	2bf5a <z_impl_k_uptime_get>
   25808:	4603      	mov	r3, r0
   2580a:	460c      	mov	r4, r1
   2580c:	4618      	mov	r0, r3
   2580e:	4621      	mov	r1, r4
   25810:	bd98      	pop	{r3, r4, r7, pc}

00025812 <net_buf_frags_len>:
{
   25812:	b480      	push	{r7}
   25814:	b085      	sub	sp, #20
   25816:	af00      	add	r7, sp, #0
   25818:	6078      	str	r0, [r7, #4]
	size_t bytes = 0;
   2581a:	2300      	movs	r3, #0
   2581c:	60fb      	str	r3, [r7, #12]
	while (buf) {
   2581e:	e008      	b.n	25832 <net_buf_frags_len+0x20>
		bytes += buf->len;
   25820:	687b      	ldr	r3, [r7, #4]
   25822:	899b      	ldrh	r3, [r3, #12]
   25824:	461a      	mov	r2, r3
   25826:	68fb      	ldr	r3, [r7, #12]
   25828:	4413      	add	r3, r2
   2582a:	60fb      	str	r3, [r7, #12]
		buf = buf->frags;
   2582c:	687b      	ldr	r3, [r7, #4]
   2582e:	681b      	ldr	r3, [r3, #0]
   25830:	607b      	str	r3, [r7, #4]
	while (buf) {
   25832:	687b      	ldr	r3, [r7, #4]
   25834:	2b00      	cmp	r3, #0
   25836:	d1f3      	bne.n	25820 <net_buf_frags_len+0xe>
	return bytes;
   25838:	68fb      	ldr	r3, [r7, #12]
}
   2583a:	4618      	mov	r0, r3
   2583c:	3714      	adds	r7, #20
   2583e:	46bd      	mov	sp, r7
   25840:	bc80      	pop	{r7}
   25842:	4770      	bx	lr

00025844 <net_if_l2>:
{
   25844:	b480      	push	{r7}
   25846:	b083      	sub	sp, #12
   25848:	af00      	add	r7, sp, #0
   2584a:	6078      	str	r0, [r7, #4]
	return iface->if_dev->l2;
   2584c:	687b      	ldr	r3, [r7, #4]
   2584e:	681b      	ldr	r3, [r3, #0]
   25850:	685b      	ldr	r3, [r3, #4]
}
   25852:	4618      	mov	r0, r3
   25854:	370c      	adds	r7, #12
   25856:	46bd      	mov	sp, r7
   25858:	bc80      	pop	{r7}
   2585a:	4770      	bx	lr

0002585c <net_if_get_link_addr>:
{
   2585c:	b480      	push	{r7}
   2585e:	b083      	sub	sp, #12
   25860:	af00      	add	r7, sp, #0
   25862:	6078      	str	r0, [r7, #4]
	return &iface->if_dev->link_addr;
   25864:	687b      	ldr	r3, [r7, #4]
   25866:	681b      	ldr	r3, [r3, #0]
   25868:	3310      	adds	r3, #16
}
   2586a:	4618      	mov	r0, r3
   2586c:	370c      	adds	r7, #12
   2586e:	46bd      	mov	sp, r7
   25870:	bc80      	pop	{r7}
   25872:	4770      	bx	lr

00025874 <net_if_get_mtu>:
 * @param iface Pointer to a network interface structure
 *
 * @return the MTU
 */
static inline u16_t net_if_get_mtu(struct net_if *iface)
{
   25874:	b480      	push	{r7}
   25876:	b083      	sub	sp, #12
   25878:	af00      	add	r7, sp, #0
   2587a:	6078      	str	r0, [r7, #4]
	return iface->if_dev->mtu;
   2587c:	687b      	ldr	r3, [r7, #4]
   2587e:	681b      	ldr	r3, [r3, #0]
   25880:	8b1b      	ldrh	r3, [r3, #24]
}
   25882:	4618      	mov	r0, r3
   25884:	370c      	adds	r7, #12
   25886:	46bd      	mov	sp, r7
   25888:	bc80      	pop	{r7}
   2588a:	4770      	bx	lr

0002588c <net_pkt_iface>:
{
   2588c:	b480      	push	{r7}
   2588e:	b083      	sub	sp, #12
   25890:	af00      	add	r7, sp, #0
   25892:	6078      	str	r0, [r7, #4]
	return pkt->iface;
   25894:	687b      	ldr	r3, [r7, #4]
   25896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   25898:	4618      	mov	r0, r3
   2589a:	370c      	adds	r7, #12
   2589c:	46bd      	mov	sp, r7
   2589e:	bc80      	pop	{r7}
   258a0:	4770      	bx	lr

000258a2 <net_pkt_set_iface>:
{
   258a2:	b580      	push	{r7, lr}
   258a4:	b082      	sub	sp, #8
   258a6:	af00      	add	r7, sp, #0
   258a8:	6078      	str	r0, [r7, #4]
   258aa:	6039      	str	r1, [r7, #0]
	pkt->iface = iface;
   258ac:	687b      	ldr	r3, [r7, #4]
   258ae:	683a      	ldr	r2, [r7, #0]
   258b0:	625a      	str	r2, [r3, #36]	; 0x24
	if (iface) {
   258b2:	683b      	ldr	r3, [r7, #0]
   258b4:	2b00      	cmp	r3, #0
   258b6:	d00f      	beq.n	258d8 <net_pkt_set_iface+0x36>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   258b8:	6838      	ldr	r0, [r7, #0]
   258ba:	f7ff ffcf 	bl	2585c <net_if_get_link_addr>
   258be:	4603      	mov	r3, r0
   258c0:	795a      	ldrb	r2, [r3, #5]
   258c2:	687b      	ldr	r3, [r7, #4]
   258c4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   258c8:	6838      	ldr	r0, [r7, #0]
   258ca:	f7ff ffc7 	bl	2585c <net_if_get_link_addr>
   258ce:	4603      	mov	r3, r0
   258d0:	795a      	ldrb	r2, [r3, #5]
   258d2:	687b      	ldr	r3, [r7, #4]
   258d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
   258d8:	bf00      	nop
   258da:	3708      	adds	r7, #8
   258dc:	46bd      	mov	sp, r7
   258de:	bd80      	pop	{r7, pc}

000258e0 <net_pkt_family>:
{
   258e0:	b480      	push	{r7}
   258e2:	b083      	sub	sp, #12
   258e4:	af00      	add	r7, sp, #0
   258e6:	6078      	str	r0, [r7, #4]
	return pkt->family;
   258e8:	687b      	ldr	r3, [r7, #4]
   258ea:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
   258ee:	f3c3 0342 	ubfx	r3, r3, #1, #3
   258f2:	b2db      	uxtb	r3, r3
}
   258f4:	4618      	mov	r0, r3
   258f6:	370c      	adds	r7, #12
   258f8:	46bd      	mov	sp, r7
   258fa:	bc80      	pop	{r7}
   258fc:	4770      	bx	lr

000258fe <net_pkt_set_family>:
{
   258fe:	b480      	push	{r7}
   25900:	b083      	sub	sp, #12
   25902:	af00      	add	r7, sp, #0
   25904:	6078      	str	r0, [r7, #4]
   25906:	460b      	mov	r3, r1
   25908:	70fb      	strb	r3, [r7, #3]
	pkt->family = family;
   2590a:	78fb      	ldrb	r3, [r7, #3]
   2590c:	f003 0307 	and.w	r3, r3, #7
   25910:	b2d9      	uxtb	r1, r3
   25912:	687a      	ldr	r2, [r7, #4]
   25914:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
   25918:	f361 0343 	bfi	r3, r1, #1, #3
   2591c:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
}
   25920:	bf00      	nop
   25922:	370c      	adds	r7, #12
   25924:	46bd      	mov	sp, r7
   25926:	bc80      	pop	{r7}
   25928:	4770      	bx	lr

0002592a <net_pkt_set_vlan_tag>:
{
   2592a:	b480      	push	{r7}
   2592c:	b083      	sub	sp, #12
   2592e:	af00      	add	r7, sp, #0
   25930:	6078      	str	r0, [r7, #4]
   25932:	460b      	mov	r3, r1
   25934:	807b      	strh	r3, [r7, #2]
}
   25936:	bf00      	nop
   25938:	370c      	adds	r7, #12
   2593a:	46bd      	mov	sp, r7
   2593c:	bc80      	pop	{r7}
   2593e:	4770      	bx	lr

00025940 <net_pkt_get_len>:
{
   25940:	b580      	push	{r7, lr}
   25942:	b082      	sub	sp, #8
   25944:	af00      	add	r7, sp, #0
   25946:	6078      	str	r0, [r7, #4]
	return net_buf_frags_len(pkt->frags);
   25948:	687b      	ldr	r3, [r7, #4]
   2594a:	695b      	ldr	r3, [r3, #20]
   2594c:	4618      	mov	r0, r3
   2594e:	f7ff ff60 	bl	25812 <net_buf_frags_len>
   25952:	4603      	mov	r3, r0
}
   25954:	4618      	mov	r0, r3
   25956:	3708      	adds	r7, #8
   25958:	46bd      	mov	sp, r7
   2595a:	bd80      	pop	{r7, pc}

0002595c <net_pkt_is_being_overwritten>:
{
   2595c:	b480      	push	{r7}
   2595e:	b083      	sub	sp, #12
   25960:	af00      	add	r7, sp, #0
   25962:	6078      	str	r0, [r7, #4]
	return pkt->overwrite;
   25964:	687b      	ldr	r3, [r7, #4]
   25966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   2596a:	f3c3 0300 	ubfx	r3, r3, #0, #1
   2596e:	b2db      	uxtb	r3, r3
   25970:	2b00      	cmp	r3, #0
   25972:	bf14      	ite	ne
   25974:	2301      	movne	r3, #1
   25976:	2300      	moveq	r3, #0
   25978:	b2db      	uxtb	r3, r3
}
   2597a:	4618      	mov	r0, r3
   2597c:	370c      	adds	r7, #12
   2597e:	46bd      	mov	sp, r7
   25980:	bc80      	pop	{r7}
   25982:	4770      	bx	lr

00025984 <net_pkt_cursor_backup>:
{
   25984:	b480      	push	{r7}
   25986:	b083      	sub	sp, #12
   25988:	af00      	add	r7, sp, #0
   2598a:	6078      	str	r0, [r7, #4]
   2598c:	6039      	str	r1, [r7, #0]
	backup->buf = pkt->cursor.buf;
   2598e:	687b      	ldr	r3, [r7, #4]
   25990:	699a      	ldr	r2, [r3, #24]
   25992:	683b      	ldr	r3, [r7, #0]
   25994:	601a      	str	r2, [r3, #0]
	backup->pos = pkt->cursor.pos;
   25996:	687b      	ldr	r3, [r7, #4]
   25998:	69da      	ldr	r2, [r3, #28]
   2599a:	683b      	ldr	r3, [r7, #0]
   2599c:	605a      	str	r2, [r3, #4]
}
   2599e:	bf00      	nop
   259a0:	370c      	adds	r7, #12
   259a2:	46bd      	mov	sp, r7
   259a4:	bc80      	pop	{r7}
   259a6:	4770      	bx	lr

000259a8 <net_pkt_cursor_restore>:
{
   259a8:	b480      	push	{r7}
   259aa:	b083      	sub	sp, #12
   259ac:	af00      	add	r7, sp, #0
   259ae:	6078      	str	r0, [r7, #4]
   259b0:	6039      	str	r1, [r7, #0]
	pkt->cursor.buf = backup->buf;
   259b2:	683b      	ldr	r3, [r7, #0]
   259b4:	681a      	ldr	r2, [r3, #0]
   259b6:	687b      	ldr	r3, [r7, #4]
   259b8:	619a      	str	r2, [r3, #24]
	pkt->cursor.pos = backup->pos;
   259ba:	683b      	ldr	r3, [r7, #0]
   259bc:	685a      	ldr	r2, [r3, #4]
   259be:	687b      	ldr	r3, [r7, #4]
   259c0:	61da      	str	r2, [r3, #28]
}
   259c2:	bf00      	nop
   259c4:	370c      	adds	r7, #12
   259c6:	46bd      	mov	sp, r7
   259c8:	bc80      	pop	{r7}
   259ca:	4770      	bx	lr

000259cc <net_pkt_get_reserve_data>:
{
   259cc:	b580      	push	{r7, lr}
   259ce:	b084      	sub	sp, #16
   259d0:	af00      	add	r7, sp, #0
   259d2:	6078      	str	r0, [r7, #4]
   259d4:	6039      	str	r1, [r7, #0]
	if (k_is_in_isr()) {
   259d6:	f7f2 f987 	bl	17ce8 <k_is_in_isr>
   259da:	4603      	mov	r3, r0
   259dc:	2b00      	cmp	r3, #0
   259de:	d005      	beq.n	259ec <net_pkt_get_reserve_data+0x20>
		frag = net_buf_alloc(pool, K_NO_WAIT);
   259e0:	2100      	movs	r1, #0
   259e2:	6878      	ldr	r0, [r7, #4]
   259e4:	f7fc f90d 	bl	21c02 <net_buf_alloc_fixed>
   259e8:	60f8      	str	r0, [r7, #12]
   259ea:	e004      	b.n	259f6 <net_pkt_get_reserve_data+0x2a>
		frag = net_buf_alloc(pool, timeout);
   259ec:	6839      	ldr	r1, [r7, #0]
   259ee:	6878      	ldr	r0, [r7, #4]
   259f0:	f7fc f907 	bl	21c02 <net_buf_alloc_fixed>
   259f4:	60f8      	str	r0, [r7, #12]
	if (!frag) {
   259f6:	68fb      	ldr	r3, [r7, #12]
   259f8:	2b00      	cmp	r3, #0
   259fa:	d101      	bne.n	25a00 <net_pkt_get_reserve_data+0x34>
		return NULL;
   259fc:	2300      	movs	r3, #0
   259fe:	e000      	b.n	25a02 <net_pkt_get_reserve_data+0x36>
	return frag;
   25a00:	68fb      	ldr	r3, [r7, #12]
}
   25a02:	4618      	mov	r0, r3
   25a04:	3710      	adds	r7, #16
   25a06:	46bd      	mov	sp, r7
   25a08:	bd80      	pop	{r7, pc}

00025a0a <net_pkt_unref>:
{
   25a0a:	b580      	push	{r7, lr}
   25a0c:	b084      	sub	sp, #16
   25a0e:	af00      	add	r7, sp, #0
   25a10:	6078      	str	r0, [r7, #4]
	if (!pkt) {
   25a12:	687b      	ldr	r3, [r7, #4]
   25a14:	2b00      	cmp	r3, #0
   25a16:	d02b      	beq.n	25a70 <net_pkt_unref+0x66>
		ref = atomic_get(&pkt->atomic_ref);
   25a18:	687b      	ldr	r3, [r7, #4]
   25a1a:	3328      	adds	r3, #40	; 0x28
   25a1c:	4618      	mov	r0, r3
   25a1e:	f7ff fed1 	bl	257c4 <atomic_get>
   25a22:	60f8      	str	r0, [r7, #12]
		if (!ref) {
   25a24:	68fb      	ldr	r3, [r7, #12]
   25a26:	2b00      	cmp	r3, #0
   25a28:	d024      	beq.n	25a74 <net_pkt_unref+0x6a>
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref - 1));
   25a2a:	687b      	ldr	r3, [r7, #4]
   25a2c:	f103 0028 	add.w	r0, r3, #40	; 0x28
   25a30:	68fb      	ldr	r3, [r7, #12]
   25a32:	3b01      	subs	r3, #1
   25a34:	461a      	mov	r2, r3
   25a36:	68f9      	ldr	r1, [r7, #12]
   25a38:	f7ff fe9e 	bl	25778 <atomic_cas>
   25a3c:	4603      	mov	r3, r0
   25a3e:	f083 0301 	eor.w	r3, r3, #1
   25a42:	b2db      	uxtb	r3, r3
   25a44:	2b00      	cmp	r3, #0
   25a46:	d1e7      	bne.n	25a18 <net_pkt_unref+0xe>
	if (ref > 1) {
   25a48:	68fb      	ldr	r3, [r7, #12]
   25a4a:	2b01      	cmp	r3, #1
   25a4c:	dc14      	bgt.n	25a78 <net_pkt_unref+0x6e>
	if (pkt->frags) {
   25a4e:	687b      	ldr	r3, [r7, #4]
   25a50:	695b      	ldr	r3, [r3, #20]
   25a52:	2b00      	cmp	r3, #0
   25a54:	d004      	beq.n	25a60 <net_pkt_unref+0x56>
		net_pkt_frag_unref(pkt->frags);
   25a56:	687b      	ldr	r3, [r7, #4]
   25a58:	695b      	ldr	r3, [r3, #20]
   25a5a:	4618      	mov	r0, r3
   25a5c:	f000 f839 	bl	25ad2 <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
   25a60:	687b      	ldr	r3, [r7, #4]
   25a62:	691b      	ldr	r3, [r3, #16]
   25a64:	1d3a      	adds	r2, r7, #4
   25a66:	4611      	mov	r1, r2
   25a68:	4618      	mov	r0, r3
   25a6a:	f7f0 fe97 	bl	1679c <k_mem_slab_free>
   25a6e:	e004      	b.n	25a7a <net_pkt_unref+0x70>
		return;
   25a70:	bf00      	nop
   25a72:	e002      	b.n	25a7a <net_pkt_unref+0x70>
			return;
   25a74:	bf00      	nop
   25a76:	e000      	b.n	25a7a <net_pkt_unref+0x70>
		return;
   25a78:	bf00      	nop
}
   25a7a:	3710      	adds	r7, #16
   25a7c:	46bd      	mov	sp, r7
   25a7e:	bd80      	pop	{r7, pc}

00025a80 <net_pkt_ref>:
{
   25a80:	b580      	push	{r7, lr}
   25a82:	b084      	sub	sp, #16
   25a84:	af00      	add	r7, sp, #0
   25a86:	6078      	str	r0, [r7, #4]
		ref = pkt ? atomic_get(&pkt->atomic_ref) : 0;
   25a88:	687b      	ldr	r3, [r7, #4]
   25a8a:	2b00      	cmp	r3, #0
   25a8c:	d006      	beq.n	25a9c <net_pkt_ref+0x1c>
   25a8e:	687b      	ldr	r3, [r7, #4]
   25a90:	3328      	adds	r3, #40	; 0x28
   25a92:	4618      	mov	r0, r3
   25a94:	f7ff fe96 	bl	257c4 <atomic_get>
   25a98:	4603      	mov	r3, r0
   25a9a:	e000      	b.n	25a9e <net_pkt_ref+0x1e>
   25a9c:	2300      	movs	r3, #0
   25a9e:	60fb      	str	r3, [r7, #12]
		if (!ref) {
   25aa0:	68fb      	ldr	r3, [r7, #12]
   25aa2:	2b00      	cmp	r3, #0
   25aa4:	d101      	bne.n	25aaa <net_pkt_ref+0x2a>
			return NULL;
   25aa6:	2300      	movs	r3, #0
   25aa8:	e00f      	b.n	25aca <net_pkt_ref+0x4a>
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref + 1));
   25aaa:	687b      	ldr	r3, [r7, #4]
   25aac:	f103 0028 	add.w	r0, r3, #40	; 0x28
   25ab0:	68fb      	ldr	r3, [r7, #12]
   25ab2:	3301      	adds	r3, #1
   25ab4:	461a      	mov	r2, r3
   25ab6:	68f9      	ldr	r1, [r7, #12]
   25ab8:	f7ff fe5e 	bl	25778 <atomic_cas>
   25abc:	4603      	mov	r3, r0
   25abe:	f083 0301 	eor.w	r3, r3, #1
   25ac2:	b2db      	uxtb	r3, r3
   25ac4:	2b00      	cmp	r3, #0
   25ac6:	d1df      	bne.n	25a88 <net_pkt_ref+0x8>
	return pkt;
   25ac8:	687b      	ldr	r3, [r7, #4]
}
   25aca:	4618      	mov	r0, r3
   25acc:	3710      	adds	r7, #16
   25ace:	46bd      	mov	sp, r7
   25ad0:	bd80      	pop	{r7, pc}

00025ad2 <net_pkt_frag_unref>:
{
   25ad2:	b580      	push	{r7, lr}
   25ad4:	b082      	sub	sp, #8
   25ad6:	af00      	add	r7, sp, #0
   25ad8:	6078      	str	r0, [r7, #4]
	if (!frag) {
   25ada:	687b      	ldr	r3, [r7, #4]
   25adc:	2b00      	cmp	r3, #0
   25ade:	d003      	beq.n	25ae8 <net_pkt_frag_unref+0x16>
	net_buf_unref(frag);
   25ae0:	6878      	ldr	r0, [r7, #4]
   25ae2:	f7fc f8a3 	bl	21c2c <net_buf_unref>
   25ae6:	e000      	b.n	25aea <net_pkt_frag_unref+0x18>
		return;
   25ae8:	bf00      	nop
}
   25aea:	3708      	adds	r7, #8
   25aec:	46bd      	mov	sp, r7
   25aee:	bd80      	pop	{r7, pc}

00025af0 <net_pkt_frag_insert>:
{
   25af0:	b580      	push	{r7, lr}
   25af2:	b082      	sub	sp, #8
   25af4:	af00      	add	r7, sp, #0
   25af6:	6078      	str	r0, [r7, #4]
   25af8:	6039      	str	r1, [r7, #0]
	net_buf_frag_last(frag)->frags = pkt->frags;
   25afa:	6838      	ldr	r0, [r7, #0]
   25afc:	f7fc f8d7 	bl	21cae <net_buf_frag_last>
   25b00:	4602      	mov	r2, r0
   25b02:	687b      	ldr	r3, [r7, #4]
   25b04:	695b      	ldr	r3, [r3, #20]
   25b06:	6013      	str	r3, [r2, #0]
	pkt->frags = frag;
   25b08:	687b      	ldr	r3, [r7, #4]
   25b0a:	683a      	ldr	r2, [r7, #0]
   25b0c:	615a      	str	r2, [r3, #20]
}
   25b0e:	bf00      	nop
   25b10:	3708      	adds	r7, #8
   25b12:	46bd      	mov	sp, r7
   25b14:	bd80      	pop	{r7, pc}

00025b16 <pkt_alloc_buffer>:
{
   25b16:	b580      	push	{r7, lr}
   25b18:	b08a      	sub	sp, #40	; 0x28
   25b1a:	af00      	add	r7, sp, #0
   25b1c:	60f8      	str	r0, [r7, #12]
   25b1e:	60b9      	str	r1, [r7, #8]
   25b20:	607a      	str	r2, [r7, #4]
	u32_t alloc_start = k_uptime_get_32();
   25b22:	f7ff fe65 	bl	257f0 <k_uptime_get_32>
   25b26:	61f8      	str	r0, [r7, #28]
	struct net_buf *first = NULL;
   25b28:	2300      	movs	r3, #0
   25b2a:	627b      	str	r3, [r7, #36]	; 0x24
	struct net_buf *current = NULL;
   25b2c:	2300      	movs	r3, #0
   25b2e:	623b      	str	r3, [r7, #32]
	while (size) {
   25b30:	e03a      	b.n	25ba8 <pkt_alloc_buffer+0x92>
		new = net_buf_alloc_fixed(pool, timeout);
   25b32:	6879      	ldr	r1, [r7, #4]
   25b34:	68f8      	ldr	r0, [r7, #12]
   25b36:	f7fc f864 	bl	21c02 <net_buf_alloc_fixed>
   25b3a:	61b8      	str	r0, [r7, #24]
		if (!new) {
   25b3c:	69bb      	ldr	r3, [r7, #24]
   25b3e:	2b00      	cmp	r3, #0
   25b40:	d037      	beq.n	25bb2 <pkt_alloc_buffer+0x9c>
		if (!first && !current) {
   25b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25b44:	2b00      	cmp	r3, #0
   25b46:	d105      	bne.n	25b54 <pkt_alloc_buffer+0x3e>
   25b48:	6a3b      	ldr	r3, [r7, #32]
   25b4a:	2b00      	cmp	r3, #0
   25b4c:	d102      	bne.n	25b54 <pkt_alloc_buffer+0x3e>
			first = new;
   25b4e:	69bb      	ldr	r3, [r7, #24]
   25b50:	627b      	str	r3, [r7, #36]	; 0x24
   25b52:	e002      	b.n	25b5a <pkt_alloc_buffer+0x44>
			current->frags = new;
   25b54:	6a3b      	ldr	r3, [r7, #32]
   25b56:	69ba      	ldr	r2, [r7, #24]
   25b58:	601a      	str	r2, [r3, #0]
		current = new;
   25b5a:	69bb      	ldr	r3, [r7, #24]
   25b5c:	623b      	str	r3, [r7, #32]
		if (current->size > size) {
   25b5e:	6a3b      	ldr	r3, [r7, #32]
   25b60:	89db      	ldrh	r3, [r3, #14]
   25b62:	461a      	mov	r2, r3
   25b64:	68bb      	ldr	r3, [r7, #8]
   25b66:	4293      	cmp	r3, r2
   25b68:	d203      	bcs.n	25b72 <pkt_alloc_buffer+0x5c>
			current->size = size;
   25b6a:	68bb      	ldr	r3, [r7, #8]
   25b6c:	b29a      	uxth	r2, r3
   25b6e:	6a3b      	ldr	r3, [r7, #32]
   25b70:	81da      	strh	r2, [r3, #14]
		size -= current->size;
   25b72:	6a3b      	ldr	r3, [r7, #32]
   25b74:	89db      	ldrh	r3, [r3, #14]
   25b76:	461a      	mov	r2, r3
   25b78:	68bb      	ldr	r3, [r7, #8]
   25b7a:	1a9b      	subs	r3, r3, r2
   25b7c:	60bb      	str	r3, [r7, #8]
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   25b7e:	687b      	ldr	r3, [r7, #4]
   25b80:	2b00      	cmp	r3, #0
   25b82:	d011      	beq.n	25ba8 <pkt_alloc_buffer+0x92>
   25b84:	687b      	ldr	r3, [r7, #4]
   25b86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   25b8a:	d00d      	beq.n	25ba8 <pkt_alloc_buffer+0x92>
			u32_t diff = k_uptime_get_32() - alloc_start;
   25b8c:	f7ff fe30 	bl	257f0 <k_uptime_get_32>
   25b90:	4602      	mov	r2, r0
   25b92:	69fb      	ldr	r3, [r7, #28]
   25b94:	1ad3      	subs	r3, r2, r3
   25b96:	617b      	str	r3, [r7, #20]
			timeout -= MIN(timeout, diff);
   25b98:	687a      	ldr	r2, [r7, #4]
   25b9a:	6879      	ldr	r1, [r7, #4]
   25b9c:	697b      	ldr	r3, [r7, #20]
   25b9e:	428b      	cmp	r3, r1
   25ba0:	bf28      	it	cs
   25ba2:	460b      	movcs	r3, r1
   25ba4:	1ad3      	subs	r3, r2, r3
   25ba6:	607b      	str	r3, [r7, #4]
	while (size) {
   25ba8:	68bb      	ldr	r3, [r7, #8]
   25baa:	2b00      	cmp	r3, #0
   25bac:	d1c1      	bne.n	25b32 <pkt_alloc_buffer+0x1c>
	return first;
   25bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25bb0:	e007      	b.n	25bc2 <pkt_alloc_buffer+0xac>
			goto error;
   25bb2:	bf00      	nop
	if (first) {
   25bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25bb6:	2b00      	cmp	r3, #0
   25bb8:	d002      	beq.n	25bc0 <pkt_alloc_buffer+0xaa>
		net_buf_unref(first);
   25bba:	6a78      	ldr	r0, [r7, #36]	; 0x24
   25bbc:	f7fc f836 	bl	21c2c <net_buf_unref>
	return NULL;
   25bc0:	2300      	movs	r3, #0
}
   25bc2:	4618      	mov	r0, r3
   25bc4:	3728      	adds	r7, #40	; 0x28
   25bc6:	46bd      	mov	sp, r7
   25bc8:	bd80      	pop	{r7, pc}

00025bca <pkt_estimate_headers_length>:
{
   25bca:	b580      	push	{r7, lr}
   25bcc:	b084      	sub	sp, #16
   25bce:	af00      	add	r7, sp, #0
   25bd0:	6078      	str	r0, [r7, #4]
   25bd2:	460b      	mov	r3, r1
   25bd4:	807b      	strh	r3, [r7, #2]
   25bd6:	4613      	mov	r3, r2
   25bd8:	707b      	strb	r3, [r7, #1]
	size_t hdr_len = 0;
   25bda:	2300      	movs	r3, #0
   25bdc:	60fb      	str	r3, [r7, #12]
	if (family == AF_UNSPEC) {
   25bde:	887b      	ldrh	r3, [r7, #2]
   25be0:	2b00      	cmp	r3, #0
   25be2:	d101      	bne.n	25be8 <pkt_estimate_headers_length+0x1e>
		return  0;
   25be4:	2300      	movs	r3, #0
   25be6:	e01a      	b.n	25c1e <pkt_estimate_headers_length+0x54>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   25be8:	887b      	ldrh	r3, [r7, #2]
   25bea:	2b01      	cmp	r3, #1
   25bec:	d102      	bne.n	25bf4 <pkt_estimate_headers_length+0x2a>
		hdr_len += NET_IPV4H_LEN;
   25bee:	68fb      	ldr	r3, [r7, #12]
   25bf0:	3314      	adds	r3, #20
   25bf2:	60fb      	str	r3, [r7, #12]
	} else if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   25bf4:	787b      	ldrb	r3, [r7, #1]
   25bf6:	2b11      	cmp	r3, #17
   25bf8:	d103      	bne.n	25c02 <pkt_estimate_headers_length+0x38>
		hdr_len += NET_UDPH_LEN;
   25bfa:	68fb      	ldr	r3, [r7, #12]
   25bfc:	3308      	adds	r3, #8
   25bfe:	60fb      	str	r3, [r7, #12]
   25c00:	e008      	b.n	25c14 <pkt_estimate_headers_length+0x4a>
	} else if (proto == IPPROTO_ICMP || proto == IPPROTO_ICMPV6) {
   25c02:	787b      	ldrb	r3, [r7, #1]
   25c04:	2b01      	cmp	r3, #1
   25c06:	d002      	beq.n	25c0e <pkt_estimate_headers_length+0x44>
   25c08:	787b      	ldrb	r3, [r7, #1]
   25c0a:	2b3a      	cmp	r3, #58	; 0x3a
   25c0c:	d102      	bne.n	25c14 <pkt_estimate_headers_length+0x4a>
		hdr_len += NET_ICMPH_LEN;
   25c0e:	68fb      	ldr	r3, [r7, #12]
   25c10:	3304      	adds	r3, #4
   25c12:	60fb      	str	r3, [r7, #12]
	NET_DBG("HDRs length estimation %zu", hdr_len);
   25c14:	f7ff fde5 	bl	257e2 <_is_user_context>
   25c18:	4603      	mov	r3, r0
   25c1a:	72fb      	strb	r3, [r7, #11]
	return hdr_len;
   25c1c:	68fb      	ldr	r3, [r7, #12]
}
   25c1e:	4618      	mov	r0, r3
   25c20:	3710      	adds	r7, #16
   25c22:	46bd      	mov	sp, r7
   25c24:	bd80      	pop	{r7, pc}

00025c26 <pkt_get_size>:
{
   25c26:	b480      	push	{r7}
   25c28:	b085      	sub	sp, #20
   25c2a:	af00      	add	r7, sp, #0
   25c2c:	6078      	str	r0, [r7, #4]
	struct net_buf *buf = pkt->buffer;
   25c2e:	687b      	ldr	r3, [r7, #4]
   25c30:	695b      	ldr	r3, [r3, #20]
   25c32:	60fb      	str	r3, [r7, #12]
	size_t size = 0;
   25c34:	2300      	movs	r3, #0
   25c36:	60bb      	str	r3, [r7, #8]
	while (buf) {
   25c38:	e008      	b.n	25c4c <pkt_get_size+0x26>
		size += buf->size;
   25c3a:	68fb      	ldr	r3, [r7, #12]
   25c3c:	89db      	ldrh	r3, [r3, #14]
   25c3e:	461a      	mov	r2, r3
   25c40:	68bb      	ldr	r3, [r7, #8]
   25c42:	4413      	add	r3, r2
   25c44:	60bb      	str	r3, [r7, #8]
		buf = buf->frags;
   25c46:	68fb      	ldr	r3, [r7, #12]
   25c48:	681b      	ldr	r3, [r3, #0]
   25c4a:	60fb      	str	r3, [r7, #12]
	while (buf) {
   25c4c:	68fb      	ldr	r3, [r7, #12]
   25c4e:	2b00      	cmp	r3, #0
   25c50:	d1f3      	bne.n	25c3a <pkt_get_size+0x14>
	return size;
   25c52:	68bb      	ldr	r3, [r7, #8]
}
   25c54:	4618      	mov	r0, r3
   25c56:	3714      	adds	r7, #20
   25c58:	46bd      	mov	sp, r7
   25c5a:	bc80      	pop	{r7}
   25c5c:	4770      	bx	lr

00025c5e <net_pkt_available_buffer>:
{
   25c5e:	b590      	push	{r4, r7, lr}
   25c60:	b083      	sub	sp, #12
   25c62:	af00      	add	r7, sp, #0
   25c64:	6078      	str	r0, [r7, #4]
	if (!pkt) {
   25c66:	687b      	ldr	r3, [r7, #4]
   25c68:	2b00      	cmp	r3, #0
   25c6a:	d101      	bne.n	25c70 <net_pkt_available_buffer+0x12>
		return 0;
   25c6c:	2300      	movs	r3, #0
   25c6e:	e008      	b.n	25c82 <net_pkt_available_buffer+0x24>
	return pkt_get_size(pkt) - net_pkt_get_len(pkt);
   25c70:	6878      	ldr	r0, [r7, #4]
   25c72:	f7ff ffd8 	bl	25c26 <pkt_get_size>
   25c76:	4604      	mov	r4, r0
   25c78:	6878      	ldr	r0, [r7, #4]
   25c7a:	f7ff fe61 	bl	25940 <net_pkt_get_len>
   25c7e:	4603      	mov	r3, r0
   25c80:	1ae3      	subs	r3, r4, r3
}
   25c82:	4618      	mov	r0, r3
   25c84:	370c      	adds	r7, #12
   25c86:	46bd      	mov	sp, r7
   25c88:	bd90      	pop	{r4, r7, pc}

00025c8a <net_pkt_available_payload_buffer>:
{
   25c8a:	b580      	push	{r7, lr}
   25c8c:	b084      	sub	sp, #16
   25c8e:	af00      	add	r7, sp, #0
   25c90:	6078      	str	r0, [r7, #4]
   25c92:	460b      	mov	r3, r1
   25c94:	70fb      	strb	r3, [r7, #3]
	size_t hdr_len = 0;
   25c96:	2300      	movs	r3, #0
   25c98:	60fb      	str	r3, [r7, #12]
	if (!pkt) {
   25c9a:	687b      	ldr	r3, [r7, #4]
   25c9c:	2b00      	cmp	r3, #0
   25c9e:	d101      	bne.n	25ca4 <net_pkt_available_payload_buffer+0x1a>
		return 0;
   25ca0:	2300      	movs	r3, #0
   25ca2:	e020      	b.n	25ce6 <net_pkt_available_payload_buffer+0x5c>
	hdr_len = pkt_estimate_headers_length(pkt, net_pkt_family(pkt), proto);
   25ca4:	6878      	ldr	r0, [r7, #4]
   25ca6:	f7ff fe1b 	bl	258e0 <net_pkt_family>
   25caa:	4603      	mov	r3, r0
   25cac:	b29b      	uxth	r3, r3
   25cae:	78fa      	ldrb	r2, [r7, #3]
   25cb0:	4619      	mov	r1, r3
   25cb2:	6878      	ldr	r0, [r7, #4]
   25cb4:	f7ff ff89 	bl	25bca <pkt_estimate_headers_length>
   25cb8:	60f8      	str	r0, [r7, #12]
	len = net_pkt_get_len(pkt);
   25cba:	6878      	ldr	r0, [r7, #4]
   25cbc:	f7ff fe40 	bl	25940 <net_pkt_get_len>
   25cc0:	60b8      	str	r0, [r7, #8]
	hdr_len = hdr_len <= len ? 0 : hdr_len - len;
   25cc2:	68fa      	ldr	r2, [r7, #12]
   25cc4:	68bb      	ldr	r3, [r7, #8]
   25cc6:	429a      	cmp	r2, r3
   25cc8:	d903      	bls.n	25cd2 <net_pkt_available_payload_buffer+0x48>
   25cca:	68fa      	ldr	r2, [r7, #12]
   25ccc:	68bb      	ldr	r3, [r7, #8]
   25cce:	1ad3      	subs	r3, r2, r3
   25cd0:	e000      	b.n	25cd4 <net_pkt_available_payload_buffer+0x4a>
   25cd2:	2300      	movs	r3, #0
   25cd4:	60fb      	str	r3, [r7, #12]
	len = net_pkt_available_buffer(pkt) - hdr_len;
   25cd6:	6878      	ldr	r0, [r7, #4]
   25cd8:	f7ff ffc1 	bl	25c5e <net_pkt_available_buffer>
   25cdc:	4602      	mov	r2, r0
   25cde:	68fb      	ldr	r3, [r7, #12]
   25ce0:	1ad3      	subs	r3, r2, r3
   25ce2:	60bb      	str	r3, [r7, #8]
	return len;
   25ce4:	68bb      	ldr	r3, [r7, #8]
}
   25ce6:	4618      	mov	r0, r3
   25ce8:	3710      	adds	r7, #16
   25cea:	46bd      	mov	sp, r7
   25cec:	bd80      	pop	{r7, pc}

00025cee <net_pkt_trim_buffer>:
{
   25cee:	b580      	push	{r7, lr}
   25cf0:	b086      	sub	sp, #24
   25cf2:	af00      	add	r7, sp, #0
   25cf4:	6078      	str	r0, [r7, #4]
	buf = pkt->buffer;
   25cf6:	687b      	ldr	r3, [r7, #4]
   25cf8:	695b      	ldr	r3, [r3, #20]
   25cfa:	617b      	str	r3, [r7, #20]
	prev = buf;
   25cfc:	697b      	ldr	r3, [r7, #20]
   25cfe:	613b      	str	r3, [r7, #16]
	while (buf) {
   25d00:	e022      	b.n	25d48 <net_pkt_trim_buffer+0x5a>
		struct net_buf *next = buf->frags;
   25d02:	697b      	ldr	r3, [r7, #20]
   25d04:	681b      	ldr	r3, [r3, #0]
   25d06:	60fb      	str	r3, [r7, #12]
		if (!buf->len) {
   25d08:	697b      	ldr	r3, [r7, #20]
   25d0a:	899b      	ldrh	r3, [r3, #12]
   25d0c:	2b00      	cmp	r3, #0
   25d0e:	d117      	bne.n	25d40 <net_pkt_trim_buffer+0x52>
			if (buf == pkt->buffer) {
   25d10:	687b      	ldr	r3, [r7, #4]
   25d12:	695b      	ldr	r3, [r3, #20]
   25d14:	697a      	ldr	r2, [r7, #20]
   25d16:	429a      	cmp	r2, r3
   25d18:	d103      	bne.n	25d22 <net_pkt_trim_buffer+0x34>
				pkt->buffer = next;
   25d1a:	687b      	ldr	r3, [r7, #4]
   25d1c:	68fa      	ldr	r2, [r7, #12]
   25d1e:	615a      	str	r2, [r3, #20]
   25d20:	e007      	b.n	25d32 <net_pkt_trim_buffer+0x44>
			} else if (buf == prev->frags) {
   25d22:	693b      	ldr	r3, [r7, #16]
   25d24:	681b      	ldr	r3, [r3, #0]
   25d26:	697a      	ldr	r2, [r7, #20]
   25d28:	429a      	cmp	r2, r3
   25d2a:	d102      	bne.n	25d32 <net_pkt_trim_buffer+0x44>
				prev->frags = next;
   25d2c:	693b      	ldr	r3, [r7, #16]
   25d2e:	68fa      	ldr	r2, [r7, #12]
   25d30:	601a      	str	r2, [r3, #0]
			buf->frags = NULL;
   25d32:	697b      	ldr	r3, [r7, #20]
   25d34:	2200      	movs	r2, #0
   25d36:	601a      	str	r2, [r3, #0]
			net_buf_unref(buf);
   25d38:	6978      	ldr	r0, [r7, #20]
   25d3a:	f7fb ff77 	bl	21c2c <net_buf_unref>
   25d3e:	e001      	b.n	25d44 <net_pkt_trim_buffer+0x56>
			prev = buf;
   25d40:	697b      	ldr	r3, [r7, #20]
   25d42:	613b      	str	r3, [r7, #16]
		buf = next;
   25d44:	68fb      	ldr	r3, [r7, #12]
   25d46:	617b      	str	r3, [r7, #20]
	while (buf) {
   25d48:	697b      	ldr	r3, [r7, #20]
   25d4a:	2b00      	cmp	r3, #0
   25d4c:	d1d9      	bne.n	25d02 <net_pkt_trim_buffer+0x14>
}
   25d4e:	bf00      	nop
   25d50:	3718      	adds	r7, #24
   25d52:	46bd      	mov	sp, r7
   25d54:	bd80      	pop	{r7, pc}

00025d56 <pkt_alloc>:
{
   25d56:	b580      	push	{r7, lr}
   25d58:	b084      	sub	sp, #16
   25d5a:	af00      	add	r7, sp, #0
   25d5c:	6078      	str	r0, [r7, #4]
   25d5e:	6039      	str	r1, [r7, #0]
	if (k_is_in_isr()) {
   25d60:	f7f1 ffc2 	bl	17ce8 <k_is_in_isr>
   25d64:	4603      	mov	r3, r0
   25d66:	2b00      	cmp	r3, #0
   25d68:	d001      	beq.n	25d6e <pkt_alloc+0x18>
		timeout = K_NO_WAIT;
   25d6a:	2300      	movs	r3, #0
   25d6c:	603b      	str	r3, [r7, #0]
	ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   25d6e:	f107 0308 	add.w	r3, r7, #8
   25d72:	683a      	ldr	r2, [r7, #0]
   25d74:	4619      	mov	r1, r3
   25d76:	6878      	ldr	r0, [r7, #4]
   25d78:	f7f0 fcb6 	bl	166e8 <k_mem_slab_alloc>
   25d7c:	60f8      	str	r0, [r7, #12]
	if (ret) {
   25d7e:	68fb      	ldr	r3, [r7, #12]
   25d80:	2b00      	cmp	r3, #0
   25d82:	d001      	beq.n	25d88 <pkt_alloc+0x32>
		return NULL;
   25d84:	2300      	movs	r3, #0
   25d86:	e016      	b.n	25db6 <pkt_alloc+0x60>
	memset(pkt, 0, sizeof(struct net_pkt));
   25d88:	68bb      	ldr	r3, [r7, #8]
   25d8a:	2244      	movs	r2, #68	; 0x44
   25d8c:	2100      	movs	r1, #0
   25d8e:	4618      	mov	r0, r3
   25d90:	f7dc f992 	bl	20b8 <memset>
	pkt->atomic_ref = ATOMIC_INIT(1);
   25d94:	68bb      	ldr	r3, [r7, #8]
   25d96:	2201      	movs	r2, #1
   25d98:	629a      	str	r2, [r3, #40]	; 0x28
	pkt->slab = slab;
   25d9a:	68bb      	ldr	r3, [r7, #8]
   25d9c:	687a      	ldr	r2, [r7, #4]
   25d9e:	611a      	str	r2, [r3, #16]
	net_pkt_set_vlan_tag(pkt, NET_VLAN_TAG_UNSPEC);
   25da0:	68bb      	ldr	r3, [r7, #8]
   25da2:	f640 71ff 	movw	r1, #4095	; 0xfff
   25da6:	4618      	mov	r0, r3
   25da8:	f7ff fdbf 	bl	2592a <net_pkt_set_vlan_tag>
	net_pkt_cursor_init(pkt);
   25dac:	68bb      	ldr	r3, [r7, #8]
   25dae:	4618      	mov	r0, r3
   25db0:	f000 f884 	bl	25ebc <net_pkt_cursor_init>
	return pkt;
   25db4:	68bb      	ldr	r3, [r7, #8]
}
   25db6:	4618      	mov	r0, r3
   25db8:	3710      	adds	r7, #16
   25dba:	46bd      	mov	sp, r7
   25dbc:	bd80      	pop	{r7, pc}

00025dbe <pkt_alloc_on_iface>:
{
   25dbe:	b580      	push	{r7, lr}
   25dc0:	b086      	sub	sp, #24
   25dc2:	af00      	add	r7, sp, #0
   25dc4:	60f8      	str	r0, [r7, #12]
   25dc6:	60b9      	str	r1, [r7, #8]
   25dc8:	607a      	str	r2, [r7, #4]
	pkt = pkt_alloc(slab, timeout);
   25dca:	6879      	ldr	r1, [r7, #4]
   25dcc:	68f8      	ldr	r0, [r7, #12]
   25dce:	f7ff ffc2 	bl	25d56 <pkt_alloc>
   25dd2:	6178      	str	r0, [r7, #20]
	if (pkt) {
   25dd4:	697b      	ldr	r3, [r7, #20]
   25dd6:	2b00      	cmp	r3, #0
   25dd8:	d003      	beq.n	25de2 <pkt_alloc_on_iface+0x24>
		net_pkt_set_iface(pkt, iface);
   25dda:	68b9      	ldr	r1, [r7, #8]
   25ddc:	6978      	ldr	r0, [r7, #20]
   25dde:	f7ff fd60 	bl	258a2 <net_pkt_set_iface>
	return pkt;
   25de2:	697b      	ldr	r3, [r7, #20]
}
   25de4:	4618      	mov	r0, r3
   25de6:	3718      	adds	r7, #24
   25de8:	46bd      	mov	sp, r7
   25dea:	bd80      	pop	{r7, pc}

00025dec <pkt_alloc_with_buffer>:
{
   25dec:	b580      	push	{r7, lr}
   25dee:	b08e      	sub	sp, #56	; 0x38
   25df0:	af00      	add	r7, sp, #0
   25df2:	60f8      	str	r0, [r7, #12]
   25df4:	60b9      	str	r1, [r7, #8]
   25df6:	607a      	str	r2, [r7, #4]
   25df8:	807b      	strh	r3, [r7, #2]
	u32_t alloc_start = k_uptime_get_32();
   25dfa:	f7ff fcf9 	bl	257f0 <k_uptime_get_32>
   25dfe:	6338      	str	r0, [r7, #48]	; 0x30
	NET_DBG("On iface %p size %zu", iface, size);
   25e00:	f7ff fcef 	bl	257e2 <_is_user_context>
   25e04:	4603      	mov	r3, r0
   25e06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	pkt = pkt_alloc_on_iface(slab, iface, timeout);
   25e0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   25e0c:	68b9      	ldr	r1, [r7, #8]
   25e0e:	68f8      	ldr	r0, [r7, #12]
   25e10:	f7ff ffd5 	bl	25dbe <pkt_alloc_on_iface>
   25e14:	6378      	str	r0, [r7, #52]	; 0x34
	if (!pkt) {
   25e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   25e18:	2b00      	cmp	r3, #0
   25e1a:	d101      	bne.n	25e20 <pkt_alloc_with_buffer+0x34>
		return NULL;
   25e1c:	2300      	movs	r3, #0
   25e1e:	e02b      	b.n	25e78 <pkt_alloc_with_buffer+0x8c>
	net_pkt_set_family(pkt, family);
   25e20:	887b      	ldrh	r3, [r7, #2]
   25e22:	b2db      	uxtb	r3, r3
   25e24:	4619      	mov	r1, r3
   25e26:	6b78      	ldr	r0, [r7, #52]	; 0x34
   25e28:	f7ff fd69 	bl	258fe <net_pkt_set_family>
	if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   25e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   25e2e:	2b00      	cmp	r3, #0
   25e30:	d011      	beq.n	25e56 <pkt_alloc_with_buffer+0x6a>
   25e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   25e34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   25e38:	d00d      	beq.n	25e56 <pkt_alloc_with_buffer+0x6a>
		u32_t diff = k_uptime_get_32() - alloc_start;
   25e3a:	f7ff fcd9 	bl	257f0 <k_uptime_get_32>
   25e3e:	4602      	mov	r2, r0
   25e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   25e42:	1ad3      	subs	r3, r2, r3
   25e44:	62bb      	str	r3, [r7, #40]	; 0x28
		timeout -= MIN(timeout, diff);
   25e46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   25e48:	6c79      	ldr	r1, [r7, #68]	; 0x44
   25e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   25e4c:	428b      	cmp	r3, r1
   25e4e:	bf28      	it	cs
   25e50:	460b      	movcs	r3, r1
   25e52:	1ad3      	subs	r3, r2, r3
   25e54:	647b      	str	r3, [r7, #68]	; 0x44
	ret = net_pkt_alloc_buffer(pkt, size, proto, timeout);
   25e56:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
   25e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   25e5c:	6879      	ldr	r1, [r7, #4]
   25e5e:	6b78      	ldr	r0, [r7, #52]	; 0x34
   25e60:	f7ed feea 	bl	13c38 <net_pkt_alloc_buffer>
   25e64:	6278      	str	r0, [r7, #36]	; 0x24
	if (ret) {
   25e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25e68:	2b00      	cmp	r3, #0
   25e6a:	d004      	beq.n	25e76 <pkt_alloc_with_buffer+0x8a>
		net_pkt_unref(pkt);
   25e6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
   25e6e:	f7ff fdcc 	bl	25a0a <net_pkt_unref>
		return NULL;
   25e72:	2300      	movs	r3, #0
   25e74:	e000      	b.n	25e78 <pkt_alloc_with_buffer+0x8c>
	return pkt;
   25e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   25e78:	4618      	mov	r0, r3
   25e7a:	3738      	adds	r7, #56	; 0x38
   25e7c:	46bd      	mov	sp, r7
   25e7e:	bd80      	pop	{r7, pc}

00025e80 <net_pkt_append_buffer>:
					proto, timeout);
#endif
}

void net_pkt_append_buffer(struct net_pkt *pkt, struct net_buf *buffer)
{
   25e80:	b580      	push	{r7, lr}
   25e82:	b082      	sub	sp, #8
   25e84:	af00      	add	r7, sp, #0
   25e86:	6078      	str	r0, [r7, #4]
   25e88:	6039      	str	r1, [r7, #0]
	if (!pkt->buffer) {
   25e8a:	687b      	ldr	r3, [r7, #4]
   25e8c:	695b      	ldr	r3, [r3, #20]
   25e8e:	2b00      	cmp	r3, #0
   25e90:	d106      	bne.n	25ea0 <net_pkt_append_buffer+0x20>
		pkt->buffer = buffer;
   25e92:	687b      	ldr	r3, [r7, #4]
   25e94:	683a      	ldr	r2, [r7, #0]
   25e96:	615a      	str	r2, [r3, #20]
		net_pkt_cursor_init(pkt);
   25e98:	6878      	ldr	r0, [r7, #4]
   25e9a:	f000 f80f 	bl	25ebc <net_pkt_cursor_init>
	} else {
		net_buf_frag_insert(net_buf_frag_last(pkt->buffer), buffer);
	}
}
   25e9e:	e009      	b.n	25eb4 <net_pkt_append_buffer+0x34>
		net_buf_frag_insert(net_buf_frag_last(pkt->buffer), buffer);
   25ea0:	687b      	ldr	r3, [r7, #4]
   25ea2:	695b      	ldr	r3, [r3, #20]
   25ea4:	4618      	mov	r0, r3
   25ea6:	f7fb ff02 	bl	21cae <net_buf_frag_last>
   25eaa:	4603      	mov	r3, r0
   25eac:	6839      	ldr	r1, [r7, #0]
   25eae:	4618      	mov	r0, r3
   25eb0:	f7fb ff0f 	bl	21cd2 <net_buf_frag_insert>
}
   25eb4:	bf00      	nop
   25eb6:	3708      	adds	r7, #8
   25eb8:	46bd      	mov	sp, r7
   25eba:	bd80      	pop	{r7, pc}

00025ebc <net_pkt_cursor_init>:

void net_pkt_cursor_init(struct net_pkt *pkt)
{
   25ebc:	b480      	push	{r7}
   25ebe:	b083      	sub	sp, #12
   25ec0:	af00      	add	r7, sp, #0
   25ec2:	6078      	str	r0, [r7, #4]
	pkt->cursor.buf = pkt->buffer;
   25ec4:	687b      	ldr	r3, [r7, #4]
   25ec6:	695a      	ldr	r2, [r3, #20]
   25ec8:	687b      	ldr	r3, [r7, #4]
   25eca:	619a      	str	r2, [r3, #24]
	if (pkt->cursor.buf) {
   25ecc:	687b      	ldr	r3, [r7, #4]
   25ece:	699b      	ldr	r3, [r3, #24]
   25ed0:	2b00      	cmp	r3, #0
   25ed2:	d005      	beq.n	25ee0 <net_pkt_cursor_init+0x24>
		pkt->cursor.pos = pkt->cursor.buf->data;
   25ed4:	687b      	ldr	r3, [r7, #4]
   25ed6:	699b      	ldr	r3, [r3, #24]
   25ed8:	689a      	ldr	r2, [r3, #8]
   25eda:	687b      	ldr	r3, [r7, #4]
   25edc:	61da      	str	r2, [r3, #28]
	} else {
		pkt->cursor.pos = NULL;
	}
}
   25ede:	e002      	b.n	25ee6 <net_pkt_cursor_init+0x2a>
		pkt->cursor.pos = NULL;
   25ee0:	687b      	ldr	r3, [r7, #4]
   25ee2:	2200      	movs	r2, #0
   25ee4:	61da      	str	r2, [r3, #28]
}
   25ee6:	bf00      	nop
   25ee8:	370c      	adds	r7, #12
   25eea:	46bd      	mov	sp, r7
   25eec:	bc80      	pop	{r7}
   25eee:	4770      	bx	lr

00025ef0 <pkt_cursor_jump>:

static void pkt_cursor_jump(struct net_pkt *pkt, bool write)
{
   25ef0:	b480      	push	{r7}
   25ef2:	b085      	sub	sp, #20
   25ef4:	af00      	add	r7, sp, #0
   25ef6:	6078      	str	r0, [r7, #4]
   25ef8:	460b      	mov	r3, r1
   25efa:	70fb      	strb	r3, [r7, #3]
	struct net_pkt_cursor *cursor = &pkt->cursor;
   25efc:	687b      	ldr	r3, [r7, #4]
   25efe:	3318      	adds	r3, #24
   25f00:	60fb      	str	r3, [r7, #12]

	cursor->buf = cursor->buf->frags;
   25f02:	68fb      	ldr	r3, [r7, #12]
   25f04:	681b      	ldr	r3, [r3, #0]
   25f06:	681a      	ldr	r2, [r3, #0]
   25f08:	68fb      	ldr	r3, [r7, #12]
   25f0a:	601a      	str	r2, [r3, #0]
	while (cursor->buf) {
   25f0c:	e012      	b.n	25f34 <pkt_cursor_jump+0x44>
		size_t len = write ? cursor->buf->size : cursor->buf->len;
   25f0e:	78fb      	ldrb	r3, [r7, #3]
   25f10:	2b00      	cmp	r3, #0
   25f12:	d003      	beq.n	25f1c <pkt_cursor_jump+0x2c>
   25f14:	68fb      	ldr	r3, [r7, #12]
   25f16:	681b      	ldr	r3, [r3, #0]
   25f18:	89db      	ldrh	r3, [r3, #14]
   25f1a:	e002      	b.n	25f22 <pkt_cursor_jump+0x32>
   25f1c:	68fb      	ldr	r3, [r7, #12]
   25f1e:	681b      	ldr	r3, [r3, #0]
   25f20:	899b      	ldrh	r3, [r3, #12]
   25f22:	60bb      	str	r3, [r7, #8]

		if (!len) {
   25f24:	68bb      	ldr	r3, [r7, #8]
   25f26:	2b00      	cmp	r3, #0
   25f28:	d109      	bne.n	25f3e <pkt_cursor_jump+0x4e>
			cursor->buf = cursor->buf->frags;
   25f2a:	68fb      	ldr	r3, [r7, #12]
   25f2c:	681b      	ldr	r3, [r3, #0]
   25f2e:	681a      	ldr	r2, [r3, #0]
   25f30:	68fb      	ldr	r3, [r7, #12]
   25f32:	601a      	str	r2, [r3, #0]
	while (cursor->buf) {
   25f34:	68fb      	ldr	r3, [r7, #12]
   25f36:	681b      	ldr	r3, [r3, #0]
   25f38:	2b00      	cmp	r3, #0
   25f3a:	d1e8      	bne.n	25f0e <pkt_cursor_jump+0x1e>
   25f3c:	e000      	b.n	25f40 <pkt_cursor_jump+0x50>
		} else {
			break;
   25f3e:	bf00      	nop
		}
	}

	if (cursor->buf) {
   25f40:	68fb      	ldr	r3, [r7, #12]
   25f42:	681b      	ldr	r3, [r3, #0]
   25f44:	2b00      	cmp	r3, #0
   25f46:	d005      	beq.n	25f54 <pkt_cursor_jump+0x64>
		cursor->pos = cursor->buf->data;
   25f48:	68fb      	ldr	r3, [r7, #12]
   25f4a:	681b      	ldr	r3, [r3, #0]
   25f4c:	689a      	ldr	r2, [r3, #8]
   25f4e:	68fb      	ldr	r3, [r7, #12]
   25f50:	605a      	str	r2, [r3, #4]
	} else {
		cursor->pos = NULL;
	}
}
   25f52:	e002      	b.n	25f5a <pkt_cursor_jump+0x6a>
		cursor->pos = NULL;
   25f54:	68fb      	ldr	r3, [r7, #12]
   25f56:	2200      	movs	r2, #0
   25f58:	605a      	str	r2, [r3, #4]
}
   25f5a:	bf00      	nop
   25f5c:	3714      	adds	r7, #20
   25f5e:	46bd      	mov	sp, r7
   25f60:	bc80      	pop	{r7}
   25f62:	4770      	bx	lr

00025f64 <pkt_cursor_advance>:

static void pkt_cursor_advance(struct net_pkt *pkt, bool write)
{
   25f64:	b580      	push	{r7, lr}
   25f66:	b084      	sub	sp, #16
   25f68:	af00      	add	r7, sp, #0
   25f6a:	6078      	str	r0, [r7, #4]
   25f6c:	460b      	mov	r3, r1
   25f6e:	70fb      	strb	r3, [r7, #3]
	struct net_pkt_cursor *cursor = &pkt->cursor;
   25f70:	687b      	ldr	r3, [r7, #4]
   25f72:	3318      	adds	r3, #24
   25f74:	60fb      	str	r3, [r7, #12]
	size_t len;

	if (!cursor->buf) {
   25f76:	68fb      	ldr	r3, [r7, #12]
   25f78:	681b      	ldr	r3, [r3, #0]
   25f7a:	2b00      	cmp	r3, #0
   25f7c:	d01a      	beq.n	25fb4 <pkt_cursor_advance+0x50>
		return;
	}

	len = write ? cursor->buf->size : cursor->buf->len;
   25f7e:	78fb      	ldrb	r3, [r7, #3]
   25f80:	2b00      	cmp	r3, #0
   25f82:	d003      	beq.n	25f8c <pkt_cursor_advance+0x28>
   25f84:	68fb      	ldr	r3, [r7, #12]
   25f86:	681b      	ldr	r3, [r3, #0]
   25f88:	89db      	ldrh	r3, [r3, #14]
   25f8a:	e002      	b.n	25f92 <pkt_cursor_advance+0x2e>
   25f8c:	68fb      	ldr	r3, [r7, #12]
   25f8e:	681b      	ldr	r3, [r3, #0]
   25f90:	899b      	ldrh	r3, [r3, #12]
   25f92:	60bb      	str	r3, [r7, #8]
	if ((cursor->pos - cursor->buf->data) == len) {
   25f94:	68fb      	ldr	r3, [r7, #12]
   25f96:	685a      	ldr	r2, [r3, #4]
   25f98:	68fb      	ldr	r3, [r7, #12]
   25f9a:	681b      	ldr	r3, [r3, #0]
   25f9c:	689b      	ldr	r3, [r3, #8]
   25f9e:	1ad3      	subs	r3, r2, r3
   25fa0:	461a      	mov	r2, r3
   25fa2:	68bb      	ldr	r3, [r7, #8]
   25fa4:	4293      	cmp	r3, r2
   25fa6:	d106      	bne.n	25fb6 <pkt_cursor_advance+0x52>
		pkt_cursor_jump(pkt, write);
   25fa8:	78fb      	ldrb	r3, [r7, #3]
   25faa:	4619      	mov	r1, r3
   25fac:	6878      	ldr	r0, [r7, #4]
   25fae:	f7ff ff9f 	bl	25ef0 <pkt_cursor_jump>
   25fb2:	e000      	b.n	25fb6 <pkt_cursor_advance+0x52>
		return;
   25fb4:	bf00      	nop
	}
}
   25fb6:	3710      	adds	r7, #16
   25fb8:	46bd      	mov	sp, r7
   25fba:	bd80      	pop	{r7, pc}

00025fbc <pkt_cursor_update>:

static void pkt_cursor_update(struct net_pkt *pkt,
			      size_t length, bool write)
{
   25fbc:	b580      	push	{r7, lr}
   25fbe:	b086      	sub	sp, #24
   25fc0:	af00      	add	r7, sp, #0
   25fc2:	60f8      	str	r0, [r7, #12]
   25fc4:	60b9      	str	r1, [r7, #8]
   25fc6:	4613      	mov	r3, r2
   25fc8:	71fb      	strb	r3, [r7, #7]
	struct net_pkt_cursor *cursor = &pkt->cursor;
   25fca:	68fb      	ldr	r3, [r7, #12]
   25fcc:	3318      	adds	r3, #24
   25fce:	617b      	str	r3, [r7, #20]
	size_t len;

	if (net_pkt_is_being_overwritten(pkt)) {
   25fd0:	68f8      	ldr	r0, [r7, #12]
   25fd2:	f7ff fcc3 	bl	2595c <net_pkt_is_being_overwritten>
   25fd6:	4603      	mov	r3, r0
   25fd8:	2b00      	cmp	r3, #0
   25fda:	d001      	beq.n	25fe0 <pkt_cursor_update+0x24>
		write = false;
   25fdc:	2300      	movs	r3, #0
   25fde:	71fb      	strb	r3, [r7, #7]
	}

	len = write ? cursor->buf->size : cursor->buf->len;
   25fe0:	79fb      	ldrb	r3, [r7, #7]
   25fe2:	2b00      	cmp	r3, #0
   25fe4:	d003      	beq.n	25fee <pkt_cursor_update+0x32>
   25fe6:	697b      	ldr	r3, [r7, #20]
   25fe8:	681b      	ldr	r3, [r3, #0]
   25fea:	89db      	ldrh	r3, [r3, #14]
   25fec:	e002      	b.n	25ff4 <pkt_cursor_update+0x38>
   25fee:	697b      	ldr	r3, [r7, #20]
   25ff0:	681b      	ldr	r3, [r3, #0]
   25ff2:	899b      	ldrh	r3, [r3, #12]
   25ff4:	613b      	str	r3, [r7, #16]
	if (length + (cursor->pos - cursor->buf->data) == len &&
   25ff6:	697b      	ldr	r3, [r7, #20]
   25ff8:	685a      	ldr	r2, [r3, #4]
   25ffa:	697b      	ldr	r3, [r7, #20]
   25ffc:	681b      	ldr	r3, [r3, #0]
   25ffe:	689b      	ldr	r3, [r3, #8]
   26000:	1ad3      	subs	r3, r2, r3
   26002:	461a      	mov	r2, r3
   26004:	68bb      	ldr	r3, [r7, #8]
   26006:	4413      	add	r3, r2
   26008:	693a      	ldr	r2, [r7, #16]
   2600a:	429a      	cmp	r2, r3
   2600c:	d115      	bne.n	2603a <pkt_cursor_update+0x7e>
	    !(net_pkt_is_being_overwritten(pkt) && len < cursor->buf->size)) {
   2600e:	68f8      	ldr	r0, [r7, #12]
   26010:	f7ff fca4 	bl	2595c <net_pkt_is_being_overwritten>
   26014:	4603      	mov	r3, r0
   26016:	f083 0301 	eor.w	r3, r3, #1
   2601a:	b2db      	uxtb	r3, r3
	if (length + (cursor->pos - cursor->buf->data) == len &&
   2601c:	2b00      	cmp	r3, #0
   2601e:	d106      	bne.n	2602e <pkt_cursor_update+0x72>
	    !(net_pkt_is_being_overwritten(pkt) && len < cursor->buf->size)) {
   26020:	697b      	ldr	r3, [r7, #20]
   26022:	681b      	ldr	r3, [r3, #0]
   26024:	89db      	ldrh	r3, [r3, #14]
   26026:	461a      	mov	r2, r3
   26028:	693b      	ldr	r3, [r7, #16]
   2602a:	4293      	cmp	r3, r2
   2602c:	d305      	bcc.n	2603a <pkt_cursor_update+0x7e>
		pkt_cursor_jump(pkt, write);
   2602e:	79fb      	ldrb	r3, [r7, #7]
   26030:	4619      	mov	r1, r3
   26032:	68f8      	ldr	r0, [r7, #12]
   26034:	f7ff ff5c 	bl	25ef0 <pkt_cursor_jump>
   26038:	e005      	b.n	26046 <pkt_cursor_update+0x8a>
	} else {
		cursor->pos += length;
   2603a:	697b      	ldr	r3, [r7, #20]
   2603c:	685a      	ldr	r2, [r3, #4]
   2603e:	68bb      	ldr	r3, [r7, #8]
   26040:	441a      	add	r2, r3
   26042:	697b      	ldr	r3, [r7, #20]
   26044:	605a      	str	r2, [r3, #4]
	}
}
   26046:	bf00      	nop
   26048:	3718      	adds	r7, #24
   2604a:	46bd      	mov	sp, r7
   2604c:	bd80      	pop	{r7, pc}

0002604e <net_pkt_cursor_operate>:

/* Internal function that does all operation (skip/read/write/memset) */
static int net_pkt_cursor_operate(struct net_pkt *pkt,
				  void *data, size_t length,
				  bool copy, bool write)
{
   2604e:	b580      	push	{r7, lr}
   26050:	b088      	sub	sp, #32
   26052:	af00      	add	r7, sp, #0
   26054:	60f8      	str	r0, [r7, #12]
   26056:	60b9      	str	r1, [r7, #8]
   26058:	607a      	str	r2, [r7, #4]
   2605a:	70fb      	strb	r3, [r7, #3]
	/* We use such variable to avoid lengthy lines */
	struct net_pkt_cursor *c_op = &pkt->cursor;
   2605c:	68fb      	ldr	r3, [r7, #12]
   2605e:	3318      	adds	r3, #24
   26060:	617b      	str	r3, [r7, #20]

	while (c_op->buf && length) {
   26062:	e093      	b.n	2618c <net_pkt_cursor_operate+0x13e>
		size_t d_len, len;

		pkt_cursor_advance(pkt, net_pkt_is_being_overwritten(pkt) ?
   26064:	68f8      	ldr	r0, [r7, #12]
   26066:	f7ff fc79 	bl	2595c <net_pkt_is_being_overwritten>
   2606a:	4603      	mov	r3, r0
   2606c:	2b00      	cmp	r3, #0
   2606e:	d105      	bne.n	2607c <net_pkt_cursor_operate+0x2e>
				   false : write);
   26070:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
		pkt_cursor_advance(pkt, net_pkt_is_being_overwritten(pkt) ?
   26074:	2b00      	cmp	r3, #0
   26076:	d001      	beq.n	2607c <net_pkt_cursor_operate+0x2e>
   26078:	2301      	movs	r3, #1
   2607a:	e000      	b.n	2607e <net_pkt_cursor_operate+0x30>
   2607c:	2300      	movs	r3, #0
   2607e:	4619      	mov	r1, r3
   26080:	68f8      	ldr	r0, [r7, #12]
   26082:	f7ff ff6f 	bl	25f64 <pkt_cursor_advance>
		if (c_op->buf == NULL) {
   26086:	697b      	ldr	r3, [r7, #20]
   26088:	681b      	ldr	r3, [r3, #0]
   2608a:	2b00      	cmp	r3, #0
   2608c:	f000 8087 	beq.w	2619e <net_pkt_cursor_operate+0x150>
			break;
		}

		if (write && !net_pkt_is_being_overwritten(pkt)) {
   26090:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   26094:	2b00      	cmp	r3, #0
   26096:	d015      	beq.n	260c4 <net_pkt_cursor_operate+0x76>
   26098:	68f8      	ldr	r0, [r7, #12]
   2609a:	f7ff fc5f 	bl	2595c <net_pkt_is_being_overwritten>
   2609e:	4603      	mov	r3, r0
   260a0:	f083 0301 	eor.w	r3, r3, #1
   260a4:	b2db      	uxtb	r3, r3
   260a6:	2b00      	cmp	r3, #0
   260a8:	d00c      	beq.n	260c4 <net_pkt_cursor_operate+0x76>
			d_len = c_op->buf->size - (c_op->pos - c_op->buf->data);
   260aa:	697b      	ldr	r3, [r7, #20]
   260ac:	681b      	ldr	r3, [r3, #0]
   260ae:	89db      	ldrh	r3, [r3, #14]
   260b0:	4619      	mov	r1, r3
   260b2:	697b      	ldr	r3, [r7, #20]
   260b4:	685a      	ldr	r2, [r3, #4]
   260b6:	697b      	ldr	r3, [r7, #20]
   260b8:	681b      	ldr	r3, [r3, #0]
   260ba:	689b      	ldr	r3, [r3, #8]
   260bc:	1ad3      	subs	r3, r2, r3
   260be:	1acb      	subs	r3, r1, r3
   260c0:	61fb      	str	r3, [r7, #28]
   260c2:	e00b      	b.n	260dc <net_pkt_cursor_operate+0x8e>
		} else {
			d_len = c_op->buf->len - (c_op->pos - c_op->buf->data);
   260c4:	697b      	ldr	r3, [r7, #20]
   260c6:	681b      	ldr	r3, [r3, #0]
   260c8:	899b      	ldrh	r3, [r3, #12]
   260ca:	4619      	mov	r1, r3
   260cc:	697b      	ldr	r3, [r7, #20]
   260ce:	685a      	ldr	r2, [r3, #4]
   260d0:	697b      	ldr	r3, [r7, #20]
   260d2:	681b      	ldr	r3, [r3, #0]
   260d4:	689b      	ldr	r3, [r3, #8]
   260d6:	1ad3      	subs	r3, r2, r3
   260d8:	1acb      	subs	r3, r1, r3
   260da:	61fb      	str	r3, [r7, #28]
		}

		if (!d_len) {
   260dc:	69fb      	ldr	r3, [r7, #28]
   260de:	2b00      	cmp	r3, #0
   260e0:	d05f      	beq.n	261a2 <net_pkt_cursor_operate+0x154>
			break;
		}

		if (length < d_len) {
   260e2:	687a      	ldr	r2, [r7, #4]
   260e4:	69fb      	ldr	r3, [r7, #28]
   260e6:	429a      	cmp	r2, r3
   260e8:	d202      	bcs.n	260f0 <net_pkt_cursor_operate+0xa2>
			len = length;
   260ea:	687b      	ldr	r3, [r7, #4]
   260ec:	61bb      	str	r3, [r7, #24]
   260ee:	e001      	b.n	260f4 <net_pkt_cursor_operate+0xa6>
		} else {
			len = d_len;
   260f0:	69fb      	ldr	r3, [r7, #28]
   260f2:	61bb      	str	r3, [r7, #24]
		}

		if (copy) {
   260f4:	78fb      	ldrb	r3, [r7, #3]
   260f6:	2b00      	cmp	r3, #0
   260f8:	d014      	beq.n	26124 <net_pkt_cursor_operate+0xd6>
			memcpy(write ? c_op->pos : data,
   260fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   260fe:	2b00      	cmp	r3, #0
   26100:	d002      	beq.n	26108 <net_pkt_cursor_operate+0xba>
   26102:	697b      	ldr	r3, [r7, #20]
   26104:	685b      	ldr	r3, [r3, #4]
   26106:	e000      	b.n	2610a <net_pkt_cursor_operate+0xbc>
   26108:	68bb      	ldr	r3, [r7, #8]
   2610a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   2610e:	2a00      	cmp	r2, #0
   26110:	d001      	beq.n	26116 <net_pkt_cursor_operate+0xc8>
   26112:	68b9      	ldr	r1, [r7, #8]
   26114:	e001      	b.n	2611a <net_pkt_cursor_operate+0xcc>
   26116:	697a      	ldr	r2, [r7, #20]
   26118:	6851      	ldr	r1, [r2, #4]
   2611a:	69ba      	ldr	r2, [r7, #24]
   2611c:	4618      	mov	r0, r3
   2611e:	f7db ffa3 	bl	2068 <memcpy>
   26122:	e00a      	b.n	2613a <net_pkt_cursor_operate+0xec>
			       write ? data : c_op->pos,
			       len);
		} else if (data) {
   26124:	68bb      	ldr	r3, [r7, #8]
   26126:	2b00      	cmp	r3, #0
   26128:	d007      	beq.n	2613a <net_pkt_cursor_operate+0xec>
			memset(c_op->pos, *(int *)data, len);
   2612a:	697b      	ldr	r3, [r7, #20]
   2612c:	6858      	ldr	r0, [r3, #4]
   2612e:	68bb      	ldr	r3, [r7, #8]
   26130:	681b      	ldr	r3, [r3, #0]
   26132:	69ba      	ldr	r2, [r7, #24]
   26134:	4619      	mov	r1, r3
   26136:	f7db ffbf 	bl	20b8 <memset>
		}

		if (write && !net_pkt_is_being_overwritten(pkt)) {
   2613a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   2613e:	2b00      	cmp	r3, #0
   26140:	d00f      	beq.n	26162 <net_pkt_cursor_operate+0x114>
   26142:	68f8      	ldr	r0, [r7, #12]
   26144:	f7ff fc0a 	bl	2595c <net_pkt_is_being_overwritten>
   26148:	4603      	mov	r3, r0
   2614a:	f083 0301 	eor.w	r3, r3, #1
   2614e:	b2db      	uxtb	r3, r3
   26150:	2b00      	cmp	r3, #0
   26152:	d006      	beq.n	26162 <net_pkt_cursor_operate+0x114>
			net_buf_add(c_op->buf, len);
   26154:	697b      	ldr	r3, [r7, #20]
   26156:	681b      	ldr	r3, [r3, #0]
   26158:	3308      	adds	r3, #8
   2615a:	69b9      	ldr	r1, [r7, #24]
   2615c:	4618      	mov	r0, r3
   2615e:	f7fb fdcf 	bl	21d00 <net_buf_simple_add>
		}

		pkt_cursor_update(pkt, len, write);
   26162:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   26166:	461a      	mov	r2, r3
   26168:	69b9      	ldr	r1, [r7, #24]
   2616a:	68f8      	ldr	r0, [r7, #12]
   2616c:	f7ff ff26 	bl	25fbc <pkt_cursor_update>

		if (copy && data) {
   26170:	78fb      	ldrb	r3, [r7, #3]
   26172:	2b00      	cmp	r3, #0
   26174:	d006      	beq.n	26184 <net_pkt_cursor_operate+0x136>
   26176:	68bb      	ldr	r3, [r7, #8]
   26178:	2b00      	cmp	r3, #0
   2617a:	d003      	beq.n	26184 <net_pkt_cursor_operate+0x136>
			data = (u8_t *) data + len;
   2617c:	68ba      	ldr	r2, [r7, #8]
   2617e:	69bb      	ldr	r3, [r7, #24]
   26180:	4413      	add	r3, r2
   26182:	60bb      	str	r3, [r7, #8]
		}

		length -= len;
   26184:	687a      	ldr	r2, [r7, #4]
   26186:	69bb      	ldr	r3, [r7, #24]
   26188:	1ad3      	subs	r3, r2, r3
   2618a:	607b      	str	r3, [r7, #4]
	while (c_op->buf && length) {
   2618c:	697b      	ldr	r3, [r7, #20]
   2618e:	681b      	ldr	r3, [r3, #0]
   26190:	2b00      	cmp	r3, #0
   26192:	d007      	beq.n	261a4 <net_pkt_cursor_operate+0x156>
   26194:	687b      	ldr	r3, [r7, #4]
   26196:	2b00      	cmp	r3, #0
   26198:	f47f af64 	bne.w	26064 <net_pkt_cursor_operate+0x16>
   2619c:	e002      	b.n	261a4 <net_pkt_cursor_operate+0x156>
			break;
   2619e:	bf00      	nop
   261a0:	e000      	b.n	261a4 <net_pkt_cursor_operate+0x156>
			break;
   261a2:	bf00      	nop
	}

	if (length) {
   261a4:	687b      	ldr	r3, [r7, #4]
   261a6:	2b00      	cmp	r3, #0
   261a8:	d006      	beq.n	261b8 <net_pkt_cursor_operate+0x16a>
		NET_DBG("Still some length to go %zu", length);
   261aa:	f7ff fb1a 	bl	257e2 <_is_user_context>
   261ae:	4603      	mov	r3, r0
   261b0:	74fb      	strb	r3, [r7, #19]
		return -ENOBUFS;
   261b2:	f06f 0368 	mvn.w	r3, #104	; 0x68
   261b6:	e000      	b.n	261ba <net_pkt_cursor_operate+0x16c>
	}

	return 0;
   261b8:	2300      	movs	r3, #0
}
   261ba:	4618      	mov	r0, r3
   261bc:	3720      	adds	r7, #32
   261be:	46bd      	mov	sp, r7
   261c0:	bd80      	pop	{r7, pc}

000261c2 <net_pkt_skip>:

int net_pkt_skip(struct net_pkt *pkt, size_t skip)
{
   261c2:	b580      	push	{r7, lr}
   261c4:	b08a      	sub	sp, #40	; 0x28
   261c6:	af02      	add	r7, sp, #8
   261c8:	6078      	str	r0, [r7, #4]
   261ca:	6039      	str	r1, [r7, #0]
	NET_DBG("pkt %p skip %zu", pkt, skip);
   261cc:	f7ff fb09 	bl	257e2 <_is_user_context>
   261d0:	4603      	mov	r3, r0
   261d2:	77fb      	strb	r3, [r7, #31]

	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
   261d4:	2301      	movs	r3, #1
   261d6:	9300      	str	r3, [sp, #0]
   261d8:	2300      	movs	r3, #0
   261da:	683a      	ldr	r2, [r7, #0]
   261dc:	2100      	movs	r1, #0
   261de:	6878      	ldr	r0, [r7, #4]
   261e0:	f7ff ff35 	bl	2604e <net_pkt_cursor_operate>
   261e4:	4603      	mov	r3, r0
}
   261e6:	4618      	mov	r0, r3
   261e8:	3720      	adds	r7, #32
   261ea:	46bd      	mov	sp, r7
   261ec:	bd80      	pop	{r7, pc}

000261ee <net_pkt_memset>:

int net_pkt_memset(struct net_pkt *pkt, int byte, size_t amount)
{
   261ee:	b580      	push	{r7, lr}
   261f0:	b090      	sub	sp, #64	; 0x40
   261f2:	af02      	add	r7, sp, #8
   261f4:	60f8      	str	r0, [r7, #12]
   261f6:	60b9      	str	r1, [r7, #8]
   261f8:	607a      	str	r2, [r7, #4]
	NET_DBG("pkt %p byte %d amount %zu", pkt, byte, amount);
   261fa:	f7ff faf2 	bl	257e2 <_is_user_context>
   261fe:	4603      	mov	r3, r0
   26200:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	return net_pkt_cursor_operate(pkt, &byte, amount, false, true);
   26204:	f107 0108 	add.w	r1, r7, #8
   26208:	2301      	movs	r3, #1
   2620a:	9300      	str	r3, [sp, #0]
   2620c:	2300      	movs	r3, #0
   2620e:	687a      	ldr	r2, [r7, #4]
   26210:	68f8      	ldr	r0, [r7, #12]
   26212:	f7ff ff1c 	bl	2604e <net_pkt_cursor_operate>
   26216:	4603      	mov	r3, r0
}
   26218:	4618      	mov	r0, r3
   2621a:	3738      	adds	r7, #56	; 0x38
   2621c:	46bd      	mov	sp, r7
   2621e:	bd80      	pop	{r7, pc}

00026220 <net_pkt_read>:

int net_pkt_read(struct net_pkt *pkt, void *data, size_t length)
{
   26220:	b580      	push	{r7, lr}
   26222:	b090      	sub	sp, #64	; 0x40
   26224:	af02      	add	r7, sp, #8
   26226:	60f8      	str	r0, [r7, #12]
   26228:	60b9      	str	r1, [r7, #8]
   2622a:	607a      	str	r2, [r7, #4]
	NET_DBG("pkt %p data %p length %zu", pkt, data, length);
   2622c:	f7ff fad9 	bl	257e2 <_is_user_context>
   26230:	4603      	mov	r3, r0
   26232:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	return net_pkt_cursor_operate(pkt, data, length, true, false);
   26236:	2300      	movs	r3, #0
   26238:	9300      	str	r3, [sp, #0]
   2623a:	2301      	movs	r3, #1
   2623c:	687a      	ldr	r2, [r7, #4]
   2623e:	68b9      	ldr	r1, [r7, #8]
   26240:	68f8      	ldr	r0, [r7, #12]
   26242:	f7ff ff04 	bl	2604e <net_pkt_cursor_operate>
   26246:	4603      	mov	r3, r0
}
   26248:	4618      	mov	r0, r3
   2624a:	3738      	adds	r7, #56	; 0x38
   2624c:	46bd      	mov	sp, r7
   2624e:	bd80      	pop	{r7, pc}

00026250 <net_pkt_write>:

	return ret;
}

int net_pkt_write(struct net_pkt *pkt, const void *data, size_t length)
{
   26250:	b580      	push	{r7, lr}
   26252:	b090      	sub	sp, #64	; 0x40
   26254:	af02      	add	r7, sp, #8
   26256:	60f8      	str	r0, [r7, #12]
   26258:	60b9      	str	r1, [r7, #8]
   2625a:	607a      	str	r2, [r7, #4]
	NET_DBG("pkt %p data %p length %zu", pkt, data, length);
   2625c:	f7ff fac1 	bl	257e2 <_is_user_context>
   26260:	4603      	mov	r3, r0
   26262:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
   26266:	68fb      	ldr	r3, [r7, #12]
   26268:	69db      	ldr	r3, [r3, #28]
   2626a:	68ba      	ldr	r2, [r7, #8]
   2626c:	429a      	cmp	r2, r3
   2626e:	d10c      	bne.n	2628a <net_pkt_write+0x3a>
   26270:	6879      	ldr	r1, [r7, #4]
   26272:	68f8      	ldr	r0, [r7, #12]
   26274:	f000 f906 	bl	26484 <net_pkt_is_contiguous>
   26278:	4603      	mov	r3, r0
   2627a:	2b00      	cmp	r3, #0
   2627c:	d005      	beq.n	2628a <net_pkt_write+0x3a>
		return net_pkt_skip(pkt, length);
   2627e:	6879      	ldr	r1, [r7, #4]
   26280:	68f8      	ldr	r0, [r7, #12]
   26282:	f7ff ff9e 	bl	261c2 <net_pkt_skip>
   26286:	4603      	mov	r3, r0
   26288:	e008      	b.n	2629c <net_pkt_write+0x4c>
	}

	return net_pkt_cursor_operate(pkt, (void *)data, length, true, true);
   2628a:	2301      	movs	r3, #1
   2628c:	9300      	str	r3, [sp, #0]
   2628e:	2301      	movs	r3, #1
   26290:	687a      	ldr	r2, [r7, #4]
   26292:	68b9      	ldr	r1, [r7, #8]
   26294:	68f8      	ldr	r0, [r7, #12]
   26296:	f7ff feda 	bl	2604e <net_pkt_cursor_operate>
   2629a:	4603      	mov	r3, r0
}
   2629c:	4618      	mov	r0, r3
   2629e:	3738      	adds	r7, #56	; 0x38
   262a0:	46bd      	mov	sp, r7
   262a2:	bd80      	pop	{r7, pc}

000262a4 <net_pkt_copy>:

int net_pkt_copy(struct net_pkt *pkt_dst,
		 struct net_pkt *pkt_src,
		 size_t length)
{
   262a4:	b580      	push	{r7, lr}
   262a6:	b08a      	sub	sp, #40	; 0x28
   262a8:	af00      	add	r7, sp, #0
   262aa:	60f8      	str	r0, [r7, #12]
   262ac:	60b9      	str	r1, [r7, #8]
   262ae:	607a      	str	r2, [r7, #4]
	struct net_pkt_cursor *c_dst = &pkt_dst->cursor;
   262b0:	68fb      	ldr	r3, [r7, #12]
   262b2:	3318      	adds	r3, #24
   262b4:	61fb      	str	r3, [r7, #28]
	struct net_pkt_cursor *c_src = &pkt_src->cursor;
   262b6:	68bb      	ldr	r3, [r7, #8]
   262b8:	3318      	adds	r3, #24
   262ba:	623b      	str	r3, [r7, #32]

	while (c_dst->buf && c_src->buf && length) {
   262bc:	e064      	b.n	26388 <net_pkt_copy+0xe4>
		size_t s_len, d_len, len;

		pkt_cursor_advance(pkt_dst, true);
   262be:	2101      	movs	r1, #1
   262c0:	68f8      	ldr	r0, [r7, #12]
   262c2:	f7ff fe4f 	bl	25f64 <pkt_cursor_advance>
		pkt_cursor_advance(pkt_src, false);
   262c6:	2100      	movs	r1, #0
   262c8:	68b8      	ldr	r0, [r7, #8]
   262ca:	f7ff fe4b 	bl	25f64 <pkt_cursor_advance>

		if (!c_dst->buf || !c_src->buf) {
   262ce:	69fb      	ldr	r3, [r7, #28]
   262d0:	681b      	ldr	r3, [r3, #0]
   262d2:	2b00      	cmp	r3, #0
   262d4:	d065      	beq.n	263a2 <net_pkt_copy+0xfe>
   262d6:	6a3b      	ldr	r3, [r7, #32]
   262d8:	681b      	ldr	r3, [r3, #0]
   262da:	2b00      	cmp	r3, #0
   262dc:	d061      	beq.n	263a2 <net_pkt_copy+0xfe>
			break;
		}

		s_len = c_src->buf->len - (c_src->pos - c_src->buf->data);
   262de:	6a3b      	ldr	r3, [r7, #32]
   262e0:	681b      	ldr	r3, [r3, #0]
   262e2:	899b      	ldrh	r3, [r3, #12]
   262e4:	4619      	mov	r1, r3
   262e6:	6a3b      	ldr	r3, [r7, #32]
   262e8:	685a      	ldr	r2, [r3, #4]
   262ea:	6a3b      	ldr	r3, [r7, #32]
   262ec:	681b      	ldr	r3, [r3, #0]
   262ee:	689b      	ldr	r3, [r3, #8]
   262f0:	1ad3      	subs	r3, r2, r3
   262f2:	1acb      	subs	r3, r1, r3
   262f4:	61bb      	str	r3, [r7, #24]
		d_len = c_dst->buf->size - (c_dst->pos - c_dst->buf->data);
   262f6:	69fb      	ldr	r3, [r7, #28]
   262f8:	681b      	ldr	r3, [r3, #0]
   262fa:	89db      	ldrh	r3, [r3, #14]
   262fc:	4619      	mov	r1, r3
   262fe:	69fb      	ldr	r3, [r7, #28]
   26300:	685a      	ldr	r2, [r3, #4]
   26302:	69fb      	ldr	r3, [r7, #28]
   26304:	681b      	ldr	r3, [r3, #0]
   26306:	689b      	ldr	r3, [r3, #8]
   26308:	1ad3      	subs	r3, r2, r3
   2630a:	1acb      	subs	r3, r1, r3
   2630c:	617b      	str	r3, [r7, #20]
		if (length < s_len && length < d_len) {
   2630e:	687a      	ldr	r2, [r7, #4]
   26310:	69bb      	ldr	r3, [r7, #24]
   26312:	429a      	cmp	r2, r3
   26314:	d206      	bcs.n	26324 <net_pkt_copy+0x80>
   26316:	687a      	ldr	r2, [r7, #4]
   26318:	697b      	ldr	r3, [r7, #20]
   2631a:	429a      	cmp	r2, r3
   2631c:	d202      	bcs.n	26324 <net_pkt_copy+0x80>
			len = length;
   2631e:	687b      	ldr	r3, [r7, #4]
   26320:	627b      	str	r3, [r7, #36]	; 0x24
   26322:	e008      	b.n	26336 <net_pkt_copy+0x92>
		} else {
			if (d_len < s_len) {
   26324:	697a      	ldr	r2, [r7, #20]
   26326:	69bb      	ldr	r3, [r7, #24]
   26328:	429a      	cmp	r2, r3
   2632a:	d202      	bcs.n	26332 <net_pkt_copy+0x8e>
				len = d_len;
   2632c:	697b      	ldr	r3, [r7, #20]
   2632e:	627b      	str	r3, [r7, #36]	; 0x24
   26330:	e001      	b.n	26336 <net_pkt_copy+0x92>
			} else {
				len = s_len;
   26332:	69bb      	ldr	r3, [r7, #24]
   26334:	627b      	str	r3, [r7, #36]	; 0x24
			}
		}

		if (!len) {
   26336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   26338:	2b00      	cmp	r3, #0
   2633a:	d031      	beq.n	263a0 <net_pkt_copy+0xfc>
			break;
		}

		memcpy(c_dst->pos, c_src->pos, len);
   2633c:	69fb      	ldr	r3, [r7, #28]
   2633e:	6858      	ldr	r0, [r3, #4]
   26340:	6a3b      	ldr	r3, [r7, #32]
   26342:	685b      	ldr	r3, [r3, #4]
   26344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   26346:	4619      	mov	r1, r3
   26348:	f7db fe8e 	bl	2068 <memcpy>

		if (!net_pkt_is_being_overwritten(pkt_dst)) {
   2634c:	68f8      	ldr	r0, [r7, #12]
   2634e:	f7ff fb05 	bl	2595c <net_pkt_is_being_overwritten>
   26352:	4603      	mov	r3, r0
   26354:	f083 0301 	eor.w	r3, r3, #1
   26358:	b2db      	uxtb	r3, r3
   2635a:	2b00      	cmp	r3, #0
   2635c:	d006      	beq.n	2636c <net_pkt_copy+0xc8>
			net_buf_add(c_dst->buf, len);
   2635e:	69fb      	ldr	r3, [r7, #28]
   26360:	681b      	ldr	r3, [r3, #0]
   26362:	3308      	adds	r3, #8
   26364:	6a79      	ldr	r1, [r7, #36]	; 0x24
   26366:	4618      	mov	r0, r3
   26368:	f7fb fcca 	bl	21d00 <net_buf_simple_add>
		}

		pkt_cursor_update(pkt_dst, len, true);
   2636c:	2201      	movs	r2, #1
   2636e:	6a79      	ldr	r1, [r7, #36]	; 0x24
   26370:	68f8      	ldr	r0, [r7, #12]
   26372:	f7ff fe23 	bl	25fbc <pkt_cursor_update>
		pkt_cursor_update(pkt_src, len, false);
   26376:	2200      	movs	r2, #0
   26378:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2637a:	68b8      	ldr	r0, [r7, #8]
   2637c:	f7ff fe1e 	bl	25fbc <pkt_cursor_update>

		length -= len;
   26380:	687a      	ldr	r2, [r7, #4]
   26382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   26384:	1ad3      	subs	r3, r2, r3
   26386:	607b      	str	r3, [r7, #4]
	while (c_dst->buf && c_src->buf && length) {
   26388:	69fb      	ldr	r3, [r7, #28]
   2638a:	681b      	ldr	r3, [r3, #0]
   2638c:	2b00      	cmp	r3, #0
   2638e:	d008      	beq.n	263a2 <net_pkt_copy+0xfe>
   26390:	6a3b      	ldr	r3, [r7, #32]
   26392:	681b      	ldr	r3, [r3, #0]
   26394:	2b00      	cmp	r3, #0
   26396:	d004      	beq.n	263a2 <net_pkt_copy+0xfe>
   26398:	687b      	ldr	r3, [r7, #4]
   2639a:	2b00      	cmp	r3, #0
   2639c:	d18f      	bne.n	262be <net_pkt_copy+0x1a>
   2639e:	e000      	b.n	263a2 <net_pkt_copy+0xfe>
			break;
   263a0:	bf00      	nop
	}

	if (length) {
   263a2:	687b      	ldr	r3, [r7, #4]
   263a4:	2b00      	cmp	r3, #0
   263a6:	d006      	beq.n	263b6 <net_pkt_copy+0x112>
		NET_DBG("Still some length to go %zu", length);
   263a8:	f7ff fa1b 	bl	257e2 <_is_user_context>
   263ac:	4603      	mov	r3, r0
   263ae:	74fb      	strb	r3, [r7, #19]
		return -ENOBUFS;
   263b0:	f06f 0368 	mvn.w	r3, #104	; 0x68
   263b4:	e000      	b.n	263b8 <net_pkt_copy+0x114>
	}

	return 0;
   263b6:	2300      	movs	r3, #0
}
   263b8:	4618      	mov	r0, r3
   263ba:	3728      	adds	r7, #40	; 0x28
   263bc:	46bd      	mov	sp, r7
   263be:	bd80      	pop	{r7, pc}

000263c0 <net_pkt_remaining_data>:

	return clone_pkt;
}

size_t net_pkt_remaining_data(struct net_pkt *pkt)
{
   263c0:	b480      	push	{r7}
   263c2:	b085      	sub	sp, #20
   263c4:	af00      	add	r7, sp, #0
   263c6:	6078      	str	r0, [r7, #4]
	struct net_buf *buf;
	size_t data_length;

	if (!pkt || !pkt->cursor.buf || !pkt->cursor.pos) {
   263c8:	687b      	ldr	r3, [r7, #4]
   263ca:	2b00      	cmp	r3, #0
   263cc:	d007      	beq.n	263de <net_pkt_remaining_data+0x1e>
   263ce:	687b      	ldr	r3, [r7, #4]
   263d0:	699b      	ldr	r3, [r3, #24]
   263d2:	2b00      	cmp	r3, #0
   263d4:	d003      	beq.n	263de <net_pkt_remaining_data+0x1e>
   263d6:	687b      	ldr	r3, [r7, #4]
   263d8:	69db      	ldr	r3, [r3, #28]
   263da:	2b00      	cmp	r3, #0
   263dc:	d101      	bne.n	263e2 <net_pkt_remaining_data+0x22>
		return 0;
   263de:	2300      	movs	r3, #0
   263e0:	e01d      	b.n	2641e <net_pkt_remaining_data+0x5e>
	}

	buf = pkt->cursor.buf;
   263e2:	687b      	ldr	r3, [r7, #4]
   263e4:	699b      	ldr	r3, [r3, #24]
   263e6:	60fb      	str	r3, [r7, #12]
	data_length = buf->len - (pkt->cursor.pos - buf->data);
   263e8:	68fb      	ldr	r3, [r7, #12]
   263ea:	899b      	ldrh	r3, [r3, #12]
   263ec:	4619      	mov	r1, r3
   263ee:	687b      	ldr	r3, [r7, #4]
   263f0:	69da      	ldr	r2, [r3, #28]
   263f2:	68fb      	ldr	r3, [r7, #12]
   263f4:	689b      	ldr	r3, [r3, #8]
   263f6:	1ad3      	subs	r3, r2, r3
   263f8:	1acb      	subs	r3, r1, r3
   263fa:	60bb      	str	r3, [r7, #8]

	buf = buf->frags;
   263fc:	68fb      	ldr	r3, [r7, #12]
   263fe:	681b      	ldr	r3, [r3, #0]
   26400:	60fb      	str	r3, [r7, #12]
	while (buf) {
   26402:	e008      	b.n	26416 <net_pkt_remaining_data+0x56>
		data_length += buf->len;
   26404:	68fb      	ldr	r3, [r7, #12]
   26406:	899b      	ldrh	r3, [r3, #12]
   26408:	461a      	mov	r2, r3
   2640a:	68bb      	ldr	r3, [r7, #8]
   2640c:	4413      	add	r3, r2
   2640e:	60bb      	str	r3, [r7, #8]
		buf = buf->frags;
   26410:	68fb      	ldr	r3, [r7, #12]
   26412:	681b      	ldr	r3, [r3, #0]
   26414:	60fb      	str	r3, [r7, #12]
	while (buf) {
   26416:	68fb      	ldr	r3, [r7, #12]
   26418:	2b00      	cmp	r3, #0
   2641a:	d1f3      	bne.n	26404 <net_pkt_remaining_data+0x44>
	}

	return data_length;
   2641c:	68bb      	ldr	r3, [r7, #8]
}
   2641e:	4618      	mov	r0, r3
   26420:	3714      	adds	r7, #20
   26422:	46bd      	mov	sp, r7
   26424:	bc80      	pop	{r7}
   26426:	4770      	bx	lr

00026428 <net_pkt_update_length>:

int net_pkt_update_length(struct net_pkt *pkt, size_t length)
{
   26428:	b480      	push	{r7}
   2642a:	b085      	sub	sp, #20
   2642c:	af00      	add	r7, sp, #0
   2642e:	6078      	str	r0, [r7, #4]
   26430:	6039      	str	r1, [r7, #0]
	struct net_buf *buf;

	for (buf = pkt->buffer; buf; buf = buf->frags) {
   26432:	687b      	ldr	r3, [r7, #4]
   26434:	695b      	ldr	r3, [r3, #20]
   26436:	60fb      	str	r3, [r7, #12]
   26438:	e015      	b.n	26466 <net_pkt_update_length+0x3e>
		if (buf->len < length) {
   2643a:	68fb      	ldr	r3, [r7, #12]
   2643c:	899b      	ldrh	r3, [r3, #12]
   2643e:	461a      	mov	r2, r3
   26440:	683b      	ldr	r3, [r7, #0]
   26442:	4293      	cmp	r3, r2
   26444:	d906      	bls.n	26454 <net_pkt_update_length+0x2c>
			length -= buf->len;
   26446:	68fb      	ldr	r3, [r7, #12]
   26448:	899b      	ldrh	r3, [r3, #12]
   2644a:	461a      	mov	r2, r3
   2644c:	683b      	ldr	r3, [r7, #0]
   2644e:	1a9b      	subs	r3, r3, r2
   26450:	603b      	str	r3, [r7, #0]
   26452:	e005      	b.n	26460 <net_pkt_update_length+0x38>
		} else {
			buf->len = length;
   26454:	683b      	ldr	r3, [r7, #0]
   26456:	b29a      	uxth	r2, r3
   26458:	68fb      	ldr	r3, [r7, #12]
   2645a:	819a      	strh	r2, [r3, #12]
			length = 0;
   2645c:	2300      	movs	r3, #0
   2645e:	603b      	str	r3, [r7, #0]
	for (buf = pkt->buffer; buf; buf = buf->frags) {
   26460:	68fb      	ldr	r3, [r7, #12]
   26462:	681b      	ldr	r3, [r3, #0]
   26464:	60fb      	str	r3, [r7, #12]
   26466:	68fb      	ldr	r3, [r7, #12]
   26468:	2b00      	cmp	r3, #0
   2646a:	d1e6      	bne.n	2643a <net_pkt_update_length+0x12>
		}
	}

	return !length ? 0 : -EINVAL;
   2646c:	683b      	ldr	r3, [r7, #0]
   2646e:	2b00      	cmp	r3, #0
   26470:	d101      	bne.n	26476 <net_pkt_update_length+0x4e>
   26472:	2300      	movs	r3, #0
   26474:	e001      	b.n	2647a <net_pkt_update_length+0x52>
   26476:	f06f 0315 	mvn.w	r3, #21
}
   2647a:	4618      	mov	r0, r3
   2647c:	3714      	adds	r7, #20
   2647e:	46bd      	mov	sp, r7
   26480:	bc80      	pop	{r7}
   26482:	4770      	bx	lr

00026484 <net_pkt_is_contiguous>:

	return offset;
}

bool net_pkt_is_contiguous(struct net_pkt *pkt, size_t size)
{
   26484:	b580      	push	{r7, lr}
   26486:	b084      	sub	sp, #16
   26488:	af00      	add	r7, sp, #0
   2648a:	6078      	str	r0, [r7, #4]
   2648c:	6039      	str	r1, [r7, #0]
	if (pkt->cursor.buf && pkt->cursor.pos) {
   2648e:	687b      	ldr	r3, [r7, #4]
   26490:	699b      	ldr	r3, [r3, #24]
   26492:	2b00      	cmp	r3, #0
   26494:	d021      	beq.n	264da <net_pkt_is_contiguous+0x56>
   26496:	687b      	ldr	r3, [r7, #4]
   26498:	69db      	ldr	r3, [r3, #28]
   2649a:	2b00      	cmp	r3, #0
   2649c:	d01d      	beq.n	264da <net_pkt_is_contiguous+0x56>
		size_t len;

		len = net_pkt_is_being_overwritten(pkt) ?
   2649e:	6878      	ldr	r0, [r7, #4]
   264a0:	f7ff fa5c 	bl	2595c <net_pkt_is_being_overwritten>
   264a4:	4603      	mov	r3, r0
			pkt->cursor.buf->len : pkt->cursor.buf->size;
   264a6:	2b00      	cmp	r3, #0
   264a8:	d003      	beq.n	264b2 <net_pkt_is_contiguous+0x2e>
   264aa:	687b      	ldr	r3, [r7, #4]
   264ac:	699b      	ldr	r3, [r3, #24]
   264ae:	899b      	ldrh	r3, [r3, #12]
   264b0:	e002      	b.n	264b8 <net_pkt_is_contiguous+0x34>
   264b2:	687b      	ldr	r3, [r7, #4]
   264b4:	699b      	ldr	r3, [r3, #24]
   264b6:	89db      	ldrh	r3, [r3, #14]
		len = net_pkt_is_being_overwritten(pkt) ?
   264b8:	60fb      	str	r3, [r7, #12]
		len -= pkt->cursor.pos - pkt->cursor.buf->data;
   264ba:	687b      	ldr	r3, [r7, #4]
   264bc:	69da      	ldr	r2, [r3, #28]
   264be:	687b      	ldr	r3, [r7, #4]
   264c0:	699b      	ldr	r3, [r3, #24]
   264c2:	689b      	ldr	r3, [r3, #8]
   264c4:	1ad3      	subs	r3, r2, r3
   264c6:	461a      	mov	r2, r3
   264c8:	68fb      	ldr	r3, [r7, #12]
   264ca:	1a9b      	subs	r3, r3, r2
   264cc:	60fb      	str	r3, [r7, #12]
		if (len >= size) {
   264ce:	68fa      	ldr	r2, [r7, #12]
   264d0:	683b      	ldr	r3, [r7, #0]
   264d2:	429a      	cmp	r2, r3
   264d4:	d301      	bcc.n	264da <net_pkt_is_contiguous+0x56>
			return true;
   264d6:	2301      	movs	r3, #1
   264d8:	e000      	b.n	264dc <net_pkt_is_contiguous+0x58>
		}
	}

	return false;
   264da:	2300      	movs	r3, #0
}
   264dc:	4618      	mov	r0, r3
   264de:	3710      	adds	r7, #16
   264e0:	46bd      	mov	sp, r7
   264e2:	bd80      	pop	{r7, pc}

000264e4 <net_pkt_get_data>:

void *net_pkt_get_data(struct net_pkt *pkt,
		       struct net_pkt_data_access *access)
{
   264e4:	b580      	push	{r7, lr}
   264e6:	b086      	sub	sp, #24
   264e8:	af00      	add	r7, sp, #0
   264ea:	6078      	str	r0, [r7, #4]
   264ec:	6039      	str	r1, [r7, #0]
			return NULL;
		}

		return pkt->cursor.pos;
	} else {
		if (net_pkt_is_contiguous(pkt, access->size)) {
   264ee:	683b      	ldr	r3, [r7, #0]
   264f0:	685b      	ldr	r3, [r3, #4]
   264f2:	4619      	mov	r1, r3
   264f4:	6878      	ldr	r0, [r7, #4]
   264f6:	f7ff ffc5 	bl	26484 <net_pkt_is_contiguous>
   264fa:	4603      	mov	r3, r0
   264fc:	2b00      	cmp	r3, #0
   264fe:	d004      	beq.n	2650a <net_pkt_get_data+0x26>
			access->data = pkt->cursor.pos;
   26500:	687b      	ldr	r3, [r7, #4]
   26502:	69da      	ldr	r2, [r3, #28]
   26504:	683b      	ldr	r3, [r7, #0]
   26506:	601a      	str	r2, [r3, #0]
   26508:	e02e      	b.n	26568 <net_pkt_get_data+0x84>
		} else if (net_pkt_is_being_overwritten(pkt)) {
   2650a:	6878      	ldr	r0, [r7, #4]
   2650c:	f7ff fa26 	bl	2595c <net_pkt_is_being_overwritten>
   26510:	4603      	mov	r3, r0
   26512:	2b00      	cmp	r3, #0
   26514:	d028      	beq.n	26568 <net_pkt_get_data+0x84>
			struct net_pkt_cursor backup;

			if (!access->data) {
   26516:	683b      	ldr	r3, [r7, #0]
   26518:	681b      	ldr	r3, [r3, #0]
   2651a:	2b00      	cmp	r3, #0
   2651c:	d105      	bne.n	2652a <net_pkt_get_data+0x46>
				NET_ERR("Uncontiguous data"
   2651e:	f7ff f960 	bl	257e2 <_is_user_context>
   26522:	4603      	mov	r3, r0
   26524:	75fb      	strb	r3, [r7, #23]
					" cannot be linearized");
				return NULL;
   26526:	2300      	movs	r3, #0
   26528:	e020      	b.n	2656c <net_pkt_get_data+0x88>
			}

			net_pkt_cursor_backup(pkt, &backup);
   2652a:	f107 030c 	add.w	r3, r7, #12
   2652e:	4619      	mov	r1, r3
   26530:	6878      	ldr	r0, [r7, #4]
   26532:	f7ff fa27 	bl	25984 <net_pkt_cursor_backup>

			if (net_pkt_read(pkt, access->data, access->size)) {
   26536:	683b      	ldr	r3, [r7, #0]
   26538:	6819      	ldr	r1, [r3, #0]
   2653a:	683b      	ldr	r3, [r7, #0]
   2653c:	685b      	ldr	r3, [r3, #4]
   2653e:	461a      	mov	r2, r3
   26540:	6878      	ldr	r0, [r7, #4]
   26542:	f7ff fe6d 	bl	26220 <net_pkt_read>
   26546:	4603      	mov	r3, r0
   26548:	2b00      	cmp	r3, #0
   2654a:	d007      	beq.n	2655c <net_pkt_get_data+0x78>
				net_pkt_cursor_restore(pkt, &backup);
   2654c:	f107 030c 	add.w	r3, r7, #12
   26550:	4619      	mov	r1, r3
   26552:	6878      	ldr	r0, [r7, #4]
   26554:	f7ff fa28 	bl	259a8 <net_pkt_cursor_restore>
				return NULL;
   26558:	2300      	movs	r3, #0
   2655a:	e007      	b.n	2656c <net_pkt_get_data+0x88>
			}

			net_pkt_cursor_restore(pkt, &backup);
   2655c:	f107 030c 	add.w	r3, r7, #12
   26560:	4619      	mov	r1, r3
   26562:	6878      	ldr	r0, [r7, #4]
   26564:	f7ff fa20 	bl	259a8 <net_pkt_cursor_restore>
		}

		return access->data;
   26568:	683b      	ldr	r3, [r7, #0]
   2656a:	681b      	ldr	r3, [r3, #0]
	}

	return NULL;
}
   2656c:	4618      	mov	r0, r3
   2656e:	3718      	adds	r7, #24
   26570:	46bd      	mov	sp, r7
   26572:	bd80      	pop	{r7, pc}

00026574 <net_pkt_set_data>:

int net_pkt_set_data(struct net_pkt *pkt,
		     struct net_pkt_data_access *access)
{
   26574:	b580      	push	{r7, lr}
   26576:	b082      	sub	sp, #8
   26578:	af00      	add	r7, sp, #0
   2657a:	6078      	str	r0, [r7, #4]
   2657c:	6039      	str	r1, [r7, #0]
	if (IS_ENABLED(CONFIG_NET_HEADERS_ALWAYS_CONTIGUOUS)) {
		return net_pkt_skip(pkt, access->size);
	}

	return net_pkt_write(pkt, access->data, access->size);
   2657e:	683b      	ldr	r3, [r7, #0]
   26580:	6819      	ldr	r1, [r3, #0]
   26582:	683b      	ldr	r3, [r7, #0]
   26584:	685b      	ldr	r3, [r3, #4]
   26586:	461a      	mov	r2, r3
   26588:	6878      	ldr	r0, [r7, #4]
   2658a:	f7ff fe61 	bl	26250 <net_pkt_write>
   2658e:	4603      	mov	r3, r0
}
   26590:	4618      	mov	r0, r3
   26592:	3708      	adds	r7, #8
   26594:	46bd      	mov	sp, r7
   26596:	bd80      	pop	{r7, pc}

00026598 <net_pkt_init>:

void net_pkt_init(void)
{
   26598:	b480      	push	{r7}
   2659a:	af00      	add	r7, sp, #0
		(size_t)(k_mem_slab_num_free_get(&tx_pkts) *
			 sizeof(struct net_pkt)),
		get_frees(&rx_bufs), get_size(&rx_bufs),
		get_frees(&tx_bufs), get_size(&tx_bufs));
#endif
}
   2659c:	bf00      	nop
   2659e:	46bd      	mov	sp, r7
   265a0:	bc80      	pop	{r7}
   265a2:	4770      	bx	lr

000265a4 <atomic_or>:
{
   265a4:	b480      	push	{r7}
   265a6:	b083      	sub	sp, #12
   265a8:	af00      	add	r7, sp, #0
   265aa:	6078      	str	r0, [r7, #4]
   265ac:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   265ae:	683a      	ldr	r2, [r7, #0]
   265b0:	687b      	ldr	r3, [r7, #4]
   265b2:	f3bf 8f5b 	dmb	ish
   265b6:	e853 1f00 	ldrex	r1, [r3]
   265ba:	ea41 0002 	orr.w	r0, r1, r2
   265be:	e843 0c00 	strex	ip, r0, [r3]
   265c2:	f1bc 0f00 	cmp.w	ip, #0
   265c6:	d1f6      	bne.n	265b6 <atomic_or+0x12>
   265c8:	f3bf 8f5b 	dmb	ish
   265cc:	460b      	mov	r3, r1
}
   265ce:	4618      	mov	r0, r3
   265d0:	370c      	adds	r7, #12
   265d2:	46bd      	mov	sp, r7
   265d4:	bc80      	pop	{r7}
   265d6:	4770      	bx	lr

000265d8 <atomic_test_and_set_bit>:
{
   265d8:	b580      	push	{r7, lr}
   265da:	b084      	sub	sp, #16
   265dc:	af00      	add	r7, sp, #0
   265de:	6078      	str	r0, [r7, #4]
   265e0:	6039      	str	r1, [r7, #0]
	atomic_val_t mask = ATOMIC_MASK(bit);
   265e2:	683b      	ldr	r3, [r7, #0]
   265e4:	f003 031f 	and.w	r3, r3, #31
   265e8:	2201      	movs	r2, #1
   265ea:	fa02 f303 	lsl.w	r3, r2, r3
   265ee:	60fb      	str	r3, [r7, #12]
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   265f0:	683b      	ldr	r3, [r7, #0]
   265f2:	095b      	lsrs	r3, r3, #5
   265f4:	009b      	lsls	r3, r3, #2
   265f6:	687a      	ldr	r2, [r7, #4]
   265f8:	4413      	add	r3, r2
   265fa:	68f9      	ldr	r1, [r7, #12]
   265fc:	4618      	mov	r0, r3
   265fe:	f7ff ffd1 	bl	265a4 <atomic_or>
   26602:	60b8      	str	r0, [r7, #8]
	return (old & mask) != 0;
   26604:	68ba      	ldr	r2, [r7, #8]
   26606:	68fb      	ldr	r3, [r7, #12]
   26608:	4013      	ands	r3, r2
   2660a:	2b00      	cmp	r3, #0
   2660c:	bf14      	ite	ne
   2660e:	2301      	movne	r3, #1
   26610:	2300      	moveq	r3, #0
   26612:	b2db      	uxtb	r3, r3
}
   26614:	4618      	mov	r0, r3
   26616:	3710      	adds	r7, #16
   26618:	46bd      	mov	sp, r7
   2661a:	bd80      	pop	{r7, pc}

0002661c <_is_user_context>:
{
   2661c:	b480      	push	{r7}
   2661e:	af00      	add	r7, sp, #0
	return false;
   26620:	2300      	movs	r3, #0
}
   26622:	4618      	mov	r0, r3
   26624:	46bd      	mov	sp, r7
   26626:	bc80      	pop	{r7}
   26628:	4770      	bx	lr

0002662a <k_work_submit_to_queue>:
{
   2662a:	b580      	push	{r7, lr}
   2662c:	b082      	sub	sp, #8
   2662e:	af00      	add	r7, sp, #0
   26630:	6078      	str	r0, [r7, #4]
   26632:	6039      	str	r1, [r7, #0]
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   26634:	683b      	ldr	r3, [r7, #0]
   26636:	3308      	adds	r3, #8
   26638:	2100      	movs	r1, #0
   2663a:	4618      	mov	r0, r3
   2663c:	f7ff ffcc 	bl	265d8 <atomic_test_and_set_bit>
   26640:	4603      	mov	r3, r0
   26642:	f083 0301 	eor.w	r3, r3, #1
   26646:	b2db      	uxtb	r3, r3
   26648:	2b00      	cmp	r3, #0
   2664a:	d004      	beq.n	26656 <k_work_submit_to_queue+0x2c>
		k_queue_append(&work_q->queue, work);
   2664c:	687b      	ldr	r3, [r7, #4]
   2664e:	6839      	ldr	r1, [r7, #0]
   26650:	4618      	mov	r0, r3
   26652:	f004 f88c 	bl	2a76e <k_queue_append>
}
   26656:	bf00      	nop
   26658:	3708      	adds	r7, #8
   2665a:	46bd      	mov	sp, r7
   2665c:	bd80      	pop	{r7, pc}

0002665e <k_thread_name_set>:
K_SYSCALL_DECLARE2(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, int, k_tid_t, thread_id, const char *, value)
   2665e:	b580      	push	{r7, lr}
   26660:	b082      	sub	sp, #8
   26662:	af00      	add	r7, sp, #0
   26664:	6078      	str	r0, [r7, #4]
   26666:	6039      	str	r1, [r7, #0]
   26668:	6839      	ldr	r1, [r7, #0]
   2666a:	6878      	ldr	r0, [r7, #4]
   2666c:	f004 ffb8 	bl	2b5e0 <z_impl_k_thread_name_set>
   26670:	4603      	mov	r3, r0
   26672:	4618      	mov	r0, r3
   26674:	3708      	adds	r7, #8
   26676:	46bd      	mov	sp, r7
   26678:	bd80      	pop	{r7, pc}

0002667a <net_pkt_work>:
{
   2667a:	b480      	push	{r7}
   2667c:	b083      	sub	sp, #12
   2667e:	af00      	add	r7, sp, #0
   26680:	6078      	str	r0, [r7, #4]
	return &pkt->work;
   26682:	687b      	ldr	r3, [r7, #4]
   26684:	3304      	adds	r3, #4
}
   26686:	4618      	mov	r0, r3
   26688:	370c      	adds	r7, #12
   2668a:	46bd      	mov	sp, r7
   2668c:	bc80      	pop	{r7}
   2668e:	4770      	bx	lr

00026690 <_is_user_context>:
{
   26690:	b480      	push	{r7}
   26692:	af00      	add	r7, sp, #0
	return false;
   26694:	2300      	movs	r3, #0
}
   26696:	4618      	mov	r0, r3
   26698:	46bd      	mov	sp, r7
   2669a:	bc80      	pop	{r7}
   2669c:	4770      	bx	lr

0002669e <net_buf_frags_len>:
{
   2669e:	b480      	push	{r7}
   266a0:	b085      	sub	sp, #20
   266a2:	af00      	add	r7, sp, #0
   266a4:	6078      	str	r0, [r7, #4]
	size_t bytes = 0;
   266a6:	2300      	movs	r3, #0
   266a8:	60fb      	str	r3, [r7, #12]
	while (buf) {
   266aa:	e008      	b.n	266be <net_buf_frags_len+0x20>
		bytes += buf->len;
   266ac:	687b      	ldr	r3, [r7, #4]
   266ae:	899b      	ldrh	r3, [r3, #12]
   266b0:	461a      	mov	r2, r3
   266b2:	68fb      	ldr	r3, [r7, #12]
   266b4:	4413      	add	r3, r2
   266b6:	60fb      	str	r3, [r7, #12]
		buf = buf->frags;
   266b8:	687b      	ldr	r3, [r7, #4]
   266ba:	681b      	ldr	r3, [r3, #0]
   266bc:	607b      	str	r3, [r7, #4]
	while (buf) {
   266be:	687b      	ldr	r3, [r7, #4]
   266c0:	2b00      	cmp	r3, #0
   266c2:	d1f3      	bne.n	266ac <net_buf_frags_len+0xe>
	return bytes;
   266c4:	68fb      	ldr	r3, [r7, #12]
}
   266c6:	4618      	mov	r0, r3
   266c8:	3714      	adds	r7, #20
   266ca:	46bd      	mov	sp, r7
   266cc:	bc80      	pop	{r7}
   266ce:	4770      	bx	lr

000266d0 <net_pkt_family>:
{
   266d0:	b480      	push	{r7}
   266d2:	b083      	sub	sp, #12
   266d4:	af00      	add	r7, sp, #0
   266d6:	6078      	str	r0, [r7, #4]
	return pkt->family;
   266d8:	687b      	ldr	r3, [r7, #4]
   266da:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
   266de:	f3c3 0342 	ubfx	r3, r3, #1, #3
   266e2:	b2db      	uxtb	r3, r3
}
   266e4:	4618      	mov	r0, r3
   266e6:	370c      	adds	r7, #12
   266e8:	46bd      	mov	sp, r7
   266ea:	bc80      	pop	{r7}
   266ec:	4770      	bx	lr

000266ee <net_pkt_ip_hdr_len>:
{
   266ee:	b480      	push	{r7}
   266f0:	b083      	sub	sp, #12
   266f2:	af00      	add	r7, sp, #0
   266f4:	6078      	str	r0, [r7, #4]
	return pkt->ip_hdr_len;
   266f6:	687b      	ldr	r3, [r7, #4]
   266f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
}
   266fc:	4618      	mov	r0, r3
   266fe:	370c      	adds	r7, #12
   26700:	46bd      	mov	sp, r7
   26702:	bc80      	pop	{r7}
   26704:	4770      	bx	lr

00026706 <net_pkt_ipv6_ext_len>:
{
   26706:	b480      	push	{r7}
   26708:	b083      	sub	sp, #12
   2670a:	af00      	add	r7, sp, #0
   2670c:	6078      	str	r0, [r7, #4]
	return 0;
   2670e:	2300      	movs	r3, #0
}
   26710:	4618      	mov	r0, r3
   26712:	370c      	adds	r7, #12
   26714:	46bd      	mov	sp, r7
   26716:	bc80      	pop	{r7}
   26718:	4770      	bx	lr

0002671a <net_pkt_get_len>:
{
   2671a:	b580      	push	{r7, lr}
   2671c:	b082      	sub	sp, #8
   2671e:	af00      	add	r7, sp, #0
   26720:	6078      	str	r0, [r7, #4]
	return net_buf_frags_len(pkt->frags);
   26722:	687b      	ldr	r3, [r7, #4]
   26724:	695b      	ldr	r3, [r3, #20]
   26726:	4618      	mov	r0, r3
   26728:	f7ff ffb9 	bl	2669e <net_buf_frags_len>
   2672c:	4603      	mov	r3, r0
}
   2672e:	4618      	mov	r0, r3
   26730:	3708      	adds	r7, #8
   26732:	46bd      	mov	sp, r7
   26734:	bd80      	pop	{r7, pc}

00026736 <net_pkt_set_overwrite>:
{
   26736:	b480      	push	{r7}
   26738:	b083      	sub	sp, #12
   2673a:	af00      	add	r7, sp, #0
   2673c:	6078      	str	r0, [r7, #4]
   2673e:	460b      	mov	r3, r1
   26740:	70fb      	strb	r3, [r7, #3]
	pkt->overwrite = overwrite;
   26742:	687a      	ldr	r2, [r7, #4]
   26744:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
   26748:	78f9      	ldrb	r1, [r7, #3]
   2674a:	f361 0300 	bfi	r3, r1, #0, #1
   2674e:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
}
   26752:	bf00      	nop
   26754:	370c      	adds	r7, #12
   26756:	46bd      	mov	sp, r7
   26758:	bc80      	pop	{r7}
   2675a:	4770      	bx	lr

0002675c <net_pkt_is_being_overwritten>:
{
   2675c:	b480      	push	{r7}
   2675e:	b083      	sub	sp, #12
   26760:	af00      	add	r7, sp, #0
   26762:	6078      	str	r0, [r7, #4]
	return pkt->overwrite;
   26764:	687b      	ldr	r3, [r7, #4]
   26766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   2676a:	f3c3 0300 	ubfx	r3, r3, #0, #1
   2676e:	b2db      	uxtb	r3, r3
   26770:	2b00      	cmp	r3, #0
   26772:	bf14      	ite	ne
   26774:	2301      	movne	r3, #1
   26776:	2300      	moveq	r3, #0
   26778:	b2db      	uxtb	r3, r3
}
   2677a:	4618      	mov	r0, r3
   2677c:	370c      	adds	r7, #12
   2677e:	46bd      	mov	sp, r7
   26780:	bc80      	pop	{r7}
   26782:	4770      	bx	lr

00026784 <net_pkt_cursor_backup>:
{
   26784:	b480      	push	{r7}
   26786:	b083      	sub	sp, #12
   26788:	af00      	add	r7, sp, #0
   2678a:	6078      	str	r0, [r7, #4]
   2678c:	6039      	str	r1, [r7, #0]
	backup->buf = pkt->cursor.buf;
   2678e:	687b      	ldr	r3, [r7, #4]
   26790:	699a      	ldr	r2, [r3, #24]
   26792:	683b      	ldr	r3, [r7, #0]
   26794:	601a      	str	r2, [r3, #0]
	backup->pos = pkt->cursor.pos;
   26796:	687b      	ldr	r3, [r7, #4]
   26798:	69da      	ldr	r2, [r3, #28]
   2679a:	683b      	ldr	r3, [r7, #0]
   2679c:	605a      	str	r2, [r3, #4]
}
   2679e:	bf00      	nop
   267a0:	370c      	adds	r7, #12
   267a2:	46bd      	mov	sp, r7
   267a4:	bc80      	pop	{r7}
   267a6:	4770      	bx	lr

000267a8 <net_pkt_cursor_restore>:
{
   267a8:	b480      	push	{r7}
   267aa:	b083      	sub	sp, #12
   267ac:	af00      	add	r7, sp, #0
   267ae:	6078      	str	r0, [r7, #4]
   267b0:	6039      	str	r1, [r7, #0]
	pkt->cursor.buf = backup->buf;
   267b2:	683b      	ldr	r3, [r7, #0]
   267b4:	681a      	ldr	r2, [r3, #0]
   267b6:	687b      	ldr	r3, [r7, #4]
   267b8:	619a      	str	r2, [r3, #24]
	pkt->cursor.pos = backup->pos;
   267ba:	683b      	ldr	r3, [r7, #0]
   267bc:	685a      	ldr	r2, [r3, #4]
   267be:	687b      	ldr	r3, [r7, #4]
   267c0:	61da      	str	r2, [r3, #28]
}
   267c2:	bf00      	nop
   267c4:	370c      	adds	r7, #12
   267c6:	46bd      	mov	sp, r7
   267c8:	bc80      	pop	{r7}
   267ca:	4770      	bx	lr

000267cc <net_addr_pton>:
	return dst;
}

int net_addr_pton(sa_family_t family, const char *src,
		  void *dst)
{
   267cc:	b590      	push	{r4, r7, lr}
   267ce:	b091      	sub	sp, #68	; 0x44
   267d0:	af00      	add	r7, sp, #0
   267d2:	4603      	mov	r3, r0
   267d4:	60b9      	str	r1, [r7, #8]
   267d6:	607a      	str	r2, [r7, #4]
   267d8:	81fb      	strh	r3, [r7, #14]
	if (family == AF_INET) {
   267da:	89fb      	ldrh	r3, [r7, #14]
   267dc:	2b01      	cmp	r3, #1
   267de:	d146      	bne.n	2686e <net_addr_pton+0xa2>
		struct in_addr *addr = (struct in_addr *)dst;
   267e0:	687b      	ldr	r3, [r7, #4]
   267e2:	633b      	str	r3, [r7, #48]	; 0x30
		size_t i, len;

		len = strlen(src);
   267e4:	68b8      	ldr	r0, [r7, #8]
   267e6:	f7db fc86 	bl	20f6 <strlen>
   267ea:	62f8      	str	r0, [r7, #44]	; 0x2c
		for (i = 0; i < len; i++) {
   267ec:	2300      	movs	r3, #0
   267ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   267f0:	e017      	b.n	26822 <net_addr_pton+0x56>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   267f2:	68ba      	ldr	r2, [r7, #8]
   267f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   267f6:	4413      	add	r3, r2
   267f8:	781b      	ldrb	r3, [r3, #0]
   267fa:	2b2f      	cmp	r3, #47	; 0x2f
   267fc:	d905      	bls.n	2680a <net_addr_pton+0x3e>
   267fe:	68ba      	ldr	r2, [r7, #8]
   26800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   26802:	4413      	add	r3, r2
   26804:	781b      	ldrb	r3, [r3, #0]
   26806:	2b39      	cmp	r3, #57	; 0x39
   26808:	d908      	bls.n	2681c <net_addr_pton+0x50>
			    src[i] != '.') {
   2680a:	68ba      	ldr	r2, [r7, #8]
   2680c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2680e:	4413      	add	r3, r2
   26810:	781b      	ldrb	r3, [r3, #0]
			if (!(src[i] >= '0' && src[i] <= '9') &&
   26812:	2b2e      	cmp	r3, #46	; 0x2e
   26814:	d002      	beq.n	2681c <net_addr_pton+0x50>
				return -EINVAL;
   26816:	f06f 0315 	mvn.w	r3, #21
   2681a:	e14d      	b.n	26ab8 <net_addr_pton+0x2ec>
		for (i = 0; i < len; i++) {
   2681c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2681e:	3301      	adds	r3, #1
   26820:	63fb      	str	r3, [r7, #60]	; 0x3c
   26822:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   26824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26826:	429a      	cmp	r2, r3
   26828:	d3e3      	bcc.n	267f2 <net_addr_pton+0x26>
			}
		}

		(void)memset(addr, 0, sizeof(struct in_addr));
   2682a:	2204      	movs	r2, #4
   2682c:	2100      	movs	r1, #0
   2682e:	6b38      	ldr	r0, [r7, #48]	; 0x30
   26830:	f7db fc42 	bl	20b8 <memset>

		for (i = 0; i < sizeof(struct in_addr); i++) {
   26834:	2300      	movs	r3, #0
   26836:	63fb      	str	r3, [r7, #60]	; 0x3c
   26838:	e015      	b.n	26866 <net_addr_pton+0x9a>
			char *endptr;

			addr->s4_addr[i] = strtol(src, &endptr, 10);
   2683a:	f107 0314 	add.w	r3, r7, #20
   2683e:	220a      	movs	r2, #10
   26840:	4619      	mov	r1, r3
   26842:	68b8      	ldr	r0, [r7, #8]
   26844:	f7da fb86 	bl	f54 <strtol>
   26848:	4603      	mov	r3, r0
   2684a:	b2d9      	uxtb	r1, r3
   2684c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   2684e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   26850:	4413      	add	r3, r2
   26852:	460a      	mov	r2, r1
   26854:	701a      	strb	r2, [r3, #0]

			src = ++endptr;
   26856:	697b      	ldr	r3, [r7, #20]
   26858:	3301      	adds	r3, #1
   2685a:	617b      	str	r3, [r7, #20]
   2685c:	697b      	ldr	r3, [r7, #20]
   2685e:	60bb      	str	r3, [r7, #8]
		for (i = 0; i < sizeof(struct in_addr); i++) {
   26860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   26862:	3301      	adds	r3, #1
   26864:	63fb      	str	r3, [r7, #60]	; 0x3c
   26866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   26868:	2b03      	cmp	r3, #3
   2686a:	d9e6      	bls.n	2683a <net_addr_pton+0x6e>
   2686c:	e123      	b.n	26ab6 <net_addr_pton+0x2ea>
		}

	} else if (family == AF_INET6) {
   2686e:	89fb      	ldrh	r3, [r7, #14]
   26870:	2b02      	cmp	r3, #2
   26872:	f040 811d 	bne.w	26ab0 <net_addr_pton+0x2e4>
		/* If the string contains a '.', it means it's of the form
		 * X:X:X:X:X:X:x.x.x.x, and contains only 6 16-bit pieces
		 */
		int expected_groups = strchr(src, '.') ? 6 : 8;
   26876:	212e      	movs	r1, #46	; 0x2e
   26878:	68b8      	ldr	r0, [r7, #8]
   2687a:	f7db fc25 	bl	20c8 <strchr>
   2687e:	4603      	mov	r3, r0
   26880:	2b00      	cmp	r3, #0
   26882:	d001      	beq.n	26888 <net_addr_pton+0xbc>
   26884:	2306      	movs	r3, #6
   26886:	e000      	b.n	2688a <net_addr_pton+0xbe>
   26888:	2308      	movs	r3, #8
   2688a:	62bb      	str	r3, [r7, #40]	; 0x28
		struct in6_addr *addr = (struct in6_addr *)dst;
   2688c:	687b      	ldr	r3, [r7, #4]
   2688e:	627b      	str	r3, [r7, #36]	; 0x24
		int i, len;

		if (*src == ':') {
   26890:	68bb      	ldr	r3, [r7, #8]
   26892:	781b      	ldrb	r3, [r3, #0]
   26894:	2b3a      	cmp	r3, #58	; 0x3a
   26896:	d102      	bne.n	2689e <net_addr_pton+0xd2>
			/* Ignore a leading colon, makes parsing neater */
			src++;
   26898:	68bb      	ldr	r3, [r7, #8]
   2689a:	3301      	adds	r3, #1
   2689c:	60bb      	str	r3, [r7, #8]
		}

		len = strlen(src);
   2689e:	68b8      	ldr	r0, [r7, #8]
   268a0:	f7db fc29 	bl	20f6 <strlen>
   268a4:	4603      	mov	r3, r0
   268a6:	623b      	str	r3, [r7, #32]
		for (i = 0; i < len; i++) {
   268a8:	2300      	movs	r3, #0
   268aa:	63bb      	str	r3, [r7, #56]	; 0x38
   268ac:	e035      	b.n	2691a <net_addr_pton+0x14e>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   268ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   268b0:	68ba      	ldr	r2, [r7, #8]
   268b2:	4413      	add	r3, r2
   268b4:	781b      	ldrb	r3, [r3, #0]
   268b6:	2b2f      	cmp	r3, #47	; 0x2f
   268b8:	d905      	bls.n	268c6 <net_addr_pton+0xfa>
   268ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   268bc:	68ba      	ldr	r2, [r7, #8]
   268be:	4413      	add	r3, r2
   268c0:	781b      	ldrb	r3, [r3, #0]
   268c2:	2b39      	cmp	r3, #57	; 0x39
   268c4:	d926      	bls.n	26914 <net_addr_pton+0x148>
			    !(src[i] >= 'A' && src[i] <= 'F') &&
   268c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   268c8:	68ba      	ldr	r2, [r7, #8]
   268ca:	4413      	add	r3, r2
   268cc:	781b      	ldrb	r3, [r3, #0]
			if (!(src[i] >= '0' && src[i] <= '9') &&
   268ce:	2b40      	cmp	r3, #64	; 0x40
   268d0:	d905      	bls.n	268de <net_addr_pton+0x112>
			    !(src[i] >= 'A' && src[i] <= 'F') &&
   268d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   268d4:	68ba      	ldr	r2, [r7, #8]
   268d6:	4413      	add	r3, r2
   268d8:	781b      	ldrb	r3, [r3, #0]
   268da:	2b46      	cmp	r3, #70	; 0x46
   268dc:	d91a      	bls.n	26914 <net_addr_pton+0x148>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   268de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   268e0:	68ba      	ldr	r2, [r7, #8]
   268e2:	4413      	add	r3, r2
   268e4:	781b      	ldrb	r3, [r3, #0]
			    !(src[i] >= 'A' && src[i] <= 'F') &&
   268e6:	2b60      	cmp	r3, #96	; 0x60
   268e8:	d905      	bls.n	268f6 <net_addr_pton+0x12a>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   268ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   268ec:	68ba      	ldr	r2, [r7, #8]
   268ee:	4413      	add	r3, r2
   268f0:	781b      	ldrb	r3, [r3, #0]
   268f2:	2b66      	cmp	r3, #102	; 0x66
   268f4:	d90e      	bls.n	26914 <net_addr_pton+0x148>
			    src[i] != '.' && src[i] != ':')
   268f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   268f8:	68ba      	ldr	r2, [r7, #8]
   268fa:	4413      	add	r3, r2
   268fc:	781b      	ldrb	r3, [r3, #0]
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   268fe:	2b2e      	cmp	r3, #46	; 0x2e
   26900:	d008      	beq.n	26914 <net_addr_pton+0x148>
			    src[i] != '.' && src[i] != ':')
   26902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26904:	68ba      	ldr	r2, [r7, #8]
   26906:	4413      	add	r3, r2
   26908:	781b      	ldrb	r3, [r3, #0]
   2690a:	2b3a      	cmp	r3, #58	; 0x3a
   2690c:	d002      	beq.n	26914 <net_addr_pton+0x148>
				return -EINVAL;
   2690e:	f06f 0315 	mvn.w	r3, #21
   26912:	e0d1      	b.n	26ab8 <net_addr_pton+0x2ec>
		for (i = 0; i < len; i++) {
   26914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26916:	3301      	adds	r3, #1
   26918:	63bb      	str	r3, [r7, #56]	; 0x38
   2691a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2691c:	6a3b      	ldr	r3, [r7, #32]
   2691e:	429a      	cmp	r2, r3
   26920:	dbc5      	blt.n	268ae <net_addr_pton+0xe2>
		}

		for (i = 0; i < expected_groups; i++) {
   26922:	2300      	movs	r3, #0
   26924:	63bb      	str	r3, [r7, #56]	; 0x38
   26926:	e08a      	b.n	26a3e <net_addr_pton+0x272>
			char *tmp;

			if (!src || *src == '\0') {
   26928:	68bb      	ldr	r3, [r7, #8]
   2692a:	2b00      	cmp	r3, #0
   2692c:	d003      	beq.n	26936 <net_addr_pton+0x16a>
   2692e:	68bb      	ldr	r3, [r7, #8]
   26930:	781b      	ldrb	r3, [r3, #0]
   26932:	2b00      	cmp	r3, #0
   26934:	d102      	bne.n	2693c <net_addr_pton+0x170>
				return -EINVAL;
   26936:	f06f 0315 	mvn.w	r3, #21
   2693a:	e0bd      	b.n	26ab8 <net_addr_pton+0x2ec>
			}

			if (*src != ':') {
   2693c:	68bb      	ldr	r3, [r7, #8]
   2693e:	781b      	ldrb	r3, [r3, #0]
   26940:	2b3a      	cmp	r3, #58	; 0x3a
   26942:	d03f      	beq.n	269c4 <net_addr_pton+0x1f8>
				/* Normal IPv6 16-bit piece */
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   26944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26946:	005b      	lsls	r3, r3, #1
   26948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2694a:	4413      	add	r3, r2
   2694c:	61fb      	str	r3, [r7, #28]
   2694e:	2210      	movs	r2, #16
   26950:	2100      	movs	r1, #0
   26952:	68b8      	ldr	r0, [r7, #8]
   26954:	f7da fafe 	bl	f54 <strtol>
   26958:	4603      	mov	r3, r0
   2695a:	121b      	asrs	r3, r3, #8
   2695c:	b21b      	sxth	r3, r3
   2695e:	b2db      	uxtb	r3, r3
   26960:	b21c      	sxth	r4, r3
   26962:	2210      	movs	r2, #16
   26964:	2100      	movs	r1, #0
   26966:	68b8      	ldr	r0, [r7, #8]
   26968:	f7da faf4 	bl	f54 <strtol>
   2696c:	4603      	mov	r3, r0
   2696e:	021b      	lsls	r3, r3, #8
   26970:	b21b      	sxth	r3, r3
   26972:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   26976:	b21b      	sxth	r3, r3
   26978:	4323      	orrs	r3, r4
   2697a:	b21b      	sxth	r3, r3
   2697c:	b29a      	uxth	r2, r3
   2697e:	69fb      	ldr	r3, [r7, #28]
   26980:	801a      	strh	r2, [r3, #0]
					      &addr->s6_addr16[i]);
				src = strchr(src, ':');
   26982:	213a      	movs	r1, #58	; 0x3a
   26984:	68b8      	ldr	r0, [r7, #8]
   26986:	f7db fb9f 	bl	20c8 <strchr>
   2698a:	60b8      	str	r0, [r7, #8]
				if (src) {
   2698c:	68bb      	ldr	r3, [r7, #8]
   2698e:	2b00      	cmp	r3, #0
   26990:	d003      	beq.n	2699a <net_addr_pton+0x1ce>
					src++;
   26992:	68bb      	ldr	r3, [r7, #8]
   26994:	3301      	adds	r3, #1
   26996:	60bb      	str	r3, [r7, #8]
					if (i < expected_groups - 1) {
						return -EINVAL;
					}
				}

				continue;
   26998:	e04d      	b.n	26a36 <net_addr_pton+0x26a>
					if (i < expected_groups - 1) {
   2699a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2699c:	3b01      	subs	r3, #1
   2699e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   269a0:	429a      	cmp	r2, r3
   269a2:	da48      	bge.n	26a36 <net_addr_pton+0x26a>
						return -EINVAL;
   269a4:	f06f 0315 	mvn.w	r3, #21
   269a8:	e086      	b.n	26ab8 <net_addr_pton+0x2ec>
			}

			/* Two colons in a row */

			for (; i < expected_groups; i++) {
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   269aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   269ac:	005b      	lsls	r3, r3, #1
   269ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   269b0:	4413      	add	r3, r2
   269b2:	61bb      	str	r3, [r7, #24]
   269b4:	69bb      	ldr	r3, [r7, #24]
   269b6:	2200      	movs	r2, #0
   269b8:	701a      	strb	r2, [r3, #0]
   269ba:	2200      	movs	r2, #0
   269bc:	705a      	strb	r2, [r3, #1]
			for (; i < expected_groups; i++) {
   269be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   269c0:	3301      	adds	r3, #1
   269c2:	63bb      	str	r3, [r7, #56]	; 0x38
   269c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   269c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   269c8:	429a      	cmp	r2, r3
   269ca:	dbee      	blt.n	269aa <net_addr_pton+0x1de>
			}

			tmp = strrchr(src, ':');
   269cc:	213a      	movs	r1, #58	; 0x3a
   269ce:	68b8      	ldr	r0, [r7, #8]
   269d0:	f7db fbab 	bl	212a <strrchr>
   269d4:	6378      	str	r0, [r7, #52]	; 0x34
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   269d6:	68ba      	ldr	r2, [r7, #8]
   269d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   269da:	429a      	cmp	r2, r3
   269dc:	d10b      	bne.n	269f6 <net_addr_pton+0x22a>
   269de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   269e0:	2b06      	cmp	r3, #6
   269e2:	d004      	beq.n	269ee <net_addr_pton+0x222>
   269e4:	68bb      	ldr	r3, [r7, #8]
   269e6:	3301      	adds	r3, #1
   269e8:	781b      	ldrb	r3, [r3, #0]
   269ea:	2b00      	cmp	r3, #0
   269ec:	d103      	bne.n	269f6 <net_addr_pton+0x22a>
				src++;
   269ee:	68bb      	ldr	r3, [r7, #8]
   269f0:	3301      	adds	r3, #1
   269f2:	60bb      	str	r3, [r7, #8]
				break;
   269f4:	e028      	b.n	26a48 <net_addr_pton+0x27c>
			}

			if (expected_groups == 6) {
   269f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   269f8:	2b06      	cmp	r3, #6
   269fa:	d102      	bne.n	26a02 <net_addr_pton+0x236>
				/* we need to drop the trailing
				 * colon since it's between the
				 * ipv6 and ipv4 addresses, rather than being
				 * a part of the ipv6 address
				 */
				tmp--;
   269fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   269fe:	3b01      	subs	r3, #1
   26a00:	637b      	str	r3, [r7, #52]	; 0x34
			}

			/* Calculate the amount of skipped zeros */
			i = expected_groups - 1;
   26a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   26a04:	3b01      	subs	r3, #1
   26a06:	63bb      	str	r3, [r7, #56]	; 0x38
			do {
				if (*tmp == ':') {
   26a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   26a0a:	781b      	ldrb	r3, [r3, #0]
   26a0c:	2b3a      	cmp	r3, #58	; 0x3a
   26a0e:	d102      	bne.n	26a16 <net_addr_pton+0x24a>
					i--;
   26a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26a12:	3b01      	subs	r3, #1
   26a14:	63bb      	str	r3, [r7, #56]	; 0x38
				}

				if (i < 0) {
   26a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26a18:	2b00      	cmp	r3, #0
   26a1a:	da02      	bge.n	26a22 <net_addr_pton+0x256>
					return -EINVAL;
   26a1c:	f06f 0315 	mvn.w	r3, #21
   26a20:	e04a      	b.n	26ab8 <net_addr_pton+0x2ec>
				}
			} while (tmp-- != src);
   26a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   26a24:	1e5a      	subs	r2, r3, #1
   26a26:	637a      	str	r2, [r7, #52]	; 0x34
   26a28:	68ba      	ldr	r2, [r7, #8]
   26a2a:	429a      	cmp	r2, r3
   26a2c:	d1ec      	bne.n	26a08 <net_addr_pton+0x23c>

			src++;
   26a2e:	68bb      	ldr	r3, [r7, #8]
   26a30:	3301      	adds	r3, #1
   26a32:	60bb      	str	r3, [r7, #8]
   26a34:	e000      	b.n	26a38 <net_addr_pton+0x26c>
				continue;
   26a36:	bf00      	nop
		for (i = 0; i < expected_groups; i++) {
   26a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26a3a:	3301      	adds	r3, #1
   26a3c:	63bb      	str	r3, [r7, #56]	; 0x38
   26a3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   26a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
   26a42:	429a      	cmp	r2, r3
   26a44:	f6ff af70 	blt.w	26928 <net_addr_pton+0x15c>
		}

		if (expected_groups == 6) {
   26a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
   26a4a:	2b06      	cmp	r3, #6
   26a4c:	d133      	bne.n	26ab6 <net_addr_pton+0x2ea>
			/* Parse the IPv4 part */
			for (i = 0; i < 4; i++) {
   26a4e:	2300      	movs	r3, #0
   26a50:	63bb      	str	r3, [r7, #56]	; 0x38
   26a52:	e029      	b.n	26aa8 <net_addr_pton+0x2dc>
				if (!src || !*src) {
   26a54:	68bb      	ldr	r3, [r7, #8]
   26a56:	2b00      	cmp	r3, #0
   26a58:	d003      	beq.n	26a62 <net_addr_pton+0x296>
   26a5a:	68bb      	ldr	r3, [r7, #8]
   26a5c:	781b      	ldrb	r3, [r3, #0]
   26a5e:	2b00      	cmp	r3, #0
   26a60:	d102      	bne.n	26a68 <net_addr_pton+0x29c>
					return -EINVAL;
   26a62:	f06f 0315 	mvn.w	r3, #21
   26a66:	e027      	b.n	26ab8 <net_addr_pton+0x2ec>
				}

				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   26a68:	220a      	movs	r2, #10
   26a6a:	2100      	movs	r1, #0
   26a6c:	68b8      	ldr	r0, [r7, #8]
   26a6e:	f7da fa71 	bl	f54 <strtol>
   26a72:	4602      	mov	r2, r0
   26a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26a76:	330c      	adds	r3, #12
   26a78:	b2d1      	uxtb	r1, r2
   26a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   26a7c:	54d1      	strb	r1, [r2, r3]

				src = strchr(src, '.');
   26a7e:	212e      	movs	r1, #46	; 0x2e
   26a80:	68b8      	ldr	r0, [r7, #8]
   26a82:	f7db fb21 	bl	20c8 <strchr>
   26a86:	60b8      	str	r0, [r7, #8]
				if (src) {
   26a88:	68bb      	ldr	r3, [r7, #8]
   26a8a:	2b00      	cmp	r3, #0
   26a8c:	d003      	beq.n	26a96 <net_addr_pton+0x2ca>
					src++;
   26a8e:	68bb      	ldr	r3, [r7, #8]
   26a90:	3301      	adds	r3, #1
   26a92:	60bb      	str	r3, [r7, #8]
   26a94:	e005      	b.n	26aa2 <net_addr_pton+0x2d6>
				} else {
					if (i < 3) {
   26a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26a98:	2b02      	cmp	r3, #2
   26a9a:	dc02      	bgt.n	26aa2 <net_addr_pton+0x2d6>
						return -EINVAL;
   26a9c:	f06f 0315 	mvn.w	r3, #21
   26aa0:	e00a      	b.n	26ab8 <net_addr_pton+0x2ec>
			for (i = 0; i < 4; i++) {
   26aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26aa4:	3301      	adds	r3, #1
   26aa6:	63bb      	str	r3, [r7, #56]	; 0x38
   26aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26aaa:	2b03      	cmp	r3, #3
   26aac:	ddd2      	ble.n	26a54 <net_addr_pton+0x288>
   26aae:	e002      	b.n	26ab6 <net_addr_pton+0x2ea>
					}
				}
			}
		}
	} else {
		return -EINVAL;
   26ab0:	f06f 0315 	mvn.w	r3, #21
   26ab4:	e000      	b.n	26ab8 <net_addr_pton+0x2ec>
	}

	return 0;
   26ab6:	2300      	movs	r3, #0
}
   26ab8:	4618      	mov	r0, r3
   26aba:	3744      	adds	r7, #68	; 0x44
   26abc:	46bd      	mov	sp, r7
   26abe:	bd90      	pop	{r4, r7, pc}

00026ac0 <calc_chksum>:

static u16_t calc_chksum(u16_t sum, const u8_t *data, size_t len)
{
   26ac0:	b480      	push	{r7}
   26ac2:	b087      	sub	sp, #28
   26ac4:	af00      	add	r7, sp, #0
   26ac6:	4603      	mov	r3, r0
   26ac8:	60b9      	str	r1, [r7, #8]
   26aca:	607a      	str	r2, [r7, #4]
   26acc:	81fb      	strh	r3, [r7, #14]
	const u8_t *end;
	u16_t tmp;

	end = data + len - 1;
   26ace:	687b      	ldr	r3, [r7, #4]
   26ad0:	3b01      	subs	r3, #1
   26ad2:	68ba      	ldr	r2, [r7, #8]
   26ad4:	4413      	add	r3, r2
   26ad6:	617b      	str	r3, [r7, #20]

	while (data < end) {
   26ad8:	e018      	b.n	26b0c <calc_chksum+0x4c>
		tmp = (data[0] << 8) + data[1];
   26ada:	68bb      	ldr	r3, [r7, #8]
   26adc:	781b      	ldrb	r3, [r3, #0]
   26ade:	021b      	lsls	r3, r3, #8
   26ae0:	b21a      	sxth	r2, r3
   26ae2:	68bb      	ldr	r3, [r7, #8]
   26ae4:	3301      	adds	r3, #1
   26ae6:	781b      	ldrb	r3, [r3, #0]
   26ae8:	b21b      	sxth	r3, r3
   26aea:	4413      	add	r3, r2
   26aec:	b21b      	sxth	r3, r3
   26aee:	827b      	strh	r3, [r7, #18]
		sum += tmp;
   26af0:	89fa      	ldrh	r2, [r7, #14]
   26af2:	8a7b      	ldrh	r3, [r7, #18]
   26af4:	4413      	add	r3, r2
   26af6:	81fb      	strh	r3, [r7, #14]
		if (sum < tmp) {
   26af8:	89fa      	ldrh	r2, [r7, #14]
   26afa:	8a7b      	ldrh	r3, [r7, #18]
   26afc:	429a      	cmp	r2, r3
   26afe:	d202      	bcs.n	26b06 <calc_chksum+0x46>
			sum++;
   26b00:	89fb      	ldrh	r3, [r7, #14]
   26b02:	3301      	adds	r3, #1
   26b04:	81fb      	strh	r3, [r7, #14]
		}

		data += 2;
   26b06:	68bb      	ldr	r3, [r7, #8]
   26b08:	3302      	adds	r3, #2
   26b0a:	60bb      	str	r3, [r7, #8]
	while (data < end) {
   26b0c:	68ba      	ldr	r2, [r7, #8]
   26b0e:	697b      	ldr	r3, [r7, #20]
   26b10:	429a      	cmp	r2, r3
   26b12:	d3e2      	bcc.n	26ada <calc_chksum+0x1a>
	}

	if (data == end) {
   26b14:	68ba      	ldr	r2, [r7, #8]
   26b16:	697b      	ldr	r3, [r7, #20]
   26b18:	429a      	cmp	r2, r3
   26b1a:	d10f      	bne.n	26b3c <calc_chksum+0x7c>
		tmp = data[0] << 8;
   26b1c:	68bb      	ldr	r3, [r7, #8]
   26b1e:	781b      	ldrb	r3, [r3, #0]
   26b20:	b29b      	uxth	r3, r3
   26b22:	021b      	lsls	r3, r3, #8
   26b24:	827b      	strh	r3, [r7, #18]
		sum += tmp;
   26b26:	89fa      	ldrh	r2, [r7, #14]
   26b28:	8a7b      	ldrh	r3, [r7, #18]
   26b2a:	4413      	add	r3, r2
   26b2c:	81fb      	strh	r3, [r7, #14]
		if (sum < tmp) {
   26b2e:	89fa      	ldrh	r2, [r7, #14]
   26b30:	8a7b      	ldrh	r3, [r7, #18]
   26b32:	429a      	cmp	r2, r3
   26b34:	d202      	bcs.n	26b3c <calc_chksum+0x7c>
			sum++;
   26b36:	89fb      	ldrh	r3, [r7, #14]
   26b38:	3301      	adds	r3, #1
   26b3a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return sum;
   26b3c:	89fb      	ldrh	r3, [r7, #14]
}
   26b3e:	4618      	mov	r0, r3
   26b40:	371c      	adds	r7, #28
   26b42:	46bd      	mov	sp, r7
   26b44:	bc80      	pop	{r7}
   26b46:	4770      	bx	lr

00026b48 <pkt_calc_chksum>:

static inline u16_t pkt_calc_chksum(struct net_pkt *pkt, u16_t sum)
{
   26b48:	b580      	push	{r7, lr}
   26b4a:	b084      	sub	sp, #16
   26b4c:	af00      	add	r7, sp, #0
   26b4e:	6078      	str	r0, [r7, #4]
   26b50:	460b      	mov	r3, r1
   26b52:	807b      	strh	r3, [r7, #2]
	struct net_pkt_cursor *cur = &pkt->cursor;
   26b54:	687b      	ldr	r3, [r7, #4]
   26b56:	3318      	adds	r3, #24
   26b58:	60bb      	str	r3, [r7, #8]
	size_t len;

	if (!cur->buf || !cur->pos) {
   26b5a:	68bb      	ldr	r3, [r7, #8]
   26b5c:	681b      	ldr	r3, [r3, #0]
   26b5e:	2b00      	cmp	r3, #0
   26b60:	d003      	beq.n	26b6a <pkt_calc_chksum+0x22>
   26b62:	68bb      	ldr	r3, [r7, #8]
   26b64:	685b      	ldr	r3, [r3, #4]
   26b66:	2b00      	cmp	r3, #0
   26b68:	d101      	bne.n	26b6e <pkt_calc_chksum+0x26>
		return sum;
   26b6a:	887b      	ldrh	r3, [r7, #2]
   26b6c:	e052      	b.n	26c14 <pkt_calc_chksum+0xcc>
	}

	len = cur->buf->len - (cur->pos - cur->buf->data);
   26b6e:	68bb      	ldr	r3, [r7, #8]
   26b70:	681b      	ldr	r3, [r3, #0]
   26b72:	899b      	ldrh	r3, [r3, #12]
   26b74:	4619      	mov	r1, r3
   26b76:	68bb      	ldr	r3, [r7, #8]
   26b78:	685a      	ldr	r2, [r3, #4]
   26b7a:	68bb      	ldr	r3, [r7, #8]
   26b7c:	681b      	ldr	r3, [r3, #0]
   26b7e:	689b      	ldr	r3, [r3, #8]
   26b80:	1ad3      	subs	r3, r2, r3
   26b82:	1acb      	subs	r3, r1, r3
   26b84:	60fb      	str	r3, [r7, #12]

	while (cur->buf) {
   26b86:	e040      	b.n	26c0a <pkt_calc_chksum+0xc2>
		sum = calc_chksum(sum, cur->pos, len);
   26b88:	68bb      	ldr	r3, [r7, #8]
   26b8a:	6859      	ldr	r1, [r3, #4]
   26b8c:	887b      	ldrh	r3, [r7, #2]
   26b8e:	68fa      	ldr	r2, [r7, #12]
   26b90:	4618      	mov	r0, r3
   26b92:	f7ff ff95 	bl	26ac0 <calc_chksum>
   26b96:	4603      	mov	r3, r0
   26b98:	807b      	strh	r3, [r7, #2]

		cur->buf = cur->buf->frags;
   26b9a:	68bb      	ldr	r3, [r7, #8]
   26b9c:	681b      	ldr	r3, [r3, #0]
   26b9e:	681a      	ldr	r2, [r3, #0]
   26ba0:	68bb      	ldr	r3, [r7, #8]
   26ba2:	601a      	str	r2, [r3, #0]
		if (!cur->buf || !cur->buf->len) {
   26ba4:	68bb      	ldr	r3, [r7, #8]
   26ba6:	681b      	ldr	r3, [r3, #0]
   26ba8:	2b00      	cmp	r3, #0
   26baa:	d032      	beq.n	26c12 <pkt_calc_chksum+0xca>
   26bac:	68bb      	ldr	r3, [r7, #8]
   26bae:	681b      	ldr	r3, [r3, #0]
   26bb0:	899b      	ldrh	r3, [r3, #12]
   26bb2:	2b00      	cmp	r3, #0
   26bb4:	d02d      	beq.n	26c12 <pkt_calc_chksum+0xca>
			break;
		}

		cur->pos = cur->buf->data;
   26bb6:	68bb      	ldr	r3, [r7, #8]
   26bb8:	681b      	ldr	r3, [r3, #0]
   26bba:	689a      	ldr	r2, [r3, #8]
   26bbc:	68bb      	ldr	r3, [r7, #8]
   26bbe:	605a      	str	r2, [r3, #4]

		if (len % 2) {
   26bc0:	68fb      	ldr	r3, [r7, #12]
   26bc2:	f003 0301 	and.w	r3, r3, #1
   26bc6:	2b00      	cmp	r3, #0
   26bc8:	d01b      	beq.n	26c02 <pkt_calc_chksum+0xba>
			sum += *cur->pos;
   26bca:	68bb      	ldr	r3, [r7, #8]
   26bcc:	685b      	ldr	r3, [r3, #4]
   26bce:	781b      	ldrb	r3, [r3, #0]
   26bd0:	b29a      	uxth	r2, r3
   26bd2:	887b      	ldrh	r3, [r7, #2]
   26bd4:	4413      	add	r3, r2
   26bd6:	807b      	strh	r3, [r7, #2]
			if (sum < *cur->pos) {
   26bd8:	68bb      	ldr	r3, [r7, #8]
   26bda:	685b      	ldr	r3, [r3, #4]
   26bdc:	781b      	ldrb	r3, [r3, #0]
   26bde:	b29b      	uxth	r3, r3
   26be0:	887a      	ldrh	r2, [r7, #2]
   26be2:	429a      	cmp	r2, r3
   26be4:	d202      	bcs.n	26bec <pkt_calc_chksum+0xa4>
				sum++;
   26be6:	887b      	ldrh	r3, [r7, #2]
   26be8:	3301      	adds	r3, #1
   26bea:	807b      	strh	r3, [r7, #2]
			}

			cur->pos++;
   26bec:	68bb      	ldr	r3, [r7, #8]
   26bee:	685b      	ldr	r3, [r3, #4]
   26bf0:	1c5a      	adds	r2, r3, #1
   26bf2:	68bb      	ldr	r3, [r7, #8]
   26bf4:	605a      	str	r2, [r3, #4]
			len = cur->buf->len - 1;
   26bf6:	68bb      	ldr	r3, [r7, #8]
   26bf8:	681b      	ldr	r3, [r3, #0]
   26bfa:	899b      	ldrh	r3, [r3, #12]
   26bfc:	3b01      	subs	r3, #1
   26bfe:	60fb      	str	r3, [r7, #12]
   26c00:	e003      	b.n	26c0a <pkt_calc_chksum+0xc2>
		} else {
			len = cur->buf->len;
   26c02:	68bb      	ldr	r3, [r7, #8]
   26c04:	681b      	ldr	r3, [r3, #0]
   26c06:	899b      	ldrh	r3, [r3, #12]
   26c08:	60fb      	str	r3, [r7, #12]
	while (cur->buf) {
   26c0a:	68bb      	ldr	r3, [r7, #8]
   26c0c:	681b      	ldr	r3, [r3, #0]
   26c0e:	2b00      	cmp	r3, #0
   26c10:	d1ba      	bne.n	26b88 <pkt_calc_chksum+0x40>
		}
	}

	return sum;
   26c12:	887b      	ldrh	r3, [r7, #2]
}
   26c14:	4618      	mov	r0, r3
   26c16:	3710      	adds	r7, #16
   26c18:	46bd      	mov	sp, r7
   26c1a:	bd80      	pop	{r7, pc}

00026c1c <net_calc_chksum>:

u16_t net_calc_chksum(struct net_pkt *pkt, u8_t proto)
{
   26c1c:	b590      	push	{r4, r7, lr}
   26c1e:	b089      	sub	sp, #36	; 0x24
   26c20:	af00      	add	r7, sp, #0
   26c22:	6078      	str	r0, [r7, #4]
   26c24:	460b      	mov	r3, r1
   26c26:	70fb      	strb	r3, [r7, #3]
	size_t len = 0U;
   26c28:	2300      	movs	r3, #0
   26c2a:	61bb      	str	r3, [r7, #24]
	u16_t sum = 0U;
   26c2c:	2300      	movs	r3, #0
   26c2e:	83fb      	strh	r3, [r7, #30]
	struct net_pkt_cursor backup;
	bool ow;

	if (IS_ENABLED(CONFIG_NET_IPV4) &&
	    net_pkt_family(pkt) == AF_INET) {
   26c30:	6878      	ldr	r0, [r7, #4]
   26c32:	f7ff fd4d 	bl	266d0 <net_pkt_family>
   26c36:	4603      	mov	r3, r0
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
   26c38:	2b01      	cmp	r3, #1
   26c3a:	d115      	bne.n	26c68 <net_calc_chksum+0x4c>
		if (proto != IPPROTO_ICMP) {
   26c3c:	78fb      	ldrb	r3, [r7, #3]
   26c3e:	2b01      	cmp	r3, #1
   26c40:	d018      	beq.n	26c74 <net_calc_chksum+0x58>
			len = 2 * sizeof(struct in_addr);
   26c42:	2308      	movs	r3, #8
   26c44:	61bb      	str	r3, [r7, #24]
			sum = net_pkt_get_len(pkt) -
   26c46:	6878      	ldr	r0, [r7, #4]
   26c48:	f7ff fd67 	bl	2671a <net_pkt_get_len>
   26c4c:	4603      	mov	r3, r0
   26c4e:	b29c      	uxth	r4, r3
				net_pkt_ip_hdr_len(pkt) + proto;
   26c50:	6878      	ldr	r0, [r7, #4]
   26c52:	f7ff fd4c 	bl	266ee <net_pkt_ip_hdr_len>
   26c56:	4603      	mov	r3, r0
   26c58:	b29b      	uxth	r3, r3
			sum = net_pkt_get_len(pkt) -
   26c5a:	1ae3      	subs	r3, r4, r3
   26c5c:	b29a      	uxth	r2, r3
				net_pkt_ip_hdr_len(pkt) + proto;
   26c5e:	78fb      	ldrb	r3, [r7, #3]
   26c60:	b29b      	uxth	r3, r3
			sum = net_pkt_get_len(pkt) -
   26c62:	4413      	add	r3, r2
   26c64:	83fb      	strh	r3, [r7, #30]
   26c66:	e005      	b.n	26c74 <net_calc_chksum+0x58>
		len = 2 * sizeof(struct in6_addr);
		sum =  net_pkt_get_len(pkt) -
			net_pkt_ip_hdr_len(pkt) -
			net_pkt_ipv6_ext_len(pkt) + proto;
	} else {
		NET_DBG("Unknown protocol family %d", net_pkt_family(pkt));
   26c68:	f7ff fd12 	bl	26690 <_is_user_context>
   26c6c:	4603      	mov	r3, r0
   26c6e:	75fb      	strb	r3, [r7, #23]
		return 0;
   26c70:	2300      	movs	r3, #0
   26c72:	e056      	b.n	26d22 <net_calc_chksum+0x106>
	}

	net_pkt_cursor_backup(pkt, &backup);
   26c74:	f107 030c 	add.w	r3, r7, #12
   26c78:	4619      	mov	r1, r3
   26c7a:	6878      	ldr	r0, [r7, #4]
   26c7c:	f7ff fd82 	bl	26784 <net_pkt_cursor_backup>
	net_pkt_cursor_init(pkt);
   26c80:	6878      	ldr	r0, [r7, #4]
   26c82:	f7ff f91b 	bl	25ebc <net_pkt_cursor_init>

	ow = net_pkt_is_being_overwritten(pkt);
   26c86:	6878      	ldr	r0, [r7, #4]
   26c88:	f7ff fd68 	bl	2675c <net_pkt_is_being_overwritten>
   26c8c:	4603      	mov	r3, r0
   26c8e:	777b      	strb	r3, [r7, #29]
	net_pkt_set_overwrite(pkt, true);
   26c90:	2101      	movs	r1, #1
   26c92:	6878      	ldr	r0, [r7, #4]
   26c94:	f7ff fd4f 	bl	26736 <net_pkt_set_overwrite>

	net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) - len);
   26c98:	6878      	ldr	r0, [r7, #4]
   26c9a:	f7ff fd28 	bl	266ee <net_pkt_ip_hdr_len>
   26c9e:	4603      	mov	r3, r0
   26ca0:	461a      	mov	r2, r3
   26ca2:	69bb      	ldr	r3, [r7, #24]
   26ca4:	1ad3      	subs	r3, r2, r3
   26ca6:	4619      	mov	r1, r3
   26ca8:	6878      	ldr	r0, [r7, #4]
   26caa:	f7ff fa8a 	bl	261c2 <net_pkt_skip>

	sum = calc_chksum(sum, pkt->cursor.pos, len);
   26cae:	687b      	ldr	r3, [r7, #4]
   26cb0:	69d9      	ldr	r1, [r3, #28]
   26cb2:	8bfb      	ldrh	r3, [r7, #30]
   26cb4:	69ba      	ldr	r2, [r7, #24]
   26cb6:	4618      	mov	r0, r3
   26cb8:	f7ff ff02 	bl	26ac0 <calc_chksum>
   26cbc:	4603      	mov	r3, r0
   26cbe:	83fb      	strh	r3, [r7, #30]

	net_pkt_skip(pkt, len + net_pkt_ipv6_ext_len(pkt));
   26cc0:	6878      	ldr	r0, [r7, #4]
   26cc2:	f7ff fd20 	bl	26706 <net_pkt_ipv6_ext_len>
   26cc6:	4603      	mov	r3, r0
   26cc8:	461a      	mov	r2, r3
   26cca:	69bb      	ldr	r3, [r7, #24]
   26ccc:	4413      	add	r3, r2
   26cce:	4619      	mov	r1, r3
   26cd0:	6878      	ldr	r0, [r7, #4]
   26cd2:	f7ff fa76 	bl	261c2 <net_pkt_skip>

	sum = pkt_calc_chksum(pkt, sum);
   26cd6:	8bfb      	ldrh	r3, [r7, #30]
   26cd8:	4619      	mov	r1, r3
   26cda:	6878      	ldr	r0, [r7, #4]
   26cdc:	f7ff ff34 	bl	26b48 <pkt_calc_chksum>
   26ce0:	4603      	mov	r3, r0
   26ce2:	83fb      	strh	r3, [r7, #30]

	sum = (sum == 0U) ? 0xffff : htons(sum);
   26ce4:	8bfb      	ldrh	r3, [r7, #30]
   26ce6:	2b00      	cmp	r3, #0
   26ce8:	d00a      	beq.n	26d00 <net_calc_chksum+0xe4>
   26cea:	8bfb      	ldrh	r3, [r7, #30]
   26cec:	0a1b      	lsrs	r3, r3, #8
   26cee:	b29b      	uxth	r3, r3
   26cf0:	b21a      	sxth	r2, r3
   26cf2:	8bfb      	ldrh	r3, [r7, #30]
   26cf4:	021b      	lsls	r3, r3, #8
   26cf6:	b21b      	sxth	r3, r3
   26cf8:	4313      	orrs	r3, r2
   26cfa:	b21b      	sxth	r3, r3
   26cfc:	b29b      	uxth	r3, r3
   26cfe:	e001      	b.n	26d04 <net_calc_chksum+0xe8>
   26d00:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26d04:	83fb      	strh	r3, [r7, #30]

	net_pkt_cursor_restore(pkt, &backup);
   26d06:	f107 030c 	add.w	r3, r7, #12
   26d0a:	4619      	mov	r1, r3
   26d0c:	6878      	ldr	r0, [r7, #4]
   26d0e:	f7ff fd4b 	bl	267a8 <net_pkt_cursor_restore>

	net_pkt_set_overwrite(pkt, ow);
   26d12:	7f7b      	ldrb	r3, [r7, #29]
   26d14:	4619      	mov	r1, r3
   26d16:	6878      	ldr	r0, [r7, #4]
   26d18:	f7ff fd0d 	bl	26736 <net_pkt_set_overwrite>

	return ~sum;
   26d1c:	8bfb      	ldrh	r3, [r7, #30]
   26d1e:	43db      	mvns	r3, r3
   26d20:	b29b      	uxth	r3, r3
}
   26d22:	4618      	mov	r0, r3
   26d24:	3724      	adds	r7, #36	; 0x24
   26d26:	46bd      	mov	sp, r7
   26d28:	bd90      	pop	{r4, r7, pc}

00026d2a <net_calc_chksum_ipv4>:

#if defined(CONFIG_NET_IPV4)
u16_t net_calc_chksum_ipv4(struct net_pkt *pkt)
{
   26d2a:	b590      	push	{r4, r7, lr}
   26d2c:	b085      	sub	sp, #20
   26d2e:	af00      	add	r7, sp, #0
   26d30:	6078      	str	r0, [r7, #4]
	u16_t sum;

	sum = calc_chksum(0, pkt->buffer->data, net_pkt_ip_hdr_len(pkt));
   26d32:	687b      	ldr	r3, [r7, #4]
   26d34:	695b      	ldr	r3, [r3, #20]
   26d36:	689c      	ldr	r4, [r3, #8]
   26d38:	6878      	ldr	r0, [r7, #4]
   26d3a:	f7ff fcd8 	bl	266ee <net_pkt_ip_hdr_len>
   26d3e:	4603      	mov	r3, r0
   26d40:	461a      	mov	r2, r3
   26d42:	4621      	mov	r1, r4
   26d44:	2000      	movs	r0, #0
   26d46:	f7ff febb 	bl	26ac0 <calc_chksum>
   26d4a:	4603      	mov	r3, r0
   26d4c:	81fb      	strh	r3, [r7, #14]

	sum = (sum == 0U) ? 0xffff : htons(sum);
   26d4e:	89fb      	ldrh	r3, [r7, #14]
   26d50:	2b00      	cmp	r3, #0
   26d52:	d00a      	beq.n	26d6a <net_calc_chksum_ipv4+0x40>
   26d54:	89fb      	ldrh	r3, [r7, #14]
   26d56:	0a1b      	lsrs	r3, r3, #8
   26d58:	b29b      	uxth	r3, r3
   26d5a:	b21a      	sxth	r2, r3
   26d5c:	89fb      	ldrh	r3, [r7, #14]
   26d5e:	021b      	lsls	r3, r3, #8
   26d60:	b21b      	sxth	r3, r3
   26d62:	4313      	orrs	r3, r2
   26d64:	b21b      	sxth	r3, r3
   26d66:	b29b      	uxth	r3, r3
   26d68:	e001      	b.n	26d6e <net_calc_chksum_ipv4+0x44>
   26d6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26d6e:	81fb      	strh	r3, [r7, #14]

	return ~sum;
   26d70:	89fb      	ldrh	r3, [r7, #14]
   26d72:	43db      	mvns	r3, r3
   26d74:	b29b      	uxth	r3, r3
}
   26d76:	4618      	mov	r0, r3
   26d78:	3714      	adds	r7, #20
   26d7a:	46bd      	mov	sp, r7
   26d7c:	bd90      	pop	{r4, r7, pc}

00026d7e <z_snode_next_peek>:
{
   26d7e:	b480      	push	{r7}
   26d80:	b083      	sub	sp, #12
   26d82:	af00      	add	r7, sp, #0
   26d84:	6078      	str	r0, [r7, #4]
	return node->next;
   26d86:	687b      	ldr	r3, [r7, #4]
   26d88:	681b      	ldr	r3, [r3, #0]
}
   26d8a:	4618      	mov	r0, r3
   26d8c:	370c      	adds	r7, #12
   26d8e:	46bd      	mov	sp, r7
   26d90:	bc80      	pop	{r7}
   26d92:	4770      	bx	lr

00026d94 <z_snode_next_set>:
{
   26d94:	b480      	push	{r7}
   26d96:	b083      	sub	sp, #12
   26d98:	af00      	add	r7, sp, #0
   26d9a:	6078      	str	r0, [r7, #4]
   26d9c:	6039      	str	r1, [r7, #0]
	parent->next = child;
   26d9e:	687b      	ldr	r3, [r7, #4]
   26da0:	683a      	ldr	r2, [r7, #0]
   26da2:	601a      	str	r2, [r3, #0]
}
   26da4:	bf00      	nop
   26da6:	370c      	adds	r7, #12
   26da8:	46bd      	mov	sp, r7
   26daa:	bc80      	pop	{r7}
   26dac:	4770      	bx	lr

00026dae <z_slist_head_set>:
{
   26dae:	b480      	push	{r7}
   26db0:	b083      	sub	sp, #12
   26db2:	af00      	add	r7, sp, #0
   26db4:	6078      	str	r0, [r7, #4]
   26db6:	6039      	str	r1, [r7, #0]
	list->head = node;
   26db8:	687b      	ldr	r3, [r7, #4]
   26dba:	683a      	ldr	r2, [r7, #0]
   26dbc:	601a      	str	r2, [r3, #0]
}
   26dbe:	bf00      	nop
   26dc0:	370c      	adds	r7, #12
   26dc2:	46bd      	mov	sp, r7
   26dc4:	bc80      	pop	{r7}
   26dc6:	4770      	bx	lr

00026dc8 <z_slist_tail_set>:
{
   26dc8:	b480      	push	{r7}
   26dca:	b083      	sub	sp, #12
   26dcc:	af00      	add	r7, sp, #0
   26dce:	6078      	str	r0, [r7, #4]
   26dd0:	6039      	str	r1, [r7, #0]
	list->tail = node;
   26dd2:	687b      	ldr	r3, [r7, #4]
   26dd4:	683a      	ldr	r2, [r7, #0]
   26dd6:	605a      	str	r2, [r3, #4]
}
   26dd8:	bf00      	nop
   26dda:	370c      	adds	r7, #12
   26ddc:	46bd      	mov	sp, r7
   26dde:	bc80      	pop	{r7}
   26de0:	4770      	bx	lr

00026de2 <sys_slist_peek_head>:
{
   26de2:	b480      	push	{r7}
   26de4:	b083      	sub	sp, #12
   26de6:	af00      	add	r7, sp, #0
   26de8:	6078      	str	r0, [r7, #4]
	return list->head;
   26dea:	687b      	ldr	r3, [r7, #4]
   26dec:	681b      	ldr	r3, [r3, #0]
}
   26dee:	4618      	mov	r0, r3
   26df0:	370c      	adds	r7, #12
   26df2:	46bd      	mov	sp, r7
   26df4:	bc80      	pop	{r7}
   26df6:	4770      	bx	lr

00026df8 <sys_slist_peek_tail>:
{
   26df8:	b480      	push	{r7}
   26dfa:	b083      	sub	sp, #12
   26dfc:	af00      	add	r7, sp, #0
   26dfe:	6078      	str	r0, [r7, #4]
	return list->tail;
   26e00:	687b      	ldr	r3, [r7, #4]
   26e02:	685b      	ldr	r3, [r3, #4]
}
   26e04:	4618      	mov	r0, r3
   26e06:	370c      	adds	r7, #12
   26e08:	46bd      	mov	sp, r7
   26e0a:	bc80      	pop	{r7}
   26e0c:	4770      	bx	lr

00026e0e <sys_slist_peek_next_no_check>:
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   26e0e:	b580      	push	{r7, lr}
   26e10:	b082      	sub	sp, #8
   26e12:	af00      	add	r7, sp, #0
   26e14:	6078      	str	r0, [r7, #4]
   26e16:	6878      	ldr	r0, [r7, #4]
   26e18:	f7ff ffb1 	bl	26d7e <z_snode_next_peek>
   26e1c:	4603      	mov	r3, r0
   26e1e:	4618      	mov	r0, r3
   26e20:	3708      	adds	r7, #8
   26e22:	46bd      	mov	sp, r7
   26e24:	bd80      	pop	{r7, pc}

00026e26 <sys_slist_peek_next>:
Z_GENLIST_PEEK_NEXT(slist, snode)
   26e26:	b580      	push	{r7, lr}
   26e28:	b082      	sub	sp, #8
   26e2a:	af00      	add	r7, sp, #0
   26e2c:	6078      	str	r0, [r7, #4]
   26e2e:	687b      	ldr	r3, [r7, #4]
   26e30:	2b00      	cmp	r3, #0
   26e32:	d004      	beq.n	26e3e <sys_slist_peek_next+0x18>
   26e34:	6878      	ldr	r0, [r7, #4]
   26e36:	f7ff ffea 	bl	26e0e <sys_slist_peek_next_no_check>
   26e3a:	4603      	mov	r3, r0
   26e3c:	e000      	b.n	26e40 <sys_slist_peek_next+0x1a>
   26e3e:	2300      	movs	r3, #0
   26e40:	4618      	mov	r0, r3
   26e42:	3708      	adds	r7, #8
   26e44:	46bd      	mov	sp, r7
   26e46:	bd80      	pop	{r7, pc}

00026e48 <sys_slist_prepend>:
Z_GENLIST_PREPEND(slist, snode)
   26e48:	b580      	push	{r7, lr}
   26e4a:	b082      	sub	sp, #8
   26e4c:	af00      	add	r7, sp, #0
   26e4e:	6078      	str	r0, [r7, #4]
   26e50:	6039      	str	r1, [r7, #0]
   26e52:	6878      	ldr	r0, [r7, #4]
   26e54:	f7ff ffc5 	bl	26de2 <sys_slist_peek_head>
   26e58:	4603      	mov	r3, r0
   26e5a:	4619      	mov	r1, r3
   26e5c:	6838      	ldr	r0, [r7, #0]
   26e5e:	f7ff ff99 	bl	26d94 <z_snode_next_set>
   26e62:	6839      	ldr	r1, [r7, #0]
   26e64:	6878      	ldr	r0, [r7, #4]
   26e66:	f7ff ffa2 	bl	26dae <z_slist_head_set>
   26e6a:	6878      	ldr	r0, [r7, #4]
   26e6c:	f7ff ffc4 	bl	26df8 <sys_slist_peek_tail>
   26e70:	4603      	mov	r3, r0
   26e72:	2b00      	cmp	r3, #0
   26e74:	d107      	bne.n	26e86 <sys_slist_prepend+0x3e>
   26e76:	6878      	ldr	r0, [r7, #4]
   26e78:	f7ff ffb3 	bl	26de2 <sys_slist_peek_head>
   26e7c:	4603      	mov	r3, r0
   26e7e:	4619      	mov	r1, r3
   26e80:	6878      	ldr	r0, [r7, #4]
   26e82:	f7ff ffa1 	bl	26dc8 <z_slist_tail_set>
   26e86:	bf00      	nop
   26e88:	3708      	adds	r7, #8
   26e8a:	46bd      	mov	sp, r7
   26e8c:	bd80      	pop	{r7, pc}

00026e8e <_is_user_context>:
{
   26e8e:	b480      	push	{r7}
   26e90:	af00      	add	r7, sp, #0
	return false;
   26e92:	2300      	movs	r3, #0
}
   26e94:	4618      	mov	r0, r3
   26e96:	46bd      	mov	sp, r7
   26e98:	bc80      	pop	{r7}
   26e9a:	4770      	bx	lr

00026e9c <net_buf_frags_len>:
{
   26e9c:	b480      	push	{r7}
   26e9e:	b085      	sub	sp, #20
   26ea0:	af00      	add	r7, sp, #0
   26ea2:	6078      	str	r0, [r7, #4]
	size_t bytes = 0;
   26ea4:	2300      	movs	r3, #0
   26ea6:	60fb      	str	r3, [r7, #12]
	while (buf) {
   26ea8:	e008      	b.n	26ebc <net_buf_frags_len+0x20>
		bytes += buf->len;
   26eaa:	687b      	ldr	r3, [r7, #4]
   26eac:	899b      	ldrh	r3, [r3, #12]
   26eae:	461a      	mov	r2, r3
   26eb0:	68fb      	ldr	r3, [r7, #12]
   26eb2:	4413      	add	r3, r2
   26eb4:	60fb      	str	r3, [r7, #12]
		buf = buf->frags;
   26eb6:	687b      	ldr	r3, [r7, #4]
   26eb8:	681b      	ldr	r3, [r3, #0]
   26eba:	607b      	str	r3, [r7, #4]
	while (buf) {
   26ebc:	687b      	ldr	r3, [r7, #4]
   26ebe:	2b00      	cmp	r3, #0
   26ec0:	d1f3      	bne.n	26eaa <net_buf_frags_len+0xe>
	return bytes;
   26ec2:	68fb      	ldr	r3, [r7, #12]
}
   26ec4:	4618      	mov	r0, r3
   26ec6:	3714      	adds	r7, #20
   26ec8:	46bd      	mov	sp, r7
   26eca:	bc80      	pop	{r7}
   26ecc:	4770      	bx	lr

00026ece <net_ipv4_is_addr_unspecified>:
{
   26ece:	b480      	push	{r7}
   26ed0:	b085      	sub	sp, #20
   26ed2:	af00      	add	r7, sp, #0
   26ed4:	6078      	str	r0, [r7, #4]
	return UNALIGNED_GET(&addr->s_addr) == 0;
   26ed6:	687b      	ldr	r3, [r7, #4]
   26ed8:	60fb      	str	r3, [r7, #12]
   26eda:	68fb      	ldr	r3, [r7, #12]
   26edc:	681b      	ldr	r3, [r3, #0]
   26ede:	2b00      	cmp	r3, #0
   26ee0:	bf0c      	ite	eq
   26ee2:	2301      	moveq	r3, #1
   26ee4:	2300      	movne	r3, #0
   26ee6:	b2db      	uxtb	r3, r3
}
   26ee8:	4618      	mov	r0, r3
   26eea:	3714      	adds	r7, #20
   26eec:	46bd      	mov	sp, r7
   26eee:	bc80      	pop	{r7}
   26ef0:	4770      	bx	lr

00026ef2 <net_ipv4_is_addr_mcast>:
{
   26ef2:	b480      	push	{r7}
   26ef4:	b087      	sub	sp, #28
   26ef6:	af00      	add	r7, sp, #0
   26ef8:	6078      	str	r0, [r7, #4]
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xE0000000) == 0xE0000000;
   26efa:	687b      	ldr	r3, [r7, #4]
   26efc:	617b      	str	r3, [r7, #20]
   26efe:	697b      	ldr	r3, [r7, #20]
   26f00:	681b      	ldr	r3, [r3, #0]
   26f02:	0e1b      	lsrs	r3, r3, #24
   26f04:	b2da      	uxtb	r2, r3
   26f06:	687b      	ldr	r3, [r7, #4]
   26f08:	613b      	str	r3, [r7, #16]
   26f0a:	693b      	ldr	r3, [r7, #16]
   26f0c:	681b      	ldr	r3, [r3, #0]
   26f0e:	0a1b      	lsrs	r3, r3, #8
   26f10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   26f14:	431a      	orrs	r2, r3
   26f16:	687b      	ldr	r3, [r7, #4]
   26f18:	60fb      	str	r3, [r7, #12]
   26f1a:	68fb      	ldr	r3, [r7, #12]
   26f1c:	681b      	ldr	r3, [r3, #0]
   26f1e:	021b      	lsls	r3, r3, #8
   26f20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   26f24:	431a      	orrs	r2, r3
   26f26:	687b      	ldr	r3, [r7, #4]
   26f28:	60bb      	str	r3, [r7, #8]
   26f2a:	68bb      	ldr	r3, [r7, #8]
   26f2c:	681b      	ldr	r3, [r3, #0]
   26f2e:	061b      	lsls	r3, r3, #24
   26f30:	4313      	orrs	r3, r2
   26f32:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   26f36:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
   26f3a:	bf0c      	ite	eq
   26f3c:	2301      	moveq	r3, #1
   26f3e:	2300      	movne	r3, #0
   26f40:	b2db      	uxtb	r3, r3
}
   26f42:	4618      	mov	r0, r3
   26f44:	371c      	adds	r7, #28
   26f46:	46bd      	mov	sp, r7
   26f48:	bc80      	pop	{r7}
   26f4a:	4770      	bx	lr

00026f4c <net_ipv4_addr_cmp>:
{
   26f4c:	b480      	push	{r7}
   26f4e:	b085      	sub	sp, #20
   26f50:	af00      	add	r7, sp, #0
   26f52:	6078      	str	r0, [r7, #4]
   26f54:	6039      	str	r1, [r7, #0]
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   26f56:	687b      	ldr	r3, [r7, #4]
   26f58:	60fb      	str	r3, [r7, #12]
   26f5a:	68fb      	ldr	r3, [r7, #12]
   26f5c:	681a      	ldr	r2, [r3, #0]
   26f5e:	683b      	ldr	r3, [r7, #0]
   26f60:	60bb      	str	r3, [r7, #8]
   26f62:	68bb      	ldr	r3, [r7, #8]
   26f64:	681b      	ldr	r3, [r3, #0]
   26f66:	429a      	cmp	r2, r3
   26f68:	bf0c      	ite	eq
   26f6a:	2301      	moveq	r3, #1
   26f6c:	2300      	movne	r3, #0
   26f6e:	b2db      	uxtb	r3, r3
}
   26f70:	4618      	mov	r0, r3
   26f72:	3714      	adds	r7, #20
   26f74:	46bd      	mov	sp, r7
   26f76:	bc80      	pop	{r7}
   26f78:	4770      	bx	lr

00026f7a <net_ipv4_is_addr_bcast>:
{
   26f7a:	b580      	push	{r7, lr}
   26f7c:	b082      	sub	sp, #8
   26f7e:	af00      	add	r7, sp, #0
   26f80:	6078      	str	r0, [r7, #4]
   26f82:	6039      	str	r1, [r7, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   26f84:	f7ed f8da 	bl	1413c <net_ipv4_broadcast_address>
   26f88:	4603      	mov	r3, r0
   26f8a:	4619      	mov	r1, r3
   26f8c:	6838      	ldr	r0, [r7, #0]
   26f8e:	f7ff ffdd 	bl	26f4c <net_ipv4_addr_cmp>
   26f92:	4603      	mov	r3, r0
   26f94:	2b00      	cmp	r3, #0
   26f96:	d001      	beq.n	26f9c <net_ipv4_is_addr_bcast+0x22>
		return true;
   26f98:	2301      	movs	r3, #1
   26f9a:	e004      	b.n	26fa6 <net_ipv4_is_addr_bcast+0x2c>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   26f9c:	6839      	ldr	r1, [r7, #0]
   26f9e:	6878      	ldr	r0, [r7, #4]
   26fa0:	f7ec fa56 	bl	13450 <net_if_ipv4_is_addr_bcast>
   26fa4:	4603      	mov	r3, r0
}
   26fa6:	4618      	mov	r0, r3
   26fa8:	3708      	adds	r7, #8
   26faa:	46bd      	mov	sp, r7
   26fac:	bd80      	pop	{r7, pc}

00026fae <net_pkt_iface>:
{
   26fae:	b480      	push	{r7}
   26fb0:	b083      	sub	sp, #12
   26fb2:	af00      	add	r7, sp, #0
   26fb4:	6078      	str	r0, [r7, #4]
	return pkt->iface;
   26fb6:	687b      	ldr	r3, [r7, #4]
   26fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   26fba:	4618      	mov	r0, r3
   26fbc:	370c      	adds	r7, #12
   26fbe:	46bd      	mov	sp, r7
   26fc0:	bc80      	pop	{r7}
   26fc2:	4770      	bx	lr

00026fc4 <net_pkt_ip_hdr_len>:
{
   26fc4:	b480      	push	{r7}
   26fc6:	b083      	sub	sp, #12
   26fc8:	af00      	add	r7, sp, #0
   26fca:	6078      	str	r0, [r7, #4]
	return pkt->ip_hdr_len;
   26fcc:	687b      	ldr	r3, [r7, #4]
   26fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
}
   26fd2:	4618      	mov	r0, r3
   26fd4:	370c      	adds	r7, #12
   26fd6:	46bd      	mov	sp, r7
   26fd8:	bc80      	pop	{r7}
   26fda:	4770      	bx	lr

00026fdc <net_pkt_get_len>:
{
   26fdc:	b580      	push	{r7, lr}
   26fde:	b082      	sub	sp, #8
   26fe0:	af00      	add	r7, sp, #0
   26fe2:	6078      	str	r0, [r7, #4]
	return net_buf_frags_len(pkt->frags);
   26fe4:	687b      	ldr	r3, [r7, #4]
   26fe6:	695b      	ldr	r3, [r3, #20]
   26fe8:	4618      	mov	r0, r3
   26fea:	f7ff ff57 	bl	26e9c <net_buf_frags_len>
   26fee:	4603      	mov	r3, r0
}
   26ff0:	4618      	mov	r0, r3
   26ff2:	3708      	adds	r7, #8
   26ff4:	46bd      	mov	sp, r7
   26ff6:	bd80      	pop	{r7, pc}

00026ff8 <net_pkt_lladdr_src>:
{
   26ff8:	b480      	push	{r7}
   26ffa:	b083      	sub	sp, #12
   26ffc:	af00      	add	r7, sp, #0
   26ffe:	6078      	str	r0, [r7, #4]
	return &pkt->lladdr_src;
   27000:	687b      	ldr	r3, [r7, #4]
   27002:	332c      	adds	r3, #44	; 0x2c
}
   27004:	4618      	mov	r0, r3
   27006:	370c      	adds	r7, #12
   27008:	46bd      	mov	sp, r7
   2700a:	bc80      	pop	{r7}
   2700c:	4770      	bx	lr

0002700e <net_pkt_lladdr_dst>:
{
   2700e:	b480      	push	{r7}
   27010:	b083      	sub	sp, #12
   27012:	af00      	add	r7, sp, #0
   27014:	6078      	str	r0, [r7, #4]
	return &pkt->lladdr_dst;
   27016:	687b      	ldr	r3, [r7, #4]
   27018:	3334      	adds	r3, #52	; 0x34
}
   2701a:	4618      	mov	r0, r3
   2701c:	370c      	adds	r7, #12
   2701e:	46bd      	mov	sp, r7
   27020:	bc80      	pop	{r7}
   27022:	4770      	bx	lr

00027024 <net_pkt_acknowledge_data>:
{
   27024:	b580      	push	{r7, lr}
   27026:	b082      	sub	sp, #8
   27028:	af00      	add	r7, sp, #0
   2702a:	6078      	str	r0, [r7, #4]
   2702c:	6039      	str	r1, [r7, #0]
	return net_pkt_skip(pkt, access->size);
   2702e:	683b      	ldr	r3, [r7, #0]
   27030:	685b      	ldr	r3, [r3, #4]
   27032:	4619      	mov	r1, r3
   27034:	6878      	ldr	r0, [r7, #4]
   27036:	f7ff f8c4 	bl	261c2 <net_pkt_skip>
   2703a:	4603      	mov	r3, r0
}
   2703c:	4618      	mov	r0, r3
   2703e:	3708      	adds	r7, #8
   27040:	46bd      	mov	sp, r7
   27042:	bd80      	pop	{r7, pc}

00027044 <net_calc_chksum_icmpv4>:
{
   27044:	b580      	push	{r7, lr}
   27046:	b082      	sub	sp, #8
   27048:	af00      	add	r7, sp, #0
   2704a:	6078      	str	r0, [r7, #4]
	return net_calc_chksum(pkt, IPPROTO_ICMP);
   2704c:	2101      	movs	r1, #1
   2704e:	6878      	ldr	r0, [r7, #4]
   27050:	f7ff fde4 	bl	26c1c <net_calc_chksum>
   27054:	4603      	mov	r3, r0
}
   27056:	4618      	mov	r0, r3
   27058:	3708      	adds	r7, #8
   2705a:	46bd      	mov	sp, r7
   2705c:	bd80      	pop	{r7, pc}

0002705e <icmpv4_create>:
{
   2705e:	b580      	push	{r7, lr}
   27060:	b086      	sub	sp, #24
   27062:	af00      	add	r7, sp, #0
   27064:	6078      	str	r0, [r7, #4]
   27066:	460b      	mov	r3, r1
   27068:	70fb      	strb	r3, [r7, #3]
   2706a:	4613      	mov	r3, r2
   2706c:	70bb      	strb	r3, [r7, #2]
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   2706e:	2300      	movs	r3, #0
   27070:	60fb      	str	r3, [r7, #12]
   27072:	2304      	movs	r3, #4
   27074:	613b      	str	r3, [r7, #16]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
   27076:	f107 030c 	add.w	r3, r7, #12
   2707a:	4619      	mov	r1, r3
   2707c:	6878      	ldr	r0, [r7, #4]
   2707e:	f7ff fa31 	bl	264e4 <net_pkt_get_data>
   27082:	6178      	str	r0, [r7, #20]
	if (!icmp_hdr) {
   27084:	697b      	ldr	r3, [r7, #20]
   27086:	2b00      	cmp	r3, #0
   27088:	d102      	bne.n	27090 <icmpv4_create+0x32>
		return -ENOBUFS;
   2708a:	f06f 0368 	mvn.w	r3, #104	; 0x68
   2708e:	e011      	b.n	270b4 <icmpv4_create+0x56>
	icmp_hdr->type   = icmp_type;
   27090:	697b      	ldr	r3, [r7, #20]
   27092:	78fa      	ldrb	r2, [r7, #3]
   27094:	701a      	strb	r2, [r3, #0]
	icmp_hdr->code   = icmp_code;
   27096:	697b      	ldr	r3, [r7, #20]
   27098:	78ba      	ldrb	r2, [r7, #2]
   2709a:	705a      	strb	r2, [r3, #1]
	icmp_hdr->chksum = 0U;
   2709c:	697b      	ldr	r3, [r7, #20]
   2709e:	2200      	movs	r2, #0
   270a0:	709a      	strb	r2, [r3, #2]
   270a2:	2200      	movs	r2, #0
   270a4:	70da      	strb	r2, [r3, #3]
	return net_pkt_set_data(pkt, &icmpv4_access);
   270a6:	f107 030c 	add.w	r3, r7, #12
   270aa:	4619      	mov	r1, r3
   270ac:	6878      	ldr	r0, [r7, #4]
   270ae:	f7ff fa61 	bl	26574 <net_pkt_set_data>
   270b2:	4603      	mov	r3, r0
}
   270b4:	4618      	mov	r0, r3
   270b6:	3718      	adds	r7, #24
   270b8:	46bd      	mov	sp, r7
   270ba:	bd80      	pop	{r7, pc}

000270bc <net_icmpv4_finalize>:
{
   270bc:	b580      	push	{r7, lr}
   270be:	b086      	sub	sp, #24
   270c0:	af00      	add	r7, sp, #0
   270c2:	6078      	str	r0, [r7, #4]
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   270c4:	2300      	movs	r3, #0
   270c6:	60fb      	str	r3, [r7, #12]
   270c8:	2304      	movs	r3, #4
   270ca:	613b      	str	r3, [r7, #16]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
   270cc:	f107 030c 	add.w	r3, r7, #12
   270d0:	4619      	mov	r1, r3
   270d2:	6878      	ldr	r0, [r7, #4]
   270d4:	f7ff fa06 	bl	264e4 <net_pkt_get_data>
   270d8:	6178      	str	r0, [r7, #20]
	if (!icmp_hdr) {
   270da:	697b      	ldr	r3, [r7, #20]
   270dc:	2b00      	cmp	r3, #0
   270de:	d102      	bne.n	270e6 <net_icmpv4_finalize+0x2a>
		return -ENOBUFS;
   270e0:	f06f 0368 	mvn.w	r3, #104	; 0x68
   270e4:	e00d      	b.n	27102 <net_icmpv4_finalize+0x46>
	icmp_hdr->chksum = net_calc_chksum_icmpv4(pkt);
   270e6:	6878      	ldr	r0, [r7, #4]
   270e8:	f7ff ffac 	bl	27044 <net_calc_chksum_icmpv4>
   270ec:	4603      	mov	r3, r0
   270ee:	461a      	mov	r2, r3
   270f0:	697b      	ldr	r3, [r7, #20]
   270f2:	805a      	strh	r2, [r3, #2]
	return net_pkt_set_data(pkt, &icmpv4_access);
   270f4:	f107 030c 	add.w	r3, r7, #12
   270f8:	4619      	mov	r1, r3
   270fa:	6878      	ldr	r0, [r7, #4]
   270fc:	f7ff fa3a 	bl	26574 <net_pkt_set_data>
   27100:	4603      	mov	r3, r0
}
   27102:	4618      	mov	r0, r3
   27104:	3718      	adds	r7, #24
   27106:	46bd      	mov	sp, r7
   27108:	bd80      	pop	{r7, pc}

0002710a <icmpv4_handle_echo_request>:
{
   2710a:	b590      	push	{r4, r7, lr}
   2710c:	b097      	sub	sp, #92	; 0x5c
   2710e:	af02      	add	r7, sp, #8
   27110:	6078      	str	r0, [r7, #4]
   27112:	6039      	str	r1, [r7, #0]
	struct net_pkt *reply = NULL;
   27114:	2300      	movs	r3, #0
   27116:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (net_ipv4_is_addr_unspecified(&ip_hdr->src)) {
   27118:	683b      	ldr	r3, [r7, #0]
   2711a:	330c      	adds	r3, #12
   2711c:	4618      	mov	r0, r3
   2711e:	f7ff fed6 	bl	26ece <net_ipv4_is_addr_unspecified>
   27122:	4603      	mov	r3, r0
   27124:	2b00      	cmp	r3, #0
   27126:	d005      	beq.n	27134 <icmpv4_handle_echo_request+0x2a>
		NET_DBG("DROP: src addr is unspecified");
   27128:	f7ff feb1 	bl	26e8e <_is_user_context>
   2712c:	4603      	mov	r3, r0
   2712e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		goto drop;
   27132:	e081      	b.n	27238 <icmpv4_handle_echo_request+0x12e>
	NET_DBG("Received Echo Request from %s to %s",
   27134:	f7ff feab 	bl	26e8e <_is_user_context>
   27138:	4603      	mov	r3, r0
   2713a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	payload_len = net_pkt_get_len(pkt) -
   2713e:	6878      	ldr	r0, [r7, #4]
   27140:	f7ff ff4c 	bl	26fdc <net_pkt_get_len>
   27144:	4603      	mov	r3, r0
   27146:	b29c      	uxth	r4, r3
		net_pkt_ip_hdr_len(pkt) - NET_ICMPH_LEN;
   27148:	6878      	ldr	r0, [r7, #4]
   2714a:	f7ff ff3b 	bl	26fc4 <net_pkt_ip_hdr_len>
   2714e:	4603      	mov	r3, r0
   27150:	b29b      	uxth	r3, r3
	payload_len = net_pkt_get_len(pkt) -
   27152:	1ae3      	subs	r3, r4, r3
   27154:	b29b      	uxth	r3, r3
		net_pkt_ip_hdr_len(pkt) - NET_ICMPH_LEN;
   27156:	3b04      	subs	r3, #4
   27158:	b29b      	uxth	r3, r3
	payload_len = net_pkt_get_len(pkt) -
   2715a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	if (payload_len < NET_ICMPV4_UNUSED_LEN) {
   2715e:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
   27162:	2b03      	cmp	r3, #3
   27164:	dd65      	ble.n	27232 <icmpv4_handle_echo_request+0x128>
	reply = net_pkt_alloc_with_buffer(net_pkt_iface(pkt), payload_len,
   27166:	6878      	ldr	r0, [r7, #4]
   27168:	f7ff ff21 	bl	26fae <net_pkt_iface>
   2716c:	f9b7 1048 	ldrsh.w	r1, [r7, #72]	; 0x48
   27170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   27174:	9300      	str	r3, [sp, #0]
   27176:	2301      	movs	r3, #1
   27178:	2201      	movs	r2, #1
   2717a:	f7ec fdf1 	bl	13d60 <net_pkt_alloc_with_buffer>
   2717e:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (!reply) {
   27180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   27182:	2b00      	cmp	r3, #0
   27184:	d105      	bne.n	27192 <icmpv4_handle_echo_request+0x88>
		NET_DBG("DROP: No buffer");
   27186:	f7ff fe82 	bl	26e8e <_is_user_context>
   2718a:	4603      	mov	r3, r0
   2718c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		goto drop;
   27190:	e052      	b.n	27238 <icmpv4_handle_echo_request+0x12e>
	if (net_ipv4_is_addr_mcast(&ip_hdr->dst)) {
   27192:	683b      	ldr	r3, [r7, #0]
   27194:	3310      	adds	r3, #16
   27196:	4618      	mov	r0, r3
   27198:	f7ff feab 	bl	26ef2 <net_ipv4_is_addr_mcast>
   2719c:	4603      	mov	r3, r0
   2719e:	2b00      	cmp	r3, #0
   271a0:	d00b      	beq.n	271ba <icmpv4_handle_echo_request+0xb0>
		src = net_if_ipv4_select_src_addr(net_pkt_iface(pkt),
   271a2:	6878      	ldr	r0, [r7, #4]
   271a4:	f7ff ff03 	bl	26fae <net_pkt_iface>
   271a8:	4602      	mov	r2, r0
						  &ip_hdr->dst);
   271aa:	683b      	ldr	r3, [r7, #0]
   271ac:	3310      	adds	r3, #16
		src = net_if_ipv4_select_src_addr(net_pkt_iface(pkt),
   271ae:	4619      	mov	r1, r3
   271b0:	4610      	mov	r0, r2
   271b2:	f7ec f99d 	bl	134f0 <net_if_ipv4_select_src_addr>
   271b6:	6438      	str	r0, [r7, #64]	; 0x40
   271b8:	e002      	b.n	271c0 <icmpv4_handle_echo_request+0xb6>
		src = &ip_hdr->dst;
   271ba:	683b      	ldr	r3, [r7, #0]
   271bc:	3310      	adds	r3, #16
   271be:	643b      	str	r3, [r7, #64]	; 0x40
	if (net_ipv4_create(reply, src, &ip_hdr->src) ||
   271c0:	683b      	ldr	r3, [r7, #0]
   271c2:	330c      	adds	r3, #12
   271c4:	461a      	mov	r2, r3
   271c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
   271c8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   271ca:	f000 fa3e 	bl	2764a <net_ipv4_create>
   271ce:	4603      	mov	r3, r0
   271d0:	2b00      	cmp	r3, #0
   271d2:	d111      	bne.n	271f8 <icmpv4_handle_echo_request+0xee>
	    icmpv4_create(reply, NET_ICMPV4_ECHO_REPLY, 0) ||
   271d4:	2200      	movs	r2, #0
   271d6:	2100      	movs	r1, #0
   271d8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   271da:	f7ff ff40 	bl	2705e <icmpv4_create>
   271de:	4603      	mov	r3, r0
	if (net_ipv4_create(reply, src, &ip_hdr->src) ||
   271e0:	2b00      	cmp	r3, #0
   271e2:	d109      	bne.n	271f8 <icmpv4_handle_echo_request+0xee>
	    net_pkt_copy(reply, pkt, payload_len)) {
   271e4:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
   271e8:	461a      	mov	r2, r3
   271ea:	6879      	ldr	r1, [r7, #4]
   271ec:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   271ee:	f7ff f859 	bl	262a4 <net_pkt_copy>
   271f2:	4603      	mov	r3, r0
	    icmpv4_create(reply, NET_ICMPV4_ECHO_REPLY, 0) ||
   271f4:	2b00      	cmp	r3, #0
   271f6:	d005      	beq.n	27204 <icmpv4_handle_echo_request+0xfa>
		NET_DBG("DROP: wrong buffer");
   271f8:	f7ff fe49 	bl	26e8e <_is_user_context>
   271fc:	4603      	mov	r3, r0
   271fe:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		goto drop;
   27202:	e019      	b.n	27238 <icmpv4_handle_echo_request+0x12e>
	net_pkt_cursor_init(reply);
   27204:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   27206:	f7fe fe59 	bl	25ebc <net_pkt_cursor_init>
	net_ipv4_finalize(reply, IPPROTO_ICMP);
   2720a:	2101      	movs	r1, #1
   2720c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   2720e:	f000 fa89 	bl	27724 <net_ipv4_finalize>
	NET_DBG("Sending Echo Reply from %s to %s",
   27212:	f7ff fe3c 	bl	26e8e <_is_user_context>
   27216:	4603      	mov	r3, r0
   27218:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (net_send_data(reply) < 0) {
   2721c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   2721e:	f7fd fc3c 	bl	24a9a <net_send_data>
   27222:	4603      	mov	r3, r0
   27224:	2b00      	cmp	r3, #0
   27226:	db06      	blt.n	27236 <icmpv4_handle_echo_request+0x12c>
	net_pkt_unref(pkt);
   27228:	6878      	ldr	r0, [r7, #4]
   2722a:	f7fe fbee 	bl	25a0a <net_pkt_unref>
	return NET_OK;
   2722e:	2300      	movs	r3, #0
   27230:	e009      	b.n	27246 <icmpv4_handle_echo_request+0x13c>
		goto drop;
   27232:	bf00      	nop
   27234:	e000      	b.n	27238 <icmpv4_handle_echo_request+0x12e>
		goto drop;
   27236:	bf00      	nop
	if (reply) {
   27238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2723a:	2b00      	cmp	r3, #0
   2723c:	d002      	beq.n	27244 <icmpv4_handle_echo_request+0x13a>
		net_pkt_unref(reply);
   2723e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   27240:	f7fe fbe3 	bl	25a0a <net_pkt_unref>
	return NET_DROP;
   27244:	2302      	movs	r3, #2
}
   27246:	4618      	mov	r0, r3
   27248:	3754      	adds	r7, #84	; 0x54
   2724a:	46bd      	mov	sp, r7
   2724c:	bd90      	pop	{r4, r7, pc}

0002724e <net_icmpv4_send_error>:
{
   2724e:	b590      	push	{r4, r7, lr}
   27250:	b09b      	sub	sp, #108	; 0x6c
   27252:	af02      	add	r7, sp, #8
   27254:	6078      	str	r0, [r7, #4]
   27256:	460b      	mov	r3, r1
   27258:	70fb      	strb	r3, [r7, #3]
   2725a:	4613      	mov	r3, r2
   2725c:	70bb      	strb	r3, [r7, #2]
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   2725e:	2300      	movs	r3, #0
   27260:	643b      	str	r3, [r7, #64]	; 0x40
   27262:	2314      	movs	r3, #20
   27264:	647b      	str	r3, [r7, #68]	; 0x44
	int err = -EIO;
   27266:	f06f 0304 	mvn.w	r3, #4
   2726a:	65fb      	str	r3, [r7, #92]	; 0x5c
	net_pkt_cursor_init(orig);
   2726c:	6878      	ldr	r0, [r7, #4]
   2726e:	f7fe fe25 	bl	25ebc <net_pkt_cursor_init>
	ip_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(orig, &ipv4_access);
   27272:	f107 0340 	add.w	r3, r7, #64	; 0x40
   27276:	4619      	mov	r1, r3
   27278:	6878      	ldr	r0, [r7, #4]
   2727a:	f7ff f933 	bl	264e4 <net_pkt_get_data>
   2727e:	6538      	str	r0, [r7, #80]	; 0x50
	if (!ip_hdr) {
   27280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   27282:	2b00      	cmp	r3, #0
   27284:	f000 8092 	beq.w	273ac <net_icmpv4_send_error+0x15e>
	if (ip_hdr->proto == IPPROTO_ICMP) {
   27288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   2728a:	7a5b      	ldrb	r3, [r3, #9]
   2728c:	2b01      	cmp	r3, #1
   2728e:	d115      	bne.n	272bc <net_icmpv4_send_error+0x6e>
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   27290:	2300      	movs	r3, #0
   27292:	63bb      	str	r3, [r7, #56]	; 0x38
   27294:	2304      	movs	r3, #4
   27296:	63fb      	str	r3, [r7, #60]	; 0x3c
		icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(
   27298:	f107 0338 	add.w	r3, r7, #56	; 0x38
   2729c:	4619      	mov	r1, r3
   2729e:	6878      	ldr	r0, [r7, #4]
   272a0:	f7ff f920 	bl	264e4 <net_pkt_get_data>
   272a4:	64f8      	str	r0, [r7, #76]	; 0x4c
		if (!icmp_hdr || icmp_hdr->code < 8) {
   272a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   272a8:	2b00      	cmp	r3, #0
   272aa:	d003      	beq.n	272b4 <net_icmpv4_send_error+0x66>
   272ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   272ae:	785b      	ldrb	r3, [r3, #1]
   272b0:	2b07      	cmp	r3, #7
   272b2:	d803      	bhi.n	272bc <net_icmpv4_send_error+0x6e>
			err = -EINVAL;
   272b4:	f06f 0315 	mvn.w	r3, #21
   272b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   272ba:	e078      	b.n	273ae <net_icmpv4_send_error+0x160>
	if (ip_hdr->proto == IPPROTO_UDP) {
   272bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   272be:	7a5b      	ldrb	r3, [r3, #9]
   272c0:	2b11      	cmp	r3, #17
   272c2:	d102      	bne.n	272ca <net_icmpv4_send_error+0x7c>
		copy_len = sizeof(struct net_ipv4_hdr) +
   272c4:	231c      	movs	r3, #28
   272c6:	65bb      	str	r3, [r7, #88]	; 0x58
   272c8:	e008      	b.n	272dc <net_icmpv4_send_error+0x8e>
	} else if (ip_hdr->proto == IPPROTO_TCP) {
   272ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   272cc:	7a5b      	ldrb	r3, [r3, #9]
   272ce:	2b06      	cmp	r3, #6
   272d0:	d102      	bne.n	272d8 <net_icmpv4_send_error+0x8a>
		copy_len = sizeof(struct net_ipv4_hdr) +
   272d2:	2328      	movs	r3, #40	; 0x28
   272d4:	65bb      	str	r3, [r7, #88]	; 0x58
   272d6:	e001      	b.n	272dc <net_icmpv4_send_error+0x8e>
		copy_len = 0;
   272d8:	2300      	movs	r3, #0
   272da:	65bb      	str	r3, [r7, #88]	; 0x58
	pkt = net_pkt_alloc_with_buffer(net_pkt_iface(orig),
   272dc:	6878      	ldr	r0, [r7, #4]
   272de:	f7ff fe66 	bl	26fae <net_pkt_iface>
   272e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   272e4:	1d19      	adds	r1, r3, #4
   272e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   272ea:	9300      	str	r3, [sp, #0]
   272ec:	2301      	movs	r3, #1
   272ee:	2201      	movs	r2, #1
   272f0:	f7ec fd36 	bl	13d60 <net_pkt_alloc_with_buffer>
   272f4:	6578      	str	r0, [r7, #84]	; 0x54
	if (!pkt) {
   272f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   272f8:	2b00      	cmp	r3, #0
   272fa:	d103      	bne.n	27304 <net_icmpv4_send_error+0xb6>
		err =  -ENOMEM;
   272fc:	f06f 030b 	mvn.w	r3, #11
   27300:	65fb      	str	r3, [r7, #92]	; 0x5c
		goto drop_no_pkt;
   27302:	e054      	b.n	273ae <net_icmpv4_send_error+0x160>
	if (net_ipv4_create(pkt, &ip_hdr->dst, &ip_hdr->src) ||
   27304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   27306:	f103 0110 	add.w	r1, r3, #16
   2730a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   2730c:	330c      	adds	r3, #12
   2730e:	461a      	mov	r2, r3
   27310:	6d78      	ldr	r0, [r7, #84]	; 0x54
   27312:	f000 f99a 	bl	2764a <net_ipv4_create>
   27316:	4603      	mov	r3, r0
   27318:	2b00      	cmp	r3, #0
   2731a:	d140      	bne.n	2739e <net_icmpv4_send_error+0x150>
	    icmpv4_create(pkt, type, code) ||
   2731c:	78ba      	ldrb	r2, [r7, #2]
   2731e:	78fb      	ldrb	r3, [r7, #3]
   27320:	4619      	mov	r1, r3
   27322:	6d78      	ldr	r0, [r7, #84]	; 0x54
   27324:	f7ff fe9b 	bl	2705e <icmpv4_create>
   27328:	4603      	mov	r3, r0
	if (net_ipv4_create(pkt, &ip_hdr->dst, &ip_hdr->src) ||
   2732a:	2b00      	cmp	r3, #0
   2732c:	d137      	bne.n	2739e <net_icmpv4_send_error+0x150>
	    net_pkt_memset(pkt, 0, NET_ICMPV4_UNUSED_LEN) ||
   2732e:	2204      	movs	r2, #4
   27330:	2100      	movs	r1, #0
   27332:	6d78      	ldr	r0, [r7, #84]	; 0x54
   27334:	f7fe ff5b 	bl	261ee <net_pkt_memset>
   27338:	4603      	mov	r3, r0
	    icmpv4_create(pkt, type, code) ||
   2733a:	2b00      	cmp	r3, #0
   2733c:	d12f      	bne.n	2739e <net_icmpv4_send_error+0x150>
	    net_pkt_copy(pkt, orig, copy_len)) {
   2733e:	6dba      	ldr	r2, [r7, #88]	; 0x58
   27340:	6879      	ldr	r1, [r7, #4]
   27342:	6d78      	ldr	r0, [r7, #84]	; 0x54
   27344:	f7fe ffae 	bl	262a4 <net_pkt_copy>
   27348:	4603      	mov	r3, r0
	    net_pkt_memset(pkt, 0, NET_ICMPV4_UNUSED_LEN) ||
   2734a:	2b00      	cmp	r3, #0
   2734c:	d127      	bne.n	2739e <net_icmpv4_send_error+0x150>
	net_pkt_cursor_init(pkt);
   2734e:	6d78      	ldr	r0, [r7, #84]	; 0x54
   27350:	f7fe fdb4 	bl	25ebc <net_pkt_cursor_init>
	net_ipv4_finalize(pkt, IPPROTO_ICMP);
   27354:	2101      	movs	r1, #1
   27356:	6d78      	ldr	r0, [r7, #84]	; 0x54
   27358:	f000 f9e4 	bl	27724 <net_ipv4_finalize>
	net_pkt_lladdr_dst(pkt)->addr = net_pkt_lladdr_src(orig)->addr;
   2735c:	6878      	ldr	r0, [r7, #4]
   2735e:	f7ff fe4b 	bl	26ff8 <net_pkt_lladdr_src>
   27362:	4604      	mov	r4, r0
   27364:	6d78      	ldr	r0, [r7, #84]	; 0x54
   27366:	f7ff fe52 	bl	2700e <net_pkt_lladdr_dst>
   2736a:	4602      	mov	r2, r0
   2736c:	6823      	ldr	r3, [r4, #0]
   2736e:	6013      	str	r3, [r2, #0]
	net_pkt_lladdr_dst(pkt)->len = net_pkt_lladdr_src(orig)->len;
   27370:	6878      	ldr	r0, [r7, #4]
   27372:	f7ff fe41 	bl	26ff8 <net_pkt_lladdr_src>
   27376:	4604      	mov	r4, r0
   27378:	6d78      	ldr	r0, [r7, #84]	; 0x54
   2737a:	f7ff fe48 	bl	2700e <net_pkt_lladdr_dst>
   2737e:	4603      	mov	r3, r0
   27380:	7922      	ldrb	r2, [r4, #4]
   27382:	711a      	strb	r2, [r3, #4]
	NET_DBG("Sending ICMPv4 Error Message type %d code %d from %s to %s",
   27384:	f7ff fd83 	bl	26e8e <_is_user_context>
   27388:	4603      	mov	r3, r0
   2738a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	if (net_send_data(pkt) >= 0) {
   2738e:	6d78      	ldr	r0, [r7, #84]	; 0x54
   27390:	f7fd fb83 	bl	24a9a <net_send_data>
   27394:	4603      	mov	r3, r0
   27396:	2b00      	cmp	r3, #0
   27398:	db03      	blt.n	273a2 <net_icmpv4_send_error+0x154>
		return 0;
   2739a:	2300      	movs	r3, #0
   2739c:	e008      	b.n	273b0 <net_icmpv4_send_error+0x162>
		goto drop;
   2739e:	bf00      	nop
   273a0:	e000      	b.n	273a4 <net_icmpv4_send_error+0x156>
drop:
   273a2:	bf00      	nop
	net_pkt_unref(pkt);
   273a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
   273a6:	f7fe fb30 	bl	25a0a <net_pkt_unref>
   273aa:	e000      	b.n	273ae <net_icmpv4_send_error+0x160>
		goto drop_no_pkt;
   273ac:	bf00      	nop
	return err;
   273ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
   273b0:	4618      	mov	r0, r3
   273b2:	3764      	adds	r7, #100	; 0x64
   273b4:	46bd      	mov	sp, r7
   273b6:	bd90      	pop	{r4, r7, pc}

000273b8 <_is_user_context>:
{
   273b8:	b480      	push	{r7}
   273ba:	af00      	add	r7, sp, #0
	return false;
   273bc:	2300      	movs	r3, #0
}
   273be:	4618      	mov	r0, r3
   273c0:	46bd      	mov	sp, r7
   273c2:	bc80      	pop	{r7}
   273c4:	4770      	bx	lr

000273c6 <net_buf_frags_len>:
{
   273c6:	b480      	push	{r7}
   273c8:	b085      	sub	sp, #20
   273ca:	af00      	add	r7, sp, #0
   273cc:	6078      	str	r0, [r7, #4]
	size_t bytes = 0;
   273ce:	2300      	movs	r3, #0
   273d0:	60fb      	str	r3, [r7, #12]
	while (buf) {
   273d2:	e008      	b.n	273e6 <net_buf_frags_len+0x20>
		bytes += buf->len;
   273d4:	687b      	ldr	r3, [r7, #4]
   273d6:	899b      	ldrh	r3, [r3, #12]
   273d8:	461a      	mov	r2, r3
   273da:	68fb      	ldr	r3, [r7, #12]
   273dc:	4413      	add	r3, r2
   273de:	60fb      	str	r3, [r7, #12]
		buf = buf->frags;
   273e0:	687b      	ldr	r3, [r7, #4]
   273e2:	681b      	ldr	r3, [r3, #0]
   273e4:	607b      	str	r3, [r7, #4]
	while (buf) {
   273e6:	687b      	ldr	r3, [r7, #4]
   273e8:	2b00      	cmp	r3, #0
   273ea:	d1f3      	bne.n	273d4 <net_buf_frags_len+0xe>
	return bytes;
   273ec:	68fb      	ldr	r3, [r7, #12]
}
   273ee:	4618      	mov	r0, r3
   273f0:	3714      	adds	r7, #20
   273f2:	46bd      	mov	sp, r7
   273f4:	bc80      	pop	{r7}
   273f6:	4770      	bx	lr

000273f8 <net_ipv4_is_addr_unspecified>:
{
   273f8:	b480      	push	{r7}
   273fa:	b085      	sub	sp, #20
   273fc:	af00      	add	r7, sp, #0
   273fe:	6078      	str	r0, [r7, #4]
	return UNALIGNED_GET(&addr->s_addr) == 0;
   27400:	687b      	ldr	r3, [r7, #4]
   27402:	60fb      	str	r3, [r7, #12]
   27404:	68fb      	ldr	r3, [r7, #12]
   27406:	681b      	ldr	r3, [r3, #0]
   27408:	2b00      	cmp	r3, #0
   2740a:	bf0c      	ite	eq
   2740c:	2301      	moveq	r3, #1
   2740e:	2300      	movne	r3, #0
   27410:	b2db      	uxtb	r3, r3
}
   27412:	4618      	mov	r0, r3
   27414:	3714      	adds	r7, #20
   27416:	46bd      	mov	sp, r7
   27418:	bc80      	pop	{r7}
   2741a:	4770      	bx	lr

0002741c <net_ipv4_is_addr_mcast>:
{
   2741c:	b480      	push	{r7}
   2741e:	b087      	sub	sp, #28
   27420:	af00      	add	r7, sp, #0
   27422:	6078      	str	r0, [r7, #4]
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xE0000000) == 0xE0000000;
   27424:	687b      	ldr	r3, [r7, #4]
   27426:	617b      	str	r3, [r7, #20]
   27428:	697b      	ldr	r3, [r7, #20]
   2742a:	681b      	ldr	r3, [r3, #0]
   2742c:	0e1b      	lsrs	r3, r3, #24
   2742e:	b2da      	uxtb	r2, r3
   27430:	687b      	ldr	r3, [r7, #4]
   27432:	613b      	str	r3, [r7, #16]
   27434:	693b      	ldr	r3, [r7, #16]
   27436:	681b      	ldr	r3, [r3, #0]
   27438:	0a1b      	lsrs	r3, r3, #8
   2743a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   2743e:	431a      	orrs	r2, r3
   27440:	687b      	ldr	r3, [r7, #4]
   27442:	60fb      	str	r3, [r7, #12]
   27444:	68fb      	ldr	r3, [r7, #12]
   27446:	681b      	ldr	r3, [r3, #0]
   27448:	021b      	lsls	r3, r3, #8
   2744a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   2744e:	431a      	orrs	r2, r3
   27450:	687b      	ldr	r3, [r7, #4]
   27452:	60bb      	str	r3, [r7, #8]
   27454:	68bb      	ldr	r3, [r7, #8]
   27456:	681b      	ldr	r3, [r3, #0]
   27458:	061b      	lsls	r3, r3, #24
   2745a:	4313      	orrs	r3, r2
   2745c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   27460:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
   27464:	bf0c      	ite	eq
   27466:	2301      	moveq	r3, #1
   27468:	2300      	movne	r3, #0
   2746a:	b2db      	uxtb	r3, r3
}
   2746c:	4618      	mov	r0, r3
   2746e:	371c      	adds	r7, #28
   27470:	46bd      	mov	sp, r7
   27472:	bc80      	pop	{r7}
   27474:	4770      	bx	lr

00027476 <net_ipv4_addr_cmp>:
{
   27476:	b480      	push	{r7}
   27478:	b085      	sub	sp, #20
   2747a:	af00      	add	r7, sp, #0
   2747c:	6078      	str	r0, [r7, #4]
   2747e:	6039      	str	r1, [r7, #0]
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   27480:	687b      	ldr	r3, [r7, #4]
   27482:	60fb      	str	r3, [r7, #12]
   27484:	68fb      	ldr	r3, [r7, #12]
   27486:	681a      	ldr	r2, [r3, #0]
   27488:	683b      	ldr	r3, [r7, #0]
   2748a:	60bb      	str	r3, [r7, #8]
   2748c:	68bb      	ldr	r3, [r7, #8]
   2748e:	681b      	ldr	r3, [r3, #0]
   27490:	429a      	cmp	r2, r3
   27492:	bf0c      	ite	eq
   27494:	2301      	moveq	r3, #1
   27496:	2300      	movne	r3, #0
   27498:	b2db      	uxtb	r3, r3
}
   2749a:	4618      	mov	r0, r3
   2749c:	3714      	adds	r7, #20
   2749e:	46bd      	mov	sp, r7
   274a0:	bc80      	pop	{r7}
   274a2:	4770      	bx	lr

000274a4 <net_ipv4_is_addr_bcast>:
{
   274a4:	b580      	push	{r7, lr}
   274a6:	b082      	sub	sp, #8
   274a8:	af00      	add	r7, sp, #0
   274aa:	6078      	str	r0, [r7, #4]
   274ac:	6039      	str	r1, [r7, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   274ae:	f7ec fe45 	bl	1413c <net_ipv4_broadcast_address>
   274b2:	4603      	mov	r3, r0
   274b4:	4619      	mov	r1, r3
   274b6:	6838      	ldr	r0, [r7, #0]
   274b8:	f7ff ffdd 	bl	27476 <net_ipv4_addr_cmp>
   274bc:	4603      	mov	r3, r0
   274be:	2b00      	cmp	r3, #0
   274c0:	d001      	beq.n	274c6 <net_ipv4_is_addr_bcast+0x22>
		return true;
   274c2:	2301      	movs	r3, #1
   274c4:	e004      	b.n	274d0 <net_ipv4_is_addr_bcast+0x2c>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   274c6:	6839      	ldr	r1, [r7, #0]
   274c8:	6878      	ldr	r0, [r7, #4]
   274ca:	f7eb ffc1 	bl	13450 <net_if_ipv4_is_addr_bcast>
   274ce:	4603      	mov	r3, r0
}
   274d0:	4618      	mov	r0, r3
   274d2:	3708      	adds	r7, #8
   274d4:	46bd      	mov	sp, r7
   274d6:	bd80      	pop	{r7, pc}

000274d8 <net_ipv4_is_my_addr>:
{
   274d8:	b580      	push	{r7, lr}
   274da:	b084      	sub	sp, #16
   274dc:	af00      	add	r7, sp, #0
   274de:	6078      	str	r0, [r7, #4]
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
   274e0:	2100      	movs	r1, #0
   274e2:	6878      	ldr	r0, [r7, #4]
   274e4:	f7ec f880 	bl	135e8 <net_if_ipv4_addr_lookup>
   274e8:	4603      	mov	r3, r0
   274ea:	2b00      	cmp	r3, #0
   274ec:	bf14      	ite	ne
   274ee:	2301      	movne	r3, #1
   274f0:	2300      	moveq	r3, #0
   274f2:	73fb      	strb	r3, [r7, #15]
	if (!ret) {
   274f4:	7bfb      	ldrb	r3, [r7, #15]
   274f6:	f083 0301 	eor.w	r3, r3, #1
   274fa:	b2db      	uxtb	r3, r3
   274fc:	2b00      	cmp	r3, #0
   274fe:	d005      	beq.n	2750c <net_ipv4_is_my_addr+0x34>
		ret = net_ipv4_is_addr_bcast(NULL, addr);
   27500:	6879      	ldr	r1, [r7, #4]
   27502:	2000      	movs	r0, #0
   27504:	f7ff ffce 	bl	274a4 <net_ipv4_is_addr_bcast>
   27508:	4603      	mov	r3, r0
   2750a:	73fb      	strb	r3, [r7, #15]
	return ret;
   2750c:	7bfb      	ldrb	r3, [r7, #15]
}
   2750e:	4618      	mov	r0, r3
   27510:	3710      	adds	r7, #16
   27512:	46bd      	mov	sp, r7
   27514:	bd80      	pop	{r7, pc}

00027516 <net_if_ipv4_get_ttl>:
 * @param iface Network interface
 *
 * @return Time-to-live
 */
static inline u8_t net_if_ipv4_get_ttl(struct net_if *iface)
{
   27516:	b480      	push	{r7}
   27518:	b083      	sub	sp, #12
   2751a:	af00      	add	r7, sp, #0
   2751c:	6078      	str	r0, [r7, #4]
#if defined(CONFIG_NET_IPV4)
	if (!iface->config.ip.ipv4) {
   2751e:	687b      	ldr	r3, [r7, #4]
   27520:	685b      	ldr	r3, [r3, #4]
   27522:	2b00      	cmp	r3, #0
   27524:	d101      	bne.n	2752a <net_if_ipv4_get_ttl+0x14>
		return 0;
   27526:	2300      	movs	r3, #0
   27528:	e003      	b.n	27532 <net_if_ipv4_get_ttl+0x1c>
	}

	return iface->config.ip.ipv4->ttl;
   2752a:	687b      	ldr	r3, [r7, #4]
   2752c:	685b      	ldr	r3, [r3, #4]
   2752e:	f893 3020 	ldrb.w	r3, [r3, #32]
#else
	return 0;
#endif
}
   27532:	4618      	mov	r0, r3
   27534:	370c      	adds	r7, #12
   27536:	46bd      	mov	sp, r7
   27538:	bc80      	pop	{r7}
   2753a:	4770      	bx	lr

0002753c <net_pkt_iface>:
{
   2753c:	b480      	push	{r7}
   2753e:	b083      	sub	sp, #12
   27540:	af00      	add	r7, sp, #0
   27542:	6078      	str	r0, [r7, #4]
	return pkt->iface;
   27544:	687b      	ldr	r3, [r7, #4]
   27546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   27548:	4618      	mov	r0, r3
   2754a:	370c      	adds	r7, #12
   2754c:	46bd      	mov	sp, r7
   2754e:	bc80      	pop	{r7}
   27550:	4770      	bx	lr

00027552 <net_pkt_set_family>:
{
   27552:	b480      	push	{r7}
   27554:	b083      	sub	sp, #12
   27556:	af00      	add	r7, sp, #0
   27558:	6078      	str	r0, [r7, #4]
   2755a:	460b      	mov	r3, r1
   2755c:	70fb      	strb	r3, [r7, #3]
	pkt->family = family;
   2755e:	78fb      	ldrb	r3, [r7, #3]
   27560:	f003 0307 	and.w	r3, r3, #7
   27564:	b2d9      	uxtb	r1, r3
   27566:	687a      	ldr	r2, [r7, #4]
   27568:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
   2756c:	f361 0343 	bfi	r3, r1, #1, #3
   27570:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
}
   27574:	bf00      	nop
   27576:	370c      	adds	r7, #12
   27578:	46bd      	mov	sp, r7
   2757a:	bc80      	pop	{r7}
   2757c:	4770      	bx	lr

0002757e <net_pkt_set_ip_hdr_len>:
{
   2757e:	b480      	push	{r7}
   27580:	b083      	sub	sp, #12
   27582:	af00      	add	r7, sp, #0
   27584:	6078      	str	r0, [r7, #4]
   27586:	460b      	mov	r3, r1
   27588:	70fb      	strb	r3, [r7, #3]
	pkt->ip_hdr_len = len;
   2758a:	687b      	ldr	r3, [r7, #4]
   2758c:	78fa      	ldrb	r2, [r7, #3]
   2758e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
   27592:	bf00      	nop
   27594:	370c      	adds	r7, #12
   27596:	46bd      	mov	sp, r7
   27598:	bc80      	pop	{r7}
   2759a:	4770      	bx	lr

0002759c <net_pkt_ipv4_ttl>:
{
   2759c:	b480      	push	{r7}
   2759e:	b083      	sub	sp, #12
   275a0:	af00      	add	r7, sp, #0
   275a2:	6078      	str	r0, [r7, #4]
	return pkt->ipv4_ttl;
   275a4:	687b      	ldr	r3, [r7, #4]
   275a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
}
   275aa:	4618      	mov	r0, r3
   275ac:	370c      	adds	r7, #12
   275ae:	46bd      	mov	sp, r7
   275b0:	bc80      	pop	{r7}
   275b2:	4770      	bx	lr

000275b4 <net_pkt_set_ipv4_ttl>:
{
   275b4:	b480      	push	{r7}
   275b6:	b083      	sub	sp, #12
   275b8:	af00      	add	r7, sp, #0
   275ba:	6078      	str	r0, [r7, #4]
   275bc:	460b      	mov	r3, r1
   275be:	70fb      	strb	r3, [r7, #3]
	pkt->ipv4_ttl = ttl;
   275c0:	687b      	ldr	r3, [r7, #4]
   275c2:	78fa      	ldrb	r2, [r7, #3]
   275c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
   275c8:	bf00      	nop
   275ca:	370c      	adds	r7, #12
   275cc:	46bd      	mov	sp, r7
   275ce:	bc80      	pop	{r7}
   275d0:	4770      	bx	lr

000275d2 <net_pkt_get_len>:
{
   275d2:	b580      	push	{r7, lr}
   275d4:	b082      	sub	sp, #8
   275d6:	af00      	add	r7, sp, #0
   275d8:	6078      	str	r0, [r7, #4]
	return net_buf_frags_len(pkt->frags);
   275da:	687b      	ldr	r3, [r7, #4]
   275dc:	695b      	ldr	r3, [r3, #20]
   275de:	4618      	mov	r0, r3
   275e0:	f7ff fef1 	bl	273c6 <net_buf_frags_len>
   275e4:	4603      	mov	r3, r0
}
   275e6:	4618      	mov	r0, r3
   275e8:	3708      	adds	r7, #8
   275ea:	46bd      	mov	sp, r7
   275ec:	bd80      	pop	{r7, pc}

000275ee <net_pkt_set_overwrite>:
{
   275ee:	b480      	push	{r7}
   275f0:	b083      	sub	sp, #12
   275f2:	af00      	add	r7, sp, #0
   275f4:	6078      	str	r0, [r7, #4]
   275f6:	460b      	mov	r3, r1
   275f8:	70fb      	strb	r3, [r7, #3]
	pkt->overwrite = overwrite;
   275fa:	687a      	ldr	r2, [r7, #4]
   275fc:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
   27600:	78f9      	ldrb	r1, [r7, #3]
   27602:	f361 0300 	bfi	r3, r1, #0, #1
   27606:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
}
   2760a:	bf00      	nop
   2760c:	370c      	adds	r7, #12
   2760e:	46bd      	mov	sp, r7
   27610:	bc80      	pop	{r7}
   27612:	4770      	bx	lr

00027614 <net_pkt_acknowledge_data>:
{
   27614:	b580      	push	{r7, lr}
   27616:	b082      	sub	sp, #8
   27618:	af00      	add	r7, sp, #0
   2761a:	6078      	str	r0, [r7, #4]
   2761c:	6039      	str	r1, [r7, #0]
	return net_pkt_skip(pkt, access->size);
   2761e:	683b      	ldr	r3, [r7, #0]
   27620:	685b      	ldr	r3, [r3, #4]
   27622:	4619      	mov	r1, r3
   27624:	6878      	ldr	r0, [r7, #4]
   27626:	f7fe fdcc 	bl	261c2 <net_pkt_skip>
   2762a:	4603      	mov	r3, r0
}
   2762c:	4618      	mov	r0, r3
   2762e:	3708      	adds	r7, #8
   27630:	46bd      	mov	sp, r7
   27632:	bd80      	pop	{r7, pc}

00027634 <net_tcp_input>:
				  struct net_pkt_data_access *tcp_access);
#else
static inline
struct net_tcp_hdr *net_tcp_input(struct net_pkt *pkt,
				  struct net_pkt_data_access *tcp_access)
{
   27634:	b480      	push	{r7}
   27636:	b083      	sub	sp, #12
   27638:	af00      	add	r7, sp, #0
   2763a:	6078      	str	r0, [r7, #4]
   2763c:	6039      	str	r1, [r7, #0]
	ARG_UNUSED(pkt);
	ARG_UNUSED(tcp_access);

	return NULL;
   2763e:	2300      	movs	r3, #0
}
   27640:	4618      	mov	r0, r3
   27642:	370c      	adds	r7, #12
   27644:	46bd      	mov	sp, r7
   27646:	bc80      	pop	{r7}
   27648:	4770      	bx	lr

0002764a <net_ipv4_create>:
{
   2764a:	b580      	push	{r7, lr}
   2764c:	b08c      	sub	sp, #48	; 0x30
   2764e:	af00      	add	r7, sp, #0
   27650:	60f8      	str	r0, [r7, #12]
   27652:	60b9      	str	r1, [r7, #8]
   27654:	607a      	str	r2, [r7, #4]
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   27656:	2300      	movs	r3, #0
   27658:	617b      	str	r3, [r7, #20]
   2765a:	2314      	movs	r3, #20
   2765c:	61bb      	str	r3, [r7, #24]
	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
   2765e:	f107 0314 	add.w	r3, r7, #20
   27662:	4619      	mov	r1, r3
   27664:	68f8      	ldr	r0, [r7, #12]
   27666:	f7fe ff3d 	bl	264e4 <net_pkt_get_data>
   2766a:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (!ipv4_hdr) {
   2766c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2766e:	2b00      	cmp	r3, #0
   27670:	d102      	bne.n	27678 <net_ipv4_create+0x2e>
		return -ENOBUFS;
   27672:	f06f 0368 	mvn.w	r3, #104	; 0x68
   27676:	e051      	b.n	2771c <net_ipv4_create+0xd2>
	ipv4_hdr->vhl       = 0x45;
   27678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2767a:	2245      	movs	r2, #69	; 0x45
   2767c:	701a      	strb	r2, [r3, #0]
	ipv4_hdr->tos       = 0x00;
   2767e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27680:	2200      	movs	r2, #0
   27682:	705a      	strb	r2, [r3, #1]
	ipv4_hdr->len       = 0U;
   27684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27686:	2200      	movs	r2, #0
   27688:	709a      	strb	r2, [r3, #2]
   2768a:	2200      	movs	r2, #0
   2768c:	70da      	strb	r2, [r3, #3]
	ipv4_hdr->id[0]     = 0U;
   2768e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27690:	2200      	movs	r2, #0
   27692:	711a      	strb	r2, [r3, #4]
	ipv4_hdr->id[1]     = 0U;
   27694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27696:	2200      	movs	r2, #0
   27698:	715a      	strb	r2, [r3, #5]
	ipv4_hdr->offset[0] = 0U;
   2769a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2769c:	2200      	movs	r2, #0
   2769e:	719a      	strb	r2, [r3, #6]
	ipv4_hdr->offset[1] = 0U;
   276a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   276a2:	2200      	movs	r2, #0
   276a4:	71da      	strb	r2, [r3, #7]
	ipv4_hdr->ttl       = net_pkt_ipv4_ttl(pkt);
   276a6:	68f8      	ldr	r0, [r7, #12]
   276a8:	f7ff ff78 	bl	2759c <net_pkt_ipv4_ttl>
   276ac:	4603      	mov	r3, r0
   276ae:	461a      	mov	r2, r3
   276b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   276b2:	721a      	strb	r2, [r3, #8]
	if (ipv4_hdr->ttl == 0U) {
   276b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   276b6:	7a1b      	ldrb	r3, [r3, #8]
   276b8:	2b00      	cmp	r3, #0
   276ba:	d10a      	bne.n	276d2 <net_ipv4_create+0x88>
		ipv4_hdr->ttl = net_if_ipv4_get_ttl(net_pkt_iface(pkt));
   276bc:	68f8      	ldr	r0, [r7, #12]
   276be:	f7ff ff3d 	bl	2753c <net_pkt_iface>
   276c2:	4603      	mov	r3, r0
   276c4:	4618      	mov	r0, r3
   276c6:	f7ff ff26 	bl	27516 <net_if_ipv4_get_ttl>
   276ca:	4603      	mov	r3, r0
   276cc:	461a      	mov	r2, r3
   276ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   276d0:	721a      	strb	r2, [r3, #8]
	ipv4_hdr->proto     = 0U;
   276d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   276d4:	2200      	movs	r2, #0
   276d6:	725a      	strb	r2, [r3, #9]
	ipv4_hdr->chksum    = 0U;
   276d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   276da:	2200      	movs	r2, #0
   276dc:	729a      	strb	r2, [r3, #10]
   276de:	2200      	movs	r2, #0
   276e0:	72da      	strb	r2, [r3, #11]
	net_ipaddr_copy(&ipv4_hdr->dst, dst);
   276e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   276e4:	3310      	adds	r3, #16
   276e6:	62bb      	str	r3, [r7, #40]	; 0x28
   276e8:	687b      	ldr	r3, [r7, #4]
   276ea:	627b      	str	r3, [r7, #36]	; 0x24
   276ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   276ee:	681a      	ldr	r2, [r3, #0]
   276f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   276f2:	601a      	str	r2, [r3, #0]
	net_ipaddr_copy(&ipv4_hdr->src, src);
   276f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   276f6:	330c      	adds	r3, #12
   276f8:	623b      	str	r3, [r7, #32]
   276fa:	68bb      	ldr	r3, [r7, #8]
   276fc:	61fb      	str	r3, [r7, #28]
   276fe:	69fb      	ldr	r3, [r7, #28]
   27700:	681a      	ldr	r2, [r3, #0]
   27702:	6a3b      	ldr	r3, [r7, #32]
   27704:	601a      	str	r2, [r3, #0]
	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv4_hdr));
   27706:	2114      	movs	r1, #20
   27708:	68f8      	ldr	r0, [r7, #12]
   2770a:	f7ff ff38 	bl	2757e <net_pkt_set_ip_hdr_len>
	return net_pkt_set_data(pkt, &ipv4_access);
   2770e:	f107 0314 	add.w	r3, r7, #20
   27712:	4619      	mov	r1, r3
   27714:	68f8      	ldr	r0, [r7, #12]
   27716:	f7fe ff2d 	bl	26574 <net_pkt_set_data>
   2771a:	4603      	mov	r3, r0
}
   2771c:	4618      	mov	r0, r3
   2771e:	3730      	adds	r7, #48	; 0x30
   27720:	46bd      	mov	sp, r7
   27722:	bd80      	pop	{r7, pc}

00027724 <net_ipv4_finalize>:
{
   27724:	b590      	push	{r4, r7, lr}
   27726:	b087      	sub	sp, #28
   27728:	af00      	add	r7, sp, #0
   2772a:	6078      	str	r0, [r7, #4]
   2772c:	460b      	mov	r3, r1
   2772e:	70fb      	strb	r3, [r7, #3]
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   27730:	2300      	movs	r3, #0
   27732:	60fb      	str	r3, [r7, #12]
   27734:	2314      	movs	r3, #20
   27736:	613b      	str	r3, [r7, #16]
	net_pkt_set_overwrite(pkt, true);
   27738:	2101      	movs	r1, #1
   2773a:	6878      	ldr	r0, [r7, #4]
   2773c:	f7ff ff57 	bl	275ee <net_pkt_set_overwrite>
	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
   27740:	f107 030c 	add.w	r3, r7, #12
   27744:	4619      	mov	r1, r3
   27746:	6878      	ldr	r0, [r7, #4]
   27748:	f7fe fecc 	bl	264e4 <net_pkt_get_data>
   2774c:	6178      	str	r0, [r7, #20]
	if (!ipv4_hdr) {
   2774e:	697b      	ldr	r3, [r7, #20]
   27750:	2b00      	cmp	r3, #0
   27752:	d102      	bne.n	2775a <net_ipv4_finalize+0x36>
		return -ENOBUFS;
   27754:	f06f 0368 	mvn.w	r3, #104	; 0x68
   27758:	e03d      	b.n	277d6 <net_ipv4_finalize+0xb2>
	ipv4_hdr->len   = htons(net_pkt_get_len(pkt));
   2775a:	6878      	ldr	r0, [r7, #4]
   2775c:	f7ff ff39 	bl	275d2 <net_pkt_get_len>
   27760:	4603      	mov	r3, r0
   27762:	0a1b      	lsrs	r3, r3, #8
   27764:	b29b      	uxth	r3, r3
   27766:	b2db      	uxtb	r3, r3
   27768:	b29c      	uxth	r4, r3
   2776a:	6878      	ldr	r0, [r7, #4]
   2776c:	f7ff ff31 	bl	275d2 <net_pkt_get_len>
   27770:	4603      	mov	r3, r0
   27772:	b29b      	uxth	r3, r3
   27774:	021b      	lsls	r3, r3, #8
   27776:	b29b      	uxth	r3, r3
   27778:	4323      	orrs	r3, r4
   2777a:	b29a      	uxth	r2, r3
   2777c:	697b      	ldr	r3, [r7, #20]
   2777e:	805a      	strh	r2, [r3, #2]
	ipv4_hdr->proto = next_header_proto;
   27780:	697b      	ldr	r3, [r7, #20]
   27782:	78fa      	ldrb	r2, [r7, #3]
   27784:	725a      	strb	r2, [r3, #9]
	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   27786:	6878      	ldr	r0, [r7, #4]
   27788:	f7ff fed8 	bl	2753c <net_pkt_iface>
   2778c:	4603      	mov	r3, r0
   2778e:	4618      	mov	r0, r3
   27790:	f7fd ffd8 	bl	25744 <net_if_need_calc_tx_checksum>
   27794:	4603      	mov	r3, r0
   27796:	2b00      	cmp	r3, #0
   27798:	d006      	beq.n	277a8 <net_ipv4_finalize+0x84>
		ipv4_hdr->chksum = net_calc_chksum_ipv4(pkt);
   2779a:	6878      	ldr	r0, [r7, #4]
   2779c:	f7ff fac5 	bl	26d2a <net_calc_chksum_ipv4>
   277a0:	4603      	mov	r3, r0
   277a2:	461a      	mov	r2, r3
   277a4:	697b      	ldr	r3, [r7, #20]
   277a6:	815a      	strh	r2, [r3, #10]
	net_pkt_set_data(pkt, &ipv4_access);
   277a8:	f107 030c 	add.w	r3, r7, #12
   277ac:	4619      	mov	r1, r3
   277ae:	6878      	ldr	r0, [r7, #4]
   277b0:	f7fe fee0 	bl	26574 <net_pkt_set_data>
	if (IS_ENABLED(CONFIG_NET_UDP) &&
   277b4:	78fb      	ldrb	r3, [r7, #3]
   277b6:	2b11      	cmp	r3, #17
   277b8:	d104      	bne.n	277c4 <net_ipv4_finalize+0xa0>
		return net_udp_finalize(pkt);
   277ba:	6878      	ldr	r0, [r7, #4]
   277bc:	f000 fcba 	bl	28134 <net_udp_finalize>
   277c0:	4603      	mov	r3, r0
   277c2:	e008      	b.n	277d6 <net_ipv4_finalize+0xb2>
	} else if (next_header_proto == IPPROTO_ICMP) {
   277c4:	78fb      	ldrb	r3, [r7, #3]
   277c6:	2b01      	cmp	r3, #1
   277c8:	d104      	bne.n	277d4 <net_ipv4_finalize+0xb0>
		return net_icmpv4_finalize(pkt);
   277ca:	6878      	ldr	r0, [r7, #4]
   277cc:	f7ff fc76 	bl	270bc <net_icmpv4_finalize>
   277d0:	4603      	mov	r3, r0
   277d2:	e000      	b.n	277d6 <net_ipv4_finalize+0xb2>
	return 0;
   277d4:	2300      	movs	r3, #0
}
   277d6:	4618      	mov	r0, r3
   277d8:	371c      	adds	r7, #28
   277da:	46bd      	mov	sp, r7
   277dc:	bd90      	pop	{r4, r7, pc}

000277de <net_ipv4_input>:

enum net_verdict net_ipv4_input(struct net_pkt *pkt)
{
   277de:	b590      	push	{r4, r7, lr}
   277e0:	b0ab      	sub	sp, #172	; 0xac
   277e2:	af00      	add	r7, sp, #0
   277e4:	6078      	str	r0, [r7, #4]
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   277e6:	2300      	movs	r3, #0
   277e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   277ec:	2314      	movs	r3, #20
   277ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   277f2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
   277f6:	677b      	str	r3, [r7, #116]	; 0x74
   277f8:	2308      	movs	r3, #8
   277fa:	67bb      	str	r3, [r7, #120]	; 0x78
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   277fc:	f107 0360 	add.w	r3, r7, #96	; 0x60
   27800:	65bb      	str	r3, [r7, #88]	; 0x58
   27802:	2314      	movs	r3, #20
   27804:	65fb      	str	r3, [r7, #92]	; 0x5c
	int real_len = net_pkt_get_len(pkt);
   27806:	6878      	ldr	r0, [r7, #4]
   27808:	f7ff fee3 	bl	275d2 <net_pkt_get_len>
   2780c:	4603      	mov	r3, r0
   2780e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	enum net_verdict verdict = NET_DROP;
   27812:	2302      	movs	r3, #2
   27814:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
	u8_t hdr_len;
	int pkt_len;

	net_stats_update_ipv4_recv(net_pkt_iface(pkt));

	hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
   27818:	f107 0384 	add.w	r3, r7, #132	; 0x84
   2781c:	4619      	mov	r1, r3
   2781e:	6878      	ldr	r0, [r7, #4]
   27820:	f7fe fe60 	bl	264e4 <net_pkt_get_data>
   27824:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	if (!hdr) {
   27828:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   2782c:	2b00      	cmp	r3, #0
   2782e:	d105      	bne.n	2783c <net_ipv4_input+0x5e>
		NET_DBG("DROP: no buffer");
   27830:	f7ff fdc2 	bl	273b8 <_is_user_context>
   27834:	4603      	mov	r3, r0
   27836:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		goto drop;
   2783a:	e154      	b.n	27ae6 <net_ipv4_input+0x308>
	}

	hdr_len = (hdr->vhl & NET_IPV4_IHL_MASK) * 4U;
   2783c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   27840:	781b      	ldrb	r3, [r3, #0]
   27842:	f003 030f 	and.w	r3, r3, #15
   27846:	b2db      	uxtb	r3, r3
   27848:	009b      	lsls	r3, r3, #2
   2784a:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
	if (hdr_len < sizeof(struct net_ipv4_hdr)) {
   2784e:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
   27852:	2b13      	cmp	r3, #19
   27854:	d805      	bhi.n	27862 <net_ipv4_input+0x84>
		NET_DBG("DROP: Invalid hdr length");
   27856:	f7ff fdaf 	bl	273b8 <_is_user_context>
   2785a:	4603      	mov	r3, r0
   2785c:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
		goto drop;
   27860:	e141      	b.n	27ae6 <net_ipv4_input+0x308>
	}

	net_pkt_set_ip_hdr_len(pkt, hdr_len);
   27862:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
   27866:	4619      	mov	r1, r3
   27868:	6878      	ldr	r0, [r7, #4]
   2786a:	f7ff fe88 	bl	2757e <net_pkt_set_ip_hdr_len>

	pkt_len = ntohs(hdr->len);
   2786e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   27872:	885b      	ldrh	r3, [r3, #2]
   27874:	b29b      	uxth	r3, r3
   27876:	0a1b      	lsrs	r3, r3, #8
   27878:	b29b      	uxth	r3, r3
   2787a:	b21a      	sxth	r2, r3
   2787c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   27880:	885b      	ldrh	r3, [r3, #2]
   27882:	b29b      	uxth	r3, r3
   27884:	021b      	lsls	r3, r3, #8
   27886:	b21b      	sxth	r3, r3
   27888:	4313      	orrs	r3, r2
   2788a:	b21b      	sxth	r3, r3
   2788c:	b29b      	uxth	r3, r3
   2788e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	if (real_len < pkt_len) {
   27892:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
   27896:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   2789a:	429a      	cmp	r2, r3
   2789c:	da05      	bge.n	278aa <net_ipv4_input+0xcc>
		NET_DBG("DROP: pkt len per hdr %d != pkt real len %d",
   2789e:	f7ff fd8b 	bl	273b8 <_is_user_context>
   278a2:	4603      	mov	r3, r0
   278a4:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
			pkt_len, real_len);
		goto drop;
   278a8:	e11d      	b.n	27ae6 <net_ipv4_input+0x308>
	} else if (real_len > pkt_len) {
   278aa:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
   278ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   278b2:	429a      	cmp	r2, r3
   278b4:	dd05      	ble.n	278c2 <net_ipv4_input+0xe4>
		net_pkt_update_length(pkt, pkt_len);
   278b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   278ba:	4619      	mov	r1, r3
   278bc:	6878      	ldr	r0, [r7, #4]
   278be:	f7fe fdb3 	bl	26428 <net_pkt_update_length>
	}

	if (net_ipv4_is_addr_mcast(&hdr->src)) {
   278c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   278c6:	330c      	adds	r3, #12
   278c8:	4618      	mov	r0, r3
   278ca:	f7ff fda7 	bl	2741c <net_ipv4_is_addr_mcast>
   278ce:	4603      	mov	r3, r0
   278d0:	2b00      	cmp	r3, #0
   278d2:	d005      	beq.n	278e0 <net_ipv4_input+0x102>
		NET_DBG("DROP: src addr is %s", "mcast");
   278d4:	f7ff fd70 	bl	273b8 <_is_user_context>
   278d8:	4603      	mov	r3, r0
   278da:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
		goto drop;
   278de:	e102      	b.n	27ae6 <net_ipv4_input+0x308>
	}

	if (net_ipv4_is_addr_bcast(net_pkt_iface(pkt), &hdr->src)) {
   278e0:	6878      	ldr	r0, [r7, #4]
   278e2:	f7ff fe2b 	bl	2753c <net_pkt_iface>
   278e6:	4602      	mov	r2, r0
   278e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   278ec:	330c      	adds	r3, #12
   278ee:	4619      	mov	r1, r3
   278f0:	4610      	mov	r0, r2
   278f2:	f7ff fdd7 	bl	274a4 <net_ipv4_is_addr_bcast>
   278f6:	4603      	mov	r3, r0
   278f8:	2b00      	cmp	r3, #0
   278fa:	d005      	beq.n	27908 <net_ipv4_input+0x12a>
		NET_DBG("DROP: src addr is %s", "bcast");
   278fc:	f7ff fd5c 	bl	273b8 <_is_user_context>
   27900:	4603      	mov	r3, r0
   27902:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		goto drop;
   27906:	e0ee      	b.n	27ae6 <net_ipv4_input+0x308>
	}

	if (net_ipv4_is_addr_unspecified(&hdr->src)) {
   27908:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   2790c:	330c      	adds	r3, #12
   2790e:	4618      	mov	r0, r3
   27910:	f7ff fd72 	bl	273f8 <net_ipv4_is_addr_unspecified>
   27914:	4603      	mov	r3, r0
   27916:	2b00      	cmp	r3, #0
   27918:	d005      	beq.n	27926 <net_ipv4_input+0x148>
		NET_DBG("DROP: src addr is %s", "unspecified");
   2791a:	f7ff fd4d 	bl	273b8 <_is_user_context>
   2791e:	4603      	mov	r3, r0
   27920:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
		goto drop;
   27924:	e0df      	b.n	27ae6 <net_ipv4_input+0x308>
	}

	if (net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
   27926:	6878      	ldr	r0, [r7, #4]
   27928:	f7ff fe08 	bl	2753c <net_pkt_iface>
   2792c:	4603      	mov	r3, r0
   2792e:	4618      	mov	r0, r3
   27930:	f7fd ff15 	bl	2575e <net_if_need_calc_rx_checksum>
   27934:	4603      	mov	r3, r0
   27936:	2b00      	cmp	r3, #0
   27938:	d00b      	beq.n	27952 <net_ipv4_input+0x174>
	    net_calc_chksum_ipv4(pkt) != 0U) {
   2793a:	6878      	ldr	r0, [r7, #4]
   2793c:	f7ff f9f5 	bl	26d2a <net_calc_chksum_ipv4>
   27940:	4603      	mov	r3, r0
	if (net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
   27942:	2b00      	cmp	r3, #0
   27944:	d005      	beq.n	27952 <net_ipv4_input+0x174>
		NET_DBG("DROP: invalid chksum");
   27946:	f7ff fd37 	bl	273b8 <_is_user_context>
   2794a:	4603      	mov	r3, r0
   2794c:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
		goto drop;
   27950:	e0c9      	b.n	27ae6 <net_ipv4_input+0x308>
	}

	if ((!net_ipv4_is_my_addr(&hdr->dst) &&
   27952:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   27956:	3310      	adds	r3, #16
   27958:	4618      	mov	r0, r3
   2795a:	f7ff fdbd 	bl	274d8 <net_ipv4_is_my_addr>
   2795e:	4603      	mov	r3, r0
   27960:	f083 0301 	eor.w	r3, r3, #1
   27964:	b2db      	uxtb	r3, r3
   27966:	2b00      	cmp	r3, #0
   27968:	d021      	beq.n	279ae <net_ipv4_input+0x1d0>
	     !net_ipv4_is_addr_mcast(&hdr->dst) &&
   2796a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   2796e:	3310      	adds	r3, #16
   27970:	4618      	mov	r0, r3
   27972:	f7ff fd53 	bl	2741c <net_ipv4_is_addr_mcast>
   27976:	4603      	mov	r3, r0
   27978:	f083 0301 	eor.w	r3, r3, #1
   2797c:	b2db      	uxtb	r3, r3
	if ((!net_ipv4_is_my_addr(&hdr->dst) &&
   2797e:	2b00      	cmp	r3, #0
   27980:	d015      	beq.n	279ae <net_ipv4_input+0x1d0>
	     !(hdr->proto == IPPROTO_UDP &&
   27982:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   27986:	7a5b      	ldrb	r3, [r3, #9]
	     !net_ipv4_is_addr_mcast(&hdr->dst) &&
   27988:	2b11      	cmp	r3, #17
   2798a:	d123      	bne.n	279d4 <net_ipv4_input+0x1f6>
	       (net_ipv4_addr_cmp(&hdr->dst, net_ipv4_broadcast_address()) ||
   2798c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   27990:	f103 0410 	add.w	r4, r3, #16
   27994:	f7ec fbd2 	bl	1413c <net_ipv4_broadcast_address>
   27998:	4603      	mov	r3, r0
   2799a:	4619      	mov	r1, r3
   2799c:	4620      	mov	r0, r4
   2799e:	f7ff fd6a 	bl	27476 <net_ipv4_addr_cmp>
   279a2:	4603      	mov	r3, r0
   279a4:	f083 0301 	eor.w	r3, r3, #1
   279a8:	b2db      	uxtb	r3, r3
	     !(hdr->proto == IPPROTO_UDP &&
   279aa:	2b00      	cmp	r3, #0
   279ac:	d112      	bne.n	279d4 <net_ipv4_input+0x1f6>
		/* RFC 1122 ch. 3.3.6 The 0.0.0.0 is non-standard bcast addr */
		(IS_ENABLED(CONFIG_NET_IPV4_ACCEPT_ZERO_BROADCAST) &&
		 net_ipv4_addr_cmp(&hdr->dst,
				   net_ipv4_unspecified_address()))))) ||
	    (hdr->proto == IPPROTO_TCP &&
   279ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   279b2:	7a5b      	ldrb	r3, [r3, #9]
				   net_ipv4_unspecified_address()))))) ||
   279b4:	2b06      	cmp	r3, #6
   279b6:	d113      	bne.n	279e0 <net_ipv4_input+0x202>
	     net_ipv4_is_addr_bcast(net_pkt_iface(pkt), &hdr->dst))) {
   279b8:	6878      	ldr	r0, [r7, #4]
   279ba:	f7ff fdbf 	bl	2753c <net_pkt_iface>
   279be:	4602      	mov	r2, r0
   279c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   279c4:	3310      	adds	r3, #16
   279c6:	4619      	mov	r1, r3
   279c8:	4610      	mov	r0, r2
   279ca:	f7ff fd6b 	bl	274a4 <net_ipv4_is_addr_bcast>
   279ce:	4603      	mov	r3, r0
	    (hdr->proto == IPPROTO_TCP &&
   279d0:	2b00      	cmp	r3, #0
   279d2:	d005      	beq.n	279e0 <net_ipv4_input+0x202>
		NET_DBG("DROP: not for me");
   279d4:	f7ff fcf0 	bl	273b8 <_is_user_context>
   279d8:	4603      	mov	r3, r0
   279da:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		goto drop;
   279de:	e082      	b.n	27ae6 <net_ipv4_input+0x308>
	}

	net_pkt_acknowledge_data(pkt, &ipv4_access);
   279e0:	f107 0384 	add.w	r3, r7, #132	; 0x84
   279e4:	4619      	mov	r1, r3
   279e6:	6878      	ldr	r0, [r7, #4]
   279e8:	f7ff fe14 	bl	27614 <net_pkt_acknowledge_data>

	if (hdr_len > sizeof(struct net_ipv4_hdr)) {
   279ec:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
   279f0:	2b14      	cmp	r3, #20
   279f2:	d90f      	bls.n	27a14 <net_ipv4_input+0x236>
		/* There are probably options, let's skip them */
		if (net_pkt_skip(pkt, hdr_len - sizeof(struct net_ipv4_hdr))) {
   279f4:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
   279f8:	3b14      	subs	r3, #20
   279fa:	4619      	mov	r1, r3
   279fc:	6878      	ldr	r0, [r7, #4]
   279fe:	f7fe fbe0 	bl	261c2 <net_pkt_skip>
   27a02:	4603      	mov	r3, r0
   27a04:	2b00      	cmp	r3, #0
   27a06:	d005      	beq.n	27a14 <net_ipv4_input+0x236>
			NET_DBG("Header too big? %u", hdr_len);
   27a08:	f7ff fcd6 	bl	273b8 <_is_user_context>
   27a0c:	4603      	mov	r3, r0
   27a0e:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
			goto drop;
   27a12:	e068      	b.n	27ae6 <net_ipv4_input+0x308>
		}
	}

	net_pkt_set_ipv4_ttl(pkt, hdr->ttl);
   27a14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   27a18:	7a1b      	ldrb	r3, [r3, #8]
   27a1a:	4619      	mov	r1, r3
   27a1c:	6878      	ldr	r0, [r7, #4]
   27a1e:	f7ff fdc9 	bl	275b4 <net_pkt_set_ipv4_ttl>

	net_pkt_set_family(pkt, PF_INET);
   27a22:	2101      	movs	r1, #1
   27a24:	6878      	ldr	r0, [r7, #4]
   27a26:	f7ff fd94 	bl	27552 <net_pkt_set_family>

	NET_DBG("IPv4 packet received from %s to %s",
   27a2a:	f7ff fcc5 	bl	273b8 <_is_user_context>
   27a2e:	4603      	mov	r3, r0
   27a30:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
		log_strdup(net_sprint_ipv4_addr(&hdr->src)),
		log_strdup(net_sprint_ipv4_addr(&hdr->dst)));

	switch (hdr->proto) {
   27a34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   27a38:	7a5b      	ldrb	r3, [r3, #9]
   27a3a:	2b06      	cmp	r3, #6
   27a3c:	d00c      	beq.n	27a58 <net_ipv4_input+0x27a>
   27a3e:	2b11      	cmp	r3, #17
   27a40:	d019      	beq.n	27a76 <net_ipv4_input+0x298>
   27a42:	2b01      	cmp	r3, #1
   27a44:	d129      	bne.n	27a9a <net_ipv4_input+0x2bc>
	case IPPROTO_ICMP:
		verdict = net_icmpv4_input(pkt, hdr);
   27a46:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
   27a4a:	6878      	ldr	r0, [r7, #4]
   27a4c:	f7ec fada 	bl	14004 <net_icmpv4_input>
   27a50:	4603      	mov	r3, r0
   27a52:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
		break;
   27a56:	e020      	b.n	27a9a <net_ipv4_input+0x2bc>
	case IPPROTO_TCP:
		proto_hdr.tcp = net_tcp_input(pkt, &tcp_access);
   27a58:	f107 0358 	add.w	r3, r7, #88	; 0x58
   27a5c:	4619      	mov	r1, r3
   27a5e:	6878      	ldr	r0, [r7, #4]
   27a60:	f7ff fde8 	bl	27634 <net_tcp_input>
   27a64:	4603      	mov	r3, r0
   27a66:	657b      	str	r3, [r7, #84]	; 0x54
		if (proto_hdr.tcp) {
   27a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   27a6a:	2b00      	cmp	r3, #0
   27a6c:	d012      	beq.n	27a94 <net_ipv4_input+0x2b6>
			verdict = NET_OK;
   27a6e:	2300      	movs	r3, #0
   27a70:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
		}
		break;
   27a74:	e00e      	b.n	27a94 <net_ipv4_input+0x2b6>
	case IPPROTO_UDP:
		proto_hdr.udp = net_udp_input(pkt, &udp_access);
   27a76:	f107 0374 	add.w	r3, r7, #116	; 0x74
   27a7a:	4619      	mov	r1, r3
   27a7c:	6878      	ldr	r0, [r7, #4]
   27a7e:	f000 fba9 	bl	281d4 <net_udp_input>
   27a82:	4603      	mov	r3, r0
   27a84:	657b      	str	r3, [r7, #84]	; 0x54
		if (proto_hdr.udp) {
   27a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   27a88:	2b00      	cmp	r3, #0
   27a8a:	d005      	beq.n	27a98 <net_ipv4_input+0x2ba>
			verdict = NET_OK;
   27a8c:	2300      	movs	r3, #0
   27a8e:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
		}
		break;
   27a92:	e001      	b.n	27a98 <net_ipv4_input+0x2ba>
		break;
   27a94:	bf00      	nop
   27a96:	e000      	b.n	27a9a <net_ipv4_input+0x2bc>
		break;
   27a98:	bf00      	nop
	}

	if (verdict == NET_DROP) {
   27a9a:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
   27a9e:	2b02      	cmp	r3, #2
   27aa0:	d01e      	beq.n	27ae0 <net_ipv4_input+0x302>
		goto drop;
	} else if (hdr->proto == IPPROTO_ICMP) {
   27aa2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   27aa6:	7a5b      	ldrb	r3, [r3, #9]
   27aa8:	2b01      	cmp	r3, #1
   27aaa:	d102      	bne.n	27ab2 <net_ipv4_input+0x2d4>
		return verdict;
   27aac:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
   27ab0:	e01a      	b.n	27ae8 <net_ipv4_input+0x30a>
	}

	ip.ipv4 = hdr;
   27ab2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   27ab6:	653b      	str	r3, [r7, #80]	; 0x50

	verdict = net_conn_input(pkt, &ip, hdr->proto, &proto_hdr);
   27ab8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   27abc:	7a5a      	ldrb	r2, [r3, #9]
   27abe:	f107 0354 	add.w	r3, r7, #84	; 0x54
   27ac2:	f107 0150 	add.w	r1, r7, #80	; 0x50
   27ac6:	6878      	ldr	r0, [r7, #4]
   27ac8:	f7ec fffa 	bl	14ac0 <net_conn_input>
   27acc:	4603      	mov	r3, r0
   27ace:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
	if (verdict != NET_DROP) {
   27ad2:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
   27ad6:	2b02      	cmp	r3, #2
   27ad8:	d004      	beq.n	27ae4 <net_ipv4_input+0x306>
		return verdict;
   27ada:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
   27ade:	e003      	b.n	27ae8 <net_ipv4_input+0x30a>
		goto drop;
   27ae0:	bf00      	nop
   27ae2:	e000      	b.n	27ae6 <net_ipv4_input+0x308>
	}
drop:
   27ae4:	bf00      	nop
	net_stats_update_ipv4_drop(net_pkt_iface(pkt));
	return NET_DROP;
   27ae6:	2302      	movs	r3, #2
}
   27ae8:	4618      	mov	r0, r3
   27aea:	37ac      	adds	r7, #172	; 0xac
   27aec:	46bd      	mov	sp, r7
   27aee:	bd90      	pop	{r4, r7, pc}

00027af0 <sys_slist_init>:
{
   27af0:	b480      	push	{r7}
   27af2:	b083      	sub	sp, #12
   27af4:	af00      	add	r7, sp, #0
   27af6:	6078      	str	r0, [r7, #4]
	list->head = NULL;
   27af8:	687b      	ldr	r3, [r7, #4]
   27afa:	2200      	movs	r2, #0
   27afc:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   27afe:	687b      	ldr	r3, [r7, #4]
   27b00:	2200      	movs	r2, #0
   27b02:	605a      	str	r2, [r3, #4]
}
   27b04:	bf00      	nop
   27b06:	370c      	adds	r7, #12
   27b08:	46bd      	mov	sp, r7
   27b0a:	bc80      	pop	{r7}
   27b0c:	4770      	bx	lr

00027b0e <z_snode_next_peek>:
{
   27b0e:	b480      	push	{r7}
   27b10:	b083      	sub	sp, #12
   27b12:	af00      	add	r7, sp, #0
   27b14:	6078      	str	r0, [r7, #4]
	return node->next;
   27b16:	687b      	ldr	r3, [r7, #4]
   27b18:	681b      	ldr	r3, [r3, #0]
}
   27b1a:	4618      	mov	r0, r3
   27b1c:	370c      	adds	r7, #12
   27b1e:	46bd      	mov	sp, r7
   27b20:	bc80      	pop	{r7}
   27b22:	4770      	bx	lr

00027b24 <z_snode_next_set>:
{
   27b24:	b480      	push	{r7}
   27b26:	b083      	sub	sp, #12
   27b28:	af00      	add	r7, sp, #0
   27b2a:	6078      	str	r0, [r7, #4]
   27b2c:	6039      	str	r1, [r7, #0]
	parent->next = child;
   27b2e:	687b      	ldr	r3, [r7, #4]
   27b30:	683a      	ldr	r2, [r7, #0]
   27b32:	601a      	str	r2, [r3, #0]
}
   27b34:	bf00      	nop
   27b36:	370c      	adds	r7, #12
   27b38:	46bd      	mov	sp, r7
   27b3a:	bc80      	pop	{r7}
   27b3c:	4770      	bx	lr

00027b3e <z_slist_head_set>:
{
   27b3e:	b480      	push	{r7}
   27b40:	b083      	sub	sp, #12
   27b42:	af00      	add	r7, sp, #0
   27b44:	6078      	str	r0, [r7, #4]
   27b46:	6039      	str	r1, [r7, #0]
	list->head = node;
   27b48:	687b      	ldr	r3, [r7, #4]
   27b4a:	683a      	ldr	r2, [r7, #0]
   27b4c:	601a      	str	r2, [r3, #0]
}
   27b4e:	bf00      	nop
   27b50:	370c      	adds	r7, #12
   27b52:	46bd      	mov	sp, r7
   27b54:	bc80      	pop	{r7}
   27b56:	4770      	bx	lr

00027b58 <z_slist_tail_set>:
{
   27b58:	b480      	push	{r7}
   27b5a:	b083      	sub	sp, #12
   27b5c:	af00      	add	r7, sp, #0
   27b5e:	6078      	str	r0, [r7, #4]
   27b60:	6039      	str	r1, [r7, #0]
	list->tail = node;
   27b62:	687b      	ldr	r3, [r7, #4]
   27b64:	683a      	ldr	r2, [r7, #0]
   27b66:	605a      	str	r2, [r3, #4]
}
   27b68:	bf00      	nop
   27b6a:	370c      	adds	r7, #12
   27b6c:	46bd      	mov	sp, r7
   27b6e:	bc80      	pop	{r7}
   27b70:	4770      	bx	lr

00027b72 <sys_slist_peek_head>:
{
   27b72:	b480      	push	{r7}
   27b74:	b083      	sub	sp, #12
   27b76:	af00      	add	r7, sp, #0
   27b78:	6078      	str	r0, [r7, #4]
	return list->head;
   27b7a:	687b      	ldr	r3, [r7, #4]
   27b7c:	681b      	ldr	r3, [r3, #0]
}
   27b7e:	4618      	mov	r0, r3
   27b80:	370c      	adds	r7, #12
   27b82:	46bd      	mov	sp, r7
   27b84:	bc80      	pop	{r7}
   27b86:	4770      	bx	lr

00027b88 <sys_slist_peek_tail>:
{
   27b88:	b480      	push	{r7}
   27b8a:	b083      	sub	sp, #12
   27b8c:	af00      	add	r7, sp, #0
   27b8e:	6078      	str	r0, [r7, #4]
	return list->tail;
   27b90:	687b      	ldr	r3, [r7, #4]
   27b92:	685b      	ldr	r3, [r3, #4]
}
   27b94:	4618      	mov	r0, r3
   27b96:	370c      	adds	r7, #12
   27b98:	46bd      	mov	sp, r7
   27b9a:	bc80      	pop	{r7}
   27b9c:	4770      	bx	lr

00027b9e <sys_slist_peek_next_no_check>:
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27b9e:	b580      	push	{r7, lr}
   27ba0:	b082      	sub	sp, #8
   27ba2:	af00      	add	r7, sp, #0
   27ba4:	6078      	str	r0, [r7, #4]
   27ba6:	6878      	ldr	r0, [r7, #4]
   27ba8:	f7ff ffb1 	bl	27b0e <z_snode_next_peek>
   27bac:	4603      	mov	r3, r0
   27bae:	4618      	mov	r0, r3
   27bb0:	3708      	adds	r7, #8
   27bb2:	46bd      	mov	sp, r7
   27bb4:	bd80      	pop	{r7, pc}

00027bb6 <sys_slist_peek_next>:
Z_GENLIST_PEEK_NEXT(slist, snode)
   27bb6:	b580      	push	{r7, lr}
   27bb8:	b082      	sub	sp, #8
   27bba:	af00      	add	r7, sp, #0
   27bbc:	6078      	str	r0, [r7, #4]
   27bbe:	687b      	ldr	r3, [r7, #4]
   27bc0:	2b00      	cmp	r3, #0
   27bc2:	d004      	beq.n	27bce <sys_slist_peek_next+0x18>
   27bc4:	6878      	ldr	r0, [r7, #4]
   27bc6:	f7ff ffea 	bl	27b9e <sys_slist_peek_next_no_check>
   27bca:	4603      	mov	r3, r0
   27bcc:	e000      	b.n	27bd0 <sys_slist_peek_next+0x1a>
   27bce:	2300      	movs	r3, #0
   27bd0:	4618      	mov	r0, r3
   27bd2:	3708      	adds	r7, #8
   27bd4:	46bd      	mov	sp, r7
   27bd6:	bd80      	pop	{r7, pc}

00027bd8 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   27bd8:	b580      	push	{r7, lr}
   27bda:	b084      	sub	sp, #16
   27bdc:	af00      	add	r7, sp, #0
   27bde:	60f8      	str	r0, [r7, #12]
   27be0:	60b9      	str	r1, [r7, #8]
   27be2:	607a      	str	r2, [r7, #4]
   27be4:	68bb      	ldr	r3, [r7, #8]
   27be6:	2b00      	cmp	r3, #0
   27be8:	d117      	bne.n	27c1a <sys_slist_remove+0x42>
   27bea:	6878      	ldr	r0, [r7, #4]
   27bec:	f7ff ff8f 	bl	27b0e <z_snode_next_peek>
   27bf0:	4603      	mov	r3, r0
   27bf2:	4619      	mov	r1, r3
   27bf4:	68f8      	ldr	r0, [r7, #12]
   27bf6:	f7ff ffa2 	bl	27b3e <z_slist_head_set>
   27bfa:	68f8      	ldr	r0, [r7, #12]
   27bfc:	f7ff ffc4 	bl	27b88 <sys_slist_peek_tail>
   27c00:	4602      	mov	r2, r0
   27c02:	687b      	ldr	r3, [r7, #4]
   27c04:	4293      	cmp	r3, r2
   27c06:	d11b      	bne.n	27c40 <sys_slist_remove+0x68>
   27c08:	68f8      	ldr	r0, [r7, #12]
   27c0a:	f7ff ffb2 	bl	27b72 <sys_slist_peek_head>
   27c0e:	4603      	mov	r3, r0
   27c10:	4619      	mov	r1, r3
   27c12:	68f8      	ldr	r0, [r7, #12]
   27c14:	f7ff ffa0 	bl	27b58 <z_slist_tail_set>
   27c18:	e012      	b.n	27c40 <sys_slist_remove+0x68>
   27c1a:	6878      	ldr	r0, [r7, #4]
   27c1c:	f7ff ff77 	bl	27b0e <z_snode_next_peek>
   27c20:	4603      	mov	r3, r0
   27c22:	4619      	mov	r1, r3
   27c24:	68b8      	ldr	r0, [r7, #8]
   27c26:	f7ff ff7d 	bl	27b24 <z_snode_next_set>
   27c2a:	68f8      	ldr	r0, [r7, #12]
   27c2c:	f7ff ffac 	bl	27b88 <sys_slist_peek_tail>
   27c30:	4602      	mov	r2, r0
   27c32:	687b      	ldr	r3, [r7, #4]
   27c34:	4293      	cmp	r3, r2
   27c36:	d103      	bne.n	27c40 <sys_slist_remove+0x68>
   27c38:	68b9      	ldr	r1, [r7, #8]
   27c3a:	68f8      	ldr	r0, [r7, #12]
   27c3c:	f7ff ff8c 	bl	27b58 <z_slist_tail_set>
   27c40:	2100      	movs	r1, #0
   27c42:	6878      	ldr	r0, [r7, #4]
   27c44:	f7ff ff6e 	bl	27b24 <z_snode_next_set>
   27c48:	bf00      	nop
   27c4a:	3710      	adds	r7, #16
   27c4c:	46bd      	mov	sp, r7
   27c4e:	bd80      	pop	{r7, pc}

00027c50 <_is_user_context>:
{
   27c50:	b480      	push	{r7}
   27c52:	af00      	add	r7, sp, #0
	return false;
   27c54:	2300      	movs	r3, #0
}
   27c56:	4618      	mov	r0, r3
   27c58:	46bd      	mov	sp, r7
   27c5a:	bc80      	pop	{r7}
   27c5c:	4770      	bx	lr

00027c5e <k_thread_create>:
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
   27c5e:	b580      	push	{r7, lr}
   27c60:	b08a      	sub	sp, #40	; 0x28
   27c62:	af06      	add	r7, sp, #24
   27c64:	60f8      	str	r0, [r7, #12]
   27c66:	60b9      	str	r1, [r7, #8]
   27c68:	607a      	str	r2, [r7, #4]
   27c6a:	603b      	str	r3, [r7, #0]
   27c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27c6e:	9305      	str	r3, [sp, #20]
   27c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
   27c72:	9304      	str	r3, [sp, #16]
   27c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27c76:	9303      	str	r3, [sp, #12]
   27c78:	6a3b      	ldr	r3, [r7, #32]
   27c7a:	9302      	str	r3, [sp, #8]
   27c7c:	69fb      	ldr	r3, [r7, #28]
   27c7e:	9301      	str	r3, [sp, #4]
   27c80:	69bb      	ldr	r3, [r7, #24]
   27c82:	9300      	str	r3, [sp, #0]
   27c84:	683b      	ldr	r3, [r7, #0]
   27c86:	687a      	ldr	r2, [r7, #4]
   27c88:	68b9      	ldr	r1, [r7, #8]
   27c8a:	68f8      	ldr	r0, [r7, #12]
   27c8c:	f003 fd69 	bl	2b762 <z_impl_k_thread_create>
   27c90:	4603      	mov	r3, r0
   27c92:	4618      	mov	r0, r3
   27c94:	3710      	adds	r7, #16
   27c96:	46bd      	mov	sp, r7
   27c98:	bd80      	pop	{r7, pc}

00027c9a <k_yield>:
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   27c9a:	b580      	push	{r7, lr}
   27c9c:	af00      	add	r7, sp, #0
   27c9e:	f7ef fdfd 	bl	1789c <z_impl_k_yield>
   27ca2:	bf00      	nop
   27ca4:	bd80      	pop	{r7, pc}

00027ca6 <k_thread_name_set>:
K_SYSCALL_DECLARE2(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, int, k_tid_t, thread_id, const char *, value)
   27ca6:	b580      	push	{r7, lr}
   27ca8:	b082      	sub	sp, #8
   27caa:	af00      	add	r7, sp, #0
   27cac:	6078      	str	r0, [r7, #4]
   27cae:	6039      	str	r1, [r7, #0]
   27cb0:	6839      	ldr	r1, [r7, #0]
   27cb2:	6878      	ldr	r0, [r7, #4]
   27cb4:	f003 fc94 	bl	2b5e0 <z_impl_k_thread_name_set>
   27cb8:	4603      	mov	r3, r0
   27cba:	4618      	mov	r0, r3
   27cbc:	3708      	adds	r7, #8
   27cbe:	46bd      	mov	sp, r7
   27cc0:	bd80      	pop	{r7, pc}

00027cc2 <k_sem_init>:
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   27cc2:	b580      	push	{r7, lr}
   27cc4:	b084      	sub	sp, #16
   27cc6:	af00      	add	r7, sp, #0
   27cc8:	60f8      	str	r0, [r7, #12]
   27cca:	60b9      	str	r1, [r7, #8]
   27ccc:	607a      	str	r2, [r7, #4]
   27cce:	687a      	ldr	r2, [r7, #4]
   27cd0:	68b9      	ldr	r1, [r7, #8]
   27cd2:	68f8      	ldr	r0, [r7, #12]
   27cd4:	f003 fb18 	bl	2b308 <z_impl_k_sem_init>
   27cd8:	bf00      	nop
   27cda:	3710      	adds	r7, #16
   27cdc:	46bd      	mov	sp, r7
   27cde:	bd80      	pop	{r7, pc}

00027ce0 <k_sem_take>:
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   27ce0:	b580      	push	{r7, lr}
   27ce2:	b082      	sub	sp, #8
   27ce4:	af00      	add	r7, sp, #0
   27ce6:	6078      	str	r0, [r7, #4]
   27ce8:	6039      	str	r1, [r7, #0]
   27cea:	6839      	ldr	r1, [r7, #0]
   27cec:	6878      	ldr	r0, [r7, #4]
   27cee:	f7ef ff7b 	bl	17be8 <z_impl_k_sem_take>
   27cf2:	4603      	mov	r3, r0
   27cf4:	4618      	mov	r0, r3
   27cf6:	3708      	adds	r7, #8
   27cf8:	46bd      	mov	sp, r7
   27cfa:	bd80      	pop	{r7, pc}

00027cfc <k_sem_give>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   27cfc:	b580      	push	{r7, lr}
   27cfe:	b082      	sub	sp, #8
   27d00:	af00      	add	r7, sp, #0
   27d02:	6078      	str	r0, [r7, #4]
   27d04:	6878      	ldr	r0, [r7, #4]
   27d06:	f7ef ff4d 	bl	17ba4 <z_impl_k_sem_give>
   27d0a:	bf00      	nop
   27d0c:	3708      	adds	r7, #8
   27d0e:	46bd      	mov	sp, r7
   27d10:	bd80      	pop	{r7, pc}

00027d12 <mgmt_clean_event>:
{
   27d12:	b480      	push	{r7}
   27d14:	b083      	sub	sp, #12
   27d16:	af00      	add	r7, sp, #0
   27d18:	6078      	str	r0, [r7, #4]
	mgmt_event->event = 0U;
   27d1a:	687b      	ldr	r3, [r7, #4]
   27d1c:	2200      	movs	r2, #0
   27d1e:	601a      	str	r2, [r3, #0]
	mgmt_event->iface = NULL;
   27d20:	687b      	ldr	r3, [r7, #4]
   27d22:	2200      	movs	r2, #0
   27d24:	605a      	str	r2, [r3, #4]
}
   27d26:	bf00      	nop
   27d28:	370c      	adds	r7, #12
   27d2a:	46bd      	mov	sp, r7
   27d2c:	bc80      	pop	{r7}
   27d2e:	4770      	bx	lr

00027d30 <_is_user_context>:
{
   27d30:	b480      	push	{r7}
   27d32:	af00      	add	r7, sp, #0
	return false;
   27d34:	2300      	movs	r3, #0
}
   27d36:	4618      	mov	r0, r3
   27d38:	46bd      	mov	sp, r7
   27d3a:	bc80      	pop	{r7}
   27d3c:	4770      	bx	lr

00027d3e <net_ipv4_is_addr_mcast>:
{
   27d3e:	b480      	push	{r7}
   27d40:	b087      	sub	sp, #28
   27d42:	af00      	add	r7, sp, #0
   27d44:	6078      	str	r0, [r7, #4]
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xE0000000) == 0xE0000000;
   27d46:	687b      	ldr	r3, [r7, #4]
   27d48:	617b      	str	r3, [r7, #20]
   27d4a:	697b      	ldr	r3, [r7, #20]
   27d4c:	681b      	ldr	r3, [r3, #0]
   27d4e:	0e1b      	lsrs	r3, r3, #24
   27d50:	b2da      	uxtb	r2, r3
   27d52:	687b      	ldr	r3, [r7, #4]
   27d54:	613b      	str	r3, [r7, #16]
   27d56:	693b      	ldr	r3, [r7, #16]
   27d58:	681b      	ldr	r3, [r3, #0]
   27d5a:	0a1b      	lsrs	r3, r3, #8
   27d5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   27d60:	431a      	orrs	r2, r3
   27d62:	687b      	ldr	r3, [r7, #4]
   27d64:	60fb      	str	r3, [r7, #12]
   27d66:	68fb      	ldr	r3, [r7, #12]
   27d68:	681b      	ldr	r3, [r3, #0]
   27d6a:	021b      	lsls	r3, r3, #8
   27d6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   27d70:	431a      	orrs	r2, r3
   27d72:	687b      	ldr	r3, [r7, #4]
   27d74:	60bb      	str	r3, [r7, #8]
   27d76:	68bb      	ldr	r3, [r7, #8]
   27d78:	681b      	ldr	r3, [r3, #0]
   27d7a:	061b      	lsls	r3, r3, #24
   27d7c:	4313      	orrs	r3, r2
   27d7e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   27d82:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
   27d86:	bf0c      	ite	eq
   27d88:	2301      	moveq	r3, #1
   27d8a:	2300      	movne	r3, #0
   27d8c:	b2db      	uxtb	r3, r3
}
   27d8e:	4618      	mov	r0, r3
   27d90:	371c      	adds	r7, #28
   27d92:	46bd      	mov	sp, r7
   27d94:	bc80      	pop	{r7}
   27d96:	4770      	bx	lr

00027d98 <net_ipv4_addr_cmp>:
{
   27d98:	b480      	push	{r7}
   27d9a:	b085      	sub	sp, #20
   27d9c:	af00      	add	r7, sp, #0
   27d9e:	6078      	str	r0, [r7, #4]
   27da0:	6039      	str	r1, [r7, #0]
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   27da2:	687b      	ldr	r3, [r7, #4]
   27da4:	60fb      	str	r3, [r7, #12]
   27da6:	68fb      	ldr	r3, [r7, #12]
   27da8:	681a      	ldr	r2, [r3, #0]
   27daa:	683b      	ldr	r3, [r7, #0]
   27dac:	60bb      	str	r3, [r7, #8]
   27dae:	68bb      	ldr	r3, [r7, #8]
   27db0:	681b      	ldr	r3, [r3, #0]
   27db2:	429a      	cmp	r2, r3
   27db4:	bf0c      	ite	eq
   27db6:	2301      	moveq	r3, #1
   27db8:	2300      	movne	r3, #0
   27dba:	b2db      	uxtb	r3, r3
}
   27dbc:	4618      	mov	r0, r3
   27dbe:	3714      	adds	r7, #20
   27dc0:	46bd      	mov	sp, r7
   27dc2:	bc80      	pop	{r7}
   27dc4:	4770      	bx	lr

00027dc6 <net_ipv4_is_addr_bcast>:
{
   27dc6:	b580      	push	{r7, lr}
   27dc8:	b082      	sub	sp, #8
   27dca:	af00      	add	r7, sp, #0
   27dcc:	6078      	str	r0, [r7, #4]
   27dce:	6039      	str	r1, [r7, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   27dd0:	f7ec f9b4 	bl	1413c <net_ipv4_broadcast_address>
   27dd4:	4603      	mov	r3, r0
   27dd6:	4619      	mov	r1, r3
   27dd8:	6838      	ldr	r0, [r7, #0]
   27dda:	f7ff ffdd 	bl	27d98 <net_ipv4_addr_cmp>
   27dde:	4603      	mov	r3, r0
   27de0:	2b00      	cmp	r3, #0
   27de2:	d001      	beq.n	27de8 <net_ipv4_is_addr_bcast+0x22>
		return true;
   27de4:	2301      	movs	r3, #1
   27de6:	e004      	b.n	27df2 <net_ipv4_is_addr_bcast+0x2c>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   27de8:	6839      	ldr	r1, [r7, #0]
   27dea:	6878      	ldr	r0, [r7, #4]
   27dec:	f7eb fb30 	bl	13450 <net_if_ipv4_is_addr_bcast>
   27df0:	4603      	mov	r3, r0
}
   27df2:	4618      	mov	r0, r3
   27df4:	3708      	adds	r7, #8
   27df6:	46bd      	mov	sp, r7
   27df8:	bd80      	pop	{r7, pc}

00027dfa <net_ipv4_is_my_addr>:
{
   27dfa:	b580      	push	{r7, lr}
   27dfc:	b084      	sub	sp, #16
   27dfe:	af00      	add	r7, sp, #0
   27e00:	6078      	str	r0, [r7, #4]
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
   27e02:	2100      	movs	r1, #0
   27e04:	6878      	ldr	r0, [r7, #4]
   27e06:	f7eb fbef 	bl	135e8 <net_if_ipv4_addr_lookup>
   27e0a:	4603      	mov	r3, r0
   27e0c:	2b00      	cmp	r3, #0
   27e0e:	bf14      	ite	ne
   27e10:	2301      	movne	r3, #1
   27e12:	2300      	moveq	r3, #0
   27e14:	73fb      	strb	r3, [r7, #15]
	if (!ret) {
   27e16:	7bfb      	ldrb	r3, [r7, #15]
   27e18:	f083 0301 	eor.w	r3, r3, #1
   27e1c:	b2db      	uxtb	r3, r3
   27e1e:	2b00      	cmp	r3, #0
   27e20:	d005      	beq.n	27e2e <net_ipv4_is_my_addr+0x34>
		ret = net_ipv4_is_addr_bcast(NULL, addr);
   27e22:	6879      	ldr	r1, [r7, #4]
   27e24:	2000      	movs	r0, #0
   27e26:	f7ff ffce 	bl	27dc6 <net_ipv4_is_addr_bcast>
   27e2a:	4603      	mov	r3, r0
   27e2c:	73fb      	strb	r3, [r7, #15]
	return ret;
   27e2e:	7bfb      	ldrb	r3, [r7, #15]
}
   27e30:	4618      	mov	r0, r3
   27e32:	3710      	adds	r7, #16
   27e34:	46bd      	mov	sp, r7
   27e36:	bd80      	pop	{r7, pc}

00027e38 <net_sin>:
{
   27e38:	b480      	push	{r7}
   27e3a:	b083      	sub	sp, #12
   27e3c:	af00      	add	r7, sp, #0
   27e3e:	6078      	str	r0, [r7, #4]
	return (struct sockaddr_in *)addr;
   27e40:	687b      	ldr	r3, [r7, #4]
}
   27e42:	4618      	mov	r0, r3
   27e44:	370c      	adds	r7, #12
   27e46:	46bd      	mov	sp, r7
   27e48:	bc80      	pop	{r7}
   27e4a:	4770      	bx	lr

00027e4c <net_pkt_iface>:
{
   27e4c:	b480      	push	{r7}
   27e4e:	b083      	sub	sp, #12
   27e50:	af00      	add	r7, sp, #0
   27e52:	6078      	str	r0, [r7, #4]
	return pkt->iface;
   27e54:	687b      	ldr	r3, [r7, #4]
   27e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   27e58:	4618      	mov	r0, r3
   27e5a:	370c      	adds	r7, #12
   27e5c:	46bd      	mov	sp, r7
   27e5e:	bc80      	pop	{r7}
   27e60:	4770      	bx	lr

00027e62 <net_pkt_family>:
{
   27e62:	b480      	push	{r7}
   27e64:	b083      	sub	sp, #12
   27e66:	af00      	add	r7, sp, #0
   27e68:	6078      	str	r0, [r7, #4]
	return pkt->family;
   27e6a:	687b      	ldr	r3, [r7, #4]
   27e6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
   27e70:	f3c3 0342 	ubfx	r3, r3, #1, #3
   27e74:	b2db      	uxtb	r3, r3
}
   27e76:	4618      	mov	r0, r3
   27e78:	370c      	adds	r7, #12
   27e7a:	46bd      	mov	sp, r7
   27e7c:	bc80      	pop	{r7}
   27e7e:	4770      	bx	lr

00027e80 <net_stats_update_per_proto_recv>:
#define net_stats_update_tcp_seg_rexmit(iface)
#endif /* CONFIG_NET_STATISTICS_TCP */

static inline void net_stats_update_per_proto_recv(struct net_if *iface,
						   enum net_ip_protocol proto)
{
   27e80:	b480      	push	{r7}
   27e82:	b083      	sub	sp, #12
   27e84:	af00      	add	r7, sp, #0
   27e86:	6078      	str	r0, [r7, #4]
   27e88:	460b      	mov	r3, r1
   27e8a:	70fb      	strb	r3, [r7, #3]
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
		net_stats_update_udp_recv(iface);
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
		net_stats_update_tcp_seg_recv(iface);
	}
}
   27e8c:	bf00      	nop
   27e8e:	370c      	adds	r7, #12
   27e90:	46bd      	mov	sp, r7
   27e92:	bc80      	pop	{r7}
   27e94:	4770      	bx	lr

00027e96 <net_stats_update_per_proto_drop>:

static inline void net_stats_update_per_proto_drop(struct net_if *iface,
						   enum net_ip_protocol proto)
{
   27e96:	b480      	push	{r7}
   27e98:	b083      	sub	sp, #12
   27e9a:	af00      	add	r7, sp, #0
   27e9c:	6078      	str	r0, [r7, #4]
   27e9e:	460b      	mov	r3, r1
   27ea0:	70fb      	strb	r3, [r7, #3]
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
		net_stats_update_udp_drop(iface);
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
		net_stats_update_tcp_seg_drop(iface);
	}
}
   27ea2:	bf00      	nop
   27ea4:	370c      	adds	r7, #12
   27ea6:	46bd      	mov	sp, r7
   27ea8:	bc80      	pop	{r7}
   27eaa:	4770      	bx	lr

00027eac <check_addr>:
{
   27eac:	b590      	push	{r4, r7, lr}
   27eae:	b087      	sub	sp, #28
   27eb0:	af00      	add	r7, sp, #0
   27eb2:	60f8      	str	r0, [r7, #12]
   27eb4:	60b9      	str	r1, [r7, #8]
   27eb6:	607a      	str	r2, [r7, #4]
   27eb8:	70fb      	strb	r3, [r7, #3]
	if (addr->sa_family != net_pkt_family(pkt)) {
   27eba:	687b      	ldr	r3, [r7, #4]
   27ebc:	881c      	ldrh	r4, [r3, #0]
   27ebe:	68f8      	ldr	r0, [r7, #12]
   27ec0:	f7ff ffcf 	bl	27e62 <net_pkt_family>
   27ec4:	4603      	mov	r3, r0
   27ec6:	b29b      	uxth	r3, r3
   27ec8:	429c      	cmp	r4, r3
   27eca:	d001      	beq.n	27ed0 <check_addr+0x24>
		return false;
   27ecc:	2300      	movs	r3, #0
   27ece:	e02e      	b.n	27f2e <check_addr+0x82>
	if (net_pkt_family(pkt) == AF_INET && addr->sa_family == AF_INET) {
   27ed0:	68f8      	ldr	r0, [r7, #12]
   27ed2:	f7ff ffc6 	bl	27e62 <net_pkt_family>
   27ed6:	4603      	mov	r3, r0
   27ed8:	2b01      	cmp	r3, #1
   27eda:	d127      	bne.n	27f2c <check_addr+0x80>
   27edc:	687b      	ldr	r3, [r7, #4]
   27ede:	881b      	ldrh	r3, [r3, #0]
   27ee0:	2b01      	cmp	r3, #1
   27ee2:	d123      	bne.n	27f2c <check_addr+0x80>
		if (is_remote) {
   27ee4:	78fb      	ldrb	r3, [r7, #3]
   27ee6:	2b00      	cmp	r3, #0
   27ee8:	d004      	beq.n	27ef4 <check_addr+0x48>
			addr4 = &ip_hdr->ipv4->src;
   27eea:	68bb      	ldr	r3, [r7, #8]
   27eec:	681b      	ldr	r3, [r3, #0]
   27eee:	330c      	adds	r3, #12
   27ef0:	617b      	str	r3, [r7, #20]
   27ef2:	e003      	b.n	27efc <check_addr+0x50>
			addr4 = &ip_hdr->ipv4->dst;
   27ef4:	68bb      	ldr	r3, [r7, #8]
   27ef6:	681b      	ldr	r3, [r3, #0]
   27ef8:	3310      	adds	r3, #16
   27efa:	617b      	str	r3, [r7, #20]
		if (net_sin(addr)->sin_addr.s_addr) {
   27efc:	6878      	ldr	r0, [r7, #4]
   27efe:	f7ff ff9b 	bl	27e38 <net_sin>
   27f02:	4603      	mov	r3, r0
   27f04:	685b      	ldr	r3, [r3, #4]
   27f06:	2b00      	cmp	r3, #0
   27f08:	d010      	beq.n	27f2c <check_addr+0x80>
			if (!net_ipv4_addr_cmp(&net_sin(addr)->sin_addr,
   27f0a:	6878      	ldr	r0, [r7, #4]
   27f0c:	f7ff ff94 	bl	27e38 <net_sin>
   27f10:	4603      	mov	r3, r0
   27f12:	3304      	adds	r3, #4
   27f14:	6979      	ldr	r1, [r7, #20]
   27f16:	4618      	mov	r0, r3
   27f18:	f7ff ff3e 	bl	27d98 <net_ipv4_addr_cmp>
   27f1c:	4603      	mov	r3, r0
   27f1e:	f083 0301 	eor.w	r3, r3, #1
   27f22:	b2db      	uxtb	r3, r3
   27f24:	2b00      	cmp	r3, #0
   27f26:	d001      	beq.n	27f2c <check_addr+0x80>
				return false;
   27f28:	2300      	movs	r3, #0
   27f2a:	e000      	b.n	27f2e <check_addr+0x82>
	return true;
   27f2c:	2301      	movs	r3, #1
}
   27f2e:	4618      	mov	r0, r3
   27f30:	371c      	adds	r7, #28
   27f32:	46bd      	mov	sp, r7
   27f34:	bd90      	pop	{r4, r7, pc}

00027f36 <send_icmp_error>:
{
   27f36:	b580      	push	{r7, lr}
   27f38:	b082      	sub	sp, #8
   27f3a:	af00      	add	r7, sp, #0
   27f3c:	6078      	str	r0, [r7, #4]
	if (net_pkt_family(pkt) == AF_INET6) {
   27f3e:	6878      	ldr	r0, [r7, #4]
   27f40:	f7ff ff8f 	bl	27e62 <net_pkt_family>
   27f44:	4603      	mov	r3, r0
   27f46:	2b02      	cmp	r3, #2
   27f48:	d004      	beq.n	27f54 <send_icmp_error+0x1e>
		net_icmpv4_send_error(pkt, NET_ICMPV4_DST_UNREACH,
   27f4a:	2203      	movs	r2, #3
   27f4c:	2103      	movs	r1, #3
   27f4e:	6878      	ldr	r0, [r7, #4]
   27f50:	f7ff f97d 	bl	2724e <net_icmpv4_send_error>
}
   27f54:	bf00      	nop
   27f56:	3708      	adds	r7, #8
   27f58:	46bd      	mov	sp, r7
   27f5a:	bd80      	pop	{r7, pc}

00027f5c <is_valid_packet>:
{
   27f5c:	b580      	push	{r7, lr}
   27f5e:	b086      	sub	sp, #24
   27f60:	af00      	add	r7, sp, #0
   27f62:	60f8      	str	r0, [r7, #12]
   27f64:	60b9      	str	r1, [r7, #8]
   27f66:	4611      	mov	r1, r2
   27f68:	461a      	mov	r2, r3
   27f6a:	460b      	mov	r3, r1
   27f6c:	80fb      	strh	r3, [r7, #6]
   27f6e:	4613      	mov	r3, r2
   27f70:	80bb      	strh	r3, [r7, #4]
	bool my_src_addr = false;
   27f72:	2300      	movs	r3, #0
   27f74:	75fb      	strb	r3, [r7, #23]
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
   27f76:	68f8      	ldr	r0, [r7, #12]
   27f78:	f7ff ff73 	bl	27e62 <net_pkt_family>
   27f7c:	4603      	mov	r3, r0
   27f7e:	2b01      	cmp	r3, #1
   27f80:	d118      	bne.n	27fb4 <is_valid_packet+0x58>
		if (net_ipv4_addr_cmp(&ip_hdr->ipv4->src,
   27f82:	68bb      	ldr	r3, [r7, #8]
   27f84:	681b      	ldr	r3, [r3, #0]
   27f86:	f103 020c 	add.w	r2, r3, #12
				      &ip_hdr->ipv4->dst) ||
   27f8a:	68bb      	ldr	r3, [r7, #8]
   27f8c:	681b      	ldr	r3, [r3, #0]
   27f8e:	3310      	adds	r3, #16
		if (net_ipv4_addr_cmp(&ip_hdr->ipv4->src,
   27f90:	4619      	mov	r1, r3
   27f92:	4610      	mov	r0, r2
   27f94:	f7ff ff00 	bl	27d98 <net_ipv4_addr_cmp>
   27f98:	4603      	mov	r3, r0
   27f9a:	2b00      	cmp	r3, #0
   27f9c:	d108      	bne.n	27fb0 <is_valid_packet+0x54>
		    net_ipv4_is_my_addr(&ip_hdr->ipv4->src)) {
   27f9e:	68bb      	ldr	r3, [r7, #8]
   27fa0:	681b      	ldr	r3, [r3, #0]
   27fa2:	330c      	adds	r3, #12
   27fa4:	4618      	mov	r0, r3
   27fa6:	f7ff ff28 	bl	27dfa <net_ipv4_is_my_addr>
   27faa:	4603      	mov	r3, r0
				      &ip_hdr->ipv4->dst) ||
   27fac:	2b00      	cmp	r3, #0
   27fae:	d001      	beq.n	27fb4 <is_valid_packet+0x58>
			my_src_addr = true;
   27fb0:	2301      	movs	r3, #1
   27fb2:	75fb      	strb	r3, [r7, #23]
	return !(my_src_addr && (src_port == dst_port));
   27fb4:	7dfb      	ldrb	r3, [r7, #23]
   27fb6:	f083 0301 	eor.w	r3, r3, #1
   27fba:	b2db      	uxtb	r3, r3
   27fbc:	2b00      	cmp	r3, #0
   27fbe:	d103      	bne.n	27fc8 <is_valid_packet+0x6c>
   27fc0:	88fa      	ldrh	r2, [r7, #6]
   27fc2:	88bb      	ldrh	r3, [r7, #4]
   27fc4:	429a      	cmp	r2, r3
   27fc6:	d001      	beq.n	27fcc <is_valid_packet+0x70>
   27fc8:	2301      	movs	r3, #1
   27fca:	e000      	b.n	27fce <is_valid_packet+0x72>
   27fcc:	2300      	movs	r3, #0
   27fce:	f003 0301 	and.w	r3, r3, #1
   27fd2:	b2db      	uxtb	r3, r3
}
   27fd4:	4618      	mov	r0, r3
   27fd6:	3718      	adds	r7, #24
   27fd8:	46bd      	mov	sp, r7
   27fda:	bd80      	pop	{r7, pc}

00027fdc <net_conn_init>:
		cb(&conns[i], user_data);
	}
}

void net_conn_init(void)
{
   27fdc:	b480      	push	{r7}
   27fde:	af00      	add	r7, sp, #0
		for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
			conn_cache[i].idx = -1;
		}
	} while (0);
#endif /* CONFIG_NET_CONN_CACHE */
}
   27fe0:	bf00      	nop
   27fe2:	46bd      	mov	sp, r7
   27fe4:	bc80      	pop	{r7}
   27fe6:	4770      	bx	lr

00027fe8 <_is_user_context>:
{
   27fe8:	b480      	push	{r7}
   27fea:	af00      	add	r7, sp, #0
	return false;
   27fec:	2300      	movs	r3, #0
}
   27fee:	4618      	mov	r0, r3
   27ff0:	46bd      	mov	sp, r7
   27ff2:	bc80      	pop	{r7}
   27ff4:	4770      	bx	lr

00027ff6 <net_buf_frags_len>:
{
   27ff6:	b480      	push	{r7}
   27ff8:	b085      	sub	sp, #20
   27ffa:	af00      	add	r7, sp, #0
   27ffc:	6078      	str	r0, [r7, #4]
	size_t bytes = 0;
   27ffe:	2300      	movs	r3, #0
   28000:	60fb      	str	r3, [r7, #12]
	while (buf) {
   28002:	e008      	b.n	28016 <net_buf_frags_len+0x20>
		bytes += buf->len;
   28004:	687b      	ldr	r3, [r7, #4]
   28006:	899b      	ldrh	r3, [r3, #12]
   28008:	461a      	mov	r2, r3
   2800a:	68fb      	ldr	r3, [r7, #12]
   2800c:	4413      	add	r3, r2
   2800e:	60fb      	str	r3, [r7, #12]
		buf = buf->frags;
   28010:	687b      	ldr	r3, [r7, #4]
   28012:	681b      	ldr	r3, [r3, #0]
   28014:	607b      	str	r3, [r7, #4]
	while (buf) {
   28016:	687b      	ldr	r3, [r7, #4]
   28018:	2b00      	cmp	r3, #0
   2801a:	d1f3      	bne.n	28004 <net_buf_frags_len+0xe>
	return bytes;
   2801c:	68fb      	ldr	r3, [r7, #12]
}
   2801e:	4618      	mov	r0, r3
   28020:	3714      	adds	r7, #20
   28022:	46bd      	mov	sp, r7
   28024:	bc80      	pop	{r7}
   28026:	4770      	bx	lr

00028028 <net_pkt_iface>:
{
   28028:	b480      	push	{r7}
   2802a:	b083      	sub	sp, #12
   2802c:	af00      	add	r7, sp, #0
   2802e:	6078      	str	r0, [r7, #4]
	return pkt->iface;
   28030:	687b      	ldr	r3, [r7, #4]
   28032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   28034:	4618      	mov	r0, r3
   28036:	370c      	adds	r7, #12
   28038:	46bd      	mov	sp, r7
   2803a:	bc80      	pop	{r7}
   2803c:	4770      	bx	lr

0002803e <net_pkt_ip_hdr_len>:
{
   2803e:	b480      	push	{r7}
   28040:	b083      	sub	sp, #12
   28042:	af00      	add	r7, sp, #0
   28044:	6078      	str	r0, [r7, #4]
	return pkt->ip_hdr_len;
   28046:	687b      	ldr	r3, [r7, #4]
   28048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
}
   2804c:	4618      	mov	r0, r3
   2804e:	370c      	adds	r7, #12
   28050:	46bd      	mov	sp, r7
   28052:	bc80      	pop	{r7}
   28054:	4770      	bx	lr

00028056 <net_pkt_ipv6_ext_len>:
{
   28056:	b480      	push	{r7}
   28058:	b083      	sub	sp, #12
   2805a:	af00      	add	r7, sp, #0
   2805c:	6078      	str	r0, [r7, #4]
	return 0;
   2805e:	2300      	movs	r3, #0
}
   28060:	4618      	mov	r0, r3
   28062:	370c      	adds	r7, #12
   28064:	46bd      	mov	sp, r7
   28066:	bc80      	pop	{r7}
   28068:	4770      	bx	lr

0002806a <net_pkt_get_len>:
{
   2806a:	b580      	push	{r7, lr}
   2806c:	b082      	sub	sp, #8
   2806e:	af00      	add	r7, sp, #0
   28070:	6078      	str	r0, [r7, #4]
	return net_buf_frags_len(pkt->frags);
   28072:	687b      	ldr	r3, [r7, #4]
   28074:	695b      	ldr	r3, [r3, #20]
   28076:	4618      	mov	r0, r3
   28078:	f7ff ffbd 	bl	27ff6 <net_buf_frags_len>
   2807c:	4603      	mov	r3, r0
}
   2807e:	4618      	mov	r0, r3
   28080:	3708      	adds	r7, #8
   28082:	46bd      	mov	sp, r7
   28084:	bd80      	pop	{r7, pc}

00028086 <net_calc_chksum_udp>:
{
   28086:	b580      	push	{r7, lr}
   28088:	b084      	sub	sp, #16
   2808a:	af00      	add	r7, sp, #0
   2808c:	6078      	str	r0, [r7, #4]
	u16_t chksum = net_calc_chksum(pkt, IPPROTO_UDP);
   2808e:	2111      	movs	r1, #17
   28090:	6878      	ldr	r0, [r7, #4]
   28092:	f7fe fdc3 	bl	26c1c <net_calc_chksum>
   28096:	4603      	mov	r3, r0
   28098:	81fb      	strh	r3, [r7, #14]
	return chksum == 0U ? 0xffff : chksum;
   2809a:	89fb      	ldrh	r3, [r7, #14]
   2809c:	2b00      	cmp	r3, #0
   2809e:	d001      	beq.n	280a4 <net_calc_chksum_udp+0x1e>
   280a0:	89fb      	ldrh	r3, [r7, #14]
   280a2:	e001      	b.n	280a8 <net_calc_chksum_udp+0x22>
   280a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
   280a8:	4618      	mov	r0, r3
   280aa:	3710      	adds	r7, #16
   280ac:	46bd      	mov	sp, r7
   280ae:	bd80      	pop	{r7, pc}

000280b0 <net_calc_verify_chksum_udp>:
{
   280b0:	b580      	push	{r7, lr}
   280b2:	b082      	sub	sp, #8
   280b4:	af00      	add	r7, sp, #0
   280b6:	6078      	str	r0, [r7, #4]
	return net_calc_chksum(pkt, IPPROTO_UDP);
   280b8:	2111      	movs	r1, #17
   280ba:	6878      	ldr	r0, [r7, #4]
   280bc:	f7fe fdae 	bl	26c1c <net_calc_chksum>
   280c0:	4603      	mov	r3, r0
}
   280c2:	4618      	mov	r0, r3
   280c4:	3708      	adds	r7, #8
   280c6:	46bd      	mov	sp, r7
   280c8:	bd80      	pop	{r7, pc}

000280ca <net_udp_create>:
#include "net_stats.h"

#define PKT_WAIT_TIME K_SECONDS(1)

int net_udp_create(struct net_pkt *pkt, u16_t src_port, u16_t dst_port)
{
   280ca:	b580      	push	{r7, lr}
   280cc:	b088      	sub	sp, #32
   280ce:	af00      	add	r7, sp, #0
   280d0:	6078      	str	r0, [r7, #4]
   280d2:	460b      	mov	r3, r1
   280d4:	807b      	strh	r3, [r7, #2]
   280d6:	4613      	mov	r3, r2
   280d8:	803b      	strh	r3, [r7, #0]
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   280da:	f107 0314 	add.w	r3, r7, #20
   280de:	60fb      	str	r3, [r7, #12]
   280e0:	2308      	movs	r3, #8
   280e2:	613b      	str	r3, [r7, #16]
	struct net_udp_hdr *udp_hdr;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   280e4:	f107 030c 	add.w	r3, r7, #12
   280e8:	4619      	mov	r1, r3
   280ea:	6878      	ldr	r0, [r7, #4]
   280ec:	f7fe f9fa 	bl	264e4 <net_pkt_get_data>
   280f0:	61f8      	str	r0, [r7, #28]
	if (!udp_hdr) {
   280f2:	69fb      	ldr	r3, [r7, #28]
   280f4:	2b00      	cmp	r3, #0
   280f6:	d102      	bne.n	280fe <net_udp_create+0x34>
		return -ENOBUFS;
   280f8:	f06f 0368 	mvn.w	r3, #104	; 0x68
   280fc:	e016      	b.n	2812c <net_udp_create+0x62>
	}

	udp_hdr->src_port = src_port;
   280fe:	69fb      	ldr	r3, [r7, #28]
   28100:	887a      	ldrh	r2, [r7, #2]
   28102:	801a      	strh	r2, [r3, #0]
	udp_hdr->dst_port = dst_port;
   28104:	69fb      	ldr	r3, [r7, #28]
   28106:	883a      	ldrh	r2, [r7, #0]
   28108:	805a      	strh	r2, [r3, #2]
	udp_hdr->len      = 0U;
   2810a:	69fb      	ldr	r3, [r7, #28]
   2810c:	2200      	movs	r2, #0
   2810e:	711a      	strb	r2, [r3, #4]
   28110:	2200      	movs	r2, #0
   28112:	715a      	strb	r2, [r3, #5]
	udp_hdr->chksum   = 0U;
   28114:	69fb      	ldr	r3, [r7, #28]
   28116:	2200      	movs	r2, #0
   28118:	719a      	strb	r2, [r3, #6]
   2811a:	2200      	movs	r2, #0
   2811c:	71da      	strb	r2, [r3, #7]

	return net_pkt_set_data(pkt, &udp_access);
   2811e:	f107 030c 	add.w	r3, r7, #12
   28122:	4619      	mov	r1, r3
   28124:	6878      	ldr	r0, [r7, #4]
   28126:	f7fe fa25 	bl	26574 <net_pkt_set_data>
   2812a:	4603      	mov	r3, r0
}
   2812c:	4618      	mov	r0, r3
   2812e:	3720      	adds	r7, #32
   28130:	46bd      	mov	sp, r7
   28132:	bd80      	pop	{r7, pc}

00028134 <net_udp_finalize>:

int net_udp_finalize(struct net_pkt *pkt)
{
   28134:	b590      	push	{r4, r7, lr}
   28136:	b089      	sub	sp, #36	; 0x24
   28138:	af00      	add	r7, sp, #0
   2813a:	6078      	str	r0, [r7, #4]
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   2813c:	f107 0310 	add.w	r3, r7, #16
   28140:	60bb      	str	r3, [r7, #8]
   28142:	2308      	movs	r3, #8
   28144:	60fb      	str	r3, [r7, #12]
	struct net_udp_hdr *udp_hdr;
	u16_t length;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   28146:	f107 0308 	add.w	r3, r7, #8
   2814a:	4619      	mov	r1, r3
   2814c:	6878      	ldr	r0, [r7, #4]
   2814e:	f7fe f9c9 	bl	264e4 <net_pkt_get_data>
   28152:	61f8      	str	r0, [r7, #28]
	if (!udp_hdr) {
   28154:	69fb      	ldr	r3, [r7, #28]
   28156:	2b00      	cmp	r3, #0
   28158:	d102      	bne.n	28160 <net_udp_finalize+0x2c>
		return -ENOBUFS;
   2815a:	f06f 0368 	mvn.w	r3, #104	; 0x68
   2815e:	e035      	b.n	281cc <net_udp_finalize+0x98>
	}

	length = net_pkt_get_len(pkt) -
   28160:	6878      	ldr	r0, [r7, #4]
   28162:	f7ff ff82 	bl	2806a <net_pkt_get_len>
   28166:	4603      	mov	r3, r0
   28168:	b29c      	uxth	r4, r3
		net_pkt_ip_hdr_len(pkt) -
   2816a:	6878      	ldr	r0, [r7, #4]
   2816c:	f7ff ff67 	bl	2803e <net_pkt_ip_hdr_len>
   28170:	4603      	mov	r3, r0
   28172:	b29b      	uxth	r3, r3
	length = net_pkt_get_len(pkt) -
   28174:	1ae3      	subs	r3, r4, r3
   28176:	b29c      	uxth	r4, r3
		net_pkt_ipv6_ext_len(pkt);
   28178:	6878      	ldr	r0, [r7, #4]
   2817a:	f7ff ff6c 	bl	28056 <net_pkt_ipv6_ext_len>
   2817e:	4603      	mov	r3, r0
	length = net_pkt_get_len(pkt) -
   28180:	1ae3      	subs	r3, r4, r3
   28182:	837b      	strh	r3, [r7, #26]
	udp_hdr->len = htons(length);
   28184:	8b7b      	ldrh	r3, [r7, #26]
   28186:	0a1b      	lsrs	r3, r3, #8
   28188:	b29b      	uxth	r3, r3
   2818a:	b21a      	sxth	r2, r3
   2818c:	8b7b      	ldrh	r3, [r7, #26]
   2818e:	021b      	lsls	r3, r3, #8
   28190:	b21b      	sxth	r3, r3
   28192:	4313      	orrs	r3, r2
   28194:	b21b      	sxth	r3, r3
   28196:	b29a      	uxth	r2, r3
   28198:	69fb      	ldr	r3, [r7, #28]
   2819a:	809a      	strh	r2, [r3, #4]

	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   2819c:	6878      	ldr	r0, [r7, #4]
   2819e:	f7ff ff43 	bl	28028 <net_pkt_iface>
   281a2:	4603      	mov	r3, r0
   281a4:	4618      	mov	r0, r3
   281a6:	f7fd facd 	bl	25744 <net_if_need_calc_tx_checksum>
   281aa:	4603      	mov	r3, r0
   281ac:	2b00      	cmp	r3, #0
   281ae:	d006      	beq.n	281be <net_udp_finalize+0x8a>
		udp_hdr->chksum = net_calc_chksum_udp(pkt);
   281b0:	6878      	ldr	r0, [r7, #4]
   281b2:	f7ff ff68 	bl	28086 <net_calc_chksum_udp>
   281b6:	4603      	mov	r3, r0
   281b8:	461a      	mov	r2, r3
   281ba:	69fb      	ldr	r3, [r7, #28]
   281bc:	80da      	strh	r2, [r3, #6]
	}

	return net_pkt_set_data(pkt, &udp_access);
   281be:	f107 0308 	add.w	r3, r7, #8
   281c2:	4619      	mov	r1, r3
   281c4:	6878      	ldr	r0, [r7, #4]
   281c6:	f7fe f9d5 	bl	26574 <net_pkt_set_data>
   281ca:	4603      	mov	r3, r0
}
   281cc:	4618      	mov	r0, r3
   281ce:	3724      	adds	r7, #36	; 0x24
   281d0:	46bd      	mov	sp, r7
   281d2:	bd90      	pop	{r4, r7, pc}

000281d4 <net_udp_input>:
	return net_conn_unregister(handle);
}

struct net_udp_hdr *net_udp_input(struct net_pkt *pkt,
				  struct net_pkt_data_access *udp_access)
{
   281d4:	b580      	push	{r7, lr}
   281d6:	b086      	sub	sp, #24
   281d8:	af00      	add	r7, sp, #0
   281da:	6078      	str	r0, [r7, #4]
   281dc:	6039      	str	r1, [r7, #0]
	struct net_udp_hdr *udp_hdr;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, udp_access);
   281de:	6839      	ldr	r1, [r7, #0]
   281e0:	6878      	ldr	r0, [r7, #4]
   281e2:	f7fe f97f 	bl	264e4 <net_pkt_get_data>
   281e6:	6138      	str	r0, [r7, #16]
	if (!udp_hdr || net_pkt_set_data(pkt, udp_access)) {
   281e8:	693b      	ldr	r3, [r7, #16]
   281ea:	2b00      	cmp	r3, #0
   281ec:	d006      	beq.n	281fc <net_udp_input+0x28>
   281ee:	6839      	ldr	r1, [r7, #0]
   281f0:	6878      	ldr	r0, [r7, #4]
   281f2:	f7fe f9bf 	bl	26574 <net_pkt_set_data>
   281f6:	4603      	mov	r3, r0
   281f8:	2b00      	cmp	r3, #0
   281fa:	d004      	beq.n	28206 <net_udp_input+0x32>
		NET_DBG("DROP: corrupted header");
   281fc:	f7ff fef4 	bl	27fe8 <_is_user_context>
   28200:	4603      	mov	r3, r0
   28202:	75bb      	strb	r3, [r7, #22]
		goto drop;
   28204:	e017      	b.n	28236 <net_udp_input+0x62>
	}

	if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt))) {
   28206:	6878      	ldr	r0, [r7, #4]
   28208:	f7ff ff0e 	bl	28028 <net_pkt_iface>
   2820c:	4603      	mov	r3, r0
   2820e:	4618      	mov	r0, r3
   28210:	f7fd faa5 	bl	2575e <net_if_need_calc_rx_checksum>
   28214:	4603      	mov	r3, r0
	if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
   28216:	2b00      	cmp	r3, #0
   28218:	d00a      	beq.n	28230 <net_udp_input+0x5c>
		if (IS_ENABLED(CONFIG_NET_UDP_MISSING_CHECKSUM) &&
		    net_pkt_family(pkt) == AF_INET && !udp_hdr->chksum) {
			goto out;
		}

		if (net_calc_verify_chksum_udp(pkt) != 0U) {
   2821a:	6878      	ldr	r0, [r7, #4]
   2821c:	f7ff ff48 	bl	280b0 <net_calc_verify_chksum_udp>
   28220:	4603      	mov	r3, r0
   28222:	2b00      	cmp	r3, #0
   28224:	d004      	beq.n	28230 <net_udp_input+0x5c>
			NET_DBG("DROP: checksum mismatch");
   28226:	f7ff fedf 	bl	27fe8 <_is_user_context>
   2822a:	4603      	mov	r3, r0
   2822c:	75fb      	strb	r3, [r7, #23]
			goto drop;
   2822e:	e002      	b.n	28236 <net_udp_input+0x62>
		}
	}
out:
   28230:	bf00      	nop
	return udp_hdr;
   28232:	693b      	ldr	r3, [r7, #16]
   28234:	e000      	b.n	28238 <net_udp_input+0x64>
drop:
	net_stats_update_udp_chkerr(net_pkt_iface(pkt));
	return NULL;
   28236:	2300      	movs	r3, #0
}
   28238:	4618      	mov	r0, r3
   2823a:	3718      	adds	r7, #24
   2823c:	46bd      	mov	sp, r7
   2823e:	bd80      	pop	{r7, pc}

00028240 <_is_user_context>:
{
   28240:	b480      	push	{r7}
   28242:	af00      	add	r7, sp, #0
	return false;
   28244:	2300      	movs	r3, #0
}
   28246:	4618      	mov	r0, r3
   28248:	46bd      	mov	sp, r7
   2824a:	bc80      	pop	{r7}
   2824c:	4770      	bx	lr

0002824e <z_impl_k_sem_count_get>:
{
   2824e:	b480      	push	{r7}
   28250:	b083      	sub	sp, #12
   28252:	af00      	add	r7, sp, #0
   28254:	6078      	str	r0, [r7, #4]
	return sem->count;
   28256:	687b      	ldr	r3, [r7, #4]
   28258:	689b      	ldr	r3, [r3, #8]
}
   2825a:	4618      	mov	r0, r3
   2825c:	370c      	adds	r7, #12
   2825e:	46bd      	mov	sp, r7
   28260:	bc80      	pop	{r7}
   28262:	4770      	bx	lr

00028264 <k_sem_init>:
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   28264:	b580      	push	{r7, lr}
   28266:	b084      	sub	sp, #16
   28268:	af00      	add	r7, sp, #0
   2826a:	60f8      	str	r0, [r7, #12]
   2826c:	60b9      	str	r1, [r7, #8]
   2826e:	607a      	str	r2, [r7, #4]
   28270:	687a      	ldr	r2, [r7, #4]
   28272:	68b9      	ldr	r1, [r7, #8]
   28274:	68f8      	ldr	r0, [r7, #12]
   28276:	f003 f847 	bl	2b308 <z_impl_k_sem_init>
   2827a:	bf00      	nop
   2827c:	3710      	adds	r7, #16
   2827e:	46bd      	mov	sp, r7
   28280:	bd80      	pop	{r7, pc}

00028282 <k_sem_take>:
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   28282:	b580      	push	{r7, lr}
   28284:	b082      	sub	sp, #8
   28286:	af00      	add	r7, sp, #0
   28288:	6078      	str	r0, [r7, #4]
   2828a:	6039      	str	r1, [r7, #0]
   2828c:	6839      	ldr	r1, [r7, #0]
   2828e:	6878      	ldr	r0, [r7, #4]
   28290:	f7ef fcaa 	bl	17be8 <z_impl_k_sem_take>
   28294:	4603      	mov	r3, r0
   28296:	4618      	mov	r0, r3
   28298:	3708      	adds	r7, #8
   2829a:	46bd      	mov	sp, r7
   2829c:	bd80      	pop	{r7, pc}

0002829e <k_sem_give>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   2829e:	b580      	push	{r7, lr}
   282a0:	b082      	sub	sp, #8
   282a2:	af00      	add	r7, sp, #0
   282a4:	6078      	str	r0, [r7, #4]
   282a6:	6878      	ldr	r0, [r7, #4]
   282a8:	f7ef fc7c 	bl	17ba4 <z_impl_k_sem_give>
   282ac:	bf00      	nop
   282ae:	3708      	adds	r7, #8
   282b0:	46bd      	mov	sp, r7
   282b2:	bd80      	pop	{r7, pc}

000282b4 <k_sem_count_get>:
K_SYSCALL_DECLARE1(K_SYSCALL_K_SEM_COUNT_GET, k_sem_count_get, unsigned int, struct k_sem *, sem)
   282b4:	b580      	push	{r7, lr}
   282b6:	b082      	sub	sp, #8
   282b8:	af00      	add	r7, sp, #0
   282ba:	6078      	str	r0, [r7, #4]
   282bc:	6878      	ldr	r0, [r7, #4]
   282be:	f7ff ffc6 	bl	2824e <z_impl_k_sem_count_get>
   282c2:	4603      	mov	r3, r0
   282c4:	4618      	mov	r0, r3
   282c6:	3708      	adds	r7, #8
   282c8:	46bd      	mov	sp, r7
   282ca:	bd80      	pop	{r7, pc}

000282cc <net_if_ipv4_set_netmask>:
 * @param iface Interface to use.
 * @param netmask IPv4 netmask
 */
static inline void net_if_ipv4_set_netmask(struct net_if *iface,
					   const struct in_addr *netmask)
{
   282cc:	b580      	push	{r7, lr}
   282ce:	b084      	sub	sp, #16
   282d0:	af00      	add	r7, sp, #0
   282d2:	6078      	str	r0, [r7, #4]
   282d4:	6039      	str	r1, [r7, #0]
#if defined(CONFIG_NET_IPV4)
	if (net_if_config_ipv4_get(iface, NULL) < 0) {
   282d6:	2100      	movs	r1, #0
   282d8:	6878      	ldr	r0, [r7, #4]
   282da:	f7eb f867 	bl	133ac <net_if_config_ipv4_get>
   282de:	4603      	mov	r3, r0
   282e0:	2b00      	cmp	r3, #0
   282e2:	db0e      	blt.n	28302 <net_if_ipv4_set_netmask+0x36>
		return;
	}

	if (!iface->config.ip.ipv4) {
   282e4:	687b      	ldr	r3, [r7, #4]
   282e6:	685b      	ldr	r3, [r3, #4]
   282e8:	2b00      	cmp	r3, #0
   282ea:	d00c      	beq.n	28306 <net_if_ipv4_set_netmask+0x3a>
		return;
	}

	net_ipaddr_copy(&iface->config.ip.ipv4->netmask, netmask);
   282ec:	687b      	ldr	r3, [r7, #4]
   282ee:	685b      	ldr	r3, [r3, #4]
   282f0:	331c      	adds	r3, #28
   282f2:	60fb      	str	r3, [r7, #12]
   282f4:	683b      	ldr	r3, [r7, #0]
   282f6:	60bb      	str	r3, [r7, #8]
   282f8:	68bb      	ldr	r3, [r7, #8]
   282fa:	681a      	ldr	r2, [r3, #0]
   282fc:	68fb      	ldr	r3, [r7, #12]
   282fe:	601a      	str	r2, [r3, #0]
   28300:	e002      	b.n	28308 <net_if_ipv4_set_netmask+0x3c>
		return;
   28302:	bf00      	nop
   28304:	e000      	b.n	28308 <net_if_ipv4_set_netmask+0x3c>
		return;
   28306:	bf00      	nop
#endif
}
   28308:	3710      	adds	r7, #16
   2830a:	46bd      	mov	sp, r7
   2830c:	bd80      	pop	{r7, pc}

0002830e <atomic_get>:
{
   2830e:	b480      	push	{r7}
   28310:	b083      	sub	sp, #12
   28312:	af00      	add	r7, sp, #0
   28314:	6078      	str	r0, [r7, #4]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28316:	687b      	ldr	r3, [r7, #4]
   28318:	f3bf 8f5b 	dmb	ish
   2831c:	681b      	ldr	r3, [r3, #0]
   2831e:	f3bf 8f5b 	dmb	ish
}
   28322:	4618      	mov	r0, r3
   28324:	370c      	adds	r7, #12
   28326:	46bd      	mov	sp, r7
   28328:	bc80      	pop	{r7}
   2832a:	4770      	bx	lr

0002832c <atomic_test_bit>:
{
   2832c:	b580      	push	{r7, lr}
   2832e:	b084      	sub	sp, #16
   28330:	af00      	add	r7, sp, #0
   28332:	6078      	str	r0, [r7, #4]
   28334:	6039      	str	r1, [r7, #0]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   28336:	683b      	ldr	r3, [r7, #0]
   28338:	095b      	lsrs	r3, r3, #5
   2833a:	009b      	lsls	r3, r3, #2
   2833c:	687a      	ldr	r2, [r7, #4]
   2833e:	4413      	add	r3, r2
   28340:	4618      	mov	r0, r3
   28342:	f7ff ffe4 	bl	2830e <atomic_get>
   28346:	60f8      	str	r0, [r7, #12]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   28348:	683b      	ldr	r3, [r7, #0]
   2834a:	f003 031f 	and.w	r3, r3, #31
   2834e:	68fa      	ldr	r2, [r7, #12]
   28350:	fa42 f303 	asr.w	r3, r2, r3
   28354:	f003 0301 	and.w	r3, r3, #1
   28358:	2b00      	cmp	r3, #0
   2835a:	bf14      	ite	ne
   2835c:	2301      	movne	r3, #1
   2835e:	2300      	moveq	r3, #0
   28360:	b2db      	uxtb	r3, r3
}
   28362:	4618      	mov	r0, r3
   28364:	3710      	adds	r7, #16
   28366:	46bd      	mov	sp, r7
   28368:	bd80      	pop	{r7, pc}

0002836a <_is_user_context>:
{
   2836a:	b480      	push	{r7}
   2836c:	af00      	add	r7, sp, #0
	return false;
   2836e:	2300      	movs	r3, #0
}
   28370:	4618      	mov	r0, r3
   28372:	46bd      	mov	sp, r7
   28374:	bc80      	pop	{r7}
   28376:	4770      	bx	lr

00028378 <net_hostname_set_postfix>:
int net_hostname_set_postfix(const u8_t *hostname_postfix,
			      int postfix_len);
#else
static inline int net_hostname_set_postfix(const u8_t *hostname_postfix,
					   int postfix_len)
{
   28378:	b480      	push	{r7}
   2837a:	b083      	sub	sp, #12
   2837c:	af00      	add	r7, sp, #0
   2837e:	6078      	str	r0, [r7, #4]
   28380:	6039      	str	r1, [r7, #0]
	return -EMSGSIZE;
   28382:	f06f 0379 	mvn.w	r3, #121	; 0x79
}
   28386:	4618      	mov	r0, r3
   28388:	370c      	adds	r7, #12
   2838a:	46bd      	mov	sp, r7
   2838c:	bc80      	pop	{r7}
   2838e:	4770      	bx	lr

00028390 <net_if_get_link_addr>:
{
   28390:	b480      	push	{r7}
   28392:	b083      	sub	sp, #12
   28394:	af00      	add	r7, sp, #0
   28396:	6078      	str	r0, [r7, #4]
	return &iface->if_dev->link_addr;
   28398:	687b      	ldr	r3, [r7, #4]
   2839a:	681b      	ldr	r3, [r3, #0]
   2839c:	3310      	adds	r3, #16
}
   2839e:	4618      	mov	r0, r3
   283a0:	370c      	adds	r7, #12
   283a2:	46bd      	mov	sp, r7
   283a4:	bc80      	pop	{r7}
   283a6:	4770      	bx	lr

000283a8 <net_if_set_link_addr>:
{
   283a8:	b580      	push	{r7, lr}
   283aa:	b084      	sub	sp, #16
   283ac:	af00      	add	r7, sp, #0
   283ae:	60f8      	str	r0, [r7, #12]
   283b0:	60b9      	str	r1, [r7, #8]
   283b2:	4611      	mov	r1, r2
   283b4:	461a      	mov	r2, r3
   283b6:	460b      	mov	r3, r1
   283b8:	71fb      	strb	r3, [r7, #7]
   283ba:	4613      	mov	r3, r2
   283bc:	71bb      	strb	r3, [r7, #6]
	if (atomic_test_bit(iface->if_dev->flags, NET_IF_UP)) {
   283be:	68fb      	ldr	r3, [r7, #12]
   283c0:	681b      	ldr	r3, [r3, #0]
   283c2:	330c      	adds	r3, #12
   283c4:	2100      	movs	r1, #0
   283c6:	4618      	mov	r0, r3
   283c8:	f7ff ffb0 	bl	2832c <atomic_test_bit>
   283cc:	4603      	mov	r3, r0
   283ce:	2b00      	cmp	r3, #0
   283d0:	d002      	beq.n	283d8 <net_if_set_link_addr+0x30>
		return -EPERM;
   283d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   283d6:	e017      	b.n	28408 <net_if_set_link_addr+0x60>
	net_if_get_link_addr(iface)->addr = addr;
   283d8:	68f8      	ldr	r0, [r7, #12]
   283da:	f7ff ffd9 	bl	28390 <net_if_get_link_addr>
   283de:	4602      	mov	r2, r0
   283e0:	68bb      	ldr	r3, [r7, #8]
   283e2:	6013      	str	r3, [r2, #0]
	net_if_get_link_addr(iface)->len = len;
   283e4:	68f8      	ldr	r0, [r7, #12]
   283e6:	f7ff ffd3 	bl	28390 <net_if_get_link_addr>
   283ea:	4602      	mov	r2, r0
   283ec:	79fb      	ldrb	r3, [r7, #7]
   283ee:	7113      	strb	r3, [r2, #4]
	net_if_get_link_addr(iface)->type = type;
   283f0:	68f8      	ldr	r0, [r7, #12]
   283f2:	f7ff ffcd 	bl	28390 <net_if_get_link_addr>
   283f6:	4602      	mov	r2, r0
   283f8:	79bb      	ldrb	r3, [r7, #6]
   283fa:	7153      	strb	r3, [r2, #5]
	net_hostname_set_postfix(addr, len);
   283fc:	79fb      	ldrb	r3, [r7, #7]
   283fe:	4619      	mov	r1, r3
   28400:	68b8      	ldr	r0, [r7, #8]
   28402:	f7ff ffb9 	bl	28378 <net_hostname_set_postfix>
	return 0;
   28406:	2300      	movs	r3, #0
}
   28408:	4618      	mov	r0, r3
   2840a:	3710      	adds	r7, #16
   2840c:	46bd      	mov	sp, r7
   2840e:	bd80      	pop	{r7, pc}

00028410 <netusb_init_dev>:
	.get_capabilities = NULL,
	.send = netusb_send,
};

static int netusb_init_dev(struct device *dev)
{
   28410:	b480      	push	{r7}
   28412:	b083      	sub	sp, #12
   28414:	af00      	add	r7, sp, #0
   28416:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(dev);
	return 0;
   28418:	2300      	movs	r3, #0
}
   2841a:	4618      	mov	r0, r3
   2841c:	370c      	adds	r7, #12
   2841e:	46bd      	mov	sp, r7
   28420:	bc80      	pop	{r7}
   28422:	4770      	bx	lr

00028424 <_is_user_context>:
{
   28424:	b480      	push	{r7}
   28426:	af00      	add	r7, sp, #0
	return false;
   28428:	2300      	movs	r3, #0
}
   2842a:	4618      	mov	r0, r3
   2842c:	46bd      	mov	sp, r7
   2842e:	bc80      	pop	{r7}
   28430:	4770      	bx	lr

00028432 <net_buf_frags_len>:
{
   28432:	b480      	push	{r7}
   28434:	b085      	sub	sp, #20
   28436:	af00      	add	r7, sp, #0
   28438:	6078      	str	r0, [r7, #4]
	size_t bytes = 0;
   2843a:	2300      	movs	r3, #0
   2843c:	60fb      	str	r3, [r7, #12]
	while (buf) {
   2843e:	e008      	b.n	28452 <net_buf_frags_len+0x20>
		bytes += buf->len;
   28440:	687b      	ldr	r3, [r7, #4]
   28442:	899b      	ldrh	r3, [r3, #12]
   28444:	461a      	mov	r2, r3
   28446:	68fb      	ldr	r3, [r7, #12]
   28448:	4413      	add	r3, r2
   2844a:	60fb      	str	r3, [r7, #12]
		buf = buf->frags;
   2844c:	687b      	ldr	r3, [r7, #4]
   2844e:	681b      	ldr	r3, [r3, #0]
   28450:	607b      	str	r3, [r7, #4]
	while (buf) {
   28452:	687b      	ldr	r3, [r7, #4]
   28454:	2b00      	cmp	r3, #0
   28456:	d1f3      	bne.n	28440 <net_buf_frags_len+0xe>
	return bytes;
   28458:	68fb      	ldr	r3, [r7, #12]
}
   2845a:	4618      	mov	r0, r3
   2845c:	3714      	adds	r7, #20
   2845e:	46bd      	mov	sp, r7
   28460:	bc80      	pop	{r7}
   28462:	4770      	bx	lr

00028464 <net_pkt_get_len>:
{
   28464:	b580      	push	{r7, lr}
   28466:	b082      	sub	sp, #8
   28468:	af00      	add	r7, sp, #0
   2846a:	6078      	str	r0, [r7, #4]
	return net_buf_frags_len(pkt->frags);
   2846c:	687b      	ldr	r3, [r7, #4]
   2846e:	695b      	ldr	r3, [r3, #20]
   28470:	4618      	mov	r0, r3
   28472:	f7ff ffde 	bl	28432 <net_buf_frags_len>
   28476:	4603      	mov	r3, r0
}
   28478:	4618      	mov	r0, r3
   2847a:	3708      	adds	r7, #8
   2847c:	46bd      	mov	sp, r7
   2847e:	bd80      	pop	{r7, pc}

00028480 <ecm_int_in>:
{
   28480:	b580      	push	{r7, lr}
   28482:	b084      	sub	sp, #16
   28484:	af00      	add	r7, sp, #0
   28486:	4603      	mov	r3, r0
   28488:	460a      	mov	r2, r1
   2848a:	71fb      	strb	r3, [r7, #7]
   2848c:	4613      	mov	r3, r2
   2848e:	71bb      	strb	r3, [r7, #6]
	LOG_DBG("EP 0x%x status %d", ep, ep_status);
   28490:	f7ff ffc8 	bl	28424 <_is_user_context>
   28494:	4603      	mov	r3, r0
   28496:	73fb      	strb	r3, [r7, #15]
}
   28498:	bf00      	nop
   2849a:	3710      	adds	r7, #16
   2849c:	46bd      	mov	sp, r7
   2849e:	bd80      	pop	{r7, pc}

000284a0 <ecm_class_handler>:
{
   284a0:	b580      	push	{r7, lr}
   284a2:	b092      	sub	sp, #72	; 0x48
   284a4:	af00      	add	r7, sp, #0
   284a6:	60f8      	str	r0, [r7, #12]
   284a8:	60b9      	str	r1, [r7, #8]
   284aa:	607a      	str	r2, [r7, #4]
	LOG_DBG("len %d req_type 0x%x req 0x%x enabled %u",
   284ac:	f7ff ffba 	bl	28424 <_is_user_context>
   284b0:	4603      	mov	r3, r0
   284b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (!netusb_enabled()) {
   284b6:	f7ec fe49 	bl	1514c <netusb_enabled>
   284ba:	4603      	mov	r3, r0
   284bc:	f083 0301 	eor.w	r3, r3, #1
   284c0:	b2db      	uxtb	r3, r3
   284c2:	2b00      	cmp	r3, #0
   284c4:	d007      	beq.n	284d6 <ecm_class_handler+0x36>
		LOG_ERR("interface disabled");
   284c6:	f7ff ffad 	bl	28424 <_is_user_context>
   284ca:	4603      	mov	r3, r0
   284cc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		return -ENODEV;
   284d0:	f06f 0312 	mvn.w	r3, #18
   284d4:	e016      	b.n	28504 <ecm_class_handler+0x64>
	if (setup->bmRequestType != USB_CDC_ECM_REQ_TYPE) {
   284d6:	68fb      	ldr	r3, [r7, #12]
   284d8:	781b      	ldrb	r3, [r3, #0]
   284da:	2b21      	cmp	r3, #33	; 0x21
   284dc:	d006      	beq.n	284ec <ecm_class_handler+0x4c>
		LOG_WRN("Unhandled req_type 0x%x", setup->bmRequestType);
   284de:	f7ff ffa1 	bl	28424 <_is_user_context>
   284e2:	4603      	mov	r3, r0
   284e4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		return 0;
   284e8:	2300      	movs	r3, #0
   284ea:	e00b      	b.n	28504 <ecm_class_handler+0x64>
	switch (setup->bRequest) {
   284ec:	68fb      	ldr	r3, [r7, #12]
   284ee:	785b      	ldrb	r3, [r3, #1]
   284f0:	2b43      	cmp	r3, #67	; 0x43
   284f2:	d105      	bne.n	28500 <ecm_class_handler+0x60>
		LOG_DBG("intf 0x%x filter 0x%x", setup->wIndex, setup->wValue);
   284f4:	f7ff ff96 	bl	28424 <_is_user_context>
   284f8:	4603      	mov	r3, r0
   284fa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		break;
   284fe:	e000      	b.n	28502 <ecm_class_handler+0x62>
		break;
   28500:	bf00      	nop
	return 0;
   28502:	2300      	movs	r3, #0
}
   28504:	4618      	mov	r0, r3
   28506:	3748      	adds	r7, #72	; 0x48
   28508:	46bd      	mov	sp, r7
   2850a:	bd80      	pop	{r7, pc}

0002850c <ecm_eth_size>:
{
   2850c:	b580      	push	{r7, lr}
   2850e:	b086      	sub	sp, #24
   28510:	af00      	add	r7, sp, #0
   28512:	6078      	str	r0, [r7, #4]
   28514:	6039      	str	r1, [r7, #0]
	struct net_eth_hdr *hdr = (void *)ecm_pkt;
   28516:	687b      	ldr	r3, [r7, #4]
   28518:	617b      	str	r3, [r7, #20]
	u8_t *ip_data = (u8_t *)ecm_pkt + sizeof(struct net_eth_hdr);
   2851a:	687b      	ldr	r3, [r7, #4]
   2851c:	330e      	adds	r3, #14
   2851e:	613b      	str	r3, [r7, #16]
	if (len < NET_IPV6H_LEN + sizeof(struct net_eth_hdr)) {
   28520:	683b      	ldr	r3, [r7, #0]
   28522:	2b35      	cmp	r3, #53	; 0x35
   28524:	d801      	bhi.n	2852a <ecm_eth_size+0x1e>
		return 0;
   28526:	2300      	movs	r3, #0
   28528:	e03e      	b.n	285a8 <ecm_eth_size+0x9c>
	switch (ntohs(hdr->type)) {
   2852a:	697b      	ldr	r3, [r7, #20]
   2852c:	899b      	ldrh	r3, [r3, #12]
   2852e:	b29b      	uxth	r3, r3
   28530:	0a1b      	lsrs	r3, r3, #8
   28532:	b29b      	uxth	r3, r3
   28534:	b21a      	sxth	r2, r3
   28536:	697b      	ldr	r3, [r7, #20]
   28538:	899b      	ldrh	r3, [r3, #12]
   2853a:	b29b      	uxth	r3, r3
   2853c:	021b      	lsls	r3, r3, #8
   2853e:	b21b      	sxth	r3, r3
   28540:	4313      	orrs	r3, r2
   28542:	b21b      	sxth	r3, r3
   28544:	b29b      	uxth	r3, r3
   28546:	f640 0206 	movw	r2, #2054	; 0x806
   2854a:	4293      	cmp	r3, r2
   2854c:	d006      	beq.n	2855c <ecm_eth_size+0x50>
   2854e:	f248 62dd 	movw	r2, #34525	; 0x86dd
   28552:	4293      	cmp	r3, r2
   28554:	d011      	beq.n	2857a <ecm_eth_size+0x6e>
   28556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   2855a:	d11d      	bne.n	28598 <ecm_eth_size+0x8c>
		ip_len = ntohs(((struct net_ipv4_hdr *)ip_data)->len);
   2855c:	693b      	ldr	r3, [r7, #16]
   2855e:	885b      	ldrh	r3, [r3, #2]
   28560:	b29b      	uxth	r3, r3
   28562:	0a1b      	lsrs	r3, r3, #8
   28564:	b29b      	uxth	r3, r3
   28566:	b21a      	sxth	r2, r3
   28568:	693b      	ldr	r3, [r7, #16]
   2856a:	885b      	ldrh	r3, [r3, #2]
   2856c:	b29b      	uxth	r3, r3
   2856e:	021b      	lsls	r3, r3, #8
   28570:	b21b      	sxth	r3, r3
   28572:	4313      	orrs	r3, r2
   28574:	b21b      	sxth	r3, r3
   28576:	81bb      	strh	r3, [r7, #12]
		break;
   28578:	e014      	b.n	285a4 <ecm_eth_size+0x98>
		ip_len = ntohs(((struct net_ipv6_hdr *)ip_data)->len);
   2857a:	693b      	ldr	r3, [r7, #16]
   2857c:	889b      	ldrh	r3, [r3, #4]
   2857e:	b29b      	uxth	r3, r3
   28580:	0a1b      	lsrs	r3, r3, #8
   28582:	b29b      	uxth	r3, r3
   28584:	b21a      	sxth	r2, r3
   28586:	693b      	ldr	r3, [r7, #16]
   28588:	889b      	ldrh	r3, [r3, #4]
   2858a:	b29b      	uxth	r3, r3
   2858c:	021b      	lsls	r3, r3, #8
   2858e:	b21b      	sxth	r3, r3
   28590:	4313      	orrs	r3, r2
   28592:	b21b      	sxth	r3, r3
   28594:	81bb      	strh	r3, [r7, #12]
		break;
   28596:	e005      	b.n	285a4 <ecm_eth_size+0x98>
		LOG_DBG("Unknown hdr type 0x%04x", hdr->type);
   28598:	f7ff ff44 	bl	28424 <_is_user_context>
   2859c:	4603      	mov	r3, r0
   2859e:	73fb      	strb	r3, [r7, #15]
		return 0;
   285a0:	2300      	movs	r3, #0
   285a2:	e001      	b.n	285a8 <ecm_eth_size+0x9c>
	return sizeof(struct net_eth_hdr) + ip_len;
   285a4:	89bb      	ldrh	r3, [r7, #12]
   285a6:	330e      	adds	r3, #14
}
   285a8:	4618      	mov	r0, r3
   285aa:	3718      	adds	r7, #24
   285ac:	46bd      	mov	sp, r7
   285ae:	bd80      	pop	{r7, pc}

000285b0 <z_snode_next_peek>:
{
   285b0:	b480      	push	{r7}
   285b2:	b083      	sub	sp, #12
   285b4:	af00      	add	r7, sp, #0
   285b6:	6078      	str	r0, [r7, #4]
	return node->next;
   285b8:	687b      	ldr	r3, [r7, #4]
   285ba:	681b      	ldr	r3, [r3, #0]
}
   285bc:	4618      	mov	r0, r3
   285be:	370c      	adds	r7, #12
   285c0:	46bd      	mov	sp, r7
   285c2:	bc80      	pop	{r7}
   285c4:	4770      	bx	lr

000285c6 <z_snode_next_set>:
{
   285c6:	b480      	push	{r7}
   285c8:	b083      	sub	sp, #12
   285ca:	af00      	add	r7, sp, #0
   285cc:	6078      	str	r0, [r7, #4]
   285ce:	6039      	str	r1, [r7, #0]
	parent->next = child;
   285d0:	687b      	ldr	r3, [r7, #4]
   285d2:	683a      	ldr	r2, [r7, #0]
   285d4:	601a      	str	r2, [r3, #0]
}
   285d6:	bf00      	nop
   285d8:	370c      	adds	r7, #12
   285da:	46bd      	mov	sp, r7
   285dc:	bc80      	pop	{r7}
   285de:	4770      	bx	lr

000285e0 <z_slist_head_set>:
{
   285e0:	b480      	push	{r7}
   285e2:	b083      	sub	sp, #12
   285e4:	af00      	add	r7, sp, #0
   285e6:	6078      	str	r0, [r7, #4]
   285e8:	6039      	str	r1, [r7, #0]
	list->head = node;
   285ea:	687b      	ldr	r3, [r7, #4]
   285ec:	683a      	ldr	r2, [r7, #0]
   285ee:	601a      	str	r2, [r3, #0]
}
   285f0:	bf00      	nop
   285f2:	370c      	adds	r7, #12
   285f4:	46bd      	mov	sp, r7
   285f6:	bc80      	pop	{r7}
   285f8:	4770      	bx	lr

000285fa <z_slist_tail_set>:
{
   285fa:	b480      	push	{r7}
   285fc:	b083      	sub	sp, #12
   285fe:	af00      	add	r7, sp, #0
   28600:	6078      	str	r0, [r7, #4]
   28602:	6039      	str	r1, [r7, #0]
	list->tail = node;
   28604:	687b      	ldr	r3, [r7, #4]
   28606:	683a      	ldr	r2, [r7, #0]
   28608:	605a      	str	r2, [r3, #4]
}
   2860a:	bf00      	nop
   2860c:	370c      	adds	r7, #12
   2860e:	46bd      	mov	sp, r7
   28610:	bc80      	pop	{r7}
   28612:	4770      	bx	lr

00028614 <sys_slist_peek_head>:
{
   28614:	b480      	push	{r7}
   28616:	b083      	sub	sp, #12
   28618:	af00      	add	r7, sp, #0
   2861a:	6078      	str	r0, [r7, #4]
	return list->head;
   2861c:	687b      	ldr	r3, [r7, #4]
   2861e:	681b      	ldr	r3, [r3, #0]
}
   28620:	4618      	mov	r0, r3
   28622:	370c      	adds	r7, #12
   28624:	46bd      	mov	sp, r7
   28626:	bc80      	pop	{r7}
   28628:	4770      	bx	lr

0002862a <sys_slist_peek_tail>:
{
   2862a:	b480      	push	{r7}
   2862c:	b083      	sub	sp, #12
   2862e:	af00      	add	r7, sp, #0
   28630:	6078      	str	r0, [r7, #4]
	return list->tail;
   28632:	687b      	ldr	r3, [r7, #4]
   28634:	685b      	ldr	r3, [r3, #4]
}
   28636:	4618      	mov	r0, r3
   28638:	370c      	adds	r7, #12
   2863a:	46bd      	mov	sp, r7
   2863c:	bc80      	pop	{r7}
   2863e:	4770      	bx	lr

00028640 <sys_slist_is_empty>:
Z_GENLIST_IS_EMPTY(slist)
   28640:	b580      	push	{r7, lr}
   28642:	b082      	sub	sp, #8
   28644:	af00      	add	r7, sp, #0
   28646:	6078      	str	r0, [r7, #4]
   28648:	6878      	ldr	r0, [r7, #4]
   2864a:	f7ff ffe3 	bl	28614 <sys_slist_peek_head>
   2864e:	4603      	mov	r3, r0
   28650:	2b00      	cmp	r3, #0
   28652:	bf0c      	ite	eq
   28654:	2301      	moveq	r3, #1
   28656:	2300      	movne	r3, #0
   28658:	b2db      	uxtb	r3, r3
   2865a:	4618      	mov	r0, r3
   2865c:	3708      	adds	r7, #8
   2865e:	46bd      	mov	sp, r7
   28660:	bd80      	pop	{r7, pc}

00028662 <sys_slist_peek_next_no_check>:
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   28662:	b580      	push	{r7, lr}
   28664:	b082      	sub	sp, #8
   28666:	af00      	add	r7, sp, #0
   28668:	6078      	str	r0, [r7, #4]
   2866a:	6878      	ldr	r0, [r7, #4]
   2866c:	f7ff ffa0 	bl	285b0 <z_snode_next_peek>
   28670:	4603      	mov	r3, r0
   28672:	4618      	mov	r0, r3
   28674:	3708      	adds	r7, #8
   28676:	46bd      	mov	sp, r7
   28678:	bd80      	pop	{r7, pc}

0002867a <sys_slist_peek_next>:
Z_GENLIST_PEEK_NEXT(slist, snode)
   2867a:	b580      	push	{r7, lr}
   2867c:	b082      	sub	sp, #8
   2867e:	af00      	add	r7, sp, #0
   28680:	6078      	str	r0, [r7, #4]
   28682:	687b      	ldr	r3, [r7, #4]
   28684:	2b00      	cmp	r3, #0
   28686:	d004      	beq.n	28692 <sys_slist_peek_next+0x18>
   28688:	6878      	ldr	r0, [r7, #4]
   2868a:	f7ff ffea 	bl	28662 <sys_slist_peek_next_no_check>
   2868e:	4603      	mov	r3, r0
   28690:	e000      	b.n	28694 <sys_slist_peek_next+0x1a>
   28692:	2300      	movs	r3, #0
   28694:	4618      	mov	r0, r3
   28696:	3708      	adds	r7, #8
   28698:	46bd      	mov	sp, r7
   2869a:	bd80      	pop	{r7, pc}

0002869c <sys_slist_prepend>:
Z_GENLIST_PREPEND(slist, snode)
   2869c:	b580      	push	{r7, lr}
   2869e:	b082      	sub	sp, #8
   286a0:	af00      	add	r7, sp, #0
   286a2:	6078      	str	r0, [r7, #4]
   286a4:	6039      	str	r1, [r7, #0]
   286a6:	6878      	ldr	r0, [r7, #4]
   286a8:	f7ff ffb4 	bl	28614 <sys_slist_peek_head>
   286ac:	4603      	mov	r3, r0
   286ae:	4619      	mov	r1, r3
   286b0:	6838      	ldr	r0, [r7, #0]
   286b2:	f7ff ff88 	bl	285c6 <z_snode_next_set>
   286b6:	6839      	ldr	r1, [r7, #0]
   286b8:	6878      	ldr	r0, [r7, #4]
   286ba:	f7ff ff91 	bl	285e0 <z_slist_head_set>
   286be:	6878      	ldr	r0, [r7, #4]
   286c0:	f7ff ffb3 	bl	2862a <sys_slist_peek_tail>
   286c4:	4603      	mov	r3, r0
   286c6:	2b00      	cmp	r3, #0
   286c8:	d107      	bne.n	286da <sys_slist_prepend+0x3e>
   286ca:	6878      	ldr	r0, [r7, #4]
   286cc:	f7ff ffa2 	bl	28614 <sys_slist_peek_head>
   286d0:	4603      	mov	r3, r0
   286d2:	4619      	mov	r1, r3
   286d4:	6878      	ldr	r0, [r7, #4]
   286d6:	f7ff ff90 	bl	285fa <z_slist_tail_set>
   286da:	bf00      	nop
   286dc:	3708      	adds	r7, #8
   286de:	46bd      	mov	sp, r7
   286e0:	bd80      	pop	{r7, pc}

000286e2 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   286e2:	b580      	push	{r7, lr}
   286e4:	b084      	sub	sp, #16
   286e6:	af00      	add	r7, sp, #0
   286e8:	60f8      	str	r0, [r7, #12]
   286ea:	60b9      	str	r1, [r7, #8]
   286ec:	607a      	str	r2, [r7, #4]
   286ee:	68bb      	ldr	r3, [r7, #8]
   286f0:	2b00      	cmp	r3, #0
   286f2:	d117      	bne.n	28724 <sys_slist_remove+0x42>
   286f4:	6878      	ldr	r0, [r7, #4]
   286f6:	f7ff ff5b 	bl	285b0 <z_snode_next_peek>
   286fa:	4603      	mov	r3, r0
   286fc:	4619      	mov	r1, r3
   286fe:	68f8      	ldr	r0, [r7, #12]
   28700:	f7ff ff6e 	bl	285e0 <z_slist_head_set>
   28704:	68f8      	ldr	r0, [r7, #12]
   28706:	f7ff ff90 	bl	2862a <sys_slist_peek_tail>
   2870a:	4602      	mov	r2, r0
   2870c:	687b      	ldr	r3, [r7, #4]
   2870e:	4293      	cmp	r3, r2
   28710:	d11b      	bne.n	2874a <sys_slist_remove+0x68>
   28712:	68f8      	ldr	r0, [r7, #12]
   28714:	f7ff ff7e 	bl	28614 <sys_slist_peek_head>
   28718:	4603      	mov	r3, r0
   2871a:	4619      	mov	r1, r3
   2871c:	68f8      	ldr	r0, [r7, #12]
   2871e:	f7ff ff6c 	bl	285fa <z_slist_tail_set>
   28722:	e012      	b.n	2874a <sys_slist_remove+0x68>
   28724:	6878      	ldr	r0, [r7, #4]
   28726:	f7ff ff43 	bl	285b0 <z_snode_next_peek>
   2872a:	4603      	mov	r3, r0
   2872c:	4619      	mov	r1, r3
   2872e:	68b8      	ldr	r0, [r7, #8]
   28730:	f7ff ff49 	bl	285c6 <z_snode_next_set>
   28734:	68f8      	ldr	r0, [r7, #12]
   28736:	f7ff ff78 	bl	2862a <sys_slist_peek_tail>
   2873a:	4602      	mov	r2, r0
   2873c:	687b      	ldr	r3, [r7, #4]
   2873e:	4293      	cmp	r3, r2
   28740:	d103      	bne.n	2874a <sys_slist_remove+0x68>
   28742:	68b9      	ldr	r1, [r7, #8]
   28744:	68f8      	ldr	r0, [r7, #12]
   28746:	f7ff ff58 	bl	285fa <z_slist_tail_set>
   2874a:	2100      	movs	r1, #0
   2874c:	6878      	ldr	r0, [r7, #4]
   2874e:	f7ff ff3a 	bl	285c6 <z_snode_next_set>
   28752:	bf00      	nop
   28754:	3710      	adds	r7, #16
   28756:	46bd      	mov	sp, r7
   28758:	bd80      	pop	{r7, pc}

0002875a <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2875a:	b580      	push	{r7, lr}
   2875c:	b084      	sub	sp, #16
   2875e:	af00      	add	r7, sp, #0
   28760:	6078      	str	r0, [r7, #4]
   28762:	6039      	str	r1, [r7, #0]
   28764:	2300      	movs	r3, #0
   28766:	60fb      	str	r3, [r7, #12]
   28768:	6878      	ldr	r0, [r7, #4]
   2876a:	f7ff ff53 	bl	28614 <sys_slist_peek_head>
   2876e:	60b8      	str	r0, [r7, #8]
   28770:	e010      	b.n	28794 <sys_slist_find_and_remove+0x3a>
   28772:	68ba      	ldr	r2, [r7, #8]
   28774:	683b      	ldr	r3, [r7, #0]
   28776:	429a      	cmp	r2, r3
   28778:	d106      	bne.n	28788 <sys_slist_find_and_remove+0x2e>
   2877a:	683a      	ldr	r2, [r7, #0]
   2877c:	68f9      	ldr	r1, [r7, #12]
   2877e:	6878      	ldr	r0, [r7, #4]
   28780:	f7ff ffaf 	bl	286e2 <sys_slist_remove>
   28784:	2301      	movs	r3, #1
   28786:	e009      	b.n	2879c <sys_slist_find_and_remove+0x42>
   28788:	68bb      	ldr	r3, [r7, #8]
   2878a:	60fb      	str	r3, [r7, #12]
   2878c:	68b8      	ldr	r0, [r7, #8]
   2878e:	f7ff ff74 	bl	2867a <sys_slist_peek_next>
   28792:	60b8      	str	r0, [r7, #8]
   28794:	68bb      	ldr	r3, [r7, #8]
   28796:	2b00      	cmp	r3, #0
   28798:	d1eb      	bne.n	28772 <sys_slist_find_and_remove+0x18>
   2879a:	2300      	movs	r3, #0
   2879c:	4618      	mov	r0, r3
   2879e:	3710      	adds	r7, #16
   287a0:	46bd      	mov	sp, r7
   287a2:	bd80      	pop	{r7, pc}

000287a4 <nrf_gpio_cfg>:
    nrf_gpio_pin_dir_t   dir,
    nrf_gpio_pin_input_t input,
    nrf_gpio_pin_pull_t  pull,
    nrf_gpio_pin_drive_t drive,
    nrf_gpio_pin_sense_t sense)
{
   287a4:	b580      	push	{r7, lr}
   287a6:	b084      	sub	sp, #16
   287a8:	af00      	add	r7, sp, #0
   287aa:	6078      	str	r0, [r7, #4]
   287ac:	4608      	mov	r0, r1
   287ae:	4611      	mov	r1, r2
   287b0:	461a      	mov	r2, r3
   287b2:	4603      	mov	r3, r0
   287b4:	70fb      	strb	r3, [r7, #3]
   287b6:	460b      	mov	r3, r1
   287b8:	70bb      	strb	r3, [r7, #2]
   287ba:	4613      	mov	r3, r2
   287bc:	707b      	strb	r3, [r7, #1]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   287be:	1d3b      	adds	r3, r7, #4
   287c0:	4618      	mov	r0, r3
   287c2:	f7ec fea9 	bl	15518 <nrf_gpio_pin_port_decode>
   287c6:	60f8      	str	r0, [r7, #12]

    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   287c8:	78fa      	ldrb	r2, [r7, #3]
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   287ca:	78bb      	ldrb	r3, [r7, #2]
   287cc:	005b      	lsls	r3, r3, #1
   287ce:	431a      	orrs	r2, r3
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
   287d0:	787b      	ldrb	r3, [r7, #1]
   287d2:	009b      	lsls	r3, r3, #2
   287d4:	431a      	orrs	r2, r3
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   287d6:	7e3b      	ldrb	r3, [r7, #24]
   287d8:	021b      	lsls	r3, r3, #8
   287da:	ea42 0103 	orr.w	r1, r2, r3
                               | ((uint32_t)sense << GPIO_PIN_CNF_SENSE_Pos);
   287de:	7f3b      	ldrb	r3, [r7, #28]
   287e0:	041b      	lsls	r3, r3, #16
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   287e2:	687a      	ldr	r2, [r7, #4]
                               | ((uint32_t)sense << GPIO_PIN_CNF_SENSE_Pos);
   287e4:	4319      	orrs	r1, r3
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   287e6:	68fb      	ldr	r3, [r7, #12]
   287e8:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   287ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   287f0:	bf00      	nop
   287f2:	3710      	adds	r7, #16
   287f4:	46bd      	mov	sp, r7
   287f6:	bd80      	pop	{r7, pc}

000287f8 <nrf_gpio_cfg_sense_set>:
        sense_config);
}


__STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t pin_number, nrf_gpio_pin_sense_t sense_config)
{
   287f8:	b580      	push	{r7, lr}
   287fa:	b084      	sub	sp, #16
   287fc:	af00      	add	r7, sp, #0
   287fe:	6078      	str	r0, [r7, #4]
   28800:	460b      	mov	r3, r1
   28802:	70fb      	strb	r3, [r7, #3]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28804:	1d3b      	adds	r3, r7, #4
   28806:	4618      	mov	r0, r3
   28808:	f7ec fe86 	bl	15518 <nrf_gpio_pin_port_decode>
   2880c:	60f8      	str	r0, [r7, #12]

    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
   2880e:	687a      	ldr	r2, [r7, #4]
   28810:	68fb      	ldr	r3, [r7, #12]
   28812:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   28816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   2881a:	687a      	ldr	r2, [r7, #4]
   2881c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
   28820:	68fb      	ldr	r3, [r7, #12]
   28822:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   28826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   2882a:	687a      	ldr	r2, [r7, #4]
   2882c:	68fb      	ldr	r3, [r7, #12]
   2882e:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   28832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   28836:	78fa      	ldrb	r2, [r7, #3]
   28838:	0412      	lsls	r2, r2, #16
   2883a:	4611      	mov	r1, r2
   2883c:	687a      	ldr	r2, [r7, #4]
   2883e:	4319      	orrs	r1, r3
   28840:	68fb      	ldr	r3, [r7, #12]
   28842:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   28846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   2884a:	bf00      	nop
   2884c:	3710      	adds	r7, #16
   2884e:	46bd      	mov	sp, r7
   28850:	bd80      	pop	{r7, pc}

00028852 <nrf_gpio_port_dir_read>:
    p_reg->DIR = value;
}


__STATIC_INLINE uint32_t nrf_gpio_port_dir_read(NRF_GPIO_Type const * p_reg)
{
   28852:	b480      	push	{r7}
   28854:	b083      	sub	sp, #12
   28856:	af00      	add	r7, sp, #0
   28858:	6078      	str	r0, [r7, #4]
    return p_reg->DIR;
   2885a:	687b      	ldr	r3, [r7, #4]
   2885c:	f8d3 3514 	ldr.w	r3, [r3, #1300]	; 0x514
}
   28860:	4618      	mov	r0, r3
   28862:	370c      	adds	r7, #12
   28864:	46bd      	mov	sp, r7
   28866:	bc80      	pop	{r7}
   28868:	4770      	bx	lr

0002886a <nrf_gpio_port_in_read>:


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
   2886a:	b480      	push	{r7}
   2886c:	b083      	sub	sp, #12
   2886e:	af00      	add	r7, sp, #0
   28870:	6078      	str	r0, [r7, #4]
    return p_reg->IN;
   28872:	687b      	ldr	r3, [r7, #4]
   28874:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
}
   28878:	4618      	mov	r0, r3
   2887a:	370c      	adds	r7, #12
   2887c:	46bd      	mov	sp, r7
   2887e:	bc80      	pop	{r7}
   28880:	4770      	bx	lr

00028882 <nrf_gpio_port_out_read>:


__STATIC_INLINE uint32_t nrf_gpio_port_out_read(NRF_GPIO_Type const * p_reg)
{
   28882:	b480      	push	{r7}
   28884:	b083      	sub	sp, #12
   28886:	af00      	add	r7, sp, #0
   28888:	6078      	str	r0, [r7, #4]
    return p_reg->OUT;
   2888a:	687b      	ldr	r3, [r7, #4]
   2888c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
}
   28890:	4618      	mov	r0, r3
   28892:	370c      	adds	r7, #12
   28894:	46bd      	mov	sp, r7
   28896:	bc80      	pop	{r7}
   28898:	4770      	bx	lr

0002889a <nrf_gpio_port_out_write>:


__STATIC_INLINE void nrf_gpio_port_out_write(NRF_GPIO_Type * p_reg, uint32_t value)
{
   2889a:	b480      	push	{r7}
   2889c:	b083      	sub	sp, #12
   2889e:	af00      	add	r7, sp, #0
   288a0:	6078      	str	r0, [r7, #4]
   288a2:	6039      	str	r1, [r7, #0]
    p_reg->OUT = value;
   288a4:	687b      	ldr	r3, [r7, #4]
   288a6:	683a      	ldr	r2, [r7, #0]
   288a8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   288ac:	bf00      	nop
   288ae:	370c      	adds	r7, #12
   288b0:	46bd      	mov	sp, r7
   288b2:	bc80      	pop	{r7}
   288b4:	4770      	bx	lr

000288b6 <nrf_gpio_port_out_set>:


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
   288b6:	b480      	push	{r7}
   288b8:	b083      	sub	sp, #12
   288ba:	af00      	add	r7, sp, #0
   288bc:	6078      	str	r0, [r7, #4]
   288be:	6039      	str	r1, [r7, #0]
    p_reg->OUTSET = set_mask;
   288c0:	687b      	ldr	r3, [r7, #4]
   288c2:	683a      	ldr	r2, [r7, #0]
   288c4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
   288c8:	bf00      	nop
   288ca:	370c      	adds	r7, #12
   288cc:	46bd      	mov	sp, r7
   288ce:	bc80      	pop	{r7}
   288d0:	4770      	bx	lr

000288d2 <nrf_gpio_port_out_clear>:


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
   288d2:	b480      	push	{r7}
   288d4:	b083      	sub	sp, #12
   288d6:	af00      	add	r7, sp, #0
   288d8:	6078      	str	r0, [r7, #4]
   288da:	6039      	str	r1, [r7, #0]
    p_reg->OUTCLR = clr_mask;
   288dc:	687b      	ldr	r3, [r7, #4]
   288de:	683a      	ldr	r2, [r7, #0]
   288e0:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
   288e4:	bf00      	nop
   288e6:	370c      	adds	r7, #12
   288e8:	46bd      	mov	sp, r7
   288ea:	bc80      	pop	{r7}
   288ec:	4770      	bx	lr

000288ee <nrf_gpiote_event_is_set>:
{
   288ee:	b580      	push	{r7, lr}
   288f0:	b082      	sub	sp, #8
   288f2:	af00      	add	r7, sp, #0
   288f4:	4603      	mov	r3, r0
   288f6:	80fb      	strh	r3, [r7, #6]
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
   288f8:	88fb      	ldrh	r3, [r7, #6]
   288fa:	4618      	mov	r0, r3
   288fc:	f000 f824 	bl	28948 <nrf_gpiote_event_addr_get>
   28900:	4603      	mov	r3, r0
   28902:	681b      	ldr	r3, [r3, #0]
   28904:	2b01      	cmp	r3, #1
   28906:	bf0c      	ite	eq
   28908:	2301      	moveq	r3, #1
   2890a:	2300      	movne	r3, #0
   2890c:	b2db      	uxtb	r3, r3
}
   2890e:	4618      	mov	r0, r3
   28910:	3708      	adds	r7, #8
   28912:	46bd      	mov	sp, r7
   28914:	bd80      	pop	{r7, pc}

00028916 <nrf_gpiote_event_clear>:
{
   28916:	b580      	push	{r7, lr}
   28918:	b084      	sub	sp, #16
   2891a:	af00      	add	r7, sp, #0
   2891c:	4603      	mov	r3, r0
   2891e:	80fb      	strh	r3, [r7, #6]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   28920:	88fb      	ldrh	r3, [r7, #6]
   28922:	4618      	mov	r0, r3
   28924:	f000 f810 	bl	28948 <nrf_gpiote_event_addr_get>
   28928:	4603      	mov	r3, r0
   2892a:	461a      	mov	r2, r3
   2892c:	2300      	movs	r3, #0
   2892e:	6013      	str	r3, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   28930:	88fb      	ldrh	r3, [r7, #6]
   28932:	4618      	mov	r0, r3
   28934:	f000 f808 	bl	28948 <nrf_gpiote_event_addr_get>
   28938:	4603      	mov	r3, r0
   2893a:	681b      	ldr	r3, [r3, #0]
   2893c:	60fb      	str	r3, [r7, #12]
    (void)dummy;
   2893e:	68fb      	ldr	r3, [r7, #12]
}
   28940:	bf00      	nop
   28942:	3710      	adds	r7, #16
   28944:	46bd      	mov	sp, r7
   28946:	bd80      	pop	{r7, pc}

00028948 <nrf_gpiote_event_addr_get>:
{
   28948:	b480      	push	{r7}
   2894a:	b083      	sub	sp, #12
   2894c:	af00      	add	r7, sp, #0
   2894e:	4603      	mov	r3, r0
   28950:	80fb      	strh	r3, [r7, #6]
    return ((uint32_t)NRF_GPIOTE + event);
   28952:	88fb      	ldrh	r3, [r7, #6]
   28954:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   28958:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
}
   2895c:	4618      	mov	r0, r3
   2895e:	370c      	adds	r7, #12
   28960:	46bd      	mov	sp, r7
   28962:	bc80      	pop	{r7}
   28964:	4770      	bx	lr

00028966 <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
   28966:	b580      	push	{r7, lr}
   28968:	b084      	sub	sp, #16
   2896a:	af00      	add	r7, sp, #0
   2896c:	60f8      	str	r0, [r7, #12]
   2896e:	60b9      	str	r1, [r7, #8]
   28970:	4613      	mov	r3, r2
   28972:	71fb      	strb	r3, [r7, #7]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   28974:	68f8      	ldr	r0, [r7, #12]
   28976:	f7ff fe63 	bl	28640 <sys_slist_is_empty>
   2897a:	4603      	mov	r3, r0
   2897c:	f083 0301 	eor.w	r3, r3, #1
   28980:	b2db      	uxtb	r3, r3
   28982:	2b00      	cmp	r3, #0
   28984:	d013      	beq.n	289ae <gpio_manage_callback+0x48>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   28986:	68bb      	ldr	r3, [r7, #8]
   28988:	4619      	mov	r1, r3
   2898a:	68f8      	ldr	r0, [r7, #12]
   2898c:	f7ff fee5 	bl	2875a <sys_slist_find_and_remove>
   28990:	4603      	mov	r3, r0
   28992:	f083 0301 	eor.w	r3, r3, #1
   28996:	b2db      	uxtb	r3, r3
   28998:	2b00      	cmp	r3, #0
   2899a:	d008      	beq.n	289ae <gpio_manage_callback+0x48>
			if (!set) {
   2899c:	79fb      	ldrb	r3, [r7, #7]
   2899e:	f083 0301 	eor.w	r3, r3, #1
   289a2:	b2db      	uxtb	r3, r3
   289a4:	2b00      	cmp	r3, #0
   289a6:	d002      	beq.n	289ae <gpio_manage_callback+0x48>
				return -EINVAL;
   289a8:	f06f 0315 	mvn.w	r3, #21
   289ac:	e008      	b.n	289c0 <gpio_manage_callback+0x5a>
			}
		}
	}

	if (set) {
   289ae:	79fb      	ldrb	r3, [r7, #7]
   289b0:	2b00      	cmp	r3, #0
   289b2:	d004      	beq.n	289be <gpio_manage_callback+0x58>
		sys_slist_prepend(callbacks, &callback->node);
   289b4:	68bb      	ldr	r3, [r7, #8]
   289b6:	4619      	mov	r1, r3
   289b8:	68f8      	ldr	r0, [r7, #12]
   289ba:	f7ff fe6f 	bl	2869c <sys_slist_prepend>
	}

	return 0;
   289be:	2300      	movs	r3, #0
}
   289c0:	4618      	mov	r0, r3
   289c2:	3710      	adds	r7, #16
   289c4:	46bd      	mov	sp, r7
   289c6:	bd80      	pop	{r7, pc}

000289c8 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					struct device *port,
					u32_t pins)
{
   289c8:	b580      	push	{r7, lr}
   289ca:	b086      	sub	sp, #24
   289cc:	af00      	add	r7, sp, #0
   289ce:	60f8      	str	r0, [r7, #12]
   289d0:	60b9      	str	r1, [r7, #8]
   289d2:	607a      	str	r2, [r7, #4]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   289d4:	68f8      	ldr	r0, [r7, #12]
   289d6:	f7ff fe1d 	bl	28614 <sys_slist_peek_head>
   289da:	4603      	mov	r3, r0
   289dc:	2b00      	cmp	r3, #0
   289de:	d004      	beq.n	289ea <gpio_fire_callbacks+0x22>
   289e0:	68f8      	ldr	r0, [r7, #12]
   289e2:	f7ff fe17 	bl	28614 <sys_slist_peek_head>
   289e6:	4603      	mov	r3, r0
   289e8:	e000      	b.n	289ec <gpio_fire_callbacks+0x24>
   289ea:	2300      	movs	r3, #0
   289ec:	617b      	str	r3, [r7, #20]
   289ee:	697b      	ldr	r3, [r7, #20]
   289f0:	2b00      	cmp	r3, #0
   289f2:	d00e      	beq.n	28a12 <gpio_fire_callbacks+0x4a>
   289f4:	697b      	ldr	r3, [r7, #20]
   289f6:	4618      	mov	r0, r3
   289f8:	f7ff fe3f 	bl	2867a <sys_slist_peek_next>
   289fc:	4603      	mov	r3, r0
   289fe:	2b00      	cmp	r3, #0
   28a00:	d005      	beq.n	28a0e <gpio_fire_callbacks+0x46>
   28a02:	697b      	ldr	r3, [r7, #20]
   28a04:	4618      	mov	r0, r3
   28a06:	f7ff fe38 	bl	2867a <sys_slist_peek_next>
   28a0a:	4603      	mov	r3, r0
   28a0c:	e002      	b.n	28a14 <gpio_fire_callbacks+0x4c>
   28a0e:	2300      	movs	r3, #0
   28a10:	e000      	b.n	28a14 <gpio_fire_callbacks+0x4c>
   28a12:	2300      	movs	r3, #0
   28a14:	613b      	str	r3, [r7, #16]
   28a16:	e021      	b.n	28a5c <gpio_fire_callbacks+0x94>
		if (cb->pin_mask & pins) {
   28a18:	697b      	ldr	r3, [r7, #20]
   28a1a:	689a      	ldr	r2, [r3, #8]
   28a1c:	687b      	ldr	r3, [r7, #4]
   28a1e:	4013      	ands	r3, r2
   28a20:	2b00      	cmp	r3, #0
   28a22:	d005      	beq.n	28a30 <gpio_fire_callbacks+0x68>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
   28a24:	697b      	ldr	r3, [r7, #20]
   28a26:	685b      	ldr	r3, [r3, #4]
   28a28:	687a      	ldr	r2, [r7, #4]
   28a2a:	6979      	ldr	r1, [r7, #20]
   28a2c:	68b8      	ldr	r0, [r7, #8]
   28a2e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   28a30:	693b      	ldr	r3, [r7, #16]
   28a32:	617b      	str	r3, [r7, #20]
   28a34:	697b      	ldr	r3, [r7, #20]
   28a36:	2b00      	cmp	r3, #0
   28a38:	d00e      	beq.n	28a58 <gpio_fire_callbacks+0x90>
   28a3a:	697b      	ldr	r3, [r7, #20]
   28a3c:	4618      	mov	r0, r3
   28a3e:	f7ff fe1c 	bl	2867a <sys_slist_peek_next>
   28a42:	4603      	mov	r3, r0
   28a44:	2b00      	cmp	r3, #0
   28a46:	d005      	beq.n	28a54 <gpio_fire_callbacks+0x8c>
   28a48:	697b      	ldr	r3, [r7, #20]
   28a4a:	4618      	mov	r0, r3
   28a4c:	f7ff fe15 	bl	2867a <sys_slist_peek_next>
   28a50:	4603      	mov	r3, r0
   28a52:	e002      	b.n	28a5a <gpio_fire_callbacks+0x92>
   28a54:	2300      	movs	r3, #0
   28a56:	e000      	b.n	28a5a <gpio_fire_callbacks+0x92>
   28a58:	2300      	movs	r3, #0
   28a5a:	613b      	str	r3, [r7, #16]
   28a5c:	697b      	ldr	r3, [r7, #20]
   28a5e:	2b00      	cmp	r3, #0
   28a60:	d1da      	bne.n	28a18 <gpio_fire_callbacks+0x50>
		}
	}
}
   28a62:	bf00      	nop
   28a64:	3718      	adds	r7, #24
   28a66:	46bd      	mov	sp, r7
   28a68:	bd80      	pop	{r7, pc}

00028a6a <get_port_data>:
{
   28a6a:	b480      	push	{r7}
   28a6c:	b083      	sub	sp, #12
   28a6e:	af00      	add	r7, sp, #0
   28a70:	6078      	str	r0, [r7, #4]
	return port->driver_data;
   28a72:	687b      	ldr	r3, [r7, #4]
   28a74:	689b      	ldr	r3, [r3, #8]
}
   28a76:	4618      	mov	r0, r3
   28a78:	370c      	adds	r7, #12
   28a7a:	46bd      	mov	sp, r7
   28a7c:	bc80      	pop	{r7}
   28a7e:	4770      	bx	lr

00028a80 <get_port_cfg>:
{
   28a80:	b480      	push	{r7}
   28a82:	b083      	sub	sp, #12
   28a84:	af00      	add	r7, sp, #0
   28a86:	6078      	str	r0, [r7, #4]
	return port->config->config_info;
   28a88:	687b      	ldr	r3, [r7, #4]
   28a8a:	681b      	ldr	r3, [r3, #0]
   28a8c:	689b      	ldr	r3, [r3, #8]
}
   28a8e:	4618      	mov	r0, r3
   28a90:	370c      	adds	r7, #12
   28a92:	46bd      	mov	sp, r7
   28a94:	bc80      	pop	{r7}
   28a96:	4770      	bx	lr

00028a98 <gpiote_channel_alloc>:
{
   28a98:	b580      	push	{r7, lr}
   28a9a:	b084      	sub	sp, #16
   28a9c:	af00      	add	r7, sp, #0
   28a9e:	6078      	str	r0, [r7, #4]
   28aa0:	460b      	mov	r3, r1
   28aa2:	70fb      	strb	r3, [r7, #3]
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   28aa4:	2300      	movs	r3, #0
   28aa6:	73fb      	strb	r3, [r7, #15]
   28aa8:	e028      	b.n	28afc <gpiote_channel_alloc+0x64>
		if (!nrf_gpiote_te_is_enabled(channel)) {
   28aaa:	7bfb      	ldrb	r3, [r7, #15]
   28aac:	4618      	mov	r0, r3
   28aae:	f7ec fe09 	bl	156c4 <nrf_gpiote_te_is_enabled>
   28ab2:	4603      	mov	r3, r0
   28ab4:	f083 0301 	eor.w	r3, r3, #1
   28ab8:	b2db      	uxtb	r3, r3
   28aba:	2b00      	cmp	r3, #0
   28abc:	d01b      	beq.n	28af6 <gpiote_channel_alloc+0x5e>
			nrf_gpiote_events_t evt =
   28abe:	7bfb      	ldrb	r3, [r7, #15]
   28ac0:	3340      	adds	r3, #64	; 0x40
   28ac2:	b29b      	uxth	r3, r3
   28ac4:	009b      	lsls	r3, r3, #2
   28ac6:	81bb      	strh	r3, [r7, #12]
			nrf_gpiote_event_configure(channel, abs_pin, polarity);
   28ac8:	7bfb      	ldrb	r3, [r7, #15]
   28aca:	78fa      	ldrb	r2, [r7, #3]
   28acc:	6879      	ldr	r1, [r7, #4]
   28ace:	4618      	mov	r0, r3
   28ad0:	f7ec fdb0 	bl	15634 <nrf_gpiote_event_configure>
			nrf_gpiote_event_clear(evt);
   28ad4:	89bb      	ldrh	r3, [r7, #12]
   28ad6:	4618      	mov	r0, r3
   28ad8:	f7ff ff1d 	bl	28916 <nrf_gpiote_event_clear>
			nrf_gpiote_event_enable(channel);
   28adc:	7bfb      	ldrb	r3, [r7, #15]
   28ade:	4618      	mov	r0, r3
   28ae0:	f7ec fd74 	bl	155cc <nrf_gpiote_event_enable>
			nrf_gpiote_int_enable(BIT(channel));
   28ae4:	7bfb      	ldrb	r3, [r7, #15]
   28ae6:	2201      	movs	r2, #1
   28ae8:	fa02 f303 	lsl.w	r3, r2, r3
   28aec:	4618      	mov	r0, r3
   28aee:	f7ec fd3d 	bl	1556c <nrf_gpiote_int_enable>
			return 0;
   28af2:	2300      	movs	r3, #0
   28af4:	e007      	b.n	28b06 <gpiote_channel_alloc+0x6e>
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   28af6:	7bfb      	ldrb	r3, [r7, #15]
   28af8:	3301      	adds	r3, #1
   28afa:	73fb      	strb	r3, [r7, #15]
   28afc:	7bfb      	ldrb	r3, [r7, #15]
   28afe:	2b07      	cmp	r3, #7
   28b00:	d9d3      	bls.n	28aaa <gpiote_channel_alloc+0x12>
	return -ENODEV;
   28b02:	f06f 0312 	mvn.w	r3, #18
}
   28b06:	4618      	mov	r0, r3
   28b08:	3710      	adds	r7, #16
   28b0a:	46bd      	mov	sp, r7
   28b0c:	bd80      	pop	{r7, pc}

00028b0e <gpiote_channel_free>:
{
   28b0e:	b580      	push	{r7, lr}
   28b10:	b084      	sub	sp, #16
   28b12:	af00      	add	r7, sp, #0
   28b14:	6078      	str	r0, [r7, #4]
	u32_t intenset = nrf_gpiote_int_is_enabled(NRF_GPIOTE_INT_IN_MASK);
   28b16:	20ff      	movs	r0, #255	; 0xff
   28b18:	f7ec fd48 	bl	155ac <nrf_gpiote_int_is_enabled>
   28b1c:	60b8      	str	r0, [r7, #8]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   28b1e:	2300      	movs	r3, #0
   28b20:	60fb      	str	r3, [r7, #12]
   28b22:	e01c      	b.n	28b5e <gpiote_channel_free+0x50>
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
   28b24:	68f8      	ldr	r0, [r7, #12]
   28b26:	f7ec fdb9 	bl	1569c <nrf_gpiote_event_pin_get>
   28b2a:	4602      	mov	r2, r0
   28b2c:	687b      	ldr	r3, [r7, #4]
   28b2e:	4293      	cmp	r3, r2
   28b30:	d112      	bne.n	28b58 <gpiote_channel_free+0x4a>
		    && (intenset & BIT(i))) {
   28b32:	68ba      	ldr	r2, [r7, #8]
   28b34:	68fb      	ldr	r3, [r7, #12]
   28b36:	fa22 f303 	lsr.w	r3, r2, r3
   28b3a:	f003 0301 	and.w	r3, r3, #1
   28b3e:	2b00      	cmp	r3, #0
   28b40:	d00a      	beq.n	28b58 <gpiote_channel_free+0x4a>
			nrf_gpiote_event_disable(i);
   28b42:	68f8      	ldr	r0, [r7, #12]
   28b44:	f7ec fd5c 	bl	15600 <nrf_gpiote_event_disable>
			nrf_gpiote_int_disable(BIT(i));
   28b48:	2201      	movs	r2, #1
   28b4a:	68fb      	ldr	r3, [r7, #12]
   28b4c:	fa02 f303 	lsl.w	r3, r2, r3
   28b50:	4618      	mov	r0, r3
   28b52:	f7ec fd1b 	bl	1558c <nrf_gpiote_int_disable>
			return;
   28b56:	e005      	b.n	28b64 <gpiote_channel_free+0x56>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   28b58:	68fb      	ldr	r3, [r7, #12]
   28b5a:	3301      	adds	r3, #1
   28b5c:	60fb      	str	r3, [r7, #12]
   28b5e:	68fb      	ldr	r3, [r7, #12]
   28b60:	2b07      	cmp	r3, #7
   28b62:	d9df      	bls.n	28b24 <gpiote_channel_free+0x16>
}
   28b64:	3710      	adds	r7, #16
   28b66:	46bd      	mov	sp, r7
   28b68:	bd80      	pop	{r7, pc}

00028b6a <sense_for_pin>:
{
   28b6a:	b480      	push	{r7}
   28b6c:	b083      	sub	sp, #12
   28b6e:	af00      	add	r7, sp, #0
   28b70:	6078      	str	r0, [r7, #4]
   28b72:	6039      	str	r1, [r7, #0]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   28b74:	687b      	ldr	r3, [r7, #4]
   28b76:	691a      	ldr	r2, [r3, #16]
   28b78:	687b      	ldr	r3, [r7, #4]
   28b7a:	69db      	ldr	r3, [r3, #28]
   28b7c:	405a      	eors	r2, r3
   28b7e:	683b      	ldr	r3, [r7, #0]
   28b80:	fa22 f303 	lsr.w	r3, r2, r3
   28b84:	f003 0301 	and.w	r3, r3, #1
   28b88:	2b00      	cmp	r3, #0
   28b8a:	d001      	beq.n	28b90 <sense_for_pin+0x26>
		return NRF_GPIO_PIN_SENSE_HIGH;
   28b8c:	2302      	movs	r3, #2
   28b8e:	e000      	b.n	28b92 <sense_for_pin+0x28>
	return NRF_GPIO_PIN_SENSE_LOW;
   28b90:	2303      	movs	r3, #3
}
   28b92:	4618      	mov	r0, r3
   28b94:	370c      	adds	r7, #12
   28b96:	46bd      	mov	sp, r7
   28b98:	bc80      	pop	{r7}
   28b9a:	4770      	bx	lr

00028b9c <gpiote_pin_int_cfg>:
{
   28b9c:	b580      	push	{r7, lr}
   28b9e:	b088      	sub	sp, #32
   28ba0:	af00      	add	r7, sp, #0
   28ba2:	6078      	str	r0, [r7, #4]
   28ba4:	6039      	str	r1, [r7, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
   28ba6:	6878      	ldr	r0, [r7, #4]
   28ba8:	f7ff ff5f 	bl	28a6a <get_port_data>
   28bac:	6178      	str	r0, [r7, #20]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   28bae:	6878      	ldr	r0, [r7, #4]
   28bb0:	f7ff ff66 	bl	28a80 <get_port_cfg>
   28bb4:	6138      	str	r0, [r7, #16]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   28bb6:	693b      	ldr	r3, [r7, #16]
   28bb8:	791b      	ldrb	r3, [r3, #4]
   28bba:	015b      	lsls	r3, r3, #5
   28bbc:	461a      	mov	r2, r3
   28bbe:	683b      	ldr	r3, [r7, #0]
   28bc0:	f003 031f 	and.w	r3, r3, #31
   28bc4:	4313      	orrs	r3, r2
   28bc6:	60fb      	str	r3, [r7, #12]
	int res = 0;
   28bc8:	2300      	movs	r3, #0
   28bca:	61fb      	str	r3, [r7, #28]
	gpiote_channel_free(abs_pin);
   28bcc:	68f8      	ldr	r0, [r7, #12]
   28bce:	f7ff ff9e 	bl	28b0e <gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   28bd2:	2100      	movs	r1, #0
   28bd4:	68f8      	ldr	r0, [r7, #12]
   28bd6:	f7ff fe0f 	bl	287f8 <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   28bda:	697b      	ldr	r3, [r7, #20]
   28bdc:	689a      	ldr	r2, [r3, #8]
   28bde:	683b      	ldr	r3, [r7, #0]
   28be0:	fa22 f303 	lsr.w	r3, r2, r3
   28be4:	f003 0301 	and.w	r3, r3, #1
   28be8:	2b00      	cmp	r3, #0
   28bea:	d050      	beq.n	28c8e <gpiote_pin_int_cfg+0xf2>
   28bec:	697b      	ldr	r3, [r7, #20]
   28bee:	68da      	ldr	r2, [r3, #12]
   28bf0:	683b      	ldr	r3, [r7, #0]
   28bf2:	fa22 f303 	lsr.w	r3, r2, r3
   28bf6:	f003 0301 	and.w	r3, r3, #1
   28bfa:	2b00      	cmp	r3, #0
   28bfc:	d047      	beq.n	28c8e <gpiote_pin_int_cfg+0xf2>
		if (data->trig_edge & BIT(pin)) {
   28bfe:	697b      	ldr	r3, [r7, #20]
   28c00:	695a      	ldr	r2, [r3, #20]
   28c02:	683b      	ldr	r3, [r7, #0]
   28c04:	fa22 f303 	lsr.w	r3, r2, r3
   28c08:	f003 0301 	and.w	r3, r3, #1
   28c0c:	2b00      	cmp	r3, #0
   28c0e:	d033      	beq.n	28c78 <gpiote_pin_int_cfg+0xdc>
			if (data->double_edge & BIT(pin)) {
   28c10:	697b      	ldr	r3, [r7, #20]
   28c12:	699a      	ldr	r2, [r3, #24]
   28c14:	683b      	ldr	r3, [r7, #0]
   28c16:	fa22 f303 	lsr.w	r3, r2, r3
   28c1a:	f003 0301 	and.w	r3, r3, #1
   28c1e:	2b00      	cmp	r3, #0
   28c20:	d002      	beq.n	28c28 <gpiote_pin_int_cfg+0x8c>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   28c22:	2303      	movs	r3, #3
   28c24:	76fb      	strb	r3, [r7, #27]
   28c26:	e020      	b.n	28c6a <gpiote_pin_int_cfg+0xce>
			} else if (((data->active_level & BIT(pin)) != 0U)
   28c28:	697b      	ldr	r3, [r7, #20]
   28c2a:	691a      	ldr	r2, [r3, #16]
   28c2c:	683b      	ldr	r3, [r7, #0]
   28c2e:	fa22 f303 	lsr.w	r3, r2, r3
   28c32:	f003 0301 	and.w	r3, r3, #1
   28c36:	2b00      	cmp	r3, #0
   28c38:	bf14      	ite	ne
   28c3a:	2301      	movne	r3, #1
   28c3c:	2300      	moveq	r3, #0
   28c3e:	b2da      	uxtb	r2, r3
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   28c40:	697b      	ldr	r3, [r7, #20]
   28c42:	69d9      	ldr	r1, [r3, #28]
   28c44:	683b      	ldr	r3, [r7, #0]
   28c46:	fa21 f303 	lsr.w	r3, r1, r3
   28c4a:	f003 0301 	and.w	r3, r3, #1
			} else if (((data->active_level & BIT(pin)) != 0U)
   28c4e:	2b00      	cmp	r3, #0
   28c50:	bf14      	ite	ne
   28c52:	2301      	movne	r3, #1
   28c54:	2300      	moveq	r3, #0
   28c56:	b2db      	uxtb	r3, r3
   28c58:	4053      	eors	r3, r2
   28c5a:	b2db      	uxtb	r3, r3
   28c5c:	2b00      	cmp	r3, #0
   28c5e:	d002      	beq.n	28c66 <gpiote_pin_int_cfg+0xca>
				pol = NRF_GPIOTE_POLARITY_LOTOHI;
   28c60:	2301      	movs	r3, #1
   28c62:	76fb      	strb	r3, [r7, #27]
   28c64:	e001      	b.n	28c6a <gpiote_pin_int_cfg+0xce>
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   28c66:	2302      	movs	r3, #2
   28c68:	76fb      	strb	r3, [r7, #27]
			res = gpiote_channel_alloc(abs_pin, pol);
   28c6a:	7efb      	ldrb	r3, [r7, #27]
   28c6c:	4619      	mov	r1, r3
   28c6e:	68f8      	ldr	r0, [r7, #12]
   28c70:	f7ff ff12 	bl	28a98 <gpiote_channel_alloc>
   28c74:	61f8      	str	r0, [r7, #28]
   28c76:	e00a      	b.n	28c8e <gpiote_pin_int_cfg+0xf2>
			u32_t sense = sense_for_pin(data, pin);
   28c78:	6839      	ldr	r1, [r7, #0]
   28c7a:	6978      	ldr	r0, [r7, #20]
   28c7c:	f7ff ff75 	bl	28b6a <sense_for_pin>
   28c80:	60b8      	str	r0, [r7, #8]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   28c82:	68bb      	ldr	r3, [r7, #8]
   28c84:	b2db      	uxtb	r3, r3
   28c86:	4619      	mov	r1, r3
   28c88:	68f8      	ldr	r0, [r7, #12]
   28c8a:	f7ff fdb5 	bl	287f8 <nrf_gpio_cfg_sense_set>
	return res;
   28c8e:	69fb      	ldr	r3, [r7, #28]
}
   28c90:	4618      	mov	r0, r3
   28c92:	3720      	adds	r7, #32
   28c94:	46bd      	mov	sp, r7
   28c96:	bd80      	pop	{r7, pc}

00028c98 <gpio_nrfx_config>:
{
   28c98:	b590      	push	{r4, r7, lr}
   28c9a:	b08d      	sub	sp, #52	; 0x34
   28c9c:	af02      	add	r7, sp, #8
   28c9e:	60f8      	str	r0, [r7, #12]
   28ca0:	60b9      	str	r1, [r7, #8]
   28ca2:	607a      	str	r2, [r7, #4]
   28ca4:	603b      	str	r3, [r7, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
   28ca6:	68f8      	ldr	r0, [r7, #12]
   28ca8:	f7ff fedf 	bl	28a6a <get_port_data>
   28cac:	61f8      	str	r0, [r7, #28]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   28cae:	683b      	ldr	r3, [r7, #0]
   28cb0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   28cb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   28cb8:	d020      	beq.n	28cfc <gpio_nrfx_config+0x64>
   28cba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   28cbe:	dc08      	bgt.n	28cd2 <gpio_nrfx_config+0x3a>
   28cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   28cc4:	d022      	beq.n	28d0c <gpio_nrfx_config+0x74>
   28cc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
   28cca:	d02b      	beq.n	28d24 <gpio_nrfx_config+0x8c>
   28ccc:	2b00      	cmp	r3, #0
   28cce:	d011      	beq.n	28cf4 <gpio_nrfx_config+0x5c>
   28cd0:	e030      	b.n	28d34 <gpio_nrfx_config+0x9c>
   28cd2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   28cd6:	d029      	beq.n	28d2c <gpio_nrfx_config+0x94>
   28cd8:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   28cdc:	dc03      	bgt.n	28ce6 <gpio_nrfx_config+0x4e>
   28cde:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
   28ce2:	d017      	beq.n	28d14 <gpio_nrfx_config+0x7c>
   28ce4:	e026      	b.n	28d34 <gpio_nrfx_config+0x9c>
   28ce6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
   28cea:	d00b      	beq.n	28d04 <gpio_nrfx_config+0x6c>
   28cec:	f5b3 4f50 	cmp.w	r3, #53248	; 0xd000
   28cf0:	d014      	beq.n	28d1c <gpio_nrfx_config+0x84>
   28cf2:	e01f      	b.n	28d34 <gpio_nrfx_config+0x9c>
		drive = NRF_GPIO_PIN_S0S1;
   28cf4:	2300      	movs	r3, #0
   28cf6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		break;
   28cfa:	e01e      	b.n	28d3a <gpio_nrfx_config+0xa2>
		drive = NRF_GPIO_PIN_S0H1;
   28cfc:	2302      	movs	r3, #2
   28cfe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		break;
   28d02:	e01a      	b.n	28d3a <gpio_nrfx_config+0xa2>
		drive = NRF_GPIO_PIN_S0D1;
   28d04:	2306      	movs	r3, #6
   28d06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		break;
   28d0a:	e016      	b.n	28d3a <gpio_nrfx_config+0xa2>
		drive = NRF_GPIO_PIN_H0S1;
   28d0c:	2301      	movs	r3, #1
   28d0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		break;
   28d12:	e012      	b.n	28d3a <gpio_nrfx_config+0xa2>
		drive = NRF_GPIO_PIN_H0H1;
   28d14:	2303      	movs	r3, #3
   28d16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		break;
   28d1a:	e00e      	b.n	28d3a <gpio_nrfx_config+0xa2>
		drive = NRF_GPIO_PIN_H0D1;
   28d1c:	2307      	movs	r3, #7
   28d1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		break;
   28d22:	e00a      	b.n	28d3a <gpio_nrfx_config+0xa2>
		drive = NRF_GPIO_PIN_D0S1;
   28d24:	2304      	movs	r3, #4
   28d26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		break;
   28d2a:	e006      	b.n	28d3a <gpio_nrfx_config+0xa2>
		drive = NRF_GPIO_PIN_D0H1;
   28d2c:	2305      	movs	r3, #5
   28d2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		break;
   28d32:	e002      	b.n	28d3a <gpio_nrfx_config+0xa2>
		return -EINVAL;
   28d34:	f06f 0315 	mvn.w	r3, #21
   28d38:	e0e6      	b.n	28f08 <gpio_nrfx_config+0x270>
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   28d3a:	683b      	ldr	r3, [r7, #0]
   28d3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
   28d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   28d44:	d103      	bne.n	28d4e <gpio_nrfx_config+0xb6>
		pull = NRF_GPIO_PIN_PULLUP;
   28d46:	2303      	movs	r3, #3
   28d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   28d4c:	e00c      	b.n	28d68 <gpio_nrfx_config+0xd0>
	} else if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_DOWN) {
   28d4e:	683b      	ldr	r3, [r7, #0]
   28d50:	f403 7340 	and.w	r3, r3, #768	; 0x300
   28d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   28d58:	d103      	bne.n	28d62 <gpio_nrfx_config+0xca>
		pull = NRF_GPIO_PIN_PULLDOWN;
   28d5a:	2301      	movs	r3, #1
   28d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   28d60:	e002      	b.n	28d68 <gpio_nrfx_config+0xd0>
		pull = NRF_GPIO_PIN_NOPULL;
   28d62:	2300      	movs	r3, #0
   28d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	      : NRF_GPIO_PIN_DIR_INPUT;
   28d68:	683b      	ldr	r3, [r7, #0]
   28d6a:	b2db      	uxtb	r3, r3
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   28d6c:	f003 0301 	and.w	r3, r3, #1
   28d70:	76fb      	strb	r3, [r7, #27]
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   28d72:	7efb      	ldrb	r3, [r7, #27]
   28d74:	2b00      	cmp	r3, #0
   28d76:	bf14      	ite	ne
   28d78:	2301      	movne	r3, #1
   28d7a:	2300      	moveq	r3, #0
   28d7c:	b2db      	uxtb	r3, r3
	input = (dir == NRF_GPIO_PIN_DIR_INPUT)
   28d7e:	76bb      	strb	r3, [r7, #26]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   28d80:	68bb      	ldr	r3, [r7, #8]
   28d82:	2b01      	cmp	r3, #1
   28d84:	d106      	bne.n	28d94 <gpio_nrfx_config+0xfc>
		from_pin = 0U;
   28d86:	2300      	movs	r3, #0
   28d88:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		to_pin   = 31U;
   28d8c:	231f      	movs	r3, #31
   28d8e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   28d92:	e005      	b.n	28da0 <gpio_nrfx_config+0x108>
		from_pin = pin;
   28d94:	687b      	ldr	r3, [r7, #4]
   28d96:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		to_pin   = pin;
   28d9a:	687b      	ldr	r3, [r7, #4]
   28d9c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   28da0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   28da4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   28da8:	e0a6      	b.n	28ef8 <gpio_nrfx_config+0x260>
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   28daa:	68f8      	ldr	r0, [r7, #12]
   28dac:	f7ff fe68 	bl	28a80 <get_port_cfg>
   28db0:	4603      	mov	r3, r0
   28db2:	791b      	ldrb	r3, [r3, #4]
   28db4:	015a      	lsls	r2, r3, #5
   28db6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   28dba:	f003 031f 	and.w	r3, r3, #31
   28dbe:	4313      	orrs	r3, r2
   28dc0:	461c      	mov	r4, r3
   28dc2:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
   28dc6:	7eba      	ldrb	r2, [r7, #26]
   28dc8:	7ef9      	ldrb	r1, [r7, #27]
   28dca:	2300      	movs	r3, #0
   28dcc:	9301      	str	r3, [sp, #4]
   28dce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   28dd2:	9300      	str	r3, [sp, #0]
   28dd4:	4603      	mov	r3, r0
   28dd6:	4620      	mov	r0, r4
   28dd8:	f7ff fce4 	bl	287a4 <nrf_gpio_cfg>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   28ddc:	683b      	ldr	r3, [r7, #0]
   28dde:	f003 0302 	and.w	r3, r3, #2
   28de2:	2b00      	cmp	r3, #0
   28de4:	d008      	beq.n	28df8 <gpio_nrfx_config+0x160>
   28de6:	69fb      	ldr	r3, [r7, #28]
   28de8:	689a      	ldr	r2, [r3, #8]
   28dea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   28dee:	2101      	movs	r1, #1
   28df0:	fa01 f303 	lsl.w	r3, r1, r3
   28df4:	4313      	orrs	r3, r2
   28df6:	e008      	b.n	28e0a <gpio_nrfx_config+0x172>
   28df8:	69fb      	ldr	r3, [r7, #28]
   28dfa:	689a      	ldr	r2, [r3, #8]
   28dfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   28e00:	2101      	movs	r1, #1
   28e02:	fa01 f303 	lsl.w	r3, r1, r3
   28e06:	43db      	mvns	r3, r3
   28e08:	4013      	ands	r3, r2
   28e0a:	69fa      	ldr	r2, [r7, #28]
   28e0c:	6093      	str	r3, [r2, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   28e0e:	683b      	ldr	r3, [r7, #0]
   28e10:	f003 0320 	and.w	r3, r3, #32
   28e14:	2b00      	cmp	r3, #0
   28e16:	d008      	beq.n	28e2a <gpio_nrfx_config+0x192>
   28e18:	69fb      	ldr	r3, [r7, #28]
   28e1a:	695a      	ldr	r2, [r3, #20]
   28e1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   28e20:	2101      	movs	r1, #1
   28e22:	fa01 f303 	lsl.w	r3, r1, r3
   28e26:	4313      	orrs	r3, r2
   28e28:	e008      	b.n	28e3c <gpio_nrfx_config+0x1a4>
   28e2a:	69fb      	ldr	r3, [r7, #28]
   28e2c:	695a      	ldr	r2, [r3, #20]
   28e2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   28e32:	2101      	movs	r1, #1
   28e34:	fa01 f303 	lsl.w	r3, r1, r3
   28e38:	43db      	mvns	r3, r3
   28e3a:	4013      	ands	r3, r2
   28e3c:	69fa      	ldr	r2, [r7, #28]
   28e3e:	6153      	str	r3, [r2, #20]
		WRITE_BIT(data->double_edge, curr_pin,
   28e40:	683b      	ldr	r3, [r7, #0]
   28e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
   28e46:	2b00      	cmp	r3, #0
   28e48:	d008      	beq.n	28e5c <gpio_nrfx_config+0x1c4>
   28e4a:	69fb      	ldr	r3, [r7, #28]
   28e4c:	699a      	ldr	r2, [r3, #24]
   28e4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   28e52:	2101      	movs	r1, #1
   28e54:	fa01 f303 	lsl.w	r3, r1, r3
   28e58:	4313      	orrs	r3, r2
   28e5a:	e008      	b.n	28e6e <gpio_nrfx_config+0x1d6>
   28e5c:	69fb      	ldr	r3, [r7, #28]
   28e5e:	699a      	ldr	r2, [r3, #24]
   28e60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   28e64:	2101      	movs	r1, #1
   28e66:	fa01 f303 	lsl.w	r3, r1, r3
   28e6a:	43db      	mvns	r3, r3
   28e6c:	4013      	ands	r3, r2
   28e6e:	69fa      	ldr	r2, [r7, #28]
   28e70:	6193      	str	r3, [r2, #24]
		WRITE_BIT(data->active_level, curr_pin,
   28e72:	683b      	ldr	r3, [r7, #0]
   28e74:	f003 0304 	and.w	r3, r3, #4
   28e78:	2b00      	cmp	r3, #0
   28e7a:	d008      	beq.n	28e8e <gpio_nrfx_config+0x1f6>
   28e7c:	69fb      	ldr	r3, [r7, #28]
   28e7e:	691a      	ldr	r2, [r3, #16]
   28e80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   28e84:	2101      	movs	r1, #1
   28e86:	fa01 f303 	lsl.w	r3, r1, r3
   28e8a:	4313      	orrs	r3, r2
   28e8c:	e008      	b.n	28ea0 <gpio_nrfx_config+0x208>
   28e8e:	69fb      	ldr	r3, [r7, #28]
   28e90:	691a      	ldr	r2, [r3, #16]
   28e92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   28e96:	2101      	movs	r1, #1
   28e98:	fa01 f303 	lsl.w	r3, r1, r3
   28e9c:	43db      	mvns	r3, r3
   28e9e:	4013      	ands	r3, r2
   28ea0:	69fa      	ldr	r2, [r7, #28]
   28ea2:	6113      	str	r3, [r2, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   28ea4:	683b      	ldr	r3, [r7, #0]
   28ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
   28eaa:	2b00      	cmp	r3, #0
   28eac:	d008      	beq.n	28ec0 <gpio_nrfx_config+0x228>
   28eae:	69fb      	ldr	r3, [r7, #28]
   28eb0:	69da      	ldr	r2, [r3, #28]
   28eb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   28eb6:	2101      	movs	r1, #1
   28eb8:	fa01 f303 	lsl.w	r3, r1, r3
   28ebc:	4313      	orrs	r3, r2
   28ebe:	e008      	b.n	28ed2 <gpio_nrfx_config+0x23a>
   28ec0:	69fb      	ldr	r3, [r7, #28]
   28ec2:	69da      	ldr	r2, [r3, #28]
   28ec4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   28ec8:	2101      	movs	r1, #1
   28eca:	fa01 f303 	lsl.w	r3, r1, r3
   28ece:	43db      	mvns	r3, r3
   28ed0:	4013      	ands	r3, r2
   28ed2:	69fa      	ldr	r2, [r7, #28]
   28ed4:	61d3      	str	r3, [r2, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   28ed6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   28eda:	4619      	mov	r1, r3
   28edc:	68f8      	ldr	r0, [r7, #12]
   28ede:	f7ff fe5d 	bl	28b9c <gpiote_pin_int_cfg>
   28ee2:	6178      	str	r0, [r7, #20]
		if (res != 0) {
   28ee4:	697b      	ldr	r3, [r7, #20]
   28ee6:	2b00      	cmp	r3, #0
   28ee8:	d001      	beq.n	28eee <gpio_nrfx_config+0x256>
			return res;
   28eea:	697b      	ldr	r3, [r7, #20]
   28eec:	e00c      	b.n	28f08 <gpio_nrfx_config+0x270>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   28eee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   28ef2:	3301      	adds	r3, #1
   28ef4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   28ef8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
   28efc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   28f00:	429a      	cmp	r2, r3
   28f02:	f67f af52 	bls.w	28daa <gpio_nrfx_config+0x112>
	return 0;
   28f06:	2300      	movs	r3, #0
}
   28f08:	4618      	mov	r0, r3
   28f0a:	372c      	adds	r7, #44	; 0x2c
   28f0c:	46bd      	mov	sp, r7
   28f0e:	bd90      	pop	{r4, r7, pc}

00028f10 <gpio_nrfx_write>:
{
   28f10:	b580      	push	{r7, lr}
   28f12:	b086      	sub	sp, #24
   28f14:	af00      	add	r7, sp, #0
   28f16:	60f8      	str	r0, [r7, #12]
   28f18:	60b9      	str	r1, [r7, #8]
   28f1a:	607a      	str	r2, [r7, #4]
   28f1c:	603b      	str	r3, [r7, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28f1e:	68f8      	ldr	r0, [r7, #12]
   28f20:	f7ff fdae 	bl	28a80 <get_port_cfg>
   28f24:	4603      	mov	r3, r0
   28f26:	681b      	ldr	r3, [r3, #0]
   28f28:	617b      	str	r3, [r7, #20]
	struct gpio_nrfx_data *data = get_port_data(port);
   28f2a:	68f8      	ldr	r0, [r7, #12]
   28f2c:	f7ff fd9d 	bl	28a6a <get_port_data>
   28f30:	6138      	str	r0, [r7, #16]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   28f32:	68bb      	ldr	r3, [r7, #8]
   28f34:	2b01      	cmp	r3, #1
   28f36:	d108      	bne.n	28f4a <gpio_nrfx_write+0x3a>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   28f38:	693b      	ldr	r3, [r7, #16]
   28f3a:	69da      	ldr	r2, [r3, #28]
   28f3c:	683b      	ldr	r3, [r7, #0]
   28f3e:	4053      	eors	r3, r2
   28f40:	4619      	mov	r1, r3
   28f42:	6978      	ldr	r0, [r7, #20]
   28f44:	f7ff fca9 	bl	2889a <nrf_gpio_port_out_write>
   28f48:	e026      	b.n	28f98 <gpio_nrfx_write+0x88>
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   28f4a:	683b      	ldr	r3, [r7, #0]
   28f4c:	2b00      	cmp	r3, #0
   28f4e:	bf14      	ite	ne
   28f50:	2301      	movne	r3, #1
   28f52:	2300      	moveq	r3, #0
   28f54:	b2da      	uxtb	r2, r3
   28f56:	693b      	ldr	r3, [r7, #16]
   28f58:	69d9      	ldr	r1, [r3, #28]
   28f5a:	687b      	ldr	r3, [r7, #4]
   28f5c:	fa21 f303 	lsr.w	r3, r1, r3
   28f60:	f003 0301 	and.w	r3, r3, #1
   28f64:	2b00      	cmp	r3, #0
   28f66:	bf14      	ite	ne
   28f68:	2301      	movne	r3, #1
   28f6a:	2300      	moveq	r3, #0
   28f6c:	b2db      	uxtb	r3, r3
   28f6e:	4053      	eors	r3, r2
   28f70:	b2db      	uxtb	r3, r3
   28f72:	2b00      	cmp	r3, #0
   28f74:	d008      	beq.n	28f88 <gpio_nrfx_write+0x78>
			nrf_gpio_port_out_set(reg, BIT(pin));
   28f76:	2201      	movs	r2, #1
   28f78:	687b      	ldr	r3, [r7, #4]
   28f7a:	fa02 f303 	lsl.w	r3, r2, r3
   28f7e:	4619      	mov	r1, r3
   28f80:	6978      	ldr	r0, [r7, #20]
   28f82:	f7ff fc98 	bl	288b6 <nrf_gpio_port_out_set>
   28f86:	e007      	b.n	28f98 <gpio_nrfx_write+0x88>
			nrf_gpio_port_out_clear(reg, BIT(pin));
   28f88:	2201      	movs	r2, #1
   28f8a:	687b      	ldr	r3, [r7, #4]
   28f8c:	fa02 f303 	lsl.w	r3, r2, r3
   28f90:	4619      	mov	r1, r3
   28f92:	6978      	ldr	r0, [r7, #20]
   28f94:	f7ff fc9d 	bl	288d2 <nrf_gpio_port_out_clear>
	return 0;
   28f98:	2300      	movs	r3, #0
}
   28f9a:	4618      	mov	r0, r3
   28f9c:	3718      	adds	r7, #24
   28f9e:	46bd      	mov	sp, r7
   28fa0:	bd80      	pop	{r7, pc}

00028fa2 <gpio_nrfx_read>:
{
   28fa2:	b580      	push	{r7, lr}
   28fa4:	b08a      	sub	sp, #40	; 0x28
   28fa6:	af00      	add	r7, sp, #0
   28fa8:	60f8      	str	r0, [r7, #12]
   28faa:	60b9      	str	r1, [r7, #8]
   28fac:	607a      	str	r2, [r7, #4]
   28fae:	603b      	str	r3, [r7, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28fb0:	68f8      	ldr	r0, [r7, #12]
   28fb2:	f7ff fd65 	bl	28a80 <get_port_cfg>
   28fb6:	4603      	mov	r3, r0
   28fb8:	681b      	ldr	r3, [r3, #0]
   28fba:	627b      	str	r3, [r7, #36]	; 0x24
	struct gpio_nrfx_data *data = get_port_data(port);
   28fbc:	68f8      	ldr	r0, [r7, #12]
   28fbe:	f7ff fd54 	bl	28a6a <get_port_data>
   28fc2:	6238      	str	r0, [r7, #32]
	u32_t dir = nrf_gpio_port_dir_read(reg);
   28fc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
   28fc6:	f7ff fc44 	bl	28852 <nrf_gpio_port_dir_read>
   28fca:	61f8      	str	r0, [r7, #28]
	u32_t port_in = nrf_gpio_port_in_read(reg) & ~dir;
   28fcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
   28fce:	f7ff fc4c 	bl	2886a <nrf_gpio_port_in_read>
   28fd2:	4602      	mov	r2, r0
   28fd4:	69fb      	ldr	r3, [r7, #28]
   28fd6:	43db      	mvns	r3, r3
   28fd8:	4013      	ands	r3, r2
   28fda:	61bb      	str	r3, [r7, #24]
	u32_t port_out = nrf_gpio_port_out_read(reg) & dir;
   28fdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
   28fde:	f7ff fc50 	bl	28882 <nrf_gpio_port_out_read>
   28fe2:	4602      	mov	r2, r0
   28fe4:	69fb      	ldr	r3, [r7, #28]
   28fe6:	4013      	ands	r3, r2
   28fe8:	617b      	str	r3, [r7, #20]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   28fea:	69ba      	ldr	r2, [r7, #24]
   28fec:	697b      	ldr	r3, [r7, #20]
   28fee:	431a      	orrs	r2, r3
   28ff0:	6a3b      	ldr	r3, [r7, #32]
   28ff2:	69db      	ldr	r3, [r3, #28]
   28ff4:	4053      	eors	r3, r2
   28ff6:	613b      	str	r3, [r7, #16]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   28ff8:	68bb      	ldr	r3, [r7, #8]
   28ffa:	2b01      	cmp	r3, #1
   28ffc:	d103      	bne.n	29006 <gpio_nrfx_read+0x64>
		*value = port_val;
   28ffe:	683b      	ldr	r3, [r7, #0]
   29000:	693a      	ldr	r2, [r7, #16]
   29002:	601a      	str	r2, [r3, #0]
   29004:	e007      	b.n	29016 <gpio_nrfx_read+0x74>
		*value = (port_val & BIT(pin)) ? 1 : 0;
   29006:	693a      	ldr	r2, [r7, #16]
   29008:	687b      	ldr	r3, [r7, #4]
   2900a:	fa22 f303 	lsr.w	r3, r2, r3
   2900e:	f003 0201 	and.w	r2, r3, #1
   29012:	683b      	ldr	r3, [r7, #0]
   29014:	601a      	str	r2, [r3, #0]
	return 0;
   29016:	2300      	movs	r3, #0
}
   29018:	4618      	mov	r0, r3
   2901a:	3728      	adds	r7, #40	; 0x28
   2901c:	46bd      	mov	sp, r7
   2901e:	bd80      	pop	{r7, pc}

00029020 <gpio_nrfx_manage_callback>:
{
   29020:	b580      	push	{r7, lr}
   29022:	b084      	sub	sp, #16
   29024:	af00      	add	r7, sp, #0
   29026:	60f8      	str	r0, [r7, #12]
   29028:	60b9      	str	r1, [r7, #8]
   2902a:	4613      	mov	r3, r2
   2902c:	71fb      	strb	r3, [r7, #7]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2902e:	68f8      	ldr	r0, [r7, #12]
   29030:	f7ff fd1b 	bl	28a6a <get_port_data>
   29034:	4603      	mov	r3, r0
   29036:	4618      	mov	r0, r3
   29038:	79fb      	ldrb	r3, [r7, #7]
   2903a:	461a      	mov	r2, r3
   2903c:	68b9      	ldr	r1, [r7, #8]
   2903e:	f7ff fc92 	bl	28966 <gpio_manage_callback>
   29042:	4603      	mov	r3, r0
}
   29044:	4618      	mov	r0, r3
   29046:	3710      	adds	r7, #16
   29048:	46bd      	mov	sp, r7
   2904a:	bd80      	pop	{r7, pc}

0002904c <gpio_nrfx_pin_manage_callback>:
{
   2904c:	b580      	push	{r7, lr}
   2904e:	b088      	sub	sp, #32
   29050:	af00      	add	r7, sp, #0
   29052:	60f8      	str	r0, [r7, #12]
   29054:	60b9      	str	r1, [r7, #8]
   29056:	607a      	str	r2, [r7, #4]
   29058:	70fb      	strb	r3, [r7, #3]
	struct gpio_nrfx_data *data = get_port_data(port);
   2905a:	68f8      	ldr	r0, [r7, #12]
   2905c:	f7ff fd05 	bl	28a6a <get_port_data>
   29060:	6178      	str	r0, [r7, #20]
	int res = 0;
   29062:	2300      	movs	r3, #0
   29064:	61fb      	str	r3, [r7, #28]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   29066:	68bb      	ldr	r3, [r7, #8]
   29068:	2b01      	cmp	r3, #1
   2906a:	d104      	bne.n	29076 <gpio_nrfx_pin_manage_callback+0x2a>
		from_pin = 0U;
   2906c:	2300      	movs	r3, #0
   2906e:	76fb      	strb	r3, [r7, #27]
		to_pin   = 31U;
   29070:	231f      	movs	r3, #31
   29072:	76bb      	strb	r3, [r7, #26]
   29074:	e003      	b.n	2907e <gpio_nrfx_pin_manage_callback+0x32>
		from_pin = pin;
   29076:	687b      	ldr	r3, [r7, #4]
   29078:	76fb      	strb	r3, [r7, #27]
		to_pin   = pin;
   2907a:	687b      	ldr	r3, [r7, #4]
   2907c:	76bb      	strb	r3, [r7, #26]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2907e:	7efb      	ldrb	r3, [r7, #27]
   29080:	767b      	strb	r3, [r7, #25]
   29082:	e022      	b.n	290ca <gpio_nrfx_pin_manage_callback+0x7e>
		WRITE_BIT(data->int_en, curr_pin, enable);
   29084:	78fb      	ldrb	r3, [r7, #3]
   29086:	2b00      	cmp	r3, #0
   29088:	d007      	beq.n	2909a <gpio_nrfx_pin_manage_callback+0x4e>
   2908a:	697b      	ldr	r3, [r7, #20]
   2908c:	68da      	ldr	r2, [r3, #12]
   2908e:	7e7b      	ldrb	r3, [r7, #25]
   29090:	2101      	movs	r1, #1
   29092:	fa01 f303 	lsl.w	r3, r1, r3
   29096:	4313      	orrs	r3, r2
   29098:	e007      	b.n	290aa <gpio_nrfx_pin_manage_callback+0x5e>
   2909a:	697b      	ldr	r3, [r7, #20]
   2909c:	68da      	ldr	r2, [r3, #12]
   2909e:	7e7b      	ldrb	r3, [r7, #25]
   290a0:	2101      	movs	r1, #1
   290a2:	fa01 f303 	lsl.w	r3, r1, r3
   290a6:	43db      	mvns	r3, r3
   290a8:	4013      	ands	r3, r2
   290aa:	697a      	ldr	r2, [r7, #20]
   290ac:	60d3      	str	r3, [r2, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   290ae:	7e7b      	ldrb	r3, [r7, #25]
   290b0:	4619      	mov	r1, r3
   290b2:	68f8      	ldr	r0, [r7, #12]
   290b4:	f7ff fd72 	bl	28b9c <gpiote_pin_int_cfg>
   290b8:	61f8      	str	r0, [r7, #28]
		if (res != 0) {
   290ba:	69fb      	ldr	r3, [r7, #28]
   290bc:	2b00      	cmp	r3, #0
   290be:	d001      	beq.n	290c4 <gpio_nrfx_pin_manage_callback+0x78>
			return res;
   290c0:	69fb      	ldr	r3, [r7, #28]
   290c2:	e007      	b.n	290d4 <gpio_nrfx_pin_manage_callback+0x88>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   290c4:	7e7b      	ldrb	r3, [r7, #25]
   290c6:	3301      	adds	r3, #1
   290c8:	767b      	strb	r3, [r7, #25]
   290ca:	7e7a      	ldrb	r2, [r7, #25]
   290cc:	7ebb      	ldrb	r3, [r7, #26]
   290ce:	429a      	cmp	r2, r3
   290d0:	d9d8      	bls.n	29084 <gpio_nrfx_pin_manage_callback+0x38>
	return res;
   290d2:	69fb      	ldr	r3, [r7, #28]
}
   290d4:	4618      	mov	r0, r3
   290d6:	3720      	adds	r7, #32
   290d8:	46bd      	mov	sp, r7
   290da:	bd80      	pop	{r7, pc}

000290dc <gpio_nrfx_pin_enable_callback>:
{
   290dc:	b580      	push	{r7, lr}
   290de:	b084      	sub	sp, #16
   290e0:	af00      	add	r7, sp, #0
   290e2:	60f8      	str	r0, [r7, #12]
   290e4:	60b9      	str	r1, [r7, #8]
   290e6:	607a      	str	r2, [r7, #4]
	return gpio_nrfx_pin_manage_callback(port, access_op, pin, true);
   290e8:	2301      	movs	r3, #1
   290ea:	687a      	ldr	r2, [r7, #4]
   290ec:	68b9      	ldr	r1, [r7, #8]
   290ee:	68f8      	ldr	r0, [r7, #12]
   290f0:	f7ff ffac 	bl	2904c <gpio_nrfx_pin_manage_callback>
   290f4:	4603      	mov	r3, r0
}
   290f6:	4618      	mov	r0, r3
   290f8:	3710      	adds	r7, #16
   290fa:	46bd      	mov	sp, r7
   290fc:	bd80      	pop	{r7, pc}

000290fe <gpio_nrfx_pin_disable_callback>:
{
   290fe:	b580      	push	{r7, lr}
   29100:	b084      	sub	sp, #16
   29102:	af00      	add	r7, sp, #0
   29104:	60f8      	str	r0, [r7, #12]
   29106:	60b9      	str	r1, [r7, #8]
   29108:	607a      	str	r2, [r7, #4]
	return gpio_nrfx_pin_manage_callback(port, access_op, pin, false);
   2910a:	2300      	movs	r3, #0
   2910c:	687a      	ldr	r2, [r7, #4]
   2910e:	68b9      	ldr	r1, [r7, #8]
   29110:	68f8      	ldr	r0, [r7, #12]
   29112:	f7ff ff9b 	bl	2904c <gpio_nrfx_pin_manage_callback>
   29116:	4603      	mov	r3, r0
}
   29118:	4618      	mov	r0, r3
   2911a:	3710      	adds	r7, #16
   2911c:	46bd      	mov	sp, r7
   2911e:	bd80      	pop	{r7, pc}

00029120 <get_level_pins>:
{
   29120:	b580      	push	{r7, lr}
   29122:	b084      	sub	sp, #16
   29124:	af00      	add	r7, sp, #0
   29126:	6078      	str	r0, [r7, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   29128:	6878      	ldr	r0, [r7, #4]
   2912a:	f7ff fc9e 	bl	28a6a <get_port_data>
   2912e:	60f8      	str	r0, [r7, #12]
	u32_t out = data->int_en & data->pin_int_en;
   29130:	68fb      	ldr	r3, [r7, #12]
   29132:	68da      	ldr	r2, [r3, #12]
   29134:	68fb      	ldr	r3, [r7, #12]
   29136:	689b      	ldr	r3, [r3, #8]
   29138:	4013      	ands	r3, r2
   2913a:	60bb      	str	r3, [r7, #8]
	out &= ~data->trig_edge & ~data->double_edge;
   2913c:	68fb      	ldr	r3, [r7, #12]
   2913e:	695a      	ldr	r2, [r3, #20]
   29140:	68fb      	ldr	r3, [r7, #12]
   29142:	699b      	ldr	r3, [r3, #24]
   29144:	4313      	orrs	r3, r2
   29146:	43db      	mvns	r3, r3
   29148:	68ba      	ldr	r2, [r7, #8]
   2914a:	4013      	ands	r3, r2
   2914c:	60bb      	str	r3, [r7, #8]
	return out;
   2914e:	68bb      	ldr	r3, [r7, #8]
}
   29150:	4618      	mov	r0, r3
   29152:	3710      	adds	r7, #16
   29154:	46bd      	mov	sp, r7
   29156:	bd80      	pop	{r7, pc}

00029158 <cfg_level_pins>:
{
   29158:	b580      	push	{r7, lr}
   2915a:	b08a      	sub	sp, #40	; 0x28
   2915c:	af00      	add	r7, sp, #0
   2915e:	6078      	str	r0, [r7, #4]
	const struct gpio_nrfx_data *data = get_port_data(port);
   29160:	6878      	ldr	r0, [r7, #4]
   29162:	f7ff fc82 	bl	28a6a <get_port_data>
   29166:	61b8      	str	r0, [r7, #24]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   29168:	6878      	ldr	r0, [r7, #4]
   2916a:	f7ff fc89 	bl	28a80 <get_port_cfg>
   2916e:	6178      	str	r0, [r7, #20]
	u32_t pin = 0U;
   29170:	2300      	movs	r3, #0
   29172:	627b      	str	r3, [r7, #36]	; 0x24
	u32_t bit = 1U << pin;
   29174:	2201      	movs	r2, #1
   29176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   29178:	fa02 f303 	lsl.w	r3, r2, r3
   2917c:	623b      	str	r3, [r7, #32]
	u32_t level_pins = get_level_pins(port);
   2917e:	6878      	ldr	r0, [r7, #4]
   29180:	f7ff ffce 	bl	29120 <get_level_pins>
   29184:	61f8      	str	r0, [r7, #28]
	while (level_pins) {
   29186:	e023      	b.n	291d0 <cfg_level_pins+0x78>
		if (level_pins & bit) {
   29188:	69fa      	ldr	r2, [r7, #28]
   2918a:	6a3b      	ldr	r3, [r7, #32]
   2918c:	4013      	ands	r3, r2
   2918e:	2b00      	cmp	r3, #0
   29190:	d018      	beq.n	291c4 <cfg_level_pins+0x6c>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   29192:	697b      	ldr	r3, [r7, #20]
   29194:	791b      	ldrb	r3, [r3, #4]
   29196:	015b      	lsls	r3, r3, #5
   29198:	461a      	mov	r2, r3
   2919a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2919c:	f003 031f 	and.w	r3, r3, #31
   291a0:	4313      	orrs	r3, r2
   291a2:	613b      	str	r3, [r7, #16]
			u32_t sense = sense_for_pin(data, pin);
   291a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   291a6:	69b8      	ldr	r0, [r7, #24]
   291a8:	f7ff fcdf 	bl	28b6a <sense_for_pin>
   291ac:	60f8      	str	r0, [r7, #12]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   291ae:	68fb      	ldr	r3, [r7, #12]
   291b0:	b2db      	uxtb	r3, r3
   291b2:	4619      	mov	r1, r3
   291b4:	6938      	ldr	r0, [r7, #16]
   291b6:	f7ff fb1f 	bl	287f8 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   291ba:	6a3b      	ldr	r3, [r7, #32]
   291bc:	43db      	mvns	r3, r3
   291be:	69fa      	ldr	r2, [r7, #28]
   291c0:	4013      	ands	r3, r2
   291c2:	61fb      	str	r3, [r7, #28]
		++pin;
   291c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   291c6:	3301      	adds	r3, #1
   291c8:	627b      	str	r3, [r7, #36]	; 0x24
		bit <<= 1;
   291ca:	6a3b      	ldr	r3, [r7, #32]
   291cc:	005b      	lsls	r3, r3, #1
   291ce:	623b      	str	r3, [r7, #32]
	while (level_pins) {
   291d0:	69fb      	ldr	r3, [r7, #28]
   291d2:	2b00      	cmp	r3, #0
   291d4:	d1d8      	bne.n	29188 <cfg_level_pins+0x30>
}
   291d6:	bf00      	nop
   291d8:	3728      	adds	r7, #40	; 0x28
   291da:	46bd      	mov	sp, r7
   291dc:	bd80      	pop	{r7, pc}

000291de <check_level_trigger_pins>:
{
   291de:	b580      	push	{r7, lr}
   291e0:	b08c      	sub	sp, #48	; 0x30
   291e2:	af00      	add	r7, sp, #0
   291e4:	6078      	str	r0, [r7, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   291e6:	6878      	ldr	r0, [r7, #4]
   291e8:	f7ff fc3f 	bl	28a6a <get_port_data>
   291ec:	6238      	str	r0, [r7, #32]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   291ee:	6878      	ldr	r0, [r7, #4]
   291f0:	f7ff fc46 	bl	28a80 <get_port_cfg>
   291f4:	61f8      	str	r0, [r7, #28]
	u32_t level_pins = get_level_pins(port);
   291f6:	6878      	ldr	r0, [r7, #4]
   291f8:	f7ff ff92 	bl	29120 <get_level_pins>
   291fc:	62f8      	str	r0, [r7, #44]	; 0x2c
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   291fe:	69fb      	ldr	r3, [r7, #28]
   29200:	681b      	ldr	r3, [r3, #0]
   29202:	4618      	mov	r0, r3
   29204:	f7ff fb31 	bl	2886a <nrf_gpio_port_in_read>
   29208:	61b8      	str	r0, [r7, #24]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   2920a:	6a3b      	ldr	r3, [r7, #32]
   2920c:	69da      	ldr	r2, [r3, #28]
   2920e:	69bb      	ldr	r3, [r7, #24]
   29210:	405a      	eors	r2, r3
   29212:	6a3b      	ldr	r3, [r7, #32]
   29214:	691b      	ldr	r3, [r3, #16]
   29216:	4053      	eors	r3, r2
   29218:	43db      	mvns	r3, r3
   2921a:	617b      	str	r3, [r7, #20]
	u32_t out = pin_states & level_pins;
   2921c:	697a      	ldr	r2, [r7, #20]
   2921e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   29220:	4013      	ands	r3, r2
   29222:	613b      	str	r3, [r7, #16]
	u32_t pin = 0U;
   29224:	2300      	movs	r3, #0
   29226:	62bb      	str	r3, [r7, #40]	; 0x28
	u32_t bit = 1U << pin;
   29228:	2201      	movs	r2, #1
   2922a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2922c:	fa02 f303 	lsl.w	r3, r2, r3
   29230:	627b      	str	r3, [r7, #36]	; 0x24
	while (level_pins) {
   29232:	e01c      	b.n	2926e <check_level_trigger_pins+0x90>
		if (level_pins & bit) {
   29234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   29236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   29238:	4013      	ands	r3, r2
   2923a:	2b00      	cmp	r3, #0
   2923c:	d011      	beq.n	29262 <check_level_trigger_pins+0x84>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2923e:	69fb      	ldr	r3, [r7, #28]
   29240:	791b      	ldrb	r3, [r3, #4]
   29242:	015b      	lsls	r3, r3, #5
   29244:	461a      	mov	r2, r3
   29246:	6abb      	ldr	r3, [r7, #40]	; 0x28
   29248:	f003 031f 	and.w	r3, r3, #31
   2924c:	4313      	orrs	r3, r2
   2924e:	60fb      	str	r3, [r7, #12]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   29250:	2100      	movs	r1, #0
   29252:	68f8      	ldr	r0, [r7, #12]
   29254:	f7ff fad0 	bl	287f8 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   29258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2925a:	43db      	mvns	r3, r3
   2925c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2925e:	4013      	ands	r3, r2
   29260:	62fb      	str	r3, [r7, #44]	; 0x2c
		++pin;
   29262:	6abb      	ldr	r3, [r7, #40]	; 0x28
   29264:	3301      	adds	r3, #1
   29266:	62bb      	str	r3, [r7, #40]	; 0x28
		bit <<= 1;
   29268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2926a:	005b      	lsls	r3, r3, #1
   2926c:	627b      	str	r3, [r7, #36]	; 0x24
	while (level_pins) {
   2926e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   29270:	2b00      	cmp	r3, #0
   29272:	d1df      	bne.n	29234 <check_level_trigger_pins+0x56>
	return out;
   29274:	693b      	ldr	r3, [r7, #16]
}
   29276:	4618      	mov	r0, r3
   29278:	3730      	adds	r7, #48	; 0x30
   2927a:	46bd      	mov	sp, r7
   2927c:	bd80      	pop	{r7, pc}

0002927e <fire_callbacks>:
{
   2927e:	b580      	push	{r7, lr}
   29280:	b082      	sub	sp, #8
   29282:	af00      	add	r7, sp, #0
   29284:	6078      	str	r0, [r7, #4]
   29286:	6039      	str	r1, [r7, #0]
	gpio_fire_callbacks(&get_port_data(port)->callbacks, port, pins);
   29288:	6878      	ldr	r0, [r7, #4]
   2928a:	f7ff fbee 	bl	28a6a <get_port_data>
   2928e:	4603      	mov	r3, r0
   29290:	683a      	ldr	r2, [r7, #0]
   29292:	6879      	ldr	r1, [r7, #4]
   29294:	4618      	mov	r0, r3
   29296:	f7ff fb97 	bl	289c8 <gpio_fire_callbacks>
}
   2929a:	bf00      	nop
   2929c:	3708      	adds	r7, #8
   2929e:	46bd      	mov	sp, r7
   292a0:	bd80      	pop	{r7, pc}

000292a2 <nrf_uart_event_clear>:
 */
__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate);

#ifndef SUPPRESS_INLINE_IMPLEMENTATION
__STATIC_INLINE void nrf_uart_event_clear(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
   292a2:	b480      	push	{r7}
   292a4:	b085      	sub	sp, #20
   292a6:	af00      	add	r7, sp, #0
   292a8:	6078      	str	r0, [r7, #4]
   292aa:	460b      	mov	r3, r1
   292ac:	807b      	strh	r3, [r7, #2]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   292ae:	887b      	ldrh	r3, [r7, #2]
   292b0:	687a      	ldr	r2, [r7, #4]
   292b2:	4413      	add	r3, r2
   292b4:	2200      	movs	r2, #0
   292b6:	601a      	str	r2, [r3, #0]
#if __CORTEX_M == 0x04
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   292b8:	887b      	ldrh	r3, [r7, #2]
   292ba:	687a      	ldr	r2, [r7, #4]
   292bc:	4413      	add	r3, r2
   292be:	681b      	ldr	r3, [r3, #0]
   292c0:	60fb      	str	r3, [r7, #12]
    (void)dummy;
   292c2:	68fb      	ldr	r3, [r7, #12]
#endif

}
   292c4:	bf00      	nop
   292c6:	3714      	adds	r7, #20
   292c8:	46bd      	mov	sp, r7
   292ca:	bc80      	pop	{r7}
   292cc:	4770      	bx	lr

000292ce <nrf_uart_event_check>:

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
   292ce:	b480      	push	{r7}
   292d0:	b083      	sub	sp, #12
   292d2:	af00      	add	r7, sp, #0
   292d4:	6078      	str	r0, [r7, #4]
   292d6:	460b      	mov	r3, r1
   292d8:	807b      	strh	r3, [r7, #2]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   292da:	887b      	ldrh	r3, [r7, #2]
   292dc:	687a      	ldr	r2, [r7, #4]
   292de:	4413      	add	r3, r2
   292e0:	681b      	ldr	r3, [r3, #0]
   292e2:	2b00      	cmp	r3, #0
   292e4:	bf14      	ite	ne
   292e6:	2301      	movne	r3, #1
   292e8:	2300      	moveq	r3, #0
   292ea:	b2db      	uxtb	r3, r3
}
   292ec:	4618      	mov	r0, r3
   292ee:	370c      	adds	r7, #12
   292f0:	46bd      	mov	sp, r7
   292f2:	bc80      	pop	{r7}
   292f4:	4770      	bx	lr

000292f6 <nrf_uart_int_enable>:
{
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

__STATIC_INLINE void nrf_uart_int_enable(NRF_UART_Type * p_reg, uint32_t int_mask)
{
   292f6:	b480      	push	{r7}
   292f8:	b083      	sub	sp, #12
   292fa:	af00      	add	r7, sp, #0
   292fc:	6078      	str	r0, [r7, #4]
   292fe:	6039      	str	r1, [r7, #0]
    p_reg->INTENSET = int_mask;
   29300:	687b      	ldr	r3, [r7, #4]
   29302:	683a      	ldr	r2, [r7, #0]
   29304:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   29308:	bf00      	nop
   2930a:	370c      	adds	r7, #12
   2930c:	46bd      	mov	sp, r7
   2930e:	bc80      	pop	{r7}
   29310:	4770      	bx	lr

00029312 <nrf_uart_int_enable_check>:

__STATIC_INLINE bool nrf_uart_int_enable_check(NRF_UART_Type * p_reg, uint32_t int_mask)
{
   29312:	b480      	push	{r7}
   29314:	b083      	sub	sp, #12
   29316:	af00      	add	r7, sp, #0
   29318:	6078      	str	r0, [r7, #4]
   2931a:	6039      	str	r1, [r7, #0]
    return (bool)(p_reg->INTENSET & int_mask);
   2931c:	687b      	ldr	r3, [r7, #4]
   2931e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
   29322:	683b      	ldr	r3, [r7, #0]
   29324:	4013      	ands	r3, r2
   29326:	2b00      	cmp	r3, #0
   29328:	bf14      	ite	ne
   2932a:	2301      	movne	r3, #1
   2932c:	2300      	moveq	r3, #0
   2932e:	b2db      	uxtb	r3, r3
}
   29330:	4618      	mov	r0, r3
   29332:	370c      	adds	r7, #12
   29334:	46bd      	mov	sp, r7
   29336:	bc80      	pop	{r7}
   29338:	4770      	bx	lr

0002933a <nrf_uart_int_disable>:

__STATIC_INLINE void nrf_uart_int_disable(NRF_UART_Type * p_reg, uint32_t int_mask)
{
   2933a:	b480      	push	{r7}
   2933c:	b083      	sub	sp, #12
   2933e:	af00      	add	r7, sp, #0
   29340:	6078      	str	r0, [r7, #4]
   29342:	6039      	str	r1, [r7, #0]
    p_reg->INTENCLR = int_mask;
   29344:	687b      	ldr	r3, [r7, #4]
   29346:	683a      	ldr	r2, [r7, #0]
   29348:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2934c:	bf00      	nop
   2934e:	370c      	adds	r7, #12
   29350:	46bd      	mov	sp, r7
   29352:	bc80      	pop	{r7}
   29354:	4770      	bx	lr

00029356 <nrf_uart_errorsrc_get_and_clear>:

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
   29356:	b480      	push	{r7}
   29358:	b085      	sub	sp, #20
   2935a:	af00      	add	r7, sp, #0
   2935c:	6078      	str	r0, [r7, #4]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2935e:	687b      	ldr	r3, [r7, #4]
   29360:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
   29364:	60fb      	str	r3, [r7, #12]
    p_reg->ERRORSRC = errsrc_mask;
   29366:	687b      	ldr	r3, [r7, #4]
   29368:	68fa      	ldr	r2, [r7, #12]
   2936a:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
    return errsrc_mask;
   2936e:	68fb      	ldr	r3, [r7, #12]
}
   29370:	4618      	mov	r0, r3
   29372:	3714      	adds	r7, #20
   29374:	46bd      	mov	sp, r7
   29376:	bc80      	pop	{r7}
   29378:	4770      	bx	lr

0002937a <nrf_uart_enable>:

__STATIC_INLINE void nrf_uart_enable(NRF_UART_Type * p_reg)
{
   2937a:	b480      	push	{r7}
   2937c:	b083      	sub	sp, #12
   2937e:	af00      	add	r7, sp, #0
   29380:	6078      	str	r0, [r7, #4]
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   29382:	687b      	ldr	r3, [r7, #4]
   29384:	2204      	movs	r2, #4
   29386:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   2938a:	bf00      	nop
   2938c:	370c      	adds	r7, #12
   2938e:	46bd      	mov	sp, r7
   29390:	bc80      	pop	{r7}
   29392:	4770      	bx	lr

00029394 <nrf_uart_txrx_pins_set>:
{
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
}

__STATIC_INLINE void nrf_uart_txrx_pins_set(NRF_UART_Type * p_reg, uint32_t pseltxd, uint32_t pselrxd)
{
   29394:	b480      	push	{r7}
   29396:	b085      	sub	sp, #20
   29398:	af00      	add	r7, sp, #0
   2939a:	60f8      	str	r0, [r7, #12]
   2939c:	60b9      	str	r1, [r7, #8]
   2939e:	607a      	str	r2, [r7, #4]
#if defined(UART_PSEL_RXD_CONNECT_Pos)
    p_reg->PSEL.RXD = pselrxd;
   293a0:	68fb      	ldr	r3, [r7, #12]
   293a2:	687a      	ldr	r2, [r7, #4]
   293a4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
#else
    p_reg->PSELRXD = pselrxd;
#endif
#if defined(UART_PSEL_TXD_CONNECT_Pos)
    p_reg->PSEL.TXD = pseltxd;
   293a8:	68fb      	ldr	r3, [r7, #12]
   293aa:	68ba      	ldr	r2, [r7, #8]
   293ac:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
#else
    p_reg->PSELTXD = pseltxd;
#endif
}
   293b0:	bf00      	nop
   293b2:	3714      	adds	r7, #20
   293b4:	46bd      	mov	sp, r7
   293b6:	bc80      	pop	{r7}
   293b8:	4770      	bx	lr

000293ba <nrf_uart_hwfc_pins_set>:
    return p_reg->PSELCTS;
#endif
}

__STATIC_INLINE void nrf_uart_hwfc_pins_set(NRF_UART_Type * p_reg, uint32_t pselrts, uint32_t pselcts)
{
   293ba:	b480      	push	{r7}
   293bc:	b085      	sub	sp, #20
   293be:	af00      	add	r7, sp, #0
   293c0:	60f8      	str	r0, [r7, #12]
   293c2:	60b9      	str	r1, [r7, #8]
   293c4:	607a      	str	r2, [r7, #4]
#if defined(UART_PSEL_RTS_CONNECT_Pos)
    p_reg->PSEL.RTS = pselrts;
   293c6:	68fb      	ldr	r3, [r7, #12]
   293c8:	68ba      	ldr	r2, [r7, #8]
   293ca:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#else
    p_reg->PSELRTS = pselrts;
#endif

#if defined(UART_PSEL_RTS_CONNECT_Pos)
    p_reg->PSEL.CTS = pselcts;
   293ce:	68fb      	ldr	r3, [r7, #12]
   293d0:	687a      	ldr	r2, [r7, #4]
   293d2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#else
    p_reg->PSELCTS = pselcts;
#endif
}
   293d6:	bf00      	nop
   293d8:	3714      	adds	r7, #20
   293da:	46bd      	mov	sp, r7
   293dc:	bc80      	pop	{r7}
   293de:	4770      	bx	lr

000293e0 <nrf_uart_rxd_get>:
{
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

__STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type * p_reg)
{
   293e0:	b480      	push	{r7}
   293e2:	b083      	sub	sp, #12
   293e4:	af00      	add	r7, sp, #0
   293e6:	6078      	str	r0, [r7, #4]
    return p_reg->RXD;
   293e8:	687b      	ldr	r3, [r7, #4]
   293ea:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   293ee:	b2db      	uxtb	r3, r3
}
   293f0:	4618      	mov	r0, r3
   293f2:	370c      	adds	r7, #12
   293f4:	46bd      	mov	sp, r7
   293f6:	bc80      	pop	{r7}
   293f8:	4770      	bx	lr

000293fa <nrf_uart_txd_set>:

__STATIC_INLINE void nrf_uart_txd_set(NRF_UART_Type * p_reg, uint8_t txd)
{
   293fa:	b480      	push	{r7}
   293fc:	b083      	sub	sp, #12
   293fe:	af00      	add	r7, sp, #0
   29400:	6078      	str	r0, [r7, #4]
   29402:	460b      	mov	r3, r1
   29404:	70fb      	strb	r3, [r7, #3]
    p_reg->TXD = txd;
   29406:	78fa      	ldrb	r2, [r7, #3]
   29408:	687b      	ldr	r3, [r7, #4]
   2940a:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
}
   2940e:	bf00      	nop
   29410:	370c      	adds	r7, #12
   29412:	46bd      	mov	sp, r7
   29414:	bc80      	pop	{r7}
   29416:	4770      	bx	lr

00029418 <nrf_uart_task_trigger>:

__STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
   29418:	b480      	push	{r7}
   2941a:	b083      	sub	sp, #12
   2941c:	af00      	add	r7, sp, #0
   2941e:	6078      	str	r0, [r7, #4]
   29420:	460b      	mov	r3, r1
   29422:	70fb      	strb	r3, [r7, #3]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29424:	78fb      	ldrb	r3, [r7, #3]
   29426:	687a      	ldr	r2, [r7, #4]
   29428:	4413      	add	r3, r2
   2942a:	2201      	movs	r2, #1
   2942c:	601a      	str	r2, [r3, #0]
}
   2942e:	bf00      	nop
   29430:	370c      	adds	r7, #12
   29432:	46bd      	mov	sp, r7
   29434:	bc80      	pop	{r7}
   29436:	4770      	bx	lr

00029438 <nrf_uart_configure>:
}

__STATIC_INLINE void nrf_uart_configure(NRF_UART_Type   * p_reg,
                                            nrf_uart_parity_t parity,
                                            nrf_uart_hwfc_t   hwfc)
{
   29438:	b480      	push	{r7}
   2943a:	b083      	sub	sp, #12
   2943c:	af00      	add	r7, sp, #0
   2943e:	6078      	str	r0, [r7, #4]
   29440:	460b      	mov	r3, r1
   29442:	70fb      	strb	r3, [r7, #3]
   29444:	4613      	mov	r3, r2
   29446:	70bb      	strb	r3, [r7, #2]
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   29448:	78fa      	ldrb	r2, [r7, #3]
   2944a:	78bb      	ldrb	r3, [r7, #2]
   2944c:	4313      	orrs	r3, r2
   2944e:	b2db      	uxtb	r3, r3
   29450:	461a      	mov	r2, r3
   29452:	687b      	ldr	r3, [r7, #4]
   29454:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
}
   29458:	bf00      	nop
   2945a:	370c      	adds	r7, #12
   2945c:	46bd      	mov	sp, r7
   2945e:	bc80      	pop	{r7}
   29460:	4770      	bx	lr

00029462 <nrf_uart_baudrate_set>:

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
   29462:	b480      	push	{r7}
   29464:	b083      	sub	sp, #12
   29466:	af00      	add	r7, sp, #0
   29468:	6078      	str	r0, [r7, #4]
   2946a:	6039      	str	r1, [r7, #0]
    p_reg->BAUDRATE = baudrate;
   2946c:	687b      	ldr	r3, [r7, #4]
   2946e:	683a      	ldr	r2, [r7, #0]
   29470:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
}
   29474:	bf00      	nop
   29476:	370c      	adds	r7, #12
   29478:	46bd      	mov	sp, r7
   2947a:	bc80      	pop	{r7}
   2947c:	4770      	bx	lr

0002947e <nrf_gpio_cfg>:
{
   2947e:	b580      	push	{r7, lr}
   29480:	b084      	sub	sp, #16
   29482:	af00      	add	r7, sp, #0
   29484:	6078      	str	r0, [r7, #4]
   29486:	4608      	mov	r0, r1
   29488:	4611      	mov	r1, r2
   2948a:	461a      	mov	r2, r3
   2948c:	4603      	mov	r3, r0
   2948e:	70fb      	strb	r3, [r7, #3]
   29490:	460b      	mov	r3, r1
   29492:	70bb      	strb	r3, [r7, #2]
   29494:	4613      	mov	r3, r2
   29496:	707b      	strb	r3, [r7, #1]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29498:	1d3b      	adds	r3, r7, #4
   2949a:	4618      	mov	r0, r3
   2949c:	f7ec f9e6 	bl	1586c <nrf_gpio_pin_port_decode>
   294a0:	60f8      	str	r0, [r7, #12]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   294a2:	78fa      	ldrb	r2, [r7, #3]
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   294a4:	78bb      	ldrb	r3, [r7, #2]
   294a6:	005b      	lsls	r3, r3, #1
   294a8:	431a      	orrs	r2, r3
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
   294aa:	787b      	ldrb	r3, [r7, #1]
   294ac:	009b      	lsls	r3, r3, #2
   294ae:	431a      	orrs	r2, r3
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   294b0:	7e3b      	ldrb	r3, [r7, #24]
   294b2:	021b      	lsls	r3, r3, #8
   294b4:	ea42 0103 	orr.w	r1, r2, r3
                               | ((uint32_t)sense << GPIO_PIN_CNF_SENSE_Pos);
   294b8:	7f3b      	ldrb	r3, [r7, #28]
   294ba:	041b      	lsls	r3, r3, #16
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   294bc:	687a      	ldr	r2, [r7, #4]
                               | ((uint32_t)sense << GPIO_PIN_CNF_SENSE_Pos);
   294be:	4319      	orrs	r1, r3
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   294c0:	68fb      	ldr	r3, [r7, #12]
   294c2:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   294c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   294ca:	bf00      	nop
   294cc:	3710      	adds	r7, #16
   294ce:	46bd      	mov	sp, r7
   294d0:	bd80      	pop	{r7, pc}

000294d2 <nrf_gpio_cfg_output>:
{
   294d2:	b580      	push	{r7, lr}
   294d4:	b084      	sub	sp, #16
   294d6:	af02      	add	r7, sp, #8
   294d8:	6078      	str	r0, [r7, #4]
    nrf_gpio_cfg(
   294da:	2300      	movs	r3, #0
   294dc:	9301      	str	r3, [sp, #4]
   294de:	2300      	movs	r3, #0
   294e0:	9300      	str	r3, [sp, #0]
   294e2:	2300      	movs	r3, #0
   294e4:	2201      	movs	r2, #1
   294e6:	2101      	movs	r1, #1
   294e8:	6878      	ldr	r0, [r7, #4]
   294ea:	f7ff ffc8 	bl	2947e <nrf_gpio_cfg>
}
   294ee:	bf00      	nop
   294f0:	3708      	adds	r7, #8
   294f2:	46bd      	mov	sp, r7
   294f4:	bd80      	pop	{r7, pc}

000294f6 <nrf_gpio_cfg_input>:
{
   294f6:	b580      	push	{r7, lr}
   294f8:	b084      	sub	sp, #16
   294fa:	af02      	add	r7, sp, #8
   294fc:	6078      	str	r0, [r7, #4]
   294fe:	460b      	mov	r3, r1
   29500:	70fb      	strb	r3, [r7, #3]
    nrf_gpio_cfg(
   29502:	78fa      	ldrb	r2, [r7, #3]
   29504:	2300      	movs	r3, #0
   29506:	9301      	str	r3, [sp, #4]
   29508:	2300      	movs	r3, #0
   2950a:	9300      	str	r3, [sp, #0]
   2950c:	4613      	mov	r3, r2
   2950e:	2200      	movs	r2, #0
   29510:	2100      	movs	r1, #0
   29512:	6878      	ldr	r0, [r7, #4]
   29514:	f7ff ffb3 	bl	2947e <nrf_gpio_cfg>
}
   29518:	bf00      	nop
   2951a:	3708      	adds	r7, #8
   2951c:	46bd      	mov	sp, r7
   2951e:	bd80      	pop	{r7, pc}

00029520 <nrf_gpio_pin_set>:
{
   29520:	b580      	push	{r7, lr}
   29522:	b084      	sub	sp, #16
   29524:	af00      	add	r7, sp, #0
   29526:	6078      	str	r0, [r7, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29528:	1d3b      	adds	r3, r7, #4
   2952a:	4618      	mov	r0, r3
   2952c:	f7ec f99e 	bl	1586c <nrf_gpio_pin_port_decode>
   29530:	60f8      	str	r0, [r7, #12]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   29532:	687b      	ldr	r3, [r7, #4]
   29534:	2201      	movs	r2, #1
   29536:	fa02 f303 	lsl.w	r3, r2, r3
   2953a:	4619      	mov	r1, r3
   2953c:	68f8      	ldr	r0, [r7, #12]
   2953e:	f000 f82c 	bl	2959a <nrf_gpio_port_out_set>
}
   29542:	bf00      	nop
   29544:	3710      	adds	r7, #16
   29546:	46bd      	mov	sp, r7
   29548:	bd80      	pop	{r7, pc}

0002954a <nrf_gpio_pin_clear>:
{
   2954a:	b580      	push	{r7, lr}
   2954c:	b084      	sub	sp, #16
   2954e:	af00      	add	r7, sp, #0
   29550:	6078      	str	r0, [r7, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29552:	1d3b      	adds	r3, r7, #4
   29554:	4618      	mov	r0, r3
   29556:	f7ec f989 	bl	1586c <nrf_gpio_pin_port_decode>
   2955a:	60f8      	str	r0, [r7, #12]
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2955c:	687b      	ldr	r3, [r7, #4]
   2955e:	2201      	movs	r2, #1
   29560:	fa02 f303 	lsl.w	r3, r2, r3
   29564:	4619      	mov	r1, r3
   29566:	68f8      	ldr	r0, [r7, #12]
   29568:	f000 f825 	bl	295b6 <nrf_gpio_port_out_clear>
}
   2956c:	bf00      	nop
   2956e:	3710      	adds	r7, #16
   29570:	46bd      	mov	sp, r7
   29572:	bd80      	pop	{r7, pc}

00029574 <nrf_gpio_pin_write>:
{
   29574:	b580      	push	{r7, lr}
   29576:	b082      	sub	sp, #8
   29578:	af00      	add	r7, sp, #0
   2957a:	6078      	str	r0, [r7, #4]
   2957c:	6039      	str	r1, [r7, #0]
    if (value == 0)
   2957e:	683b      	ldr	r3, [r7, #0]
   29580:	2b00      	cmp	r3, #0
   29582:	d103      	bne.n	2958c <nrf_gpio_pin_write+0x18>
        nrf_gpio_pin_clear(pin_number);
   29584:	6878      	ldr	r0, [r7, #4]
   29586:	f7ff ffe0 	bl	2954a <nrf_gpio_pin_clear>
}
   2958a:	e002      	b.n	29592 <nrf_gpio_pin_write+0x1e>
        nrf_gpio_pin_set(pin_number);
   2958c:	6878      	ldr	r0, [r7, #4]
   2958e:	f7ff ffc7 	bl	29520 <nrf_gpio_pin_set>
}
   29592:	bf00      	nop
   29594:	3708      	adds	r7, #8
   29596:	46bd      	mov	sp, r7
   29598:	bd80      	pop	{r7, pc}

0002959a <nrf_gpio_port_out_set>:
{
   2959a:	b480      	push	{r7}
   2959c:	b083      	sub	sp, #12
   2959e:	af00      	add	r7, sp, #0
   295a0:	6078      	str	r0, [r7, #4]
   295a2:	6039      	str	r1, [r7, #0]
    p_reg->OUTSET = set_mask;
   295a4:	687b      	ldr	r3, [r7, #4]
   295a6:	683a      	ldr	r2, [r7, #0]
   295a8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
   295ac:	bf00      	nop
   295ae:	370c      	adds	r7, #12
   295b0:	46bd      	mov	sp, r7
   295b2:	bc80      	pop	{r7}
   295b4:	4770      	bx	lr

000295b6 <nrf_gpio_port_out_clear>:
{
   295b6:	b480      	push	{r7}
   295b8:	b083      	sub	sp, #12
   295ba:	af00      	add	r7, sp, #0
   295bc:	6078      	str	r0, [r7, #4]
   295be:	6039      	str	r1, [r7, #0]
    p_reg->OUTCLR = clr_mask;
   295c0:	687b      	ldr	r3, [r7, #4]
   295c2:	683a      	ldr	r2, [r7, #0]
   295c4:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
   295c8:	bf00      	nop
   295ca:	370c      	adds	r7, #12
   295cc:	46bd      	mov	sp, r7
   295ce:	bc80      	pop	{r7}
   295d0:	4770      	bx	lr

000295d2 <get_dev_data>:
{
   295d2:	b480      	push	{r7}
   295d4:	b083      	sub	sp, #12
   295d6:	af00      	add	r7, sp, #0
   295d8:	6078      	str	r0, [r7, #4]
	return dev->driver_data;
   295da:	687b      	ldr	r3, [r7, #4]
   295dc:	689b      	ldr	r3, [r3, #8]
}
   295de:	4618      	mov	r0, r3
   295e0:	370c      	adds	r7, #12
   295e2:	46bd      	mov	sp, r7
   295e4:	bc80      	pop	{r7}
   295e6:	4770      	bx	lr

000295e8 <get_dev_config>:
{
   295e8:	b480      	push	{r7}
   295ea:	b083      	sub	sp, #12
   295ec:	af00      	add	r7, sp, #0
   295ee:	6078      	str	r0, [r7, #4]
	return dev->config->config_info;
   295f0:	687b      	ldr	r3, [r7, #4]
   295f2:	681b      	ldr	r3, [r3, #0]
   295f4:	689b      	ldr	r3, [r3, #8]
}
   295f6:	4618      	mov	r0, r3
   295f8:	370c      	adds	r7, #12
   295fa:	46bd      	mov	sp, r7
   295fc:	bc80      	pop	{r7}
   295fe:	4770      	bx	lr

00029600 <uart_nrfx_config_get>:
{
   29600:	b580      	push	{r7, lr}
   29602:	b082      	sub	sp, #8
   29604:	af00      	add	r7, sp, #0
   29606:	6078      	str	r0, [r7, #4]
   29608:	6039      	str	r1, [r7, #0]
	*cfg = get_dev_data(dev)->uart_config;
   2960a:	6878      	ldr	r0, [r7, #4]
   2960c:	f7ff ffe1 	bl	295d2 <get_dev_data>
   29610:	4602      	mov	r2, r0
   29612:	683b      	ldr	r3, [r7, #0]
   29614:	e892 0003 	ldmia.w	r2, {r0, r1}
   29618:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   2961c:	2300      	movs	r3, #0
}
   2961e:	4618      	mov	r0, r3
   29620:	3708      	adds	r7, #8
   29622:	46bd      	mov	sp, r7
   29624:	bd80      	pop	{r7, pc}

00029626 <uart_nrfx_irq_tx_ready_complete>:
{
   29626:	b580      	push	{r7, lr}
   29628:	b082      	sub	sp, #8
   2962a:	af00      	add	r7, sp, #0
   2962c:	6078      	str	r0, [r7, #4]
	return event_txdrdy_check();
   2962e:	f7ec f947 	bl	158c0 <event_txdrdy_check>
   29632:	4603      	mov	r3, r0
}
   29634:	4618      	mov	r0, r3
   29636:	3708      	adds	r7, #8
   29638:	46bd      	mov	sp, r7
   2963a:	bd80      	pop	{r7, pc}

0002963c <uart_nrfx_irq_update>:
{
   2963c:	b480      	push	{r7}
   2963e:	b083      	sub	sp, #12
   29640:	af00      	add	r7, sp, #0
   29642:	6078      	str	r0, [r7, #4]
	return 1;
   29644:	2301      	movs	r3, #1
}
   29646:	4618      	mov	r0, r3
   29648:	370c      	adds	r7, #12
   2964a:	46bd      	mov	sp, r7
   2964c:	bc80      	pop	{r7}
   2964e:	4770      	bx	lr

00029650 <k_sem_init>:
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   29650:	b580      	push	{r7, lr}
   29652:	b084      	sub	sp, #16
   29654:	af00      	add	r7, sp, #0
   29656:	60f8      	str	r0, [r7, #12]
   29658:	60b9      	str	r1, [r7, #8]
   2965a:	607a      	str	r2, [r7, #4]
   2965c:	687a      	ldr	r2, [r7, #4]
   2965e:	68b9      	ldr	r1, [r7, #8]
   29660:	68f8      	ldr	r0, [r7, #12]
   29662:	f001 fe51 	bl	2b308 <z_impl_k_sem_init>
   29666:	bf00      	nop
   29668:	3710      	adds	r7, #16
   2966a:	46bd      	mov	sp, r7
   2966c:	bd80      	pop	{r7, pc}

0002966e <k_sem_take>:
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   2966e:	b580      	push	{r7, lr}
   29670:	b082      	sub	sp, #8
   29672:	af00      	add	r7, sp, #0
   29674:	6078      	str	r0, [r7, #4]
   29676:	6039      	str	r1, [r7, #0]
   29678:	6839      	ldr	r1, [r7, #0]
   2967a:	6878      	ldr	r0, [r7, #4]
   2967c:	f7ee fab4 	bl	17be8 <z_impl_k_sem_take>
   29680:	4603      	mov	r3, r0
   29682:	4618      	mov	r0, r3
   29684:	3708      	adds	r7, #8
   29686:	46bd      	mov	sp, r7
   29688:	bd80      	pop	{r7, pc}

0002968a <k_sem_give>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   2968a:	b580      	push	{r7, lr}
   2968c:	b082      	sub	sp, #8
   2968e:	af00      	add	r7, sp, #0
   29690:	6078      	str	r0, [r7, #4]
   29692:	6878      	ldr	r0, [r7, #4]
   29694:	f7ee fa86 	bl	17ba4 <z_impl_k_sem_give>
   29698:	bf00      	nop
   2969a:	3708      	adds	r7, #8
   2969c:	46bd      	mov	sp, r7
   2969e:	bd80      	pop	{r7, pc}

000296a0 <nrf_rng_task_trigger>:
{
   296a0:	b480      	push	{r7}
   296a2:	b083      	sub	sp, #12
   296a4:	af00      	add	r7, sp, #0
   296a6:	4603      	mov	r3, r0
   296a8:	71fb      	strb	r3, [r7, #7]
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
   296aa:	79fb      	ldrb	r3, [r7, #7]
   296ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   296b0:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
   296b4:	2201      	movs	r2, #1
   296b6:	601a      	str	r2, [r3, #0]
}
   296b8:	bf00      	nop
   296ba:	370c      	adds	r7, #12
   296bc:	46bd      	mov	sp, r7
   296be:	bc80      	pop	{r7}
   296c0:	4770      	bx	lr

000296c2 <nrf_rng_event_clear>:
{
   296c2:	b480      	push	{r7}
   296c4:	b085      	sub	sp, #20
   296c6:	af00      	add	r7, sp, #0
   296c8:	4603      	mov	r3, r0
   296ca:	80fb      	strh	r3, [r7, #6]
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
   296cc:	88fb      	ldrh	r3, [r7, #6]
   296ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   296d2:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
   296d6:	2200      	movs	r2, #0
   296d8:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
   296da:	88fb      	ldrh	r3, [r7, #6]
   296dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   296e0:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
   296e4:	681b      	ldr	r3, [r3, #0]
   296e6:	60fb      	str	r3, [r7, #12]
    (void)dummy;
   296e8:	68fb      	ldr	r3, [r7, #12]
}
   296ea:	bf00      	nop
   296ec:	3714      	adds	r7, #20
   296ee:	46bd      	mov	sp, r7
   296f0:	bc80      	pop	{r7}
   296f2:	4770      	bx	lr

000296f4 <nrf_rng_event_get>:
{
   296f4:	b480      	push	{r7}
   296f6:	b083      	sub	sp, #12
   296f8:	af00      	add	r7, sp, #0
   296fa:	4603      	mov	r3, r0
   296fc:	80fb      	strh	r3, [r7, #6]
    return (bool) * ((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
   296fe:	88fb      	ldrh	r3, [r7, #6]
   29700:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   29704:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
   29708:	681b      	ldr	r3, [r3, #0]
   2970a:	2b00      	cmp	r3, #0
   2970c:	bf14      	ite	ne
   2970e:	2301      	movne	r3, #1
   29710:	2300      	moveq	r3, #0
   29712:	b2db      	uxtb	r3, r3
}
   29714:	4618      	mov	r0, r3
   29716:	370c      	adds	r7, #12
   29718:	46bd      	mov	sp, r7
   2971a:	bc80      	pop	{r7}
   2971c:	4770      	bx	lr

0002971e <random_byte_get>:
{
   2971e:	b580      	push	{r7, lr}
   29720:	b086      	sub	sp, #24
   29722:	af00      	add	r7, sp, #0
	int retval = -EAGAIN;
   29724:	f06f 030a 	mvn.w	r3, #10
   29728:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
   2972a:	f04f 0320 	mov.w	r3, #32
   2972e:	f3ef 8211 	mrs	r2, BASEPRI
   29732:	f383 8811 	msr	BASEPRI, r3
   29736:	f3bf 8f6f 	isb	sy
   2973a:	60fa      	str	r2, [r7, #12]
   2973c:	60bb      	str	r3, [r7, #8]
	return key;
   2973e:	68fb      	ldr	r3, [r7, #12]
	key = irq_lock();
   29740:	613b      	str	r3, [r7, #16]
	if (nrf_rng_event_get(NRF_RNG_EVENT_VALRDY)) {
   29742:	f44f 7080 	mov.w	r0, #256	; 0x100
   29746:	f7ff ffd5 	bl	296f4 <nrf_rng_event_get>
   2974a:	4603      	mov	r3, r0
   2974c:	2b00      	cmp	r3, #0
   2974e:	d007      	beq.n	29760 <random_byte_get+0x42>
		retval = nrf_rng_random_value_get();
   29750:	f7ec fc6e 	bl	16030 <nrf_rng_random_value_get>
   29754:	4603      	mov	r3, r0
   29756:	617b      	str	r3, [r7, #20]
		nrf_rng_event_clear(NRF_RNG_EVENT_VALRDY);
   29758:	f44f 7080 	mov.w	r0, #256	; 0x100
   2975c:	f7ff ffb1 	bl	296c2 <nrf_rng_event_clear>
   29760:	693b      	ldr	r3, [r7, #16]
   29762:	607b      	str	r3, [r7, #4]
	__asm__ volatile(
   29764:	687b      	ldr	r3, [r7, #4]
   29766:	f383 8811 	msr	BASEPRI, r3
   2976a:	f3bf 8f6f 	isb	sy
	return retval;
   2976e:	697b      	ldr	r3, [r7, #20]
}
   29770:	4618      	mov	r0, r3
   29772:	3718      	adds	r7, #24
   29774:	46bd      	mov	sp, r7
   29776:	bd80      	pop	{r7, pc}

00029778 <rng_pool_get>:
{
   29778:	b580      	push	{r7, lr}
   2977a:	b092      	sub	sp, #72	; 0x48
   2977c:	af00      	add	r7, sp, #0
   2977e:	60f8      	str	r0, [r7, #12]
   29780:	60b9      	str	r1, [r7, #8]
   29782:	4613      	mov	r3, r2
   29784:	80fb      	strh	r3, [r7, #6]
	u32_t last  = rngp->last;
   29786:	68fb      	ldr	r3, [r7, #12]
   29788:	789b      	ldrb	r3, [r3, #2]
   2978a:	63fb      	str	r3, [r7, #60]	; 0x3c
	u32_t mask  = rngp->mask;
   2978c:	68fb      	ldr	r3, [r7, #12]
   2978e:	78db      	ldrb	r3, [r3, #3]
   29790:	63bb      	str	r3, [r7, #56]	; 0x38
	u8_t *dst   = buf;
   29792:	68bb      	ldr	r3, [r7, #8]
   29794:	647b      	str	r3, [r7, #68]	; 0x44
	__asm__ volatile(
   29796:	f04f 0320 	mov.w	r3, #32
   2979a:	f3ef 8211 	mrs	r2, BASEPRI
   2979e:	f383 8811 	msr	BASEPRI, r3
   297a2:	f3bf 8f6f 	isb	sy
   297a6:	62ba      	str	r2, [r7, #40]	; 0x28
   297a8:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
   297aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
	key = irq_lock();
   297ac:	637b      	str	r3, [r7, #52]	; 0x34
	first = rngp->first_alloc;
   297ae:	68fb      	ldr	r3, [r7, #12]
   297b0:	781b      	ldrb	r3, [r3, #0]
   297b2:	643b      	str	r3, [r7, #64]	; 0x40
	other_read_in_progress = (rngp->first_read ^ first);
   297b4:	68fb      	ldr	r3, [r7, #12]
   297b6:	785b      	ldrb	r3, [r3, #1]
   297b8:	461a      	mov	r2, r3
   297ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   297bc:	4053      	eors	r3, r2
   297be:	633b      	str	r3, [r7, #48]	; 0x30
	available = (last - first) & mask;
   297c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   297c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   297c4:	1ad3      	subs	r3, r2, r3
   297c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   297c8:	4013      	ands	r3, r2
   297ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (available < len) {
   297cc:	88fb      	ldrh	r3, [r7, #6]
   297ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   297d0:	429a      	cmp	r2, r3
   297d2:	d201      	bcs.n	297d8 <rng_pool_get+0x60>
		len = available;
   297d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   297d6:	80fb      	strh	r3, [r7, #6]
	rngp->first_alloc = (first + len) & mask;
   297d8:	88fb      	ldrh	r3, [r7, #6]
   297da:	b2da      	uxtb	r2, r3
   297dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   297de:	b2db      	uxtb	r3, r3
   297e0:	4413      	add	r3, r2
   297e2:	b2da      	uxtb	r2, r3
   297e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   297e6:	b2db      	uxtb	r3, r3
   297e8:	4013      	ands	r3, r2
   297ea:	b2da      	uxtb	r2, r3
   297ec:	68fb      	ldr	r3, [r7, #12]
   297ee:	701a      	strb	r2, [r3, #0]
   297f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   297f2:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
   297f4:	6a3b      	ldr	r3, [r7, #32]
   297f6:	f383 8811 	msr	BASEPRI, r3
   297fa:	f3bf 8f6f 	isb	sy
	while (likely(len--)) {
   297fe:	e00d      	b.n	2981c <rng_pool_get+0xa4>
		*dst++ = rngp->buffer[first];
   29800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   29802:	1c5a      	adds	r2, r3, #1
   29804:	647a      	str	r2, [r7, #68]	; 0x44
   29806:	68f9      	ldr	r1, [r7, #12]
   29808:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2980a:	440a      	add	r2, r1
   2980c:	3205      	adds	r2, #5
   2980e:	7812      	ldrb	r2, [r2, #0]
   29810:	701a      	strb	r2, [r3, #0]
		first = (first + 1) & mask;
   29812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29814:	3301      	adds	r3, #1
   29816:	6bba      	ldr	r2, [r7, #56]	; 0x38
   29818:	4013      	ands	r3, r2
   2981a:	643b      	str	r3, [r7, #64]	; 0x40
	while (likely(len--)) {
   2981c:	88fb      	ldrh	r3, [r7, #6]
   2981e:	1e5a      	subs	r2, r3, #1
   29820:	80fa      	strh	r2, [r7, #6]
   29822:	2b00      	cmp	r3, #0
   29824:	bf14      	ite	ne
   29826:	2301      	movne	r3, #1
   29828:	2300      	moveq	r3, #0
   2982a:	b2db      	uxtb	r3, r3
   2982c:	2b00      	cmp	r3, #0
   2982e:	d1e7      	bne.n	29800 <rng_pool_get+0x88>
	if (likely(!other_read_in_progress)) {
   29830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   29832:	2b00      	cmp	r3, #0
   29834:	bf0c      	ite	eq
   29836:	2301      	moveq	r3, #1
   29838:	2300      	movne	r3, #0
   2983a:	b2db      	uxtb	r3, r3
   2983c:	2b00      	cmp	r3, #0
   2983e:	d016      	beq.n	2986e <rng_pool_get+0xf6>
	__asm__ volatile(
   29840:	f04f 0320 	mov.w	r3, #32
   29844:	f3ef 8211 	mrs	r2, BASEPRI
   29848:	f383 8811 	msr	BASEPRI, r3
   2984c:	f3bf 8f6f 	isb	sy
   29850:	61ba      	str	r2, [r7, #24]
   29852:	617b      	str	r3, [r7, #20]
	return key;
   29854:	69bb      	ldr	r3, [r7, #24]
		key = irq_lock();
   29856:	637b      	str	r3, [r7, #52]	; 0x34
		rngp->first_read = rngp->first_alloc;
   29858:	68fb      	ldr	r3, [r7, #12]
   2985a:	781a      	ldrb	r2, [r3, #0]
   2985c:	68fb      	ldr	r3, [r7, #12]
   2985e:	705a      	strb	r2, [r3, #1]
   29860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29862:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   29864:	69fb      	ldr	r3, [r7, #28]
   29866:	f383 8811 	msr	BASEPRI, r3
   2986a:	f3bf 8f6f 	isb	sy
	len = dst - buf;
   2986e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   29870:	68bb      	ldr	r3, [r7, #8]
   29872:	1ad3      	subs	r3, r2, r3
   29874:	80fb      	strh	r3, [r7, #6]
	available = available - len;
   29876:	88fb      	ldrh	r3, [r7, #6]
   29878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2987a:	1ad3      	subs	r3, r2, r3
   2987c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (available <= rngp->threshold) {
   2987e:	68fb      	ldr	r3, [r7, #12]
   29880:	791b      	ldrb	r3, [r3, #4]
   29882:	461a      	mov	r2, r3
   29884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   29886:	4293      	cmp	r3, r2
   29888:	d802      	bhi.n	29890 <rng_pool_get+0x118>
		nrf_rng_task_trigger(NRF_RNG_TASK_START);
   2988a:	2000      	movs	r0, #0
   2988c:	f7ff ff08 	bl	296a0 <nrf_rng_task_trigger>
	return len;
   29890:	88fb      	ldrh	r3, [r7, #6]
}
   29892:	4618      	mov	r0, r3
   29894:	3748      	adds	r7, #72	; 0x48
   29896:	46bd      	mov	sp, r7
   29898:	bd80      	pop	{r7, pc}

0002989a <rng_pool_put>:
{
   2989a:	b480      	push	{r7}
   2989c:	b085      	sub	sp, #20
   2989e:	af00      	add	r7, sp, #0
   298a0:	6078      	str	r0, [r7, #4]
   298a2:	460b      	mov	r3, r1
   298a4:	70fb      	strb	r3, [r7, #3]
	u8_t first = rngp->first_read;
   298a6:	687b      	ldr	r3, [r7, #4]
   298a8:	785b      	ldrb	r3, [r3, #1]
   298aa:	73fb      	strb	r3, [r7, #15]
	u8_t last  = rngp->last;
   298ac:	687b      	ldr	r3, [r7, #4]
   298ae:	789b      	ldrb	r3, [r3, #2]
   298b0:	73bb      	strb	r3, [r7, #14]
	u8_t mask  = rngp->mask;
   298b2:	687b      	ldr	r3, [r7, #4]
   298b4:	78db      	ldrb	r3, [r3, #3]
   298b6:	737b      	strb	r3, [r7, #13]
	if (((last - first) & mask) == mask) {
   298b8:	7bba      	ldrb	r2, [r7, #14]
   298ba:	7bfb      	ldrb	r3, [r7, #15]
   298bc:	1ad2      	subs	r2, r2, r3
   298be:	7b7b      	ldrb	r3, [r7, #13]
   298c0:	401a      	ands	r2, r3
   298c2:	7b7b      	ldrb	r3, [r7, #13]
   298c4:	429a      	cmp	r2, r3
   298c6:	d102      	bne.n	298ce <rng_pool_put+0x34>
		return -ENOBUFS;
   298c8:	f06f 0368 	mvn.w	r3, #104	; 0x68
   298cc:	e010      	b.n	298f0 <rng_pool_put+0x56>
	rngp->buffer[last] = byte;
   298ce:	7bbb      	ldrb	r3, [r7, #14]
   298d0:	687a      	ldr	r2, [r7, #4]
   298d2:	4413      	add	r3, r2
   298d4:	78fa      	ldrb	r2, [r7, #3]
   298d6:	715a      	strb	r2, [r3, #5]
	rngp->last = (last + 1) & mask;
   298d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
   298dc:	3301      	adds	r3, #1
   298de:	b25a      	sxtb	r2, r3
   298e0:	f997 300d 	ldrsb.w	r3, [r7, #13]
   298e4:	4013      	ands	r3, r2
   298e6:	b25b      	sxtb	r3, r3
   298e8:	b2da      	uxtb	r2, r3
   298ea:	687b      	ldr	r3, [r7, #4]
   298ec:	709a      	strb	r2, [r3, #2]
	return 0;
   298ee:	2300      	movs	r3, #0
}
   298f0:	4618      	mov	r0, r3
   298f2:	3714      	adds	r7, #20
   298f4:	46bd      	mov	sp, r7
   298f6:	bc80      	pop	{r7}
   298f8:	4770      	bx	lr

000298fa <rng_pool_init>:
{
   298fa:	b480      	push	{r7}
   298fc:	b083      	sub	sp, #12
   298fe:	af00      	add	r7, sp, #0
   29900:	6078      	str	r0, [r7, #4]
   29902:	460b      	mov	r3, r1
   29904:	807b      	strh	r3, [r7, #2]
   29906:	4613      	mov	r3, r2
   29908:	707b      	strb	r3, [r7, #1]
	rngp->first_alloc = 0U;
   2990a:	687b      	ldr	r3, [r7, #4]
   2990c:	2200      	movs	r2, #0
   2990e:	701a      	strb	r2, [r3, #0]
	rngp->first_read  = 0U;
   29910:	687b      	ldr	r3, [r7, #4]
   29912:	2200      	movs	r2, #0
   29914:	705a      	strb	r2, [r3, #1]
	rngp->last	  = 0U;
   29916:	687b      	ldr	r3, [r7, #4]
   29918:	2200      	movs	r2, #0
   2991a:	709a      	strb	r2, [r3, #2]
	rngp->mask	  = size - 1;
   2991c:	887b      	ldrh	r3, [r7, #2]
   2991e:	b25b      	sxtb	r3, r3
   29920:	3b01      	subs	r3, #1
   29922:	b25b      	sxtb	r3, r3
   29924:	b2da      	uxtb	r2, r3
   29926:	687b      	ldr	r3, [r7, #4]
   29928:	70da      	strb	r2, [r3, #3]
	rngp->threshold	  = threshold;
   2992a:	687b      	ldr	r3, [r7, #4]
   2992c:	787a      	ldrb	r2, [r7, #1]
   2992e:	711a      	strb	r2, [r3, #4]
}
   29930:	bf00      	nop
   29932:	370c      	adds	r7, #12
   29934:	46bd      	mov	sp, r7
   29936:	bc80      	pop	{r7}
   29938:	4770      	bx	lr

0002993a <z_object_init>:
{
   2993a:	b480      	push	{r7}
   2993c:	b083      	sub	sp, #12
   2993e:	af00      	add	r7, sp, #0
   29940:	6078      	str	r0, [r7, #4]
}
   29942:	bf00      	nop
   29944:	370c      	adds	r7, #12
   29946:	46bd      	mov	sp, r7
   29948:	bc80      	pop	{r7}
   2994a:	4770      	bx	lr

0002994c <device_busy_set>:
}

#endif

void device_busy_set(struct device *busy_dev)
{
   2994c:	b480      	push	{r7}
   2994e:	b083      	sub	sp, #12
   29950:	af00      	add	r7, sp, #0
   29952:	6078      	str	r0, [r7, #4]
	atomic_set_bit((atomic_t *) __device_busy_start,
				 (busy_dev - __device_init_start));
#else
	ARG_UNUSED(busy_dev);
#endif
}
   29954:	bf00      	nop
   29956:	370c      	adds	r7, #12
   29958:	46bd      	mov	sp, r7
   2995a:	bc80      	pop	{r7}
   2995c:	4770      	bx	lr

0002995e <device_busy_clear>:

void device_busy_clear(struct device *busy_dev)
{
   2995e:	b480      	push	{r7}
   29960:	b083      	sub	sp, #12
   29962:	af00      	add	r7, sp, #0
   29964:	6078      	str	r0, [r7, #4]
	atomic_clear_bit((atomic_t *) __device_busy_start,
				 (busy_dev - __device_init_start));
#else
	ARG_UNUSED(busy_dev);
#endif
}
   29966:	bf00      	nop
   29968:	370c      	adds	r7, #12
   2996a:	46bd      	mov	sp, r7
   2996c:	bc80      	pop	{r7}
   2996e:	4770      	bx	lr

00029970 <sys_power_save_idle>:

static void sys_power_save_idle(void)
{
   29970:	b580      	push	{r7, lr}
   29972:	b082      	sub	sp, #8
   29974:	af00      	add	r7, sp, #0
	s32_t ticks = z_get_next_timeout_expiry();
   29976:	f7ee fdfd 	bl	18574 <z_get_next_timeout_expiry>
   2997a:	6078      	str	r0, [r7, #4]
	 * periods less than that.  This seems... silly, given that it
	 * saves no power and does not improve latency.  But it's an
	 * API we need to honor...
	 */
#ifdef CONFIG_SYS_CLOCK_EXISTS
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   2997c:	687b      	ldr	r3, [r7, #4]
   2997e:	2b02      	cmp	r3, #2
   29980:	dd01      	ble.n	29986 <sys_power_save_idle+0x16>
   29982:	687b      	ldr	r3, [r7, #4]
   29984:	e000      	b.n	29988 <sys_power_save_idle+0x18>
   29986:	2301      	movs	r3, #1
   29988:	2101      	movs	r1, #1
   2998a:	4618      	mov	r0, r3
   2998c:	f7ee fe26 	bl	185dc <z_set_timeout_expiry>
#endif

	set_kernel_idle_time_in_ticks(ticks);
   29990:	6878      	ldr	r0, [r7, #4]
   29992:	f7ec fcf5 	bl	16380 <set_kernel_idle_time_in_ticks>
	if (_sys_suspend(ticks) == SYS_POWER_STATE_ACTIVE) {
		sys_pm_idle_exit_notify = 0U;
		k_cpu_idle();
	}
#else
	k_cpu_idle();
   29996:	f7e8 fac9 	bl	11f2c <k_cpu_idle>
#endif
}
   2999a:	bf00      	nop
   2999c:	3708      	adds	r7, #8
   2999e:	46bd      	mov	sp, r7
   299a0:	bd80      	pop	{r7, pc}

000299a2 <z_sys_power_save_idle_exit>:
#endif

void z_sys_power_save_idle_exit(s32_t ticks)
{
   299a2:	b580      	push	{r7, lr}
   299a4:	b082      	sub	sp, #8
   299a6:	af00      	add	r7, sp, #0
   299a8:	6078      	str	r0, [r7, #4]
	if (sys_pm_idle_exit_notify) {
		_sys_resume();
	}
#endif

	z_clock_idle_exit();
   299aa:	f7f7 fcae 	bl	2130a <z_clock_idle_exit>
}
   299ae:	bf00      	nop
   299b0:	3708      	adds	r7, #8
   299b2:	46bd      	mov	sp, r7
   299b4:	bd80      	pop	{r7, pc}

000299b6 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   299b6:	b580      	push	{r7, lr}
   299b8:	b086      	sub	sp, #24
   299ba:	af00      	add	r7, sp, #0
   299bc:	60f8      	str	r0, [r7, #12]
   299be:	60b9      	str	r1, [r7, #8]
   299c0:	607a      	str	r2, [r7, #4]
	__asm__ volatile(
   299c2:	f04f 0320 	mov.w	r3, #32
   299c6:	f3ef 8211 	mrs	r2, BASEPRI
   299ca:	f383 8811 	msr	BASEPRI, r3
   299ce:	f3bf 8f6f 	isb	sy
   299d2:	617a      	str	r2, [r7, #20]
   299d4:	613b      	str	r3, [r7, #16]
		k_yield();
	}
#else
	for (;;) {
		(void)irq_lock();
		sys_power_save_idle();
   299d6:	f7ff ffcb 	bl	29970 <sys_power_save_idle>
		(void)irq_lock();
   299da:	e7f2      	b.n	299c2 <idle+0xc>

000299dc <sys_dlist_init>:
{
   299dc:	b480      	push	{r7}
   299de:	b083      	sub	sp, #12
   299e0:	af00      	add	r7, sp, #0
   299e2:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
   299e4:	687b      	ldr	r3, [r7, #4]
   299e6:	687a      	ldr	r2, [r7, #4]
   299e8:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   299ea:	687b      	ldr	r3, [r7, #4]
   299ec:	687a      	ldr	r2, [r7, #4]
   299ee:	605a      	str	r2, [r3, #4]
}
   299f0:	bf00      	nop
   299f2:	370c      	adds	r7, #12
   299f4:	46bd      	mov	sp, r7
   299f6:	bc80      	pop	{r7}
   299f8:	4770      	bx	lr

000299fa <sys_dnode_is_linked>:
{
   299fa:	b480      	push	{r7}
   299fc:	b083      	sub	sp, #12
   299fe:	af00      	add	r7, sp, #0
   29a00:	6078      	str	r0, [r7, #4]
	return node->next != NULL;
   29a02:	687b      	ldr	r3, [r7, #4]
   29a04:	681b      	ldr	r3, [r3, #0]
   29a06:	2b00      	cmp	r3, #0
   29a08:	bf14      	ite	ne
   29a0a:	2301      	movne	r3, #1
   29a0c:	2300      	moveq	r3, #0
   29a0e:	b2db      	uxtb	r3, r3
}
   29a10:	4618      	mov	r0, r3
   29a12:	370c      	adds	r7, #12
   29a14:	46bd      	mov	sp, r7
   29a16:	bc80      	pop	{r7}
   29a18:	4770      	bx	lr

00029a1a <Z_THREAD_STACK_BUFFER>:
{
   29a1a:	b480      	push	{r7}
   29a1c:	b083      	sub	sp, #12
   29a1e:	af00      	add	r7, sp, #0
   29a20:	6078      	str	r0, [r7, #4]
	return Z_ARCH_THREAD_STACK_BUFFER(sym);
   29a22:	687b      	ldr	r3, [r7, #4]
}
   29a24:	4618      	mov	r0, r3
   29a26:	370c      	adds	r7, #12
   29a28:	46bd      	mov	sp, r7
   29a2a:	bc80      	pop	{r7}
   29a2c:	4770      	bx	lr

00029a2e <k_busy_wait>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_BUSY_WAIT, k_busy_wait, u32_t, usec_to_wait)
   29a2e:	b580      	push	{r7, lr}
   29a30:	b082      	sub	sp, #8
   29a32:	af00      	add	r7, sp, #0
   29a34:	6078      	str	r0, [r7, #4]
   29a36:	6878      	ldr	r0, [r7, #4]
   29a38:	f7ee f99c 	bl	17d74 <z_impl_k_busy_wait>
   29a3c:	bf00      	nop
   29a3e:	3708      	adds	r7, #8
   29a40:	46bd      	mov	sp, r7
   29a42:	bd80      	pop	{r7, pc}

00029a44 <z_is_inactive_timeout>:
{
   29a44:	b580      	push	{r7, lr}
   29a46:	b082      	sub	sp, #8
   29a48:	af00      	add	r7, sp, #0
   29a4a:	6078      	str	r0, [r7, #4]
	return !sys_dnode_is_linked(&t->node);
   29a4c:	687b      	ldr	r3, [r7, #4]
   29a4e:	4618      	mov	r0, r3
   29a50:	f7ff ffd3 	bl	299fa <sys_dnode_is_linked>
   29a54:	4603      	mov	r3, r0
   29a56:	2b00      	cmp	r3, #0
   29a58:	bf14      	ite	ne
   29a5a:	2301      	movne	r3, #1
   29a5c:	2300      	moveq	r3, #0
   29a5e:	b2db      	uxtb	r3, r3
   29a60:	f083 0301 	eor.w	r3, r3, #1
   29a64:	b2db      	uxtb	r3, r3
   29a66:	f003 0301 	and.w	r3, r3, #1
   29a6a:	b2db      	uxtb	r3, r3
}
   29a6c:	4618      	mov	r0, r3
   29a6e:	3708      	adds	r7, #8
   29a70:	46bd      	mov	sp, r7
   29a72:	bd80      	pop	{r7, pc}

00029a74 <z_is_thread_prevented_from_running>:
{
   29a74:	b480      	push	{r7}
   29a76:	b085      	sub	sp, #20
   29a78:	af00      	add	r7, sp, #0
   29a7a:	6078      	str	r0, [r7, #4]
	u8_t state = thread->base.thread_state;
   29a7c:	687b      	ldr	r3, [r7, #4]
   29a7e:	7b5b      	ldrb	r3, [r3, #13]
   29a80:	73fb      	strb	r3, [r7, #15]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   29a82:	7bfb      	ldrb	r3, [r7, #15]
   29a84:	f003 031f 	and.w	r3, r3, #31
			 _THREAD_DUMMY | _THREAD_SUSPENDED)) != 0U;
   29a88:	2b00      	cmp	r3, #0
   29a8a:	bf14      	ite	ne
   29a8c:	2301      	movne	r3, #1
   29a8e:	2300      	moveq	r3, #0
   29a90:	b2db      	uxtb	r3, r3
}
   29a92:	4618      	mov	r0, r3
   29a94:	3714      	adds	r7, #20
   29a96:	46bd      	mov	sp, r7
   29a98:	bc80      	pop	{r7}
   29a9a:	4770      	bx	lr

00029a9c <z_is_thread_timeout_active>:
{
   29a9c:	b580      	push	{r7, lr}
   29a9e:	b082      	sub	sp, #8
   29aa0:	af00      	add	r7, sp, #0
   29aa2:	6078      	str	r0, [r7, #4]
	return !z_is_inactive_timeout(&thread->base.timeout);
   29aa4:	687b      	ldr	r3, [r7, #4]
   29aa6:	3318      	adds	r3, #24
   29aa8:	4618      	mov	r0, r3
   29aaa:	f7ff ffcb 	bl	29a44 <z_is_inactive_timeout>
   29aae:	4603      	mov	r3, r0
   29ab0:	2b00      	cmp	r3, #0
   29ab2:	bf14      	ite	ne
   29ab4:	2301      	movne	r3, #1
   29ab6:	2300      	moveq	r3, #0
   29ab8:	b2db      	uxtb	r3, r3
   29aba:	f083 0301 	eor.w	r3, r3, #1
   29abe:	b2db      	uxtb	r3, r3
   29ac0:	f003 0301 	and.w	r3, r3, #1
   29ac4:	b2db      	uxtb	r3, r3
}
   29ac6:	4618      	mov	r0, r3
   29ac8:	3708      	adds	r7, #8
   29aca:	46bd      	mov	sp, r7
   29acc:	bd80      	pop	{r7, pc}

00029ace <z_is_thread_ready>:
{
   29ace:	b580      	push	{r7, lr}
   29ad0:	b082      	sub	sp, #8
   29ad2:	af00      	add	r7, sp, #0
   29ad4:	6078      	str	r0, [r7, #4]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   29ad6:	6878      	ldr	r0, [r7, #4]
   29ad8:	f7ff ffcc 	bl	29a74 <z_is_thread_prevented_from_running>
   29adc:	4603      	mov	r3, r0
   29ade:	f083 0301 	eor.w	r3, r3, #1
   29ae2:	b2db      	uxtb	r3, r3
   29ae4:	2b00      	cmp	r3, #0
   29ae6:	d00a      	beq.n	29afe <z_is_thread_ready+0x30>
		 z_is_thread_timeout_active(thread));
   29ae8:	6878      	ldr	r0, [r7, #4]
   29aea:	f7ff ffd7 	bl	29a9c <z_is_thread_timeout_active>
   29aee:	4603      	mov	r3, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   29af0:	f083 0301 	eor.w	r3, r3, #1
   29af4:	b2db      	uxtb	r3, r3
   29af6:	2b00      	cmp	r3, #0
   29af8:	d001      	beq.n	29afe <z_is_thread_ready+0x30>
   29afa:	2301      	movs	r3, #1
   29afc:	e000      	b.n	29b00 <z_is_thread_ready+0x32>
   29afe:	2300      	movs	r3, #0
   29b00:	f003 0301 	and.w	r3, r3, #1
   29b04:	b2db      	uxtb	r3, r3
}
   29b06:	4618      	mov	r0, r3
   29b08:	3708      	adds	r7, #8
   29b0a:	46bd      	mov	sp, r7
   29b0c:	bd80      	pop	{r7, pc}

00029b0e <z_mark_thread_as_started>:
{
   29b0e:	b480      	push	{r7}
   29b10:	b083      	sub	sp, #12
   29b12:	af00      	add	r7, sp, #0
   29b14:	6078      	str	r0, [r7, #4]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29b16:	687b      	ldr	r3, [r7, #4]
   29b18:	7b5b      	ldrb	r3, [r3, #13]
   29b1a:	f023 0304 	bic.w	r3, r3, #4
   29b1e:	b2da      	uxtb	r2, r3
   29b20:	687b      	ldr	r3, [r7, #4]
   29b22:	735a      	strb	r2, [r3, #13]
}
   29b24:	bf00      	nop
   29b26:	370c      	adds	r7, #12
   29b28:	46bd      	mov	sp, r7
   29b2a:	bc80      	pop	{r7}
   29b2c:	4770      	bx	lr

00029b2e <gcov_coverage_dump>:

#ifdef CONFIG_COVERAGE_GCOV
void gcov_coverage_dump(void);
void gcov_static_init(void);
#else
void gcov_coverage_dump(void) { }
   29b2e:	b480      	push	{r7}
   29b30:	af00      	add	r7, sp, #0
   29b32:	bf00      	nop
   29b34:	46bd      	mov	sp, r7
   29b36:	bc80      	pop	{r7}
   29b38:	4770      	bx	lr

00029b3a <gcov_static_init>:
void gcov_static_init(void) { }
   29b3a:	b480      	push	{r7}
   29b3c:	af00      	add	r7, sp, #0
   29b3e:	bf00      	nop
   29b40:	46bd      	mov	sp, r7
   29b42:	bc80      	pop	{r7}
   29b44:	4770      	bx	lr

00029b46 <sys_dnode_is_linked>:
{
   29b46:	b480      	push	{r7}
   29b48:	b083      	sub	sp, #12
   29b4a:	af00      	add	r7, sp, #0
   29b4c:	6078      	str	r0, [r7, #4]
	return node->next != NULL;
   29b4e:	687b      	ldr	r3, [r7, #4]
   29b50:	681b      	ldr	r3, [r3, #0]
   29b52:	2b00      	cmp	r3, #0
   29b54:	bf14      	ite	ne
   29b56:	2301      	movne	r3, #1
   29b58:	2300      	moveq	r3, #0
   29b5a:	b2db      	uxtb	r3, r3
}
   29b5c:	4618      	mov	r0, r3
   29b5e:	370c      	adds	r7, #12
   29b60:	46bd      	mov	sp, r7
   29b62:	bc80      	pop	{r7}
   29b64:	4770      	bx	lr

00029b66 <z_object_init>:
{
   29b66:	b480      	push	{r7}
   29b68:	b083      	sub	sp, #12
   29b6a:	af00      	add	r7, sp, #0
   29b6c:	6078      	str	r0, [r7, #4]
}
   29b6e:	bf00      	nop
   29b70:	370c      	adds	r7, #12
   29b72:	46bd      	mov	sp, r7
   29b74:	bc80      	pop	{r7}
   29b76:	4770      	bx	lr

00029b78 <z_is_inactive_timeout>:
{
   29b78:	b580      	push	{r7, lr}
   29b7a:	b082      	sub	sp, #8
   29b7c:	af00      	add	r7, sp, #0
   29b7e:	6078      	str	r0, [r7, #4]
	return !sys_dnode_is_linked(&t->node);
   29b80:	687b      	ldr	r3, [r7, #4]
   29b82:	4618      	mov	r0, r3
   29b84:	f7ff ffdf 	bl	29b46 <sys_dnode_is_linked>
   29b88:	4603      	mov	r3, r0
   29b8a:	2b00      	cmp	r3, #0
   29b8c:	bf14      	ite	ne
   29b8e:	2301      	movne	r3, #1
   29b90:	2300      	moveq	r3, #0
   29b92:	b2db      	uxtb	r3, r3
   29b94:	f083 0301 	eor.w	r3, r3, #1
   29b98:	b2db      	uxtb	r3, r3
   29b9a:	f003 0301 	and.w	r3, r3, #1
   29b9e:	b2db      	uxtb	r3, r3
}
   29ba0:	4618      	mov	r0, r3
   29ba2:	3708      	adds	r7, #8
   29ba4:	46bd      	mov	sp, r7
   29ba6:	bd80      	pop	{r7, pc}

00029ba8 <z_is_thread_prevented_from_running>:
{
   29ba8:	b480      	push	{r7}
   29baa:	b085      	sub	sp, #20
   29bac:	af00      	add	r7, sp, #0
   29bae:	6078      	str	r0, [r7, #4]
	u8_t state = thread->base.thread_state;
   29bb0:	687b      	ldr	r3, [r7, #4]
   29bb2:	7b5b      	ldrb	r3, [r3, #13]
   29bb4:	73fb      	strb	r3, [r7, #15]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   29bb6:	7bfb      	ldrb	r3, [r7, #15]
   29bb8:	f003 031f 	and.w	r3, r3, #31
			 _THREAD_DUMMY | _THREAD_SUSPENDED)) != 0U;
   29bbc:	2b00      	cmp	r3, #0
   29bbe:	bf14      	ite	ne
   29bc0:	2301      	movne	r3, #1
   29bc2:	2300      	moveq	r3, #0
   29bc4:	b2db      	uxtb	r3, r3
}
   29bc6:	4618      	mov	r0, r3
   29bc8:	3714      	adds	r7, #20
   29bca:	46bd      	mov	sp, r7
   29bcc:	bc80      	pop	{r7}
   29bce:	4770      	bx	lr

00029bd0 <z_is_thread_timeout_active>:
{
   29bd0:	b580      	push	{r7, lr}
   29bd2:	b082      	sub	sp, #8
   29bd4:	af00      	add	r7, sp, #0
   29bd6:	6078      	str	r0, [r7, #4]
	return !z_is_inactive_timeout(&thread->base.timeout);
   29bd8:	687b      	ldr	r3, [r7, #4]
   29bda:	3318      	adds	r3, #24
   29bdc:	4618      	mov	r0, r3
   29bde:	f7ff ffcb 	bl	29b78 <z_is_inactive_timeout>
   29be2:	4603      	mov	r3, r0
   29be4:	2b00      	cmp	r3, #0
   29be6:	bf14      	ite	ne
   29be8:	2301      	movne	r3, #1
   29bea:	2300      	moveq	r3, #0
   29bec:	b2db      	uxtb	r3, r3
   29bee:	f083 0301 	eor.w	r3, r3, #1
   29bf2:	b2db      	uxtb	r3, r3
   29bf4:	f003 0301 	and.w	r3, r3, #1
   29bf8:	b2db      	uxtb	r3, r3
}
   29bfa:	4618      	mov	r0, r3
   29bfc:	3708      	adds	r7, #8
   29bfe:	46bd      	mov	sp, r7
   29c00:	bd80      	pop	{r7, pc}

00029c02 <z_is_thread_ready>:
{
   29c02:	b580      	push	{r7, lr}
   29c04:	b082      	sub	sp, #8
   29c06:	af00      	add	r7, sp, #0
   29c08:	6078      	str	r0, [r7, #4]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   29c0a:	6878      	ldr	r0, [r7, #4]
   29c0c:	f7ff ffcc 	bl	29ba8 <z_is_thread_prevented_from_running>
   29c10:	4603      	mov	r3, r0
   29c12:	f083 0301 	eor.w	r3, r3, #1
   29c16:	b2db      	uxtb	r3, r3
   29c18:	2b00      	cmp	r3, #0
   29c1a:	d00a      	beq.n	29c32 <z_is_thread_ready+0x30>
		 z_is_thread_timeout_active(thread));
   29c1c:	6878      	ldr	r0, [r7, #4]
   29c1e:	f7ff ffd7 	bl	29bd0 <z_is_thread_timeout_active>
   29c22:	4603      	mov	r3, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   29c24:	f083 0301 	eor.w	r3, r3, #1
   29c28:	b2db      	uxtb	r3, r3
   29c2a:	2b00      	cmp	r3, #0
   29c2c:	d001      	beq.n	29c32 <z_is_thread_ready+0x30>
   29c2e:	2301      	movs	r3, #1
   29c30:	e000      	b.n	29c34 <z_is_thread_ready+0x32>
   29c32:	2300      	movs	r3, #0
   29c34:	f003 0301 	and.w	r3, r3, #1
   29c38:	b2db      	uxtb	r3, r3
}
   29c3a:	4618      	mov	r0, r3
   29c3c:	3708      	adds	r7, #8
   29c3e:	46bd      	mov	sp, r7
   29c40:	bd80      	pop	{r7, pc}

00029c42 <create_free_list>:
{
   29c42:	b480      	push	{r7}
   29c44:	b085      	sub	sp, #20
   29c46:	af00      	add	r7, sp, #0
   29c48:	6078      	str	r0, [r7, #4]
	slab->free_list = NULL;
   29c4a:	687b      	ldr	r3, [r7, #4]
   29c4c:	2200      	movs	r2, #0
   29c4e:	615a      	str	r2, [r3, #20]
	p = slab->buffer;
   29c50:	687b      	ldr	r3, [r7, #4]
   29c52:	691b      	ldr	r3, [r3, #16]
   29c54:	60bb      	str	r3, [r7, #8]
	for (j = 0U; j < slab->num_blocks; j++) {
   29c56:	2300      	movs	r3, #0
   29c58:	60fb      	str	r3, [r7, #12]
   29c5a:	e00e      	b.n	29c7a <create_free_list+0x38>
		*(char **)p = slab->free_list;
   29c5c:	687b      	ldr	r3, [r7, #4]
   29c5e:	695a      	ldr	r2, [r3, #20]
   29c60:	68bb      	ldr	r3, [r7, #8]
   29c62:	601a      	str	r2, [r3, #0]
		slab->free_list = p;
   29c64:	687b      	ldr	r3, [r7, #4]
   29c66:	68ba      	ldr	r2, [r7, #8]
   29c68:	615a      	str	r2, [r3, #20]
		p += slab->block_size;
   29c6a:	687b      	ldr	r3, [r7, #4]
   29c6c:	68db      	ldr	r3, [r3, #12]
   29c6e:	68ba      	ldr	r2, [r7, #8]
   29c70:	4413      	add	r3, r2
   29c72:	60bb      	str	r3, [r7, #8]
	for (j = 0U; j < slab->num_blocks; j++) {
   29c74:	68fb      	ldr	r3, [r7, #12]
   29c76:	3301      	adds	r3, #1
   29c78:	60fb      	str	r3, [r7, #12]
   29c7a:	687b      	ldr	r3, [r7, #4]
   29c7c:	689b      	ldr	r3, [r3, #8]
   29c7e:	68fa      	ldr	r2, [r7, #12]
   29c80:	429a      	cmp	r2, r3
   29c82:	d3eb      	bcc.n	29c5c <create_free_list+0x1a>
}
   29c84:	bf00      	nop
   29c86:	3714      	adds	r7, #20
   29c88:	46bd      	mov	sp, r7
   29c8a:	bc80      	pop	{r7}
   29c8c:	4770      	bx	lr

00029c8e <sys_dlist_init>:
{
   29c8e:	b480      	push	{r7}
   29c90:	b083      	sub	sp, #12
   29c92:	af00      	add	r7, sp, #0
   29c94:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
   29c96:	687b      	ldr	r3, [r7, #4]
   29c98:	687a      	ldr	r2, [r7, #4]
   29c9a:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   29c9c:	687b      	ldr	r3, [r7, #4]
   29c9e:	687a      	ldr	r2, [r7, #4]
   29ca0:	605a      	str	r2, [r3, #4]
}
   29ca2:	bf00      	nop
   29ca4:	370c      	adds	r7, #12
   29ca6:	46bd      	mov	sp, r7
   29ca8:	bc80      	pop	{r7}
   29caa:	4770      	bx	lr

00029cac <sys_clock_hw_cycles_per_sec>:
{
   29cac:	b480      	push	{r7}
   29cae:	af00      	add	r7, sp, #0
	return CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
   29cb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
}
   29cb4:	4618      	mov	r0, r3
   29cb6:	46bd      	mov	sp, r7
   29cb8:	bc80      	pop	{r7}
   29cba:	4770      	bx	lr

00029cbc <z_pend_curr_unlocked>:
{
   29cbc:	b580      	push	{r7, lr}
   29cbe:	b084      	sub	sp, #16
   29cc0:	af00      	add	r7, sp, #0
   29cc2:	6078      	str	r0, [r7, #4]
   29cc4:	6039      	str	r1, [r7, #0]
   29cc6:	f04f 0320 	mov.w	r3, #32
   29cca:	f3ef 8211 	mrs	r2, BASEPRI
   29cce:	f383 8811 	msr	BASEPRI, r3
   29cd2:	f3bf 8f6f 	isb	sy
   29cd6:	60fa      	str	r2, [r7, #12]
   29cd8:	60bb      	str	r3, [r7, #8]
	return key;
   29cda:	68fb      	ldr	r3, [r7, #12]
	(void) z_pend_curr_irqlock(z_arch_irq_lock(), wait_q, timeout);
   29cdc:	683a      	ldr	r2, [r7, #0]
   29cde:	6879      	ldr	r1, [r7, #4]
   29ce0:	4618      	mov	r0, r3
   29ce2:	f7ed fbd5 	bl	17490 <z_pend_curr_irqlock>
}
   29ce6:	bf00      	nop
   29ce8:	3710      	adds	r7, #16
   29cea:	46bd      	mov	sp, r7
   29cec:	bd80      	pop	{r7, pc}

00029cee <z_waitq_init>:
#define _WAIT_Q_FOR_EACH(wq, thread_ptr) \
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
   29cee:	b580      	push	{r7, lr}
   29cf0:	b082      	sub	sp, #8
   29cf2:	af00      	add	r7, sp, #0
   29cf4:	6078      	str	r0, [r7, #4]
	sys_dlist_init(&w->waitq);
   29cf6:	687b      	ldr	r3, [r7, #4]
   29cf8:	4618      	mov	r0, r3
   29cfa:	f7ff ffc8 	bl	29c8e <sys_dlist_init>
}
   29cfe:	bf00      	nop
   29d00:	3708      	adds	r7, #8
   29d02:	46bd      	mov	sp, r7
   29d04:	bd80      	pop	{r7, pc}

00029d06 <k_mem_pool_init>:
{
   29d06:	b580      	push	{r7, lr}
   29d08:	b082      	sub	sp, #8
   29d0a:	af00      	add	r7, sp, #0
   29d0c:	6078      	str	r0, [r7, #4]
	z_waitq_init(&p->wait_q);
   29d0e:	687b      	ldr	r3, [r7, #4]
   29d10:	3314      	adds	r3, #20
   29d12:	4618      	mov	r0, r3
   29d14:	f7ff ffeb 	bl	29cee <z_waitq_init>
	z_sys_mem_pool_base_init(&p->base);
   29d18:	687b      	ldr	r3, [r7, #4]
   29d1a:	4618      	mov	r0, r3
   29d1c:	f7f1 fdfa 	bl	1b914 <z_sys_mem_pool_base_init>
}
   29d20:	bf00      	nop
   29d22:	3708      	adds	r7, #8
   29d24:	46bd      	mov	sp, r7
   29d26:	bd80      	pop	{r7, pc}

00029d28 <k_mem_pool_alloc>:
{
   29d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29d2c:	b095      	sub	sp, #84	; 0x54
   29d2e:	af02      	add	r7, sp, #8
   29d30:	6278      	str	r0, [r7, #36]	; 0x24
   29d32:	6239      	str	r1, [r7, #32]
   29d34:	61fa      	str	r2, [r7, #28]
   29d36:	61bb      	str	r3, [r7, #24]
	s64_t end = 0;
   29d38:	f04f 0300 	mov.w	r3, #0
   29d3c:	f04f 0400 	mov.w	r4, #0
   29d40:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	if (timeout > 0) {
   29d44:	69bb      	ldr	r3, [r7, #24]
   29d46:	2b00      	cmp	r3, #0
   29d48:	f340 80a6 	ble.w	29e98 <k_mem_pool_alloc+0x170>
		end = z_tick_get() + z_ms_to_ticks(timeout);
   29d4c:	f7ee fd46 	bl	187dc <z_tick_get>
   29d50:	e9c7 0100 	strd	r0, r1, [r7]
   29d54:	69bb      	ldr	r3, [r7, #24]
   29d56:	633b      	str	r3, [r7, #48]	; 0x30
	return (s32_t)ceiling_fraction(
   29d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   29d5a:	461d      	mov	r5, r3
   29d5c:	ea4f 76e5 	mov.w	r6, r5, asr #31
   29d60:	f7ff ffa4 	bl	29cac <sys_clock_hw_cycles_per_sec>
   29d64:	4603      	mov	r3, r0
   29d66:	ea4f 74e3 	mov.w	r4, r3, asr #31
   29d6a:	fb03 f106 	mul.w	r1, r3, r6
   29d6e:	fb05 f204 	mul.w	r2, r5, r4
   29d72:	440a      	add	r2, r1
   29d74:	fba5 8903 	umull	r8, r9, r5, r3
   29d78:	eb02 0309 	add.w	r3, r2, r9
   29d7c:	4699      	mov	r9, r3
   29d7e:	f7ff ff95 	bl	29cac <sys_clock_hw_cycles_per_sec>
   29d82:	4603      	mov	r3, r0
   29d84:	461d      	mov	r5, r3
   29d86:	ea4f 76e5 	mov.w	r6, r5, asr #31
   29d8a:	4629      	mov	r1, r5
   29d8c:	4632      	mov	r2, r6
   29d8e:	f04f 0300 	mov.w	r3, #0
   29d92:	f04f 0400 	mov.w	r4, #0
   29d96:	0154      	lsls	r4, r2, #5
   29d98:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
   29d9c:	014b      	lsls	r3, r1, #5
   29d9e:	4619      	mov	r1, r3
   29da0:	4622      	mov	r2, r4
   29da2:	1b49      	subs	r1, r1, r5
   29da4:	eb62 0206 	sbc.w	r2, r2, r6
   29da8:	f04f 0300 	mov.w	r3, #0
   29dac:	f04f 0400 	mov.w	r4, #0
   29db0:	0094      	lsls	r4, r2, #2
   29db2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
   29db6:	008b      	lsls	r3, r1, #2
   29db8:	4619      	mov	r1, r3
   29dba:	4622      	mov	r2, r4
   29dbc:	1949      	adds	r1, r1, r5
   29dbe:	eb46 0202 	adc.w	r2, r6, r2
   29dc2:	f04f 0300 	mov.w	r3, #0
   29dc6:	f04f 0400 	mov.w	r4, #0
   29dca:	00d4      	lsls	r4, r2, #3
   29dcc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
   29dd0:	00cb      	lsls	r3, r1, #3
   29dd2:	4619      	mov	r1, r3
   29dd4:	4622      	mov	r2, r4
   29dd6:	4608      	mov	r0, r1
   29dd8:	4611      	mov	r1, r2
   29dda:	f04f 0264 	mov.w	r2, #100	; 0x64
   29dde:	f04f 0300 	mov.w	r3, #0
   29de2:	f7d6 fc61 	bl	6a8 <__aeabi_ldivmod>
   29de6:	4603      	mov	r3, r0
   29de8:	460c      	mov	r4, r1
   29dea:	eb18 0a03 	adds.w	sl, r8, r3
   29dee:	eb49 0b04 	adc.w	fp, r9, r4
   29df2:	f11a 33ff 	adds.w	r3, sl, #4294967295	; 0xffffffff
   29df6:	613b      	str	r3, [r7, #16]
   29df8:	f14b 33ff 	adc.w	r3, fp, #4294967295	; 0xffffffff
   29dfc:	617b      	str	r3, [r7, #20]
   29dfe:	f7ff ff55 	bl	29cac <sys_clock_hw_cycles_per_sec>
   29e02:	4603      	mov	r3, r0
   29e04:	4619      	mov	r1, r3
   29e06:	ea4f 72e1 	mov.w	r2, r1, asr #31
   29e0a:	460b      	mov	r3, r1
   29e0c:	4614      	mov	r4, r2
   29e0e:	f04f 0500 	mov.w	r5, #0
   29e12:	f04f 0600 	mov.w	r6, #0
   29e16:	0166      	lsls	r6, r4, #5
   29e18:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
   29e1c:	015d      	lsls	r5, r3, #5
   29e1e:	462b      	mov	r3, r5
   29e20:	4634      	mov	r4, r6
   29e22:	1a5b      	subs	r3, r3, r1
   29e24:	eb64 0402 	sbc.w	r4, r4, r2
   29e28:	f04f 0500 	mov.w	r5, #0
   29e2c:	f04f 0600 	mov.w	r6, #0
   29e30:	00a6      	lsls	r6, r4, #2
   29e32:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
   29e36:	009d      	lsls	r5, r3, #2
   29e38:	462b      	mov	r3, r5
   29e3a:	4634      	mov	r4, r6
   29e3c:	185b      	adds	r3, r3, r1
   29e3e:	eb42 0404 	adc.w	r4, r2, r4
   29e42:	f04f 0100 	mov.w	r1, #0
   29e46:	f04f 0200 	mov.w	r2, #0
   29e4a:	00e2      	lsls	r2, r4, #3
   29e4c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   29e50:	00d9      	lsls	r1, r3, #3
   29e52:	460b      	mov	r3, r1
   29e54:	4614      	mov	r4, r2
   29e56:	4618      	mov	r0, r3
   29e58:	4621      	mov	r1, r4
   29e5a:	f04f 0264 	mov.w	r2, #100	; 0x64
   29e5e:	f04f 0300 	mov.w	r3, #0
   29e62:	f7d6 fc21 	bl	6a8 <__aeabi_ldivmod>
   29e66:	4603      	mov	r3, r0
   29e68:	460c      	mov	r4, r1
   29e6a:	461a      	mov	r2, r3
   29e6c:	4623      	mov	r3, r4
   29e6e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   29e72:	f7d6 fc19 	bl	6a8 <__aeabi_ldivmod>
   29e76:	4603      	mov	r3, r0
   29e78:	460c      	mov	r4, r1
   29e7a:	ea4f 74e3 	mov.w	r4, r3, asr #31
   29e7e:	e9d7 0100 	ldrd	r0, r1, [r7]
   29e82:	4602      	mov	r2, r0
   29e84:	18d2      	adds	r2, r2, r3
   29e86:	60ba      	str	r2, [r7, #8]
   29e88:	460a      	mov	r2, r1
   29e8a:	eb44 0202 	adc.w	r2, r4, r2
   29e8e:	60fa      	str	r2, [r7, #12]
   29e90:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
   29e94:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
		for (int i = 0; i < 2; i++) {
   29e98:	2300      	movs	r3, #0
   29e9a:	637b      	str	r3, [r7, #52]	; 0x34
   29e9c:	e012      	b.n	29ec4 <k_mem_pool_alloc+0x19c>
			ret = z_sys_mem_pool_block_alloc(&p->base, size,
   29e9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
   29ea0:	6a3b      	ldr	r3, [r7, #32]
   29ea2:	f107 0128 	add.w	r1, r7, #40	; 0x28
   29ea6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   29eaa:	9300      	str	r3, [sp, #0]
   29eac:	460b      	mov	r3, r1
   29eae:	69f9      	ldr	r1, [r7, #28]
   29eb0:	f7f1 feec 	bl	1bc8c <z_sys_mem_pool_block_alloc>
   29eb4:	6478      	str	r0, [r7, #68]	; 0x44
			if (ret != -EAGAIN) {
   29eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   29eb8:	f113 0f0b 	cmn.w	r3, #11
   29ebc:	d106      	bne.n	29ecc <k_mem_pool_alloc+0x1a4>
		for (int i = 0; i < 2; i++) {
   29ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29ec0:	3301      	adds	r3, #1
   29ec2:	637b      	str	r3, [r7, #52]	; 0x34
   29ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29ec6:	2b01      	cmp	r3, #1
   29ec8:	dde9      	ble.n	29e9e <k_mem_pool_alloc+0x176>
   29eca:	e000      	b.n	29ece <k_mem_pool_alloc+0x1a6>
				break;
   29ecc:	bf00      	nop
		if (ret == -EAGAIN) {
   29ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   29ed0:	f113 0f0b 	cmn.w	r3, #11
   29ed4:	d102      	bne.n	29edc <k_mem_pool_alloc+0x1b4>
			ret = -ENOMEM;
   29ed6:	f06f 030b 	mvn.w	r3, #11
   29eda:	647b      	str	r3, [r7, #68]	; 0x44
		block->id.pool = pool_id(p);
   29edc:	6a78      	ldr	r0, [r7, #36]	; 0x24
   29ede:	f7ec fccd 	bl	1687c <pool_id>
   29ee2:	4603      	mov	r3, r0
   29ee4:	b2da      	uxtb	r2, r3
   29ee6:	6a3b      	ldr	r3, [r7, #32]
   29ee8:	711a      	strb	r2, [r3, #4]
		block->id.level = level_num;
   29eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   29eec:	f003 030f 	and.w	r3, r3, #15
   29ef0:	b2d9      	uxtb	r1, r3
   29ef2:	6a3a      	ldr	r2, [r7, #32]
   29ef4:	7953      	ldrb	r3, [r2, #5]
   29ef6:	f361 0303 	bfi	r3, r1, #0, #4
   29efa:	7153      	strb	r3, [r2, #5]
		block->id.block = block_num;
   29efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   29efe:	f3c3 0113 	ubfx	r1, r3, #0, #20
   29f02:	6a3a      	ldr	r2, [r7, #32]
   29f04:	6853      	ldr	r3, [r2, #4]
   29f06:	f361 331f 	bfi	r3, r1, #12, #20
   29f0a:	6053      	str	r3, [r2, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   29f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   29f0e:	2b00      	cmp	r3, #0
   29f10:	d006      	beq.n	29f20 <k_mem_pool_alloc+0x1f8>
   29f12:	69bb      	ldr	r3, [r7, #24]
   29f14:	2b00      	cmp	r3, #0
   29f16:	d003      	beq.n	29f20 <k_mem_pool_alloc+0x1f8>
   29f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   29f1a:	f113 0f0c 	cmn.w	r3, #12
   29f1e:	d001      	beq.n	29f24 <k_mem_pool_alloc+0x1fc>
			return ret;
   29f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   29f22:	e016      	b.n	29f52 <k_mem_pool_alloc+0x22a>
		z_pend_curr_unlocked(&p->wait_q, timeout);
   29f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   29f26:	3314      	adds	r3, #20
   29f28:	69b9      	ldr	r1, [r7, #24]
   29f2a:	4618      	mov	r0, r3
   29f2c:	f7ff fec6 	bl	29cbc <z_pend_curr_unlocked>
		if (timeout != K_FOREVER) {
   29f30:	69bb      	ldr	r3, [r7, #24]
   29f32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29f36:	d0af      	beq.n	29e98 <k_mem_pool_alloc+0x170>
			timeout = end - z_tick_get();
   29f38:	6bbc      	ldr	r4, [r7, #56]	; 0x38
   29f3a:	f7ee fc4f 	bl	187dc <z_tick_get>
   29f3e:	4602      	mov	r2, r0
   29f40:	460b      	mov	r3, r1
   29f42:	4613      	mov	r3, r2
   29f44:	1ae3      	subs	r3, r4, r3
   29f46:	61bb      	str	r3, [r7, #24]
			if (timeout < 0) {
   29f48:	69bb      	ldr	r3, [r7, #24]
   29f4a:	2b00      	cmp	r3, #0
   29f4c:	daa4      	bge.n	29e98 <k_mem_pool_alloc+0x170>
	return -EAGAIN;
   29f4e:	f06f 030a 	mvn.w	r3, #10
}
   29f52:	4618      	mov	r0, r3
   29f54:	374c      	adds	r7, #76	; 0x4c
   29f56:	46bd      	mov	sp, r7
   29f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00029f5c <k_mem_pool_free>:
{
   29f5c:	b580      	push	{r7, lr}
   29f5e:	b082      	sub	sp, #8
   29f60:	af00      	add	r7, sp, #0
   29f62:	6078      	str	r0, [r7, #4]
	k_mem_pool_free_id(&block->id);
   29f64:	687b      	ldr	r3, [r7, #4]
   29f66:	3304      	adds	r3, #4
   29f68:	4618      	mov	r0, r3
   29f6a:	f7ec fcb5 	bl	168d8 <k_mem_pool_free_id>
}
   29f6e:	bf00      	nop
   29f70:	3708      	adds	r7, #8
   29f72:	46bd      	mov	sp, r7
   29f74:	bd80      	pop	{r7, pc}

00029f76 <k_mem_pool_malloc>:
{
   29f76:	b580      	push	{r7, lr}
   29f78:	b084      	sub	sp, #16
   29f7a:	af00      	add	r7, sp, #0
   29f7c:	6078      	str	r0, [r7, #4]
   29f7e:	6039      	str	r1, [r7, #0]
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
   29f80:	683b      	ldr	r3, [r7, #0]
   29f82:	2100      	movs	r1, #0
   29f84:	2204      	movs	r2, #4
   29f86:	189b      	adds	r3, r3, r2
   29f88:	d300      	bcc.n	29f8c <k_mem_pool_malloc+0x16>
   29f8a:	2101      	movs	r1, #1
   29f8c:	603b      	str	r3, [r7, #0]
   29f8e:	460b      	mov	r3, r1
   29f90:	f003 0301 	and.w	r3, r3, #1
   29f94:	b2db      	uxtb	r3, r3
   29f96:	2b00      	cmp	r3, #0
   29f98:	d001      	beq.n	29f9e <k_mem_pool_malloc+0x28>
		return NULL;
   29f9a:	2300      	movs	r3, #0
   29f9c:	e015      	b.n	29fca <k_mem_pool_malloc+0x54>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   29f9e:	683a      	ldr	r2, [r7, #0]
   29fa0:	f107 0108 	add.w	r1, r7, #8
   29fa4:	2300      	movs	r3, #0
   29fa6:	6878      	ldr	r0, [r7, #4]
   29fa8:	f7ff febe 	bl	29d28 <k_mem_pool_alloc>
   29fac:	4603      	mov	r3, r0
   29fae:	2b00      	cmp	r3, #0
   29fb0:	d001      	beq.n	29fb6 <k_mem_pool_malloc+0x40>
		return NULL;
   29fb2:	2300      	movs	r3, #0
   29fb4:	e009      	b.n	29fca <k_mem_pool_malloc+0x54>
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   29fb6:	68b8      	ldr	r0, [r7, #8]
   29fb8:	f107 0308 	add.w	r3, r7, #8
   29fbc:	3304      	adds	r3, #4
   29fbe:	2204      	movs	r2, #4
   29fc0:	4619      	mov	r1, r3
   29fc2:	f7d8 f851 	bl	2068 <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
   29fc6:	68bb      	ldr	r3, [r7, #8]
   29fc8:	3304      	adds	r3, #4
}
   29fca:	4618      	mov	r0, r3
   29fcc:	3710      	adds	r7, #16
   29fce:	46bd      	mov	sp, r7
   29fd0:	bd80      	pop	{r7, pc}

00029fd2 <k_free>:
{
   29fd2:	b580      	push	{r7, lr}
   29fd4:	b082      	sub	sp, #8
   29fd6:	af00      	add	r7, sp, #0
   29fd8:	6078      	str	r0, [r7, #4]
	if (ptr != NULL) {
   29fda:	687b      	ldr	r3, [r7, #4]
   29fdc:	2b00      	cmp	r3, #0
   29fde:	d005      	beq.n	29fec <k_free+0x1a>
		ptr = (char *)ptr - sizeof(struct k_mem_block_id);
   29fe0:	687b      	ldr	r3, [r7, #4]
   29fe2:	3b04      	subs	r3, #4
   29fe4:	607b      	str	r3, [r7, #4]
		k_mem_pool_free_id(ptr);
   29fe6:	6878      	ldr	r0, [r7, #4]
   29fe8:	f7ec fc76 	bl	168d8 <k_mem_pool_free_id>
}
   29fec:	bf00      	nop
   29fee:	3708      	adds	r7, #8
   29ff0:	46bd      	mov	sp, r7
   29ff2:	bd80      	pop	{r7, pc}

00029ff4 <k_calloc>:
{
   29ff4:	b590      	push	{r4, r7, lr}
   29ff6:	b085      	sub	sp, #20
   29ff8:	af00      	add	r7, sp, #0
   29ffa:	6078      	str	r0, [r7, #4]
   29ffc:	6039      	str	r1, [r7, #0]
	if (__builtin_mul_overflow(nmemb, size, &bounds)) {
   29ffe:	2000      	movs	r0, #0
   2a000:	687a      	ldr	r2, [r7, #4]
   2a002:	683b      	ldr	r3, [r7, #0]
   2a004:	fba2 1203 	umull	r1, r2, r2, r3
   2a008:	f04f 0300 	mov.w	r3, #0
   2a00c:	f04f 0400 	mov.w	r4, #0
   2a010:	0013      	movs	r3, r2
   2a012:	2400      	movs	r4, #0
   2a014:	2b00      	cmp	r3, #0
   2a016:	d000      	beq.n	2a01a <k_calloc+0x26>
   2a018:	2001      	movs	r0, #1
   2a01a:	460b      	mov	r3, r1
   2a01c:	60bb      	str	r3, [r7, #8]
   2a01e:	4603      	mov	r3, r0
   2a020:	f003 0301 	and.w	r3, r3, #1
   2a024:	b2db      	uxtb	r3, r3
   2a026:	2b00      	cmp	r3, #0
   2a028:	d001      	beq.n	2a02e <k_calloc+0x3a>
		return NULL;
   2a02a:	2300      	movs	r3, #0
   2a02c:	e00e      	b.n	2a04c <k_calloc+0x58>
	ret = k_malloc(bounds);
   2a02e:	68bb      	ldr	r3, [r7, #8]
   2a030:	4618      	mov	r0, r3
   2a032:	f7ec fc9b 	bl	1696c <k_malloc>
   2a036:	60f8      	str	r0, [r7, #12]
	if (ret != NULL) {
   2a038:	68fb      	ldr	r3, [r7, #12]
   2a03a:	2b00      	cmp	r3, #0
   2a03c:	d005      	beq.n	2a04a <k_calloc+0x56>
		(void)memset(ret, 0, bounds);
   2a03e:	68bb      	ldr	r3, [r7, #8]
   2a040:	461a      	mov	r2, r3
   2a042:	2100      	movs	r1, #0
   2a044:	68f8      	ldr	r0, [r7, #12]
   2a046:	f7d8 f837 	bl	20b8 <memset>
	return ret;
   2a04a:	68fb      	ldr	r3, [r7, #12]
}
   2a04c:	4618      	mov	r0, r3
   2a04e:	3714      	adds	r7, #20
   2a050:	46bd      	mov	sp, r7
   2a052:	bd90      	pop	{r4, r7, pc}

0002a054 <sys_dlist_init>:
{
   2a054:	b480      	push	{r7}
   2a056:	b083      	sub	sp, #12
   2a058:	af00      	add	r7, sp, #0
   2a05a:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
   2a05c:	687b      	ldr	r3, [r7, #4]
   2a05e:	687a      	ldr	r2, [r7, #4]
   2a060:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   2a062:	687b      	ldr	r3, [r7, #4]
   2a064:	687a      	ldr	r2, [r7, #4]
   2a066:	605a      	str	r2, [r3, #4]
}
   2a068:	bf00      	nop
   2a06a:	370c      	adds	r7, #12
   2a06c:	46bd      	mov	sp, r7
   2a06e:	bc80      	pop	{r7}
   2a070:	4770      	bx	lr

0002a072 <sys_dnode_is_linked>:
{
   2a072:	b480      	push	{r7}
   2a074:	b083      	sub	sp, #12
   2a076:	af00      	add	r7, sp, #0
   2a078:	6078      	str	r0, [r7, #4]
	return node->next != NULL;
   2a07a:	687b      	ldr	r3, [r7, #4]
   2a07c:	681b      	ldr	r3, [r3, #0]
   2a07e:	2b00      	cmp	r3, #0
   2a080:	bf14      	ite	ne
   2a082:	2301      	movne	r3, #1
   2a084:	2300      	moveq	r3, #0
   2a086:	b2db      	uxtb	r3, r3
}
   2a088:	4618      	mov	r0, r3
   2a08a:	370c      	adds	r7, #12
   2a08c:	46bd      	mov	sp, r7
   2a08e:	bc80      	pop	{r7}
   2a090:	4770      	bx	lr

0002a092 <sys_dlist_is_empty>:
{
   2a092:	b480      	push	{r7}
   2a094:	b083      	sub	sp, #12
   2a096:	af00      	add	r7, sp, #0
   2a098:	6078      	str	r0, [r7, #4]
	return list->head == list;
   2a09a:	687b      	ldr	r3, [r7, #4]
   2a09c:	681b      	ldr	r3, [r3, #0]
   2a09e:	687a      	ldr	r2, [r7, #4]
   2a0a0:	429a      	cmp	r2, r3
   2a0a2:	bf0c      	ite	eq
   2a0a4:	2301      	moveq	r3, #1
   2a0a6:	2300      	movne	r3, #0
   2a0a8:	b2db      	uxtb	r3, r3
}
   2a0aa:	4618      	mov	r0, r3
   2a0ac:	370c      	adds	r7, #12
   2a0ae:	46bd      	mov	sp, r7
   2a0b0:	bc80      	pop	{r7}
   2a0b2:	4770      	bx	lr

0002a0b4 <sys_dlist_peek_head>:
{
   2a0b4:	b580      	push	{r7, lr}
   2a0b6:	b082      	sub	sp, #8
   2a0b8:	af00      	add	r7, sp, #0
   2a0ba:	6078      	str	r0, [r7, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a0bc:	6878      	ldr	r0, [r7, #4]
   2a0be:	f7ff ffe8 	bl	2a092 <sys_dlist_is_empty>
   2a0c2:	4603      	mov	r3, r0
   2a0c4:	2b00      	cmp	r3, #0
   2a0c6:	d102      	bne.n	2a0ce <sys_dlist_peek_head+0x1a>
   2a0c8:	687b      	ldr	r3, [r7, #4]
   2a0ca:	681b      	ldr	r3, [r3, #0]
   2a0cc:	e000      	b.n	2a0d0 <sys_dlist_peek_head+0x1c>
   2a0ce:	2300      	movs	r3, #0
}
   2a0d0:	4618      	mov	r0, r3
   2a0d2:	3708      	adds	r7, #8
   2a0d4:	46bd      	mov	sp, r7
   2a0d6:	bd80      	pop	{r7, pc}

0002a0d8 <z_object_init>:
{
   2a0d8:	b480      	push	{r7}
   2a0da:	b083      	sub	sp, #12
   2a0dc:	af00      	add	r7, sp, #0
   2a0de:	6078      	str	r0, [r7, #4]
}
   2a0e0:	bf00      	nop
   2a0e2:	370c      	adds	r7, #12
   2a0e4:	46bd      	mov	sp, r7
   2a0e6:	bc80      	pop	{r7}
   2a0e8:	4770      	bx	lr

0002a0ea <z_is_inactive_timeout>:
{
   2a0ea:	b580      	push	{r7, lr}
   2a0ec:	b082      	sub	sp, #8
   2a0ee:	af00      	add	r7, sp, #0
   2a0f0:	6078      	str	r0, [r7, #4]
	return !sys_dnode_is_linked(&t->node);
   2a0f2:	687b      	ldr	r3, [r7, #4]
   2a0f4:	4618      	mov	r0, r3
   2a0f6:	f7ff ffbc 	bl	2a072 <sys_dnode_is_linked>
   2a0fa:	4603      	mov	r3, r0
   2a0fc:	2b00      	cmp	r3, #0
   2a0fe:	bf14      	ite	ne
   2a100:	2301      	movne	r3, #1
   2a102:	2300      	moveq	r3, #0
   2a104:	b2db      	uxtb	r3, r3
   2a106:	f083 0301 	eor.w	r3, r3, #1
   2a10a:	b2db      	uxtb	r3, r3
   2a10c:	f003 0301 	and.w	r3, r3, #1
   2a110:	b2db      	uxtb	r3, r3
}
   2a112:	4618      	mov	r0, r3
   2a114:	3708      	adds	r7, #8
   2a116:	46bd      	mov	sp, r7
   2a118:	bd80      	pop	{r7, pc}

0002a11a <z_is_thread_prevented_from_running>:
{
   2a11a:	b480      	push	{r7}
   2a11c:	b085      	sub	sp, #20
   2a11e:	af00      	add	r7, sp, #0
   2a120:	6078      	str	r0, [r7, #4]
	u8_t state = thread->base.thread_state;
   2a122:	687b      	ldr	r3, [r7, #4]
   2a124:	7b5b      	ldrb	r3, [r3, #13]
   2a126:	73fb      	strb	r3, [r7, #15]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   2a128:	7bfb      	ldrb	r3, [r7, #15]
   2a12a:	f003 031f 	and.w	r3, r3, #31
			 _THREAD_DUMMY | _THREAD_SUSPENDED)) != 0U;
   2a12e:	2b00      	cmp	r3, #0
   2a130:	bf14      	ite	ne
   2a132:	2301      	movne	r3, #1
   2a134:	2300      	moveq	r3, #0
   2a136:	b2db      	uxtb	r3, r3
}
   2a138:	4618      	mov	r0, r3
   2a13a:	3714      	adds	r7, #20
   2a13c:	46bd      	mov	sp, r7
   2a13e:	bc80      	pop	{r7}
   2a140:	4770      	bx	lr

0002a142 <z_is_thread_timeout_active>:
{
   2a142:	b580      	push	{r7, lr}
   2a144:	b082      	sub	sp, #8
   2a146:	af00      	add	r7, sp, #0
   2a148:	6078      	str	r0, [r7, #4]
	return !z_is_inactive_timeout(&thread->base.timeout);
   2a14a:	687b      	ldr	r3, [r7, #4]
   2a14c:	3318      	adds	r3, #24
   2a14e:	4618      	mov	r0, r3
   2a150:	f7ff ffcb 	bl	2a0ea <z_is_inactive_timeout>
   2a154:	4603      	mov	r3, r0
   2a156:	2b00      	cmp	r3, #0
   2a158:	bf14      	ite	ne
   2a15a:	2301      	movne	r3, #1
   2a15c:	2300      	moveq	r3, #0
   2a15e:	b2db      	uxtb	r3, r3
   2a160:	f083 0301 	eor.w	r3, r3, #1
   2a164:	b2db      	uxtb	r3, r3
   2a166:	f003 0301 	and.w	r3, r3, #1
   2a16a:	b2db      	uxtb	r3, r3
}
   2a16c:	4618      	mov	r0, r3
   2a16e:	3708      	adds	r7, #8
   2a170:	46bd      	mov	sp, r7
   2a172:	bd80      	pop	{r7, pc}

0002a174 <z_is_thread_ready>:
{
   2a174:	b580      	push	{r7, lr}
   2a176:	b082      	sub	sp, #8
   2a178:	af00      	add	r7, sp, #0
   2a17a:	6078      	str	r0, [r7, #4]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2a17c:	6878      	ldr	r0, [r7, #4]
   2a17e:	f7ff ffcc 	bl	2a11a <z_is_thread_prevented_from_running>
   2a182:	4603      	mov	r3, r0
   2a184:	f083 0301 	eor.w	r3, r3, #1
   2a188:	b2db      	uxtb	r3, r3
   2a18a:	2b00      	cmp	r3, #0
   2a18c:	d00a      	beq.n	2a1a4 <z_is_thread_ready+0x30>
		 z_is_thread_timeout_active(thread));
   2a18e:	6878      	ldr	r0, [r7, #4]
   2a190:	f7ff ffd7 	bl	2a142 <z_is_thread_timeout_active>
   2a194:	4603      	mov	r3, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2a196:	f083 0301 	eor.w	r3, r3, #1
   2a19a:	b2db      	uxtb	r3, r3
   2a19c:	2b00      	cmp	r3, #0
   2a19e:	d001      	beq.n	2a1a4 <z_is_thread_ready+0x30>
   2a1a0:	2301      	movs	r3, #1
   2a1a2:	e000      	b.n	2a1a6 <z_is_thread_ready+0x32>
   2a1a4:	2300      	movs	r3, #0
   2a1a6:	f003 0301 	and.w	r3, r3, #1
   2a1aa:	b2db      	uxtb	r3, r3
}
   2a1ac:	4618      	mov	r0, r3
   2a1ae:	3708      	adds	r7, #8
   2a1b0:	46bd      	mov	sp, r7
   2a1b2:	bd80      	pop	{r7, pc}

0002a1b4 <z_is_under_prio_ceiling>:
{
   2a1b4:	b480      	push	{r7}
   2a1b6:	b083      	sub	sp, #12
   2a1b8:	af00      	add	r7, sp, #0
   2a1ba:	6078      	str	r0, [r7, #4]
	return prio >= CONFIG_PRIORITY_CEILING;
   2a1bc:	687b      	ldr	r3, [r7, #4]
   2a1be:	43db      	mvns	r3, r3
   2a1c0:	0fdb      	lsrs	r3, r3, #31
   2a1c2:	b2db      	uxtb	r3, r3
}
   2a1c4:	4618      	mov	r0, r3
   2a1c6:	370c      	adds	r7, #12
   2a1c8:	46bd      	mov	sp, r7
   2a1ca:	bc80      	pop	{r7}
   2a1cc:	4770      	bx	lr

0002a1ce <z_get_new_prio_with_ceiling>:
{
   2a1ce:	b580      	push	{r7, lr}
   2a1d0:	b082      	sub	sp, #8
   2a1d2:	af00      	add	r7, sp, #0
   2a1d4:	6078      	str	r0, [r7, #4]
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   2a1d6:	6878      	ldr	r0, [r7, #4]
   2a1d8:	f7ff ffec 	bl	2a1b4 <z_is_under_prio_ceiling>
   2a1dc:	4603      	mov	r3, r0
   2a1de:	2b00      	cmp	r3, #0
   2a1e0:	d001      	beq.n	2a1e6 <z_get_new_prio_with_ceiling+0x18>
   2a1e2:	687b      	ldr	r3, [r7, #4]
   2a1e4:	e000      	b.n	2a1e8 <z_get_new_prio_with_ceiling+0x1a>
   2a1e6:	2300      	movs	r3, #0
}
   2a1e8:	4618      	mov	r0, r3
   2a1ea:	3708      	adds	r7, #8
   2a1ec:	46bd      	mov	sp, r7
   2a1ee:	bd80      	pop	{r7, pc}

0002a1f0 <z_is_prio1_higher_than_prio2>:
{
   2a1f0:	b480      	push	{r7}
   2a1f2:	b083      	sub	sp, #12
   2a1f4:	af00      	add	r7, sp, #0
   2a1f6:	6078      	str	r0, [r7, #4]
   2a1f8:	6039      	str	r1, [r7, #0]
	return prio1 < prio2;
   2a1fa:	687a      	ldr	r2, [r7, #4]
   2a1fc:	683b      	ldr	r3, [r7, #0]
   2a1fe:	429a      	cmp	r2, r3
   2a200:	bfb4      	ite	lt
   2a202:	2301      	movlt	r3, #1
   2a204:	2300      	movge	r3, #0
   2a206:	b2db      	uxtb	r3, r3
}
   2a208:	4618      	mov	r0, r3
   2a20a:	370c      	adds	r7, #12
   2a20c:	46bd      	mov	sp, r7
   2a20e:	bc80      	pop	{r7}
   2a210:	4770      	bx	lr

0002a212 <z_is_prio_higher>:
{
   2a212:	b580      	push	{r7, lr}
   2a214:	b082      	sub	sp, #8
   2a216:	af00      	add	r7, sp, #0
   2a218:	6078      	str	r0, [r7, #4]
   2a21a:	6039      	str	r1, [r7, #0]
	return z_is_prio1_higher_than_prio2(prio, test_prio);
   2a21c:	6839      	ldr	r1, [r7, #0]
   2a21e:	6878      	ldr	r0, [r7, #4]
   2a220:	f7ff ffe6 	bl	2a1f0 <z_is_prio1_higher_than_prio2>
   2a224:	4603      	mov	r3, r0
}
   2a226:	4618      	mov	r0, r3
   2a228:	3708      	adds	r7, #8
   2a22a:	46bd      	mov	sp, r7
   2a22c:	bd80      	pop	{r7, pc}

0002a22e <z_waitq_init>:
{
   2a22e:	b580      	push	{r7, lr}
   2a230:	b082      	sub	sp, #8
   2a232:	af00      	add	r7, sp, #0
   2a234:	6078      	str	r0, [r7, #4]
	sys_dlist_init(&w->waitq);
   2a236:	687b      	ldr	r3, [r7, #4]
   2a238:	4618      	mov	r0, r3
   2a23a:	f7ff ff0b 	bl	2a054 <sys_dlist_init>
}
   2a23e:	bf00      	nop
   2a240:	3708      	adds	r7, #8
   2a242:	46bd      	mov	sp, r7
   2a244:	bd80      	pop	{r7, pc}

0002a246 <z_waitq_head>:

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
   2a246:	b580      	push	{r7, lr}
   2a248:	b082      	sub	sp, #8
   2a24a:	af00      	add	r7, sp, #0
   2a24c:	6078      	str	r0, [r7, #4]
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   2a24e:	687b      	ldr	r3, [r7, #4]
   2a250:	4618      	mov	r0, r3
   2a252:	f7ff ff2f 	bl	2a0b4 <sys_dlist_peek_head>
   2a256:	4603      	mov	r3, r0
}
   2a258:	4618      	mov	r0, r3
   2a25a:	3708      	adds	r7, #8
   2a25c:	46bd      	mov	sp, r7
   2a25e:	bd80      	pop	{r7, pc}

0002a260 <z_impl_k_mutex_init>:
{
   2a260:	b580      	push	{r7, lr}
   2a262:	b082      	sub	sp, #8
   2a264:	af00      	add	r7, sp, #0
   2a266:	6078      	str	r0, [r7, #4]
	mutex->owner = NULL;
   2a268:	687b      	ldr	r3, [r7, #4]
   2a26a:	2200      	movs	r2, #0
   2a26c:	609a      	str	r2, [r3, #8]
	mutex->lock_count = 0U;
   2a26e:	687b      	ldr	r3, [r7, #4]
   2a270:	2200      	movs	r2, #0
   2a272:	60da      	str	r2, [r3, #12]
	z_waitq_init(&mutex->wait_q);
   2a274:	687b      	ldr	r3, [r7, #4]
   2a276:	4618      	mov	r0, r3
   2a278:	f7ff ffd9 	bl	2a22e <z_waitq_init>
	z_object_init(mutex);
   2a27c:	6878      	ldr	r0, [r7, #4]
   2a27e:	f7ff ff2b 	bl	2a0d8 <z_object_init>
}
   2a282:	bf00      	nop
   2a284:	3708      	adds	r7, #8
   2a286:	46bd      	mov	sp, r7
   2a288:	bd80      	pop	{r7, pc}

0002a28a <new_prio_for_inheritance>:
{
   2a28a:	b580      	push	{r7, lr}
   2a28c:	b084      	sub	sp, #16
   2a28e:	af00      	add	r7, sp, #0
   2a290:	6078      	str	r0, [r7, #4]
   2a292:	6039      	str	r1, [r7, #0]
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   2a294:	6839      	ldr	r1, [r7, #0]
   2a296:	6878      	ldr	r0, [r7, #4]
   2a298:	f7ff ffbb 	bl	2a212 <z_is_prio_higher>
   2a29c:	4603      	mov	r3, r0
   2a29e:	2b00      	cmp	r3, #0
   2a2a0:	d001      	beq.n	2a2a6 <new_prio_for_inheritance+0x1c>
   2a2a2:	687b      	ldr	r3, [r7, #4]
   2a2a4:	e000      	b.n	2a2a8 <new_prio_for_inheritance+0x1e>
   2a2a6:	683b      	ldr	r3, [r7, #0]
   2a2a8:	60fb      	str	r3, [r7, #12]
	new_prio = z_get_new_prio_with_ceiling(new_prio);
   2a2aa:	68f8      	ldr	r0, [r7, #12]
   2a2ac:	f7ff ff8f 	bl	2a1ce <z_get_new_prio_with_ceiling>
   2a2b0:	60f8      	str	r0, [r7, #12]
	return new_prio;
   2a2b2:	68fb      	ldr	r3, [r7, #12]
}
   2a2b4:	4618      	mov	r0, r3
   2a2b6:	3710      	adds	r7, #16
   2a2b8:	46bd      	mov	sp, r7
   2a2ba:	bd80      	pop	{r7, pc}

0002a2bc <adjust_owner_prio>:
{
   2a2bc:	b580      	push	{r7, lr}
   2a2be:	b082      	sub	sp, #8
   2a2c0:	af00      	add	r7, sp, #0
   2a2c2:	6078      	str	r0, [r7, #4]
   2a2c4:	6039      	str	r1, [r7, #0]
	if (mutex->owner->base.prio != new_prio) {
   2a2c6:	687b      	ldr	r3, [r7, #4]
   2a2c8:	689b      	ldr	r3, [r3, #8]
   2a2ca:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2a2ce:	461a      	mov	r2, r3
   2a2d0:	683b      	ldr	r3, [r7, #0]
   2a2d2:	4293      	cmp	r3, r2
   2a2d4:	d005      	beq.n	2a2e2 <adjust_owner_prio+0x26>
		z_thread_priority_set(mutex->owner, new_prio);
   2a2d6:	687b      	ldr	r3, [r7, #4]
   2a2d8:	689b      	ldr	r3, [r3, #8]
   2a2da:	6839      	ldr	r1, [r7, #0]
   2a2dc:	4618      	mov	r0, r3
   2a2de:	f7ed f989 	bl	175f4 <z_thread_priority_set>
}
   2a2e2:	bf00      	nop
   2a2e4:	3708      	adds	r7, #8
   2a2e6:	46bd      	mov	sp, r7
   2a2e8:	bd80      	pop	{r7, pc}

0002a2ea <sys_dlist_init>:
{
   2a2ea:	b480      	push	{r7}
   2a2ec:	b083      	sub	sp, #12
   2a2ee:	af00      	add	r7, sp, #0
   2a2f0:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
   2a2f2:	687b      	ldr	r3, [r7, #4]
   2a2f4:	687a      	ldr	r2, [r7, #4]
   2a2f6:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   2a2f8:	687b      	ldr	r3, [r7, #4]
   2a2fa:	687a      	ldr	r2, [r7, #4]
   2a2fc:	605a      	str	r2, [r3, #4]
}
   2a2fe:	bf00      	nop
   2a300:	370c      	adds	r7, #12
   2a302:	46bd      	mov	sp, r7
   2a304:	bc80      	pop	{r7}
   2a306:	4770      	bx	lr

0002a308 <sys_sflist_init>:
{
   2a308:	b480      	push	{r7}
   2a30a:	b083      	sub	sp, #12
   2a30c:	af00      	add	r7, sp, #0
   2a30e:	6078      	str	r0, [r7, #4]
	list->head = NULL;
   2a310:	687b      	ldr	r3, [r7, #4]
   2a312:	2200      	movs	r2, #0
   2a314:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   2a316:	687b      	ldr	r3, [r7, #4]
   2a318:	2200      	movs	r2, #0
   2a31a:	605a      	str	r2, [r3, #4]
}
   2a31c:	bf00      	nop
   2a31e:	370c      	adds	r7, #12
   2a320:	46bd      	mov	sp, r7
   2a322:	bc80      	pop	{r7}
   2a324:	4770      	bx	lr

0002a326 <z_sfnode_next_peek>:
{
   2a326:	b480      	push	{r7}
   2a328:	b083      	sub	sp, #12
   2a32a:	af00      	add	r7, sp, #0
   2a32c:	6078      	str	r0, [r7, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2a32e:	687b      	ldr	r3, [r7, #4]
   2a330:	681b      	ldr	r3, [r3, #0]
   2a332:	f023 0303 	bic.w	r3, r3, #3
}
   2a336:	4618      	mov	r0, r3
   2a338:	370c      	adds	r7, #12
   2a33a:	46bd      	mov	sp, r7
   2a33c:	bc80      	pop	{r7}
   2a33e:	4770      	bx	lr

0002a340 <z_sfnode_next_set>:
{
   2a340:	b580      	push	{r7, lr}
   2a342:	b084      	sub	sp, #16
   2a344:	af00      	add	r7, sp, #0
   2a346:	6078      	str	r0, [r7, #4]
   2a348:	6039      	str	r1, [r7, #0]
	u8_t cur_flags = sys_sfnode_flags_get(parent);
   2a34a:	6878      	ldr	r0, [r7, #4]
   2a34c:	f000 f83b 	bl	2a3c6 <sys_sfnode_flags_get>
   2a350:	4603      	mov	r3, r0
   2a352:	73fb      	strb	r3, [r7, #15]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a354:	7bfa      	ldrb	r2, [r7, #15]
   2a356:	683b      	ldr	r3, [r7, #0]
   2a358:	431a      	orrs	r2, r3
   2a35a:	687b      	ldr	r3, [r7, #4]
   2a35c:	601a      	str	r2, [r3, #0]
}
   2a35e:	bf00      	nop
   2a360:	3710      	adds	r7, #16
   2a362:	46bd      	mov	sp, r7
   2a364:	bd80      	pop	{r7, pc}

0002a366 <z_sflist_head_set>:
{
   2a366:	b480      	push	{r7}
   2a368:	b083      	sub	sp, #12
   2a36a:	af00      	add	r7, sp, #0
   2a36c:	6078      	str	r0, [r7, #4]
   2a36e:	6039      	str	r1, [r7, #0]
	list->head = node;
   2a370:	687b      	ldr	r3, [r7, #4]
   2a372:	683a      	ldr	r2, [r7, #0]
   2a374:	601a      	str	r2, [r3, #0]
}
   2a376:	bf00      	nop
   2a378:	370c      	adds	r7, #12
   2a37a:	46bd      	mov	sp, r7
   2a37c:	bc80      	pop	{r7}
   2a37e:	4770      	bx	lr

0002a380 <z_sflist_tail_set>:
{
   2a380:	b480      	push	{r7}
   2a382:	b083      	sub	sp, #12
   2a384:	af00      	add	r7, sp, #0
   2a386:	6078      	str	r0, [r7, #4]
   2a388:	6039      	str	r1, [r7, #0]
	list->tail = node;
   2a38a:	687b      	ldr	r3, [r7, #4]
   2a38c:	683a      	ldr	r2, [r7, #0]
   2a38e:	605a      	str	r2, [r3, #4]
}
   2a390:	bf00      	nop
   2a392:	370c      	adds	r7, #12
   2a394:	46bd      	mov	sp, r7
   2a396:	bc80      	pop	{r7}
   2a398:	4770      	bx	lr

0002a39a <sys_sflist_peek_head>:
{
   2a39a:	b480      	push	{r7}
   2a39c:	b083      	sub	sp, #12
   2a39e:	af00      	add	r7, sp, #0
   2a3a0:	6078      	str	r0, [r7, #4]
	return list->head;
   2a3a2:	687b      	ldr	r3, [r7, #4]
   2a3a4:	681b      	ldr	r3, [r3, #0]
}
   2a3a6:	4618      	mov	r0, r3
   2a3a8:	370c      	adds	r7, #12
   2a3aa:	46bd      	mov	sp, r7
   2a3ac:	bc80      	pop	{r7}
   2a3ae:	4770      	bx	lr

0002a3b0 <sys_sflist_peek_tail>:
{
   2a3b0:	b480      	push	{r7}
   2a3b2:	b083      	sub	sp, #12
   2a3b4:	af00      	add	r7, sp, #0
   2a3b6:	6078      	str	r0, [r7, #4]
	return list->tail;
   2a3b8:	687b      	ldr	r3, [r7, #4]
   2a3ba:	685b      	ldr	r3, [r3, #4]
}
   2a3bc:	4618      	mov	r0, r3
   2a3be:	370c      	adds	r7, #12
   2a3c0:	46bd      	mov	sp, r7
   2a3c2:	bc80      	pop	{r7}
   2a3c4:	4770      	bx	lr

0002a3c6 <sys_sfnode_flags_get>:
{
   2a3c6:	b480      	push	{r7}
   2a3c8:	b083      	sub	sp, #12
   2a3ca:	af00      	add	r7, sp, #0
   2a3cc:	6078      	str	r0, [r7, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2a3ce:	687b      	ldr	r3, [r7, #4]
   2a3d0:	681b      	ldr	r3, [r3, #0]
   2a3d2:	b2db      	uxtb	r3, r3
   2a3d4:	f003 0303 	and.w	r3, r3, #3
   2a3d8:	b2db      	uxtb	r3, r3
}
   2a3da:	4618      	mov	r0, r3
   2a3dc:	370c      	adds	r7, #12
   2a3de:	46bd      	mov	sp, r7
   2a3e0:	bc80      	pop	{r7}
   2a3e2:	4770      	bx	lr

0002a3e4 <sys_sfnode_init>:
{
   2a3e4:	b480      	push	{r7}
   2a3e6:	b083      	sub	sp, #12
   2a3e8:	af00      	add	r7, sp, #0
   2a3ea:	6078      	str	r0, [r7, #4]
   2a3ec:	460b      	mov	r3, r1
   2a3ee:	70fb      	strb	r3, [r7, #3]
	node->next_and_flags = flags;
   2a3f0:	78fa      	ldrb	r2, [r7, #3]
   2a3f2:	687b      	ldr	r3, [r7, #4]
   2a3f4:	601a      	str	r2, [r3, #0]
}
   2a3f6:	bf00      	nop
   2a3f8:	370c      	adds	r7, #12
   2a3fa:	46bd      	mov	sp, r7
   2a3fc:	bc80      	pop	{r7}
   2a3fe:	4770      	bx	lr

0002a400 <sys_sflist_is_empty>:
Z_GENLIST_IS_EMPTY(sflist)
   2a400:	b580      	push	{r7, lr}
   2a402:	b082      	sub	sp, #8
   2a404:	af00      	add	r7, sp, #0
   2a406:	6078      	str	r0, [r7, #4]
   2a408:	6878      	ldr	r0, [r7, #4]
   2a40a:	f7ff ffc6 	bl	2a39a <sys_sflist_peek_head>
   2a40e:	4603      	mov	r3, r0
   2a410:	2b00      	cmp	r3, #0
   2a412:	bf0c      	ite	eq
   2a414:	2301      	moveq	r3, #1
   2a416:	2300      	movne	r3, #0
   2a418:	b2db      	uxtb	r3, r3
   2a41a:	4618      	mov	r0, r3
   2a41c:	3708      	adds	r7, #8
   2a41e:	46bd      	mov	sp, r7
   2a420:	bd80      	pop	{r7, pc}

0002a422 <sys_sflist_prepend>:
 * @param node A pointer on the node to prepend
 */
static inline void sys_sflist_prepend(sys_sflist_t *list,
				      sys_sfnode_t *node);

Z_GENLIST_PREPEND(sflist, sfnode)
   2a422:	b580      	push	{r7, lr}
   2a424:	b082      	sub	sp, #8
   2a426:	af00      	add	r7, sp, #0
   2a428:	6078      	str	r0, [r7, #4]
   2a42a:	6039      	str	r1, [r7, #0]
   2a42c:	6878      	ldr	r0, [r7, #4]
   2a42e:	f7ff ffb4 	bl	2a39a <sys_sflist_peek_head>
   2a432:	4603      	mov	r3, r0
   2a434:	4619      	mov	r1, r3
   2a436:	6838      	ldr	r0, [r7, #0]
   2a438:	f7ff ff82 	bl	2a340 <z_sfnode_next_set>
   2a43c:	6839      	ldr	r1, [r7, #0]
   2a43e:	6878      	ldr	r0, [r7, #4]
   2a440:	f7ff ff91 	bl	2a366 <z_sflist_head_set>
   2a444:	6878      	ldr	r0, [r7, #4]
   2a446:	f7ff ffb3 	bl	2a3b0 <sys_sflist_peek_tail>
   2a44a:	4603      	mov	r3, r0
   2a44c:	2b00      	cmp	r3, #0
   2a44e:	d107      	bne.n	2a460 <sys_sflist_prepend+0x3e>
   2a450:	6878      	ldr	r0, [r7, #4]
   2a452:	f7ff ffa2 	bl	2a39a <sys_sflist_peek_head>
   2a456:	4603      	mov	r3, r0
   2a458:	4619      	mov	r1, r3
   2a45a:	6878      	ldr	r0, [r7, #4]
   2a45c:	f7ff ff90 	bl	2a380 <z_sflist_tail_set>
   2a460:	bf00      	nop
   2a462:	3708      	adds	r7, #8
   2a464:	46bd      	mov	sp, r7
   2a466:	bd80      	pop	{r7, pc}

0002a468 <sys_sflist_append>:
 * @param node A pointer on the node to append
 */
static inline void sys_sflist_append(sys_sflist_t *list,
				     sys_sfnode_t *node);

Z_GENLIST_APPEND(sflist, sfnode)
   2a468:	b580      	push	{r7, lr}
   2a46a:	b082      	sub	sp, #8
   2a46c:	af00      	add	r7, sp, #0
   2a46e:	6078      	str	r0, [r7, #4]
   2a470:	6039      	str	r1, [r7, #0]
   2a472:	2100      	movs	r1, #0
   2a474:	6838      	ldr	r0, [r7, #0]
   2a476:	f7ff ff63 	bl	2a340 <z_sfnode_next_set>
   2a47a:	6878      	ldr	r0, [r7, #4]
   2a47c:	f7ff ff98 	bl	2a3b0 <sys_sflist_peek_tail>
   2a480:	4603      	mov	r3, r0
   2a482:	2b00      	cmp	r3, #0
   2a484:	d108      	bne.n	2a498 <sys_sflist_append+0x30>
   2a486:	6839      	ldr	r1, [r7, #0]
   2a488:	6878      	ldr	r0, [r7, #4]
   2a48a:	f7ff ff79 	bl	2a380 <z_sflist_tail_set>
   2a48e:	6839      	ldr	r1, [r7, #0]
   2a490:	6878      	ldr	r0, [r7, #4]
   2a492:	f7ff ff68 	bl	2a366 <z_sflist_head_set>
   2a496:	e00b      	b.n	2a4b0 <sys_sflist_append+0x48>
   2a498:	6878      	ldr	r0, [r7, #4]
   2a49a:	f7ff ff89 	bl	2a3b0 <sys_sflist_peek_tail>
   2a49e:	4603      	mov	r3, r0
   2a4a0:	6839      	ldr	r1, [r7, #0]
   2a4a2:	4618      	mov	r0, r3
   2a4a4:	f7ff ff4c 	bl	2a340 <z_sfnode_next_set>
   2a4a8:	6839      	ldr	r1, [r7, #0]
   2a4aa:	6878      	ldr	r0, [r7, #4]
   2a4ac:	f7ff ff68 	bl	2a380 <z_sflist_tail_set>
   2a4b0:	bf00      	nop
   2a4b2:	3708      	adds	r7, #8
   2a4b4:	46bd      	mov	sp, r7
   2a4b6:	bd80      	pop	{r7, pc}

0002a4b8 <sys_sflist_insert>:
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   2a4b8:	b580      	push	{r7, lr}
   2a4ba:	b084      	sub	sp, #16
   2a4bc:	af00      	add	r7, sp, #0
   2a4be:	60f8      	str	r0, [r7, #12]
   2a4c0:	60b9      	str	r1, [r7, #8]
   2a4c2:	607a      	str	r2, [r7, #4]
   2a4c4:	68bb      	ldr	r3, [r7, #8]
   2a4c6:	2b00      	cmp	r3, #0
   2a4c8:	d104      	bne.n	2a4d4 <sys_sflist_insert+0x1c>
   2a4ca:	6879      	ldr	r1, [r7, #4]
   2a4cc:	68f8      	ldr	r0, [r7, #12]
   2a4ce:	f7ff ffa8 	bl	2a422 <sys_sflist_prepend>
   2a4d2:	e016      	b.n	2a502 <sys_sflist_insert+0x4a>
   2a4d4:	68b8      	ldr	r0, [r7, #8]
   2a4d6:	f7ff ff26 	bl	2a326 <z_sfnode_next_peek>
   2a4da:	4603      	mov	r3, r0
   2a4dc:	2b00      	cmp	r3, #0
   2a4de:	d104      	bne.n	2a4ea <sys_sflist_insert+0x32>
   2a4e0:	6879      	ldr	r1, [r7, #4]
   2a4e2:	68f8      	ldr	r0, [r7, #12]
   2a4e4:	f7ff ffc0 	bl	2a468 <sys_sflist_append>
   2a4e8:	e00b      	b.n	2a502 <sys_sflist_insert+0x4a>
   2a4ea:	68b8      	ldr	r0, [r7, #8]
   2a4ec:	f7ff ff1b 	bl	2a326 <z_sfnode_next_peek>
   2a4f0:	4603      	mov	r3, r0
   2a4f2:	4619      	mov	r1, r3
   2a4f4:	6878      	ldr	r0, [r7, #4]
   2a4f6:	f7ff ff23 	bl	2a340 <z_sfnode_next_set>
   2a4fa:	6879      	ldr	r1, [r7, #4]
   2a4fc:	68b8      	ldr	r0, [r7, #8]
   2a4fe:	f7ff ff1f 	bl	2a340 <z_sfnode_next_set>
   2a502:	bf00      	nop
   2a504:	3710      	adds	r7, #16
   2a506:	46bd      	mov	sp, r7
   2a508:	bd80      	pop	{r7, pc}

0002a50a <sys_sflist_get_not_empty>:
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2a50a:	b580      	push	{r7, lr}
   2a50c:	b084      	sub	sp, #16
   2a50e:	af00      	add	r7, sp, #0
   2a510:	6078      	str	r0, [r7, #4]
   2a512:	6878      	ldr	r0, [r7, #4]
   2a514:	f7ff ff41 	bl	2a39a <sys_sflist_peek_head>
   2a518:	60f8      	str	r0, [r7, #12]
   2a51a:	68f8      	ldr	r0, [r7, #12]
   2a51c:	f7ff ff03 	bl	2a326 <z_sfnode_next_peek>
   2a520:	4603      	mov	r3, r0
   2a522:	4619      	mov	r1, r3
   2a524:	6878      	ldr	r0, [r7, #4]
   2a526:	f7ff ff1e 	bl	2a366 <z_sflist_head_set>
   2a52a:	6878      	ldr	r0, [r7, #4]
   2a52c:	f7ff ff40 	bl	2a3b0 <sys_sflist_peek_tail>
   2a530:	4602      	mov	r2, r0
   2a532:	68fb      	ldr	r3, [r7, #12]
   2a534:	4293      	cmp	r3, r2
   2a536:	d107      	bne.n	2a548 <sys_sflist_get_not_empty+0x3e>
   2a538:	6878      	ldr	r0, [r7, #4]
   2a53a:	f7ff ff2e 	bl	2a39a <sys_sflist_peek_head>
   2a53e:	4603      	mov	r3, r0
   2a540:	4619      	mov	r1, r3
   2a542:	6878      	ldr	r0, [r7, #4]
   2a544:	f7ff ff1c 	bl	2a380 <z_sflist_tail_set>
   2a548:	68fb      	ldr	r3, [r7, #12]
   2a54a:	4618      	mov	r0, r3
   2a54c:	3710      	adds	r7, #16
   2a54e:	46bd      	mov	sp, r7
   2a550:	bd80      	pop	{r7, pc}

0002a552 <sys_sflist_get>:
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   2a552:	b580      	push	{r7, lr}
   2a554:	b082      	sub	sp, #8
   2a556:	af00      	add	r7, sp, #0
   2a558:	6078      	str	r0, [r7, #4]
   2a55a:	6878      	ldr	r0, [r7, #4]
   2a55c:	f7ff ff50 	bl	2a400 <sys_sflist_is_empty>
   2a560:	4603      	mov	r3, r0
   2a562:	2b00      	cmp	r3, #0
   2a564:	d104      	bne.n	2a570 <sys_sflist_get+0x1e>
   2a566:	6878      	ldr	r0, [r7, #4]
   2a568:	f7ff ffcf 	bl	2a50a <sys_sflist_get_not_empty>
   2a56c:	4603      	mov	r3, r0
   2a56e:	e000      	b.n	2a572 <sys_sflist_get+0x20>
   2a570:	2300      	movs	r3, #0
   2a572:	4618      	mov	r0, r3
   2a574:	3708      	adds	r7, #8
   2a576:	46bd      	mov	sp, r7
   2a578:	bd80      	pop	{r7, pc}

0002a57a <z_object_init>:
{
   2a57a:	b480      	push	{r7}
   2a57c:	b083      	sub	sp, #12
   2a57e:	af00      	add	r7, sp, #0
   2a580:	6078      	str	r0, [r7, #4]
}
   2a582:	bf00      	nop
   2a584:	370c      	adds	r7, #12
   2a586:	46bd      	mov	sp, r7
   2a588:	bc80      	pop	{r7}
   2a58a:	4770      	bx	lr

0002a58c <k_uptime_get_32>:
{
   2a58c:	b598      	push	{r3, r4, r7, lr}
   2a58e:	af00      	add	r7, sp, #0
	return (u32_t)k_uptime_get();
   2a590:	f000 f804 	bl	2a59c <k_uptime_get>
   2a594:	4603      	mov	r3, r0
   2a596:	460c      	mov	r4, r1
}
   2a598:	4618      	mov	r0, r3
   2a59a:	bd98      	pop	{r3, r4, r7, pc}

0002a59c <k_uptime_get>:
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   2a59c:	b598      	push	{r3, r4, r7, lr}
   2a59e:	af00      	add	r7, sp, #0
   2a5a0:	f001 fcdb 	bl	2bf5a <z_impl_k_uptime_get>
   2a5a4:	4603      	mov	r3, r0
   2a5a6:	460c      	mov	r4, r1
   2a5a8:	4618      	mov	r0, r3
   2a5aa:	4621      	mov	r1, r4
   2a5ac:	bd98      	pop	{r3, r4, r7, pc}

0002a5ae <k_poll>:
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
   2a5ae:	b580      	push	{r7, lr}
   2a5b0:	b084      	sub	sp, #16
   2a5b2:	af00      	add	r7, sp, #0
   2a5b4:	60f8      	str	r0, [r7, #12]
   2a5b6:	60b9      	str	r1, [r7, #8]
   2a5b8:	607a      	str	r2, [r7, #4]
   2a5ba:	687a      	ldr	r2, [r7, #4]
   2a5bc:	68b9      	ldr	r1, [r7, #8]
   2a5be:	68f8      	ldr	r0, [r7, #12]
   2a5c0:	f7ee fa4e 	bl	18a60 <z_impl_k_poll>
   2a5c4:	4603      	mov	r3, r0
   2a5c6:	4618      	mov	r0, r3
   2a5c8:	3710      	adds	r7, #16
   2a5ca:	46bd      	mov	sp, r7
   2a5cc:	bd80      	pop	{r7, pc}

0002a5ce <z_waitq_init>:
{
   2a5ce:	b580      	push	{r7, lr}
   2a5d0:	b082      	sub	sp, #8
   2a5d2:	af00      	add	r7, sp, #0
   2a5d4:	6078      	str	r0, [r7, #4]
	sys_dlist_init(&w->waitq);
   2a5d6:	687b      	ldr	r3, [r7, #4]
   2a5d8:	4618      	mov	r0, r3
   2a5da:	f7ff fe86 	bl	2a2ea <sys_dlist_init>
}
   2a5de:	bf00      	nop
   2a5e0:	3708      	adds	r7, #8
   2a5e2:	46bd      	mov	sp, r7
   2a5e4:	bd80      	pop	{r7, pc}

0002a5e6 <z_queue_node_peek>:
	sys_sfnode_t node;
	void *data;
};

void *z_queue_node_peek(sys_sfnode_t *node, bool needs_free)
{
   2a5e6:	b580      	push	{r7, lr}
   2a5e8:	b084      	sub	sp, #16
   2a5ea:	af00      	add	r7, sp, #0
   2a5ec:	6078      	str	r0, [r7, #4]
   2a5ee:	460b      	mov	r3, r1
   2a5f0:	70fb      	strb	r3, [r7, #3]
	void *ret;

	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   2a5f2:	687b      	ldr	r3, [r7, #4]
   2a5f4:	2b00      	cmp	r3, #0
   2a5f6:	d011      	beq.n	2a61c <z_queue_node_peek+0x36>
   2a5f8:	6878      	ldr	r0, [r7, #4]
   2a5fa:	f7ff fee4 	bl	2a3c6 <sys_sfnode_flags_get>
   2a5fe:	4603      	mov	r3, r0
   2a600:	2b00      	cmp	r3, #0
   2a602:	d00b      	beq.n	2a61c <z_queue_node_peek+0x36>
		 * struct, which is what got put in the queue. Free it and pass
		 * back the data pointer.
		 */
		struct alloc_node *anode;

		anode = CONTAINER_OF(node, struct alloc_node, node);
   2a604:	687b      	ldr	r3, [r7, #4]
   2a606:	60bb      	str	r3, [r7, #8]
		ret = anode->data;
   2a608:	68bb      	ldr	r3, [r7, #8]
   2a60a:	685b      	ldr	r3, [r3, #4]
   2a60c:	60fb      	str	r3, [r7, #12]
		if (needs_free) {
   2a60e:	78fb      	ldrb	r3, [r7, #3]
   2a610:	2b00      	cmp	r3, #0
   2a612:	d006      	beq.n	2a622 <z_queue_node_peek+0x3c>
			k_free(anode);
   2a614:	68b8      	ldr	r0, [r7, #8]
   2a616:	f7ff fcdc 	bl	29fd2 <k_free>
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   2a61a:	e002      	b.n	2a622 <z_queue_node_peek+0x3c>
	} else {
		/* Data was directly placed in the queue, the first 4 bytes
		 * reserved for the linked list. User mode isn't allowed to
		 * do this, although it can get data sent this way.
		 */
		ret = (void *)node;
   2a61c:	687b      	ldr	r3, [r7, #4]
   2a61e:	60fb      	str	r3, [r7, #12]
   2a620:	e000      	b.n	2a624 <z_queue_node_peek+0x3e>
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   2a622:	bf00      	nop
	}

	return ret;
   2a624:	68fb      	ldr	r3, [r7, #12]
}
   2a626:	4618      	mov	r0, r3
   2a628:	3710      	adds	r7, #16
   2a62a:	46bd      	mov	sp, r7
   2a62c:	bd80      	pop	{r7, pc}

0002a62e <z_impl_k_queue_init>:
SYS_INIT(init_queue_module, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

#endif /* CONFIG_OBJECT_TRACING */

void z_impl_k_queue_init(struct k_queue *queue)
{
   2a62e:	b580      	push	{r7, lr}
   2a630:	b082      	sub	sp, #8
   2a632:	af00      	add	r7, sp, #0
   2a634:	6078      	str	r0, [r7, #4]
	sys_sflist_init(&queue->data_q);
   2a636:	687b      	ldr	r3, [r7, #4]
   2a638:	4618      	mov	r0, r3
   2a63a:	f7ff fe65 	bl	2a308 <sys_sflist_init>
	queue->lock = (struct k_spinlock) {};
	z_waitq_init(&queue->wait_q);
   2a63e:	687b      	ldr	r3, [r7, #4]
   2a640:	3308      	adds	r3, #8
   2a642:	4618      	mov	r0, r3
   2a644:	f7ff ffc3 	bl	2a5ce <z_waitq_init>
#if defined(CONFIG_POLL)
	sys_dlist_init(&queue->poll_events);
   2a648:	687b      	ldr	r3, [r7, #4]
   2a64a:	3308      	adds	r3, #8
   2a64c:	4618      	mov	r0, r3
   2a64e:	f7ff fe4c 	bl	2a2ea <sys_dlist_init>
#endif

	SYS_TRACING_OBJ_INIT(k_queue, queue);
	z_object_init(queue);
   2a652:	6878      	ldr	r0, [r7, #4]
   2a654:	f7ff ff91 	bl	2a57a <z_object_init>
}
   2a658:	bf00      	nop
   2a65a:	3708      	adds	r7, #8
   2a65c:	46bd      	mov	sp, r7
   2a65e:	bd80      	pop	{r7, pc}

0002a660 <handle_poll_events>:
}
#endif /* CONFIG_POLL */

#ifdef CONFIG_POLL
static inline void handle_poll_events(struct k_queue *queue, u32_t state)
{
   2a660:	b580      	push	{r7, lr}
   2a662:	b082      	sub	sp, #8
   2a664:	af00      	add	r7, sp, #0
   2a666:	6078      	str	r0, [r7, #4]
   2a668:	6039      	str	r1, [r7, #0]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2a66a:	687b      	ldr	r3, [r7, #4]
   2a66c:	3308      	adds	r3, #8
   2a66e:	6839      	ldr	r1, [r7, #0]
   2a670:	4618      	mov	r0, r3
   2a672:	f001 ff27 	bl	2c4c4 <z_handle_obj_poll_events>
}
   2a676:	bf00      	nop
   2a678:	3708      	adds	r7, #8
   2a67a:	46bd      	mov	sp, r7
   2a67c:	bd80      	pop	{r7, pc}

0002a67e <z_impl_k_queue_cancel_wait>:
#endif

void z_impl_k_queue_cancel_wait(struct k_queue *queue)
{
   2a67e:	b580      	push	{r7, lr}
   2a680:	b088      	sub	sp, #32
   2a682:	af00      	add	r7, sp, #0
   2a684:	6078      	str	r0, [r7, #4]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2a686:	687b      	ldr	r3, [r7, #4]
   2a688:	3308      	adds	r3, #8
   2a68a:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   2a68c:	f04f 0320 	mov.w	r3, #32
   2a690:	f3ef 8211 	mrs	r2, BASEPRI
   2a694:	f383 8811 	msr	BASEPRI, r3
   2a698:	f3bf 8f6f 	isb	sy
   2a69c:	61ba      	str	r2, [r7, #24]
   2a69e:	617b      	str	r3, [r7, #20]
	return key;
   2a6a0:	69bb      	ldr	r3, [r7, #24]
	k.key = z_arch_irq_lock();
   2a6a2:	60fb      	str	r3, [r7, #12]
	return k;
   2a6a4:	68fb      	ldr	r3, [r7, #12]
   2a6a6:	613b      	str	r3, [r7, #16]

	if (first_pending_thread != NULL) {
		prepare_thread_to_run(first_pending_thread, NULL);
	}
#else
	handle_poll_events(queue, K_POLL_STATE_CANCELLED);
   2a6a8:	2108      	movs	r1, #8
   2a6aa:	6878      	ldr	r0, [r7, #4]
   2a6ac:	f7ff ffd8 	bl	2a660 <handle_poll_events>
#endif /* !CONFIG_POLL */

	z_reschedule(&queue->lock, key);
   2a6b0:	687b      	ldr	r3, [r7, #4]
   2a6b2:	3308      	adds	r3, #8
   2a6b4:	6939      	ldr	r1, [r7, #16]
   2a6b6:	4618      	mov	r0, r3
   2a6b8:	f000 fd1a 	bl	2b0f0 <z_reschedule>
}
   2a6bc:	bf00      	nop
   2a6be:	3720      	adds	r7, #32
   2a6c0:	46bd      	mov	sp, r7
   2a6c2:	bd80      	pop	{r7, pc}

0002a6c4 <queue_insert>:
			       struct k_queue *);
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   2a6c4:	b580      	push	{r7, lr}
   2a6c6:	b08e      	sub	sp, #56	; 0x38
   2a6c8:	af00      	add	r7, sp, #0
   2a6ca:	60f8      	str	r0, [r7, #12]
   2a6cc:	60b9      	str	r1, [r7, #8]
   2a6ce:	607a      	str	r2, [r7, #4]
   2a6d0:	70fb      	strb	r3, [r7, #3]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2a6d2:	68fb      	ldr	r3, [r7, #12]
   2a6d4:	3308      	adds	r3, #8
   2a6d6:	633b      	str	r3, [r7, #48]	; 0x30
	__asm__ volatile(
   2a6d8:	f04f 0320 	mov.w	r3, #32
   2a6dc:	f3ef 8211 	mrs	r2, BASEPRI
   2a6e0:	f383 8811 	msr	BASEPRI, r3
   2a6e4:	f3bf 8f6f 	isb	sy
   2a6e8:	62fa      	str	r2, [r7, #44]	; 0x2c
   2a6ea:	62bb      	str	r3, [r7, #40]	; 0x28
	return key;
   2a6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	k.key = z_arch_irq_lock();
   2a6ee:	61bb      	str	r3, [r7, #24]
	return k;
   2a6f0:	69bb      	ldr	r3, [r7, #24]
   2a6f2:	61fb      	str	r3, [r7, #28]
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   2a6f4:	78fb      	ldrb	r3, [r7, #3]
   2a6f6:	2b00      	cmp	r3, #0
   2a6f8:	d020      	beq.n	2a73c <queue_insert+0x78>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   2a6fa:	2008      	movs	r0, #8
   2a6fc:	f7ec f946 	bl	1698c <z_thread_malloc>
   2a700:	6378      	str	r0, [r7, #52]	; 0x34
		if (anode == NULL) {
   2a702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a704:	2b00      	cmp	r3, #0
   2a706:	d10e      	bne.n	2a726 <queue_insert+0x62>
			k_spin_unlock(&queue->lock, key);
   2a708:	68fb      	ldr	r3, [r7, #12]
   2a70a:	3308      	adds	r3, #8
   2a70c:	627b      	str	r3, [r7, #36]	; 0x24
   2a70e:	69fb      	ldr	r3, [r7, #28]
   2a710:	617b      	str	r3, [r7, #20]
	z_arch_irq_unlock(key.key);
   2a712:	697b      	ldr	r3, [r7, #20]
   2a714:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
   2a716:	6a3b      	ldr	r3, [r7, #32]
   2a718:	f383 8811 	msr	BASEPRI, r3
   2a71c:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2a720:	f06f 030b 	mvn.w	r3, #11
   2a724:	e01f      	b.n	2a766 <queue_insert+0xa2>
		}
		anode->data = data;
   2a726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a728:	687a      	ldr	r2, [r7, #4]
   2a72a:	605a      	str	r2, [r3, #4]
		sys_sfnode_init(&anode->node, 0x1);
   2a72c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a72e:	2101      	movs	r1, #1
   2a730:	4618      	mov	r0, r3
   2a732:	f7ff fe57 	bl	2a3e4 <sys_sfnode_init>
		data = anode;
   2a736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a738:	607b      	str	r3, [r7, #4]
   2a73a:	e003      	b.n	2a744 <queue_insert+0x80>
	} else {
		sys_sfnode_init(data, 0x0);
   2a73c:	2100      	movs	r1, #0
   2a73e:	6878      	ldr	r0, [r7, #4]
   2a740:	f7ff fe50 	bl	2a3e4 <sys_sfnode_init>
	}
	sys_sflist_insert(&queue->data_q, prev, data);
   2a744:	68fb      	ldr	r3, [r7, #12]
   2a746:	687a      	ldr	r2, [r7, #4]
   2a748:	68b9      	ldr	r1, [r7, #8]
   2a74a:	4618      	mov	r0, r3
   2a74c:	f7ff feb4 	bl	2a4b8 <sys_sflist_insert>

#if defined(CONFIG_POLL)
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
   2a750:	2104      	movs	r1, #4
   2a752:	68f8      	ldr	r0, [r7, #12]
   2a754:	f7ff ff84 	bl	2a660 <handle_poll_events>
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
   2a758:	68fb      	ldr	r3, [r7, #12]
   2a75a:	3308      	adds	r3, #8
   2a75c:	69f9      	ldr	r1, [r7, #28]
   2a75e:	4618      	mov	r0, r3
   2a760:	f000 fcc6 	bl	2b0f0 <z_reschedule>
	return 0;
   2a764:	2300      	movs	r3, #0
}
   2a766:	4618      	mov	r0, r3
   2a768:	3738      	adds	r7, #56	; 0x38
   2a76a:	46bd      	mov	sp, r7
   2a76c:	bd80      	pop	{r7, pc}

0002a76e <k_queue_append>:
{
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
   2a76e:	b580      	push	{r7, lr}
   2a770:	b082      	sub	sp, #8
   2a772:	af00      	add	r7, sp, #0
   2a774:	6078      	str	r0, [r7, #4]
   2a776:	6039      	str	r1, [r7, #0]
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   2a778:	687b      	ldr	r3, [r7, #4]
   2a77a:	4618      	mov	r0, r3
   2a77c:	f7ff fe18 	bl	2a3b0 <sys_sflist_peek_tail>
   2a780:	4601      	mov	r1, r0
   2a782:	2300      	movs	r3, #0
   2a784:	683a      	ldr	r2, [r7, #0]
   2a786:	6878      	ldr	r0, [r7, #4]
   2a788:	f7ff ff9c 	bl	2a6c4 <queue_insert>
			   data, false);
}
   2a78c:	bf00      	nop
   2a78e:	3708      	adds	r7, #8
   2a790:	46bd      	mov	sp, r7
   2a792:	bd80      	pop	{r7, pc}

0002a794 <k_queue_prepend>:

void k_queue_prepend(struct k_queue *queue, void *data)
{
   2a794:	b580      	push	{r7, lr}
   2a796:	b082      	sub	sp, #8
   2a798:	af00      	add	r7, sp, #0
   2a79a:	6078      	str	r0, [r7, #4]
   2a79c:	6039      	str	r1, [r7, #0]
	(void)queue_insert(queue, NULL, data, false);
   2a79e:	2300      	movs	r3, #0
   2a7a0:	683a      	ldr	r2, [r7, #0]
   2a7a2:	2100      	movs	r1, #0
   2a7a4:	6878      	ldr	r0, [r7, #4]
   2a7a6:	f7ff ff8d 	bl	2a6c4 <queue_insert>
}
   2a7aa:	bf00      	nop
   2a7ac:	3708      	adds	r7, #8
   2a7ae:	46bd      	mov	sp, r7
   2a7b0:	bd80      	pop	{r7, pc}

0002a7b2 <k_queue_poll>:
	sys_slist_init(list);
}

#if defined(CONFIG_POLL)
static void *k_queue_poll(struct k_queue *queue, s32_t timeout)
{
   2a7b2:	b580      	push	{r7, lr}
   2a7b4:	b094      	sub	sp, #80	; 0x50
   2a7b6:	af00      	add	r7, sp, #0
   2a7b8:	6078      	str	r0, [r7, #4]
   2a7ba:	6039      	str	r1, [r7, #0]
	struct k_poll_event event;
	int err, elapsed = 0, done = 0;
   2a7bc:	2300      	movs	r3, #0
   2a7be:	64fb      	str	r3, [r7, #76]	; 0x4c
   2a7c0:	2300      	movs	r3, #0
   2a7c2:	64bb      	str	r3, [r7, #72]	; 0x48
	k_spinlock_key_t key;
	void *val;
	u32_t start;

	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   2a7c4:	f107 0014 	add.w	r0, r7, #20
   2a7c8:	687b      	ldr	r3, [r7, #4]
   2a7ca:	2200      	movs	r2, #0
   2a7cc:	2104      	movs	r1, #4
   2a7ce:	f001 fd6f 	bl	2c2b0 <k_poll_event_init>
			  K_POLL_MODE_NOTIFY_ONLY, queue);

	if (timeout != K_FOREVER) {
   2a7d2:	683b      	ldr	r3, [r7, #0]
   2a7d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2a7d8:	d002      	beq.n	2a7e0 <k_queue_poll+0x2e>
		start = k_uptime_get_32();
   2a7da:	f7ff fed7 	bl	2a58c <k_uptime_get_32>
   2a7de:	6478      	str	r0, [r7, #68]	; 0x44
	}

	do {
		event.state = K_POLL_STATE_NOT_READY;
   2a7e0:	6a3b      	ldr	r3, [r7, #32]
   2a7e2:	f36f 3310 	bfc	r3, #12, #5
   2a7e6:	623b      	str	r3, [r7, #32]

		err = k_poll(&event, 1, timeout - elapsed);
   2a7e8:	683a      	ldr	r2, [r7, #0]
   2a7ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2a7ec:	1ad2      	subs	r2, r2, r3
   2a7ee:	f107 0314 	add.w	r3, r7, #20
   2a7f2:	2101      	movs	r1, #1
   2a7f4:	4618      	mov	r0, r3
   2a7f6:	f7ff feda 	bl	2a5ae <k_poll>
   2a7fa:	6438      	str	r0, [r7, #64]	; 0x40

		if (err && err != -EAGAIN) {
   2a7fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2a7fe:	2b00      	cmp	r3, #0
   2a800:	d005      	beq.n	2a80e <k_queue_poll+0x5c>
   2a802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2a804:	f113 0f0b 	cmn.w	r3, #11
   2a808:	d001      	beq.n	2a80e <k_queue_poll+0x5c>
			return NULL;
   2a80a:	2300      	movs	r3, #0
   2a80c:	e042      	b.n	2a894 <k_queue_poll+0xe2>
		}

		key = k_spin_lock(&queue->lock);
   2a80e:	687b      	ldr	r3, [r7, #4]
   2a810:	3308      	adds	r3, #8
   2a812:	633b      	str	r3, [r7, #48]	; 0x30
	__asm__ volatile(
   2a814:	f04f 0320 	mov.w	r3, #32
   2a818:	f3ef 8211 	mrs	r2, BASEPRI
   2a81c:	f383 8811 	msr	BASEPRI, r3
   2a820:	f3bf 8f6f 	isb	sy
   2a824:	62fa      	str	r2, [r7, #44]	; 0x2c
   2a826:	62bb      	str	r3, [r7, #40]	; 0x28
	return key;
   2a828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	k.key = z_arch_irq_lock();
   2a82a:	60fb      	str	r3, [r7, #12]
	return k;
   2a82c:	68fb      	ldr	r3, [r7, #12]
   2a82e:	613b      	str	r3, [r7, #16]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   2a830:	687b      	ldr	r3, [r7, #4]
   2a832:	4618      	mov	r0, r3
   2a834:	f7ff fe8d 	bl	2a552 <sys_sflist_get>
   2a838:	4603      	mov	r3, r0
   2a83a:	2101      	movs	r1, #1
   2a83c:	4618      	mov	r0, r3
   2a83e:	f7ff fed2 	bl	2a5e6 <z_queue_node_peek>
   2a842:	63f8      	str	r0, [r7, #60]	; 0x3c
		k_spin_unlock(&queue->lock, key);
   2a844:	687b      	ldr	r3, [r7, #4]
   2a846:	3308      	adds	r3, #8
   2a848:	63bb      	str	r3, [r7, #56]	; 0x38
   2a84a:	693b      	ldr	r3, [r7, #16]
   2a84c:	60bb      	str	r3, [r7, #8]
	z_arch_irq_unlock(key.key);
   2a84e:	68bb      	ldr	r3, [r7, #8]
   2a850:	637b      	str	r3, [r7, #52]	; 0x34
	__asm__ volatile(
   2a852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a854:	f383 8811 	msr	BASEPRI, r3
   2a858:	f3bf 8f6f 	isb	sy

		if ((val == NULL) && (timeout != K_FOREVER)) {
   2a85c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a85e:	2b00      	cmp	r3, #0
   2a860:	d111      	bne.n	2a886 <k_queue_poll+0xd4>
   2a862:	683b      	ldr	r3, [r7, #0]
   2a864:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2a868:	d00d      	beq.n	2a886 <k_queue_poll+0xd4>
			elapsed = k_uptime_get_32() - start;
   2a86a:	f7ff fe8f 	bl	2a58c <k_uptime_get_32>
   2a86e:	4602      	mov	r2, r0
   2a870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2a872:	1ad3      	subs	r3, r2, r3
   2a874:	64fb      	str	r3, [r7, #76]	; 0x4c
			done = elapsed > timeout;
   2a876:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   2a878:	683b      	ldr	r3, [r7, #0]
   2a87a:	429a      	cmp	r2, r3
   2a87c:	bfcc      	ite	gt
   2a87e:	2301      	movgt	r3, #1
   2a880:	2300      	movle	r3, #0
   2a882:	b2db      	uxtb	r3, r3
   2a884:	64bb      	str	r3, [r7, #72]	; 0x48
		}
	} while (!val && !done);
   2a886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a888:	2b00      	cmp	r3, #0
   2a88a:	d102      	bne.n	2a892 <k_queue_poll+0xe0>
   2a88c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2a88e:	2b00      	cmp	r3, #0
   2a890:	d0a6      	beq.n	2a7e0 <k_queue_poll+0x2e>

	return val;
   2a892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   2a894:	4618      	mov	r0, r3
   2a896:	3750      	adds	r7, #80	; 0x50
   2a898:	46bd      	mov	sp, r7
   2a89a:	bd80      	pop	{r7, pc}

0002a89c <z_impl_k_queue_get>:
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   2a89c:	b580      	push	{r7, lr}
   2a89e:	b092      	sub	sp, #72	; 0x48
   2a8a0:	af00      	add	r7, sp, #0
   2a8a2:	6078      	str	r0, [r7, #4]
   2a8a4:	6039      	str	r1, [r7, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2a8a6:	687b      	ldr	r3, [r7, #4]
   2a8a8:	3308      	adds	r3, #8
   2a8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	__asm__ volatile(
   2a8ac:	f04f 0320 	mov.w	r3, #32
   2a8b0:	f3ef 8211 	mrs	r2, BASEPRI
   2a8b4:	f383 8811 	msr	BASEPRI, r3
   2a8b8:	f3bf 8f6f 	isb	sy
   2a8bc:	63ba      	str	r2, [r7, #56]	; 0x38
   2a8be:	637b      	str	r3, [r7, #52]	; 0x34
	return key;
   2a8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	k.key = z_arch_irq_lock();
   2a8c2:	60fb      	str	r3, [r7, #12]
	return k;
   2a8c4:	68fb      	ldr	r3, [r7, #12]
   2a8c6:	61bb      	str	r3, [r7, #24]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   2a8c8:	687b      	ldr	r3, [r7, #4]
   2a8ca:	4618      	mov	r0, r3
   2a8cc:	f7ff fd98 	bl	2a400 <sys_sflist_is_empty>
   2a8d0:	4603      	mov	r3, r0
   2a8d2:	f083 0301 	eor.w	r3, r3, #1
   2a8d6:	b2db      	uxtb	r3, r3
   2a8d8:	2b00      	cmp	r3, #0
   2a8da:	d017      	beq.n	2a90c <z_impl_k_queue_get+0x70>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
   2a8dc:	687b      	ldr	r3, [r7, #4]
   2a8de:	4618      	mov	r0, r3
   2a8e0:	f7ff fe13 	bl	2a50a <sys_sflist_get_not_empty>
   2a8e4:	6478      	str	r0, [r7, #68]	; 0x44
		data = z_queue_node_peek(node, true);
   2a8e6:	2101      	movs	r1, #1
   2a8e8:	6c78      	ldr	r0, [r7, #68]	; 0x44
   2a8ea:	f7ff fe7c 	bl	2a5e6 <z_queue_node_peek>
   2a8ee:	6438      	str	r0, [r7, #64]	; 0x40
		k_spin_unlock(&queue->lock, key);
   2a8f0:	687b      	ldr	r3, [r7, #4]
   2a8f2:	3308      	adds	r3, #8
   2a8f4:	633b      	str	r3, [r7, #48]	; 0x30
   2a8f6:	69bb      	ldr	r3, [r7, #24]
   2a8f8:	60bb      	str	r3, [r7, #8]
	z_arch_irq_unlock(key.key);
   2a8fa:	68bb      	ldr	r3, [r7, #8]
   2a8fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
   2a8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a900:	f383 8811 	msr	BASEPRI, r3
   2a904:	f3bf 8f6f 	isb	sy
		return data;
   2a908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2a90a:	e021      	b.n	2a950 <z_impl_k_queue_get+0xb4>
	}

	if (timeout == K_NO_WAIT) {
   2a90c:	683b      	ldr	r3, [r7, #0]
   2a90e:	2b00      	cmp	r3, #0
   2a910:	d10d      	bne.n	2a92e <z_impl_k_queue_get+0x92>
		k_spin_unlock(&queue->lock, key);
   2a912:	687b      	ldr	r3, [r7, #4]
   2a914:	3308      	adds	r3, #8
   2a916:	62bb      	str	r3, [r7, #40]	; 0x28
   2a918:	69bb      	ldr	r3, [r7, #24]
   2a91a:	613b      	str	r3, [r7, #16]
   2a91c:	693b      	ldr	r3, [r7, #16]
   2a91e:	627b      	str	r3, [r7, #36]	; 0x24
   2a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a922:	f383 8811 	msr	BASEPRI, r3
   2a926:	f3bf 8f6f 	isb	sy
		return NULL;
   2a92a:	2300      	movs	r3, #0
   2a92c:	e010      	b.n	2a950 <z_impl_k_queue_get+0xb4>
	}

#if defined(CONFIG_POLL)
	k_spin_unlock(&queue->lock, key);
   2a92e:	687b      	ldr	r3, [r7, #4]
   2a930:	3308      	adds	r3, #8
   2a932:	623b      	str	r3, [r7, #32]
   2a934:	69bb      	ldr	r3, [r7, #24]
   2a936:	617b      	str	r3, [r7, #20]
   2a938:	697b      	ldr	r3, [r7, #20]
   2a93a:	61fb      	str	r3, [r7, #28]
   2a93c:	69fb      	ldr	r3, [r7, #28]
   2a93e:	f383 8811 	msr	BASEPRI, r3
   2a942:	f3bf 8f6f 	isb	sy

	return k_queue_poll(queue, timeout);
   2a946:	6839      	ldr	r1, [r7, #0]
   2a948:	6878      	ldr	r0, [r7, #4]
   2a94a:	f7ff ff32 	bl	2a7b2 <k_queue_poll>
   2a94e:	4603      	mov	r3, r0
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   2a950:	4618      	mov	r0, r3
   2a952:	3748      	adds	r7, #72	; 0x48
   2a954:	46bd      	mov	sp, r7
   2a956:	bd80      	pop	{r7, pc}

0002a958 <sys_dlist_init>:
{
   2a958:	b480      	push	{r7}
   2a95a:	b083      	sub	sp, #12
   2a95c:	af00      	add	r7, sp, #0
   2a95e:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
   2a960:	687b      	ldr	r3, [r7, #4]
   2a962:	687a      	ldr	r2, [r7, #4]
   2a964:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   2a966:	687b      	ldr	r3, [r7, #4]
   2a968:	687a      	ldr	r2, [r7, #4]
   2a96a:	605a      	str	r2, [r3, #4]
}
   2a96c:	bf00      	nop
   2a96e:	370c      	adds	r7, #12
   2a970:	46bd      	mov	sp, r7
   2a972:	bc80      	pop	{r7}
   2a974:	4770      	bx	lr

0002a976 <sys_dnode_init>:
{
   2a976:	b480      	push	{r7}
   2a978:	b083      	sub	sp, #12
   2a97a:	af00      	add	r7, sp, #0
   2a97c:	6078      	str	r0, [r7, #4]
	node->next = NULL;
   2a97e:	687b      	ldr	r3, [r7, #4]
   2a980:	2200      	movs	r2, #0
   2a982:	601a      	str	r2, [r3, #0]
	node->prev = NULL;
   2a984:	687b      	ldr	r3, [r7, #4]
   2a986:	2200      	movs	r2, #0
   2a988:	605a      	str	r2, [r3, #4]
}
   2a98a:	bf00      	nop
   2a98c:	370c      	adds	r7, #12
   2a98e:	46bd      	mov	sp, r7
   2a990:	bc80      	pop	{r7}
   2a992:	4770      	bx	lr

0002a994 <sys_dnode_is_linked>:
{
   2a994:	b480      	push	{r7}
   2a996:	b083      	sub	sp, #12
   2a998:	af00      	add	r7, sp, #0
   2a99a:	6078      	str	r0, [r7, #4]
	return node->next != NULL;
   2a99c:	687b      	ldr	r3, [r7, #4]
   2a99e:	681b      	ldr	r3, [r3, #0]
   2a9a0:	2b00      	cmp	r3, #0
   2a9a2:	bf14      	ite	ne
   2a9a4:	2301      	movne	r3, #1
   2a9a6:	2300      	moveq	r3, #0
   2a9a8:	b2db      	uxtb	r3, r3
}
   2a9aa:	4618      	mov	r0, r3
   2a9ac:	370c      	adds	r7, #12
   2a9ae:	46bd      	mov	sp, r7
   2a9b0:	bc80      	pop	{r7}
   2a9b2:	4770      	bx	lr

0002a9b4 <sys_dlist_is_empty>:
{
   2a9b4:	b480      	push	{r7}
   2a9b6:	b083      	sub	sp, #12
   2a9b8:	af00      	add	r7, sp, #0
   2a9ba:	6078      	str	r0, [r7, #4]
	return list->head == list;
   2a9bc:	687b      	ldr	r3, [r7, #4]
   2a9be:	681b      	ldr	r3, [r3, #0]
   2a9c0:	687a      	ldr	r2, [r7, #4]
   2a9c2:	429a      	cmp	r2, r3
   2a9c4:	bf0c      	ite	eq
   2a9c6:	2301      	moveq	r3, #1
   2a9c8:	2300      	movne	r3, #0
   2a9ca:	b2db      	uxtb	r3, r3
}
   2a9cc:	4618      	mov	r0, r3
   2a9ce:	370c      	adds	r7, #12
   2a9d0:	46bd      	mov	sp, r7
   2a9d2:	bc80      	pop	{r7}
   2a9d4:	4770      	bx	lr

0002a9d6 <sys_dlist_peek_head>:
{
   2a9d6:	b580      	push	{r7, lr}
   2a9d8:	b082      	sub	sp, #8
   2a9da:	af00      	add	r7, sp, #0
   2a9dc:	6078      	str	r0, [r7, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a9de:	6878      	ldr	r0, [r7, #4]
   2a9e0:	f7ff ffe8 	bl	2a9b4 <sys_dlist_is_empty>
   2a9e4:	4603      	mov	r3, r0
   2a9e6:	2b00      	cmp	r3, #0
   2a9e8:	d102      	bne.n	2a9f0 <sys_dlist_peek_head+0x1a>
   2a9ea:	687b      	ldr	r3, [r7, #4]
   2a9ec:	681b      	ldr	r3, [r3, #0]
   2a9ee:	e000      	b.n	2a9f2 <sys_dlist_peek_head+0x1c>
   2a9f0:	2300      	movs	r3, #0
}
   2a9f2:	4618      	mov	r0, r3
   2a9f4:	3708      	adds	r7, #8
   2a9f6:	46bd      	mov	sp, r7
   2a9f8:	bd80      	pop	{r7, pc}

0002a9fa <sys_dlist_peek_next_no_check>:
{
   2a9fa:	b480      	push	{r7}
   2a9fc:	b083      	sub	sp, #12
   2a9fe:	af00      	add	r7, sp, #0
   2aa00:	6078      	str	r0, [r7, #4]
   2aa02:	6039      	str	r1, [r7, #0]
	return (node == list->tail) ? NULL : node->next;
   2aa04:	687b      	ldr	r3, [r7, #4]
   2aa06:	685b      	ldr	r3, [r3, #4]
   2aa08:	683a      	ldr	r2, [r7, #0]
   2aa0a:	429a      	cmp	r2, r3
   2aa0c:	d002      	beq.n	2aa14 <sys_dlist_peek_next_no_check+0x1a>
   2aa0e:	683b      	ldr	r3, [r7, #0]
   2aa10:	681b      	ldr	r3, [r3, #0]
   2aa12:	e000      	b.n	2aa16 <sys_dlist_peek_next_no_check+0x1c>
   2aa14:	2300      	movs	r3, #0
}
   2aa16:	4618      	mov	r0, r3
   2aa18:	370c      	adds	r7, #12
   2aa1a:	46bd      	mov	sp, r7
   2aa1c:	bc80      	pop	{r7}
   2aa1e:	4770      	bx	lr

0002aa20 <sys_dlist_peek_next>:
{
   2aa20:	b580      	push	{r7, lr}
   2aa22:	b082      	sub	sp, #8
   2aa24:	af00      	add	r7, sp, #0
   2aa26:	6078      	str	r0, [r7, #4]
   2aa28:	6039      	str	r1, [r7, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2aa2a:	683b      	ldr	r3, [r7, #0]
   2aa2c:	2b00      	cmp	r3, #0
   2aa2e:	d005      	beq.n	2aa3c <sys_dlist_peek_next+0x1c>
   2aa30:	6839      	ldr	r1, [r7, #0]
   2aa32:	6878      	ldr	r0, [r7, #4]
   2aa34:	f7ff ffe1 	bl	2a9fa <sys_dlist_peek_next_no_check>
   2aa38:	4603      	mov	r3, r0
   2aa3a:	e000      	b.n	2aa3e <sys_dlist_peek_next+0x1e>
   2aa3c:	2300      	movs	r3, #0
}
   2aa3e:	4618      	mov	r0, r3
   2aa40:	3708      	adds	r7, #8
   2aa42:	46bd      	mov	sp, r7
   2aa44:	bd80      	pop	{r7, pc}

0002aa46 <sys_dlist_append>:
{
   2aa46:	b480      	push	{r7}
   2aa48:	b083      	sub	sp, #12
   2aa4a:	af00      	add	r7, sp, #0
   2aa4c:	6078      	str	r0, [r7, #4]
   2aa4e:	6039      	str	r1, [r7, #0]
	node->next = list;
   2aa50:	683b      	ldr	r3, [r7, #0]
   2aa52:	687a      	ldr	r2, [r7, #4]
   2aa54:	601a      	str	r2, [r3, #0]
	node->prev = list->tail;
   2aa56:	687b      	ldr	r3, [r7, #4]
   2aa58:	685a      	ldr	r2, [r3, #4]
   2aa5a:	683b      	ldr	r3, [r7, #0]
   2aa5c:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   2aa5e:	687b      	ldr	r3, [r7, #4]
   2aa60:	685b      	ldr	r3, [r3, #4]
   2aa62:	683a      	ldr	r2, [r7, #0]
   2aa64:	601a      	str	r2, [r3, #0]
	list->tail = node;
   2aa66:	687b      	ldr	r3, [r7, #4]
   2aa68:	683a      	ldr	r2, [r7, #0]
   2aa6a:	605a      	str	r2, [r3, #4]
}
   2aa6c:	bf00      	nop
   2aa6e:	370c      	adds	r7, #12
   2aa70:	46bd      	mov	sp, r7
   2aa72:	bc80      	pop	{r7}
   2aa74:	4770      	bx	lr

0002aa76 <sys_dlist_insert>:
{
   2aa76:	b480      	push	{r7}
   2aa78:	b083      	sub	sp, #12
   2aa7a:	af00      	add	r7, sp, #0
   2aa7c:	6078      	str	r0, [r7, #4]
   2aa7e:	6039      	str	r1, [r7, #0]
	node->prev = successor->prev;
   2aa80:	687b      	ldr	r3, [r7, #4]
   2aa82:	685a      	ldr	r2, [r3, #4]
   2aa84:	683b      	ldr	r3, [r7, #0]
   2aa86:	605a      	str	r2, [r3, #4]
	node->next = successor;
   2aa88:	683b      	ldr	r3, [r7, #0]
   2aa8a:	687a      	ldr	r2, [r7, #4]
   2aa8c:	601a      	str	r2, [r3, #0]
	successor->prev->next = node;
   2aa8e:	687b      	ldr	r3, [r7, #4]
   2aa90:	685b      	ldr	r3, [r3, #4]
   2aa92:	683a      	ldr	r2, [r7, #0]
   2aa94:	601a      	str	r2, [r3, #0]
	successor->prev = node;
   2aa96:	687b      	ldr	r3, [r7, #4]
   2aa98:	683a      	ldr	r2, [r7, #0]
   2aa9a:	605a      	str	r2, [r3, #4]
}
   2aa9c:	bf00      	nop
   2aa9e:	370c      	adds	r7, #12
   2aaa0:	46bd      	mov	sp, r7
   2aaa2:	bc80      	pop	{r7}
   2aaa4:	4770      	bx	lr

0002aaa6 <sys_dlist_remove>:
{
   2aaa6:	b580      	push	{r7, lr}
   2aaa8:	b082      	sub	sp, #8
   2aaaa:	af00      	add	r7, sp, #0
   2aaac:	6078      	str	r0, [r7, #4]
	node->prev->next = node->next;
   2aaae:	687b      	ldr	r3, [r7, #4]
   2aab0:	685b      	ldr	r3, [r3, #4]
   2aab2:	687a      	ldr	r2, [r7, #4]
   2aab4:	6812      	ldr	r2, [r2, #0]
   2aab6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2aab8:	687b      	ldr	r3, [r7, #4]
   2aaba:	681b      	ldr	r3, [r3, #0]
   2aabc:	687a      	ldr	r2, [r7, #4]
   2aabe:	6852      	ldr	r2, [r2, #4]
   2aac0:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
   2aac2:	6878      	ldr	r0, [r7, #4]
   2aac4:	f7ff ff57 	bl	2a976 <sys_dnode_init>
}
   2aac8:	bf00      	nop
   2aaca:	3708      	adds	r7, #8
   2aacc:	46bd      	mov	sp, r7
   2aace:	bd80      	pop	{r7, pc}

0002aad0 <sys_clock_hw_cycles_per_sec>:
{
   2aad0:	b480      	push	{r7}
   2aad2:	af00      	add	r7, sp, #0
	return CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
   2aad4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
}
   2aad8:	4618      	mov	r0, r3
   2aada:	46bd      	mov	sp, r7
   2aadc:	bc80      	pop	{r7}
   2aade:	4770      	bx	lr

0002aae0 <__ticks_to_ms>:
{
   2aae0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2aae2:	b083      	sub	sp, #12
   2aae4:	af00      	add	r7, sp, #0
   2aae6:	e9c7 0100 	strd	r0, r1, [r7]
	return (u64_t)ticks * MSEC_PER_SEC / (u64_t)CONFIG_SYS_CLOCK_TICKS_PER_SEC;
   2aaea:	e9d7 1200 	ldrd	r1, r2, [r7]
   2aaee:	460b      	mov	r3, r1
   2aaf0:	4614      	mov	r4, r2
   2aaf2:	f04f 0500 	mov.w	r5, #0
   2aaf6:	f04f 0600 	mov.w	r6, #0
   2aafa:	0166      	lsls	r6, r4, #5
   2aafc:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
   2ab00:	015d      	lsls	r5, r3, #5
   2ab02:	462b      	mov	r3, r5
   2ab04:	4634      	mov	r4, r6
   2ab06:	1a5b      	subs	r3, r3, r1
   2ab08:	eb64 0402 	sbc.w	r4, r4, r2
   2ab0c:	f04f 0500 	mov.w	r5, #0
   2ab10:	f04f 0600 	mov.w	r6, #0
   2ab14:	00a6      	lsls	r6, r4, #2
   2ab16:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
   2ab1a:	009d      	lsls	r5, r3, #2
   2ab1c:	462b      	mov	r3, r5
   2ab1e:	4634      	mov	r4, r6
   2ab20:	185b      	adds	r3, r3, r1
   2ab22:	eb42 0404 	adc.w	r4, r2, r4
   2ab26:	f04f 0100 	mov.w	r1, #0
   2ab2a:	f04f 0200 	mov.w	r2, #0
   2ab2e:	00e2      	lsls	r2, r4, #3
   2ab30:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   2ab34:	00d9      	lsls	r1, r3, #3
   2ab36:	460b      	mov	r3, r1
   2ab38:	4614      	mov	r4, r2
   2ab3a:	4618      	mov	r0, r3
   2ab3c:	4621      	mov	r1, r4
   2ab3e:	f04f 0264 	mov.w	r2, #100	; 0x64
   2ab42:	f04f 0300 	mov.w	r3, #0
   2ab46:	f7d5 fdff 	bl	748 <__aeabi_uldivmod>
   2ab4a:	4603      	mov	r3, r0
   2ab4c:	460c      	mov	r4, r1
}
   2ab4e:	4618      	mov	r0, r3
   2ab50:	4621      	mov	r1, r4
   2ab52:	370c      	adds	r7, #12
   2ab54:	46bd      	mov	sp, r7
   2ab56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002ab58 <k_yield>:
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   2ab58:	b580      	push	{r7, lr}
   2ab5a:	af00      	add	r7, sp, #0
   2ab5c:	f7ec fe9e 	bl	1789c <z_impl_k_yield>
   2ab60:	bf00      	nop
   2ab62:	bd80      	pop	{r7, pc}

0002ab64 <z_is_inactive_timeout>:
{
   2ab64:	b580      	push	{r7, lr}
   2ab66:	b082      	sub	sp, #8
   2ab68:	af00      	add	r7, sp, #0
   2ab6a:	6078      	str	r0, [r7, #4]
	return !sys_dnode_is_linked(&t->node);
   2ab6c:	687b      	ldr	r3, [r7, #4]
   2ab6e:	4618      	mov	r0, r3
   2ab70:	f7ff ff10 	bl	2a994 <sys_dnode_is_linked>
   2ab74:	4603      	mov	r3, r0
   2ab76:	2b00      	cmp	r3, #0
   2ab78:	bf14      	ite	ne
   2ab7a:	2301      	movne	r3, #1
   2ab7c:	2300      	moveq	r3, #0
   2ab7e:	b2db      	uxtb	r3, r3
   2ab80:	f083 0301 	eor.w	r3, r3, #1
   2ab84:	b2db      	uxtb	r3, r3
   2ab86:	f003 0301 	and.w	r3, r3, #1
   2ab8a:	b2db      	uxtb	r3, r3
}
   2ab8c:	4618      	mov	r0, r3
   2ab8e:	3708      	adds	r7, #8
   2ab90:	46bd      	mov	sp, r7
   2ab92:	bd80      	pop	{r7, pc}

0002ab94 <z_abort_thread_timeout>:

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
   2ab94:	b580      	push	{r7, lr}
   2ab96:	b082      	sub	sp, #8
   2ab98:	af00      	add	r7, sp, #0
   2ab9a:	6078      	str	r0, [r7, #4]
	return z_abort_timeout(&thread->base.timeout);
   2ab9c:	687b      	ldr	r3, [r7, #4]
   2ab9e:	3318      	adds	r3, #24
   2aba0:	4618      	mov	r0, r3
   2aba2:	f7ed fc57 	bl	18454 <z_abort_timeout>
   2aba6:	4603      	mov	r3, r0
}
   2aba8:	4618      	mov	r0, r3
   2abaa:	3708      	adds	r7, #8
   2abac:	46bd      	mov	sp, r7
   2abae:	bd80      	pop	{r7, pc}

0002abb0 <z_reschedule_unlocked>:
{
   2abb0:	b580      	push	{r7, lr}
   2abb2:	b082      	sub	sp, #8
   2abb4:	af00      	add	r7, sp, #0
	__asm__ volatile(
   2abb6:	f04f 0320 	mov.w	r3, #32
   2abba:	f3ef 8211 	mrs	r2, BASEPRI
   2abbe:	f383 8811 	msr	BASEPRI, r3
   2abc2:	f3bf 8f6f 	isb	sy
   2abc6:	607a      	str	r2, [r7, #4]
   2abc8:	603b      	str	r3, [r7, #0]
	return key;
   2abca:	687b      	ldr	r3, [r7, #4]
	(void) z_reschedule_irqlock(z_arch_irq_lock());
   2abcc:	4618      	mov	r0, r3
   2abce:	f000 fab3 	bl	2b138 <z_reschedule_irqlock>
}
   2abd2:	bf00      	nop
   2abd4:	3708      	adds	r7, #8
   2abd6:	46bd      	mov	sp, r7
   2abd8:	bd80      	pop	{r7, pc}

0002abda <z_is_thread_prevented_from_running>:
{
   2abda:	b480      	push	{r7}
   2abdc:	b085      	sub	sp, #20
   2abde:	af00      	add	r7, sp, #0
   2abe0:	6078      	str	r0, [r7, #4]
	u8_t state = thread->base.thread_state;
   2abe2:	687b      	ldr	r3, [r7, #4]
   2abe4:	7b5b      	ldrb	r3, [r3, #13]
   2abe6:	73fb      	strb	r3, [r7, #15]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   2abe8:	7bfb      	ldrb	r3, [r7, #15]
   2abea:	f003 031f 	and.w	r3, r3, #31
			 _THREAD_DUMMY | _THREAD_SUSPENDED)) != 0U;
   2abee:	2b00      	cmp	r3, #0
   2abf0:	bf14      	ite	ne
   2abf2:	2301      	movne	r3, #1
   2abf4:	2300      	moveq	r3, #0
   2abf6:	b2db      	uxtb	r3, r3
}
   2abf8:	4618      	mov	r0, r3
   2abfa:	3714      	adds	r7, #20
   2abfc:	46bd      	mov	sp, r7
   2abfe:	bc80      	pop	{r7}
   2ac00:	4770      	bx	lr

0002ac02 <z_is_thread_timeout_active>:
{
   2ac02:	b580      	push	{r7, lr}
   2ac04:	b082      	sub	sp, #8
   2ac06:	af00      	add	r7, sp, #0
   2ac08:	6078      	str	r0, [r7, #4]
	return !z_is_inactive_timeout(&thread->base.timeout);
   2ac0a:	687b      	ldr	r3, [r7, #4]
   2ac0c:	3318      	adds	r3, #24
   2ac0e:	4618      	mov	r0, r3
   2ac10:	f7ff ffa8 	bl	2ab64 <z_is_inactive_timeout>
   2ac14:	4603      	mov	r3, r0
   2ac16:	2b00      	cmp	r3, #0
   2ac18:	bf14      	ite	ne
   2ac1a:	2301      	movne	r3, #1
   2ac1c:	2300      	moveq	r3, #0
   2ac1e:	b2db      	uxtb	r3, r3
   2ac20:	f083 0301 	eor.w	r3, r3, #1
   2ac24:	b2db      	uxtb	r3, r3
   2ac26:	f003 0301 	and.w	r3, r3, #1
   2ac2a:	b2db      	uxtb	r3, r3
}
   2ac2c:	4618      	mov	r0, r3
   2ac2e:	3708      	adds	r7, #8
   2ac30:	46bd      	mov	sp, r7
   2ac32:	bd80      	pop	{r7, pc}

0002ac34 <z_is_thread_ready>:
{
   2ac34:	b580      	push	{r7, lr}
   2ac36:	b082      	sub	sp, #8
   2ac38:	af00      	add	r7, sp, #0
   2ac3a:	6078      	str	r0, [r7, #4]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2ac3c:	6878      	ldr	r0, [r7, #4]
   2ac3e:	f7ff ffcc 	bl	2abda <z_is_thread_prevented_from_running>
   2ac42:	4603      	mov	r3, r0
   2ac44:	f083 0301 	eor.w	r3, r3, #1
   2ac48:	b2db      	uxtb	r3, r3
   2ac4a:	2b00      	cmp	r3, #0
   2ac4c:	d00a      	beq.n	2ac64 <z_is_thread_ready+0x30>
		 z_is_thread_timeout_active(thread));
   2ac4e:	6878      	ldr	r0, [r7, #4]
   2ac50:	f7ff ffd7 	bl	2ac02 <z_is_thread_timeout_active>
   2ac54:	4603      	mov	r3, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2ac56:	f083 0301 	eor.w	r3, r3, #1
   2ac5a:	b2db      	uxtb	r3, r3
   2ac5c:	2b00      	cmp	r3, #0
   2ac5e:	d001      	beq.n	2ac64 <z_is_thread_ready+0x30>
   2ac60:	2301      	movs	r3, #1
   2ac62:	e000      	b.n	2ac66 <z_is_thread_ready+0x32>
   2ac64:	2300      	movs	r3, #0
   2ac66:	f003 0301 	and.w	r3, r3, #1
   2ac6a:	b2db      	uxtb	r3, r3
}
   2ac6c:	4618      	mov	r0, r3
   2ac6e:	3708      	adds	r7, #8
   2ac70:	46bd      	mov	sp, r7
   2ac72:	bd80      	pop	{r7, pc}

0002ac74 <z_is_thread_state_set>:
{
   2ac74:	b480      	push	{r7}
   2ac76:	b083      	sub	sp, #12
   2ac78:	af00      	add	r7, sp, #0
   2ac7a:	6078      	str	r0, [r7, #4]
   2ac7c:	6039      	str	r1, [r7, #0]
	return (thread->base.thread_state & state) != 0U;
   2ac7e:	687b      	ldr	r3, [r7, #4]
   2ac80:	7b5b      	ldrb	r3, [r3, #13]
   2ac82:	461a      	mov	r2, r3
   2ac84:	683b      	ldr	r3, [r7, #0]
   2ac86:	4013      	ands	r3, r2
   2ac88:	2b00      	cmp	r3, #0
   2ac8a:	bf14      	ite	ne
   2ac8c:	2301      	movne	r3, #1
   2ac8e:	2300      	moveq	r3, #0
   2ac90:	b2db      	uxtb	r3, r3
}
   2ac92:	4618      	mov	r0, r3
   2ac94:	370c      	adds	r7, #12
   2ac96:	46bd      	mov	sp, r7
   2ac98:	bc80      	pop	{r7}
   2ac9a:	4770      	bx	lr

0002ac9c <z_is_thread_queued>:
{
   2ac9c:	b580      	push	{r7, lr}
   2ac9e:	b082      	sub	sp, #8
   2aca0:	af00      	add	r7, sp, #0
   2aca2:	6078      	str	r0, [r7, #4]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   2aca4:	2140      	movs	r1, #64	; 0x40
   2aca6:	6878      	ldr	r0, [r7, #4]
   2aca8:	f7ff ffe4 	bl	2ac74 <z_is_thread_state_set>
   2acac:	4603      	mov	r3, r0
}
   2acae:	4618      	mov	r0, r3
   2acb0:	3708      	adds	r7, #8
   2acb2:	46bd      	mov	sp, r7
   2acb4:	bd80      	pop	{r7, pc}

0002acb6 <z_mark_thread_as_suspended>:
{
   2acb6:	b480      	push	{r7}
   2acb8:	b083      	sub	sp, #12
   2acba:	af00      	add	r7, sp, #0
   2acbc:	6078      	str	r0, [r7, #4]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2acbe:	687b      	ldr	r3, [r7, #4]
   2acc0:	7b5b      	ldrb	r3, [r3, #13]
   2acc2:	f043 0310 	orr.w	r3, r3, #16
   2acc6:	b2da      	uxtb	r2, r3
   2acc8:	687b      	ldr	r3, [r7, #4]
   2acca:	735a      	strb	r2, [r3, #13]
}
   2accc:	bf00      	nop
   2acce:	370c      	adds	r7, #12
   2acd0:	46bd      	mov	sp, r7
   2acd2:	bc80      	pop	{r7}
   2acd4:	4770      	bx	lr

0002acd6 <z_mark_thread_as_not_suspended>:
{
   2acd6:	b480      	push	{r7}
   2acd8:	b083      	sub	sp, #12
   2acda:	af00      	add	r7, sp, #0
   2acdc:	6078      	str	r0, [r7, #4]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2acde:	687b      	ldr	r3, [r7, #4]
   2ace0:	7b5b      	ldrb	r3, [r3, #13]
   2ace2:	f023 0310 	bic.w	r3, r3, #16
   2ace6:	b2da      	uxtb	r2, r3
   2ace8:	687b      	ldr	r3, [r7, #4]
   2acea:	735a      	strb	r2, [r3, #13]
}
   2acec:	bf00      	nop
   2acee:	370c      	adds	r7, #12
   2acf0:	46bd      	mov	sp, r7
   2acf2:	bc80      	pop	{r7}
   2acf4:	4770      	bx	lr

0002acf6 <z_mark_thread_as_started>:
{
   2acf6:	b480      	push	{r7}
   2acf8:	b083      	sub	sp, #12
   2acfa:	af00      	add	r7, sp, #0
   2acfc:	6078      	str	r0, [r7, #4]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2acfe:	687b      	ldr	r3, [r7, #4]
   2ad00:	7b5b      	ldrb	r3, [r3, #13]
   2ad02:	f023 0304 	bic.w	r3, r3, #4
   2ad06:	b2da      	uxtb	r2, r3
   2ad08:	687b      	ldr	r3, [r7, #4]
   2ad0a:	735a      	strb	r2, [r3, #13]
}
   2ad0c:	bf00      	nop
   2ad0e:	370c      	adds	r7, #12
   2ad10:	46bd      	mov	sp, r7
   2ad12:	bc80      	pop	{r7}
   2ad14:	4770      	bx	lr

0002ad16 <z_mark_thread_as_pending>:
{
   2ad16:	b480      	push	{r7}
   2ad18:	b083      	sub	sp, #12
   2ad1a:	af00      	add	r7, sp, #0
   2ad1c:	6078      	str	r0, [r7, #4]
	thread->base.thread_state |= _THREAD_PENDING;
   2ad1e:	687b      	ldr	r3, [r7, #4]
   2ad20:	7b5b      	ldrb	r3, [r3, #13]
   2ad22:	f043 0302 	orr.w	r3, r3, #2
   2ad26:	b2da      	uxtb	r2, r3
   2ad28:	687b      	ldr	r3, [r7, #4]
   2ad2a:	735a      	strb	r2, [r3, #13]
}
   2ad2c:	bf00      	nop
   2ad2e:	370c      	adds	r7, #12
   2ad30:	46bd      	mov	sp, r7
   2ad32:	bc80      	pop	{r7}
   2ad34:	4770      	bx	lr

0002ad36 <z_mark_thread_as_not_pending>:
{
   2ad36:	b480      	push	{r7}
   2ad38:	b083      	sub	sp, #12
   2ad3a:	af00      	add	r7, sp, #0
   2ad3c:	6078      	str	r0, [r7, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2ad3e:	687b      	ldr	r3, [r7, #4]
   2ad40:	7b5b      	ldrb	r3, [r3, #13]
   2ad42:	f023 0302 	bic.w	r3, r3, #2
   2ad46:	b2da      	uxtb	r2, r3
   2ad48:	687b      	ldr	r3, [r7, #4]
   2ad4a:	735a      	strb	r2, [r3, #13]
}
   2ad4c:	bf00      	nop
   2ad4e:	370c      	adds	r7, #12
   2ad50:	46bd      	mov	sp, r7
   2ad52:	bc80      	pop	{r7}
   2ad54:	4770      	bx	lr

0002ad56 <z_set_thread_states>:
{
   2ad56:	b480      	push	{r7}
   2ad58:	b083      	sub	sp, #12
   2ad5a:	af00      	add	r7, sp, #0
   2ad5c:	6078      	str	r0, [r7, #4]
   2ad5e:	6039      	str	r1, [r7, #0]
	thread->base.thread_state |= states;
   2ad60:	687b      	ldr	r3, [r7, #4]
   2ad62:	7b5a      	ldrb	r2, [r3, #13]
   2ad64:	683b      	ldr	r3, [r7, #0]
   2ad66:	b2db      	uxtb	r3, r3
   2ad68:	4313      	orrs	r3, r2
   2ad6a:	b2da      	uxtb	r2, r3
   2ad6c:	687b      	ldr	r3, [r7, #4]
   2ad6e:	735a      	strb	r2, [r3, #13]
}
   2ad70:	bf00      	nop
   2ad72:	370c      	adds	r7, #12
   2ad74:	46bd      	mov	sp, r7
   2ad76:	bc80      	pop	{r7}
   2ad78:	4770      	bx	lr

0002ad7a <z_reset_thread_states>:
{
   2ad7a:	b480      	push	{r7}
   2ad7c:	b083      	sub	sp, #12
   2ad7e:	af00      	add	r7, sp, #0
   2ad80:	6078      	str	r0, [r7, #4]
   2ad82:	6039      	str	r1, [r7, #0]
	thread->base.thread_state &= ~states;
   2ad84:	687b      	ldr	r3, [r7, #4]
   2ad86:	7b5a      	ldrb	r2, [r3, #13]
   2ad88:	683b      	ldr	r3, [r7, #0]
   2ad8a:	b2db      	uxtb	r3, r3
   2ad8c:	43db      	mvns	r3, r3
   2ad8e:	b2db      	uxtb	r3, r3
   2ad90:	4013      	ands	r3, r2
   2ad92:	b2da      	uxtb	r2, r3
   2ad94:	687b      	ldr	r3, [r7, #4]
   2ad96:	735a      	strb	r2, [r3, #13]
}
   2ad98:	bf00      	nop
   2ad9a:	370c      	adds	r7, #12
   2ad9c:	46bd      	mov	sp, r7
   2ad9e:	bc80      	pop	{r7}
   2ada0:	4770      	bx	lr

0002ada2 <z_mark_thread_as_queued>:
{
   2ada2:	b580      	push	{r7, lr}
   2ada4:	b082      	sub	sp, #8
   2ada6:	af00      	add	r7, sp, #0
   2ada8:	6078      	str	r0, [r7, #4]
	z_set_thread_states(thread, _THREAD_QUEUED);
   2adaa:	2140      	movs	r1, #64	; 0x40
   2adac:	6878      	ldr	r0, [r7, #4]
   2adae:	f7ff ffd2 	bl	2ad56 <z_set_thread_states>
}
   2adb2:	bf00      	nop
   2adb4:	3708      	adds	r7, #8
   2adb6:	46bd      	mov	sp, r7
   2adb8:	bd80      	pop	{r7, pc}

0002adba <z_mark_thread_as_not_queued>:
{
   2adba:	b580      	push	{r7, lr}
   2adbc:	b082      	sub	sp, #8
   2adbe:	af00      	add	r7, sp, #0
   2adc0:	6078      	str	r0, [r7, #4]
	z_reset_thread_states(thread, _THREAD_QUEUED);
   2adc2:	2140      	movs	r1, #64	; 0x40
   2adc4:	6878      	ldr	r0, [r7, #4]
   2adc6:	f7ff ffd8 	bl	2ad7a <z_reset_thread_states>
}
   2adca:	bf00      	nop
   2adcc:	3708      	adds	r7, #8
   2adce:	46bd      	mov	sp, r7
   2add0:	bd80      	pop	{r7, pc}

0002add2 <z_is_prio1_higher_than_prio2>:
{
   2add2:	b480      	push	{r7}
   2add4:	b083      	sub	sp, #12
   2add6:	af00      	add	r7, sp, #0
   2add8:	6078      	str	r0, [r7, #4]
   2adda:	6039      	str	r1, [r7, #0]
	return prio1 < prio2;
   2addc:	687a      	ldr	r2, [r7, #4]
   2adde:	683b      	ldr	r3, [r7, #0]
   2ade0:	429a      	cmp	r2, r3
   2ade2:	bfb4      	ite	lt
   2ade4:	2301      	movlt	r3, #1
   2ade6:	2300      	movge	r3, #0
   2ade8:	b2db      	uxtb	r3, r3
}
   2adea:	4618      	mov	r0, r3
   2adec:	370c      	adds	r7, #12
   2adee:	46bd      	mov	sp, r7
   2adf0:	bc80      	pop	{r7}
   2adf2:	4770      	bx	lr

0002adf4 <z_is_prio_higher>:
{
   2adf4:	b580      	push	{r7, lr}
   2adf6:	b082      	sub	sp, #8
   2adf8:	af00      	add	r7, sp, #0
   2adfa:	6078      	str	r0, [r7, #4]
   2adfc:	6039      	str	r1, [r7, #0]
	return z_is_prio1_higher_than_prio2(prio, test_prio);
   2adfe:	6839      	ldr	r1, [r7, #0]
   2ae00:	6878      	ldr	r0, [r7, #4]
   2ae02:	f7ff ffe6 	bl	2add2 <z_is_prio1_higher_than_prio2>
   2ae06:	4603      	mov	r3, r0
}
   2ae08:	4618      	mov	r0, r3
   2ae0a:	3708      	adds	r7, #8
   2ae0c:	46bd      	mov	sp, r7
   2ae0e:	bd80      	pop	{r7, pc}

0002ae10 <z_waitq_head>:
{
   2ae10:	b580      	push	{r7, lr}
   2ae12:	b082      	sub	sp, #8
   2ae14:	af00      	add	r7, sp, #0
   2ae16:	6078      	str	r0, [r7, #4]
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   2ae18:	687b      	ldr	r3, [r7, #4]
   2ae1a:	4618      	mov	r0, r3
   2ae1c:	f7ff fddb 	bl	2a9d6 <sys_dlist_peek_head>
   2ae20:	4603      	mov	r3, r0
}
   2ae22:	4618      	mov	r0, r3
   2ae24:	3708      	adds	r7, #8
   2ae26:	46bd      	mov	sp, r7
   2ae28:	bd80      	pop	{r7, pc}

0002ae2a <z_swap_irqlock>:
{
   2ae2a:	b580      	push	{r7, lr}
   2ae2c:	b084      	sub	sp, #16
   2ae2e:	af00      	add	r7, sp, #0
   2ae30:	6078      	str	r0, [r7, #4]
	ret = __swap(key);
   2ae32:	6878      	ldr	r0, [r7, #4]
   2ae34:	f7e6 fcf0 	bl	11818 <__swap>
   2ae38:	60f8      	str	r0, [r7, #12]
	return ret;
   2ae3a:	68fb      	ldr	r3, [r7, #12]
}
   2ae3c:	4618      	mov	r0, r3
   2ae3e:	3710      	adds	r7, #16
   2ae40:	46bd      	mov	sp, r7
   2ae42:	bd80      	pop	{r7, pc}

0002ae44 <z_swap_unlocked>:
}

static inline void z_swap_unlocked(void)
{
   2ae44:	b580      	push	{r7, lr}
   2ae46:	b082      	sub	sp, #8
   2ae48:	af00      	add	r7, sp, #0
	__asm__ volatile(
   2ae4a:	f04f 0320 	mov.w	r3, #32
   2ae4e:	f3ef 8211 	mrs	r2, BASEPRI
   2ae52:	f383 8811 	msr	BASEPRI, r3
   2ae56:	f3bf 8f6f 	isb	sy
   2ae5a:	607a      	str	r2, [r7, #4]
   2ae5c:	603b      	str	r3, [r7, #0]
	return key;
   2ae5e:	687b      	ldr	r3, [r7, #4]
	(void) z_swap_irqlock(z_arch_irq_lock());
   2ae60:	4618      	mov	r0, r3
   2ae62:	f7ff ffe2 	bl	2ae2a <z_swap_irqlock>
}
   2ae66:	bf00      	nop
   2ae68:	3708      	adds	r7, #8
   2ae6a:	46bd      	mov	sp, r7
   2ae6c:	bd80      	pop	{r7, pc}

0002ae6e <is_preempt>:
{
   2ae6e:	b480      	push	{r7}
   2ae70:	b083      	sub	sp, #12
   2ae72:	af00      	add	r7, sp, #0
   2ae74:	6078      	str	r0, [r7, #4]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   2ae76:	687b      	ldr	r3, [r7, #4]
   2ae78:	89db      	ldrh	r3, [r3, #14]
   2ae7a:	2b7f      	cmp	r3, #127	; 0x7f
   2ae7c:	bf94      	ite	ls
   2ae7e:	2301      	movls	r3, #1
   2ae80:	2300      	movhi	r3, #0
   2ae82:	b2db      	uxtb	r3, r3
}
   2ae84:	4618      	mov	r0, r3
   2ae86:	370c      	adds	r7, #12
   2ae88:	46bd      	mov	sp, r7
   2ae8a:	bc80      	pop	{r7}
   2ae8c:	4770      	bx	lr

0002ae8e <is_metairq>:
{
   2ae8e:	b480      	push	{r7}
   2ae90:	b083      	sub	sp, #12
   2ae92:	af00      	add	r7, sp, #0
   2ae94:	6078      	str	r0, [r7, #4]
	return 0;
   2ae96:	2300      	movs	r3, #0
}
   2ae98:	4618      	mov	r0, r3
   2ae9a:	370c      	adds	r7, #12
   2ae9c:	46bd      	mov	sp, r7
   2ae9e:	bc80      	pop	{r7}
   2aea0:	4770      	bx	lr

0002aea2 <z_is_t1_higher_prio_than_t2>:
{
   2aea2:	b480      	push	{r7}
   2aea4:	b083      	sub	sp, #12
   2aea6:	af00      	add	r7, sp, #0
   2aea8:	6078      	str	r0, [r7, #4]
   2aeaa:	6039      	str	r1, [r7, #0]
	if (t1->base.prio < t2->base.prio) {
   2aeac:	687b      	ldr	r3, [r7, #4]
   2aeae:	f993 200e 	ldrsb.w	r2, [r3, #14]
   2aeb2:	683b      	ldr	r3, [r7, #0]
   2aeb4:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2aeb8:	429a      	cmp	r2, r3
   2aeba:	da01      	bge.n	2aec0 <z_is_t1_higher_prio_than_t2+0x1e>
		return true;
   2aebc:	2301      	movs	r3, #1
   2aebe:	e000      	b.n	2aec2 <z_is_t1_higher_prio_than_t2+0x20>
	return false;
   2aec0:	2300      	movs	r3, #0
}
   2aec2:	4618      	mov	r0, r3
   2aec4:	370c      	adds	r7, #12
   2aec6:	46bd      	mov	sp, r7
   2aec8:	bc80      	pop	{r7}
   2aeca:	4770      	bx	lr

0002aecc <pend>:
{
   2aecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aed0:	b08d      	sub	sp, #52	; 0x34
   2aed2:	af00      	add	r7, sp, #0
   2aed4:	6178      	str	r0, [r7, #20]
   2aed6:	6139      	str	r1, [r7, #16]
   2aed8:	60fa      	str	r2, [r7, #12]
	z_remove_thread_from_ready_q(thread);
   2aeda:	6978      	ldr	r0, [r7, #20]
   2aedc:	f7ec f9fc 	bl	172d8 <z_remove_thread_from_ready_q>
	z_mark_thread_as_pending(thread);
   2aee0:	6978      	ldr	r0, [r7, #20]
   2aee2:	f7ff ff18 	bl	2ad16 <z_mark_thread_as_pending>
	if (wait_q != NULL) {
   2aee6:	693b      	ldr	r3, [r7, #16]
   2aee8:	2b00      	cmp	r3, #0
   2aeea:	d040      	beq.n	2af6e <pend+0xa2>
		thread->base.pended_on = wait_q;
   2aeec:	697b      	ldr	r3, [r7, #20]
   2aeee:	693a      	ldr	r2, [r7, #16]
   2aef0:	609a      	str	r2, [r3, #8]
		z_priq_wait_add(&wait_q->waitq, thread);
   2aef2:	693b      	ldr	r3, [r7, #16]
   2aef4:	62bb      	str	r3, [r7, #40]	; 0x28
   2aef6:	697b      	ldr	r3, [r7, #20]
   2aef8:	627b      	str	r3, [r7, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2aefa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   2aefc:	f7ff fd6b 	bl	2a9d6 <sys_dlist_peek_head>
   2af00:	4603      	mov	r3, r0
   2af02:	2b00      	cmp	r3, #0
   2af04:	d004      	beq.n	2af10 <pend+0x44>
   2af06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   2af08:	f7ff fd65 	bl	2a9d6 <sys_dlist_peek_head>
   2af0c:	4603      	mov	r3, r0
   2af0e:	e000      	b.n	2af12 <pend+0x46>
   2af10:	2300      	movs	r3, #0
   2af12:	623b      	str	r3, [r7, #32]
   2af14:	e023      	b.n	2af5e <pend+0x92>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
   2af16:	6a39      	ldr	r1, [r7, #32]
   2af18:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2af1a:	f7ff ffc2 	bl	2aea2 <z_is_t1_higher_prio_than_t2>
   2af1e:	4603      	mov	r3, r0
   2af20:	2b00      	cmp	r3, #0
   2af22:	d006      	beq.n	2af32 <pend+0x66>
			sys_dlist_insert(&t->base.qnode_dlist,
   2af24:	6a3b      	ldr	r3, [r7, #32]
   2af26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2af28:	4611      	mov	r1, r2
   2af2a:	4618      	mov	r0, r3
   2af2c:	f7ff fda3 	bl	2aa76 <sys_dlist_insert>
   2af30:	e01d      	b.n	2af6e <pend+0xa2>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2af32:	6a3b      	ldr	r3, [r7, #32]
   2af34:	2b00      	cmp	r3, #0
   2af36:	d010      	beq.n	2af5a <pend+0x8e>
   2af38:	6a3b      	ldr	r3, [r7, #32]
   2af3a:	4619      	mov	r1, r3
   2af3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   2af3e:	f7ff fd6f 	bl	2aa20 <sys_dlist_peek_next>
   2af42:	4603      	mov	r3, r0
   2af44:	2b00      	cmp	r3, #0
   2af46:	d006      	beq.n	2af56 <pend+0x8a>
   2af48:	6a3b      	ldr	r3, [r7, #32]
   2af4a:	4619      	mov	r1, r3
   2af4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   2af4e:	f7ff fd67 	bl	2aa20 <sys_dlist_peek_next>
   2af52:	4603      	mov	r3, r0
   2af54:	e002      	b.n	2af5c <pend+0x90>
   2af56:	2300      	movs	r3, #0
   2af58:	e000      	b.n	2af5c <pend+0x90>
   2af5a:	2300      	movs	r3, #0
   2af5c:	623b      	str	r3, [r7, #32]
   2af5e:	6a3b      	ldr	r3, [r7, #32]
   2af60:	2b00      	cmp	r3, #0
   2af62:	d1d8      	bne.n	2af16 <pend+0x4a>
	sys_dlist_append(pq, &thread->base.qnode_dlist);
   2af64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2af66:	4619      	mov	r1, r3
   2af68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   2af6a:	f7ff fd6c 	bl	2aa46 <sys_dlist_append>
	if (timeout != K_FOREVER) {
   2af6e:	68fb      	ldr	r3, [r7, #12]
   2af70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2af74:	f000 8099 	beq.w	2b0aa <pend+0x1de>
   2af78:	68fb      	ldr	r3, [r7, #12]
   2af7a:	61fb      	str	r3, [r7, #28]
	return (s32_t)ceiling_fraction(
   2af7c:	69fb      	ldr	r3, [r7, #28]
   2af7e:	461d      	mov	r5, r3
   2af80:	ea4f 76e5 	mov.w	r6, r5, asr #31
   2af84:	f7ff fda4 	bl	2aad0 <sys_clock_hw_cycles_per_sec>
   2af88:	4603      	mov	r3, r0
   2af8a:	ea4f 74e3 	mov.w	r4, r3, asr #31
   2af8e:	fb03 f106 	mul.w	r1, r3, r6
   2af92:	fb05 f204 	mul.w	r2, r5, r4
   2af96:	440a      	add	r2, r1
   2af98:	fba5 8903 	umull	r8, r9, r5, r3
   2af9c:	eb02 0309 	add.w	r3, r2, r9
   2afa0:	4699      	mov	r9, r3
   2afa2:	f7ff fd95 	bl	2aad0 <sys_clock_hw_cycles_per_sec>
   2afa6:	4603      	mov	r3, r0
   2afa8:	4619      	mov	r1, r3
   2afaa:	ea4f 72e1 	mov.w	r2, r1, asr #31
   2afae:	460b      	mov	r3, r1
   2afb0:	4614      	mov	r4, r2
   2afb2:	f04f 0500 	mov.w	r5, #0
   2afb6:	f04f 0600 	mov.w	r6, #0
   2afba:	0166      	lsls	r6, r4, #5
   2afbc:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
   2afc0:	015d      	lsls	r5, r3, #5
   2afc2:	462b      	mov	r3, r5
   2afc4:	4634      	mov	r4, r6
   2afc6:	1a5b      	subs	r3, r3, r1
   2afc8:	eb64 0402 	sbc.w	r4, r4, r2
   2afcc:	f04f 0500 	mov.w	r5, #0
   2afd0:	f04f 0600 	mov.w	r6, #0
   2afd4:	00a6      	lsls	r6, r4, #2
   2afd6:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
   2afda:	009d      	lsls	r5, r3, #2
   2afdc:	462b      	mov	r3, r5
   2afde:	4634      	mov	r4, r6
   2afe0:	185b      	adds	r3, r3, r1
   2afe2:	eb42 0404 	adc.w	r4, r2, r4
   2afe6:	f04f 0100 	mov.w	r1, #0
   2afea:	f04f 0200 	mov.w	r2, #0
   2afee:	00e2      	lsls	r2, r4, #3
   2aff0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   2aff4:	00d9      	lsls	r1, r3, #3
   2aff6:	460b      	mov	r3, r1
   2aff8:	4614      	mov	r4, r2
   2affa:	4618      	mov	r0, r3
   2affc:	4621      	mov	r1, r4
   2affe:	f04f 0264 	mov.w	r2, #100	; 0x64
   2b002:	f04f 0300 	mov.w	r3, #0
   2b006:	f7d5 fb4f 	bl	6a8 <__aeabi_ldivmod>
   2b00a:	4603      	mov	r3, r0
   2b00c:	460c      	mov	r4, r1
   2b00e:	eb18 0a03 	adds.w	sl, r8, r3
   2b012:	eb49 0b04 	adc.w	fp, r9, r4
   2b016:	f11a 33ff 	adds.w	r3, sl, #4294967295	; 0xffffffff
   2b01a:	603b      	str	r3, [r7, #0]
   2b01c:	f14b 33ff 	adc.w	r3, fp, #4294967295	; 0xffffffff
   2b020:	607b      	str	r3, [r7, #4]
   2b022:	f7ff fd55 	bl	2aad0 <sys_clock_hw_cycles_per_sec>
   2b026:	4603      	mov	r3, r0
   2b028:	4619      	mov	r1, r3
   2b02a:	ea4f 72e1 	mov.w	r2, r1, asr #31
   2b02e:	460b      	mov	r3, r1
   2b030:	4614      	mov	r4, r2
   2b032:	f04f 0500 	mov.w	r5, #0
   2b036:	f04f 0600 	mov.w	r6, #0
   2b03a:	0166      	lsls	r6, r4, #5
   2b03c:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
   2b040:	015d      	lsls	r5, r3, #5
   2b042:	462b      	mov	r3, r5
   2b044:	4634      	mov	r4, r6
   2b046:	1a5b      	subs	r3, r3, r1
   2b048:	eb64 0402 	sbc.w	r4, r4, r2
   2b04c:	f04f 0500 	mov.w	r5, #0
   2b050:	f04f 0600 	mov.w	r6, #0
   2b054:	00a6      	lsls	r6, r4, #2
   2b056:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
   2b05a:	009d      	lsls	r5, r3, #2
   2b05c:	462b      	mov	r3, r5
   2b05e:	4634      	mov	r4, r6
   2b060:	185b      	adds	r3, r3, r1
   2b062:	eb42 0404 	adc.w	r4, r2, r4
   2b066:	f04f 0100 	mov.w	r1, #0
   2b06a:	f04f 0200 	mov.w	r2, #0
   2b06e:	00e2      	lsls	r2, r4, #3
   2b070:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   2b074:	00d9      	lsls	r1, r3, #3
   2b076:	460b      	mov	r3, r1
   2b078:	4614      	mov	r4, r2
   2b07a:	4618      	mov	r0, r3
   2b07c:	4621      	mov	r1, r4
   2b07e:	f04f 0264 	mov.w	r2, #100	; 0x64
   2b082:	f04f 0300 	mov.w	r3, #0
   2b086:	f7d5 fb0f 	bl	6a8 <__aeabi_ldivmod>
   2b08a:	4603      	mov	r3, r0
   2b08c:	460c      	mov	r4, r1
   2b08e:	461a      	mov	r2, r3
   2b090:	4623      	mov	r3, r4
   2b092:	e9d7 0100 	ldrd	r0, r1, [r7]
   2b096:	f7d5 fb07 	bl	6a8 <__aeabi_ldivmod>
   2b09a:	4603      	mov	r3, r0
   2b09c:	460c      	mov	r4, r1
		s32_t ticks = _TICK_ALIGN + z_ms_to_ticks(timeout);
   2b09e:	3301      	adds	r3, #1
   2b0a0:	62fb      	str	r3, [r7, #44]	; 0x2c
		z_add_thread_timeout(thread, ticks);
   2b0a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   2b0a4:	6978      	ldr	r0, [r7, #20]
   2b0a6:	f7eb fdc5 	bl	16c34 <z_add_thread_timeout>
}
   2b0aa:	bf00      	nop
   2b0ac:	3734      	adds	r7, #52	; 0x34
   2b0ae:	46bd      	mov	sp, r7
   2b0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b0b4 <pended_on>:
{
   2b0b4:	b480      	push	{r7}
   2b0b6:	b083      	sub	sp, #12
   2b0b8:	af00      	add	r7, sp, #0
   2b0ba:	6078      	str	r0, [r7, #4]
	return thread->base.pended_on;
   2b0bc:	687b      	ldr	r3, [r7, #4]
   2b0be:	689b      	ldr	r3, [r3, #8]
}
   2b0c0:	4618      	mov	r0, r3
   2b0c2:	370c      	adds	r7, #12
   2b0c4:	46bd      	mov	sp, r7
   2b0c6:	bc80      	pop	{r7}
   2b0c8:	4770      	bx	lr

0002b0ca <z_unpend_first_thread>:
{
   2b0ca:	b580      	push	{r7, lr}
   2b0cc:	b084      	sub	sp, #16
   2b0ce:	af00      	add	r7, sp, #0
   2b0d0:	6078      	str	r0, [r7, #4]
	struct k_thread *t = z_unpend1_no_timeout(wait_q);
   2b0d2:	6878      	ldr	r0, [r7, #4]
   2b0d4:	f7eb fdce 	bl	16c74 <z_unpend1_no_timeout>
   2b0d8:	60f8      	str	r0, [r7, #12]
	if (t != NULL) {
   2b0da:	68fb      	ldr	r3, [r7, #12]
   2b0dc:	2b00      	cmp	r3, #0
   2b0de:	d002      	beq.n	2b0e6 <z_unpend_first_thread+0x1c>
		(void)z_abort_thread_timeout(t);
   2b0e0:	68f8      	ldr	r0, [r7, #12]
   2b0e2:	f7ff fd57 	bl	2ab94 <z_abort_thread_timeout>
	return t;
   2b0e6:	68fb      	ldr	r3, [r7, #12]
}
   2b0e8:	4618      	mov	r0, r3
   2b0ea:	3710      	adds	r7, #16
   2b0ec:	46bd      	mov	sp, r7
   2b0ee:	bd80      	pop	{r7, pc}

0002b0f0 <z_reschedule>:
{
   2b0f0:	b580      	push	{r7, lr}
   2b0f2:	b088      	sub	sp, #32
   2b0f4:	af00      	add	r7, sp, #0
   2b0f6:	6078      	str	r0, [r7, #4]
   2b0f8:	6039      	str	r1, [r7, #0]
	if (resched()) {
   2b0fa:	f7ec fb13 	bl	17724 <resched>
   2b0fe:	4603      	mov	r3, r0
   2b100:	2b00      	cmp	r3, #0
   2b102:	d00a      	beq.n	2b11a <z_reschedule+0x2a>
   2b104:	687b      	ldr	r3, [r7, #4]
   2b106:	61fb      	str	r3, [r7, #28]
   2b108:	683b      	ldr	r3, [r7, #0]
   2b10a:	60bb      	str	r3, [r7, #8]
   2b10c:	69fb      	ldr	r3, [r7, #28]
   2b10e:	61bb      	str	r3, [r7, #24]
	return z_swap_irqlock(key.key);
   2b110:	68bb      	ldr	r3, [r7, #8]
   2b112:	4618      	mov	r0, r3
   2b114:	f7ff fe89 	bl	2ae2a <z_swap_irqlock>
}
   2b118:	e00a      	b.n	2b130 <z_reschedule+0x40>
   2b11a:	687b      	ldr	r3, [r7, #4]
   2b11c:	617b      	str	r3, [r7, #20]
   2b11e:	683b      	ldr	r3, [r7, #0]
   2b120:	60fb      	str	r3, [r7, #12]
   2b122:	68fb      	ldr	r3, [r7, #12]
   2b124:	613b      	str	r3, [r7, #16]
	__asm__ volatile(
   2b126:	693b      	ldr	r3, [r7, #16]
   2b128:	f383 8811 	msr	BASEPRI, r3
   2b12c:	f3bf 8f6f 	isb	sy
   2b130:	bf00      	nop
   2b132:	3720      	adds	r7, #32
   2b134:	46bd      	mov	sp, r7
   2b136:	bd80      	pop	{r7, pc}

0002b138 <z_reschedule_irqlock>:
{
   2b138:	b580      	push	{r7, lr}
   2b13a:	b084      	sub	sp, #16
   2b13c:	af00      	add	r7, sp, #0
   2b13e:	6078      	str	r0, [r7, #4]
	if (resched()) {
   2b140:	f7ec faf0 	bl	17724 <resched>
   2b144:	4603      	mov	r3, r0
   2b146:	2b00      	cmp	r3, #0
   2b148:	d003      	beq.n	2b152 <z_reschedule_irqlock+0x1a>
		z_swap_irqlock(key);
   2b14a:	6878      	ldr	r0, [r7, #4]
   2b14c:	f7ff fe6d 	bl	2ae2a <z_swap_irqlock>
}
   2b150:	e006      	b.n	2b160 <z_reschedule_irqlock+0x28>
   2b152:	687b      	ldr	r3, [r7, #4]
   2b154:	60fb      	str	r3, [r7, #12]
   2b156:	68fb      	ldr	r3, [r7, #12]
   2b158:	f383 8811 	msr	BASEPRI, r3
   2b15c:	f3bf 8f6f 	isb	sy
   2b160:	bf00      	nop
   2b162:	3710      	adds	r7, #16
   2b164:	46bd      	mov	sp, r7
   2b166:	bd80      	pop	{r7, pc}

0002b168 <z_priq_dumb_best>:
{
   2b168:	b580      	push	{r7, lr}
   2b16a:	b084      	sub	sp, #16
   2b16c:	af00      	add	r7, sp, #0
   2b16e:	6078      	str	r0, [r7, #4]
	struct k_thread *t = NULL;
   2b170:	2300      	movs	r3, #0
   2b172:	60fb      	str	r3, [r7, #12]
	sys_dnode_t *n = sys_dlist_peek_head(pq);
   2b174:	6878      	ldr	r0, [r7, #4]
   2b176:	f7ff fc2e 	bl	2a9d6 <sys_dlist_peek_head>
   2b17a:	60b8      	str	r0, [r7, #8]
	if (n != NULL) {
   2b17c:	68bb      	ldr	r3, [r7, #8]
   2b17e:	2b00      	cmp	r3, #0
   2b180:	d001      	beq.n	2b186 <z_priq_dumb_best+0x1e>
		t = CONTAINER_OF(n, struct k_thread, base.qnode_dlist);
   2b182:	68bb      	ldr	r3, [r7, #8]
   2b184:	60fb      	str	r3, [r7, #12]
	return t;
   2b186:	68fb      	ldr	r3, [r7, #12]
}
   2b188:	4618      	mov	r0, r3
   2b18a:	3710      	adds	r7, #16
   2b18c:	46bd      	mov	sp, r7
   2b18e:	bd80      	pop	{r7, pc}

0002b190 <z_unpend_all>:
{
   2b190:	b580      	push	{r7, lr}
   2b192:	b086      	sub	sp, #24
   2b194:	af00      	add	r7, sp, #0
   2b196:	6078      	str	r0, [r7, #4]
	int need_sched = 0;
   2b198:	2300      	movs	r3, #0
   2b19a:	617b      	str	r3, [r7, #20]
	while ((th = z_waitq_head(wait_q)) != NULL) {
   2b19c:	e00f      	b.n	2b1be <z_unpend_all+0x2e>
		z_unpend_thread(th);
   2b19e:	6938      	ldr	r0, [r7, #16]
   2b1a0:	f7ec f9e8 	bl	17574 <z_unpend_thread>
   2b1a4:	693b      	ldr	r3, [r7, #16]
   2b1a6:	60fb      	str	r3, [r7, #12]
	if (z_is_thread_ready(thread)) {
   2b1a8:	68f8      	ldr	r0, [r7, #12]
   2b1aa:	f7ff fd43 	bl	2ac34 <z_is_thread_ready>
   2b1ae:	4603      	mov	r3, r0
   2b1b0:	2b00      	cmp	r3, #0
   2b1b2:	d002      	beq.n	2b1ba <z_unpend_all+0x2a>
		z_add_thread_to_ready_q(thread);
   2b1b4:	68f8      	ldr	r0, [r7, #12]
   2b1b6:	f7eb ff99 	bl	170ec <z_add_thread_to_ready_q>
		need_sched = 1;
   2b1ba:	2301      	movs	r3, #1
   2b1bc:	617b      	str	r3, [r7, #20]
	while ((th = z_waitq_head(wait_q)) != NULL) {
   2b1be:	6878      	ldr	r0, [r7, #4]
   2b1c0:	f7ff fe26 	bl	2ae10 <z_waitq_head>
   2b1c4:	6138      	str	r0, [r7, #16]
   2b1c6:	693b      	ldr	r3, [r7, #16]
   2b1c8:	2b00      	cmp	r3, #0
   2b1ca:	d1e8      	bne.n	2b19e <z_unpend_all+0xe>
	return need_sched;
   2b1cc:	697b      	ldr	r3, [r7, #20]
}
   2b1ce:	4618      	mov	r0, r3
   2b1d0:	3718      	adds	r7, #24
   2b1d2:	46bd      	mov	sp, r7
   2b1d4:	bd80      	pop	{r7, pc}

0002b1d6 <sys_dlist_init>:
{
   2b1d6:	b480      	push	{r7}
   2b1d8:	b083      	sub	sp, #12
   2b1da:	af00      	add	r7, sp, #0
   2b1dc:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
   2b1de:	687b      	ldr	r3, [r7, #4]
   2b1e0:	687a      	ldr	r2, [r7, #4]
   2b1e2:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   2b1e4:	687b      	ldr	r3, [r7, #4]
   2b1e6:	687a      	ldr	r2, [r7, #4]
   2b1e8:	605a      	str	r2, [r3, #4]
}
   2b1ea:	bf00      	nop
   2b1ec:	370c      	adds	r7, #12
   2b1ee:	46bd      	mov	sp, r7
   2b1f0:	bc80      	pop	{r7}
   2b1f2:	4770      	bx	lr

0002b1f4 <sys_dnode_is_linked>:
{
   2b1f4:	b480      	push	{r7}
   2b1f6:	b083      	sub	sp, #12
   2b1f8:	af00      	add	r7, sp, #0
   2b1fa:	6078      	str	r0, [r7, #4]
	return node->next != NULL;
   2b1fc:	687b      	ldr	r3, [r7, #4]
   2b1fe:	681b      	ldr	r3, [r3, #0]
   2b200:	2b00      	cmp	r3, #0
   2b202:	bf14      	ite	ne
   2b204:	2301      	movne	r3, #1
   2b206:	2300      	moveq	r3, #0
   2b208:	b2db      	uxtb	r3, r3
}
   2b20a:	4618      	mov	r0, r3
   2b20c:	370c      	adds	r7, #12
   2b20e:	46bd      	mov	sp, r7
   2b210:	bc80      	pop	{r7}
   2b212:	4770      	bx	lr

0002b214 <z_object_init>:
{
   2b214:	b480      	push	{r7}
   2b216:	b083      	sub	sp, #12
   2b218:	af00      	add	r7, sp, #0
   2b21a:	6078      	str	r0, [r7, #4]
}
   2b21c:	bf00      	nop
   2b21e:	370c      	adds	r7, #12
   2b220:	46bd      	mov	sp, r7
   2b222:	bc80      	pop	{r7}
   2b224:	4770      	bx	lr

0002b226 <z_is_inactive_timeout>:
{
   2b226:	b580      	push	{r7, lr}
   2b228:	b082      	sub	sp, #8
   2b22a:	af00      	add	r7, sp, #0
   2b22c:	6078      	str	r0, [r7, #4]
	return !sys_dnode_is_linked(&t->node);
   2b22e:	687b      	ldr	r3, [r7, #4]
   2b230:	4618      	mov	r0, r3
   2b232:	f7ff ffdf 	bl	2b1f4 <sys_dnode_is_linked>
   2b236:	4603      	mov	r3, r0
   2b238:	2b00      	cmp	r3, #0
   2b23a:	bf14      	ite	ne
   2b23c:	2301      	movne	r3, #1
   2b23e:	2300      	moveq	r3, #0
   2b240:	b2db      	uxtb	r3, r3
   2b242:	f083 0301 	eor.w	r3, r3, #1
   2b246:	b2db      	uxtb	r3, r3
   2b248:	f003 0301 	and.w	r3, r3, #1
   2b24c:	b2db      	uxtb	r3, r3
}
   2b24e:	4618      	mov	r0, r3
   2b250:	3708      	adds	r7, #8
   2b252:	46bd      	mov	sp, r7
   2b254:	bd80      	pop	{r7, pc}

0002b256 <z_is_thread_prevented_from_running>:
{
   2b256:	b480      	push	{r7}
   2b258:	b085      	sub	sp, #20
   2b25a:	af00      	add	r7, sp, #0
   2b25c:	6078      	str	r0, [r7, #4]
	u8_t state = thread->base.thread_state;
   2b25e:	687b      	ldr	r3, [r7, #4]
   2b260:	7b5b      	ldrb	r3, [r3, #13]
   2b262:	73fb      	strb	r3, [r7, #15]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   2b264:	7bfb      	ldrb	r3, [r7, #15]
   2b266:	f003 031f 	and.w	r3, r3, #31
			 _THREAD_DUMMY | _THREAD_SUSPENDED)) != 0U;
   2b26a:	2b00      	cmp	r3, #0
   2b26c:	bf14      	ite	ne
   2b26e:	2301      	movne	r3, #1
   2b270:	2300      	moveq	r3, #0
   2b272:	b2db      	uxtb	r3, r3
}
   2b274:	4618      	mov	r0, r3
   2b276:	3714      	adds	r7, #20
   2b278:	46bd      	mov	sp, r7
   2b27a:	bc80      	pop	{r7}
   2b27c:	4770      	bx	lr

0002b27e <z_is_thread_timeout_active>:
{
   2b27e:	b580      	push	{r7, lr}
   2b280:	b082      	sub	sp, #8
   2b282:	af00      	add	r7, sp, #0
   2b284:	6078      	str	r0, [r7, #4]
	return !z_is_inactive_timeout(&thread->base.timeout);
   2b286:	687b      	ldr	r3, [r7, #4]
   2b288:	3318      	adds	r3, #24
   2b28a:	4618      	mov	r0, r3
   2b28c:	f7ff ffcb 	bl	2b226 <z_is_inactive_timeout>
   2b290:	4603      	mov	r3, r0
   2b292:	2b00      	cmp	r3, #0
   2b294:	bf14      	ite	ne
   2b296:	2301      	movne	r3, #1
   2b298:	2300      	moveq	r3, #0
   2b29a:	b2db      	uxtb	r3, r3
   2b29c:	f083 0301 	eor.w	r3, r3, #1
   2b2a0:	b2db      	uxtb	r3, r3
   2b2a2:	f003 0301 	and.w	r3, r3, #1
   2b2a6:	b2db      	uxtb	r3, r3
}
   2b2a8:	4618      	mov	r0, r3
   2b2aa:	3708      	adds	r7, #8
   2b2ac:	46bd      	mov	sp, r7
   2b2ae:	bd80      	pop	{r7, pc}

0002b2b0 <z_is_thread_ready>:
{
   2b2b0:	b580      	push	{r7, lr}
   2b2b2:	b082      	sub	sp, #8
   2b2b4:	af00      	add	r7, sp, #0
   2b2b6:	6078      	str	r0, [r7, #4]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2b2b8:	6878      	ldr	r0, [r7, #4]
   2b2ba:	f7ff ffcc 	bl	2b256 <z_is_thread_prevented_from_running>
   2b2be:	4603      	mov	r3, r0
   2b2c0:	f083 0301 	eor.w	r3, r3, #1
   2b2c4:	b2db      	uxtb	r3, r3
   2b2c6:	2b00      	cmp	r3, #0
   2b2c8:	d00a      	beq.n	2b2e0 <z_is_thread_ready+0x30>
		 z_is_thread_timeout_active(thread));
   2b2ca:	6878      	ldr	r0, [r7, #4]
   2b2cc:	f7ff ffd7 	bl	2b27e <z_is_thread_timeout_active>
   2b2d0:	4603      	mov	r3, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2b2d2:	f083 0301 	eor.w	r3, r3, #1
   2b2d6:	b2db      	uxtb	r3, r3
   2b2d8:	2b00      	cmp	r3, #0
   2b2da:	d001      	beq.n	2b2e0 <z_is_thread_ready+0x30>
   2b2dc:	2301      	movs	r3, #1
   2b2de:	e000      	b.n	2b2e2 <z_is_thread_ready+0x32>
   2b2e0:	2300      	movs	r3, #0
   2b2e2:	f003 0301 	and.w	r3, r3, #1
   2b2e6:	b2db      	uxtb	r3, r3
}
   2b2e8:	4618      	mov	r0, r3
   2b2ea:	3708      	adds	r7, #8
   2b2ec:	46bd      	mov	sp, r7
   2b2ee:	bd80      	pop	{r7, pc}

0002b2f0 <z_waitq_init>:
{
   2b2f0:	b580      	push	{r7, lr}
   2b2f2:	b082      	sub	sp, #8
   2b2f4:	af00      	add	r7, sp, #0
   2b2f6:	6078      	str	r0, [r7, #4]
	sys_dlist_init(&w->waitq);
   2b2f8:	687b      	ldr	r3, [r7, #4]
   2b2fa:	4618      	mov	r0, r3
   2b2fc:	f7ff ff6b 	bl	2b1d6 <sys_dlist_init>
}
   2b300:	bf00      	nop
   2b302:	3708      	adds	r7, #8
   2b304:	46bd      	mov	sp, r7
   2b306:	bd80      	pop	{r7, pc}

0002b308 <z_impl_k_sem_init>:
{
   2b308:	b580      	push	{r7, lr}
   2b30a:	b084      	sub	sp, #16
   2b30c:	af00      	add	r7, sp, #0
   2b30e:	60f8      	str	r0, [r7, #12]
   2b310:	60b9      	str	r1, [r7, #8]
   2b312:	607a      	str	r2, [r7, #4]
	sem->count = initial_count;
   2b314:	68fb      	ldr	r3, [r7, #12]
   2b316:	68ba      	ldr	r2, [r7, #8]
   2b318:	609a      	str	r2, [r3, #8]
	sem->limit = limit;
   2b31a:	68fb      	ldr	r3, [r7, #12]
   2b31c:	687a      	ldr	r2, [r7, #4]
   2b31e:	60da      	str	r2, [r3, #12]
	z_waitq_init(&sem->wait_q);
   2b320:	68fb      	ldr	r3, [r7, #12]
   2b322:	4618      	mov	r0, r3
   2b324:	f7ff ffe4 	bl	2b2f0 <z_waitq_init>
	sys_dlist_init(&sem->poll_events);
   2b328:	68fb      	ldr	r3, [r7, #12]
   2b32a:	3310      	adds	r3, #16
   2b32c:	4618      	mov	r0, r3
   2b32e:	f7ff ff52 	bl	2b1d6 <sys_dlist_init>
	z_object_init(sem);
   2b332:	68f8      	ldr	r0, [r7, #12]
   2b334:	f7ff ff6e 	bl	2b214 <z_object_init>
}
   2b338:	bf00      	nop
   2b33a:	3710      	adds	r7, #16
   2b33c:	46bd      	mov	sp, r7
   2b33e:	bd80      	pop	{r7, pc}

0002b340 <handle_poll_events>:
{
   2b340:	b580      	push	{r7, lr}
   2b342:	b082      	sub	sp, #8
   2b344:	af00      	add	r7, sp, #0
   2b346:	6078      	str	r0, [r7, #4]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2b348:	687b      	ldr	r3, [r7, #4]
   2b34a:	3310      	adds	r3, #16
   2b34c:	2102      	movs	r1, #2
   2b34e:	4618      	mov	r0, r3
   2b350:	f001 f8b8 	bl	2c4c4 <z_handle_obj_poll_events>
}
   2b354:	bf00      	nop
   2b356:	3708      	adds	r7, #8
   2b358:	46bd      	mov	sp, r7
   2b35a:	bd80      	pop	{r7, pc}

0002b35c <increment_count_up_to_limit>:
{
   2b35c:	b480      	push	{r7}
   2b35e:	b083      	sub	sp, #12
   2b360:	af00      	add	r7, sp, #0
   2b362:	6078      	str	r0, [r7, #4]
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2b364:	687b      	ldr	r3, [r7, #4]
   2b366:	689b      	ldr	r3, [r3, #8]
   2b368:	687a      	ldr	r2, [r7, #4]
   2b36a:	6891      	ldr	r1, [r2, #8]
   2b36c:	687a      	ldr	r2, [r7, #4]
   2b36e:	68d2      	ldr	r2, [r2, #12]
   2b370:	4291      	cmp	r1, r2
   2b372:	d001      	beq.n	2b378 <increment_count_up_to_limit+0x1c>
   2b374:	2201      	movs	r2, #1
   2b376:	e000      	b.n	2b37a <increment_count_up_to_limit+0x1e>
   2b378:	2200      	movs	r2, #0
   2b37a:	441a      	add	r2, r3
   2b37c:	687b      	ldr	r3, [r7, #4]
   2b37e:	609a      	str	r2, [r3, #8]
}
   2b380:	bf00      	nop
   2b382:	370c      	adds	r7, #12
   2b384:	46bd      	mov	sp, r7
   2b386:	bc80      	pop	{r7}
   2b388:	4770      	bx	lr

0002b38a <do_sem_give>:
{
   2b38a:	b580      	push	{r7, lr}
   2b38c:	b086      	sub	sp, #24
   2b38e:	af00      	add	r7, sp, #0
   2b390:	6078      	str	r0, [r7, #4]
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   2b392:	687b      	ldr	r3, [r7, #4]
   2b394:	4618      	mov	r0, r3
   2b396:	f7ff fe98 	bl	2b0ca <z_unpend_first_thread>
   2b39a:	6178      	str	r0, [r7, #20]
	if (thread != NULL) {
   2b39c:	697b      	ldr	r3, [r7, #20]
   2b39e:	2b00      	cmp	r3, #0
   2b3a0:	d012      	beq.n	2b3c8 <do_sem_give+0x3e>
   2b3a2:	697b      	ldr	r3, [r7, #20]
   2b3a4:	60bb      	str	r3, [r7, #8]
	if (z_is_thread_ready(thread)) {
   2b3a6:	68b8      	ldr	r0, [r7, #8]
   2b3a8:	f7ff ff82 	bl	2b2b0 <z_is_thread_ready>
   2b3ac:	4603      	mov	r3, r0
   2b3ae:	2b00      	cmp	r3, #0
   2b3b0:	d002      	beq.n	2b3b8 <do_sem_give+0x2e>
		z_add_thread_to_ready_q(thread);
   2b3b2:	68b8      	ldr	r0, [r7, #8]
   2b3b4:	f7eb fe9a 	bl	170ec <z_add_thread_to_ready_q>
   2b3b8:	697b      	ldr	r3, [r7, #20]
   2b3ba:	613b      	str	r3, [r7, #16]
   2b3bc:	2300      	movs	r3, #0
   2b3be:	60fb      	str	r3, [r7, #12]
   2b3c0:	693b      	ldr	r3, [r7, #16]
   2b3c2:	68fa      	ldr	r2, [r7, #12]
   2b3c4:	669a      	str	r2, [r3, #104]	; 0x68
}
   2b3c6:	e005      	b.n	2b3d4 <do_sem_give+0x4a>
		increment_count_up_to_limit(sem);
   2b3c8:	6878      	ldr	r0, [r7, #4]
   2b3ca:	f7ff ffc7 	bl	2b35c <increment_count_up_to_limit>
		handle_poll_events(sem);
   2b3ce:	6878      	ldr	r0, [r7, #4]
   2b3d0:	f7ff ffb6 	bl	2b340 <handle_poll_events>
}
   2b3d4:	bf00      	nop
   2b3d6:	3718      	adds	r7, #24
   2b3d8:	46bd      	mov	sp, r7
   2b3da:	bd80      	pop	{r7, pc}

0002b3dc <k_thread_name_set>:
K_SYSCALL_DECLARE2(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, int, k_tid_t, thread_id, const char *, value)
   2b3dc:	b580      	push	{r7, lr}
   2b3de:	b082      	sub	sp, #8
   2b3e0:	af00      	add	r7, sp, #0
   2b3e2:	6078      	str	r0, [r7, #4]
   2b3e4:	6039      	str	r1, [r7, #0]
   2b3e6:	6839      	ldr	r1, [r7, #0]
   2b3e8:	6878      	ldr	r0, [r7, #4]
   2b3ea:	f000 f8f9 	bl	2b5e0 <z_impl_k_thread_name_set>
   2b3ee:	4603      	mov	r3, r0
   2b3f0:	4618      	mov	r0, r3
   2b3f2:	3708      	adds	r7, #8
   2b3f4:	46bd      	mov	sp, r7
   2b3f6:	bd80      	pop	{r7, pc}

0002b3f8 <sys_dnode_init>:
{
   2b3f8:	b480      	push	{r7}
   2b3fa:	b083      	sub	sp, #12
   2b3fc:	af00      	add	r7, sp, #0
   2b3fe:	6078      	str	r0, [r7, #4]
	node->next = NULL;
   2b400:	687b      	ldr	r3, [r7, #4]
   2b402:	2200      	movs	r2, #0
   2b404:	601a      	str	r2, [r3, #0]
	node->prev = NULL;
   2b406:	687b      	ldr	r3, [r7, #4]
   2b408:	2200      	movs	r2, #0
   2b40a:	605a      	str	r2, [r3, #4]
}
   2b40c:	bf00      	nop
   2b40e:	370c      	adds	r7, #12
   2b410:	46bd      	mov	sp, r7
   2b412:	bc80      	pop	{r7}
   2b414:	4770      	bx	lr

0002b416 <sys_dnode_is_linked>:
{
   2b416:	b480      	push	{r7}
   2b418:	b083      	sub	sp, #12
   2b41a:	af00      	add	r7, sp, #0
   2b41c:	6078      	str	r0, [r7, #4]
	return node->next != NULL;
   2b41e:	687b      	ldr	r3, [r7, #4]
   2b420:	681b      	ldr	r3, [r3, #0]
   2b422:	2b00      	cmp	r3, #0
   2b424:	bf14      	ite	ne
   2b426:	2301      	movne	r3, #1
   2b428:	2300      	moveq	r3, #0
   2b42a:	b2db      	uxtb	r3, r3
}
   2b42c:	4618      	mov	r0, r3
   2b42e:	370c      	adds	r7, #12
   2b430:	46bd      	mov	sp, r7
   2b432:	bc80      	pop	{r7}
   2b434:	4770      	bx	lr

0002b436 <sys_clock_hw_cycles_per_sec>:
{
   2b436:	b480      	push	{r7}
   2b438:	af00      	add	r7, sp, #0
	return CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
   2b43a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
}
   2b43e:	4618      	mov	r0, r3
   2b440:	46bd      	mov	sp, r7
   2b442:	bc80      	pop	{r7}
   2b444:	4770      	bx	lr

0002b446 <k_thread_start>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
   2b446:	b580      	push	{r7, lr}
   2b448:	b082      	sub	sp, #8
   2b44a:	af00      	add	r7, sp, #0
   2b44c:	6078      	str	r0, [r7, #4]
   2b44e:	6878      	ldr	r0, [r7, #4]
   2b450:	f7ec fcc2 	bl	17dd8 <z_impl_k_thread_start>
   2b454:	bf00      	nop
   2b456:	3708      	adds	r7, #8
   2b458:	46bd      	mov	sp, r7
   2b45a:	bd80      	pop	{r7, pc}

0002b45c <z_init_timeout>:
{
   2b45c:	b580      	push	{r7, lr}
   2b45e:	b082      	sub	sp, #8
   2b460:	af00      	add	r7, sp, #0
   2b462:	6078      	str	r0, [r7, #4]
   2b464:	6039      	str	r1, [r7, #0]
	sys_dnode_init(&t->node);
   2b466:	687b      	ldr	r3, [r7, #4]
   2b468:	4618      	mov	r0, r3
   2b46a:	f7ff ffc5 	bl	2b3f8 <sys_dnode_init>
}
   2b46e:	bf00      	nop
   2b470:	3708      	adds	r7, #8
   2b472:	46bd      	mov	sp, r7
   2b474:	bd80      	pop	{r7, pc}

0002b476 <z_is_inactive_timeout>:
{
   2b476:	b580      	push	{r7, lr}
   2b478:	b082      	sub	sp, #8
   2b47a:	af00      	add	r7, sp, #0
   2b47c:	6078      	str	r0, [r7, #4]
	return !sys_dnode_is_linked(&t->node);
   2b47e:	687b      	ldr	r3, [r7, #4]
   2b480:	4618      	mov	r0, r3
   2b482:	f7ff ffc8 	bl	2b416 <sys_dnode_is_linked>
   2b486:	4603      	mov	r3, r0
   2b488:	2b00      	cmp	r3, #0
   2b48a:	bf14      	ite	ne
   2b48c:	2301      	movne	r3, #1
   2b48e:	2300      	moveq	r3, #0
   2b490:	b2db      	uxtb	r3, r3
   2b492:	f083 0301 	eor.w	r3, r3, #1
   2b496:	b2db      	uxtb	r3, r3
   2b498:	f003 0301 	and.w	r3, r3, #1
   2b49c:	b2db      	uxtb	r3, r3
}
   2b49e:	4618      	mov	r0, r3
   2b4a0:	3708      	adds	r7, #8
   2b4a2:	46bd      	mov	sp, r7
   2b4a4:	bd80      	pop	{r7, pc}

0002b4a6 <z_init_thread_timeout>:
{
   2b4a6:	b580      	push	{r7, lr}
   2b4a8:	b082      	sub	sp, #8
   2b4aa:	af00      	add	r7, sp, #0
   2b4ac:	6078      	str	r0, [r7, #4]
	z_init_timeout(&thread_base->timeout, NULL);
   2b4ae:	687b      	ldr	r3, [r7, #4]
   2b4b0:	3318      	adds	r3, #24
   2b4b2:	2100      	movs	r1, #0
   2b4b4:	4618      	mov	r0, r3
   2b4b6:	f7ff ffd1 	bl	2b45c <z_init_timeout>
}
   2b4ba:	bf00      	nop
   2b4bc:	3708      	adds	r7, #8
   2b4be:	46bd      	mov	sp, r7
   2b4c0:	bd80      	pop	{r7, pc}

0002b4c2 <z_abort_thread_timeout>:
{
   2b4c2:	b580      	push	{r7, lr}
   2b4c4:	b082      	sub	sp, #8
   2b4c6:	af00      	add	r7, sp, #0
   2b4c8:	6078      	str	r0, [r7, #4]
	return z_abort_timeout(&thread->base.timeout);
   2b4ca:	687b      	ldr	r3, [r7, #4]
   2b4cc:	3318      	adds	r3, #24
   2b4ce:	4618      	mov	r0, r3
   2b4d0:	f7ec ffc0 	bl	18454 <z_abort_timeout>
   2b4d4:	4603      	mov	r3, r0
}
   2b4d6:	4618      	mov	r0, r3
   2b4d8:	3708      	adds	r7, #8
   2b4da:	46bd      	mov	sp, r7
   2b4dc:	bd80      	pop	{r7, pc}

0002b4de <z_is_thread_pending>:
{
   2b4de:	b480      	push	{r7}
   2b4e0:	b083      	sub	sp, #12
   2b4e2:	af00      	add	r7, sp, #0
   2b4e4:	6078      	str	r0, [r7, #4]
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   2b4e6:	687b      	ldr	r3, [r7, #4]
   2b4e8:	7b5b      	ldrb	r3, [r3, #13]
   2b4ea:	f003 0302 	and.w	r3, r3, #2
   2b4ee:	2b00      	cmp	r3, #0
   2b4f0:	bf14      	ite	ne
   2b4f2:	2301      	movne	r3, #1
   2b4f4:	2300      	moveq	r3, #0
   2b4f6:	b2db      	uxtb	r3, r3
}
   2b4f8:	4618      	mov	r0, r3
   2b4fa:	370c      	adds	r7, #12
   2b4fc:	46bd      	mov	sp, r7
   2b4fe:	bc80      	pop	{r7}
   2b500:	4770      	bx	lr

0002b502 <z_is_thread_prevented_from_running>:
{
   2b502:	b480      	push	{r7}
   2b504:	b085      	sub	sp, #20
   2b506:	af00      	add	r7, sp, #0
   2b508:	6078      	str	r0, [r7, #4]
	u8_t state = thread->base.thread_state;
   2b50a:	687b      	ldr	r3, [r7, #4]
   2b50c:	7b5b      	ldrb	r3, [r3, #13]
   2b50e:	73fb      	strb	r3, [r7, #15]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   2b510:	7bfb      	ldrb	r3, [r7, #15]
   2b512:	f003 031f 	and.w	r3, r3, #31
			 _THREAD_DUMMY | _THREAD_SUSPENDED)) != 0U;
   2b516:	2b00      	cmp	r3, #0
   2b518:	bf14      	ite	ne
   2b51a:	2301      	movne	r3, #1
   2b51c:	2300      	moveq	r3, #0
   2b51e:	b2db      	uxtb	r3, r3
}
   2b520:	4618      	mov	r0, r3
   2b522:	3714      	adds	r7, #20
   2b524:	46bd      	mov	sp, r7
   2b526:	bc80      	pop	{r7}
   2b528:	4770      	bx	lr

0002b52a <z_is_thread_timeout_active>:
{
   2b52a:	b580      	push	{r7, lr}
   2b52c:	b082      	sub	sp, #8
   2b52e:	af00      	add	r7, sp, #0
   2b530:	6078      	str	r0, [r7, #4]
	return !z_is_inactive_timeout(&thread->base.timeout);
   2b532:	687b      	ldr	r3, [r7, #4]
   2b534:	3318      	adds	r3, #24
   2b536:	4618      	mov	r0, r3
   2b538:	f7ff ff9d 	bl	2b476 <z_is_inactive_timeout>
   2b53c:	4603      	mov	r3, r0
   2b53e:	2b00      	cmp	r3, #0
   2b540:	bf14      	ite	ne
   2b542:	2301      	movne	r3, #1
   2b544:	2300      	moveq	r3, #0
   2b546:	b2db      	uxtb	r3, r3
   2b548:	f083 0301 	eor.w	r3, r3, #1
   2b54c:	b2db      	uxtb	r3, r3
   2b54e:	f003 0301 	and.w	r3, r3, #1
   2b552:	b2db      	uxtb	r3, r3
}
   2b554:	4618      	mov	r0, r3
   2b556:	3708      	adds	r7, #8
   2b558:	46bd      	mov	sp, r7
   2b55a:	bd80      	pop	{r7, pc}

0002b55c <z_is_thread_ready>:
{
   2b55c:	b580      	push	{r7, lr}
   2b55e:	b082      	sub	sp, #8
   2b560:	af00      	add	r7, sp, #0
   2b562:	6078      	str	r0, [r7, #4]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2b564:	6878      	ldr	r0, [r7, #4]
   2b566:	f7ff ffcc 	bl	2b502 <z_is_thread_prevented_from_running>
   2b56a:	4603      	mov	r3, r0
   2b56c:	f083 0301 	eor.w	r3, r3, #1
   2b570:	b2db      	uxtb	r3, r3
   2b572:	2b00      	cmp	r3, #0
   2b574:	d00a      	beq.n	2b58c <z_is_thread_ready+0x30>
		 z_is_thread_timeout_active(thread));
   2b576:	6878      	ldr	r0, [r7, #4]
   2b578:	f7ff ffd7 	bl	2b52a <z_is_thread_timeout_active>
   2b57c:	4603      	mov	r3, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2b57e:	f083 0301 	eor.w	r3, r3, #1
   2b582:	b2db      	uxtb	r3, r3
   2b584:	2b00      	cmp	r3, #0
   2b586:	d001      	beq.n	2b58c <z_is_thread_ready+0x30>
   2b588:	2301      	movs	r3, #1
   2b58a:	e000      	b.n	2b58e <z_is_thread_ready+0x32>
   2b58c:	2300      	movs	r3, #0
   2b58e:	f003 0301 	and.w	r3, r3, #1
   2b592:	b2db      	uxtb	r3, r3
}
   2b594:	4618      	mov	r0, r3
   2b596:	3708      	adds	r7, #8
   2b598:	46bd      	mov	sp, r7
   2b59a:	bd80      	pop	{r7, pc}

0002b59c <z_has_thread_started>:
{
   2b59c:	b480      	push	{r7}
   2b59e:	b083      	sub	sp, #12
   2b5a0:	af00      	add	r7, sp, #0
   2b5a2:	6078      	str	r0, [r7, #4]
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   2b5a4:	687b      	ldr	r3, [r7, #4]
   2b5a6:	7b5b      	ldrb	r3, [r3, #13]
   2b5a8:	f003 0304 	and.w	r3, r3, #4
   2b5ac:	2b00      	cmp	r3, #0
   2b5ae:	bf0c      	ite	eq
   2b5b0:	2301      	moveq	r3, #1
   2b5b2:	2300      	movne	r3, #0
   2b5b4:	b2db      	uxtb	r3, r3
}
   2b5b6:	4618      	mov	r0, r3
   2b5b8:	370c      	adds	r7, #12
   2b5ba:	46bd      	mov	sp, r7
   2b5bc:	bc80      	pop	{r7}
   2b5be:	4770      	bx	lr

0002b5c0 <z_mark_thread_as_started>:
{
   2b5c0:	b480      	push	{r7}
   2b5c2:	b083      	sub	sp, #12
   2b5c4:	af00      	add	r7, sp, #0
   2b5c6:	6078      	str	r0, [r7, #4]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2b5c8:	687b      	ldr	r3, [r7, #4]
   2b5ca:	7b5b      	ldrb	r3, [r3, #13]
   2b5cc:	f023 0304 	bic.w	r3, r3, #4
   2b5d0:	b2da      	uxtb	r2, r3
   2b5d2:	687b      	ldr	r3, [r7, #4]
   2b5d4:	735a      	strb	r2, [r3, #13]
}
   2b5d6:	bf00      	nop
   2b5d8:	370c      	adds	r7, #12
   2b5da:	46bd      	mov	sp, r7
   2b5dc:	bc80      	pop	{r7}
   2b5de:	4770      	bx	lr

0002b5e0 <z_impl_k_thread_name_set>:
{
   2b5e0:	b480      	push	{r7}
   2b5e2:	b083      	sub	sp, #12
   2b5e4:	af00      	add	r7, sp, #0
   2b5e6:	6078      	str	r0, [r7, #4]
   2b5e8:	6039      	str	r1, [r7, #0]
	return -ENOSYS;
   2b5ea:	f06f 0357 	mvn.w	r3, #87	; 0x57
}
   2b5ee:	4618      	mov	r0, r3
   2b5f0:	370c      	adds	r7, #12
   2b5f2:	46bd      	mov	sp, r7
   2b5f4:	bc80      	pop	{r7}
   2b5f6:	4770      	bx	lr

0002b5f8 <schedule_new_thread>:
{
   2b5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b5fc:	b087      	sub	sp, #28
   2b5fe:	af00      	add	r7, sp, #0
   2b600:	60f8      	str	r0, [r7, #12]
   2b602:	60b9      	str	r1, [r7, #8]
	if (delay == 0) {
   2b604:	68bb      	ldr	r3, [r7, #8]
   2b606:	2b00      	cmp	r3, #0
   2b608:	d103      	bne.n	2b612 <schedule_new_thread+0x1a>
		k_thread_start(thread);
   2b60a:	68f8      	ldr	r0, [r7, #12]
   2b60c:	f7ff ff1b 	bl	2b446 <k_thread_start>
}
   2b610:	e098      	b.n	2b744 <schedule_new_thread+0x14c>
   2b612:	68bb      	ldr	r3, [r7, #8]
   2b614:	613b      	str	r3, [r7, #16]
	return (s32_t)ceiling_fraction(
   2b616:	693b      	ldr	r3, [r7, #16]
   2b618:	461d      	mov	r5, r3
   2b61a:	ea4f 76e5 	mov.w	r6, r5, asr #31
   2b61e:	f7ff ff0a 	bl	2b436 <sys_clock_hw_cycles_per_sec>
   2b622:	4603      	mov	r3, r0
   2b624:	ea4f 74e3 	mov.w	r4, r3, asr #31
   2b628:	fb03 f106 	mul.w	r1, r3, r6
   2b62c:	fb05 f204 	mul.w	r2, r5, r4
   2b630:	440a      	add	r2, r1
   2b632:	fba5 8903 	umull	r8, r9, r5, r3
   2b636:	eb02 0309 	add.w	r3, r2, r9
   2b63a:	4699      	mov	r9, r3
   2b63c:	f7ff fefb 	bl	2b436 <sys_clock_hw_cycles_per_sec>
   2b640:	4603      	mov	r3, r0
   2b642:	4619      	mov	r1, r3
   2b644:	ea4f 72e1 	mov.w	r2, r1, asr #31
   2b648:	460b      	mov	r3, r1
   2b64a:	4614      	mov	r4, r2
   2b64c:	f04f 0500 	mov.w	r5, #0
   2b650:	f04f 0600 	mov.w	r6, #0
   2b654:	0166      	lsls	r6, r4, #5
   2b656:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
   2b65a:	015d      	lsls	r5, r3, #5
   2b65c:	462b      	mov	r3, r5
   2b65e:	4634      	mov	r4, r6
   2b660:	1a5b      	subs	r3, r3, r1
   2b662:	eb64 0402 	sbc.w	r4, r4, r2
   2b666:	f04f 0500 	mov.w	r5, #0
   2b66a:	f04f 0600 	mov.w	r6, #0
   2b66e:	00a6      	lsls	r6, r4, #2
   2b670:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
   2b674:	009d      	lsls	r5, r3, #2
   2b676:	462b      	mov	r3, r5
   2b678:	4634      	mov	r4, r6
   2b67a:	185b      	adds	r3, r3, r1
   2b67c:	eb42 0404 	adc.w	r4, r2, r4
   2b680:	f04f 0100 	mov.w	r1, #0
   2b684:	f04f 0200 	mov.w	r2, #0
   2b688:	00e2      	lsls	r2, r4, #3
   2b68a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   2b68e:	00d9      	lsls	r1, r3, #3
   2b690:	460b      	mov	r3, r1
   2b692:	4614      	mov	r4, r2
   2b694:	4618      	mov	r0, r3
   2b696:	4621      	mov	r1, r4
   2b698:	f04f 0264 	mov.w	r2, #100	; 0x64
   2b69c:	f04f 0300 	mov.w	r3, #0
   2b6a0:	f7d5 f802 	bl	6a8 <__aeabi_ldivmod>
   2b6a4:	4603      	mov	r3, r0
   2b6a6:	460c      	mov	r4, r1
   2b6a8:	eb18 0a03 	adds.w	sl, r8, r3
   2b6ac:	eb49 0b04 	adc.w	fp, r9, r4
   2b6b0:	f11a 33ff 	adds.w	r3, sl, #4294967295	; 0xffffffff
   2b6b4:	603b      	str	r3, [r7, #0]
   2b6b6:	f14b 33ff 	adc.w	r3, fp, #4294967295	; 0xffffffff
   2b6ba:	607b      	str	r3, [r7, #4]
   2b6bc:	f7ff febb 	bl	2b436 <sys_clock_hw_cycles_per_sec>
   2b6c0:	4603      	mov	r3, r0
   2b6c2:	4619      	mov	r1, r3
   2b6c4:	ea4f 72e1 	mov.w	r2, r1, asr #31
   2b6c8:	460b      	mov	r3, r1
   2b6ca:	4614      	mov	r4, r2
   2b6cc:	f04f 0500 	mov.w	r5, #0
   2b6d0:	f04f 0600 	mov.w	r6, #0
   2b6d4:	0166      	lsls	r6, r4, #5
   2b6d6:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
   2b6da:	015d      	lsls	r5, r3, #5
   2b6dc:	462b      	mov	r3, r5
   2b6de:	4634      	mov	r4, r6
   2b6e0:	1a5b      	subs	r3, r3, r1
   2b6e2:	eb64 0402 	sbc.w	r4, r4, r2
   2b6e6:	f04f 0500 	mov.w	r5, #0
   2b6ea:	f04f 0600 	mov.w	r6, #0
   2b6ee:	00a6      	lsls	r6, r4, #2
   2b6f0:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
   2b6f4:	009d      	lsls	r5, r3, #2
   2b6f6:	462b      	mov	r3, r5
   2b6f8:	4634      	mov	r4, r6
   2b6fa:	185b      	adds	r3, r3, r1
   2b6fc:	eb42 0404 	adc.w	r4, r2, r4
   2b700:	f04f 0100 	mov.w	r1, #0
   2b704:	f04f 0200 	mov.w	r2, #0
   2b708:	00e2      	lsls	r2, r4, #3
   2b70a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   2b70e:	00d9      	lsls	r1, r3, #3
   2b710:	460b      	mov	r3, r1
   2b712:	4614      	mov	r4, r2
   2b714:	4618      	mov	r0, r3
   2b716:	4621      	mov	r1, r4
   2b718:	f04f 0264 	mov.w	r2, #100	; 0x64
   2b71c:	f04f 0300 	mov.w	r3, #0
   2b720:	f7d4 ffc2 	bl	6a8 <__aeabi_ldivmod>
   2b724:	4603      	mov	r3, r0
   2b726:	460c      	mov	r4, r1
   2b728:	461a      	mov	r2, r3
   2b72a:	4623      	mov	r3, r4
   2b72c:	e9d7 0100 	ldrd	r0, r1, [r7]
   2b730:	f7d4 ffba 	bl	6a8 <__aeabi_ldivmod>
   2b734:	4603      	mov	r3, r0
   2b736:	460c      	mov	r4, r1
		s32_t ticks = _TICK_ALIGN + z_ms_to_ticks(delay);
   2b738:	3301      	adds	r3, #1
   2b73a:	617b      	str	r3, [r7, #20]
		z_add_thread_timeout(thread, ticks);
   2b73c:	6979      	ldr	r1, [r7, #20]
   2b73e:	68f8      	ldr	r0, [r7, #12]
   2b740:	f7ec fac0 	bl	17cc4 <z_add_thread_timeout>
}
   2b744:	bf00      	nop
   2b746:	371c      	adds	r7, #28
   2b748:	46bd      	mov	sp, r7
   2b74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b74e <adjust_stack_size>:
{
   2b74e:	b480      	push	{r7}
   2b750:	b083      	sub	sp, #12
   2b752:	af00      	add	r7, sp, #0
   2b754:	6078      	str	r0, [r7, #4]
	return stack_size;
   2b756:	687b      	ldr	r3, [r7, #4]
}
   2b758:	4618      	mov	r0, r3
   2b75a:	370c      	adds	r7, #12
   2b75c:	46bd      	mov	sp, r7
   2b75e:	bc80      	pop	{r7}
   2b760:	4770      	bx	lr

0002b762 <z_impl_k_thread_create>:
{
   2b762:	b580      	push	{r7, lr}
   2b764:	b08a      	sub	sp, #40	; 0x28
   2b766:	af06      	add	r7, sp, #24
   2b768:	60f8      	str	r0, [r7, #12]
   2b76a:	60b9      	str	r1, [r7, #8]
   2b76c:	607a      	str	r2, [r7, #4]
   2b76e:	603b      	str	r3, [r7, #0]
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2b770:	2300      	movs	r3, #0
   2b772:	9305      	str	r3, [sp, #20]
   2b774:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b776:	9304      	str	r3, [sp, #16]
   2b778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2b77a:	9303      	str	r3, [sp, #12]
   2b77c:	6a3b      	ldr	r3, [r7, #32]
   2b77e:	9302      	str	r3, [sp, #8]
   2b780:	69fb      	ldr	r3, [r7, #28]
   2b782:	9301      	str	r3, [sp, #4]
   2b784:	69bb      	ldr	r3, [r7, #24]
   2b786:	9300      	str	r3, [sp, #0]
   2b788:	683b      	ldr	r3, [r7, #0]
   2b78a:	687a      	ldr	r2, [r7, #4]
   2b78c:	68b9      	ldr	r1, [r7, #8]
   2b78e:	68f8      	ldr	r0, [r7, #12]
   2b790:	f7ec fb60 	bl	17e54 <z_setup_new_thread>
	if (delay != K_FOREVER) {
   2b794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2b796:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2b79a:	d003      	beq.n	2b7a4 <z_impl_k_thread_create+0x42>
		schedule_new_thread(new_thread, delay);
   2b79c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   2b79e:	68f8      	ldr	r0, [r7, #12]
   2b7a0:	f7ff ff2a 	bl	2b5f8 <schedule_new_thread>
	return new_thread;
   2b7a4:	68fb      	ldr	r3, [r7, #12]
}
   2b7a6:	4618      	mov	r0, r3
   2b7a8:	3710      	adds	r7, #16
   2b7aa:	46bd      	mov	sp, r7
   2b7ac:	bd80      	pop	{r7, pc}

0002b7ae <z_thread_single_abort>:
{
   2b7ae:	b580      	push	{r7, lr}
   2b7b0:	b082      	sub	sp, #8
   2b7b2:	af00      	add	r7, sp, #0
   2b7b4:	6078      	str	r0, [r7, #4]
	if (thread->fn_abort != NULL) {
   2b7b6:	687b      	ldr	r3, [r7, #4]
   2b7b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2b7ba:	2b00      	cmp	r3, #0
   2b7bc:	d002      	beq.n	2b7c4 <z_thread_single_abort+0x16>
		thread->fn_abort();
   2b7be:	687b      	ldr	r3, [r7, #4]
   2b7c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2b7c2:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
   2b7c4:	6878      	ldr	r0, [r7, #4]
   2b7c6:	f7ff fec9 	bl	2b55c <z_is_thread_ready>
   2b7ca:	4603      	mov	r3, r0
   2b7cc:	2b00      	cmp	r3, #0
   2b7ce:	d003      	beq.n	2b7d8 <z_thread_single_abort+0x2a>
		z_remove_thread_from_ready_q(thread);
   2b7d0:	6878      	ldr	r0, [r7, #4]
   2b7d2:	f7eb fd81 	bl	172d8 <z_remove_thread_from_ready_q>
   2b7d6:	e011      	b.n	2b7fc <z_thread_single_abort+0x4e>
		if (z_is_thread_pending(thread)) {
   2b7d8:	6878      	ldr	r0, [r7, #4]
   2b7da:	f7ff fe80 	bl	2b4de <z_is_thread_pending>
   2b7de:	4603      	mov	r3, r0
   2b7e0:	2b00      	cmp	r3, #0
   2b7e2:	d002      	beq.n	2b7ea <z_thread_single_abort+0x3c>
			z_unpend_thread_no_timeout(thread);
   2b7e4:	6878      	ldr	r0, [r7, #4]
   2b7e6:	f7eb fdc1 	bl	1736c <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
   2b7ea:	6878      	ldr	r0, [r7, #4]
   2b7ec:	f7ff fe9d 	bl	2b52a <z_is_thread_timeout_active>
   2b7f0:	4603      	mov	r3, r0
   2b7f2:	2b00      	cmp	r3, #0
   2b7f4:	d002      	beq.n	2b7fc <z_thread_single_abort+0x4e>
			(void)z_abort_thread_timeout(thread);
   2b7f6:	6878      	ldr	r0, [r7, #4]
   2b7f8:	f7ff fe63 	bl	2b4c2 <z_abort_thread_timeout>
	thread->base.thread_state |= _THREAD_DEAD;
   2b7fc:	687b      	ldr	r3, [r7, #4]
   2b7fe:	7b5b      	ldrb	r3, [r3, #13]
   2b800:	f043 0308 	orr.w	r3, r3, #8
   2b804:	b2da      	uxtb	r2, r3
   2b806:	687b      	ldr	r3, [r7, #4]
   2b808:	735a      	strb	r2, [r3, #13]
}
   2b80a:	bf00      	nop
   2b80c:	3708      	adds	r7, #8
   2b80e:	46bd      	mov	sp, r7
   2b810:	bd80      	pop	{r7, pc}

0002b812 <z_init_thread_base>:
{
   2b812:	b580      	push	{r7, lr}
   2b814:	b084      	sub	sp, #16
   2b816:	af00      	add	r7, sp, #0
   2b818:	60f8      	str	r0, [r7, #12]
   2b81a:	60b9      	str	r1, [r7, #8]
   2b81c:	607a      	str	r2, [r7, #4]
   2b81e:	603b      	str	r3, [r7, #0]
	thread_base->user_options = (u8_t)options;
   2b820:	683b      	ldr	r3, [r7, #0]
   2b822:	b2da      	uxtb	r2, r3
   2b824:	68fb      	ldr	r3, [r7, #12]
   2b826:	731a      	strb	r2, [r3, #12]
	thread_base->thread_state = (u8_t)initial_state;
   2b828:	687b      	ldr	r3, [r7, #4]
   2b82a:	b2da      	uxtb	r2, r3
   2b82c:	68fb      	ldr	r3, [r7, #12]
   2b82e:	735a      	strb	r2, [r3, #13]
	thread_base->prio = priority;
   2b830:	68bb      	ldr	r3, [r7, #8]
   2b832:	b25a      	sxtb	r2, r3
   2b834:	68fb      	ldr	r3, [r7, #12]
   2b836:	739a      	strb	r2, [r3, #14]
	thread_base->sched_locked = 0U;
   2b838:	68fb      	ldr	r3, [r7, #12]
   2b83a:	2200      	movs	r2, #0
   2b83c:	73da      	strb	r2, [r3, #15]
	z_init_thread_timeout(thread_base);
   2b83e:	68f8      	ldr	r0, [r7, #12]
   2b840:	f7ff fe31 	bl	2b4a6 <z_init_thread_timeout>
}
   2b844:	bf00      	nop
   2b846:	3710      	adds	r7, #16
   2b848:	46bd      	mov	sp, r7
   2b84a:	bd80      	pop	{r7, pc}

0002b84c <atomic_get>:
{
   2b84c:	b480      	push	{r7}
   2b84e:	b083      	sub	sp, #12
   2b850:	af00      	add	r7, sp, #0
   2b852:	6078      	str	r0, [r7, #4]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b854:	687b      	ldr	r3, [r7, #4]
   2b856:	f3bf 8f5b 	dmb	ish
   2b85a:	681b      	ldr	r3, [r3, #0]
   2b85c:	f3bf 8f5b 	dmb	ish
}
   2b860:	4618      	mov	r0, r3
   2b862:	370c      	adds	r7, #12
   2b864:	46bd      	mov	sp, r7
   2b866:	bc80      	pop	{r7}
   2b868:	4770      	bx	lr

0002b86a <atomic_or>:
{
   2b86a:	b480      	push	{r7}
   2b86c:	b083      	sub	sp, #12
   2b86e:	af00      	add	r7, sp, #0
   2b870:	6078      	str	r0, [r7, #4]
   2b872:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b874:	683a      	ldr	r2, [r7, #0]
   2b876:	687b      	ldr	r3, [r7, #4]
   2b878:	f3bf 8f5b 	dmb	ish
   2b87c:	e853 1f00 	ldrex	r1, [r3]
   2b880:	ea41 0002 	orr.w	r0, r1, r2
   2b884:	e843 0c00 	strex	ip, r0, [r3]
   2b888:	f1bc 0f00 	cmp.w	ip, #0
   2b88c:	d1f6      	bne.n	2b87c <atomic_or+0x12>
   2b88e:	f3bf 8f5b 	dmb	ish
   2b892:	460b      	mov	r3, r1
}
   2b894:	4618      	mov	r0, r3
   2b896:	370c      	adds	r7, #12
   2b898:	46bd      	mov	sp, r7
   2b89a:	bc80      	pop	{r7}
   2b89c:	4770      	bx	lr

0002b89e <atomic_and>:
{
   2b89e:	b480      	push	{r7}
   2b8a0:	b083      	sub	sp, #12
   2b8a2:	af00      	add	r7, sp, #0
   2b8a4:	6078      	str	r0, [r7, #4]
   2b8a6:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b8a8:	683a      	ldr	r2, [r7, #0]
   2b8aa:	687b      	ldr	r3, [r7, #4]
   2b8ac:	f3bf 8f5b 	dmb	ish
   2b8b0:	e853 1f00 	ldrex	r1, [r3]
   2b8b4:	ea01 0002 	and.w	r0, r1, r2
   2b8b8:	e843 0c00 	strex	ip, r0, [r3]
   2b8bc:	f1bc 0f00 	cmp.w	ip, #0
   2b8c0:	d1f6      	bne.n	2b8b0 <atomic_and+0x12>
   2b8c2:	f3bf 8f5b 	dmb	ish
   2b8c6:	460b      	mov	r3, r1
}
   2b8c8:	4618      	mov	r0, r3
   2b8ca:	370c      	adds	r7, #12
   2b8cc:	46bd      	mov	sp, r7
   2b8ce:	bc80      	pop	{r7}
   2b8d0:	4770      	bx	lr

0002b8d2 <atomic_test_bit>:
{
   2b8d2:	b580      	push	{r7, lr}
   2b8d4:	b084      	sub	sp, #16
   2b8d6:	af00      	add	r7, sp, #0
   2b8d8:	6078      	str	r0, [r7, #4]
   2b8da:	6039      	str	r1, [r7, #0]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2b8dc:	683b      	ldr	r3, [r7, #0]
   2b8de:	095b      	lsrs	r3, r3, #5
   2b8e0:	009b      	lsls	r3, r3, #2
   2b8e2:	687a      	ldr	r2, [r7, #4]
   2b8e4:	4413      	add	r3, r2
   2b8e6:	4618      	mov	r0, r3
   2b8e8:	f7ff ffb0 	bl	2b84c <atomic_get>
   2b8ec:	60f8      	str	r0, [r7, #12]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2b8ee:	683b      	ldr	r3, [r7, #0]
   2b8f0:	f003 031f 	and.w	r3, r3, #31
   2b8f4:	68fa      	ldr	r2, [r7, #12]
   2b8f6:	fa42 f303 	asr.w	r3, r2, r3
   2b8fa:	f003 0301 	and.w	r3, r3, #1
   2b8fe:	2b00      	cmp	r3, #0
   2b900:	bf14      	ite	ne
   2b902:	2301      	movne	r3, #1
   2b904:	2300      	moveq	r3, #0
   2b906:	b2db      	uxtb	r3, r3
}
   2b908:	4618      	mov	r0, r3
   2b90a:	3710      	adds	r7, #16
   2b90c:	46bd      	mov	sp, r7
   2b90e:	bd80      	pop	{r7, pc}

0002b910 <atomic_test_and_set_bit>:
{
   2b910:	b580      	push	{r7, lr}
   2b912:	b084      	sub	sp, #16
   2b914:	af00      	add	r7, sp, #0
   2b916:	6078      	str	r0, [r7, #4]
   2b918:	6039      	str	r1, [r7, #0]
	atomic_val_t mask = ATOMIC_MASK(bit);
   2b91a:	683b      	ldr	r3, [r7, #0]
   2b91c:	f003 031f 	and.w	r3, r3, #31
   2b920:	2201      	movs	r2, #1
   2b922:	fa02 f303 	lsl.w	r3, r2, r3
   2b926:	60fb      	str	r3, [r7, #12]
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2b928:	683b      	ldr	r3, [r7, #0]
   2b92a:	095b      	lsrs	r3, r3, #5
   2b92c:	009b      	lsls	r3, r3, #2
   2b92e:	687a      	ldr	r2, [r7, #4]
   2b930:	4413      	add	r3, r2
   2b932:	68f9      	ldr	r1, [r7, #12]
   2b934:	4618      	mov	r0, r3
   2b936:	f7ff ff98 	bl	2b86a <atomic_or>
   2b93a:	60b8      	str	r0, [r7, #8]
	return (old & mask) != 0;
   2b93c:	68ba      	ldr	r2, [r7, #8]
   2b93e:	68fb      	ldr	r3, [r7, #12]
   2b940:	4013      	ands	r3, r2
   2b942:	2b00      	cmp	r3, #0
   2b944:	bf14      	ite	ne
   2b946:	2301      	movne	r3, #1
   2b948:	2300      	moveq	r3, #0
   2b94a:	b2db      	uxtb	r3, r3
}
   2b94c:	4618      	mov	r0, r3
   2b94e:	3710      	adds	r7, #16
   2b950:	46bd      	mov	sp, r7
   2b952:	bd80      	pop	{r7, pc}

0002b954 <atomic_clear_bit>:
{
   2b954:	b580      	push	{r7, lr}
   2b956:	b084      	sub	sp, #16
   2b958:	af00      	add	r7, sp, #0
   2b95a:	6078      	str	r0, [r7, #4]
   2b95c:	6039      	str	r1, [r7, #0]
	atomic_val_t mask = ATOMIC_MASK(bit);
   2b95e:	683b      	ldr	r3, [r7, #0]
   2b960:	f003 031f 	and.w	r3, r3, #31
   2b964:	2201      	movs	r2, #1
   2b966:	fa02 f303 	lsl.w	r3, r2, r3
   2b96a:	60fb      	str	r3, [r7, #12]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2b96c:	683b      	ldr	r3, [r7, #0]
   2b96e:	095b      	lsrs	r3, r3, #5
   2b970:	009b      	lsls	r3, r3, #2
   2b972:	687a      	ldr	r2, [r7, #4]
   2b974:	441a      	add	r2, r3
   2b976:	68fb      	ldr	r3, [r7, #12]
   2b978:	43db      	mvns	r3, r3
   2b97a:	4619      	mov	r1, r3
   2b97c:	4610      	mov	r0, r2
   2b97e:	f7ff ff8e 	bl	2b89e <atomic_and>
}
   2b982:	bf00      	nop
   2b984:	3710      	adds	r7, #16
   2b986:	46bd      	mov	sp, r7
   2b988:	bd80      	pop	{r7, pc}

0002b98a <sys_dnode_init>:
{
   2b98a:	b480      	push	{r7}
   2b98c:	b083      	sub	sp, #12
   2b98e:	af00      	add	r7, sp, #0
   2b990:	6078      	str	r0, [r7, #4]
	node->next = NULL;
   2b992:	687b      	ldr	r3, [r7, #4]
   2b994:	2200      	movs	r2, #0
   2b996:	601a      	str	r2, [r3, #0]
	node->prev = NULL;
   2b998:	687b      	ldr	r3, [r7, #4]
   2b99a:	2200      	movs	r2, #0
   2b99c:	605a      	str	r2, [r3, #4]
}
   2b99e:	bf00      	nop
   2b9a0:	370c      	adds	r7, #12
   2b9a2:	46bd      	mov	sp, r7
   2b9a4:	bc80      	pop	{r7}
   2b9a6:	4770      	bx	lr

0002b9a8 <z_sfnode_next_peek>:
{
   2b9a8:	b480      	push	{r7}
   2b9aa:	b083      	sub	sp, #12
   2b9ac:	af00      	add	r7, sp, #0
   2b9ae:	6078      	str	r0, [r7, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2b9b0:	687b      	ldr	r3, [r7, #4]
   2b9b2:	681b      	ldr	r3, [r3, #0]
   2b9b4:	f023 0303 	bic.w	r3, r3, #3
}
   2b9b8:	4618      	mov	r0, r3
   2b9ba:	370c      	adds	r7, #12
   2b9bc:	46bd      	mov	sp, r7
   2b9be:	bc80      	pop	{r7}
   2b9c0:	4770      	bx	lr

0002b9c2 <z_sfnode_next_set>:
{
   2b9c2:	b580      	push	{r7, lr}
   2b9c4:	b084      	sub	sp, #16
   2b9c6:	af00      	add	r7, sp, #0
   2b9c8:	6078      	str	r0, [r7, #4]
   2b9ca:	6039      	str	r1, [r7, #0]
	u8_t cur_flags = sys_sfnode_flags_get(parent);
   2b9cc:	6878      	ldr	r0, [r7, #4]
   2b9ce:	f000 f83b 	bl	2ba48 <sys_sfnode_flags_get>
   2b9d2:	4603      	mov	r3, r0
   2b9d4:	73fb      	strb	r3, [r7, #15]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b9d6:	7bfa      	ldrb	r2, [r7, #15]
   2b9d8:	683b      	ldr	r3, [r7, #0]
   2b9da:	431a      	orrs	r2, r3
   2b9dc:	687b      	ldr	r3, [r7, #4]
   2b9de:	601a      	str	r2, [r3, #0]
}
   2b9e0:	bf00      	nop
   2b9e2:	3710      	adds	r7, #16
   2b9e4:	46bd      	mov	sp, r7
   2b9e6:	bd80      	pop	{r7, pc}

0002b9e8 <z_sflist_head_set>:
{
   2b9e8:	b480      	push	{r7}
   2b9ea:	b083      	sub	sp, #12
   2b9ec:	af00      	add	r7, sp, #0
   2b9ee:	6078      	str	r0, [r7, #4]
   2b9f0:	6039      	str	r1, [r7, #0]
	list->head = node;
   2b9f2:	687b      	ldr	r3, [r7, #4]
   2b9f4:	683a      	ldr	r2, [r7, #0]
   2b9f6:	601a      	str	r2, [r3, #0]
}
   2b9f8:	bf00      	nop
   2b9fa:	370c      	adds	r7, #12
   2b9fc:	46bd      	mov	sp, r7
   2b9fe:	bc80      	pop	{r7}
   2ba00:	4770      	bx	lr

0002ba02 <z_sflist_tail_set>:
{
   2ba02:	b480      	push	{r7}
   2ba04:	b083      	sub	sp, #12
   2ba06:	af00      	add	r7, sp, #0
   2ba08:	6078      	str	r0, [r7, #4]
   2ba0a:	6039      	str	r1, [r7, #0]
	list->tail = node;
   2ba0c:	687b      	ldr	r3, [r7, #4]
   2ba0e:	683a      	ldr	r2, [r7, #0]
   2ba10:	605a      	str	r2, [r3, #4]
}
   2ba12:	bf00      	nop
   2ba14:	370c      	adds	r7, #12
   2ba16:	46bd      	mov	sp, r7
   2ba18:	bc80      	pop	{r7}
   2ba1a:	4770      	bx	lr

0002ba1c <sys_sflist_peek_head>:
{
   2ba1c:	b480      	push	{r7}
   2ba1e:	b083      	sub	sp, #12
   2ba20:	af00      	add	r7, sp, #0
   2ba22:	6078      	str	r0, [r7, #4]
	return list->head;
   2ba24:	687b      	ldr	r3, [r7, #4]
   2ba26:	681b      	ldr	r3, [r3, #0]
}
   2ba28:	4618      	mov	r0, r3
   2ba2a:	370c      	adds	r7, #12
   2ba2c:	46bd      	mov	sp, r7
   2ba2e:	bc80      	pop	{r7}
   2ba30:	4770      	bx	lr

0002ba32 <sys_sflist_peek_tail>:
{
   2ba32:	b480      	push	{r7}
   2ba34:	b083      	sub	sp, #12
   2ba36:	af00      	add	r7, sp, #0
   2ba38:	6078      	str	r0, [r7, #4]
	return list->tail;
   2ba3a:	687b      	ldr	r3, [r7, #4]
   2ba3c:	685b      	ldr	r3, [r3, #4]
}
   2ba3e:	4618      	mov	r0, r3
   2ba40:	370c      	adds	r7, #12
   2ba42:	46bd      	mov	sp, r7
   2ba44:	bc80      	pop	{r7}
   2ba46:	4770      	bx	lr

0002ba48 <sys_sfnode_flags_get>:
{
   2ba48:	b480      	push	{r7}
   2ba4a:	b083      	sub	sp, #12
   2ba4c:	af00      	add	r7, sp, #0
   2ba4e:	6078      	str	r0, [r7, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ba50:	687b      	ldr	r3, [r7, #4]
   2ba52:	681b      	ldr	r3, [r3, #0]
   2ba54:	b2db      	uxtb	r3, r3
   2ba56:	f003 0303 	and.w	r3, r3, #3
   2ba5a:	b2db      	uxtb	r3, r3
}
   2ba5c:	4618      	mov	r0, r3
   2ba5e:	370c      	adds	r7, #12
   2ba60:	46bd      	mov	sp, r7
   2ba62:	bc80      	pop	{r7}
   2ba64:	4770      	bx	lr

0002ba66 <sys_sflist_peek_next_no_check>:
Z_GENLIST_PEEK_NEXT_NO_CHECK(sflist, sfnode)
   2ba66:	b580      	push	{r7, lr}
   2ba68:	b082      	sub	sp, #8
   2ba6a:	af00      	add	r7, sp, #0
   2ba6c:	6078      	str	r0, [r7, #4]
   2ba6e:	6878      	ldr	r0, [r7, #4]
   2ba70:	f7ff ff9a 	bl	2b9a8 <z_sfnode_next_peek>
   2ba74:	4603      	mov	r3, r0
   2ba76:	4618      	mov	r0, r3
   2ba78:	3708      	adds	r7, #8
   2ba7a:	46bd      	mov	sp, r7
   2ba7c:	bd80      	pop	{r7, pc}

0002ba7e <sys_sflist_peek_next>:
Z_GENLIST_PEEK_NEXT(sflist, sfnode)
   2ba7e:	b580      	push	{r7, lr}
   2ba80:	b082      	sub	sp, #8
   2ba82:	af00      	add	r7, sp, #0
   2ba84:	6078      	str	r0, [r7, #4]
   2ba86:	687b      	ldr	r3, [r7, #4]
   2ba88:	2b00      	cmp	r3, #0
   2ba8a:	d004      	beq.n	2ba96 <sys_sflist_peek_next+0x18>
   2ba8c:	6878      	ldr	r0, [r7, #4]
   2ba8e:	f7ff ffea 	bl	2ba66 <sys_sflist_peek_next_no_check>
   2ba92:	4603      	mov	r3, r0
   2ba94:	e000      	b.n	2ba98 <sys_sflist_peek_next+0x1a>
   2ba96:	2300      	movs	r3, #0
   2ba98:	4618      	mov	r0, r3
   2ba9a:	3708      	adds	r7, #8
   2ba9c:	46bd      	mov	sp, r7
   2ba9e:	bd80      	pop	{r7, pc}

0002baa0 <sys_sflist_remove>:
 */
static inline void sys_sflist_remove(sys_sflist_t *list,
				     sys_sfnode_t *prev_node,
				     sys_sfnode_t *node);

Z_GENLIST_REMOVE(sflist, sfnode)
   2baa0:	b580      	push	{r7, lr}
   2baa2:	b084      	sub	sp, #16
   2baa4:	af00      	add	r7, sp, #0
   2baa6:	60f8      	str	r0, [r7, #12]
   2baa8:	60b9      	str	r1, [r7, #8]
   2baaa:	607a      	str	r2, [r7, #4]
   2baac:	68bb      	ldr	r3, [r7, #8]
   2baae:	2b00      	cmp	r3, #0
   2bab0:	d117      	bne.n	2bae2 <sys_sflist_remove+0x42>
   2bab2:	6878      	ldr	r0, [r7, #4]
   2bab4:	f7ff ff78 	bl	2b9a8 <z_sfnode_next_peek>
   2bab8:	4603      	mov	r3, r0
   2baba:	4619      	mov	r1, r3
   2babc:	68f8      	ldr	r0, [r7, #12]
   2babe:	f7ff ff93 	bl	2b9e8 <z_sflist_head_set>
   2bac2:	68f8      	ldr	r0, [r7, #12]
   2bac4:	f7ff ffb5 	bl	2ba32 <sys_sflist_peek_tail>
   2bac8:	4602      	mov	r2, r0
   2baca:	687b      	ldr	r3, [r7, #4]
   2bacc:	4293      	cmp	r3, r2
   2bace:	d11b      	bne.n	2bb08 <sys_sflist_remove+0x68>
   2bad0:	68f8      	ldr	r0, [r7, #12]
   2bad2:	f7ff ffa3 	bl	2ba1c <sys_sflist_peek_head>
   2bad6:	4603      	mov	r3, r0
   2bad8:	4619      	mov	r1, r3
   2bada:	68f8      	ldr	r0, [r7, #12]
   2badc:	f7ff ff91 	bl	2ba02 <z_sflist_tail_set>
   2bae0:	e012      	b.n	2bb08 <sys_sflist_remove+0x68>
   2bae2:	6878      	ldr	r0, [r7, #4]
   2bae4:	f7ff ff60 	bl	2b9a8 <z_sfnode_next_peek>
   2bae8:	4603      	mov	r3, r0
   2baea:	4619      	mov	r1, r3
   2baec:	68b8      	ldr	r0, [r7, #8]
   2baee:	f7ff ff68 	bl	2b9c2 <z_sfnode_next_set>
   2baf2:	68f8      	ldr	r0, [r7, #12]
   2baf4:	f7ff ff9d 	bl	2ba32 <sys_sflist_peek_tail>
   2baf8:	4602      	mov	r2, r0
   2bafa:	687b      	ldr	r3, [r7, #4]
   2bafc:	4293      	cmp	r3, r2
   2bafe:	d103      	bne.n	2bb08 <sys_sflist_remove+0x68>
   2bb00:	68b9      	ldr	r1, [r7, #8]
   2bb02:	68f8      	ldr	r0, [r7, #12]
   2bb04:	f7ff ff7d 	bl	2ba02 <z_sflist_tail_set>
   2bb08:	2100      	movs	r1, #0
   2bb0a:	6878      	ldr	r0, [r7, #4]
   2bb0c:	f7ff ff59 	bl	2b9c2 <z_sfnode_next_set>
   2bb10:	bf00      	nop
   2bb12:	3710      	adds	r7, #16
   2bb14:	46bd      	mov	sp, r7
   2bb16:	bd80      	pop	{r7, pc}

0002bb18 <sys_sflist_find_and_remove>:
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2bb18:	b580      	push	{r7, lr}
   2bb1a:	b084      	sub	sp, #16
   2bb1c:	af00      	add	r7, sp, #0
   2bb1e:	6078      	str	r0, [r7, #4]
   2bb20:	6039      	str	r1, [r7, #0]
   2bb22:	2300      	movs	r3, #0
   2bb24:	60fb      	str	r3, [r7, #12]
   2bb26:	6878      	ldr	r0, [r7, #4]
   2bb28:	f7ff ff78 	bl	2ba1c <sys_sflist_peek_head>
   2bb2c:	60b8      	str	r0, [r7, #8]
   2bb2e:	e010      	b.n	2bb52 <sys_sflist_find_and_remove+0x3a>
   2bb30:	68ba      	ldr	r2, [r7, #8]
   2bb32:	683b      	ldr	r3, [r7, #0]
   2bb34:	429a      	cmp	r2, r3
   2bb36:	d106      	bne.n	2bb46 <sys_sflist_find_and_remove+0x2e>
   2bb38:	683a      	ldr	r2, [r7, #0]
   2bb3a:	68f9      	ldr	r1, [r7, #12]
   2bb3c:	6878      	ldr	r0, [r7, #4]
   2bb3e:	f7ff ffaf 	bl	2baa0 <sys_sflist_remove>
   2bb42:	2301      	movs	r3, #1
   2bb44:	e009      	b.n	2bb5a <sys_sflist_find_and_remove+0x42>
   2bb46:	68bb      	ldr	r3, [r7, #8]
   2bb48:	60fb      	str	r3, [r7, #12]
   2bb4a:	68b8      	ldr	r0, [r7, #8]
   2bb4c:	f7ff ff97 	bl	2ba7e <sys_sflist_peek_next>
   2bb50:	60b8      	str	r0, [r7, #8]
   2bb52:	68bb      	ldr	r3, [r7, #8]
   2bb54:	2b00      	cmp	r3, #0
   2bb56:	d1eb      	bne.n	2bb30 <sys_sflist_find_and_remove+0x18>
   2bb58:	2300      	movs	r3, #0
   2bb5a:	4618      	mov	r0, r3
   2bb5c:	3710      	adds	r7, #16
   2bb5e:	46bd      	mov	sp, r7
   2bb60:	bd80      	pop	{r7, pc}

0002bb62 <sys_clock_hw_cycles_per_sec>:
{
   2bb62:	b480      	push	{r7}
   2bb64:	af00      	add	r7, sp, #0
	return CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
   2bb66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
}
   2bb6a:	4618      	mov	r0, r3
   2bb6c:	46bd      	mov	sp, r7
   2bb6e:	bc80      	pop	{r7}
   2bb70:	4770      	bx	lr

0002bb72 <k_queue_remove>:
{
   2bb72:	b580      	push	{r7, lr}
   2bb74:	b082      	sub	sp, #8
   2bb76:	af00      	add	r7, sp, #0
   2bb78:	6078      	str	r0, [r7, #4]
   2bb7a:	6039      	str	r1, [r7, #0]
	return sys_sflist_find_and_remove(&queue->data_q, (sys_sfnode_t *)data);
   2bb7c:	687b      	ldr	r3, [r7, #4]
   2bb7e:	6839      	ldr	r1, [r7, #0]
   2bb80:	4618      	mov	r0, r3
   2bb82:	f7ff ffc9 	bl	2bb18 <sys_sflist_find_and_remove>
   2bb86:	4603      	mov	r3, r0
}
   2bb88:	4618      	mov	r0, r3
   2bb8a:	3708      	adds	r7, #8
   2bb8c:	46bd      	mov	sp, r7
   2bb8e:	bd80      	pop	{r7, pc}

0002bb90 <k_work_init>:
{
   2bb90:	b480      	push	{r7}
   2bb92:	b083      	sub	sp, #12
   2bb94:	af00      	add	r7, sp, #0
   2bb96:	6078      	str	r0, [r7, #4]
   2bb98:	6039      	str	r1, [r7, #0]
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2bb9a:	687b      	ldr	r3, [r7, #4]
   2bb9c:	2200      	movs	r2, #0
   2bb9e:	601a      	str	r2, [r3, #0]
   2bba0:	687b      	ldr	r3, [r7, #4]
   2bba2:	683a      	ldr	r2, [r7, #0]
   2bba4:	605a      	str	r2, [r3, #4]
   2bba6:	687b      	ldr	r3, [r7, #4]
   2bba8:	2200      	movs	r2, #0
   2bbaa:	609a      	str	r2, [r3, #8]
}
   2bbac:	bf00      	nop
   2bbae:	370c      	adds	r7, #12
   2bbb0:	46bd      	mov	sp, r7
   2bbb2:	bc80      	pop	{r7}
   2bbb4:	4770      	bx	lr

0002bbb6 <k_work_submit_to_queue>:
{
   2bbb6:	b580      	push	{r7, lr}
   2bbb8:	b082      	sub	sp, #8
   2bbba:	af00      	add	r7, sp, #0
   2bbbc:	6078      	str	r0, [r7, #4]
   2bbbe:	6039      	str	r1, [r7, #0]
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2bbc0:	683b      	ldr	r3, [r7, #0]
   2bbc2:	3308      	adds	r3, #8
   2bbc4:	2100      	movs	r1, #0
   2bbc6:	4618      	mov	r0, r3
   2bbc8:	f7ff fea2 	bl	2b910 <atomic_test_and_set_bit>
   2bbcc:	4603      	mov	r3, r0
   2bbce:	f083 0301 	eor.w	r3, r3, #1
   2bbd2:	b2db      	uxtb	r3, r3
   2bbd4:	2b00      	cmp	r3, #0
   2bbd6:	d004      	beq.n	2bbe2 <k_work_submit_to_queue+0x2c>
		k_queue_append(&work_q->queue, work);
   2bbd8:	687b      	ldr	r3, [r7, #4]
   2bbda:	6839      	ldr	r1, [r7, #0]
   2bbdc:	4618      	mov	r0, r3
   2bbde:	f7fe fdc6 	bl	2a76e <k_queue_append>
}
   2bbe2:	bf00      	nop
   2bbe4:	3708      	adds	r7, #8
   2bbe6:	46bd      	mov	sp, r7
   2bbe8:	bd80      	pop	{r7, pc}

0002bbea <k_work_pending>:
{
   2bbea:	b580      	push	{r7, lr}
   2bbec:	b082      	sub	sp, #8
   2bbee:	af00      	add	r7, sp, #0
   2bbf0:	6078      	str	r0, [r7, #4]
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   2bbf2:	687b      	ldr	r3, [r7, #4]
   2bbf4:	3308      	adds	r3, #8
   2bbf6:	2100      	movs	r1, #0
   2bbf8:	4618      	mov	r0, r3
   2bbfa:	f7ff fe6a 	bl	2b8d2 <atomic_test_bit>
   2bbfe:	4603      	mov	r3, r0
}
   2bc00:	4618      	mov	r0, r3
   2bc02:	3708      	adds	r7, #8
   2bc04:	46bd      	mov	sp, r7
   2bc06:	bd80      	pop	{r7, pc}

0002bc08 <k_thread_create>:
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
   2bc08:	b580      	push	{r7, lr}
   2bc0a:	b08a      	sub	sp, #40	; 0x28
   2bc0c:	af06      	add	r7, sp, #24
   2bc0e:	60f8      	str	r0, [r7, #12]
   2bc10:	60b9      	str	r1, [r7, #8]
   2bc12:	607a      	str	r2, [r7, #4]
   2bc14:	603b      	str	r3, [r7, #0]
   2bc16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2bc18:	9305      	str	r3, [sp, #20]
   2bc1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bc1c:	9304      	str	r3, [sp, #16]
   2bc1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2bc20:	9303      	str	r3, [sp, #12]
   2bc22:	6a3b      	ldr	r3, [r7, #32]
   2bc24:	9302      	str	r3, [sp, #8]
   2bc26:	69fb      	ldr	r3, [r7, #28]
   2bc28:	9301      	str	r3, [sp, #4]
   2bc2a:	69bb      	ldr	r3, [r7, #24]
   2bc2c:	9300      	str	r3, [sp, #0]
   2bc2e:	683b      	ldr	r3, [r7, #0]
   2bc30:	687a      	ldr	r2, [r7, #4]
   2bc32:	68b9      	ldr	r1, [r7, #8]
   2bc34:	68f8      	ldr	r0, [r7, #12]
   2bc36:	f7ff fd94 	bl	2b762 <z_impl_k_thread_create>
   2bc3a:	4603      	mov	r3, r0
   2bc3c:	4618      	mov	r0, r3
   2bc3e:	3710      	adds	r7, #16
   2bc40:	46bd      	mov	sp, r7
   2bc42:	bd80      	pop	{r7, pc}

0002bc44 <k_thread_name_set>:
K_SYSCALL_DECLARE2(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, int, k_tid_t, thread_id, const char *, value)
   2bc44:	b580      	push	{r7, lr}
   2bc46:	b082      	sub	sp, #8
   2bc48:	af00      	add	r7, sp, #0
   2bc4a:	6078      	str	r0, [r7, #4]
   2bc4c:	6039      	str	r1, [r7, #0]
   2bc4e:	6839      	ldr	r1, [r7, #0]
   2bc50:	6878      	ldr	r0, [r7, #4]
   2bc52:	f7ff fcc5 	bl	2b5e0 <z_impl_k_thread_name_set>
   2bc56:	4603      	mov	r3, r0
   2bc58:	4618      	mov	r0, r3
   2bc5a:	3708      	adds	r7, #8
   2bc5c:	46bd      	mov	sp, r7
   2bc5e:	bd80      	pop	{r7, pc}

0002bc60 <k_queue_init>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
   2bc60:	b580      	push	{r7, lr}
   2bc62:	b082      	sub	sp, #8
   2bc64:	af00      	add	r7, sp, #0
   2bc66:	6078      	str	r0, [r7, #4]
   2bc68:	6878      	ldr	r0, [r7, #4]
   2bc6a:	f7fe fce0 	bl	2a62e <z_impl_k_queue_init>
   2bc6e:	bf00      	nop
   2bc70:	3708      	adds	r7, #8
   2bc72:	46bd      	mov	sp, r7
   2bc74:	bd80      	pop	{r7, pc}

0002bc76 <z_init_timeout>:
{
   2bc76:	b580      	push	{r7, lr}
   2bc78:	b082      	sub	sp, #8
   2bc7a:	af00      	add	r7, sp, #0
   2bc7c:	6078      	str	r0, [r7, #4]
   2bc7e:	6039      	str	r1, [r7, #0]
	sys_dnode_init(&t->node);
   2bc80:	687b      	ldr	r3, [r7, #4]
   2bc82:	4618      	mov	r0, r3
   2bc84:	f7ff fe81 	bl	2b98a <sys_dnode_init>
}
   2bc88:	bf00      	nop
   2bc8a:	3708      	adds	r7, #8
   2bc8c:	46bd      	mov	sp, r7
   2bc8e:	bd80      	pop	{r7, pc}

0002bc90 <work_timeout>:
{
   2bc90:	b580      	push	{r7, lr}
   2bc92:	b084      	sub	sp, #16
   2bc94:	af00      	add	r7, sp, #0
   2bc96:	6078      	str	r0, [r7, #4]
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
   2bc98:	687b      	ldr	r3, [r7, #4]
   2bc9a:	3b0c      	subs	r3, #12
   2bc9c:	60fb      	str	r3, [r7, #12]
	k_work_submit_to_queue(w->work_q, &w->work);
   2bc9e:	68fb      	ldr	r3, [r7, #12]
   2bca0:	69db      	ldr	r3, [r3, #28]
   2bca2:	68fa      	ldr	r2, [r7, #12]
   2bca4:	4611      	mov	r1, r2
   2bca6:	4618      	mov	r0, r3
   2bca8:	f7ff ff85 	bl	2bbb6 <k_work_submit_to_queue>
}
   2bcac:	bf00      	nop
   2bcae:	3710      	adds	r7, #16
   2bcb0:	46bd      	mov	sp, r7
   2bcb2:	bd80      	pop	{r7, pc}

0002bcb4 <work_cancel>:
{
   2bcb4:	b580      	push	{r7, lr}
   2bcb6:	b082      	sub	sp, #8
   2bcb8:	af00      	add	r7, sp, #0
   2bcba:	6078      	str	r0, [r7, #4]
	if (k_work_pending(&work->work)) {
   2bcbc:	687b      	ldr	r3, [r7, #4]
   2bcbe:	4618      	mov	r0, r3
   2bcc0:	f7ff ff93 	bl	2bbea <k_work_pending>
   2bcc4:	4603      	mov	r3, r0
   2bcc6:	2b00      	cmp	r3, #0
   2bcc8:	d010      	beq.n	2bcec <work_cancel+0x38>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   2bcca:	687b      	ldr	r3, [r7, #4]
   2bccc:	69db      	ldr	r3, [r3, #28]
   2bcce:	461a      	mov	r2, r3
   2bcd0:	687b      	ldr	r3, [r7, #4]
   2bcd2:	4619      	mov	r1, r3
   2bcd4:	4610      	mov	r0, r2
   2bcd6:	f7ff ff4c 	bl	2bb72 <k_queue_remove>
   2bcda:	4603      	mov	r3, r0
   2bcdc:	f083 0301 	eor.w	r3, r3, #1
   2bce0:	b2db      	uxtb	r3, r3
   2bce2:	2b00      	cmp	r3, #0
   2bce4:	d007      	beq.n	2bcf6 <work_cancel+0x42>
			return -EINVAL;
   2bce6:	f06f 0315 	mvn.w	r3, #21
   2bcea:	e00e      	b.n	2bd0a <work_cancel+0x56>
		(void)z_abort_timeout(&work->timeout);
   2bcec:	687b      	ldr	r3, [r7, #4]
   2bcee:	330c      	adds	r3, #12
   2bcf0:	4618      	mov	r0, r3
   2bcf2:	f7ec fbaf 	bl	18454 <z_abort_timeout>
	work->work_q = NULL;
   2bcf6:	687b      	ldr	r3, [r7, #4]
   2bcf8:	2200      	movs	r2, #0
   2bcfa:	61da      	str	r2, [r3, #28]
	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
   2bcfc:	687b      	ldr	r3, [r7, #4]
   2bcfe:	3308      	adds	r3, #8
   2bd00:	2100      	movs	r1, #0
   2bd02:	4618      	mov	r0, r3
   2bd04:	f7ff fe26 	bl	2b954 <atomic_clear_bit>
	return 0;
   2bd08:	2300      	movs	r3, #0
}
   2bd0a:	4618      	mov	r0, r3
   2bd0c:	3708      	adds	r7, #8
   2bd0e:	46bd      	mov	sp, r7
   2bd10:	bd80      	pop	{r7, pc}

0002bd12 <sys_dnode_init>:
{
   2bd12:	b480      	push	{r7}
   2bd14:	b083      	sub	sp, #12
   2bd16:	af00      	add	r7, sp, #0
   2bd18:	6078      	str	r0, [r7, #4]
	node->next = NULL;
   2bd1a:	687b      	ldr	r3, [r7, #4]
   2bd1c:	2200      	movs	r2, #0
   2bd1e:	601a      	str	r2, [r3, #0]
	node->prev = NULL;
   2bd20:	687b      	ldr	r3, [r7, #4]
   2bd22:	2200      	movs	r2, #0
   2bd24:	605a      	str	r2, [r3, #4]
}
   2bd26:	bf00      	nop
   2bd28:	370c      	adds	r7, #12
   2bd2a:	46bd      	mov	sp, r7
   2bd2c:	bc80      	pop	{r7}
   2bd2e:	4770      	bx	lr

0002bd30 <sys_dnode_is_linked>:
{
   2bd30:	b480      	push	{r7}
   2bd32:	b083      	sub	sp, #12
   2bd34:	af00      	add	r7, sp, #0
   2bd36:	6078      	str	r0, [r7, #4]
	return node->next != NULL;
   2bd38:	687b      	ldr	r3, [r7, #4]
   2bd3a:	681b      	ldr	r3, [r3, #0]
   2bd3c:	2b00      	cmp	r3, #0
   2bd3e:	bf14      	ite	ne
   2bd40:	2301      	movne	r3, #1
   2bd42:	2300      	moveq	r3, #0
   2bd44:	b2db      	uxtb	r3, r3
}
   2bd46:	4618      	mov	r0, r3
   2bd48:	370c      	adds	r7, #12
   2bd4a:	46bd      	mov	sp, r7
   2bd4c:	bc80      	pop	{r7}
   2bd4e:	4770      	bx	lr

0002bd50 <sys_dlist_is_empty>:
{
   2bd50:	b480      	push	{r7}
   2bd52:	b083      	sub	sp, #12
   2bd54:	af00      	add	r7, sp, #0
   2bd56:	6078      	str	r0, [r7, #4]
	return list->head == list;
   2bd58:	687b      	ldr	r3, [r7, #4]
   2bd5a:	681b      	ldr	r3, [r3, #0]
   2bd5c:	687a      	ldr	r2, [r7, #4]
   2bd5e:	429a      	cmp	r2, r3
   2bd60:	bf0c      	ite	eq
   2bd62:	2301      	moveq	r3, #1
   2bd64:	2300      	movne	r3, #0
   2bd66:	b2db      	uxtb	r3, r3
}
   2bd68:	4618      	mov	r0, r3
   2bd6a:	370c      	adds	r7, #12
   2bd6c:	46bd      	mov	sp, r7
   2bd6e:	bc80      	pop	{r7}
   2bd70:	4770      	bx	lr

0002bd72 <sys_dlist_peek_head>:
{
   2bd72:	b580      	push	{r7, lr}
   2bd74:	b082      	sub	sp, #8
   2bd76:	af00      	add	r7, sp, #0
   2bd78:	6078      	str	r0, [r7, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2bd7a:	6878      	ldr	r0, [r7, #4]
   2bd7c:	f7ff ffe8 	bl	2bd50 <sys_dlist_is_empty>
   2bd80:	4603      	mov	r3, r0
   2bd82:	2b00      	cmp	r3, #0
   2bd84:	d102      	bne.n	2bd8c <sys_dlist_peek_head+0x1a>
   2bd86:	687b      	ldr	r3, [r7, #4]
   2bd88:	681b      	ldr	r3, [r3, #0]
   2bd8a:	e000      	b.n	2bd8e <sys_dlist_peek_head+0x1c>
   2bd8c:	2300      	movs	r3, #0
}
   2bd8e:	4618      	mov	r0, r3
   2bd90:	3708      	adds	r7, #8
   2bd92:	46bd      	mov	sp, r7
   2bd94:	bd80      	pop	{r7, pc}

0002bd96 <sys_dlist_peek_next_no_check>:
{
   2bd96:	b480      	push	{r7}
   2bd98:	b083      	sub	sp, #12
   2bd9a:	af00      	add	r7, sp, #0
   2bd9c:	6078      	str	r0, [r7, #4]
   2bd9e:	6039      	str	r1, [r7, #0]
	return (node == list->tail) ? NULL : node->next;
   2bda0:	687b      	ldr	r3, [r7, #4]
   2bda2:	685b      	ldr	r3, [r3, #4]
   2bda4:	683a      	ldr	r2, [r7, #0]
   2bda6:	429a      	cmp	r2, r3
   2bda8:	d002      	beq.n	2bdb0 <sys_dlist_peek_next_no_check+0x1a>
   2bdaa:	683b      	ldr	r3, [r7, #0]
   2bdac:	681b      	ldr	r3, [r3, #0]
   2bdae:	e000      	b.n	2bdb2 <sys_dlist_peek_next_no_check+0x1c>
   2bdb0:	2300      	movs	r3, #0
}
   2bdb2:	4618      	mov	r0, r3
   2bdb4:	370c      	adds	r7, #12
   2bdb6:	46bd      	mov	sp, r7
   2bdb8:	bc80      	pop	{r7}
   2bdba:	4770      	bx	lr

0002bdbc <sys_dlist_peek_next>:
{
   2bdbc:	b580      	push	{r7, lr}
   2bdbe:	b082      	sub	sp, #8
   2bdc0:	af00      	add	r7, sp, #0
   2bdc2:	6078      	str	r0, [r7, #4]
   2bdc4:	6039      	str	r1, [r7, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2bdc6:	683b      	ldr	r3, [r7, #0]
   2bdc8:	2b00      	cmp	r3, #0
   2bdca:	d005      	beq.n	2bdd8 <sys_dlist_peek_next+0x1c>
   2bdcc:	6839      	ldr	r1, [r7, #0]
   2bdce:	6878      	ldr	r0, [r7, #4]
   2bdd0:	f7ff ffe1 	bl	2bd96 <sys_dlist_peek_next_no_check>
   2bdd4:	4603      	mov	r3, r0
   2bdd6:	e000      	b.n	2bdda <sys_dlist_peek_next+0x1e>
   2bdd8:	2300      	movs	r3, #0
}
   2bdda:	4618      	mov	r0, r3
   2bddc:	3708      	adds	r7, #8
   2bdde:	46bd      	mov	sp, r7
   2bde0:	bd80      	pop	{r7, pc}

0002bde2 <sys_dlist_append>:
{
   2bde2:	b480      	push	{r7}
   2bde4:	b083      	sub	sp, #12
   2bde6:	af00      	add	r7, sp, #0
   2bde8:	6078      	str	r0, [r7, #4]
   2bdea:	6039      	str	r1, [r7, #0]
	node->next = list;
   2bdec:	683b      	ldr	r3, [r7, #0]
   2bdee:	687a      	ldr	r2, [r7, #4]
   2bdf0:	601a      	str	r2, [r3, #0]
	node->prev = list->tail;
   2bdf2:	687b      	ldr	r3, [r7, #4]
   2bdf4:	685a      	ldr	r2, [r3, #4]
   2bdf6:	683b      	ldr	r3, [r7, #0]
   2bdf8:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   2bdfa:	687b      	ldr	r3, [r7, #4]
   2bdfc:	685b      	ldr	r3, [r3, #4]
   2bdfe:	683a      	ldr	r2, [r7, #0]
   2be00:	601a      	str	r2, [r3, #0]
	list->tail = node;
   2be02:	687b      	ldr	r3, [r7, #4]
   2be04:	683a      	ldr	r2, [r7, #0]
   2be06:	605a      	str	r2, [r3, #4]
}
   2be08:	bf00      	nop
   2be0a:	370c      	adds	r7, #12
   2be0c:	46bd      	mov	sp, r7
   2be0e:	bc80      	pop	{r7}
   2be10:	4770      	bx	lr

0002be12 <sys_dlist_insert>:
{
   2be12:	b480      	push	{r7}
   2be14:	b083      	sub	sp, #12
   2be16:	af00      	add	r7, sp, #0
   2be18:	6078      	str	r0, [r7, #4]
   2be1a:	6039      	str	r1, [r7, #0]
	node->prev = successor->prev;
   2be1c:	687b      	ldr	r3, [r7, #4]
   2be1e:	685a      	ldr	r2, [r3, #4]
   2be20:	683b      	ldr	r3, [r7, #0]
   2be22:	605a      	str	r2, [r3, #4]
	node->next = successor;
   2be24:	683b      	ldr	r3, [r7, #0]
   2be26:	687a      	ldr	r2, [r7, #4]
   2be28:	601a      	str	r2, [r3, #0]
	successor->prev->next = node;
   2be2a:	687b      	ldr	r3, [r7, #4]
   2be2c:	685b      	ldr	r3, [r3, #4]
   2be2e:	683a      	ldr	r2, [r7, #0]
   2be30:	601a      	str	r2, [r3, #0]
	successor->prev = node;
   2be32:	687b      	ldr	r3, [r7, #4]
   2be34:	683a      	ldr	r2, [r7, #0]
   2be36:	605a      	str	r2, [r3, #4]
}
   2be38:	bf00      	nop
   2be3a:	370c      	adds	r7, #12
   2be3c:	46bd      	mov	sp, r7
   2be3e:	bc80      	pop	{r7}
   2be40:	4770      	bx	lr

0002be42 <sys_dlist_remove>:
{
   2be42:	b580      	push	{r7, lr}
   2be44:	b082      	sub	sp, #8
   2be46:	af00      	add	r7, sp, #0
   2be48:	6078      	str	r0, [r7, #4]
	node->prev->next = node->next;
   2be4a:	687b      	ldr	r3, [r7, #4]
   2be4c:	685b      	ldr	r3, [r3, #4]
   2be4e:	687a      	ldr	r2, [r7, #4]
   2be50:	6812      	ldr	r2, [r2, #0]
   2be52:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2be54:	687b      	ldr	r3, [r7, #4]
   2be56:	681b      	ldr	r3, [r3, #0]
   2be58:	687a      	ldr	r2, [r7, #4]
   2be5a:	6852      	ldr	r2, [r2, #4]
   2be5c:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
   2be5e:	6878      	ldr	r0, [r7, #4]
   2be60:	f7ff ff57 	bl	2bd12 <sys_dnode_init>
}
   2be64:	bf00      	nop
   2be66:	3708      	adds	r7, #8
   2be68:	46bd      	mov	sp, r7
   2be6a:	bd80      	pop	{r7, pc}

0002be6c <__ticks_to_ms>:
{
   2be6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2be6e:	b083      	sub	sp, #12
   2be70:	af00      	add	r7, sp, #0
   2be72:	e9c7 0100 	strd	r0, r1, [r7]
	return (u64_t)ticks * MSEC_PER_SEC / (u64_t)CONFIG_SYS_CLOCK_TICKS_PER_SEC;
   2be76:	e9d7 1200 	ldrd	r1, r2, [r7]
   2be7a:	460b      	mov	r3, r1
   2be7c:	4614      	mov	r4, r2
   2be7e:	f04f 0500 	mov.w	r5, #0
   2be82:	f04f 0600 	mov.w	r6, #0
   2be86:	0166      	lsls	r6, r4, #5
   2be88:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
   2be8c:	015d      	lsls	r5, r3, #5
   2be8e:	462b      	mov	r3, r5
   2be90:	4634      	mov	r4, r6
   2be92:	1a5b      	subs	r3, r3, r1
   2be94:	eb64 0402 	sbc.w	r4, r4, r2
   2be98:	f04f 0500 	mov.w	r5, #0
   2be9c:	f04f 0600 	mov.w	r6, #0
   2bea0:	00a6      	lsls	r6, r4, #2
   2bea2:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
   2bea6:	009d      	lsls	r5, r3, #2
   2bea8:	462b      	mov	r3, r5
   2beaa:	4634      	mov	r4, r6
   2beac:	185b      	adds	r3, r3, r1
   2beae:	eb42 0404 	adc.w	r4, r2, r4
   2beb2:	f04f 0100 	mov.w	r1, #0
   2beb6:	f04f 0200 	mov.w	r2, #0
   2beba:	00e2      	lsls	r2, r4, #3
   2bebc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   2bec0:	00d9      	lsls	r1, r3, #3
   2bec2:	460b      	mov	r3, r1
   2bec4:	4614      	mov	r4, r2
   2bec6:	4618      	mov	r0, r3
   2bec8:	4621      	mov	r1, r4
   2beca:	f04f 0264 	mov.w	r2, #100	; 0x64
   2bece:	f04f 0300 	mov.w	r3, #0
   2bed2:	f7d4 fc39 	bl	748 <__aeabi_uldivmod>
   2bed6:	4603      	mov	r3, r0
   2bed8:	460c      	mov	r4, r1
}
   2beda:	4618      	mov	r0, r3
   2bedc:	4621      	mov	r1, r4
   2bede:	370c      	adds	r7, #12
   2bee0:	46bd      	mov	sp, r7
   2bee2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002bee4 <z_is_inactive_timeout>:
{
   2bee4:	b580      	push	{r7, lr}
   2bee6:	b082      	sub	sp, #8
   2bee8:	af00      	add	r7, sp, #0
   2beea:	6078      	str	r0, [r7, #4]
	return !sys_dnode_is_linked(&t->node);
   2beec:	687b      	ldr	r3, [r7, #4]
   2beee:	4618      	mov	r0, r3
   2bef0:	f7ff ff1e 	bl	2bd30 <sys_dnode_is_linked>
   2bef4:	4603      	mov	r3, r0
   2bef6:	2b00      	cmp	r3, #0
   2bef8:	bf14      	ite	ne
   2befa:	2301      	movne	r3, #1
   2befc:	2300      	moveq	r3, #0
   2befe:	b2db      	uxtb	r3, r3
   2bf00:	f083 0301 	eor.w	r3, r3, #1
   2bf04:	b2db      	uxtb	r3, r3
   2bf06:	f003 0301 	and.w	r3, r3, #1
   2bf0a:	b2db      	uxtb	r3, r3
}
   2bf0c:	4618      	mov	r0, r3
   2bf0e:	3708      	adds	r7, #8
   2bf10:	46bd      	mov	sp, r7
   2bf12:	bd80      	pop	{r7, pc}

0002bf14 <remove_timeout>:
{
   2bf14:	b580      	push	{r7, lr}
   2bf16:	b082      	sub	sp, #8
   2bf18:	af00      	add	r7, sp, #0
   2bf1a:	6078      	str	r0, [r7, #4]
	if (next(t) != NULL) {
   2bf1c:	6878      	ldr	r0, [r7, #4]
   2bf1e:	f7ec f9bf 	bl	182a0 <next>
   2bf22:	4603      	mov	r3, r0
   2bf24:	2b00      	cmp	r3, #0
   2bf26:	d008      	beq.n	2bf3a <remove_timeout+0x26>
		next(t)->dticks += t->dticks;
   2bf28:	6878      	ldr	r0, [r7, #4]
   2bf2a:	f7ec f9b9 	bl	182a0 <next>
   2bf2e:	4603      	mov	r3, r0
   2bf30:	6899      	ldr	r1, [r3, #8]
   2bf32:	687a      	ldr	r2, [r7, #4]
   2bf34:	6892      	ldr	r2, [r2, #8]
   2bf36:	440a      	add	r2, r1
   2bf38:	609a      	str	r2, [r3, #8]
	sys_dlist_remove(&t->node);
   2bf3a:	687b      	ldr	r3, [r7, #4]
   2bf3c:	4618      	mov	r0, r3
   2bf3e:	f7ff ff80 	bl	2be42 <sys_dlist_remove>
}
   2bf42:	bf00      	nop
   2bf44:	3708      	adds	r7, #8
   2bf46:	46bd      	mov	sp, r7
   2bf48:	bd80      	pop	{r7, pc}

0002bf4a <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   2bf4a:	b598      	push	{r3, r4, r7, lr}
   2bf4c:	af00      	add	r7, sp, #0
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   2bf4e:	f7ec fc45 	bl	187dc <z_tick_get>
   2bf52:	4603      	mov	r3, r0
   2bf54:	460c      	mov	r4, r1
#else
	return (u32_t)curr_tick;
#endif
}
   2bf56:	4618      	mov	r0, r3
   2bf58:	bd98      	pop	{r3, r4, r7, pc}

0002bf5a <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   2bf5a:	b598      	push	{r3, r4, r7, lr}
   2bf5c:	af00      	add	r7, sp, #0
	return __ticks_to_ms(z_tick_get());
   2bf5e:	f7ec fc3d 	bl	187dc <z_tick_get>
   2bf62:	4603      	mov	r3, r0
   2bf64:	460c      	mov	r4, r1
   2bf66:	4618      	mov	r0, r3
   2bf68:	4621      	mov	r1, r4
   2bf6a:	f7ff ff7f 	bl	2be6c <__ticks_to_ms>
   2bf6e:	4603      	mov	r3, r0
   2bf70:	460c      	mov	r4, r1
}
   2bf72:	4618      	mov	r0, r3
   2bf74:	4621      	mov	r1, r4
   2bf76:	bd98      	pop	{r3, r4, r7, pc}

0002bf78 <sys_dnode_init>:
{
   2bf78:	b480      	push	{r7}
   2bf7a:	b083      	sub	sp, #12
   2bf7c:	af00      	add	r7, sp, #0
   2bf7e:	6078      	str	r0, [r7, #4]
	node->next = NULL;
   2bf80:	687b      	ldr	r3, [r7, #4]
   2bf82:	2200      	movs	r2, #0
   2bf84:	601a      	str	r2, [r3, #0]
	node->prev = NULL;
   2bf86:	687b      	ldr	r3, [r7, #4]
   2bf88:	2200      	movs	r2, #0
   2bf8a:	605a      	str	r2, [r3, #4]
}
   2bf8c:	bf00      	nop
   2bf8e:	370c      	adds	r7, #12
   2bf90:	46bd      	mov	sp, r7
   2bf92:	bc80      	pop	{r7}
   2bf94:	4770      	bx	lr

0002bf96 <sys_dnode_is_linked>:
{
   2bf96:	b480      	push	{r7}
   2bf98:	b083      	sub	sp, #12
   2bf9a:	af00      	add	r7, sp, #0
   2bf9c:	6078      	str	r0, [r7, #4]
	return node->next != NULL;
   2bf9e:	687b      	ldr	r3, [r7, #4]
   2bfa0:	681b      	ldr	r3, [r3, #0]
   2bfa2:	2b00      	cmp	r3, #0
   2bfa4:	bf14      	ite	ne
   2bfa6:	2301      	movne	r3, #1
   2bfa8:	2300      	moveq	r3, #0
   2bfaa:	b2db      	uxtb	r3, r3
}
   2bfac:	4618      	mov	r0, r3
   2bfae:	370c      	adds	r7, #12
   2bfb0:	46bd      	mov	sp, r7
   2bfb2:	bc80      	pop	{r7}
   2bfb4:	4770      	bx	lr

0002bfb6 <sys_dlist_is_empty>:
{
   2bfb6:	b480      	push	{r7}
   2bfb8:	b083      	sub	sp, #12
   2bfba:	af00      	add	r7, sp, #0
   2bfbc:	6078      	str	r0, [r7, #4]
	return list->head == list;
   2bfbe:	687b      	ldr	r3, [r7, #4]
   2bfc0:	681b      	ldr	r3, [r3, #0]
   2bfc2:	687a      	ldr	r2, [r7, #4]
   2bfc4:	429a      	cmp	r2, r3
   2bfc6:	bf0c      	ite	eq
   2bfc8:	2301      	moveq	r3, #1
   2bfca:	2300      	movne	r3, #0
   2bfcc:	b2db      	uxtb	r3, r3
}
   2bfce:	4618      	mov	r0, r3
   2bfd0:	370c      	adds	r7, #12
   2bfd2:	46bd      	mov	sp, r7
   2bfd4:	bc80      	pop	{r7}
   2bfd6:	4770      	bx	lr

0002bfd8 <sys_dlist_peek_head>:
{
   2bfd8:	b580      	push	{r7, lr}
   2bfda:	b082      	sub	sp, #8
   2bfdc:	af00      	add	r7, sp, #0
   2bfde:	6078      	str	r0, [r7, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2bfe0:	6878      	ldr	r0, [r7, #4]
   2bfe2:	f7ff ffe8 	bl	2bfb6 <sys_dlist_is_empty>
   2bfe6:	4603      	mov	r3, r0
   2bfe8:	2b00      	cmp	r3, #0
   2bfea:	d102      	bne.n	2bff2 <sys_dlist_peek_head+0x1a>
   2bfec:	687b      	ldr	r3, [r7, #4]
   2bfee:	681b      	ldr	r3, [r3, #0]
   2bff0:	e000      	b.n	2bff4 <sys_dlist_peek_head+0x1c>
   2bff2:	2300      	movs	r3, #0
}
   2bff4:	4618      	mov	r0, r3
   2bff6:	3708      	adds	r7, #8
   2bff8:	46bd      	mov	sp, r7
   2bffa:	bd80      	pop	{r7, pc}

0002bffc <sys_dlist_peek_next_no_check>:
{
   2bffc:	b480      	push	{r7}
   2bffe:	b083      	sub	sp, #12
   2c000:	af00      	add	r7, sp, #0
   2c002:	6078      	str	r0, [r7, #4]
   2c004:	6039      	str	r1, [r7, #0]
	return (node == list->tail) ? NULL : node->next;
   2c006:	687b      	ldr	r3, [r7, #4]
   2c008:	685b      	ldr	r3, [r3, #4]
   2c00a:	683a      	ldr	r2, [r7, #0]
   2c00c:	429a      	cmp	r2, r3
   2c00e:	d002      	beq.n	2c016 <sys_dlist_peek_next_no_check+0x1a>
   2c010:	683b      	ldr	r3, [r7, #0]
   2c012:	681b      	ldr	r3, [r3, #0]
   2c014:	e000      	b.n	2c018 <sys_dlist_peek_next_no_check+0x1c>
   2c016:	2300      	movs	r3, #0
}
   2c018:	4618      	mov	r0, r3
   2c01a:	370c      	adds	r7, #12
   2c01c:	46bd      	mov	sp, r7
   2c01e:	bc80      	pop	{r7}
   2c020:	4770      	bx	lr

0002c022 <sys_dlist_peek_next>:
{
   2c022:	b580      	push	{r7, lr}
   2c024:	b082      	sub	sp, #8
   2c026:	af00      	add	r7, sp, #0
   2c028:	6078      	str	r0, [r7, #4]
   2c02a:	6039      	str	r1, [r7, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2c02c:	683b      	ldr	r3, [r7, #0]
   2c02e:	2b00      	cmp	r3, #0
   2c030:	d005      	beq.n	2c03e <sys_dlist_peek_next+0x1c>
   2c032:	6839      	ldr	r1, [r7, #0]
   2c034:	6878      	ldr	r0, [r7, #4]
   2c036:	f7ff ffe1 	bl	2bffc <sys_dlist_peek_next_no_check>
   2c03a:	4603      	mov	r3, r0
   2c03c:	e000      	b.n	2c040 <sys_dlist_peek_next+0x1e>
   2c03e:	2300      	movs	r3, #0
}
   2c040:	4618      	mov	r0, r3
   2c042:	3708      	adds	r7, #8
   2c044:	46bd      	mov	sp, r7
   2c046:	bd80      	pop	{r7, pc}

0002c048 <sys_dlist_peek_tail>:
{
   2c048:	b580      	push	{r7, lr}
   2c04a:	b082      	sub	sp, #8
   2c04c:	af00      	add	r7, sp, #0
   2c04e:	6078      	str	r0, [r7, #4]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2c050:	6878      	ldr	r0, [r7, #4]
   2c052:	f7ff ffb0 	bl	2bfb6 <sys_dlist_is_empty>
   2c056:	4603      	mov	r3, r0
   2c058:	2b00      	cmp	r3, #0
   2c05a:	d102      	bne.n	2c062 <sys_dlist_peek_tail+0x1a>
   2c05c:	687b      	ldr	r3, [r7, #4]
   2c05e:	685b      	ldr	r3, [r3, #4]
   2c060:	e000      	b.n	2c064 <sys_dlist_peek_tail+0x1c>
   2c062:	2300      	movs	r3, #0
}
   2c064:	4618      	mov	r0, r3
   2c066:	3708      	adds	r7, #8
   2c068:	46bd      	mov	sp, r7
   2c06a:	bd80      	pop	{r7, pc}

0002c06c <sys_dlist_append>:
{
   2c06c:	b480      	push	{r7}
   2c06e:	b083      	sub	sp, #12
   2c070:	af00      	add	r7, sp, #0
   2c072:	6078      	str	r0, [r7, #4]
   2c074:	6039      	str	r1, [r7, #0]
	node->next = list;
   2c076:	683b      	ldr	r3, [r7, #0]
   2c078:	687a      	ldr	r2, [r7, #4]
   2c07a:	601a      	str	r2, [r3, #0]
	node->prev = list->tail;
   2c07c:	687b      	ldr	r3, [r7, #4]
   2c07e:	685a      	ldr	r2, [r3, #4]
   2c080:	683b      	ldr	r3, [r7, #0]
   2c082:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   2c084:	687b      	ldr	r3, [r7, #4]
   2c086:	685b      	ldr	r3, [r3, #4]
   2c088:	683a      	ldr	r2, [r7, #0]
   2c08a:	601a      	str	r2, [r3, #0]
	list->tail = node;
   2c08c:	687b      	ldr	r3, [r7, #4]
   2c08e:	683a      	ldr	r2, [r7, #0]
   2c090:	605a      	str	r2, [r3, #4]
}
   2c092:	bf00      	nop
   2c094:	370c      	adds	r7, #12
   2c096:	46bd      	mov	sp, r7
   2c098:	bc80      	pop	{r7}
   2c09a:	4770      	bx	lr

0002c09c <sys_dlist_insert>:
{
   2c09c:	b480      	push	{r7}
   2c09e:	b083      	sub	sp, #12
   2c0a0:	af00      	add	r7, sp, #0
   2c0a2:	6078      	str	r0, [r7, #4]
   2c0a4:	6039      	str	r1, [r7, #0]
	node->prev = successor->prev;
   2c0a6:	687b      	ldr	r3, [r7, #4]
   2c0a8:	685a      	ldr	r2, [r3, #4]
   2c0aa:	683b      	ldr	r3, [r7, #0]
   2c0ac:	605a      	str	r2, [r3, #4]
	node->next = successor;
   2c0ae:	683b      	ldr	r3, [r7, #0]
   2c0b0:	687a      	ldr	r2, [r7, #4]
   2c0b2:	601a      	str	r2, [r3, #0]
	successor->prev->next = node;
   2c0b4:	687b      	ldr	r3, [r7, #4]
   2c0b6:	685b      	ldr	r3, [r3, #4]
   2c0b8:	683a      	ldr	r2, [r7, #0]
   2c0ba:	601a      	str	r2, [r3, #0]
	successor->prev = node;
   2c0bc:	687b      	ldr	r3, [r7, #4]
   2c0be:	683a      	ldr	r2, [r7, #0]
   2c0c0:	605a      	str	r2, [r3, #4]
}
   2c0c2:	bf00      	nop
   2c0c4:	370c      	adds	r7, #12
   2c0c6:	46bd      	mov	sp, r7
   2c0c8:	bc80      	pop	{r7}
   2c0ca:	4770      	bx	lr

0002c0cc <sys_dlist_remove>:
{
   2c0cc:	b580      	push	{r7, lr}
   2c0ce:	b082      	sub	sp, #8
   2c0d0:	af00      	add	r7, sp, #0
   2c0d2:	6078      	str	r0, [r7, #4]
	node->prev->next = node->next;
   2c0d4:	687b      	ldr	r3, [r7, #4]
   2c0d6:	685b      	ldr	r3, [r3, #4]
   2c0d8:	687a      	ldr	r2, [r7, #4]
   2c0da:	6812      	ldr	r2, [r2, #0]
   2c0dc:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2c0de:	687b      	ldr	r3, [r7, #4]
   2c0e0:	681b      	ldr	r3, [r3, #0]
   2c0e2:	687a      	ldr	r2, [r7, #4]
   2c0e4:	6852      	ldr	r2, [r2, #4]
   2c0e6:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
   2c0e8:	6878      	ldr	r0, [r7, #4]
   2c0ea:	f7ff ff45 	bl	2bf78 <sys_dnode_init>
}
   2c0ee:	bf00      	nop
   2c0f0:	3708      	adds	r7, #8
   2c0f2:	46bd      	mov	sp, r7
   2c0f4:	bd80      	pop	{r7, pc}

0002c0f6 <sys_dlist_get>:
{
   2c0f6:	b580      	push	{r7, lr}
   2c0f8:	b084      	sub	sp, #16
   2c0fa:	af00      	add	r7, sp, #0
   2c0fc:	6078      	str	r0, [r7, #4]
	sys_dnode_t *node = NULL;
   2c0fe:	2300      	movs	r3, #0
   2c100:	60fb      	str	r3, [r7, #12]
	if (!sys_dlist_is_empty(list)) {
   2c102:	6878      	ldr	r0, [r7, #4]
   2c104:	f7ff ff57 	bl	2bfb6 <sys_dlist_is_empty>
   2c108:	4603      	mov	r3, r0
   2c10a:	f083 0301 	eor.w	r3, r3, #1
   2c10e:	b2db      	uxtb	r3, r3
   2c110:	2b00      	cmp	r3, #0
   2c112:	d005      	beq.n	2c120 <sys_dlist_get+0x2a>
		node = list->head;
   2c114:	687b      	ldr	r3, [r7, #4]
   2c116:	681b      	ldr	r3, [r3, #0]
   2c118:	60fb      	str	r3, [r7, #12]
		sys_dlist_remove(node);
   2c11a:	68f8      	ldr	r0, [r7, #12]
   2c11c:	f7ff ffd6 	bl	2c0cc <sys_dlist_remove>
	return node;
   2c120:	68fb      	ldr	r3, [r7, #12]
}
   2c122:	4618      	mov	r0, r3
   2c124:	3710      	adds	r7, #16
   2c126:	46bd      	mov	sp, r7
   2c128:	bd80      	pop	{r7, pc}

0002c12a <sys_sflist_peek_head>:
{
   2c12a:	b480      	push	{r7}
   2c12c:	b083      	sub	sp, #12
   2c12e:	af00      	add	r7, sp, #0
   2c130:	6078      	str	r0, [r7, #4]
	return list->head;
   2c132:	687b      	ldr	r3, [r7, #4]
   2c134:	681b      	ldr	r3, [r3, #0]
}
   2c136:	4618      	mov	r0, r3
   2c138:	370c      	adds	r7, #12
   2c13a:	46bd      	mov	sp, r7
   2c13c:	bc80      	pop	{r7}
   2c13e:	4770      	bx	lr

0002c140 <sys_sflist_is_empty>:
Z_GENLIST_IS_EMPTY(sflist)
   2c140:	b580      	push	{r7, lr}
   2c142:	b082      	sub	sp, #8
   2c144:	af00      	add	r7, sp, #0
   2c146:	6078      	str	r0, [r7, #4]
   2c148:	6878      	ldr	r0, [r7, #4]
   2c14a:	f7ff ffee 	bl	2c12a <sys_sflist_peek_head>
   2c14e:	4603      	mov	r3, r0
   2c150:	2b00      	cmp	r3, #0
   2c152:	bf0c      	ite	eq
   2c154:	2301      	moveq	r3, #1
   2c156:	2300      	movne	r3, #0
   2c158:	b2db      	uxtb	r3, r3
   2c15a:	4618      	mov	r0, r3
   2c15c:	3708      	adds	r7, #8
   2c15e:	46bd      	mov	sp, r7
   2c160:	bd80      	pop	{r7, pc}

0002c162 <z_impl_k_queue_is_empty>:
{
   2c162:	b580      	push	{r7, lr}
   2c164:	b082      	sub	sp, #8
   2c166:	af00      	add	r7, sp, #0
   2c168:	6078      	str	r0, [r7, #4]
	return (int)sys_sflist_is_empty(&queue->data_q);
   2c16a:	687b      	ldr	r3, [r7, #4]
   2c16c:	4618      	mov	r0, r3
   2c16e:	f7ff ffe7 	bl	2c140 <sys_sflist_is_empty>
   2c172:	4603      	mov	r3, r0
}
   2c174:	4618      	mov	r0, r3
   2c176:	3708      	adds	r7, #8
   2c178:	46bd      	mov	sp, r7
   2c17a:	bd80      	pop	{r7, pc}

0002c17c <z_impl_k_sem_count_get>:
{
   2c17c:	b480      	push	{r7}
   2c17e:	b083      	sub	sp, #12
   2c180:	af00      	add	r7, sp, #0
   2c182:	6078      	str	r0, [r7, #4]
	return sem->count;
   2c184:	687b      	ldr	r3, [r7, #4]
   2c186:	689b      	ldr	r3, [r3, #8]
}
   2c188:	4618      	mov	r0, r3
   2c18a:	370c      	adds	r7, #12
   2c18c:	46bd      	mov	sp, r7
   2c18e:	bc80      	pop	{r7}
   2c190:	4770      	bx	lr

0002c192 <k_queue_is_empty>:
K_SYSCALL_DECLARE1(K_SYSCALL_K_QUEUE_IS_EMPTY, k_queue_is_empty, int, struct k_queue *, queue)
   2c192:	b580      	push	{r7, lr}
   2c194:	b082      	sub	sp, #8
   2c196:	af00      	add	r7, sp, #0
   2c198:	6078      	str	r0, [r7, #4]
   2c19a:	6878      	ldr	r0, [r7, #4]
   2c19c:	f7ff ffe1 	bl	2c162 <z_impl_k_queue_is_empty>
   2c1a0:	4603      	mov	r3, r0
   2c1a2:	4618      	mov	r0, r3
   2c1a4:	3708      	adds	r7, #8
   2c1a6:	46bd      	mov	sp, r7
   2c1a8:	bd80      	pop	{r7, pc}

0002c1aa <k_sem_count_get>:
K_SYSCALL_DECLARE1(K_SYSCALL_K_SEM_COUNT_GET, k_sem_count_get, unsigned int, struct k_sem *, sem)
   2c1aa:	b580      	push	{r7, lr}
   2c1ac:	b082      	sub	sp, #8
   2c1ae:	af00      	add	r7, sp, #0
   2c1b0:	6078      	str	r0, [r7, #4]
   2c1b2:	6878      	ldr	r0, [r7, #4]
   2c1b4:	f7ff ffe2 	bl	2c17c <z_impl_k_sem_count_get>
   2c1b8:	4603      	mov	r3, r0
   2c1ba:	4618      	mov	r0, r3
   2c1bc:	3708      	adds	r7, #8
   2c1be:	46bd      	mov	sp, r7
   2c1c0:	bd80      	pop	{r7, pc}

0002c1c2 <z_is_inactive_timeout>:
{
   2c1c2:	b580      	push	{r7, lr}
   2c1c4:	b082      	sub	sp, #8
   2c1c6:	af00      	add	r7, sp, #0
   2c1c8:	6078      	str	r0, [r7, #4]
	return !sys_dnode_is_linked(&t->node);
   2c1ca:	687b      	ldr	r3, [r7, #4]
   2c1cc:	4618      	mov	r0, r3
   2c1ce:	f7ff fee2 	bl	2bf96 <sys_dnode_is_linked>
   2c1d2:	4603      	mov	r3, r0
   2c1d4:	2b00      	cmp	r3, #0
   2c1d6:	bf14      	ite	ne
   2c1d8:	2301      	movne	r3, #1
   2c1da:	2300      	moveq	r3, #0
   2c1dc:	b2db      	uxtb	r3, r3
   2c1de:	f083 0301 	eor.w	r3, r3, #1
   2c1e2:	b2db      	uxtb	r3, r3
   2c1e4:	f003 0301 	and.w	r3, r3, #1
   2c1e8:	b2db      	uxtb	r3, r3
}
   2c1ea:	4618      	mov	r0, r3
   2c1ec:	3708      	adds	r7, #8
   2c1ee:	46bd      	mov	sp, r7
   2c1f0:	bd80      	pop	{r7, pc}

0002c1f2 <z_is_thread_pending>:
{
   2c1f2:	b480      	push	{r7}
   2c1f4:	b083      	sub	sp, #12
   2c1f6:	af00      	add	r7, sp, #0
   2c1f8:	6078      	str	r0, [r7, #4]
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   2c1fa:	687b      	ldr	r3, [r7, #4]
   2c1fc:	7b5b      	ldrb	r3, [r3, #13]
   2c1fe:	f003 0302 	and.w	r3, r3, #2
   2c202:	2b00      	cmp	r3, #0
   2c204:	bf14      	ite	ne
   2c206:	2301      	movne	r3, #1
   2c208:	2300      	moveq	r3, #0
   2c20a:	b2db      	uxtb	r3, r3
}
   2c20c:	4618      	mov	r0, r3
   2c20e:	370c      	adds	r7, #12
   2c210:	46bd      	mov	sp, r7
   2c212:	bc80      	pop	{r7}
   2c214:	4770      	bx	lr

0002c216 <z_is_thread_prevented_from_running>:
{
   2c216:	b480      	push	{r7}
   2c218:	b085      	sub	sp, #20
   2c21a:	af00      	add	r7, sp, #0
   2c21c:	6078      	str	r0, [r7, #4]
	u8_t state = thread->base.thread_state;
   2c21e:	687b      	ldr	r3, [r7, #4]
   2c220:	7b5b      	ldrb	r3, [r3, #13]
   2c222:	73fb      	strb	r3, [r7, #15]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   2c224:	7bfb      	ldrb	r3, [r7, #15]
   2c226:	f003 031f 	and.w	r3, r3, #31
			 _THREAD_DUMMY | _THREAD_SUSPENDED)) != 0U;
   2c22a:	2b00      	cmp	r3, #0
   2c22c:	bf14      	ite	ne
   2c22e:	2301      	movne	r3, #1
   2c230:	2300      	moveq	r3, #0
   2c232:	b2db      	uxtb	r3, r3
}
   2c234:	4618      	mov	r0, r3
   2c236:	3714      	adds	r7, #20
   2c238:	46bd      	mov	sp, r7
   2c23a:	bc80      	pop	{r7}
   2c23c:	4770      	bx	lr

0002c23e <z_is_thread_timeout_active>:
{
   2c23e:	b580      	push	{r7, lr}
   2c240:	b082      	sub	sp, #8
   2c242:	af00      	add	r7, sp, #0
   2c244:	6078      	str	r0, [r7, #4]
	return !z_is_inactive_timeout(&thread->base.timeout);
   2c246:	687b      	ldr	r3, [r7, #4]
   2c248:	3318      	adds	r3, #24
   2c24a:	4618      	mov	r0, r3
   2c24c:	f7ff ffb9 	bl	2c1c2 <z_is_inactive_timeout>
   2c250:	4603      	mov	r3, r0
   2c252:	2b00      	cmp	r3, #0
   2c254:	bf14      	ite	ne
   2c256:	2301      	movne	r3, #1
   2c258:	2300      	moveq	r3, #0
   2c25a:	b2db      	uxtb	r3, r3
   2c25c:	f083 0301 	eor.w	r3, r3, #1
   2c260:	b2db      	uxtb	r3, r3
   2c262:	f003 0301 	and.w	r3, r3, #1
   2c266:	b2db      	uxtb	r3, r3
}
   2c268:	4618      	mov	r0, r3
   2c26a:	3708      	adds	r7, #8
   2c26c:	46bd      	mov	sp, r7
   2c26e:	bd80      	pop	{r7, pc}

0002c270 <z_is_thread_ready>:
{
   2c270:	b580      	push	{r7, lr}
   2c272:	b082      	sub	sp, #8
   2c274:	af00      	add	r7, sp, #0
   2c276:	6078      	str	r0, [r7, #4]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2c278:	6878      	ldr	r0, [r7, #4]
   2c27a:	f7ff ffcc 	bl	2c216 <z_is_thread_prevented_from_running>
   2c27e:	4603      	mov	r3, r0
   2c280:	f083 0301 	eor.w	r3, r3, #1
   2c284:	b2db      	uxtb	r3, r3
   2c286:	2b00      	cmp	r3, #0
   2c288:	d00a      	beq.n	2c2a0 <z_is_thread_ready+0x30>
		 z_is_thread_timeout_active(thread));
   2c28a:	6878      	ldr	r0, [r7, #4]
   2c28c:	f7ff ffd7 	bl	2c23e <z_is_thread_timeout_active>
   2c290:	4603      	mov	r3, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2c292:	f083 0301 	eor.w	r3, r3, #1
   2c296:	b2db      	uxtb	r3, r3
   2c298:	2b00      	cmp	r3, #0
   2c29a:	d001      	beq.n	2c2a0 <z_is_thread_ready+0x30>
   2c29c:	2301      	movs	r3, #1
   2c29e:	e000      	b.n	2c2a2 <z_is_thread_ready+0x32>
   2c2a0:	2300      	movs	r3, #0
   2c2a2:	f003 0301 	and.w	r3, r3, #1
   2c2a6:	b2db      	uxtb	r3, r3
}
   2c2a8:	4618      	mov	r0, r3
   2c2aa:	3708      	adds	r7, #8
   2c2ac:	46bd      	mov	sp, r7
   2c2ae:	bd80      	pop	{r7, pc}

0002c2b0 <k_poll_event_init>:
{
   2c2b0:	b480      	push	{r7}
   2c2b2:	b085      	sub	sp, #20
   2c2b4:	af00      	add	r7, sp, #0
   2c2b6:	60f8      	str	r0, [r7, #12]
   2c2b8:	60b9      	str	r1, [r7, #8]
   2c2ba:	607a      	str	r2, [r7, #4]
   2c2bc:	603b      	str	r3, [r7, #0]
	event->poller = NULL;
   2c2be:	68fb      	ldr	r3, [r7, #12]
   2c2c0:	2200      	movs	r2, #0
   2c2c2:	609a      	str	r2, [r3, #8]
	event->type = type;
   2c2c4:	68bb      	ldr	r3, [r7, #8]
   2c2c6:	f003 030f 	and.w	r3, r3, #15
   2c2ca:	b2d9      	uxtb	r1, r3
   2c2cc:	68fa      	ldr	r2, [r7, #12]
   2c2ce:	7b53      	ldrb	r3, [r2, #13]
   2c2d0:	f361 0303 	bfi	r3, r1, #0, #4
   2c2d4:	7353      	strb	r3, [r2, #13]
	event->state = K_POLL_STATE_NOT_READY;
   2c2d6:	68fa      	ldr	r2, [r7, #12]
   2c2d8:	68d3      	ldr	r3, [r2, #12]
   2c2da:	f36f 3310 	bfc	r3, #12, #5
   2c2de:	60d3      	str	r3, [r2, #12]
	event->mode = mode;
   2c2e0:	687b      	ldr	r3, [r7, #4]
   2c2e2:	f003 0301 	and.w	r3, r3, #1
   2c2e6:	b2d9      	uxtb	r1, r3
   2c2e8:	68fa      	ldr	r2, [r7, #12]
   2c2ea:	7b93      	ldrb	r3, [r2, #14]
   2c2ec:	f361 0341 	bfi	r3, r1, #1, #1
   2c2f0:	7393      	strb	r3, [r2, #14]
	event->unused = 0U;
   2c2f2:	68fa      	ldr	r2, [r7, #12]
   2c2f4:	89d3      	ldrh	r3, [r2, #14]
   2c2f6:	f36f 038f 	bfc	r3, #2, #14
   2c2fa:	81d3      	strh	r3, [r2, #14]
	event->obj = obj;
   2c2fc:	68fb      	ldr	r3, [r7, #12]
   2c2fe:	683a      	ldr	r2, [r7, #0]
   2c300:	611a      	str	r2, [r3, #16]
}
   2c302:	bf00      	nop
   2c304:	3714      	adds	r7, #20
   2c306:	46bd      	mov	sp, r7
   2c308:	bc80      	pop	{r7}
   2c30a:	4770      	bx	lr

0002c30c <add_event>:
{
   2c30c:	b580      	push	{r7, lr}
   2c30e:	b086      	sub	sp, #24
   2c310:	af00      	add	r7, sp, #0
   2c312:	60f8      	str	r0, [r7, #12]
   2c314:	60b9      	str	r1, [r7, #8]
   2c316:	607a      	str	r2, [r7, #4]
	pending = (struct k_poll_event *)sys_dlist_peek_tail(events);
   2c318:	68f8      	ldr	r0, [r7, #12]
   2c31a:	f7ff fe95 	bl	2c048 <sys_dlist_peek_tail>
   2c31e:	6178      	str	r0, [r7, #20]
	if ((pending == NULL) ||
   2c320:	697b      	ldr	r3, [r7, #20]
   2c322:	2b00      	cmp	r3, #0
   2c324:	d00b      	beq.n	2c33e <add_event+0x32>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   2c326:	697b      	ldr	r3, [r7, #20]
   2c328:	689b      	ldr	r3, [r3, #8]
   2c32a:	681a      	ldr	r2, [r3, #0]
   2c32c:	687b      	ldr	r3, [r7, #4]
   2c32e:	681b      	ldr	r3, [r3, #0]
   2c330:	4619      	mov	r1, r3
   2c332:	4610      	mov	r0, r2
   2c334:	f7fe fdb5 	bl	2aea2 <z_is_t1_higher_prio_than_t2>
   2c338:	4603      	mov	r3, r0
	if ((pending == NULL) ||
   2c33a:	2b00      	cmp	r3, #0
   2c33c:	d005      	beq.n	2c34a <add_event+0x3e>
		sys_dlist_append(events, &event->_node);
   2c33e:	68bb      	ldr	r3, [r7, #8]
   2c340:	4619      	mov	r1, r3
   2c342:	68f8      	ldr	r0, [r7, #12]
   2c344:	f7ff fe92 	bl	2c06c <sys_dlist_append>
		return;
   2c348:	e03e      	b.n	2c3c8 <add_event+0xbc>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2c34a:	68f8      	ldr	r0, [r7, #12]
   2c34c:	f7ff fe44 	bl	2bfd8 <sys_dlist_peek_head>
   2c350:	4603      	mov	r3, r0
   2c352:	2b00      	cmp	r3, #0
   2c354:	d004      	beq.n	2c360 <add_event+0x54>
   2c356:	68f8      	ldr	r0, [r7, #12]
   2c358:	f7ff fe3e 	bl	2bfd8 <sys_dlist_peek_head>
   2c35c:	4603      	mov	r3, r0
   2c35e:	e000      	b.n	2c362 <add_event+0x56>
   2c360:	2300      	movs	r3, #0
   2c362:	617b      	str	r3, [r7, #20]
   2c364:	e028      	b.n	2c3b8 <add_event+0xac>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   2c366:	687b      	ldr	r3, [r7, #4]
   2c368:	681a      	ldr	r2, [r3, #0]
						pending->poller->thread)) {
   2c36a:	697b      	ldr	r3, [r7, #20]
   2c36c:	689b      	ldr	r3, [r3, #8]
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   2c36e:	681b      	ldr	r3, [r3, #0]
   2c370:	4619      	mov	r1, r3
   2c372:	4610      	mov	r0, r2
   2c374:	f7fe fd95 	bl	2aea2 <z_is_t1_higher_prio_than_t2>
   2c378:	4603      	mov	r3, r0
   2c37a:	2b00      	cmp	r3, #0
   2c37c:	d006      	beq.n	2c38c <add_event+0x80>
			sys_dlist_insert(&pending->_node, &event->_node);
   2c37e:	697b      	ldr	r3, [r7, #20]
   2c380:	68ba      	ldr	r2, [r7, #8]
   2c382:	4611      	mov	r1, r2
   2c384:	4618      	mov	r0, r3
   2c386:	f7ff fe89 	bl	2c09c <sys_dlist_insert>
			return;
   2c38a:	e01d      	b.n	2c3c8 <add_event+0xbc>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2c38c:	697b      	ldr	r3, [r7, #20]
   2c38e:	2b00      	cmp	r3, #0
   2c390:	d010      	beq.n	2c3b4 <add_event+0xa8>
   2c392:	697b      	ldr	r3, [r7, #20]
   2c394:	4619      	mov	r1, r3
   2c396:	68f8      	ldr	r0, [r7, #12]
   2c398:	f7ff fe43 	bl	2c022 <sys_dlist_peek_next>
   2c39c:	4603      	mov	r3, r0
   2c39e:	2b00      	cmp	r3, #0
   2c3a0:	d006      	beq.n	2c3b0 <add_event+0xa4>
   2c3a2:	697b      	ldr	r3, [r7, #20]
   2c3a4:	4619      	mov	r1, r3
   2c3a6:	68f8      	ldr	r0, [r7, #12]
   2c3a8:	f7ff fe3b 	bl	2c022 <sys_dlist_peek_next>
   2c3ac:	4603      	mov	r3, r0
   2c3ae:	e002      	b.n	2c3b6 <add_event+0xaa>
   2c3b0:	2300      	movs	r3, #0
   2c3b2:	e000      	b.n	2c3b6 <add_event+0xaa>
   2c3b4:	2300      	movs	r3, #0
   2c3b6:	617b      	str	r3, [r7, #20]
   2c3b8:	697b      	ldr	r3, [r7, #20]
   2c3ba:	2b00      	cmp	r3, #0
   2c3bc:	d1d3      	bne.n	2c366 <add_event+0x5a>
	sys_dlist_append(events, &event->_node);
   2c3be:	68bb      	ldr	r3, [r7, #8]
   2c3c0:	4619      	mov	r1, r3
   2c3c2:	68f8      	ldr	r0, [r7, #12]
   2c3c4:	f7ff fe52 	bl	2c06c <sys_dlist_append>
}
   2c3c8:	3718      	adds	r7, #24
   2c3ca:	46bd      	mov	sp, r7
   2c3cc:	bd80      	pop	{r7, pc}

0002c3ce <set_event_ready>:
{
   2c3ce:	b480      	push	{r7}
   2c3d0:	b083      	sub	sp, #12
   2c3d2:	af00      	add	r7, sp, #0
   2c3d4:	6078      	str	r0, [r7, #4]
   2c3d6:	6039      	str	r1, [r7, #0]
	event->poller = NULL;
   2c3d8:	687b      	ldr	r3, [r7, #4]
   2c3da:	2200      	movs	r2, #0
   2c3dc:	609a      	str	r2, [r3, #8]
	event->state |= state;
   2c3de:	687b      	ldr	r3, [r7, #4]
   2c3e0:	68db      	ldr	r3, [r3, #12]
   2c3e2:	f3c3 3304 	ubfx	r3, r3, #12, #5
   2c3e6:	b2db      	uxtb	r3, r3
   2c3e8:	461a      	mov	r2, r3
   2c3ea:	683b      	ldr	r3, [r7, #0]
   2c3ec:	b2db      	uxtb	r3, r3
   2c3ee:	4313      	orrs	r3, r2
   2c3f0:	b2db      	uxtb	r3, r3
   2c3f2:	f003 031f 	and.w	r3, r3, #31
   2c3f6:	b2d9      	uxtb	r1, r3
   2c3f8:	687a      	ldr	r2, [r7, #4]
   2c3fa:	68d3      	ldr	r3, [r2, #12]
   2c3fc:	f361 3310 	bfi	r3, r1, #12, #5
   2c400:	60d3      	str	r3, [r2, #12]
}
   2c402:	bf00      	nop
   2c404:	370c      	adds	r7, #12
   2c406:	46bd      	mov	sp, r7
   2c408:	bc80      	pop	{r7}
   2c40a:	4770      	bx	lr

0002c40c <signal_poll_event>:
}
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   2c40c:	b580      	push	{r7, lr}
   2c40e:	b088      	sub	sp, #32
   2c410:	af00      	add	r7, sp, #0
   2c412:	6078      	str	r0, [r7, #4]
   2c414:	6039      	str	r1, [r7, #0]
	if (!event->poller) {
   2c416:	687b      	ldr	r3, [r7, #4]
   2c418:	689b      	ldr	r3, [r3, #8]
   2c41a:	2b00      	cmp	r3, #0
   2c41c:	d044      	beq.n	2c4a8 <signal_poll_event+0x9c>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
   2c41e:	687b      	ldr	r3, [r7, #4]
   2c420:	689b      	ldr	r3, [r3, #8]
   2c422:	681b      	ldr	r3, [r3, #0]
   2c424:	61fb      	str	r3, [r7, #28]

	__ASSERT(event->poller->thread != NULL,
		 "poller should have a thread\n");

	event->poller->is_polling = false;
   2c426:	687b      	ldr	r3, [r7, #4]
   2c428:	689b      	ldr	r3, [r3, #8]
   2c42a:	2200      	movs	r2, #0
   2c42c:	711a      	strb	r2, [r3, #4]

	if (!z_is_thread_pending(thread)) {
   2c42e:	69f8      	ldr	r0, [r7, #28]
   2c430:	f7ff fedf 	bl	2c1f2 <z_is_thread_pending>
   2c434:	4603      	mov	r3, r0
   2c436:	f083 0301 	eor.w	r3, r3, #1
   2c43a:	b2db      	uxtb	r3, r3
   2c43c:	2b00      	cmp	r3, #0
   2c43e:	d135      	bne.n	2c4ac <signal_poll_event+0xa0>
   2c440:	69fb      	ldr	r3, [r7, #28]
   2c442:	61bb      	str	r3, [r7, #24]
	return thread->base.timeout.dticks == _EXPIRED;
   2c444:	69bb      	ldr	r3, [r7, #24]
   2c446:	6a1b      	ldr	r3, [r3, #32]
   2c448:	f113 0f02 	cmn.w	r3, #2
   2c44c:	bf0c      	ite	eq
   2c44e:	2301      	moveq	r3, #1
   2c450:	2300      	movne	r3, #0
   2c452:	b2db      	uxtb	r3, r3
		goto ready_event;
	}

	if (z_is_thread_timeout_expired(thread)) {
   2c454:	2b00      	cmp	r3, #0
   2c456:	d002      	beq.n	2c45e <signal_poll_event+0x52>
		return -EAGAIN;
   2c458:	f06f 030a 	mvn.w	r3, #10
   2c45c:	e02e      	b.n	2c4bc <signal_poll_event+0xb0>
	}

	z_unpend_thread(thread);
   2c45e:	69f8      	ldr	r0, [r7, #28]
   2c460:	f7eb f888 	bl	17574 <z_unpend_thread>
	z_set_thread_return_value(thread,
   2c464:	683b      	ldr	r3, [r7, #0]
   2c466:	2b08      	cmp	r3, #8
   2c468:	d102      	bne.n	2c470 <signal_poll_event+0x64>
   2c46a:	f06f 0303 	mvn.w	r3, #3
   2c46e:	e000      	b.n	2c472 <signal_poll_event+0x66>
   2c470:	2300      	movs	r3, #0
   2c472:	69fa      	ldr	r2, [r7, #28]
   2c474:	617a      	str	r2, [r7, #20]
   2c476:	613b      	str	r3, [r7, #16]
   2c478:	697b      	ldr	r3, [r7, #20]
   2c47a:	693a      	ldr	r2, [r7, #16]
   2c47c:	669a      	str	r2, [r3, #104]	; 0x68
				 state == K_POLL_STATE_CANCELLED ? -EINTR : 0);

	if (!z_is_thread_ready(thread)) {
   2c47e:	69f8      	ldr	r0, [r7, #28]
   2c480:	f7ff fef6 	bl	2c270 <z_is_thread_ready>
   2c484:	4603      	mov	r3, r0
   2c486:	f083 0301 	eor.w	r3, r3, #1
   2c48a:	b2db      	uxtb	r3, r3
   2c48c:	2b00      	cmp	r3, #0
   2c48e:	d10f      	bne.n	2c4b0 <signal_poll_event+0xa4>
   2c490:	69fb      	ldr	r3, [r7, #28]
   2c492:	60fb      	str	r3, [r7, #12]
	if (z_is_thread_ready(thread)) {
   2c494:	68f8      	ldr	r0, [r7, #12]
   2c496:	f7ff feeb 	bl	2c270 <z_is_thread_ready>
   2c49a:	4603      	mov	r3, r0
   2c49c:	2b00      	cmp	r3, #0
   2c49e:	d008      	beq.n	2c4b2 <signal_poll_event+0xa6>
		z_add_thread_to_ready_q(thread);
   2c4a0:	68f8      	ldr	r0, [r7, #12]
   2c4a2:	f7ea fe23 	bl	170ec <z_add_thread_to_ready_q>
   2c4a6:	e004      	b.n	2c4b2 <signal_poll_event+0xa6>
		goto ready_event;
   2c4a8:	bf00      	nop
   2c4aa:	e002      	b.n	2c4b2 <signal_poll_event+0xa6>
		goto ready_event;
   2c4ac:	bf00      	nop
   2c4ae:	e000      	b.n	2c4b2 <signal_poll_event+0xa6>
		goto ready_event;
   2c4b0:	bf00      	nop
	}

	z_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
   2c4b2:	6839      	ldr	r1, [r7, #0]
   2c4b4:	6878      	ldr	r0, [r7, #4]
   2c4b6:	f7ff ff8a 	bl	2c3ce <set_event_ready>
	return 0;
   2c4ba:	2300      	movs	r3, #0
}
   2c4bc:	4618      	mov	r0, r3
   2c4be:	3720      	adds	r7, #32
   2c4c0:	46bd      	mov	sp, r7
   2c4c2:	bd80      	pop	{r7, pc}

0002c4c4 <z_handle_obj_poll_events>:

void z_handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
   2c4c4:	b580      	push	{r7, lr}
   2c4c6:	b084      	sub	sp, #16
   2c4c8:	af00      	add	r7, sp, #0
   2c4ca:	6078      	str	r0, [r7, #4]
   2c4cc:	6039      	str	r1, [r7, #0]
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
   2c4ce:	6878      	ldr	r0, [r7, #4]
   2c4d0:	f7ff fe11 	bl	2c0f6 <sys_dlist_get>
   2c4d4:	60f8      	str	r0, [r7, #12]
	if (poll_event != NULL) {
   2c4d6:	68fb      	ldr	r3, [r7, #12]
   2c4d8:	2b00      	cmp	r3, #0
   2c4da:	d003      	beq.n	2c4e4 <z_handle_obj_poll_events+0x20>
		(void) signal_poll_event(poll_event, state);
   2c4dc:	6839      	ldr	r1, [r7, #0]
   2c4de:	68f8      	ldr	r0, [r7, #12]
   2c4e0:	f7ff ff94 	bl	2c40c <signal_poll_event>
	}
}
   2c4e4:	bf00      	nop
   2c4e6:	3710      	adds	r7, #16
   2c4e8:	46bd      	mov	sp, r7
   2c4ea:	bd80      	pop	{r7, pc}

0002c4ec <_OffsetAbsSyms>:
/*
 * The final link step uses the symbol _OffsetAbsSyms to force the linkage of
 * offsets.o into the ELF image.
 */

GEN_ABS_SYM_BEGIN(_OffsetAbsSyms)
   2c4ec:	b480      	push	{r7}
   2c4ee:	af00      	add	r7, sp, #0
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   2c4f0:	bf00      	nop
   2c4f2:	46bd      	mov	sp, r7
   2c4f4:	bc80      	pop	{r7}
   2c4f6:	4770      	bx	lr
