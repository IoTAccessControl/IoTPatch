
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	forced_pm_state = state;
}

enum power_states _sys_suspend(s32_t ticks)
{
   0:	20007000 	.word	0x20007000
	bool deep_sleep;

	pm_state = (forced_pm_state == SYS_POWER_STATE_AUTO) ?
   4:	0000b3e5 	.word	0x0000b3e5
		   sys_pm_policy_next_state(ticks) : forced_pm_state;
   8:	00014f45 	.word	0x00014f45
   c:	0000b139 	.word	0x0000b139
  10:	0000b139 	.word	0x0000b139

	if (pm_state == SYS_POWER_STATE_ACTIVE) {
  14:	0000b139 	.word	0x0000b139
  18:	0000b139 	.word	0x0000b139
static inline bool z_arch_is_user_context(void)
{
	u32_t value;

	/* check for handler mode */
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
  1c:	0000b139 	.word	0x0000b139
	if (value) {
		return false;
	}

	/* if not handler mode, return mode information */
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
  20:	0000b139 	.word	0x0000b139
		sys_pm_notify_power_state_exit(pm_state);
		_sys_pm_power_state_exit_post_ops(pm_state);
	}

	return pm_state;
}
  24:	0000b139 	.word	0x0000b139
	post_ops_done = 0;
  28:	0000b139 	.word	0x0000b139
  2c:	0000abfd 	.word	0x0000abfd
	sys_pm_notify_power_state_entry(pm_state);
  30:	00011479 	.word	0x00011479
	sys_set_power_state(pm_state);
  34:	0000b139 	.word	0x0000b139
  38:	0000ab91 	.word	0x0000ab91
	if (!post_ops_done) {
  3c:	00014f17 	.word	0x00014f17

00000040 <_irq_vector_table>:
		post_ops_done = 1;
  40:	0000b275 0000b275 0000b275 0000b275     u...u...u...u...
		_sys_pm_power_state_exit_post_ops(pm_state);
  50:	0000b275 0000b275 0000b275 0000b275     u...u...u...u...
	return pm_state;
  60:	0000b275 0000b275 0000b275 0000b275     u...u...u...u...
  70:	0000b275 0000b275 0000b275 0000b275     u...u...u...u...
  80:	0000b275 0000b275 0000b275 0000b275     u...u...u...u...
  90:	0000b275 0000b275 0000b275 0000b275     u...u...u...u...
  a0:	0000b275 0000b275 0000b275 0000b275     u...u...u...u...
  b0:	0000b275 0000b275 0000b275 0000b275     u...u...u...u...
  c0:	0000b275 0000b275 0000b275 0000b275     u...u...u...u...
  d0:	0000b275 0000b275 0000b275 0000b275     u...u...u...u...
  e0:	0000b275 0000b275 0000b275 0000b275     u...u...u...u...
  f0:	0000b275 0000b275 0000b275 0000b275     u...u...u...u...

Disassembly of section _TEXT_SECTION_NAME_2:

00000100 <z_priv_stack_find>:
     100:	4b08      	ldr	r3, [pc, #32]	; (124 <CONFIG_KOBJECT_TEXT_AREA+0x24>)
     102:	f3c0 2207 	ubfx	r2, r0, #8, #8
     106:	5c9a      	ldrb	r2, [r3, r2]
     108:	2a0f      	cmp	r2, #15
     10a:	d805      	bhi.n	118 <z_priv_stack_find+0x18>
     10c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
     110:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
     114:	4290      	cmp	r0, r2
     116:	d002      	beq.n	11e <z_priv_stack_find+0x1e>
     118:	2300      	movs	r3, #0
     11a:	685b      	ldr	r3, [r3, #4]
     11c:	deff      	udf	#255	; 0xff
     11e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
     122:	4770      	bx	lr
     124:	0001c6c8 	.word	0x0001c6c8

00000128 <_priv_stacks_text_area_end>:
	...

00000200 <z_object_find>:
     200:	4b0a      	ldr	r3, [pc, #40]	; (22c <CONFIG_CONSOLE_PUTCHAR_BUFSIZE+0x2c>)
     202:	f3c0 2207 	ubfx	r2, r0, #8, #8
     206:	b2c1      	uxtb	r1, r0
     208:	5c9a      	ldrb	r2, [r3, r2]
     20a:	5c5b      	ldrb	r3, [r3, r1]
     20c:	4413      	add	r3, r2
     20e:	2b6e      	cmp	r3, #110	; 0x6e
     210:	dc09      	bgt.n	226 <z_object_find+0x26>
     212:	220c      	movs	r2, #12
     214:	4906      	ldr	r1, [pc, #24]	; (230 <CONFIG_CONSOLE_PUTCHAR_BUFSIZE+0x30>)
     216:	435a      	muls	r2, r3
     218:	188b      	adds	r3, r1, r2
     21a:	588a      	ldr	r2, [r1, r2]
     21c:	4290      	cmp	r0, r2
     21e:	bf0c      	ite	eq
     220:	4618      	moveq	r0, r3
     222:	2000      	movne	r0, #0
     224:	4770      	bx	lr
     226:	2000      	movs	r0, #0
     228:	4770      	bx	lr
     22a:	bf00      	nop
     22c:	0001c848 	.word	0x0001c848
     230:	20011cdc 	.word	0x20011cdc

00000234 <z_object_gperf_wordlist_foreach>:
     234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     236:	4c07      	ldr	r4, [pc, #28]	; (254 <z_object_gperf_wordlist_foreach+0x20>)
     238:	4606      	mov	r6, r0
     23a:	460f      	mov	r7, r1
     23c:	2500      	movs	r5, #0
     23e:	6823      	ldr	r3, [r4, #0]
     240:	b113      	cbz	r3, 248 <z_object_gperf_wordlist_foreach+0x14>
     242:	4639      	mov	r1, r7
     244:	4620      	mov	r0, r4
     246:	47b0      	blx	r6
     248:	3501      	adds	r5, #1
     24a:	2d6f      	cmp	r5, #111	; 0x6f
     24c:	f104 040c 	add.w	r4, r4, #12
     250:	d1f5      	bne.n	23e <z_object_gperf_wordlist_foreach+0xa>
     252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     254:	20011cdc 	.word	0x20011cdc

00000258 <_kobject_text_area_end>:
	...

00000300 <memchr>:
     300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     304:	2a10      	cmp	r2, #16
     306:	db2b      	blt.n	360 <memchr+0x60>
     308:	f010 0f07 	tst.w	r0, #7
     30c:	d008      	beq.n	320 <memchr+0x20>
     30e:	f810 3b01 	ldrb.w	r3, [r0], #1
     312:	3a01      	subs	r2, #1
     314:	428b      	cmp	r3, r1
     316:	d02d      	beq.n	374 <memchr+0x74>
     318:	f010 0f07 	tst.w	r0, #7
     31c:	b342      	cbz	r2, 370 <memchr+0x70>
     31e:	d1f6      	bne.n	30e <memchr+0xe>
     320:	b4f0      	push	{r4, r5, r6, r7}
     322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     32a:	f022 0407 	bic.w	r4, r2, #7
     32e:	f07f 0700 	mvns.w	r7, #0
     332:	2300      	movs	r3, #0
     334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     338:	3c08      	subs	r4, #8
     33a:	ea85 0501 	eor.w	r5, r5, r1
     33e:	ea86 0601 	eor.w	r6, r6, r1
     342:	fa85 f547 	uadd8	r5, r5, r7
     346:	faa3 f587 	sel	r5, r3, r7
     34a:	fa86 f647 	uadd8	r6, r6, r7
     34e:	faa5 f687 	sel	r6, r5, r7
     352:	b98e      	cbnz	r6, 378 <memchr+0x78>
     354:	d1ee      	bne.n	334 <memchr+0x34>
     356:	bcf0      	pop	{r4, r5, r6, r7}
     358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     35c:	f002 0207 	and.w	r2, r2, #7
     360:	b132      	cbz	r2, 370 <memchr+0x70>
     362:	f810 3b01 	ldrb.w	r3, [r0], #1
     366:	3a01      	subs	r2, #1
     368:	ea83 0301 	eor.w	r3, r3, r1
     36c:	b113      	cbz	r3, 374 <memchr+0x74>
     36e:	d1f8      	bne.n	362 <memchr+0x62>
     370:	2000      	movs	r0, #0
     372:	4770      	bx	lr
     374:	3801      	subs	r0, #1
     376:	4770      	bx	lr
     378:	2d00      	cmp	r5, #0
     37a:	bf06      	itte	eq
     37c:	4635      	moveq	r5, r6
     37e:	3803      	subeq	r0, #3
     380:	3807      	subne	r0, #7
     382:	f015 0f01 	tst.w	r5, #1
     386:	d107      	bne.n	398 <memchr+0x98>
     388:	3001      	adds	r0, #1
     38a:	f415 7f80 	tst.w	r5, #256	; 0x100
     38e:	bf02      	ittt	eq
     390:	3001      	addeq	r0, #1
     392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     396:	3001      	addeq	r0, #1
     398:	bcf0      	pop	{r4, r5, r6, r7}
     39a:	3801      	subs	r0, #1
     39c:	4770      	bx	lr
     39e:	bf00      	nop

000003a0 <__aeabi_frsub>:
     3a0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     3a4:	e002      	b.n	3ac <__addsf3>
     3a6:	bf00      	nop

000003a8 <__aeabi_fsub>:
     3a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000003ac <__addsf3>:
     3ac:	0042      	lsls	r2, r0, #1
     3ae:	bf1f      	itttt	ne
     3b0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     3b4:	ea92 0f03 	teqne	r2, r3
     3b8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     3bc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     3c0:	d06a      	beq.n	498 <CONFIG_FLASH_SIZE+0x98>
     3c2:	ea4f 6212 	mov.w	r2, r2, lsr #24
     3c6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     3ca:	bfc1      	itttt	gt
     3cc:	18d2      	addgt	r2, r2, r3
     3ce:	4041      	eorgt	r1, r0
     3d0:	4048      	eorgt	r0, r1
     3d2:	4041      	eorgt	r1, r0
     3d4:	bfb8      	it	lt
     3d6:	425b      	neglt	r3, r3
     3d8:	2b19      	cmp	r3, #25
     3da:	bf88      	it	hi
     3dc:	4770      	bxhi	lr
     3de:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     3e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     3e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     3ea:	bf18      	it	ne
     3ec:	4240      	negne	r0, r0
     3ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     3f2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     3f6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     3fa:	bf18      	it	ne
     3fc:	4249      	negne	r1, r1
     3fe:	ea92 0f03 	teq	r2, r3
     402:	d03f      	beq.n	484 <CONFIG_FLASH_SIZE+0x84>
     404:	f1a2 0201 	sub.w	r2, r2, #1
     408:	fa41 fc03 	asr.w	ip, r1, r3
     40c:	eb10 000c 	adds.w	r0, r0, ip
     410:	f1c3 0320 	rsb	r3, r3, #32
     414:	fa01 f103 	lsl.w	r1, r1, r3
     418:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     41c:	d502      	bpl.n	424 <CONFIG_FLASH_SIZE+0x24>
     41e:	4249      	negs	r1, r1
     420:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     424:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     428:	d313      	bcc.n	452 <CONFIG_FLASH_SIZE+0x52>
     42a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     42e:	d306      	bcc.n	43e <CONFIG_FLASH_SIZE+0x3e>
     430:	0840      	lsrs	r0, r0, #1
     432:	ea4f 0131 	mov.w	r1, r1, rrx
     436:	f102 0201 	add.w	r2, r2, #1
     43a:	2afe      	cmp	r2, #254	; 0xfe
     43c:	d251      	bcs.n	4e2 <CONFIG_NET_TX_STACK_SIZE+0x32>
     43e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     442:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     446:	bf08      	it	eq
     448:	f020 0001 	biceq.w	r0, r0, #1
     44c:	ea40 0003 	orr.w	r0, r0, r3
     450:	4770      	bx	lr
     452:	0049      	lsls	r1, r1, #1
     454:	eb40 0000 	adc.w	r0, r0, r0
     458:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
     45c:	f1a2 0201 	sub.w	r2, r2, #1
     460:	d1ed      	bne.n	43e <CONFIG_FLASH_SIZE+0x3e>
     462:	fab0 fc80 	clz	ip, r0
     466:	f1ac 0c08 	sub.w	ip, ip, #8
     46a:	ebb2 020c 	subs.w	r2, r2, ip
     46e:	fa00 f00c 	lsl.w	r0, r0, ip
     472:	bfaa      	itet	ge
     474:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     478:	4252      	neglt	r2, r2
     47a:	4318      	orrge	r0, r3
     47c:	bfbc      	itt	lt
     47e:	40d0      	lsrlt	r0, r2
     480:	4318      	orrlt	r0, r3
     482:	4770      	bx	lr
     484:	f092 0f00 	teq	r2, #0
     488:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     48c:	bf06      	itte	eq
     48e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     492:	3201      	addeq	r2, #1
     494:	3b01      	subne	r3, #1
     496:	e7b5      	b.n	404 <CONFIG_FLASH_SIZE+0x4>
     498:	ea4f 0341 	mov.w	r3, r1, lsl #1
     49c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     4a0:	bf18      	it	ne
     4a2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     4a6:	d021      	beq.n	4ec <CONFIG_NET_TX_STACK_SIZE+0x3c>
     4a8:	ea92 0f03 	teq	r2, r3
     4ac:	d004      	beq.n	4b8 <CONFIG_NET_TX_STACK_SIZE+0x8>
     4ae:	f092 0f00 	teq	r2, #0
     4b2:	bf08      	it	eq
     4b4:	4608      	moveq	r0, r1
     4b6:	4770      	bx	lr
     4b8:	ea90 0f01 	teq	r0, r1
     4bc:	bf1c      	itt	ne
     4be:	2000      	movne	r0, #0
     4c0:	4770      	bxne	lr
     4c2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     4c6:	d104      	bne.n	4d2 <CONFIG_NET_TX_STACK_SIZE+0x22>
     4c8:	0040      	lsls	r0, r0, #1
     4ca:	bf28      	it	cs
     4cc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     4d0:	4770      	bx	lr
     4d2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     4d6:	bf3c      	itt	cc
     4d8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     4dc:	4770      	bxcc	lr
     4de:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     4e2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     4e6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     4ea:	4770      	bx	lr
     4ec:	ea7f 6222 	mvns.w	r2, r2, asr #24
     4f0:	bf16      	itet	ne
     4f2:	4608      	movne	r0, r1
     4f4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     4f8:	4601      	movne	r1, r0
     4fa:	0242      	lsls	r2, r0, #9
     4fc:	bf06      	itte	eq
     4fe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     502:	ea90 0f01 	teqeq	r0, r1
     506:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     50a:	4770      	bx	lr

0000050c <__aeabi_ui2f>:
     50c:	f04f 0300 	mov.w	r3, #0
     510:	e004      	b.n	51c <__aeabi_i2f+0x8>
     512:	bf00      	nop

00000514 <__aeabi_i2f>:
     514:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     518:	bf48      	it	mi
     51a:	4240      	negmi	r0, r0
     51c:	ea5f 0c00 	movs.w	ip, r0
     520:	bf08      	it	eq
     522:	4770      	bxeq	lr
     524:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     528:	4601      	mov	r1, r0
     52a:	f04f 0000 	mov.w	r0, #0
     52e:	e01c      	b.n	56a <__aeabi_l2f+0x2a>

00000530 <__aeabi_ul2f>:
     530:	ea50 0201 	orrs.w	r2, r0, r1
     534:	bf08      	it	eq
     536:	4770      	bxeq	lr
     538:	f04f 0300 	mov.w	r3, #0
     53c:	e00a      	b.n	554 <__aeabi_l2f+0x14>
     53e:	bf00      	nop

00000540 <__aeabi_l2f>:
     540:	ea50 0201 	orrs.w	r2, r0, r1
     544:	bf08      	it	eq
     546:	4770      	bxeq	lr
     548:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     54c:	d502      	bpl.n	554 <__aeabi_l2f+0x14>
     54e:	4240      	negs	r0, r0
     550:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     554:	ea5f 0c01 	movs.w	ip, r1
     558:	bf02      	ittt	eq
     55a:	4684      	moveq	ip, r0
     55c:	4601      	moveq	r1, r0
     55e:	2000      	moveq	r0, #0
     560:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     564:	bf08      	it	eq
     566:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     56a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     56e:	fabc f28c 	clz	r2, ip
     572:	3a08      	subs	r2, #8
     574:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     578:	db10      	blt.n	59c <__aeabi_l2f+0x5c>
     57a:	fa01 fc02 	lsl.w	ip, r1, r2
     57e:	4463      	add	r3, ip
     580:	fa00 fc02 	lsl.w	ip, r0, r2
     584:	f1c2 0220 	rsb	r2, r2, #32
     588:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     58c:	fa20 f202 	lsr.w	r2, r0, r2
     590:	eb43 0002 	adc.w	r0, r3, r2
     594:	bf08      	it	eq
     596:	f020 0001 	biceq.w	r0, r0, #1
     59a:	4770      	bx	lr
     59c:	f102 0220 	add.w	r2, r2, #32
     5a0:	fa01 fc02 	lsl.w	ip, r1, r2
     5a4:	f1c2 0220 	rsb	r2, r2, #32
     5a8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     5ac:	fa21 f202 	lsr.w	r2, r1, r2
     5b0:	eb43 0002 	adc.w	r0, r3, r2
     5b4:	bf08      	it	eq
     5b6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     5ba:	4770      	bx	lr

000005bc <__aeabi_fmul>:
     5bc:	f04f 0cff 	mov.w	ip, #255	; 0xff
     5c0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     5c4:	bf1e      	ittt	ne
     5c6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     5ca:	ea92 0f0c 	teqne	r2, ip
     5ce:	ea93 0f0c 	teqne	r3, ip
     5d2:	d06f      	beq.n	6b4 <CONFIG_NET_RX_STACK_SIZE+0xd8>
     5d4:	441a      	add	r2, r3
     5d6:	ea80 0c01 	eor.w	ip, r0, r1
     5da:	0240      	lsls	r0, r0, #9
     5dc:	bf18      	it	ne
     5de:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     5e2:	d01e      	beq.n	622 <CONFIG_NET_RX_STACK_SIZE+0x46>
     5e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     5e8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     5ec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     5f0:	fba0 3101 	umull	r3, r1, r0, r1
     5f4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     5f8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     5fc:	bf3e      	ittt	cc
     5fe:	0049      	lslcc	r1, r1, #1
     600:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     604:	005b      	lslcc	r3, r3, #1
     606:	ea40 0001 	orr.w	r0, r0, r1
     60a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     60e:	2afd      	cmp	r2, #253	; 0xfd
     610:	d81d      	bhi.n	64e <CONFIG_NET_RX_STACK_SIZE+0x72>
     612:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     616:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     61a:	bf08      	it	eq
     61c:	f020 0001 	biceq.w	r0, r0, #1
     620:	4770      	bx	lr
     622:	f090 0f00 	teq	r0, #0
     626:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     62a:	bf08      	it	eq
     62c:	0249      	lsleq	r1, r1, #9
     62e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     632:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     636:	3a7f      	subs	r2, #127	; 0x7f
     638:	bfc2      	ittt	gt
     63a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     63e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     642:	4770      	bxgt	lr
     644:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     648:	f04f 0300 	mov.w	r3, #0
     64c:	3a01      	subs	r2, #1
     64e:	dc5d      	bgt.n	70c <CONFIG_NET_RX_STACK_SIZE+0x130>
     650:	f112 0f19 	cmn.w	r2, #25
     654:	bfdc      	itt	le
     656:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     65a:	4770      	bxle	lr
     65c:	f1c2 0200 	rsb	r2, r2, #0
     660:	0041      	lsls	r1, r0, #1
     662:	fa21 f102 	lsr.w	r1, r1, r2
     666:	f1c2 0220 	rsb	r2, r2, #32
     66a:	fa00 fc02 	lsl.w	ip, r0, r2
     66e:	ea5f 0031 	movs.w	r0, r1, rrx
     672:	f140 0000 	adc.w	r0, r0, #0
     676:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     67a:	bf08      	it	eq
     67c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     680:	4770      	bx	lr
     682:	f092 0f00 	teq	r2, #0
     686:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     68a:	bf02      	ittt	eq
     68c:	0040      	lsleq	r0, r0, #1
     68e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     692:	3a01      	subeq	r2, #1
     694:	d0f9      	beq.n	68a <CONFIG_NET_RX_STACK_SIZE+0xae>
     696:	ea40 000c 	orr.w	r0, r0, ip
     69a:	f093 0f00 	teq	r3, #0
     69e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     6a2:	bf02      	ittt	eq
     6a4:	0049      	lsleq	r1, r1, #1
     6a6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     6aa:	3b01      	subeq	r3, #1
     6ac:	d0f9      	beq.n	6a2 <CONFIG_NET_RX_STACK_SIZE+0xc6>
     6ae:	ea41 010c 	orr.w	r1, r1, ip
     6b2:	e78f      	b.n	5d4 <__aeabi_fmul+0x18>
     6b4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     6b8:	ea92 0f0c 	teq	r2, ip
     6bc:	bf18      	it	ne
     6be:	ea93 0f0c 	teqne	r3, ip
     6c2:	d00a      	beq.n	6da <CONFIG_NET_RX_STACK_SIZE+0xfe>
     6c4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     6c8:	bf18      	it	ne
     6ca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     6ce:	d1d8      	bne.n	682 <CONFIG_NET_RX_STACK_SIZE+0xa6>
     6d0:	ea80 0001 	eor.w	r0, r0, r1
     6d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     6d8:	4770      	bx	lr
     6da:	f090 0f00 	teq	r0, #0
     6de:	bf17      	itett	ne
     6e0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     6e4:	4608      	moveq	r0, r1
     6e6:	f091 0f00 	teqne	r1, #0
     6ea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     6ee:	d014      	beq.n	71a <CONFIG_NET_RX_STACK_SIZE+0x13e>
     6f0:	ea92 0f0c 	teq	r2, ip
     6f4:	d101      	bne.n	6fa <CONFIG_NET_RX_STACK_SIZE+0x11e>
     6f6:	0242      	lsls	r2, r0, #9
     6f8:	d10f      	bne.n	71a <CONFIG_NET_RX_STACK_SIZE+0x13e>
     6fa:	ea93 0f0c 	teq	r3, ip
     6fe:	d103      	bne.n	708 <CONFIG_NET_RX_STACK_SIZE+0x12c>
     700:	024b      	lsls	r3, r1, #9
     702:	bf18      	it	ne
     704:	4608      	movne	r0, r1
     706:	d108      	bne.n	71a <CONFIG_NET_RX_STACK_SIZE+0x13e>
     708:	ea80 0001 	eor.w	r0, r0, r1
     70c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     710:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     714:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     718:	4770      	bx	lr
     71a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     71e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     722:	4770      	bx	lr

00000724 <__aeabi_fdiv>:
     724:	f04f 0cff 	mov.w	ip, #255	; 0xff
     728:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     72c:	bf1e      	ittt	ne
     72e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     732:	ea92 0f0c 	teqne	r2, ip
     736:	ea93 0f0c 	teqne	r3, ip
     73a:	d069      	beq.n	810 <__aeabi_fdiv+0xec>
     73c:	eba2 0203 	sub.w	r2, r2, r3
     740:	ea80 0c01 	eor.w	ip, r0, r1
     744:	0249      	lsls	r1, r1, #9
     746:	ea4f 2040 	mov.w	r0, r0, lsl #9
     74a:	d037      	beq.n	7bc <__aeabi_fdiv+0x98>
     74c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     750:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     754:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     758:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     75c:	428b      	cmp	r3, r1
     75e:	bf38      	it	cc
     760:	005b      	lslcc	r3, r3, #1
     762:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     766:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     76a:	428b      	cmp	r3, r1
     76c:	bf24      	itt	cs
     76e:	1a5b      	subcs	r3, r3, r1
     770:	ea40 000c 	orrcs.w	r0, r0, ip
     774:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     778:	bf24      	itt	cs
     77a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     77e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     782:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     786:	bf24      	itt	cs
     788:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     794:	bf24      	itt	cs
     796:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     79a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     79e:	011b      	lsls	r3, r3, #4
     7a0:	bf18      	it	ne
     7a2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     7a6:	d1e0      	bne.n	76a <__aeabi_fdiv+0x46>
     7a8:	2afd      	cmp	r2, #253	; 0xfd
     7aa:	f63f af50 	bhi.w	64e <CONFIG_NET_RX_STACK_SIZE+0x72>
     7ae:	428b      	cmp	r3, r1
     7b0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     7b4:	bf08      	it	eq
     7b6:	f020 0001 	biceq.w	r0, r0, #1
     7ba:	4770      	bx	lr
     7bc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     7c0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     7c4:	327f      	adds	r2, #127	; 0x7f
     7c6:	bfc2      	ittt	gt
     7c8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     7cc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     7d0:	4770      	bxgt	lr
     7d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     7d6:	f04f 0300 	mov.w	r3, #0
     7da:	3a01      	subs	r2, #1
     7dc:	e737      	b.n	64e <CONFIG_NET_RX_STACK_SIZE+0x72>
     7de:	f092 0f00 	teq	r2, #0
     7e2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     7e6:	bf02      	ittt	eq
     7e8:	0040      	lsleq	r0, r0, #1
     7ea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     7ee:	3a01      	subeq	r2, #1
     7f0:	d0f9      	beq.n	7e6 <__aeabi_fdiv+0xc2>
     7f2:	ea40 000c 	orr.w	r0, r0, ip
     7f6:	f093 0f00 	teq	r3, #0
     7fa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     7fe:	bf02      	ittt	eq
     800:	0049      	lsleq	r1, r1, #1
     802:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     806:	3b01      	subeq	r3, #1
     808:	d0f9      	beq.n	7fe <__aeabi_fdiv+0xda>
     80a:	ea41 010c 	orr.w	r1, r1, ip
     80e:	e795      	b.n	73c <__aeabi_fdiv+0x18>
     810:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     814:	ea92 0f0c 	teq	r2, ip
     818:	d108      	bne.n	82c <__aeabi_fdiv+0x108>
     81a:	0242      	lsls	r2, r0, #9
     81c:	f47f af7d 	bne.w	71a <CONFIG_NET_RX_STACK_SIZE+0x13e>
     820:	ea93 0f0c 	teq	r3, ip
     824:	f47f af70 	bne.w	708 <CONFIG_NET_RX_STACK_SIZE+0x12c>
     828:	4608      	mov	r0, r1
     82a:	e776      	b.n	71a <CONFIG_NET_RX_STACK_SIZE+0x13e>
     82c:	ea93 0f0c 	teq	r3, ip
     830:	d104      	bne.n	83c <__aeabi_fdiv+0x118>
     832:	024b      	lsls	r3, r1, #9
     834:	f43f af4c 	beq.w	6d0 <CONFIG_NET_RX_STACK_SIZE+0xf4>
     838:	4608      	mov	r0, r1
     83a:	e76e      	b.n	71a <CONFIG_NET_RX_STACK_SIZE+0x13e>
     83c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     840:	bf18      	it	ne
     842:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     846:	d1ca      	bne.n	7de <__aeabi_fdiv+0xba>
     848:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     84c:	f47f af5c 	bne.w	708 <CONFIG_NET_RX_STACK_SIZE+0x12c>
     850:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     854:	f47f af3c 	bne.w	6d0 <CONFIG_NET_RX_STACK_SIZE+0xf4>
     858:	e75f      	b.n	71a <CONFIG_NET_RX_STACK_SIZE+0x13e>
     85a:	bf00      	nop

0000085c <__aeabi_f2iz>:
     85c:	ea4f 0240 	mov.w	r2, r0, lsl #1
     860:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     864:	d30f      	bcc.n	886 <__aeabi_f2iz+0x2a>
     866:	f04f 039e 	mov.w	r3, #158	; 0x9e
     86a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     86e:	d90d      	bls.n	88c <__aeabi_f2iz+0x30>
     870:	ea4f 2300 	mov.w	r3, r0, lsl #8
     874:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     878:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     87c:	fa23 f002 	lsr.w	r0, r3, r2
     880:	bf18      	it	ne
     882:	4240      	negne	r0, r0
     884:	4770      	bx	lr
     886:	f04f 0000 	mov.w	r0, #0
     88a:	4770      	bx	lr
     88c:	f112 0f61 	cmn.w	r2, #97	; 0x61
     890:	d101      	bne.n	896 <__aeabi_f2iz+0x3a>
     892:	0242      	lsls	r2, r0, #9
     894:	d105      	bne.n	8a2 <__aeabi_f2iz+0x46>
     896:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
     89a:	bf08      	it	eq
     89c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     8a0:	4770      	bx	lr
     8a2:	f04f 0000 	mov.w	r0, #0
     8a6:	4770      	bx	lr

000008a8 <__aeabi_ldivmod>:
     8a8:	b97b      	cbnz	r3, 8ca <__aeabi_ldivmod+0x22>
     8aa:	b972      	cbnz	r2, 8ca <__aeabi_ldivmod+0x22>
     8ac:	2900      	cmp	r1, #0
     8ae:	bfbe      	ittt	lt
     8b0:	2000      	movlt	r0, #0
     8b2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     8b6:	e006      	blt.n	8c6 <__aeabi_ldivmod+0x1e>
     8b8:	bf08      	it	eq
     8ba:	2800      	cmpeq	r0, #0
     8bc:	bf1c      	itt	ne
     8be:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     8c2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     8c6:	f000 b857 	b.w	978 <__aeabi_idiv0>
     8ca:	f1ad 0c08 	sub.w	ip, sp, #8
     8ce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     8d2:	2900      	cmp	r1, #0
     8d4:	db09      	blt.n	8ea <__aeabi_ldivmod+0x42>
     8d6:	2b00      	cmp	r3, #0
     8d8:	db1a      	blt.n	910 <__aeabi_ldivmod+0x68>
     8da:	f001 fbe3 	bl	20a4 <__udivmoddi4>
     8de:	f8dd e004 	ldr.w	lr, [sp, #4]
     8e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     8e6:	b004      	add	sp, #16
     8e8:	4770      	bx	lr
     8ea:	4240      	negs	r0, r0
     8ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     8f0:	2b00      	cmp	r3, #0
     8f2:	db1b      	blt.n	92c <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x3>
     8f4:	f001 fbd6 	bl	20a4 <__udivmoddi4>
     8f8:	f8dd e004 	ldr.w	lr, [sp, #4]
     8fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     900:	b004      	add	sp, #16
     902:	4240      	negs	r0, r0
     904:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     908:	4252      	negs	r2, r2
     90a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     90e:	4770      	bx	lr
     910:	4252      	negs	r2, r2
     912:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     916:	f001 fbc5 	bl	20a4 <__udivmoddi4>
     91a:	f8dd e004 	ldr.w	lr, [sp, #4]
     91e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     922:	b004      	add	sp, #16
     924:	4240      	negs	r0, r0
     926:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     92a:	4770      	bx	lr
     92c:	4252      	negs	r2, r2
     92e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     932:	f001 fbb7 	bl	20a4 <__udivmoddi4>
     936:	f8dd e004 	ldr.w	lr, [sp, #4]
     93a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     93e:	b004      	add	sp, #16
     940:	4252      	negs	r2, r2
     942:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     946:	4770      	bx	lr

00000948 <__aeabi_uldivmod>:
     948:	b953      	cbnz	r3, 960 <__aeabi_uldivmod+0x18>
     94a:	b94a      	cbnz	r2, 960 <__aeabi_uldivmod+0x18>
     94c:	2900      	cmp	r1, #0
     94e:	bf08      	it	eq
     950:	2800      	cmpeq	r0, #0
     952:	bf1c      	itt	ne
     954:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     958:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     95c:	f000 b80c 	b.w	978 <__aeabi_idiv0>
     960:	f1ad 0c08 	sub.w	ip, sp, #8
     964:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     968:	f001 fb9c 	bl	20a4 <__udivmoddi4>
     96c:	f8dd e004 	ldr.w	lr, [sp, #4]
     970:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     974:	b004      	add	sp, #16
     976:	4770      	bx	lr

00000978 <__aeabi_idiv0>:
     978:	4770      	bx	lr
     97a:	bf00      	nop

0000097c <__assert_func>:
     97c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     97e:	461c      	mov	r4, r3
     980:	4b09      	ldr	r3, [pc, #36]	; (9a8 <__assert_func+0x2c>)
     982:	681b      	ldr	r3, [r3, #0]
     984:	4605      	mov	r5, r0
     986:	68d8      	ldr	r0, [r3, #12]
     988:	b152      	cbz	r2, 9a0 <__assert_func+0x24>
     98a:	4b08      	ldr	r3, [pc, #32]	; (9ac <__assert_func+0x30>)
     98c:	9100      	str	r1, [sp, #0]
     98e:	e9cd 3201 	strd	r3, r2, [sp, #4]
     992:	4907      	ldr	r1, [pc, #28]	; (9b0 <__assert_func+0x34>)
     994:	462b      	mov	r3, r5
     996:	4622      	mov	r2, r4
     998:	f000 f821 	bl	9de <fiprintf>
     99c:	f001 fd89 	bl	24b2 <abort>
     9a0:	4b04      	ldr	r3, [pc, #16]	; (9b4 <__assert_func+0x38>)
     9a2:	461a      	mov	r2, r3
     9a4:	e7f2      	b.n	98c <__assert_func+0x10>
     9a6:	bf00      	nop
     9a8:	20002000 	.word	0x20002000
     9ac:	0001c62b 	.word	0x0001c62b
     9b0:	0001c638 	.word	0x0001c638
     9b4:	00019f0c 	.word	0x00019f0c

000009b8 <__assert>:
     9b8:	b508      	push	{r3, lr}
     9ba:	4613      	mov	r3, r2
     9bc:	2200      	movs	r2, #0
     9be:	f7ff ffdd 	bl	97c <__assert_func>
     9c2:	bf00      	nop

000009c4 <_fiprintf_r>:
     9c4:	b40c      	push	{r2, r3}
     9c6:	b507      	push	{r0, r1, r2, lr}
     9c8:	ab04      	add	r3, sp, #16
     9ca:	f853 2b04 	ldr.w	r2, [r3], #4
     9ce:	9301      	str	r3, [sp, #4]
     9d0:	f000 f8a2 	bl	b18 <_vfiprintf_r>
     9d4:	b003      	add	sp, #12
     9d6:	f85d eb04 	ldr.w	lr, [sp], #4
     9da:	b002      	add	sp, #8
     9dc:	4770      	bx	lr

000009de <fiprintf>:
     9de:	b40e      	push	{r1, r2, r3}
     9e0:	b503      	push	{r0, r1, lr}
     9e2:	4601      	mov	r1, r0
     9e4:	ab03      	add	r3, sp, #12
     9e6:	4806      	ldr	r0, [pc, #24]	; (a00 <fiprintf+0x22>)
     9e8:	f853 2b04 	ldr.w	r2, [r3], #4
     9ec:	6800      	ldr	r0, [r0, #0]
     9ee:	9301      	str	r3, [sp, #4]
     9f0:	f000 f892 	bl	b18 <_vfiprintf_r>
     9f4:	b002      	add	sp, #8
     9f6:	f85d eb04 	ldr.w	lr, [sp], #4
     9fa:	b003      	add	sp, #12
     9fc:	4770      	bx	lr
     9fe:	bf00      	nop
     a00:	20002000 	.word	0x20002000

00000a04 <_malloc_r>:
     a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a06:	1cce      	adds	r6, r1, #3
     a08:	f026 0603 	bic.w	r6, r6, #3
     a0c:	3608      	adds	r6, #8
     a0e:	2e0c      	cmp	r6, #12
     a10:	bf38      	it	cc
     a12:	260c      	movcc	r6, #12
     a14:	2e00      	cmp	r6, #0
     a16:	4607      	mov	r7, r0
     a18:	db01      	blt.n	a1e <_malloc_r+0x1a>
     a1a:	42b1      	cmp	r1, r6
     a1c:	d903      	bls.n	a26 <_malloc_r+0x22>
     a1e:	230c      	movs	r3, #12
     a20:	603b      	str	r3, [r7, #0]
     a22:	2000      	movs	r0, #0
     a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a26:	4d21      	ldr	r5, [pc, #132]	; (aac <_malloc_r+0xa8>)
     a28:	f001 fd84 	bl	2534 <__malloc_lock>
     a2c:	682a      	ldr	r2, [r5, #0]
     a2e:	4614      	mov	r4, r2
     a30:	b994      	cbnz	r4, a58 <_malloc_r+0x54>
     a32:	686b      	ldr	r3, [r5, #4]
     a34:	b923      	cbnz	r3, a40 <_malloc_r+0x3c>
     a36:	4621      	mov	r1, r4
     a38:	4638      	mov	r0, r7
     a3a:	f000 faf9 	bl	1030 <_sbrk_r>
     a3e:	6068      	str	r0, [r5, #4]
     a40:	4631      	mov	r1, r6
     a42:	4638      	mov	r0, r7
     a44:	f000 faf4 	bl	1030 <_sbrk_r>
     a48:	1c43      	adds	r3, r0, #1
     a4a:	d123      	bne.n	a94 <_malloc_r+0x90>
     a4c:	230c      	movs	r3, #12
     a4e:	603b      	str	r3, [r7, #0]
     a50:	4638      	mov	r0, r7
     a52:	f001 fd70 	bl	2536 <__malloc_unlock>
     a56:	e7e4      	b.n	a22 <_malloc_r+0x1e>
     a58:	6823      	ldr	r3, [r4, #0]
     a5a:	1b9b      	subs	r3, r3, r6
     a5c:	d417      	bmi.n	a8e <_malloc_r+0x8a>
     a5e:	2b0b      	cmp	r3, #11
     a60:	d903      	bls.n	a6a <_malloc_r+0x66>
     a62:	6023      	str	r3, [r4, #0]
     a64:	441c      	add	r4, r3
     a66:	6026      	str	r6, [r4, #0]
     a68:	e004      	b.n	a74 <_malloc_r+0x70>
     a6a:	6863      	ldr	r3, [r4, #4]
     a6c:	42a2      	cmp	r2, r4
     a6e:	bf0c      	ite	eq
     a70:	602b      	streq	r3, [r5, #0]
     a72:	6053      	strne	r3, [r2, #4]
     a74:	4638      	mov	r0, r7
     a76:	f001 fd5e 	bl	2536 <__malloc_unlock>
     a7a:	f104 000b 	add.w	r0, r4, #11
     a7e:	1d23      	adds	r3, r4, #4
     a80:	f020 0007 	bic.w	r0, r0, #7
     a84:	1ac2      	subs	r2, r0, r3
     a86:	d0cd      	beq.n	a24 <_malloc_r+0x20>
     a88:	1a1b      	subs	r3, r3, r0
     a8a:	50a3      	str	r3, [r4, r2]
     a8c:	e7ca      	b.n	a24 <_malloc_r+0x20>
     a8e:	4622      	mov	r2, r4
     a90:	6864      	ldr	r4, [r4, #4]
     a92:	e7cd      	b.n	a30 <_malloc_r+0x2c>
     a94:	1cc4      	adds	r4, r0, #3
     a96:	f024 0403 	bic.w	r4, r4, #3
     a9a:	42a0      	cmp	r0, r4
     a9c:	d0e3      	beq.n	a66 <_malloc_r+0x62>
     a9e:	1a21      	subs	r1, r4, r0
     aa0:	4638      	mov	r0, r7
     aa2:	f000 fac5 	bl	1030 <_sbrk_r>
     aa6:	3001      	adds	r0, #1
     aa8:	d1dd      	bne.n	a66 <_malloc_r+0x62>
     aaa:	e7cf      	b.n	a4c <_malloc_r+0x48>
     aac:	20002294 	.word	0x20002294

00000ab0 <__sfputc_r>:
     ab0:	6893      	ldr	r3, [r2, #8]
     ab2:	3b01      	subs	r3, #1
     ab4:	2b00      	cmp	r3, #0
     ab6:	b410      	push	{r4}
     ab8:	6093      	str	r3, [r2, #8]
     aba:	da07      	bge.n	acc <__sfputc_r+0x1c>
     abc:	6994      	ldr	r4, [r2, #24]
     abe:	42a3      	cmp	r3, r4
     ac0:	db01      	blt.n	ac6 <__sfputc_r+0x16>
     ac2:	290a      	cmp	r1, #10
     ac4:	d102      	bne.n	acc <__sfputc_r+0x1c>
     ac6:	bc10      	pop	{r4}
     ac8:	f000 bbe8 	b.w	129c <__swbuf_r>
     acc:	6813      	ldr	r3, [r2, #0]
     ace:	1c58      	adds	r0, r3, #1
     ad0:	6010      	str	r0, [r2, #0]
     ad2:	7019      	strb	r1, [r3, #0]
     ad4:	4608      	mov	r0, r1
     ad6:	bc10      	pop	{r4}
     ad8:	4770      	bx	lr

00000ada <__sfputs_r>:
     ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     adc:	4606      	mov	r6, r0
     ade:	460f      	mov	r7, r1
     ae0:	4614      	mov	r4, r2
     ae2:	18d5      	adds	r5, r2, r3
     ae4:	42ac      	cmp	r4, r5
     ae6:	d101      	bne.n	aec <__sfputs_r+0x12>
     ae8:	2000      	movs	r0, #0
     aea:	e007      	b.n	afc <__sfputs_r+0x22>
     aec:	463a      	mov	r2, r7
     aee:	f814 1b01 	ldrb.w	r1, [r4], #1
     af2:	4630      	mov	r0, r6
     af4:	f7ff ffdc 	bl	ab0 <__sfputc_r>
     af8:	1c43      	adds	r3, r0, #1
     afa:	d1f3      	bne.n	ae4 <__sfputs_r+0xa>
     afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000afe <__sprint_r>:
     afe:	b538      	push	{r3, r4, r5, lr}
     b00:	6893      	ldr	r3, [r2, #8]
     b02:	4614      	mov	r4, r2
     b04:	2500      	movs	r5, #0
     b06:	b913      	cbnz	r3, b0e <__sprint_r+0x10>
     b08:	6053      	str	r3, [r2, #4]
     b0a:	4618      	mov	r0, r3
     b0c:	bd38      	pop	{r3, r4, r5, pc}
     b0e:	f000 fddd 	bl	16cc <__sfvwrite_r>
     b12:	e9c4 5501 	strd	r5, r5, [r4, #4]
     b16:	e7f9      	b.n	b0c <__sprint_r+0xe>

00000b18 <_vfiprintf_r>:
     b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b1c:	460e      	mov	r6, r1
     b1e:	b09d      	sub	sp, #116	; 0x74
     b20:	4614      	mov	r4, r2
     b22:	461d      	mov	r5, r3
     b24:	4607      	mov	r7, r0
     b26:	b118      	cbz	r0, b30 <_vfiprintf_r+0x18>
     b28:	6b83      	ldr	r3, [r0, #56]	; 0x38
     b2a:	b90b      	cbnz	r3, b30 <_vfiprintf_r+0x18>
     b2c:	f000 fd70 	bl	1610 <__sinit>
     b30:	89b3      	ldrh	r3, [r6, #12]
     b32:	0718      	lsls	r0, r3, #28
     b34:	d556      	bpl.n	be4 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x2c>
     b36:	6933      	ldr	r3, [r6, #16]
     b38:	2b00      	cmp	r3, #0
     b3a:	d053      	beq.n	be4 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x2c>
     b3c:	2300      	movs	r3, #0
     b3e:	9309      	str	r3, [sp, #36]	; 0x24
     b40:	2320      	movs	r3, #32
     b42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
     b46:	f8df 91ac 	ldr.w	r9, [pc, #428]	; cf4 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x13c>
     b4a:	9503      	str	r5, [sp, #12]
     b4c:	2330      	movs	r3, #48	; 0x30
     b4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
     b52:	f04f 0a01 	mov.w	sl, #1
     b56:	4623      	mov	r3, r4
     b58:	461d      	mov	r5, r3
     b5a:	f813 2b01 	ldrb.w	r2, [r3], #1
     b5e:	b10a      	cbz	r2, b64 <_vfiprintf_r+0x4c>
     b60:	2a25      	cmp	r2, #37	; 0x25
     b62:	d1f9      	bne.n	b58 <_vfiprintf_r+0x40>
     b64:	ebb5 0b04 	subs.w	fp, r5, r4
     b68:	d00b      	beq.n	b82 <_vfiprintf_r+0x6a>
     b6a:	465b      	mov	r3, fp
     b6c:	4622      	mov	r2, r4
     b6e:	4631      	mov	r1, r6
     b70:	4638      	mov	r0, r7
     b72:	f7ff ffb2 	bl	ada <__sfputs_r>
     b76:	3001      	adds	r0, #1
     b78:	f000 80ae 	beq.w	cd8 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x120>
     b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b7e:	445b      	add	r3, fp
     b80:	9309      	str	r3, [sp, #36]	; 0x24
     b82:	782b      	ldrb	r3, [r5, #0]
     b84:	2b00      	cmp	r3, #0
     b86:	f000 80a7 	beq.w	cd8 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x120>
     b8a:	2300      	movs	r3, #0
     b8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     b90:	e9cd 2305 	strd	r2, r3, [sp, #20]
     b94:	3501      	adds	r5, #1
     b96:	9304      	str	r3, [sp, #16]
     b98:	9307      	str	r3, [sp, #28]
     b9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
     b9e:	931a      	str	r3, [sp, #104]	; 0x68
     ba0:	462c      	mov	r4, r5
     ba2:	2205      	movs	r2, #5
     ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
     ba8:	4852      	ldr	r0, [pc, #328]	; (cf4 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x13c>)
     baa:	f7ff fba9 	bl	300 <memchr>
     bae:	9b04      	ldr	r3, [sp, #16]
     bb0:	bb18      	cbnz	r0, bfa <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x42>
     bb2:	06d9      	lsls	r1, r3, #27
     bb4:	bf44      	itt	mi
     bb6:	2220      	movmi	r2, #32
     bb8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
     bbc:	071a      	lsls	r2, r3, #28
     bbe:	bf44      	itt	mi
     bc0:	222b      	movmi	r2, #43	; 0x2b
     bc2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
     bc6:	782a      	ldrb	r2, [r5, #0]
     bc8:	2a2a      	cmp	r2, #42	; 0x2a
     bca:	d01e      	beq.n	c0a <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x52>
     bcc:	9a07      	ldr	r2, [sp, #28]
     bce:	462c      	mov	r4, r5
     bd0:	2000      	movs	r0, #0
     bd2:	250a      	movs	r5, #10
     bd4:	4621      	mov	r1, r4
     bd6:	f811 3b01 	ldrb.w	r3, [r1], #1
     bda:	3b30      	subs	r3, #48	; 0x30
     bdc:	2b09      	cmp	r3, #9
     bde:	d956      	bls.n	c8e <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xd6>
     be0:	b9c8      	cbnz	r0, c16 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x5e>
     be2:	e01f      	b.n	c24 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x6c>
     be4:	4631      	mov	r1, r6
     be6:	4638      	mov	r0, r7
     be8:	f000 fb9e 	bl	1328 <__swsetup_r>
     bec:	2800      	cmp	r0, #0
     bee:	d0a5      	beq.n	b3c <_vfiprintf_r+0x24>
     bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     bf4:	b01d      	add	sp, #116	; 0x74
     bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     bfa:	eba0 0009 	sub.w	r0, r0, r9
     bfe:	fa0a f000 	lsl.w	r0, sl, r0
     c02:	4318      	orrs	r0, r3
     c04:	9004      	str	r0, [sp, #16]
     c06:	4625      	mov	r5, r4
     c08:	e7ca      	b.n	ba0 <_vfiprintf_r+0x88>
     c0a:	9a03      	ldr	r2, [sp, #12]
     c0c:	1d11      	adds	r1, r2, #4
     c0e:	6812      	ldr	r2, [r2, #0]
     c10:	9103      	str	r1, [sp, #12]
     c12:	2a00      	cmp	r2, #0
     c14:	db01      	blt.n	c1a <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x62>
     c16:	9207      	str	r2, [sp, #28]
     c18:	e004      	b.n	c24 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x6c>
     c1a:	4252      	negs	r2, r2
     c1c:	f043 0302 	orr.w	r3, r3, #2
     c20:	9207      	str	r2, [sp, #28]
     c22:	9304      	str	r3, [sp, #16]
     c24:	7823      	ldrb	r3, [r4, #0]
     c26:	2b2e      	cmp	r3, #46	; 0x2e
     c28:	d10c      	bne.n	c44 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x8c>
     c2a:	7863      	ldrb	r3, [r4, #1]
     c2c:	2b2a      	cmp	r3, #42	; 0x2a
     c2e:	d133      	bne.n	c98 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xe0>
     c30:	9b03      	ldr	r3, [sp, #12]
     c32:	1d1a      	adds	r2, r3, #4
     c34:	681b      	ldr	r3, [r3, #0]
     c36:	9203      	str	r2, [sp, #12]
     c38:	2b00      	cmp	r3, #0
     c3a:	bfb8      	it	lt
     c3c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
     c40:	3402      	adds	r4, #2
     c42:	9305      	str	r3, [sp, #20]
     c44:	4d2c      	ldr	r5, [pc, #176]	; (cf8 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x140>)
     c46:	7821      	ldrb	r1, [r4, #0]
     c48:	2203      	movs	r2, #3
     c4a:	4628      	mov	r0, r5
     c4c:	f7ff fb58 	bl	300 <memchr>
     c50:	b138      	cbz	r0, c62 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xaa>
     c52:	2340      	movs	r3, #64	; 0x40
     c54:	1b40      	subs	r0, r0, r5
     c56:	fa03 f000 	lsl.w	r0, r3, r0
     c5a:	9b04      	ldr	r3, [sp, #16]
     c5c:	4303      	orrs	r3, r0
     c5e:	3401      	adds	r4, #1
     c60:	9304      	str	r3, [sp, #16]
     c62:	f814 1b01 	ldrb.w	r1, [r4], #1
     c66:	4825      	ldr	r0, [pc, #148]	; (cfc <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x144>)
     c68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
     c6c:	2206      	movs	r2, #6
     c6e:	f7ff fb47 	bl	300 <memchr>
     c72:	2800      	cmp	r0, #0
     c74:	d035      	beq.n	ce2 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x12a>
     c76:	4b22      	ldr	r3, [pc, #136]	; (d00 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x148>)
     c78:	bb13      	cbnz	r3, cc0 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x108>
     c7a:	9b03      	ldr	r3, [sp, #12]
     c7c:	3307      	adds	r3, #7
     c7e:	f023 0307 	bic.w	r3, r3, #7
     c82:	3308      	adds	r3, #8
     c84:	9303      	str	r3, [sp, #12]
     c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
     c88:	4443      	add	r3, r8
     c8a:	9309      	str	r3, [sp, #36]	; 0x24
     c8c:	e763      	b.n	b56 <_vfiprintf_r+0x3e>
     c8e:	fb05 3202 	mla	r2, r5, r2, r3
     c92:	2001      	movs	r0, #1
     c94:	460c      	mov	r4, r1
     c96:	e79d      	b.n	bd4 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1c>
     c98:	2300      	movs	r3, #0
     c9a:	3401      	adds	r4, #1
     c9c:	9305      	str	r3, [sp, #20]
     c9e:	4619      	mov	r1, r3
     ca0:	250a      	movs	r5, #10
     ca2:	4620      	mov	r0, r4
     ca4:	f810 2b01 	ldrb.w	r2, [r0], #1
     ca8:	3a30      	subs	r2, #48	; 0x30
     caa:	2a09      	cmp	r2, #9
     cac:	d903      	bls.n	cb6 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xfe>
     cae:	2b00      	cmp	r3, #0
     cb0:	d0c8      	beq.n	c44 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x8c>
     cb2:	9105      	str	r1, [sp, #20]
     cb4:	e7c6      	b.n	c44 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x8c>
     cb6:	fb05 2101 	mla	r1, r5, r1, r2
     cba:	2301      	movs	r3, #1
     cbc:	4604      	mov	r4, r0
     cbe:	e7f0      	b.n	ca2 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xea>
     cc0:	ab03      	add	r3, sp, #12
     cc2:	9300      	str	r3, [sp, #0]
     cc4:	4632      	mov	r2, r6
     cc6:	4b0f      	ldr	r3, [pc, #60]	; (d04 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x14c>)
     cc8:	a904      	add	r1, sp, #16
     cca:	4638      	mov	r0, r7
     ccc:	f3af 8000 	nop.w
     cd0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
     cd4:	4680      	mov	r8, r0
     cd6:	d1d6      	bne.n	c86 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xce>
     cd8:	89b3      	ldrh	r3, [r6, #12]
     cda:	065b      	lsls	r3, r3, #25
     cdc:	d488      	bmi.n	bf0 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x38>
     cde:	9809      	ldr	r0, [sp, #36]	; 0x24
     ce0:	e788      	b.n	bf4 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x3c>
     ce2:	ab03      	add	r3, sp, #12
     ce4:	9300      	str	r3, [sp, #0]
     ce6:	4632      	mov	r2, r6
     ce8:	4b06      	ldr	r3, [pc, #24]	; (d04 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x14c>)
     cea:	a904      	add	r1, sp, #16
     cec:	4638      	mov	r0, r7
     cee:	f000 f88a 	bl	e06 <_printf_i>
     cf2:	e7ed      	b.n	cd0 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x118>
     cf4:	0001c667 	.word	0x0001c667
     cf8:	0001c66d 	.word	0x0001c66d
     cfc:	0001c671 	.word	0x0001c671
     d00:	00000000 	.word	0x00000000
     d04:	00000adb 	.word	0x00000adb

00000d08 <vfiprintf>:
     d08:	4613      	mov	r3, r2
     d0a:	460a      	mov	r2, r1
     d0c:	4601      	mov	r1, r0
     d0e:	4802      	ldr	r0, [pc, #8]	; (d18 <vfiprintf+0x10>)
     d10:	6800      	ldr	r0, [r0, #0]
     d12:	f7ff bf01 	b.w	b18 <_vfiprintf_r>
     d16:	bf00      	nop
     d18:	20002000 	.word	0x20002000

00000d1c <_printf_common>:
     d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     d20:	4691      	mov	r9, r2
     d22:	461f      	mov	r7, r3
     d24:	688a      	ldr	r2, [r1, #8]
     d26:	690b      	ldr	r3, [r1, #16]
     d28:	f8dd 8020 	ldr.w	r8, [sp, #32]
     d2c:	4293      	cmp	r3, r2
     d2e:	bfb8      	it	lt
     d30:	4613      	movlt	r3, r2
     d32:	f8c9 3000 	str.w	r3, [r9]
     d36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
     d3a:	4606      	mov	r6, r0
     d3c:	460c      	mov	r4, r1
     d3e:	b112      	cbz	r2, d46 <_printf_common+0x2a>
     d40:	3301      	adds	r3, #1
     d42:	f8c9 3000 	str.w	r3, [r9]
     d46:	6823      	ldr	r3, [r4, #0]
     d48:	0699      	lsls	r1, r3, #26
     d4a:	bf42      	ittt	mi
     d4c:	f8d9 3000 	ldrmi.w	r3, [r9]
     d50:	3302      	addmi	r3, #2
     d52:	f8c9 3000 	strmi.w	r3, [r9]
     d56:	6825      	ldr	r5, [r4, #0]
     d58:	f015 0506 	ands.w	r5, r5, #6
     d5c:	d107      	bne.n	d6e <_printf_common+0x52>
     d5e:	f104 0a19 	add.w	sl, r4, #25
     d62:	68e3      	ldr	r3, [r4, #12]
     d64:	f8d9 2000 	ldr.w	r2, [r9]
     d68:	1a9b      	subs	r3, r3, r2
     d6a:	42ab      	cmp	r3, r5
     d6c:	dc28      	bgt.n	dc0 <_printf_common+0xa4>
     d6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
     d72:	6822      	ldr	r2, [r4, #0]
     d74:	3300      	adds	r3, #0
     d76:	bf18      	it	ne
     d78:	2301      	movne	r3, #1
     d7a:	0692      	lsls	r2, r2, #26
     d7c:	d42d      	bmi.n	dda <_printf_common+0xbe>
     d7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
     d82:	4639      	mov	r1, r7
     d84:	4630      	mov	r0, r6
     d86:	47c0      	blx	r8
     d88:	3001      	adds	r0, #1
     d8a:	d020      	beq.n	dce <_printf_common+0xb2>
     d8c:	6823      	ldr	r3, [r4, #0]
     d8e:	68e5      	ldr	r5, [r4, #12]
     d90:	f8d9 2000 	ldr.w	r2, [r9]
     d94:	f003 0306 	and.w	r3, r3, #6
     d98:	2b04      	cmp	r3, #4
     d9a:	bf08      	it	eq
     d9c:	1aad      	subeq	r5, r5, r2
     d9e:	68a3      	ldr	r3, [r4, #8]
     da0:	6922      	ldr	r2, [r4, #16]
     da2:	bf0c      	ite	eq
     da4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
     da8:	2500      	movne	r5, #0
     daa:	4293      	cmp	r3, r2
     dac:	bfc4      	itt	gt
     dae:	1a9b      	subgt	r3, r3, r2
     db0:	18ed      	addgt	r5, r5, r3
     db2:	f04f 0900 	mov.w	r9, #0
     db6:	341a      	adds	r4, #26
     db8:	454d      	cmp	r5, r9
     dba:	d11a      	bne.n	df2 <_printf_common+0xd6>
     dbc:	2000      	movs	r0, #0
     dbe:	e008      	b.n	dd2 <_printf_common+0xb6>
     dc0:	2301      	movs	r3, #1
     dc2:	4652      	mov	r2, sl
     dc4:	4639      	mov	r1, r7
     dc6:	4630      	mov	r0, r6
     dc8:	47c0      	blx	r8
     dca:	3001      	adds	r0, #1
     dcc:	d103      	bne.n	dd6 <_printf_common+0xba>
     dce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     dd6:	3501      	adds	r5, #1
     dd8:	e7c3      	b.n	d62 <_printf_common+0x46>
     dda:	18e1      	adds	r1, r4, r3
     ddc:	1c5a      	adds	r2, r3, #1
     dde:	2030      	movs	r0, #48	; 0x30
     de0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
     de4:	4422      	add	r2, r4
     de6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
     dea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
     dee:	3302      	adds	r3, #2
     df0:	e7c5      	b.n	d7e <_printf_common+0x62>
     df2:	2301      	movs	r3, #1
     df4:	4622      	mov	r2, r4
     df6:	4639      	mov	r1, r7
     df8:	4630      	mov	r0, r6
     dfa:	47c0      	blx	r8
     dfc:	3001      	adds	r0, #1
     dfe:	d0e6      	beq.n	dce <_printf_common+0xb2>
     e00:	f109 0901 	add.w	r9, r9, #1
     e04:	e7d8      	b.n	db8 <_printf_common+0x9c>

00000e06 <_printf_i>:
     e06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     e0a:	4606      	mov	r6, r0
     e0c:	460c      	mov	r4, r1
     e0e:	f101 0043 	add.w	r0, r1, #67	; 0x43
     e12:	7e09      	ldrb	r1, [r1, #24]
     e14:	b085      	sub	sp, #20
     e16:	296e      	cmp	r1, #110	; 0x6e
     e18:	4698      	mov	r8, r3
     e1a:	4617      	mov	r7, r2
     e1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     e1e:	f000 80ba 	beq.w	f96 <_printf_i+0x190>
     e22:	d824      	bhi.n	e6e <_printf_i+0x68>
     e24:	2963      	cmp	r1, #99	; 0x63
     e26:	d039      	beq.n	e9c <_printf_i+0x96>
     e28:	d80a      	bhi.n	e40 <_printf_i+0x3a>
     e2a:	2900      	cmp	r1, #0
     e2c:	f000 80c3 	beq.w	fb6 <_printf_i+0x1b0>
     e30:	2958      	cmp	r1, #88	; 0x58
     e32:	f000 8091 	beq.w	f58 <_printf_i+0x152>
     e36:	f104 0542 	add.w	r5, r4, #66	; 0x42
     e3a:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
     e3e:	e035      	b.n	eac <_printf_i+0xa6>
     e40:	2964      	cmp	r1, #100	; 0x64
     e42:	d001      	beq.n	e48 <_printf_i+0x42>
     e44:	2969      	cmp	r1, #105	; 0x69
     e46:	d1f6      	bne.n	e36 <_printf_i+0x30>
     e48:	6825      	ldr	r5, [r4, #0]
     e4a:	681a      	ldr	r2, [r3, #0]
     e4c:	f015 0f80 	tst.w	r5, #128	; 0x80
     e50:	f102 0104 	add.w	r1, r2, #4
     e54:	d02c      	beq.n	eb0 <_printf_i+0xaa>
     e56:	6812      	ldr	r2, [r2, #0]
     e58:	6019      	str	r1, [r3, #0]
     e5a:	2a00      	cmp	r2, #0
     e5c:	da03      	bge.n	e66 <_printf_i+0x60>
     e5e:	232d      	movs	r3, #45	; 0x2d
     e60:	4252      	negs	r2, r2
     e62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
     e66:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 1028 <CONFIG_HEAP_MEM_POOL_SIZE+0x28>
     e6a:	230a      	movs	r3, #10
     e6c:	e03f      	b.n	eee <_printf_i+0xe8>
     e6e:	2973      	cmp	r1, #115	; 0x73
     e70:	f000 80a5 	beq.w	fbe <_printf_i+0x1b8>
     e74:	d808      	bhi.n	e88 <_printf_i+0x82>
     e76:	296f      	cmp	r1, #111	; 0x6f
     e78:	d021      	beq.n	ebe <_printf_i+0xb8>
     e7a:	2970      	cmp	r1, #112	; 0x70
     e7c:	d1db      	bne.n	e36 <_printf_i+0x30>
     e7e:	6822      	ldr	r2, [r4, #0]
     e80:	f042 0220 	orr.w	r2, r2, #32
     e84:	6022      	str	r2, [r4, #0]
     e86:	e003      	b.n	e90 <_printf_i+0x8a>
     e88:	2975      	cmp	r1, #117	; 0x75
     e8a:	d018      	beq.n	ebe <_printf_i+0xb8>
     e8c:	2978      	cmp	r1, #120	; 0x78
     e8e:	d1d2      	bne.n	e36 <_printf_i+0x30>
     e90:	2278      	movs	r2, #120	; 0x78
     e92:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
     e96:	f8df c194 	ldr.w	ip, [pc, #404]	; 102c <CONFIG_HEAP_MEM_POOL_SIZE+0x2c>
     e9a:	e061      	b.n	f60 <_printf_i+0x15a>
     e9c:	681a      	ldr	r2, [r3, #0]
     e9e:	1d11      	adds	r1, r2, #4
     ea0:	6019      	str	r1, [r3, #0]
     ea2:	6813      	ldr	r3, [r2, #0]
     ea4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
     ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
     eac:	2301      	movs	r3, #1
     eae:	e093      	b.n	fd8 <_printf_i+0x1d2>
     eb0:	6812      	ldr	r2, [r2, #0]
     eb2:	6019      	str	r1, [r3, #0]
     eb4:	f015 0f40 	tst.w	r5, #64	; 0x40
     eb8:	bf18      	it	ne
     eba:	b212      	sxthne	r2, r2
     ebc:	e7cd      	b.n	e5a <_printf_i+0x54>
     ebe:	f8d4 c000 	ldr.w	ip, [r4]
     ec2:	681a      	ldr	r2, [r3, #0]
     ec4:	f01c 0f80 	tst.w	ip, #128	; 0x80
     ec8:	f102 0504 	add.w	r5, r2, #4
     ecc:	601d      	str	r5, [r3, #0]
     ece:	d001      	beq.n	ed4 <_printf_i+0xce>
     ed0:	6812      	ldr	r2, [r2, #0]
     ed2:	e003      	b.n	edc <_printf_i+0xd6>
     ed4:	f01c 0f40 	tst.w	ip, #64	; 0x40
     ed8:	d0fa      	beq.n	ed0 <_printf_i+0xca>
     eda:	8812      	ldrh	r2, [r2, #0]
     edc:	f8df c148 	ldr.w	ip, [pc, #328]	; 1028 <CONFIG_HEAP_MEM_POOL_SIZE+0x28>
     ee0:	296f      	cmp	r1, #111	; 0x6f
     ee2:	bf0c      	ite	eq
     ee4:	2308      	moveq	r3, #8
     ee6:	230a      	movne	r3, #10
     ee8:	2100      	movs	r1, #0
     eea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
     eee:	6865      	ldr	r5, [r4, #4]
     ef0:	60a5      	str	r5, [r4, #8]
     ef2:	2d00      	cmp	r5, #0
     ef4:	bfa2      	ittt	ge
     ef6:	6821      	ldrge	r1, [r4, #0]
     ef8:	f021 0104 	bicge.w	r1, r1, #4
     efc:	6021      	strge	r1, [r4, #0]
     efe:	b90a      	cbnz	r2, f04 <_printf_i+0xfe>
     f00:	2d00      	cmp	r5, #0
     f02:	d046      	beq.n	f92 <_printf_i+0x18c>
     f04:	4605      	mov	r5, r0
     f06:	fbb2 f1f3 	udiv	r1, r2, r3
     f0a:	fb03 2e11 	mls	lr, r3, r1, r2
     f0e:	4293      	cmp	r3, r2
     f10:	f81c e00e 	ldrb.w	lr, [ip, lr]
     f14:	f805 ed01 	strb.w	lr, [r5, #-1]!
     f18:	d939      	bls.n	f8e <_printf_i+0x188>
     f1a:	2b08      	cmp	r3, #8
     f1c:	d10b      	bne.n	f36 <_printf_i+0x130>
     f1e:	6823      	ldr	r3, [r4, #0]
     f20:	07da      	lsls	r2, r3, #31
     f22:	d508      	bpl.n	f36 <_printf_i+0x130>
     f24:	6923      	ldr	r3, [r4, #16]
     f26:	6862      	ldr	r2, [r4, #4]
     f28:	429a      	cmp	r2, r3
     f2a:	bfde      	ittt	le
     f2c:	2330      	movle	r3, #48	; 0x30
     f2e:	f805 3c01 	strble.w	r3, [r5, #-1]
     f32:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
     f36:	1b40      	subs	r0, r0, r5
     f38:	6120      	str	r0, [r4, #16]
     f3a:	f8cd 8000 	str.w	r8, [sp]
     f3e:	463b      	mov	r3, r7
     f40:	aa03      	add	r2, sp, #12
     f42:	4621      	mov	r1, r4
     f44:	4630      	mov	r0, r6
     f46:	f7ff fee9 	bl	d1c <_printf_common>
     f4a:	3001      	adds	r0, #1
     f4c:	d149      	bne.n	fe2 <_printf_i+0x1dc>
     f4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     f52:	b005      	add	sp, #20
     f54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f58:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1028 <CONFIG_HEAP_MEM_POOL_SIZE+0x28>
     f5c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
     f60:	681d      	ldr	r5, [r3, #0]
     f62:	6821      	ldr	r1, [r4, #0]
     f64:	f855 2b04 	ldr.w	r2, [r5], #4
     f68:	601d      	str	r5, [r3, #0]
     f6a:	060d      	lsls	r5, r1, #24
     f6c:	d50b      	bpl.n	f86 <_printf_i+0x180>
     f6e:	07cd      	lsls	r5, r1, #31
     f70:	bf44      	itt	mi
     f72:	f041 0120 	orrmi.w	r1, r1, #32
     f76:	6021      	strmi	r1, [r4, #0]
     f78:	b91a      	cbnz	r2, f82 <_printf_i+0x17c>
     f7a:	6823      	ldr	r3, [r4, #0]
     f7c:	f023 0320 	bic.w	r3, r3, #32
     f80:	6023      	str	r3, [r4, #0]
     f82:	2310      	movs	r3, #16
     f84:	e7b0      	b.n	ee8 <_printf_i+0xe2>
     f86:	064b      	lsls	r3, r1, #25
     f88:	bf48      	it	mi
     f8a:	b292      	uxthmi	r2, r2
     f8c:	e7ef      	b.n	f6e <_printf_i+0x168>
     f8e:	460a      	mov	r2, r1
     f90:	e7b9      	b.n	f06 <_printf_i+0x100>
     f92:	4605      	mov	r5, r0
     f94:	e7c1      	b.n	f1a <_printf_i+0x114>
     f96:	681a      	ldr	r2, [r3, #0]
     f98:	f8d4 c000 	ldr.w	ip, [r4]
     f9c:	6961      	ldr	r1, [r4, #20]
     f9e:	1d15      	adds	r5, r2, #4
     fa0:	601d      	str	r5, [r3, #0]
     fa2:	f01c 0f80 	tst.w	ip, #128	; 0x80
     fa6:	6813      	ldr	r3, [r2, #0]
     fa8:	d001      	beq.n	fae <_printf_i+0x1a8>
     faa:	6019      	str	r1, [r3, #0]
     fac:	e003      	b.n	fb6 <_printf_i+0x1b0>
     fae:	f01c 0f40 	tst.w	ip, #64	; 0x40
     fb2:	d0fa      	beq.n	faa <_printf_i+0x1a4>
     fb4:	8019      	strh	r1, [r3, #0]
     fb6:	2300      	movs	r3, #0
     fb8:	6123      	str	r3, [r4, #16]
     fba:	4605      	mov	r5, r0
     fbc:	e7bd      	b.n	f3a <_printf_i+0x134>
     fbe:	681a      	ldr	r2, [r3, #0]
     fc0:	1d11      	adds	r1, r2, #4
     fc2:	6019      	str	r1, [r3, #0]
     fc4:	6815      	ldr	r5, [r2, #0]
     fc6:	6862      	ldr	r2, [r4, #4]
     fc8:	2100      	movs	r1, #0
     fca:	4628      	mov	r0, r5
     fcc:	f7ff f998 	bl	300 <memchr>
     fd0:	b108      	cbz	r0, fd6 <_printf_i+0x1d0>
     fd2:	1b40      	subs	r0, r0, r5
     fd4:	6060      	str	r0, [r4, #4]
     fd6:	6863      	ldr	r3, [r4, #4]
     fd8:	6123      	str	r3, [r4, #16]
     fda:	2300      	movs	r3, #0
     fdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
     fe0:	e7ab      	b.n	f3a <_printf_i+0x134>
     fe2:	6923      	ldr	r3, [r4, #16]
     fe4:	462a      	mov	r2, r5
     fe6:	4639      	mov	r1, r7
     fe8:	4630      	mov	r0, r6
     fea:	47c0      	blx	r8
     fec:	3001      	adds	r0, #1
     fee:	d0ae      	beq.n	f4e <_printf_i+0x148>
     ff0:	6823      	ldr	r3, [r4, #0]
     ff2:	079b      	lsls	r3, r3, #30
     ff4:	d413      	bmi.n	101e <CONFIG_HEAP_MEM_POOL_SIZE+0x1e>
     ff6:	68e0      	ldr	r0, [r4, #12]
     ff8:	9b03      	ldr	r3, [sp, #12]
     ffa:	4298      	cmp	r0, r3
     ffc:	bfb8      	it	lt
     ffe:	4618      	movlt	r0, r3
    1000:	e7a7      	b.n	f52 <_printf_i+0x14c>
    1002:	2301      	movs	r3, #1
    1004:	464a      	mov	r2, r9
    1006:	4639      	mov	r1, r7
    1008:	4630      	mov	r0, r6
    100a:	47c0      	blx	r8
    100c:	3001      	adds	r0, #1
    100e:	d09e      	beq.n	f4e <_printf_i+0x148>
    1010:	3501      	adds	r5, #1
    1012:	68e3      	ldr	r3, [r4, #12]
    1014:	9a03      	ldr	r2, [sp, #12]
    1016:	1a9b      	subs	r3, r3, r2
    1018:	42ab      	cmp	r3, r5
    101a:	dcf2      	bgt.n	1002 <CONFIG_HEAP_MEM_POOL_SIZE+0x2>
    101c:	e7eb      	b.n	ff6 <_printf_i+0x1f0>
    101e:	2500      	movs	r5, #0
    1020:	f104 0919 	add.w	r9, r4, #25
    1024:	e7f5      	b.n	1012 <CONFIG_HEAP_MEM_POOL_SIZE+0x12>
    1026:	bf00      	nop
    1028:	0001c678 	.word	0x0001c678
    102c:	0001c689 	.word	0x0001c689

00001030 <_sbrk_r>:
    1030:	b538      	push	{r3, r4, r5, lr}
    1032:	4c06      	ldr	r4, [pc, #24]	; (104c <_sbrk_r+0x1c>)
    1034:	2300      	movs	r3, #0
    1036:	4605      	mov	r5, r0
    1038:	4608      	mov	r0, r1
    103a:	6023      	str	r3, [r4, #0]
    103c:	f00a fbe0 	bl	b800 <_sbrk>
    1040:	1c43      	adds	r3, r0, #1
    1042:	d102      	bne.n	104a <_sbrk_r+0x1a>
    1044:	6823      	ldr	r3, [r4, #0]
    1046:	b103      	cbz	r3, 104a <_sbrk_r+0x1a>
    1048:	602b      	str	r3, [r5, #0]
    104a:	bd38      	pop	{r3, r4, r5, pc}
    104c:	2000229c 	.word	0x2000229c

00001050 <_sniprintf_r>:
    1050:	b408      	push	{r3}
    1052:	b530      	push	{r4, r5, lr}
    1054:	1e14      	subs	r4, r2, #0
    1056:	b09a      	sub	sp, #104	; 0x68
    1058:	4605      	mov	r5, r0
    105a:	da08      	bge.n	106e <_sniprintf_r+0x1e>
    105c:	238b      	movs	r3, #139	; 0x8b
    105e:	6003      	str	r3, [r0, #0]
    1060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1064:	b01a      	add	sp, #104	; 0x68
    1066:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    106a:	b001      	add	sp, #4
    106c:	4770      	bx	lr
    106e:	f44f 7302 	mov.w	r3, #520	; 0x208
    1072:	f8ad 3010 	strh.w	r3, [sp, #16]
    1076:	bf14      	ite	ne
    1078:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
    107c:	4623      	moveq	r3, r4
    107e:	9303      	str	r3, [sp, #12]
    1080:	9306      	str	r3, [sp, #24]
    1082:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1086:	9101      	str	r1, [sp, #4]
    1088:	9105      	str	r1, [sp, #20]
    108a:	f8ad 3012 	strh.w	r3, [sp, #18]
    108e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    1090:	ab1e      	add	r3, sp, #120	; 0x78
    1092:	a901      	add	r1, sp, #4
    1094:	9300      	str	r3, [sp, #0]
    1096:	f000 fdf6 	bl	1c86 <_svfiprintf_r>
    109a:	1c43      	adds	r3, r0, #1
    109c:	bfbc      	itt	lt
    109e:	238b      	movlt	r3, #139	; 0x8b
    10a0:	602b      	strlt	r3, [r5, #0]
    10a2:	2c00      	cmp	r4, #0
    10a4:	d0de      	beq.n	1064 <_sniprintf_r+0x14>
    10a6:	9b01      	ldr	r3, [sp, #4]
    10a8:	2200      	movs	r2, #0
    10aa:	701a      	strb	r2, [r3, #0]
    10ac:	e7da      	b.n	1064 <_sniprintf_r+0x14>

000010ae <sniprintf>:
    10ae:	b40c      	push	{r2, r3}
    10b0:	b530      	push	{r4, r5, lr}
    10b2:	4b17      	ldr	r3, [pc, #92]	; (1110 <sniprintf+0x62>)
    10b4:	1e0c      	subs	r4, r1, #0
    10b6:	b09b      	sub	sp, #108	; 0x6c
    10b8:	681d      	ldr	r5, [r3, #0]
    10ba:	da08      	bge.n	10ce <sniprintf+0x20>
    10bc:	238b      	movs	r3, #139	; 0x8b
    10be:	602b      	str	r3, [r5, #0]
    10c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    10c4:	b01b      	add	sp, #108	; 0x6c
    10c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    10ca:	b002      	add	sp, #8
    10cc:	4770      	bx	lr
    10ce:	f44f 7302 	mov.w	r3, #520	; 0x208
    10d2:	f8ad 3010 	strh.w	r3, [sp, #16]
    10d6:	bf14      	ite	ne
    10d8:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
    10dc:	4623      	moveq	r3, r4
    10de:	9303      	str	r3, [sp, #12]
    10e0:	9306      	str	r3, [sp, #24]
    10e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    10e6:	9001      	str	r0, [sp, #4]
    10e8:	9005      	str	r0, [sp, #20]
    10ea:	f8ad 3012 	strh.w	r3, [sp, #18]
    10ee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    10f0:	ab1f      	add	r3, sp, #124	; 0x7c
    10f2:	a901      	add	r1, sp, #4
    10f4:	4628      	mov	r0, r5
    10f6:	9300      	str	r3, [sp, #0]
    10f8:	f000 fdc5 	bl	1c86 <_svfiprintf_r>
    10fc:	1c43      	adds	r3, r0, #1
    10fe:	bfbc      	itt	lt
    1100:	238b      	movlt	r3, #139	; 0x8b
    1102:	602b      	strlt	r3, [r5, #0]
    1104:	2c00      	cmp	r4, #0
    1106:	d0dd      	beq.n	10c4 <sniprintf+0x16>
    1108:	9b01      	ldr	r3, [sp, #4]
    110a:	2200      	movs	r2, #0
    110c:	701a      	strb	r2, [r3, #0]
    110e:	e7d9      	b.n	10c4 <sniprintf+0x16>
    1110:	20002000 	.word	0x20002000

00001114 <_strtol_l.isra.0>:
    1114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1118:	4f39      	ldr	r7, [pc, #228]	; (1200 <_strtol_l.isra.0+0xec>)
    111a:	4686      	mov	lr, r0
    111c:	4608      	mov	r0, r1
    111e:	4605      	mov	r5, r0
    1120:	f815 4b01 	ldrb.w	r4, [r5], #1
    1124:	5de6      	ldrb	r6, [r4, r7]
    1126:	f016 0608 	ands.w	r6, r6, #8
    112a:	d134      	bne.n	1196 <_strtol_l.isra.0+0x82>
    112c:	2c2d      	cmp	r4, #45	; 0x2d
    112e:	d134      	bne.n	119a <_strtol_l.isra.0+0x86>
    1130:	782c      	ldrb	r4, [r5, #0]
    1132:	f04f 0801 	mov.w	r8, #1
    1136:	1c85      	adds	r5, r0, #2
    1138:	2b00      	cmp	r3, #0
    113a:	d05c      	beq.n	11f6 <_strtol_l.isra.0+0xe2>
    113c:	2b10      	cmp	r3, #16
    113e:	d109      	bne.n	1154 <_strtol_l.isra.0+0x40>
    1140:	2c30      	cmp	r4, #48	; 0x30
    1142:	d107      	bne.n	1154 <_strtol_l.isra.0+0x40>
    1144:	7828      	ldrb	r0, [r5, #0]
    1146:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    114a:	2858      	cmp	r0, #88	; 0x58
    114c:	d14e      	bne.n	11ec <_strtol_l.isra.0+0xd8>
    114e:	786c      	ldrb	r4, [r5, #1]
    1150:	2310      	movs	r3, #16
    1152:	3502      	adds	r5, #2
    1154:	f1b8 0f00 	cmp.w	r8, #0
    1158:	bf14      	ite	ne
    115a:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
    115e:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
    1162:	2700      	movs	r7, #0
    1164:	fbbc f9f3 	udiv	r9, ip, r3
    1168:	4638      	mov	r0, r7
    116a:	fb03 ca19 	mls	sl, r3, r9, ip
    116e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    1172:	2e09      	cmp	r6, #9
    1174:	d818      	bhi.n	11a8 <_strtol_l.isra.0+0x94>
    1176:	4634      	mov	r4, r6
    1178:	42a3      	cmp	r3, r4
    117a:	dd24      	ble.n	11c6 <_strtol_l.isra.0+0xb2>
    117c:	1c7e      	adds	r6, r7, #1
    117e:	d007      	beq.n	1190 <_strtol_l.isra.0+0x7c>
    1180:	4581      	cmp	r9, r0
    1182:	d31d      	bcc.n	11c0 <_strtol_l.isra.0+0xac>
    1184:	d101      	bne.n	118a <_strtol_l.isra.0+0x76>
    1186:	45a2      	cmp	sl, r4
    1188:	db1a      	blt.n	11c0 <_strtol_l.isra.0+0xac>
    118a:	fb00 4003 	mla	r0, r0, r3, r4
    118e:	2701      	movs	r7, #1
    1190:	f815 4b01 	ldrb.w	r4, [r5], #1
    1194:	e7eb      	b.n	116e <_strtol_l.isra.0+0x5a>
    1196:	4628      	mov	r0, r5
    1198:	e7c1      	b.n	111e <_strtol_l.isra.0+0xa>
    119a:	2c2b      	cmp	r4, #43	; 0x2b
    119c:	bf08      	it	eq
    119e:	782c      	ldrbeq	r4, [r5, #0]
    11a0:	46b0      	mov	r8, r6
    11a2:	bf08      	it	eq
    11a4:	1c85      	addeq	r5, r0, #2
    11a6:	e7c7      	b.n	1138 <_strtol_l.isra.0+0x24>
    11a8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
    11ac:	2e19      	cmp	r6, #25
    11ae:	d801      	bhi.n	11b4 <_strtol_l.isra.0+0xa0>
    11b0:	3c37      	subs	r4, #55	; 0x37
    11b2:	e7e1      	b.n	1178 <_strtol_l.isra.0+0x64>
    11b4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
    11b8:	2e19      	cmp	r6, #25
    11ba:	d804      	bhi.n	11c6 <_strtol_l.isra.0+0xb2>
    11bc:	3c57      	subs	r4, #87	; 0x57
    11be:	e7db      	b.n	1178 <_strtol_l.isra.0+0x64>
    11c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    11c4:	e7e4      	b.n	1190 <_strtol_l.isra.0+0x7c>
    11c6:	1c7b      	adds	r3, r7, #1
    11c8:	d106      	bne.n	11d8 <_strtol_l.isra.0+0xc4>
    11ca:	2322      	movs	r3, #34	; 0x22
    11cc:	f8ce 3000 	str.w	r3, [lr]
    11d0:	4660      	mov	r0, ip
    11d2:	b942      	cbnz	r2, 11e6 <_strtol_l.isra.0+0xd2>
    11d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    11d8:	f1b8 0f00 	cmp.w	r8, #0
    11dc:	d000      	beq.n	11e0 <_strtol_l.isra.0+0xcc>
    11de:	4240      	negs	r0, r0
    11e0:	2a00      	cmp	r2, #0
    11e2:	d0f7      	beq.n	11d4 <_strtol_l.isra.0+0xc0>
    11e4:	b107      	cbz	r7, 11e8 <_strtol_l.isra.0+0xd4>
    11e6:	1e69      	subs	r1, r5, #1
    11e8:	6011      	str	r1, [r2, #0]
    11ea:	e7f3      	b.n	11d4 <_strtol_l.isra.0+0xc0>
    11ec:	2430      	movs	r4, #48	; 0x30
    11ee:	2b00      	cmp	r3, #0
    11f0:	d1b0      	bne.n	1154 <_strtol_l.isra.0+0x40>
    11f2:	2308      	movs	r3, #8
    11f4:	e7ae      	b.n	1154 <_strtol_l.isra.0+0x40>
    11f6:	2c30      	cmp	r4, #48	; 0x30
    11f8:	d0a4      	beq.n	1144 <_strtol_l.isra.0+0x30>
    11fa:	230a      	movs	r3, #10
    11fc:	e7aa      	b.n	1154 <_strtol_l.isra.0+0x40>
    11fe:	bf00      	nop
    1200:	0001904d 	.word	0x0001904d

00001204 <_strtol_r>:
    1204:	e786      	b.n	1114 <_strtol_l.isra.0>

00001206 <strtol_l>:
    1206:	4613      	mov	r3, r2
    1208:	460a      	mov	r2, r1
    120a:	4601      	mov	r1, r0
    120c:	4801      	ldr	r0, [pc, #4]	; (1214 <strtol_l+0xe>)
    120e:	6800      	ldr	r0, [r0, #0]
    1210:	e780      	b.n	1114 <_strtol_l.isra.0>
    1212:	bf00      	nop
    1214:	20002000 	.word	0x20002000

00001218 <strtol>:
    1218:	4613      	mov	r3, r2
    121a:	460a      	mov	r2, r1
    121c:	4601      	mov	r1, r0
    121e:	4801      	ldr	r0, [pc, #4]	; (1224 <strtol+0xc>)
    1220:	6800      	ldr	r0, [r0, #0]
    1222:	e777      	b.n	1114 <_strtol_l.isra.0>
    1224:	20002000 	.word	0x20002000

00001228 <_vsniprintf_r>:
    1228:	b530      	push	{r4, r5, lr}
    122a:	1e14      	subs	r4, r2, #0
    122c:	4605      	mov	r5, r0
    122e:	b09b      	sub	sp, #108	; 0x6c
    1230:	4618      	mov	r0, r3
    1232:	da05      	bge.n	1240 <_vsniprintf_r+0x18>
    1234:	238b      	movs	r3, #139	; 0x8b
    1236:	602b      	str	r3, [r5, #0]
    1238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    123c:	b01b      	add	sp, #108	; 0x6c
    123e:	bd30      	pop	{r4, r5, pc}
    1240:	f44f 7302 	mov.w	r3, #520	; 0x208
    1244:	f8ad 3010 	strh.w	r3, [sp, #16]
    1248:	bf14      	ite	ne
    124a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
    124e:	4623      	moveq	r3, r4
    1250:	9303      	str	r3, [sp, #12]
    1252:	9306      	str	r3, [sp, #24]
    1254:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1258:	9101      	str	r1, [sp, #4]
    125a:	9105      	str	r1, [sp, #20]
    125c:	f8ad 3012 	strh.w	r3, [sp, #18]
    1260:	4602      	mov	r2, r0
    1262:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1264:	a901      	add	r1, sp, #4
    1266:	4628      	mov	r0, r5
    1268:	f000 fd0d 	bl	1c86 <_svfiprintf_r>
    126c:	1c43      	adds	r3, r0, #1
    126e:	bfbc      	itt	lt
    1270:	238b      	movlt	r3, #139	; 0x8b
    1272:	602b      	strlt	r3, [r5, #0]
    1274:	2c00      	cmp	r4, #0
    1276:	d0e1      	beq.n	123c <_vsniprintf_r+0x14>
    1278:	9b01      	ldr	r3, [sp, #4]
    127a:	2200      	movs	r2, #0
    127c:	701a      	strb	r2, [r3, #0]
    127e:	e7dd      	b.n	123c <_vsniprintf_r+0x14>

00001280 <vsniprintf>:
    1280:	b507      	push	{r0, r1, r2, lr}
    1282:	9300      	str	r3, [sp, #0]
    1284:	4613      	mov	r3, r2
    1286:	460a      	mov	r2, r1
    1288:	4601      	mov	r1, r0
    128a:	4803      	ldr	r0, [pc, #12]	; (1298 <vsniprintf+0x18>)
    128c:	6800      	ldr	r0, [r0, #0]
    128e:	f7ff ffcb 	bl	1228 <_vsniprintf_r>
    1292:	b003      	add	sp, #12
    1294:	f85d fb04 	ldr.w	pc, [sp], #4
    1298:	20002000 	.word	0x20002000

0000129c <__swbuf_r>:
    129c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    129e:	460d      	mov	r5, r1
    12a0:	4614      	mov	r4, r2
    12a2:	4606      	mov	r6, r0
    12a4:	b118      	cbz	r0, 12ae <__swbuf_r+0x12>
    12a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
    12a8:	b90b      	cbnz	r3, 12ae <__swbuf_r+0x12>
    12aa:	f000 f9b1 	bl	1610 <__sinit>
    12ae:	69a3      	ldr	r3, [r4, #24]
    12b0:	60a3      	str	r3, [r4, #8]
    12b2:	89a3      	ldrh	r3, [r4, #12]
    12b4:	071a      	lsls	r2, r3, #28
    12b6:	d525      	bpl.n	1304 <__swbuf_r+0x68>
    12b8:	6923      	ldr	r3, [r4, #16]
    12ba:	b31b      	cbz	r3, 1304 <__swbuf_r+0x68>
    12bc:	6923      	ldr	r3, [r4, #16]
    12be:	6820      	ldr	r0, [r4, #0]
    12c0:	1ac0      	subs	r0, r0, r3
    12c2:	6963      	ldr	r3, [r4, #20]
    12c4:	b2ed      	uxtb	r5, r5
    12c6:	4283      	cmp	r3, r0
    12c8:	462f      	mov	r7, r5
    12ca:	dc04      	bgt.n	12d6 <__swbuf_r+0x3a>
    12cc:	4621      	mov	r1, r4
    12ce:	4630      	mov	r0, r6
    12d0:	f000 f934 	bl	153c <_fflush_r>
    12d4:	b9e0      	cbnz	r0, 1310 <__swbuf_r+0x74>
    12d6:	68a3      	ldr	r3, [r4, #8]
    12d8:	3b01      	subs	r3, #1
    12da:	60a3      	str	r3, [r4, #8]
    12dc:	6823      	ldr	r3, [r4, #0]
    12de:	1c5a      	adds	r2, r3, #1
    12e0:	6022      	str	r2, [r4, #0]
    12e2:	701d      	strb	r5, [r3, #0]
    12e4:	6963      	ldr	r3, [r4, #20]
    12e6:	3001      	adds	r0, #1
    12e8:	4283      	cmp	r3, r0
    12ea:	d004      	beq.n	12f6 <__swbuf_r+0x5a>
    12ec:	89a3      	ldrh	r3, [r4, #12]
    12ee:	07db      	lsls	r3, r3, #31
    12f0:	d506      	bpl.n	1300 <__swbuf_r+0x64>
    12f2:	2d0a      	cmp	r5, #10
    12f4:	d104      	bne.n	1300 <__swbuf_r+0x64>
    12f6:	4621      	mov	r1, r4
    12f8:	4630      	mov	r0, r6
    12fa:	f000 f91f 	bl	153c <_fflush_r>
    12fe:	b938      	cbnz	r0, 1310 <__swbuf_r+0x74>
    1300:	4638      	mov	r0, r7
    1302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1304:	4621      	mov	r1, r4
    1306:	4630      	mov	r0, r6
    1308:	f000 f80e 	bl	1328 <__swsetup_r>
    130c:	2800      	cmp	r0, #0
    130e:	d0d5      	beq.n	12bc <__swbuf_r+0x20>
    1310:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    1314:	e7f4      	b.n	1300 <__swbuf_r+0x64>

00001316 <__swbuf>:
    1316:	4b03      	ldr	r3, [pc, #12]	; (1324 <__swbuf+0xe>)
    1318:	460a      	mov	r2, r1
    131a:	4601      	mov	r1, r0
    131c:	6818      	ldr	r0, [r3, #0]
    131e:	f7ff bfbd 	b.w	129c <__swbuf_r>
    1322:	bf00      	nop
    1324:	20002000 	.word	0x20002000

00001328 <__swsetup_r>:
    1328:	b538      	push	{r3, r4, r5, lr}
    132a:	4b2a      	ldr	r3, [pc, #168]	; (13d4 <__swsetup_r+0xac>)
    132c:	4605      	mov	r5, r0
    132e:	6818      	ldr	r0, [r3, #0]
    1330:	460c      	mov	r4, r1
    1332:	b118      	cbz	r0, 133c <__swsetup_r+0x14>
    1334:	6b83      	ldr	r3, [r0, #56]	; 0x38
    1336:	b90b      	cbnz	r3, 133c <__swsetup_r+0x14>
    1338:	f000 f96a 	bl	1610 <__sinit>
    133c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1340:	b29a      	uxth	r2, r3
    1342:	0711      	lsls	r1, r2, #28
    1344:	d422      	bmi.n	138c <__swsetup_r+0x64>
    1346:	06d0      	lsls	r0, r2, #27
    1348:	d407      	bmi.n	135a <__swsetup_r+0x32>
    134a:	2209      	movs	r2, #9
    134c:	602a      	str	r2, [r5, #0]
    134e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1352:	81a3      	strh	r3, [r4, #12]
    1354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1358:	e034      	b.n	13c4 <__swsetup_r+0x9c>
    135a:	0751      	lsls	r1, r2, #29
    135c:	d512      	bpl.n	1384 <__swsetup_r+0x5c>
    135e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    1360:	b141      	cbz	r1, 1374 <__swsetup_r+0x4c>
    1362:	f104 0340 	add.w	r3, r4, #64	; 0x40
    1366:	4299      	cmp	r1, r3
    1368:	d002      	beq.n	1370 <__swsetup_r+0x48>
    136a:	4628      	mov	r0, r5
    136c:	f000 fb6a 	bl	1a44 <_free_r>
    1370:	2300      	movs	r3, #0
    1372:	6323      	str	r3, [r4, #48]	; 0x30
    1374:	89a3      	ldrh	r3, [r4, #12]
    1376:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    137a:	81a3      	strh	r3, [r4, #12]
    137c:	2300      	movs	r3, #0
    137e:	6063      	str	r3, [r4, #4]
    1380:	6923      	ldr	r3, [r4, #16]
    1382:	6023      	str	r3, [r4, #0]
    1384:	89a3      	ldrh	r3, [r4, #12]
    1386:	f043 0308 	orr.w	r3, r3, #8
    138a:	81a3      	strh	r3, [r4, #12]
    138c:	6923      	ldr	r3, [r4, #16]
    138e:	b94b      	cbnz	r3, 13a4 <__swsetup_r+0x7c>
    1390:	89a3      	ldrh	r3, [r4, #12]
    1392:	f403 7320 	and.w	r3, r3, #640	; 0x280
    1396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    139a:	d003      	beq.n	13a4 <__swsetup_r+0x7c>
    139c:	4621      	mov	r1, r4
    139e:	4628      	mov	r0, r5
    13a0:	f000 fb0f 	bl	19c2 <__smakebuf_r>
    13a4:	89a2      	ldrh	r2, [r4, #12]
    13a6:	f012 0301 	ands.w	r3, r2, #1
    13aa:	d00c      	beq.n	13c6 <__swsetup_r+0x9e>
    13ac:	2300      	movs	r3, #0
    13ae:	60a3      	str	r3, [r4, #8]
    13b0:	6963      	ldr	r3, [r4, #20]
    13b2:	425b      	negs	r3, r3
    13b4:	61a3      	str	r3, [r4, #24]
    13b6:	6923      	ldr	r3, [r4, #16]
    13b8:	b953      	cbnz	r3, 13d0 <__swsetup_r+0xa8>
    13ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    13be:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    13c2:	d1c4      	bne.n	134e <__swsetup_r+0x26>
    13c4:	bd38      	pop	{r3, r4, r5, pc}
    13c6:	0792      	lsls	r2, r2, #30
    13c8:	bf58      	it	pl
    13ca:	6963      	ldrpl	r3, [r4, #20]
    13cc:	60a3      	str	r3, [r4, #8]
    13ce:	e7f2      	b.n	13b6 <__swsetup_r+0x8e>
    13d0:	2000      	movs	r0, #0
    13d2:	e7f7      	b.n	13c4 <__swsetup_r+0x9c>
    13d4:	20002000 	.word	0x20002000

000013d8 <__chk_fail>:
    13d8:	b500      	push	{lr}
    13da:	4b10      	ldr	r3, [pc, #64]	; (141c <__chk_fail+0x44>)
    13dc:	b08d      	sub	sp, #52	; 0x34
    13de:	466a      	mov	r2, sp
    13e0:	f103 0628 	add.w	r6, r3, #40	; 0x28
    13e4:	4615      	mov	r5, r2
    13e6:	6818      	ldr	r0, [r3, #0]
    13e8:	6859      	ldr	r1, [r3, #4]
    13ea:	4614      	mov	r4, r2
    13ec:	c403      	stmia	r4!, {r0, r1}
    13ee:	3308      	adds	r3, #8
    13f0:	42b3      	cmp	r3, r6
    13f2:	4622      	mov	r2, r4
    13f4:	d1f7      	bne.n	13e6 <__chk_fail+0xe>
    13f6:	6818      	ldr	r0, [r3, #0]
    13f8:	889b      	ldrh	r3, [r3, #4]
    13fa:	80a3      	strh	r3, [r4, #4]
    13fc:	6020      	str	r0, [r4, #0]
    13fe:	4628      	mov	r0, r5
    1400:	f001 f816 	bl	2430 <strlen>
    1404:	4629      	mov	r1, r5
    1406:	4602      	mov	r2, r0
    1408:	2002      	movs	r0, #2
    140a:	f013 fdc8 	bl	14f9e <_write>
    140e:	2006      	movs	r0, #6
    1410:	f000 fdaf 	bl	1f72 <raise>
    1414:	207f      	movs	r0, #127	; 0x7f
    1416:	f00a f9eb 	bl	b7f0 <_exit>
    141a:	bf00      	nop
    141c:	0001c69a 	.word	0x0001c69a

00001420 <__sflush_r>:
    1420:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    1424:	b293      	uxth	r3, r2
    1426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    142a:	4605      	mov	r5, r0
    142c:	0718      	lsls	r0, r3, #28
    142e:	460c      	mov	r4, r1
    1430:	d45f      	bmi.n	14f2 <__sflush_r+0xd2>
    1432:	684b      	ldr	r3, [r1, #4]
    1434:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    1438:	2b00      	cmp	r3, #0
    143a:	818a      	strh	r2, [r1, #12]
    143c:	dc05      	bgt.n	144a <__sflush_r+0x2a>
    143e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    1440:	2b00      	cmp	r3, #0
    1442:	dc02      	bgt.n	144a <__sflush_r+0x2a>
    1444:	2000      	movs	r0, #0
    1446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    144a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    144c:	2e00      	cmp	r6, #0
    144e:	d0f9      	beq.n	1444 <__sflush_r+0x24>
    1450:	2300      	movs	r3, #0
    1452:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    1456:	682f      	ldr	r7, [r5, #0]
    1458:	602b      	str	r3, [r5, #0]
    145a:	d036      	beq.n	14ca <__sflush_r+0xaa>
    145c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    145e:	89a3      	ldrh	r3, [r4, #12]
    1460:	075a      	lsls	r2, r3, #29
    1462:	d505      	bpl.n	1470 <__sflush_r+0x50>
    1464:	6863      	ldr	r3, [r4, #4]
    1466:	1ac0      	subs	r0, r0, r3
    1468:	6b23      	ldr	r3, [r4, #48]	; 0x30
    146a:	b10b      	cbz	r3, 1470 <__sflush_r+0x50>
    146c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    146e:	1ac0      	subs	r0, r0, r3
    1470:	2300      	movs	r3, #0
    1472:	4602      	mov	r2, r0
    1474:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1476:	69e1      	ldr	r1, [r4, #28]
    1478:	4628      	mov	r0, r5
    147a:	47b0      	blx	r6
    147c:	1c43      	adds	r3, r0, #1
    147e:	89a3      	ldrh	r3, [r4, #12]
    1480:	d106      	bne.n	1490 <__sflush_r+0x70>
    1482:	6829      	ldr	r1, [r5, #0]
    1484:	291d      	cmp	r1, #29
    1486:	d830      	bhi.n	14ea <__sflush_r+0xca>
    1488:	4a2b      	ldr	r2, [pc, #172]	; (1538 <__sflush_r+0x118>)
    148a:	40ca      	lsrs	r2, r1
    148c:	07d6      	lsls	r6, r2, #31
    148e:	d52c      	bpl.n	14ea <__sflush_r+0xca>
    1490:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1494:	b21b      	sxth	r3, r3
    1496:	2200      	movs	r2, #0
    1498:	6062      	str	r2, [r4, #4]
    149a:	04d9      	lsls	r1, r3, #19
    149c:	6922      	ldr	r2, [r4, #16]
    149e:	81a3      	strh	r3, [r4, #12]
    14a0:	6022      	str	r2, [r4, #0]
    14a2:	d504      	bpl.n	14ae <__sflush_r+0x8e>
    14a4:	1c42      	adds	r2, r0, #1
    14a6:	d101      	bne.n	14ac <__sflush_r+0x8c>
    14a8:	682b      	ldr	r3, [r5, #0]
    14aa:	b903      	cbnz	r3, 14ae <__sflush_r+0x8e>
    14ac:	6520      	str	r0, [r4, #80]	; 0x50
    14ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
    14b0:	602f      	str	r7, [r5, #0]
    14b2:	2900      	cmp	r1, #0
    14b4:	d0c6      	beq.n	1444 <__sflush_r+0x24>
    14b6:	f104 0340 	add.w	r3, r4, #64	; 0x40
    14ba:	4299      	cmp	r1, r3
    14bc:	d002      	beq.n	14c4 <__sflush_r+0xa4>
    14be:	4628      	mov	r0, r5
    14c0:	f000 fac0 	bl	1a44 <_free_r>
    14c4:	2000      	movs	r0, #0
    14c6:	6320      	str	r0, [r4, #48]	; 0x30
    14c8:	e7bd      	b.n	1446 <__sflush_r+0x26>
    14ca:	69e1      	ldr	r1, [r4, #28]
    14cc:	2301      	movs	r3, #1
    14ce:	4628      	mov	r0, r5
    14d0:	47b0      	blx	r6
    14d2:	1c41      	adds	r1, r0, #1
    14d4:	d1c3      	bne.n	145e <__sflush_r+0x3e>
    14d6:	682b      	ldr	r3, [r5, #0]
    14d8:	2b00      	cmp	r3, #0
    14da:	d0c0      	beq.n	145e <__sflush_r+0x3e>
    14dc:	2b1d      	cmp	r3, #29
    14de:	d001      	beq.n	14e4 <__sflush_r+0xc4>
    14e0:	2b16      	cmp	r3, #22
    14e2:	d101      	bne.n	14e8 <__sflush_r+0xc8>
    14e4:	602f      	str	r7, [r5, #0]
    14e6:	e7ad      	b.n	1444 <__sflush_r+0x24>
    14e8:	89a3      	ldrh	r3, [r4, #12]
    14ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    14ee:	81a3      	strh	r3, [r4, #12]
    14f0:	e7a9      	b.n	1446 <__sflush_r+0x26>
    14f2:	690f      	ldr	r7, [r1, #16]
    14f4:	2f00      	cmp	r7, #0
    14f6:	d0a5      	beq.n	1444 <__sflush_r+0x24>
    14f8:	079b      	lsls	r3, r3, #30
    14fa:	680e      	ldr	r6, [r1, #0]
    14fc:	bf08      	it	eq
    14fe:	694b      	ldreq	r3, [r1, #20]
    1500:	600f      	str	r7, [r1, #0]
    1502:	bf18      	it	ne
    1504:	2300      	movne	r3, #0
    1506:	eba6 0807 	sub.w	r8, r6, r7
    150a:	608b      	str	r3, [r1, #8]
    150c:	f1b8 0f00 	cmp.w	r8, #0
    1510:	dd98      	ble.n	1444 <__sflush_r+0x24>
    1512:	4643      	mov	r3, r8
    1514:	463a      	mov	r2, r7
    1516:	69e1      	ldr	r1, [r4, #28]
    1518:	6a66      	ldr	r6, [r4, #36]	; 0x24
    151a:	4628      	mov	r0, r5
    151c:	47b0      	blx	r6
    151e:	2800      	cmp	r0, #0
    1520:	dc06      	bgt.n	1530 <__sflush_r+0x110>
    1522:	89a3      	ldrh	r3, [r4, #12]
    1524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1528:	81a3      	strh	r3, [r4, #12]
    152a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    152e:	e78a      	b.n	1446 <__sflush_r+0x26>
    1530:	4407      	add	r7, r0
    1532:	eba8 0800 	sub.w	r8, r8, r0
    1536:	e7e9      	b.n	150c <__sflush_r+0xec>
    1538:	20400001 	.word	0x20400001

0000153c <_fflush_r>:
    153c:	b538      	push	{r3, r4, r5, lr}
    153e:	460d      	mov	r5, r1
    1540:	4604      	mov	r4, r0
    1542:	b118      	cbz	r0, 154c <_fflush_r+0x10>
    1544:	6b83      	ldr	r3, [r0, #56]	; 0x38
    1546:	b90b      	cbnz	r3, 154c <_fflush_r+0x10>
    1548:	f000 f862 	bl	1610 <__sinit>
    154c:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
    1550:	b128      	cbz	r0, 155e <_fflush_r+0x22>
    1552:	4629      	mov	r1, r5
    1554:	4620      	mov	r0, r4
    1556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    155a:	f7ff bf61 	b.w	1420 <__sflush_r>
    155e:	bd38      	pop	{r3, r4, r5, pc}

00001560 <fflush>:
    1560:	4601      	mov	r1, r0
    1562:	b920      	cbnz	r0, 156e <fflush+0xe>
    1564:	4b04      	ldr	r3, [pc, #16]	; (1578 <fflush+0x18>)
    1566:	4905      	ldr	r1, [pc, #20]	; (157c <fflush+0x1c>)
    1568:	6818      	ldr	r0, [r3, #0]
    156a:	f000 bfc5 	b.w	24f8 <_fwalk_reent>
    156e:	4b04      	ldr	r3, [pc, #16]	; (1580 <fflush+0x20>)
    1570:	6818      	ldr	r0, [r3, #0]
    1572:	f7ff bfe3 	b.w	153c <_fflush_r>
    1576:	bf00      	nop
    1578:	00018ffc 	.word	0x00018ffc
    157c:	0000153d 	.word	0x0000153d
    1580:	20002000 	.word	0x20002000

00001584 <std>:
    1584:	2300      	movs	r3, #0
    1586:	b510      	push	{r4, lr}
    1588:	4604      	mov	r4, r0
    158a:	e9c0 3300 	strd	r3, r3, [r0]
    158e:	6083      	str	r3, [r0, #8]
    1590:	8181      	strh	r1, [r0, #12]
    1592:	6603      	str	r3, [r0, #96]	; 0x60
    1594:	81c2      	strh	r2, [r0, #14]
    1596:	e9c0 3304 	strd	r3, r3, [r0, #16]
    159a:	6183      	str	r3, [r0, #24]
    159c:	4619      	mov	r1, r3
    159e:	2208      	movs	r2, #8
    15a0:	3058      	adds	r0, #88	; 0x58
    15a2:	f000 ff26 	bl	23f2 <memset>
    15a6:	4b05      	ldr	r3, [pc, #20]	; (15bc <std+0x38>)
    15a8:	6223      	str	r3, [r4, #32]
    15aa:	4b05      	ldr	r3, [pc, #20]	; (15c0 <std+0x3c>)
    15ac:	6263      	str	r3, [r4, #36]	; 0x24
    15ae:	4b05      	ldr	r3, [pc, #20]	; (15c4 <std+0x40>)
    15b0:	62a3      	str	r3, [r4, #40]	; 0x28
    15b2:	4b05      	ldr	r3, [pc, #20]	; (15c8 <std+0x44>)
    15b4:	61e4      	str	r4, [r4, #28]
    15b6:	62e3      	str	r3, [r4, #44]	; 0x2c
    15b8:	bd10      	pop	{r4, pc}
    15ba:	bf00      	nop
    15bc:	00002585 	.word	0x00002585
    15c0:	000025ab 	.word	0x000025ab
    15c4:	000025e3 	.word	0x000025e3
    15c8:	00002607 	.word	0x00002607

000015cc <_cleanup_r>:
    15cc:	4901      	ldr	r1, [pc, #4]	; (15d4 <_cleanup_r+0x8>)
    15ce:	f000 bf93 	b.w	24f8 <_fwalk_reent>
    15d2:	bf00      	nop
    15d4:	0000153d 	.word	0x0000153d

000015d8 <__sfmoreglue>:
    15d8:	b570      	push	{r4, r5, r6, lr}
    15da:	1e4a      	subs	r2, r1, #1
    15dc:	2564      	movs	r5, #100	; 0x64
    15de:	4355      	muls	r5, r2
    15e0:	460e      	mov	r6, r1
    15e2:	f105 0170 	add.w	r1, r5, #112	; 0x70
    15e6:	f7ff fa0d 	bl	a04 <_malloc_r>
    15ea:	4604      	mov	r4, r0
    15ec:	b140      	cbz	r0, 1600 <__sfmoreglue+0x28>
    15ee:	2100      	movs	r1, #0
    15f0:	e9c0 1600 	strd	r1, r6, [r0]
    15f4:	300c      	adds	r0, #12
    15f6:	60a0      	str	r0, [r4, #8]
    15f8:	f105 0264 	add.w	r2, r5, #100	; 0x64
    15fc:	f000 fef9 	bl	23f2 <memset>
    1600:	4620      	mov	r0, r4
    1602:	bd70      	pop	{r4, r5, r6, pc}

00001604 <_cleanup>:
    1604:	4b01      	ldr	r3, [pc, #4]	; (160c <_cleanup+0x8>)
    1606:	6818      	ldr	r0, [r3, #0]
    1608:	f7ff bfe0 	b.w	15cc <_cleanup_r>
    160c:	00018ffc 	.word	0x00018ffc

00001610 <__sinit>:
    1610:	6b82      	ldr	r2, [r0, #56]	; 0x38
    1612:	b510      	push	{r4, lr}
    1614:	4604      	mov	r4, r0
    1616:	b9d2      	cbnz	r2, 164e <__sinit+0x3e>
    1618:	4b0d      	ldr	r3, [pc, #52]	; (1650 <__sinit+0x40>)
    161a:	63c3      	str	r3, [r0, #60]	; 0x3c
    161c:	2303      	movs	r3, #3
    161e:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    1622:	f500 73ac 	add.w	r3, r0, #344	; 0x158
    1626:	f8c0 3154 	str.w	r3, [r0, #340]	; 0x154
    162a:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
    162e:	2104      	movs	r1, #4
    1630:	6840      	ldr	r0, [r0, #4]
    1632:	f7ff ffa7 	bl	1584 <std>
    1636:	2201      	movs	r2, #1
    1638:	2109      	movs	r1, #9
    163a:	68a0      	ldr	r0, [r4, #8]
    163c:	f7ff ffa2 	bl	1584 <std>
    1640:	2202      	movs	r2, #2
    1642:	2112      	movs	r1, #18
    1644:	68e0      	ldr	r0, [r4, #12]
    1646:	f7ff ff9d 	bl	1584 <std>
    164a:	2301      	movs	r3, #1
    164c:	63a3      	str	r3, [r4, #56]	; 0x38
    164e:	bd10      	pop	{r4, pc}
    1650:	000015cd 	.word	0x000015cd

00001654 <__sfp>:
    1654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1656:	4b1b      	ldr	r3, [pc, #108]	; (16c4 <__sfp+0x70>)
    1658:	681e      	ldr	r6, [r3, #0]
    165a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    165c:	4607      	mov	r7, r0
    165e:	b913      	cbnz	r3, 1666 <__sfp+0x12>
    1660:	4630      	mov	r0, r6
    1662:	f7ff ffd5 	bl	1610 <__sinit>
    1666:	f506 76a6 	add.w	r6, r6, #332	; 0x14c
    166a:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    166e:	3b01      	subs	r3, #1
    1670:	d503      	bpl.n	167a <__sfp+0x26>
    1672:	6833      	ldr	r3, [r6, #0]
    1674:	b1db      	cbz	r3, 16ae <__sfp+0x5a>
    1676:	6836      	ldr	r6, [r6, #0]
    1678:	e7f7      	b.n	166a <__sfp+0x16>
    167a:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    167e:	b9a5      	cbnz	r5, 16aa <__sfp+0x56>
    1680:	4b11      	ldr	r3, [pc, #68]	; (16c8 <__sfp+0x74>)
    1682:	6625      	str	r5, [r4, #96]	; 0x60
    1684:	e9c4 5500 	strd	r5, r5, [r4]
    1688:	60a5      	str	r5, [r4, #8]
    168a:	e9c4 3503 	strd	r3, r5, [r4, #12]
    168e:	e9c4 5505 	strd	r5, r5, [r4, #20]
    1692:	2208      	movs	r2, #8
    1694:	4629      	mov	r1, r5
    1696:	f104 0058 	add.w	r0, r4, #88	; 0x58
    169a:	f000 feaa 	bl	23f2 <memset>
    169e:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
    16a2:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
    16a6:	4620      	mov	r0, r4
    16a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    16aa:	3464      	adds	r4, #100	; 0x64
    16ac:	e7df      	b.n	166e <__sfp+0x1a>
    16ae:	2104      	movs	r1, #4
    16b0:	4638      	mov	r0, r7
    16b2:	f7ff ff91 	bl	15d8 <__sfmoreglue>
    16b6:	4604      	mov	r4, r0
    16b8:	6030      	str	r0, [r6, #0]
    16ba:	2800      	cmp	r0, #0
    16bc:	d1db      	bne.n	1676 <__sfp+0x22>
    16be:	230c      	movs	r3, #12
    16c0:	603b      	str	r3, [r7, #0]
    16c2:	e7f0      	b.n	16a6 <__sfp+0x52>
    16c4:	00018ffc 	.word	0x00018ffc
    16c8:	ffff0001 	.word	0xffff0001

000016cc <__sfvwrite_r>:
    16cc:	6893      	ldr	r3, [r2, #8]
    16ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16d2:	4607      	mov	r7, r0
    16d4:	460c      	mov	r4, r1
    16d6:	4690      	mov	r8, r2
    16d8:	b91b      	cbnz	r3, 16e2 <__sfvwrite_r+0x16>
    16da:	2000      	movs	r0, #0
    16dc:	b003      	add	sp, #12
    16de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    16e2:	898b      	ldrh	r3, [r1, #12]
    16e4:	0718      	lsls	r0, r3, #28
    16e6:	d550      	bpl.n	178a <__sfvwrite_r+0xbe>
    16e8:	690b      	ldr	r3, [r1, #16]
    16ea:	2b00      	cmp	r3, #0
    16ec:	d04d      	beq.n	178a <__sfvwrite_r+0xbe>
    16ee:	89a3      	ldrh	r3, [r4, #12]
    16f0:	f8d8 6000 	ldr.w	r6, [r8]
    16f4:	f013 0902 	ands.w	r9, r3, #2
    16f8:	d16c      	bne.n	17d4 <__sfvwrite_r+0x108>
    16fa:	f013 0301 	ands.w	r3, r3, #1
    16fe:	f000 809c 	beq.w	183a <__sfvwrite_r+0x16e>
    1702:	4648      	mov	r0, r9
    1704:	46ca      	mov	sl, r9
    1706:	46cb      	mov	fp, r9
    1708:	f1bb 0f00 	cmp.w	fp, #0
    170c:	f000 8106 	beq.w	191c <__sfvwrite_r+0x250>
    1710:	b950      	cbnz	r0, 1728 <__sfvwrite_r+0x5c>
    1712:	465a      	mov	r2, fp
    1714:	210a      	movs	r1, #10
    1716:	4650      	mov	r0, sl
    1718:	f7fe fdf2 	bl	300 <memchr>
    171c:	2800      	cmp	r0, #0
    171e:	f000 8102 	beq.w	1926 <__sfvwrite_r+0x25a>
    1722:	3001      	adds	r0, #1
    1724:	eba0 090a 	sub.w	r9, r0, sl
    1728:	6820      	ldr	r0, [r4, #0]
    172a:	6921      	ldr	r1, [r4, #16]
    172c:	6962      	ldr	r2, [r4, #20]
    172e:	45d9      	cmp	r9, fp
    1730:	464b      	mov	r3, r9
    1732:	bf28      	it	cs
    1734:	465b      	movcs	r3, fp
    1736:	4288      	cmp	r0, r1
    1738:	f240 80f8 	bls.w	192c <__sfvwrite_r+0x260>
    173c:	68a5      	ldr	r5, [r4, #8]
    173e:	4415      	add	r5, r2
    1740:	42ab      	cmp	r3, r5
    1742:	f340 80f3 	ble.w	192c <__sfvwrite_r+0x260>
    1746:	4651      	mov	r1, sl
    1748:	462a      	mov	r2, r5
    174a:	f000 fe38 	bl	23be <memmove>
    174e:	6823      	ldr	r3, [r4, #0]
    1750:	442b      	add	r3, r5
    1752:	6023      	str	r3, [r4, #0]
    1754:	4621      	mov	r1, r4
    1756:	4638      	mov	r0, r7
    1758:	f7ff fef0 	bl	153c <_fflush_r>
    175c:	2800      	cmp	r0, #0
    175e:	d167      	bne.n	1830 <__sfvwrite_r+0x164>
    1760:	ebb9 0905 	subs.w	r9, r9, r5
    1764:	f040 80fc 	bne.w	1960 <__sfvwrite_r+0x294>
    1768:	4621      	mov	r1, r4
    176a:	4638      	mov	r0, r7
    176c:	f7ff fee6 	bl	153c <_fflush_r>
    1770:	2800      	cmp	r0, #0
    1772:	d15d      	bne.n	1830 <__sfvwrite_r+0x164>
    1774:	f8d8 3008 	ldr.w	r3, [r8, #8]
    1778:	44aa      	add	sl, r5
    177a:	ebab 0b05 	sub.w	fp, fp, r5
    177e:	1b5d      	subs	r5, r3, r5
    1780:	f8c8 5008 	str.w	r5, [r8, #8]
    1784:	2d00      	cmp	r5, #0
    1786:	d1bf      	bne.n	1708 <__sfvwrite_r+0x3c>
    1788:	e7a7      	b.n	16da <__sfvwrite_r+0xe>
    178a:	4621      	mov	r1, r4
    178c:	4638      	mov	r0, r7
    178e:	f7ff fdcb 	bl	1328 <__swsetup_r>
    1792:	2800      	cmp	r0, #0
    1794:	d0ab      	beq.n	16ee <__sfvwrite_r+0x22>
    1796:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    179a:	e79f      	b.n	16dc <__sfvwrite_r+0x10>
    179c:	e9d6 a900 	ldrd	sl, r9, [r6]
    17a0:	3608      	adds	r6, #8
    17a2:	f1b9 0f00 	cmp.w	r9, #0
    17a6:	d0f9      	beq.n	179c <__sfvwrite_r+0xd0>
    17a8:	45d9      	cmp	r9, fp
    17aa:	464b      	mov	r3, r9
    17ac:	4652      	mov	r2, sl
    17ae:	bf28      	it	cs
    17b0:	465b      	movcs	r3, fp
    17b2:	69e1      	ldr	r1, [r4, #28]
    17b4:	6a65      	ldr	r5, [r4, #36]	; 0x24
    17b6:	4638      	mov	r0, r7
    17b8:	47a8      	blx	r5
    17ba:	2800      	cmp	r0, #0
    17bc:	dd38      	ble.n	1830 <__sfvwrite_r+0x164>
    17be:	f8d8 3008 	ldr.w	r3, [r8, #8]
    17c2:	4482      	add	sl, r0
    17c4:	eba9 0900 	sub.w	r9, r9, r0
    17c8:	1a18      	subs	r0, r3, r0
    17ca:	f8c8 0008 	str.w	r0, [r8, #8]
    17ce:	2800      	cmp	r0, #0
    17d0:	d1e7      	bne.n	17a2 <__sfvwrite_r+0xd6>
    17d2:	e782      	b.n	16da <__sfvwrite_r+0xe>
    17d4:	f04f 0a00 	mov.w	sl, #0
    17d8:	46d1      	mov	r9, sl
    17da:	f8df b18c 	ldr.w	fp, [pc, #396]	; 1968 <__sfvwrite_r+0x29c>
    17de:	e7e0      	b.n	17a2 <__sfvwrite_r+0xd6>
    17e0:	e9d6 9a00 	ldrd	r9, sl, [r6]
    17e4:	3608      	adds	r6, #8
    17e6:	f1ba 0f00 	cmp.w	sl, #0
    17ea:	d0f9      	beq.n	17e0 <__sfvwrite_r+0x114>
    17ec:	89a2      	ldrh	r2, [r4, #12]
    17ee:	68a3      	ldr	r3, [r4, #8]
    17f0:	6820      	ldr	r0, [r4, #0]
    17f2:	0591      	lsls	r1, r2, #22
    17f4:	d564      	bpl.n	18c0 <__sfvwrite_r+0x1f4>
    17f6:	4553      	cmp	r3, sl
    17f8:	d836      	bhi.n	1868 <__sfvwrite_r+0x19c>
    17fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
    17fe:	d033      	beq.n	1868 <__sfvwrite_r+0x19c>
    1800:	6921      	ldr	r1, [r4, #16]
    1802:	6965      	ldr	r5, [r4, #20]
    1804:	eba0 0b01 	sub.w	fp, r0, r1
    1808:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    180c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
    1810:	f10b 0301 	add.w	r3, fp, #1
    1814:	4453      	add	r3, sl
    1816:	106d      	asrs	r5, r5, #1
    1818:	429d      	cmp	r5, r3
    181a:	bf38      	it	cc
    181c:	461d      	movcc	r5, r3
    181e:	0553      	lsls	r3, r2, #21
    1820:	d53e      	bpl.n	18a0 <__sfvwrite_r+0x1d4>
    1822:	4629      	mov	r1, r5
    1824:	4638      	mov	r0, r7
    1826:	f7ff f8ed 	bl	a04 <_malloc_r>
    182a:	b948      	cbnz	r0, 1840 <__sfvwrite_r+0x174>
    182c:	230c      	movs	r3, #12
    182e:	603b      	str	r3, [r7, #0]
    1830:	89a3      	ldrh	r3, [r4, #12]
    1832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1836:	81a3      	strh	r3, [r4, #12]
    1838:	e7ad      	b.n	1796 <__sfvwrite_r+0xca>
    183a:	4699      	mov	r9, r3
    183c:	469a      	mov	sl, r3
    183e:	e7d2      	b.n	17e6 <__sfvwrite_r+0x11a>
    1840:	465a      	mov	r2, fp
    1842:	6921      	ldr	r1, [r4, #16]
    1844:	9001      	str	r0, [sp, #4]
    1846:	f000 fd99 	bl	237c <memcpy>
    184a:	89a2      	ldrh	r2, [r4, #12]
    184c:	9b01      	ldr	r3, [sp, #4]
    184e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    1852:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    1856:	81a2      	strh	r2, [r4, #12]
    1858:	6123      	str	r3, [r4, #16]
    185a:	6165      	str	r5, [r4, #20]
    185c:	445b      	add	r3, fp
    185e:	eba5 050b 	sub.w	r5, r5, fp
    1862:	6023      	str	r3, [r4, #0]
    1864:	60a5      	str	r5, [r4, #8]
    1866:	4653      	mov	r3, sl
    1868:	4553      	cmp	r3, sl
    186a:	bf28      	it	cs
    186c:	4653      	movcs	r3, sl
    186e:	461a      	mov	r2, r3
    1870:	4649      	mov	r1, r9
    1872:	6820      	ldr	r0, [r4, #0]
    1874:	9301      	str	r3, [sp, #4]
    1876:	f000 fda2 	bl	23be <memmove>
    187a:	68a2      	ldr	r2, [r4, #8]
    187c:	9b01      	ldr	r3, [sp, #4]
    187e:	1ad2      	subs	r2, r2, r3
    1880:	60a2      	str	r2, [r4, #8]
    1882:	6822      	ldr	r2, [r4, #0]
    1884:	4413      	add	r3, r2
    1886:	4655      	mov	r5, sl
    1888:	6023      	str	r3, [r4, #0]
    188a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    188e:	44a9      	add	r9, r5
    1890:	ebaa 0a05 	sub.w	sl, sl, r5
    1894:	1b5d      	subs	r5, r3, r5
    1896:	f8c8 5008 	str.w	r5, [r8, #8]
    189a:	2d00      	cmp	r5, #0
    189c:	d1a3      	bne.n	17e6 <__sfvwrite_r+0x11a>
    189e:	e71c      	b.n	16da <__sfvwrite_r+0xe>
    18a0:	462a      	mov	r2, r5
    18a2:	4638      	mov	r0, r7
    18a4:	f000 fe48 	bl	2538 <_realloc_r>
    18a8:	4603      	mov	r3, r0
    18aa:	2800      	cmp	r0, #0
    18ac:	d1d4      	bne.n	1858 <__sfvwrite_r+0x18c>
    18ae:	6921      	ldr	r1, [r4, #16]
    18b0:	4638      	mov	r0, r7
    18b2:	f000 f8c7 	bl	1a44 <_free_r>
    18b6:	89a3      	ldrh	r3, [r4, #12]
    18b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    18bc:	81a3      	strh	r3, [r4, #12]
    18be:	e7b5      	b.n	182c <__sfvwrite_r+0x160>
    18c0:	6922      	ldr	r2, [r4, #16]
    18c2:	4282      	cmp	r2, r0
    18c4:	d302      	bcc.n	18cc <__sfvwrite_r+0x200>
    18c6:	6962      	ldr	r2, [r4, #20]
    18c8:	4552      	cmp	r2, sl
    18ca:	d916      	bls.n	18fa <__sfvwrite_r+0x22e>
    18cc:	4553      	cmp	r3, sl
    18ce:	bf28      	it	cs
    18d0:	4653      	movcs	r3, sl
    18d2:	461a      	mov	r2, r3
    18d4:	4649      	mov	r1, r9
    18d6:	461d      	mov	r5, r3
    18d8:	f000 fd71 	bl	23be <memmove>
    18dc:	68a3      	ldr	r3, [r4, #8]
    18de:	6822      	ldr	r2, [r4, #0]
    18e0:	1b5b      	subs	r3, r3, r5
    18e2:	442a      	add	r2, r5
    18e4:	60a3      	str	r3, [r4, #8]
    18e6:	6022      	str	r2, [r4, #0]
    18e8:	2b00      	cmp	r3, #0
    18ea:	d1ce      	bne.n	188a <__sfvwrite_r+0x1be>
    18ec:	4621      	mov	r1, r4
    18ee:	4638      	mov	r0, r7
    18f0:	f7ff fe24 	bl	153c <_fflush_r>
    18f4:	2800      	cmp	r0, #0
    18f6:	d0c8      	beq.n	188a <__sfvwrite_r+0x1be>
    18f8:	e79a      	b.n	1830 <__sfvwrite_r+0x164>
    18fa:	4b1a      	ldr	r3, [pc, #104]	; (1964 <__sfvwrite_r+0x298>)
    18fc:	6a65      	ldr	r5, [r4, #36]	; 0x24
    18fe:	69e1      	ldr	r1, [r4, #28]
    1900:	459a      	cmp	sl, r3
    1902:	bf94      	ite	ls
    1904:	4653      	movls	r3, sl
    1906:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
    190a:	4638      	mov	r0, r7
    190c:	fb93 f3f2 	sdiv	r3, r3, r2
    1910:	4353      	muls	r3, r2
    1912:	464a      	mov	r2, r9
    1914:	47a8      	blx	r5
    1916:	1e05      	subs	r5, r0, #0
    1918:	dcb7      	bgt.n	188a <__sfvwrite_r+0x1be>
    191a:	e789      	b.n	1830 <__sfvwrite_r+0x164>
    191c:	e9d6 ab00 	ldrd	sl, fp, [r6]
    1920:	2000      	movs	r0, #0
    1922:	3608      	adds	r6, #8
    1924:	e6f0      	b.n	1708 <__sfvwrite_r+0x3c>
    1926:	f10b 0901 	add.w	r9, fp, #1
    192a:	e6fd      	b.n	1728 <__sfvwrite_r+0x5c>
    192c:	429a      	cmp	r2, r3
    192e:	dc09      	bgt.n	1944 <__sfvwrite_r+0x278>
    1930:	6a65      	ldr	r5, [r4, #36]	; 0x24
    1932:	69e1      	ldr	r1, [r4, #28]
    1934:	4613      	mov	r3, r2
    1936:	4638      	mov	r0, r7
    1938:	4652      	mov	r2, sl
    193a:	47a8      	blx	r5
    193c:	1e05      	subs	r5, r0, #0
    193e:	f73f af0f 	bgt.w	1760 <__sfvwrite_r+0x94>
    1942:	e775      	b.n	1830 <__sfvwrite_r+0x164>
    1944:	461a      	mov	r2, r3
    1946:	4651      	mov	r1, sl
    1948:	9301      	str	r3, [sp, #4]
    194a:	f000 fd38 	bl	23be <memmove>
    194e:	9b01      	ldr	r3, [sp, #4]
    1950:	68a2      	ldr	r2, [r4, #8]
    1952:	1ad2      	subs	r2, r2, r3
    1954:	60a2      	str	r2, [r4, #8]
    1956:	6822      	ldr	r2, [r4, #0]
    1958:	441a      	add	r2, r3
    195a:	6022      	str	r2, [r4, #0]
    195c:	461d      	mov	r5, r3
    195e:	e6ff      	b.n	1760 <__sfvwrite_r+0x94>
    1960:	2001      	movs	r0, #1
    1962:	e707      	b.n	1774 <__sfvwrite_r+0xa8>
    1964:	7ffffffe 	.word	0x7ffffffe
    1968:	7ffffc00 	.word	0x7ffffc00

0000196c <__swhatbuf_r>:
    196c:	b570      	push	{r4, r5, r6, lr}
    196e:	460e      	mov	r6, r1
    1970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1974:	2900      	cmp	r1, #0
    1976:	b096      	sub	sp, #88	; 0x58
    1978:	4614      	mov	r4, r2
    197a:	461d      	mov	r5, r3
    197c:	da09      	bge.n	1992 <__swhatbuf_r+0x26>
    197e:	89b3      	ldrh	r3, [r6, #12]
    1980:	2200      	movs	r2, #0
    1982:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    1986:	602a      	str	r2, [r5, #0]
    1988:	d116      	bne.n	19b8 <__swhatbuf_r+0x4c>
    198a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    198e:	6023      	str	r3, [r4, #0]
    1990:	e015      	b.n	19be <__swhatbuf_r+0x52>
    1992:	466a      	mov	r2, sp
    1994:	f000 fb40 	bl	2018 <_fstat_r>
    1998:	2800      	cmp	r0, #0
    199a:	dbf0      	blt.n	197e <__swhatbuf_r+0x12>
    199c:	9a01      	ldr	r2, [sp, #4]
    199e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    19a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    19a6:	425a      	negs	r2, r3
    19a8:	415a      	adcs	r2, r3
    19aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    19ae:	602a      	str	r2, [r5, #0]
    19b0:	f44f 6000 	mov.w	r0, #2048	; 0x800
    19b4:	6023      	str	r3, [r4, #0]
    19b6:	e002      	b.n	19be <__swhatbuf_r+0x52>
    19b8:	2340      	movs	r3, #64	; 0x40
    19ba:	6023      	str	r3, [r4, #0]
    19bc:	4610      	mov	r0, r2
    19be:	b016      	add	sp, #88	; 0x58
    19c0:	bd70      	pop	{r4, r5, r6, pc}

000019c2 <__smakebuf_r>:
    19c2:	898b      	ldrh	r3, [r1, #12]
    19c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    19c6:	079d      	lsls	r5, r3, #30
    19c8:	4606      	mov	r6, r0
    19ca:	460c      	mov	r4, r1
    19cc:	d507      	bpl.n	19de <__smakebuf_r+0x1c>
    19ce:	f104 0343 	add.w	r3, r4, #67	; 0x43
    19d2:	6023      	str	r3, [r4, #0]
    19d4:	6123      	str	r3, [r4, #16]
    19d6:	2301      	movs	r3, #1
    19d8:	6163      	str	r3, [r4, #20]
    19da:	b002      	add	sp, #8
    19dc:	bd70      	pop	{r4, r5, r6, pc}
    19de:	ab01      	add	r3, sp, #4
    19e0:	466a      	mov	r2, sp
    19e2:	f7ff ffc3 	bl	196c <__swhatbuf_r>
    19e6:	9900      	ldr	r1, [sp, #0]
    19e8:	4605      	mov	r5, r0
    19ea:	4630      	mov	r0, r6
    19ec:	f7ff f80a 	bl	a04 <_malloc_r>
    19f0:	b948      	cbnz	r0, 1a06 <__smakebuf_r+0x44>
    19f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    19f6:	059a      	lsls	r2, r3, #22
    19f8:	d4ef      	bmi.n	19da <__smakebuf_r+0x18>
    19fa:	f023 0303 	bic.w	r3, r3, #3
    19fe:	f043 0302 	orr.w	r3, r3, #2
    1a02:	81a3      	strh	r3, [r4, #12]
    1a04:	e7e3      	b.n	19ce <__smakebuf_r+0xc>
    1a06:	4b0e      	ldr	r3, [pc, #56]	; (1a40 <__smakebuf_r+0x7e>)
    1a08:	63f3      	str	r3, [r6, #60]	; 0x3c
    1a0a:	89a3      	ldrh	r3, [r4, #12]
    1a0c:	6020      	str	r0, [r4, #0]
    1a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1a12:	81a3      	strh	r3, [r4, #12]
    1a14:	9b00      	ldr	r3, [sp, #0]
    1a16:	6163      	str	r3, [r4, #20]
    1a18:	9b01      	ldr	r3, [sp, #4]
    1a1a:	6120      	str	r0, [r4, #16]
    1a1c:	b15b      	cbz	r3, 1a36 <__smakebuf_r+0x74>
    1a1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    1a22:	4630      	mov	r0, r6
    1a24:	f000 fb0a 	bl	203c <_isatty_r>
    1a28:	b128      	cbz	r0, 1a36 <__smakebuf_r+0x74>
    1a2a:	89a3      	ldrh	r3, [r4, #12]
    1a2c:	f023 0303 	bic.w	r3, r3, #3
    1a30:	f043 0301 	orr.w	r3, r3, #1
    1a34:	81a3      	strh	r3, [r4, #12]
    1a36:	89a3      	ldrh	r3, [r4, #12]
    1a38:	431d      	orrs	r5, r3
    1a3a:	81a5      	strh	r5, [r4, #12]
    1a3c:	e7cd      	b.n	19da <__smakebuf_r+0x18>
    1a3e:	bf00      	nop
    1a40:	000015cd 	.word	0x000015cd

00001a44 <_free_r>:
    1a44:	b538      	push	{r3, r4, r5, lr}
    1a46:	4605      	mov	r5, r0
    1a48:	2900      	cmp	r1, #0
    1a4a:	d045      	beq.n	1ad8 <_free_r+0x94>
    1a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1a50:	1f0c      	subs	r4, r1, #4
    1a52:	2b00      	cmp	r3, #0
    1a54:	bfb8      	it	lt
    1a56:	18e4      	addlt	r4, r4, r3
    1a58:	f000 fd6c 	bl	2534 <__malloc_lock>
    1a5c:	4a1f      	ldr	r2, [pc, #124]	; (1adc <_free_r+0x98>)
    1a5e:	6813      	ldr	r3, [r2, #0]
    1a60:	4610      	mov	r0, r2
    1a62:	b933      	cbnz	r3, 1a72 <_free_r+0x2e>
    1a64:	6063      	str	r3, [r4, #4]
    1a66:	6014      	str	r4, [r2, #0]
    1a68:	4628      	mov	r0, r5
    1a6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1a6e:	f000 bd62 	b.w	2536 <__malloc_unlock>
    1a72:	42a3      	cmp	r3, r4
    1a74:	d90c      	bls.n	1a90 <_free_r+0x4c>
    1a76:	6821      	ldr	r1, [r4, #0]
    1a78:	1862      	adds	r2, r4, r1
    1a7a:	4293      	cmp	r3, r2
    1a7c:	bf04      	itt	eq
    1a7e:	681a      	ldreq	r2, [r3, #0]
    1a80:	685b      	ldreq	r3, [r3, #4]
    1a82:	6063      	str	r3, [r4, #4]
    1a84:	bf04      	itt	eq
    1a86:	1852      	addeq	r2, r2, r1
    1a88:	6022      	streq	r2, [r4, #0]
    1a8a:	6004      	str	r4, [r0, #0]
    1a8c:	e7ec      	b.n	1a68 <_free_r+0x24>
    1a8e:	4613      	mov	r3, r2
    1a90:	685a      	ldr	r2, [r3, #4]
    1a92:	b10a      	cbz	r2, 1a98 <_free_r+0x54>
    1a94:	42a2      	cmp	r2, r4
    1a96:	d9fa      	bls.n	1a8e <_free_r+0x4a>
    1a98:	6819      	ldr	r1, [r3, #0]
    1a9a:	1858      	adds	r0, r3, r1
    1a9c:	42a0      	cmp	r0, r4
    1a9e:	d10b      	bne.n	1ab8 <_free_r+0x74>
    1aa0:	6820      	ldr	r0, [r4, #0]
    1aa2:	4401      	add	r1, r0
    1aa4:	1858      	adds	r0, r3, r1
    1aa6:	4282      	cmp	r2, r0
    1aa8:	6019      	str	r1, [r3, #0]
    1aaa:	d1dd      	bne.n	1a68 <_free_r+0x24>
    1aac:	6810      	ldr	r0, [r2, #0]
    1aae:	6852      	ldr	r2, [r2, #4]
    1ab0:	605a      	str	r2, [r3, #4]
    1ab2:	4401      	add	r1, r0
    1ab4:	6019      	str	r1, [r3, #0]
    1ab6:	e7d7      	b.n	1a68 <_free_r+0x24>
    1ab8:	d902      	bls.n	1ac0 <_free_r+0x7c>
    1aba:	230c      	movs	r3, #12
    1abc:	602b      	str	r3, [r5, #0]
    1abe:	e7d3      	b.n	1a68 <_free_r+0x24>
    1ac0:	6820      	ldr	r0, [r4, #0]
    1ac2:	1821      	adds	r1, r4, r0
    1ac4:	428a      	cmp	r2, r1
    1ac6:	bf04      	itt	eq
    1ac8:	6811      	ldreq	r1, [r2, #0]
    1aca:	6852      	ldreq	r2, [r2, #4]
    1acc:	6062      	str	r2, [r4, #4]
    1ace:	bf04      	itt	eq
    1ad0:	1809      	addeq	r1, r1, r0
    1ad2:	6021      	streq	r1, [r4, #0]
    1ad4:	605c      	str	r4, [r3, #4]
    1ad6:	e7c7      	b.n	1a68 <_free_r+0x24>
    1ad8:	bd38      	pop	{r3, r4, r5, pc}
    1ada:	bf00      	nop
    1adc:	20002294 	.word	0x20002294

00001ae0 <__ssputs_r>:
    1ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1ae4:	688e      	ldr	r6, [r1, #8]
    1ae6:	429e      	cmp	r6, r3
    1ae8:	4682      	mov	sl, r0
    1aea:	460c      	mov	r4, r1
    1aec:	4691      	mov	r9, r2
    1aee:	4698      	mov	r8, r3
    1af0:	d838      	bhi.n	1b64 <__ssputs_r+0x84>
    1af2:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
    1af6:	f41c 6f90 	tst.w	ip, #1152	; 0x480
    1afa:	d031      	beq.n	1b60 <__ssputs_r+0x80>
    1afc:	6962      	ldr	r2, [r4, #20]
    1afe:	6825      	ldr	r5, [r4, #0]
    1b00:	6909      	ldr	r1, [r1, #16]
    1b02:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1b06:	1a6f      	subs	r7, r5, r1
    1b08:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    1b0c:	3301      	adds	r3, #1
    1b0e:	1055      	asrs	r5, r2, #1
    1b10:	443b      	add	r3, r7
    1b12:	429d      	cmp	r5, r3
    1b14:	bf38      	it	cc
    1b16:	461d      	movcc	r5, r3
    1b18:	f41c 6f80 	tst.w	ip, #1024	; 0x400
    1b1c:	d030      	beq.n	1b80 <__ssputs_r+0xa0>
    1b1e:	4629      	mov	r1, r5
    1b20:	f7fe ff70 	bl	a04 <_malloc_r>
    1b24:	4606      	mov	r6, r0
    1b26:	b950      	cbnz	r0, 1b3e <__ssputs_r+0x5e>
    1b28:	230c      	movs	r3, #12
    1b2a:	f8ca 3000 	str.w	r3, [sl]
    1b2e:	89a3      	ldrh	r3, [r4, #12]
    1b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1b34:	81a3      	strh	r3, [r4, #12]
    1b36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1b3e:	463a      	mov	r2, r7
    1b40:	6921      	ldr	r1, [r4, #16]
    1b42:	f000 fc1b 	bl	237c <memcpy>
    1b46:	89a3      	ldrh	r3, [r4, #12]
    1b48:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    1b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1b50:	81a3      	strh	r3, [r4, #12]
    1b52:	6126      	str	r6, [r4, #16]
    1b54:	6165      	str	r5, [r4, #20]
    1b56:	443e      	add	r6, r7
    1b58:	1bed      	subs	r5, r5, r7
    1b5a:	6026      	str	r6, [r4, #0]
    1b5c:	60a5      	str	r5, [r4, #8]
    1b5e:	4646      	mov	r6, r8
    1b60:	4546      	cmp	r6, r8
    1b62:	d900      	bls.n	1b66 <__ssputs_r+0x86>
    1b64:	4646      	mov	r6, r8
    1b66:	4632      	mov	r2, r6
    1b68:	4649      	mov	r1, r9
    1b6a:	6820      	ldr	r0, [r4, #0]
    1b6c:	f000 fc27 	bl	23be <memmove>
    1b70:	68a3      	ldr	r3, [r4, #8]
    1b72:	1b9b      	subs	r3, r3, r6
    1b74:	60a3      	str	r3, [r4, #8]
    1b76:	6823      	ldr	r3, [r4, #0]
    1b78:	441e      	add	r6, r3
    1b7a:	6026      	str	r6, [r4, #0]
    1b7c:	2000      	movs	r0, #0
    1b7e:	e7dc      	b.n	1b3a <__ssputs_r+0x5a>
    1b80:	462a      	mov	r2, r5
    1b82:	f000 fcd9 	bl	2538 <_realloc_r>
    1b86:	4606      	mov	r6, r0
    1b88:	2800      	cmp	r0, #0
    1b8a:	d1e2      	bne.n	1b52 <__ssputs_r+0x72>
    1b8c:	6921      	ldr	r1, [r4, #16]
    1b8e:	4650      	mov	r0, sl
    1b90:	f7ff ff58 	bl	1a44 <_free_r>
    1b94:	e7c8      	b.n	1b28 <__ssputs_r+0x48>

00001b96 <__ssprint_r>:
    1b96:	6893      	ldr	r3, [r2, #8]
    1b98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b9c:	4681      	mov	r9, r0
    1b9e:	460c      	mov	r4, r1
    1ba0:	4616      	mov	r6, r2
    1ba2:	2b00      	cmp	r3, #0
    1ba4:	d05e      	beq.n	1c64 <__ssprint_r+0xce>
    1ba6:	f04f 0b00 	mov.w	fp, #0
    1baa:	f8d2 a000 	ldr.w	sl, [r2]
    1bae:	465f      	mov	r7, fp
    1bb0:	b357      	cbz	r7, 1c08 <__ssprint_r+0x72>
    1bb2:	68a3      	ldr	r3, [r4, #8]
    1bb4:	429f      	cmp	r7, r3
    1bb6:	d340      	bcc.n	1c3a <__ssprint_r+0xa4>
    1bb8:	89a2      	ldrh	r2, [r4, #12]
    1bba:	f412 6f90 	tst.w	r2, #1152	; 0x480
    1bbe:	d03c      	beq.n	1c3a <__ssprint_r+0xa4>
    1bc0:	6825      	ldr	r5, [r4, #0]
    1bc2:	6921      	ldr	r1, [r4, #16]
    1bc4:	eba5 0801 	sub.w	r8, r5, r1
    1bc8:	6965      	ldr	r5, [r4, #20]
    1bca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1bce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
    1bd2:	f108 0301 	add.w	r3, r8, #1
    1bd6:	443b      	add	r3, r7
    1bd8:	106d      	asrs	r5, r5, #1
    1bda:	429d      	cmp	r5, r3
    1bdc:	bf38      	it	cc
    1bde:	461d      	movcc	r5, r3
    1be0:	0553      	lsls	r3, r2, #21
    1be2:	d544      	bpl.n	1c6e <__ssprint_r+0xd8>
    1be4:	4629      	mov	r1, r5
    1be6:	4648      	mov	r0, r9
    1be8:	f7fe ff0c 	bl	a04 <_malloc_r>
    1bec:	b988      	cbnz	r0, 1c12 <__ssprint_r+0x7c>
    1bee:	230c      	movs	r3, #12
    1bf0:	f8c9 3000 	str.w	r3, [r9]
    1bf4:	89a3      	ldrh	r3, [r4, #12]
    1bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1bfa:	81a3      	strh	r3, [r4, #12]
    1bfc:	2300      	movs	r3, #0
    1bfe:	e9c6 3301 	strd	r3, r3, [r6, #4]
    1c02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1c06:	e02f      	b.n	1c68 <__ssprint_r+0xd2>
    1c08:	e9da b700 	ldrd	fp, r7, [sl]
    1c0c:	f10a 0a08 	add.w	sl, sl, #8
    1c10:	e7ce      	b.n	1bb0 <__ssprint_r+0x1a>
    1c12:	4642      	mov	r2, r8
    1c14:	6921      	ldr	r1, [r4, #16]
    1c16:	9001      	str	r0, [sp, #4]
    1c18:	f000 fbb0 	bl	237c <memcpy>
    1c1c:	89a2      	ldrh	r2, [r4, #12]
    1c1e:	9b01      	ldr	r3, [sp, #4]
    1c20:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    1c24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    1c28:	81a2      	strh	r2, [r4, #12]
    1c2a:	6123      	str	r3, [r4, #16]
    1c2c:	6165      	str	r5, [r4, #20]
    1c2e:	4443      	add	r3, r8
    1c30:	eba5 0508 	sub.w	r5, r5, r8
    1c34:	6023      	str	r3, [r4, #0]
    1c36:	60a5      	str	r5, [r4, #8]
    1c38:	463b      	mov	r3, r7
    1c3a:	42bb      	cmp	r3, r7
    1c3c:	bf28      	it	cs
    1c3e:	463b      	movcs	r3, r7
    1c40:	461a      	mov	r2, r3
    1c42:	4659      	mov	r1, fp
    1c44:	6820      	ldr	r0, [r4, #0]
    1c46:	9301      	str	r3, [sp, #4]
    1c48:	f000 fbb9 	bl	23be <memmove>
    1c4c:	68a2      	ldr	r2, [r4, #8]
    1c4e:	9b01      	ldr	r3, [sp, #4]
    1c50:	1ad2      	subs	r2, r2, r3
    1c52:	60a2      	str	r2, [r4, #8]
    1c54:	6822      	ldr	r2, [r4, #0]
    1c56:	4413      	add	r3, r2
    1c58:	6023      	str	r3, [r4, #0]
    1c5a:	68b3      	ldr	r3, [r6, #8]
    1c5c:	1bdf      	subs	r7, r3, r7
    1c5e:	60b7      	str	r7, [r6, #8]
    1c60:	2f00      	cmp	r7, #0
    1c62:	d1d1      	bne.n	1c08 <__ssprint_r+0x72>
    1c64:	2000      	movs	r0, #0
    1c66:	6070      	str	r0, [r6, #4]
    1c68:	b003      	add	sp, #12
    1c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c6e:	462a      	mov	r2, r5
    1c70:	4648      	mov	r0, r9
    1c72:	f000 fc61 	bl	2538 <_realloc_r>
    1c76:	4603      	mov	r3, r0
    1c78:	2800      	cmp	r0, #0
    1c7a:	d1d6      	bne.n	1c2a <__ssprint_r+0x94>
    1c7c:	6921      	ldr	r1, [r4, #16]
    1c7e:	4648      	mov	r0, r9
    1c80:	f7ff fee0 	bl	1a44 <_free_r>
    1c84:	e7b3      	b.n	1bee <__ssprint_r+0x58>

00001c86 <_svfiprintf_r>:
    1c86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c8a:	461e      	mov	r6, r3
    1c8c:	898b      	ldrh	r3, [r1, #12]
    1c8e:	061b      	lsls	r3, r3, #24
    1c90:	b09d      	sub	sp, #116	; 0x74
    1c92:	4607      	mov	r7, r0
    1c94:	460d      	mov	r5, r1
    1c96:	4614      	mov	r4, r2
    1c98:	d50e      	bpl.n	1cb8 <_svfiprintf_r+0x32>
    1c9a:	690b      	ldr	r3, [r1, #16]
    1c9c:	b963      	cbnz	r3, 1cb8 <_svfiprintf_r+0x32>
    1c9e:	2140      	movs	r1, #64	; 0x40
    1ca0:	f7fe feb0 	bl	a04 <_malloc_r>
    1ca4:	6028      	str	r0, [r5, #0]
    1ca6:	6128      	str	r0, [r5, #16]
    1ca8:	b920      	cbnz	r0, 1cb4 <_svfiprintf_r+0x2e>
    1caa:	230c      	movs	r3, #12
    1cac:	603b      	str	r3, [r7, #0]
    1cae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1cb2:	e0c9      	b.n	1e48 <_svfiprintf_r+0x1c2>
    1cb4:	2340      	movs	r3, #64	; 0x40
    1cb6:	616b      	str	r3, [r5, #20]
    1cb8:	2300      	movs	r3, #0
    1cba:	9309      	str	r3, [sp, #36]	; 0x24
    1cbc:	2320      	movs	r3, #32
    1cbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    1cc2:	f8df 919c 	ldr.w	r9, [pc, #412]	; 1e60 <_svfiprintf_r+0x1da>
    1cc6:	9603      	str	r6, [sp, #12]
    1cc8:	2330      	movs	r3, #48	; 0x30
    1cca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    1cce:	f04f 0a01 	mov.w	sl, #1
    1cd2:	4623      	mov	r3, r4
    1cd4:	461e      	mov	r6, r3
    1cd6:	f813 2b01 	ldrb.w	r2, [r3], #1
    1cda:	b10a      	cbz	r2, 1ce0 <_svfiprintf_r+0x5a>
    1cdc:	2a25      	cmp	r2, #37	; 0x25
    1cde:	d1f9      	bne.n	1cd4 <_svfiprintf_r+0x4e>
    1ce0:	ebb6 0b04 	subs.w	fp, r6, r4
    1ce4:	d00b      	beq.n	1cfe <_svfiprintf_r+0x78>
    1ce6:	465b      	mov	r3, fp
    1ce8:	4622      	mov	r2, r4
    1cea:	4629      	mov	r1, r5
    1cec:	4638      	mov	r0, r7
    1cee:	f7ff fef7 	bl	1ae0 <__ssputs_r>
    1cf2:	3001      	adds	r0, #1
    1cf4:	f000 80a3 	beq.w	1e3e <_svfiprintf_r+0x1b8>
    1cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1cfa:	445b      	add	r3, fp
    1cfc:	9309      	str	r3, [sp, #36]	; 0x24
    1cfe:	7833      	ldrb	r3, [r6, #0]
    1d00:	2b00      	cmp	r3, #0
    1d02:	f000 809c 	beq.w	1e3e <_svfiprintf_r+0x1b8>
    1d06:	2300      	movs	r3, #0
    1d08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1d0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
    1d10:	3601      	adds	r6, #1
    1d12:	9304      	str	r3, [sp, #16]
    1d14:	9307      	str	r3, [sp, #28]
    1d16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    1d1a:	931a      	str	r3, [sp, #104]	; 0x68
    1d1c:	4634      	mov	r4, r6
    1d1e:	2205      	movs	r2, #5
    1d20:	f814 1b01 	ldrb.w	r1, [r4], #1
    1d24:	484e      	ldr	r0, [pc, #312]	; (1e60 <_svfiprintf_r+0x1da>)
    1d26:	f7fe faeb 	bl	300 <memchr>
    1d2a:	9b04      	ldr	r3, [sp, #16]
    1d2c:	b9c0      	cbnz	r0, 1d60 <_svfiprintf_r+0xda>
    1d2e:	06d9      	lsls	r1, r3, #27
    1d30:	bf44      	itt	mi
    1d32:	2220      	movmi	r2, #32
    1d34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    1d38:	071a      	lsls	r2, r3, #28
    1d3a:	bf44      	itt	mi
    1d3c:	222b      	movmi	r2, #43	; 0x2b
    1d3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    1d42:	7832      	ldrb	r2, [r6, #0]
    1d44:	2a2a      	cmp	r2, #42	; 0x2a
    1d46:	d013      	beq.n	1d70 <_svfiprintf_r+0xea>
    1d48:	9a07      	ldr	r2, [sp, #28]
    1d4a:	4634      	mov	r4, r6
    1d4c:	2000      	movs	r0, #0
    1d4e:	260a      	movs	r6, #10
    1d50:	4621      	mov	r1, r4
    1d52:	f811 3b01 	ldrb.w	r3, [r1], #1
    1d56:	3b30      	subs	r3, #48	; 0x30
    1d58:	2b09      	cmp	r3, #9
    1d5a:	d94b      	bls.n	1df4 <_svfiprintf_r+0x16e>
    1d5c:	b970      	cbnz	r0, 1d7c <_svfiprintf_r+0xf6>
    1d5e:	e014      	b.n	1d8a <_svfiprintf_r+0x104>
    1d60:	eba0 0009 	sub.w	r0, r0, r9
    1d64:	fa0a f000 	lsl.w	r0, sl, r0
    1d68:	4318      	orrs	r0, r3
    1d6a:	9004      	str	r0, [sp, #16]
    1d6c:	4626      	mov	r6, r4
    1d6e:	e7d5      	b.n	1d1c <_svfiprintf_r+0x96>
    1d70:	9a03      	ldr	r2, [sp, #12]
    1d72:	1d11      	adds	r1, r2, #4
    1d74:	6812      	ldr	r2, [r2, #0]
    1d76:	9103      	str	r1, [sp, #12]
    1d78:	2a00      	cmp	r2, #0
    1d7a:	db01      	blt.n	1d80 <_svfiprintf_r+0xfa>
    1d7c:	9207      	str	r2, [sp, #28]
    1d7e:	e004      	b.n	1d8a <_svfiprintf_r+0x104>
    1d80:	4252      	negs	r2, r2
    1d82:	f043 0302 	orr.w	r3, r3, #2
    1d86:	9207      	str	r2, [sp, #28]
    1d88:	9304      	str	r3, [sp, #16]
    1d8a:	7823      	ldrb	r3, [r4, #0]
    1d8c:	2b2e      	cmp	r3, #46	; 0x2e
    1d8e:	d10c      	bne.n	1daa <_svfiprintf_r+0x124>
    1d90:	7863      	ldrb	r3, [r4, #1]
    1d92:	2b2a      	cmp	r3, #42	; 0x2a
    1d94:	d133      	bne.n	1dfe <_svfiprintf_r+0x178>
    1d96:	9b03      	ldr	r3, [sp, #12]
    1d98:	1d1a      	adds	r2, r3, #4
    1d9a:	681b      	ldr	r3, [r3, #0]
    1d9c:	9203      	str	r2, [sp, #12]
    1d9e:	2b00      	cmp	r3, #0
    1da0:	bfb8      	it	lt
    1da2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    1da6:	3402      	adds	r4, #2
    1da8:	9305      	str	r3, [sp, #20]
    1daa:	4e2e      	ldr	r6, [pc, #184]	; (1e64 <_svfiprintf_r+0x1de>)
    1dac:	7821      	ldrb	r1, [r4, #0]
    1dae:	2203      	movs	r2, #3
    1db0:	4630      	mov	r0, r6
    1db2:	f7fe faa5 	bl	300 <memchr>
    1db6:	b138      	cbz	r0, 1dc8 <_svfiprintf_r+0x142>
    1db8:	2340      	movs	r3, #64	; 0x40
    1dba:	1b80      	subs	r0, r0, r6
    1dbc:	fa03 f000 	lsl.w	r0, r3, r0
    1dc0:	9b04      	ldr	r3, [sp, #16]
    1dc2:	4303      	orrs	r3, r0
    1dc4:	3401      	adds	r4, #1
    1dc6:	9304      	str	r3, [sp, #16]
    1dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
    1dcc:	4826      	ldr	r0, [pc, #152]	; (1e68 <_svfiprintf_r+0x1e2>)
    1dce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    1dd2:	2206      	movs	r2, #6
    1dd4:	f7fe fa94 	bl	300 <memchr>
    1dd8:	2800      	cmp	r0, #0
    1dda:	d038      	beq.n	1e4e <_svfiprintf_r+0x1c8>
    1ddc:	4b23      	ldr	r3, [pc, #140]	; (1e6c <_svfiprintf_r+0x1e6>)
    1dde:	bb13      	cbnz	r3, 1e26 <_svfiprintf_r+0x1a0>
    1de0:	9b03      	ldr	r3, [sp, #12]
    1de2:	3307      	adds	r3, #7
    1de4:	f023 0307 	bic.w	r3, r3, #7
    1de8:	3308      	adds	r3, #8
    1dea:	9303      	str	r3, [sp, #12]
    1dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1dee:	4443      	add	r3, r8
    1df0:	9309      	str	r3, [sp, #36]	; 0x24
    1df2:	e76e      	b.n	1cd2 <_svfiprintf_r+0x4c>
    1df4:	fb06 3202 	mla	r2, r6, r2, r3
    1df8:	2001      	movs	r0, #1
    1dfa:	460c      	mov	r4, r1
    1dfc:	e7a8      	b.n	1d50 <_svfiprintf_r+0xca>
    1dfe:	2300      	movs	r3, #0
    1e00:	3401      	adds	r4, #1
    1e02:	9305      	str	r3, [sp, #20]
    1e04:	4619      	mov	r1, r3
    1e06:	260a      	movs	r6, #10
    1e08:	4620      	mov	r0, r4
    1e0a:	f810 2b01 	ldrb.w	r2, [r0], #1
    1e0e:	3a30      	subs	r2, #48	; 0x30
    1e10:	2a09      	cmp	r2, #9
    1e12:	d903      	bls.n	1e1c <_svfiprintf_r+0x196>
    1e14:	2b00      	cmp	r3, #0
    1e16:	d0c8      	beq.n	1daa <_svfiprintf_r+0x124>
    1e18:	9105      	str	r1, [sp, #20]
    1e1a:	e7c6      	b.n	1daa <_svfiprintf_r+0x124>
    1e1c:	fb06 2101 	mla	r1, r6, r1, r2
    1e20:	2301      	movs	r3, #1
    1e22:	4604      	mov	r4, r0
    1e24:	e7f0      	b.n	1e08 <_svfiprintf_r+0x182>
    1e26:	ab03      	add	r3, sp, #12
    1e28:	9300      	str	r3, [sp, #0]
    1e2a:	462a      	mov	r2, r5
    1e2c:	4b10      	ldr	r3, [pc, #64]	; (1e70 <_svfiprintf_r+0x1ea>)
    1e2e:	a904      	add	r1, sp, #16
    1e30:	4638      	mov	r0, r7
    1e32:	f3af 8000 	nop.w
    1e36:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    1e3a:	4680      	mov	r8, r0
    1e3c:	d1d6      	bne.n	1dec <_svfiprintf_r+0x166>
    1e3e:	89ab      	ldrh	r3, [r5, #12]
    1e40:	065b      	lsls	r3, r3, #25
    1e42:	f53f af34 	bmi.w	1cae <_svfiprintf_r+0x28>
    1e46:	9809      	ldr	r0, [sp, #36]	; 0x24
    1e48:	b01d      	add	sp, #116	; 0x74
    1e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e4e:	ab03      	add	r3, sp, #12
    1e50:	9300      	str	r3, [sp, #0]
    1e52:	462a      	mov	r2, r5
    1e54:	4b06      	ldr	r3, [pc, #24]	; (1e70 <_svfiprintf_r+0x1ea>)
    1e56:	a904      	add	r1, sp, #16
    1e58:	4638      	mov	r0, r7
    1e5a:	f7fe ffd4 	bl	e06 <_printf_i>
    1e5e:	e7ea      	b.n	1e36 <_svfiprintf_r+0x1b0>
    1e60:	0001c667 	.word	0x0001c667
    1e64:	0001c66d 	.word	0x0001c66d
    1e68:	0001c671 	.word	0x0001c671
    1e6c:	00000000 	.word	0x00000000
    1e70:	00001ae1 	.word	0x00001ae1

00001e74 <_init_signal_r>:
    1e74:	b538      	push	{r3, r4, r5, lr}
    1e76:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
    1e7a:	4605      	mov	r5, r0
    1e7c:	b95c      	cbnz	r4, 1e96 <_init_signal_r+0x22>
    1e7e:	2180      	movs	r1, #128	; 0x80
    1e80:	f7fe fdc0 	bl	a04 <_malloc_r>
    1e84:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
    1e88:	b138      	cbz	r0, 1e9a <_init_signal_r+0x26>
    1e8a:	1f03      	subs	r3, r0, #4
    1e8c:	307c      	adds	r0, #124	; 0x7c
    1e8e:	f843 4f04 	str.w	r4, [r3, #4]!
    1e92:	4283      	cmp	r3, r0
    1e94:	d1fb      	bne.n	1e8e <_init_signal_r+0x1a>
    1e96:	2000      	movs	r0, #0
    1e98:	bd38      	pop	{r3, r4, r5, pc}
    1e9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1e9e:	e7fb      	b.n	1e98 <_init_signal_r+0x24>

00001ea0 <_signal_r>:
    1ea0:	291f      	cmp	r1, #31
    1ea2:	b570      	push	{r4, r5, r6, lr}
    1ea4:	4604      	mov	r4, r0
    1ea6:	460d      	mov	r5, r1
    1ea8:	4616      	mov	r6, r2
    1eaa:	d904      	bls.n	1eb6 <_signal_r+0x16>
    1eac:	2316      	movs	r3, #22
    1eae:	6003      	str	r3, [r0, #0]
    1eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1eb4:	e008      	b.n	1ec8 <_signal_r+0x28>
    1eb6:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
    1eba:	b133      	cbz	r3, 1eca <_signal_r+0x2a>
    1ebc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    1ec0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    1ec4:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
    1ec8:	bd70      	pop	{r4, r5, r6, pc}
    1eca:	f7ff ffd3 	bl	1e74 <_init_signal_r>
    1ece:	2800      	cmp	r0, #0
    1ed0:	d0f4      	beq.n	1ebc <_signal_r+0x1c>
    1ed2:	e7ed      	b.n	1eb0 <_signal_r+0x10>

00001ed4 <_raise_r>:
    1ed4:	291f      	cmp	r1, #31
    1ed6:	b538      	push	{r3, r4, r5, lr}
    1ed8:	4604      	mov	r4, r0
    1eda:	460d      	mov	r5, r1
    1edc:	d904      	bls.n	1ee8 <_raise_r+0x14>
    1ede:	2316      	movs	r3, #22
    1ee0:	6003      	str	r3, [r0, #0]
    1ee2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1ee6:	bd38      	pop	{r3, r4, r5, pc}
    1ee8:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    1eec:	b112      	cbz	r2, 1ef4 <_raise_r+0x20>
    1eee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    1ef2:	b94b      	cbnz	r3, 1f08 <_raise_r+0x34>
    1ef4:	4620      	mov	r0, r4
    1ef6:	f000 f86b 	bl	1fd0 <_getpid_r>
    1efa:	462a      	mov	r2, r5
    1efc:	4601      	mov	r1, r0
    1efe:	4620      	mov	r0, r4
    1f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1f04:	f000 b852 	b.w	1fac <_kill_r>
    1f08:	2b01      	cmp	r3, #1
    1f0a:	d00a      	beq.n	1f22 <_raise_r+0x4e>
    1f0c:	1c59      	adds	r1, r3, #1
    1f0e:	d103      	bne.n	1f18 <_raise_r+0x44>
    1f10:	2316      	movs	r3, #22
    1f12:	6003      	str	r3, [r0, #0]
    1f14:	2001      	movs	r0, #1
    1f16:	e7e6      	b.n	1ee6 <_raise_r+0x12>
    1f18:	2400      	movs	r4, #0
    1f1a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    1f1e:	4628      	mov	r0, r5
    1f20:	4798      	blx	r3
    1f22:	2000      	movs	r0, #0
    1f24:	e7df      	b.n	1ee6 <_raise_r+0x12>

00001f26 <__sigtramp_r>:
    1f26:	291f      	cmp	r1, #31
    1f28:	b538      	push	{r3, r4, r5, lr}
    1f2a:	4604      	mov	r4, r0
    1f2c:	460d      	mov	r5, r1
    1f2e:	d902      	bls.n	1f36 <__sigtramp_r+0x10>
    1f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1f34:	bd38      	pop	{r3, r4, r5, pc}
    1f36:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
    1f3a:	b133      	cbz	r3, 1f4a <__sigtramp_r+0x24>
    1f3c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    1f40:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
    1f44:	b933      	cbnz	r3, 1f54 <__sigtramp_r+0x2e>
    1f46:	2001      	movs	r0, #1
    1f48:	e7f4      	b.n	1f34 <__sigtramp_r+0xe>
    1f4a:	f7ff ff93 	bl	1e74 <_init_signal_r>
    1f4e:	2800      	cmp	r0, #0
    1f50:	d0f4      	beq.n	1f3c <__sigtramp_r+0x16>
    1f52:	e7ed      	b.n	1f30 <__sigtramp_r+0xa>
    1f54:	1c59      	adds	r1, r3, #1
    1f56:	d008      	beq.n	1f6a <__sigtramp_r+0x44>
    1f58:	2b01      	cmp	r3, #1
    1f5a:	d008      	beq.n	1f6e <__sigtramp_r+0x48>
    1f5c:	2400      	movs	r4, #0
    1f5e:	4628      	mov	r0, r5
    1f60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    1f64:	4798      	blx	r3
    1f66:	4620      	mov	r0, r4
    1f68:	e7e4      	b.n	1f34 <__sigtramp_r+0xe>
    1f6a:	2002      	movs	r0, #2
    1f6c:	e7e2      	b.n	1f34 <__sigtramp_r+0xe>
    1f6e:	2003      	movs	r0, #3
    1f70:	e7e0      	b.n	1f34 <__sigtramp_r+0xe>

00001f72 <raise>:
    1f72:	4b02      	ldr	r3, [pc, #8]	; (1f7c <raise+0xa>)
    1f74:	4601      	mov	r1, r0
    1f76:	6818      	ldr	r0, [r3, #0]
    1f78:	f7ff bfac 	b.w	1ed4 <_raise_r>
    1f7c:	20002000 	.word	0x20002000

00001f80 <signal>:
    1f80:	4b02      	ldr	r3, [pc, #8]	; (1f8c <signal+0xc>)
    1f82:	460a      	mov	r2, r1
    1f84:	4601      	mov	r1, r0
    1f86:	6818      	ldr	r0, [r3, #0]
    1f88:	f7ff bf8a 	b.w	1ea0 <_signal_r>
    1f8c:	20002000 	.word	0x20002000

00001f90 <_init_signal>:
    1f90:	4b01      	ldr	r3, [pc, #4]	; (1f98 <_init_signal+0x8>)
    1f92:	6818      	ldr	r0, [r3, #0]
    1f94:	f7ff bf6e 	b.w	1e74 <_init_signal_r>
    1f98:	20002000 	.word	0x20002000

00001f9c <__sigtramp>:
    1f9c:	4b02      	ldr	r3, [pc, #8]	; (1fa8 <__sigtramp+0xc>)
    1f9e:	4601      	mov	r1, r0
    1fa0:	6818      	ldr	r0, [r3, #0]
    1fa2:	f7ff bfc0 	b.w	1f26 <__sigtramp_r>
    1fa6:	bf00      	nop
    1fa8:	20002000 	.word	0x20002000

00001fac <_kill_r>:
    1fac:	b538      	push	{r3, r4, r5, lr}
    1fae:	4c07      	ldr	r4, [pc, #28]	; (1fcc <_kill_r+0x20>)
    1fb0:	2300      	movs	r3, #0
    1fb2:	4605      	mov	r5, r0
    1fb4:	4608      	mov	r0, r1
    1fb6:	4611      	mov	r1, r2
    1fb8:	6023      	str	r3, [r4, #0]
    1fba:	f012 fffb 	bl	14fb4 <_kill>
    1fbe:	1c43      	adds	r3, r0, #1
    1fc0:	d102      	bne.n	1fc8 <_kill_r+0x1c>
    1fc2:	6823      	ldr	r3, [r4, #0]
    1fc4:	b103      	cbz	r3, 1fc8 <_kill_r+0x1c>
    1fc6:	602b      	str	r3, [r5, #0]
    1fc8:	bd38      	pop	{r3, r4, r5, pc}
    1fca:	bf00      	nop
    1fcc:	2000229c 	.word	0x2000229c

00001fd0 <_getpid_r>:
    1fd0:	f012 bff2 	b.w	14fb8 <_getpid>

00001fd4 <_write_r>:
    1fd4:	b538      	push	{r3, r4, r5, lr}
    1fd6:	4c07      	ldr	r4, [pc, #28]	; (1ff4 <_write_r+0x20>)
    1fd8:	4605      	mov	r5, r0
    1fda:	4608      	mov	r0, r1
    1fdc:	4611      	mov	r1, r2
    1fde:	2200      	movs	r2, #0
    1fe0:	6022      	str	r2, [r4, #0]
    1fe2:	461a      	mov	r2, r3
    1fe4:	f012 ffdb 	bl	14f9e <_write>
    1fe8:	1c43      	adds	r3, r0, #1
    1fea:	d102      	bne.n	1ff2 <_write_r+0x1e>
    1fec:	6823      	ldr	r3, [r4, #0]
    1fee:	b103      	cbz	r3, 1ff2 <_write_r+0x1e>
    1ff0:	602b      	str	r3, [r5, #0]
    1ff2:	bd38      	pop	{r3, r4, r5, pc}
    1ff4:	2000229c 	.word	0x2000229c

00001ff8 <_close_r>:
    1ff8:	b538      	push	{r3, r4, r5, lr}
    1ffa:	4c06      	ldr	r4, [pc, #24]	; (2014 <_ramfunc_ram_size+0x14>)
    1ffc:	2300      	movs	r3, #0
    1ffe:	4605      	mov	r5, r0
    2000:	4608      	mov	r0, r1
    2002:	6023      	str	r3, [r4, #0]
    2004:	f012 ffcf 	bl	14fa6 <_close>
    2008:	1c43      	adds	r3, r0, #1
    200a:	d102      	bne.n	2012 <_ramfunc_ram_size+0x12>
    200c:	6823      	ldr	r3, [r4, #0]
    200e:	b103      	cbz	r3, 2012 <_ramfunc_ram_size+0x12>
    2010:	602b      	str	r3, [r5, #0]
    2012:	bd38      	pop	{r3, r4, r5, pc}
    2014:	2000229c 	.word	0x2000229c

00002018 <_fstat_r>:
    2018:	b538      	push	{r3, r4, r5, lr}
    201a:	4c07      	ldr	r4, [pc, #28]	; (2038 <_fstat_r+0x20>)
    201c:	2300      	movs	r3, #0
    201e:	4605      	mov	r5, r0
    2020:	4608      	mov	r0, r1
    2022:	4611      	mov	r1, r2
    2024:	6023      	str	r3, [r4, #0]
    2026:	f012 ffc9 	bl	14fbc <_fstat>
    202a:	1c43      	adds	r3, r0, #1
    202c:	d102      	bne.n	2034 <_fstat_r+0x1c>
    202e:	6823      	ldr	r3, [r4, #0]
    2030:	b103      	cbz	r3, 2034 <_fstat_r+0x1c>
    2032:	602b      	str	r3, [r5, #0]
    2034:	bd38      	pop	{r3, r4, r5, pc}
    2036:	bf00      	nop
    2038:	2000229c 	.word	0x2000229c

0000203c <_isatty_r>:
    203c:	b538      	push	{r3, r4, r5, lr}
    203e:	4c06      	ldr	r4, [pc, #24]	; (2058 <_isatty_r+0x1c>)
    2040:	2300      	movs	r3, #0
    2042:	4605      	mov	r5, r0
    2044:	4608      	mov	r0, r1
    2046:	6023      	str	r3, [r4, #0]
    2048:	f012 ffb2 	bl	14fb0 <_isatty>
    204c:	1c43      	adds	r3, r0, #1
    204e:	d102      	bne.n	2056 <_isatty_r+0x1a>
    2050:	6823      	ldr	r3, [r4, #0]
    2052:	b103      	cbz	r3, 2056 <_isatty_r+0x1a>
    2054:	602b      	str	r3, [r5, #0]
    2056:	bd38      	pop	{r3, r4, r5, pc}
    2058:	2000229c 	.word	0x2000229c

0000205c <_lseek_r>:
    205c:	b538      	push	{r3, r4, r5, lr}
    205e:	4c07      	ldr	r4, [pc, #28]	; (207c <_lseek_r+0x20>)
    2060:	4605      	mov	r5, r0
    2062:	4608      	mov	r0, r1
    2064:	4611      	mov	r1, r2
    2066:	2200      	movs	r2, #0
    2068:	6022      	str	r2, [r4, #0]
    206a:	461a      	mov	r2, r3
    206c:	f012 ff9e 	bl	14fac <_lseek>
    2070:	1c43      	adds	r3, r0, #1
    2072:	d102      	bne.n	207a <_lseek_r+0x1e>
    2074:	6823      	ldr	r3, [r4, #0]
    2076:	b103      	cbz	r3, 207a <_lseek_r+0x1e>
    2078:	602b      	str	r3, [r5, #0]
    207a:	bd38      	pop	{r3, r4, r5, pc}
    207c:	2000229c 	.word	0x2000229c

00002080 <_read_r>:
    2080:	b538      	push	{r3, r4, r5, lr}
    2082:	4c07      	ldr	r4, [pc, #28]	; (20a0 <_read_r+0x20>)
    2084:	4605      	mov	r5, r0
    2086:	4608      	mov	r0, r1
    2088:	4611      	mov	r1, r2
    208a:	2200      	movs	r2, #0
    208c:	6022      	str	r2, [r4, #0]
    208e:	461a      	mov	r2, r3
    2090:	f012 ff81 	bl	14f96 <_read>
    2094:	1c43      	adds	r3, r0, #1
    2096:	d102      	bne.n	209e <_read_r+0x1e>
    2098:	6823      	ldr	r3, [r4, #0]
    209a:	b103      	cbz	r3, 209e <_read_r+0x1e>
    209c:	602b      	str	r3, [r5, #0]
    209e:	bd38      	pop	{r3, r4, r5, pc}
    20a0:	2000229c 	.word	0x2000229c

000020a4 <__udivmoddi4>:
    20a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20a8:	9f09      	ldr	r7, [sp, #36]	; 0x24
    20aa:	4615      	mov	r5, r2
    20ac:	4604      	mov	r4, r0
    20ae:	468e      	mov	lr, r1
    20b0:	461e      	mov	r6, r3
    20b2:	2b00      	cmp	r3, #0
    20b4:	f040 80cc 	bne.w	2250 <__udivmoddi4+0x1ac>
    20b8:	428a      	cmp	r2, r1
    20ba:	fab2 fc82 	clz	ip, r2
    20be:	d94c      	bls.n	215a <__udivmoddi4+0xb6>
    20c0:	f1bc 0f00 	cmp.w	ip, #0
    20c4:	d00b      	beq.n	20de <__udivmoddi4+0x3a>
    20c6:	f1cc 0820 	rsb	r8, ip, #32
    20ca:	fa01 fe0c 	lsl.w	lr, r1, ip
    20ce:	fa20 f808 	lsr.w	r8, r0, r8
    20d2:	fa02 f50c 	lsl.w	r5, r2, ip
    20d6:	ea48 0e0e 	orr.w	lr, r8, lr
    20da:	fa00 f40c 	lsl.w	r4, r0, ip
    20de:	ea4f 4915 	mov.w	r9, r5, lsr #16
    20e2:	fa1f f885 	uxth.w	r8, r5
    20e6:	fbbe faf9 	udiv	sl, lr, r9
    20ea:	0c21      	lsrs	r1, r4, #16
    20ec:	fb09 e31a 	mls	r3, r9, sl, lr
    20f0:	fb0a fb08 	mul.w	fp, sl, r8
    20f4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
    20f8:	459b      	cmp	fp, r3
    20fa:	d92a      	bls.n	2152 <__udivmoddi4+0xae>
    20fc:	18eb      	adds	r3, r5, r3
    20fe:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
    2102:	d204      	bcs.n	210e <__udivmoddi4+0x6a>
    2104:	459b      	cmp	fp, r3
    2106:	d902      	bls.n	210e <__udivmoddi4+0x6a>
    2108:	f1aa 0002 	sub.w	r0, sl, #2
    210c:	442b      	add	r3, r5
    210e:	eba3 030b 	sub.w	r3, r3, fp
    2112:	b2a4      	uxth	r4, r4
    2114:	fbb3 f2f9 	udiv	r2, r3, r9
    2118:	fb09 3312 	mls	r3, r9, r2, r3
    211c:	fb02 f808 	mul.w	r8, r2, r8
    2120:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    2124:	45a0      	cmp	r8, r4
    2126:	d916      	bls.n	2156 <__udivmoddi4+0xb2>
    2128:	192c      	adds	r4, r5, r4
    212a:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
    212e:	d203      	bcs.n	2138 <__udivmoddi4+0x94>
    2130:	45a0      	cmp	r8, r4
    2132:	d901      	bls.n	2138 <__udivmoddi4+0x94>
    2134:	1e93      	subs	r3, r2, #2
    2136:	442c      	add	r4, r5
    2138:	eba4 0408 	sub.w	r4, r4, r8
    213c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    2140:	b127      	cbz	r7, 214c <__udivmoddi4+0xa8>
    2142:	fa24 f40c 	lsr.w	r4, r4, ip
    2146:	2300      	movs	r3, #0
    2148:	603c      	str	r4, [r7, #0]
    214a:	607b      	str	r3, [r7, #4]
    214c:	4631      	mov	r1, r6
    214e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2152:	4650      	mov	r0, sl
    2154:	e7db      	b.n	210e <__udivmoddi4+0x6a>
    2156:	4613      	mov	r3, r2
    2158:	e7ee      	b.n	2138 <__udivmoddi4+0x94>
    215a:	b902      	cbnz	r2, 215e <__udivmoddi4+0xba>
    215c:	deff      	udf	#255	; 0xff
    215e:	f1bc 0f00 	cmp.w	ip, #0
    2162:	d12e      	bne.n	21c2 <__udivmoddi4+0x11e>
    2164:	1a8b      	subs	r3, r1, r2
    2166:	2601      	movs	r6, #1
    2168:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    216c:	b2aa      	uxth	r2, r5
    216e:	fbb3 f8fe 	udiv	r8, r3, lr
    2172:	0c21      	lsrs	r1, r4, #16
    2174:	fb0e 3318 	mls	r3, lr, r8, r3
    2178:	fb08 f902 	mul.w	r9, r8, r2
    217c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
    2180:	4599      	cmp	r9, r3
    2182:	d961      	bls.n	2248 <__udivmoddi4+0x1a4>
    2184:	18eb      	adds	r3, r5, r3
    2186:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    218a:	d204      	bcs.n	2196 <__udivmoddi4+0xf2>
    218c:	4599      	cmp	r9, r3
    218e:	d902      	bls.n	2196 <__udivmoddi4+0xf2>
    2190:	f1a8 0002 	sub.w	r0, r8, #2
    2194:	442b      	add	r3, r5
    2196:	eba3 0309 	sub.w	r3, r3, r9
    219a:	b2a4      	uxth	r4, r4
    219c:	fbb3 f1fe 	udiv	r1, r3, lr
    21a0:	fb0e 3311 	mls	r3, lr, r1, r3
    21a4:	434a      	muls	r2, r1
    21a6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    21aa:	42a2      	cmp	r2, r4
    21ac:	d94e      	bls.n	224c <__udivmoddi4+0x1a8>
    21ae:	192c      	adds	r4, r5, r4
    21b0:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
    21b4:	d203      	bcs.n	21be <__udivmoddi4+0x11a>
    21b6:	42a2      	cmp	r2, r4
    21b8:	d901      	bls.n	21be <__udivmoddi4+0x11a>
    21ba:	1e8b      	subs	r3, r1, #2
    21bc:	442c      	add	r4, r5
    21be:	1aa4      	subs	r4, r4, r2
    21c0:	e7bc      	b.n	213c <__udivmoddi4+0x98>
    21c2:	f1cc 0e20 	rsb	lr, ip, #32
    21c6:	fa02 f50c 	lsl.w	r5, r2, ip
    21ca:	fa21 f90e 	lsr.w	r9, r1, lr
    21ce:	fa01 f30c 	lsl.w	r3, r1, ip
    21d2:	fa20 fe0e 	lsr.w	lr, r0, lr
    21d6:	ea4e 0303 	orr.w	r3, lr, r3
    21da:	ea4f 4815 	mov.w	r8, r5, lsr #16
    21de:	fa00 f40c 	lsl.w	r4, r0, ip
    21e2:	fbb9 f1f8 	udiv	r1, r9, r8
    21e6:	fa1f fe85 	uxth.w	lr, r5
    21ea:	fb08 9211 	mls	r2, r8, r1, r9
    21ee:	0c18      	lsrs	r0, r3, #16
    21f0:	fb01 f60e 	mul.w	r6, r1, lr
    21f4:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
    21f8:	4296      	cmp	r6, r2
    21fa:	d921      	bls.n	2240 <__udivmoddi4+0x19c>
    21fc:	18aa      	adds	r2, r5, r2
    21fe:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
    2202:	d203      	bcs.n	220c <__udivmoddi4+0x168>
    2204:	4296      	cmp	r6, r2
    2206:	d901      	bls.n	220c <__udivmoddi4+0x168>
    2208:	1e88      	subs	r0, r1, #2
    220a:	442a      	add	r2, r5
    220c:	1b92      	subs	r2, r2, r6
    220e:	b29b      	uxth	r3, r3
    2210:	fbb2 f9f8 	udiv	r9, r2, r8
    2214:	fb08 2219 	mls	r2, r8, r9, r2
    2218:	fb09 fe0e 	mul.w	lr, r9, lr
    221c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    2220:	459e      	cmp	lr, r3
    2222:	d90f      	bls.n	2244 <__udivmoddi4+0x1a0>
    2224:	18eb      	adds	r3, r5, r3
    2226:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
    222a:	d204      	bcs.n	2236 <__udivmoddi4+0x192>
    222c:	459e      	cmp	lr, r3
    222e:	d902      	bls.n	2236 <__udivmoddi4+0x192>
    2230:	f1a9 0602 	sub.w	r6, r9, #2
    2234:	442b      	add	r3, r5
    2236:	eba3 030e 	sub.w	r3, r3, lr
    223a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
    223e:	e793      	b.n	2168 <__udivmoddi4+0xc4>
    2240:	4608      	mov	r0, r1
    2242:	e7e3      	b.n	220c <__udivmoddi4+0x168>
    2244:	464e      	mov	r6, r9
    2246:	e7f6      	b.n	2236 <__udivmoddi4+0x192>
    2248:	4640      	mov	r0, r8
    224a:	e7a4      	b.n	2196 <__udivmoddi4+0xf2>
    224c:	460b      	mov	r3, r1
    224e:	e7b6      	b.n	21be <__udivmoddi4+0x11a>
    2250:	428b      	cmp	r3, r1
    2252:	d905      	bls.n	2260 <__udivmoddi4+0x1bc>
    2254:	b10f      	cbz	r7, 225a <__udivmoddi4+0x1b6>
    2256:	e9c7 0100 	strd	r0, r1, [r7]
    225a:	2600      	movs	r6, #0
    225c:	4630      	mov	r0, r6
    225e:	e775      	b.n	214c <__udivmoddi4+0xa8>
    2260:	fab3 fc83 	clz	ip, r3
    2264:	f1bc 0f00 	cmp.w	ip, #0
    2268:	d10f      	bne.n	228a <__udivmoddi4+0x1e6>
    226a:	428b      	cmp	r3, r1
    226c:	d301      	bcc.n	2272 <__udivmoddi4+0x1ce>
    226e:	4282      	cmp	r2, r0
    2270:	d809      	bhi.n	2286 <__udivmoddi4+0x1e2>
    2272:	1a84      	subs	r4, r0, r2
    2274:	eb61 0e03 	sbc.w	lr, r1, r3
    2278:	2001      	movs	r0, #1
    227a:	2f00      	cmp	r7, #0
    227c:	d06a      	beq.n	2354 <__udivmoddi4+0x2b0>
    227e:	e9c7 4e00 	strd	r4, lr, [r7]
    2282:	2600      	movs	r6, #0
    2284:	e762      	b.n	214c <__udivmoddi4+0xa8>
    2286:	4660      	mov	r0, ip
    2288:	e7f7      	b.n	227a <__udivmoddi4+0x1d6>
    228a:	f1cc 0e20 	rsb	lr, ip, #32
    228e:	fa03 f30c 	lsl.w	r3, r3, ip
    2292:	fa22 f50e 	lsr.w	r5, r2, lr
    2296:	fa21 f40e 	lsr.w	r4, r1, lr
    229a:	431d      	orrs	r5, r3
    229c:	fa01 f30c 	lsl.w	r3, r1, ip
    22a0:	fa20 f10e 	lsr.w	r1, r0, lr
    22a4:	430b      	orrs	r3, r1
    22a6:	ea4f 4a15 	mov.w	sl, r5, lsr #16
    22aa:	fa00 f60c 	lsl.w	r6, r0, ip
    22ae:	fbb4 f9fa 	udiv	r9, r4, sl
    22b2:	fa1f f885 	uxth.w	r8, r5
    22b6:	fb0a 4019 	mls	r0, sl, r9, r4
    22ba:	0c1c      	lsrs	r4, r3, #16
    22bc:	fb09 f108 	mul.w	r1, r9, r8
    22c0:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
    22c4:	42a1      	cmp	r1, r4
    22c6:	fa02 f20c 	lsl.w	r2, r2, ip
    22ca:	d93f      	bls.n	234c <__udivmoddi4+0x2a8>
    22cc:	192c      	adds	r4, r5, r4
    22ce:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    22d2:	d204      	bcs.n	22de <__udivmoddi4+0x23a>
    22d4:	42a1      	cmp	r1, r4
    22d6:	d902      	bls.n	22de <__udivmoddi4+0x23a>
    22d8:	f1a9 0002 	sub.w	r0, r9, #2
    22dc:	442c      	add	r4, r5
    22de:	1a64      	subs	r4, r4, r1
    22e0:	b29b      	uxth	r3, r3
    22e2:	fbb4 f9fa 	udiv	r9, r4, sl
    22e6:	fb0a 4419 	mls	r4, sl, r9, r4
    22ea:	fb09 f808 	mul.w	r8, r9, r8
    22ee:	ea43 4104 	orr.w	r1, r3, r4, lsl #16
    22f2:	4588      	cmp	r8, r1
    22f4:	d92c      	bls.n	2350 <__udivmoddi4+0x2ac>
    22f6:	1869      	adds	r1, r5, r1
    22f8:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
    22fc:	d204      	bcs.n	2308 <__udivmoddi4+0x264>
    22fe:	4588      	cmp	r8, r1
    2300:	d902      	bls.n	2308 <__udivmoddi4+0x264>
    2302:	f1a9 0302 	sub.w	r3, r9, #2
    2306:	4429      	add	r1, r5
    2308:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    230c:	eba1 0108 	sub.w	r1, r1, r8
    2310:	fba0 8902 	umull	r8, r9, r0, r2
    2314:	4549      	cmp	r1, r9
    2316:	46c2      	mov	sl, r8
    2318:	464c      	mov	r4, r9
    231a:	d302      	bcc.n	2322 <__udivmoddi4+0x27e>
    231c:	d106      	bne.n	232c <__udivmoddi4+0x288>
    231e:	4546      	cmp	r6, r8
    2320:	d204      	bcs.n	232c <__udivmoddi4+0x288>
    2322:	ebb8 0a02 	subs.w	sl, r8, r2
    2326:	eb69 0405 	sbc.w	r4, r9, r5
    232a:	3801      	subs	r0, #1
    232c:	b197      	cbz	r7, 2354 <__udivmoddi4+0x2b0>
    232e:	ebb6 030a 	subs.w	r3, r6, sl
    2332:	eb61 0604 	sbc.w	r6, r1, r4
    2336:	fa06 fe0e 	lsl.w	lr, r6, lr
    233a:	fa23 f30c 	lsr.w	r3, r3, ip
    233e:	ea4e 0303 	orr.w	r3, lr, r3
    2342:	fa26 f60c 	lsr.w	r6, r6, ip
    2346:	e9c7 3600 	strd	r3, r6, [r7]
    234a:	e79a      	b.n	2282 <__udivmoddi4+0x1de>
    234c:	4648      	mov	r0, r9
    234e:	e7c6      	b.n	22de <__udivmoddi4+0x23a>
    2350:	464b      	mov	r3, r9
    2352:	e7d9      	b.n	2308 <__udivmoddi4+0x264>
    2354:	463e      	mov	r6, r7
    2356:	e6f9      	b.n	214c <__udivmoddi4+0xa8>

00002358 <abs>:
    2358:	2800      	cmp	r0, #0
    235a:	bfb8      	it	lt
    235c:	4240      	neglt	r0, r0
    235e:	4770      	bx	lr

00002360 <memcmp>:
    2360:	b530      	push	{r4, r5, lr}
    2362:	3901      	subs	r1, #1
    2364:	2400      	movs	r4, #0
    2366:	42a2      	cmp	r2, r4
    2368:	d101      	bne.n	236e <memcmp+0xe>
    236a:	2000      	movs	r0, #0
    236c:	e005      	b.n	237a <memcmp+0x1a>
    236e:	5d03      	ldrb	r3, [r0, r4]
    2370:	3401      	adds	r4, #1
    2372:	5d0d      	ldrb	r5, [r1, r4]
    2374:	42ab      	cmp	r3, r5
    2376:	d0f6      	beq.n	2366 <memcmp+0x6>
    2378:	1b58      	subs	r0, r3, r5
    237a:	bd30      	pop	{r4, r5, pc}

0000237c <memcpy>:
    237c:	440a      	add	r2, r1
    237e:	4291      	cmp	r1, r2
    2380:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    2384:	d100      	bne.n	2388 <memcpy+0xc>
    2386:	4770      	bx	lr
    2388:	b510      	push	{r4, lr}
    238a:	f811 4b01 	ldrb.w	r4, [r1], #1
    238e:	f803 4f01 	strb.w	r4, [r3, #1]!
    2392:	4291      	cmp	r1, r2
    2394:	d1f9      	bne.n	238a <memcpy+0xe>
    2396:	bd10      	pop	{r4, pc}

00002398 <__memcpy_chk>:
    2398:	429a      	cmp	r2, r3
    239a:	b508      	push	{r3, lr}
    239c:	d901      	bls.n	23a2 <__memcpy_chk+0xa>
    239e:	f7ff f81b 	bl	13d8 <__chk_fail>
    23a2:	4281      	cmp	r1, r0
    23a4:	d804      	bhi.n	23b0 <__memcpy_chk+0x18>
    23a6:	188b      	adds	r3, r1, r2
    23a8:	4298      	cmp	r0, r3
    23aa:	d3f8      	bcc.n	239e <__memcpy_chk+0x6>
    23ac:	4281      	cmp	r1, r0
    23ae:	d102      	bne.n	23b6 <__memcpy_chk+0x1e>
    23b0:	1883      	adds	r3, r0, r2
    23b2:	4299      	cmp	r1, r3
    23b4:	d3f3      	bcc.n	239e <__memcpy_chk+0x6>
    23b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    23ba:	f7ff bfdf 	b.w	237c <memcpy>

000023be <memmove>:
    23be:	4288      	cmp	r0, r1
    23c0:	b510      	push	{r4, lr}
    23c2:	eb01 0302 	add.w	r3, r1, r2
    23c6:	d902      	bls.n	23ce <memmove+0x10>
    23c8:	4283      	cmp	r3, r0
    23ca:	461c      	mov	r4, r3
    23cc:	d807      	bhi.n	23de <memmove+0x20>
    23ce:	1e42      	subs	r2, r0, #1
    23d0:	4299      	cmp	r1, r3
    23d2:	d008      	beq.n	23e6 <memmove+0x28>
    23d4:	f811 4b01 	ldrb.w	r4, [r1], #1
    23d8:	f802 4f01 	strb.w	r4, [r2, #1]!
    23dc:	e7f8      	b.n	23d0 <memmove+0x12>
    23de:	1883      	adds	r3, r0, r2
    23e0:	1a9a      	subs	r2, r3, r2
    23e2:	429a      	cmp	r2, r3
    23e4:	d100      	bne.n	23e8 <memmove+0x2a>
    23e6:	bd10      	pop	{r4, pc}
    23e8:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    23ec:	f803 1d01 	strb.w	r1, [r3, #-1]!
    23f0:	e7f7      	b.n	23e2 <memmove+0x24>

000023f2 <memset>:
    23f2:	4402      	add	r2, r0
    23f4:	4603      	mov	r3, r0
    23f6:	4293      	cmp	r3, r2
    23f8:	d100      	bne.n	23fc <memset+0xa>
    23fa:	4770      	bx	lr
    23fc:	f803 1b01 	strb.w	r1, [r3], #1
    2400:	e7f9      	b.n	23f6 <memset+0x4>

00002402 <strchr>:
    2402:	b2c9      	uxtb	r1, r1
    2404:	4603      	mov	r3, r0
    2406:	f810 2b01 	ldrb.w	r2, [r0], #1
    240a:	b11a      	cbz	r2, 2414 <strchr+0x12>
    240c:	428a      	cmp	r2, r1
    240e:	d1f9      	bne.n	2404 <strchr+0x2>
    2410:	4618      	mov	r0, r3
    2412:	4770      	bx	lr
    2414:	2900      	cmp	r1, #0
    2416:	bf18      	it	ne
    2418:	2300      	movne	r3, #0
    241a:	e7f9      	b.n	2410 <strchr+0xe>

0000241c <strcmp>:
    241c:	f810 2b01 	ldrb.w	r2, [r0], #1
    2420:	f811 3b01 	ldrb.w	r3, [r1], #1
    2424:	2a01      	cmp	r2, #1
    2426:	bf28      	it	cs
    2428:	429a      	cmpcs	r2, r3
    242a:	d0f7      	beq.n	241c <strcmp>
    242c:	1ad0      	subs	r0, r2, r3
    242e:	4770      	bx	lr

00002430 <strlen>:
    2430:	4603      	mov	r3, r0
    2432:	f813 2b01 	ldrb.w	r2, [r3], #1
    2436:	2a00      	cmp	r2, #0
    2438:	d1fb      	bne.n	2432 <strlen+0x2>
    243a:	1a18      	subs	r0, r3, r0
    243c:	3801      	subs	r0, #1
    243e:	4770      	bx	lr

00002440 <strncmp>:
    2440:	b510      	push	{r4, lr}
    2442:	b16a      	cbz	r2, 2460 <strncmp+0x20>
    2444:	3901      	subs	r1, #1
    2446:	1884      	adds	r4, r0, r2
    2448:	f810 3b01 	ldrb.w	r3, [r0], #1
    244c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    2450:	4293      	cmp	r3, r2
    2452:	d103      	bne.n	245c <strncmp+0x1c>
    2454:	42a0      	cmp	r0, r4
    2456:	d001      	beq.n	245c <strncmp+0x1c>
    2458:	2b00      	cmp	r3, #0
    245a:	d1f5      	bne.n	2448 <strncmp+0x8>
    245c:	1a98      	subs	r0, r3, r2
    245e:	bd10      	pop	{r4, pc}
    2460:	4610      	mov	r0, r2
    2462:	e7fc      	b.n	245e <strncmp+0x1e>

00002464 <strncpy>:
    2464:	b510      	push	{r4, lr}
    2466:	3901      	subs	r1, #1
    2468:	4603      	mov	r3, r0
    246a:	b132      	cbz	r2, 247a <strncpy+0x16>
    246c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    2470:	f803 4b01 	strb.w	r4, [r3], #1
    2474:	3a01      	subs	r2, #1
    2476:	2c00      	cmp	r4, #0
    2478:	d1f7      	bne.n	246a <strncpy+0x6>
    247a:	441a      	add	r2, r3
    247c:	2100      	movs	r1, #0
    247e:	4293      	cmp	r3, r2
    2480:	d100      	bne.n	2484 <strncpy+0x20>
    2482:	bd10      	pop	{r4, pc}
    2484:	f803 1b01 	strb.w	r1, [r3], #1
    2488:	e7f9      	b.n	247e <strncpy+0x1a>

0000248a <strrchr>:
    248a:	b538      	push	{r3, r4, r5, lr}
    248c:	4603      	mov	r3, r0
    248e:	460d      	mov	r5, r1
    2490:	b969      	cbnz	r1, 24ae <strrchr+0x24>
    2492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2496:	f7ff bfb4 	b.w	2402 <strchr>
    249a:	1c43      	adds	r3, r0, #1
    249c:	4604      	mov	r4, r0
    249e:	4629      	mov	r1, r5
    24a0:	4618      	mov	r0, r3
    24a2:	f7ff ffae 	bl	2402 <strchr>
    24a6:	2800      	cmp	r0, #0
    24a8:	d1f7      	bne.n	249a <strrchr+0x10>
    24aa:	4620      	mov	r0, r4
    24ac:	bd38      	pop	{r3, r4, r5, pc}
    24ae:	2400      	movs	r4, #0
    24b0:	e7f5      	b.n	249e <strrchr+0x14>

000024b2 <abort>:
    24b2:	b508      	push	{r3, lr}
    24b4:	2006      	movs	r0, #6
    24b6:	f7ff fd5c 	bl	1f72 <raise>
    24ba:	2001      	movs	r0, #1
    24bc:	f009 f998 	bl	b7f0 <_exit>

000024c0 <_fwalk>:
    24c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    24c4:	4688      	mov	r8, r1
    24c6:	f500 74a6 	add.w	r4, r0, #332	; 0x14c
    24ca:	2600      	movs	r6, #0
    24cc:	b914      	cbnz	r4, 24d4 <_fwalk+0x14>
    24ce:	4630      	mov	r0, r6
    24d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    24d4:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
    24d8:	3f01      	subs	r7, #1
    24da:	d501      	bpl.n	24e0 <_fwalk+0x20>
    24dc:	6824      	ldr	r4, [r4, #0]
    24de:	e7f5      	b.n	24cc <_fwalk+0xc>
    24e0:	89ab      	ldrh	r3, [r5, #12]
    24e2:	2b01      	cmp	r3, #1
    24e4:	d906      	bls.n	24f4 <_fwalk+0x34>
    24e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    24ea:	3301      	adds	r3, #1
    24ec:	d002      	beq.n	24f4 <_fwalk+0x34>
    24ee:	4628      	mov	r0, r5
    24f0:	47c0      	blx	r8
    24f2:	4306      	orrs	r6, r0
    24f4:	3564      	adds	r5, #100	; 0x64
    24f6:	e7ef      	b.n	24d8 <_fwalk+0x18>

000024f8 <_fwalk_reent>:
    24f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    24fc:	4680      	mov	r8, r0
    24fe:	4689      	mov	r9, r1
    2500:	f500 74a6 	add.w	r4, r0, #332	; 0x14c
    2504:	2600      	movs	r6, #0
    2506:	b914      	cbnz	r4, 250e <_fwalk_reent+0x16>
    2508:	4630      	mov	r0, r6
    250a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    250e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
    2512:	3f01      	subs	r7, #1
    2514:	d501      	bpl.n	251a <_fwalk_reent+0x22>
    2516:	6824      	ldr	r4, [r4, #0]
    2518:	e7f5      	b.n	2506 <_fwalk_reent+0xe>
    251a:	89ab      	ldrh	r3, [r5, #12]
    251c:	2b01      	cmp	r3, #1
    251e:	d907      	bls.n	2530 <_fwalk_reent+0x38>
    2520:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    2524:	3301      	adds	r3, #1
    2526:	d003      	beq.n	2530 <_fwalk_reent+0x38>
    2528:	4629      	mov	r1, r5
    252a:	4640      	mov	r0, r8
    252c:	47c8      	blx	r9
    252e:	4306      	orrs	r6, r0
    2530:	3564      	adds	r5, #100	; 0x64
    2532:	e7ee      	b.n	2512 <_fwalk_reent+0x1a>

00002534 <__malloc_lock>:
    2534:	4770      	bx	lr

00002536 <__malloc_unlock>:
    2536:	4770      	bx	lr

00002538 <_realloc_r>:
    2538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    253a:	4607      	mov	r7, r0
    253c:	4614      	mov	r4, r2
    253e:	460e      	mov	r6, r1
    2540:	b921      	cbnz	r1, 254c <_realloc_r+0x14>
    2542:	4611      	mov	r1, r2
    2544:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2548:	f7fe ba5c 	b.w	a04 <_malloc_r>
    254c:	b922      	cbnz	r2, 2558 <_realloc_r+0x20>
    254e:	f7ff fa79 	bl	1a44 <_free_r>
    2552:	4625      	mov	r5, r4
    2554:	4628      	mov	r0, r5
    2556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2558:	f000 f859 	bl	260e <_malloc_usable_size_r>
    255c:	42a0      	cmp	r0, r4
    255e:	d20f      	bcs.n	2580 <_realloc_r+0x48>
    2560:	4621      	mov	r1, r4
    2562:	4638      	mov	r0, r7
    2564:	f7fe fa4e 	bl	a04 <_malloc_r>
    2568:	4605      	mov	r5, r0
    256a:	2800      	cmp	r0, #0
    256c:	d0f2      	beq.n	2554 <_realloc_r+0x1c>
    256e:	4631      	mov	r1, r6
    2570:	4622      	mov	r2, r4
    2572:	f7ff ff03 	bl	237c <memcpy>
    2576:	4631      	mov	r1, r6
    2578:	4638      	mov	r0, r7
    257a:	f7ff fa63 	bl	1a44 <_free_r>
    257e:	e7e9      	b.n	2554 <_realloc_r+0x1c>
    2580:	4635      	mov	r5, r6
    2582:	e7e7      	b.n	2554 <_realloc_r+0x1c>

00002584 <__sread>:
    2584:	b510      	push	{r4, lr}
    2586:	460c      	mov	r4, r1
    2588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    258c:	f7ff fd78 	bl	2080 <_read_r>
    2590:	2800      	cmp	r0, #0
    2592:	bfab      	itete	ge
    2594:	6d23      	ldrge	r3, [r4, #80]	; 0x50
    2596:	89a3      	ldrhlt	r3, [r4, #12]
    2598:	181b      	addge	r3, r3, r0
    259a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    259e:	bfac      	ite	ge
    25a0:	6523      	strge	r3, [r4, #80]	; 0x50
    25a2:	81a3      	strhlt	r3, [r4, #12]
    25a4:	bd10      	pop	{r4, pc}

000025a6 <__seofread>:
    25a6:	2000      	movs	r0, #0
    25a8:	4770      	bx	lr

000025aa <__swrite>:
    25aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    25ae:	461f      	mov	r7, r3
    25b0:	898b      	ldrh	r3, [r1, #12]
    25b2:	05db      	lsls	r3, r3, #23
    25b4:	4605      	mov	r5, r0
    25b6:	460c      	mov	r4, r1
    25b8:	4616      	mov	r6, r2
    25ba:	d505      	bpl.n	25c8 <__swrite+0x1e>
    25bc:	2302      	movs	r3, #2
    25be:	2200      	movs	r2, #0
    25c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    25c4:	f7ff fd4a 	bl	205c <_lseek_r>
    25c8:	89a3      	ldrh	r3, [r4, #12]
    25ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    25ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    25d2:	81a3      	strh	r3, [r4, #12]
    25d4:	4632      	mov	r2, r6
    25d6:	463b      	mov	r3, r7
    25d8:	4628      	mov	r0, r5
    25da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    25de:	f7ff bcf9 	b.w	1fd4 <_write_r>

000025e2 <__sseek>:
    25e2:	b510      	push	{r4, lr}
    25e4:	460c      	mov	r4, r1
    25e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    25ea:	f7ff fd37 	bl	205c <_lseek_r>
    25ee:	1c43      	adds	r3, r0, #1
    25f0:	89a3      	ldrh	r3, [r4, #12]
    25f2:	bf15      	itete	ne
    25f4:	6520      	strne	r0, [r4, #80]	; 0x50
    25f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    25fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    25fe:	81a3      	strheq	r3, [r4, #12]
    2600:	bf18      	it	ne
    2602:	81a3      	strhne	r3, [r4, #12]
    2604:	bd10      	pop	{r4, pc}

00002606 <__sclose>:
    2606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    260a:	f7ff bcf5 	b.w	1ff8 <_close_r>

0000260e <_malloc_usable_size_r>:
    260e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2612:	1f18      	subs	r0, r3, #4
    2614:	2b00      	cmp	r3, #0
    2616:	bfbc      	itt	lt
    2618:	580b      	ldrlt	r3, [r1, r0]
    261a:	18c0      	addlt	r0, r0, r3
    261c:	4770      	bx	lr
	...

00002620 <test_debug_patch>:

static void test_rt_task(void) {
	// init_rt_task_servo_motor();
}

static void test_debug_patch(void) {
    2620:	b508      	push	{r3, lr}
	DEBUG_LOG("test_debug_patch\n");
    2622:	4803      	ldr	r0, [pc, #12]	; (2630 <test_debug_patch+0x10>)
    2624:	f00e ff53 	bl	114ce <debug_log>
#ifndef LINUX_TEST
	test_debugmon_patch();
#endif
	
}
    2628:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	test_debugmon_patch();
    262c:	f000 bc60 	b.w	2ef0 <test_debugmon_patch>
    2630:	00019979 	.word	0x00019979

00002634 <shell_printf>:
static void shell_printf(char *fmt, ...) {
    2634:	b40f      	push	{r0, r1, r2, r3}
    2636:	b513      	push	{r0, r1, r4, lr}
	vsnprintf(log_buf, sizeof(log_buf) - 1, fmt, args);
    2638:	4c08      	ldr	r4, [pc, #32]	; (265c <shell_printf+0x28>)
static void shell_printf(char *fmt, ...) {
    263a:	ab04      	add	r3, sp, #16
	vsnprintf(log_buf, sizeof(log_buf) - 1, fmt, args);
    263c:	21ff      	movs	r1, #255	; 0xff
static void shell_printf(char *fmt, ...) {
    263e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
    2642:	9301      	str	r3, [sp, #4]
	vsnprintf(log_buf, sizeof(log_buf) - 1, fmt, args);
    2644:	4620      	mov	r0, r4
    2646:	f7fe fe1b 	bl	1280 <vsniprintf>
	shell_echo_str(log_buf);
    264a:	4620      	mov	r0, r4
    264c:	f00e fe51 	bl	112f2 <shell_echo_str>
}
    2650:	b002      	add	sp, #8
    2652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2656:	b004      	add	sp, #16
    2658:	4770      	bx	lr
    265a:	bf00      	nop
    265c:	200058c5 	.word	0x200058c5

00002660 <cli_print_help>:
	{TEST_EBPF, run_eva_test, "Run eva test"},
	{TEST_SVR, start_patch_service, "Start patch service"},
	{TEST_FIXED_PATCH_POINT, run_fixed_patch_point_test, "Start testing fixed patch point"},
};

static void cli_print_help() {
    2660:	b570      	push	{r4, r5, r6, lr}
	int ncmd = sizeof(cmds) / sizeof(struct cli_cmd);
	shell_printf("IoTPatch Cli Usage: run [idx] | trigger [cve] | patch [cve] | vm [vid]\n");
    2662:	4808      	ldr	r0, [pc, #32]	; (2684 <cli_print_help+0x24>)
    2664:	4d08      	ldr	r5, [pc, #32]	; (2688 <cli_print_help+0x28>)
	for (int i = 0; i < ncmd; i++) {
		shell_printf("run %d: %s\n", cmds[i].idx, cmds[i].help);
    2666:	4e09      	ldr	r6, [pc, #36]	; (268c <cli_print_help+0x2c>)
	shell_printf("IoTPatch Cli Usage: run [idx] | trigger [cve] | patch [cve] | vm [vid]\n");
    2668:	f7ff ffe4 	bl	2634 <shell_printf>
	for (int i = 0; i < ncmd; i++) {
    266c:	2400      	movs	r4, #0
		shell_printf("run %d: %s\n", cmds[i].idx, cmds[i].help);
    266e:	68aa      	ldr	r2, [r5, #8]
    2670:	f855 1b0c 	ldr.w	r1, [r5], #12
    2674:	4630      	mov	r0, r6
	for (int i = 0; i < ncmd; i++) {
    2676:	3401      	adds	r4, #1
		shell_printf("run %d: %s\n", cmds[i].idx, cmds[i].help);
    2678:	f7ff ffdc 	bl	2634 <shell_printf>
	for (int i = 0; i < ncmd; i++) {
    267c:	2c06      	cmp	r4, #6
    267e:	d1f6      	bne.n	266e <cli_print_help+0xe>
	}
}
    2680:	bd70      	pop	{r4, r5, r6, pc}
    2682:	bf00      	nop
    2684:	00019776 	.word	0x00019776
    2688:	00019150 	.word	0x00019150
    268c:	000197be 	.word	0x000197be

00002690 <print_control>:
	profile_dump(EV0);
	profile_dump(EV1);
	DEBUG_LOG("ret = %d\n", ret);
}

static void print_control(const char *s) {
    2690:	4601      	mov	r1, r0
	uint32_t control;
	__asm__ volatile ("mrs %0, CONTROL" : "=r"(control));
    2692:	f3ef 8214 	mrs	r2, CONTROL
	printk("%s - CONTROL: 0x%X\n", s, control);
    2696:	4801      	ldr	r0, [pc, #4]	; (269c <print_control+0xc>)
    2698:	f010 bef1 	b.w	1347e <printk>
    269c:	000197d4 	.word	0x000197d4

000026a0 <zephyr_cve_2020_10028>:
	api.enable_callback = (void*)escalate;
	port.driver_api = &api;
	gpio_enable_callback(&port, 0, 0);
}

static void zephyr_cve_2020_10028(void) {
    26a0:	b508      	push	{r3, lr}
	print_control("kernel");
    26a2:	4804      	ldr	r0, [pc, #16]	; (26b4 <zephyr_cve_2020_10028+0x14>)
    26a4:	f7ff fff4 	bl	2690 <print_control>
	k_thread_user_mode_enter(user, NULL, NULL, NULL);
    26a8:	2300      	movs	r3, #0
    26aa:	461a      	mov	r2, r3
    26ac:	4619      	mov	r1, r3
    26ae:	4802      	ldr	r0, [pc, #8]	; (26b8 <zephyr_cve_2020_10028+0x18>)
    26b0:	f00d fff4 	bl	1069c <k_thread_user_mode_enter>
    26b4:	000199d7 	.word	0x000199d7
    26b8:	00002799 	.word	0x00002799

000026bc <escalate>:
	print_control("escalated");
    26bc:	4801      	ldr	r0, [pc, #4]	; (26c4 <escalate+0x8>)
    26be:	f7ff bfe7 	b.w	2690 <print_control>
    26c2:	bf00      	nop
    26c4:	000197ca 	.word	0x000197ca

000026c8 <zephyr_cve_2020_10063>:
{
    26c8:	b570      	push	{r4, r5, r6, lr}
	unsigned char testcase[] = {
    26ca:	4a17      	ldr	r2, [pc, #92]	; (2728 <zephyr_cve_2020_10063+0x60>)
{
    26cc:	b088      	sub	sp, #32
	unsigned char testcase[] = {
    26ce:	6810      	ldr	r0, [r2, #0]
    26d0:	6851      	ldr	r1, [r2, #4]
    26d2:	ab02      	add	r3, sp, #8
    26d4:	c303      	stmia	r3!, {r0, r1}
	testcase[5] = testcase[6] = 1;
    26d6:	2401      	movs	r4, #1
	DEBUG_LOG("vul func addr: 0x%08x\n", coap_packet_parse);
    26d8:	4914      	ldr	r1, [pc, #80]	; (272c <zephyr_cve_2020_10063+0x64>)
    26da:	4815      	ldr	r0, [pc, #84]	; (2730 <zephyr_cve_2020_10063+0x68>)
	testcase[5] = testcase[6] = 1;
    26dc:	f88d 400e 	strb.w	r4, [sp, #14]
    26e0:	f88d 400d 	strb.w	r4, [sp, #13]
	DEBUG_LOG("vul func addr: 0x%08x\n", coap_packet_parse);
    26e4:	f00e fef3 	bl	114ce <debug_log>
	int eid = profile_add_event("coap start");
    26e8:	4812      	ldr	r0, [pc, #72]	; (2734 <zephyr_cve_2020_10063+0x6c>)
    26ea:	f001 f947 	bl	397c <profile_add_event>
	profile_start(EV0);
    26ee:	2000      	movs	r0, #0
    26f0:	f001 f974 	bl	39dc <profile_start>
	profile_end(EV0);
    26f4:	2000      	movs	r0, #0
    26f6:	f001 f97b 	bl	39f0 <profile_end>
	ret = coap_packet_parse(&pkt, testcase, sizeof(testcase), NULL, 0);
    26fa:	2500      	movs	r5, #0
    26fc:	2208      	movs	r2, #8
    26fe:	eb0d 0102 	add.w	r1, sp, r2
    2702:	462b      	mov	r3, r5
    2704:	9500      	str	r5, [sp, #0]
    2706:	a804      	add	r0, sp, #16
    2708:	f011 fe33 	bl	14372 <coap_packet_parse>
    270c:	4606      	mov	r6, r0
	profile_dump(EV0);
    270e:	4628      	mov	r0, r5
    2710:	f001 f98e 	bl	3a30 <profile_dump>
	profile_dump(EV1);
    2714:	4620      	mov	r0, r4
    2716:	f001 f98b 	bl	3a30 <profile_dump>
	DEBUG_LOG("ret = %d\n", ret);
    271a:	4631      	mov	r1, r6
    271c:	4806      	ldr	r0, [pc, #24]	; (2738 <zephyr_cve_2020_10063+0x70>)
    271e:	f00e fed6 	bl	114ce <debug_log>
}
    2722:	b008      	add	sp, #32
    2724:	bd70      	pop	{r4, r5, r6, pc}
    2726:	bf00      	nop
    2728:	00019000 	.word	0x00019000
    272c:	00014373 	.word	0x00014373
    2730:	000199de 	.word	0x000199de
    2734:	000199f5 	.word	0x000199f5
    2738:	00019a00 	.word	0x00019a00

0000273c <this_is_cve_trigger_func>:
static void this_is_cve_trigger_func(void) {
    273c:	b510      	push	{r4, lr}
	DEBUG_LOG("run test_func: 0x%08x\n", (uint32_t) test_dynamic_bug);
    273e:	4910      	ldr	r1, [pc, #64]	; (2780 <this_is_cve_trigger_func+0x44>)
    2740:	4810      	ldr	r0, [pc, #64]	; (2784 <this_is_cve_trigger_func+0x48>)
    2742:	f00e fec4 	bl	114ce <debug_log>
	int eid = profile_add_event("dummy cve start");
    2746:	4810      	ldr	r0, [pc, #64]	; (2788 <this_is_cve_trigger_func+0x4c>)
    2748:	f001 f918 	bl	397c <profile_add_event>
		profile_start(0);
    274c:	2000      	movs	r0, #0
    274e:	f001 f945 	bl	39dc <profile_start>
		int v = test_dynamic_bug(inputs[i]);
    2752:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    2756:	f000 fc0f 	bl	2f78 <test_dynamic_bug>
    275a:	4604      	mov	r4, r0
		profile_end(0);
    275c:	2000      	movs	r0, #0
    275e:	f001 f947 	bl	39f0 <profile_end>
		profile_dump(0);
    2762:	2000      	movs	r0, #0
    2764:	f001 f964 	bl	3a30 <profile_dump>
		DEBUG_LOG("[%04d] is bug fixed? %s\n", i, v == 0 ? "yes": "no");
    2768:	4a08      	ldr	r2, [pc, #32]	; (278c <this_is_cve_trigger_func+0x50>)
    276a:	4b09      	ldr	r3, [pc, #36]	; (2790 <this_is_cve_trigger_func+0x54>)
    276c:	4809      	ldr	r0, [pc, #36]	; (2794 <this_is_cve_trigger_func+0x58>)
    276e:	2c00      	cmp	r4, #0
    2770:	bf18      	it	ne
    2772:	461a      	movne	r2, r3
    2774:	2101      	movs	r1, #1
}
    2776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		DEBUG_LOG("[%04d] is bug fixed? %s\n", i, v == 0 ? "yes": "no");
    277a:	f00e bea8 	b.w	114ce <debug_log>
    277e:	bf00      	nop
    2780:	00002f79 	.word	0x00002f79
    2784:	00019992 	.word	0x00019992
    2788:	000199a9 	.word	0x000199a9
    278c:	0001998b 	.word	0x0001998b
    2790:	0001998f 	.word	0x0001998f
    2794:	000199b9 	.word	0x000199b9

00002798 <user>:
static void user(void *p1, void *p2, void *p3) {
    2798:	e92d 4140 	stmdb	sp!, {r6, r8, lr}
	print_control("user");
    279c:	480f      	ldr	r0, [pc, #60]	; (27dc <user+0x44>)
static void user(void *p1, void *p2, void *p3) {
    279e:	b08b      	sub	sp, #44	; 0x2c
	print_control("user");
    27a0:	f7ff ff76 	bl	2690 <print_control>
	api.enable_callback = (void*)escalate;
    27a4:	4b0e      	ldr	r3, [pc, #56]	; (27e0 <user+0x48>)
    27a6:	9307      	str	r3, [sp, #28]
	port.driver_api = &api;
    27a8:	ab03      	add	r3, sp, #12
    27aa:	9301      	str	r3, [sp, #4]
static inline bool z_arch_is_user_context(void)
{
	u32_t value;

	/* check for handler mode */
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
    27ac:	f3ef 8105 	mrs	r1, IPSR
	if (value) {
    27b0:	b951      	cbnz	r1, 27c8 <user+0x30>
		return false;
	}

	/* if not handler mode, return mode information */
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
    27b2:	f3ef 8314 	mrs	r3, CONTROL

K_SYSCALL_DECLARE4(K_SYSCALL_GPIO_WRITE, gpio_write, int, struct device *, port, int, access_op, u32_t, pin, u32_t, value)

K_SYSCALL_DECLARE4(K_SYSCALL_GPIO_READ, gpio_read, int, struct device *, port, int, access_op, u32_t, pin, u32_t *, value)

K_SYSCALL_DECLARE3(K_SYSCALL_GPIO_ENABLE_CALLBACK, gpio_enable_callback, int, struct device *, port, int, access_op, u32_t, pin)
    27b6:	07db      	lsls	r3, r3, #31
    27b8:	d506      	bpl.n	27c8 <user+0x30>
    27ba:	4668      	mov	r0, sp
	register u32_t r2 __asm__("r2") = arg3;
    27bc:	460a      	mov	r2, r1
	register u32_t r6 __asm__("r6") = call_id;
    27be:	2625      	movs	r6, #37	; 0x25
	__asm__ volatile("svc %[svid]\n"
    27c0:	df03      	svc	3
}
    27c2:	b00b      	add	sp, #44	; 0x2c
    27c4:	e8bd 8140 	ldmia.w	sp!, {r6, r8, pc}
					     int access_op, u32_t pin)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->enable_callback == NULL) {
    27c8:	9b01      	ldr	r3, [sp, #4]
    27ca:	691b      	ldr	r3, [r3, #16]
    27cc:	2b00      	cmp	r3, #0
    27ce:	d0f8      	beq.n	27c2 <user+0x2a>
		return -ENOTSUP;
	}

	return api->enable_callback(port, access_op, pin);
    27d0:	2200      	movs	r2, #0
    27d2:	4611      	mov	r1, r2
    27d4:	4668      	mov	r0, sp
    27d6:	4798      	blx	r3
    27d8:	e7f3      	b.n	27c2 <user+0x2a>
    27da:	bf00      	nop
    27dc:	000199d2 	.word	0x000199d2
    27e0:	000026bd 	.word	0x000026bd

000027e4 <run_test_by_id>:

void run_test_by_id(run_test_t cid) {
	int ncmd = sizeof(cmds) / sizeof(struct cli_cmd);
	if (cid > ncmd) {
    27e4:	2806      	cmp	r0, #6
void run_test_by_id(run_test_t cid) {
    27e6:	b510      	push	{r4, lr}
    27e8:	4601      	mov	r1, r0
	if (cid > ncmd) {
    27ea:	d906      	bls.n	27fa <run_test_by_id+0x16>
		shell_printf("Unsupport command: %d\n", cid);
    27ec:	480d      	ldr	r0, [pc, #52]	; (2824 <run_test_by_id+0x40>)
    27ee:	f7ff ff21 	bl	2634 <shell_printf>
			cmd->func();
		} else {
			shell_printf("cmd:%d {%s} is not implement\n", cmd->idx, cmd->help);
		}
	}
}
    27f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		cli_print_help();
    27f6:	f7ff bf33 	b.w	2660 <cli_print_help>
		if (cmd->func != NULL) {
    27fa:	4a0b      	ldr	r2, [pc, #44]	; (2828 <run_test_by_id+0x44>)
    27fc:	230c      	movs	r3, #12
    27fe:	4359      	muls	r1, r3
    2800:	1853      	adds	r3, r2, r1
    2802:	5851      	ldr	r1, [r2, r1]
    2804:	685c      	ldr	r4, [r3, #4]
    2806:	689a      	ldr	r2, [r3, #8]
    2808:	b134      	cbz	r4, 2818 <run_test_by_id+0x34>
			shell_printf("run cmd: %d {%s}\n", cmd->idx, cmd->help);
    280a:	4808      	ldr	r0, [pc, #32]	; (282c <run_test_by_id+0x48>)
    280c:	f7ff ff12 	bl	2634 <shell_printf>
			cmd->func();
    2810:	4623      	mov	r3, r4
}
    2812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			cmd->func();
    2816:	4718      	bx	r3
			shell_printf("cmd:%d {%s} is not implement\n", cmd->idx, cmd->help);
    2818:	4805      	ldr	r0, [pc, #20]	; (2830 <run_test_by_id+0x4c>)
}
    281a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			shell_printf("cmd:%d {%s} is not implement\n", cmd->idx, cmd->help);
    281e:	f7ff bf09 	b.w	2634 <shell_printf>
    2822:	bf00      	nop
    2824:	000198a9 	.word	0x000198a9
    2828:	00019150 	.word	0x00019150
    282c:	000198c0 	.word	0x000198c0
    2830:	000198d2 	.word	0x000198d2

00002834 <run_shell_cli>:
#endif
	run_ebpf_eva(vid);
}


void run_shell_cli(void) {
    2834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2838:	b086      	sub	sp, #24
	// extern uint32_t SystemCoreClock;
	// shell_printf("SystemCoreClock: %d\n", SystemCoreClock);
	memset(&shell_cli, 0, sizeof(shell_cli));
    283a:	2284      	movs	r2, #132	; 0x84
    283c:	2100      	movs	r1, #0
    283e:	4869      	ldr	r0, [pc, #420]	; (29e4 <run_shell_cli+0x1b0>)
	cli_print_help();
	shell_echo_str(SHELL_PROMPT);
	exit_shell = false;
    2840:	4e69      	ldr	r6, [pc, #420]	; (29e8 <run_shell_cli+0x1b4>)
	shell_echo_str(SHELL_PROMPT);
    2842:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 29ec <run_shell_cli+0x1b8>
	if (strcmp(argv[0], "q") == 0 ) {
    2846:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 2a2c <run_shell_cli+0x1f8>
void run_shell_cli(void) {
    284a:	af00      	add	r7, sp, #0
	memset(&shell_cli, 0, sizeof(shell_cli));
    284c:	f7ff fdd1 	bl	23f2 <memset>
	cli_print_help();
    2850:	f7ff ff06 	bl	2660 <cli_print_help>
	shell_echo_str(SHELL_PROMPT);
    2854:	4865      	ldr	r0, [pc, #404]	; (29ec <run_shell_cli+0x1b8>)
    2856:	f00e fd4c 	bl	112f2 <shell_echo_str>
	exit_shell = false;
    285a:	2300      	movs	r3, #0
    285c:	7033      	strb	r3, [r6, #0]
	while (!exit_shell) {
		char c = shell_get_char();
    285e:	f00e fd57 	bl	11310 <shell_get_char>
    2862:	4604      	mov	r4, r0
	shell_put_char(c);
    2864:	f00e fd59 	bl	1131a <shell_put_char>
	if (c == '\r' || shell_cli.rx_pos >= SHELL_BUFFER_SIZE) {
    2868:	2c0d      	cmp	r4, #13
    286a:	d046      	beq.n	28fa <run_shell_cli+0xc6>
    286c:	4b5d      	ldr	r3, [pc, #372]	; (29e4 <run_shell_cli+0x1b0>)
    286e:	6818      	ldr	r0, [r3, #0]
    2870:	287f      	cmp	r0, #127	; 0x7f
    2872:	d842      	bhi.n	28fa <run_shell_cli+0xc6>
	shell_cli.rx_buffer[shell_cli.rx_pos++] = c;
    2874:	1c45      	adds	r5, r0, #1
    2876:	601d      	str	r5, [r3, #0]
    2878:	4403      	add	r3, r0
	if (shell_last_char() != '\n' && shell_last_char() != '\r') {
    287a:	2c0a      	cmp	r4, #10
	shell_cli.rx_buffer[shell_cli.rx_pos++] = c;
    287c:	711c      	strb	r4, [r3, #4]
static void shell_process() {
    287e:	46ea      	mov	sl, sp
	if (shell_last_char() != '\n' && shell_last_char() != '\r') {
    2880:	d13b      	bne.n	28fa <run_shell_cli+0xc6>
    2882:	2300      	movs	r3, #0
    2884:	495a      	ldr	r1, [pc, #360]	; (29f0 <run_shell_cli+0x1bc>)
    2886:	461a      	mov	r2, r3
    2888:	461c      	mov	r4, r3
			*cur = '\0';
    288a:	469e      	mov	lr, r3
	for (int i = 0; i < shell_cli.rx_pos && argc < max_args; i++) {
    288c:	429d      	cmp	r5, r3
    288e:	d929      	bls.n	28e4 <run_shell_cli+0xb0>
    2890:	2c04      	cmp	r4, #4
    2892:	dd0b      	ble.n	28ac <run_shell_cli+0x78>
	if (strcmp(argv[0], "q") == 0 ) {
    2894:	687d      	ldr	r5, [r7, #4]
    2896:	4649      	mov	r1, r9
    2898:	4628      	mov	r0, r5
    289a:	f7ff fdbf 	bl	241c <strcmp>
    289e:	bb98      	cbnz	r0, 2908 <run_shell_cli+0xd4>
		exit_shell = true;
    28a0:	2301      	movs	r3, #1
		DEBUG_LOG("Exit shell mode!\n");
    28a2:	4854      	ldr	r0, [pc, #336]	; (29f4 <run_shell_cli+0x1c0>)
		exit_shell = true;
    28a4:	7033      	strb	r3, [r6, #0]
		DEBUG_LOG("Exit shell mode!\n");
    28a6:	f00e fe12 	bl	114ce <debug_log>
		return;
    28aa:	e01d      	b.n	28e8 <run_shell_cli+0xb4>
		if (*cur == '\n' || *cur == ' ' || i == shell_cli.rx_pos - 1) {
    28ac:	f891 c000 	ldrb.w	ip, [r1]
    28b0:	f1bc 0f0a 	cmp.w	ip, #10
    28b4:	d004      	beq.n	28c0 <run_shell_cli+0x8c>
    28b6:	f1bc 0f20 	cmp.w	ip, #32
    28ba:	d001      	beq.n	28c0 <run_shell_cli+0x8c>
    28bc:	4298      	cmp	r0, r3
    28be:	d10d      	bne.n	28dc <run_shell_cli+0xa8>
			*cur = '\0';
    28c0:	f881 e000 	strb.w	lr, [r1]
			if (next_arg) {
    28c4:	b13a      	cbz	r2, 28d6 <run_shell_cli+0xa2>
				argv[argc++] = next_arg;
    28c6:	f107 0c18 	add.w	ip, r7, #24
    28ca:	eb0c 0c84 	add.w	ip, ip, r4, lsl #2
    28ce:	3401      	adds	r4, #1
    28d0:	f84c 2c14 	str.w	r2, [ip, #-20]
				next_arg = NULL;
    28d4:	2200      	movs	r2, #0
	for (int i = 0; i < shell_cli.rx_pos && argc < max_args; i++) {
    28d6:	3301      	adds	r3, #1
    28d8:	3101      	adds	r1, #1
    28da:	e7d7      	b.n	288c <run_shell_cli+0x58>
		} else if (next_arg == NULL){
    28dc:	2a00      	cmp	r2, #0
    28de:	bf08      	it	eq
    28e0:	460a      	moveq	r2, r1
    28e2:	e7f8      	b.n	28d6 <run_shell_cli+0xa2>
	if (argc > 0) {
    28e4:	2c00      	cmp	r4, #0
    28e6:	d1d5      	bne.n	2894 <run_shell_cli+0x60>
	memset(&shell_cli, 0, sizeof(shell_cli));
    28e8:	2284      	movs	r2, #132	; 0x84
    28ea:	2100      	movs	r1, #0
    28ec:	483d      	ldr	r0, [pc, #244]	; (29e4 <run_shell_cli+0x1b0>)
    28ee:	f7ff fd80 	bl	23f2 <memset>
	shell_echo_str(SHELL_PROMPT);
    28f2:	4640      	mov	r0, r8
    28f4:	f00e fcfd 	bl	112f2 <shell_echo_str>
    28f8:	46d5      	mov	sp, sl
	while (!exit_shell) {
    28fa:	7833      	ldrb	r3, [r6, #0]
    28fc:	2b00      	cmp	r3, #0
    28fe:	d0ae      	beq.n	285e <run_shell_cli+0x2a>
		shell_receive_char(c);
	}
}
    2900:	3718      	adds	r7, #24
    2902:	46bd      	mov	sp, r7
    2904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (strcmp(argv[0], "h") == 0 || strcmp(argv[0], "help") == 0) {
    2908:	493b      	ldr	r1, [pc, #236]	; (29f8 <run_shell_cli+0x1c4>)
    290a:	4628      	mov	r0, r5
    290c:	f7ff fd86 	bl	241c <strcmp>
    2910:	b910      	cbnz	r0, 2918 <run_shell_cli+0xe4>
		cli_print_help();
    2912:	f7ff fea5 	bl	2660 <cli_print_help>
    2916:	e7e7      	b.n	28e8 <run_shell_cli+0xb4>
	if (strcmp(argv[0], "h") == 0 || strcmp(argv[0], "help") == 0) {
    2918:	4938      	ldr	r1, [pc, #224]	; (29fc <run_shell_cli+0x1c8>)
    291a:	4628      	mov	r0, r5
    291c:	f7ff fd7e 	bl	241c <strcmp>
    2920:	2800      	cmp	r0, #0
    2922:	d0f6      	beq.n	2912 <run_shell_cli+0xde>
	} else if (strcmp(argv[0], "run") == 0) {
    2924:	4936      	ldr	r1, [pc, #216]	; (2a00 <run_shell_cli+0x1cc>)
    2926:	4628      	mov	r0, r5
    2928:	f7ff fd78 	bl	241c <strcmp>
    292c:	b940      	cbnz	r0, 2940 <run_shell_cli+0x10c>
		if (argc >= 2) {
    292e:	2c01      	cmp	r4, #1
    2930:	d0da      	beq.n	28e8 <run_shell_cli+0xb4>
			int rid = str2int(argv[1]);
    2932:	68b8      	ldr	r0, [r7, #8]
    2934:	f00e fdd9 	bl	114ea <str2int>
			run_test_by_id(rid);
    2938:	b2c0      	uxtb	r0, r0
    293a:	f7ff ff53 	bl	27e4 <run_test_by_id>
    293e:	e7d3      	b.n	28e8 <run_shell_cli+0xb4>
	} else if (strcmp(argv[0], "trigger") == 0) {
    2940:	4930      	ldr	r1, [pc, #192]	; (2a04 <run_shell_cli+0x1d0>)
    2942:	4628      	mov	r0, r5
    2944:	f7ff fd6a 	bl	241c <strcmp>
    2948:	b9a8      	cbnz	r0, 2976 <run_shell_cli+0x142>
		if (argc >= 2) {
    294a:	2c01      	cmp	r4, #1
    294c:	d00f      	beq.n	296e <run_shell_cli+0x13a>
			int tid = str2int(argv[1]);
    294e:	68b8      	ldr	r0, [r7, #8]
    2950:	f00e fdcb 	bl	114ea <str2int>
	if (tid >= n) {
    2954:	2802      	cmp	r0, #2
			int tid = str2int(argv[1]);
    2956:	4601      	mov	r1, r0
	if (tid >= n) {
    2958:	dd04      	ble.n	2964 <run_shell_cli+0x130>
		DEBUG_LOG("ERROR: trigger index out of range %d >= %d\n", tid, n);
    295a:	482b      	ldr	r0, [pc, #172]	; (2a08 <run_shell_cli+0x1d4>)
    295c:	2203      	movs	r2, #3
		DEBUG_LOG("Command not find: %s argc: %d\n", argv[0], argc);
    295e:	f00e fdb6 	bl	114ce <debug_log>
    2962:	e7c1      	b.n	28e8 <run_shell_cli+0xb4>
	dynamic_trigger_func_list[tid]();
    2964:	4b29      	ldr	r3, [pc, #164]	; (2a0c <run_shell_cli+0x1d8>)
    2966:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    296a:	4798      	blx	r3
    296c:	e7bc      	b.n	28e8 <run_shell_cli+0xb4>
			shell_printf("Usage: trigger [cve]\n");
    296e:	4828      	ldr	r0, [pc, #160]	; (2a10 <run_shell_cli+0x1dc>)
			shell_printf("Usage: vm [cve]\n");
    2970:	f7ff fe60 	bl	2634 <shell_printf>
    2974:	e7b8      	b.n	28e8 <run_shell_cli+0xb4>
	} else if (strcmp(argv[0], "patch") == 0) {
    2976:	4927      	ldr	r1, [pc, #156]	; (2a14 <run_shell_cli+0x1e0>)
    2978:	4628      	mov	r0, r5
    297a:	f7ff fd4f 	bl	241c <strcmp>
    297e:	b9f0      	cbnz	r0, 29be <run_shell_cli+0x18a>
		if (argc >= 2) {
    2980:	2c01      	cmp	r4, #1
    2982:	d013      	beq.n	29ac <run_shell_cli+0x178>
			int pid = str2int(argv[1]);
    2984:	68b8      	ldr	r0, [r7, #8]
    2986:	f00e fdb0 	bl	114ea <str2int>
    298a:	4604      	mov	r4, r0
	DEBUG_LOG("Use Dynamic Patch Points\n");	
    298c:	4822      	ldr	r0, [pc, #136]	; (2a18 <run_shell_cli+0x1e4>)
    298e:	f00e fd9e 	bl	114ce <debug_log>
	show_local_patch_desc();
    2992:	f000 faff 	bl	2f94 <show_local_patch_desc>
	set_patch_mode(CORTEX_DEB_MON_PATCH);
    2996:	2001      	movs	r0, #1
    2998:	f000 fa5a 	bl	2e50 <set_patch_mode>
	read_local_patch(pid);
    299c:	4620      	mov	r0, r4
    299e:	f000 fb0f 	bl	2fc0 <read_local_patch>
	show_hw_bkpt();
    29a2:	f000 f88f 	bl	2ac4 <show_hw_bkpt>
	show_all_patches();
    29a6:	f000 ff4d 	bl	3844 <show_all_patches>
    29aa:	e79d      	b.n	28e8 <run_shell_cli+0xb4>
			shell_printf("Usage: patch [cve]\n");
    29ac:	481b      	ldr	r0, [pc, #108]	; (2a1c <run_shell_cli+0x1e8>)
    29ae:	f7ff fe41 	bl	2634 <shell_printf>
	DEBUG_LOG("Use Dynamic Patch Points\n");	
    29b2:	4819      	ldr	r0, [pc, #100]	; (2a18 <run_shell_cli+0x1e4>)
    29b4:	f00e fd8b 	bl	114ce <debug_log>
	show_local_patch_desc();
    29b8:	f000 faec 	bl	2f94 <show_local_patch_desc>
    29bc:	e794      	b.n	28e8 <run_shell_cli+0xb4>
	} else if (strcmp(argv[0], "vm") == 0) {
    29be:	4918      	ldr	r1, [pc, #96]	; (2a20 <run_shell_cli+0x1ec>)
    29c0:	4628      	mov	r0, r5
    29c2:	f7ff fd2b 	bl	241c <strcmp>
    29c6:	b948      	cbnz	r0, 29dc <run_shell_cli+0x1a8>
		if (argc >= 2) {
    29c8:	2c01      	cmp	r4, #1
    29ca:	d005      	beq.n	29d8 <run_shell_cli+0x1a4>
			int tid = str2int(argv[1]);
    29cc:	68b8      	ldr	r0, [r7, #8]
    29ce:	f00e fd8c 	bl	114ea <str2int>
	run_ebpf_eva(vid);
    29d2:	f000 fd11 	bl	33f8 <run_ebpf_eva>
    29d6:	e787      	b.n	28e8 <run_shell_cli+0xb4>
			shell_printf("Usage: vm [cve]\n");
    29d8:	4812      	ldr	r0, [pc, #72]	; (2a24 <run_shell_cli+0x1f0>)
    29da:	e7c9      	b.n	2970 <run_shell_cli+0x13c>
		DEBUG_LOG("Command not find: %s argc: %d\n", argv[0], argc);
    29dc:	4622      	mov	r2, r4
    29de:	4629      	mov	r1, r5
    29e0:	4811      	ldr	r0, [pc, #68]	; (2a28 <run_shell_cli+0x1f4>)
    29e2:	e7bc      	b.n	295e <run_shell_cli+0x12a>
    29e4:	20002410 	.word	0x20002410
    29e8:	200058c4 	.word	0x200058c4
    29ec:	000197e8 	.word	0x000197e8
    29f0:	20002414 	.word	0x20002414
    29f4:	000197eb 	.word	0x000197eb
    29f8:	0001a655 	.word	0x0001a655
    29fc:	000197fd 	.word	0x000197fd
    2a00:	00019802 	.word	0x00019802
    2a04:	00019917 	.word	0x00019917
    2a08:	00019806 	.word	0x00019806
    2a0c:	2000c610 	.word	0x2000c610
    2a10:	00019832 	.word	0x00019832
    2a14:	00019f75 	.word	0x00019f75
    2a18:	00019848 	.word	0x00019848
    2a1c:	00019862 	.word	0x00019862
    2a20:	00019876 	.word	0x00019876
    2a24:	00019879 	.word	0x00019879
    2a28:	0001988a 	.word	0x0001988a
    2a2c:	0001c416 	.word	0x0001c416

00002a30 <FPB_Handler0>:
//		__asm__ __volatile__("BX LR"); \


//DECLARE_FPB_HANDLE(0);
void FPB_Handler0(void)
{
    2a30:	b508      	push	{r3, lr}
	__asm__("NOP");
    2a32:	bf00      	nop
	__asm__("NOP");
    2a34:	bf00      	nop
	__asm__("NOP");
    2a36:	bf00      	nop
	__asm__("NOP");
    2a38:	bf00      	nop
	__asm__("PUSH {r0-r3, r12, lr}");
    2a3a:	e92d 500f 	stmdb	sp!, {r0, r1, r2, r3, ip, lr}
	DEBUG_LOG("FPB_Handler0\n");
    2a3e:	4809      	ldr	r0, [pc, #36]	; (2a64 <FPB_Handler0+0x34>)
    2a40:	f00e fd45 	bl	114ce <debug_log>
//	fpb_trampoline_0();
//	IMPORT leave_fpb_bpkt
//	__asm__("PUSH {r3, lr}");
	__asm__("TST lr, #4");
    2a44:	f01e 0f04 	tst.w	lr, #4
	__asm__("ITE EQ");
    2a48:	bf0c      	ite	eq
	__asm__("MRSEQ r0, MSP");
    2a4a:	f3ef 8008 	mrseq	r0, MSP
	__asm__("MRSNE r0, PSP");
    2a4e:	f3ef 8009 	mrsne	r0, PSP
	__asm__("MOVS r1, #0");
    2a52:	2100      	movs	r1, #0
	__asm__("BL leave_fpb_bpkt");
    2a54:	f00e fce3 	bl	1141e <leave_fpb_bpkt>
	// todo: return in other address
	__asm__("MOV r5, r0");
    2a58:	4605      	mov	r5, r0
	__asm__("POP {r0-r3, r12, lr}");
    2a5a:	e8bd 500f 	ldmia.w	sp!, {r0, r1, r2, r3, ip, lr}
//	DEBUG_LOG("exit FPB_Handler0\n");
	__asm__("MOV PC, r5");
    2a5e:	46af      	mov	pc, r5
//	__asm__("BX LR");
//	__asm__("pop	{r3, pc}");
//	return 0;
}
    2a60:	bd08      	pop	{r3, pc}
    2a62:	bf00      	nop
    2a64:	00019a0a 	.word	0x00019a0a

00002a68 <RawBuggyFunc>:
	add_hw_bkpt(inst);
	DEBUG_LOG("add dynamic point to: 0x%08x\n", inst);
	show_hw_bkpt();
}

static void RawBuggyFunc() {
    2a68:	b508      	push	{r3, lr}
	DEBUG_LOG("enter RawBuggyFunc\n");
    2a6a:	4804      	ldr	r0, [pc, #16]	; (2a7c <RawBuggyFunc+0x14>)
    2a6c:	f00e fd2f 	bl	114ce <debug_log>
	DEBUG_LOG("exit RawBuggyFunc\n");
    2a70:	4803      	ldr	r0, [pc, #12]	; (2a80 <RawBuggyFunc+0x18>)
}
    2a72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	DEBUG_LOG("exit RawBuggyFunc\n");
    2a76:	f00e bd2a 	b.w	114ce <debug_log>
    2a7a:	bf00      	nop
    2a7c:	00019a18 	.word	0x00019a18
    2a80:	00019a2c 	.word	0x00019a2c

00002a84 <test_freertos_cve>:
	IPHeader_t xIPHeader;
} IPPacket_t;
static int freertos_cve_func(const IPPacket_t * const pxIPPacket, NetworkBufferDescriptor_t * const pxNetworkBuffer);

// compare with HERA
static void test_freertos_cve() {
    2a84:	b508      	push	{r3, lr}
		}
	};
	NetworkBufferDescriptor_t data = {
		.xDataLength = 0,
	};
	profile_add_event("HERA Compare");
    2a86:	480d      	ldr	r0, [pc, #52]	; (2abc <test_freertos_cve+0x38>)
    2a88:	f000 ff78 	bl	397c <profile_add_event>
	
	profile_start(0);
    2a8c:	2000      	movs	r0, #0
    2a8e:	f000 ffa5 	bl	39dc <profile_start>
	int t = freertos_cve_func(&pkt, &data);
	profile_end(0);
    2a92:	2000      	movs	r0, #0
    2a94:	f000 ffac 	bl	39f0 <profile_end>
	
	profile_dump(0);
    2a98:	2000      	movs	r0, #0
    2a9a:	f000 ffc9 	bl	3a30 <profile_dump>
	
	profile_start(1);
    2a9e:	2001      	movs	r0, #1
    2aa0:	f000 ff9c 	bl	39dc <profile_start>
	
	profile_end(1);
    2aa4:	2001      	movs	r0, #1
    2aa6:	f000 ffa3 	bl	39f0 <profile_end>
	hera_fix_func(&pkt, &data);
	profile_dump(1);
    2aaa:	2001      	movs	r0, #1
    2aac:	f000 ffc0 	bl	3a30 <profile_dump>
	DEBUG_LOG("bug func: %d\n", t);
    2ab0:	2100      	movs	r1, #0
    2ab2:	4803      	ldr	r0, [pc, #12]	; (2ac0 <test_freertos_cve+0x3c>)
}
    2ab4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	DEBUG_LOG("bug func: %d\n", t);
    2ab8:	f00e bd09 	b.w	114ce <debug_log>
    2abc:	00019c24 	.word	0x00019c24
    2ac0:	00019c31 	.word	0x00019c31

00002ac4 <show_hw_bkpt>:
	DEBUG_LOG("Dump current hardware breakpoints, MODE-%s:\n", REMAP_ADDR.active ? "FPB" : "debug monitor");
    2ac4:	4b13      	ldr	r3, [pc, #76]	; (2b14 <show_hw_bkpt+0x50>)
void show_hw_bkpt(void) {
    2ac6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	DEBUG_LOG("Dump current hardware breakpoints, MODE-%s:\n", REMAP_ADDR.active ? "FPB" : "debug monitor");
    2ac8:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
    2acc:	4a12      	ldr	r2, [pc, #72]	; (2b18 <show_hw_bkpt+0x54>)
    2ace:	4b13      	ldr	r3, [pc, #76]	; (2b1c <show_hw_bkpt+0x58>)
    2ad0:	4813      	ldr	r0, [pc, #76]	; (2b20 <show_hw_bkpt+0x5c>)
		const uint32_t fp_comp = FPB->COMP[i];
    2ad2:	4e14      	ldr	r6, [pc, #80]	; (2b24 <show_hw_bkpt+0x60>)
		uint32_t inst_addr = fp_comp & 0x1FFFFFFC;
    2ad4:	4f14      	ldr	r7, [pc, #80]	; (2b28 <show_hw_bkpt+0x64>)
		DEBUG_LOG("  FP_COMP[%d] Enabled %d, Replace: %d, Address 0x%x\n",(int)i, (int)enabled, (int)replace, inst_addr);
    2ad6:	4d15      	ldr	r5, [pc, #84]	; (2b2c <show_hw_bkpt+0x68>)
	DEBUG_LOG("Dump current hardware breakpoints, MODE-%s:\n", REMAP_ADDR.active ? "FPB" : "debug monitor");
    2ad8:	2900      	cmp	r1, #0
    2ada:	bf14      	ite	ne
    2adc:	4611      	movne	r1, r2
    2ade:	4619      	moveq	r1, r3
    2ae0:	f00e fcf5 	bl	114ce <debug_log>
	for (int i = 0; i < MAX_BP; i++) {
    2ae4:	2400      	movs	r4, #0
		const uint32_t fp_comp = FPB->COMP[i];
    2ae6:	1ca3      	adds	r3, r4, #2
		DEBUG_LOG("  FP_COMP[%d] Enabled %d, Replace: %d, Address 0x%x\n",(int)i, (int)enabled, (int)replace, inst_addr);
    2ae8:	4628      	mov	r0, r5
		const uint32_t fp_comp = FPB->COMP[i];
    2aea:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
		const uint32_t replace = fp_comp >> 30;
    2aee:	0f8b      	lsrs	r3, r1, #30
		if (replace == 0x2) {
    2af0:	2b02      	cmp	r3, #2
		const int enabled = fp_comp & 0x1;
    2af2:	f001 0201 	and.w	r2, r1, #1
		uint32_t inst_addr = fp_comp & 0x1FFFFFFC;
    2af6:	ea01 0107 	and.w	r1, r1, r7
		  inst_addr |= 0x2;
    2afa:	bf08      	it	eq
    2afc:	f041 0102 	orreq.w	r1, r1, #2
		DEBUG_LOG("  FP_COMP[%d] Enabled %d, Replace: %d, Address 0x%x\n",(int)i, (int)enabled, (int)replace, inst_addr);
    2b00:	9100      	str	r1, [sp, #0]
    2b02:	4621      	mov	r1, r4
	for (int i = 0; i < MAX_BP; i++) {
    2b04:	3401      	adds	r4, #1
		DEBUG_LOG("  FP_COMP[%d] Enabled %d, Replace: %d, Address 0x%x\n",(int)i, (int)enabled, (int)replace, inst_addr);
    2b06:	f00e fce2 	bl	114ce <debug_log>
	for (int i = 0; i < MAX_BP; i++) {
    2b0a:	2c06      	cmp	r4, #6
    2b0c:	d1eb      	bne.n	2ae6 <show_hw_bkpt+0x22>
}
    2b0e:	b003      	add	sp, #12
    2b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b12:	bf00      	nop
    2b14:	20002494 	.word	0x20002494
    2b18:	00019b2e 	.word	0x00019b2e
    2b1c:	00019b32 	.word	0x00019b32
    2b20:	00019b40 	.word	0x00019b40
    2b24:	e0002000 	.word	0xe0002000
    2b28:	1ffffffc 	.word	0x1ffffffc
    2b2c:	00019b6d 	.word	0x00019b6d

00002b30 <add_hw_bkpt>:
int add_hw_bkpt(uint32_t inst_addr) {
    2b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bpkt_is_init) {
    2b34:	4b68      	ldr	r3, [pc, #416]	; (2cd8 <add_hw_bkpt+0x1a8>)
    2b36:	7819      	ldrb	r1, [r3, #0]
int add_hw_bkpt(uint32_t inst_addr) {
    2b38:	b08b      	sub	sp, #44	; 0x2c
    2b3a:	4604      	mov	r4, r0
	if (!bpkt_is_init) {
    2b3c:	b999      	cbnz	r1, 2b66 <add_hw_bkpt+0x36>
		bpkt_info.cur_idx = 0;
    2b3e:	4a67      	ldr	r2, [pc, #412]	; (2cdc <add_hw_bkpt+0x1ac>)
    2b40:	7011      	strb	r1, [r2, #0]
		uint32_t fp_ctrl = FPB->CTRL;
    2b42:	4967      	ldr	r1, [pc, #412]	; (2ce0 <add_hw_bkpt+0x1b0>)
    2b44:	6809      	ldr	r1, [r1, #0]
		bpkt_info.bpkt_num = get_hw_bkpt_num();
    2b46:	2106      	movs	r1, #6
    2b48:	7051      	strb	r1, [r2, #1]
	if (inst_addr >= 0x20000000) {
    2b4a:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
		bpkt_is_init = true;
    2b4e:	f04f 0201 	mov.w	r2, #1
    2b52:	701a      	strb	r2, [r3, #0]
	if (inst_addr >= 0x20000000) {
    2b54:	d310      	bcc.n	2b78 <add_hw_bkpt+0x48>
		DEBUG_LOG("Cannot add breakpoint in RAM.\n");
    2b56:	4863      	ldr	r0, [pc, #396]	; (2ce4 <add_hw_bkpt+0x1b4>)
    2b58:	f00e fcb9 	bl	114ce <debug_log>
		return -1;
    2b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    2b60:	b00b      	add	sp, #44	; 0x2c
    2b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (inst_addr >= 0x20000000) {
    2b66:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    2b6a:	d2f4      	bcs.n	2b56 <add_hw_bkpt+0x26>
	if (bpkt_info.cur_idx >= MAX_BP) {
    2b6c:	4b5b      	ldr	r3, [pc, #364]	; (2cdc <add_hw_bkpt+0x1ac>)
    2b6e:	781a      	ldrb	r2, [r3, #0]
    2b70:	2a05      	cmp	r2, #5
		bpkt_info.cur_idx = 0;
    2b72:	bf84      	itt	hi
    2b74:	2200      	movhi	r2, #0
    2b76:	701a      	strbhi	r2, [r3, #0]
	if (REMAP_ADDR.active) {
    2b78:	f8df a178 	ldr.w	sl, [pc, #376]	; 2cf4 <add_hw_bkpt+0x1c4>
    2b7c:	4d57      	ldr	r5, [pc, #348]	; (2cdc <add_hw_bkpt+0x1ac>)
    2b7e:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
    2b82:	f004 0902 	and.w	r9, r4, #2
    2b86:	2800      	cmp	r0, #0
    2b88:	f000 8087 	beq.w	2c9a <add_hw_bkpt+0x16a>
	uint32_t trampolines[] = { (uint32_t) FPB_Handler0, (uint32_t) FPB_Handler1, 
    2b8c:	4f56      	ldr	r7, [pc, #344]	; (2ce8 <add_hw_bkpt+0x1b8>)
	int idx = bpkt_info.cur_idx;
    2b8e:	f895 8000 	ldrb.w	r8, [r5]
	uint32_t trampolines[] = { (uint32_t) FPB_Handler0, (uint32_t) FPB_Handler1, 
    2b92:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    2b94:	ae04      	add	r6, sp, #16
    2b96:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2b98:	e897 0003 	ldmia.w	r7, {r0, r1}
	uint32_t trampoline_addr = ((trampolines[idx] & (~0x3)) + 3) & (~0x3);
    2b9c:	ab0a      	add	r3, sp, #40	; 0x28
	uint32_t trampolines[] = { (uint32_t) FPB_Handler0, (uint32_t) FPB_Handler1, 
    2b9e:	e886 0003 	stmia.w	r6, {r0, r1}
	uint32_t trampoline_addr = ((trampolines[idx] & (~0x3)) + 3) & (~0x3);
    2ba2:	eb03 0388 	add.w	r3, r3, r8, lsl #2
	uint32_t jump_inst = little_endian_16_bit(calc_branch_instr(inst_addr, trampoline_addr));
    2ba6:	4620      	mov	r0, r4
	uint32_t trampoline_addr = ((trampolines[idx] & (~0x3)) + 3) & (~0x3);
    2ba8:	f853 3c18 	ldr.w	r3, [r3, #-24]
    2bac:	f023 0b03 	bic.w	fp, r3, #3
	uint32_t jump_inst = little_endian_16_bit(calc_branch_instr(inst_addr, trampoline_addr));
    2bb0:	4659      	mov	r1, fp
    2bb2:	f00e fc10 	bl	113d6 <calc_branch_instr>
    2bb6:	f00e fcac 	bl	11512 <little_endian_16_bit>
	return ((uint32_t)(&REMAP_ADDR) + 0x1f) & (~0x1f);
    2bba:	f10a 0a1f 	add.w	sl, sl, #31
    2bbe:	f02a 031f 	bic.w	r3, sl, #31
	inst_addr = inst_addr & (~0x1);
    2bc2:	f024 0701 	bic.w	r7, r4, #1
	uint32_t jump_inst = little_endian_16_bit(calc_branch_instr(inst_addr, trampoline_addr));
    2bc6:	4606      	mov	r6, r0
	const uint32_t PATCH_TBL = get_fpb_patch_remap();
    2bc8:	9303      	str	r3, [sp, #12]
	DEBUG_LOG("inst is half word: 0x%08x %d trampoline_addr: 0x%08x\n", inst_addr, inst_addr % 4, trampoline_addr);
    2bca:	464a      	mov	r2, r9
    2bcc:	465b      	mov	r3, fp
    2bce:	4639      	mov	r1, r7
    2bd0:	4846      	ldr	r0, [pc, #280]	; (2cec <add_hw_bkpt+0x1bc>)
    2bd2:	f00e fc7c 	bl	114ce <debug_log>
	DEBUG_LOG("[0x%08x] fpb jump to: 0x%08x inst: 0x%08x jump_inst: 0x%08x\n", &(PATCH_TBL), trampoline_addr, inst_addr, jump_inst);
    2bd6:	a903      	add	r1, sp, #12
    2bd8:	9600      	str	r6, [sp, #0]
    2bda:	463b      	mov	r3, r7
    2bdc:	465a      	mov	r2, fp
    2bde:	4844      	ldr	r0, [pc, #272]	; (2cf0 <add_hw_bkpt+0x1c0>)
    2be0:	f00e fc75 	bl	114ce <debug_log>
	if (inst_addr % 4 == 0) // Instruction is word aligned.
    2be4:	7869      	ldrb	r1, [r5, #1]
    2be6:	f1b9 0f00 	cmp.w	r9, #0
    2bea:	d122      	bne.n	2c32 <add_hw_bkpt+0x102>
		uint32_t fp_comp = inst_addr | 0x1;
    2bec:	f047 0201 	orr.w	r2, r7, #1
		for (int i = 0; i < bpkt_info.bpkt_num; i++) {
    2bf0:	4648      	mov	r0, r9
    2bf2:	4288      	cmp	r0, r1
    2bf4:	db0b      	blt.n	2c0e <add_hw_bkpt+0xde>
		*((uint32_t *) (PATCH_TBL + (idx * 4))) = jump_inst;
    2bf6:	9b03      	ldr	r3, [sp, #12]
		FPB->COMP[bpkt_info.cur_idx] = fp_comp;
    2bf8:	4939      	ldr	r1, [pc, #228]	; (2ce0 <add_hw_bkpt+0x1b0>)
		*((uint32_t *) (PATCH_TBL + (idx * 4))) = jump_inst;
    2bfa:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
		FPB->COMP[bpkt_info.cur_idx] = fp_comp;
    2bfe:	782b      	ldrb	r3, [r5, #0]
    2c00:	1c98      	adds	r0, r3, #2
		bpkt_info.cur_idx++;
    2c02:	3301      	adds	r3, #1
		FPB->COMP[bpkt_info.cur_idx] = fp_comp;
    2c04:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		bpkt_info.cur_idx++;
    2c08:	702b      	strb	r3, [r5, #0]
	return bpkt_info.cur_idx;
    2c0a:	7828      	ldrb	r0, [r5, #0]
		return add_fpb_bkpt(inst_addr);
    2c0c:	e7a8      	b.n	2b60 <add_hw_bkpt+0x30>
			if (FPB->COMP[i] == fp_comp || FPB->COMP[i] == inst_addr) {
    2c0e:	0083      	lsls	r3, r0, #2
    2c10:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2c14:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    2c18:	689c      	ldr	r4, [r3, #8]
    2c1a:	42a2      	cmp	r2, r4
    2c1c:	d002      	beq.n	2c24 <add_hw_bkpt+0xf4>
    2c1e:	689b      	ldr	r3, [r3, #8]
    2c20:	429f      	cmp	r7, r3
    2c22:	d104      	bne.n	2c2e <add_hw_bkpt+0xfe>
				FPB->COMP[i] = fp_comp;
    2c24:	1c83      	adds	r3, r0, #2
    2c26:	492e      	ldr	r1, [pc, #184]	; (2ce0 <add_hw_bkpt+0x1b0>)
    2c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				return i;
    2c2c:	e798      	b.n	2b60 <add_hw_bkpt+0x30>
		for (int i = 0; i < bpkt_info.bpkt_num; i++) {
    2c2e:	3001      	adds	r0, #1
    2c30:	e7df      	b.n	2bf2 <add_hw_bkpt+0xc2>
		uint32_t fp_comp1 = inst_addr & 0xFFFFFFFC;
    2c32:	f024 0403 	bic.w	r4, r4, #3
		uint32_t fp_comp2 = (inst_addr & 0xFFFFFFFC) + 4;
    2c36:	1d22      	adds	r2, r4, #4
		for (int i = 0; i < bpkt_info.bpkt_num - 1; i++) {
    2c38:	3901      	subs	r1, #1
    2c3a:	2000      	movs	r0, #0
    2c3c:	4288      	cmp	r0, r1
    2c3e:	db1c      	blt.n	2c7a <add_hw_bkpt+0x14a>
		*((uint32_t *) (PATCH_TBL + idx * 4))       = ((jump_inst & 0x0000FFFF) << 16) | (old_instr[0] & 0x0000FFFF);
    2c40:	8823      	ldrh	r3, [r4, #0]
    2c42:	9903      	ldr	r1, [sp, #12]
		old_instr[1] = *((uint32_t *) ((inst_addr & 0xFFFFFFFC) + 4));
    2c44:	6860      	ldr	r0, [r4, #4]
		*((uint32_t *) (PATCH_TBL + idx * 4))       = ((jump_inst & 0x0000FFFF) << 16) | (old_instr[0] & 0x0000FFFF);
    2c46:	fa0f f888 	sxth.w	r8, r8
    2c4a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    2c4e:	f841 3028 	str.w	r3, [r1, r8, lsl #2]
		*((uint32_t *) (PATCH_TBL + (idx + 1) * 4)) = (old_instr[1] & 0xFFFF0000) | ((jump_inst & 0xFFFF0000) >> 16);
    2c52:	9b03      	ldr	r3, [sp, #12]
    2c54:	0c00      	lsrs	r0, r0, #16
    2c56:	eb03 0888 	add.w	r8, r3, r8, lsl #2
    2c5a:	0400      	lsls	r0, r0, #16
    2c5c:	ea40 4016 	orr.w	r0, r0, r6, lsr #16
    2c60:	f8c8 0004 	str.w	r0, [r8, #4]
		FPB->COMP[bpkt_info.cur_idx] = fp_comp1;
    2c64:	7829      	ldrb	r1, [r5, #0]
    2c66:	008b      	lsls	r3, r1, #2
    2c68:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2c6c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
		bpkt_info.cur_idx += 2;
    2c70:	3102      	adds	r1, #2
		FPB->COMP[bpkt_info.cur_idx] = fp_comp1;
    2c72:	609c      	str	r4, [r3, #8]
		bpkt_info.cur_idx += 2;
    2c74:	7029      	strb	r1, [r5, #0]
		FPB->COMP[bpkt_info.cur_idx + 1] = fp_comp2;
    2c76:	60da      	str	r2, [r3, #12]
		bpkt_info.cur_idx += 2;
    2c78:	e7c7      	b.n	2c0a <add_hw_bkpt+0xda>
			if (FPB->COMP[i] == fp_comp1 && FPB->COMP[i + 1] == fp_comp2) {
    2c7a:	0083      	lsls	r3, r0, #2
    2c7c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2c80:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    2c84:	1c47      	adds	r7, r0, #1
    2c86:	f8d3 c008 	ldr.w	ip, [r3, #8]
    2c8a:	4564      	cmp	r4, ip
    2c8c:	d103      	bne.n	2c96 <add_hw_bkpt+0x166>
    2c8e:	68db      	ldr	r3, [r3, #12]
    2c90:	429a      	cmp	r2, r3
    2c92:	f43f af65 	beq.w	2b60 <add_hw_bkpt+0x30>
		for (int i = 0; i < bpkt_info.bpkt_num; i++) {
    2c96:	4638      	mov	r0, r7
    2c98:	e7d0      	b.n	2c3c <add_hw_bkpt+0x10c>
	uint32_t replace = (inst_addr & 0x2) == 0 ? 1 : 2;
    2c9a:	f1b9 0f00 	cmp.w	r9, #0
	uint32_t fp_comp = (inst_addr & ~0x3) | 0x1 | (replace << 30);
    2c9e:	bf14      	ite	ne
    2ca0:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
    2ca4:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
    2ca8:	f024 0403 	bic.w	r4, r4, #3
    2cac:	431c      	orrs	r4, r3
	for (int i = 0; i < bpkt_info.bpkt_num; i++) {
    2cae:	786a      	ldrb	r2, [r5, #1]
    2cb0:	4b0b      	ldr	r3, [pc, #44]	; (2ce0 <add_hw_bkpt+0x1b0>)
	uint32_t fp_comp = (inst_addr & ~0x3) | 0x1 | (replace << 30);
    2cb2:	f044 0401 	orr.w	r4, r4, #1
	for (int i = 0; i < bpkt_info.bpkt_num; i++) {
    2cb6:	4290      	cmp	r0, r2
    2cb8:	db06      	blt.n	2cc8 <add_hw_bkpt+0x198>
	FPB->COMP[bpkt_info.cur_idx] = fp_comp;
    2cba:	7828      	ldrb	r0, [r5, #0]
    2cbc:	1c82      	adds	r2, r0, #2
    2cbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	return bpkt_info.cur_idx++;
    2cc2:	1c43      	adds	r3, r0, #1
    2cc4:	702b      	strb	r3, [r5, #0]
    2cc6:	e74b      	b.n	2b60 <add_hw_bkpt+0x30>
		if (FPB->COMP[i] == fp_comp) {
    2cc8:	1c81      	adds	r1, r0, #2
    2cca:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
    2cce:	428c      	cmp	r4, r1
    2cd0:	f43f af46 	beq.w	2b60 <add_hw_bkpt+0x30>
	for (int i = 0; i < bpkt_info.bpkt_num; i++) {
    2cd4:	3001      	adds	r0, #1
    2cd6:	e7ee      	b.n	2cb6 <add_hw_bkpt+0x186>
    2cd8:	200059c7 	.word	0x200059c7
    2cdc:	200059c5 	.word	0x200059c5
    2ce0:	e0002000 	.word	0xe0002000
    2ce4:	00019a3f 	.word	0x00019a3f
    2ce8:	00018fe4 	.word	0x00018fe4
    2cec:	00019a5e 	.word	0x00019a5e
    2cf0:	00019a94 	.word	0x00019a94
    2cf4:	20002494 	.word	0x20002494

00002cf8 <clear_all_hw_bkpt>:
	uint32_t fp_ctrl = FPB->CTRL;
    2cf8:	490d      	ldr	r1, [pc, #52]	; (2d30 <clear_all_hw_bkpt+0x38>)
    2cfa:	680a      	ldr	r2, [r1, #0]
void clear_all_hw_bkpt() {
    2cfc:	b510      	push	{r4, lr}
	uint32_t num_code_comparators = (((fp_ctrl >> 12) & 0x7) << 4) | ((fp_ctrl >> 4) & 0xF);
    2cfe:	0a13      	lsrs	r3, r2, #8
    2d00:	f003 0370 	and.w	r3, r3, #112	; 0x70
    2d04:	f3c2 1203 	ubfx	r2, r2, #4, #4
    2d08:	4313      	orrs	r3, r2
	for (int i = 0; i < num_code_comparators; i++) {
    2d0a:	2200      	movs	r2, #0
    2d0c:	4610      	mov	r0, r2
    2d0e:	429a      	cmp	r2, r3
    2d10:	d109      	bne.n	2d26 <clear_all_hw_bkpt+0x2e>
	bpkt_info.cur_idx = 0;
    2d12:	4b08      	ldr	r3, [pc, #32]	; (2d34 <clear_all_hw_bkpt+0x3c>)
	FPB->CTRL = (FPB->CTRL & ~0x3) | 0x2;
    2d14:	4a06      	ldr	r2, [pc, #24]	; (2d30 <clear_all_hw_bkpt+0x38>)
	bpkt_info.cur_idx = 0;
    2d16:	7018      	strb	r0, [r3, #0]
	FPB->CTRL = (FPB->CTRL & ~0x3) | 0x2;
    2d18:	6813      	ldr	r3, [r2, #0]
    2d1a:	f023 0303 	bic.w	r3, r3, #3
    2d1e:	f043 0302 	orr.w	r3, r3, #2
    2d22:	6013      	str	r3, [r2, #0]
}
    2d24:	bd10      	pop	{r4, pc}
		FPB->COMP[i] = 0;
    2d26:	1c94      	adds	r4, r2, #2
	for (int i = 0; i < num_code_comparators; i++) {
    2d28:	3201      	adds	r2, #1
		FPB->COMP[i] = 0;
    2d2a:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
    2d2e:	e7ee      	b.n	2d0e <clear_all_hw_bkpt+0x16>
    2d30:	e0002000 	.word	0xe0002000
    2d34:	200059c5 	.word	0x200059c5

00002d38 <fpb_disable_cur_inst>:
	uint32_t cur_addr = FPB->COMP[bpkt_idx];
    2d38:	0080      	lsls	r0, r0, #2
void fpb_disable_cur_inst(int bpkt_idx) {
    2d3a:	b510      	push	{r4, lr}
    2d3c:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
    2d40:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
	uint32_t cur_addr = FPB->COMP[bpkt_idx];
    2d44:	68a0      	ldr	r0, [r4, #8]
		next_inst = calc_bpkt_pc(next_inst);
    2d46:	f00e fbdb 	bl	11500 <calc_bpkt_pc>
	while ((next_inst & 0x3) != 0) {
    2d4a:	0783      	lsls	r3, r0, #30
    2d4c:	d1fb      	bne.n	2d46 <fpb_disable_cur_inst+0xe>
	FPB->COMP[FPB_CB_REG] = next_inst | (0x1);
    2d4e:	4b0b      	ldr	r3, [pc, #44]	; (2d7c <fpb_disable_cur_inst+0x44>)
	uint32_t trampoline_addr = (((uint32_t) FPB_Handler5 & (~0x1)) + 3) & (~0x3);
    2d50:	490b      	ldr	r1, [pc, #44]	; (2d80 <fpb_disable_cur_inst+0x48>)
	FPB->COMP[FPB_CB_REG] = next_inst | (0x1);
    2d52:	f040 0201 	orr.w	r2, r0, #1
    2d56:	61da      	str	r2, [r3, #28]
	FPB->COMP[bpkt_idx] &= ~(0x1);
    2d58:	68a3      	ldr	r3, [r4, #8]
	uint32_t trampoline_addr = (((uint32_t) FPB_Handler5 & (~0x1)) + 3) & (~0x3);
    2d5a:	f021 0101 	bic.w	r1, r1, #1
	FPB->COMP[bpkt_idx] &= ~(0x1);
    2d5e:	f023 0301 	bic.w	r3, r3, #1
	uint32_t trampoline_addr = (((uint32_t) FPB_Handler5 & (~0x1)) + 3) & (~0x3);
    2d62:	3103      	adds	r1, #3
	FPB->COMP[bpkt_idx] &= ~(0x1);
    2d64:	60a3      	str	r3, [r4, #8]
	uint32_t jump_inst = calc_branch_instr(next_inst, trampoline_addr);
    2d66:	f021 0103 	bic.w	r1, r1, #3
    2d6a:	f00e fb34 	bl	113d6 <calc_branch_instr>
	*((uint32_t *) (PATCH_TBL + (FPB_CB_REG * 4))) = little_endian_16_bit(jump_inst);
    2d6e:	f00e fbd0 	bl	11512 <little_endian_16_bit>
	return ((uint32_t)(&REMAP_ADDR) + 0x1f) & (~0x1f);
    2d72:	4b04      	ldr	r3, [pc, #16]	; (2d84 <fpb_disable_cur_inst+0x4c>)
    2d74:	f023 031f 	bic.w	r3, r3, #31
	*((uint32_t *) (PATCH_TBL + (FPB_CB_REG * 4))) = little_endian_16_bit(jump_inst);
    2d78:	6158      	str	r0, [r3, #20]
}
    2d7a:	bd10      	pop	{r4, pc}
    2d7c:	e0002000 	.word	0xe0002000
    2d80:	0001139d 	.word	0x0001139d
    2d84:	200024b3 	.word	0x200024b3

00002d88 <fpb_enable_callback>:
	uint32_t cur_inst = FPB->COMP[FPB_CB_REG];
    2d88:	4b0b      	ldr	r3, [pc, #44]	; (2db8 <fpb_enable_callback+0x30>)
    2d8a:	69d8      	ldr	r0, [r3, #28]
	for (int i = 0; i < FPB_CB_REG; i++) {
    2d8c:	2200      	movs	r2, #0
		if (FPB->COMP[i] != 0) {
    2d8e:	0093      	lsls	r3, r2, #2
    2d90:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2d94:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    2d98:	6899      	ldr	r1, [r3, #8]
    2d9a:	b119      	cbz	r1, 2da4 <fpb_enable_callback+0x1c>
			FPB->COMP[i] |= 1;
    2d9c:	6899      	ldr	r1, [r3, #8]
    2d9e:	f041 0101 	orr.w	r1, r1, #1
    2da2:	6099      	str	r1, [r3, #8]
	for (int i = 0; i < FPB_CB_REG; i++) {
    2da4:	3201      	adds	r2, #1
    2da6:	2a05      	cmp	r2, #5
    2da8:	d1f1      	bne.n	2d8e <fpb_enable_callback+0x6>
	FPB->COMP[FPB_CB_REG] &= ~(0x1);
    2daa:	4a03      	ldr	r2, [pc, #12]	; (2db8 <fpb_enable_callback+0x30>)
    2dac:	69d3      	ldr	r3, [r2, #28]
    2dae:	f023 0301 	bic.w	r3, r3, #1
    2db2:	61d3      	str	r3, [r2, #28]
}
    2db4:	4770      	bx	lr
    2db6:	bf00      	nop
    2db8:	e0002000 	.word	0xe0002000

00002dbc <leave_debug_monitor>:
void leave_debug_monitor(stack_context *ctx) {
    2dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const bool is_dwt_dbg_evt = (*dfsr & dfsr_dwt_evt_bitmask);
    2dbe:	4b21      	ldr	r3, [pc, #132]	; (2e44 <leave_debug_monitor+0x88>)
    2dc0:	681a      	ldr	r2, [r3, #0]
	const bool is_bkpt_dbg_evt = (*dfsr & dfsr_bkpt_evt_bitmask);
    2dc2:	6819      	ldr	r1, [r3, #0]
	const bool is_halt_dbg_evt = (*dfsr & dfsr_halt_evt_bitmask);
    2dc4:	681a      	ldr	r2, [r3, #0]
	if (is_bkpt_dbg_evt) {
    2dc6:	f011 0f02 	tst.w	r1, #2
void leave_debug_monitor(stack_context *ctx) {
    2dca:	4604      	mov	r4, r0
    2dcc:	461f      	mov	r7, r3
	if (is_bkpt_dbg_evt) {
    2dce:	d02a      	beq.n	2e26 <leave_debug_monitor+0x6a>
	ebpf_patch *patch = get_dynamic_patch_by_bpkt(ctx->pc);
    2dd0:	6980      	ldr	r0, [r0, #24]
    2dd2:	f000 fd6b 	bl	38ac <get_dynamic_patch_by_bpkt>
	if (patch != NULL) {
    2dd6:	4605      	mov	r5, r0
    2dd8:	b1b0      	cbz	r0, 2e08 <leave_debug_monitor+0x4c>
		profile_start(EV1);
    2dda:	2001      	movs	r0, #1
    2ddc:	f000 fdfe 	bl	39dc <profile_start>
		ret = run_ebpf_filter(patch, args, sizeof(ebpf_args_frame));
    2de0:	2210      	movs	r2, #16
    2de2:	4628      	mov	r0, r5
    2de4:	4621      	mov	r1, r4
    2de6:	f00e fb60 	bl	114aa <run_ebpf_filter>
    2dea:	460e      	mov	r6, r1
    2dec:	4605      	mov	r5, r0
		profile_end(EV1);
    2dee:	2001      	movs	r0, #1
    2df0:	f000 fdfe 	bl	39f0 <profile_end>
		if (op == FILTER_DROP) {
    2df4:	2e01      	cmp	r6, #1
    2df6:	d103      	bne.n	2e00 <leave_debug_monitor+0x44>
			*(volatile uint32_t *) &(ctx->pc) = ctx->lr; // calc_bpkt_addr(ctx->lr); //
    2df8:	6963      	ldr	r3, [r4, #20]
			*(volatile uint32_t *) &(ctx->r0) = ret_code;
    2dfa:	6025      	str	r5, [r4, #0]
			*(volatile uint32_t *) &(ctx->pc) = ctx->lr; // calc_bpkt_addr(ctx->lr); //
    2dfc:	61a3      	str	r3, [r4, #24]
}
    2dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		} else if (op == FILTER_REDIRECT) { // redirect pc to other address
    2e00:	2e02      	cmp	r6, #2
    2e02:	d101      	bne.n	2e08 <leave_debug_monitor+0x4c>
			*(volatile uint32_t *) &(ctx->pc) = ret_code; 
    2e04:	61a5      	str	r5, [r4, #24]
		if (skip) { 
    2e06:	e7fa      	b.n	2dfe <leave_debug_monitor+0x42>
		*demcr |= demcr_single_step_mask;
    2e08:	4a0f      	ldr	r2, [pc, #60]	; (2e48 <leave_debug_monitor+0x8c>)
    2e0a:	6813      	ldr	r3, [r2, #0]
    2e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    2e10:	6013      	str	r3, [r2, #0]
		*dfsr = dfsr_bkpt_evt_bitmask;
    2e12:	2302      	movs	r3, #2
	FPB->CTRL = (FPB->CTRL & ~0x3) | 0x2;
    2e14:	4a0d      	ldr	r2, [pc, #52]	; (2e4c <leave_debug_monitor+0x90>)
		*dfsr = dfsr_bkpt_evt_bitmask;
    2e16:	603b      	str	r3, [r7, #0]
	FPB->CTRL = (FPB->CTRL & ~0x3) | 0x2;
    2e18:	6813      	ldr	r3, [r2, #0]
    2e1a:	f023 0303 	bic.w	r3, r3, #3
    2e1e:	f043 0302 	orr.w	r3, r3, #2
	FPB->CTRL |= 0x3;
    2e22:	6013      	str	r3, [r2, #0]
		TEST_LOG("is_halt_dbg_evt\n");
    2e24:	e7eb      	b.n	2dfe <leave_debug_monitor+0x42>
	} else if (is_halt_dbg_evt) {
    2e26:	07d2      	lsls	r2, r2, #31
    2e28:	d5e9      	bpl.n	2dfe <leave_debug_monitor+0x42>
		*demcr &= ~(demcr_single_step_mask);
    2e2a:	4907      	ldr	r1, [pc, #28]	; (2e48 <leave_debug_monitor+0x8c>)
    2e2c:	680a      	ldr	r2, [r1, #0]
    2e2e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    2e32:	600a      	str	r2, [r1, #0]
		*dfsr = dfsr_halt_evt_bitmask;
    2e34:	2201      	movs	r2, #1
    2e36:	601a      	str	r2, [r3, #0]
	FPB->CTRL |= 0x3;
    2e38:	4a04      	ldr	r2, [pc, #16]	; (2e4c <leave_debug_monitor+0x90>)
    2e3a:	6813      	ldr	r3, [r2, #0]
    2e3c:	f043 0303 	orr.w	r3, r3, #3
    2e40:	e7ef      	b.n	2e22 <leave_debug_monitor+0x66>
    2e42:	bf00      	nop
    2e44:	e000ed30 	.word	0xe000ed30
    2e48:	e000edfc 	.word	0xe000edfc
    2e4c:	e0002000 	.word	0xe0002000

00002e50 <set_patch_mode>:
void set_patch_mode(patch_mode_t mode) {
    2e50:	b538      	push	{r3, r4, r5, lr}
	memset(&REMAP_ADDR, 0, sizeof(REMAP_ADDR));
    2e52:	4c20      	ldr	r4, [pc, #128]	; (2ed4 <set_patch_mode+0x84>)
void set_patch_mode(patch_mode_t mode) {
    2e54:	4605      	mov	r5, r0
	clear_all_hw_bkpt();
    2e56:	f7ff ff4f 	bl	2cf8 <clear_all_hw_bkpt>
	memset(&REMAP_ADDR, 0, sizeof(REMAP_ADDR));
    2e5a:	222c      	movs	r2, #44	; 0x2c
    2e5c:	2100      	movs	r1, #0
    2e5e:	4620      	mov	r0, r4
    2e60:	f7ff fac7 	bl	23f2 <memset>
	FPB->REMAP = 0;
    2e64:	4b1c      	ldr	r3, [pc, #112]	; (2ed8 <set_patch_mode+0x88>)
    2e66:	2200      	movs	r2, #0
    2e68:	605a      	str	r2, [r3, #4]
	if (mode == CORTEX_FPB_PATCH) { // use fpb
    2e6a:	b965      	cbnz	r5, 2e86 <set_patch_mode+0x36>
	return ((uint32_t)(&REMAP_ADDR) + 0x1f) & (~0x1f);
    2e6c:	f104 021f 	add.w	r2, r4, #31
    2e70:	f022 021f 	bic.w	r2, r2, #31
	FPB->REMAP = remap_addr;
    2e74:	605a      	str	r2, [r3, #4]
	REMAP_ADDR.active = true;
    2e76:	2201      	movs	r2, #1
    2e78:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	FPB->CTRL |= 0x3;
    2e7c:	681a      	ldr	r2, [r3, #0]
    2e7e:	f042 0203 	orr.w	r2, r2, #3
	*shp8 = -1;
    2e82:	601a      	str	r2, [r3, #0]
}
    2e84:	bd38      	pop	{r3, r4, r5, pc}
	} else if (mode == CORTEX_DEB_MON_PATCH) {
    2e86:	2d01      	cmp	r5, #1
    2e88:	d1fc      	bne.n	2e84 <set_patch_mode+0x34>
	*scb_hfsr = (1 << 31);
    2e8a:	4a14      	ldr	r2, [pc, #80]	; (2edc <set_patch_mode+0x8c>)
    2e8c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    2e90:	6011      	str	r1, [r2, #0]
	*scb_dfsr = (1 << 2);
    2e92:	2104      	movs	r1, #4
    2e94:	f8c2 1d04 	str.w	r1, [r2, #3332]	; 0xd04
	return (((*dhcsr) & 0x1) != 0);
    2e98:	f602 52c4 	addw	r2, r2, #3524	; 0xdc4
    2e9c:	6812      	ldr	r2, [r2, #0]
	if (halting_debug_enabled()) {
    2e9e:	07d2      	lsls	r2, r2, #31
    2ea0:	d504      	bpl.n	2eac <set_patch_mode+0x5c>
		DEBUG_LOG("Halting Debug Enabled - Can't Enable Monitor Mode Debug!");
    2ea2:	480f      	ldr	r0, [pc, #60]	; (2ee0 <set_patch_mode+0x90>)
}
    2ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		DEBUG_LOG("Halting Debug Enabled - Can't Enable Monitor Mode Debug!");
    2ea8:	f00e bb11 	b.w	114ce <debug_log>
	*demcr |= DCB_DEMCR_MON_EN; 
    2eac:	4a0d      	ldr	r2, [pc, #52]	; (2ee4 <set_patch_mode+0x94>)
	DEBUG_LOG("debug_monitor_init setup dhcsr: %u\n", *demcr);
    2eae:	480e      	ldr	r0, [pc, #56]	; (2ee8 <set_patch_mode+0x98>)
	*demcr |= DCB_DEMCR_MON_EN; 
    2eb0:	6811      	ldr	r1, [r2, #0]
    2eb2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    2eb6:	6011      	str	r1, [r2, #0]
	FPB->CTRL |= 0x3;
    2eb8:	6819      	ldr	r1, [r3, #0]
    2eba:	f041 0103 	orr.w	r1, r1, #3
    2ebe:	6019      	str	r1, [r3, #0]
	DEBUG_LOG("debug_monitor_init setup dhcsr: %u\n", *demcr);
    2ec0:	6811      	ldr	r1, [r2, #0]
    2ec2:	f00e fb04 	bl	114ce <debug_log>
	*shp8 = 0xff;
    2ec6:	4b09      	ldr	r3, [pc, #36]	; (2eec <set_patch_mode+0x9c>)
    2ec8:	22ff      	movs	r2, #255	; 0xff
    2eca:	601a      	str	r2, [r3, #0]
	*shp8 = -1;
    2ecc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2ed0:	e7d7      	b.n	2e82 <set_patch_mode+0x32>
    2ed2:	bf00      	nop
    2ed4:	20002494 	.word	0x20002494
    2ed8:	e0002000 	.word	0xe0002000
    2edc:	e000e02c 	.word	0xe000e02c
    2ee0:	00019ad1 	.word	0x00019ad1
    2ee4:	e000edfc 	.word	0xe000edfc
    2ee8:	00019b0a 	.word	0x00019b0a
    2eec:	e000ed20 	.word	0xe000ed20

00002ef0 <test_debugmon_patch>:
	// enable flash patch break point
	FPB->REMAP = PATCH_TBL;
	FPB->CTRL = 3;
}

void test_debugmon_patch() {
    2ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t buggy_addr = (uint32_t) RawBuggyFunc & 0xFFFFFFFE;
    2ef4:	4c18      	ldr	r4, [pc, #96]	; (2f58 <test_debugmon_patch+0x68>)
	fixed_addr = (uint32_t) FPB_Handler0 & 0xFFFFFFFE;
    2ef6:	4e19      	ldr	r6, [pc, #100]	; (2f5c <test_debugmon_patch+0x6c>)
	//RawBuggyFunc();
	DEBUG_LOG("test_debugmon_patch\n");
    2ef8:	4819      	ldr	r0, [pc, #100]	; (2f60 <test_debugmon_patch+0x70>)
	FPB->COMP[fidx] = buggy_addr | 0x1;
    2efa:	4f1a      	ldr	r7, [pc, #104]	; (2f64 <test_debugmon_patch+0x74>)
	const uint32_t PATCH_TBL = (uint32_t) (&REMAP_ADDR) & (~0x1F);
    2efc:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2f74 <test_debugmon_patch+0x84>
	uint32_t buggy_addr = (uint32_t) RawBuggyFunc & 0xFFFFFFFE;
    2f00:	f024 0401 	bic.w	r4, r4, #1
	DEBUG_LOG("test_debugmon_patch\n");
    2f04:	f00e fae3 	bl	114ce <debug_log>
	fixed_addr = (uint32_t) FPB_Handler0 & 0xFFFFFFFE;
    2f08:	f026 0601 	bic.w	r6, r6, #1
	test_freertos_cve();
    2f0c:	f7ff fdba 	bl	2a84 <test_freertos_cve>
	FPB->COMP[fidx] = buggy_addr | 0x1;
    2f10:	f044 0301 	orr.w	r3, r4, #1
    2f14:	617b      	str	r3, [r7, #20]
	uint32_t jmp_inst = calc_branch_instr(buggy_addr, fixed_addr);
    2f16:	4631      	mov	r1, r6
    2f18:	4620      	mov	r0, r4
    2f1a:	f00e fa5c 	bl	113d6 <calc_branch_instr>
    2f1e:	4681      	mov	r9, r0
	*((volatile uint32_t *) (PATCH_TBL + fidx * 4)) = little_endian_16_bit(jmp_inst);
    2f20:	f00e faf7 	bl	11512 <little_endian_16_bit>
	const uint32_t PATCH_TBL = (uint32_t) (&REMAP_ADDR) & (~0x1F);
    2f24:	f028 051f 	bic.w	r5, r8, #31
	DEBUG_LOG("buggy_addr: 0x%08x fixed_addr: 0x%08x\n", buggy_addr, fixed_addr);
    2f28:	4632      	mov	r2, r6
    2f2a:	4621      	mov	r1, r4
	*((volatile uint32_t *) (PATCH_TBL + fidx * 4)) = little_endian_16_bit(jmp_inst);
    2f2c:	60e8      	str	r0, [r5, #12]
	DEBUG_LOG("buggy_addr: 0x%08x fixed_addr: 0x%08x\n", buggy_addr, fixed_addr);
    2f2e:	480e      	ldr	r0, [pc, #56]	; (2f68 <test_debugmon_patch+0x78>)
    2f30:	f00e facd 	bl	114ce <debug_log>
	DEBUG_LOG("ADDR: 0x%08x excepted value: 0x%08x\n", (&REMAP_ADDR), little_endian_16_bit(jmp_inst));
    2f34:	4648      	mov	r0, r9
    2f36:	f00e faec 	bl	11512 <little_endian_16_bit>
    2f3a:	4641      	mov	r1, r8
    2f3c:	4602      	mov	r2, r0
    2f3e:	480b      	ldr	r0, [pc, #44]	; (2f6c <test_debugmon_patch+0x7c>)
    2f40:	f00e fac5 	bl	114ce <debug_log>
	DEBUG_LOG("remap: 0x%08x inst addr: 0x%08x\n", PATCH_TBL, *((volatile uint32_t *) (PATCH_TBL + fidx * 4)));
    2f44:	68ea      	ldr	r2, [r5, #12]
    2f46:	480a      	ldr	r0, [pc, #40]	; (2f70 <test_debugmon_patch+0x80>)
    2f48:	4629      	mov	r1, r5
    2f4a:	f00e fac0 	bl	114ce <debug_log>
	FPB->CTRL = 3;
    2f4e:	2303      	movs	r3, #3
	FPB->REMAP = PATCH_TBL;
    2f50:	607d      	str	r5, [r7, #4]
	FPB->CTRL = 3;
    2f52:	603b      	str	r3, [r7, #0]
	// load dummy patch
	//set_patch_mode(CORTEX_FPB_PATCH);
	fpb_setup_test();
	
	/* Our approach */
}
    2f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2f58:	00002a69 	.word	0x00002a69
    2f5c:	00002a31 	.word	0x00002a31
    2f60:	00019ba2 	.word	0x00019ba2
    2f64:	e0002000 	.word	0xe0002000
    2f68:	00019bb7 	.word	0x00019bb7
    2f6c:	00019bde 	.word	0x00019bde
    2f70:	00019c03 	.word	0x00019c03
    2f74:	20002494 	.word	0x20002494

00002f78 <test_dynamic_bug>:
		DEBUG_LOG("%d -> %s\n", i, patch_list[i].cve);
	}
	setup_cve_list();
}

int test_dynamic_bug(int v) {
    2f78:	b510      	push	{r4, lr}
    2f7a:	4604      	mov	r4, r0
	DEBUG_LOG("halo\n");
    2f7c:	4804      	ldr	r0, [pc, #16]	; (2f90 <test_dynamic_bug+0x18>)
    2f7e:	f00e faa6 	bl	114ce <debug_log>
		//DEBUG_LOG("test_dynamic_bug-112: %d\n", v);
		return -1;
	}
	//DEBUG_LOG("test_dynamic_bug-: %d\n", v);
	return 0;
}
    2f82:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
    2f86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2f8a:	bfd8      	it	le
    2f8c:	2000      	movle	r0, #0
    2f8e:	bd10      	pop	{r4, pc}
    2f90:	00019cee 	.word	0x00019cee

00002f94 <show_local_patch_desc>:
void show_local_patch_desc() {
    2f94:	b570      	push	{r4, r5, r6, lr}
		DEBUG_LOG("%d -> %s\n", i, patch_list[i].cve);
    2f96:	4d07      	ldr	r5, [pc, #28]	; (2fb4 <show_local_patch_desc+0x20>)
    2f98:	4e07      	ldr	r6, [pc, #28]	; (2fb8 <show_local_patch_desc+0x24>)
	for (int i = 0; i < n; i++) {
    2f9a:	2400      	movs	r4, #0
		DEBUG_LOG("%d -> %s\n", i, patch_list[i].cve);
    2f9c:	0123      	lsls	r3, r4, #4
    2f9e:	4621      	mov	r1, r4
    2fa0:	595a      	ldr	r2, [r3, r5]
    2fa2:	4630      	mov	r0, r6
	for (int i = 0; i < n; i++) {
    2fa4:	3401      	adds	r4, #1
		DEBUG_LOG("%d -> %s\n", i, patch_list[i].cve);
    2fa6:	f00e fa92 	bl	114ce <debug_log>
	for (int i = 0; i < n; i++) {
    2faa:	2c04      	cmp	r4, #4
    2fac:	d1f6      	bne.n	2f9c <show_local_patch_desc+0x8>
	patch_list[0].loc = (uint32_t) test_dynamic_bug;
    2fae:	4b03      	ldr	r3, [pc, #12]	; (2fbc <show_local_patch_desc+0x28>)
    2fb0:	606b      	str	r3, [r5, #4]
}
    2fb2:	bd70      	pop	{r4, r5, r6, pc}
    2fb4:	2000c61c 	.word	0x2000c61c
    2fb8:	00019c6e 	.word	0x00019c6e
    2fbc:	00002f79 	.word	0x00002f79

00002fc0 <read_local_patch>:

ebpf_patch* read_local_patch(int pid) {
	int n = sizeof(patch_list) / sizeof(struct local_patch);
	if (pid > n) {
    2fc0:	2804      	cmp	r0, #4
ebpf_patch* read_local_patch(int pid) {
    2fc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fc4:	4604      	mov	r4, r0
	if (pid > n) {
    2fc6:	dd07      	ble.n	2fd8 <read_local_patch+0x18>
		show_local_patch_desc();
    2fc8:	f7ff ffe4 	bl	2f94 <show_local_patch_desc>
		DEBUG_LOG("patch id less than %d\n", n);
    2fcc:	4821      	ldr	r0, [pc, #132]	; (3054 <CONFIG_USB_DEVICE_VID+0x71>)
    2fce:	2104      	movs	r1, #4
    2fd0:	f00e fa7d 	bl	114ce <debug_log>
		return NULL;
    2fd4:	2000      	movs	r0, #0
	_patch->vm = vm;
	load_local_patch_to_ctx(_patch);
	// _patch->is_active = false;
	DEBUG_LOG("load patch %s success!\n", pt->cve);
	return _patch;
}
    2fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!is_init) {
    2fd8:	4e1f      	ldr	r6, [pc, #124]	; (3058 <CONFIG_USB_DEVICE_VID+0x75>)
    2fda:	4d20      	ldr	r5, [pc, #128]	; (305c <CONFIG_USB_DEVICE_VID+0x79>)
    2fdc:	7833      	ldrb	r3, [r6, #0]
    2fde:	4f20      	ldr	r7, [pc, #128]	; (3060 <CONFIG_USB_DEVICE_VID+0x7d>)
    2fe0:	b96b      	cbnz	r3, 2ffe <CONFIG_USB_DEVICE_VID+0x1b>
		_desc = ebpf_calloc(1, sizeof(patch_desc));
    2fe2:	2108      	movs	r1, #8
    2fe4:	2001      	movs	r0, #1
    2fe6:	f000 fd77 	bl	3ad8 <ebpf_calloc>
		_patch = ebpf_calloc(1, sizeof(ebpf_patch));
    2fea:	210c      	movs	r1, #12
		_desc = ebpf_calloc(1, sizeof(patch_desc));
    2fec:	6028      	str	r0, [r5, #0]
		_patch = ebpf_calloc(1, sizeof(ebpf_patch));
    2fee:	2001      	movs	r0, #1
    2ff0:	f000 fd72 	bl	3ad8 <ebpf_calloc>
		is_init = true;
    2ff4:	2301      	movs	r3, #1
		_patch = ebpf_calloc(1, sizeof(ebpf_patch));
    2ff6:	6038      	str	r0, [r7, #0]
		is_init = true;
    2ff8:	7033      	strb	r3, [r6, #0]
		init_patch_sys();
    2ffa:	f000 fc05 	bl	3808 <init_patch_sys>
	_desc->type = DynamicPatchPoint;
    2ffe:	682b      	ldr	r3, [r5, #0]
	_desc->inst_addr = pt->loc;
    3000:	4e18      	ldr	r6, [pc, #96]	; (3064 <CONFIG_USB_DEVICE_VID+0x81>)
	_desc->type = DynamicPatchPoint;
    3002:	2200      	movs	r2, #0
	_desc->inst_addr = pt->loc;
    3004:	0124      	lsls	r4, r4, #4
	_desc->type = DynamicPatchPoint;
    3006:	705a      	strb	r2, [r3, #1]
	_desc->code_len = 0; // code do not save in desc now
    3008:	709a      	strb	r2, [r3, #2]
    300a:	70da      	strb	r2, [r3, #3]
	_desc->inst_addr = pt->loc;
    300c:	1932      	adds	r2, r6, r4
	_desc->type = DynamicPatchPoint;
    300e:	2102      	movs	r1, #2
    3010:	7019      	strb	r1, [r3, #0]
	_desc->inst_addr = pt->loc;
    3012:	6851      	ldr	r1, [r2, #4]
    3014:	6059      	str	r1, [r3, #4]
	_patch->desc = _desc;
    3016:	6839      	ldr	r1, [r7, #0]
	ebpf_vm *vm = _patch->vm;
    3018:	684d      	ldr	r5, [r1, #4]
	_patch->desc = _desc;
    301a:	600b      	str	r3, [r1, #0]
	if (vm == NULL) {
    301c:	b925      	cbnz	r5, 3028 <CONFIG_USB_DEVICE_VID+0x45>
		vm = init_ebpf_vm(pt->code, pt->code_len);
    301e:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
    3022:	f00e fab7 	bl	11594 <init_ebpf_vm>
    3026:	4605      	mov	r5, r0
	ebpf_vm_set_inst(vm, pt->code, pt->code_len);
    3028:	1933      	adds	r3, r6, r4
    302a:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
    302e:	4628      	mov	r0, r5
    3030:	f00e fac0 	bl	115b4 <ebpf_vm_set_inst>
	vm->use_jit = true;
    3034:	2301      	movs	r3, #1
    3036:	752b      	strb	r3, [r5, #20]
		gen_jit_code(vm);
    3038:	4628      	mov	r0, r5
    303a:	f00f fc53 	bl	128e4 <gen_jit_code>
	_patch->vm = vm;
    303e:	6838      	ldr	r0, [r7, #0]
    3040:	6045      	str	r5, [r0, #4]
	load_local_patch_to_ctx(_patch);
    3042:	f000 fc49 	bl	38d8 <load_local_patch_to_ctx>
	DEBUG_LOG("load patch %s success!\n", pt->cve);
    3046:	4808      	ldr	r0, [pc, #32]	; (3068 <CONFIG_USB_DEVICE_VID+0x85>)
    3048:	5931      	ldr	r1, [r6, r4]
    304a:	f00e fa40 	bl	114ce <debug_log>
	return _patch;
    304e:	6838      	ldr	r0, [r7, #0]
    3050:	e7c1      	b.n	2fd6 <read_local_patch+0x16>
    3052:	bf00      	nop
    3054:	00019c3f 	.word	0x00019c3f
    3058:	200059c8 	.word	0x200059c8
    305c:	200024c0 	.word	0x200024c0
    3060:	200024c4 	.word	0x200024c4
    3064:	2000c61c 	.word	0x2000c61c
    3068:	00019c56 	.word	0x00019c56

0000306c <my_memmove>:
	char *src = (char *) arg2;
	int len = arg3;
	// for (int i = 0; i < len; i++) {
	// 	dst[i] = src[i];
	// }
	DEBUG_LOG("my_memmove: %d %d %d\n", dst, src, len);
    306c:	4601      	mov	r1, r0
    306e:	9b00      	ldr	r3, [sp, #0]
    3070:	4801      	ldr	r0, [pc, #4]	; (3078 <my_memmove+0xc>)
    3072:	f00e ba2c 	b.w	114ce <debug_log>
    3076:	bf00      	nop
    3078:	00019d83 	.word	0x00019d83

0000307c <ebpf_eva>:
		.r2 = opt_ptr,
	};
	ebpf_eva(code12, sizeof(code12), &args_frame, sizeof(args_frame));
}

void ebpf_eva(uint8_t *code, int code_len, void *args, int ags_len) {
    307c:	b5f0      	push	{r4, r5, r6, r7, lr}
    307e:	b089      	sub	sp, #36	; 0x24
    3080:	4614      	mov	r4, r2
	bool test_jit = true;
	// test_jit = false;
	ebpf_vm vm;
	ebpf_vm_set_inst(&vm, code, code_len);
    3082:	460a      	mov	r2, r1
    3084:	4601      	mov	r1, r0
    3086:	a802      	add	r0, sp, #8
void ebpf_eva(uint8_t *code, int code_len, void *args, int ags_len) {
    3088:	461d      	mov	r5, r3
	ebpf_vm_set_inst(&vm, code, code_len);
    308a:	f00e fa93 	bl	115b4 <ebpf_vm_set_inst>
	//profile_exit();
	profile_add_event("ebpf");
    308e:	4821      	ldr	r0, [pc, #132]	; (3114 <ebpf_eva+0x98>)
    3090:	f000 fc74 	bl	397c <profile_add_event>
	uint64_t ret1 = 0, ret2 = 0;
	profile_start(EV0);
    3094:	2000      	movs	r0, #0
    3096:	f000 fca1 	bl	39dc <profile_start>
	ret1 = ebpf_vm_exec(&vm, args, ags_len);
    309a:	462a      	mov	r2, r5
    309c:	4621      	mov	r1, r4
    309e:	a802      	add	r0, sp, #8
    30a0:	f00e fa9a 	bl	115d8 <ebpf_vm_exec>
    30a4:	4607      	mov	r7, r0
	profile_end(EV0);
    30a6:	2000      	movs	r0, #0
	ret1 = ebpf_vm_exec(&vm, args, ags_len);
    30a8:	460e      	mov	r6, r1
	profile_end(EV0);
    30aa:	f000 fca1 	bl	39f0 <profile_end>
	// jit_compile
	if (test_jit) {
		gen_jit_code(&vm);
    30ae:	a802      	add	r0, sp, #8
    30b0:	f00f fc18 	bl	128e4 <gen_jit_code>
		profile_start(EV1);
    30b4:	2001      	movs	r0, #1
    30b6:	f000 fc91 	bl	39dc <profile_start>
		ret2 = vm.jit_func(args, ags_len);
    30ba:	9b05      	ldr	r3, [sp, #20]
    30bc:	b2a9      	uxth	r1, r5
    30be:	4620      	mov	r0, r4
    30c0:	4798      	blx	r3
    30c2:	4605      	mov	r5, r0
		profile_end(EV1);
    30c4:	2001      	movs	r0, #1
		ret2 = vm.jit_func(args, ags_len);
    30c6:	460c      	mov	r4, r1
		profile_end(EV1);
    30c8:	f000 fc92 	bl	39f0 <profile_end>
		DEBUG_LOG("jit_func address: 0x%08x\n", (uint32_t) vm.jit_func);
    30cc:	9905      	ldr	r1, [sp, #20]
    30ce:	4812      	ldr	r0, [pc, #72]	; (3118 <ebpf_eva+0x9c>)
    30d0:	f00e f9fd 	bl	114ce <debug_log>
		jit_mem_free(vm.jmem);
    30d4:	9806      	ldr	r0, [sp, #24]
    30d6:	f00f fbf8 	bl	128ca <jit_mem_free>
	}
	
	DEBUG_LOG("Interupter: Op=%d Ret=%d Jit: Op=%d Ret=%d\n", (int) (ret1 >> 32), (int) (ret1 & 0xffffffff), 
    30da:	4623      	mov	r3, r4
    30dc:	463a      	mov	r2, r7
    30de:	4631      	mov	r1, r6
    30e0:	9500      	str	r5, [sp, #0]
    30e2:	480e      	ldr	r0, [pc, #56]	; (311c <ebpf_eva+0xa0>)
    30e4:	f00e f9f3 	bl	114ce <debug_log>
		(int) (ret2 >> 32), (int) (ret2 & 0xffffffff));
	profile_dump(EV0);
    30e8:	2000      	movs	r0, #0
    30ea:	f000 fca1 	bl	3a30 <profile_dump>
	profile_dump(EV1);
    30ee:	2001      	movs	r0, #1
    30f0:	f000 fc9e 	bl	3a30 <profile_dump>

	int total_mem = jit_mem_statistic(&vm) + get_ebpf_alloc_size();
    30f4:	a802      	add	r0, sp, #8
    30f6:	f00f fc21 	bl	1293c <jit_mem_statistic>
    30fa:	4604      	mov	r4, r0
    30fc:	f000 fcf4 	bl	3ae8 <get_ebpf_alloc_size>
	DEBUG_LOG("mem size: %d bytes\n", total_mem);
    3100:	1821      	adds	r1, r4, r0
    3102:	4807      	ldr	r0, [pc, #28]	; (3120 <ebpf_eva+0xa4>)
    3104:	f00e f9e3 	bl	114ce <debug_log>
	DEBUG_LOG("finish----------------------------------------\n");
    3108:	4806      	ldr	r0, [pc, #24]	; (3124 <ebpf_eva+0xa8>)
    310a:	f00e f9e0 	bl	114ce <debug_log>
}
    310e:	b009      	add	sp, #36	; 0x24
    3110:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3112:	bf00      	nop
    3114:	00019cf4 	.word	0x00019cf4
    3118:	00019cf9 	.word	0x00019cf9
    311c:	00019d13 	.word	0x00019d13
    3120:	00019d3f 	.word	0x00019d3f
    3124:	00019d53 	.word	0x00019d53

00003128 <test_ebpf_c0>:
void test_ebpf_c0() {
    3128:	b500      	push	{lr}
    312a:	b089      	sub	sp, #36	; 0x24
	args_frame.r0 = 2500;
    312c:	f640 13c4 	movw	r3, #2500	; 0x9c4
	ebpf_eva(code0, sizeof(code0), &args_frame, sizeof(args_frame));
    3130:	466a      	mov	r2, sp
    3132:	2151      	movs	r1, #81	; 0x51
	args_frame.r0 = 2500;
    3134:	9300      	str	r3, [sp, #0]
	ebpf_eva(code0, sizeof(code0), &args_frame, sizeof(args_frame));
    3136:	4808      	ldr	r0, [pc, #32]	; (3158 <test_ebpf_c0+0x30>)
    3138:	2320      	movs	r3, #32
    313a:	f7ff ff9f 	bl	307c <ebpf_eva>
	profile_start(EV0);
    313e:	2000      	movs	r0, #0
    3140:	f000 fc4c 	bl	39dc <profile_start>
	profile_end(EV0);
    3144:	2000      	movs	r0, #0
    3146:	f000 fc53 	bl	39f0 <profile_end>
	profile_dump(EV0);
    314a:	2000      	movs	r0, #0
    314c:	f000 fc70 	bl	3a30 <profile_dump>
}
    3150:	b009      	add	sp, #36	; 0x24
    3152:	f85d fb04 	ldr.w	pc, [sp], #4
    3156:	bf00      	nop
    3158:	2000ce90 	.word	0x2000ce90

0000315c <test_ebpf_c1>:
void test_ebpf_c1() {
    315c:	b500      	push	{lr}
	unsigned char testcase[] = {
    315e:	4a0a      	ldr	r2, [pc, #40]	; (3188 <test_ebpf_c1+0x2c>)
void test_ebpf_c1() {
    3160:	b08b      	sub	sp, #44	; 0x2c
	unsigned char testcase[] = {
    3162:	6810      	ldr	r0, [r2, #0]
    3164:	6851      	ldr	r1, [r2, #4]
	args_frame.r1 = (uint32_t) testcase;
    3166:	f8cd d00c 	str.w	sp, [sp, #12]
	unsigned char testcase[] = {
    316a:	466b      	mov	r3, sp
    316c:	c303      	stmia	r3!, {r0, r1}
	args_frame.r2 = 500;
    316e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    3172:	9304      	str	r3, [sp, #16]
	ebpf_eva(code1, sizeof(code1), &args_frame, sizeof(args_frame));
    3174:	aa02      	add	r2, sp, #8
    3176:	2320      	movs	r3, #32
    3178:	2151      	movs	r1, #81	; 0x51
    317a:	4804      	ldr	r0, [pc, #16]	; (318c <test_ebpf_c1+0x30>)
    317c:	f7ff ff7e 	bl	307c <ebpf_eva>
}
    3180:	b00b      	add	sp, #44	; 0x2c
    3182:	f85d fb04 	ldr.w	pc, [sp], #4
    3186:	bf00      	nop
    3188:	00019008 	.word	0x00019008
    318c:	2000cee1 	.word	0x2000cee1

00003190 <test_ebpf_c2>:
void test_ebpf_c2() {
    3190:	b500      	push	{lr}
	args_stack_frame args_frame ={
    3192:	22e9      	movs	r2, #233	; 0xe9
void test_ebpf_c2() {
    3194:	b08b      	sub	sp, #44	; 0x2c
	args_stack_frame args_frame ={
    3196:	2314      	movs	r3, #20
    3198:	e9cd 2301 	strd	r2, r3, [sp, #4]
		.r1 = ((uint32_t)(&mem_size)),
    319c:	ab01      	add	r3, sp, #4
	args_stack_frame args_frame ={
    319e:	9303      	str	r3, [sp, #12]
    31a0:	2300      	movs	r3, #0
    31a2:	e9cd 3304 	strd	r3, r3, [sp, #16]
    31a6:	e9cd 3306 	strd	r3, r3, [sp, #24]
    31aa:	e9cd 3308 	strd	r3, r3, [sp, #32]
	ebpf_eva(code2, sizeof(code2), &args_frame, sizeof(args_frame));
    31ae:	aa02      	add	r2, sp, #8
    31b0:	2320      	movs	r3, #32
    31b2:	2141      	movs	r1, #65	; 0x41
    31b4:	4802      	ldr	r0, [pc, #8]	; (31c0 <test_ebpf_c2+0x30>)
    31b6:	f7ff ff61 	bl	307c <ebpf_eva>
}
    31ba:	b00b      	add	sp, #44	; 0x2c
    31bc:	f85d fb04 	ldr.w	pc, [sp], #4
    31c0:	2000d0cd 	.word	0x2000d0cd

000031c4 <test_ebpf_c3>:
void test_ebpf_c3() { 
    31c4:	b500      	push	{lr}
    31c6:	b089      	sub	sp, #36	; 0x24
	args_stack_frame args_frame = {0};
    31c8:	2218      	movs	r2, #24
    31ca:	2100      	movs	r1, #0
    31cc:	a802      	add	r0, sp, #8
    31ce:	f7ff f910 	bl	23f2 <memset>
	args_frame.r0 = test_str;
    31d2:	4b07      	ldr	r3, [pc, #28]	; (31f0 <test_ebpf_c3+0x2c>)
    31d4:	9300      	str	r3, [sp, #0]
	args_frame.r1 = (uint32_t) my_memmove;
    31d6:	4b07      	ldr	r3, [pc, #28]	; (31f4 <test_ebpf_c3+0x30>)
    31d8:	9301      	str	r3, [sp, #4]
	ebpf_eva(code3, sizeof(code3), &args_frame, sizeof(args_frame));
    31da:	466a      	mov	r2, sp
    31dc:	2320      	movs	r3, #32
    31de:	f240 11e9 	movw	r1, #489	; 0x1e9
    31e2:	4805      	ldr	r0, [pc, #20]	; (31f8 <test_ebpf_c3+0x34>)
    31e4:	f7ff ff4a 	bl	307c <ebpf_eva>
}
    31e8:	b009      	add	sp, #36	; 0x24
    31ea:	f85d fb04 	ldr.w	pc, [sp], #4
    31ee:	bf00      	nop
    31f0:	00019de3 	.word	0x00019de3
    31f4:	0000306d 	.word	0x0000306d
    31f8:	2000d10e 	.word	0x2000d10e

000031fc <test_ebpf_c4>:
void test_ebpf_c4() {
    31fc:	b500      	push	{lr}
	args_frame.xpsr = 7;
    31fe:	2205      	movs	r2, #5
void test_ebpf_c4() {
    3200:	b089      	sub	sp, #36	; 0x24
	args_frame.xpsr = 7;
    3202:	2307      	movs	r3, #7
    3204:	e9cd 2306 	strd	r2, r3, [sp, #24]
	ebpf_eva(code4, sizeof(code4), &args_frame, sizeof(args_frame));
    3208:	2169      	movs	r1, #105	; 0x69
    320a:	2320      	movs	r3, #32
    320c:	466a      	mov	r2, sp
    320e:	4803      	ldr	r0, [pc, #12]	; (321c <test_ebpf_c4+0x20>)
    3210:	f7ff ff34 	bl	307c <ebpf_eva>
}
    3214:	b009      	add	sp, #36	; 0x24
    3216:	f85d fb04 	ldr.w	pc, [sp], #4
    321a:	bf00      	nop
    321c:	2000d2f7 	.word	0x2000d2f7

00003220 <test_ebpf_c5>:
void test_ebpf_c5() {
    3220:	b510      	push	{r4, lr}
    3222:	b090      	sub	sp, #64	; 0x40
	struct gpio_struct2 g2 = {
    3224:	ab03      	add	r3, sp, #12
    3226:	4618      	mov	r0, r3
    3228:	2214      	movs	r2, #20
    322a:	2100      	movs	r1, #0
    322c:	f7ff f8e1 	bl	23f2 <memset>
	args_stack_frame args_frame = {
    3230:	2420      	movs	r4, #32
	struct gpio_struct1 g1 = {
    3232:	2100      	movs	r1, #0
    3234:	e9cd 1001 	strd	r1, r0, [sp, #4]
	args_stack_frame args_frame = {
    3238:	4622      	mov	r2, r4
    323a:	eb0d 0004 	add.w	r0, sp, r4
    323e:	f7ff f8d8 	bl	23f2 <memset>
    3242:	ab01      	add	r3, sp, #4
    3244:	9309      	str	r3, [sp, #36]	; 0x24
	ebpf_eva(code5, sizeof(code5), &args_frame, sizeof(args_frame));
    3246:	eb0d 0204 	add.w	r2, sp, r4
    324a:	4623      	mov	r3, r4
    324c:	2141      	movs	r1, #65	; 0x41
    324e:	4802      	ldr	r0, [pc, #8]	; (3258 <test_ebpf_c5+0x38>)
    3250:	f7ff ff14 	bl	307c <ebpf_eva>
}
    3254:	b010      	add	sp, #64	; 0x40
    3256:	bd10      	pop	{r4, pc}
    3258:	2000d360 	.word	0x2000d360

0000325c <test_ebpf_c6>:
void test_ebpf_c6() {
    325c:	b500      	push	{lr}
	unsigned char mqtt_buf[6] = {0x81, 0x21, 0x12, 0, 0, 0};
    325e:	4b0f      	ldr	r3, [pc, #60]	; (329c <test_ebpf_c6+0x40>)
    3260:	f853 0f08 	ldr.w	r0, [r3, #8]!
void test_ebpf_c6() {
    3264:	b08d      	sub	sp, #52	; 0x34
	unsigned char mqtt_buf[6] = {0x81, 0x21, 0x12, 0, 0, 0};
    3266:	889b      	ldrh	r3, [r3, #4]
    3268:	9000      	str	r0, [sp, #0]
    326a:	f8ad 3004 	strh.w	r3, [sp, #4]
	args_stack_frame args_frame = {
    326e:	221c      	movs	r2, #28
	struct mqtt_buf_ctx mbc = {
    3270:	f10d 030a 	add.w	r3, sp, #10
	args_stack_frame args_frame = {
    3274:	2100      	movs	r1, #0
    3276:	a805      	add	r0, sp, #20
	struct mqtt_buf_ctx mbc = {
    3278:	9303      	str	r3, [sp, #12]
    327a:	f8cd d008 	str.w	sp, [sp, #8]
	args_stack_frame args_frame = {
    327e:	f7ff f8b8 	bl	23f2 <memset>
    3282:	ab02      	add	r3, sp, #8
    3284:	9304      	str	r3, [sp, #16]
	ebpf_eva(code6, sizeof(code6), &args_frame, sizeof(args_frame));
    3286:	aa04      	add	r2, sp, #16
    3288:	2320      	movs	r3, #32
    328a:	f240 11b1 	movw	r1, #433	; 0x1b1
    328e:	4804      	ldr	r0, [pc, #16]	; (32a0 <test_ebpf_c6+0x44>)
    3290:	f7ff fef4 	bl	307c <ebpf_eva>
}
    3294:	b00d      	add	sp, #52	; 0x34
    3296:	f85d fb04 	ldr.w	pc, [sp], #4
    329a:	bf00      	nop
    329c:	00019008 	.word	0x00019008
    32a0:	2000d3a1 	.word	0x2000d3a1

000032a4 <test_ebpf_c7>:
void test_ebpf_c7() {
    32a4:	b510      	push	{r4, lr}
    32a6:	b09e      	sub	sp, #120	; 0x78
	struct TCPPacket tcppkt = {
    32a8:	ac0f      	add	r4, sp, #60	; 0x3c
    32aa:	223c      	movs	r2, #60	; 0x3c
    32ac:	2100      	movs	r1, #0
    32ae:	4620      	mov	r0, r4
    32b0:	f7ff f89f 	bl	23f2 <memset>
	struct IPPacket ippkt = {
    32b4:	2218      	movs	r2, #24
    32b6:	2100      	movs	r1, #0
    32b8:	4668      	mov	r0, sp
    32ba:	f7ff f89a 	bl	23f2 <memset>
    32be:	9406      	str	r4, [sp, #24]
	args_stack_frame args_frame = {
    32c0:	2420      	movs	r4, #32
    32c2:	4622      	mov	r2, r4
    32c4:	2100      	movs	r1, #0
    32c6:	a807      	add	r0, sp, #28
    32c8:	f7ff f893 	bl	23f2 <memset>
	ebpf_eva(code7, sizeof(code7), &args_frame, sizeof(args_frame));
    32cc:	4623      	mov	r3, r4
    32ce:	aa07      	add	r2, sp, #28
    32d0:	f240 1159 	movw	r1, #345	; 0x159
    32d4:	4803      	ldr	r0, [pc, #12]	; (32e4 <test_ebpf_c7+0x40>)
	args_stack_frame args_frame = {
    32d6:	f8cd d020 	str.w	sp, [sp, #32]
	ebpf_eva(code7, sizeof(code7), &args_frame, sizeof(args_frame));
    32da:	f7ff fecf 	bl	307c <ebpf_eva>
}
    32de:	b01e      	add	sp, #120	; 0x78
    32e0:	bd10      	pop	{r4, pc}
    32e2:	bf00      	nop
    32e4:	2000d552 	.word	0x2000d552

000032e8 <test_ebpf_c8>:
void test_ebpf_c8() {
    32e8:	b500      	push	{lr}
	args_frame.r1 = 0; // 1 success, 0 failed
    32ea:	220c      	movs	r2, #12
void test_ebpf_c8() {
    32ec:	b089      	sub	sp, #36	; 0x24
	args_frame.r1 = 0; // 1 success, 0 failed
    32ee:	2300      	movs	r3, #0
    32f0:	e9cd 2300 	strd	r2, r3, [sp]
	ebpf_eva(code8_1, sizeof(code8_1), &args_frame, sizeof(args_frame));
    32f4:	2151      	movs	r1, #81	; 0x51
    32f6:	466a      	mov	r2, sp
    32f8:	2320      	movs	r3, #32
    32fa:	4806      	ldr	r0, [pc, #24]	; (3314 <test_ebpf_c8+0x2c>)
    32fc:	f7ff febe 	bl	307c <ebpf_eva>
	ebpf_eva(code8_2, sizeof(code8_2), &args_frame, sizeof(args_frame));
    3300:	2320      	movs	r3, #32
    3302:	466a      	mov	r2, sp
    3304:	2169      	movs	r1, #105	; 0x69
    3306:	4804      	ldr	r0, [pc, #16]	; (3318 <test_ebpf_c8+0x30>)
    3308:	f7ff feb8 	bl	307c <ebpf_eva>
}
    330c:	b009      	add	sp, #36	; 0x24
    330e:	f85d fb04 	ldr.w	pc, [sp], #4
    3312:	bf00      	nop
    3314:	2000d6ab 	.word	0x2000d6ab
    3318:	2000d6fc 	.word	0x2000d6fc

0000331c <test_ebpf_c9>:
void test_ebpf_c9() {
    331c:	b530      	push	{r4, r5, lr}
    331e:	b093      	sub	sp, #76	; 0x4c
	struct ETHPacket ethpkt = {
    3320:	ad08      	add	r5, sp, #32
    3322:	2420      	movs	r4, #32
    3324:	4622      	mov	r2, r4
    3326:	2100      	movs	r1, #0
    3328:	4628      	mov	r0, r5
    332a:	f7ff f862 	bl	23f2 <memset>
    332e:	2300      	movs	r3, #0
    3330:	2264      	movs	r2, #100	; 0x64
    3332:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	args_stack_frame args_frame = {
    3336:	2100      	movs	r1, #0
    3338:	221c      	movs	r2, #28
    333a:	a801      	add	r0, sp, #4
    333c:	f7ff f859 	bl	23f2 <memset>
	ebpf_eva(code9, sizeof(code9), &args_frame, sizeof(args_frame));
    3340:	4623      	mov	r3, r4
    3342:	466a      	mov	r2, sp
    3344:	2149      	movs	r1, #73	; 0x49
    3346:	4803      	ldr	r0, [pc, #12]	; (3354 <test_ebpf_c9+0x38>)
	args_stack_frame args_frame = {
    3348:	9500      	str	r5, [sp, #0]
	ebpf_eva(code9, sizeof(code9), &args_frame, sizeof(args_frame));
    334a:	f7ff fe97 	bl	307c <ebpf_eva>
}
    334e:	b013      	add	sp, #76	; 0x4c
    3350:	bd30      	pop	{r4, r5, pc}
    3352:	bf00      	nop
    3354:	2000d765 	.word	0x2000d765

00003358 <test_ebpf_c10>:
void test_ebpf_c10() {
    3358:	b500      	push	{lr}
    335a:	b089      	sub	sp, #36	; 0x24
	args_frame.pc = 2020;
    335c:	f240 73e4 	movw	r3, #2020	; 0x7e4
    3360:	9306      	str	r3, [sp, #24]
	ebpf_eva(code10, sizeof(code10), &args_frame, sizeof(args_frame));
    3362:	466a      	mov	r2, sp
    3364:	2320      	movs	r3, #32
    3366:	2141      	movs	r1, #65	; 0x41
    3368:	4802      	ldr	r0, [pc, #8]	; (3374 <test_ebpf_c10+0x1c>)
    336a:	f7ff fe87 	bl	307c <ebpf_eva>
}
    336e:	b009      	add	sp, #36	; 0x24
    3370:	f85d fb04 	ldr.w	pc, [sp], #4
    3374:	2000cf32 	.word	0x2000cf32

00003378 <test_ebpf_c11>:
void test_ebpf_c11() {
    3378:	b510      	push	{r4, lr}
    337a:	b092      	sub	sp, #72	; 0x48
	struct PicoFrame pf = {
    337c:	ac08      	add	r4, sp, #32
    337e:	2226      	movs	r2, #38	; 0x26
    3380:	2100      	movs	r1, #0
    3382:	4620      	mov	r0, r4
    3384:	f7ff f835 	bl	23f2 <memset>
    3388:	2307      	movs	r3, #7
	args_stack_frame args_frame = {
    338a:	221c      	movs	r2, #28
    338c:	2100      	movs	r1, #0
    338e:	a801      	add	r0, sp, #4
	struct PicoFrame pf = {
    3390:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
	args_stack_frame args_frame = {
    3394:	f7ff f82d 	bl	23f2 <memset>
	ebpf_eva(code11, sizeof(code11), &args_frame, sizeof(args_frame));
    3398:	2320      	movs	r3, #32
    339a:	466a      	mov	r2, sp
    339c:	2141      	movs	r1, #65	; 0x41
    339e:	4803      	ldr	r0, [pc, #12]	; (33ac <test_ebpf_c11+0x34>)
	args_stack_frame args_frame = {
    33a0:	9400      	str	r4, [sp, #0]
	ebpf_eva(code11, sizeof(code11), &args_frame, sizeof(args_frame));
    33a2:	f7ff fe6b 	bl	307c <ebpf_eva>
}
    33a6:	b012      	add	sp, #72	; 0x48
    33a8:	bd10      	pop	{r4, pc}
    33aa:	bf00      	nop
    33ac:	2000cf73 	.word	0x2000cf73

000033b0 <test_ebpf_c12>:
void test_ebpf_c12() {
    33b0:	b500      	push	{lr}
    33b2:	b097      	sub	sp, #92	; 0x5c
	uint8_t destopt[50] = {1, -2, -2, -2, -2, -2};
    33b4:	222c      	movs	r2, #44	; 0x2c
    33b6:	2100      	movs	r1, #0
    33b8:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
    33bc:	f7ff f819 	bl	23f2 <memset>
    33c0:	4b0b      	ldr	r3, [pc, #44]	; (33f0 <test_ebpf_c12+0x40>)
    33c2:	9309      	str	r3, [sp, #36]	; 0x24
	args_stack_frame args_frame = {
    33c4:	221c      	movs	r2, #28
	uint8_t destopt[50] = {1, -2, -2, -2, -2, -2};
    33c6:	f64f 63fe 	movw	r3, #65278	; 0xfefe
	args_stack_frame args_frame = {
    33ca:	2100      	movs	r1, #0
    33cc:	a802      	add	r0, sp, #8
	uint8_t destopt[50] = {1, -2, -2, -2, -2, -2};
    33ce:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	args_stack_frame args_frame = {
    33d2:	f7ff f80e 	bl	23f2 <memset>
    33d6:	ab09      	add	r3, sp, #36	; 0x24
    33d8:	9301      	str	r3, [sp, #4]
	ebpf_eva(code12, sizeof(code12), &args_frame, sizeof(args_frame));
    33da:	aa01      	add	r2, sp, #4
    33dc:	2320      	movs	r3, #32
    33de:	f240 1119 	movw	r1, #281	; 0x119
    33e2:	4804      	ldr	r0, [pc, #16]	; (33f4 <test_ebpf_c12+0x44>)
    33e4:	f7ff fe4a 	bl	307c <ebpf_eva>
}
    33e8:	b017      	add	sp, #92	; 0x5c
    33ea:	f85d fb04 	ldr.w	pc, [sp], #4
    33ee:	bf00      	nop
    33f0:	fefefe01 	.word	0xfefefe01
    33f4:	2000cfb4 	.word	0x2000cfb4

000033f8 <run_ebpf_eva>:
Load prog to VM directly
*/
void run_ebpf_eva(int eid) {
#ifdef EBPF_EVA
	int n = sizeof(test_funcs) / sizeof(ebpf_test_func);
	if (eid < 0 || eid >= n) {
    33f8:	280c      	cmp	r0, #12
void run_ebpf_eva(int eid) {
    33fa:	4601      	mov	r1, r0
	if (eid < 0 || eid >= n) {
    33fc:	d903      	bls.n	3406 <run_ebpf_eva+0xe>
		DEBUG_LOG("Invalide idx: %d (should be 0~%d)\n", eid, n);
    33fe:	220d      	movs	r2, #13
    3400:	4803      	ldr	r0, [pc, #12]	; (3410 <run_ebpf_eva+0x18>)
    3402:	f00e b864 	b.w	114ce <debug_log>
		return;
	}
	ebpf_test_func func = test_funcs[eid];
    3406:	4b03      	ldr	r3, [pc, #12]	; (3414 <run_ebpf_eva+0x1c>)
	func();
    3408:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    340c:	4718      	bx	r3
    340e:	bf00      	nop
    3410:	00019da9 	.word	0x00019da9
    3414:	2000c65c 	.word	0x2000c65c

00003418 <patch_num_eva>:
// 
struct patch_list {
	arraymap *patches;
};

void patch_num_eva(struct patch_list *plist, int n, int times) {
    3418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (plist->patches == NULL) {
    341c:	6803      	ldr	r3, [r0, #0]
void patch_num_eva(struct patch_list *plist, int n, int times) {
    341e:	4606      	mov	r6, r0
    3420:	460d      	mov	r5, r1
    3422:	4691      	mov	r9, r2
	if (plist->patches == NULL) {
    3424:	b91b      	cbnz	r3, 342e <patch_num_eva+0x16>
		plist->patches = arraymap_new(72);
    3426:	2048      	movs	r0, #72	; 0x48
    3428:	f00f f9b8 	bl	1279c <arraymap_new>
    342c:	6030      	str	r0, [r6, #0]
void patch_num_eva(struct patch_list *plist, int n, int times) {
    342e:	2700      	movs	r7, #0
	}
	for (int i = 0; i < n; i++) {
    3430:	42af      	cmp	r7, r5
    3432:	db1b      	blt.n	346c <patch_num_eva+0x54>
		arraymap_set(plist->patches, i, 1);
	}
	int start = get_cur_tick();
    3434:	f000 fa9c 	bl	3970 <get_cur_tick>
	for (int t = 0; t < times; t++) {
    3438:	f04f 0800 	mov.w	r8, #0
	int start = get_cur_tick();
    343c:	4604      	mov	r4, r0
	for (int t = 0; t < times; t++) {
    343e:	45c8      	cmp	r8, r9
    3440:	db25      	blt.n	348e <patch_num_eva+0x76>
		for (int i = 0; i < n; i++) {
			int val = arraymap_get(plist->patches, i);
			(void) val;
		}
	}
	int cycles = get_cur_tick() - start;
    3442:	f000 fa95 	bl	3970 <get_cur_tick>
    3446:	1b00      	subs	r0, r0, r4
	DEBUG_LOG("num: %d ti: %d\n", n, (int) (cycles2us(cycles / times / n) * 100));
    3448:	fb90 f0f9 	sdiv	r0, r0, r9
    344c:	fb90 f0f5 	sdiv	r0, r0, r5
    3450:	f000 fade 	bl	3a10 <cycles2us>
    3454:	490f      	ldr	r1, [pc, #60]	; (3494 <patch_num_eva+0x7c>)
    3456:	f7fd f8b1 	bl	5bc <__aeabi_fmul>
    345a:	f7fd f9ff 	bl	85c <__aeabi_f2iz>
    345e:	4629      	mov	r1, r5
    3460:	4602      	mov	r2, r0
}
    3462:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DEBUG_LOG("num: %d ti: %d\n", n, (int) (cycles2us(cycles / times / n) * 100));
    3466:	480c      	ldr	r0, [pc, #48]	; (3498 <patch_num_eva+0x80>)
    3468:	f00e b831 	b.w	114ce <debug_log>
		arraymap_set(plist->patches, i, 1);
    346c:	4639      	mov	r1, r7
    346e:	2201      	movs	r2, #1
    3470:	6830      	ldr	r0, [r6, #0]
    3472:	f00f f9b4 	bl	127de <arraymap_set>
	for (int i = 0; i < n; i++) {
    3476:	3701      	adds	r7, #1
    3478:	e7da      	b.n	3430 <patch_num_eva+0x18>
			int val = arraymap_get(plist->patches, i);
    347a:	4639      	mov	r1, r7
    347c:	6830      	ldr	r0, [r6, #0]
    347e:	f00f fa0b 	bl	12898 <arraymap_get>
		for (int i = 0; i < n; i++) {
    3482:	3701      	adds	r7, #1
    3484:	42af      	cmp	r7, r5
    3486:	dbf8      	blt.n	347a <patch_num_eva+0x62>
	for (int t = 0; t < times; t++) {
    3488:	f108 0801 	add.w	r8, r8, #1
    348c:	e7d7      	b.n	343e <patch_num_eva+0x26>
		for (int i = 0; i < n; i++) {
    348e:	2700      	movs	r7, #0
    3490:	e7f8      	b.n	3484 <patch_num_eva+0x6c>
    3492:	bf00      	nop
    3494:	42c80000 	.word	0x42c80000
    3498:	00019d99 	.word	0x00019d99

0000349c <test_patch_dispatcher>:
num: 4 ti: 1.531250
num: 8 ti: 3.671875
num: 16 ti: 2.859375
num: 32 ti: 2.578125
*/
void test_patch_dispatcher() {
    349c:	b513      	push	{r0, r1, r4, lr}
	// setup patch list
	profile_add_event("EV0");
    349e:	4810      	ldr	r0, [pc, #64]	; (34e0 <test_patch_dispatcher+0x44>)
    34a0:	f000 fa6c 	bl	397c <profile_add_event>
	profile_start(EV0);
    34a4:	2000      	movs	r0, #0
    34a6:	f000 fa99 	bl	39dc <profile_start>
	profile_end(EV0);
    34aa:	2000      	movs	r0, #0
    34ac:	f000 faa0 	bl	39f0 <profile_end>
	profile_dump(EV0);
    34b0:	2000      	movs	r0, #0
    34b2:	f000 fabd 	bl	3a30 <profile_dump>
	struct patch_list plist;
	plist.patches = NULL;
    34b6:	2300      	movs	r3, #0
    34b8:	9301      	str	r3, [sp, #4]
	int TI = 100;
	for (int i = 1; i < 65; i += 4) {
    34ba:	2401      	movs	r4, #1
		patch_num_eva(&plist, i, TI);
    34bc:	4621      	mov	r1, r4
    34be:	2264      	movs	r2, #100	; 0x64
    34c0:	a801      	add	r0, sp, #4
	for (int i = 1; i < 65; i += 4) {
    34c2:	3404      	adds	r4, #4
		patch_num_eva(&plist, i, TI);
    34c4:	f7ff ffa8 	bl	3418 <patch_num_eva>
	for (int i = 1; i < 65; i += 4) {
    34c8:	2c41      	cmp	r4, #65	; 0x41
    34ca:	d1f7      	bne.n	34bc <test_patch_dispatcher+0x20>
	}
	patch_num_eva(&plist, 64, TI);
    34cc:	2264      	movs	r2, #100	; 0x64
    34ce:	2140      	movs	r1, #64	; 0x40
    34d0:	a801      	add	r0, sp, #4
    34d2:	f7ff ffa1 	bl	3418 <patch_num_eva>
	arraymap_destroy(plist.patches);
    34d6:	9801      	ldr	r0, [sp, #4]
    34d8:	f00f f974 	bl	127c4 <arraymap_destroy>
}
    34dc:	b002      	add	sp, #8
    34de:	bd10      	pop	{r4, pc}
    34e0:	00019de9 	.word	0x00019de9

000034e4 <run_ebpf_test>:
	int t;
	//__atomic_test_and_set(&t, __ATOMIC_ACQUIRE);
	//__atomic_clear(&t, __ATOMIC_RELEASE);
}

void run_ebpf_test() {
    34e4:	b508      	push	{r3, lr}
	DEBUG_LOG("run_ebpf_test >>>>>> \n");
    34e6:	4803      	ldr	r0, [pc, #12]	; (34f4 <run_ebpf_test+0x10>)
    34e8:	f00d fff1 	bl	114ce <debug_log>
	// profile_start(eid);
	// DEBUG_LOG("this is a single printf:%d\n", eid);
	// profile_end(eid);
	// profile_dump(eid);
	// profile_exit();
}
    34ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	test_patch_dispatcher();
    34f0:	f7ff bfd4 	b.w	349c <test_patch_dispatcher>
    34f4:	00019dcc 	.word	0x00019dcc

000034f8 <show_fixed_patch_desc>:
#else
static struct local_patch patch_list[] = {};
void setup_cve_list() {}
#endif

void show_fixed_patch_desc() {
    34f8:	b510      	push	{r4, lr}
	int n = sizeof(patch_list) / sizeof(struct local_patch);
	for (int i = 0; i < n; i++) {
		DEBUG_LOG("%d -> %s\n", i, patch_list[i].cve);
    34fa:	4c09      	ldr	r4, [pc, #36]	; (3520 <show_fixed_patch_desc+0x28>)
    34fc:	4a09      	ldr	r2, [pc, #36]	; (3524 <show_fixed_patch_desc+0x2c>)
    34fe:	4620      	mov	r0, r4
    3500:	2100      	movs	r1, #0
    3502:	f00d ffe4 	bl	114ce <debug_log>
    3506:	4620      	mov	r0, r4
    3508:	4a07      	ldr	r2, [pc, #28]	; (3528 <show_fixed_patch_desc+0x30>)
    350a:	2101      	movs	r1, #1
    350c:	f00d ffdf 	bl	114ce <debug_log>
    3510:	4620      	mov	r0, r4
    3512:	4a06      	ldr	r2, [pc, #24]	; (352c <show_fixed_patch_desc+0x34>)
    3514:	2102      	movs	r1, #2
	}
	setup_cve_list();
}
    3516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		DEBUG_LOG("%d -> %s\n", i, patch_list[i].cve);
    351a:	f00d bfd8 	b.w	114ce <debug_log>
    351e:	bf00      	nop
    3520:	00019c6e 	.word	0x00019c6e
    3524:	00019e42 	.word	0x00019e42
    3528:	00019c84 	.word	0x00019c84
    352c:	00019e55 	.word	0x00019e55

00003530 <load_local_fixed_patch>:

void load_local_fixed_patch(int pid) {
	int n = sizeof(patch_list) / sizeof(struct local_patch);
	if (pid > n) {
    3530:	2803      	cmp	r0, #3
void load_local_fixed_patch(int pid) {
    3532:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3536:	4604      	mov	r4, r0
	if (pid > n) {
    3538:	dd07      	ble.n	354a <load_local_fixed_patch+0x1a>
		show_fixed_patch_desc();
    353a:	f7ff ffdd 	bl	34f8 <show_fixed_patch_desc>
		DEBUG_LOG("patch id should less than %d\n", n);
    353e:	4821      	ldr	r0, [pc, #132]	; (35c4 <load_local_fixed_patch+0x94>)
    3540:	2103      	movs	r1, #3
		gen_jit_code(vm);
	}
	_patch->vm = vm;
	load_local_patch_to_ctx(_patch);
	DEBUG_LOG("load fixed patch %s success!\n", pt->cve);
    3542:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DEBUG_LOG("load fixed patch %s success!\n", pt->cve);
    3546:	f00d bfc2 	b.w	114ce <debug_log>
	if (!is_init) {
    354a:	4e1f      	ldr	r6, [pc, #124]	; (35c8 <load_local_fixed_patch+0x98>)
    354c:	4d1f      	ldr	r5, [pc, #124]	; (35cc <load_local_fixed_patch+0x9c>)
    354e:	7833      	ldrb	r3, [r6, #0]
    3550:	4f1f      	ldr	r7, [pc, #124]	; (35d0 <load_local_fixed_patch+0xa0>)
    3552:	b96b      	cbnz	r3, 3570 <load_local_fixed_patch+0x40>
		_desc = ebpf_calloc(1, sizeof(patch_desc));
    3554:	2108      	movs	r1, #8
    3556:	2001      	movs	r0, #1
    3558:	f000 fabe 	bl	3ad8 <ebpf_calloc>
		_patch = ebpf_calloc(1, sizeof(ebpf_patch));
    355c:	210c      	movs	r1, #12
		_desc = ebpf_calloc(1, sizeof(patch_desc));
    355e:	6028      	str	r0, [r5, #0]
		_patch = ebpf_calloc(1, sizeof(ebpf_patch));
    3560:	2001      	movs	r0, #1
    3562:	f000 fab9 	bl	3ad8 <ebpf_calloc>
		is_init = true;
    3566:	2301      	movs	r3, #1
		_patch = ebpf_calloc(1, sizeof(ebpf_patch));
    3568:	6038      	str	r0, [r7, #0]
		is_init = true;
    356a:	7033      	strb	r3, [r6, #0]
		init_patch_sys();
    356c:	f000 f94c 	bl	3808 <init_patch_sys>
	DEBUG_LOG("start to load patch: %d\n", pid);
    3570:	4621      	mov	r1, r4
    3572:	4818      	ldr	r0, [pc, #96]	; (35d4 <load_local_fixed_patch+0xa4>)
    3574:	f00d ffab 	bl	114ce <debug_log>
	_desc->type = FixedPatchPoint;
    3578:	682b      	ldr	r3, [r5, #0]
	_desc->fixed_id = pt->loc;
    357a:	4d17      	ldr	r5, [pc, #92]	; (35d8 <load_local_fixed_patch+0xa8>)
	_desc->type = FixedPatchPoint;
    357c:	2200      	movs	r2, #0
	_desc->fixed_id = pt->loc;
    357e:	0126      	lsls	r6, r4, #4
	_desc->type = FixedPatchPoint;
    3580:	705a      	strb	r2, [r3, #1]
	_desc->code_len = 0; // code do not save in desc now
    3582:	709a      	strb	r2, [r3, #2]
    3584:	70da      	strb	r2, [r3, #3]
	_desc->fixed_id = pt->loc;
    3586:	19aa      	adds	r2, r5, r6
	_desc->type = FixedPatchPoint;
    3588:	2101      	movs	r1, #1
    358a:	7019      	strb	r1, [r3, #0]
	_desc->fixed_id = pt->loc;
    358c:	6851      	ldr	r1, [r2, #4]
    358e:	6059      	str	r1, [r3, #4]
	_patch->desc = _desc;
    3590:	6839      	ldr	r1, [r7, #0]
	ebpf_vm *vm = _patch->vm;
    3592:	684c      	ldr	r4, [r1, #4]
	_patch->desc = _desc;
    3594:	600b      	str	r3, [r1, #0]
	if (vm == NULL) {
    3596:	e9d2 8902 	ldrd	r8, r9, [r2, #8]
    359a:	b924      	cbnz	r4, 35a6 <load_local_fixed_patch+0x76>
		vm = init_ebpf_vm(pt->code, pt->code_len);
    359c:	4649      	mov	r1, r9
    359e:	4640      	mov	r0, r8
    35a0:	f00d fff8 	bl	11594 <init_ebpf_vm>
    35a4:	4604      	mov	r4, r0
	ebpf_vm_set_inst(vm, pt->code, pt->code_len);
    35a6:	4641      	mov	r1, r8
    35a8:	464a      	mov	r2, r9
    35aa:	4620      	mov	r0, r4
    35ac:	f00e f802 	bl	115b4 <ebpf_vm_set_inst>
	_patch->vm = vm;
    35b0:	6838      	ldr	r0, [r7, #0]
	vm->use_jit = false;
    35b2:	2300      	movs	r3, #0
    35b4:	7523      	strb	r3, [r4, #20]
	_patch->vm = vm;
    35b6:	6044      	str	r4, [r0, #4]
	load_local_patch_to_ctx(_patch);
    35b8:	f000 f98e 	bl	38d8 <load_local_patch_to_ctx>
	DEBUG_LOG("load fixed patch %s success!\n", pt->cve);
    35bc:	59a9      	ldr	r1, [r5, r6]
    35be:	4807      	ldr	r0, [pc, #28]	; (35dc <load_local_fixed_patch+0xac>)
    35c0:	e7bf      	b.n	3542 <load_local_fixed_patch+0x12>
    35c2:	bf00      	nop
    35c4:	00019ded 	.word	0x00019ded
    35c8:	200059c9 	.word	0x200059c9
    35cc:	200024c8 	.word	0x200024c8
    35d0:	200024cc 	.word	0x200024cc
    35d4:	00019e0b 	.word	0x00019e0b
    35d8:	00019198 	.word	0x00019198
    35dc:	00019e24 	.word	0x00019e24

000035e0 <dummy_buggy_MQTT_packet_length_decode>:
	DEBUG_LOG("p1=%d p1-c=%c %d p2=%d p2-c=%c %d\n", p1->v1, p1->v2, p1->v3, p2->v1, p2->v2, p2->v3);
#endif
}

static int dummy_buggy_MQTT_packet_length_decode(struct dummy_MQTT_buf_ctx *buf, uint32_t *length)
{
    35e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35e2:	4604      	mov	r4, r0
    35e4:	460e      	mov	r6, r1
	PATCH_FUNCTION_ERR_CODE;
    35e6:	f00d ff53 	bl	11490 <fixed_patch_point_hanlder>
    35ea:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    35ee:	d11e      	bne.n	362e <dummy_buggy_MQTT_packet_length_decode+0x4e>
	uint8_t shift = 0U;
	uint8_t bytes = 0U;

	int ERR = -1;

	*length = 0U;
    35f0:	2200      	movs	r2, #0
	do {
		if (bytes > 4) {
			return ERR;
		}

		if (buf->cur >= buf->end) {
    35f2:	6867      	ldr	r7, [r4, #4]
	*length = 0U;
    35f4:	6032      	str	r2, [r6, #0]
		if (buf->cur >= buf->end) {
    35f6:	6820      	ldr	r0, [r4, #0]
    35f8:	42b8      	cmp	r0, r7
    35fa:	d216      	bcs.n	362a <dummy_buggy_MQTT_packet_length_decode+0x4a>
			return ERR;
		}

		*length += ((uint32_t)*(buf->cur) & 0x7f)
    35fc:	4605      	mov	r5, r0
    35fe:	6831      	ldr	r1, [r6, #0]
    3600:	f815 3b01 	ldrb.w	r3, [r5], #1
    3604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
								<< shift;
    3608:	4093      	lsls	r3, r2
		*length += ((uint32_t)*(buf->cur) & 0x7f)
    360a:	440b      	add	r3, r1
    360c:	6033      	str	r3, [r6, #0]
		shift += 7;
		bytes++;
	} while ((*(buf->cur++) & 0x80) != 0U);
    360e:	6025      	str	r5, [r4, #0]
    3610:	f990 1000 	ldrsb.w	r1, [r0]
    3614:	2900      	cmp	r1, #0
    3616:	db05      	blt.n	3624 <dummy_buggy_MQTT_packet_length_decode+0x44>

	DEBUG_LOG("dummy MQTT packet length:0x%08x \n", *length);
    3618:	4805      	ldr	r0, [pc, #20]	; (3630 <dummy_buggy_MQTT_packet_length_decode+0x50>)
    361a:	4619      	mov	r1, r3
    361c:	f00d ff57 	bl	114ce <debug_log>

	return 0;
    3620:	2000      	movs	r0, #0
    3622:	e004      	b.n	362e <dummy_buggy_MQTT_packet_length_decode+0x4e>
		if (bytes > 4) {
    3624:	3207      	adds	r2, #7
    3626:	2a23      	cmp	r2, #35	; 0x23
    3628:	d1e5      	bne.n	35f6 <dummy_buggy_MQTT_packet_length_decode+0x16>
			return ERR;
    362a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    362e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3630:	00019f4d 	.word	0x00019f4d

00003634 <call_dummy_buggy_MQTT_function>:

static void call_dummy_buggy_MQTT_function() {
    3634:	b530      	push	{r4, r5, lr}
	// setup test arguments
	DEBUG_LOG("addr ground-truth bug:0x%08x test:0x%08x \n", dummy_buggy_MQTT_packet_length_decode, call_dummy_buggy_MQTT_function);
    3636:	4917      	ldr	r1, [pc, #92]	; (3694 <call_dummy_buggy_MQTT_function+0x60>)
    3638:	4a17      	ldr	r2, [pc, #92]	; (3698 <call_dummy_buggy_MQTT_function+0x64>)
    363a:	4818      	ldr	r0, [pc, #96]	; (369c <call_dummy_buggy_MQTT_function+0x68>)
static void call_dummy_buggy_MQTT_function() {
    363c:	b087      	sub	sp, #28
	DEBUG_LOG("addr ground-truth bug:0x%08x test:0x%08x \n", dummy_buggy_MQTT_packet_length_decode, call_dummy_buggy_MQTT_function);
    363e:	f00d ff46 	bl	114ce <debug_log>
	
	uint8_t packet_buf[10];
	
	for (int i=0; i<4; ++i) packet_buf[i] = 0xff;
	packet_buf[4] = 0x7f;
    3642:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3646:	237f      	movs	r3, #127	; 0x7f
    3648:	e9cd 2303 	strd	r2, r3, [sp, #12]
	for (int i=5; i<10; ++i) packet_buf[i] = 0;
    364c:	2400      	movs	r4, #0

	struct dummy_MQTT_buf_ctx dbc;
	dbc.cur = &packet_buf[0];
    364e:	ab03      	add	r3, sp, #12
    3650:	9301      	str	r3, [sp, #4]
	dbc.end = &packet_buf[9];	

	uint32_t pkt_length = 0;
	
	profile_start(0);
    3652:	4620      	mov	r0, r4
	dbc.end = &packet_buf[9];	
    3654:	f10d 0315 	add.w	r3, sp, #21
    3658:	9302      	str	r3, [sp, #8]
	for (int i=5; i<10; ++i) packet_buf[i] = 0;
    365a:	f8ad 4014 	strh.w	r4, [sp, #20]
	uint32_t pkt_length = 0;
    365e:	9400      	str	r4, [sp, #0]
	profile_start(0);
    3660:	f000 f9bc 	bl	39dc <profile_start>
	int ret = dummy_buggy_MQTT_packet_length_decode(&dbc, &pkt_length);
    3664:	4669      	mov	r1, sp
    3666:	a801      	add	r0, sp, #4
    3668:	f7ff ffba 	bl	35e0 <dummy_buggy_MQTT_packet_length_decode>
    366c:	4605      	mov	r5, r0
	profile_end(0);
    366e:	4620      	mov	r0, r4
    3670:	f000 f9be 	bl	39f0 <profile_end>

	DEBUG_LOG("Decoded MQTT packet length is %d\n", pkt_length);
    3674:	9900      	ldr	r1, [sp, #0]
    3676:	480a      	ldr	r0, [pc, #40]	; (36a0 <call_dummy_buggy_MQTT_function+0x6c>)
    3678:	f00d ff29 	bl	114ce <debug_log>

	DEBUG_LOG("Bug function return %d ", ret);
    367c:	4629      	mov	r1, r5
    367e:	4809      	ldr	r0, [pc, #36]	; (36a4 <call_dummy_buggy_MQTT_function+0x70>)
    3680:	f00d ff25 	bl	114ce <debug_log>
	if (ret != 0) {
    3684:	b125      	cbz	r5, 3690 <call_dummy_buggy_MQTT_function+0x5c>
		DEBUG_LOG("is still vulnerable!\n\n");
    3686:	4808      	ldr	r0, [pc, #32]	; (36a8 <call_dummy_buggy_MQTT_function+0x74>)
	} else {
		DEBUG_LOG("is fixed!\n");
    3688:	f00d ff21 	bl	114ce <debug_log>
	}
}
    368c:	b007      	add	sp, #28
    368e:	bd30      	pop	{r4, r5, pc}
		DEBUG_LOG("is fixed!\n");
    3690:	4806      	ldr	r0, [pc, #24]	; (36ac <call_dummy_buggy_MQTT_function+0x78>)
    3692:	e7f9      	b.n	3688 <call_dummy_buggy_MQTT_function+0x54>
    3694:	000035e1 	.word	0x000035e1
    3698:	00003635 	.word	0x00003635
    369c:	00019e91 	.word	0x00019e91
    36a0:	00019ebc 	.word	0x00019ebc
    36a4:	00019ede 	.word	0x00019ede
    36a8:	00019ef6 	.word	0x00019ef6
    36ac:	00019f0d 	.word	0x00019f0d

000036b0 <test_fixed_patch_point>:
void test_fixed_patch_point() {
    36b0:	b508      	push	{r3, lr}
	profile_add_event("fixed patch");
    36b2:	4805      	ldr	r0, [pc, #20]	; (36c8 <test_fixed_patch_point+0x18>)
    36b4:	f000 f962 	bl	397c <profile_add_event>
	call_dummy_buggy_MQTT_function();
    36b8:	f7ff ffbc 	bl	3634 <call_dummy_buggy_MQTT_function>
	profile_dump(0);
    36bc:	2000      	movs	r0, #0
}
    36be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	profile_dump(0);
    36c2:	f000 b9b5 	b.w	3a30 <profile_dump>
    36c6:	bf00      	nop
    36c8:	00019f6f 	.word	0x00019f6f

000036cc <dispatch_fixed_patch_point>:
void dispatch_fixed_patch_point(uint32_t sp) {
    36cc:	b570      	push	{r4, r5, r6, lr}
	uint32_t addr = (lr - 4) & (~0x3);
    36ce:	6845      	ldr	r5, [r0, #4]
    36d0:	3d04      	subs	r5, #4
    36d2:	f025 0503 	bic.w	r5, r5, #3
void dispatch_fixed_patch_point(uint32_t sp) {
    36d6:	4604      	mov	r4, r0
	ebpf_patch *patch = get_fixed_patch_by_lr(addr);
    36d8:	4628      	mov	r0, r5
    36da:	f000 f8d1 	bl	3880 <get_fixed_patch_by_lr>
	DEBUG_LOG("try to get patch at: 0x%08x\n", addr);
    36de:	4629      	mov	r1, r5
	ebpf_patch *patch = get_fixed_patch_by_lr(addr);
    36e0:	4606      	mov	r6, r0
	DEBUG_LOG("try to get patch at: 0x%08x\n", addr);
    36e2:	480f      	ldr	r0, [pc, #60]	; (3720 <dispatch_fixed_patch_point+0x54>)
    36e4:	f00d fef3 	bl	114ce <debug_log>
	if (patch == NULL) {
    36e8:	b93e      	cbnz	r6, 36fa <dispatch_fixed_patch_point+0x2e>
		*(volatile uint32_t *) &(args->r0_1) = FIXED_OP_PASS;
    36ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    36ee:	6023      	str	r3, [r4, #0]
		DEBUG_LOG("Do not find Patch here\n");
    36f0:	480c      	ldr	r0, [pc, #48]	; (3724 <dispatch_fixed_patch_point+0x58>)
}
    36f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		DEBUG_LOG("Do not find Patch here\n");
    36f6:	f00d beea 	b.w	114ce <debug_log>
	ret = run_ebpf_filter(patch, args, sizeof(fixed_stack_frame));
    36fa:	2208      	movs	r2, #8
    36fc:	4621      	mov	r1, r4
    36fe:	4630      	mov	r0, r6
    3700:	f00d fed3 	bl	114aa <run_ebpf_filter>
	if (op == FILTER_DROP) {
    3704:	2901      	cmp	r1, #1
    3706:	d102      	bne.n	370e <dispatch_fixed_patch_point+0x42>
		*(volatile uint32_t *) &(args->r0_1) = 0; 
    3708:	2300      	movs	r3, #0
		*(volatile uint32_t *) &(args->r0_1) = FIXED_OP_PASS;
    370a:	6023      	str	r3, [r4, #0]
		return;
    370c:	e003      	b.n	3716 <dispatch_fixed_patch_point+0x4a>
	} else if (op == FILTER_REDIRECT) {
    370e:	2902      	cmp	r1, #2
    3710:	d102      	bne.n	3718 <dispatch_fixed_patch_point+0x4c>
		*(volatile uint32_t *) (args->lr) = ret_code;
    3712:	6863      	ldr	r3, [r4, #4]
    3714:	6018      	str	r0, [r3, #0]
}
    3716:	bd70      	pop	{r4, r5, r6, pc}
		*(volatile uint32_t *) &(args->r0_1) = FIXED_OP_PASS;
    3718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    371c:	e7f5      	b.n	370a <dispatch_fixed_patch_point+0x3e>
    371e:	bf00      	nop
    3720:	00019f18 	.word	0x00019f18
    3724:	00019f35 	.word	0x00019f35

00003728 <update_bits_filter>:

// global patch context
static bool ctx_init = false;
patch_context pctx;

static void update_bits_filter() {
    3728:	b538      	push	{r3, r4, r5, lr}
	pctx.fbits_filter = 0;
    372a:	4c13      	ldr	r4, [pc, #76]	; (3778 <update_bits_filter+0x50>)
    372c:	2500      	movs	r5, #0
    372e:	6065      	str	r5, [r4, #4]

	for (int i = 0; i < pctx.fpatch_list.fiexed_patches->cur_size; i++) {
    3730:	68a0      	ldr	r0, [r4, #8]
    3732:	8843      	ldrh	r3, [r0, #2]
    3734:	42ab      	cmp	r3, r5
    3736:	dc0a      	bgt.n	374e <update_bits_filter+0x26>
		if (patch != NULL && patch->is_active) {
			pctx.fbits_filter |= patch->desc->fixed_id;
		}
	}

	pctx.dbits_filter_pc = pctx.dbits_filter_bpkt = 0;
    3738:	2300      	movs	r3, #0
    373a:	e9c4 3303 	strd	r3, r3, [r4, #12]
	dynamic_patch *dp = pctx.dpatch_list.next;
    373e:	69a2      	ldr	r2, [r4, #24]
	while (dp != NULL) {
    3740:	4618      	mov	r0, r3
    3742:	4619      	mov	r1, r3
    3744:	b982      	cbnz	r2, 3768 <update_bits_filter+0x40>
    3746:	b108      	cbz	r0, 374c <update_bits_filter+0x24>
    3748:	e9c4 3103 	strd	r3, r1, [r4, #12]
		pctx.dbits_filter_pc |= dp->pc_addr;
		pctx.dbits_filter_bpkt |= dp->inst_addr;
		dp = dp->next;
	}
}
    374c:	bd38      	pop	{r3, r4, r5, pc}
		const ebpf_patch *patch = arraymap_iter_val(pctx.fpatch_list.fiexed_patches, i);
    374e:	4629      	mov	r1, r5
    3750:	f00f f8b0 	bl	128b4 <arraymap_iter_val>
		if (patch != NULL && patch->is_active) {
    3754:	b130      	cbz	r0, 3764 <update_bits_filter+0x3c>
    3756:	7a03      	ldrb	r3, [r0, #8]
    3758:	b123      	cbz	r3, 3764 <update_bits_filter+0x3c>
			pctx.fbits_filter |= patch->desc->fixed_id;
    375a:	6803      	ldr	r3, [r0, #0]
    375c:	6862      	ldr	r2, [r4, #4]
    375e:	685b      	ldr	r3, [r3, #4]
    3760:	4313      	orrs	r3, r2
    3762:	6063      	str	r3, [r4, #4]
	for (int i = 0; i < pctx.fpatch_list.fiexed_patches->cur_size; i++) {
    3764:	3501      	adds	r5, #1
    3766:	e7e3      	b.n	3730 <update_bits_filter+0x8>
		pctx.dbits_filter_pc |= dp->pc_addr;
    3768:	68d0      	ldr	r0, [r2, #12]
    376a:	4301      	orrs	r1, r0
		pctx.dbits_filter_bpkt |= dp->inst_addr;
    376c:	6890      	ldr	r0, [r2, #8]
		dp = dp->next;
    376e:	6852      	ldr	r2, [r2, #4]
		pctx.dbits_filter_bpkt |= dp->inst_addr;
    3770:	4303      	orrs	r3, r0
		dp = dp->next;
    3772:	2001      	movs	r0, #1
    3774:	e7e6      	b.n	3744 <update_bits_filter+0x1c>
    3776:	bf00      	nop
    3778:	200024d0 	.word	0x200024d0

0000377c <add_dynamic_patch_to_ctx>:
	}
	
	patch->is_active = true;
}

static dynamic_patch* add_dynamic_patch_to_ctx(ebpf_patch *patch) {
    377c:	b570      	push	{r4, r5, r6, lr}
	dynamic_patch *dp = pctx.dpatch_list.next;
    377e:	4d14      	ldr	r5, [pc, #80]	; (37d0 <add_dynamic_patch_to_ctx+0x54>)
static dynamic_patch* add_dynamic_patch_to_ctx(ebpf_patch *patch) {
    3780:	4606      	mov	r6, r0
	dynamic_patch *dp = pctx.dpatch_list.next;
    3782:	69ac      	ldr	r4, [r5, #24]
	dynamic_patch *cur = NULL, *tail = &pctx.dpatch_list;
	int cnt = 0;
    3784:	2300      	movs	r3, #0
	dynamic_patch *cur = NULL, *tail = &pctx.dpatch_list;
    3786:	3514      	adds	r5, #20
	while (dp != NULL) {
    3788:	b93c      	cbnz	r4, 379a <add_dynamic_patch_to_ctx+0x1e>
		tail = dp;
		dp = dp->next;
		cnt++;
	}
	if (cur == NULL) {
		if (cnt > MAX_DP_NUM) { // overwrite the last one
    378a:	2b06      	cmp	r3, #6
    378c:	dc0e      	bgt.n	37ac <add_dynamic_patch_to_ctx+0x30>
			//return NULL;
			DEBUG_LOG("Warning: dynamic patch exceed the maximum number(6).\n");
			cur = tail;
		} else {
			cur = ebpf_malloc(sizeof(dynamic_patch));
    378e:	2010      	movs	r0, #16
    3790:	f000 f974 	bl	3a7c <ebpf_malloc>
    3794:	4604      	mov	r4, r0
			tail->next = cur;
    3796:	6068      	str	r0, [r5, #4]
    3798:	e00c      	b.n	37b4 <add_dynamic_patch_to_ctx+0x38>
		if (dp->inst_addr == patch->desc->inst_addr) {
    379a:	6832      	ldr	r2, [r6, #0]
    379c:	68a1      	ldr	r1, [r4, #8]
    379e:	6852      	ldr	r2, [r2, #4]
    37a0:	4291      	cmp	r1, r2
    37a2:	d007      	beq.n	37b4 <add_dynamic_patch_to_ctx+0x38>
		cnt++;
    37a4:	4625      	mov	r5, r4
    37a6:	3301      	adds	r3, #1
		dp = dp->next;
    37a8:	6864      	ldr	r4, [r4, #4]
    37aa:	e7ed      	b.n	3788 <add_dynamic_patch_to_ctx+0xc>
			DEBUG_LOG("Warning: dynamic patch exceed the maximum number(6).\n");
    37ac:	4809      	ldr	r0, [pc, #36]	; (37d4 <add_dynamic_patch_to_ctx+0x58>)
    37ae:	f00d fe8e 	bl	114ce <debug_log>
			cur = tail;
    37b2:	462c      	mov	r4, r5
		}
	}
	cur->next = NULL;
    37b4:	2300      	movs	r3, #0
    37b6:	6063      	str	r3, [r4, #4]
	cur->inst_addr = calc_bpkt_addr(patch->desc->inst_addr);
    37b8:	6833      	ldr	r3, [r6, #0]
    37ba:	6858      	ldr	r0, [r3, #4]
    37bc:	f00d fdf7 	bl	113ae <calc_bpkt_addr>
    37c0:	60a0      	str	r0, [r4, #8]
	cur->pc_addr = calc_bpkt_pc(cur->inst_addr);
    37c2:	f00d fe9d 	bl	11500 <calc_bpkt_pc>
	cur->patch = patch;
    37c6:	6026      	str	r6, [r4, #0]
	cur->pc_addr = calc_bpkt_pc(cur->inst_addr);
    37c8:	60e0      	str	r0, [r4, #12]
	return cur;
}
    37ca:	4620      	mov	r0, r4
    37cc:	bd70      	pop	{r4, r5, r6, pc}
    37ce:	bf00      	nop
    37d0:	200024d0 	.word	0x200024d0
    37d4:	00019f7b 	.word	0x00019f7b

000037d8 <active_patch>:
static void active_patch(ebpf_patch *patch) {
    37d8:	b510      	push	{r4, lr}
    37da:	4604      	mov	r4, r0
	update_bits_filter();
    37dc:	f7ff ffa4 	bl	3728 <update_bits_filter>
	if (patch->desc->type == FixedPatchPoint) {
    37e0:	6823      	ldr	r3, [r4, #0]
    37e2:	881a      	ldrh	r2, [r3, #0]
    37e4:	2a01      	cmp	r2, #1
    37e6:	d107      	bne.n	37f8 <active_patch+0x20>
		pctx.fbits_filter |= patch->desc->fixed_id;
    37e8:	4a06      	ldr	r2, [pc, #24]	; (3804 <active_patch+0x2c>)
    37ea:	6859      	ldr	r1, [r3, #4]
    37ec:	6853      	ldr	r3, [r2, #4]
    37ee:	430b      	orrs	r3, r1
    37f0:	6053      	str	r3, [r2, #4]
	patch->is_active = true;
    37f2:	2301      	movs	r3, #1
    37f4:	7223      	strb	r3, [r4, #8]
}
    37f6:	bd10      	pop	{r4, pc}
	} else if (patch->desc->type == DynamicPatchPoint) {
    37f8:	2a02      	cmp	r2, #2
    37fa:	d1fa      	bne.n	37f2 <active_patch+0x1a>
		add_hw_bkpt(patch->desc->inst_addr);
    37fc:	6858      	ldr	r0, [r3, #4]
    37fe:	f7ff f997 	bl	2b30 <add_hw_bkpt>
    3802:	e7f6      	b.n	37f2 <active_patch+0x1a>
    3804:	200024d0 	.word	0x200024d0

00003808 <init_patch_sys>:
		add_dynamic_patch_to_ctx(patch);
	}
	return patch;
}

void init_patch_sys(void) {
    3808:	b570      	push	{r4, r5, r6, lr}
	if (ctx_init) {
    380a:	4c0b      	ldr	r4, [pc, #44]	; (3838 <init_patch_sys+0x30>)
    380c:	7826      	ldrb	r6, [r4, #0]
    380e:	b98e      	cbnz	r6, 3834 <init_patch_sys+0x2c>
		return;
	}
	int v = 1;
	DEBUG_LOG("init_patch_sys: %d\n", v);
	const int init_size = 8;
	memset(&pctx, 0, sizeof(pctx));
    3810:	4d0a      	ldr	r5, [pc, #40]	; (383c <init_patch_sys+0x34>)
	DEBUG_LOG("init_patch_sys: %d\n", v);
    3812:	480b      	ldr	r0, [pc, #44]	; (3840 <init_patch_sys+0x38>)
    3814:	2101      	movs	r1, #1
    3816:	f00d fe5a 	bl	114ce <debug_log>
	memset(&pctx, 0, sizeof(pctx));
    381a:	2224      	movs	r2, #36	; 0x24
    381c:	4631      	mov	r1, r6
    381e:	4628      	mov	r0, r5
    3820:	f7fe fde7 	bl	23f2 <memset>
	pctx.fpatch_list.fiexed_patches = arraymap_new(4);
    3824:	2004      	movs	r0, #4
    3826:	f00e ffb9 	bl	1279c <arraymap_new>
    382a:	60a8      	str	r0, [r5, #8]
	update_bits_filter();
    382c:	f7ff ff7c 	bl	3728 <update_bits_filter>
	ctx_init = true;
    3830:	2301      	movs	r3, #1
    3832:	7023      	strb	r3, [r4, #0]
}
    3834:	bd70      	pop	{r4, r5, r6, pc}
    3836:	bf00      	nop
    3838:	200059ca 	.word	0x200059ca
    383c:	200024d0 	.word	0x200024d0
    3840:	00019fb1 	.word	0x00019fb1

00003844 <show_all_patches>:
		ebpf_free(patch->vm);
		ebpf_free(patch);
	}
}

void show_all_patches(void) {
    3844:	b538      	push	{r3, r4, r5, lr}
	DEBUG_LOG("Dynamic Patch List:\n");
    3846:	480a      	ldr	r0, [pc, #40]	; (3870 <show_all_patches+0x2c>)
	dynamic_patch *dp = pctx.dpatch_list.next;
	while (dp != NULL) {
		DEBUG_LOG("dypk inst_addr: 0x%08x pc_addr: 0x%08x is_active: %d\n", dp->inst_addr, dp->pc_addr, dp->patch->is_active);
    3848:	4d0a      	ldr	r5, [pc, #40]	; (3874 <show_all_patches+0x30>)
	DEBUG_LOG("Dynamic Patch List:\n");
    384a:	f00d fe40 	bl	114ce <debug_log>
	dynamic_patch *dp = pctx.dpatch_list.next;
    384e:	4b0a      	ldr	r3, [pc, #40]	; (3878 <show_all_patches+0x34>)
    3850:	699c      	ldr	r4, [r3, #24]
	while (dp != NULL) {
    3852:	b924      	cbnz	r4, 385e <show_all_patches+0x1a>
		dp = dp->next;
	}

	DEBUG_LOG("Fixed Patch List:\n");
    3854:	4809      	ldr	r0, [pc, #36]	; (387c <show_all_patches+0x38>)
}
    3856:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	DEBUG_LOG("Fixed Patch List:\n");
    385a:	f00d be38 	b.w	114ce <debug_log>
		DEBUG_LOG("dypk inst_addr: 0x%08x pc_addr: 0x%08x is_active: %d\n", dp->inst_addr, dp->pc_addr, dp->patch->is_active);
    385e:	6823      	ldr	r3, [r4, #0]
    3860:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
    3864:	7a1b      	ldrb	r3, [r3, #8]
    3866:	4628      	mov	r0, r5
    3868:	f00d fe31 	bl	114ce <debug_log>
		dp = dp->next;
    386c:	6864      	ldr	r4, [r4, #4]
    386e:	e7f0      	b.n	3852 <show_all_patches+0xe>
    3870:	00019feb 	.word	0x00019feb
    3874:	0001a000 	.word	0x0001a000
    3878:	200024d0 	.word	0x200024d0
    387c:	0001a036 	.word	0x0001a036

00003880 <get_fixed_patch_by_lr>:
	ebpf_patch *patch = add_ebpf_patch(desc);
	// TODO: use lock to load to memory and active patch
	active_patch(patch);
}

ebpf_patch* get_fixed_patch_by_lr(uint32_t lr) {
    3880:	b508      	push	{r3, lr}
	if ((pctx.fbits_filter & lr) != lr) {
    3882:	4b09      	ldr	r3, [pc, #36]	; (38a8 <get_fixed_patch_by_lr+0x28>)
    3884:	685a      	ldr	r2, [r3, #4]
    3886:	ea00 0102 	and.w	r1, r0, r2
    388a:	ea30 0202 	bics.w	r2, r0, r2
    388e:	d001      	beq.n	3894 <get_fixed_patch_by_lr+0x14>
		return NULL;
    3890:	2000      	movs	r0, #0
	ebpf_patch *patch = arraymap_get(pctx.fpatch_list.fiexed_patches, lr);
	if (patch != NULL && patch->is_active) {
		return patch;
	}
	return NULL;
}
    3892:	bd08      	pop	{r3, pc}
	ebpf_patch *patch = arraymap_get(pctx.fpatch_list.fiexed_patches, lr);
    3894:	6898      	ldr	r0, [r3, #8]
    3896:	f00e ffff 	bl	12898 <arraymap_get>
	if (patch != NULL && patch->is_active) {
    389a:	2800      	cmp	r0, #0
    389c:	d0f8      	beq.n	3890 <get_fixed_patch_by_lr+0x10>
    389e:	7a03      	ldrb	r3, [r0, #8]
    38a0:	2b00      	cmp	r3, #0
    38a2:	d1f6      	bne.n	3892 <get_fixed_patch_by_lr+0x12>
    38a4:	e7f4      	b.n	3890 <get_fixed_patch_by_lr+0x10>
    38a6:	bf00      	nop
    38a8:	200024d0 	.word	0x200024d0

000038ac <get_dynamic_patch_by_bpkt>:
	}
	return NULL;
}

ebpf_patch* get_dynamic_patch_by_bpkt(uint32_t loc) {
if ((pctx.dbits_filter_bpkt & loc) != loc) {
    38ac:	4b09      	ldr	r3, [pc, #36]	; (38d4 <get_dynamic_patch_by_bpkt+0x28>)
    38ae:	68da      	ldr	r2, [r3, #12]
    38b0:	ea30 0202 	bics.w	r2, r0, r2
    38b4:	d101      	bne.n	38ba <get_dynamic_patch_by_bpkt+0xe>
		return NULL;
	}
	dynamic_patch *dp = pctx.dpatch_list.next;
    38b6:	699b      	ldr	r3, [r3, #24]
	while (dp != NULL) {
    38b8:	b913      	cbnz	r3, 38c0 <get_dynamic_patch_by_bpkt+0x14>
		return NULL;
    38ba:	2200      	movs	r2, #0
			return dp->patch;
		}
		dp = dp->next;
	}
	return NULL;
}
    38bc:	4610      	mov	r0, r2
    38be:	4770      	bx	lr
		if (dp->inst_addr == loc && dp->patch->is_active) {
    38c0:	689a      	ldr	r2, [r3, #8]
    38c2:	4282      	cmp	r2, r0
    38c4:	d103      	bne.n	38ce <get_dynamic_patch_by_bpkt+0x22>
    38c6:	681a      	ldr	r2, [r3, #0]
    38c8:	7a11      	ldrb	r1, [r2, #8]
    38ca:	2900      	cmp	r1, #0
    38cc:	d1f6      	bne.n	38bc <get_dynamic_patch_by_bpkt+0x10>
		dp = dp->next;
    38ce:	685b      	ldr	r3, [r3, #4]
    38d0:	e7f2      	b.n	38b8 <get_dynamic_patch_by_bpkt+0xc>
    38d2:	bf00      	nop
    38d4:	200024d0 	.word	0x200024d0

000038d8 <load_local_patch_to_ctx>:
		}
	}
	return NULL;
}

void load_local_patch_to_ctx(ebpf_patch *patch) {
    38d8:	b538      	push	{r3, r4, r5, lr}
	if (patch->desc->type == FixedPatchPoint) { 
    38da:	6803      	ldr	r3, [r0, #0]
    38dc:	881a      	ldrh	r2, [r3, #0]
    38de:	2a01      	cmp	r2, #1
void load_local_patch_to_ctx(ebpf_patch *patch) {
    38e0:	4605      	mov	r5, r0
	if (patch->desc->type == FixedPatchPoint) { 
    38e2:	d10a      	bne.n	38fa <load_local_patch_to_ctx+0x22>
	arraymap_set(pctx.fpatch_list.fiexed_patches, patch->desc->fixed_id, patch);
    38e4:	6859      	ldr	r1, [r3, #4]
    38e6:	4b13      	ldr	r3, [pc, #76]	; (3934 <load_local_patch_to_ctx+0x5c>)
    38e8:	4602      	mov	r2, r0
    38ea:	6898      	ldr	r0, [r3, #8]
    38ec:	f00e ff77 	bl	127de <arraymap_set>
		} else { // update current value
			dp->inst_addr = calc_bpkt_addr(patch->desc->inst_addr);
			dp->pc_addr = calc_bpkt_pc(dp->inst_addr);
		}
		DEBUG_LOG("dynamic patch: pc=0x%08x inst=0x%08x\n", dp->pc_addr, dp->inst_addr);
		active_patch(patch);
    38f0:	4628      	mov	r0, r5
	}
}
    38f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		active_patch(patch);
    38f6:	f7ff bf6f 	b.w	37d8 <active_patch>
	} else if (patch->desc->type == DynamicPatchPoint) {
    38fa:	2a02      	cmp	r2, #2
    38fc:	d119      	bne.n	3932 <load_local_patch_to_ctx+0x5a>
		dynamic_patch *dp = pctx.dpatch_list.next;
    38fe:	4a0d      	ldr	r2, [pc, #52]	; (3934 <load_local_patch_to_ctx+0x5c>)
    3900:	6994      	ldr	r4, [r2, #24]
		while (dp != NULL) {
    3902:	b94c      	cbnz	r4, 3918 <load_local_patch_to_ctx+0x40>
			dp = add_dynamic_patch_to_ctx(patch);
    3904:	4628      	mov	r0, r5
    3906:	f7ff ff39 	bl	377c <add_dynamic_patch_to_ctx>
    390a:	4604      	mov	r4, r0
		DEBUG_LOG("dynamic patch: pc=0x%08x inst=0x%08x\n", dp->pc_addr, dp->inst_addr);
    390c:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
    3910:	4809      	ldr	r0, [pc, #36]	; (3938 <load_local_patch_to_ctx+0x60>)
    3912:	f00d fddc 	bl	114ce <debug_log>
    3916:	e7eb      	b.n	38f0 <load_local_patch_to_ctx+0x18>
			if (dp->patch == patch) {
    3918:	6822      	ldr	r2, [r4, #0]
    391a:	42aa      	cmp	r2, r5
    391c:	d001      	beq.n	3922 <load_local_patch_to_ctx+0x4a>
			dp = dp->next;
    391e:	6864      	ldr	r4, [r4, #4]
    3920:	e7ef      	b.n	3902 <load_local_patch_to_ctx+0x2a>
			dp->inst_addr = calc_bpkt_addr(patch->desc->inst_addr);
    3922:	6858      	ldr	r0, [r3, #4]
    3924:	f00d fd43 	bl	113ae <calc_bpkt_addr>
    3928:	60a0      	str	r0, [r4, #8]
			dp->pc_addr = calc_bpkt_pc(dp->inst_addr);
    392a:	f00d fde9 	bl	11500 <calc_bpkt_pc>
    392e:	60e0      	str	r0, [r4, #12]
    3930:	e7ec      	b.n	390c <load_local_patch_to_ctx+0x34>
}
    3932:	bd38      	pop	{r3, r4, r5, pc}
    3934:	200024d0 	.word	0x200024d0
    3938:	00019fc5 	.word	0x00019fc5

0000393c <dwt_init>:
#define DWT_CYCCNT (volatile uint32_t *) (0xE0001004) // page e156
#define MSK_DEMCR_TRCENA (1 << 24) // page 464
#define MSK_DWT_CYCCNTENA (1 << 0) // page e159

static inline void dwt_init() {
	ticks_per_us = SYSCoreClock / 1000000;
    393c:	4b08      	ldr	r3, [pc, #32]	; (3960 <dwt_init+0x24>)
    393e:	2240      	movs	r2, #64	; 0x40
    3940:	601a      	str	r2, [r3, #0]
	*COREDEBUG_DEMCR |= MSK_DEMCR_TRCENA;
    3942:	4a08      	ldr	r2, [pc, #32]	; (3964 <dwt_init+0x28>)
    3944:	6813      	ldr	r3, [r2, #0]
    3946:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    394a:	6013      	str	r3, [r2, #0]
	*DWT_CYCCNT = 0;
    394c:	4b06      	ldr	r3, [pc, #24]	; (3968 <dwt_init+0x2c>)
    394e:	2200      	movs	r2, #0
    3950:	601a      	str	r2, [r3, #0]
	*DWT_CTRL |= MSK_DWT_CYCCNTENA;
    3952:	4a06      	ldr	r2, [pc, #24]	; (396c <dwt_init+0x30>)
    3954:	6813      	ldr	r3, [r2, #0]
    3956:	f043 0301 	orr.w	r3, r3, #1
    395a:	6013      	str	r3, [r2, #0]
}
    395c:	4770      	bx	lr
    395e:	bf00      	nop
    3960:	2000c690 	.word	0x2000c690
    3964:	e000edfc 	.word	0xe000edfc
    3968:	e0001004 	.word	0xe0001004
    396c:	e0001000 	.word	0xe0001000

00003970 <get_cur_tick>:
	*DWT_CYCCNT = 0;
	*COREDEBUG_DEMCR &= ~MSK_DEMCR_TRCENA;
}

static inline uint32_t dwt_get_counter() {
	return *DWT_CYCCNT;
    3970:	4b01      	ldr	r3, [pc, #4]	; (3978 <get_cur_tick+0x8>)
    3972:	6818      	ldr	r0, [r3, #0]
}


int get_cur_tick() {
	return dwt_get_counter();
}
    3974:	4770      	bx	lr
    3976:	bf00      	nop
    3978:	e0001004 	.word	0xe0001004

0000397c <profile_add_event>:
	dwt_init();
	profiler.event_name[EV0] = EV0_TAG;
	profiler.event_name[EV1] = EV1_TAG;
}

int profile_add_event(const char *event) {
    397c:	b508      	push	{r3, lr}
	if (!profiler_is_init) {
    397e:	4b13      	ldr	r3, [pc, #76]	; (39cc <profile_add_event+0x50>)
    3980:	4913      	ldr	r1, [pc, #76]	; (39d0 <profile_add_event+0x54>)
    3982:	781b      	ldrb	r3, [r3, #0]
    3984:	b9cb      	cbnz	r3, 39ba <profile_add_event+0x3e>
	profiler.event_count = 0;
    3986:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	dwt_init();
    398a:	f7ff ffd7 	bl	393c <dwt_init>
	profiler.event_name[EV0] = EV0_TAG;
    398e:	4b11      	ldr	r3, [pc, #68]	; (39d4 <profile_add_event+0x58>)
    3990:	660b      	str	r3, [r1, #96]	; 0x60
	profiler.event_name[EV1] = EV1_TAG;
    3992:	4b11      	ldr	r3, [pc, #68]	; (39d8 <profile_add_event+0x5c>)
    3994:	664b      	str	r3, [r1, #100]	; 0x64
	}
	
	if (profiler.event_count >= PROFILER_EVENTS_MAX) {
		profiler.event_count = 0;
	} 
	int event_count = profiler.event_count;
    3996:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
	profiler.event_name[event_count] = event;
    399a:	f103 0218 	add.w	r2, r3, #24
    399e:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	profiler.start_tick[event_count] = profiler.end_tick[event_count] = 0;
    39a2:	f103 000c 	add.w	r0, r3, #12
    39a6:	2200      	movs	r2, #0
    39a8:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
    39ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	profiler.event_count++;
    39b0:	1c5a      	adds	r2, r3, #1
    39b2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
	return event_count;
}
    39b6:	4618      	mov	r0, r3
    39b8:	bd08      	pop	{r3, pc}
	if (profiler.event_count >= PROFILER_EVENTS_MAX) {
    39ba:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    39be:	2b0b      	cmp	r3, #11
		profiler.event_count = 0;
    39c0:	bfc4      	itt	gt
    39c2:	2300      	movgt	r3, #0
    39c4:	f8c1 3090 	strgt.w	r3, [r1, #144]	; 0x90
    39c8:	e7e5      	b.n	3996 <profile_add_event+0x1a>
    39ca:	bf00      	nop
    39cc:	200059cb 	.word	0x200059cb
    39d0:	200024f4 	.word	0x200024f4
    39d4:	00019de9 	.word	0x00019de9
    39d8:	0001a049 	.word	0x0001a049

000039dc <profile_start>:
	return *DWT_CYCCNT;
    39dc:	4b02      	ldr	r3, [pc, #8]	; (39e8 <profile_start+0xc>)
    39de:	681a      	ldr	r2, [r3, #0]

void profile_start(int eid) {
	// if (!profiler_is_init) {
	// 	setup_profiler();
	// }
	profiler.start_tick[eid] = dwt_get_counter();
    39e0:	4b02      	ldr	r3, [pc, #8]	; (39ec <profile_start+0x10>)
    39e2:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    39e6:	4770      	bx	lr
    39e8:	e0001004 	.word	0xe0001004
    39ec:	200024f4 	.word	0x200024f4

000039f0 <profile_end>:

uint32_t profile_end(int eid) {
	profiler.end_tick[eid] = dwt_get_counter();
    39f0:	4a05      	ldr	r2, [pc, #20]	; (3a08 <profile_end+0x18>)
	return *DWT_CYCCNT;
    39f2:	4b06      	ldr	r3, [pc, #24]	; (3a0c <profile_end+0x1c>)
	profiler.end_tick[eid] = dwt_get_counter();
    39f4:	f100 010c 	add.w	r1, r0, #12
	return *DWT_CYCCNT;
    39f8:	681b      	ldr	r3, [r3, #0]
	return profiler.end_tick[eid] - profiler.start_tick[eid];
    39fa:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
	profiler.end_tick[eid] = dwt_get_counter();
    39fe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    3a02:	1a18      	subs	r0, r3, r0
    3a04:	4770      	bx	lr
    3a06:	bf00      	nop
    3a08:	200024f4 	.word	0x200024f4
    3a0c:	e0001004 	.word	0xe0001004

00003a10 <cycles2us>:

float cycles2us(int cycles) {
    3a10:	b510      	push	{r4, lr}
	return cycles / (float) ticks_per_us;
    3a12:	f7fc fd7b 	bl	50c <__aeabi_ui2f>
    3a16:	4b05      	ldr	r3, [pc, #20]	; (3a2c <cycles2us+0x1c>)
    3a18:	4604      	mov	r4, r0
    3a1a:	6818      	ldr	r0, [r3, #0]
    3a1c:	f7fc fd76 	bl	50c <__aeabi_ui2f>
    3a20:	4601      	mov	r1, r0
    3a22:	4620      	mov	r0, r4
    3a24:	f7fc fe7e 	bl	724 <__aeabi_fdiv>
	return cycles_to_us(cycles);
}
    3a28:	bd10      	pop	{r4, pc}
    3a2a:	bf00      	nop
    3a2c:	2000c690 	.word	0x2000c690

00003a30 <profile_dump>:

void profile_dump(int eid) {
	uint32_t ticks = profiler.end_tick[eid] - profiler.start_tick[eid];
    3a30:	4b0f      	ldr	r3, [pc, #60]	; (3a70 <profile_dump+0x40>)
    3a32:	f100 020c 	add.w	r2, r0, #12
void profile_dump(int eid) {
    3a36:	b570      	push	{r4, r5, r6, lr}
	uint32_t ticks = profiler.end_tick[eid] - profiler.start_tick[eid];
    3a38:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    3a3c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    3a40:	1aa4      	subs	r4, r4, r2
void profile_dump(int eid) {
    3a42:	4605      	mov	r5, r0
	return cycles / (float) ticks_per_us;
    3a44:	4620      	mov	r0, r4
    3a46:	f7fc fd61 	bl	50c <__aeabi_ui2f>
    3a4a:	4b0a      	ldr	r3, [pc, #40]	; (3a74 <profile_dump+0x44>)
    3a4c:	4606      	mov	r6, r0
    3a4e:	6818      	ldr	r0, [r3, #0]
    3a50:	f7fc fd5c 	bl	50c <__aeabi_ui2f>
    3a54:	4601      	mov	r1, r0
    3a56:	4630      	mov	r0, r6
    3a58:	f7fc fe64 	bl	724 <__aeabi_fdiv>
	*/
	float us = cycles_to_us(ticks);
	DEBUG_LOG("Event %d -> cycle: %d time(us): %f\n", eid, ticks, us);
#elif defined(ZEPHYR_OS)
	// zephyr do not support printf float
	int us = cycles_to_us(ticks);
    3a5c:	f7fc fefe 	bl	85c <__aeabi_f2iz>
	//us = ticks * 10 / 189;
	DEBUG_LOG("Event %d -> cycle: %d time(us): %d\n", eid, ticks, us);
    3a60:	4622      	mov	r2, r4
    3a62:	4603      	mov	r3, r0
    3a64:	4629      	mov	r1, r5
    3a66:	4804      	ldr	r0, [pc, #16]	; (3a78 <profile_dump+0x48>)
#else
	DEBUG_LOG("QEMU Event %d -> cycle: %d %d\n", ticks);
#endif
}
    3a68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	DEBUG_LOG("Event %d -> cycle: %d time(us): %d\n", eid, ticks, us);
    3a6c:	f00d bd2f 	b.w	114ce <debug_log>
    3a70:	200024f4 	.word	0x200024f4
    3a74:	2000c690 	.word	0x2000c690
    3a78:	0001a04d 	.word	0x0001a04d

00003a7c <ebpf_malloc>:
*/

int mem_size = 0;

void* ebpf_malloc(size_t size) {
	mem_size += size;
    3a7c:	4a02      	ldr	r2, [pc, #8]	; (3a88 <ebpf_malloc+0xc>)
    3a7e:	6813      	ldr	r3, [r2, #0]
    3a80:	4403      	add	r3, r0
    3a82:	6013      	str	r3, [r2, #0]
	return (void *) my_os_malloc(size);
    3a84:	f00b bd62 	b.w	f54c <k_malloc>
    3a88:	20002588 	.word	0x20002588

00003a8c <ebpf_realloc>:

// void* ebpf_realloc(void* rmem, size_t newsize) {
// 	return (void*) my_os_realloc(rmem, newsize);
// }

void* ebpf_realloc(void *rmem, size_t orisize, size_t newsize) {
    3a8c:	b570      	push	{r4, r5, r6, lr}
    3a8e:	4614      	mov	r4, r2
	mem_size += newsize - orisize;
    3a90:	4a10      	ldr	r2, [pc, #64]	; (3ad4 <ebpf_realloc+0x48>)
    3a92:	1a63      	subs	r3, r4, r1
void* ebpf_realloc(void *rmem, size_t orisize, size_t newsize) {
    3a94:	460e      	mov	r6, r1
	mem_size += newsize - orisize;
    3a96:	6811      	ldr	r1, [r2, #0]
    3a98:	440b      	add	r3, r1
void* ebpf_realloc(void *rmem, size_t orisize, size_t newsize) {
    3a9a:	4605      	mov	r5, r0
	mem_size += newsize - orisize;
    3a9c:	6013      	str	r3, [r2, #0]
	if (newsize == 0) {
    3a9e:	b91c      	cbnz	r4, 3aa8 <ebpf_realloc+0x1c>
	mem_size += elmsize;
	return (void*) my_os_calloc(nelem, elmsize);
}

void ebpf_free(void* rmem) {
	my_os_free(rmem);
    3aa0:	f014 fc24 	bl	182ec <k_free>
}
    3aa4:	4620      	mov	r0, r4
    3aa6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (rmem == NULL) {
    3aa8:	b920      	cbnz	r0, 3ab4 <ebpf_realloc+0x28>
		return ebpf_malloc(newsize);
    3aaa:	4620      	mov	r0, r4
}
    3aac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return ebpf_malloc(newsize);
    3ab0:	f7ff bfe4 	b.w	3a7c <ebpf_malloc>
	} else if (newsize <= orisize) {
    3ab4:	42b4      	cmp	r4, r6
    3ab6:	d90b      	bls.n	3ad0 <ebpf_realloc+0x44>
		void *pnew = ebpf_malloc(newsize);
    3ab8:	4620      	mov	r0, r4
    3aba:	f7ff ffdf 	bl	3a7c <ebpf_malloc>
		if (pnew != NULL) {
    3abe:	4604      	mov	r4, r0
    3ac0:	2800      	cmp	r0, #0
    3ac2:	d0ef      	beq.n	3aa4 <ebpf_realloc+0x18>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    3ac4:	4632      	mov	r2, r6
    3ac6:	4629      	mov	r1, r5
    3ac8:	f7fe fc58 	bl	237c <memcpy>
	my_os_free(rmem);
    3acc:	4628      	mov	r0, r5
    3ace:	e7e7      	b.n	3aa0 <ebpf_realloc+0x14>
    3ad0:	4604      	mov	r4, r0
    3ad2:	e7e7      	b.n	3aa4 <ebpf_realloc+0x18>
    3ad4:	20002588 	.word	0x20002588

00003ad8 <ebpf_calloc>:
	mem_size += elmsize;
    3ad8:	4a02      	ldr	r2, [pc, #8]	; (3ae4 <ebpf_calloc+0xc>)
    3ada:	6813      	ldr	r3, [r2, #0]
    3adc:	440b      	add	r3, r1
    3ade:	6013      	str	r3, [r2, #0]
	return (void*) my_os_calloc(nelem, elmsize);
    3ae0:	f014 bc09 	b.w	182f6 <k_calloc>
    3ae4:	20002588 	.word	0x20002588

00003ae8 <get_ebpf_alloc_size>:
}

int get_ebpf_alloc_size() {
	return mem_size;
    3ae8:	4b01      	ldr	r3, [pc, #4]	; (3af0 <get_ebpf_alloc_size+0x8>)
    3aea:	6818      	ldr	r0, [r3, #0]
    3aec:	4770      	bx	lr
    3aee:	bf00      	nop
    3af0:	20002588 	.word	0x20002588

00003af4 <tmp_map_save_val>:
uint64_t dval;
static void tmp_map_save_val(void *mp, uint64_t key, uint64_t val) {
	if (mp == NULL) {

	}
	dval = val;
    3af4:	e9dd 0100 	ldrd	r0, r1, [sp]
    3af8:	4b01      	ldr	r3, [pc, #4]	; (3b00 <tmp_map_save_val+0xc>)
    3afa:	e9c3 0100 	strd	r0, r1, [r3]
}
    3afe:	4770      	bx	lr
    3b00:	20002400 	.word	0x20002400

00003b04 <tmp_map_get_val>:

static uint64_t tmp_map_get_val(void *mp, uint64_t key) {
	return dval;
}
    3b04:	4b01      	ldr	r3, [pc, #4]	; (3b0c <tmp_map_get_val+0x8>)
    3b06:	e9d3 0100 	ldrd	r0, r1, [r3]
    3b0a:	4770      	bx	lr
    3b0c:	20002400 	.word	0x20002400

00003b10 <iot_call_C_func_noret>:
static void iot_call_C_func_noret(uint64_t func_addr, uint64_t arg0, uint64_t arg1, uint64_t arg2, uint64_t arg3) {
    3b10:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    3b14:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    3b16:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    3b18:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
	func(arg0, arg1, arg2, arg3);
    3b1c:	f8cd 8008 	str.w	r8, [sp, #8]
static void iot_call_C_func_noret(uint64_t func_addr, uint64_t arg0, uint64_t arg1, uint64_t arg2, uint64_t arg3) {
    3b20:	4619      	mov	r1, r3
	func(arg0, arg1, arg2, arg3);
    3b22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3b24:	9303      	str	r3, [sp, #12]
static void iot_call_C_func_noret(uint64_t func_addr, uint64_t arg0, uint64_t arg1, uint64_t arg2, uint64_t arg3) {
    3b26:	4615      	mov	r5, r2
	func(arg0, arg1, arg2, arg3);
    3b28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3b2a:	9301      	str	r3, [sp, #4]
static void iot_call_C_func_noret(uint64_t func_addr, uint64_t arg0, uint64_t arg1, uint64_t arg2, uint64_t arg3) {
    3b2c:	4604      	mov	r4, r0
	func(arg0, arg1, arg2, arg3);
    3b2e:	4632      	mov	r2, r6
    3b30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3b32:	9700      	str	r7, [sp, #0]
    3b34:	4628      	mov	r0, r5
    3b36:	47a0      	blx	r4
	DEBUG_LOG("want to call c: func:0x%08x arg0:%d arg1:%d arg2:%d arg3:%d\n",  (u32) func_addr, (u32) arg0, (u32) arg1, (u32) arg2, (u32) arg3);
    3b38:	4805      	ldr	r0, [pc, #20]	; (3b50 <iot_call_C_func_noret+0x40>)
    3b3a:	4633      	mov	r3, r6
    3b3c:	462a      	mov	r2, r5
    3b3e:	4621      	mov	r1, r4
    3b40:	e9cd 780a 	strd	r7, r8, [sp, #40]	; 0x28
}
    3b44:	b004      	add	sp, #16
    3b46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	DEBUG_LOG("want to call c: func:0x%08x arg0:%d arg1:%d arg2:%d arg3:%d\n",  (u32) func_addr, (u32) arg0, (u32) arg1, (u32) arg2, (u32) arg3);
    3b4a:	f00d bcc0 	b.w	114ce <debug_log>
    3b4e:	bf00      	nop
    3b50:	0001a071 	.word	0x0001a071

00003b54 <use_default_helper_func>:
	// DEBUG_LOG("ebpf_register: 0x%08x 0x%08x\n", vm->helper_func->ext_funcs, fn);
	// vm->helper_func->ext_func_names[idx] = name;
	return 0;
}

static ebpf_helper_env* use_default_helper_func() {
    3b54:	b538      	push	{r3, r4, r5, lr}
	if (g_helper_func == NULL) {
    3b56:	4c09      	ldr	r4, [pc, #36]	; (3b7c <use_default_helper_func+0x28>)
    3b58:	6823      	ldr	r3, [r4, #0]
    3b5a:	b953      	cbnz	r3, 3b72 <use_default_helper_func+0x1e>
		g_helper_func = ebpf_calloc(1, sizeof(ebpf_helper_env));
    3b5c:	210c      	movs	r1, #12
    3b5e:	2001      	movs	r0, #1
    3b60:	f7ff ffba 	bl	3ad8 <ebpf_calloc>
		g_helper_func->ext_funcs = ebpf_calloc(MAX_EXT_FUNCS, sizeof(ext_func));
    3b64:	2104      	movs	r1, #4
		g_helper_func = ebpf_calloc(1, sizeof(ebpf_helper_env));
    3b66:	4605      	mov	r5, r0
    3b68:	6020      	str	r0, [r4, #0]
		g_helper_func->ext_funcs = ebpf_calloc(MAX_EXT_FUNCS, sizeof(ext_func));
    3b6a:	200c      	movs	r0, #12
    3b6c:	f7ff ffb4 	bl	3ad8 <ebpf_calloc>
    3b70:	6028      	str	r0, [r5, #0]
		// g_helper_func->refcnt = 0;
	}
	g_helper_func->refcnt++;
    3b72:	6820      	ldr	r0, [r4, #0]
    3b74:	6883      	ldr	r3, [r0, #8]
    3b76:	3301      	adds	r3, #1
    3b78:	6083      	str	r3, [r0, #8]
	return g_helper_func;
}
    3b7a:	bd38      	pop	{r3, r4, r5, pc}
    3b7c:	2000258c 	.word	0x2000258c

00003b80 <set_default_helpers>:

void set_default_helpers(struct ebpf_vm *vm) {
    3b80:	b510      	push	{r4, lr}
	ebpf_register(vm, 1, "print_log", iot_print_log);
    3b82:	4b0d      	ldr	r3, [pc, #52]	; (3bb8 <set_default_helpers+0x38>)
    3b84:	4a0d      	ldr	r2, [pc, #52]	; (3bbc <set_default_helpers+0x3c>)
void set_default_helpers(struct ebpf_vm *vm) {
    3b86:	4604      	mov	r4, r0
	ebpf_register(vm, 1, "print_log", iot_print_log);
    3b88:	2101      	movs	r1, #1
    3b8a:	f00d fce5 	bl	11558 <ebpf_register>
	ebpf_register(vm, 2, "call_c_func", iot_call_C_func_noret);
    3b8e:	4b0c      	ldr	r3, [pc, #48]	; (3bc0 <set_default_helpers+0x40>)
    3b90:	4a0c      	ldr	r2, [pc, #48]	; (3bc4 <set_default_helpers+0x44>)
    3b92:	2102      	movs	r1, #2
    3b94:	4620      	mov	r0, r4
    3b96:	f00d fcdf 	bl	11558 <ebpf_register>
	// DEBUG_LOG("func 2: 0x%08x\n", iot_call_C_func_noret);
	ebpf_register(vm, 3, "map_set", tmp_map_save_val);
    3b9a:	4b0b      	ldr	r3, [pc, #44]	; (3bc8 <set_default_helpers+0x48>)
    3b9c:	4a0b      	ldr	r2, [pc, #44]	; (3bcc <set_default_helpers+0x4c>)
    3b9e:	2103      	movs	r1, #3
    3ba0:	4620      	mov	r0, r4
    3ba2:	f00d fcd9 	bl	11558 <ebpf_register>
	ebpf_register(vm, 4, "map_get", tmp_map_get_val);
    3ba6:	4620      	mov	r0, r4
    3ba8:	4b09      	ldr	r3, [pc, #36]	; (3bd0 <set_default_helpers+0x50>)
    3baa:	4a0a      	ldr	r2, [pc, #40]	; (3bd4 <set_default_helpers+0x54>)
    3bac:	2104      	movs	r1, #4
}
    3bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ebpf_register(vm, 4, "map_get", tmp_map_get_val);
    3bb2:	f00d bcd1 	b.w	11558 <ebpf_register>
    3bb6:	bf00      	nop
    3bb8:	0001151d 	.word	0x0001151d
    3bbc:	0001a0ae 	.word	0x0001a0ae
    3bc0:	00003b11 	.word	0x00003b11
    3bc4:	0001a0b8 	.word	0x0001a0b8
    3bc8:	00003af5 	.word	0x00003af5
    3bcc:	0001a0c4 	.word	0x0001a0c4
    3bd0:	00003b05 	.word	0x00003b05
    3bd4:	0001a0cc 	.word	0x0001a0cc

00003bd8 <jit_mem_allocate>:
static uint8_t offset_mem[1024];
#endif

jit_mem g_jit_mem;

jit_mem* jit_mem_allocate(int insts_num) {
    3bd8:	b538      	push	{r3, r4, r5, lr}
	jit_mem *mem = &g_jit_mem;
	mem->code_size = sizeof(jit_buffer);
    3bda:	4c09      	ldr	r4, [pc, #36]	; (3c00 <jit_mem_allocate+0x28>)
	mem->jit_code = jit_buffer;
	mem->jmp_offsets = offset_mem;
    3bdc:	4d09      	ldr	r5, [pc, #36]	; (3c04 <jit_mem_allocate+0x2c>)
	mem->jit_code = jit_buffer;
    3bde:	480a      	ldr	r0, [pc, #40]	; (3c08 <jit_mem_allocate+0x30>)
    3be0:	6020      	str	r0, [r4, #0]
	mem->code_size = sizeof(jit_buffer);
    3be2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	memset(jit_buffer, 0, sizeof(jit_buffer));
    3be6:	2100      	movs	r1, #0
	mem->code_size = sizeof(jit_buffer);
    3be8:	6062      	str	r2, [r4, #4]
	mem->jmp_offsets = offset_mem;
    3bea:	60a5      	str	r5, [r4, #8]
	memset(jit_buffer, 0, sizeof(jit_buffer));
    3bec:	f7fe fc01 	bl	23f2 <memset>
	memset(offset_mem, 0, sizeof(offset_mem));
    3bf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3bf4:	2100      	movs	r1, #0
    3bf6:	4628      	mov	r0, r5
    3bf8:	f7fe fbfb 	bl	23f2 <memset>
	return mem;
}
    3bfc:	4620      	mov	r0, r4
    3bfe:	bd38      	pop	{r3, r4, r5, pc}
    3c00:	20002590 	.word	0x20002590
    3c04:	20000000 	.word	0x20000000
    3c08:	20000400 	.word	0x20000400

00003c0c <_thumb32_LSRW_IMM_T2>:
    return (THUMB2_LSRW_REG) | (flagS << 20) | (Rn << 16) | (Rd << 8) | (Rm);
}

// ARM_MOV_SI Page A7-282
static inline u32 _thumb32_LSRW_IMM_T2(s8 Rd, s8 Rm, s32 shiftImm5, u8 flagS) {
    if (shiftImm5 < 0 || shiftImm5 > 0b11111) {
    3c0c:	2a1f      	cmp	r2, #31
static inline u32 _thumb32_LSRW_IMM_T2(s8 Rd, s8 Rm, s32 shiftImm5, u8 flagS) {
    3c0e:	b510      	push	{r4, lr}
    if (shiftImm5 < 0 || shiftImm5 > 0b11111) {
    3c10:	dc0c      	bgt.n	3c2c <_thumb32_LSRW_IMM_T2+0x20>
        // DEBUG_LOG("Invalide imm value. Line:%d Val:%d\n", __LINE__, shiftImm5);
        return -1;
    }
    u32 imm3 = (shiftImm5 >> 2) & 0b111;
    u32 imm2 = shiftImm5 & 0b11; 
    u32 inst = (THUMB2_LSRW_IMM) | (flagS << 20) | (imm3 << 12) | (Rd << 8) | (imm2 << 6) | (Rm);
    3c12:	0194      	lsls	r4, r2, #6
    3c14:	b2e4      	uxtb	r4, r4
    3c16:	430c      	orrs	r4, r1
    3c18:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    3c1c:	ea44 5403 	orr.w	r4, r4, r3, lsl #20
    u32 imm3 = (shiftImm5 >> 2) & 0b111;
    3c20:	1092      	asrs	r2, r2, #2
    u32 inst = (THUMB2_LSRW_IMM) | (flagS << 20) | (imm3 << 12) | (Rd << 8) | (imm2 << 6) | (Rm);
    3c22:	4804      	ldr	r0, [pc, #16]	; (3c34 <_thumb32_LSRW_IMM_T2+0x28>)
    3c24:	ea44 3402 	orr.w	r4, r4, r2, lsl #12
    3c28:	4320      	orrs	r0, r4
    return inst;
}
    3c2a:	bd10      	pop	{r4, pc}
        return -1;
    3c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3c30:	e7fb      	b.n	3c2a <_thumb32_LSRW_IMM_T2+0x1e>
    3c32:	bf00      	nop
    3c34:	ea4f0010 	.word	0xea4f0010

00003c38 <_emit_ldr_i>:
  A7-246
  verified _emit_ldr_i(state, 0, 1, 0xffe);
  Rn - Src
  Rt - Dst
*/
static void _emit_ldr_i(jit_state *state, const s8 Rt, const s8 Rn, s16 off) {
    3c38:	b410      	push	{r4}
    3c3a:	0412      	lsls	r2, r2, #16
    3c3c:	0309      	lsls	r1, r1, #12
    // } else if (off <= imm8 && off >= 0 && Rt < 8 && Rn < 8) { // 
    //     s32 inst = 0xf8500000 | (Rn << 16) | (Rt << 12) | (0b1110 << 8) | (off & 0xff);
    //     // my_printf("imm8 _emit_ldr_i: %x\n", inst);
    //     emit4(state, inst);
    // } 
    if (off == 0) { // imm12
    3c3e:	b93b      	cbnz	r3, 3c50 <_emit_ldr_i+0x18>
        s32 inst = 0xf8d00000 | (Rn << 16) | (Rt << 12) | (off & 0xfff);
    3c40:	4311      	orrs	r1, r2
        emit4(state, inst);
    3c42:	f041 4178 	orr.w	r1, r1, #4160749568	; 0xf8000000
    3c46:	f441 0150 	orr.w	r1, r1, #13631488	; 0xd00000
        // u8 imm8 = off > 0 ? off : -off;
        // s32 inst = 0xf8500000 | (Rn << 16) | (Rt << 12) | (0b1 << 11) | (P << 10) | (U << 9) | (W << 8) | (imm8);
        // emit4(state, inst);
        emit4(state, _thumb32_LDR_IMM_T4(Rt, Rn, off));
    }
}
    3c4a:	bc10      	pop	{r4}
        emit4(state, _thumb32_LDR_IMM_T4(Rt, Rn, off));
    3c4c:	f00e be83 	b.w	12956 <emit4>
    u32 inst = (THUMB2_LDR_IMM_T4) | (Rn << 16) | (Rt << 12) | (flag << 8) | (imm8);
    3c50:	2b00      	cmp	r3, #0
    3c52:	bfac      	ite	ge
    3c54:	f44f 64c0 	movge.w	r4, #1536	; 0x600
    3c58:	f44f 6480 	movlt.w	r4, #1024	; 0x400
    3c5c:	430c      	orrs	r4, r1
    u32 imm8 = offImm8 > 0 ? offImm8 : -offImm8;
    3c5e:	2b00      	cmp	r3, #0
    u32 inst = (THUMB2_LDR_IMM_T4) | (Rn << 16) | (Rt << 12) | (flag << 8) | (imm8);
    3c60:	ea44 0402 	orr.w	r4, r4, r2
    u32 imm8 = offImm8 > 0 ? offImm8 : -offImm8;
    3c64:	bfb8      	it	lt
    3c66:	425b      	neglt	r3, r3
    3c68:	4901      	ldr	r1, [pc, #4]	; (3c70 <_emit_ldr_i+0x38>)
    u32 inst = (THUMB2_LDR_IMM_T4) | (Rn << 16) | (Rt << 12) | (flag << 8) | (imm8);
    3c6a:	4323      	orrs	r3, r4
    3c6c:	4319      	orrs	r1, r3
    3c6e:	e7ec      	b.n	3c4a <_emit_ldr_i+0x12>
    3c70:	f8500800 	.word	0xf8500800

00003c74 <emit_mov_reg64.part.7>:
	s8 rt = arm_bpf_get_reg32(state, src, tmp[0]);
	arm_bpf_put_reg32(state, dst, rt);
    // my_printf("emit_mov_reg src:%d dst:%d\n", src, dst);
}

static void emit_mov_reg64(jit_state *state, const bool is64, const s8 dst[], const s8 src[]) {
    3c74:	b570      	push	{r4, r5, r6, lr}
    if (!is64) {
        emit_a32_mov_reg(state, src_lo, dst_lo);
    } else if (is_stacked(src_lo) && is_stacked(dst_lo)) {
    3c76:	f992 3001 	ldrsb.w	r3, [r2, #1]
    3c7a:	2b00      	cmp	r3, #0
static void emit_mov_reg64(jit_state *state, const bool is64, const s8 dst[], const s8 src[]) {
    3c7c:	4614      	mov	r4, r2
    3c7e:	4606      	mov	r6, r0
    3c80:	460d      	mov	r5, r1
    3c82:	f991 2001 	ldrsb.w	r2, [r1, #1]
    } else if (is_stacked(src_lo) && is_stacked(dst_lo)) {
    3c86:	da11      	bge.n	3cac <emit_mov_reg64.part.7+0x38>
	return reg < 0;
    3c88:	b21b      	sxth	r3, r3
    } else if (is_stacked(src_lo) && is_stacked(dst_lo)) {
    3c8a:	2a00      	cmp	r2, #0
        const u8 *tmp = bpf2a32[TMP_REG_1];
        // emit(ARM_LDRD_I(tmp[1], ARM_FP, EBPF_SCRATCH_TO_ARM_FP(src_lo)), ctx);
        _emit_ldrd_i(state, tmp, ARM_FP, EBPF_SCRATCH_TO_ARM_FP(src_lo));
    3c8c:	461a      	mov	r2, r3
    } else if (is_stacked(src_lo) && is_stacked(dst_lo)) {
    3c8e:	da09      	bge.n	3ca4 <emit_mov_reg64.part.7+0x30>
        _emit_ldrd_i(state, tmp, ARM_FP, EBPF_SCRATCH_TO_ARM_FP(src_lo));
    3c90:	490e      	ldr	r1, [pc, #56]	; (3ccc <emit_mov_reg64.part.7+0x58>)
    3c92:	f00e feb4 	bl	129fe <_emit_ldrd_i.constprop.29>
        // emit(ARM_STRD_I(tmp[1], ARM_FP, EBPF_SCRATCH_TO_ARM_FP(dst_lo)), ctx);
        _emit_strd_i(state, tmp, ARM_FP, EBPF_SCRATCH_TO_ARM_FP(dst_lo));
    3c96:	f995 2001 	ldrsb.w	r2, [r5, #1]
    3c9a:	490c      	ldr	r1, [pc, #48]	; (3ccc <emit_mov_reg64.part.7+0x58>)
    } else {
        // my_printf("emit_mov_reg64: %d %d\n", dst[0], src[0]);
        _emit_mov_reg(state, src[1], dst[1]);
        _emit_mov_reg(state, src[0], dst[0]);
    }
}
    3c9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _emit_strd_i(state, src, ARM_FP, EBPF_SCRATCH_TO_ARM_FP(dst_lo));
    3ca0:	f00e be8b 	b.w	129ba <_emit_strd_i.constprop.27>
}
    3ca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _emit_ldrd_i(state, dst, ARM_FP, EBPF_SCRATCH_TO_ARM_FP(src_lo));
    3ca8:	f00e bea9 	b.w	129fe <_emit_ldrd_i.constprop.29>
    }  else if (is_stacked(dst_lo)) {
    3cac:	2a00      	cmp	r2, #0
    3cae:	da01      	bge.n	3cb4 <emit_mov_reg64.part.7+0x40>
        _emit_strd_i(state, src, ARM_FP, EBPF_SCRATCH_TO_ARM_FP(dst_lo));
    3cb0:	4621      	mov	r1, r4
    3cb2:	e7f3      	b.n	3c9c <emit_mov_reg64.part.7+0x28>
        _emit_mov_reg(state, src[1], dst[1]);
    3cb4:	4619      	mov	r1, r3
    3cb6:	f00e fecf 	bl	12a58 <_emit_mov_reg>
        _emit_mov_reg(state, src[0], dst[0]);
    3cba:	f995 2000 	ldrsb.w	r2, [r5]
    3cbe:	f994 1000 	ldrsb.w	r1, [r4]
    3cc2:	4630      	mov	r0, r6
}
    3cc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _emit_mov_reg(state, src[0], dst[0]);
    3cc8:	f00e bec6 	b.w	12a58 <_emit_mov_reg>
    3ccc:	0001a0ec 	.word	0x0001a0ec

00003cd0 <emit_mov_i64>:
        emit4(state, _thumb32_PUSHW_T2(reg_set));
    }
}

static void emit_mov_i64(jit_state *state, const s8 dst[], u64 val)
{
    3cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3cd2:	461f      	mov	r7, r3
    const s8 *tmp = bpf2a32[TMP_REG_1];
    const s8 *rd = is_stacked(dst_lo) ? tmp : dst;
    3cd4:	4c0b      	ldr	r4, [pc, #44]	; (3d04 <emit_mov_i64+0x34>)
    3cd6:	f991 3001 	ldrsb.w	r3, [r1, #1]
    3cda:	ea14 0423 	ands.w	r4, r4, r3, asr #32
    3cde:	bf38      	it	cc
    3ce0:	460c      	movcc	r4, r1
{
    3ce2:	4606      	mov	r6, r0
    3ce4:	460d      	mov	r5, r1
   
    emit_mov_imm(state, rd[1], (u32)val);
    3ce6:	7861      	ldrb	r1, [r4, #1]
    3ce8:	f00e ff0e 	bl	12b08 <emit_mov_imm>
    emit_mov_imm(state, rd[0], val >> 32);
    3cec:	463a      	mov	r2, r7
    3cee:	7821      	ldrb	r1, [r4, #0]
    3cf0:	4630      	mov	r0, r6
    3cf2:	f00e ff09 	bl	12b08 <emit_mov_imm>
    // DEBUG_LOG("emit_mov_i64: %d %d %d %d \n", dst_lo, dst_hi, rd[0], rd[1]);
    // DEBUG_LOG("emit_mov_i64: %d %d\n", dst[0], dst[1]);
    arm_bpf_put_reg64(state, dst, rd);
    3cf6:	4622      	mov	r2, r4
    3cf8:	4629      	mov	r1, r5
    3cfa:	4630      	mov	r0, r6
}
    3cfc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    arm_bpf_put_reg64(state, dst, rd);
    3d00:	f00e bee3 	b.w	12aca <arm_bpf_put_reg64>
    3d04:	0001a0ec 	.word	0x0001a0ec

00003d08 <emit_a32_mul_r64>:
static inline void emit_a32_mul_r64(jit_state *state, const s8 dst[], const s8 src[]) {
    3d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	rd = arm_bpf_get_reg64(state, dst, tmp);
    3d0c:	4f2b      	ldr	r7, [pc, #172]	; (3dbc <emit_a32_mul_r64+0xb4>)
static inline void emit_a32_mul_r64(jit_state *state, const s8 dst[], const s8 src[]) {
    3d0e:	4690      	mov	r8, r2
	rd = arm_bpf_get_reg64(state, dst, tmp);
    3d10:	f107 0218 	add.w	r2, r7, #24
static inline void emit_a32_mul_r64(jit_state *state, const s8 dst[], const s8 src[]) {
    3d14:	4604      	mov	r4, r0
    3d16:	460e      	mov	r6, r1
	rd = arm_bpf_get_reg64(state, dst, tmp);
    3d18:	f00e fe92 	bl	12a40 <arm_bpf_get_reg64>
	rt = arm_bpf_get_reg64(state, src, tmp2);
    3d1c:	f107 021a 	add.w	r2, r7, #26
	rd = arm_bpf_get_reg64(state, dst, tmp);
    3d20:	4605      	mov	r5, r0
	rt = arm_bpf_get_reg64(state, src, tmp2);
    3d22:	4641      	mov	r1, r8
    3d24:	4620      	mov	r0, r4
    3d26:	f00e fe8b 	bl	12a40 <arm_bpf_get_reg64>
    return (THUMB2_MUL_T2) | (Rn << 16) | (Rd << 8) | (Rm);
    3d2a:	f995 3001 	ldrsb.w	r3, [r5, #1]
    3d2e:	f990 1000 	ldrsb.w	r1, [r0]
    3d32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    3d36:	4607      	mov	r7, r0
    emit4(state, _thumb32_MUL_T2(ARM_IP, rd[1], rt[0]));
    3d38:	f041 417b 	orr.w	r1, r1, #4211081216	; 0xfb000000
    3d3c:	4620      	mov	r0, r4
    3d3e:	f441 417c 	orr.w	r1, r1, #64512	; 0xfc00
    3d42:	f00e fe08 	bl	12956 <emit4>
    3d46:	f995 3000 	ldrsb.w	r3, [r5]
    3d4a:	f997 1001 	ldrsb.w	r1, [r7, #1]
    3d4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    emit4(state, _thumb32_MUL_T2(ARM_LR, rd[0], rt[1]));
    3d52:	f041 417b 	orr.w	r1, r1, #4211081216	; 0xfb000000
    3d56:	f441 417e 	orr.w	r1, r1, #65024	; 0xfe00
    3d5a:	f00e fdfc 	bl	12956 <emit4>
    emit2(state, _thumb16_ADD_REG_T2(ARM_LR, ARM_IP));
    3d5e:	f244 41e6 	movw	r1, #17638	; 0x44e6
    3d62:	f00e fdee 	bl	12942 <emit2>
    return (THUMB2_UMULL_T2) | (Rn << 16) | (RdLo << 12) | (RdHi << 8) | (Rm);
    3d66:	f995 3000 	ldrsb.w	r3, [r5]
    3d6a:	f995 2001 	ldrsb.w	r2, [r5, #1]
    emit4(state, _thumb32_UMULL_T2(ARM_IP, rd[0], rd[1], rt[1]));
    3d6e:	4914      	ldr	r1, [pc, #80]	; (3dc0 <emit_a32_mul_r64+0xb8>)
    3d70:	021b      	lsls	r3, r3, #8
    3d72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    3d76:	f997 2001 	ldrsb.w	r2, [r7, #1]
    3d7a:	4313      	orrs	r3, r2
    3d7c:	4319      	orrs	r1, r3
    3d7e:	f00e fdea 	bl	12956 <emit4>
     emit2(state, _thumb16_ADD_REG_T2(rd[0], ARM_LR));
    3d82:	f995 3000 	ldrsb.w	r3, [r5]
    return (THUMB2_ADD_REG_T2) | (DN << 7) | (Rm << 3) | (rdn);
    3d86:	f3c3 01c0 	ubfx	r1, r3, #3, #1
    3d8a:	f003 0307 	and.w	r3, r3, #7
    3d8e:	ea43 11c1 	orr.w	r1, r3, r1, lsl #7
    3d92:	f441 4188 	orr.w	r1, r1, #17408	; 0x4400
    3d96:	f041 0170 	orr.w	r1, r1, #112	; 0x70
    3d9a:	f00e fdd2 	bl	12942 <emit2>
	arm_bpf_put_reg32(state, dst_lo, ARM_IP);
    3d9e:	f996 1001 	ldrsb.w	r1, [r6, #1]
    3da2:	220c      	movs	r2, #12
    3da4:	f00e fe73 	bl	12a8e <arm_bpf_put_reg32>
	arm_bpf_put_reg32(state, dst_hi, rd[0]);
    3da8:	f995 2000 	ldrsb.w	r2, [r5]
    3dac:	f996 1000 	ldrsb.w	r1, [r6]
    3db0:	4620      	mov	r0, r4
}
    3db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	arm_bpf_put_reg32(state, dst_hi, rd[0]);
    3db6:	f00e be6a 	b.w	12a8e <arm_bpf_put_reg32>
    3dba:	bf00      	nop
    3dbc:	0001a0d4 	.word	0x0001a0d4
    3dc0:	fba0c000 	.word	0xfba0c000

00003dc4 <_emit_b_cond>:
    if (!_use_b4(state) && off >= -256 && off <= 254) {
    3dc4:	6843      	ldr	r3, [r0, #4]
    3dc6:	2b14      	cmp	r3, #20
static void inline _emit_b_cond(jit_state *state, s32 off, u8 cond) {
    3dc8:	b410      	push	{r4}
    3dca:	4604      	mov	r4, r0
    if (!_use_b4(state) && off >= -256 && off <= 254) {
    3dcc:	dc0d      	bgt.n	3dea <_emit_b_cond+0x26>
    3dce:	f501 7380 	add.w	r3, r1, #256	; 0x100
    3dd2:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
    3dd6:	d808      	bhi.n	3dea <_emit_b_cond+0x26>
    u16 imm8 = (offImm9 >> 1) & 0x00ff;
    3dd8:	f3c1 0147 	ubfx	r1, r1, #1, #8
    return (THUMB2_B_COND_T1) | (cond << 8) | (imm8);
    3ddc:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
        emit2(state, _thumb16_B_T1(off, cond));
    3de0:	f441 4150 	orr.w	r1, r1, #53248	; 0xd000
}
    3de4:	bc10      	pop	{r4}
        emit2(state, _thumb16_B_T1(off, cond));
    3de6:	f00e bdac 	b.w	12942 <emit2>
    } else if (off > -1048576 && off < 1048574) {
    3dea:	f501 207f 	add.w	r0, r1, #1044480	; 0xff000
    3dee:	4b11      	ldr	r3, [pc, #68]	; (3e34 <_emit_b_cond+0x70>)
    3df0:	f600 70ff 	addw	r0, r0, #4095	; 0xfff
    3df4:	4298      	cmp	r0, r3
    3df6:	d81a      	bhi.n	3e2e <_emit_b_cond+0x6a>
    return (THUMB2_BW_COND_T3) | (S << 26) | (cond << 22) | (imm6 << 16) | (J1 << 13) | (J2 << 11) | (imm11);
    3df8:	0a0b      	lsrs	r3, r1, #8
    3dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    3dfe:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
    u32 imm11 = (offImm20 >> 1) & 0x7ff;
    3e02:	f3c1 024a 	ubfx	r2, r1, #1, #11
    return (THUMB2_BW_COND_T3) | (S << 26) | (cond << 22) | (imm6 << 16) | (J1 << 13) | (J2 << 11) | (imm11);
    3e06:	4313      	orrs	r3, r2
    u32 S = offImm20 < 0;
    3e08:	0fca      	lsrs	r2, r1, #31
    return (THUMB2_BW_COND_T3) | (S << 26) | (cond << 22) | (imm6 << 16) | (J1 << 13) | (J2 << 11) | (imm11);
    3e0a:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
    3e0e:	010a      	lsls	r2, r1, #4
    3e10:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
    3e14:	0949      	lsrs	r1, r1, #5
    3e16:	4313      	orrs	r3, r2
    3e18:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
    3e1c:	4319      	orrs	r1, r3
        emit4(state, _thumb32_BW_T3(off, cond));
    3e1e:	f041 4170 	orr.w	r1, r1, #4026531840	; 0xf0000000
    3e22:	4620      	mov	r0, r4
    3e24:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
}
    3e28:	bc10      	pop	{r4}
        emit4(state, _thumb32_BW_T3(off, cond));
    3e2a:	f00e bd94 	b.w	12956 <emit4>
}
    3e2e:	bc10      	pop	{r4}
    3e30:	4770      	bx	lr
    3e32:	bf00      	nop
    3e34:	001ffffc 	.word	0x001ffffc

00003e38 <emit_push_r64>:
static void emit_push_r64(jit_state *state, s8 src[]) {
    3e38:	b538      	push	{r3, r4, r5, lr}
    rt = arm_bpf_get_reg64(state, src, tmp2);
    3e3a:	4a19      	ldr	r2, [pc, #100]	; (3ea0 <emit_push_r64+0x68>)
static void emit_push_r64(jit_state *state, s8 src[]) {
    3e3c:	4604      	mov	r4, r0
    rt = arm_bpf_get_reg64(state, src, tmp2);
    3e3e:	f00e fdff 	bl	12a40 <arm_bpf_get_reg64>
    reg_set = (1 << rt[1]) | (1 << rt[0]);
    3e42:	f990 5001 	ldrsb.w	r5, [r0, #1]
    3e46:	f990 0000 	ldrsb.w	r0, [r0]
    3e4a:	2201      	movs	r2, #1
    3e4c:	fa02 f305 	lsl.w	r3, r2, r5
    3e50:	4082      	lsls	r2, r0
    3e52:	4313      	orrs	r3, r2
    3e54:	b29b      	uxth	r3, r3
    if ((rt[0] == ARM_LR || rt[0] < 8) && (rt[1] == ARM_LR || rt[1] < 8)) {
    3e56:	280e      	cmp	r0, #14
    3e58:	ea4f 31a3 	mov.w	r1, r3, asr #14
    3e5c:	d001      	beq.n	3e62 <emit_push_r64+0x2a>
    3e5e:	2807      	cmp	r0, #7
    3e60:	dc0f      	bgt.n	3e82 <emit_push_r64+0x4a>
    3e62:	2d0e      	cmp	r5, #14
    3e64:	d001      	beq.n	3e6a <emit_push_r64+0x32>
    3e66:	2d07      	cmp	r5, #7
    3e68:	dc0b      	bgt.n	3e82 <emit_push_r64+0x4a>
    u16 reg_list = reg_mask & 0xff;
    3e6a:	b2db      	uxtb	r3, r3
    return (THUMB2_PUSH_T1) | (M << 8) | (reg_list);
    3e6c:	f001 0101 	and.w	r1, r1, #1
    3e70:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
        emit2(state, _thumb16_PUSH_T1(reg_set));
    3e74:	4620      	mov	r0, r4
    3e76:	f441 4134 	orr.w	r1, r1, #46080	; 0xb400
}
    3e7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        emit2(state, _thumb16_PUSH_T1(reg_set));
    3e7e:	f00e bd60 	b.w	12942 <emit2>
    return (THUMB2_PUSH_W) | (M << 14) | (reg_list);
    3e82:	0389      	lsls	r1, r1, #14
    u32 reg_list = reg_mask & 0x1fff;
    3e84:	f3c3 030c 	ubfx	r3, r3, #0, #13
    return (THUMB2_PUSH_W) | (M << 14) | (reg_list);
    3e88:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
    3e8c:	4319      	orrs	r1, r3
        emit4(state, _thumb32_PUSHW_T2(reg_set));
    3e8e:	f041 4169 	orr.w	r1, r1, #3909091328	; 0xe9000000
    3e92:	4620      	mov	r0, r4
    3e94:	f441 1134 	orr.w	r1, r1, #2949120	; 0x2d0000
}
    3e98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        emit4(state, _thumb32_PUSHW_T2(reg_set));
    3e9c:	f00e bd5b 	b.w	12956 <emit4>
    3ea0:	0001a0ee 	.word	0x0001a0ee

00003ea4 <_emit_b>:
    if (off > -2048 && off < 2046) {
    3ea4:	f201 72ff 	addw	r2, r1, #2047	; 0x7ff
    3ea8:	f640 73fc 	movw	r3, #4092	; 0xffc
    3eac:	429a      	cmp	r2, r3
static void inline _emit_b(jit_state *state, s32 off) {
    3eae:	b410      	push	{r4}
    if (off > -2048 && off < 2046) {
    3eb0:	d806      	bhi.n	3ec0 <_emit_b+0x1c>
    u16 imm11 = (offImm12 >> 1) & 0x7ff;
    3eb2:	f3c1 014a 	ubfx	r1, r1, #1, #11
        emit2(state, _thumb16_B_T2(off));
    3eb6:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
}
    3eba:	bc10      	pop	{r4}
        emit2(state, _thumb16_B_T2(off));
    3ebc:	f00e bd41 	b.w	12942 <emit2>
    } else if (off > -16777216 && off < 16777214) {
    3ec0:	f101 13ff 	add.w	r3, r1, #16711935	; 0xff00ff
    3ec4:	4a12      	ldr	r2, [pc, #72]	; (3f10 <_emit_b+0x6c>)
    3ec6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    3eca:	4293      	cmp	r3, r2
    3ecc:	d81e      	bhi.n	3f0c <_emit_b+0x68>
    s32 S = offImm23 < 0;
    3ece:	0fca      	lsrs	r2, r1, #31
    s32 I2 = (offImm23 >> 19) & 0x1;
    3ed0:	f3c1 43c0 	ubfx	r3, r1, #19, #1
    s32 J2 = (~I2 ^ S) & 0x1;
    3ed4:	1a9b      	subs	r3, r3, r2
    3ed6:	425c      	negs	r4, r3
    3ed8:	415c      	adcs	r4, r3
    s32 imm11 = (offImm23 >> 1) & 0x7ff;
    3eda:	f3c1 034a 	ubfx	r3, r1, #1, #11
    return (THUMB2_BW_COND_T3) | (S << 26) | (imm10 << 16) | (J1 << 13) | (J2 << 11) | (imm11);
    3ede:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
    3ee2:	4c0c      	ldr	r4, [pc, #48]	; (3f14 <_emit_b+0x70>)
    3ee4:	ea04 1401 	and.w	r4, r4, r1, lsl #4
    s32 I1 = (offImm23 >> 18) & 0x1;
    3ee8:	f3c1 4180 	ubfx	r1, r1, #18, #1
    return (THUMB2_BW_COND_T3) | (S << 26) | (imm10 << 16) | (J1 << 13) | (J2 << 11) | (imm11);
    3eec:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
    s32 J1 = (~I1 ^ S) & 0x1;
    3ef0:	1a8a      	subs	r2, r1, r2
    3ef2:	4251      	negs	r1, r2
    return (THUMB2_BW_COND_T3) | (S << 26) | (imm10 << 16) | (J1 << 13) | (J2 << 11) | (imm11);
    3ef4:	ea43 0304 	orr.w	r3, r3, r4
    s32 J1 = (~I1 ^ S) & 0x1;
    3ef8:	4151      	adcs	r1, r2
    return (THUMB2_BW_COND_T3) | (S << 26) | (imm10 << 16) | (J1 << 13) | (J2 << 11) | (imm11);
    3efa:	ea43 3141 	orr.w	r1, r3, r1, lsl #13
        emit4(state, _thumb32_BW_T4(off));
    3efe:	f041 4170 	orr.w	r1, r1, #4026531840	; 0xf0000000
    3f02:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
}
    3f06:	bc10      	pop	{r4}
        emit4(state, _thumb32_BW_T4(off));
    3f08:	f00e bd25 	b.w	12956 <emit4>
}
    3f0c:	bc10      	pop	{r4}
    3f0e:	4770      	bx	lr
    3f10:	01fffffc 	.word	0x01fffffc
    3f14:	03ff0000 	.word	0x03ff0000

00003f18 <emit_alu32_reg.constprop.14>:
static void emit_alu32_reg(jit_state *state, const s8 dst, const s8 src, 
    3f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3f1c:	4688      	mov	r8, r1
    3f1e:	4611      	mov	r1, r2
    rn = arm_bpf_get_reg32(state, src, tmp[1]);
    3f20:	2206      	movs	r2, #6
static void emit_alu32_reg(jit_state *state, const s8 dst, const s8 src, 
    3f22:	4606      	mov	r6, r0
    3f24:	4699      	mov	r9, r3
    3f26:	f89d 7020 	ldrb.w	r7, [sp, #32]
    rn = arm_bpf_get_reg32(state, src, tmp[1]);
    3f2a:	f00e fd1e 	bl	1296a <arm_bpf_get_reg32>
    rd = arm_bpf_get_reg32(state, dst, tmp[0]);
    3f2e:	2207      	movs	r2, #7
    rn = arm_bpf_get_reg32(state, src, tmp[1]);
    3f30:	4604      	mov	r4, r0
    rd = arm_bpf_get_reg32(state, dst, tmp[0]);
    3f32:	4641      	mov	r1, r8
    3f34:	4630      	mov	r0, r6
    3f36:	f00e fd18 	bl	1296a <arm_bpf_get_reg32>
    switch (op)
    3f3a:	2f50      	cmp	r7, #80	; 0x50
    rd = arm_bpf_get_reg32(state, dst, tmp[0]);
    3f3c:	4605      	mov	r5, r0
    switch (op)
    3f3e:	d070      	beq.n	4022 <emit_alu32_reg.constprop.14+0x10a>
    3f40:	d820      	bhi.n	3f84 <emit_alu32_reg.constprop.14+0x6c>
    3f42:	2f10      	cmp	r7, #16
    3f44:	d057      	beq.n	3ff6 <emit_alu32_reg.constprop.14+0xde>
    3f46:	d808      	bhi.n	3f5a <emit_alu32_reg.constprop.14+0x42>
    3f48:	2f00      	cmp	r7, #0
    3f4a:	d042      	beq.n	3fd2 <emit_alu32_reg.constprop.14+0xba>
	arm_bpf_put_reg32(state, dst, rd);
    3f4c:	462a      	mov	r2, r5
    3f4e:	4641      	mov	r1, r8
    3f50:	4630      	mov	r0, r6
}
    3f52:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	arm_bpf_put_reg32(state, dst, rd);
    3f56:	f00e bd9a 	b.w	12a8e <arm_bpf_put_reg32>
    switch (op)
    3f5a:	2f20      	cmp	r7, #32
    3f5c:	f000 8088 	beq.w	4070 <emit_alu32_reg.constprop.14+0x158>
    3f60:	2f40      	cmp	r7, #64	; 0x40
    3f62:	d1f3      	bne.n	3f4c <emit_alu32_reg.constprop.14+0x34>
    if (dst < 8 && src < 8) {
    3f64:	2807      	cmp	r0, #7
    3f66:	dc55      	bgt.n	4014 <emit_alu32_reg.constprop.14+0xfc>
    3f68:	2c07      	cmp	r4, #7
    3f6a:	dc53      	bgt.n	4014 <emit_alu32_reg.constprop.14+0xfc>

static inline u16 _thumb16_ORR_REG_T1(s8 RDn, s8 Rm) {
    u16 RDn3 = RDn & 0b111;
    u16 Rm3 = Rm & 0b111;
    return (THUMB2_ORR_REG) | (RDn3 << 4) | (Rm3);
    3f6c:	f000 0107 	and.w	r1, r0, #7
    3f70:	f004 0407 	and.w	r4, r4, #7
    3f74:	ea44 1101 	orr.w	r1, r4, r1, lsl #4
        emit2(state, _thumb16_ORR_REG_T1(dst, src));
    3f78:	f441 4186 	orr.w	r1, r1, #17152	; 0x4300
            emit2(state, (0x4100) | (rn << 3) | (rd));
    3f7c:	4630      	mov	r0, r6
    3f7e:	f00e fce0 	bl	12942 <emit2>
    3f82:	e7e3      	b.n	3f4c <emit_alu32_reg.constprop.14+0x34>
    switch (op)
    3f84:	2f70      	cmp	r7, #112	; 0x70
    3f86:	f000 8090 	beq.w	40aa <emit_alu32_reg.constprop.14+0x192>
    3f8a:	d80f      	bhi.n	3fac <emit_alu32_reg.constprop.14+0x94>
    3f8c:	2f60      	cmp	r7, #96	; 0x60
    3f8e:	d1dd      	bne.n	3f4c <emit_alu32_reg.constprop.14+0x34>
        if (rn > 0 && rn < 8 && rd > 0 && rd < 8) {
    3f90:	1e63      	subs	r3, r4, #1
    3f92:	b2db      	uxtb	r3, r3
    3f94:	2b06      	cmp	r3, #6
    3f96:	f200 8081 	bhi.w	409c <emit_alu32_reg.constprop.14+0x184>
    3f9a:	1e43      	subs	r3, r0, #1
    3f9c:	b2db      	uxtb	r3, r3
    3f9e:	2b06      	cmp	r3, #6
    3fa0:	d87c      	bhi.n	409c <emit_alu32_reg.constprop.14+0x184>
            emit2(state, (0x4080) | (rn << 3) | (rd));
    3fa2:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3
    3fa6:	f441 4181 	orr.w	r1, r1, #16512	; 0x4080
    3faa:	e042      	b.n	4032 <emit_alu32_reg.constprop.14+0x11a>
    switch (op)
    3fac:	2fa0      	cmp	r7, #160	; 0xa0
    3fae:	d049      	beq.n	4044 <emit_alu32_reg.constprop.14+0x12c>
    3fb0:	2fc0      	cmp	r7, #192	; 0xc0
    3fb2:	d1cb      	bne.n	3f4c <emit_alu32_reg.constprop.14+0x34>
        if (rn > 0 && rn < 8 && rd > 0 && rd < 8) {
    3fb4:	1e63      	subs	r3, r4, #1
    3fb6:	b2db      	uxtb	r3, r3
    3fb8:	2b06      	cmp	r3, #6
    3fba:	f200 8089 	bhi.w	40d0 <emit_alu32_reg.constprop.14+0x1b8>
    3fbe:	1e43      	subs	r3, r0, #1
    3fc0:	b2db      	uxtb	r3, r3
    3fc2:	2b06      	cmp	r3, #6
    3fc4:	f200 8084 	bhi.w	40d0 <emit_alu32_reg.constprop.14+0x1b8>
            emit2(state, (0x4100) | (rn << 3) | (rd));
    3fc8:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3
    3fcc:	f441 4182 	orr.w	r1, r1, #16640	; 0x4100
    3fd0:	e02f      	b.n	4032 <emit_alu32_reg.constprop.14+0x11a>
        if (hi) { // ADC should not update flag
    3fd2:	0421      	lsls	r1, r4, #16
    3fd4:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    3fd8:	4301      	orrs	r1, r0
            emit4(state, inst);
    3fda:	f041 416b 	orr.w	r1, r1, #3942645760	; 0xeb000000
        if (hi) { // ADC should not update flag
    3fde:	f1b9 0f00 	cmp.w	r9, #0
    3fe2:	d002      	beq.n	3fea <emit_alu32_reg.constprop.14+0xd2>
        emit4(state, _thumb32_ORRW_REG_T2(dst, dst, src, 0, SRTYPE_ASL, FLAG_NOS));
    3fe4:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    3fe8:	e001      	b.n	3fee <emit_alu32_reg.constprop.14+0xd6>
            emit4(state, inst);
    3fea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
            emit4(state, _thumb32_ASRW_REG_T2(rd, rd, rn, FLAG_NOS));
    3fee:	4630      	mov	r0, r6
    3ff0:	f00e fcb1 	bl	12956 <emit4>
    3ff4:	e7aa      	b.n	3f4c <emit_alu32_reg.constprop.14+0x34>
    if (is64 && !hi) { // subs.w
    3ff6:	0201      	lsls	r1, r0, #8
    3ff8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    3ffc:	4321      	orrs	r1, r4
        emit4(state, _thumb32_SUB_REG_T2(dst, dst, src, 0, SRTYPE_LSL, FLAG_S));
    3ffe:	f041 416b 	orr.w	r1, r1, #3942645760	; 0xeb000000
    if (is64 && !hi) { // subs.w
    4002:	f1b9 0f00 	cmp.w	r9, #0
    4006:	d102      	bne.n	400e <emit_alu32_reg.constprop.14+0xf6>
        emit4(state, _thumb32_SUB_REG_T2(dst, dst, src, 0, SRTYPE_LSL, FLAG_S));
    4008:	f441 0130 	orr.w	r1, r1, #11534336	; 0xb00000
    400c:	e7ef      	b.n	3fee <emit_alu32_reg.constprop.14+0xd6>
        emit4(state, _thumb32_SBCW_T2(dst, dst, src, 0, SRTYPE_LSL, FLAG_NOS));
    400e:	f441 01c0 	orr.w	r1, r1, #6291456	; 0x600000
    4012:	e7ec      	b.n	3fee <emit_alu32_reg.constprop.14+0xd6>
        return -1;
    }
    u32 imm3 = (shiftImm5 >> 2) & 0b111;
    u32 imm2 = shiftImm5 & 0b11; 
    u32 inst = (THUMB2_ORRW_REG) | (flagS << 20) | (Rn << 16) | (imm3 << 12)
             | (Rd << 8) | (imm2 << 6) | (srtype << 4) | (Rm); 
    4014:	0229      	lsls	r1, r5, #8
    4016:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    401a:	4321      	orrs	r1, r4
        emit4(state, _thumb32_ORRW_REG_T2(dst, dst, src, 0, SRTYPE_ASL, FLAG_NOS));
    401c:	f041 416a 	orr.w	r1, r1, #3925868544	; 0xea000000
    4020:	e7e0      	b.n	3fe4 <emit_alu32_reg.constprop.14+0xcc>
    if (dst < 8 && src < 8) {
    4022:	2807      	cmp	r0, #7
    4024:	dc07      	bgt.n	4036 <emit_alu32_reg.constprop.14+0x11e>
    4026:	2c07      	cmp	r4, #7
    4028:	dc05      	bgt.n	4036 <emit_alu32_reg.constprop.14+0x11e>
    return (THUMB2_AND_REG_T1) | (Rm << 3) | (RDn);
    402a:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3
    402e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
            emit2(state, (0x4100) | (rn << 3) | (rd));
    4032:	b289      	uxth	r1, r1
    4034:	e7a2      	b.n	3f7c <emit_alu32_reg.constprop.14+0x64>
    return (THUMB2_AND_REG_T2) | (flagS << 20) | (Rn << 16) | (imm3 << 12) | (Rd << 8) | 
    4036:	0229      	lsls	r1, r5, #8
    4038:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
        (imm2 << 6) | (srtype << 4) | (Rm);
    403c:	4321      	orrs	r1, r4
        emit4(state, _thumb32_AND_REG_T2(dst, dst, src, 0, SRTYPE_ASL, FLAG_NOS));
    403e:	f041 416a 	orr.w	r1, r1, #3925868544	; 0xea000000
    4042:	e7d4      	b.n	3fee <emit_alu32_reg.constprop.14+0xd6>
        if (rn > 0 && rn < 8 && rd > 0 && rd < 8) {
    4044:	1e63      	subs	r3, r4, #1
    4046:	b2db      	uxtb	r3, r3
    4048:	2b06      	cmp	r3, #6
    404a:	d80a      	bhi.n	4062 <emit_alu32_reg.constprop.14+0x14a>
    404c:	1e43      	subs	r3, r0, #1
    404e:	b2db      	uxtb	r3, r3
    4050:	2b06      	cmp	r3, #6
    4052:	d806      	bhi.n	4062 <emit_alu32_reg.constprop.14+0x14a>
            emit2(state, (0x4040) | (rn << 3) | (rd));
    4054:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3
    4058:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
            emit2(state, (0x40c0) | (rn << 3) | (rd));
    405c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    4060:	e7e7      	b.n	4032 <emit_alu32_reg.constprop.14+0x11a>
             | (Rd << 8) | (imm2 << 6) | (srtype << 4) | (Rm); 
    4062:	0229      	lsls	r1, r5, #8
    4064:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
            emit4(state, _thumb32_EOR_REG_T2(rd, rn, rd, 0, SRTYPE_ROR, FLAG_NOS));
    4068:	491c      	ldr	r1, [pc, #112]	; (40dc <emit_alu32_reg.constprop.14+0x1c4>)
    406a:	432c      	orrs	r4, r5
            emit4(state, _thumb32_ASRW_REG_T2(rd, rd, rn, FLAG_NOS));
    406c:	4321      	orrs	r1, r4
    406e:	e7be      	b.n	3fee <emit_alu32_reg.constprop.14+0xd6>
        if (rn > 0 && rn < 8 && rd > 0 && rd < 8) {
    4070:	1e63      	subs	r3, r4, #1
    4072:	b2db      	uxtb	r3, r3
    4074:	2b06      	cmp	r3, #6
    4076:	d808      	bhi.n	408a <emit_alu32_reg.constprop.14+0x172>
    4078:	1e43      	subs	r3, r0, #1
    407a:	b2db      	uxtb	r3, r3
    407c:	2b06      	cmp	r3, #6
    407e:	d804      	bhi.n	408a <emit_alu32_reg.constprop.14+0x172>
            emit2(state, (0x4340) | (rn << 3) | (rd));
    4080:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3
    4084:	f441 4186 	orr.w	r1, r1, #17152	; 0x4300
    4088:	e7e8      	b.n	405c <emit_alu32_reg.constprop.14+0x144>
    return (THUMB2_MUL_REG_T2) | (Rn << 16) | (Rd << 8) | (Rm);
    408a:	0229      	lsls	r1, r5, #8
    408c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
    4090:	4329      	orrs	r1, r5
            emit4(state, _thumb32_MUL_REG_T2(rd, rn, rd));
    4092:	f041 417b 	orr.w	r1, r1, #4211081216	; 0xfb000000
            emit4(state, _thumb32_LSLW_REG_T2(rd, rd, rn, FLAG_NOS));
    4096:	f441 4170 	orr.w	r1, r1, #61440	; 0xf000
    409a:	e7a8      	b.n	3fee <emit_alu32_reg.constprop.14+0xd6>
    return (THUMB2_LSLW_REG_T2) | (flagS << 20) | (Rn << 16) | (Rd << 8) | (Rm);
    409c:	0229      	lsls	r1, r5, #8
    409e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    40a2:	4321      	orrs	r1, r4
    40a4:	f041 417a 	orr.w	r1, r1, #4194304000	; 0xfa000000
    40a8:	e7f5      	b.n	4096 <emit_alu32_reg.constprop.14+0x17e>
        if (rn > 0 && rn < 8 && rd > 0 && rd < 8) {
    40aa:	1e63      	subs	r3, r4, #1
    40ac:	b2db      	uxtb	r3, r3
    40ae:	2b06      	cmp	r3, #6
    40b0:	d808      	bhi.n	40c4 <emit_alu32_reg.constprop.14+0x1ac>
    40b2:	1e43      	subs	r3, r0, #1
    40b4:	b2db      	uxtb	r3, r3
    40b6:	2b06      	cmp	r3, #6
    40b8:	d804      	bhi.n	40c4 <emit_alu32_reg.constprop.14+0x1ac>
            emit2(state, (0x40c0) | (rn << 3) | (rd));
    40ba:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3
    40be:	f441 4181 	orr.w	r1, r1, #16512	; 0x4080
    40c2:	e7cb      	b.n	405c <emit_alu32_reg.constprop.14+0x144>
    return (THUMB2_LSRW_REG) | (flagS << 20) | (Rn << 16) | (Rd << 8) | (Rm);
    40c4:	0229      	lsls	r1, r5, #8
    40c6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    40ca:	430c      	orrs	r4, r1
            emit4(state, _thumb32_LSRW_REG_T2(rd, rd, rn, FLAG_NOS));
    40cc:	4904      	ldr	r1, [pc, #16]	; (40e0 <emit_alu32_reg.constprop.14+0x1c8>)
    40ce:	e7cd      	b.n	406c <emit_alu32_reg.constprop.14+0x154>
    return (THUMB2_ASRW_REG) | (flagS << 20) | (Rn << 16) | (Rd << 8) | (Rm);
    40d0:	0229      	lsls	r1, r5, #8
    40d2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    40d6:	430c      	orrs	r4, r1
            emit4(state, _thumb32_ASRW_REG_T2(rd, rd, rn, FLAG_NOS));
    40d8:	4902      	ldr	r1, [pc, #8]	; (40e4 <emit_alu32_reg.constprop.14+0x1cc>)
    40da:	e7c7      	b.n	406c <emit_alu32_reg.constprop.14+0x154>
    40dc:	ea800030 	.word	0xea800030
    40e0:	fa20f000 	.word	0xfa20f000
    40e4:	fa40f000 	.word	0xfa40f000

000040e8 <build_prologue>:
 *
 * When popping registers off the stack at the end of a BPF function, we
 * reference them via the current ARM_FP register.
 */
// init eBPF stack and args
static void build_prologue(jit_state *state) {
    40e8:	b510      	push	{r4, lr}
	const s8 *bpf_fp = bpf2a32[BPF_REG_FP];
    // 1. set stack SP to r10, USE SP
    // emit(ARM_PUSH(CALLEE_PUSH_MASK), ctx);
    // emit(ARM_MOV_R(ARM_FP, ARM_SP), ctx);
    // push {r4-r9, lr} , r4-r9, lr in used. aligned -> 8 reg
    emit4(state, _thumb32_PUSHW_T2(CALLEE_PUSH_MASK));
    40ea:	4910      	ldr	r1, [pc, #64]	; (412c <build_prologue+0x44>)
static void build_prologue(jit_state *state) {
    40ec:	4604      	mov	r4, r0
    emit4(state, _thumb32_PUSHW_T2(CALLEE_PUSH_MASK));
    40ee:	f00e fc32 	bl	12956 <emit4>
    emit4(state, _thumb32_MOVW_REG_T3(dst, src, FLAG_NOS));
    40f2:	490f      	ldr	r1, [pc, #60]	; (4130 <build_prologue+0x48>)
    40f4:	f00e fc2f 	bl	12956 <emit4>
        emit2(state, inst);
    40f8:	f44f 510c 	mov.w	r1, #8960	; 0x2300
    40fc:	f00e fc21 	bl	12942 <emit2>
    emit4(state, _thumb32_SUBW_IMM_T4(dst, src, val, FLAG_NOS));
    4100:	490c      	ldr	r1, [pc, #48]	; (4134 <build_prologue+0x4c>)
    4102:	f00e fc28 	bl	12956 <emit4>
    4106:	490c      	ldr	r1, [pc, #48]	; (4138 <build_prologue+0x50>)
    4108:	f00e fc25 	bl	12956 <emit4>
    if (!is64) {
    410c:	490b      	ldr	r1, [pc, #44]	; (413c <build_prologue+0x54>)
    410e:	1c8a      	adds	r2, r1, #2
    4110:	3114      	adds	r1, #20
    4112:	f7ff fdaf 	bl	3c74 <emit_mov_reg64.part.7>
        emit2(state, _thumb16_MOV_REG_T1(dst, src));
    4116:	f244 6102 	movw	r1, #17922	; 0x4602
    411a:	4620      	mov	r0, r4
    411c:	f00e fc11 	bl	12942 <emit2>
        emit2(state, inst);
    4120:	f44f 510c 	mov.w	r1, #8960	; 0x2300
	// emit_a32_mov_r64(state, true, bpf_fp, bpf_r1);
    emit_mov_reg64(state, true, bpf_fp, bpf_r1);
    // 3. mov arm_r0 to BPF_R1
    _emit_mov_reg(state, ARM_R0, bpf_r1[1]);
    emit_mov_imm(state, bpf_r1[0], 0);
}
    4124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        emit2(state, inst);
    4128:	f00e bc0b 	b.w	12942 <emit2>
    412c:	e92d4bf0 	.word	0xe92d4bf0
    4130:	ea4f0b0d 	.word	0xea4f0b0d
    4134:	f2ad0250 	.word	0xf2ad0250
    4138:	f2ad1d00 	.word	0xf2ad1d00
    413c:	0001a0d4 	.word	0x0001a0d4

00004140 <emit_str_reg>:
static void emit_str_reg(jit_state *state, const s8 dst, const s8 src[], s16 off, const u8 sz) {
    4140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4144:	4616      	mov	r6, r2
    s8 rd = arm_bpf_get_reg32(state, dst, tmp[1]);
    4146:	2206      	movs	r2, #6
static void emit_str_reg(jit_state *state, const s8 dst, const s8 src[], s16 off, const u8 sz) {
    4148:	461c      	mov	r4, r3
    414a:	f89d 8018 	ldrb.w	r8, [sp, #24]
    414e:	4605      	mov	r5, r0
    s8 rd = arm_bpf_get_reg32(state, dst, tmp[1]);
    4150:	f00e fc0b 	bl	1296a <arm_bpf_get_reg32>
    4154:	4b2d      	ldr	r3, [pc, #180]	; (420c <emit_str_reg+0xcc>)
    4156:	f933 3018 	ldrsh.w	r3, [r3, r8, lsl #1]
	return -off_max <= off && off <= off_max;
    415a:	425a      	negs	r2, r3
    415c:	42a2      	cmp	r2, r4
    s8 rd = arm_bpf_get_reg32(state, dst, tmp[1]);
    415e:	4607      	mov	r7, r0
	return -off_max <= off && off <= off_max;
    4160:	dc01      	bgt.n	4166 <emit_str_reg+0x26>
    if (!is_ldst_imm(off, sz)) {
    4162:	429c      	cmp	r4, r3
    4164:	dd0e      	ble.n	4184 <emit_str_reg+0x44>
        emit_mov_imm(state, tmp[0], off);
    4166:	4622      	mov	r2, r4
    4168:	2107      	movs	r1, #7
    416a:	4628      	mov	r0, r5
    416c:	f00e fccc 	bl	12b08 <emit_mov_imm>
    return (THUMB2_ADD_REG_T2) | (DN << 7) | (Rm << 3) | (rdn);
    4170:	f244 4107 	movw	r1, #17415	; 0x4407
    4174:	ea41 01c7 	orr.w	r1, r1, r7, lsl #3
        emit2(state, _thumb16_ADD_REG_T2(dst, src));
    4178:	b289      	uxth	r1, r1
    417a:	4628      	mov	r0, r5
    417c:	f00e fbe1 	bl	12942 <emit2>
        rd = tmp[0];
    4180:	2707      	movs	r7, #7
        off = 0;
    4182:	2400      	movs	r4, #0
    switch (sz) {
    4184:	f1b8 0f08 	cmp.w	r8, #8
    4188:	d02b      	beq.n	41e2 <emit_str_reg+0xa2>
    418a:	d804      	bhi.n	4196 <emit_str_reg+0x56>
    418c:	f1b8 0f00 	cmp.w	r8, #0
    4190:	d033      	beq.n	41fa <emit_str_reg+0xba>
}
    4192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (sz) {
    4196:	f1b8 0f10 	cmp.w	r8, #16
    419a:	d00f      	beq.n	41bc <emit_str_reg+0x7c>
    419c:	f1b8 0f18 	cmp.w	r8, #24
    41a0:	d1f7      	bne.n	4192 <emit_str_reg+0x52>
        _emit_str_i(state, src_lo, rd, off);
    41a2:	4623      	mov	r3, r4
    41a4:	463a      	mov	r2, r7
    41a6:	f996 1001 	ldrsb.w	r1, [r6, #1]
    41aa:	4628      	mov	r0, r5
    41ac:	f00e fbe8 	bl	12980 <_emit_str_i>
        _emit_str_i(state, src_hi, rd, off + 4);
    41b0:	1d23      	adds	r3, r4, #4
    41b2:	b21b      	sxth	r3, r3
    41b4:	463a      	mov	r2, r7
    41b6:	f996 1000 	ldrsb.w	r1, [r6]
    41ba:	e022      	b.n	4202 <emit_str_reg+0xc2>
    u32 imm8 = offImm8 > 0 ? offImm8 : -offImm8;
    41bc:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
    41c0:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
    u32 inst = (THUMB2_STRB_IMM_T3) | (Rn << 16) | (Rt << 12) | (flag << 8) | (imm8);
    41c4:	f996 4001 	ldrsb.w	r4, [r6, #1]
    41c8:	ea41 3107 	orr.w	r1, r1, r7, lsl #12
    41cc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
        emit4(state, _thumb32_STRB_IMM_T3(src_lo, rd, off));
    41d0:	f041 4178 	orr.w	r1, r1, #4160749568	; 0xf8000000
    41d4:	f441 6170 	orr.w	r1, r1, #3840	; 0xf00
        emit4(state, _thumb32_STRH_IMM_T3(src_lo, rd, off));
    41d8:	4628      	mov	r0, r5
}
    41da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        emit4(state, _thumb32_STRH_IMM_T3(src_lo, rd, off));
    41de:	f00e bbba 	b.w	12956 <emit4>
    u32 imm8 = offImm8 > 0 ? offImm8 : -offImm8;
    41e2:	2c00      	cmp	r4, #0
    u32 inst = (THUMB2_STRH_IMM_T3) | (Rn << 16) | (Rt << 12) | (flag << 8) | (imm8);
    41e4:	f996 1001 	ldrsb.w	r1, [r6, #1]
    u32 imm8 = offImm8 > 0 ? offImm8 : -offImm8;
    41e8:	bfb8      	it	lt
    41ea:	4264      	neglt	r4, r4
    u32 inst = (THUMB2_STRH_IMM_T3) | (Rn << 16) | (Rt << 12) | (flag << 8) | (imm8);
    41ec:	ea44 3407 	orr.w	r4, r4, r7, lsl #12
    41f0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
    41f4:	4906      	ldr	r1, [pc, #24]	; (4210 <emit_str_reg+0xd0>)
    41f6:	4321      	orrs	r1, r4
    41f8:	e7ee      	b.n	41d8 <emit_str_reg+0x98>
        _emit_str_i(state, src_lo, rd, off);
    41fa:	f996 1001 	ldrsb.w	r1, [r6, #1]
    41fe:	4623      	mov	r3, r4
    4200:	463a      	mov	r2, r7
        _emit_str_i(state, src_hi, rd, off + 4);
    4202:	4628      	mov	r0, r5
}
    4204:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        _emit_str_i(state, src_hi, rd, off + 4);
    4208:	f00e bbba 	b.w	12980 <_emit_str_i>
    420c:	00019720 	.word	0x00019720
    4210:	f8200f00 	.word	0xf8200f00

00004214 <jit_dump_inst>:
void jit_dump_inst(jit_state *state) {
    4214:	b570      	push	{r4, r5, r6, lr}
    4216:	4605      	mov	r5, r0
    DEBUG_LOG("\nDecode:\n");
    4218:	4809      	ldr	r0, [pc, #36]	; (4240 <jit_dump_inst+0x2c>)
        DEBUG_LOG("%02x", state->jit_code[i]);
    421a:	4e0a      	ldr	r6, [pc, #40]	; (4244 <jit_dump_inst+0x30>)
    DEBUG_LOG("\nDecode:\n");
    421c:	f00d f957 	bl	114ce <debug_log>
    for (int i = 0; i < state->idx; i++) {
    4220:	2400      	movs	r4, #0
    4222:	692b      	ldr	r3, [r5, #16]
    4224:	42a3      	cmp	r3, r4
    4226:	dc04      	bgt.n	4232 <jit_dump_inst+0x1e>
    DEBUG_LOG("\n");
    4228:	4807      	ldr	r0, [pc, #28]	; (4248 <jit_dump_inst+0x34>)
}
    422a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    DEBUG_LOG("\n");
    422e:	f00d b94e 	b.w	114ce <debug_log>
        DEBUG_LOG("%02x", state->jit_code[i]);
    4232:	68ab      	ldr	r3, [r5, #8]
    4234:	4630      	mov	r0, r6
    4236:	5d19      	ldrb	r1, [r3, r4]
    4238:	f00d f949 	bl	114ce <debug_log>
    for (int i = 0; i < state->idx; i++) {
    423c:	3401      	adds	r4, #1
    423e:	e7f0      	b.n	4222 <jit_dump_inst+0xe>
    4240:	0001a12a 	.word	0x0001a12a
    4244:	0001a134 	.word	0x0001a134
    4248:	00019f0b 	.word	0x00019f0b

0000424c <emit_alu64_reg>:
void emit_alu64_reg(jit_state *state, bool is64, const s8 dst[], const s8 src[], const u8 op) {
    424c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4250:	4617      	mov	r7, r2
    4252:	4688      	mov	r8, r1
	const s8 *rd = arm_bpf_get_reg64(state, dst, tmp);
    4254:	4a1b      	ldr	r2, [pc, #108]	; (42c4 <emit_alu64_reg+0x78>)
void emit_alu64_reg(jit_state *state, bool is64, const s8 dst[], const s8 src[], const u8 op) {
    4256:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
	const s8 *rd = arm_bpf_get_reg64(state, dst, tmp);
    425a:	4639      	mov	r1, r7
void emit_alu64_reg(jit_state *state, bool is64, const s8 dst[], const s8 src[], const u8 op) {
    425c:	4604      	mov	r4, r0
    425e:	4699      	mov	r9, r3
	const s8 *rd = arm_bpf_get_reg64(state, dst, tmp);
    4260:	f00e fbee 	bl	12a40 <arm_bpf_get_reg64>
    4264:	4605      	mov	r5, r0
    if (is64) {
    4266:	f1b8 0f00 	cmp.w	r8, #0
    426a:	d01f      	beq.n	42ac <emit_alu64_reg+0x60>
        const s8 *rs = arm_bpf_get_reg64(state, src, tmp2);
    426c:	4a16      	ldr	r2, [pc, #88]	; (42c8 <emit_alu64_reg+0x7c>)
    426e:	4649      	mov	r1, r9
    4270:	4620      	mov	r0, r4
    4272:	f00e fbe5 	bl	12a40 <arm_bpf_get_reg64>
    4276:	4680      	mov	r8, r0
        emit_alu32_reg(state, rd[1], rs[1], true, false, op);
    4278:	f990 2001 	ldrsb.w	r2, [r0, #1]
    427c:	f995 1001 	ldrsb.w	r1, [r5, #1]
    4280:	9600      	str	r6, [sp, #0]
    4282:	2300      	movs	r3, #0
    4284:	4620      	mov	r0, r4
    4286:	f7ff fe47 	bl	3f18 <emit_alu32_reg.constprop.14>
        emit_alu32_reg(state, rd[0], rs[0], true, true, op);
    428a:	f998 2000 	ldrsb.w	r2, [r8]
    428e:	f995 1000 	ldrsb.w	r1, [r5]
    4292:	9600      	str	r6, [sp, #0]
    4294:	2301      	movs	r3, #1
        emit_alu32_reg(state, rd[1], rs, true, false, op);
    4296:	4620      	mov	r0, r4
    4298:	f7ff fe3e 	bl	3f18 <emit_alu32_reg.constprop.14>
    arm_bpf_put_reg64(state, dst, rd);
    429c:	462a      	mov	r2, r5
    429e:	4639      	mov	r1, r7
    42a0:	4620      	mov	r0, r4
}
    42a2:	b003      	add	sp, #12
    42a4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    arm_bpf_put_reg64(state, dst, rd);
    42a8:	f00e bc0f 	b.w	12aca <arm_bpf_put_reg64>
        s8 rs = arm_bpf_get_reg32(state, src_lo, tmp2[1]);
    42ac:	2208      	movs	r2, #8
    42ae:	f999 1001 	ldrsb.w	r1, [r9, #1]
    42b2:	4620      	mov	r0, r4
    42b4:	f00e fb59 	bl	1296a <arm_bpf_get_reg32>
        emit_alu32_reg(state, rd[1], rs, true, false, op);
    42b8:	f995 1001 	ldrsb.w	r1, [r5, #1]
    42bc:	9600      	str	r6, [sp, #0]
    42be:	4643      	mov	r3, r8
    42c0:	4602      	mov	r2, r0
    42c2:	e7e8      	b.n	4296 <emit_alu64_reg+0x4a>
    42c4:	0001a0ec 	.word	0x0001a0ec
    42c8:	0001a0ee 	.word	0x0001a0ee

000042cc <_emit_lsh64_reg>:
void _emit_lsh64_reg(jit_state *state, const s8 dst[], const s8 src[]) {
    42cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    42d0:	460f      	mov	r7, r1
    rt = arm_bpf_get_reg32(state, src_lo, tmp2[1]);
    42d2:	f992 1001 	ldrsb.w	r1, [r2, #1]
    inst = (THUMB2_LSLW_REG_T2) | (rd[0] << 16) | (tmp2[0] << 8) | (rt);
    42d6:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 4384 <_emit_lsh64_reg+0xb8>
    emit4(state, inst);
    42da:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 4388 <_emit_lsh64_reg+0xbc>
    rt = arm_bpf_get_reg32(state, src_lo, tmp2[1]);
    42de:	2208      	movs	r2, #8
void _emit_lsh64_reg(jit_state *state, const s8 dst[], const s8 src[]) {
    42e0:	4604      	mov	r4, r0
    rt = arm_bpf_get_reg32(state, src_lo, tmp2[1]);
    42e2:	f00e fb42 	bl	1296a <arm_bpf_get_reg32>
    rd = arm_bpf_get_reg64(state, dst, tmp);
    42e6:	4a22      	ldr	r2, [pc, #136]	; (4370 <_emit_lsh64_reg+0xa4>)
    rt = arm_bpf_get_reg32(state, src_lo, tmp2[1]);
    42e8:	4605      	mov	r5, r0
    rd = arm_bpf_get_reg64(state, dst, tmp);
    42ea:	4639      	mov	r1, r7
    42ec:	4620      	mov	r0, r4
    42ee:	f00e fba7 	bl	12a40 <arm_bpf_get_reg64>
    emit4(state, inst);
    42f2:	4920      	ldr	r1, [pc, #128]	; (4374 <_emit_lsh64_reg+0xa8>)
    rd = arm_bpf_get_reg64(state, dst, tmp);
    42f4:	4606      	mov	r6, r0
    u32 inst = (0xf1a00000) | (i << 26) | (rt << 16) | (imm3 << 12) | (ARM_IP << 8) | imm8;
    42f6:	ea4f 4a05 	mov.w	sl, r5, lsl #16
    emit4(state, inst);
    42fa:	4620      	mov	r0, r4
    42fc:	ea4a 0101 	orr.w	r1, sl, r1
    4300:	f00e fb29 	bl	12956 <emit4>
    inst = (THUMB2_LSLW_REG_T2) | (rd[0] << 16) | (tmp2[0] << 8) | (rt);
    4304:	f996 1000 	ldrsb.w	r1, [r6]
    4308:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
    emit4(state, inst);
    430c:	ea41 0108 	orr.w	r1, r1, r8
    4310:	f00e fb21 	bl	12956 <emit4>
    emit4(state, inst);
    4314:	4b18      	ldr	r3, [pc, #96]	; (4378 <_emit_lsh64_reg+0xac>)
    inst = (THUMB2_LSLW_REG_T2) | (rd[1] << 16) | (ARM_IP << 8) | (ARM_IP);
    4316:	f996 1001 	ldrsb.w	r1, [r6, #1]
    emit4(state, inst);
    431a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    431e:	f00e fb1a 	bl	12956 <emit4>
    emit4(state, inst);
    4322:	4649      	mov	r1, r9
    4324:	f00e fb17 	bl	12956 <emit4>
    emit4(state, inst);
    4328:	4914      	ldr	r1, [pc, #80]	; (437c <_emit_lsh64_reg+0xb0>)
    432a:	ea4a 0101 	orr.w	r1, sl, r1
    432e:	f00e fb12 	bl	12956 <emit4>
    emit4(state, inst);
    4332:	4b13      	ldr	r3, [pc, #76]	; (4380 <_emit_lsh64_reg+0xb4>)
    inst = (THUMB2_LSLW_REG_T2) | (rd[1] << 16) | (tmp2[0] << 8) | (tmp2[0]);
    4334:	f996 1001 	ldrsb.w	r1, [r6, #1]
    emit4(state, inst);
    4338:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    433c:	f00e fb0b 	bl	12956 <emit4>
    emit4(state, inst);
    4340:	4649      	mov	r1, r9
    4342:	f00e fb08 	bl	12956 <emit4>
    inst = (THUMB2_LSLW_REG_T2) | (rd[1] << 16) | (tmp2[0] << 8) | (rt);
    4346:	f996 1001 	ldrsb.w	r1, [r6, #1]
    434a:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
    emit4(state, inst);
    434e:	ea41 0108 	orr.w	r1, r1, r8
    4352:	f00e fb00 	bl	12956 <emit4>
	arm_bpf_put_reg32(state, dst_lo, tmp2[0]);
    4356:	f997 1001 	ldrsb.w	r1, [r7, #1]
    435a:	2209      	movs	r2, #9
    435c:	f00e fb97 	bl	12a8e <arm_bpf_put_reg32>
	arm_bpf_put_reg32(state, dst_hi, ARM_IP);
    4360:	f997 1000 	ldrsb.w	r1, [r7]
    4364:	4620      	mov	r0, r4
    4366:	220c      	movs	r2, #12
}
    4368:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	arm_bpf_put_reg32(state, dst_hi, ARM_IP);
    436c:	f00e bb8f 	b.w	12a8e <arm_bpf_put_reg32>
    4370:	0001a0ec 	.word	0x0001a0ec
    4374:	f1a00c20 	.word	0xf1a00c20
    4378:	fa00fc0c 	.word	0xfa00fc0c
    437c:	f1c00920 	.word	0xf1c00920
    4380:	fa00f909 	.word	0xfa00f909
    4384:	fa00f900 	.word	0xfa00f900
    4388:	ea490c0c 	.word	0xea490c0c

0000438c <_emit_lsh64_imm>:
void _emit_lsh64_imm(jit_state *state, const s8 dst[], const u16 val) {
    438c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    438e:	4614      	mov	r4, r2
	rd = arm_bpf_get_reg64(state, dst, tmp);
    4390:	4a2a      	ldr	r2, [pc, #168]	; (443c <_emit_lsh64_imm+0xb0>)
void _emit_lsh64_imm(jit_state *state, const s8 dst[], const u16 val) {
    4392:	4605      	mov	r5, r0
    4394:	460f      	mov	r7, r1
	rd = arm_bpf_get_reg64(state, dst, tmp);
    4396:	f00e fb53 	bl	12a40 <arm_bpf_get_reg64>
    if (val < 32) {
    439a:	2c1f      	cmp	r4, #31
	rd = arm_bpf_get_reg64(state, dst, tmp);
    439c:	4606      	mov	r6, r0
    if (val < 32) {
    439e:	f990 2000 	ldrsb.w	r2, [r0]
    43a2:	d830      	bhi.n	4406 <_emit_lsh64_imm+0x7a>
        u32 inst = (0xea5f0000) | (imm3 << 12) | (tmp2[0] << 8) | (imm2 << 4) | (rd[0]);  
    43a4:	f004 0103 	and.w	r1, r4, #3
        u16 imm3 = (val & 0b11100) >> 2;
    43a8:	10a3      	asrs	r3, r4, #2
        u32 inst = (0xea5f0000) | (imm3 << 12) | (tmp2[0] << 8) | (imm2 << 4) | (rd[0]);  
    43aa:	0109      	lsls	r1, r1, #4
    43ac:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
    43b0:	430a      	orrs	r2, r1
        emit4(state, inst);
    43b2:	4923      	ldr	r1, [pc, #140]	; (4440 <_emit_lsh64_imm+0xb4>)
    43b4:	4628      	mov	r0, r5
    43b6:	4311      	orrs	r1, r2
    43b8:	f00e facd 	bl	12956 <emit4>
        imm2 = ((32 - val) & 0b11);
    43bc:	4263      	negs	r3, r4
        inst = (0xea500010) | (tmp2[0] << 16) | (imm3 << 12) | (rd[0] << 8) | (imm2 << 6) | (rd[1]);
    43be:	f003 0203 	and.w	r2, r3, #3
    43c2:	f996 3000 	ldrsb.w	r3, [r6]
        emit4(state, inst);
    43c6:	491f      	ldr	r1, [pc, #124]	; (4444 <_emit_lsh64_imm+0xb8>)
        inst = (0xea500010) | (tmp2[0] << 16) | (imm3 << 12) | (rd[0] << 8) | (imm2 << 6) | (rd[1]);
    43c8:	021b      	lsls	r3, r3, #8
    43ca:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
        imm3 = ((32 - val) & 0b11100) >> 2;
    43ce:	f1c4 0220 	rsb	r2, r4, #32
        inst = (0xea500010) | (tmp2[0] << 16) | (imm3 << 12) | (rd[0] << 8) | (imm2 << 6) | (rd[1]);
    43d2:	f3c2 0282 	ubfx	r2, r2, #2, #3
    43d6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
    43da:	f996 2001 	ldrsb.w	r2, [r6, #1]
    43de:	4313      	orrs	r3, r2
        emit4(state, inst);
    43e0:	4319      	orrs	r1, r3
    43e2:	f00e fab8 	bl	12956 <emit4>
        emit2(state, (0x0000) | (val << 6) | (rd[1]<< 3) | (rd[1]));
    43e6:	f996 1001 	ldrsb.w	r1, [r6, #1]
    43ea:	ea41 1484 	orr.w	r4, r1, r4, lsl #6
    43ee:	ea44 01c1 	orr.w	r1, r4, r1, lsl #3
        emit2(state, (0x4040) | (rd[1] << 3) | (rd[1]));
    43f2:	b289      	uxth	r1, r1
    43f4:	4628      	mov	r0, r5
    43f6:	f00e faa4 	bl	12942 <emit2>
    arm_bpf_put_reg64(state, dst, rd);
    43fa:	4632      	mov	r2, r6
    43fc:	4639      	mov	r1, r7
}
    43fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    arm_bpf_put_reg64(state, dst, rd);
    4402:	f00e bb62 	b.w	12aca <arm_bpf_put_reg64>
        if (val == 32) { // 0
    4406:	2c20      	cmp	r4, #32
    4408:	f990 1001 	ldrsb.w	r1, [r0, #1]
    440c:	d10b      	bne.n	4426 <_emit_lsh64_imm+0x9a>
            _emit_mov_reg(state, rd[1], rd[0]);
    440e:	4628      	mov	r0, r5
    4410:	f00e fb22 	bl	12a58 <_emit_mov_reg>
        emit2(state, (0x4040) | (rd[1] << 3) | (rd[1]));
    4414:	f996 1001 	ldrsb.w	r1, [r6, #1]
    4418:	ea41 01c1 	orr.w	r1, r1, r1, lsl #3
    441c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
    4420:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    4424:	e7e5      	b.n	43f2 <_emit_lsh64_imm+0x66>
            emit2(state, (0x0000) | ((val - 32) << 6) | (rd[1] << 3) | (rd[0]));
    4426:	3c20      	subs	r4, #32
    4428:	ea42 1484 	orr.w	r4, r2, r4, lsl #6
    442c:	ea44 01c1 	orr.w	r1, r4, r1, lsl #3
    4430:	b289      	uxth	r1, r1
    4432:	4628      	mov	r0, r5
    4434:	f00e fa85 	bl	12942 <emit2>
    4438:	e7ec      	b.n	4414 <_emit_lsh64_imm+0x88>
    443a:	bf00      	nop
    443c:	0001a0ec 	.word	0x0001a0ec
    4440:	ea5f0900 	.word	0xea5f0900
    4444:	ea590010 	.word	0xea590010

00004448 <emit_ldx_reg>:
{
    4448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    444c:	461c      	mov	r4, r3
    444e:	f89d 9020 	ldrb.w	r9, [sp, #32]
    const s8 *rd = is_stacked(dst_lo) ? tmp : dst; //Rt
    4452:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4456:	4f61      	ldr	r7, [pc, #388]	; (45dc <emit_ldx_reg+0x194>)
    4458:	ea17 0723 	ands.w	r7, r7, r3, asr #32
    445c:	bf38      	it	cc
    445e:	460f      	movcc	r7, r1
    4460:	f1b9 0f18 	cmp.w	r9, #24
    4464:	bf9a      	itte	ls
    4466:	4b5e      	ldrls	r3, [pc, #376]	; (45e0 <emit_ldx_reg+0x198>)
    4468:	f933 3019 	ldrshls.w	r3, [r3, r9, lsl #1]
    446c:	2300      	movhi	r3, #0
{
    446e:	4615      	mov	r5, r2
	return -off_max <= off && off <= off_max;
    4470:	425a      	negs	r2, r3
    4472:	42a2      	cmp	r2, r4
{
    4474:	4606      	mov	r6, r0
    4476:	4688      	mov	r8, r1
	return -off_max <= off && off <= off_max;
    4478:	dc01      	bgt.n	447e <emit_ldx_reg+0x36>
    if (!is_ldst_imm(off, sz)) {
    447a:	429c      	cmp	r4, r3
    447c:	dd1d      	ble.n	44ba <emit_ldx_reg+0x72>
        emit_mov_imm(state, tmp[0], off);
    447e:	4622      	mov	r2, r4
    4480:	2107      	movs	r1, #7
    4482:	4630      	mov	r0, r6
    4484:	f00e fb40 	bl	12b08 <emit_mov_imm>
    return (THUMB2_ADD_REG_T2) | (DN << 7) | (Rm << 3) | (rdn);
    4488:	f244 4107 	movw	r1, #17415	; 0x4407
    448c:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
        emit2(state, _thumb16_ADD_REG_T2(dst, src));
    4490:	b289      	uxth	r1, r1
    4492:	4630      	mov	r0, r6
    4494:	f00e fa55 	bl	12942 <emit2>
        rm = tmp[0];
    4498:	2507      	movs	r5, #7
        off = 0;
    449a:	2400      	movs	r4, #0
    switch (sz) {
    449c:	f1b9 0f08 	cmp.w	r9, #8
    44a0:	d064      	beq.n	456c <emit_ldx_reg+0x124>
    44a2:	d814      	bhi.n	44ce <emit_ldx_reg+0x86>
    44a4:	f1b9 0f00 	cmp.w	r9, #0
    44a8:	f000 808f 	beq.w	45ca <emit_ldx_reg+0x182>
    arm_bpf_put_reg64(state, dst, rd);
    44ac:	463a      	mov	r2, r7
    44ae:	4641      	mov	r1, r8
    44b0:	4630      	mov	r0, r6
}
    44b2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    arm_bpf_put_reg64(state, dst, rd);
    44b6:	f00e bb08 	b.w	12aca <arm_bpf_put_reg64>
    } else if (rd[1] == rm) {
    44ba:	f997 3001 	ldrsb.w	r3, [r7, #1]
    44be:	42ab      	cmp	r3, r5
    44c0:	d1ec      	bne.n	449c <emit_ldx_reg+0x54>
        emit_a32_mov_reg(state, rm, tmp[0]);
    44c2:	4629      	mov	r1, r5
    44c4:	2207      	movs	r2, #7
    44c6:	f00e faf3 	bl	12ab0 <emit_a32_mov_reg>
        rm = tmp[0];
    44ca:	2507      	movs	r5, #7
    44cc:	e7e6      	b.n	449c <emit_ldx_reg+0x54>
    switch (sz) {
    44ce:	f1b9 0f10 	cmp.w	r9, #16
    44d2:	d00f      	beq.n	44f4 <emit_ldx_reg+0xac>
    44d4:	f1b9 0f18 	cmp.w	r9, #24
    44d8:	d1e8      	bne.n	44ac <emit_ldx_reg+0x64>
            _emit_ldr_i(state, rd[1], rm, off);
    44da:	4623      	mov	r3, r4
    44dc:	462a      	mov	r2, r5
    44de:	f997 1001 	ldrsb.w	r1, [r7, #1]
    44e2:	4630      	mov	r0, r6
    44e4:	f7ff fba8 	bl	3c38 <_emit_ldr_i>
            _emit_ldr_i(state, rd[0], rm, off + 4);
    44e8:	1d23      	adds	r3, r4, #4
    44ea:	b21b      	sxth	r3, r3
    44ec:	462a      	mov	r2, r5
    44ee:	f997 1000 	ldrsb.w	r1, [r7]
    44f2:	e06e      	b.n	45d2 <emit_ldx_reg+0x18a>
    if (off <= imm5 && off >= -imm5) {
    44f4:	2c1f      	cmp	r4, #31
            _emit_ldrb_i(state, rd[1], rm, off);
    44f6:	f997 2001 	ldrsb.w	r2, [r7, #1]
    if (off <= imm5 && off >= -imm5) {
    44fa:	dc11      	bgt.n	4520 <emit_ldx_reg+0xd8>
    44fc:	f114 0f1f 	cmn.w	r4, #31
    4500:	db1e      	blt.n	4540 <emit_ldx_reg+0xf8>
        if (Rt < 8 && Rn < 8) {
    4502:	2a07      	cmp	r2, #7
    4504:	dc0e      	bgt.n	4524 <emit_ldx_reg+0xdc>
    4506:	2d07      	cmp	r5, #7
    4508:	dc0c      	bgt.n	4524 <emit_ldx_reg+0xdc>
    return (THUMB2_LDRB_IMM_T1) | (offImm5 << 6) | (Rn << 3) | (Rt);
    450a:	00e9      	lsls	r1, r5, #3
    450c:	ea41 1184 	orr.w	r1, r1, r4, lsl #6
    4510:	4311      	orrs	r1, r2
    4512:	f441 41f0 	orr.w	r1, r1, #30720	; 0x7800
        emit2(state, inst);
    4516:	b289      	uxth	r1, r1
    4518:	4630      	mov	r0, r6
    451a:	f00e fa12 	bl	12942 <emit2>
    451e:	e7c5      	b.n	44ac <emit_ldx_reg+0x64>
    if (off <= imm8 && off >= -imm8) {
    4520:	2cff      	cmp	r4, #255	; 0xff
    4522:	dc14      	bgt.n	454e <emit_ldx_reg+0x106>
    u32 P = 1, U = offImm8 >= 0, W = 0; // p = 0 && w = 0 -> undefined
    4524:	43e1      	mvns	r1, r4
    4526:	0fc9      	lsrs	r1, r1, #31
    u32 inst = (THUMB2_LDRB_IMM_T3) | (Rn << 16) | (Rt << 12) | (flag << 8) | (imm8);
    4528:	0312      	lsls	r2, r2, #12
    452a:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
    s32 imm8 = offImm8 > 0 ? offImm8 : -offImm8;
    452e:	2c00      	cmp	r4, #0
    u32 inst = (THUMB2_LDRB_IMM_T3) | (Rn << 16) | (Rt << 12) | (flag << 8) | (imm8);
    4530:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
    s32 imm8 = offImm8 > 0 ? offImm8 : -offImm8;
    4534:	bfb8      	it	lt
    4536:	4264      	neglt	r4, r4
        emit4(state, _thumb32_LDRB_IMM_T3(Rt, Rn, off));
    4538:	492a      	ldr	r1, [pc, #168]	; (45e4 <emit_ldx_reg+0x19c>)
    u32 inst = (THUMB2_LDRB_IMM_T3) | (Rn << 16) | (Rt << 12) | (flag << 8) | (imm8);
    453a:	432c      	orrs	r4, r5
        emit4(state, inst);
    453c:	4321      	orrs	r1, r4
    453e:	e011      	b.n	4564 <emit_ldx_reg+0x11c>
    if (off <= imm8 && off >= -imm8) {
    4540:	f114 0fff 	cmn.w	r4, #255	; 0xff
    4544:	daee      	bge.n	4524 <emit_ldx_reg+0xdc>
    } else if (off <= imm12 && off >= -imm12) {
    4546:	f514 5f80 	cmn.w	r4, #4096	; 0x1000
    454a:	ddaf      	ble.n	44ac <emit_ldx_reg+0x64>
    454c:	e002      	b.n	4554 <emit_ldx_reg+0x10c>
    454e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    4552:	daab      	bge.n	44ac <emit_ldx_reg+0x64>
        s32 inst = 0xf8900000 | (Rn << 16) | (Rt << 12) | off;
    4554:	0311      	lsls	r1, r2, #12
    4556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    455a:	4321      	orrs	r1, r4
        emit4(state, inst);
    455c:	f041 4178 	orr.w	r1, r1, #4160749568	; 0xf8000000
    4560:	f441 0110 	orr.w	r1, r1, #9437184	; 0x900000
        emit4(state, inst);
    4564:	4630      	mov	r0, r6
    4566:	f00e f9f6 	bl	12956 <emit4>
    456a:	e79f      	b.n	44ac <emit_ldx_reg+0x64>
    if (off <= imm5 && off >= -imm5) {
    456c:	2c1f      	cmp	r4, #31
            _emit_ldrh_i(state, rd[1], rm, off);
    456e:	f997 2001 	ldrsb.w	r2, [r7, #1]
    if (off <= imm5 && off >= -imm5) {
    4572:	dc0b      	bgt.n	458c <emit_ldx_reg+0x144>
    4574:	f114 0f1f 	cmn.w	r4, #31
    4578:	db11      	blt.n	459e <emit_ldx_reg+0x156>
        s16 inst = 0x8800 | ((off & imm5) << 6) | (Rn << 3) | (Rt);
    457a:	f004 011f 	and.w	r1, r4, #31
    457e:	ea42 1181 	orr.w	r1, r2, r1, lsl #6
    4582:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
    4586:	f441 4108 	orr.w	r1, r1, #34816	; 0x8800
    458a:	e7c4      	b.n	4516 <emit_ldx_reg+0xce>
    } else if (off <= imm8 && off >= -imm8) {
    458c:	2cff      	cmp	r4, #255	; 0xff
    458e:	dc0d      	bgt.n	45ac <emit_ldx_reg+0x164>
        s32 inst = 0xf8300000 | (Rn << 16) | (Rt << 12) | (0b1110 << 8) | (off & imm8);
    4590:	0312      	lsls	r2, r2, #12
    4592:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
    4596:	b2e4      	uxtb	r4, r4
    4598:	432c      	orrs	r4, r5
        emit4(state, inst);
    459a:	4913      	ldr	r1, [pc, #76]	; (45e8 <emit_ldx_reg+0x1a0>)
    459c:	e7ce      	b.n	453c <emit_ldx_reg+0xf4>
    } else if (off <= imm8 && off >= -imm8) {
    459e:	f114 0fff 	cmn.w	r4, #255	; 0xff
    45a2:	daf5      	bge.n	4590 <emit_ldx_reg+0x148>
    } else if (off <= imm12 && off >= -imm12) {
    45a4:	f514 5f80 	cmn.w	r4, #4096	; 0x1000
    45a8:	dd80      	ble.n	44ac <emit_ldx_reg+0x64>
    45aa:	e003      	b.n	45b4 <emit_ldx_reg+0x16c>
    45ac:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    45b0:	f6bf af7c 	bge.w	44ac <emit_ldx_reg+0x64>
        s32 inst = 0xf8b00000 | (Rn << 16) | (Rt << 12) | (off & imm12);
    45b4:	0311      	lsls	r1, r2, #12
    45b6:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
    45ba:	f3c4 010b 	ubfx	r1, r4, #0, #12
    45be:	4329      	orrs	r1, r5
        emit4(state, inst);
    45c0:	f041 4178 	orr.w	r1, r1, #4160749568	; 0xf8000000
    45c4:	f441 0130 	orr.w	r1, r1, #11534336	; 0xb00000
    45c8:	e7cc      	b.n	4564 <emit_ldx_reg+0x11c>
            _emit_ldr_i(state, rd[1], rm, off);
    45ca:	f997 1001 	ldrsb.w	r1, [r7, #1]
    45ce:	4623      	mov	r3, r4
    45d0:	462a      	mov	r2, r5
            _emit_ldr_i(state, rd[0], rm, off + 4);
    45d2:	4630      	mov	r0, r6
    45d4:	f7ff fb30 	bl	3c38 <_emit_ldr_i>
            break;
    45d8:	e768      	b.n	44ac <emit_ldx_reg+0x64>
    45da:	bf00      	nop
    45dc:	0001a0ec 	.word	0x0001a0ec
    45e0:	00019720 	.word	0x00019720
    45e4:	f8100c00 	.word	0xf8100c00
    45e8:	f8300e00 	.word	0xf8300e00

000045ec <build_body>:

static void build_body(jit_state *state) {
    45ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    45f0:	b089      	sub	sp, #36	; 0x24
    ebpf_inst *insts = state->insts;
    45f2:	6803      	ldr	r3, [r0, #0]
    45f4:	9305      	str	r3, [sp, #20]
    int inst_num = state->inst_num;
    45f6:	6843      	ldr	r3, [r0, #4]
    45f8:	9307      	str	r3, [sp, #28]
static void build_body(jit_state *state) {
    45fa:	4604      	mov	r4, r0
    // DEBUG_LOG("IMM val: 5=%d 6=%d\n", insts[5].imm, insts[6].imm);
    for (int i = 0; i < inst_num; i++) {
    45fc:	f04f 0b00 	mov.w	fp, #0
    4600:	9b07      	ldr	r3, [sp, #28]
    4602:	459b      	cmp	fp, r3
    4604:	db02      	blt.n	460c <build_body+0x20>
        if (ret < 0) {
            DEBUG_LOG("ERROR: %d\n", ret);
            return;
        }
    }
}
    4606:	b009      	add	sp, #36	; 0x24
    4608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ebpf_inst *inst = &insts[i];
    460c:	9b05      	ldr	r3, [sp, #20]
    460e:	eb03 00cb 	add.w	r0, r3, fp, lsl #3
    const int8_t *dst = bpf2a32[inst->dst];
    4612:	4b82      	ldr	r3, [pc, #520]	; (481c <build_body+0x230>)
    4614:	7841      	ldrb	r1, [r0, #1]
    const s16 off = inst->offset;
    4616:	f9b0 9002 	ldrsh.w	r9, [r0, #2]
    const s32 imm = inst->imm;
    461a:	6845      	ldr	r5, [r0, #4]
    const int8_t *dst = bpf2a32[inst->dst];
    461c:	f001 020f 	and.w	r2, r1, #15
    4620:	9204      	str	r2, [sp, #16]
    4622:	eb03 0742 	add.w	r7, r3, r2, lsl #1
    int pc = inst - state->insts;
    4626:	6822      	ldr	r2, [r4, #0]
    4628:	1a82      	subs	r2, r0, r2
    462a:	ea4f 0ae2 	mov.w	sl, r2, asr #3
    uint32_t target_pc = pc + inst->offset + 1;
    462e:	eb09 020a 	add.w	r2, r9, sl
    4632:	9206      	str	r2, [sp, #24]
    const u8 code = inst->opcode;
    4634:	9a05      	ldr	r2, [sp, #20]
    4636:	f812 603b 	ldrb.w	r6, [r2, fp, lsl #3]
    463a:	f006 0207 	and.w	r2, r6, #7
    const bool is64 = (BPF_CLASS(code) == EBPF_CLS_ALU64);
    463e:	f1a2 0c07 	sub.w	ip, r2, #7
    4642:	9202      	str	r2, [sp, #8]
    4644:	f1dc 0200 	rsbs	r2, ip, #0
    const int8_t *src = bpf2a32[inst->src];
    4648:	ea4f 1111 	mov.w	r1, r1, lsr #4
    const bool is64 = (BPF_CLASS(code) == EBPF_CLS_ALU64);
    464c:	eb42 020c 	adc.w	r2, r2, ip
    const int8_t *src = bpf2a32[inst->src];
    4650:	eb03 0841 	add.w	r8, r3, r1, lsl #1
    const bool is64 = (BPF_CLASS(code) == EBPF_CLS_ALU64);
    4654:	9203      	str	r2, [sp, #12]
    switch (code) {
    4656:	2edd      	cmp	r6, #221	; 0xdd
    4658:	f200 84aa 	bhi.w	4fb0 <build_body+0x9c4>
    465c:	e8df f016 	tbh	[pc, r6, lsl #1]
    4660:	04a800ed 	.word	0x04a800ed
    4664:	04a804a8 	.word	0x04a804a8
    4668:	04450107 	.word	0x04450107
    466c:	010704a8 	.word	0x010704a8
    4670:	04a804a8 	.word	0x04a804a8
    4674:	04a804a8 	.word	0x04a804a8
    4678:	04a80107 	.word	0x04a80107
    467c:	010704a8 	.word	0x010704a8
    4680:	04a804a8 	.word	0x04a804a8
    4684:	04a804a8 	.word	0x04a804a8
    4688:	038b0107 	.word	0x038b0107
    468c:	010704a8 	.word	0x010704a8
    4690:	04a80340 	.word	0x04a80340
    4694:	04a804a8 	.word	0x04a804a8
    4698:	038b0107 	.word	0x038b0107
    469c:	010704a8 	.word	0x010704a8
    46a0:	04a804a8 	.word	0x04a804a8
    46a4:	04a804a8 	.word	0x04a804a8
    46a8:	038b0107 	.word	0x038b0107
    46ac:	032604a8 	.word	0x032604a8
    46b0:	04a804a8 	.word	0x04a804a8
    46b4:	04a804a8 	.word	0x04a804a8
    46b8:	038b0107 	.word	0x038b0107
    46bc:	032604a8 	.word	0x032604a8
    46c0:	04a804a8 	.word	0x04a804a8
    46c4:	04a804a8 	.word	0x04a804a8
    46c8:	038b0122 	.word	0x038b0122
    46cc:	012204a8 	.word	0x012204a8
    46d0:	04a804a8 	.word	0x04a804a8
    46d4:	04a804a8 	.word	0x04a804a8
    46d8:	038b0122 	.word	0x038b0122
    46dc:	012204a8 	.word	0x012204a8
    46e0:	04a804a8 	.word	0x04a804a8
    46e4:	04a804a8 	.word	0x04a804a8
    46e8:	038b0107 	.word	0x038b0107
    46ec:	010704a8 	.word	0x010704a8
    46f0:	04a804a8 	.word	0x04a804a8
    46f4:	04a804a8 	.word	0x04a804a8
    46f8:	038b0107 	.word	0x038b0107
    46fc:	010704a8 	.word	0x010704a8
    4700:	04a804a8 	.word	0x04a804a8
    4704:	04a804a8 	.word	0x04a804a8
    4708:	038b0107 	.word	0x038b0107
    470c:	010704a8 	.word	0x010704a8
    4710:	04a804a8 	.word	0x04a804a8
    4714:	04a804a8 	.word	0x04a804a8
    4718:	038b0107 	.word	0x038b0107
    471c:	010704a8 	.word	0x010704a8
    4720:	035204a8 	.word	0x035204a8
    4724:	03800362 	.word	0x03800362
    4728:	038b015a 	.word	0x038b015a
    472c:	018304a8 	.word	0x018304a8
    4730:	035204a8 	.word	0x035204a8
    4734:	03800362 	.word	0x03800362
    4738:	038b0107 	.word	0x038b0107
    473c:	017d04a8 	.word	0x017d04a8
    4740:	035204a8 	.word	0x035204a8
    4744:	03800362 	.word	0x03800362
    4748:	038b015a 	.word	0x038b015a
    474c:	01e004a8 	.word	0x01e004a8
    4750:	035204a8 	.word	0x035204a8
    4754:	03800362 	.word	0x03800362
    4758:	038b0107 	.word	0x038b0107
    475c:	018904a8 	.word	0x018904a8
    4760:	04a804a8 	.word	0x04a804a8
    4764:	04a804a8 	.word	0x04a804a8
    4768:	04580309 	.word	0x04580309
    476c:	030c04a8 	.word	0x030c04a8
    4770:	04a804a8 	.word	0x04a804a8
    4774:	04a804a8 	.word	0x04a804a8
    4778:	04a804a8 	.word	0x04a804a8
    477c:	04a804a8 	.word	0x04a804a8
    4780:	04a804a8 	.word	0x04a804a8
    4784:	04a804a8 	.word	0x04a804a8
    4788:	049a0122 	.word	0x049a0122
    478c:	012204a8 	.word	0x012204a8
    4790:	04a804a8 	.word	0x04a804a8
    4794:	04a804a8 	.word	0x04a804a8
    4798:	04a80122 	.word	0x04a80122
    479c:	012204a8 	.word	0x012204a8
    47a0:	04a804a8 	.word	0x04a804a8
    47a4:	04a804a8 	.word	0x04a804a8
    47a8:	038b0107 	.word	0x038b0107
    47ac:	010704a8 	.word	0x010704a8
    47b0:	04a804a8 	.word	0x04a804a8
    47b4:	04a804a8 	.word	0x04a804a8
    47b8:	038b0107 	.word	0x038b0107
    47bc:	010704a8 	.word	0x010704a8
    47c0:	04a804a8 	.word	0x04a804a8
    47c4:	04a804a8 	.word	0x04a804a8
    47c8:	038b00e0 	.word	0x038b00e0
    47cc:	00e004a8 	.word	0x00e004a8
    47d0:	04a804a8 	.word	0x04a804a8
    47d4:	04a804a8 	.word	0x04a804a8
    47d8:	038b00e0 	.word	0x038b00e0
    47dc:	00e004a8 	.word	0x00e004a8
    47e0:	04a804a8 	.word	0x04a804a8
    47e4:	04a804a8 	.word	0x04a804a8
    47e8:	038b015a 	.word	0x038b015a
    47ec:	028c04a8 	.word	0x028c04a8
    47f0:	04a804a8 	.word	0x04a804a8
    47f4:	04a804a8 	.word	0x04a804a8
    47f8:	038b0107 	.word	0x038b0107
    47fc:	024004a8 	.word	0x024004a8
    4800:	04a804a8 	.word	0x04a804a8
    4804:	04a804a8 	.word	0x04a804a8
    4808:	038b033a 	.word	0x038b033a
    480c:	04a804a8 	.word	0x04a804a8
    4810:	04a804a8 	.word	0x04a804a8
    4814:	04a804a8 	.word	0x04a804a8
    4818:	038b033a 	.word	0x038b033a
    481c:	0001a0d4 	.word	0x0001a0d4
        switch (BPF_SRC(code))
    4820:	f016 0608 	ands.w	r6, r6, #8
    4824:	d01c      	beq.n	4860 <build_body+0x274>
    4826:	b146      	cbz	r6, 483a <build_body+0x24e>
            if (imm == 1) {
    4828:	2d01      	cmp	r5, #1
    482a:	d108      	bne.n	483e <build_body+0x252>
                emit_mov_imm(state, dst_hi, 0);
    482c:	9904      	ldr	r1, [sp, #16]
    482e:	2200      	movs	r2, #0
    4830:	f813 1011 	ldrb.w	r1, [r3, r1, lsl #1]
    4834:	4620      	mov	r0, r4
    4836:	f00e f967 	bl	12b08 <emit_mov_imm>
    return 0;
    483a:	2500      	movs	r5, #0
    483c:	e071      	b.n	4922 <build_body+0x336>
    if (!is64) {
    483e:	9b02      	ldr	r3, [sp, #8]
    4840:	2b07      	cmp	r3, #7
    4842:	d007      	beq.n	4854 <build_body+0x268>
        emit_a32_mov_reg(state, src_lo, dst_lo);
    4844:	f997 2001 	ldrsb.w	r2, [r7, #1]
    4848:	f998 1001 	ldrsb.w	r1, [r8, #1]
    484c:	4620      	mov	r0, r4
    484e:	f00e f92f 	bl	12ab0 <emit_a32_mov_reg>
        if (ret > 0) { // load value, skip
    4852:	e7f2      	b.n	483a <build_body+0x24e>
    4854:	4642      	mov	r2, r8
    4856:	4639      	mov	r1, r7
    4858:	4620      	mov	r0, r4
    485a:	f7ff fa0b 	bl	3c74 <emit_mov_reg64.part.7>
    485e:	e7ec      	b.n	483a <build_body+0x24e>
            emit_mov_se_imm64(state, is64, dst, imm);
    4860:	462b      	mov	r3, r5
    4862:	463a      	mov	r2, r7
    4864:	9903      	ldr	r1, [sp, #12]
    4866:	4620      	mov	r0, r4
    4868:	f00e f996 	bl	12b98 <emit_mov_se_imm64>
        if (ret > 0) { // load value, skip
    486c:	e7e5      	b.n	483a <build_body+0x24e>
        switch (BPF_SRC(code))
    486e:	f016 0908 	ands.w	r9, r6, #8
    4872:	d007      	beq.n	4884 <build_body+0x298>
    4874:	f1b9 0f00 	cmp.w	r9, #0
    4878:	d0df      	beq.n	483a <build_body+0x24e>
            emit_alu64_reg(state, is64, dst, src, BPF_OP(code));
    487a:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
    487e:	9600      	str	r6, [sp, #0]
    4880:	4643      	mov	r3, r8
    4882:	e009      	b.n	4898 <build_body+0x2ac>
            emit_mov_se_imm64(state, is64, tmp2, imm);
    4884:	462b      	mov	r3, r5
    4886:	4ad8      	ldr	r2, [pc, #864]	; (4be8 <build_body+0x5fc>)
    4888:	9903      	ldr	r1, [sp, #12]
    488a:	4620      	mov	r0, r4
    488c:	f00e f984 	bl	12b98 <emit_mov_se_imm64>
            emit_alu64_reg(state, is64, dst, tmp2, BPF_OP(code));
    4890:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
    4894:	4bd4      	ldr	r3, [pc, #848]	; (4be8 <build_body+0x5fc>)
    4896:	9600      	str	r6, [sp, #0]
            emit_alu64_reg(state, is64, dst, src, BPF_OP(code));
    4898:	463a      	mov	r2, r7
    489a:	9903      	ldr	r1, [sp, #12]
    489c:	4620      	mov	r0, r4
    489e:	f7ff fcd5 	bl	424c <emit_alu64_reg>
        if (ret > 0) { // load value, skip
    48a2:	e7ca      	b.n	483a <build_body+0x24e>
    rd_lo = arm_bpf_get_reg32(state, dst_lo, tmp2[1]);
    48a4:	2208      	movs	r2, #8
    48a6:	f997 1001 	ldrsb.w	r1, [r7, #1]
    48aa:	4620      	mov	r0, r4
    48ac:	f00e f85d 	bl	1296a <arm_bpf_get_reg32>
    switch (BPF_SRC(code)) {
    48b0:	f016 0308 	ands.w	r3, r6, #8
    rd_lo = arm_bpf_get_reg32(state, dst_lo, tmp2[1]);
    48b4:	4681      	mov	r9, r0
    switch (BPF_SRC(code)) {
    48b6:	d01c      	beq.n	48f2 <build_body+0x306>
    48b8:	f998 1001 	ldrsb.w	r1, [r8, #1]
    48bc:	b303      	cbz	r3, 4900 <build_body+0x314>
        rt = arm_bpf_get_reg32(state, src_lo, tmp2[0]);
    48be:	2209      	movs	r2, #9
    48c0:	4620      	mov	r0, r4
    48c2:	f00e f852 	bl	1296a <arm_bpf_get_reg32>
    if (BPF_OP(code) == EBPF_ALU_DIV) {
    48c6:	ea4f 4109 	mov.w	r1, r9, lsl #16
    48ca:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
    48ce:	ea41 2509 	orr.w	r5, r1, r9, lsl #8
    48d2:	2e30      	cmp	r6, #48	; 0x30
    48d4:	ea45 0500 	orr.w	r5, r5, r0
    48d8:	d114      	bne.n	4904 <build_body+0x318>
        emit4(state, inst);
    48da:	49c4      	ldr	r1, [pc, #784]	; (4bec <build_body+0x600>)
        emit4(state, inst);
    48dc:	4329      	orrs	r1, r5
    48de:	4620      	mov	r0, r4
    48e0:	f00e f839 	bl	12956 <emit4>
    arm_bpf_put_reg32(state, dst_lo, rd_lo);
    48e4:	f997 1001 	ldrsb.w	r1, [r7, #1]
    48e8:	464a      	mov	r2, r9
    48ea:	4620      	mov	r0, r4
    48ec:	f00e f8cf 	bl	12a8e <arm_bpf_put_reg32>
        if (ret > 0) { // load value, skip
    48f0:	e7a3      	b.n	483a <build_body+0x24e>
        emit_mov_imm(state, rt, imm);
    48f2:	4620      	mov	r0, r4
    48f4:	b2aa      	uxth	r2, r5
    48f6:	2109      	movs	r1, #9
    48f8:	f00e f906 	bl	12b08 <emit_mov_imm>
        rt = tmp2[0];
    48fc:	2009      	movs	r0, #9
    48fe:	e7e2      	b.n	48c6 <build_body+0x2da>
        rt = src_lo;
    4900:	4608      	mov	r0, r1
        break;
    4902:	e7e0      	b.n	48c6 <build_body+0x2da>
        u32 inst = (0xfbb0f0f0) | (rd_lo << 16) | (ARM_IP << 8) | (rt);
    4904:	4308      	orrs	r0, r1
        emit4(state, inst);
    4906:	49ba      	ldr	r1, [pc, #744]	; (4bf0 <build_body+0x604>)
    4908:	4301      	orrs	r1, r0
    490a:	4620      	mov	r0, r4
    490c:	f00e f823 	bl	12956 <emit4>
        emit4(state, inst);
    4910:	49b8      	ldr	r1, [pc, #736]	; (4bf4 <build_body+0x608>)
    4912:	e7e3      	b.n	48dc <build_body+0x2f0>
        if (imm > 31) {
    4914:	2d1f      	cmp	r5, #31
    4916:	dd15      	ble.n	4944 <build_body+0x358>
            state->err_line = __LINE__;
    4918:	f240 53ac 	movw	r3, #1452	; 0x5ac
    491c:	61a3      	str	r3, [r4, #24]
        return -1;
    491e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        if (!state->needGen) { // offset = end
    4922:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    4926:	b91b      	cbnz	r3, 4930 <build_body+0x344>
            state->offsets[i] = state->idx;
    4928:	69e3      	ldr	r3, [r4, #28]
    492a:	6922      	ldr	r2, [r4, #16]
    492c:	f843 202b 	str.w	r2, [r3, fp, lsl #2]
        if (ret < 0) {
    4930:	1c6b      	adds	r3, r5, #1
    4932:	f040 81e4 	bne.w	4cfe <build_body+0x712>
            DEBUG_LOG("ERROR: %d\n", ret);
    4936:	48b0      	ldr	r0, [pc, #704]	; (4bf8 <build_body+0x60c>)
    4938:	4629      	mov	r1, r5
}
    493a:	b009      	add	sp, #36	; 0x24
    493c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            DEBUG_LOG("ERROR: %d\n", ret);
    4940:	f00c bdc5 	b.w	114ce <debug_log>
        if (imm) {
    4944:	2d00      	cmp	r5, #0
    4946:	d0ec      	beq.n	4922 <build_body+0x336>
            emit_alu32_imm(state, dst_lo, imm, BPF_OP(code));
    4948:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
    494c:	b2aa      	uxth	r2, r5
        emit_alu32_imm(state, dst_lo, 0, BPF_OP(code));
    494e:	f997 1001 	ldrsb.w	r1, [r7, #1]
    4952:	4620      	mov	r0, r4
    4954:	f00e f92c 	bl	12bb0 <emit_alu32_imm>
        if (ret > 0) { // load value, skip
    4958:	e76f      	b.n	483a <build_body+0x24e>
        _emit_lsh64_reg(state, dst, src);
    495a:	4642      	mov	r2, r8
    495c:	4639      	mov	r1, r7
    495e:	4620      	mov	r0, r4
    4960:	f7ff fcb4 	bl	42cc <_emit_lsh64_reg>
        if (ret > 0) { // load value, skip
    4964:	e769      	b.n	483a <build_body+0x24e>
        _emit_lsh64_imm(state, dst, imm);
    4966:	b2aa      	uxth	r2, r5
    4968:	4639      	mov	r1, r7
    496a:	4620      	mov	r0, r4
    496c:	f7ff fd0e 	bl	438c <_emit_lsh64_imm>
        if (ret > 0) { // load value, skip
    4970:	e763      	b.n	483a <build_body+0x24e>
    rt = arm_bpf_get_reg32(state, src_lo, tmp2[1]);
    4972:	f998 1001 	ldrsb.w	r1, [r8, #1]
    4976:	2208      	movs	r2, #8
    4978:	4620      	mov	r0, r4
    497a:	f00d fff6 	bl	1296a <arm_bpf_get_reg32>
    rd = arm_bpf_get_reg64(state, dst, tmp);
    497e:	4a9f      	ldr	r2, [pc, #636]	; (4bfc <build_body+0x610>)
    rt = arm_bpf_get_reg32(state, src_lo, tmp2[1]);
    4980:	4606      	mov	r6, r0
    rd = arm_bpf_get_reg64(state, dst, tmp);
    4982:	4639      	mov	r1, r7
    4984:	4620      	mov	r0, r4
    4986:	f00e f85b 	bl	12a40 <arm_bpf_get_reg64>
    emit4(state, _thumb32_RSBW_IMM_T2(ARM_IP, rt, 32, FLAG_S));
    498a:	499d      	ldr	r1, [pc, #628]	; (4c00 <build_body+0x614>)
    return (THUMB2_RSBW_IMM) | (i << 26) | (flagS << 20) | (Rn << 16) | (imm3 << 12) | (Rd << 8) | (imm8);
    498c:	ea4f 4806 	mov.w	r8, r6, lsl #16
    rd = arm_bpf_get_reg64(state, dst, tmp);
    4990:	4605      	mov	r5, r0
    emit4(state, _thumb32_RSBW_IMM_T2(ARM_IP, rt, 32, FLAG_S));
    4992:	ea48 0101 	orr.w	r1, r8, r1
    4996:	4620      	mov	r0, r4
    4998:	f00d ffdd 	bl	12956 <emit4>
    emit4(state, _thumb32_SUBW_IMM_T4(tmp2[0], rt, 32, FLAG_S));
    499c:	4999      	ldr	r1, [pc, #612]	; (4c04 <build_body+0x618>)
    499e:	ea48 0101 	orr.w	r1, r8, r1
    49a2:	f00d ffd8 	bl	12956 <emit4>
    return (THUMB2_LSRW_REG) | (flagS << 20) | (Rn << 16) | (Rd << 8) | (Rm);
    49a6:	f995 2001 	ldrsb.w	r2, [r5, #1]
    emit4(state, _thumb32_LSRW_REG_T2(ARM_LR, rd[1], rt, FLAG_S));
    49aa:	4997      	ldr	r1, [pc, #604]	; (4c08 <build_body+0x61c>)
    u32 inst = (THUMB2_ORRW_REG) | (flagS << 20) | (Rn << 16) | (imm3 << 12)
    49ac:	f8df 827c 	ldr.w	r8, [pc, #636]	; 4c2c <build_body+0x640>
    return (THUMB2_LSRW_REG) | (flagS << 20) | (Rn << 16) | (Rd << 8) | (Rm);
    49b0:	ea46 4202 	orr.w	r2, r6, r2, lsl #16
    49b4:	4311      	orrs	r1, r2
    49b6:	f00d ffce 	bl	12956 <emit4>
    return (THUMB2_LSLW_REG_T2) | (flagS << 20) | (Rn << 16) | (Rd << 8) | (Rm);
    49ba:	f995 1000 	ldrsb.w	r1, [r5]
    49be:	020a      	lsls	r2, r1, #8
    49c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    emit4(state, _thumb32_LSLW_REG_T2(rd[0], rd[0], ARM_IP, FLAG_S));
    49c4:	4991      	ldr	r1, [pc, #580]	; (4c0c <build_body+0x620>)
    49c6:	4311      	orrs	r1, r2
    49c8:	f00d ffc5 	bl	12956 <emit4>
             | (Rd << 8) | (imm2 << 6) | (srtype << 4) | (Rm); 
    49cc:	f995 1000 	ldrsb.w	r1, [r5]
    emit4(state, _thumb32_ORRW_REG_T2(ARM_LR, ARM_LR, rd[0], 0, SRTYPE_LSL, FLAG_S));
    49d0:	ea41 0108 	orr.w	r1, r1, r8
    49d4:	f00d ffbf 	bl	12956 <emit4>
    return (THUMB2_LSRW_REG) | (flagS << 20) | (Rn << 16) | (Rd << 8) | (Rm);
    49d8:	f995 1000 	ldrsb.w	r1, [r5]
    49dc:	020a      	lsls	r2, r1, #8
    49de:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    emit4(state, _thumb32_LSRW_REG_T2(rd[0], rd[0], tmp2[0], FLAG_S));
    49e2:	498b      	ldr	r1, [pc, #556]	; (4c10 <build_body+0x624>)
    49e4:	4311      	orrs	r1, r2
    49e6:	f00d ffb6 	bl	12956 <emit4>
             | (Rd << 8) | (imm2 << 6) | (srtype << 4) | (Rm); 
    49ea:	f995 1000 	ldrsb.w	r1, [r5]
    emit4(state, _thumb32_ORRW_REG_T2(ARM_LR, ARM_LR, rd[0], 0, SRTYPE_LSL, FLAG_S));
    49ee:	ea41 0108 	orr.w	r1, r1, r8
    49f2:	f00d ffb0 	bl	12956 <emit4>
    return (THUMB2_LSRW_REG) | (flagS << 20) | (Rn << 16) | (Rd << 8) | (Rm);
    49f6:	f995 2000 	ldrsb.w	r2, [r5]
    emit4(state, _thumb32_LSRW_REG_T2(ARM_IP, rd[0], rt, FLAG_S));
    49fa:	4986      	ldr	r1, [pc, #536]	; (4c14 <build_body+0x628>)
    49fc:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
    emit4(state, _thumb32_ASRW_REG_T2(ARM_IP, rd[0], rt, FLAG_S));
    4a00:	4331      	orrs	r1, r6
    4a02:	4620      	mov	r0, r4
    4a04:	f00d ffa7 	bl	12956 <emit4>
    arm_bpf_put_reg32(state, dst_lo, ARM_LR);
    4a08:	220e      	movs	r2, #14
    4a0a:	f997 1001 	ldrsb.w	r1, [r7, #1]
    4a0e:	f00e f83e 	bl	12a8e <arm_bpf_put_reg32>
    arm_bpf_put_reg32(state, dst_hi, ARM_IP);
    4a12:	9b04      	ldr	r3, [sp, #16]
    4a14:	4619      	mov	r1, r3
    4a16:	4b80      	ldr	r3, [pc, #512]	; (4c18 <build_body+0x62c>)
    4a18:	220c      	movs	r2, #12
    4a1a:	f913 1011 	ldrsb.w	r1, [r3, r1, lsl #1]
    4a1e:	e764      	b.n	48ea <build_body+0x2fe>
    rd = arm_bpf_get_reg64(state, dst, tmp);
    4a20:	4a76      	ldr	r2, [pc, #472]	; (4bfc <build_body+0x610>)
    4a22:	4639      	mov	r1, r7
    4a24:	4620      	mov	r0, r4
    4a26:	f00e f80b 	bl	12a40 <arm_bpf_get_reg64>
        emit_a32_rsh_i64(state, dst, imm);
    4a2a:	fa1f f885 	uxth.w	r8, r5
    rd = arm_bpf_get_reg64(state, dst, tmp);
    4a2e:	4606      	mov	r6, r0
    if (val == 0) {
    4a30:	f1b8 0f00 	cmp.w	r8, #0
    4a34:	d044      	beq.n	4ac0 <build_body+0x4d4>
    } else if (val < 32) {
    4a36:	f1b8 0f1f 	cmp.w	r8, #31
    4a3a:	f990 0001 	ldrsb.w	r0, [r0, #1]
    4a3e:	d831      	bhi.n	4aa4 <build_body+0x4b8>
        emit4(state, _thumb32_LSRW_IMM_T2(tmp2[1], rd[1], val, FLAG_NOS));
    4a40:	2300      	movs	r3, #0
    4a42:	4642      	mov	r2, r8
    4a44:	4601      	mov	r1, r0
    4a46:	2008      	movs	r0, #8
    4a48:	f7ff f8e0 	bl	3c0c <_thumb32_LSRW_IMM_T2>
    4a4c:	4601      	mov	r1, r0
    4a4e:	4620      	mov	r0, r4
    4a50:	f00d ff81 	bl	12956 <emit4>
        emit4(state, _thumb32_ORRW_REG_T2(rd[1], tmp2[1], rd[0], 32 - val, SRTYPE_LSL, FLAG_NOS));
    4a54:	f1c8 0320 	rsb	r3, r8, #32
    if (shiftImm5 < 0 || shiftImm5 > 0b11111) {
    4a58:	2b1f      	cmp	r3, #31
    4a5a:	4645      	mov	r5, r8
    4a5c:	f996 0001 	ldrsb.w	r0, [r6, #1]
    4a60:	f996 2000 	ldrsb.w	r2, [r6]
    4a64:	d81b      	bhi.n	4a9e <build_body+0x4b2>
    u32 imm3 = (shiftImm5 >> 2) & 0b111;
    4a66:	ea4f 0ca3 	mov.w	ip, r3, asr #2
             | (Rd << 8) | (imm2 << 6) | (srtype << 4) | (Rm); 
    4a6a:	019b      	lsls	r3, r3, #6
    4a6c:	b2d9      	uxtb	r1, r3
    u32 inst = (THUMB2_ORRW_REG) | (flagS << 20) | (Rn << 16) | (imm3 << 12)
    4a6e:	ea41 310c 	orr.w	r1, r1, ip, lsl #12
    4a72:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    4a76:	4311      	orrs	r1, r2
    4a78:	f041 416a 	orr.w	r1, r1, #3925868544	; 0xea000000
    4a7c:	f441 0190 	orr.w	r1, r1, #4718592	; 0x480000
    4a80:	4620      	mov	r0, r4
    4a82:	f00d ff68 	bl	12956 <emit4>
        emit4(state, _thumb32_LSRW_IMM_T2(rd[0], rd[0], val, FLAG_NOS));
    4a86:	f996 1000 	ldrsb.w	r1, [r6]
    4a8a:	2300      	movs	r3, #0
    4a8c:	4608      	mov	r0, r1
    4a8e:	462a      	mov	r2, r5
    4a90:	f7ff f8bc 	bl	3c0c <_thumb32_LSRW_IMM_T2>
    4a94:	4601      	mov	r1, r0
        emit4(state, _thumb32_ASRW_IMM_T2(rd[0], rd[0], 31, FLAG_S));
    4a96:	4620      	mov	r0, r4
    4a98:	f00d ff5d 	bl	12956 <emit4>
    4a9c:	e010      	b.n	4ac0 <build_body+0x4d4>
        return -1;
    4a9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4aa2:	e7ed      	b.n	4a80 <build_body+0x494>
    } else if (val == 32) {
    4aa4:	f1b8 0f20 	cmp.w	r8, #32
    4aa8:	f996 1000 	ldrsb.w	r1, [r6]
    4aac:	d10e      	bne.n	4acc <build_body+0x4e0>
        _emit_mov_reg(state, rd[0], rd[1]);
    4aae:	4602      	mov	r2, r0
    4ab0:	4620      	mov	r0, r4
    4ab2:	f00d ffd1 	bl	12a58 <_emit_mov_reg>
        emit_mov_imm(state, rd[0], 0);
    4ab6:	2200      	movs	r2, #0
    4ab8:	7831      	ldrb	r1, [r6, #0]
    4aba:	4620      	mov	r0, r4
    4abc:	f00e f824 	bl	12b08 <emit_mov_imm>
    arm_bpf_put_reg64(state, dst, rd);
    4ac0:	4632      	mov	r2, r6
    arm_bpf_put_reg64(state, dst, rd);
    4ac2:	4639      	mov	r1, r7
    4ac4:	4620      	mov	r0, r4
    4ac6:	f00e f800 	bl	12aca <arm_bpf_put_reg64>
        if (ret > 0) { // load value, skip
    4aca:	e6b6      	b.n	483a <build_body+0x24e>
        emit4(state, _thumb32_LSRW_IMM_T2(rd[1], rd[0], val - 32, FLAG_NOS));
    4acc:	b2aa      	uxth	r2, r5
    4ace:	2300      	movs	r3, #0
    4ad0:	3a20      	subs	r2, #32
    4ad2:	f7ff f89b 	bl	3c0c <_thumb32_LSRW_IMM_T2>
    4ad6:	4601      	mov	r1, r0
    4ad8:	4620      	mov	r0, r4
    4ada:	f00d ff3c 	bl	12956 <emit4>
    4ade:	e7ea      	b.n	4ab6 <build_body+0x4ca>
    rt = arm_bpf_get_reg32(state, src_lo, tmp2[1]);
    4ae0:	f998 1001 	ldrsb.w	r1, [r8, #1]
    4ae4:	2208      	movs	r2, #8
    4ae6:	4620      	mov	r0, r4
    4ae8:	f00d ff3f 	bl	1296a <arm_bpf_get_reg32>
    rd = arm_bpf_get_reg64(state, dst, tmp);
    4aec:	4a43      	ldr	r2, [pc, #268]	; (4bfc <build_body+0x610>)
    rt = arm_bpf_get_reg32(state, src_lo, tmp2[1]);
    4aee:	4606      	mov	r6, r0
    rd = arm_bpf_get_reg64(state, dst, tmp);
    4af0:	4639      	mov	r1, r7
    4af2:	4620      	mov	r0, r4
    4af4:	f00d ffa4 	bl	12a40 <arm_bpf_get_reg64>
    emit4(state, _thumb32_RSBW_IMM_T2(ARM_IP, rt, 32, FLAG_S));
    4af8:	4941      	ldr	r1, [pc, #260]	; (4c00 <build_body+0x614>)
    return (THUMB2_RSBW_IMM) | (i << 26) | (flagS << 20) | (Rn << 16) | (imm3 << 12) | (Rd << 8) | (imm8);
    4afa:	ea4f 4806 	mov.w	r8, r6, lsl #16
    rd = arm_bpf_get_reg64(state, dst, tmp);
    4afe:	4605      	mov	r5, r0
    emit4(state, _thumb32_RSBW_IMM_T2(ARM_IP, rt, 32, FLAG_S));
    4b00:	ea48 0101 	orr.w	r1, r8, r1
    4b04:	4620      	mov	r0, r4
    4b06:	f00d ff26 	bl	12956 <emit4>
    emit4(state, _thumb32_SUBW_IMM_T4(tmp2[0], rt, 32, FLAG_S));
    4b0a:	493e      	ldr	r1, [pc, #248]	; (4c04 <build_body+0x618>)
    4b0c:	ea48 0101 	orr.w	r1, r8, r1
    4b10:	f00d ff21 	bl	12956 <emit4>
    return (THUMB2_LSRW_REG) | (flagS << 20) | (Rn << 16) | (Rd << 8) | (Rm);
    4b14:	f995 2001 	ldrsb.w	r2, [r5, #1]
    emit4(state, _thumb32_LSRW_REG_T2(ARM_LR, rd[1], rt, FLAG_S));
    4b18:	493b      	ldr	r1, [pc, #236]	; (4c08 <build_body+0x61c>)
    u32 inst = (THUMB2_ORRW_REG) | (flagS << 20) | (Rn << 16) | (imm3 << 12)
    4b1a:	f8df 8110 	ldr.w	r8, [pc, #272]	; 4c2c <build_body+0x640>
    return (THUMB2_LSRW_REG) | (flagS << 20) | (Rn << 16) | (Rd << 8) | (Rm);
    4b1e:	ea46 4202 	orr.w	r2, r6, r2, lsl #16
    4b22:	4311      	orrs	r1, r2
    4b24:	f00d ff17 	bl	12956 <emit4>
    return (THUMB2_LSLW_REG_T2) | (flagS << 20) | (Rn << 16) | (Rd << 8) | (Rm);
    4b28:	f995 1000 	ldrsb.w	r1, [r5]
    4b2c:	020a      	lsls	r2, r1, #8
    4b2e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    emit4(state, _thumb32_LSLW_REG_T2(rd[0], rd[0], tmp2[0], FLAG_NOS));
    4b32:	493a      	ldr	r1, [pc, #232]	; (4c1c <build_body+0x630>)
    4b34:	4311      	orrs	r1, r2
    4b36:	f00d ff0e 	bl	12956 <emit4>
             | (Rd << 8) | (imm2 << 6) | (srtype << 4) | (Rm); 
    4b3a:	f995 1000 	ldrsb.w	r1, [r5]
    emit4(state, _thumb32_ORRW_REG_T2(ARM_LR, ARM_LR, rd[0], 0, SRTYPE_LSL, FLAG_S));
    4b3e:	ea41 0108 	orr.w	r1, r1, r8
    4b42:	f00d ff08 	bl	12956 <emit4>
    return (THUMB2_ASRW_REG) | (flagS << 20) | (Rn << 16) | (Rd << 8) | (Rm);
    4b46:	f995 1000 	ldrsb.w	r1, [r5]
    4b4a:	020a      	lsls	r2, r1, #8
    4b4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    emit4(state, _thumb32_ASRW_REG_T2(rd[0], rd[0], tmp2[0], FLAG_NOS));
    4b50:	4933      	ldr	r1, [pc, #204]	; (4c20 <build_body+0x634>)
    4b52:	4311      	orrs	r1, r2
    4b54:	f00d feff 	bl	12956 <emit4>
    emit2(state, _thumb16_IT_T1(COND_PL, IT_MASK_NONE));
    4b58:	f64b 7158 	movw	r1, #48984	; 0xbf58
    4b5c:	f00d fef1 	bl	12942 <emit2>
             | (Rd << 8) | (imm2 << 6) | (srtype << 4) | (Rm); 
    4b60:	f995 1000 	ldrsb.w	r1, [r5]
    emit4(state, _thumb32_ORRW_REG_T2(ARM_LR, ARM_LR, rd[0], 0, SRTYPE_LSL, FLAG_S));
    4b64:	ea41 0108 	orr.w	r1, r1, r8
    4b68:	f00d fef5 	bl	12956 <emit4>
    return (THUMB2_ASRW_REG) | (flagS << 20) | (Rn << 16) | (Rd << 8) | (Rm);
    4b6c:	f995 2000 	ldrsb.w	r2, [r5]
    emit4(state, _thumb32_ASRW_REG_T2(ARM_IP, rd[0], rt, FLAG_S));
    4b70:	492c      	ldr	r1, [pc, #176]	; (4c24 <build_body+0x638>)
    4b72:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
    4b76:	e743      	b.n	4a00 <build_body+0x414>
    rd = arm_bpf_get_reg64(state, dst, tmp);
    4b78:	4a20      	ldr	r2, [pc, #128]	; (4bfc <build_body+0x610>)
    4b7a:	4639      	mov	r1, r7
    4b7c:	4620      	mov	r0, r4
    4b7e:	f00d ff5f 	bl	12a40 <arm_bpf_get_reg64>
    4b82:	4606      	mov	r6, r0
    if (val == 0) {
    4b84:	2d00      	cmp	r5, #0
    4b86:	d09b      	beq.n	4ac0 <build_body+0x4d4>
    } else if (val < 32) {
    4b88:	2d1f      	cmp	r5, #31
    4b8a:	f990 c001 	ldrsb.w	ip, [r0, #1]
    4b8e:	d84f      	bhi.n	4c30 <build_body+0x644>
        emit4(state, _thumb32_LSRW_IMM_T2(tmp2[1], rd[1], val, FLAG_S));
    4b90:	4661      	mov	r1, ip
    4b92:	2301      	movs	r3, #1
    4b94:	462a      	mov	r2, r5
    4b96:	2008      	movs	r0, #8
    4b98:	f7ff f838 	bl	3c0c <_thumb32_LSRW_IMM_T2>
    4b9c:	4601      	mov	r1, r0
    4b9e:	4620      	mov	r0, r4
    4ba0:	f00d fed9 	bl	12956 <emit4>
        emit4(state, _thumb32_ORRW_REG_T2(rd[1], tmp2[1], rd[0], 32 - val, SRTYPE_LSL, FLAG_S));
    4ba4:	f1c5 0320 	rsb	r3, r5, #32
             | (Rd << 8) | (imm2 << 6) | (srtype << 4) | (Rm); 
    4ba8:	f996 2001 	ldrsb.w	r2, [r6, #1]
    4bac:	0199      	lsls	r1, r3, #6
    4bae:	b2c9      	uxtb	r1, r1
    u32 inst = (THUMB2_ORRW_REG) | (flagS << 20) | (Rn << 16) | (imm3 << 12)
    4bb0:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    u32 imm3 = (shiftImm5 >> 2) & 0b111;
    4bb4:	109b      	asrs	r3, r3, #2
    u32 inst = (THUMB2_ORRW_REG) | (flagS << 20) | (Rn << 16) | (imm3 << 12)
    4bb6:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
             | (Rd << 8) | (imm2 << 6) | (srtype << 4) | (Rm); 
    4bba:	f996 3000 	ldrsb.w	r3, [r6]
    u32 inst = (THUMB2_ORRW_REG) | (flagS << 20) | (Rn << 16) | (imm3 << 12)
    4bbe:	4319      	orrs	r1, r3
    4bc0:	f041 416a 	orr.w	r1, r1, #3925868544	; 0xea000000
    4bc4:	f441 01b0 	orr.w	r1, r1, #5767168	; 0x580000
    4bc8:	f00d fec5 	bl	12956 <emit4>
    return (THUMB2_ASRW_IMM) | (flagS << 20) | (imm3 << 12) | (Rd << 8) | (imm2 << 6) | (Rm);
    4bcc:	01ab      	lsls	r3, r5, #6
        emit4(state, _thumb32_ASRW_IMM_T2(rd[0], rd[0], val, FLAG_S));
    4bce:	f996 2000 	ldrsb.w	r2, [r6]
    u32 imm3 = (imm5 >> 2) & 0b111;
    4bd2:	10a9      	asrs	r1, r5, #2
    return (THUMB2_ASRW_IMM) | (flagS << 20) | (imm3 << 12) | (Rd << 8) | (imm2 << 6) | (Rm);
    4bd4:	b2db      	uxtb	r3, r3
    4bd6:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
    4bda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4bde:	4912      	ldr	r1, [pc, #72]	; (4c28 <build_body+0x63c>)
    4be0:	4313      	orrs	r3, r2
    4be2:	4319      	orrs	r1, r3
    4be4:	e757      	b.n	4a96 <build_body+0x4aa>
    4be6:	bf00      	nop
    4be8:	0001a0ee 	.word	0x0001a0ee
    4bec:	fbb0f0f0 	.word	0xfbb0f0f0
    4bf0:	fbb0fcf0 	.word	0xfbb0fcf0
    4bf4:	fb00c010 	.word	0xfb00c010
    4bf8:	0001a11f 	.word	0x0001a11f
    4bfc:	0001a0ec 	.word	0x0001a0ec
    4c00:	f1d00c20 	.word	0xf1d00c20
    4c04:	f2a00920 	.word	0xf2a00920
    4c08:	fa30fe00 	.word	0xfa30fe00
    4c0c:	fa10f00c 	.word	0xfa10f00c
    4c10:	fa30f009 	.word	0xfa30f009
    4c14:	fa30fc00 	.word	0xfa30fc00
    4c18:	0001a0d4 	.word	0x0001a0d4
    4c1c:	fa00f009 	.word	0xfa00f009
    4c20:	fa40f009 	.word	0xfa40f009
    4c24:	fa50fc00 	.word	0xfa50fc00
    4c28:	ea5f0020 	.word	0xea5f0020
    4c2c:	ea5e0e00 	.word	0xea5e0e00
    } else if (val == 32) {
    4c30:	2d20      	cmp	r5, #32
    4c32:	f990 1000 	ldrsb.w	r1, [r0]
    4c36:	f8df 8358 	ldr.w	r8, [pc, #856]	; 4f90 <build_body+0x9a4>
    4c3a:	d10a      	bne.n	4c52 <build_body+0x666>
        _emit_mov_reg(state, rd[0], rd[1]);
    4c3c:	4662      	mov	r2, ip
    4c3e:	4620      	mov	r0, r4
    4c40:	f00d ff0a 	bl	12a58 <_emit_mov_reg>
        emit4(state, _thumb32_ASRW_IMM_T2(rd[0], rd[0], 31, FLAG_S));
    4c44:	f996 1000 	ldrsb.w	r1, [r6]
    4c48:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    4c4c:	ea41 0108 	orr.w	r1, r1, r8
    4c50:	e721      	b.n	4a96 <build_body+0x4aa>
        emit4(state, _thumb32_ASRW_IMM_T2(rd[1], rd[0], val - 32, FLAG_S));
    4c52:	3d20      	subs	r5, #32
    4c54:	01a8      	lsls	r0, r5, #6
    4c56:	b2c0      	uxtb	r0, r0
    4c58:	02ad      	lsls	r5, r5, #10
    4c5a:	ea40 230c 	orr.w	r3, r0, ip, lsl #8
    4c5e:	f405 45e0 	and.w	r5, r5, #28672	; 0x7000
    4c62:	432b      	orrs	r3, r5
    4c64:	430b      	orrs	r3, r1
    4c66:	49be      	ldr	r1, [pc, #760]	; (4f60 <build_body+0x974>)
    4c68:	4620      	mov	r0, r4
    4c6a:	4319      	orrs	r1, r3
    4c6c:	f00d fe73 	bl	12956 <emit4>
    4c70:	e7e8      	b.n	4c44 <build_body+0x658>
        emit_alu32_imm(state, dst_lo, 0, BPF_OP(code));
    4c72:	2380      	movs	r3, #128	; 0x80
    4c74:	2200      	movs	r2, #0
    4c76:	e66a      	b.n	494e <build_body+0x362>
    rd = arm_bpf_get_reg64(state, dst, tmp);
    4c78:	4aba      	ldr	r2, [pc, #744]	; (4f64 <build_body+0x978>)
    return (THUMB2_RSBW_IMM) | (i << 26) | (flagS << 20) | (Rn << 16) | (imm3 << 12) | (Rd << 8) | (imm8);
    4c7a:	4ebb      	ldr	r6, [pc, #748]	; (4f68 <build_body+0x97c>)
    4c7c:	4639      	mov	r1, r7
    4c7e:	4620      	mov	r0, r4
    4c80:	f00d fede 	bl	12a40 <arm_bpf_get_reg64>
    4c84:	f990 3001 	ldrsb.w	r3, [r0, #1]
    4c88:	0219      	lsls	r1, r3, #8
    4c8a:	4605      	mov	r5, r0
    4c8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    emit4(state, _thumb32_RSBW_IMM_T2(rd[1], rd[1], 0, FLAG_S));
    4c90:	4331      	orrs	r1, r6
    4c92:	4620      	mov	r0, r4
    4c94:	f00d fe5f 	bl	12956 <emit4>
    4c98:	f995 3000 	ldrsb.w	r3, [r5]
    4c9c:	0219      	lsls	r1, r3, #8
    4c9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    emit4(state, _thumb32_RSBW_IMM_T2(rd[0], rd[0], 0, FLAG_S));
    4ca2:	4331      	orrs	r1, r6
    4ca4:	f00d fe57 	bl	12956 <emit4>
    arm_bpf_put_reg64(state, dst, rd);
    4ca8:	462a      	mov	r2, r5
    4caa:	e70a      	b.n	4ac2 <build_body+0x4d6>
        switch (BPF_SRC(code)) {
    4cac:	f016 0608 	ands.w	r6, r6, #8
    4cb0:	d004      	beq.n	4cbc <build_body+0x6d0>
    4cb2:	2e00      	cmp	r6, #0
    4cb4:	f43f adc1 	beq.w	483a <build_body+0x24e>
            emit_a32_mul_r64(state, dst, src);
    4cb8:	4642      	mov	r2, r8
    4cba:	e006      	b.n	4cca <build_body+0x6de>
            emit_mov_se_imm64(state, is64, tmp2, imm);
    4cbc:	4aab      	ldr	r2, [pc, #684]	; (4f6c <build_body+0x980>)
    4cbe:	9903      	ldr	r1, [sp, #12]
    4cc0:	462b      	mov	r3, r5
    4cc2:	4620      	mov	r0, r4
    4cc4:	f00d ff68 	bl	12b98 <emit_mov_se_imm64>
            emit_a32_mul_r64(state, dst, tmp2);
    4cc8:	4aa8      	ldr	r2, [pc, #672]	; (4f6c <build_body+0x980>)
            emit_a32_mul_r64(state, dst, src);
    4cca:	4639      	mov	r1, r7
    4ccc:	4620      	mov	r0, r4
    4cce:	f7ff f81b 	bl	3d08 <emit_a32_mul_r64>
        if (ret > 0) { // load value, skip
    4cd2:	e5b2      	b.n	483a <build_body+0x24e>
        DEBUG_LOG("TODO op: %x pc: %d\n", code, pc);
    4cd4:	4652      	mov	r2, sl
    4cd6:	4631      	mov	r1, r6
    4cd8:	48a5      	ldr	r0, [pc, #660]	; (4f70 <build_body+0x984>)
    4cda:	f00c fbf8 	bl	114ce <debug_log>
    4cde:	e61e      	b.n	491e <build_body+0x332>
        emit_mov_i64(state, dst, val);
    4ce0:	68c3      	ldr	r3, [r0, #12]
    4ce2:	462a      	mov	r2, r5
    4ce4:	4639      	mov	r1, r7
    4ce6:	4620      	mov	r0, r4
    4ce8:	f7fe fff2 	bl	3cd0 <emit_mov_i64>
            if (!state->needGen) {
    4cec:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
            i++;
    4cf0:	f10b 0b01 	add.w	fp, fp, #1
            if (!state->needGen) {
    4cf4:	b91b      	cbnz	r3, 4cfe <build_body+0x712>
                state->offsets[i] = state->idx;
    4cf6:	69e3      	ldr	r3, [r4, #28]
    4cf8:	6922      	ldr	r2, [r4, #16]
    4cfa:	f843 202b 	str.w	r2, [r3, fp, lsl #2]
    for (int i = 0; i < inst_num; i++) {
    4cfe:	f10b 0b01 	add.w	fp, fp, #1
    4d02:	e47d      	b.n	4600 <build_body+0x14>
        rn = arm_bpf_get_reg32(state, src_lo, tmp2[1]);
    4d04:	f998 1001 	ldrsb.w	r1, [r8, #1]
    4d08:	2208      	movs	r2, #8
    4d0a:	4620      	mov	r0, r4
    4d0c:	f00d fe2d 	bl	1296a <arm_bpf_get_reg32>
        emit_ldx_reg(state, dst, rn, off, BPF_SIZE(code));
    4d10:	f006 0618 	and.w	r6, r6, #24
    4d14:	4602      	mov	r2, r0
    4d16:	9600      	str	r6, [sp, #0]
    4d18:	464b      	mov	r3, r9
    4d1a:	4639      	mov	r1, r7
    4d1c:	4620      	mov	r0, r4
    4d1e:	f7ff fb93 	bl	4448 <emit_ldx_reg>
        if (ret > 0) { // load value, skip
    4d22:	e58a      	b.n	483a <build_body+0x24e>
        switch (BPF_SIZE(code))
    4d24:	f006 0618 	and.w	r6, r6, #24
    4d28:	2e08      	cmp	r6, #8
    4d2a:	d001      	beq.n	4d30 <build_body+0x744>
    4d2c:	d806      	bhi.n	4d3c <build_body+0x750>
    4d2e:	b976      	cbnz	r6, 4d4e <build_body+0x762>
            emit_mov_imm(state, tmp2[1], imm);
    4d30:	462a      	mov	r2, r5
    4d32:	2108      	movs	r1, #8
    4d34:	4620      	mov	r0, r4
    4d36:	f00d fee7 	bl	12b08 <emit_mov_imm>
            break;
    4d3a:	e008      	b.n	4d4e <build_body+0x762>
    4d3c:	2e10      	cmp	r6, #16
    4d3e:	d0f7      	beq.n	4d30 <build_body+0x744>
    4d40:	2e18      	cmp	r6, #24
    4d42:	d104      	bne.n	4d4e <build_body+0x762>
    if (is64) {
    4d44:	462a      	mov	r2, r5
    4d46:	4989      	ldr	r1, [pc, #548]	; (4f6c <build_body+0x980>)
    4d48:	4620      	mov	r0, r4
    4d4a:	f00d ff1e 	bl	12b8a <emit_mov_se_imm64.part.9>
        emit_str_reg(state, dst_lo, tmp2, off, BPF_SIZE(code));
    4d4e:	4a87      	ldr	r2, [pc, #540]	; (4f6c <build_body+0x980>)
    4d50:	9600      	str	r6, [sp, #0]
    4d52:	464b      	mov	r3, r9
        emit_str_reg(state, dst_lo, rs, off, BPF_SIZE(code));
    4d54:	f997 1001 	ldrsb.w	r1, [r7, #1]
    4d58:	4620      	mov	r0, r4
    4d5a:	f7ff f9f1 	bl	4140 <emit_str_reg>
        if (ret > 0) { // load value, skip
    4d5e:	e56c      	b.n	483a <build_body+0x24e>
        rs = arm_bpf_get_reg64(state, src, tmp2);
    4d60:	4a82      	ldr	r2, [pc, #520]	; (4f6c <build_body+0x980>)
    4d62:	4641      	mov	r1, r8
    4d64:	4620      	mov	r0, r4
    4d66:	f00d fe6b 	bl	12a40 <arm_bpf_get_reg64>
        emit_str_reg(state, dst_lo, rs, off, BPF_SIZE(code));
    4d6a:	f006 0618 	and.w	r6, r6, #24
    4d6e:	9600      	str	r6, [sp, #0]
    4d70:	464b      	mov	r3, r9
    4d72:	4602      	mov	r2, r0
    4d74:	e7ee      	b.n	4d54 <build_body+0x768>
        if (BPF_SRC(code) == EBPF_SRC_REG) {
    4d76:	0732      	lsls	r2, r6, #28
    4d78:	d531      	bpl.n	4dde <build_body+0x7f2>
            rm = arm_bpf_get_reg32(state, src_hi, tmp2[0]);
    4d7a:	f913 1011 	ldrsb.w	r1, [r3, r1, lsl #1]
    4d7e:	2209      	movs	r2, #9
    4d80:	4620      	mov	r0, r4
    4d82:	f00d fdf2 	bl	1296a <arm_bpf_get_reg32>
            rn = arm_bpf_get_reg32(state, src_lo, tmp2[1]);
    4d86:	f998 1001 	ldrsb.w	r1, [r8, #1]
            rm = arm_bpf_get_reg32(state, src_hi, tmp2[0]);
    4d8a:	4605      	mov	r5, r0
            rn = arm_bpf_get_reg32(state, src_lo, tmp2[1]);
    4d8c:	2208      	movs	r2, #8
    4d8e:	4620      	mov	r0, r4
    4d90:	f00d fdeb 	bl	1296a <arm_bpf_get_reg32>
    4d94:	4680      	mov	r8, r0
        rd = arm_bpf_get_reg64(state, dst, tmp);
    4d96:	4639      	mov	r1, r7
    4d98:	4a72      	ldr	r2, [pc, #456]	; (4f64 <build_body+0x978>)
    4d9a:	4620      	mov	r0, r4
    4d9c:	f00d fe50 	bl	12a40 <arm_bpf_get_reg64>
        _emit_cmp_cond(state, rd[0], rd[1], rm, rn, BPF_OP(code), BPF_CLASS(code) == EBPF_CLS_JMP);
    4da0:	f026 060f 	bic.w	r6, r6, #15
    4da4:	b2f3      	uxtb	r3, r6
    switch (op)
    4da6:	2b60      	cmp	r3, #96	; 0x60
        _emit_cmp_cond(state, rd[0], rd[1], rm, rn, BPF_OP(code), BPF_CLASS(code) == EBPF_CLS_JMP);
    4da8:	f990 7000 	ldrsb.w	r7, [r0]
    4dac:	f990 9001 	ldrsb.w	r9, [r0, #1]
    switch (op)
    4db0:	d06d      	beq.n	4e8e <build_body+0x8a2>
    4db2:	d825      	bhi.n	4e00 <build_body+0x814>
    4db4:	2b30      	cmp	r3, #48	; 0x30
    4db6:	d004      	beq.n	4dc2 <build_body+0x7d6>
    4db8:	d81e      	bhi.n	4df8 <build_body+0x80c>
    4dba:	2b10      	cmp	r3, #16
    4dbc:	d001      	beq.n	4dc2 <build_body+0x7d6>
    4dbe:	2b20      	cmp	r3, #32
    4dc0:	d129      	bne.n	4e16 <build_body+0x82a>
        if (is_jmp64) {
    4dc2:	9b02      	ldr	r3, [sp, #8]
    4dc4:	2b05      	cmp	r3, #5
    4dc6:	d104      	bne.n	4dd2 <build_body+0x7e6>
            _emit_cmp_reg(state, rd, rm);
    4dc8:	462a      	mov	r2, r5
    4dca:	4639      	mov	r1, r7
    4dcc:	4620      	mov	r0, r4
    4dce:	f00d ff2b 	bl	12c28 <_emit_cmp_reg>
             _emit_cmp_reg(state, rt, rn);
    4dd2:	4642      	mov	r2, r8
    4dd4:	4649      	mov	r1, r9
    4dd6:	4620      	mov	r0, r4
    4dd8:	f00d ff26 	bl	12c28 <_emit_cmp_reg>
    4ddc:	e01b      	b.n	4e16 <build_body+0x82a>
            if (off == 0)
    4dde:	f1b9 0f00 	cmp.w	r9, #0
    4de2:	f43f ad2a 	beq.w	483a <build_body+0x24e>
    if (is64) {
    4de6:	462a      	mov	r2, r5
    4de8:	4960      	ldr	r1, [pc, #384]	; (4f6c <build_body+0x980>)
    4dea:	4620      	mov	r0, r4
    4dec:	f00d fecd 	bl	12b8a <emit_mov_se_imm64.part.9>
            rn = tmp2[1];
    4df0:	f04f 0808 	mov.w	r8, #8
            rm = tmp2[0];
    4df4:	2509      	movs	r5, #9
    4df6:	e7ce      	b.n	4d96 <build_body+0x7aa>
    switch (op)
    4df8:	2b40      	cmp	r3, #64	; 0x40
    4dfa:	d02a      	beq.n	4e52 <build_body+0x866>
    4dfc:	2b50      	cmp	r3, #80	; 0x50
    4dfe:	e7df      	b.n	4dc0 <build_body+0x7d4>
    4e00:	2bb0      	cmp	r3, #176	; 0xb0
    4e02:	d0de      	beq.n	4dc2 <build_body+0x7d6>
    4e04:	d803      	bhi.n	4e0e <build_body+0x822>
    4e06:	2b70      	cmp	r3, #112	; 0x70
    4e08:	d050      	beq.n	4eac <build_body+0x8c0>
    4e0a:	2ba0      	cmp	r3, #160	; 0xa0
    4e0c:	e7d8      	b.n	4dc0 <build_body+0x7d4>
    4e0e:	2bc0      	cmp	r3, #192	; 0xc0
    4e10:	d04c      	beq.n	4eac <build_body+0x8c0>
    4e12:	2bd0      	cmp	r3, #208	; 0xd0
    4e14:	d03b      	beq.n	4e8e <build_body+0x8a2>
        if (!_use_b4(state)) {
    4e16:	6863      	ldr	r3, [r4, #4]
    if (!state->needGen) {
    4e18:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
            bsize = 2;
    4e1c:	2b14      	cmp	r3, #20
    4e1e:	bfcc      	ite	gt
    4e20:	2004      	movgt	r0, #4
    4e22:	2002      	movle	r0, #2
    if (!state->needGen) {
    4e24:	b141      	cbz	r1, 4e38 <build_body+0x84c>
    to = state->offsets[bpf_to];
    4e26:	69e2      	ldr	r2, [r4, #28]
    return to - from - 4;
    4e28:	9b06      	ldr	r3, [sp, #24]
    4e2a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    from = state->offsets[bpf_from] - bsize;
    4e2e:	f852 302a 	ldr.w	r3, [r2, sl, lsl #2]
    return to - from - 4;
    4e32:	3904      	subs	r1, #4
    from = state->offsets[bpf_from] - bsize;
    4e34:	1a1b      	subs	r3, r3, r0
    return to - from - 4;
    4e36:	1ac9      	subs	r1, r1, r3
        _emit_jump(state, jmp_offset, BPF_OP(code));
    4e38:	b276      	sxtb	r6, r6
    switch (op)
    4e3a:	2e40      	cmp	r6, #64	; 0x40
    4e3c:	d048      	beq.n	4ed0 <build_body+0x8e4>
    4e3e:	dc40      	bgt.n	4ec2 <build_body+0x8d6>
    4e40:	2e20      	cmp	r6, #32
    4e42:	d04a      	beq.n	4eda <build_body+0x8ee>
    4e44:	2e30      	cmp	r6, #48	; 0x30
    4e46:	d04a      	beq.n	4ede <build_body+0x8f2>
    4e48:	2e10      	cmp	r6, #16
    4e4a:	f47f acf6 	bne.w	483a <build_body+0x24e>
        _emit_b_cond(state, jmp_off, COND_EQ);
    4e4e:	2200      	movs	r2, #0
    4e50:	e03f      	b.n	4ed2 <build_body+0x8e6>
        if (is_jmp64) {
    4e52:	9b02      	ldr	r3, [sp, #8]
    4e54:	ea48 4109 	orr.w	r1, r8, r9, lsl #16
    4e58:	2b05      	cmp	r3, #5
            emit4(state, _thumb32_ADDW_REG_T3(ARM_IP, rt, rn, 0, SRTYPE_LSL, FLAG_NOS));
    4e5a:	f041 416b 	orr.w	r1, r1, #3942645760	; 0xeb000000
        if (is_jmp64) {
    4e5e:	d111      	bne.n	4e84 <build_body+0x898>
            emit4(state, _thumb32_ADDW_REG_T3(ARM_IP, rt, rn, 0, SRTYPE_LSL, FLAG_NOS));
    4e60:	f441 6140 	orr.w	r1, r1, #3072	; 0xc00
    4e64:	4620      	mov	r0, r4
    4e66:	f00d fd76 	bl	12956 <emit4>
        (imm2 << 6) | (srtype << 4) | (Rm);
    4e6a:	ea45 4107 	orr.w	r1, r5, r7, lsl #16
            emit4(state, _thumb32_ADDW_REG_T3(ARM_LR, rd, rm, 0, SRTYPE_LSL, FLAG_NOS));
    4e6e:	f041 416b 	orr.w	r1, r1, #3942645760	; 0xeb000000
    4e72:	f441 6160 	orr.w	r1, r1, #3584	; 0xe00
    4e76:	f00d fd6e 	bl	12956 <emit4>
            emit4(state, _thumb32_ORRW_REG_T2(ARM_IP, ARM_LR, ARM_IP, 0, SRTYPE_LSL, FLAG_S));
    4e7a:	493e      	ldr	r1, [pc, #248]	; (4f74 <build_body+0x988>)
            emit4(state, _thumb32_SBCW_T2(ARM_IP, rd, rm, 0, SRTYPE_LSL, FLAG_S));
    4e7c:	4620      	mov	r0, r4
    4e7e:	f00d fd6a 	bl	12956 <emit4>
    4e82:	e7c8      	b.n	4e16 <build_body+0x82a>
            emit4(state, _thumb32_ADDW_REG_T3(ARM_IP, rt, rn, 0, SRTYPE_LSL, FLAG_S));
    4e84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
            emit4(state, _thumb32_SBCW_T2(ARM_IP, rd, rm, 0, SRTYPE_LSL, FLAG_S));
    4e88:	f441 6140 	orr.w	r1, r1, #3072	; 0xc00
    4e8c:	e7f6      	b.n	4e7c <build_body+0x890>
        _emit_cmp_reg(state, rn, rt); // low cmp: rn - rt
    4e8e:	464a      	mov	r2, r9
    4e90:	4641      	mov	r1, r8
    4e92:	4620      	mov	r0, r4
    4e94:	f00d fec8 	bl	12c28 <_emit_cmp_reg>
        if (is_jmp64) { // subtract with carray b - a, rm - rd
    4e98:	9b02      	ldr	r3, [sp, #8]
    4e9a:	2b05      	cmp	r3, #5
    4e9c:	d1bb      	bne.n	4e16 <build_body+0x82a>
         (imm2 << 6) | (srtype << 4) | (Rm);
    4e9e:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
            emit4(state, _thumb32_SBCW_T2(ARM_IP, rd, rm, 0, SRTYPE_LSL, FLAG_S));
    4ea2:	f041 416b 	orr.w	r1, r1, #3942645760	; 0xeb000000
    4ea6:	f441 01e0 	orr.w	r1, r1, #7340032	; 0x700000
    4eaa:	e7ed      	b.n	4e88 <build_body+0x89c>
        _emit_cmp_reg(state, rt, rn);
    4eac:	4642      	mov	r2, r8
    4eae:	4649      	mov	r1, r9
    4eb0:	4620      	mov	r0, r4
    4eb2:	f00d feb9 	bl	12c28 <_emit_cmp_reg>
        if (is_jmp64) {
    4eb6:	9b02      	ldr	r3, [sp, #8]
    4eb8:	2b05      	cmp	r3, #5
    4eba:	d1ac      	bne.n	4e16 <build_body+0x82a>
    4ebc:	ea45 4107 	orr.w	r1, r5, r7, lsl #16
    4ec0:	e7ef      	b.n	4ea2 <build_body+0x8b6>
    switch (op)
    4ec2:	2e60      	cmp	r6, #96	; 0x60
    4ec4:	d00d      	beq.n	4ee2 <build_body+0x8f6>
    4ec6:	2e70      	cmp	r6, #112	; 0x70
    4ec8:	d00d      	beq.n	4ee6 <build_body+0x8fa>
    4eca:	2e50      	cmp	r6, #80	; 0x50
    4ecc:	f47f acb5 	bne.w	483a <build_body+0x24e>
        _emit_b_cond(state, jmp_off, COND_NE);
    4ed0:	2201      	movs	r2, #1
        _emit_b_cond(state, jmp_off, COND_EQ);
    4ed2:	4620      	mov	r0, r4
    4ed4:	f7fe ff76 	bl	3dc4 <_emit_b_cond>
        if (ret > 0) { // load value, skip
    4ed8:	e4af      	b.n	483a <build_body+0x24e>
        _emit_b_cond(state, jmp_off, COND_HI);
    4eda:	2208      	movs	r2, #8
    4edc:	e7f9      	b.n	4ed2 <build_body+0x8e6>
        _emit_b_cond(state, jmp_off, COND_CS);
    4ede:	2202      	movs	r2, #2
    4ee0:	e7f7      	b.n	4ed2 <build_body+0x8e6>
        _emit_b_cond(state, jmp_off, COND_LT);
    4ee2:	220b      	movs	r2, #11
    4ee4:	e7f5      	b.n	4ed2 <build_body+0x8e6>
        _emit_b_cond(state, jmp_off, COND_GE);
    4ee6:	220a      	movs	r2, #10
    4ee8:	e7f3      	b.n	4ed2 <build_body+0x8e6>
        if (off == 0)
    4eea:	f1b9 0f00 	cmp.w	r9, #0
    4eee:	f43f aca4 	beq.w	483a <build_body+0x24e>
    if (!state->needGen) {
    4ef2:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    4ef6:	b139      	cbz	r1, 4f08 <build_body+0x91c>
    to = state->offsets[bpf_to];
    4ef8:	69e3      	ldr	r3, [r4, #28]
    return to - from - 4;
    4efa:	9a06      	ldr	r2, [sp, #24]
    4efc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    from = state->offsets[bpf_from] - bsize;
    4f00:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
    4f04:	1ac9      	subs	r1, r1, r3
    return to - from - 4;
    4f06:	3902      	subs	r1, #2
        _emit_b(state, jmp_offset);
    4f08:	4620      	mov	r0, r4
    4f0a:	f7fe ffcb 	bl	3ea4 <_emit_b>
        if (ret > 0) { // load value, skip
    4f0e:	e494      	b.n	483a <build_body+0x24e>
        const u32 func = *(u32 *) (state->__bpf_call_base + imm * 4);
    4f10:	4a19      	ldr	r2, [pc, #100]	; (4f78 <build_body+0x98c>)
    4f12:	6a23      	ldr	r3, [r4, #32]
    4f14:	1e91      	subs	r1, r2, #2
    4f16:	4620      	mov	r0, r4
    4f18:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
    if (!is64) {
    4f1c:	f7fe feaa 	bl	3c74 <emit_mov_reg64.part.7>
    4f20:	4a16      	ldr	r2, [pc, #88]	; (4f7c <build_body+0x990>)
    4f22:	4620      	mov	r0, r4
    4f24:	1e91      	subs	r1, r2, #2
    4f26:	f7fe fea5 	bl	3c74 <emit_mov_reg64.part.7>
        emit_push_r64(state, r5);
    4f2a:	4620      	mov	r0, r4
    4f2c:	4914      	ldr	r1, [pc, #80]	; (4f80 <build_body+0x994>)
    4f2e:	f7fe ff83 	bl	3e38 <emit_push_r64>
        emit_push_r64(state, r4);
    4f32:	4620      	mov	r0, r4
    4f34:	4913      	ldr	r1, [pc, #76]	; (4f84 <build_body+0x998>)
    4f36:	f7fe ff7f 	bl	3e38 <emit_push_r64>
        emit_push_r64(state, r3);
    4f3a:	4620      	mov	r0, r4
    4f3c:	4912      	ldr	r1, [pc, #72]	; (4f88 <build_body+0x99c>)
    4f3e:	f7fe ff7b 	bl	3e38 <emit_push_r64>
        emit_mov_imm(state, tmp[1], func);
    4f42:	462a      	mov	r2, r5
    4f44:	4620      	mov	r0, r4
    4f46:	2106      	movs	r1, #6
    4f48:	f00d fdde 	bl	12b08 <emit_mov_imm>
        emit2(state, _thumb16_BLX_REG_T1(tmp[1]));
    4f4c:	f244 71b0 	movw	r1, #18352	; 0x47b0
    4f50:	4620      	mov	r0, r4
    4f52:	f00d fcf6 	bl	12942 <emit2>
        emit4(state, _thumb32_ADD_IMM_T4(dst, src, val));
    4f56:	490d      	ldr	r1, [pc, #52]	; (4f8c <build_body+0x9a0>)
    4f58:	f00d fcfd 	bl	12956 <emit4>
        if (ret > 0) { // load value, skip
    4f5c:	e46d      	b.n	483a <build_body+0x24e>
    4f5e:	bf00      	nop
    4f60:	ea5f0020 	.word	0xea5f0020
    4f64:	0001a0ec 	.word	0x0001a0ec
    4f68:	f1d00000 	.word	0xf1d00000
    4f6c:	0001a0ee 	.word	0x0001a0ee
    4f70:	0001a0f2 	.word	0x0001a0f2
    4f74:	ea5e0c0c 	.word	0xea5e0c0c
    4f78:	0001a0d6 	.word	0x0001a0d6
    4f7c:	0001a0d8 	.word	0x0001a0d8
    4f80:	0001a0de 	.word	0x0001a0de
    4f84:	0001a0dc 	.word	0x0001a0dc
    4f88:	0001a0da 	.word	0x0001a0da
    4f8c:	f20d0d18 	.word	0xf20d0d18
    4f90:	ea5f70e0 	.word	0xea5f70e0
        if (pc == state->inst_num - 1) 
    4f94:	6863      	ldr	r3, [r4, #4]
    4f96:	3b01      	subs	r3, #1
    4f98:	459a      	cmp	sl, r3
    4f9a:	f43f ac4e 	beq.w	483a <build_body+0x24e>
    if (!state->needGen) {
    4f9e:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    4fa2:	2900      	cmp	r1, #0
    4fa4:	d0b0      	beq.n	4f08 <build_body+0x91c>
    return to - from - 4;
    4fa6:	6961      	ldr	r1, [r4, #20]
    4fa8:	6923      	ldr	r3, [r4, #16]
    4faa:	3904      	subs	r1, #4
    4fac:	1ac9      	subs	r1, r1, r3
    4fae:	e7ab      	b.n	4f08 <build_body+0x91c>
        DEBUG_LOG("Unsupport op: %x pc: %d\n", code, pc);
    4fb0:	4652      	mov	r2, sl
    4fb2:	4631      	mov	r1, r6
    4fb4:	4801      	ldr	r0, [pc, #4]	; (4fbc <build_body+0x9d0>)
    4fb6:	f00c fa8a 	bl	114ce <debug_log>
        if (ret > 0) { // load value, skip
    4fba:	e43e      	b.n	483a <build_body+0x24e>
    4fbc:	0001a106 	.word	0x0001a106

00004fc0 <jit_compile>:
    emit4(state, _thumb32_ORRW_REG_T2(0, 0, 1, 0, SRTYPE_LSL, FLAG_S));
    _emit_b_cond(state, 1, COND_NE);
    emit_mov_imm(state, 0, 2);
}

void jit_compile(jit_state *state) {
    4fc0:	b538      	push	{r3, r4, r5, lr}
    // test_ldr(state);
    // test_alu(state);
    // return state;
    // PrePass: clac offset
	state->idx = 0;
    4fc2:	2500      	movs	r5, #0
void jit_compile(jit_state *state) {
    4fc4:	4604      	mov	r4, r0
	state->idx = 0;
    4fc6:	6105      	str	r5, [r0, #16]
    state->needGen = false;
    4fc8:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
    build_prologue(state);
    4fcc:	f7ff f88c 	bl	40e8 <build_prologue>
    build_body(state);
    4fd0:	4620      	mov	r0, r4
    4fd2:	f7ff fb0b 	bl	45ec <build_body>
    state->epilogue_offset = state->idx;
    4fd6:	6923      	ldr	r3, [r4, #16]
    // for (int i = 0; i < state->inst_num; i++) {
    //     DEBUG_LOG("build offset: i=%d %d\n", i, state->offsets[i]);
    // }
    // GenPass: generate jit code
    state->idx = 0;
    4fd8:	e9c4 5304 	strd	r5, r3, [r4, #16]
    state->needGen = true;
    4fdc:	2301      	movs	r3, #1
    4fde:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    // DEBUG_LOG("epil: %d\n", epilogue_offset(state));
    build_prologue(state);
    4fe2:	4620      	mov	r0, r4
    4fe4:	f7ff f880 	bl	40e8 <build_prologue>

    // test_branch(state);
    build_body(state);
    4fe8:	4620      	mov	r0, r4
    4fea:	f7ff faff 	bl	45ec <build_body>
    emit4(state, _thumb32_MOVW_REG_T3(dst, src, FLAG_NOS));
    4fee:	4904      	ldr	r1, [pc, #16]	; (5000 <jit_compile+0x40>)
    4ff0:	4620      	mov	r0, r4
    4ff2:	f00d fcb0 	bl	12956 <emit4>
    emit4(state, _thumb32_POPW_T2(CALLEE_POP_MASK));
    4ff6:	4903      	ldr	r1, [pc, #12]	; (5004 <jit_compile+0x44>)
    // DEBUG_LOG("epilogue_offset PASS1:%d PASS2:%d\n", state->epilogue_offset, state->idx);
    build_epilogue(state);

    // return state;
}
    4ff8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    emit4(state, _thumb32_POPW_T2(CALLEE_POP_MASK));
    4ffc:	f00d bcab 	b.w	12956 <emit4>
    5000:	ea4f0d0b 	.word	0xea4f0d0b
    5004:	e8bd8bf0 	.word	0xe8bd8bf0

00005008 <main>:

static void load_fixed_patch_0(void);
static void ebpf_test();
// extern void arm_core_mpu_disable();
void main(void)
{
    5008:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
	#define USE_JIT
	#ifdef USE_JIT
	// disable mpu
	arm_core_mpu_disable();
    500c:	f006 face 	bl	b5ac <arm_core_mpu_disable>
	// https://lists.zephyrproject.org/g/users/topic/random_fault_exception/30793151?p=
	// CONFIG_NO_OPTIMIZATIONS=y
	#endif

	console_init();
    5010:	f002 fb52 	bl	76b8 <console_init>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
    5014:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
    5018:	b9a3      	cbnz	r3, 5044 <main+0x3c>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
    501a:	f3ef 8314 	mrs	r3, CONTROL

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
    501e:	07db      	lsls	r3, r3, #31
    5020:	d510      	bpl.n	5044 <main+0x3c>
	register u32_t ret __asm__("r0") = arg1;
    5022:	480a      	ldr	r0, [pc, #40]	; (504c <main+0x44>)
	register u32_t r6 __asm__("r6") = call_id;
    5024:	266d      	movs	r6, #109	; 0x6d
	__asm__ volatile("svc %[svid]\n"
    5026:	df03      	svc	3
	//printk("Hello World! %s\n", CONFIG_BOARD);
	k_thread_start(cli_thread);

	//run_coap_server();
	profile_add_event("micro profile dynamic start");
    5028:	4809      	ldr	r0, [pc, #36]	; (5050 <main+0x48>)
    502a:	f7fe fca7 	bl	397c <profile_add_event>
	profile_add_event("micro profile fixed start");
    502e:	4809      	ldr	r0, [pc, #36]	; (5054 <main+0x4c>)
    5030:	f7fe fca4 	bl	397c <profile_add_event>
	profile_add_event("uart print profile start");
    5034:	4808      	ldr	r0, [pc, #32]	; (5058 <main+0x50>)
    5036:	f7fe fca1 	bl	397c <profile_add_event>
	profile_add_event("eBPF exec time evaluation start");
    503a:	4808      	ldr	r0, [pc, #32]	; (505c <main+0x54>)

}
    503c:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
	profile_add_event("eBPF exec time evaluation start");
    5040:	f7fe bc9c 	b.w	397c <profile_add_event>
    5044:	4801      	ldr	r0, [pc, #4]	; (504c <main+0x44>)
    5046:	f00b f949 	bl	102dc <z_impl_k_thread_start>
    504a:	e7ed      	b.n	5028 <main+0x20>
    504c:	2000259c 	.word	0x2000259c
    5050:	0001a139 	.word	0x0001a139
    5054:	0001a155 	.word	0x0001a155
    5058:	0001a16f 	.word	0x0001a16f
    505c:	0001a188 	.word	0x0001a188

00005060 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    5060:	2803      	cmp	r0, #3
{
    5062:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    5064:	d906      	bls.n	5074 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (fdtable[fd].obj == NULL) {
		errno = EBADF;
    5066:	f00f ffae 	bl	14fc6 <__errno>
    506a:	2309      	movs	r3, #9
    506c:	6003      	str	r3, [r0, #0]
    506e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return -1;
	}

	return 0;
}
    5072:	bd08      	pop	{r3, pc}
	if (fdtable[fd].obj == NULL) {
    5074:	4b03      	ldr	r3, [pc, #12]	; (5084 <_check_fd+0x24>)
    5076:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    507a:	2b00      	cmp	r3, #0
    507c:	d0f3      	beq.n	5066 <_check_fd+0x6>
	return 0;
    507e:	2000      	movs	r0, #0
    5080:	e7f7      	b.n	5072 <_check_fd+0x12>
    5082:	bf00      	nop
    5084:	20002620 	.word	0x20002620

00005088 <z_get_fd_obj_and_vtable>:

	return fd_entry->obj;
}

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable)
{
    5088:	b538      	push	{r3, r4, r5, lr}
    508a:	4604      	mov	r4, r0
    508c:	460d      	mov	r5, r1
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
    508e:	f7ff ffe7 	bl	5060 <_check_fd>
    5092:	2800      	cmp	r0, #0
		return NULL;
	}

	fd_entry = &fdtable[fd];
	*vtable = fd_entry->vtable;
    5094:	bfa1      	itttt	ge
    5096:	4b05      	ldrge	r3, [pc, #20]	; (50ac <z_get_fd_obj_and_vtable+0x24>)
    5098:	eb03 02c4 	addge.w	r2, r3, r4, lsl #3

	return fd_entry->obj;
    509c:	f853 0034 	ldrge.w	r0, [r3, r4, lsl #3]
	*vtable = fd_entry->vtable;
    50a0:	6852      	ldrge	r2, [r2, #4]
    50a2:	bfac      	ite	ge
    50a4:	602a      	strge	r2, [r5, #0]
		return NULL;
    50a6:	2000      	movlt	r0, #0
}
    50a8:	bd38      	pop	{r3, r4, r5, pc}
    50aa:	bf00      	nop
    50ac:	20002620 	.word	0x20002620

000050b0 <z_reserve_fd>:

int z_reserve_fd(void)
{
    50b0:	e92d 4150 	stmdb	sp!, {r4, r6, r8, lr}
 * @return true if the CPU is currently running with user permissions
 */
static inline bool _is_user_context(void)
{
#ifdef CONFIG_USERSPACE
	return z_arch_is_user_context();
    50b4:	f00d fdd4 	bl	12c60 <z_arch_is_user_context>

K_SYSCALL_DECLARE3(K_SYSCALL_K_STACK_POP, k_stack_pop, int, struct k_stack *, stack, u32_t *, data, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    50b8:	b1d8      	cbz	r0, 50f2 <z_reserve_fd+0x42>
	register u32_t ret __asm__("r0") = arg1;
    50ba:	4815      	ldr	r0, [pc, #84]	; (5110 <z_reserve_fd+0x60>)
	register u32_t r1 __asm__("r1") = arg2;
    50bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	register u32_t r6 __asm__("r6") = call_id;
    50c0:	2644      	movs	r6, #68	; 0x44
	__asm__ volatile("svc %[svid]\n"
    50c2:	df03      	svc	3
		if (fdtable[fd].obj == NULL) {
    50c4:	4b13      	ldr	r3, [pc, #76]	; (5114 <z_reserve_fd+0x64>)
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    50c6:	2400      	movs	r4, #0
		if (fdtable[fd].obj == NULL) {
    50c8:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
    50cc:	b1ba      	cbz	r2, 50fe <z_reserve_fd+0x4e>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    50ce:	3401      	adds	r4, #1
    50d0:	2c04      	cmp	r4, #4
    50d2:	d1f9      	bne.n	50c8 <z_reserve_fd+0x18>
	errno = ENFILE;
    50d4:	f00f ff77 	bl	14fc6 <__errno>
    50d8:	2317      	movs	r3, #23
    50da:	6003      	str	r3, [r0, #0]
	return -1;
    50dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    50e0:	f00d fdbe 	bl	12c60 <z_arch_is_user_context>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    50e4:	b178      	cbz	r0, 5106 <z_reserve_fd+0x56>
	register u32_t ret __asm__("r0") = arg1;
    50e6:	480a      	ldr	r0, [pc, #40]	; (5110 <z_reserve_fd+0x60>)
	register u32_t r6 __asm__("r6") = call_id;
    50e8:	2645      	movs	r6, #69	; 0x45
	__asm__ volatile("svc %[svid]\n"
    50ea:	df03      	svc	3
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
    50ec:	4620      	mov	r0, r4
    50ee:	e8bd 8150 	ldmia.w	sp!, {r4, r6, r8, pc}
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    50f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    50f6:	4806      	ldr	r0, [pc, #24]	; (5110 <z_reserve_fd+0x60>)
    50f8:	f00a fa52 	bl	f5a0 <z_impl_k_mutex_lock>
    50fc:	e7e2      	b.n	50c4 <z_reserve_fd+0x14>
		fdtable[fd].obj = FD_OBJ_RESERVED;
    50fe:	2201      	movs	r2, #1
    5100:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
    5104:	e7ec      	b.n	50e0 <z_reserve_fd+0x30>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    5106:	4802      	ldr	r0, [pc, #8]	; (5110 <z_reserve_fd+0x60>)
    5108:	f00a fad6 	bl	f6b8 <z_impl_k_mutex_unlock>
	return fd;
    510c:	e7ee      	b.n	50ec <z_reserve_fd+0x3c>
    510e:	bf00      	nop
    5110:	20011bc8 	.word	0x20011bc8
    5114:	20002620 	.word	0x20002620

00005118 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
	/* Assumes fd was already bounds-checked. */
	fdtable[fd].obj = obj;
    5118:	4b03      	ldr	r3, [pc, #12]	; (5128 <z_finalize_fd+0x10>)
    511a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	fdtable[fd].vtable = vtable;
    511e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    5122:	605a      	str	r2, [r3, #4]
}
    5124:	4770      	bx	lr
    5126:	bf00      	nop
    5128:	20002620 	.word	0x20002620

0000512c <z_free_fd>:

void z_free_fd(int fd)
{
	/* Assumes fd was already bounds-checked. */
	fdtable[fd].obj = NULL;
    512c:	4b02      	ldr	r3, [pc, #8]	; (5138 <z_free_fd+0xc>)
    512e:	2200      	movs	r2, #0
    5130:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
}
    5134:	4770      	bx	lr
    5136:	bf00      	nop
    5138:	20002620 	.word	0x20002620

0000513c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    513c:	680b      	ldr	r3, [r1, #0]
    513e:	3301      	adds	r3, #1
    5140:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    5142:	4b01      	ldr	r3, [pc, #4]	; (5148 <char_out+0xc>)
    5144:	681b      	ldr	r3, [r3, #0]
    5146:	4718      	bx	r3
    5148:	2000c694 	.word	0x2000c694

0000514c <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    514c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5150:	b085      	sub	sp, #20
    5152:	469b      	mov	fp, r3
    5154:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    5156:	f8df a090 	ldr.w	sl, [pc, #144]	; 51e8 <_printk_dec_ulong+0x9c>
    515a:	2c01      	cmp	r4, #1
    515c:	bfb8      	it	lt
    515e:	2401      	movlt	r4, #1
    5160:	2b01      	cmp	r3, #1
    5162:	bf0c      	ite	eq
    5164:	2330      	moveq	r3, #48	; 0x30
    5166:	2320      	movne	r3, #32
    5168:	4615      	mov	r5, r2
    516a:	4680      	mov	r8, r0
    516c:	4689      	mov	r9, r1
    516e:	9401      	str	r4, [sp, #4]
    5170:	9302      	str	r3, [sp, #8]
    5172:	2601      	movs	r6, #1
    5174:	270a      	movs	r7, #10
    5176:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit != 0 || remainder > pos) {
    5178:	f10a 0401 	add.w	r4, sl, #1
    517c:	b90a      	cbnz	r2, 5182 <_printk_dec_ulong+0x36>
    517e:	45aa      	cmp	sl, r5
    5180:	d21f      	bcs.n	51c2 <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
    5182:	fbb5 f0f4 	udiv	r0, r5, r4
    5186:	4649      	mov	r1, r9
    5188:	3030      	adds	r0, #48	; 0x30
    518a:	47c0      	blx	r8
			digits++;
    518c:	3601      	adds	r6, #1
			found_largest_digit = 1;
    518e:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    5190:	3f01      	subs	r7, #1
	while (pos >= 9) {
    5192:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
    5194:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
    5198:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
    519c:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
    51a0:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
    51a4:	d1e8      	bne.n	5178 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
    51a6:	4649      	mov	r1, r9
    51a8:	f105 0030 	add.w	r0, r5, #48	; 0x30
    51ac:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
    51ae:	f1bb 0f03 	cmp.w	fp, #3
    51b2:	d103      	bne.n	51bc <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
    51b4:	9b01      	ldr	r3, [sp, #4]
    51b6:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
    51b8:	2c00      	cmp	r4, #0
    51ba:	dc0f      	bgt.n	51dc <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
    51bc:	b005      	add	sp, #20
    51be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    51c2:	9b01      	ldr	r3, [sp, #4]
    51c4:	42bb      	cmp	r3, r7
    51c6:	dbe3      	blt.n	5190 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    51c8:	f1bb 0f02 	cmp.w	fp, #2
    51cc:	d8e0      	bhi.n	5190 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    51ce:	4649      	mov	r1, r9
    51d0:	9802      	ldr	r0, [sp, #8]
    51d2:	9203      	str	r2, [sp, #12]
			digits++;
    51d4:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    51d6:	47c0      	blx	r8
			digits++;
    51d8:	9a03      	ldr	r2, [sp, #12]
    51da:	e7d9      	b.n	5190 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    51dc:	4649      	mov	r1, r9
    51de:	2020      	movs	r0, #32
    51e0:	47c0      	blx	r8
    51e2:	3c01      	subs	r4, #1
    51e4:	e7e8      	b.n	51b8 <_printk_dec_ulong+0x6c>
    51e6:	bf00      	nop
    51e8:	3b9ac9ff 	.word	0x3b9ac9ff

000051ec <__printk_hook_install>:
	_char_out = fn;
    51ec:	4b01      	ldr	r3, [pc, #4]	; (51f4 <__printk_hook_install+0x8>)
    51ee:	6018      	str	r0, [r3, #0]
}
    51f0:	4770      	bx	lr
    51f2:	bf00      	nop
    51f4:	2000c694 	.word	0x2000c694

000051f8 <z_impl_k_str_out>:
{
    51f8:	b570      	push	{r4, r5, r6, lr}
		_char_out(c[i]);
    51fa:	4e05      	ldr	r6, [pc, #20]	; (5210 <z_impl_k_str_out+0x18>)
    51fc:	4604      	mov	r4, r0
    51fe:	1845      	adds	r5, r0, r1
	for (i = 0; i < n; i++) {
    5200:	42ac      	cmp	r4, r5
    5202:	d100      	bne.n	5206 <z_impl_k_str_out+0xe>
}
    5204:	bd70      	pop	{r4, r5, r6, pc}
		_char_out(c[i]);
    5206:	6833      	ldr	r3, [r6, #0]
    5208:	f814 0b01 	ldrb.w	r0, [r4], #1
    520c:	4798      	blx	r3
    520e:	e7f7      	b.n	5200 <z_impl_k_str_out+0x8>
    5210:	2000c694 	.word	0x2000c694

00005214 <vprintk>:
{
    5214:	b530      	push	{r4, r5, lr}
    5216:	b08b      	sub	sp, #44	; 0x2c
    5218:	4604      	mov	r4, r0
    521a:	460d      	mov	r5, r1
    521c:	f00d ff8c 	bl	13138 <z_arch_is_user_context>
	if (_is_user_context()) {
    5220:	b188      	cbz	r0, 5246 <vprintk+0x32>
		struct buf_out_context ctx = { 0 };
    5222:	2228      	movs	r2, #40	; 0x28
    5224:	2100      	movs	r1, #0
    5226:	4668      	mov	r0, sp
    5228:	f7fd f8e3 	bl	23f2 <memset>
		z_vprintk(buf_char_out, &ctx, fmt, ap);
    522c:	462b      	mov	r3, r5
    522e:	4622      	mov	r2, r4
    5230:	4669      	mov	r1, sp
    5232:	4809      	ldr	r0, [pc, #36]	; (5258 <vprintk+0x44>)
    5234:	f00d ffad 	bl	13192 <z_vprintk>
		if (ctx.buf_count) {
    5238:	9b01      	ldr	r3, [sp, #4]
    523a:	b113      	cbz	r3, 5242 <vprintk+0x2e>
			buf_flush(&ctx);
    523c:	4668      	mov	r0, sp
    523e:	f00e f8f9 	bl	13434 <buf_flush>
}
    5242:	b00b      	add	sp, #44	; 0x2c
    5244:	bd30      	pop	{r4, r5, pc}
		struct out_context ctx = { 0 };
    5246:	9000      	str	r0, [sp, #0]
		z_vprintk(char_out, &ctx, fmt, ap);
    5248:	460b      	mov	r3, r1
    524a:	4622      	mov	r2, r4
    524c:	4669      	mov	r1, sp
    524e:	4803      	ldr	r0, [pc, #12]	; (525c <vprintk+0x48>)
    5250:	f00d ff9f 	bl	13192 <z_vprintk>
}
    5254:	e7f5      	b.n	5242 <vprintk+0x2e>
    5256:	bf00      	nop
    5258:	0001345d 	.word	0x0001345d
    525c:	0000513d 	.word	0x0000513d

00005260 <z_hdlr_k_str_out>:
{
    5260:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Z_OOPS(Z_SYSCALL_MEMORY_READ(c, n));
    5262:	2200      	movs	r2, #0
{
    5264:	4605      	mov	r5, r0
    5266:	460e      	mov	r6, r1
	Z_OOPS(Z_SYSCALL_MEMORY_READ(c, n));
    5268:	f00f fe84 	bl	14f74 <z_arch_buffer_validate>
    526c:	4604      	mov	r4, r0
    526e:	b150      	cbz	r0, 5286 <z_hdlr_k_str_out+0x26>
    5270:	4b08      	ldr	r3, [pc, #32]	; (5294 <z_hdlr_k_str_out+0x34>)
    5272:	9300      	str	r3, [sp, #0]
    5274:	4808      	ldr	r0, [pc, #32]	; (5298 <z_hdlr_k_str_out+0x38>)
    5276:	4909      	ldr	r1, [pc, #36]	; (529c <z_hdlr_k_str_out+0x3c>)
    5278:	4633      	mov	r3, r6
    527a:	462a      	mov	r2, r5
    527c:	f00e f8ff 	bl	1347e <printk>
    5280:	9808      	ldr	r0, [sp, #32]
    5282:	f00f fe50 	bl	14f26 <z_arch_syscall_oops>
	z_impl_k_str_out((char *)c, n);
    5286:	4628      	mov	r0, r5
    5288:	4631      	mov	r1, r6
    528a:	f7ff ffb5 	bl	51f8 <z_impl_k_str_out>
}
    528e:	4620      	mov	r0, r4
    5290:	b002      	add	sp, #8
    5292:	bd70      	pop	{r4, r5, r6, pc}
    5294:	0001b8ef 	.word	0x0001b8ef
    5298:	0001a1c4 	.word	0x0001a1c4
    529c:	0001a1b3 	.word	0x0001a1b3

000052a0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    52a0:	b530      	push	{r4, r5, lr}
    52a2:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    52a4:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    52a8:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    52aa:	2500      	movs	r5, #0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    52ac:	a901      	add	r1, sp, #4
    52ae:	4805      	ldr	r0, [pc, #20]	; (52c4 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    52b0:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    52b2:	f00d ff6e 	bl	13192 <z_vprintk>

	if (ctx.count < ctx.max) {
    52b6:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    52ba:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    52bc:	bfb8      	it	lt
    52be:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    52c0:	b005      	add	sp, #20
    52c2:	bd30      	pop	{r4, r5, pc}
    52c4:	0001316d 	.word	0x0001316d

000052c8 <check_sys_mutex_addr>:

	return (struct k_mutex *)obj->data;
}

static bool check_sys_mutex_addr(u32_t addr)
{
    52c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* sys_mutex memory is never touched, just used to lookup the
	 * underlying k_mutex, but we don't want threads using mutexes
	 * that are outside their memory domain
	 */
	return Z_SYSCALL_MEMORY_WRITE(addr, sizeof(struct sys_mutex));
    52ca:	2201      	movs	r2, #1
    52cc:	2104      	movs	r1, #4
{
    52ce:	4605      	mov	r5, r0
	return Z_SYSCALL_MEMORY_WRITE(addr, sizeof(struct sys_mutex));
    52d0:	f00f fe50 	bl	14f74 <z_arch_buffer_validate>
    52d4:	2800      	cmp	r0, #0
    52d6:	bf14      	ite	ne
    52d8:	2401      	movne	r4, #1
    52da:	2400      	moveq	r4, #0
    52dc:	d007      	beq.n	52ee <check_sys_mutex_addr+0x26>
    52de:	4b05      	ldr	r3, [pc, #20]	; (52f4 <check_sys_mutex_addr+0x2c>)
    52e0:	9300      	str	r3, [sp, #0]
    52e2:	462a      	mov	r2, r5
    52e4:	2304      	movs	r3, #4
    52e6:	4904      	ldr	r1, [pc, #16]	; (52f8 <check_sys_mutex_addr+0x30>)
    52e8:	4804      	ldr	r0, [pc, #16]	; (52fc <check_sys_mutex_addr+0x34>)
    52ea:	f00e f8c8 	bl	1347e <printk>
}
    52ee:	4620      	mov	r0, r4
    52f0:	b003      	add	sp, #12
    52f2:	bd30      	pop	{r4, r5, pc}
    52f4:	0001a21f 	.word	0x0001a21f
    52f8:	0001a20a 	.word	0x0001a20a
    52fc:	0001a1c4 	.word	0x0001a1c4

00005300 <z_impl_z_sys_mutex_kernel_unlock>:
	return z_impl_z_sys_mutex_kernel_lock((struct sys_mutex *)mutex,
					      timeout);
}

int z_impl_z_sys_mutex_kernel_unlock(struct sys_mutex *mutex)
{
    5300:	e92d 4150 	stmdb	sp!, {r4, r6, r8, lr}
	obj = z_object_find(mutex);
    5304:	f7fa ff7c 	bl	200 <z_object_find>
	if (obj == NULL || obj->type != K_OBJ_SYS_MUTEX) {
    5308:	b1c0      	cbz	r0, 533c <z_impl_z_sys_mutex_kernel_unlock+0x3c>
    530a:	7983      	ldrb	r3, [r0, #6]
    530c:	2b0c      	cmp	r3, #12
    530e:	d115      	bne.n	533c <z_impl_z_sys_mutex_kernel_unlock+0x3c>
	return (struct k_mutex *)obj->data;
    5310:	6882      	ldr	r2, [r0, #8]
	struct k_mutex *kernel_mutex = get_k_mutex(mutex);

	if (kernel_mutex == NULL || kernel_mutex->lock_count == 0) {
    5312:	b19a      	cbz	r2, 533c <z_impl_z_sys_mutex_kernel_unlock+0x3c>
    5314:	68d3      	ldr	r3, [r2, #12]
    5316:	b18b      	cbz	r3, 533c <z_impl_z_sys_mutex_kernel_unlock+0x3c>
		return -EINVAL;
	}

	if (kernel_mutex->owner != _current) {
    5318:	4b0b      	ldr	r3, [pc, #44]	; (5348 <z_impl_z_sys_mutex_kernel_unlock+0x48>)
    531a:	6891      	ldr	r1, [r2, #8]
    531c:	689b      	ldr	r3, [r3, #8]
    531e:	4299      	cmp	r1, r3
    5320:	d10f      	bne.n	5342 <z_impl_z_sys_mutex_kernel_unlock+0x42>
    5322:	f00e f8c6 	bl	134b2 <z_arch_is_user_context>
    5326:	b128      	cbz	r0, 5334 <z_impl_z_sys_mutex_kernel_unlock+0x34>
	register u32_t ret __asm__("r0") = arg1;
    5328:	4610      	mov	r0, r2
	register u32_t r6 __asm__("r6") = call_id;
    532a:	2645      	movs	r6, #69	; 0x45
	__asm__ volatile("svc %[svid]\n"
    532c:	df03      	svc	3
		return -EPERM;
	}

	k_mutex_unlock(kernel_mutex);
	return 0;
    532e:	2000      	movs	r0, #0
}
    5330:	e8bd 8150 	ldmia.w	sp!, {r4, r6, r8, pc}
    5334:	4610      	mov	r0, r2
    5336:	f00a f9bf 	bl	f6b8 <z_impl_k_mutex_unlock>
    533a:	e7f8      	b.n	532e <z_impl_z_sys_mutex_kernel_unlock+0x2e>
		return -EINVAL;
    533c:	f06f 0015 	mvn.w	r0, #21
    5340:	e7f6      	b.n	5330 <z_impl_z_sys_mutex_kernel_unlock+0x30>
		return -EPERM;
    5342:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5346:	e7f3      	b.n	5330 <z_impl_z_sys_mutex_kernel_unlock+0x30>
    5348:	200057f0 	.word	0x200057f0

0000534c <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set((uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(struct device *arg)
{
    534c:	b510      	push	{r4, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    534e:	f04f 0320 	mov.w	r3, #32
    5352:	f3ef 8411 	mrs	r4, BASEPRI
    5356:	f383 8811 	msr	BASEPRI, r3
    535a:	f3bf 8f6f 	isb	sy

	ARG_UNUSED(arg);

	key = irq_lock();

	SystemInit();
    535e:	f000 f827 	bl	53b0 <SystemInit>

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    5362:	4a09      	ldr	r2, [pc, #36]	; (5388 <nordicsemi_nrf52_init+0x3c>)
    5364:	2301      	movs	r3, #1
    5366:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
__STATIC_INLINE void nrf_power_dcdcen_set(bool enable)
{
    NRF_POWER->DCDCEN = (enable ?
    536a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    536e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
static ALWAYS_INLINE void z_clearfaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    5372:	4b06      	ldr	r3, [pc, #24]	; (538c <nordicsemi_nrf52_init+0x40>)
    5374:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5378:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    537a:	62da      	str	r2, [r3, #44]	; 0x2c
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    537c:	f384 8811 	msr	BASEPRI, r4
    5380:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    5384:	2000      	movs	r0, #0
    5386:	bd10      	pop	{r4, pc}
    5388:	4001e000 	.word	0x4001e000
    538c:	e000ed00 	.word	0xe000ed00

00005390 <errata_103>:
}


static bool errata_98(void)
{
    if (*(uint32_t *)0x10000130ul == 0x8ul){
    5390:	4b05      	ldr	r3, [pc, #20]	; (53a8 <errata_103+0x18>)
    5392:	681b      	ldr	r3, [r3, #0]
    5394:	2b08      	cmp	r3, #8
        if (*(uint32_t *)0x10000134ul == 0x0ul){
    5396:	bf01      	itttt	eq
    5398:	4b04      	ldreq	r3, [pc, #16]	; (53ac <errata_103+0x1c>)
    539a:	6818      	ldreq	r0, [r3, #0]
    539c:	fab0 f080 	clzeq	r0, r0
    53a0:	0940      	lsreq	r0, r0, #5
            return true;
        }
    }
    
    return false;
    53a2:	bf18      	it	ne
    53a4:	2000      	movne	r0, #0
}
    53a6:	4770      	bx	lr
    53a8:	10000130 	.word	0x10000130
    53ac:	10000134 	.word	0x10000134

000053b0 <SystemInit>:
{
    53b0:	b508      	push	{r3, lr}
        NRF_CLOCK->EVENTS_DONE = 0;
    53b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    53b6:	2200      	movs	r2, #0
    53b8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    53bc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    53c0:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    53c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    53c8:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
    53cc:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    53d0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    53d4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    53d8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    53dc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    53e0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    53e4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    53e8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    53ec:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    53f0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    53f4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    53f8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    53fc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    5400:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    5404:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    5408:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    540c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    5410:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    5414:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    5418:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    541c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    5420:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    5424:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    5428:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    542c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    5430:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    5434:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    5438:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    543c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    5440:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    5444:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    5448:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    544c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    5450:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_98()){
    5454:	f7ff ff9c 	bl	5390 <errata_103>
    5458:	b110      	cbz	r0, 5460 <SystemInit+0xb0>
        *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    545a:	4b33      	ldr	r3, [pc, #204]	; (5528 <SystemInit+0x178>)
    545c:	4a33      	ldr	r2, [pc, #204]	; (552c <SystemInit+0x17c>)
    545e:	601a      	str	r2, [r3, #0]
    if (errata_103()){
    5460:	f7ff ff96 	bl	5390 <errata_103>
    5464:	b118      	cbz	r0, 546e <SystemInit+0xbe>
        NRF_CCM->MAXPACKETSIZE = 0xFBul;
    5466:	4b32      	ldr	r3, [pc, #200]	; (5530 <SystemInit+0x180>)
    5468:	22fb      	movs	r2, #251	; 0xfb
    546a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    if (errata_115()){
    546e:	f7ff ff8f 	bl	5390 <errata_103>
    5472:	b148      	cbz	r0, 5488 <SystemInit+0xd8>
        *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    5474:	492f      	ldr	r1, [pc, #188]	; (5534 <SystemInit+0x184>)
    5476:	4b30      	ldr	r3, [pc, #192]	; (5538 <SystemInit+0x188>)
    5478:	680a      	ldr	r2, [r1, #0]
    547a:	681b      	ldr	r3, [r3, #0]
    547c:	f022 020f 	bic.w	r2, r2, #15
    5480:	f003 030f 	and.w	r3, r3, #15
    5484:	4313      	orrs	r3, r2
    5486:	600b      	str	r3, [r1, #0]
    if (errata_120()){
    5488:	f7ff ff82 	bl	5390 <errata_103>
    548c:	b118      	cbz	r0, 5496 <SystemInit+0xe6>
        *(volatile uint32_t *)0x40029640ul = 0x200ul;
    548e:	4b2b      	ldr	r3, [pc, #172]	; (553c <SystemInit+0x18c>)
    5490:	f44f 7200 	mov.w	r2, #512	; 0x200
    5494:	601a      	str	r2, [r3, #0]
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    5496:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    549a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    549e:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    54a0:	bf44      	itt	mi
    54a2:	f06f 0201 	mvnmi.w	r2, #1
    54a6:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    54aa:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    54ae:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    54b2:	2a00      	cmp	r2, #0
    54b4:	db03      	blt.n	54be <SystemInit+0x10e>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    54b6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    54ba:	2b00      	cmp	r3, #0
    54bc:	da2f      	bge.n	551e <SystemInit+0x16e>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    54be:	4b20      	ldr	r3, [pc, #128]	; (5540 <SystemInit+0x190>)
    54c0:	2201      	movs	r2, #1
    54c2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    54c6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    54ca:	2a00      	cmp	r2, #0
    54cc:	d0fb      	beq.n	54c6 <SystemInit+0x116>
            NRF_UICR->PSELRESET[0] = 18;
    54ce:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    54d2:	2112      	movs	r1, #18
    54d4:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    54d8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    54dc:	2a00      	cmp	r2, #0
    54de:	d0fb      	beq.n	54d8 <SystemInit+0x128>
            NRF_UICR->PSELRESET[1] = 18;
    54e0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    54e4:	2212      	movs	r2, #18
    54e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    54ea:	4b15      	ldr	r3, [pc, #84]	; (5540 <SystemInit+0x190>)
    54ec:	461a      	mov	r2, r3
    54ee:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    54f2:	2900      	cmp	r1, #0
    54f4:	d0fb      	beq.n	54ee <SystemInit+0x13e>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    54f6:	2100      	movs	r1, #0
    54f8:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    54fc:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    5500:	2b00      	cmp	r3, #0
    5502:	d0fb      	beq.n	54fc <SystemInit+0x14c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    5504:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5508:	490e      	ldr	r1, [pc, #56]	; (5544 <SystemInit+0x194>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    550a:	4b0f      	ldr	r3, [pc, #60]	; (5548 <SystemInit+0x198>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    550c:	68ca      	ldr	r2, [r1, #12]
    550e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5512:	4313      	orrs	r3, r2
    5514:	60cb      	str	r3, [r1, #12]
    5516:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    551a:	bf00      	nop
    551c:	e7fd      	b.n	551a <SystemInit+0x16a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    551e:	4b0b      	ldr	r3, [pc, #44]	; (554c <SystemInit+0x19c>)
    5520:	4a0b      	ldr	r2, [pc, #44]	; (5550 <SystemInit+0x1a0>)
    5522:	601a      	str	r2, [r3, #0]
}
    5524:	bd08      	pop	{r3, pc}
    5526:	bf00      	nop
    5528:	4000568c 	.word	0x4000568c
    552c:	00038148 	.word	0x00038148
    5530:	4000f000 	.word	0x4000f000
    5534:	40000ee4 	.word	0x40000ee4
    5538:	10000258 	.word	0x10000258
    553c:	40029640 	.word	0x40029640
    5540:	4001e000 	.word	0x4001e000
    5544:	e000ed00 	.word	0xe000ed00
    5548:	05fa0004 	.word	0x05fa0004
    554c:	2000c698 	.word	0x2000c698
    5550:	03d09000 	.word	0x03d09000

00005554 <nrfx_systick_delay_ticks>:
    return (diff >= nrfx_systick_us_tick(us));
}

void nrfx_systick_delay_ticks(uint32_t ticks)
{
    NRFX_ASSERT(ticks <= NRFX_SYSTICK_TICKS_MAX);
    5554:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
{
    5558:	b508      	push	{r3, lr}
    NRFX_ASSERT(ticks <= NRFX_SYSTICK_TICKS_MAX);
    555a:	d305      	bcc.n	5568 <nrfx_systick_delay_ticks+0x14>
    555c:	4b07      	ldr	r3, [pc, #28]	; (557c <nrfx_systick_delay_ticks+0x28>)
    555e:	4a08      	ldr	r2, [pc, #32]	; (5580 <nrfx_systick_delay_ticks+0x2c>)
    5560:	4808      	ldr	r0, [pc, #32]	; (5584 <nrfx_systick_delay_ticks+0x30>)
    5562:	2187      	movs	r1, #135	; 0x87
    5564:	f7fb fa0a 	bl	97c <__assert_func>
    SysTick->LOAD = val;
}

__STATIC_INLINE uint32_t nrf_systick_val_get(void)
{
    return SysTick->VAL;
    5568:	4a07      	ldr	r2, [pc, #28]	; (5588 <nrfx_systick_delay_ticks+0x34>)
    556a:	6891      	ldr	r1, [r2, #8]
    556c:	6893      	ldr	r3, [r2, #8]

    const uint32_t start = nrf_systick_val_get();
    while ((NRF_SYSTICK_VAL_MASK & (start - nrf_systick_val_get())) < ticks)
    556e:	1acb      	subs	r3, r1, r3
    5570:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    5574:	4283      	cmp	r3, r0
    5576:	d3f9      	bcc.n	556c <nrfx_systick_delay_ticks+0x18>
    {
        /* Nothing to do */
    }
}
    5578:	bd08      	pop	{r3, pc}
    557a:	bf00      	nop
    557c:	0001a267 	.word	0x0001a267
    5580:	0001a238 	.word	0x0001a238
    5584:	0001a2d0 	.word	0x0001a2d0
    5588:	e000e010 	.word	0xe000e010

0000558c <nrfx_systick_delay_us>:

void nrfx_systick_delay_us(uint32_t us)
{
    558c:	b508      	push	{r3, lr}
    NRFX_SYSTICK_ASSERT_TIMEOUT(us);
    558e:	4b0a      	ldr	r3, [pc, #40]	; (55b8 <nrfx_systick_delay_us+0x2c>)
    5590:	4a0a      	ldr	r2, [pc, #40]	; (55bc <nrfx_systick_delay_us+0x30>)
    5592:	681b      	ldr	r3, [r3, #0]
    5594:	fbb3 f3f2 	udiv	r3, r3, r2
    5598:	4a09      	ldr	r2, [pc, #36]	; (55c0 <nrfx_systick_delay_us+0x34>)
    559a:	fbb2 f2f3 	udiv	r2, r2, r3
    559e:	4282      	cmp	r2, r0
    55a0:	d205      	bcs.n	55ae <nrfx_systick_delay_us+0x22>
    55a2:	4b08      	ldr	r3, [pc, #32]	; (55c4 <nrfx_systick_delay_us+0x38>)
    55a4:	4a08      	ldr	r2, [pc, #32]	; (55c8 <nrfx_systick_delay_us+0x3c>)
    55a6:	4809      	ldr	r0, [pc, #36]	; (55cc <nrfx_systick_delay_us+0x40>)
    55a8:	2192      	movs	r1, #146	; 0x92
    55aa:	f7fb f9e7 	bl	97c <__assert_func>
    nrfx_systick_delay_ticks(nrfx_systick_us_tick(us));
    55ae:	4358      	muls	r0, r3
}
    55b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_systick_delay_ticks(nrfx_systick_us_tick(us));
    55b4:	f7ff bfce 	b.w	5554 <nrfx_systick_delay_ticks>
    55b8:	2000c698 	.word	0x2000c698
    55bc:	000f4240 	.word	0x000f4240
    55c0:	007fffff 	.word	0x007fffff
    55c4:	0001a286 	.word	0x0001a286
    55c8:	0001a251 	.word	0x0001a251
    55cc:	0001a2d0 	.word	0x0001a2d0

000055d0 <nrfx_usbd_errata_type_52840_eng_b>:
#define NRFX_USBD_ERRATA_ENABLE 1
#endif

static inline bool nrfx_usbd_errata_type_52840(void)
{
    return (*(uint32_t *)0x10000130UL == 0x8UL);
    55d0:	4b05      	ldr	r3, [pc, #20]	; (55e8 <nrfx_usbd_errata_type_52840_eng_b+0x18>)
    return nrfx_usbd_errata_type_52840();
}

static inline bool nrfx_usbd_errata_type_52840_eng_b(void)
{
    return (nrfx_usbd_errata_type_52840() && (*(uint32_t *)0x10000134UL >= 0x1UL));
    55d2:	681b      	ldr	r3, [r3, #0]
    55d4:	2b08      	cmp	r3, #8
    55d6:	d105      	bne.n	55e4 <nrfx_usbd_errata_type_52840_eng_b+0x14>
    55d8:	4b04      	ldr	r3, [pc, #16]	; (55ec <nrfx_usbd_errata_type_52840_eng_b+0x1c>)
    55da:	6818      	ldr	r0, [r3, #0]
    55dc:	3000      	adds	r0, #0
    55de:	bf18      	it	ne
    55e0:	2001      	movne	r0, #1
    55e2:	4770      	bx	lr
    55e4:	2000      	movs	r0, #0
}
    55e6:	4770      	bx	lr
    55e8:	10000130 	.word	0x10000130
    55ec:	10000134 	.word	0x10000134

000055f0 <usbd_dma_pending_clear>:
 */
static inline void usbd_dma_pending_clear(void)
{
    if (nrfx_usbd_errata_199())
    {
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    55f0:	4a02      	ldr	r2, [pc, #8]	; (55fc <usbd_dma_pending_clear+0xc>)
    55f2:	2300      	movs	r3, #0
    55f4:	6013      	str	r3, [r2, #0]
    }
    m_dma_pending = false;
    55f6:	4a02      	ldr	r2, [pc, #8]	; (5600 <usbd_dma_pending_clear+0x10>)
    55f8:	7013      	strb	r3, [r2, #0]
}
    55fa:	4770      	bx	lr
    55fc:	40027c1c 	.word	0x40027c1c
    5600:	200059cd 	.word	0x200059cd

00005604 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    5604:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
    5606:	4a08      	ldr	r2, [pc, #32]	; (5628 <ev_usbreset_handler+0x24>)
    5608:	2300      	movs	r3, #0
    560a:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    560c:	4a07      	ldr	r2, [pc, #28]	; (562c <ev_usbreset_handler+0x28>)

    const nrfx_usbd_evt_t evt = {
    560e:	9301      	str	r3, [sp, #4]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    5610:	7013      	strb	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
    5612:	2301      	movs	r3, #1
    5614:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    5618:	4b05      	ldr	r3, [pc, #20]	; (5630 <ev_usbreset_handler+0x2c>)
    561a:	a801      	add	r0, sp, #4
    561c:	681b      	ldr	r3, [r3, #0]
    561e:	4798      	blx	r3
}
    5620:	b003      	add	sp, #12
    5622:	f85d fb04 	ldr.w	pc, [sp], #4
    5626:	bf00      	nop
    5628:	200059cc 	.word	0x200059cc
    562c:	200059cf 	.word	0x200059cf
    5630:	20002840 	.word	0x20002840

00005634 <task_start_ep>:
{
    5634:	b508      	push	{r3, lr}
    5636:	f000 030f 	and.w	r3, r0, #15
    NRFX_USBD_ASSERT_EP_VALID(ep);
    563a:	2b08      	cmp	r3, #8
    563c:	d906      	bls.n	564c <task_start_ep+0x18>
    563e:	4b07      	ldr	r3, [pc, #28]	; (565c <task_start_ep+0x28>)
    5640:	4a07      	ldr	r2, [pc, #28]	; (5660 <task_start_ep+0x2c>)
    5642:	4808      	ldr	r0, [pc, #32]	; (5664 <task_start_ep+0x30>)
    5644:	f240 2192 	movw	r1, #658	; 0x292
    5648:	f7fb f998 	bl	97c <__assert_func>
    return (nrf_usbd_task_t)(
    564c:	f010 0f80 	tst.w	r0, #128	; 0x80
    5650:	bf14      	ite	ne
    5652:	2004      	movne	r0, #4
    5654:	2028      	moveq	r0, #40	; 0x28
}
    5656:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    565a:	bd08      	pop	{r3, pc}
    565c:	0001a901 	.word	0x0001a901
    5660:	0001a43f 	.word	0x0001a43f
    5664:	0001a9c3 	.word	0x0001a9c3

00005668 <usbd_ep_data_handler>:
 * Auxiliary internal function.
 * @param ep     Endpoint number.
 * @param bitpos Bit position for selected endpoint number.
 */
static void usbd_ep_data_handler(nrfx_usbd_ep_t ep, uint8_t bitpos)
{
    5668:	b513      	push	{r0, r1, r4, lr}
    NRFX_LOG_DEBUG("USBD event: EndpointData: %x", ep);
    /* Mark endpoint ready for next DMA access */
    m_ep_ready |= (1U << bitpos);
    566a:	4c12      	ldr	r4, [pc, #72]	; (56b4 <usbd_ep_data_handler+0x4c>)
    566c:	2201      	movs	r2, #1
    566e:	6823      	ldr	r3, [r4, #0]
    5670:	fa02 f101 	lsl.w	r1, r2, r1
    5674:	430b      	orrs	r3, r1
    5676:	6023      	str	r3, [r4, #0]

    if (NRF_USBD_EPIN_CHECK(ep))
    5678:	4b0f      	ldr	r3, [pc, #60]	; (56b8 <usbd_ep_data_handler+0x50>)
    567a:	681b      	ldr	r3, [r3, #0]
    567c:	4019      	ands	r1, r3
    567e:	0603      	lsls	r3, r0, #24
    5680:	d50d      	bpl.n	569e <usbd_ep_data_handler+0x36>
    {
        /* IN endpoint (Device -> Host) */
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    5682:	b951      	cbnz	r1, 569a <usbd_ep_data_handler+0x32>
        {
            NRFX_LOG_DEBUG("USBD event: EndpointData: In finished");
            /* No more data to be send - transmission finished */
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    5684:	2306      	movs	r3, #6
    5686:	f88d 3004 	strb.w	r3, [sp, #4]
    568a:	f88d 0006 	strb.w	r0, [sp, #6]
    568e:	f88d 1007 	strb.w	r1, [sp, #7]
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
        {
            NRFX_LOG_DEBUG("USBD event: EndpointData: Out waiting");
            /* No buffer prepared - send event to the application */
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
            m_event_handler(&evt);
    5692:	4b0a      	ldr	r3, [pc, #40]	; (56bc <usbd_ep_data_handler+0x54>)
    5694:	a801      	add	r0, sp, #4
    5696:	681b      	ldr	r3, [r3, #0]
    5698:	4798      	blx	r3
        }
    }
}
    569a:	b002      	add	sp, #8
    569c:	bd10      	pop	{r4, pc}
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    569e:	2900      	cmp	r1, #0
    56a0:	d1fb      	bne.n	569a <usbd_ep_data_handler+0x32>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    56a2:	2306      	movs	r3, #6
    56a4:	f88d 3004 	strb.w	r3, [sp, #4]
    56a8:	f88d 0006 	strb.w	r0, [sp, #6]
    56ac:	f88d 2007 	strb.w	r2, [sp, #7]
    56b0:	e7ef      	b.n	5692 <usbd_ep_data_handler+0x2a>
    56b2:	bf00      	nop
    56b4:	2000271c 	.word	0x2000271c
    56b8:	200026ac 	.word	0x200026ac
    56bc:	20002840 	.word	0x20002840

000056c0 <nrfx_usbd_consumer>:
    NRFX_ASSERT(ep_size >= data_size);
    56c0:	429a      	cmp	r2, r3
{
    56c2:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(ep_size >= data_size);
    56c4:	d206      	bcs.n	56d4 <nrfx_usbd_consumer+0x14>
    56c6:	4b15      	ldr	r3, [pc, #84]	; (571c <nrfx_usbd_consumer+0x5c>)
    56c8:	4a15      	ldr	r2, [pc, #84]	; (5720 <nrfx_usbd_consumer+0x60>)
    56ca:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    NRFX_ASSERT((p_transfer->p_data.rx == NULL) ||
    56ce:	4815      	ldr	r0, [pc, #84]	; (5724 <nrfx_usbd_consumer+0x64>)
    56d0:	f7fb f954 	bl	97c <__assert_func>
    56d4:	680c      	ldr	r4, [r1, #0]
    56d6:	b14c      	cbz	r4, 56ec <nrfx_usbd_consumer+0x2c>

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    56d8:	f004 4460 	and.w	r4, r4, #3758096384	; 0xe0000000
    56dc:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
    56e0:	d004      	beq.n	56ec <nrfx_usbd_consumer+0x2c>
    56e2:	4b11      	ldr	r3, [pc, #68]	; (5728 <nrfx_usbd_consumer+0x68>)
    56e4:	4a0e      	ldr	r2, [pc, #56]	; (5720 <nrfx_usbd_consumer+0x60>)
    56e6:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
    56ea:	e7f0      	b.n	56ce <nrfx_usbd_consumer+0xe>
    size_t size = p_transfer->size;
    56ec:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    56ee:	680d      	ldr	r5, [r1, #0]
    56f0:	42a3      	cmp	r3, r4
        p_next->p_data = p_transfer->p_data;
    56f2:	bf9b      	ittet	ls
    56f4:	e9c0 5300 	strdls	r5, r3, [r0]
        p_transfer->p_data.addr += data_size;
    56f8:	6808      	ldrls	r0, [r1, #0]
        p_next->size = 0;
    56fa:	2100      	movhi	r1, #0
        size -= data_size;
    56fc:	1ae4      	subls	r4, r4, r3
        p_transfer->p_data.addr += data_size;
    56fe:	bf97      	itett	ls
    5700:	18c0      	addls	r0, r0, r3
        p_next->p_data = p_transfer->p_data;
    5702:	e9c0 5100 	strdhi	r5, r1, [r0]
        p_transfer->size = size;
    5706:	604c      	strls	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    5708:	6008      	strls	r0, [r1, #0]
    return (ep_size == data_size) && (size != 0);
    570a:	429a      	cmp	r2, r3
    570c:	d103      	bne.n	5716 <nrfx_usbd_consumer+0x56>
    570e:	1c20      	adds	r0, r4, #0
    5710:	bf18      	it	ne
    5712:	2001      	movne	r0, #1
}
    5714:	bd38      	pop	{r3, r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
    5716:	2000      	movs	r0, #0
    5718:	e7fc      	b.n	5714 <nrfx_usbd_consumer+0x54>
    571a:	bf00      	nop
    571c:	0001a657 	.word	0x0001a657
    5720:	0001a3c2 	.word	0x0001a3c2
    5724:	0001a9c3 	.word	0x0001a9c3
    5728:	0001a66c 	.word	0x0001a66c

0000572c <nrfx_usbd_feeder_ram>:
{
    572c:	b510      	push	{r4, lr}
    572e:	680c      	ldr	r4, [r1, #0]
    5730:	f004 4360 	and.w	r3, r4, #3758096384	; 0xe0000000
    NRFX_ASSERT(nrfx_is_in_ram(p_transfer->p_data.tx));
    5734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    5738:	d006      	beq.n	5748 <nrfx_usbd_feeder_ram+0x1c>
    573a:	4b0a      	ldr	r3, [pc, #40]	; (5764 <nrfx_usbd_feeder_ram+0x38>)
    573c:	4a0a      	ldr	r2, [pc, #40]	; (5768 <nrfx_usbd_feeder_ram+0x3c>)
    573e:	480b      	ldr	r0, [pc, #44]	; (576c <nrfx_usbd_feeder_ram+0x40>)
    5740:	f240 11f9 	movw	r1, #505	; 0x1f9
    5744:	f7fb f91a 	bl	97c <__assert_func>
    size_t tx_size = p_transfer->size;
    5748:	684b      	ldr	r3, [r1, #4]
    if (tx_size > ep_size)
    574a:	429a      	cmp	r2, r3
    574c:	bf28      	it	cs
    574e:	461a      	movcs	r2, r3
    p_next->size = tx_size;
    5750:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
    5754:	1a98      	subs	r0, r3, r2
    5756:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    5758:	4414      	add	r4, r2
}
    575a:	3000      	adds	r0, #0
    p_transfer->p_data.addr += tx_size;
    575c:	600c      	str	r4, [r1, #0]
}
    575e:	bf18      	it	ne
    5760:	2001      	movne	r0, #1
    5762:	bd10      	pop	{r4, pc}
    5764:	0001a86c 	.word	0x0001a86c
    5768:	0001a3d5 	.word	0x0001a3d5
    576c:	0001a9c3 	.word	0x0001a9c3

00005770 <nrfx_usbd_feeder_ram_zlp>:
{
    5770:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(nrfx_is_in_ram(p_transfer->p_data.tx));
    5772:	680b      	ldr	r3, [r1, #0]
    5774:	f003 4460 	and.w	r4, r3, #3758096384	; 0xe0000000
    5778:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
    577c:	461d      	mov	r5, r3
    577e:	d006      	beq.n	578e <nrfx_usbd_feeder_ram_zlp+0x1e>
    5780:	4b0c      	ldr	r3, [pc, #48]	; (57b4 <nrfx_usbd_feeder_ram_zlp+0x44>)
    5782:	4a0d      	ldr	r2, [pc, #52]	; (57b8 <nrfx_usbd_feeder_ram_zlp+0x48>)
    5784:	480d      	ldr	r0, [pc, #52]	; (57bc <nrfx_usbd_feeder_ram_zlp+0x4c>)
    5786:	f240 211a 	movw	r1, #538	; 0x21a
    578a:	f7fb f8f7 	bl	97c <__assert_func>
    size_t tx_size = p_transfer->size;
    578e:	684c      	ldr	r4, [r1, #4]
    if (tx_size > ep_size)
    5790:	42a2      	cmp	r2, r4
    5792:	bf28      	it	cs
    5794:	4622      	movcs	r2, r4
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    5796:	2a00      	cmp	r2, #0
    5798:	bf08      	it	eq
    579a:	2300      	moveq	r3, #0
    p_next->size = tx_size;
    579c:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    57a0:	eba4 0402 	sub.w	r4, r4, r2
    p_transfer->p_data.addr += tx_size;
    57a4:	442a      	add	r2, r5
    p_transfer->size -= tx_size;
    57a6:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    57a8:	600a      	str	r2, [r1, #0]
}
    57aa:	bf14      	ite	ne
    57ac:	2001      	movne	r0, #1
    57ae:	2000      	moveq	r0, #0
    57b0:	bd38      	pop	{r3, r4, r5, pc}
    57b2:	bf00      	nop
    57b4:	0001a86c 	.word	0x0001a86c
    57b8:	0001a3ea 	.word	0x0001a3ea
    57bc:	0001a9c3 	.word	0x0001a9c3

000057c0 <ep_state_access.part.5>:
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
    57c0:	b508      	push	{r3, lr}
    NRFX_USBD_ASSERT_EP_VALID(ep);
    57c2:	4a03      	ldr	r2, [pc, #12]	; (57d0 <ep_state_access.part.5+0x10>)
    57c4:	4b03      	ldr	r3, [pc, #12]	; (57d4 <ep_state_access.part.5+0x14>)
    57c6:	4804      	ldr	r0, [pc, #16]	; (57d8 <ep_state_access.part.5+0x18>)
    57c8:	f240 21a2 	movw	r1, #674	; 0x2a2
    57cc:	f7fb f8d6 	bl	97c <__assert_func>
    57d0:	0001a44d 	.word	0x0001a44d
    57d4:	0001a901 	.word	0x0001a901
    57d8:	0001a9c3 	.word	0x0001a9c3

000057dc <ep_state_access>:
    57dc:	f000 020f 	and.w	r2, r0, #15
    57e0:	2a08      	cmp	r2, #8
{
    57e2:	b508      	push	{r3, lr}
    NRFX_USBD_ASSERT_EP_VALID(ep);
    57e4:	d901      	bls.n	57ea <ep_state_access+0xe>
    57e6:	f7ff ffeb 	bl	57c0 <ep_state_access.part.5>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    57ea:	4b05      	ldr	r3, [pc, #20]	; (5800 <ep_state_access+0x24>)
    57ec:	f010 0f80 	tst.w	r0, #128	; 0x80
    57f0:	f1a3 0090 	sub.w	r0, r3, #144	; 0x90
    57f4:	bf18      	it	ne
    57f6:	4618      	movne	r0, r3
}
    57f8:	eb00 1002 	add.w	r0, r0, r2, lsl #4
    57fc:	bd08      	pop	{r3, pc}
    57fe:	bf00      	nop
    5800:	200027b0 	.word	0x200027b0

00005804 <ep2bit.part.6>:
static inline uint8_t ep2bit(nrfx_usbd_ep_t ep)
    5804:	b508      	push	{r3, lr}
    NRFX_USBD_ASSERT_EP_VALID(ep);
    5806:	4a03      	ldr	r2, [pc, #12]	; (5814 <ep2bit.part.6+0x10>)
    5808:	4b03      	ldr	r3, [pc, #12]	; (5818 <ep2bit.part.6+0x14>)
    580a:	4804      	ldr	r0, [pc, #16]	; (581c <ep2bit.part.6+0x18>)
    580c:	f240 21b5 	movw	r1, #693	; 0x2b5
    5810:	f7fb f8b4 	bl	97c <__assert_func>
    5814:	0001a45d 	.word	0x0001a45d
    5818:	0001a901 	.word	0x0001a901
    581c:	0001a9c3 	.word	0x0001a9c3

00005820 <ev_setup_data_handler>:

static void ev_setup_data_handler(void)
{
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    5820:	4b05      	ldr	r3, [pc, #20]	; (5838 <ev_setup_data_handler+0x18>)
{
    5822:	b510      	push	{r4, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    5824:	781c      	ldrb	r4, [r3, #0]
    5826:	4620      	mov	r0, r4
    5828:	f00d fe94 	bl	13554 <ep2bit>
    582c:	4601      	mov	r1, r0
    582e:	4620      	mov	r0, r4
}
    5830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    5834:	f7ff bf18 	b.w	5668 <usbd_ep_data_handler>
    5838:	200059cf 	.word	0x200059cf

0000583c <nrfx_usbd_ep_to_endevent.part.8>:
static inline nrf_usbd_event_t nrfx_usbd_ep_to_endevent(nrfx_usbd_ep_t ep)
    583c:	b508      	push	{r3, lr}
    NRFX_USBD_ASSERT_EP_VALID(ep);
    583e:	4a03      	ldr	r2, [pc, #12]	; (584c <nrfx_usbd_ep_to_endevent.part.8+0x10>)
    5840:	4b03      	ldr	r3, [pc, #12]	; (5850 <nrfx_usbd_ep_to_endevent.part.8+0x14>)
    5842:	4804      	ldr	r0, [pc, #16]	; (5854 <nrfx_usbd_ep_to_endevent.part.8+0x18>)
    5844:	f44f 71b9 	mov.w	r1, #370	; 0x172
    5848:	f7fb f898 	bl	97c <__assert_func>
    584c:	0001a395 	.word	0x0001a395
    5850:	0001a901 	.word	0x0001a901
    5854:	0001a9c3 	.word	0x0001a9c3

00005858 <ep_to_hal.part.9>:
static inline uint8_t ep_to_hal(nrfx_usbd_ep_t ep)
    5858:	b508      	push	{r3, lr}
    NRFX_USBD_ASSERT_EP_VALID(ep);
    585a:	4a03      	ldr	r2, [pc, #12]	; (5868 <ep_to_hal.part.9+0x10>)
    585c:	4b03      	ldr	r3, [pc, #12]	; (586c <ep_to_hal.part.9+0x14>)
    585e:	4804      	ldr	r0, [pc, #16]	; (5870 <ep_to_hal.part.9+0x18>)
    5860:	f240 2185 	movw	r1, #645	; 0x285
    5864:	f7fb f88a 	bl	97c <__assert_func>
    5868:	0001a435 	.word	0x0001a435
    586c:	0001a901 	.word	0x0001a901
    5870:	0001a9c3 	.word	0x0001a9c3

00005874 <nrf_usbd_ep_enable_check>:
    retval = ((NRF_USBD->DTOGGLE) & USBD_DTOGGLE_VALUE_Msk) >> USBD_DTOGGLE_VALUE_Pos;
    return (nrf_usbd_dtoggle_t)retval;
}

bool nrf_usbd_ep_enable_check(uint8_t ep)
{
    5874:	b508      	push	{r3, lr}
    5876:	f000 030f 	and.w	r3, r0, #15
    NRFX_ASSERT(NRF_USBD_EP_VALIDATE(ep));
    587a:	2b08      	cmp	r3, #8
    587c:	d906      	bls.n	588c <nrf_usbd_ep_enable_check+0x18>
    587e:	4b09      	ldr	r3, [pc, #36]	; (58a4 <nrf_usbd_ep_enable_check+0x30>)
    5880:	4a09      	ldr	r2, [pc, #36]	; (58a8 <nrf_usbd_ep_enable_check+0x34>)
    5882:	480a      	ldr	r0, [pc, #40]	; (58ac <nrf_usbd_ep_enable_check+0x38>)
    5884:	f44f 6199 	mov.w	r1, #1224	; 0x4c8
    5888:	f7fb f878 	bl	97c <__assert_func>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);

    if (NRF_USBD_EPIN_CHECK(ep))
    588c:	4a08      	ldr	r2, [pc, #32]	; (58b0 <nrf_usbd_ep_enable_check+0x3c>)
    588e:	f010 0f80 	tst.w	r0, #128	; 0x80
    {
        return 0 != (NRF_USBD->EPINEN & (1UL << epnr));
    5892:	bf14      	ite	ne
    5894:	f8d2 0510 	ldrne.w	r0, [r2, #1296]	; 0x510
    }
    else
    {
        return 0 != (NRF_USBD->EPOUTEN & (1UL << epnr));
    5898:	f8d2 0514 	ldreq.w	r0, [r2, #1300]	; 0x514
    589c:	40d8      	lsrs	r0, r3
    589e:	f000 0001 	and.w	r0, r0, #1
    }
}
    58a2:	bd08      	pop	{r3, pc}
    58a4:	0001a56e 	.word	0x0001a56e
    58a8:	0001a356 	.word	0x0001a356
    58ac:	0001a631 	.word	0x0001a631
    58b0:	40027000 	.word	0x40027000

000058b4 <nrfx_usbd_ep_to_int.part.11>:
static inline uint32_t nrfx_usbd_ep_to_int(nrfx_usbd_ep_t ep)
    58b4:	b508      	push	{r3, lr}
    NRFX_USBD_ASSERT_EP_VALID(ep);
    58b6:	4a03      	ldr	r2, [pc, #12]	; (58c4 <nrfx_usbd_ep_to_int.part.11+0x10>)
    58b8:	4b03      	ldr	r3, [pc, #12]	; (58c8 <nrfx_usbd_ep_to_int.part.11+0x14>)
    58ba:	4804      	ldr	r0, [pc, #16]	; (58cc <nrfx_usbd_ep_to_int.part.11+0x18>)
    58bc:	f240 119b 	movw	r1, #411	; 0x19b
    58c0:	f7fb f85c 	bl	97c <__assert_func>
    58c4:	0001a3ae 	.word	0x0001a3ae
    58c8:	0001a901 	.word	0x0001a901
    58cc:	0001a9c3 	.word	0x0001a9c3

000058d0 <nrfx_usbd_feeder_flash>:
{
    58d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58d2:	460d      	mov	r5, r1
    NRFX_ASSERT(!nrfx_is_in_ram(p_transfer->p_data.tx));
    58d4:	6809      	ldr	r1, [r1, #0]
    58d6:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
    58da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
{
    58de:	4606      	mov	r6, r0
    NRFX_ASSERT(!nrfx_is_in_ram(p_transfer->p_data.tx));
    58e0:	d106      	bne.n	58f0 <nrfx_usbd_feeder_flash+0x20>
    58e2:	4b12      	ldr	r3, [pc, #72]	; (592c <nrfx_usbd_feeder_flash+0x5c>)
    58e4:	4a12      	ldr	r2, [pc, #72]	; (5930 <nrfx_usbd_feeder_flash+0x60>)
    58e6:	f44f 710e 	mov.w	r1, #568	; 0x238
    NRFX_ASSERT(tx_size <= NRFX_USBD_FEEDER_BUFFER_SIZE);
    58ea:	4812      	ldr	r0, [pc, #72]	; (5934 <nrfx_usbd_feeder_flash+0x64>)
    58ec:	f7fb f846 	bl	97c <__assert_func>
    size_t tx_size  = p_transfer->size;
    58f0:	686c      	ldr	r4, [r5, #4]
    if (tx_size > ep_size)
    58f2:	4294      	cmp	r4, r2
    58f4:	bf28      	it	cs
    58f6:	4614      	movcs	r4, r2
    NRFX_ASSERT(tx_size <= NRFX_USBD_FEEDER_BUFFER_SIZE);
    58f8:	2c40      	cmp	r4, #64	; 0x40
    58fa:	d904      	bls.n	5906 <nrfx_usbd_feeder_flash+0x36>
    58fc:	4b0e      	ldr	r3, [pc, #56]	; (5938 <nrfx_usbd_feeder_flash+0x68>)
    58fe:	4a0c      	ldr	r2, [pc, #48]	; (5930 <nrfx_usbd_feeder_flash+0x60>)
    5900:	f240 2142 	movw	r1, #578	; 0x242
    5904:	e7f1      	b.n	58ea <nrfx_usbd_feeder_flash+0x1a>
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    5906:	4f0d      	ldr	r7, [pc, #52]	; (593c <nrfx_usbd_feeder_flash+0x6c>)
    5908:	4622      	mov	r2, r4
    590a:	2340      	movs	r3, #64	; 0x40
    590c:	4638      	mov	r0, r7
    590e:	f7fc fd43 	bl	2398 <__memcpy_chk>
    p_transfer->size -= tx_size;
    5912:	6868      	ldr	r0, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    5914:	682a      	ldr	r2, [r5, #0]
    p_transfer->size -= tx_size;
    5916:	1b00      	subs	r0, r0, r4
    p_next->size = tx_size;
    5918:	e9c6 7400 	strd	r7, r4, [r6]
    p_transfer->p_data.addr += tx_size;
    591c:	4422      	add	r2, r4
    p_transfer->size -= tx_size;
    591e:	6068      	str	r0, [r5, #4]
}
    5920:	3000      	adds	r0, #0
    p_transfer->p_data.addr += tx_size;
    5922:	602a      	str	r2, [r5, #0]
}
    5924:	bf18      	it	ne
    5926:	2001      	movne	r0, #1
    5928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    592a:	bf00      	nop
    592c:	0001a86b 	.word	0x0001a86b
    5930:	0001a403 	.word	0x0001a403
    5934:	0001a9c3 	.word	0x0001a9c3
    5938:	0001a892 	.word	0x0001a892
    593c:	20002848 	.word	0x20002848

00005940 <nrfx_usbd_feeder_flash_zlp>:
{
    5940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5942:	460d      	mov	r5, r1
    NRFX_ASSERT(!nrfx_is_in_ram(p_transfer->p_data.tx));
    5944:	6809      	ldr	r1, [r1, #0]
    5946:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
    594a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
{
    594e:	4606      	mov	r6, r0
    NRFX_ASSERT(!nrfx_is_in_ram(p_transfer->p_data.tx));
    5950:	d106      	bne.n	5960 <nrfx_usbd_feeder_flash_zlp+0x20>
    5952:	4b13      	ldr	r3, [pc, #76]	; (59a0 <nrfx_usbd_feeder_flash_zlp+0x60>)
    5954:	4a13      	ldr	r2, [pc, #76]	; (59a4 <nrfx_usbd_feeder_flash_zlp+0x64>)
    5956:	f240 215b 	movw	r1, #603	; 0x25b
    NRFX_ASSERT(tx_size <= NRFX_USBD_FEEDER_BUFFER_SIZE);
    595a:	4813      	ldr	r0, [pc, #76]	; (59a8 <nrfx_usbd_feeder_flash_zlp+0x68>)
    595c:	f7fb f80e 	bl	97c <__assert_func>
    size_t tx_size  = p_transfer->size;
    5960:	686c      	ldr	r4, [r5, #4]
    if (tx_size > ep_size)
    5962:	4294      	cmp	r4, r2
    5964:	bf28      	it	cs
    5966:	4614      	movcs	r4, r2
    NRFX_ASSERT(tx_size <= NRFX_USBD_FEEDER_BUFFER_SIZE);
    5968:	2c40      	cmp	r4, #64	; 0x40
    596a:	d904      	bls.n	5976 <nrfx_usbd_feeder_flash_zlp+0x36>
    596c:	4b0f      	ldr	r3, [pc, #60]	; (59ac <nrfx_usbd_feeder_flash_zlp+0x6c>)
    596e:	4a0d      	ldr	r2, [pc, #52]	; (59a4 <nrfx_usbd_feeder_flash_zlp+0x64>)
    5970:	f240 2165 	movw	r1, #613	; 0x265
    5974:	e7f1      	b.n	595a <nrfx_usbd_feeder_flash_zlp+0x1a>
    if (tx_size != 0)
    5976:	b18c      	cbz	r4, 599c <nrfx_usbd_feeder_flash_zlp+0x5c>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    5978:	4f0d      	ldr	r7, [pc, #52]	; (59b0 <nrfx_usbd_feeder_flash_zlp+0x70>)
    597a:	2340      	movs	r3, #64	; 0x40
    597c:	4622      	mov	r2, r4
    597e:	4638      	mov	r0, r7
    5980:	f7fc fd0a 	bl	2398 <__memcpy_chk>
        p_next->p_data.tx = p_buffer;
    5984:	6037      	str	r7, [r6, #0]
    p_transfer->size -= tx_size;
    5986:	686b      	ldr	r3, [r5, #4]
    p_next->size = tx_size;
    5988:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
    598a:	1b1b      	subs	r3, r3, r4
    598c:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    598e:	682b      	ldr	r3, [r5, #0]
}
    5990:	1c20      	adds	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
    5992:	4423      	add	r3, r4
    5994:	602b      	str	r3, [r5, #0]
}
    5996:	bf18      	it	ne
    5998:	2001      	movne	r0, #1
    599a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        p_next->p_data.tx = NULL;
    599c:	6004      	str	r4, [r0, #0]
    599e:	e7f2      	b.n	5986 <nrfx_usbd_feeder_flash_zlp+0x46>
    59a0:	0001a86b 	.word	0x0001a86b
    59a4:	0001a41a 	.word	0x0001a41a
    59a8:	0001a9c3 	.word	0x0001a9c3
    59ac:	0001a892 	.word	0x0001a892
    59b0:	20002848 	.word	0x20002848

000059b4 <ev_sof_handler>:
{
    59b4:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
    59b6:	2300      	movs	r3, #0
    59b8:	f88d 3004 	strb.w	r3, [sp, #4]
        (((NRF_USBD->ISOSPLIT) & USBD_ISOSPLIT_SPLIT_Msk) >> USBD_ISOSPLIT_SPLIT_Pos);
}

uint32_t nrf_usbd_framecntr_get(void)
{
    return NRF_USBD->FRAMECNTR;
    59bc:	4b0b      	ldr	r3, [pc, #44]	; (59ec <ev_sof_handler+0x38>)
    59be:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    59c2:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = NRF_USBD->SIZE.ISOOUT;
    59c6:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
    59ca:	4a09      	ldr	r2, [pc, #36]	; (59f0 <ev_sof_handler+0x3c>)
    if (size_isoout == 0)
    59cc:	2b00      	cmp	r3, #0
    59ce:	6813      	ldr	r3, [r2, #0]
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    59d0:	bf0c      	ite	eq
    59d2:	f44f 7180 	moveq.w	r1, #256	; 0x100
    59d6:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    m_ep_ready |= iso_ready_mask;
    59da:	430b      	orrs	r3, r1
    59dc:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    59de:	4b05      	ldr	r3, [pc, #20]	; (59f4 <ev_sof_handler+0x40>)
    59e0:	a801      	add	r0, sp, #4
    59e2:	681b      	ldr	r3, [r3, #0]
    59e4:	4798      	blx	r3
}
    59e6:	b003      	add	sp, #12
    59e8:	f85d fb04 	ldr.w	pc, [sp], #4
    59ec:	40027000 	.word	0x40027000
    59f0:	2000271c 	.word	0x2000271c
    59f4:	20002840 	.word	0x20002840

000059f8 <atomic_and.constprop.25>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    59f8:	4b07      	ldr	r3, [pc, #28]	; (5a18 <atomic_and.constprop.25+0x20>)
}
    59fa:	f3bf 8f5b 	dmb	ish
    59fe:	4602      	mov	r2, r0
    5a00:	e853 0f00 	ldrex	r0, [r3]
    5a04:	ea00 0102 	and.w	r1, r0, r2
    5a08:	e843 1c00 	strex	ip, r1, [r3]
    5a0c:	f1bc 0f00 	cmp.w	ip, #0
    5a10:	d1f6      	bne.n	5a00 <atomic_and.constprop.25+0x8>
    5a12:	f3bf 8f5b 	dmb	ish
    5a16:	4770      	bx	lr
    5a18:	200026ac 	.word	0x200026ac

00005a1c <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    5a1c:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
    5a1e:	f7ff fde7 	bl	55f0 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    5a22:	4b08      	ldr	r3, [pc, #32]	; (5a44 <ev_dma_epin0_handler+0x28>)
    5a24:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    5a28:	2a03      	cmp	r2, #3
    5a2a:	d105      	bne.n	5a38 <ev_dma_epin0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    5a2c:	f06f 0001 	mvn.w	r0, #1
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    5a30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    5a34:	f7ff bfe0 	b.w	59f8 <atomic_and.constprop.25>
    else if (p_state->handler.feeder == NULL)
    5a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    5a3c:	2b00      	cmp	r3, #0
    5a3e:	d0f5      	beq.n	5a2c <ev_dma_epin0_handler+0x10>
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    5a40:	bd08      	pop	{r3, pc}
    5a42:	bf00      	nop
    5a44:	20002720 	.word	0x20002720

00005a48 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    5a48:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    5a4a:	f7ff fdd1 	bl	55f0 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    5a4e:	4b0c      	ldr	r3, [pc, #48]	; (5a80 <ev_dma_epout8_handler+0x38>)
    5a50:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    5a54:	2a03      	cmp	r2, #3
    5a56:	d010      	beq.n	5a7a <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
    5a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    5a5c:	b96b      	cbnz	r3, 5a7a <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    5a5e:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    5a62:	f7ff ffc9 	bl	59f8 <atomic_and.constprop.25>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    5a66:	2306      	movs	r3, #6
    5a68:	f88d 3004 	strb.w	r3, [sp, #4]
    5a6c:	2308      	movs	r3, #8
    5a6e:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    5a72:	4b04      	ldr	r3, [pc, #16]	; (5a84 <ev_dma_epout8_handler+0x3c>)
    5a74:	a801      	add	r0, sp, #4
    5a76:	681b      	ldr	r3, [r3, #0]
    5a78:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    5a7a:	b003      	add	sp, #12
    5a7c:	f85d fb04 	ldr.w	pc, [sp], #4
    5a80:	20002720 	.word	0x20002720
    5a84:	20002840 	.word	0x20002840

00005a88 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    5a88:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    5a8a:	f7ff fdb1 	bl	55f0 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    5a8e:	4b0f      	ldr	r3, [pc, #60]	; (5acc <ev_dma_epin8_handler+0x44>)
    5a90:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    5a94:	2a03      	cmp	r2, #3
    5a96:	d106      	bne.n	5aa6 <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    5a98:	f46f 7080 	mvn.w	r0, #256	; 0x100
    5a9c:	f7ff ffac 	bl	59f8 <atomic_and.constprop.25>
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    5aa0:	b003      	add	sp, #12
    5aa2:	f85d fb04 	ldr.w	pc, [sp], #4
    else if (p_state->handler.feeder == NULL)
    5aa6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    5aaa:	2b00      	cmp	r3, #0
    5aac:	d1f8      	bne.n	5aa0 <ev_dma_epin8_handler+0x18>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    5aae:	f46f 7080 	mvn.w	r0, #256	; 0x100
    5ab2:	f7ff ffa1 	bl	59f8 <atomic_and.constprop.25>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    5ab6:	2306      	movs	r3, #6
    5ab8:	f88d 3004 	strb.w	r3, [sp, #4]
    5abc:	2388      	movs	r3, #136	; 0x88
    5abe:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    5ac2:	4b03      	ldr	r3, [pc, #12]	; (5ad0 <ev_dma_epin8_handler+0x48>)
    5ac4:	a801      	add	r0, sp, #4
    5ac6:	681b      	ldr	r3, [r3, #0]
    5ac8:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    5aca:	e7e9      	b.n	5aa0 <ev_dma_epin8_handler+0x18>
    5acc:	20002720 	.word	0x20002720
    5ad0:	20002840 	.word	0x20002840

00005ad4 <ev_usbevent_handler>:
    return NRF_USBD->EVENTCAUSE;
    5ad4:	4b24      	ldr	r3, [pc, #144]	; (5b68 <ev_usbevent_handler+0x94>)
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    5ad6:	b513      	push	{r0, r1, r4, lr}
    5ad8:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    NRF_USBD->EVENTCAUSE = flags;
    5adc:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
  __ASM volatile ("isb 0xF":::"memory");
    5ae0:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    5ae4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5ae8:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    5aec:	f3bf 8f4f 	dsb	sy
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    5af0:	05e1      	lsls	r1, r4, #23
    5af2:	d50b      	bpl.n	5b0c <ev_usbevent_handler+0x38>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    5af4:	4b1d      	ldr	r3, [pc, #116]	; (5b6c <ev_usbevent_handler+0x98>)
    5af6:	2201      	movs	r2, #1
    5af8:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    5afa:	2300      	movs	r3, #0
    5afc:	9301      	str	r3, [sp, #4]
    5afe:	2302      	movs	r3, #2
    5b00:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    5b04:	4b1a      	ldr	r3, [pc, #104]	; (5b70 <ev_usbevent_handler+0x9c>)
    5b06:	a801      	add	r0, sp, #4
    5b08:	681b      	ldr	r3, [r3, #0]
    5b0a:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    5b0c:	05a2      	lsls	r2, r4, #22
    5b0e:	d50a      	bpl.n	5b26 <ev_usbevent_handler+0x52>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    5b10:	4a16      	ldr	r2, [pc, #88]	; (5b6c <ev_usbevent_handler+0x98>)
    5b12:	2300      	movs	r3, #0
        const nrfx_usbd_evt_t evt = {
    5b14:	9301      	str	r3, [sp, #4]
        m_bus_suspend = false;
    5b16:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
    5b18:	2303      	movs	r3, #3
    5b1a:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    5b1e:	4b14      	ldr	r3, [pc, #80]	; (5b70 <ev_usbevent_handler+0x9c>)
    5b20:	a801      	add	r0, sp, #4
    5b22:	681b      	ldr	r3, [r3, #0]
    5b24:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    5b26:	0563      	lsls	r3, r4, #21
    5b28:	d51c      	bpl.n	5b64 <ev_usbevent_handler+0x90>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    5b2a:	4910      	ldr	r1, [pc, #64]	; (5b6c <ev_usbevent_handler+0x98>)
    5b2c:	780b      	ldrb	r3, [r1, #0]
    5b2e:	b1cb      	cbz	r3, 5b64 <ev_usbevent_handler+0x90>
    NRF_USBD->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
}

bool nrf_usbd_lowpower_check(void)
{
    return (NRF_USBD->LOWPOWER != (USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos));
    5b30:	4b0d      	ldr	r3, [pc, #52]	; (5b68 <ev_usbevent_handler+0x94>)
    5b32:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check());
    5b36:	b132      	cbz	r2, 5b46 <ev_usbevent_handler+0x72>
    5b38:	4b0e      	ldr	r3, [pc, #56]	; (5b74 <ev_usbevent_handler+0xa0>)
    5b3a:	4a0f      	ldr	r2, [pc, #60]	; (5b78 <ev_usbevent_handler+0xa4>)
    5b3c:	480f      	ldr	r0, [pc, #60]	; (5b7c <ev_usbevent_handler+0xa8>)
    5b3e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    5b42:	f7fa ff1b 	bl	97c <__assert_func>
            m_bus_suspend = false;
    5b46:	700a      	strb	r2, [r1, #0]
    NRF_USBD->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    5b48:	2101      	movs	r1, #1
    5b4a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508

            nrf_usbd_dpdmvalue_set(NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD_TASK_DRIVEDPDM);
    5b4e:	2058      	movs	r0, #88	; 0x58
    5b50:	f00d fcf4 	bl	1353c <nrf_usbd_task_trigger>

            const nrfx_usbd_evt_t evt = {
    5b54:	2304      	movs	r3, #4
    5b56:	9201      	str	r2, [sp, #4]
    5b58:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    5b5c:	4b04      	ldr	r3, [pc, #16]	; (5b70 <ev_usbevent_handler+0x9c>)
    5b5e:	a801      	add	r0, sp, #4
    5b60:	681b      	ldr	r3, [r3, #0]
    5b62:	4798      	blx	r3
        }
    }
}
    5b64:	b002      	add	sp, #8
    5b66:	bd10      	pop	{r4, pc}
    5b68:	40027000 	.word	0x40027000
    5b6c:	200059cc 	.word	0x200059cc
    5b70:	20002840 	.word	0x20002840
    5b74:	0001a553 	.word	0x0001a553
    5b78:	0001a464 	.word	0x0001a464
    5b7c:	0001a9c3 	.word	0x0001a9c3

00005b80 <nrfx_usbd_uninit>:

    return NRFX_SUCCESS;
}

void nrfx_usbd_uninit(void)
{
    5b80:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);
    5b82:	4b08      	ldr	r3, [pc, #32]	; (5ba4 <nrfx_usbd_uninit+0x24>)
    5b84:	781a      	ldrb	r2, [r3, #0]
    5b86:	2a01      	cmp	r2, #1
    5b88:	d006      	beq.n	5b98 <nrfx_usbd_uninit+0x18>
    5b8a:	4b07      	ldr	r3, [pc, #28]	; (5ba8 <nrfx_usbd_uninit+0x28>)
    5b8c:	4a07      	ldr	r2, [pc, #28]	; (5bac <nrfx_usbd_uninit+0x2c>)
    5b8e:	4808      	ldr	r0, [pc, #32]	; (5bb0 <nrfx_usbd_uninit+0x30>)
    5b90:	f240 61a3 	movw	r1, #1699	; 0x6a3
    5b94:	f7fa fef2 	bl	97c <__assert_func>

    m_event_handler = NULL;
    5b98:	4906      	ldr	r1, [pc, #24]	; (5bb4 <nrfx_usbd_uninit+0x34>)
    5b9a:	2200      	movs	r2, #0
    5b9c:	600a      	str	r2, [r1, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    5b9e:	701a      	strb	r2, [r3, #0]
    return;
}
    5ba0:	bd08      	pop	{r3, pc}
    5ba2:	bf00      	nop
    5ba4:	200059ce 	.word	0x200059ce
    5ba8:	0001a8d7 	.word	0x0001a8d7
    5bac:	0001a49b 	.word	0x0001a49b
    5bb0:	0001a9c3 	.word	0x0001a9c3
    5bb4:	20002840 	.word	0x20002840

00005bb8 <nrfx_usbd_enable>:

void nrfx_usbd_enable(void)
{
    5bb8:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);
    5bba:	4d56      	ldr	r5, [pc, #344]	; (5d14 <nrfx_usbd_enable+0x15c>)
    5bbc:	782b      	ldrb	r3, [r5, #0]
    5bbe:	2b01      	cmp	r3, #1
    5bc0:	d006      	beq.n	5bd0 <nrfx_usbd_enable+0x18>
    5bc2:	4b55      	ldr	r3, [pc, #340]	; (5d18 <nrfx_usbd_enable+0x160>)
    5bc4:	4a55      	ldr	r2, [pc, #340]	; (5d1c <nrfx_usbd_enable+0x164>)
    5bc6:	4856      	ldr	r0, [pc, #344]	; (5d20 <nrfx_usbd_enable+0x168>)
    5bc8:	f240 61ac 	movw	r1, #1708	; 0x6ac
    5bcc:	f7fa fed6 	bl	97c <__assert_func>
    NRF_USBD->EVENTCAUSE = flags;
    5bd0:	4b54      	ldr	r3, [pc, #336]	; (5d24 <nrfx_usbd_enable+0x16c>)
    5bd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    5bd6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  __ASM volatile ("isb 0xF":::"memory");
    5bda:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    5bde:	f3bf 8f4f 	dsb	sy
}

/* Errata: USB cannot be enabled. */
static inline bool nrfx_usbd_errata_187(void)
{
    return (NRFX_USBD_ERRATA_ENABLE && nrfx_usbd_errata_type_52840_eng_b());
    5be2:	f7ff fcf5 	bl	55d0 <nrfx_usbd_errata_type_52840_eng_b>
    5be6:	4950      	ldr	r1, [pc, #320]	; (5d28 <nrfx_usbd_enable+0x170>)

    /* Prepare for READY event receiving */
    nrf_usbd_eventcause_clear(NRF_USBD_EVENTCAUSE_READY_MASK);

    if (nrfx_usbd_errata_187())
    5be8:	b1a8      	cbz	r0, 5c16 <nrfx_usbd_enable+0x5e>
	__asm__ volatile(
    5bea:	f04f 0320 	mov.w	r3, #32
    5bee:	f3ef 8411 	mrs	r4, BASEPRI
    5bf2:	f383 8811 	msr	BASEPRI, r3
    5bf6:	f3bf 8f6f 	isb	sy
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    5bfa:	6808      	ldr	r0, [r1, #0]
    5bfc:	4b4b      	ldr	r3, [pc, #300]	; (5d2c <nrfx_usbd_enable+0x174>)
    5bfe:	2203      	movs	r2, #3
    5c00:	2800      	cmp	r0, #0
    5c02:	d17d      	bne.n	5d00 <nrfx_usbd_enable+0x148>
        {
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    5c04:	f249 3075 	movw	r0, #37749	; 0x9375
    5c08:	6008      	str	r0, [r1, #0]
            *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    5c0a:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    5c0c:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
    5c0e:	f384 8811 	msr	BASEPRI, r4
    5c12:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    5c16:	f04f 0320 	mov.w	r3, #32
    5c1a:	f3ef 8411 	mrs	r4, BASEPRI
    5c1e:	f383 8811 	msr	BASEPRI, r3
    5c22:	f3bf 8f6f 	isb	sy
    }
    
    if (nrfx_usbd_errata_171())
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    5c26:	6808      	ldr	r0, [r1, #0]
    5c28:	4a41      	ldr	r2, [pc, #260]	; (5d30 <nrfx_usbd_enable+0x178>)
    5c2a:	23c0      	movs	r3, #192	; 0xc0
    5c2c:	2800      	cmp	r0, #0
    5c2e:	d169      	bne.n	5d04 <nrfx_usbd_enable+0x14c>
        {
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    5c30:	f249 3075 	movw	r0, #37749	; 0x9375
    5c34:	6008      	str	r0, [r1, #0]
            *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    5c36:	6013      	str	r3, [r2, #0]
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    5c38:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
    5c3a:	f384 8811 	msr	BASEPRI, r4
    5c3e:	f3bf 8f6f 	isb	sy
    NRF_USBD->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    5c42:	4b38      	ldr	r3, [pc, #224]	; (5d24 <nrfx_usbd_enable+0x16c>)
    5c44:	2001      	movs	r0, #1
    5c46:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
  __ASM volatile ("isb 0xF":::"memory");
    5c4a:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    5c4e:	f3bf 8f4f 	dsb	sy
    return NRF_USBD->EVENTCAUSE;
    5c52:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
    }

    /* Enable the peripheral */
    nrf_usbd_enable();
    /* Waiting for peripheral to enable, this should take a few us */
    while (0 == (NRF_USBD_EVENTCAUSE_READY_MASK & nrf_usbd_eventcause_get()))
    5c56:	0500      	lsls	r0, r0, #20
    5c58:	d5fb      	bpl.n	5c52 <nrfx_usbd_enable+0x9a>
    NRF_USBD->EVENTCAUSE = flags;
    5c5a:	f44f 6000 	mov.w	r0, #2048	; 0x800
    5c5e:	f8c3 0400 	str.w	r0, [r3, #1024]	; 0x400
  __ASM volatile ("isb 0xF":::"memory");
    5c62:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    5c66:	f3bf 8f4f 	dsb	sy
	__asm__ volatile(
    5c6a:	f04f 0320 	mov.w	r3, #32
    5c6e:	f3ef 8411 	mrs	r4, BASEPRI
    5c72:	f383 8811 	msr	BASEPRI, r3
    5c76:	f3bf 8f6f 	isb	sy
    nrf_usbd_eventcause_clear(NRF_USBD_EVENTCAUSE_READY_MASK);
    
    if (nrfx_usbd_errata_171())
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    5c7a:	6808      	ldr	r0, [r1, #0]
    5c7c:	2800      	cmp	r0, #0
    5c7e:	d143      	bne.n	5d08 <nrfx_usbd_enable+0x150>
        {
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    5c80:	f249 3375 	movw	r3, #37749	; 0x9375
    5c84:	600b      	str	r3, [r1, #0]
            *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    5c86:	6010      	str	r0, [r2, #0]
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    5c88:	600b      	str	r3, [r1, #0]
	__asm__ volatile(
    5c8a:	f384 8811 	msr	BASEPRI, r4
    5c8e:	f3bf 8f6f 	isb	sy
        NRFX_CRITICAL_SECTION_EXIT();
    }

    if (nrfx_usbd_errata_166())
    {
        *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7E3;
    5c92:	4b28      	ldr	r3, [pc, #160]	; (5d34 <nrfx_usbd_enable+0x17c>)
    5c94:	f240 72e3 	movw	r2, #2019	; 0x7e3
    5c98:	601a      	str	r2, [r3, #0]
        *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) = 0x40;
    5c9a:	3304      	adds	r3, #4
    5c9c:	2240      	movs	r2, #64	; 0x40
    5c9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
    5ca0:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    5ca4:	f3bf 8f4f 	dsb	sy
    NRF_USBD->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    5ca8:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
}

void nrf_usbd_isoinconfig_set(nrf_usbd_isoinconfig_t config)
{
    NRF_USBD->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    5cac:	2400      	movs	r4, #0
    NRF_USBD->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    5cae:	2280      	movs	r2, #128	; 0x80
    5cb0:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    NRF_USBD->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    5cb4:	f8c3 4530 	str.w	r4, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    5cb8:	4b1f      	ldr	r3, [pc, #124]	; (5d38 <nrfx_usbd_enable+0x180>)
    5cba:	f240 12ff 	movw	r2, #511	; 0x1ff
    5cbe:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    5cc0:	4b1e      	ldr	r3, [pc, #120]	; (5d3c <nrfx_usbd_enable+0x184>)
    5cc2:	601c      	str	r4, [r3, #0]
    usbd_dma_pending_clear();
    5cc4:	f7ff fc94 	bl	55f0 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    5cc8:	4b1d      	ldr	r3, [pc, #116]	; (5d40 <nrfx_usbd_enable+0x188>)
    5cca:	701c      	strb	r4, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    5ccc:	2302      	movs	r3, #2
    5cce:	702b      	strb	r3, [r5, #0]
    5cd0:	f7ff fc7e 	bl	55d0 <nrfx_usbd_errata_type_52840_eng_b>

    if (nrfx_usbd_errata_187())
    5cd4:	b198      	cbz	r0, 5cfe <nrfx_usbd_enable+0x146>
	__asm__ volatile(
    5cd6:	f04f 0320 	mov.w	r3, #32
    5cda:	f3ef 8511 	mrs	r5, BASEPRI
    5cde:	f383 8811 	msr	BASEPRI, r3
    5ce2:	f3bf 8f6f 	isb	sy
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    5ce6:	6808      	ldr	r0, [r1, #0]
    5ce8:	4b10      	ldr	r3, [pc, #64]	; (5d2c <nrfx_usbd_enable+0x174>)
    5cea:	b980      	cbnz	r0, 5d0e <nrfx_usbd_enable+0x156>
        {
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    5cec:	f249 3275 	movw	r2, #37749	; 0x9375
    5cf0:	600a      	str	r2, [r1, #0]
            *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    5cf2:	6018      	str	r0, [r3, #0]
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    5cf4:	600a      	str	r2, [r1, #0]
	__asm__ volatile(
    5cf6:	f385 8811 	msr	BASEPRI, r5
    5cfa:	f3bf 8f6f 	isb	sy
        {
            *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
        }
        NRFX_CRITICAL_SECTION_EXIT();
    }
}
    5cfe:	bd38      	pop	{r3, r4, r5, pc}
            *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    5d00:	601a      	str	r2, [r3, #0]
    5d02:	e784      	b.n	5c0e <nrfx_usbd_enable+0x56>
            *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    5d04:	6013      	str	r3, [r2, #0]
    5d06:	e798      	b.n	5c3a <nrfx_usbd_enable+0x82>
            *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    5d08:	2300      	movs	r3, #0
    5d0a:	6013      	str	r3, [r2, #0]
    5d0c:	e7bd      	b.n	5c8a <nrfx_usbd_enable+0xd2>
            *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    5d0e:	601c      	str	r4, [r3, #0]
    5d10:	e7f1      	b.n	5cf6 <nrfx_usbd_enable+0x13e>
    5d12:	bf00      	nop
    5d14:	200059ce 	.word	0x200059ce
    5d18:	0001a8d7 	.word	0x0001a8d7
    5d1c:	0001a4ac 	.word	0x0001a4ac
    5d20:	0001a9c3 	.word	0x0001a9c3
    5d24:	40027000 	.word	0x40027000
    5d28:	4006ec00 	.word	0x4006ec00
    5d2c:	4006ed14 	.word	0x4006ed14
    5d30:	4006ec14 	.word	0x4006ec14
    5d34:	40027800 	.word	0x40027800
    5d38:	2000271c 	.word	0x2000271c
    5d3c:	200026ac 	.word	0x200026ac
    5d40:	200059cf 	.word	0x200059cf

00005d44 <nrfx_usbd_start>:
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    5d44:	4b13      	ldr	r3, [pc, #76]	; (5d94 <nrfx_usbd_start+0x50>)
    5d46:	781b      	ldrb	r3, [r3, #0]
    5d48:	2b02      	cmp	r3, #2
{
    5d4a:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    5d4c:	d006      	beq.n	5d5c <nrfx_usbd_start+0x18>
    5d4e:	4b12      	ldr	r3, [pc, #72]	; (5d98 <nrfx_usbd_start+0x54>)
    5d50:	4a12      	ldr	r2, [pc, #72]	; (5d9c <nrfx_usbd_start+0x58>)
    5d52:	4813      	ldr	r0, [pc, #76]	; (5da0 <nrfx_usbd_start+0x5c>)
    5d54:	f240 7126 	movw	r1, #1830	; 0x726
    5d58:	f7fa fe10 	bl	97c <__assert_func>
    m_bus_suspend = false;
    5d5c:	4b11      	ldr	r3, [pc, #68]	; (5da4 <nrfx_usbd_start+0x60>)
    5d5e:	2200      	movs	r2, #0
    5d60:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_ENDEPOUT0_MASK    |
       NRF_USBD_INT_USBEVENT_MASK     |
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof || nrfx_usbd_errata_104())
    5d62:	b9a8      	cbnz	r0, 5d90 <nrfx_usbd_start+0x4c>
    return (NRFX_USBD_ERRATA_ENABLE && (!nrfx_usbd_errata_type_52840_eng_b()));
    5d64:	f7ff fc34 	bl	55d0 <nrfx_usbd_errata_type_52840_eng_b>
    uint32_t ints_to_enable =
    5d68:	4b0f      	ldr	r3, [pc, #60]	; (5da8 <nrfx_usbd_start+0x64>)
    5d6a:	4a10      	ldr	r2, [pc, #64]	; (5dac <nrfx_usbd_start+0x68>)
    5d6c:	2800      	cmp	r0, #0
    5d6e:	bf0c      	ite	eq
    5d70:	4618      	moveq	r0, r3
    5d72:	4610      	movne	r0, r2
    NRF_USBD->INTENSET = int_mask;
    5d74:	4c0e      	ldr	r4, [pc, #56]	; (5db0 <nrfx_usbd_start+0x6c>)
    5d76:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    5d7a:	2027      	movs	r0, #39	; 0x27
    5d7c:	f005 f90a 	bl	af94 <z_arch_irq_enable>
    NRF_USBD->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    5d80:	2301      	movs	r3, #1
    5d82:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
  __ASM volatile ("isb 0xF":::"memory");
    5d86:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    5d8a:	f3bf 8f4f 	dsb	sy

   /* Enable pullups */
   nrf_usbd_pullup_enable();
}
    5d8e:	bd10      	pop	{r4, pc}
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
    5d90:	4805      	ldr	r0, [pc, #20]	; (5da8 <nrfx_usbd_start+0x64>)
    5d92:	e7ef      	b.n	5d74 <nrfx_usbd_start+0x30>
    5d94:	200059ce 	.word	0x200059ce
    5d98:	0001a8ae 	.word	0x0001a8ae
    5d9c:	0001a4cf 	.word	0x0001a4cf
    5da0:	0001a9c3 	.word	0x0001a9c3
    5da4:	200059cc 	.word	0x200059cc
    5da8:	01e01407 	.word	0x01e01407
    5dac:	01c01407 	.word	0x01c01407
    5db0:	40027000 	.word	0x40027000

00005db4 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    5db4:	4b03      	ldr	r3, [pc, #12]	; (5dc4 <nrfx_usbd_is_enabled+0x10>)
    5db6:	7818      	ldrb	r0, [r3, #0]
}
    5db8:	2801      	cmp	r0, #1
    5dba:	bf94      	ite	ls
    5dbc:	2000      	movls	r0, #0
    5dbe:	2001      	movhi	r0, #1
    5dc0:	4770      	bx	lr
    5dc2:	bf00      	nop
    5dc4:	200059ce 	.word	0x200059ce

00005dc8 <nrfx_usbd_ep_max_packet_size_set>:
{
    m_bus_suspend = false;
}

void nrfx_usbd_ep_max_packet_size_set(nrfx_usbd_ep_t ep, uint16_t size)
{
    5dc8:	b510      	push	{r4, lr}
    /* Only power of 2 size allowed */
    NRFX_ASSERT((size != 0) && (size & (size - 1)) == 0);
    5dca:	460c      	mov	r4, r1
    5dcc:	b111      	cbz	r1, 5dd4 <nrfx_usbd_ep_max_packet_size_set+0xc>
    5dce:	1e4b      	subs	r3, r1, #1
    5dd0:	420b      	tst	r3, r1
    5dd2:	d006      	beq.n	5de2 <nrfx_usbd_ep_max_packet_size_set+0x1a>
    5dd4:	4b0f      	ldr	r3, [pc, #60]	; (5e14 <nrfx_usbd_ep_max_packet_size_set+0x4c>)
    5dd6:	4a10      	ldr	r2, [pc, #64]	; (5e18 <nrfx_usbd_ep_max_packet_size_set+0x50>)
    5dd8:	f240 71be 	movw	r1, #1982	; 0x7be
    /* Packet size cannot be higher than maximum buffer size */
    NRFX_ASSERT((NRF_USBD_EPISO_CHECK(ep) && (size <= usbd_ep_iso_capacity(ep))) ||
    5ddc:	480f      	ldr	r0, [pc, #60]	; (5e1c <nrfx_usbd_ep_max_packet_size_set+0x54>)
    5dde:	f7fa fdcd 	bl	97c <__assert_func>
    5de2:	0703      	lsls	r3, r0, #28
    5de4:	d514      	bpl.n	5e10 <nrfx_usbd_ep_max_packet_size_set+0x48>
        (((NRF_USBD->ISOSPLIT) & USBD_ISOSPLIT_SPLIT_Msk) >> USBD_ISOSPLIT_SPLIT_Pos);
    5de6:	4b0e      	ldr	r3, [pc, #56]	; (5e20 <nrfx_usbd_ep_max_packet_size_set+0x58>)
    5de8:	f8d3 351c 	ldr.w	r3, [r3, #1308]	; 0x51c
    if (NRF_USBD_ISOSPLIT_HALF == split)
    5dec:	b2db      	uxtb	r3, r3
        return NRFX_USBD_ISOSIZE / 2;
    5dee:	2b80      	cmp	r3, #128	; 0x80
    5df0:	bf14      	ite	ne
    5df2:	f44f 6380 	movne.w	r3, #1024	; 0x400
    5df6:	f44f 7300 	moveq.w	r3, #512	; 0x200
    NRFX_ASSERT((NRF_USBD_EPISO_CHECK(ep) && (size <= usbd_ep_iso_capacity(ep))) ||
    5dfa:	4299      	cmp	r1, r3
    5dfc:	d904      	bls.n	5e08 <nrfx_usbd_ep_max_packet_size_set+0x40>
    5dfe:	4b09      	ldr	r3, [pc, #36]	; (5e24 <nrfx_usbd_ep_max_packet_size_set+0x5c>)
    5e00:	4a05      	ldr	r2, [pc, #20]	; (5e18 <nrfx_usbd_ep_max_packet_size_set+0x50>)
    5e02:	f240 71c1 	movw	r1, #1985	; 0x7c1
    5e06:	e7e9      	b.n	5ddc <nrfx_usbd_ep_max_packet_size_set+0x14>
                (!NRF_USBD_EPISO_CHECK(ep) && (size <= NRFX_USBD_EPSIZE)));

    usbd_ep_state_t * p_state = ep_state_access(ep);
    5e08:	f7ff fce8 	bl	57dc <ep_state_access>
    p_state->max_packet_size = size;
    5e0c:	8184      	strh	r4, [r0, #12]
}
    5e0e:	bd10      	pop	{r4, pc}
    NRFX_ASSERT((NRF_USBD_EPISO_CHECK(ep) && (size <= usbd_ep_iso_capacity(ep))) ||
    5e10:	2940      	cmp	r1, #64	; 0x40
    5e12:	e7f3      	b.n	5dfc <nrfx_usbd_ep_max_packet_size_set+0x34>
    5e14:	0001a6e8 	.word	0x0001a6e8
    5e18:	0001a4ee 	.word	0x0001a4ee
    5e1c:	0001a9c3 	.word	0x0001a9c3
    5e20:	40027000 	.word	0x40027000
    5e24:	0001a710 	.word	0x0001a710

00005e28 <nrfx_usbd_init>:
{
    5e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NRFX_ASSERT(event_handler);
    5e2a:	b930      	cbnz	r0, 5e3a <nrfx_usbd_init+0x12>
    5e2c:	4b1f      	ldr	r3, [pc, #124]	; (5eac <nrfx_usbd_init+0x84>)
    5e2e:	4a20      	ldr	r2, [pc, #128]	; (5eb0 <nrfx_usbd_init+0x88>)
    5e30:	4820      	ldr	r0, [pc, #128]	; (5eb4 <nrfx_usbd_init+0x8c>)
    5e32:	f240 617e 	movw	r1, #1662	; 0x67e
    5e36:	f7fa fda1 	bl	97c <__assert_func>
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    5e3a:	4b1f      	ldr	r3, [pc, #124]	; (5eb8 <nrfx_usbd_init+0x90>)
    5e3c:	781c      	ldrb	r4, [r3, #0]
    5e3e:	bb94      	cbnz	r4, 5ea6 <nrfx_usbd_init+0x7e>
    m_event_handler = event_handler;
    5e40:	4a1e      	ldr	r2, [pc, #120]	; (5ebc <nrfx_usbd_init+0x94>)
    5e42:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    5e44:	2201      	movs	r2, #1
    5e46:	701a      	strb	r2, [r3, #0]
    5e48:	4625      	mov	r5, r4
        p_state->status = NRFX_USBD_EP_OK;
    5e4a:	4626      	mov	r6, r4
    5e4c:	b2eb      	uxtb	r3, r5
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    5e4e:	f013 0f08 	tst.w	r3, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    5e52:	f043 0780 	orr.w	r7, r3, #128	; 0x80
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    5e56:	bf0c      	ite	eq
    5e58:	2140      	moveq	r1, #64	; 0x40
    5e5a:	f44f 7100 	movne.w	r1, #512	; 0x200
    5e5e:	4638      	mov	r0, r7
    5e60:	f7ff ffb2 	bl	5dc8 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    5e64:	4638      	mov	r0, r7
    5e66:	f7ff fcb9 	bl	57dc <ep_state_access>
        p_state->status = NRFX_USBD_EP_OK;
    5e6a:	3501      	adds	r5, #1
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    5e6c:	2d09      	cmp	r5, #9
        p_state->status = NRFX_USBD_EP_OK;
    5e6e:	7386      	strb	r6, [r0, #14]
        p_state->handler.feeder = NULL;
    5e70:	6006      	str	r6, [r0, #0]
        p_state->transfer_cnt = 0;
    5e72:	6086      	str	r6, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    5e74:	d1ea      	bne.n	5e4c <nrfx_usbd_init+0x24>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    5e76:	2140      	movs	r1, #64	; 0x40
        p_state->status = NRFX_USBD_EP_OK;
    5e78:	2500      	movs	r5, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    5e7a:	4620      	mov	r0, r4
    5e7c:	f7ff ffa4 	bl	5dc8 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    5e80:	4620      	mov	r0, r4
    5e82:	f7ff fcab 	bl	57dc <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    5e86:	3401      	adds	r4, #1
    5e88:	b2e4      	uxtb	r4, r4
    5e8a:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    5e8c:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
    5e8e:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
    5e90:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    5e92:	d101      	bne.n	5e98 <nrfx_usbd_init+0x70>
    return NRFX_SUCCESS;
    5e94:	480a      	ldr	r0, [pc, #40]	; (5ec0 <nrfx_usbd_init+0x98>)
}
    5e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    5e98:	f014 0f08 	tst.w	r4, #8
    5e9c:	bf14      	ite	ne
    5e9e:	f44f 7100 	movne.w	r1, #512	; 0x200
    5ea2:	2140      	moveq	r1, #64	; 0x40
    5ea4:	e7e9      	b.n	5e7a <nrfx_usbd_init+0x52>
        return NRFX_ERROR_INVALID_STATE;
    5ea6:	4807      	ldr	r0, [pc, #28]	; (5ec4 <nrfx_usbd_init+0x9c>)
    5ea8:	e7f5      	b.n	5e96 <nrfx_usbd_init+0x6e>
    5eaa:	bf00      	nop
    5eac:	0001a8a0 	.word	0x0001a8a0
    5eb0:	0001a48c 	.word	0x0001a48c
    5eb4:	0001a9c3 	.word	0x0001a9c3
    5eb8:	200059ce 	.word	0x200059ce
    5ebc:	20002840 	.word	0x20002840
    5ec0:	0bad0000 	.word	0x0bad0000
    5ec4:	0bad0005 	.word	0x0bad0005

00005ec8 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    5ec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ecc:	4689      	mov	r9, r1
    5ece:	4682      	mov	sl, r0
    nrfx_err_t ret;
    const uint8_t ep_bitpos = ep2bit(ep);
    5ed0:	f00d fb40 	bl	13554 <ep2bit>
    NRFX_ASSERT(NULL != p_transfer);
    5ed4:	f1b9 0f00 	cmp.w	r9, #0
    5ed8:	d106      	bne.n	5ee8 <nrfx_usbd_ep_transfer+0x20>
    5eda:	4b36      	ldr	r3, [pc, #216]	; (5fb4 <nrfx_usbd_ep_transfer+0xec>)
    5edc:	4a36      	ldr	r2, [pc, #216]	; (5fb8 <nrfx_usbd_ep_transfer+0xf0>)
    5ede:	f640 010b 	movw	r1, #2059	; 0x80b
            }
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
    5ee2:	4836      	ldr	r0, [pc, #216]	; (5fbc <nrfx_usbd_ep_transfer+0xf4>)
    5ee4:	f7fa fd4a 	bl	97c <__assert_func>
	__asm__ volatile(
    5ee8:	f04f 0320 	mov.w	r3, #32
    5eec:	f3ef 8711 	mrs	r7, BASEPRI
    5ef0:	f383 8811 	msr	BASEPRI, r3
    5ef4:	f3bf 8f6f 	isb	sy
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    5ef8:	f01a 0b0f 	ands.w	fp, sl, #15
    5efc:	d103      	bne.n	5f06 <nrfx_usbd_ep_transfer+0x3e>
    5efe:	4b30      	ldr	r3, [pc, #192]	; (5fc0 <nrfx_usbd_ep_transfer+0xf8>)
    5f00:	781b      	ldrb	r3, [r3, #0]
    5f02:	4553      	cmp	r3, sl
    5f04:	d151      	bne.n	5faa <nrfx_usbd_ep_transfer+0xe2>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    5f06:	4a2f      	ldr	r2, [pc, #188]	; (5fc4 <nrfx_usbd_ep_transfer+0xfc>)
    5f08:	4b2f      	ldr	r3, [pc, #188]	; (5fc8 <nrfx_usbd_ep_transfer+0x100>)
    5f0a:	6812      	ldr	r2, [r2, #0]
    5f0c:	681d      	ldr	r5, [r3, #0]
    5f0e:	43d2      	mvns	r2, r2
    5f10:	2601      	movs	r6, #1
    5f12:	b292      	uxth	r2, r2
    5f14:	4086      	lsls	r6, r0
    5f16:	432a      	orrs	r2, r5
    5f18:	4232      	tst	r2, r6
    5f1a:	4698      	mov	r8, r3
    5f1c:	d147      	bne.n	5fae <nrfx_usbd_ep_transfer+0xe6>
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    5f1e:	4650      	mov	r0, sl
    5f20:	f7ff fc5c 	bl	57dc <ep_state_access>
    5f24:	230c      	movs	r3, #12
        if (NRF_USBD_EPIN_CHECK(ep))
    5f26:	f01a 0f80 	tst.w	sl, #128	; 0x80
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    5f2a:	4604      	mov	r4, r0
        if (NRF_USBD_EPIN_CHECK(ep))
    5f2c:	fb03 f30b 	mul.w	r3, r3, fp
    5f30:	f8d9 2000 	ldr.w	r2, [r9]
    5f34:	d02a      	beq.n	5f8c <nrfx_usbd_ep_transfer+0xc4>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    5f36:	4925      	ldr	r1, [pc, #148]	; (5fcc <nrfx_usbd_ep_transfer+0x104>)
    5f38:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
    5f3c:	440b      	add	r3, r1
    5f3e:	f8d9 1008 	ldr.w	r1, [r9, #8]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    5f42:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    5f46:	f001 0101 	and.w	r1, r1, #1
    5f4a:	d11a      	bne.n	5f82 <nrfx_usbd_ep_transfer+0xba>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    5f4c:	b9b9      	cbnz	r1, 5f7e <nrfx_usbd_ep_transfer+0xb6>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
    5f4e:	4a20      	ldr	r2, [pc, #128]	; (5fd0 <nrfx_usbd_ep_transfer+0x108>)
            p_state->handler.consumer = nrfx_usbd_consumer;
    5f50:	6022      	str	r2, [r4, #0]
        }
        *p_context = *p_transfer;
    5f52:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
    5f56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
    5f5a:	6063      	str	r3, [r4, #4]

        p_state->transfer_cnt = 0;
    5f5c:	2300      	movs	r3, #0
    5f5e:	60a3      	str	r3, [r4, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    5f60:	73a3      	strb	r3, [r4, #14]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5f62:	4b1c      	ldr	r3, [pc, #112]	; (5fd4 <nrfx_usbd_ep_transfer+0x10c>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
        ret = NRFX_SUCCESS;
    5f64:	481c      	ldr	r0, [pc, #112]	; (5fd8 <nrfx_usbd_ep_transfer+0x110>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    5f66:	4335      	orrs	r5, r6
    5f68:	2280      	movs	r2, #128	; 0x80
    5f6a:	f8c8 5000 	str.w	r5, [r8]
    5f6e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    5f72:	f387 8811 	msr	BASEPRI, r7
    5f76:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    5f7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
    5f7e:	4a17      	ldr	r2, [pc, #92]	; (5fdc <nrfx_usbd_ep_transfer+0x114>)
    5f80:	e7e6      	b.n	5f50 <nrfx_usbd_ep_transfer+0x88>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    5f82:	b909      	cbnz	r1, 5f88 <nrfx_usbd_ep_transfer+0xc0>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
    5f84:	4a16      	ldr	r2, [pc, #88]	; (5fe0 <nrfx_usbd_ep_transfer+0x118>)
    5f86:	e7e3      	b.n	5f50 <nrfx_usbd_ep_transfer+0x88>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
    5f88:	4a16      	ldr	r2, [pc, #88]	; (5fe4 <nrfx_usbd_ep_transfer+0x11c>)
    5f8a:	e7e1      	b.n	5f50 <nrfx_usbd_ep_transfer+0x88>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    5f8c:	4916      	ldr	r1, [pc, #88]	; (5fe8 <nrfx_usbd_ep_transfer+0x120>)
    5f8e:	440b      	add	r3, r1
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
    5f90:	b14a      	cbz	r2, 5fa6 <nrfx_usbd_ep_transfer+0xde>
    5f92:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
    5f96:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    5f9a:	d004      	beq.n	5fa6 <nrfx_usbd_ep_transfer+0xde>
    5f9c:	4b13      	ldr	r3, [pc, #76]	; (5fec <nrfx_usbd_ep_transfer+0x124>)
    5f9e:	4a06      	ldr	r2, [pc, #24]	; (5fb8 <nrfx_usbd_ep_transfer+0xf0>)
    5fa0:	f640 0165 	movw	r1, #2149	; 0x865
    5fa4:	e79d      	b.n	5ee2 <nrfx_usbd_ep_transfer+0x1a>
            p_state->handler.consumer = nrfx_usbd_consumer;
    5fa6:	4a12      	ldr	r2, [pc, #72]	; (5ff0 <nrfx_usbd_ep_transfer+0x128>)
    5fa8:	e7d2      	b.n	5f50 <nrfx_usbd_ep_transfer+0x88>
        ret = NRFX_ERROR_INVALID_ADDR;
    5faa:	4812      	ldr	r0, [pc, #72]	; (5ff4 <nrfx_usbd_ep_transfer+0x12c>)
    5fac:	e7e1      	b.n	5f72 <nrfx_usbd_ep_transfer+0xaa>
        ret = NRFX_ERROR_BUSY;
    5fae:	4812      	ldr	r0, [pc, #72]	; (5ff8 <nrfx_usbd_ep_transfer+0x130>)
    5fb0:	e7df      	b.n	5f72 <nrfx_usbd_ep_transfer+0xaa>
    5fb2:	bf00      	nop
    5fb4:	0001a7d0 	.word	0x0001a7d0
    5fb8:	0001a50f 	.word	0x0001a50f
    5fbc:	0001a9c3 	.word	0x0001a9c3
    5fc0:	200059cf 	.word	0x200059cf
    5fc4:	2000271c 	.word	0x2000271c
    5fc8:	200026ac 	.word	0x200026ac
    5fcc:	200026b0 	.word	0x200026b0
    5fd0:	0000572d 	.word	0x0000572d
    5fd4:	e000e100 	.word	0xe000e100
    5fd8:	0bad0000 	.word	0x0bad0000
    5fdc:	00005771 	.word	0x00005771
    5fe0:	000058d1 	.word	0x000058d1
    5fe4:	00005941 	.word	0x00005941
    5fe8:	20002640 	.word	0x20002640
    5fec:	0001a7ea 	.word	0x0001a7ea
    5ff0:	000056c1 	.word	0x000056c1
    5ff4:	0bad000a 	.word	0x0bad000a
    5ff8:	0bad000b 	.word	0x0bad000b

00005ffc <nrfx_usbd_epout_size_get>:
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    5ffc:	b508      	push	{r3, lr}
    5ffe:	f000 030f 	and.w	r3, r0, #15
    NRFX_USBD_ASSERT_EP_VALID(ep);
    6002:	2b08      	cmp	r3, #8
    6004:	d901      	bls.n	600a <nrfx_usbd_epout_size_get+0xe>
    6006:	f7ff fc27 	bl	5858 <ep_to_hal.part.9>
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));
    600a:	0602      	lsls	r2, r0, #24
    600c:	d506      	bpl.n	601c <nrfx_usbd_epout_size_get+0x20>
    600e:	4b0b      	ldr	r3, [pc, #44]	; (603c <nrfx_usbd_epout_size_get+0x40>)
    6010:	4a0b      	ldr	r2, [pc, #44]	; (6040 <nrfx_usbd_epout_size_get+0x44>)
    6012:	480c      	ldr	r0, [pc, #48]	; (6044 <nrfx_usbd_epout_size_get+0x48>)
    6014:	f240 4171 	movw	r1, #1137	; 0x471
    6018:	f7fa fcb0 	bl	97c <__assert_func>
    if (NRF_USBD_EPISO_CHECK(ep))
    601c:	f010 0f08 	tst.w	r0, #8
    6020:	4a09      	ldr	r2, [pc, #36]	; (6048 <nrfx_usbd_epout_size_get+0x4c>)
    6022:	d006      	beq.n	6032 <nrfx_usbd_epout_size_get+0x36>
        size_t size_isoout = NRF_USBD->SIZE.ISOOUT;
    6024:	f8d2 04c0 	ldr.w	r0, [r2, #1216]	; 0x4c0
        if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) == (USBD_SIZE_ISOOUT_ZERO_ZeroData << USBD_SIZE_ISOOUT_ZERO_Pos))
    6028:	f410 3f80 	tst.w	r0, #65536	; 0x10000
            size_isoout = 0;
    602c:	bf18      	it	ne
    602e:	2000      	movne	r0, #0
    return nrf_usbd_epout_size_get(ep_to_hal(ep));
}
    6030:	bd08      	pop	{r3, pc}
    return NRF_USBD->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    6032:	f503 7394 	add.w	r3, r3, #296	; 0x128
    6036:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    return nrf_usbd_epout_size_get(ep_to_hal(ep));
    603a:	e7f9      	b.n	6030 <nrfx_usbd_epout_size_get+0x34>
    603c:	0001a83c 	.word	0x0001a83c
    6040:	0001a33e 	.word	0x0001a33e
    6044:	0001a631 	.word	0x0001a631
    6048:	40027000 	.word	0x40027000

0000604c <usbd_dmareq_process>:
{
    604c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
    6050:	4b79      	ldr	r3, [pc, #484]	; (6238 <usbd_dmareq_process+0x1ec>)
{
    6052:	b087      	sub	sp, #28
    if (!m_dma_pending)
    6054:	781a      	ldrb	r2, [r3, #0]
    6056:	9301      	str	r3, [sp, #4]
    6058:	2a00      	cmp	r2, #0
    605a:	f040 80d4 	bne.w	6206 <usbd_dmareq_process+0x1ba>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    605e:	f8df 9208 	ldr.w	r9, [pc, #520]	; 6268 <usbd_dmareq_process+0x21c>
    6062:	46ca      	mov	sl, r9
    6064:	4b75      	ldr	r3, [pc, #468]	; (623c <usbd_dmareq_process+0x1f0>)
    6066:	f8d9 4000 	ldr.w	r4, [r9]
    606a:	6818      	ldr	r0, [r3, #0]
    606c:	4020      	ands	r0, r4
    606e:	f000 80ca 	beq.w	6206 <usbd_dmareq_process+0x1ba>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    6072:	f010 2401 	ands.w	r4, r0, #16777472	; 0x1000100
    6076:	d017      	beq.n	60a8 <usbd_dmareq_process+0x5c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
    6078:	fa94 f4a4 	rbit	r4, r4
    return __CLZ(__RBIT(req));
    607c:	fab4 f484 	clz	r4, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    6080:	2c0f      	cmp	r4, #15
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    6082:	bf86      	itte	hi
    6084:	f1a4 0510 	subhi.w	r5, r4, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    6088:	b2ed      	uxtbhi	r5, r5
    608a:	f044 0580 	orrls.w	r5, r4, #128	; 0x80
            usbd_ep_state_t * p_state = ep_state_access(ep);
    608e:	4628      	mov	r0, r5
    6090:	f7ff fba4 	bl	57dc <ep_state_access>
            NRFX_ASSERT((p_state->handler.feeder) != NULL);
    6094:	6803      	ldr	r3, [r0, #0]
            usbd_ep_state_t * p_state = ep_state_access(ep);
    6096:	4606      	mov	r6, r0
            NRFX_ASSERT((p_state->handler.feeder) != NULL);
    6098:	b95b      	cbnz	r3, 60b2 <usbd_dmareq_process+0x66>
    609a:	4b69      	ldr	r3, [pc, #420]	; (6240 <usbd_dmareq_process+0x1f4>)
    609c:	4a69      	ldr	r2, [pc, #420]	; (6244 <usbd_dmareq_process+0x1f8>)
    609e:	f240 5155 	movw	r1, #1365	; 0x555
                    NRFX_ASSERT(transfer.size == 0);
    60a2:	4869      	ldr	r0, [pc, #420]	; (6248 <usbd_dmareq_process+0x1fc>)
    60a4:	f7fa fc6a 	bl	97c <__assert_func>
    60a8:	fa90 f0a0 	rbit	r0, r0
    return __CLZ(__RBIT(req));
    60ac:	fab0 f480 	clz	r4, r0
    60b0:	e7e6      	b.n	6080 <usbd_dmareq_process+0x34>
            if (NRF_USBD_EPIN_CHECK(ep))
    60b2:	fa4f f885 	sxtb.w	r8, r5
    60b6:	f1b8 0f00 	cmp.w	r8, #0
    60ba:	da54      	bge.n	6166 <usbd_dmareq_process+0x11a>
                continue_transfer = p_state->handler.feeder(
    60bc:	8982      	ldrh	r2, [r0, #12]
    60be:	6841      	ldr	r1, [r0, #4]
    60c0:	a804      	add	r0, sp, #16
    60c2:	4798      	blx	r3
                if (!continue_transfer)
    60c4:	b900      	cbnz	r0, 60c8 <usbd_dmareq_process+0x7c>
                    p_state->handler.consumer = NULL;
    60c6:	6030      	str	r0, [r6, #0]
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    60c8:	4b60      	ldr	r3, [pc, #384]	; (624c <usbd_dmareq_process+0x200>)
    60ca:	2282      	movs	r2, #130	; 0x82
    60cc:	601a      	str	r2, [r3, #0]
    m_dma_pending = true;
    60ce:	9b01      	ldr	r3, [sp, #4]
            p_state->transfer_cnt += transfer.size;
    60d0:	9a05      	ldr	r2, [sp, #20]
    m_dma_pending = true;
    60d2:	2001      	movs	r0, #1
    60d4:	7018      	strb	r0, [r3, #0]
            p_state->transfer_cnt += transfer.size;
    60d6:	68b3      	ldr	r3, [r6, #8]
            m_ep_ready &= ~(1U << pos);
    60d8:	40a0      	lsls	r0, r4
    60da:	f8da 4000 	ldr.w	r4, [sl]
            p_state->transfer_cnt += transfer.size;
    60de:	4413      	add	r3, r2
            m_ep_ready &= ~(1U << pos);
    60e0:	ea24 0000 	bic.w	r0, r4, r0
        (((NRF_USBD->ISOINCONFIG) & USBD_ISOINCONFIG_RESPONSE_Msk) >> USBD_ISOINCONFIG_RESPONSE_Pos);
}

void nrf_usbd_ep_easydma_set(uint8_t ep, uint32_t ptr, uint32_t maxcnt)
{
    if (NRF_USBD_EPIN_CHECK(ep))
    60e4:	f1b8 0f00 	cmp.w	r8, #0
            p_state->transfer_cnt += transfer.size;
    60e8:	60b3      	str	r3, [r6, #8]
            m_ep_ready &= ~(1U << pos);
    60ea:	f8ca 0000 	str.w	r0, [sl]
            nrf_usbd_ep_easydma_set(ep, transfer.p_data.addr, (uint32_t)transfer.size);
    60ee:	f005 0108 	and.w	r1, r5, #8
    60f2:	9804      	ldr	r0, [sp, #16]
    60f4:	4b56      	ldr	r3, [pc, #344]	; (6250 <usbd_dmareq_process+0x204>)
    60f6:	f005 060f 	and.w	r6, r5, #15
    60fa:	da6b      	bge.n	61d4 <usbd_dmareq_process+0x188>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    60fc:	2900      	cmp	r1, #0
    60fe:	d061      	beq.n	61c4 <usbd_dmareq_process+0x178>
        {
            NRF_USBD->ISOIN.PTR    = ptr;
    6100:	f8c3 06a0 	str.w	r0, [r3, #1696]	; 0x6a0
            NRF_USBD->ISOIN.MAXCNT = maxcnt;
    6104:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    6108:	f7ff fa62 	bl	55d0 <nrfx_usbd_errata_type_52840_eng_b>
    610c:	0077      	lsls	r7, r6, #1
    610e:	4c51      	ldr	r4, [pc, #324]	; (6254 <usbd_dmareq_process+0x208>)
    6110:	f8df 9158 	ldr.w	r9, [pc, #344]	; 626c <usbd_dmareq_process+0x220>
            if (nrfx_usbd_errata_104())
    6114:	2800      	cmp	r0, #0
    6116:	d179      	bne.n	620c <usbd_dmareq_process+0x1c0>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    6118:	ea14 0828 	ands.w	r8, r4, r8, asr #32
    611c:	bf38      	it	cc
    611e:	46c8      	movcc	r8, r9
    6120:	44b8      	add	r8, r7
                    while (0 == (0x20 & *((volatile uint32_t *)(NRF_USBD_BASE + 0x474))))
    6122:	f8df 914c 	ldr.w	r9, [pc, #332]	; 6270 <usbd_dmareq_process+0x224>
    *(nrf_usbd_getRegPtr((uint32_t)event)) = 0UL;
    6126:	4f4c      	ldr	r7, [pc, #304]	; (6258 <usbd_dmareq_process+0x20c>)
    6128:	4604      	mov	r4, r0
    612a:	603c      	str	r4, [r7, #0]
  __ASM volatile ("isb 0xF":::"memory");
    612c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    6130:	f3bf 8f4f 	dsb	sy
    nrf_usbd_task_trigger(task_start_ep(ep));
    6134:	4628      	mov	r0, r5
    6136:	f7ff fa7d 	bl	5634 <task_start_ep>
    613a:	f00d f9ff 	bl	1353c <nrf_usbd_task_trigger>
                        nrfx_systick_delay_us(2);
    613e:	2002      	movs	r0, #2
    6140:	f7ff fa24 	bl	558c <nrfx_systick_delay_us>
    return (bool)*nrf_usbd_getRegPtr_c((uint32_t)event);
    6144:	683b      	ldr	r3, [r7, #0]
                    }while (!nrf_usbd_event_check(NRF_USBD_EVENT_STARTED));
    6146:	2b00      	cmp	r3, #0
    6148:	d0ef      	beq.n	612a <usbd_dmareq_process+0xde>
                    nrfx_systick_delay_us(30);
    614a:	201e      	movs	r0, #30
                        nrfx_systick_delay_us(2);
    614c:	f7ff fa1e 	bl	558c <nrfx_systick_delay_us>
                    while (0 == (0x20 & *((volatile uint32_t *)(NRF_USBD_BASE + 0x474))))
    6150:	f8d9 3000 	ldr.w	r3, [r9]
    6154:	069b      	lsls	r3, r3, #26
    6156:	d54b      	bpl.n	61f0 <usbd_dmareq_process+0x1a4>
                    nrfx_systick_delay_us(1);
    6158:	2001      	movs	r0, #1
    615a:	f7ff fa17 	bl	558c <nrfx_systick_delay_us>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    615e:	2e08      	cmp	r6, #8
    6160:	d948      	bls.n	61f4 <usbd_dmareq_process+0x1a8>
    6162:	f7ff fb6b 	bl	583c <nrfx_usbd_ep_to_endevent.part.8>
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    6166:	4628      	mov	r0, r5
    6168:	f7ff ff48 	bl	5ffc <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    616c:	89b2      	ldrh	r2, [r6, #12]
    616e:	6837      	ldr	r7, [r6, #0]
    6170:	6871      	ldr	r1, [r6, #4]
    6172:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    6174:	4683      	mov	fp, r0
                continue_transfer = p_state->handler.consumer(
    6176:	a804      	add	r0, sp, #16
    6178:	47b8      	blx	r7
                if (transfer.p_data.rx == NULL)
    617a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    617e:	b932      	cbnz	r2, 618e <usbd_dmareq_process+0x142>
                    NRFX_ASSERT(transfer.size == 0);
    6180:	2b00      	cmp	r3, #0
    6182:	d09f      	beq.n	60c4 <usbd_dmareq_process+0x78>
    6184:	4b35      	ldr	r3, [pc, #212]	; (625c <usbd_dmareq_process+0x210>)
    6186:	4a2f      	ldr	r2, [pc, #188]	; (6244 <usbd_dmareq_process+0x1f8>)
    6188:	f240 5171 	movw	r1, #1393	; 0x571
    618c:	e789      	b.n	60a2 <usbd_dmareq_process+0x56>
                else if (transfer.size < rx_size)
    618e:	459b      	cmp	fp, r3
    6190:	d912      	bls.n	61b8 <usbd_dmareq_process+0x16c>
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    6192:	2001      	movs	r0, #1
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    6194:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    6196:	40a0      	lsls	r0, r4
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    6198:	73b7      	strb	r7, [r6, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    619a:	43c0      	mvns	r0, r0
    619c:	f7ff fc2c 	bl	59f8 <atomic_and.constprop.25>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    61a0:	2306      	movs	r3, #6
    61a2:	f88d 300c 	strb.w	r3, [sp, #12]
                    m_event_handler(&evt);
    61a6:	4b2e      	ldr	r3, [pc, #184]	; (6260 <usbd_dmareq_process+0x214>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    61a8:	f88d 500e 	strb.w	r5, [sp, #14]
    61ac:	f88d 700f 	strb.w	r7, [sp, #15]
                    m_event_handler(&evt);
    61b0:	681b      	ldr	r3, [r3, #0]
    61b2:	a803      	add	r0, sp, #12
    61b4:	4798      	blx	r3
                    continue;
    61b6:	e755      	b.n	6064 <usbd_dmareq_process+0x18>
                    NRFX_ASSERT(transfer.size == rx_size);
    61b8:	d084      	beq.n	60c4 <usbd_dmareq_process+0x78>
    61ba:	4b2a      	ldr	r3, [pc, #168]	; (6264 <usbd_dmareq_process+0x218>)
    61bc:	4a21      	ldr	r2, [pc, #132]	; (6244 <usbd_dmareq_process+0x1f8>)
    61be:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    61c2:	e76e      	b.n	60a2 <usbd_dmareq_process+0x56>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT(epnr < NRFX_ARRAY_SIZE(NRF_USBD->EPIN));
            NRF_USBD->EPIN[epnr].PTR    = ptr;
    61c4:	2114      	movs	r1, #20
    61c6:	fb01 3306 	mla	r3, r1, r6, r3
    61ca:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            NRF_USBD->EPIN[epnr].MAXCNT = maxcnt;
    61ce:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    61d2:	e799      	b.n	6108 <usbd_dmareq_process+0xbc>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    61d4:	b121      	cbz	r1, 61e0 <usbd_dmareq_process+0x194>
        {
            NRF_USBD->ISOOUT.PTR    = ptr;
    61d6:	f8c3 07a0 	str.w	r0, [r3, #1952]	; 0x7a0
            NRF_USBD->ISOOUT.MAXCNT = maxcnt;
    61da:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    61de:	e793      	b.n	6108 <usbd_dmareq_process+0xbc>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT(epnr < NRFX_ARRAY_SIZE(NRF_USBD->EPOUT));
            NRF_USBD->EPOUT[epnr].PTR    = ptr;
    61e0:	2114      	movs	r1, #20
    61e2:	fb01 3306 	mla	r3, r1, r6, r3
    61e6:	f8c3 0700 	str.w	r0, [r3, #1792]	; 0x700
            NRF_USBD->EPOUT[epnr].MAXCNT = maxcnt;
    61ea:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    61ee:	e78b      	b.n	6108 <usbd_dmareq_process+0xbc>
                        nrfx_systick_delay_us(2);
    61f0:	2002      	movs	r0, #2
    61f2:	e7ab      	b.n	614c <usbd_dmareq_process+0x100>
    return (bool)*nrf_usbd_getRegPtr_c((uint32_t)event);
    61f4:	f8b8 3000 	ldrh.w	r3, [r8]
    return (volatile const uint32_t*)(((uint8_t *)NRF_USBD) + (uint32_t)offset);
    61f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    61fc:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c((uint32_t)event);
    6200:	681b      	ldr	r3, [r3, #0]
                } while (!nrf_usbd_event_check(nrfx_usbd_ep_to_endevent(ep)));
    6202:	2b00      	cmp	r3, #0
    6204:	d091      	beq.n	612a <usbd_dmareq_process+0xde>
}
    6206:	b007      	add	sp, #28
    6208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nrf_usbd_task_trigger(task_start_ep(ep));
    620c:	4628      	mov	r0, r5
    620e:	f7ff fa11 	bl	5634 <task_start_ep>
    6212:	f00d f993 	bl	1353c <nrf_usbd_task_trigger>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    6216:	ea14 0828 	ands.w	r8, r4, r8, asr #32
    621a:	bf38      	it	cc
    621c:	46c8      	movcc	r8, r9
    621e:	44b8      	add	r8, r7
    NRFX_USBD_ASSERT_EP_VALID(ep);
    6220:	2e08      	cmp	r6, #8
    6222:	d89e      	bhi.n	6162 <usbd_dmareq_process+0x116>
    6224:	f8b8 3000 	ldrh.w	r3, [r8]
    return (volatile const uint32_t*)(((uint8_t *)NRF_USBD) + (uint32_t)offset);
    6228:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    622c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c((uint32_t)event);
    6230:	681b      	ldr	r3, [r3, #0]
                while (!nrf_usbd_event_check(nrfx_usbd_ep_to_endevent(ep)))
    6232:	2b00      	cmp	r3, #0
    6234:	d0f4      	beq.n	6220 <usbd_dmareq_process+0x1d4>
    6236:	e7e6      	b.n	6206 <usbd_dmareq_process+0x1ba>
    6238:	200059cd 	.word	0x200059cd
    623c:	200026ac 	.word	0x200026ac
    6240:	0001aa2e 	.word	0x0001aa2e
    6244:	0001a478 	.word	0x0001a478
    6248:	0001a9c3 	.word	0x0001a9c3
    624c:	40027c1c 	.word	0x40027c1c
    6250:	40027000 	.word	0x40027000
    6254:	00019752 	.word	0x00019752
    6258:	40027104 	.word	0x40027104
    625c:	0001aa57 	.word	0x0001aa57
    6260:	20002840 	.word	0x20002840
    6264:	0001aa6a 	.word	0x0001aa6a
    6268:	2000271c 	.word	0x2000271c
    626c:	00019764 	.word	0x00019764
    6270:	40027474 	.word	0x40027474

00006274 <ev_epdata_handler>:
{
    6274:	b538      	push	{r3, r4, r5, lr}
    return NRF_USBD->EPDATASTATUS;
    6276:	4b17      	ldr	r3, [pc, #92]	; (62d4 <ev_epdata_handler+0x60>)
    6278:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    NRF_USBD->EPDATASTATUS = flags;
    627c:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
  __ASM volatile ("isb 0xF":::"memory");
    6280:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    6284:	f3bf 8f4f 	dsb	sy
    6288:	f7ff f9a2 	bl	55d0 <nrfx_usbd_errata_type_52840_eng_b>
    if (nrfx_usbd_errata_104())
    628c:	b938      	cbnz	r0, 629e <ev_epdata_handler+0x2a>
        dataepstatus |= (m_simulated_dataepstatus &
    628e:	4a12      	ldr	r2, [pc, #72]	; (62d8 <ev_epdata_handler+0x64>)
    6290:	6813      	ldr	r3, [r2, #0]
    6292:	f023 1101 	bic.w	r1, r3, #65537	; 0x10001
        m_simulated_dataepstatus &=
    6296:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
        dataepstatus |= (m_simulated_dataepstatus &
    629a:	430c      	orrs	r4, r1
        m_simulated_dataepstatus &=
    629c:	6013      	str	r3, [r2, #0]
        dataepstatus &= ~(1UL << bitpos);
    629e:	2501      	movs	r5, #1
    while (dataepstatus)
    62a0:	b91c      	cbnz	r4, 62aa <ev_epdata_handler+0x36>
}
    62a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
    62a6:	f7ff bed1 	b.w	604c <usbd_dmareq_process>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
    62aa:	fa94 f3a4 	rbit	r3, r4
        uint8_t bitpos    = __CLZ(__RBIT(dataepstatus));
    62ae:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    62b2:	2b0f      	cmp	r3, #15
        uint8_t bitpos    = __CLZ(__RBIT(dataepstatus));
    62b4:	b2d9      	uxtb	r1, r3
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    62b6:	bfc4      	itt	gt
    62b8:	f1a3 0010 	subgt.w	r0, r3, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    62bc:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    62be:	fa05 f303 	lsl.w	r3, r5, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    62c2:	bfd8      	it	le
    62c4:	f041 0080 	orrle.w	r0, r1, #128	; 0x80
        dataepstatus &= ~(1UL << bitpos);
    62c8:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    62cc:	f7ff f9cc 	bl	5668 <usbd_ep_data_handler>
    62d0:	e7e6      	b.n	62a0 <ev_epdata_handler+0x2c>
    62d2:	bf00      	nop
    62d4:	40027000 	.word	0x40027000
    62d8:	20002844 	.word	0x20002844

000062dc <nrf_usbd_epout_dma_handler>:
{
    62dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    62de:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
    62e0:	f7ff f986 	bl	55f0 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
    62e4:	f7ff fa7a 	bl	57dc <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    62e8:	7b83      	ldrb	r3, [r0, #14]
    62ea:	2b03      	cmp	r3, #3
    62ec:	d10c      	bne.n	6308 <nrf_usbd_epout_dma_handler+0x2c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    62ee:	4620      	mov	r0, r4
    62f0:	f00d f930 	bl	13554 <ep2bit>
    62f4:	2301      	movs	r3, #1
    62f6:	fa03 f000 	lsl.w	r0, r3, r0
    62fa:	43c0      	mvns	r0, r0
    62fc:	f7ff fb7c 	bl	59f8 <atomic_and.constprop.25>
    usbd_dmareq_process();
    6300:	f7ff fea4 	bl	604c <usbd_dmareq_process>
}
    6304:	b003      	add	sp, #12
    6306:	bd30      	pop	{r4, r5, pc}
    else if (p_state->handler.consumer == NULL)
    6308:	6805      	ldr	r5, [r0, #0]
    630a:	2d00      	cmp	r5, #0
    630c:	d1f8      	bne.n	6300 <nrf_usbd_epout_dma_handler+0x24>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    630e:	4620      	mov	r0, r4
    6310:	f00d f920 	bl	13554 <ep2bit>
    6314:	2301      	movs	r3, #1
    6316:	fa03 f000 	lsl.w	r0, r3, r0
    631a:	43c0      	mvns	r0, r0
    631c:	f7ff fb6c 	bl	59f8 <atomic_and.constprop.25>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    6320:	2306      	movs	r3, #6
    6322:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    6326:	4b04      	ldr	r3, [pc, #16]	; (6338 <nrf_usbd_epout_dma_handler+0x5c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    6328:	f88d 4006 	strb.w	r4, [sp, #6]
    632c:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
    6330:	681b      	ldr	r3, [r3, #0]
    6332:	a801      	add	r0, sp, #4
    6334:	4798      	blx	r3
    6336:	e7e3      	b.n	6300 <nrf_usbd_epout_dma_handler+0x24>
    6338:	20002840 	.word	0x20002840

0000633c <nrfx_usbd_ep_stall>:
{
    return (0 != ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep2bit(ep))));
}

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    633c:	b508      	push	{r3, lr}
    NRFX_USBD_ASSERT_EP_VALID(ep);
    633e:	f000 030f 	and.w	r3, r0, #15
    6342:	2b08      	cmp	r3, #8
    6344:	d901      	bls.n	634a <nrfx_usbd_ep_stall+0xe>
    6346:	f7ff fa87 	bl	5858 <ep_to_hal.part.9>
    NRFX_ASSERT(!NRF_USBD_EPISO_CHECK(ep));
    634a:	0703      	lsls	r3, r0, #28
    634c:	d506      	bpl.n	635c <nrfx_usbd_ep_stall+0x20>
    634e:	4b08      	ldr	r3, [pc, #32]	; (6370 <nrfx_usbd_ep_stall+0x34>)
    6350:	4a08      	ldr	r2, [pc, #32]	; (6374 <nrfx_usbd_ep_stall+0x38>)
    6352:	4809      	ldr	r0, [pc, #36]	; (6378 <nrfx_usbd_ep_stall+0x3c>)
    6354:	f240 5101 	movw	r1, #1281	; 0x501
    6358:	f7fa fb10 	bl	97c <__assert_func>
    NRF_USBD->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    635c:	4b07      	ldr	r3, [pc, #28]	; (637c <nrfx_usbd_ep_stall+0x40>)
    635e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    6362:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
  __ASM volatile ("isb 0xF":::"memory");
    6366:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    636a:	f3bf 8f4f 	dsb	sy
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(ep_to_hal(ep));
}
    636e:	bd08      	pop	{r3, pc}
    6370:	0001a7a4 	.word	0x0001a7a4
    6374:	0001a36f 	.word	0x0001a36f
    6378:	0001a631 	.word	0x0001a631
    637c:	40027000 	.word	0x40027000

00006380 <nrfx_usbd_ep_stall_check>:
    }
    nrf_usbd_ep_unstall(ep_to_hal(ep));
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    6380:	b508      	push	{r3, lr}
    6382:	f000 030f 	and.w	r3, r0, #15
    NRFX_USBD_ASSERT_EP_VALID(ep);
    6386:	2b08      	cmp	r3, #8
    6388:	d901      	bls.n	638e <nrfx_usbd_ep_stall_check+0xe>
    638a:	f7ff fa65 	bl	5858 <ep_to_hal.part.9>
    if (NRF_USBD_EPISO_CHECK(ep))
    638e:	0702      	lsls	r2, r0, #28
    6390:	d411      	bmi.n	63b6 <nrfx_usbd_ep_stall_check+0x36>
    if (NRF_USBD_EPIN_CHECK(ep))
    6392:	f010 0f80 	tst.w	r0, #128	; 0x80
    6396:	4a09      	ldr	r2, [pc, #36]	; (63bc <nrfx_usbd_ep_stall_check+0x3c>)
        return NRF_USBD->HALTED.EPOUT[epnr];
    6398:	bf0b      	itete	eq
    639a:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return NRF_USBD->HALTED.EPIN[epnr];
    639e:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return NRF_USBD->HALTED.EPOUT[epnr];
    63a2:	eb02 0383 	addeq.w	r3, r2, r3, lsl #2
        return NRF_USBD->HALTED.EPIN[epnr];
    63a6:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return NRF_USBD->HALTED.EPOUT[epnr];
    63aa:	bf08      	it	eq
    63ac:	6858      	ldreq	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_haltedep(ep);
    63ae:	1e43      	subs	r3, r0, #1
    63b0:	4258      	negs	r0, r3
    63b2:	4158      	adcs	r0, r3
    return nrf_usbd_ep_is_stall(ep_to_hal(ep));
}
    63b4:	bd08      	pop	{r3, pc}
        return false;
    63b6:	2000      	movs	r0, #0
    63b8:	e7fc      	b.n	63b4 <nrfx_usbd_ep_stall_check+0x34>
    63ba:	bf00      	nop
    63bc:	40027000 	.word	0x40027000

000063c0 <nrfx_usbd_setup_get>:
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    63c0:	2300      	movs	r3, #0
    63c2:	6003      	str	r3, [r0, #0]
    63c4:	6043      	str	r3, [r0, #4]
    return (uint8_t)(NRF_USBD->BMREQUESTTYPE);
    63c6:	4b0e      	ldr	r3, [pc, #56]	; (6400 <nrfx_usbd_setup_get+0x40>)
    63c8:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    63cc:	7002      	strb	r2, [r0, #0]
    return (uint8_t)(NRF_USBD->BREQUEST);
    63ce:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    63d2:	7042      	strb	r2, [r0, #1]
    const uint16_t val = NRF_USBD->WVALUEL;
    63d4:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((NRF_USBD->WVALUEH) << 8));
    63d8:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    63dc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get();
    p_setup->bRequest      = nrf_usbd_setup_brequest_get();
    p_setup->wValue        = nrf_usbd_setup_wvalue_get();
    63e0:	8042      	strh	r2, [r0, #2]
    const uint16_t val = NRF_USBD->WINDEXL;
    63e2:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((NRF_USBD->WINDEXH) << 8));
    63e6:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    63ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get();
    63ee:	8082      	strh	r2, [r0, #4]
    const uint16_t val = NRF_USBD->WLENGTHL;
    63f0:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((NRF_USBD->WLENGTHH) << 8));
    63f4:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    63f8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get();
    63fc:	80c3      	strh	r3, [r0, #6]
}
    63fe:	4770      	bx	lr
    6400:	40027000 	.word	0x40027000

00006404 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    6404:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
    6406:	f7ff f8f3 	bl	55f0 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    640a:	4b0e      	ldr	r3, [pc, #56]	; (6444 <ev_dma_epout0_handler+0x40>)
    640c:	7b9a      	ldrb	r2, [r3, #14]
    640e:	2a03      	cmp	r2, #3
    6410:	d105      	bne.n	641e <ev_dma_epout0_handler+0x1a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6412:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    6416:	f7ff faef 	bl	59f8 <atomic_and.constprop.25>
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    641a:	b002      	add	sp, #8
    641c:	bd10      	pop	{r4, pc}
    else if (p_state->handler.consumer == NULL)
    641e:	681c      	ldr	r4, [r3, #0]
    6420:	b96c      	cbnz	r4, 643e <ev_dma_epout0_handler+0x3a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6422:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    6426:	f7ff fae7 	bl	59f8 <atomic_and.constprop.25>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    642a:	2306      	movs	r3, #6
    642c:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    6430:	4b05      	ldr	r3, [pc, #20]	; (6448 <ev_dma_epout0_handler+0x44>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    6432:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
    6436:	681b      	ldr	r3, [r3, #0]
    6438:	a801      	add	r0, sp, #4
    643a:	4798      	blx	r3
    643c:	e7ed      	b.n	641a <ev_dma_epout0_handler+0x16>
        nrfx_usbd_setup_data_clear();
    643e:	f00d f8f3 	bl	13628 <nrfx_usbd_setup_data_clear>
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    6442:	e7ea      	b.n	641a <ev_dma_epout0_handler+0x16>
    6444:	20002720 	.word	0x20002720
    6448:	20002840 	.word	0x20002840

0000644c <nrfx_usbd_last_setup_dir_get>:
}

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    644c:	4b01      	ldr	r3, [pc, #4]	; (6454 <nrfx_usbd_last_setup_dir_get+0x8>)
    644e:	7818      	ldrb	r0, [r3, #0]
    6450:	4770      	bx	lr
    6452:	bf00      	nop
    6454:	200059cf 	.word	0x200059cf

00006458 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    6458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));
    645a:	0603      	lsls	r3, r0, #24
{
    645c:	4604      	mov	r4, r0
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));
    645e:	d506      	bpl.n	646e <nrfx_usbd_transfer_out_drop+0x16>
    6460:	4b28      	ldr	r3, [pc, #160]	; (6504 <nrfx_usbd_transfer_out_drop+0xac>)
    6462:	4a29      	ldr	r2, [pc, #164]	; (6508 <nrfx_usbd_transfer_out_drop+0xb0>)
    6464:	4829      	ldr	r0, [pc, #164]	; (650c <nrfx_usbd_transfer_out_drop+0xb4>)
    6466:	f640 110a 	movw	r1, #2314	; 0x90a
    646a:	f7fa fa87 	bl	97c <__assert_func>
    646e:	f7ff f8af 	bl	55d0 <nrfx_usbd_errata_type_52840_eng_b>
    6472:	4d27      	ldr	r5, [pc, #156]	; (6510 <nrfx_usbd_transfer_out_drop+0xb8>)

    if (nrfx_usbd_errata_200())
    6474:	4606      	mov	r6, r0
    6476:	bb00      	cbnz	r0, 64ba <nrfx_usbd_transfer_out_drop+0x62>
	__asm__ volatile(
    6478:	f04f 0320 	mov.w	r3, #32
    647c:	f3ef 8711 	mrs	r7, BASEPRI
    6480:	f383 8811 	msr	BASEPRI, r3
    6484:	f3bf 8f6f 	isb	sy
    {
        NRFX_CRITICAL_SECTION_ENTER();
        m_ep_ready &= ~(1U << ep2bit(ep));
    6488:	4620      	mov	r0, r4
    648a:	f00d f863 	bl	13554 <ep2bit>
    648e:	2301      	movs	r3, #1
    6490:	fa03 f000 	lsl.w	r0, r3, r0
    6494:	682b      	ldr	r3, [r5, #0]
        *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7C5 + (2u * NRF_USBD_EP_NR_GET(ep));
    6496:	f004 040f 	and.w	r4, r4, #15
        m_ep_ready &= ~(1U << ep2bit(ep));
    649a:	ea23 0300 	bic.w	r3, r3, r0
    649e:	602b      	str	r3, [r5, #0]
        *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7C5 + (2u * NRF_USBD_EP_NR_GET(ep));
    64a0:	0064      	lsls	r4, r4, #1
    64a2:	4b1c      	ldr	r3, [pc, #112]	; (6514 <nrfx_usbd_transfer_out_drop+0xbc>)
    64a4:	f204 74c5 	addw	r4, r4, #1989	; 0x7c5
    64a8:	601c      	str	r4, [r3, #0]
        *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) = 0;
    64aa:	605e      	str	r6, [r3, #4]
    64ac:	3304      	adds	r3, #4
        (void)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    64ae:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    64b0:	f387 8811 	msr	BASEPRI, r7
    64b4:	f3bf 8f6f 	isb	sy
        {
            nrf_usbd_epout_clear(ep);
        }
        NRFX_CRITICAL_SECTION_EXIT();
    }
}
    64b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    64ba:	f04f 0320 	mov.w	r3, #32
    64be:	f3ef 8611 	mrs	r6, BASEPRI
    64c2:	f383 8811 	msr	BASEPRI, r3
    64c6:	f3bf 8f6f 	isb	sy
        m_ep_ready &= ~(1U << ep2bit(ep));
    64ca:	4620      	mov	r0, r4
    64cc:	f00d f842 	bl	13554 <ep2bit>
    64d0:	2301      	movs	r3, #1
    64d2:	fa03 f000 	lsl.w	r0, r3, r0
    64d6:	682b      	ldr	r3, [r5, #0]
        if (!NRF_USBD_EPISO_CHECK(ep))
    64d8:	f014 0208 	ands.w	r2, r4, #8
        m_ep_ready &= ~(1U << ep2bit(ep));
    64dc:	ea23 0300 	bic.w	r3, r3, r0
    64e0:	602b      	str	r3, [r5, #0]
        if (!NRF_USBD_EPISO_CHECK(ep))
    64e2:	d10a      	bne.n	64fa <nrfx_usbd_transfer_out_drop+0xa2>
    NRF_USBD->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    64e4:	f004 040f 	and.w	r4, r4, #15
    64e8:	f504 7494 	add.w	r4, r4, #296	; 0x128
    64ec:	4b0a      	ldr	r3, [pc, #40]	; (6518 <nrfx_usbd_transfer_out_drop+0xc0>)
    64ee:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  __ASM volatile ("isb 0xF":::"memory");
    64f2:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    64f6:	f3bf 8f4f 	dsb	sy
	__asm__ volatile(
    64fa:	f386 8811 	msr	BASEPRI, r6
    64fe:	f3bf 8f6f 	isb	sy
}
    6502:	e7d9      	b.n	64b8 <nrfx_usbd_transfer_out_drop+0x60>
    6504:	0001a83c 	.word	0x0001a83c
    6508:	0001a525 	.word	0x0001a525
    650c:	0001a9c3 	.word	0x0001a9c3
    6510:	2000271c 	.word	0x2000271c
    6514:	40027800 	.word	0x40027800
    6518:	40027000 	.word	0x40027000

0000651c <usbd_ep_abort>:
{
    651c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6520:	4604      	mov	r4, r0
    6522:	b085      	sub	sp, #20
	__asm__ volatile(
    6524:	f04f 0320 	mov.w	r3, #32
    6528:	f3ef 8711 	mrs	r7, BASEPRI
    652c:	f383 8811 	msr	BASEPRI, r3
    6530:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    6534:	f7ff f952 	bl	57dc <ep_state_access>
    if (NRF_USBD_EPOUT_CHECK(ep))
    6538:	f014 0f80 	tst.w	r4, #128	; 0x80
    usbd_ep_state_t * p_state = ep_state_access(ep);
    653c:	4605      	mov	r5, r0
    if (NRF_USBD_EPOUT_CHECK(ep))
    653e:	4e3d      	ldr	r6, [pc, #244]	; (6634 <usbd_ep_abort+0x118>)
    6540:	d12b      	bne.n	659a <usbd_ep_abort+0x7e>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    6542:	4620      	mov	r0, r4
    6544:	f00d f806 	bl	13554 <ep2bit>
    6548:	f8d6 9000 	ldr.w	r9, [r6]
    654c:	f04f 0801 	mov.w	r8, #1
    6550:	fa08 f000 	lsl.w	r0, r8, r0
    6554:	ea30 0009 	bics.w	r0, r0, r9
    6558:	d00b      	beq.n	6572 <usbd_ep_abort+0x56>
            nrfx_usbd_transfer_out_drop(ep);
    655a:	4620      	mov	r0, r4
    655c:	f7ff ff7c 	bl	6458 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    6560:	2303      	movs	r3, #3
    6562:	73ab      	strb	r3, [r5, #14]
	__asm__ volatile(
    6564:	f387 8811 	msr	BASEPRI, r7
    6568:	f3bf 8f6f 	isb	sy
}
    656c:	b005      	add	sp, #20
    656e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            p_state->handler.consumer = NULL;
    6572:	6028      	str	r0, [r5, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    6574:	4620      	mov	r0, r4
    6576:	f00c ffed 	bl	13554 <ep2bit>
    657a:	fa08 f000 	lsl.w	r0, r8, r0
    657e:	ea29 0000 	bic.w	r0, r9, r0
    6582:	6030      	str	r0, [r6, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    6584:	4620      	mov	r0, r4
    6586:	f00c ffe5 	bl	13554 <ep2bit>
    658a:	4a2b      	ldr	r2, [pc, #172]	; (6638 <usbd_ep_abort+0x11c>)
    658c:	6813      	ldr	r3, [r2, #0]
    658e:	fa08 f000 	lsl.w	r0, r8, r0
    6592:	ea23 0000 	bic.w	r0, r3, r0
    6596:	6010      	str	r0, [r2, #0]
    6598:	e7e2      	b.n	6560 <usbd_ep_abort+0x44>
        if(!NRF_USBD_EPISO_CHECK(ep))
    659a:	0723      	lsls	r3, r4, #28
    659c:	d411      	bmi.n	65c2 <usbd_ep_abort+0xa6>
            if(ep != NRFX_USBD_EPIN0)
    659e:	2c80      	cmp	r4, #128	; 0x80
    65a0:	4926      	ldr	r1, [pc, #152]	; (663c <usbd_ep_abort+0x120>)
    65a2:	4b27      	ldr	r3, [pc, #156]	; (6640 <usbd_ep_abort+0x124>)
    65a4:	d03c      	beq.n	6620 <usbd_ep_abort+0x104>
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    65a6:	f004 020f 	and.w	r2, r4, #15
    65aa:	0052      	lsls	r2, r2, #1
    65ac:	f202 72b4 	addw	r2, r2, #1972	; 0x7b4
    65b0:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    65b2:	681a      	ldr	r2, [r3, #0]
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) |= temp;
    65b4:	6819      	ldr	r1, [r3, #0]
                uint8_t temp = *((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    65b6:	b2d2      	uxtb	r2, r2
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) |= temp;
    65b8:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) |= temp;
    65bc:	430a      	orrs	r2, r1
    65be:	601a      	str	r2, [r3, #0]
                (void)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    65c0:	681b      	ldr	r3, [r3, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    65c2:	f8df 9074 	ldr.w	r9, [pc, #116]	; 6638 <usbd_ep_abort+0x11c>
    65c6:	f8d6 b000 	ldr.w	fp, [r6]
    65ca:	f8d9 a000 	ldr.w	sl, [r9]
    65ce:	4620      	mov	r0, r4
    65d0:	ea6b 030a 	orn	r3, fp, sl
    65d4:	9301      	str	r3, [sp, #4]
    65d6:	f00c ffbd 	bl	13554 <ep2bit>
    65da:	f04f 0801 	mov.w	r8, #1
    65de:	9b01      	ldr	r3, [sp, #4]
    65e0:	fa08 f000 	lsl.w	r0, r8, r0
    65e4:	4203      	tst	r3, r0
    65e6:	d0bd      	beq.n	6564 <usbd_ep_abort+0x48>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    65e8:	ea2b 0000 	bic.w	r0, fp, r0
    65ec:	6030      	str	r0, [r6, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    65ee:	4620      	mov	r0, r4
    65f0:	f00c ffb0 	bl	13554 <ep2bit>
            p_state->handler.feeder = NULL;
    65f4:	2300      	movs	r3, #0
    65f6:	602b      	str	r3, [r5, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    65f8:	2303      	movs	r3, #3
            m_ep_ready       |=   1U << ep2bit(ep) ;
    65fa:	fa08 f000 	lsl.w	r0, r8, r0
            p_state->status = NRFX_USBD_EP_ABORTED;
    65fe:	73ab      	strb	r3, [r5, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    6600:	f88d 300f 	strb.w	r3, [sp, #15]
            m_event_handler(&evt);
    6604:	4b0f      	ldr	r3, [pc, #60]	; (6644 <usbd_ep_abort+0x128>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    6606:	f88d 400e 	strb.w	r4, [sp, #14]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    660a:	ea40 000a 	orr.w	r0, r0, sl
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    660e:	2206      	movs	r2, #6
            m_ep_ready       |=   1U << ep2bit(ep) ;
    6610:	f8c9 0000 	str.w	r0, [r9]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    6614:	f88d 200c 	strb.w	r2, [sp, #12]
            m_event_handler(&evt);
    6618:	681b      	ldr	r3, [r3, #0]
    661a:	a803      	add	r0, sp, #12
    661c:	4798      	blx	r3
    661e:	e7a1      	b.n	6564 <usbd_ep_abort+0x48>
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7B4;
    6620:	f240 72b4 	movw	r2, #1972	; 0x7b4
    6624:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    6626:	681a      	ldr	r2, [r3, #0]
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) |= temp;
    6628:	6819      	ldr	r1, [r3, #0]
                uint8_t temp = *((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    662a:	b2d2      	uxtb	r2, r2
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) |= temp;
    662c:	f042 0204 	orr.w	r2, r2, #4
    6630:	e7c4      	b.n	65bc <usbd_ep_abort+0xa0>
    6632:	bf00      	nop
    6634:	200026ac 	.word	0x200026ac
    6638:	2000271c 	.word	0x2000271c
    663c:	40027800 	.word	0x40027800
    6640:	40027804 	.word	0x40027804
    6644:	20002840 	.word	0x20002840

00006648 <ev_setup_handler>:
{
    6648:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    return (uint8_t)(NRF_USBD->BMREQUESTTYPE);
    664c:	4b17      	ldr	r3, [pc, #92]	; (66ac <ev_setup_handler+0x64>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    664e:	4d18      	ldr	r5, [pc, #96]	; (66b0 <ev_setup_handler+0x68>)
    6650:	f8d3 7480 	ldr.w	r7, [r3, #1152]	; 0x480
    6654:	682b      	ldr	r3, [r5, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    6656:	4e17      	ldr	r6, [pc, #92]	; (66b4 <ev_setup_handler+0x6c>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    6658:	43dc      	mvns	r4, r3
    665a:	4b17      	ldr	r3, [pc, #92]	; (66b8 <ev_setup_handler+0x70>)
        & (1U <<ep2bit(m_last_setup_dir)))
    665c:	f896 8000 	ldrb.w	r8, [r6]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    6660:	681b      	ldr	r3, [r3, #0]
    6662:	b2a4      	uxth	r4, r4
        & (1U <<ep2bit(m_last_setup_dir)))
    6664:	4640      	mov	r0, r8
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    6666:	431c      	orrs	r4, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    6668:	f00c ff74 	bl	13554 <ep2bit>
    666c:	2301      	movs	r3, #1
    666e:	fa03 f000 	lsl.w	r0, r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    6672:	4220      	tst	r0, r4
    6674:	d002      	beq.n	667c <ev_setup_handler+0x34>
        usbd_ep_abort(m_last_setup_dir);
    6676:	4640      	mov	r0, r8
    6678:	f7ff ff50 	bl	651c <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    667c:	f007 0780 	and.w	r7, r7, #128	; 0x80
    (void)(NRFX_ATOMIC_FETCH_AND(
    6680:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
    6684:	7037      	strb	r7, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    6686:	f7ff f9b7 	bl	59f8 <atomic_and.constprop.25>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    668a:	682b      	ldr	r3, [r5, #0]
    668c:	f043 0301 	orr.w	r3, r3, #1
    6690:	602b      	str	r3, [r5, #0]
    const nrfx_usbd_evt_t evt = {
    6692:	2300      	movs	r3, #0
    6694:	9301      	str	r3, [sp, #4]
    6696:	2305      	movs	r3, #5
    6698:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
    669c:	4b07      	ldr	r3, [pc, #28]	; (66bc <ev_setup_handler+0x74>)
    669e:	a801      	add	r0, sp, #4
    66a0:	681b      	ldr	r3, [r3, #0]
    66a2:	4798      	blx	r3
}
    66a4:	b002      	add	sp, #8
    66a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    66aa:	bf00      	nop
    66ac:	40027000 	.word	0x40027000
    66b0:	2000271c 	.word	0x2000271c
    66b4:	200059cf 	.word	0x200059cf
    66b8:	200026ac 	.word	0x200026ac
    66bc:	20002840 	.word	0x20002840

000066c0 <nrfx_usbd_irq_handler>:
    return NRF_USBD->INTENSET;
    66c0:	4b55      	ldr	r3, [pc, #340]	; (6818 <nrfx_usbd_irq_handler+0x158>)
{
    66c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66c6:	f8d3 5304 	ldr.w	r5, [r3, #772]	; 0x304
    uint32_t active = 0;
    66ca:	2200      	movs	r2, #0
    uint32_t to_process = enabled;
    66cc:	4629      	mov	r1, r5
    *(nrf_usbd_getRegPtr((uint32_t)event)) = 0UL;
    66ce:	4616      	mov	r6, r2
            active |= 1UL << event_nr;
    66d0:	2401      	movs	r4, #1
    while (to_process)
    66d2:	2900      	cmp	r1, #0
    66d4:	d17c      	bne.n	67d0 <nrfx_usbd_irq_handler+0x110>
    66d6:	f7fe ff7b 	bl	55d0 <nrfx_usbd_errata_type_52840_eng_b>
    if (nrfx_usbd_errata_104())
    66da:	2800      	cmp	r0, #0
    66dc:	d169      	bne.n	67b2 <nrfx_usbd_irq_handler+0xf2>
        if ((!m_dma_pending) && (0 != (active & (USBD_INTEN_SOF_Msk))))
    66de:	4b4f      	ldr	r3, [pc, #316]	; (681c <nrfx_usbd_irq_handler+0x15c>)
    66e0:	781b      	ldrb	r3, [r3, #0]
    66e2:	2b00      	cmp	r3, #0
    66e4:	d165      	bne.n	67b2 <nrfx_usbd_irq_handler+0xf2>
    66e6:	0296      	lsls	r6, r2, #10
    66e8:	d563      	bpl.n	67b2 <nrfx_usbd_irq_handler+0xf2>
            *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7A9;
    66ea:	494d      	ldr	r1, [pc, #308]	; (6820 <nrfx_usbd_irq_handler+0x160>)
            *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AB;
    66ec:	4e4c      	ldr	r6, [pc, #304]	; (6820 <nrfx_usbd_irq_handler+0x160>)
            *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7A9;
    66ee:	f240 73a9 	movw	r3, #1961	; 0x7a9
    66f2:	600b      	str	r3, [r1, #0]
            uii = (uint8_t)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    66f4:	4b4b      	ldr	r3, [pc, #300]	; (6824 <nrfx_usbd_irq_handler+0x164>)
    66f6:	681c      	ldr	r4, [r3, #0]
            if (0 != uii)
    66f8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
                uii &= (uint8_t)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    66fc:	bf1c      	itt	ne
    66fe:	6818      	ldrne	r0, [r3, #0]
    6700:	4004      	andne	r4, r0
            *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AA;
    6702:	f240 70aa 	movw	r0, #1962	; 0x7aa
    6706:	6008      	str	r0, [r1, #0]
            uoi = (uint8_t)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    6708:	6818      	ldr	r0, [r3, #0]
            if (0 != uoi)
    670a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
                uoi &= (uint8_t)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    670e:	bf1c      	itt	ne
    6710:	6819      	ldrne	r1, [r3, #0]
    6712:	4008      	andne	r0, r1
            *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AB;
    6714:	f240 71ab 	movw	r1, #1963	; 0x7ab
    6718:	6031      	str	r1, [r6, #0]
            usbi = (uint8_t)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    671a:	6819      	ldr	r1, [r3, #0]
            if (0 != usbi)
    671c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    6720:	46b4      	mov	ip, r6
                usbi &= (uint8_t)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    6722:	bf1c      	itt	ne
    6724:	681e      	ldrne	r6, [r3, #0]
    6726:	4031      	andne	r1, r6
            *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AC;
    6728:	f240 76ac 	movw	r6, #1964	; 0x7ac
    672c:	f8cc 6000 	str.w	r6, [ip]
            uii &= (uint8_t)*((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    6730:	681e      	ldr	r6, [r3, #0]
            if (0 != uii)
    6732:	4034      	ands	r4, r6
    6734:	4e3c      	ldr	r6, [pc, #240]	; (6828 <nrfx_usbd_irq_handler+0x168>)
    6736:	d008      	beq.n	674a <nrfx_usbd_irq_handler+0x8a>
                m_simulated_dataepstatus |= ((uint32_t)uii) << NRFX_USBD_EPIN_BITPOS_0;
    6738:	6837      	ldr	r7, [r6, #0]
    673a:	4327      	orrs	r7, r4
    673c:	6037      	str	r7, [r6, #0]
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7A9;
    673e:	f240 77a9 	movw	r7, #1961	; 0x7a9
    6742:	f8cc 7000 	str.w	r7, [ip]
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) = uii;
    6746:	601c      	str	r4, [r3, #0]
                rb = (uint8_t)*((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    6748:	681c      	ldr	r4, [r3, #0]
            *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AD;
    674a:	4f35      	ldr	r7, [pc, #212]	; (6820 <nrfx_usbd_irq_handler+0x160>)
    674c:	f240 74ad 	movw	r4, #1965	; 0x7ad
    6750:	603c      	str	r4, [r7, #0]
            uoi &= (uint8_t)*((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    6752:	681c      	ldr	r4, [r3, #0]
            if (0 != uoi)
    6754:	4020      	ands	r0, r4
    6756:	d008      	beq.n	676a <nrfx_usbd_irq_handler+0xaa>
                m_simulated_dataepstatus |= ((uint32_t)uoi) << NRFX_USBD_EPOUT_BITPOS_0;
    6758:	6834      	ldr	r4, [r6, #0]
    675a:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
    675e:	6034      	str	r4, [r6, #0]
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AA;
    6760:	f240 74aa 	movw	r4, #1962	; 0x7aa
    6764:	603c      	str	r4, [r7, #0]
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) = uoi;
    6766:	6018      	str	r0, [r3, #0]
                rb = (uint8_t)*((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    6768:	6818      	ldr	r0, [r3, #0]
            *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AE;
    676a:	482d      	ldr	r0, [pc, #180]	; (6820 <nrfx_usbd_irq_handler+0x160>)
    676c:	f240 74ae 	movw	r4, #1966	; 0x7ae
    6770:	6004      	str	r4, [r0, #0]
            usbi &= (uint8_t)*((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    6772:	6818      	ldr	r0, [r3, #0]
            if (0 != usbi)
    6774:	4001      	ands	r1, r0
    6776:	d00d      	beq.n	6794 <nrfx_usbd_irq_handler+0xd4>
                if (usbi & 0x01)
    6778:	07cc      	lsls	r4, r1, #31
                    active |= USBD_INTEN_EP0SETUP_Msk;
    677a:	bf48      	it	mi
    677c:	f442 0200 	orrmi.w	r2, r2, #8388608	; 0x800000
                if (usbi & 0x10)
    6780:	06c8      	lsls	r0, r1, #27
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AB;
    6782:	4827      	ldr	r0, [pc, #156]	; (6820 <nrfx_usbd_irq_handler+0x160>)
    6784:	f240 74ab 	movw	r4, #1963	; 0x7ab
    6788:	6004      	str	r4, [r0, #0]
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) = usbi;
    678a:	6019      	str	r1, [r3, #0]
                rb = (uint8_t)*((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    678c:	681b      	ldr	r3, [r3, #0]
                    active |= USBD_INTEN_USBRESET_Msk;
    678e:	bf48      	it	mi
    6790:	f042 0201 	orrmi.w	r2, r2, #1
            if (0 != (m_simulated_dataepstatus &
    6794:	6833      	ldr	r3, [r6, #0]
    6796:	f033 1101 	bics.w	r1, r3, #65537	; 0x10001
                active |= enabled & NRF_USBD_INT_DATAEP_MASK;
    679a:	bf1c      	itt	ne
    679c:	f005 7080 	andne.w	r0, r5, #16777216	; 0x1000000
    67a0:	4302      	orrne	r2, r0
            if (0 != (m_simulated_dataepstatus &
    67a2:	f013 1f01 	tst.w	r3, #65537	; 0x10001
    67a6:	d004      	beq.n	67b2 <nrfx_usbd_irq_handler+0xf2>
                if (0 != (enabled & NRF_USBD_INT_EP0DATADONE_MASK))
    67a8:	056b      	lsls	r3, r5, #21
                    m_simulated_dataepstatus &=
    67aa:	bf44      	itt	mi
    67ac:	6031      	strmi	r1, [r6, #0]
                    active |= NRF_USBD_INT_EP0DATADONE_MASK;
    67ae:	f442 6280 	orrmi.w	r2, r2, #1024	; 0x400
        m_isr[event_nr]();
    67b2:	4f1e      	ldr	r7, [pc, #120]	; (682c <nrfx_usbd_irq_handler+0x16c>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    67b4:	f402 0600 	and.w	r6, r2, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    67b8:	f422 0400 	bic.w	r4, r2, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
    67bc:	f04f 0801 	mov.w	r8, #1
    while (active)
    67c0:	b9e4      	cbnz	r4, 67fc <nrfx_usbd_irq_handler+0x13c>
    usbd_dmareq_process();
    67c2:	f7ff fc43 	bl	604c <usbd_dmareq_process>
    if (setup_active)
    67c6:	b32e      	cbz	r6, 6814 <nrfx_usbd_irq_handler+0x154>
}
    67c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    67cc:	f7ff bf3c 	b.w	6648 <ev_setup_handler>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
    67d0:	fa91 f3a1 	rbit	r3, r1
    return (volatile const uint32_t*)(((uint8_t *)NRF_USBD) + (uint32_t)offset);
    67d4:	4816      	ldr	r0, [pc, #88]	; (6830 <nrfx_usbd_irq_handler+0x170>)
        uint8_t event_nr = __CLZ(__RBIT(to_process));
    67d6:	fab3 f383 	clz	r3, r3
}

__STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    67da:	009f      	lsls	r7, r3, #2
    67dc:	4438      	add	r0, r7
    return (bool)*nrf_usbd_getRegPtr_c((uint32_t)event);
    67de:	6807      	ldr	r7, [r0, #0]
    if (ret)
    67e0:	b13f      	cbz	r7, 67f2 <nrfx_usbd_irq_handler+0x132>
    *(nrf_usbd_getRegPtr((uint32_t)event)) = 0UL;
    67e2:	6006      	str	r6, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
    67e4:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    67e8:	f3bf 8f4f 	dsb	sy
            active |= 1UL << event_nr;
    67ec:	fa04 f003 	lsl.w	r0, r4, r3
    67f0:	4302      	orrs	r2, r0
        to_process &= ~(1UL << event_nr);
    67f2:	fa04 f303 	lsl.w	r3, r4, r3
    67f6:	ea21 0103 	bic.w	r1, r1, r3
    67fa:	e76a      	b.n	66d2 <nrfx_usbd_irq_handler+0x12>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
    67fc:	fa94 f5a4 	rbit	r5, r4
        uint8_t event_nr = __CLZ(__RBIT(active));
    6800:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
    6804:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
    6808:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
    680c:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    680e:	ea24 0405 	bic.w	r4, r4, r5
    6812:	e7d5      	b.n	67c0 <nrfx_usbd_irq_handler+0x100>
}
    6814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6818:	40027000 	.word	0x40027000
    681c:	200059cd 	.word	0x200059cd
    6820:	40027800 	.word	0x40027800
    6824:	40027804 	.word	0x40027804
    6828:	20002844 	.word	0x20002844
    682c:	000191e8 	.word	0x000191e8
    6830:	40027100 	.word	0x40027100

00006834 <usbd_ep_abort_all>:
{
    6834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    6836:	4e10      	ldr	r6, [pc, #64]	; (6878 <usbd_ep_abort_all+0x44>)
    6838:	4a10      	ldr	r2, [pc, #64]	; (687c <usbd_ep_abort_all+0x48>)
    683a:	6834      	ldr	r4, [r6, #0]
    683c:	6812      	ldr	r2, [r2, #0]
    683e:	0c24      	lsrs	r4, r4, #16
    6840:	0424      	lsls	r4, r4, #16
    6842:	4314      	orrs	r4, r2
        ep_waiting &= ~(1U << bitpos);
    6844:	2701      	movs	r7, #1
    while (0 != ep_waiting)
    6846:	b91c      	cbnz	r4, 6850 <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    6848:	f240 13ff 	movw	r3, #511	; 0x1ff
    684c:	6033      	str	r3, [r6, #0]
}
    684e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6850:	fa94 f5a4 	rbit	r5, r4
        uint8_t bitpos = __CLZ(__RBIT(ep_waiting));
    6854:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    6858:	2d0f      	cmp	r5, #15
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    685a:	bfc6      	itte	gt
    685c:	f1a5 0010 	subgt.w	r0, r5, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    6860:	b2c0      	uxtbgt	r0, r0
    6862:	f045 0080 	orrle.w	r0, r5, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    6866:	0703      	lsls	r3, r0, #28
    6868:	d401      	bmi.n	686e <usbd_ep_abort_all+0x3a>
            usbd_ep_abort(bit2ep(bitpos));
    686a:	f7ff fe57 	bl	651c <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    686e:	fa07 f505 	lsl.w	r5, r7, r5
    6872:	ea24 0405 	bic.w	r4, r4, r5
    6876:	e7e6      	b.n	6846 <usbd_ep_abort_all+0x12>
    6878:	2000271c 	.word	0x2000271c
    687c:	200026ac 	.word	0x200026ac

00006880 <nrfx_usbd_stop>:
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    6880:	4b12      	ldr	r3, [pc, #72]	; (68cc <nrfx_usbd_stop+0x4c>)
    6882:	781b      	ldrb	r3, [r3, #0]
    6884:	2b02      	cmp	r3, #2
{
    6886:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    6888:	d006      	beq.n	6898 <nrfx_usbd_stop+0x18>
    688a:	4b11      	ldr	r3, [pc, #68]	; (68d0 <nrfx_usbd_stop+0x50>)
    688c:	4a11      	ldr	r2, [pc, #68]	; (68d4 <nrfx_usbd_stop+0x54>)
    688e:	4812      	ldr	r0, [pc, #72]	; (68d8 <nrfx_usbd_stop+0x58>)
    6890:	f240 7145 	movw	r1, #1861	; 0x745
    6894:	f7fa f872 	bl	97c <__assert_func>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6898:	4b10      	ldr	r3, [pc, #64]	; (68dc <nrfx_usbd_stop+0x5c>)
    689a:	2280      	movs	r2, #128	; 0x80
    689c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    68a0:	2027      	movs	r0, #39	; 0x27
    68a2:	f004 fb9b 	bl	afdc <z_arch_irq_is_enabled>
    68a6:	b180      	cbz	r0, 68ca <nrfx_usbd_stop+0x4a>
    NRF_USBD->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    68a8:	4c0d      	ldr	r4, [pc, #52]	; (68e0 <nrfx_usbd_stop+0x60>)
        usbd_ep_abort_all();
    68aa:	f7ff ffc3 	bl	6834 <usbd_ep_abort_all>
    68ae:	2300      	movs	r3, #0
    68b0:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
  __ASM volatile ("isb 0xF":::"memory");
    68b4:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    68b8:	f3bf 8f4f 	dsb	sy
        NRFX_IRQ_DISABLE(USBD_IRQn);
    68bc:	2027      	movs	r0, #39	; 0x27
    68be:	f004 fb79 	bl	afb4 <z_arch_irq_disable>
    NRF_USBD->INTENCLR = int_mask;
    68c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    68c6:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
    68ca:	bd10      	pop	{r4, pc}
    68cc:	200059ce 	.word	0x200059ce
    68d0:	0001a8ae 	.word	0x0001a8ae
    68d4:	0001a4df 	.word	0x0001a4df
    68d8:	0001a9c3 	.word	0x0001a9c3
    68dc:	e000e100 	.word	0xe000e100
    68e0:	40027000 	.word	0x40027000

000068e4 <nrfx_usbd_disable>:
{
    68e4:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_drv_state != NRFX_DRV_STATE_UNINITIALIZED);
    68e6:	4c0e      	ldr	r4, [pc, #56]	; (6920 <nrfx_usbd_disable+0x3c>)
    68e8:	7823      	ldrb	r3, [r4, #0]
    68ea:	b933      	cbnz	r3, 68fa <nrfx_usbd_disable+0x16>
    68ec:	4b0d      	ldr	r3, [pc, #52]	; (6924 <nrfx_usbd_disable+0x40>)
    68ee:	4a0e      	ldr	r2, [pc, #56]	; (6928 <nrfx_usbd_disable+0x44>)
    68f0:	480e      	ldr	r0, [pc, #56]	; (692c <nrfx_usbd_disable+0x48>)
    68f2:	f44f 61e3 	mov.w	r1, #1816	; 0x718
    68f6:	f7fa f841 	bl	97c <__assert_func>
    nrfx_usbd_stop();
    68fa:	f7ff ffc1 	bl	6880 <nrfx_usbd_stop>
    return NRF_USBD->INTENSET;
    68fe:	4b0c      	ldr	r3, [pc, #48]	; (6930 <nrfx_usbd_disable+0x4c>)
    6900:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    NRF_USBD->INTENCLR = int_mask;
    6904:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_USBD->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    6908:	2200      	movs	r2, #0
    690a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("isb 0xF":::"memory");
    690e:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    6912:	f3bf 8f4f 	dsb	sy
    usbd_dma_pending_clear();
    6916:	f7fe fe6b 	bl	55f0 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    691a:	2301      	movs	r3, #1
    691c:	7023      	strb	r3, [r4, #0]
}
    691e:	bd10      	pop	{r4, pc}
    6920:	200059ce 	.word	0x200059ce
    6924:	0001a6bc 	.word	0x0001a6bc
    6928:	0001a4bd 	.word	0x0001a4bd
    692c:	0001a9c3 	.word	0x0001a9c3
    6930:	40027000 	.word	0x40027000

00006934 <nrfx_usbd_suspend>:
{
    6934:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6936:	f04f 0320 	mov.w	r3, #32
    693a:	f3ef 8511 	mrs	r5, BASEPRI
    693e:	f383 8811 	msr	BASEPRI, r3
    6942:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
    6946:	4b0f      	ldr	r3, [pc, #60]	; (6984 <nrfx_usbd_suspend+0x50>)
    6948:	781b      	ldrb	r3, [r3, #0]
    694a:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    694e:	b933      	cbnz	r3, 695e <nrfx_usbd_suspend+0x2a>
    bool suspended = false;
    6950:	2400      	movs	r4, #0
	__asm__ volatile(
    6952:	f385 8811 	msr	BASEPRI, r5
    6956:	f3bf 8f6f 	isb	sy
}
    695a:	4620      	mov	r0, r4
    695c:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
    695e:	f7ff ff69 	bl	6834 <usbd_ep_abort_all>
    return NRF_USBD->EVENTCAUSE;
    6962:	4a09      	ldr	r2, [pc, #36]	; (6988 <nrfx_usbd_suspend+0x54>)
    6964:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get() & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    6968:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    696c:	d1f0      	bne.n	6950 <nrfx_usbd_suspend+0x1c>
    NRF_USBD->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    696e:	2101      	movs	r1, #1
    6970:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
    return NRF_USBD->EVENTCAUSE;
    6974:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
            if (nrf_usbd_eventcause_get() & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    6978:	0589      	lsls	r1, r1, #22
    NRF_USBD->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    697a:	bf44      	itt	mi
    697c:	f8c2 352c 	strmi.w	r3, [r2, #1324]	; 0x52c
    bool suspended = false;
    6980:	461c      	movmi	r4, r3
    6982:	e7e6      	b.n	6952 <nrfx_usbd_suspend+0x1e>
    6984:	200059cc 	.word	0x200059cc
    6988:	40027000 	.word	0x40027000

0000698c <nrfx_usbd_ep_enable>:
{
    698c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6990:	f000 070f 	and.w	r7, r0, #15
    NRFX_USBD_ASSERT_EP_VALID(ep);
    6994:	2f08      	cmp	r7, #8
{
    6996:	4604      	mov	r4, r0
    NRFX_USBD_ASSERT_EP_VALID(ep);
    6998:	d901      	bls.n	699e <nrfx_usbd_ep_enable+0x12>
    699a:	f7fe ff8b 	bl	58b4 <nrfx_usbd_ep_to_int.part.11>
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    699e:	4b24      	ldr	r3, [pc, #144]	; (6a30 <nrfx_usbd_ep_enable+0xa4>)
    69a0:	4a24      	ldr	r2, [pc, #144]	; (6a34 <nrfx_usbd_ep_enable+0xa8>)
    NRF_USBD->INTENSET = int_mask;
    69a2:	4d25      	ldr	r5, [pc, #148]	; (6a38 <nrfx_usbd_ep_enable+0xac>)
    69a4:	fa4f f880 	sxtb.w	r8, r0
    69a8:	ea13 0328 	ands.w	r3, r3, r8, asr #32
    69ac:	bf38      	it	cc
    69ae:	4613      	movcc	r3, r2
    69b0:	2601      	movs	r6, #1
    69b2:	5ddb      	ldrb	r3, [r3, r7]
    69b4:	fa06 f303 	lsl.w	r3, r6, r3
    69b8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    if (nrf_usbd_ep_enable_check(ep))
    69bc:	f7fe ff5a 	bl	5874 <nrf_usbd_ep_enable_check>
    69c0:	2800      	cmp	r0, #0
    69c2:	d133      	bne.n	6a2c <nrfx_usbd_ep_enable+0xa0>
    if (NRF_USBD_EPIN_CHECK(ep))
    69c4:	f1b8 0f00 	cmp.w	r8, #0
        NRF_USBD->EPINEN |= 1UL << epnr;
    69c8:	bfb4      	ite	lt
    69ca:	f8d5 3510 	ldrlt.w	r3, [r5, #1296]	; 0x510
        NRF_USBD->EPOUTEN |= 1UL << epnr;
    69ce:	f8d5 3514 	ldrge.w	r3, [r5, #1300]	; 0x514
    69d2:	fa06 f607 	lsl.w	r6, r6, r7
        NRF_USBD->EPINEN |= 1UL << epnr;
    69d6:	bfb5      	itete	lt
    69d8:	431e      	orrlt	r6, r3
        NRF_USBD->EPOUTEN |= 1UL << epnr;
    69da:	431e      	orrge	r6, r3
        NRF_USBD->EPINEN |= 1UL << epnr;
    69dc:	f8c5 6510 	strlt.w	r6, [r5, #1296]	; 0x510
        NRF_USBD->EPOUTEN |= 1UL << epnr;
    69e0:	f8c5 6514 	strge.w	r6, [r5, #1300]	; 0x514
  __ASM volatile ("isb 0xF":::"memory");
    69e4:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    69e8:	f3bf 8f4f 	dsb	sy
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    69ec:	b1f7      	cbz	r7, 6a2c <nrfx_usbd_ep_enable+0xa0>
    69ee:	f1b8 0f00 	cmp.w	r8, #0
    69f2:	db1b      	blt.n	6a2c <nrfx_usbd_ep_enable+0xa0>
        NRF_USBD_EPOUT_CHECK(ep) &&
    69f4:	0723      	lsls	r3, r4, #28
    69f6:	d419      	bmi.n	6a2c <nrfx_usbd_ep_enable+0xa0>
	__asm__ volatile(
    69f8:	f04f 0320 	mov.w	r3, #32
    69fc:	f3ef 8511 	mrs	r5, BASEPRI
    6a00:	f383 8811 	msr	BASEPRI, r3
    6a04:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    6a08:	4620      	mov	r0, r4
    6a0a:	f7ff fd25 	bl	6458 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    6a0e:	4620      	mov	r0, r4
    6a10:	f00c fda0 	bl	13554 <ep2bit>
    6a14:	4a09      	ldr	r2, [pc, #36]	; (6a3c <nrfx_usbd_ep_enable+0xb0>)
    6a16:	2301      	movs	r3, #1
    6a18:	fa03 f000 	lsl.w	r0, r3, r0
    6a1c:	6813      	ldr	r3, [r2, #0]
    6a1e:	ea23 0300 	bic.w	r3, r3, r0
    6a22:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    6a24:	f385 8811 	msr	BASEPRI, r5
    6a28:	f3bf 8f6f 	isb	sy
}
    6a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a30:	0001a541 	.word	0x0001a541
    6a34:	0001a54a 	.word	0x0001a54a
    6a38:	40027000 	.word	0x40027000
    6a3c:	200026ac 	.word	0x200026ac

00006a40 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    6a40:	0602      	lsls	r2, r0, #24
{
    6a42:	b510      	push	{r4, lr}
    6a44:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    6a46:	d405      	bmi.n	6a54 <nrfx_usbd_ep_stall_clear+0x14>
    6a48:	f7ff fc9a 	bl	6380 <nrfx_usbd_ep_stall_check>
    6a4c:	b110      	cbz	r0, 6a54 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
    6a4e:	4620      	mov	r0, r4
    6a50:	f7ff fd02 	bl	6458 <nrfx_usbd_transfer_out_drop>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    6a54:	f004 030f 	and.w	r3, r4, #15
    6a58:	2b08      	cmp	r3, #8
    6a5a:	d901      	bls.n	6a60 <nrfx_usbd_ep_stall_clear+0x20>
    6a5c:	f7fe fefc 	bl	5858 <ep_to_hal.part.9>
    NRFX_ASSERT(!NRF_USBD_EPISO_CHECK(ep));
    6a60:	0723      	lsls	r3, r4, #28
    6a62:	d506      	bpl.n	6a72 <nrfx_usbd_ep_stall_clear+0x32>
    6a64:	4b07      	ldr	r3, [pc, #28]	; (6a84 <nrfx_usbd_ep_stall_clear+0x44>)
    6a66:	4a08      	ldr	r2, [pc, #32]	; (6a88 <nrfx_usbd_ep_stall_clear+0x48>)
    6a68:	4808      	ldr	r0, [pc, #32]	; (6a8c <nrfx_usbd_ep_stall_clear+0x4c>)
    6a6a:	f240 5109 	movw	r1, #1289	; 0x509
    6a6e:	f7f9 ff85 	bl	97c <__assert_func>
    NRF_USBD->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    6a72:	4b07      	ldr	r3, [pc, #28]	; (6a90 <nrfx_usbd_ep_stall_clear+0x50>)
    6a74:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
  __ASM volatile ("isb 0xF":::"memory");
    6a78:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    6a7c:	f3bf 8f4f 	dsb	sy
}
    6a80:	bd10      	pop	{r4, pc}
    6a82:	bf00      	nop
    6a84:	0001a7a4 	.word	0x0001a7a4
    6a88:	0001a381 	.word	0x0001a381
    6a8c:	0001a631 	.word	0x0001a631
    6a90:	40027000 	.word	0x40027000

00006a94 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
    6a94:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    6a96:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
    6a98:	a901      	add	r1, sp, #4
    6a9a:	4808      	ldr	r0, [pc, #32]	; (6abc <z_log_msg_std_alloc+0x28>)
	union log_msg_chunk *msg = NULL;
    6a9c:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
    6a9e:	f008 fc57 	bl	f350 <k_mem_slab_alloc>
	if (err != 0) {
    6aa2:	b110      	cbz	r0, 6aaa <z_log_msg_std_alloc+0x16>
		msg = log_msg_no_space_handle();
    6aa4:	f000 fb44 	bl	7130 <log_msg_no_space_handle>
    6aa8:	9001      	str	r0, [sp, #4]
	return msg;
    6aaa:	9801      	ldr	r0, [sp, #4]
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();

	if (msg != NULL) {
    6aac:	b118      	cbz	r0, 6ab6 <z_log_msg_std_alloc+0x22>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    6aae:	2301      	movs	r3, #1
    6ab0:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    6ab2:	2300      	movs	r3, #0
    6ab4:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
    6ab6:	b003      	add	sp, #12
    6ab8:	f85d fb04 	ldr.w	pc, [sp], #4
    6abc:	20002940 	.word	0x20002940

00006ac0 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    6ac0:	e92d 4170 	stmdb	sp!, {r4, r5, r6, r8, lr}
    6ac4:	b08d      	sub	sp, #52	; 0x34
    6ac6:	f00c fde0 	bl	1368a <z_arch_is_user_context>
    6aca:	230e      	movs	r3, #14
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    6acc:	b1c0      	cbz	r0, 6b00 <enable_logger+0x40>
	struct _syscall_10_args args = {
    6ace:	2400      	movs	r4, #0
    6ad0:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    6ad4:	e9cd 4407 	strd	r4, r4, [sp, #28]
    6ad8:	940b      	str	r4, [sp, #44]	; 0x2c
	register u32_t ret __asm__("r0") = arg1;
    6ada:	4813      	ldr	r0, [pc, #76]	; (6b28 <enable_logger+0x68>)
	register u32_t r1 __asm__("r1") = arg2;
    6adc:	4913      	ldr	r1, [pc, #76]	; (6b2c <enable_logger+0x6c>)
	register u32_t r3 __asm__("r3") = arg4;
    6ade:	4b14      	ldr	r3, [pc, #80]	; (6b30 <enable_logger+0x70>)
	register u32_t r2 __asm__("r2") = arg3;
    6ae0:	f44f 6280 	mov.w	r2, #1024	; 0x400
	register u32_t r5 __asm__("r5") = arg6;
    6ae4:	ad07      	add	r5, sp, #28
	register u32_t r6 __asm__("r6") = call_id;
    6ae6:	2664      	movs	r6, #100	; 0x64
	__asm__ volatile("svc %[svid]\n"
    6ae8:	df03      	svc	3
	return z_arch_is_user_context();
    6aea:	f00c fdce 	bl	1368a <z_arch_is_user_context>
K_SYSCALL_DECLARE2(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, int, k_tid_t, thread_id, const char *, value)
    6aee:	b1a8      	cbz	r0, 6b1c <enable_logger+0x5c>
	register u32_t ret __asm__("r0") = arg1;
    6af0:	480d      	ldr	r0, [pc, #52]	; (6b28 <enable_logger+0x68>)
	register u32_t r1 __asm__("r1") = arg2;
    6af2:	4910      	ldr	r1, [pc, #64]	; (6b34 <enable_logger+0x74>)
	register u32_t r6 __asm__("r6") = call_id;
    6af4:	2669      	movs	r6, #105	; 0x69
	__asm__ volatile("svc %[svid]\n"
    6af6:	df03      	svc	3
	} else {
		log_init();
	}

	return 0;
}
    6af8:	2000      	movs	r0, #0
    6afa:	b00d      	add	sp, #52	; 0x34
    6afc:	e8bd 8170 	ldmia.w	sp!, {r4, r5, r6, r8, pc}
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    6b00:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6b04:	e9cd 0302 	strd	r0, r3, [sp, #8]
    6b08:	e9cd 0004 	strd	r0, r0, [sp, #16]
    6b0c:	e9cd 0000 	strd	r0, r0, [sp]
    6b10:	4b07      	ldr	r3, [pc, #28]	; (6b30 <enable_logger+0x70>)
    6b12:	4906      	ldr	r1, [pc, #24]	; (6b2c <enable_logger+0x6c>)
    6b14:	4804      	ldr	r0, [pc, #16]	; (6b28 <enable_logger+0x68>)
    6b16:	f011 fe5d 	bl	187d4 <z_impl_k_thread_create>
    6b1a:	e7e6      	b.n	6aea <enable_logger+0x2a>
K_SYSCALL_DECLARE2(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, int, k_tid_t, thread_id, const char *, value)
    6b1c:	4905      	ldr	r1, [pc, #20]	; (6b34 <enable_logger+0x74>)
    6b1e:	4802      	ldr	r0, [pc, #8]	; (6b28 <enable_logger+0x68>)
    6b20:	f011 fe4f 	bl	187c2 <z_impl_k_thread_name_set>
    6b24:	e7e8      	b.n	6af8 <enable_logger+0x38>
    6b26:	bf00      	nop
    6b28:	200028b8 	.word	0x200028b8
    6b2c:	2000a400 	.word	0x2000a400
    6b30:	00006e85 	.word	0x00006e85
    6b34:	0001aadf 	.word	0x0001aadf

00006b38 <log_core_init>:
{
    6b38:	b508      	push	{r3, lr}
		log_msg_pool_init();
    6b3a:	f000 faef 	bl	711c <log_msg_pool_init>
		log_list_init(&list);
    6b3e:	4809      	ldr	r0, [pc, #36]	; (6b64 <log_core_init+0x2c>)
    6b40:	f00c fd8d 	bl	1365e <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    6b44:	2304      	movs	r3, #4
    6b46:	2234      	movs	r2, #52	; 0x34
    6b48:	4807      	ldr	r0, [pc, #28]	; (6b68 <log_core_init+0x30>)
    6b4a:	4908      	ldr	r1, [pc, #32]	; (6b6c <log_core_init+0x34>)
    6b4c:	f011 fba4 	bl	18298 <k_mem_slab_init>
	timestamp_func = timestamp_get;
    6b50:	4b07      	ldr	r3, [pc, #28]	; (6b70 <log_core_init+0x38>)
    6b52:	4a08      	ldr	r2, [pc, #32]	; (6b74 <log_core_init+0x3c>)
    6b54:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    6b56:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
    6b5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    6b5e:	f000 bd1b 	b.w	7598 <log_output_timestamp_freq_set>
    6b62:	bf00      	nop
    6b64:	20002894 	.word	0x20002894
    6b68:	2000289c 	.word	0x2000289c
    6b6c:	2000ac00 	.word	0x2000ac00
    6b70:	2000c69c 	.word	0x2000c69c
    6b74:	000136c3 	.word	0x000136c3

00006b78 <dropped_notify>:
{
    6b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6b7a:	4b0f      	ldr	r3, [pc, #60]	; (6bb8 <dropped_notify+0x40>)
    6b7c:	f3bf 8f5b 	dmb	ish
    6b80:	2500      	movs	r5, #0
    6b82:	e853 7f00 	ldrex	r7, [r3]
    6b86:	e843 5200 	strex	r2, r5, [r3]
    6b8a:	2a00      	cmp	r2, #0
    6b8c:	d1f9      	bne.n	6b82 <dropped_notify+0xa>
    6b8e:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    6b92:	4c0a      	ldr	r4, [pc, #40]	; (6bbc <dropped_notify+0x44>)
    6b94:	4e0a      	ldr	r6, [pc, #40]	; (6bc0 <dropped_notify+0x48>)
    6b96:	1b36      	subs	r6, r6, r4
    6b98:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    6b9a:	42b5      	cmp	r5, r6
    6b9c:	db00      	blt.n	6ba0 <dropped_notify+0x28>
}
    6b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    6ba0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    6ba2:	795b      	ldrb	r3, [r3, #5]
    6ba4:	b12b      	cbz	r3, 6bb2 <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
    6ba6:	6823      	ldr	r3, [r4, #0]
    6ba8:	68db      	ldr	r3, [r3, #12]
    6baa:	b113      	cbz	r3, 6bb2 <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
    6bac:	4639      	mov	r1, r7
    6bae:	4620      	mov	r0, r4
    6bb0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    6bb2:	3501      	adds	r5, #1
    6bb4:	3410      	adds	r4, #16
    6bb6:	e7f0      	b.n	6b9a <dropped_notify+0x22>
    6bb8:	2000288c 	.word	0x2000288c
    6bbc:	00018fd4 	.word	0x00018fd4
    6bc0:	00018fe4 	.word	0x00018fe4

00006bc4 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    6bc4:	4b24      	ldr	r3, [pc, #144]	; (6c58 <z_impl_log_process+0x94>)
    6bc6:	781b      	ldrb	r3, [r3, #0]
{
    6bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6bcc:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    6bce:	b903      	cbnz	r3, 6bd2 <z_impl_log_process+0xe>
    6bd0:	b360      	cbz	r0, 6c2c <z_impl_log_process+0x68>
	__asm__ volatile(
    6bd2:	f04f 0320 	mov.w	r3, #32
    6bd6:	f3ef 8411 	mrs	r4, BASEPRI
    6bda:	f383 8811 	msr	BASEPRI, r3
    6bde:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    6be2:	481e      	ldr	r0, [pc, #120]	; (6c5c <z_impl_log_process+0x98>)
    6be4:	f00c fd4b 	bl	1367e <log_list_head_get>
    6be8:	4607      	mov	r7, r0
	__asm__ volatile(
    6bea:	f384 8811 	msr	BASEPRI, r4
    6bee:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    6bf2:	b178      	cbz	r0, 6c14 <z_impl_log_process+0x50>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    6bf4:	f3bf 8f5b 	dmb	ish
    6bf8:	4b19      	ldr	r3, [pc, #100]	; (6c60 <z_impl_log_process+0x9c>)
    6bfa:	e853 2f00 	ldrex	r2, [r3]
    6bfe:	3a01      	subs	r2, #1
    6c00:	e843 2100 	strex	r1, r2, [r3]
    6c04:	2900      	cmp	r1, #0
    6c06:	d1f8      	bne.n	6bfa <z_impl_log_process+0x36>
    6c08:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    6c0c:	b18d      	cbz	r5, 6c32 <z_impl_log_process+0x6e>
	log_msg_put(msg);
    6c0e:	4638      	mov	r0, r7
    6c10:	f00c fe60 	bl	138d4 <log_msg_put>
	if (!bypass && dropped_cnt) {
    6c14:	b925      	cbnz	r5, 6c20 <z_impl_log_process+0x5c>
    6c16:	4b13      	ldr	r3, [pc, #76]	; (6c64 <z_impl_log_process+0xa0>)
    6c18:	681b      	ldr	r3, [r3, #0]
    6c1a:	b10b      	cbz	r3, 6c20 <z_impl_log_process+0x5c>
		dropped_notify();
    6c1c:	f7ff ffac 	bl	6b78 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    6c20:	480e      	ldr	r0, [pc, #56]	; (6c5c <z_impl_log_process+0x98>)
    6c22:	f00c fd2a 	bl	1367a <log_list_head_peek>
    6c26:	1c05      	adds	r5, r0, #0
    6c28:	bf18      	it	ne
    6c2a:	2501      	movne	r5, #1
}
    6c2c:	4628      	mov	r0, r5
    6c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __log_backends_end - __log_backends_start;
    6c32:	4c0d      	ldr	r4, [pc, #52]	; (6c68 <z_impl_log_process+0xa4>)
    6c34:	4e0d      	ldr	r6, [pc, #52]	; (6c6c <z_impl_log_process+0xa8>)
    6c36:	1b36      	subs	r6, r6, r4
    6c38:	1136      	asrs	r6, r6, #4
		for (int i = 0; i < log_backend_count_get(); i++) {
    6c3a:	46a8      	mov	r8, r5
    6c3c:	45b0      	cmp	r8, r6
    6c3e:	dae6      	bge.n	6c0e <z_impl_log_process+0x4a>
	return backend->cb->active;
    6c40:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    6c42:	795b      	ldrb	r3, [r3, #5]
    6c44:	b123      	cbz	r3, 6c50 <z_impl_log_process+0x8c>
	backend->api->put(backend, msg);
    6c46:	6823      	ldr	r3, [r4, #0]
    6c48:	4639      	mov	r1, r7
    6c4a:	681b      	ldr	r3, [r3, #0]
    6c4c:	4620      	mov	r0, r4
    6c4e:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    6c50:	f108 0801 	add.w	r8, r8, #1
    6c54:	3410      	adds	r4, #16
    6c56:	e7f1      	b.n	6c3c <z_impl_log_process+0x78>
    6c58:	200059d0 	.word	0x200059d0
    6c5c:	20002894 	.word	0x20002894
    6c60:	20002888 	.word	0x20002888
    6c64:	2000288c 	.word	0x2000288c
    6c68:	00018fd4 	.word	0x00018fd4
    6c6c:	00018fe4 	.word	0x00018fe4

00006c70 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    6c70:	4b20      	ldr	r3, [pc, #128]	; (6cf4 <msg_finalize+0x84>)
{
    6c72:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    6c74:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    6c76:	8141      	strh	r1, [r0, #10]
{
    6c78:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    6c7a:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    6c7c:	4c1e      	ldr	r4, [pc, #120]	; (6cf8 <msg_finalize+0x88>)
    6c7e:	60e8      	str	r0, [r5, #12]
    6c80:	f3bf 8f5b 	dmb	ish
    6c84:	e854 3f00 	ldrex	r3, [r4]
    6c88:	3301      	adds	r3, #1
    6c8a:	e844 3200 	strex	r2, r3, [r4]
    6c8e:	2a00      	cmp	r2, #0
    6c90:	d1f8      	bne.n	6c84 <msg_finalize+0x14>
    6c92:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    6c96:	f04f 0320 	mov.w	r3, #32
    6c9a:	f3ef 8611 	mrs	r6, BASEPRI
    6c9e:	f383 8811 	msr	BASEPRI, r3
    6ca2:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    6ca6:	4815      	ldr	r0, [pc, #84]	; (6cfc <msg_finalize+0x8c>)
    6ca8:	4629      	mov	r1, r5
    6caa:	f00c fcdc 	bl	13666 <log_list_add_tail>
	__asm__ volatile(
    6cae:	f386 8811 	msr	BASEPRI, r6
    6cb2:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    6cb6:	4b12      	ldr	r3, [pc, #72]	; (6d00 <msg_finalize+0x90>)
    6cb8:	781b      	ldrb	r3, [r3, #0]
    6cba:	b17b      	cbz	r3, 6cdc <msg_finalize+0x6c>
	__asm__ volatile(
    6cbc:	f04f 0320 	mov.w	r3, #32
    6cc0:	f3ef 8411 	mrs	r4, BASEPRI
    6cc4:	f383 8811 	msr	BASEPRI, r3
    6cc8:	f3bf 8f6f 	isb	sy
		(void)log_process(false);
    6ccc:	2000      	movs	r0, #0
    6cce:	f00c fcfa 	bl	136c6 <log_process>
	__asm__ volatile(
    6cd2:	f384 8811 	msr	BASEPRI, r4
    6cd6:	f3bf 8f6f 	isb	sy
}
    6cda:	bd70      	pop	{r4, r5, r6, pc}
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    6cdc:	6823      	ldr	r3, [r4, #0]
    6cde:	2b0a      	cmp	r3, #10
    6ce0:	d1fb      	bne.n	6cda <msg_finalize+0x6a>
		    (proc_tid != NULL)) {
    6ce2:	4b08      	ldr	r3, [pc, #32]	; (6d04 <msg_finalize+0x94>)
    6ce4:	6818      	ldr	r0, [r3, #0]
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    6ce6:	2800      	cmp	r0, #0
    6ce8:	d0f7      	beq.n	6cda <msg_finalize+0x6a>
}
    6cea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_wakeup(proc_tid);
    6cee:	f00c bcd8 	b.w	136a2 <k_wakeup>
    6cf2:	bf00      	nop
    6cf4:	2000c69c 	.word	0x2000c69c
    6cf8:	20002888 	.word	0x20002888
    6cfc:	20002894 	.word	0x20002894
    6d00:	200059d1 	.word	0x200059d1
    6d04:	2000293c 	.word	0x2000293c

00006d08 <z_hdlr_log_buffered_cnt>:
Z_SYSCALL_HANDLER0_SIMPLE(log_buffered_cnt);
    6d08:	4b01      	ldr	r3, [pc, #4]	; (6d10 <z_hdlr_log_buffered_cnt+0x8>)
    6d0a:	6818      	ldr	r0, [r3, #0]
    6d0c:	4770      	bx	lr
    6d0e:	bf00      	nop
    6d10:	20002888 	.word	0x20002888

00006d14 <log_dropped>:
    6d14:	4b06      	ldr	r3, [pc, #24]	; (6d30 <log_dropped+0x1c>)
    6d16:	f3bf 8f5b 	dmb	ish
    6d1a:	e853 2f00 	ldrex	r2, [r3]
    6d1e:	3201      	adds	r2, #1
    6d20:	e843 2100 	strex	r1, r2, [r3]
    6d24:	2900      	cmp	r1, #0
    6d26:	d1f8      	bne.n	6d1a <log_dropped+0x6>
    6d28:	f3bf 8f5b 	dmb	ish
}
    6d2c:	4770      	bx	lr
    6d2e:	bf00      	nop
    6d30:	2000288c 	.word	0x2000288c

00006d34 <log_source_name_get>:
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    6d34:	4a04      	ldr	r2, [pc, #16]	; (6d48 <log_source_name_get+0x14>)
    6d36:	4b05      	ldr	r3, [pc, #20]	; (6d4c <log_source_name_get+0x18>)
    6d38:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    6d3a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    6d3e:	bf34      	ite	cc
    6d40:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    6d44:	2000      	movcs	r0, #0
}
    6d46:	4770      	bx	lr
    6d48:	00018f84 	.word	0x00018f84
    6d4c:	00018fd4 	.word	0x00018fd4

00006d50 <z_hdlr_log_filter_set>:
{
    6d50:	b508      	push	{r3, lr}
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(backend == 0,
    6d52:	b1a0      	cbz	r0, 6d7e <z_hdlr_log_filter_set+0x2e>
    6d54:	490d      	ldr	r1, [pc, #52]	; (6d8c <z_hdlr_log_filter_set+0x3c>)
    6d56:	480e      	ldr	r0, [pc, #56]	; (6d90 <z_hdlr_log_filter_set+0x40>)
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(domain_id == CONFIG_LOG_DOMAIN_ID,
    6d58:	f00c fb91 	bl	1347e <printk>
    6d5c:	9804      	ldr	r0, [sp, #16]
    6d5e:	f00e f8e2 	bl	14f26 <z_arch_syscall_oops>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(
    6d62:	2b04      	cmp	r3, #4
    6d64:	d910      	bls.n	6d88 <z_hdlr_log_filter_set+0x38>
    6d66:	4909      	ldr	r1, [pc, #36]	; (6d8c <z_hdlr_log_filter_set+0x3c>)
    6d68:	480a      	ldr	r0, [pc, #40]	; (6d94 <z_hdlr_log_filter_set+0x44>)
    6d6a:	e7f5      	b.n	6d58 <z_hdlr_log_filter_set+0x8>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(src_id < log_sources_count(),
    6d6c:	490a      	ldr	r1, [pc, #40]	; (6d98 <z_hdlr_log_filter_set+0x48>)
    6d6e:	480b      	ldr	r0, [pc, #44]	; (6d9c <z_hdlr_log_filter_set+0x4c>)
    6d70:	1a09      	subs	r1, r1, r0
    6d72:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
    6d76:	d3f4      	bcc.n	6d62 <z_hdlr_log_filter_set+0x12>
    6d78:	4904      	ldr	r1, [pc, #16]	; (6d8c <z_hdlr_log_filter_set+0x3c>)
    6d7a:	4809      	ldr	r0, [pc, #36]	; (6da0 <z_hdlr_log_filter_set+0x50>)
    6d7c:	e7ec      	b.n	6d58 <z_hdlr_log_filter_set+0x8>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(domain_id == CONFIG_LOG_DOMAIN_ID,
    6d7e:	2900      	cmp	r1, #0
    6d80:	d0f4      	beq.n	6d6c <z_hdlr_log_filter_set+0x1c>
    6d82:	4902      	ldr	r1, [pc, #8]	; (6d8c <z_hdlr_log_filter_set+0x3c>)
    6d84:	4807      	ldr	r0, [pc, #28]	; (6da4 <z_hdlr_log_filter_set+0x54>)
    6d86:	e7e7      	b.n	6d58 <z_hdlr_log_filter_set+0x8>
}
    6d88:	4618      	mov	r0, r3
    6d8a:	bd08      	pop	{r3, pc}
    6d8c:	0001aa8c 	.word	0x0001aa8c
    6d90:	0001ab8d 	.word	0x0001ab8d
    6d94:	0001ac43 	.word	0x0001ac43
    6d98:	00018fd4 	.word	0x00018fd4
    6d9c:	00018f84 	.word	0x00018f84
    6da0:	0001ac13 	.word	0x0001ac13
    6da4:	0001abe3 	.word	0x0001abe3

00006da8 <log_backend_enable>:
	id += backend - log_backend_get(0);
    6da8:	4b06      	ldr	r3, [pc, #24]	; (6dc4 <log_backend_enable+0x1c>)
	log_backend_id_set(backend, id);
    6daa:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    6dac:	1ac3      	subs	r3, r0, r3
    6dae:	111b      	asrs	r3, r3, #4
    6db0:	3301      	adds	r3, #1
	log_backend_id_set(backend, id);
    6db2:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
    6db4:	6842      	ldr	r2, [r0, #4]
	backend->cb->active = true;
    6db6:	2301      	movs	r3, #1
	backend->cb->ctx = ctx;
    6db8:	6011      	str	r1, [r2, #0]
	backend->cb->active = true;
    6dba:	7153      	strb	r3, [r2, #5]
	backend_attached = true;
    6dbc:	4a02      	ldr	r2, [pc, #8]	; (6dc8 <log_backend_enable+0x20>)
    6dbe:	7013      	strb	r3, [r2, #0]
}
    6dc0:	4770      	bx	lr
    6dc2:	bf00      	nop
    6dc4:	00018fd4 	.word	0x00018fd4
    6dc8:	200059d0 	.word	0x200059d0

00006dcc <log_init>:
{
    6dcc:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
    6dce:	4b15      	ldr	r3, [pc, #84]	; (6e24 <log_init+0x58>)
    6dd0:	4c15      	ldr	r4, [pc, #84]	; (6e28 <log_init+0x5c>)
    6dd2:	1b1b      	subs	r3, r3, r4
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    6dd4:	2b90      	cmp	r3, #144	; 0x90
    6dd6:	dd06      	ble.n	6de6 <log_init+0x1a>
    6dd8:	4b14      	ldr	r3, [pc, #80]	; (6e2c <log_init+0x60>)
    6dda:	4a15      	ldr	r2, [pc, #84]	; (6e30 <log_init+0x64>)
    6ddc:	4815      	ldr	r0, [pc, #84]	; (6e34 <log_init+0x68>)
    6dde:	f44f 71af 	mov.w	r1, #350	; 0x15e
    6de2:	f7f9 fdcb 	bl	97c <__assert_func>
    6de6:	4a14      	ldr	r2, [pc, #80]	; (6e38 <log_init+0x6c>)
    6de8:	f3bf 8f5b 	dmb	ish
    6dec:	e852 6f00 	ldrex	r6, [r2]
    6df0:	1c71      	adds	r1, r6, #1
    6df2:	e842 1000 	strex	r0, r1, [r2]
    6df6:	2800      	cmp	r0, #0
    6df8:	d1f8      	bne.n	6dec <log_init+0x20>
    6dfa:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    6dfe:	b916      	cbnz	r6, 6e06 <log_init+0x3a>
    6e00:	111d      	asrs	r5, r3, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    6e02:	42ae      	cmp	r6, r5
    6e04:	db00      	blt.n	6e08 <log_init+0x3c>
}
    6e06:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    6e08:	7b23      	ldrb	r3, [r4, #12]
    6e0a:	b143      	cbz	r3, 6e1e <log_init+0x52>
			if (backend->api->init != NULL) {
    6e0c:	6823      	ldr	r3, [r4, #0]
    6e0e:	695b      	ldr	r3, [r3, #20]
    6e10:	b103      	cbz	r3, 6e14 <log_init+0x48>
				backend->api->init();
    6e12:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    6e14:	2204      	movs	r2, #4
    6e16:	2100      	movs	r1, #0
    6e18:	4620      	mov	r0, r4
    6e1a:	f7ff ffc5 	bl	6da8 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    6e1e:	3601      	adds	r6, #1
    6e20:	3410      	adds	r4, #16
    6e22:	e7ee      	b.n	6e02 <log_init+0x36>
    6e24:	00018fe4 	.word	0x00018fe4
    6e28:	00018fd4 	.word	0x00018fd4
    6e2c:	0001aae7 	.word	0x0001aae7
    6e30:	0001aa83 	.word	0x0001aa83
    6e34:	0001ab34 	.word	0x0001ab34
    6e38:	20002890 	.word	0x20002890

00006e3c <z_impl_log_panic>:
{
    6e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    6e3e:	4f0e      	ldr	r7, [pc, #56]	; (6e78 <z_impl_log_panic+0x3c>)
    6e40:	783d      	ldrb	r5, [r7, #0]
    6e42:	b975      	cbnz	r5, 6e62 <z_impl_log_panic+0x26>
    6e44:	4c0d      	ldr	r4, [pc, #52]	; (6e7c <z_impl_log_panic+0x40>)
    6e46:	4e0e      	ldr	r6, [pc, #56]	; (6e80 <z_impl_log_panic+0x44>)
	log_init();
    6e48:	f7ff ffc0 	bl	6dcc <log_init>
    6e4c:	1b36      	subs	r6, r6, r4
    6e4e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    6e50:	42b5      	cmp	r5, r6
    6e52:	db07      	blt.n	6e64 <z_impl_log_panic+0x28>
		while (log_process(false) == true) {
    6e54:	2000      	movs	r0, #0
    6e56:	f00c fc36 	bl	136c6 <log_process>
    6e5a:	2800      	cmp	r0, #0
    6e5c:	d1fa      	bne.n	6e54 <z_impl_log_panic+0x18>
	panic_mode = true;
    6e5e:	2301      	movs	r3, #1
    6e60:	703b      	strb	r3, [r7, #0]
}
    6e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    6e64:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    6e66:	795b      	ldrb	r3, [r3, #5]
    6e68:	b11b      	cbz	r3, 6e72 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    6e6a:	6823      	ldr	r3, [r4, #0]
    6e6c:	4620      	mov	r0, r4
    6e6e:	691b      	ldr	r3, [r3, #16]
    6e70:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    6e72:	3501      	adds	r5, #1
    6e74:	3410      	adds	r4, #16
    6e76:	e7eb      	b.n	6e50 <z_impl_log_panic+0x14>
    6e78:	200059d1 	.word	0x200059d1
    6e7c:	00018fd4 	.word	0x00018fd4
    6e80:	00018fe4 	.word	0x00018fe4

00006e84 <log_process_thread_func>:
{
    6e84:	b508      	push	{r3, lr}
	log_init();
    6e86:	f7ff ffa1 	bl	6dcc <log_init>
    6e8a:	f00c fbfe 	bl	1368a <z_arch_is_user_context>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    6e8e:	b1b8      	cbz	r0, 6ec0 <log_process_thread_func+0x3c>
	register u32_t r6 __asm__("r6") = call_id;
    6e90:	2639      	movs	r6, #57	; 0x39
	__asm__ volatile("svc %[svid]\n"
    6e92:	df03      	svc	3
	proc_tid = process_tid;
    6e94:	4b0e      	ldr	r3, [pc, #56]	; (6ed0 <log_process_thread_func+0x4c>)
    6e96:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    6e98:	b128      	cbz	r0, 6ea6 <log_process_thread_func+0x22>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    6e9a:	4b0e      	ldr	r3, [pc, #56]	; (6ed4 <log_process_thread_func+0x50>)
	    process_tid &&
    6e9c:	681b      	ldr	r3, [r3, #0]
    6e9e:	2b09      	cmp	r3, #9
    6ea0:	dd01      	ble.n	6ea6 <log_process_thread_func+0x22>
		k_wakeup(proc_tid);
    6ea2:	f00c fbfe 	bl	136a2 <k_wakeup>
		if (log_process(false) == false) {
    6ea6:	2000      	movs	r0, #0
    6ea8:	f00c fc0d 	bl	136c6 <log_process>
    6eac:	2800      	cmp	r0, #0
    6eae:	d1fa      	bne.n	6ea6 <log_process_thread_func+0x22>
    6eb0:	f00c fbeb 	bl	1368a <z_arch_is_user_context>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
    6eb4:	b138      	cbz	r0, 6ec6 <log_process_thread_func+0x42>
	register u32_t ret __asm__("r0") = arg1;
    6eb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	register u32_t r6 __asm__("r6") = call_id;
    6eba:	265e      	movs	r6, #94	; 0x5e
	__asm__ volatile("svc %[svid]\n"
    6ebc:	df03      	svc	3
	return ret;
    6ebe:	e7f2      	b.n	6ea6 <log_process_thread_func+0x22>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    6ec0:	f009 f8c2 	bl	10048 <z_impl_k_current_get>
    6ec4:	e7e6      	b.n	6e94 <log_process_thread_func+0x10>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
    6ec6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    6eca:	f009 f831 	bl	ff30 <z_impl_k_sleep>
    6ece:	e7ea      	b.n	6ea6 <log_process_thread_func+0x22>
    6ed0:	2000293c 	.word	0x2000293c
    6ed4:	20002888 	.word	0x20002888

00006ed8 <log_strdup>:
{
    6ed8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6eda:	4604      	mov	r4, r0
    6edc:	f00c fbd5 	bl	1368a <z_arch_is_user_context>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    6ee0:	4602      	mov	r2, r0
    6ee2:	b9f8      	cbnz	r0, 6f24 <log_strdup+0x4c>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    6ee4:	a901      	add	r1, sp, #4
    6ee6:	4812      	ldr	r0, [pc, #72]	; (6f30 <log_strdup+0x58>)
    6ee8:	f008 fa32 	bl	f350 <k_mem_slab_alloc>
	if (err != 0) {
    6eec:	4606      	mov	r6, r0
    6eee:	b9e0      	cbnz	r0, 6f2a <log_strdup+0x52>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6ef0:	2201      	movs	r2, #1
    6ef2:	9b01      	ldr	r3, [sp, #4]
    6ef4:	f3bf 8f5b 	dmb	ish
    6ef8:	e853 1f00 	ldrex	r1, [r3]
    6efc:	e843 2000 	strex	r0, r2, [r3]
    6f00:	2800      	cmp	r0, #0
    6f02:	d1f9      	bne.n	6ef8 <log_strdup+0x20>
    6f04:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    6f08:	9d01      	ldr	r5, [sp, #4]
    6f0a:	1d2b      	adds	r3, r5, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    6f0c:	222d      	movs	r2, #45	; 0x2d
    6f0e:	4618      	mov	r0, r3
    6f10:	4621      	mov	r1, r4
    6f12:	f7fb faa7 	bl	2464 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    6f16:	227e      	movs	r2, #126	; 0x7e
    6f18:	4603      	mov	r3, r0
    6f1a:	f885 2031 	strb.w	r2, [r5, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    6f1e:	f885 6032 	strb.w	r6, [r5, #50]	; 0x32
	return dup->buf;
    6f22:	461c      	mov	r4, r3
}
    6f24:	4620      	mov	r0, r4
    6f26:	b002      	add	sp, #8
    6f28:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
    6f2a:	4b02      	ldr	r3, [pc, #8]	; (6f34 <log_strdup+0x5c>)
    6f2c:	e7f9      	b.n	6f22 <log_strdup+0x4a>
    6f2e:	bf00      	nop
    6f30:	2000289c 	.word	0x2000289c
    6f34:	0001ab1a 	.word	0x0001ab1a

00006f38 <z_hdlr_z_log_string_from_user>:
{
    6f38:	b5f0      	push	{r4, r5, r6, r7, lr}
	level = src_level_union.structure.level;
    6f3a:	f3c0 0302 	ubfx	r3, r0, #0, #3
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(
    6f3e:	3b01      	subs	r3, #1
    6f40:	b2db      	uxtb	r3, r3
    6f42:	2b03      	cmp	r3, #3
{
    6f44:	460d      	mov	r5, r1
    6f46:	b085      	sub	sp, #20
    6f48:	4604      	mov	r4, r0
	domain_id = src_level_union.structure.domain_id;
    6f4a:	f3c0 02c2 	ubfx	r2, r0, #3, #3
	source_id = src_level_union.structure.source_id;
    6f4e:	f3c0 1187 	ubfx	r1, r0, #6, #8
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(
    6f52:	d92a      	bls.n	6faa <z_hdlr_z_log_string_from_user+0x72>
    6f54:	491d      	ldr	r1, [pc, #116]	; (6fcc <z_hdlr_z_log_string_from_user+0x94>)
    6f56:	481e      	ldr	r0, [pc, #120]	; (6fd0 <z_hdlr_z_log_string_from_user+0x98>)
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(domain_id == CONFIG_LOG_DOMAIN_ID,
    6f58:	f00c fa91 	bl	1347e <printk>
    6f5c:	980c      	ldr	r0, [sp, #48]	; 0x30
    6f5e:	f00d ffe2 	bl	14f26 <z_arch_syscall_oops>
	Z_OOPS(Z_SYSCALL_MEMORY_READ(str, len));
    6f62:	4639      	mov	r1, r7
    6f64:	4628      	mov	r0, r5
    6f66:	f00e f805 	bl	14f74 <z_arch_buffer_validate>
    6f6a:	4606      	mov	r6, r0
    6f6c:	b310      	cbz	r0, 6fb4 <z_hdlr_z_log_string_from_user+0x7c>
    6f6e:	4b19      	ldr	r3, [pc, #100]	; (6fd4 <z_hdlr_z_log_string_from_user+0x9c>)
    6f70:	9300      	str	r3, [sp, #0]
    6f72:	462a      	mov	r2, r5
    6f74:	463b      	mov	r3, r7
    6f76:	4915      	ldr	r1, [pc, #84]	; (6fcc <z_hdlr_z_log_string_from_user+0x94>)
    6f78:	4817      	ldr	r0, [pc, #92]	; (6fd8 <z_hdlr_z_log_string_from_user+0xa0>)
    6f7a:	f00c fa80 	bl	1347e <printk>
    6f7e:	e7ed      	b.n	6f5c <z_hdlr_z_log_string_from_user+0x24>
 *	first maxlen bytes.
 */
static inline size_t z_user_string_nlen(const char *src, size_t maxlen,
					int *err)
{
	return z_arch_user_string_nlen(src, maxlen, err);
    6f80:	aa03      	add	r2, sp, #12
    6f82:	212e      	movs	r1, #46	; 0x2e
    6f84:	4628      	mov	r0, r5
    6f86:	f004 fa1b 	bl	b3c0 <z_arch_user_string_nlen>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(err == 0, "invalid string passed in"));
    6f8a:	9a03      	ldr	r2, [sp, #12]
    6f8c:	4607      	mov	r7, r0
    6f8e:	2a00      	cmp	r2, #0
    6f90:	d0e7      	beq.n	6f62 <z_hdlr_z_log_string_from_user+0x2a>
    6f92:	490e      	ldr	r1, [pc, #56]	; (6fcc <z_hdlr_z_log_string_from_user+0x94>)
    6f94:	4811      	ldr	r0, [pc, #68]	; (6fdc <z_hdlr_z_log_string_from_user+0xa4>)
    6f96:	e7df      	b.n	6f58 <z_hdlr_z_log_string_from_user+0x20>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(source_id < log_sources_count(),
    6f98:	4b11      	ldr	r3, [pc, #68]	; (6fe0 <z_hdlr_z_log_string_from_user+0xa8>)
    6f9a:	4a12      	ldr	r2, [pc, #72]	; (6fe4 <z_hdlr_z_log_string_from_user+0xac>)
    6f9c:	1a9b      	subs	r3, r3, r2
    6f9e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    6fa2:	d3ed      	bcc.n	6f80 <z_hdlr_z_log_string_from_user+0x48>
    6fa4:	4909      	ldr	r1, [pc, #36]	; (6fcc <z_hdlr_z_log_string_from_user+0x94>)
    6fa6:	4810      	ldr	r0, [pc, #64]	; (6fe8 <z_hdlr_z_log_string_from_user+0xb0>)
    6fa8:	e7d6      	b.n	6f58 <z_hdlr_z_log_string_from_user+0x20>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(domain_id == CONFIG_LOG_DOMAIN_ID,
    6faa:	2a00      	cmp	r2, #0
    6fac:	d0f4      	beq.n	6f98 <z_hdlr_z_log_string_from_user+0x60>
    6fae:	4907      	ldr	r1, [pc, #28]	; (6fcc <z_hdlr_z_log_string_from_user+0x94>)
    6fb0:	480e      	ldr	r0, [pc, #56]	; (6fec <z_hdlr_z_log_string_from_user+0xb4>)
    6fb2:	e7d1      	b.n	6f58 <z_hdlr_z_log_string_from_user+0x20>
		str = log_strdup(str);
    6fb4:	4628      	mov	r0, r5
    6fb6:	f7ff ff8f 	bl	6ed8 <log_strdup>
		log_1("%s", (u32_t)str, src_level_union.structure);
    6fba:	4622      	mov	r2, r4
    6fbc:	4601      	mov	r1, r0
    6fbe:	480c      	ldr	r0, [pc, #48]	; (6ff0 <z_hdlr_z_log_string_from_user+0xb8>)
    6fc0:	f00c fba1 	bl	13706 <log_1>
}
    6fc4:	4630      	mov	r0, r6
    6fc6:	b005      	add	sp, #20
    6fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6fca:	bf00      	nop
    6fcc:	0001aaa2 	.word	0x0001aaa2
    6fd0:	0001ac43 	.word	0x0001ac43
    6fd4:	0001b8ef 	.word	0x0001b8ef
    6fd8:	0001a1c4 	.word	0x0001a1c4
    6fdc:	0001ac6f 	.word	0x0001ac6f
    6fe0:	00018fd4 	.word	0x00018fd4
    6fe4:	00018f84 	.word	0x00018f84
    6fe8:	0001ac13 	.word	0x0001ac13
    6fec:	0001abe3 	.word	0x0001abe3
    6ff0:	0001aca2 	.word	0x0001aca2

00006ff4 <z_hdlr_z_log_hexdump_from_user>:
{
    6ff4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    6ff8:	461f      	mov	r7, r3
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(
    6ffa:	f000 0307 	and.w	r3, r0, #7
    6ffe:	2b04      	cmp	r3, #4
{
    7000:	4604      	mov	r4, r0
    7002:	460d      	mov	r5, r1
    7004:	4616      	mov	r6, r2
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(
    7006:	d802      	bhi.n	700e <z_hdlr_z_log_hexdump_from_user+0x1a>
    7008:	b2c3      	uxtb	r3, r0
    700a:	075a      	lsls	r2, r3, #29
    700c:	d139      	bne.n	7082 <z_hdlr_z_log_hexdump_from_user+0x8e>
    700e:	4926      	ldr	r1, [pc, #152]	; (70a8 <z_hdlr_z_log_hexdump_from_user+0xb4>)
    7010:	4826      	ldr	r0, [pc, #152]	; (70ac <z_hdlr_z_log_hexdump_from_user+0xb8>)
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(
    7012:	f00c fa34 	bl	1347e <printk>
    7016:	980c      	ldr	r0, [sp, #48]	; 0x30
    7018:	f00d ff85 	bl	14f26 <z_arch_syscall_oops>
	Z_OOPS(Z_SYSCALL_MEMORY_READ(data, len));
    701c:	4639      	mov	r1, r7
    701e:	4630      	mov	r0, r6
    7020:	f00d ffa8 	bl	14f74 <z_arch_buffer_validate>
    7024:	4680      	mov	r8, r0
    7026:	2800      	cmp	r0, #0
    7028:	d031      	beq.n	708e <z_hdlr_z_log_hexdump_from_user+0x9a>
    702a:	4b21      	ldr	r3, [pc, #132]	; (70b0 <z_hdlr_z_log_hexdump_from_user+0xbc>)
    702c:	9300      	str	r3, [sp, #0]
    702e:	4632      	mov	r2, r6
    7030:	463b      	mov	r3, r7
    7032:	e00a      	b.n	704a <z_hdlr_z_log_hexdump_from_user+0x56>
	Z_OOPS(Z_SYSCALL_MEMORY_READ(metadata, mlen));
    7034:	4641      	mov	r1, r8
    7036:	4628      	mov	r0, r5
    7038:	f00d ff9c 	bl	14f74 <z_arch_buffer_validate>
    703c:	4602      	mov	r2, r0
    703e:	2800      	cmp	r0, #0
    7040:	d0ec      	beq.n	701c <z_hdlr_z_log_hexdump_from_user+0x28>
    7042:	4b1b      	ldr	r3, [pc, #108]	; (70b0 <z_hdlr_z_log_hexdump_from_user+0xbc>)
    7044:	9300      	str	r3, [sp, #0]
    7046:	462a      	mov	r2, r5
    7048:	4643      	mov	r3, r8
	Z_OOPS(Z_SYSCALL_MEMORY_READ(data, len));
    704a:	4917      	ldr	r1, [pc, #92]	; (70a8 <z_hdlr_z_log_hexdump_from_user+0xb4>)
    704c:	4819      	ldr	r0, [pc, #100]	; (70b4 <z_hdlr_z_log_hexdump_from_user+0xc0>)
    704e:	f00c fa16 	bl	1347e <printk>
    7052:	e7e0      	b.n	7016 <z_hdlr_z_log_hexdump_from_user+0x22>
    7054:	aa03      	add	r2, sp, #12
    7056:	212e      	movs	r1, #46	; 0x2e
    7058:	4628      	mov	r0, r5
    705a:	f004 f9b1 	bl	b3c0 <z_arch_user_string_nlen>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(err == 0, "invalid string passed in"));
    705e:	9a03      	ldr	r2, [sp, #12]
    7060:	4680      	mov	r8, r0
    7062:	2a00      	cmp	r2, #0
    7064:	d0e6      	beq.n	7034 <z_hdlr_z_log_hexdump_from_user+0x40>
    7066:	4910      	ldr	r1, [pc, #64]	; (70a8 <z_hdlr_z_log_hexdump_from_user+0xb4>)
    7068:	4813      	ldr	r0, [pc, #76]	; (70b8 <z_hdlr_z_log_hexdump_from_user+0xc4>)
    706a:	e7d2      	b.n	7012 <z_hdlr_z_log_hexdump_from_user+0x1e>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(
    706c:	4a13      	ldr	r2, [pc, #76]	; (70bc <z_hdlr_z_log_hexdump_from_user+0xc8>)
    706e:	4914      	ldr	r1, [pc, #80]	; (70c0 <z_hdlr_z_log_hexdump_from_user+0xcc>)
    7070:	f3c4 1389 	ubfx	r3, r4, #6, #10
    7074:	1a52      	subs	r2, r2, r1
    7076:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
    707a:	d3eb      	bcc.n	7054 <z_hdlr_z_log_hexdump_from_user+0x60>
    707c:	490a      	ldr	r1, [pc, #40]	; (70a8 <z_hdlr_z_log_hexdump_from_user+0xb4>)
    707e:	4811      	ldr	r0, [pc, #68]	; (70c4 <z_hdlr_z_log_hexdump_from_user+0xd0>)
    7080:	e7c7      	b.n	7012 <z_hdlr_z_log_hexdump_from_user+0x1e>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(
    7082:	f013 0f38 	tst.w	r3, #56	; 0x38
    7086:	d0f1      	beq.n	706c <z_hdlr_z_log_hexdump_from_user+0x78>
    7088:	4907      	ldr	r1, [pc, #28]	; (70a8 <z_hdlr_z_log_hexdump_from_user+0xb4>)
    708a:	480f      	ldr	r0, [pc, #60]	; (70c8 <z_hdlr_z_log_hexdump_from_user+0xd4>)
    708c:	e7c1      	b.n	7012 <z_hdlr_z_log_hexdump_from_user+0x1e>
		metadata = log_strdup(metadata);
    708e:	4628      	mov	r0, r5
    7090:	f7ff ff22 	bl	6ed8 <log_strdup>
		log_hexdump(metadata, data, len, src_level_union.structure);
    7094:	4623      	mov	r3, r4
    7096:	463a      	mov	r2, r7
    7098:	4631      	mov	r1, r6
    709a:	f00c fb60 	bl	1375e <log_hexdump>
}
    709e:	4640      	mov	r0, r8
    70a0:	b004      	add	sp, #16
    70a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    70a6:	bf00      	nop
    70a8:	0001aac0 	.word	0x0001aac0
    70ac:	0001ac43 	.word	0x0001ac43
    70b0:	0001b8ef 	.word	0x0001b8ef
    70b4:	0001a1c4 	.word	0x0001a1c4
    70b8:	0001ac6f 	.word	0x0001ac6f
    70bc:	00018fd4 	.word	0x00018fd4
    70c0:	00018f84 	.word	0x00018f84
    70c4:	0001ac13 	.word	0x0001ac13
    70c8:	0001abe3 	.word	0x0001abe3

000070cc <log_is_strdup>:
	return ((char *)buf >= pool_first->buf) &&
    70cc:	4b05      	ldr	r3, [pc, #20]	; (70e4 <log_is_strdup+0x18>)
    70ce:	4298      	cmp	r0, r3
    70d0:	d305      	bcc.n	70de <log_is_strdup+0x12>
    70d2:	339c      	adds	r3, #156	; 0x9c
    70d4:	4298      	cmp	r0, r3
    70d6:	bf8c      	ite	hi
    70d8:	2000      	movhi	r0, #0
    70da:	2001      	movls	r0, #1
    70dc:	4770      	bx	lr
    70de:	2000      	movs	r0, #0
}
    70e0:	4770      	bx	lr
    70e2:	bf00      	nop
    70e4:	2000ac04 	.word	0x2000ac04

000070e8 <log_free>:
{
    70e8:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    70ea:	3804      	subs	r0, #4
    70ec:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    70ee:	f3bf 8f5b 	dmb	ish
    70f2:	e850 3f00 	ldrex	r3, [r0]
    70f6:	1e5a      	subs	r2, r3, #1
    70f8:	e840 2100 	strex	r1, r2, [r0]
    70fc:	2900      	cmp	r1, #0
    70fe:	d1f8      	bne.n	70f2 <log_free+0xa>
    7100:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    7104:	2b01      	cmp	r3, #1
    7106:	d103      	bne.n	7110 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    7108:	a901      	add	r1, sp, #4
    710a:	4803      	ldr	r0, [pc, #12]	; (7118 <log_free+0x30>)
    710c:	f008 f94c 	bl	f3a8 <k_mem_slab_free>
}
    7110:	b003      	add	sp, #12
    7112:	f85d fb04 	ldr.w	pc, [sp], #4
    7116:	bf00      	nop
    7118:	2000289c 	.word	0x2000289c

0000711c <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(u32_t))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    711c:	2320      	movs	r3, #32
    711e:	461a      	mov	r2, r3
    7120:	4901      	ldr	r1, [pc, #4]	; (7128 <log_msg_pool_init+0xc>)
    7122:	4802      	ldr	r0, [pc, #8]	; (712c <log_msg_pool_init+0x10>)
    7124:	f011 b8b8 	b.w	18298 <k_mem_slab_init>
    7128:	2000acd0 	.word	0x2000acd0
    712c:	20002940 	.word	0x20002940

00007130 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    7130:	e92d 4177 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r8, lr}
	union log_msg_chunk *msg = NULL;
    7134:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    7136:	4d11      	ldr	r5, [pc, #68]	; (717c <log_msg_no_space_handle+0x4c>)
	union log_msg_chunk *msg = NULL;
    7138:	9301      	str	r3, [sp, #4]
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
    713a:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
    713e:	b9bb      	cbnz	r3, 7170 <log_msg_no_space_handle+0x40>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
    7140:	f3ef 8314 	mrs	r3, CONTROL
extern "C" {
#endif

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_LOG_PANIC, log_panic)

K_SYSCALL_DECLARE1(K_SYSCALL_LOG_PROCESS, log_process, bool, bool, bypass)
    7144:	07db      	lsls	r3, r3, #31
    7146:	d513      	bpl.n	7170 <log_msg_no_space_handle+0x40>
	register u32_t ret __asm__("r0") = arg1;
    7148:	2001      	movs	r0, #1
	register u32_t r6 __asm__("r6") = call_id;
    714a:	2680      	movs	r6, #128	; 0x80
	__asm__ volatile("svc %[svid]\n"
    714c:	df03      	svc	3
    714e:	1c04      	adds	r4, r0, #0
    7150:	bf18      	it	ne
    7152:	2401      	movne	r4, #1
			log_dropped();
    7154:	f7ff fdde 	bl	6d14 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    7158:	2200      	movs	r2, #0
    715a:	a901      	add	r1, sp, #4
    715c:	4628      	mov	r0, r5
    715e:	f008 f8f7 	bl	f350 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    7162:	b108      	cbz	r0, 7168 <log_msg_no_space_handle+0x38>
    7164:	2c00      	cmp	r4, #0
    7166:	d1e8      	bne.n	713a <log_msg_no_space_handle+0xa>
	} else {
		log_dropped();
	}
	return msg;

}
    7168:	9801      	ldr	r0, [sp, #4]
    716a:	b003      	add	sp, #12
    716c:	e8bd 8170 	ldmia.w	sp!, {r4, r5, r6, r8, pc}
    7170:	2001      	movs	r0, #1
    7172:	f7ff fd27 	bl	6bc4 <z_impl_log_process>
    7176:	4604      	mov	r4, r0
    7178:	e7ec      	b.n	7154 <log_msg_no_space_handle+0x24>
    717a:	bf00      	nop
    717c:	20002940 	.word	0x20002940

00007180 <log_msg_chunk_alloc>:
{
    7180:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    7182:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
    7184:	a901      	add	r1, sp, #4
    7186:	4806      	ldr	r0, [pc, #24]	; (71a0 <log_msg_chunk_alloc+0x20>)
	union log_msg_chunk *msg = NULL;
    7188:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
    718a:	f008 f8e1 	bl	f350 <k_mem_slab_alloc>
	if (err != 0) {
    718e:	b110      	cbz	r0, 7196 <log_msg_chunk_alloc+0x16>
		msg = log_msg_no_space_handle();
    7190:	f7ff ffce 	bl	7130 <log_msg_no_space_handle>
    7194:	9001      	str	r0, [sp, #4]
}
    7196:	9801      	ldr	r0, [sp, #4]
    7198:	b003      	add	sp, #12
    719a:	f85d fb04 	ldr.w	pc, [sp], #4
    719e:	bf00      	nop
    71a0:	20002940 	.word	0x20002940

000071a4 <msg_free>:
{
    71a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    71a6:	7a04      	ldrb	r4, [r0, #8]
	u32_t nargs = msg->hdr.params.std.nargs;
    71a8:	7a45      	ldrb	r5, [r0, #9]
{
    71aa:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    71ac:	f014 0401 	ands.w	r4, r4, #1
	u32_t nargs = msg->hdr.params.std.nargs;
    71b0:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    71b4:	d100      	bne.n	71b8 <msg_free+0x14>
    71b6:	b9b5      	cbnz	r5, 71e6 <msg_free+0x42>
	return msg->hdr.ids.level;
    71b8:	7a83      	ldrb	r3, [r0, #10]
	} else if (IS_ENABLED(CONFIG_USERSPACE) &&
    71ba:	0759      	lsls	r1, r3, #29
    71bc:	d016      	beq.n	71ec <msg_free+0x48>
	return arg;
}

const char *log_msg_str_get(struct log_msg *msg)
{
	return msg->str;
    71be:	6904      	ldr	r4, [r0, #16]
		if (log_is_strdup((void *)str)) {
    71c0:	4620      	mov	r0, r4
    71c2:	f7ff ff83 	bl	70cc <log_is_strdup>
    71c6:	b188      	cbz	r0, 71ec <msg_free+0x48>
			log_free((void *)str);
    71c8:	4620      	mov	r0, r4
    71ca:	f7ff ff8d 	bl	70e8 <log_free>
    71ce:	e00d      	b.n	71ec <msg_free+0x48>
			void *buf = (void *)log_msg_arg_get(msg, i);
    71d0:	4621      	mov	r1, r4
    71d2:	f00c fb62 	bl	1389a <log_msg_arg_get>
    71d6:	4606      	mov	r6, r0
			if (log_is_strdup(buf)) {
    71d8:	f7ff ff78 	bl	70cc <log_is_strdup>
    71dc:	b110      	cbz	r0, 71e4 <msg_free+0x40>
				log_free(buf);
    71de:	4630      	mov	r0, r6
    71e0:	f7ff ff82 	bl	70e8 <log_free>
		for (i = 0; i < nargs; i++) {
    71e4:	3401      	adds	r4, #1
    71e6:	42a5      	cmp	r5, r4
    71e8:	9801      	ldr	r0, [sp, #4]
    71ea:	d8f1      	bhi.n	71d0 <msg_free+0x2c>
	if (msg->hdr.params.generic.ext == 1) {
    71ec:	9b01      	ldr	r3, [sp, #4]
    71ee:	7a1a      	ldrb	r2, [r3, #8]
    71f0:	0792      	lsls	r2, r2, #30
    71f2:	d504      	bpl.n	71fe <msg_free+0x5a>
		cont_free(msg->payload.ext.next);
    71f4:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    71f6:	4c08      	ldr	r4, [pc, #32]	; (7218 <msg_free+0x74>)
    71f8:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    71fa:	9b03      	ldr	r3, [sp, #12]
    71fc:	b92b      	cbnz	r3, 720a <msg_free+0x66>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    71fe:	a901      	add	r1, sp, #4
    7200:	4805      	ldr	r0, [pc, #20]	; (7218 <msg_free+0x74>)
    7202:	f008 f8d1 	bl	f3a8 <k_mem_slab_free>
}
    7206:	b004      	add	sp, #16
    7208:	bd70      	pop	{r4, r5, r6, pc}
		next = cont->next;
    720a:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    720c:	a903      	add	r1, sp, #12
    720e:	4620      	mov	r0, r4
    7210:	f008 f8ca 	bl	f3a8 <k_mem_slab_free>
		cont = next;
    7214:	9503      	str	r5, [sp, #12]
    7216:	e7f0      	b.n	71fa <msg_free+0x56>
    7218:	20002940 	.word	0x20002940

0000721c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    721c:	b40e      	push	{r1, r2, r3}
    721e:	b503      	push	{r0, r1, lr}
    7220:	ab03      	add	r3, sp, #12
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    7222:	4601      	mov	r1, r0
{
    7224:	f853 2b04 	ldr.w	r2, [r3], #4
	z_vprintk(out_func, (void *)log_output, fmt, args);
    7228:	4804      	ldr	r0, [pc, #16]	; (723c <print_formatted+0x20>)
	va_start(args, fmt);
    722a:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    722c:	f00b ffb1 	bl	13192 <z_vprintk>
#endif
	va_end(args);

	return length;
}
    7230:	2000      	movs	r0, #0
    7232:	b002      	add	sp, #8
    7234:	f85d eb04 	ldr.w	lr, [sp], #4
    7238:	b003      	add	sp, #12
    723a:	4770      	bx	lr
    723c:	00013c9f 	.word	0x00013c9f

00007240 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
    7240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7244:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    7246:	f011 0402 	ands.w	r4, r1, #2
{
    724a:	4606      	mov	r6, r0
    724c:	4690      	mov	r8, r2
    724e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    7252:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    7256:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    725a:	d007      	beq.n	726c <prefix_print+0x2c>
	if (!format) {
    725c:	f011 0f44 	tst.w	r1, #68	; 0x44
    7260:	d137      	bne.n	72d2 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    7262:	461a      	mov	r2, r3
    7264:	4932      	ldr	r1, [pc, #200]	; (7330 <prefix_print+0xf0>)
    7266:	f7ff ffd9 	bl	721c <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    726a:	4604      	mov	r4, r0
	if (color) {
    726c:	f1b9 0f00 	cmp.w	r9, #0
    7270:	d00a      	beq.n	7288 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
    7272:	4b30      	ldr	r3, [pc, #192]	; (7334 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
    7274:	4930      	ldr	r1, [pc, #192]	; (7338 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
    7276:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    727a:	4b30      	ldr	r3, [pc, #192]	; (733c <prefix_print+0xfc>)
    727c:	4630      	mov	r0, r6
    727e:	2a00      	cmp	r2, #0
    7280:	bf08      	it	eq
    7282:	461a      	moveq	r2, r3
    7284:	f7ff ffca 	bl	721c <print_formatted>
	if (level_on) {
    7288:	b13d      	cbz	r5, 729a <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    728a:	4b2d      	ldr	r3, [pc, #180]	; (7340 <prefix_print+0x100>)
    728c:	492d      	ldr	r1, [pc, #180]	; (7344 <prefix_print+0x104>)
    728e:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    7292:	4630      	mov	r0, r6
    7294:	f7ff ffc2 	bl	721c <print_formatted>
    7298:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    729a:	f1b8 0f00 	cmp.w	r8, #0
    729e:	d044      	beq.n	732a <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    72a0:	2301      	movs	r3, #1
    72a2:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    72a6:	4b28      	ldr	r3, [pc, #160]	; (7348 <prefix_print+0x108>)
    72a8:	f017 0f10 	tst.w	r7, #16
    72ac:	4f27      	ldr	r7, [pc, #156]	; (734c <prefix_print+0x10c>)
    72ae:	bf18      	it	ne
    72b0:	461f      	movne	r7, r3
    72b2:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    72b6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    72ba:	f7ff fd3b 	bl	6d34 <log_source_name_get>
    72be:	4639      	mov	r1, r7
    72c0:	4602      	mov	r2, r0
    72c2:	4630      	mov	r0, r6
    72c4:	f7ff ffaa 	bl	721c <print_formatted>
    72c8:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    72ca:	4420      	add	r0, r4
    72cc:	b005      	add	sp, #20
    72ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    72d2:	4a1f      	ldr	r2, [pc, #124]	; (7350 <prefix_print+0x110>)
    72d4:	6811      	ldr	r1, [r2, #0]
    72d6:	b331      	cbz	r1, 7326 <prefix_print+0xe6>
		timestamp /= timestamp_div;
    72d8:	4a1e      	ldr	r2, [pc, #120]	; (7354 <prefix_print+0x114>)
    72da:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    72de:	6814      	ldr	r4, [r2, #0]
    72e0:	fbb3 f3f4 	udiv	r3, r3, r4
		ms = (remainder * 1000U) / freq;
    72e4:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		seconds = timestamp / freq;
    72e8:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    72ec:	fbb4 f2fe 	udiv	r2, r4, lr
    72f0:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    72f4:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    72f8:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    72fc:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    7300:	fbb4 fbf1 	udiv	fp, r4, r1
    7304:	fb01 441b 	mls	r4, r1, fp, r4
		mins = seconds / 60U;
    7308:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    730c:	fb0c f404 	mul.w	r4, ip, r4
    7310:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    7314:	e9cd b101 	strd	fp, r1, [sp, #4]
    7318:	fb0a e113 	mls	r1, sl, r3, lr
    731c:	9100      	str	r1, [sp, #0]
    731e:	490e      	ldr	r1, [pc, #56]	; (7358 <prefix_print+0x118>)
    7320:	f7ff ff7c 	bl	721c <print_formatted>
    7324:	e7a1      	b.n	726a <prefix_print+0x2a>
		length = 0;
    7326:	4608      	mov	r0, r1
    7328:	e79f      	b.n	726a <prefix_print+0x2a>
	total += print_formatted(log_output,
    732a:	4f08      	ldr	r7, [pc, #32]	; (734c <prefix_print+0x10c>)
    732c:	e7c1      	b.n	72b2 <prefix_print+0x72>
    732e:	bf00      	nop
    7330:	0001acef 	.word	0x0001acef
    7334:	0001924c 	.word	0x0001924c
    7338:	0001aca2 	.word	0x0001aca2
    733c:	0001ace1 	.word	0x0001ace1
    7340:	00019260 	.word	0x00019260
    7344:	0001ad14 	.word	0x0001ad14
    7348:	0001aceb 	.word	0x0001aceb
    734c:	0001ace6 	.word	0x0001ace6
    7350:	2000295c 	.word	0x2000295c
    7354:	20002960 	.word	0x20002960
    7358:	0001acf8 	.word	0x0001acf8

0000735c <hexdump_line_print>:
{
    735c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7360:	4698      	mov	r8, r3
    7362:	9b08      	ldr	r3, [sp, #32]
    7364:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    7366:	06da      	lsls	r2, r3, #27
{
    7368:	4604      	mov	r4, r0
    736a:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    736c:	d405      	bmi.n	737a <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    736e:	069b      	lsls	r3, r3, #26
		print_formatted(ctx, "\n");
    7370:	bf4c      	ite	mi
    7372:	4922      	ldrmi	r1, [pc, #136]	; (73fc <hexdump_line_print+0xa0>)
		print_formatted(ctx, "\r\n");
    7374:	4922      	ldrpl	r1, [pc, #136]	; (7400 <hexdump_line_print+0xa4>)
    7376:	f7ff ff51 	bl	721c <print_formatted>
		print_formatted(log_output, " ");
    737a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 7408 <hexdump_line_print+0xac>
{
    737e:	2500      	movs	r5, #0
	for (int i = 0; i < prefix_offset; i++) {
    7380:	4545      	cmp	r5, r8
    7382:	db2b      	blt.n	73dc <hexdump_line_print+0x80>
			print_formatted(log_output, "   ");
    7384:	f8df 8084 	ldr.w	r8, [pc, #132]	; 740c <hexdump_line_print+0xb0>
			print_formatted(log_output, "%02x ", data[i]);
    7388:	f8df 9084 	ldr.w	r9, [pc, #132]	; 7410 <hexdump_line_print+0xb4>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    738c:	2500      	movs	r5, #0
		if (i < length) {
    738e:	42af      	cmp	r7, r5
    7390:	d92a      	bls.n	73e8 <hexdump_line_print+0x8c>
			print_formatted(log_output, "%02x ", data[i]);
    7392:	5d72      	ldrb	r2, [r6, r5]
    7394:	4649      	mov	r1, r9
    7396:	4620      	mov	r0, r4
    7398:	f7ff ff40 	bl	721c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    739c:	3501      	adds	r5, #1
    739e:	2d08      	cmp	r5, #8
    73a0:	d1f5      	bne.n	738e <hexdump_line_print+0x32>
	print_formatted(log_output, "|");
    73a2:	4918      	ldr	r1, [pc, #96]	; (7404 <hexdump_line_print+0xa8>)
			print_formatted(log_output, " ");
    73a4:	f8df 8060 	ldr.w	r8, [pc, #96]	; 7408 <hexdump_line_print+0xac>
			      isprint((int)c) ? c : '.');
    73a8:	f8df 9068 	ldr.w	r9, [pc, #104]	; 7414 <hexdump_line_print+0xb8>
			print_formatted(log_output, "%c",
    73ac:	f8df a068 	ldr.w	sl, [pc, #104]	; 7418 <hexdump_line_print+0xbc>
	print_formatted(log_output, "|");
    73b0:	4620      	mov	r0, r4
    73b2:	f7ff ff33 	bl	721c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    73b6:	2500      	movs	r5, #0
		if (i < length) {
    73b8:	42af      	cmp	r7, r5
    73ba:	d91a      	bls.n	73f2 <hexdump_line_print+0x96>
			char c = (char)data[i];
    73bc:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    73be:	f812 3009 	ldrb.w	r3, [r2, r9]
    73c2:	f013 0f97 	tst.w	r3, #151	; 0x97
    73c6:	bf08      	it	eq
    73c8:	222e      	moveq	r2, #46	; 0x2e
    73ca:	4651      	mov	r1, sl
    73cc:	4620      	mov	r0, r4
    73ce:	f7ff ff25 	bl	721c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    73d2:	3501      	adds	r5, #1
    73d4:	2d08      	cmp	r5, #8
    73d6:	d1ef      	bne.n	73b8 <hexdump_line_print+0x5c>
}
    73d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    73dc:	4649      	mov	r1, r9
    73de:	4620      	mov	r0, r4
    73e0:	f7ff ff1c 	bl	721c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    73e4:	3501      	adds	r5, #1
    73e6:	e7cb      	b.n	7380 <hexdump_line_print+0x24>
			print_formatted(log_output, "   ");
    73e8:	4641      	mov	r1, r8
    73ea:	4620      	mov	r0, r4
    73ec:	f7ff ff16 	bl	721c <print_formatted>
    73f0:	e7d4      	b.n	739c <hexdump_line_print+0x40>
			print_formatted(log_output, " ");
    73f2:	4641      	mov	r1, r8
    73f4:	4620      	mov	r0, r4
    73f6:	f7ff ff11 	bl	721c <print_formatted>
    73fa:	e7ea      	b.n	73d2 <hexdump_line_print+0x76>
    73fc:	00019f0b 	.word	0x00019f0b
    7400:	0001aca5 	.word	0x0001aca5
    7404:	0001acb2 	.word	0x0001acb2
    7408:	0001acb0 	.word	0x0001acb0
    740c:	0001acae 	.word	0x0001acae
    7410:	0001aca8 	.word	0x0001aca8
    7414:	0001904d 	.word	0x0001904d
    7418:	0001acb4 	.word	0x0001acb4

0000741c <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
    741c:	b538      	push	{r3, r4, r5, lr}
    741e:	460c      	mov	r4, r1
	if (color) {
    7420:	07e1      	lsls	r1, r4, #31
{
    7422:	4605      	mov	r5, r0
	if (color) {
    7424:	d503      	bpl.n	742e <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    7426:	4a08      	ldr	r2, [pc, #32]	; (7448 <postfix_print+0x2c>)
    7428:	4908      	ldr	r1, [pc, #32]	; (744c <postfix_print+0x30>)
    742a:	f7ff fef7 	bl	721c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    742e:	06e2      	lsls	r2, r4, #27
    7430:	d408      	bmi.n	7444 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    7432:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    7434:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    7436:	bf4c      	ite	mi
    7438:	4905      	ldrmi	r1, [pc, #20]	; (7450 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    743a:	4906      	ldrpl	r1, [pc, #24]	; (7454 <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    743c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    7440:	f7ff beec 	b.w	721c <print_formatted>
}
    7444:	bd38      	pop	{r3, r4, r5, pc}
    7446:	bf00      	nop
    7448:	0001ace1 	.word	0x0001ace1
    744c:	0001aca2 	.word	0x0001aca2
    7450:	00019f0b 	.word	0x00019f0b
    7454:	0001aca5 	.word	0x0001aca5

00007458 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    7458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    745c:	7a8b      	ldrb	r3, [r1, #10]
	u16_t source_id = (u16_t)log_msg_source_id_get(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	int prefix_offset;

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    745e:	f013 0407 	ands.w	r4, r3, #7
{
    7462:	4617      	mov	r7, r2
    7464:	b088      	sub	sp, #32
    7466:	4605      	mov	r5, r0
    7468:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    746a:	7a0a      	ldrb	r2, [r1, #8]
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    746c:	d01c      	beq.n	74a8 <log_output_msg_process+0x50>
	return msg->hdr.ids.source_id;
    746e:	8949      	ldrh	r1, [r1, #10]
    7470:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    7474:	0989      	lsrs	r1, r1, #6
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    7476:	43d2      	mvns	r2, r2
    7478:	9102      	str	r1, [sp, #8]
    747a:	e9cd 4300 	strd	r4, r3, [sp]
    747e:	f002 0201 	and.w	r2, r2, #1
    7482:	68f3      	ldr	r3, [r6, #12]
    7484:	4639      	mov	r1, r7
    7486:	f7ff fedb 	bl	7240 <prefix_print>
    748a:	4681      	mov	r9, r0
    748c:	7a33      	ldrb	r3, [r6, #8]
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    748e:	07da      	lsls	r2, r3, #31
    7490:	d40c      	bmi.n	74ac <log_output_msg_process+0x54>
		std_print(msg, log_output);
    7492:	4629      	mov	r1, r5
    7494:	4630      	mov	r0, r6
    7496:	f00c fa98 	bl	139ca <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    749a:	b34c      	cbz	r4, 74f0 <log_output_msg_process+0x98>
		postfix_print(log_output, flags, level);
    749c:	4622      	mov	r2, r4
    749e:	4639      	mov	r1, r7
    74a0:	4628      	mov	r0, r5
    74a2:	f7ff ffbb 	bl	741c <postfix_print>
    74a6:	e023      	b.n	74f0 <log_output_msg_process+0x98>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    74a8:	46a1      	mov	r9, r4
    74aa:	e7ef      	b.n	748c <log_output_msg_process+0x34>
	} else if (raw_string) {
    74ac:	bb34      	cbnz	r4, 74fc <log_output_msg_process+0xa4>
	size_t offset = 0;
    74ae:	4627      	mov	r7, r4
		length = log_output->size;
    74b0:	68eb      	ldr	r3, [r5, #12]
    74b2:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    74b4:	aa06      	add	r2, sp, #24
    74b6:	463b      	mov	r3, r7
    74b8:	68a9      	ldr	r1, [r5, #8]
    74ba:	4630      	mov	r0, r6
    74bc:	f00c fa71 	bl	139a2 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    74c0:	9a06      	ldr	r2, [sp, #24]
    74c2:	686b      	ldr	r3, [r5, #4]
    74c4:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    74c6:	b13a      	cbz	r2, 74d8 <log_output_msg_process+0x80>
			eol = (log_output->buf[length - 1] == '\n');
    74c8:	68ab      	ldr	r3, [r5, #8]
    74ca:	4413      	add	r3, r2
    74cc:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    74d0:	f1a4 030a 	sub.w	r3, r4, #10
    74d4:	425c      	negs	r4, r3
    74d6:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    74d8:	4628      	mov	r0, r5
    74da:	f00c fbd3 	bl	13c84 <log_output_flush>
		offset += length;
    74de:	9b06      	ldr	r3, [sp, #24]
    74e0:	441f      	add	r7, r3
	} while (length > 0);
    74e2:	2b00      	cmp	r3, #0
    74e4:	d1e4      	bne.n	74b0 <log_output_msg_process+0x58>
	if (eol) {
    74e6:	b11c      	cbz	r4, 74f0 <log_output_msg_process+0x98>
		print_formatted(log_output, "\r");
    74e8:	4914      	ldr	r1, [pc, #80]	; (753c <log_output_msg_process+0xe4>)
    74ea:	4628      	mov	r0, r5
    74ec:	f7ff fe96 	bl	721c <print_formatted>
	}

	log_output_flush(log_output);
    74f0:	4628      	mov	r0, r5
    74f2:	f00c fbc7 	bl	13c84 <log_output_flush>
}
    74f6:	b008      	add	sp, #32
    74f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    74fc:	4630      	mov	r0, r6
    74fe:	f00c f9fc 	bl	138fa <log_msg_str_get>
    7502:	490f      	ldr	r1, [pc, #60]	; (7540 <log_output_msg_process+0xe8>)
    7504:	4602      	mov	r2, r0
    7506:	4628      	mov	r0, r5
    7508:	f7ff fe88 	bl	721c <print_formatted>
	u32_t offset = 0U;
    750c:	f04f 0800 	mov.w	r8, #0
		length = sizeof(buf);
    7510:	f04f 0a08 	mov.w	sl, #8
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    7514:	aa05      	add	r2, sp, #20
    7516:	4643      	mov	r3, r8
    7518:	a906      	add	r1, sp, #24
    751a:	4630      	mov	r0, r6
		length = sizeof(buf);
    751c:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    7520:	f00c fa3f 	bl	139a2 <log_msg_hexdump_data_get>
		if (length) {
    7524:	9a05      	ldr	r2, [sp, #20]
    7526:	2a00      	cmp	r2, #0
    7528:	d0b8      	beq.n	749c <log_output_msg_process+0x44>
			hexdump_line_print(log_output, buf, length,
    752a:	464b      	mov	r3, r9
    752c:	9700      	str	r7, [sp, #0]
    752e:	a906      	add	r1, sp, #24
    7530:	4628      	mov	r0, r5
    7532:	f7ff ff13 	bl	735c <hexdump_line_print>
			offset += length;
    7536:	9b05      	ldr	r3, [sp, #20]
    7538:	4498      	add	r8, r3
    753a:	e7eb      	b.n	7514 <log_output_msg_process+0xbc>
    753c:	0001acb7 	.word	0x0001acb7
    7540:	0001aca2 	.word	0x0001aca2

00007544 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
    7544:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    7546:	e9d0 4300 	ldrd	r4, r3, [r0]
    754a:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    754c:	4a0f      	ldr	r2, [pc, #60]	; (758c <log_output_dropped_process+0x48>)
    754e:	f242 730f 	movw	r3, #9999	; 0x270f
    7552:	428b      	cmp	r3, r1
    7554:	bf28      	it	cs
    7556:	460b      	movcs	r3, r1
    7558:	4668      	mov	r0, sp
    755a:	2105      	movs	r1, #5
    755c:	f7f9 fda7 	bl	10ae <sniprintf>

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    7560:	462b      	mov	r3, r5
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    7562:	4606      	mov	r6, r0
	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    7564:	220b      	movs	r2, #11
    7566:	4620      	mov	r0, r4
    7568:	4909      	ldr	r1, [pc, #36]	; (7590 <log_output_dropped_process+0x4c>)
    756a:	f00c fa21 	bl	139b0 <buffer_write>
	buffer_write(outf, buf, len, dev);
    756e:	462b      	mov	r3, r5
    7570:	4632      	mov	r2, r6
    7572:	4669      	mov	r1, sp
    7574:	4620      	mov	r0, r4
    7576:	f00c fa1b 	bl	139b0 <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    757a:	462b      	mov	r3, r5
    757c:	221b      	movs	r2, #27
    757e:	4905      	ldr	r1, [pc, #20]	; (7594 <log_output_dropped_process+0x50>)
    7580:	4620      	mov	r0, r4
    7582:	f00c fa15 	bl	139b0 <buffer_write>
}
    7586:	b002      	add	sp, #8
    7588:	bd70      	pop	{r4, r5, r6, pc}
    758a:	bf00      	nop
    758c:	0001b2d9 	.word	0x0001b2d9
    7590:	0001acd5 	.word	0x0001acd5
    7594:	0001acb9 	.word	0x0001acb9

00007598 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    7598:	4a08      	ldr	r2, [pc, #32]	; (75bc <log_output_timestamp_freq_set+0x24>)
{
    759a:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    759c:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    759e:	4c08      	ldr	r4, [pc, #32]	; (75c0 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    75a0:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    75a2:	2100      	movs	r1, #0
    75a4:	42a0      	cmp	r0, r4
    75a6:	d804      	bhi.n	75b2 <log_output_timestamp_freq_set+0x1a>
    75a8:	b101      	cbz	r1, 75ac <log_output_timestamp_freq_set+0x14>
    75aa:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    75ac:	4b05      	ldr	r3, [pc, #20]	; (75c4 <log_output_timestamp_freq_set+0x2c>)
    75ae:	6018      	str	r0, [r3, #0]
}
    75b0:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    75b2:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    75b4:	005b      	lsls	r3, r3, #1
    75b6:	2101      	movs	r1, #1
    75b8:	e7f4      	b.n	75a4 <log_output_timestamp_freq_set+0xc>
    75ba:	bf00      	nop
    75bc:	20002960 	.word	0x20002960
    75c0:	000f4240 	.word	0x000f4240
    75c4:	2000295c 	.word	0x2000295c

000075c8 <panic>:
	log_output_ctx_set(&log_output, dev);
}

static void panic(struct log_backend const *const backend)
{
	log_output_flush(&log_output);
    75c8:	4801      	ldr	r0, [pc, #4]	; (75d0 <panic+0x8>)
    75ca:	f00c bb5b 	b.w	13c84 <log_output_flush>
    75ce:	bf00      	nop
    75d0:	0001928c 	.word	0x0001928c

000075d4 <dropped>:

static void dropped(const struct log_backend *const backend, u32_t cnt)
{
	ARG_UNUSED(backend);

	log_output_dropped_process(&log_output, cnt);
    75d4:	4801      	ldr	r0, [pc, #4]	; (75dc <dropped+0x8>)
    75d6:	f7ff bfb5 	b.w	7544 <log_output_dropped_process>
    75da:	bf00      	nop
    75dc:	0001928c 	.word	0x0001928c

000075e0 <put>:
{
    75e0:	b510      	push	{r4, lr}
	log_msg_get(msg);
    75e2:	4608      	mov	r0, r1
{
    75e4:	460c      	mov	r4, r1
	log_msg_get(msg);
    75e6:	f00c f948 	bl	1387a <log_msg_get>
	log_output_msg_process(&log_output, msg, flags);
    75ea:	4621      	mov	r1, r4
    75ec:	4804      	ldr	r0, [pc, #16]	; (7600 <put+0x20>)
    75ee:	220f      	movs	r2, #15
    75f0:	f7ff ff32 	bl	7458 <log_output_msg_process>
	log_msg_put(msg);
    75f4:	4620      	mov	r0, r4
}
    75f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_msg_put(msg);
    75fa:	f00c b96b 	b.w	138d4 <log_msg_put>
    75fe:	bf00      	nop
    7600:	0001928c 	.word	0x0001928c

00007604 <log_backend_uart_init>:
{
    7604:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
    7608:	f00c fb5a 	bl	13cc0 <z_arch_is_user_context>

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE1(K_SYSCALL_DEVICE_GET_BINDING, device_get_binding, struct device *, const char *, name)
    760c:	b148      	cbz	r0, 7622 <log_backend_uart_init+0x1e>
	register u32_t ret __asm__("r0") = arg1;
    760e:	4809      	ldr	r0, [pc, #36]	; (7634 <log_backend_uart_init+0x30>)
	register u32_t r6 __asm__("r6") = call_id;
    7610:	2617      	movs	r6, #23
	__asm__ volatile("svc %[svid]\n"
    7612:	df03      	svc	3
	assert(dev);
    7614:	b948      	cbnz	r0, 762a <log_backend_uart_init+0x26>
    7616:	4b08      	ldr	r3, [pc, #32]	; (7638 <log_backend_uart_init+0x34>)
    7618:	4a08      	ldr	r2, [pc, #32]	; (763c <log_backend_uart_init+0x38>)
    761a:	4809      	ldr	r0, [pc, #36]	; (7640 <log_backend_uart_init+0x3c>)
    761c:	2138      	movs	r1, #56	; 0x38
    761e:	f7f9 f9ad 	bl	97c <__assert_func>
    7622:	4804      	ldr	r0, [pc, #16]	; (7634 <log_backend_uart_init+0x30>)
    7624:	f007 fd48 	bl	f0b8 <z_impl_device_get_binding>
    7628:	e7f4      	b.n	7614 <log_backend_uart_init+0x10>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    762a:	4b06      	ldr	r3, [pc, #24]	; (7644 <log_backend_uart_init+0x40>)
    762c:	6058      	str	r0, [r3, #4]
}
    762e:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
    7632:	bf00      	nop
    7634:	0001ad50 	.word	0x0001ad50
    7638:	0001ad57 	.word	0x0001ad57
    763c:	0001ad3a 	.word	0x0001ad3a
    7640:	0001ad5b 	.word	0x0001ad5b
    7644:	2000296c 	.word	0x2000296c

00007648 <tty_init>:

	return out_size;
}

int tty_init(struct tty_serial *tty, struct device *uart_dev)
{
    7648:	4602      	mov	r2, r0
    764a:	4608      	mov	r0, r1
    764c:	b508      	push	{r3, lr}
	tty->uart_dev = uart_dev;
    764e:	6011      	str	r1, [r2, #0]

	/* We start in unbuffer mode. */
	tty->rx_ringbuf = NULL;
    7650:	2300      	movs	r3, #0
	tty->tx_ringbuf = NULL;
	tty->tx_ringbuf_sz = 0U;

	tty->rx_get = tty->rx_put = tty->tx_get = tty->tx_put = 0U;

	tty->rx_timeout = K_FOREVER;
    7652:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	tty->rx_ringbuf_sz = 0U;
    7656:	e9c2 3307 	strd	r3, r3, [r2, #28]
	tty->rx_get = tty->rx_put = tty->tx_get = tty->tx_put = 0U;
    765a:	6253      	str	r3, [r2, #36]	; 0x24
	tty->tx_ringbuf_sz = 0U;
    765c:	e9c2 3311 	strd	r3, r3, [r2, #68]	; 0x44
	tty->tx_timeout = K_FOREVER;
    7660:	e9c2 3113 	strd	r3, r1, [r2, #76]	; 0x4c
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
    7664:	6843      	ldr	r3, [r0, #4]
	tty->rx_timeout = K_FOREVER;
    7666:	6291      	str	r1, [r2, #40]	; 0x28
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    7668:	b11b      	cbz	r3, 7672 <tty_init+0x2a>
    766a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    766c:	b10b      	cbz	r3, 7672 <tty_init+0x2a>
		api->irq_callback_set(dev, cb, user_data);
    766e:	4902      	ldr	r1, [pc, #8]	; (7678 <tty_init+0x30>)
    7670:	4798      	blx	r3

	uart_irq_callback_user_data_set(uart_dev, tty_uart_isr, tty);

	return 0;
}
    7672:	2000      	movs	r0, #0
    7674:	bd08      	pop	{r3, pc}
    7676:	bf00      	nop
    7678:	00013e31 	.word	0x00013e31

0000767c <console_putchar>:

	return tty_read(&console_serial, buf, size);
}

int console_putchar(char c)
{
    767c:	b507      	push	{r0, r1, r2, lr}
	return tty_write(&console_serial, &c, 1);
    767e:	2201      	movs	r2, #1
{
    7680:	f88d 0007 	strb.w	r0, [sp, #7]
	return tty_write(&console_serial, &c, 1);
    7684:	f10d 0107 	add.w	r1, sp, #7
    7688:	4802      	ldr	r0, [pc, #8]	; (7694 <console_putchar+0x18>)
    768a:	f00c fc32 	bl	13ef2 <tty_write>
}
    768e:	b003      	add	sp, #12
    7690:	f85d fb04 	ldr.w	pc, [sp], #4
    7694:	20002978 	.word	0x20002978

00007698 <console_getchar>:

int console_getchar(void)
{
    7698:	b507      	push	{r0, r1, r2, lr}
	u8_t c;
	int res;

	res = tty_read(&console_serial, &c, 1);
    769a:	2201      	movs	r2, #1
    769c:	f10d 0107 	add.w	r1, sp, #7
    76a0:	4804      	ldr	r0, [pc, #16]	; (76b4 <console_getchar+0x1c>)
    76a2:	f00c fc57 	bl	13f54 <tty_read>
	if (res < 0) {
    76a6:	2800      	cmp	r0, #0
		return res;
	}

	return c;
    76a8:	bfa8      	it	ge
    76aa:	f89d 0007 	ldrbge.w	r0, [sp, #7]
}
    76ae:	b003      	add	sp, #12
    76b0:	f85d fb04 	ldr.w	pc, [sp], #4
    76b4:	20002978 	.word	0x20002978

000076b8 <console_init>:

void console_init(void)
{
    76b8:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
    76bc:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
    76c0:	b9bb      	cbnz	r3, 76f2 <console_init+0x3a>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
    76c2:	f3ef 8314 	mrs	r3, CONTROL
    76c6:	07db      	lsls	r3, r3, #31
    76c8:	d513      	bpl.n	76f2 <console_init+0x3a>
	register u32_t ret __asm__("r0") = arg1;
    76ca:	480c      	ldr	r0, [pc, #48]	; (76fc <console_init+0x44>)
	register u32_t r6 __asm__("r6") = call_id;
    76cc:	2617      	movs	r6, #23
	__asm__ volatile("svc %[svid]\n"
    76ce:	df03      	svc	3
	struct device *uart_dev;

	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	tty_init(&console_serial, uart_dev);
    76d0:	4601      	mov	r1, r0
    76d2:	480b      	ldr	r0, [pc, #44]	; (7700 <console_init+0x48>)
    76d4:	f7ff ffb8 	bl	7648 <tty_init>
	tty_set_tx_buf(&console_serial, console_txbuf, sizeof(console_txbuf));
    76d8:	f44f 7200 	mov.w	r2, #512	; 0x200
    76dc:	4909      	ldr	r1, [pc, #36]	; (7704 <console_init+0x4c>)
    76de:	4808      	ldr	r0, [pc, #32]	; (7700 <console_init+0x48>)
    76e0:	f00c fce1 	bl	140a6 <tty_set_tx_buf>
	tty_set_rx_buf(&console_serial, console_rxbuf, sizeof(console_rxbuf));
    76e4:	2240      	movs	r2, #64	; 0x40
    76e6:	4908      	ldr	r1, [pc, #32]	; (7708 <console_init+0x50>)
    76e8:	4805      	ldr	r0, [pc, #20]	; (7700 <console_init+0x48>)
}
    76ea:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
	tty_set_rx_buf(&console_serial, console_rxbuf, sizeof(console_rxbuf));
    76ee:	f00c bcaf 	b.w	14050 <tty_set_rx_buf>
    76f2:	4802      	ldr	r0, [pc, #8]	; (76fc <console_init+0x44>)
    76f4:	f007 fce0 	bl	f0b8 <z_impl_device_get_binding>
    76f8:	e7ea      	b.n	76d0 <console_init+0x18>
    76fa:	bf00      	nop
    76fc:	0001ad50 	.word	0x0001ad50
    7700:	20002978 	.word	0x20002978
    7704:	20005a13 	.word	0x20005a13
    7708:	200059d3 	.word	0x200059d3

0000770c <k_mutex_unlock.constprop.2>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    770c:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
    7710:	f00c fcd9 	bl	140c6 <z_arch_is_user_context>
    7714:	b120      	cbz	r0, 7720 <k_mutex_unlock.constprop.2+0x14>
	register u32_t ret __asm__("r0") = arg1;
    7716:	4805      	ldr	r0, [pc, #20]	; (772c <k_mutex_unlock.constprop.2+0x20>)
	register u32_t r6 __asm__("r6") = call_id;
    7718:	2645      	movs	r6, #69	; 0x45
	__asm__ volatile("svc %[svid]\n"
    771a:	df03      	svc	3
    771c:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
    7720:	4802      	ldr	r0, [pc, #8]	; (772c <k_mutex_unlock.constprop.2+0x20>)
    7722:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
    7726:	f007 bfc7 	b.w	f6b8 <z_impl_k_mutex_unlock>
    772a:	bf00      	nop
    772c:	200029d4 	.word	0x200029d4

00007730 <k_mutex_lock.constprop.3>:
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    7730:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
    7734:	f00c fcc7 	bl	140c6 <z_arch_is_user_context>
    7738:	b130      	cbz	r0, 7748 <k_mutex_lock.constprop.3+0x18>
	register u32_t ret __asm__("r0") = arg1;
    773a:	4807      	ldr	r0, [pc, #28]	; (7758 <k_mutex_lock.constprop.3+0x28>)
	register u32_t r1 __asm__("r1") = arg2;
    773c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	register u32_t r6 __asm__("r6") = call_id;
    7740:	2644      	movs	r6, #68	; 0x44
	__asm__ volatile("svc %[svid]\n"
    7742:	df03      	svc	3
    7744:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
    7748:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    774c:	4802      	ldr	r0, [pc, #8]	; (7758 <k_mutex_lock.constprop.3+0x28>)
    774e:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
    7752:	f007 bf25 	b.w	f5a0 <z_impl_k_mutex_lock>
    7756:	bf00      	nop
    7758:	200029d4 	.word	0x200029d4

0000775c <disk_init>:
	k_mutex_unlock(&mutex);
	return rc;
}

static int disk_init(struct device *dev)
{
    775c:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
    7760:	f00c fcb1 	bl	140c6 <z_arch_is_user_context>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)
    7764:	b140      	cbz	r0, 7778 <disk_init+0x1c>
	register u32_t ret __asm__("r0") = arg1;
    7766:	4806      	ldr	r0, [pc, #24]	; (7780 <disk_init+0x24>)
	register u32_t r6 __asm__("r6") = call_id;
    7768:	2643      	movs	r6, #67	; 0x43
	__asm__ volatile("svc %[svid]\n"
    776a:	df03      	svc	3
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    776c:	4b05      	ldr	r3, [pc, #20]	; (7784 <disk_init+0x28>)
	ARG_UNUSED(dev);

	k_mutex_init(&mutex);
	sys_dlist_init(&disk_access_list);
	return 0;
}
    776e:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
    7770:	e9c3 3300 	strd	r3, r3, [r3]
    7774:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
    7778:	4801      	ldr	r0, [pc, #4]	; (7780 <disk_init+0x24>)
    777a:	f010 fddd 	bl	18338 <z_impl_k_mutex_init>
    777e:	e7f5      	b.n	776c <disk_init+0x10>
    7780:	200029d4 	.word	0x200029d4
    7784:	200029cc 	.word	0x200029cc

00007788 <disk_access_get_di>:
{
    7788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    778a:	4607      	mov	r7, r0
	size_t name_len = strlen(name);
    778c:	f7fa fe50 	bl	2430 <strlen>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    7790:	4d0f      	ldr	r5, [pc, #60]	; (77d0 <disk_access_get_di+0x48>)
    7792:	4606      	mov	r6, r0
	k_mutex_lock(&mutex, K_FOREVER);
    7794:	f7ff ffcc 	bl	7730 <k_mutex_lock.constprop.3>
    7798:	682c      	ldr	r4, [r5, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    779a:	42ac      	cmp	r4, r5
    779c:	d10d      	bne.n	77ba <disk_access_get_di+0x32>
	struct disk_info *disk = NULL, *itr;
    779e:	2400      	movs	r4, #0
	k_mutex_unlock(&mutex);
    77a0:	f7ff ffb4 	bl	770c <k_mutex_unlock.constprop.2>
}
    77a4:	4620      	mov	r0, r4
    77a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (strlen(itr->name) != name_len) {
    77a8:	68a0      	ldr	r0, [r4, #8]
    77aa:	f7fa fe41 	bl	2430 <strlen>
    77ae:	42b0      	cmp	r0, r6
    77b0:	d006      	beq.n	77c0 <disk_access_get_di+0x38>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    77b2:	686b      	ldr	r3, [r5, #4]
    77b4:	429c      	cmp	r4, r3
    77b6:	d0f2      	beq.n	779e <disk_access_get_di+0x16>
    77b8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_NODE(&disk_access_list, node) {
    77ba:	2c00      	cmp	r4, #0
    77bc:	d1f4      	bne.n	77a8 <disk_access_get_di+0x20>
    77be:	e7ee      	b.n	779e <disk_access_get_di+0x16>
		if (strncmp(name, itr->name, name_len) == 0) {
    77c0:	4632      	mov	r2, r6
    77c2:	68a1      	ldr	r1, [r4, #8]
    77c4:	4638      	mov	r0, r7
    77c6:	f7fa fe3b 	bl	2440 <strncmp>
    77ca:	2800      	cmp	r0, #0
    77cc:	d1f1      	bne.n	77b2 <disk_access_get_di+0x2a>
    77ce:	e7e7      	b.n	77a0 <disk_access_get_di+0x18>
    77d0:	200029cc 	.word	0x200029cc

000077d4 <disk_access_register>:
{
    77d4:	b538      	push	{r3, r4, r5, lr}
    77d6:	4605      	mov	r5, r0
	k_mutex_lock(&mutex, K_FOREVER);
    77d8:	f7ff ffaa 	bl	7730 <k_mutex_lock.constprop.3>
	if ((disk == NULL) || (disk->name == NULL)) {
    77dc:	b10d      	cbz	r5, 77e2 <disk_access_register+0xe>
    77de:	68a8      	ldr	r0, [r5, #8]
    77e0:	b9e0      	cbnz	r0, 781c <disk_access_register+0x48>
    77e2:	f00c fc70 	bl	140c6 <z_arch_is_user_context>
		LOG_ERR("invalid disk interface!!");
    77e6:	2301      	movs	r3, #1
    77e8:	f04f 0200 	mov.w	r2, #0
    77ec:	f363 0207 	bfi	r2, r3, #0, #8
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    77f0:	491b      	ldr	r1, [pc, #108]	; (7860 <disk_access_register+0x8c>)
    77f2:	4b1c      	ldr	r3, [pc, #112]	; (7864 <disk_access_register+0x90>)
    77f4:	1a5b      	subs	r3, r3, r1
    77f6:	08db      	lsrs	r3, r3, #3
    77f8:	f363 128f 	bfi	r2, r3, #6, #10
    77fc:	b148      	cbz	r0, 7812 <disk_access_register+0x3e>
    77fe:	491a      	ldr	r1, [pc, #104]	; (7868 <disk_access_register+0x94>)
		LOG_ERR("disk interface already registered!!");
    7800:	4610      	mov	r0, r2
    7802:	f00b ffdb 	bl	137bc <log_from_user>
		rc = -EINVAL;
    7806:	f06f 0415 	mvn.w	r4, #21
	k_mutex_unlock(&mutex);
    780a:	f7ff ff7f 	bl	770c <k_mutex_unlock.constprop.2>
}
    780e:	4620      	mov	r0, r4
    7810:	bd38      	pop	{r3, r4, r5, pc}
		LOG_ERR("invalid disk interface!!");
    7812:	4815      	ldr	r0, [pc, #84]	; (7868 <disk_access_register+0x94>)
    7814:	4611      	mov	r1, r2
		LOG_ERR("disk interface already registered!!");
    7816:	f00b ff69 	bl	136ec <log_0>
    781a:	e7f4      	b.n	7806 <disk_access_register+0x32>
	if (disk_access_get_di(disk->name) != NULL) {
    781c:	f7ff ffb4 	bl	7788 <disk_access_get_di>
    7820:	4604      	mov	r4, r0
    7822:	b190      	cbz	r0, 784a <disk_access_register+0x76>
    7824:	f00c fc4f 	bl	140c6 <z_arch_is_user_context>
		LOG_ERR("disk interface already registered!!");
    7828:	2301      	movs	r3, #1
    782a:	f04f 0200 	mov.w	r2, #0
    782e:	f363 0207 	bfi	r2, r3, #0, #8
    7832:	490b      	ldr	r1, [pc, #44]	; (7860 <disk_access_register+0x8c>)
    7834:	4b0b      	ldr	r3, [pc, #44]	; (7864 <disk_access_register+0x90>)
    7836:	1a5b      	subs	r3, r3, r1
    7838:	08db      	lsrs	r3, r3, #3
    783a:	f363 128f 	bfi	r2, r3, #6, #10
    783e:	b108      	cbz	r0, 7844 <disk_access_register+0x70>
    7840:	490a      	ldr	r1, [pc, #40]	; (786c <disk_access_register+0x98>)
    7842:	e7dd      	b.n	7800 <disk_access_register+0x2c>
    7844:	4611      	mov	r1, r2
    7846:	4809      	ldr	r0, [pc, #36]	; (786c <disk_access_register+0x98>)
    7848:	e7e5      	b.n	7816 <disk_access_register+0x42>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    784a:	4b09      	ldr	r3, [pc, #36]	; (7870 <disk_access_register+0x9c>)
    784c:	602b      	str	r3, [r5, #0]
	node->prev = list->tail;
    784e:	685a      	ldr	r2, [r3, #4]
    7850:	606a      	str	r2, [r5, #4]

	list->tail->next = node;
    7852:	685a      	ldr	r2, [r3, #4]
    7854:	6015      	str	r5, [r2, #0]
	list->tail = node;
    7856:	605d      	str	r5, [r3, #4]
    7858:	f00c fc35 	bl	140c6 <z_arch_is_user_context>
reg_err:
    785c:	e7d5      	b.n	780a <disk_access_register+0x36>
    785e:	bf00      	nop
    7860:	00018f84 	.word	0x00018f84
    7864:	00018f84 	.word	0x00018f84
    7868:	0001adcd 	.word	0x0001adcd
    786c:	0001ade6 	.word	0x0001ade6
    7870:	200029cc 	.word	0x200029cc

00007874 <disk_ram_init>:

static int disk_ram_init(struct device *dev)
{
	ARG_UNUSED(dev);

	return disk_access_register(&ram_disk);
    7874:	4801      	ldr	r0, [pc, #4]	; (787c <disk_ram_init+0x8>)
    7876:	f7ff bfad 	b.w	77d4 <disk_access_register>
    787a:	bf00      	nop
    787c:	2000c6a0 	.word	0x2000c6a0

00007880 <disk_ram_access_write>:
{
    7880:	b508      	push	{r3, lr}
	return &ramdisk_buf[(lba * RAMDISK_SECTOR_SIZE)];
    7882:	4804      	ldr	r0, [pc, #16]	; (7894 <disk_ram_access_write+0x14>)
    7884:	eb00 2042 	add.w	r0, r0, r2, lsl #9
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    7888:	025a      	lsls	r2, r3, #9
    788a:	f7fa fd77 	bl	237c <memcpy>
}
    788e:	2000      	movs	r0, #0
    7890:	bd08      	pop	{r3, pc}
    7892:	bf00      	nop
    7894:	2000da19 	.word	0x2000da19

00007898 <disk_ram_access_read>:
{
    7898:	b508      	push	{r3, lr}
    789a:	4608      	mov	r0, r1
	return &ramdisk_buf[(lba * RAMDISK_SECTOR_SIZE)];
    789c:	4903      	ldr	r1, [pc, #12]	; (78ac <disk_ram_access_read+0x14>)
    789e:	eb01 2142 	add.w	r1, r1, r2, lsl #9
    78a2:	025a      	lsls	r2, r3, #9
    78a4:	f7fa fd6a 	bl	237c <memcpy>
}
    78a8:	2000      	movs	r0, #0
    78aa:	bd08      	pop	{r3, pc}
    78ac:	2000da19 	.word	0x2000da19

000078b0 <zsock_accepted_cb>:
}
#endif /* CONFIG_USERSPACE */

static void zsock_accepted_cb(struct net_context *new_ctx,
			      struct sockaddr *addr, socklen_t addrlen,
			      int status, void *user_data) {
    78b0:	b538      	push	{r3, r4, r5, lr}
    78b2:	461a      	mov	r2, r3
    78b4:	4604      	mov	r4, r0
    78b6:	9d04      	ldr	r5, [sp, #16]
    78b8:	f00c fdb4 	bl	14424 <z_arch_is_user_context>
	struct net_context *parent = user_data;

	NET_DBG("parent=%p, ctx=%p, st=%d", parent, new_ctx, status);

	if (status == 0) {
    78bc:	b97a      	cbnz	r2, 78de <zsock_accepted_cb+0x2e>
		/* This just installs a callback, so cannot fail. */
		(void)net_context_recv(new_ctx, zsock_received_cb, K_NO_WAIT,
    78be:	4613      	mov	r3, r2
    78c0:	4907      	ldr	r1, [pc, #28]	; (78e0 <zsock_accepted_cb+0x30>)
    78c2:	4620      	mov	r0, r4
    78c4:	f004 f9e4 	bl	bc90 <net_context_recv>
				       NULL);
		k_fifo_init(&new_ctx->recv_q);
    78c8:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    78cc:	f00c fe5c 	bl	14588 <k_queue_init>

		k_fifo_put(&parent->accept_q, new_ctx);
    78d0:	4621      	mov	r1, r4
    78d2:	f105 006c 	add.w	r0, r5, #108	; 0x6c
	}
}
    78d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		k_fifo_put(&parent->accept_q, new_ctx);
    78da:	f010 bdbe 	b.w	1845a <k_queue_append>
}
    78de:	bd38      	pop	{r3, r4, r5, pc}
    78e0:	00014509 	.word	0x00014509

000078e4 <zsock_socket_internal>:
{
    78e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    78e6:	4607      	mov	r7, r0
    78e8:	460e      	mov	r6, r1
    78ea:	4614      	mov	r4, r2
	int fd = z_reserve_fd();
    78ec:	f7fd fbe0 	bl	50b0 <z_reserve_fd>
	if (fd < 0) {
    78f0:	1e05      	subs	r5, r0, #0
    78f2:	db17      	blt.n	7924 <zsock_socket_internal+0x40>
	if (proto == 0) {
    78f4:	b93c      	cbnz	r4, 7906 <zsock_socket_internal+0x22>
		if (family == AF_INET || family == AF_INET6) {
    78f6:	1e7b      	subs	r3, r7, #1
    78f8:	2b01      	cmp	r3, #1
    78fa:	d804      	bhi.n	7906 <zsock_socket_internal+0x22>
			if (type == SOCK_DGRAM) {
    78fc:	2e02      	cmp	r6, #2
    78fe:	d014      	beq.n	792a <zsock_socket_internal+0x46>
			} else if (type == SOCK_STREAM) {
    7900:	2e01      	cmp	r6, #1
				proto = IPPROTO_TCP;
    7902:	bf08      	it	eq
    7904:	2406      	moveq	r4, #6
	res = net_context_get(family, type, proto, &ctx);
    7906:	b2f1      	uxtb	r1, r6
    7908:	ab01      	add	r3, sp, #4
    790a:	b2a2      	uxth	r2, r4
    790c:	b2b8      	uxth	r0, r7
    790e:	f004 f8e3 	bl	bad8 <net_context_get>
	if (res < 0) {
    7912:	1e06      	subs	r6, r0, #0
    7914:	da0b      	bge.n	792e <zsock_socket_internal+0x4a>
		z_free_fd(fd);
    7916:	4628      	mov	r0, r5
    7918:	f7fd fc08 	bl	512c <z_free_fd>
		errno = -res;
    791c:	f00d fb53 	bl	14fc6 <__errno>
    7920:	4276      	negs	r6, r6
    7922:	6006      	str	r6, [r0, #0]
		return -1;
    7924:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    7928:	e017      	b.n	795a <zsock_socket_internal+0x76>
				proto = IPPROTO_UDP;
    792a:	2411      	movs	r4, #17
    792c:	e7eb      	b.n	7906 <zsock_socket_internal+0x22>
	ctx->user_data = NULL;
    792e:	9801      	ldr	r0, [sp, #4]
    7930:	2300      	movs	r3, #0
    7932:	6003      	str	r3, [r0, #0]
	ctx->socket_data = NULL;
    7934:	6683      	str	r3, [r0, #104]	; 0x68
	k_fifo_init(&ctx->recv_q);
    7936:	306c      	adds	r0, #108	; 0x6c
    7938:	f00c fe26 	bl	14588 <k_queue_init>
	z_object_recycle(ctx);
    793c:	9801      	ldr	r0, [sp, #4]
    793e:	f011 f9bf 	bl	18cc0 <z_object_recycle>
	if (proto == IPPROTO_TCP) {
    7942:	2c06      	cmp	r4, #6
    7944:	d102      	bne.n	794c <zsock_socket_internal+0x68>
		net_context_ref(ctx);
    7946:	9801      	ldr	r0, [sp, #4]
    7948:	f00d fc07 	bl	1515a <net_context_ref>
	z_finalize_fd(fd, ctx, (const struct fd_op_vtable *)&sock_fd_op_vtable);
    794c:	4a04      	ldr	r2, [pc, #16]	; (7960 <zsock_socket_internal+0x7c>)
    794e:	9901      	ldr	r1, [sp, #4]
    7950:	4628      	mov	r0, r5
    7952:	f7fd fbe1 	bl	5118 <z_finalize_fd>
    7956:	f00c fd65 	bl	14424 <z_arch_is_user_context>
}
    795a:	4628      	mov	r0, r5
    795c:	b003      	add	sp, #12
    795e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7960:	000192b0 	.word	0x000192b0

00007964 <zsock_bind_ctx>:
	k_fifo_put(&ctx->recv_q, pkt);
}

int zsock_bind_ctx(struct net_context *ctx, const struct sockaddr *addr,
		   socklen_t addrlen)
{
    7964:	b538      	push	{r3, r4, r5, lr}
    7966:	4604      	mov	r4, r0
	SET_ERRNO(net_context_bind(ctx, addr, addrlen));
    7968:	f00d fc2f 	bl	151ca <net_context_bind>
    796c:	1e05      	subs	r5, r0, #0
    796e:	da06      	bge.n	797e <zsock_bind_ctx+0x1a>
    7970:	f00d fb29 	bl	14fc6 <__errno>
    7974:	426d      	negs	r5, r5
    7976:	6005      	str	r5, [r0, #0]
	/* For DGRAM socket, we expect to receive packets after call to
	 * bind(), but for STREAM socket, next expected operation is
	 * listen(), which doesn't work if recv callback is set.
	 */
	if (net_context_get_type(ctx) == SOCK_DGRAM) {
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
    7978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    797c:	e006      	b.n	798c <zsock_bind_ctx+0x28>
static inline
enum net_sock_type net_context_get_type(struct net_context *context)
{
	NET_ASSERT(context);

	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
    797e:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    7982:	f3c3 1381 	ubfx	r3, r3, #6, #2
	if (net_context_get_type(ctx) == SOCK_DGRAM) {
    7986:	2b02      	cmp	r3, #2
    7988:	d001      	beq.n	798e <zsock_bind_ctx+0x2a>
					   ctx->user_data));
	}

	return 0;
    798a:	2000      	movs	r0, #0
}
    798c:	bd38      	pop	{r3, r4, r5, pc}
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
    798e:	6823      	ldr	r3, [r4, #0]
    7990:	4905      	ldr	r1, [pc, #20]	; (79a8 <zsock_bind_ctx+0x44>)
    7992:	4620      	mov	r0, r4
    7994:	2200      	movs	r2, #0
    7996:	f004 f97b 	bl	bc90 <net_context_recv>
    799a:	1e04      	subs	r4, r0, #0
    799c:	daf5      	bge.n	798a <zsock_bind_ctx+0x26>
    799e:	f00d fb12 	bl	14fc6 <__errno>
    79a2:	4264      	negs	r4, r4
    79a4:	6004      	str	r4, [r0, #0]
    79a6:	e7e7      	b.n	7978 <zsock_bind_ctx+0x14>
    79a8:	00014509 	.word	0x00014509

000079ac <z_hdlr_zsock_bind>:
	VTABLE_CALL(bind, sock, addr, addrlen);
}

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER(zsock_bind, sock, addr, addrlen)
{
    79ac:	b530      	push	{r4, r5, lr}
	struct sockaddr_storage dest_addr_copy;

	Z_OOPS(Z_SYSCALL_VERIFY(addrlen <= sizeof(dest_addr_copy)));
    79ae:	2a18      	cmp	r2, #24
{
    79b0:	b087      	sub	sp, #28
    79b2:	4605      	mov	r5, r0
    79b4:	4614      	mov	r4, r2
	Z_OOPS(Z_SYSCALL_VERIFY(addrlen <= sizeof(dest_addr_copy)));
    79b6:	d906      	bls.n	79c6 <z_hdlr_zsock_bind+0x1a>
    79b8:	4909      	ldr	r1, [pc, #36]	; (79e0 <z_hdlr_zsock_bind+0x34>)
    79ba:	480a      	ldr	r0, [pc, #40]	; (79e4 <z_hdlr_zsock_bind+0x38>)
    79bc:	f00b fd5f 	bl	1347e <printk>
	Z_OOPS(z_user_from_copy(&dest_addr_copy, (void *)addr, addrlen));
    79c0:	980c      	ldr	r0, [sp, #48]	; 0x30
    79c2:	f00d fab0 	bl	14f26 <z_arch_syscall_oops>
    79c6:	4668      	mov	r0, sp
    79c8:	f011 f995 	bl	18cf6 <z_user_from_copy>
    79cc:	2800      	cmp	r0, #0
    79ce:	d1f7      	bne.n	79c0 <z_hdlr_zsock_bind+0x14>

	return z_impl_zsock_bind(sock, (struct sockaddr *)&dest_addr_copy,
    79d0:	4622      	mov	r2, r4
    79d2:	4669      	mov	r1, sp
    79d4:	4628      	mov	r0, r5
    79d6:	f00c febd 	bl	14754 <z_impl_zsock_bind>
				addrlen);
}
    79da:	b007      	add	sp, #28
    79dc:	bd30      	pop	{r4, r5, pc}
    79de:	bf00      	nop
    79e0:	0001ae13 	.word	0x0001ae13
    79e4:	0001ae78 	.word	0x0001ae78

000079e8 <zsock_connect_ctx>:
#endif /* CONFIG_USERSPACE */

int zsock_connect_ctx(struct net_context *ctx, const struct sockaddr *addr,
		      socklen_t addrlen)
{
    79e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	SET_ERRNO(net_context_connect(ctx, addr, addrlen, NULL,
    79ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
    79ee:	2400      	movs	r4, #0
    79f0:	e9cd 3400 	strd	r3, r4, [sp]
    79f4:	4623      	mov	r3, r4
{
    79f6:	4606      	mov	r6, r0
	SET_ERRNO(net_context_connect(ctx, addr, addrlen, NULL,
    79f8:	f00d fd30 	bl	1545c <net_context_connect>
    79fc:	1e05      	subs	r5, r0, #0
    79fe:	da07      	bge.n	7a10 <zsock_connect_ctx+0x28>
			      K_MSEC(CONFIG_NET_SOCKETS_CONNECT_TIMEOUT),
			      NULL));
	SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
    7a00:	f00d fae1 	bl	14fc6 <__errno>
    7a04:	426d      	negs	r5, r5
    7a06:	6005      	str	r5, [r0, #0]
    7a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
				   ctx->user_data));

	return 0;
}
    7a0c:	b002      	add	sp, #8
    7a0e:	bd70      	pop	{r4, r5, r6, pc}
	SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
    7a10:	6833      	ldr	r3, [r6, #0]
    7a12:	4904      	ldr	r1, [pc, #16]	; (7a24 <zsock_connect_ctx+0x3c>)
    7a14:	4622      	mov	r2, r4
    7a16:	4630      	mov	r0, r6
    7a18:	f004 f93a 	bl	bc90 <net_context_recv>
    7a1c:	1e05      	subs	r5, r0, #0
    7a1e:	dbef      	blt.n	7a00 <zsock_connect_ctx+0x18>
	return 0;
    7a20:	4620      	mov	r0, r4
    7a22:	e7f3      	b.n	7a0c <zsock_connect_ctx+0x24>
    7a24:	00014509 	.word	0x00014509

00007a28 <z_hdlr_zsock_connect>:
	VTABLE_CALL(connect, sock, addr, addrlen);
}

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER(zsock_connect, sock, addr, addrlen)
{
    7a28:	b530      	push	{r4, r5, lr}
	struct sockaddr_storage dest_addr_copy;

	Z_OOPS(Z_SYSCALL_VERIFY(addrlen <= sizeof(dest_addr_copy)));
    7a2a:	2a18      	cmp	r2, #24
{
    7a2c:	b087      	sub	sp, #28
    7a2e:	4605      	mov	r5, r0
    7a30:	4614      	mov	r4, r2
	Z_OOPS(Z_SYSCALL_VERIFY(addrlen <= sizeof(dest_addr_copy)));
    7a32:	d906      	bls.n	7a42 <z_hdlr_zsock_connect+0x1a>
    7a34:	4909      	ldr	r1, [pc, #36]	; (7a5c <z_hdlr_zsock_connect+0x34>)
    7a36:	480a      	ldr	r0, [pc, #40]	; (7a60 <z_hdlr_zsock_connect+0x38>)
    7a38:	f00b fd21 	bl	1347e <printk>
	Z_OOPS(z_user_from_copy(&dest_addr_copy, (void *)addr, addrlen));
    7a3c:	980c      	ldr	r0, [sp, #48]	; 0x30
    7a3e:	f00d fa72 	bl	14f26 <z_arch_syscall_oops>
    7a42:	4668      	mov	r0, sp
    7a44:	f011 f957 	bl	18cf6 <z_user_from_copy>
    7a48:	2800      	cmp	r0, #0
    7a4a:	d1f7      	bne.n	7a3c <z_hdlr_zsock_connect+0x14>

	return z_impl_zsock_connect(sock, (struct sockaddr *)&dest_addr_copy,
    7a4c:	4622      	mov	r2, r4
    7a4e:	4669      	mov	r1, sp
    7a50:	4628      	mov	r0, r5
    7a52:	f00c fe93 	bl	1477c <z_impl_zsock_connect>
				   addrlen);
}
    7a56:	b007      	add	sp, #28
    7a58:	bd30      	pop	{r4, r5, pc}
    7a5a:	bf00      	nop
    7a5c:	0001ae25 	.word	0x0001ae25
    7a60:	0001ae78 	.word	0x0001ae78

00007a64 <zsock_listen_ctx>:
#endif /* CONFIG_USERSPACE */

int zsock_listen_ctx(struct net_context *ctx, int backlog)
{
    7a64:	b538      	push	{r3, r4, r5, lr}
    7a66:	4605      	mov	r5, r0
	SET_ERRNO(net_context_listen(ctx, backlog));
    7a68:	f00d fc31 	bl	152ce <net_context_listen>
    7a6c:	1e04      	subs	r4, r0, #0
    7a6e:	da06      	bge.n	7a7e <zsock_listen_ctx+0x1a>
	SET_ERRNO(net_context_accept(ctx, zsock_accepted_cb, K_NO_WAIT, ctx));
    7a70:	f00d faa9 	bl	14fc6 <__errno>
    7a74:	4264      	negs	r4, r4
    7a76:	6004      	str	r4, [r0, #0]
    7a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

	return 0;
}
    7a7c:	bd38      	pop	{r3, r4, r5, pc}
	SET_ERRNO(net_context_accept(ctx, zsock_accepted_cb, K_NO_WAIT, ctx));
    7a7e:	462b      	mov	r3, r5
    7a80:	2200      	movs	r2, #0
    7a82:	4904      	ldr	r1, [pc, #16]	; (7a94 <zsock_listen_ctx+0x30>)
    7a84:	4628      	mov	r0, r5
    7a86:	f00d fd5b 	bl	15540 <net_context_accept>
    7a8a:	1e04      	subs	r4, r0, #0
    7a8c:	dbf0      	blt.n	7a70 <zsock_listen_ctx+0xc>
	return 0;
    7a8e:	2000      	movs	r0, #0
    7a90:	e7f4      	b.n	7a7c <zsock_listen_ctx+0x18>
    7a92:	bf00      	nop
    7a94:	000078b1 	.word	0x000078b1

00007a98 <zsock_accept_ctx>:
}
#endif /* CONFIG_USERSPACE */

int zsock_accept_ctx(struct net_context *parent, struct sockaddr *addr,
		     socklen_t *addrlen)
{
    7a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7a9a:	4605      	mov	r5, r0
    7a9c:	460f      	mov	r7, r1
    7a9e:	4616      	mov	r6, r2
	int fd;

	fd = z_reserve_fd();
    7aa0:	f7fd fb06 	bl	50b0 <z_reserve_fd>
	if (fd < 0) {
    7aa4:	1e04      	subs	r4, r0, #0
    7aa6:	db36      	blt.n	7b16 <zsock_accept_ctx+0x7e>
		return -1;
	}

	if (net_context_get_ip_proto(parent) == IPPROTO_TCP) {
    7aa8:	f8b5 307c 	ldrh.w	r3, [r5, #124]	; 0x7c
    7aac:	2b06      	cmp	r3, #6
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
    7aae:	bf02      	ittt	eq
    7ab0:	f8b5 307e 	ldrheq.w	r3, [r5, #126]	; 0x7e
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
    7ab4:	f043 0306 	orreq.w	r3, r3, #6
    7ab8:	f8a5 307e 	strheq.w	r3, [r5, #126]	; 0x7e
		net_context_set_state(parent, NET_CONTEXT_LISTENING);
	}

	struct net_context *ctx = k_fifo_get(&parent->accept_q, K_FOREVER);
    7abc:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    7ac0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7ac4:	f00c fcd7 	bl	14476 <k_queue_get>
    7ac8:	4605      	mov	r5, r0

#ifdef CONFIG_USERSPACE
	z_object_recycle(ctx);
    7aca:	f011 f8f9 	bl	18cc0 <z_object_recycle>
#endif

	if (addr != NULL && addrlen != NULL) {
    7ace:	b177      	cbz	r7, 7aee <zsock_accept_ctx+0x56>
    7ad0:	b16e      	cbz	r6, 7aee <zsock_accept_ctx+0x56>
		int len = MIN(*addrlen, sizeof(ctx->remote));
    7ad2:	6832      	ldr	r2, [r6, #0]
    7ad4:	2a18      	cmp	r2, #24
    7ad6:	bf28      	it	cs
    7ad8:	2218      	movcs	r2, #24
    7ada:	f105 0128 	add.w	r1, r5, #40	; 0x28
    7ade:	4638      	mov	r0, r7
    7ae0:	f7fa fc4c 	bl	237c <memcpy>

		memcpy(addr, &ctx->remote, len);
		/* addrlen is a value-result argument, set to actual
		 * size of source address
		 */
		if (ctx->remote.sa_family == AF_INET) {
    7ae4:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    7ae6:	2b01      	cmp	r3, #1
    7ae8:	d10d      	bne.n	7b06 <zsock_accept_ctx+0x6e>
			*addrlen = sizeof(struct sockaddr_in);
    7aea:	2308      	movs	r3, #8
		} else if (ctx->remote.sa_family == AF_INET6) {
			*addrlen = sizeof(struct sockaddr_in6);
    7aec:	6033      	str	r3, [r6, #0]
	 * connection, but it must not dispose of the context behind
	 * the application back. Likewise, when application "closes"
	 * context, it's not disposed of immediately - there's yet
	 * closing handshake for stack to perform.
	 */
	net_context_ref(ctx);
    7aee:	4628      	mov	r0, r5
    7af0:	f00d fb33 	bl	1515a <net_context_ref>
    7af4:	f00c fc96 	bl	14424 <z_arch_is_user_context>

	NET_DBG("accept: ctx=%p, fd=%d", ctx, fd);

	z_finalize_fd(fd, ctx, (const struct fd_op_vtable *)&sock_fd_op_vtable);
    7af8:	4a08      	ldr	r2, [pc, #32]	; (7b1c <zsock_accept_ctx+0x84>)
    7afa:	4629      	mov	r1, r5
    7afc:	4620      	mov	r0, r4
    7afe:	f7fd fb0b 	bl	5118 <z_finalize_fd>

	return fd;
}
    7b02:	4620      	mov	r0, r4
    7b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		} else if (ctx->remote.sa_family == AF_INET6) {
    7b06:	2b02      	cmp	r3, #2
    7b08:	d101      	bne.n	7b0e <zsock_accept_ctx+0x76>
			*addrlen = sizeof(struct sockaddr_in6);
    7b0a:	2318      	movs	r3, #24
    7b0c:	e7ee      	b.n	7aec <zsock_accept_ctx+0x54>
			errno = ENOTSUP;
    7b0e:	f00d fa5a 	bl	14fc6 <__errno>
    7b12:	2386      	movs	r3, #134	; 0x86
    7b14:	6003      	str	r3, [r0, #0]
		return -1;
    7b16:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    7b1a:	e7f2      	b.n	7b02 <zsock_accept_ctx+0x6a>
    7b1c:	000192b0 	.word	0x000192b0

00007b20 <z_hdlr_zsock_accept>:
	VTABLE_CALL(accept, sock, addr, addrlen);
}

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER(zsock_accept, sock, addr, addrlen)
{
    7b20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7b22:	4615      	mov	r5, r2
    7b24:	4606      	mov	r6, r0
    7b26:	460c      	mov	r4, r1
	socklen_t addrlen_copy;
	int ret;

	Z_OOPS(z_user_from_copy(&addrlen_copy, (void *)addrlen,
    7b28:	2204      	movs	r2, #4
    7b2a:	4629      	mov	r1, r5
    7b2c:	a803      	add	r0, sp, #12
    7b2e:	f011 f8e2 	bl	18cf6 <z_user_from_copy>
    7b32:	b110      	cbz	r0, 7b3a <z_hdlr_zsock_accept+0x1a>
    7b34:	980a      	ldr	r0, [sp, #40]	; 0x28
    7b36:	f00d f9f6 	bl	14f26 <z_arch_syscall_oops>
			     sizeof(socklen_t)));

	if (Z_SYSCALL_MEMORY_WRITE(addr, addrlen_copy)) {
    7b3a:	2201      	movs	r2, #1
    7b3c:	9903      	ldr	r1, [sp, #12]
    7b3e:	4620      	mov	r0, r4
    7b40:	f00d fa18 	bl	14f74 <z_arch_buffer_validate>
    7b44:	b188      	cbz	r0, 7b6a <z_hdlr_zsock_accept+0x4a>
    7b46:	4b12      	ldr	r3, [pc, #72]	; (7b90 <z_hdlr_zsock_accept+0x70>)
    7b48:	9300      	str	r3, [sp, #0]
    7b4a:	4622      	mov	r2, r4
    7b4c:	9b03      	ldr	r3, [sp, #12]
    7b4e:	4911      	ldr	r1, [pc, #68]	; (7b94 <z_hdlr_zsock_accept+0x74>)
    7b50:	4811      	ldr	r0, [pc, #68]	; (7b98 <z_hdlr_zsock_accept+0x78>)
    7b52:	f00b fc94 	bl	1347e <printk>
		errno = EFAULT;
    7b56:	f00d fa36 	bl	14fc6 <__errno>
    7b5a:	230e      	movs	r3, #14
	ret = z_impl_zsock_accept(sock, (struct sockaddr *)addr, &addrlen_copy);

	if (ret >= 0 &&
	    z_user_to_copy((void *)addrlen, &addrlen_copy,
			   sizeof(socklen_t))) {
		errno = EINVAL;
    7b5c:	6003      	str	r3, [r0, #0]
		return -1;
    7b5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
    7b62:	b004      	add	sp, #16
    7b64:	bd70      	pop	{r4, r5, r6, pc}
	return ret;
    7b66:	4620      	mov	r0, r4
    7b68:	e7fb      	b.n	7b62 <z_hdlr_zsock_accept+0x42>
	ret = z_impl_zsock_accept(sock, (struct sockaddr *)addr, &addrlen_copy);
    7b6a:	4621      	mov	r1, r4
    7b6c:	aa03      	add	r2, sp, #12
    7b6e:	4630      	mov	r0, r6
    7b70:	f00c fe2c 	bl	147cc <z_impl_zsock_accept>
	if (ret >= 0 &&
    7b74:	1e04      	subs	r4, r0, #0
    7b76:	dbf6      	blt.n	7b66 <z_hdlr_zsock_accept+0x46>
	    z_user_to_copy((void *)addrlen, &addrlen_copy,
    7b78:	2204      	movs	r2, #4
    7b7a:	a903      	add	r1, sp, #12
    7b7c:	4628      	mov	r0, r5
    7b7e:	f011 f8bd 	bl	18cfc <z_user_to_copy>
	if (ret >= 0 &&
    7b82:	2800      	cmp	r0, #0
    7b84:	d0ef      	beq.n	7b66 <z_hdlr_zsock_accept+0x46>
		errno = EINVAL;
    7b86:	f00d fa1e 	bl	14fc6 <__errno>
    7b8a:	2316      	movs	r3, #22
    7b8c:	e7e6      	b.n	7b5c <z_hdlr_zsock_accept+0x3c>
    7b8e:	bf00      	nop
    7b90:	0001a21f 	.word	0x0001a21f
    7b94:	0001ae3a 	.word	0x0001ae3a
    7b98:	0001a1c4 	.word	0x0001a1c4

00007b9c <zsock_sendto_ctx>:
#endif /* CONFIG_USERSPACE */

ssize_t zsock_sendto_ctx(struct net_context *ctx, const void *buf, size_t len,
			 int flags,
			 const struct sockaddr *dest_addr, socklen_t addrlen)
{
    7b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	s32_t timeout = K_FOREVER;
	int status;

	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
    7ba0:	065b      	lsls	r3, r3, #25
    7ba2:	bf58      	it	pl
    7ba4:	6e84      	ldrpl	r4, [r0, #104]	; 0x68
	}

	/* Register the callback before sending in order to receive the response
	 * from the peer.
	 */
	status = net_context_recv(ctx, zsock_received_cb,
    7ba6:	6803      	ldr	r3, [r0, #0]
{
    7ba8:	b085      	sub	sp, #20
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
    7baa:	bf58      	it	pl
    7bac:	f084 0402 	eorpl.w	r4, r4, #2
{
    7bb0:	4688      	mov	r8, r1
    7bb2:	4691      	mov	r9, r2
	status = net_context_recv(ctx, zsock_received_cb,
    7bb4:	491a      	ldr	r1, [pc, #104]	; (7c20 <zsock_sendto_ctx+0x84>)
{
    7bb6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	status = net_context_recv(ctx, zsock_received_cb,
    7bb8:	f04f 0200 	mov.w	r2, #0
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
    7bbc:	bf54      	ite	pl
    7bbe:	f344 0440 	sbfxpl	r4, r4, #1, #1
		timeout = K_NO_WAIT;
    7bc2:	2400      	movmi	r4, #0
{
    7bc4:	4605      	mov	r5, r0
	status = net_context_recv(ctx, zsock_received_cb,
    7bc6:	f004 f863 	bl	bc90 <net_context_recv>
				  K_NO_WAIT, ctx->user_data);
	if (status < 0) {
    7bca:	1e07      	subs	r7, r0, #0
    7bcc:	da09      	bge.n	7be2 <zsock_sendto_ctx+0x46>
		errno = -status;
    7bce:	f00d f9fa 	bl	14fc6 <__errno>
    7bd2:	427f      	negs	r7, r7
    7bd4:	6007      	str	r7, [r0, #0]
					  ctx->user_data);
	}

	if (status < 0) {
		errno = -status;
		return -1;
    7bd6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	}

	return status;
}
    7bda:	4620      	mov	r0, r4
    7bdc:	b005      	add	sp, #20
    7bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (dest_addr) {
    7be2:	682b      	ldr	r3, [r5, #0]
    7be4:	b19e      	cbz	r6, 7c0e <zsock_sendto_ctx+0x72>
		status = net_context_sendto(ctx, buf, len, dest_addr,
    7be6:	e9cd 4302 	strd	r4, r3, [sp, #8]
    7bea:	2300      	movs	r3, #0
    7bec:	9301      	str	r3, [sp, #4]
    7bee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7bf0:	9300      	str	r3, [sp, #0]
    7bf2:	464a      	mov	r2, r9
    7bf4:	4633      	mov	r3, r6
    7bf6:	4641      	mov	r1, r8
    7bf8:	4628      	mov	r0, r5
    7bfa:	f00d fcf7 	bl	155ec <net_context_sendto>
	if (status < 0) {
    7bfe:	2800      	cmp	r0, #0
		status = net_context_send(ctx, buf, len, NULL, timeout,
    7c00:	4604      	mov	r4, r0
	if (status < 0) {
    7c02:	daea      	bge.n	7bda <zsock_sendto_ctx+0x3e>
		errno = -status;
    7c04:	f00d f9df 	bl	14fc6 <__errno>
    7c08:	4264      	negs	r4, r4
    7c0a:	6004      	str	r4, [r0, #0]
    7c0c:	e7e3      	b.n	7bd6 <zsock_sendto_ctx+0x3a>
		status = net_context_send(ctx, buf, len, NULL, timeout,
    7c0e:	e9cd 4300 	strd	r4, r3, [sp]
    7c12:	464a      	mov	r2, r9
    7c14:	4633      	mov	r3, r6
    7c16:	4641      	mov	r1, r8
    7c18:	4628      	mov	r0, r5
    7c1a:	f00d fcba 	bl	15592 <net_context_send>
    7c1e:	e7ee      	b.n	7bfe <zsock_sendto_ctx+0x62>
    7c20:	00014509 	.word	0x00014509

00007c24 <z_hdlr_zsock_sendto>:
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
}

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER(zsock_sendto, sock, buf, len, flags, dest_addr, addrlen)
{
    7c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7c28:	460d      	mov	r5, r1
    7c2a:	4616      	mov	r6, r2
    7c2c:	b089      	sub	sp, #36	; 0x24
    7c2e:	4680      	mov	r8, r0
	struct sockaddr_storage dest_addr_copy;

	Z_OOPS(Z_SYSCALL_MEMORY_READ(buf, len));
    7c30:	2200      	movs	r2, #0
    7c32:	4631      	mov	r1, r6
    7c34:	4628      	mov	r0, r5
{
    7c36:	4699      	mov	r9, r3
    7c38:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
	Z_OOPS(Z_SYSCALL_MEMORY_READ(buf, len));
    7c3c:	f00d f99a 	bl	14f74 <z_arch_buffer_validate>
    7c40:	b1e8      	cbz	r0, 7c7e <z_hdlr_zsock_sendto+0x5a>
    7c42:	4b13      	ldr	r3, [pc, #76]	; (7c90 <z_hdlr_zsock_sendto+0x6c>)
    7c44:	9300      	str	r3, [sp, #0]
    7c46:	462a      	mov	r2, r5
    7c48:	4633      	mov	r3, r6
    7c4a:	4912      	ldr	r1, [pc, #72]	; (7c94 <z_hdlr_zsock_sendto+0x70>)
    7c4c:	4812      	ldr	r0, [pc, #72]	; (7c98 <z_hdlr_zsock_sendto+0x74>)
    7c4e:	f00b fc16 	bl	1347e <printk>
	if (dest_addr) {
		Z_OOPS(Z_SYSCALL_VERIFY(addrlen <= sizeof(dest_addr_copy)));
    7c52:	9812      	ldr	r0, [sp, #72]	; 0x48
    7c54:	f00d f967 	bl	14f26 <z_arch_syscall_oops>
		Z_OOPS(z_user_from_copy(&dest_addr_copy, (void *)dest_addr,
    7c58:	463a      	mov	r2, r7
    7c5a:	4621      	mov	r1, r4
    7c5c:	a802      	add	r0, sp, #8
    7c5e:	f011 f84a 	bl	18cf6 <z_user_from_copy>
    7c62:	2800      	cmp	r0, #0
    7c64:	d1f5      	bne.n	7c52 <z_hdlr_zsock_sendto+0x2e>
					addrlen));
	}

	return z_impl_zsock_sendto(sock, (const void *)buf, len, flags,
    7c66:	ac02      	add	r4, sp, #8
    7c68:	e9cd 4700 	strd	r4, r7, [sp]
    7c6c:	464b      	mov	r3, r9
    7c6e:	4632      	mov	r2, r6
    7c70:	4629      	mov	r1, r5
    7c72:	4640      	mov	r0, r8
    7c74:	f00c fdc7 	bl	14806 <z_impl_zsock_sendto>
			dest_addr ? (struct sockaddr *)&dest_addr_copy : NULL,
			addrlen);
}
    7c78:	b009      	add	sp, #36	; 0x24
    7c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (dest_addr) {
    7c7e:	2c00      	cmp	r4, #0
    7c80:	d0f2      	beq.n	7c68 <z_hdlr_zsock_sendto+0x44>
		Z_OOPS(Z_SYSCALL_VERIFY(addrlen <= sizeof(dest_addr_copy)));
    7c82:	2f18      	cmp	r7, #24
    7c84:	d9e8      	bls.n	7c58 <z_hdlr_zsock_sendto+0x34>
    7c86:	4903      	ldr	r1, [pc, #12]	; (7c94 <z_hdlr_zsock_sendto+0x70>)
    7c88:	4804      	ldr	r0, [pc, #16]	; (7c9c <z_hdlr_zsock_sendto+0x78>)
    7c8a:	f00b fbf8 	bl	1347e <printk>
    7c8e:	e7e0      	b.n	7c52 <z_hdlr_zsock_sendto+0x2e>
    7c90:	0001b8ef 	.word	0x0001b8ef
    7c94:	0001ae4e 	.word	0x0001ae4e
    7c98:	0001a1c4 	.word	0x0001a1c4
    7c9c:	0001ae78 	.word	0x0001ae78

00007ca0 <z_hdlr_zsock_recvfrom>:
}

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER(zsock_recvfrom, sock, buf, max_len, flags, src_addr,
		  addrlen_param)
{
    7ca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7ca4:	460e      	mov	r6, r1
    7ca6:	4617      	mov	r7, r2
    7ca8:	b085      	sub	sp, #20
    7caa:	4680      	mov	r8, r0
	socklen_t addrlen_copy;
	socklen_t *addrlen_ptr = (socklen_t *)addrlen_param;
	ssize_t ret;

	if (Z_SYSCALL_MEMORY_WRITE(buf, max_len)) {
    7cac:	2201      	movs	r2, #1
    7cae:	4639      	mov	r1, r7
    7cb0:	4630      	mov	r0, r6
{
    7cb2:	4699      	mov	r9, r3
    7cb4:	e9dd 540c 	ldrd	r5, r4, [sp, #48]	; 0x30
	if (Z_SYSCALL_MEMORY_WRITE(buf, max_len)) {
    7cb8:	f00d f95c 	bl	14f74 <z_arch_buffer_validate>
    7cbc:	2800      	cmp	r0, #0
    7cbe:	d036      	beq.n	7d2e <z_hdlr_zsock_recvfrom+0x8e>
    7cc0:	4b21      	ldr	r3, [pc, #132]	; (7d48 <z_hdlr_zsock_recvfrom+0xa8>)
    7cc2:	9300      	str	r3, [sp, #0]
    7cc4:	4632      	mov	r2, r6
    7cc6:	463b      	mov	r3, r7
    7cc8:	4920      	ldr	r1, [pc, #128]	; (7d4c <z_hdlr_zsock_recvfrom+0xac>)
    7cca:	4821      	ldr	r0, [pc, #132]	; (7d50 <z_hdlr_zsock_recvfrom+0xb0>)
    7ccc:	f00b fbd7 	bl	1347e <printk>
		errno = EFAULT;
    7cd0:	f00d f979 	bl	14fc6 <__errno>
    7cd4:	230e      	movs	r3, #14
    7cd6:	6003      	str	r3, [r0, #0]
		return -1;
    7cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		Z_OOPS(z_user_to_copy(addrlen_ptr, &addrlen_copy,
				      sizeof(socklen_t)));
	}

	return ret;
}
    7cdc:	b005      	add	sp, #20
    7cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_OOPS(src_addr && Z_SYSCALL_MEMORY_WRITE(src_addr, addrlen_copy));
    7ce2:	b175      	cbz	r5, 7d02 <z_hdlr_zsock_recvfrom+0x62>
    7ce4:	2201      	movs	r2, #1
    7ce6:	9903      	ldr	r1, [sp, #12]
    7ce8:	4628      	mov	r0, r5
    7cea:	f00d f943 	bl	14f74 <z_arch_buffer_validate>
    7cee:	b140      	cbz	r0, 7d02 <z_hdlr_zsock_recvfrom+0x62>
    7cf0:	4b15      	ldr	r3, [pc, #84]	; (7d48 <z_hdlr_zsock_recvfrom+0xa8>)
    7cf2:	9300      	str	r3, [sp, #0]
    7cf4:	462a      	mov	r2, r5
    7cf6:	9b03      	ldr	r3, [sp, #12]
    7cf8:	4914      	ldr	r1, [pc, #80]	; (7d4c <z_hdlr_zsock_recvfrom+0xac>)
    7cfa:	4815      	ldr	r0, [pc, #84]	; (7d50 <z_hdlr_zsock_recvfrom+0xb0>)
    7cfc:	f00b fbbf 	bl	1347e <printk>
    7d00:	e01e      	b.n	7d40 <z_hdlr_zsock_recvfrom+0xa0>
	ret = z_impl_zsock_recvfrom(sock, (void *)buf, max_len, flags,
    7d02:	b994      	cbnz	r4, 7d2a <z_hdlr_zsock_recvfrom+0x8a>
    7d04:	4623      	mov	r3, r4
    7d06:	e9cd 5300 	strd	r5, r3, [sp]
    7d0a:	463a      	mov	r2, r7
    7d0c:	464b      	mov	r3, r9
    7d0e:	4631      	mov	r1, r6
    7d10:	4640      	mov	r0, r8
    7d12:	f00c ff02 	bl	14b1a <z_impl_zsock_recvfrom>
    7d16:	4605      	mov	r5, r0
	if (addrlen_param) {
    7d18:	b12c      	cbz	r4, 7d26 <z_hdlr_zsock_recvfrom+0x86>
		Z_OOPS(z_user_to_copy(addrlen_ptr, &addrlen_copy,
    7d1a:	2204      	movs	r2, #4
    7d1c:	a903      	add	r1, sp, #12
    7d1e:	4620      	mov	r0, r4
    7d20:	f010 ffec 	bl	18cfc <z_user_to_copy>
    7d24:	b960      	cbnz	r0, 7d40 <z_hdlr_zsock_recvfrom+0xa0>
	return ret;
    7d26:	4628      	mov	r0, r5
    7d28:	e7d8      	b.n	7cdc <z_hdlr_zsock_recvfrom+0x3c>
	ret = z_impl_zsock_recvfrom(sock, (void *)buf, max_len, flags,
    7d2a:	ab03      	add	r3, sp, #12
    7d2c:	e7eb      	b.n	7d06 <z_hdlr_zsock_recvfrom+0x66>
	if (addrlen_param) {
    7d2e:	2c00      	cmp	r4, #0
    7d30:	d0d7      	beq.n	7ce2 <z_hdlr_zsock_recvfrom+0x42>
		Z_OOPS(z_user_from_copy(&addrlen_copy,
    7d32:	2204      	movs	r2, #4
    7d34:	4621      	mov	r1, r4
    7d36:	a803      	add	r0, sp, #12
    7d38:	f010 ffdd 	bl	18cf6 <z_user_from_copy>
    7d3c:	2800      	cmp	r0, #0
    7d3e:	d0d0      	beq.n	7ce2 <z_hdlr_zsock_recvfrom+0x42>
	Z_OOPS(src_addr && Z_SYSCALL_MEMORY_WRITE(src_addr, addrlen_copy));
    7d40:	980e      	ldr	r0, [sp, #56]	; 0x38
    7d42:	f00d f8f0 	bl	14f26 <z_arch_syscall_oops>
    7d46:	bf00      	nop
    7d48:	0001a21f 	.word	0x0001a21f
    7d4c:	0001ae62 	.word	0x0001ae62
    7d50:	0001a1c4 	.word	0x0001a1c4

00007d54 <z_impl_zsock_poll>:

	return timeout - elapsed;
}

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int timeout)
{
    7d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d58:	b09d      	sub	sp, #116	; 0x74
    7d5a:	468b      	mov	fp, r1
    7d5c:	4616      	mov	r6, r2
    7d5e:	9003      	str	r0, [sp, #12]
 *
 * @return The low 32 bits of the current uptime, in milliseconds.
 */
static inline u32_t k_uptime_get_32(void)
{
	return (u32_t)k_uptime_get();
    7d60:	f00c fbc2 	bl	144e8 <k_uptime_get>

	if (timeout < 0) {
		timeout = K_FOREVER;
	}

	pev = poll_events;
    7d64:	f10d 0920 	add.w	r9, sp, #32
	for (pfd = fds, i = nfds; i--; pfd++) {
    7d68:	9d03      	ldr	r5, [sp, #12]
    7d6a:	9004      	str	r0, [sp, #16]
	if (timeout < 0) {
    7d6c:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
	pev = poll_events;
    7d70:	f8cd 9018 	str.w	r9, [sp, #24]
	for (pfd = fds, i = nfds; i--; pfd++) {
    7d74:	465c      	mov	r4, fp
		if (ctx == NULL) {
			/* Will set POLLNVAL in return loop */
			continue;
		}

		if (z_fdtable_call_ioctl(vtable, ctx, ZFD_IOCTL_POLL_PREPARE,
    7d76:	af06      	add	r7, sp, #24
	for (pfd = fds, i = nfds; i--; pfd++) {
    7d78:	b9e4      	cbnz	r4, 7db4 <z_impl_zsock_poll+0x60>
    7d7a:	46b0      	mov	r8, r6

		pev = poll_events;
		for (pfd = fds, i = nfds; i--; pfd++) {
			struct net_context *ctx;

			pfd->revents = 0;
    7d7c:	9405      	str	r4, [sp, #20]
		ret = k_poll(poll_events, pev - poll_events, remaining_time);
    7d7e:	9906      	ldr	r1, [sp, #24]
    7d80:	4b3e      	ldr	r3, [pc, #248]	; (7e7c <z_impl_zsock_poll+0x128>)
    7d82:	eba1 0109 	sub.w	r1, r1, r9
    7d86:	1089      	asrs	r1, r1, #2
    7d88:	4359      	muls	r1, r3
    7d8a:	4642      	mov	r2, r8
    7d8c:	4648      	mov	r0, r9
    7d8e:	f00c fb82 	bl	14496 <k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
    7d92:	f100 030b 	add.w	r3, r0, #11
    7d96:	2b0b      	cmp	r3, #11
		ret = k_poll(poll_events, pev - poll_events, remaining_time);
    7d98:	4605      	mov	r5, r0
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
    7d9a:	d806      	bhi.n	7daa <z_impl_zsock_poll+0x56>
    7d9c:	f640 0481 	movw	r4, #2177	; 0x881
    7da0:	40dc      	lsrs	r4, r3
    7da2:	43e4      	mvns	r4, r4
    7da4:	f014 0401 	ands.w	r4, r4, #1
    7da8:	d026      	beq.n	7df8 <z_impl_zsock_poll+0xa4>
			errno = -ret;
    7daa:	f00d f90c 	bl	14fc6 <__errno>
    7dae:	426d      	negs	r5, r5
    7db0:	6005      	str	r5, [r0, #0]
    7db2:	e017      	b.n	7de4 <z_impl_zsock_poll+0x90>
		if (pfd->fd < 0) {
    7db4:	6828      	ldr	r0, [r5, #0]
    7db6:	2800      	cmp	r0, #0
    7db8:	db1b      	blt.n	7df2 <z_impl_zsock_poll+0x9e>
		ctx = z_get_fd_obj_and_vtable(pfd->fd, &vtable);
    7dba:	a907      	add	r1, sp, #28
    7dbc:	f7fd f964 	bl	5088 <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
    7dc0:	4601      	mov	r1, r0
    7dc2:	b1b0      	cbz	r0, 7df2 <z_impl_zsock_poll+0x9e>
		if (z_fdtable_call_ioctl(vtable, ctx, ZFD_IOCTL_POLL_PREPARE,
    7dc4:	ab1c      	add	r3, sp, #112	; 0x70
    7dc6:	e9cd 7300 	strd	r7, r3, [sp]
    7dca:	f240 1203 	movw	r2, #259	; 0x103
    7dce:	462b      	mov	r3, r5
    7dd0:	9807      	ldr	r0, [sp, #28]
    7dd2:	f00c fb41 	bl	14458 <z_fdtable_call_ioctl>
    7dd6:	2800      	cmp	r0, #0
    7dd8:	da0b      	bge.n	7df2 <z_impl_zsock_poll+0x9e>
			if (errno == EALREADY) {
    7dda:	f00d f8f4 	bl	14fc6 <__errno>
    7dde:	6803      	ldr	r3, [r0, #0]
    7de0:	2b78      	cmp	r3, #120	; 0x78
    7de2:	d005      	beq.n	7df0 <z_impl_zsock_poll+0x9c>
			return -1;
    7de4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			}
		}
	} while (retry);

	return ret;
}
    7de8:	4628      	mov	r0, r5
    7dea:	b01d      	add	sp, #116	; 0x74
    7dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				timeout = K_NO_WAIT;
    7df0:	2600      	movs	r6, #0
	for (pfd = fds, i = nfds; i--; pfd++) {
    7df2:	3508      	adds	r5, #8
    7df4:	3c01      	subs	r4, #1
    7df6:	e7bf      	b.n	7d78 <z_impl_zsock_poll+0x24>
		for (pfd = fds, i = nfds; i--; pfd++) {
    7df8:	9f03      	ldr	r7, [sp, #12]
		pev = poll_events;
    7dfa:	f8cd 9018 	str.w	r9, [sp, #24]
		for (pfd = fds, i = nfds; i--; pfd++) {
    7dfe:	46da      	mov	sl, fp
		ret = 0;
    7e00:	4625      	mov	r5, r4
		for (pfd = fds, i = nfds; i--; pfd++) {
    7e02:	f1ba 0f00 	cmp.w	sl, #0
    7e06:	d112      	bne.n	7e2e <z_impl_zsock_poll+0xda>
		if (retry) {
    7e08:	2c00      	cmp	r4, #0
    7e0a:	d0ed      	beq.n	7de8 <z_impl_zsock_poll+0x94>
			if (ret > 0) {
    7e0c:	2d00      	cmp	r5, #0
    7e0e:	dceb      	bgt.n	7de8 <z_impl_zsock_poll+0x94>
			if (timeout == K_NO_WAIT) {
    7e10:	2e00      	cmp	r6, #0
    7e12:	d0e9      	beq.n	7de8 <z_impl_zsock_poll+0x94>
			if (timeout != K_FOREVER) {
    7e14:	1c73      	adds	r3, r6, #1
    7e16:	d0b2      	beq.n	7d7e <z_impl_zsock_poll+0x2a>
    7e18:	f00c fb66 	bl	144e8 <k_uptime_get>
	return timeout - elapsed;
    7e1c:	9b04      	ldr	r3, [sp, #16]
    7e1e:	eb06 0803 	add.w	r8, r6, r3
    7e22:	eba8 0800 	sub.w	r8, r8, r0
				if (remaining_time <= 0) {
    7e26:	f1b8 0f00 	cmp.w	r8, #0
    7e2a:	dca8      	bgt.n	7d7e <z_impl_zsock_poll+0x2a>
    7e2c:	e7dc      	b.n	7de8 <z_impl_zsock_poll+0x94>
			if (pfd->fd < 0) {
    7e2e:	6838      	ldr	r0, [r7, #0]
			pfd->revents = 0;
    7e30:	9b05      	ldr	r3, [sp, #20]
    7e32:	80fb      	strh	r3, [r7, #6]
			if (pfd->fd < 0) {
    7e34:	2800      	cmp	r0, #0
    7e36:	db1d      	blt.n	7e74 <z_impl_zsock_poll+0x120>
			ctx = z_get_fd_obj_and_vtable(pfd->fd, &vtable);
    7e38:	a907      	add	r1, sp, #28
    7e3a:	f7fd f925 	bl	5088 <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
    7e3e:	4601      	mov	r1, r0
    7e40:	b918      	cbnz	r0, 7e4a <z_impl_zsock_poll+0xf6>
				pfd->revents = ZSOCK_POLLNVAL;
    7e42:	2320      	movs	r3, #32
    7e44:	80fb      	strh	r3, [r7, #6]
				ret++;
    7e46:	3501      	adds	r5, #1
    7e48:	e014      	b.n	7e74 <z_impl_zsock_poll+0x120>
			if (z_fdtable_call_ioctl(vtable, ctx, ZFD_IOCTL_POLL_UPDATE,
    7e4a:	ab06      	add	r3, sp, #24
    7e4c:	9300      	str	r3, [sp, #0]
    7e4e:	f44f 7282 	mov.w	r2, #260	; 0x104
    7e52:	463b      	mov	r3, r7
    7e54:	9807      	ldr	r0, [sp, #28]
    7e56:	f00c faff 	bl	14458 <z_fdtable_call_ioctl>
    7e5a:	2800      	cmp	r0, #0
    7e5c:	da06      	bge.n	7e6c <z_impl_zsock_poll+0x118>
				if (errno == EAGAIN) {
    7e5e:	f00d f8b2 	bl	14fc6 <__errno>
    7e62:	6803      	ldr	r3, [r0, #0]
    7e64:	2b0b      	cmp	r3, #11
    7e66:	d1bd      	bne.n	7de4 <z_impl_zsock_poll+0x90>
					retry = true;
    7e68:	2401      	movs	r4, #1
    7e6a:	e003      	b.n	7e74 <z_impl_zsock_poll+0x120>
			if (pfd->revents != 0) {
    7e6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7e70:	2b00      	cmp	r3, #0
    7e72:	d1e8      	bne.n	7e46 <z_impl_zsock_poll+0xf2>
		for (pfd = fds, i = nfds; i--; pfd++) {
    7e74:	3708      	adds	r7, #8
    7e76:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    7e7a:	e7c2      	b.n	7e02 <z_impl_zsock_poll+0xae>
    7e7c:	cccccccd 	.word	0xcccccccd

00007e80 <z_impl_zsock_gethostname>:
#include <errno.h>
#include <net/socket.h>
#include <syscall_handler.h>

int z_impl_zsock_gethostname(char *buf, size_t len)
{
    7e80:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    7e82:	460a      	mov	r2, r1
    7e84:	4902      	ldr	r1, [pc, #8]	; (7e90 <z_impl_zsock_gethostname+0x10>)
    7e86:	f7fa faed 	bl	2464 <strncpy>
	const char *p = net_hostname_get();

	strncpy(buf, p, len);

	return 0;
}
    7e8a:	2000      	movs	r0, #0
    7e8c:	bd08      	pop	{r3, pc}
    7e8e:	bf00      	nop
    7e90:	0001aecd 	.word	0x0001aecd

00007e94 <z_hdlr_zsock_gethostname>:

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER(zsock_gethostname, buf, len)
{
    7e94:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(buf, len));
    7e96:	2201      	movs	r2, #1
{
    7e98:	4604      	mov	r4, r0
    7e9a:	460d      	mov	r5, r1
    7e9c:	9e08      	ldr	r6, [sp, #32]
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(buf, len));
    7e9e:	f00d f869 	bl	14f74 <z_arch_buffer_validate>
    7ea2:	b150      	cbz	r0, 7eba <z_hdlr_zsock_gethostname+0x26>
    7ea4:	4b08      	ldr	r3, [pc, #32]	; (7ec8 <z_hdlr_zsock_gethostname+0x34>)
    7ea6:	9300      	str	r3, [sp, #0]
    7ea8:	4808      	ldr	r0, [pc, #32]	; (7ecc <z_hdlr_zsock_gethostname+0x38>)
    7eaa:	4909      	ldr	r1, [pc, #36]	; (7ed0 <z_hdlr_zsock_gethostname+0x3c>)
    7eac:	462b      	mov	r3, r5
    7eae:	4622      	mov	r2, r4
    7eb0:	f00b fae5 	bl	1347e <printk>
    7eb4:	4630      	mov	r0, r6
    7eb6:	f00d f836 	bl	14f26 <z_arch_syscall_oops>
	return z_impl_zsock_gethostname((char *)buf, len);
    7eba:	4629      	mov	r1, r5
    7ebc:	4620      	mov	r0, r4
}
    7ebe:	b002      	add	sp, #8
    7ec0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_impl_zsock_gethostname((char *)buf, len);
    7ec4:	f7ff bfdc 	b.w	7e80 <z_impl_zsock_gethostname>
    7ec8:	0001a21f 	.word	0x0001a21f
    7ecc:	0001a1c4 	.word	0x0001a1c4
    7ed0:	0001aeb4 	.word	0x0001aeb4

00007ed4 <usb_handle_vendor_request>:
	return rc;
}

static int usb_handle_vendor_request(struct usb_setup_packet *setup,
				     s32_t *len, u8_t **data_buf)
{
    7ed4:	b510      	push	{r4, lr}
    7ed6:	4604      	mov	r4, r0
    7ed8:	f00c febf 	bl	14c5a <z_arch_is_user_context>
		if (!usb_handle_os_desc_feature(setup, len, data_buf)) {
			return 0;
		}
	}

	if (usb_dev.vendor_req_handler) {
    7edc:	4b04      	ldr	r3, [pc, #16]	; (7ef0 <usb_handle_vendor_request+0x1c>)
    7ede:	699b      	ldr	r3, [r3, #24]
    7ee0:	b11b      	cbz	r3, 7eea <usb_handle_vendor_request+0x16>
		return usb_dev.vendor_req_handler(setup, len, data_buf);
    7ee2:	4620      	mov	r0, r4
	}

	return -ENOTSUP;
}
    7ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return usb_dev.vendor_req_handler(setup, len, data_buf);
    7ee8:	4718      	bx	r3
}
    7eea:	f06f 0085 	mvn.w	r0, #133	; 0x85
    7eee:	bd10      	pop	{r4, pc}
    7ef0:	200029e8 	.word	0x200029e8

00007ef4 <forward_status_cb>:
{
	usb_dev.status_callback = cb;
}

static void forward_status_cb(enum usb_dc_status_code status, const u8_t *param)
{
    7ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t size = (__usb_data_end - __usb_data_start);
    7ef8:	4b0b      	ldr	r3, [pc, #44]	; (7f28 <forward_status_cb+0x34>)
    7efa:	4c0c      	ldr	r4, [pc, #48]	; (7f2c <forward_status_cb+0x38>)
    7efc:	4d0c      	ldr	r5, [pc, #48]	; (7f30 <forward_status_cb+0x3c>)
    7efe:	1b1b      	subs	r3, r3, r4
    7f00:	109b      	asrs	r3, r3, #2
{
    7f02:	4606      	mov	r6, r0
    7f04:	460f      	mov	r7, r1
	size_t size = (__usb_data_end - __usb_data_start);
    7f06:	435d      	muls	r5, r3

	for (size_t i = 0; i < size; i++) {
    7f08:	f04f 0800 	mov.w	r8, #0
    7f0c:	45a8      	cmp	r8, r5
    7f0e:	d101      	bne.n	7f14 <forward_status_cb+0x20>

		if (cfg->cb_usb_status) {
			cfg->cb_usb_status(cfg, status, param);
		}
	}
}
    7f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cfg->cb_usb_status) {
    7f14:	68e3      	ldr	r3, [r4, #12]
    7f16:	b11b      	cbz	r3, 7f20 <forward_status_cb+0x2c>
			cfg->cb_usb_status(cfg, status, param);
    7f18:	463a      	mov	r2, r7
    7f1a:	4631      	mov	r1, r6
    7f1c:	4620      	mov	r0, r4
    7f1e:	4798      	blx	r3
	for (size_t i = 0; i < size; i++) {
    7f20:	f108 0801 	add.w	r8, r8, #1
    7f24:	342c      	adds	r4, #44	; 0x2c
    7f26:	e7f1      	b.n	7f0c <forward_status_cb+0x18>
    7f28:	20011cdc 	.word	0x20011cdc
    7f2c:	20011cb0 	.word	0x20011cb0
    7f30:	ba2e8ba3 	.word	0xba2e8ba3

00007f34 <usb_data_to_host>:
{
    7f34:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t chunk = usb_dev.data_buf_residue;
    7f36:	4c0f      	ldr	r4, [pc, #60]	; (7f74 <usb_data_to_host+0x40>)
	usb_dc_ep_write(USB_CONTROL_IN_EP0, usb_dev.data_buf, chunk, &chunk);
    7f38:	ab01      	add	r3, sp, #4
	u32_t chunk = usb_dev.data_buf_residue;
    7f3a:	68e2      	ldr	r2, [r4, #12]
	usb_dc_ep_write(USB_CONTROL_IN_EP0, usb_dev.data_buf, chunk, &chunk);
    7f3c:	68a1      	ldr	r1, [r4, #8]
	u32_t chunk = usb_dev.data_buf_residue;
    7f3e:	9201      	str	r2, [sp, #4]
{
    7f40:	4605      	mov	r5, r0
	usb_dc_ep_write(USB_CONTROL_IN_EP0, usb_dev.data_buf, chunk, &chunk);
    7f42:	2080      	movs	r0, #128	; 0x80
    7f44:	f002 fbd2 	bl	a6ec <usb_dc_ep_write>
	usb_dev.data_buf += chunk;
    7f48:	9a01      	ldr	r2, [sp, #4]
    7f4a:	68a3      	ldr	r3, [r4, #8]
    7f4c:	4413      	add	r3, r2
    7f4e:	60a3      	str	r3, [r4, #8]
	usb_dev.data_buf_residue -= chunk;
    7f50:	68e3      	ldr	r3, [r4, #12]
    7f52:	1a9b      	subs	r3, r3, r2
    7f54:	60e3      	str	r3, [r4, #12]
	if (!usb_dev.data_buf_residue && chunk == USB_MAX_CTRL_MPS
    7f56:	b95b      	cbnz	r3, 7f70 <usb_data_to_host+0x3c>
    7f58:	2a40      	cmp	r2, #64	; 0x40
    7f5a:	d109      	bne.n	7f70 <usb_data_to_host+0x3c>
	    && len > chunk) {
    7f5c:	2d40      	cmp	r5, #64	; 0x40
    7f5e:	d907      	bls.n	7f70 <usb_data_to_host+0x3c>
			ret = usb_dc_ep_write(USB_CONTROL_IN_EP0, NULL, 0,
    7f60:	2300      	movs	r3, #0
    7f62:	461a      	mov	r2, r3
    7f64:	4619      	mov	r1, r3
    7f66:	2080      	movs	r0, #128	; 0x80
    7f68:	f002 fbc0 	bl	a6ec <usb_dc_ep_write>
		} while (ret == -EAGAIN);
    7f6c:	300b      	adds	r0, #11
    7f6e:	d0f7      	beq.n	7f60 <usb_data_to_host+0x2c>
}
    7f70:	b003      	add	sp, #12
    7f72:	bd30      	pop	{r4, r5, pc}
    7f74:	200029e8 	.word	0x200029e8

00007f78 <usb_handle_standard_request>:
{
    7f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (usb_dev.custom_req_handler &&
    7f7c:	4dad      	ldr	r5, [pc, #692]	; (8234 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x234>)
    7f7e:	696b      	ldr	r3, [r5, #20]
{
    7f80:	b085      	sub	sp, #20
    7f82:	4606      	mov	r6, r0
    7f84:	460c      	mov	r4, r1
    7f86:	4617      	mov	r7, r2
	if (usb_dev.custom_req_handler &&
    7f88:	b963      	cbnz	r3, 7fa4 <usb_handle_standard_request+0x2c>
	switch (REQTYPE_GET_RECIP(setup->bmRequestType)) {
    7f8a:	7833      	ldrb	r3, [r6, #0]
    7f8c:	f003 031f 	and.w	r3, r3, #31
    7f90:	2b01      	cmp	r3, #1
    7f92:	f000 80a1 	beq.w	80d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd8>
    7f96:	b15b      	cbz	r3, 7fb0 <usb_handle_standard_request+0x38>
    7f98:	2b02      	cmp	r3, #2
    7f9a:	f000 8108 	beq.w	81ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ae>
			rc = -EINVAL;
    7f9e:	f06f 0015 	mvn.w	r0, #21
    7fa2:	e002      	b.n	7faa <usb_handle_standard_request+0x32>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    7fa4:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    7fa6:	2800      	cmp	r0, #0
    7fa8:	d1ef      	bne.n	7f8a <usb_handle_standard_request+0x12>
}
    7faa:	b005      	add	sp, #20
    7fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (setup->bRequest) {
    7fb0:	7873      	ldrb	r3, [r6, #1]
	u16_t value = sys_le16_to_cpu(setup->wValue);
    7fb2:	8872      	ldrh	r2, [r6, #2]
	u8_t *data = *data_buf;
    7fb4:	6839      	ldr	r1, [r7, #0]
	switch (setup->bRequest) {
    7fb6:	2b09      	cmp	r3, #9
    7fb8:	d828      	bhi.n	800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>
    7fba:	e8df f003 	tbb	[pc, r3]
    7fbe:	7c05      	.short	0x7c05
    7fc0:	13278527 	.word	0x13278527
    7fc4:	3c35271a 	.word	0x3c35271a
    7fc8:	f00c fe47 	bl	14c5a <z_arch_is_user_context>
		data[0] = 0U;
    7fcc:	2000      	movs	r0, #0
    7fce:	7008      	strb	r0, [r1, #0]
		data[1] = 0U;
    7fd0:	7048      	strb	r0, [r1, #1]
			data[0] |= (usb_dev.remote_wakeup ?
    7fd2:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
    7fd6:	4283      	cmp	r3, r0
    7fd8:	bf14      	ite	ne
    7fda:	2302      	movne	r3, #2
    7fdc:	4603      	moveq	r3, r0
    7fde:	700b      	strb	r3, [r1, #0]
		*len = 2;
    7fe0:	2302      	movs	r3, #2
    7fe2:	e0a0      	b.n	8126 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x126>
    7fe4:	f00c fe39 	bl	14c5a <z_arch_is_user_context>
		usb_dc_set_address(value);
    7fe8:	b2d0      	uxtb	r0, r2
    7fea:	f002 fa49 	bl	a480 <usb_dc_set_address>
	int rc = 0;
    7fee:	2000      	movs	r0, #0
    7ff0:	e7db      	b.n	7faa <usb_handle_standard_request+0x32>
    7ff2:	f00c fe32 	bl	14c5a <z_arch_is_user_context>
	type = GET_DESC_TYPE(type_index);
    7ff6:	0a11      	lsrs	r1, r2, #8
	if ((type == DESC_INTERFACE) || (type == DESC_ENDPOINT) ||
    7ff8:	1f0b      	subs	r3, r1, #4
    7ffa:	2b01      	cmp	r3, #1
    7ffc:	d9cf      	bls.n	7f9e <usb_handle_standard_request+0x26>
    7ffe:	2907      	cmp	r1, #7
    8000:	d8cd      	bhi.n	7f9e <usb_handle_standard_request+0x26>
	p = (u8_t *)usb_dev.descriptors;
    8002:	6a2b      	ldr	r3, [r5, #32]
	cur_index = 0;
    8004:	2000      	movs	r0, #0
			if (cur_index == index) {
    8006:	b2d2      	uxtb	r2, r2
	while (p[DESC_bLength] != 0U) {
    8008:	781d      	ldrb	r5, [r3, #0]
    800a:	b915      	cbnz	r5, 8012 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12>
    800c:	f00c fe25 	bl	14c5a <z_arch_is_user_context>
    8010:	e7c5      	b.n	7f9e <usb_handle_standard_request+0x26>
		if (p[DESC_bDescriptorType] == type) {
    8012:	785e      	ldrb	r6, [r3, #1]
    8014:	428e      	cmp	r6, r1
    8016:	d103      	bne.n	8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>
			if (cur_index == index) {
    8018:	4282      	cmp	r2, r0
    801a:	f000 8104 	beq.w	8226 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x226>
			cur_index++;
    801e:	3001      	adds	r0, #1
		p += p[DESC_bLength];
    8020:	442b      	add	r3, r5
    8022:	e7f1      	b.n	8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>
			*len = p[DESC_bLength];
    8024:	781b      	ldrb	r3, [r3, #0]
    8026:	e103      	b.n	8230 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x230>
    8028:	f00c fe17 	bl	14c5a <z_arch_is_user_context>
		data[0] = usb_dev.configuration;
    802c:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
    8030:	700b      	strb	r3, [r1, #0]
		*len = 1;
    8032:	2301      	movs	r3, #1
    8034:	e0fc      	b.n	8230 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x230>
    8036:	f00c fe10 	bl	14c5a <z_arch_is_user_context>
		if (!usb_set_configuration(value, 0)) {
    803a:	b2d6      	uxtb	r6, r2
    803c:	f88d 6007 	strb.w	r6, [sp, #7]
	if (config_index == 0U) {
    8040:	b926      	cbnz	r6, 804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>
    8042:	f00c fe0a 	bl	14c5a <z_arch_is_user_context>
			usb_dev.configuration = value;
    8046:	f885 604d 	strb.w	r6, [r5, #77]	; 0x4d
	return ret;
    804a:	e7d0      	b.n	7fee <usb_handle_standard_request+0x76>
	cur_alt_setting = 0xFF;
    804c:	27ff      	movs	r7, #255	; 0xff
	p = (u8_t *)usb_dev.descriptors;
    804e:	6a2c      	ldr	r4, [r5, #32]
	cur_config = 0xFF;
    8050:	46b8      	mov	r8, r7
	while (p[DESC_bLength] != 0U) {
    8052:	7823      	ldrb	r3, [r4, #0]
    8054:	b93b      	cbnz	r3, 8066 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66>
	if (usb_dev.status_callback) {
    8056:	69eb      	ldr	r3, [r5, #28]
    8058:	2b00      	cmp	r3, #0
    805a:	d0f4      	beq.n	8046 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x46>
		usb_dev.status_callback(USB_DC_CONFIGURED, &config_index);
    805c:	f10d 0107 	add.w	r1, sp, #7
    8060:	2003      	movs	r0, #3
    8062:	4798      	blx	r3
    8064:	e7ef      	b.n	8046 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x46>
		switch (p[DESC_bDescriptorType]) {
    8066:	7863      	ldrb	r3, [r4, #1]
    8068:	2b04      	cmp	r3, #4
    806a:	d008      	beq.n	807e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7e>
    806c:	2b05      	cmp	r3, #5
    806e:	d008      	beq.n	8082 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x82>
    8070:	2b02      	cmp	r3, #2
    8072:	d101      	bne.n	8078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78>
			cur_config = p[CONF_DESC_bConfigurationValue];
    8074:	f894 8005 	ldrb.w	r8, [r4, #5]
		p += p[DESC_bLength];
    8078:	7823      	ldrb	r3, [r4, #0]
    807a:	441c      	add	r4, r3
    807c:	e7e9      	b.n	8052 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x52>
			cur_alt_setting =
    807e:	78e7      	ldrb	r7, [r4, #3]
			break;
    8080:	e7fa      	b.n	8078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78>
			if ((cur_config == config_index) &&
    8082:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8086:	4543      	cmp	r3, r8
    8088:	d1f6      	bne.n	8078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78>
    808a:	2f00      	cmp	r7, #0
    808c:	d1f4      	bne.n	8078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78>
				    p[ENDP_DESC_bmAttributes];
    808e:	78e3      	ldrb	r3, [r4, #3]
				ep_cfg.ep_type =
    8090:	f88d 300c 	strb.w	r3, [sp, #12]
				    (p[ENDP_DESC_wMaxPacketSize + 1]
    8094:	7962      	ldrb	r2, [r4, #5]
				    (p[ENDP_DESC_wMaxPacketSize]) |
    8096:	7923      	ldrb	r3, [r4, #4]
    8098:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				ep_cfg.ep_mps =
    809c:	f8ad 300a 	strh.w	r3, [sp, #10]
				ep_cfg.ep_addr =
    80a0:	78a3      	ldrb	r3, [r4, #2]
    80a2:	f88d 3008 	strb.w	r3, [sp, #8]
				usb_dc_ep_configure(&ep_cfg);
    80a6:	a802      	add	r0, sp, #8
    80a8:	f002 fa46 	bl	a538 <usb_dc_ep_configure>
				usb_dc_ep_enable(ep_cfg.ep_addr);
    80ac:	f89d 0008 	ldrb.w	r0, [sp, #8]
    80b0:	f002 fafa 	bl	a6a8 <usb_dc_ep_enable>
    80b4:	e7e0      	b.n	8078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78>
    80b6:	f00c fdd0 	bl	14c5a <z_arch_is_user_context>
			if (value == FEA_REMOTE_WAKEUP) {
    80ba:	2a01      	cmp	r2, #1
    80bc:	f47f af6f 	bne.w	7f9e <usb_handle_standard_request+0x26>
				usb_dev.remote_wakeup = false;
    80c0:	2000      	movs	r0, #0
    80c2:	f885 004e 	strb.w	r0, [r5, #78]	; 0x4e
	return ret;
    80c6:	e770      	b.n	7faa <usb_handle_standard_request+0x32>
    80c8:	f00c fdc7 	bl	14c5a <z_arch_is_user_context>
			if (value == FEA_REMOTE_WAKEUP) {
    80cc:	2a01      	cmp	r2, #1
    80ce:	f47f af66 	bne.w	7f9e <usb_handle_standard_request+0x26>
				usb_dev.remote_wakeup = true;
    80d2:	f885 204e 	strb.w	r2, [r5, #78]	; 0x4e
	return ret;
    80d6:	e78a      	b.n	7fee <usb_handle_standard_request+0x76>
	switch (setup->bRequest) {
    80d8:	7872      	ldrb	r2, [r6, #1]
		if (usb_handle_std_interface_req(setup, len, data_buf) == false)
    80da:	683b      	ldr	r3, [r7, #0]
	switch (setup->bRequest) {
    80dc:	2a0b      	cmp	r2, #11
    80de:	d895      	bhi.n	800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>
    80e0:	a101      	add	r1, pc, #4	; (adr r1, 80e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe8>)
    80e2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    80e6:	bf00      	nop
    80e8:	00008119 	.word	0x00008119
    80ec:	00007f9f 	.word	0x00007f9f
    80f0:	0000800d 	.word	0x0000800d
    80f4:	00007f9f 	.word	0x00007f9f
    80f8:	0000800d 	.word	0x0000800d
    80fc:	0000800d 	.word	0x0000800d
    8100:	0000800d 	.word	0x0000800d
    8104:	0000800d 	.word	0x0000800d
    8108:	0000800d 	.word	0x0000800d
    810c:	0000800d 	.word	0x0000800d
    8110:	00008121 	.word	0x00008121
    8114:	0000812b 	.word	0x0000812b
		data[0] = 0U;
    8118:	2000      	movs	r0, #0
    811a:	7018      	strb	r0, [r3, #0]
		data[1] = 0U;
    811c:	7058      	strb	r0, [r3, #1]
		*len = 2;
    811e:	e75f      	b.n	7fe0 <usb_handle_standard_request+0x68>
		data[0] = 0U;
    8120:	2000      	movs	r0, #0
    8122:	7018      	strb	r0, [r3, #0]
		*len = 1;
    8124:	2301      	movs	r3, #1
		*len = 2;
    8126:	6023      	str	r3, [r4, #0]
		break;
    8128:	e73f      	b.n	7faa <usb_handle_standard_request+0x32>
    812a:	f00c fd96 	bl	14c5a <z_arch_is_user_context>
		usb_set_interface(sys_le16_to_cpu(setup->wIndex),
    812e:	f896 a004 	ldrb.w	sl, [r6, #4]
    8132:	f896 b002 	ldrb.w	fp, [r6, #2]
	const u8_t *p = usb_dev.descriptors;
    8136:	6a2e      	ldr	r6, [r5, #32]
    8138:	f00c fd8f 	bl	14c5a <z_arch_is_user_context>
	u8_t cur_iface = 0xFF;
    813c:	27ff      	movs	r7, #255	; 0xff
	u8_t cur_alt_setting = 0xFF;
    813e:	46b9      	mov	r9, r7
	const u8_t *if_desc = NULL;
    8140:	f04f 0800 	mov.w	r8, #0
	while (p[DESC_bLength] != 0U) {
    8144:	7833      	ldrb	r3, [r6, #0]
    8146:	b93b      	cbnz	r3, 8158 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x158>
	if (usb_dev.status_callback) {
    8148:	69eb      	ldr	r3, [r5, #28]
    814a:	b113      	cbz	r3, 8152 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x152>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    814c:	4641      	mov	r1, r8
    814e:	2007      	movs	r0, #7
    8150:	4798      	blx	r3
		*len = 0;
    8152:	2000      	movs	r0, #0
    8154:	6020      	str	r0, [r4, #0]
		break;
    8156:	e728      	b.n	7faa <usb_handle_standard_request+0x32>
		switch (p[DESC_bDescriptorType]) {
    8158:	7873      	ldrb	r3, [r6, #1]
    815a:	2b04      	cmp	r3, #4
    815c:	d004      	beq.n	8168 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x168>
    815e:	2b05      	cmp	r3, #5
    8160:	d00d      	beq.n	817e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17e>
		p += p[DESC_bLength];
    8162:	7833      	ldrb	r3, [r6, #0]
    8164:	441e      	add	r6, r3
    8166:	e7ed      	b.n	8144 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x144>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    8168:	78b7      	ldrb	r7, [r6, #2]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    816a:	f896 9003 	ldrb.w	r9, [r6, #3]
			if (cur_iface == iface &&
    816e:	45ba      	cmp	sl, r7
    8170:	d102      	bne.n	8178 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x178>
    8172:	45cb      	cmp	fp, r9
    8174:	bf08      	it	eq
    8176:	46b0      	moveq	r8, r6
    8178:	f00c fd6f 	bl	14c5a <z_arch_is_user_context>
			LOG_DBG("Found: ep_addr 0x%x", ep_cfg.ep_addr);
    817c:	e7f1      	b.n	8162 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x162>
			if ((cur_iface != iface) ||
    817e:	45ba      	cmp	sl, r7
    8180:	d1ef      	bne.n	8162 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x162>
    8182:	45cb      	cmp	fp, r9
    8184:	d1ed      	bne.n	8162 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x162>
			ep_cfg.ep_type = p[ENDP_DESC_bmAttributes];
    8186:	78f3      	ldrb	r3, [r6, #3]
    8188:	f88d 300c 	strb.w	r3, [sp, #12]
				(p[ENDP_DESC_wMaxPacketSize + 1] << 8);
    818c:	7972      	ldrb	r2, [r6, #5]
			ep_cfg.ep_mps = (p[ENDP_DESC_wMaxPacketSize]) |
    818e:	7933      	ldrb	r3, [r6, #4]
    8190:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8194:	f8ad 300a 	strh.w	r3, [sp, #10]
			ep_cfg.ep_addr = p[ENDP_DESC_bEndpointAddress];
    8198:	78b3      	ldrb	r3, [r6, #2]
    819a:	f88d 3008 	strb.w	r3, [sp, #8]
			usb_dc_ep_configure(&ep_cfg);
    819e:	a802      	add	r0, sp, #8
    81a0:	f002 f9ca 	bl	a538 <usb_dc_ep_configure>
			usb_dc_ep_enable(ep_cfg.ep_addr);
    81a4:	f89d 0008 	ldrb.w	r0, [sp, #8]
    81a8:	f002 fa7e 	bl	a6a8 <usb_dc_ep_enable>
    81ac:	e7e4      	b.n	8178 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x178>
	switch (setup->bRequest) {
    81ae:	7873      	ldrb	r3, [r6, #1]
	u8_t ep = sys_le16_to_cpu(setup->wIndex);
    81b0:	7930      	ldrb	r0, [r6, #4]
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false)
    81b2:	683f      	ldr	r7, [r7, #0]
	u8_t ep = sys_le16_to_cpu(setup->wIndex);
    81b4:	f88d 0008 	strb.w	r0, [sp, #8]
	switch (setup->bRequest) {
    81b8:	2b03      	cmp	r3, #3
    81ba:	f63f af27 	bhi.w	800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>
    81be:	a201      	add	r2, pc, #4	; (adr r2, 81c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c4>)
    81c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    81c4:	000081d5 	.word	0x000081d5
    81c8:	000081e1 	.word	0x000081e1
    81cc:	0000800d 	.word	0x0000800d
    81d0:	00008205 	.word	0x00008205
		usb_dc_ep_is_stalled(ep, &data[0]);
    81d4:	4639      	mov	r1, r7
    81d6:	f002 fa4d 	bl	a674 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    81da:	2000      	movs	r0, #0
    81dc:	7078      	strb	r0, [r7, #1]
    81de:	e6ff      	b.n	7fe0 <usb_handle_standard_request+0x68>
		if (sys_le16_to_cpu(setup->wValue) == FEA_ENDPOINT_HALT) {
    81e0:	8874      	ldrh	r4, [r6, #2]
    81e2:	2c00      	cmp	r4, #0
    81e4:	f47f aedb 	bne.w	7f9e <usb_handle_standard_request+0x26>
    81e8:	f00c fd37 	bl	14c5a <z_arch_is_user_context>
			usb_dc_ep_clear_stall(ep);
    81ec:	f89d 0008 	ldrb.w	r0, [sp, #8]
    81f0:	f002 fa26 	bl	a640 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    81f4:	69eb      	ldr	r3, [r5, #28]
    81f6:	2b00      	cmp	r3, #0
    81f8:	f43f aef9 	beq.w	7fee <usb_handle_standard_request+0x76>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    81fc:	a902      	add	r1, sp, #8
    81fe:	2009      	movs	r0, #9
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    8200:	4798      	blx	r3
    8202:	e6f4      	b.n	7fee <usb_handle_standard_request+0x76>
		if (sys_le16_to_cpu(setup->wValue) == FEA_ENDPOINT_HALT) {
    8204:	8874      	ldrh	r4, [r6, #2]
    8206:	2c00      	cmp	r4, #0
    8208:	f47f aec9 	bne.w	7f9e <usb_handle_standard_request+0x26>
    820c:	f00c fd25 	bl	14c5a <z_arch_is_user_context>
			usb_dc_ep_set_stall(ep);
    8210:	f89d 0008 	ldrb.w	r0, [sp, #8]
    8214:	f002 f9cc 	bl	a5b0 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    8218:	69eb      	ldr	r3, [r5, #28]
    821a:	2b00      	cmp	r3, #0
    821c:	f43f aee7 	beq.w	7fee <usb_handle_standard_request+0x76>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    8220:	a902      	add	r1, sp, #8
    8222:	2008      	movs	r0, #8
    8224:	e7ec      	b.n	8200 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x200>
		if (type == DESC_CONFIGURATION) {
    8226:	2902      	cmp	r1, #2
		*data = p;
    8228:	603b      	str	r3, [r7, #0]
		if (type == DESC_CONFIGURATION) {
    822a:	f47f aefb 	bne.w	8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>
			*len = (p[CONF_DESC_wTotalLength]) |
    822e:	885b      	ldrh	r3, [r3, #2]
    8230:	6023      	str	r3, [r4, #0]
    8232:	e6dc      	b.n	7fee <usb_handle_standard_request+0x76>
    8234:	200029e8 	.word	0x200029e8

00008238 <usb_handle_request.constprop.8>:
static bool usb_handle_request(struct usb_setup_packet *setup,
    8238:	b538      	push	{r3, r4, r5, lr}
	usb_request_handler handler = usb_dev.req_handlers[type];
    823a:	4d0d      	ldr	r5, [pc, #52]	; (8270 <usb_handle_request.constprop.8+0x38>)
	u32_t type = REQTYPE_GET_TYPE(setup->bmRequestType);
    823c:	782b      	ldrb	r3, [r5, #0]
    823e:	f3c3 1341 	ubfx	r3, r3, #5, #2
	usb_request_handler handler = usb_dev.req_handlers[type];
    8242:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    8246:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    8248:	f00c fd07 	bl	14c5a <z_arch_is_user_context>
	if (handler == NULL) {
    824c:	b91c      	cbnz	r4, 8256 <usb_handle_request.constprop.8+0x1e>
    824e:	f00c fd04 	bl	14c5a <z_arch_is_user_context>
		return false;
    8252:	2000      	movs	r0, #0
}
    8254:	bd38      	pop	{r3, r4, r5, pc}
	if ((*handler)(setup, len, data) < 0) {
    8256:	f105 0208 	add.w	r2, r5, #8
    825a:	f105 0110 	add.w	r1, r5, #16
    825e:	4628      	mov	r0, r5
    8260:	47a0      	blx	r4
    8262:	2800      	cmp	r0, #0
    8264:	da02      	bge.n	826c <usb_handle_request.constprop.8+0x34>
    8266:	f00c fcf8 	bl	14c5a <z_arch_is_user_context>
    826a:	e7f0      	b.n	824e <usb_handle_request.constprop.8+0x16>
	return true;
    826c:	2001      	movs	r0, #1
    826e:	e7f1      	b.n	8254 <usb_handle_request.constprop.8+0x1c>
    8270:	200029e8 	.word	0x200029e8

00008274 <usb_handle_control_transfer>:
{
    8274:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t chunk = 0U;
    8276:	2300      	movs	r3, #0
{
    8278:	4605      	mov	r5, r0
	u32_t chunk = 0U;
    827a:	9301      	str	r3, [sp, #4]
    827c:	f00c fced 	bl	14c5a <z_arch_is_user_context>
	if (ep == USB_CONTROL_OUT_EP0 && ep_status == USB_DC_EP_SETUP) {
    8280:	2d00      	cmp	r5, #0
    8282:	d161      	bne.n	8348 <usb_handle_control_transfer+0xd4>
    8284:	4c34      	ldr	r4, [pc, #208]	; (8358 <usb_handle_control_transfer+0xe4>)
    8286:	bb79      	cbnz	r1, 82e8 <usb_handle_control_transfer+0x74>
		if (usb_dc_ep_read(ep,
    8288:	460b      	mov	r3, r1
    828a:	2208      	movs	r2, #8
    828c:	4621      	mov	r1, r4
    828e:	4618      	mov	r0, r3
    8290:	f00c fe2c 	bl	14eec <usb_dc_ep_read>
    8294:	2800      	cmp	r0, #0
    8296:	da06      	bge.n	82a6 <usb_handle_control_transfer+0x32>
    8298:	f00c fcdf 	bl	14c5a <z_arch_is_user_context>
			usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
    829c:	2080      	movs	r0, #128	; 0x80
    829e:	f002 f987 	bl	a5b0 <usb_dc_ep_set_stall>
}
    82a2:	b003      	add	sp, #12
    82a4:	bd30      	pop	{r4, r5, pc}
		type = REQTYPE_GET_TYPE(setup->bmRequestType);
    82a6:	7821      	ldrb	r1, [r4, #0]
		length = sys_le16_to_cpu(setup->wLength);
    82a8:	88e5      	ldrh	r5, [r4, #6]
		type = REQTYPE_GET_TYPE(setup->bmRequestType);
    82aa:	f3c1 1341 	ubfx	r3, r1, #5, #2
		usb_dev.data_buf = usb_dev.data_store[type];
    82ae:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    82b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    82b4:	60a2      	str	r2, [r4, #8]
		if (!usb_dev.data_buf) {
    82b6:	b92a      	cbnz	r2, 82c4 <usb_handle_control_transfer+0x50>
    82b8:	f00c fccf 	bl	14c5a <z_arch_is_user_context>
			usb_dc_ep_set_stall(USB_CONTROL_OUT_EP0);
    82bc:	4610      	mov	r0, r2
    82be:	f002 f977 	bl	a5b0 <usb_dc_ep_set_stall>
    82c2:	e7eb      	b.n	829c <usb_handle_control_transfer+0x28>
		usb_dev.data_buf_len = length;
    82c4:	e9c4 5503 	strd	r5, r5, [r4, #12]
		if (length &&
    82c8:	b10d      	cbz	r5, 82ce <usb_handle_control_transfer+0x5a>
    82ca:	09cb      	lsrs	r3, r1, #7
    82cc:	d0e9      	beq.n	82a2 <usb_handle_control_transfer+0x2e>
		if (!usb_handle_request(setup,
    82ce:	f7ff ffb3 	bl	8238 <usb_handle_request.constprop.8>
    82d2:	2800      	cmp	r0, #0
    82d4:	d0e0      	beq.n	8298 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len, length);
    82d6:	6923      	ldr	r3, [r4, #16]
    82d8:	42ab      	cmp	r3, r5
    82da:	bfd4      	ite	le
    82dc:	60e3      	strle	r3, [r4, #12]
    82de:	60e5      	strgt	r5, [r4, #12]
		usb_data_to_host(length);
    82e0:	4628      	mov	r0, r5
			usb_data_to_host(sys_le16_to_cpu(setup->wLength));
    82e2:	f7ff fe27 	bl	7f34 <usb_data_to_host>
		__ASSERT_NO_MSG(false);
    82e6:	e7dc      	b.n	82a2 <usb_handle_control_transfer+0x2e>
		if (usb_dev.data_buf_residue <= 0) {
    82e8:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
    82ec:	2a00      	cmp	r2, #0
			if (usb_dc_ep_read(USB_CONTROL_OUT_EP0,
    82ee:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
    82f0:	dc06      	bgt.n	8300 <usb_handle_control_transfer+0x8c>
			if (usb_dc_ep_read(USB_CONTROL_OUT_EP0,
    82f2:	462a      	mov	r2, r5
    82f4:	4628      	mov	r0, r5
    82f6:	f00c fdf9 	bl	14eec <usb_dc_ep_read>
    82fa:	2800      	cmp	r0, #0
    82fc:	dad1      	bge.n	82a2 <usb_handle_control_transfer+0x2e>
    82fe:	e7cb      	b.n	8298 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_OUT_EP0,
    8300:	4628      	mov	r0, r5
    8302:	f00c fdf3 	bl	14eec <usb_dc_ep_read>
    8306:	2800      	cmp	r0, #0
    8308:	da06      	bge.n	8318 <usb_handle_control_transfer+0xa4>
    830a:	f00c fca6 	bl	14c5a <z_arch_is_user_context>
			usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
    830e:	2080      	movs	r0, #128	; 0x80
    8310:	f002 f94e 	bl	a5b0 <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_OUT_EP0);
    8314:	4628      	mov	r0, r5
    8316:	e7c2      	b.n	829e <usb_handle_control_transfer+0x2a>
		usb_dev.data_buf += chunk;
    8318:	9901      	ldr	r1, [sp, #4]
    831a:	68a2      	ldr	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    831c:	68e3      	ldr	r3, [r4, #12]
		usb_dev.data_buf += chunk;
    831e:	440a      	add	r2, r1
		usb_dev.data_buf_residue -= chunk;
    8320:	1a5b      	subs	r3, r3, r1
		usb_dev.data_buf += chunk;
    8322:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    8324:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    8326:	2b00      	cmp	r3, #0
    8328:	d1bb      	bne.n	82a2 <usb_handle_control_transfer+0x2e>
			type = REQTYPE_GET_TYPE(setup->bmRequestType);
    832a:	7823      	ldrb	r3, [r4, #0]
    832c:	f3c3 1341 	ubfx	r3, r3, #5, #2
			usb_dev.data_buf = usb_dev.data_store[type];
    8330:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    8334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    8336:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    8338:	f7ff ff7e 	bl	8238 <usb_handle_request.constprop.8>
    833c:	2800      	cmp	r0, #0
    833e:	d0ab      	beq.n	8298 <usb_handle_control_transfer+0x24>
    8340:	f00c fc8b 	bl	14c5a <z_arch_is_user_context>
			usb_data_to_host(sys_le16_to_cpu(setup->wLength));
    8344:	88e0      	ldrh	r0, [r4, #6]
    8346:	e7cc      	b.n	82e2 <usb_handle_control_transfer+0x6e>
	} else if (ep == USB_CONTROL_IN_EP0) {
    8348:	2d80      	cmp	r5, #128	; 0x80
    834a:	d1aa      	bne.n	82a2 <usb_handle_control_transfer+0x2e>
		if (usb_dev.data_buf_residue != 0) {
    834c:	4b02      	ldr	r3, [pc, #8]	; (8358 <usb_handle_control_transfer+0xe4>)
    834e:	68da      	ldr	r2, [r3, #12]
    8350:	2a00      	cmp	r2, #0
    8352:	d0a6      	beq.n	82a2 <usb_handle_control_transfer+0x2e>
			usb_data_to_host(sys_le16_to_cpu(setup->wLength));
    8354:	88d8      	ldrh	r0, [r3, #6]
    8356:	e7c4      	b.n	82e2 <usb_handle_control_transfer+0x6e>
    8358:	200029e8 	.word	0x200029e8

0000835c <k_work_submit_to_queue.constprop.10>:
 * @param work Address of work item.
 *
 * @return N/A
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
    835c:	4601      	mov	r1, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    835e:	f100 0308 	add.w	r3, r0, #8
    8362:	f3bf 8f5b 	dmb	ish
    8366:	e853 2f00 	ldrex	r2, [r3]
    836a:	f042 0001 	orr.w	r0, r2, #1
    836e:	e843 0c00 	strex	ip, r0, [r3]
    8372:	f1bc 0f00 	cmp.w	ip, #0
    8376:	d1f6      	bne.n	8366 <k_work_submit_to_queue.constprop.10+0xa>
    8378:	f3bf 8f5b 	dmb	ish
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    837c:	07d3      	lsls	r3, r2, #31
    837e:	d402      	bmi.n	8386 <k_work_submit_to_queue.constprop.10+0x2a>
		k_queue_append(&work_q->queue, work);
    8380:	4801      	ldr	r0, [pc, #4]	; (8388 <k_work_submit_to_queue.constprop.10+0x2c>)
    8382:	f010 b86a 	b.w	1845a <k_queue_append>
	}
}
    8386:	4770      	bx	lr
    8388:	2000582c 	.word	0x2000582c

0000838c <usb_set_config>:

	return 0;
}

int usb_set_config(struct usb_cfg_data *config)
{
    838c:	b510      	push	{r4, lr}
	if (!config)
    838e:	b1c0      	cbz	r0, 83c2 <usb_set_config+0x36>
	usb_dev.descriptors = usb_descriptors;
    8390:	4b0d      	ldr	r3, [pc, #52]	; (83c8 <usb_set_config+0x3c>)
    8392:	6802      	ldr	r2, [r0, #0]
    8394:	621a      	str	r2, [r3, #32]
	usb_dev.req_handlers[type] = handler;
    8396:	4a0d      	ldr	r2, [pc, #52]	; (83cc <usb_set_config+0x40>)
    8398:	625a      	str	r2, [r3, #36]	; 0x24
	usb_dev.data_store[type] = data_store;
    839a:	f103 0244 	add.w	r2, r3, #68	; 0x44
    839e:	635a      	str	r2, [r3, #52]	; 0x34
	usb_register_request_handler(REQTYPE_TYPE_STANDARD,
				     usb_handle_standard_request,
				     usb_dev.std_req_data);

	/* register class request handlers for each interface*/
	if (config->interface.class_handler != NULL) {
    83a0:	6902      	ldr	r2, [r0, #16]
    83a2:	b112      	cbz	r2, 83aa <usb_set_config+0x1e>
		usb_register_request_handler(REQTYPE_TYPE_CLASS,
    83a4:	69c1      	ldr	r1, [r0, #28]
	usb_dev.data_store[type] = data_store;
    83a6:	6399      	str	r1, [r3, #56]	; 0x38
	usb_dev.req_handlers[type] = handler;
    83a8:	629a      	str	r2, [r3, #40]	; 0x28
					     config->interface.class_handler,
					     config->interface.payload_data);
	}

	/* register vendor request handler */
	if (config->interface.vendor_handler || usb_os_desc_enabled()) {
    83aa:	6942      	ldr	r2, [r0, #20]
    83ac:	b122      	cbz	r2, 83b8 <usb_set_config+0x2c>
		usb_register_request_handler(REQTYPE_TYPE_VENDOR,
    83ae:	6a01      	ldr	r1, [r0, #32]
	usb_dev.req_handlers[type] = handler;
    83b0:	4c07      	ldr	r4, [pc, #28]	; (83d0 <usb_set_config+0x44>)
    83b2:	62dc      	str	r4, [r3, #44]	; 0x2c
	usb_dev.data_store[type] = data_store;
    83b4:	63d9      	str	r1, [r3, #60]	; 0x3c
					     usb_handle_vendor_request,
					     config->interface.vendor_data);

		if (config->interface.vendor_handler) {
			usb_dev.vendor_req_handler =
    83b6:	619a      	str	r2, [r3, #24]
				config->interface.vendor_handler;
		}
	}

	/* register class request handlers for each interface*/
	if (config->interface.custom_handler != NULL) {
    83b8:	6980      	ldr	r0, [r0, #24]
    83ba:	b108      	cbz	r0, 83c0 <usb_set_config+0x34>
	usb_dev.custom_req_handler = handler;
    83bc:	6158      	str	r0, [r3, #20]
		usb_register_custom_req_handler(
		    config->interface.custom_handler);
	}

	return 0;
    83be:	2000      	movs	r0, #0
}
    83c0:	bd10      	pop	{r4, pc}
		return -EINVAL;
    83c2:	f06f 0015 	mvn.w	r0, #21
    83c6:	e7fb      	b.n	83c0 <usb_set_config+0x34>
    83c8:	200029e8 	.word	0x200029e8
    83cc:	00007f79 	.word	0x00007f79
    83d0:	00007ed5 	.word	0x00007ed5

000083d4 <usb_enable>:

	return 0;
}

int usb_enable(struct usb_cfg_data *config)
{
    83d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	int ret;
	u32_t i;
	struct usb_dc_ep_cfg_data ep0_cfg;

	if (true == usb_dev.enabled) {
    83d8:	4d31      	ldr	r5, [pc, #196]	; (84a0 <usb_enable+0xcc>)
    83da:	f895 404c 	ldrb.w	r4, [r5, #76]	; 0x4c
{
    83de:	4606      	mov	r6, r0
	if (true == usb_dev.enabled) {
    83e0:	2c00      	cmp	r4, #0
    83e2:	d14d      	bne.n	8480 <usb_enable+0xac>
	usb_dev.status_callback = cb;
    83e4:	482f      	ldr	r0, [pc, #188]	; (84a4 <usb_enable+0xd0>)
    83e6:	61e8      	str	r0, [r5, #28]
	ret = usb_vbus_set(true);
	if (ret < 0)
		return ret;

	usb_register_status_callback(forward_status_cb);
	ret = usb_dc_set_status_callback(forward_status_cb);
    83e8:	f002 fa96 	bl	a918 <usb_dc_set_status_callback>
	if (ret < 0) {
    83ec:	2800      	cmp	r0, #0
    83ee:	db48      	blt.n	8482 <usb_enable+0xae>
		return ret;
	}

	ret = usb_dc_attach();
    83f0:	f001 ffee 	bl	a3d0 <usb_dc_attach>
	if (ret < 0)
    83f4:	2800      	cmp	r0, #0
    83f6:	db44      	blt.n	8482 <usb_enable+0xae>
		return ret;

	/* Configure control EP */
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    83f8:	2340      	movs	r3, #64	; 0x40
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;

	ep0_cfg.ep_addr = USB_CONTROL_OUT_EP0;
	ret = usb_dc_ep_configure(&ep0_cfg);
    83fa:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    83fc:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    8400:	f88d 4004 	strb.w	r4, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_OUT_EP0;
    8404:	f88d 4000 	strb.w	r4, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    8408:	f002 f896 	bl	a538 <usb_dc_ep_configure>
	if (ret < 0)
    840c:	2800      	cmp	r0, #0
    840e:	db38      	blt.n	8482 <usb_enable+0xae>
		return ret;

	ep0_cfg.ep_addr = USB_CONTROL_IN_EP0;
    8410:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    8412:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_IN_EP0;
    8414:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    8418:	f002 f88e 	bl	a538 <usb_dc_ep_configure>
	if (ret < 0)
    841c:	2800      	cmp	r0, #0
    841e:	db30      	blt.n	8482 <usb_enable+0xae>
		return ret;

	/*register endpoint 0 handlers*/
	ret = usb_dc_ep_set_callback(USB_CONTROL_OUT_EP0,
    8420:	4921      	ldr	r1, [pc, #132]	; (84a8 <usb_enable+0xd4>)
    8422:	4620      	mov	r0, r4
    8424:	f002 fa64 	bl	a8f0 <usb_dc_ep_set_callback>
	    usb_handle_control_transfer);
	if (ret < 0)
    8428:	2800      	cmp	r0, #0
    842a:	db2a      	blt.n	8482 <usb_enable+0xae>
		return ret;
	ret = usb_dc_ep_set_callback(USB_CONTROL_IN_EP0,
    842c:	491e      	ldr	r1, [pc, #120]	; (84a8 <usb_enable+0xd4>)
    842e:	4638      	mov	r0, r7
    8430:	f002 fa5e 	bl	a8f0 <usb_dc_ep_set_callback>
	    usb_handle_control_transfer);
	if (ret < 0)
    8434:	2800      	cmp	r0, #0
    8436:	db24      	blt.n	8482 <usb_enable+0xae>
		return ret;

	/*register endpoint handlers*/
	for (i = 0U; i < config->num_endpoints; i++) {
    8438:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    843c:	42a3      	cmp	r3, r4
    843e:	d823      	bhi.n	8488 <usb_enable+0xb4>
		if (ret < 0)
			return ret;
	}

	/* init transfer slots */
	for (i = 0U; i < MAX_NUM_TRANSFERS; i++) {
    8440:	2600      	movs	r6, #0
    8442:	4c17      	ldr	r4, [pc, #92]	; (84a0 <usb_enable+0xcc>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    8444:	f8df 8064 	ldr.w	r8, [pc, #100]	; 84ac <usb_enable+0xd8>
    8448:	4637      	mov	r7, r6
    844a:	e9c4 7821 	strd	r7, r8, [r4, #132]	; 0x84
    844e:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
		k_work_init(&usb_dev.transfer[i].work, usb_transfer_work);
		k_sem_init(&usb_dev.transfer[i].sem, 1, 1);
    8452:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    8456:	2101      	movs	r1, #1
	for (i = 0U; i < MAX_NUM_TRANSFERS; i++) {
    8458:	3601      	adds	r6, #1
		k_sem_init(&usb_dev.transfer[i].sem, 1, 1);
    845a:	f00c fc18 	bl	14c8e <k_sem_init.constprop.9>
	for (i = 0U; i < MAX_NUM_TRANSFERS; i++) {
    845e:	2e04      	cmp	r6, #4
    8460:	f104 0444 	add.w	r4, r4, #68	; 0x44
    8464:	d1f1      	bne.n	844a <usb_enable+0x76>
	}

	/* enable control EP */
	ret = usb_dc_ep_enable(USB_CONTROL_OUT_EP0);
    8466:	2000      	movs	r0, #0
    8468:	f002 f91e 	bl	a6a8 <usb_dc_ep_enable>
	if (ret < 0)
    846c:	2800      	cmp	r0, #0
    846e:	db08      	blt.n	8482 <usb_enable+0xae>
		return ret;

	ret = usb_dc_ep_enable(USB_CONTROL_IN_EP0);
    8470:	2080      	movs	r0, #128	; 0x80
    8472:	f002 f919 	bl	a6a8 <usb_dc_ep_enable>
	if (ret < 0)
    8476:	2800      	cmp	r0, #0
    8478:	db03      	blt.n	8482 <usb_enable+0xae>
		return ret;

	usb_dev.enabled = true;
    847a:	2301      	movs	r3, #1
    847c:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
		return 0;
    8480:	2000      	movs	r0, #0

	return 0;
}
    8482:	b002      	add	sp, #8
    8484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_dc_ep_set_callback(config->endpoint[i].ep_addr,
    8488:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    848a:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    848e:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
    8492:	7910      	ldrb	r0, [r2, #4]
    8494:	f002 fa2c 	bl	a8f0 <usb_dc_ep_set_callback>
		if (ret < 0)
    8498:	2800      	cmp	r0, #0
    849a:	dbf2      	blt.n	8482 <usb_enable+0xae>
	for (i = 0U; i < config->num_endpoints; i++) {
    849c:	3401      	adds	r4, #1
    849e:	e7cb      	b.n	8438 <usb_enable+0x64>
    84a0:	200029e8 	.word	0x200029e8
    84a4:	00007ef5 	.word	0x00007ef5
    84a8:	00008275 	.word	0x00008275
    84ac:	00014cb3 	.word	0x00014cb3

000084b0 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    84b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t length = (__usb_data_end - __usb_data_start);
    84b4:	4aa0      	ldr	r2, [pc, #640]	; (8738 <usb_fix_descriptor+0x288>)
    84b6:	4ba1      	ldr	r3, [pc, #644]	; (873c <usb_fix_descriptor+0x28c>)
    84b8:	1a9b      	subs	r3, r3, r2
    84ba:	4aa1      	ldr	r2, [pc, #644]	; (8740 <usb_fix_descriptor+0x290>)
{
    84bc:	b087      	sub	sp, #28
	size_t length = (__usb_data_end - __usb_data_start);
    84be:	109b      	asrs	r3, r3, #2
    84c0:	4353      	muls	r3, r2
    84c2:	9301      	str	r3, [sp, #4]
		LOG_ERR("the new SN descriptor doesn't has the same "
    84c4:	4a9f      	ldr	r2, [pc, #636]	; (8744 <usb_fix_descriptor+0x294>)
    84c6:	4ba0      	ldr	r3, [pc, #640]	; (8748 <usb_fix_descriptor+0x298>)
    84c8:	1a9b      	subs	r3, r3, r2
	struct usb_cfg_descriptor *cfg_descr = NULL;
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	u8_t numof_ifaces = 0U;
	u8_t str_descr_idx = 0U;
    84ca:	2500      	movs	r5, #0
		LOG_ERR("the new SN descriptor doesn't has the same "
    84cc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
{
    84d0:	4604      	mov	r4, r0
		LOG_ERR("the new SN descriptor doesn't has the same "
    84d2:	9300      	str	r3, [sp, #0]
	u32_t requested_ep = BIT(16) | BIT(0);
    84d4:	f04f 1901 	mov.w	r9, #65537	; 0x10001
	u8_t numof_ifaces = 0U;
    84d8:	46a8      	mov	r8, r5
	struct usb_cfg_data *cfg_data = NULL;
    84da:	462f      	mov	r7, r5
	struct usb_cfg_descriptor *cfg_descr = NULL;
    84dc:	462e      	mov	r6, r5

	while (head->bLength != 0U) {
    84de:	7820      	ldrb	r0, [r4, #0]
    84e0:	b948      	cbnz	r0, 84f6 <usb_fix_descriptor+0x46>

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((u8_t *)head + head->bLength);
	}

	if ((head + 1) != __usb_descriptor_end) {
    84e2:	4b9a      	ldr	r3, [pc, #616]	; (874c <usb_fix_descriptor+0x29c>)
    84e4:	3402      	adds	r4, #2
    84e6:	429c      	cmp	r4, r3
    84e8:	d04d      	beq.n	8586 <usb_fix_descriptor+0xd6>
    84ea:	f00c fc6d 	bl	14dc8 <z_arch_is_user_context>
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
    84ee:	4620      	mov	r0, r4
    84f0:	f7ff ffde 	bl	84b0 <usb_fix_descriptor>
    84f4:	e047      	b.n	8586 <usb_fix_descriptor+0xd6>
		switch (head->bDescriptorType) {
    84f6:	7863      	ldrb	r3, [r4, #1]
    84f8:	2b0b      	cmp	r3, #11
    84fa:	d80a      	bhi.n	8512 <usb_fix_descriptor+0x62>
    84fc:	e8df f003 	tbb	[pc, r3]
    8500:	bc0609bc 	.word	0xbc0609bc
    8504:	09094a0c 	.word	0x09094a0c
    8508:	10090909 	.word	0x10090909
    850c:	f00c fc5c 	bl	14dc8 <z_arch_is_user_context>
			LOG_DBG("Configuration descriptor %p", head);
    8510:	4626      	mov	r6, r4
		head = (struct usb_desc_header *)((u8_t *)head + head->bLength);
    8512:	7823      	ldrb	r3, [r4, #0]
    8514:	441c      	add	r4, r3
    8516:	e7e2      	b.n	84de <usb_fix_descriptor+0x2e>
    8518:	f00c fc56 	bl	14dc8 <z_arch_is_user_context>
			if (if_descr->bAlternateSetting) {
    851c:	78e3      	ldrb	r3, [r4, #3]
    851e:	b113      	cbz	r3, 8526 <usb_fix_descriptor+0x76>
    8520:	f00c fc52 	bl	14dc8 <z_arch_is_user_context>
				return 0;
    8524:	e7f5      	b.n	8512 <usb_fix_descriptor+0x62>
			if (if_descr->bInterfaceNumber == 0U) {
    8526:	78a3      	ldrb	r3, [r4, #2]
    8528:	b9fb      	cbnz	r3, 856a <usb_fix_descriptor+0xba>
    852a:	4a83      	ldr	r2, [pc, #524]	; (8738 <usb_fix_descriptor+0x288>)
    852c:	4611      	mov	r1, r2
	for (size_t i = 0; i < length; i++) {
    852e:	9801      	ldr	r0, [sp, #4]
    8530:	4298      	cmp	r0, r3
    8532:	d110      	bne.n	8556 <usb_fix_descriptor+0xa6>
    8534:	f00c fc48 	bl	14dc8 <z_arch_is_user_context>
					LOG_ERR("There is no usb_cfg_data "
    8538:	2201      	movs	r2, #1
    853a:	f04f 0300 	mov.w	r3, #0
    853e:	f362 0307 	bfi	r3, r2, #0, #8
    8542:	9a00      	ldr	r2, [sp, #0]
    8544:	f362 138f 	bfi	r3, r2, #6, #10
    8548:	b9b0      	cbnz	r0, 8578 <usb_fix_descriptor+0xc8>
    854a:	461a      	mov	r2, r3
    854c:	4621      	mov	r1, r4
    854e:	4880      	ldr	r0, [pc, #512]	; (8750 <usb_fix_descriptor+0x2a0>)
    8550:	f00b f8d9 	bl	13706 <log_1>
					return -1;
    8554:	e015      	b.n	8582 <usb_fix_descriptor+0xd2>
		if (__usb_data_start[i].interface_descriptor == iface) {
    8556:	322c      	adds	r2, #44	; 0x2c
    8558:	f852 0c28 	ldr.w	r0, [r2, #-40]
    855c:	4284      	cmp	r4, r0
    855e:	d109      	bne.n	8574 <usb_fix_descriptor+0xc4>
			return &__usb_data_start[i];
    8560:	272c      	movs	r7, #44	; 0x2c
    8562:	fb07 1703 	mla	r7, r7, r3, r1
				if (cfg_data->interface_config) {
    8566:	68bb      	ldr	r3, [r7, #8]
    8568:	b983      	cbnz	r3, 858c <usb_fix_descriptor+0xdc>
			numof_ifaces++;
    856a:	f108 0801 	add.w	r8, r8, #1
    856e:	fa5f f888 	uxtb.w	r8, r8
			break;
    8572:	e7ce      	b.n	8512 <usb_fix_descriptor+0x62>
	for (size_t i = 0; i < length; i++) {
    8574:	3301      	adds	r3, #1
    8576:	e7da      	b.n	852e <usb_fix_descriptor+0x7e>
					LOG_ERR("There is no usb_cfg_data "
    8578:	4622      	mov	r2, r4
    857a:	4975      	ldr	r1, [pc, #468]	; (8750 <usb_fix_descriptor+0x2a0>)
    857c:	4618      	mov	r0, r3
    857e:	f00b f91d 	bl	137bc <log_from_user>
					return -1;
    8582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return 0;
}
    8586:	b007      	add	sp, #28
    8588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					cfg_data->interface_config(head,
    858c:	4641      	mov	r1, r8
    858e:	4620      	mov	r0, r4
    8590:	4798      	blx	r3
    8592:	e7ea      	b.n	856a <usb_fix_descriptor+0xba>
    8594:	f00c fc18 	bl	14dc8 <z_arch_is_user_context>
	for (int i = 0; i < cfg_data->num_endpoints; i++) {
    8598:	2300      	movs	r3, #0
    859a:	2101      	movs	r1, #1
    859c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
    85a0:	4293      	cmp	r3, r2
    85a2:	db10      	blt.n	85c6 <usb_fix_descriptor+0x116>
    85a4:	f00c fc10 	bl	14dc8 <z_arch_is_user_context>
				LOG_ERR("Failed to validate endpoints");
    85a8:	2201      	movs	r2, #1
    85aa:	f04f 0300 	mov.w	r3, #0
    85ae:	f362 0307 	bfi	r3, r2, #0, #8
    85b2:	9a00      	ldr	r2, [sp, #0]
    85b4:	f362 138f 	bfi	r3, r2, #6, #10
    85b8:	2800      	cmp	r0, #0
    85ba:	d058      	beq.n	866e <usb_fix_descriptor+0x1be>
    85bc:	4965      	ldr	r1, [pc, #404]	; (8754 <usb_fix_descriptor+0x2a4>)
					LOG_ERR("Incomplete device descriptor");
    85be:	4618      	mov	r0, r3
    85c0:	f00b f8fc 	bl	137bc <log_from_user>
    85c4:	e7dd      	b.n	8582 <usb_fix_descriptor+0xd2>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    85c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    85c8:	f894 c002 	ldrb.w	ip, [r4, #2]
    85cc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    85d0:	7910      	ldrb	r0, [r2, #4]
    85d2:	4584      	cmp	ip, r0
    85d4:	d001      	beq.n	85da <usb_fix_descriptor+0x12a>
	for (int i = 0; i < cfg_data->num_endpoints; i++) {
    85d6:	3301      	adds	r3, #1
    85d8:	e7e0      	b.n	859c <usb_fix_descriptor+0xec>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    85da:	f04f 0b01 	mov.w	fp, #1
			ep_cfg.ep_type = ep_descr->bmAttributes;
    85de:	f894 c003 	ldrb.w	ip, [r4, #3]
    85e2:	f88d c014 	strb.w	ip, [sp, #20]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    85e6:	f894 c004 	ldrb.w	ip, [r4, #4]
    85ea:	f894 e005 	ldrb.w	lr, [r4, #5]
    85ee:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
    85f2:	f8ad c012 	strh.w	ip, [sp, #18]
			ep_cfg.ep_addr = ep_descr->bEndpointAddress;
    85f6:	f894 c002 	ldrb.w	ip, [r4, #2]
    85fa:	f88d c010 	strb.w	ip, [sp, #16]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    85fe:	f01c 0f80 	tst.w	ip, #128	; 0x80
    8602:	fa5f f08b 	uxtb.w	r0, fp
    8606:	d027      	beq.n	8658 <usb_fix_descriptor+0x1a8>
				if ((*requested_ep & (1 << (idx + 16)))) {
    8608:	f10b 0c10 	add.w	ip, fp, #16
    860c:	fa01 fc0c 	lsl.w	ip, r1, ip
    8610:	ea1c 0f09 	tst.w	ip, r9
    8614:	d125      	bne.n	8662 <usb_fix_descriptor+0x1b2>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    8616:	f060 007f 	orn	r0, r0, #127	; 0x7f
				ep_cfg.ep_addr = idx;
    861a:	f88d 0010 	strb.w	r0, [sp, #16]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    861e:	a804      	add	r0, sp, #16
    8620:	e9cd 3202 	strd	r3, r2, [sp, #8]
    8624:	f001 ff3c 	bl	a4a0 <usb_dc_ep_check_cap>
    8628:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
    862c:	2101      	movs	r1, #1
    862e:	b9c0      	cbnz	r0, 8662 <usb_fix_descriptor+0x1b2>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    8630:	f89d 3010 	ldrb.w	r3, [sp, #16]
    8634:	70a3      	strb	r3, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    8636:	f013 0f80 	tst.w	r3, #128	; 0x80
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    863a:	7113      	strb	r3, [r2, #4]
					*requested_ep |= (1 << (idx + 16));
    863c:	bf18      	it	ne
    863e:	f10b 0b10 	addne.w	fp, fp, #16
    8642:	460b      	mov	r3, r1
					*requested_ep |= (1 << idx);
    8644:	bf0d      	iteet	eq
    8646:	fa03 fb0b 	lsleq.w	fp, r3, fp
					*requested_ep |= (1 << (idx + 16));
    864a:	fa01 f30b 	lslne.w	r3, r1, fp
    864e:	ea49 0903 	orrne.w	r9, r9, r3
					*requested_ep |= (1 << idx);
    8652:	ea49 090b 	orreq.w	r9, r9, fp
    8656:	e763      	b.n	8520 <usb_fix_descriptor+0x70>
				if ((*requested_ep & (1 << (idx)))) {
    8658:	fa01 fc0b 	lsl.w	ip, r1, fp
    865c:	ea1c 0f09 	tst.w	ip, r9
    8660:	d0db      	beq.n	861a <usb_fix_descriptor+0x16a>
    8662:	f10b 0b01 	add.w	fp, fp, #1
		for (u8_t idx = 1; idx < 16; idx++) {
    8666:	f1bb 0f10 	cmp.w	fp, #16
    866a:	d1b8      	bne.n	85de <usb_fix_descriptor+0x12e>
    866c:	e7b3      	b.n	85d6 <usb_fix_descriptor+0x126>
				LOG_ERR("Failed to validate endpoints");
    866e:	4839      	ldr	r0, [pc, #228]	; (8754 <usb_fix_descriptor+0x2a4>)
    8670:	4619      	mov	r1, r3
					LOG_ERR("Incomplete device descriptor");
    8672:	f00b f83b 	bl	136ec <log_0>
    8676:	e784      	b.n	8582 <usb_fix_descriptor+0xd2>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    8678:	2d03      	cmp	r5, #3
    867a:	d136      	bne.n	86ea <usb_fix_descriptor+0x23a>
	u8_t *runtime_sn =  usb_update_sn_string_descriptor();
    867c:	f00c fbae 	bl	14ddc <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    8680:	9002      	str	r0, [sp, #8]
    8682:	b1c0      	cbz	r0, 86b6 <usb_fix_descriptor+0x206>
	runtime_sn_len = strlen(runtime_sn);
    8684:	f7f9 fed4 	bl	2430 <strlen>
    8688:	4683      	mov	fp, r0
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    868a:	4833      	ldr	r0, [pc, #204]	; (8758 <usb_fix_descriptor+0x2a8>)
    868c:	f7f9 fed0 	bl	2430 <strlen>
	if (runtime_sn_len != default_sn_len) {
    8690:	4583      	cmp	fp, r0
    8692:	9902      	ldr	r1, [sp, #8]
    8694:	d024      	beq.n	86e0 <usb_fix_descriptor+0x230>
    8696:	f00c fb97 	bl	14dc8 <z_arch_is_user_context>
		LOG_ERR("the new SN descriptor doesn't has the same "
    869a:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
    869e:	f043 0301 	orr.w	r3, r3, #1
    86a2:	f363 0a07 	bfi	sl, r3, #0, #8
    86a6:	9b00      	ldr	r3, [sp, #0]
    86a8:	f363 1a8f 	bfi	sl, r3, #6, #10
    86ac:	b198      	cbz	r0, 86d6 <usb_fix_descriptor+0x226>
    86ae:	492b      	ldr	r1, [pc, #172]	; (875c <usb_fix_descriptor+0x2ac>)
    86b0:	4650      	mov	r0, sl
    86b2:	f00b f883 	bl	137bc <log_from_user>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    86b6:	7822      	ldrb	r2, [r4, #0]
    86b8:	f00c fb86 	bl	14dc8 <z_arch_is_user_context>
	for (int i = idx_max; i >= 0; i -= 2) {
    86bc:	f06f 0b02 	mvn.w	fp, #2
    86c0:	18a1      	adds	r1, r4, r2
    86c2:	ebab 0b04 	sub.w	fp, fp, r4
    86c6:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    86ca:	eb1b 0f01 	cmn.w	fp, r1
    86ce:	d51c      	bpl.n	870a <usb_fix_descriptor+0x25a>
			str_descr_idx += 1U;
    86d0:	3501      	adds	r5, #1
    86d2:	b2ed      	uxtb	r5, r5
			break;
    86d4:	e71d      	b.n	8512 <usb_fix_descriptor+0x62>
		LOG_ERR("the new SN descriptor doesn't has the same "
    86d6:	4651      	mov	r1, sl
    86d8:	4820      	ldr	r0, [pc, #128]	; (875c <usb_fix_descriptor+0x2ac>)
    86da:	f00b f807 	bl	136ec <log_0>
		return;
    86de:	e7ea      	b.n	86b6 <usb_fix_descriptor+0x206>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    86e0:	465a      	mov	r2, fp
    86e2:	1ca0      	adds	r0, r4, #2
    86e4:	f7f9 fe4a 	bl	237c <memcpy>
    86e8:	e7e5      	b.n	86b6 <usb_fix_descriptor+0x206>
			if (str_descr_idx) {
    86ea:	2d00      	cmp	r5, #0
    86ec:	d1e3      	bne.n	86b6 <usb_fix_descriptor+0x206>
				if (!cfg_descr) {
    86ee:	b9ce      	cbnz	r6, 8724 <usb_fix_descriptor+0x274>
    86f0:	f00c fb6a 	bl	14dc8 <z_arch_is_user_context>
					LOG_ERR("Incomplete device descriptor");
    86f4:	2201      	movs	r2, #1
    86f6:	f04f 0300 	mov.w	r3, #0
    86fa:	f362 0307 	bfi	r3, r2, #0, #8
    86fe:	9a00      	ldr	r2, [sp, #0]
    8700:	f362 138f 	bfi	r3, r2, #6, #10
    8704:	b158      	cbz	r0, 871e <usb_fix_descriptor+0x26e>
    8706:	4916      	ldr	r1, [pc, #88]	; (8760 <usb_fix_descriptor+0x2b0>)
    8708:	e759      	b.n	85be <usb_fix_descriptor+0x10e>
    870a:	f00c fb5d 	bl	14dc8 <z_arch_is_user_context>
		buf[i] = 0U;
    870e:	2300      	movs	r3, #0
    8710:	f801 3c01 	strb.w	r3, [r1, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    8714:	f812 0901 	ldrb.w	r0, [r2], #-1
    8718:	f801 0d02 	strb.w	r0, [r1, #-2]!
    871c:	e7d5      	b.n	86ca <usb_fix_descriptor+0x21a>
					LOG_ERR("Incomplete device descriptor");
    871e:	4619      	mov	r1, r3
    8720:	480f      	ldr	r0, [pc, #60]	; (8760 <usb_fix_descriptor+0x2b0>)
    8722:	e7a6      	b.n	8672 <usb_fix_descriptor+0x1c2>
    8724:	f00c fb50 	bl	14dc8 <z_arch_is_user_context>
				sys_put_le16((u8_t *)head - (u8_t *)cfg_descr,
    8728:	1ba3      	subs	r3, r4, r6
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    872a:	70b3      	strb	r3, [r6, #2]
	dst[1] = val >> 8;
    872c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    8730:	70f3      	strb	r3, [r6, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    8732:	f886 8004 	strb.w	r8, [r6, #4]
    8736:	e7cb      	b.n	86d0 <usb_fix_descriptor+0x220>
    8738:	20011cb0 	.word	0x20011cb0
    873c:	20011cdc 	.word	0x20011cdc
    8740:	ba2e8ba3 	.word	0xba2e8ba3
    8744:	00018f84 	.word	0x00018f84
    8748:	00018fb4 	.word	0x00018fb4
    874c:	20011cb0 	.word	0x20011cb0
    8750:	0001aeee 	.word	0x0001aeee
    8754:	0001af0e 	.word	0x0001af0e
    8758:	0001af2b 	.word	0x0001af2b
    875c:	0001af38 	.word	0x0001af38
    8760:	0001af82 	.word	0x0001af82

00008764 <usb_get_device_descriptor>:


u8_t *usb_get_device_descriptor(void)
{
    8764:	b508      	push	{r3, lr}
    8766:	f00c fb2f 	bl	14dc8 <z_arch_is_user_context>
    876a:	f00c fb2d 	bl	14dc8 <z_arch_is_user_context>
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    876e:	480f      	ldr	r0, [pc, #60]	; (87ac <usb_get_device_descriptor+0x48>)
    8770:	f7ff fe9e 	bl	84b0 <usb_fix_descriptor>
    8774:	b1c0      	cbz	r0, 87a8 <usb_get_device_descriptor+0x44>
    8776:	f00c fb27 	bl	14dc8 <z_arch_is_user_context>
		LOG_ERR("Failed to fixup USB descriptor");
    877a:	2301      	movs	r3, #1
    877c:	f04f 0200 	mov.w	r2, #0
    8780:	f363 0207 	bfi	r2, r3, #0, #8
    8784:	490a      	ldr	r1, [pc, #40]	; (87b0 <usb_get_device_descriptor+0x4c>)
    8786:	4b0b      	ldr	r3, [pc, #44]	; (87b4 <usb_get_device_descriptor+0x50>)
    8788:	1a5b      	subs	r3, r3, r1
    878a:	08db      	lsrs	r3, r3, #3
    878c:	f363 128f 	bfi	r2, r3, #6, #10
    8790:	b128      	cbz	r0, 879e <usb_get_device_descriptor+0x3a>
    8792:	4909      	ldr	r1, [pc, #36]	; (87b8 <usb_get_device_descriptor+0x54>)
    8794:	4610      	mov	r0, r2
    8796:	f00b f811 	bl	137bc <log_from_user>
		return NULL;
    879a:	2000      	movs	r0, #0
	}

	return (u8_t *) __usb_descriptor_start;
}
    879c:	bd08      	pop	{r3, pc}
		LOG_ERR("Failed to fixup USB descriptor");
    879e:	4611      	mov	r1, r2
    87a0:	4805      	ldr	r0, [pc, #20]	; (87b8 <usb_get_device_descriptor+0x54>)
    87a2:	f00a ffa3 	bl	136ec <log_0>
    87a6:	e7f8      	b.n	879a <usb_get_device_descriptor+0x36>
	return (u8_t *) __usb_descriptor_start;
    87a8:	4800      	ldr	r0, [pc, #0]	; (87ac <usb_get_device_descriptor+0x48>)
    87aa:	e7f7      	b.n	879c <usb_get_device_descriptor+0x38>
    87ac:	20011c2c 	.word	0x20011c2c
    87b0:	00018f84 	.word	0x00018f84
    87b4:	00018fb4 	.word	0x00018fb4
    87b8:	0001af9f 	.word	0x0001af9f

000087bc <mass_interface_config>:
static void mass_interface_config(struct usb_desc_header *head,
				  u8_t bInterfaceNumber)
{
	ARG_UNUSED(head);

	mass_cfg.if0.bInterfaceNumber = bInterfaceNumber;
    87bc:	4b01      	ldr	r3, [pc, #4]	; (87c4 <mass_interface_config+0x8>)
    87be:	7099      	strb	r1, [r3, #2]
}
    87c0:	4770      	bx	lr
    87c2:	bf00      	nop
    87c4:	20011c47 	.word	0x20011c47

000087c8 <sendCSW>:
{
    87c8:	b508      	push	{r3, lr}
	csw.Signature = CSW_Signature;
    87ca:	4915      	ldr	r1, [pc, #84]	; (8820 <sendCSW+0x58>)
	if (usb_write(mass_ep_data[MSD_IN_EP_IDX].ep_addr, (u8_t *)&csw,
    87cc:	4815      	ldr	r0, [pc, #84]	; (8824 <sendCSW+0x5c>)
	csw.Signature = CSW_Signature;
    87ce:	2355      	movs	r3, #85	; 0x55
    87d0:	2242      	movs	r2, #66	; 0x42
    87d2:	700b      	strb	r3, [r1, #0]
    87d4:	2353      	movs	r3, #83	; 0x53
    87d6:	704b      	strb	r3, [r1, #1]
    87d8:	708a      	strb	r2, [r1, #2]
    87da:	70cb      	strb	r3, [r1, #3]
	if (usb_write(mass_ep_data[MSD_IN_EP_IDX].ep_addr, (u8_t *)&csw,
    87dc:	220d      	movs	r2, #13
    87de:	2300      	movs	r3, #0
    87e0:	7b00      	ldrb	r0, [r0, #12]
    87e2:	f00c fae9 	bl	14db8 <usb_write>
    87e6:	b188      	cbz	r0, 880c <sendCSW+0x44>
    87e8:	f00c fafa 	bl	14de0 <z_arch_is_user_context>
		LOG_ERR("usb write failure");
    87ec:	2301      	movs	r3, #1
    87ee:	f04f 0200 	mov.w	r2, #0
    87f2:	f363 0207 	bfi	r2, r3, #0, #8
    87f6:	490c      	ldr	r1, [pc, #48]	; (8828 <sendCSW+0x60>)
    87f8:	4b0c      	ldr	r3, [pc, #48]	; (882c <sendCSW+0x64>)
    87fa:	1a5b      	subs	r3, r3, r1
    87fc:	08db      	lsrs	r3, r3, #3
    87fe:	f363 128f 	bfi	r2, r3, #6, #10
    8802:	b138      	cbz	r0, 8814 <sendCSW+0x4c>
    8804:	490a      	ldr	r1, [pc, #40]	; (8830 <sendCSW+0x68>)
    8806:	4610      	mov	r0, r2
    8808:	f00a ffd8 	bl	137bc <log_from_user>
	stage = MSC_WAIT_CSW;
    880c:	4b09      	ldr	r3, [pc, #36]	; (8834 <sendCSW+0x6c>)
    880e:	2204      	movs	r2, #4
    8810:	701a      	strb	r2, [r3, #0]
}
    8812:	bd08      	pop	{r3, pc}
		LOG_ERR("usb write failure");
    8814:	4611      	mov	r1, r2
    8816:	4806      	ldr	r0, [pc, #24]	; (8830 <sendCSW+0x68>)
    8818:	f00a ff68 	bl	136ec <log_0>
    881c:	e7f6      	b.n	880c <sendCSW+0x44>
    881e:	bf00      	nop
    8820:	20005c32 	.word	0x20005c32
    8824:	2000c6b0 	.word	0x2000c6b0
    8828:	00018f84 	.word	0x00018f84
    882c:	00018fc4 	.word	0x00018fc4
    8830:	0001b1cc 	.word	0x0001b1cc
    8834:	20005e81 	.word	0x20005e81

00008838 <infoTransfer>:
{
    8838:	b538      	push	{r3, r4, r5, lr}
    883a:	4921      	ldr	r1, [pc, #132]	; (88c0 <infoTransfer+0x88>)
    883c:	f8d1 2011 	ldr.w	r2, [r1, #17]
    8840:	ba12      	rev	r2, r2
    8842:	f00c facd 	bl	14de0 <z_arch_is_user_context>
	addr = n * BLOCK_SIZE;
    8846:	4b1f      	ldr	r3, [pc, #124]	; (88c4 <infoTransfer+0x8c>)
    8848:	0250      	lsls	r0, r2, #9
    884a:	6018      	str	r0, [r3, #0]
	switch (cbw.CB[0]) {
    884c:	7bcb      	ldrb	r3, [r1, #15]
    884e:	2b2f      	cmp	r3, #47	; 0x2f
    8850:	d004      	beq.n	885c <infoTransfer+0x24>
    8852:	d807      	bhi.n	8864 <infoTransfer+0x2c>
    8854:	2b28      	cmp	r3, #40	; 0x28
    8856:	d001      	beq.n	885c <infoTransfer+0x24>
    8858:	2b2a      	cmp	r3, #42	; 0x2a
    885a:	d107      	bne.n	886c <infoTransfer+0x34>
		n = (cbw.CB[7] <<  8) | (cbw.CB[8] <<  0);
    885c:	8aca      	ldrh	r2, [r1, #22]
    885e:	ba52      	rev16	r2, r2
    8860:	b292      	uxth	r2, r2
		break;
    8862:	e003      	b.n	886c <infoTransfer+0x34>
	switch (cbw.CB[0]) {
    8864:	2ba8      	cmp	r3, #168	; 0xa8
    8866:	d011      	beq.n	888c <infoTransfer+0x54>
    8868:	2baa      	cmp	r3, #170	; 0xaa
    886a:	d00f      	beq.n	888c <infoTransfer+0x54>
    886c:	f00c fab8 	bl	14de0 <z_arch_is_user_context>
	length = n * BLOCK_SIZE;
    8870:	4b15      	ldr	r3, [pc, #84]	; (88c8 <infoTransfer+0x90>)
    8872:	0252      	lsls	r2, r2, #9
    8874:	601a      	str	r2, [r3, #0]
	if (!cbw.DataLength) {              /* host requests no data*/
    8876:	688d      	ldr	r5, [r1, #8]
    8878:	2401      	movs	r4, #1
    887a:	b95d      	cbnz	r5, 8894 <infoTransfer+0x5c>
    887c:	f00c fab0 	bl	14de0 <z_arch_is_user_context>
		csw.Status = CSW_FAILED;
    8880:	4b12      	ldr	r3, [pc, #72]	; (88cc <infoTransfer+0x94>)
    8882:	731c      	strb	r4, [r3, #12]
		sendCSW();
    8884:	f7ff ffa0 	bl	87c8 <sendCSW>
		return false;
    8888:	2000      	movs	r0, #0
}
    888a:	bd38      	pop	{r3, r4, r5, pc}
		n = (cbw.CB[6] << 24) | (cbw.CB[7] << 16) |
    888c:	f8d1 2015 	ldr.w	r2, [r1, #21]
    8890:	ba12      	rev	r2, r2
		break;
    8892:	e7eb      	b.n	886c <infoTransfer+0x34>
	if (cbw.DataLength != length) {
    8894:	42aa      	cmp	r2, r5
    8896:	d011      	beq.n	88bc <infoTransfer+0x84>
		if ((cbw.Flags & 0x80) != 0U) {
    8898:	f991 300c 	ldrsb.w	r3, [r1, #12]
    889c:	4a0c      	ldr	r2, [pc, #48]	; (88d0 <infoTransfer+0x98>)
    889e:	2b00      	cmp	r3, #0
    88a0:	da08      	bge.n	88b4 <infoTransfer+0x7c>
    88a2:	f00c fa9d 	bl	14de0 <z_arch_is_user_context>
			usb_ep_set_stall(mass_ep_data[MSD_IN_EP_IDX].ep_addr);
    88a6:	7b10      	ldrb	r0, [r2, #12]
			usb_ep_set_stall(mass_ep_data[MSD_OUT_EP_IDX].ep_addr);
    88a8:	f00c fa88 	bl	14dbc <usb_ep_set_stall>
		csw.Status = CSW_FAILED;
    88ac:	4b07      	ldr	r3, [pc, #28]	; (88cc <infoTransfer+0x94>)
    88ae:	2201      	movs	r2, #1
    88b0:	731a      	strb	r2, [r3, #12]
    88b2:	e7e7      	b.n	8884 <infoTransfer+0x4c>
    88b4:	f00c fa94 	bl	14de0 <z_arch_is_user_context>
			usb_ep_set_stall(mass_ep_data[MSD_OUT_EP_IDX].ep_addr);
    88b8:	7910      	ldrb	r0, [r2, #4]
    88ba:	e7f5      	b.n	88a8 <infoTransfer+0x70>
	return true;
    88bc:	4620      	mov	r0, r4
    88be:	e7e4      	b.n	888a <infoTransfer+0x52>
    88c0:	20005c13 	.word	0x20005c13
    88c4:	20002b48 	.word	0x20002b48
    88c8:	20002b6c 	.word	0x20002b6c
    88cc:	20005c32 	.word	0x20005c32
    88d0:	2000c6b0 	.word	0x2000c6b0

000088d4 <msd_init>:
{
    88d4:	b508      	push	{r3, lr}
	(void)memset((void *)&cbw, 0, sizeof(struct CBW));
    88d6:	221f      	movs	r2, #31
    88d8:	2100      	movs	r1, #0
    88da:	480a      	ldr	r0, [pc, #40]	; (8904 <msd_init+0x30>)
    88dc:	f7f9 fd89 	bl	23f2 <memset>
	(void)memset((void *)&csw, 0, sizeof(struct CSW));
    88e0:	220d      	movs	r2, #13
    88e2:	2100      	movs	r1, #0
    88e4:	4808      	ldr	r0, [pc, #32]	; (8908 <msd_init+0x34>)
    88e6:	f7f9 fd84 	bl	23f2 <memset>
	(void)memset(page, 0, sizeof(page));
    88ea:	f44f 7200 	mov.w	r2, #512	; 0x200
    88ee:	2100      	movs	r1, #0
    88f0:	4806      	ldr	r0, [pc, #24]	; (890c <msd_init+0x38>)
    88f2:	f7f9 fd7e 	bl	23f2 <memset>
	addr = 0U;
    88f6:	4a06      	ldr	r2, [pc, #24]	; (8910 <msd_init+0x3c>)
    88f8:	2300      	movs	r3, #0
    88fa:	6013      	str	r3, [r2, #0]
	length = 0U;
    88fc:	4a05      	ldr	r2, [pc, #20]	; (8914 <msd_init+0x40>)
    88fe:	6013      	str	r3, [r2, #0]
}
    8900:	bd08      	pop	{r3, pc}
    8902:	bf00      	nop
    8904:	20005c13 	.word	0x20005c13
    8908:	20005c32 	.word	0x20005c32
    890c:	20005c81 	.word	0x20005c81
    8910:	20002b48 	.word	0x20002b48
    8914:	20002b6c 	.word	0x20002b6c

00008918 <mass_storage_class_handle_req>:
{
    8918:	b538      	push	{r3, r4, r5, lr}
	if (sys_le16_to_cpu(pSetup->wIndex) != mass_cfg.if0.bInterfaceNumber ||
    891a:	4b12      	ldr	r3, [pc, #72]	; (8964 <mass_storage_class_handle_req+0x4c>)
{
    891c:	4605      	mov	r5, r0
	if (sys_le16_to_cpu(pSetup->wIndex) != mass_cfg.if0.bInterfaceNumber ||
    891e:	789b      	ldrb	r3, [r3, #2]
    8920:	8880      	ldrh	r0, [r0, #4]
    8922:	4298      	cmp	r0, r3
    8924:	d101      	bne.n	892a <mass_storage_class_handle_req+0x12>
    8926:	886c      	ldrh	r4, [r5, #2]
    8928:	b124      	cbz	r4, 8934 <mass_storage_class_handle_req+0x1c>
    892a:	f00c fa59 	bl	14de0 <z_arch_is_user_context>
		return -EINVAL;
    892e:	f06f 0015 	mvn.w	r0, #21
    8932:	e00b      	b.n	894c <mass_storage_class_handle_req+0x34>
	switch (pSetup->bRequest) {
    8934:	786b      	ldrb	r3, [r5, #1]
    8936:	2bfe      	cmp	r3, #254	; 0xfe
    8938:	d009      	beq.n	894e <mass_storage_class_handle_req+0x36>
    893a:	2bff      	cmp	r3, #255	; 0xff
    893c:	d1f5      	bne.n	892a <mass_storage_class_handle_req+0x12>
    893e:	f00c fa4f 	bl	14de0 <z_arch_is_user_context>
		if (sys_le16_to_cpu(pSetup->wLength)) {
    8942:	88e8      	ldrh	r0, [r5, #6]
    8944:	2800      	cmp	r0, #0
    8946:	d1f0      	bne.n	892a <mass_storage_class_handle_req+0x12>
	stage = MSC_READ_CBW;
    8948:	4b07      	ldr	r3, [pc, #28]	; (8968 <mass_storage_class_handle_req+0x50>)
    894a:	7018      	strb	r0, [r3, #0]
}
    894c:	bd38      	pop	{r3, r4, r5, pc}
    894e:	f00c fa47 	bl	14de0 <z_arch_is_user_context>
		if (sys_le16_to_cpu(pSetup->wLength) != 1) {
    8952:	88eb      	ldrh	r3, [r5, #6]
    8954:	2b01      	cmp	r3, #1
    8956:	d1e8      	bne.n	892a <mass_storage_class_handle_req+0x12>
		max_lun_count = 0U;
    8958:	4804      	ldr	r0, [pc, #16]	; (896c <mass_storage_class_handle_req+0x54>)
    895a:	7004      	strb	r4, [r0, #0]
		*data = (u8_t *)(&max_lun_count);
    895c:	6010      	str	r0, [r2, #0]
		*len = 1;
    895e:	600b      	str	r3, [r1, #0]
	return 0;
    8960:	4620      	mov	r0, r4
    8962:	e7f3      	b.n	894c <mass_storage_class_handle_req+0x34>
    8964:	20011c47 	.word	0x20011c47
    8968:	20005e81 	.word	0x20005e81
    896c:	20005c7f 	.word	0x20005c7f

00008970 <write>:
{
    8970:	b510      	push	{r4, lr}
	if (size >= cbw.DataLength) {
    8972:	4b18      	ldr	r3, [pc, #96]	; (89d4 <write+0x64>)
    8974:	689b      	ldr	r3, [r3, #8]
    8976:	4299      	cmp	r1, r3
{
    8978:	460c      	mov	r4, r1
		size = cbw.DataLength;
    897a:	bf28      	it	cs
    897c:	b29c      	uxthcs	r4, r3
	if (usb_write(mass_ep_data[MSD_IN_EP_IDX].ep_addr, buf, size, NULL)) {
    897e:	4601      	mov	r1, r0
	stage = MSC_SEND_CSW;
    8980:	4b15      	ldr	r3, [pc, #84]	; (89d8 <write+0x68>)
	if (usb_write(mass_ep_data[MSD_IN_EP_IDX].ep_addr, buf, size, NULL)) {
    8982:	4816      	ldr	r0, [pc, #88]	; (89dc <write+0x6c>)
	stage = MSC_SEND_CSW;
    8984:	2203      	movs	r2, #3
    8986:	701a      	strb	r2, [r3, #0]
	if (usb_write(mass_ep_data[MSD_IN_EP_IDX].ep_addr, buf, size, NULL)) {
    8988:	7b00      	ldrb	r0, [r0, #12]
    898a:	2300      	movs	r3, #0
    898c:	4622      	mov	r2, r4
    898e:	f00c fa13 	bl	14db8 <usb_write>
    8992:	b1c0      	cbz	r0, 89c6 <write+0x56>
    8994:	f00c fa24 	bl	14de0 <z_arch_is_user_context>
		LOG_ERR("USB write failed");
    8998:	2301      	movs	r3, #1
    899a:	f04f 0200 	mov.w	r2, #0
    899e:	f363 0207 	bfi	r2, r3, #0, #8
    89a2:	490f      	ldr	r1, [pc, #60]	; (89e0 <write+0x70>)
    89a4:	4b0f      	ldr	r3, [pc, #60]	; (89e4 <write+0x74>)
    89a6:	1a5b      	subs	r3, r3, r1
    89a8:	08db      	lsrs	r3, r3, #3
    89aa:	f363 128f 	bfi	r2, r3, #6, #10
    89ae:	b128      	cbz	r0, 89bc <write+0x4c>
    89b0:	490d      	ldr	r1, [pc, #52]	; (89e8 <write+0x78>)
    89b2:	4610      	mov	r0, r2
    89b4:	f00a ff02 	bl	137bc <log_from_user>
		return false;
    89b8:	2000      	movs	r0, #0
}
    89ba:	bd10      	pop	{r4, pc}
		LOG_ERR("USB write failed");
    89bc:	4611      	mov	r1, r2
    89be:	480a      	ldr	r0, [pc, #40]	; (89e8 <write+0x78>)
    89c0:	f00a fe94 	bl	136ec <log_0>
    89c4:	e7f8      	b.n	89b8 <write+0x48>
	csw.DataResidue -= size;
    89c6:	4b09      	ldr	r3, [pc, #36]	; (89ec <write+0x7c>)
    89c8:	689a      	ldr	r2, [r3, #8]
	csw.Status = CSW_PASSED;
    89ca:	7318      	strb	r0, [r3, #12]
	csw.DataResidue -= size;
    89cc:	1b14      	subs	r4, r2, r4
    89ce:	609c      	str	r4, [r3, #8]
	return true;
    89d0:	2001      	movs	r0, #1
    89d2:	e7f2      	b.n	89ba <write+0x4a>
    89d4:	20005c13 	.word	0x20005c13
    89d8:	20005e81 	.word	0x20005e81
    89dc:	2000c6b0 	.word	0x2000c6b0
    89e0:	00018f84 	.word	0x00018f84
    89e4:	00018fc4 	.word	0x00018fc4
    89e8:	0001b1e6 	.word	0x0001b1e6
    89ec:	20005c32 	.word	0x20005c32

000089f0 <mass_storage_status_cb>:
	switch (status) {
    89f0:	2901      	cmp	r1, #1
{
    89f2:	b508      	push	{r3, lr}
	switch (status) {
    89f4:	d005      	beq.n	8a02 <mass_storage_status_cb+0x12>
    89f6:	290a      	cmp	r1, #10
    89f8:	d00c      	beq.n	8a14 <mass_storage_status_cb+0x24>
}
    89fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    89fe:	f00c b9ef 	b.w	14de0 <z_arch_is_user_context>
    8a02:	f00c f9ed 	bl	14de0 <z_arch_is_user_context>
	stage = MSC_READ_CBW;
    8a06:	4b04      	ldr	r3, [pc, #16]	; (8a18 <mass_storage_status_cb+0x28>)
    8a08:	2200      	movs	r2, #0
    8a0a:	701a      	strb	r2, [r3, #0]
}
    8a0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		msd_init();
    8a10:	f7ff bf60 	b.w	88d4 <msd_init>
}
    8a14:	bd08      	pop	{r3, pc}
    8a16:	bf00      	nop
    8a18:	20005e81 	.word	0x20005e81

00008a1c <k_sem_give.constprop.5>:

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    8a1c:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
    8a20:	f00c f9de 	bl	14de0 <z_arch_is_user_context>
    8a24:	b120      	cbz	r0, 8a30 <k_sem_give.constprop.5+0x14>
	register u32_t ret __asm__("r0") = arg1;
    8a26:	4805      	ldr	r0, [pc, #20]	; (8a3c <k_sem_give.constprop.5+0x20>)
	register u32_t r6 __asm__("r6") = call_id;
    8a28:	265a      	movs	r6, #90	; 0x5a
	__asm__ volatile("svc %[svid]\n"
    8a2a:	df03      	svc	3
    8a2c:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
    8a30:	4802      	ldr	r0, [pc, #8]	; (8a3c <k_sem_give.constprop.5+0x20>)
    8a32:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
    8a36:	f007 bb51 	b.w	100dc <z_impl_k_sem_give>
    8a3a:	bf00      	nop
    8a3c:	20002b54 	.word	0x20002b54

00008a40 <memoryRead>:
{
    8a40:	b570      	push	{r4, r5, r6, lr}
	n = (length > MAX_PACKET) ? MAX_PACKET : length;
    8a42:	4d1e      	ldr	r5, [pc, #120]	; (8abc <memoryRead+0x7c>)
	if ((addr + n) > memory_size) {
    8a44:	4e1e      	ldr	r6, [pc, #120]	; (8ac0 <memoryRead+0x80>)
	n = (length > MAX_PACKET) ? MAX_PACKET : length;
    8a46:	682c      	ldr	r4, [r5, #0]
	if ((addr + n) > memory_size) {
    8a48:	4b1e      	ldr	r3, [pc, #120]	; (8ac4 <memoryRead+0x84>)
    8a4a:	6831      	ldr	r1, [r6, #0]
    8a4c:	681b      	ldr	r3, [r3, #0]
	n = (length > MAX_PACKET) ? MAX_PACKET : length;
    8a4e:	2c40      	cmp	r4, #64	; 0x40
    8a50:	bf28      	it	cs
    8a52:	2440      	movcs	r4, #64	; 0x40
	if ((addr + n) > memory_size) {
    8a54:	190a      	adds	r2, r1, r4
    8a56:	429a      	cmp	r2, r3
		n = memory_size - addr;
    8a58:	bf82      	ittt	hi
    8a5a:	1a5c      	subhi	r4, r3, r1
		stage = MSC_ERROR;
    8a5c:	4b1a      	ldrhi	r3, [pc, #104]	; (8ac8 <memoryRead+0x88>)
    8a5e:	2201      	movhi	r2, #1
	if (!(addr % BLOCK_SIZE)) {
    8a60:	f3c1 0108 	ubfx	r1, r1, #0, #9
		stage = MSC_ERROR;
    8a64:	bf88      	it	hi
    8a66:	701a      	strbhi	r2, [r3, #0]
	if (!(addr % BLOCK_SIZE)) {
    8a68:	b941      	cbnz	r1, 8a7c <memoryRead+0x3c>
		thread_op = THREAD_OP_READ_QUEUED;
    8a6a:	4b18      	ldr	r3, [pc, #96]	; (8acc <memoryRead+0x8c>)
    8a6c:	2201      	movs	r2, #1
    8a6e:	601a      	str	r2, [r3, #0]
    8a70:	f00c f9b6 	bl	14de0 <z_arch_is_user_context>
}
    8a74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_sem_give(&disk_wait_sem);
    8a78:	f7ff bfd0 	b.w	8a1c <k_sem_give.constprop.5>
	usb_write(mass_ep_data[MSD_IN_EP_IDX].ep_addr,
    8a7c:	4814      	ldr	r0, [pc, #80]	; (8ad0 <memoryRead+0x90>)
    8a7e:	4401      	add	r1, r0
    8a80:	4814      	ldr	r0, [pc, #80]	; (8ad4 <memoryRead+0x94>)
    8a82:	4622      	mov	r2, r4
    8a84:	2300      	movs	r3, #0
    8a86:	7b00      	ldrb	r0, [r0, #12]
    8a88:	f00c f996 	bl	14db8 <usb_write>
	addr += n;
    8a8c:	6833      	ldr	r3, [r6, #0]
	length -= n;
    8a8e:	682a      	ldr	r2, [r5, #0]
	addr += n;
    8a90:	4423      	add	r3, r4
    8a92:	6033      	str	r3, [r6, #0]
	length -= n;
    8a94:	1b12      	subs	r2, r2, r4
	csw.DataResidue -= n;
    8a96:	4b10      	ldr	r3, [pc, #64]	; (8ad8 <memoryRead+0x98>)
	length -= n;
    8a98:	602a      	str	r2, [r5, #0]
	csw.DataResidue -= n;
    8a9a:	6899      	ldr	r1, [r3, #8]
    8a9c:	1b0c      	subs	r4, r1, r4
    8a9e:	609c      	str	r4, [r3, #8]
	if (!length || (stage != MSC_PROCESS_CBW)) {
    8aa0:	4909      	ldr	r1, [pc, #36]	; (8ac8 <memoryRead+0x88>)
    8aa2:	b112      	cbz	r2, 8aaa <memoryRead+0x6a>
    8aa4:	780a      	ldrb	r2, [r1, #0]
    8aa6:	2a02      	cmp	r2, #2
    8aa8:	d007      	beq.n	8aba <memoryRead+0x7a>
			CSW_PASSED : CSW_FAILED;
    8aaa:	780a      	ldrb	r2, [r1, #0]
    8aac:	2a02      	cmp	r2, #2
    8aae:	bf12      	itee	ne
    8ab0:	2001      	movne	r0, #1
    8ab2:	2000      	moveq	r0, #0
		stage = (stage == MSC_PROCESS_CBW) ? MSC_SEND_CSW : stage;
    8ab4:	2203      	moveq	r2, #3
			CSW_PASSED : CSW_FAILED;
    8ab6:	7318      	strb	r0, [r3, #12]
		stage = (stage == MSC_PROCESS_CBW) ? MSC_SEND_CSW : stage;
    8ab8:	700a      	strb	r2, [r1, #0]
}
    8aba:	bd70      	pop	{r4, r5, r6, pc}
    8abc:	20002b6c 	.word	0x20002b6c
    8ac0:	20002b48 	.word	0x20002b48
    8ac4:	20002bf4 	.word	0x20002bf4
    8ac8:	20005e81 	.word	0x20005e81
    8acc:	20002bf8 	.word	0x20002bf8
    8ad0:	20005c81 	.word	0x20005c81
    8ad4:	2000c6b0 	.word	0x2000c6b0
    8ad8:	20005c32 	.word	0x20005c32

00008adc <mass_storage_bulk_in>:
	switch (stage) {
    8adc:	4a1f      	ldr	r2, [pc, #124]	; (8b5c <mass_storage_bulk_in+0x80>)
{
    8ade:	b508      	push	{r3, lr}
	switch (stage) {
    8ae0:	7813      	ldrb	r3, [r2, #0]
    8ae2:	2b03      	cmp	r3, #3
    8ae4:	d027      	beq.n	8b36 <mass_storage_bulk_in+0x5a>
    8ae6:	2b04      	cmp	r3, #4
    8ae8:	d02b      	beq.n	8b42 <mass_storage_bulk_in+0x66>
    8aea:	2b02      	cmp	r3, #2
    8aec:	d12e      	bne.n	8b4c <mass_storage_bulk_in+0x70>
		switch (cbw.CB[0]) {
    8aee:	4b1c      	ldr	r3, [pc, #112]	; (8b60 <mass_storage_bulk_in+0x84>)
    8af0:	7bdb      	ldrb	r3, [r3, #15]
    8af2:	2b28      	cmp	r3, #40	; 0x28
    8af4:	d001      	beq.n	8afa <mass_storage_bulk_in+0x1e>
    8af6:	2ba8      	cmp	r3, #168	; 0xa8
    8af8:	d103      	bne.n	8b02 <mass_storage_bulk_in+0x26>
}
    8afa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			memoryRead();
    8afe:	f7ff bf9f 	b.w	8a40 <memoryRead>
    8b02:	f00c f96d 	bl	14de0 <z_arch_is_user_context>
			LOG_ERR("< BI-PROC_CBW default <<ERROR!!>>");
    8b06:	2301      	movs	r3, #1
    8b08:	f04f 0200 	mov.w	r2, #0
    8b0c:	f363 0207 	bfi	r2, r3, #0, #8
    8b10:	4914      	ldr	r1, [pc, #80]	; (8b64 <mass_storage_bulk_in+0x88>)
    8b12:	4b15      	ldr	r3, [pc, #84]	; (8b68 <mass_storage_bulk_in+0x8c>)
    8b14:	1a5b      	subs	r3, r3, r1
    8b16:	08db      	lsrs	r3, r3, #3
    8b18:	f363 128f 	bfi	r2, r3, #6, #10
    8b1c:	b128      	cbz	r0, 8b2a <mass_storage_bulk_in+0x4e>
    8b1e:	4913      	ldr	r1, [pc, #76]	; (8b6c <mass_storage_bulk_in+0x90>)
    8b20:	4610      	mov	r0, r2
}
    8b22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			LOG_ERR("< BI-PROC_CBW default <<ERROR!!>>");
    8b26:	f00a be49 	b.w	137bc <log_from_user>
    8b2a:	4611      	mov	r1, r2
    8b2c:	480f      	ldr	r0, [pc, #60]	; (8b6c <mass_storage_bulk_in+0x90>)
}
    8b2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			LOG_ERR("< BI-PROC_CBW default <<ERROR!!>>");
    8b32:	f00a bddb 	b.w	136ec <log_0>
    8b36:	f00c f953 	bl	14de0 <z_arch_is_user_context>
}
    8b3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		sendCSW();
    8b3e:	f7ff be43 	b.w	87c8 <sendCSW>
    8b42:	f00c f94d 	bl	14de0 <z_arch_is_user_context>
		stage = MSC_READ_CBW;
    8b46:	2300      	movs	r3, #0
    8b48:	7013      	strb	r3, [r2, #0]
}
    8b4a:	bd08      	pop	{r3, pc}
    8b4c:	f00c f948 	bl	14de0 <z_arch_is_user_context>
		usb_ep_set_stall(mass_ep_data[MSD_IN_EP_IDX].ep_addr);
    8b50:	4b07      	ldr	r3, [pc, #28]	; (8b70 <mass_storage_bulk_in+0x94>)
    8b52:	7b18      	ldrb	r0, [r3, #12]
    8b54:	f00c f932 	bl	14dbc <usb_ep_set_stall>
    8b58:	e7ef      	b.n	8b3a <mass_storage_bulk_in+0x5e>
    8b5a:	bf00      	nop
    8b5c:	20005e81 	.word	0x20005e81
    8b60:	20005c13 	.word	0x20005c13
    8b64:	00018f84 	.word	0x00018f84
    8b68:	00018fc4 	.word	0x00018fc4
    8b6c:	0001afbe 	.word	0x0001afbe
    8b70:	2000c6b0 	.word	0x2000c6b0

00008b74 <mass_thread_main>:
	.num_endpoints = ARRAY_SIZE(mass_ep_data),
	.endpoint = mass_ep_data
};

static void mass_thread_main(int arg1, int unused)
{
    8b74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b78:	4c73      	ldr	r4, [pc, #460]	; (8d48 <mass_thread_main+0x1d4>)
			thread_memory_read_done();
			break;
		case THREAD_OP_WRITE_QUEUED:
			if (disk_access_write(disk_pdrv,
						page, (addr/BLOCK_SIZE), 1)) {
				LOG_ERR("!!!!! Disk Write Error %d !!!!!",
    8b7a:	4b74      	ldr	r3, [pc, #464]	; (8d4c <mass_thread_main+0x1d8>)
    8b7c:	1ae4      	subs	r4, r4, r3
    8b7e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    8b82:	f00c f92d 	bl	14de0 <z_arch_is_user_context>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    8b86:	b308      	cbz	r0, 8bcc <mass_thread_main+0x58>
	register u32_t ret __asm__("r0") = arg1;
    8b88:	4871      	ldr	r0, [pc, #452]	; (8d50 <mass_thread_main+0x1dc>)
	register u32_t r1 __asm__("r1") = arg2;
    8b8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	register u32_t r6 __asm__("r6") = call_id;
    8b8e:	265d      	movs	r6, #93	; 0x5d
	__asm__ volatile("svc %[svid]\n"
    8b90:	df03      	svc	3
    8b92:	f00c f925 	bl	14de0 <z_arch_is_user_context>
		switch (thread_op) {
    8b96:	4b6f      	ldr	r3, [pc, #444]	; (8d54 <mass_thread_main+0x1e0>)
    8b98:	681b      	ldr	r3, [r3, #0]
    8b9a:	2b01      	cmp	r3, #1
    8b9c:	d01c      	beq.n	8bd8 <mass_thread_main+0x64>
    8b9e:	2b03      	cmp	r3, #3
    8ba0:	f000 808b 	beq.w	8cba <mass_thread_main+0x146>
    8ba4:	f00c f91c 	bl	14de0 <z_arch_is_user_context>
					addr/BLOCK_SIZE);
			}
			thread_memory_write_done();
			break;
		default:
			LOG_ERR("XXXXXX thread_op  %d ! XXXXX", thread_op);
    8ba8:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
    8bac:	f043 0301 	orr.w	r3, r3, #1
    8bb0:	f363 0707 	bfi	r7, r3, #0, #8
    8bb4:	f364 178f 	bfi	r7, r4, #6, #10
    8bb8:	4b66      	ldr	r3, [pc, #408]	; (8d54 <mass_thread_main+0x1e0>)
    8bba:	2800      	cmp	r0, #0
    8bbc:	f000 80bd 	beq.w	8d3a <mass_thread_main+0x1c6>
    8bc0:	681a      	ldr	r2, [r3, #0]
    8bc2:	4965      	ldr	r1, [pc, #404]	; (8d58 <mass_thread_main+0x1e4>)
    8bc4:	4638      	mov	r0, r7
    8bc6:	f00a fdf9 	bl	137bc <log_from_user>
    8bca:	e7da      	b.n	8b82 <mass_thread_main+0xe>
    8bcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8bd0:	485f      	ldr	r0, [pc, #380]	; (8d50 <mass_thread_main+0x1dc>)
    8bd2:	f007 fac9 	bl	10168 <z_impl_k_sem_take>
    8bd6:	e7dc      	b.n	8b92 <mass_thread_main+0x1e>
			if (disk_access_read(disk_pdrv,
    8bd8:	4e60      	ldr	r6, [pc, #384]	; (8d5c <mass_thread_main+0x1e8>)
    8bda:	4961      	ldr	r1, [pc, #388]	; (8d60 <mass_thread_main+0x1ec>)
    8bdc:	6832      	ldr	r2, [r6, #0]
    8bde:	4861      	ldr	r0, [pc, #388]	; (8d64 <mass_thread_main+0x1f0>)
    8be0:	0a52      	lsrs	r2, r2, #9
    8be2:	f00b fa96 	bl	14112 <disk_access_read>
    8be6:	b190      	cbz	r0, 8c0e <mass_thread_main+0x9a>
    8be8:	f00c f8fa 	bl	14de0 <z_arch_is_user_context>
				LOG_ERR("!! Disk Read Error %d !",
    8bec:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
    8bf0:	f043 0301 	orr.w	r3, r3, #1
    8bf4:	6831      	ldr	r1, [r6, #0]
    8bf6:	f363 0a07 	bfi	sl, r3, #0, #8
    8bfa:	f364 1a8f 	bfi	sl, r4, #6, #10
    8bfe:	0a49      	lsrs	r1, r1, #9
    8c00:	2800      	cmp	r0, #0
    8c02:	d050      	beq.n	8ca6 <mass_thread_main+0x132>
    8c04:	460a      	mov	r2, r1
    8c06:	4650      	mov	r0, sl
    8c08:	4957      	ldr	r1, [pc, #348]	; (8d68 <mass_thread_main+0x1f4>)
    8c0a:	f00a fdd7 	bl	137bc <log_from_user>
	n = (length > MAX_PACKET) ? MAX_PACKET : length;
    8c0e:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8d88 <mass_thread_main+0x214>
	if ((addr + n) > memory_size) {
    8c12:	4b56      	ldr	r3, [pc, #344]	; (8d6c <mass_thread_main+0x1f8>)
	n = (length > MAX_PACKET) ? MAX_PACKET : length;
    8c14:	f8d8 5000 	ldr.w	r5, [r8]
	if ((addr + n) > memory_size) {
    8c18:	6831      	ldr	r1, [r6, #0]
    8c1a:	681b      	ldr	r3, [r3, #0]
	if (usb_write(mass_ep_data[MSD_IN_EP_IDX].ep_addr,
    8c1c:	4850      	ldr	r0, [pc, #320]	; (8d60 <mass_thread_main+0x1ec>)
	n = (length > MAX_PACKET) ? MAX_PACKET : length;
    8c1e:	2d40      	cmp	r5, #64	; 0x40
    8c20:	bf28      	it	cs
    8c22:	2540      	movcs	r5, #64	; 0x40
	if ((addr + n) > memory_size) {
    8c24:	186a      	adds	r2, r5, r1
    8c26:	429a      	cmp	r2, r3
		n = memory_size - addr;
    8c28:	bf88      	it	hi
    8c2a:	1a5d      	subhi	r5, r3, r1
		&page[addr % BLOCK_SIZE], n, NULL) != 0) {
    8c2c:	f3c1 0108 	ubfx	r1, r1, #0, #9
		stage = MSC_ERROR;
    8c30:	bf88      	it	hi
    8c32:	4a4f      	ldrhi	r2, [pc, #316]	; (8d70 <mass_thread_main+0x1fc>)
	if (usb_write(mass_ep_data[MSD_IN_EP_IDX].ep_addr,
    8c34:	4401      	add	r1, r0
    8c36:	484f      	ldr	r0, [pc, #316]	; (8d74 <mass_thread_main+0x200>)
		stage = MSC_ERROR;
    8c38:	bf84      	itt	hi
    8c3a:	2301      	movhi	r3, #1
    8c3c:	7013      	strbhi	r3, [r2, #0]
	if (usb_write(mass_ep_data[MSD_IN_EP_IDX].ep_addr,
    8c3e:	7b00      	ldrb	r0, [r0, #12]
    8c40:	2300      	movs	r3, #0
    8c42:	462a      	mov	r2, r5
    8c44:	f00c f8b8 	bl	14db8 <usb_write>
    8c48:	b188      	cbz	r0, 8c6e <mass_thread_main+0xfa>
    8c4a:	f00c f8c9 	bl	14de0 <z_arch_is_user_context>
		LOG_ERR("Failed to write EP 0x%x",
    8c4e:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    8c52:	f043 0301 	orr.w	r3, r3, #1
    8c56:	f363 0907 	bfi	r9, r3, #0, #8
    8c5a:	4b46      	ldr	r3, [pc, #280]	; (8d74 <mass_thread_main+0x200>)
    8c5c:	f364 198f 	bfi	r9, r4, #6, #10
    8c60:	7b19      	ldrb	r1, [r3, #12]
    8c62:	b328      	cbz	r0, 8cb0 <mass_thread_main+0x13c>
    8c64:	460a      	mov	r2, r1
    8c66:	4648      	mov	r0, r9
    8c68:	4943      	ldr	r1, [pc, #268]	; (8d78 <mass_thread_main+0x204>)
    8c6a:	f00a fda7 	bl	137bc <log_from_user>
	addr += n;
    8c6e:	6833      	ldr	r3, [r6, #0]
	length -= n;
    8c70:	f8d8 2000 	ldr.w	r2, [r8]
	csw.DataResidue -= n;
    8c74:	4941      	ldr	r1, [pc, #260]	; (8d7c <mass_thread_main+0x208>)
	addr += n;
    8c76:	442b      	add	r3, r5
	length -= n;
    8c78:	1b52      	subs	r2, r2, r5
	addr += n;
    8c7a:	6033      	str	r3, [r6, #0]
	length -= n;
    8c7c:	f8c8 2000 	str.w	r2, [r8]
	csw.DataResidue -= n;
    8c80:	688b      	ldr	r3, [r1, #8]
    8c82:	1b5d      	subs	r5, r3, r5
    8c84:	4b3a      	ldr	r3, [pc, #232]	; (8d70 <mass_thread_main+0x1fc>)
    8c86:	608d      	str	r5, [r1, #8]
	if (!length || (stage != MSC_PROCESS_CBW)) {
    8c88:	781b      	ldrb	r3, [r3, #0]
    8c8a:	b112      	cbz	r2, 8c92 <mass_thread_main+0x11e>
    8c8c:	2b02      	cmp	r3, #2
    8c8e:	f43f af78 	beq.w	8b82 <mass_thread_main+0xe>
			CSW_PASSED : CSW_FAILED;
    8c92:	2b02      	cmp	r3, #2
    8c94:	bf14      	ite	ne
    8c96:	2201      	movne	r2, #1
    8c98:	2200      	moveq	r2, #0
    8c9a:	730a      	strb	r2, [r1, #12]
		stage = (stage == MSC_PROCESS_CBW) ? MSC_SEND_CSW : stage;
    8c9c:	4a34      	ldr	r2, [pc, #208]	; (8d70 <mass_thread_main+0x1fc>)
    8c9e:	bf08      	it	eq
    8ca0:	2303      	moveq	r3, #3
    8ca2:	7013      	strb	r3, [r2, #0]
    8ca4:	e76d      	b.n	8b82 <mass_thread_main+0xe>
				LOG_ERR("!! Disk Read Error %d !",
    8ca6:	4652      	mov	r2, sl
    8ca8:	482f      	ldr	r0, [pc, #188]	; (8d68 <mass_thread_main+0x1f4>)
    8caa:	f00a fd2c 	bl	13706 <log_1>
    8cae:	e7ae      	b.n	8c0e <mass_thread_main+0x9a>
		LOG_ERR("Failed to write EP 0x%x",
    8cb0:	464a      	mov	r2, r9
    8cb2:	4831      	ldr	r0, [pc, #196]	; (8d78 <mass_thread_main+0x204>)
    8cb4:	f00a fd27 	bl	13706 <log_1>
    8cb8:	e7d9      	b.n	8c6e <mass_thread_main+0xfa>
			if (disk_access_write(disk_pdrv,
    8cba:	4d28      	ldr	r5, [pc, #160]	; (8d5c <mass_thread_main+0x1e8>)
    8cbc:	4928      	ldr	r1, [pc, #160]	; (8d60 <mass_thread_main+0x1ec>)
    8cbe:	682a      	ldr	r2, [r5, #0]
    8cc0:	4828      	ldr	r0, [pc, #160]	; (8d64 <mass_thread_main+0x1f0>)
    8cc2:	2301      	movs	r3, #1
    8cc4:	0a52      	lsrs	r2, r2, #9
    8cc6:	f00b fa3b 	bl	14140 <disk_access_write>
    8cca:	b188      	cbz	r0, 8cf0 <mass_thread_main+0x17c>
    8ccc:	f00c f888 	bl	14de0 <z_arch_is_user_context>
				LOG_ERR("!!!!! Disk Write Error %d !!!!!",
    8cd0:	f02b 033f 	bic.w	r3, fp, #63	; 0x3f
    8cd4:	f043 0301 	orr.w	r3, r3, #1
    8cd8:	6829      	ldr	r1, [r5, #0]
    8cda:	f363 0b07 	bfi	fp, r3, #0, #8
    8cde:	f364 1b8f 	bfi	fp, r4, #6, #10
    8ce2:	0a49      	lsrs	r1, r1, #9
    8ce4:	b320      	cbz	r0, 8d30 <mass_thread_main+0x1bc>
    8ce6:	460a      	mov	r2, r1
    8ce8:	4658      	mov	r0, fp
    8cea:	4925      	ldr	r1, [pc, #148]	; (8d80 <mass_thread_main+0x20c>)
    8cec:	f00a fd66 	bl	137bc <log_from_user>
	u32_t size = defered_wr_sz;
    8cf0:	4b24      	ldr	r3, [pc, #144]	; (8d84 <mass_thread_main+0x210>)
	csw.DataResidue -= size;
    8cf2:	4922      	ldr	r1, [pc, #136]	; (8d7c <mass_thread_main+0x208>)
	u32_t size = defered_wr_sz;
    8cf4:	6818      	ldr	r0, [r3, #0]
	addr += size;
    8cf6:	682b      	ldr	r3, [r5, #0]
    8cf8:	4403      	add	r3, r0
    8cfa:	602b      	str	r3, [r5, #0]
	length -= size;
    8cfc:	4b22      	ldr	r3, [pc, #136]	; (8d88 <mass_thread_main+0x214>)
    8cfe:	681a      	ldr	r2, [r3, #0]
    8d00:	1a12      	subs	r2, r2, r0
    8d02:	601a      	str	r2, [r3, #0]
	csw.DataResidue -= size;
    8d04:	688b      	ldr	r3, [r1, #8]
    8d06:	1a1b      	subs	r3, r3, r0
    8d08:	608b      	str	r3, [r1, #8]
	if ((!length) || (stage != MSC_PROCESS_CBW)) {
    8d0a:	4b19      	ldr	r3, [pc, #100]	; (8d70 <mass_thread_main+0x1fc>)
    8d0c:	781b      	ldrb	r3, [r3, #0]
    8d0e:	b10a      	cbz	r2, 8d14 <mass_thread_main+0x1a0>
    8d10:	2b02      	cmp	r3, #2
    8d12:	d005      	beq.n	8d20 <mass_thread_main+0x1ac>
		csw.Status = (stage == MSC_ERROR) ? CSW_FAILED : CSW_PASSED;
    8d14:	1e5a      	subs	r2, r3, #1
    8d16:	4253      	negs	r3, r2
    8d18:	4153      	adcs	r3, r2
    8d1a:	730b      	strb	r3, [r1, #12]
		sendCSW();
    8d1c:	f7ff fd54 	bl	87c8 <sendCSW>
	thread_op = THREAD_OP_WRITE_DONE;
    8d20:	4a0c      	ldr	r2, [pc, #48]	; (8d54 <mass_thread_main+0x1e0>)
    8d22:	2304      	movs	r3, #4
    8d24:	6013      	str	r3, [r2, #0]
	usb_ep_read_continue(mass_ep_data[MSD_OUT_EP_IDX].ep_addr);
    8d26:	4b13      	ldr	r3, [pc, #76]	; (8d74 <mass_thread_main+0x200>)
    8d28:	7918      	ldrb	r0, [r3, #4]
    8d2a:	f00c f84b 	bl	14dc4 <usb_ep_read_continue>
    8d2e:	e728      	b.n	8b82 <mass_thread_main+0xe>
				LOG_ERR("!!!!! Disk Write Error %d !!!!!",
    8d30:	465a      	mov	r2, fp
    8d32:	4813      	ldr	r0, [pc, #76]	; (8d80 <mass_thread_main+0x20c>)
    8d34:	f00a fce7 	bl	13706 <log_1>
    8d38:	e7da      	b.n	8cf0 <mass_thread_main+0x17c>
			LOG_ERR("XXXXXX thread_op  %d ! XXXXX", thread_op);
    8d3a:	6819      	ldr	r1, [r3, #0]
    8d3c:	4806      	ldr	r0, [pc, #24]	; (8d58 <mass_thread_main+0x1e4>)
    8d3e:	463a      	mov	r2, r7
    8d40:	f00a fce1 	bl	13706 <log_1>
    8d44:	e71d      	b.n	8b82 <mass_thread_main+0xe>
    8d46:	bf00      	nop
    8d48:	00018fc4 	.word	0x00018fc4
    8d4c:	00018f84 	.word	0x00018f84
    8d50:	20002b54 	.word	0x20002b54
    8d54:	20002bf8 	.word	0x20002bf8
    8d58:	0001b1af 	.word	0x0001b1af
    8d5c:	20002b48 	.word	0x20002b48
    8d60:	20005c81 	.word	0x20005c81
    8d64:	0001ae0f 	.word	0x0001ae0f
    8d68:	0001b15f 	.word	0x0001b15f
    8d6c:	20002bf4 	.word	0x20002bf4
    8d70:	20005e81 	.word	0x20005e81
    8d74:	2000c6b0 	.word	0x2000c6b0
    8d78:	0001b177 	.word	0x0001b177
    8d7c:	20005c32 	.word	0x20005c32
    8d80:	0001b18f 	.word	0x0001b18f
    8d84:	20002b50 	.word	0x20002b50
    8d88:	20002b6c 	.word	0x20002b6c

00008d8c <mass_storage_init>:
 * @param dev device struct.
 *
 * @return negative errno code on fatal failure, 0 otherwise
 */
static int mass_storage_init(struct device *dev)
{
    8d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d90:	b08c      	sub	sp, #48	; 0x30
	u32_t block_size = 0U;
    8d92:	2300      	movs	r3, #0

	ARG_UNUSED(dev);

	if (disk_access_init(disk_pdrv) != 0) {
    8d94:	4877      	ldr	r0, [pc, #476]	; (8f74 <mass_storage_init+0x1e8>)
	u32_t block_size = 0U;
    8d96:	9306      	str	r3, [sp, #24]
	if (disk_access_init(disk_pdrv) != 0) {
    8d98:	f00b f99f 	bl	140da <disk_access_init>
    8d9c:	4607      	mov	r7, r0
    8d9e:	b1d8      	cbz	r0, 8dd8 <mass_storage_init+0x4c>
    8da0:	f00c f81e 	bl	14de0 <z_arch_is_user_context>
		LOG_ERR("Storage init ERROR !!!! - Aborting USB init");
    8da4:	2301      	movs	r3, #1
    8da6:	f04f 0200 	mov.w	r2, #0
    8daa:	f363 0207 	bfi	r2, r3, #0, #8
    8dae:	4972      	ldr	r1, [pc, #456]	; (8f78 <mass_storage_init+0x1ec>)
    8db0:	4b72      	ldr	r3, [pc, #456]	; (8f7c <mass_storage_init+0x1f0>)
    8db2:	1a5b      	subs	r3, r3, r1
    8db4:	08db      	lsrs	r3, r3, #3
    8db6:	f363 128f 	bfi	r2, r3, #6, #10
    8dba:	b140      	cbz	r0, 8dce <mass_storage_init+0x42>
    8dbc:	4970      	ldr	r1, [pc, #448]	; (8f80 <mass_storage_init+0x1f4>)
		return 0;
	}

	if (disk_access_ioctl(disk_pdrv,
				DISK_IOCTL_GET_SECTOR_SIZE, &block_size)) {
		LOG_ERR("Unable to get sector size - Aborting USB init");
    8dbe:	4610      	mov	r0, r2
    8dc0:	f00a fcfc 	bl	137bc <log_from_user>
		return 0;
    8dc4:	2700      	movs	r7, #0
			DISK_THREAD_STACK_SZ,
			(k_thread_entry_t)mass_thread_main, NULL, NULL, NULL,
			DISK_THREAD_PRIO, 0, 0);

	return 0;
}
    8dc6:	4638      	mov	r0, r7
    8dc8:	b00c      	add	sp, #48	; 0x30
    8dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Storage init ERROR !!!! - Aborting USB init");
    8dce:	486c      	ldr	r0, [pc, #432]	; (8f80 <mass_storage_init+0x1f4>)
    8dd0:	4611      	mov	r1, r2
		LOG_ERR("Unable to get sector size - Aborting USB init");
    8dd2:	f00a fc8b 	bl	136ec <log_0>
    8dd6:	e7f5      	b.n	8dc4 <mass_storage_init+0x38>
	if (disk_access_ioctl(disk_pdrv,
    8dd8:	4c6a      	ldr	r4, [pc, #424]	; (8f84 <mass_storage_init+0x1f8>)
    8dda:	4866      	ldr	r0, [pc, #408]	; (8f74 <mass_storage_init+0x1e8>)
    8ddc:	4622      	mov	r2, r4
    8dde:	2101      	movs	r1, #1
    8de0:	f00b f9c5 	bl	1416e <disk_access_ioctl>
    8de4:	b1b8      	cbz	r0, 8e16 <mass_storage_init+0x8a>
    8de6:	f00b fffb 	bl	14de0 <z_arch_is_user_context>
		LOG_ERR("Unable to get sector count - Aborting USB init");
    8dea:	2301      	movs	r3, #1
    8dec:	f04f 0200 	mov.w	r2, #0
    8df0:	f363 0207 	bfi	r2, r3, #0, #8
    8df4:	4960      	ldr	r1, [pc, #384]	; (8f78 <mass_storage_init+0x1ec>)
    8df6:	4b61      	ldr	r3, [pc, #388]	; (8f7c <mass_storage_init+0x1f0>)
    8df8:	1a5b      	subs	r3, r3, r1
    8dfa:	08db      	lsrs	r3, r3, #3
    8dfc:	f363 128f 	bfi	r2, r3, #6, #10
    8e00:	b120      	cbz	r0, 8e0c <mass_storage_init+0x80>
    8e02:	4961      	ldr	r1, [pc, #388]	; (8f88 <mass_storage_init+0x1fc>)
		LOG_ERR("Block Size reported by the storage side is "
    8e04:	4610      	mov	r0, r2
    8e06:	f00a fcd9 	bl	137bc <log_from_user>
    8e0a:	e7dc      	b.n	8dc6 <mass_storage_init+0x3a>
		LOG_ERR("Unable to get sector count - Aborting USB init");
    8e0c:	485e      	ldr	r0, [pc, #376]	; (8f88 <mass_storage_init+0x1fc>)
    8e0e:	4611      	mov	r1, r2
		LOG_ERR("Block Size reported by the storage side is "
    8e10:	f00a fc6c 	bl	136ec <log_0>
		return 0;
    8e14:	e7d7      	b.n	8dc6 <mass_storage_init+0x3a>
	if (disk_access_ioctl(disk_pdrv,
    8e16:	aa06      	add	r2, sp, #24
    8e18:	2102      	movs	r1, #2
    8e1a:	4856      	ldr	r0, [pc, #344]	; (8f74 <mass_storage_init+0x1e8>)
    8e1c:	f00b f9a7 	bl	1416e <disk_access_ioctl>
    8e20:	4607      	mov	r7, r0
    8e22:	b190      	cbz	r0, 8e4a <mass_storage_init+0xbe>
    8e24:	f00b ffdc 	bl	14de0 <z_arch_is_user_context>
		LOG_ERR("Unable to get sector size - Aborting USB init");
    8e28:	2301      	movs	r3, #1
    8e2a:	f04f 0200 	mov.w	r2, #0
    8e2e:	f363 0207 	bfi	r2, r3, #0, #8
    8e32:	4951      	ldr	r1, [pc, #324]	; (8f78 <mass_storage_init+0x1ec>)
    8e34:	4b51      	ldr	r3, [pc, #324]	; (8f7c <mass_storage_init+0x1f0>)
    8e36:	1a5b      	subs	r3, r3, r1
    8e38:	08db      	lsrs	r3, r3, #3
    8e3a:	f363 128f 	bfi	r2, r3, #6, #10
    8e3e:	b108      	cbz	r0, 8e44 <mass_storage_init+0xb8>
    8e40:	4952      	ldr	r1, [pc, #328]	; (8f8c <mass_storage_init+0x200>)
    8e42:	e7bc      	b.n	8dbe <mass_storage_init+0x32>
    8e44:	4611      	mov	r1, r2
    8e46:	4851      	ldr	r0, [pc, #324]	; (8f8c <mass_storage_init+0x200>)
    8e48:	e7c3      	b.n	8dd2 <mass_storage_init+0x46>
	if (block_size != BLOCK_SIZE) {
    8e4a:	9b06      	ldr	r3, [sp, #24]
    8e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8e50:	d012      	beq.n	8e78 <mass_storage_init+0xec>
    8e52:	f00b ffc5 	bl	14de0 <z_arch_is_user_context>
		LOG_ERR("Block Size reported by the storage side is "
    8e56:	2301      	movs	r3, #1
    8e58:	f04f 0200 	mov.w	r2, #0
    8e5c:	f363 0207 	bfi	r2, r3, #0, #8
    8e60:	4945      	ldr	r1, [pc, #276]	; (8f78 <mass_storage_init+0x1ec>)
    8e62:	4b46      	ldr	r3, [pc, #280]	; (8f7c <mass_storage_init+0x1f0>)
    8e64:	1a5b      	subs	r3, r3, r1
    8e66:	08db      	lsrs	r3, r3, #3
    8e68:	f363 128f 	bfi	r2, r3, #6, #10
    8e6c:	b108      	cbz	r0, 8e72 <mass_storage_init+0xe6>
    8e6e:	4948      	ldr	r1, [pc, #288]	; (8f90 <mass_storage_init+0x204>)
    8e70:	e7c8      	b.n	8e04 <mass_storage_init+0x78>
    8e72:	4611      	mov	r1, r2
    8e74:	4846      	ldr	r0, [pc, #280]	; (8f90 <mass_storage_init+0x204>)
    8e76:	e7cb      	b.n	8e10 <mass_storage_init+0x84>
    8e78:	f00b ffb2 	bl	14de0 <z_arch_is_user_context>
	memory_size = block_count * BLOCK_SIZE;
    8e7c:	6823      	ldr	r3, [r4, #0]
    8e7e:	4a45      	ldr	r2, [pc, #276]	; (8f94 <mass_storage_init+0x208>)
	mass_storage_config.interface.payload_data = interface_data;
    8e80:	4c45      	ldr	r4, [pc, #276]	; (8f98 <mass_storage_init+0x20c>)
	memory_size = block_count * BLOCK_SIZE;
    8e82:	025b      	lsls	r3, r3, #9
    8e84:	6013      	str	r3, [r2, #0]
    8e86:	f00b ffab 	bl	14de0 <z_arch_is_user_context>
	stage = MSC_READ_CBW;
    8e8a:	4b44      	ldr	r3, [pc, #272]	; (8f9c <mass_storage_init+0x210>)
    8e8c:	701f      	strb	r7, [r3, #0]
	msd_init();
    8e8e:	f7ff fd21 	bl	88d4 <msd_init>
	mass_storage_config.interface.payload_data = interface_data;
    8e92:	4b43      	ldr	r3, [pc, #268]	; (8fa0 <mass_storage_init+0x214>)
    8e94:	61e3      	str	r3, [r4, #28]
		usb_get_device_descriptor();
    8e96:	f7ff fc65 	bl	8764 <usb_get_device_descriptor>
	mass_storage_config.usb_device_description =
    8e9a:	6020      	str	r0, [r4, #0]
	ret = usb_set_config(&mass_storage_config);
    8e9c:	4620      	mov	r0, r4
    8e9e:	f7ff fa75 	bl	838c <usb_set_config>
	if (ret < 0) {
    8ea2:	1e05      	subs	r5, r0, #0
    8ea4:	da18      	bge.n	8ed8 <mass_storage_init+0x14c>
    8ea6:	f00b ff9b 	bl	14de0 <z_arch_is_user_context>
		LOG_ERR("Failed to config USB");
    8eaa:	2301      	movs	r3, #1
    8eac:	f04f 0200 	mov.w	r2, #0
    8eb0:	f363 0207 	bfi	r2, r3, #0, #8
    8eb4:	4930      	ldr	r1, [pc, #192]	; (8f78 <mass_storage_init+0x1ec>)
    8eb6:	4b31      	ldr	r3, [pc, #196]	; (8f7c <mass_storage_init+0x1f0>)
    8eb8:	1a5b      	subs	r3, r3, r1
    8eba:	08db      	lsrs	r3, r3, #3
    8ebc:	f363 128f 	bfi	r2, r3, #6, #10
    8ec0:	b128      	cbz	r0, 8ece <mass_storage_init+0x142>
    8ec2:	4938      	ldr	r1, [pc, #224]	; (8fa4 <mass_storage_init+0x218>)
    8ec4:	4610      	mov	r0, r2
    8ec6:	f00a fc79 	bl	137bc <log_from_user>
		return ret;
    8eca:	462f      	mov	r7, r5
    8ecc:	e77b      	b.n	8dc6 <mass_storage_init+0x3a>
		LOG_ERR("Failed to config USB");
    8ece:	4611      	mov	r1, r2
    8ed0:	4834      	ldr	r0, [pc, #208]	; (8fa4 <mass_storage_init+0x218>)
    8ed2:	f00a fc0b 	bl	136ec <log_0>
    8ed6:	e7f8      	b.n	8eca <mass_storage_init+0x13e>
	ret = usb_enable(&mass_storage_config);
    8ed8:	4620      	mov	r0, r4
    8eda:	f7ff fa7b 	bl	83d4 <usb_enable>
	if (ret < 0) {
    8ede:	1e04      	subs	r4, r0, #0
    8ee0:	da18      	bge.n	8f14 <mass_storage_init+0x188>
    8ee2:	f00b ff7d 	bl	14de0 <z_arch_is_user_context>
		LOG_ERR("Failed to enable USB");
    8ee6:	2301      	movs	r3, #1
    8ee8:	f04f 0200 	mov.w	r2, #0
    8eec:	f363 0207 	bfi	r2, r3, #0, #8
    8ef0:	4921      	ldr	r1, [pc, #132]	; (8f78 <mass_storage_init+0x1ec>)
    8ef2:	4b22      	ldr	r3, [pc, #136]	; (8f7c <mass_storage_init+0x1f0>)
    8ef4:	1a5b      	subs	r3, r3, r1
    8ef6:	08db      	lsrs	r3, r3, #3
    8ef8:	f363 128f 	bfi	r2, r3, #6, #10
    8efc:	b128      	cbz	r0, 8f0a <mass_storage_init+0x17e>
    8efe:	492a      	ldr	r1, [pc, #168]	; (8fa8 <mass_storage_init+0x21c>)
    8f00:	4610      	mov	r0, r2
    8f02:	f00a fc5b 	bl	137bc <log_from_user>
		return ret;
    8f06:	4627      	mov	r7, r4
    8f08:	e75d      	b.n	8dc6 <mass_storage_init+0x3a>
		LOG_ERR("Failed to enable USB");
    8f0a:	4611      	mov	r1, r2
    8f0c:	4826      	ldr	r0, [pc, #152]	; (8fa8 <mass_storage_init+0x21c>)
    8f0e:	f00a fbed 	bl	136ec <log_0>
    8f12:	e7f8      	b.n	8f06 <mass_storage_init+0x17a>
    8f14:	f00b ff64 	bl	14de0 <z_arch_is_user_context>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    8f18:	b1c0      	cbz	r0, 8f4c <mass_storage_init+0x1c0>
	register u32_t ret __asm__("r0") = arg1;
    8f1a:	4824      	ldr	r0, [pc, #144]	; (8fac <mass_storage_init+0x220>)
	register u32_t r1 __asm__("r1") = arg2;
    8f1c:	4639      	mov	r1, r7
	register u32_t r2 __asm__("r2") = arg3;
    8f1e:	2201      	movs	r2, #1
	register u32_t r6 __asm__("r6") = call_id;
    8f20:	265b      	movs	r6, #91	; 0x5b
	__asm__ volatile("svc %[svid]\n"
    8f22:	df03      	svc	3
    8f24:	f00b ff5c 	bl	14de0 <z_arch_is_user_context>
    8f28:	f06f 0304 	mvn.w	r3, #4
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    8f2c:	b1a0      	cbz	r0, 8f58 <mass_storage_init+0x1cc>
	struct _syscall_10_args args = {
    8f2e:	2400      	movs	r4, #0
    8f30:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    8f34:	e9cd 4407 	strd	r4, r4, [sp, #28]
    8f38:	940b      	str	r4, [sp, #44]	; 0x2c
	register u32_t ret __asm__("r0") = arg1;
    8f3a:	481d      	ldr	r0, [pc, #116]	; (8fb0 <mass_storage_init+0x224>)
	register u32_t r1 __asm__("r1") = arg2;
    8f3c:	491d      	ldr	r1, [pc, #116]	; (8fb4 <mass_storage_init+0x228>)
	register u32_t r3 __asm__("r3") = arg4;
    8f3e:	4b1e      	ldr	r3, [pc, #120]	; (8fb8 <mass_storage_init+0x22c>)
	register u32_t r2 __asm__("r2") = arg3;
    8f40:	f44f 7200 	mov.w	r2, #512	; 0x200
	register u32_t r5 __asm__("r5") = arg6;
    8f44:	ad07      	add	r5, sp, #28
	register u32_t r6 __asm__("r6") = call_id;
    8f46:	2664      	movs	r6, #100	; 0x64
	__asm__ volatile("svc %[svid]\n"
    8f48:	df03      	svc	3
	return ret;
    8f4a:	e73c      	b.n	8dc6 <mass_storage_init+0x3a>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    8f4c:	2201      	movs	r2, #1
    8f4e:	4639      	mov	r1, r7
    8f50:	4816      	ldr	r0, [pc, #88]	; (8fac <mass_storage_init+0x220>)
    8f52:	f00f fc0d 	bl	18770 <z_impl_k_sem_init>
    8f56:	e7e5      	b.n	8f24 <mass_storage_init+0x198>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    8f58:	f44f 7200 	mov.w	r2, #512	; 0x200
    8f5c:	e9cd 0302 	strd	r0, r3, [sp, #8]
    8f60:	e9cd 0004 	strd	r0, r0, [sp, #16]
    8f64:	e9cd 0000 	strd	r0, r0, [sp]
    8f68:	4b13      	ldr	r3, [pc, #76]	; (8fb8 <mass_storage_init+0x22c>)
    8f6a:	4912      	ldr	r1, [pc, #72]	; (8fb4 <mass_storage_init+0x228>)
    8f6c:	4810      	ldr	r0, [pc, #64]	; (8fb0 <mass_storage_init+0x224>)
    8f6e:	f00f fc31 	bl	187d4 <z_impl_k_thread_create>
    8f72:	e728      	b.n	8dc6 <mass_storage_init+0x3a>
    8f74:	0001ae0f 	.word	0x0001ae0f
    8f78:	00018f84 	.word	0x00018f84
    8f7c:	00018fc4 	.word	0x00018fc4
    8f80:	0001b048 	.word	0x0001b048
    8f84:	20002b4c 	.word	0x20002b4c
    8f88:	0001b074 	.word	0x0001b074
    8f8c:	0001b0a3 	.word	0x0001b0a3
    8f90:	0001b0d1 	.word	0x0001b0d1
    8f94:	20002bf4 	.word	0x20002bf4
    8f98:	20011cb0 	.word	0x20011cb0
    8f9c:	20005e81 	.word	0x20005e81
    8fa0:	20005c3f 	.word	0x20005c3f
    8fa4:	0001b135 	.word	0x0001b135
    8fa8:	0001b14a 	.word	0x0001b14a
    8fac:	20002b54 	.word	0x20002b54
    8fb0:	20002b70 	.word	0x20002b70
    8fb4:	2000a800 	.word	0x2000a800
    8fb8:	00008b75 	.word	0x00008b75

00008fbc <mass_storage_bulk_out>:
{
    8fbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8fc0:	b09b      	sub	sp, #108	; 0x6c
	u32_t bytes_read = 0U;
    8fc2:	2300      	movs	r3, #0
	usb_ep_read_wait(ep, bo_buf, CONFIG_MASS_STORAGE_BULK_EP_MPS,
    8fc4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
	switch (stage) {
    8fc8:	4db6      	ldr	r5, [pc, #728]	; (92a4 <mass_storage_bulk_out+0x2e8>)
	u32_t bytes_read = 0U;
    8fca:	9300      	str	r3, [sp, #0]
	usb_ep_read_wait(ep, bo_buf, CONFIG_MASS_STORAGE_BULK_EP_MPS,
    8fcc:	2240      	movs	r2, #64	; 0x40
    8fce:	466b      	mov	r3, sp
    8fd0:	4641      	mov	r1, r8
{
    8fd2:	4607      	mov	r7, r0
	usb_ep_read_wait(ep, bo_buf, CONFIG_MASS_STORAGE_BULK_EP_MPS,
    8fd4:	f00b fef4 	bl	14dc0 <usb_ep_read_wait>
	switch (stage) {
    8fd8:	782b      	ldrb	r3, [r5, #0]
    8fda:	b153      	cbz	r3, 8ff2 <mass_storage_bulk_out+0x36>
    8fdc:	2b02      	cmp	r3, #2
    8fde:	f000 8132 	beq.w	9246 <mass_storage_bulk_out+0x28a>
	return z_arch_is_user_context();
    8fe2:	f00b fefd 	bl	14de0 <z_arch_is_user_context>
		usb_ep_set_stall(ep);
    8fe6:	4638      	mov	r0, r7
    8fe8:	f00b fee8 	bl	14dbc <usb_ep_set_stall>
		csw.Status = CSW_ERROR;
    8fec:	4bae      	ldr	r3, [pc, #696]	; (92a8 <mass_storage_bulk_out+0x2ec>)
    8fee:	2202      	movs	r2, #2
    8ff0:	e1a2      	b.n	9338 <mass_storage_bulk_out+0x37c>
    8ff2:	f00b fef5 	bl	14de0 <z_arch_is_user_context>
	if (size != sizeof(cbw)) {
    8ff6:	f8bd 3000 	ldrh.w	r3, [sp]
    8ffa:	2b1f      	cmp	r3, #31
    8ffc:	d017      	beq.n	902e <mass_storage_bulk_out+0x72>
    8ffe:	f00b feef 	bl	14de0 <z_arch_is_user_context>
		LOG_ERR("size != sizeof(cbw)");
    9002:	2301      	movs	r3, #1
    9004:	f04f 0200 	mov.w	r2, #0
    9008:	f363 0207 	bfi	r2, r3, #0, #8
    900c:	49a7      	ldr	r1, [pc, #668]	; (92ac <mass_storage_bulk_out+0x2f0>)
    900e:	4ba8      	ldr	r3, [pc, #672]	; (92b0 <mass_storage_bulk_out+0x2f4>)
    9010:	1a5b      	subs	r3, r3, r1
    9012:	08db      	lsrs	r3, r3, #3
    9014:	f363 128f 	bfi	r2, r3, #6, #10
    9018:	b120      	cbz	r0, 9024 <mass_storage_bulk_out+0x68>
    901a:	49a6      	ldr	r1, [pc, #664]	; (92b4 <mass_storage_bulk_out+0x2f8>)
			LOG_ERR("> BO - PROC_CBW default <<ERROR!!!>>");
    901c:	4610      	mov	r0, r2
    901e:	f00a fbcd 	bl	137bc <log_from_user>
    9022:	e05f      	b.n	90e4 <mass_storage_bulk_out+0x128>
		LOG_ERR("size != sizeof(cbw)");
    9024:	48a3      	ldr	r0, [pc, #652]	; (92b4 <mass_storage_bulk_out+0x2f8>)
    9026:	4611      	mov	r1, r2
			LOG_ERR("> BO - PROC_CBW default <<ERROR!!!>>");
    9028:	f00a fb60 	bl	136ec <log_0>
			break;
    902c:	e05a      	b.n	90e4 <mass_storage_bulk_out+0x128>
	memcpy((u8_t *)&cbw, buf, size);
    902e:	4ba2      	ldr	r3, [pc, #648]	; (92b8 <mass_storage_bulk_out+0x2fc>)
    9030:	4642      	mov	r2, r8
    9032:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
    9036:	461c      	mov	r4, r3
    9038:	4616      	mov	r6, r2
    903a:	ce03      	ldmia	r6!, {r0, r1}
    903c:	4566      	cmp	r6, ip
    903e:	6018      	str	r0, [r3, #0]
    9040:	6059      	str	r1, [r3, #4]
    9042:	4632      	mov	r2, r6
    9044:	f103 0308 	add.w	r3, r3, #8
    9048:	d1f6      	bne.n	9038 <mass_storage_bulk_out+0x7c>
    904a:	6830      	ldr	r0, [r6, #0]
    904c:	6018      	str	r0, [r3, #0]
    904e:	79b2      	ldrb	r2, [r6, #6]
    9050:	88b1      	ldrh	r1, [r6, #4]
    9052:	8099      	strh	r1, [r3, #4]
    9054:	719a      	strb	r2, [r3, #6]
	if (cbw.Signature != CBW_Signature) {
    9056:	6822      	ldr	r2, [r4, #0]
    9058:	4b98      	ldr	r3, [pc, #608]	; (92bc <mass_storage_bulk_out+0x300>)
    905a:	429a      	cmp	r2, r3
    905c:	d012      	beq.n	9084 <mass_storage_bulk_out+0xc8>
    905e:	f00b febf 	bl	14de0 <z_arch_is_user_context>
		LOG_ERR("CBW Signature Mismatch");
    9062:	2301      	movs	r3, #1
    9064:	f04f 0200 	mov.w	r2, #0
    9068:	f363 0207 	bfi	r2, r3, #0, #8
    906c:	498f      	ldr	r1, [pc, #572]	; (92ac <mass_storage_bulk_out+0x2f0>)
    906e:	4b90      	ldr	r3, [pc, #576]	; (92b0 <mass_storage_bulk_out+0x2f4>)
    9070:	1a5b      	subs	r3, r3, r1
    9072:	08db      	lsrs	r3, r3, #3
    9074:	f363 128f 	bfi	r2, r3, #6, #10
    9078:	b108      	cbz	r0, 907e <mass_storage_bulk_out+0xc2>
    907a:	4991      	ldr	r1, [pc, #580]	; (92c0 <mass_storage_bulk_out+0x304>)
    907c:	e7ce      	b.n	901c <mass_storage_bulk_out+0x60>
    907e:	4611      	mov	r1, r2
    9080:	488f      	ldr	r0, [pc, #572]	; (92c0 <mass_storage_bulk_out+0x304>)
    9082:	e7d1      	b.n	9028 <mass_storage_bulk_out+0x6c>
	csw.Tag = cbw.Tag;
    9084:	4e88      	ldr	r6, [pc, #544]	; (92a8 <mass_storage_bulk_out+0x2ec>)
    9086:	6863      	ldr	r3, [r4, #4]
    9088:	6073      	str	r3, [r6, #4]
	csw.DataResidue = cbw.DataLength;
    908a:	68a3      	ldr	r3, [r4, #8]
    908c:	60b3      	str	r3, [r6, #8]
	if ((cbw.CBLength <  1) || (cbw.CBLength > 16) || (cbw.LUN != 0U)) {
    908e:	7ba3      	ldrb	r3, [r4, #14]
    9090:	3b01      	subs	r3, #1
    9092:	2b0f      	cmp	r3, #15
    9094:	d801      	bhi.n	909a <mass_storage_bulk_out+0xde>
    9096:	7b63      	ldrb	r3, [r4, #13]
    9098:	b11b      	cbz	r3, 90a2 <mass_storage_bulk_out+0xe6>
    909a:	f00b fea1 	bl	14de0 <z_arch_is_user_context>
	csw.Status = CSW_FAILED;
    909e:	2301      	movs	r3, #1
    90a0:	e0bc      	b.n	921c <mass_storage_bulk_out+0x260>
		switch (cbw.CB[0]) {
    90a2:	7be3      	ldrb	r3, [r4, #15]
    90a4:	2b23      	cmp	r3, #35	; 0x23
    90a6:	f000 808e 	beq.w	91c6 <mass_storage_bulk_out+0x20a>
    90aa:	d82d      	bhi.n	9108 <mass_storage_bulk_out+0x14c>
    90ac:	2b12      	cmp	r3, #18
    90ae:	d06f      	beq.n	9190 <mass_storage_bulk_out+0x1d4>
    90b0:	d823      	bhi.n	90fa <mass_storage_bulk_out+0x13e>
    90b2:	2b00      	cmp	r3, #0
    90b4:	d058      	beq.n	9168 <mass_storage_bulk_out+0x1ac>
    90b6:	2b03      	cmp	r3, #3
    90b8:	d1ef      	bne.n	909a <mass_storage_bulk_out+0xde>
    90ba:	f00b fe91 	bl	14de0 <z_arch_is_user_context>
	u8_t request_sense[] = {
    90be:	4b81      	ldr	r3, [pc, #516]	; (92c4 <mass_storage_bulk_out+0x308>)
    90c0:	aa01      	add	r2, sp, #4
    90c2:	f103 0610 	add.w	r6, r3, #16
    90c6:	4615      	mov	r5, r2
    90c8:	6818      	ldr	r0, [r3, #0]
    90ca:	6859      	ldr	r1, [r3, #4]
    90cc:	4614      	mov	r4, r2
    90ce:	c403      	stmia	r4!, {r0, r1}
    90d0:	3308      	adds	r3, #8
    90d2:	42b3      	cmp	r3, r6
    90d4:	4622      	mov	r2, r4
    90d6:	d1f7      	bne.n	90c8 <mass_storage_bulk_out+0x10c>
    90d8:	881b      	ldrh	r3, [r3, #0]
    90da:	8023      	strh	r3, [r4, #0]
	return write(request_sense, sizeof(request_sense));
    90dc:	2112      	movs	r1, #18
	return write(inquiry, sizeof(inquiry));
    90de:	4628      	mov	r0, r5
	return write(capacity, sizeof(capacity));
    90e0:	f7ff fc46 	bl	8970 <write>
	if (thread_op != THREAD_OP_WRITE_QUEUED) {
    90e4:	4b78      	ldr	r3, [pc, #480]	; (92c8 <mass_storage_bulk_out+0x30c>)
    90e6:	681b      	ldr	r3, [r3, #0]
    90e8:	2b03      	cmp	r3, #3
    90ea:	f000 81a9 	beq.w	9440 <mass_storage_bulk_out+0x484>
		usb_ep_read_continue(ep);
    90ee:	4638      	mov	r0, r7
    90f0:	f00b fe68 	bl	14dc4 <usb_ep_read_continue>
}
    90f4:	b01b      	add	sp, #108	; 0x6c
    90f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		switch (cbw.CB[0]) {
    90fa:	2b1a      	cmp	r3, #26
    90fc:	d05b      	beq.n	91b6 <mass_storage_bulk_out+0x1fa>
    90fe:	2b1e      	cmp	r3, #30
    9100:	d1cb      	bne.n	909a <mass_storage_bulk_out+0xde>
    9102:	f00b fe6d 	bl	14de0 <z_arch_is_user_context>
    9106:	e03d      	b.n	9184 <mass_storage_bulk_out+0x1c8>
    9108:	2b2a      	cmp	r3, #42	; 0x2a
    910a:	f000 808b 	beq.w	9224 <mass_storage_bulk_out+0x268>
    910e:	d812      	bhi.n	9136 <mass_storage_bulk_out+0x17a>
    9110:	2b25      	cmp	r3, #37	; 0x25
    9112:	d067      	beq.n	91e4 <mass_storage_bulk_out+0x228>
    9114:	2b28      	cmp	r3, #40	; 0x28
    9116:	d1c0      	bne.n	909a <mass_storage_bulk_out+0xde>
    9118:	f00b fe62 	bl	14de0 <z_arch_is_user_context>
			if (infoTransfer()) {
    911c:	f7ff fb8c 	bl	8838 <infoTransfer>
    9120:	2800      	cmp	r0, #0
    9122:	d0df      	beq.n	90e4 <mass_storage_bulk_out+0x128>
				if ((cbw.Flags & 0x80)) {
    9124:	f994 300c 	ldrsb.w	r3, [r4, #12]
    9128:	2b00      	cmp	r3, #0
    912a:	da70      	bge.n	920e <mass_storage_bulk_out+0x252>
					stage = MSC_PROCESS_CBW;
    912c:	2302      	movs	r3, #2
    912e:	702b      	strb	r3, [r5, #0]
					memoryRead();
    9130:	f7ff fc86 	bl	8a40 <memoryRead>
    9134:	e7d6      	b.n	90e4 <mass_storage_bulk_out+0x128>
		switch (cbw.CB[0]) {
    9136:	2ba8      	cmp	r3, #168	; 0xa8
    9138:	d0ee      	beq.n	9118 <mass_storage_bulk_out+0x15c>
    913a:	2baa      	cmp	r3, #170	; 0xaa
    913c:	d072      	beq.n	9224 <mass_storage_bulk_out+0x268>
    913e:	2b2f      	cmp	r3, #47	; 0x2f
    9140:	d1ab      	bne.n	909a <mass_storage_bulk_out+0xde>
    9142:	f00b fe4d 	bl	14de0 <z_arch_is_user_context>
			if (!(cbw.CB[1] & 0x02)) {
    9146:	7c23      	ldrb	r3, [r4, #16]
    9148:	079b      	lsls	r3, r3, #30
    914a:	d51b      	bpl.n	9184 <mass_storage_bulk_out+0x1c8>
			if (infoTransfer()) {
    914c:	f7ff fb74 	bl	8838 <infoTransfer>
    9150:	2800      	cmp	r0, #0
    9152:	d0c7      	beq.n	90e4 <mass_storage_bulk_out+0x128>
				if (!(cbw.Flags & 0x80)) {
    9154:	f994 300c 	ldrsb.w	r3, [r4, #12]
    9158:	2b00      	cmp	r3, #0
    915a:	db71      	blt.n	9240 <mass_storage_bulk_out+0x284>
					stage = MSC_PROCESS_CBW;
    915c:	2302      	movs	r3, #2
    915e:	702b      	strb	r3, [r5, #0]
					memOK = true;
    9160:	4b5a      	ldr	r3, [pc, #360]	; (92cc <mass_storage_bulk_out+0x310>)
    9162:	2201      	movs	r2, #1
    9164:	701a      	strb	r2, [r3, #0]
    9166:	e7bd      	b.n	90e4 <mass_storage_bulk_out+0x128>
    9168:	f00b fe3a 	bl	14de0 <z_arch_is_user_context>
	if (cbw.DataLength != 0U) {
    916c:	68a3      	ldr	r3, [r4, #8]
    916e:	b14b      	cbz	r3, 9184 <mass_storage_bulk_out+0x1c8>
		if ((cbw.Flags & 0x80) != 0U) {
    9170:	f994 300c 	ldrsb.w	r3, [r4, #12]
    9174:	4a56      	ldr	r2, [pc, #344]	; (92d0 <mass_storage_bulk_out+0x314>)
    9176:	2b00      	cmp	r3, #0
    9178:	da06      	bge.n	9188 <mass_storage_bulk_out+0x1cc>
    917a:	f00b fe31 	bl	14de0 <z_arch_is_user_context>
			usb_ep_set_stall(mass_ep_data[MSD_IN_EP_IDX].ep_addr);
    917e:	7b10      	ldrb	r0, [r2, #12]
			usb_ep_set_stall(mass_ep_data[MSD_OUT_EP_IDX].ep_addr);
    9180:	f00b fe1c 	bl	14dbc <usb_ep_set_stall>
			csw.Status = CSW_PASSED;
    9184:	2300      	movs	r3, #0
    9186:	e049      	b.n	921c <mass_storage_bulk_out+0x260>
    9188:	f00b fe2a 	bl	14de0 <z_arch_is_user_context>
			usb_ep_set_stall(mass_ep_data[MSD_OUT_EP_IDX].ep_addr);
    918c:	7910      	ldrb	r0, [r2, #4]
    918e:	e7f7      	b.n	9180 <mass_storage_bulk_out+0x1c4>
    9190:	f00b fe26 	bl	14de0 <z_arch_is_user_context>
	u8_t inquiry[] = { 0x00, 0x80, 0x00, 0x01,
    9194:	4b4f      	ldr	r3, [pc, #316]	; (92d4 <mass_storage_bulk_out+0x318>)
    9196:	aa01      	add	r2, sp, #4
    9198:	f103 0620 	add.w	r6, r3, #32
    919c:	4615      	mov	r5, r2
    919e:	6818      	ldr	r0, [r3, #0]
    91a0:	6859      	ldr	r1, [r3, #4]
    91a2:	4614      	mov	r4, r2
    91a4:	c403      	stmia	r4!, {r0, r1}
    91a6:	3308      	adds	r3, #8
    91a8:	42b3      	cmp	r3, r6
    91aa:	4622      	mov	r2, r4
    91ac:	d1f7      	bne.n	919e <mass_storage_bulk_out+0x1e2>
    91ae:	6818      	ldr	r0, [r3, #0]
    91b0:	6020      	str	r0, [r4, #0]
	return write(inquiry, sizeof(inquiry));
    91b2:	2124      	movs	r1, #36	; 0x24
    91b4:	e793      	b.n	90de <mass_storage_bulk_out+0x122>
    91b6:	f00b fe13 	bl	14de0 <z_arch_is_user_context>
	u8_t sense6[] = { 0x03, 0x00, 0x00, 0x00 };
    91ba:	2303      	movs	r3, #3
	return write(sense6, sizeof(sense6));
    91bc:	2104      	movs	r1, #4
	u8_t sense6[] = { 0x03, 0x00, 0x00, 0x00 };
    91be:	9301      	str	r3, [sp, #4]
	return write(sense6, sizeof(sense6));
    91c0:	eb0d 0001 	add.w	r0, sp, r1
    91c4:	e78c      	b.n	90e0 <mass_storage_bulk_out+0x124>
    91c6:	f00b fe0b 	bl	14de0 <z_arch_is_user_context>
	u8_t capacity[] = { 0x00, 0x00, 0x00, 0x08,
    91ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    91ce:	9301      	str	r3, [sp, #4]
    91d0:	4b41      	ldr	r3, [pc, #260]	; (92d8 <mass_storage_bulk_out+0x31c>)
    91d2:	681b      	ldr	r3, [r3, #0]
    91d4:	ba1b      	rev	r3, r3
    91d6:	9302      	str	r3, [sp, #8]
    91d8:	f04f 1302 	mov.w	r3, #131074	; 0x20002
    91dc:	9303      	str	r3, [sp, #12]
	return write(capacity, sizeof(capacity));
    91de:	210c      	movs	r1, #12
	return write(capacity, sizeof(capacity));
    91e0:	a801      	add	r0, sp, #4
    91e2:	e77d      	b.n	90e0 <mass_storage_bulk_out+0x124>
    91e4:	f00b fdfc 	bl	14de0 <z_arch_is_user_context>
		(u8_t)(((block_count - 1) >> 24) & 0xff),
    91e8:	4b3b      	ldr	r3, [pc, #236]	; (92d8 <mass_storage_bulk_out+0x31c>)
    91ea:	681b      	ldr	r3, [r3, #0]
    91ec:	3b01      	subs	r3, #1
    91ee:	0e1a      	lsrs	r2, r3, #24
    91f0:	f88d 2004 	strb.w	r2, [sp, #4]
		(u8_t)(((block_count - 1) >> 16) & 0xff),
    91f4:	0c1a      	lsrs	r2, r3, #16
    91f6:	f88d 2005 	strb.w	r2, [sp, #5]
	u8_t capacity[] = {
    91fa:	f88d 3007 	strb.w	r3, [sp, #7]
		(u8_t)(((block_count - 1) >> 8) & 0xff),
    91fe:	0a1a      	lsrs	r2, r3, #8
	u8_t capacity[] = {
    9200:	f44f 3300 	mov.w	r3, #131072	; 0x20000
		(u8_t)(((block_count - 1) >> 8) & 0xff),
    9204:	f88d 2006 	strb.w	r2, [sp, #6]
	u8_t capacity[] = {
    9208:	9302      	str	r3, [sp, #8]
	return write(capacity, sizeof(capacity));
    920a:	2108      	movs	r1, #8
    920c:	e7e8      	b.n	91e0 <mass_storage_bulk_out+0x224>
					usb_ep_set_stall(
    920e:	4b30      	ldr	r3, [pc, #192]	; (92d0 <mass_storage_bulk_out+0x314>)
    9210:	7918      	ldrb	r0, [r3, #4]
					usb_ep_set_stall(
    9212:	f00b fdd3 	bl	14dbc <usb_ep_set_stall>
    9216:	f00b fde3 	bl	14de0 <z_arch_is_user_context>
					csw.Status = CSW_ERROR;
    921a:	2302      	movs	r3, #2
    921c:	7333      	strb	r3, [r6, #12]
		sendCSW();
    921e:	f7ff fad3 	bl	87c8 <sendCSW>
		break;
    9222:	e75f      	b.n	90e4 <mass_storage_bulk_out+0x128>
    9224:	f00b fddc 	bl	14de0 <z_arch_is_user_context>
			if (infoTransfer()) {
    9228:	f7ff fb06 	bl	8838 <infoTransfer>
    922c:	2800      	cmp	r0, #0
    922e:	f43f af59 	beq.w	90e4 <mass_storage_bulk_out+0x128>
				if (!(cbw.Flags & 0x80)) {
    9232:	f994 300c 	ldrsb.w	r3, [r4, #12]
    9236:	2b00      	cmp	r3, #0
    9238:	db02      	blt.n	9240 <mass_storage_bulk_out+0x284>
					stage = MSC_PROCESS_CBW;
    923a:	2302      	movs	r3, #2
    923c:	702b      	strb	r3, [r5, #0]
    923e:	e751      	b.n	90e4 <mass_storage_bulk_out+0x128>
					usb_ep_set_stall(
    9240:	4b23      	ldr	r3, [pc, #140]	; (92d0 <mass_storage_bulk_out+0x314>)
    9242:	7b18      	ldrb	r0, [r3, #12]
    9244:	e7e5      	b.n	9212 <mass_storage_bulk_out+0x256>
		switch (cbw.CB[0]) {
    9246:	4b1c      	ldr	r3, [pc, #112]	; (92b8 <mass_storage_bulk_out+0x2fc>)
    9248:	7bdb      	ldrb	r3, [r3, #15]
    924a:	2b2f      	cmp	r3, #47	; 0x2f
    924c:	d076      	beq.n	933c <mass_storage_bulk_out+0x380>
    924e:	2baa      	cmp	r3, #170	; 0xaa
    9250:	d002      	beq.n	9258 <mass_storage_bulk_out+0x29c>
    9252:	2b2a      	cmp	r3, #42	; 0x2a
    9254:	f040 80e1 	bne.w	941a <mass_storage_bulk_out+0x45e>
	if ((addr + size) > memory_size) {
    9258:	4e20      	ldr	r6, [pc, #128]	; (92dc <mass_storage_bulk_out+0x320>)
    925a:	4b21      	ldr	r3, [pc, #132]	; (92e0 <mass_storage_bulk_out+0x324>)
			memoryWrite(bo_buf, bytes_read);
    925c:	9a00      	ldr	r2, [sp, #0]
	if ((addr + size) > memory_size) {
    925e:	6834      	ldr	r4, [r6, #0]
    9260:	681b      	ldr	r3, [r3, #0]
    9262:	fa14 f182 	uxtah	r1, r4, r2
    9266:	4299      	cmp	r1, r3
    9268:	d842      	bhi.n	92f0 <mass_storage_bulk_out+0x334>
			memoryWrite(bo_buf, bytes_read);
    926a:	b294      	uxth	r4, r2
		page[addr % BLOCK_SIZE + i] = buf[i];
    926c:	6833      	ldr	r3, [r6, #0]
    926e:	491d      	ldr	r1, [pc, #116]	; (92e4 <mass_storage_bulk_out+0x328>)
    9270:	f3c3 0208 	ubfx	r2, r3, #0, #9
    9274:	4411      	add	r1, r2
	for (int i = 0; i < size; i++) {
    9276:	2200      	movs	r2, #0
    9278:	42a2      	cmp	r2, r4
    927a:	db44      	blt.n	9306 <mass_storage_bulk_out+0x34a>
	if (!((addr + size) % BLOCK_SIZE)) {
    927c:	4423      	add	r3, r4
    927e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    9282:	2b00      	cmp	r3, #0
    9284:	d145      	bne.n	9312 <mass_storage_bulk_out+0x356>
		if (!(disk_access_status(disk_pdrv) &
    9286:	4818      	ldr	r0, [pc, #96]	; (92e8 <mass_storage_bulk_out+0x32c>)
    9288:	f00a ff35 	bl	140f6 <disk_access_status>
    928c:	0740      	lsls	r0, r0, #29
    928e:	d440      	bmi.n	9312 <mass_storage_bulk_out+0x356>
    9290:	f00b fda6 	bl	14de0 <z_arch_is_user_context>
			thread_op = THREAD_OP_WRITE_QUEUED;  /* write_queued */
    9294:	4b0c      	ldr	r3, [pc, #48]	; (92c8 <mass_storage_bulk_out+0x30c>)
    9296:	2203      	movs	r2, #3
    9298:	601a      	str	r2, [r3, #0]
			defered_wr_sz = size;
    929a:	4b14      	ldr	r3, [pc, #80]	; (92ec <mass_storage_bulk_out+0x330>)
    929c:	601c      	str	r4, [r3, #0]
			k_sem_give(&disk_wait_sem);
    929e:	f7ff fbbd 	bl	8a1c <k_sem_give.constprop.5>
			return;
    92a2:	e71f      	b.n	90e4 <mass_storage_bulk_out+0x128>
    92a4:	20005e81 	.word	0x20005e81
    92a8:	20005c32 	.word	0x20005c32
    92ac:	00018f84 	.word	0x00018f84
    92b0:	00018fc4 	.word	0x00018fc4
    92b4:	0001afe0 	.word	0x0001afe0
    92b8:	20005c13 	.word	0x20005c13
    92bc:	43425355 	.word	0x43425355
    92c0:	0001aff4 	.word	0x0001aff4
    92c4:	00019016 	.word	0x00019016
    92c8:	20002bf8 	.word	0x20002bf8
    92cc:	20005c80 	.word	0x20005c80
    92d0:	2000c6b0 	.word	0x2000c6b0
    92d4:	00019028 	.word	0x00019028
    92d8:	20002b4c 	.word	0x20002b4c
    92dc:	20002b48 	.word	0x20002b48
    92e0:	20002bf4 	.word	0x20002bf4
    92e4:	20005c81 	.word	0x20005c81
    92e8:	0001ae0f 	.word	0x0001ae0f
    92ec:	20002b50 	.word	0x20002b50
		size = memory_size - addr;
    92f0:	1b1c      	subs	r4, r3, r4
		stage = MSC_ERROR;
    92f2:	2301      	movs	r3, #1
    92f4:	702b      	strb	r3, [r5, #0]
		usb_ep_set_stall(mass_ep_data[MSD_OUT_EP_IDX].ep_addr);
    92f6:	4b54      	ldr	r3, [pc, #336]	; (9448 <mass_storage_bulk_out+0x48c>)
    92f8:	7918      	ldrb	r0, [r3, #4]
		size = memory_size - addr;
    92fa:	b2a4      	uxth	r4, r4
		usb_ep_set_stall(mass_ep_data[MSD_OUT_EP_IDX].ep_addr);
    92fc:	f00b fd5e 	bl	14dbc <usb_ep_set_stall>
    9300:	f00b fd6e 	bl	14de0 <z_arch_is_user_context>
		LOG_WRN("Stall OUT endpoint");
    9304:	e7b2      	b.n	926c <mass_storage_bulk_out+0x2b0>
		page[addr % BLOCK_SIZE + i] = buf[i];
    9306:	f818 0002 	ldrb.w	r0, [r8, r2]
    930a:	f801 0b01 	strb.w	r0, [r1], #1
	for (int i = 0; i < size; i++) {
    930e:	3201      	adds	r2, #1
    9310:	e7b2      	b.n	9278 <mass_storage_bulk_out+0x2bc>
	addr += size;
    9312:	6833      	ldr	r3, [r6, #0]
    9314:	4423      	add	r3, r4
    9316:	6033      	str	r3, [r6, #0]
	length -= size;
    9318:	4b4c      	ldr	r3, [pc, #304]	; (944c <mass_storage_bulk_out+0x490>)
    931a:	6819      	ldr	r1, [r3, #0]
    931c:	1b09      	subs	r1, r1, r4
    931e:	6019      	str	r1, [r3, #0]
	csw.DataResidue -= size;
    9320:	4b4b      	ldr	r3, [pc, #300]	; (9450 <mass_storage_bulk_out+0x494>)
    9322:	689a      	ldr	r2, [r3, #8]
    9324:	1b14      	subs	r4, r2, r4
    9326:	609c      	str	r4, [r3, #8]
	if ((!length) || (stage != MSC_PROCESS_CBW)) {
    9328:	782a      	ldrb	r2, [r5, #0]
    932a:	b111      	cbz	r1, 9332 <mass_storage_bulk_out+0x376>
    932c:	2a02      	cmp	r2, #2
    932e:	f43f aed9 	beq.w	90e4 <mass_storage_bulk_out+0x128>
		csw.Status = (stage == MSC_ERROR) ? CSW_FAILED : CSW_PASSED;
    9332:	1e51      	subs	r1, r2, #1
    9334:	424a      	negs	r2, r1
    9336:	414a      	adcs	r2, r1
		csw.Status = CSW_ERROR;
    9338:	731a      	strb	r2, [r3, #12]
    933a:	e770      	b.n	921e <mass_storage_bulk_out+0x262>
	if ((addr + size) > memory_size) {
    933c:	4e45      	ldr	r6, [pc, #276]	; (9454 <mass_storage_bulk_out+0x498>)
    933e:	f00b fd4f 	bl	14de0 <z_arch_is_user_context>
    9342:	4b45      	ldr	r3, [pc, #276]	; (9458 <mass_storage_bulk_out+0x49c>)
			memoryVerify(bo_buf, bytes_read);
    9344:	9a00      	ldr	r2, [sp, #0]
	if ((addr + size) > memory_size) {
    9346:	6834      	ldr	r4, [r6, #0]
    9348:	681b      	ldr	r3, [r3, #0]
    934a:	fa14 f182 	uxtah	r1, r4, r2
    934e:	4299      	cmp	r1, r3
    9350:	d82b      	bhi.n	93aa <mass_storage_bulk_out+0x3ee>
			memoryVerify(bo_buf, bytes_read);
    9352:	b294      	uxth	r4, r2
	if (!(addr % BLOCK_SIZE)) {
    9354:	6832      	ldr	r2, [r6, #0]
    9356:	f3c2 0308 	ubfx	r3, r2, #0, #9
    935a:	b9eb      	cbnz	r3, 9398 <mass_storage_bulk_out+0x3dc>
    935c:	f00b fd40 	bl	14de0 <z_arch_is_user_context>
		if (disk_access_read(disk_pdrv, page, addr/BLOCK_SIZE, 1)) {
    9360:	2301      	movs	r3, #1
    9362:	0a52      	lsrs	r2, r2, #9
    9364:	493d      	ldr	r1, [pc, #244]	; (945c <mass_storage_bulk_out+0x4a0>)
    9366:	483e      	ldr	r0, [pc, #248]	; (9460 <mass_storage_bulk_out+0x4a4>)
    9368:	f00a fed3 	bl	14112 <disk_access_read>
    936c:	b1a0      	cbz	r0, 9398 <mass_storage_bulk_out+0x3dc>
    936e:	f00b fd37 	bl	14de0 <z_arch_is_user_context>
			LOG_ERR("---- Disk Read Error %d", addr/BLOCK_SIZE);
    9372:	2301      	movs	r3, #1
    9374:	f04f 0c00 	mov.w	ip, #0
    9378:	f363 0c07 	bfi	ip, r3, #0, #8
    937c:	4a39      	ldr	r2, [pc, #228]	; (9464 <mass_storage_bulk_out+0x4a8>)
    937e:	4b3a      	ldr	r3, [pc, #232]	; (9468 <mass_storage_bulk_out+0x4ac>)
    9380:	6831      	ldr	r1, [r6, #0]
    9382:	1a9b      	subs	r3, r3, r2
    9384:	08db      	lsrs	r3, r3, #3
    9386:	f363 1c8f 	bfi	ip, r3, #6, #10
    938a:	0a49      	lsrs	r1, r1, #9
    938c:	b1c0      	cbz	r0, 93c0 <mass_storage_bulk_out+0x404>
    938e:	460a      	mov	r2, r1
    9390:	4660      	mov	r0, ip
    9392:	4936      	ldr	r1, [pc, #216]	; (946c <mass_storage_bulk_out+0x4b0>)
    9394:	f00a fa12 	bl	137bc <log_from_user>
		if (page[addr%BLOCK_SIZE + n] != buf[n]) {
    9398:	f8d6 9000 	ldr.w	r9, [r6]
    939c:	4a2f      	ldr	r2, [pc, #188]	; (945c <mass_storage_bulk_out+0x4a0>)
    939e:	f3c9 0308 	ubfx	r3, r9, #0, #9
    93a2:	441a      	add	r2, r3
    93a4:	4641      	mov	r1, r8
    93a6:	2000      	movs	r0, #0
    93a8:	e010      	b.n	93cc <mass_storage_bulk_out+0x410>
		size = memory_size - addr;
    93aa:	1b1c      	subs	r4, r3, r4
		stage = MSC_ERROR;
    93ac:	2301      	movs	r3, #1
    93ae:	702b      	strb	r3, [r5, #0]
		usb_ep_set_stall(mass_ep_data[MSD_OUT_EP_IDX].ep_addr);
    93b0:	4b25      	ldr	r3, [pc, #148]	; (9448 <mass_storage_bulk_out+0x48c>)
    93b2:	7918      	ldrb	r0, [r3, #4]
		size = memory_size - addr;
    93b4:	b2a4      	uxth	r4, r4
		usb_ep_set_stall(mass_ep_data[MSD_OUT_EP_IDX].ep_addr);
    93b6:	f00b fd01 	bl	14dbc <usb_ep_set_stall>
    93ba:	f00b fd11 	bl	14de0 <z_arch_is_user_context>
		LOG_WRN("Stall OUT endpoint");
    93be:	e7c9      	b.n	9354 <mass_storage_bulk_out+0x398>
			LOG_ERR("---- Disk Read Error %d", addr/BLOCK_SIZE);
    93c0:	4662      	mov	r2, ip
    93c2:	482a      	ldr	r0, [pc, #168]	; (946c <mass_storage_bulk_out+0x4b0>)
    93c4:	f00a f99f 	bl	13706 <log_1>
    93c8:	e7e6      	b.n	9398 <mass_storage_bulk_out+0x3dc>
	for (n = 0U; n < size; n++) {
    93ca:	3001      	adds	r0, #1
    93cc:	42a0      	cmp	r0, r4
    93ce:	d20a      	bcs.n	93e6 <mass_storage_bulk_out+0x42a>
		if (page[addr%BLOCK_SIZE + n] != buf[n]) {
    93d0:	f812 cb01 	ldrb.w	ip, [r2], #1
    93d4:	f811 3b01 	ldrb.w	r3, [r1], #1
    93d8:	459c      	cmp	ip, r3
    93da:	d0f6      	beq.n	93ca <mass_storage_bulk_out+0x40e>
    93dc:	f00b fd00 	bl	14de0 <z_arch_is_user_context>
			memOK = false;
    93e0:	4b23      	ldr	r3, [pc, #140]	; (9470 <mass_storage_bulk_out+0x4b4>)
    93e2:	2200      	movs	r2, #0
    93e4:	701a      	strb	r2, [r3, #0]
	addr += size;
    93e6:	eb09 0304 	add.w	r3, r9, r4
    93ea:	6033      	str	r3, [r6, #0]
	length -= size;
    93ec:	4b17      	ldr	r3, [pc, #92]	; (944c <mass_storage_bulk_out+0x490>)
    93ee:	681a      	ldr	r2, [r3, #0]
    93f0:	1b12      	subs	r2, r2, r4
    93f2:	601a      	str	r2, [r3, #0]
	csw.DataResidue -= size;
    93f4:	4b16      	ldr	r3, [pc, #88]	; (9450 <mass_storage_bulk_out+0x494>)
    93f6:	6899      	ldr	r1, [r3, #8]
    93f8:	1b0c      	subs	r4, r1, r4
    93fa:	609c      	str	r4, [r3, #8]
	if (!length || (stage != MSC_PROCESS_CBW)) {
    93fc:	b11a      	cbz	r2, 9406 <mass_storage_bulk_out+0x44a>
    93fe:	782a      	ldrb	r2, [r5, #0]
    9400:	2a02      	cmp	r2, #2
    9402:	f43f ae6f 	beq.w	90e4 <mass_storage_bulk_out+0x128>
		csw.Status = (memOK && (stage == MSC_PROCESS_CBW)) ?
    9406:	4a1a      	ldr	r2, [pc, #104]	; (9470 <mass_storage_bulk_out+0x4b4>)
						CSW_PASSED : CSW_FAILED;
    9408:	7812      	ldrb	r2, [r2, #0]
    940a:	b122      	cbz	r2, 9416 <mass_storage_bulk_out+0x45a>
    940c:	782a      	ldrb	r2, [r5, #0]
    940e:	3a02      	subs	r2, #2
    9410:	bf18      	it	ne
    9412:	2201      	movne	r2, #1
    9414:	e790      	b.n	9338 <mass_storage_bulk_out+0x37c>
    9416:	2201      	movs	r2, #1
    9418:	e78e      	b.n	9338 <mass_storage_bulk_out+0x37c>
    941a:	f00b fce1 	bl	14de0 <z_arch_is_user_context>
			LOG_ERR("> BO - PROC_CBW default <<ERROR!!!>>");
    941e:	2301      	movs	r3, #1
    9420:	f04f 0200 	mov.w	r2, #0
    9424:	f363 0207 	bfi	r2, r3, #0, #8
    9428:	490e      	ldr	r1, [pc, #56]	; (9464 <mass_storage_bulk_out+0x4a8>)
    942a:	4b0f      	ldr	r3, [pc, #60]	; (9468 <mass_storage_bulk_out+0x4ac>)
    942c:	1a5b      	subs	r3, r3, r1
    942e:	08db      	lsrs	r3, r3, #3
    9430:	f363 128f 	bfi	r2, r3, #6, #10
    9434:	b108      	cbz	r0, 943a <mass_storage_bulk_out+0x47e>
    9436:	490f      	ldr	r1, [pc, #60]	; (9474 <mass_storage_bulk_out+0x4b8>)
    9438:	e5f0      	b.n	901c <mass_storage_bulk_out+0x60>
    943a:	4611      	mov	r1, r2
    943c:	480d      	ldr	r0, [pc, #52]	; (9474 <mass_storage_bulk_out+0x4b8>)
    943e:	e5f3      	b.n	9028 <mass_storage_bulk_out+0x6c>
    9440:	f00b fcce 	bl	14de0 <z_arch_is_user_context>
}
    9444:	e656      	b.n	90f4 <mass_storage_bulk_out+0x138>
    9446:	bf00      	nop
    9448:	2000c6b0 	.word	0x2000c6b0
    944c:	20002b6c 	.word	0x20002b6c
    9450:	20005c32 	.word	0x20005c32
    9454:	20002b48 	.word	0x20002b48
    9458:	20002bf4 	.word	0x20002bf4
    945c:	20005c81 	.word	0x20005c81
    9460:	0001ae0f 	.word	0x0001ae0f
    9464:	00018f84 	.word	0x00018f84
    9468:	00018fc4 	.word	0x00018fc4
    946c:	0001b00b 	.word	0x0001b00b
    9470:	20005c80 	.word	0x20005c80
    9474:	0001b023 	.word	0x0001b023

00009478 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
    9478:	e92d 4177 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r8, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    947c:	4d1a      	ldr	r5, [pc, #104]	; (94e8 <sys_rand32_get+0x70>)
    947e:	f3bf 8f5b 	dmb	ish
    9482:	682c      	ldr	r4, [r5, #0]
    9484:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    9488:	b984      	cbnz	r4, 94ac <sys_rand32_get+0x34>
    948a:	f00b fcb3 	bl	14df4 <z_arch_is_user_context>
    948e:	b1f0      	cbz	r0, 94ce <sys_rand32_get+0x56>
	register u32_t ret __asm__("r0") = arg1;
    9490:	4816      	ldr	r0, [pc, #88]	; (94ec <sys_rand32_get+0x74>)
	register u32_t r6 __asm__("r6") = call_id;
    9492:	2617      	movs	r6, #23
	__asm__ volatile("svc %[svid]\n"
    9494:	df03      	svc	3
    9496:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9498:	f3bf 8f5b 	dmb	ish
    949c:	e855 3f00 	ldrex	r3, [r5]
    94a0:	e845 4200 	strex	r2, r4, [r5]
    94a4:	2a00      	cmp	r2, #0
    94a6:	d1f9      	bne.n	949c <sys_rand32_get+0x24>
    94a8:	f3bf 8f5b 	dmb	ish
    94ac:	f00b fca2 	bl	14df4 <z_arch_is_user_context>

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE3(K_SYSCALL_ENTROPY_GET_ENTROPY, entropy_get_entropy, int, struct device *, dev, u8_t *, buffer, u16_t, length)
    94b0:	b188      	cbz	r0, 94d6 <sys_rand32_get+0x5e>
	register u32_t ret __asm__("r0") = arg1;
    94b2:	4620      	mov	r0, r4
	register u32_t r1 __asm__("r1") = arg2;
    94b4:	a901      	add	r1, sp, #4
	register u32_t r2 __asm__("r2") = arg3;
    94b6:	2204      	movs	r2, #4
	register u32_t r6 __asm__("r6") = call_id;
    94b8:	261a      	movs	r6, #26
	__asm__ volatile("svc %[svid]\n"
    94ba:	df03      	svc	3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    94bc:	2800      	cmp	r0, #0
    94be:	da02      	bge.n	94c6 <sys_rand32_get+0x4e>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    94c0:	f001 fb18 	bl	aaf4 <z_timer_cycle_get_32>
    94c4:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    94c6:	9801      	ldr	r0, [sp, #4]
    94c8:	b003      	add	sp, #12
    94ca:	e8bd 8170 	ldmia.w	sp!, {r4, r5, r6, r8, pc}
    94ce:	4807      	ldr	r0, [pc, #28]	; (94ec <sys_rand32_get+0x74>)
    94d0:	f005 fdf2 	bl	f0b8 <z_impl_device_get_binding>
    94d4:	e7df      	b.n	9496 <sys_rand32_get+0x1e>
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    94d6:	6863      	ldr	r3, [r4, #4]
    94d8:	2204      	movs	r2, #4
    94da:	681b      	ldr	r3, [r3, #0]
    94dc:	eb0d 0102 	add.w	r1, sp, r2
    94e0:	4620      	mov	r0, r4
    94e2:	4798      	blx	r3
    94e4:	e7ea      	b.n	94bc <sys_rand32_get+0x44>
    94e6:	bf00      	nop
    94e8:	20002bfc 	.word	0x20002bfc
    94ec:	0001b1f7 	.word	0x0001b1f7

000094f0 <console_out>:

static int console_out(int c)
{
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    94f0:	4b0a      	ldr	r3, [pc, #40]	; (951c <console_out+0x2c>)
{
    94f2:	b570      	push	{r4, r5, r6, lr}
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    94f4:	b2c6      	uxtb	r6, r0
{
    94f6:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    94f8:	681b      	ldr	r3, [r3, #0]
    94fa:	4630      	mov	r0, r6
    94fc:	4798      	blx	r3

	if (handled_by_debug_server) {
    94fe:	2801      	cmp	r0, #1
    9500:	d00a      	beq.n	9518 <console_out+0x28>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    9502:	2c0a      	cmp	r4, #10
    9504:	4d06      	ldr	r5, [pc, #24]	; (9520 <console_out+0x30>)
    9506:	d103      	bne.n	9510 <console_out+0x20>
		uart_poll_out(uart_console_dev, '\r');
    9508:	210d      	movs	r1, #13
    950a:	6828      	ldr	r0, [r5, #0]
    950c:	f00b fc8c 	bl	14e28 <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
    9510:	4631      	mov	r1, r6
    9512:	6828      	ldr	r0, [r5, #0]
    9514:	f00b fc88 	bl	14e28 <uart_poll_out>

	return c;
}
    9518:	4620      	mov	r0, r4
    951a:	bd70      	pop	{r4, r5, r6, pc}
    951c:	2000c6c0 	.word	0x2000c6c0
    9520:	20002c00 	.word	0x20002c00

00009524 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    9524:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    9526:	4c04      	ldr	r4, [pc, #16]	; (9538 <uart_console_hook_install+0x14>)
    9528:	4620      	mov	r0, r4
    952a:	f002 f92f 	bl	b78c <__stdout_hook_install>
	__printk_hook_install(console_out);
    952e:	4620      	mov	r0, r4
}
    9530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    9534:	f7fb be5a 	b.w	51ec <__printk_hook_install>
    9538:	000094f1 	.word	0x000094f1

0000953c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    953c:	b508      	push	{r3, lr}
    953e:	f00b fc69 	bl	14e14 <z_arch_is_user_context>
    9542:	b148      	cbz	r0, 9558 <uart_console_init+0x1c>
    9544:	2117      	movs	r1, #23
    9546:	4806      	ldr	r0, [pc, #24]	; (9560 <uart_console_init+0x24>)
    9548:	f00b fc5e 	bl	14e08 <z_arch_syscall_invoke1>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    954c:	4b05      	ldr	r3, [pc, #20]	; (9564 <uart_console_init+0x28>)
    954e:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    9550:	f7ff ffe8 	bl	9524 <uart_console_hook_install>

	return 0;
}
    9554:	2000      	movs	r0, #0
    9556:	bd08      	pop	{r3, pc}
    9558:	4801      	ldr	r0, [pc, #4]	; (9560 <uart_console_init+0x24>)
    955a:	f005 fdad 	bl	f0b8 <z_impl_device_get_binding>
    955e:	e7f5      	b.n	954c <uart_console_init+0x10>
    9560:	0001ad50 	.word	0x0001ad50
    9564:	20002c00 	.word	0x20002c00

00009568 <m16src_stop>:
		return -EINPROGRESS;
	}
}

static int m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    9568:	b510      	push	{r4, lr}
	__asm__ volatile(
    956a:	f04f 0320 	mov.w	r3, #32
    956e:	f3ef 8211 	mrs	r2, BASEPRI
    9572:	f383 8811 	msr	BASEPRI, r3
    9576:	f3bf 8f6f 	isb	sy
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    957a:	4c15      	ldr	r4, [pc, #84]	; (95d0 <m16src_stop+0x68>)
    957c:	7823      	ldrb	r3, [r4, #0]
    957e:	b933      	cbnz	r3, 958e <m16src_stop+0x26>
	__asm__ volatile(
    9580:	f382 8811 	msr	BASEPRI, r2
    9584:	f3bf 8f6f 	isb	sy
		irq_unlock(imask);
		return -EALREADY;
    9588:	f06f 0077 	mvn.w	r0, #119	; 0x77

	/* release resource guard */
	m16src_grd = 0U;

	return 0;
}
    958c:	bd10      	pop	{r4, pc}
	if (--m16src_ref) {
    958e:	3b01      	subs	r3, #1
    9590:	b2db      	uxtb	r3, r3
    9592:	7023      	strb	r3, [r4, #0]
    9594:	b133      	cbz	r3, 95a4 <m16src_stop+0x3c>
    9596:	f382 8811 	msr	BASEPRI, r2
    959a:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    959e:	f06f 000f 	mvn.w	r0, #15
    95a2:	e7f3      	b.n	958c <m16src_stop+0x24>
	if (m16src_grd) {
    95a4:	4b0b      	ldr	r3, [pc, #44]	; (95d4 <m16src_stop+0x6c>)
    95a6:	7818      	ldrb	r0, [r3, #0]
    95a8:	2101      	movs	r1, #1
    95aa:	b138      	cbz	r0, 95bc <m16src_stop+0x54>
		m16src_ref++;
    95ac:	7021      	strb	r1, [r4, #0]
    95ae:	f382 8811 	msr	BASEPRI, r2
    95b2:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    95b6:	f06f 000a 	mvn.w	r0, #10
    95ba:	e7e7      	b.n	958c <m16src_stop+0x24>
	m16src_grd = 1U;
    95bc:	7019      	strb	r1, [r3, #0]
    95be:	f382 8811 	msr	BASEPRI, r2
    95c2:	f3bf 8f6f 	isb	sy
    return ((uint32_t )NRF_CLOCK + task);
}

__STATIC_INLINE void nrf_clock_task_trigger(nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    95c6:	4a04      	ldr	r2, [pc, #16]	; (95d8 <m16src_stop+0x70>)
    95c8:	6011      	str	r1, [r2, #0]
	m16src_grd = 0U;
    95ca:	7018      	strb	r0, [r3, #0]
	return 0;
    95cc:	e7de      	b.n	958c <m16src_stop+0x24>
    95ce:	bf00      	nop
    95d0:	20005e84 	.word	0x20005e84
    95d4:	20005e83 	.word	0x20005e83
    95d8:	40000004 	.word	0x40000004

000095dc <m16src_start>:
{
    95dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    95de:	f04f 0220 	mov.w	r2, #32
    95e2:	f3ef 8311 	mrs	r3, BASEPRI
    95e6:	f382 8811 	msr	BASEPRI, r2
    95ea:	f3bf 8f6f 	isb	sy
	if (m16src_ref++) {
    95ee:	4a29      	ldr	r2, [pc, #164]	; (9694 <m16src_start+0xb8>)
    95f0:	7810      	ldrb	r0, [r2, #0]
    95f2:	1c44      	adds	r4, r0, #1
    95f4:	7014      	strb	r4, [r2, #0]
    95f6:	b180      	cbz	r0, 961a <m16src_start+0x3e>
	__asm__ volatile(
    95f8:	f383 8811 	msr	BASEPRI, r3
    95fc:	f3bf 8f6f 	isb	sy
	if ((NRF_CLOCK->HFCLKSTAT & stat) == stat) {
    9600:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9604:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    9608:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
		return -EINPROGRESS;
    960c:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    9610:	bf0c      	ite	eq
    9612:	2000      	moveq	r0, #0
    9614:	f06f 0076 	mvnne.w	r0, #118	; 0x76
    9618:	e009      	b.n	962e <m16src_start+0x52>
	if (m16src_grd) {
    961a:	4d1f      	ldr	r5, [pc, #124]	; (9698 <m16src_start+0xbc>)
    961c:	782f      	ldrb	r7, [r5, #0]
    961e:	b13f      	cbz	r7, 9630 <m16src_start+0x54>
		m16src_ref--;
    9620:	7010      	strb	r0, [r2, #0]
    9622:	f383 8811 	msr	BASEPRI, r3
    9626:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    962a:	f06f 000a 	mvn.w	r0, #10
}
    962e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1U;
    9630:	2601      	movs	r6, #1
    9632:	702e      	strb	r6, [r5, #0]
    9634:	f383 8811 	msr	BASEPRI, r3
    9638:	f3bf 8f6f 	isb	sy
	if (blocking) {
    963c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    9640:	b319      	cbz	r1, 968a <m16src_start+0xae>
		irq_disable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
    9642:	4638      	mov	r0, r7
    9644:	f001 fcb6 	bl	afb4 <z_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    9648:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    964c:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    NRF_CLOCK->INTENSET = int_mask;
    9650:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    9654:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    9656:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    965a:	b192      	cbz	r2, 9682 <m16src_start+0xa6>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    965c:	2200      	movs	r2, #0
    965e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    9662:	4a0e      	ldr	r2, [pc, #56]	; (969c <m16src_start+0xc0>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    9664:	f013 0f01 	tst.w	r3, #1
    9668:	f04f 0301 	mov.w	r3, #1
    NRF_CLOCK->INTENCLR = int_mask;
    966c:	bf08      	it	eq
    966e:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
    9672:	2000      	movs	r0, #0
    9674:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    9678:	f001 fc8c 	bl	af94 <z_arch_irq_enable>
	m16src_grd = 0U;
    967c:	2300      	movs	r3, #0
    967e:	702b      	strb	r3, [r5, #0]
    9680:	e7be      	b.n	9600 <m16src_start+0x24>
			__WFE();
    9682:	bf20      	wfe
			__SEV();
    9684:	bf40      	sev
			__WFE();
    9686:	bf20      	wfe
    9688:	e7e5      	b.n	9656 <m16src_start+0x7a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    968a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    968e:	6026      	str	r6, [r4, #0]
    9690:	e7f4      	b.n	967c <m16src_start+0xa0>
    9692:	bf00      	nop
    9694:	20005e84 	.word	0x20005e84
    9698:	20005e83 	.word	0x20005e83
    969c:	e000e100 	.word	0xe000e100

000096a0 <k32src_start>:

static int k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
    96a0:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    96a2:	f04f 0220 	mov.w	r2, #32
    96a6:	f3ef 8311 	mrs	r3, BASEPRI
    96aa:	f382 8811 	msr	BASEPRI, r2
    96ae:	f3bf 8f6f 	isb	sy
	 * initialized flag.
	 */

	imask = irq_lock();

	if (k32src_initialized) {
    96b2:	4d24      	ldr	r5, [pc, #144]	; (9744 <k32src_start+0xa4>)
    96b4:	782a      	ldrb	r2, [r5, #0]
    96b6:	b19a      	cbz	r2, 96e0 <k32src_start+0x40>
	__asm__ volatile(
    96b8:	f383 8811 	msr	BASEPRI, r3
    96bc:	f3bf 8f6f 	isb	sy
		}
	}
#endif /* NRF_CLOCK_HAS_CALIBRATION */

lf_already_started:
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    96c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    96c4:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
	       CLOCK_LFCLKSTAT_STATE_Msk;
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    96c8:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    96cc:	f003 0303 	and.w	r3, r3, #3
    96d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    96d4:	4393      	bics	r3, r2
		return 0;
	} else {
		return -EINPROGRESS;
	}
}
    96d6:	bf14      	ite	ne
    96d8:	f06f 0076 	mvnne.w	r0, #118	; 0x76
    96dc:	2000      	moveq	r0, #0
    96de:	bd70      	pop	{r4, r5, r6, pc}
	k32src_initialized = 1U;
    96e0:	2401      	movs	r4, #1
    96e2:	702c      	strb	r4, [r5, #0]
    96e4:	f383 8811 	msr	BASEPRI, r3
    96e8:	f3bf 8f6f 	isb	sy
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    96ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    96f0:	4e15      	ldr	r6, [pc, #84]	; (9748 <k32src_start+0xa8>)
    96f2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    NRF_CLOCK->INTENSET = int_mask;
    96f6:	2502      	movs	r5, #2
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    96f8:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    96fc:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    9700:	f011 0103 	ands.w	r1, r1, #3
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    9704:	6034      	str	r4, [r6, #0]
    NRF_CLOCK->INTENCLR = int_mask;
    9706:	f04f 0618 	mov.w	r6, #24
    970a:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    970e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    9712:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    9716:	d1d3      	bne.n	96c0 <k32src_start+0x20>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    9718:	2210      	movs	r2, #16
    971a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    NRF_CLOCK->INTENSET = int_mask;
    971e:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
		if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) == 0) {
    9722:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    9726:	03d2      	lsls	r2, r2, #15
    9728:	d402      	bmi.n	9730 <k32src_start+0x90>
    972a:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
			goto lf_already_started;
    972e:	e7c7      	b.n	96c0 <k32src_start+0x20>
    9730:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = m16src_start(dev, false);
    9734:	f7ff ff52 	bl	95dc <m16src_start>
		if (!err) {
    9738:	2800      	cmp	r0, #0
    973a:	d1c1      	bne.n	96c0 <k32src_start+0x20>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    973c:	4b03      	ldr	r3, [pc, #12]	; (974c <k32src_start+0xac>)
    973e:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    9742:	e7bd      	b.n	96c0 <k32src_start+0x20>
    9744:	20005e82 	.word	0x20005e82
    9748:	40000008 	.word	0x40000008
    974c:	e000e100 	.word	0xe000e100

00009750 <nrf_power_clock_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void nrf_power_clock_isr(void *arg)
{
    9750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#endif
#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
	bool usb_detected, usb_pwr_rdy, usb_removed;
#endif

	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    9754:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    return (bool)*(volatile uint32_t *)((uint8_t *)NRF_POWER + (uint32_t)event);
    9758:	4d4e      	ldr	r5, [pc, #312]	; (9894 <nrf_power_clock_isr+0x144>)
    975a:	f8d3 9108 	ldr.w	r9, [r3, #264]	; 0x108

	hf_intenset = ((NRF_CLOCK->INTENSET &
    975e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		       CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    9762:	f8d3 e100 	ldr.w	lr, [r3, #256]	; 0x100
{
    9766:	4680      	mov	r8, r0

	lf_intenset = ((NRF_CLOCK->INTENSET &
    9768:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
		       CLOCK_INTENSET_LFCLKSTARTED_Msk) != 0);
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    976c:	f8d3 c104 	ldr.w	ip, [r3, #260]	; 0x104

#if NRF_CLOCK_HAS_CALIBRATION
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    9770:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    9774:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
    9778:	682f      	ldr	r7, [r5, #0]
    977a:	68ae      	ldr	r6, [r5, #8]
    977c:	3504      	adds	r5, #4
    977e:	3400      	adds	r4, #0
{
    9780:	b085      	sub	sp, #20
	hf_intenset = ((NRF_CLOCK->INTENSET &
    9782:	f002 0201 	and.w	r2, r2, #1
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    9786:	bf18      	it	ne
    9788:	2401      	movne	r4, #1
    978a:	682d      	ldr	r5, [r5, #0]
#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
			|| usb_detected || usb_pwr_rdy || usb_removed
#endif
	);

	if (pof) {
    978c:	f1b9 0f00 	cmp.w	r9, #0
    9790:	d003      	beq.n	979a <nrf_power_clock_isr+0x4a>
		NRF_POWER->EVENTS_POFWARN = 0;
    9792:	f04f 0900 	mov.w	r9, #0
    9796:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
	}

	if (hf) {
    979a:	f1be 0f00 	cmp.w	lr, #0
    979e:	d069      	beq.n	9874 <nrf_power_clock_isr+0x124>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    97a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    97a4:	f04f 0e00 	mov.w	lr, #0
    97a8:	f8c3 e100 	str.w	lr, [r3, #256]	; 0x100
	}

	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
    97ac:	b15a      	cbz	r2, 97c6 <nrf_power_clock_isr+0x76>
				   (CLOCK_HFCLKSTAT_STATE_Msk |
				    CLOCK_HFCLKSTAT_SRC_Msk)))){
		/* INTENSET is used as state flag to start calibration,
		 * hence clear it here.
		 */
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    97ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
#if defined(CONFIG_SOC_SERIES_NRF52X)
		/* NOTE: Errata [192] CLOCK: LFRC frequency offset after
		 * calibration.
		 * Calibration start, workaround.
		 */
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    97b2:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 9898 <nrf_power_clock_isr+0x148>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    97b6:	2201      	movs	r2, #1
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    97b8:	f04f 0902 	mov.w	r9, #2
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    97bc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    97c0:	f8ce 9000 	str.w	r9, [lr]
#endif /* CONFIG_SOC_SERIES_NRF52X */

#if NRF_CLOCK_HAS_CALIBRATION
		/* Start Calibration */
		NRF_CLOCK->TASKS_CAL = 1;
    97c4:	611a      	str	r2, [r3, #16]
#endif
	}

	if (lf) {
    97c6:	f1bc 0f00 	cmp.w	ip, #0
    97ca:	d141      	bne.n	9850 <nrf_power_clock_isr+0x100>
#endif
		}
	}

#if NRF_CLOCK_HAS_CALIBRATION
	if (done) {
    97cc:	b161      	cbz	r1, 97e8 <nrf_power_clock_isr+0x98>
#if defined(CONFIG_SOC_SERIES_NRF52X)
		/* NOTE: Errata [192] CLOCK: LFRC frequency offset after
		 * calibration.
		 * Calibration done, workaround.
		 */
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    97ce:	4b32      	ldr	r3, [pc, #200]	; (9898 <nrf_power_clock_isr+0x148>)
#endif /* CONFIG_SOC_SERIES_NRF52X */

		NRF_CLOCK->EVENTS_DONE = 0;
    97d0:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    97d4:	2100      	movs	r1, #0
    97d6:	6019      	str	r1, [r3, #0]

		/* Calibration done, stop 16M Xtal. */
		err = m16src_stop(dev, NULL);
    97d8:	4640      	mov	r0, r8
		NRF_CLOCK->EVENTS_DONE = 0;
    97da:	f8c9 110c 	str.w	r1, [r9, #268]	; 0x10c
		err = m16src_stop(dev, NULL);
    97de:	f7ff fec3 	bl	9568 <m16src_stop>
		__ASSERT_NO_MSG(!err || err == -EBUSY);

		/* Start timer for next calibration. */
		NRF_CLOCK->TASKS_CTSTART = 1;
    97e2:	2301      	movs	r3, #1
    97e4:	f8c9 3014 	str.w	r3, [r9, #20]
	}

	if (ctto) {
    97e8:	b174      	cbz	r4, 9808 <nrf_power_clock_isr+0xb8>
		int err;

		NRF_CLOCK->EVENTS_CTTO = 0;
    97ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    97ee:	2100      	movs	r1, #0

		/* Start HF clock, if already started
		 * then explicitly assert IRQ; we use the INTENSET
		 * as a state flag to start calibration.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    97f0:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    97f2:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110

		err = m16src_start(dev, false);
    97f6:	4640      	mov	r0, r8
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    97f8:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = m16src_start(dev, false);
    97fc:	f7ff feee 	bl	95dc <m16src_start>
		if (!err) {
    9800:	b910      	cbnz	r0, 9808 <nrf_power_clock_isr+0xb8>
    9802:	4b26      	ldr	r3, [pc, #152]	; (989c <nrf_power_clock_isr+0x14c>)
    9804:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
		}
	}
#endif /* NRF_CLOCK_HAS_CALIBRATION */

#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
	if (usb_detected) {
    9808:	b14f      	cbz	r7, 981e <nrf_power_clock_isr+0xce>
    *((volatile uint32_t *)((uint8_t *)NRF_POWER + (uint32_t)event)) = 0x0UL;
    980a:	4b22      	ldr	r3, [pc, #136]	; (9894 <nrf_power_clock_isr+0x144>)
    980c:	2200      	movs	r2, #0
    980e:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_POWER + (uint32_t)event));
    9810:	681b      	ldr	r3, [r3, #0]
    9812:	9301      	str	r3, [sp, #4]
	usb_dc_nrfx_power_event_callback(event);
    9814:	f44f 708e 	mov.w	r0, #284	; 0x11c
    (void)dummy;
    9818:	9b01      	ldr	r3, [sp, #4]
    981a:	f000 fd97 	bl	a34c <usb_dc_nrfx_power_event_callback>
		nrf_power_event_clear(NRF_POWER_EVENT_USBDETECTED);
		power_event_cb(NRF_POWER_EVENT_USBDETECTED);
	}

	if (usb_pwr_rdy) {
    981e:	b14e      	cbz	r6, 9834 <nrf_power_clock_isr+0xe4>
    *((volatile uint32_t *)((uint8_t *)NRF_POWER + (uint32_t)event)) = 0x0UL;
    9820:	4b1f      	ldr	r3, [pc, #124]	; (98a0 <nrf_power_clock_isr+0x150>)
    9822:	2200      	movs	r2, #0
    9824:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_POWER + (uint32_t)event));
    9826:	681b      	ldr	r3, [r3, #0]
    9828:	9302      	str	r3, [sp, #8]
	usb_dc_nrfx_power_event_callback(event);
    982a:	f44f 7092 	mov.w	r0, #292	; 0x124
    (void)dummy;
    982e:	9b02      	ldr	r3, [sp, #8]
    9830:	f000 fd8c 	bl	a34c <usb_dc_nrfx_power_event_callback>
		nrf_power_event_clear(NRF_POWER_EVENT_USBPWRRDY);
		power_event_cb(NRF_POWER_EVENT_USBPWRRDY);
	}

	if (usb_removed) {
    9834:	b355      	cbz	r5, 988c <nrf_power_clock_isr+0x13c>
    *((volatile uint32_t *)((uint8_t *)NRF_POWER + (uint32_t)event)) = 0x0UL;
    9836:	4b1b      	ldr	r3, [pc, #108]	; (98a4 <nrf_power_clock_isr+0x154>)
    9838:	2200      	movs	r2, #0
    983a:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_POWER + (uint32_t)event));
    983c:	681b      	ldr	r3, [r3, #0]
    983e:	9303      	str	r3, [sp, #12]
    (void)dummy;
    9840:	9b03      	ldr	r3, [sp, #12]
	usb_dc_nrfx_power_event_callback(event);
    9842:	f44f 7090 	mov.w	r0, #288	; 0x120
		nrf_power_event_clear(NRF_POWER_EVENT_USBREMOVED);
		power_event_cb(NRF_POWER_EVENT_USBREMOVED);
	}
#endif
}
    9846:	b005      	add	sp, #20
    9848:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	usb_dc_nrfx_power_event_callback(event);
    984c:	f000 bd7e 	b.w	a34c <usb_dc_nrfx_power_event_callback>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    9850:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9854:	2200      	movs	r2, #0
    9856:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (lf_intenset) {
    985a:	0782      	lsls	r2, r0, #30
    985c:	d5b6      	bpl.n	97cc <nrf_power_clock_isr+0x7c>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    985e:	2202      	movs	r2, #2
    9860:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
			if ((NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) ==
    9864:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    9868:	079b      	lsls	r3, r3, #30
    986a:	d1af      	bne.n	97cc <nrf_power_clock_isr+0x7c>
	if (done) {
    986c:	2900      	cmp	r1, #0
    986e:	d0bc      	beq.n	97ea <nrf_power_clock_isr+0x9a>
				ctto = 1U;
    9870:	2401      	movs	r4, #1
    9872:	e7ac      	b.n	97ce <nrf_power_clock_isr+0x7e>
	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
    9874:	2a00      	cmp	r2, #0
    9876:	d0a6      	beq.n	97c6 <nrf_power_clock_isr+0x76>
    9878:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    987c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    9880:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
    9884:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    9888:	d19d      	bne.n	97c6 <nrf_power_clock_isr+0x76>
    988a:	e790      	b.n	97ae <nrf_power_clock_isr+0x5e>
}
    988c:	b005      	add	sp, #20
    988e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9892:	bf00      	nop
    9894:	4000011c 	.word	0x4000011c
    9898:	40000c34 	.word	0x40000c34
    989c:	e000e100 	.word	0xe000e100
    98a0:	40000124 	.word	0x40000124
    98a4:	40000120 	.word	0x40000120

000098a8 <endpoint_ctx>:
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
    98a8:	0601      	lsls	r1, r0, #24
	ep_num = NRF_USBD_EP_NR_GET(ep);
    98aa:	f000 030f 	and.w	r3, r0, #15
	if (NRF_USBD_EPIN_CHECK(ep)) {
    98ae:	f000 0208 	and.w	r2, r0, #8
    98b2:	d506      	bpl.n	98c2 <endpoint_ctx+0x1a>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    98b4:	b96a      	cbnz	r2, 98d2 <endpoint_ctx+0x2a>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
    98b6:	4809      	ldr	r0, [pc, #36]	; (98dc <endpoint_ctx+0x34>)
    98b8:	2224      	movs	r2, #36	; 0x24
    98ba:	fb02 0003 	mla	r0, r2, r3, r0
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    98be:	3028      	adds	r0, #40	; 0x28
    98c0:	4770      	bx	lr
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    98c2:	b942      	cbnz	r2, 98d6 <endpoint_ctx+0x2e>
					    CFG_EP_ISOIN_CNT +
    98c4:	f103 0009 	add.w	r0, r3, #9
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    98c8:	4b04      	ldr	r3, [pc, #16]	; (98dc <endpoint_ctx+0x34>)
    98ca:	2224      	movs	r2, #36	; 0x24
    98cc:	fb02 3000 	mla	r0, r2, r0, r3
    98d0:	e7f5      	b.n	98be <endpoint_ctx+0x16>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    98d2:	4803      	ldr	r0, [pc, #12]	; (98e0 <endpoint_ctx+0x38>)
    98d4:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    98d6:	4803      	ldr	r0, [pc, #12]	; (98e4 <endpoint_ctx+0x3c>)
					    ep_num];
		}
	}

	return NULL;
}
    98d8:	4770      	bx	lr
    98da:	bf00      	nop
    98dc:	20003b64 	.word	0x20003b64
    98e0:	20003cac 	.word	0x20003cac
    98e4:	20003df0 	.word	0x20003df0

000098e8 <usbd_evt_put>:
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
	k_fifo_put(&work_queue, ev);
    98e8:	4601      	mov	r1, r0
    98ea:	4801      	ldr	r0, [pc, #4]	; (98f0 <usbd_evt_put+0x8>)
    98ec:	f00e bdb5 	b.w	1845a <k_queue_append>
    98f0:	20011bdc 	.word	0x20011bdc

000098f4 <k_queue_get.constprop.15>:
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
    98f4:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
    98f8:	f00b fac1 	bl	14e7e <z_arch_is_user_context>
    98fc:	4601      	mov	r1, r0
    98fe:	b128      	cbz	r0, 990c <k_queue_get.constprop.15+0x18>
	register u32_t ret __asm__("r0") = arg1;
    9900:	4805      	ldr	r0, [pc, #20]	; (9918 <k_queue_get.constprop.15+0x24>)
	register u32_t r1 __asm__("r1") = arg2;
    9902:	2100      	movs	r1, #0
	register u32_t r6 __asm__("r6") = call_id;
    9904:	2654      	movs	r6, #84	; 0x54
	__asm__ volatile("svc %[svid]\n"
    9906:	df03      	svc	3
    9908:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
    990c:	4802      	ldr	r0, [pc, #8]	; (9918 <k_queue_get.constprop.15+0x24>)
    990e:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
    9912:	f00e bdb6 	b.w	18482 <z_impl_k_queue_get>
    9916:	bf00      	nop
    9918:	20011bdc 	.word	0x20011bdc

0000991c <usbd_work_schedule>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    991c:	4909      	ldr	r1, [pc, #36]	; (9944 <usbd_work_schedule+0x28>)
    991e:	f3bf 8f5b 	dmb	ish
    9922:	e851 3f00 	ldrex	r3, [r1]
    9926:	f043 0201 	orr.w	r2, r3, #1
    992a:	e841 2000 	strex	r0, r2, [r1]
    992e:	2800      	cmp	r0, #0
    9930:	d1f7      	bne.n	9922 <usbd_work_schedule+0x6>
    9932:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    9936:	07db      	lsls	r3, r3, #31
    9938:	d403      	bmi.n	9942 <usbd_work_schedule+0x26>
		k_queue_append(&work_q->queue, work);
    993a:	3908      	subs	r1, #8
    993c:	4802      	ldr	r0, [pc, #8]	; (9948 <usbd_work_schedule+0x2c>)
    993e:	f00e bd8c 	b.w	1845a <k_queue_append>
}
    9942:	4770      	bx	lr
    9944:	20003b74 	.word	0x20003b74
    9948:	2000582c 	.word	0x2000582c

0000994c <usbd_evt_alloc>:
 * This function should be called prior to usbd_evt_put().
 *
 * @returns Pointer to the allocated event or NULL if there was no space left.
 */
static inline struct usbd_event *usbd_evt_alloc(void)
{
    994c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int ret;
	struct usbd_event *ev;
	struct k_mem_block block;

	ret = k_mem_pool_alloc(&fifo_elem_pool, &block,
    994e:	466c      	mov	r4, sp
    9950:	2300      	movs	r3, #0
    9952:	2218      	movs	r2, #24
    9954:	4621      	mov	r1, r4
    9956:	4829      	ldr	r0, [pc, #164]	; (99fc <usbd_evt_alloc+0xb0>)
    9958:	f005 fd68 	bl	f42c <k_mem_pool_alloc>
			       sizeof(struct usbd_event),
			       K_NO_WAIT);

	if (ret < 0) {
    995c:	2800      	cmp	r0, #0
    995e:	da46      	bge.n	99ee <usbd_evt_alloc+0xa2>
    9960:	f00b fa8d 	bl	14e7e <z_arch_is_user_context>
		LOG_ERR("USBD event allocation failed!");
    9964:	2201      	movs	r2, #1
    9966:	f04f 0300 	mov.w	r3, #0
    996a:	f362 0307 	bfi	r3, r2, #0, #8
    996e:	4d24      	ldr	r5, [pc, #144]	; (9a00 <usbd_evt_alloc+0xb4>)
    9970:	4a24      	ldr	r2, [pc, #144]	; (9a04 <usbd_evt_alloc+0xb8>)
    9972:	1aad      	subs	r5, r5, r2
    9974:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    9978:	f365 138f 	bfi	r3, r5, #6, #10
    997c:	b1f8      	cbz	r0, 99be <usbd_evt_alloc+0x72>
    997e:	4922      	ldr	r1, [pc, #136]	; (9a08 <usbd_evt_alloc+0xbc>)
    9980:	4618      	mov	r0, r3
    9982:	f009 ff1b 	bl	137bc <log_from_user>
		/* This should NOT happen in a properly designed system.
		 * Allocation may fail if workqueue thread is starved
		 * or event queue size is too small (CONFIG_USB_NRFX_EVT_QUEUE_SIZE).
		 * Wipe all events, free the space and schedule reinitialization.
		 */
		usbd_evt_flush();
    9986:	f00b fa94 	bl	14eb2 <usbd_evt_flush>

		ret = k_mem_pool_alloc(&fifo_elem_pool, &block,
    998a:	2300      	movs	r3, #0
    998c:	2218      	movs	r2, #24
    998e:	4621      	mov	r1, r4
    9990:	481a      	ldr	r0, [pc, #104]	; (99fc <usbd_evt_alloc+0xb0>)
    9992:	f005 fd4b 	bl	f42c <k_mem_pool_alloc>
					       sizeof(struct usbd_event),
					       K_NO_WAIT);
		if (ret < 0) {
    9996:	2800      	cmp	r0, #0
    9998:	da1b      	bge.n	99d2 <usbd_evt_alloc+0x86>
    999a:	f00b fa70 	bl	14e7e <z_arch_is_user_context>
			/* This should never fail in a properly operating system. */
			LOG_ERR("USBD event memory corrupted.");
    999e:	f04f 0300 	mov.w	r3, #0
    99a2:	2201      	movs	r2, #1
    99a4:	f362 0307 	bfi	r3, r2, #0, #8
    99a8:	f365 138f 	bfi	r3, r5, #6, #10
    99ac:	b160      	cbz	r0, 99c8 <usbd_evt_alloc+0x7c>
    99ae:	4917      	ldr	r1, [pc, #92]	; (9a0c <usbd_evt_alloc+0xc0>)
    99b0:	4618      	mov	r0, r3
    99b2:	f009 ff03 	bl	137bc <log_from_user>
		ev->block = block;
		ev->evt_type = USBD_EVT_REINIT;
		usbd_evt_put(ev);
		usbd_work_schedule();

		return NULL;
    99b6:	2300      	movs	r3, #0

	ev = (struct usbd_event *)block.data;
	ev->block = block;

	return ev;
}
    99b8:	4618      	mov	r0, r3
    99ba:	b003      	add	sp, #12
    99bc:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("USBD event allocation failed!");
    99be:	4619      	mov	r1, r3
    99c0:	4811      	ldr	r0, [pc, #68]	; (9a08 <usbd_evt_alloc+0xbc>)
    99c2:	f009 fe93 	bl	136ec <log_0>
    99c6:	e7de      	b.n	9986 <usbd_evt_alloc+0x3a>
			LOG_ERR("USBD event memory corrupted.");
    99c8:	4619      	mov	r1, r3
    99ca:	4810      	ldr	r0, [pc, #64]	; (9a0c <usbd_evt_alloc+0xc0>)
    99cc:	f009 fe8e 	bl	136ec <log_0>
			return NULL;
    99d0:	e7f1      	b.n	99b6 <usbd_evt_alloc+0x6a>
		ev = (struct usbd_event *)block.data;
    99d2:	9b00      	ldr	r3, [sp, #0]
		ev->block = block;
    99d4:	e894 0003 	ldmia.w	r4, {r0, r1}
    99d8:	1d1a      	adds	r2, r3, #4
    99da:	e882 0003 	stmia.w	r2, {r0, r1}
		ev->evt_type = USBD_EVT_REINIT;
    99de:	2204      	movs	r2, #4
    99e0:	751a      	strb	r2, [r3, #20]
		usbd_evt_put(ev);
    99e2:	4618      	mov	r0, r3
    99e4:	f7ff ff80 	bl	98e8 <usbd_evt_put>
		usbd_work_schedule();
    99e8:	f7ff ff98 	bl	991c <usbd_work_schedule>
    99ec:	e7e3      	b.n	99b6 <usbd_evt_alloc+0x6a>
	ev = (struct usbd_event *)block.data;
    99ee:	9b00      	ldr	r3, [sp, #0]
	ev->block = block;
    99f0:	e894 0003 	ldmia.w	r4, {r0, r1}
    99f4:	1d1a      	adds	r2, r3, #4
    99f6:	e882 0003 	stmia.w	r2, {r0, r1}
	return ev;
    99fa:	e7dd      	b.n	99b8 <usbd_evt_alloc+0x6c>
    99fc:	20011b90 	.word	0x20011b90
    9a00:	00018fcc 	.word	0x00018fcc
    9a04:	00018f84 	.word	0x00018f84
    9a08:	0001b416 	.word	0x0001b416
    9a0c:	0001b434 	.word	0x0001b434

00009a10 <usbd_event_transfer_data>:
		}
	}
}

static void usbd_event_transfer_data(nrfx_usbd_evt_t const *const p_event)
{
    9a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct nrf_usbd_ep_ctx *ep_ctx =
		endpoint_ctx(p_event->data.eptransfer.ep);
    9a14:	7887      	ldrb	r7, [r0, #2]
{
    9a16:	4604      	mov	r4, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    9a18:	4638      	mov	r0, r7
    9a1a:	f7ff ff45 	bl	98a8 <endpoint_ctx>

	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    9a1e:	063b      	lsls	r3, r7, #24
		endpoint_ctx(p_event->data.eptransfer.ep);
    9a20:	4606      	mov	r6, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    9a22:	78e5      	ldrb	r5, [r4, #3]
    9a24:	d50f      	bpl.n	9a46 <usbd_event_transfer_data+0x36>
		switch (p_event->data.eptransfer.status) {
    9a26:	2d00      	cmp	r5, #0
    9a28:	d14d      	bne.n	9ac6 <usbd_event_transfer_data+0xb6>
		case NRFX_USBD_EP_OK: {
			struct usbd_event *ev = usbd_evt_alloc();
    9a2a:	f7ff ff8f 	bl	994c <usbd_evt_alloc>

			if (!ev) {
    9a2e:	4602      	mov	r2, r0
    9a30:	2800      	cmp	r0, #0
    9a32:	d066      	beq.n	9b02 <usbd_event_transfer_data+0xf2>
    9a34:	f00b fa23 	bl	14e7e <z_arch_is_user_context>

			LOG_DBG("write complete, ep %d",
				(u32_t)p_event->data.eptransfer.ep);

			ep_ctx->write_in_progress = false;
			ev->evt_type = USBD_EVT_EP;
    9a38:	2301      	movs	r3, #1
			ep_ctx->write_in_progress = false;
    9a3a:	f886 5022 	strb.w	r5, [r6, #34]	; 0x22
			ev->evt_type = USBD_EVT_EP;
    9a3e:	7513      	strb	r3, [r2, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    9a40:	2303      	movs	r3, #3
			LOG_DBG("read complete, ep %d, len %d",
				(u32_t)p_event->data.eptransfer.ep,
				ep_ctx->buf.len);

			ev->evt_type = USBD_EVT_EP;
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    9a42:	7413      	strb	r3, [r2, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    9a44:	e00d      	b.n	9a62 <usbd_event_transfer_data+0x52>
		switch (p_event->data.eptransfer.status) {
    9a46:	b1a5      	cbz	r5, 9a72 <usbd_event_transfer_data+0x62>
    9a48:	2d01      	cmp	r5, #1
    9a4a:	d13c      	bne.n	9ac6 <usbd_event_transfer_data+0xb6>
			struct usbd_event *ev = usbd_evt_alloc();
    9a4c:	f7ff ff7e 	bl	994c <usbd_evt_alloc>
			if (!ev) {
    9a50:	4602      	mov	r2, r0
    9a52:	2800      	cmp	r0, #0
    9a54:	d055      	beq.n	9b02 <usbd_event_transfer_data+0xf2>
    9a56:	f00b fa12 	bl	14e7e <z_arch_is_user_context>
			ep_ctx->read_pending = true;
    9a5a:	f886 5021 	strb.w	r5, [r6, #33]	; 0x21
			ev->evt_type = USBD_EVT_EP;
    9a5e:	7515      	strb	r5, [r2, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    9a60:	7415      	strb	r5, [r2, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    9a62:	60d6      	str	r6, [r2, #12]
			usbd_evt_put(ev);
    9a64:	4610      	mov	r0, r2
    9a66:	f7ff ff3f 	bl	98e8 <usbd_evt_put>
				p_event->data.eptransfer.ep);
		}
		break;
		}
	}
}
    9a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			usbd_work_schedule();
    9a6e:	f7ff bf55 	b.w	991c <usbd_work_schedule>
			struct usbd_event *ev = usbd_evt_alloc();
    9a72:	f7ff ff6b 	bl	994c <usbd_evt_alloc>
			if (!ev) {
    9a76:	4602      	mov	r2, r0
    9a78:	2800      	cmp	r0, #0
    9a7a:	d042      	beq.n	9b02 <usbd_event_transfer_data+0xf2>
				p_event->data.eptransfer.ep);
    9a7c:	78a3      	ldrb	r3, [r4, #2]

uint32_t nrf_usbd_ep_amount_get(uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    9a7e:	4922      	ldr	r1, [pc, #136]	; (9b08 <usbd_event_transfer_data+0xf8>)
    9a80:	f013 0f80 	tst.w	r3, #128	; 0x80
    9a84:	f003 0008 	and.w	r0, r3, #8
    9a88:	d011      	beq.n	9aae <usbd_event_transfer_data+0x9e>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    9a8a:	b140      	cbz	r0, 9a9e <usbd_event_transfer_data+0x8e>
        {
            ret = NRF_USBD->ISOIN.AMOUNT;
    9a8c:	f8d1 36a8 	ldr.w	r3, [r1, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(
    9a90:	60f3      	str	r3, [r6, #12]
    9a92:	f00b f9f4 	bl	14e7e <z_arch_is_user_context>
			ev->evt_type = USBD_EVT_EP;
    9a96:	2301      	movs	r3, #1
    9a98:	7513      	strb	r3, [r2, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    9a9a:	2302      	movs	r3, #2
    9a9c:	e7d1      	b.n	9a42 <usbd_event_transfer_data+0x32>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT(epnr < NRFX_ARRAY_SIZE(NRF_USBD->EPOUT));
            ret = NRF_USBD->EPIN[epnr].AMOUNT;
    9a9e:	f003 030f 	and.w	r3, r3, #15
    9aa2:	2014      	movs	r0, #20
    9aa4:	fb00 1303 	mla	r3, r0, r3, r1
    9aa8:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    9aac:	e7f0      	b.n	9a90 <usbd_event_transfer_data+0x80>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    9aae:	b110      	cbz	r0, 9ab6 <usbd_event_transfer_data+0xa6>
        {
            ret = NRF_USBD->ISOOUT.AMOUNT;
    9ab0:	f8d1 37a8 	ldr.w	r3, [r1, #1960]	; 0x7a8
    9ab4:	e7ec      	b.n	9a90 <usbd_event_transfer_data+0x80>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT(epnr < NRFX_ARRAY_SIZE(NRF_USBD->EPOUT));
            ret = NRF_USBD->EPOUT[epnr].AMOUNT;
    9ab6:	f003 030f 	and.w	r3, r3, #15
    9aba:	2014      	movs	r0, #20
    9abc:	fb00 1303 	mla	r3, r0, r3, r1
    9ac0:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    9ac4:	e7e4      	b.n	9a90 <usbd_event_transfer_data+0x80>
    9ac6:	f00b f9da 	bl	14e7e <z_arch_is_user_context>
			LOG_ERR("Unexpected event from nrfx_usbd: %d, ep %d",
    9aca:	f04f 0500 	mov.w	r5, #0
    9ace:	2301      	movs	r3, #1
    9ad0:	f363 0507 	bfi	r5, r3, #0, #8
    9ad4:	4a0d      	ldr	r2, [pc, #52]	; (9b0c <usbd_event_transfer_data+0xfc>)
    9ad6:	4b0e      	ldr	r3, [pc, #56]	; (9b10 <usbd_event_transfer_data+0x100>)
    9ad8:	78e1      	ldrb	r1, [r4, #3]
    9ada:	1a9b      	subs	r3, r3, r2
    9adc:	08db      	lsrs	r3, r3, #3
    9ade:	f363 158f 	bfi	r5, r3, #6, #10
    9ae2:	78a2      	ldrb	r2, [r4, #2]
    9ae4:	b138      	cbz	r0, 9af6 <usbd_event_transfer_data+0xe6>
    9ae6:	4613      	mov	r3, r2
    9ae8:	4628      	mov	r0, r5
    9aea:	460a      	mov	r2, r1
}
    9aec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			LOG_ERR("Unexpected event from nrfx_usbd: %d, ep %d",
    9af0:	4908      	ldr	r1, [pc, #32]	; (9b14 <usbd_event_transfer_data+0x104>)
    9af2:	f009 be63 	b.w	137bc <log_from_user>
    9af6:	462b      	mov	r3, r5
    9af8:	4806      	ldr	r0, [pc, #24]	; (9b14 <usbd_event_transfer_data+0x104>)
}
    9afa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			LOG_ERR("Unexpected event from nrfx_usbd: %d, ep %d",
    9afe:	f009 be16 	b.w	1372e <log_2>
}
    9b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9b06:	bf00      	nop
    9b08:	40027000 	.word	0x40027000
    9b0c:	00018f84 	.word	0x00018f84
    9b10:	00018fcc 	.word	0x00018fcc
    9b14:	0001b3eb 	.word	0x0001b3eb

00009b18 <usbd_event_handler>:

/**
 * @brief nRFx USBD driver event handler function.
 */
static void usbd_event_handler(nrfx_usbd_evt_t const *const p_event)
{
    9b18:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b1a:	4604      	mov	r4, r0
    9b1c:	b089      	sub	sp, #36	; 0x24
	struct nrf_usbd_ep_ctx *ep_ctx;
	struct usbd_event evt = {0};
    9b1e:	2218      	movs	r2, #24
    9b20:	2100      	movs	r1, #0
    9b22:	a802      	add	r0, sp, #8
    9b24:	f7f8 fc65 	bl	23f2 <memset>
	bool put_evt = false;

	switch (p_event->type) {
    9b28:	7823      	ldrb	r3, [r4, #0]
    9b2a:	3b01      	subs	r3, #1
    9b2c:	2b05      	cmp	r3, #5
    9b2e:	d81d      	bhi.n	9b6c <usbd_event_handler+0x54>
    9b30:	e8df f003 	tbb	[pc, r3]
    9b34:	1a1603d3 	.word	0x1a1603d3
    9b38:	1ec2      	.short	0x1ec2
    9b3a:	f00b f9a0 	bl	14e7e <z_arch_is_user_context>
	case NRFX_USBD_EVT_SUSPEND:
		LOG_DBG("SUSPEND state detected.");
		evt.evt_type = USBD_EVT_POWER;
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    9b3e:	2303      	movs	r3, #3
		put_evt = true;
		break;
	case NRFX_USBD_EVT_RESUME:
		LOG_DBG("RESUMING from suspend.");
		evt.evt_type = USBD_EVT_POWER;
		evt.evt.pwr_evt.state = USBD_RESUMED;
    9b40:	f88d 3014 	strb.w	r3, [sp, #20]
		evt.evt_type = USBD_EVT_POWER;
    9b44:	2400      	movs	r4, #0
	}

	if (put_evt) {
		struct usbd_event *ev;

		ev = usbd_evt_alloc();
    9b46:	f7ff ff01 	bl	994c <usbd_evt_alloc>
		if (!ev) {
    9b4a:	4603      	mov	r3, r0
    9b4c:	b170      	cbz	r0, 9b6c <usbd_event_handler+0x54>
			return;
		}
		ev->evt_type = evt.evt_type;
		ev->evt = evt.evt;
    9b4e:	a905      	add	r1, sp, #20
		ev->evt_type = evt.evt_type;
    9b50:	7504      	strb	r4, [r0, #20]
		ev->evt = evt.evt;
    9b52:	f100 020c 	add.w	r2, r0, #12
    9b56:	c903      	ldmia	r1, {r0, r1}
    9b58:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    9b5c:	4618      	mov	r0, r3
    9b5e:	e027      	b.n	9bb0 <usbd_event_handler+0x98>
    9b60:	f00b f98d 	bl	14e7e <z_arch_is_user_context>
		evt.evt.pwr_evt.state = USBD_RESUMED;
    9b64:	2304      	movs	r3, #4
    9b66:	e7eb      	b.n	9b40 <usbd_event_handler+0x28>
    9b68:	f00b f989 	bl	14e7e <z_arch_is_user_context>
		usbd_work_schedule();
	}
}
    9b6c:	b009      	add	sp, #36	; 0x24
    9b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    9b70:	78a7      	ldrb	r7, [r4, #2]
    9b72:	4638      	mov	r0, r7
    9b74:	f7ff fe98 	bl	98a8 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    9b78:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    9b7a:	4605      	mov	r5, r0
		switch (ep_ctx->cfg.type) {
    9b7c:	b12b      	cbz	r3, 9b8a <usbd_event_handler+0x72>
    9b7e:	2b03      	cmp	r3, #3
    9b80:	d8f4      	bhi.n	9b6c <usbd_event_handler+0x54>
			usbd_event_transfer_data(p_event);
    9b82:	4620      	mov	r0, r4
    9b84:	f7ff ff44 	bl	9a10 <usbd_event_transfer_data>
	if (put_evt) {
    9b88:	e7f0      	b.n	9b6c <usbd_event_handler+0x54>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    9b8a:	063b      	lsls	r3, r7, #24
    9b8c:	78e6      	ldrb	r6, [r4, #3]
    9b8e:	d530      	bpl.n	9bf2 <usbd_event_handler+0xda>
		switch (p_event->data.eptransfer.status) {
    9b90:	b99e      	cbnz	r6, 9bba <usbd_event_handler+0xa2>
			struct usbd_event *ev = usbd_evt_alloc();
    9b92:	f7ff fedb 	bl	994c <usbd_evt_alloc>
			if (!ev) {
    9b96:	4602      	mov	r2, r0
    9b98:	2800      	cmp	r0, #0
    9b9a:	d0e7      	beq.n	9b6c <usbd_event_handler+0x54>
			ev->evt_type = USBD_EVT_EP;
    9b9c:	2301      	movs	r3, #1
			ep_ctx->write_in_progress = false;
    9b9e:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
			ev->evt_type = USBD_EVT_EP;
    9ba2:	7503      	strb	r3, [r0, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    9ba4:	2303      	movs	r3, #3
    9ba6:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    9ba8:	60c5      	str	r5, [r0, #12]
    9baa:	f00b f968 	bl	14e7e <z_arch_is_user_context>
			usbd_evt_put(ev);
    9bae:	4610      	mov	r0, r2
		usbd_evt_put(ev);
    9bb0:	f7ff fe9a 	bl	98e8 <usbd_evt_put>
		usbd_work_schedule();
    9bb4:	f7ff feb2 	bl	991c <usbd_work_schedule>
    9bb8:	e7d8      	b.n	9b6c <usbd_event_handler+0x54>
    9bba:	f00b f960 	bl	14e7e <z_arch_is_user_context>
			LOG_ERR(
    9bbe:	f04f 0500 	mov.w	r5, #0
    9bc2:	2301      	movs	r3, #1
    9bc4:	f363 0507 	bfi	r5, r3, #0, #8
    9bc8:	4a45      	ldr	r2, [pc, #276]	; (9ce0 <usbd_event_handler+0x1c8>)
    9bca:	4b46      	ldr	r3, [pc, #280]	; (9ce4 <usbd_event_handler+0x1cc>)
    9bcc:	78e1      	ldrb	r1, [r4, #3]
    9bce:	1a9b      	subs	r3, r3, r2
    9bd0:	08db      	lsrs	r3, r3, #3
    9bd2:	f363 158f 	bfi	r5, r3, #6, #10
    9bd6:	78a2      	ldrb	r2, [r4, #2]
    9bd8:	b130      	cbz	r0, 9be8 <usbd_event_handler+0xd0>
    9bda:	4613      	mov	r3, r2
    9bdc:	460a      	mov	r2, r1
    9bde:	4942      	ldr	r1, [pc, #264]	; (9ce8 <usbd_event_handler+0x1d0>)
			LOG_ERR("Unexpected event from nrfx_usbd: %d, ep %d",
    9be0:	4628      	mov	r0, r5
    9be2:	f009 fdeb 	bl	137bc <log_from_user>
    9be6:	e7c1      	b.n	9b6c <usbd_event_handler+0x54>
			LOG_ERR(
    9be8:	483f      	ldr	r0, [pc, #252]	; (9ce8 <usbd_event_handler+0x1d0>)
    9bea:	462b      	mov	r3, r5
			LOG_ERR("Unexpected event from nrfx_usbd: %d, ep %d",
    9bec:	f009 fd9f 	bl	1372e <log_2>
		break;
    9bf0:	e7bc      	b.n	9b6c <usbd_event_handler+0x54>
		switch (p_event->data.eptransfer.status) {
    9bf2:	b176      	cbz	r6, 9c12 <usbd_event_handler+0xfa>
    9bf4:	2e01      	cmp	r6, #1
    9bf6:	d148      	bne.n	9c8a <usbd_event_handler+0x172>
			struct usbd_event *ev = usbd_evt_alloc();
    9bf8:	f7ff fea8 	bl	994c <usbd_evt_alloc>
			if (!ev) {
    9bfc:	4602      	mov	r2, r0
    9bfe:	2800      	cmp	r0, #0
    9c00:	d0b4      	beq.n	9b6c <usbd_event_handler+0x54>
    9c02:	f00b f93c 	bl	14e7e <z_arch_is_user_context>
			ep_ctx->read_pending = true;
    9c06:	f885 6021 	strb.w	r6, [r5, #33]	; 0x21
			ev->evt_type = USBD_EVT_EP;
    9c0a:	7516      	strb	r6, [r2, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    9c0c:	7416      	strb	r6, [r2, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    9c0e:	60d5      	str	r5, [r2, #12]
    9c10:	e7cd      	b.n	9bae <usbd_event_handler+0x96>
			struct usbd_event *ev = usbd_evt_alloc();
    9c12:	f7ff fe9b 	bl	994c <usbd_evt_alloc>
			if (!ev) {
    9c16:	4606      	mov	r6, r0
    9c18:	2800      	cmp	r0, #0
    9c1a:	d0a7      	beq.n	9b6c <usbd_event_handler+0x54>
			ev->evt_type = USBD_EVT_EP;
    9c1c:	2301      	movs	r3, #1
    9c1e:	7503      	strb	r3, [r0, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    9c20:	2302      	movs	r3, #2
    9c22:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    9c24:	60c5      	str	r5, [r0, #12]
			err_code = nrfx_usbd_ep_status_get(
    9c26:	f105 010c 	add.w	r1, r5, #12
    9c2a:	78a0      	ldrb	r0, [r4, #2]
    9c2c:	f009 fccf 	bl	135ce <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
    9c30:	4601      	mov	r1, r0
    9c32:	b190      	cbz	r0, 9c5a <usbd_event_handler+0x142>
    9c34:	f00b f923 	bl	14e7e <z_arch_is_user_context>
				LOG_ERR("_ep_status_get failed! Code: %d.",
    9c38:	f04f 0400 	mov.w	r4, #0
    9c3c:	2301      	movs	r3, #1
    9c3e:	f363 0407 	bfi	r4, r3, #0, #8
    9c42:	4a27      	ldr	r2, [pc, #156]	; (9ce0 <usbd_event_handler+0x1c8>)
    9c44:	4b27      	ldr	r3, [pc, #156]	; (9ce4 <usbd_event_handler+0x1cc>)
    9c46:	1a9b      	subs	r3, r3, r2
    9c48:	08db      	lsrs	r3, r3, #3
    9c4a:	f363 148f 	bfi	r4, r3, #6, #10
    9c4e:	b198      	cbz	r0, 9c78 <usbd_event_handler+0x160>
    9c50:	460a      	mov	r2, r1
    9c52:	4620      	mov	r0, r4
    9c54:	4925      	ldr	r1, [pc, #148]	; (9cec <usbd_event_handler+0x1d4>)
    9c56:	f009 fdb1 	bl	137bc <log_from_user>
    9c5a:	f00b f910 	bl	14e7e <z_arch_is_user_context>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    9c5e:	4a24      	ldr	r2, [pc, #144]	; (9cf0 <usbd_event_handler+0x1d8>)
    9c60:	68e9      	ldr	r1, [r5, #12]
    9c62:	f8b2 32b0 	ldrh.w	r3, [r2, #688]	; 0x2b0
    9c66:	428b      	cmp	r3, r1
    9c68:	d90b      	bls.n	9c82 <usbd_event_handler+0x16a>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    9c6a:	1a5b      	subs	r3, r3, r1
    9c6c:	f8a2 32b0 	strh.w	r3, [r2, #688]	; 0x2b0
				nrfx_usbd_setup_data_clear();
    9c70:	f009 fcda 	bl	13628 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    9c74:	4630      	mov	r0, r6
    9c76:	e79b      	b.n	9bb0 <usbd_event_handler+0x98>
				LOG_ERR("_ep_status_get failed! Code: %d.",
    9c78:	4622      	mov	r2, r4
    9c7a:	481c      	ldr	r0, [pc, #112]	; (9cec <usbd_event_handler+0x1d4>)
    9c7c:	f009 fd43 	bl	13706 <log_1>
    9c80:	e7eb      	b.n	9c5a <usbd_event_handler+0x142>
				ctx->ctrl_read_len = 0U;
    9c82:	2300      	movs	r3, #0
    9c84:	f8a2 32b0 	strh.w	r3, [r2, #688]	; 0x2b0
    9c88:	e7f4      	b.n	9c74 <usbd_event_handler+0x15c>
    9c8a:	f00b f8f8 	bl	14e7e <z_arch_is_user_context>
			LOG_ERR("Unexpected event from nrfx_usbd: %d, ep %d",
    9c8e:	f04f 0500 	mov.w	r5, #0
    9c92:	2301      	movs	r3, #1
    9c94:	f363 0507 	bfi	r5, r3, #0, #8
    9c98:	4a11      	ldr	r2, [pc, #68]	; (9ce0 <usbd_event_handler+0x1c8>)
    9c9a:	4b12      	ldr	r3, [pc, #72]	; (9ce4 <usbd_event_handler+0x1cc>)
    9c9c:	78e1      	ldrb	r1, [r4, #3]
    9c9e:	1a9b      	subs	r3, r3, r2
    9ca0:	08db      	lsrs	r3, r3, #3
    9ca2:	f363 158f 	bfi	r5, r3, #6, #10
    9ca6:	78a2      	ldrb	r2, [r4, #2]
    9ca8:	b118      	cbz	r0, 9cb2 <usbd_event_handler+0x19a>
    9caa:	4613      	mov	r3, r2
    9cac:	460a      	mov	r2, r1
    9cae:	4911      	ldr	r1, [pc, #68]	; (9cf4 <usbd_event_handler+0x1dc>)
    9cb0:	e796      	b.n	9be0 <usbd_event_handler+0xc8>
    9cb2:	462b      	mov	r3, r5
    9cb4:	480f      	ldr	r0, [pc, #60]	; (9cf4 <usbd_event_handler+0x1dc>)
    9cb6:	e799      	b.n	9bec <usbd_event_handler+0xd4>
		nrfx_usbd_setup_get(&drv_setup);
    9cb8:	4668      	mov	r0, sp
    9cba:	f7fc fb81 	bl	63c0 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_BREQUEST_SETADDRESS)
    9cbe:	f89d 3001 	ldrb.w	r3, [sp, #1]
    9cc2:	2b05      	cmp	r3, #5
    9cc4:	d105      	bne.n	9cd2 <usbd_event_handler+0x1ba>
		    || ((drv_setup.bmRequestType & USB_BMREQUESTTYPE_TYPE_MASK)
    9cc6:	f89d 3000 	ldrb.w	r3, [sp]
    9cca:	f013 0f60 	tst.w	r3, #96	; 0x60
    9cce:	f43f af4d 	beq.w	9b6c <usbd_event_handler+0x54>
			evt.evt.ep_evt.ep = ep_ctx;
    9cd2:	4b09      	ldr	r3, [pc, #36]	; (9cf8 <usbd_event_handler+0x1e0>)
    9cd4:	9305      	str	r3, [sp, #20]
			evt.evt_type = USBD_EVT_EP;
    9cd6:	2401      	movs	r4, #1
    9cd8:	e735      	b.n	9b46 <usbd_event_handler+0x2e>
		evt.evt_type = USBD_EVT_RESET;
    9cda:	2402      	movs	r4, #2
    9cdc:	e733      	b.n	9b46 <usbd_event_handler+0x2e>
    9cde:	bf00      	nop
    9ce0:	00018f84 	.word	0x00018f84
    9ce4:	00018fcc 	.word	0x00018fcc
    9ce8:	0001b3a2 	.word	0x0001b3a2
    9cec:	0001b3ca 	.word	0x0001b3ca
    9cf0:	20003b64 	.word	0x20003b64
    9cf4:	0001b3eb 	.word	0x0001b3eb
    9cf8:	20003cd0 	.word	0x20003cd0

00009cfc <hf_clock_enable.constprop.9>:
static int hf_clock_enable(bool on, bool blocking)
    9cfc:	e92d 4178 	stmdb	sp!, {r3, r4, r5, r6, r8, lr}
    9d00:	4605      	mov	r5, r0
    9d02:	f00b f8bc 	bl	14e7e <z_arch_is_user_context>
    9d06:	b1d0      	cbz	r0, 9d3e <hf_clock_enable.constprop.9+0x42>
	register u32_t ret __asm__("r0") = arg1;
    9d08:	4831      	ldr	r0, [pc, #196]	; (9dd0 <hf_clock_enable.constprop.9+0xd4>)
	register u32_t r6 __asm__("r6") = call_id;
    9d0a:	2617      	movs	r6, #23
	__asm__ volatile("svc %[svid]\n"
    9d0c:	df03      	svc	3
	if (!clock) {
    9d0e:	b9f8      	cbnz	r0, 9d50 <hf_clock_enable.constprop.9+0x54>
    9d10:	f00b f8b5 	bl	14e7e <z_arch_is_user_context>
		LOG_ERR("NRF HF Clock device not found!");
    9d14:	2301      	movs	r3, #1
    9d16:	f04f 0200 	mov.w	r2, #0
    9d1a:	f363 0207 	bfi	r2, r3, #0, #8
    9d1e:	492d      	ldr	r1, [pc, #180]	; (9dd4 <hf_clock_enable.constprop.9+0xd8>)
    9d20:	4b2d      	ldr	r3, [pc, #180]	; (9dd8 <hf_clock_enable.constprop.9+0xdc>)
    9d22:	1a5b      	subs	r3, r3, r1
    9d24:	08db      	lsrs	r3, r3, #3
    9d26:	f363 128f 	bfi	r2, r3, #6, #10
    9d2a:	b160      	cbz	r0, 9d46 <hf_clock_enable.constprop.9+0x4a>
    9d2c:	492b      	ldr	r1, [pc, #172]	; (9ddc <hf_clock_enable.constprop.9+0xe0>)
    9d2e:	4610      	mov	r0, r2
    9d30:	f009 fd44 	bl	137bc <log_from_user>
		return ret;
    9d34:	f06f 0412 	mvn.w	r4, #18
}
    9d38:	4620      	mov	r0, r4
    9d3a:	e8bd 8178 	ldmia.w	sp!, {r3, r4, r5, r6, r8, pc}
    9d3e:	4824      	ldr	r0, [pc, #144]	; (9dd0 <hf_clock_enable.constprop.9+0xd4>)
    9d40:	f005 f9ba 	bl	f0b8 <z_impl_device_get_binding>
    9d44:	e7e3      	b.n	9d0e <hf_clock_enable.constprop.9+0x12>
		LOG_ERR("NRF HF Clock device not found!");
    9d46:	4611      	mov	r1, r2
    9d48:	4824      	ldr	r0, [pc, #144]	; (9ddc <hf_clock_enable.constprop.9+0xe0>)
    9d4a:	f009 fccf 	bl	136ec <log_0>
    9d4e:	e7f1      	b.n	9d34 <hf_clock_enable.constprop.9+0x38>
	if (on) {
    9d50:	4e23      	ldr	r6, [pc, #140]	; (9de0 <hf_clock_enable.constprop.9+0xe4>)
    9d52:	7831      	ldrb	r1, [r6, #0]
    9d54:	b30d      	cbz	r5, 9d9a <hf_clock_enable.constprop.9+0x9e>
		if (clock_requested) {
    9d56:	bb61      	cbnz	r1, 9db2 <hf_clock_enable.constprop.9+0xb6>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    9d58:	6843      	ldr	r3, [r0, #4]
    9d5a:	681b      	ldr	r3, [r3, #0]
    9d5c:	4798      	blx	r3
    9d5e:	4604      	mov	r4, r0
	if (ret && (blocking || (ret != -EINPROGRESS))) {
    9d60:	b324      	cbz	r4, 9dac <hf_clock_enable.constprop.9+0xb0>
    9d62:	f114 0f77 	cmn.w	r4, #119	; 0x77
    9d66:	d021      	beq.n	9dac <hf_clock_enable.constprop.9+0xb0>
    9d68:	f00b f889 	bl	14e7e <z_arch_is_user_context>
		LOG_ERR("HF clock %s fail: %d",
    9d6c:	f04f 0600 	mov.w	r6, #0
    9d70:	2301      	movs	r3, #1
    9d72:	f363 0607 	bfi	r6, r3, #0, #8
    9d76:	4a17      	ldr	r2, [pc, #92]	; (9dd4 <hf_clock_enable.constprop.9+0xd8>)
    9d78:	4b17      	ldr	r3, [pc, #92]	; (9dd8 <hf_clock_enable.constprop.9+0xdc>)
    9d7a:	1a9b      	subs	r3, r3, r2
    9d7c:	08db      	lsrs	r3, r3, #3
    9d7e:	f363 168f 	bfi	r6, r3, #6, #10
    9d82:	b1c0      	cbz	r0, 9db6 <hf_clock_enable.constprop.9+0xba>
    9d84:	4917      	ldr	r1, [pc, #92]	; (9de4 <hf_clock_enable.constprop.9+0xe8>)
    9d86:	4a18      	ldr	r2, [pc, #96]	; (9de8 <hf_clock_enable.constprop.9+0xec>)
    9d88:	4623      	mov	r3, r4
    9d8a:	2d00      	cmp	r5, #0
    9d8c:	bf18      	it	ne
    9d8e:	460a      	movne	r2, r1
    9d90:	4630      	mov	r0, r6
    9d92:	4916      	ldr	r1, [pc, #88]	; (9dec <hf_clock_enable.constprop.9+0xf0>)
    9d94:	f009 fd12 	bl	137bc <log_from_user>
    9d98:	e7ce      	b.n	9d38 <hf_clock_enable.constprop.9+0x3c>
		if (!clock_requested) {
    9d9a:	b1b9      	cbz	r1, 9dcc <hf_clock_enable.constprop.9+0xd0>
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->off(dev, sys);
    9d9c:	6843      	ldr	r3, [r0, #4]
    9d9e:	4629      	mov	r1, r5
    9da0:	685b      	ldr	r3, [r3, #4]
    9da2:	4798      	blx	r3
		if (ret == -EBUSY) {
    9da4:	f110 0f10 	cmn.w	r0, #16
    9da8:	4604      	mov	r4, r0
    9daa:	d1d9      	bne.n	9d60 <hf_clock_enable.constprop.9+0x64>
	clock_requested = on;
    9dac:	7035      	strb	r5, [r6, #0]
    9dae:	f00b f866 	bl	14e7e <z_arch_is_user_context>
			return 0;
    9db2:	2400      	movs	r4, #0
    9db4:	e7c0      	b.n	9d38 <hf_clock_enable.constprop.9+0x3c>
		LOG_ERR("HF clock %s fail: %d",
    9db6:	480c      	ldr	r0, [pc, #48]	; (9de8 <hf_clock_enable.constprop.9+0xec>)
    9db8:	490a      	ldr	r1, [pc, #40]	; (9de4 <hf_clock_enable.constprop.9+0xe8>)
    9dba:	4633      	mov	r3, r6
    9dbc:	2d00      	cmp	r5, #0
    9dbe:	bf08      	it	eq
    9dc0:	4601      	moveq	r1, r0
    9dc2:	4622      	mov	r2, r4
    9dc4:	4809      	ldr	r0, [pc, #36]	; (9dec <hf_clock_enable.constprop.9+0xf0>)
    9dc6:	f009 fcb2 	bl	1372e <log_2>
		return ret;
    9dca:	e7b5      	b.n	9d38 <hf_clock_enable.constprop.9+0x3c>
			return 0;
    9dcc:	462c      	mov	r4, r5
    9dce:	e7b3      	b.n	9d38 <hf_clock_enable.constprop.9+0x3c>
    9dd0:	0001b211 	.word	0x0001b211
    9dd4:	00018f84 	.word	0x00018f84
    9dd8:	00018fcc 	.word	0x00018fcc
    9ddc:	0001b2a8 	.word	0x0001b2a8
    9de0:	20005e85 	.word	0x20005e85
    9de4:	0001a14f 	.word	0x0001a14f
    9de8:	0001b2a3 	.word	0x0001b2a3
    9dec:	0001b2c7 	.word	0x0001b2c7

00009df0 <eps_ctx_init>:
{
    9df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    9df2:	2500      	movs	r5, #0
			err = k_mem_pool_alloc(&ep_buf_pool, &ep_ctx->buf.block,
    9df4:	4f68      	ldr	r7, [pc, #416]	; (9f98 <eps_ctx_init+0x1a8>)
    9df6:	462e      	mov	r6, r5
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    9df8:	f065 007f 	orn	r0, r5, #127	; 0x7f
    9dfc:	b2c0      	uxtb	r0, r0
    9dfe:	f7ff fd53 	bl	98a8 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    9e02:	6903      	ldr	r3, [r0, #16]
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    9e04:	4604      	mov	r4, r0
		if (!ep_ctx->buf.block.data) {
    9e06:	bb1b      	cbnz	r3, 9e50 <eps_ctx_init+0x60>
			err = k_mem_pool_alloc(&ep_buf_pool, &ep_ctx->buf.block,
    9e08:	f100 0110 	add.w	r1, r0, #16
    9e0c:	2240      	movs	r2, #64	; 0x40
    9e0e:	4638      	mov	r0, r7
    9e10:	f005 fb0c 	bl	f42c <k_mem_pool_alloc>
			if (err < 0) {
    9e14:	2800      	cmp	r0, #0
    9e16:	da1b      	bge.n	9e50 <eps_ctx_init+0x60>
    9e18:	f00b f831 	bl	14e7e <z_arch_is_user_context>
				LOG_ERR("EP buffer alloc failed for EPIN%d", i);
    9e1c:	f04f 0400 	mov.w	r4, #0
    9e20:	2301      	movs	r3, #1
    9e22:	f363 0407 	bfi	r4, r3, #0, #8
    9e26:	4a5d      	ldr	r2, [pc, #372]	; (9f9c <eps_ctx_init+0x1ac>)
    9e28:	4b5d      	ldr	r3, [pc, #372]	; (9fa0 <eps_ctx_init+0x1b0>)
    9e2a:	1a9b      	subs	r3, r3, r2
    9e2c:	08db      	lsrs	r3, r3, #3
    9e2e:	f363 148f 	bfi	r4, r3, #6, #10
    9e32:	b138      	cbz	r0, 9e44 <eps_ctx_init+0x54>
    9e34:	495b      	ldr	r1, [pc, #364]	; (9fa4 <eps_ctx_init+0x1b4>)
    9e36:	462a      	mov	r2, r5
				LOG_ERR("EP buffer alloc failed for EPOUT%d", i);
    9e38:	4620      	mov	r0, r4
    9e3a:	f009 fcbf 	bl	137bc <log_from_user>
				return -ENOMEM;
    9e3e:	f06f 000b 	mvn.w	r0, #11
}
    9e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				LOG_ERR("EP buffer alloc failed for EPIN%d", i);
    9e44:	4857      	ldr	r0, [pc, #348]	; (9fa4 <eps_ctx_init+0x1b4>)
    9e46:	4622      	mov	r2, r4
    9e48:	4629      	mov	r1, r5
				LOG_ERR("EP buffer alloc failed for EPOUT%d", i);
    9e4a:	f009 fc5c 	bl	13706 <log_1>
				return -ENOMEM;
    9e4e:	e7f6      	b.n	9e3e <eps_ctx_init+0x4e>
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    9e50:	6923      	ldr	r3, [r4, #16]
	ep_ctx->buf.len  = 0U;
    9e52:	60e6      	str	r6, [r4, #12]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    9e54:	e9c4 3306 	strd	r3, r3, [r4, #24]
	ep_ctx->read_complete = true;
    9e58:	2301      	movs	r3, #1
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    9e5a:	441d      	add	r5, r3
    9e5c:	2d08      	cmp	r5, #8
	ep_ctx->read_complete = true;
    9e5e:	f884 3020 	strb.w	r3, [r4, #32]
	ep_ctx->read_pending = false;
    9e62:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
	ep_ctx->write_in_progress = false;
    9e66:	f884 6022 	strb.w	r6, [r4, #34]	; 0x22
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    9e6a:	d1c5      	bne.n	9df8 <eps_ctx_init+0x8>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    9e6c:	2500      	movs	r5, #0
			err = k_mem_pool_alloc(&ep_buf_pool, &ep_ctx->buf.block,
    9e6e:	4f4a      	ldr	r7, [pc, #296]	; (9f98 <eps_ctx_init+0x1a8>)
    9e70:	462e      	mov	r6, r5
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    9e72:	b2e8      	uxtb	r0, r5
    9e74:	f7ff fd18 	bl	98a8 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    9e78:	6903      	ldr	r3, [r0, #16]
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    9e7a:	4604      	mov	r4, r0
		if (!ep_ctx->buf.block.data) {
    9e7c:	b9e3      	cbnz	r3, 9eb8 <eps_ctx_init+0xc8>
			err = k_mem_pool_alloc(&ep_buf_pool, &ep_ctx->buf.block,
    9e7e:	f100 0110 	add.w	r1, r0, #16
    9e82:	2240      	movs	r2, #64	; 0x40
    9e84:	4638      	mov	r0, r7
    9e86:	f005 fad1 	bl	f42c <k_mem_pool_alloc>
			if (err < 0) {
    9e8a:	2800      	cmp	r0, #0
    9e8c:	da14      	bge.n	9eb8 <eps_ctx_init+0xc8>
    9e8e:	f00a fff6 	bl	14e7e <z_arch_is_user_context>
				LOG_ERR("EP buffer alloc failed for EPOUT%d", i);
    9e92:	f04f 0400 	mov.w	r4, #0
    9e96:	2301      	movs	r3, #1
    9e98:	f363 0407 	bfi	r4, r3, #0, #8
    9e9c:	4a3f      	ldr	r2, [pc, #252]	; (9f9c <eps_ctx_init+0x1ac>)
    9e9e:	4b40      	ldr	r3, [pc, #256]	; (9fa0 <eps_ctx_init+0x1b0>)
    9ea0:	1a9b      	subs	r3, r3, r2
    9ea2:	08db      	lsrs	r3, r3, #3
    9ea4:	f363 148f 	bfi	r4, r3, #6, #10
    9ea8:	b110      	cbz	r0, 9eb0 <eps_ctx_init+0xc0>
    9eaa:	462a      	mov	r2, r5
    9eac:	493e      	ldr	r1, [pc, #248]	; (9fa8 <eps_ctx_init+0x1b8>)
    9eae:	e7c3      	b.n	9e38 <eps_ctx_init+0x48>
    9eb0:	4622      	mov	r2, r4
    9eb2:	4629      	mov	r1, r5
    9eb4:	483c      	ldr	r0, [pc, #240]	; (9fa8 <eps_ctx_init+0x1b8>)
    9eb6:	e7c8      	b.n	9e4a <eps_ctx_init+0x5a>
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    9eb8:	6923      	ldr	r3, [r4, #16]
	ep_ctx->buf.len  = 0U;
    9eba:	60e6      	str	r6, [r4, #12]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    9ebc:	e9c4 3306 	strd	r3, r3, [r4, #24]
	ep_ctx->read_complete = true;
    9ec0:	2301      	movs	r3, #1
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    9ec2:	441d      	add	r5, r3
    9ec4:	2d08      	cmp	r5, #8
	ep_ctx->read_complete = true;
    9ec6:	f884 3020 	strb.w	r3, [r4, #32]
	ep_ctx->read_pending = false;
    9eca:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
	ep_ctx->write_in_progress = false;
    9ece:	f884 6022 	strb.w	r6, [r4, #34]	; 0x22
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    9ed2:	d1ce      	bne.n	9e72 <eps_ctx_init+0x82>
		if (!ep_ctx->buf.block.data) {
    9ed4:	4935      	ldr	r1, [pc, #212]	; (9fac <eps_ctx_init+0x1bc>)
    9ed6:	f8d1 3158 	ldr.w	r3, [r1, #344]	; 0x158
    9eda:	460c      	mov	r4, r1
    9edc:	bb03      	cbnz	r3, 9f20 <eps_ctx_init+0x130>
			err = k_mem_pool_alloc(&ep_buf_pool, &ep_ctx->buf.block,
    9ede:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9ee2:	f501 71ac 	add.w	r1, r1, #344	; 0x158
    9ee6:	482c      	ldr	r0, [pc, #176]	; (9f98 <eps_ctx_init+0x1a8>)
    9ee8:	f005 faa0 	bl	f42c <k_mem_pool_alloc>
			if (err < 0) {
    9eec:	2800      	cmp	r0, #0
    9eee:	da17      	bge.n	9f20 <eps_ctx_init+0x130>
    9ef0:	f00a ffc5 	bl	14e7e <z_arch_is_user_context>
				LOG_ERR("EP buffer alloc failed for ISOIN");
    9ef4:	2301      	movs	r3, #1
    9ef6:	f04f 0200 	mov.w	r2, #0
    9efa:	f363 0207 	bfi	r2, r3, #0, #8
    9efe:	4927      	ldr	r1, [pc, #156]	; (9f9c <eps_ctx_init+0x1ac>)
    9f00:	4b27      	ldr	r3, [pc, #156]	; (9fa0 <eps_ctx_init+0x1b0>)
    9f02:	1a5b      	subs	r3, r3, r1
    9f04:	08db      	lsrs	r3, r3, #3
    9f06:	f363 128f 	bfi	r2, r3, #6, #10
    9f0a:	b120      	cbz	r0, 9f16 <eps_ctx_init+0x126>
    9f0c:	4928      	ldr	r1, [pc, #160]	; (9fb0 <eps_ctx_init+0x1c0>)
				LOG_ERR("EP buffer alloc failed for ISOOUT");
    9f0e:	4610      	mov	r0, r2
    9f10:	f009 fc54 	bl	137bc <log_from_user>
    9f14:	e793      	b.n	9e3e <eps_ctx_init+0x4e>
				LOG_ERR("EP buffer alloc failed for ISOIN");
    9f16:	4826      	ldr	r0, [pc, #152]	; (9fb0 <eps_ctx_init+0x1c0>)
    9f18:	4611      	mov	r1, r2
				LOG_ERR("EP buffer alloc failed for ISOOUT");
    9f1a:	f009 fbe7 	bl	136ec <log_0>
    9f1e:	e78e      	b.n	9e3e <eps_ctx_init+0x4e>
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    9f20:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	ep_ctx->read_complete = true;
    9f24:	2201      	movs	r2, #1
	ep_ctx->buf.curr = ep_ctx->buf.data;
    9f26:	e9c4 3358 	strd	r3, r3, [r4, #352]	; 0x160
	ep_ctx->buf.len  = 0U;
    9f2a:	2300      	movs	r3, #0
	ep_ctx->read_complete = true;
    9f2c:	f884 2168 	strb.w	r2, [r4, #360]	; 0x168
	ep_ctx->buf.len  = 0U;
    9f30:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
	ep_ctx->read_pending = false;
    9f34:	f884 3169 	strb.w	r3, [r4, #361]	; 0x169
	ep_ctx->write_in_progress = false;
    9f38:	f884 316a 	strb.w	r3, [r4, #362]	; 0x16a
		if (!ep_ctx->buf.block.data) {
    9f3c:	f8d4 329c 	ldr.w	r3, [r4, #668]	; 0x29c
    9f40:	b9d3      	cbnz	r3, 9f78 <eps_ctx_init+0x188>
			err = k_mem_pool_alloc(&ep_buf_pool, &ep_ctx->buf.block,
    9f42:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9f46:	491b      	ldr	r1, [pc, #108]	; (9fb4 <eps_ctx_init+0x1c4>)
    9f48:	4813      	ldr	r0, [pc, #76]	; (9f98 <eps_ctx_init+0x1a8>)
    9f4a:	f005 fa6f 	bl	f42c <k_mem_pool_alloc>
			if (err < 0) {
    9f4e:	2800      	cmp	r0, #0
    9f50:	da12      	bge.n	9f78 <eps_ctx_init+0x188>
    9f52:	f00a ff94 	bl	14e7e <z_arch_is_user_context>
				LOG_ERR("EP buffer alloc failed for ISOOUT");
    9f56:	2301      	movs	r3, #1
    9f58:	f04f 0200 	mov.w	r2, #0
    9f5c:	f363 0207 	bfi	r2, r3, #0, #8
    9f60:	490e      	ldr	r1, [pc, #56]	; (9f9c <eps_ctx_init+0x1ac>)
    9f62:	4b0f      	ldr	r3, [pc, #60]	; (9fa0 <eps_ctx_init+0x1b0>)
    9f64:	1a5b      	subs	r3, r3, r1
    9f66:	08db      	lsrs	r3, r3, #3
    9f68:	f363 128f 	bfi	r2, r3, #6, #10
    9f6c:	b108      	cbz	r0, 9f72 <eps_ctx_init+0x182>
    9f6e:	4912      	ldr	r1, [pc, #72]	; (9fb8 <eps_ctx_init+0x1c8>)
    9f70:	e7cd      	b.n	9f0e <eps_ctx_init+0x11e>
    9f72:	4611      	mov	r1, r2
    9f74:	4810      	ldr	r0, [pc, #64]	; (9fb8 <eps_ctx_init+0x1c8>)
    9f76:	e7d0      	b.n	9f1a <eps_ctx_init+0x12a>
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    9f78:	f8d4 329c 	ldr.w	r3, [r4, #668]	; 0x29c
	ep_ctx->buf.len  = 0U;
    9f7c:	2000      	movs	r0, #0
	ep_ctx->buf.curr = ep_ctx->buf.data;
    9f7e:	e9c4 33a9 	strd	r3, r3, [r4, #676]	; 0x2a4
	ep_ctx->read_complete = true;
    9f82:	2301      	movs	r3, #1
    9f84:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
	ep_ctx->buf.len  = 0U;
    9f88:	f8c4 0298 	str.w	r0, [r4, #664]	; 0x298
	ep_ctx->read_pending = false;
    9f8c:	f884 02ad 	strb.w	r0, [r4, #685]	; 0x2ad
	ep_ctx->write_in_progress = false;
    9f90:	f884 02ae 	strb.w	r0, [r4, #686]	; 0x2ae
    9f94:	e755      	b.n	9e42 <eps_ctx_init+0x52>
    9f96:	bf00      	nop
    9f98:	20011b74 	.word	0x20011b74
    9f9c:	00018f84 	.word	0x00018f84
    9fa0:	00018fcc 	.word	0x00018fcc
    9fa4:	0001b21b 	.word	0x0001b21b
    9fa8:	0001b23d 	.word	0x0001b23d
    9fac:	20003b64 	.word	0x20003b64
    9fb0:	0001b260 	.word	0x0001b260
    9fb4:	20003e00 	.word	0x20003e00
    9fb8:	0001b281 	.word	0x0001b281

00009fbc <usbd_work_handler>:
}


/* Work handler */
static void usbd_work_handler(struct k_work *item)
{
    9fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9fc0:	4baf      	ldr	r3, [pc, #700]	; (a280 <usbd_work_handler+0x2c4>)
				ctx->status_cb(USB_DC_SOF, NULL);
			}
			break;
		case USBD_EVT_REINIT: {
				/* Reinitialize the peripheral after queue overflow. */
				LOG_ERR("USBD event queue full!");
    9fc2:	4ab0      	ldr	r2, [pc, #704]	; (a284 <usbd_work_handler+0x2c8>)
	return get_usbd_ctx()->ready;
    9fc4:	4db0      	ldr	r5, [pc, #704]	; (a288 <usbd_work_handler+0x2cc>)
{
    9fc6:	b087      	sub	sp, #28
				LOG_ERR("USBD event queue full!");
    9fc8:	1a9b      	subs	r3, r3, r2
    9fca:	f3c3 03c9 	ubfx	r3, r3, #3, #10
{
    9fce:	4683      	mov	fp, r0
				LOG_ERR("USBD event queue full!");
    9fd0:	9300      	str	r3, [sp, #0]
	return k_fifo_get(&work_queue, K_NO_WAIT);
    9fd2:	f7ff fc8f 	bl	98f4 <k_queue_get.constprop.15>
	while ((ev = usbd_evt_get()) != NULL) {
    9fd6:	4606      	mov	r6, r0
    9fd8:	b910      	cbnz	r0, 9fe0 <usbd_work_handler+0x24>
			LOG_ERR("Unknown USBD event: %"PRId16".", ev->evt_type);
			break;
		}
		usbd_evt_free(ev);
	}
}
    9fda:	b007      	add	sp, #28
    9fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return get_usbd_ctx()->ready;
    9fe0:	796b      	ldrb	r3, [r5, #5]
    9fe2:	7d32      	ldrb	r2, [r6, #20]
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    9fe4:	b95b      	cbnz	r3, 9ffe <usbd_work_handler+0x42>
    9fe6:	2a00      	cmp	r2, #0
    9fe8:	d1f3      	bne.n	9fd2 <usbd_work_handler+0x16>
	switch (pwr_evt->state) {
    9fea:	7b32      	ldrb	r2, [r6, #12]
    9fec:	2a04      	cmp	r2, #4
    9fee:	d870      	bhi.n	a0d2 <usbd_work_handler+0x116>
    9ff0:	e8df f012 	tbh	[pc, r2, lsl #1]
    9ff4:	00c40107 	.word	0x00c40107
    9ff8:	011700d0 	.word	0x011700d0
    9ffc:	0125      	.short	0x0125
		switch (ev->evt_type) {
    9ffe:	2a04      	cmp	r2, #4
    a000:	f200 8183 	bhi.w	a30a <usbd_work_handler+0x34e>
    a004:	a101      	add	r1, pc, #4	; (adr r1, a00c <usbd_work_handler+0x50>)
    a006:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    a00a:	bf00      	nop
    a00c:	00009feb 	.word	0x00009feb
    a010:	0000a021 	.word	0x0000a021
    a014:	0000a259 	.word	0x0000a259
    a018:	0000a2a1 	.word	0x0000a2a1
    a01c:	0000a2b1 	.word	0x0000a2b1
			if (!ctx->attached) {
    a020:	f81b 3c04 	ldrb.w	r3, [fp, #-4]
    a024:	b98b      	cbnz	r3, a04a <usbd_work_handler+0x8e>
    a026:	f00a ff2a 	bl	14e7e <z_arch_is_user_context>
				LOG_ERR("EP %d event dropped (not attached).",
    a02a:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    a02e:	f043 0301 	orr.w	r3, r3, #1
    a032:	f363 0807 	bfi	r8, r3, #0, #8
    a036:	9b00      	ldr	r3, [sp, #0]
    a038:	f363 188f 	bfi	r8, r3, #6, #10
    a03c:	68f3      	ldr	r3, [r6, #12]
    a03e:	b160      	cbz	r0, a05a <usbd_work_handler+0x9e>
    a040:	7a5a      	ldrb	r2, [r3, #9]
    a042:	4992      	ldr	r1, [pc, #584]	; (a28c <usbd_work_handler+0x2d0>)
    a044:	4640      	mov	r0, r8
    a046:	f009 fbb9 	bl	137bc <log_from_user>
	switch (ep_evt->evt_type) {
    a04a:	7c33      	ldrb	r3, [r6, #16]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    a04c:	68f4      	ldr	r4, [r6, #12]
	switch (ep_evt->evt_type) {
    a04e:	2b03      	cmp	r3, #3
    a050:	d83f      	bhi.n	a0d2 <usbd_work_handler+0x116>
    a052:	e8df f003 	tbb	[pc, r3]
    a056:	4608      	.short	0x4608
    a058:	837e      	.short	0x837e
				LOG_ERR("EP %d event dropped (not attached).",
    a05a:	4642      	mov	r2, r8
    a05c:	7a59      	ldrb	r1, [r3, #9]
    a05e:	488b      	ldr	r0, [pc, #556]	; (a28c <usbd_work_handler+0x2d0>)
    a060:	f009 fb51 	bl	13706 <log_1>
    a064:	e7f1      	b.n	a04a <usbd_work_handler+0x8e>
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    a066:	69a3      	ldr	r3, [r4, #24]
    return (uint8_t)(NRF_USBD->BMREQUESTTYPE);
    a068:	4a89      	ldr	r2, [pc, #548]	; (a290 <usbd_work_handler+0x2d4>)
__ssp_bos_icheck3(memset, void *, int)
    a06a:	2100      	movs	r1, #0
    a06c:	6019      	str	r1, [r3, #0]
    a06e:	6059      	str	r1, [r3, #4]
    a070:	f8d2 0480 	ldr.w	r0, [r2, #1152]	; 0x480
    a074:	7018      	strb	r0, [r3, #0]
    return (uint8_t)(NRF_USBD->BREQUEST);
    a076:	f8d2 0484 	ldr.w	r0, [r2, #1156]	; 0x484
    a07a:	7058      	strb	r0, [r3, #1]
    const uint16_t val = NRF_USBD->WVALUEL;
    a07c:	f8d2 0488 	ldr.w	r0, [r2, #1160]	; 0x488
    return (uint16_t)(val | ((NRF_USBD->WVALUEH) << 8));
    a080:	f8d2 c48c 	ldr.w	ip, [r2, #1164]	; 0x48c
    a084:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get();
    a088:	8058      	strh	r0, [r3, #2]
    const uint16_t val = NRF_USBD->WINDEXL;
    a08a:	f8d2 0490 	ldr.w	r0, [r2, #1168]	; 0x490
    return (uint16_t)(val | ((NRF_USBD->WINDEXH) << 8));
    a08e:	f8d2 c494 	ldr.w	ip, [r2, #1172]	; 0x494
    a092:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get();
    a096:	8098      	strh	r0, [r3, #4]
    const uint16_t val = NRF_USBD->WLENGTHL;
    a098:	f8d2 0498 	ldr.w	r0, [r2, #1176]	; 0x498
    return (uint16_t)(val | ((NRF_USBD->WLENGTHH) << 8));
    a09c:	f8d2 249c 	ldr.w	r2, [r2, #1180]	; 0x49c
	usbd_setup->wLength = nrf_usbd_setup_wlength_get();
    a0a0:	9301      	str	r3, [sp, #4]
    a0a2:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    a0a6:	80da      	strh	r2, [r3, #6]
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    a0a8:	2208      	movs	r2, #8
    a0aa:	60e2      	str	r2, [r4, #12]
    a0ac:	f00a fee7 	bl	14e7e <z_arch_is_user_context>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    a0b0:	6822      	ldr	r2, [r4, #0]
    a0b2:	7a60      	ldrb	r0, [r4, #9]
    a0b4:	4790      	blx	r2
	if (((usbd_setup->bmRequestType & USB_BMREQUESTTYPE_DIR_MASK)
    a0b6:	9b01      	ldr	r3, [sp, #4]
    a0b8:	f993 2000 	ldrsb.w	r2, [r3]
    a0bc:	2a00      	cmp	r2, #0
    a0be:	db0c      	blt.n	a0da <usbd_work_handler+0x11e>
	    && (usbd_setup->wLength)) {
    a0c0:	88da      	ldrh	r2, [r3, #6]
    a0c2:	b152      	cbz	r2, a0da <usbd_work_handler+0x11e>
		ctx->ctrl_read_len -= usbd_setup->wLength;
    a0c4:	f8b5 32b0 	ldrh.w	r3, [r5, #688]	; 0x2b0
    a0c8:	1a9b      	subs	r3, r3, r2
    a0ca:	f8a5 32b0 	strh.w	r3, [r5, #688]	; 0x2b0
		nrfx_usbd_setup_data_clear();
    a0ce:	f009 faab 	bl	13628 <nrfx_usbd_setup_data_clear>
	k_mem_pool_free(&ev->block);
    a0d2:	1d30      	adds	r0, r6, #4
    a0d4:	f00e f8f4 	bl	182c0 <k_mem_pool_free>
    a0d8:	e77b      	b.n	9fd2 <usbd_work_handler+0x16>
		ctx->ctrl_read_len = 0U;
    a0da:	2300      	movs	r3, #0
    a0dc:	f8a5 32b0 	strh.w	r3, [r5, #688]	; 0x2b0
    a0e0:	e7f7      	b.n	a0d2 <usbd_work_handler+0x116>
	if (!ep_ctx->read_pending) {
    a0e2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    a0e6:	2b00      	cmp	r3, #0
    a0e8:	d0f3      	beq.n	a0d2 <usbd_work_handler+0x116>
	if (!ep_ctx->read_complete) {
    a0ea:	f894 3020 	ldrb.w	r3, [r4, #32]
    a0ee:	2b00      	cmp	r3, #0
    a0f0:	d0ef      	beq.n	a0d2 <usbd_work_handler+0x116>
	ep_ctx->read_pending = false;
    a0f2:	2300      	movs	r3, #0
    a0f4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    a0f8:	4866      	ldr	r0, [pc, #408]	; (a294 <usbd_work_handler+0x2d8>)
	ep_ctx->read_complete = false;
    a0fa:	f884 3020 	strb.w	r3, [r4, #32]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    a0fe:	f00a fee1 	bl	14ec4 <k_mutex_lock.constprop.11>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    a102:	69a2      	ldr	r2, [r4, #24]
    a104:	9203      	str	r2, [sp, #12]
    a106:	2300      	movs	r3, #0
    a108:	6862      	ldr	r2, [r4, #4]
    a10a:	9305      	str	r3, [sp, #20]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    a10c:	a903      	add	r1, sp, #12
    a10e:	7a60      	ldrb	r0, [r4, #9]
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    a110:	9204      	str	r2, [sp, #16]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    a112:	f7fb fed9 	bl	5ec8 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    a116:	4b60      	ldr	r3, [pc, #384]	; (a298 <usbd_work_handler+0x2dc>)
    a118:	4298      	cmp	r0, r3
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    a11a:	4601      	mov	r1, r0
	if (err != NRFX_SUCCESS) {
    a11c:	d010      	beq.n	a140 <usbd_work_handler+0x184>
    a11e:	f00a feae 	bl	14e7e <z_arch_is_user_context>
		LOG_ERR("nRF USBD transfer error (OUT): %d.", err);
    a122:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
    a126:	f043 0301 	orr.w	r3, r3, #1
    a12a:	f363 0707 	bfi	r7, r3, #0, #8
    a12e:	9b00      	ldr	r3, [sp, #0]
    a130:	f363 178f 	bfi	r7, r3, #6, #10
    a134:	b140      	cbz	r0, a148 <usbd_work_handler+0x18c>
    a136:	460a      	mov	r2, r1
    a138:	4638      	mov	r0, r7
    a13a:	4958      	ldr	r1, [pc, #352]	; (a29c <usbd_work_handler+0x2e0>)
    a13c:	f009 fb3e 	bl	137bc <log_from_user>
	k_mutex_unlock(&ctx->drv_lock);
    a140:	4854      	ldr	r0, [pc, #336]	; (a294 <usbd_work_handler+0x2d8>)
    a142:	f00a fea6 	bl	14e92 <k_mutex_unlock>
    a146:	e7c4      	b.n	a0d2 <usbd_work_handler+0x116>
		LOG_ERR("nRF USBD transfer error (OUT): %d.", err);
    a148:	463a      	mov	r2, r7
    a14a:	4854      	ldr	r0, [pc, #336]	; (a29c <usbd_work_handler+0x2e0>)
    a14c:	f009 fadb 	bl	13706 <log_1>
    a150:	e7f6      	b.n	a140 <usbd_work_handler+0x184>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    a152:	6823      	ldr	r3, [r4, #0]
    a154:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    a156:	7a60      	ldrb	r0, [r4, #9]
    a158:	4798      	blx	r3
		break;
    a15a:	e7ba      	b.n	a0d2 <usbd_work_handler+0x116>
		if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    a15c:	7aa3      	ldrb	r3, [r4, #10]
    a15e:	b953      	cbnz	r3, a176 <usbd_work_handler+0x1ba>
		    && (!ep_ctx->write_fragmented)) {
    a160:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    a164:	b93b      	cbnz	r3, a176 <usbd_work_handler+0x1ba>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    a166:	484b      	ldr	r0, [pc, #300]	; (a294 <usbd_work_handler+0x2d8>)
    a168:	f00a feac 	bl	14ec4 <k_mutex_lock.constprop.11>
			nrfx_usbd_setup_clear();
    a16c:	f009 fa71 	bl	13652 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    a170:	4848      	ldr	r0, [pc, #288]	; (a294 <usbd_work_handler+0x2d8>)
    a172:	f00a fe8e 	bl	14e92 <k_mutex_unlock>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    a176:	6823      	ldr	r3, [r4, #0]
    a178:	2102      	movs	r1, #2
    a17a:	e7ec      	b.n	a156 <usbd_work_handler+0x19a>
		if (!nrfx_usbd_is_enabled()) {
    a17c:	f7fb fe1a 	bl	5db4 <nrfx_usbd_is_enabled>
    a180:	2800      	cmp	r0, #0
    a182:	d1a6      	bne.n	a0d2 <usbd_work_handler+0x116>
    a184:	f00a fe7b 	bl	14e7e <z_arch_is_user_context>
			nrfx_usbd_enable();
    a188:	f7fb fd16 	bl	5bb8 <nrfx_usbd_enable>
			(void) hf_clock_enable(true, false);
    a18c:	2001      	movs	r0, #1
    a18e:	f7ff fdb5 	bl	9cfc <hf_clock_enable.constprop.9>
    a192:	e79e      	b.n	a0d2 <usbd_work_handler+0x116>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    a194:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    a196:	f064 007f 	orn	r0, r4, #127	; 0x7f
    a19a:	b2c0      	uxtb	r0, r0
    a19c:	f7ff fb84 	bl	98a8 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    a1a0:	7a03      	ldrb	r3, [r0, #8]
    a1a2:	b113      	cbz	r3, a1aa <usbd_work_handler+0x1ee>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    a1a4:	7a40      	ldrb	r0, [r0, #9]
    a1a6:	f7fc fbf1 	bl	698c <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    a1aa:	3401      	adds	r4, #1
    a1ac:	2c08      	cmp	r4, #8
    a1ae:	d1f2      	bne.n	a196 <usbd_work_handler+0x1da>
		if (ep_ctx->cfg.en) {
    a1b0:	f895 3150 	ldrb.w	r3, [r5, #336]	; 0x150
    a1b4:	b11b      	cbz	r3, a1be <usbd_work_handler+0x202>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    a1b6:	f895 0151 	ldrb.w	r0, [r5, #337]	; 0x151
    a1ba:	f7fc fbe7 	bl	698c <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    a1be:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    a1c0:	b2e0      	uxtb	r0, r4
    a1c2:	f7ff fb71 	bl	98a8 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    a1c6:	7a03      	ldrb	r3, [r0, #8]
    a1c8:	b113      	cbz	r3, a1d0 <usbd_work_handler+0x214>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    a1ca:	7a40      	ldrb	r0, [r0, #9]
    a1cc:	f7fc fbde 	bl	698c <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    a1d0:	3401      	adds	r4, #1
    a1d2:	2c08      	cmp	r4, #8
    a1d4:	d1f4      	bne.n	a1c0 <usbd_work_handler+0x204>
		if (ep_ctx->cfg.en) {
    a1d6:	f895 3294 	ldrb.w	r3, [r5, #660]	; 0x294
    a1da:	b11b      	cbz	r3, a1e4 <usbd_work_handler+0x228>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    a1dc:	f895 0295 	ldrb.w	r0, [r5, #661]	; 0x295
    a1e0:	f7fc fbd4 	bl	698c <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
    a1e4:	2001      	movs	r0, #1
    a1e6:	f7fb fdad 	bl	5d44 <nrfx_usbd_start>
		ctx->ready = true;
    a1ea:	2301      	movs	r3, #1
    a1ec:	716b      	strb	r3, [r5, #5]
    a1ee:	f00a fe46 	bl	14e7e <z_arch_is_user_context>
		if (ctx->status_cb) {
    a1f2:	682b      	ldr	r3, [r5, #0]
    a1f4:	2b00      	cmp	r3, #0
    a1f6:	f43f af6c 	beq.w	a0d2 <usbd_work_handler+0x116>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    a1fa:	2100      	movs	r1, #0
    a1fc:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_RESET, NULL);
    a1fe:	4798      	blx	r3
    a200:	e767      	b.n	a0d2 <usbd_work_handler+0x116>
		ctx->ready = false;
    a202:	2400      	movs	r4, #0
    a204:	716c      	strb	r4, [r5, #5]
		nrfx_usbd_disable();
    a206:	f7fc fb6d 	bl	68e4 <nrfx_usbd_disable>
		(void) hf_clock_enable(false, false);
    a20a:	4620      	mov	r0, r4
    a20c:	f7ff fd76 	bl	9cfc <hf_clock_enable.constprop.9>
    a210:	f00a fe35 	bl	14e7e <z_arch_is_user_context>
		if (ctx->status_cb) {
    a214:	682b      	ldr	r3, [r5, #0]
    a216:	2b00      	cmp	r3, #0
    a218:	f43f af5b 	beq.w	a0d2 <usbd_work_handler+0x116>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    a21c:	4621      	mov	r1, r4
    a21e:	2004      	movs	r0, #4
    a220:	e7ed      	b.n	a1fe <usbd_work_handler+0x242>
		if (dev_ready()) {
    a222:	2b00      	cmp	r3, #0
    a224:	f43f af55 	beq.w	a0d2 <usbd_work_handler+0x116>
			nrfx_usbd_suspend();
    a228:	f7fc fb84 	bl	6934 <nrfx_usbd_suspend>
    a22c:	f00a fe27 	bl	14e7e <z_arch_is_user_context>
			if (ctx->status_cb) {
    a230:	682b      	ldr	r3, [r5, #0]
    a232:	2b00      	cmp	r3, #0
    a234:	f43f af4d 	beq.w	a0d2 <usbd_work_handler+0x116>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    a238:	2100      	movs	r1, #0
    a23a:	2005      	movs	r0, #5
    a23c:	e7df      	b.n	a1fe <usbd_work_handler+0x242>
		if (ctx->status_cb && dev_ready()) {
    a23e:	682a      	ldr	r2, [r5, #0]
    a240:	2a00      	cmp	r2, #0
    a242:	f43f af46 	beq.w	a0d2 <usbd_work_handler+0x116>
    a246:	2b00      	cmp	r3, #0
    a248:	f43f af43 	beq.w	a0d2 <usbd_work_handler+0x116>
    a24c:	f00a fe17 	bl	14e7e <z_arch_is_user_context>
			ctx->status_cb(USB_DC_RESUME, NULL);
    a250:	682b      	ldr	r3, [r5, #0]
    a252:	2100      	movs	r1, #0
    a254:	2006      	movs	r0, #6
    a256:	e7d2      	b.n	a1fe <usbd_work_handler+0x242>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    a258:	f10b 040c 	add.w	r4, fp, #12
    a25c:	f00a fe0f 	bl	14e7e <z_arch_is_user_context>
    a260:	4620      	mov	r0, r4
    a262:	f00a fe2f 	bl	14ec4 <k_mutex_lock.constprop.11>
			eps_ctx_init();
    a266:	f7ff fdc3 	bl	9df0 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    a26a:	4620      	mov	r0, r4
    a26c:	f00a fe11 	bl	14e92 <k_mutex_unlock>
			if (ctx->status_cb) {
    a270:	f85b 3c08 	ldr.w	r3, [fp, #-8]
    a274:	2b00      	cmp	r3, #0
    a276:	f43f af2c 	beq.w	a0d2 <usbd_work_handler+0x116>
				ctx->status_cb(USB_DC_RESET, NULL);
    a27a:	2100      	movs	r1, #0
    a27c:	2001      	movs	r0, #1
    a27e:	e7be      	b.n	a1fe <usbd_work_handler+0x242>
    a280:	00018fcc 	.word	0x00018fcc
    a284:	00018f84 	.word	0x00018f84
    a288:	20003b64 	.word	0x20003b64
    a28c:	0001b451 	.word	0x0001b451
    a290:	40027000 	.word	0x40027000
    a294:	20003b78 	.word	0x20003b78
    a298:	0bad0000 	.word	0x0bad0000
    a29c:	0001b475 	.word	0x0001b475
			if (ctx->status_cb) {
    a2a0:	f85b 3c08 	ldr.w	r3, [fp, #-8]
    a2a4:	2b00      	cmp	r3, #0
    a2a6:	f43f af14 	beq.w	a0d2 <usbd_work_handler+0x116>
				ctx->status_cb(USB_DC_SOF, NULL);
    a2aa:	2100      	movs	r1, #0
    a2ac:	200a      	movs	r0, #10
    a2ae:	e7a6      	b.n	a1fe <usbd_work_handler+0x242>
    a2b0:	f00a fde5 	bl	14e7e <z_arch_is_user_context>
				LOG_ERR("USBD event queue full!");
    a2b4:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    a2b8:	f043 0301 	orr.w	r3, r3, #1
    a2bc:	f363 0907 	bfi	r9, r3, #0, #8
    a2c0:	9b00      	ldr	r3, [sp, #0]
    a2c2:	f363 198f 	bfi	r9, r3, #6, #10
    a2c6:	b1d8      	cbz	r0, a300 <usbd_work_handler+0x344>
    a2c8:	491c      	ldr	r1, [pc, #112]	; (a33c <usbd_work_handler+0x380>)
    a2ca:	4648      	mov	r0, r9
    a2cc:	f009 fa76 	bl	137bc <log_from_user>
	nrf5_power_usb_power_int_enable(false);
    a2d0:	2000      	movs	r0, #0
    a2d2:	f00a fdc7 	bl	14e64 <nrf5_power_usb_power_int_enable>
	nrfx_usbd_disable();
    a2d6:	f7fc fb05 	bl	68e4 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    a2da:	f7fb fc51 	bl	5b80 <nrfx_usbd_uninit>
	usbd_evt_flush();
    a2de:	f00a fde8 	bl	14eb2 <usbd_evt_flush>
	ret = eps_ctx_init();
    a2e2:	f7ff fd85 	bl	9df0 <eps_ctx_init>
	nrf5_power_usb_power_int_enable(true);
    a2e6:	2001      	movs	r0, #1
    a2e8:	f00a fdbc 	bl	14e64 <nrf5_power_usb_power_int_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    a2ec:	4814      	ldr	r0, [pc, #80]	; (a340 <usbd_work_handler+0x384>)
    a2ee:	f7fb fd9b 	bl	5e28 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    a2f2:	4b14      	ldr	r3, [pc, #80]	; (a344 <usbd_work_handler+0x388>)
    a2f4:	4298      	cmp	r0, r3
    a2f6:	f43f aeec 	beq.w	a0d2 <usbd_work_handler+0x116>
    a2fa:	f00a fdc0 	bl	14e7e <z_arch_is_user_context>
		LOG_DBG("nRF USBD driver reinit failed. Code: %d.",
    a2fe:	e6e8      	b.n	a0d2 <usbd_work_handler+0x116>
				LOG_ERR("USBD event queue full!");
    a300:	4649      	mov	r1, r9
    a302:	480e      	ldr	r0, [pc, #56]	; (a33c <usbd_work_handler+0x380>)
    a304:	f009 f9f2 	bl	136ec <log_0>
    a308:	e7e2      	b.n	a2d0 <usbd_work_handler+0x314>
    a30a:	f00a fdb8 	bl	14e7e <z_arch_is_user_context>
			LOG_ERR("Unknown USBD event: %"PRId16".", ev->evt_type);
    a30e:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
    a312:	f043 0301 	orr.w	r3, r3, #1
    a316:	f363 0a07 	bfi	sl, r3, #0, #8
    a31a:	9b00      	ldr	r3, [sp, #0]
    a31c:	7d31      	ldrb	r1, [r6, #20]
    a31e:	f363 1a8f 	bfi	sl, r3, #6, #10
    a322:	b128      	cbz	r0, a330 <usbd_work_handler+0x374>
    a324:	460a      	mov	r2, r1
    a326:	4650      	mov	r0, sl
    a328:	4907      	ldr	r1, [pc, #28]	; (a348 <usbd_work_handler+0x38c>)
    a32a:	f009 fa47 	bl	137bc <log_from_user>
    a32e:	e6d0      	b.n	a0d2 <usbd_work_handler+0x116>
    a330:	4652      	mov	r2, sl
    a332:	4805      	ldr	r0, [pc, #20]	; (a348 <usbd_work_handler+0x38c>)
    a334:	f009 f9e7 	bl	13706 <log_1>
			break;
    a338:	e6cb      	b.n	a0d2 <usbd_work_handler+0x116>
    a33a:	bf00      	nop
    a33c:	0001b498 	.word	0x0001b498
    a340:	00009b19 	.word	0x00009b19
    a344:	0bad0000 	.word	0x0bad0000
    a348:	0001b4af 	.word	0x0001b4af

0000a34c <usb_dc_nrfx_power_event_callback>:
	switch (event) {
    a34c:	f5b0 7f90 	cmp.w	r0, #288	; 0x120
{
    a350:	b510      	push	{r4, lr}
	switch (event) {
    a352:	d01f      	beq.n	a394 <usb_dc_nrfx_power_event_callback+0x48>
    a354:	f5b0 7f92 	cmp.w	r0, #292	; 0x124
    a358:	d02c      	beq.n	a3b4 <usb_dc_nrfx_power_event_callback+0x68>
    a35a:	f5b0 7f8e 	cmp.w	r0, #284	; 0x11c
    a35e:	d02b      	beq.n	a3b8 <usb_dc_nrfx_power_event_callback+0x6c>
    a360:	f00a fd8d 	bl	14e7e <z_arch_is_user_context>
		LOG_ERR("Unknown USB power event");
    a364:	2301      	movs	r3, #1
    a366:	f04f 0200 	mov.w	r2, #0
    a36a:	f363 0207 	bfi	r2, r3, #0, #8
    a36e:	4914      	ldr	r1, [pc, #80]	; (a3c0 <usb_dc_nrfx_power_event_callback+0x74>)
    a370:	4b14      	ldr	r3, [pc, #80]	; (a3c4 <usb_dc_nrfx_power_event_callback+0x78>)
    a372:	1a5b      	subs	r3, r3, r1
    a374:	08db      	lsrs	r3, r3, #3
    a376:	f363 128f 	bfi	r2, r3, #6, #10
    a37a:	b128      	cbz	r0, a388 <usb_dc_nrfx_power_event_callback+0x3c>
    a37c:	4912      	ldr	r1, [pc, #72]	; (a3c8 <usb_dc_nrfx_power_event_callback+0x7c>)
    a37e:	4610      	mov	r0, r2
}
    a380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Unknown USB power event");
    a384:	f009 ba1a 	b.w	137bc <log_from_user>
    a388:	4611      	mov	r1, r2
    a38a:	480f      	ldr	r0, [pc, #60]	; (a3c8 <usb_dc_nrfx_power_event_callback+0x7c>)
}
    a38c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Unknown USB power event");
    a390:	f009 b9ac 	b.w	136ec <log_0>
		new_state = USBD_DETACHED;
    a394:	2400      	movs	r4, #0
	struct usbd_event *ev = usbd_evt_alloc();
    a396:	f7ff fad9 	bl	994c <usbd_evt_alloc>
	if (!ev) {
    a39a:	b178      	cbz	r0, a3bc <usb_dc_nrfx_power_event_callback+0x70>
	ev->evt_type = USBD_EVT_POWER;
    a39c:	2200      	movs	r2, #0
    a39e:	7502      	strb	r2, [r0, #20]
	ev->evt.pwr_evt.state = new_state;
    a3a0:	7304      	strb	r4, [r0, #12]
	usbd_evt_put(ev);
    a3a2:	f7ff faa1 	bl	98e8 <usbd_evt_put>
	if (usbd_ctx.attached) {
    a3a6:	4b09      	ldr	r3, [pc, #36]	; (a3cc <usb_dc_nrfx_power_event_callback+0x80>)
    a3a8:	791b      	ldrb	r3, [r3, #4]
    a3aa:	b13b      	cbz	r3, a3bc <usb_dc_nrfx_power_event_callback+0x70>
}
    a3ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
    a3b0:	f7ff bab4 	b.w	991c <usbd_work_schedule>
		new_state = USBD_POWERED;
    a3b4:	2402      	movs	r4, #2
    a3b6:	e7ee      	b.n	a396 <usb_dc_nrfx_power_event_callback+0x4a>
		new_state = USBD_ATTACHED;
    a3b8:	2401      	movs	r4, #1
    a3ba:	e7ec      	b.n	a396 <usb_dc_nrfx_power_event_callback+0x4a>
}
    a3bc:	bd10      	pop	{r4, pc}
    a3be:	bf00      	nop
    a3c0:	00018f84 	.word	0x00018f84
    a3c4:	00018fcc 	.word	0x00018fcc
    a3c8:	0001b38a 	.word	0x0001b38a
    a3cc:	20003b64 	.word	0x20003b64

0000a3d0 <usb_dc_attach>:

int usb_dc_attach(void)
{
    a3d0:	e92d 4178 	stmdb	sp!, {r3, r4, r5, r6, r8, lr}
	struct nrf_usbd_ctx *ctx = get_usbd_ctx();
	nrfx_err_t err;
	int ret;

	if (ctx->attached) {
    a3d4:	4c25      	ldr	r4, [pc, #148]	; (a46c <usb_dc_attach+0x9c>)
    a3d6:	7923      	ldrb	r3, [r4, #4]
    a3d8:	2b00      	cmp	r3, #0
    a3da:	d144      	bne.n	a466 <usb_dc_attach+0x96>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    a3dc:	4a24      	ldr	r2, [pc, #144]	; (a470 <usb_dc_attach+0xa0>)
    a3de:	60a3      	str	r3, [r4, #8]
    a3e0:	e9c4 2303 	strd	r2, r3, [r4, #12]
    a3e4:	f00a fd4b 	bl	14e7e <z_arch_is_user_context>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)
    a3e8:	b1a8      	cbz	r0, a416 <usb_dc_attach+0x46>
    a3ea:	f104 0014 	add.w	r0, r4, #20
	register u32_t r6 __asm__("r6") = call_id;
    a3ee:	2643      	movs	r6, #67	; 0x43
	__asm__ volatile("svc %[svid]\n"
    a3f0:	df03      	svc	3
	}

	k_work_init(&ctx->usb_work, usbd_work_handler);
	k_mutex_init(&ctx->drv_lock);

	IRQ_CONNECT(DT_NORDIC_NRF_USBD_USBD_0_IRQ,
    a3f2:	2200      	movs	r2, #0
    a3f4:	2101      	movs	r1, #1
    a3f6:	2027      	movs	r0, #39	; 0x27
    a3f8:	f000 fdfe 	bl	aff8 <z_irq_priority_set>
		    DT_NORDIC_NRF_USBD_USBD_0_IRQ_PRIORITY,
		    nrfx_isr, nrfx_usbd_irq_handler, 0);

	err = nrfx_usbd_init(usbd_event_handler);
    a3fc:	481d      	ldr	r0, [pc, #116]	; (a474 <usb_dc_attach+0xa4>)
    a3fe:	f7fb fd13 	bl	5e28 <nrfx_usbd_init>

	if (err != NRFX_SUCCESS) {
    a402:	4b1d      	ldr	r3, [pc, #116]	; (a478 <usb_dc_attach+0xa8>)
    a404:	4298      	cmp	r0, r3
    a406:	d00b      	beq.n	a420 <usb_dc_attach+0x50>
    a408:	f00a fd39 	bl	14e7e <z_arch_is_user_context>
		LOG_DBG("nRF USBD driver init failed. Code: %d.",
			(u32_t)err);
		return -EIO;
    a40c:	f06f 0504 	mvn.w	r5, #4
		 */
		usb_dc_nrfx_power_event_callback(NRF_POWER_EVENT_USBDETECTED);
	}

	return ret;
}
    a410:	4628      	mov	r0, r5
    a412:	e8bd 8178 	ldmia.w	sp!, {r3, r4, r5, r6, r8, pc}
    a416:	f104 0014 	add.w	r0, r4, #20
    a41a:	f00d ff8d 	bl	18338 <z_impl_k_mutex_init>
    a41e:	e7e8      	b.n	a3f2 <usb_dc_attach+0x22>
	nrf5_power_usb_power_int_enable(true);
    a420:	2001      	movs	r0, #1
    a422:	f00a fd1f 	bl	14e64 <nrf5_power_usb_power_int_enable>
	ret = eps_ctx_init();
    a426:	f7ff fce3 	bl	9df0 <eps_ctx_init>
	if (ret == 0) {
    a42a:	4605      	mov	r5, r0
    a42c:	b908      	cbnz	r0, a432 <usb_dc_attach+0x62>
		ctx->attached = true;
    a42e:	2301      	movs	r3, #1
    a430:	7123      	strb	r3, [r4, #4]
    a432:	f00a fd24 	bl	14e7e <z_arch_is_user_context>
K_SYSCALL_DECLARE1(K_SYSCALL_K_QUEUE_IS_EMPTY, k_queue_is_empty, int, struct k_queue *, queue)
    a436:	b180      	cbz	r0, a45a <usb_dc_attach+0x8a>
	register u32_t ret __asm__("r0") = arg1;
    a438:	4810      	ldr	r0, [pc, #64]	; (a47c <usb_dc_attach+0xac>)
	register u32_t r6 __asm__("r6") = call_id;
    a43a:	2656      	movs	r6, #86	; 0x56
	__asm__ volatile("svc %[svid]\n"
    a43c:	df03      	svc	3
	if (!k_fifo_is_empty(&work_queue)) {
    a43e:	b908      	cbnz	r0, a444 <usb_dc_attach+0x74>
		usbd_work_schedule();
    a440:	f7ff fa6c 	bl	991c <usbd_work_schedule>
#endif // NRF_POWER_HAS_VDDH

#if NRF_POWER_HAS_USBREG
__STATIC_INLINE uint32_t nrf_power_usbregstatus_get(void)
{
    return NRF_POWER->USBREGSTATUS;
    a444:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a448:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
	if (nrf_power_usbregstatus_vbusdet_get()) {
    a44c:	07db      	lsls	r3, r3, #31
    a44e:	d5df      	bpl.n	a410 <usb_dc_attach+0x40>
		usb_dc_nrfx_power_event_callback(NRF_POWER_EVENT_USBDETECTED);
    a450:	f44f 708e 	mov.w	r0, #284	; 0x11c
    a454:	f7ff ff7a 	bl	a34c <usb_dc_nrfx_power_event_callback>
    a458:	e7da      	b.n	a410 <usb_dc_attach+0x40>
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
    a45a:	4b08      	ldr	r3, [pc, #32]	; (a47c <usb_dc_attach+0xac>)
    a45c:	6818      	ldr	r0, [r3, #0]
    a45e:	fab0 f080 	clz	r0, r0
    a462:	0940      	lsrs	r0, r0, #5
    a464:	e7eb      	b.n	a43e <usb_dc_attach+0x6e>
		return 0;
    a466:	2500      	movs	r5, #0
    a468:	e7d2      	b.n	a410 <usb_dc_attach+0x40>
    a46a:	bf00      	nop
    a46c:	20003b64 	.word	0x20003b64
    a470:	00009fbd 	.word	0x00009fbd
    a474:	00009b19 	.word	0x00009b19
    a478:	0bad0000 	.word	0x0bad0000
    a47c:	20011bdc 	.word	0x20011bdc

0000a480 <usb_dc_set_address>:

	return 0;
}

int usb_dc_set_address(const u8_t addr)
{
    a480:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    a482:	4b06      	ldr	r3, [pc, #24]	; (a49c <usb_dc_set_address+0x1c>)
	struct nrf_usbd_ctx *ctx;

	if (!dev_attached() || !dev_ready()) {
    a484:	791a      	ldrb	r2, [r3, #4]
    a486:	b12a      	cbz	r2, a494 <usb_dc_set_address+0x14>
    a488:	795b      	ldrb	r3, [r3, #5]
    a48a:	b11b      	cbz	r3, a494 <usb_dc_set_address+0x14>
    a48c:	f00a fcf7 	bl	14e7e <z_arch_is_user_context>

	ctx = get_usbd_ctx();

	LOG_DBG("Address set to: %d.", addr);

	return 0;
    a490:	2000      	movs	r0, #0
}
    a492:	bd08      	pop	{r3, pc}
		return -ENODEV;
    a494:	f06f 0012 	mvn.w	r0, #18
    a498:	e7fb      	b.n	a492 <usb_dc_set_address+0x12>
    a49a:	bf00      	nop
    a49c:	20003b64 	.word	0x20003b64

0000a4a0 <usb_dc_ep_check_cap>:


int usb_dc_ep_check_cap(const struct usb_dc_ep_cfg_data *const ep_cfg)
{
    a4a0:	b510      	push	{r4, lr}
    a4a2:	4602      	mov	r2, r0
	u8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    a4a4:	7804      	ldrb	r4, [r0, #0]
    a4a6:	f00a fcea 	bl	14e7e <z_arch_is_user_context>

	LOG_DBG("ep %x, mps %d, type %d", ep_cfg->ep_addr, ep_cfg->ep_mps,
		ep_cfg->ep_type);

	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    a4aa:	7911      	ldrb	r1, [r2, #4]
    a4ac:	b9d9      	cbnz	r1, a4e6 <usb_dc_ep_check_cap+0x46>
    a4ae:	0720      	lsls	r0, r4, #28
    a4b0:	d019      	beq.n	a4e6 <usb_dc_ep_check_cap+0x46>
    a4b2:	f00a fce4 	bl	14e7e <z_arch_is_user_context>
		LOG_ERR("invalid endpoint configuration");
    a4b6:	2301      	movs	r3, #1
    a4b8:	f04f 0200 	mov.w	r2, #0
    a4bc:	f363 0207 	bfi	r2, r3, #0, #8
    a4c0:	4919      	ldr	r1, [pc, #100]	; (a528 <usb_dc_ep_check_cap+0x88>)
    a4c2:	4b1a      	ldr	r3, [pc, #104]	; (a52c <usb_dc_ep_check_cap+0x8c>)
    a4c4:	1a5b      	subs	r3, r3, r1
    a4c6:	08db      	lsrs	r3, r3, #3
    a4c8:	f363 128f 	bfi	r2, r3, #6, #10
    a4cc:	b130      	cbz	r0, a4dc <usb_dc_ep_check_cap+0x3c>
    a4ce:	4918      	ldr	r1, [pc, #96]	; (a530 <usb_dc_ep_check_cap+0x90>)
		return -1;
	}

	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
		LOG_ERR("invalid endpoint index/address");
    a4d0:	4610      	mov	r0, r2
    a4d2:	f009 f973 	bl	137bc <log_from_user>
	}

	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
	    (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr))) {
		LOG_WRN("invalid endpoint type");
		return -1;
    a4d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return 0;
}
    a4da:	bd10      	pop	{r4, pc}
		LOG_ERR("invalid endpoint configuration");
    a4dc:	4814      	ldr	r0, [pc, #80]	; (a530 <usb_dc_ep_check_cap+0x90>)
    a4de:	4611      	mov	r1, r2
		LOG_ERR("invalid endpoint index/address");
    a4e0:	f009 f904 	bl	136ec <log_0>
		return -1;
    a4e4:	e7f7      	b.n	a4d6 <usb_dc_ep_check_cap+0x36>
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    a4e6:	7813      	ldrb	r3, [r2, #0]
    a4e8:	f003 020f 	and.w	r2, r3, #15
    a4ec:	2a08      	cmp	r2, #8
    a4ee:	d912      	bls.n	a516 <usb_dc_ep_check_cap+0x76>
    a4f0:	f00a fcc5 	bl	14e7e <z_arch_is_user_context>
		LOG_ERR("invalid endpoint index/address");
    a4f4:	2301      	movs	r3, #1
    a4f6:	f04f 0200 	mov.w	r2, #0
    a4fa:	f363 0207 	bfi	r2, r3, #0, #8
    a4fe:	490a      	ldr	r1, [pc, #40]	; (a528 <usb_dc_ep_check_cap+0x88>)
    a500:	4b0a      	ldr	r3, [pc, #40]	; (a52c <usb_dc_ep_check_cap+0x8c>)
    a502:	1a5b      	subs	r3, r3, r1
    a504:	08db      	lsrs	r3, r3, #3
    a506:	f363 128f 	bfi	r2, r3, #6, #10
    a50a:	b108      	cbz	r0, a510 <usb_dc_ep_check_cap+0x70>
    a50c:	4909      	ldr	r1, [pc, #36]	; (a534 <usb_dc_ep_check_cap+0x94>)
    a50e:	e7df      	b.n	a4d0 <usb_dc_ep_check_cap+0x30>
    a510:	4611      	mov	r1, r2
    a512:	4808      	ldr	r0, [pc, #32]	; (a534 <usb_dc_ep_check_cap+0x94>)
    a514:	e7e4      	b.n	a4e0 <usb_dc_ep_check_cap+0x40>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    a516:	2901      	cmp	r1, #1
    a518:	d104      	bne.n	a524 <usb_dc_ep_check_cap+0x84>
    a51a:	071b      	lsls	r3, r3, #28
    a51c:	d402      	bmi.n	a524 <usb_dc_ep_check_cap+0x84>
    a51e:	f00a fcae 	bl	14e7e <z_arch_is_user_context>
    a522:	e7d8      	b.n	a4d6 <usb_dc_ep_check_cap+0x36>
	return 0;
    a524:	2000      	movs	r0, #0
    a526:	e7d8      	b.n	a4da <usb_dc_ep_check_cap+0x3a>
    a528:	00018f84 	.word	0x00018f84
    a52c:	00018fcc 	.word	0x00018fcc
    a530:	0001b2e5 	.word	0x0001b2e5
    a534:	0001b304 	.word	0x0001b304

0000a538 <usb_dc_ep_configure>:

int usb_dc_ep_configure(const struct usb_dc_ep_cfg_data *const ep_cfg)
{
    a538:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    a53a:	4b19      	ldr	r3, [pc, #100]	; (a5a0 <usb_dc_ep_configure+0x68>)
	struct nrf_usbd_ep_ctx *ep_ctx;

	if (!dev_attached()) {
    a53c:	791b      	ldrb	r3, [r3, #4]
{
    a53e:	4604      	mov	r4, r0
	if (!dev_attached()) {
    a540:	b35b      	cbz	r3, a59a <usb_dc_ep_configure+0x62>
	 * accordingly. So either this needs to be chosen in the
	 * menuconfig in application area or perhaps in device tree
	 * at compile time or introduce a new API to read the endpoint
	 * configuration at runtime before configuring them.
	 */
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    a542:	7805      	ldrb	r5, [r0, #0]
    a544:	4628      	mov	r0, r5
    a546:	f7ff f9af 	bl	98a8 <endpoint_ctx>
	if (!ep_ctx) {
    a54a:	b1c8      	cbz	r0, a580 <usb_dc_ep_configure+0x48>
		return -EINVAL;
	}

	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    a54c:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    a54e:	8861      	ldrh	r1, [r4, #2]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    a550:	7923      	ldrb	r3, [r4, #4]
    a552:	7283      	strb	r3, [r0, #10]

	if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    a554:	1e4c      	subs	r4, r1, #1
    a556:	400c      	ands	r4, r1
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    a558:	6041      	str	r1, [r0, #4]
	if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    a55a:	d019      	beq.n	a590 <usb_dc_ep_configure+0x58>
    a55c:	f00a fc8f 	bl	14e7e <z_arch_is_user_context>
		LOG_ERR("EP max packet size must be a power of 2.");
    a560:	2301      	movs	r3, #1
    a562:	f04f 0200 	mov.w	r2, #0
    a566:	f363 0207 	bfi	r2, r3, #0, #8
    a56a:	490e      	ldr	r1, [pc, #56]	; (a5a4 <usb_dc_ep_configure+0x6c>)
    a56c:	4b0e      	ldr	r3, [pc, #56]	; (a5a8 <usb_dc_ep_configure+0x70>)
    a56e:	1a5b      	subs	r3, r3, r1
    a570:	08db      	lsrs	r3, r3, #3
    a572:	f363 128f 	bfi	r2, r3, #6, #10
    a576:	b130      	cbz	r0, a586 <usb_dc_ep_configure+0x4e>
    a578:	490c      	ldr	r1, [pc, #48]	; (a5ac <usb_dc_ep_configure+0x74>)
    a57a:	4610      	mov	r0, r2
    a57c:	f009 f91e 	bl	137bc <log_from_user>
		return -EINVAL;
    a580:	f06f 0415 	mvn.w	r4, #21
    a584:	e007      	b.n	a596 <usb_dc_ep_configure+0x5e>
		LOG_ERR("EP max packet size must be a power of 2.");
    a586:	4611      	mov	r1, r2
    a588:	4808      	ldr	r0, [pc, #32]	; (a5ac <usb_dc_ep_configure+0x74>)
    a58a:	f009 f8af 	bl	136ec <log_0>
		return -EINVAL;
    a58e:	e7f7      	b.n	a580 <usb_dc_ep_configure+0x48>
	}
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    a590:	4628      	mov	r0, r5
    a592:	f7fb fc19 	bl	5dc8 <nrfx_usbd_ep_max_packet_size_set>
					 ep_cfg->ep_mps);

	return 0;
}
    a596:	4620      	mov	r0, r4
    a598:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    a59a:	f06f 0412 	mvn.w	r4, #18
    a59e:	e7fa      	b.n	a596 <usb_dc_ep_configure+0x5e>
    a5a0:	20003b64 	.word	0x20003b64
    a5a4:	00018f84 	.word	0x00018f84
    a5a8:	00018fcc 	.word	0x00018fcc
    a5ac:	0001b323 	.word	0x0001b323

0000a5b0 <usb_dc_ep_set_stall>:

int usb_dc_ep_set_stall(const u8_t ep)
{
    a5b0:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    a5b2:	4b1f      	ldr	r3, [pc, #124]	; (a630 <usb_dc_ep_set_stall+0x80>)
	struct nrf_usbd_ep_ctx *ep_ctx;

	if (!dev_attached() || !dev_ready()) {
    a5b4:	791a      	ldrb	r2, [r3, #4]
{
    a5b6:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    a5b8:	2a00      	cmp	r2, #0
    a5ba:	d035      	beq.n	a628 <usb_dc_ep_set_stall+0x78>
    a5bc:	795b      	ldrb	r3, [r3, #5]
    a5be:	2b00      	cmp	r3, #0
    a5c0:	d032      	beq.n	a628 <usb_dc_ep_set_stall+0x78>
		return -ENODEV;
	}

	ep_ctx = endpoint_ctx(ep);
    a5c2:	f7ff f971 	bl	98a8 <endpoint_ctx>
	if (!ep_ctx) {
    a5c6:	4604      	mov	r4, r0
    a5c8:	b330      	cbz	r0, a618 <usb_dc_ep_set_stall+0x68>
		return -EINVAL;
	}

	switch (ep_ctx->cfg.type) {
    a5ca:	7a83      	ldrb	r3, [r0, #10]
    a5cc:	2b03      	cmp	r3, #3
    a5ce:	d805      	bhi.n	a5dc <usb_dc_ep_set_stall+0x2c>
    a5d0:	e8df f003 	tbb	[pc, r3]
    a5d4:	0c0c1002 	.word	0x0c0c1002
	case USB_DC_EP_CONTROL:
		nrfx_usbd_setup_stall();
    a5d8:	f009 f83e 	bl	13658 <nrfx_usbd_setup_stall>
	case USB_DC_EP_ISOCHRONOUS:
		LOG_ERR("STALL unsupported on ISO endpoint.s");
		return -EINVAL;
	}

	ep_ctx->buf.len = 0U;
    a5dc:	2200      	movs	r2, #0
	ep_ctx->buf.curr = ep_ctx->buf.data;
    a5de:	69a3      	ldr	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
    a5e0:	60e2      	str	r2, [r4, #12]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    a5e2:	61e3      	str	r3, [r4, #28]
    a5e4:	f00a fc4b 	bl	14e7e <z_arch_is_user_context>

	LOG_DBG("STALL on EP %d.", ep);

	return 0;
    a5e8:	4610      	mov	r0, r2
}
    a5ea:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    a5ec:	4628      	mov	r0, r5
    a5ee:	f7fb fea5 	bl	633c <nrfx_usbd_ep_stall>
		break;
    a5f2:	e7f3      	b.n	a5dc <usb_dc_ep_set_stall+0x2c>
    a5f4:	f00a fc43 	bl	14e7e <z_arch_is_user_context>
		LOG_ERR("STALL unsupported on ISO endpoint.s");
    a5f8:	2301      	movs	r3, #1
    a5fa:	f04f 0200 	mov.w	r2, #0
    a5fe:	f363 0207 	bfi	r2, r3, #0, #8
    a602:	490c      	ldr	r1, [pc, #48]	; (a634 <usb_dc_ep_set_stall+0x84>)
    a604:	4b0c      	ldr	r3, [pc, #48]	; (a638 <usb_dc_ep_set_stall+0x88>)
    a606:	1a5b      	subs	r3, r3, r1
    a608:	08db      	lsrs	r3, r3, #3
    a60a:	f363 128f 	bfi	r2, r3, #6, #10
    a60e:	b130      	cbz	r0, a61e <usb_dc_ep_set_stall+0x6e>
    a610:	490a      	ldr	r1, [pc, #40]	; (a63c <usb_dc_ep_set_stall+0x8c>)
    a612:	4610      	mov	r0, r2
    a614:	f009 f8d2 	bl	137bc <log_from_user>
		return -EINVAL;
    a618:	f06f 0015 	mvn.w	r0, #21
    a61c:	e7e5      	b.n	a5ea <usb_dc_ep_set_stall+0x3a>
		LOG_ERR("STALL unsupported on ISO endpoint.s");
    a61e:	4611      	mov	r1, r2
    a620:	4806      	ldr	r0, [pc, #24]	; (a63c <usb_dc_ep_set_stall+0x8c>)
    a622:	f009 f863 	bl	136ec <log_0>
		return -EINVAL;
    a626:	e7f7      	b.n	a618 <usb_dc_ep_set_stall+0x68>
		return -ENODEV;
    a628:	f06f 0012 	mvn.w	r0, #18
    a62c:	e7dd      	b.n	a5ea <usb_dc_ep_set_stall+0x3a>
    a62e:	bf00      	nop
    a630:	20003b64 	.word	0x20003b64
    a634:	00018f84 	.word	0x00018f84
    a638:	00018fcc 	.word	0x00018fcc
    a63c:	0001b34c 	.word	0x0001b34c

0000a640 <usb_dc_ep_clear_stall>:
	return get_usbd_ctx()->attached;
    a640:	4b0b      	ldr	r3, [pc, #44]	; (a670 <usb_dc_ep_clear_stall+0x30>)
int usb_dc_ep_clear_stall(const u8_t ep)
{

	struct nrf_usbd_ep_ctx *ep_ctx;

	if (!dev_attached() || !dev_ready()) {
    a642:	791a      	ldrb	r2, [r3, #4]
{
    a644:	b510      	push	{r4, lr}
    a646:	4604      	mov	r4, r0
	if (!dev_attached() || !dev_ready()) {
    a648:	b15a      	cbz	r2, a662 <usb_dc_ep_clear_stall+0x22>
    a64a:	795b      	ldrb	r3, [r3, #5]
    a64c:	b14b      	cbz	r3, a662 <usb_dc_ep_clear_stall+0x22>
		return -ENODEV;
	}

	ep_ctx = endpoint_ctx(ep);
    a64e:	f7ff f92b 	bl	98a8 <endpoint_ctx>
	if (!ep_ctx) {
    a652:	b148      	cbz	r0, a668 <usb_dc_ep_clear_stall+0x28>
		return -EINVAL;
	}

	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    a654:	4620      	mov	r0, r4
    a656:	f7fc f9f3 	bl	6a40 <nrfx_usbd_ep_stall_clear>
    a65a:	f00a fc10 	bl	14e7e <z_arch_is_user_context>
	LOG_DBG("Unstall on EP %d", ep);

	return 0;
    a65e:	2000      	movs	r0, #0
}
    a660:	bd10      	pop	{r4, pc}
		return -ENODEV;
    a662:	f06f 0012 	mvn.w	r0, #18
    a666:	e7fb      	b.n	a660 <usb_dc_ep_clear_stall+0x20>
		return -EINVAL;
    a668:	f06f 0015 	mvn.w	r0, #21
    a66c:	e7f8      	b.n	a660 <usb_dc_ep_clear_stall+0x20>
    a66e:	bf00      	nop
    a670:	20003b64 	.word	0x20003b64

0000a674 <usb_dc_ep_is_stalled>:
{
	return usb_dc_ep_set_stall(ep);
}

int usb_dc_ep_is_stalled(const u8_t ep, u8_t *const stalled)
{
    a674:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    a676:	4b0b      	ldr	r3, [pc, #44]	; (a6a4 <usb_dc_ep_is_stalled+0x30>)
	struct nrf_usbd_ep_ctx *ep_ctx;

	if (!dev_attached() || !dev_ready()) {
    a678:	791a      	ldrb	r2, [r3, #4]
{
    a67a:	4605      	mov	r5, r0
    a67c:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    a67e:	b152      	cbz	r2, a696 <usb_dc_ep_is_stalled+0x22>
    a680:	795b      	ldrb	r3, [r3, #5]
    a682:	b143      	cbz	r3, a696 <usb_dc_ep_is_stalled+0x22>
		return -ENODEV;
	}

	ep_ctx = endpoint_ctx(ep);
    a684:	f7ff f910 	bl	98a8 <endpoint_ctx>
	if (!ep_ctx) {
    a688:	b140      	cbz	r0, a69c <usb_dc_ep_is_stalled+0x28>
		return -EINVAL;
	}

	*stalled = (u8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    a68a:	4628      	mov	r0, r5
    a68c:	f7fb fe78 	bl	6380 <nrfx_usbd_ep_stall_check>
    a690:	7020      	strb	r0, [r4, #0]

	return 0;
    a692:	2000      	movs	r0, #0
}
    a694:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    a696:	f06f 0012 	mvn.w	r0, #18
    a69a:	e7fb      	b.n	a694 <usb_dc_ep_is_stalled+0x20>
		return -EINVAL;
    a69c:	f06f 0015 	mvn.w	r0, #21
    a6a0:	e7f8      	b.n	a694 <usb_dc_ep_is_stalled+0x20>
    a6a2:	bf00      	nop
    a6a4:	20003b64 	.word	0x20003b64

0000a6a8 <usb_dc_ep_enable>:

int usb_dc_ep_enable(const u8_t ep)
{
    a6a8:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    a6aa:	4d0f      	ldr	r5, [pc, #60]	; (a6e8 <usb_dc_ep_enable+0x40>)
	struct nrf_usbd_ep_ctx *ep_ctx;

	if (!dev_attached()) {
    a6ac:	792b      	ldrb	r3, [r5, #4]
{
    a6ae:	4606      	mov	r6, r0
	if (!dev_attached()) {
    a6b0:	b183      	cbz	r3, a6d4 <usb_dc_ep_enable+0x2c>
		return -ENODEV;
	}

	ep_ctx = endpoint_ctx(ep);
    a6b2:	f7ff f8f9 	bl	98a8 <endpoint_ctx>
	if (!ep_ctx) {
    a6b6:	4602      	mov	r2, r0
    a6b8:	b178      	cbz	r0, a6da <usb_dc_ep_enable+0x32>
		return -EINVAL;
	}

	if (ep_ctx->cfg.en) {
    a6ba:	7a04      	ldrb	r4, [r0, #8]
    a6bc:	b984      	cbnz	r4, a6e0 <usb_dc_ep_enable+0x38>
    a6be:	f00a fbde 	bl	14e7e <z_arch_is_user_context>
	LOG_DBG("EP enable: %d.", ep);

	ep_ctx->cfg.en = true;

	/* Defer the endpoint enable if USBD is not ready yet. */
	if (dev_ready()) {
    a6c2:	7968      	ldrb	r0, [r5, #5]
	ep_ctx->cfg.en = true;
    a6c4:	2301      	movs	r3, #1
    a6c6:	7213      	strb	r3, [r2, #8]
	if (dev_ready()) {
    a6c8:	b118      	cbz	r0, a6d2 <usb_dc_ep_enable+0x2a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    a6ca:	4630      	mov	r0, r6
    a6cc:	f7fc f95e 	bl	698c <nrfx_usbd_ep_enable>
	}

	return 0;
    a6d0:	4620      	mov	r0, r4
}
    a6d2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    a6d4:	f06f 0012 	mvn.w	r0, #18
    a6d8:	e7fb      	b.n	a6d2 <usb_dc_ep_enable+0x2a>
		return -EINVAL;
    a6da:	f06f 0015 	mvn.w	r0, #21
    a6de:	e7f8      	b.n	a6d2 <usb_dc_ep_enable+0x2a>
		return -EALREADY;
    a6e0:	f06f 0077 	mvn.w	r0, #119	; 0x77
    a6e4:	e7f5      	b.n	a6d2 <usb_dc_ep_enable+0x2a>
    a6e6:	bf00      	nop
    a6e8:	20003b64 	.word	0x20003b64

0000a6ec <usb_dc_ep_write>:
	return 0;
}

int usb_dc_ep_write(const u8_t ep, const u8_t *const data,
		    const u32_t data_len, u32_t *const ret_bytes)
{
    a6ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->attached;
    a6f0:	4f3c      	ldr	r7, [pc, #240]	; (a7e4 <usb_dc_ep_write+0xf8>)
{
    a6f2:	4698      	mov	r8, r3
    a6f4:	4606      	mov	r6, r0
    a6f6:	468a      	mov	sl, r1
    a6f8:	4614      	mov	r4, r2
    a6fa:	f00a fbc0 	bl	14e7e <z_arch_is_user_context>
	LOG_DBG("ep_write: ep %d, len %d", ep, data_len);
	struct nrf_usbd_ctx *ctx = get_usbd_ctx();
	struct nrf_usbd_ep_ctx *ep_ctx;
	u32_t bytes_to_copy;

	if (!dev_attached() || !dev_ready()) {
    a6fe:	793b      	ldrb	r3, [r7, #4]
    a700:	2b00      	cmp	r3, #0
    a702:	d069      	beq.n	a7d8 <usb_dc_ep_write+0xec>
	return get_usbd_ctx()->ready;
    a704:	f897 9005 	ldrb.w	r9, [r7, #5]
	if (!dev_attached() || !dev_ready()) {
    a708:	f1b9 0f00 	cmp.w	r9, #0
    a70c:	d064      	beq.n	a7d8 <usb_dc_ep_write+0xec>
		return -ENODEV;
	}

	if (NRF_USBD_EPOUT_CHECK(ep)) {
    a70e:	0633      	lsls	r3, r6, #24
    a710:	d565      	bpl.n	a7de <usb_dc_ep_write+0xf2>
		return -EINVAL;
	}

	ep_ctx = endpoint_ctx(ep);
    a712:	4630      	mov	r0, r6
    a714:	f7ff f8c8 	bl	98a8 <endpoint_ctx>
	if (!ep_ctx) {
    a718:	4605      	mov	r5, r0
    a71a:	2800      	cmp	r0, #0
    a71c:	d05f      	beq.n	a7de <usb_dc_ep_write+0xf2>
		return -EINVAL;
	}


	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    a71e:	f107 0014 	add.w	r0, r7, #20
    a722:	f00a fbcf 	bl	14ec4 <k_mutex_lock.constprop.11>

	/* USBD driver does not allow scheduling multiple DMA transfers
	 * for one EP at a time. Next USB transfer on this endpoint can be
	 * triggered after the completion of previous one.
	 */
	if (ep_ctx->write_in_progress) {
    a726:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
    a72a:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    a72e:	b14a      	cbz	r2, a744 <usb_dc_ep_write+0x58>
		k_mutex_unlock(&ctx->drv_lock);
    a730:	f107 0014 	add.w	r0, r7, #20
    a734:	f00a fbad 	bl	14e92 <k_mutex_unlock>
		return -EAGAIN;
    a738:	f06f 040a 	mvn.w	r4, #10
		LOG_ERR("nRF USBD write error: %d.", (u32_t)err);
	}

	k_mutex_unlock(&ctx->drv_lock);
	return result;
}
    a73c:	4620      	mov	r0, r4
    a73e:	b004      	add	sp, #16
    a740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (data_len > ep_ctx->cfg.max_sz) {
    a744:	686a      	ldr	r2, [r5, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    a746:	69a8      	ldr	r0, [r5, #24]
    a748:	42a2      	cmp	r2, r4
    a74a:	bf3c      	itt	cc
    a74c:	4614      	movcc	r4, r2
		ep_ctx->write_fragmented = true;
    a74e:	464b      	movcc	r3, r9
    a750:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
    a754:	4622      	mov	r2, r4
    a756:	4651      	mov	r1, sl
    a758:	f7f7 fe10 	bl	237c <memcpy>
	ep_ctx->buf.len = bytes_to_copy;
    a75c:	60ec      	str	r4, [r5, #12]
	if (ret_bytes) {
    a75e:	f1b8 0f00 	cmp.w	r8, #0
    a762:	d001      	beq.n	a768 <usb_dc_ep_write+0x7c>
		*ret_bytes = bytes_to_copy;
    a764:	f8c8 4000 	str.w	r4, [r8]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    a768:	7aac      	ldrb	r4, [r5, #10]
    a76a:	b94c      	cbnz	r4, a780 <usb_dc_ep_write+0x94>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    a76c:	f7fb fe6e 	bl	644c <nrfx_usbd_last_setup_dir_get>
    a770:	42b0      	cmp	r0, r6
    a772:	d005      	beq.n	a780 <usb_dc_ep_write+0x94>
		nrfx_usbd_setup_clear();
    a774:	f008 ff6d 	bl	13652 <nrfx_usbd_setup_clear>
	k_mutex_unlock(&ctx->drv_lock);
    a778:	481b      	ldr	r0, [pc, #108]	; (a7e8 <usb_dc_ep_write+0xfc>)
    a77a:	f00a fb8a 	bl	14e92 <k_mutex_unlock>
	return result;
    a77e:	e7dd      	b.n	a73c <usb_dc_ep_write+0x50>
	ep_ctx->write_in_progress = true;
    a780:	2301      	movs	r3, #1
    a782:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
	NRFX_USBD_TRANSFER_IN(transfer, ep_ctx->buf.data, ep_ctx->buf.len, 0);
    a786:	69ab      	ldr	r3, [r5, #24]
    a788:	9301      	str	r3, [sp, #4]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    a78a:	a901      	add	r1, sp, #4
	NRFX_USBD_TRANSFER_IN(transfer, ep_ctx->buf.data, ep_ctx->buf.len, 0);
    a78c:	68eb      	ldr	r3, [r5, #12]
    a78e:	9302      	str	r3, [sp, #8]
    a790:	2400      	movs	r4, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    a792:	4630      	mov	r0, r6
	NRFX_USBD_TRANSFER_IN(transfer, ep_ctx->buf.data, ep_ctx->buf.len, 0);
    a794:	9403      	str	r4, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    a796:	f7fb fb97 	bl	5ec8 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    a79a:	4b14      	ldr	r3, [pc, #80]	; (a7ec <usb_dc_ep_write+0x100>)
    a79c:	4298      	cmp	r0, r3
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    a79e:	4601      	mov	r1, r0
	if (err != NRFX_SUCCESS) {
    a7a0:	d0ea      	beq.n	a778 <usb_dc_ep_write+0x8c>
		ep_ctx->write_in_progress = false;
    a7a2:	f885 4022 	strb.w	r4, [r5, #34]	; 0x22
    a7a6:	f00a fb6a 	bl	14e7e <z_arch_is_user_context>
		LOG_ERR("nRF USBD write error: %d.", (u32_t)err);
    a7aa:	2301      	movs	r3, #1
    a7ac:	f363 0407 	bfi	r4, r3, #0, #8
    a7b0:	4a0f      	ldr	r2, [pc, #60]	; (a7f0 <usb_dc_ep_write+0x104>)
    a7b2:	4b10      	ldr	r3, [pc, #64]	; (a7f4 <usb_dc_ep_write+0x108>)
    a7b4:	1a9b      	subs	r3, r3, r2
    a7b6:	08db      	lsrs	r3, r3, #3
    a7b8:	f363 148f 	bfi	r4, r3, #6, #10
    a7bc:	b138      	cbz	r0, a7ce <usb_dc_ep_write+0xe2>
    a7be:	460a      	mov	r2, r1
    a7c0:	4620      	mov	r0, r4
    a7c2:	490d      	ldr	r1, [pc, #52]	; (a7f8 <usb_dc_ep_write+0x10c>)
    a7c4:	f008 fffa 	bl	137bc <log_from_user>
		result = -EIO;
    a7c8:	f06f 0404 	mvn.w	r4, #4
    a7cc:	e7d4      	b.n	a778 <usb_dc_ep_write+0x8c>
		LOG_ERR("nRF USBD write error: %d.", (u32_t)err);
    a7ce:	4622      	mov	r2, r4
    a7d0:	4809      	ldr	r0, [pc, #36]	; (a7f8 <usb_dc_ep_write+0x10c>)
    a7d2:	f008 ff98 	bl	13706 <log_1>
    a7d6:	e7f7      	b.n	a7c8 <usb_dc_ep_write+0xdc>
		return -ENODEV;
    a7d8:	f06f 0412 	mvn.w	r4, #18
    a7dc:	e7ae      	b.n	a73c <usb_dc_ep_write+0x50>
		return -EINVAL;
    a7de:	f06f 0415 	mvn.w	r4, #21
    a7e2:	e7ab      	b.n	a73c <usb_dc_ep_write+0x50>
    a7e4:	20003b64 	.word	0x20003b64
    a7e8:	20003b78 	.word	0x20003b78
    a7ec:	0bad0000 	.word	0x0bad0000
    a7f0:	00018f84 	.word	0x00018f84
    a7f4:	00018fcc 	.word	0x00018fcc
    a7f8:	0001b370 	.word	0x0001b370

0000a7fc <usb_dc_ep_read_wait>:

int usb_dc_ep_read_wait(u8_t ep, u8_t *data, u32_t max_data_len,
			u32_t *read_bytes)
{
    a7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a800:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
    a802:	4b1d      	ldr	r3, [pc, #116]	; (a878 <usb_dc_ep_read_wait+0x7c>)
{
    a804:	4690      	mov	r8, r2
	struct nrf_usbd_ep_ctx *ep_ctx;
	struct nrf_usbd_ctx *ctx = get_usbd_ctx();
	u32_t bytes_to_copy;

	if (!dev_attached() || !dev_ready()) {
    a806:	791a      	ldrb	r2, [r3, #4]
{
    a808:	460f      	mov	r7, r1
	if (!dev_attached() || !dev_ready()) {
    a80a:	b372      	cbz	r2, a86a <usb_dc_ep_read_wait+0x6e>
    a80c:	795b      	ldrb	r3, [r3, #5]
    a80e:	b363      	cbz	r3, a86a <usb_dc_ep_read_wait+0x6e>
		return -ENODEV;
	}

	if (NRF_USBD_EPIN_CHECK(ep)) {
    a810:	0603      	lsls	r3, r0, #24
    a812:	d42d      	bmi.n	a870 <usb_dc_ep_read_wait+0x74>
		return -EINVAL;
	}

	if (!data && max_data_len) {
    a814:	b911      	cbnz	r1, a81c <usb_dc_ep_read_wait+0x20>
    a816:	f1b8 0f00 	cmp.w	r8, #0
    a81a:	d129      	bne.n	a870 <usb_dc_ep_read_wait+0x74>
		return -EINVAL;
	}

	ep_ctx = endpoint_ctx(ep);
    a81c:	f7ff f844 	bl	98a8 <endpoint_ctx>
	if (!ep_ctx) {
    a820:	4604      	mov	r4, r0
    a822:	b328      	cbz	r0, a870 <usb_dc_ep_read_wait+0x74>
		return -EINVAL;
	}

	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    a824:	4815      	ldr	r0, [pc, #84]	; (a87c <usb_dc_ep_read_wait+0x80>)
    a826:	f00a fb4d 	bl	14ec4 <k_mutex_lock.constprop.11>

	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    a82a:	68e3      	ldr	r3, [r4, #12]
    a82c:	4543      	cmp	r3, r8
    a82e:	461e      	mov	r6, r3
    a830:	bf28      	it	cs
    a832:	4646      	movcs	r6, r8

	if (!data && !max_data_len) {
    a834:	b957      	cbnz	r7, a84c <usb_dc_ep_read_wait+0x50>
    a836:	f1b8 0f00 	cmp.w	r8, #0
    a83a:	d107      	bne.n	a84c <usb_dc_ep_read_wait+0x50>
		if (read_bytes) {
    a83c:	b105      	cbz	r5, a840 <usb_dc_ep_read_wait+0x44>
			*read_bytes = ep_ctx->buf.len;
    a83e:	602b      	str	r3, [r5, #0]
		}
		k_mutex_unlock(&ctx->drv_lock);
    a840:	480e      	ldr	r0, [pc, #56]	; (a87c <usb_dc_ep_read_wait+0x80>)
    a842:	f00a fb26 	bl	14e92 <k_mutex_unlock>
		return 0;
    a846:	2000      	movs	r0, #0
		*read_bytes = bytes_to_copy;
	}

	k_mutex_unlock(&ctx->drv_lock);
	return 0;
}
    a848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a84c:	4632      	mov	r2, r6
    a84e:	69e1      	ldr	r1, [r4, #28]
    a850:	4638      	mov	r0, r7
    a852:	f7f7 fd93 	bl	237c <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    a856:	69e3      	ldr	r3, [r4, #28]
    a858:	4433      	add	r3, r6
    a85a:	61e3      	str	r3, [r4, #28]
	ep_ctx->buf.len -= bytes_to_copy;
    a85c:	68e3      	ldr	r3, [r4, #12]
    a85e:	1b9b      	subs	r3, r3, r6
    a860:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    a862:	2d00      	cmp	r5, #0
    a864:	d0ec      	beq.n	a840 <usb_dc_ep_read_wait+0x44>
		*read_bytes = bytes_to_copy;
    a866:	602e      	str	r6, [r5, #0]
    a868:	e7ea      	b.n	a840 <usb_dc_ep_read_wait+0x44>
		return -ENODEV;
    a86a:	f06f 0012 	mvn.w	r0, #18
    a86e:	e7eb      	b.n	a848 <usb_dc_ep_read_wait+0x4c>
		return -EINVAL;
    a870:	f06f 0015 	mvn.w	r0, #21
    a874:	e7e8      	b.n	a848 <usb_dc_ep_read_wait+0x4c>
    a876:	bf00      	nop
    a878:	20003b64 	.word	0x20003b64
    a87c:	20003b78 	.word	0x20003b78

0000a880 <usb_dc_ep_read_continue>:

int usb_dc_ep_read_continue(u8_t ep)
{
    a880:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    a882:	4d19      	ldr	r5, [pc, #100]	; (a8e8 <usb_dc_ep_read_continue+0x68>)
	struct nrf_usbd_ep_ctx *ep_ctx;
	struct nrf_usbd_ctx *ctx = get_usbd_ctx();

	if (!dev_attached() || !dev_ready()) {
    a884:	792a      	ldrb	r2, [r5, #4]
{
    a886:	4603      	mov	r3, r0
	if (!dev_attached() || !dev_ready()) {
    a888:	b322      	cbz	r2, a8d4 <usb_dc_ep_read_continue+0x54>
    a88a:	796a      	ldrb	r2, [r5, #5]
    a88c:	b312      	cbz	r2, a8d4 <usb_dc_ep_read_continue+0x54>
		return -ENODEV;
	}

	if (NRF_USBD_EPIN_CHECK(ep)) {
    a88e:	061b      	lsls	r3, r3, #24
    a890:	d423      	bmi.n	a8da <usb_dc_ep_read_continue+0x5a>
		return -EINVAL;
	}

	ep_ctx = endpoint_ctx(ep);
    a892:	f7ff f809 	bl	98a8 <endpoint_ctx>
	if (!ep_ctx) {
    a896:	4604      	mov	r4, r0
    a898:	b1f8      	cbz	r0, a8da <usb_dc_ep_read_continue+0x5a>
		return -EINVAL;
	}

	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    a89a:	f105 0014 	add.w	r0, r5, #20
    a89e:	f00a fb11 	bl	14ec4 <k_mutex_lock.constprop.11>
	if (!ep_ctx->buf.len) {
    a8a2:	68e3      	ldr	r3, [r4, #12]
    a8a4:	b98b      	cbnz	r3, a8ca <usb_dc_ep_read_continue+0x4a>
		ep_ctx->buf.curr = ep_ctx->buf.data;
		ep_ctx->read_complete = true;
    a8a6:	2501      	movs	r5, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
    a8a8:	69a3      	ldr	r3, [r4, #24]
		ep_ctx->read_complete = true;
    a8aa:	f884 5020 	strb.w	r5, [r4, #32]
		ep_ctx->buf.curr = ep_ctx->buf.data;
    a8ae:	61e3      	str	r3, [r4, #28]

		if (ep_ctx->read_pending) {
    a8b0:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    a8b4:	b14b      	cbz	r3, a8ca <usb_dc_ep_read_continue+0x4a>
			struct usbd_event *ev = usbd_evt_alloc();
    a8b6:	f7ff f849 	bl	994c <usbd_evt_alloc>

			if (!ev) {
    a8ba:	b188      	cbz	r0, a8e0 <usb_dc_ep_read_continue+0x60>
				return -ENOMEM;
			}

			ev->evt_type = USBD_EVT_EP;
    a8bc:	7505      	strb	r5, [r0, #20]
			ev->evt.ep_evt.ep = ep_ctx;
    a8be:	60c4      	str	r4, [r0, #12]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    a8c0:	7405      	strb	r5, [r0, #16]
			usbd_evt_put(ev);
    a8c2:	f7ff f811 	bl	98e8 <usbd_evt_put>
			usbd_work_schedule();
    a8c6:	f7ff f829 	bl	991c <usbd_work_schedule>
		}
	}
	k_mutex_unlock(&ctx->drv_lock);
    a8ca:	4808      	ldr	r0, [pc, #32]	; (a8ec <usb_dc_ep_read_continue+0x6c>)
    a8cc:	f00a fae1 	bl	14e92 <k_mutex_unlock>

	return 0;
    a8d0:	2000      	movs	r0, #0
}
    a8d2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    a8d4:	f06f 0012 	mvn.w	r0, #18
    a8d8:	e7fb      	b.n	a8d2 <usb_dc_ep_read_continue+0x52>
		return -EINVAL;
    a8da:	f06f 0015 	mvn.w	r0, #21
    a8de:	e7f8      	b.n	a8d2 <usb_dc_ep_read_continue+0x52>
				return -ENOMEM;
    a8e0:	f06f 000b 	mvn.w	r0, #11
    a8e4:	e7f5      	b.n	a8d2 <usb_dc_ep_read_continue+0x52>
    a8e6:	bf00      	nop
    a8e8:	20003b64 	.word	0x20003b64
    a8ec:	20003b78 	.word	0x20003b78

0000a8f0 <usb_dc_ep_set_callback>:
	return get_usbd_ctx()->attached;
    a8f0:	4b08      	ldr	r3, [pc, #32]	; (a914 <usb_dc_ep_set_callback+0x24>)

int usb_dc_ep_set_callback(const u8_t ep, const usb_dc_ep_callback cb)
{
	struct nrf_usbd_ep_ctx *ep_ctx;

	if (!dev_attached()) {
    a8f2:	791b      	ldrb	r3, [r3, #4]
{
    a8f4:	b510      	push	{r4, lr}
    a8f6:	460c      	mov	r4, r1
	if (!dev_attached()) {
    a8f8:	b12b      	cbz	r3, a906 <usb_dc_ep_set_callback+0x16>
		return -ENODEV;
	}

	ep_ctx = endpoint_ctx(ep);
    a8fa:	f7fe ffd5 	bl	98a8 <endpoint_ctx>
	if (!ep_ctx) {
    a8fe:	b128      	cbz	r0, a90c <usb_dc_ep_set_callback+0x1c>
		return -EINVAL;
	}

	ep_ctx->cfg.cb = cb;
    a900:	6004      	str	r4, [r0, #0]

	return 0;
    a902:	2000      	movs	r0, #0
}
    a904:	bd10      	pop	{r4, pc}
		return -ENODEV;
    a906:	f06f 0012 	mvn.w	r0, #18
    a90a:	e7fb      	b.n	a904 <usb_dc_ep_set_callback+0x14>
		return -EINVAL;
    a90c:	f06f 0015 	mvn.w	r0, #21
    a910:	e7f8      	b.n	a904 <usb_dc_ep_set_callback+0x14>
    a912:	bf00      	nop
    a914:	20003b64 	.word	0x20003b64

0000a918 <usb_dc_set_status_callback>:

int usb_dc_set_status_callback(const usb_dc_status_callback cb)
{
	get_usbd_ctx()->status_cb = cb;
    a918:	4b01      	ldr	r3, [pc, #4]	; (a920 <usb_dc_set_status_callback+0x8>)
    a91a:	6018      	str	r0, [r3, #0]
	return 0;
}
    a91c:	2000      	movs	r0, #0
    a91e:	4770      	bx	lr
    a920:	20003b64 	.word	0x20003b64

0000a924 <usb_dc_ep_mps>:

int usb_dc_ep_mps(const u8_t ep)
{
    a924:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    a926:	4b07      	ldr	r3, [pc, #28]	; (a944 <usb_dc_ep_mps+0x20>)
	struct nrf_usbd_ep_ctx *ep_ctx;

	if (!dev_attached()) {
    a928:	791b      	ldrb	r3, [r3, #4]
    a92a:	b123      	cbz	r3, a936 <usb_dc_ep_mps+0x12>
		return -ENODEV;
	}

	ep_ctx = endpoint_ctx(ep);
    a92c:	f7fe ffbc 	bl	98a8 <endpoint_ctx>
	if (!ep_ctx) {
    a930:	b120      	cbz	r0, a93c <usb_dc_ep_mps+0x18>
		return -EINVAL;
	}

	return ep_ctx->cfg.max_sz;
    a932:	6840      	ldr	r0, [r0, #4]
}
    a934:	bd08      	pop	{r3, pc}
		return -ENODEV;
    a936:	f06f 0012 	mvn.w	r0, #18
    a93a:	e7fb      	b.n	a934 <usb_dc_ep_mps+0x10>
		return -EINVAL;
    a93c:	f06f 0015 	mvn.w	r0, #21
    a940:	e7f8      	b.n	a934 <usb_dc_ep_mps+0x10>
    a942:	bf00      	nop
    a944:	20003b64 	.word	0x20003b64

0000a948 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    a948:	4b10      	ldr	r3, [pc, #64]	; (a98c <rtc1_nrf_isr+0x44>)
    a94a:	2200      	movs	r2, #0
{
    a94c:	b410      	push	{r4}
	RTC->EVENTS_COMPARE[0] = 0;
    a94e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    a952:	f04f 0220 	mov.w	r2, #32
    a956:	f3ef 8411 	mrs	r4, BASEPRI
    a95a:	f382 8811 	msr	BASEPRI, r2
    a95e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    a962:	4a0b      	ldr	r2, [pc, #44]	; (a990 <rtc1_nrf_isr+0x48>)
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
    a964:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    a968:	6811      	ldr	r1, [r2, #0]
    a96a:	f240 1347 	movw	r3, #327	; 0x147
	return (a - b) & COUNTER_MAX;
    a96e:	1a40      	subs	r0, r0, r1
    a970:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    a974:	fbb0 f0f3 	udiv	r0, r0, r3

	last_count += dticks * CYC_PER_TICK;
    a978:	fb03 1300 	mla	r3, r3, r0, r1
    a97c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    a97e:	f384 8811 	msr	BASEPRI, r4
    a982:	f3bf 8f6f 	isb	sy
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
}
    a986:	bc10      	pop	{r4}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    a988:	f005 bfe0 	b.w	1094c <z_clock_announce>
    a98c:	40011000 	.word	0x40011000
    a990:	20003e18 	.word	0x20003e18

0000a994 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
    a994:	e92d 4177 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r8, lr}
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
    a998:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
    a99c:	2b00      	cmp	r3, #0
    a99e:	d13f      	bne.n	aa20 <z_clock_driver_init+0x8c>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
    a9a0:	f3ef 8314 	mrs	r3, CONTROL
    a9a4:	07db      	lsls	r3, r3, #31
    a9a6:	d53b      	bpl.n	aa20 <z_clock_driver_init+0x8c>
	register u32_t ret __asm__("r0") = arg1;
    a9a8:	4821      	ldr	r0, [pc, #132]	; (aa30 <z_clock_driver_init+0x9c>)
	register u32_t r6 __asm__("r6") = call_id;
    a9aa:	2617      	movs	r6, #23
	__asm__ volatile("svc %[svid]\n"
    a9ac:	df03      	svc	3
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_NORDIC_NRF_CLOCK_0_LABEL "_32K");
	if (!clock) {
    a9ae:	2800      	cmp	r0, #0
    a9b0:	d03a      	beq.n	aa28 <z_clock_driver_init+0x94>
	return api->on(dev, sys);
    a9b2:	6843      	ldr	r3, [r0, #4]
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    a9b4:	4d1f      	ldr	r5, [pc, #124]	; (aa34 <z_clock_driver_init+0xa0>)
    a9b6:	681b      	ldr	r3, [r3, #0]
    a9b8:	2101      	movs	r1, #1
    a9ba:	4798      	blx	r3
    a9bc:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
    a9be:	f240 1347 	movw	r3, #327	; 0x147
    p_reg->PRESCALER = val;
    a9c2:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    a9c6:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

__STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    a9ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    a9ce:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
    p_reg->INTENSET = mask;
    a9d2:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    a9d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a9da:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a9de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    a9e2:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    a9e4:	681b      	ldr	r3, [r3, #0]
    a9e6:	9301      	str	r3, [sp, #4]
    (void)dummy;
    a9e8:	9b01      	ldr	r3, [sp, #4]
    a9ea:	4b13      	ldr	r3, [pc, #76]	; (aa38 <z_clock_driver_init+0xa4>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    a9ec:	2101      	movs	r1, #1
    a9ee:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    a9f2:	2011      	movs	r0, #17
    a9f4:	4622      	mov	r2, r4
    a9f6:	f000 faff 	bl	aff8 <z_irq_priority_set>
	irq_enable(RTC1_IRQn);
    a9fa:	2011      	movs	r0, #17
    a9fc:	f000 faca 	bl	af94 <z_arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    aa00:	4a0e      	ldr	r2, [pc, #56]	; (aa3c <z_clock_driver_init+0xa8>)
    aa02:	2301      	movs	r3, #1
    aa04:	6013      	str	r3, [r2, #0]
    aa06:	602b      	str	r3, [r5, #0]
     return p_reg->COUNTER;
    aa08:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
    aa0c:	f203 1347 	addw	r3, r3, #327	; 0x147
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    aa10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    aa14:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	}

	return 0;
    aa18:	4620      	mov	r0, r4
}
    aa1a:	b003      	add	sp, #12
    aa1c:	e8bd 8170 	ldmia.w	sp!, {r4, r5, r6, r8, pc}
    aa20:	4803      	ldr	r0, [pc, #12]	; (aa30 <z_clock_driver_init+0x9c>)
    aa22:	f004 fb49 	bl	f0b8 <z_impl_device_get_binding>
    aa26:	e7c2      	b.n	a9ae <z_clock_driver_init+0x1a>
		return -1;
    aa28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    aa2c:	e7f5      	b.n	aa1a <z_clock_driver_init+0x86>
    aa2e:	bf00      	nop
    aa30:	0001b207 	.word	0x0001b207
    aa34:	40011000 	.word	0x40011000
    aa38:	e000e100 	.word	0xe000e100
    aa3c:	40011008 	.word	0x40011008

0000aa40 <z_clock_set_timeout>:
void z_clock_set_timeout(s32_t ticks, bool idle)
{
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    aa40:	f64c 0269 	movw	r2, #51305	; 0xc869
{
    aa44:	b570      	push	{r4, r5, r6, lr}
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    aa46:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    aa4a:	bf08      	it	eq
    aa4c:	4610      	moveq	r0, r2
	__asm__ volatile(
    aa4e:	f04f 0320 	mov.w	r3, #32
    aa52:	f3ef 8411 	mrs	r4, BASEPRI
    aa56:	f383 8811 	msr	BASEPRI, r3
    aa5a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, t = counter();

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + counter_sub(t, last_count);
    aa5e:	4d14      	ldr	r5, [pc, #80]	; (aab0 <z_clock_set_timeout+0x70>)
     return p_reg->COUNTER;
    aa60:	4914      	ldr	r1, [pc, #80]	; (aab4 <z_clock_set_timeout+0x74>)
    aa62:	682e      	ldr	r6, [r5, #0]
    aa64:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    aa68:	3801      	subs	r0, #1
    aa6a:	4290      	cmp	r0, r2
    aa6c:	bfa8      	it	ge
    aa6e:	4610      	movge	r0, r2
	return (a - b) & COUNTER_MAX;
    aa70:	1b9a      	subs	r2, r3, r6
    aa72:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	cyc = ticks * CYC_PER_TICK + counter_sub(t, last_count);
    aa76:	f240 1547 	movw	r5, #327	; 0x147
    aa7a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	cyc += (CYC_PER_TICK - 1);
    aa7e:	f502 72a3 	add.w	r2, r2, #326	; 0x146
    aa82:	fb05 2000 	mla	r0, r5, r0, r2
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
    aa86:	fbb0 f0f5 	udiv	r0, r0, r5
	cyc += last_count;
    aa8a:	fb05 6000 	mla	r0, r5, r0, r6
	return (a - b) & COUNTER_MAX;
    aa8e:	1ac3      	subs	r3, r0, r3

	if (counter_sub(cyc, t) < MIN_DELAY) {
    aa90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    aa94:	f023 031f 	bic.w	r3, r3, #31
    aa98:	b903      	cbnz	r3, aa9c <z_clock_set_timeout+0x5c>
		cyc += CYC_PER_TICK;
    aa9a:	4428      	add	r0, r5
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    aa9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    aaa0:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
	__asm__ volatile(
    aaa4:	f384 8811 	msr	BASEPRI, r4
    aaa8:	f3bf 8f6f 	isb	sy
	}

	set_comparator(cyc);
	k_spin_unlock(&lock, key);
#endif
}
    aaac:	bd70      	pop	{r4, r5, r6, pc}
    aaae:	bf00      	nop
    aab0:	20003e18 	.word	0x20003e18
    aab4:	40011000 	.word	0x40011000

0000aab8 <z_clock_elapsed>:
	__asm__ volatile(
    aab8:	f04f 0220 	mov.w	r2, #32
    aabc:	f3ef 8311 	mrs	r3, BASEPRI
    aac0:	f382 8811 	msr	BASEPRI, r2
    aac4:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    aac8:	4a08      	ldr	r2, [pc, #32]	; (aaec <z_clock_elapsed+0x34>)
    aaca:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    aace:	4a08      	ldr	r2, [pc, #32]	; (aaf0 <z_clock_elapsed+0x38>)
	return (a - b) & COUNTER_MAX;
    aad0:	6812      	ldr	r2, [r2, #0]
    aad2:	1a80      	subs	r0, r0, r2
    aad4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    aad8:	f240 1247 	movw	r2, #327	; 0x147
    aadc:	fbb0 f0f2 	udiv	r0, r0, r2
	__asm__ volatile(
    aae0:	f383 8811 	msr	BASEPRI, r3
    aae4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    aae8:	4770      	bx	lr
    aaea:	bf00      	nop
    aaec:	40011000 	.word	0x40011000
    aaf0:	20003e18 	.word	0x20003e18

0000aaf4 <z_timer_cycle_get_32>:
	__asm__ volatile(
    aaf4:	f04f 0320 	mov.w	r3, #32
    aaf8:	f3ef 8211 	mrs	r2, BASEPRI
    aafc:	f383 8811 	msr	BASEPRI, r3
    ab00:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    ab04:	4906      	ldr	r1, [pc, #24]	; (ab20 <z_timer_cycle_get_32+0x2c>)
    ab06:	4b07      	ldr	r3, [pc, #28]	; (ab24 <z_timer_cycle_get_32+0x30>)
    ab08:	6808      	ldr	r0, [r1, #0]
    ab0a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    ab0e:	f382 8811 	msr	BASEPRI, r2
    ab12:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    ab16:	1a1b      	subs	r3, r3, r0
    ab18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    ab1c:	4418      	add	r0, r3
    ab1e:	4770      	bx	lr
    ab20:	20003e18 	.word	0x20003e18
    ab24:	40011000 	.word	0x40011000

0000ab28 <_IntExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    ab28:	4804      	ldr	r0, [pc, #16]	; (ab3c <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    ab2a:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    ab2c:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    ab2e:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    ab30:	d003      	beq.n	ab3a <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    ab32:	4903      	ldr	r1, [pc, #12]	; (ab40 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    ab34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    ab38:	600a      	str	r2, [r1, #0]

0000ab3a <_EXIT_EXC>:
    mov lr, r1
#else
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */
    bx lr
    ab3a:	4770      	bx	lr
    ldr r0, =_kernel
    ab3c:	200057f0 	.word	0x200057f0
    ldr r1, =_SCS_ICSR
    ab40:	e000ed04 	.word	0xe000ed04

0000ab44 <z_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ab44:	4804      	ldr	r0, [pc, #16]	; (ab58 <z_IntLibInit+0x14>)
 * @return N/A
 */

void z_IntLibInit(void)
{
	int irq = 0;
    ab46:	2300      	movs	r3, #0
    ab48:	2120      	movs	r1, #32
    ab4a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    ab4c:	3301      	adds	r3, #1
    ab4e:	2b30      	cmp	r3, #48	; 0x30
    ab50:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    ab54:	d1f9      	bne.n	ab4a <z_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    ab56:	4770      	bx	lr
    ab58:	e000e100 	.word	0xe000e100

0000ab5c <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    ab5c:	4a09      	ldr	r2, [pc, #36]	; (ab84 <__swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    ab5e:	490a      	ldr	r1, [pc, #40]	; (ab88 <__swap+0x2c>)
	_current->arch.basepri = key;
    ab60:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    ab62:	6809      	ldr	r1, [r1, #0]
    ab64:	6799      	str	r1, [r3, #120]	; 0x78

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    ab66:	4909      	ldr	r1, [pc, #36]	; (ab8c <__swap+0x30>)
	_current->arch.basepri = key;
    ab68:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    ab6a:	684b      	ldr	r3, [r1, #4]
    ab6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    ab70:	604b      	str	r3, [r1, #4]
    ab72:	2300      	movs	r3, #0
    ab74:	f383 8811 	msr	BASEPRI, r3
    ab78:	f3bf 8f6f 	isb	sy
	irq_unlock(0);

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    ab7c:	6893      	ldr	r3, [r2, #8]
}
    ab7e:	6f98      	ldr	r0, [r3, #120]	; 0x78
    ab80:	4770      	bx	lr
    ab82:	bf00      	nop
    ab84:	200057f0 	.word	0x200057f0
    ab88:	000193c4 	.word	0x000193c4
    ab8c:	e000ed00 	.word	0xe000ed00

0000ab90 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    ab90:	2020      	movs	r0, #32
    msr BASEPRI, r0
    ab92:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    ab96:	f3bf 8f6f 	isb	sy
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    ab9a:	4916      	ldr	r1, [pc, #88]	; (abf4 <__pendsv+0x64>)
    ldr r2, [r1, #_kernel_offset_to_current]
    ab9c:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    ab9e:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    aba2:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    aba4:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    aba8:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    abac:	4f12      	ldr	r7, [pc, #72]	; (abf8 <__pendsv+0x68>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    abae:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    abb2:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    abb4:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    abb6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    abb8:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs.n r3, #0
    abba:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    abbc:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    abbe:	f380 8811 	msr	BASEPRI, r0
    vldmia r0, {s16-s31}
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    abc2:	b504      	push	{r2, lr}
    ldr r0, =_kernel
    abc4:	480b      	ldr	r0, [pc, #44]	; (abf4 <__pendsv+0x64>)
    ldr r0, [r0, #_kernel_offset_to_current]
    abc6:	6880      	ldr	r0, [r0, #8]
    bl z_arch_configure_dynamic_mpu_regions
    abc8:	f000 fc58 	bl	b47c <z_arch_configure_dynamic_mpu_regions>
    pop {r2,lr}
    abcc:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
#endif

#ifdef CONFIG_USERSPACE
    /* restore mode */
    ldr r0, [r2, #_thread_offset_to_mode]
    abd0:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
    mrs r3, CONTROL
    abd2:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #1
    abd6:	f023 0301 	bic.w	r3, r3, #1
    orr r3, r0
    abda:	ea43 0300 	orr.w	r3, r3, r0
    msr CONTROL, r3
    abde:	f383 8814 	msr	CONTROL, r3

    /* ISB is not strictly necessary here (stack pointer is not being
     * touched), but it's recommended to avoid executing pre-fetched
     * instructions with the previous privilege.
     */
    isb
    abe2:	f3bf 8f6f 	isb	sy

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    abe6:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    abea:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    /* clear stack pointer limit before setting the PSP */
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

    msr PSP, ip
    abee:	f38c 8809 	msr	PSP, ip
    pop {r0, lr}
#endif
#endif /* CONFIG_TRACING */

    /* exc return */
    bx lr
    abf2:	4770      	bx	lr
    ldr r1, =_kernel
    abf4:	200057f0 	.word	0x200057f0
    ldr v4, =_SCS_ICSR
    abf8:	e000ed04 	.word	0xe000ed04

0000abfc <__svc>:
 * - System Calls (User mode)
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    abfc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    ac00:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    ac02:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    ac06:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    ac0a:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read encoding */
    ldrh r1, [r1, #-2]
    ac0c:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call (if user mode supported)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    ac10:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
#if CONFIG_USERSPACE
    mrs r2, CONTROL
    ac14:	f3ef 8214 	mrs	r2, CONTROL

    cmp r1, #3
    ac18:	2903      	cmp	r1, #3
    beq _do_syscall
    ac1a:	d008      	beq.n	ac2e <_do_syscall>

    /*_do_syscall
     * check that we are privileged before invoking other SVCs
     * oops if we are unprivileged
     */
    tst r2, #0x1
    ac1c:	f012 0f01 	tst.w	r2, #1
    bne _oops
    ac20:	d101      	bne.n	ac26 <_oops>

#endif

    cmp r1, #2
    ac22:	2902      	cmp	r1, #2
    beq _oops
    ac24:	d0ff      	beq.n	ac26 <_oops>

0000ac26 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {r0, lr}
    ac26:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    ac28:	f00a f979 	bl	14f1e <z_do_kernel_oops>
    pop {r0, pc}
    ac2c:	bd01      	pop	{r0, pc}

0000ac2e <_do_syscall>:
     * r5 - arg6
     * r6 - call_id
     * r8 - saved link register
     */
_do_syscall:
    ldr r8, [r0, #24]   /* grab address of PC from stack frame */
    ac2e:	f8d0 8018 	ldr.w	r8, [r0, #24]
    ldr r1, =z_arm_do_syscall
    ac32:	490d      	ldr	r1, [pc, #52]	; (ac68 <valid_syscall_id+0x24>)
    str r1, [r0, #24]   /* overwrite the PC to point to z_arm_do_syscall */
    ac34:	6181      	str	r1, [r0, #24]

    /* validate syscall limit */
    ldr ip, =K_SYSCALL_LIMIT
    ac36:	f04f 0cb6 	mov.w	ip, #182	; 0xb6
    cmp r6, ip
    ac3a:	4566      	cmp	r6, ip
    blt valid_syscall_id
    ac3c:	db02      	blt.n	ac44 <valid_syscall_id>

    /* bad syscall id.  Set arg1 to bad id and set call_id to SYSCALL_BAD */
    str r6, [r0, #0]
    ac3e:	6006      	str	r6, [r0, #0]
    ldr r6, =K_SYSCALL_BAD
    ac40:	f04f 06b5 	mov.w	r6, #181	; 0xb5

0000ac44 <valid_syscall_id>:

    /* Bad syscalls treated as valid syscalls with ID K_SYSCALL_BAD. */

valid_syscall_id:
    push {r0, r1}
    ac44:	b403      	push	{r0, r1}
    ldr r0, =_kernel
    ac46:	4809      	ldr	r0, [pc, #36]	; (ac6c <valid_syscall_id+0x28>)
    ldr r0, [r0, #_kernel_offset_to_current]
    ac48:	6880      	ldr	r0, [r0, #8]
    ldr r1, [r0, #_thread_offset_to_mode]
    ac4a:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
    bic r1, #1
    ac4c:	f021 0101 	bic.w	r1, r1, #1
    /* Store (privileged) mode in thread's mode state variable */
    str r1, [r0, #_thread_offset_to_mode]
    ac50:	67c1      	str	r1, [r0, #124]	; 0x7c
    dsb
    ac52:	f3bf 8f4f 	dsb	sy
    /* set mode to privileged, r2 still contains value from CONTROL */
    bic r2, #1
    ac56:	f022 0201 	bic.w	r2, r2, #1
    msr CONTROL, r2
    ac5a:	f382 8814 	msr	CONTROL, r2

    /* ISB is not strictly necessary here (stack pointer is not being
     * touched), but it's recommended to avoid executing pre-fetched
     * instructions with the previous privilege.
     */
    isb
    ac5e:	f3bf 8f6f 	isb	sy
    pop {r0, r1}
    ac62:	bc03      	pop	{r0, r1}

    /* return from SVC to the modified LR - z_arm_do_syscall */
    bx lr
    ac64:	4770      	bx	lr
    ac66:	0000      	.short	0x0000
    ldr r1, =z_arm_do_syscall
    ac68:	0000b331 	.word	0x0000b331
    ldr r0, =_kernel
    ac6c:	200057f0 	.word	0x200057f0

0000ac70 <MpuFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t MpuFault(NANO_ESF *esf, int fromHardFault)
{
    ac70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****\n");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    ac72:	4c2e      	ldr	r4, [pc, #184]	; (ad2c <MpuFault+0xbc>)
{
    ac74:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** MPU FAULT *****\n");
    ac76:	482e      	ldr	r0, [pc, #184]	; (ad30 <MpuFault+0xc0>)
{
    ac78:	460f      	mov	r7, r1
	PR_FAULT_INFO("***** MPU FAULT *****\n");
    ac7a:	f008 fc00 	bl	1347e <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    ac7e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    ac80:	06d0      	lsls	r0, r2, #27
    ac82:	d502      	bpl.n	ac8a <MpuFault+0x1a>
		PR_FAULT_INFO("  Stacking error (context area might be"
    ac84:	482b      	ldr	r0, [pc, #172]	; (ad34 <MpuFault+0xc4>)
    ac86:	f008 fbfa 	bl	1347e <printk>
			" not valid)\n");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    ac8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ac8c:	0719      	lsls	r1, r3, #28
    ac8e:	d502      	bpl.n	ac96 <MpuFault+0x26>
		PR_FAULT_INFO("  Unstacking error\n");
    ac90:	4829      	ldr	r0, [pc, #164]	; (ad38 <MpuFault+0xc8>)
    ac92:	f008 fbf4 	bl	1347e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    ac96:	4c25      	ldr	r4, [pc, #148]	; (ad2c <MpuFault+0xbc>)
    ac98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ac9a:	079a      	lsls	r2, r3, #30
    ac9c:	d535      	bpl.n	ad0a <MpuFault+0x9a>
		PR_FAULT_INFO("  Data Access Violation\n");
    ac9e:	4827      	ldr	r0, [pc, #156]	; (ad3c <MpuFault+0xcc>)
    aca0:	f008 fbed 	bl	1347e <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    aca4:	6b66      	ldr	r6, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    aca6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    aca8:	061b      	lsls	r3, r3, #24
    acaa:	d508      	bpl.n	acbe <MpuFault+0x4e>
			PR_EXC("  MMFAR Address: 0x%x\n", mmfar);
    acac:	4631      	mov	r1, r6
    acae:	4824      	ldr	r0, [pc, #144]	; (ad40 <MpuFault+0xd0>)
    acb0:	f008 fbe5 	bl	1347e <printk>
			if (fromHardFault) {
    acb4:	b11f      	cbz	r7, acbe <MpuFault+0x4e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    acb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    acb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    acbc:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    acbe:	4c1b      	ldr	r4, [pc, #108]	; (ad2c <MpuFault+0xbc>)
    acc0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    acc2:	07d0      	lsls	r0, r2, #31
    acc4:	d502      	bpl.n	accc <MpuFault+0x5c>
		PR_FAULT_INFO("  Instruction Access Violation\n");
    acc6:	481f      	ldr	r0, [pc, #124]	; (ad44 <MpuFault+0xd4>)
    acc8:	f008 fbd9 	bl	1347e <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    accc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    acce:	0699      	lsls	r1, r3, #26
    acd0:	d502      	bpl.n	acd8 <MpuFault+0x68>
		PR_FAULT_INFO(
    acd2:	481d      	ldr	r0, [pc, #116]	; (ad48 <MpuFault+0xd8>)
    acd4:	f008 fbd3 	bl	1347e <printk>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    acd8:	4b14      	ldr	r3, [pc, #80]	; (ad2c <MpuFault+0xbc>)
    acda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    acdc:	06d2      	lsls	r2, r2, #27
    acde:	d417      	bmi.n	ad10 <MpuFault+0xa0>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    ace0:	2000      	movs	r0, #0
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    ace2:	4a12      	ldr	r2, [pc, #72]	; (ad2c <MpuFault+0xbc>)
    ace4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    ace6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    acea:	6293      	str	r3, [r2, #40]	; 0x28
		u32_t start = (u32_t)exceptions[i].start & ~0x1;
    acec:	4b17      	ldr	r3, [pc, #92]	; (ad4c <MpuFault+0xdc>)
		if (esf->pc >= start && esf->pc < end) {
    acee:	69aa      	ldr	r2, [r5, #24]
		u32_t start = (u32_t)exceptions[i].start & ~0x1;
    acf0:	f023 0301 	bic.w	r3, r3, #1
		if (esf->pc >= start && esf->pc < end) {
    acf4:	4293      	cmp	r3, r2
    acf6:	d807      	bhi.n	ad08 <MpuFault+0x98>
		u32_t end = (u32_t)exceptions[i].end & ~0x1;
    acf8:	4b15      	ldr	r3, [pc, #84]	; (ad50 <MpuFault+0xe0>)
    acfa:	f023 0301 	bic.w	r3, r3, #1
		if (esf->pc >= start && esf->pc < end) {
    acfe:	4293      	cmp	r3, r2
			esf->pc = (u32_t)(exceptions[i].fixup);
    ad00:	bf82      	ittt	hi
    ad02:	4b14      	ldrhi	r3, [pc, #80]	; (ad54 <MpuFault+0xe4>)
    ad04:	61ab      	strhi	r3, [r5, #24]

	/* Assess whether system shall ignore/recover from this MPU fault. */
	if (MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
    ad06:	2006      	movhi	r0, #6
	}

	return reason;
}
    ad08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	u32_t mmfar = -EINVAL;
    ad0a:	f06f 0615 	mvn.w	r6, #21
    ad0e:	e7d6      	b.n	acbe <MpuFault+0x4e>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    ad10:	685b      	ldr	r3, [r3, #4]
    ad12:	051b      	lsls	r3, r3, #20
    ad14:	d5e4      	bpl.n	ace0 <MpuFault+0x70>
			u32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    ad16:	4629      	mov	r1, r5
    ad18:	4630      	mov	r0, r6
    ad1a:	f000 f9df 	bl	b0dc <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    ad1e:	2800      	cmp	r0, #0
    ad20:	d0de      	beq.n	ace0 <MpuFault+0x70>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    ad22:	f380 8809 	msr	PSP, r0
				reason = _NANO_ERR_STACK_CHK_FAIL;
    ad26:	2002      	movs	r0, #2
    ad28:	e7db      	b.n	ace2 <MpuFault+0x72>
    ad2a:	bf00      	nop
    ad2c:	e000ed00 	.word	0xe000ed00
    ad30:	0001b560 	.word	0x0001b560
    ad34:	0001b577 	.word	0x0001b577
    ad38:	0001b5ab 	.word	0x0001b5ab
    ad3c:	0001b5bf 	.word	0x0001b5bf
    ad40:	0001b5d8 	.word	0x0001b5d8
    ad44:	0001b5ef 	.word	0x0001b5ef
    ad48:	0001b60f 	.word	0x0001b60f
    ad4c:	0000b3cb 	.word	0x0000b3cb
    ad50:	0000b3cd 	.word	0x0000b3cd
    ad54:	0000b3dd 	.word	0x0000b3dd

0000ad58 <UsageFault.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t UsageFault(const NANO_ESF *esf)
    ad58:	b510      	push	{r4, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****\n");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    ad5a:	4c19      	ldr	r4, [pc, #100]	; (adc0 <UsageFault.isra.2+0x68>)
	PR_FAULT_INFO("***** USAGE FAULT *****\n");
    ad5c:	4819      	ldr	r0, [pc, #100]	; (adc4 <UsageFault.isra.2+0x6c>)
    ad5e:	f008 fb8e 	bl	1347e <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    ad62:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    ad64:	0193      	lsls	r3, r2, #6
    ad66:	d502      	bpl.n	ad6e <UsageFault.isra.2+0x16>
		PR_FAULT_INFO("  Division by zero\n");
    ad68:	4817      	ldr	r0, [pc, #92]	; (adc8 <UsageFault.isra.2+0x70>)
    ad6a:	f008 fb88 	bl	1347e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    ad6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ad70:	01dc      	lsls	r4, r3, #7
    ad72:	d502      	bpl.n	ad7a <UsageFault.isra.2+0x22>
		PR_FAULT_INFO("  Unaligned memory access\n");
    ad74:	4815      	ldr	r0, [pc, #84]	; (adcc <UsageFault.isra.2+0x74>)
    ad76:	f008 fb82 	bl	1347e <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    ad7a:	4c11      	ldr	r4, [pc, #68]	; (adc0 <UsageFault.isra.2+0x68>)
    ad7c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    ad7e:	0310      	lsls	r0, r2, #12
    ad80:	d502      	bpl.n	ad88 <UsageFault.isra.2+0x30>
		PR_FAULT_INFO("  No coprocessor instructions\n");
    ad82:	4813      	ldr	r0, [pc, #76]	; (add0 <UsageFault.isra.2+0x78>)
    ad84:	f008 fb7b 	bl	1347e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    ad88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ad8a:	0359      	lsls	r1, r3, #13
    ad8c:	d502      	bpl.n	ad94 <UsageFault.isra.2+0x3c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC\n");
    ad8e:	4811      	ldr	r0, [pc, #68]	; (add4 <UsageFault.isra.2+0x7c>)
    ad90:	f008 fb75 	bl	1347e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    ad94:	4c0a      	ldr	r4, [pc, #40]	; (adc0 <UsageFault.isra.2+0x68>)
    ad96:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    ad98:	0392      	lsls	r2, r2, #14
    ad9a:	d502      	bpl.n	ada2 <UsageFault.isra.2+0x4a>
		PR_FAULT_INFO("  Illegal use of the EPSR\n");
    ad9c:	480e      	ldr	r0, [pc, #56]	; (add8 <UsageFault.isra.2+0x80>)
    ad9e:	f008 fb6e 	bl	1347e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    ada2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ada4:	03db      	lsls	r3, r3, #15
    ada6:	d502      	bpl.n	adae <UsageFault.isra.2+0x56>
		PR_FAULT_INFO("  Attempt to execute undefined instruction\n");
    ada8:	480c      	ldr	r0, [pc, #48]	; (addc <UsageFault.isra.2+0x84>)
    adaa:	f008 fb68 	bl	1347e <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    adae:	4a04      	ldr	r2, [pc, #16]	; (adc0 <UsageFault.isra.2+0x68>)
    adb0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    adb2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    adb6:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    adba:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    adbc:	2000      	movs	r0, #0
    adbe:	bd10      	pop	{r4, pc}
    adc0:	e000ed00 	.word	0xe000ed00
    adc4:	0001b63f 	.word	0x0001b63f
    adc8:	0001b658 	.word	0x0001b658
    adcc:	0001b66c 	.word	0x0001b66c
    add0:	0001b687 	.word	0x0001b687
    add4:	0001b6a6 	.word	0x0001b6a6
    add8:	0001b6cc 	.word	0x0001b6cc
    addc:	0001b6e7 	.word	0x0001b6e7

0000ade0 <BusFault>:
{
    ade0:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    ade2:	4c26      	ldr	r4, [pc, #152]	; (ae7c <BusFault+0x9c>)
{
    ade4:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** BUS FAULT *****\n");
    ade6:	4826      	ldr	r0, [pc, #152]	; (ae80 <BusFault+0xa0>)
{
    ade8:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****\n");
    adea:	f008 fb48 	bl	1347e <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    adee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    adf0:	04d1      	lsls	r1, r2, #19
    adf2:	d502      	bpl.n	adfa <BusFault+0x1a>
		PR_FAULT_INFO("  Stacking error\n");
    adf4:	4823      	ldr	r0, [pc, #140]	; (ae84 <BusFault+0xa4>)
    adf6:	f008 fb42 	bl	1347e <printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    adfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    adfc:	051a      	lsls	r2, r3, #20
    adfe:	d502      	bpl.n	ae06 <BusFault+0x26>
		PR_FAULT_INFO("  Unstacking error\n");
    ae00:	4821      	ldr	r0, [pc, #132]	; (ae88 <BusFault+0xa8>)
    ae02:	f008 fb3c 	bl	1347e <printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    ae06:	4c1d      	ldr	r4, [pc, #116]	; (ae7c <BusFault+0x9c>)
    ae08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ae0a:	059b      	lsls	r3, r3, #22
    ae0c:	d50e      	bpl.n	ae2c <BusFault+0x4c>
		PR_FAULT_INFO("  Precise data bus error\n");
    ae0e:	481f      	ldr	r0, [pc, #124]	; (ae8c <BusFault+0xac>)
    ae10:	f008 fb35 	bl	1347e <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    ae14:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    ae16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ae18:	0418      	lsls	r0, r3, #16
    ae1a:	d507      	bpl.n	ae2c <BusFault+0x4c>
			PR_EXC("  BFAR Address: 0x%x\n", bfar);
    ae1c:	481c      	ldr	r0, [pc, #112]	; (ae90 <BusFault+0xb0>)
    ae1e:	f008 fb2e 	bl	1347e <printk>
			if (fromHardFault) {
    ae22:	b11e      	cbz	r6, ae2c <BusFault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    ae24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ae26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    ae2a:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    ae2c:	4c13      	ldr	r4, [pc, #76]	; (ae7c <BusFault+0x9c>)
    ae2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ae30:	0559      	lsls	r1, r3, #21
    ae32:	d502      	bpl.n	ae3a <BusFault+0x5a>
		PR_FAULT_INFO("  Imprecise data bus error\n");
    ae34:	4817      	ldr	r0, [pc, #92]	; (ae94 <BusFault+0xb4>)
    ae36:	f008 fb22 	bl	1347e <printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    ae3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ae3c:	05da      	lsls	r2, r3, #23
    ae3e:	d516      	bpl.n	ae6e <BusFault+0x8e>
		PR_FAULT_INFO("  Instruction bus error\n");
    ae40:	4815      	ldr	r0, [pc, #84]	; (ae98 <BusFault+0xb8>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    ae42:	f008 fb1c 	bl	1347e <printk>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    ae46:	4a0d      	ldr	r2, [pc, #52]	; (ae7c <BusFault+0x9c>)
    ae48:	6a93      	ldr	r3, [r2, #40]	; 0x28
    ae4a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    ae4e:	6293      	str	r3, [r2, #40]	; 0x28
		u32_t start = (u32_t)exceptions[i].start & ~0x1;
    ae50:	4b12      	ldr	r3, [pc, #72]	; (ae9c <BusFault+0xbc>)
		if (esf->pc >= start && esf->pc < end) {
    ae52:	69aa      	ldr	r2, [r5, #24]
		u32_t start = (u32_t)exceptions[i].start & ~0x1;
    ae54:	f023 0301 	bic.w	r3, r3, #1
		if (esf->pc >= start && esf->pc < end) {
    ae58:	4293      	cmp	r3, r2
    ae5a:	d80d      	bhi.n	ae78 <BusFault+0x98>
		u32_t end = (u32_t)exceptions[i].end & ~0x1;
    ae5c:	4b10      	ldr	r3, [pc, #64]	; (aea0 <BusFault+0xc0>)
    ae5e:	f023 0301 	bic.w	r3, r3, #1
		if (esf->pc >= start && esf->pc < end) {
    ae62:	4293      	cmp	r3, r2
    ae64:	d908      	bls.n	ae78 <BusFault+0x98>
			esf->pc = (u32_t)(exceptions[i].fixup);
    ae66:	4b0f      	ldr	r3, [pc, #60]	; (aea4 <BusFault+0xc4>)
    ae68:	61ab      	str	r3, [r5, #24]
		reason = _NANO_ERR_RECOVERABLE;
    ae6a:	2006      	movs	r0, #6
}
    ae6c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    ae6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ae70:	049b      	lsls	r3, r3, #18
    ae72:	d5e8      	bpl.n	ae46 <BusFault+0x66>
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    ae74:	480c      	ldr	r0, [pc, #48]	; (aea8 <BusFault+0xc8>)
    ae76:	e7e4      	b.n	ae42 <BusFault+0x62>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    ae78:	2000      	movs	r0, #0
    ae7a:	e7f7      	b.n	ae6c <BusFault+0x8c>
    ae7c:	e000ed00 	.word	0xe000ed00
    ae80:	0001b4d2 	.word	0x0001b4d2
    ae84:	0001b4e9 	.word	0x0001b4e9
    ae88:	0001b5ab 	.word	0x0001b5ab
    ae8c:	0001b4fb 	.word	0x0001b4fb
    ae90:	0001b515 	.word	0x0001b515
    ae94:	0001b52b 	.word	0x0001b52b
    ae98:	0001b547 	.word	0x0001b547
    ae9c:	0000b3cb 	.word	0x0000b3cb
    aea0:	0000b3cd 	.word	0x0000b3cd
    aea4:	0000b3dd 	.word	0x0000b3dd
    aea8:	0001b60f 	.word	0x0001b60f

0000aeac <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void _Fault(NANO_ESF *esf, u32_t exc_return)
{
    aeac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    aeae:	4e2a      	ldr	r6, [pc, #168]	; (af58 <_Fault+0xac>)
    aeb0:	6877      	ldr	r7, [r6, #4]
    aeb2:	f3c7 0408 	ubfx	r4, r7, #0, #9
{
    aeb6:	4605      	mov	r5, r0
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_LOG_PANIC, log_panic)
    aeb8:	f7fb ffc0 	bl	6e3c <z_impl_log_panic>
	switch (fault) {
    aebc:	1ee3      	subs	r3, r4, #3
    aebe:	2b09      	cmp	r3, #9
    aec0:	d83d      	bhi.n	af3e <_Fault+0x92>
    aec2:	e8df f003 	tbb	[pc, r3]
    aec6:	3605      	.short	0x3605
    aec8:	3c3c2b38 	.word	0x3c3c2b38
    aecc:	3a3c3c3c 	.word	0x3a3c3c3c
	PR_FAULT_INFO("***** HARD FAULT *****\n");
    aed0:	4822      	ldr	r0, [pc, #136]	; (af5c <_Fault+0xb0>)
    aed2:	f008 fad4 	bl	1347e <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    aed6:	6af4      	ldr	r4, [r6, #44]	; 0x2c
    aed8:	f014 0402 	ands.w	r4, r4, #2
    aedc:	d004      	beq.n	aee8 <_Fault+0x3c>
		PR_EXC("  Bus fault on vector table read\n");
    aede:	4820      	ldr	r0, [pc, #128]	; (af60 <_Fault+0xb4>)
	PR_FAULT_INFO(
    aee0:	f008 facd 	bl	1347e <printk>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    aee4:	2400      	movs	r4, #0
    aee6:	e01e      	b.n	af26 <_Fault+0x7a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    aee8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    aeea:	005b      	lsls	r3, r3, #1
    aeec:	d51b      	bpl.n	af26 <_Fault+0x7a>
		PR_EXC("  Fault escalation (see below)\n");
    aeee:	481d      	ldr	r0, [pc, #116]	; (af64 <_Fault+0xb8>)
    aef0:	f008 fac5 	bl	1347e <printk>
		if (SCB_MMFSR != 0) {
    aef4:	4b1c      	ldr	r3, [pc, #112]	; (af68 <_Fault+0xbc>)
    aef6:	781b      	ldrb	r3, [r3, #0]
    aef8:	b123      	cbz	r3, af04 <_Fault+0x58>
			reason = MpuFault(esf, 1);
    aefa:	2101      	movs	r1, #1
		reason = MpuFault(esf, 0);
    aefc:	4628      	mov	r0, r5
    aefe:	f7ff feb7 	bl	ac70 <MpuFault>
    af02:	e00d      	b.n	af20 <_Fault+0x74>
		} else if (SCB_BFSR != 0) {
    af04:	4b19      	ldr	r3, [pc, #100]	; (af6c <_Fault+0xc0>)
    af06:	781b      	ldrb	r3, [r3, #0]
    af08:	b123      	cbz	r3, af14 <_Fault+0x68>
			reason = BusFault(esf, 1);
    af0a:	2101      	movs	r1, #1
		reason = BusFault(esf, 0);
    af0c:	4628      	mov	r0, r5
    af0e:	f7ff ff67 	bl	ade0 <BusFault>
    af12:	e005      	b.n	af20 <_Fault+0x74>
		} else if (SCB_UFSR != 0) {
    af14:	4b16      	ldr	r3, [pc, #88]	; (af70 <_Fault+0xc4>)
    af16:	881b      	ldrh	r3, [r3, #0]
    af18:	b29b      	uxth	r3, r3
    af1a:	b123      	cbz	r3, af26 <_Fault+0x7a>
			reason = UsageFault(esf);
    af1c:	f7ff ff1c 	bl	ad58 <UsageFault.isra.2>
	(void) exc_return;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	reason = FaultHandle(esf, fault);

	if (reason == _NANO_ERR_RECOVERABLE) {
    af20:	2806      	cmp	r0, #6
			reason = UsageFault(esf);
    af22:	4604      	mov	r4, r0
	if (reason == _NANO_ERR_RECOVERABLE) {
    af24:	d017      	beq.n	af56 <_Fault+0xaa>

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_NanoFatalErrorHandler(reason, esf);
    af26:	4629      	mov	r1, r5
    af28:	4620      	mov	r0, r4
}
    af2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_NanoFatalErrorHandler(reason, esf);
    af2e:	f000 b917 	b.w	b160 <z_NanoFatalErrorHandler>
		reason = MpuFault(esf, 0);
    af32:	2100      	movs	r1, #0
    af34:	e7e2      	b.n	aefc <_Fault+0x50>
		reason = BusFault(esf, 0);
    af36:	2100      	movs	r1, #0
    af38:	e7e8      	b.n	af0c <_Fault+0x60>
	PR_FAULT_INFO(
    af3a:	480e      	ldr	r0, [pc, #56]	; (af74 <_Fault+0xc8>)
    af3c:	e7d0      	b.n	aee0 <_Fault+0x34>
	PR_FAULT_INFO("***** %s %d) *****\n",
    af3e:	4b0e      	ldr	r3, [pc, #56]	; (af78 <_Fault+0xcc>)
    af40:	490e      	ldr	r1, [pc, #56]	; (af7c <_Fault+0xd0>)
    af42:	480f      	ldr	r0, [pc, #60]	; (af80 <_Fault+0xd4>)
    af44:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    af48:	f1a4 0210 	sub.w	r2, r4, #16
    af4c:	bf18      	it	ne
    af4e:	4619      	movne	r1, r3
    af50:	f008 fa95 	bl	1347e <printk>
	if (reason == _NANO_ERR_RECOVERABLE) {
    af54:	e7c6      	b.n	aee4 <_Fault+0x38>
}
    af56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    af58:	e000ed00 	.word	0xe000ed00
    af5c:	0001b741 	.word	0x0001b741
    af60:	0001b759 	.word	0x0001b759
    af64:	0001b77b 	.word	0x0001b77b
    af68:	e000ed28 	.word	0xe000ed28
    af6c:	e000ed29 	.word	0xe000ed29
    af70:	e000ed2a 	.word	0xe000ed2a
    af74:	0001b79b 	.word	0x0001b79b
    af78:	0001b728 	.word	0x0001b728
    af7c:	0001b713 	.word	0x0001b713
    af80:	0001b7d2 	.word	0x0001b7d2

0000af84 <z_FaultInit>:
 */
void z_FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    af84:	4a02      	ldr	r2, [pc, #8]	; (af90 <z_FaultInit+0xc>)
    af86:	6953      	ldr	r3, [r2, #20]
    af88:	f043 0310 	orr.w	r3, r3, #16
    af8c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    af8e:	4770      	bx	lr
    af90:	e000ed00 	.word	0xe000ed00

0000af94 <z_arch_irq_enable>:
 *
 * @return N/A
 */
void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    af94:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    af96:	2b00      	cmp	r3, #0
    af98:	db08      	blt.n	afac <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    af9a:	2201      	movs	r2, #1
    af9c:	f000 001f 	and.w	r0, r0, #31
    afa0:	fa02 f000 	lsl.w	r0, r2, r0
    afa4:	095b      	lsrs	r3, r3, #5
    afa6:	4a02      	ldr	r2, [pc, #8]	; (afb0 <z_arch_irq_enable+0x1c>)
    afa8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    afac:	4770      	bx	lr
    afae:	bf00      	nop
    afb0:	e000e100 	.word	0xe000e100

0000afb4 <z_arch_irq_disable>:
 *
 * @return N/A
 */
void z_arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    afb4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    afb6:	2b00      	cmp	r3, #0
    afb8:	db0d      	blt.n	afd6 <z_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    afba:	2201      	movs	r2, #1
    afbc:	095b      	lsrs	r3, r3, #5
    afbe:	f000 001f 	and.w	r0, r0, #31
    afc2:	fa02 f000 	lsl.w	r0, r2, r0
    afc6:	3320      	adds	r3, #32
    afc8:	4a03      	ldr	r2, [pc, #12]	; (afd8 <z_arch_irq_disable+0x24>)
    afca:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    afce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    afd2:	f3bf 8f6f 	isb	sy
}
    afd6:	4770      	bx	lr
    afd8:	e000e100 	.word	0xe000e100

0000afdc <z_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int z_arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    afdc:	0942      	lsrs	r2, r0, #5
    afde:	4b05      	ldr	r3, [pc, #20]	; (aff4 <z_arch_irq_is_enabled+0x18>)
    afe0:	f000 001f 	and.w	r0, r0, #31
    afe4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    afe8:	2301      	movs	r3, #1
    afea:	fa03 f000 	lsl.w	r0, r3, r0
}
    afee:	4010      	ands	r0, r2
    aff0:	4770      	bx	lr
    aff2:	bf00      	nop
    aff4:	e000e100 	.word	0xe000e100

0000aff8 <z_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    aff8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    affa:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    affc:	bfa8      	it	ge
    affe:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    b002:	f101 0101 	add.w	r1, r1, #1
    b006:	ea4f 1141 	mov.w	r1, r1, lsl #5
    b00a:	bfae      	itee	ge
    b00c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b010:	f000 000f 	andlt.w	r0, r0, #15
    b014:	4b03      	ldrlt	r3, [pc, #12]	; (b024 <z_irq_priority_set+0x2c>)
    b016:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b018:	bfac      	ite	ge
    b01a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b01e:	5419      	strblt	r1, [r3, r0]
}
    b020:	4770      	bx	lr
    b022:	bf00      	nop
    b024:	e000ed14 	.word	0xe000ed14

0000b028 <z_arch_user_mode_enter>:
	void *p1, void *p2, void *p3)
{

	/* Set up privileged stack before entering user mode */
	_current->arch.priv_stack_start =
		(u32_t)z_priv_stack_find(_current->stack_obj);
    b028:	4c0b      	ldr	r4, [pc, #44]	; (b058 <z_arch_user_mode_enter+0x30>)
{
    b02a:	4698      	mov	r8, r3
		(u32_t)z_priv_stack_find(_current->stack_obj);
    b02c:	68a3      	ldr	r3, [r4, #8]
{
    b02e:	b583      	push	{r0, r1, r7, lr}
    b030:	4605      	mov	r5, r0
		(u32_t)z_priv_stack_find(_current->stack_obj);
    b032:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
{
    b034:	460e      	mov	r6, r1
    b036:	4617      	mov	r7, r2
		(u32_t)z_priv_stack_find(_current->stack_obj);
    b038:	f7f5 f862 	bl	100 <z_priv_stack_find>
	_current->arch.priv_stack_start =
    b03c:	68a4      	ldr	r4, [r4, #8]

	z_arm_userspace_enter(user_entry, p1, p2, p3,
    b03e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
	_current->arch.priv_stack_start =
    b040:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	z_arm_userspace_enter(user_entry, p1, p2, p3,
    b044:	9301      	str	r3, [sp, #4]
    b046:	6da3      	ldr	r3, [r4, #88]	; 0x58
    b048:	9300      	str	r3, [sp, #0]
    b04a:	463a      	mov	r2, r7
    b04c:	4643      	mov	r3, r8
    b04e:	4631      	mov	r1, r6
    b050:	4628      	mov	r0, r5
    b052:	f000 f92f 	bl	b2b4 <z_arm_userspace_enter>
    b056:	bf00      	nop
    b058:	200057f0 	.word	0x200057f0

0000b05c <z_new_thread>:
{
    b05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	stackSize &= ~(CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE - 1);
    b060:	f022 091f 	bic.w	r9, r2, #31
{
    b064:	461f      	mov	r7, r3
	u32_t p_local_data = STACK_ROUND_DOWN(pStackMem + stackSize
    b066:	f1a9 0304 	sub.w	r3, r9, #4
{
    b06a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	u32_t p_local_data = STACK_ROUND_DOWN(pStackMem + stackSize
    b06c:	440b      	add	r3, r1
    b06e:	f023 0307 	bic.w	r3, r3, #7
		(pStackMem + stackSize - ((char *)p_local_data));
    b072:	eb01 0409 	add.w	r4, r1, r9
	thread->userspace_local_data =
    b076:	6543      	str	r3, [r0, #84]	; 0x54
{
    b078:	468a      	mov	sl, r1
		(pStackMem + stackSize - ((char *)p_local_data));
    b07a:	eba4 0803 	sub.w	r8, r4, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    b07e:	2204      	movs	r2, #4
    b080:	4633      	mov	r3, r6
    b082:	990b      	ldr	r1, [sp, #44]	; 0x2c
{
    b084:	4605      	mov	r5, r0
    b086:	f00d fc05 	bl	18894 <z_init_thread_base>
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    b08a:	eba4 0308 	sub.w	r3, r4, r8
		pInitCtx->pc = (u32_t)z_arch_user_mode_enter;
    b08e:	4811      	ldr	r0, [pc, #68]	; (b0d4 <z_new_thread+0x78>)
    b090:	4911      	ldr	r1, [pc, #68]	; (b0d8 <z_new_thread+0x7c>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    b092:	3b20      	subs	r3, #32
	if ((options & K_USER) != 0) {
    b094:	f016 0f04 	tst.w	r6, #4
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    b098:	f023 0307 	bic.w	r3, r3, #7
		pInitCtx->pc = (u32_t)z_arch_user_mode_enter;
    b09c:	bf18      	it	ne
    b09e:	4601      	movne	r1, r0

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    b0a0:	2200      	movs	r2, #0
	pInitCtx->pc &= 0xfffffffe;
    b0a2:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
    b0a6:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
#ifdef CONFIG_THREAD_NAME
	thread->name[0] = '\0';
#endif

#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
    b0aa:	66aa      	str	r2, [r5, #104]	; 0x68
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
    b0ac:	e9c5 a916 	strd	sl, r9, [r5, #88]	; 0x58
    b0b0:	6199      	str	r1, [r3, #24]
	pInitCtx->a2 = (u32_t)parameter1;
    b0b2:	9908      	ldr	r1, [sp, #32]
    b0b4:	6059      	str	r1, [r3, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    b0b6:	9909      	ldr	r1, [sp, #36]	; 0x24
    b0b8:	6099      	str	r1, [r3, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    b0ba:	990a      	ldr	r1, [sp, #40]	; 0x28
    b0bc:	60d9      	str	r1, [r3, #12]
	pInitCtx->xpsr =
    b0be:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
	pInitCtx->a1 = (u32_t)pEntry;
    b0c2:	601f      	str	r7, [r3, #0]
	pInitCtx->xpsr =
    b0c4:	61d9      	str	r1, [r3, #28]
	thread->callee_saved.psp = (u32_t)pInitCtx;
    b0c6:	64ab      	str	r3, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
    b0c8:	676a      	str	r2, [r5, #116]	; 0x74
	thread->arch.priv_stack_start = 0;
    b0ca:	e9c5 221f 	strd	r2, r2, [r5, #124]	; 0x7c
}
    b0ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b0d2:	bf00      	nop
    b0d4:	0000b029 	.word	0x0000b029
    b0d8:	00013095 	.word	0x00013095

0000b0dc <z_check_thread_stack_fail>:
 * @return The lowest allowed stack frame pointer, if error is a
 *         thread stack corruption, otherwise return 0.
 */
u32_t z_check_thread_stack_fail(const u32_t fault_addr, const u32_t psp)
{
	const struct k_thread *thread = _current;
    b0dc:	4b0f      	ldr	r3, [pc, #60]	; (b11c <z_check_thread_stack_fail+0x40>)
    b0de:	689a      	ldr	r2, [r3, #8]
{
    b0e0:	b510      	push	{r4, lr}

	if (!thread) {
    b0e2:	b1ba      	cbz	r2, b114 <z_check_thread_stack_fail+0x38>
		return 0;
	}

#if defined(CONFIG_USERSPACE)
	if (thread->arch.priv_stack_start) {
    b0e4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    b0e8:	b16b      	cbz	r3, b106 <z_check_thread_stack_fail+0x2a>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    b0ea:	f3ef 8414 	mrs	r4, CONTROL
		/* User thread */
		if ((__get_CONTROL() & CONTROL_nPRIV_Msk) == 0) {
    b0ee:	f014 0401 	ands.w	r4, r4, #1
    b0f2:	d106      	bne.n	b102 <z_check_thread_stack_fail+0x26>
			/* User thread in privilege mode */
			if (IS_MPU_GUARD_VIOLATION(
    b0f4:	3016      	adds	r0, #22
    b0f6:	d00f      	beq.n	b118 <z_check_thread_stack_fail+0x3c>
		/* Thread stack corruption */
		return thread->stack_info.start;
	}
#endif /* CONFIG_USERSPACE */

	return 0;
    b0f8:	428b      	cmp	r3, r1
    b0fa:	bf98      	it	ls
    b0fc:	2300      	movls	r3, #0
}
    b0fe:	4618      	mov	r0, r3
    b100:	bd10      	pop	{r4, pc}
			if (psp < (u32_t)thread->stack_obj) {
    b102:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    b104:	e7f8      	b.n	b0f8 <z_check_thread_stack_fail+0x1c>
		if (IS_MPU_GUARD_VIOLATION((u32_t)thread->stack_obj,
    b106:	3016      	adds	r0, #22
    b108:	d0f9      	beq.n	b0fe <z_check_thread_stack_fail+0x22>
    b10a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
    b10c:	428a      	cmp	r2, r1
    b10e:	bf88      	it	hi
    b110:	4613      	movhi	r3, r2
    b112:	e7f4      	b.n	b0fe <z_check_thread_stack_fail+0x22>
	return 0;
    b114:	4613      	mov	r3, r2
    b116:	e7f2      	b.n	b0fe <z_check_thread_stack_fail+0x22>
    b118:	4623      	mov	r3, r4
    b11a:	e7f0      	b.n	b0fe <z_check_thread_stack_fail+0x22>
    b11c:	200057f0 	.word	0x200057f0

0000b120 <z_CpuIdleInit>:
 *
 * void z_CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, z_CpuIdleInit)
	ldr r1, =_SCB_SCR
    b120:	4901      	ldr	r1, [pc, #4]	; (b128 <z_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    b122:	2210      	movs	r2, #16
	str r2, [r1]
    b124:	600a      	str	r2, [r1, #0]
	bx lr
    b126:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    b128:	e000ed10 	.word	0xe000ed10

0000b12c <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    b12c:	4040      	eors	r0, r0
	msr BASEPRI, r0
    b12e:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    b132:	bf30      	wfi

	bx lr
    b134:	4770      	bx	lr
    b136:	bf00      	nop

0000b138 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    b138:	4040      	eors	r0, r0
	msr BASEPRI, r0
    b13a:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE) && \
	!defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    b13e:	f8df c01c 	ldr.w	ip, [pc, #28]	; b15c <__bus_fault+0x24>
	ldr ip, [ip]
    b142:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    b146:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    b14a:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    b14c:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    b150:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
    b154:	b501      	push	{r0, lr}
	bl _Fault
    b156:	f7ff fea9 	bl	aeac <_Fault>

	pop {r0, pc}
    b15a:	bd01      	pop	{r0, pc}
	ldr ip, =_SCS_ICSR
    b15c:	e000ed04 	.word	0xe000ed04

0000b160 <z_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void z_NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    b160:	b538      	push	{r3, r4, r5, lr}
    b162:	4604      	mov	r4, r0
    b164:	460d      	mov	r5, r1
    b166:	f7fb fe69 	bl	6e3c <z_impl_log_panic>
	LOG_PANIC();

	switch (reason) {
    b16a:	2c05      	cmp	r4, #5
    b16c:	d81c      	bhi.n	b1a8 <z_NanoFatalErrorHandler+0x48>
    b16e:	e8df f004 	tbb	[pc, r4]
    b172:	1b03      	.short	0x1b03
    b174:	19171513 	.word	0x19171513
	case _NANO_ERR_HW_EXCEPTION:
		printk("***** Hardware exception *****\n");
    b178:	480e      	ldr	r0, [pc, #56]	; (b1b4 <z_NanoFatalErrorHandler+0x54>)
		break;
#if defined(CONFIG_STACK_CANARIES) || defined(CONFIG_STACK_SENTINEL) || \
		defined(CONFIG_HW_STACK_PROTECTION) || \
		defined(CONFIG_USERSPACE)
	case _NANO_ERR_STACK_CHK_FAIL:
		printk("***** Stack Check Fail! *****\n");
    b17a:	f008 f980 	bl	1347e <printk>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    b17e:	f004 ff63 	bl	10048 <z_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    b182:	69aa      	ldr	r2, [r5, #24]
    b184:	4601      	mov	r1, r0
    b186:	480c      	ldr	r0, [pc, #48]	; (b1b8 <z_NanoFatalErrorHandler+0x58>)
    b188:	f008 f979 	bl	1347e <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	z_SysFatalErrorHandler(reason, pEsf);
    b18c:	4629      	mov	r1, r5
    b18e:	4620      	mov	r0, r4
}
    b190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_SysFatalErrorHandler(reason, pEsf);
    b194:	f000 b81c 	b.w	b1d0 <z_SysFatalErrorHandler>
		printk("***** Stack Check Fail! *****\n");
    b198:	4808      	ldr	r0, [pc, #32]	; (b1bc <z_NanoFatalErrorHandler+0x5c>)
    b19a:	e7ee      	b.n	b17a <z_NanoFatalErrorHandler+0x1a>
		printk("**** Kernel Allocation Failure! ****\n");
    b19c:	4808      	ldr	r0, [pc, #32]	; (b1c0 <z_NanoFatalErrorHandler+0x60>)
    b19e:	e7ec      	b.n	b17a <z_NanoFatalErrorHandler+0x1a>
		printk("***** Kernel OOPS! *****\n");
    b1a0:	4808      	ldr	r0, [pc, #32]	; (b1c4 <z_NanoFatalErrorHandler+0x64>)
    b1a2:	e7ea      	b.n	b17a <z_NanoFatalErrorHandler+0x1a>
		printk("***** Kernel Panic! *****\n");
    b1a4:	4808      	ldr	r0, [pc, #32]	; (b1c8 <z_NanoFatalErrorHandler+0x68>)
    b1a6:	e7e8      	b.n	b17a <z_NanoFatalErrorHandler+0x1a>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    b1a8:	4621      	mov	r1, r4
    b1aa:	4808      	ldr	r0, [pc, #32]	; (b1cc <z_NanoFatalErrorHandler+0x6c>)
    b1ac:	f008 f967 	bl	1347e <printk>
		break;
    b1b0:	e7e5      	b.n	b17e <z_NanoFatalErrorHandler+0x1e>
    b1b2:	bf00      	nop
    b1b4:	0001b7e6 	.word	0x0001b7e6
    b1b8:	0001b8a3 	.word	0x0001b8a3
    b1bc:	0001b806 	.word	0x0001b806
    b1c0:	0001b825 	.word	0x0001b825
    b1c4:	0001b84b 	.word	0x0001b84b
    b1c8:	0001b865 	.word	0x0001b865
    b1cc:	0001b880 	.word	0x0001b880

0000b1d0 <z_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    b1d0:	2805      	cmp	r0, #5
{
    b1d2:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    b1d4:	d00c      	beq.n	b1f0 <z_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || z_is_thread_essential()) {
    b1d6:	f005 f84b 	bl	10270 <k_is_in_isr>
    b1da:	b160      	cbz	r0, b1f6 <z_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    b1dc:	f005 f848 	bl	10270 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    b1e0:	490c      	ldr	r1, [pc, #48]	; (b214 <z_SysFatalErrorHandler+0x44>)
    b1e2:	4b0d      	ldr	r3, [pc, #52]	; (b218 <z_SysFatalErrorHandler+0x48>)
    b1e4:	2800      	cmp	r0, #0
    b1e6:	bf08      	it	eq
    b1e8:	4619      	moveq	r1, r3
    b1ea:	480c      	ldr	r0, [pc, #48]	; (b21c <z_SysFatalErrorHandler+0x4c>)
    b1ec:	f008 f947 	bl	1347e <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    b1f0:	f7ff ff9c 	bl	b12c <k_cpu_idle>
    b1f4:	e7fc      	b.n	b1f0 <z_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || z_is_thread_essential()) {
    b1f6:	f005 f855 	bl	102a4 <z_is_thread_essential>
    b1fa:	2800      	cmp	r0, #0
    b1fc:	d1ee      	bne.n	b1dc <z_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    b1fe:	4c08      	ldr	r4, [pc, #32]	; (b220 <z_SysFatalErrorHandler+0x50>)
    b200:	4808      	ldr	r0, [pc, #32]	; (b224 <z_SysFatalErrorHandler+0x54>)
    b202:	68a1      	ldr	r1, [r4, #8]
    b204:	f008 f93b 	bl	1347e <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
    b208:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    b20a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b20e:	f000 b80b 	b.w	b228 <z_impl_k_thread_abort>
    b212:	bf00      	nop
    b214:	0001b8df 	.word	0x0001b8df
    b218:	0001b8e3 	.word	0x0001b8e3
    b21c:	0001b8f4 	.word	0x0001b8f4
    b220:	200057f0 	.word	0x200057f0
    b224:	0001b914 	.word	0x0001b914

0000b228 <z_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    b228:	b538      	push	{r3, r4, r5, lr}
    b22a:	4605      	mov	r5, r0
	__asm__ volatile(
    b22c:	f04f 0320 	mov.w	r3, #32
    b230:	f3ef 8411 	mrs	r4, BASEPRI
    b234:	f383 8811 	msr	BASEPRI, r3
    b238:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    b23c:	f00d fb01 	bl	18842 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    b240:	4b0a      	ldr	r3, [pc, #40]	; (b26c <z_impl_k_thread_abort+0x44>)
    b242:	689b      	ldr	r3, [r3, #8]
    b244:	42ab      	cmp	r3, r5
    b246:	d10b      	bne.n	b260 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    b248:	4b09      	ldr	r3, [pc, #36]	; (b270 <z_impl_k_thread_abort+0x48>)
    b24a:	685a      	ldr	r2, [r3, #4]
    b24c:	f3c2 0208 	ubfx	r2, r2, #0, #9
    b250:	b912      	cbnz	r2, b258 <z_impl_k_thread_abort+0x30>
#ifndef CONFIG_ARM
#ifdef CONFIG_TRACING
	sys_trace_thread_switched_out();
#endif
#endif
	ret = __swap(key);
    b252:	4620      	mov	r0, r4
    b254:	f7ff fc82 	bl	ab5c <__swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    b258:	685a      	ldr	r2, [r3, #4]
    b25a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    b25e:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    b260:	4620      	mov	r0, r4
}
    b262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    b266:	f00d b9ba 	b.w	185de <z_reschedule_irqlock>
    b26a:	bf00      	nop
    b26c:	200057f0 	.word	0x200057f0
    b270:	e000ed00 	.word	0xe000ed00

0000b274 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {r0,lr}		/* r0, lr are now the first items on the stack */
    b274:	b501      	push	{r0, lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, z_sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    b276:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    b278:	4a0b      	ldr	r2, [pc, #44]	; (b2a8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    b27a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    b27c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    b27e:	bf1e      	ittt	ne
	movne	r1, #0
    b280:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    b282:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    b284:	f00d f806 	blne	18294 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    b288:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    b28a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    b28e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    b292:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    b296:	4905      	ldr	r1, [pc, #20]	; (b2ac <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    b298:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    b29a:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    b29c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    b29e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * _IntExit() */
	ldr r0, =_IntExit
    b2a2:	4803      	ldr	r0, [pc, #12]	; (b2b0 <_isr_wrapper+0x3c>)
	bx r0
    b2a4:	4700      	bx	r0
    b2a6:	0000      	.short	0x0000
	ldr r2, =_kernel
    b2a8:	200057f0 	.word	0x200057f0
	ldr r1, =_sw_isr_table
    b2ac:	00018d0c 	.word	0x00018d0c
	ldr r0, =_IntExit
    b2b0:	0000ab29 	.word	0x0000ab29

0000b2b4 <z_arm_userspace_enter>:
 * not transition back later, unless they are doing system calls.
 *
 */
SECTION_FUNC(TEXT,z_arm_userspace_enter)
    /* move user_entry to lr */
    mov lr, r0
    b2b4:	4686      	mov	lr, r0
    mov r0, #0
    msr PSPLIM, r0
#endif

    /* set stack to privileged stack */
    ldr r0, =_kernel
    b2b6:	481c      	ldr	r0, [pc, #112]	; (b328 <z_arm_userspace_enter+0x74>)
    ldr r0, [r0, #_kernel_offset_to_current]
    b2b8:	6880      	ldr	r0, [r0, #8]
    ldr r0, [r0, #_thread_offset_to_priv_stack_start]    /* priv stack ptr */
    b2ba:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
    ldr ip, =CONFIG_PRIVILEGED_STACK_SIZE
    b2be:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    add r0, r0, ip
    b2c2:	4460      	add	r0, ip

    mov ip, sp
    b2c4:	46ec      	mov	ip, sp
    msr PSP, r0
    b2c6:	f380 8809 	msr	PSP, r0
     *
     * Note that the risk for overflow is higher if using the normal thread
     * stack, since we do not control how much stack is actually left, when
     * user invokes z_arm_userspace_enter().
     */
    push {r0,r1,r2,r3,ip,lr}
    b2ca:	e92d 500f 	stmdb	sp!, {r0, r1, r2, r3, ip, lr}
    ldr r0, =_kernel
    b2ce:	4816      	ldr	r0, [pc, #88]	; (b328 <z_arm_userspace_enter+0x74>)
    ldr r0, [r0, #_kernel_offset_to_current]
    b2d0:	6880      	ldr	r0, [r0, #8]
    bl z_arch_configure_dynamic_mpu_regions
    b2d2:	f000 f8d3 	bl	b47c <z_arch_configure_dynamic_mpu_regions>
    pop {r0,r1,r2,r3,ip,lr}
    b2d6:	e8bd 500f 	ldmia.w	sp!, {r0, r1, r2, r3, ip, lr}
#endif

    /* load up stack info from user stack */
    ldr r0, [ip]
    b2da:	f8dc 0000 	ldr.w	r0, [ip]
    ldr ip, [ip, #4]
    b2de:	f8dc c004 	ldr.w	ip, [ip, #4]

#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
    /* Guard is taken out of size, so adjust beginning and size of stack */
    subs ip, #MPU_GUARD_ALIGN_AND_SIZE
    b2e2:	f1bc 0c00 	subs.w	ip, ip, #0
#endif

    /* push args to stack */
    push {r0,r1,r2,r3,ip,lr}
    b2e6:	e92d 500f 	stmdb	sp!, {r0, r1, r2, r3, ip, lr}

    /* clear the user stack area to clean out privileged data */
    /* from right past the guard right up to the end */
    mov r2, ip
    b2ea:	4662      	mov	r2, ip
#ifdef CONFIG_INIT_STACKS
    ldr r1,=0xaaaaaaaa
#else
    eors.n r1, r1
    b2ec:	4049      	eors	r1, r1
#endif
    bl memset
    b2ee:	f7f7 f880 	bl	23f2 <memset>

    pop {r0,r1,r2,r3,ip,lr}
    b2f2:	e8bd 500f 	ldmia.w	sp!, {r0, r1, r2, r3, ip, lr}

    /* r0 contains user stack start, ip contains user stack size */
    add r0, r0, ip   /* calculate top of stack */
    b2f6:	4460      	add	r0, ip
    msr PSPLIM, r3
    pop {r3}
#endif

    /* set stack to user stack */
    msr PSP, r0
    b2f8:	f380 8809 	msr	PSP, r0

    /* restore r0 */
    mov r0, lr
    b2fc:	4670      	mov	r0, lr
    ldm sp!,{r0-r3} /* Restore r0 to r3 regs */

#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* change processor mode to unprivileged */
    push {r0, r1}
    b2fe:	b403      	push	{r0, r1}
    ldr r0, =_kernel
    b300:	4809      	ldr	r0, [pc, #36]	; (b328 <z_arm_userspace_enter+0x74>)
    ldr r0, [r0, #_kernel_offset_to_current]
    b302:	6880      	ldr	r0, [r0, #8]
    ldr r1, [r0, #_thread_offset_to_mode]
    b304:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
    orrs r1, r1, #1
    b306:	f051 0101 	orrs.w	r1, r1, #1
    mrs ip, CONTROL
    b30a:	f3ef 8c14 	mrs	ip, CONTROL
    orrs ip, ip, #1
    b30e:	f05c 0c01 	orrs.w	ip, ip, #1
    /* Store (unprivileged) mode in thread's mode state variable */
    str r1, [r0, #_thread_offset_to_mode]
    b312:	67c1      	str	r1, [r0, #124]	; 0x7c
    dsb
    b314:	f3bf 8f4f 	dsb	sy
    msr CONTROL, ip
    b318:	f38c 8814 	msr	CONTROL, ip

    /* ISB is not strictly necessary here (stack pointer is not being
     * touched), but it's recommended to avoid executing pre-fetched
     * instructions with the previous privilege.
     */
    isb
    b31c:	f3bf 8f6f 	isb	sy
    pop {r0, r1}
    b320:	bc03      	pop	{r0, r1}

    /* jump to z_thread_entry entry */
    ldr ip, =z_thread_entry
    b322:	f8df c008 	ldr.w	ip, [pc, #8]	; b32c <z_arm_userspace_enter+0x78>
    bx ip
    b326:	4760      	bx	ip
    ldr r0, =_kernel
    b328:	200057f0 	.word	0x200057f0
    ldr ip, =z_thread_entry
    b32c:	00013095 	.word	0x00013095

0000b330 <z_arm_do_syscall>:
    mov ip, #0
    msr PSPLIM, ip
#endif

    /* setup privileged stack */
    ldr ip, =_kernel
    b330:	f8df c084 	ldr.w	ip, [pc, #132]	; b3b8 <dispatch_syscall+0x56>
    ldr ip, [ip, #_kernel_offset_to_current]
    b334:	f8dc c008 	ldr.w	ip, [ip, #8]
    ldr ip, [ip, #_thread_offset_to_priv_stack_start]    /* priv stack ptr */
    b338:	f8dc c080 	ldr.w	ip, [ip, #128]	; 0x80
    add ip, #CONFIG_PRIVILEGED_STACK_SIZE
    b33c:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400

    /* Store current SP and LR at the beginning of the priv stack */
    subs ip, #8
    b340:	f1bc 0c08 	subs.w	ip, ip, #8
    str sp, [ip, #0]
    b344:	f8cc d000 	str.w	sp, [ip]
    str lr, [ip, #4]
    b348:	f8cc e004 	str.w	lr, [ip, #4]

    /* switch to privileged stack */
    msr PSP, ip
    b34c:	f38c 8809 	msr	PSP, ip
    /*
     * r0-r5 contain arguments
     * r6 contains call_id
     * r8 contains original LR
     */
    ldr ip, =K_SYSCALL_BAD
    b350:	f04f 0cb5 	mov.w	ip, #181	; 0xb5
    cmp r6, ip
    b354:	4566      	cmp	r6, ip
    bne valid_syscall
    b356:	d103      	bne.n	b360 <valid_syscall>

    /* BAD SYSCALL path */
    /* fixup stack frame on the privileged stack, adding ssf */
    mov ip, sp
    b358:	46ec      	mov	ip, sp
    push {r4,r5,ip,lr}
    b35a:	e92d 5030 	stmdb	sp!, {r4, r5, ip, lr}
    b dispatch_syscall
    b35e:	e000      	b.n	b362 <dispatch_syscall>

0000b360 <valid_syscall>:

valid_syscall:
    /* push args to complete stack frame */
    push {r4,r5}
    b360:	b430      	push	{r4, r5}

0000b362 <dispatch_syscall>:

dispatch_syscall:
    ldr ip, =_k_syscall_table
    b362:	f8df c058 	ldr.w	ip, [pc, #88]	; b3bc <dispatch_syscall+0x5a>
    lsl r6, #2
    b366:	ea4f 0686 	mov.w	r6, r6, lsl #2
    add ip, r6
    b36a:	44b4      	add	ip, r6
    ldr ip, [ip]	/* load table address */
    b36c:	f8dc c000 	ldr.w	ip, [ip]
    /* execute function from dispatch table */
    blx ip
    b370:	47e0      	blx	ip

    /* restore LR */
    ldr lr, [sp,#12]
    b372:	f8dd e00c 	ldr.w	lr, [sp, #12]
    mov r3, #0
    msr PSPLIM, r3
#endif

    /* set stack back to unprivileged stack */
    ldr ip, [sp,#8]
    b376:	f8dd c008 	ldr.w	ip, [sp, #8]
    msr PSP, ip
    b37a:	f38c 8809 	msr	PSP, ip

    push {r0, r1}
    b37e:	b403      	push	{r0, r1}
    ldr r0, =_kernel
    b380:	480d      	ldr	r0, [pc, #52]	; (b3b8 <dispatch_syscall+0x56>)
    ldr r0, [r0, #_kernel_offset_to_current]
    b382:	6880      	ldr	r0, [r0, #8]
    ldr r1, [r0, #_thread_offset_to_mode]
    b384:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
    orrs r1, r1, #1
    b386:	f051 0101 	orrs.w	r1, r1, #1
    /* Store (unprivileged) mode in thread's mode state variable */
    str r1, [r0, #_thread_offset_to_mode]
    b38a:	67c1      	str	r1, [r0, #124]	; 0x7c
    dsb
    b38c:	f3bf 8f4f 	dsb	sy
    /* drop privileges by setting bit 0 in CONTROL */
    mrs ip, CONTROL
    b390:	f3ef 8c14 	mrs	ip, CONTROL
    orrs ip, ip, #1
    b394:	f05c 0c01 	orrs.w	ip, ip, #1
    msr CONTROL, ip
    b398:	f38c 8814 	msr	CONTROL, ip

    /* ISB is not strictly necessary here (stack pointer is not being
     * touched), but it's recommended to avoid executing pre-fetched
     * instructions with the previous privilege.
     */
    isb
    b39c:	f3bf 8f6f 	isb	sy
    pop {r0, r1}
    b3a0:	bc03      	pop	{r0, r1}

    /* Zero out volatile (caller-saved) registers so as to not leak state from
     * kernel mode. The C calling convention for the syscall handler will
     * restore the others to original values.
     */
    mov r1, #0
    b3a2:	f04f 0100 	mov.w	r1, #0
    mov r2, #0
    b3a6:	f04f 0200 	mov.w	r2, #0
    mov r3, #0
    b3aa:	f04f 0300 	mov.w	r3, #0

    /*
     * return back to original function that called SVC, add 1 to force thumb
     * mode
     */
    mov ip, r8
    b3ae:	46c4      	mov	ip, r8
    orrs ip, ip, #1
    b3b0:	f05c 0c01 	orrs.w	ip, ip, #1
    bx ip
    b3b4:	4760      	bx	ip
    b3b6:	0000      	.short	0x0000
    ldr ip, =_kernel
    b3b8:	200057f0 	.word	0x200057f0
    ldr ip, =_k_syscall_table
    b3bc:	00019448 	.word	0x00019448

0000b3c0 <z_arch_user_string_nlen>:

/*
 * size_t z_arch_user_string_nlen(const char *s, size_t maxsize, int *err_arg)
 */
SECTION_FUNC(TEXT, z_arch_user_string_nlen)
    push {r0, r1, r2, r4, r5, lr}
    b3c0:	b537      	push	{r0, r1, r2, r4, r5, lr}

    /* sp+4 is error value, init to -1 */
    mov.w r3, #-1
    b3c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    str	r3, [sp, #4]
    b3c6:	9301      	str	r3, [sp, #4]

    /* Perform string length calculation */
    movs r3, #0		/* r3 is the counter */
    b3c8:	2300      	movs	r3, #0

0000b3ca <z_arch_user_string_nlen_fault_start>:

strlen_loop:
z_arch_user_string_nlen_fault_start:
    /* r0 contains the string. r5 = *(r0 + r3]). This could fault. */
    ldrb r5, [r0, r3]
    b3ca:	5cc5      	ldrb	r5, [r0, r3]

0000b3cc <z_arch_user_string_nlen_fault_end>:

z_arch_user_string_nlen_fault_end:
    cbz	r5, strlen_done
    b3cc:	b11d      	cbz	r5, b3d6 <strlen_done>
    cmp	r3, r1
    b3ce:	428b      	cmp	r3, r1
    beq.n strlen_done
    b3d0:	d001      	beq.n	b3d6 <strlen_done>

    adds r3, #1
    b3d2:	3301      	adds	r3, #1
    b.n	strlen_loop
    b3d4:	e7f9      	b.n	b3ca <z_arch_user_string_nlen_fault_start>

0000b3d6 <strlen_done>:

strlen_done:
    /* Move length calculation from r3 to r0 (return value register) */
    mov	r0, r3
    b3d6:	4618      	mov	r0, r3

    /* Clear error value since we succeeded */
    movs r1, #0
    b3d8:	2100      	movs	r1, #0
    str	r1, [sp, #4]
    b3da:	9101      	str	r1, [sp, #4]

0000b3dc <z_arch_user_string_nlen_fixup>:

z_arch_user_string_nlen_fixup:
    /* Write error value to err pointer parameter */
    ldr	r1, [sp, #4]
    b3dc:	9901      	ldr	r1, [sp, #4]
    str	r1, [r2, #0]
    b3de:	6011      	str	r1, [r2, #0]

    add	sp, #12
    b3e0:	b003      	add	sp, #12
    pop	{r4, r5, pc}
    b3e2:	bd30      	pop	{r4, r5, pc}

0000b3e4 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    b3e4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    b3e6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    b3ea:	4808      	ldr	r0, [pc, #32]	; (b40c <__reset+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    b3ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    adds r0, r0, r1
    b3f0:	1840      	adds	r0, r0, r1
    msr PSP, r0
    b3f2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    b3f6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    b3fa:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    b3fc:	4308      	orrs	r0, r1
    msr CONTROL, r0
    b3fe:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    b402:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to _PrepC
     * (even though we do not intend to return).
     */
    bl _PrepC
    b406:	f000 f807 	bl	b418 <_PrepC>
    b40a:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    b40c:	20007000 	.word	0x20007000

0000b410 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    b410:	bf30      	wfi
    b z_SysNmiOnReset
    b412:	f7ff bffd 	b.w	b410 <z_SysNmiOnReset>
    b416:	bf00      	nop

0000b418 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    b418:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    b41a:	4b08      	ldr	r3, [pc, #32]	; (b43c <_PrepC+0x24>)
    b41c:	4a08      	ldr	r2, [pc, #32]	; (b440 <_PrepC+0x28>)
    b41e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    b422:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    b424:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b428:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    b42c:	f003 fe90 	bl	f150 <z_bss_zero>
	z_data_copy();
    b430:	f003 fe98 	bl	f164 <z_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0U;
#endif
	z_IntLibInit();
    b434:	f7ff fb86 	bl	ab44 <z_IntLibInit>
	z_cstart();
    b438:	f003 fed2 	bl	f1e0 <z_cstart>
    b43c:	00000000 	.word	0x00000000
    b440:	e000ed00 	.word	0xe000ed00

0000b444 <z_arch_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_static_mpu_regions(void)
{
    b444:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    b446:	4b08      	ldr	r3, [pc, #32]	; (b468 <z_arch_configure_static_mpu_regions+0x24>)
    b448:	9301      	str	r3, [sp, #4]
    b44a:	4b08      	ldr	r3, [pc, #32]	; (b46c <z_arch_configure_static_mpu_regions+0x28>)
    b44c:	9302      	str	r3, [sp, #8]
    b44e:	4b08      	ldr	r3, [pc, #32]	; (b470 <z_arch_configure_static_mpu_regions+0x2c>)
    b450:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    b452:	ab01      	add	r3, sp, #4
    b454:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    b456:	4a07      	ldr	r2, [pc, #28]	; (b474 <z_arch_configure_static_mpu_regions+0x30>)
    b458:	4b07      	ldr	r3, [pc, #28]	; (b478 <z_arch_configure_static_mpu_regions+0x34>)
    b45a:	2101      	movs	r1, #1
    b45c:	4668      	mov	r0, sp
    b45e:	f000 f919 	bl	b694 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    b462:	b005      	add	sp, #20
    b464:	f85d fb04 	ldr.w	pc, [sp], #4
    b468:	20000000 	.word	0x20000000
    b46c:	00002000 	.word	0x00002000
    b470:	030b0000 	.word	0x030b0000
    b474:	20000000 	.word	0x20000000
    b478:	20040000 	.word	0x20040000

0000b47c <z_arch_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    b47c:	b570      	push	{r4, r5, r6, lr}
    b47e:	4604      	mov	r4, r0
    b480:	b094      	sub	sp, #80	; 0x50
    b482:	f009 fd66 	bl	14f52 <z_arch_is_user_context>
#if defined(CONFIG_USERSPACE)
	struct k_mem_partition thread_stack;

	/* Memory domain */
	LOG_DBG("configure thread %p's domain", thread);
	struct k_mem_domain *mem_domain = thread->mem_domain_info.mem_domain;
    b486:	6ea1      	ldr	r1, [r4, #104]	; 0x68

	if (mem_domain) {
    b488:	b1d1      	cbz	r1, b4c0 <z_arch_configure_dynamic_mpu_regions+0x44>
    b48a:	f009 fd62 	bl	14f52 <z_arch_is_user_context>
		LOG_DBG("configure domain: %p", mem_domain);
		u32_t num_partitions = mem_domain->num_partitions;
    b48e:	f891 50c8 	ldrb.w	r5, [r1, #200]	; 0xc8
    b492:	f009 fd5e 	bl	14f52 <z_arch_is_user_context>
		struct k_mem_partition partition;
		int i;

		LOG_DBG("configure domain: %p", mem_domain);

		for (i = 0; i < CONFIG_MAX_DOMAIN_PARTITIONS; i++) {
    b496:	460a      	mov	r2, r1
    b498:	f101 06c0 	add.w	r6, r1, #192	; 0xc0
	u8_t region_num = 0U;
    b49c:	2100      	movs	r1, #0
			partition = mem_domain->partitions[i];
			if (partition.size == 0) {
    b49e:	6853      	ldr	r3, [r2, #4]
    b4a0:	b15b      	cbz	r3, b4ba <z_arch_configure_dynamic_mpu_regions+0x3e>
    b4a2:	f009 fd56 	bl	14f52 <z_arch_is_user_context>
			}
			LOG_DBG("set region 0x%x 0x%x",
				partition.start, partition.size);
			__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
				"Out-of-bounds error for dynamic region map.");
			dynamic_regions[region_num] =
    b4a6:	ab14      	add	r3, sp, #80	; 0x50
    b4a8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
				&mem_domain->partitions[i];

			region_num++;
			num_partitions--;
			if (num_partitions == 0U) {
    b4ac:	3d01      	subs	r5, #1
			region_num++;
    b4ae:	f101 0101 	add.w	r1, r1, #1
			dynamic_regions[region_num] =
    b4b2:	f843 2c44 	str.w	r2, [r3, #-68]
			region_num++;
    b4b6:	b2c9      	uxtb	r1, r1
			if (num_partitions == 0U) {
    b4b8:	d002      	beq.n	b4c0 <z_arch_configure_dynamic_mpu_regions+0x44>
    b4ba:	320c      	adds	r2, #12
		for (i = 0; i < CONFIG_MAX_DOMAIN_PARTITIONS; i++) {
    b4bc:	42b2      	cmp	r2, r6
    b4be:	d1ee      	bne.n	b49e <z_arch_configure_dynamic_mpu_regions+0x22>
    b4c0:	f009 fd47 	bl	14f52 <z_arch_is_user_context>
			}
		}
	}
	/* Thread user stack */
	LOG_DBG("configure user thread %p's context", thread);
	if (thread->arch.priv_stack_start) {
    b4c4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    b4c8:	b17b      	cbz	r3, b4ea <z_arch_configure_dynamic_mpu_regions+0x6e>
		u32_t base = (u32_t)thread->stack_obj;
		u32_t size = thread->stack_info.size +
    b4ca:	e9d4 0316 	ldrd	r0, r3, [r4, #88]	; 0x58
		u32_t base = (u32_t)thread->stack_obj;
    b4ce:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
		u32_t size = thread->stack_info.size +
    b4d0:	4403      	add	r3, r0
    b4d2:	1a9b      	subs	r3, r3, r2
			(thread->stack_info.start - base);

		__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
			"Out-of-bounds error for dynamic region map.");
		thread_stack = (const struct k_mem_partition)
    b4d4:	e9cd 2300 	strd	r2, r3, [sp]
    b4d8:	4b06      	ldr	r3, [pc, #24]	; (b4f4 <z_arch_configure_dynamic_mpu_regions+0x78>)
    b4da:	9302      	str	r3, [sp, #8]
			{base, size, K_MEM_PARTITION_P_RW_U_RW};

		dynamic_regions[region_num] = &thread_stack;
    b4dc:	ab14      	add	r3, sp, #80	; 0x50
    b4de:	eb03 0381 	add.w	r3, r3, r1, lsl #2

		region_num++;
    b4e2:	3101      	adds	r1, #1
		dynamic_regions[region_num] = &thread_stack;
    b4e4:	f843 dc44 	str.w	sp, [r3, #-68]
		region_num++;
    b4e8:	b2c9      	uxtb	r1, r1

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    b4ea:	a803      	add	r0, sp, #12
    b4ec:	f000 f916 	bl	b71c <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    b4f0:	b014      	add	sp, #80	; 0x50
    b4f2:	bd70      	pop	{r4, r5, r6, pc}
    b4f4:	130b0000 	.word	0x130b0000

0000b4f8 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const u8_t index,
	const struct k_mem_partition *new_region)
{
    b4f8:	b538      	push	{r3, r4, r5, lr}
    b4fa:	4604      	mov	r4, r0
    b4fc:	f009 fd3c 	bl	14f78 <z_arch_is_user_context>

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    b500:	e9d1 2300 	ldrd	r2, r3, [r1]
 * to that power-of-two value.
 */
static inline u32_t size_to_mpu_rasr_size(u32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    b504:	2b20      	cmp	r3, #32
    b506:	6889      	ldr	r1, [r1, #8]
    b508:	d924      	bls.n	b554 <mpu_configure_region+0x5c>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    b50a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    b50e:	d823      	bhi.n	b558 <mpu_configure_region+0x60>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    b510:	3b01      	subs	r3, #1
    b512:	fab3 f383 	clz	r3, r3
    b516:	f1c3 031f 	rsb	r3, r3, #31
    b51a:	005b      	lsls	r3, r3, #1
	if (index > (get_num_regions() - 1)) {
    b51c:	2c07      	cmp	r4, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    b51e:	ea41 0103 	orr.w	r1, r1, r3
    b522:	4625      	mov	r5, r4
    b524:	d920      	bls.n	b568 <mpu_configure_region+0x70>
    b526:	f009 fd27 	bl	14f78 <z_arch_is_user_context>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    b52a:	f04f 0500 	mov.w	r5, #0
    b52e:	2301      	movs	r3, #1
    b530:	f363 0507 	bfi	r5, r3, #0, #8
    b534:	4a14      	ldr	r2, [pc, #80]	; (b588 <mpu_configure_region+0x90>)
    b536:	4b15      	ldr	r3, [pc, #84]	; (b58c <mpu_configure_region+0x94>)
    b538:	1a9b      	subs	r3, r3, r2
    b53a:	08db      	lsrs	r3, r3, #3
    b53c:	f363 158f 	bfi	r5, r3, #6, #10
    b540:	b160      	cbz	r0, b55c <mpu_configure_region+0x64>
    b542:	4622      	mov	r2, r4
    b544:	4912      	ldr	r1, [pc, #72]	; (b590 <mpu_configure_region+0x98>)
    b546:	4628      	mov	r0, r5
    b548:	f008 f938 	bl	137bc <log_from_user>
		return -EINVAL;
    b54c:	f06f 0515 	mvn.w	r5, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    b550:	4628      	mov	r0, r5
    b552:	bd38      	pop	{r3, r4, r5, pc}
		return REGION_32B;
    b554:	2308      	movs	r3, #8
    b556:	e7e1      	b.n	b51c <mpu_configure_region+0x24>
		return REGION_4G;
    b558:	233e      	movs	r3, #62	; 0x3e
    b55a:	e7df      	b.n	b51c <mpu_configure_region+0x24>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    b55c:	462a      	mov	r2, r5
    b55e:	4621      	mov	r1, r4
    b560:	480b      	ldr	r0, [pc, #44]	; (b590 <mpu_configure_region+0x98>)
    b562:	f008 f8d0 	bl	13706 <log_1>
    b566:	e7f1      	b.n	b54c <mpu_configure_region+0x54>
    b568:	f009 fd06 	bl	14f78 <z_arch_is_user_context>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    b56c:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = index;
    b570:	4808      	ldr	r0, [pc, #32]	; (b594 <mpu_configure_region+0x9c>)
				| MPU_RBAR_VALID_Msk | index;
    b572:	4322      	orrs	r2, r4
    b574:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    b578:	f041 0101 	orr.w	r1, r1, #1
	MPU->RNR = index;
    b57c:	6084      	str	r4, [r0, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    b57e:	60c2      	str	r2, [r0, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    b580:	6101      	str	r1, [r0, #16]
    b582:	f009 fcf9 	bl	14f78 <z_arch_is_user_context>
	return region_allocate_and_init(index,
    b586:	e7e3      	b.n	b550 <mpu_configure_region+0x58>
    b588:	00018f84 	.word	0x00018f84
    b58c:	00018f94 	.word	0x00018f94
    b590:	0001b960 	.word	0x0001b960
    b594:	e000ed90 	.word	0xe000ed90

0000b598 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    b598:	4b03      	ldr	r3, [pc, #12]	; (b5a8 <arm_core_mpu_enable+0x10>)
    b59a:	2205      	movs	r2, #5
    b59c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    b59e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b5a2:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    b5a6:	4770      	bx	lr
    b5a8:	e000ed90 	.word	0xe000ed90

0000b5ac <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    b5ac:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    b5b0:	4b01      	ldr	r3, [pc, #4]	; (b5b8 <arm_core_mpu_disable+0xc>)
    b5b2:	2200      	movs	r2, #0
    b5b4:	605a      	str	r2, [r3, #4]
}
    b5b6:	4770      	bx	lr
    b5b8:	e000ed90 	.word	0xe000ed90

0000b5bc <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    b5bc:	4915      	ldr	r1, [pc, #84]	; (b614 <arm_mpu_init+0x58>)
{
    b5be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    b5c0:	680c      	ldr	r4, [r1, #0]
    b5c2:	2c08      	cmp	r4, #8
    b5c4:	d822      	bhi.n	b60c <arm_mpu_init+0x50>
	MPU->RNR = index;
    b5c6:	4d14      	ldr	r5, [pc, #80]	; (b618 <arm_mpu_init+0x5c>)
    b5c8:	f009 fcd6 	bl	14f78 <z_arch_is_user_context>
	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    b5cc:	260c      	movs	r6, #12
	arm_core_mpu_disable();
    b5ce:	f7ff ffed 	bl	b5ac <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    b5d2:	2200      	movs	r2, #0
    b5d4:	4294      	cmp	r4, r2
    b5d6:	d105      	bne.n	b5e4 <arm_mpu_init+0x28>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    b5d8:	4b10      	ldr	r3, [pc, #64]	; (b61c <arm_mpu_init+0x60>)
    b5da:	701c      	strb	r4, [r3, #0]


	arm_core_mpu_enable();
    b5dc:	f7ff ffdc 	bl	b598 <arm_core_mpu_enable>
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
    b5e0:	2000      	movs	r0, #0
}
    b5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    b5e4:	fb06 f302 	mul.w	r3, r6, r2
    b5e8:	6848      	ldr	r0, [r1, #4]
    b5ea:	60aa      	str	r2, [r5, #8]
    b5ec:	18c7      	adds	r7, r0, r3
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    b5ee:	58c3      	ldr	r3, [r0, r3]
    b5f0:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    b5f4:	4313      	orrs	r3, r2
    b5f6:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    b5fa:	60eb      	str	r3, [r5, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    b5fc:	68bb      	ldr	r3, [r7, #8]
    b5fe:	f043 0301 	orr.w	r3, r3, #1
    b602:	612b      	str	r3, [r5, #16]
    b604:	f009 fcb8 	bl	14f78 <z_arch_is_user_context>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    b608:	3201      	adds	r2, #1
    b60a:	e7e3      	b.n	b5d4 <arm_mpu_init+0x18>
		return -1;
    b60c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b610:	e7e7      	b.n	b5e2 <arm_mpu_init+0x26>
    b612:	bf00      	nop
    b614:	000191c8 	.word	0x000191c8
    b618:	e000ed90 	.word	0xe000ed90
    b61c:	20005e86 	.word	0x20005e86

0000b620 <arm_core_mpu_get_max_available_dyn_regions>:
	return get_num_regions() - static_regions_num;
    b620:	4b02      	ldr	r3, [pc, #8]	; (b62c <arm_core_mpu_get_max_available_dyn_regions+0xc>)
    b622:	7818      	ldrb	r0, [r3, #0]
}
    b624:	f1c0 0008 	rsb	r0, r0, #8
    b628:	4770      	bx	lr
    b62a:	bf00      	nop
    b62c:	20005e86 	.word	0x20005e86

0000b630 <arm_core_mpu_buffer_validate>:
{
    b630:	b5f0      	push	{r4, r5, r6, r7, lr}
	r_addr_start = MPU->RBAR & MPU_RBAR_ADDR_Msk;
	r_size_lshift = ((MPU->RASR & MPU_RASR_SIZE_Msk) >>
			MPU_RASR_SIZE_Pos) + 1;
	r_addr_end = r_addr_start + (1UL << r_size_lshift) - 1;

	if (start >= r_addr_start && (start + size - 1) <= r_addr_end) {
    b632:	3901      	subs	r1, #1
	MPU->RNR = index;
    b634:	4d16      	ldr	r5, [pc, #88]	; (b690 <arm_core_mpu_buffer_validate+0x60>)
static inline int mpu_buffer_validate(void *addr, size_t size, int write)
{
	s32_t r_index;

	/* Iterate all mpu regions in reversed order */
	for (r_index = get_num_regions() - 1; r_index >= 0;  r_index--) {
    b636:	2307      	movs	r3, #7
	r_addr_end = r_addr_start + (1UL << r_size_lshift) - 1;
    b638:	2701      	movs	r7, #1
	if (start >= r_addr_start && (start + size - 1) <= r_addr_end) {
    b63a:	4401      	add	r1, r0
	MPU->RNR = index;
    b63c:	60ab      	str	r3, [r5, #8]
	return (MPU->RASR & MPU_RASR_ENABLE_Msk) ? 1 : 0;
    b63e:	692c      	ldr	r4, [r5, #16]
		if (!is_enabled_region(r_index) ||
    b640:	07e4      	lsls	r4, r4, #31
    b642:	d51d      	bpl.n	b680 <arm_core_mpu_buffer_validate+0x50>
	MPU->RNR = r_index;
    b644:	60ab      	str	r3, [r5, #8]
	r_addr_start = MPU->RBAR & MPU_RBAR_ADDR_Msk;
    b646:	68ee      	ldr	r6, [r5, #12]
	r_size_lshift = ((MPU->RASR & MPU_RASR_SIZE_Msk) >>
    b648:	692c      	ldr	r4, [r5, #16]
	r_addr_start = MPU->RBAR & MPU_RBAR_ADDR_Msk;
    b64a:	f026 061f 	bic.w	r6, r6, #31
	if (start >= r_addr_start && (start + size - 1) <= r_addr_end) {
    b64e:	42b0      	cmp	r0, r6
    b650:	d316      	bcc.n	b680 <arm_core_mpu_buffer_validate+0x50>
	r_size_lshift = ((MPU->RASR & MPU_RASR_SIZE_Msk) >>
    b652:	f3c4 0444 	ubfx	r4, r4, #1, #5
    b656:	3401      	adds	r4, #1
	r_addr_end = r_addr_start + (1UL << r_size_lshift) - 1;
    b658:	fa07 f404 	lsl.w	r4, r7, r4
    b65c:	3e01      	subs	r6, #1
    b65e:	4434      	add	r4, r6
	if (start >= r_addr_start && (start + size - 1) <= r_addr_end) {
    b660:	428c      	cmp	r4, r1
    b662:	d30d      	bcc.n	b680 <arm_core_mpu_buffer_validate+0x50>
	MPU->RNR = r_index;
    b664:	60ab      	str	r3, [r5, #8]
	return (MPU->RASR & MPU_RASR_AP_Msk) >> MPU_RASR_AP_Pos;
    b666:	692b      	ldr	r3, [r5, #16]
    b668:	0e1b      	lsrs	r3, r3, #24
    b66a:	f003 0007 	and.w	r0, r3, #7
	if (write) {
    b66e:	b162      	cbz	r2, b68a <arm_core_mpu_buffer_validate+0x5a>
		return r_ap == P_RW_U_RW;
    b670:	1ec2      	subs	r2, r0, #3
    b672:	4253      	negs	r3, r2
    b674:	4153      	adcs	r3, r2
		/* For ARM MPU, higher region number takes priority.
		 * Since we iterate all mpu regions in reversed order, so
		 * we can stop the iteration immediately once we find the
		 * matched region that grants permission or denies access.
		 */
		if (is_user_accessible_region(r_index, write)) {
    b676:	fab3 f383 	clz	r3, r3
    b67a:	095b      	lsrs	r3, r3, #5
    b67c:	425b      	negs	r3, r3
	return mpu_buffer_validate(addr, size, write);
    b67e:	e002      	b.n	b686 <arm_core_mpu_buffer_validate+0x56>
	for (r_index = get_num_regions() - 1; r_index >= 0;  r_index--) {
    b680:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
    b684:	d2da      	bcs.n	b63c <arm_core_mpu_buffer_validate+0xc>
}
    b686:	4618      	mov	r0, r3
    b688:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return r_ap & MPU_USER_READ_ACCESSIBLE_Msk;
    b68a:	f003 0302 	and.w	r3, r3, #2
    b68e:	e7f2      	b.n	b676 <arm_core_mpu_buffer_validate+0x46>
    b690:	e000ed90 	.word	0xe000ed90

0000b694 <arm_core_mpu_configure_static_mpu_regions>:
{
    b694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    b696:	4d1d      	ldr	r5, [pc, #116]	; (b70c <arm_core_mpu_configure_static_mpu_regions+0x78>)
    b698:	4607      	mov	r7, r0
	int reg_index = start_reg_index;
    b69a:	7828      	ldrb	r0, [r5, #0]
    b69c:	460e      	mov	r6, r1
	for (i = 0; i < regions_num; i++) {
    b69e:	2400      	movs	r4, #0
    b6a0:	42b4      	cmp	r4, r6
    b6a2:	da11      	bge.n	b6c8 <arm_core_mpu_configure_static_mpu_regions+0x34>
		if (regions[i]->size == 0U) {
    b6a4:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
    b6a8:	684b      	ldr	r3, [r1, #4]
    b6aa:	b363      	cbz	r3, b706 <arm_core_mpu_configure_static_mpu_regions+0x72>
		((part->size & (part->size - 1)) == 0U)
    b6ac:	1e5a      	subs	r2, r3, #1
		&&
    b6ae:	4213      	tst	r3, r2
    b6b0:	d10c      	bne.n	b6cc <arm_core_mpu_configure_static_mpu_regions+0x38>
		&&
    b6b2:	2b1f      	cmp	r3, #31
    b6b4:	d90a      	bls.n	b6cc <arm_core_mpu_configure_static_mpu_regions+0x38>
		((part->start & (part->size - 1)) == 0U);
    b6b6:	680b      	ldr	r3, [r1, #0]
		&&
    b6b8:	421a      	tst	r2, r3
    b6ba:	d107      	bne.n	b6cc <arm_core_mpu_configure_static_mpu_regions+0x38>
		reg_index = mpu_configure_region(reg_index, regions[i]);
    b6bc:	b2c0      	uxtb	r0, r0
    b6be:	f7ff ff1b 	bl	b4f8 <mpu_configure_region>
		if (reg_index == -EINVAL) {
    b6c2:	f110 0f16 	cmn.w	r0, #22
    b6c6:	d11d      	bne.n	b704 <arm_core_mpu_configure_static_mpu_regions+0x70>
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    b6c8:	7028      	strb	r0, [r5, #0]
}
    b6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b6cc:	f009 fc54 	bl	14f78 <z_arch_is_user_context>
			LOG_ERR("Partition %u: sanity check failed.", i);
    b6d0:	f04f 0600 	mov.w	r6, #0
    b6d4:	2301      	movs	r3, #1
    b6d6:	f363 0607 	bfi	r6, r3, #0, #8
    b6da:	4a0d      	ldr	r2, [pc, #52]	; (b710 <arm_core_mpu_configure_static_mpu_regions+0x7c>)
    b6dc:	4b0d      	ldr	r3, [pc, #52]	; (b714 <arm_core_mpu_configure_static_mpu_regions+0x80>)
    b6de:	1a9b      	subs	r3, r3, r2
    b6e0:	08db      	lsrs	r3, r3, #3
    b6e2:	f363 168f 	bfi	r6, r3, #6, #10
    b6e6:	b138      	cbz	r0, b6f8 <arm_core_mpu_configure_static_mpu_regions+0x64>
    b6e8:	4622      	mov	r2, r4
    b6ea:	490b      	ldr	r1, [pc, #44]	; (b718 <arm_core_mpu_configure_static_mpu_regions+0x84>)
    b6ec:	4630      	mov	r0, r6
    b6ee:	f008 f865 	bl	137bc <log_from_user>
			return -EINVAL;
    b6f2:	f06f 0015 	mvn.w	r0, #21
    b6f6:	e7e7      	b.n	b6c8 <arm_core_mpu_configure_static_mpu_regions+0x34>
			LOG_ERR("Partition %u: sanity check failed.", i);
    b6f8:	4632      	mov	r2, r6
    b6fa:	4621      	mov	r1, r4
    b6fc:	4806      	ldr	r0, [pc, #24]	; (b718 <arm_core_mpu_configure_static_mpu_regions+0x84>)
    b6fe:	f008 f802 	bl	13706 <log_1>
    b702:	e7f6      	b.n	b6f2 <arm_core_mpu_configure_static_mpu_regions+0x5e>
		reg_index++;
    b704:	3001      	adds	r0, #1
	for (i = 0; i < regions_num; i++) {
    b706:	3401      	adds	r4, #1
    b708:	e7ca      	b.n	b6a0 <arm_core_mpu_configure_static_mpu_regions+0xc>
    b70a:	bf00      	nop
    b70c:	20005e86 	.word	0x20005e86
    b710:	00018f84 	.word	0x00018f84
    b714:	00018f94 	.word	0x00018f94
    b718:	0001b93d 	.word	0x0001b93d

0000b71c <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    b71c:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
    b71e:	4b10      	ldr	r3, [pc, #64]	; (b760 <arm_core_mpu_configure_dynamic_mpu_regions+0x44>)
    b720:	4606      	mov	r6, r0
	int reg_index = start_reg_index;
    b722:	7818      	ldrb	r0, [r3, #0]
    b724:	460d      	mov	r5, r1
	for (i = 0; i < regions_num; i++) {
    b726:	2400      	movs	r4, #0
    b728:	42ac      	cmp	r4, r5
    b72a:	db07      	blt.n	b73c <arm_core_mpu_configure_dynamic_mpu_regions+0x20>
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    b72c:	f110 0f16 	cmn.w	r0, #22
    b730:	d003      	beq.n	b73a <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    b732:	4b0c      	ldr	r3, [pc, #48]	; (b764 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
  MPU->RASR = 0U;
    b734:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    b736:	2807      	cmp	r0, #7
    b738:	dd0d      	ble.n	b756 <arm_core_mpu_configure_dynamic_mpu_regions+0x3a>
}
    b73a:	bd70      	pop	{r4, r5, r6, pc}
		if (regions[i]->size == 0U) {
    b73c:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    b740:	684b      	ldr	r3, [r1, #4]
    b742:	b133      	cbz	r3, b752 <arm_core_mpu_configure_dynamic_mpu_regions+0x36>
		reg_index = mpu_configure_region(reg_index, regions[i]);
    b744:	b2c0      	uxtb	r0, r0
    b746:	f7ff fed7 	bl	b4f8 <mpu_configure_region>
		if (reg_index == -EINVAL) {
    b74a:	f110 0f16 	cmn.w	r0, #22
    b74e:	d0f4      	beq.n	b73a <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		reg_index++;
    b750:	3001      	adds	r0, #1
	for (i = 0; i < regions_num; i++) {
    b752:	3401      	adds	r4, #1
    b754:	e7e8      	b.n	b728 <arm_core_mpu_configure_dynamic_mpu_regions+0xc>
  MPU->RNR = rnr;
    b756:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    b758:	611a      	str	r2, [r3, #16]
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    b75a:	3001      	adds	r0, #1
    b75c:	e7eb      	b.n	b736 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
    b75e:	bf00      	nop
    b760:	20005e86 	.word	0x20005e86
    b764:	e000ed90 	.word	0xe000ed90

0000b768 <malloc_prepare>:
	ARG_UNUSED(unused);

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	z_malloc_partition.start = (u32_t)heap_base;
#else
	z_malloc_partition.start = USED_RAM_END_ADDR;
    b768:	4a05      	ldr	r2, [pc, #20]	; (b780 <malloc_prepare+0x18>)
    b76a:	4b06      	ldr	r3, [pc, #24]	; (b784 <malloc_prepare+0x1c>)
    b76c:	6013      	str	r3, [r2, #0]
#endif
	z_malloc_partition.size = MAX_HEAP_SIZE;
    b76e:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    b772:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    b776:	6053      	str	r3, [r2, #4]
	z_malloc_partition.attr = K_MEM_PARTITION_P_RW_U_RW;
    b778:	4b03      	ldr	r3, [pc, #12]	; (b788 <malloc_prepare+0x20>)
    b77a:	6093      	str	r3, [r2, #8]
	return 0;
}
    b77c:	2000      	movs	r0, #0
    b77e:	4770      	bx	lr
    b780:	20003e1c 	.word	0x20003e1c
    b784:	20014800 	.word	0x20014800
    b788:	130b0000 	.word	0x130b0000

0000b78c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    b78c:	4b01      	ldr	r3, [pc, #4]	; (b794 <__stdout_hook_install+0x8>)
    b78e:	6018      	str	r0, [r3, #0]
}
    b790:	4770      	bx	lr
    b792:	bf00      	nop
    b794:	2000c6c8 	.word	0x2000c6c8

0000b798 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    b798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
    b79a:	4f08      	ldr	r7, [pc, #32]	; (b7bc <z_impl_zephyr_read_stdin+0x24>)
{
    b79c:	4606      	mov	r6, r0
    b79e:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
    b7a0:	2400      	movs	r4, #0
    b7a2:	42ac      	cmp	r4, r5
    b7a4:	da08      	bge.n	b7b8 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
    b7a6:	683b      	ldr	r3, [r7, #0]
    b7a8:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    b7aa:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
    b7ac:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    b7ae:	f104 0401 	add.w	r4, r4, #1
    b7b2:	d001      	beq.n	b7b8 <z_impl_zephyr_read_stdin+0x20>
    b7b4:	280d      	cmp	r0, #13
    b7b6:	d1f4      	bne.n	b7a2 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
    b7b8:	4620      	mov	r0, r4
    b7ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b7bc:	2000c6c4 	.word	0x2000c6c4

0000b7c0 <z_impl_zephyr_write_stdout>:
	return z_impl_zephyr_read_stdin((char *)buf, nbytes);
}
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    b7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b7c2:	4f0a      	ldr	r7, [pc, #40]	; (b7ec <z_impl_zephyr_write_stdout+0x2c>)
    b7c4:	460e      	mov	r6, r1
    b7c6:	1e44      	subs	r4, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    b7c8:	f1c0 0501 	rsb	r5, r0, #1
    b7cc:	192b      	adds	r3, r5, r4
    b7ce:	429e      	cmp	r6, r3
    b7d0:	dc01      	bgt.n	b7d6 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    b7d2:	4630      	mov	r0, r6
    b7d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    b7d6:	7863      	ldrb	r3, [r4, #1]
    b7d8:	2b0a      	cmp	r3, #10
    b7da:	d102      	bne.n	b7e2 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    b7dc:	683b      	ldr	r3, [r7, #0]
    b7de:	200d      	movs	r0, #13
    b7e0:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    b7e2:	683b      	ldr	r3, [r7, #0]
    b7e4:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    b7e8:	4798      	blx	r3
    b7ea:	e7ef      	b.n	b7cc <z_impl_zephyr_write_stdout+0xc>
    b7ec:	2000c6c8 	.word	0x2000c6c8

0000b7f0 <_exit>:
	return 0;
}
FUNC_ALIAS(_fstat, fstat, int);

void _exit(int status)
{
    b7f0:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
    b7f2:	2105      	movs	r1, #5
    b7f4:	4801      	ldr	r0, [pc, #4]	; (b7fc <_exit+0xc>)
    b7f6:	f7ff ffe3 	bl	b7c0 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
		;
    b7fa:	e7fe      	b.n	b7fa <_exit+0xa>
    b7fc:	0001b986 	.word	0x0001b986

0000b800 <_sbrk>:
void *_sbrk(int count)
{
#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	void *ptr = heap_base + heap_sz;
#else
	void *ptr = _end + heap_sz;
    b800:	4907      	ldr	r1, [pc, #28]	; (b820 <_sbrk+0x20>)
    b802:	680b      	ldr	r3, [r1, #0]
{
    b804:	b510      	push	{r4, lr}
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    b806:	18c4      	adds	r4, r0, r3
    b808:	4806      	ldr	r0, [pc, #24]	; (b824 <_sbrk+0x24>)
    b80a:	f1c0 5200 	rsb	r2, r0, #536870912	; 0x20000000
    b80e:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    b812:	4294      	cmp	r4, r2
	void *ptr = _end + heap_sz;
    b814:	bf3a      	itte	cc
    b816:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
    b818:	600c      	strcc	r4, [r1, #0]
		return ptr;
	} else {
		return (void *)-1;
    b81a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	}
}
    b81e:	bd10      	pop	{r4, pc}
    b820:	20002290 	.word	0x20002290
    b824:	20014800 	.word	0x20014800

0000b828 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    b828:	7982      	ldrb	r2, [r0, #6]

	return buf - pool->__bufs;
    b82a:	4b04      	ldr	r3, [pc, #16]	; (b83c <net_buf_id+0x14>)
    b82c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    b830:	69db      	ldr	r3, [r3, #28]
    b832:	1ac0      	subs	r0, r0, r3
}
    b834:	4b02      	ldr	r3, [pc, #8]	; (b840 <net_buf_id+0x18>)
	return buf - pool->__bufs;
    b836:	10c0      	asrs	r0, r0, #3
}
    b838:	4358      	muls	r0, r3
    b83a:	4770      	bx	lr
    b83c:	20011bec 	.word	0x20011bec
    b840:	aaaaaaab 	.word	0xaaaaaaab

0000b844 <fixed_data_alloc>:
	.ref   = generic_data_ref,
	.unref = mem_pool_data_unref,
};

static u8_t *fixed_data_alloc(struct net_buf *buf, size_t *size, s32_t timeout)
{
    b844:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    b846:	4b09      	ldr	r3, [pc, #36]	; (b86c <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    b848:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    b84a:	eb03 1342 	add.w	r3, r3, r2, lsl #5

	*size = MIN(fixed->data_size, *size);
    b84e:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    b850:	699b      	ldr	r3, [r3, #24]
    b852:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
    b854:	6823      	ldr	r3, [r4, #0]
    b856:	429a      	cmp	r2, r3
    b858:	bf94      	ite	ls
    b85a:	600a      	strls	r2, [r1, #0]
    b85c:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    b85e:	f7ff ffe3 	bl	b828 <net_buf_id>
    b862:	e9d4 2300 	ldrd	r2, r3, [r4]
}
    b866:	fb02 3000 	mla	r0, r2, r0, r3
    b86a:	bd10      	pop	{r4, pc}
    b86c:	20011bec 	.word	0x20011bec

0000b870 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
    b870:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b874:	4605      	mov	r5, r0
    b876:	9101      	str	r1, [sp, #4]
    b878:	4616      	mov	r6, r2
	return (u32_t)k_uptime_get();
    b87a:	f009 fbc1 	bl	15000 <k_uptime_get>
    b87e:	4607      	mov	r7, r0
    b880:	f04f 0320 	mov.w	r3, #32
    b884:	f3ef 8811 	mrs	r8, BASEPRI
    b888:	f383 8811 	msr	BASEPRI, r3
    b88c:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    b890:	8a6b      	ldrh	r3, [r5, #18]
    b892:	2b00      	cmp	r3, #0
    b894:	d041      	beq.n	b91a <net_buf_alloc_len+0xaa>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    b896:	8a2a      	ldrh	r2, [r5, #16]
    b898:	429a      	cmp	r2, r3
    b89a:	d92c      	bls.n	b8f6 <net_buf_alloc_len+0x86>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
    b89c:	2100      	movs	r1, #0
    b89e:	4628      	mov	r0, r5
    b8a0:	f009 fbbe 	bl	15020 <k_queue_get>
			if (buf) {
    b8a4:	4604      	mov	r4, r0
    b8a6:	b330      	cbz	r0, b8f6 <net_buf_alloc_len+0x86>
	__asm__ volatile(
    b8a8:	f388 8811 	msr	BASEPRI, r8
    b8ac:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    b8b0:	9b01      	ldr	r3, [sp, #4]
    b8b2:	2b00      	cmp	r3, #0
    b8b4:	d040      	beq.n	b938 <net_buf_alloc_len+0xc8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
    b8b6:	1c73      	adds	r3, r6, #1
    b8b8:	2b01      	cmp	r3, #1
    b8ba:	d906      	bls.n	b8ca <net_buf_alloc_len+0x5a>
    b8bc:	f009 fba0 	bl	15000 <k_uptime_get>
			u32_t diff = k_uptime_get_32() - alloc_start;
    b8c0:	1bc0      	subs	r0, r0, r7

			timeout -= MIN(timeout, diff);
    b8c2:	42b0      	cmp	r0, r6
    b8c4:	bf94      	ite	ls
    b8c6:	1a36      	subls	r6, r6, r0
    b8c8:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    b8ca:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    b8cc:	4f20      	ldr	r7, [pc, #128]	; (b950 <net_buf_alloc_len+0xe0>)
    b8ce:	eb07 1343 	add.w	r3, r7, r3, lsl #5
    b8d2:	4632      	mov	r2, r6
    b8d4:	699b      	ldr	r3, [r3, #24]
    b8d6:	681b      	ldr	r3, [r3, #0]
    b8d8:	a901      	add	r1, sp, #4
    b8da:	681b      	ldr	r3, [r3, #0]
    b8dc:	4620      	mov	r0, r4
    b8de:	4798      	blx	r3
    b8e0:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    b8e2:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    b8e4:	bb48      	cbnz	r0, b93a <net_buf_alloc_len+0xca>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
    b8e6:	79a0      	ldrb	r0, [r4, #6]
    b8e8:	4621      	mov	r1, r4
    b8ea:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    b8ee:	f00c fdb9 	bl	18464 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    b8f2:	462c      	mov	r4, r5
    b8f4:	e01c      	b.n	b930 <net_buf_alloc_len+0xc0>
		uninit_count = pool->uninit_count--;
    b8f6:	8a6b      	ldrh	r3, [r5, #18]
    b8f8:	1e5a      	subs	r2, r3, #1
    b8fa:	826a      	strh	r2, [r5, #18]
    b8fc:	f388 8811 	msr	BASEPRI, r8
    b900:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    b904:	8a2c      	ldrh	r4, [r5, #16]
    b906:	1ae4      	subs	r4, r4, r3
    b908:	69eb      	ldr	r3, [r5, #28]
    b90a:	2218      	movs	r2, #24
    b90c:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
    b910:	4b0f      	ldr	r3, [pc, #60]	; (b950 <net_buf_alloc_len+0xe0>)
    b912:	1aed      	subs	r5, r5, r3
    b914:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
    b916:	71a5      	strb	r5, [r4, #6]
		goto success;
    b918:	e7ca      	b.n	b8b0 <net_buf_alloc_len+0x40>
    b91a:	f388 8811 	msr	BASEPRI, r8
    b91e:	f3bf 8f6f 	isb	sy
	buf = k_lifo_get(&pool->free, timeout);
    b922:	4631      	mov	r1, r6
    b924:	4628      	mov	r0, r5
    b926:	f009 fb7b 	bl	15020 <k_queue_get>
	if (!buf) {
    b92a:	4604      	mov	r4, r0
    b92c:	2800      	cmp	r0, #0
    b92e:	d1bf      	bne.n	b8b0 <net_buf_alloc_len+0x40>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
    b930:	4620      	mov	r0, r4
    b932:	b002      	add	sp, #8
    b934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
    b938:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
    b93a:	2300      	movs	r3, #0
	buf->ref   = 1U;
    b93c:	2201      	movs	r2, #1
	buf->frags = NULL;
    b93e:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
    b940:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
    b942:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
    b944:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
    b946:	6923      	ldr	r3, [r4, #16]
    b948:	81e2      	strh	r2, [r4, #14]
    b94a:	60a3      	str	r3, [r4, #8]
	return buf;
    b94c:	e7f0      	b.n	b930 <net_buf_alloc_len+0xc0>
    b94e:	bf00      	nop
    b950:	20011bec 	.word	0x20011bec

0000b954 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    b954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b956:	4d15      	ldr	r5, [pc, #84]	; (b9ac <net_buf_unref+0x58>)
    b958:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    b95a:	2600      	movs	r6, #0
	while (buf) {
    b95c:	b904      	cbnz	r4, b960 <net_buf_unref+0xc>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    b95e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
    b960:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    b962:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
    b964:	3b01      	subs	r3, #1
    b966:	b2db      	uxtb	r3, r3
    b968:	7123      	strb	r3, [r4, #4]
    b96a:	2b00      	cmp	r3, #0
    b96c:	d1f7      	bne.n	b95e <net_buf_unref+0xa>
		if (buf->__buf) {
    b96e:	6921      	ldr	r1, [r4, #16]
    b970:	b159      	cbz	r1, b98a <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    b972:	7963      	ldrb	r3, [r4, #5]
    b974:	079b      	lsls	r3, r3, #30
    b976:	d407      	bmi.n	b988 <net_buf_unref+0x34>
	pool->alloc->cb->unref(buf, data);
    b978:	79a3      	ldrb	r3, [r4, #6]
    b97a:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    b97e:	4620      	mov	r0, r4
    b980:	699b      	ldr	r3, [r3, #24]
    b982:	681b      	ldr	r3, [r3, #0]
    b984:	689b      	ldr	r3, [r3, #8]
    b986:	4798      	blx	r3
			buf->__buf = NULL;
    b988:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
    b98a:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    b98c:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
    b98e:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
    b992:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
    b994:	695b      	ldr	r3, [r3, #20]
    b996:	b11b      	cbz	r3, b9a0 <net_buf_unref+0x4c>
			pool->destroy(buf);
    b998:	4620      	mov	r0, r4
    b99a:	4798      	blx	r3
{
    b99c:	463c      	mov	r4, r7
    b99e:	e7dd      	b.n	b95c <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
    b9a0:	4621      	mov	r1, r4
    b9a2:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    b9a6:	f00c fd5d 	bl	18464 <k_queue_prepend>
    b9aa:	e7f7      	b.n	b99c <net_buf_unref+0x48>
    b9ac:	20011bec 	.word	0x20011bec

0000b9b0 <check_used_port>:
#if defined(CONFIG_NET_UDP) || defined(CONFIG_NET_TCP)
static int check_used_port(enum net_ip_protocol ip_proto,
			   u16_t local_port,
			   const struct sockaddr *local_addr)

{
    b9b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b9b4:	4c15      	ldr	r4, [pc, #84]	; (ba0c <check_used_port+0x5c>)
    b9b6:	460f      	mov	r7, r1
    b9b8:	4615      	mov	r5, r2
    b9ba:	f504 7646 	add.w	r6, r4, #792	; 0x318
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
		if (!net_context_is_used(&contexts[i])) {
			continue;
		}

		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
    b9be:	4680      	mov	r8, r0

		if (local_addr->sa_family == AF_INET6) {
			if (net_ipv6_addr_cmp(
				    net_sin6_ptr(&contexts[i].local)->
							     sin6_addr,
				    &((struct sockaddr_in6 *)
    b9c0:	f102 0904 	add.w	r9, r2, #4
		if (!net_context_is_used(&contexts[i])) {
    b9c4:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    b9c8:	07db      	lsls	r3, r3, #31
    b9ca:	d405      	bmi.n	b9d8 <check_used_port+0x28>
    b9cc:	3484      	adds	r4, #132	; 0x84
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
    b9ce:	42a6      	cmp	r6, r4
    b9d0:	d1f8      	bne.n	b9c4 <check_used_port+0x14>
				return -EEXIST;
			}
		}
	}

	return 0;
    b9d2:	2000      	movs	r0, #0
}
    b9d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
    b9d8:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
    b9dc:	4543      	cmp	r3, r8
    b9de:	d1f5      	bne.n	b9cc <check_used_port+0x1c>
    b9e0:	8be3      	ldrh	r3, [r4, #30]
    b9e2:	42bb      	cmp	r3, r7
    b9e4:	d1f2      	bne.n	b9cc <check_used_port+0x1c>
		if (local_addr->sa_family == AF_INET6) {
    b9e6:	882b      	ldrh	r3, [r5, #0]
    b9e8:	6a20      	ldr	r0, [r4, #32]
    b9ea:	2b02      	cmp	r3, #2
    b9ec:	d108      	bne.n	ba00 <check_used_port+0x50>
 *  @return True if the addresses are the same, false otherwise.
 */
static inline bool net_ipv6_addr_cmp(const struct in6_addr *addr1,
				     const struct in6_addr *addr2)
{
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
    b9ee:	2210      	movs	r2, #16
    b9f0:	4649      	mov	r1, r9
    b9f2:	f7f6 fcb5 	bl	2360 <memcmp>
			if (net_ipv6_addr_cmp(
    b9f6:	2800      	cmp	r0, #0
    b9f8:	d1e8      	bne.n	b9cc <check_used_port+0x1c>
				return -EEXIST;
    b9fa:	f06f 0010 	mvn.w	r0, #16
    b9fe:	e7e9      	b.n	b9d4 <check_used_port+0x24>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
    ba00:	686a      	ldr	r2, [r5, #4]
    ba02:	6803      	ldr	r3, [r0, #0]
			if (net_ipv4_addr_cmp(
    ba04:	429a      	cmp	r2, r3
    ba06:	d1e1      	bne.n	b9cc <check_used_port+0x1c>
    ba08:	e7f7      	b.n	b9fa <check_used_port+0x4a>
    ba0a:	bf00      	nop
    ba0c:	20003e28 	.word	0x20003e28

0000ba10 <find_available_port>:

static u16_t find_available_port(struct net_context *context,
				    const struct sockaddr *addr)
{
    ba10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u16_t local_port;

	do {
		local_port = sys_rand32_get() | 0x8000;
    ba12:	4f09      	ldr	r7, [pc, #36]	; (ba38 <find_available_port+0x28>)
{
    ba14:	4605      	mov	r5, r0
    ba16:	460e      	mov	r6, r1
		local_port = sys_rand32_get() | 0x8000;
    ba18:	f7fd fd2e 	bl	9478 <sys_rand32_get>
    ba1c:	ea40 0407 	orr.w	r4, r0, r7
    ba20:	ba64      	rev16	r4, r4
    ba22:	b2a4      	uxth	r4, r4
		if (local_port <= 1023U) {
			/* 0 - 1023 ports are reserved */
			continue;
		}
	} while (check_used_port(
    ba24:	4632      	mov	r2, r6
    ba26:	4621      	mov	r1, r4
    ba28:	f895 007c 	ldrb.w	r0, [r5, #124]	; 0x7c
    ba2c:	f7ff ffc0 	bl	b9b0 <check_used_port>
				net_context_get_ip_proto(context),
				htons(local_port), addr) == -EEXIST);
    ba30:	3011      	adds	r0, #17
    ba32:	d0f1      	beq.n	ba18 <find_available_port+0x8>

	return htons(local_port);
}
    ba34:	4620      	mov	r0, r4
    ba36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ba38:	ffff8000 	.word	0xffff8000

0000ba3c <net_context_packet_received>:
enum net_verdict net_context_packet_received(struct net_conn *conn,
					     struct net_pkt *pkt,
					     union net_ip_header *ip_hdr,
					     union net_proto_header *proto_hdr,
					     void *user_data)
{
    ba3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ba40:	4c24      	ldr	r4, [pc, #144]	; (bad4 <net_context_packet_received+0x98>)
    ba42:	460f      	mov	r7, r1
    ba44:	b085      	sub	sp, #20
    ba46:	4693      	mov	fp, r2
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
    ba48:	2100      	movs	r1, #0
    ba4a:	46a1      	mov	r9, r4
    ba4c:	2584      	movs	r5, #132	; 0x84
		if (!net_context_is_used(&contexts[i])) {
    ba4e:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
    ba52:	07d2      	lsls	r2, r2, #31
    ba54:	fb05 f601 	mul.w	r6, r5, r1
    ba58:	d502      	bpl.n	ba60 <net_context_packet_received+0x24>
		if (contexts[i].conn_handler == conn_handler) {
    ba5a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    ba5c:	4290      	cmp	r0, r2
    ba5e:	d00e      	beq.n	ba7e <net_context_packet_received+0x42>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
    ba60:	3101      	adds	r1, #1
    ba62:	2906      	cmp	r1, #6
    ba64:	f104 0484 	add.w	r4, r4, #132	; 0x84
    ba68:	d1f1      	bne.n	ba4e <net_context_packet_received+0x12>
	enum net_verdict verdict = NET_DROP;

	NET_ASSERT(context);
	NET_ASSERT(net_pkt_iface(pkt));

	k_mutex_lock(&context->lock, K_FOREVER);
    ba6a:	2008      	movs	r0, #8
    ba6c:	f009 fb41 	bl	150f2 <k_mutex_lock.constprop.38>
static inline void net_context_set_iface(struct net_context *context,
					 struct net_if *iface)
{
	NET_ASSERT(iface);

	context->iface = net_if_get_by_iface(iface);
    ba70:	6a78      	ldr	r0, [r7, #36]	; 0x24
    ba72:	f000 ff29 	bl	c8c8 <net_if_get_by_iface>
    ba76:	2300      	movs	r3, #0
    ba78:	f883 3080 	strb.w	r3, [r3, #128]	; 0x80
    ba7c:	deff      	udf	#255	; 0xff
    ba7e:	f106 0808 	add.w	r8, r6, #8
    ba82:	44c8      	add	r8, r9
    ba84:	4640      	mov	r0, r8
    ba86:	9303      	str	r3, [sp, #12]
    ba88:	f009 fb33 	bl	150f2 <k_mutex_lock.constprop.38>
    ba8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    ba8e:	f000 ff1b 	bl	c8c8 <net_if_get_by_iface>
	net_pkt_set_context(pkt, context);

	/* If there is no callback registered, then we can only drop
	 * the packet.
	 */
	if (!context->recv_cb) {
    ba92:	eb09 0206 	add.w	r2, r9, r6
    ba96:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}

static inline void net_pkt_set_context(struct net_pkt *pkt,
				       struct net_context *ctx)
{
	pkt->context = ctx;
    ba9a:	623c      	str	r4, [r7, #32]
    ba9c:	f8d2 a044 	ldr.w	sl, [r2, #68]	; 0x44
    baa0:	f1ba 0f00 	cmp.w	sl, #0
    baa4:	d014      	beq.n	bad0 <net_context_packet_received+0x94>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
		net_stats_update_tcp_recv(net_pkt_iface(pkt),
					  net_pkt_remaining_data(pkt));
	}

	context->recv_cb(context, pkt, ip_hdr, proto_hdr, 0, user_data);
    baa6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    baa8:	9201      	str	r2, [sp, #4]
    baaa:	2500      	movs	r5, #0
    baac:	4620      	mov	r0, r4
    baae:	9500      	str	r5, [sp, #0]
    bab0:	9b03      	ldr	r3, [sp, #12]
    bab2:	465a      	mov	r2, fp
    bab4:	4639      	mov	r1, r7
    bab6:	47d0      	blx	sl

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	k_sem_give(&context->recv_data_wait);
    bab8:	f106 0050 	add.w	r0, r6, #80	; 0x50
    babc:	4448      	add	r0, r9
    babe:	f009 fb3c 	bl	1513a <k_sem_give>
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	verdict = NET_OK;

unlock:
	k_mutex_unlock(&context->lock);
    bac2:	4640      	mov	r0, r8
    bac4:	f009 fb29 	bl	1511a <k_mutex_unlock>

	return verdict;
}
    bac8:	4628      	mov	r0, r5
    baca:	b005      	add	sp, #20
    bacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	enum net_verdict verdict = NET_DROP;
    bad0:	2502      	movs	r5, #2
    bad2:	e7f6      	b.n	bac2 <net_context_packet_received+0x86>
    bad4:	20003e28 	.word	0x20003e28

0000bad8 <net_context_get>:
{
    bad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (family == AF_INET) {
    badc:	2801      	cmp	r0, #1
{
    bade:	4606      	mov	r6, r0
    bae0:	4688      	mov	r8, r1
    bae2:	4693      	mov	fp, r2
    bae4:	9301      	str	r3, [sp, #4]
	if (family == AF_INET) {
    bae6:	f000 80a0 	beq.w	bc2a <net_context_get+0x152>
	if (!IS_ENABLED(CONFIG_NET_SOCKETS_CAN) && family == AF_CAN) {
    baea:	2804      	cmp	r0, #4
    baec:	f000 809d 	beq.w	bc2a <net_context_get+0x152>
	if (type == SOCK_RAW) {
    baf0:	2903      	cmp	r1, #3
    baf2:	d006      	beq.n	bb02 <net_context_get+0x2a>
		if (family == AF_PACKET || family == AF_CAN) {
    baf4:	1ec3      	subs	r3, r0, #3
    baf6:	2b01      	cmp	r3, #1
    baf8:	f240 809d 	bls.w	bc36 <net_context_get+0x15e>
	if (type == SOCK_STREAM) {
    bafc:	2901      	cmp	r1, #1
    bafe:	f000 809a 	beq.w	bc36 <net_context_get+0x15e>
	if (ip_proto == IPPROTO_TCP) {
    bb02:	f1bb 0f06 	cmp.w	fp, #6
    bb06:	f000 8099 	beq.w	bc3c <net_context_get+0x164>
	if (family != AF_INET && family != AF_INET6 && family != AF_PACKET &&
    bb0a:	1e73      	subs	r3, r6, #1
    bb0c:	2b03      	cmp	r3, #3
    bb0e:	f200 808f 	bhi.w	bc30 <net_context_get+0x158>
	if (type != SOCK_DGRAM && type != SOCK_STREAM && type != SOCK_RAW) {
    bb12:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    bb16:	2b02      	cmp	r3, #2
    bb18:	f200 808d 	bhi.w	bc36 <net_context_get+0x15e>
	if (type != SOCK_RAW && ip_proto != IPPROTO_UDP &&
    bb1c:	f1b8 0f03 	cmp.w	r8, #3
    bb20:	d003      	beq.n	bb2a <net_context_get+0x52>
    bb22:	f1bb 0f11 	cmp.w	fp, #17
    bb26:	f040 8089 	bne.w	bc3c <net_context_get+0x164>
	if (!context) {
    bb2a:	9b01      	ldr	r3, [sp, #4]
    bb2c:	2b00      	cmp	r3, #0
    bb2e:	f000 8088 	beq.w	bc42 <net_context_get+0x16a>
	k_sem_take(&contexts_lock, K_FOREVER);
    bb32:	4c45      	ldr	r4, [pc, #276]	; (bc48 <net_context_get+0x170>)
    bb34:	4845      	ldr	r0, [pc, #276]	; (bc4c <net_context_get+0x174>)
    bb36:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    bb3a:	f009 fab4 	bl	150a6 <k_sem_take>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
    bb3e:	2700      	movs	r7, #0
    bb40:	46a1      	mov	r9, r4
    bb42:	2284      	movs	r2, #132	; 0x84
		if (net_context_is_used(&contexts[i])) {
    bb44:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    bb48:	f013 0a01 	ands.w	sl, r3, #1
    bb4c:	fb02 f507 	mul.w	r5, r2, r7
    bb50:	d00d      	beq.n	bb6e <net_context_get+0x96>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
    bb52:	3701      	adds	r7, #1
    bb54:	2f06      	cmp	r7, #6
    bb56:	f104 0484 	add.w	r4, r4, #132	; 0x84
    bb5a:	d1f3      	bne.n	bb44 <net_context_get+0x6c>
	int i, ret = -ENOENT;
    bb5c:	f06f 0401 	mvn.w	r4, #1
	k_sem_give(&contexts_lock);
    bb60:	483a      	ldr	r0, [pc, #232]	; (bc4c <net_context_get+0x174>)
    bb62:	f009 faea 	bl	1513a <k_sem_give>
}
    bb66:	4620      	mov	r0, r4
    bb68:	b003      	add	sp, #12
    bb6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
__ssp_bos_icheck3(memset, void *, int)
    bb6e:	2284      	movs	r2, #132	; 0x84
    bb70:	4651      	mov	r1, sl
    bb72:	4620      	mov	r0, r4
    bb74:	f7f6 fc3d 	bl	23f2 <memset>
		contexts[i].iface = -1;
    bb78:	eb09 0205 	add.w	r2, r9, r5
    bb7c:	21ff      	movs	r1, #255	; 0xff
    bb7e:	f882 1080 	strb.w	r1, [r2, #128]	; 0x80
		contexts[i].flags = 0U;
    bb82:	f8a2 a07e 	strh.w	sl, [r2, #126]	; 0x7e
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    bb86:	2101      	movs	r1, #1
    bb88:	3204      	adds	r2, #4
    bb8a:	f3bf 8f5b 	dmb	ish
    bb8e:	e852 0f00 	ldrex	r0, [r2]
    bb92:	e842 1300 	strex	r3, r1, [r2]
    bb96:	2b00      	cmp	r3, #0
    bb98:	d1f9      	bne.n	bb8e <net_context_get+0xb6>
    bb9a:	f3bf 8f5b 	dmb	ish
		flag = family << 3;
    bb9e:	00f2      	lsls	r2, r6, #3
	context->flags |= flag;
    bba0:	b2d2      	uxtb	r2, r2
	context->flags |= flag;
    bba2:	ea42 1888 	orr.w	r8, r2, r8, lsl #6
    bba6:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
	context->proto = proto;
    bbaa:	f8a4 b07c 	strh.w	fp, [r4, #124]	; 0x7c
	context->flags |= flag;
    bbae:	ea48 0802 	orr.w	r8, r8, r2
		(void)memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
    bbb2:	f105 0028 	add.w	r0, r5, #40	; 0x28
    bbb6:	f8a4 807e 	strh.w	r8, [r4, #126]	; 0x7e
    bbba:	2218      	movs	r2, #24
    bbbc:	4651      	mov	r1, sl
    bbbe:	4448      	add	r0, r9
    bbc0:	f7f6 fc17 	bl	23f2 <memset>
		(void)memset(&contexts[i].local, 0,
    bbc4:	f105 021c 	add.w	r2, r5, #28
    bbc8:	eb09 0802 	add.w	r8, r9, r2
		if (family == AF_INET6) {
    bbcc:	2e02      	cmp	r6, #2
    bbce:	f849 a002 	str.w	sl, [r9, r2]
    bbd2:	e9c8 aa01 	strd	sl, sl, [r8, #4]
    bbd6:	d019      	beq.n	bc0c <net_context_get+0x134>
		k_sem_init(&contexts[i].recv_data_wait, 1, UINT_MAX);
    bbd8:	f105 0050 	add.w	r0, r5, #80	; 0x50
    bbdc:	4448      	add	r0, r9
		k_mutex_init(&contexts[i].lock);
    bbde:	3508      	adds	r5, #8
		k_sem_init(&contexts[i].recv_data_wait, 1, UINT_MAX);
    bbe0:	f009 fa71 	bl	150c6 <k_sem_init.constprop.35>
		k_mutex_init(&contexts[i].lock);
    bbe4:	444d      	add	r5, r9
    bbe6:	f009 fa47 	bl	15078 <z_arch_is_user_context>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)
    bbea:	b1d0      	cbz	r0, bc22 <net_context_get+0x14a>
	register u32_t ret __asm__("r0") = arg1;
    bbec:	4628      	mov	r0, r5
	register u32_t r6 __asm__("r6") = call_id;
    bbee:	2643      	movs	r6, #67	; 0x43
	__asm__ volatile("svc %[svid]\n"
    bbf0:	df03      	svc	3
		contexts[i].flags |= NET_CONTEXT_IN_USE;
    bbf2:	2384      	movs	r3, #132	; 0x84
    bbf4:	fb03 9707 	mla	r7, r3, r7, r9
    bbf8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
    bbfc:	f043 0301 	orr.w	r3, r3, #1
    bc00:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		*context = &contexts[i];
    bc04:	9b01      	ldr	r3, [sp, #4]
    bc06:	601c      	str	r4, [r3, #0]
		ret = 0;
    bc08:	2400      	movs	r4, #0
		break;
    bc0a:	e7a9      	b.n	bb60 <net_context_get+0x88>
			addr6->sin6_port = find_available_port(&contexts[i],
    bc0c:	4641      	mov	r1, r8
    bc0e:	4620      	mov	r0, r4
    bc10:	f7ff fefe 	bl	ba10 <find_available_port>
    bc14:	f8a8 0002 	strh.w	r0, [r8, #2]
			if (!addr6->sin6_port) {
    bc18:	2800      	cmp	r0, #0
    bc1a:	d1dd      	bne.n	bbd8 <net_context_get+0x100>
				ret = -EADDRINUSE;
    bc1c:	f06f 046f 	mvn.w	r4, #111	; 0x6f
    bc20:	e79e      	b.n	bb60 <net_context_get+0x88>
    bc22:	4628      	mov	r0, r5
    bc24:	f00c fb88 	bl	18338 <z_impl_k_mutex_init>
    bc28:	e7e3      	b.n	bbf2 <net_context_get+0x11a>
		return -EPFNOSUPPORT;
    bc2a:	f06f 045f 	mvn.w	r4, #95	; 0x5f
    bc2e:	e79a      	b.n	bb66 <net_context_get+0x8e>
		return -EAFNOSUPPORT;
    bc30:	f06f 0469 	mvn.w	r4, #105	; 0x69
    bc34:	e797      	b.n	bb66 <net_context_get+0x8e>
			return -EPROTOTYPE;
    bc36:	f06f 046a 	mvn.w	r4, #106	; 0x6a
    bc3a:	e794      	b.n	bb66 <net_context_get+0x8e>
		return -EPROTONOSUPPORT;
    bc3c:	f06f 047a 	mvn.w	r4, #122	; 0x7a
    bc40:	e791      	b.n	bb66 <net_context_get+0x8e>
		return -EINVAL;
    bc42:	f06f 0415 	mvn.w	r4, #21
    bc46:	e78e      	b.n	bb66 <net_context_get+0x8e>
    bc48:	20003e28 	.word	0x20003e28
    bc4c:	20004140 	.word	0x20004140

0000bc50 <net_context_put>:
{
    bc50:	b570      	push	{r4, r5, r6, lr}
	if (!PART_OF_ARRAY(contexts, context)) {
    bc52:	4605      	mov	r5, r0
    bc54:	b1b8      	cbz	r0, bc86 <net_context_put+0x36>
    bc56:	4b0d      	ldr	r3, [pc, #52]	; (bc8c <net_context_put+0x3c>)
    bc58:	4298      	cmp	r0, r3
    bc5a:	d314      	bcc.n	bc86 <net_context_put+0x36>
    bc5c:	f503 7346 	add.w	r3, r3, #792	; 0x318
    bc60:	4298      	cmp	r0, r3
    bc62:	d210      	bcs.n	bc86 <net_context_put+0x36>
	k_mutex_lock(&context->lock, K_FOREVER);
    bc64:	f100 0608 	add.w	r6, r0, #8
	context->connect_cb = NULL;
    bc68:	2400      	movs	r4, #0
	k_mutex_lock(&context->lock, K_FOREVER);
    bc6a:	4630      	mov	r0, r6
    bc6c:	f009 fa41 	bl	150f2 <k_mutex_lock.constprop.38>
	context->connect_cb = NULL;
    bc70:	64ec      	str	r4, [r5, #76]	; 0x4c
	context->send_cb = NULL;
    bc72:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
	net_context_unref(context);
    bc76:	4628      	mov	r0, r5
    bc78:	f009 fa7d 	bl	15176 <net_context_unref>
	k_mutex_unlock(&context->lock);
    bc7c:	4630      	mov	r0, r6
    bc7e:	f009 fa4c 	bl	1511a <k_mutex_unlock>
	return ret;
    bc82:	4620      	mov	r0, r4
}
    bc84:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    bc86:	f06f 0015 	mvn.w	r0, #21
    bc8a:	e7fb      	b.n	bc84 <net_context_put+0x34>
    bc8c:	20003e28 	.word	0x20003e28

0000bc90 <net_context_recv>:

int net_context_recv(struct net_context *context,
		     net_context_recv_cb_t cb,
		     s32_t timeout,
		     void *user_data)
{
    bc90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bc94:	461e      	mov	r6, r3
	int ret;
	NET_ASSERT(context);

	if (!net_context_is_used(context)) {
    bc96:	f8b0 307e 	ldrh.w	r3, [r0, #126]	; 0x7e
    bc9a:	07db      	lsls	r3, r3, #31
{
    bc9c:	b090      	sub	sp, #64	; 0x40
    bc9e:	4604      	mov	r4, r0
    bca0:	4688      	mov	r8, r1
    bca2:	4691      	mov	r9, r2
	if (!net_context_is_used(context)) {
    bca4:	f140 8084 	bpl.w	bdb0 <net_context_recv+0x120>
		return -EBADF;
	}

	k_mutex_lock(&context->lock, K_FOREVER);
    bca8:	f100 0708 	add.w	r7, r0, #8
    bcac:	4638      	mov	r0, r7
    bcae:	f009 fa20 	bl	150f2 <k_mutex_lock.constprop.38>
			context, cb, timeout, user_data);
		goto unlock;
	}
#endif /* CONFIG_NET_OFFLOAD */

	switch (net_context_get_ip_proto(context)) {
    bcb2:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
    bcb6:	2b11      	cmp	r3, #17
    bcb8:	d177      	bne.n	bdaa <net_context_recv+0x11a>
	struct sockaddr local_addr = {
    bcba:	2216      	movs	r2, #22
    bcbc:	2100      	movs	r1, #0
    bcbe:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
    bcc2:	f7f6 fb96 	bl	23f2 <memset>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
    bcc6:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
	if (context->conn_handler) {
    bcca:	6c20      	ldr	r0, [r4, #64]	; 0x40
    bccc:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	struct sockaddr local_addr = {
    bcd0:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	if (context->conn_handler) {
    bcd4:	b118      	cbz	r0, bcde <net_context_recv+0x4e>
		net_conn_unregister(context->conn_handler);
    bcd6:	f001 ffd5 	bl	dc84 <net_conn_unregister>
		context->conn_handler = NULL;
    bcda:	2300      	movs	r3, #0
    bcdc:	6423      	str	r3, [r4, #64]	; 0x40
	ret = bind_default(context);
    bcde:	4620      	mov	r0, r4
    bce0:	f009 fac8 	bl	15274 <bind_default>
	if (ret) {
    bce4:	4605      	mov	r5, r0
    bce6:	2800      	cmp	r0, #0
    bce8:	d13d      	bne.n	bd66 <net_context_recv+0xd6>
    bcea:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
	if (net_context_get_family(context) == AF_INET6) {
    bcee:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    bcf2:	2b02      	cmp	r3, #2
    bcf4:	d155      	bne.n	bda2 <net_context_recv+0x112>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
    bcf6:	6a23      	ldr	r3, [r4, #32]
    bcf8:	b18b      	cbz	r3, bd1e <net_context_recv+0x8e>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
    bcfa:	ad06      	add	r5, sp, #24
    bcfc:	f103 0e10 	add.w	lr, r3, #16
    bd00:	462a      	mov	r2, r5
    bd02:	6818      	ldr	r0, [r3, #0]
    bd04:	6859      	ldr	r1, [r3, #4]
    bd06:	46ac      	mov	ip, r5
    bd08:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    bd0c:	3308      	adds	r3, #8
    bd0e:	4573      	cmp	r3, lr
    bd10:	4665      	mov	r5, ip
    bd12:	d1f6      	bne.n	bd02 <net_context_recv+0x72>
    bd14:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
    bd16:	ad0b      	add	r5, sp, #44	; 0x2c
    bd18:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			laddr = &local_addr;
    bd1c:	ab0a      	add	r3, sp, #40	; 0x28
			net_sin6((struct sockaddr *)&context->local)->sin6_port;
    bd1e:	8be5      	ldrh	r5, [r4, #30]
		net_sin6(&local_addr)->sin6_port =
    bd20:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
				ntohs(net_sin(&context->remote)->sin_port),
    bd24:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
				net_context_get_family(context),
    bd28:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
	context->recv_cb = cb;
    bd2c:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
	ret = net_conn_register(net_context_get_ip_proto(context),
    bd30:	ba6d      	rev16	r5, r5
    bd32:	b2ad      	uxth	r5, r5
    bd34:	9501      	str	r5, [sp, #4]
				ntohs(net_sin(&context->remote)->sin_port),
    bd36:	ea4f 250c 	mov.w	r5, ip, lsl #8
	ret = net_conn_register(net_context_get_ip_proto(context),
    bd3a:	f104 0e40 	add.w	lr, r4, #64	; 0x40
				ntohs(net_sin(&context->remote)->sin_port),
    bd3e:	ea45 251c 	orr.w	r5, r5, ip, lsr #8
	ret = net_conn_register(net_context_get_ip_proto(context),
    bd42:	f3c2 01c2 	ubfx	r1, r2, #3, #3
    bd46:	e9cd 6e03 	strd	r6, lr, [sp, #12]
    bd4a:	f412 7280 	ands.w	r2, r2, #256	; 0x100
    bd4e:	b2ad      	uxth	r5, r5
    bd50:	4e19      	ldr	r6, [pc, #100]	; (bdb8 <net_context_recv+0x128>)
    bd52:	9500      	str	r5, [sp, #0]
    bd54:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    bd58:	9602      	str	r6, [sp, #8]
    bd5a:	bf18      	it	ne
    bd5c:	f104 0228 	addne.w	r2, r4, #40	; 0x28
    bd60:	f001 ffae 	bl	dcc0 <net_conn_register>
    bd64:	4605      	mov	r5, r0

		ret = -EPROTOTYPE;
		break;
	}

	if (ret < 0) {
    bd66:	2d00      	cmp	r5, #0
    bd68:	db14      	blt.n	bd94 <net_context_recv+0x104>
		goto unlock;
	}

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	if (timeout) {
    bd6a:	f1b9 0f00 	cmp.w	r9, #0
    bd6e:	d011      	beq.n	bd94 <net_context_recv+0x104>

		/* Make sure we have the lock, then the
		 * net_context_packet_received() callback will release the
		 * semaphore when data has been received.
		 */
		k_sem_reset(&context->recv_data_wait);
    bd70:	f104 0a50 	add.w	sl, r4, #80	; 0x50
    bd74:	f009 f980 	bl	15078 <z_arch_is_user_context>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_RESET, k_sem_reset, struct k_sem *, sem)
    bd78:	b1a8      	cbz	r0, bda6 <net_context_recv+0x116>
	register u32_t ret __asm__("r0") = arg1;
    bd7a:	4650      	mov	r0, sl
	register u32_t r6 __asm__("r6") = call_id;
    bd7c:	265c      	movs	r6, #92	; 0x5c
	__asm__ volatile("svc %[svid]\n"
    bd7e:	df03      	svc	3

		k_mutex_unlock(&context->lock);
    bd80:	4638      	mov	r0, r7
    bd82:	f009 f9ca 	bl	1511a <k_mutex_unlock>

		ret = k_sem_take(&context->recv_data_wait, timeout);
    bd86:	4649      	mov	r1, r9
    bd88:	4650      	mov	r0, sl
    bd8a:	f009 f98c 	bl	150a6 <k_sem_take>

		k_mutex_lock(&context->lock, K_FOREVER);
    bd8e:	4638      	mov	r0, r7
    bd90:	f009 f9af 	bl	150f2 <k_mutex_lock.constprop.38>
		}
	}
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

unlock:
	k_mutex_unlock(&context->lock);
    bd94:	4638      	mov	r0, r7
    bd96:	f009 f9c0 	bl	1511a <k_mutex_unlock>

	return ret;
}
    bd9a:	4628      	mov	r0, r5
    bd9c:	b010      	add	sp, #64	; 0x40
    bd9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct sockaddr *laddr = NULL;
    bda2:	4603      	mov	r3, r0
    bda4:	e7be      	b.n	bd24 <net_context_recv+0x94>
/**
 * @internal
 */
static inline void z_impl_k_sem_reset(struct k_sem *sem)
{
	sem->count = 0U;
    bda6:	65a0      	str	r0, [r4, #88]	; 0x58
    bda8:	e7ea      	b.n	bd80 <net_context_recv+0xf0>
		ret = net_tcp_recv(context, cb, user_data);
    bdaa:	f06f 056a 	mvn.w	r5, #106	; 0x6a
    bdae:	e7f1      	b.n	bd94 <net_context_recv+0x104>
		return -EBADF;
    bdb0:	f06f 0508 	mvn.w	r5, #8
    bdb4:	e7f1      	b.n	bd9a <net_context_recv+0x10a>
    bdb6:	bf00      	nop
    bdb8:	0000ba3d 	.word	0x0000ba3d

0000bdbc <net_context_init>:
	k_sem_give(&contexts_lock);
}

void net_context_init(void)
{
	k_sem_init(&contexts_lock, 1, UINT_MAX);
    bdbc:	4801      	ldr	r0, [pc, #4]	; (bdc4 <net_context_init+0x8>)
    bdbe:	f009 b982 	b.w	150c6 <k_sem_init.constprop.35>
    bdc2:	bf00      	nop
    bdc4:	20004140 	.word	0x20004140

0000bdc8 <k_delayed_work_submit>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    bdc8:	460a      	mov	r2, r1
    bdca:	4601      	mov	r1, r0
    bdcc:	4801      	ldr	r0, [pc, #4]	; (bdd4 <k_delayed_work_submit+0xc>)
    bdce:	f004 bcc7 	b.w	10760 <k_delayed_work_submit_to_queue>
    bdd2:	bf00      	nop
    bdd4:	2000582c 	.word	0x2000582c

0000bdd8 <net_if_ipv6_get_best_match.isra.16>:
	}

	return false;
}

static struct in6_addr *net_if_ipv6_get_best_match(struct net_if *iface,
    bdd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bddc:	9101      	str	r1, [sp, #4]
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
	struct in6_addr *src = NULL;
	u8_t len;
	int i;

	if (!ipv6) {
    bdde:	2800      	cmp	r0, #0
    bde0:	d04b      	beq.n	be7a <net_if_ipv6_get_best_match.isra.16+0xa2>
	struct in6_addr *src = NULL;
    bde2:	2600      	movs	r6, #0
    bde4:	1d05      	adds	r5, r0, #4
		return NULL;
	}

	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
    bde6:	4637      	mov	r7, r6
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
    bde8:	f04f 0e48 	mov.w	lr, #72	; 0x48
	    addr->address.family == AF_INET6 &&
    bdec:	f248 0afe 	movw	sl, #33022	; 0x80fe
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
    bdf0:	fb0e 0407 	mla	r4, lr, r7, r0
    bdf4:	4922      	ldr	r1, [pc, #136]	; (be80 <net_if_ipv6_get_best_match.isra.16+0xa8>)
    bdf6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    bdf8:	f023 437d 	bic.w	r3, r3, #4244635648	; 0xfd000000
    bdfc:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
    be00:	428b      	cmp	r3, r1
    be02:	d125      	bne.n	be50 <net_if_ipv6_get_best_match.isra.16+0x78>
    be04:	f835 3c04 	ldrh.w	r3, [r5, #-4]
    be08:	2b02      	cmp	r3, #2
    be0a:	d121      	bne.n	be50 <net_if_ipv6_get_best_match.isra.16+0x78>
	    addr->address.family == AF_INET6 &&
    be0c:	88a3      	ldrh	r3, [r4, #4]
    be0e:	4553      	cmp	r3, sl
    be10:	d01e      	beq.n	be50 <net_if_ipv6_get_best_match.isra.16+0x78>
static u8_t get_ipaddr_diff(const u8_t *src, const u8_t *dst, int addr_len)
    be12:	9b01      	ldr	r3, [sp, #4]
    be14:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
    be18:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
	u8_t len = 0U;
    be1c:	2300      	movs	r3, #0
		if (src[j] == dst[j]) {
    be1e:	f819 8f01 	ldrb.w	r8, [r9, #1]!
    be22:	f81b 4f01 	ldrb.w	r4, [fp, #1]!
    be26:	45a0      	cmp	r8, r4
    be28:	f103 0c08 	add.w	ip, r3, #8
    be2c:	d118      	bne.n	be60 <net_if_ipv6_get_best_match.isra.16+0x88>
			len += 8U;
    be2e:	fa5f f38c 	uxtb.w	r3, ip
	for (j = 0U; j < addr_len; j++) {
    be32:	2b80      	cmp	r3, #128	; 0x80
    be34:	d1f3      	bne.n	be1e <net_if_ipv6_get_best_match.isra.16+0x46>
		if (!is_proper_ipv6_address(&ipv6->unicast[i])) {
			continue;
		}

		len = get_diff_ipv6(dst, &ipv6->unicast[i].address.in6_addr);
		if (len >= *best_so_far) {
    be36:	7814      	ldrb	r4, [r2, #0]
    be38:	429c      	cmp	r4, r3
    be3a:	d809      	bhi.n	be50 <net_if_ipv6_get_best_match.isra.16+0x78>
			/* Mesh local address can only be selected for the same
			 * subnet.
			 */
			if (ipv6->unicast[i].is_mesh_local && len < 64) {
    be3c:	fb0e 0407 	mla	r4, lr, r7, r0
    be40:	f894 4047 	ldrb.w	r4, [r4, #71]	; 0x47
    be44:	0761      	lsls	r1, r4, #29
    be46:	d501      	bpl.n	be4c <net_if_ipv6_get_best_match.isra.16+0x74>
    be48:	2b3f      	cmp	r3, #63	; 0x3f
    be4a:	d901      	bls.n	be50 <net_if_ipv6_get_best_match.isra.16+0x78>
				continue;
			}

			*best_so_far = len;
    be4c:	7013      	strb	r3, [r2, #0]
    be4e:	462e      	mov	r6, r5
    be50:	3548      	adds	r5, #72	; 0x48
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
    be52:	b11f      	cbz	r7, be5c <net_if_ipv6_get_best_match.isra.16+0x84>
			src = &ipv6->unicast[i].address.in6_addr;
		}
	}

	return src;
}
    be54:	4630      	mov	r0, r6
    be56:	b003      	add	sp, #12
    be58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
    be5c:	2701      	movs	r7, #1
    be5e:	e7c7      	b.n	bdf0 <net_if_ipv6_get_best_match.isra.16+0x18>
			xor = src[j] ^ dst[j];
    be60:	ea88 0404 	eor.w	r4, r8, r4
			for (k = 0U; k < 8; k++) {
    be64:	fa5f fc8c 	uxtb.w	ip, ip
				if (!(xor & 0x80)) {
    be68:	0621      	lsls	r1, r4, #24
    be6a:	d4e4      	bmi.n	be36 <net_if_ipv6_get_best_match.isra.16+0x5e>
					len++;
    be6c:	3301      	adds	r3, #1
    be6e:	b2db      	uxtb	r3, r3
					xor <<= 1;
    be70:	0064      	lsls	r4, r4, #1
			for (k = 0U; k < 8; k++) {
    be72:	4563      	cmp	r3, ip
					xor <<= 1;
    be74:	b2e4      	uxtb	r4, r4
			for (k = 0U; k < 8; k++) {
    be76:	d1f7      	bne.n	be68 <net_if_ipv6_get_best_match.isra.16+0x90>
    be78:	e7dd      	b.n	be36 <net_if_ipv6_get_best_match.isra.16+0x5e>
		return NULL;
    be7a:	4606      	mov	r6, r0
    be7c:	e7ea      	b.n	be54 <net_if_ipv6_get_best_match.isra.16+0x7c>
    be7e:	bf00      	nop
    be80:	02000100 	.word	0x02000100

0000be84 <address_lifetime_timeout>:
{
    be84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return (u32_t)k_uptime_get();
    be88:	f009 fd69 	bl	1595e <k_uptime_get>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
    be8c:	4b34      	ldr	r3, [pc, #208]	; (bf60 <address_lifetime_timeout+0xdc>)
    be8e:	681d      	ldr	r5, [r3, #0]
    be90:	4680      	mov	r8, r0
    be92:	2d00      	cmp	r5, #0
    be94:	d058      	beq.n	bf48 <address_lifetime_timeout+0xc4>
    be96:	f1b5 0414 	subs.w	r4, r5, #20
    be9a:	d057      	beq.n	bf4c <address_lifetime_timeout+0xc8>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    be9c:	682d      	ldr	r5, [r5, #0]
    be9e:	b105      	cbz	r5, bea2 <address_lifetime_timeout+0x1e>
    bea0:	3d14      	subs	r5, #20
		*next_wakeup = NET_TIMEOUT_MAX_VALUE;
    bea2:	f8df b0c0 	ldr.w	fp, [pc, #192]	; bf64 <address_lifetime_timeout+0xe0>
	sys_slist_find_and_remove(&active_address_lifetime_timers,
    bea6:	f8df a0b8 	ldr.w	sl, [pc, #184]	; bf60 <address_lifetime_timeout+0xdc>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
    beaa:	f04f 0900 	mov.w	r9, #0
    beae:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    beb2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    beb6:	b98c      	cbnz	r4, bedc <address_lifetime_timeout+0x58>
	if (found) {
    beb8:	f1b9 0f00 	cmp.w	r9, #0
    bebc:	d04d      	beq.n	bf5a <address_lifetime_timeout+0xd6>
    bebe:	f009 fcdc 	bl	1587a <z_arch_is_user_context>
		k_delayed_work_submit(&address_lifetime_timer, timeout_update);
    bec2:	4a28      	ldr	r2, [pc, #160]	; (bf64 <address_lifetime_timeout+0xe0>)
    bec4:	4828      	ldr	r0, [pc, #160]	; (bf68 <address_lifetime_timeout+0xe4>)
    bec6:	2300      	movs	r3, #0
    bec8:	42bb      	cmp	r3, r7
    beca:	bf08      	it	eq
    becc:	42b2      	cmpeq	r2, r6
    bece:	bf38      	it	cc
    bed0:	4616      	movcc	r6, r2
    bed2:	4631      	mov	r1, r6
}
    bed4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		k_delayed_work_submit(&address_lifetime_timer, timeout_update);
    bed8:	f7ff bf76 	b.w	bdc8 <k_delayed_work_submit>
	if (counter > 0) {
    bedc:	6a22      	ldr	r2, [r4, #32]
    bede:	b9da      	cbnz	r2, bf18 <address_lifetime_timeout+0x94>
	if ((s32_t)((start + (u32_t)timeout) - current_time) > 0) {
    bee0:	69a3      	ldr	r3, [r4, #24]
    bee2:	69e1      	ldr	r1, [r4, #28]
    bee4:	eba3 0308 	sub.w	r3, r3, r8
    bee8:	440b      	add	r3, r1
    beea:	2b00      	cmp	r3, #0
    beec:	dc32      	bgt.n	bf54 <address_lifetime_timeout+0xd0>
    beee:	f009 fcc4 	bl	1587a <z_arch_is_user_context>
	ifaddr->addr_state = NET_ADDR_DEPRECATED;
    bef2:	2302      	movs	r3, #2
    bef4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	ifaddr->lifetime.wrap_counter = 0;
    bef8:	e9c4 2207 	strd	r2, r2, [r4, #28]
	sys_slist_find_and_remove(&active_address_lifetime_timers,
    befc:	f104 0114 	add.w	r1, r4, #20
    bf00:	4650      	mov	r0, sl
    bf02:	f009 fc9f 	bl	15844 <sys_slist_find_and_remove>
		if (current == next) {
    bf06:	42ac      	cmp	r4, r5
    bf08:	d0d6      	beq.n	beb8 <address_lifetime_timeout+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
    bf0a:	b30d      	cbz	r5, bf50 <address_lifetime_timeout+0xcc>
    bf0c:	696b      	ldr	r3, [r5, #20]
    bf0e:	b103      	cbz	r3, bf12 <address_lifetime_timeout+0x8e>
    bf10:	3b14      	subs	r3, #20
    bf12:	462c      	mov	r4, r5
    bf14:	461d      	mov	r5, r3
    bf16:	e7ce      	b.n	beb6 <address_lifetime_timeout+0x32>
	if (current_time == NET_TIMEOUT_MAX_VALUE) {
    bf18:	45d8      	cmp	r8, fp
    bf1a:	d105      	bne.n	bf28 <address_lifetime_timeout+0xa4>
    bf1c:	f009 fd1f 	bl	1595e <k_uptime_get>
		ifaddr->lifetime.wrap_counter--;
    bf20:	6a23      	ldr	r3, [r4, #32]
    bf22:	61a0      	str	r0, [r4, #24]
    bf24:	3b01      	subs	r3, #1
    bf26:	6223      	str	r3, [r4, #32]
	if (ifaddr->lifetime.wrap_counter > 0) {
    bf28:	6a23      	ldr	r3, [r4, #32]
    bf2a:	2b00      	cmp	r3, #0
    bf2c:	dc0a      	bgt.n	bf44 <address_lifetime_timeout+0xc0>
		*next_wakeup = ifaddr->lifetime.timer_timeout;
    bf2e:	69e2      	ldr	r2, [r4, #28]
			if (next_timeout < timeout_update) {
    bf30:	2300      	movs	r3, #0
    bf32:	42bb      	cmp	r3, r7
    bf34:	bf08      	it	eq
    bf36:	42b2      	cmpeq	r2, r6
    bf38:	bf3e      	ittt	cc
    bf3a:	4616      	movcc	r6, r2
    bf3c:	461f      	movcc	r7, r3
				found = true;
    bf3e:	f04f 0901 	movcc.w	r9, #1
    bf42:	e7e0      	b.n	bf06 <address_lifetime_timeout+0x82>
		*next_wakeup = NET_TIMEOUT_MAX_VALUE;
    bf44:	465a      	mov	r2, fp
    bf46:	e7f3      	b.n	bf30 <address_lifetime_timeout+0xac>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
    bf48:	462c      	mov	r4, r5
    bf4a:	e7aa      	b.n	bea2 <address_lifetime_timeout+0x1e>
    bf4c:	4625      	mov	r5, r4
    bf4e:	e7a8      	b.n	bea2 <address_lifetime_timeout+0x1e>
    bf50:	462b      	mov	r3, r5
    bf52:	e7de      	b.n	bf12 <address_lifetime_timeout+0x8e>
	if (current_time == NET_TIMEOUT_MAX_VALUE) {
    bf54:	45d8      	cmp	r8, fp
    bf56:	d1ea      	bne.n	bf2e <address_lifetime_timeout+0xaa>
    bf58:	e7e0      	b.n	bf1c <address_lifetime_timeout+0x98>
}
    bf5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bf5e:	bf00      	nop
    bf60:	20004158 	.word	0x20004158
    bf64:	7fffff9b 	.word	0x7fffff9b
    bf68:	20004168 	.word	0x20004168

0000bf6c <net_if_queue_tx>:
{
    bf6c:	b510      	push	{r4, lr}
	u8_t tc = net_tx_priority2tc(prio);
    bf6e:	2000      	movs	r0, #0
{
    bf70:	460c      	mov	r4, r1
	u8_t tc = net_tx_priority2tc(prio);
    bf72:	f000 fde9 	bl	cb48 <net_tx_priority2tc>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    bf76:	4a05      	ldr	r2, [pc, #20]	; (bf8c <net_if_queue_tx+0x20>)
    bf78:	2300      	movs	r3, #0
    bf7a:	6063      	str	r3, [r4, #4]
    bf7c:	e9c4 2302 	strd	r2, r3, [r4, #8]
	net_tc_submit_to_tx_queue(tc, pkt);
    bf80:	4621      	mov	r1, r4
    bf82:	b2c0      	uxtb	r0, r0
}
    bf84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_tc_submit_to_tx_queue(tc, pkt);
    bf88:	f000 bdd4 	b.w	cb34 <net_tc_submit_to_tx_queue>
    bf8c:	00015ef5 	.word	0x00015ef5

0000bf90 <net_if_config_ipv6_get>:
	if (iface->config.ip.ipv6) {
    bf90:	6843      	ldr	r3, [r0, #4]
    bf92:	b15b      	cbz	r3, bfac <net_if_config_ipv6_get+0x1c>
		if (ipv6) {
    bf94:	b909      	cbnz	r1, bf9a <net_if_config_ipv6_get+0xa>
		return 0;
    bf96:	2000      	movs	r0, #0
    bf98:	4770      	bx	lr
			*ipv6 = iface->config.ip.ipv6;
    bf9a:	600b      	str	r3, [r1, #0]
    bf9c:	e7fb      	b.n	bf96 <net_if_config_ipv6_get+0x6>
		iface->config.ip.ipv6 = &ipv6_addresses[i].ipv6;
    bf9e:	6042      	str	r2, [r0, #4]
		ipv6_addresses[i].iface = iface;
    bfa0:	f8c2 0158 	str.w	r0, [r2, #344]	; 0x158
		if (ipv6) {
    bfa4:	2900      	cmp	r1, #0
    bfa6:	d0f6      	beq.n	bf96 <net_if_config_ipv6_get+0x6>
			*ipv6 = &ipv6_addresses[i].ipv6;
    bfa8:	600a      	str	r2, [r1, #0]
    bfaa:	e7f4      	b.n	bf96 <net_if_config_ipv6_get+0x6>
		if (ipv6_addresses[i].iface) {
    bfac:	4a03      	ldr	r2, [pc, #12]	; (bfbc <net_if_config_ipv6_get+0x2c>)
    bfae:	f8d2 3158 	ldr.w	r3, [r2, #344]	; 0x158
    bfb2:	2b00      	cmp	r3, #0
    bfb4:	d0f3      	beq.n	bf9e <net_if_config_ipv6_get+0xe>
	return -ESRCH;
    bfb6:	f06f 0002 	mvn.w	r0, #2
}
    bfba:	4770      	bx	lr
    bfbc:	20004188 	.word	0x20004188

0000bfc0 <rs_timeout>:
{
    bfc0:	b508      	push	{r3, lr}
	struct net_if_ipv6 *ipv6 = CONTAINER_OF(work,
    bfc2:	f5a0 7194 	sub.w	r1, r0, #296	; 0x128
	ipv6->rs_count++;
    bfc6:	f891 3156 	ldrb.w	r3, [r1, #342]	; 0x156
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    bfca:	4a0e      	ldr	r2, [pc, #56]	; (c004 <rs_timeout+0x44>)
	ipv6->rs_count++;
    bfcc:	3301      	adds	r3, #1
    bfce:	f881 3156 	strb.w	r3, [r1, #342]	; 0x156
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    bfd2:	4b0d      	ldr	r3, [pc, #52]	; (c008 <rs_timeout+0x48>)
    bfd4:	429a      	cmp	r2, r3
    bfd6:	d103      	bne.n	bfe0 <rs_timeout+0x20>
}
    bfd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bfdc:	f009 bc4d 	b.w	1587a <z_arch_is_user_context>
		if (iface->config.ip.ipv6 == ipv6) {
    bfe0:	6850      	ldr	r0, [r2, #4]
    bfe2:	4288      	cmp	r0, r1
    bfe4:	d10a      	bne.n	bffc <rs_timeout+0x3c>
    bfe6:	f009 fc48 	bl	1587a <z_arch_is_user_context>
	if (ipv6->rs_count < RS_COUNT) {
    bfea:	f891 3156 	ldrb.w	r3, [r1, #342]	; 0x156
    bfee:	2b02      	cmp	r3, #2
    bff0:	d806      	bhi.n	c000 <rs_timeout+0x40>
		net_if_start_rs(iface);
    bff2:	4610      	mov	r0, r2
}
    bff4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		net_if_start_rs(iface);
    bff8:	f009 bcc1 	b.w	1597e <net_if_start_rs>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    bffc:	3220      	adds	r2, #32
    bffe:	e7e9      	b.n	bfd4 <rs_timeout+0x14>
}
    c000:	bd08      	pop	{r3, pc}
    c002:	bf00      	nop
    c004:	20011c2c 	.word	0x20011c2c
    c008:	20011c2c 	.word	0x20011c2c

0000c00c <net_if_ipv6_addr_lookup>:
{
    c00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    c010:	4d18      	ldr	r5, [pc, #96]	; (c074 <net_if_ipv6_addr_lookup+0x68>)
    c012:	f8df 8064 	ldr.w	r8, [pc, #100]	; c078 <net_if_ipv6_addr_lookup+0x6c>
{
    c016:	4606      	mov	r6, r0
    c018:	460f      	mov	r7, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    c01a:	4545      	cmp	r5, r8
    c01c:	d101      	bne.n	c022 <net_if_ipv6_addr_lookup+0x16>
	return NULL;
    c01e:	2000      	movs	r0, #0
    c020:	e024      	b.n	c06c <net_if_ipv6_addr_lookup+0x60>
		struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
    c022:	686c      	ldr	r4, [r5, #4]
		if (!ipv6) {
    c024:	b90c      	cbnz	r4, c02a <net_if_ipv6_addr_lookup+0x1e>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    c026:	3520      	adds	r5, #32
    c028:	e7f7      	b.n	c01a <net_if_ipv6_addr_lookup+0xe>
			if (!ipv6->unicast[i].is_used ||
    c02a:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
    c02e:	079a      	lsls	r2, r3, #30
    c030:	d508      	bpl.n	c044 <net_if_ipv6_addr_lookup+0x38>
    c032:	8823      	ldrh	r3, [r4, #0]
    c034:	2b02      	cmp	r3, #2
    c036:	d105      	bne.n	c044 <net_if_ipv6_addr_lookup+0x38>
			if (net_ipv6_is_prefix(
    c038:	2280      	movs	r2, #128	; 0x80
    c03a:	1d21      	adds	r1, r4, #4
    c03c:	4630      	mov	r0, r6
    c03e:	f009 fc40 	bl	158c2 <net_ipv6_is_prefix>
    c042:	b9a8      	cbnz	r0, c070 <net_if_ipv6_addr_lookup+0x64>
			if (!ipv6->unicast[i].is_used ||
    c044:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
    c048:	079b      	lsls	r3, r3, #30
    c04a:	d5ec      	bpl.n	c026 <net_if_ipv6_addr_lookup+0x1a>
    c04c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    c050:	2b02      	cmp	r3, #2
    c052:	d1e8      	bne.n	c026 <net_if_ipv6_addr_lookup+0x1a>
			if (net_ipv6_is_prefix(
    c054:	2280      	movs	r2, #128	; 0x80
    c056:	f104 014c 	add.w	r1, r4, #76	; 0x4c
    c05a:	4630      	mov	r0, r6
    c05c:	f009 fc31 	bl	158c2 <net_ipv6_is_prefix>
    c060:	2800      	cmp	r0, #0
    c062:	d0e0      	beq.n	c026 <net_if_ipv6_addr_lookup+0x1a>
    c064:	2048      	movs	r0, #72	; 0x48
				if (ret) {
    c066:	b107      	cbz	r7, c06a <net_if_ipv6_addr_lookup+0x5e>
					*ret = iface;
    c068:	603d      	str	r5, [r7, #0]
				return &ipv6->unicast[i];
    c06a:	4420      	add	r0, r4
}
    c06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (net_ipv6_is_prefix(
    c070:	2000      	movs	r0, #0
    c072:	e7f8      	b.n	c066 <net_if_ipv6_addr_lookup+0x5a>
    c074:	20011c2c 	.word	0x20011c2c
    c078:	20011c2c 	.word	0x20011c2c

0000c07c <net_if_ipv6_addr_update_lifetime>:
{
    c07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c07e:	4604      	mov	r4, r0
    c080:	f009 fbfb 	bl	1587a <z_arch_is_user_context>
	ifaddr->addr_state = NET_ADDR_PREFERRED;
    c084:	2301      	movs	r3, #1
    c086:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	parent->next = child;
    c08a:	2300      	movs	r3, #0
    c08c:	6163      	str	r3, [r4, #20]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    c08e:	4b20      	ldr	r3, [pc, #128]	; (c110 <net_if_ipv6_addr_update_lifetime+0x94>)
	u64_t expire_timeout = K_SECONDS((u64_t)vlifetime);
    c090:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    c094:	fba1 6700 	umull	r6, r7, r1, r0
    c098:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&active_address_lifetime_timers,
    c09a:	f104 0214 	add.w	r2, r4, #20
    c09e:	bb81      	cbnz	r1, c102 <net_if_ipv6_addr_update_lifetime+0x86>
	list->head = node;
    c0a0:	e9c3 2200 	strd	r2, r2, [r3]
	return (u32_t)k_uptime_get();
    c0a4:	f009 fc5b 	bl	1595e <k_uptime_get>
	ifaddr->lifetime.wrap_counter = expire_timeout /
    c0a8:	4a1a      	ldr	r2, [pc, #104]	; (c114 <net_if_ipv6_addr_update_lifetime+0x98>)
    c0aa:	61a0      	str	r0, [r4, #24]
    c0ac:	2300      	movs	r3, #0
    c0ae:	4630      	mov	r0, r6
    c0b0:	4639      	mov	r1, r7
    c0b2:	f7f4 fc49 	bl	948 <__aeabi_uldivmod>
	ifaddr->lifetime.timer_timeout = expire_timeout -
    c0b6:	4917      	ldr	r1, [pc, #92]	; (c114 <net_if_ipv6_addr_update_lifetime+0x98>)
	ifaddr->lifetime.wrap_counter = expire_timeout /
    c0b8:	6220      	str	r0, [r4, #32]
	ifaddr->lifetime.timer_timeout = expire_timeout -
    c0ba:	fb01 6010 	mls	r0, r1, r0, r6
    c0be:	61e0      	str	r0, [r4, #28]
	return __ticks_to_ms(z_timeout_remaining(&work->timeout));
    c0c0:	4815      	ldr	r0, [pc, #84]	; (c118 <net_if_ipv6_addr_update_lifetime+0x9c>)
    c0c2:	f004 fc19 	bl	108f8 <z_timeout_remaining>
{
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	return (u64_t)ticks * MSEC_PER_SEC / (u64_t)CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    c0c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c0ca:	2264      	movs	r2, #100	; 0x64
    c0cc:	2300      	movs	r3, #0
    c0ce:	fb80 0101 	smull	r0, r1, r0, r1
    c0d2:	f7f4 fc39 	bl	948 <__aeabi_uldivmod>
	if (!remaining || (ifaddr->lifetime.wrap_counter == 0 &&
    c0d6:	4605      	mov	r5, r0
    c0d8:	b120      	cbz	r0, c0e4 <net_if_ipv6_addr_update_lifetime+0x68>
    c0da:	6a23      	ldr	r3, [r4, #32]
    c0dc:	b9b3      	cbnz	r3, c10c <net_if_ipv6_addr_update_lifetime+0x90>
    c0de:	69e3      	ldr	r3, [r4, #28]
    c0e0:	4283      	cmp	r3, r0
    c0e2:	da13      	bge.n	c10c <net_if_ipv6_addr_update_lifetime+0x90>
		k_delayed_work_cancel(&address_lifetime_timer);
    c0e4:	480d      	ldr	r0, [pc, #52]	; (c11c <net_if_ipv6_addr_update_lifetime+0xa0>)
    c0e6:	f00c fc44 	bl	18972 <k_delayed_work_cancel>
		if (ifaddr->lifetime.wrap_counter > 0 && remaining == 0) {
    c0ea:	6a23      	ldr	r3, [r4, #32]
    c0ec:	2b00      	cmp	r3, #0
    c0ee:	dd0b      	ble.n	c108 <net_if_ipv6_addr_update_lifetime+0x8c>
    c0f0:	b955      	cbnz	r5, c108 <net_if_ipv6_addr_update_lifetime+0x8c>
			k_delayed_work_submit(&address_lifetime_timer,
    c0f2:	4908      	ldr	r1, [pc, #32]	; (c114 <net_if_ipv6_addr_update_lifetime+0x98>)
			k_delayed_work_submit(&address_lifetime_timer,
    c0f4:	4809      	ldr	r0, [pc, #36]	; (c11c <net_if_ipv6_addr_update_lifetime+0xa0>)
    c0f6:	f7ff fe67 	bl	bdc8 <k_delayed_work_submit>
}
    c0fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c0fe:	f009 bbbc 	b.w	1587a <z_arch_is_user_context>
	parent->next = child;
    c102:	600a      	str	r2, [r1, #0]
	list->tail = node;
    c104:	605a      	str	r2, [r3, #4]
    c106:	e7cd      	b.n	c0a4 <net_if_ipv6_addr_update_lifetime+0x28>
			k_delayed_work_submit(&address_lifetime_timer,
    c108:	69e1      	ldr	r1, [r4, #28]
    c10a:	e7f3      	b.n	c0f4 <net_if_ipv6_addr_update_lifetime+0x78>
}
    c10c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c10e:	bf00      	nop
    c110:	20004158 	.word	0x20004158
    c114:	7fffff9b 	.word	0x7fffff9b
    c118:	20004174 	.word	0x20004174
    c11c:	20004168 	.word	0x20004168

0000c120 <net_if_ipv6_addr_add>:
{
    c120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c124:	b08b      	sub	sp, #44	; 0x2c
    c126:	460f      	mov	r7, r1
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
    c128:	a901      	add	r1, sp, #4
{
    c12a:	4606      	mov	r6, r0
    c12c:	4693      	mov	fp, r2
    c12e:	4698      	mov	r8, r3
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
    c130:	f7ff ff2e 	bl	bf90 <net_if_config_ipv6_get>
    c134:	2800      	cmp	r0, #0
    c136:	da03      	bge.n	c140 <net_if_ipv6_addr_add+0x20>
		return NULL;
    c138:	2000      	movs	r0, #0
}
    c13a:	b00b      	add	sp, #44	; 0x2c
    c13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ifaddr = ipv6_addr_find(iface, addr);
    c140:	6875      	ldr	r5, [r6, #4]
		if (!ipv6->unicast[i].is_used) {
    c142:	f895 3047 	ldrb.w	r3, [r5, #71]	; 0x47
    c146:	0799      	lsls	r1, r3, #30
    c148:	f100 80b8 	bmi.w	c2bc <net_if_ipv6_addr_add+0x19c>
    c14c:	f895 308f 	ldrb.w	r3, [r5, #143]	; 0x8f
    c150:	079a      	lsls	r2, r3, #30
    c152:	f100 80bc 	bmi.w	c2ce <net_if_ipv6_addr_add+0x1ae>
		if (ipv6->unicast[i].is_used) {
    c156:	f8dd a004 	ldr.w	sl, [sp, #4]
    c15a:	f89a 4047 	ldrb.w	r4, [sl, #71]	; 0x47
    c15e:	f3c4 0440 	ubfx	r4, r4, #1, #1
    c162:	b124      	cbz	r4, c16e <net_if_ipv6_addr_add+0x4e>
    c164:	f89a 308f 	ldrb.w	r3, [sl, #143]	; 0x8f
    c168:	079b      	lsls	r3, r3, #30
    c16a:	d4e5      	bmi.n	c138 <net_if_ipv6_addr_add+0x18>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
    c16c:	2401      	movs	r4, #1
		net_if_addr_init(&ipv6->unicast[i], addr, addr_type,
    c16e:	2548      	movs	r5, #72	; 0x48
    c170:	4365      	muls	r5, r4
    c172:	eb0a 0905 	add.w	r9, sl, r5
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
    c176:	463a      	mov	r2, r7
	ifaddr->is_used = true;
    c178:	f899 3047 	ldrb.w	r3, [r9, #71]	; 0x47
    c17c:	f043 0302 	orr.w	r3, r3, #2
    c180:	f889 3047 	strb.w	r3, [r9, #71]	; 0x47
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
    c184:	af02      	add	r7, sp, #8
	ifaddr->address.family = AF_INET6;
    c186:	2302      	movs	r3, #2
    c188:	f82a 3005 	strh.w	r3, [sl, r5]
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
    c18c:	f102 0e10 	add.w	lr, r2, #16
	ifaddr->addr_type = addr_type;
    c190:	f889 b044 	strb.w	fp, [r9, #68]	; 0x44
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
    c194:	463b      	mov	r3, r7
    c196:	6810      	ldr	r0, [r2, #0]
    c198:	6851      	ldr	r1, [r2, #4]
    c19a:	46bc      	mov	ip, r7
    c19c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    c1a0:	3208      	adds	r2, #8
    c1a2:	4572      	cmp	r2, lr
    c1a4:	4667      	mov	r7, ip
    c1a6:	d1f6      	bne.n	c196 <net_if_ipv6_addr_add+0x76>
    c1a8:	461a      	mov	r2, r3
    c1aa:	f109 0c04 	add.w	ip, r9, #4
    c1ae:	af06      	add	r7, sp, #24
    c1b0:	4613      	mov	r3, r2
    c1b2:	cb03      	ldmia	r3!, {r0, r1}
    c1b4:	42bb      	cmp	r3, r7
    c1b6:	f8cc 0000 	str.w	r0, [ip]
    c1ba:	f8cc 1004 	str.w	r1, [ip, #4]
    c1be:	461a      	mov	r2, r3
    c1c0:	f10c 0c08 	add.w	ip, ip, #8
    c1c4:	d1f4      	bne.n	c1b0 <net_if_ipv6_addr_add+0x90>
	k_delayed_work_init(&ifaddr->dad_timer, dad_timeout);
    c1c6:	f105 0024 	add.w	r0, r5, #36	; 0x24
    c1ca:	494a      	ldr	r1, [pc, #296]	; (c2f4 <net_if_ipv6_addr_add+0x1d4>)
    c1cc:	4450      	add	r0, sl
    c1ce:	f00c fbc8 	bl	18962 <k_delayed_work_init>
	if (vlifetime) {
    c1d2:	2348      	movs	r3, #72	; 0x48
		ifaddr->is_infinite = false;
    c1d4:	fb03 a304 	mla	r3, r3, r4, sl
    c1d8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (vlifetime) {
    c1dc:	f1b8 0f00 	cmp.w	r8, #0
    c1e0:	f000 8082 	beq.w	c2e8 <net_if_ipv6_addr_add+0x1c8>
		ifaddr->is_infinite = false;
    c1e4:	f36f 0200 	bfc	r2, #0, #1
    c1e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    c1ec:	f009 fb45 	bl	1587a <z_arch_is_user_context>
		net_if_ipv6_addr_update_lifetime(ifaddr, vlifetime);
    c1f0:	4641      	mov	r1, r8
    c1f2:	4648      	mov	r0, r9
    c1f4:	f7ff ff42 	bl	c07c <net_if_ipv6_addr_update_lifetime>
    c1f8:	f009 fb3f 	bl	1587a <z_arch_is_user_context>
 *
 * @return a pointer to the iface L2
 */
static inline const struct net_l2 * const net_if_l2(struct net_if *iface)
{
	return iface->if_dev->l2;
    c1fc:	6833      	ldr	r3, [r6, #0]
	if (net_if_l2(iface)->get_flags) {
    c1fe:	685b      	ldr	r3, [r3, #4]
    c200:	68db      	ldr	r3, [r3, #12]
    c202:	2b00      	cmp	r3, #0
    c204:	d052      	beq.n	c2ac <net_if_ipv6_addr_add+0x18c>
		flags = net_if_l2(iface)->get_flags(iface);
    c206:	4630      	mov	r0, r6
		join_mcast_nodes(iface, &ipv6->unicast[i].address.in6_addr);
    c208:	f8dd 9004 	ldr.w	r9, [sp, #4]
		flags = net_if_l2(iface)->get_flags(iface);
    c20c:	4798      	blx	r3
	if (flags & NET_L2_MULTICAST) {
    c20e:	f010 0f01 	tst.w	r0, #1
		flags = net_if_l2(iface)->get_flags(iface);
    c212:	4680      	mov	r8, r0
	if (flags & NET_L2_MULTICAST) {
    c214:	d04a      	beq.n	c2ac <net_if_ipv6_addr_add+0x18c>
					u16_t addr0, u16_t addr1,
					u16_t addr2, u16_t addr3,
					u16_t addr4, u16_t addr5,
					u16_t addr6, u16_t addr7)
{
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
    c216:	f240 23ff 	movw	r3, #767	; 0x2ff
    c21a:	f8ad 3018 	strh.w	r3, [sp, #24]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
    c21e:	2300      	movs	r3, #0
    c220:	f8ad 301a 	strh.w	r3, [sp, #26]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
    c224:	f8ad 301c 	strh.w	r3, [sp, #28]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
    c228:	f8ad 301e 	strh.w	r3, [sp, #30]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
    c22c:	f8ad 3020 	strh.w	r3, [sp, #32]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
    c230:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
    c234:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
    c238:	f44f 7380 	mov.w	r3, #256	; 0x100
    c23c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
	ret = net_ipv6_mld_join(iface, &addr);
    c240:	4639      	mov	r1, r7
    c242:	4630      	mov	r0, r6
    c244:	f00b fd33 	bl	17cae <net_ipv6_mld_join>
	if (ret < 0 && ret != -EALREADY) {
    c248:	2800      	cmp	r0, #0
    c24a:	da03      	bge.n	c254 <net_if_ipv6_addr_add+0x134>
    c24c:	3078      	adds	r0, #120	; 0x78
    c24e:	d001      	beq.n	c254 <net_if_ipv6_addr_add+0x134>
    c250:	f009 fb13 	bl	1587a <z_arch_is_user_context>
		if (!(flags & NET_L2_MULTICAST_SKIP_JOIN_SOLICIT_NODE)) {
    c254:	f018 0802 	ands.w	r8, r8, #2
    c258:	d128      	bne.n	c2ac <net_if_ipv6_addr_add+0x18c>
	dst->s6_addr[0]   = 0xFF;
    c25a:	f240 23ff 	movw	r3, #767	; 0x2ff
    c25e:	9306      	str	r3, [sp, #24]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
    c260:	f8ad 801c 	strh.w	r8, [sp, #28]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
    c264:	f8ad 801e 	strh.w	r8, [sp, #30]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
    c268:	f8ad 8020 	strh.w	r8, [sp, #32]
	dst->s6_addr[10]  = 0U;
    c26c:	f44f 7380 	mov.w	r3, #256	; 0x100
    c270:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	dst->s6_addr[12]  = 0xFF;
    c274:	23ff      	movs	r3, #255	; 0xff
    c276:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	dst->s6_addr[13]  = src->s6_addr[13];
    c27a:	2348      	movs	r3, #72	; 0x48
    c27c:	fb03 9404 	mla	r4, r3, r4, r9
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
    c280:	44a9      	add	r9, r5
	dst->s6_addr[13]  = src->s6_addr[13];
    c282:	7c63      	ldrb	r3, [r4, #17]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
    c284:	f899 2013 	ldrb.w	r2, [r9, #19]
	dst->s6_addr[13]  = src->s6_addr[13];
    c288:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
    c28c:	f899 3012 	ldrb.w	r3, [r9, #18]
    c290:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    c294:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
	ret = net_ipv6_mld_join(iface, &addr);
    c298:	4639      	mov	r1, r7
    c29a:	4630      	mov	r0, r6
    c29c:	f00b fd07 	bl	17cae <net_ipv6_mld_join>
	if (ret < 0 && ret != -EALREADY) {
    c2a0:	2800      	cmp	r0, #0
    c2a2:	da03      	bge.n	c2ac <net_if_ipv6_addr_add+0x18c>
    c2a4:	3078      	adds	r0, #120	; 0x78
    c2a6:	d001      	beq.n	c2ac <net_if_ipv6_addr_add+0x18c>
    c2a8:	f009 fae7 	bl	1587a <z_arch_is_user_context>
		net_if_ipv6_start_dad(iface, &ipv6->unicast[i]);
    c2ac:	9901      	ldr	r1, [sp, #4]
    c2ae:	4630      	mov	r0, r6
    c2b0:	4429      	add	r1, r5
    c2b2:	f009 fb33 	bl	1591c <net_if_ipv6_start_dad>
		return &ipv6->unicast[i];
    c2b6:	9801      	ldr	r0, [sp, #4]
    c2b8:	4428      	add	r0, r5
    c2ba:	e73e      	b.n	c13a <net_if_ipv6_addr_add+0x1a>
		if (net_ipv6_addr_cmp(
    c2bc:	1d29      	adds	r1, r5, #4
    c2be:	4638      	mov	r0, r7
    c2c0:	f009 fb24 	bl	1590c <net_ipv6_addr_cmp>
    c2c4:	2800      	cmp	r0, #0
    c2c6:	f43f af41 	beq.w	c14c <net_if_ipv6_addr_add+0x2c>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
    c2ca:	2000      	movs	r0, #0
    c2cc:	e008      	b.n	c2e0 <net_if_ipv6_addr_add+0x1c0>
		if (net_ipv6_addr_cmp(
    c2ce:	f105 014c 	add.w	r1, r5, #76	; 0x4c
    c2d2:	4638      	mov	r0, r7
    c2d4:	f009 fb1a 	bl	1590c <net_ipv6_addr_cmp>
    c2d8:	2800      	cmp	r0, #0
    c2da:	f43f af3c 	beq.w	c156 <net_if_ipv6_addr_add+0x36>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
    c2de:	2001      	movs	r0, #1
			return &ipv6->unicast[i];
    c2e0:	2348      	movs	r3, #72	; 0x48
    c2e2:	fb03 5000 	mla	r0, r3, r0, r5
	if (ifaddr) {
    c2e6:	e728      	b.n	c13a <net_if_ipv6_addr_add+0x1a>
		ifaddr->is_infinite = true;
    c2e8:	f042 0201 	orr.w	r2, r2, #1
    c2ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    c2f0:	e782      	b.n	c1f8 <net_if_ipv6_addr_add+0xd8>
    c2f2:	bf00      	nop
    c2f4:	000159a5 	.word	0x000159a5

0000c2f8 <net_if_ipv6_addr_rm>:
{
    c2f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
    c2fc:	6844      	ldr	r4, [r0, #4]
{
    c2fe:	4607      	mov	r7, r0
    c300:	460e      	mov	r6, r1
	if (!ipv6) {
    c302:	2c00      	cmp	r4, #0
    c304:	d059      	beq.n	c3ba <net_if_ipv6_addr_rm+0xc2>
		if (!ipv6->unicast[i].is_used) {
    c306:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
    c30a:	0798      	lsls	r0, r3, #30
    c30c:	d407      	bmi.n	c31e <net_if_ipv6_addr_rm+0x26>
    c30e:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
    c312:	079a      	lsls	r2, r3, #30
    c314:	d40a      	bmi.n	c32c <net_if_ipv6_addr_rm+0x34>
	return false;
    c316:	2000      	movs	r0, #0
}
    c318:	b004      	add	sp, #16
    c31a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!net_ipv6_addr_cmp(&ipv6->unicast[i].address.in6_addr,
    c31e:	1d20      	adds	r0, r4, #4
    c320:	f009 faf4 	bl	1590c <net_ipv6_addr_cmp>
    c324:	2800      	cmp	r0, #0
    c326:	d0f2      	beq.n	c30e <net_if_ipv6_addr_rm+0x16>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
    c328:	2500      	movs	r5, #0
    c32a:	e007      	b.n	c33c <net_if_ipv6_addr_rm+0x44>
		if (!net_ipv6_addr_cmp(&ipv6->unicast[i].address.in6_addr,
    c32c:	4631      	mov	r1, r6
    c32e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    c332:	f009 faeb 	bl	1590c <net_ipv6_addr_cmp>
    c336:	2800      	cmp	r0, #0
    c338:	d0ed      	beq.n	c316 <net_if_ipv6_addr_rm+0x1e>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
    c33a:	2501      	movs	r5, #1
		if (!ipv6->unicast[i].is_infinite) {
    c33c:	2148      	movs	r1, #72	; 0x48
    c33e:	4369      	muls	r1, r5
    c340:	1863      	adds	r3, r4, r1
    c342:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
    c346:	07db      	lsls	r3, r3, #31
    c348:	d40c      	bmi.n	c364 <net_if_ipv6_addr_rm+0x6c>
			sys_slist_find_and_remove(
    c34a:	f8df 8078 	ldr.w	r8, [pc, #120]	; c3c4 <net_if_ipv6_addr_rm+0xcc>
    c34e:	3114      	adds	r1, #20
    c350:	4421      	add	r1, r4
    c352:	4640      	mov	r0, r8
    c354:	f009 fa76 	bl	15844 <sys_slist_find_and_remove>
			if (sys_slist_is_empty(
    c358:	f8d8 3000 	ldr.w	r3, [r8]
    c35c:	b913      	cbnz	r3, c364 <net_if_ipv6_addr_rm+0x6c>
				k_delayed_work_cancel(&address_lifetime_timer);
    c35e:	4818      	ldr	r0, [pc, #96]	; (c3c0 <net_if_ipv6_addr_rm+0xc8>)
    c360:	f00c fb07 	bl	18972 <k_delayed_work_cancel>
		ipv6->unicast[i].is_used = false;
    c364:	2048      	movs	r0, #72	; 0x48
    c366:	fb00 4405 	mla	r4, r0, r5, r4
    c36a:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
    c36e:	f36f 0341 	bfc	r3, #1, #1
    c372:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst->s6_addr[0]   = 0xFF;
    c376:	f240 23ff 	movw	r3, #767	; 0x2ff
    c37a:	9300      	str	r3, [sp, #0]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
    c37c:	2300      	movs	r3, #0
    c37e:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
    c382:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
    c386:	f8ad 3008 	strh.w	r3, [sp, #8]
	dst->s6_addr[10]  = 0U;
    c38a:	f44f 7380 	mov.w	r3, #256	; 0x100
    c38e:	f8ad 300a 	strh.w	r3, [sp, #10]
	dst->s6_addr[12]  = 0xFF;
    c392:	23ff      	movs	r3, #255	; 0xff
    c394:	f88d 300c 	strb.w	r3, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
    c398:	7b73      	ldrb	r3, [r6, #13]
    c39a:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
    c39e:	7bf2      	ldrb	r2, [r6, #15]
    c3a0:	7bb3      	ldrb	r3, [r6, #14]
    c3a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    c3a6:	f8ad 300e 	strh.w	r3, [sp, #14]
		net_if_ipv6_maddr_rm(iface, &maddr);
    c3aa:	4669      	mov	r1, sp
    c3ac:	4638      	mov	r0, r7
    c3ae:	f009 fbf6 	bl	15b9e <net_if_ipv6_maddr_rm>
    c3b2:	f009 fa62 	bl	1587a <z_arch_is_user_context>
		return true;
    c3b6:	2001      	movs	r0, #1
    c3b8:	e7ae      	b.n	c318 <net_if_ipv6_addr_rm+0x20>
		return false;
    c3ba:	4620      	mov	r0, r4
    c3bc:	e7ac      	b.n	c318 <net_if_ipv6_addr_rm+0x20>
    c3be:	bf00      	nop
    c3c0:	20004168 	.word	0x20004168
    c3c4:	20004158 	.word	0x20004158

0000c3c8 <prefix_lifetime_timeout>:
{
    c3c8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	return (u32_t)k_uptime_get();
    c3cc:	f009 fac7 	bl	1595e <k_uptime_get>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
    c3d0:	4b2f      	ldr	r3, [pc, #188]	; (c490 <prefix_lifetime_timeout+0xc8>)
    c3d2:	681c      	ldr	r4, [r3, #0]
    c3d4:	4680      	mov	r8, r0
    c3d6:	2c00      	cmp	r4, #0
    c3d8:	d03e      	beq.n	c458 <prefix_lifetime_timeout+0x90>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    c3da:	6825      	ldr	r5, [r4, #0]
	if (ifprefix->lifetime.wrap_counter > 0) {
    c3dc:	f8df 90b4 	ldr.w	r9, [pc, #180]	; c494 <prefix_lifetime_timeout+0xcc>
    c3e0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    c3e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    c3e8:	f04f 0a00 	mov.w	sl, #0
			  ifprefix->lifetime.wrap_counter,
    c3ec:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
	if (counter > 0) {
    c3f0:	2900      	cmp	r1, #0
    c3f2:	d136      	bne.n	c462 <prefix_lifetime_timeout+0x9a>
	if ((s32_t)((start + (u32_t)timeout) - current_time) > 0) {
    c3f4:	6863      	ldr	r3, [r4, #4]
    c3f6:	eba3 0308 	sub.w	r3, r3, r8
    c3fa:	4413      	add	r3, r2
    c3fc:	2b00      	cmp	r3, #0
    c3fe:	dc44      	bgt.n	c48a <prefix_lifetime_timeout+0xc2>
    c400:	f009 fa3b 	bl	1587a <z_arch_is_user_context>
	ifprefix->is_used = false;
    c404:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	if (net_if_config_ipv6_get(ifprefix->iface, &ipv6) < 0) {
    c408:	6a20      	ldr	r0, [r4, #32]
	ifprefix->is_used = false;
    c40a:	f361 0341 	bfi	r3, r1, #1, #1
    c40e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	if (net_if_config_ipv6_get(ifprefix->iface, &ipv6) < 0) {
    c412:	a901      	add	r1, sp, #4
    c414:	f7ff fdbc 	bl	bf90 <net_if_config_ipv6_get>
    c418:	2800      	cmp	r0, #0
    c41a:	db07      	blt.n	c42c <prefix_lifetime_timeout+0x64>
	remove_prefix_addresses(ifprefix->iface, ipv6, &ifprefix->prefix,
    c41c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    c420:	9901      	ldr	r1, [sp, #4]
    c422:	6a20      	ldr	r0, [r4, #32]
    c424:	f104 0210 	add.w	r2, r4, #16
    c428:	f009 fbf2 	bl	15c10 <remove_prefix_addresses>
		if (current == next) {
    c42c:	42ac      	cmp	r4, r5
    c42e:	d003      	beq.n	c438 <prefix_lifetime_timeout+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
    c430:	b34d      	cbz	r5, c486 <prefix_lifetime_timeout+0xbe>
    c432:	682b      	ldr	r3, [r5, #0]
	return node->next;
    c434:	462c      	mov	r4, r5
    c436:	b995      	cbnz	r5, c45e <prefix_lifetime_timeout+0x96>
	if (found) {
    c438:	f1ba 0f00 	cmp.w	sl, #0
    c43c:	d00c      	beq.n	c458 <prefix_lifetime_timeout+0x90>
    c43e:	f009 fa1c 	bl	1587a <z_arch_is_user_context>
		k_delayed_work_submit(&prefix_lifetime_timer, timeout_update);
    c442:	4a14      	ldr	r2, [pc, #80]	; (c494 <prefix_lifetime_timeout+0xcc>)
    c444:	4814      	ldr	r0, [pc, #80]	; (c498 <prefix_lifetime_timeout+0xd0>)
    c446:	2300      	movs	r3, #0
    c448:	42bb      	cmp	r3, r7
    c44a:	bf08      	it	eq
    c44c:	42b2      	cmpeq	r2, r6
    c44e:	bf38      	it	cc
    c450:	4616      	movcc	r6, r2
    c452:	4631      	mov	r1, r6
    c454:	f7ff fcb8 	bl	bdc8 <k_delayed_work_submit>
}
    c458:	b002      	add	sp, #8
    c45a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c45e:	461d      	mov	r5, r3
    c460:	e7c4      	b.n	c3ec <prefix_lifetime_timeout+0x24>
	if (current_time == NET_TIMEOUT_MAX_VALUE) {
    c462:	45c8      	cmp	r8, r9
    c464:	d101      	bne.n	c46a <prefix_lifetime_timeout+0xa2>
		ifprefix->lifetime.wrap_counter--;
    c466:	3901      	subs	r1, #1
    c468:	60e1      	str	r1, [r4, #12]
	if (ifprefix->lifetime.wrap_counter > 0) {
    c46a:	68e3      	ldr	r3, [r4, #12]
    c46c:	2b00      	cmp	r3, #0
    c46e:	bfc8      	it	gt
    c470:	464a      	movgt	r2, r9
			if (next_timeout < timeout_update) {
    c472:	2300      	movs	r3, #0
    c474:	42bb      	cmp	r3, r7
    c476:	bf08      	it	eq
    c478:	42b2      	cmpeq	r2, r6
    c47a:	bf3e      	ittt	cc
    c47c:	4616      	movcc	r6, r2
    c47e:	461f      	movcc	r7, r3
				found = true;
    c480:	f04f 0a01 	movcc.w	sl, #1
    c484:	e7d2      	b.n	c42c <prefix_lifetime_timeout+0x64>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
    c486:	462b      	mov	r3, r5
    c488:	e7d4      	b.n	c434 <prefix_lifetime_timeout+0x6c>
	if (current_time == NET_TIMEOUT_MAX_VALUE) {
    c48a:	45c8      	cmp	r8, r9
    c48c:	d1f1      	bne.n	c472 <prefix_lifetime_timeout+0xaa>
    c48e:	e7ea      	b.n	c466 <prefix_lifetime_timeout+0x9e>
    c490:	20004160 	.word	0x20004160
    c494:	7fffff9b 	.word	0x7fffff9b
    c498:	200042f4 	.word	0x200042f4

0000c49c <net_if_ipv6_maddr_lookup>:
{
    c49c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    c4a0:	4d1b      	ldr	r5, [pc, #108]	; (c510 <net_if_ipv6_maddr_lookup+0x74>)
    c4a2:	4b1c      	ldr	r3, [pc, #112]	; (c514 <net_if_ipv6_maddr_lookup+0x78>)
{
    c4a4:	4683      	mov	fp, r0
    c4a6:	460e      	mov	r6, r1
			if (!ipv6->mcast[i].is_used ||
    c4a8:	f04f 0a18 	mov.w	sl, #24
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    c4ac:	429d      	cmp	r5, r3
    c4ae:	d101      	bne.n	c4b4 <net_if_ipv6_maddr_lookup+0x18>
	return NULL;
    c4b0:	2000      	movs	r0, #0
    c4b2:	e024      	b.n	c4fe <net_if_ipv6_maddr_lookup+0x62>
		if (ret && *ret && iface != *ret) {
    c4b4:	b12e      	cbz	r6, c4c2 <net_if_ipv6_maddr_lookup+0x26>
    c4b6:	6832      	ldr	r2, [r6, #0]
    c4b8:	b11a      	cbz	r2, c4c2 <net_if_ipv6_maddr_lookup+0x26>
    c4ba:	42aa      	cmp	r2, r5
    c4bc:	d001      	beq.n	c4c2 <net_if_ipv6_maddr_lookup+0x26>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    c4be:	3520      	adds	r5, #32
    c4c0:	e7f4      	b.n	c4ac <net_if_ipv6_maddr_lookup+0x10>
		struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
    c4c2:	686c      	ldr	r4, [r5, #4]
		if (!ipv6) {
    c4c4:	2c00      	cmp	r4, #0
    c4c6:	d0fa      	beq.n	c4be <net_if_ipv6_maddr_lookup+0x22>
    c4c8:	46a0      	mov	r8, r4
		for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
    c4ca:	2700      	movs	r7, #0
			if (!ipv6->mcast[i].is_used ||
    c4cc:	fb0a f907 	mul.w	r9, sl, r7
    c4d0:	eb04 0209 	add.w	r2, r4, r9
    c4d4:	f892 20a4 	ldrb.w	r2, [r2, #164]	; 0xa4
    c4d8:	07d2      	lsls	r2, r2, #31
    c4da:	d512      	bpl.n	c502 <net_if_ipv6_maddr_lookup+0x66>
    c4dc:	f8b8 2090 	ldrh.w	r2, [r8, #144]	; 0x90
    c4e0:	2a02      	cmp	r2, #2
    c4e2:	d10e      	bne.n	c502 <net_if_ipv6_maddr_lookup+0x66>
			if (net_ipv6_is_prefix(
    c4e4:	2280      	movs	r2, #128	; 0x80
    c4e6:	f108 0194 	add.w	r1, r8, #148	; 0x94
    c4ea:	4658      	mov	r0, fp
    c4ec:	f009 f9e9 	bl	158c2 <net_ipv6_is_prefix>
    c4f0:	4b08      	ldr	r3, [pc, #32]	; (c514 <net_if_ipv6_maddr_lookup+0x78>)
    c4f2:	b130      	cbz	r0, c502 <net_if_ipv6_maddr_lookup+0x66>
				if (ret) {
    c4f4:	b106      	cbz	r6, c4f8 <net_if_ipv6_maddr_lookup+0x5c>
					*ret = iface;
    c4f6:	6035      	str	r5, [r6, #0]
				return &ipv6->mcast[i];
    c4f8:	f109 0090 	add.w	r0, r9, #144	; 0x90
    c4fc:	4420      	add	r0, r4
}
    c4fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
    c502:	3701      	adds	r7, #1
    c504:	2f03      	cmp	r7, #3
    c506:	f108 0818 	add.w	r8, r8, #24
    c50a:	d1df      	bne.n	c4cc <net_if_ipv6_maddr_lookup+0x30>
    c50c:	e7d7      	b.n	c4be <net_if_ipv6_maddr_lookup+0x22>
    c50e:	bf00      	nop
    c510:	20011c2c 	.word	0x20011c2c
    c514:	20011c2c 	.word	0x20011c2c

0000c518 <net_if_mcast_monitor>:
{
    c518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
    c51a:	4b0a      	ldr	r3, [pc, #40]	; (c544 <net_if_mcast_monitor+0x2c>)
    c51c:	681b      	ldr	r3, [r3, #0]
{
    c51e:	4605      	mov	r5, r0
    c520:	460e      	mov	r6, r1
    c522:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
    c524:	b163      	cbz	r3, c540 <net_if_mcast_monitor+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    c526:	681c      	ldr	r4, [r3, #0]
		if (iface == mon->iface) {
    c528:	685a      	ldr	r2, [r3, #4]
    c52a:	42aa      	cmp	r2, r5
    c52c:	d104      	bne.n	c538 <net_if_mcast_monitor+0x20>
			mon->cb(iface, addr, is_joined);
    c52e:	689b      	ldr	r3, [r3, #8]
    c530:	463a      	mov	r2, r7
    c532:	4631      	mov	r1, r6
    c534:	4628      	mov	r0, r5
    c536:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
    c538:	b114      	cbz	r4, c540 <net_if_mcast_monitor+0x28>
    c53a:	4623      	mov	r3, r4
    c53c:	6824      	ldr	r4, [r4, #0]
    c53e:	e7f3      	b.n	c528 <net_if_mcast_monitor+0x10>
}
    c540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c542:	bf00      	nop
    c544:	200042ec 	.word	0x200042ec

0000c548 <net_if_ipv6_addr_onlink>:
{
    c548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
    c54c:	4d18      	ldr	r5, [pc, #96]	; (c5b0 <net_if_ipv6_addr_onlink+0x68>)
    c54e:	f8df 8064 	ldr.w	r8, [pc, #100]	; c5b4 <net_if_ipv6_addr_onlink+0x6c>
{
    c552:	4606      	mov	r6, r0
    c554:	460f      	mov	r7, r1
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
    c556:	4545      	cmp	r5, r8
    c558:	d101      	bne.n	c55e <net_if_ipv6_addr_onlink+0x16>
	return false;
    c55a:	2000      	movs	r0, #0
    c55c:	e023      	b.n	c5a6 <net_if_ipv6_addr_onlink+0x5e>
		if (iface && *iface && *iface != tmp) {
    c55e:	b11e      	cbz	r6, c568 <net_if_ipv6_addr_onlink+0x20>
    c560:	6833      	ldr	r3, [r6, #0]
    c562:	b10b      	cbz	r3, c568 <net_if_ipv6_addr_onlink+0x20>
    c564:	42ab      	cmp	r3, r5
    c566:	d111      	bne.n	c58c <net_if_ipv6_addr_onlink+0x44>
		struct net_if_ipv6 *ipv6 = tmp->config.ip.ipv6;
    c568:	686c      	ldr	r4, [r5, #4]
		if (!ipv6) {
    c56a:	b17c      	cbz	r4, c58c <net_if_ipv6_addr_onlink+0x44>
			if (ipv6->prefix[i].is_used &&
    c56c:	f894 30fd 	ldrb.w	r3, [r4, #253]	; 0xfd
    c570:	079a      	lsls	r2, r3, #30
    c572:	d40d      	bmi.n	c590 <net_if_ipv6_addr_onlink+0x48>
    c574:	f894 3125 	ldrb.w	r3, [r4, #293]	; 0x125
    c578:	079b      	lsls	r3, r3, #30
    c57a:	d507      	bpl.n	c58c <net_if_ipv6_addr_onlink+0x44>
			    net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
    c57c:	f894 2124 	ldrb.w	r2, [r4, #292]	; 0x124
    c580:	4639      	mov	r1, r7
    c582:	f504 7088 	add.w	r0, r4, #272	; 0x110
    c586:	f009 f99c 	bl	158c2 <net_ipv6_is_prefix>
			if (ipv6->prefix[i].is_used &&
    c58a:	b950      	cbnz	r0, c5a2 <net_if_ipv6_addr_onlink+0x5a>
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
    c58c:	3520      	adds	r5, #32
    c58e:	e7e2      	b.n	c556 <net_if_ipv6_addr_onlink+0xe>
			    net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
    c590:	f894 20fc 	ldrb.w	r2, [r4, #252]	; 0xfc
    c594:	4639      	mov	r1, r7
    c596:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    c59a:	f009 f992 	bl	158c2 <net_ipv6_is_prefix>
			if (ipv6->prefix[i].is_used &&
    c59e:	2800      	cmp	r0, #0
    c5a0:	d0e8      	beq.n	c574 <net_if_ipv6_addr_onlink+0x2c>
				if (iface) {
    c5a2:	b916      	cbnz	r6, c5aa <net_if_ipv6_addr_onlink+0x62>
				return true;
    c5a4:	2001      	movs	r0, #1
}
    c5a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					*iface = tmp;
    c5aa:	6035      	str	r5, [r6, #0]
    c5ac:	e7fa      	b.n	c5a4 <net_if_ipv6_addr_onlink+0x5c>
    c5ae:	bf00      	nop
    c5b0:	20011c2c 	.word	0x20011c2c
    c5b4:	20011c2c 	.word	0x20011c2c

0000c5b8 <net_if_ipv6_prefix_set_timer>:
{
    c5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (lifetime == 0xffffffff) {
    c5ba:	1c4b      	adds	r3, r1, #1
{
    c5bc:	4604      	mov	r4, r0
	if (lifetime == 0xffffffff) {
    c5be:	d040      	beq.n	c642 <net_if_ipv6_prefix_set_timer+0x8a>
    c5c0:	f009 f95b 	bl	1587a <z_arch_is_user_context>
	parent->next = child;
    c5c4:	2300      	movs	r3, #0
    c5c6:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    c5c8:	4b1e      	ldr	r3, [pc, #120]	; (c644 <net_if_ipv6_prefix_set_timer+0x8c>)
    c5ca:	685a      	ldr	r2, [r3, #4]
	u64_t expire_timeout = K_SECONDS((u64_t)lifetime);
    c5cc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    c5d0:	fba1 6706 	umull	r6, r7, r1, r6
    c5d4:	bb82      	cbnz	r2, c638 <net_if_ipv6_prefix_set_timer+0x80>
	list->head = node;
    c5d6:	e9c3 4400 	strd	r4, r4, [r3]
    c5da:	f009 f9c0 	bl	1595e <k_uptime_get>
	ifprefix->lifetime.wrap_counter = expire_timeout /
    c5de:	4a1a      	ldr	r2, [pc, #104]	; (c648 <net_if_ipv6_prefix_set_timer+0x90>)
    c5e0:	6060      	str	r0, [r4, #4]
    c5e2:	2300      	movs	r3, #0
    c5e4:	4630      	mov	r0, r6
    c5e6:	4639      	mov	r1, r7
    c5e8:	f7f4 f9ae 	bl	948 <__aeabi_uldivmod>
	ifprefix->lifetime.timer_timeout = expire_timeout -
    c5ec:	4916      	ldr	r1, [pc, #88]	; (c648 <net_if_ipv6_prefix_set_timer+0x90>)
	ifprefix->lifetime.wrap_counter = expire_timeout /
    c5ee:	60e0      	str	r0, [r4, #12]
	ifprefix->lifetime.timer_timeout = expire_timeout -
    c5f0:	fb01 6010 	mls	r0, r1, r0, r6
    c5f4:	60a0      	str	r0, [r4, #8]
	return __ticks_to_ms(z_timeout_remaining(&work->timeout));
    c5f6:	4815      	ldr	r0, [pc, #84]	; (c64c <net_if_ipv6_prefix_set_timer+0x94>)
    c5f8:	f004 f97e 	bl	108f8 <z_timeout_remaining>
    c5fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c600:	2264      	movs	r2, #100	; 0x64
    c602:	2300      	movs	r3, #0
    c604:	fb80 0101 	smull	r0, r1, r0, r1
    c608:	f7f4 f99e 	bl	948 <__aeabi_uldivmod>
	if (!remaining || (ifprefix->lifetime.wrap_counter == 0 &&
    c60c:	4605      	mov	r5, r0
    c60e:	b120      	cbz	r0, c61a <net_if_ipv6_prefix_set_timer+0x62>
    c610:	68e3      	ldr	r3, [r4, #12]
    c612:	b9b3      	cbnz	r3, c642 <net_if_ipv6_prefix_set_timer+0x8a>
    c614:	68a3      	ldr	r3, [r4, #8]
    c616:	4283      	cmp	r3, r0
    c618:	da13      	bge.n	c642 <net_if_ipv6_prefix_set_timer+0x8a>
		k_delayed_work_cancel(&prefix_lifetime_timer);
    c61a:	480d      	ldr	r0, [pc, #52]	; (c650 <net_if_ipv6_prefix_set_timer+0x98>)
    c61c:	f00c f9a9 	bl	18972 <k_delayed_work_cancel>
		if (ifprefix->lifetime.wrap_counter > 0 && remaining == 0) {
    c620:	68e3      	ldr	r3, [r4, #12]
    c622:	2b00      	cmp	r3, #0
    c624:	dd0b      	ble.n	c63e <net_if_ipv6_prefix_set_timer+0x86>
    c626:	b955      	cbnz	r5, c63e <net_if_ipv6_prefix_set_timer+0x86>
			k_delayed_work_submit(&prefix_lifetime_timer,
    c628:	4907      	ldr	r1, [pc, #28]	; (c648 <net_if_ipv6_prefix_set_timer+0x90>)
			k_delayed_work_submit(&prefix_lifetime_timer,
    c62a:	4809      	ldr	r0, [pc, #36]	; (c650 <net_if_ipv6_prefix_set_timer+0x98>)
    c62c:	f7ff fbcc 	bl	bdc8 <k_delayed_work_submit>
}
    c630:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c634:	f009 b921 	b.w	1587a <z_arch_is_user_context>
	parent->next = child;
    c638:	6014      	str	r4, [r2, #0]
	list->tail = node;
    c63a:	605c      	str	r4, [r3, #4]
    c63c:	e7cd      	b.n	c5da <net_if_ipv6_prefix_set_timer+0x22>
			k_delayed_work_submit(&prefix_lifetime_timer,
    c63e:	68a1      	ldr	r1, [r4, #8]
    c640:	e7f3      	b.n	c62a <net_if_ipv6_prefix_set_timer+0x72>
}
    c642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c644:	20004160 	.word	0x20004160
    c648:	7fffff9b 	.word	0x7fffff9b
    c64c:	20004300 	.word	0x20004300
    c650:	200042f4 	.word	0x200042f4

0000c654 <net_if_ipv6_prefix_unset_timer>:
{
    c654:	b508      	push	{r3, lr}
	if (!prefix->is_used) {
    c656:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
    c65a:	079b      	lsls	r3, r3, #30
{
    c65c:	4601      	mov	r1, r0
	if (!prefix->is_used) {
    c65e:	d509      	bpl.n	c674 <net_if_ipv6_prefix_unset_timer+0x20>
    c660:	f009 f90b 	bl	1587a <z_arch_is_user_context>
	ifprefix->lifetime.timer_timeout = 0;
    c664:	2300      	movs	r3, #0
	ifprefix->lifetime.wrap_counter = 0;
    c666:	e9c1 3302 	strd	r3, r3, [r1, #8]
	sys_slist_find_and_remove(&active_prefix_lifetime_timers,
    c66a:	4803      	ldr	r0, [pc, #12]	; (c678 <net_if_ipv6_prefix_unset_timer+0x24>)
}
    c66c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_slist_find_and_remove(&active_prefix_lifetime_timers,
    c670:	f009 b8e8 	b.w	15844 <sys_slist_find_and_remove>
}
    c674:	bd08      	pop	{r3, pc}
    c676:	bf00      	nop
    c678:	20004160 	.word	0x20004160

0000c67c <net_if_ipv6_router_lookup>:
{
    c67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!routers[i].is_used ||
    c67e:	4c0f      	ldr	r4, [pc, #60]	; (c6bc <net_if_ipv6_router_lookup+0x40>)
{
    c680:	4605      	mov	r5, r0
    c682:	460e      	mov	r6, r1
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
    c684:	2300      	movs	r3, #0
		if (net_ipv6_addr_cmp(&routers[i].address.in6_addr, addr)) {
    c686:	f104 0724 	add.w	r7, r4, #36	; 0x24
		if (!routers[i].is_used ||
    c68a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		    routers[i].address.family != AF_INET6 ||
    c68e:	8c20      	ldrh	r0, [r4, #32]
		    routers[i].iface != iface) {
    c690:	6b61      	ldr	r1, [r4, #52]	; 0x34
		if (!routers[i].is_used ||
    c692:	f002 0201 	and.w	r2, r2, #1
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
    c696:	b113      	cbz	r3, c69e <net_if_ipv6_router_lookup+0x22>
	return NULL;
    c698:	2300      	movs	r3, #0
}
    c69a:	4618      	mov	r0, r3
    c69c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!routers[i].is_used ||
    c69e:	2a00      	cmp	r2, #0
    c6a0:	d0fb      	beq.n	c69a <net_if_ipv6_router_lookup+0x1e>
    c6a2:	2802      	cmp	r0, #2
    c6a4:	d1f9      	bne.n	c69a <net_if_ipv6_router_lookup+0x1e>
		    routers[i].address.family != AF_INET6 ||
    c6a6:	42a9      	cmp	r1, r5
    c6a8:	d1f7      	bne.n	c69a <net_if_ipv6_router_lookup+0x1e>
		if (net_ipv6_addr_cmp(&routers[i].address.in6_addr, addr)) {
    c6aa:	4631      	mov	r1, r6
    c6ac:	4638      	mov	r0, r7
    c6ae:	f009 f92d 	bl	1590c <net_ipv6_addr_cmp>
    c6b2:	2301      	movs	r3, #1
    c6b4:	2800      	cmp	r0, #0
    c6b6:	d0e8      	beq.n	c68a <net_if_ipv6_router_lookup+0xe>
			return &routers[i];
    c6b8:	4b00      	ldr	r3, [pc, #0]	; (c6bc <net_if_ipv6_router_lookup+0x40>)
    c6ba:	e7ee      	b.n	c69a <net_if_ipv6_router_lookup+0x1e>
    c6bc:	20004314 	.word	0x20004314

0000c6c0 <net_if_ipv6_router_find_default>:
		    !routers[i].is_default ||
    c6c0:	4b0b      	ldr	r3, [pc, #44]	; (c6f0 <net_if_ipv6_router_find_default+0x30>)
    c6c2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    c6c6:	f3c2 0140 	ubfx	r1, r2, #1, #1
		if (!routers[i].is_used ||
    c6ca:	f012 0201 	ands.w	r2, r2, #1
{
    c6ce:	b530      	push	{r4, r5, lr}
		    routers[i].address.family != AF_INET6) {
    c6d0:	8c1d      	ldrh	r5, [r3, #32]
		if (iface && iface != routers[i].iface) {
    c6d2:	6b5c      	ldr	r4, [r3, #52]	; 0x34
		if (!routers[i].is_used ||
    c6d4:	d008      	beq.n	c6e8 <net_if_ipv6_router_find_default+0x28>
    c6d6:	b139      	cbz	r1, c6e8 <net_if_ipv6_router_find_default+0x28>
		    !routers[i].is_default ||
    c6d8:	2d02      	cmp	r5, #2
    c6da:	d105      	bne.n	c6e8 <net_if_ipv6_router_find_default+0x28>
		if (iface && iface != routers[i].iface) {
    c6dc:	b130      	cbz	r0, c6ec <net_if_ipv6_router_find_default+0x2c>
		return &routers[i];
    c6de:	4284      	cmp	r4, r0
    c6e0:	bf0c      	ite	eq
    c6e2:	4618      	moveq	r0, r3
    c6e4:	2000      	movne	r0, #0
}
    c6e6:	bd30      	pop	{r4, r5, pc}
	return NULL;
    c6e8:	2000      	movs	r0, #0
    c6ea:	e7fc      	b.n	c6e6 <net_if_ipv6_router_find_default+0x26>
		return &routers[i];
    c6ec:	4618      	mov	r0, r3
    c6ee:	e7fa      	b.n	c6e6 <net_if_ipv6_router_find_default+0x26>
    c6f0:	20004314 	.word	0x20004314

0000c6f4 <net_if_ipv6_router_add>:
{
    c6f4:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (routers[i].is_used) {
    c6f6:	4c21      	ldr	r4, [pc, #132]	; (c77c <net_if_ipv6_router_add+0x88>)
    c6f8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
{
    c6fc:	4616      	mov	r6, r2
		if (routers[i].is_used) {
    c6fe:	07da      	lsls	r2, r3, #31
{
    c700:	b085      	sub	sp, #20
		if (routers[i].is_used) {
    c702:	d438      	bmi.n	c776 <net_if_ipv6_router_add+0x82>
	router->is_used = true;
    c704:	f043 0301 	orr.w	r3, r3, #1
    c708:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	net_ipaddr_copy(&router->address.in6_addr, addr);
    c70c:	466d      	mov	r5, sp
	router->address.family = AF_INET6;
    c70e:	2302      	movs	r3, #2
    c710:	8423      	strh	r3, [r4, #32]
	router->iface = iface;
    c712:	6360      	str	r0, [r4, #52]	; 0x34
	net_ipaddr_copy(&router->address.in6_addr, addr);
    c714:	460b      	mov	r3, r1
    c716:	f101 0c10 	add.w	ip, r1, #16
    c71a:	462a      	mov	r2, r5
    c71c:	6818      	ldr	r0, [r3, #0]
    c71e:	6859      	ldr	r1, [r3, #4]
    c720:	462f      	mov	r7, r5
    c722:	c703      	stmia	r7!, {r0, r1}
    c724:	3308      	adds	r3, #8
    c726:	4563      	cmp	r3, ip
    c728:	463d      	mov	r5, r7
    c72a:	d1f7      	bne.n	c71c <net_if_ipv6_router_add+0x28>
    c72c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
    c72e:	4d14      	ldr	r5, [pc, #80]	; (c780 <net_if_ipv6_router_add+0x8c>)
    c730:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	if (lifetime) {
    c734:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		router->is_default = true;
    c738:	f023 0306 	bic.w	r3, r3, #6
	if (lifetime) {
    c73c:	b1b6      	cbz	r6, c76c <net_if_ipv6_router_add+0x78>
		router->is_default = true;
    c73e:	f043 0302 	orr.w	r3, r3, #2
		k_delayed_work_init(&router->lifetime, ipv6_router_expired);
    c742:	4910      	ldr	r1, [pc, #64]	; (c784 <net_if_ipv6_router_add+0x90>)
		router->is_default = true;
    c744:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		k_delayed_work_init(&router->lifetime, ipv6_router_expired);
    c748:	f1a5 0024 	sub.w	r0, r5, #36	; 0x24
    c74c:	f00c f909 	bl	18962 <k_delayed_work_init>
		k_delayed_work_submit(&router->lifetime, K_SECONDS(lifetime));
    c750:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c754:	4371      	muls	r1, r6
    c756:	f1a5 0024 	sub.w	r0, r5, #36	; 0x24
    c75a:	f7ff fb35 	bl	bdc8 <k_delayed_work_submit>
    c75e:	f009 f88c 	bl	1587a <z_arch_is_user_context>
    c762:	f009 f88a 	bl	1587a <z_arch_is_user_context>
		return &routers[i];
    c766:	4805      	ldr	r0, [pc, #20]	; (c77c <net_if_ipv6_router_add+0x88>)
}
    c768:	b005      	add	sp, #20
    c76a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		router->is_default = false;
    c76c:	f043 0304 	orr.w	r3, r3, #4
    c770:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    c774:	e7f5      	b.n	c762 <net_if_ipv6_router_add+0x6e>
	return NULL;
    c776:	2000      	movs	r0, #0
    c778:	e7f6      	b.n	c768 <net_if_ipv6_router_add+0x74>
    c77a:	bf00      	nop
    c77c:	20004314 	.word	0x20004314
    c780:	20004338 	.word	0x20004338
    c784:	0001589b 	.word	0x0001589b

0000c788 <net_if_ipv6_router_rm>:
{
    c788:	b538      	push	{r3, r4, r5, lr}
		if (!routers[i].is_used) {
    c78a:	4b0b      	ldr	r3, [pc, #44]	; (c7b8 <net_if_ipv6_router_rm+0x30>)
    c78c:	f893 4038 	ldrb.w	r4, [r3, #56]	; 0x38
    c790:	f014 0401 	ands.w	r4, r4, #1
{
    c794:	4605      	mov	r5, r0
		if (!routers[i].is_used) {
    c796:	d00b      	beq.n	c7b0 <net_if_ipv6_router_rm+0x28>
		if (&routers[i] != router) {
    c798:	4298      	cmp	r0, r3
    c79a:	d10b      	bne.n	c7b4 <net_if_ipv6_router_rm+0x2c>
		k_delayed_work_cancel(&routers[i].lifetime);
    c79c:	f00c f8e9 	bl	18972 <k_delayed_work_cancel>
		routers[i].is_used = false;
    c7a0:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    c7a4:	f36f 0300 	bfc	r3, #0, #1
    c7a8:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
    c7ac:	f009 f865 	bl	1587a <z_arch_is_user_context>
}
    c7b0:	4620      	mov	r0, r4
    c7b2:	bd38      	pop	{r3, r4, r5, pc}
	return false;
    c7b4:	2400      	movs	r4, #0
    c7b6:	e7fb      	b.n	c7b0 <net_if_ipv6_router_rm+0x28>
    c7b8:	20004314 	.word	0x20004314

0000c7bc <net_if_ipv6_select_src_addr>:
#endif /* CONFIG_NET_IPV6 */

const struct in6_addr *net_if_ipv6_select_src_addr(struct net_if *dst_iface,
						   const struct in6_addr *dst)
{
    c7bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if defined(CONFIG_NET_IPV6)
	struct in6_addr *src = NULL;
	u8_t best_match = 0U;
	struct net_if *iface;

	if (!net_ipv6_is_ll_addr(dst) && !net_ipv6_is_addr_mcast(dst)) {
    c7be:	880a      	ldrh	r2, [r1, #0]
    c7c0:	f248 03fe 	movw	r3, #33022	; 0x80fe
	u8_t best_match = 0U;
    c7c4:	2400      	movs	r4, #0
	if (!net_ipv6_is_ll_addr(dst) && !net_ipv6_is_addr_mcast(dst)) {
    c7c6:	429a      	cmp	r2, r3
{
    c7c8:	460e      	mov	r6, r1
	u8_t best_match = 0U;
    c7ca:	f88d 4007 	strb.w	r4, [sp, #7]
	if (!net_ipv6_is_ll_addr(dst) && !net_ipv6_is_addr_mcast(dst)) {
    c7ce:	d030      	beq.n	c832 <net_if_ipv6_select_src_addr+0x76>
    c7d0:	780b      	ldrb	r3, [r1, #0]

		for (iface = __net_if_start;
    c7d2:	4d19      	ldr	r5, [pc, #100]	; (c838 <net_if_ipv6_select_src_addr+0x7c>)
	if (!net_ipv6_is_ll_addr(dst) && !net_ipv6_is_addr_mcast(dst)) {
    c7d4:	2bff      	cmp	r3, #255	; 0xff
    c7d6:	d113      	bne.n	c800 <net_if_ipv6_select_src_addr+0x44>
							 &best_match);
		}

	} else {
		for (iface = __net_if_start;
		     !dst_iface && iface != __net_if_end;
    c7d8:	4e18      	ldr	r6, [pc, #96]	; (c83c <net_if_ipv6_select_src_addr+0x80>)
		for (iface = __net_if_start;
    c7da:	b310      	cbz	r0, c822 <net_if_ipv6_select_src_addr+0x66>
				break;
			}
		}

		if (dst_iface) {
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
    c7dc:	2101      	movs	r1, #1
    c7de:	f009 fb41 	bl	15e64 <net_if_ipv6_get_ll>
    c7e2:	e015      	b.n	c810 <net_if_ipv6_select_src_addr+0x54>
			addr = net_if_ipv6_get_best_match(iface, dst,
    c7e4:	6868      	ldr	r0, [r5, #4]
    c7e6:	f10d 0207 	add.w	r2, sp, #7
    c7ea:	4631      	mov	r1, r6
    c7ec:	f7ff faf4 	bl	bdd8 <net_if_ipv6_get_best_match.isra.16>
		     iface++) {
    c7f0:	3520      	adds	r5, #32
			if (addr) {
    c7f2:	2800      	cmp	r0, #0
    c7f4:	bf18      	it	ne
    c7f6:	4604      	movne	r4, r0
		     !dst_iface && iface != __net_if_end;
    c7f8:	42bd      	cmp	r5, r7
    c7fa:	d1f3      	bne.n	c7e4 <net_if_ipv6_select_src_addr+0x28>
		}
	}

	if (!src) {
    c7fc:	b9b4      	cbnz	r4, c82c <net_if_ipv6_select_src_addr+0x70>
    c7fe:	e012      	b.n	c826 <net_if_ipv6_select_src_addr+0x6a>
		     !dst_iface && iface != __net_if_end;
    c800:	4f0e      	ldr	r7, [pc, #56]	; (c83c <net_if_ipv6_select_src_addr+0x80>)
		for (iface = __net_if_start;
    c802:	2800      	cmp	r0, #0
    c804:	d0f8      	beq.n	c7f8 <net_if_ipv6_select_src_addr+0x3c>
			src = net_if_ipv6_get_best_match(dst_iface, dst,
    c806:	f10d 0207 	add.w	r2, sp, #7
    c80a:	6840      	ldr	r0, [r0, #4]
    c80c:	f7ff fae4 	bl	bdd8 <net_if_ipv6_get_best_match.isra.16>
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
    c810:	4604      	mov	r4, r0
    c812:	e7f3      	b.n	c7fc <net_if_ipv6_select_src_addr+0x40>
			addr = net_if_ipv6_get_ll(iface, NET_ADDR_PREFERRED);
    c814:	2101      	movs	r1, #1
    c816:	4628      	mov	r0, r5
    c818:	f009 fb24 	bl	15e64 <net_if_ipv6_get_ll>
			if (addr) {
    c81c:	4604      	mov	r4, r0
    c81e:	b928      	cbnz	r0, c82c <net_if_ipv6_select_src_addr+0x70>
		     iface++) {
    c820:	3520      	adds	r5, #32
		     !dst_iface && iface != __net_if_end;
    c822:	42b5      	cmp	r5, r6
    c824:	d1f6      	bne.n	c814 <net_if_ipv6_select_src_addr+0x58>
		return net_ipv6_unspecified_address();
    c826:	f000 fa93 	bl	cd50 <net_ipv6_unspecified_address>
    c82a:	4604      	mov	r4, r0

	return src;
#else
	return NULL;
#endif
}
    c82c:	4620      	mov	r0, r4
    c82e:	b003      	add	sp, #12
    c830:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c832:	4d01      	ldr	r5, [pc, #4]	; (c838 <net_if_ipv6_select_src_addr+0x7c>)
    c834:	e7d0      	b.n	c7d8 <net_if_ipv6_select_src_addr+0x1c>
    c836:	bf00      	nop
    c838:	20011c2c 	.word	0x20011c2c
    c83c:	20011c2c 	.word	0x20011c2c

0000c840 <net_if_ipv6_select_src_iface>:

struct net_if *net_if_ipv6_select_src_iface(const struct in6_addr *dst)
{
    c840:	b513      	push	{r0, r1, r4, lr}
#if defined(CONFIG_NET_IPV6)
	const struct in6_addr *src;
	struct net_if *iface;

	src = net_if_ipv6_select_src_addr(NULL, dst);
    c842:	4601      	mov	r1, r0
    c844:	2000      	movs	r0, #0
    c846:	f7ff ffb9 	bl	c7bc <net_if_ipv6_select_src_addr>
    c84a:	4604      	mov	r4, r0
	if (src == net_ipv6_unspecified_address()) {
    c84c:	f000 fa80 	bl	cd50 <net_ipv6_unspecified_address>
    c850:	4284      	cmp	r4, r0
    c852:	d106      	bne.n	c862 <net_if_ipv6_select_src_iface+0x22>
	if (__net_if_start == __net_if_end) {
    c854:	4807      	ldr	r0, [pc, #28]	; (c874 <net_if_ipv6_select_src_iface+0x34>)
		return NULL;
    c856:	4b08      	ldr	r3, [pc, #32]	; (c878 <net_if_ipv6_select_src_iface+0x38>)
    c858:	4298      	cmp	r0, r3
    c85a:	bf08      	it	eq
    c85c:	2000      	moveq	r0, #0

	return iface;
#else
	return NULL;
#endif
}
    c85e:	b002      	add	sp, #8
    c860:	bd10      	pop	{r4, pc}
	if (!net_if_ipv6_addr_lookup(src, &iface)) {
    c862:	a901      	add	r1, sp, #4
    c864:	4620      	mov	r0, r4
    c866:	f7ff fbd1 	bl	c00c <net_if_ipv6_addr_lookup>
    c86a:	2800      	cmp	r0, #0
    c86c:	d0f2      	beq.n	c854 <net_if_ipv6_select_src_iface+0x14>
	return iface;
    c86e:	9801      	ldr	r0, [sp, #4]
    c870:	e7f5      	b.n	c85e <net_if_ipv6_select_src_iface+0x1e>
    c872:	bf00      	nop
    c874:	20011c2c 	.word	0x20011c2c
    c878:	20011c2c 	.word	0x20011c2c

0000c87c <net_if_call_link_cb>:
	sys_slist_find_and_remove(&link_callbacks, &link->node);
}

void net_if_call_link_cb(struct net_if *iface, struct net_linkaddr *lladdr,
			 int status)
{
    c87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_if_link_cb *link, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
    c87e:	4b08      	ldr	r3, [pc, #32]	; (c8a0 <net_if_call_link_cb+0x24>)
    c880:	681b      	ldr	r3, [r3, #0]
{
    c882:	4605      	mov	r5, r0
    c884:	460e      	mov	r6, r1
    c886:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
    c888:	b14b      	cbz	r3, c89e <net_if_call_link_cb+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    c88a:	681c      	ldr	r4, [r3, #0]
		link->cb(iface, lladdr, status);
    c88c:	685b      	ldr	r3, [r3, #4]
    c88e:	463a      	mov	r2, r7
    c890:	4631      	mov	r1, r6
    c892:	4628      	mov	r0, r5
    c894:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
    c896:	b114      	cbz	r4, c89e <net_if_call_link_cb+0x22>
    c898:	4623      	mov	r3, r4
    c89a:	6824      	ldr	r4, [r4, #0]
    c89c:	e7f6      	b.n	c88c <net_if_call_link_cb+0x10>
	}
}
    c89e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c8a0:	200042e4 	.word	0x200042e4

0000c8a4 <net_if_get_by_index>:
	return need_calc_checksum(iface, ETHERNET_HW_RX_CHKSUM_OFFLOAD);
}

struct net_if *net_if_get_by_index(int index)
{
	if (index <= 0) {
    c8a4:	2800      	cmp	r0, #0
{
    c8a6:	b508      	push	{r3, lr}
	if (index <= 0) {
    c8a8:	dd08      	ble.n	c8bc <net_if_get_by_index+0x18>
		return NULL;
	}

	if (&__net_if_start[index - 1] >= __net_if_end) {
    c8aa:	1e43      	subs	r3, r0, #1
    c8ac:	4804      	ldr	r0, [pc, #16]	; (c8c0 <net_if_get_by_index+0x1c>)
    c8ae:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    c8b2:	4b04      	ldr	r3, [pc, #16]	; (c8c4 <net_if_get_by_index+0x20>)
    c8b4:	4298      	cmp	r0, r3
    c8b6:	d302      	bcc.n	c8be <net_if_get_by_index+0x1a>
    c8b8:	f008 ffdf 	bl	1587a <z_arch_is_user_context>
		return NULL;
    c8bc:	2000      	movs	r0, #0
		NET_DBG("Index %d is too large", index);
		return NULL;
	}

	return &__net_if_start[index - 1];
}
    c8be:	bd08      	pop	{r3, pc}
    c8c0:	20011c2c 	.word	0x20011c2c
    c8c4:	20011c2c 	.word	0x20011c2c

0000c8c8 <net_if_get_by_iface>:

int net_if_get_by_iface(struct net_if *iface)
{
	if (!(iface >= __net_if_start && iface < __net_if_end)) {
    c8c8:	4b06      	ldr	r3, [pc, #24]	; (c8e4 <net_if_get_by_iface+0x1c>)
    c8ca:	4298      	cmp	r0, r3
    c8cc:	d306      	bcc.n	c8dc <net_if_get_by_iface+0x14>
    c8ce:	4a06      	ldr	r2, [pc, #24]	; (c8e8 <net_if_get_by_iface+0x20>)
    c8d0:	4290      	cmp	r0, r2
    c8d2:	d203      	bcs.n	c8dc <net_if_get_by_iface+0x14>
		return -1;
	}

	return (iface - __net_if_start) + 1;
    c8d4:	1ac0      	subs	r0, r0, r3
    c8d6:	1140      	asrs	r0, r0, #5
    c8d8:	3001      	adds	r0, #1
    c8da:	4770      	bx	lr
		return -1;
    c8dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    c8e0:	4770      	bx	lr
    c8e2:	bf00      	nop
    c8e4:	20011c2c 	.word	0x20011c2c
    c8e8:	20011c2c 	.word	0x20011c2c

0000c8ec <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP */

void net_if_init(void)
{
    c8ec:	b570      	push	{r4, r5, r6, lr}
    c8ee:	f008 ffc4 	bl	1587a <z_arch_is_user_context>
	int i;
#endif

	NET_DBG("");

	net_tc_tx_init();
    c8f2:	f000 f931 	bl	cb58 <net_tc_tx_init>

#if defined(CONFIG_NET_IPV6)
	k_delayed_work_init(&address_lifetime_timer, address_lifetime_timeout);
    c8f6:	491d      	ldr	r1, [pc, #116]	; (c96c <net_if_init+0x80>)
    c8f8:	481d      	ldr	r0, [pc, #116]	; (c970 <net_if_init+0x84>)
	k_delayed_work_init(&prefix_lifetime_timer, prefix_lifetime_timeout);
#endif

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
    c8fa:	4c1e      	ldr	r4, [pc, #120]	; (c974 <net_if_init+0x88>)
    c8fc:	4e1e      	ldr	r6, [pc, #120]	; (c978 <net_if_init+0x8c>)
	k_delayed_work_init(&address_lifetime_timer, address_lifetime_timeout);
    c8fe:	f00c f830 	bl	18962 <k_delayed_work_init>
	k_delayed_work_init(&prefix_lifetime_timer, prefix_lifetime_timeout);
    c902:	491e      	ldr	r1, [pc, #120]	; (c97c <net_if_init+0x90>)
    c904:	481e      	ldr	r0, [pc, #120]	; (c980 <net_if_init+0x94>)
    c906:	f00c f82c 	bl	18962 <k_delayed_work_init>
	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
    c90a:	4625      	mov	r5, r4
    c90c:	42b4      	cmp	r4, r6
    c90e:	d108      	bne.n	c922 <net_if_init+0x36>
    c910:	1b63      	subs	r3, r4, r5
	     iface++, if_count++) {
		init_iface(iface);
	}

	if (iface == __net_if_start) {
    c912:	42ac      	cmp	r4, r5
    c914:	ea4f 1353 	mov.w	r3, r3, lsr #5
    c918:	d10d      	bne.n	c936 <net_if_init+0x4a>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
    c91a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c91e:	f008 bfac 	b.w	1587a <z_arch_is_user_context>
 *
 * @return a pointer to the device driver instance
 */
static inline struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
    c922:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
    c924:	681b      	ldr	r3, [r3, #0]
    c926:	685a      	ldr	r2, [r3, #4]
    c928:	f008 ffa7 	bl	1587a <z_arch_is_user_context>
	api->init(iface);
    c92c:	4620      	mov	r0, r4
    c92e:	6813      	ldr	r3, [r2, #0]
    c930:	4798      	blx	r3
	     iface++, if_count++) {
    c932:	3420      	adds	r4, #32
    c934:	e7ea      	b.n	c90c <net_if_init+0x20>
	if (if_count > ARRAY_SIZE(ipv6_addresses)) {
    c936:	2b01      	cmp	r3, #1
    c938:	dd03      	ble.n	c942 <net_if_init+0x56>
    c93a:	f008 ff9e 	bl	1587a <z_arch_is_user_context>
    c93e:	f008 ff9c 	bl	1587a <z_arch_is_user_context>
		ipv6_addresses[i].ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
    c942:	4c10      	ldr	r4, [pc, #64]	; (c984 <net_if_init+0x98>)
    c944:	2340      	movs	r3, #64	; 0x40
    c946:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
		ipv6_addresses[i].ipv6.base_reachable_time = REACHABLE_TIME;
    c94a:	f247 5330 	movw	r3, #30000	; 0x7530
    c94e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 * @param ipv6 IPv6 address configuration
 */
static inline void net_if_ipv6_set_reachable_time(struct net_if_ipv6 *ipv6)
{
#if defined(CONFIG_NET_IPV6)
	ipv6->reachable_time = net_if_ipv6_calc_reachable_time(ipv6);
    c952:	4620      	mov	r0, r4
    c954:	f009 fab8 	bl	15ec8 <net_if_ipv6_calc_reachable_time>
		k_delayed_work_init(&ipv6_addresses[i].ipv6.rs_timer,
    c958:	490b      	ldr	r1, [pc, #44]	; (c988 <net_if_init+0x9c>)
    c95a:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
    c95e:	f504 7094 	add.w	r0, r4, #296	; 0x128
}
    c962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_delayed_work_init(&ipv6_addresses[i].ipv6.rs_timer,
    c966:	f00b bffc 	b.w	18962 <k_delayed_work_init>
    c96a:	bf00      	nop
    c96c:	0000be85 	.word	0x0000be85
    c970:	20004168 	.word	0x20004168
    c974:	20011c2c 	.word	0x20011c2c
    c978:	20011c2c 	.word	0x20011c2c
    c97c:	0000c3c9 	.word	0x0000c3c9
    c980:	200042f4 	.word	0x200042f4
    c984:	20004188 	.word	0x20004188
    c988:	0000bfc1 	.word	0x0000bfc1

0000c98c <net_if_post_init>:

void net_if_post_init(void)
{
    c98c:	b538      	push	{r3, r4, r5, lr}
    c98e:	f008 ff74 	bl	1587a <z_arch_is_user_context>
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    c992:	4c05      	ldr	r4, [pc, #20]	; (c9a8 <net_if_post_init+0x1c>)
    c994:	4d05      	ldr	r5, [pc, #20]	; (c9ac <net_if_post_init+0x20>)
    c996:	42ac      	cmp	r4, r5
    c998:	d100      	bne.n	c99c <net_if_post_init+0x10>
		net_if_up(iface);
	}
}
    c99a:	bd38      	pop	{r3, r4, r5, pc}
		net_if_up(iface);
    c99c:	4620      	mov	r0, r4
    c99e:	f009 fb23 	bl	15fe8 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    c9a2:	3420      	adds	r4, #32
    c9a4:	e7f7      	b.n	c996 <net_if_post_init+0xa>
    c9a6:	bf00      	nop
    c9a8:	20011c2c 	.word	0x20011c2c
    c9ac:	20011c2c 	.word	0x20011c2c

0000c9b0 <net_pkt_alloc_buffer>:
int net_pkt_alloc_buffer(struct net_pkt *pkt,
			 size_t size,
			 enum net_ip_protocol proto,
			 s32_t timeout)
#endif
{
    c9b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c9b4:	4606      	mov	r6, r0
    c9b6:	460c      	mov	r4, r1
    c9b8:	4617      	mov	r7, r2
    c9ba:	461d      	mov	r5, r3
	return (u32_t)k_uptime_get();
    c9bc:	f009 fbf4 	bl	161a8 <k_uptime_get>
    c9c0:	4680      	mov	r8, r0
	struct net_buf_pool *pool = NULL;
	size_t alloc_len = 0;
	size_t hdr_len = 0;
	struct net_buf *buf;

	if (!size && proto == 0 && net_pkt_family(pkt) == AF_UNSPEC) {
    c9c2:	b934      	cbnz	r4, c9d2 <net_pkt_alloc_buffer+0x22>
    c9c4:	b92f      	cbnz	r7, c9d2 <net_pkt_alloc_buffer+0x22>
#endif
}

static inline u8_t net_pkt_family(struct net_pkt *pkt)
{
	return pkt->family;
    c9c6:	f896 003f 	ldrb.w	r0, [r6, #63]	; 0x3f
    c9ca:	f3c0 0042 	ubfx	r0, r0, #1, #3
    c9ce:	2800      	cmp	r0, #0
    c9d0:	d078      	beq.n	cac4 <net_pkt_alloc_buffer+0x114>
		return 0;
	}

	if (k_is_in_isr()) {
    c9d2:	f003 fc4d 	bl	10270 <k_is_in_isr>
		timeout = K_NO_WAIT;
    c9d6:	2800      	cmp	r0, #0
	}

	/* Verifying existing buffer and take into account free space there */
	alloc_len = pkt_get_size(pkt) - net_pkt_get_len(pkt);
    c9d8:	6970      	ldr	r0, [r6, #20]
		timeout = K_NO_WAIT;
    c9da:	bf18      	it	ne
    c9dc:	2500      	movne	r5, #0
	struct net_buf *buf = pkt->buffer;
    c9de:	4681      	mov	r9, r0
	size_t size = 0;
    c9e0:	2100      	movs	r1, #0
	while (buf) {
    c9e2:	f1b9 0f00 	cmp.w	r9, #0
    c9e6:	d14f      	bne.n	ca88 <net_pkt_alloc_buffer+0xd8>
}
#endif /* CONFIG_NET_PKT_TIMESTAMP */

static inline size_t net_pkt_get_len(struct net_pkt *pkt)
{
	return net_buf_frags_len(pkt->frags);
    c9e8:	f009 fb36 	bl	16058 <net_buf_frags_len>
	if (!alloc_len) {
    c9ec:	4288      	cmp	r0, r1
    c9ee:	4602      	mov	r2, r0
    c9f0:	d157      	bne.n	caa2 <net_pkt_alloc_buffer+0xf2>
		/* In case of no free space, it will account for header
		 * space estimation
		 */
		hdr_len = pkt_estimate_headers_length(pkt,
    c9f2:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
    c9f6:	f3c3 0342 	ubfx	r3, r3, #1, #3
	if (family == AF_UNSPEC) {
    c9fa:	2b00      	cmp	r3, #0
    c9fc:	d051      	beq.n	caa2 <net_pkt_alloc_buffer+0xf2>
		hdr_len += NET_IPV6H_LEN;
    c9fe:	2b02      	cmp	r3, #2
    ca00:	bf14      	ite	ne
    ca02:	f04f 0a00 	movne.w	sl, #0
    ca06:	f04f 0a28 	moveq.w	sl, #40	; 0x28
	} else if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
    ca0a:	2f11      	cmp	r7, #17
    ca0c:	d142      	bne.n	ca94 <net_pkt_alloc_buffer+0xe4>
		hdr_len += NET_UDPH_LEN;
    ca0e:	f10a 0a08 	add.w	sl, sl, #8
    ca12:	f009 fb17 	bl	16044 <z_arch_is_user_context>
	return pkt->family;
    ca16:	f896 003f 	ldrb.w	r0, [r6, #63]	; 0x3f
	if (net_pkt_iface(pkt)) {
    ca1a:	6a73      	ldr	r3, [r6, #36]	; 0x24
						      net_pkt_family(pkt),
						      proto);
	}

	/* Calculate the maximum that can be allocated depending on size */
	alloc_len = pkt_buffer_length(pkt, size + hdr_len, proto, alloc_len);
    ca1c:	4454      	add	r4, sl
    ca1e:	f3c0 0042 	ubfx	r0, r0, #1, #3
	if (net_pkt_iface(pkt)) {
    ca22:	b10b      	cbz	r3, ca28 <net_pkt_alloc_buffer+0x78>
	return iface->if_dev->mtu;
    ca24:	681b      	ldr	r3, [r3, #0]
		max_len = net_if_get_mtu(net_pkt_iface(pkt));
    ca26:	8b1b      	ldrh	r3, [r3, #24]
	if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
    ca28:	2802      	cmp	r0, #2
    ca2a:	d13c      	bne.n	caa6 <net_pkt_alloc_buffer+0xf6>
		max_len = MAX(max_len, NET_IPV6_MTU);
    ca2c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    ca30:	bf38      	it	cc
    ca32:	f44f 63a0 	movcc.w	r3, #1280	; 0x500
	max_len -= existing;
    ca36:	1a52      	subs	r2, r2, r1
    ca38:	18d0      	adds	r0, r2, r3
	return MIN(size, max_len);
    ca3a:	4284      	cmp	r4, r0
    ca3c:	bf28      	it	cs
    ca3e:	4604      	movcs	r4, r0
    ca40:	f009 fb00 	bl	16044 <z_arch_is_user_context>
	if (pkt->context) {
		pool = get_data_pool(pkt->context);
	}

	if (!pool) {
		pool = pkt->slab == &tx_pkts ? &tx_bufs : &rx_bufs;
    ca44:	4b31      	ldr	r3, [pc, #196]	; (cb0c <net_pkt_alloc_buffer+0x15c>)
    ca46:	6930      	ldr	r0, [r6, #16]
    ca48:	4931      	ldr	r1, [pc, #196]	; (cb10 <net_pkt_alloc_buffer+0x160>)
    ca4a:	4a32      	ldr	r2, [pc, #200]	; (cb14 <net_pkt_alloc_buffer+0x164>)
    ca4c:	4288      	cmp	r0, r1
    ca4e:	bf0c      	ite	eq
    ca50:	4692      	moveq	sl, r2
    ca52:	469a      	movne	sl, r3
	}

	if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
    ca54:	1c6b      	adds	r3, r5, #1
    ca56:	2b01      	cmp	r3, #1
    ca58:	d907      	bls.n	ca6a <net_pkt_alloc_buffer+0xba>
    ca5a:	f009 fba5 	bl	161a8 <k_uptime_get>
		u32_t diff = k_uptime_get_32() - alloc_start;
    ca5e:	eba0 0008 	sub.w	r0, r0, r8

		timeout -= MIN(timeout, diff);
    ca62:	42a8      	cmp	r0, r5
    ca64:	bf94      	ite	ls
    ca66:	1a2d      	subls	r5, r5, r0
    ca68:	1b6d      	subhi	r5, r5, r5
    ca6a:	f009 fb9d 	bl	161a8 <k_uptime_get>
	struct net_buf *current = NULL;
    ca6e:	f04f 0800 	mov.w	r8, #0
    ca72:	4683      	mov	fp, r0
	while (size) {
    ca74:	b9cc      	cbnz	r4, caaa <net_pkt_alloc_buffer+0xfa>
	buf = pkt_alloc_buffer(pool, alloc_len, timeout, caller, line);
#else
	buf = pkt_alloc_buffer(pool, alloc_len, timeout);
#endif

	if (!buf) {
    ca76:	f1b9 0f00 	cmp.w	r9, #0
    ca7a:	d01f      	beq.n	cabc <net_pkt_alloc_buffer+0x10c>
		NET_ERR("Data buffer allocation failed.");
		return -ENOMEM;
	}

	net_pkt_append_buffer(pkt, buf);
    ca7c:	4630      	mov	r0, r6
    ca7e:	4649      	mov	r1, r9
    ca80:	f009 fc70 	bl	16364 <net_pkt_append_buffer>

	return 0;
    ca84:	4620      	mov	r0, r4
    ca86:	e01d      	b.n	cac4 <net_pkt_alloc_buffer+0x114>
		size += buf->size;
    ca88:	f8b9 300e 	ldrh.w	r3, [r9, #14]
		buf = buf->frags;
    ca8c:	f8d9 9000 	ldr.w	r9, [r9]
		size += buf->size;
    ca90:	4419      	add	r1, r3
		buf = buf->frags;
    ca92:	e7a6      	b.n	c9e2 <net_pkt_alloc_buffer+0x32>
	} else if (proto == IPPROTO_ICMP || proto == IPPROTO_ICMPV6) {
    ca94:	2f01      	cmp	r7, #1
    ca96:	d001      	beq.n	ca9c <net_pkt_alloc_buffer+0xec>
    ca98:	2f3a      	cmp	r7, #58	; 0x3a
    ca9a:	d1ba      	bne.n	ca12 <net_pkt_alloc_buffer+0x62>
		hdr_len += NET_ICMPH_LEN;
    ca9c:	f10a 0a04 	add.w	sl, sl, #4
    caa0:	e7b7      	b.n	ca12 <net_pkt_alloc_buffer+0x62>
	size_t hdr_len = 0;
    caa2:	46ca      	mov	sl, r9
    caa4:	e7b7      	b.n	ca16 <net_pkt_alloc_buffer+0x66>
			max_len = size;
    caa6:	4623      	mov	r3, r4
    caa8:	e7c5      	b.n	ca36 <net_pkt_alloc_buffer+0x86>
		new = net_buf_alloc_fixed(pool, timeout);
    caaa:	4629      	mov	r1, r5
    caac:	4650      	mov	r0, sl
    caae:	f008 fac7 	bl	15040 <net_buf_alloc_fixed>
		if (!new) {
    cab2:	4607      	mov	r7, r0
    cab4:	b940      	cbnz	r0, cac8 <net_pkt_alloc_buffer+0x118>
	if (first) {
    cab6:	f1b9 0f00 	cmp.w	r9, #0
    caba:	d122      	bne.n	cb02 <net_pkt_alloc_buffer+0x152>
    cabc:	f009 fac2 	bl	16044 <z_arch_is_user_context>
		return -ENOMEM;
    cac0:	f06f 000b 	mvn.w	r0, #11
}
    cac4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!first && !current) {
    cac8:	f1b9 0f00 	cmp.w	r9, #0
    cacc:	d102      	bne.n	cad4 <net_pkt_alloc_buffer+0x124>
    cace:	f1b8 0f00 	cmp.w	r8, #0
    cad2:	d014      	beq.n	cafe <net_pkt_alloc_buffer+0x14e>
			current->frags = new;
    cad4:	f8c8 7000 	str.w	r7, [r8]
		if (current->size > size) {
    cad8:	89fb      	ldrh	r3, [r7, #14]
    cada:	42a3      	cmp	r3, r4
			current->size = size;
    cadc:	bf88      	it	hi
    cade:	81fc      	strhhi	r4, [r7, #14]
		size -= current->size;
    cae0:	89fb      	ldrh	r3, [r7, #14]
    cae2:	1ae4      	subs	r4, r4, r3
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
    cae4:	1c6b      	adds	r3, r5, #1
    cae6:	2b01      	cmp	r3, #1
    cae8:	d907      	bls.n	cafa <net_pkt_alloc_buffer+0x14a>
    caea:	f009 fb5d 	bl	161a8 <k_uptime_get>
			u32_t diff = k_uptime_get_32() - alloc_start;
    caee:	eba0 000b 	sub.w	r0, r0, fp
			timeout -= MIN(timeout, diff);
    caf2:	42a8      	cmp	r0, r5
    caf4:	bf94      	ite	ls
    caf6:	1a2d      	subls	r5, r5, r0
    caf8:	1b6d      	subhi	r5, r5, r5
		if (!first && !current) {
    cafa:	46b8      	mov	r8, r7
    cafc:	e7ba      	b.n	ca74 <net_pkt_alloc_buffer+0xc4>
    cafe:	4681      	mov	r9, r0
    cb00:	e7ea      	b.n	cad8 <net_pkt_alloc_buffer+0x128>
		net_buf_unref(first);
    cb02:	4648      	mov	r0, r9
    cb04:	f7fe ff26 	bl	b954 <net_buf_unref>
	if (!buf) {
    cb08:	e7d8      	b.n	cabc <net_pkt_alloc_buffer+0x10c>
    cb0a:	bf00      	nop
    cb0c:	20011bec 	.word	0x20011bec
    cb10:	20011b58 	.word	0x20011b58
    cb14:	20011c0c 	.word	0x20011c0c

0000cb18 <net_pkt_alloc_with_buffer>:
					  size_t size,
					  sa_family_t family,
					  enum net_ip_protocol proto,
					  s32_t timeout)
#endif
{
    cb18:	b513      	push	{r0, r1, r4, lr}
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
				     proto, timeout, caller, line);
#else
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
    cb1a:	9c04      	ldr	r4, [sp, #16]
    cb1c:	e9cd 3400 	strd	r3, r4, [sp]
    cb20:	4613      	mov	r3, r2
    cb22:	460a      	mov	r2, r1
    cb24:	4601      	mov	r1, r0
    cb26:	4802      	ldr	r0, [pc, #8]	; (cb30 <net_pkt_alloc_with_buffer+0x18>)
    cb28:	f009 fc2e 	bl	16388 <pkt_alloc_with_buffer>
				     proto, timeout);
#endif
}
    cb2c:	b002      	add	sp, #8
    cb2e:	bd10      	pop	{r4, pc}
    cb30:	20011b58 	.word	0x20011b58

0000cb34 <net_tc_submit_to_tx_queue>:
static struct net_traffic_class tx_classes[NET_TC_TX_COUNT];
static struct net_traffic_class rx_classes[NET_TC_RX_COUNT];

void net_tc_submit_to_tx_queue(u8_t tc, struct net_pkt *pkt)
{
	k_work_submit_to_queue(&tx_classes[tc].work_q, net_pkt_work(pkt));
    cb34:	4b03      	ldr	r3, [pc, #12]	; (cb44 <net_tc_submit_to_tx_queue+0x10>)
    cb36:	229c      	movs	r2, #156	; 0x9c
    cb38:	3104      	adds	r1, #4
    cb3a:	fb00 3002 	mla	r0, r0, r2, r3
    cb3e:	f009 bd7b 	b.w	16638 <k_work_submit_to_queue>
    cb42:	bf00      	nop
    cb44:	200043ec 	.word	0x200043ec

0000cb48 <net_tx_priority2tc>:

int net_tx_priority2tc(enum net_priority prio)
{
	if (prio > NET_PRIORITY_NC) {
		/* Use default value suggested in 802.1Q */
		prio = NET_PRIORITY_BE;
    cb48:	2807      	cmp	r0, #7
    cb4a:	bf88      	it	hi
    cb4c:	2000      	movhi	r0, #0
	}

	return tx_prio2tc_map[prio];
}
    cb4e:	4b01      	ldr	r3, [pc, #4]	; (cb54 <net_tx_priority2tc+0xc>)
    cb50:	5c18      	ldrb	r0, [r3, r0]
    cb52:	4770      	bx	lr
    cb54:	0001b9a6 	.word	0x0001b9a6

0000cb58 <net_tc_tx_init>:
/* Create workqueue for each traffic class we are using. All the network
 * traffic goes through these classes. There needs to be at least one traffic
 * class in the system.
 */
void net_tc_tx_init(void)
{
    cb58:	b510      	push	{r4, lr}

	for (i = 0; i < NET_TC_TX_COUNT; i++) {
		u8_t thread_priority;

		thread_priority = tx_tc2thread(i);
		tx_classes[i].tc = thread_priority;
    cb5a:	4c0a      	ldr	r4, [pc, #40]	; (cb84 <net_tc_tx_init+0x2c>)
    cb5c:	2307      	movs	r3, #7
    cb5e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    cb62:	f009 fd5f 	bl	16624 <z_arch_is_user_context>
			"prio %d (%d)", i,
			&tx_classes[i].work_q.queue, TX_STACK(i),
			K_THREAD_STACK_SIZEOF(tx_stack[i]),
			thread_priority, K_PRIO_COOP(thread_priority));

		k_work_q_start(&tx_classes[i].work_q,
    cb66:	4620      	mov	r0, r4
    cb68:	4907      	ldr	r1, [pc, #28]	; (cb88 <net_tc_tx_init+0x30>)
    cb6a:	f06f 0308 	mvn.w	r3, #8
    cb6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    cb72:	f003 fdd1 	bl	10718 <k_work_q_start>
			       tx_stack[i],
			       K_THREAD_STACK_SIZEOF(tx_stack[i]),
			       K_PRIO_COOP(thread_priority));
		k_thread_name_set(&tx_classes[i].work_q.thread, "tx_workq");
    cb76:	f104 0010 	add.w	r0, r4, #16
    cb7a:	4904      	ldr	r1, [pc, #16]	; (cb8c <net_tc_tx_init+0x34>)
	}
}
    cb7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_thread_name_set(&tx_classes[i].work_q.thread, "tx_workq");
    cb80:	f009 bd72 	b.w	16668 <k_thread_name_set>
    cb84:	200043ec 	.word	0x200043ec
    cb88:	20009000 	.word	0x20009000
    cb8c:	0001b99d 	.word	0x0001b99d

0000cb90 <net_tc_rx_init>:

void net_tc_rx_init(void)
{
    cb90:	b510      	push	{r4, lr}

	for (i = 0; i < NET_TC_RX_COUNT; i++) {
		u8_t thread_priority;

		thread_priority = rx_tc2thread(i);
		rx_classes[i].tc = thread_priority;
    cb92:	4c0a      	ldr	r4, [pc, #40]	; (cbbc <net_tc_rx_init+0x2c>)
    cb94:	2307      	movs	r3, #7
    cb96:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    cb9a:	f009 fd43 	bl	16624 <z_arch_is_user_context>
			"prio %d (%d)", i,
			&rx_classes[i].work_q.queue, RX_STACK(i),
			K_THREAD_STACK_SIZEOF(rx_stack[i]),
			thread_priority, K_PRIO_COOP(thread_priority));

		k_work_q_start(&rx_classes[i].work_q,
    cb9e:	4620      	mov	r0, r4
    cba0:	4907      	ldr	r1, [pc, #28]	; (cbc0 <net_tc_rx_init+0x30>)
    cba2:	f06f 0308 	mvn.w	r3, #8
    cba6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    cbaa:	f003 fdb5 	bl	10718 <k_work_q_start>
			       rx_stack[i],
			       K_THREAD_STACK_SIZEOF(rx_stack[i]),
			       K_PRIO_COOP(thread_priority));
		k_thread_name_set(&rx_classes[i].work_q.thread, "rx_workq");
    cbae:	f104 0010 	add.w	r0, r4, #16
    cbb2:	4904      	ldr	r1, [pc, #16]	; (cbc4 <net_tc_rx_init+0x34>)
	}
}
    cbb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_thread_name_set(&rx_classes[i].work_q.thread, "rx_workq");
    cbb8:	f009 bd56 	b.w	16668 <k_thread_name_set>
    cbbc:	20004350 	.word	0x20004350
    cbc0:	20009800 	.word	0x20009800
    cbc4:	0001b994 	.word	0x0001b994

0000cbc8 <net_icmpv6_register_handler>:
Z_GENLIST_PREPEND(slist, snode)
    cbc8:	4b03      	ldr	r3, [pc, #12]	; (cbd8 <net_icmpv6_register_handler+0x10>)
    cbca:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
    cbcc:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(slist, snode)
    cbce:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    cbd0:	6018      	str	r0, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    cbd2:	b902      	cbnz	r2, cbd6 <net_icmpv6_register_handler+0xe>
	list->tail = node;
    cbd4:	6058      	str	r0, [r3, #4]
}

void net_icmpv6_register_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_prepend(&handlers, &handler->node);
}
    cbd6:	4770      	bx	lr
    cbd8:	20004488 	.word	0x20004488

0000cbdc <net_icmpv6_input>:
	return ret;
}

enum net_verdict net_icmpv6_input(struct net_pkt *pkt,
				  struct net_ipv6_hdr *ip_hdr)
{
    cbdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
    cbde:	2200      	movs	r2, #0
    cbe0:	2304      	movs	r3, #4
{
    cbe2:	460e      	mov	r6, r1
					      struct net_icmp_hdr);
	struct net_icmp_hdr *icmp_hdr;
	struct net_icmpv6_handler *cb;

	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
    cbe4:	4669      	mov	r1, sp
{
    cbe6:	4605      	mov	r5, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
    cbe8:	e9cd 2300 	strd	r2, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
    cbec:	f009 fcef 	bl	165ce <net_pkt_get_data>
	if (!icmp_hdr) {
    cbf0:	4604      	mov	r4, r0
    cbf2:	b918      	cbnz	r0, cbfc <net_icmpv6_input+0x20>
    cbf4:	f009 feee 	bl	169d4 <z_arch_is_user_context>
		}
	}
drop:
	net_stats_update_icmp_drop(net_pkt_iface(pkt));

	return NET_DROP;
    cbf8:	2002      	movs	r0, #2
    cbfa:	e01d      	b.n	cc38 <net_icmpv6_input+0x5c>
extern u16_t net_calc_chksum_ipv4(struct net_pkt *pkt);
#endif /* CONFIG_NET_IPV4 */

static inline u16_t net_calc_chksum_icmpv6(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
    cbfc:	213a      	movs	r1, #58	; 0x3a
    cbfe:	4628      	mov	r0, r5
    cc00:	f009 fe67 	bl	168d2 <net_calc_chksum>
	if (net_calc_chksum_icmpv6(pkt) != 0U) {
    cc04:	2800      	cmp	r0, #0
    cc06:	d1f5      	bne.n	cbf4 <net_icmpv6_input+0x18>
 * Packet needs to be set to overwrite mode.
 */
static inline int net_pkt_acknowledge_data(struct net_pkt *pkt,
					   struct net_pkt_data_access *access)
{
	return net_pkt_skip(pkt, access->size);
    cc08:	9901      	ldr	r1, [sp, #4]
    cc0a:	4628      	mov	r0, r5
    cc0c:	f009 fbee 	bl	163ec <net_pkt_skip>
    cc10:	f009 fee0 	bl	169d4 <z_arch_is_user_context>
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
    cc14:	4b0b      	ldr	r3, [pc, #44]	; (cc44 <net_icmpv6_input+0x68>)
    cc16:	681b      	ldr	r3, [r3, #0]
    cc18:	2b00      	cmp	r3, #0
    cc1a:	d0ed      	beq.n	cbf8 <net_icmpv6_input+0x1c>
		if (cb->type == icmp_hdr->type &&
    cc1c:	7821      	ldrb	r1, [r4, #0]
    cc1e:	7a1a      	ldrb	r2, [r3, #8]
    cc20:	428a      	cmp	r2, r1
    cc22:	d10b      	bne.n	cc3c <net_icmpv6_input+0x60>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
    cc24:	7a5a      	ldrb	r2, [r3, #9]
		if (cb->type == icmp_hdr->type &&
    cc26:	7860      	ldrb	r0, [r4, #1]
    cc28:	4290      	cmp	r0, r2
    cc2a:	d000      	beq.n	cc2e <net_icmpv6_input+0x52>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
    cc2c:	b932      	cbnz	r2, cc3c <net_icmpv6_input+0x60>
			return cb->handler(pkt, ip_hdr, icmp_hdr);
    cc2e:	685b      	ldr	r3, [r3, #4]
    cc30:	4622      	mov	r2, r4
    cc32:	4631      	mov	r1, r6
    cc34:	4628      	mov	r0, r5
    cc36:	4798      	blx	r3
}
    cc38:	b002      	add	sp, #8
    cc3a:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    cc3c:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
    cc3e:	2b00      	cmp	r3, #0
    cc40:	d1ed      	bne.n	cc1e <net_icmpv6_input+0x42>
    cc42:	e7d9      	b.n	cbf8 <net_icmpv6_input+0x1c>
    cc44:	20004488 	.word	0x20004488

0000cc48 <net_icmpv6_init>:
	.handler = icmpv6_handle_echo_request,
};

void net_icmpv6_init(void)
{
	net_icmpv6_register_handler(&echo_request_handler);
    cc48:	4801      	ldr	r0, [pc, #4]	; (cc50 <net_icmpv6_init+0x8>)
    cc4a:	f7ff bfbd 	b.w	cbc8 <net_icmpv6_register_handler>
    cc4e:	bf00      	nop
    cc50:	2000c6cc 	.word	0x2000c6cc

0000cc54 <net_nbr_link>:
	return NULL;
}

int net_nbr_link(struct net_nbr *nbr, struct net_if *iface,
		 struct net_linkaddr *lladdr)
{
    cc54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i, avail = -1;

	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
    cc58:	7843      	ldrb	r3, [r0, #1]
    cc5a:	2bff      	cmp	r3, #255	; 0xff
{
    cc5c:	4607      	mov	r7, r0
    cc5e:	4689      	mov	r9, r1
    cc60:	4690      	mov	r8, r2
	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
    cc62:	d145      	bne.n	ccf0 <net_nbr_link+0x9c>
    cc64:	f8df a094 	ldr.w	sl, [pc, #148]	; ccfc <net_nbr_link+0xa8>
	int i, avail = -1;
    cc68:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		return -EALREADY;
	}

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
    cc6c:	2500      	movs	r5, #0
    cc6e:	4656      	mov	r6, sl
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
    cc70:	1c62      	adds	r2, r4, #1
    cc72:	f89a 3008 	ldrb.w	r3, [sl, #8]
    cc76:	d114      	bne.n	cca2 <net_nbr_link+0x4e>
    cc78:	b3c3      	cbz	r3, ccec <net_nbr_link+0x98>
			avail = i;
		}

		if (net_neighbor_lladdr[i].ref &&
		    !memcmp(lladdr->addr,
    cc7a:	f898 2004 	ldrb.w	r2, [r8, #4]
    cc7e:	f8d8 0000 	ldr.w	r0, [r8]
    cc82:	f10a 0102 	add.w	r1, sl, #2
    cc86:	f7f5 fb6b 	bl	2360 <memcmp>
		if (net_neighbor_lladdr[i].ref &&
    cc8a:	b960      	cbnz	r0, cca6 <net_nbr_link+0x52>
			    net_neighbor_lladdr[i].lladdr.addr,
			    lladdr->len)) {
			/* We found same lladdr in nbr cache so just
			 * increase the ref count.
			 */
			net_neighbor_lladdr[i].ref++;
    cc8c:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
    cc90:	4426      	add	r6, r4
    cc92:	7a33      	ldrb	r3, [r6, #8]
    cc94:	3301      	adds	r3, #1
    cc96:	7233      	strb	r3, [r6, #8]

			nbr->idx = i;
    cc98:	707d      	strb	r5, [r7, #1]
			nbr->iface = iface;
    cc9a:	f8c7 9008 	str.w	r9, [r7, #8]
	net_neighbor_lladdr[avail].lladdr.len = lladdr->len;

	nbr->iface = iface;

	return 0;
}
    cc9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (net_neighbor_lladdr[i].ref &&
    cca2:	2b00      	cmp	r3, #0
    cca4:	d1e9      	bne.n	cc7a <net_nbr_link+0x26>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
    cca6:	3501      	adds	r5, #1
    cca8:	2d08      	cmp	r5, #8
    ccaa:	f10a 0a09 	add.w	sl, sl, #9
    ccae:	d1df      	bne.n	cc70 <net_nbr_link+0x1c>
	if (avail < 0) {
    ccb0:	1c63      	adds	r3, r4, #1
    ccb2:	d020      	beq.n	ccf6 <net_nbr_link+0xa2>
	net_neighbor_lladdr[avail].ref++;
    ccb4:	00e5      	lsls	r5, r4, #3
    ccb6:	1928      	adds	r0, r5, r4
    ccb8:	1833      	adds	r3, r6, r0
    ccba:	7a1a      	ldrb	r2, [r3, #8]
    ccbc:	3201      	adds	r2, #1
    ccbe:	721a      	strb	r2, [r3, #8]
	nbr->idx = avail;
    ccc0:	707c      	strb	r4, [r7, #1]
	net_linkaddr_set(&net_neighbor_lladdr[avail].lladdr, lladdr->addr,
    ccc2:	f8d8 1000 	ldr.w	r1, [r8]
    ccc6:	f898 2004 	ldrb.w	r2, [r8, #4]
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   u8_t *new_addr, u8_t new_len)
{
	if (!lladdr_store || !new_addr) {
    ccca:	b131      	cbz	r1, ccda <net_nbr_link+0x86>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
    cccc:	2a06      	cmp	r2, #6
    ccce:	d804      	bhi.n	ccda <net_nbr_link+0x86>
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
	memcpy(lladdr_store->addr, new_addr, new_len);
    ccd0:	3002      	adds	r0, #2
	lladdr_store->len = new_len;
    ccd2:	705a      	strb	r2, [r3, #1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    ccd4:	4430      	add	r0, r6
    ccd6:	f7f5 fb51 	bl	237c <memcpy>
	net_neighbor_lladdr[avail].lladdr.len = lladdr->len;
    ccda:	442c      	add	r4, r5
    ccdc:	4426      	add	r6, r4
    ccde:	f898 3004 	ldrb.w	r3, [r8, #4]
    cce2:	7073      	strb	r3, [r6, #1]
	return 0;
    cce4:	2000      	movs	r0, #0
	nbr->iface = iface;
    cce6:	f8c7 9008 	str.w	r9, [r7, #8]
	return 0;
    ccea:	e7d8      	b.n	cc9e <net_nbr_link+0x4a>
    ccec:	462c      	mov	r4, r5
    ccee:	e7da      	b.n	cca6 <net_nbr_link+0x52>
		return -EALREADY;
    ccf0:	f06f 0077 	mvn.w	r0, #119	; 0x77
    ccf4:	e7d3      	b.n	cc9e <net_nbr_link+0x4a>
		return -ENOENT;
    ccf6:	f06f 0001 	mvn.w	r0, #1
    ccfa:	e7d0      	b.n	cc9e <net_nbr_link+0x4a>
    ccfc:	20005e87 	.word	0x20005e87

0000cd00 <net_nbr_unlink>:

int net_nbr_unlink(struct net_nbr *nbr, struct net_linkaddr *lladdr)
{
    cd00:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(lladdr);

	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
    cd02:	7841      	ldrb	r1, [r0, #1]
    cd04:	29ff      	cmp	r1, #255	; 0xff
    cd06:	d015      	beq.n	cd34 <net_nbr_unlink+0x34>
	}

	NET_ASSERT(nbr->idx < CONFIG_NET_IPV6_MAX_NEIGHBORS);
	NET_ASSERT(net_neighbor_lladdr[nbr->idx].ref > 0);

	net_neighbor_lladdr[nbr->idx].ref--;
    cd08:	4c0c      	ldr	r4, [pc, #48]	; (cd3c <net_nbr_unlink+0x3c>)
    cd0a:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
    cd0e:	4422      	add	r2, r4
    cd10:	7a13      	ldrb	r3, [r2, #8]
    cd12:	3b01      	subs	r3, #1
    cd14:	b2db      	uxtb	r3, r3
    cd16:	7213      	strb	r3, [r2, #8]

	if (!net_neighbor_lladdr[nbr->idx].ref) {
    cd18:	b933      	cbnz	r3, cd28 <net_nbr_unlink+0x28>
		(void)memset(net_neighbor_lladdr[nbr->idx].lladdr.addr, 0,
    cd1a:	2209      	movs	r2, #9
    cd1c:	2502      	movs	r5, #2
    cd1e:	fb12 5201 	smlabb	r2, r2, r1, r5
    cd22:	18a1      	adds	r1, r4, r2
__ssp_bos_icheck3(memset, void *, int)
    cd24:	50a3      	str	r3, [r4, r2]
    cd26:	808b      	strh	r3, [r1, #4]
			     sizeof(net_neighbor_lladdr[nbr->idx].lladdr.addr));
	}

	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
    cd28:	23ff      	movs	r3, #255	; 0xff
    cd2a:	7043      	strb	r3, [r0, #1]
	nbr->iface = NULL;
    cd2c:	2300      	movs	r3, #0
    cd2e:	6083      	str	r3, [r0, #8]

	return 0;
    cd30:	4618      	mov	r0, r3
}
    cd32:	bd30      	pop	{r4, r5, pc}
		return -EALREADY;
    cd34:	f06f 0077 	mvn.w	r0, #119	; 0x77
    cd38:	e7fb      	b.n	cd32 <net_nbr_unlink+0x32>
    cd3a:	bf00      	nop
    cd3c:	20005e87 	.word	0x20005e87

0000cd40 <net_nbr_get_lladdr>:
	NET_ASSERT_INFO(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS,
			"idx %d >= max %d", idx,
			CONFIG_NET_IPV6_MAX_NEIGHBORS);

	return &net_neighbor_lladdr[idx].lladdr;
}
    cd40:	4b02      	ldr	r3, [pc, #8]	; (cd4c <net_nbr_get_lladdr+0xc>)
	return &net_neighbor_lladdr[idx].lladdr;
    cd42:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
}
    cd46:	4418      	add	r0, r3
    cd48:	4770      	bx	lr
    cd4a:	bf00      	nop
    cd4c:	20005e87 	.word	0x20005e87

0000cd50 <net_ipv6_unspecified_address>:
const struct in6_addr in6addr_loopback = IN6ADDR_LOOPBACK_INIT;

const struct in6_addr *net_ipv6_unspecified_address(void)
{
	return &in6addr_any;
}
    cd50:	4800      	ldr	r0, [pc, #0]	; (cd54 <net_ipv6_unspecified_address+0x4>)
    cd52:	4770      	bx	lr
    cd54:	00019320 	.word	0x00019320

0000cd58 <net_ipv6_input>:
}

#endif /* CONFIG_NET_ROUTE */

enum net_verdict net_ipv6_input(struct net_pkt *pkt, bool is_loopback)
{
    cd58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
    cd5c:	2328      	movs	r3, #40	; 0x28
{
    cd5e:	b08b      	sub	sp, #44	; 0x2c
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
    cd60:	2600      	movs	r6, #0
    cd62:	e9cd 6304 	strd	r6, r3, [sp, #16]
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
    cd66:	ab06      	add	r3, sp, #24
    cd68:	9308      	str	r3, [sp, #32]
    cd6a:	2308      	movs	r3, #8
    cd6c:	9309      	str	r3, [sp, #36]	; 0x24
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
	enum net_verdict verdict = NET_DROP;
	int real_len = net_pkt_get_len(pkt);
    cd6e:	6943      	ldr	r3, [r0, #20]
{
    cd70:	4604      	mov	r4, r0
    cd72:	4688      	mov	r8, r1
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;

	while (buf) {
    cd74:	b943      	cbnz	r3, cd88 <net_ipv6_input+0x30>
	union net_ip_header ip;
	int pkt_len;

	net_stats_update_ipv6_recv(net_pkt_iface(pkt));

	hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
    cd76:	a904      	add	r1, sp, #16
    cd78:	4620      	mov	r0, r4
    cd7a:	f009 fc28 	bl	165ce <net_pkt_get_data>
	if (!hdr) {
    cd7e:	4605      	mov	r5, r0
    cd80:	b930      	cbnz	r0, cd90 <net_ipv6_input+0x38>
    cd82:	f009 ff9c 	bl	16cbe <z_arch_is_user_context>
    cd86:	e0bc      	b.n	cf02 <net_ipv6_input+0x1aa>
		bytes += buf->len;
    cd88:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
    cd8a:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
    cd8c:	4416      	add	r6, r2
		buf = buf->frags;
    cd8e:	e7f1      	b.n	cd74 <net_ipv6_input+0x1c>
		NET_DBG("DROP: no buffer");
		goto drop;
	}

	pkt_len = ntohs(hdr->len) + sizeof(struct net_ipv6_hdr);
    cd90:	8883      	ldrh	r3, [r0, #4]
    cd92:	021f      	lsls	r7, r3, #8
    cd94:	ea47 2713 	orr.w	r7, r7, r3, lsr #8
    cd98:	b2bf      	uxth	r7, r7
    cd9a:	3728      	adds	r7, #40	; 0x28
	if (real_len < pkt_len) {
    cd9c:	42b7      	cmp	r7, r6
    cd9e:	dcf0      	bgt.n	cd82 <net_ipv6_input+0x2a>
		NET_DBG("DROP: pkt len per hdr %d != pkt real len %d",
			pkt_len, real_len);
		goto drop;
	} else if (real_len > pkt_len) {
    cda0:	da03      	bge.n	cdaa <net_ipv6_input+0x52>
		net_pkt_update_length(pkt, pkt_len);
    cda2:	4639      	mov	r1, r7
    cda4:	4620      	mov	r0, r4
    cda6:	f009 fbb7 	bl	16518 <net_pkt_update_length>
    cdaa:	f009 ff88 	bl	16cbe <z_arch_is_user_context>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
    cdae:	68ab      	ldr	r3, [r5, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
    cdb0:	b933      	cbnz	r3, cdc0 <net_ipv6_input+0x68>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
    cdb2:	68eb      	ldr	r3, [r5, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
    cdb4:	b923      	cbnz	r3, cdc0 <net_ipv6_input+0x68>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
    cdb6:	692b      	ldr	r3, [r5, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
    cdb8:	b913      	cbnz	r3, cdc0 <net_ipv6_input+0x68>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
    cdba:	696b      	ldr	r3, [r5, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
    cdbc:	2b00      	cmp	r3, #0
    cdbe:	d0e0      	beq.n	cd82 <net_ipv6_input+0x2a>
	if (net_ipv6_is_addr_unspecified(&hdr->src)) {
		NET_DBG("DROP: src addr is %s", "unspecified");
		goto drop;
	}

	if (net_ipv6_is_addr_mcast(&hdr->src) ||
    cdc0:	7a2b      	ldrb	r3, [r5, #8]
    cdc2:	2bff      	cmp	r3, #255	; 0xff
    cdc4:	d0dd      	beq.n	cd82 <net_ipv6_input+0x2a>
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
    cdc6:	7e29      	ldrb	r1, [r5, #24]
    cdc8:	29ff      	cmp	r1, #255	; 0xff
	    net_ipv6_is_addr_mcast_scope(&hdr->dst, 0)) {
    cdca:	f105 0618 	add.w	r6, r5, #24
    cdce:	d102      	bne.n	cdd6 <net_ipv6_input+0x7e>
    cdd0:	7e6b      	ldrb	r3, [r5, #25]
    cdd2:	2b00      	cmp	r3, #0
    cdd4:	d0d5      	beq.n	cd82 <net_ipv6_input+0x2a>
		NET_DBG("DROP: multicast packet");
		goto drop;
	}

	if (!is_loopback) {
    cdd6:	f1b8 0f00 	cmp.w	r8, #0
    cdda:	d12e      	bne.n	ce3a <net_ipv6_input+0xe2>
		if (net_ipv6_is_addr_loopback(&hdr->dst) ||
    cddc:	4630      	mov	r0, r6
    cdde:	f009 ff78 	bl	16cd2 <net_ipv6_is_addr_loopback>
    cde2:	2800      	cmp	r0, #0
    cde4:	d1cd      	bne.n	cd82 <net_ipv6_input+0x2a>
		    net_ipv6_is_addr_loopback(&hdr->src)) {
    cde6:	f105 0008 	add.w	r0, r5, #8
    cdea:	f009 ff72 	bl	16cd2 <net_ipv6_is_addr_loopback>
		if (net_ipv6_is_addr_loopback(&hdr->dst) ||
    cdee:	2800      	cmp	r0, #0
    cdf0:	d1c7      	bne.n	cd82 <net_ipv6_input+0x2a>
    cdf2:	29ff      	cmp	r1, #255	; 0xff
    cdf4:	d102      	bne.n	cdfc <net_ipv6_input+0xa4>
    cdf6:	7e6b      	ldrb	r3, [r5, #25]
    cdf8:	2b01      	cmp	r3, #1
    cdfa:	d0c2      	beq.n	cd82 <net_ipv6_input+0x2a>
	return UNALIGNED_GET(&addr->s6_addr16[1]) == group->s6_addr16[1] &&
    cdfc:	4a8f      	ldr	r2, [pc, #572]	; (d03c <net_ipv6_input+0x2e4>)
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
    cdfe:	8b68      	ldrh	r0, [r5, #26]
    ce00:	8853      	ldrh	r3, [r2, #2]
    ce02:	4298      	cmp	r0, r3
    ce04:	d119      	bne.n	ce3a <net_ipv6_input+0xe2>
	return UNALIGNED_GET(&addr->s6_addr16[1]) == group->s6_addr16[1] &&
    ce06:	8ba8      	ldrh	r0, [r5, #28]
    ce08:	8893      	ldrh	r3, [r2, #4]
    ce0a:	4298      	cmp	r0, r3
    ce0c:	d115      	bne.n	ce3a <net_ipv6_input+0xe2>
		UNALIGNED_GET(&addr->s6_addr16[2]) == group->s6_addr16[2] &&
    ce0e:	8be8      	ldrh	r0, [r5, #30]
    ce10:	88d3      	ldrh	r3, [r2, #6]
    ce12:	4298      	cmp	r0, r3
    ce14:	d111      	bne.n	ce3a <net_ipv6_input+0xe2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == group->s6_addr32[1] &&
    ce16:	6850      	ldr	r0, [r2, #4]
    ce18:	69eb      	ldr	r3, [r5, #28]
		UNALIGNED_GET(&addr->s6_addr16[3]) == group->s6_addr16[3] &&
    ce1a:	4283      	cmp	r3, r0
    ce1c:	d10d      	bne.n	ce3a <net_ipv6_input+0xe2>
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
    ce1e:	6a28      	ldr	r0, [r5, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == group->s6_addr32[1] &&
    ce20:	4283      	cmp	r3, r0
    ce22:	d10a      	bne.n	ce3a <net_ipv6_input+0xe2>
		UNALIGNED_GET(&addr->s6_addr32[3]) == group->s6_addr32[3];
    ce24:	6a68      	ldr	r0, [r5, #36]	; 0x24
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
    ce26:	68d3      	ldr	r3, [r2, #12]
    ce28:	4298      	cmp	r0, r3
    ce2a:	d106      	bne.n	ce3a <net_ipv6_input+0xe2>
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
    ce2c:	29ff      	cmp	r1, #255	; 0xff
    ce2e:	d104      	bne.n	ce3a <net_ipv6_input+0xe2>
    ce30:	7e6b      	ldrb	r3, [r5, #25]
    ce32:	2b05      	cmp	r3, #5
    ce34:	d0a5      	beq.n	cd82 <net_ipv6_input+0x2a>
    ce36:	2b08      	cmp	r3, #8
    ce38:	d0a3      	beq.n	cd82 <net_ipv6_input+0x2a>
			goto drop;
		}
	}

	/* Check extension headers */
	net_pkt_set_ipv6_next_hdr(pkt, hdr->nexthdr);
    ce3a:	79ab      	ldrb	r3, [r5, #6]
	pkt->ipv6_next_hdr = next_hdr;
    ce3c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	pkt->ip_hdr_len = len;
    ce40:	2328      	movs	r3, #40	; 0x28
    ce42:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	pkt->ipv6_ext_len = len;
    ce46:	2100      	movs	r1, #0
	return pkt->frags->data;
    ce48:	6963      	ldr	r3, [r4, #20]
	pkt->ipv6_ext_len = len;
    ce4a:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
	net_pkt_set_ipv6_ext_len(pkt, 0);
	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv6_hdr));
	net_pkt_set_ipv6_hop_limit(pkt, NET_IPV6_HDR(pkt)->hop_limit);
    ce4e:	689b      	ldr	r3, [r3, #8]
    ce50:	79db      	ldrb	r3, [r3, #7]
	pkt->ipv6_hop_limit = hop_limit;
    ce52:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
    ce56:	4630      	mov	r0, r6
    ce58:	f7ff f8d8 	bl	c00c <net_if_ipv6_addr_lookup>

	if (!net_ipv6_is_my_addr(&hdr->dst) &&
    ce5c:	4601      	mov	r1, r0
    ce5e:	bb30      	cbnz	r0, ceae <net_ipv6_input+0x156>
	return net_if_ipv6_maddr_lookup(maddr, NULL) != NULL;
    ce60:	4630      	mov	r0, r6
    ce62:	f7ff fb1b 	bl	c49c <net_if_ipv6_maddr_lookup>
    ce66:	bb10      	cbnz	r0, ceae <net_ipv6_input+0x156>
	    !net_ipv6_is_my_maddr(&hdr->dst) &&
    ce68:	7e2b      	ldrb	r3, [r5, #24]
    ce6a:	2bff      	cmp	r3, #255	; 0xff
    ce6c:	d01f      	beq.n	ceae <net_ipv6_input+0x156>
		found = net_route_get_info(net_pkt_iface(pkt),
    ce6e:	ab03      	add	r3, sp, #12
    ce70:	aa02      	add	r2, sp, #8
    ce72:	4631      	mov	r1, r6
    ce74:	6a60      	ldr	r0, [r4, #36]	; 0x24
    ce76:	f00a ff86 	bl	17d86 <net_route_get_info>
	if (found) {
    ce7a:	2800      	cmp	r0, #0
    ce7c:	d081      	beq.n	cd82 <net_ipv6_input+0x2a>
		if (route) {
    ce7e:	9b02      	ldr	r3, [sp, #8]
    ce80:	b153      	cbz	r3, ce98 <net_ipv6_input+0x140>
			net_pkt_set_iface(pkt, route->iface);
    ce82:	68db      	ldr	r3, [r3, #12]
	pkt->iface = iface;
    ce84:	6263      	str	r3, [r4, #36]	; 0x24
	if (iface) {
    ce86:	b13b      	cbz	r3, ce98 <net_ipv6_input+0x140>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
    ce88:	681a      	ldr	r2, [r3, #0]
    ce8a:	7d52      	ldrb	r2, [r2, #21]
    ce8c:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
    ce90:	681b      	ldr	r3, [r3, #0]
    ce92:	7d5b      	ldrb	r3, [r3, #21]
    ce94:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		ret = net_route_packet(pkt, nexthop);
    ce98:	9903      	ldr	r1, [sp, #12]
    ce9a:	4620      	mov	r0, r4
    ce9c:	f00a ff95 	bl	17dca <net_route_packet>
		if (ret < 0) {
    cea0:	2800      	cmp	r0, #0
    cea2:	f6ff af6e 	blt.w	cd82 <net_ipv6_input+0x2a>
	    !net_ipv6_is_addr_mcast(&hdr->dst)) {
		if (ipv6_route_packet(pkt, hdr) == NET_OK) {
			return NET_OK;
    cea6:	2000      	movs	r0, #0

	NET_DBG("DROP: Unknown/wrong nexthdr type");
	net_stats_update_ip_errors_protoerr(net_pkt_iface(pkt));

	return NET_DROP;
}
    cea8:	b00b      	add	sp, #44	; 0x2c
    ceaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return net_pkt_skip(pkt, access->size);
    ceae:	9905      	ldr	r1, [sp, #20]
    ceb0:	4620      	mov	r0, r4
    ceb2:	f009 fa9b 	bl	163ec <net_pkt_skip>
	u16_t ext_len = 0U;
    ceb6:	f04f 0900 	mov.w	r9, #0
	nexthdr = hdr->nexthdr;
    ceba:	79ae      	ldrb	r6, [r5, #6]
	u8_t ext_bitmap = 0U;
    cebc:	46c8      	mov	r8, r9
		     u8_t flags);


static inline bool net_ipv6_is_nexthdr_upper_layer(u8_t nexthdr)
{
	return (nexthdr == IPPROTO_ICMPV6 || nexthdr == IPPROTO_UDP ||
    cebe:	2e3a      	cmp	r6, #58	; 0x3a
    cec0:	d003      	beq.n	ceca <net_ipv6_input+0x172>
    cec2:	2e11      	cmp	r6, #17
    cec4:	d001      	beq.n	ceca <net_ipv6_input+0x172>
	while (!net_ipv6_is_nexthdr_upper_layer(nexthdr)) {
    cec6:	2e06      	cmp	r6, #6
    cec8:	d112      	bne.n	cef0 <net_ipv6_input+0x198>
	pkt->family = family;
    ceca:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
	pkt->ipv6_ext_len = len;
    cece:	f8a4 9042 	strh.w	r9, [r4, #66]	; 0x42
	pkt->family = family;
    ced2:	2202      	movs	r2, #2
    ced4:	f362 0343 	bfi	r3, r2, #1, #3
	switch (nexthdr) {
    ced8:	2e11      	cmp	r6, #17
    ceda:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    cede:	f000 8092 	beq.w	d006 <net_ipv6_input+0x2ae>
    cee2:	2e3a      	cmp	r6, #58	; 0x3a
    cee4:	d10d      	bne.n	cf02 <net_ipv6_input+0x1aa>
		verdict = net_icmpv6_input(pkt, hdr);
    cee6:	4629      	mov	r1, r5
    cee8:	4620      	mov	r0, r4
    ceea:	f7ff fe77 	bl	cbdc <net_icmpv6_input>
	if (verdict == NET_DROP) {
    ceee:	e7db      	b.n	cea8 <net_ipv6_input+0x150>
    cef0:	f009 fee5 	bl	16cbe <z_arch_is_user_context>
	return net_pkt_read(pkt, data, 1);
    cef4:	2201      	movs	r2, #1
    cef6:	f10d 0106 	add.w	r1, sp, #6
    cefa:	4620      	mov	r0, r4
    cefc:	f009 fa92 	bl	16424 <net_pkt_read>
		if (net_pkt_read_u8(pkt, &next_nexthdr)) {
    cf00:	b108      	cbz	r0, cf06 <net_ipv6_input+0x1ae>
	return NET_DROP;
    cf02:	2002      	movs	r0, #2
    cf04:	e7d0      	b.n	cea8 <net_ipv6_input+0x150>
		switch (nexthdr) {
    cf06:	2e3b      	cmp	r6, #59	; 0x3b
    cf08:	d0fb      	beq.n	cf02 <net_ipv6_input+0x1aa>
    cf0a:	2e3c      	cmp	r6, #60	; 0x3c
    cf0c:	d023      	beq.n	cf56 <net_ipv6_input+0x1fe>
    cf0e:	2e00      	cmp	r6, #0
    cf10:	f040 8089 	bne.w	d026 <net_ipv6_input+0x2ce>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_HBHO) {
    cf14:	f018 0f01 	tst.w	r8, #1
    cf18:	f47f af33 	bne.w	cd82 <net_ipv6_input+0x2a>
			if (nexthdr != hdr->nexthdr) {
    cf1c:	79ab      	ldrb	r3, [r5, #6]
    cf1e:	2b00      	cmp	r3, #0
    cf20:	f040 8081 	bne.w	d026 <net_ipv6_input+0x2ce>
			ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_HBHO;
    cf24:	f048 0801 	orr.w	r8, r8, #1
	u16_t exthdr_len = 0U;
    cf28:	2300      	movs	r3, #0
    cf2a:	2201      	movs	r2, #1
    cf2c:	a903      	add	r1, sp, #12
    cf2e:	4620      	mov	r0, r4
		exthdr_len = ipv6_handle_ext_hdr_options(pkt, hdr, pkt_len);
    cf30:	b2be      	uxth	r6, r7
	u16_t exthdr_len = 0U;
    cf32:	f8ad 300c 	strh.w	r3, [sp, #12]
    cf36:	f009 fa75 	bl	16424 <net_pkt_read>
	if (net_pkt_read_u8(pkt, (u8_t *)&exthdr_len)) {
    cf3a:	2800      	cmp	r0, #0
    cf3c:	d1e1      	bne.n	cf02 <net_ipv6_input+0x1aa>
	exthdr_len = exthdr_len * 8U + 8;
    cf3e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    cf42:	3301      	adds	r3, #1
    cf44:	00db      	lsls	r3, r3, #3
    cf46:	b29b      	uxth	r3, r3
	if (exthdr_len > pkt_len) {
    cf48:	429e      	cmp	r6, r3
	exthdr_len = exthdr_len * 8U + 8;
    cf4a:	f8ad 300c 	strh.w	r3, [sp, #12]
	if (exthdr_len > pkt_len) {
    cf4e:	f4ff af18 	bcc.w	cd82 <net_ipv6_input+0x2a>
	length += 2U;
    cf52:	2602      	movs	r6, #2
    cf54:	e03c      	b.n	cfd0 <net_ipv6_input+0x278>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_DESTO2) {
    cf56:	f018 0f40 	tst.w	r8, #64	; 0x40
    cf5a:	d164      	bne.n	d026 <net_ipv6_input+0x2ce>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_DESTO1) {
    cf5c:	f018 0f02 	tst.w	r8, #2
				ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_DESTO2;
    cf60:	bf14      	ite	ne
    cf62:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
				ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_DESTO1;
    cf66:	f048 0802 	orreq.w	r8, r8, #2
    cf6a:	e7dd      	b.n	cf28 <net_ipv6_input+0x1d0>
    cf6c:	2201      	movs	r2, #1
    cf6e:	f10d 0107 	add.w	r1, sp, #7
    cf72:	4620      	mov	r0, r4
    cf74:	f009 fa56 	bl	16424 <net_pkt_read>
		if (net_pkt_read_u8(pkt, &opt_type)) {
    cf78:	2800      	cmp	r0, #0
    cf7a:	d1c2      	bne.n	cf02 <net_ipv6_input+0x1aa>
		if (opt_type != NET_IPV6_EXT_HDR_OPT_PAD1) {
    cf7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cf80:	b9e3      	cbnz	r3, cfbc <net_ipv6_input+0x264>
		switch (opt_type) {
    cf82:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cf86:	b30a      	cbz	r2, cfcc <net_ipv6_input+0x274>
    cf88:	2a01      	cmp	r2, #1
    cf8a:	d02b      	beq.n	cfe4 <net_ipv6_input+0x28c>
			if (opt_len > (exthdr_len - (1 + 1 + 1 + 1))) {
    cf8c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    cf90:	f89d 1008 	ldrb.w	r1, [sp, #8]
    cf94:	3b04      	subs	r3, #4
    cf96:	4299      	cmp	r1, r3
    cf98:	dcb3      	bgt.n	cf02 <net_ipv6_input+0x1aa>
    cf9a:	f009 fe90 	bl	16cbe <z_arch_is_user_context>
	switch (opt_type & 0xc0) {
    cf9e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    cfa2:	2a80      	cmp	r2, #128	; 0x80
    cfa4:	d028      	beq.n	cff8 <net_ipv6_input+0x2a0>
    cfa6:	2ac0      	cmp	r2, #192	; 0xc0
    cfa8:	d023      	beq.n	cff2 <net_ipv6_input+0x29a>
    cfaa:	2a00      	cmp	r2, #0
    cfac:	d1a9      	bne.n	cf02 <net_ipv6_input+0x1aa>
			if (net_pkt_skip(pkt, opt_len)) {
    cfae:	f89d 1008 	ldrb.w	r1, [sp, #8]
    cfb2:	4620      	mov	r0, r4
    cfb4:	f009 fa1a 	bl	163ec <net_pkt_skip>
    cfb8:	b1b0      	cbz	r0, cfe8 <net_ipv6_input+0x290>
    cfba:	e7a2      	b.n	cf02 <net_ipv6_input+0x1aa>
    cfbc:	2201      	movs	r2, #1
    cfbe:	a902      	add	r1, sp, #8
    cfc0:	4620      	mov	r0, r4
    cfc2:	f009 fa2f 	bl	16424 <net_pkt_read>
			if (net_pkt_read_u8(pkt, &opt_len)) {
    cfc6:	2800      	cmp	r0, #0
    cfc8:	d0db      	beq.n	cf82 <net_ipv6_input+0x22a>
    cfca:	e79a      	b.n	cf02 <net_ipv6_input+0x1aa>
			length++;
    cfcc:	3601      	adds	r6, #1
			length += opt_len + 2;
    cfce:	b2b6      	uxth	r6, r6
	while (length < exthdr_len) {
    cfd0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    cfd4:	429e      	cmp	r6, r3
    cfd6:	d3c9      	bcc.n	cf6c <net_ipv6_input+0x214>
		ext_len += exthdr_len;
    cfd8:	4499      	add	r9, r3
    cfda:	fa1f f989 	uxth.w	r9, r9
		nexthdr = next_nexthdr;
    cfde:	f89d 6006 	ldrb.w	r6, [sp, #6]
    cfe2:	e76c      	b.n	cebe <net_ipv6_input+0x166>
    cfe4:	f009 fe6b 	bl	16cbe <z_arch_is_user_context>
			length += opt_len + 2;
    cfe8:	f89d 3008 	ldrb.w	r3, [sp, #8]
    cfec:	441e      	add	r6, r3
    cfee:	3602      	adds	r6, #2
    cff0:	e7ed      	b.n	cfce <net_ipv6_input+0x276>
		if (net_ipv6_is_addr_mcast(&hdr->dst)) {
    cff2:	7e2b      	ldrb	r3, [r5, #24]
    cff4:	2bff      	cmp	r3, #255	; 0xff
    cff6:	d084      	beq.n	cf02 <net_ipv6_input+0x1aa>
		net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
    cff8:	4633      	mov	r3, r6
    cffa:	2202      	movs	r2, #2
    cffc:	2104      	movs	r1, #4
    cffe:	4620      	mov	r0, r4
    d000:	f009 fd7e 	bl	16b00 <net_icmpv6_send_error>
		break;
    d004:	e77d      	b.n	cf02 <net_ipv6_input+0x1aa>
		proto_hdr.udp = net_udp_input(pkt, &udp_access);
    d006:	a908      	add	r1, sp, #32
    d008:	4620      	mov	r0, r4
    d00a:	f00a ffc2 	bl	17f92 <net_udp_input>
    d00e:	9002      	str	r0, [sp, #8]
		if (proto_hdr.udp) {
    d010:	2800      	cmp	r0, #0
    d012:	f43f af76 	beq.w	cf02 <net_ipv6_input+0x1aa>
	verdict = net_conn_input(pkt, &ip, nexthdr, &proto_hdr);
    d016:	ab02      	add	r3, sp, #8
    d018:	4632      	mov	r2, r6
    d01a:	a903      	add	r1, sp, #12
    d01c:	4620      	mov	r0, r4
	ip.ipv6 = hdr;
    d01e:	9503      	str	r5, [sp, #12]
	verdict = net_conn_input(pkt, &ip, nexthdr, &proto_hdr);
    d020:	f000 ff46 	bl	deb0 <net_conn_input>
	if (verdict != NET_DROP) {
    d024:	e740      	b.n	cea8 <net_ipv6_input+0x150>
			      net_pkt_get_current_offset(pkt) - 1);
    d026:	4620      	mov	r0, r4
    d028:	f009 fa86 	bl	16538 <net_pkt_get_current_offset>
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
    d02c:	2201      	movs	r2, #1
    d02e:	1e43      	subs	r3, r0, #1
    d030:	2104      	movs	r1, #4
    d032:	4620      	mov	r0, r4
    d034:	f009 fd64 	bl	16b00 <net_icmpv6_send_error>
    d038:	e6a3      	b.n	cd82 <net_ipv6_input+0x2a>
    d03a:	bf00      	nop
    d03c:	00019320 	.word	0x00019320

0000d040 <nbr_lookup.isra.16>:
}
#else
#define nbr_print(...)
#endif

static struct net_nbr *nbr_lookup(struct net_nbr_table *table,
    d040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d044:	4c0e      	ldr	r4, [pc, #56]	; (d080 <nbr_lookup.isra.16+0x40>)
    d046:	4607      	mov	r7, r0
    d048:	4688      	mov	r8, r1
				  struct net_if *iface,
				  struct in6_addr *addr)
{
	int i;

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
    d04a:	2500      	movs	r5, #0
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref) {
    d04c:	7823      	ldrb	r3, [r4, #0]
    d04e:	4626      	mov	r6, r4
    d050:	b943      	cbnz	r3, d064 <nbr_lookup.isra.16+0x24>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
    d052:	3501      	adds	r5, #1
    d054:	2d08      	cmp	r5, #8
    d056:	f104 0454 	add.w	r4, r4, #84	; 0x54
    d05a:	d1f7      	bne.n	d04c <nbr_lookup.isra.16+0xc>
		if (net_ipv6_addr_cmp(&net_ipv6_nbr_data(nbr)->addr, addr)) {
			return nbr;
		}
	}

	return NULL;
    d05c:	2600      	movs	r6, #0
}
    d05e:	4630      	mov	r0, r6
    d060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (iface && nbr->iface != iface) {
    d064:	b117      	cbz	r7, d06c <nbr_lookup.isra.16+0x2c>
    d066:	68a3      	ldr	r3, [r4, #8]
    d068:	429f      	cmp	r7, r3
    d06a:	d1f2      	bne.n	d052 <nbr_lookup.isra.16+0x12>
		if (net_ipv6_addr_cmp(&net_ipv6_nbr_data(nbr)->addr, addr)) {
    d06c:	68e0      	ldr	r0, [r4, #12]
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
    d06e:	2210      	movs	r2, #16
    d070:	4641      	mov	r1, r8
    d072:	3004      	adds	r0, #4
    d074:	f7f5 f974 	bl	2360 <memcmp>
    d078:	2800      	cmp	r0, #0
    d07a:	d1ea      	bne.n	d052 <nbr_lookup.isra.16+0x12>
    d07c:	e7ef      	b.n	d05e <nbr_lookup.isra.16+0x1e>
    d07e:	bf00      	nop
    d080:	2000c6f0 	.word	0x2000c6f0

0000d084 <dbg_update_neighbor_lladdr.isra.19>:
		log_strdup(net_sprint_ipv6_addr(addr)));

	return nbr;
}

static void dbg_update_neighbor_lladdr(struct net_linkaddr *new_lladdr,
    d084:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

static inline char *net_sprint_ll_addr(const u8_t *ll, u8_t ll_len)
{
	static char buf[sizeof("xx:xx:xx:xx:xx:xx:xx:xx")];

	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
    d086:	2318      	movs	r3, #24
    d088:	7841      	ldrb	r1, [r0, #1]
    d08a:	4a07      	ldr	r2, [pc, #28]	; (d0a8 <dbg_update_neighbor_lladdr.isra.19+0x24>)
    d08c:	3002      	adds	r0, #2
    d08e:	f009 fb3f 	bl	16710 <net_sprint_ll_addr_buf>
				       struct net_linkaddr_storage *old_lladdr,
				       struct in6_addr *addr)
{
	char out[sizeof("xx:xx:xx:xx:xx:xx:xx:xx")];

	snprintk(out, sizeof(out), "%s",
    d092:	4a06      	ldr	r2, [pc, #24]	; (d0ac <dbg_update_neighbor_lladdr.isra.19+0x28>)
    d094:	4603      	mov	r3, r0
    d096:	2118      	movs	r1, #24
    d098:	4668      	mov	r0, sp
    d09a:	f006 f9fd 	bl	13498 <snprintk>
    d09e:	f009 fed7 	bl	16e50 <z_arch_is_user_context>
	NET_DBG("Updating neighbor %s lladdr %s (was %s)",
		log_strdup(net_sprint_ipv6_addr(addr)),
		log_strdup(net_sprint_ll_addr(new_lladdr->addr,
					      new_lladdr->len)),
		log_strdup(out));
}
    d0a2:	b007      	add	sp, #28
    d0a4:	f85d fb04 	ldr.w	pc, [sp], #4
    d0a8:	20005ecf 	.word	0x20005ecf
    d0ac:	0001aca2 	.word	0x0001aca2

0000d0b0 <k_sem_give.constprop.29>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    d0b0:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
    d0b4:	f009 fecc 	bl	16e50 <z_arch_is_user_context>
    d0b8:	b120      	cbz	r0, d0c4 <k_sem_give.constprop.29+0x14>
	register u32_t ret __asm__("r0") = arg1;
    d0ba:	4805      	ldr	r0, [pc, #20]	; (d0d0 <k_sem_give.constprop.29+0x20>)
	register u32_t r6 __asm__("r6") = call_id;
    d0bc:	265a      	movs	r6, #90	; 0x5a
	__asm__ volatile("svc %[svid]\n"
    d0be:	df03      	svc	3
    d0c0:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
    d0c4:	4802      	ldr	r0, [pc, #8]	; (d0d0 <k_sem_give.constprop.29+0x20>)
    d0c6:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
    d0ca:	f003 b807 	b.w	100dc <z_impl_k_sem_give>
    d0ce:	bf00      	nop
    d0d0:	200044d0 	.word	0x200044d0

0000d0d4 <k_sem_take.constprop.30>:
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    d0d4:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
    d0d8:	f009 feba 	bl	16e50 <z_arch_is_user_context>
    d0dc:	b130      	cbz	r0, d0ec <k_sem_take.constprop.30+0x18>
	register u32_t ret __asm__("r0") = arg1;
    d0de:	4807      	ldr	r0, [pc, #28]	; (d0fc <k_sem_take.constprop.30+0x28>)
	register u32_t r1 __asm__("r1") = arg2;
    d0e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	register u32_t r6 __asm__("r6") = call_id;
    d0e4:	265d      	movs	r6, #93	; 0x5d
	__asm__ volatile("svc %[svid]\n"
    d0e6:	df03      	svc	3
    d0e8:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
    d0ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d0f0:	4802      	ldr	r0, [pc, #8]	; (d0fc <k_sem_take.constprop.30+0x28>)
    d0f2:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
    d0f6:	f003 b837 	b.w	10168 <z_impl_k_sem_take>
    d0fa:	bf00      	nop
    d0fc:	200044d0 	.word	0x200044d0

0000d100 <ipv6_nbr_set_state>:
{
    d100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (new_state == net_ipv6_nbr_data(nbr)->state ||
    d102:	68c3      	ldr	r3, [r0, #12]
    d104:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    d108:	428b      	cmp	r3, r1
{
    d10a:	4604      	mov	r4, r0
	if (new_state == net_ipv6_nbr_data(nbr)->state ||
    d10c:	d010      	beq.n	d130 <ipv6_nbr_set_state+0x30>
    d10e:	2b05      	cmp	r3, #5
    d110:	d00e      	beq.n	d130 <ipv6_nbr_set_state+0x30>
    d112:	f009 fe9d 	bl	16e50 <z_arch_is_user_context>
	net_ipv6_nbr_data(nbr)->state = new_state;
    d116:	68e0      	ldr	r0, [r4, #12]
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
    d118:	2902      	cmp	r1, #2
	net_ipv6_nbr_data(nbr)->state = new_state;
    d11a:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
    d11e:	d107      	bne.n	d130 <ipv6_nbr_set_state+0x30>
		if (stale_counter + 1 != UINT32_MAX) {
    d120:	4a13      	ldr	r2, [pc, #76]	; (d170 <ipv6_nbr_set_state+0x70>)
    d122:	6813      	ldr	r3, [r2, #0]
    d124:	1c99      	adds	r1, r3, #2
    d126:	4615      	mov	r5, r2
    d128:	d003      	beq.n	d132 <ipv6_nbr_set_state+0x32>
			net_ipv6_nbr_data(nbr)->stale_counter = stale_counter++;
    d12a:	1c59      	adds	r1, r3, #1
    d12c:	6011      	str	r1, [r2, #0]
    d12e:	6383      	str	r3, [r0, #56]	; 0x38
}
    d130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			k_sem_take(&nbr_lock, K_FOREVER);
    d132:	f7ff ffcf 	bl	d0d4 <k_sem_take.constprop.30>
				if (!n || !n->ref) {
    d136:	4e0f      	ldr	r6, [pc, #60]	; (d174 <ipv6_nbr_set_state+0x74>)
			stale_counter = 0U;
    d138:	2300      	movs	r3, #0
    d13a:	602b      	str	r3, [r5, #0]
    d13c:	461a      	mov	r2, r3
			for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
    d13e:	4619      	mov	r1, r3
				if (!n || !n->ref) {
    d140:	2754      	movs	r7, #84	; 0x54
    d142:	fb07 f001 	mul.w	r0, r7, r1
    d146:	5d80      	ldrb	r0, [r0, r6]
    d148:	b148      	cbz	r0, d15e <ipv6_nbr_set_state+0x5e>
				data = net_ipv6_nbr_data(nbr);
    d14a:	68e0      	ldr	r0, [r4, #12]
				if (!data) {
    d14c:	b138      	cbz	r0, d15e <ipv6_nbr_set_state+0x5e>
				if (data->state != NET_IPV6_NBR_STATE_STALE) {
    d14e:	f890 c030 	ldrb.w	ip, [r0, #48]	; 0x30
    d152:	f1bc 0f02 	cmp.w	ip, #2
				data->stale_counter = stale_counter++;
    d156:	bf02      	ittt	eq
    d158:	6382      	streq	r2, [r0, #56]	; 0x38
    d15a:	2301      	moveq	r3, #1
    d15c:	3201      	addeq	r2, #1
			for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
    d15e:	3101      	adds	r1, #1
    d160:	2908      	cmp	r1, #8
    d162:	d1ee      	bne.n	d142 <ipv6_nbr_set_state+0x42>
    d164:	b103      	cbz	r3, d168 <ipv6_nbr_set_state+0x68>
    d166:	602a      	str	r2, [r5, #0]
}
    d168:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			k_sem_give(&nbr_lock);
    d16c:	f7ff bfa0 	b.w	d0b0 <k_sem_give.constprop.29>
    d170:	200044e8 	.word	0x200044e8
    d174:	2000c6f0 	.word	0x2000c6f0

0000d178 <ipv6_nd_restart_reachable_timer>:
}
#endif /* CONFIG_NET_IPV6_NBR_CACHE */

#if defined(CONFIG_NET_IPV6_ND)
static void ipv6_nd_restart_reachable_timer(struct net_nbr *nbr, s64_t time)
{
    d178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d17a:	4614      	mov	r4, r2
    d17c:	461d      	mov	r5, r3
	s64_t remaining;

	if (nbr) {
    d17e:	4606      	mov	r6, r0
    d180:	b130      	cbz	r0, d190 <ipv6_nd_restart_reachable_timer+0x18>
		net_ipv6_nbr_data(nbr)->reachable = k_uptime_get();
    d182:	68c7      	ldr	r7, [r0, #12]
    d184:	f009 ff20 	bl	16fc8 <k_uptime_get>
		net_ipv6_nbr_data(nbr)->reachable_timeout = time;
    d188:	68f3      	ldr	r3, [r6, #12]
		net_ipv6_nbr_data(nbr)->reachable = k_uptime_get();
    d18a:	e9c7 0106 	strd	r0, r1, [r7, #24]
		net_ipv6_nbr_data(nbr)->reachable_timeout = time;
    d18e:	621c      	str	r4, [r3, #32]
	return __ticks_to_ms(z_timeout_remaining(&work->timeout));
    d190:	480c      	ldr	r0, [pc, #48]	; (d1c4 <ipv6_nd_restart_reachable_timer+0x4c>)
    d192:	f003 fbb1 	bl	108f8 <z_timeout_remaining>
    d196:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    d19a:	2300      	movs	r3, #0
    d19c:	2264      	movs	r2, #100	; 0x64
    d19e:	fb80 0101 	smull	r0, r1, r0, r1
    d1a2:	f7f3 fbd1 	bl	948 <__aeabi_uldivmod>
	}

	remaining = k_delayed_work_remaining_get(&ipv6_nd_reachable_timer);
	if (!remaining || remaining > time) {
    d1a6:	17c3      	asrs	r3, r0, #31
    d1a8:	b118      	cbz	r0, d1b2 <ipv6_nd_restart_reachable_timer+0x3a>
    d1aa:	4284      	cmp	r4, r0
    d1ac:	eb75 0303 	sbcs.w	r3, r5, r3
    d1b0:	da06      	bge.n	d1c0 <ipv6_nd_restart_reachable_timer+0x48>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    d1b2:	4622      	mov	r2, r4
    d1b4:	4904      	ldr	r1, [pc, #16]	; (d1c8 <ipv6_nd_restart_reachable_timer+0x50>)
    d1b6:	4805      	ldr	r0, [pc, #20]	; (d1cc <ipv6_nd_restart_reachable_timer+0x54>)
		k_delayed_work_submit(&ipv6_nd_reachable_timer, time);
	}
}
    d1b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d1bc:	f003 bad0 	b.w	10760 <k_delayed_work_submit_to_queue>
    d1c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d1c2:	bf00      	nop
    d1c4:	2000449c 	.word	0x2000449c
    d1c8:	20004490 	.word	0x20004490
    d1cc:	2000582c 	.word	0x2000582c

0000d1d0 <ipv6_ns_reply_timeout>:
{
    d1d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	s64_t current = k_uptime_get();
    d1d4:	f009 fef8 	bl	16fc8 <k_uptime_get>
		remaining = data->send_ns + NS_REPLY_TIMEOUT - current;
    d1d8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    d1dc:	1a23      	subs	r3, r4, r0
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
    d1de:	f04f 0a00 	mov.w	sl, #0
    d1e2:	4d23      	ldr	r5, [pc, #140]	; (d270 <ipv6_ns_reply_timeout+0xa0>)
		remaining = data->send_ns + NS_REPLY_TIMEOUT - current;
    d1e4:	9301      	str	r3, [sp, #4]
    d1e6:	eb6a 0b01 	sbc.w	fp, sl, r1
		data->send_ns = 0;
    d1ea:	f04f 0800 	mov.w	r8, #0
    d1ee:	f04f 0900 	mov.w	r9, #0
		if (!nbr || !nbr->ref) {
    d1f2:	782b      	ldrb	r3, [r5, #0]
    d1f4:	b1fb      	cbz	r3, d236 <ipv6_ns_reply_timeout+0x66>
		data = net_ipv6_nbr_data(nbr);
    d1f6:	68ec      	ldr	r4, [r5, #12]
		if (!data) {
    d1f8:	b1ec      	cbz	r4, d236 <ipv6_ns_reply_timeout+0x66>
		if (!data->send_ns) {
    d1fa:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
    d1fe:	ea50 0301 	orrs.w	r3, r0, r1
    d202:	d018      	beq.n	d236 <ipv6_ns_reply_timeout+0x66>
		remaining = data->send_ns + NS_REPLY_TIMEOUT - current;
    d204:	9b01      	ldr	r3, [sp, #4]
    d206:	181e      	adds	r6, r3, r0
    d208:	eb4b 0701 	adc.w	r7, fp, r1
		if (remaining > 0) {
    d20c:	2e01      	cmp	r6, #1
    d20e:	f177 0300 	sbcs.w	r3, r7, #0
    d212:	db1a      	blt.n	d24a <ipv6_ns_reply_timeout+0x7a>
	return __ticks_to_ms(z_timeout_remaining(&work->timeout));
    d214:	4817      	ldr	r0, [pc, #92]	; (d274 <ipv6_ns_reply_timeout+0xa4>)
    d216:	f003 fb6f 	bl	108f8 <z_timeout_remaining>
    d21a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    d21e:	2264      	movs	r2, #100	; 0x64
    d220:	2300      	movs	r3, #0
    d222:	fb80 0101 	smull	r0, r1, r0, r1
    d226:	f7f3 fb8f 	bl	948 <__aeabi_uldivmod>
			if (!k_delayed_work_remaining_get(
    d22a:	b920      	cbnz	r0, d236 <ipv6_ns_reply_timeout+0x66>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    d22c:	4632      	mov	r2, r6
    d22e:	4912      	ldr	r1, [pc, #72]	; (d278 <ipv6_ns_reply_timeout+0xa8>)
    d230:	4812      	ldr	r0, [pc, #72]	; (d27c <ipv6_ns_reply_timeout+0xac>)
    d232:	f003 fa95 	bl	10760 <k_delayed_work_submit_to_queue>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
    d236:	f10a 0a01 	add.w	sl, sl, #1
    d23a:	f1ba 0f08 	cmp.w	sl, #8
    d23e:	f105 0554 	add.w	r5, r5, #84	; 0x54
    d242:	d1d6      	bne.n	d1f2 <ipv6_ns_reply_timeout+0x22>
}
    d244:	b003      	add	sp, #12
    d246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!data->pending) {
    d24a:	6822      	ldr	r2, [r4, #0]
		data->send_ns = 0;
    d24c:	e9c4 890a 	strd	r8, r9, [r4, #40]	; 0x28
		if (!data->pending) {
    d250:	2a00      	cmp	r2, #0
    d252:	d0f0      	beq.n	d236 <ipv6_ns_reply_timeout+0x66>
    d254:	f009 fdfc 	bl	16e50 <z_arch_is_user_context>
		net_pkt_unref(data->pending);
    d258:	6820      	ldr	r0, [r4, #0]
    d25a:	f008 ffd5 	bl	16208 <net_pkt_unref>
		net_pkt_unref(data->pending);
    d25e:	6820      	ldr	r0, [r4, #0]
    d260:	f008 ffd2 	bl	16208 <net_pkt_unref>
		data->pending = NULL;
    d264:	2200      	movs	r2, #0
    d266:	6022      	str	r2, [r4, #0]
		net_nbr_unref(nbr);
    d268:	4628      	mov	r0, r5
    d26a:	f009 fcfc 	bl	16c66 <net_nbr_unref>
    d26e:	e7e2      	b.n	d236 <ipv6_ns_reply_timeout+0x66>
    d270:	2000c6f0 	.word	0x2000c6f0
    d274:	200044bc 	.word	0x200044bc
    d278:	200044b0 	.word	0x200044b0
    d27c:	2000582c 	.word	0x2000582c

0000d280 <add_nbr>:
{
    d280:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    d284:	4605      	mov	r5, r0
    d286:	460e      	mov	r6, r1
    d288:	4617      	mov	r7, r2
    d28a:	4698      	mov	r8, r3
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
    d28c:	f7ff fed8 	bl	d040 <nbr_lookup.isra.16>
	if (nbr) {
    d290:	4604      	mov	r4, r0
    d292:	2800      	cmp	r0, #0
    d294:	d13d      	bne.n	d312 <add_nbr+0x92>
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
    d296:	4822      	ldr	r0, [pc, #136]	; (d320 <add_nbr+0xa0>)
    d298:	f009 fcf5 	bl	16c86 <net_nbr_get>
	if (!nbr) {
    d29c:	4604      	mov	r4, r0
    d29e:	bb78      	cbnz	r0, d300 <add_nbr+0x80>
	k_sem_take(&nbr_lock, K_FOREVER);
    d2a0:	f7ff ff18 	bl	d0d4 <k_sem_take.constprop.30>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
    d2a4:	4a1f      	ldr	r2, [pc, #124]	; (d324 <add_nbr+0xa4>)
	int nbr_idx = -1;
    d2a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d2aa:	4610      	mov	r0, r2
		if (!nbr || !nbr->ref) {
    d2ac:	7811      	ldrb	r1, [r2, #0]
    d2ae:	b189      	cbz	r1, d2d4 <add_nbr+0x54>
		data = net_ipv6_nbr_data(nbr);
    d2b0:	68d1      	ldr	r1, [r2, #12]
		if (!data || data->is_router ||
    d2b2:	b179      	cbz	r1, d2d4 <add_nbr+0x54>
    d2b4:	f891 c035 	ldrb.w	ip, [r1, #53]	; 0x35
    d2b8:	f1bc 0f00 	cmp.w	ip, #0
    d2bc:	d10a      	bne.n	d2d4 <add_nbr+0x54>
    d2be:	f891 c030 	ldrb.w	ip, [r1, #48]	; 0x30
    d2c2:	f1bc 0f02 	cmp.w	ip, #2
    d2c6:	d105      	bne.n	d2d4 <add_nbr+0x54>
		if (nbr_idx == -1) {
    d2c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d2cc:	6b89      	ldr	r1, [r1, #56]	; 0x38
    d2ce:	d024      	beq.n	d31a <add_nbr+0x9a>
		if (oldest == MIN(oldest, data->stale_counter)) {
    d2d0:	4549      	cmp	r1, r9
    d2d2:	d322      	bcc.n	d31a <add_nbr+0x9a>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
    d2d4:	3401      	adds	r4, #1
    d2d6:	2c08      	cmp	r4, #8
    d2d8:	f102 0254 	add.w	r2, r2, #84	; 0x54
    d2dc:	d1e6      	bne.n	d2ac <add_nbr+0x2c>
	if (nbr_idx != -1) {
    d2de:	1c5a      	adds	r2, r3, #1
    d2e0:	d007      	beq.n	d2f2 <add_nbr+0x72>
				&net_ipv6_nbr_data(nbr)->addr);
    d2e2:	2254      	movs	r2, #84	; 0x54
    d2e4:	fb02 0303 	mla	r3, r2, r3, r0
		net_ipv6_nbr_rm(nbr->iface,
    d2e8:	68d9      	ldr	r1, [r3, #12]
    d2ea:	6898      	ldr	r0, [r3, #8]
    d2ec:	3104      	adds	r1, #4
    d2ee:	f009 fe7b 	bl	16fe8 <net_ipv6_nbr_rm>
	k_sem_give(&nbr_lock);
    d2f2:	f7ff fedd 	bl	d0b0 <k_sem_give.constprop.29>
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
    d2f6:	480a      	ldr	r0, [pc, #40]	; (d320 <add_nbr+0xa0>)
    d2f8:	f009 fcc5 	bl	16c86 <net_nbr_get>
	if (!nbr) {
    d2fc:	4604      	mov	r4, r0
    d2fe:	b140      	cbz	r0, d312 <add_nbr+0x92>
	nbr_init(nbr, iface, addr, is_router, state);
    d300:	463b      	mov	r3, r7
    d302:	4632      	mov	r2, r6
    d304:	4629      	mov	r1, r5
    d306:	f8cd 8000 	str.w	r8, [sp]
    d30a:	f009 fe28 	bl	16f5e <nbr_init>
    d30e:	f009 fd9f 	bl	16e50 <z_arch_is_user_context>
}
    d312:	4620      	mov	r0, r4
    d314:	b003      	add	sp, #12
    d316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (oldest == MIN(oldest, data->stale_counter)) {
    d31a:	4689      	mov	r9, r1
    d31c:	4623      	mov	r3, r4
    d31e:	e7d9      	b.n	d2d4 <add_nbr+0x54>
    d320:	2000c6e4 	.word	0x2000c6e4
    d324:	2000c6f0 	.word	0x2000c6f0

0000d328 <net_ipv6_send_ns>:
		     struct net_pkt *pending,
		     const struct in6_addr *src,
		     const struct in6_addr *dst,
		     const struct in6_addr *tgt,
		     bool is_my_address)
{
    d328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d32c:	b08d      	sub	sp, #52	; 0x34
    d32e:	460d      	mov	r5, r1
    d330:	4693      	mov	fp, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ns_access,
    d332:	2100      	movs	r1, #0
    d334:	2214      	movs	r2, #20
{
    d336:	4606      	mov	r6, r0
    d338:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    d33c:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ns_access,
    d340:	e9cd 1202 	strd	r1, r2, [sp, #8]
	struct net_icmpv6_ns_hdr *ns_hdr;
	struct in6_addr node_dst;
	struct net_nbr *nbr;
	u8_t llao_len;

	if (!dst) {
    d344:	469a      	mov	sl, r3
    d346:	b9eb      	cbnz	r3, d384 <net_ipv6_send_ns+0x5c>
	dst->s6_addr[0]   = 0xFF;
    d348:	f240 23ff 	movw	r3, #767	; 0x2ff
    d34c:	9304      	str	r3, [sp, #16]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
    d34e:	f8ad a014 	strh.w	sl, [sp, #20]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
    d352:	f8ad a016 	strh.w	sl, [sp, #22]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
    d356:	f8ad a018 	strh.w	sl, [sp, #24]
	dst->s6_addr[10]  = 0U;
    d35a:	f44f 7380 	mov.w	r3, #256	; 0x100
    d35e:	f8ad 301a 	strh.w	r3, [sp, #26]
	dst->s6_addr[12]  = 0xFF;
    d362:	23ff      	movs	r3, #255	; 0xff
    d364:	f88d 301c 	strb.w	r3, [sp, #28]
	dst->s6_addr[13]  = src->s6_addr[13];
    d368:	f899 300d 	ldrb.w	r3, [r9, #13]
    d36c:	f88d 301d 	strb.w	r3, [sp, #29]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
    d370:	f899 200f 	ldrb.w	r2, [r9, #15]
    d374:	f899 300e 	ldrb.w	r3, [r9, #14]
    d378:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d37c:	f8ad 301e 	strh.w	r3, [sp, #30]
		net_ipv6_addr_create_solicited_node(tgt, &node_dst);
		dst = &node_dst;
    d380:	f10d 0a10 	add.w	sl, sp, #16
	if (net_if_get_link_addr(iface)->len == 6U) {
    d384:	6833      	ldr	r3, [r6, #0]
    d386:	7d1b      	ldrb	r3, [r3, #20]
    d388:	2b06      	cmp	r3, #6
    d38a:	d06e      	beq.n	d46a <net_ipv6_send_ns+0x142>
		return 16;
    d38c:	2b08      	cmp	r3, #8
    d38e:	bf14      	ite	ne
    d390:	2700      	movne	r7, #0
    d392:	2710      	moveq	r7, #16
	}

	llao_len = get_llao_len(iface);

	if (is_my_address) {
    d394:	f1b8 0f00 	cmp.w	r8, #0
    d398:	d069      	beq.n	d46e <net_ipv6_send_ns+0x146>
		src = net_ipv6_unspecified_address();
    d39a:	f7ff fcd9 	bl	cd50 <net_ipv6_unspecified_address>
		llao_len = 0U;
    d39e:	2700      	movs	r7, #0
		src = net_ipv6_unspecified_address();
    d3a0:	4683      	mov	fp, r0

			goto drop;
		}
	}

	pkt = net_pkt_alloc_with_buffer(iface,
    d3a2:	2364      	movs	r3, #100	; 0x64
    d3a4:	9300      	str	r3, [sp, #0]
    d3a6:	2202      	movs	r2, #2
    d3a8:	233a      	movs	r3, #58	; 0x3a
    d3aa:	f107 0114 	add.w	r1, r7, #20
    d3ae:	4630      	mov	r0, r6
    d3b0:	f7ff fbb2 	bl	cb18 <net_pkt_alloc_with_buffer>
					sizeof(struct net_icmpv6_ns_hdr) +
					llao_len,
					AF_INET6, IPPROTO_ICMPV6,
					ND_NET_BUF_TIMEOUT);
	if (!pkt) {
    d3b4:	4604      	mov	r4, r0
    d3b6:	2800      	cmp	r0, #0
    d3b8:	f000 80b8 	beq.w	d52c <net_ipv6_send_ns+0x204>
	pkt->ipv6_hop_limit = hop_limit;
    d3bc:	23ff      	movs	r3, #255	; 0xff
		goto drop;
	}

	net_pkt_set_ipv6_hop_limit(pkt, NET_IPV6_ND_HOP_LIMIT);

	if (net_ipv6_create(pkt, src, dst) ||
    d3be:	4652      	mov	r2, sl
    d3c0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    d3c4:	4659      	mov	r1, fp
    d3c6:	f009 fc92 	bl	16cee <net_ipv6_create>
    d3ca:	4602      	mov	r2, r0
    d3cc:	2800      	cmp	r0, #0
    d3ce:	d16c      	bne.n	d4aa <net_ipv6_send_ns+0x182>
	    net_icmpv6_create(pkt, NET_ICMPV6_NS, 0)) {
    d3d0:	2187      	movs	r1, #135	; 0x87
    d3d2:	4620      	mov	r0, r4
    d3d4:	f009 fb21 	bl	16a1a <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, dst) ||
    d3d8:	4682      	mov	sl, r0
    d3da:	2800      	cmp	r0, #0
    d3dc:	d165      	bne.n	d4aa <net_ipv6_send_ns+0x182>
		goto drop;
	}

	ns_hdr = (struct net_icmpv6_ns_hdr *)net_pkt_get_data(pkt, &ns_access);
    d3de:	a902      	add	r1, sp, #8
    d3e0:	4620      	mov	r0, r4
    d3e2:	f009 f8f4 	bl	165ce <net_pkt_get_data>
	if (!ns_hdr) {
    d3e6:	4603      	mov	r3, r0
    d3e8:	2800      	cmp	r0, #0
    d3ea:	d05e      	beq.n	d4aa <net_ipv6_send_ns+0x182>
		goto drop;
	}

	ns_hdr->reserved = 0U;
	net_ipaddr_copy(&ns_hdr->tgt, tgt);
    d3ec:	f10d 0e20 	add.w	lr, sp, #32
	ns_hdr->reserved = 0U;
    d3f0:	f880 a000 	strb.w	sl, [r0]
    d3f4:	f880 a001 	strb.w	sl, [r0, #1]
    d3f8:	f880 a002 	strb.w	sl, [r0, #2]
    d3fc:	f880 a003 	strb.w	sl, [r0, #3]
	net_ipaddr_copy(&ns_hdr->tgt, tgt);
    d400:	464a      	mov	r2, r9
    d402:	f109 0a10 	add.w	sl, r9, #16
    d406:	46f4      	mov	ip, lr
    d408:	6810      	ldr	r0, [r2, #0]
    d40a:	6851      	ldr	r1, [r2, #4]
    d40c:	46f1      	mov	r9, lr
    d40e:	e8a9 0003 	stmia.w	r9!, {r0, r1}
    d412:	3208      	adds	r2, #8
    d414:	4552      	cmp	r2, sl
    d416:	46ce      	mov	lr, r9
    d418:	d1f6      	bne.n	d408 <net_ipv6_send_ns+0xe0>
    d41a:	3304      	adds	r3, #4
    d41c:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
    d420:	469a      	mov	sl, r3
    d422:	4662      	mov	r2, ip
    d424:	ca03      	ldmia	r2!, {r0, r1}
    d426:	4572      	cmp	r2, lr
    d428:	6018      	str	r0, [r3, #0]
    d42a:	6059      	str	r1, [r3, #4]
    d42c:	4694      	mov	ip, r2
    d42e:	f103 0308 	add.w	r3, r3, #8
    d432:	d1f6      	bne.n	d422 <net_ipv6_send_ns+0xfa>

	if (net_pkt_set_data(pkt, &ns_access)) {
    d434:	a902      	add	r1, sp, #8
    d436:	4620      	mov	r0, r4
    d438:	f009 f8ef 	bl	1661a <net_pkt_set_data>
    d43c:	4681      	mov	r9, r0
    d43e:	bba0      	cbnz	r0, d4aa <net_ipv6_send_ns+0x182>
		goto drop;
	}

	if (!is_my_address) {
    d440:	f1b8 0f00 	cmp.w	r8, #0
    d444:	d028      	beq.n	d498 <net_ipv6_send_ns+0x170>
			      llao_len, NET_ICMPV6_ND_OPT_SLLAO)) {
			goto drop;
		}
	}

	net_pkt_cursor_init(pkt);
    d446:	4620      	mov	r0, r4
    d448:	f008 ff54 	bl	162f4 <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
    d44c:	213a      	movs	r1, #58	; 0x3a
    d44e:	4620      	mov	r0, r4
    d450:	f009 fcb1 	bl	16db6 <net_ipv6_finalize>

	nbr = add_nbr(iface, &ns_hdr->tgt, false,
    d454:	2300      	movs	r3, #0
    d456:	4630      	mov	r0, r6
    d458:	461a      	mov	r2, r3
    d45a:	4651      	mov	r1, sl
    d45c:	f7ff ff10 	bl	d280 <add_nbr>
		      NET_IPV6_NBR_STATE_INCOMPLETE);
	if (!nbr) {
    d460:	4606      	mov	r6, r0
    d462:	bb20      	cbnz	r0, d4ae <net_ipv6_send_ns+0x186>
    d464:	f009 fcf4 	bl	16e50 <z_arch_is_user_context>
		NET_DBG("Could not create new neighbor %s",
			log_strdup(net_sprint_ipv6_addr(&ns_hdr->tgt)));
		goto drop;
    d468:	e01f      	b.n	d4aa <net_ipv6_send_ns+0x182>
		return 8;
    d46a:	2708      	movs	r7, #8
    d46c:	e792      	b.n	d394 <net_ipv6_send_ns+0x6c>
		if (!src) {
    d46e:	f1bb 0f00 	cmp.w	fp, #0
    d472:	d104      	bne.n	d47e <net_ipv6_send_ns+0x156>
			src = net_if_ipv6_select_src_addr(iface, dst);
    d474:	4651      	mov	r1, sl
    d476:	4630      	mov	r0, r6
    d478:	f7ff f9a0 	bl	c7bc <net_if_ipv6_select_src_addr>
    d47c:	4683      	mov	fp, r0
		if (net_ipv6_is_addr_unspecified(src)) {
    d47e:	4658      	mov	r0, fp
    d480:	f009 fcf0 	bl	16e64 <net_ipv6_is_addr_unspecified>
    d484:	2800      	cmp	r0, #0
    d486:	d08c      	beq.n	d3a2 <net_ipv6_send_ns+0x7a>
    d488:	f009 fce2 	bl	16e50 <z_arch_is_user_context>
			ret = -EINVAL;
    d48c:	f06f 0915 	mvn.w	r9, #21
	net_stats_update_ipv6_nd_sent(iface);

	return 0;

drop:
	if (pending) {
    d490:	2d00      	cmp	r5, #0
    d492:	d047      	beq.n	d524 <net_ipv6_send_ns+0x1fc>
    d494:	2400      	movs	r4, #0
    d496:	e03e      	b.n	d516 <net_ipv6_send_ns+0x1ee>
	return &iface->if_dev->link_addr;
    d498:	6831      	ldr	r1, [r6, #0]
		if (!set_llao(pkt, net_if_get_link_addr(iface),
    d49a:	2301      	movs	r3, #1
    d49c:	463a      	mov	r2, r7
    d49e:	3110      	adds	r1, #16
    d4a0:	4620      	mov	r0, r4
    d4a2:	f009 fd12 	bl	16eca <set_llao>
    d4a6:	2800      	cmp	r0, #0
    d4a8:	d1cd      	bne.n	d446 <net_ipv6_send_ns+0x11e>
	if (pending) {
    d4aa:	bb95      	cbnz	r5, d512 <net_ipv6_send_ns+0x1ea>
    d4ac:	e02c      	b.n	d508 <net_ipv6_send_ns+0x1e0>
	if (pending) {
    d4ae:	b1f5      	cbz	r5, d4ee <net_ipv6_send_ns+0x1c6>
		if (!net_ipv6_nbr_data(nbr)->pending) {
    d4b0:	68c7      	ldr	r7, [r0, #12]
    d4b2:	683b      	ldr	r3, [r7, #0]
    d4b4:	bb5b      	cbnz	r3, d50e <net_ipv6_send_ns+0x1e6>
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
    d4b6:	4628      	mov	r0, r5
    d4b8:	f008 fe86 	bl	161c8 <net_pkt_ref>
    d4bc:	6038      	str	r0, [r7, #0]
    d4be:	f009 fcc7 	bl	16e50 <z_arch_is_user_context>
		net_ipv6_nbr_data(nbr)->send_ns = k_uptime_get();
    d4c2:	68f7      	ldr	r7, [r6, #12]
    d4c4:	f009 fd80 	bl	16fc8 <k_uptime_get>
    d4c8:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	return __ticks_to_ms(z_timeout_remaining(&work->timeout));
    d4cc:	4819      	ldr	r0, [pc, #100]	; (d534 <net_ipv6_send_ns+0x20c>)
    d4ce:	f003 fa13 	bl	108f8 <z_timeout_remaining>
    d4d2:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    d4d6:	2264      	movs	r2, #100	; 0x64
    d4d8:	2300      	movs	r3, #0
    d4da:	fb80 0107 	smull	r0, r1, r0, r7
    d4de:	f7f3 fa33 	bl	948 <__aeabi_uldivmod>
		if (!k_delayed_work_remaining_get(&ipv6_ns_reply_timer)) {
    d4e2:	b920      	cbnz	r0, d4ee <net_ipv6_send_ns+0x1c6>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    d4e4:	463a      	mov	r2, r7
    d4e6:	4914      	ldr	r1, [pc, #80]	; (d538 <net_ipv6_send_ns+0x210>)
    d4e8:	4814      	ldr	r0, [pc, #80]	; (d53c <net_ipv6_send_ns+0x214>)
    d4ea:	f003 f939 	bl	10760 <k_delayed_work_submit_to_queue>
    d4ee:	f009 fcaf 	bl	16e50 <z_arch_is_user_context>
	if (net_send_data(pkt) < 0) {
    d4f2:	4620      	mov	r0, r4
    d4f4:	f008 f902 	bl	156fc <net_send_data>
    d4f8:	2800      	cmp	r0, #0
    d4fa:	da13      	bge.n	d524 <net_ipv6_send_ns+0x1fc>
    d4fc:	f009 fca8 	bl	16e50 <z_arch_is_user_context>
		if (pending) {
    d500:	b115      	cbz	r5, d508 <net_ipv6_send_ns+0x1e0>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
    d502:	68f0      	ldr	r0, [r6, #12]
    d504:	f009 fcbd 	bl	16e82 <nbr_clear_ns_pending>
	if (pending) {
    d508:	f06f 0968 	mvn.w	r9, #104	; 0x68
    d50c:	e007      	b.n	d51e <net_ipv6_send_ns+0x1f6>
    d50e:	f009 fc9f 	bl	16e50 <z_arch_is_user_context>
    d512:	f06f 0968 	mvn.w	r9, #104	; 0x68
		net_pkt_unref(pending);
    d516:	4628      	mov	r0, r5
    d518:	f008 fe76 	bl	16208 <net_pkt_unref>
	}

	if (pkt) {
    d51c:	b114      	cbz	r4, d524 <net_ipv6_send_ns+0x1fc>
		net_pkt_unref(pkt);
    d51e:	4620      	mov	r0, r4
    d520:	f008 fe72 	bl	16208 <net_pkt_unref>
	}

	net_stats_update_ipv6_nd_drop(iface);

	return ret;
}
    d524:	4648      	mov	r0, r9
    d526:	b00d      	add	sp, #52	; 0x34
    d528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ret = -ENOMEM;
    d52c:	f06f 090b 	mvn.w	r9, #11
    d530:	e7ae      	b.n	d490 <net_ipv6_send_ns+0x168>
    d532:	bf00      	nop
    d534:	200044bc 	.word	0x200044bc
    d538:	200044b0 	.word	0x200044b0
    d53c:	2000582c 	.word	0x2000582c

0000d540 <handle_ra_input>:
#endif

static enum net_verdict handle_ra_input(struct net_pkt *pkt,
					struct net_ipv6_hdr *ip_hdr,
					struct net_icmp_hdr *icmp_hdr)
{
    d540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ra_access,
    d544:	2300      	movs	r3, #0
{
    d546:	b099      	sub	sp, #100	; 0x64
    d548:	4690      	mov	r8, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ra_access,
    d54a:	220c      	movs	r2, #12
    d54c:	e9cd 3206 	strd	r3, r2, [sp, #24]
					      struct net_icmpv6_ra_hdr);
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
    d550:	aa04      	add	r2, sp, #16
    d552:	9208      	str	r2, [sp, #32]
	u16_t length = net_pkt_get_len(pkt);
    d554:	6946      	ldr	r6, [r0, #20]
{
    d556:	9103      	str	r1, [sp, #12]
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
    d558:	2202      	movs	r2, #2
{
    d55a:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
    d55c:	9209      	str	r2, [sp, #36]	; 0x24
	while (buf) {
    d55e:	b966      	cbnz	r6, d57a <handle_ra_input+0x3a>
	struct net_icmpv6_nd_opt_hdr *nd_opt_hdr;
	struct net_icmpv6_ra_hdr *ra_hdr;
	struct net_if_router *router;
	u32_t mtu;

	ra_hdr = (struct net_icmpv6_ra_hdr *)net_pkt_get_data(pkt, &ra_access);
    d560:	a906      	add	r1, sp, #24
    d562:	4620      	mov	r0, r4
	u16_t length = net_pkt_get_len(pkt);
    d564:	b29d      	uxth	r5, r3
	ra_hdr = (struct net_icmpv6_ra_hdr *)net_pkt_get_data(pkt, &ra_access);
    d566:	f009 f832 	bl	165ce <net_pkt_get_data>
	if (!ra_hdr) {
    d56a:	4607      	mov	r7, r0
    d56c:	b948      	cbnz	r0, d582 <handle_ra_input+0x42>
    d56e:	f009 fc6f 	bl	16e50 <z_arch_is_user_context>
	return NET_OK;

drop:
	net_stats_update_ipv6_nd_drop(net_pkt_iface(pkt));

	return NET_DROP;
    d572:	2002      	movs	r0, #2
}
    d574:	b019      	add	sp, #100	; 0x64
    d576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bytes += buf->len;
    d57a:	89b2      	ldrh	r2, [r6, #12]
		buf = buf->frags;
    d57c:	6836      	ldr	r6, [r6, #0]
		bytes += buf->len;
    d57e:	4413      	add	r3, r2
		buf = buf->frags;
    d580:	e7ed      	b.n	d55e <handle_ra_input+0x1e>
    d582:	f009 fc65 	bl	16e50 <z_arch_is_user_context>
	if (((length < (sizeof(struct net_ipv6_hdr) +
    d586:	2d39      	cmp	r5, #57	; 0x39
    d588:	d909      	bls.n	d59e <handle_ra_input+0x5e>
			sizeof(struct net_icmpv6_nd_opt_hdr))) ||
    d58a:	9b03      	ldr	r3, [sp, #12]
    d58c:	79db      	ldrb	r3, [r3, #7]
    d58e:	2bff      	cmp	r3, #255	; 0xff
    d590:	d105      	bne.n	d59e <handle_ra_input+0x5e>
	     (ip_hdr->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
    d592:	9b03      	ldr	r3, [sp, #12]
    d594:	891a      	ldrh	r2, [r3, #8]
    d596:	f248 03fe 	movw	r3, #33022	; 0x80fe
    d59a:	429a      	cmp	r2, r3
    d59c:	d003      	beq.n	d5a6 <handle_ra_input+0x66>
	     !net_ipv6_is_ll_addr(&ip_hdr->src)) &&
    d59e:	f898 3001 	ldrb.w	r3, [r8, #1]
    d5a2:	2b00      	cmp	r3, #0
    d5a4:	d1e5      	bne.n	d572 <handle_ra_input+0x32>
	return net_pkt_skip(pkt, access->size);
    d5a6:	9907      	ldr	r1, [sp, #28]
    d5a8:	4620      	mov	r0, r4
    d5aa:	f008 ff1f 	bl	163ec <net_pkt_skip>
	ra_hdr->router_lifetime = ntohs(ra_hdr->router_lifetime);
    d5ae:	887a      	ldrh	r2, [r7, #2]
    d5b0:	0213      	lsls	r3, r2, #8
    d5b2:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
    d5b6:	807b      	strh	r3, [r7, #2]
	ra_hdr->reachable_time = ntohl(ra_hdr->reachable_time);
    d5b8:	687b      	ldr	r3, [r7, #4]
	if (ra_hdr->cur_hop_limit) {
    d5ba:	783a      	ldrb	r2, [r7, #0]
    d5bc:	ba1b      	rev	r3, r3
	ra_hdr->reachable_time = ntohl(ra_hdr->reachable_time);
    d5be:	607b      	str	r3, [r7, #4]
	ra_hdr->retrans_timer = ntohl(ra_hdr->retrans_timer);
    d5c0:	68bb      	ldr	r3, [r7, #8]
    d5c2:	ba1b      	rev	r3, r3
    d5c4:	60bb      	str	r3, [r7, #8]
	if (ra_hdr->cur_hop_limit) {
    d5c6:	b132      	cbz	r2, d5d6 <handle_ra_input+0x96>
		net_ipv6_set_hop_limit(net_pkt_iface(pkt),
    d5c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d5ca:	685b      	ldr	r3, [r3, #4]
	if (!iface->config.ip.ipv6) {
    d5cc:	b10b      	cbz	r3, d5d2 <handle_ra_input+0x92>
	iface->config.ip.ipv6->hop_limit = hop_limit;
    d5ce:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
    d5d2:	f009 fc3d 	bl	16e50 <z_arch_is_user_context>
	if (ra_hdr->reachable_time &&
    d5d6:	687b      	ldr	r3, [r7, #4]
    d5d8:	4ac1      	ldr	r2, [pc, #772]	; (d8e0 <handle_ra_input+0x3a0>)
    d5da:	1e59      	subs	r1, r3, #1
    d5dc:	4291      	cmp	r1, r2
    d5de:	d80d      	bhi.n	d5fc <handle_ra_input+0xbc>
	    (net_if_ipv6_get_reachable_time(net_pkt_iface(pkt)) !=
    d5e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
    d5e2:	6855      	ldr	r5, [r2, #4]
	if (!iface->config.ip.ipv6) {
    d5e4:	b12d      	cbz	r5, d5f2 <handle_ra_input+0xb2>
	    ra_hdr->reachable_time <= MAX_REACHABLE_TIME &&
    d5e6:	f8d5 214c 	ldr.w	r2, [r5, #332]	; 0x14c
    d5ea:	4293      	cmp	r3, r2
    d5ec:	d006      	beq.n	d5fc <handle_ra_input+0xbc>
	iface->config.ip.ipv6->base_reachable_time = reachable_time;
    d5ee:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
	ipv6->reachable_time = net_if_ipv6_calc_reachable_time(ipv6);
    d5f2:	4628      	mov	r0, r5
    d5f4:	f008 fc68 	bl	15ec8 <net_if_ipv6_calc_reachable_time>
    d5f8:	f8c5 014c 	str.w	r0, [r5, #332]	; 0x14c
	if (ra_hdr->retrans_timer) {
    d5fc:	68ba      	ldr	r2, [r7, #8]
    d5fe:	b122      	cbz	r2, d60a <handle_ra_input+0xca>
		net_if_ipv6_set_retrans_timer(net_pkt_iface(pkt),
    d600:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d602:	685b      	ldr	r3, [r3, #4]
 */
static inline void net_if_ipv6_set_retrans_timer(struct net_if *iface,
						 u32_t retrans_timer)
{
#if defined(CONFIG_NET_IPV6)
	if (!iface->config.ip.ipv6) {
    d604:	b10b      	cbz	r3, d60a <handle_ra_input+0xca>
		return;
	}

	iface->config.ip.ipv6->retrans_timer = retrans_timer;
    d606:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	pkt->ipv6_ext_opt_len = len;
    d60a:	230c      	movs	r3, #12
    d60c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
					net_pkt_get_data(pkt, &nd_access);
    d610:	a908      	add	r1, sp, #32
    d612:	4620      	mov	r0, r4
    d614:	f008 ffdb 	bl	165ce <net_pkt_get_data>
    d618:	4605      	mov	r5, r0
	while (nd_opt_hdr) {
    d61a:	bb70      	cbnz	r0, d67a <handle_ra_input+0x13a>
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt), &ip_hdr->src);
    d61c:	9d03      	ldr	r5, [sp, #12]
    d61e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    d620:	3508      	adds	r5, #8
    d622:	4629      	mov	r1, r5
    d624:	f7ff f82a 	bl	c67c <net_if_ipv6_router_lookup>
	if (router) {
    d628:	887a      	ldrh	r2, [r7, #2]
    d62a:	4603      	mov	r3, r0
    d62c:	2800      	cmp	r0, #0
    d62e:	f000 81b2 	beq.w	d996 <handle_ra_input+0x456>
		if (!ra_hdr->router_lifetime) {
    d632:	4611      	mov	r1, r2
    d634:	2a00      	cmp	r2, #0
    d636:	f040 81a5 	bne.w	d984 <handle_ra_input+0x444>
			net_if_ipv6_router_rm(router);
    d63a:	f7ff f8a5 	bl	c788 <net_if_ipv6_router_rm>
	if (nbr && net_ipv6_nbr_data(nbr)->pending) {
    d63e:	b18e      	cbz	r6, d664 <handle_ra_input+0x124>
    d640:	68f3      	ldr	r3, [r6, #12]
    d642:	681b      	ldr	r3, [r3, #0]
    d644:	b173      	cbz	r3, d664 <handle_ra_input+0x124>
    d646:	f009 fc03 	bl	16e50 <z_arch_is_user_context>
		if (net_send_data(net_ipv6_nbr_data(nbr)->pending) < 0) {
    d64a:	68f3      	ldr	r3, [r6, #12]
    d64c:	6818      	ldr	r0, [r3, #0]
    d64e:	f008 f855 	bl	156fc <net_send_data>
    d652:	2800      	cmp	r0, #0
    d654:	da03      	bge.n	d65e <handle_ra_input+0x11e>
			net_pkt_unref(net_ipv6_nbr_data(nbr)->pending);
    d656:	68f3      	ldr	r3, [r6, #12]
    d658:	6818      	ldr	r0, [r3, #0]
    d65a:	f008 fdd5 	bl	16208 <net_pkt_unref>
		nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
    d65e:	68f0      	ldr	r0, [r6, #12]
    d660:	f009 fc0f 	bl	16e82 <nbr_clear_ns_pending>
	k_delayed_work_cancel(&net_pkt_iface(pkt)->config.ip.ipv6->rs_timer);
    d664:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d666:	6858      	ldr	r0, [r3, #4]
    d668:	f500 7094 	add.w	r0, r0, #296	; 0x128
    d66c:	f00b f981 	bl	18972 <k_delayed_work_cancel>
	net_pkt_unref(pkt);
    d670:	4620      	mov	r0, r4
    d672:	f008 fdc9 	bl	16208 <net_pkt_unref>
	return NET_OK;
    d676:	2000      	movs	r0, #0
    d678:	e77c      	b.n	d574 <handle_ra_input+0x34>
	return net_pkt_skip(pkt, access->size);
    d67a:	9909      	ldr	r1, [sp, #36]	; 0x24
    d67c:	4620      	mov	r0, r4
    d67e:	f008 feb5 	bl	163ec <net_pkt_skip>
		switch (nd_opt_hdr->type) {
    d682:	782b      	ldrb	r3, [r5, #0]
    d684:	2b05      	cmp	r3, #5
    d686:	f000 808e 	beq.w	d7a6 <handle_ra_input+0x266>
    d68a:	f200 816d 	bhi.w	d968 <handle_ra_input+0x428>
    d68e:	2b01      	cmp	r3, #1
    d690:	d054      	beq.n	d73c <handle_ra_input+0x1fc>
    d692:	2b03      	cmp	r3, #3
    d694:	f040 8168 	bne.w	d968 <handle_ra_input+0x428>
	NET_PKT_DATA_ACCESS_DEFINE(rapfx_access,
    d698:	ab10      	add	r3, sp, #64	; 0x40
    d69a:	930a      	str	r3, [sp, #40]	; 0x28
				net_pkt_get_data(pkt, &rapfx_access);
    d69c:	a90a      	add	r1, sp, #40	; 0x28
	NET_PKT_DATA_ACCESS_DEFINE(rapfx_access,
    d69e:	231e      	movs	r3, #30
				net_pkt_get_data(pkt, &rapfx_access);
    d6a0:	4620      	mov	r0, r4
	NET_PKT_DATA_ACCESS_DEFINE(rapfx_access,
    d6a2:	930b      	str	r3, [sp, #44]	; 0x2c
				net_pkt_get_data(pkt, &rapfx_access);
    d6a4:	f008 ff93 	bl	165ce <net_pkt_get_data>
	if (!pfx_info) {
    d6a8:	4605      	mov	r5, r0
    d6aa:	2800      	cmp	r0, #0
    d6ac:	f43f af61 	beq.w	d572 <handle_ra_input+0x32>
    d6b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    d6b2:	4620      	mov	r0, r4
    d6b4:	f008 fe9a 	bl	163ec <net_pkt_skip>
	pfx_info->valid_lifetime = ntohl(pfx_info->valid_lifetime);
    d6b8:	f8d5 2002 	ldr.w	r2, [r5, #2]
    d6bc:	f8d5 3006 	ldr.w	r3, [r5, #6]
    d6c0:	ba12      	rev	r2, r2
    d6c2:	ba1b      	rev	r3, r3
	if (pfx_info->valid_lifetime >= pfx_info->preferred_lifetime &&
    d6c4:	429a      	cmp	r2, r3
	pfx_info->valid_lifetime = ntohl(pfx_info->valid_lifetime);
    d6c6:	f8c5 2002 	str.w	r2, [r5, #2]
	pfx_info->preferred_lifetime = ntohl(pfx_info->preferred_lifetime);
    d6ca:	f8c5 3006 	str.w	r3, [r5, #6]
	if (pfx_info->valid_lifetime >= pfx_info->preferred_lifetime &&
    d6ce:	d39f      	bcc.n	d610 <handle_ra_input+0xd0>
    d6d0:	89ea      	ldrh	r2, [r5, #14]
    d6d2:	f248 03fe 	movw	r3, #33022	; 0x80fe
    d6d6:	429a      	cmp	r2, r3
    d6d8:	d09a      	beq.n	d610 <handle_ra_input+0xd0>
		if (pfx_info->flags & NET_ICMPV6_RA_FLAG_ONLINK) {
    d6da:	f995 3001 	ldrsb.w	r3, [r5, #1]
    d6de:	2b00      	cmp	r3, #0
    d6e0:	da7c      	bge.n	d7dc <handle_ra_input+0x29c>
	prefix = net_if_ipv6_prefix_lookup(net_pkt_iface(pkt),
    d6e2:	46a8      	mov	r8, r5
    d6e4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    d6e6:	f818 2b0e 	ldrb.w	r2, [r8], #14
    d6ea:	4641      	mov	r1, r8
    d6ec:	f008 fb49 	bl	15d82 <net_if_ipv6_prefix_lookup>
	if (!prefix) {
    d6f0:	4681      	mov	r9, r0
    d6f2:	b968      	cbnz	r0, d710 <handle_ra_input+0x1d0>
		if (!prefix_info->valid_lifetime) {
    d6f4:	f8d5 3002 	ldr.w	r3, [r5, #2]
    d6f8:	2b00      	cmp	r3, #0
    d6fa:	d06f      	beq.n	d7dc <handle_ra_input+0x29c>
		prefix = net_if_ipv6_prefix_add(net_pkt_iface(pkt),
    d6fc:	782a      	ldrb	r2, [r5, #0]
    d6fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
    d700:	4641      	mov	r1, r8
    d702:	f008 fabd 	bl	15c80 <net_if_ipv6_prefix_add>
		if (prefix) {
    d706:	4681      	mov	r9, r0
    d708:	2800      	cmp	r0, #0
    d70a:	d065      	beq.n	d7d8 <handle_ra_input+0x298>
    d70c:	f009 fba0 	bl	16e50 <z_arch_is_user_context>
	switch (prefix_info->valid_lifetime) {
    d710:	f8d5 3002 	ldr.w	r3, [r5, #2]
    d714:	2b00      	cmp	r3, #0
    d716:	f000 80b1 	beq.w	d87c <handle_ra_input+0x33c>
    d71a:	3301      	adds	r3, #1
    d71c:	f000 80b8 	beq.w	d890 <handle_ra_input+0x350>
    d720:	f009 fb96 	bl	16e50 <z_arch_is_user_context>
	prefix->is_infinite = is_infinite;
    d724:	f899 3025 	ldrb.w	r3, [r9, #37]	; 0x25
		net_if_ipv6_prefix_set_timer(prefix,
    d728:	f8d5 1002 	ldr.w	r1, [r5, #2]
    d72c:	f36f 0300 	bfc	r3, #0, #1
    d730:	f889 3025 	strb.w	r3, [r9, #37]	; 0x25
    d734:	4648      	mov	r0, r9
    d736:	f7fe ff3f 	bl	c5b8 <net_if_ipv6_prefix_set_timer>
		break;
    d73a:	e04f      	b.n	d7dc <handle_ra_input+0x29c>
	llstorage.len = NET_LINK_ADDR_MAX_LENGTH;
    d73c:	2306      	movs	r3, #6
			nbr = handle_ra_neighbor(pkt, nd_opt_hdr->len);
    d73e:	786d      	ldrb	r5, [r5, #1]
	lladdr.len = NET_LINK_ADDR_MAX_LENGTH;
    d740:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	llstorage.len = NET_LINK_ADDR_MAX_LENGTH;
    d744:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
	if (net_pkt_lladdr_src(pkt)->len < lladdr.len) {
    d748:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    d74c:	2b05      	cmp	r3, #5
		lladdr.len = net_pkt_lladdr_src(pkt)->len;
    d74e:	bf98      	it	ls
    d750:	f88d 3034 	strbls.w	r3, [sp, #52]	; 0x34
	lladdr.addr = llstorage.addr;
    d754:	f10d 0142 	add.w	r1, sp, #66	; 0x42
	if (net_pkt_read(pkt, lladdr.addr, lladdr.len)) {
    d758:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
	lladdr.addr = llstorage.addr;
    d75c:	910c      	str	r1, [sp, #48]	; 0x30
	if (net_pkt_read(pkt, lladdr.addr, lladdr.len)) {
    d75e:	4620      	mov	r0, r4
    d760:	f008 fe60 	bl	16424 <net_pkt_read>
    d764:	2800      	cmp	r0, #0
    d766:	f47f af04 	bne.w	d572 <handle_ra_input+0x32>
	padding = len * 8U - 2 - lladdr.len;
    d76a:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
    d76e:	f1c1 01fe 	rsb	r1, r1, #254	; 0xfe
    d772:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
	if (padding) {
    d776:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    d77a:	d005      	beq.n	d788 <handle_ra_input+0x248>
		if (net_pkt_skip(pkt, padding)) {
    d77c:	4620      	mov	r0, r4
    d77e:	f008 fe35 	bl	163ec <net_pkt_skip>
    d782:	2800      	cmp	r0, #0
    d784:	f47f aef5 	bne.w	d572 <handle_ra_input+0x32>
	return pkt->frags->data;
    d788:	6963      	ldr	r3, [r4, #20]
	return net_ipv6_nbr_add(net_pkt_iface(pkt),
    d78a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    d78c:	6899      	ldr	r1, [r3, #8]
    d78e:	2302      	movs	r3, #2
    d790:	9300      	str	r3, [sp, #0]
    d792:	aa0c      	add	r2, sp, #48	; 0x30
    d794:	2301      	movs	r3, #1
    d796:	3108      	adds	r1, #8
    d798:	f009 fe27 	bl	173ea <net_ipv6_nbr_add>
			if (!nbr) {
    d79c:	4606      	mov	r6, r0
    d79e:	2800      	cmp	r0, #0
    d7a0:	f47f af36 	bne.w	d610 <handle_ra_input+0xd0>
    d7a4:	e6e5      	b.n	d572 <handle_ra_input+0x32>
			if (net_pkt_skip(pkt, 2) ||
    d7a6:	2102      	movs	r1, #2
    d7a8:	4620      	mov	r0, r4
    d7aa:	f008 fe1f 	bl	163ec <net_pkt_skip>
    d7ae:	2800      	cmp	r0, #0
    d7b0:	f47f aedf 	bne.w	d572 <handle_ra_input+0x32>
			    net_pkt_read_be32(pkt, &mtu)) {
    d7b4:	a905      	add	r1, sp, #20
    d7b6:	4620      	mov	r0, r4
    d7b8:	f008 fe40 	bl	1643c <net_pkt_read_be32>
			if (net_pkt_skip(pkt, 2) ||
    d7bc:	2800      	cmp	r0, #0
    d7be:	f47f aed8 	bne.w	d572 <handle_ra_input+0x32>
			if (mtu < MIN_IPV6_MTU || mtu > MAX_IPV6_MTU) {
    d7c2:	9b05      	ldr	r3, [sp, #20]
    d7c4:	f5a3 62a0 	sub.w	r2, r3, #1280	; 0x500
    d7c8:	f5b2 4f7b 	cmp.w	r2, #64256	; 0xfb00
    d7cc:	f4bf aecf 	bcs.w	d56e <handle_ra_input+0x2e>
			net_if_set_mtu(net_pkt_iface(pkt), mtu);
    d7d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
	iface->if_dev->mtu = mtu;
    d7d2:	6812      	ldr	r2, [r2, #0]
    d7d4:	8313      	strh	r3, [r2, #24]
    d7d6:	e71b      	b.n	d610 <handle_ra_input+0xd0>
    d7d8:	f009 fb3a 	bl	16e50 <z_arch_is_user_context>
		if ((pfx_info->flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
    d7dc:	786b      	ldrb	r3, [r5, #1]
    d7de:	065b      	lsls	r3, r3, #25
    d7e0:	f57f af16 	bpl.w	d610 <handle_ra_input+0xd0>
		    pfx_info->valid_lifetime &&
    d7e4:	f8d5 3002 	ldr.w	r3, [r5, #2]
		if ((pfx_info->flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
    d7e8:	2b00      	cmp	r3, #0
    d7ea:	f43f af11 	beq.w	d610 <handle_ra_input+0xd0>
		    pfx_info->valid_lifetime &&
    d7ee:	782b      	ldrb	r3, [r5, #0]
    d7f0:	2b40      	cmp	r3, #64	; 0x40
    d7f2:	f47f af0d 	bne.w	d610 <handle_ra_input+0xd0>
	struct in6_addr addr = { };
    d7f6:	220e      	movs	r2, #14
    d7f8:	2100      	movs	r1, #0
    d7fa:	f10d 0032 	add.w	r0, sp, #50	; 0x32
    d7fe:	f7f4 fdf8 	bl	23f2 <memset>
	net_ipv6_addr_create_iid(&addr,
    d802:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d804:	681a      	ldr	r2, [r3, #0]
 *  @param lladdr Link local address
 */
static inline void net_ipv6_addr_create_iid(struct in6_addr *addr,
					    struct net_linkaddr *lladdr)
{
	addr->s6_addr[0] = 0xfe;
    d806:	f248 03fe 	movw	r3, #33022	; 0x80fe
    d80a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
	addr->s6_addr[1] = 0x80;
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
    d80e:	2100      	movs	r1, #0
    d810:	910d      	str	r1, [sp, #52]	; 0x34

	switch (lladdr->len) {
    d812:	7d13      	ldrb	r3, [r2, #20]
    d814:	2b06      	cmp	r3, #6
    d816:	d044      	beq.n	d8a2 <handle_ra_input+0x362>
    d818:	2b08      	cmp	r3, #8
    d81a:	d063      	beq.n	d8e4 <handle_ra_input+0x3a4>
    d81c:	2b02      	cmp	r3, #2
    d81e:	d110      	bne.n	d842 <handle_ra_input+0x302>
	case 2:
		/* The generated IPv6 shall not toggle the
		 * Universal/Local bit. RFC 6282 ch 3.2.2
		 */
		if (lladdr->type == NET_LINK_IEEE802154) {
    d820:	7d53      	ldrb	r3, [r2, #21]
    d822:	2b01      	cmp	r3, #1
    d824:	d10d      	bne.n	d842 <handle_ra_input+0x302>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
    d826:	910e      	str	r1, [sp, #56]	; 0x38
			addr->s6_addr[11] = 0xff;
    d828:	23ff      	movs	r3, #255	; 0xff
    d82a:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
			addr->s6_addr[12] = 0xfe;
    d82e:	23fe      	movs	r3, #254	; 0xfe
    d830:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
			addr->s6_addr[13] = 0U;
			addr->s6_addr[14] = lladdr->addr[0];
    d834:	6913      	ldr	r3, [r2, #16]
    d836:	781a      	ldrb	r2, [r3, #0]
    d838:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
			addr->s6_addr[15] = lladdr->addr[1];
    d83c:	785b      	ldrb	r3, [r3, #1]
    d83e:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
	memcpy(&addr, &prefix_info->prefix, sizeof(struct in6_addr) / 2);
    d842:	462a      	mov	r2, r5
    d844:	ab0c      	add	r3, sp, #48	; 0x30
    d846:	f852 0f0e 	ldr.w	r0, [r2, #14]!
    d84a:	6851      	ldr	r1, [r2, #4]
    d84c:	c303      	stmia	r3!, {r0, r1}
	ifaddr = net_if_ipv6_addr_lookup(&addr, NULL);
    d84e:	2100      	movs	r1, #0
    d850:	a80c      	add	r0, sp, #48	; 0x30
    d852:	f7fe fbdb 	bl	c00c <net_if_ipv6_addr_lookup>
	if (ifaddr && ifaddr->addr_type == NET_ADDR_AUTOCONF) {
    d856:	f8d5 b002 	ldr.w	fp, [r5, #2]
    d85a:	4682      	mov	sl, r0
    d85c:	2800      	cmp	r0, #0
    d85e:	d078      	beq.n	d952 <handle_ra_input+0x412>
    d860:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    d864:	2b01      	cmp	r3, #1
    d866:	d174      	bne.n	d952 <handle_ra_input+0x412>
		if (prefix_info->valid_lifetime ==
    d868:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
    d86c:	d140      	bne.n	d8f0 <handle_ra_input+0x3b0>
	ifaddr->is_infinite = is_infinite;
    d86e:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
    d872:	f043 0301 	orr.w	r3, r3, #1
    d876:	f88a 3047 	strb.w	r3, [sl, #71]	; 0x47
    d87a:	e6c9      	b.n	d610 <handle_ra_input+0xd0>
    d87c:	f009 fae8 	bl	16e50 <z_arch_is_user_context>
		net_if_ipv6_prefix_rm(net_pkt_iface(pkt),
    d880:	f899 2024 	ldrb.w	r2, [r9, #36]	; 0x24
    d884:	6a60      	ldr	r0, [r4, #36]	; 0x24
    d886:	f109 0110 	add.w	r1, r9, #16
    d88a:	f008 fa9f 	bl	15dcc <net_if_ipv6_prefix_rm>
		break;
    d88e:	e7a5      	b.n	d7dc <handle_ra_input+0x29c>
    d890:	f009 fade 	bl	16e50 <z_arch_is_user_context>
	prefix->is_infinite = is_infinite;
    d894:	f899 3025 	ldrb.w	r3, [r9, #37]	; 0x25
    d898:	f043 0301 	orr.w	r3, r3, #1
    d89c:	f889 3025 	strb.w	r3, [r9, #37]	; 0x25
    d8a0:	e79c      	b.n	d7dc <handle_ra_input+0x29c>
		break;
	case 6:
		/* We do not toggle the Universal/Local bit
		 * in Bluetooth. See RFC 7668 ch 3.2.2
		 */
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
    d8a2:	6913      	ldr	r3, [r2, #16]
    d8a4:	7899      	ldrb	r1, [r3, #2]
    d8a6:	8818      	ldrh	r0, [r3, #0]
    d8a8:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
		addr->s6_addr[11] = 0xff;
    d8ac:	21ff      	movs	r1, #255	; 0xff
    d8ae:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
		addr->s6_addr[12] = 0xfe;
    d8b2:	21fe      	movs	r1, #254	; 0xfe
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
    d8b4:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
		addr->s6_addr[12] = 0xfe;
    d8b8:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
    d8bc:	f833 1f03 	ldrh.w	r1, [r3, #3]!
    d8c0:	f8ad 103d 	strh.w	r1, [sp, #61]	; 0x3d
    d8c4:	789b      	ldrb	r3, [r3, #2]
    d8c6:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
		if (lladdr->type == NET_LINK_BLUETOOTH) {
			addr->s6_addr[8] ^= 0x02;
		}
#endif

		if (lladdr->type == NET_LINK_ETHERNET) {
    d8ca:	7d53      	ldrb	r3, [r2, #21]
    d8cc:	2b03      	cmp	r3, #3
    d8ce:	d1b8      	bne.n	d842 <handle_ra_input+0x302>
		}

		break;
	case 8:
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
		addr->s6_addr[8] ^= 0x02;
    d8d0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    d8d4:	f083 0302 	eor.w	r3, r3, #2
    d8d8:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		break;
    d8dc:	e7b1      	b.n	d842 <handle_ra_input+0x302>
    d8de:	bf00      	nop
    d8e0:	0036ee7f 	.word	0x0036ee7f
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
    d8e4:	6912      	ldr	r2, [r2, #16]
    d8e6:	6810      	ldr	r0, [r2, #0]
    d8e8:	6851      	ldr	r1, [r2, #4]
    d8ea:	ab0e      	add	r3, sp, #56	; 0x38
    d8ec:	c303      	stmia	r3!, {r0, r1}
    d8ee:	e7ef      	b.n	d8d0 <handle_ra_input+0x390>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
    d8f0:	f5bb 5fe1 	cmp.w	fp, #7200	; 0x1c20
    d8f4:	d90b      	bls.n	d90e <handle_ra_input+0x3ce>
    d8f6:	f009 faab 	bl	16e50 <z_arch_is_user_context>
			net_if_ipv6_addr_update_lifetime(
    d8fa:	f8d5 1002 	ldr.w	r1, [r5, #2]
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
    d8fe:	4650      	mov	r0, sl
    d900:	f7fe fbbc 	bl	c07c <net_if_ipv6_addr_update_lifetime>
	ifaddr->is_infinite = is_infinite;
    d904:	f89a 3047 	ldrb.w	r3, [sl, #71]	; 0x47
    d908:	f36f 0300 	bfc	r3, #0, #1
    d90c:	e7b3      	b.n	d876 <handle_ra_input+0x336>
	if (ifaddr->lifetime.timer_timeout == 0) {
    d90e:	69c0      	ldr	r0, [r0, #28]
    d910:	b1c0      	cbz	r0, d944 <handle_ra_input+0x404>
	remaining = (u64_t)ifaddr->lifetime.timer_timeout +
    d912:	4a23      	ldr	r2, [pc, #140]	; (d9a0 <handle_ra_input+0x460>)
    d914:	f8da 3020 	ldr.w	r3, [sl, #32]
    d918:	4680      	mov	r8, r0
    d91a:	ea4f 79e0 	mov.w	r9, r0, asr #31
    d91e:	fbc2 8903 	smlal	r8, r9, r2, r3
	return (u32_t)k_uptime_get();
    d922:	f009 fb51 	bl	16fc8 <k_uptime_get>
	return (u32_t)abs((s32_t)time1 - (s32_t)time2);
    d926:	f8da 3018 	ldr.w	r3, [sl, #24]
    d92a:	1ac0      	subs	r0, r0, r3
    d92c:	f7f4 fd14 	bl	2358 <abs>
	return (u32_t)(remaining / K_MSEC(1000));
    d930:	ebb8 0000 	subs.w	r0, r8, r0
    d934:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d938:	f04f 0300 	mov.w	r3, #0
    d93c:	f169 0100 	sbc.w	r1, r9, #0
    d940:	f7f3 f802 	bl	948 <__aeabi_uldivmod>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
    d944:	4558      	cmp	r0, fp
    d946:	d3d6      	bcc.n	d8f6 <handle_ra_input+0x3b6>
    d948:	f009 fa82 	bl	16e50 <z_arch_is_user_context>
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
    d94c:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
    d950:	e7d5      	b.n	d8fe <handle_ra_input+0x3be>
		if (prefix_info->valid_lifetime ==
    d952:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
	return pkt->iface;
    d956:	6a60      	ldr	r0, [r4, #36]	; 0x24
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
    d958:	bf0c      	ite	eq
    d95a:	2300      	moveq	r3, #0
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
    d95c:	465b      	movne	r3, fp
    d95e:	2201      	movs	r2, #1
    d960:	a90c      	add	r1, sp, #48	; 0x30
    d962:	f7fe fbdd 	bl	c120 <net_if_ipv6_addr_add>
    d966:	e653      	b.n	d610 <handle_ra_input+0xd0>
    d968:	f009 fa72 	bl	16e50 <z_arch_is_user_context>
			if (net_pkt_skip(pkt, nd_opt_hdr->len * 8U - 2)) {
    d96c:	7869      	ldrb	r1, [r5, #1]
    d96e:	f06f 0301 	mvn.w	r3, #1
    d972:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    d976:	4620      	mov	r0, r4
    d978:	f008 fd38 	bl	163ec <net_pkt_skip>
    d97c:	2800      	cmp	r0, #0
    d97e:	f43f ae47 	beq.w	d610 <handle_ra_input+0xd0>
    d982:	e5f6      	b.n	d572 <handle_ra_input+0x32>
			if (nbr) {
    d984:	b11e      	cbz	r6, d98e <handle_ra_input+0x44e>
				net_ipv6_nbr_data(nbr)->is_router = true;
    d986:	68f2      	ldr	r2, [r6, #12]
    d988:	2001      	movs	r0, #1
    d98a:	f882 0035 	strb.w	r0, [r2, #53]	; 0x35
			net_if_ipv6_router_update_lifetime(
    d98e:	4618      	mov	r0, r3
    d990:	f008 fa5c 	bl	15e4c <net_if_ipv6_router_update_lifetime>
    d994:	e653      	b.n	d63e <handle_ra_input+0xfe>
		net_if_ipv6_router_add(net_pkt_iface(pkt),
    d996:	4629      	mov	r1, r5
    d998:	6a60      	ldr	r0, [r4, #36]	; 0x24
    d99a:	f7fe feab 	bl	c6f4 <net_if_ipv6_router_add>
    d99e:	e64e      	b.n	d63e <handle_ra_input+0xfe>
    d9a0:	7fffff9b 	.word	0x7fffff9b

0000d9a4 <ipv6_nd_reachable_timeout>:
{
    d9a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	s64_t current = k_uptime_get();
    d9a8:	f009 fb0e 	bl	16fc8 <k_uptime_get>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
    d9ac:	2500      	movs	r5, #0
    d9ae:	4c3f      	ldr	r4, [pc, #252]	; (daac <ipv6_nd_reachable_timeout+0x108>)
	s64_t current = k_uptime_get();
    d9b0:	4607      	mov	r7, r0
    d9b2:	4688      	mov	r8, r1
				ret = net_ipv6_send_ns(nbr->iface, NULL, NULL,
    d9b4:	462e      	mov	r6, r5
		if (!nbr || !nbr->ref) {
    d9b6:	7823      	ldrb	r3, [r4, #0]
    d9b8:	2b00      	cmp	r3, #0
    d9ba:	d043      	beq.n	da44 <ipv6_nd_reachable_timeout+0xa0>
		data = net_ipv6_nbr_data(nbr);
    d9bc:	f8d4 900c 	ldr.w	r9, [r4, #12]
		if (!data) {
    d9c0:	f1b9 0f00 	cmp.w	r9, #0
    d9c4:	d03e      	beq.n	da44 <ipv6_nd_reachable_timeout+0xa0>
		if (!data->reachable) {
    d9c6:	e9d9 2306 	ldrd	r2, r3, [r9, #24]
    d9ca:	ea52 0103 	orrs.w	r1, r2, r3
    d9ce:	d039      	beq.n	da44 <ipv6_nd_reachable_timeout+0xa0>
		remaining = data->reachable + data->reachable_timeout - current;
    d9d0:	f8d9 0020 	ldr.w	r0, [r9, #32]
    d9d4:	ebb2 0a07 	subs.w	sl, r2, r7
    d9d8:	eb63 0b08 	sbc.w	fp, r3, r8
    d9dc:	eb1a 0200 	adds.w	r2, sl, r0
    d9e0:	eb4b 73e0 	adc.w	r3, fp, r0, asr #31
		if (remaining > 0) {
    d9e4:	2a01      	cmp	r2, #1
    d9e6:	f173 0100 	sbcs.w	r1, r3, #0
    d9ea:	db03      	blt.n	d9f4 <ipv6_nd_reachable_timeout+0x50>
			ipv6_nd_restart_reachable_timer(NULL, remaining);
    d9ec:	2000      	movs	r0, #0
				ipv6_nd_restart_reachable_timer(nbr,
    d9ee:	f7ff fbc3 	bl	d178 <ipv6_nd_restart_reachable_timer>
    d9f2:	e027      	b.n	da44 <ipv6_nd_reachable_timeout+0xa0>
		data->reachable = 0;
    d9f4:	2300      	movs	r3, #0
    d9f6:	2200      	movs	r2, #0
    d9f8:	e9c9 2306 	strd	r2, r3, [r9, #24]
		switch (data->state) {
    d9fc:	f899 3030 	ldrb.w	r3, [r9, #48]	; 0x30
    da00:	2b04      	cmp	r3, #4
    da02:	d81f      	bhi.n	da44 <ipv6_nd_reachable_timeout+0xa0>
    da04:	e8df f003 	tbb	[pc, r3]
    da08:	2f2a2603 	.word	0x2f2a2603
    da0c:	36          	.byte	0x36
    da0d:	00          	.byte	0x00
			if (data->ns_count >= MAX_MULTICAST_SOLICIT) {
    da0e:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
    da12:	2b02      	cmp	r3, #2
    da14:	f109 0104 	add.w	r1, r9, #4
    da18:	d903      	bls.n	da22 <ipv6_nd_reachable_timeout+0x7e>
				net_ipv6_nbr_rm(nbr->iface, &data->addr);
    da1a:	68a0      	ldr	r0, [r4, #8]
    da1c:	f009 fae4 	bl	16fe8 <net_ipv6_nbr_rm>
    da20:	e010      	b.n	da44 <ipv6_nd_reachable_timeout+0xa0>
				data->ns_count++;
    da22:	3301      	adds	r3, #1
    da24:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
    da28:	f009 fa12 	bl	16e50 <z_arch_is_user_context>
				ret = net_ipv6_send_ns(nbr->iface, NULL, NULL,
    da2c:	2300      	movs	r3, #0
    da2e:	e9cd 1600 	strd	r1, r6, [sp]
    da32:	461a      	mov	r2, r3
    da34:	4619      	mov	r1, r3
    da36:	68a0      	ldr	r0, [r4, #8]
    da38:	f7ff fc76 	bl	d328 <net_ipv6_send_ns>
				if (ret < 0) {
    da3c:	2800      	cmp	r0, #0
    da3e:	da01      	bge.n	da44 <ipv6_nd_reachable_timeout+0xa0>
    da40:	f009 fa06 	bl	16e50 <z_arch_is_user_context>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
    da44:	3501      	adds	r5, #1
    da46:	2d08      	cmp	r5, #8
    da48:	f104 0454 	add.w	r4, r4, #84	; 0x54
    da4c:	d1b3      	bne.n	d9b6 <ipv6_nd_reachable_timeout+0x12>
}
    da4e:	b003      	add	sp, #12
    da50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			data->state = NET_IPV6_NBR_STATE_STALE;
    da54:	2302      	movs	r3, #2
    da56:	f889 3030 	strb.w	r3, [r9, #48]	; 0x30
    da5a:	e7f1      	b.n	da40 <ipv6_nd_reachable_timeout+0x9c>
    da5c:	f009 f9f8 	bl	16e50 <z_arch_is_user_context>
			net_ipv6_nbr_rm(nbr->iface, &data->addr);
    da60:	f109 0104 	add.w	r1, r9, #4
    da64:	e7d9      	b.n	da1a <ipv6_nd_reachable_timeout+0x76>
			data->state = NET_IPV6_NBR_STATE_PROBE;
    da66:	2304      	movs	r3, #4
    da68:	f889 3030 	strb.w	r3, [r9, #48]	; 0x30
			data->ns_count = 0U;
    da6c:	f889 6034 	strb.w	r6, [r9, #52]	; 0x34
    da70:	f009 f9ee 	bl	16e50 <z_arch_is_user_context>
			if (data->ns_count >= MAX_UNICAST_SOLICIT) {
    da74:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
    da78:	2b02      	cmp	r3, #2
    da7a:	f109 0104 	add.w	r1, r9, #4
    da7e:	d8cc      	bhi.n	da1a <ipv6_nd_reachable_timeout+0x76>
				data->ns_count++;
    da80:	3301      	adds	r3, #1
    da82:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
    da86:	f009 f9e3 	bl	16e50 <z_arch_is_user_context>
				ret = net_ipv6_send_ns(nbr->iface, NULL, NULL,
    da8a:	2300      	movs	r3, #0
    da8c:	e9cd 1600 	strd	r1, r6, [sp]
    da90:	461a      	mov	r2, r3
    da92:	4619      	mov	r1, r3
    da94:	68a0      	ldr	r0, [r4, #8]
    da96:	f7ff fc47 	bl	d328 <net_ipv6_send_ns>
				if (ret < 0) {
    da9a:	2800      	cmp	r0, #0
    da9c:	da01      	bge.n	daa2 <ipv6_nd_reachable_timeout+0xfe>
    da9e:	f009 f9d7 	bl	16e50 <z_arch_is_user_context>
				ipv6_nd_restart_reachable_timer(nbr,
    daa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    daa6:	2300      	movs	r3, #0
    daa8:	4620      	mov	r0, r4
    daaa:	e7a0      	b.n	d9ee <ipv6_nd_reachable_timeout+0x4a>
    daac:	2000c6f0 	.word	0x2000c6f0

0000dab0 <net_ipv6_nbr_init>:
	.handler = handle_ra_input,
};
#endif /* CONFIG_NET_IPV6_ND */

void net_ipv6_nbr_init(void)
{
    dab0:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
#if defined(CONFIG_NET_IPV6_NBR_CACHE)
	net_icmpv6_register_handler(&ns_input_handler);
    dab4:	4811      	ldr	r0, [pc, #68]	; (dafc <net_ipv6_nbr_init+0x4c>)
    dab6:	f7ff f887 	bl	cbc8 <net_icmpv6_register_handler>
	net_icmpv6_register_handler(&na_input_handler);
    daba:	4811      	ldr	r0, [pc, #68]	; (db00 <net_ipv6_nbr_init+0x50>)
    dabc:	f7ff f884 	bl	cbc8 <net_icmpv6_register_handler>
	k_delayed_work_init(&ipv6_ns_reply_timer, ipv6_ns_reply_timeout);
    dac0:	4910      	ldr	r1, [pc, #64]	; (db04 <net_ipv6_nbr_init+0x54>)
    dac2:	4811      	ldr	r0, [pc, #68]	; (db08 <net_ipv6_nbr_init+0x58>)
    dac4:	f00a ff4d 	bl	18962 <k_delayed_work_init>
#endif
#if defined(CONFIG_NET_IPV6_ND)
	net_icmpv6_register_handler(&ra_input_handler);
    dac8:	4810      	ldr	r0, [pc, #64]	; (db0c <net_ipv6_nbr_init+0x5c>)
    daca:	f7ff f87d 	bl	cbc8 <net_icmpv6_register_handler>
	k_delayed_work_init(&ipv6_nd_reachable_timer,
    dace:	4910      	ldr	r1, [pc, #64]	; (db10 <net_ipv6_nbr_init+0x60>)
    dad0:	4810      	ldr	r0, [pc, #64]	; (db14 <net_ipv6_nbr_init+0x64>)
    dad2:	f00a ff46 	bl	18962 <k_delayed_work_init>
    dad6:	f009 f9bb 	bl	16e50 <z_arch_is_user_context>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    dada:	b138      	cbz	r0, daec <net_ipv6_nbr_init+0x3c>
	register u32_t ret __asm__("r0") = arg1;
    dadc:	480e      	ldr	r0, [pc, #56]	; (db18 <net_ipv6_nbr_init+0x68>)
	register u32_t r1 __asm__("r1") = arg2;
    dade:	2101      	movs	r1, #1
	register u32_t r2 __asm__("r2") = arg3;
    dae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	register u32_t r6 __asm__("r6") = call_id;
    dae4:	265b      	movs	r6, #91	; 0x5b
	__asm__ volatile("svc %[svid]\n"
    dae6:	df03      	svc	3
			    ipv6_nd_reachable_timeout);
	k_sem_init(&nbr_lock, 1, UINT_MAX);
#endif
}
    dae8:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
    daec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    daf0:	2101      	movs	r1, #1
    daf2:	4809      	ldr	r0, [pc, #36]	; (db18 <net_ipv6_nbr_init+0x68>)
    daf4:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
    daf8:	f00a be3a 	b.w	18770 <z_impl_k_sem_init>
    dafc:	2000c990 	.word	0x2000c990
    db00:	2000c6d8 	.word	0x2000c6d8
    db04:	0000d1d1 	.word	0x0000d1d1
    db08:	200044b0 	.word	0x200044b0
    db0c:	2000c99c 	.word	0x2000c99c
    db10:	0000d9a5 	.word	0x0000d9a5
    db14:	20004490 	.word	0x20004490
    db18:	200044d0 	.word	0x200044d0

0000db1c <net_ipv6_mld_init>:
	.handler = handle_mld_query,
};

void net_ipv6_mld_init(void)
{
	net_icmpv6_register_handler(&mld_query_input_handler);
    db1c:	4801      	ldr	r0, [pc, #4]	; (db24 <net_ipv6_mld_init+0x8>)
    db1e:	f7ff b853 	b.w	cbc8 <net_icmpv6_register_handler>
    db22:	bf00      	nop
    db24:	2000c9a8 	.word	0x2000c9a8

0000db28 <sys_slist_find_and_remove.constprop.11>:
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    db28:	4a0d      	ldr	r2, [pc, #52]	; (db60 <sys_slist_find_and_remove.constprop.11+0x38>)
    db2a:	6813      	ldr	r3, [r2, #0]
    db2c:	2100      	movs	r1, #0
    db2e:	b90b      	cbnz	r3, db34 <sys_slist_find_and_remove.constprop.11+0xc>
    db30:	4618      	mov	r0, r3
    db32:	4770      	bx	lr
    db34:	4283      	cmp	r3, r0
    db36:	d110      	bne.n	db5a <sys_slist_find_and_remove.constprop.11+0x32>
Z_GENLIST_REMOVE(slist, snode)
    db38:	6803      	ldr	r3, [r0, #0]
    db3a:	b941      	cbnz	r1, db4e <sys_slist_find_and_remove.constprop.11+0x26>
    db3c:	6851      	ldr	r1, [r2, #4]
	list->head = node;
    db3e:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    db40:	4288      	cmp	r0, r1
    db42:	d100      	bne.n	db46 <sys_slist_find_and_remove.constprop.11+0x1e>
	list->tail = node;
    db44:	6053      	str	r3, [r2, #4]
	parent->next = child;
    db46:	2300      	movs	r3, #0
    db48:	6003      	str	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    db4a:	2001      	movs	r0, #1
    db4c:	4770      	bx	lr
	parent->next = child;
    db4e:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    db50:	6853      	ldr	r3, [r2, #4]
    db52:	4298      	cmp	r0, r3
	list->tail = node;
    db54:	bf08      	it	eq
    db56:	6051      	streq	r1, [r2, #4]
    db58:	e7f5      	b.n	db46 <sys_slist_find_and_remove.constprop.11+0x1e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    db5a:	4619      	mov	r1, r3
    db5c:	681b      	ldr	r3, [r3, #0]
    db5e:	e7e6      	b.n	db2e <sys_slist_find_and_remove.constprop.11+0x6>
    db60:	200044ec 	.word	0x200044ec

0000db64 <net_route_get_nbr>:
{
	return (struct net_route_entry *)nbr->data;
}

struct net_nbr *net_route_get_nbr(struct net_route_entry *route)
{
    db64:	b510      	push	{r4, lr}
    db66:	4a09      	ldr	r2, [pc, #36]	; (db8c <net_route_get_nbr+0x28>)
	int i;

	NET_ASSERT(route);

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
    db68:	2300      	movs	r3, #0
    db6a:	4611      	mov	r1, r2
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref) {
    db6c:	7814      	ldrb	r4, [r2, #0]
    db6e:	b114      	cbz	r4, db76 <net_route_get_nbr+0x12>
			continue;
		}

		if (nbr->data == (u8_t *)route) {
    db70:	68d4      	ldr	r4, [r2, #12]
    db72:	4284      	cmp	r4, r0
    db74:	d006      	beq.n	db84 <net_route_get_nbr+0x20>
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
    db76:	3301      	adds	r3, #1
    db78:	2b08      	cmp	r3, #8
    db7a:	f102 0238 	add.w	r2, r2, #56	; 0x38
    db7e:	d1f5      	bne.n	db6c <net_route_get_nbr+0x8>

			return nbr;
		}
	}

	return NULL;
    db80:	2000      	movs	r0, #0
}
    db82:	bd10      	pop	{r4, pc}
	return &net_route_entries_pool[idx].nbr;
    db84:	2038      	movs	r0, #56	; 0x38
    db86:	fb00 1003 	mla	r0, r0, r3, r1
    db8a:	e7fa      	b.n	db82 <net_route_get_nbr+0x1e>
    db8c:	2000c9b4 	.word	0x2000c9b4

0000db90 <net_route_lookup>:
	sys_slist_prepend(&routes, &route->node);
}

struct net_route_entry *net_route_lookup(struct net_if *iface,
					 struct in6_addr *dst)
{
    db90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct net_route_entry *route, *found = NULL;
	u8_t longest_match = 0U;
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
    db94:	2700      	movs	r7, #0
    db96:	4e27      	ldr	r6, [pc, #156]	; (dc34 <net_route_lookup+0xa4>)
{
    db98:	9000      	str	r0, [sp, #0]
    db9a:	460b      	mov	r3, r1
	u8_t longest_match = 0U;
    db9c:	46b9      	mov	r9, r7
	struct net_route_entry *route, *found = NULL;
    db9e:	463d      	mov	r5, r7
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref) {
    dba0:	7832      	ldrb	r2, [r6, #0]
    dba2:	b382      	cbz	r2, dc06 <net_route_lookup+0x76>
			continue;
		}

		if (iface && nbr->iface != iface) {
    dba4:	9a00      	ldr	r2, [sp, #0]
    dba6:	b11a      	cbz	r2, dbb0 <net_route_lookup+0x20>
    dba8:	68b2      	ldr	r2, [r6, #8]
    dbaa:	9900      	ldr	r1, [sp, #0]
    dbac:	428a      	cmp	r2, r1
    dbae:	d12a      	bne.n	dc06 <net_route_lookup+0x76>
			continue;
		}

		route = net_route_data(nbr);
    dbb0:	f8d6 800c 	ldr.w	r8, [r6, #12]

		if (route->prefix_len >= longest_match &&
    dbb4:	f898 4020 	ldrb.w	r4, [r8, #32]
    dbb8:	454c      	cmp	r4, r9
    dbba:	d324      	bcc.n	dc06 <net_route_lookup+0x76>
	if (length > 128) {
    dbbc:	2c80      	cmp	r4, #128	; 0x80
    dbbe:	d822      	bhi.n	dc06 <net_route_lookup+0x76>
		    net_ipv6_is_prefix((u8_t *)dst,
				       (u8_t *)&route->addr,
    dbc0:	f108 0b10 	add.w	fp, r8, #16
	if (memcmp(addr1, addr2, bytes)) {
    dbc4:	ea4f 0ad4 	mov.w	sl, r4, lsr #3
    dbc8:	4618      	mov	r0, r3
    dbca:	4652      	mov	r2, sl
    dbcc:	4659      	mov	r1, fp
    dbce:	9301      	str	r3, [sp, #4]
    dbd0:	f7f4 fbc6 	bl	2360 <memcmp>
    dbd4:	9b01      	ldr	r3, [sp, #4]
    dbd6:	b9b0      	cbnz	r0, dc06 <net_route_lookup+0x76>
	u8_t bits = 128 - length;
    dbd8:	f1c4 0480 	rsb	r4, r4, #128	; 0x80
	if (!remain) {
    dbdc:	f014 0407 	ands.w	r4, r4, #7
    dbe0:	d00e      	beq.n	dc00 <net_route_lookup+0x70>
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
    dbe2:	f81b 200a 	ldrb.w	r2, [fp, sl]
    dbe6:	f813 100a 	ldrb.w	r1, [r3, sl]
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
    dbea:	20ff      	movs	r0, #255	; 0xff
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
    dbec:	4051      	eors	r1, r2
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
    dbee:	f1c4 0208 	rsb	r2, r4, #8
    dbf2:	fa00 f202 	lsl.w	r2, r0, r2
    dbf6:	4042      	eors	r2, r0
    dbf8:	fa02 f404 	lsl.w	r4, r2, r4
		if (route->prefix_len >= longest_match &&
    dbfc:	4221      	tst	r1, r4
    dbfe:	d102      	bne.n	dc06 <net_route_lookup+0x76>
				       route->prefix_len)) {
			found = route;
			longest_match = route->prefix_len;
    dc00:	f898 9020 	ldrb.w	r9, [r8, #32]
    dc04:	4645      	mov	r5, r8
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
    dc06:	3701      	adds	r7, #1
    dc08:	2f08      	cmp	r7, #8
    dc0a:	d004      	beq.n	dc16 <net_route_lookup+0x86>
    dc0c:	f019 0f80 	tst.w	r9, #128	; 0x80
    dc10:	f106 0638 	add.w	r6, r6, #56	; 0x38
    dc14:	d0c4      	beq.n	dba0 <net_route_lookup+0x10>
		}
	}

	if (found) {
    dc16:	b14d      	cbz	r5, dc2c <net_route_lookup+0x9c>
	sys_slist_find_and_remove(&routes, &route->node);
    dc18:	4628      	mov	r0, r5
    dc1a:	f7ff ff85 	bl	db28 <sys_slist_find_and_remove.constprop.11>
Z_GENLIST_PREPEND(slist, snode)
    dc1e:	4b06      	ldr	r3, [pc, #24]	; (dc38 <net_route_lookup+0xa8>)
    dc20:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
    dc22:	602a      	str	r2, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
    dc24:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    dc26:	601d      	str	r5, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    dc28:	b902      	cbnz	r2, dc2c <net_route_lookup+0x9c>
	list->tail = node;
    dc2a:	605d      	str	r5, [r3, #4]

		update_route_access(found);
	}

	return found;
}
    dc2c:	4628      	mov	r0, r5
    dc2e:	b003      	add	sp, #12
    dc30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dc34:	2000c9b4 	.word	0x2000c9b4
    dc38:	200044ec 	.word	0x200044ec

0000dc3c <net_route_del_by_nexthop>:

	return 0;
}

int net_route_del_by_nexthop(struct net_if *iface, struct in6_addr *nexthop)
{
    dc3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i, ret;

	NET_ASSERT(iface);
	NET_ASSERT(nexthop);

	nbr_nexthop = net_ipv6_nbr_lookup(iface, nexthop);
    dc40:	f009 f9e2 	bl	17008 <net_ipv6_nbr_lookup>
    dc44:	4d0e      	ldr	r5, [pc, #56]	; (dc80 <net_route_del_by_nexthop+0x44>)
	int count = 0, status = 0;
    dc46:	2600      	movs	r6, #0
	nbr_nexthop = net_ipv6_nbr_lookup(iface, nexthop);
    dc48:	4680      	mov	r8, r0

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
    dc4a:	f505 77e0 	add.w	r7, r5, #448	; 0x1c0
	int count = 0, status = 0;
    dc4e:	4634      	mov	r4, r6
		struct net_nbr *nbr = get_nbr(i);
		struct net_route_entry *route = net_route_data(nbr);
    dc50:	68e8      	ldr	r0, [r5, #12]

		if (!route) {
    dc52:	b140      	cbz	r0, dc66 <net_route_del_by_nexthop+0x2a>
			continue;
		}

		SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route,
    dc54:	6843      	ldr	r3, [r0, #4]
    dc56:	b133      	cbz	r3, dc66 <net_route_del_by_nexthop+0x2a>
					     node) {
			if (nexthop_route->nbr == nbr_nexthop) {
    dc58:	685a      	ldr	r2, [r3, #4]
    dc5a:	4542      	cmp	r2, r8
    dc5c:	d10c      	bne.n	dc78 <net_route_del_by_nexthop+0x3c>
				/* This route contains this nexthop */
				ret = net_route_del(route);
    dc5e:	f00a f85d 	bl	17d1c <net_route_del>
				if (!ret) {
    dc62:	b958      	cbnz	r0, dc7c <net_route_del_by_nexthop+0x40>
					count++;
    dc64:	3401      	adds	r4, #1
    dc66:	3538      	adds	r5, #56	; 0x38
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
    dc68:	42af      	cmp	r7, r5
    dc6a:	d1f1      	bne.n	dc50 <net_route_del_by_nexthop+0x14>
				break;
			}
		}
	}

	if (count) {
    dc6c:	b90c      	cbnz	r4, dc72 <net_route_del_by_nexthop+0x36>
		return count;
	} else if (status < 0) {
    dc6e:	ea06 74e6 	and.w	r4, r6, r6, asr #31
		return status;
	}

	return 0;
}
    dc72:	4620      	mov	r0, r4
    dc74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    dc78:	681b      	ldr	r3, [r3, #0]
	return node->next;
    dc7a:	e7ec      	b.n	dc56 <net_route_del_by_nexthop+0x1a>
    dc7c:	4606      	mov	r6, r0
    dc7e:	e7f2      	b.n	dc66 <net_route_del_by_nexthop+0x2a>
    dc80:	2000c9b4 	.word	0x2000c9b4

0000dc84 <net_conn_unregister>:

int net_conn_unregister(struct net_conn_handle *handle)
{
	struct net_conn *conn = (struct net_conn *)handle;

	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
    dc84:	4b0d      	ldr	r3, [pc, #52]	; (dcbc <net_conn_unregister+0x38>)
    dc86:	4298      	cmp	r0, r3
{
    dc88:	b510      	push	{r4, lr}
    dc8a:	4604      	mov	r4, r0
	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
    dc8c:	d310      	bcc.n	dcb0 <net_conn_unregister+0x2c>
    dc8e:	f503 7380 	add.w	r3, r3, #256	; 0x100
    dc92:	4298      	cmp	r0, r3
    dc94:	d80c      	bhi.n	dcb0 <net_conn_unregister+0x2c>
		return -EINVAL;
	}

	if (!(conn->flags & NET_CONN_IN_USE)) {
    dc96:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
    dc9a:	07db      	lsls	r3, r3, #31
    dc9c:	d50b      	bpl.n	dcb6 <net_conn_unregister+0x32>
    dc9e:	f00a f8e6 	bl	17e6e <z_arch_is_user_context>
    dca2:	2240      	movs	r2, #64	; 0x40
    dca4:	2100      	movs	r1, #0
    dca6:	4620      	mov	r0, r4
    dca8:	f7f4 fba3 	bl	23f2 <memset>
	NET_DBG("[%zu] connection handler %p removed",
		conn - conns, conn);

	(void)memset(conn, 0, sizeof(*conn));

	return 0;
    dcac:	2000      	movs	r0, #0
}
    dcae:	bd10      	pop	{r4, pc}
		return -EINVAL;
    dcb0:	f06f 0015 	mvn.w	r0, #21
    dcb4:	e7fb      	b.n	dcae <net_conn_unregister+0x2a>
		return -ENOENT;
    dcb6:	f06f 0001 	mvn.w	r0, #1
    dcba:	e7f8      	b.n	dcae <net_conn_unregister+0x2a>
    dcbc:	200044f4 	.word	0x200044f4

0000dcc0 <net_conn_register>:
		      u16_t remote_port,
		      u16_t local_port,
		      net_conn_cb_t cb,
		      void *user_data,
		      struct net_conn_handle **handle)
{
    dcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dcc4:	b089      	sub	sp, #36	; 0x24
    dcc6:	461f      	mov	r7, r3
    dcc8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
    dccc:	9302      	str	r3, [sp, #8]
    dcce:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
    dcd2:	9303      	str	r3, [sp, #12]
    dcd4:	9b02      	ldr	r3, [sp, #8]
    dcd6:	f8df 81d4 	ldr.w	r8, [pc, #468]	; deac <net_conn_register+0x1ec>
    dcda:	9101      	str	r1, [sp, #4]
    dcdc:	fa93 fa93 	rev16.w	sl, r3
    dce0:	fa1f f38a 	uxth.w	r3, sl
    dce4:	9304      	str	r3, [sp, #16]
    dce6:	9b03      	ldr	r3, [sp, #12]
    dce8:	fa93 fb93 	rev16.w	fp, r3
    dcec:	fa1f f38b 	uxth.w	r3, fp
    dcf0:	9305      	str	r3, [sp, #20]
					    &net_sin6(local_addr)->sin6_addr,
    dcf2:	1d3b      	adds	r3, r7, #4
    dcf4:	9306      	str	r3, [sp, #24]
					    &net_sin6(remote_addr)->sin6_addr,
    dcf6:	1d13      	adds	r3, r2, #4
{
    dcf8:	4681      	mov	r9, r0
    dcfa:	4616      	mov	r6, r2
    dcfc:	4644      	mov	r4, r8
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
    dcfe:	2500      	movs	r5, #0
					    &net_sin6(remote_addr)->sin6_addr,
    dd00:	9307      	str	r3, [sp, #28]
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
    dd02:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
    dd06:	07d3      	lsls	r3, r2, #31
    dd08:	d414      	bmi.n	dd34 <net_conn_register+0x74>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
    dd0a:	3501      	adds	r5, #1
    dd0c:	2d04      	cmp	r5, #4
    dd0e:	f104 0440 	add.w	r4, r4, #64	; 0x40
    dd12:	d1f6      	bne.n	dd02 <net_conn_register+0x42>
		NET_ERR("Identical connection handler %p already found.",
			&conns[i]);
		return -EALREADY;
	}

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
    dd14:	2500      	movs	r5, #0
		if (conns[i].flags & NET_CONN_IN_USE) {
    dd16:	f898 403b 	ldrb.w	r4, [r8, #59]	; 0x3b
    dd1a:	f014 0401 	ands.w	r4, r4, #1
    dd1e:	d04a      	beq.n	ddb6 <net_conn_register+0xf6>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
    dd20:	3501      	adds	r5, #1
    dd22:	2d04      	cmp	r5, #4
    dd24:	f108 0840 	add.w	r8, r8, #64	; 0x40
    dd28:	d1f5      	bne.n	dd16 <net_conn_register+0x56>
		}

		return 0;
	}

	return -ENOENT;
    dd2a:	f06f 0001 	mvn.w	r0, #1
}
    dd2e:	b009      	add	sp, #36	; 0x24
    dd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conns[i].proto != proto) {
    dd34:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    dd36:	4549      	cmp	r1, r9
    dd38:	d1e7      	bne.n	dd0a <net_conn_register+0x4a>
		if (conns[i].family != family) {
    dd3a:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
    dd3e:	9b01      	ldr	r3, [sp, #4]
    dd40:	4299      	cmp	r1, r3
    dd42:	d1e2      	bne.n	dd0a <net_conn_register+0x4a>
		if (remote_addr) {
    dd44:	f002 0202 	and.w	r2, r2, #2
    dd48:	b1ae      	cbz	r6, dd76 <net_conn_register+0xb6>
			if (!(conns[i].flags & NET_CONN_REMOTE_ADDR_SET)) {
    dd4a:	2a00      	cmp	r2, #0
    dd4c:	d0dd      	beq.n	dd0a <net_conn_register+0x4a>
			if (remote_addr->sa_family == AF_INET6 &&
    dd4e:	8832      	ldrh	r2, [r6, #0]
    dd50:	2a02      	cmp	r2, #2
    dd52:	d1da      	bne.n	dd0a <net_conn_register+0x4a>
    dd54:	8822      	ldrh	r2, [r4, #0]
    dd56:	2a02      	cmp	r2, #2
    dd58:	d1d7      	bne.n	dd0a <net_conn_register+0x4a>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
    dd5a:	2210      	movs	r2, #16
    dd5c:	1d21      	adds	r1, r4, #4
    dd5e:	9807      	ldr	r0, [sp, #28]
    dd60:	f7f4 fafe 	bl	2360 <memcmp>
				if (!net_ipv6_addr_cmp(
    dd64:	2800      	cmp	r0, #0
    dd66:	d1d0      	bne.n	dd0a <net_conn_register+0x4a>
		if (local_addr) {
    dd68:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
    dd6c:	f002 0204 	and.w	r2, r2, #4
    dd70:	b927      	cbnz	r7, dd7c <net_conn_register+0xbc>
			if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
    dd72:	b19a      	cbz	r2, dd9c <net_conn_register+0xdc>
    dd74:	e7c9      	b.n	dd0a <net_conn_register+0x4a>
			if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
    dd76:	2a00      	cmp	r2, #0
    dd78:	d0f6      	beq.n	dd68 <net_conn_register+0xa8>
    dd7a:	e7c6      	b.n	dd0a <net_conn_register+0x4a>
			if (!(conns[i].flags & NET_CONN_LOCAL_ADDR_SET)) {
    dd7c:	2a00      	cmp	r2, #0
    dd7e:	d0c4      	beq.n	dd0a <net_conn_register+0x4a>
			if (local_addr->sa_family == AF_INET6 &&
    dd80:	883a      	ldrh	r2, [r7, #0]
    dd82:	2a02      	cmp	r2, #2
    dd84:	d1c1      	bne.n	dd0a <net_conn_register+0x4a>
    dd86:	8b22      	ldrh	r2, [r4, #24]
    dd88:	2a02      	cmp	r2, #2
    dd8a:	d1be      	bne.n	dd0a <net_conn_register+0x4a>
    dd8c:	2210      	movs	r2, #16
    dd8e:	f104 011c 	add.w	r1, r4, #28
    dd92:	9806      	ldr	r0, [sp, #24]
    dd94:	f7f4 fae4 	bl	2360 <memcmp>
				if (!net_ipv6_addr_cmp(
    dd98:	2800      	cmp	r0, #0
    dd9a:	d1b6      	bne.n	dd0a <net_conn_register+0x4a>
		if (net_sin(&conns[i].remote_addr)->sin_port !=
    dd9c:	8862      	ldrh	r2, [r4, #2]
    dd9e:	9b04      	ldr	r3, [sp, #16]
    dda0:	429a      	cmp	r2, r3
    dda2:	d1b2      	bne.n	dd0a <net_conn_register+0x4a>
		if (net_sin(&conns[i].local_addr)->sin_port !=
    dda4:	8b62      	ldrh	r2, [r4, #26]
    dda6:	9b05      	ldr	r3, [sp, #20]
    dda8:	429a      	cmp	r2, r3
    ddaa:	d1ae      	bne.n	dd0a <net_conn_register+0x4a>
    ddac:	f00a f85f 	bl	17e6e <z_arch_is_user_context>
		return -EALREADY;
    ddb0:	f06f 0077 	mvn.w	r0, #119	; 0x77
    ddb4:	e7bb      	b.n	dd2e <net_conn_register+0x6e>
		if (remote_addr) {
    ddb6:	b306      	cbz	r6, ddfa <net_conn_register+0x13a>
			if (remote_addr->sa_family == AF_INET6) {
    ddb8:	8833      	ldrh	r3, [r6, #0]
    ddba:	2b02      	cmp	r3, #2
    ddbc:	d16d      	bne.n	de9a <net_conn_register+0x1da>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    ddbe:	4a3b      	ldr	r2, [pc, #236]	; (deac <net_conn_register+0x1ec>)
    ddc0:	4633      	mov	r3, r6
    ddc2:	eb02 1285 	add.w	r2, r2, r5, lsl #6
    ddc6:	f106 0c18 	add.w	ip, r6, #24
    ddca:	6818      	ldr	r0, [r3, #0]
    ddcc:	6859      	ldr	r1, [r3, #4]
    ddce:	4614      	mov	r4, r2
    ddd0:	c403      	stmia	r4!, {r0, r1}
    ddd2:	3308      	adds	r3, #8
    ddd4:	4563      	cmp	r3, ip
    ddd6:	4622      	mov	r2, r4
    ddd8:	d1f7      	bne.n	ddca <net_conn_register+0x10a>
				if (net_ipv6_is_addr_unspecified(
    ddda:	1d30      	adds	r0, r6, #4
    dddc:	f00a f851 	bl	17e82 <net_ipv6_is_addr_unspecified>
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
    dde0:	4b32      	ldr	r3, [pc, #200]	; (deac <net_conn_register+0x1ec>)
    dde2:	eb03 1385 	add.w	r3, r3, r5, lsl #6
					rank |= NET_RANK_REMOTE_SPEC_ADDR;
    dde6:	2800      	cmp	r0, #0
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
    dde8:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
    ddec:	f042 0202 	orr.w	r2, r2, #2
					rank |= NET_RANK_REMOTE_SPEC_ADDR;
    ddf0:	bf14      	ite	ne
    ddf2:	2408      	movne	r4, #8
    ddf4:	2420      	moveq	r4, #32
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
    ddf6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		if (local_addr) {
    ddfa:	b33f      	cbz	r7, de4c <net_conn_register+0x18c>
			if (local_addr->sa_family == AF_INET6) {
    ddfc:	883b      	ldrh	r3, [r7, #0]
    ddfe:	2b02      	cmp	r3, #2
    de00:	d14b      	bne.n	de9a <net_conn_register+0x1da>
				memcpy(&conns[i].local_addr, local_addr,
    de02:	4b2a      	ldr	r3, [pc, #168]	; (deac <net_conn_register+0x1ec>)
    de04:	eb03 1385 	add.w	r3, r3, r5, lsl #6
    de08:	463a      	mov	r2, r7
    de0a:	3318      	adds	r3, #24
    de0c:	f107 0e18 	add.w	lr, r7, #24
    de10:	6810      	ldr	r0, [r2, #0]
    de12:	6851      	ldr	r1, [r2, #4]
    de14:	469c      	mov	ip, r3
    de16:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    de1a:	3208      	adds	r2, #8
    de1c:	4572      	cmp	r2, lr
    de1e:	4663      	mov	r3, ip
    de20:	d1f6      	bne.n	de10 <net_conn_register+0x150>
				if (net_ipv6_is_addr_unspecified(
    de22:	1d38      	adds	r0, r7, #4
    de24:	f00a f82d 	bl	17e82 <net_ipv6_is_addr_unspecified>
    de28:	2800      	cmp	r0, #0
    de2a:	d03b      	beq.n	dea4 <net_conn_register+0x1e4>
					rank |= NET_RANK_LOCAL_UNSPEC_ADDR;
    de2c:	f044 0404 	orr.w	r4, r4, #4
			conns[i].flags |= NET_CONN_LOCAL_ADDR_SET;
    de30:	4b1e      	ldr	r3, [pc, #120]	; (deac <net_conn_register+0x1ec>)
    de32:	eb03 1385 	add.w	r3, r3, r5, lsl #6
    de36:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
    de3a:	f042 0204 	orr.w	r2, r2, #4
    de3e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		if (remote_addr && local_addr) {
    de42:	b11e      	cbz	r6, de4c <net_conn_register+0x18c>
			if (remote_addr->sa_family != local_addr->sa_family) {
    de44:	8832      	ldrh	r2, [r6, #0]
    de46:	883b      	ldrh	r3, [r7, #0]
    de48:	429a      	cmp	r2, r3
    de4a:	d126      	bne.n	de9a <net_conn_register+0x1da>
		if (remote_port) {
    de4c:	9a02      	ldr	r2, [sp, #8]
    de4e:	4b17      	ldr	r3, [pc, #92]	; (deac <net_conn_register+0x1ec>)
    de50:	01ad      	lsls	r5, r5, #6
    de52:	b122      	cbz	r2, de5e <net_conn_register+0x19e>
			net_sin(&conns[i].remote_addr)->sin_port =
    de54:	195a      	adds	r2, r3, r5
			rank |= NET_RANK_REMOTE_PORT;
    de56:	f044 0402 	orr.w	r4, r4, #2
			net_sin(&conns[i].remote_addr)->sin_port =
    de5a:	f8a2 a002 	strh.w	sl, [r2, #2]
		if (local_port) {
    de5e:	9a03      	ldr	r2, [sp, #12]
    de60:	b122      	cbz	r2, de6c <net_conn_register+0x1ac>
			net_sin(&conns[i].local_addr)->sin_port =
    de62:	195a      	adds	r2, r3, r5
			rank |= NET_RANK_LOCAL_PORT;
    de64:	f044 0401 	orr.w	r4, r4, #1
			net_sin(&conns[i].local_addr)->sin_port =
    de68:	f8a2 b01a 	strh.w	fp, [r2, #26]
		conns[i].flags |= NET_CONN_IN_USE;
    de6c:	441d      	add	r5, r3
    de6e:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
		conns[i].rank = rank;
    de72:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
		conns[i].flags |= NET_CONN_IN_USE;
    de76:	f043 0301 	orr.w	r3, r3, #1
    de7a:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
		conns[i].cb = cb;
    de7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    de80:	632b      	str	r3, [r5, #48]	; 0x30
		conns[i].user_data = user_data;
    de82:	9b15      	ldr	r3, [sp, #84]	; 0x54
    de84:	636b      	str	r3, [r5, #52]	; 0x34
		conns[i].family = family;
    de86:	9b01      	ldr	r3, [sp, #4]
    de88:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
		if (handle) {
    de8c:	9b16      	ldr	r3, [sp, #88]	; 0x58
		conns[i].proto = proto;
    de8e:	f8a5 9038 	strh.w	r9, [r5, #56]	; 0x38
		if (handle) {
    de92:	b103      	cbz	r3, de96 <net_conn_register+0x1d6>
			*handle = (struct net_conn_handle *)&conns[i];
    de94:	601d      	str	r5, [r3, #0]
		return 0;
    de96:	2000      	movs	r0, #0
    de98:	e749      	b.n	dd2e <net_conn_register+0x6e>
    de9a:	f009 ffe8 	bl	17e6e <z_arch_is_user_context>
				return -EINVAL;
    de9e:	f06f 0015 	mvn.w	r0, #21
    dea2:	e744      	b.n	dd2e <net_conn_register+0x6e>
					rank |= NET_RANK_LOCAL_SPEC_ADDR;
    dea4:	f044 0410 	orr.w	r4, r4, #16
    dea8:	e7c2      	b.n	de30 <net_conn_register+0x170>
    deaa:	bf00      	nop
    deac:	200044f4 	.word	0x200044f4

0000deb0 <net_conn_input>:

enum net_verdict net_conn_input(struct net_pkt *pkt,
				union net_ip_header *ip_hdr,
				u8_t proto,
				union net_proto_header *proto_hdr)
{
    deb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	enum net_verdict verdict;
	u32_t cache_value = 0U;
	s32_t pos;
#endif

	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
    deb4:	2a11      	cmp	r2, #17
{
    deb6:	b087      	sub	sp, #28
    deb8:	4605      	mov	r5, r0
    deba:	460e      	mov	r6, r1
    debc:	469a      	mov	sl, r3
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
    debe:	d15c      	bne.n	df7a <net_conn_input+0xca>
		src_port = proto_hdr->udp->src_port;
    dec0:	681b      	ldr	r3, [r3, #0]
    dec2:	881a      	ldrh	r2, [r3, #0]
    dec4:	9203      	str	r2, [sp, #12]
		dst_port = proto_hdr->udp->dst_port;
    dec6:	885b      	ldrh	r3, [r3, #2]
    dec8:	9304      	str	r3, [sp, #16]
	return pkt->family;
    deca:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
    dece:	f3c3 0342 	ubfx	r3, r3, #1, #3
    ded2:	2b02      	cmp	r3, #2
    ded4:	d10c      	bne.n	def0 <net_conn_input+0x40>
		if (net_ipv6_addr_cmp(&ip_hdr->ipv6->src,
    ded6:	6808      	ldr	r0, [r1, #0]
    ded8:	2210      	movs	r2, #16
    deda:	f100 0118 	add.w	r1, r0, #24
    dede:	3008      	adds	r0, #8
    dee0:	f7f4 fa3e 	bl	2360 <memcmp>
    dee4:	2800      	cmp	r0, #0
    dee6:	d140      	bne.n	df6a <net_conn_input+0xba>
	} else {
		NET_DBG("No suitable protocol handler configured");
		return NET_DROP;
	}

	if (!is_valid_packet(pkt, ip_hdr, src_port, dst_port)) {
    dee8:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
    deec:	4293      	cmp	r3, r2
    deee:	d044      	beq.n	df7a <net_conn_input+0xca>
    def0:	4c41      	ldr	r4, [pc, #260]	; (dff8 <net_conn_input+0x148>)
    def2:	f009 ffbc 	bl	17e6e <z_arch_is_user_context>
	s16_t best_rank = -1;
    def6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff

	NET_DBG("Check %s listener for pkt %p src port %u dst port %u"
		" family %d", net_proto2str(net_pkt_family(pkt), proto), pkt,
		ntohs(src_port), ntohs(dst_port), net_pkt_family(pkt));

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
    defa:	2700      	movs	r7, #0
	int i, best_match = -1;
    defc:	46c8      	mov	r8, r9
    defe:	46a3      	mov	fp, r4
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
    df00:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
    df04:	07d1      	lsls	r1, r2, #31
    df06:	d546      	bpl.n	df96 <net_conn_input+0xe6>
			continue;
		}

		if (conns[i].proto != proto) {
    df08:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    df0a:	2b11      	cmp	r3, #17
    df0c:	d143      	bne.n	df96 <net_conn_input+0xe6>
			continue;
		}

		if (conns[i].family != AF_UNSPEC &&
    df0e:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
    df12:	b129      	cbz	r1, df20 <net_conn_input+0x70>
    df14:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
    df18:	f3c3 0342 	ubfx	r3, r3, #1, #3
    df1c:	428b      	cmp	r3, r1
    df1e:	d13a      	bne.n	df96 <net_conn_input+0xe6>
			continue;
		}

		if (IS_ENABLED(CONFIG_NET_UDP) ||
		    IS_ENABLED(CONFIG_NET_TCP)) {
			if (net_sin(&conns[i].remote_addr)->sin_port) {
    df20:	8863      	ldrh	r3, [r4, #2]
    df22:	b113      	cbz	r3, df2a <net_conn_input+0x7a>
				if (net_sin(&conns[i].remote_addr)->sin_port !=
    df24:	9903      	ldr	r1, [sp, #12]
    df26:	428b      	cmp	r3, r1
    df28:	d135      	bne.n	df96 <net_conn_input+0xe6>
				    src_port) {
					continue;
				}
			}

			if (net_sin(&conns[i].local_addr)->sin_port) {
    df2a:	f104 0318 	add.w	r3, r4, #24
    df2e:	9305      	str	r3, [sp, #20]
    df30:	8b63      	ldrh	r3, [r4, #26]
    df32:	b113      	cbz	r3, df3a <net_conn_input+0x8a>
				if (net_sin(&conns[i].local_addr)->sin_port !=
    df34:	9904      	ldr	r1, [sp, #16]
    df36:	428b      	cmp	r3, r1
    df38:	d12d      	bne.n	df96 <net_conn_input+0xe6>
				    dst_port) {
					continue;
				}
			}

			if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
    df3a:	0792      	lsls	r2, r2, #30
    df3c:	d423      	bmi.n	df86 <net_conn_input+0xd6>
						true)) {
					continue;
				}
			}

			if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
    df3e:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
    df42:	075b      	lsls	r3, r3, #29
    df44:	d506      	bpl.n	df54 <net_conn_input+0xa4>
				if (!check_addr(pkt, ip_hdr,
    df46:	2300      	movs	r3, #0
    df48:	9a05      	ldr	r2, [sp, #20]
    df4a:	4631      	mov	r1, r6
    df4c:	4628      	mov	r0, r5
    df4e:	f009 ffa5 	bl	17e9c <check_addr.isra.4>
    df52:	b300      	cbz	r0, df96 <net_conn_input+0xe6>

			/* If we have an existing best_match, and that one
			 * specifies a remote port, then we've matched to a
			 * LISTENING connection that should not override.
			 */
			if (best_match >= 0 &&
    df54:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    df58:	d134      	bne.n	dfc4 <net_conn_input+0x114>
			    net_sin(&conns[best_match].remote_addr)->sin_port) {
				continue;
			}

			if (best_rank < conns[i].rank) {
    df5a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    df5e:	4599      	cmp	r9, r3
				best_rank = conns[i].rank;
    df60:	bfbc      	itt	lt
    df62:	fa0f f983 	sxthlt.w	r9, r3
    df66:	46b8      	movlt	r8, r7
    df68:	e015      	b.n	df96 <net_conn_input+0xe6>
		    net_ipv6_is_my_addr(&ip_hdr->ipv6->src)) {
    df6a:	6830      	ldr	r0, [r6, #0]
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
    df6c:	2100      	movs	r1, #0
    df6e:	3008      	adds	r0, #8
    df70:	f7fe f84c 	bl	c00c <net_if_ipv6_addr_lookup>
				      &ip_hdr->ipv6->dst) ||
    df74:	2800      	cmp	r0, #0
    df76:	d1b7      	bne.n	dee8 <net_conn_input+0x38>
    df78:	e7ba      	b.n	def0 <net_conn_input+0x40>
    df7a:	f009 ff78 	bl	17e6e <z_arch_is_user_context>
	}

drop:
	net_stats_update_per_proto_drop(pkt_iface, proto);

	return NET_DROP;
    df7e:	2002      	movs	r0, #2
}
    df80:	b007      	add	sp, #28
    df82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (!check_addr(pkt, ip_hdr,
    df86:	2301      	movs	r3, #1
    df88:	4622      	mov	r2, r4
    df8a:	4631      	mov	r1, r6
    df8c:	4628      	mov	r0, r5
    df8e:	f009 ff85 	bl	17e9c <check_addr.isra.4>
    df92:	2800      	cmp	r0, #0
    df94:	d1d3      	bne.n	df3e <net_conn_input+0x8e>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
    df96:	3701      	adds	r7, #1
    df98:	2f04      	cmp	r7, #4
    df9a:	f104 0440 	add.w	r4, r4, #64	; 0x40
    df9e:	d1af      	bne.n	df00 <net_conn_input+0x50>
	if (best_match >= 0) {
    dfa0:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    dfa4:	d014      	beq.n	dfd0 <net_conn_input+0x120>
    dfa6:	f009 ff62 	bl	17e6e <z_arch_is_user_context>
		if (conns[best_match].cb(&conns[best_match], pkt, ip_hdr,
    dfaa:	eb0b 1088 	add.w	r0, fp, r8, lsl #6
    dfae:	4632      	mov	r2, r6
    dfb0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    dfb2:	9300      	str	r3, [sp, #0]
    dfb4:	6b04      	ldr	r4, [r0, #48]	; 0x30
    dfb6:	4653      	mov	r3, sl
    dfb8:	4629      	mov	r1, r5
    dfba:	47a0      	blx	r4
    dfbc:	2802      	cmp	r0, #2
    dfbe:	d0de      	beq.n	df7e <net_conn_input+0xce>
		return NET_OK;
    dfc0:	2000      	movs	r0, #0
    dfc2:	e7dd      	b.n	df80 <net_conn_input+0xd0>
			    net_sin(&conns[best_match].remote_addr)->sin_port) {
    dfc4:	eb0b 1388 	add.w	r3, fp, r8, lsl #6
			if (best_match >= 0 &&
    dfc8:	885b      	ldrh	r3, [r3, #2]
    dfca:	2b00      	cmp	r3, #0
    dfcc:	d0c5      	beq.n	df5a <net_conn_input+0xaa>
    dfce:	e7e2      	b.n	df96 <net_conn_input+0xe6>
    dfd0:	f009 ff4d 	bl	17e6e <z_arch_is_user_context>
    dfd4:	f895 003f 	ldrb.w	r0, [r5, #63]	; 0x3f
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
    dfd8:	f3c0 0442 	ubfx	r4, r0, #1, #3
    dfdc:	2c02      	cmp	r4, #2
    dfde:	d1ce      	bne.n	df7e <net_conn_input+0xce>
	    net_ipv6_is_addr_mcast(&ip_hdr->ipv6->dst)) {
    dfe0:	6833      	ldr	r3, [r6, #0]
	    net_pkt_family(pkt) == AF_INET6 &&
    dfe2:	7e1b      	ldrb	r3, [r3, #24]
    dfe4:	2bff      	cmp	r3, #255	; 0xff
    dfe6:	d0ca      	beq.n	df7e <net_conn_input+0xce>
		net_icmpv6_send_error(pkt, NET_ICMPV6_DST_UNREACH,
    dfe8:	2300      	movs	r3, #0
    dfea:	463a      	mov	r2, r7
    dfec:	2101      	movs	r1, #1
    dfee:	4628      	mov	r0, r5
    dff0:	f008 fd86 	bl	16b00 <net_icmpv6_send_error>
    dff4:	e7c3      	b.n	df7e <net_conn_input+0xce>
    dff6:	bf00      	nop
    dff8:	200044f4 	.word	0x200044f4

0000dffc <nrf_gpio_pin_port_decode.part.8>:
 * @param[inout] Pointer to absolute pin number which is overriden by relative to port pin number.
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
    dffc:	b508      	push	{r3, lr}
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    dffe:	4a03      	ldr	r2, [pc, #12]	; (e00c <nrf_gpio_pin_port_decode.part.8+0x10>)
    e000:	4b03      	ldr	r3, [pc, #12]	; (e010 <nrf_gpio_pin_port_decode.part.8+0x14>)
    e002:	4804      	ldr	r0, [pc, #16]	; (e014 <nrf_gpio_pin_port_decode.part.8+0x18>)
    e004:	f240 11dd 	movw	r1, #477	; 0x1dd
    e008:	f7f2 fcb8 	bl	97c <__assert_func>
    e00c:	0001b9ae 	.word	0x0001b9ae
    e010:	0001b9c7 	.word	0x0001b9c7
    e014:	0001b9da 	.word	0x0001b9da

0000e018 <nrf_gpio_cfg_sense_set>:
    e018:	282f      	cmp	r0, #47	; 0x2f
        sense_config);
}


__STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t pin_number, nrf_gpio_pin_sense_t sense_config)
{
    e01a:	b508      	push	{r3, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    e01c:	d901      	bls.n	e022 <nrf_gpio_cfg_sense_set+0xa>
    e01e:	f7ff ffed 	bl	dffc <nrf_gpio_pin_port_decode.part.8>
    if (*p_pin < P0_PIN_NUM)
    e022:	281f      	cmp	r0, #31
        return NRF_P1;
    e024:	bf8a      	itet	hi
    e026:	4b0a      	ldrhi	r3, [pc, #40]	; (e050 <nrf_gpio_cfg_sense_set+0x38>)
        return NRF_P0;
    e028:	f04f 43a0 	movls.w	r3, #1342177280	; 0x50000000
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
    e02c:	f000 001f 	andhi.w	r0, r0, #31
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
    e030:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    e034:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
    e038:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    e03c:	f8c0 2700 	str.w	r2, [r0, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    e040:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    e044:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    e048:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    e04c:	bd08      	pop	{r3, pc}
    e04e:	bf00      	nop
    e050:	50000300 	.word	0x50000300

0000e054 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
    e054:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    e056:	4b09      	ldr	r3, [pc, #36]	; (e07c <gpio_nrfx_init+0x28>)
    e058:	781a      	ldrb	r2, [r3, #0]
    e05a:	b96a      	cbnz	r2, e078 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    e05c:	2101      	movs	r1, #1
    e05e:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ,
    e060:	2006      	movs	r0, #6
    e062:	2105      	movs	r1, #5
    e064:	f7fc ffc8 	bl	aff8 <z_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ);
    e068:	2006      	movs	r0, #6
    e06a:	f7fc ff93 	bl	af94 <z_arch_irq_enable>
    return ((uint32_t)NRF_GPIOTE + event);
}

__STATIC_INLINE void nrf_gpiote_int_enable(uint32_t mask)
{
    NRF_GPIOTE->INTENSET = mask;
    e06e:	4b04      	ldr	r3, [pc, #16]	; (e080 <gpio_nrfx_init+0x2c>)
    e070:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    e074:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    e078:	2000      	movs	r0, #0
    e07a:	bd08      	pop	{r3, pc}
    e07c:	20005ee7 	.word	0x20005ee7
    e080:	40006000 	.word	0x40006000

0000e084 <gpiote_pin_int_cfg>:
{
    e084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return port->config->config_info;
    e086:	6803      	ldr	r3, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
    e088:	6887      	ldr	r7, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    e08a:	689b      	ldr	r3, [r3, #8]
    e08c:	f001 051f 	and.w	r5, r1, #31
{
    e090:	460e      	mov	r6, r1
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
    e092:	494e      	ldr	r1, [pc, #312]	; (e1cc <gpiote_pin_int_cfg+0x148>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    e094:	791b      	ldrb	r3, [r3, #4]
    e096:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
    e09a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
    e09e:	b2d2      	uxtb	r2, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    e0a0:	2300      	movs	r3, #0
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    e0a2:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    e0a6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    e0aa:	f3c0 2005 	ubfx	r0, r0, #8, #6
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
    e0ae:	4285      	cmp	r5, r0
    e0b0:	d170      	bne.n	e194 <gpiote_pin_int_cfg+0x110>
		    && (intenset & BIT(i))) {
    e0b2:	fa22 f003 	lsr.w	r0, r2, r3
    e0b6:	07c0      	lsls	r0, r0, #31
    e0b8:	d56c      	bpl.n	e194 <gpiote_pin_int_cfg+0x110>
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    e0ba:	009a      	lsls	r2, r3, #2
    e0bc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    e0c0:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    e0c4:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    e0c8:	f020 0001 	bic.w	r0, r0, #1
    e0cc:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(BIT(i));
    e0d0:	2201      	movs	r2, #1
    e0d2:	fa02 f303 	lsl.w	r3, r2, r3
    NRF_GPIOTE->INTENCLR = mask;
    e0d6:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    e0da:	4628      	mov	r0, r5
    e0dc:	2100      	movs	r1, #0
    e0de:	f7ff ff9b 	bl	e018 <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    e0e2:	68b8      	ldr	r0, [r7, #8]
    e0e4:	40f0      	lsrs	r0, r6
    e0e6:	f010 0001 	ands.w	r0, r0, #1
    e0ea:	d051      	beq.n	e190 <gpiote_pin_int_cfg+0x10c>
    e0ec:	68f8      	ldr	r0, [r7, #12]
    e0ee:	40f0      	lsrs	r0, r6
    e0f0:	f010 0001 	ands.w	r0, r0, #1
    e0f4:	d04c      	beq.n	e190 <gpiote_pin_int_cfg+0x10c>
		if (data->trig_edge & BIT(pin)) {
    e0f6:	6978      	ldr	r0, [r7, #20]
    e0f8:	40f0      	lsrs	r0, r6
    e0fa:	f010 0401 	ands.w	r4, r0, #1
    e0fe:	d055      	beq.n	e1ac <gpiote_pin_int_cfg+0x128>
			if (data->double_edge & BIT(pin)) {
    e100:	69bb      	ldr	r3, [r7, #24]
    e102:	40f3      	lsrs	r3, r6
    e104:	07db      	lsls	r3, r3, #31
    e106:	d449      	bmi.n	e19c <gpiote_pin_int_cfg+0x118>
			} else if (((data->active_level & BIT(pin)) != 0U)
    e108:	693b      	ldr	r3, [r7, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    e10a:	69fa      	ldr	r2, [r7, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
    e10c:	40f3      	lsrs	r3, r6
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    e10e:	fa22 f606 	lsr.w	r6, r2, r6
			} else if (((data->active_level & BIT(pin)) != 0U)
    e112:	f003 0301 	and.w	r3, r3, #1
    e116:	f006 0601 	and.w	r6, r6, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    e11a:	42b3      	cmp	r3, r6
    e11c:	bf14      	ite	ne
    e11e:	2601      	movne	r6, #1
    e120:	2602      	moveq	r6, #2
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    e122:	4c2a      	ldr	r4, [pc, #168]	; (e1cc <gpiote_pin_int_cfg+0x148>)
    e124:	2100      	movs	r1, #0
    e126:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    e12a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
    e12e:	f010 0003 	ands.w	r0, r0, #3
    e132:	d135      	bne.n	e1a0 <gpiote_pin_int_cfg+0x11c>
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    e134:	008b      	lsls	r3, r1, #2
    e136:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e13a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    e13e:	022d      	lsls	r5, r5, #8
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    e140:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    e144:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
    e148:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    e14c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    e150:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    e154:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
    e158:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    e15c:	4316      	orrs	r6, r2
			nrf_gpiote_events_t evt =
    e15e:	f101 0240 	add.w	r2, r1, #64	; 0x40
    e162:	0092      	lsls	r2, r2, #2
    return ((uint32_t)NRF_GPIOTE + event);
    e164:	b292      	uxth	r2, r2
    e166:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    e16a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    e16e:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    e172:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    e174:	6812      	ldr	r2, [r2, #0]
    e176:	9201      	str	r2, [sp, #4]
    (void)dummy;
    e178:	9a01      	ldr	r2, [sp, #4]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    e17a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    e17e:	f042 0201 	orr.w	r2, r2, #1
    e182:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(BIT(channel));
    e186:	2301      	movs	r3, #1
    e188:	fa03 f101 	lsl.w	r1, r3, r1
    NRF_GPIOTE->INTENSET = mask;
    e18c:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
}
    e190:	b003      	add	sp, #12
    e192:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    e194:	3301      	adds	r3, #1
    e196:	2b08      	cmp	r3, #8
    e198:	d183      	bne.n	e0a2 <gpiote_pin_int_cfg+0x1e>
    e19a:	e79e      	b.n	e0da <gpiote_pin_int_cfg+0x56>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    e19c:	2603      	movs	r6, #3
    e19e:	e7c0      	b.n	e122 <gpiote_pin_int_cfg+0x9e>
    e1a0:	3101      	adds	r1, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    e1a2:	2908      	cmp	r1, #8
    e1a4:	d1bf      	bne.n	e126 <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
    e1a6:	f06f 0012 	mvn.w	r0, #18
    e1aa:	e7f1      	b.n	e190 <gpiote_pin_int_cfg+0x10c>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    e1ac:	693b      	ldr	r3, [r7, #16]
    e1ae:	69fa      	ldr	r2, [r7, #28]
    e1b0:	4053      	eors	r3, r2
    e1b2:	fa23 f606 	lsr.w	r6, r3, r6
		return NRF_GPIO_PIN_SENSE_HIGH;
    e1b6:	f016 0f01 	tst.w	r6, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    e1ba:	4628      	mov	r0, r5
    e1bc:	bf0c      	ite	eq
    e1be:	2103      	moveq	r1, #3
    e1c0:	2102      	movne	r1, #2
    e1c2:	f7ff ff29 	bl	e018 <nrf_gpio_cfg_sense_set>
	int res = 0;
    e1c6:	4620      	mov	r0, r4
    e1c8:	e7e2      	b.n	e190 <gpiote_pin_int_cfg+0x10c>
    e1ca:	bf00      	nop
    e1cc:	40006000 	.word	0x40006000

0000e1d0 <gpio_nrfx_config>:
{
    e1d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e1d4:	4607      	mov	r7, r0
	struct gpio_nrfx_data *data = get_port_data(port);
    e1d6:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    e1d8:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
    e1dc:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
    e1e0:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    e1e2:	d03e      	beq.n	e262 <gpio_nrfx_config+0x92>
    e1e4:	dc09      	bgt.n	e1fa <gpio_nrfx_config+0x2a>
    e1e6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    e1ea:	d03c      	beq.n	e266 <gpio_nrfx_config+0x96>
    e1ec:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    e1f0:	d03b      	beq.n	e26a <gpio_nrfx_config+0x9a>
    e1f2:	b190      	cbz	r0, e21a <gpio_nrfx_config+0x4a>
		return -EINVAL;
    e1f4:	f06f 0015 	mvn.w	r0, #21
    e1f8:	e031      	b.n	e25e <gpio_nrfx_config+0x8e>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    e1fa:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
    e1fe:	d036      	beq.n	e26e <gpio_nrfx_config+0x9e>
    e200:	dc04      	bgt.n	e20c <gpio_nrfx_config+0x3c>
    e202:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
    e206:	d1f5      	bne.n	e1f4 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
    e208:	2003      	movs	r0, #3
    e20a:	e006      	b.n	e21a <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    e20c:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    e210:	d02f      	beq.n	e272 <gpio_nrfx_config+0xa2>
    e212:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
    e216:	d1ed      	bne.n	e1f4 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
    e218:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    e21a:	f406 7840 	and.w	r8, r6, #768	; 0x300
    e21e:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
    e222:	d028      	beq.n	e276 <gpio_nrfx_config+0xa6>
		pull = NRF_GPIO_PIN_NOPULL;
    e224:	f5a8 7400 	sub.w	r4, r8, #512	; 0x200
    e228:	4263      	negs	r3, r4
    e22a:	4163      	adcs	r3, r4
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    e22c:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    e230:	ea4f 084c 	mov.w	r8, ip, lsl #1
	if (access_op == GPIO_ACCESS_BY_PORT) {
    e234:	2901      	cmp	r1, #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    e236:	ea48 080c 	orr.w	r8, r8, ip
		from_pin = pin;
    e23a:	bf18      	it	ne
    e23c:	b2d4      	uxtbne	r4, r2
    e23e:	ea48 2000 	orr.w	r0, r8, r0, lsl #8
        return NRF_P1;
    e242:	f8df a0b8 	ldr.w	sl, [pc, #184]	; e2fc <gpio_nrfx_config+0x12c>
		to_pin   = pin;
    e246:	bf12      	itee	ne
    e248:	46a1      	movne	r9, r4
		to_pin   = 31U;
    e24a:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
    e24e:	2400      	moveq	r4, #0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    e250:	ea40 0883 	orr.w	r8, r0, r3, lsl #2
    e254:	f04f 0b01 	mov.w	fp, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    e258:	45a1      	cmp	r9, r4
    e25a:	d20e      	bcs.n	e27a <gpio_nrfx_config+0xaa>
	return 0;
    e25c:	2000      	movs	r0, #0
}
    e25e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
    e262:	2002      	movs	r0, #2
    e264:	e7d9      	b.n	e21a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
    e266:	2001      	movs	r0, #1
    e268:	e7d7      	b.n	e21a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
    e26a:	2004      	movs	r0, #4
    e26c:	e7d5      	b.n	e21a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
    e26e:	2005      	movs	r0, #5
    e270:	e7d3      	b.n	e21a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
    e272:	2006      	movs	r0, #6
    e274:	e7d1      	b.n	e21a <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
    e276:	2303      	movs	r3, #3
    e278:	e7d8      	b.n	e22c <gpio_nrfx_config+0x5c>
	return port->config->config_info;
    e27a:	683b      	ldr	r3, [r7, #0]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    e27c:	689b      	ldr	r3, [r3, #8]
    e27e:	791b      	ldrb	r3, [r3, #4]
    e280:	f004 021f 	and.w	r2, r4, #31
    e284:	ea42 1243 	orr.w	r2, r2, r3, lsl #5
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    e288:	2a2f      	cmp	r2, #47	; 0x2f
    e28a:	dd01      	ble.n	e290 <gpio_nrfx_config+0xc0>
    e28c:	f7ff feb6 	bl	dffc <nrf_gpio_pin_port_decode.part.8>
    if (*p_pin < P0_PIN_NUM)
    e290:	2a1f      	cmp	r2, #31
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
    e292:	bfc6      	itte	gt
    e294:	f002 021f 	andgt.w	r2, r2, #31
        return NRF_P1;
    e298:	4653      	movgt	r3, sl
        return NRF_P0;
    e29a:	f04f 43a0 	movle.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    e29e:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    e2a2:	07b1      	lsls	r1, r6, #30
    e2a4:	f843 8022 	str.w	r8, [r3, r2, lsl #2]
    e2a8:	68ab      	ldr	r3, [r5, #8]
    e2aa:	fa0b f204 	lsl.w	r2, fp, r4
    e2ae:	bf4c      	ite	mi
    e2b0:	4313      	orrmi	r3, r2
    e2b2:	4393      	bicpl	r3, r2
    e2b4:	60ab      	str	r3, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    e2b6:	696b      	ldr	r3, [r5, #20]
    e2b8:	06b0      	lsls	r0, r6, #26
    e2ba:	bf4c      	ite	mi
    e2bc:	4313      	orrmi	r3, r2
    e2be:	4393      	bicpl	r3, r2
    e2c0:	616b      	str	r3, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
    e2c2:	69ab      	ldr	r3, [r5, #24]
    e2c4:	0671      	lsls	r1, r6, #25
    e2c6:	bf4c      	ite	mi
    e2c8:	4313      	orrmi	r3, r2
    e2ca:	4393      	bicpl	r3, r2
    e2cc:	61ab      	str	r3, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
    e2ce:	692b      	ldr	r3, [r5, #16]
    e2d0:	0770      	lsls	r0, r6, #29
    e2d2:	bf4c      	ite	mi
    e2d4:	4313      	orrmi	r3, r2
    e2d6:	4393      	bicpl	r3, r2
    e2d8:	612b      	str	r3, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    e2da:	69eb      	ldr	r3, [r5, #28]
    e2dc:	0631      	lsls	r1, r6, #24
    e2de:	bf4c      	ite	mi
    e2e0:	431a      	orrmi	r2, r3
    e2e2:	ea23 0202 	bicpl.w	r2, r3, r2
    e2e6:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    e2e8:	4621      	mov	r1, r4
    e2ea:	4638      	mov	r0, r7
    e2ec:	f7ff feca 	bl	e084 <gpiote_pin_int_cfg>
		if (res != 0) {
    e2f0:	2800      	cmp	r0, #0
    e2f2:	d1b4      	bne.n	e25e <gpio_nrfx_config+0x8e>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    e2f4:	3401      	adds	r4, #1
    e2f6:	b2e4      	uxtb	r4, r4
    e2f8:	e7ae      	b.n	e258 <gpio_nrfx_config+0x88>
    e2fa:	bf00      	nop
    e2fc:	50000300 	.word	0x50000300

0000e300 <gpiote_event_handler>:
{
    e300:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
    e302:	4d2d      	ldr	r5, [pc, #180]	; (e3b8 <gpiote_event_handler+0xb8>)
    e304:	682c      	ldr	r4, [r5, #0]
    e306:	b085      	sub	sp, #20
	u32_t fired_triggers[GPIO_COUNT] = {0};
    e308:	2600      	movs	r6, #0
	if (port_event) {
    e30a:	2c01      	cmp	r4, #1
	u32_t fired_triggers[GPIO_COUNT] = {0};
    e30c:	e9cd 6602 	strd	r6, r6, [sp, #8]
	if (port_event) {
    e310:	d10b      	bne.n	e32a <gpiote_event_handler+0x2a>
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
    e312:	482a      	ldr	r0, [pc, #168]	; (e3bc <gpiote_event_handler+0xbc>)
    e314:	f009 fecd 	bl	180b2 <check_level_trigger_pins>
		fired_triggers[0] =
    e318:	9002      	str	r0, [sp, #8]
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p1));
    e31a:	4829      	ldr	r0, [pc, #164]	; (e3c0 <gpiote_event_handler+0xc0>)
    e31c:	f009 fec9 	bl	180b2 <check_level_trigger_pins>
		fired_triggers[1] =
    e320:	9003      	str	r0, [sp, #12]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    e322:	602e      	str	r6, [r5, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    e324:	682b      	ldr	r3, [r5, #0]
    e326:	9300      	str	r3, [sp, #0]
    (void)dummy;
    e328:	9b00      	ldr	r3, [sp, #0]
    return (NRF_GPIOTE->INTENSET & mask);
    e32a:	4e26      	ldr	r6, [pc, #152]	; (e3c4 <gpiote_event_handler+0xc4>)
{
    e32c:	2300      	movs	r3, #0
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
    e32e:	2701      	movs	r7, #1
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    e330:	469c      	mov	ip, r3
    return (NRF_GPIOTE->INTENSET & mask);
    e332:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
    e336:	fa07 f103 	lsl.w	r1, r7, r3
    e33a:	4211      	tst	r1, r2
    e33c:	d01e      	beq.n	e37c <gpiote_event_handler+0x7c>
    return ((uint32_t)NRF_GPIOTE + event);
    e33e:	009a      	lsls	r2, r3, #2
    e340:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    e344:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
    e348:	6811      	ldr	r1, [r2, #0]
    e34a:	2901      	cmp	r1, #1
    e34c:	d116      	bne.n	e37c <gpiote_event_handler+0x7c>
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    e34e:	f503 70a2 	add.w	r0, r3, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    e352:	f10d 0e10 	add.w	lr, sp, #16
    e356:	f856 5020 	ldr.w	r5, [r6, r0, lsl #2]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    e35a:	f8c2 c000 	str.w	ip, [r2]
    e35e:	f3c5 3040 	ubfx	r0, r5, #13, #1
    e362:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
    e366:	f3c5 2504 	ubfx	r5, r5, #8, #5
    e36a:	40a9      	lsls	r1, r5
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    e36c:	6812      	ldr	r2, [r2, #0]
    e36e:	f850 5c08 	ldr.w	r5, [r0, #-8]
    e372:	9201      	str	r2, [sp, #4]
    e374:	4329      	orrs	r1, r5
    (void)dummy;
    e376:	9a01      	ldr	r2, [sp, #4]
    e378:	f840 1c08 	str.w	r1, [r0, #-8]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    e37c:	3301      	adds	r3, #1
    e37e:	2b08      	cmp	r3, #8
    e380:	d1d7      	bne.n	e332 <gpiote_event_handler+0x32>
	if (fired_triggers[0]) {
    e382:	9a02      	ldr	r2, [sp, #8]
    e384:	b11a      	cbz	r2, e38e <gpiote_event_handler+0x8e>
	gpio_fire_callbacks(&get_port_data(port)->callbacks, port, pins);
    e386:	490d      	ldr	r1, [pc, #52]	; (e3bc <gpiote_event_handler+0xbc>)
    e388:	6888      	ldr	r0, [r1, #8]
    e38a:	f009 fe1f 	bl	17fcc <gpio_fire_callbacks>
	if (fired_triggers[1]) {
    e38e:	9a03      	ldr	r2, [sp, #12]
    e390:	b12a      	cbz	r2, e39e <gpiote_event_handler+0x9e>
	gpio_fire_callbacks(&get_port_data(port)->callbacks, port, pins);
    e392:	4b0a      	ldr	r3, [pc, #40]	; (e3bc <gpiote_event_handler+0xbc>)
    e394:	f103 010c 	add.w	r1, r3, #12
    e398:	6958      	ldr	r0, [r3, #20]
    e39a:	f009 fe17 	bl	17fcc <gpio_fire_callbacks>
	if (port_event) {
    e39e:	2c01      	cmp	r4, #1
    e3a0:	d108      	bne.n	e3b4 <gpiote_event_handler+0xb4>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p0));
    e3a2:	4806      	ldr	r0, [pc, #24]	; (e3bc <gpiote_event_handler+0xbc>)
    e3a4:	f009 feb3 	bl	1810e <cfg_level_pins>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
    e3a8:	4805      	ldr	r0, [pc, #20]	; (e3c0 <gpiote_event_handler+0xc0>)
}
    e3aa:	b005      	add	sp, #20
    e3ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
    e3b0:	f009 bead 	b.w	1810e <cfg_level_pins>
}
    e3b4:	b005      	add	sp, #20
    e3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e3b8:	4000617c 	.word	0x4000617c
    e3bc:	20011ab8 	.word	0x20011ab8
    e3c0:	20011ac4 	.word	0x20011ac4
    e3c4:	40006000 	.word	0x40006000

0000e3c8 <z_hdlr_gpio_config>:

#include <gpio.h>
#include <syscall_handler.h>

Z_SYSCALL_HANDLER(gpio_config, port, access_op, pin, flags)
{
    e3c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e3cc:	4604      	mov	r4, r0
    e3ce:	460f      	mov	r7, r1
    e3d0:	4690      	mov	r8, r2
    e3d2:	4699      	mov	r9, r3
    e3d4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	Z_OOPS(Z_SYSCALL_DRIVER_GPIO(port, config));
    e3d6:	f7f1 ff13 	bl	200 <z_object_find>
    e3da:	4621      	mov	r1, r4
    e3dc:	f009 ff05 	bl	181ea <z_obj_validation_check.constprop.0>
    e3e0:	b170      	cbz	r0, e400 <z_hdlr_gpio_config+0x38>
    e3e2:	490c      	ldr	r1, [pc, #48]	; (e414 <z_hdlr_gpio_config+0x4c>)
    e3e4:	480c      	ldr	r0, [pc, #48]	; (e418 <z_hdlr_gpio_config+0x50>)
    e3e6:	f005 f84a 	bl	1347e <printk>
    e3ea:	4630      	mov	r0, r6
    e3ec:	f006 fd9b 	bl	14f26 <z_arch_syscall_oops>
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
    e3f0:	464b      	mov	r3, r9
    e3f2:	4642      	mov	r2, r8
    e3f4:	4639      	mov	r1, r7
    e3f6:	4620      	mov	r0, r4
    e3f8:	46ac      	mov	ip, r5
	return z_impl_gpio_config((struct device *)port, access_op, pin, flags);
}
    e3fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e3fe:	4760      	bx	ip
	Z_OOPS(Z_SYSCALL_DRIVER_GPIO(port, config));
    e400:	6863      	ldr	r3, [r4, #4]
    e402:	681d      	ldr	r5, [r3, #0]
    e404:	2d00      	cmp	r5, #0
    e406:	d1f3      	bne.n	e3f0 <z_hdlr_gpio_config+0x28>
    e408:	4a04      	ldr	r2, [pc, #16]	; (e41c <z_hdlr_gpio_config+0x54>)
    e40a:	4902      	ldr	r1, [pc, #8]	; (e414 <z_hdlr_gpio_config+0x4c>)
    e40c:	4804      	ldr	r0, [pc, #16]	; (e420 <z_hdlr_gpio_config+0x58>)
    e40e:	f005 f836 	bl	1347e <printk>
    e412:	e7ea      	b.n	e3ea <z_hdlr_gpio_config+0x22>
    e414:	0001ba0e 	.word	0x0001ba0e
    e418:	0001ba44 	.word	0x0001ba44
    e41c:	0001ba6c 	.word	0x0001ba6c
    e420:	0001ba73 	.word	0x0001ba73

0000e424 <z_hdlr_gpio_write>:

Z_SYSCALL_HANDLER(gpio_write, port, access_op, pin, value)
{
    e424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e428:	4604      	mov	r4, r0
    e42a:	460f      	mov	r7, r1
    e42c:	4690      	mov	r8, r2
    e42e:	4699      	mov	r9, r3
    e430:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	Z_OOPS(Z_SYSCALL_DRIVER_GPIO(port, write));
    e432:	f7f1 fee5 	bl	200 <z_object_find>
    e436:	4621      	mov	r1, r4
    e438:	f009 fed7 	bl	181ea <z_obj_validation_check.constprop.0>
    e43c:	b170      	cbz	r0, e45c <z_hdlr_gpio_write+0x38>
    e43e:	490c      	ldr	r1, [pc, #48]	; (e470 <z_hdlr_gpio_write+0x4c>)
    e440:	480c      	ldr	r0, [pc, #48]	; (e474 <z_hdlr_gpio_write+0x50>)
    e442:	f005 f81c 	bl	1347e <printk>
    e446:	4630      	mov	r0, r6
    e448:	f006 fd6d 	bl	14f26 <z_arch_syscall_oops>
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->write(port, access_op, pin, value);
    e44c:	464b      	mov	r3, r9
    e44e:	4642      	mov	r2, r8
    e450:	4639      	mov	r1, r7
    e452:	4620      	mov	r0, r4
    e454:	46ac      	mov	ip, r5
	return z_impl_gpio_write((struct device *)port, access_op, pin, value);
}
    e456:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e45a:	4760      	bx	ip
	Z_OOPS(Z_SYSCALL_DRIVER_GPIO(port, write));
    e45c:	6863      	ldr	r3, [r4, #4]
    e45e:	685d      	ldr	r5, [r3, #4]
    e460:	2d00      	cmp	r5, #0
    e462:	d1f3      	bne.n	e44c <z_hdlr_gpio_write+0x28>
    e464:	4a04      	ldr	r2, [pc, #16]	; (e478 <z_hdlr_gpio_write+0x54>)
    e466:	4902      	ldr	r1, [pc, #8]	; (e470 <z_hdlr_gpio_write+0x4c>)
    e468:	4804      	ldr	r0, [pc, #16]	; (e47c <z_hdlr_gpio_write+0x58>)
    e46a:	f005 f808 	bl	1347e <printk>
    e46e:	e7ea      	b.n	e446 <z_hdlr_gpio_write+0x22>
    e470:	0001ba21 	.word	0x0001ba21
    e474:	0001ba44 	.word	0x0001ba44
    e478:	0001a21f 	.word	0x0001a21f
    e47c:	0001ba73 	.word	0x0001ba73

0000e480 <z_hdlr_gpio_read>:

Z_SYSCALL_HANDLER(gpio_read, port, access_op, pin, value)
{
    e480:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    e484:	4604      	mov	r4, r0
    e486:	460f      	mov	r7, r1
    e488:	4690      	mov	r8, r2
    e48a:	461d      	mov	r5, r3
    e48c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	Z_OOPS(Z_SYSCALL_DRIVER_GPIO(port, read));
    e48e:	f7f1 feb7 	bl	200 <z_object_find>
    e492:	4621      	mov	r1, r4
    e494:	f009 fea9 	bl	181ea <z_obj_validation_check.constprop.0>
    e498:	b308      	cbz	r0, e4de <z_hdlr_gpio_read+0x5e>
    e49a:	4916      	ldr	r1, [pc, #88]	; (e4f4 <z_hdlr_gpio_read+0x74>)
    e49c:	4816      	ldr	r0, [pc, #88]	; (e4f8 <z_hdlr_gpio_read+0x78>)
    e49e:	f004 ffee 	bl	1347e <printk>
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(value, sizeof(u32_t)));
    e4a2:	4630      	mov	r0, r6
    e4a4:	f006 fd3f 	bl	14f26 <z_arch_syscall_oops>
				  u32_t pin, u32_t *value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->read(port, access_op, pin, value);
    e4a8:	6863      	ldr	r3, [r4, #4]
    e4aa:	689e      	ldr	r6, [r3, #8]
    e4ac:	4642      	mov	r2, r8
    e4ae:	462b      	mov	r3, r5
    e4b0:	4639      	mov	r1, r7
    e4b2:	4620      	mov	r0, r4
    e4b4:	46b4      	mov	ip, r6
	return z_impl_gpio_read((struct device *)port, access_op, pin,
			       (u32_t *)value);
}
    e4b6:	b002      	add	sp, #8
    e4b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e4bc:	4760      	bx	ip
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(value, sizeof(u32_t)));
    e4be:	2201      	movs	r2, #1
    e4c0:	2104      	movs	r1, #4
    e4c2:	4628      	mov	r0, r5
    e4c4:	f006 fd56 	bl	14f74 <z_arch_buffer_validate>
    e4c8:	2800      	cmp	r0, #0
    e4ca:	d0ed      	beq.n	e4a8 <z_hdlr_gpio_read+0x28>
    e4cc:	4b0b      	ldr	r3, [pc, #44]	; (e4fc <z_hdlr_gpio_read+0x7c>)
    e4ce:	9300      	str	r3, [sp, #0]
    e4d0:	462a      	mov	r2, r5
    e4d2:	2304      	movs	r3, #4
    e4d4:	4907      	ldr	r1, [pc, #28]	; (e4f4 <z_hdlr_gpio_read+0x74>)
    e4d6:	480a      	ldr	r0, [pc, #40]	; (e500 <z_hdlr_gpio_read+0x80>)
    e4d8:	f004 ffd1 	bl	1347e <printk>
    e4dc:	e7e1      	b.n	e4a2 <z_hdlr_gpio_read+0x22>
	Z_OOPS(Z_SYSCALL_DRIVER_GPIO(port, read));
    e4de:	6863      	ldr	r3, [r4, #4]
    e4e0:	689a      	ldr	r2, [r3, #8]
    e4e2:	2a00      	cmp	r2, #0
    e4e4:	d1eb      	bne.n	e4be <z_hdlr_gpio_read+0x3e>
    e4e6:	4a07      	ldr	r2, [pc, #28]	; (e504 <z_hdlr_gpio_read+0x84>)
    e4e8:	4902      	ldr	r1, [pc, #8]	; (e4f4 <z_hdlr_gpio_read+0x74>)
    e4ea:	4807      	ldr	r0, [pc, #28]	; (e508 <z_hdlr_gpio_read+0x88>)
    e4ec:	f004 ffc7 	bl	1347e <printk>
    e4f0:	e7d7      	b.n	e4a2 <z_hdlr_gpio_read+0x22>
    e4f2:	bf00      	nop
    e4f4:	0001ba33 	.word	0x0001ba33
    e4f8:	0001ba44 	.word	0x0001ba44
    e4fc:	0001a21f 	.word	0x0001a21f
    e500:	0001a1c4 	.word	0x0001a1c4
    e504:	0001b8ef 	.word	0x0001b8ef
    e508:	0001ba73 	.word	0x0001ba73

0000e50c <event_txdrdy_check>:

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e50c:	4b05      	ldr	r3, [pc, #20]	; (e524 <event_txdrdy_check+0x18>)
    e50e:	681b      	ldr	r3, [r3, #0]

static bool event_txdrdy_check(void)
{
	return (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_TXDRDY)
#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
		|| uart_sw_event_txdrdy
    e510:	b92b      	cbnz	r3, e51e <event_txdrdy_check+0x12>
    e512:	4b05      	ldr	r3, [pc, #20]	; (e528 <event_txdrdy_check+0x1c>)
    e514:	7818      	ldrb	r0, [r3, #0]
    e516:	3000      	adds	r0, #0
    e518:	bf18      	it	ne
    e51a:	2001      	movne	r0, #1
    e51c:	4770      	bx	lr
    e51e:	2001      	movs	r0, #1
#endif
	       );
}
    e520:	4770      	bx	lr
    e522:	bf00      	nop
    e524:	4000211c 	.word	0x4000211c
    e528:	20005ee8 	.word	0x20005ee8

0000e52c <uart_nrfx_err_check>:
    e52c:	4b03      	ldr	r3, [pc, #12]	; (e53c <uart_nrfx_err_check+0x10>)
    e52e:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0U;

	if (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_ERROR)) {
    e530:	b118      	cbz	r0, e53a <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    e532:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
    e536:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(uart0_addr);
	}

	return error;
}
    e53a:	4770      	bx	lr
    e53c:	40002124 	.word	0x40002124

0000e540 <uart_nrfx_irq_rx_enable>:
    p_reg->INTENSET = int_mask;
    e540:	4b02      	ldr	r3, [pc, #8]	; (e54c <uart_nrfx_irq_rx_enable+0xc>)
    e542:	2204      	movs	r2, #4
    e544:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven receiver enabling function */
static void uart_nrfx_irq_rx_enable(struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
    e548:	4770      	bx	lr
    e54a:	bf00      	nop
    e54c:	40002000 	.word	0x40002000

0000e550 <uart_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = int_mask;
    e550:	4b02      	ldr	r3, [pc, #8]	; (e55c <uart_nrfx_irq_rx_disable+0xc>)
    e552:	2204      	movs	r2, #4
    e554:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven receiver disabling function */
static void uart_nrfx_irq_rx_disable(struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
    e558:	4770      	bx	lr
    e55a:	bf00      	nop
    e55c:	40002000 	.word	0x40002000

0000e560 <uart_nrfx_irq_rx_ready>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e560:	4b02      	ldr	r3, [pc, #8]	; (e56c <uart_nrfx_irq_rx_ready+0xc>)
    e562:	6818      	ldr	r0, [r3, #0]

/** Interrupt driven receiver ready function */
static int uart_nrfx_irq_rx_ready(struct device *dev)
{
	return nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY);
}
    e564:	3000      	adds	r0, #0
    e566:	bf18      	it	ne
    e568:	2001      	movne	r0, #1
    e56a:	4770      	bx	lr
    e56c:	40002108 	.word	0x40002108

0000e570 <uart_nrfx_irq_err_enable>:
    p_reg->INTENSET = int_mask;
    e570:	4b02      	ldr	r3, [pc, #8]	; (e57c <uart_nrfx_irq_err_enable+0xc>)
    e572:	f44f 7200 	mov.w	r2, #512	; 0x200
    e576:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven error enabling function */
static void uart_nrfx_irq_err_enable(struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
    e57a:	4770      	bx	lr
    e57c:	40002000 	.word	0x40002000

0000e580 <uart_nrfx_irq_err_disable>:
    p_reg->INTENCLR = int_mask;
    e580:	4b02      	ldr	r3, [pc, #8]	; (e58c <uart_nrfx_irq_err_disable+0xc>)
    e582:	f44f 7200 	mov.w	r2, #512	; 0x200
    e586:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven error disabling function */
static void uart_nrfx_irq_err_disable(struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
    e58a:	4770      	bx	lr
    e58c:	40002000 	.word	0x40002000

0000e590 <uart_nrfx_irq_callback_set>:
static void uart_nrfx_irq_callback_set(struct device *dev,
				       uart_irq_callback_user_data_t cb,
				       void *cb_data)
{
	(void)dev;
	irq_callback = cb;
    e590:	4b02      	ldr	r3, [pc, #8]	; (e59c <uart_nrfx_irq_callback_set+0xc>)
    e592:	6019      	str	r1, [r3, #0]
	irq_cb_data = cb_data;
    e594:	4b02      	ldr	r3, [pc, #8]	; (e5a0 <uart_nrfx_irq_callback_set+0x10>)
    e596:	601a      	str	r2, [r3, #0]
}
    e598:	4770      	bx	lr
    e59a:	bf00      	nop
    e59c:	20004634 	.word	0x20004634
    e5a0:	20004638 	.word	0x20004638

0000e5a4 <uart_nrfx_isr>:
 */
static void uart_nrfx_isr(void *arg)
{
	ARG_UNUSED(arg);

	if (irq_callback) {
    e5a4:	4b03      	ldr	r3, [pc, #12]	; (e5b4 <uart_nrfx_isr+0x10>)
    e5a6:	681b      	ldr	r3, [r3, #0]
    e5a8:	b113      	cbz	r3, e5b0 <uart_nrfx_isr+0xc>
		irq_callback(irq_cb_data);
    e5aa:	4a03      	ldr	r2, [pc, #12]	; (e5b8 <uart_nrfx_isr+0x14>)
    e5ac:	6810      	ldr	r0, [r2, #0]
    e5ae:	4718      	bx	r3
	}
}
    e5b0:	4770      	bx	lr
    e5b2:	bf00      	nop
    e5b4:	20004634 	.word	0x20004634
    e5b8:	20004638 	.word	0x20004638

0000e5bc <uart_nrfx_irq_tx_disable>:
    e5bc:	4b03      	ldr	r3, [pc, #12]	; (e5cc <uart_nrfx_irq_tx_disable+0x10>)
    e5be:	2280      	movs	r2, #128	; 0x80
    e5c0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->TXD = txd;
}

__STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e5c4:	2201      	movs	r2, #1
    e5c6:	60da      	str	r2, [r3, #12]
	device_busy_clear(dev);
    e5c8:	f009 be63 	b.w	18292 <device_busy_clear>
    e5cc:	40002000 	.word	0x40002000

0000e5d0 <uart_nrfx_irq_tx_enable>:
{
    e5d0:	b508      	push	{r3, lr}
	device_busy_set(dev);
    e5d2:	f009 fe5d 	bl	18290 <device_busy_set>
    e5d6:	4b0d      	ldr	r3, [pc, #52]	; (e60c <uart_nrfx_irq_tx_enable+0x3c>)
    e5d8:	2201      	movs	r2, #1
    e5da:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = int_mask;
    e5dc:	2280      	movs	r2, #128	; 0x80
    e5de:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	__asm__ volatile(
    e5e2:	f04f 0220 	mov.w	r2, #32
    e5e6:	f3ef 8311 	mrs	r3, BASEPRI
    e5ea:	f382 8811 	msr	BASEPRI, r2
    e5ee:	f3bf 8f6f 	isb	sy
	if (uart_sw_event_txdrdy) {
    e5f2:	4a07      	ldr	r2, [pc, #28]	; (e610 <uart_nrfx_irq_tx_enable+0x40>)
    e5f4:	7812      	ldrb	r2, [r2, #0]
    e5f6:	b11a      	cbz	r2, e600 <uart_nrfx_irq_tx_enable+0x30>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e5f8:	4a06      	ldr	r2, [pc, #24]	; (e614 <uart_nrfx_irq_tx_enable+0x44>)
    e5fa:	2104      	movs	r1, #4
    e5fc:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	__asm__ volatile(
    e600:	f383 8811 	msr	BASEPRI, r3
    e604:	f3bf 8f6f 	isb	sy
}
    e608:	bd08      	pop	{r3, pc}
    e60a:	bf00      	nop
    e60c:	40002008 	.word	0x40002008
    e610:	20005ee8 	.word	0x20005ee8
    e614:	e000e100 	.word	0xe000e100

0000e618 <uart_nrfx_configure>:
{
    e618:	b530      	push	{r4, r5, lr}
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    e61a:	794b      	ldrb	r3, [r1, #5]
    e61c:	2b01      	cmp	r3, #1
    e61e:	d120      	bne.n	e662 <uart_nrfx_configure+0x4a>
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    e620:	798b      	ldrb	r3, [r1, #6]
    e622:	2b03      	cmp	r3, #3
    e624:	d11d      	bne.n	e662 <uart_nrfx_configure+0x4a>
	switch (cfg->flow_ctrl) {
    e626:	79cc      	ldrb	r4, [r1, #7]
    e628:	b12c      	cbz	r4, e636 <uart_nrfx_configure+0x1e>
    e62a:	2c01      	cmp	r4, #1
    e62c:	d119      	bne.n	e662 <uart_nrfx_configure+0x4a>
	return dev->config->config_info;
    e62e:	6803      	ldr	r3, [r0, #0]
		if (get_dev_config(dev)->rts_cts_pins_set) {
    e630:	689b      	ldr	r3, [r3, #8]
    e632:	781b      	ldrb	r3, [r3, #0]
    e634:	b1ab      	cbz	r3, e662 <uart_nrfx_configure+0x4a>
	switch (cfg->parity) {
    e636:	790a      	ldrb	r2, [r1, #4]
    e638:	b112      	cbz	r2, e640 <uart_nrfx_configure+0x28>
    e63a:	2a02      	cmp	r2, #2
    e63c:	d111      	bne.n	e662 <uart_nrfx_configure+0x4a>
		parity = NRF_UART_PARITY_INCLUDED;
    e63e:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    e640:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
    e642:	f647 2512 	movw	r5, #31250	; 0x7a12
    e646:	42ab      	cmp	r3, r5
    e648:	d05f      	beq.n	e70a <uart_nrfx_configure+0xf2>
    e64a:	d827      	bhi.n	e69c <uart_nrfx_configure+0x84>
    e64c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    e650:	d05e      	beq.n	e710 <uart_nrfx_configure+0xf8>
    e652:	d812      	bhi.n	e67a <uart_nrfx_configure+0x62>
    e654:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    e658:	d05c      	beq.n	e714 <uart_nrfx_configure+0xfc>
    e65a:	d805      	bhi.n	e668 <uart_nrfx_configure+0x50>
    e65c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    e660:	d05b      	beq.n	e71a <uart_nrfx_configure+0x102>
		return -ENOTSUP;
    e662:	f06f 0085 	mvn.w	r0, #133	; 0x85
    e666:	e04f      	b.n	e708 <uart_nrfx_configure+0xf0>
	switch (baudrate) {
    e668:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    e66c:	d058      	beq.n	e720 <uart_nrfx_configure+0x108>
    e66e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    e672:	d1f6      	bne.n	e662 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    e674:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    e678:	e03b      	b.n	e6f2 <uart_nrfx_configure+0xda>
	switch (baudrate) {
    e67a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    e67e:	d052      	beq.n	e726 <uart_nrfx_configure+0x10e>
    e680:	d804      	bhi.n	e68c <uart_nrfx_configure+0x74>
    e682:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    e686:	d1ec      	bne.n	e662 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    e688:	4b30      	ldr	r3, [pc, #192]	; (e74c <uart_nrfx_configure+0x134>)
    e68a:	e032      	b.n	e6f2 <uart_nrfx_configure+0xda>
	switch (baudrate) {
    e68c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    e690:	d04c      	beq.n	e72c <uart_nrfx_configure+0x114>
    e692:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    e696:	d1e4      	bne.n	e662 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    e698:	4b2d      	ldr	r3, [pc, #180]	; (e750 <uart_nrfx_configure+0x138>)
    e69a:	e02a      	b.n	e6f2 <uart_nrfx_configure+0xda>
	switch (baudrate) {
    e69c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    e6a0:	d046      	beq.n	e730 <uart_nrfx_configure+0x118>
    e6a2:	d811      	bhi.n	e6c8 <uart_nrfx_configure+0xb0>
    e6a4:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    e6a8:	42ab      	cmp	r3, r5
    e6aa:	d043      	beq.n	e734 <uart_nrfx_configure+0x11c>
    e6ac:	d804      	bhi.n	e6b8 <uart_nrfx_configure+0xa0>
    e6ae:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    e6b2:	d1d6      	bne.n	e662 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    e6b4:	4b27      	ldr	r3, [pc, #156]	; (e754 <uart_nrfx_configure+0x13c>)
    e6b6:	e01c      	b.n	e6f2 <uart_nrfx_configure+0xda>
	switch (baudrate) {
    e6b8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    e6bc:	d03d      	beq.n	e73a <uart_nrfx_configure+0x122>
    e6be:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    e6c2:	d1ce      	bne.n	e662 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    e6c4:	4b24      	ldr	r3, [pc, #144]	; (e758 <uart_nrfx_configure+0x140>)
    e6c6:	e014      	b.n	e6f2 <uart_nrfx_configure+0xda>
	switch (baudrate) {
    e6c8:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    e6cc:	d037      	beq.n	e73e <uart_nrfx_configure+0x126>
    e6ce:	d808      	bhi.n	e6e2 <uart_nrfx_configure+0xca>
    e6d0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    e6d4:	d035      	beq.n	e742 <uart_nrfx_configure+0x12a>
    e6d6:	4d21      	ldr	r5, [pc, #132]	; (e75c <uart_nrfx_configure+0x144>)
    e6d8:	42ab      	cmp	r3, r5
    e6da:	d1c2      	bne.n	e662 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    e6dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    e6e0:	e007      	b.n	e6f2 <uart_nrfx_configure+0xda>
	switch (baudrate) {
    e6e2:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    e6e6:	d02e      	beq.n	e746 <uart_nrfx_configure+0x12e>
    e6e8:	4d1d      	ldr	r5, [pc, #116]	; (e760 <uart_nrfx_configure+0x148>)
    e6ea:	42ab      	cmp	r3, r5
    e6ec:	d1b9      	bne.n	e662 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    e6ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    e6f2:	4d1c      	ldr	r5, [pc, #112]	; (e764 <uart_nrfx_configure+0x14c>)
    e6f4:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
	get_dev_data(dev)->uart_config = *cfg;
    e6f8:	6883      	ldr	r3, [r0, #8]
    e6fa:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    e6fc:	4322      	orrs	r2, r4
    e6fe:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    e702:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    e706:	2000      	movs	r0, #0
}
    e708:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    e70a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    e70e:	e7f0      	b.n	e6f2 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    e710:	4b15      	ldr	r3, [pc, #84]	; (e768 <uart_nrfx_configure+0x150>)
    e712:	e7ee      	b.n	e6f2 <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00027000;
    e714:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    e718:	e7eb      	b.n	e6f2 <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
    e71a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    e71e:	e7e8      	b.n	e6f2 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    e720:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    e724:	e7e5      	b.n	e6f2 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    e726:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    e72a:	e7e2      	b.n	e6f2 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    e72c:	4b0f      	ldr	r3, [pc, #60]	; (e76c <uart_nrfx_configure+0x154>)
    e72e:	e7e0      	b.n	e6f2 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    e730:	4b0f      	ldr	r3, [pc, #60]	; (e770 <uart_nrfx_configure+0x158>)
    e732:	e7de      	b.n	e6f2 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    e734:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    e738:	e7db      	b.n	e6f2 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    e73a:	4b0e      	ldr	r3, [pc, #56]	; (e774 <uart_nrfx_configure+0x15c>)
    e73c:	e7d9      	b.n	e6f2 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    e73e:	4b0e      	ldr	r3, [pc, #56]	; (e778 <uart_nrfx_configure+0x160>)
    e740:	e7d7      	b.n	e6f2 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    e742:	4b0e      	ldr	r3, [pc, #56]	; (e77c <uart_nrfx_configure+0x164>)
    e744:	e7d5      	b.n	e6f2 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    e746:	4b0e      	ldr	r3, [pc, #56]	; (e780 <uart_nrfx_configure+0x168>)
    e748:	e7d3      	b.n	e6f2 <uart_nrfx_configure+0xda>
    e74a:	bf00      	nop
    e74c:	00275000 	.word	0x00275000
    e750:	0075f000 	.word	0x0075f000
    e754:	009d5000 	.word	0x009d5000
    e758:	013a9000 	.word	0x013a9000
    e75c:	0003d090 	.word	0x0003d090
    e760:	000f4240 	.word	0x000f4240
    e764:	40002000 	.word	0x40002000
    e768:	0013b000 	.word	0x0013b000
    e76c:	004ea000 	.word	0x004ea000
    e770:	01d7e000 	.word	0x01d7e000
    e774:	00ebf000 	.word	0x00ebf000
    e778:	075f7000 	.word	0x075f7000
    e77c:	03afb000 	.word	0x03afb000
    e780:	0ebed000 	.word	0x0ebed000

0000e784 <uart_nrfx_irq_is_pending>:
{
    e784:	b508      	push	{r3, lr}
    return (bool)(p_reg->INTENSET & int_mask);
    e786:	4b0c      	ldr	r3, [pc, #48]	; (e7b8 <uart_nrfx_irq_is_pending+0x34>)
    e788:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		||
    e78c:	f012 0f80 	tst.w	r2, #128	; 0x80
    e790:	461a      	mov	r2, r3
    e792:	d105      	bne.n	e7a0 <uart_nrfx_irq_is_pending+0x1c>
    e794:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
    e798:	f010 0004 	ands.w	r0, r0, #4
    e79c:	d106      	bne.n	e7ac <uart_nrfx_irq_is_pending+0x28>
}
    e79e:	bd08      	pop	{r3, pc}
		 event_txdrdy_check())
    e7a0:	f7ff feb4 	bl	e50c <event_txdrdy_check>
					   NRF_UART_INT_MASK_TXDRDY) &&
    e7a4:	2800      	cmp	r0, #0
    e7a6:	d0f5      	beq.n	e794 <uart_nrfx_irq_is_pending+0x10>
		||
    e7a8:	2001      	movs	r0, #1
    e7aa:	e7f8      	b.n	e79e <uart_nrfx_irq_is_pending+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e7ac:	4b03      	ldr	r3, [pc, #12]	; (e7bc <uart_nrfx_irq_is_pending+0x38>)
    e7ae:	6818      	ldr	r0, [r3, #0]
					   NRF_UART_INT_MASK_RXDRDY) &&
    e7b0:	3000      	adds	r0, #0
    e7b2:	bf18      	it	ne
    e7b4:	2001      	movne	r0, #1
    e7b6:	e7f2      	b.n	e79e <uart_nrfx_irq_is_pending+0x1a>
    e7b8:	40002000 	.word	0x40002000
    e7bc:	40002108 	.word	0x40002108

0000e7c0 <nrf_gpio_pin_port_decode>:
{
    e7c0:	b508      	push	{r3, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    e7c2:	6803      	ldr	r3, [r0, #0]
    e7c4:	2b2f      	cmp	r3, #47	; 0x2f
    e7c6:	d906      	bls.n	e7d6 <nrf_gpio_pin_port_decode+0x16>
    e7c8:	4b07      	ldr	r3, [pc, #28]	; (e7e8 <nrf_gpio_pin_port_decode+0x28>)
    e7ca:	4a08      	ldr	r2, [pc, #32]	; (e7ec <nrf_gpio_pin_port_decode+0x2c>)
    e7cc:	4808      	ldr	r0, [pc, #32]	; (e7f0 <nrf_gpio_pin_port_decode+0x30>)
    e7ce:	f240 11dd 	movw	r1, #477	; 0x1dd
    e7d2:	f7f2 f8d3 	bl	97c <__assert_func>
    if (*p_pin < P0_PIN_NUM)
    e7d6:	2b1f      	cmp	r3, #31
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
    e7d8:	bf85      	ittet	hi
    e7da:	f003 031f 	andhi.w	r3, r3, #31
    e7de:	6003      	strhi	r3, [r0, #0]
        return NRF_P0;
    e7e0:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
        return NRF_P1;
    e7e4:	4803      	ldrhi	r0, [pc, #12]	; (e7f4 <nrf_gpio_pin_port_decode+0x34>)
}
    e7e6:	bd08      	pop	{r3, pc}
    e7e8:	0001b9c7 	.word	0x0001b9c7
    e7ec:	0001babd 	.word	0x0001babd
    e7f0:	0001b9da 	.word	0x0001b9da
    e7f4:	50000300 	.word	0x50000300

0000e7f8 <uart_nrfx_fifo_read>:
{
    e7f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	while ((size - num_rx > 0) &&
    e7fa:	2300      	movs	r3, #0
    e7fc:	4c09      	ldr	r4, [pc, #36]	; (e824 <uart_nrfx_fifo_read+0x2c>)
    return p_reg->RXD;
    e7fe:	4f0a      	ldr	r7, [pc, #40]	; (e828 <uart_nrfx_fifo_read+0x30>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e800:	461e      	mov	r6, r3
    e802:	b2d8      	uxtb	r0, r3
    e804:	1a15      	subs	r5, r2, r0
    e806:	2d00      	cmp	r5, #0
    e808:	dd02      	ble.n	e810 <uart_nrfx_fifo_read+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e80a:	6825      	ldr	r5, [r4, #0]
    e80c:	3301      	adds	r3, #1
    e80e:	b90d      	cbnz	r5, e814 <uart_nrfx_fifo_read+0x1c>
}
    e810:	b003      	add	sp, #12
    e812:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e814:	6026      	str	r6, [r4, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    e816:	6825      	ldr	r5, [r4, #0]
    e818:	9501      	str	r5, [sp, #4]
    (void)dummy;
    e81a:	9d01      	ldr	r5, [sp, #4]
    return p_reg->RXD;
    e81c:	f8d7 5518 	ldr.w	r5, [r7, #1304]	; 0x518
    e820:	540d      	strb	r5, [r1, r0]
    e822:	e7ee      	b.n	e802 <uart_nrfx_fifo_read+0xa>
    e824:	40002108 	.word	0x40002108
    e828:	40002000 	.word	0x40002000

0000e82c <uart_nrfx_poll_out>:
{
    e82c:	b507      	push	{r0, r1, r2, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e82e:	4a0b      	ldr	r2, [pc, #44]	; (e85c <uart_nrfx_poll_out+0x30>)
    e830:	2300      	movs	r3, #0
    e832:	6013      	str	r3, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    e834:	6812      	ldr	r2, [r2, #0]
    e836:	9201      	str	r2, [sp, #4]
    (void)dummy;
    e838:	9a01      	ldr	r2, [sp, #4]
	uart_sw_event_txdrdy = 0U;
    e83a:	4a09      	ldr	r2, [pc, #36]	; (e860 <uart_nrfx_poll_out+0x34>)
    e83c:	7013      	strb	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e83e:	4b09      	ldr	r3, [pc, #36]	; (e864 <uart_nrfx_poll_out+0x38>)
    e840:	2201      	movs	r2, #1
    e842:	601a      	str	r2, [r3, #0]
    p_reg->TXD = txd;
    e844:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	while (!event_txdrdy_check()) {
    e848:	f7ff fe60 	bl	e50c <event_txdrdy_check>
    e84c:	2800      	cmp	r0, #0
    e84e:	d0fb      	beq.n	e848 <uart_nrfx_poll_out+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e850:	4b05      	ldr	r3, [pc, #20]	; (e868 <uart_nrfx_poll_out+0x3c>)
    e852:	2201      	movs	r2, #1
    e854:	601a      	str	r2, [r3, #0]
}
    e856:	b003      	add	sp, #12
    e858:	f85d fb04 	ldr.w	pc, [sp], #4
    e85c:	4000211c 	.word	0x4000211c
    e860:	20005ee8 	.word	0x20005ee8
    e864:	40002008 	.word	0x40002008
    e868:	4000200c 	.word	0x4000200c

0000e86c <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e86c:	4b08      	ldr	r3, [pc, #32]	; (e890 <uart_nrfx_poll_in+0x24>)
    e86e:	681a      	ldr	r2, [r3, #0]
{
    e870:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    e872:	b152      	cbz	r2, e88a <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e874:	2000      	movs	r0, #0
    e876:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    e878:	681b      	ldr	r3, [r3, #0]
    e87a:	9301      	str	r3, [sp, #4]
    (void)dummy;
    e87c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
    e87e:	4b05      	ldr	r3, [pc, #20]	; (e894 <uart_nrfx_poll_in+0x28>)
    e880:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    e884:	700b      	strb	r3, [r1, #0]
}
    e886:	b002      	add	sp, #8
    e888:	4770      	bx	lr
		return -1;
    e88a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e88e:	e7fa      	b.n	e886 <uart_nrfx_poll_in+0x1a>
    e890:	40002108 	.word	0x40002108
    e894:	40002000 	.word	0x40002000

0000e898 <uart_nrfx_fifo_fill>:
{
    e898:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e89c:	4e0d      	ldr	r6, [pc, #52]	; (e8d4 <uart_nrfx_fifo_fill+0x3c>)
	uart_sw_event_txdrdy = 0U;
    e89e:	4f0e      	ldr	r7, [pc, #56]	; (e8d8 <uart_nrfx_fifo_fill+0x40>)
    p_reg->TXD = txd;
    e8a0:	f8df 8038 	ldr.w	r8, [pc, #56]	; e8dc <uart_nrfx_fifo_fill+0x44>
	while ((len - num_tx > 0) &&
    e8a4:	2400      	movs	r4, #0
    e8a6:	b2e5      	uxtb	r5, r4
    e8a8:	1b53      	subs	r3, r2, r5
    e8aa:	2b00      	cmp	r3, #0
    e8ac:	dd03      	ble.n	e8b6 <uart_nrfx_fifo_fill+0x1e>
	       event_txdrdy_check()) {
    e8ae:	f7ff fe2d 	bl	e50c <event_txdrdy_check>
    e8b2:	3401      	adds	r4, #1
	while ((len - num_tx > 0) &&
    e8b4:	b918      	cbnz	r0, e8be <uart_nrfx_fifo_fill+0x26>
}
    e8b6:	4628      	mov	r0, r5
    e8b8:	b002      	add	sp, #8
    e8ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e8be:	2300      	movs	r3, #0
    e8c0:	6033      	str	r3, [r6, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    e8c2:	6830      	ldr	r0, [r6, #0]
    e8c4:	9001      	str	r0, [sp, #4]
    (void)dummy;
    e8c6:	9801      	ldr	r0, [sp, #4]
	uart_sw_event_txdrdy = 0U;
    e8c8:	703b      	strb	r3, [r7, #0]
    p_reg->TXD = txd;
    e8ca:	5d4b      	ldrb	r3, [r1, r5]
    e8cc:	f8c8 351c 	str.w	r3, [r8, #1308]	; 0x51c
    e8d0:	e7e9      	b.n	e8a6 <uart_nrfx_fifo_fill+0xe>
    e8d2:	bf00      	nop
    e8d4:	4000211c 	.word	0x4000211c
    e8d8:	20005ee8 	.word	0x20005ee8
    e8dc:	40002000 	.word	0x40002000

0000e8e0 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
    e8e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    e8e4:	2606      	movs	r6, #6
    e8e6:	4607      	mov	r7, r0
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    e8e8:	a801      	add	r0, sp, #4
    e8ea:	9601      	str	r6, [sp, #4]
    e8ec:	f7ff ff68 	bl	e7c0 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    e8f0:	9b01      	ldr	r3, [sp, #4]
    p_reg->PSEL.RXD = pselrxd;
    e8f2:	4c31      	ldr	r4, [pc, #196]	; (e9b8 <uart_nrfx_init+0xd8>)
    e8f4:	2501      	movs	r5, #1
    e8f6:	fa05 f303 	lsl.w	r3, r5, r3
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    e8fa:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    e8fe:	a801      	add	r0, sp, #4
    e900:	9601      	str	r6, [sp, #4]
    e902:	f7ff ff5d 	bl	e7c0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    e906:	9b01      	ldr	r3, [sp, #4]
    e908:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    e90c:	f04f 0903 	mov.w	r9, #3
    e910:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    e914:	f04f 0a08 	mov.w	sl, #8
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    e918:	a801      	add	r0, sp, #4
    e91a:	f8cd a004 	str.w	sl, [sp, #4]
    e91e:	f7ff ff4f 	bl	e7c0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    e922:	9b01      	ldr	r3, [sp, #4]
    e924:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    e928:	f04f 0800 	mov.w	r8, #0
    e92c:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    e930:	f8c4 a514 	str.w	sl, [r4, #1300]	; 0x514
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    e934:	a801      	add	r0, sp, #4
    p_reg->PSEL.TXD = pseltxd;
    e936:	f8c4 650c 	str.w	r6, [r4, #1292]	; 0x50c
        nrf_gpio_pin_set(pin_number);
    e93a:	2605      	movs	r6, #5
    e93c:	9601      	str	r6, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    e93e:	f7ff ff3f 	bl	e7c0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    e942:	9b01      	ldr	r3, [sp, #4]
    e944:	fa05 f303 	lsl.w	r3, r5, r3
    p_reg->OUTSET = set_mask;
    e948:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    e94c:	a801      	add	r0, sp, #4
    e94e:	9601      	str	r6, [sp, #4]
    e950:	f7ff ff36 	bl	e7c0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    e954:	9b01      	ldr	r3, [sp, #4]
    e956:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    e95a:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    e95e:	f04f 0907 	mov.w	r9, #7
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    e962:	a801      	add	r0, sp, #4
    e964:	f8cd 9004 	str.w	r9, [sp, #4]
    e968:	f7ff ff2a 	bl	e7c0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    e96c:	9b01      	ldr	r3, [sp, #4]
			       DT_NORDIC_NRF_UART_UART_0_RTS_PIN,
			       DT_NORDIC_NRF_UART_UART_0_CTS_PIN);
#endif

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    e96e:	68b9      	ldr	r1, [r7, #8]
    e970:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    e974:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    p_reg->PSEL.RTS = pselrts;
    e978:	f8c4 6508 	str.w	r6, [r4, #1288]	; 0x508
    e97c:	4638      	mov	r0, r7
    p_reg->PSEL.CTS = pselcts;
    e97e:	f8c4 9510 	str.w	r9, [r4, #1296]	; 0x510
    e982:	f7ff fe49 	bl	e618 <uart_nrfx_configure>
	if (err) {
    e986:	4606      	mov	r6, r0
    e988:	b990      	cbnz	r0, e9b0 <uart_nrfx_init+0xd0>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    e98a:	2304      	movs	r3, #4
    e98c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e990:	4b0a      	ldr	r3, [pc, #40]	; (e9bc <uart_nrfx_init+0xdc>)
    e992:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    e994:	681b      	ldr	r3, [r3, #0]
    e996:	9301      	str	r3, [sp, #4]
    (void)dummy;
    e998:	9b01      	ldr	r3, [sp, #4]

#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
	/* Simulate that the TXDRDY event is set, so that the transmitter status
	 * is indicated correctly.
	 */
	uart_sw_event_txdrdy = 1U;
    e99a:	4b09      	ldr	r3, [pc, #36]	; (e9c0 <uart_nrfx_init+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e99c:	6025      	str	r5, [r4, #0]
#endif

#if defined(CONFIG_UART_ASYNC_API) || defined(CONFIG_UART_0_INTERRUPT_DRIVEN)

	IRQ_CONNECT(DT_NORDIC_NRF_UART_UART_0_IRQ,
    e99e:	4602      	mov	r2, r0
    e9a0:	4629      	mov	r1, r5
    e9a2:	2002      	movs	r0, #2
	uart_sw_event_txdrdy = 1U;
    e9a4:	701d      	strb	r5, [r3, #0]
	IRQ_CONNECT(DT_NORDIC_NRF_UART_UART_0_IRQ,
    e9a6:	f7fc fb27 	bl	aff8 <z_irq_priority_set>
		    DT_NORDIC_NRF_UART_UART_0_IRQ_PRIORITY,
		    uart_nrfx_isr,
		    DEVICE_GET(uart_nrfx_uart0),
		    0);
	irq_enable(DT_NORDIC_NRF_UART_UART_0_IRQ);
    e9aa:	2002      	movs	r0, #2
    e9ac:	f7fc faf2 	bl	af94 <z_arch_irq_enable>
	defined(DT_NORDIC_NRF_UART_UART_0_CTS_PIN)
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
    e9b0:	4630      	mov	r0, r6
    e9b2:	b002      	add	sp, #8
    e9b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e9b8:	40002000 	.word	0x40002000
    e9bc:	40002108 	.word	0x40002108
    e9c0:	20005ee8 	.word	0x20005ee8

0000e9c4 <z_hdlr_uart_err_check>:
		Z_OOPS(Z_SYSCALL_DRIVER_UART(dev, op_)); \
		z_impl_uart_ ## op_((struct device *)dev); \
		return 0; \
	}

UART_SIMPLE(err_check)
    e9c4:	b570      	push	{r4, r5, r6, lr}
    e9c6:	4604      	mov	r4, r0
    e9c8:	9d06      	ldr	r5, [sp, #24]
    e9ca:	f7f1 fc19 	bl	200 <z_object_find>
    e9ce:	4621      	mov	r1, r4
    e9d0:	f009 fc3e 	bl	18250 <z_obj_validation_check.constprop.0>
    e9d4:	b150      	cbz	r0, e9ec <z_hdlr_uart_err_check+0x28>
    e9d6:	490a      	ldr	r1, [pc, #40]	; (ea00 <z_hdlr_uart_err_check+0x3c>)
    e9d8:	480a      	ldr	r0, [pc, #40]	; (ea04 <z_hdlr_uart_err_check+0x40>)
    e9da:	f004 fd50 	bl	1347e <printk>
    e9de:	4628      	mov	r0, r5
    e9e0:	f006 faa1 	bl	14f26 <z_arch_syscall_oops>
		return api->err_check(dev);
    e9e4:	4620      	mov	r0, r4
    e9e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e9ea:	4710      	bx	r2
    e9ec:	6863      	ldr	r3, [r4, #4]
    e9ee:	689a      	ldr	r2, [r3, #8]
    e9f0:	2a00      	cmp	r2, #0
    e9f2:	d1f7      	bne.n	e9e4 <z_hdlr_uart_err_check+0x20>
    e9f4:	4a04      	ldr	r2, [pc, #16]	; (ea08 <z_hdlr_uart_err_check+0x44>)
    e9f6:	4902      	ldr	r1, [pc, #8]	; (ea00 <z_hdlr_uart_err_check+0x3c>)
    e9f8:	4804      	ldr	r0, [pc, #16]	; (ea0c <z_hdlr_uart_err_check+0x48>)
    e9fa:	f004 fd40 	bl	1347e <printk>
    e9fe:	e7ee      	b.n	e9de <z_hdlr_uart_err_check+0x1a>
    ea00:	0001bad7 	.word	0x0001bad7
    ea04:	0001ba44 	.word	0x0001ba44
    ea08:	0001bbe9 	.word	0x0001bbe9
    ea0c:	0001ba73 	.word	0x0001ba73

0000ea10 <z_hdlr_uart_poll_in>:

Z_SYSCALL_HANDLER(uart_poll_in, dev, p_char)
{
    ea10:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ea12:	4604      	mov	r4, r0
    ea14:	460d      	mov	r5, r1
    ea16:	9e08      	ldr	r6, [sp, #32]
	Z_OOPS(Z_SYSCALL_DRIVER_UART(dev, poll_in));
    ea18:	f7f1 fbf2 	bl	200 <z_object_find>
    ea1c:	4621      	mov	r1, r4
    ea1e:	f009 fc17 	bl	18250 <z_obj_validation_check.constprop.0>
    ea22:	b1f0      	cbz	r0, ea62 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2>
    ea24:	4914      	ldr	r1, [pc, #80]	; (ea78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x18>)
    ea26:	4815      	ldr	r0, [pc, #84]	; (ea7c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c>)
    ea28:	f004 fd29 	bl	1347e <printk>
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(p_char, sizeof(unsigned char)));
    ea2c:	4630      	mov	r0, r6
    ea2e:	f006 fa7a 	bl	14f26 <z_arch_syscall_oops>
	return api->poll_in(dev, p_char);
    ea32:	6863      	ldr	r3, [r4, #4]
    ea34:	681b      	ldr	r3, [r3, #0]
    ea36:	4629      	mov	r1, r5
    ea38:	4620      	mov	r0, r4
	return z_impl_uart_poll_in((struct device *)dev,
				  (unsigned char *)p_char);
}
    ea3a:	b002      	add	sp, #8
    ea3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ea40:	4718      	bx	r3
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(p_char, sizeof(unsigned char)));
    ea42:	2201      	movs	r2, #1
    ea44:	4611      	mov	r1, r2
    ea46:	4628      	mov	r0, r5
    ea48:	f006 fa94 	bl	14f74 <z_arch_buffer_validate>
    ea4c:	2800      	cmp	r0, #0
    ea4e:	d0f0      	beq.n	ea32 <z_hdlr_uart_poll_in+0x22>
    ea50:	4b0b      	ldr	r3, [pc, #44]	; (ea80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x20>)
    ea52:	9300      	str	r3, [sp, #0]
    ea54:	462a      	mov	r2, r5
    ea56:	2301      	movs	r3, #1
    ea58:	4907      	ldr	r1, [pc, #28]	; (ea78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x18>)
    ea5a:	480a      	ldr	r0, [pc, #40]	; (ea84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x24>)
    ea5c:	f004 fd0f 	bl	1347e <printk>
    ea60:	e7e4      	b.n	ea2c <z_hdlr_uart_poll_in+0x1c>
	Z_OOPS(Z_SYSCALL_DRIVER_UART(dev, poll_in));
    ea62:	6863      	ldr	r3, [r4, #4]
    ea64:	681a      	ldr	r2, [r3, #0]
    ea66:	2a00      	cmp	r2, #0
    ea68:	d1eb      	bne.n	ea42 <z_hdlr_uart_poll_in+0x32>
    ea6a:	4a07      	ldr	r2, [pc, #28]	; (ea88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x28>)
    ea6c:	4902      	ldr	r1, [pc, #8]	; (ea78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x18>)
    ea6e:	4807      	ldr	r0, [pc, #28]	; (ea8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2c>)
    ea70:	f004 fd05 	bl	1347e <printk>
    ea74:	e7da      	b.n	ea2c <z_hdlr_uart_poll_in+0x1c>
    ea76:	bf00      	nop
    ea78:	0001baed 	.word	0x0001baed
    ea7c:	0001ba44 	.word	0x0001ba44
    ea80:	0001a21f 	.word	0x0001a21f
    ea84:	0001a1c4 	.word	0x0001a1c4
    ea88:	0001bc66 	.word	0x0001bc66
    ea8c:	0001ba73 	.word	0x0001ba73

0000ea90 <z_hdlr_uart_poll_out>:

Z_SYSCALL_HANDLER(uart_poll_out, dev, out_char)
{
    ea90:	b570      	push	{r4, r5, r6, lr}
    ea92:	4604      	mov	r4, r0
    ea94:	460e      	mov	r6, r1
	Z_OOPS(Z_SYSCALL_DRIVER_UART(dev, poll_out));
    ea96:	f7f1 fbb3 	bl	200 <z_object_find>
    ea9a:	4621      	mov	r1, r4
    ea9c:	f009 fbd8 	bl	18250 <z_obj_validation_check.constprop.0>
    eaa0:	4605      	mov	r5, r0
    eaa2:	b160      	cbz	r0, eabe <z_hdlr_uart_poll_out+0x2e>
    eaa4:	490a      	ldr	r1, [pc, #40]	; (ead0 <z_hdlr_uart_poll_out+0x40>)
    eaa6:	480b      	ldr	r0, [pc, #44]	; (ead4 <z_hdlr_uart_poll_out+0x44>)
    eaa8:	f004 fce9 	bl	1347e <printk>
    eaac:	9806      	ldr	r0, [sp, #24]
    eaae:	f006 fa3a 	bl	14f26 <z_arch_syscall_oops>
    eab2:	4a09      	ldr	r2, [pc, #36]	; (ead8 <z_hdlr_uart_poll_out+0x48>)
    eab4:	4906      	ldr	r1, [pc, #24]	; (ead0 <z_hdlr_uart_poll_out+0x40>)
    eab6:	4809      	ldr	r0, [pc, #36]	; (eadc <z_hdlr_uart_poll_out+0x4c>)
    eab8:	f004 fce1 	bl	1347e <printk>
    eabc:	e7f6      	b.n	eaac <z_hdlr_uart_poll_out+0x1c>
    eabe:	6863      	ldr	r3, [r4, #4]
    eac0:	685a      	ldr	r2, [r3, #4]
    eac2:	2a00      	cmp	r2, #0
    eac4:	d0f5      	beq.n	eab2 <z_hdlr_uart_poll_out+0x22>
	api->poll_out(dev, out_char);
    eac6:	4620      	mov	r0, r4
    eac8:	b2f1      	uxtb	r1, r6
    eaca:	4790      	blx	r2
	z_impl_uart_poll_out((struct device *)dev, out_char);

	return 0;
}
    eacc:	4628      	mov	r0, r5
    eace:	bd70      	pop	{r4, r5, r6, pc}
    ead0:	0001bb01 	.word	0x0001bb01
    ead4:	0001ba44 	.word	0x0001ba44
    ead8:	0001bc6e 	.word	0x0001bc6e
    eadc:	0001ba73 	.word	0x0001ba73

0000eae0 <z_hdlr_uart_irq_tx_enable>:

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
UART_SIMPLE_VOID(irq_tx_enable)
    eae0:	b538      	push	{r3, r4, r5, lr}
    eae2:	4604      	mov	r4, r0
    eae4:	f7f1 fb8c 	bl	200 <z_object_find>
    eae8:	4621      	mov	r1, r4
    eaea:	f009 fbb1 	bl	18250 <z_obj_validation_check.constprop.0>
    eaee:	4605      	mov	r5, r0
    eaf0:	b160      	cbz	r0, eb0c <z_hdlr_uart_irq_tx_enable+0x2c>
    eaf2:	490a      	ldr	r1, [pc, #40]	; (eb1c <z_hdlr_uart_irq_tx_enable+0x3c>)
    eaf4:	480a      	ldr	r0, [pc, #40]	; (eb20 <z_hdlr_uart_irq_tx_enable+0x40>)
    eaf6:	f004 fcc2 	bl	1347e <printk>
    eafa:	9806      	ldr	r0, [sp, #24]
    eafc:	f006 fa13 	bl	14f26 <z_arch_syscall_oops>
    eb00:	4a08      	ldr	r2, [pc, #32]	; (eb24 <z_hdlr_uart_irq_tx_enable+0x44>)
    eb02:	4906      	ldr	r1, [pc, #24]	; (eb1c <z_hdlr_uart_irq_tx_enable+0x3c>)
    eb04:	4808      	ldr	r0, [pc, #32]	; (eb28 <z_hdlr_uart_irq_tx_enable+0x48>)
    eb06:	f004 fcba 	bl	1347e <printk>
    eb0a:	e7f6      	b.n	eafa <z_hdlr_uart_irq_tx_enable+0x1a>
    eb0c:	6863      	ldr	r3, [r4, #4]
    eb0e:	69da      	ldr	r2, [r3, #28]
    eb10:	2a00      	cmp	r2, #0
    eb12:	d0f5      	beq.n	eb00 <z_hdlr_uart_irq_tx_enable+0x20>
		api->irq_tx_enable(dev);
    eb14:	4620      	mov	r0, r4
    eb16:	4790      	blx	r2
    eb18:	4628      	mov	r0, r5
    eb1a:	bd38      	pop	{r3, r4, r5, pc}
    eb1c:	0001bb16 	.word	0x0001bb16
    eb20:	0001ba44 	.word	0x0001ba44
    eb24:	0001bc4d 	.word	0x0001bc4d
    eb28:	0001ba73 	.word	0x0001ba73

0000eb2c <z_hdlr_uart_irq_tx_disable>:
UART_SIMPLE_VOID(irq_tx_disable)
    eb2c:	b538      	push	{r3, r4, r5, lr}
    eb2e:	4604      	mov	r4, r0
    eb30:	f7f1 fb66 	bl	200 <z_object_find>
    eb34:	4621      	mov	r1, r4
    eb36:	f009 fb8b 	bl	18250 <z_obj_validation_check.constprop.0>
    eb3a:	4605      	mov	r5, r0
    eb3c:	b160      	cbz	r0, eb58 <z_hdlr_uart_irq_tx_disable+0x2c>
    eb3e:	490a      	ldr	r1, [pc, #40]	; (eb68 <z_hdlr_uart_irq_tx_disable+0x3c>)
    eb40:	480a      	ldr	r0, [pc, #40]	; (eb6c <z_hdlr_uart_irq_tx_disable+0x40>)
    eb42:	f004 fc9c 	bl	1347e <printk>
    eb46:	9806      	ldr	r0, [sp, #24]
    eb48:	f006 f9ed 	bl	14f26 <z_arch_syscall_oops>
    eb4c:	4a08      	ldr	r2, [pc, #32]	; (eb70 <z_hdlr_uart_irq_tx_disable+0x44>)
    eb4e:	4906      	ldr	r1, [pc, #24]	; (eb68 <z_hdlr_uart_irq_tx_disable+0x3c>)
    eb50:	4808      	ldr	r0, [pc, #32]	; (eb74 <z_hdlr_uart_irq_tx_disable+0x48>)
    eb52:	f004 fc94 	bl	1347e <printk>
    eb56:	e7f6      	b.n	eb46 <z_hdlr_uart_irq_tx_disable+0x1a>
    eb58:	6863      	ldr	r3, [r4, #4]
    eb5a:	6a1a      	ldr	r2, [r3, #32]
    eb5c:	2a00      	cmp	r2, #0
    eb5e:	d0f5      	beq.n	eb4c <z_hdlr_uart_irq_tx_disable+0x20>
		api->irq_tx_disable(dev);
    eb60:	4620      	mov	r0, r4
    eb62:	4790      	blx	r2
    eb64:	4628      	mov	r0, r5
    eb66:	bd38      	pop	{r3, r4, r5, pc}
    eb68:	0001bb30 	.word	0x0001bb30
    eb6c:	0001ba44 	.word	0x0001ba44
    eb70:	0001bc3e 	.word	0x0001bc3e
    eb74:	0001ba73 	.word	0x0001ba73

0000eb78 <z_hdlr_uart_irq_rx_enable>:
UART_SIMPLE_VOID(irq_rx_enable)
    eb78:	b538      	push	{r3, r4, r5, lr}
    eb7a:	4604      	mov	r4, r0
    eb7c:	f7f1 fb40 	bl	200 <z_object_find>
    eb80:	4621      	mov	r1, r4
    eb82:	f009 fb65 	bl	18250 <z_obj_validation_check.constprop.0>
    eb86:	4605      	mov	r5, r0
    eb88:	b160      	cbz	r0, eba4 <z_hdlr_uart_irq_rx_enable+0x2c>
    eb8a:	490a      	ldr	r1, [pc, #40]	; (ebb4 <z_hdlr_uart_irq_rx_enable+0x3c>)
    eb8c:	480a      	ldr	r0, [pc, #40]	; (ebb8 <z_hdlr_uart_irq_rx_enable+0x40>)
    eb8e:	f004 fc76 	bl	1347e <printk>
    eb92:	9806      	ldr	r0, [sp, #24]
    eb94:	f006 f9c7 	bl	14f26 <z_arch_syscall_oops>
    eb98:	4a08      	ldr	r2, [pc, #32]	; (ebbc <z_hdlr_uart_irq_rx_enable+0x44>)
    eb9a:	4906      	ldr	r1, [pc, #24]	; (ebb4 <z_hdlr_uart_irq_rx_enable+0x3c>)
    eb9c:	4808      	ldr	r0, [pc, #32]	; (ebc0 <z_hdlr_uart_irq_rx_enable+0x48>)
    eb9e:	f004 fc6e 	bl	1347e <printk>
    eba2:	e7f6      	b.n	eb92 <z_hdlr_uart_irq_rx_enable+0x1a>
    eba4:	6863      	ldr	r3, [r4, #4]
    eba6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    eba8:	2a00      	cmp	r2, #0
    ebaa:	d0f5      	beq.n	eb98 <z_hdlr_uart_irq_rx_enable+0x20>
		api->irq_rx_enable(dev);
    ebac:	4620      	mov	r0, r4
    ebae:	4790      	blx	r2
    ebb0:	4628      	mov	r0, r5
    ebb2:	bd38      	pop	{r3, r4, r5, pc}
    ebb4:	0001bb4b 	.word	0x0001bb4b
    ebb8:	0001ba44 	.word	0x0001ba44
    ebbc:	0001bc30 	.word	0x0001bc30
    ebc0:	0001ba73 	.word	0x0001ba73

0000ebc4 <z_hdlr_uart_irq_rx_disable>:
UART_SIMPLE_VOID(irq_rx_disable)
    ebc4:	b538      	push	{r3, r4, r5, lr}
    ebc6:	4604      	mov	r4, r0
    ebc8:	f7f1 fb1a 	bl	200 <z_object_find>
    ebcc:	4621      	mov	r1, r4
    ebce:	f009 fb3f 	bl	18250 <z_obj_validation_check.constprop.0>
    ebd2:	4605      	mov	r5, r0
    ebd4:	b160      	cbz	r0, ebf0 <z_hdlr_uart_irq_rx_disable+0x2c>
    ebd6:	490a      	ldr	r1, [pc, #40]	; (ec00 <z_hdlr_uart_irq_rx_disable+0x3c>)
    ebd8:	480a      	ldr	r0, [pc, #40]	; (ec04 <z_hdlr_uart_irq_rx_disable+0x40>)
    ebda:	f004 fc50 	bl	1347e <printk>
    ebde:	9806      	ldr	r0, [sp, #24]
    ebe0:	f006 f9a1 	bl	14f26 <z_arch_syscall_oops>
    ebe4:	4a08      	ldr	r2, [pc, #32]	; (ec08 <z_hdlr_uart_irq_rx_disable+0x44>)
    ebe6:	4906      	ldr	r1, [pc, #24]	; (ec00 <z_hdlr_uart_irq_rx_disable+0x3c>)
    ebe8:	4808      	ldr	r0, [pc, #32]	; (ec0c <z_hdlr_uart_irq_rx_disable+0x48>)
    ebea:	f004 fc48 	bl	1347e <printk>
    ebee:	e7f6      	b.n	ebde <z_hdlr_uart_irq_rx_disable+0x1a>
    ebf0:	6863      	ldr	r3, [r4, #4]
    ebf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ebf4:	2a00      	cmp	r2, #0
    ebf6:	d0f5      	beq.n	ebe4 <z_hdlr_uart_irq_rx_disable+0x20>
		api->irq_rx_disable(dev);
    ebf8:	4620      	mov	r0, r4
    ebfa:	4790      	blx	r2
    ebfc:	4628      	mov	r0, r5
    ebfe:	bd38      	pop	{r3, r4, r5, pc}
    ec00:	0001bb65 	.word	0x0001bb65
    ec04:	0001ba44 	.word	0x0001ba44
    ec08:	0001bc21 	.word	0x0001bc21
    ec0c:	0001ba73 	.word	0x0001ba73

0000ec10 <z_hdlr_uart_irq_err_enable>:
UART_SIMPLE_VOID(irq_err_enable)
    ec10:	b538      	push	{r3, r4, r5, lr}
    ec12:	4604      	mov	r4, r0
    ec14:	f7f1 faf4 	bl	200 <z_object_find>
    ec18:	4621      	mov	r1, r4
    ec1a:	f009 fb19 	bl	18250 <z_obj_validation_check.constprop.0>
    ec1e:	4605      	mov	r5, r0
    ec20:	b160      	cbz	r0, ec3c <z_hdlr_uart_irq_err_enable+0x2c>
    ec22:	490a      	ldr	r1, [pc, #40]	; (ec4c <z_hdlr_uart_irq_err_enable+0x3c>)
    ec24:	480a      	ldr	r0, [pc, #40]	; (ec50 <z_hdlr_uart_irq_err_enable+0x40>)
    ec26:	f004 fc2a 	bl	1347e <printk>
    ec2a:	9806      	ldr	r0, [sp, #24]
    ec2c:	f006 f97b 	bl	14f26 <z_arch_syscall_oops>
    ec30:	4a08      	ldr	r2, [pc, #32]	; (ec54 <z_hdlr_uart_irq_err_enable+0x44>)
    ec32:	4906      	ldr	r1, [pc, #24]	; (ec4c <z_hdlr_uart_irq_err_enable+0x3c>)
    ec34:	4808      	ldr	r0, [pc, #32]	; (ec58 <z_hdlr_uart_irq_err_enable+0x48>)
    ec36:	f004 fc22 	bl	1347e <printk>
    ec3a:	e7f6      	b.n	ec2a <z_hdlr_uart_irq_err_enable+0x1a>
    ec3c:	6863      	ldr	r3, [r4, #4]
    ec3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ec40:	2a00      	cmp	r2, #0
    ec42:	d0f5      	beq.n	ec30 <z_hdlr_uart_irq_err_enable+0x20>
		api->irq_err_enable(dev);
    ec44:	4620      	mov	r0, r4
    ec46:	4790      	blx	r2
    ec48:	4628      	mov	r0, r5
    ec4a:	bd38      	pop	{r3, r4, r5, pc}
    ec4c:	0001bb80 	.word	0x0001bb80
    ec50:	0001ba44 	.word	0x0001ba44
    ec54:	0001bc03 	.word	0x0001bc03
    ec58:	0001ba73 	.word	0x0001ba73

0000ec5c <z_hdlr_uart_irq_err_disable>:
UART_SIMPLE_VOID(irq_err_disable)
    ec5c:	b538      	push	{r3, r4, r5, lr}
    ec5e:	4604      	mov	r4, r0
    ec60:	f7f1 face 	bl	200 <z_object_find>
    ec64:	4621      	mov	r1, r4
    ec66:	f009 faf3 	bl	18250 <z_obj_validation_check.constprop.0>
    ec6a:	4605      	mov	r5, r0
    ec6c:	b160      	cbz	r0, ec88 <z_hdlr_uart_irq_err_disable+0x2c>
    ec6e:	490a      	ldr	r1, [pc, #40]	; (ec98 <z_hdlr_uart_irq_err_disable+0x3c>)
    ec70:	480a      	ldr	r0, [pc, #40]	; (ec9c <z_hdlr_uart_irq_err_disable+0x40>)
    ec72:	f004 fc04 	bl	1347e <printk>
    ec76:	9806      	ldr	r0, [sp, #24]
    ec78:	f006 f955 	bl	14f26 <z_arch_syscall_oops>
    ec7c:	4a08      	ldr	r2, [pc, #32]	; (eca0 <z_hdlr_uart_irq_err_disable+0x44>)
    ec7e:	4906      	ldr	r1, [pc, #24]	; (ec98 <z_hdlr_uart_irq_err_disable+0x3c>)
    ec80:	4808      	ldr	r0, [pc, #32]	; (eca4 <z_hdlr_uart_irq_err_disable+0x48>)
    ec82:	f004 fbfc 	bl	1347e <printk>
    ec86:	e7f6      	b.n	ec76 <z_hdlr_uart_irq_err_disable+0x1a>
    ec88:	6863      	ldr	r3, [r4, #4]
    ec8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    ec8c:	2a00      	cmp	r2, #0
    ec8e:	d0f5      	beq.n	ec7c <z_hdlr_uart_irq_err_disable+0x20>
		api->irq_err_disable(dev);
    ec90:	4620      	mov	r0, r4
    ec92:	4790      	blx	r2
    ec94:	4628      	mov	r0, r5
    ec96:	bd38      	pop	{r3, r4, r5, pc}
    ec98:	0001bb9b 	.word	0x0001bb9b
    ec9c:	0001ba44 	.word	0x0001ba44
    eca0:	0001bbf3 	.word	0x0001bbf3
    eca4:	0001ba73 	.word	0x0001ba73

0000eca8 <z_hdlr_uart_irq_is_pending>:
UART_SIMPLE(irq_is_pending)
    eca8:	b570      	push	{r4, r5, r6, lr}
    ecaa:	4604      	mov	r4, r0
    ecac:	9d06      	ldr	r5, [sp, #24]
    ecae:	f7f1 faa7 	bl	200 <z_object_find>
    ecb2:	4621      	mov	r1, r4
    ecb4:	f009 facc 	bl	18250 <z_obj_validation_check.constprop.0>
    ecb8:	b150      	cbz	r0, ecd0 <z_hdlr_uart_irq_is_pending+0x28>
    ecba:	490a      	ldr	r1, [pc, #40]	; (ece4 <z_hdlr_uart_irq_is_pending+0x3c>)
    ecbc:	480a      	ldr	r0, [pc, #40]	; (ece8 <z_hdlr_uart_irq_is_pending+0x40>)
    ecbe:	f004 fbde 	bl	1347e <printk>
    ecc2:	4628      	mov	r0, r5
    ecc4:	f006 f92f 	bl	14f26 <z_arch_syscall_oops>
		return api->irq_is_pending(dev);
    ecc8:	4620      	mov	r0, r4
    ecca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ecce:	4710      	bx	r2
    ecd0:	6863      	ldr	r3, [r4, #4]
    ecd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    ecd4:	2a00      	cmp	r2, #0
    ecd6:	d1f7      	bne.n	ecc8 <z_hdlr_uart_irq_is_pending+0x20>
    ecd8:	4a04      	ldr	r2, [pc, #16]	; (ecec <z_hdlr_uart_irq_is_pending+0x44>)
    ecda:	4902      	ldr	r1, [pc, #8]	; (ece4 <z_hdlr_uart_irq_is_pending+0x3c>)
    ecdc:	4804      	ldr	r0, [pc, #16]	; (ecf0 <z_hdlr_uart_irq_is_pending+0x48>)
    ecde:	f004 fbce 	bl	1347e <printk>
    ece2:	e7ee      	b.n	ecc2 <z_hdlr_uart_irq_is_pending+0x1a>
    ece4:	0001bbb7 	.word	0x0001bbb7
    ece8:	0001ba44 	.word	0x0001ba44
    ecec:	0001bc12 	.word	0x0001bc12
    ecf0:	0001ba73 	.word	0x0001ba73

0000ecf4 <z_hdlr_uart_irq_update>:
UART_SIMPLE(irq_update)
    ecf4:	b570      	push	{r4, r5, r6, lr}
    ecf6:	4604      	mov	r4, r0
    ecf8:	9d06      	ldr	r5, [sp, #24]
    ecfa:	f7f1 fa81 	bl	200 <z_object_find>
    ecfe:	4621      	mov	r1, r4
    ed00:	f009 faa6 	bl	18250 <z_obj_validation_check.constprop.0>
    ed04:	b150      	cbz	r0, ed1c <z_hdlr_uart_irq_update+0x28>
    ed06:	490a      	ldr	r1, [pc, #40]	; (ed30 <z_hdlr_uart_irq_update+0x3c>)
    ed08:	480a      	ldr	r0, [pc, #40]	; (ed34 <z_hdlr_uart_irq_update+0x40>)
    ed0a:	f004 fbb8 	bl	1347e <printk>
    ed0e:	4628      	mov	r0, r5
    ed10:	f006 f909 	bl	14f26 <z_arch_syscall_oops>
		return api->irq_update(dev);
    ed14:	4620      	mov	r0, r4
    ed16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ed1a:	4710      	bx	r2
    ed1c:	6863      	ldr	r3, [r4, #4]
    ed1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    ed20:	2a00      	cmp	r2, #0
    ed22:	d1f7      	bne.n	ed14 <z_hdlr_uart_irq_update+0x20>
    ed24:	4a04      	ldr	r2, [pc, #16]	; (ed38 <z_hdlr_uart_irq_update+0x44>)
    ed26:	4902      	ldr	r1, [pc, #8]	; (ed30 <z_hdlr_uart_irq_update+0x3c>)
    ed28:	4804      	ldr	r0, [pc, #16]	; (ed3c <z_hdlr_uart_irq_update+0x48>)
    ed2a:	f004 fba8 	bl	1347e <printk>
    ed2e:	e7ee      	b.n	ed0e <z_hdlr_uart_irq_update+0x1a>
    ed30:	0001bbd2 	.word	0x0001bbd2
    ed34:	0001ba44 	.word	0x0001ba44
    ed38:	0001bc5b 	.word	0x0001bc5b
    ed3c:	0001ba73 	.word	0x0001ba73

0000ed40 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static u16_t rng_pool_get(struct rng_pool *rngp, u8_t *buf, u16_t len)
{
    ed40:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t last  = rngp->last;
    ed42:	7883      	ldrb	r3, [r0, #2]
	u32_t mask  = rngp->mask;
    ed44:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
    ed46:	f04f 0420 	mov.w	r4, #32
    ed4a:	f3ef 8e11 	mrs	lr, BASEPRI
    ed4e:	f384 8811 	msr	BASEPRI, r4
    ed52:	f3bf 8f6f 	isb	sy
	u32_t first, available;
	u32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
    ed56:	7806      	ldrb	r6, [r0, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
    ed58:	f890 c001 	ldrb.w	ip, [r0, #1]

	available = (last - first) & mask;
    ed5c:	1b9b      	subs	r3, r3, r6
    ed5e:	403b      	ands	r3, r7
	if (available < len) {
    ed60:	429a      	cmp	r2, r3
		len = available;
    ed62:	bf88      	it	hi
    ed64:	b29a      	uxthhi	r2, r3

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
    ed66:	18b4      	adds	r4, r6, r2
    ed68:	403c      	ands	r4, r7
	first = rngp->first_alloc;
    ed6a:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
    ed6c:	7004      	strb	r4, [r0, #0]
	__asm__ volatile(
    ed6e:	f38e 8811 	msr	BASEPRI, lr
    ed72:	f3bf 8f6f 	isb	sy
    ed76:	440a      	add	r2, r1
	u8_t *dst   = buf;
    ed78:	460c      	mov	r4, r1
	irq_unlock(key);

	while (likely(len--)) {
    ed7a:	42a2      	cmp	r2, r4
    ed7c:	d11a      	bne.n	edb4 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
    ed7e:	4566      	cmp	r6, ip
    ed80:	d10d      	bne.n	ed9e <rng_pool_get+0x5e>
	__asm__ volatile(
    ed82:	f04f 0520 	mov.w	r5, #32
    ed86:	f3ef 8211 	mrs	r2, BASEPRI
    ed8a:	f385 8811 	msr	BASEPRI, r5
    ed8e:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
    ed92:	7805      	ldrb	r5, [r0, #0]
    ed94:	7045      	strb	r5, [r0, #1]
	__asm__ volatile(
    ed96:	f382 8811 	msr	BASEPRI, r2
    ed9a:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
    ed9e:	1a64      	subs	r4, r4, r1
    eda0:	b2a2      	uxth	r2, r4
	available = available - len;
	if (available <= rngp->threshold) {
    eda2:	7901      	ldrb	r1, [r0, #4]
	available = available - len;
    eda4:	1a9c      	subs	r4, r3, r2
	if (available <= rngp->threshold) {
    eda6:	42a1      	cmp	r1, r4
    return (uint32_t *)((uint8_t *)NRF_RNG + rng_task);
}

__STATIC_INLINE void nrf_rng_task_trigger(nrf_rng_task_t rng_task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
    eda8:	bf22      	ittt	cs
    edaa:	4b07      	ldrcs	r3, [pc, #28]	; (edc8 <rng_pool_get+0x88>)
    edac:	2101      	movcs	r1, #1
    edae:	6019      	strcs	r1, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG_TASK_START);
	}

	return len;
}
    edb0:	4610      	mov	r0, r2
    edb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
    edb4:	eb00 0e05 	add.w	lr, r0, r5
		first = (first + 1) & mask;
    edb8:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
    edba:	f89e e005 	ldrb.w	lr, [lr, #5]
    edbe:	f804 eb01 	strb.w	lr, [r4], #1
		first = (first + 1) & mask;
    edc2:	403d      	ands	r5, r7
    edc4:	e7d9      	b.n	ed7a <rng_pool_get+0x3a>
    edc6:	bf00      	nop
    edc8:	4000d000 	.word	0x4000d000

0000edcc <entropy_nrf5_get_entropy>:
		k_sem_give(&entropy_nrf5_data.sem_sync);
	}
}

static int entropy_nrf5_get_entropy(struct device *device, u8_t *buf, u16_t len)
{
    edcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    edd0:	4d11      	ldr	r5, [pc, #68]	; (ee18 <entropy_nrf5_get_entropy+0x4c>)
    edd2:	460e      	mov	r6, r1
    edd4:	4614      	mov	r4, r2

	while (len) {
		u16_t bytes;

		k_sem_take(&entropy_nrf5_data.sem_lock, K_FOREVER);
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    edd6:	f105 0845 	add.w	r8, r5, #69	; 0x45
    edda:	f105 0918 	add.w	r9, r5, #24
	while (len) {
    edde:	b914      	cbnz	r4, ede6 <entropy_nrf5_get_entropy+0x1a>
		len -= bytes;
		buf += bytes;
	}

	return 0;
}
    ede0:	4620      	mov	r0, r4
    ede2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ede6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    edea:	4628      	mov	r0, r5
    edec:	f001 f9bc 	bl	10168 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    edf0:	4622      	mov	r2, r4
    edf2:	4631      	mov	r1, r6
    edf4:	4640      	mov	r0, r8
    edf6:	f7ff ffa3 	bl	ed40 <rng_pool_get>
    edfa:	4607      	mov	r7, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    edfc:	4628      	mov	r0, r5
    edfe:	f001 f96d 	bl	100dc <z_impl_k_sem_give>
		if (bytes == 0U) {
    ee02:	b92f      	cbnz	r7, ee10 <entropy_nrf5_get_entropy+0x44>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    ee04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ee08:	4648      	mov	r0, r9
    ee0a:	f001 f9ad 	bl	10168 <z_impl_k_sem_take>
    ee0e:	e7e6      	b.n	edde <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
    ee10:	1be4      	subs	r4, r4, r7
    ee12:	b2a4      	uxth	r4, r4
		buf += bytes;
    ee14:	443e      	add	r6, r7
    ee16:	e7e2      	b.n	edde <entropy_nrf5_get_entropy+0x12>
    ee18:	2000463c 	.word	0x2000463c

0000ee1c <random_byte_get>:
{
    ee1c:	b082      	sub	sp, #8
	__asm__ volatile(
    ee1e:	f04f 0320 	mov.w	r3, #32
    ee22:	f3ef 8211 	mrs	r2, BASEPRI
    ee26:	f383 8811 	msr	BASEPRI, r3
    ee2a:	f3bf 8f6f 	isb	sy
#endif
}

__STATIC_INLINE bool nrf_rng_event_get(nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
    ee2e:	4b0a      	ldr	r3, [pc, #40]	; (ee58 <random_byte_get+0x3c>)
    ee30:	6819      	ldr	r1, [r3, #0]
	if (nrf_rng_event_get(NRF_RNG_EVENT_VALRDY)) {
    ee32:	b171      	cbz	r1, ee52 <random_byte_get+0x36>
     NRF_RNG->SHORTS &= ~rng_short_mask;
}

__STATIC_INLINE uint8_t nrf_rng_random_value_get(void)
{
    return (uint8_t)(NRF_RNG->VALUE & RNG_VALUE_VALUE_Msk);
    ee34:	4909      	ldr	r1, [pc, #36]	; (ee5c <random_byte_get+0x40>)
    ee36:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
    ee3a:	2100      	movs	r1, #0
    ee3c:	6019      	str	r1, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
    ee3e:	681b      	ldr	r3, [r3, #0]
    ee40:	9301      	str	r3, [sp, #4]
    (void)dummy;
    ee42:	9b01      	ldr	r3, [sp, #4]
		retval = nrf_rng_random_value_get();
    ee44:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
    ee46:	f382 8811 	msr	BASEPRI, r2
    ee4a:	f3bf 8f6f 	isb	sy
}
    ee4e:	b002      	add	sp, #8
    ee50:	4770      	bx	lr
	int retval = -EAGAIN;
    ee52:	f06f 000a 	mvn.w	r0, #10
    ee56:	e7f6      	b.n	ee46 <random_byte_get+0x2a>
    ee58:	4000d100 	.word	0x4000d100
    ee5c:	4000d000 	.word	0x4000d000

0000ee60 <entropy_nrf5_get_entropy_isr>:
	u16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    ee60:	07db      	lsls	r3, r3, #31
{
    ee62:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    ee66:	4688      	mov	r8, r1
    ee68:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    ee6a:	d405      	bmi.n	ee78 <entropy_nrf5_get_entropy_isr+0x18>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
    ee6c:	4820      	ldr	r0, [pc, #128]	; (eef0 <entropy_nrf5_get_entropy_isr+0x90>)
    ee6e:	f7ff ff67 	bl	ed40 <rng_pool_get>
			irq_enable(RNG_IRQn);
		}
	}

	return cnt;
}
    ee72:	b002      	add	sp, #8
    ee74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
    ee78:	2a00      	cmp	r2, #0
    ee7a:	d032      	beq.n	eee2 <entropy_nrf5_get_entropy_isr+0x82>
	__asm__ volatile(
    ee7c:	f04f 0320 	mov.w	r3, #32
    ee80:	f3ef 8511 	mrs	r5, BASEPRI
    ee84:	f383 8811 	msr	BASEPRI, r3
    ee88:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(RNG_IRQn);
    ee8c:	200d      	movs	r0, #13
    ee8e:	f7fc f8a5 	bl	afdc <z_arch_irq_is_enabled>
    ee92:	4607      	mov	r7, r0
		irq_disable(RNG_IRQn);
    ee94:	200d      	movs	r0, #13
    ee96:	f7fc f88d 	bl	afb4 <z_arch_irq_disable>
	__asm__ volatile(
    ee9a:	f385 8811 	msr	BASEPRI, r5
    ee9e:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
    eea2:	4e14      	ldr	r6, [pc, #80]	; (eef4 <entropy_nrf5_get_entropy_isr+0x94>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    eea4:	f8df 9054 	ldr.w	r9, [pc, #84]	; eefc <entropy_nrf5_get_entropy_isr+0x9c>
    eea8:	2200      	movs	r2, #0
    eeaa:	6032      	str	r2, [r6, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
    eeac:	6832      	ldr	r2, [r6, #0]
    eeae:	9201      	str	r2, [sp, #4]
    (void)dummy;
    eeb0:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
    eeb2:	4a11      	ldr	r2, [pc, #68]	; (eef8 <entropy_nrf5_get_entropy_isr+0x98>)
    eeb4:	2101      	movs	r1, #1
    eeb6:	6011      	str	r1, [r2, #0]
    eeb8:	4625      	mov	r5, r4
    eeba:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    return (bool) * ((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
    eebe:	6833      	ldr	r3, [r6, #0]
			while (!nrf_rng_event_get(NRF_RNG_EVENT_VALRDY)) {
    eec0:	b18b      	cbz	r3, eee6 <entropy_nrf5_get_entropy_isr+0x86>
			byte = random_byte_get();
    eec2:	f7ff ffab 	bl	ee1c <random_byte_get>
			if (byte < 0) {
    eec6:	2800      	cmp	r0, #0
    eec8:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    eecc:	dbf7      	blt.n	eebe <entropy_nrf5_get_entropy_isr+0x5e>
    eece:	3d01      	subs	r5, #1
    eed0:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
    eed2:	f808 0005 	strb.w	r0, [r8, r5]
		} while (len);
    eed6:	2d00      	cmp	r5, #0
    eed8:	d1f1      	bne.n	eebe <entropy_nrf5_get_entropy_isr+0x5e>
		if (irq_enabled) {
    eeda:	b117      	cbz	r7, eee2 <entropy_nrf5_get_entropy_isr+0x82>
			irq_enable(RNG_IRQn);
    eedc:	200d      	movs	r0, #13
    eede:	f7fc f859 	bl	af94 <z_arch_irq_enable>
	return cnt;
    eee2:	4620      	mov	r0, r4
    eee4:	e7c5      	b.n	ee72 <entropy_nrf5_get_entropy_isr+0x12>
				__WFE();
    eee6:	bf20      	wfe
				__SEV();
    eee8:	bf40      	sev
				__WFE();
    eeea:	bf20      	wfe
    eeec:	e7e7      	b.n	eebe <entropy_nrf5_get_entropy_isr+0x5e>
    eeee:	bf00      	nop
    eef0:	2000466c 	.word	0x2000466c
    eef4:	4000d100 	.word	0x4000d100
    eef8:	4000d000 	.word	0x4000d000
    eefc:	e000e100 	.word	0xe000e100

0000ef00 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
    ef00:	b537      	push	{r0, r1, r2, r4, r5, lr}
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    ef02:	4c1b      	ldr	r4, [pc, #108]	; (ef70 <entropy_nrf5_init+0x70>)
    ef04:	2201      	movs	r2, #1
    ef06:	4611      	mov	r1, r2
    ef08:	4620      	mov	r0, r4
    ef0a:	f009 fc31 	bl	18770 <z_impl_k_sem_init>
    ef0e:	f104 0018 	add.w	r0, r4, #24
    ef12:	2201      	movs	r2, #1
    ef14:	2100      	movs	r1, #0
    ef16:	f009 fc2b 	bl	18770 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
    ef1a:	f240 4307 	movw	r3, #1031	; 0x407
    ef1e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
    ef22:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    ef26:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
    ef28:	230c      	movs	r3, #12
    ef2a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
    ef2e:	2500      	movs	r5, #0
    NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

__STATIC_INLINE void nrf_rng_error_correction_disable(void)
{
    NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
    ef30:	4b10      	ldr	r3, [pc, #64]	; (ef74 <entropy_nrf5_init+0x74>)
    ef32:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
    ef36:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
    ef3a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    ef3e:	f022 0201 	bic.w	r2, r2, #1
    ef42:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
    ef46:	4a0c      	ldr	r2, [pc, #48]	; (ef78 <entropy_nrf5_init+0x78>)
    ef48:	6015      	str	r5, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
    ef4a:	6812      	ldr	r2, [r2, #0]
    ef4c:	9201      	str	r2, [sp, #4]
    (void)dummy;
    ef4e:	9a01      	ldr	r2, [sp, #4]
    NRF_RNG->INTENSET = rng_int_mask;
    ef50:	2201      	movs	r2, #1
    ef52:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG_TASK_START);

	IRQ_CONNECT(RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr,
    ef56:	2105      	movs	r1, #5
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
    ef58:	601a      	str	r2, [r3, #0]
    ef5a:	200d      	movs	r0, #13
    ef5c:	462a      	mov	r2, r5
    ef5e:	f7fc f84b 	bl	aff8 <z_irq_priority_set>
		    &entropy_nrf5_data, 0);
	irq_enable(RNG_IRQn);
    ef62:	200d      	movs	r0, #13
    ef64:	f7fc f816 	bl	af94 <z_arch_irq_enable>

	return 0;
}
    ef68:	4628      	mov	r0, r5
    ef6a:	b003      	add	sp, #12
    ef6c:	bd30      	pop	{r4, r5, pc}
    ef6e:	bf00      	nop
    ef70:	2000463c 	.word	0x2000463c
    ef74:	4000d000 	.word	0x4000d000
    ef78:	4000d100 	.word	0x4000d100

0000ef7c <isr>:
{
    ef7c:	b510      	push	{r4, lr}
	byte = random_byte_get();
    ef7e:	f7ff ff4d 	bl	ee1c <random_byte_get>
	if (byte < 0) {
    ef82:	2800      	cmp	r0, #0
    ef84:	db20      	blt.n	efc8 <isr+0x4c>
	u8_t last  = rngp->last;
    ef86:	4b17      	ldr	r3, [pc, #92]	; (efe4 <isr+0x68>)
    ef88:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
    ef8c:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	u8_t mask  = rngp->mask;
    ef90:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
    ef94:	1a51      	subs	r1, r2, r1
    ef96:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
    ef9a:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
    ef9c:	d10d      	bne.n	efba <isr+0x3e>
	u8_t last  = rngp->last;
    ef9e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
    efa2:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	u8_t mask  = rngp->mask;
    efa6:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
    efaa:	1a51      	subs	r1, r2, r1
    efac:	ea34 0101 	bics.w	r1, r4, r1
    efb0:	d10b      	bne.n	efca <isr+0x4e>
    efb2:	4b0d      	ldr	r3, [pc, #52]	; (efe8 <isr+0x6c>)
    efb4:	2201      	movs	r2, #1
    efb6:	601a      	str	r2, [r3, #0]
    efb8:	e00e      	b.n	efd8 <isr+0x5c>
	rngp->buffer[last] = byte;
    efba:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
    efbc:	3201      	adds	r2, #1
    efbe:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
    efc0:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
    efc4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
    efc8:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
    efca:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
    efcc:	3201      	adds	r2, #1
    efce:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
    efd0:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
    efd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    efd8:	4804      	ldr	r0, [pc, #16]	; (efec <isr+0x70>)
}
    efda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    efde:	f001 b87d 	b.w	100dc <z_impl_k_sem_give>
    efe2:	bf00      	nop
    efe4:	2000463c 	.word	0x2000463c
    efe8:	4000d004 	.word	0x4000d004
    efec:	20004654 	.word	0x20004654

0000eff0 <z_hdlr_entropy_get_entropy>:

#include <entropy.h>
#include <syscall_handler.h>

Z_SYSCALL_HANDLER(entropy_get_entropy, dev, buffer, len)
{
    eff0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    eff4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    eff6:	460d      	mov	r5, r1
    eff8:	4616      	mov	r6, r2
    effa:	4604      	mov	r4, r0
	Z_OOPS(Z_SYSCALL_DRIVER_ENTROPY(dev, get_entropy));
    effc:	f7f1 f900 	bl	200 <z_object_find>
					enum k_objects otype,
					enum _obj_init_check init)
{
	int ret;

	ret = z_object_validate(ko, otype, init);
    f000:	2200      	movs	r2, #0
    f002:	211a      	movs	r1, #26
    f004:	4680      	mov	r8, r0
    f006:	f002 f8a9 	bl	1115c <z_object_validate>

#ifdef CONFIG_PRINTK
	if (ret != 0) {
    f00a:	b320      	cbz	r0, f056 <z_hdlr_entropy_get_entropy+0x66>
		z_dump_object_error(ret, obj, ko, otype);
    f00c:	4621      	mov	r1, r4
    f00e:	231a      	movs	r3, #26
    f010:	4642      	mov	r2, r8
    f012:	f002 f853 	bl	110bc <z_dump_object_error>
    f016:	4915      	ldr	r1, [pc, #84]	; (f06c <z_hdlr_entropy_get_entropy+0x7c>)
    f018:	4815      	ldr	r0, [pc, #84]	; (f070 <z_hdlr_entropy_get_entropy+0x80>)
    f01a:	f004 fa30 	bl	1347e <printk>
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(buffer, len));
    f01e:	4638      	mov	r0, r7
    f020:	f005 ff81 	bl	14f26 <z_arch_syscall_oops>
    f024:	6863      	ldr	r3, [r4, #4]
    f026:	681b      	ldr	r3, [r3, #0]
    f028:	b2b2      	uxth	r2, r6
    f02a:	4629      	mov	r1, r5
    f02c:	4620      	mov	r0, r4
	return z_impl_entropy_get_entropy((struct device *)dev, (u8_t *)buffer,
					 len);
}
    f02e:	b002      	add	sp, #8
    f030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f034:	4718      	bx	r3
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(buffer, len));
    f036:	2201      	movs	r2, #1
    f038:	4631      	mov	r1, r6
    f03a:	4628      	mov	r0, r5
    f03c:	f005 ff9a 	bl	14f74 <z_arch_buffer_validate>
    f040:	2800      	cmp	r0, #0
    f042:	d0ef      	beq.n	f024 <z_hdlr_entropy_get_entropy+0x34>
    f044:	4b0b      	ldr	r3, [pc, #44]	; (f074 <z_hdlr_entropy_get_entropy+0x84>)
    f046:	9300      	str	r3, [sp, #0]
    f048:	462a      	mov	r2, r5
    f04a:	4633      	mov	r3, r6
    f04c:	4907      	ldr	r1, [pc, #28]	; (f06c <z_hdlr_entropy_get_entropy+0x7c>)
    f04e:	480a      	ldr	r0, [pc, #40]	; (f078 <z_hdlr_entropy_get_entropy+0x88>)
    f050:	f004 fa15 	bl	1347e <printk>
    f054:	e7e3      	b.n	f01e <z_hdlr_entropy_get_entropy+0x2e>
	Z_OOPS(Z_SYSCALL_DRIVER_ENTROPY(dev, get_entropy));
    f056:	6863      	ldr	r3, [r4, #4]
    f058:	681a      	ldr	r2, [r3, #0]
    f05a:	2a00      	cmp	r2, #0
    f05c:	d1eb      	bne.n	f036 <z_hdlr_entropy_get_entropy+0x46>
    f05e:	4a07      	ldr	r2, [pc, #28]	; (f07c <z_hdlr_entropy_get_entropy+0x8c>)
    f060:	4902      	ldr	r1, [pc, #8]	; (f06c <z_hdlr_entropy_get_entropy+0x7c>)
    f062:	4807      	ldr	r0, [pc, #28]	; (f080 <z_hdlr_entropy_get_entropy+0x90>)
    f064:	f004 fa0b 	bl	1347e <printk>
    f068:	e7d9      	b.n	f01e <z_hdlr_entropy_get_entropy+0x2e>
    f06a:	bf00      	nop
    f06c:	0001bc77 	.word	0x0001bc77
    f070:	0001ba44 	.word	0x0001ba44
    f074:	0001a21f 	.word	0x0001a21f
    f078:	0001a1c4 	.word	0x0001a1c4
    f07c:	0001bc92 	.word	0x0001bc92
    f080:	0001ba73 	.word	0x0001ba73

0000f084 <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
    f084:	4b0b      	ldr	r3, [pc, #44]	; (f0b4 <z_sys_device_do_config_level+0x30>)
{
    f086:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
    f088:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    f08c:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    f08e:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
    f090:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    f094:	42a5      	cmp	r5, r4
    f096:	d800      	bhi.n	f09a <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
    f098:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
    f09a:	6823      	ldr	r3, [r4, #0]
    f09c:	4620      	mov	r0, r4
    f09e:	685b      	ldr	r3, [r3, #4]
    f0a0:	4798      	blx	r3
		if (retval != 0) {
    f0a2:	b110      	cbz	r0, f0aa <z_sys_device_do_config_level+0x26>
			info->driver_api = NULL;
    f0a4:	6066      	str	r6, [r4, #4]
								info++) {
    f0a6:	340c      	adds	r4, #12
    f0a8:	e7f4      	b.n	f094 <z_sys_device_do_config_level+0x10>
			z_object_init(info);
    f0aa:	4620      	mov	r0, r4
    f0ac:	f009 fdff 	bl	18cae <z_object_init>
    f0b0:	e7f9      	b.n	f0a6 <z_sys_device_do_config_level+0x22>
    f0b2:	bf00      	nop
    f0b4:	000193b0 	.word	0x000193b0

0000f0b8 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    f0b8:	4b10      	ldr	r3, [pc, #64]	; (f0fc <z_impl_device_get_binding+0x44>)
{
    f0ba:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    f0bc:	4c10      	ldr	r4, [pc, #64]	; (f100 <z_impl_device_get_binding+0x48>)
{
    f0be:	4605      	mov	r5, r0
    f0c0:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    f0c2:	429c      	cmp	r4, r3
    f0c4:	d104      	bne.n	f0d0 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    f0c6:	4c0e      	ldr	r4, [pc, #56]	; (f100 <z_impl_device_get_binding+0x48>)
    f0c8:	42b4      	cmp	r4, r6
    f0ca:	d109      	bne.n	f0e0 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    f0cc:	2400      	movs	r4, #0
    f0ce:	e012      	b.n	f0f6 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
    f0d0:	6862      	ldr	r2, [r4, #4]
    f0d2:	b11a      	cbz	r2, f0dc <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
    f0d4:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    f0d6:	6812      	ldr	r2, [r2, #0]
    f0d8:	42aa      	cmp	r2, r5
    f0da:	d00c      	beq.n	f0f6 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    f0dc:	340c      	adds	r4, #12
    f0de:	e7f0      	b.n	f0c2 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
    f0e0:	6863      	ldr	r3, [r4, #4]
    f0e2:	b90b      	cbnz	r3, f0e8 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    f0e4:	340c      	adds	r4, #12
    f0e6:	e7ef      	b.n	f0c8 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
    f0e8:	6823      	ldr	r3, [r4, #0]
    f0ea:	4628      	mov	r0, r5
    f0ec:	6819      	ldr	r1, [r3, #0]
    f0ee:	f7f3 f995 	bl	241c <strcmp>
    f0f2:	2800      	cmp	r0, #0
    f0f4:	d1f6      	bne.n	f0e4 <z_impl_device_get_binding+0x2c>
}
    f0f6:	4620      	mov	r0, r4
    f0f8:	bd70      	pop	{r4, r5, r6, pc}
    f0fa:	bf00      	nop
    f0fc:	20011b0c 	.word	0x20011b0c
    f100:	20011a1c 	.word	0x20011a1c

0000f104 <z_impl_z_errno>:
int *z_impl_z_errno(void)
{
	/* Initialized to the lowest address in the stack so the thread can
	 * directly read/write it
	 */
	return &_current->userspace_local_data->errno_var;
    f104:	4b01      	ldr	r3, [pc, #4]	; (f10c <z_impl_z_errno+0x8>)
    f106:	689b      	ldr	r3, [r3, #8]
}
    f108:	6d58      	ldr	r0, [r3, #84]	; 0x54
    f10a:	4770      	bx	lr
    f10c:	200057f0 	.word	0x200057f0

0000f110 <z_hdlr_z_errno>:
	return &_current->userspace_local_data->errno_var;
    f110:	4b01      	ldr	r3, [pc, #4]	; (f118 <z_hdlr_z_errno+0x8>)
    f112:	689b      	ldr	r3, [r3, #8]

Z_SYSCALL_HANDLER0_SIMPLE(z_errno);
    f114:	6d58      	ldr	r0, [r3, #84]	; 0x54
    f116:	4770      	bx	lr
    f118:	200057f0 	.word	0x200057f0

0000f11c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    f11c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    f11e:	4d0b      	ldr	r5, [pc, #44]	; (f14c <idle+0x30>)
	__asm__ volatile(
    f120:	f04f 0220 	mov.w	r2, #32
    f124:	f3ef 8311 	mrs	r3, BASEPRI
    f128:	f382 8811 	msr	BASEPRI, r2
    f12c:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    f130:	f009 fc4a 	bl	189c8 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    f134:	2101      	movs	r1, #1
    f136:	2802      	cmp	r0, #2
	s32_t ticks = z_get_next_timeout_expiry();
    f138:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    f13a:	bfd8      	it	le
    f13c:	4608      	movle	r0, r1
    f13e:	f009 fc53 	bl	189e8 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    f142:	622c      	str	r4, [r5, #32]
	k_cpu_idle();
    f144:	f7fb fff2 	bl	b12c <k_cpu_idle>
    f148:	e7ea      	b.n	f120 <idle+0x4>
    f14a:	bf00      	nop
    f14c:	200057f0 	.word	0x200057f0

0000f150 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(&__bss_start, 0,
    f150:	4802      	ldr	r0, [pc, #8]	; (f15c <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
    f152:	4a03      	ldr	r2, [pc, #12]	; (f160 <z_bss_zero+0x10>)
    f154:	2100      	movs	r1, #0
    f156:	1a12      	subs	r2, r2, r0
    f158:	f7f3 b94b 	b.w	23f2 <memset>
    f15c:	20002400 	.word	0x20002400
    f160:	20005eec 	.word	0x20005eec

0000f164 <z_data_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    f164:	4809      	ldr	r0, [pc, #36]	; (f18c <z_data_copy+0x28>)
    f166:	4a0a      	ldr	r2, [pc, #40]	; (f190 <z_data_copy+0x2c>)
    f168:	490a      	ldr	r1, [pc, #40]	; (f194 <z_data_copy+0x30>)
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    f16a:	b508      	push	{r3, lr}
    f16c:	1a12      	subs	r2, r2, r0
    f16e:	f7f3 f905 	bl	237c <memcpy>
    f172:	4a09      	ldr	r2, [pc, #36]	; (f198 <z_data_copy+0x34>)
    f174:	4909      	ldr	r1, [pc, #36]	; (f19c <z_data_copy+0x38>)
    f176:	480a      	ldr	r0, [pc, #40]	; (f1a0 <z_data_copy+0x3c>)
    f178:	f7f3 f900 	bl	237c <memcpy>
    f17c:	4809      	ldr	r0, [pc, #36]	; (f1a4 <z_data_copy+0x40>)
    f17e:	4a0a      	ldr	r2, [pc, #40]	; (f1a8 <z_data_copy+0x44>)
    f180:	490a      	ldr	r1, [pc, #40]	; (f1ac <z_data_copy+0x48>)
    f182:	1a12      	subs	r2, r2, r0
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 ((u32_t) &_app_smem_end - (u32_t) &_app_smem_start));
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    f184:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f188:	f7f3 b8f8 	b.w	237c <memcpy>
    f18c:	2000c610 	.word	0x2000c610
    f190:	20014800 	.word	0x20014800
    f194:	0001ed48 	.word	0x0001ed48
    f198:	00002000 	.word	0x00002000
    f19c:	0001c948 	.word	0x0001c948
    f1a0:	20000000 	.word	0x20000000
    f1a4:	20002000 	.word	0x20002000
    f1a8:	20002400 	.word	0x20002400
    f1ac:	0001e948 	.word	0x0001e948

0000f1b0 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    f1b0:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    f1b2:	2002      	movs	r0, #2
    f1b4:	f7ff ff66 	bl	f084 <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    f1b8:	4807      	ldr	r0, [pc, #28]	; (f1d8 <bg_thread_main+0x28>)
    f1ba:	f004 f960 	bl	1347e <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    f1be:	2003      	movs	r0, #3
    f1c0:	f7ff ff60 	bl	f084 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
    f1c4:	f001 fa1a 	bl	105fc <z_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    f1c8:	f7f5 ff1e 	bl	5008 <main>

	/* Mark nonessenrial since main() has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    f1cc:	4a03      	ldr	r2, [pc, #12]	; (f1dc <bg_thread_main+0x2c>)
    f1ce:	7b13      	ldrb	r3, [r2, #12]
    f1d0:	f023 0301 	bic.w	r3, r3, #1
    f1d4:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    f1d6:	bd08      	pop	{r3, pc}
    f1d8:	0001bc9e 	.word	0x0001bc9e
    f1dc:	20004714 	.word	0x20004714

0000f1e0 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    f1e0:	b580      	push	{r7, lr}
    f1e2:	b0a8      	sub	sp, #160	; 0xa0
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	if (IS_ENABLED(CONFIG_LOG)) {
		log_core_init();
    f1e4:	f7f7 fca8 	bl	6b38 <log_core_init>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    f1e8:	4b3d      	ldr	r3, [pc, #244]	; (f2e0 <z_cstart+0x100>)
    f1ea:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    f1ee:	4b3d      	ldr	r3, [pc, #244]	; (f2e4 <z_cstart+0x104>)
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
    f1f0:	4e3d      	ldr	r6, [pc, #244]	; (f2e8 <z_cstart+0x108>)
    f1f2:	695a      	ldr	r2, [r3, #20]
	_kernel.ready_q.cache = _main_thread;
    f1f4:	4d3d      	ldr	r5, [pc, #244]	; (f2ec <z_cstart+0x10c>)
    f1f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    f1fa:	615a      	str	r2, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f1fc:	2400      	movs	r4, #0
    f1fe:	22e0      	movs	r2, #224	; 0xe0
    f200:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    f204:	77dc      	strb	r4, [r3, #31]
    f206:	761c      	strb	r4, [r3, #24]
    f208:	765c      	strb	r4, [r3, #25]
    f20a:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    f20c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f20e:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    f212:	625a      	str	r2, [r3, #36]	; 0x24

static ALWAYS_INLINE void kernel_arch_init(void)
{
	z_InterruptStackSetup();
	z_ExcSetup();
	z_FaultInit();
    f214:	f7fb feb6 	bl	af84 <z_FaultInit>
	z_CpuIdleInit();
    f218:	f7fb ff82 	bl	b120 <z_CpuIdleInit>
	struct k_thread dummy_thread = {
    f21c:	ab07      	add	r3, sp, #28
    f21e:	4621      	mov	r1, r4
    f220:	2284      	movs	r2, #132	; 0x84
    f222:	4618      	mov	r0, r3
    f224:	f7f3 f8e5 	bl	23f2 <memset>
    f228:	2701      	movs	r7, #1
	_current = &dummy_thread;
    f22a:	60b0      	str	r0, [r6, #8]
	struct k_thread dummy_thread = {
    f22c:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
#endif

#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
    f230:	f002 f83a 	bl	112a8 <z_app_shmem_bss_zero>
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    f234:	4620      	mov	r0, r4
    f236:	f7ff ff25 	bl	f084 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    f23a:	4638      	mov	r0, r7
    f23c:	f7ff ff22 	bl	f084 <z_sys_device_do_config_level>
	z_sched_init();
    f240:	f000 fdd4 	bl	fdec <z_sched_init>
	z_setup_new_thread(_main_thread, _main_stack,
    f244:	4b2a      	ldr	r3, [pc, #168]	; (f2f0 <z_cstart+0x110>)
	_kernel.ready_q.cache = _main_thread;
    f246:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(_main_thread, _main_stack,
    f248:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    f24c:	e9cd 7304 	strd	r7, r3, [sp, #16]
    f250:	e9cd 4402 	strd	r4, r4, [sp, #8]
    f254:	e9cd 4400 	strd	r4, r4, [sp]
    f258:	4b26      	ldr	r3, [pc, #152]	; (f2f4 <z_cstart+0x114>)
    f25a:	4927      	ldr	r1, [pc, #156]	; (f2f8 <z_cstart+0x118>)
    f25c:	4628      	mov	r0, r5
    f25e:	f001 f89d 	bl	1039c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    f262:	7b6b      	ldrb	r3, [r5, #13]
    f264:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    f268:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    f26c:	736a      	strb	r2, [r5, #13]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
    f26e:	4634      	mov	r4, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    f270:	d104      	bne.n	f27c <z_cstart+0x9c>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
    f272:	69ab      	ldr	r3, [r5, #24]
    f274:	b913      	cbnz	r3, f27c <z_cstart+0x9c>
		z_add_thread_to_ready_q(thread);
    f276:	4628      	mov	r0, r5
    f278:	f000 fc1e 	bl	fab8 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
    f27c:	4b1f      	ldr	r3, [pc, #124]	; (f2fc <z_cstart+0x11c>)
    f27e:	4e20      	ldr	r6, [pc, #128]	; (f300 <z_cstart+0x120>)
    f280:	9305      	str	r3, [sp, #20]
    f282:	2201      	movs	r2, #1
    f284:	230f      	movs	r3, #15
    f286:	e9cd 3203 	strd	r3, r2, [sp, #12]
    f28a:	2300      	movs	r3, #0
    f28c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    f290:	491c      	ldr	r1, [pc, #112]	; (f304 <z_cstart+0x124>)
    f292:	9300      	str	r3, [sp, #0]
    f294:	4630      	mov	r0, r6
    f296:	e9cd 3301 	strd	r3, r3, [sp, #4]
    f29a:	4b1b      	ldr	r3, [pc, #108]	; (f308 <z_cstart+0x128>)
    f29c:	f001 f87e 	bl	1039c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    f2a0:	7b73      	ldrb	r3, [r6, #13]
	_kernel.cpus[0].idle_thread = _idle_thread;
    f2a2:	60e6      	str	r6, [r4, #12]
    f2a4:	f023 0304 	bic.w	r3, r3, #4
    f2a8:	7373      	strb	r3, [r6, #13]
	list->head = (sys_dnode_t *)list;
    f2aa:	4b18      	ldr	r3, [pc, #96]	; (f30c <z_cstart+0x12c>)
	list->tail = (sys_dnode_t *)list;
    f2ac:	e9c4 3306 	strd	r3, r3, [r4, #24]
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arch_configure_static_mpu_regions();
    f2b0:	f7fc f8c8 	bl	b444 <z_arch_configure_static_mpu_regions>
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arch_configure_dynamic_mpu_regions(main_thread);
    f2b4:	480d      	ldr	r0, [pc, #52]	; (f2ec <z_cstart+0x10c>)
	_current = main_thread;
    f2b6:	60a5      	str	r5, [r4, #8]
	z_arch_configure_dynamic_mpu_regions(main_thread);
    f2b8:	f7fc f8e0 	bl	b47c <z_arch_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    f2bc:	4b0d      	ldr	r3, [pc, #52]	; (f2f4 <z_cstart+0x114>)
    f2be:	4a14      	ldr	r2, [pc, #80]	; (f310 <z_cstart+0x130>)
    f2c0:	4618      	mov	r0, r3
    f2c2:	f382 8809 	msr	PSP, r2
    f2c6:	b663      	cpsie	if
    f2c8:	f04f 0100 	mov.w	r1, #0
    f2cc:	f381 8811 	msr	BASEPRI, r1
    f2d0:	f3bf 8f6f 	isb	sy
    f2d4:	2100      	movs	r1, #0
    f2d6:	2200      	movs	r2, #0
    f2d8:	2300      	movs	r3, #0
    f2da:	f003 fedb 	bl	13094 <z_thread_entry>
	"bl z_thread_entry \n\t"   /* z_thread_entry(_main, 0, 0, 0); */
	:
	: "r" (_main), "r" (start_of_main_stack)
	);

	CODE_UNREACHABLE;
    f2de:	bf00      	nop
    f2e0:	20008000 	.word	0x20008000
    f2e4:	e000ed00 	.word	0xe000ed00
    f2e8:	200057f0 	.word	0x200057f0
    f2ec:	20004714 	.word	0x20004714
    f2f0:	0001bccc 	.word	0x0001bccc
    f2f4:	0000f1b1 	.word	0x0000f1b1
    f2f8:	20006000 	.word	0x20006000
    f2fc:	0001bcd1 	.word	0x0001bcd1
    f300:	20004690 	.word	0x20004690
    f304:	2000aa00 	.word	0x2000aa00
    f308:	0000f11d 	.word	0x0000f11d
    f30c:	20005808 	.word	0x20005808
    f310:	20007000 	.word	0x20007000

0000f314 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
    f314:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(dev);

	struct k_mem_slab *slab;

	for (slab = _k_mem_slab_list_start;
    f316:	4c0c      	ldr	r4, [pc, #48]	; (f348 <init_mem_slab_module+0x34>)
    f318:	4d0c      	ldr	r5, [pc, #48]	; (f34c <init_mem_slab_module+0x38>)
	slab->free_list = NULL;
    f31a:	2600      	movs	r6, #0
	for (slab = _k_mem_slab_list_start;
    f31c:	42ac      	cmp	r4, r5
    f31e:	d301      	bcc.n	f324 <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
    f320:	2000      	movs	r0, #0
    f322:	bd70      	pop	{r4, r5, r6, pc}
	p = slab->buffer;
    f324:	6923      	ldr	r3, [r4, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
    f326:	68a1      	ldr	r1, [r4, #8]
	slab->free_list = NULL;
    f328:	6166      	str	r6, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    f32a:	2200      	movs	r2, #0
    f32c:	428a      	cmp	r2, r1
    f32e:	d104      	bne.n	f33a <init_mem_slab_module+0x26>
		z_object_init(slab);
    f330:	4620      	mov	r0, r4
    f332:	f009 fcbc 	bl	18cae <z_object_init>
	     slab++) {
    f336:	341c      	adds	r4, #28
    f338:	e7f0      	b.n	f31c <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    f33a:	6960      	ldr	r0, [r4, #20]
    f33c:	6018      	str	r0, [r3, #0]
		p += slab->block_size;
    f33e:	68e0      	ldr	r0, [r4, #12]
		slab->free_list = p;
    f340:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    f342:	3201      	adds	r2, #1
		p += slab->block_size;
    f344:	4403      	add	r3, r0
    f346:	e7f1      	b.n	f32c <init_mem_slab_module+0x18>
    f348:	20011b3c 	.word	0x20011b3c
    f34c:	20011b74 	.word	0x20011b74

0000f350 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
    f350:	b510      	push	{r4, lr}
    f352:	4613      	mov	r3, r2
    f354:	460c      	mov	r4, r1
    f356:	f04f 0220 	mov.w	r2, #32
    f35a:	f3ef 8111 	mrs	r1, BASEPRI
    f35e:	f382 8811 	msr	BASEPRI, r2
    f362:	f3bf 8f6f 	isb	sy

	/* block size must be word aligned */
	__ASSERT((slab->block_size & (sizeof(void *) - 1)) == 0,
		 "block size not word aligned");

	if (slab->free_list != NULL) {
    f366:	6942      	ldr	r2, [r0, #20]
    f368:	b15a      	cbz	r2, f382 <k_mem_slab_alloc+0x32>
		/* take a free block */
		*mem = slab->free_list;
    f36a:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    f36c:	6813      	ldr	r3, [r2, #0]
    f36e:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    f370:	6983      	ldr	r3, [r0, #24]
    f372:	3301      	adds	r3, #1
    f374:	6183      	str	r3, [r0, #24]
		result = 0;
    f376:	2000      	movs	r0, #0
	__asm__ volatile(
    f378:	f381 8811 	msr	BASEPRI, r1
    f37c:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    f380:	e00d      	b.n	f39e <k_mem_slab_alloc+0x4e>
	} else if (timeout == K_NO_WAIT) {
    f382:	b91b      	cbnz	r3, f38c <k_mem_slab_alloc+0x3c>
		*mem = NULL;
    f384:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    f386:	f06f 000b 	mvn.w	r0, #11
    f38a:	e7f5      	b.n	f378 <k_mem_slab_alloc+0x28>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    f38c:	4602      	mov	r2, r0
    f38e:	4804      	ldr	r0, [pc, #16]	; (f3a0 <k_mem_slab_alloc+0x50>)
    f390:	f000 fccc 	bl	fd2c <z_pend_curr>
		if (result == 0) {
    f394:	b918      	cbnz	r0, f39e <k_mem_slab_alloc+0x4e>
			*mem = _current->base.swap_data;
    f396:	4b03      	ldr	r3, [pc, #12]	; (f3a4 <k_mem_slab_alloc+0x54>)
    f398:	689b      	ldr	r3, [r3, #8]
    f39a:	695b      	ldr	r3, [r3, #20]
    f39c:	6023      	str	r3, [r4, #0]
}
    f39e:	bd10      	pop	{r4, pc}
    f3a0:	20005ee9 	.word	0x20005ee9
    f3a4:	200057f0 	.word	0x200057f0

0000f3a8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    f3a8:	b570      	push	{r4, r5, r6, lr}
    f3aa:	4604      	mov	r4, r0
    f3ac:	460d      	mov	r5, r1
	__asm__ volatile(
    f3ae:	f04f 0320 	mov.w	r3, #32
    f3b2:	f3ef 8611 	mrs	r6, BASEPRI
    f3b6:	f383 8811 	msr	BASEPRI, r3
    f3ba:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    f3be:	f009 f97c 	bl	186ba <z_unpend_first_thread>

	if (pending_thread != NULL) {
    f3c2:	b180      	cbz	r0, f3e6 <k_mem_slab_free+0x3e>
		z_set_thread_return_value_with_data(pending_thread, 0, *mem);
    f3c4:	682a      	ldr	r2, [r5, #0]
	thread->base.swap_data = data;
    f3c6:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    f3c8:	7b42      	ldrb	r2, [r0, #13]
}

static ALWAYS_INLINE void
z_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    f3ca:	2100      	movs	r1, #0
    f3cc:	06d2      	lsls	r2, r2, #27
    f3ce:	6781      	str	r1, [r0, #120]	; 0x78
    f3d0:	d103      	bne.n	f3da <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
    f3d2:	6983      	ldr	r3, [r0, #24]
    f3d4:	b90b      	cbnz	r3, f3da <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
    f3d6:	f000 fb6f 	bl	fab8 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
    f3da:	4631      	mov	r1, r6
    f3dc:	4808      	ldr	r0, [pc, #32]	; (f400 <k_mem_slab_free+0x58>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    f3de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    f3e2:	f009 b8ee 	b.w	185c2 <z_reschedule>
		**(char ***)mem = slab->free_list;
    f3e6:	682b      	ldr	r3, [r5, #0]
    f3e8:	6962      	ldr	r2, [r4, #20]
    f3ea:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    f3ec:	682b      	ldr	r3, [r5, #0]
    f3ee:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    f3f0:	69a3      	ldr	r3, [r4, #24]
    f3f2:	3b01      	subs	r3, #1
    f3f4:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    f3f6:	f386 8811 	msr	BASEPRI, r6
    f3fa:	f3bf 8f6f 	isb	sy
}
    f3fe:	bd70      	pop	{r4, r5, r6, pc}
    f400:	20005ee9 	.word	0x20005ee9

0000f404 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    f404:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    f406:	4c07      	ldr	r4, [pc, #28]	; (f424 <init_static_pools+0x20>)
    f408:	4d07      	ldr	r5, [pc, #28]	; (f428 <init_static_pools+0x24>)
    f40a:	42ac      	cmp	r4, r5
    f40c:	d301      	bcc.n	f412 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
    f40e:	2000      	movs	r0, #0
    f410:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    f412:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
    f416:	4620      	mov	r0, r4
    f418:	e9c4 3305 	strd	r3, r3, [r4, #20]
    f41c:	f003 fc8a 	bl	12d34 <z_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    f420:	341c      	adds	r4, #28
    f422:	e7f2      	b.n	f40a <init_static_pools+0x6>
    f424:	20011b74 	.word	0x20011b74
    f428:	20011bc8 	.word	0x20011bc8

0000f42c <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
    f42c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(z_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
    f430:	1e1e      	subs	r6, r3, #0
{
    f432:	4680      	mov	r8, r0
    f434:	460c      	mov	r4, r1
    f436:	4691      	mov	r9, r2
	if (timeout > 0) {
    f438:	dd54      	ble.n	f4e4 <k_mem_pool_alloc+0xb8>
		end = z_tick_get() + z_ms_to_ticks(timeout);
    f43a:	f001 fadd 	bl	109f8 <z_tick_get>
    f43e:	4605      	mov	r5, r0
	return (s32_t)ceiling_fraction(
    f440:	4829      	ldr	r0, [pc, #164]	; (f4e8 <k_mem_pool_alloc+0xbc>)
    f442:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    f446:	2100      	movs	r1, #0
    f448:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    f44c:	2300      	movs	r3, #0
    f44e:	fbc7 0106 	smlal	r0, r1, r7, r6
    f452:	f7f1 fa29 	bl	8a8 <__aeabi_ldivmod>
    f456:	1945      	adds	r5, r0, r5
	return pool - &_k_mem_pool_list_start[0];
    f458:	4b24      	ldr	r3, [pc, #144]	; (f4ec <k_mem_pool_alloc+0xc0>)
    f45a:	4f25      	ldr	r7, [pc, #148]	; (f4f0 <k_mem_pool_alloc+0xc4>)
    f45c:	eba8 0303 	sub.w	r3, r8, r3
    f460:	109b      	asrs	r3, r3, #2
    f462:	435f      	muls	r7, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
    f464:	b2ff      	uxtb	r7, r7
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
    f466:	f108 0a14 	add.w	sl, r8, #20
			ret = z_sys_mem_pool_block_alloc(&p->base, size,
    f46a:	9400      	str	r4, [sp, #0]
    f46c:	ab03      	add	r3, sp, #12
    f46e:	aa02      	add	r2, sp, #8
    f470:	4649      	mov	r1, r9
    f472:	4640      	mov	r0, r8
    f474:	f003 fca8 	bl	12dc8 <z_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
    f478:	f110 0f0b 	cmn.w	r0, #11
    f47c:	d10b      	bne.n	f496 <k_mem_pool_alloc+0x6a>
			ret = z_sys_mem_pool_block_alloc(&p->base, size,
    f47e:	9400      	str	r4, [sp, #0]
    f480:	ab03      	add	r3, sp, #12
    f482:	aa02      	add	r2, sp, #8
    f484:	4649      	mov	r1, r9
    f486:	4640      	mov	r0, r8
    f488:	f003 fc9e 	bl	12dc8 <z_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
    f48c:	f110 0f0b 	cmn.w	r0, #11
    f490:	bf08      	it	eq
    f492:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
    f496:	7963      	ldrb	r3, [r4, #5]
    f498:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
    f49a:	7127      	strb	r7, [r4, #4]
		block->id.level = level_num;
    f49c:	f362 0303 	bfi	r3, r2, #0, #4
    f4a0:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
    f4a2:	6863      	ldr	r3, [r4, #4]
    f4a4:	9a03      	ldr	r2, [sp, #12]
    f4a6:	f362 331f 	bfi	r3, r2, #12, #20
    f4aa:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
    f4ac:	b1b8      	cbz	r0, f4de <k_mem_pool_alloc+0xb2>
    f4ae:	b1b6      	cbz	r6, f4de <k_mem_pool_alloc+0xb2>
    f4b0:	f110 0f0c 	cmn.w	r0, #12
    f4b4:	d113      	bne.n	f4de <k_mem_pool_alloc+0xb2>
	__asm__ volatile(
    f4b6:	f04f 0320 	mov.w	r3, #32
    f4ba:	f3ef 8011 	mrs	r0, BASEPRI
    f4be:	f383 8811 	msr	BASEPRI, r3
    f4c2:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(z_arch_irq_lock(), wait_q, timeout);
    f4c6:	4632      	mov	r2, r6
    f4c8:	4651      	mov	r1, sl
    f4ca:	f000 fc0b 	bl	fce4 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
    f4ce:	1c73      	adds	r3, r6, #1
    f4d0:	d0cb      	beq.n	f46a <k_mem_pool_alloc+0x3e>
			timeout = end - z_tick_get();
    f4d2:	f001 fa91 	bl	109f8 <z_tick_get>

			if (timeout < 0) {
    f4d6:	1a2e      	subs	r6, r5, r0
    f4d8:	d5c7      	bpl.n	f46a <k_mem_pool_alloc+0x3e>
				break;
			}
		}
	}

	return -EAGAIN;
    f4da:	f06f 000a 	mvn.w	r0, #10
}
    f4de:	b004      	add	sp, #16
    f4e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	s64_t end = 0;
    f4e4:	2500      	movs	r5, #0
    f4e6:	e7b7      	b.n	f458 <k_mem_pool_alloc+0x2c>
    f4e8:	0004ffff 	.word	0x0004ffff
    f4ec:	20011b74 	.word	0x20011b74
    f4f0:	b6db6db7 	.word	0xb6db6db7

0000f4f4 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
    f4f4:	b570      	push	{r4, r5, r6, lr}
    f4f6:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
    f4f8:	6802      	ldr	r2, [r0, #0]
    f4fa:	7841      	ldrb	r1, [r0, #1]
    f4fc:	4e11      	ldr	r6, [pc, #68]	; (f544 <k_mem_pool_free_id+0x50>)
    f4fe:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    f502:	00a4      	lsls	r4, r4, #2
    f504:	0b12      	lsrs	r2, r2, #12
    f506:	f001 010f 	and.w	r1, r1, #15
    f50a:	1930      	adds	r0, r6, r4
    f50c:	f003 fd18 	bl	12f40 <z_sys_mem_pool_block_free>
    f510:	f04f 0320 	mov.w	r3, #32
    f514:	f3ef 8511 	mrs	r5, BASEPRI
    f518:	f383 8811 	msr	BASEPRI, r3
    f51c:	f3bf 8f6f 	isb	sy
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
    f520:	f104 0014 	add.w	r0, r4, #20
    f524:	4430      	add	r0, r6
    f526:	f009 f8f5 	bl	18714 <z_unpend_all>

	if (need_sched != 0) {
    f52a:	b128      	cbz	r0, f538 <k_mem_pool_free_id+0x44>
		z_reschedule(&lock, key);
    f52c:	4629      	mov	r1, r5
    f52e:	4806      	ldr	r0, [pc, #24]	; (f548 <k_mem_pool_free_id+0x54>)
	} else {
		k_spin_unlock(&lock, key);
	}
}
    f530:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    f534:	f009 b845 	b.w	185c2 <z_reschedule>
	__asm__ volatile(
    f538:	f385 8811 	msr	BASEPRI, r5
    f53c:	f3bf 8f6f 	isb	sy
}
    f540:	bd70      	pop	{r4, r5, r6, pc}
    f542:	bf00      	nop
    f544:	20011b74 	.word	0x20011b74
    f548:	20005ee9 	.word	0x20005ee9

0000f54c <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
    f54c:	4601      	mov	r1, r0
    f54e:	4801      	ldr	r0, [pc, #4]	; (f554 <k_malloc+0x8>)
    f550:	f008 beb9 	b.w	182c6 <k_mem_pool_malloc>
    f554:	20011bac 	.word	0x20011bac

0000f558 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
    f558:	4b03      	ldr	r3, [pc, #12]	; (f568 <z_thread_malloc+0x10>)
    f55a:	689b      	ldr	r3, [r3, #8]
{
    f55c:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
    f55e:	6f18      	ldr	r0, [r3, #112]	; 0x70
    f560:	b108      	cbz	r0, f566 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
    f562:	f008 beb0 	b.w	182c6 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
    f566:	4770      	bx	lr
    f568:	200057f0 	.word	0x200057f0

0000f56c <z_hdlr_k_mutex_init>:
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_INIT);
}

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER(k_mutex_init, mutex)
{
    f56c:	b538      	push	{r3, r4, r5, lr}
    f56e:	4605      	mov	r5, r0
	Z_OOPS(Z_SYSCALL_OBJ_INIT(mutex, K_OBJ_MUTEX));
    f570:	f7f0 fe46 	bl	200 <z_object_find>
    f574:	2201      	movs	r2, #1
    f576:	4629      	mov	r1, r5
    f578:	f008 fecf 	bl	1831a <z_obj_validation_check.constprop.3>
    f57c:	4604      	mov	r4, r0
    f57e:	b130      	cbz	r0, f58e <z_hdlr_k_mutex_init+0x22>
    f580:	4805      	ldr	r0, [pc, #20]	; (f598 <z_hdlr_k_mutex_init+0x2c>)
    f582:	4906      	ldr	r1, [pc, #24]	; (f59c <z_hdlr_k_mutex_init+0x30>)
    f584:	f003 ff7b 	bl	1347e <printk>
    f588:	9806      	ldr	r0, [sp, #24]
    f58a:	f005 fccc 	bl	14f26 <z_arch_syscall_oops>
	z_impl_k_mutex_init((struct k_mutex *)mutex);
    f58e:	4628      	mov	r0, r5
    f590:	f008 fed2 	bl	18338 <z_impl_k_mutex_init>

	return 0;
}
    f594:	4620      	mov	r0, r4
    f596:	bd38      	pop	{r3, r4, r5, pc}
    f598:	0001ba44 	.word	0x0001ba44
    f59c:	0001bcd6 	.word	0x0001bcd6

0000f5a0 <z_impl_k_mutex_lock>:
		z_thread_priority_set(mutex->owner, new_prio);
	}
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
    f5a0:	b570      	push	{r4, r5, r6, lr}
    f5a2:	460d      	mov	r5, r1
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    f5a4:	4934      	ldr	r1, [pc, #208]	; (f678 <z_impl_k_mutex_lock+0xd8>)
    f5a6:	688b      	ldr	r3, [r1, #8]
    f5a8:	7bda      	ldrb	r2, [r3, #15]
    f5aa:	3a01      	subs	r2, #1
    f5ac:	4604      	mov	r4, r0
    f5ae:	73da      	strb	r2, [r3, #15]
	k_spinlock_key_t key;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	z_sched_lock();

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    f5b0:	68c2      	ldr	r2, [r0, #12]
    f5b2:	4608      	mov	r0, r1
    f5b4:	b14a      	cbz	r2, f5ca <z_impl_k_mutex_lock+0x2a>
    f5b6:	68a3      	ldr	r3, [r4, #8]
    f5b8:	6889      	ldr	r1, [r1, #8]
    f5ba:	428b      	cmp	r3, r1
    f5bc:	d012      	beq.n	f5e4 <z_impl_k_mutex_lock+0x44>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
    f5be:	b99d      	cbnz	r5, f5e8 <z_impl_k_mutex_lock+0x48>
		k_sched_unlock();
    f5c0:	f000 fa5e 	bl	fa80 <k_sched_unlock>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    f5c4:	f06f 050f 	mvn.w	r5, #15
    f5c8:	e00a      	b.n	f5e0 <z_impl_k_mutex_lock+0x40>
					_current->base.prio :
    f5ca:	688b      	ldr	r3, [r1, #8]
    f5cc:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    f5d0:	6123      	str	r3, [r4, #16]
		mutex->lock_count++;
    f5d2:	3201      	adds	r2, #1
		mutex->owner = _current;
    f5d4:	6883      	ldr	r3, [r0, #8]
		mutex->lock_count++;
    f5d6:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
    f5d8:	60a3      	str	r3, [r4, #8]
		k_sched_unlock();
    f5da:	f000 fa51 	bl	fa80 <k_sched_unlock>
		return 0;
    f5de:	2500      	movs	r5, #0

	k_sched_unlock();

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    f5e0:	4628      	mov	r0, r5
    f5e2:	bd70      	pop	{r4, r5, r6, pc}
					_current->base.prio :
    f5e4:	6923      	ldr	r3, [r4, #16]
    f5e6:	e7f3      	b.n	f5d0 <z_impl_k_mutex_lock+0x30>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    f5e8:	f991 100e 	ldrsb.w	r1, [r1, #14]
    f5ec:	f993 300e 	ldrsb.w	r3, [r3, #14]
    f5f0:	4299      	cmp	r1, r3
    f5f2:	bfa8      	it	ge
    f5f4:	4619      	movge	r1, r3
    f5f6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	__asm__ volatile(
    f5fa:	f04f 0320 	mov.w	r3, #32
    f5fe:	f3ef 8611 	mrs	r6, BASEPRI
    f602:	f383 8811 	msr	BASEPRI, r3
    f606:	f3bf 8f6f 	isb	sy
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    f60a:	68a0      	ldr	r0, [r4, #8]
    f60c:	f990 300e 	ldrsb.w	r3, [r0, #14]
    f610:	4299      	cmp	r1, r3
    f612:	da01      	bge.n	f618 <z_impl_k_mutex_lock+0x78>
		z_thread_priority_set(mutex->owner, new_prio);
    f614:	f000 fb9e 	bl	fd54 <z_thread_priority_set>
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    f618:	462b      	mov	r3, r5
    f61a:	4622      	mov	r2, r4
    f61c:	4631      	mov	r1, r6
    f61e:	4817      	ldr	r0, [pc, #92]	; (f67c <z_impl_k_mutex_lock+0xdc>)
    f620:	f000 fb84 	bl	fd2c <z_pend_curr>
	if (got_mutex == 0) {
    f624:	4605      	mov	r5, r0
    f626:	b910      	cbnz	r0, f62e <z_impl_k_mutex_lock+0x8e>
		k_sched_unlock();
    f628:	f000 fa2a 	bl	fa80 <k_sched_unlock>
		return 0;
    f62c:	e7d8      	b.n	f5e0 <z_impl_k_mutex_lock+0x40>
	return list->head == list;
    f62e:	6823      	ldr	r3, [r4, #0]
    f630:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f632:	429c      	cmp	r4, r3
    f634:	d007      	beq.n	f646 <z_impl_k_mutex_lock+0xa6>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
    f636:	b133      	cbz	r3, f646 <z_impl_k_mutex_lock+0xa6>
    f638:	f993 300e 	ldrsb.w	r3, [r3, #14]
    f63c:	4299      	cmp	r1, r3
    f63e:	bfa8      	it	ge
    f640:	4619      	movge	r1, r3
    f642:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    f646:	f04f 0320 	mov.w	r3, #32
    f64a:	f3ef 8511 	mrs	r5, BASEPRI
    f64e:	f383 8811 	msr	BASEPRI, r3
    f652:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, new_prio);
    f656:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    f658:	f990 300e 	ldrsb.w	r3, [r0, #14]
    f65c:	4299      	cmp	r1, r3
    f65e:	d001      	beq.n	f664 <z_impl_k_mutex_lock+0xc4>
		z_thread_priority_set(mutex->owner, new_prio);
    f660:	f000 fb78 	bl	fd54 <z_thread_priority_set>
	__asm__ volatile(
    f664:	f385 8811 	msr	BASEPRI, r5
    f668:	f3bf 8f6f 	isb	sy
	k_sched_unlock();
    f66c:	f000 fa08 	bl	fa80 <k_sched_unlock>
	return -EAGAIN;
    f670:	f06f 050a 	mvn.w	r5, #10
    f674:	e7b4      	b.n	f5e0 <z_impl_k_mutex_lock+0x40>
    f676:	bf00      	nop
    f678:	200057f0 	.word	0x200057f0
    f67c:	20005ee9 	.word	0x20005ee9

0000f680 <z_hdlr_k_mutex_lock>:

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER(k_mutex_lock, mutex, timeout)
{
    f680:	b570      	push	{r4, r5, r6, lr}
    f682:	4604      	mov	r4, r0
    f684:	460d      	mov	r5, r1
    f686:	9e06      	ldr	r6, [sp, #24]
	Z_OOPS(Z_SYSCALL_OBJ(mutex, K_OBJ_MUTEX));
    f688:	f7f0 fdba 	bl	200 <z_object_find>
    f68c:	2200      	movs	r2, #0
    f68e:	4621      	mov	r1, r4
    f690:	f008 fe43 	bl	1831a <z_obj_validation_check.constprop.3>
    f694:	b130      	cbz	r0, f6a4 <z_hdlr_k_mutex_lock+0x24>
    f696:	4806      	ldr	r0, [pc, #24]	; (f6b0 <z_hdlr_k_mutex_lock+0x30>)
    f698:	4906      	ldr	r1, [pc, #24]	; (f6b4 <z_hdlr_k_mutex_lock+0x34>)
    f69a:	f003 fef0 	bl	1347e <printk>
    f69e:	4630      	mov	r0, r6
    f6a0:	f005 fc41 	bl	14f26 <z_arch_syscall_oops>
	return z_impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
    f6a4:	4629      	mov	r1, r5
    f6a6:	4620      	mov	r0, r4
}
    f6a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
    f6ac:	f7ff bf78 	b.w	f5a0 <z_impl_k_mutex_lock>
    f6b0:	0001ba44 	.word	0x0001ba44
    f6b4:	0001bcea 	.word	0x0001bcea

0000f6b8 <z_impl_k_mutex_unlock>:
    f6b8:	4b1e      	ldr	r3, [pc, #120]	; (f734 <z_impl_k_mutex_unlock+0x7c>)
    f6ba:	689a      	ldr	r2, [r3, #8]
    f6bc:	7bd3      	ldrb	r3, [r2, #15]
    f6be:	3b01      	subs	r3, #1
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    f6c0:	b570      	push	{r4, r5, r6, lr}
    f6c2:	4604      	mov	r4, r0
    f6c4:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
    f6c6:	68c3      	ldr	r3, [r0, #12]
    f6c8:	2b01      	cmp	r3, #1
    f6ca:	d005      	beq.n	f6d8 <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
    f6cc:	3b01      	subs	r3, #1
    f6ce:	60c3      	str	r3, [r0, #12]
	}


k_mutex_unlock_return:
	k_sched_unlock();
}
    f6d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
    f6d4:	f000 b9d4 	b.w	fa80 <k_sched_unlock>
	__asm__ volatile(
    f6d8:	f04f 0320 	mov.w	r3, #32
    f6dc:	f3ef 8611 	mrs	r6, BASEPRI
    f6e0:	f383 8811 	msr	BASEPRI, r3
    f6e4:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    f6e8:	6901      	ldr	r1, [r0, #16]
    f6ea:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    f6ec:	f990 300e 	ldrsb.w	r3, [r0, #14]
    f6f0:	4299      	cmp	r1, r3
    f6f2:	d001      	beq.n	f6f8 <z_impl_k_mutex_unlock+0x40>
		z_thread_priority_set(mutex->owner, new_prio);
    f6f4:	f000 fb2e 	bl	fd54 <z_thread_priority_set>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    f6f8:	4620      	mov	r0, r4
    f6fa:	f008 ffde 	bl	186ba <z_unpend_first_thread>
    f6fe:	4605      	mov	r5, r0
	mutex->owner = new_owner;
    f700:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    f702:	b180      	cbz	r0, f726 <z_impl_k_mutex_unlock+0x6e>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    f704:	7b43      	ldrb	r3, [r0, #13]
    f706:	06db      	lsls	r3, r3, #27
    f708:	d103      	bne.n	f712 <z_impl_k_mutex_unlock+0x5a>
	if (z_is_thread_ready(thread)) {
    f70a:	6983      	ldr	r3, [r0, #24]
    f70c:	b90b      	cbnz	r3, f712 <z_impl_k_mutex_unlock+0x5a>
		z_add_thread_to_ready_q(thread);
    f70e:	f000 f9d3 	bl	fab8 <z_add_thread_to_ready_q>
	__asm__ volatile(
    f712:	f386 8811 	msr	BASEPRI, r6
    f716:	f3bf 8f6f 	isb	sy
    f71a:	2300      	movs	r3, #0
    f71c:	67ab      	str	r3, [r5, #120]	; 0x78
		mutex->owner_orig_prio = new_owner->base.prio;
    f71e:	f995 300e 	ldrsb.w	r3, [r5, #14]
    f722:	6123      	str	r3, [r4, #16]
    f724:	e7d4      	b.n	f6d0 <z_impl_k_mutex_unlock+0x18>
		mutex->lock_count = 0U;
    f726:	60e0      	str	r0, [r4, #12]
    f728:	f386 8811 	msr	BASEPRI, r6
    f72c:	f3bf 8f6f 	isb	sy
    f730:	e7ce      	b.n	f6d0 <z_impl_k_mutex_unlock+0x18>
    f732:	bf00      	nop
    f734:	200057f0 	.word	0x200057f0

0000f738 <z_hdlr_k_mutex_unlock>:

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER(k_mutex_unlock, mutex)
{
    f738:	b538      	push	{r3, r4, r5, lr}
    f73a:	4604      	mov	r4, r0
	Z_OOPS(Z_SYSCALL_OBJ(mutex, K_OBJ_MUTEX));
    f73c:	f7f0 fd60 	bl	200 <z_object_find>
    f740:	2200      	movs	r2, #0
    f742:	4621      	mov	r1, r4
    f744:	f008 fde9 	bl	1831a <z_obj_validation_check.constprop.3>
    f748:	4605      	mov	r5, r0
    f74a:	b198      	cbz	r0, f774 <z_hdlr_k_mutex_unlock+0x3c>
    f74c:	490c      	ldr	r1, [pc, #48]	; (f780 <z_hdlr_k_mutex_unlock+0x48>)
    f74e:	480d      	ldr	r0, [pc, #52]	; (f784 <z_hdlr_k_mutex_unlock+0x4c>)
	Z_OOPS(Z_SYSCALL_VERIFY(((struct k_mutex *)mutex)->lock_count > 0));
    f750:	f003 fe95 	bl	1347e <printk>
    f754:	9806      	ldr	r0, [sp, #24]
    f756:	f005 fbe6 	bl	14f26 <z_arch_syscall_oops>
	Z_OOPS(Z_SYSCALL_VERIFY(((struct k_mutex *)mutex)->owner == _current));
    f75a:	4909      	ldr	r1, [pc, #36]	; (f780 <z_hdlr_k_mutex_unlock+0x48>)
    f75c:	480a      	ldr	r0, [pc, #40]	; (f788 <z_hdlr_k_mutex_unlock+0x50>)
    f75e:	e7f7      	b.n	f750 <z_hdlr_k_mutex_unlock+0x18>
    f760:	4b0a      	ldr	r3, [pc, #40]	; (f78c <z_hdlr_k_mutex_unlock+0x54>)
    f762:	68a2      	ldr	r2, [r4, #8]
    f764:	689b      	ldr	r3, [r3, #8]
    f766:	429a      	cmp	r2, r3
    f768:	d1f7      	bne.n	f75a <z_hdlr_k_mutex_unlock+0x22>
	z_impl_k_mutex_unlock((struct k_mutex *)mutex);
    f76a:	4620      	mov	r0, r4
    f76c:	f7ff ffa4 	bl	f6b8 <z_impl_k_mutex_unlock>
	return 0;
}
    f770:	4628      	mov	r0, r5
    f772:	bd38      	pop	{r3, r4, r5, pc}
	Z_OOPS(Z_SYSCALL_VERIFY(((struct k_mutex *)mutex)->lock_count > 0));
    f774:	68e3      	ldr	r3, [r4, #12]
    f776:	2b00      	cmp	r3, #0
    f778:	d1f2      	bne.n	f760 <z_hdlr_k_mutex_unlock+0x28>
    f77a:	4901      	ldr	r1, [pc, #4]	; (f780 <z_hdlr_k_mutex_unlock+0x48>)
    f77c:	4804      	ldr	r0, [pc, #16]	; (f790 <z_hdlr_k_mutex_unlock+0x58>)
    f77e:	e7e7      	b.n	f750 <z_hdlr_k_mutex_unlock+0x18>
    f780:	0001bcfe 	.word	0x0001bcfe
    f784:	0001ba44 	.word	0x0001ba44
    f788:	0001bd58 	.word	0x0001bd58
    f78c:	200057f0 	.word	0x200057f0
    f790:	0001bd14 	.word	0x0001bd14

0000f794 <z_hdlr_k_queue_init>:
	z_object_init(queue);
}

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER(k_queue_init, queue_ptr)
{
    f794:	b538      	push	{r3, r4, r5, lr}
    f796:	4605      	mov	r5, r0
	struct k_queue *queue = (struct k_queue *)queue_ptr;

	Z_OOPS(Z_SYSCALL_OBJ_NEVER_INIT(queue, K_OBJ_QUEUE));
    f798:	f7f0 fd32 	bl	200 <z_object_find>
    f79c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f7a0:	4629      	mov	r1, r5
    f7a2:	f008 fe21 	bl	183e8 <z_obj_validation_check.constprop.8>
    f7a6:	4604      	mov	r4, r0
    f7a8:	b130      	cbz	r0, f7b8 <z_hdlr_k_queue_init+0x24>
    f7aa:	4806      	ldr	r0, [pc, #24]	; (f7c4 <z_hdlr_k_queue_init+0x30>)
    f7ac:	4906      	ldr	r1, [pc, #24]	; (f7c8 <z_hdlr_k_queue_init+0x34>)
    f7ae:	f003 fe66 	bl	1347e <printk>
    f7b2:	9806      	ldr	r0, [sp, #24]
    f7b4:	f005 fbb7 	bl	14f26 <z_arch_syscall_oops>
	z_impl_k_queue_init(queue);
    f7b8:	4628      	mov	r0, r5
    f7ba:	f008 fe30 	bl	1841e <z_impl_k_queue_init>
	return 0;
}
    f7be:	4620      	mov	r0, r4
    f7c0:	bd38      	pop	{r3, r4, r5, pc}
    f7c2:	bf00      	nop
    f7c4:	0001ba44 	.word	0x0001ba44
    f7c8:	0001bd9f 	.word	0x0001bd9f

0000f7cc <z_hdlr_k_queue_cancel_wait>:

	z_reschedule(&queue->lock, key);
}

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_queue_cancel_wait, K_OBJ_QUEUE,
    f7cc:	b538      	push	{r3, r4, r5, lr}
    f7ce:	4605      	mov	r5, r0
    f7d0:	f7f0 fd16 	bl	200 <z_object_find>
    f7d4:	2200      	movs	r2, #0
    f7d6:	4629      	mov	r1, r5
    f7d8:	f008 fe06 	bl	183e8 <z_obj_validation_check.constprop.8>
    f7dc:	4604      	mov	r4, r0
    f7de:	b130      	cbz	r0, f7ee <z_hdlr_k_queue_cancel_wait+0x22>
    f7e0:	4805      	ldr	r0, [pc, #20]	; (f7f8 <z_hdlr_k_queue_cancel_wait+0x2c>)
    f7e2:	4906      	ldr	r1, [pc, #24]	; (f7fc <z_hdlr_k_queue_cancel_wait+0x30>)
    f7e4:	f003 fe4b 	bl	1347e <printk>
    f7e8:	9806      	ldr	r0, [sp, #24]
    f7ea:	f005 fb9c 	bl	14f26 <z_arch_syscall_oops>
    f7ee:	4628      	mov	r0, r5
    f7f0:	f008 fe1e 	bl	18430 <z_impl_k_queue_cancel_wait>
    f7f4:	4620      	mov	r0, r4
    f7f6:	bd38      	pop	{r3, r4, r5, pc}
    f7f8:	0001ba44 	.word	0x0001ba44
    f7fc:	0001bdb3 	.word	0x0001bdb3

0000f800 <z_hdlr_k_queue_alloc_append>:
			    true);
}

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER(k_queue_alloc_append, queue, data)
{
    f800:	b570      	push	{r4, r5, r6, lr}
    f802:	4604      	mov	r4, r0
    f804:	460d      	mov	r5, r1
    f806:	9e06      	ldr	r6, [sp, #24]
	Z_OOPS(Z_SYSCALL_OBJ(queue, K_OBJ_QUEUE));
    f808:	f7f0 fcfa 	bl	200 <z_object_find>
    f80c:	2200      	movs	r2, #0
    f80e:	4621      	mov	r1, r4
    f810:	f008 fdea 	bl	183e8 <z_obj_validation_check.constprop.8>
    f814:	b130      	cbz	r0, f824 <z_hdlr_k_queue_alloc_append+0x24>
    f816:	4806      	ldr	r0, [pc, #24]	; (f830 <z_hdlr_k_queue_alloc_append+0x30>)
    f818:	4906      	ldr	r1, [pc, #24]	; (f834 <z_hdlr_k_queue_alloc_append+0x34>)
    f81a:	f003 fe30 	bl	1347e <printk>
    f81e:	4630      	mov	r0, r6
    f820:	f005 fb81 	bl	14f26 <z_arch_syscall_oops>

	return z_impl_k_queue_alloc_append((struct k_queue *)queue,
    f824:	4629      	mov	r1, r5
    f826:	4620      	mov	r0, r4
					  (void *)data);
}
    f828:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_impl_k_queue_alloc_append((struct k_queue *)queue,
    f82c:	f008 be1f 	b.w	1846e <z_impl_k_queue_alloc_append>
    f830:	0001ba44 	.word	0x0001ba44
    f834:	0001bdce 	.word	0x0001bdce

0000f838 <z_hdlr_k_queue_alloc_prepend>:
	return queue_insert(queue, NULL, data, true);
}

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER(k_queue_alloc_prepend, queue, data)
{
    f838:	b570      	push	{r4, r5, r6, lr}
    f83a:	4604      	mov	r4, r0
    f83c:	460d      	mov	r5, r1
    f83e:	9e06      	ldr	r6, [sp, #24]
	Z_OOPS(Z_SYSCALL_OBJ(queue, K_OBJ_QUEUE));
    f840:	f7f0 fcde 	bl	200 <z_object_find>
    f844:	2200      	movs	r2, #0
    f846:	4621      	mov	r1, r4
    f848:	f008 fdce 	bl	183e8 <z_obj_validation_check.constprop.8>
    f84c:	b130      	cbz	r0, f85c <z_hdlr_k_queue_alloc_prepend+0x24>
    f84e:	4806      	ldr	r0, [pc, #24]	; (f868 <z_hdlr_k_queue_alloc_prepend+0x30>)
    f850:	4906      	ldr	r1, [pc, #24]	; (f86c <z_hdlr_k_queue_alloc_prepend+0x34>)
    f852:	f003 fe14 	bl	1347e <printk>
    f856:	4630      	mov	r0, r6
    f858:	f005 fb65 	bl	14f26 <z_arch_syscall_oops>

	return z_impl_k_queue_alloc_prepend((struct k_queue *)queue,
    f85c:	4629      	mov	r1, r5
    f85e:	4620      	mov	r0, r4
					   (void *)data);
}
    f860:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_impl_k_queue_alloc_prepend((struct k_queue *)queue,
    f864:	f008 be08 	b.w	18478 <z_impl_k_queue_alloc_prepend>
    f868:	0001ba44 	.word	0x0001ba44
    f86c:	0001bdea 	.word	0x0001bdea

0000f870 <z_hdlr_k_queue_get>:
#endif /* CONFIG_POLL */
}

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER(k_queue_get, queue, timeout_p)
{
    f870:	b570      	push	{r4, r5, r6, lr}
    f872:	4604      	mov	r4, r0
    f874:	460d      	mov	r5, r1
    f876:	9e06      	ldr	r6, [sp, #24]
	s32_t timeout = timeout_p;

	Z_OOPS(Z_SYSCALL_OBJ(queue, K_OBJ_QUEUE));
    f878:	f7f0 fcc2 	bl	200 <z_object_find>
    f87c:	2200      	movs	r2, #0
    f87e:	4621      	mov	r1, r4
    f880:	f008 fdb2 	bl	183e8 <z_obj_validation_check.constprop.8>
    f884:	b130      	cbz	r0, f894 <z_hdlr_k_queue_get+0x24>
    f886:	4806      	ldr	r0, [pc, #24]	; (f8a0 <z_hdlr_k_queue_get+0x30>)
    f888:	4906      	ldr	r1, [pc, #24]	; (f8a4 <z_hdlr_k_queue_get+0x34>)
    f88a:	f003 fdf8 	bl	1347e <printk>
    f88e:	4630      	mov	r0, r6
    f890:	f005 fb49 	bl	14f26 <z_arch_syscall_oops>

	return (u32_t)z_impl_k_queue_get((struct k_queue *)queue, timeout);
    f894:	4629      	mov	r1, r5
    f896:	4620      	mov	r0, r4
}
    f898:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return (u32_t)z_impl_k_queue_get((struct k_queue *)queue, timeout);
    f89c:	f008 bdf1 	b.w	18482 <z_impl_k_queue_get>
    f8a0:	0001ba44 	.word	0x0001ba44
    f8a4:	0001be07 	.word	0x0001be07

0000f8a8 <z_hdlr_k_queue_is_empty>:

Z_SYSCALL_HANDLER1_SIMPLE(k_queue_is_empty, K_OBJ_QUEUE, struct k_queue *);
    f8a8:	b510      	push	{r4, lr}
    f8aa:	4604      	mov	r4, r0
    f8ac:	f7f0 fca8 	bl	200 <z_object_find>
    f8b0:	2200      	movs	r2, #0
    f8b2:	4621      	mov	r1, r4
    f8b4:	f008 fd98 	bl	183e8 <z_obj_validation_check.constprop.8>
    f8b8:	b130      	cbz	r0, f8c8 <z_hdlr_k_queue_is_empty+0x20>
    f8ba:	4806      	ldr	r0, [pc, #24]	; (f8d4 <z_hdlr_k_queue_is_empty+0x2c>)
    f8bc:	4906      	ldr	r1, [pc, #24]	; (f8d8 <z_hdlr_k_queue_is_empty+0x30>)
    f8be:	f003 fdde 	bl	1347e <printk>
    f8c2:	9804      	ldr	r0, [sp, #16]
    f8c4:	f005 fb2f 	bl	14f26 <z_arch_syscall_oops>
    f8c8:	6820      	ldr	r0, [r4, #0]
    f8ca:	fab0 f080 	clz	r0, r0
    f8ce:	0940      	lsrs	r0, r0, #5
    f8d0:	bd10      	pop	{r4, pc}
    f8d2:	bf00      	nop
    f8d4:	0001ba44 	.word	0x0001ba44
    f8d8:	0001be1a 	.word	0x0001be1a

0000f8dc <z_hdlr_k_queue_peek_head>:
Z_SYSCALL_HANDLER1_SIMPLE(k_queue_peek_head, K_OBJ_QUEUE, struct k_queue *);
    f8dc:	b538      	push	{r3, r4, r5, lr}
    f8de:	4604      	mov	r4, r0
    f8e0:	9d06      	ldr	r5, [sp, #24]
    f8e2:	f7f0 fc8d 	bl	200 <z_object_find>
    f8e6:	4621      	mov	r1, r4
    f8e8:	2200      	movs	r2, #0
    f8ea:	f008 fd7d 	bl	183e8 <z_obj_validation_check.constprop.8>
    f8ee:	4601      	mov	r1, r0
    f8f0:	b130      	cbz	r0, f900 <z_hdlr_k_queue_peek_head+0x24>
    f8f2:	4806      	ldr	r0, [pc, #24]	; (f90c <z_hdlr_k_queue_peek_head+0x30>)
    f8f4:	4906      	ldr	r1, [pc, #24]	; (f910 <z_hdlr_k_queue_peek_head+0x34>)
    f8f6:	f003 fdc2 	bl	1347e <printk>
    f8fa:	4628      	mov	r0, r5
    f8fc:	f005 fb13 	bl	14f26 <z_arch_syscall_oops>
	return z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
    f900:	6820      	ldr	r0, [r4, #0]
    f902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f906:	f008 bd7e 	b.w	18406 <z_queue_node_peek>
    f90a:	bf00      	nop
    f90c:	0001ba44 	.word	0x0001ba44
    f910:	0001be32 	.word	0x0001be32

0000f914 <z_hdlr_k_queue_peek_tail>:
Z_SYSCALL_HANDLER1_SIMPLE(k_queue_peek_tail, K_OBJ_QUEUE, struct k_queue *);
    f914:	b538      	push	{r3, r4, r5, lr}
    f916:	4604      	mov	r4, r0
    f918:	9d06      	ldr	r5, [sp, #24]
    f91a:	f7f0 fc71 	bl	200 <z_object_find>
    f91e:	4621      	mov	r1, r4
    f920:	2200      	movs	r2, #0
    f922:	f008 fd61 	bl	183e8 <z_obj_validation_check.constprop.8>
    f926:	4601      	mov	r1, r0
    f928:	b130      	cbz	r0, f938 <z_hdlr_k_queue_peek_tail+0x24>
    f92a:	4806      	ldr	r0, [pc, #24]	; (f944 <z_hdlr_k_queue_peek_tail+0x30>)
    f92c:	4906      	ldr	r1, [pc, #24]	; (f948 <z_hdlr_k_queue_peek_tail+0x34>)
    f92e:	f003 fda6 	bl	1347e <printk>
    f932:	4628      	mov	r0, r5
    f934:	f005 faf7 	bl	14f26 <z_arch_syscall_oops>
	return z_queue_node_peek(sys_sflist_peek_tail(&queue->data_q), false);
    f938:	6860      	ldr	r0, [r4, #4]
    f93a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f93e:	f008 bd62 	b.w	18406 <z_queue_node_peek>
    f942:	bf00      	nop
    f944:	0001ba44 	.word	0x0001ba44
    f948:	0001be4b 	.word	0x0001be4b

0000f94c <resched>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    f94c:	f3ef 8005 	mrs	r0, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    f950:	280d      	cmp	r0, #13
    f952:	d809      	bhi.n	f968 <resched+0x1c>
    f954:	b128      	cbz	r0, f962 <resched+0x16>
    f956:	4b05      	ldr	r3, [pc, #20]	; (f96c <resched+0x20>)
    f958:	6858      	ldr	r0, [r3, #4]
    f95a:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    f95e:	f3c0 20c0 	ubfx	r0, r0, #11, #1
	}
	_current_cpu->swap_ok = 0;
#endif

	return !z_is_in_isr();
}
    f962:	f080 0001 	eor.w	r0, r0, #1
    f966:	4770      	bx	lr
    f968:	2001      	movs	r0, #1
    f96a:	e7fa      	b.n	f962 <resched+0x16>
    f96c:	e000ed00 	.word	0xe000ed00

0000f970 <reset_time_slice>:
{
    f970:	b508      	push	{r3, lr}
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    f972:	f7fb f8a1 	bl	aab8 <z_clock_elapsed>
    f976:	4b05      	ldr	r3, [pc, #20]	; (f98c <reset_time_slice+0x1c>)
    f978:	4a05      	ldr	r2, [pc, #20]	; (f990 <reset_time_slice+0x20>)
    f97a:	681b      	ldr	r3, [r3, #0]
    f97c:	4418      	add	r0, r3
    f97e:	6110      	str	r0, [r2, #16]
	z_set_timeout_expiry(slice_time, false);
    f980:	2100      	movs	r1, #0
    f982:	4618      	mov	r0, r3
}
    f984:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_set_timeout_expiry(slice_time, false);
    f988:	f009 b82e 	b.w	189e8 <z_set_timeout_expiry>
    f98c:	20005828 	.word	0x20005828
    f990:	200057f0 	.word	0x200057f0

0000f994 <k_sched_time_slice_set>:
{
    f994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f996:	460d      	mov	r5, r1
	__asm__ volatile(
    f998:	f04f 0320 	mov.w	r3, #32
    f99c:	f3ef 8411 	mrs	r4, BASEPRI
    f9a0:	f383 8811 	msr	BASEPRI, r3
    f9a4:	f3bf 8f6f 	isb	sy
    f9a8:	4e0d      	ldr	r6, [pc, #52]	; (f9e0 <k_sched_time_slice_set+0x4c>)
		_current_cpu->slice_ticks = 0;
    f9aa:	4b0e      	ldr	r3, [pc, #56]	; (f9e4 <k_sched_time_slice_set+0x50>)
    f9ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    f9b0:	2700      	movs	r7, #0
    f9b2:	fbc1 6700 	smlal	r6, r7, r1, r0
    f9b6:	2200      	movs	r2, #0
    f9b8:	611a      	str	r2, [r3, #16]
    f9ba:	4630      	mov	r0, r6
    f9bc:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    f9c0:	2300      	movs	r3, #0
    f9c2:	4639      	mov	r1, r7
    f9c4:	f7f0 ff70 	bl	8a8 <__aeabi_ldivmod>
    f9c8:	4b07      	ldr	r3, [pc, #28]	; (f9e8 <k_sched_time_slice_set+0x54>)
    f9ca:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    f9cc:	4b07      	ldr	r3, [pc, #28]	; (f9ec <k_sched_time_slice_set+0x58>)
    f9ce:	601d      	str	r5, [r3, #0]
		reset_time_slice();
    f9d0:	f7ff ffce 	bl	f970 <reset_time_slice>
	__asm__ volatile(
    f9d4:	f384 8811 	msr	BASEPRI, r4
    f9d8:	f3bf 8f6f 	isb	sy
}
    f9dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f9de:	bf00      	nop
    f9e0:	0004ffff 	.word	0x0004ffff
    f9e4:	200057f0 	.word	0x200057f0
    f9e8:	20005828 	.word	0x20005828
    f9ec:	20005824 	.word	0x20005824

0000f9f0 <k_sched_lock>:
	__asm__ volatile(
    f9f0:	f04f 0320 	mov.w	r3, #32
    f9f4:	f3ef 8111 	mrs	r1, BASEPRI
    f9f8:	f383 8811 	msr	BASEPRI, r3
    f9fc:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    fa00:	4b04      	ldr	r3, [pc, #16]	; (fa14 <k_sched_lock+0x24>)
    fa02:	689a      	ldr	r2, [r3, #8]
    fa04:	7bd3      	ldrb	r3, [r2, #15]
    fa06:	3b01      	subs	r3, #1
    fa08:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    fa0a:	f381 8811 	msr	BASEPRI, r1
    fa0e:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    fa12:	4770      	bx	lr
    fa14:	200057f0 	.word	0x200057f0

0000fa18 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    fa18:	4b09      	ldr	r3, [pc, #36]	; (fa40 <z_priq_dumb_remove+0x28>)
    fa1a:	f103 0228 	add.w	r2, r3, #40	; 0x28
    fa1e:	4282      	cmp	r2, r0
    fa20:	d105      	bne.n	fa2e <z_priq_dumb_remove+0x16>
    fa22:	689b      	ldr	r3, [r3, #8]
    fa24:	428b      	cmp	r3, r1
    fa26:	d102      	bne.n	fa2e <z_priq_dumb_remove+0x16>
    fa28:	7b4b      	ldrb	r3, [r1, #13]
    fa2a:	06db      	lsls	r3, r3, #27
    fa2c:	d106      	bne.n	fa3c <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    fa2e:	e9d1 3200 	ldrd	r3, r2, [r1]
    fa32:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    fa34:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    fa36:	2300      	movs	r3, #0
	node->prev = NULL;
    fa38:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    fa3c:	4770      	bx	lr
    fa3e:	bf00      	nop
    fa40:	200057f0 	.word	0x200057f0

0000fa44 <update_cache>:
{
    fa44:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    fa46:	4c0d      	ldr	r4, [pc, #52]	; (fa7c <update_cache+0x38>)
{
    fa48:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    fa4a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    fa4e:	f008 fdfd 	bl	1864c <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
    fa52:	4605      	mov	r5, r0
    fa54:	b900      	cbnz	r0, fa58 <update_cache+0x14>
    fa56:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    fa58:	68a3      	ldr	r3, [r4, #8]
    fa5a:	b94a      	cbnz	r2, fa70 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
    fa5c:	7b5a      	ldrb	r2, [r3, #13]
    fa5e:	06d2      	lsls	r2, r2, #27
    fa60:	d106      	bne.n	fa70 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    fa62:	69aa      	ldr	r2, [r5, #24]
    fa64:	b922      	cbnz	r2, fa70 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
    fa66:	89da      	ldrh	r2, [r3, #14]
    fa68:	2a7f      	cmp	r2, #127	; 0x7f
    fa6a:	d901      	bls.n	fa70 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
    fa6c:	6263      	str	r3, [r4, #36]	; 0x24
}
    fa6e:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
    fa70:	429d      	cmp	r5, r3
    fa72:	d001      	beq.n	fa78 <update_cache+0x34>
			reset_time_slice();
    fa74:	f7ff ff7c 	bl	f970 <reset_time_slice>
		_kernel.ready_q.cache = th;
    fa78:	6265      	str	r5, [r4, #36]	; 0x24
}
    fa7a:	e7f8      	b.n	fa6e <update_cache+0x2a>
    fa7c:	200057f0 	.word	0x200057f0

0000fa80 <k_sched_unlock>:
{
    fa80:	b510      	push	{r4, lr}
	__asm__ volatile(
    fa82:	f04f 0320 	mov.w	r3, #32
    fa86:	f3ef 8411 	mrs	r4, BASEPRI
    fa8a:	f383 8811 	msr	BASEPRI, r3
    fa8e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    fa92:	4b08      	ldr	r3, [pc, #32]	; (fab4 <k_sched_unlock+0x34>)
    fa94:	689a      	ldr	r2, [r3, #8]
    fa96:	7bd3      	ldrb	r3, [r2, #15]
    fa98:	3301      	adds	r3, #1
    fa9a:	73d3      	strb	r3, [r2, #15]
		update_cache(1);
    fa9c:	2001      	movs	r0, #1
    fa9e:	f7ff ffd1 	bl	fa44 <update_cache>
	__asm__ volatile(
    faa2:	f384 8811 	msr	BASEPRI, r4
    faa6:	f3bf 8f6f 	isb	sy
}
    faaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    faae:	f008 bda5 	b.w	185fc <z_reschedule_unlocked>
    fab2:	bf00      	nop
    fab4:	200057f0 	.word	0x200057f0

0000fab8 <z_add_thread_to_ready_q>:
{
    fab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    faba:	f04f 0320 	mov.w	r3, #32
    fabe:	f3ef 8411 	mrs	r4, BASEPRI
    fac2:	f383 8811 	msr	BASEPRI, r3
    fac6:	f3bf 8f6f 	isb	sy
	return list->head == list;
    faca:	4a15      	ldr	r2, [pc, #84]	; (fb20 <z_add_thread_to_ready_q+0x68>)
    facc:	4611      	mov	r1, r2
    face:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fad2:	428b      	cmp	r3, r1
    fad4:	d01d      	beq.n	fb12 <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fad6:	b1e3      	cbz	r3, fb12 <z_add_thread_to_ready_q+0x5a>
    fad8:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    fada:	f990 500e 	ldrsb.w	r5, [r0, #14]
    fade:	f993 700e 	ldrsb.w	r7, [r3, #14]
    fae2:	42af      	cmp	r7, r5
    fae4:	dd10      	ble.n	fb08 <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
    fae6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    fae8:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    faec:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    faee:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    faf0:	7b43      	ldrb	r3, [r0, #13]
    faf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    faf6:	7343      	strb	r3, [r0, #13]
		update_cache(0);
    faf8:	2000      	movs	r0, #0
    fafa:	f7ff ffa3 	bl	fa44 <update_cache>
	__asm__ volatile(
    fafe:	f384 8811 	msr	BASEPRI, r4
    fb02:	f3bf 8f6f 	isb	sy
}
    fb06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    fb08:	42b3      	cmp	r3, r6
    fb0a:	d002      	beq.n	fb12 <z_add_thread_to_ready_q+0x5a>
    fb0c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fb0e:	2b00      	cmp	r3, #0
    fb10:	d1e5      	bne.n	fade <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
    fb12:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    fb14:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    fb16:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    fb18:	6001      	str	r1, [r0, #0]
	list->tail->next = node;
    fb1a:	6018      	str	r0, [r3, #0]
	list->tail = node;
    fb1c:	62d0      	str	r0, [r2, #44]	; 0x2c
    fb1e:	e7e7      	b.n	faf0 <z_add_thread_to_ready_q+0x38>
    fb20:	200057f0 	.word	0x200057f0

0000fb24 <z_move_thread_to_end_of_prio_q>:
{
    fb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb26:	4604      	mov	r4, r0
	__asm__ volatile(
    fb28:	f04f 0320 	mov.w	r3, #32
    fb2c:	f3ef 8711 	mrs	r7, BASEPRI
    fb30:	f383 8811 	msr	BASEPRI, r3
    fb34:	f3bf 8f6f 	isb	sy
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    fb38:	4d19      	ldr	r5, [pc, #100]	; (fba0 <z_move_thread_to_end_of_prio_q+0x7c>)
    fb3a:	f105 0628 	add.w	r6, r5, #40	; 0x28
    fb3e:	4601      	mov	r1, r0
    fb40:	4630      	mov	r0, r6
    fb42:	f7ff ff69 	bl	fa18 <z_priq_dumb_remove>
	return list->head == list;
    fb46:	6aab      	ldr	r3, [r5, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fb48:	42b3      	cmp	r3, r6
    fb4a:	462a      	mov	r2, r5
    fb4c:	d020      	beq.n	fb90 <z_move_thread_to_end_of_prio_q+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fb4e:	b1fb      	cbz	r3, fb90 <z_move_thread_to_end_of_prio_q+0x6c>
    fb50:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    fb52:	f994 100e 	ldrsb.w	r1, [r4, #14]
    fb56:	f993 500e 	ldrsb.w	r5, [r3, #14]
    fb5a:	428d      	cmp	r5, r1
    fb5c:	dd13      	ble.n	fb86 <z_move_thread_to_end_of_prio_q+0x62>
	node->prev = successor->prev;
    fb5e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    fb60:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    fb64:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    fb66:	605c      	str	r4, [r3, #4]
    fb68:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    fb6a:	6890      	ldr	r0, [r2, #8]
    fb6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fb70:	7363      	strb	r3, [r4, #13]
    fb72:	1b03      	subs	r3, r0, r4
    fb74:	4258      	negs	r0, r3
    fb76:	4158      	adcs	r0, r3
    fb78:	f7ff ff64 	bl	fa44 <update_cache>
	__asm__ volatile(
    fb7c:	f387 8811 	msr	BASEPRI, r7
    fb80:	f3bf 8f6f 	isb	sy
}
    fb84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    fb86:	4283      	cmp	r3, r0
    fb88:	d002      	beq.n	fb90 <z_move_thread_to_end_of_prio_q+0x6c>
    fb8a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fb8c:	2b00      	cmp	r3, #0
    fb8e:	d1e2      	bne.n	fb56 <z_move_thread_to_end_of_prio_q+0x32>
	node->prev = list->tail;
    fb90:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    fb92:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    fb94:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    fb96:	6026      	str	r6, [r4, #0]
	list->tail->next = node;
    fb98:	601c      	str	r4, [r3, #0]
	list->tail = node;
    fb9a:	62d4      	str	r4, [r2, #44]	; 0x2c
    fb9c:	e7e4      	b.n	fb68 <z_move_thread_to_end_of_prio_q+0x44>
    fb9e:	bf00      	nop
    fba0:	200057f0 	.word	0x200057f0

0000fba4 <z_time_slice>:
	if (pending_current == _current) {
    fba4:	4a16      	ldr	r2, [pc, #88]	; (fc00 <z_time_slice+0x5c>)
    fba6:	4917      	ldr	r1, [pc, #92]	; (fc04 <z_time_slice+0x60>)
{
    fba8:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    fbaa:	680c      	ldr	r4, [r1, #0]
    fbac:	6893      	ldr	r3, [r2, #8]
    fbae:	42a3      	cmp	r3, r4
    fbb0:	4614      	mov	r4, r2
    fbb2:	d103      	bne.n	fbbc <z_time_slice+0x18>
}
    fbb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			reset_time_slice();
    fbb8:	f7ff beda 	b.w	f970 <reset_time_slice>
	pending_current = NULL;
    fbbc:	2500      	movs	r5, #0
    fbbe:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
    fbc0:	4911      	ldr	r1, [pc, #68]	; (fc08 <z_time_slice+0x64>)
    fbc2:	6809      	ldr	r1, [r1, #0]
    fbc4:	b1c1      	cbz	r1, fbf8 <z_time_slice+0x54>
		&& !z_is_thread_timeout_active(t);
    fbc6:	89d9      	ldrh	r1, [r3, #14]
    fbc8:	297f      	cmp	r1, #127	; 0x7f
    fbca:	d815      	bhi.n	fbf8 <z_time_slice+0x54>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
    fbcc:	490f      	ldr	r1, [pc, #60]	; (fc0c <z_time_slice+0x68>)
    fbce:	f993 500e 	ldrsb.w	r5, [r3, #14]
    fbd2:	6809      	ldr	r1, [r1, #0]
    fbd4:	428d      	cmp	r5, r1
    fbd6:	db0f      	blt.n	fbf8 <z_time_slice+0x54>
	return thread == _idle_thread;
    fbd8:	490d      	ldr	r1, [pc, #52]	; (fc10 <z_time_slice+0x6c>)
		&& !is_idle(t)
    fbda:	6809      	ldr	r1, [r1, #0]
    fbdc:	428b      	cmp	r3, r1
    fbde:	d00b      	beq.n	fbf8 <z_time_slice+0x54>
		&& !z_is_thread_timeout_active(t);
    fbe0:	6999      	ldr	r1, [r3, #24]
    fbe2:	b949      	cbnz	r1, fbf8 <z_time_slice+0x54>
		if (ticks >= _current_cpu->slice_ticks) {
    fbe4:	6911      	ldr	r1, [r2, #16]
    fbe6:	4281      	cmp	r1, r0
    fbe8:	dc03      	bgt.n	fbf2 <z_time_slice+0x4e>
			z_move_thread_to_end_of_prio_q(_current);
    fbea:	4618      	mov	r0, r3
    fbec:	f7ff ff9a 	bl	fb24 <z_move_thread_to_end_of_prio_q>
    fbf0:	e7e0      	b.n	fbb4 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
    fbf2:	1a09      	subs	r1, r1, r0
    fbf4:	6111      	str	r1, [r2, #16]
}
    fbf6:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    fbf8:	2300      	movs	r3, #0
    fbfa:	6123      	str	r3, [r4, #16]
    fbfc:	e7fb      	b.n	fbf6 <z_time_slice+0x52>
    fbfe:	bf00      	nop
    fc00:	200057f0 	.word	0x200057f0
    fc04:	20005820 	.word	0x20005820
    fc08:	20005828 	.word	0x20005828
    fc0c:	20005824 	.word	0x20005824
    fc10:	000193c8 	.word	0x000193c8

0000fc14 <z_remove_thread_from_ready_q>:
{
    fc14:	b538      	push	{r3, r4, r5, lr}
    fc16:	4604      	mov	r4, r0
	__asm__ volatile(
    fc18:	f04f 0320 	mov.w	r3, #32
    fc1c:	f3ef 8511 	mrs	r5, BASEPRI
    fc20:	f383 8811 	msr	BASEPRI, r3
    fc24:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    fc28:	7b43      	ldrb	r3, [r0, #13]
    fc2a:	065a      	lsls	r2, r3, #25
    fc2c:	d507      	bpl.n	fc3e <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    fc2e:	4601      	mov	r1, r0
    fc30:	4809      	ldr	r0, [pc, #36]	; (fc58 <z_remove_thread_from_ready_q+0x44>)
    fc32:	f7ff fef1 	bl	fa18 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    fc36:	7b63      	ldrb	r3, [r4, #13]
    fc38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    fc3c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    fc3e:	4b07      	ldr	r3, [pc, #28]	; (fc5c <z_remove_thread_from_ready_q+0x48>)
    fc40:	6898      	ldr	r0, [r3, #8]
    fc42:	1b03      	subs	r3, r0, r4
    fc44:	4258      	negs	r0, r3
    fc46:	4158      	adcs	r0, r3
    fc48:	f7ff fefc 	bl	fa44 <update_cache>
	__asm__ volatile(
    fc4c:	f385 8811 	msr	BASEPRI, r5
    fc50:	f3bf 8f6f 	isb	sy
}
    fc54:	bd38      	pop	{r3, r4, r5, pc}
    fc56:	bf00      	nop
    fc58:	20005818 	.word	0x20005818
    fc5c:	200057f0 	.word	0x200057f0

0000fc60 <pend>:
{
    fc60:	b570      	push	{r4, r5, r6, lr}
    fc62:	4604      	mov	r4, r0
    fc64:	460d      	mov	r5, r1
    fc66:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
    fc68:	f7ff ffd4 	bl	fc14 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
    fc6c:	7b63      	ldrb	r3, [r4, #13]
    fc6e:	f043 0302 	orr.w	r3, r3, #2
    fc72:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    fc74:	b17d      	cbz	r5, fc96 <pend+0x36>
	return list->head == list;
    fc76:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    fc78:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fc7a:	429d      	cmp	r5, r3
    fc7c:	d026      	beq.n	fccc <pend+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fc7e:	b32b      	cbz	r3, fccc <pend+0x6c>
	if (t1->base.prio < t2->base.prio) {
    fc80:	f994 200e 	ldrsb.w	r2, [r4, #14]
    fc84:	f993 100e 	ldrsb.w	r1, [r3, #14]
    fc88:	4291      	cmp	r1, r2
    fc8a:	dd19      	ble.n	fcc0 <pend+0x60>
	node->prev = successor->prev;
    fc8c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    fc8e:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    fc92:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    fc94:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
    fc96:	1c73      	adds	r3, r6, #1
    fc98:	d01f      	beq.n	fcda <pend+0x7a>
    fc9a:	4810      	ldr	r0, [pc, #64]	; (fcdc <pend+0x7c>)
    fc9c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    fca0:	2100      	movs	r1, #0
    fca2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    fca6:	fbc5 0106 	smlal	r0, r1, r5, r6
    fcaa:	2300      	movs	r3, #0
    fcac:	f7f0 fdfc 	bl	8a8 <__aeabi_ldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    fcb0:	490b      	ldr	r1, [pc, #44]	; (fce0 <pend+0x80>)
    fcb2:	1c42      	adds	r2, r0, #1
    fcb4:	f104 0018 	add.w	r0, r4, #24
}
    fcb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fcbc:	f000 bdda 	b.w	10874 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
    fcc0:	6869      	ldr	r1, [r5, #4]
    fcc2:	428b      	cmp	r3, r1
    fcc4:	d002      	beq.n	fccc <pend+0x6c>
    fcc6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fcc8:	2b00      	cmp	r3, #0
    fcca:	d1db      	bne.n	fc84 <pend+0x24>
	node->prev = list->tail;
    fccc:	686b      	ldr	r3, [r5, #4]
    fcce:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    fcd0:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    fcd2:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
    fcd4:	601c      	str	r4, [r3, #0]
	list->tail = node;
    fcd6:	606c      	str	r4, [r5, #4]
    fcd8:	e7dd      	b.n	fc96 <pend+0x36>
}
    fcda:	bd70      	pop	{r4, r5, r6, pc}
    fcdc:	0004ffff 	.word	0x0004ffff
    fce0:	00018659 	.word	0x00018659

0000fce4 <z_pend_curr_irqlock>:
{
    fce4:	b570      	push	{r4, r5, r6, lr}
	pend(_current, wait_q, timeout);
    fce6:	4d0f      	ldr	r5, [pc, #60]	; (fd24 <z_pend_curr_irqlock+0x40>)
	pending_current = _current;
    fce8:	4c0f      	ldr	r4, [pc, #60]	; (fd28 <z_pend_curr_irqlock+0x44>)
{
    fcea:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
    fcec:	68a8      	ldr	r0, [r5, #8]
    fcee:	f7ff ffb7 	bl	fc60 <pend>
	pending_current = _current;
    fcf2:	68ab      	ldr	r3, [r5, #8]
    fcf4:	6023      	str	r3, [r4, #0]
    fcf6:	4630      	mov	r0, r6
    fcf8:	f7fa ff30 	bl	ab5c <__swap>
	__asm__ volatile(
    fcfc:	f04f 0220 	mov.w	r2, #32
    fd00:	f3ef 8311 	mrs	r3, BASEPRI
    fd04:	f382 8811 	msr	BASEPRI, r2
    fd08:	f3bf 8f6f 	isb	sy
		if (pending_current == _current) {
    fd0c:	6822      	ldr	r2, [r4, #0]
    fd0e:	68a9      	ldr	r1, [r5, #8]
    fd10:	4291      	cmp	r1, r2
			pending_current = NULL;
    fd12:	bf04      	itt	eq
    fd14:	2200      	moveq	r2, #0
    fd16:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
    fd18:	f383 8811 	msr	BASEPRI, r3
    fd1c:	f3bf 8f6f 	isb	sy
}
    fd20:	bd70      	pop	{r4, r5, r6, pc}
    fd22:	bf00      	nop
    fd24:	200057f0 	.word	0x200057f0
    fd28:	20005820 	.word	0x20005820

0000fd2c <z_pend_curr>:
{
    fd2c:	b510      	push	{r4, lr}
    fd2e:	460c      	mov	r4, r1
    fd30:	4611      	mov	r1, r2
	pending_current = _current;
    fd32:	4a06      	ldr	r2, [pc, #24]	; (fd4c <z_pend_curr+0x20>)
    fd34:	6890      	ldr	r0, [r2, #8]
    fd36:	4a06      	ldr	r2, [pc, #24]	; (fd50 <z_pend_curr+0x24>)
    fd38:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
    fd3a:	461a      	mov	r2, r3
    fd3c:	f7ff ff90 	bl	fc60 <pend>
    fd40:	4620      	mov	r0, r4
}
    fd42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fd46:	f7fa bf09 	b.w	ab5c <__swap>
    fd4a:	bf00      	nop
    fd4c:	200057f0 	.word	0x200057f0
    fd50:	20005820 	.word	0x20005820

0000fd54 <z_thread_priority_set>:
{
    fd54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fd58:	4604      	mov	r4, r0
	__asm__ volatile(
    fd5a:	f04f 0320 	mov.w	r3, #32
    fd5e:	f3ef 8911 	mrs	r9, BASEPRI
    fd62:	f383 8811 	msr	BASEPRI, r3
    fd66:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
    fd6a:	f008 fbef 	bl	1854c <z_is_thread_ready>
		if (need_sched) {
    fd6e:	b24e      	sxtb	r6, r1
    fd70:	4680      	mov	r8, r0
    fd72:	2800      	cmp	r0, #0
    fd74:	d034      	beq.n	fde0 <z_thread_priority_set+0x8c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    fd76:	4d1c      	ldr	r5, [pc, #112]	; (fde8 <z_thread_priority_set+0x94>)
    fd78:	f105 0728 	add.w	r7, r5, #40	; 0x28
    fd7c:	4621      	mov	r1, r4
    fd7e:	4638      	mov	r0, r7
    fd80:	f7ff fe4a 	bl	fa18 <z_priq_dumb_remove>
	return list->head == list;
    fd84:	6aab      	ldr	r3, [r5, #40]	; 0x28
			thread->base.prio = prio;
    fd86:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fd88:	42bb      	cmp	r3, r7
    fd8a:	462a      	mov	r2, r5
    fd8c:	d021      	beq.n	fdd2 <z_thread_priority_set+0x7e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fd8e:	b303      	cbz	r3, fdd2 <z_thread_priority_set+0x7e>
    fd90:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    fd92:	f993 000e 	ldrsb.w	r0, [r3, #14]
    fd96:	42b0      	cmp	r0, r6
    fd98:	dd16      	ble.n	fdc8 <z_thread_priority_set+0x74>
	node->prev = successor->prev;
    fd9a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    fd9c:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    fda0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    fda2:	605c      	str	r4, [r3, #4]
			update_cache(1);
    fda4:	2001      	movs	r0, #1
    fda6:	f7ff fe4d 	bl	fa44 <update_cache>
	__asm__ volatile(
    fdaa:	f389 8811 	msr	BASEPRI, r9
    fdae:	f3bf 8f6f 	isb	sy
	if (need_sched && _current->base.sched_locked == 0) {
    fdb2:	f1b8 0f00 	cmp.w	r8, #0
    fdb6:	d015      	beq.n	fde4 <z_thread_priority_set+0x90>
    fdb8:	4b0b      	ldr	r3, [pc, #44]	; (fde8 <z_thread_priority_set+0x94>)
    fdba:	689b      	ldr	r3, [r3, #8]
    fdbc:	7bdb      	ldrb	r3, [r3, #15]
    fdbe:	b98b      	cbnz	r3, fde4 <z_thread_priority_set+0x90>
}
    fdc0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		z_reschedule_unlocked();
    fdc4:	f008 bc1a 	b.w	185fc <z_reschedule_unlocked>
	return (node == list->tail) ? NULL : node->next;
    fdc8:	4299      	cmp	r1, r3
    fdca:	d002      	beq.n	fdd2 <z_thread_priority_set+0x7e>
    fdcc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fdce:	2b00      	cmp	r3, #0
    fdd0:	d1df      	bne.n	fd92 <z_thread_priority_set+0x3e>
	node->prev = list->tail;
    fdd2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    fdd4:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    fdd6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    fdd8:	6027      	str	r7, [r4, #0]
	list->tail->next = node;
    fdda:	601c      	str	r4, [r3, #0]
	list->tail = node;
    fddc:	62d4      	str	r4, [r2, #44]	; 0x2c
    fdde:	e7e1      	b.n	fda4 <z_thread_priority_set+0x50>
			thread->base.prio = prio;
    fde0:	73a6      	strb	r6, [r4, #14]
    fde2:	e7e2      	b.n	fdaa <z_thread_priority_set+0x56>
}
    fde4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fde8:	200057f0 	.word	0x200057f0

0000fdec <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    fdec:	4b04      	ldr	r3, [pc, #16]	; (fe00 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    fdee:	2100      	movs	r1, #0
    fdf0:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    fdf4:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    fdf8:	4608      	mov	r0, r1
    fdfa:	f7ff bdcb 	b.w	f994 <k_sched_time_slice_set>
    fdfe:	bf00      	nop
    fe00:	200057f0 	.word	0x200057f0

0000fe04 <z_hdlr_k_thread_priority_get>:
{
	return thread->base.prio;
}

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE(k_thread_priority_get, K_OBJ_THREAD,
    fe04:	b510      	push	{r4, lr}
    fe06:	4604      	mov	r4, r0
    fe08:	f7f0 f9fa 	bl	200 <z_object_find>
    fe0c:	4621      	mov	r1, r4
    fe0e:	f008 fba6 	bl	1855e <z_obj_validation_check.constprop.18>
    fe12:	b130      	cbz	r0, fe22 <z_hdlr_k_thread_priority_get+0x1e>
    fe14:	4804      	ldr	r0, [pc, #16]	; (fe28 <z_hdlr_k_thread_priority_get+0x24>)
    fe16:	4905      	ldr	r1, [pc, #20]	; (fe2c <z_hdlr_k_thread_priority_get+0x28>)
    fe18:	f003 fb31 	bl	1347e <printk>
    fe1c:	9804      	ldr	r0, [sp, #16]
    fe1e:	f005 f882 	bl	14f26 <z_arch_syscall_oops>
    fe22:	f994 000e 	ldrsb.w	r0, [r4, #14]
    fe26:	bd10      	pop	{r4, pc}
    fe28:	0001ba44 	.word	0x0001ba44
    fe2c:	0001be64 	.word	0x0001be64

0000fe30 <z_hdlr_k_thread_priority_set>:
	z_thread_priority_set(thread, prio);
}

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER(k_thread_priority_set, thread_p, prio)
{
    fe30:	b570      	push	{r4, r5, r6, lr}
    fe32:	4605      	mov	r5, r0
    fe34:	460c      	mov	r4, r1
	struct k_thread *thread = (struct k_thread *)thread_p;

	Z_OOPS(Z_SYSCALL_OBJ(thread, K_OBJ_THREAD));
    fe36:	f7f0 f9e3 	bl	200 <z_object_find>
    fe3a:	4629      	mov	r1, r5
    fe3c:	f008 fb8f 	bl	1855e <z_obj_validation_check.constprop.18>
    fe40:	4606      	mov	r6, r0
    fe42:	b188      	cbz	r0, fe68 <z_hdlr_k_thread_priority_set+0x38>
    fe44:	4911      	ldr	r1, [pc, #68]	; (fe8c <z_hdlr_k_thread_priority_set+0x5c>)
    fe46:	4812      	ldr	r0, [pc, #72]	; (fe90 <z_hdlr_k_thread_priority_set+0x60>)
    fe48:	f003 fb19 	bl	1347e <printk>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(_is_valid_prio(prio, NULL),
    fe4c:	9806      	ldr	r0, [sp, #24]
    fe4e:	f005 f86a 	bl	14f26 <z_arch_syscall_oops>
				    "invalid thread priority %d", (int)prio));
	Z_OOPS(Z_SYSCALL_VERIFY_MSG((s8_t)prio >= thread->base.prio,
    fe52:	f995 300e 	ldrsb.w	r3, [r5, #14]
    fe56:	b262      	sxtb	r2, r4
    fe58:	429a      	cmp	r2, r3
    fe5a:	da10      	bge.n	fe7e <z_hdlr_k_thread_priority_set+0x4e>
    fe5c:	4622      	mov	r2, r4
    fe5e:	490b      	ldr	r1, [pc, #44]	; (fe8c <z_hdlr_k_thread_priority_set+0x5c>)
    fe60:	480c      	ldr	r0, [pc, #48]	; (fe94 <z_hdlr_k_thread_priority_set+0x64>)
    fe62:	f003 fb0c 	bl	1347e <printk>
    fe66:	e7f1      	b.n	fe4c <z_hdlr_k_thread_priority_set+0x1c>
	if (!z_is_prio_higher_or_equal(prio,
    fe68:	2c0e      	cmp	r4, #14
    fe6a:	dc02      	bgt.n	fe72 <z_hdlr_k_thread_priority_set+0x42>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(_is_valid_prio(prio, NULL),
    fe6c:	f114 0f10 	cmn.w	r4, #16
    fe70:	daef      	bge.n	fe52 <z_hdlr_k_thread_priority_set+0x22>
    fe72:	4622      	mov	r2, r4
    fe74:	4905      	ldr	r1, [pc, #20]	; (fe8c <z_hdlr_k_thread_priority_set+0x5c>)
    fe76:	4808      	ldr	r0, [pc, #32]	; (fe98 <z_hdlr_k_thread_priority_set+0x68>)
    fe78:	f003 fb01 	bl	1347e <printk>
    fe7c:	e7e6      	b.n	fe4c <z_hdlr_k_thread_priority_set+0x1c>
	z_thread_priority_set(thread, prio);
    fe7e:	4628      	mov	r0, r5
    fe80:	4621      	mov	r1, r4
    fe82:	f7ff ff67 	bl	fd54 <z_thread_priority_set>
				    "thread priority may only be downgraded (%d < %d)",
				    prio, thread->base.prio));

	z_impl_k_thread_priority_set((k_tid_t)thread, prio);
	return 0;
}
    fe86:	4630      	mov	r0, r6
    fe88:	bd70      	pop	{r4, r5, r6, pc}
    fe8a:	bf00      	nop
    fe8c:	0001be81 	.word	0x0001be81
    fe90:	0001ba44 	.word	0x0001ba44
    fe94:	0001bee3 	.word	0x0001bee3
    fe98:	0001beae 	.word	0x0001beae

0000fe9c <z_impl_k_yield>:
}
#endif
#endif

void z_impl_k_yield(void)
{
    fe9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(!z_is_in_isr(), "");

	if (!is_idle(_current)) {
    fe9e:	4c22      	ldr	r4, [pc, #136]	; (ff28 <z_impl_k_yield+0x8c>)
    fea0:	4b22      	ldr	r3, [pc, #136]	; (ff2c <z_impl_k_yield+0x90>)
    fea2:	68a2      	ldr	r2, [r4, #8]
    fea4:	681b      	ldr	r3, [r3, #0]
    fea6:	429a      	cmp	r2, r3
    fea8:	d025      	beq.n	fef6 <z_impl_k_yield+0x5a>
	__asm__ volatile(
    feaa:	f04f 0320 	mov.w	r3, #32
    feae:	f3ef 8611 	mrs	r6, BASEPRI
    feb2:	f383 8811 	msr	BASEPRI, r3
    feb6:	f3bf 8f6f 	isb	sy
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
    feba:	f104 0528 	add.w	r5, r4, #40	; 0x28
    febe:	68a1      	ldr	r1, [r4, #8]
    fec0:	4628      	mov	r0, r5
    fec2:	f7ff fda9 	bl	fa18 <z_priq_dumb_remove>
	return list->head == list;
    fec6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						 _current);
				_priq_run_add(&_kernel.ready_q.runq,
    fec8:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    feca:	42ab      	cmp	r3, r5
    fecc:	d024      	beq.n	ff18 <z_impl_k_yield+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fece:	b31b      	cbz	r3, ff18 <z_impl_k_yield+0x7c>
    fed0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    fed2:	f992 000e 	ldrsb.w	r0, [r2, #14]
    fed6:	f993 700e 	ldrsb.w	r7, [r3, #14]
    feda:	4287      	cmp	r7, r0
    fedc:	dd17      	ble.n	ff0e <z_impl_k_yield+0x72>
	node->prev = successor->prev;
    fede:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    fee0:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
    fee4:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    fee6:	605a      	str	r2, [r3, #4]
					      _current);
			}
			update_cache(1);
    fee8:	2001      	movs	r0, #1
    feea:	f7ff fdab 	bl	fa44 <update_cache>
	__asm__ volatile(
    feee:	f386 8811 	msr	BASEPRI, r6
    fef2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    fef6:	f04f 0320 	mov.w	r3, #32
    fefa:	f3ef 8011 	mrs	r0, BASEPRI
    fefe:	f383 8811 	msr	BASEPRI, r3
    ff02:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
    ff06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ff0a:	f7fa be27 	b.w	ab5c <__swap>
	return (node == list->tail) ? NULL : node->next;
    ff0e:	4299      	cmp	r1, r3
    ff10:	d002      	beq.n	ff18 <z_impl_k_yield+0x7c>
    ff12:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ff14:	2b00      	cmp	r3, #0
    ff16:	d1de      	bne.n	fed6 <z_impl_k_yield+0x3a>
	node->prev = list->tail;
    ff18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ff1a:	6053      	str	r3, [r2, #4]
	list->tail->next = node;
    ff1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	node->next = list;
    ff1e:	6015      	str	r5, [r2, #0]
	list->tail->next = node;
    ff20:	601a      	str	r2, [r3, #0]
	list->tail = node;
    ff22:	62e2      	str	r2, [r4, #44]	; 0x2c
    ff24:	e7e0      	b.n	fee8 <z_impl_k_yield+0x4c>
    ff26:	bf00      	nop
    ff28:	200057f0 	.word	0x200057f0
    ff2c:	000193c8 	.word	0x000193c8

0000ff30 <z_impl_k_sleep>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE_VOID(k_yield);
#endif

s32_t z_impl_k_sleep(s32_t duration)
{
    ff30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(!z_is_in_isr(), "");

	K_DEBUG("thread %p for %d ns\n", _current, duration);

	/* wait of 0 ms is treated as a 'yield' */
	if (duration == 0) {
    ff32:	4604      	mov	r4, r0
    ff34:	b918      	cbnz	r0, ff3e <z_impl_k_sleep+0xe>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
    ff36:	f7ff ffb1 	bl	fe9c <z_impl_k_yield>
		return __ticks_to_ms(ticks);
	}
#endif

	return 0;
}
    ff3a:	4620      	mov	r0, r4
    ff3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ff3e:	481e      	ldr	r0, [pc, #120]	; (ffb8 <z_impl_k_sleep+0x88>)
    ff40:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    ff44:	2100      	movs	r1, #0
    ff46:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    ff4a:	2300      	movs	r3, #0
    ff4c:	fbc5 0104 	smlal	r0, r1, r5, r4
    ff50:	f7f0 fcaa 	bl	8a8 <__aeabi_ldivmod>
	ticks = _TICK_ALIGN + z_ms_to_ticks(duration);
    ff54:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
    ff56:	f008 fd61 	bl	18a1c <z_tick_get_32>
    ff5a:	1834      	adds	r4, r6, r0
    ff5c:	f04f 0320 	mov.w	r3, #32
    ff60:	f3ef 8711 	mrs	r7, BASEPRI
    ff64:	f383 8811 	msr	BASEPRI, r3
    ff68:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    ff6c:	4d13      	ldr	r5, [pc, #76]	; (ffbc <z_impl_k_sleep+0x8c>)
    ff6e:	4b14      	ldr	r3, [pc, #80]	; (ffc0 <z_impl_k_sleep+0x90>)
    ff70:	68a8      	ldr	r0, [r5, #8]
    ff72:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
    ff74:	f7ff fe4e 	bl	fc14 <z_remove_thread_from_ready_q>
    ff78:	68a8      	ldr	r0, [r5, #8]
    ff7a:	4912      	ldr	r1, [pc, #72]	; (ffc4 <z_impl_k_sleep+0x94>)
    ff7c:	4632      	mov	r2, r6
    ff7e:	3018      	adds	r0, #24
    ff80:	f000 fc78 	bl	10874 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    ff84:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    ff86:	7b53      	ldrb	r3, [r2, #13]
    ff88:	f043 0310 	orr.w	r3, r3, #16
    ff8c:	7353      	strb	r3, [r2, #13]
    ff8e:	4638      	mov	r0, r7
    ff90:	f7fa fde4 	bl	ab5c <__swap>
	ticks = expected_wakeup_time - z_tick_get_32();
    ff94:	f008 fd42 	bl	18a1c <z_tick_get_32>
    ff98:	1a20      	subs	r0, r4, r0
	if (ticks > 0) {
    ff9a:	2800      	cmp	r0, #0
    ff9c:	dd09      	ble.n	ffb2 <z_impl_k_sleep+0x82>
	return (u64_t)ticks * MSEC_PER_SEC / (u64_t)CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    ff9e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ffa2:	2264      	movs	r2, #100	; 0x64
    ffa4:	2300      	movs	r3, #0
    ffa6:	fb80 0101 	smull	r0, r1, r0, r1
    ffaa:	f7f0 fccd 	bl	948 <__aeabi_uldivmod>
    ffae:	4604      	mov	r4, r0
    ffb0:	e7c3      	b.n	ff3a <z_impl_k_sleep+0xa>
	return 0;
    ffb2:	2400      	movs	r4, #0
    ffb4:	e7c1      	b.n	ff3a <z_impl_k_sleep+0xa>
    ffb6:	bf00      	nop
    ffb8:	0004ffff 	.word	0x0004ffff
    ffbc:	200057f0 	.word	0x200057f0
    ffc0:	20005820 	.word	0x20005820
    ffc4:	00018659 	.word	0x00018659

0000ffc8 <z_impl_k_wakeup>:
	return z_impl_k_sleep(duration);
}
#endif

void z_impl_k_wakeup(k_tid_t thread)
{
    ffc8:	b510      	push	{r4, lr}
	if (z_is_thread_pending(thread)) {
    ffca:	7b43      	ldrb	r3, [r0, #13]
    ffcc:	079a      	lsls	r2, r3, #30
{
    ffce:	4604      	mov	r4, r0
	if (z_is_thread_pending(thread)) {
    ffd0:	d41c      	bmi.n	1000c <z_impl_k_wakeup+0x44>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    ffd2:	3018      	adds	r0, #24
    ffd4:	f008 fce2 	bl	1899c <z_abort_timeout>
		return;
	}

	if (z_abort_thread_timeout(thread) < 0) {
    ffd8:	2800      	cmp	r0, #0
    ffda:	db17      	blt.n	1000c <z_impl_k_wakeup+0x44>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    ffdc:	7b63      	ldrb	r3, [r4, #13]
    ffde:	f023 0310 	bic.w	r3, r3, #16
    ffe2:	7363      	strb	r3, [r4, #13]
	if (z_is_thread_ready(thread)) {
    ffe4:	4620      	mov	r0, r4
    ffe6:	f008 fab1 	bl	1854c <z_is_thread_ready>
    ffea:	b110      	cbz	r0, fff2 <z_impl_k_wakeup+0x2a>
		z_add_thread_to_ready_q(thread);
    ffec:	4620      	mov	r0, r4
    ffee:	f7ff fd63 	bl	fab8 <z_add_thread_to_ready_q>
    fff2:	f3ef 8305 	mrs	r3, IPSR
    fff6:	2b0d      	cmp	r3, #13
    fff8:	d808      	bhi.n	1000c <z_impl_k_wakeup+0x44>
    fffa:	b11b      	cbz	r3, 10004 <z_impl_k_wakeup+0x3c>
    fffc:	4b04      	ldr	r3, [pc, #16]	; (10010 <z_impl_k_wakeup+0x48>)
    fffe:	685b      	ldr	r3, [r3, #4]
   10000:	051b      	lsls	r3, r3, #20
   10002:	d503      	bpl.n	1000c <z_impl_k_wakeup+0x44>

	if (IS_ENABLED(CONFIG_SMP) &&
	    !IS_ENABLED(CONFIG_SCHED_IPI_SUPPORTED)) {
		z_sched_ipi();
	}
}
   10004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_reschedule_unlocked();
   10008:	f008 baf8 	b.w	185fc <z_reschedule_unlocked>
}
   1000c:	bd10      	pop	{r4, pc}
   1000e:	bf00      	nop
   10010:	e000ed00 	.word	0xe000ed00

00010014 <z_hdlr_k_wakeup>:
	}
}
#endif

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_wakeup, K_OBJ_THREAD, k_tid_t);
   10014:	b538      	push	{r3, r4, r5, lr}
   10016:	4605      	mov	r5, r0
   10018:	f7f0 f8f2 	bl	200 <z_object_find>
   1001c:	4629      	mov	r1, r5
   1001e:	f008 fa9e 	bl	1855e <z_obj_validation_check.constprop.18>
   10022:	4604      	mov	r4, r0
   10024:	b130      	cbz	r0, 10034 <z_hdlr_k_wakeup+0x20>
   10026:	4806      	ldr	r0, [pc, #24]	; (10040 <z_hdlr_k_wakeup+0x2c>)
   10028:	4906      	ldr	r1, [pc, #24]	; (10044 <z_hdlr_k_wakeup+0x30>)
   1002a:	f003 fa28 	bl	1347e <printk>
   1002e:	9806      	ldr	r0, [sp, #24]
   10030:	f004 ff79 	bl	14f26 <z_arch_syscall_oops>
   10034:	4628      	mov	r0, r5
   10036:	f7ff ffc7 	bl	ffc8 <z_impl_k_wakeup>
   1003a:	4620      	mov	r0, r4
   1003c:	bd38      	pop	{r3, r4, r5, pc}
   1003e:	bf00      	nop
   10040:	0001ba44 	.word	0x0001ba44
   10044:	0001be9e 	.word	0x0001be9e

00010048 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   10048:	4b01      	ldr	r3, [pc, #4]	; (10050 <z_impl_k_current_get+0x8>)
   1004a:	6898      	ldr	r0, [r3, #8]
   1004c:	4770      	bx	lr
   1004e:	bf00      	nop
   10050:	200057f0 	.word	0x200057f0

00010054 <z_hdlr_k_current_get>:

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE(k_current_get);
   10054:	4b01      	ldr	r3, [pc, #4]	; (1005c <z_hdlr_k_current_get+0x8>)
   10056:	6898      	ldr	r0, [r3, #8]
   10058:	4770      	bx	lr
   1005a:	bf00      	nop
   1005c:	200057f0 	.word	0x200057f0

00010060 <z_impl_k_is_preempt_thread>:
   10060:	f3ef 8305 	mrs	r3, IPSR
   10064:	2b0d      	cmp	r3, #13
   10066:	d80d      	bhi.n	10084 <z_impl_k_is_preempt_thread+0x24>
   10068:	b123      	cbz	r3, 10074 <z_impl_k_is_preempt_thread+0x14>
   1006a:	4b07      	ldr	r3, [pc, #28]	; (10088 <z_impl_k_is_preempt_thread+0x28>)
   1006c:	6858      	ldr	r0, [r3, #4]
   1006e:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
   10072:	d008      	beq.n	10086 <z_impl_k_is_preempt_thread+0x26>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !z_is_in_isr() && is_preempt(_current);
   10074:	4b05      	ldr	r3, [pc, #20]	; (1008c <z_impl_k_is_preempt_thread+0x2c>)
   10076:	689b      	ldr	r3, [r3, #8]
   10078:	89d8      	ldrh	r0, [r3, #14]
   1007a:	287f      	cmp	r0, #127	; 0x7f
   1007c:	bf8c      	ite	hi
   1007e:	2000      	movhi	r0, #0
   10080:	2001      	movls	r0, #1
   10082:	4770      	bx	lr
   10084:	2000      	movs	r0, #0
}
   10086:	4770      	bx	lr
   10088:	e000ed00 	.word	0xe000ed00
   1008c:	200057f0 	.word	0x200057f0

00010090 <z_hdlr_k_sem_init>:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_INIT);
}

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER(k_sem_init, sem, initial_count, limit)
{
   10090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10092:	4606      	mov	r6, r0
   10094:	460f      	mov	r7, r1
   10096:	4614      	mov	r4, r2
	Z_OOPS(Z_SYSCALL_OBJ_INIT(sem, K_OBJ_SEM));
   10098:	f7f0 f8b2 	bl	200 <z_object_find>
   1009c:	2201      	movs	r2, #1
   1009e:	4631      	mov	r1, r6
   100a0:	f008 fb57 	bl	18752 <z_obj_validation_check.constprop.4>
   100a4:	4605      	mov	r5, r0
   100a6:	b130      	cbz	r0, 100b6 <z_hdlr_k_sem_init+0x26>
   100a8:	4909      	ldr	r1, [pc, #36]	; (100d0 <z_hdlr_k_sem_init+0x40>)
   100aa:	480a      	ldr	r0, [pc, #40]	; (100d4 <z_hdlr_k_sem_init+0x44>)
	Z_OOPS(Z_SYSCALL_VERIFY(limit != 0 && initial_count <= limit));
   100ac:	f003 f9e7 	bl	1347e <printk>
   100b0:	9808      	ldr	r0, [sp, #32]
   100b2:	f004 ff38 	bl	14f26 <z_arch_syscall_oops>
   100b6:	b10c      	cbz	r4, 100bc <z_hdlr_k_sem_init+0x2c>
   100b8:	42bc      	cmp	r4, r7
   100ba:	d202      	bcs.n	100c2 <z_hdlr_k_sem_init+0x32>
   100bc:	4904      	ldr	r1, [pc, #16]	; (100d0 <z_hdlr_k_sem_init+0x40>)
   100be:	4806      	ldr	r0, [pc, #24]	; (100d8 <z_hdlr_k_sem_init+0x48>)
   100c0:	e7f4      	b.n	100ac <z_hdlr_k_sem_init+0x1c>
	z_impl_k_sem_init((struct k_sem *)sem, initial_count, limit);
   100c2:	4630      	mov	r0, r6
   100c4:	4622      	mov	r2, r4
   100c6:	4639      	mov	r1, r7
   100c8:	f008 fb52 	bl	18770 <z_impl_k_sem_init>
	return 0;
}
   100cc:	4628      	mov	r0, r5
   100ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   100d0:	0001bf2e 	.word	0x0001bf2e
   100d4:	0001ba44 	.word	0x0001ba44
   100d8:	0001bf8e 	.word	0x0001bf8e

000100dc <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   100dc:	b570      	push	{r4, r5, r6, lr}
   100de:	4604      	mov	r4, r0
   100e0:	f04f 0320 	mov.w	r3, #32
   100e4:	f3ef 8611 	mrs	r6, BASEPRI
   100e8:	f383 8811 	msr	BASEPRI, r3
   100ec:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   100f0:	f008 fae3 	bl	186ba <z_unpend_first_thread>
	if (thread != NULL) {
   100f4:	4605      	mov	r5, r0
   100f6:	b170      	cbz	r0, 10116 <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   100f8:	7b43      	ldrb	r3, [r0, #13]
   100fa:	06db      	lsls	r3, r3, #27
   100fc:	d103      	bne.n	10106 <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
   100fe:	6983      	ldr	r3, [r0, #24]
   10100:	b90b      	cbnz	r3, 10106 <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
   10102:	f7ff fcd9 	bl	fab8 <z_add_thread_to_ready_q>
   10106:	2300      	movs	r3, #0
   10108:	67ab      	str	r3, [r5, #120]	; 0x78
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   1010a:	4631      	mov	r1, r6
   1010c:	4808      	ldr	r0, [pc, #32]	; (10130 <z_impl_k_sem_give+0x54>)
}
   1010e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   10112:	f008 ba56 	b.w	185c2 <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   10116:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1011a:	429a      	cmp	r2, r3
   1011c:	bf18      	it	ne
   1011e:	3301      	addne	r3, #1
   10120:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   10122:	2102      	movs	r1, #2
   10124:	f104 0010 	add.w	r0, r4, #16
   10128:	f008 fd21 	bl	18b6e <z_handle_obj_poll_events>
   1012c:	e7ed      	b.n	1010a <z_impl_k_sem_give+0x2e>
   1012e:	bf00      	nop
   10130:	20005ee9 	.word	0x20005ee9

00010134 <z_hdlr_k_sem_give>:

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
   10134:	b538      	push	{r3, r4, r5, lr}
   10136:	4605      	mov	r5, r0
   10138:	f7f0 f862 	bl	200 <z_object_find>
   1013c:	2200      	movs	r2, #0
   1013e:	4629      	mov	r1, r5
   10140:	f008 fb07 	bl	18752 <z_obj_validation_check.constprop.4>
   10144:	4604      	mov	r4, r0
   10146:	b130      	cbz	r0, 10156 <z_hdlr_k_sem_give+0x22>
   10148:	4805      	ldr	r0, [pc, #20]	; (10160 <z_hdlr_k_sem_give+0x2c>)
   1014a:	4906      	ldr	r1, [pc, #24]	; (10164 <z_hdlr_k_sem_give+0x30>)
   1014c:	f003 f997 	bl	1347e <printk>
   10150:	9806      	ldr	r0, [sp, #24]
   10152:	f004 fee8 	bl	14f26 <z_arch_syscall_oops>
   10156:	4628      	mov	r0, r5
   10158:	f7ff ffc0 	bl	100dc <z_impl_k_sem_give>
   1015c:	4620      	mov	r0, r4
   1015e:	bd38      	pop	{r3, r4, r5, pc}
   10160:	0001ba44 	.word	0x0001ba44
   10164:	0001bf40 	.word	0x0001bf40

00010168 <z_impl_k_sem_take>:
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   10168:	b410      	push	{r4}
   1016a:	4602      	mov	r2, r0
   1016c:	460b      	mov	r3, r1
   1016e:	f04f 0020 	mov.w	r0, #32
   10172:	f3ef 8111 	mrs	r1, BASEPRI
   10176:	f380 8811 	msr	BASEPRI, r0
   1017a:	f3bf 8f6f 	isb	sy
	__ASSERT(((z_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   1017e:	6894      	ldr	r4, [r2, #8]
   10180:	b144      	cbz	r4, 10194 <z_impl_k_sem_take+0x2c>
		sem->count--;
   10182:	3c01      	subs	r4, #1
   10184:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
   10186:	f381 8811 	msr	BASEPRI, r1
   1018a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   1018e:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
   10190:	bc10      	pop	{r4}
   10192:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   10194:	b933      	cbnz	r3, 101a4 <z_impl_k_sem_take+0x3c>
   10196:	f381 8811 	msr	BASEPRI, r1
   1019a:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1019e:	f06f 000f 	mvn.w	r0, #15
   101a2:	e7f5      	b.n	10190 <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   101a4:	4801      	ldr	r0, [pc, #4]	; (101ac <z_impl_k_sem_take+0x44>)
}
   101a6:	bc10      	pop	{r4}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   101a8:	f7ff bdc0 	b.w	fd2c <z_pend_curr>
   101ac:	20005ee9 	.word	0x20005ee9

000101b0 <z_hdlr_k_sem_take>:

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER(k_sem_take, sem, timeout)
{
   101b0:	b570      	push	{r4, r5, r6, lr}
   101b2:	4604      	mov	r4, r0
   101b4:	460d      	mov	r5, r1
   101b6:	9e06      	ldr	r6, [sp, #24]
	Z_OOPS(Z_SYSCALL_OBJ(sem, K_OBJ_SEM));
   101b8:	f7f0 f822 	bl	200 <z_object_find>
   101bc:	2200      	movs	r2, #0
   101be:	4621      	mov	r1, r4
   101c0:	f008 fac7 	bl	18752 <z_obj_validation_check.constprop.4>
   101c4:	b130      	cbz	r0, 101d4 <z_hdlr_k_sem_take+0x24>
   101c6:	4806      	ldr	r0, [pc, #24]	; (101e0 <z_hdlr_k_sem_take+0x30>)
   101c8:	4906      	ldr	r1, [pc, #24]	; (101e4 <z_hdlr_k_sem_take+0x34>)
   101ca:	f003 f958 	bl	1347e <printk>
   101ce:	4630      	mov	r0, r6
   101d0:	f004 fea9 	bl	14f26 <z_arch_syscall_oops>
	return z_impl_k_sem_take((struct k_sem *)sem, timeout);
   101d4:	4629      	mov	r1, r5
   101d6:	4620      	mov	r0, r4
}
   101d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_impl_k_sem_take((struct k_sem *)sem, timeout);
   101dc:	f7ff bfc4 	b.w	10168 <z_impl_k_sem_take>
   101e0:	0001ba44 	.word	0x0001ba44
   101e4:	0001bf52 	.word	0x0001bf52

000101e8 <z_hdlr_k_sem_reset>:

Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_reset, K_OBJ_SEM, struct k_sem *);
   101e8:	b510      	push	{r4, lr}
   101ea:	4604      	mov	r4, r0
   101ec:	f7f0 f808 	bl	200 <z_object_find>
   101f0:	2200      	movs	r2, #0
   101f2:	4621      	mov	r1, r4
   101f4:	f008 faad 	bl	18752 <z_obj_validation_check.constprop.4>
   101f8:	b130      	cbz	r0, 10208 <z_hdlr_k_sem_reset+0x20>
   101fa:	4804      	ldr	r0, [pc, #16]	; (1020c <z_hdlr_k_sem_reset+0x24>)
   101fc:	4904      	ldr	r1, [pc, #16]	; (10210 <z_hdlr_k_sem_reset+0x28>)
   101fe:	f003 f93e 	bl	1347e <printk>
   10202:	9804      	ldr	r0, [sp, #16]
   10204:	f004 fe8f 	bl	14f26 <z_arch_syscall_oops>
	sem->count = 0U;
   10208:	60a0      	str	r0, [r4, #8]
   1020a:	bd10      	pop	{r4, pc}
   1020c:	0001ba44 	.word	0x0001ba44
   10210:	0001bf64 	.word	0x0001bf64

00010214 <z_hdlr_k_sem_count_get>:
Z_SYSCALL_HANDLER1_SIMPLE(k_sem_count_get, K_OBJ_SEM, struct k_sem *);
   10214:	b510      	push	{r4, lr}
   10216:	4604      	mov	r4, r0
   10218:	f7ef fff2 	bl	200 <z_object_find>
   1021c:	2200      	movs	r2, #0
   1021e:	4621      	mov	r1, r4
   10220:	f008 fa97 	bl	18752 <z_obj_validation_check.constprop.4>
   10224:	b130      	cbz	r0, 10234 <z_hdlr_k_sem_count_get+0x20>
   10226:	4804      	ldr	r0, [pc, #16]	; (10238 <z_hdlr_k_sem_count_get+0x24>)
   10228:	4904      	ldr	r1, [pc, #16]	; (1023c <z_hdlr_k_sem_count_get+0x28>)
   1022a:	f003 f928 	bl	1347e <printk>
   1022e:	9804      	ldr	r0, [sp, #16]
   10230:	f004 fe79 	bl	14f26 <z_arch_syscall_oops>
   10234:	68a0      	ldr	r0, [r4, #8]
   10236:	bd10      	pop	{r4, pc}
   10238:	0001ba44 	.word	0x0001ba44
   1023c:	0001bf77 	.word	0x0001bf77

00010240 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   10240:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   10242:	4c08      	ldr	r4, [pc, #32]	; (10264 <k_sys_work_q_init+0x24>)
   10244:	4908      	ldr	r1, [pc, #32]	; (10268 <k_sys_work_q_init+0x28>)
   10246:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1024a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1024e:	4620      	mov	r0, r4
   10250:	f000 fa62 	bl	10718 <k_work_q_start>
K_SYSCALL_DECLARE2(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, int, k_tid_t, thread_id, const char *, value)
   10254:	4905      	ldr	r1, [pc, #20]	; (1026c <k_sys_work_q_init+0x2c>)
   10256:	f104 0010 	add.w	r0, r4, #16
   1025a:	f008 fab2 	bl	187c2 <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1025e:	2000      	movs	r0, #0
   10260:	bd10      	pop	{r4, pc}
   10262:	bf00      	nop
   10264:	2000582c 	.word	0x2000582c
   10268:	20008000 	.word	0x20008000
   1026c:	0001bfcd 	.word	0x0001bfcd

00010270 <k_is_in_isr>:
   10270:	f3ef 8005 	mrs	r0, IPSR
   10274:	280d      	cmp	r0, #13
   10276:	d807      	bhi.n	10288 <k_is_in_isr+0x18>
   10278:	b138      	cbz	r0, 1028a <k_is_in_isr+0x1a>
   1027a:	4b04      	ldr	r3, [pc, #16]	; (1028c <k_is_in_isr+0x1c>)
   1027c:	6858      	ldr	r0, [r3, #4]
   1027e:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   10282:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   10286:	4770      	bx	lr
   10288:	2001      	movs	r0, #1
}

bool k_is_in_isr(void)
{
	return z_is_in_isr();
}
   1028a:	4770      	bx	lr
   1028c:	e000ed00 	.word	0xe000ed00

00010290 <z_thread_essential_clear>:
 * Exceptions raised by this thread may be recoverable.
 * (This is the default tag for a thread.)
 */
void z_thread_essential_clear(void)
{
	_current->base.user_options &= ~K_ESSENTIAL;
   10290:	4b03      	ldr	r3, [pc, #12]	; (102a0 <z_thread_essential_clear+0x10>)
   10292:	689a      	ldr	r2, [r3, #8]
   10294:	7b13      	ldrb	r3, [r2, #12]
   10296:	f023 0301 	bic.w	r3, r3, #1
   1029a:	7313      	strb	r3, [r2, #12]
}
   1029c:	4770      	bx	lr
   1029e:	bf00      	nop
   102a0:	200057f0 	.word	0x200057f0

000102a4 <z_is_thread_essential>:
 *
 * Returns true if current thread is essential, false if it is not.
 */
bool z_is_thread_essential(void)
{
	return (_current->base.user_options & K_ESSENTIAL) == K_ESSENTIAL;
   102a4:	4b02      	ldr	r3, [pc, #8]	; (102b0 <z_is_thread_essential+0xc>)
   102a6:	689b      	ldr	r3, [r3, #8]
   102a8:	7b18      	ldrb	r0, [r3, #12]
}
   102aa:	f000 0001 	and.w	r0, r0, #1
   102ae:	4770      	bx	lr
   102b0:	200057f0 	.word	0x200057f0

000102b4 <z_impl_k_busy_wait>:

#ifdef CONFIG_SYS_CLOCK_EXISTS
void z_impl_k_busy_wait(u32_t usec_to_wait)
{
   102b4:	4601      	mov	r1, r0
   102b6:	b538      	push	{r3, r4, r5, lr}
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	/* use 64-bit math to prevent overflow when multiplying */
	u32_t cycles_to_wait = (u32_t)(
		(u64_t)usec_to_wait *
		(u64_t)sys_clock_hw_cycles_per_sec() /
   102b8:	4a07      	ldr	r2, [pc, #28]	; (102d8 <z_impl_k_busy_wait+0x24>)
   102ba:	2300      	movs	r3, #0
   102bc:	03c0      	lsls	r0, r0, #15
   102be:	0c49      	lsrs	r1, r1, #17
   102c0:	f7f0 fb42 	bl	948 <__aeabi_uldivmod>
   102c4:	4604      	mov	r4, r0
		(u64_t)USEC_PER_SEC
	);
	u32_t start_cycles = k_cycle_get_32();
   102c6:	f7fa fc15 	bl	aaf4 <z_timer_cycle_get_32>
   102ca:	4605      	mov	r5, r0

	for (;;) {
		u32_t current_cycles = k_cycle_get_32();
   102cc:	f7fa fc12 	bl	aaf4 <z_timer_cycle_get_32>

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
   102d0:	1b40      	subs	r0, r0, r5
   102d2:	42a0      	cmp	r0, r4
   102d4:	d3fa      	bcc.n	102cc <z_impl_k_busy_wait+0x18>
		}
	}
#else
	z_arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
}
   102d6:	bd38      	pop	{r3, r4, r5, pc}
   102d8:	000f4240 	.word	0x000f4240

000102dc <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
   102dc:	b510      	push	{r4, lr}
   102de:	4602      	mov	r2, r0
	__asm__ volatile(
   102e0:	f04f 0320 	mov.w	r3, #32
   102e4:	f3ef 8411 	mrs	r4, BASEPRI
   102e8:	f383 8811 	msr	BASEPRI, r3
   102ec:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
   102f0:	7b43      	ldrb	r3, [r0, #13]
   102f2:	0759      	lsls	r1, r3, #29
   102f4:	d404      	bmi.n	10300 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
   102f6:	f384 8811 	msr	BASEPRI, r4
   102fa:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
   102fe:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10300:	f023 0304 	bic.w	r3, r3, #4
   10304:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   10306:	f008 fa3d 	bl	18784 <z_is_thread_ready>
   1030a:	b110      	cbz	r0, 10312 <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
   1030c:	4610      	mov	r0, r2
   1030e:	f7ff fbd3 	bl	fab8 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   10312:	4621      	mov	r1, r4
   10314:	4802      	ldr	r0, [pc, #8]	; (10320 <z_impl_k_thread_start+0x44>)
}
   10316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   1031a:	f008 b952 	b.w	185c2 <z_reschedule>
   1031e:	bf00      	nop
   10320:	20005ee9 	.word	0x20005ee9

00010324 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
{
   10324:	b5d0      	push	{r4, r6, r7, lr}
   10326:	4604      	mov	r4, r0
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
   10328:	b919      	cbnz	r1, 10332 <schedule_new_thread+0xe>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   1032a:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
   1032e:	f7ff bfd5 	b.w	102dc <z_impl_k_thread_start>
	return (s32_t)ceiling_fraction(
   10332:	4e0a      	ldr	r6, [pc, #40]	; (1035c <schedule_new_thread+0x38>)
   10334:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10338:	2700      	movs	r7, #0
   1033a:	fbc0 6701 	smlal	r6, r7, r0, r1
   1033e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   10342:	4630      	mov	r0, r6
   10344:	4639      	mov	r1, r7
   10346:	2300      	movs	r3, #0
   10348:	f7f0 faae 	bl	8a8 <__aeabi_ldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1034c:	4904      	ldr	r1, [pc, #16]	; (10360 <schedule_new_thread+0x3c>)
   1034e:	1c42      	adds	r2, r0, #1
   10350:	f104 0018 	add.w	r0, r4, #24
   10354:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
   10358:	f000 ba8c 	b.w	10874 <z_add_timeout>
   1035c:	0004ffff 	.word	0x0004ffff
   10360:	00018659 	.word	0x00018659

00010364 <z_hdlr_k_thread_start>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
   10364:	b538      	push	{r3, r4, r5, lr}
   10366:	4605      	mov	r5, r0
   10368:	f7ef ff4a 	bl	200 <z_object_find>
   1036c:	2300      	movs	r3, #0
   1036e:	2209      	movs	r2, #9
   10370:	4629      	mov	r1, r5
   10372:	f008 fa10 	bl	18796 <z_obj_validation_check>
   10376:	4604      	mov	r4, r0
   10378:	b130      	cbz	r0, 10388 <z_hdlr_k_thread_start+0x24>
   1037a:	4806      	ldr	r0, [pc, #24]	; (10394 <z_hdlr_k_thread_start+0x30>)
   1037c:	4906      	ldr	r1, [pc, #24]	; (10398 <z_hdlr_k_thread_start+0x34>)
   1037e:	f003 f87e 	bl	1347e <printk>
   10382:	9806      	ldr	r0, [sp, #24]
   10384:	f004 fdcf 	bl	14f26 <z_arch_syscall_oops>
   10388:	4628      	mov	r0, r5
   1038a:	f7ff ffa7 	bl	102dc <z_impl_k_thread_start>
   1038e:	4620      	mov	r0, r4
   10390:	bd38      	pop	{r3, r4, r5, pc}
   10392:	bf00      	nop
   10394:	0001ba44 	.word	0x0001ba44
   10398:	0001bfd6 	.word	0x0001bfd6

0001039c <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   1039c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1039e:	b087      	sub	sp, #28
   103a0:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   103a2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   103a4:	9703      	str	r7, [sp, #12]
   103a6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   103a8:	9702      	str	r7, [sp, #8]
   103aa:	9f0d      	ldr	r7, [sp, #52]	; 0x34
{
   103ac:	9e10      	ldr	r6, [sp, #64]	; 0x40
	z_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   103ae:	9701      	str	r7, [sp, #4]
   103b0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   103b2:	9604      	str	r6, [sp, #16]
   103b4:	9700      	str	r7, [sp, #0]
{
   103b6:	460d      	mov	r5, r1
	z_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   103b8:	f7fa fe50 	bl	b05c <z_new_thread>
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
	}
#endif
#ifdef CONFIG_USERSPACE
	z_object_init(new_thread);
   103bc:	4620      	mov	r0, r4
   103be:	f008 fc76 	bl	18cae <z_object_init>
	z_object_init(stack);
   103c2:	4628      	mov	r0, r5
   103c4:	f008 fc73 	bl	18cae <z_object_init>
	new_thread->stack_obj = stack;
   103c8:	66e5      	str	r5, [r4, #108]	; 0x6c
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   103ca:	4d0c      	ldr	r5, [pc, #48]	; (103fc <z_setup_new_thread+0x60>)
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_OBJECT_ACCESS_GRANT, k_object_access_grant, void *, object, struct k_thread *, thread)
   103cc:	4621      	mov	r1, r4
   103ce:	4620      	mov	r0, r4
   103d0:	f008 fc62 	bl	18c98 <z_impl_k_object_access_grant>
   103d4:	68ab      	ldr	r3, [r5, #8]
   103d6:	b913      	cbnz	r3, 103de <z_setup_new_thread+0x42>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   103d8:	6723      	str	r3, [r4, #112]	; 0x70
	sys_trace_thread_create(new_thread);
}
   103da:	b007      	add	sp, #28
   103dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (_current->mem_domain_info.mem_domain != NULL) {
   103de:	6e98      	ldr	r0, [r3, #104]	; 0x68
   103e0:	b110      	cbz	r0, 103e8 <z_setup_new_thread+0x4c>
		k_mem_domain_add_thread(_current->mem_domain_info.mem_domain,
   103e2:	4621      	mov	r1, r4
   103e4:	f000 fd62 	bl	10eac <k_mem_domain_add_thread>
	if ((options & K_INHERIT_PERMS) != 0U) {
   103e8:	0733      	lsls	r3, r6, #28
   103ea:	d503      	bpl.n	103f4 <z_setup_new_thread+0x58>
		z_thread_perms_inherit(_current, new_thread);
   103ec:	4621      	mov	r1, r4
   103ee:	68a8      	ldr	r0, [r5, #8]
   103f0:	f000 fe3c 	bl	1106c <z_thread_perms_inherit>
	new_thread->resource_pool = _current->resource_pool;
   103f4:	68ab      	ldr	r3, [r5, #8]
   103f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   103f8:	e7ee      	b.n	103d8 <z_setup_new_thread+0x3c>
   103fa:	bf00      	nop
   103fc:	200057f0 	.word	0x200057f0

00010400 <z_hdlr_k_thread_create>:


#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER(k_thread_create,
		  new_thread_p, stack_p, stack_size, entry, p1, more_args)
{
   10400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10404:	b087      	sub	sp, #28
   10406:	4605      	mov	r5, r0
   10408:	460e      	mov	r6, r1
   1040a:	4617      	mov	r7, r2
   1040c:	4698      	mov	r8, r3
   1040e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	volatile struct _syscall_10_args *margs =
		(volatile struct _syscall_10_args *)more_args;
	k_thread_stack_t *stack = (k_thread_stack_t *)stack_p;

	/* The thread and stack objects *must* be in an uninitialized state */
	Z_OOPS(Z_SYSCALL_OBJ_NEVER_INIT(new_thread, K_OBJ_THREAD));
   10410:	f7ef fef6 	bl	200 <z_object_find>
   10414:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10418:	2209      	movs	r2, #9
   1041a:	4629      	mov	r1, r5
   1041c:	f008 f9bb 	bl	18796 <z_obj_validation_check>
   10420:	2800      	cmp	r0, #0
   10422:	d059      	beq.n	104d8 <z_hdlr_k_thread_create+0xd8>
   10424:	4934      	ldr	r1, [pc, #208]	; (104f8 <z_hdlr_k_thread_create+0xf8>)
   10426:	4835      	ldr	r0, [pc, #212]	; (104fc <z_hdlr_k_thread_create+0xfc>)
	stack_object = z_object_find(stack);
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(z_obj_validation_check(stack_object, stack,
   10428:	f003 f829 	bl	1347e <printk>
   1042c:	9810      	ldr	r0, [sp, #64]	; 0x40
   1042e:	f004 fd7a 	bl	14f26 <z_arch_syscall_oops>
	Z_OOPS(Z_SYSCALL_VERIFY(z_is_prio_lower_or_equal(prio,
							_current->base.prio)));

	z_setup_new_thread((struct k_thread *)new_thread, stack, stack_size,
			  (k_thread_entry_t)entry, (void *)p1,
			  (void *)margs->arg6, (void *)margs->arg7, prio,
   10432:	6820      	ldr	r0, [r4, #0]
   10434:	6864      	ldr	r4, [r4, #4]
	z_setup_new_thread((struct k_thread *)new_thread, stack, stack_size,
   10436:	9001      	str	r0, [sp, #4]
   10438:	e9cd 3104 	strd	r3, r1, [sp, #16]
   1043c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1043e:	9300      	str	r3, [sp, #0]
   10440:	e9cd 4202 	strd	r4, r2, [sp, #8]
   10444:	4643      	mov	r3, r8
   10446:	463a      	mov	r2, r7
   10448:	4631      	mov	r1, r6
   1044a:	4628      	mov	r0, r5
   1044c:	f7ff ffa6 	bl	1039c <z_setup_new_thread>
			  options, NULL);

	if (delay != K_FOREVER) {
   10450:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   10454:	d003      	beq.n	1045e <z_hdlr_k_thread_create+0x5e>
		schedule_new_thread(new_thread, delay);
   10456:	4649      	mov	r1, r9
   10458:	4628      	mov	r0, r5
   1045a:	f7ff ff63 	bl	10324 <schedule_new_thread>
	}

	return new_thread_p;
}
   1045e:	4628      	mov	r0, r5
   10460:	b007      	add	sp, #28
   10462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_OOPS(Z_SYSCALL_VERIFY(z_is_prio_lower_or_equal(prio,
   10466:	4826      	ldr	r0, [pc, #152]	; (10500 <z_hdlr_k_thread_create+0x100>)
   10468:	6880      	ldr	r0, [r0, #8]
   1046a:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1046e:	4290      	cmp	r0, r2
   10470:	dddf      	ble.n	10432 <z_hdlr_k_thread_create+0x32>
   10472:	4921      	ldr	r1, [pc, #132]	; (104f8 <z_hdlr_k_thread_create+0xf8>)
   10474:	4823      	ldr	r0, [pc, #140]	; (10504 <z_hdlr_k_thread_create+0x104>)
   10476:	e7d7      	b.n	10428 <z_hdlr_k_thread_create+0x28>
	if (!z_is_prio_higher_or_equal(prio,
   10478:	2a0e      	cmp	r2, #14
   1047a:	dc02      	bgt.n	10482 <z_hdlr_k_thread_create+0x82>
	Z_OOPS(Z_SYSCALL_VERIFY(_is_valid_prio(prio, NULL)));
   1047c:	f112 0f10 	cmn.w	r2, #16
   10480:	daf1      	bge.n	10466 <z_hdlr_k_thread_create+0x66>
   10482:	491d      	ldr	r1, [pc, #116]	; (104f8 <z_hdlr_k_thread_create+0xf8>)
   10484:	4820      	ldr	r0, [pc, #128]	; (10508 <z_hdlr_k_thread_create+0x108>)
   10486:	e7cf      	b.n	10428 <z_hdlr_k_thread_create+0x28>
	Z_OOPS(Z_SYSCALL_VERIFY(!(options & K_ESSENTIAL)));
   10488:	f013 0101 	ands.w	r1, r3, #1
   1048c:	d0f4      	beq.n	10478 <z_hdlr_k_thread_create+0x78>
   1048e:	491a      	ldr	r1, [pc, #104]	; (104f8 <z_hdlr_k_thread_create+0xf8>)
   10490:	481e      	ldr	r0, [pc, #120]	; (1050c <z_hdlr_k_thread_create+0x10c>)
   10492:	e7c9      	b.n	10428 <z_hdlr_k_thread_create+0x28>
	prio = margs->arg8;
   10494:	68a2      	ldr	r2, [r4, #8]
	options = margs->arg9;
   10496:	68e3      	ldr	r3, [r4, #12]
	delay = margs->arg10;
   10498:	f8d4 9010 	ldr.w	r9, [r4, #16]
	Z_OOPS(Z_SYSCALL_VERIFY(options & K_USER));
   1049c:	0759      	lsls	r1, r3, #29
   1049e:	d4f3      	bmi.n	10488 <z_hdlr_k_thread_create+0x88>
   104a0:	4915      	ldr	r1, [pc, #84]	; (104f8 <z_hdlr_k_thread_create+0xf8>)
   104a2:	481b      	ldr	r0, [pc, #108]	; (10510 <z_hdlr_k_thread_create+0x110>)
   104a4:	e7c0      	b.n	10428 <z_hdlr_k_thread_create+0x28>
	Z_OOPS(Z_SYSCALL_MEMORY_READ(margs, sizeof(*margs)));
   104a6:	2114      	movs	r1, #20
   104a8:	4620      	mov	r0, r4
   104aa:	f004 fd63 	bl	14f74 <z_arch_buffer_validate>
   104ae:	2800      	cmp	r0, #0
   104b0:	d0f0      	beq.n	10494 <z_hdlr_k_thread_create+0x94>
   104b2:	4b18      	ldr	r3, [pc, #96]	; (10514 <z_hdlr_k_thread_create+0x114>)
   104b4:	9300      	str	r3, [sp, #0]
   104b6:	4622      	mov	r2, r4
   104b8:	2314      	movs	r3, #20
   104ba:	490f      	ldr	r1, [pc, #60]	; (104f8 <z_hdlr_k_thread_create+0xf8>)
   104bc:	4816      	ldr	r0, [pc, #88]	; (10518 <z_hdlr_k_thread_create+0x118>)
   104be:	f002 ffde 	bl	1347e <printk>
   104c2:	e7b3      	b.n	1042c <z_hdlr_k_thread_create+0x2c>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(total_size <= stack_object->data,
   104c4:	f8d9 3008 	ldr.w	r3, [r9, #8]
   104c8:	42bb      	cmp	r3, r7
   104ca:	d2ec      	bcs.n	104a6 <z_hdlr_k_thread_create+0xa6>
   104cc:	463a      	mov	r2, r7
   104ce:	490a      	ldr	r1, [pc, #40]	; (104f8 <z_hdlr_k_thread_create+0xf8>)
   104d0:	4812      	ldr	r0, [pc, #72]	; (1051c <z_hdlr_k_thread_create+0x11c>)
   104d2:	f002 ffd4 	bl	1347e <printk>
   104d6:	e7a9      	b.n	1042c <z_hdlr_k_thread_create+0x2c>
	stack_object = z_object_find(stack);
   104d8:	4630      	mov	r0, r6
   104da:	f7ef fe91 	bl	200 <z_object_find>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(z_obj_validation_check(stack_object, stack,
   104de:	220b      	movs	r2, #11
   104e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   104e4:	4631      	mov	r1, r6
	stack_object = z_object_find(stack);
   104e6:	4681      	mov	r9, r0
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(z_obj_validation_check(stack_object, stack,
   104e8:	f008 f955 	bl	18796 <z_obj_validation_check>
   104ec:	4602      	mov	r2, r0
   104ee:	2800      	cmp	r0, #0
   104f0:	d0e8      	beq.n	104c4 <z_hdlr_k_thread_create+0xc4>
   104f2:	4901      	ldr	r1, [pc, #4]	; (104f8 <z_hdlr_k_thread_create+0xf8>)
   104f4:	480a      	ldr	r0, [pc, #40]	; (10520 <z_hdlr_k_thread_create+0x120>)
   104f6:	e797      	b.n	10428 <z_hdlr_k_thread_create+0x28>
   104f8:	0001bfec 	.word	0x0001bfec
   104fc:	0001ba44 	.word	0x0001ba44
   10500:	200057f0 	.word	0x200057f0
   10504:	0001c12e 	.word	0x0001c12e
   10508:	0001c0f9 	.word	0x0001c0f9
   1050c:	0001c0c6 	.word	0x0001c0c6
   10510:	0001c09b 	.word	0x0001c09b
   10514:	0001b8ef 	.word	0x0001b8ef
   10518:	0001a1c4 	.word	0x0001a1c4
   1051c:	0001c05d 	.word	0x0001c05d
   10520:	0001c032 	.word	0x0001c032

00010524 <z_impl_k_thread_suspend>:

	z_mark_thread_as_suspended(thread);
}

void z_impl_k_thread_suspend(struct k_thread *thread)
{
   10524:	b538      	push	{r3, r4, r5, lr}
   10526:	4605      	mov	r5, r0
	__asm__ volatile(
   10528:	f04f 0320 	mov.w	r3, #32
   1052c:	f3ef 8411 	mrs	r4, BASEPRI
   10530:	f383 8811 	msr	BASEPRI, r3
   10534:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_suspend(thread);
   10538:	f008 f967 	bl	1880a <z_thread_single_suspend>

	sys_trace_thread_suspend(thread);

	if (thread == _current) {
   1053c:	4b07      	ldr	r3, [pc, #28]	; (1055c <z_impl_k_thread_suspend+0x38>)
   1053e:	689b      	ldr	r3, [r3, #8]
   10540:	42ab      	cmp	r3, r5
   10542:	d105      	bne.n	10550 <z_impl_k_thread_suspend+0x2c>
		z_reschedule(&lock, key);
   10544:	4621      	mov	r1, r4
   10546:	4806      	ldr	r0, [pc, #24]	; (10560 <z_impl_k_thread_suspend+0x3c>)
	} else {
		k_spin_unlock(&lock, key);
	}
}
   10548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   1054c:	f008 b839 	b.w	185c2 <z_reschedule>
	__asm__ volatile(
   10550:	f384 8811 	msr	BASEPRI, r4
   10554:	f3bf 8f6f 	isb	sy
}
   10558:	bd38      	pop	{r3, r4, r5, pc}
   1055a:	bf00      	nop
   1055c:	200057f0 	.word	0x200057f0
   10560:	20005ee9 	.word	0x20005ee9

00010564 <z_hdlr_k_thread_suspend>:

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_suspend, K_OBJ_THREAD, k_tid_t);
   10564:	b538      	push	{r3, r4, r5, lr}
   10566:	4605      	mov	r5, r0
   10568:	f7ef fe4a 	bl	200 <z_object_find>
   1056c:	2300      	movs	r3, #0
   1056e:	2209      	movs	r2, #9
   10570:	4629      	mov	r1, r5
   10572:	f008 f910 	bl	18796 <z_obj_validation_check>
   10576:	4604      	mov	r4, r0
   10578:	b130      	cbz	r0, 10588 <z_hdlr_k_thread_suspend+0x24>
   1057a:	4806      	ldr	r0, [pc, #24]	; (10594 <z_hdlr_k_thread_suspend+0x30>)
   1057c:	4906      	ldr	r1, [pc, #24]	; (10598 <z_hdlr_k_thread_suspend+0x34>)
   1057e:	f002 ff7e 	bl	1347e <printk>
   10582:	9806      	ldr	r0, [sp, #24]
   10584:	f004 fccf 	bl	14f26 <z_arch_syscall_oops>
   10588:	4628      	mov	r0, r5
   1058a:	f7ff ffcb 	bl	10524 <z_impl_k_thread_suspend>
   1058e:	4620      	mov	r0, r4
   10590:	bd38      	pop	{r3, r4, r5, pc}
   10592:	bf00      	nop
   10594:	0001ba44 	.word	0x0001ba44
   10598:	0001c003 	.word	0x0001c003

0001059c <z_impl_k_thread_resume>:
	z_mark_thread_as_not_suspended(thread);
	z_ready_thread(thread);
}

void z_impl_k_thread_resume(struct k_thread *thread)
{
   1059c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1059e:	f04f 0320 	mov.w	r3, #32
   105a2:	f3ef 8411 	mrs	r4, BASEPRI
   105a6:	f383 8811 	msr	BASEPRI, r3
   105aa:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_resume(thread);
   105ae:	f008 f939 	bl	18824 <z_thread_single_resume>

	sys_trace_thread_resume(thread);
	z_reschedule(&lock, key);
   105b2:	4621      	mov	r1, r4
   105b4:	4802      	ldr	r0, [pc, #8]	; (105c0 <z_impl_k_thread_resume+0x24>)
}
   105b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   105ba:	f008 b802 	b.w	185c2 <z_reschedule>
   105be:	bf00      	nop
   105c0:	20005ee9 	.word	0x20005ee9

000105c4 <z_hdlr_k_thread_resume>:

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
   105c4:	b538      	push	{r3, r4, r5, lr}
   105c6:	4605      	mov	r5, r0
   105c8:	f7ef fe1a 	bl	200 <z_object_find>
   105cc:	2300      	movs	r3, #0
   105ce:	2209      	movs	r2, #9
   105d0:	4629      	mov	r1, r5
   105d2:	f008 f8e0 	bl	18796 <z_obj_validation_check>
   105d6:	4604      	mov	r4, r0
   105d8:	b130      	cbz	r0, 105e8 <z_hdlr_k_thread_resume+0x24>
   105da:	4806      	ldr	r0, [pc, #24]	; (105f4 <z_hdlr_k_thread_resume+0x30>)
   105dc:	4906      	ldr	r1, [pc, #24]	; (105f8 <z_hdlr_k_thread_resume+0x34>)
   105de:	f002 ff4e 	bl	1347e <printk>
   105e2:	9806      	ldr	r0, [sp, #24]
   105e4:	f004 fc9f 	bl	14f26 <z_arch_syscall_oops>
   105e8:	4628      	mov	r0, r5
   105ea:	f7ff ffd7 	bl	1059c <z_impl_k_thread_resume>
   105ee:	4620      	mov	r0, r4
   105f0:	bd38      	pop	{r3, r4, r5, pc}
   105f2:	bf00      	nop
   105f4:	0001ba44 	.word	0x0001ba44
   105f8:	0001c01b 	.word	0x0001c01b

000105fc <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   105fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   105fe:	4f23      	ldr	r7, [pc, #140]	; (1068c <z_init_static_threads+0x90>)
   10600:	4d23      	ldr	r5, [pc, #140]	; (10690 <z_init_static_threads+0x94>)
{
   10602:	b087      	sub	sp, #28
   10604:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   10606:	42bd      	cmp	r5, r7
   10608:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1060c:	d30d      	bcc.n	1062a <z_init_static_threads+0x2e>
	for (pos = (struct _k_object_assignment *)__object_access_start;
   1060e:	4c21      	ldr	r4, [pc, #132]	; (10694 <z_init_static_threads+0x98>)
   10610:	4f21      	ldr	r7, [pc, #132]	; (10698 <z_init_static_threads+0x9c>)
   10612:	42bc      	cmp	r4, r7
   10614:	d330      	bcc.n	10678 <z_init_static_threads+0x7c>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   10616:	f7ff f9eb 	bl	f9f0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1061a:	4c1d      	ldr	r4, [pc, #116]	; (10690 <z_init_static_threads+0x94>)
   1061c:	42b4      	cmp	r4, r6
   1061e:	d32d      	bcc.n	1067c <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
   10620:	b007      	add	sp, #28
   10622:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   10626:	f7ff ba2b 	b.w	fa80 <k_sched_unlock>
		z_setup_new_thread(
   1062a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1062e:	9305      	str	r3, [sp, #20]
   10630:	f854 3c10 	ldr.w	r3, [r4, #-16]
   10634:	9304      	str	r3, [sp, #16]
   10636:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1063a:	9303      	str	r3, [sp, #12]
   1063c:	f854 3c18 	ldr.w	r3, [r4, #-24]
   10640:	9302      	str	r3, [sp, #8]
   10642:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   10646:	9301      	str	r3, [sp, #4]
   10648:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1064c:	9300      	str	r3, [sp, #0]
   1064e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   10652:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   10656:	f7ff fea1 	bl	1039c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1065a:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1065e:	64dd      	str	r5, [r3, #76]	; 0x4c
   10660:	4625      	mov	r5, r4
   10662:	e7d0      	b.n	10606 <z_init_static_threads+0xa>
   10664:	6821      	ldr	r1, [r4, #0]
   10666:	f008 fb17 	bl	18c98 <z_impl_k_object_access_grant>
		for (int i = 0; pos->objects[i] != NULL; i++) {
   1066a:	6863      	ldr	r3, [r4, #4]
   1066c:	5958      	ldr	r0, [r3, r5]
   1066e:	3504      	adds	r5, #4
   10670:	2800      	cmp	r0, #0
   10672:	d1f7      	bne.n	10664 <z_init_static_threads+0x68>
	     pos++) {
   10674:	3408      	adds	r4, #8
   10676:	e7cc      	b.n	10612 <z_init_static_threads+0x16>
	for (pos = (struct _k_object_assignment *)__object_access_start;
   10678:	2500      	movs	r5, #0
   1067a:	e7f6      	b.n	1066a <z_init_static_threads+0x6e>
		if (thread_data->init_delay != K_FOREVER) {
   1067c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1067e:	1c4b      	adds	r3, r1, #1
   10680:	d002      	beq.n	10688 <z_init_static_threads+0x8c>
			schedule_new_thread(thread_data->init_thread,
   10682:	6820      	ldr	r0, [r4, #0]
   10684:	f7ff fe4e 	bl	10324 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
   10688:	3430      	adds	r4, #48	; 0x30
   1068a:	e7c7      	b.n	1061c <z_init_static_threads+0x20>
   1068c:	20011b3c 	.word	0x20011b3c
   10690:	20011b0c 	.word	0x20011b0c
   10694:	00018e8c 	.word	0x00018e8c
   10698:	00018e8c 	.word	0x00018e8c

0001069c <k_thread_user_mode_enter>:
	z_init_thread_timeout(thread_base);
}

FUNC_NORETURN void k_thread_user_mode_enter(k_thread_entry_t entry,
					    void *p1, void *p2, void *p3)
{
   1069c:	b580      	push	{r7, lr}
   1069e:	461f      	mov	r7, r3
	_current->base.user_options |= K_USER;
   106a0:	4b06      	ldr	r3, [pc, #24]	; (106bc <k_thread_user_mode_enter+0x20>)
   106a2:	689d      	ldr	r5, [r3, #8]
   106a4:	7b2c      	ldrb	r4, [r5, #12]
   106a6:	f044 0404 	orr.w	r4, r4, #4
{
   106aa:	4616      	mov	r6, r2
	_current->base.user_options |= K_USER;
   106ac:	732c      	strb	r4, [r5, #12]
	z_thread_essential_clear();
   106ae:	f7ff fdef 	bl	10290 <z_thread_essential_clear>
	_current->entry.parameter1 = p1;
	_current->entry.parameter2 = p2;
	_current->entry.parameter3 = p3;
#endif
#ifdef CONFIG_USERSPACE
	z_arch_user_mode_enter(entry, p1, p2, p3);
   106b2:	463b      	mov	r3, r7
   106b4:	4632      	mov	r2, r6
   106b6:	f7fa fcb7 	bl	b028 <z_arch_user_mode_enter>
   106ba:	bf00      	nop
   106bc:	200057f0 	.word	0x200057f0

000106c0 <z_hdlr_k_thread_abort>:
}
#endif

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER(k_thread_abort, thread_p)
{
   106c0:	b538      	push	{r3, r4, r5, lr}
   106c2:	4605      	mov	r5, r0
	struct k_thread *thread = (struct k_thread *)thread_p;
	Z_OOPS(Z_SYSCALL_OBJ(thread, K_OBJ_THREAD));
   106c4:	f7ef fd9c 	bl	200 <z_object_find>
	ret = z_object_validate(ko, otype, init);
   106c8:	2200      	movs	r2, #0
   106ca:	2109      	movs	r1, #9
   106cc:	4604      	mov	r4, r0
   106ce:	f000 fd45 	bl	1115c <z_object_validate>
	if (ret != 0) {
   106d2:	b188      	cbz	r0, 106f8 <z_hdlr_k_thread_abort+0x38>
		z_dump_object_error(ret, obj, ko, otype);
   106d4:	4629      	mov	r1, r5
   106d6:	2309      	movs	r3, #9
   106d8:	4622      	mov	r2, r4
   106da:	f000 fcef 	bl	110bc <z_dump_object_error>
   106de:	490b      	ldr	r1, [pc, #44]	; (1070c <z_hdlr_k_thread_abort+0x4c>)
   106e0:	480b      	ldr	r0, [pc, #44]	; (10710 <z_hdlr_k_thread_abort+0x50>)
   106e2:	f002 fecc 	bl	1347e <printk>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(!(thread->base.user_options & K_ESSENTIAL),
   106e6:	9806      	ldr	r0, [sp, #24]
   106e8:	f004 fc1d 	bl	14f26 <z_arch_syscall_oops>
   106ec:	462a      	mov	r2, r5
   106ee:	4907      	ldr	r1, [pc, #28]	; (1070c <z_hdlr_k_thread_abort+0x4c>)
   106f0:	4808      	ldr	r0, [pc, #32]	; (10714 <z_hdlr_k_thread_abort+0x54>)
   106f2:	f002 fec4 	bl	1347e <printk>
   106f6:	e7f6      	b.n	106e6 <z_hdlr_k_thread_abort+0x26>
   106f8:	7b28      	ldrb	r0, [r5, #12]
   106fa:	f010 0401 	ands.w	r4, r0, #1
   106fe:	d1f5      	bne.n	106ec <z_hdlr_k_thread_abort+0x2c>
				    "aborting essential thread %p", thread));

	z_impl_k_thread_abort((struct k_thread *)thread);
   10700:	4628      	mov	r0, r5
   10702:	f7fa fd91 	bl	b228 <z_impl_k_thread_abort>
	return 0;
}
   10706:	4620      	mov	r0, r4
   10708:	bd38      	pop	{r3, r4, r5, pc}
   1070a:	bf00      	nop
   1070c:	0001c17c 	.word	0x0001c17c
   10710:	0001ba44 	.word	0x0001ba44
   10714:	0001c192 	.word	0x0001c192

00010718 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   10718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1071c:	4605      	mov	r5, r0
   1071e:	b086      	sub	sp, #24
   10720:	4698      	mov	r8, r3
   10722:	460e      	mov	r6, r1
   10724:	4617      	mov	r7, r2
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   10726:	f105 0410 	add.w	r4, r5, #16
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
   1072a:	f007 fe78 	bl	1841e <z_impl_k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
   1072e:	2000      	movs	r0, #0
   10730:	e9cd 0004 	strd	r0, r0, [sp, #16]
   10734:	e9cd 0802 	strd	r0, r8, [sp, #8]
   10738:	e9cd 5000 	strd	r5, r0, [sp]
   1073c:	4631      	mov	r1, r6
   1073e:	4b06      	ldr	r3, [pc, #24]	; (10758 <k_work_q_start+0x40>)
   10740:	463a      	mov	r2, r7
   10742:	4620      	mov	r0, r4
   10744:	f008 f846 	bl	187d4 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, int, k_tid_t, thread_id, const char *, value)
   10748:	4904      	ldr	r1, [pc, #16]	; (1075c <k_work_q_start+0x44>)
   1074a:	4620      	mov	r0, r4
			work_q, NULL, NULL, prio, 0, 0);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1074c:	b006      	add	sp, #24
   1074e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10752:	f008 b836 	b.w	187c2 <z_impl_k_thread_name_set>
   10756:	bf00      	nop
   10758:	000130db 	.word	0x000130db
   1075c:	0001c1c9 	.word	0x0001c1c9

00010760 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   s32_t delay)
{
   10760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10764:	4606      	mov	r6, r0
   10766:	460d      	mov	r5, r1
   10768:	4617      	mov	r7, r2
   1076a:	f04f 0320 	mov.w	r3, #32
   1076e:	f3ef 8811 	mrs	r8, BASEPRI
   10772:	f383 8811 	msr	BASEPRI, r3
   10776:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   1077a:	69cc      	ldr	r4, [r1, #28]
   1077c:	b15c      	cbz	r4, 10796 <k_delayed_work_submit_to_queue+0x36>
   1077e:	4284      	cmp	r4, r0
   10780:	d12b      	bne.n	107da <k_delayed_work_submit_to_queue+0x7a>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   10782:	4628      	mov	r0, r5
   10784:	f008 f8ab 	bl	188de <work_cancel>
		if (err < 0) {
   10788:	1e04      	subs	r4, r0, #0
   1078a:	da06      	bge.n	1079a <k_delayed_work_submit_to_queue+0x3a>
	__asm__ volatile(
   1078c:	f388 8811 	msr	BASEPRI, r8
   10790:	f3bf 8f6f 	isb	sy
	z_add_timeout(&work->timeout, work_timeout,
		     _TICK_ALIGN + z_ms_to_ticks(delay));

done:
	k_spin_unlock(&lock, key);
	return err;
   10794:	e00c      	b.n	107b0 <k_delayed_work_submit_to_queue+0x50>
	if (work->work_q == work_q) {
   10796:	2800      	cmp	r0, #0
   10798:	d0f3      	beq.n	10782 <k_delayed_work_submit_to_queue+0x22>
	work->work_q = work_q;
   1079a:	61ee      	str	r6, [r5, #28]
	if (delay == 0) {
   1079c:	b95f      	cbnz	r7, 107b6 <k_delayed_work_submit_to_queue+0x56>
   1079e:	f388 8811 	msr	BASEPRI, r8
   107a2:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   107a6:	4629      	mov	r1, r5
   107a8:	4630      	mov	r0, r6
   107aa:	f008 f87b 	bl	188a4 <k_work_submit_to_queue>
		return 0;
   107ae:	463c      	mov	r4, r7
}
   107b0:	4620      	mov	r0, r4
   107b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   107b6:	480a      	ldr	r0, [pc, #40]	; (107e0 <k_delayed_work_submit_to_queue+0x80>)
   107b8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   107bc:	2100      	movs	r1, #0
   107be:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   107c2:	2300      	movs	r3, #0
   107c4:	fbc6 0107 	smlal	r0, r1, r6, r7
   107c8:	f7f0 f86e 	bl	8a8 <__aeabi_ldivmod>
	z_add_timeout(&work->timeout, work_timeout,
   107cc:	4905      	ldr	r1, [pc, #20]	; (107e4 <k_delayed_work_submit_to_queue+0x84>)
   107ce:	1c42      	adds	r2, r0, #1
   107d0:	f105 000c 	add.w	r0, r5, #12
   107d4:	f000 f84e 	bl	10874 <z_add_timeout>
   107d8:	e7d8      	b.n	1078c <k_delayed_work_submit_to_queue+0x2c>
		err = -EADDRINUSE;
   107da:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   107de:	e7d5      	b.n	1078c <k_delayed_work_submit_to_queue+0x2c>
   107e0:	0004ffff 	.word	0x0004ffff
   107e4:	000188d5 	.word	0x000188d5

000107e8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   107e8:	4b03      	ldr	r3, [pc, #12]	; (107f8 <elapsed+0x10>)
   107ea:	681b      	ldr	r3, [r3, #0]
   107ec:	b90b      	cbnz	r3, 107f2 <elapsed+0xa>
   107ee:	f7fa b963 	b.w	aab8 <z_clock_elapsed>
}
   107f2:	2000      	movs	r0, #0
   107f4:	4770      	bx	lr
   107f6:	bf00      	nop
   107f8:	200058c0 	.word	0x200058c0

000107fc <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   107fc:	6803      	ldr	r3, [r0, #0]
   107fe:	b140      	cbz	r0, 10812 <remove_timeout+0x16>
   10800:	4a07      	ldr	r2, [pc, #28]	; (10820 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   10802:	6852      	ldr	r2, [r2, #4]
   10804:	4290      	cmp	r0, r2
   10806:	d004      	beq.n	10812 <remove_timeout+0x16>
	if (next(t) != NULL) {
   10808:	b11b      	cbz	r3, 10812 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   1080a:	689a      	ldr	r2, [r3, #8]
   1080c:	6881      	ldr	r1, [r0, #8]
   1080e:	440a      	add	r2, r1
   10810:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   10812:	6842      	ldr	r2, [r0, #4]
   10814:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   10816:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   10818:	2300      	movs	r3, #0
	node->prev = NULL;
   1081a:	e9c0 3300 	strd	r3, r3, [r0]
}
   1081e:	4770      	bx	lr
   10820:	2000cb7c 	.word	0x2000cb7c

00010824 <next_timeout>:

static s32_t next_timeout(void)
{
   10824:	b538      	push	{r3, r4, r5, lr}
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
   10826:	4b10      	ldr	r3, [pc, #64]	; (10868 <next_timeout+0x44>)
   10828:	781b      	ldrb	r3, [r3, #0]
   1082a:	2b00      	cmp	r3, #0
	return list->head == list;
   1082c:	4b0f      	ldr	r3, [pc, #60]	; (1086c <next_timeout+0x48>)
   1082e:	681c      	ldr	r4, [r3, #0]
   10830:	bf14      	ite	ne
   10832:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   10836:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1083a:	429c      	cmp	r4, r3
   1083c:	d00a      	beq.n	10854 <next_timeout+0x30>
	struct _timeout *to = first();
	s32_t ret = to == NULL ? maxw : MAX(0, to->dticks - elapsed());
   1083e:	b14c      	cbz	r4, 10854 <next_timeout+0x30>
   10840:	68a5      	ldr	r5, [r4, #8]
   10842:	f7ff ffd1 	bl	107e8 <elapsed>
   10846:	1a28      	subs	r0, r5, r0
   10848:	2800      	cmp	r0, #0
   1084a:	db0a      	blt.n	10862 <next_timeout+0x3e>
   1084c:	68a4      	ldr	r4, [r4, #8]
   1084e:	f7ff ffcb 	bl	107e8 <elapsed>
   10852:	1a20      	subs	r0, r4, r0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   10854:	4b06      	ldr	r3, [pc, #24]	; (10870 <next_timeout+0x4c>)
   10856:	691b      	ldr	r3, [r3, #16]
   10858:	b113      	cbz	r3, 10860 <next_timeout+0x3c>
   1085a:	4298      	cmp	r0, r3
   1085c:	bfa8      	it	ge
   1085e:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   10860:	bd38      	pop	{r3, r4, r5, pc}
	s32_t ret = to == NULL ? maxw : MAX(0, to->dticks - elapsed());
   10862:	2000      	movs	r0, #0
   10864:	e7f6      	b.n	10854 <next_timeout+0x30>
   10866:	bf00      	nop
   10868:	20005ee9 	.word	0x20005ee9
   1086c:	2000cb7c 	.word	0x2000cb7c
   10870:	200057f0 	.word	0x200057f0

00010874 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
   10874:	b570      	push	{r4, r5, r6, lr}
   10876:	4604      	mov	r4, r0
   10878:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1087a:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
   1087c:	f04f 0320 	mov.w	r3, #32
   10880:	f3ef 8511 	mrs	r5, BASEPRI
   10884:	f383 8811 	msr	BASEPRI, r3
   10888:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1088c:	f7ff ffac 	bl	107e8 <elapsed>
	return list->head == list;
   10890:	4b18      	ldr	r3, [pc, #96]	; (108f4 <z_add_timeout+0x80>)
   10892:	681a      	ldr	r2, [r3, #0]
   10894:	2e01      	cmp	r6, #1
   10896:	bfac      	ite	ge
   10898:	1980      	addge	r0, r0, r6
   1089a:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1089c:	429a      	cmp	r2, r3
   1089e:	60a0      	str	r0, [r4, #8]
   108a0:	d001      	beq.n	108a6 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   108a2:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   108a4:	b932      	cbnz	r2, 108b4 <z_add_timeout+0x40>
	node->prev = list->tail;
   108a6:	685a      	ldr	r2, [r3, #4]
   108a8:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   108aa:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   108ac:	6023      	str	r3, [r4, #0]
	list->tail->next = node;
   108ae:	6014      	str	r4, [r2, #0]
	list->tail = node;
   108b0:	605c      	str	r4, [r3, #4]
   108b2:	e00a      	b.n	108ca <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   108b4:	6890      	ldr	r0, [r2, #8]
   108b6:	68a1      	ldr	r1, [r4, #8]
   108b8:	4288      	cmp	r0, r1
   108ba:	dd15      	ble.n	108e8 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
   108bc:	1a41      	subs	r1, r0, r1
   108be:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   108c0:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   108c2:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
   108c6:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   108c8:	6054      	str	r4, [r2, #4]
	return list->head == list;
   108ca:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   108cc:	429a      	cmp	r2, r3
   108ce:	d006      	beq.n	108de <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   108d0:	4294      	cmp	r4, r2
   108d2:	d104      	bne.n	108de <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
   108d4:	f7ff ffa6 	bl	10824 <next_timeout>
   108d8:	2100      	movs	r1, #0
   108da:	f7fa f8b1 	bl	aa40 <z_clock_set_timeout>
	__asm__ volatile(
   108de:	f385 8811 	msr	BASEPRI, r5
   108e2:	f3bf 8f6f 	isb	sy
		}
	}
}
   108e6:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
   108e8:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   108ea:	42b2      	cmp	r2, r6
   108ec:	60a1      	str	r1, [r4, #8]
   108ee:	d0da      	beq.n	108a6 <z_add_timeout+0x32>
   108f0:	6812      	ldr	r2, [r2, #0]
   108f2:	e7d7      	b.n	108a4 <z_add_timeout+0x30>
   108f4:	2000cb7c 	.word	0x2000cb7c

000108f8 <z_timeout_remaining>:

	return ret;
}

s32_t z_timeout_remaining(struct _timeout *timeout)
{
   108f8:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   108fa:	6804      	ldr	r4, [r0, #0]
   108fc:	b314      	cbz	r4, 10944 <z_timeout_remaining+0x4c>
	__asm__ volatile(
   108fe:	f04f 0320 	mov.w	r3, #32
   10902:	f3ef 8111 	mrs	r1, BASEPRI
   10906:	f383 8811 	msr	BASEPRI, r3
   1090a:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1090e:	4a0e      	ldr	r2, [pc, #56]	; (10948 <z_timeout_remaining+0x50>)
   10910:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10912:	4293      	cmp	r3, r2
   10914:	d014      	beq.n	10940 <z_timeout_remaining+0x48>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   10916:	6852      	ldr	r2, [r2, #4]
   10918:	2400      	movs	r4, #0
		return 0;
	}

	LOCKED(&timeout_lock) {
		for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   1091a:	b93b      	cbnz	r3, 1092c <z_timeout_remaining+0x34>
	__asm__ volatile(
   1091c:	f381 8811 	msr	BASEPRI, r1
   10920:	f3bf 8f6f 	isb	sy
				break;
			}
		}
	}

	return ticks - elapsed();
   10924:	f7ff ff60 	bl	107e8 <elapsed>
   10928:	1a20      	subs	r0, r4, r0
}
   1092a:	bd38      	pop	{r3, r4, r5, pc}
			ticks += t->dticks;
   1092c:	689d      	ldr	r5, [r3, #8]
			if (timeout == t) {
   1092e:	4283      	cmp	r3, r0
			ticks += t->dticks;
   10930:	442c      	add	r4, r5
			if (timeout == t) {
   10932:	d0f3      	beq.n	1091c <z_timeout_remaining+0x24>
   10934:	2b00      	cmp	r3, #0
   10936:	d0f1      	beq.n	1091c <z_timeout_remaining+0x24>
	return (node == list->tail) ? NULL : node->next;
   10938:	4293      	cmp	r3, r2
   1093a:	d0ef      	beq.n	1091c <z_timeout_remaining+0x24>
   1093c:	681b      	ldr	r3, [r3, #0]
   1093e:	e7ec      	b.n	1091a <z_timeout_remaining+0x22>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10940:	2400      	movs	r4, #0
   10942:	e7eb      	b.n	1091c <z_timeout_remaining+0x24>
		return 0;
   10944:	4620      	mov	r0, r4
   10946:	e7f0      	b.n	1092a <z_timeout_remaining+0x32>
   10948:	2000cb7c 	.word	0x2000cb7c

0001094c <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   1094c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   10950:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   10952:	f7ff f927 	bl	fba4 <z_time_slice>
	__asm__ volatile(
   10956:	f04f 0320 	mov.w	r3, #32
   1095a:	f3ef 8511 	mrs	r5, BASEPRI
   1095e:	f383 8811 	msr	BASEPRI, r3
   10962:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   10966:	4e21      	ldr	r6, [pc, #132]	; (109ec <z_clock_announce+0xa0>)
   10968:	4f21      	ldr	r7, [pc, #132]	; (109f0 <z_clock_announce+0xa4>)
	return list->head == list;
   1096a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 109f4 <z_clock_announce+0xa8>
   1096e:	6034      	str	r4, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   10970:	46b8      	mov	r8, r7
   10972:	f8d9 4000 	ldr.w	r4, [r9]
   10976:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10978:	454c      	cmp	r4, r9
   1097a:	e9d7 bc00 	ldrd	fp, ip, [r7]
   1097e:	d005      	beq.n	1098c <z_clock_announce+0x40>
   10980:	b124      	cbz	r4, 1098c <z_clock_announce+0x40>
   10982:	68a3      	ldr	r3, [r4, #8]
   10984:	4293      	cmp	r3, r2
   10986:	dd14      	ble.n	109b2 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   10988:	1a9b      	subs	r3, r3, r2
   1098a:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
   1098c:	eb1b 0002 	adds.w	r0, fp, r2
   10990:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
	announce_remaining = 0;
   10994:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   10996:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
   1099a:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   1099c:	f7ff ff42 	bl	10824 <next_timeout>
   109a0:	4621      	mov	r1, r4
   109a2:	f7fa f84d 	bl	aa40 <z_clock_set_timeout>
	__asm__ volatile(
   109a6:	f385 8811 	msr	BASEPRI, r5
   109aa:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   109ae:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   109b2:	eb1b 0003 	adds.w	r0, fp, r3
   109b6:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   109ba:	1ad3      	subs	r3, r2, r3
   109bc:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   109be:	2300      	movs	r3, #0
		curr_tick += dt;
   109c0:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   109c4:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   109c6:	4620      	mov	r0, r4
   109c8:	f7ff ff18 	bl	107fc <remove_timeout>
   109cc:	f385 8811 	msr	BASEPRI, r5
   109d0:	f3bf 8f6f 	isb	sy
		t->fn(t);
   109d4:	68e3      	ldr	r3, [r4, #12]
   109d6:	4798      	blx	r3
	__asm__ volatile(
   109d8:	f04f 0320 	mov.w	r3, #32
   109dc:	f3ef 8511 	mrs	r5, BASEPRI
   109e0:	f383 8811 	msr	BASEPRI, r3
   109e4:	f3bf 8f6f 	isb	sy
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   109e8:	e7c3      	b.n	10972 <z_clock_announce+0x26>
   109ea:	bf00      	nop
   109ec:	200058c0 	.word	0x200058c0
   109f0:	20002408 	.word	0x20002408
   109f4:	2000cb7c 	.word	0x2000cb7c

000109f8 <z_tick_get>:
{
	can_wait_forever = 1;
}

s64_t z_tick_get(void)
{
   109f8:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
   109fc:	f04f 0320 	mov.w	r3, #32
   10a00:	f3ef 8411 	mrs	r4, BASEPRI
   10a04:	f383 8811 	msr	BASEPRI, r3
   10a08:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   10a0c:	f7fa f854 	bl	aab8 <z_clock_elapsed>
   10a10:	4b07      	ldr	r3, [pc, #28]	; (10a30 <z_tick_get+0x38>)
   10a12:	e9d3 2300 	ldrd	r2, r3, [r3]
   10a16:	eb12 0b00 	adds.w	fp, r2, r0
   10a1a:	f143 0c00 	adc.w	ip, r3, #0
   10a1e:	4658      	mov	r0, fp
   10a20:	4661      	mov	r1, ip
	__asm__ volatile(
   10a22:	f384 8811 	msr	BASEPRI, r4
   10a26:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   10a2a:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   10a2e:	bf00      	nop
   10a30:	20002408 	.word	0x20002408

00010a34 <z_hdlr_k_uptime_get>:
	return __ticks_to_ms(z_tick_get());
}

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER(k_uptime_get, ret_p)
{
   10a34:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u64_t *ret = (u64_t *)ret_p;

	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(ret, sizeof(*ret)));
   10a36:	2201      	movs	r2, #1
   10a38:	2108      	movs	r1, #8
{
   10a3a:	4605      	mov	r5, r0
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(ret, sizeof(*ret)));
   10a3c:	f004 fa9a 	bl	14f74 <z_arch_buffer_validate>
   10a40:	4604      	mov	r4, r0
   10a42:	b150      	cbz	r0, 10a5a <z_hdlr_k_uptime_get+0x26>
   10a44:	4b08      	ldr	r3, [pc, #32]	; (10a68 <z_hdlr_k_uptime_get+0x34>)
   10a46:	9300      	str	r3, [sp, #0]
   10a48:	4808      	ldr	r0, [pc, #32]	; (10a6c <z_hdlr_k_uptime_get+0x38>)
   10a4a:	4909      	ldr	r1, [pc, #36]	; (10a70 <z_hdlr_k_uptime_get+0x3c>)
   10a4c:	2308      	movs	r3, #8
   10a4e:	462a      	mov	r2, r5
   10a50:	f002 fd15 	bl	1347e <printk>
   10a54:	9808      	ldr	r0, [sp, #32]
   10a56:	f004 fa66 	bl	14f26 <z_arch_syscall_oops>
	*ret = z_impl_k_uptime_get();
   10a5a:	f007 ffe3 	bl	18a24 <z_impl_k_uptime_get>
   10a5e:	e9c5 0100 	strd	r0, r1, [r5]
	return 0;
}
   10a62:	4620      	mov	r0, r4
   10a64:	b003      	add	sp, #12
   10a66:	bd30      	pop	{r4, r5, pc}
   10a68:	0001a21f 	.word	0x0001a21f
   10a6c:	0001a1c4 	.word	0x0001a1c4
   10a70:	0001c1d3 	.word	0x0001c1d3

00010a74 <k_poll_event_init>:
 */
static struct k_spinlock lock;

void k_poll_event_init(struct k_poll_event *event, u32_t type,
		       int mode, void *obj)
{
   10a74:	b510      	push	{r4, lr}
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
	__ASSERT(obj != NULL, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
   10a76:	7b44      	ldrb	r4, [r0, #13]
   10a78:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
	event->mode = mode;
   10a7c:	7b81      	ldrb	r1, [r0, #14]
	event->type = type;
   10a7e:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   10a80:	f362 0141 	bfi	r1, r2, #1, #1
   10a84:	7381      	strb	r1, [r0, #14]
	event->poller = NULL;
   10a86:	2200      	movs	r2, #0
	event->state = K_POLL_STATE_NOT_READY;
   10a88:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
   10a8a:	6082      	str	r2, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   10a8c:	4a02      	ldr	r2, [pc, #8]	; (10a98 <k_poll_event_init+0x24>)
   10a8e:	400a      	ands	r2, r1
	event->unused = 0U;
	event->obj = obj;
   10a90:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   10a94:	bd10      	pop	{r4, pc}
   10a96:	bf00      	nop
   10a98:	00020fff 	.word	0x00020fff

00010a9c <z_impl_k_poll>:
	event->poller = NULL;
	event->state |= state;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
   10a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(num_events > 0, "zero events\n");

	int last_registered = -1, rc;
	k_spinlock_key_t key;

	struct _poller poller = { .thread = _current, .is_polling = true, };
   10aa0:	4b49      	ldr	r3, [pc, #292]	; (10bc8 <z_impl_k_poll+0x12c>)
{
   10aa2:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = true, };
   10aa4:	689b      	ldr	r3, [r3, #8]
   10aa6:	9300      	str	r3, [sp, #0]

	/* find events whose condition is already fulfilled */
	for (int ii = 0; ii < num_events; ii++) {
   10aa8:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = true, };
   10aaa:	2301      	movs	r3, #1
{
   10aac:	4607      	mov	r7, r0
   10aae:	468a      	mov	sl, r1
   10ab0:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = true, };
   10ab2:	f88d 3004 	strb.w	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   10ab6:	4604      	mov	r4, r0
	int last_registered = -1, rc;
   10ab8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
   10abc:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
   10abe:	4556      	cmp	r6, sl
   10ac0:	db17      	blt.n	10af2 <z_impl_k_poll+0x56>
	__asm__ volatile(
   10ac2:	f04f 0320 	mov.w	r3, #32
   10ac6:	f3ef 8611 	mrs	r6, BASEPRI
   10aca:	f383 8811 	msr	BASEPRI, r3
   10ace:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   10ad2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   10ad6:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   10ada:	2b00      	cmp	r3, #0
   10adc:	d152      	bne.n	10b84 <z_impl_k_poll+0xe8>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, last_registered, key);
   10ade:	4632      	mov	r2, r6
   10ae0:	4629      	mov	r1, r5
   10ae2:	4638      	mov	r0, r7
   10ae4:	f007 ffae 	bl	18a44 <clear_event_registrations>
	__asm__ volatile(
   10ae8:	f386 8811 	msr	BASEPRI, r6
   10aec:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return swap_rc;
   10af0:	e054      	b.n	10b9c <z_impl_k_poll+0x100>
	__asm__ volatile(
   10af2:	f04f 0320 	mov.w	r3, #32
   10af6:	f3ef 8b11 	mrs	fp, BASEPRI
   10afa:	f383 8811 	msr	BASEPRI, r3
   10afe:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   10b02:	7b63      	ldrb	r3, [r4, #13]
   10b04:	f003 030f 	and.w	r3, r3, #15
   10b08:	2b02      	cmp	r3, #2
   10b0a:	d003      	beq.n	10b14 <z_impl_k_poll+0x78>
   10b0c:	2b04      	cmp	r3, #4
   10b0e:	d004      	beq.n	10b1a <z_impl_k_poll+0x7e>
   10b10:	2b01      	cmp	r3, #1
   10b12:	d117      	bne.n	10b44 <z_impl_k_poll+0xa8>
		if (event->signal->signaled != 0U) {
   10b14:	6922      	ldr	r2, [r4, #16]
   10b16:	6892      	ldr	r2, [r2, #8]
   10b18:	e001      	b.n	10b1e <z_impl_k_poll+0x82>
   10b1a:	6922      	ldr	r2, [r4, #16]
		if (!k_queue_is_empty(event->queue)) {
   10b1c:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled != 0U) {
   10b1e:	b18a      	cbz	r2, 10b44 <z_impl_k_poll+0xa8>
	event->state |= state;
   10b20:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   10b22:	f8c4 9008 	str.w	r9, [r4, #8]
	event->state |= state;
   10b26:	f3c2 3104 	ubfx	r1, r2, #12, #5
   10b2a:	430b      	orrs	r3, r1
   10b2c:	f363 3210 	bfi	r2, r3, #12, #5
   10b30:	60e2      	str	r2, [r4, #12]
			poller.is_polling = false;
   10b32:	f88d 9004 	strb.w	r9, [sp, #4]
	__asm__ volatile(
   10b36:	f38b 8811 	msr	BASEPRI, fp
   10b3a:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   10b3e:	3601      	adds	r6, #1
   10b40:	3414      	adds	r4, #20
   10b42:	e7bc      	b.n	10abe <z_impl_k_poll+0x22>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   10b44:	f1b8 0f00 	cmp.w	r8, #0
   10b48:	d0f5      	beq.n	10b36 <z_impl_k_poll+0x9a>
   10b4a:	f89d 2004 	ldrb.w	r2, [sp, #4]
   10b4e:	2a00      	cmp	r2, #0
   10b50:	d0f1      	beq.n	10b36 <z_impl_k_poll+0x9a>
	switch (event->type) {
   10b52:	2b02      	cmp	r3, #2
   10b54:	d007      	beq.n	10b66 <z_impl_k_poll+0xca>
   10b56:	2b04      	cmp	r3, #4
   10b58:	d00f      	beq.n	10b7a <z_impl_k_poll+0xde>
   10b5a:	2b01      	cmp	r3, #1
   10b5c:	d109      	bne.n	10b72 <z_impl_k_poll+0xd6>
		add_event(&event->signal->poll_events, event, poller);
   10b5e:	466a      	mov	r2, sp
   10b60:	4621      	mov	r1, r4
   10b62:	6920      	ldr	r0, [r4, #16]
   10b64:	e003      	b.n	10b6e <z_impl_k_poll+0xd2>
		add_event(&event->sem->poll_events, event, poller);
   10b66:	6920      	ldr	r0, [r4, #16]
   10b68:	466a      	mov	r2, sp
   10b6a:	4621      	mov	r1, r4
   10b6c:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   10b6e:	f007 ffd0 	bl	18b12 <add_event>
	event->poller = poller;
   10b72:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
   10b76:	3501      	adds	r5, #1
   10b78:	e7dd      	b.n	10b36 <z_impl_k_poll+0x9a>
		add_event(&event->queue->poll_events, event, poller);
   10b7a:	6920      	ldr	r0, [r4, #16]
   10b7c:	466a      	mov	r2, sp
   10b7e:	4621      	mov	r1, r4
   10b80:	3008      	adds	r0, #8
   10b82:	e7f4      	b.n	10b6e <z_impl_k_poll+0xd2>
	poller.is_polling = false;
   10b84:	2300      	movs	r3, #0
   10b86:	f88d 3004 	strb.w	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
   10b8a:	f1b8 0f00 	cmp.w	r8, #0
   10b8e:	d109      	bne.n	10ba4 <z_impl_k_poll+0x108>
   10b90:	f386 8811 	msr	BASEPRI, r6
   10b94:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   10b98:	f06f 040a 	mvn.w	r4, #10
}
   10b9c:	4620      	mov	r0, r4
   10b9e:	b005      	add	sp, #20
   10ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   10ba4:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   10ba6:	4643      	mov	r3, r8
   10ba8:	4631      	mov	r1, r6
   10baa:	4808      	ldr	r0, [pc, #32]	; (10bcc <z_impl_k_poll+0x130>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   10bac:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   10bb0:	f7ff f8bc 	bl	fd2c <z_pend_curr>
   10bb4:	4604      	mov	r4, r0
	__asm__ volatile(
   10bb6:	f04f 0320 	mov.w	r3, #32
   10bba:	f3ef 8611 	mrs	r6, BASEPRI
   10bbe:	f383 8811 	msr	BASEPRI, r3
   10bc2:	f3bf 8f6f 	isb	sy
   10bc6:	e78a      	b.n	10ade <z_impl_k_poll+0x42>
   10bc8:	200057f0 	.word	0x200057f0
   10bcc:	20005eea 	.word	0x20005eea

00010bd0 <z_hdlr_k_poll>:

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER(k_poll, events, num_events, timeout)
{
   10bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10bd4:	4680      	mov	r8, r0
   10bd6:	4693      	mov	fp, r2
	unsigned int bounds;

	/* Validate the events buffer and make a copy of it in an
	 * allocated kernel-side buffer.
	 */
	if (Z_SYSCALL_VERIFY(num_events > 0)) {
   10bd8:	4689      	mov	r9, r1
   10bda:	2900      	cmp	r1, #0
   10bdc:	f040 8082 	bne.w	10ce4 <z_hdlr_k_poll+0x114>
   10be0:	4949      	ldr	r1, [pc, #292]	; (10d08 <z_hdlr_k_poll+0x138>)
   10be2:	484a      	ldr	r0, [pc, #296]	; (10d0c <z_hdlr_k_poll+0x13c>)
		ret = -EINVAL;
		goto out;
	}
	if (Z_SYSCALL_VERIFY_MSG(
   10be4:	f002 fc4b 	bl	1347e <printk>
		!__builtin_umul_overflow(num_events,
					sizeof(struct k_poll_event),
					&bounds),
					"num_events too large")) {
		ret = -EINVAL;
   10be8:	f06f 0415 	mvn.w	r4, #21
   10bec:	e04f      	b.n	10c8e <z_hdlr_k_poll+0xbe>
   10bee:	f04f 0320 	mov.w	r3, #32
   10bf2:	f3ef 8411 	mrs	r4, BASEPRI
   10bf6:	f383 8811 	msr	BASEPRI, r3
   10bfa:	f3bf 8f6f 	isb	sy
		ret = -ENOMEM;
		goto out;
	}

	key = k_spin_lock(&lock);
	if (Z_SYSCALL_MEMORY_WRITE(events, bounds)) {
   10bfe:	2201      	movs	r2, #1
   10c00:	4631      	mov	r1, r6
   10c02:	4640      	mov	r0, r8
   10c04:	f004 f9b6 	bl	14f74 <z_arch_buffer_validate>
   10c08:	4682      	mov	sl, r0
   10c0a:	2800      	cmp	r0, #0
   10c0c:	d056      	beq.n	10cbc <z_hdlr_k_poll+0xec>
   10c0e:	4b40      	ldr	r3, [pc, #256]	; (10d10 <z_hdlr_k_poll+0x140>)
   10c10:	9300      	str	r3, [sp, #0]
   10c12:	4642      	mov	r2, r8
   10c14:	4633      	mov	r3, r6
   10c16:	493c      	ldr	r1, [pc, #240]	; (10d08 <z_hdlr_k_poll+0x138>)
   10c18:	483e      	ldr	r0, [pc, #248]	; (10d14 <z_hdlr_k_poll+0x144>)
   10c1a:	f002 fc30 	bl	1347e <printk>
	__asm__ volatile(
   10c1e:	f384 8811 	msr	BASEPRI, r4
   10c22:	f3bf 8f6f 	isb	sy
out_free:
	k_free(events_copy);
out:
	return ret;
oops_free:
	k_free(events_copy);
   10c26:	4628      	mov	r0, r5
   10c28:	f007 fb60 	bl	182ec <k_free>
			Z_OOPS(Z_SYSCALL_OBJ(e->signal, K_OBJ_POLL_SIGNAL));
   10c2c:	980e      	ldr	r0, [sp, #56]	; 0x38
   10c2e:	f004 f97a 	bl	14f26 <z_arch_syscall_oops>
   10c32:	6920      	ldr	r0, [r4, #16]
   10c34:	f7ef fae4 	bl	200 <z_object_find>
   10c38:	2300      	movs	r3, #0
   10c3a:	2206      	movs	r2, #6
   10c3c:	6921      	ldr	r1, [r4, #16]
   10c3e:	f007 ff2b 	bl	18a98 <z_obj_validation_check>
   10c42:	b180      	cbz	r0, 10c66 <z_hdlr_k_poll+0x96>
   10c44:	4930      	ldr	r1, [pc, #192]	; (10d08 <z_hdlr_k_poll+0x138>)
   10c46:	4834      	ldr	r0, [pc, #208]	; (10d18 <z_hdlr_k_poll+0x148>)
   10c48:	f002 fc19 	bl	1347e <printk>
   10c4c:	e7ee      	b.n	10c2c <z_hdlr_k_poll+0x5c>
			Z_OOPS(Z_SYSCALL_OBJ(e->sem, K_OBJ_SEM));
   10c4e:	6920      	ldr	r0, [r4, #16]
   10c50:	f7ef fad6 	bl	200 <z_object_find>
   10c54:	2300      	movs	r3, #0
   10c56:	2207      	movs	r2, #7
   10c58:	e7f0      	b.n	10c3c <z_hdlr_k_poll+0x6c>
			Z_OOPS(Z_SYSCALL_OBJ(e->queue, K_OBJ_QUEUE));
   10c5a:	6920      	ldr	r0, [r4, #16]
   10c5c:	f7ef fad0 	bl	200 <z_object_find>
   10c60:	2300      	movs	r3, #0
   10c62:	2205      	movs	r2, #5
   10c64:	e7ea      	b.n	10c3c <z_hdlr_k_poll+0x6c>
	for (int i = 0; i < num_events; i++) {
   10c66:	f10a 0a01 	add.w	sl, sl, #1
   10c6a:	45d1      	cmp	r9, sl
   10c6c:	f104 0414 	add.w	r4, r4, #20
   10c70:	d12e      	bne.n	10cd0 <z_hdlr_k_poll+0x100>

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout)

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout)

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
   10c72:	465a      	mov	r2, fp
   10c74:	4649      	mov	r1, r9
   10c76:	4628      	mov	r0, r5
   10c78:	f7ff ff10 	bl	10a9c <z_impl_k_poll>
   10c7c:	4632      	mov	r2, r6
   10c7e:	4604      	mov	r4, r0
   10c80:	4629      	mov	r1, r5
   10c82:	4640      	mov	r0, r8
   10c84:	f7f1 fb7a 	bl	237c <memcpy>
	k_free(events_copy);
   10c88:	4628      	mov	r0, r5
   10c8a:	f007 fb2f 	bl	182ec <k_free>
	Z_OOPS(1);
}
   10c8e:	4620      	mov	r0, r4
   10c90:	b003      	add	sp, #12
   10c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (e->type) {
   10c96:	7b63      	ldrb	r3, [r4, #13]
   10c98:	f003 030f 	and.w	r3, r3, #15
   10c9c:	2b04      	cmp	r3, #4
   10c9e:	d81e      	bhi.n	10cde <z_hdlr_k_poll+0x10e>
   10ca0:	a201      	add	r2, pc, #4	; (adr r2, 10ca8 <z_hdlr_k_poll+0xd8>)
   10ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10ca6:	bf00      	nop
   10ca8:	00010c67 	.word	0x00010c67
   10cac:	00010c33 	.word	0x00010c33
   10cb0:	00010c4f 	.word	0x00010c4f
   10cb4:	00010cdf 	.word	0x00010cdf
   10cb8:	00010c5b 	.word	0x00010c5b
   10cbc:	4632      	mov	r2, r6
   10cbe:	4641      	mov	r1, r8
   10cc0:	4628      	mov	r0, r5
   10cc2:	f7f1 fb5b 	bl	237c <memcpy>
   10cc6:	f384 8811 	msr	BASEPRI, r4
   10cca:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < num_events; i++) {
   10cce:	462c      	mov	r4, r5
		if (Z_SYSCALL_VERIFY(e->mode == K_POLL_MODE_NOTIFY_ONLY)) {
   10cd0:	7ba3      	ldrb	r3, [r4, #14]
   10cd2:	079b      	lsls	r3, r3, #30
   10cd4:	d5df      	bpl.n	10c96 <z_hdlr_k_poll+0xc6>
   10cd6:	490c      	ldr	r1, [pc, #48]	; (10d08 <z_hdlr_k_poll+0x138>)
   10cd8:	4810      	ldr	r0, [pc, #64]	; (10d1c <z_hdlr_k_poll+0x14c>)
   10cda:	f002 fbd0 	bl	1347e <printk>
			ret = -EINVAL;
   10cde:	f06f 0415 	mvn.w	r4, #21
   10ce2:	e7d1      	b.n	10c88 <z_hdlr_k_poll+0xb8>
	if (Z_SYSCALL_VERIFY_MSG(
   10ce4:	2614      	movs	r6, #20
   10ce6:	fba1 6706 	umull	r6, r7, r1, r6
   10cea:	b94f      	cbnz	r7, 10d00 <z_hdlr_k_poll+0x130>
	events_copy = z_thread_malloc(bounds);
   10cec:	4630      	mov	r0, r6
   10cee:	f7fe fc33 	bl	f558 <z_thread_malloc>
	if (!events_copy) {
   10cf2:	4605      	mov	r5, r0
   10cf4:	2800      	cmp	r0, #0
   10cf6:	f47f af7a 	bne.w	10bee <z_hdlr_k_poll+0x1e>
		ret = -ENOMEM;
   10cfa:	f06f 040b 	mvn.w	r4, #11
	return ret;
   10cfe:	e7c6      	b.n	10c8e <z_hdlr_k_poll+0xbe>
	if (Z_SYSCALL_VERIFY_MSG(
   10d00:	4901      	ldr	r1, [pc, #4]	; (10d08 <z_hdlr_k_poll+0x138>)
   10d02:	4807      	ldr	r0, [pc, #28]	; (10d20 <z_hdlr_k_poll+0x150>)
   10d04:	e76e      	b.n	10be4 <z_hdlr_k_poll+0x14>
   10d06:	bf00      	nop
   10d08:	0001c1e7 	.word	0x0001c1e7
   10d0c:	0001c260 	.word	0x0001c260
   10d10:	0001a21f 	.word	0x0001a21f
   10d14:	0001a1c4 	.word	0x0001a1c4
   10d18:	0001ba44 	.word	0x0001ba44
   10d1c:	0001c2b8 	.word	0x0001c2b8
   10d20:	0001c289 	.word	0x0001c289

00010d24 <z_hdlr_k_poll_signal_init>:
	z_object_init(signal);
}

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER(k_poll_signal_init, signal)
{
   10d24:	b538      	push	{r3, r4, r5, lr}
   10d26:	4605      	mov	r5, r0
	Z_OOPS(Z_SYSCALL_OBJ_INIT(signal, K_OBJ_POLL_SIGNAL));
   10d28:	f7ef fa6a 	bl	200 <z_object_find>
   10d2c:	2301      	movs	r3, #1
   10d2e:	2206      	movs	r2, #6
   10d30:	4629      	mov	r1, r5
   10d32:	f007 feb1 	bl	18a98 <z_obj_validation_check>
   10d36:	4604      	mov	r4, r0
   10d38:	b130      	cbz	r0, 10d48 <z_hdlr_k_poll_signal_init+0x24>
   10d3a:	4806      	ldr	r0, [pc, #24]	; (10d54 <z_hdlr_k_poll_signal_init+0x30>)
   10d3c:	4906      	ldr	r1, [pc, #24]	; (10d58 <z_hdlr_k_poll_signal_init+0x34>)
   10d3e:	f002 fb9e 	bl	1347e <printk>
   10d42:	9806      	ldr	r0, [sp, #24]
   10d44:	f004 f8ef 	bl	14f26 <z_arch_syscall_oops>
	z_impl_k_poll_signal_init((struct k_poll_signal *)signal);
   10d48:	4628      	mov	r0, r5
   10d4a:	f007 ff1e 	bl	18b8a <z_impl_k_poll_signal_init>
	return 0;
}
   10d4e:	4620      	mov	r0, r4
   10d50:	bd38      	pop	{r3, r4, r5, pc}
   10d52:	bf00      	nop
   10d54:	0001ba44 	.word	0x0001ba44
   10d58:	0001c1f5 	.word	0x0001c1f5

00010d5c <z_hdlr_k_poll_signal_check>:
	*result = signal->result;
}

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER(k_poll_signal_check, signal, signaled, result)
{
   10d5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10d5e:	4605      	mov	r5, r0
   10d60:	460c      	mov	r4, r1
   10d62:	4616      	mov	r6, r2
	Z_OOPS(Z_SYSCALL_OBJ(signal, K_OBJ_POLL_SIGNAL));
   10d64:	f7ef fa4c 	bl	200 <z_object_find>
   10d68:	2300      	movs	r3, #0
   10d6a:	2206      	movs	r2, #6
   10d6c:	4629      	mov	r1, r5
   10d6e:	f007 fe93 	bl	18a98 <z_obj_validation_check>
   10d72:	b1c0      	cbz	r0, 10da6 <z_hdlr_k_poll_signal_check+0x4a>
   10d74:	4914      	ldr	r1, [pc, #80]	; (10dc8 <z_hdlr_k_poll_signal_check+0x6c>)
   10d76:	4815      	ldr	r0, [pc, #84]	; (10dcc <z_hdlr_k_poll_signal_check+0x70>)
   10d78:	f002 fb81 	bl	1347e <printk>
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(signaled, sizeof(unsigned int)));
   10d7c:	9808      	ldr	r0, [sp, #32]
   10d7e:	f004 f8d2 	bl	14f26 <z_arch_syscall_oops>
	*signaled = signal->signaled;
   10d82:	68ab      	ldr	r3, [r5, #8]
   10d84:	6023      	str	r3, [r4, #0]
	*result = signal->result;
   10d86:	68eb      	ldr	r3, [r5, #12]
   10d88:	6033      	str	r3, [r6, #0]
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(result, sizeof(int)));

	z_impl_k_poll_signal_check((struct k_poll_signal *)signal,
				  (unsigned int *)signaled, (int *)result);
	return 0;
}
   10d8a:	b002      	add	sp, #8
   10d8c:	bd70      	pop	{r4, r5, r6, pc}
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(result, sizeof(int)));
   10d8e:	2201      	movs	r2, #1
   10d90:	2104      	movs	r1, #4
   10d92:	4630      	mov	r0, r6
   10d94:	f004 f8ee 	bl	14f74 <z_arch_buffer_validate>
   10d98:	2800      	cmp	r0, #0
   10d9a:	d0f2      	beq.n	10d82 <z_hdlr_k_poll_signal_check+0x26>
   10d9c:	4b0c      	ldr	r3, [pc, #48]	; (10dd0 <z_hdlr_k_poll_signal_check+0x74>)
   10d9e:	9300      	str	r3, [sp, #0]
   10da0:	4632      	mov	r2, r6
   10da2:	2304      	movs	r3, #4
   10da4:	e00a      	b.n	10dbc <z_hdlr_k_poll_signal_check+0x60>
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(signaled, sizeof(unsigned int)));
   10da6:	2201      	movs	r2, #1
   10da8:	2104      	movs	r1, #4
   10daa:	4620      	mov	r0, r4
   10dac:	f004 f8e2 	bl	14f74 <z_arch_buffer_validate>
   10db0:	2800      	cmp	r0, #0
   10db2:	d0ec      	beq.n	10d8e <z_hdlr_k_poll_signal_check+0x32>
   10db4:	4b06      	ldr	r3, [pc, #24]	; (10dd0 <z_hdlr_k_poll_signal_check+0x74>)
   10db6:	9300      	str	r3, [sp, #0]
   10db8:	4622      	mov	r2, r4
   10dba:	2304      	movs	r3, #4
   10dbc:	4902      	ldr	r1, [pc, #8]	; (10dc8 <z_hdlr_k_poll_signal_check+0x6c>)
   10dbe:	4805      	ldr	r0, [pc, #20]	; (10dd4 <z_hdlr_k_poll_signal_check+0x78>)
   10dc0:	f002 fb5d 	bl	1347e <printk>
   10dc4:	e7da      	b.n	10d7c <z_hdlr_k_poll_signal_check+0x20>
   10dc6:	bf00      	nop
   10dc8:	0001c20f 	.word	0x0001c20f
   10dcc:	0001ba44 	.word	0x0001ba44
   10dd0:	0001a21f 	.word	0x0001a21f
   10dd4:	0001a1c4 	.word	0x0001a1c4

00010dd8 <z_impl_k_poll_signal_raise>:
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   10dd8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   10dda:	f04f 0320 	mov.w	r3, #32
   10dde:	f3ef 8511 	mrs	r5, BASEPRI
   10de2:	f383 8811 	msr	BASEPRI, r3
   10de6:	f3bf 8f6f 	isb	sy
	return list->head == list;
   10dea:	6803      	ldr	r3, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   10dec:	60c1      	str	r1, [r0, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   10dee:	4298      	cmp	r0, r3
	signal->signaled = 1U;
   10df0:	f04f 0101 	mov.w	r1, #1
   10df4:	6081      	str	r1, [r0, #8]
   10df6:	d106      	bne.n	10e06 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   10df8:	f385 8811 	msr	BASEPRI, r5
   10dfc:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   10e00:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   10e02:	4620      	mov	r0, r4
   10e04:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   10e06:	e9d3 2000 	ldrd	r2, r0, [r3]
   10e0a:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   10e0c:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   10e0e:	2200      	movs	r2, #0
	node->prev = NULL;
   10e10:	e9c3 2200 	strd	r2, r2, [r3]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   10e14:	4618      	mov	r0, r3
   10e16:	f007 fe50 	bl	18aba <signal_poll_event>
	z_reschedule(&lock, key);
   10e1a:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   10e1c:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   10e1e:	4802      	ldr	r0, [pc, #8]	; (10e28 <z_impl_k_poll_signal_raise+0x50>)
   10e20:	f007 fbcf 	bl	185c2 <z_reschedule>
	return rc;
   10e24:	e7ed      	b.n	10e02 <z_impl_k_poll_signal_raise+0x2a>
   10e26:	bf00      	nop
   10e28:	20005eea 	.word	0x20005eea

00010e2c <z_hdlr_k_poll_signal_raise>:

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER(k_poll_signal_raise, signal, result)
{
   10e2c:	b570      	push	{r4, r5, r6, lr}
   10e2e:	4604      	mov	r4, r0
   10e30:	460d      	mov	r5, r1
   10e32:	9e06      	ldr	r6, [sp, #24]
	Z_OOPS(Z_SYSCALL_OBJ(signal, K_OBJ_POLL_SIGNAL));
   10e34:	f7ef f9e4 	bl	200 <z_object_find>
   10e38:	2300      	movs	r3, #0
   10e3a:	2206      	movs	r2, #6
   10e3c:	4621      	mov	r1, r4
   10e3e:	f007 fe2b 	bl	18a98 <z_obj_validation_check>
   10e42:	b130      	cbz	r0, 10e52 <z_hdlr_k_poll_signal_raise+0x26>
   10e44:	4806      	ldr	r0, [pc, #24]	; (10e60 <z_hdlr_k_poll_signal_raise+0x34>)
   10e46:	4907      	ldr	r1, [pc, #28]	; (10e64 <z_hdlr_k_poll_signal_raise+0x38>)
   10e48:	f002 fb19 	bl	1347e <printk>
   10e4c:	4630      	mov	r0, r6
   10e4e:	f004 f86a 	bl	14f26 <z_arch_syscall_oops>
	return z_impl_k_poll_signal_raise((struct k_poll_signal *)signal, result);
   10e52:	4629      	mov	r1, r5
   10e54:	4620      	mov	r0, r4
}
   10e56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_impl_k_poll_signal_raise((struct k_poll_signal *)signal, result);
   10e5a:	f7ff bfbd 	b.w	10dd8 <z_impl_k_poll_signal_raise>
   10e5e:	bf00      	nop
   10e60:	0001ba44 	.word	0x0001ba44
   10e64:	0001c22a 	.word	0x0001c22a

00010e68 <z_hdlr_k_poll_signal_reset>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_poll_signal_reset, K_OBJ_POLL_SIGNAL,
   10e68:	b510      	push	{r4, lr}
   10e6a:	4604      	mov	r4, r0
   10e6c:	f7ef f9c8 	bl	200 <z_object_find>
   10e70:	2300      	movs	r3, #0
   10e72:	2206      	movs	r2, #6
   10e74:	4621      	mov	r1, r4
   10e76:	f007 fe0f 	bl	18a98 <z_obj_validation_check>
   10e7a:	b130      	cbz	r0, 10e8a <z_hdlr_k_poll_signal_reset+0x22>
   10e7c:	4804      	ldr	r0, [pc, #16]	; (10e90 <z_hdlr_k_poll_signal_reset+0x28>)
   10e7e:	4905      	ldr	r1, [pc, #20]	; (10e94 <z_hdlr_k_poll_signal_reset+0x2c>)
   10e80:	f002 fafd 	bl	1347e <printk>
   10e84:	9804      	ldr	r0, [sp, #16]
   10e86:	f004 f84e 	bl	14f26 <z_arch_syscall_oops>
 */
__syscall void k_poll_signal_reset(struct k_poll_signal *signal);

static inline void z_impl_k_poll_signal_reset(struct k_poll_signal *signal)
{
	signal->signaled = 0U;
   10e8a:	60a0      	str	r0, [r4, #8]
   10e8c:	bd10      	pop	{r4, pc}
   10e8e:	bf00      	nop
   10e90:	0001ba44 	.word	0x0001ba44
   10e94:	0001c245 	.word	0x0001c245

00010e98 <init_mem_domain_module>:

	k_spin_unlock(&lock, key);
}

static int init_mem_domain_module(struct device *arg)
{
   10e98:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);

	max_partitions = z_arch_mem_domain_max_partitions_get();
   10e9a:	f004 f864 	bl	14f66 <z_arch_mem_domain_max_partitions_get>
   10e9e:	4b02      	ldr	r3, [pc, #8]	; (10ea8 <init_mem_domain_module+0x10>)
   10ea0:	7018      	strb	r0, [r3, #0]
	 * out of bounds error.
	 */
	__ASSERT(max_partitions <= CONFIG_MAX_DOMAIN_PARTITIONS, "");

	return 0;
}
   10ea2:	2000      	movs	r0, #0
   10ea4:	bd08      	pop	{r3, pc}
   10ea6:	bf00      	nop
   10ea8:	20005eea 	.word	0x20005eea

00010eac <k_mem_domain_add_thread>:
{
   10eac:	b510      	push	{r4, lr}
	__asm__ volatile(
   10eae:	f04f 0320 	mov.w	r3, #32
   10eb2:	f3ef 8411 	mrs	r4, BASEPRI
   10eb6:	f383 8811 	msr	BASEPRI, r3
   10eba:	f3bf 8f6f 	isb	sy
	sys_dlist_append(&domain->mem_domain_q,
   10ebe:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
	node->next = list;
   10ec2:	660a      	str	r2, [r1, #96]	; 0x60
	node->prev = list->tail;
   10ec4:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
   10ec8:	664a      	str	r2, [r1, #100]	; 0x64
	list->tail->next = node;
   10eca:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
   10ece:	f101 0360 	add.w	r3, r1, #96	; 0x60
   10ed2:	6013      	str	r3, [r2, #0]
	list->tail = node;
   10ed4:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
	if (_current == thread) {
   10ed8:	4b05      	ldr	r3, [pc, #20]	; (10ef0 <k_mem_domain_add_thread+0x44>)
	thread->mem_domain_info.mem_domain = domain;
   10eda:	6688      	str	r0, [r1, #104]	; 0x68
	if (_current == thread) {
   10edc:	6898      	ldr	r0, [r3, #8]
   10ede:	4288      	cmp	r0, r1
   10ee0:	d101      	bne.n	10ee6 <k_mem_domain_add_thread+0x3a>
		z_arch_mem_domain_configure(thread);
   10ee2:	f004 f845 	bl	14f70 <z_arch_mem_domain_configure>
	__asm__ volatile(
   10ee6:	f384 8811 	msr	BASEPRI, r4
   10eea:	f3bf 8f6f 	isb	sy
}
   10eee:	bd10      	pop	{r4, pc}
   10ef0:	200057f0 	.word	0x200057f0

00010ef4 <z_hdlr_k_object_access_grant>:
 *
 * To avoid double z_object_find() lookups, we don't call the implementation
 * function, but call a level deeper.
 */
Z_SYSCALL_HANDLER(k_object_access_grant, object, thread)
{
   10ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10ef6:	4605      	mov	r5, r0
	struct _k_object *ko;

	Z_OOPS(Z_SYSCALL_OBJ_INIT(thread, K_OBJ_THREAD));
   10ef8:	4608      	mov	r0, r1
{
   10efa:	460c      	mov	r4, r1
	Z_OOPS(Z_SYSCALL_OBJ_INIT(thread, K_OBJ_THREAD));
   10efc:	f7ef f980 	bl	200 <z_object_find>
	ret = z_object_validate(ko, otype, init);
   10f00:	2201      	movs	r2, #1
   10f02:	2109      	movs	r1, #9
   10f04:	4607      	mov	r7, r0
   10f06:	f000 f929 	bl	1115c <z_object_validate>
	if (ret != 0) {
   10f0a:	4606      	mov	r6, r0
   10f0c:	b188      	cbz	r0, 10f32 <z_hdlr_k_object_access_grant+0x3e>
		z_dump_object_error(ret, obj, ko, otype);
   10f0e:	4621      	mov	r1, r4
   10f10:	2309      	movs	r3, #9
   10f12:	463a      	mov	r2, r7
   10f14:	f000 f8d2 	bl	110bc <z_dump_object_error>
   10f18:	490b      	ldr	r1, [pc, #44]	; (10f48 <z_hdlr_k_object_access_grant+0x54>)
   10f1a:	480c      	ldr	r0, [pc, #48]	; (10f4c <z_hdlr_k_object_access_grant+0x58>)
   10f1c:	f002 faaf 	bl	1347e <printk>
	ko = validate_any_object((void *)object);
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(ko != NULL, "object %p access denied",
   10f20:	9808      	ldr	r0, [sp, #32]
   10f22:	f004 f800 	bl	14f26 <z_arch_syscall_oops>
   10f26:	462a      	mov	r2, r5
   10f28:	4907      	ldr	r1, [pc, #28]	; (10f48 <z_hdlr_k_object_access_grant+0x54>)
   10f2a:	4809      	ldr	r0, [pc, #36]	; (10f50 <z_hdlr_k_object_access_grant+0x5c>)
   10f2c:	f002 faa7 	bl	1347e <printk>
   10f30:	e7f6      	b.n	10f20 <z_hdlr_k_object_access_grant+0x2c>
	ko = validate_any_object((void *)object);
   10f32:	4628      	mov	r0, r5
   10f34:	f007 fe2f 	bl	18b96 <validate_any_object>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(ko != NULL, "object %p access denied",
   10f38:	2800      	cmp	r0, #0
   10f3a:	d0f4      	beq.n	10f26 <z_hdlr_k_object_access_grant+0x32>
				    (void *)object));
	z_thread_perms_set(ko, (struct k_thread *)thread);
   10f3c:	4621      	mov	r1, r4
   10f3e:	f007 fe7e 	bl	18c3e <z_thread_perms_set>

	return 0;
}
   10f42:	4630      	mov	r0, r6
   10f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10f46:	bf00      	nop
   10f48:	0001c2f5 	.word	0x0001c2f5
   10f4c:	0001ba44 	.word	0x0001ba44
   10f50:	0001c340 	.word	0x0001c340

00010f54 <z_hdlr_k_object_release>:

Z_SYSCALL_HANDLER(k_object_release, object)
{
   10f54:	b510      	push	{r4, lr}
   10f56:	4604      	mov	r4, r0
	struct _k_object *ko;

	ko = validate_any_object((void *)object);
   10f58:	f007 fe1d 	bl	18b96 <validate_any_object>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(ko != NULL, "object %p access denied",
   10f5c:	b938      	cbnz	r0, 10f6e <z_hdlr_k_object_release+0x1a>
   10f5e:	4807      	ldr	r0, [pc, #28]	; (10f7c <z_hdlr_k_object_release+0x28>)
   10f60:	4907      	ldr	r1, [pc, #28]	; (10f80 <z_hdlr_k_object_release+0x2c>)
   10f62:	4622      	mov	r2, r4
   10f64:	f002 fa8b 	bl	1347e <printk>
   10f68:	9804      	ldr	r0, [sp, #16]
   10f6a:	f003 ffdc 	bl	14f26 <z_arch_syscall_oops>
				    (void *)object));
	z_thread_perms_clear(ko, _current);
   10f6e:	4b05      	ldr	r3, [pc, #20]	; (10f84 <z_hdlr_k_object_release+0x30>)
   10f70:	6899      	ldr	r1, [r3, #8]
   10f72:	f007 fe77 	bl	18c64 <z_thread_perms_clear>

	return 0;
}
   10f76:	2000      	movs	r0, #0
   10f78:	bd10      	pop	{r4, pc}
   10f7a:	bf00      	nop
   10f7c:	0001c340 	.word	0x0001c340
   10f80:	0001c312 	.word	0x0001c312
   10f84:	200057f0 	.word	0x200057f0

00010f88 <z_hdlr_k_object_alloc>:

Z_SYSCALL_HANDLER(k_object_alloc, otype)
{
   10f88:	b508      	push	{r3, lr}
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(otype > K_OBJ_ANY && otype < K_OBJ_LAST &&
   10f8a:	1e43      	subs	r3, r0, #1
   10f8c:	2b1e      	cmp	r3, #30
{
   10f8e:	4602      	mov	r2, r0
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(otype > K_OBJ_ANY && otype < K_OBJ_LAST &&
   10f90:	d801      	bhi.n	10f96 <z_hdlr_k_object_alloc+0xe>
   10f92:	280b      	cmp	r0, #11
   10f94:	d106      	bne.n	10fa4 <z_hdlr_k_object_alloc+0x1c>
   10f96:	4804      	ldr	r0, [pc, #16]	; (10fa8 <z_hdlr_k_object_alloc+0x20>)
   10f98:	4904      	ldr	r1, [pc, #16]	; (10fac <z_hdlr_k_object_alloc+0x24>)
   10f9a:	f002 fa70 	bl	1347e <printk>
   10f9e:	9804      	ldr	r0, [sp, #16]
   10fa0:	f003 ffc1 	bl	14f26 <z_arch_syscall_oops>
				    otype != K_OBJ__THREAD_STACK_ELEMENT,
				    "bad object type %d requested", otype));

	return (u32_t)z_impl_k_object_alloc(otype);
}
   10fa4:	2000      	movs	r0, #0
   10fa6:	bd08      	pop	{r3, pc}
   10fa8:	0001c372 	.word	0x0001c372
   10fac:	0001c32a 	.word	0x0001c32a

00010fb0 <z_hdlr_adc_channel_setup>:
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
}

static u32_t handler_no_syscall(u32_t arg1, u32_t arg2, u32_t arg3,
				 u32_t arg4, u32_t arg5, u32_t arg6, void *ssf)
{
   10fb0:	b508      	push	{r3, lr}
	printk("Unimplemented system call\n");
   10fb2:	4803      	ldr	r0, [pc, #12]	; (10fc0 <z_hdlr_adc_channel_setup+0x10>)
   10fb4:	f002 fa63 	bl	1347e <printk>
	z_arch_syscall_oops(ssf);
   10fb8:	9804      	ldr	r0, [sp, #16]
   10fba:	f003 ffb4 	bl	14f26 <z_arch_syscall_oops>
   10fbe:	bf00      	nop
   10fc0:	0001c3e9 	.word	0x0001c3e9

00010fc4 <handler_bad_syscall>:
{
   10fc4:	b508      	push	{r3, lr}
	printk("Bad system call id %u invoked\n", bad_id);
   10fc6:	4601      	mov	r1, r0
   10fc8:	4802      	ldr	r0, [pc, #8]	; (10fd4 <handler_bad_syscall+0x10>)
   10fca:	f002 fa58 	bl	1347e <printk>
	z_arch_syscall_oops(ssf);
   10fce:	9804      	ldr	r0, [sp, #16]
   10fd0:	f003 ffa9 	bl	14f26 <z_arch_syscall_oops>
   10fd4:	0001c3ca 	.word	0x0001c3ca

00010fd8 <user_copy>:
{
   10fd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10fda:	4606      	mov	r6, r0
   10fdc:	460d      	mov	r5, r1
   10fde:	4614      	mov	r4, r2
	__asm__ volatile(
   10fe0:	f04f 0220 	mov.w	r2, #32
   10fe4:	f3ef 8711 	mrs	r7, BASEPRI
   10fe8:	f382 8811 	msr	BASEPRI, r2
   10fec:	f3bf 8f6f 	isb	sy
	if (to_user ? Z_SYSCALL_MEMORY_WRITE(dst, size) :
   10ff0:	b19b      	cbz	r3, 1101a <user_copy+0x42>
   10ff2:	2201      	movs	r2, #1
   10ff4:	4621      	mov	r1, r4
   10ff6:	f003 ffbd 	bl	14f74 <z_arch_buffer_validate>
   10ffa:	b1c8      	cbz	r0, 11030 <user_copy+0x58>
   10ffc:	4b10      	ldr	r3, [pc, #64]	; (11040 <user_copy+0x68>)
   10ffe:	9300      	str	r3, [sp, #0]
   11000:	4632      	mov	r2, r6
   11002:	4623      	mov	r3, r4
			Z_SYSCALL_MEMORY_READ(src, size)) {
   11004:	480f      	ldr	r0, [pc, #60]	; (11044 <user_copy+0x6c>)
   11006:	4910      	ldr	r1, [pc, #64]	; (11048 <user_copy+0x70>)
   11008:	f002 fa39 	bl	1347e <printk>
	int ret = EFAULT;
   1100c:	200e      	movs	r0, #14
	__asm__ volatile(
   1100e:	f387 8811 	msr	BASEPRI, r7
   11012:	f3bf 8f6f 	isb	sy
}
   11016:	b003      	add	sp, #12
   11018:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Z_SYSCALL_MEMORY_READ(src, size)) {
   1101a:	461a      	mov	r2, r3
   1101c:	4621      	mov	r1, r4
   1101e:	4628      	mov	r0, r5
   11020:	f003 ffa8 	bl	14f74 <z_arch_buffer_validate>
   11024:	b120      	cbz	r0, 11030 <user_copy+0x58>
   11026:	4b09      	ldr	r3, [pc, #36]	; (1104c <user_copy+0x74>)
   11028:	9300      	str	r3, [sp, #0]
   1102a:	462a      	mov	r2, r5
   1102c:	4623      	mov	r3, r4
   1102e:	e7e9      	b.n	11004 <user_copy+0x2c>
   11030:	4622      	mov	r2, r4
   11032:	4629      	mov	r1, r5
   11034:	4630      	mov	r0, r6
   11036:	f7f1 f9a1 	bl	237c <memcpy>
	ret = 0;
   1103a:	2000      	movs	r0, #0
   1103c:	e7e7      	b.n	1100e <user_copy+0x36>
   1103e:	bf00      	nop
   11040:	0001a21f 	.word	0x0001a21f
   11044:	0001a1c4 	.word	0x0001a1c4
   11048:	0001c3c0 	.word	0x0001c3c0
   1104c:	0001b8ef 	.word	0x0001b8ef

00011050 <otype_to_str>:
	switch (otype) {
   11050:	3801      	subs	r0, #1
   11052:	b2c0      	uxtb	r0, r0
   11054:	281e      	cmp	r0, #30
   11056:	bf9a      	itte	ls
   11058:	4b02      	ldrls	r3, [pc, #8]	; (11064 <otype_to_str+0x14>)
   1105a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
{
   1105e:	4802      	ldrhi	r0, [pc, #8]	; (11068 <otype_to_str+0x18>)
}
   11060:	4770      	bx	lr
   11062:	bf00      	nop
   11064:	000193cc 	.word	0x000193cc
   11068:	0001c404 	.word	0x0001c404

0001106c <z_thread_perms_inherit>:
{
   1106c:	b530      	push	{r4, r5, lr}
   1106e:	b085      	sub	sp, #20
   11070:	460d      	mov	r5, r1
   11072:	4604      	mov	r4, r0
		thread_index_get(parent),
   11074:	f007 fdbd 	bl	18bf2 <thread_index_get>
	struct perm_ctx ctx = {
   11078:	9001      	str	r0, [sp, #4]
		thread_index_get(child),
   1107a:	4628      	mov	r0, r5
   1107c:	f007 fdb9 	bl	18bf2 <thread_index_get>
	if ((ctx.parent_id != -1) && (ctx.child_id != -1)) {
   11080:	9b01      	ldr	r3, [sp, #4]
   11082:	3301      	adds	r3, #1
	struct perm_ctx ctx = {
   11084:	e9cd 0402 	strd	r0, r4, [sp, #8]
	if ((ctx.parent_id != -1) && (ctx.child_id != -1)) {
   11088:	d005      	beq.n	11096 <z_thread_perms_inherit+0x2a>
   1108a:	3001      	adds	r0, #1
   1108c:	d003      	beq.n	11096 <z_thread_perms_inherit+0x2a>
		z_object_wordlist_foreach(wordlist_cb, &ctx);
   1108e:	a901      	add	r1, sp, #4
   11090:	4802      	ldr	r0, [pc, #8]	; (1109c <z_thread_perms_inherit+0x30>)
   11092:	f7ef f8cf 	bl	234 <z_object_gperf_wordlist_foreach>
}
   11096:	b005      	add	sp, #20
   11098:	bd30      	pop	{r4, r5, pc}
   1109a:	bf00      	nop
   1109c:	00018bbb 	.word	0x00018bbb

000110a0 <z_thread_perms_all_clear>:
{
   110a0:	b508      	push	{r3, lr}
	int index = thread_index_get(thread);
   110a2:	f007 fda6 	bl	18bf2 <thread_index_get>
	if (index != -1) {
   110a6:	1c43      	adds	r3, r0, #1
	int index = thread_index_get(thread);
   110a8:	4601      	mov	r1, r0
	if (index != -1) {
   110aa:	d004      	beq.n	110b6 <z_thread_perms_all_clear+0x16>
		z_object_wordlist_foreach(clear_perms_cb, (void *)index);
   110ac:	4802      	ldr	r0, [pc, #8]	; (110b8 <z_thread_perms_all_clear+0x18>)
}
   110ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_object_wordlist_foreach(clear_perms_cb, (void *)index);
   110b2:	f7ef b8bf 	b.w	234 <z_object_gperf_wordlist_foreach>
}
   110b6:	bd08      	pop	{r3, pc}
   110b8:	00018c3b 	.word	0x00018c3b

000110bc <z_dump_object_error>:
{
   110bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   110be:	4605      	mov	r5, r0
	switch (retval) {
   110c0:	f115 0f16 	cmn.w	r5, #22
{
   110c4:	4614      	mov	r4, r2
   110c6:	4618      	mov	r0, r3
	switch (retval) {
   110c8:	d02f      	beq.n	1112a <z_dump_object_error+0x6e>
   110ca:	dc03      	bgt.n	110d4 <z_dump_object_error+0x18>
   110cc:	3570      	adds	r5, #112	; 0x70
   110ce:	d032      	beq.n	11136 <z_dump_object_error+0x7a>
}
   110d0:	b002      	add	sp, #8
   110d2:	bd70      	pop	{r4, r5, r6, pc}
	switch (retval) {
   110d4:	f115 0f09 	cmn.w	r5, #9
   110d8:	d01e      	beq.n	11118 <z_dump_object_error+0x5c>
   110da:	3501      	adds	r5, #1
   110dc:	d1f8      	bne.n	110d0 <z_dump_object_error+0x14>
	int index = thread_index_get(_current);
   110de:	4d18      	ldr	r5, [pc, #96]	; (11140 <z_dump_object_error+0x84>)
   110e0:	68a8      	ldr	r0, [r5, #8]
   110e2:	f007 fd86 	bl	18bf2 <thread_index_get>
   110e6:	4602      	mov	r2, r0
	printk("thread %p (%d) does not have permission on %s %p [",
   110e8:	79a0      	ldrb	r0, [r4, #6]
   110ea:	68a9      	ldr	r1, [r5, #8]
   110ec:	f7ff ffb0 	bl	11050 <otype_to_str>
   110f0:	6823      	ldr	r3, [r4, #0]
   110f2:	9300      	str	r3, [sp, #0]
   110f4:	4603      	mov	r3, r0
   110f6:	4813      	ldr	r0, [pc, #76]	; (11144 <z_dump_object_error+0x88>)
   110f8:	f002 f9c1 	bl	1347e <printk>
		printk("%02x", ko->perms[i]);
   110fc:	7961      	ldrb	r1, [r4, #5]
   110fe:	4812      	ldr	r0, [pc, #72]	; (11148 <z_dump_object_error+0x8c>)
   11100:	f002 f9bd 	bl	1347e <printk>
   11104:	7921      	ldrb	r1, [r4, #4]
   11106:	4810      	ldr	r0, [pc, #64]	; (11148 <z_dump_object_error+0x8c>)
   11108:	f002 f9b9 	bl	1347e <printk>
	printk("]\n");
   1110c:	480f      	ldr	r0, [pc, #60]	; (1114c <z_dump_object_error+0x90>)
}
   1110e:	b002      	add	sp, #8
   11110:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printk("]\n");
   11114:	f002 b9b3 	b.w	1347e <printk>
		printk("%p is not a valid %s\n", obj, otype_to_str(otype));
   11118:	f7ff ff9a 	bl	11050 <otype_to_str>
   1111c:	4602      	mov	r2, r0
   1111e:	480c      	ldr	r0, [pc, #48]	; (11150 <z_dump_object_error+0x94>)
}
   11120:	b002      	add	sp, #8
   11122:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("%p %s in use\n", obj, otype_to_str(otype));
   11126:	f002 b9aa 	b.w	1347e <printk>
		printk("%p used before initialization\n", obj);
   1112a:	480a      	ldr	r0, [pc, #40]	; (11154 <z_dump_object_error+0x98>)
}
   1112c:	b002      	add	sp, #8
   1112e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("%p used before initialization\n", obj);
   11132:	f002 b9a4 	b.w	1347e <printk>
		printk("%p %s in use\n", obj, otype_to_str(otype));
   11136:	f7ff ff8b 	bl	11050 <otype_to_str>
   1113a:	4602      	mov	r2, r0
   1113c:	4806      	ldr	r0, [pc, #24]	; (11158 <z_dump_object_error+0x9c>)
   1113e:	e7ef      	b.n	11120 <z_dump_object_error+0x64>
   11140:	200057f0 	.word	0x200057f0
   11144:	0001c57e 	.word	0x0001c57e
   11148:	0001a134 	.word	0x0001a134
   1114c:	000197bb 	.word	0x000197bb
   11150:	0001c568 	.word	0x0001c568
   11154:	0001c5b1 	.word	0x0001c5b1
   11158:	0001c5d0 	.word	0x0001c5d0

0001115c <z_object_validate>:
{
   1115c:	b538      	push	{r3, r4, r5, lr}
   1115e:	4615      	mov	r5, r2
	if (unlikely((ko == NULL) ||
   11160:	4604      	mov	r4, r0
   11162:	b368      	cbz	r0, 111c0 <z_object_validate+0x64>
   11164:	b111      	cbz	r1, 1116c <z_object_validate+0x10>
   11166:	7983      	ldrb	r3, [r0, #6]
   11168:	428b      	cmp	r3, r1
   1116a:	d129      	bne.n	111c0 <z_object_validate+0x64>
	if ((ko->flags & K_OBJ_FLAG_PUBLIC) != 0U) {
   1116c:	79e3      	ldrb	r3, [r4, #7]
   1116e:	079a      	lsls	r2, r3, #30
   11170:	d50a      	bpl.n	11188 <z_object_validate+0x2c>
	if (likely(init == _OBJ_INIT_TRUE)) {
   11172:	2d00      	cmp	r5, #0
   11174:	d01c      	beq.n	111b0 <z_object_validate+0x54>
	} else if (init < _OBJ_INIT_TRUE) { /* _OBJ_INIT_FALSE case */
   11176:	da26      	bge.n	111c6 <z_object_validate+0x6a>
		if (unlikely((ko->flags & K_OBJ_FLAG_INITIALIZED) != 0U)) {
   11178:	79e3      	ldrb	r3, [r4, #7]
			return -EADDRINUSE;
   1117a:	f013 0f01 	tst.w	r3, #1
   1117e:	bf0c      	ite	eq
   11180:	2000      	moveq	r0, #0
   11182:	f06f 006f 	mvnne.w	r0, #111	; 0x6f
   11186:	e01a      	b.n	111be <z_object_validate+0x62>
	index = thread_index_get(_current);
   11188:	4b10      	ldr	r3, [pc, #64]	; (111cc <z_object_validate+0x70>)
   1118a:	6898      	ldr	r0, [r3, #8]
   1118c:	f007 fd31 	bl	18bf2 <thread_index_get>
	if (index != -1) {
   11190:	1c43      	adds	r3, r0, #1
   11192:	d014      	beq.n	111be <z_object_validate+0x62>
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   11194:	0941      	lsrs	r1, r0, #5
		return sys_bitfield_test_bit((mem_addr_t)&ko->perms, index);
   11196:	1d23      	adds	r3, r4, #4
   11198:	f000 001f 	and.w	r0, r0, #31
	u32_t temp = *(volatile u32_t *)addr;
   1119c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	return temp & BIT(bit);
   111a0:	2301      	movs	r3, #1
   111a2:	fa03 f000 	lsl.w	r0, r3, r0
	if (unlikely(thread_perms_test(ko) == 0)) {
   111a6:	4208      	tst	r0, r1
   111a8:	d1e3      	bne.n	11172 <z_object_validate+0x16>
		return -EPERM;
   111aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   111ae:	e006      	b.n	111be <z_object_validate+0x62>
		if (unlikely((ko->flags & K_OBJ_FLAG_INITIALIZED) == 0U)) {
   111b0:	79e3      	ldrb	r3, [r4, #7]
			return -EINVAL;
   111b2:	f013 0f01 	tst.w	r3, #1
   111b6:	bf14      	ite	ne
   111b8:	2000      	movne	r0, #0
   111ba:	f06f 0015 	mvneq.w	r0, #21
}
   111be:	bd38      	pop	{r3, r4, r5, pc}
		return -EBADF;
   111c0:	f06f 0008 	mvn.w	r0, #8
   111c4:	e7fb      	b.n	111be <z_object_validate+0x62>
	return 0;
   111c6:	2000      	movs	r0, #0
   111c8:	e7f9      	b.n	111be <z_object_validate+0x62>
   111ca:	bf00      	nop
   111cc:	200057f0 	.word	0x200057f0

000111d0 <z_user_alloc_from_copy>:
{
   111d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   111d2:	4606      	mov	r6, r0
   111d4:	460c      	mov	r4, r1
	__asm__ volatile(
   111d6:	f04f 0320 	mov.w	r3, #32
   111da:	f3ef 8711 	mrs	r7, BASEPRI
   111de:	f383 8811 	msr	BASEPRI, r3
   111e2:	f3bf 8f6f 	isb	sy
	if (Z_SYSCALL_MEMORY_READ(src, size)) {
   111e6:	2200      	movs	r2, #0
   111e8:	f003 fec4 	bl	14f74 <z_arch_buffer_validate>
   111ec:	b1a0      	cbz	r0, 11218 <z_user_alloc_from_copy+0x48>
   111ee:	4b10      	ldr	r3, [pc, #64]	; (11230 <z_user_alloc_from_copy+0x60>)
   111f0:	9300      	str	r3, [sp, #0]
   111f2:	4632      	mov	r2, r6
   111f4:	4623      	mov	r3, r4
   111f6:	490f      	ldr	r1, [pc, #60]	; (11234 <z_user_alloc_from_copy+0x64>)
   111f8:	480f      	ldr	r0, [pc, #60]	; (11238 <z_user_alloc_from_copy+0x68>)
   111fa:	f002 f940 	bl	1347e <printk>
	void *dst = NULL;
   111fe:	2500      	movs	r5, #0
	__asm__ volatile(
   11200:	f387 8811 	msr	BASEPRI, r7
   11204:	f3bf 8f6f 	isb	sy
}
   11208:	4628      	mov	r0, r5
   1120a:	b003      	add	sp, #12
   1120c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1120e:	4622      	mov	r2, r4
   11210:	4631      	mov	r1, r6
   11212:	f7f1 f8b3 	bl	237c <memcpy>
   11216:	e7f3      	b.n	11200 <z_user_alloc_from_copy+0x30>
	dst = z_thread_malloc(size);
   11218:	4620      	mov	r0, r4
   1121a:	f7fe f99d 	bl	f558 <z_thread_malloc>
	if (dst == NULL) {
   1121e:	4605      	mov	r5, r0
   11220:	2800      	cmp	r0, #0
   11222:	d1f4      	bne.n	1120e <z_user_alloc_from_copy+0x3e>
		printk("out of thread resource pool memory (%zu)", size);
   11224:	4621      	mov	r1, r4
   11226:	4805      	ldr	r0, [pc, #20]	; (1123c <z_user_alloc_from_copy+0x6c>)
   11228:	f002 f929 	bl	1347e <printk>
		goto out_err;
   1122c:	e7e8      	b.n	11200 <z_user_alloc_from_copy+0x30>
   1122e:	bf00      	nop
   11230:	0001b8ef 	.word	0x0001b8ef
   11234:	0001c3a9 	.word	0x0001c3a9
   11238:	0001a1c4 	.word	0x0001a1c4
   1123c:	0001c5de 	.word	0x0001c5de

00011240 <z_user_string_copy>:
{
   11240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11242:	4607      	mov	r7, r0
   11244:	460c      	mov	r4, r1
   11246:	4615      	mov	r5, r2
	__asm__ volatile(
   11248:	f04f 0320 	mov.w	r3, #32
   1124c:	f3ef 8611 	mrs	r6, BASEPRI
   11250:	f383 8811 	msr	BASEPRI, r3
   11254:	f3bf 8f6f 	isb	sy
	return z_arch_user_string_nlen(src, maxlen, err);
   11258:	aa01      	add	r2, sp, #4
   1125a:	4629      	mov	r1, r5
   1125c:	4620      	mov	r0, r4
   1125e:	f7fa f8af 	bl	b3c0 <z_arch_user_string_nlen>
	if (err != 0) {
   11262:	9b01      	ldr	r3, [sp, #4]
   11264:	b9cb      	cbnz	r3, 1129a <z_user_string_copy+0x5a>
	if (actual_len == maxlen) {
   11266:	4285      	cmp	r5, r0
   11268:	d106      	bne.n	11278 <z_user_string_copy+0x38>
		printk("string too long %p (%lu)\n", src, actual_len);
   1126a:	462a      	mov	r2, r5
   1126c:	4621      	mov	r1, r4
   1126e:	480c      	ldr	r0, [pc, #48]	; (112a0 <z_user_string_copy+0x60>)
   11270:	f002 f905 	bl	1347e <printk>
		ret = EINVAL;
   11274:	2016      	movs	r0, #22
		goto out;
   11276:	e006      	b.n	11286 <z_user_string_copy+0x46>
	if (__builtin_uaddl_overflow(actual_len, 1, &actual_len)) {
   11278:	2201      	movs	r2, #1
   1127a:	1882      	adds	r2, r0, r2
   1127c:	d209      	bcs.n	11292 <z_user_string_copy+0x52>
	ret = z_user_from_copy(dst, src, actual_len);
   1127e:	4621      	mov	r1, r4
   11280:	4638      	mov	r0, r7
   11282:	f007 fd38 	bl	18cf6 <z_user_from_copy>
	__asm__ volatile(
   11286:	f386 8811 	msr	BASEPRI, r6
   1128a:	f3bf 8f6f 	isb	sy
}
   1128e:	b003      	add	sp, #12
   11290:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printk("overflow\n");
   11292:	4804      	ldr	r0, [pc, #16]	; (112a4 <z_user_string_copy+0x64>)
   11294:	f002 f8f3 	bl	1347e <printk>
   11298:	e7ec      	b.n	11274 <z_user_string_copy+0x34>
		ret = EFAULT;
   1129a:	200e      	movs	r0, #14
   1129c:	e7f3      	b.n	11286 <z_user_string_copy+0x46>
   1129e:	bf00      	nop
   112a0:	0001c607 	.word	0x0001c607
   112a4:	0001c621 	.word	0x0001c621

000112a8 <z_app_shmem_bss_zero>:
{
   112a8:	b538      	push	{r3, r4, r5, lr}
	region = (struct z_app_region *)&__app_shmem_regions_start;
   112aa:	4c06      	ldr	r4, [pc, #24]	; (112c4 <z_app_shmem_bss_zero+0x1c>)
	for ( ; region < end; region++) {
   112ac:	4d06      	ldr	r5, [pc, #24]	; (112c8 <z_app_shmem_bss_zero+0x20>)
   112ae:	42ac      	cmp	r4, r5
   112b0:	d300      	bcc.n	112b4 <z_app_shmem_bss_zero+0xc>
}
   112b2:	bd38      	pop	{r3, r4, r5, pc}
__ssp_bos_icheck3(memset, void *, int)
   112b4:	6862      	ldr	r2, [r4, #4]
   112b6:	6820      	ldr	r0, [r4, #0]
   112b8:	2100      	movs	r1, #0
   112ba:	f7f1 f89a 	bl	23f2 <memset>
	for ( ; region < end; region++) {
   112be:	3408      	adds	r4, #8
   112c0:	e7f5      	b.n	112ae <z_app_shmem_bss_zero+0x6>
   112c2:	bf00      	nop
   112c4:	00018e8c 	.word	0x00018e8c
   112c8:	00018e94 	.word	0x00018e94

000112cc <run_fixed_patch_point_test>:
static void run_fixed_patch_point_test() {
   112cc:	b508      	push	{r3, lr}
	load_local_fixed_patch(2);
   112ce:	2002      	movs	r0, #2
   112d0:	f7f2 f92e 	bl	3530 <load_local_fixed_patch>
}
   112d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	test_fixed_patch_point();
   112d8:	f7f2 b9ea 	b.w	36b0 <test_fixed_patch_point>

000112dc <run_eva_test>:
	run_ebpf_test();
   112dc:	f7f2 b902 	b.w	34e4 <run_ebpf_test>

000112e0 <reset_patch>:
static void reset_patch() {
   112e0:	b508      	push	{r3, lr}
	show_hw_bkpt();
   112e2:	f7f1 fbef 	bl	2ac4 <show_hw_bkpt>
}
   112e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	clear_all_hw_bkpt();
   112ea:	f7f1 bd05 	b.w	2cf8 <clear_all_hw_bkpt>

000112ee <test_patch_trigger>:
	trigger_debugmon();
   112ee:	f000 b8cd 	b.w	1148c <trigger_debugmon>

000112f2 <shell_echo_str>:
static void shell_echo_str(char *str) {
   112f2:	b538      	push	{r3, r4, r5, lr}
   112f4:	1e45      	subs	r5, r0, #1
	for (const char *c = str; *c != '\0'; c++) {
   112f6:	f815 4f01 	ldrb.w	r4, [r5, #1]!
   112fa:	b904      	cbnz	r4, 112fe <shell_echo_str+0xc>
}
   112fc:	bd38      	pop	{r3, r4, r5, pc}
	if (c == '\n') {
   112fe:	2c0a      	cmp	r4, #10
   11300:	d102      	bne.n	11308 <shell_echo_str+0x16>
		shell_put_char('\r');
   11302:	200d      	movs	r0, #13
   11304:	f000 f809 	bl	1131a <shell_put_char>
		shell_put_char(c);
   11308:	4620      	mov	r0, r4
   1130a:	f000 f806 	bl	1131a <shell_put_char>
   1130e:	e7f2      	b.n	112f6 <shell_echo_str+0x4>

00011310 <shell_get_char>:
#include <misc/printk.h>
#include <console.h>

#pragma message("USE ZEPHYR_OS print-----------------------")

char shell_get_char() {
   11310:	b508      	push	{r3, lr}
	return console_getchar();
   11312:	f7f6 f9c1 	bl	7698 <console_getchar>
}
   11316:	b2c0      	uxtb	r0, r0
   11318:	bd08      	pop	{r3, pc}

0001131a <shell_put_char>:

void shell_put_char(char c) {
	console_putchar(c);
   1131a:	f7f6 b9af 	b.w	767c <console_putchar>

0001131e <log_print_porting>:
}

void log_print_porting(const char *fmt, va_list *args) {
	vprintk(fmt, *args);
   1131e:	6809      	ldr	r1, [r1, #0]
   11320:	f7f3 bf78 	b.w	5214 <vprintk>

00011324 <FPB_Handler1>:
DECLARE_FPB_HANDLE(1);
   11324:	e92d 500f 	stmdb	sp!, {r0, r1, r2, r3, ip, lr}
   11328:	f01e 0f04 	tst.w	lr, #4
   1132c:	bf0c      	ite	eq
   1132e:	f3ef 8008 	mrseq	r0, MSP
   11332:	f3ef 8009 	mrsne	r0, PSP
   11336:	2101      	movs	r1, #1
   11338:	f000 f871 	bl	1141e <leave_fpb_bpkt>
   1133c:	e8bd 500f 	ldmia.w	sp!, {r0, r1, r2, r3, ip, lr}
   11340:	4770      	bx	lr

00011342 <FPB_Handler2>:
DECLARE_FPB_HANDLE(2);
   11342:	e92d 500f 	stmdb	sp!, {r0, r1, r2, r3, ip, lr}
   11346:	f01e 0f04 	tst.w	lr, #4
   1134a:	bf0c      	ite	eq
   1134c:	f3ef 8008 	mrseq	r0, MSP
   11350:	f3ef 8009 	mrsne	r0, PSP
   11354:	2102      	movs	r1, #2
   11356:	f000 f862 	bl	1141e <leave_fpb_bpkt>
   1135a:	e8bd 500f 	ldmia.w	sp!, {r0, r1, r2, r3, ip, lr}
   1135e:	4770      	bx	lr

00011360 <FPB_Handler3>:
DECLARE_FPB_HANDLE(3);
   11360:	e92d 500f 	stmdb	sp!, {r0, r1, r2, r3, ip, lr}
   11364:	f01e 0f04 	tst.w	lr, #4
   11368:	bf0c      	ite	eq
   1136a:	f3ef 8008 	mrseq	r0, MSP
   1136e:	f3ef 8009 	mrsne	r0, PSP
   11372:	2103      	movs	r1, #3
   11374:	f000 f853 	bl	1141e <leave_fpb_bpkt>
   11378:	e8bd 500f 	ldmia.w	sp!, {r0, r1, r2, r3, ip, lr}
   1137c:	4770      	bx	lr

0001137e <FPB_Handler4>:
DECLARE_FPB_HANDLE(4);
   1137e:	e92d 500f 	stmdb	sp!, {r0, r1, r2, r3, ip, lr}
   11382:	f01e 0f04 	tst.w	lr, #4
   11386:	bf0c      	ite	eq
   11388:	f3ef 8008 	mrseq	r0, MSP
   1138c:	f3ef 8009 	mrsne	r0, PSP
   11390:	2104      	movs	r1, #4
   11392:	f000 f844 	bl	1141e <leave_fpb_bpkt>
   11396:	e8bd 500f 	ldmia.w	sp!, {r0, r1, r2, r3, ip, lr}
   1139a:	4770      	bx	lr

0001139c <FPB_Handler5>:
	__asm__("PUSH {r0-r3, r12, lr}");
   1139c:	e92d 500f 	stmdb	sp!, {r0, r1, r2, r3, ip, lr}
	__asm__("BL fpb_enable_callback");
   113a0:	f7f1 fcf2 	bl	2d88 <fpb_enable_callback>
	__asm__("MOV r5, r0");
   113a4:	4605      	mov	r5, r0
	__asm__("POP {r0-r3, r12, lr}");
   113a6:	e8bd 500f 	ldmia.w	sp!, {r0, r1, r2, r3, ip, lr}
	__asm__("MOV PC, r5");
   113aa:	46af      	mov	pc, r5
}
   113ac:	4770      	bx	lr

000113ae <calc_bpkt_addr>:
	uint32_t replace = (inst_addr & 0x2) == 0 ? 1 : 2;
   113ae:	f010 0f02 	tst.w	r0, #2
	uint32_t fp_comp = (inst_addr & ~0x3) | 0x1 | (replace << 30);
   113b2:	bf14      	ite	ne
   113b4:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
   113b8:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
   113bc:	f020 0003 	bic.w	r0, r0, #3
   113c0:	4303      	orrs	r3, r0
	uint32_t final_addr = fp_comp & 0x1FFFFFFC;
   113c2:	f023 4060 	bic.w	r0, r3, #3758096384	; 0xe0000000
	if (replace == 0x2) {
   113c6:	0f9b      	lsrs	r3, r3, #30
   113c8:	f020 0003 	bic.w	r0, r0, #3
   113cc:	2b02      	cmp	r3, #2
		final_addr |= 0x2;
   113ce:	bf08      	it	eq
   113d0:	f040 0002 	orreq.w	r0, r0, #2
}
   113d4:	4770      	bx	lr

000113d6 <calc_branch_instr>:
	uint32_t offset = (target_addr & (~0x1)) - (instr_addr & (~0x1)) - 4;
   113d6:	f020 0001 	bic.w	r0, r0, #1
   113da:	f021 0101 	bic.w	r1, r1, #1
   113de:	1a09      	subs	r1, r1, r0
   113e0:	3904      	subs	r1, #4
	uint8_t s  = (offset >> s_pos) & 0x01u;
   113e2:	0e0b      	lsrs	r3, r1, #24
	uint16_t lower_bl_instr =  ((0x02 << 14) | (j1 << 13) | (0x01 << 12) | (j2 << 11) | offset_11_lower);
   113e4:	ea83 50d1 	eor.w	r0, r3, r1, lsr #23
   113e8:	43c0      	mvns	r0, r0
   113ea:	f000 0201 	and.w	r2, r0, #1
   113ee:	ea83 5091 	eor.w	r0, r3, r1, lsr #22
   113f2:	43c0      	mvns	r0, r0
   113f4:	f000 0001 	and.w	r0, r0, #1
   113f8:	02c0      	lsls	r0, r0, #11
   113fa:	ea40 3042 	orr.w	r0, r0, r2, lsl #13
	uint16_t upper_bl_instr =  ((0x1E << 11) | (s << 10) | offset_10_upper);
   113fe:	f003 0301 	and.w	r3, r3, #1
	uint16_t offset_11_lower = ((offset) >> 1)  & 0x07FF; // UNCERTAIN about this!
   11402:	f3c1 024a 	ubfx	r2, r1, #1, #11
	uint16_t offset_10_upper = (offset >> 12) & 0x03FF;
   11406:	f3c1 3109 	ubfx	r1, r1, #12, #10
	uint16_t lower_bl_instr =  ((0x02 << 14) | (j1 << 13) | (0x01 << 12) | (j2 << 11) | offset_11_lower);
   1140a:	4310      	orrs	r0, r2
	uint16_t upper_bl_instr =  ((0x1E << 11) | (s << 10) | offset_10_upper);
   1140c:	ea41 2183 	orr.w	r1, r1, r3, lsl #10
	return ((upper_bl_instr << 16) | lower_bl_instr);
   11410:	f441 4170 	orr.w	r1, r1, #61440	; 0xf000
   11414:	f440 4010 	orr.w	r0, r0, #36864	; 0x9000
}
   11418:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   1141c:	4770      	bx	lr

0001141e <leave_fpb_bpkt>:
uint32_t leave_fpb_bpkt(stack_context *ctx, int bpkt_idx) {
   1141e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11422:	008c      	lsls	r4, r1, #2
   11424:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
   11428:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
   1142c:	4605      	mov	r5, r0
	uint32_t inst_addr = FPB->COMP[bpkt_idx] & (~0x1);
   1142e:	68a0      	ldr	r0, [r4, #8]
	ebpf_patch *patch = get_dynamic_patch_by_bpkt(inst_addr);
   11430:	f020 0001 	bic.w	r0, r0, #1
uint32_t leave_fpb_bpkt(stack_context *ctx, int bpkt_idx) {
   11434:	4688      	mov	r8, r1
	ebpf_patch *patch = get_dynamic_patch_by_bpkt(inst_addr);
   11436:	f7f2 fa39 	bl	38ac <get_dynamic_patch_by_bpkt>
	if (patch != NULL) {
   1143a:	4606      	mov	r6, r0
   1143c:	b1b8      	cbz	r0, 1146e <leave_fpb_bpkt+0x50>
		profile_start(EV1);
   1143e:	2001      	movs	r0, #1
   11440:	f7f2 facc 	bl	39dc <profile_start>
		ret = run_ebpf_filter(patch, args, sizeof(ebpf_args_frame));
   11444:	2210      	movs	r2, #16
   11446:	4630      	mov	r0, r6
   11448:	4629      	mov	r1, r5
   1144a:	f000 f82e 	bl	114aa <run_ebpf_filter>
   1144e:	4607      	mov	r7, r0
   11450:	460e      	mov	r6, r1
		profile_end(EV1);
   11452:	2001      	movs	r0, #1
   11454:	f7f2 facc 	bl	39f0 <profile_end>
		uint32_t ret_code = ret & 0x00000000ffffffff;
   11458:	4638      	mov	r0, r7
		if (op == FILTER_PASS) {
   1145a:	b92e      	cbnz	r6, 11468 <leave_fpb_bpkt+0x4a>
			fpb_disable_cur_inst(bpkt_idx);
   1145c:	4640      	mov	r0, r8
   1145e:	f7f1 fc6b 	bl	2d38 <fpb_disable_cur_inst>
			return FPB->COMP[bpkt_idx];
   11462:	68a0      	ldr	r0, [r4, #8]
}
   11464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (op == FILTER_DROP) {
   11468:	2e01      	cmp	r6, #1
   1146a:	d102      	bne.n	11472 <leave_fpb_bpkt+0x54>
			*(volatile uint32_t *) &(ctx->r0) = ret_code;
   1146c:	602f      	str	r7, [r5, #0]
	return ctx->lr;
   1146e:	6968      	ldr	r0, [r5, #20]
   11470:	e7f8      	b.n	11464 <leave_fpb_bpkt+0x46>
		} else if (op == FILTER_REDIRECT) { // redirect lr to other address
   11472:	2e02      	cmp	r6, #2
   11474:	d1fb      	bne.n	1146e <leave_fpb_bpkt+0x50>
   11476:	e7f5      	b.n	11464 <leave_fpb_bpkt+0x46>

00011478 <__debug_monitor>:
	__asm__ __volatile__("and r0, lr, #4");
   11478:	f00e 0004 	and.w	r0, lr, #4
	__asm__ __volatile__("cmp r0, #0");
   1147c:	2800      	cmp	r0, #0
	__asm__ __volatile__("ite eq");
   1147e:	bf0c      	ite	eq
	__asm__ __volatile__("mrseq r0, msp");
   11480:	f3ef 8008 	mrseq	r0, MSP
	__asm__ __volatile__("mrsne r0, psp");
   11484:	f3ef 8009 	mrsne	r0, PSP
	__asm__ __volatile__("b leave_debug_monitor");
   11488:	f7f1 bc98 	b.w	2dbc <leave_debug_monitor>

0001148c <trigger_debugmon>:

void trigger_debugmon(void) {
	//test_func();
	//RawBuggyFunc();
	test_freertos_cve();
   1148c:	f7f1 bafa 	b.w	2a84 <test_freertos_cve>

00011490 <fixed_patch_point_hanlder>:
	__asm volatile("PUSH {r0, lr}");
   11490:	b501      	push	{r0, lr}
	__asm volatile("MRS r0, CONTROL");
   11492:	f3ef 8014 	mrs	r0, CONTROL
	__asm volatile("TST r0, #2");
   11496:	f010 0f02 	tst.w	r0, #2
	__asm volatile("ITE EQ");
   1149a:	bf0c      	ite	eq
	__asm volatile("MRSEQ r0, MSP");
   1149c:	f3ef 8008 	mrseq	r0, MSP
	__asm volatile("MRSNE r0, PSP");
   114a0:	f3ef 8009 	mrsne	r0, PSP
	__asm volatile("BL dispatch_fixed_patch_point");
   114a4:	f7f2 f912 	bl	36cc <dispatch_fixed_patch_point>
	__asm volatile("POP {r0, pc}");
   114a8:	bd01      	pop	{r0, pc}

000114aa <run_ebpf_filter>:

uint64_t run_ebpf_filter(ebpf_patch *patch, void *args, int args_size) {
	if (patch->vm->use_jit) {
   114aa:	6840      	ldr	r0, [r0, #4]
   114ac:	7d03      	ldrb	r3, [r0, #20]
uint64_t run_ebpf_filter(ebpf_patch *patch, void *args, int args_size) {
   114ae:	b430      	push	{r4, r5}
   114b0:	460c      	mov	r4, r1
	if (patch->vm->use_jit) {
   114b2:	b123      	cbz	r3, 114be <run_ebpf_filter+0x14>
		// disable mpu
		// arm_core_mpu_disable();
		return patch->vm->jit_func(args, args_size);
   114b4:	68c3      	ldr	r3, [r0, #12]
   114b6:	b291      	uxth	r1, r2
   114b8:	4620      	mov	r0, r4
	} else {
		return ebpf_vm_exec(patch->vm, args, args_size);
	}
   114ba:	bc30      	pop	{r4, r5}
		return patch->vm->jit_func(args, args_size);
   114bc:	4718      	bx	r3
   114be:	bc30      	pop	{r4, r5}
		return ebpf_vm_exec(patch->vm, args, args_size);
   114c0:	f000 b88a 	b.w	115d8 <ebpf_vm_exec>

000114c4 <start_patch_service>:
// 	//pthread_join(task, NULL);
// 	return true;
// }
// #endif

bool start_patch_service() {
   114c4:	b508      	push	{r3, lr}
	init_patch_sys();
   114c6:	f7f2 f99f 	bl	3808 <init_patch_sys>
	// 	return false;
	// }

	// wait_for_patch();
	return false;
}
   114ca:	2000      	movs	r0, #0
   114cc:	bd08      	pop	{r3, pc}

000114ce <debug_log>:

#ifdef DEBUG

extern void log_print_porting(const char *fmt, va_list *args);

void debug_log(const char *fmt, ...) {
   114ce:	b40f      	push	{r0, r1, r2, r3}
   114d0:	b507      	push	{r0, r1, r2, lr}
   114d2:	ab04      	add	r3, sp, #16
	va_list args;
	va_start(args, fmt);
	log_print_porting(fmt, &args);
   114d4:	a901      	add	r1, sp, #4
void debug_log(const char *fmt, ...) {
   114d6:	f853 0b04 	ldr.w	r0, [r3], #4
	va_start(args, fmt);
   114da:	9301      	str	r3, [sp, #4]
	log_print_porting(fmt, &args);
   114dc:	f7ff ff1f 	bl	1131e <log_print_porting>
	va_end(args);
}
   114e0:	b003      	add	sp, #12
   114e2:	f85d eb04 	ldr.w	lr, [sp], #4
   114e6:	b004      	add	sp, #16
   114e8:	4770      	bx	lr

000114ea <str2int>:
void debug_log(const char *fmt, ...) {}
#endif // end DEBUG

int str2int(char *str) {
	int val = 0;
	for (const char *c = str; *c != '\0'; c++) {
   114ea:	1e42      	subs	r2, r0, #1
		val *= 10;
   114ec:	210a      	movs	r1, #10
	int val = 0;
   114ee:	2000      	movs	r0, #0
	for (const char *c = str; *c != '\0'; c++) {
   114f0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   114f4:	b903      	cbnz	r3, 114f8 <str2int+0xe>
		val += *c - '0';
	}
	return val;
}
   114f6:	4770      	bx	lr
		val += *c - '0';
   114f8:	3b30      	subs	r3, #48	; 0x30
   114fa:	fb01 3000 	mla	r0, r1, r0, r3
   114fe:	e7f7      	b.n	114f0 <str2int+0x6>

00011500 <calc_bpkt_pc>:
}


uint32_t calc_bpkt_pc(uint32_t inst_addr) {
#ifdef SYS_CORTEX_M4
	uint32_t inst_val = (uint32_t) (inst_addr & ~(0x1));
   11500:	f020 0001 	bic.w	r0, r0, #1
	uint16_t thumb_inst = *(uint16_t *) inst_val;
	// DEBUG_LOG("calc_bpkt_pc 0x%08x -> 0x%08x\n", inst_addr, thumb_inst);
	if ((uint32_t) thumb_inst >= 0xe800) {
   11504:	8803      	ldrh	r3, [r0, #0]
   11506:	f5b3 4f68 	cmp.w	r3, #59392	; 0xe800
		return inst_val + 4;
   1150a:	bf2c      	ite	cs
   1150c:	3004      	addcs	r0, #4
	} else {
		return inst_val + 2;
   1150e:	3002      	addcc	r0, #2
	}
#endif

	return inst_addr;
}
   11510:	4770      	bx	lr

00011512 <little_endian_16_bit>:
}


uint32_t little_endian_16_bit(uint32_t val) {
	return ((val & 0xFFFF0000) >> 16) | ((val & 0x0000FFFF) << 16);
}
   11512:	ea4f 4030 	mov.w	r0, r0, ror #16
   11516:	4770      	bx	lr

00011518 <ebpf_free>:
	my_os_free(rmem);
   11518:	f006 bee8 	b.w	182ec <k_free>

0001151c <iot_print_log>:
	DEBUG_LOG(str);
   1151c:	f7ff bfd7 	b.w	114ce <debug_log>

00011520 <bounds_check.isra.0>:
	}

	return ret;
}

bool bounds_check(const struct ebpf_vm *vm, void *addr, int size, const char *type, u16 cur_pc, void *mem, size_t mem_len, void *stack) {
   11520:	b570      	push	{r4, r5, r6, lr}
   11522:	9c05      	ldr	r4, [sp, #20]
	if (!vm->bounds_check_enabled) {
   11524:	b1a0      	cbz	r0, 11550 <bounds_check.isra.0+0x30>
		return true;
	}
	if (mem && (addr >= mem && ((u32*)addr + size) <= ((u32*)mem + mem_len))) {
   11526:	b143      	cbz	r3, 1153a <bounds_check.isra.0+0x1a>
   11528:	428b      	cmp	r3, r1
   1152a:	d806      	bhi.n	1153a <bounds_check.isra.0+0x1a>
   1152c:	9e04      	ldr	r6, [sp, #16]
   1152e:	eb01 0582 	add.w	r5, r1, r2, lsl #2
   11532:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   11536:	429d      	cmp	r5, r3
   11538:	d909      	bls.n	1154e <bounds_check.isra.0+0x2e>
		return true;
	}
	else if (addr >= stack && ((u32*)addr + size) <= ((u32*)stack + STACK_SIZE)) {
   1153a:	42a1      	cmp	r1, r4
   1153c:	d30a      	bcc.n	11554 <bounds_check.isra.0+0x34>
   1153e:	f504 7000 	add.w	r0, r4, #512	; 0x200
   11542:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   11546:	4288      	cmp	r0, r1
   11548:	bf34      	ite	cc
   1154a:	2000      	movcc	r0, #0
   1154c:	2001      	movcs	r0, #1
		//fprintf(stderr, "uBPF error: out of bounds memory %s at PC %u, addr %p, size %d\n", type, cur_pc, addr, size);
		//fprintf(stderr, "mem %p/%zd stack %p/%d\n", mem, mem_len, stack, STACK_SIZE);
		return false;
	}
	return true;
}
   1154e:	bd70      	pop	{r4, r5, r6, pc}
		return true;
   11550:	2001      	movs	r0, #1
   11552:	e7fc      	b.n	1154e <bounds_check.isra.0+0x2e>
		return false;
   11554:	2000      	movs	r0, #0
   11556:	e7fa      	b.n	1154e <bounds_check.isra.0+0x2e>

00011558 <ebpf_register>:
{
   11558:	b570      	push	{r4, r5, r6, lr}
   1155a:	461e      	mov	r6, r3
	if (vm->helper_func == NULL) {
   1155c:	6883      	ldr	r3, [r0, #8]
{
   1155e:	4604      	mov	r4, r0
   11560:	460d      	mov	r5, r1
	if (vm->helper_func == NULL) {
   11562:	b913      	cbnz	r3, 1156a <ebpf_register+0x12>
		vm->helper_func = use_default_helper_func();
   11564:	f7f2 faf6 	bl	3b54 <use_default_helper_func>
   11568:	60a0      	str	r0, [r4, #8]
	if (idx >= MAX_EXT_FUNCS) {
   1156a:	2d0b      	cmp	r5, #11
	vm->helper_func->ext_funcs[idx] = (ext_func)fn;
   1156c:	bf9f      	itttt	ls
   1156e:	68a3      	ldrls	r3, [r4, #8]
   11570:	681a      	ldrls	r2, [r3, #0]
	return 0;
   11572:	2000      	movls	r0, #0
	vm->helper_func->ext_funcs[idx] = (ext_func)fn;
   11574:	f842 6025 	strls.w	r6, [r2, r5, lsl #2]
		return -1;
   11578:	bf88      	it	hi
   1157a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   1157e:	bd70      	pop	{r4, r5, r6, pc}

00011580 <init_iot_ebpf_helpers>:
void init_iot_ebpf_helpers(struct ebpf_vm *vm) {
   11580:	b510      	push	{r4, lr}
   11582:	4604      	mov	r4, r0
	vm->helper_func = use_default_helper_func();
   11584:	f7f2 fae6 	bl	3b54 <use_default_helper_func>
   11588:	60a0      	str	r0, [r4, #8]
	set_default_helpers(vm);
   1158a:	4620      	mov	r0, r4
}
   1158c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	set_default_helpers(vm);
   11590:	f7f2 baf6 	b.w	3b80 <set_default_helpers>

00011594 <init_ebpf_vm>:
ebpf_vm *init_ebpf_vm(const uint8_t *code, uint32_t code_len) {
   11594:	b570      	push	{r4, r5, r6, lr}
   11596:	4606      	mov	r6, r0
	ebpf_vm *vm = (ebpf_vm *) ebpf_malloc(sizeof(ebpf_vm));
   11598:	2018      	movs	r0, #24
ebpf_vm *init_ebpf_vm(const uint8_t *code, uint32_t code_len) {
   1159a:	460d      	mov	r5, r1
	ebpf_vm *vm = (ebpf_vm *) ebpf_malloc(sizeof(ebpf_vm));
   1159c:	f7f2 fa6e 	bl	3a7c <ebpf_malloc>
	if (vm == NULL) {
   115a0:	4604      	mov	r4, r0
   115a2:	b128      	cbz	r0, 115b0 <init_ebpf_vm+0x1c>
	vm->num_insts = (u16) code_len / sizeof(vm->insts[0]);
   115a4:	f3c5 05cc 	ubfx	r5, r5, #3, #13
	vm->insts = (struct ebpf_inst *) code;
   115a8:	6006      	str	r6, [r0, #0]
	vm->num_insts = (u16) code_len / sizeof(vm->insts[0]);
   115aa:	8085      	strh	r5, [r0, #4]
	init_iot_ebpf_helpers(vm);
   115ac:	f7ff ffe8 	bl	11580 <init_iot_ebpf_helpers>
}
   115b0:	4620      	mov	r0, r4
   115b2:	bd70      	pop	{r4, r5, r6, pc}

000115b4 <ebpf_vm_set_inst>:
void ebpf_vm_set_inst(struct ebpf_vm *vm, const uint8_t *code, uint32_t code_len) {
   115b4:	b570      	push	{r4, r5, r6, lr}
   115b6:	4604      	mov	r4, r0
   115b8:	4615      	mov	r5, r2
   115ba:	460e      	mov	r6, r1
	vm->num_insts = (u16) code_len / sizeof(vm->insts[0]);
   115bc:	f3c5 05cc 	ubfx	r5, r5, #3, #13
   115c0:	2212      	movs	r2, #18
   115c2:	2100      	movs	r1, #0
   115c4:	3006      	adds	r0, #6
   115c6:	f7f0 ff14 	bl	23f2 <memset>
	vm->insts = (struct ebpf_inst *) code;
   115ca:	6026      	str	r6, [r4, #0]
	vm->num_insts = (u16) code_len / sizeof(vm->insts[0]);
   115cc:	80a5      	strh	r5, [r4, #4]
	init_iot_ebpf_helpers(vm);
   115ce:	4620      	mov	r0, r4
}
   115d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	init_iot_ebpf_helpers(vm);
   115d4:	f7ff bfd4 	b.w	11580 <init_iot_ebpf_helpers>

000115d8 <ebpf_vm_exec>:
u64 ebpf_vm_exec(const struct ebpf_vm *vm, void *mem, u32 mem_len) {
   115d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115dc:	b0c5      	sub	sp, #276	; 0x114
	const struct ebpf_inst *insts = vm->insts;
   115de:	6803      	ldr	r3, [r0, #0]
   115e0:	930a      	str	r3, [sp, #40]	; 0x28
u64 ebpf_vm_exec(const struct ebpf_vm *vm, void *mem, u32 mem_len) {
   115e2:	4690      	mov	r8, r2
	reg[1] = (uintptr) mem;
   115e4:	2300      	movs	r3, #0
	reg[10] = (uintptr) stack + sizeof(stack);
   115e6:	aa44      	add	r2, sp, #272	; 0x110
	reg[1] = (uintptr) mem;
   115e8:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
	reg[10] = (uintptr) stack + sizeof(stack);
   115ec:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
u64 ebpf_vm_exec(const struct ebpf_vm *vm, void *mem, u32 mem_len) {
   115f0:	4606      	mov	r6, r0
   115f2:	460f      	mov	r7, r1
			BOUNDS_CHECK_STORE(1);
   115f4:	f10d 0b90 	add.w	fp, sp, #144	; 0x90
		const struct ebpf_inst *inst = &insts[pc++];
   115f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   115fa:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
		switch (inst->opcode) {
   115fe:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
		const struct ebpf_inst *inst = &insts[pc++];
   11602:	1c5d      	adds	r5, r3, #1
		switch (inst->opcode) {
   11604:	3a04      	subs	r2, #4
		const struct ebpf_inst *inst = &insts[pc++];
   11606:	b2ad      	uxth	r5, r5
		switch (inst->opcode) {
   11608:	2ad9      	cmp	r2, #217	; 0xd9
   1160a:	f200 80ec 	bhi.w	117e6 <ebpf_vm_exec+0x20e>
   1160e:	e8df f012 	tbh	[pc, r2, lsl #1]
   11612:	00da      	.short	0x00da
   11614:	00ea06a9 	.word	0x00ea06a9
   11618:	00ea02f7 	.word	0x00ea02f7
   1161c:	00ea00ea 	.word	0x00ea00ea
   11620:	00ec00ea 	.word	0x00ec00ea
   11624:	00ea00ea 	.word	0x00ea00ea
   11628:	00ea0307 	.word	0x00ea0307
   1162c:	00ea00ea 	.word	0x00ea00ea
   11630:	010100ea 	.word	0x010100ea
   11634:	00ea06c5 	.word	0x00ea06c5
   11638:	0698031a 	.word	0x0698031a
   1163c:	00ea00ea 	.word	0x00ea00ea
   11640:	011200ea 	.word	0x011200ea
   11644:	00ea06ae 	.word	0x00ea06ae
   11648:	00ea032a 	.word	0x00ea032a
   1164c:	00ea00ea 	.word	0x00ea00ea
   11650:	012600ea 	.word	0x012600ea
   11654:	00ea06d9 	.word	0x00ea06d9
   11658:	00ea033d 	.word	0x00ea033d
   1165c:	00ea00ea 	.word	0x00ea00ea
   11660:	013700ea 	.word	0x013700ea
   11664:	00ea06ed 	.word	0x00ea06ed
   11668:	00ea0352 	.word	0x00ea0352
   1166c:	00ea00ea 	.word	0x00ea00ea
   11670:	014c00ea 	.word	0x014c00ea
   11674:	00ea0704 	.word	0x00ea0704
   11678:	00ea036a 	.word	0x00ea036a
   1167c:	00ea00ea 	.word	0x00ea00ea
   11680:	015e00ea 	.word	0x015e00ea
   11684:	00ea0718 	.word	0x00ea0718
   11688:	00ea037a 	.word	0x00ea037a
   1168c:	00ea00ea 	.word	0x00ea00ea
   11690:	017800ea 	.word	0x017800ea
   11694:	00ea0785 	.word	0x00ea0785
   11698:	00ea0394 	.word	0x00ea0394
   1169c:	00ea00ea 	.word	0x00ea00ea
   116a0:	018900ea 	.word	0x018900ea
   116a4:	00ea079f 	.word	0x00ea079f
   116a8:	00ea03a5 	.word	0x00ea03a5
   116ac:	00ea00ea 	.word	0x00ea00ea
   116b0:	019e00ea 	.word	0x019e00ea
   116b4:	00ea07ba 	.word	0x00ea07ba
   116b8:	00ea03ba 	.word	0x00ea03ba
   116bc:	00ea00ea 	.word	0x00ea00ea
   116c0:	01af00ea 	.word	0x01af00ea
   116c4:	00ea07ce 	.word	0x00ea07ce
   116c8:	00ea03cb 	.word	0x00ea03cb
   116cc:	05ac052d 	.word	0x05ac052d
   116d0:	01c40635 	.word	0x01c40635
   116d4:	00ea07e5 	.word	0x00ea07e5
   116d8:	00ea03e0 	.word	0x00ea03e0
   116dc:	05cd0543 	.word	0x05cd0543
   116e0:	01d50656 	.word	0x01d50656
   116e4:	00ea07f9 	.word	0x00ea07f9
   116e8:	00ea03f9 	.word	0x00ea03f9
   116ec:	05ee0566 	.word	0x05ee0566
   116f0:	01e90677 	.word	0x01e90677
   116f4:	00ea080f 	.word	0x00ea080f
   116f8:	00ea0418 	.word	0x00ea0418
   116fc:	0589050b 	.word	0x0589050b
   11700:	01fa060f 	.word	0x01fa060f
   11704:	00ea0822 	.word	0x00ea0822
   11708:	00ea0431 	.word	0x00ea0431
   1170c:	00ea00ea 	.word	0x00ea00ea
   11710:	020e00ea 	.word	0x020e00ea
   11714:	00ea088d 	.word	0x00ea088d
   11718:	00ea0450 	.word	0x00ea0450
   1171c:	00ea00ea 	.word	0x00ea00ea
   11720:	00ea00ea 	.word	0x00ea00ea
   11724:	00ea00ea 	.word	0x00ea00ea
   11728:	00ea00ea 	.word	0x00ea00ea
   1172c:	00ea00ea 	.word	0x00ea00ea
   11730:	021e00ea 	.word	0x021e00ea
   11734:	00ea08a7 	.word	0x00ea08a7
   11738:	00ea045e 	.word	0x00ea045e
   1173c:	00ea00ea 	.word	0x00ea00ea
   11740:	023300ea 	.word	0x023300ea
   11744:	00ea00ea 	.word	0x00ea00ea
   11748:	00ea046e 	.word	0x00ea046e
   1174c:	00ea00ea 	.word	0x00ea00ea
   11750:	024f00ea 	.word	0x024f00ea
   11754:	00ea072f 	.word	0x00ea072f
   11758:	00ea0485 	.word	0x00ea0485
   1175c:	00ea00ea 	.word	0x00ea00ea
   11760:	026000ea 	.word	0x026000ea
   11764:	00ea0743 	.word	0x00ea0743
   11768:	00ea0496 	.word	0x00ea0496
   1176c:	00ea00ea 	.word	0x00ea00ea
   11770:	027500ea 	.word	0x027500ea
   11774:	00ea075a 	.word	0x00ea075a
   11778:	00ea04ab 	.word	0x00ea04ab
   1177c:	00ea00ea 	.word	0x00ea00ea
   11780:	028300ea 	.word	0x028300ea
   11784:	00ea076e 	.word	0x00ea076e
   11788:	00ea04b6 	.word	0x00ea04b6
   1178c:	00ea00ea 	.word	0x00ea00ea
   11790:	029500ea 	.word	0x029500ea
   11794:	00ea0839 	.word	0x00ea0839
   11798:	00ea04c5 	.word	0x00ea04c5
   1179c:	00ea00ea 	.word	0x00ea00ea
   117a0:	02a600ea 	.word	0x02a600ea
   117a4:	00ea084c 	.word	0x00ea084c
   117a8:	00ea04e5 	.word	0x00ea04e5
   117ac:	00ea00ea 	.word	0x00ea00ea
   117b0:	00ea00ea 	.word	0x00ea00ea
   117b4:	00ea0863 	.word	0x00ea0863
   117b8:	00ea00ea 	.word	0x00ea00ea
   117bc:	00ea00ea 	.word	0x00ea00ea
   117c0:	02ba00ea 	.word	0x02ba00ea
   117c4:	0877      	.short	0x0877
			DST = (u32)DST + (u32)IMM;
   117c6:	7863      	ldrb	r3, [r4, #1]
   117c8:	6860      	ldr	r0, [r4, #4]
   117ca:	aa44      	add	r2, sp, #272	; 0x110
   117cc:	f003 030f 	and.w	r3, r3, #15
   117d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   117d4:	f1a3 01e0 	sub.w	r1, r3, #224	; 0xe0
   117d8:	f853 2ce0 	ldr.w	r2, [r3, #-224]
   117dc:	4402      	add	r2, r0
   117de:	f843 2ce0 	str.w	r2, [r3, #-224]
   117e2:	2300      	movs	r3, #0
   117e4:	604b      	str	r3, [r1, #4]
			DST = (u64) (u32)IMM | ((u64) (u32)insts[pc++].imm << 32);
   117e6:	462b      	mov	r3, r5
   117e8:	e706      	b.n	115f8 <ebpf_vm_exec+0x20>
			DST = (u32)DST + (u32)SRC;
   117ea:	7863      	ldrb	r3, [r4, #1]
   117ec:	a844      	add	r0, sp, #272	; 0x110
   117ee:	f003 020f 	and.w	r2, r3, #15
   117f2:	a944      	add	r1, sp, #272	; 0x110
   117f4:	091b      	lsrs	r3, r3, #4
   117f6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   117fa:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   117fe:	f852 0ce0 	ldr.w	r0, [r2, #-224]
   11802:	f853 3ce0 	ldr.w	r3, [r3, #-224]
   11806:	4403      	add	r3, r0
   11808:	f842 3ce0 	str.w	r3, [r2, #-224]
   1180c:	2300      	movs	r3, #0
   1180e:	f842 3cdc 	str.w	r3, [r2, #-220]
			break;
   11812:	e7e8      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = (u32)DST - (u32)IMM;
   11814:	7863      	ldrb	r3, [r4, #1]
   11816:	6860      	ldr	r0, [r4, #4]
   11818:	aa44      	add	r2, sp, #272	; 0x110
   1181a:	f003 030f 	and.w	r3, r3, #15
   1181e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11822:	f1a3 01e0 	sub.w	r1, r3, #224	; 0xe0
   11826:	f853 2ce0 	ldr.w	r2, [r3, #-224]
   1182a:	1a12      	subs	r2, r2, r0
   1182c:	f843 2ce0 	str.w	r2, [r3, #-224]
   11830:	2300      	movs	r3, #0
   11832:	604b      	str	r3, [r1, #4]
			break;
   11834:	e7d7      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = (u32)DST - (u32)SRC;
   11836:	7863      	ldrb	r3, [r4, #1]
   11838:	a944      	add	r1, sp, #272	; 0x110
   1183a:	f003 020f 	and.w	r2, r3, #15
   1183e:	091b      	lsrs	r3, r3, #4
   11840:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   11844:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   11848:	f852 1ce0 	ldr.w	r1, [r2, #-224]
   1184c:	f853 3ce0 	ldr.w	r3, [r3, #-224]
   11850:	1ac9      	subs	r1, r1, r3
   11852:	2300      	movs	r3, #0
   11854:	f842 1ce0 	str.w	r1, [r2, #-224]
   11858:	f842 3cdc 	str.w	r3, [r2, #-220]
			break;
   1185c:	e7c3      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = (u32)DST * (u32)IMM;
   1185e:	7863      	ldrb	r3, [r4, #1]
   11860:	aa44      	add	r2, sp, #272	; 0x110
   11862:	f003 030f 	and.w	r3, r3, #15
   11866:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1186a:	6862      	ldr	r2, [r4, #4]
   1186c:	f853 0ce0 	ldr.w	r0, [r3, #-224]
   11870:	f1a3 01e0 	sub.w	r1, r3, #224	; 0xe0
   11874:	4342      	muls	r2, r0
   11876:	f843 2ce0 	str.w	r2, [r3, #-224]
   1187a:	2300      	movs	r3, #0
   1187c:	604b      	str	r3, [r1, #4]
			break;
   1187e:	e7b2      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = (u32)DST * (u32)SRC;
   11880:	7863      	ldrb	r3, [r4, #1]
   11882:	a844      	add	r0, sp, #272	; 0x110
   11884:	f003 020f 	and.w	r2, r3, #15
   11888:	a944      	add	r1, sp, #272	; 0x110
   1188a:	091b      	lsrs	r3, r3, #4
   1188c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   11890:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   11894:	f853 0ce0 	ldr.w	r0, [r3, #-224]
   11898:	f852 3ce0 	ldr.w	r3, [r2, #-224]
   1189c:	4343      	muls	r3, r0
   1189e:	f842 3ce0 	str.w	r3, [r2, #-224]
   118a2:	2300      	movs	r3, #0
   118a4:	f842 3cdc 	str.w	r3, [r2, #-220]
			break;
   118a8:	e79d      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = (u32)DST / (u32)IMM;
   118aa:	7863      	ldrb	r3, [r4, #1]
   118ac:	6860      	ldr	r0, [r4, #4]
   118ae:	aa44      	add	r2, sp, #272	; 0x110
   118b0:	f003 030f 	and.w	r3, r3, #15
   118b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   118b8:	f1a3 01e0 	sub.w	r1, r3, #224	; 0xe0
   118bc:	f853 2ce0 	ldr.w	r2, [r3, #-224]
   118c0:	fbb2 f2f0 	udiv	r2, r2, r0
   118c4:	f843 2ce0 	str.w	r2, [r3, #-224]
   118c8:	2300      	movs	r3, #0
   118ca:	604b      	str	r3, [r1, #4]
			break;
   118cc:	e78b      	b.n	117e6 <ebpf_vm_exec+0x20e>
			if (SRC == 0) {
   118ce:	7863      	ldrb	r3, [r4, #1]
   118d0:	a944      	add	r1, sp, #272	; 0x110
   118d2:	091a      	lsrs	r2, r3, #4
   118d4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   118d8:	e952 9a38 	ldrd	r9, sl, [r2, #-224]	; 0xe0
   118dc:	ea59 020a 	orrs.w	r2, r9, sl
   118e0:	f000 8743 	beq.w	1276a <ebpf_vm_exec+0x1192>
			DST = (u32)DST / (u32)SRC;
   118e4:	f003 030f 	and.w	r3, r3, #15
   118e8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   118ec:	f1a3 01e0 	sub.w	r1, r3, #224	; 0xe0
   118f0:	f853 2ce0 	ldr.w	r2, [r3, #-224]
   118f4:	fbb2 f0f9 	udiv	r0, r2, r9
   118f8:	f843 0ce0 	str.w	r0, [r3, #-224]
   118fc:	2300      	movs	r3, #0
   118fe:	604b      	str	r3, [r1, #4]
			break;
   11900:	e771      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = (u32)DST | (u32)IMM;
   11902:	7863      	ldrb	r3, [r4, #1]
   11904:	6860      	ldr	r0, [r4, #4]
   11906:	aa44      	add	r2, sp, #272	; 0x110
   11908:	f003 030f 	and.w	r3, r3, #15
   1190c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11910:	f1a3 01e0 	sub.w	r1, r3, #224	; 0xe0
   11914:	f853 2ce0 	ldr.w	r2, [r3, #-224]
   11918:	4302      	orrs	r2, r0
   1191a:	f843 2ce0 	str.w	r2, [r3, #-224]
   1191e:	2300      	movs	r3, #0
   11920:	604b      	str	r3, [r1, #4]
			break;
   11922:	e760      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = (u32)DST | (u32)SRC;
   11924:	7863      	ldrb	r3, [r4, #1]
   11926:	a844      	add	r0, sp, #272	; 0x110
   11928:	f003 020f 	and.w	r2, r3, #15
   1192c:	a944      	add	r1, sp, #272	; 0x110
   1192e:	091b      	lsrs	r3, r3, #4
   11930:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   11934:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   11938:	f852 0ce0 	ldr.w	r0, [r2, #-224]
   1193c:	f853 3ce0 	ldr.w	r3, [r3, #-224]
   11940:	4303      	orrs	r3, r0
   11942:	f842 3ce0 	str.w	r3, [r2, #-224]
   11946:	2300      	movs	r3, #0
   11948:	f842 3cdc 	str.w	r3, [r2, #-220]
			break;
   1194c:	e74b      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = (u32)DST & (u32)IMM;
   1194e:	7863      	ldrb	r3, [r4, #1]
   11950:	6860      	ldr	r0, [r4, #4]
   11952:	aa44      	add	r2, sp, #272	; 0x110
   11954:	f003 030f 	and.w	r3, r3, #15
   11958:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1195c:	f1a3 01e0 	sub.w	r1, r3, #224	; 0xe0
   11960:	f853 2ce0 	ldr.w	r2, [r3, #-224]
   11964:	4002      	ands	r2, r0
   11966:	f843 2ce0 	str.w	r2, [r3, #-224]
   1196a:	2300      	movs	r3, #0
   1196c:	604b      	str	r3, [r1, #4]
			break;
   1196e:	e73a      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = (u32)DST & (u32)SRC;
   11970:	7863      	ldrb	r3, [r4, #1]
   11972:	a844      	add	r0, sp, #272	; 0x110
   11974:	f003 020f 	and.w	r2, r3, #15
   11978:	a944      	add	r1, sp, #272	; 0x110
   1197a:	091b      	lsrs	r3, r3, #4
   1197c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   11980:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   11984:	f852 0ce0 	ldr.w	r0, [r2, #-224]
   11988:	f853 3ce0 	ldr.w	r3, [r3, #-224]
   1198c:	4003      	ands	r3, r0
   1198e:	f842 3ce0 	str.w	r3, [r2, #-224]
   11992:	2300      	movs	r3, #0
   11994:	f842 3cdc 	str.w	r3, [r2, #-220]
			break;
   11998:	e725      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = (u32)DST << (u32)IMM;
   1199a:	7863      	ldrb	r3, [r4, #1]
   1199c:	6860      	ldr	r0, [r4, #4]
   1199e:	aa44      	add	r2, sp, #272	; 0x110
   119a0:	f003 030f 	and.w	r3, r3, #15
   119a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   119a8:	f1a3 01e0 	sub.w	r1, r3, #224	; 0xe0
   119ac:	f853 2ce0 	ldr.w	r2, [r3, #-224]
   119b0:	4082      	lsls	r2, r0
   119b2:	f843 2ce0 	str.w	r2, [r3, #-224]
   119b6:	2300      	movs	r3, #0
   119b8:	604b      	str	r3, [r1, #4]
			break;
   119ba:	e714      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = (u32)DST << (u32)SRC;
   119bc:	7863      	ldrb	r3, [r4, #1]
   119be:	a944      	add	r1, sp, #272	; 0x110
   119c0:	f003 020f 	and.w	r2, r3, #15
   119c4:	091b      	lsrs	r3, r3, #4
   119c6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   119ca:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   119ce:	f852 1ce0 	ldr.w	r1, [r2, #-224]
   119d2:	f853 3ce0 	ldr.w	r3, [r3, #-224]
   119d6:	4099      	lsls	r1, r3
   119d8:	2300      	movs	r3, #0
   119da:	f842 1ce0 	str.w	r1, [r2, #-224]
   119de:	f842 3cdc 	str.w	r3, [r2, #-220]
			break;
   119e2:	e700      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = (u32)DST >> (u32)IMM;
   119e4:	7863      	ldrb	r3, [r4, #1]
   119e6:	6860      	ldr	r0, [r4, #4]
   119e8:	aa44      	add	r2, sp, #272	; 0x110
   119ea:	f003 030f 	and.w	r3, r3, #15
   119ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   119f2:	f1a3 01e0 	sub.w	r1, r3, #224	; 0xe0
   119f6:	f853 2ce0 	ldr.w	r2, [r3, #-224]
   119fa:	40c2      	lsrs	r2, r0
   119fc:	f843 2ce0 	str.w	r2, [r3, #-224]
   11a00:	2300      	movs	r3, #0
   11a02:	604b      	str	r3, [r1, #4]
			break;
   11a04:	e6ef      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = (u32)DST >> (u32)SRC;
   11a06:	7863      	ldrb	r3, [r4, #1]
   11a08:	a944      	add	r1, sp, #272	; 0x110
   11a0a:	f003 020f 	and.w	r2, r3, #15
   11a0e:	091b      	lsrs	r3, r3, #4
   11a10:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   11a14:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   11a18:	f852 1ce0 	ldr.w	r1, [r2, #-224]
   11a1c:	f853 3ce0 	ldr.w	r3, [r3, #-224]
   11a20:	40d9      	lsrs	r1, r3
   11a22:	2300      	movs	r3, #0
   11a24:	f842 1ce0 	str.w	r1, [r2, #-224]
   11a28:	f842 3cdc 	str.w	r3, [r2, #-220]
			break;
   11a2c:	e6db      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = (u32)-DST;
   11a2e:	7863      	ldrb	r3, [r4, #1]
   11a30:	aa44      	add	r2, sp, #272	; 0x110
   11a32:	f003 030f 	and.w	r3, r3, #15
   11a36:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11a3a:	f1a3 01e0 	sub.w	r1, r3, #224	; 0xe0
   11a3e:	f853 2ce0 	ldr.w	r2, [r3, #-224]
   11a42:	4252      	negs	r2, r2
   11a44:	f843 2ce0 	str.w	r2, [r3, #-224]
   11a48:	2300      	movs	r3, #0
   11a4a:	604b      	str	r3, [r1, #4]
			break;
   11a4c:	e6cb      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = (u32)DST % (u32)IMM;
   11a4e:	7863      	ldrb	r3, [r4, #1]
   11a50:	6861      	ldr	r1, [r4, #4]
   11a52:	aa44      	add	r2, sp, #272	; 0x110
   11a54:	f003 030f 	and.w	r3, r3, #15
   11a58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11a5c:	f1a3 0ce0 	sub.w	ip, r3, #224	; 0xe0
   11a60:	f853 0ce0 	ldr.w	r0, [r3, #-224]
   11a64:	fbb0 f2f1 	udiv	r2, r0, r1
   11a68:	fb01 0212 	mls	r2, r1, r2, r0
   11a6c:	f843 2ce0 	str.w	r2, [r3, #-224]
   11a70:	2300      	movs	r3, #0
   11a72:	f8cc 3004 	str.w	r3, [ip, #4]
			break;
   11a76:	e6b6      	b.n	117e6 <ebpf_vm_exec+0x20e>
			if (reg[inst->src] == 0) {
   11a78:	7863      	ldrb	r3, [r4, #1]
   11a7a:	a944      	add	r1, sp, #272	; 0x110
   11a7c:	091a      	lsrs	r2, r3, #4
   11a7e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   11a82:	e952 9a38 	ldrd	r9, sl, [r2, #-224]	; 0xe0
   11a86:	ea59 020a 	orrs.w	r2, r9, sl
   11a8a:	f000 866e 	beq.w	1276a <ebpf_vm_exec+0x1192>
			DST = (u32)DST % (u32)SRC;
   11a8e:	f003 030f 	and.w	r3, r3, #15
   11a92:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   11a96:	f1a3 01e0 	sub.w	r1, r3, #224	; 0xe0
   11a9a:	f853 2ce0 	ldr.w	r2, [r3, #-224]
   11a9e:	fbb2 f4f9 	udiv	r4, r2, r9
   11aa2:	fb04 2019 	mls	r0, r4, r9, r2
   11aa6:	f843 0ce0 	str.w	r0, [r3, #-224]
   11aaa:	2300      	movs	r3, #0
   11aac:	604b      	str	r3, [r1, #4]
			break;
   11aae:	e69a      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = (u32)DST ^ (u32)IMM;
   11ab0:	7863      	ldrb	r3, [r4, #1]
   11ab2:	6860      	ldr	r0, [r4, #4]
   11ab4:	aa44      	add	r2, sp, #272	; 0x110
   11ab6:	f003 030f 	and.w	r3, r3, #15
   11aba:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11abe:	f1a3 01e0 	sub.w	r1, r3, #224	; 0xe0
   11ac2:	f853 2ce0 	ldr.w	r2, [r3, #-224]
   11ac6:	4042      	eors	r2, r0
   11ac8:	f843 2ce0 	str.w	r2, [r3, #-224]
   11acc:	2300      	movs	r3, #0
   11ace:	604b      	str	r3, [r1, #4]
			break;
   11ad0:	e689      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = (u32)DST ^ (u32)SRC;
   11ad2:	7863      	ldrb	r3, [r4, #1]
   11ad4:	a844      	add	r0, sp, #272	; 0x110
   11ad6:	f003 020f 	and.w	r2, r3, #15
   11ada:	a944      	add	r1, sp, #272	; 0x110
   11adc:	091b      	lsrs	r3, r3, #4
   11ade:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   11ae2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   11ae6:	f852 0ce0 	ldr.w	r0, [r2, #-224]
   11aea:	f853 3ce0 	ldr.w	r3, [r3, #-224]
   11aee:	4043      	eors	r3, r0
   11af0:	f842 3ce0 	str.w	r3, [r2, #-224]
   11af4:	2300      	movs	r3, #0
   11af6:	f842 3cdc 	str.w	r3, [r2, #-220]
			break;
   11afa:	e674      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = (u32)IMM;
   11afc:	7863      	ldrb	r3, [r4, #1]
   11afe:	6861      	ldr	r1, [r4, #4]
   11b00:	aa44      	add	r2, sp, #272	; 0x110
   11b02:	f003 030f 	and.w	r3, r3, #15
   11b06:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11b0a:	f1a3 02e0 	sub.w	r2, r3, #224	; 0xe0
   11b0e:	f843 1ce0 	str.w	r1, [r3, #-224]
   11b12:	2300      	movs	r3, #0
   11b14:	6053      	str	r3, [r2, #4]
			break;
   11b16:	e666      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = (u32)SRC;
   11b18:	7863      	ldrb	r3, [r4, #1]
   11b1a:	a844      	add	r0, sp, #272	; 0x110
   11b1c:	f003 020f 	and.w	r2, r3, #15
   11b20:	091b      	lsrs	r3, r3, #4
   11b22:	a944      	add	r1, sp, #272	; 0x110
   11b24:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   11b28:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   11b2c:	f853 3ce0 	ldr.w	r3, [r3, #-224]
   11b30:	f842 3ce0 	str.w	r3, [r2, #-224]
   11b34:	2300      	movs	r3, #0
   11b36:	f842 3cdc 	str.w	r3, [r2, #-220]
			break;
   11b3a:	e654      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = (u64)(u32)(((s32)DST) >> IMM);
   11b3c:	7863      	ldrb	r3, [r4, #1]
   11b3e:	6860      	ldr	r0, [r4, #4]
   11b40:	aa44      	add	r2, sp, #272	; 0x110
   11b42:	f003 030f 	and.w	r3, r3, #15
   11b46:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11b4a:	f1a3 01e0 	sub.w	r1, r3, #224	; 0xe0
   11b4e:	f853 2ce0 	ldr.w	r2, [r3, #-224]
   11b52:	4102      	asrs	r2, r0
   11b54:	f843 2ce0 	str.w	r2, [r3, #-224]
   11b58:	2300      	movs	r3, #0
   11b5a:	604b      	str	r3, [r1, #4]
			break;
   11b5c:	e643      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = (u64)(u32)(((s32)DST) >> SRC);
   11b5e:	7863      	ldrb	r3, [r4, #1]
   11b60:	a944      	add	r1, sp, #272	; 0x110
   11b62:	f003 020f 	and.w	r2, r3, #15
   11b66:	091b      	lsrs	r3, r3, #4
   11b68:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   11b6c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   11b70:	f852 1ce0 	ldr.w	r1, [r2, #-224]
   11b74:	f853 3ce0 	ldr.w	r3, [r3, #-224]
   11b78:	4119      	asrs	r1, r3
   11b7a:	2300      	movs	r3, #0
   11b7c:	f842 1ce0 	str.w	r1, [r2, #-224]
   11b80:	f842 3cdc 	str.w	r3, [r2, #-220]
			break;
   11b84:	e62f      	b.n	117e6 <ebpf_vm_exec+0x20e>
			switch (IMM) {
   11b86:	6863      	ldr	r3, [r4, #4]
   11b88:	2b20      	cmp	r3, #32
   11b8a:	d014      	beq.n	11bb6 <ebpf_vm_exec+0x5de>
   11b8c:	2b40      	cmp	r3, #64	; 0x40
   11b8e:	d025      	beq.n	11bdc <ebpf_vm_exec+0x604>
   11b90:	2b10      	cmp	r3, #16
   11b92:	f47f ae28 	bne.w	117e6 <ebpf_vm_exec+0x20e>
				DST = my_htobe16(DST);
   11b96:	7863      	ldrb	r3, [r4, #1]
   11b98:	aa44      	add	r2, sp, #272	; 0x110
   11b9a:	f003 030f 	and.w	r3, r3, #15
   11b9e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11ba2:	2100      	movs	r1, #0
   11ba4:	f833 2ce0 	ldrh.w	r2, [r3, #-224]
//#define false 0
//#endif

static inline u16 __swap16(u16 x)
{
	return (u16) ((((u16)(x) & (u16)0x00ffU) << 8) | (((u16)(x) & (u16)0xff00U) >> 8));
   11ba8:	0210      	lsls	r0, r2, #8
   11baa:	ea40 2012 	orr.w	r0, r0, r2, lsr #8
   11bae:	b280      	uxth	r0, r0
   11bb0:	e943 0138 	strd	r0, r1, [r3, #-224]	; 0xe0
				break;
   11bb4:	e617      	b.n	117e6 <ebpf_vm_exec+0x20e>
				DST = my_htobe32(DST);
   11bb6:	7863      	ldrb	r3, [r4, #1]
   11bb8:	aa44      	add	r2, sp, #272	; 0x110
   11bba:	f003 030f 	and.w	r3, r3, #15
   11bbe:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   11bc2:	a944      	add	r1, sp, #272	; 0x110
   11bc4:	f852 2ce0 	ldr.w	r2, [r2, #-224]
   11bc8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   11bcc:	f1a3 01e0 	sub.w	r1, r3, #224	; 0xe0
   11bd0:	ba12      	rev	r2, r2
   11bd2:	f843 2ce0 	str.w	r2, [r3, #-224]
   11bd6:	2300      	movs	r3, #0
   11bd8:	604b      	str	r3, [r1, #4]
				break;
   11bda:	e604      	b.n	117e6 <ebpf_vm_exec+0x20e>
				DST = my_htobe64(DST);
   11bdc:	7863      	ldrb	r3, [r4, #1]
   11bde:	f003 030f 	and.w	r3, r3, #15
   11be2:	b219      	sxth	r1, r3
   11be4:	aa0c      	add	r2, sp, #48	; 0x30
   11be6:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
   11bea:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
   11bee:	6841      	ldr	r1, [r0, #4]
   11bf0:	a844      	add	r0, sp, #272	; 0x110
   11bf2:	ba12      	rev	r2, r2
   11bf4:	ba09      	rev	r1, r1
   11bf6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   11bfa:	e943 1238 	strd	r1, r2, [r3, #-224]	; 0xe0
				break;
   11bfe:	e5f2      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = DST + IMM;
   11c00:	7861      	ldrb	r1, [r4, #1]
   11c02:	6860      	ldr	r0, [r4, #4]
   11c04:	ab44      	add	r3, sp, #272	; 0x110
   11c06:	f001 010f 	and.w	r1, r1, #15
   11c0a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   11c0e:	e951 2338 	ldrd	r2, r3, [r1, #-224]	; 0xe0
   11c12:	eb12 0900 	adds.w	r9, r2, r0
   11c16:	eb43 7ae0 	adc.w	sl, r3, r0, asr #31
   11c1a:	e941 9a38 	strd	r9, sl, [r1, #-224]	; 0xe0
			break;
   11c1e:	e5e2      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = DST + SRC;
   11c20:	7863      	ldrb	r3, [r4, #1]
   11c22:	aa44      	add	r2, sp, #272	; 0x110
   11c24:	f003 010f 	and.w	r1, r3, #15
   11c28:	091b      	lsrs	r3, r3, #4
   11c2a:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
   11c2e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11c32:	e953 2438 	ldrd	r2, r4, [r3, #-224]	; 0xe0
   11c36:	e951 0338 	ldrd	r0, r3, [r1, #-224]	; 0xe0
   11c3a:	1812      	adds	r2, r2, r0
   11c3c:	eb44 0303 	adc.w	r3, r4, r3
   11c40:	e941 2338 	strd	r2, r3, [r1, #-224]	; 0xe0
			break;
   11c44:	e5cf      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = DST - IMM;
   11c46:	7861      	ldrb	r1, [r4, #1]
   11c48:	6860      	ldr	r0, [r4, #4]
   11c4a:	ab44      	add	r3, sp, #272	; 0x110
   11c4c:	f001 010f 	and.w	r1, r1, #15
   11c50:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   11c54:	e951 2338 	ldrd	r2, r3, [r1, #-224]	; 0xe0
   11c58:	ebb2 0900 	subs.w	r9, r2, r0
   11c5c:	eb63 7ae0 	sbc.w	sl, r3, r0, asr #31
   11c60:	e941 9a38 	strd	r9, sl, [r1, #-224]	; 0xe0
			break;
   11c64:	e5bf      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = DST - SRC;
   11c66:	7863      	ldrb	r3, [r4, #1]
   11c68:	a944      	add	r1, sp, #272	; 0x110
   11c6a:	f003 020f 	and.w	r2, r3, #15
   11c6e:	091b      	lsrs	r3, r3, #4
   11c70:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   11c74:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   11c78:	e953 4338 	ldrd	r4, r3, [r3, #-224]	; 0xe0
   11c7c:	e952 1038 	ldrd	r1, r0, [r2, #-224]	; 0xe0
   11c80:	1b09      	subs	r1, r1, r4
   11c82:	eb60 0003 	sbc.w	r0, r0, r3
   11c86:	e942 1038 	strd	r1, r0, [r2, #-224]	; 0xe0
			break;
   11c8a:	e5ac      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = DST * IMM;
   11c8c:	7863      	ldrb	r3, [r4, #1]
   11c8e:	6861      	ldr	r1, [r4, #4]
   11c90:	aa44      	add	r2, sp, #272	; 0x110
   11c92:	f003 030f 	and.w	r3, r3, #15
   11c96:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11c9a:	e953 0238 	ldrd	r0, r2, [r3, #-224]	; 0xe0
   11c9e:	ea4f 7ae1 	mov.w	sl, r1, asr #31
   11ca2:	fb0a f400 	mul.w	r4, sl, r0
   11ca6:	fb01 4202 	mla	r2, r1, r2, r4
   11caa:	fba0 0101 	umull	r0, r1, r0, r1
   11cae:	4411      	add	r1, r2
   11cb0:	e943 0138 	strd	r0, r1, [r3, #-224]	; 0xe0
			break;
   11cb4:	e597      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = DST * SRC;
   11cb6:	7863      	ldrb	r3, [r4, #1]
   11cb8:	aa44      	add	r2, sp, #272	; 0x110
   11cba:	f003 010f 	and.w	r1, r3, #15
   11cbe:	091b      	lsrs	r3, r3, #4
   11cc0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11cc4:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
   11cc8:	e951 2438 	ldrd	r2, r4, [r1, #-224]	; 0xe0
   11ccc:	f853 0cdc 	ldr.w	r0, [r3, #-220]
   11cd0:	f853 3ce0 	ldr.w	r3, [r3, #-224]
   11cd4:	435c      	muls	r4, r3
   11cd6:	fb02 4000 	mla	r0, r2, r0, r4
   11cda:	fba3 2302 	umull	r2, r3, r3, r2
   11cde:	4403      	add	r3, r0
   11ce0:	e941 2338 	strd	r2, r3, [r1, #-224]	; 0xe0
			break;
   11ce4:	e57f      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = DST / IMM;
   11ce6:	f894 9001 	ldrb.w	r9, [r4, #1]
   11cea:	6862      	ldr	r2, [r4, #4]
   11cec:	ab44      	add	r3, sp, #272	; 0x110
   11cee:	f009 090f 	and.w	r9, r9, #15
   11cf2:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   11cf6:	e959 0138 	ldrd	r0, r1, [r9, #-224]	; 0xe0
   11cfa:	17d3      	asrs	r3, r2, #31
   11cfc:	f7ee fe24 	bl	948 <__aeabi_uldivmod>
   11d00:	e949 0138 	strd	r0, r1, [r9, #-224]	; 0xe0
			break;
   11d04:	e56f      	b.n	117e6 <ebpf_vm_exec+0x20e>
			if (SRC == 0) {
   11d06:	f894 9001 	ldrb.w	r9, [r4, #1]
   11d0a:	aa44      	add	r2, sp, #272	; 0x110
   11d0c:	ea4f 1319 	mov.w	r3, r9, lsr #4
   11d10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11d14:	e953 2338 	ldrd	r2, r3, [r3, #-224]	; 0xe0
   11d18:	4313      	orrs	r3, r2
   11d1a:	f000 8526 	beq.w	1276a <ebpf_vm_exec+0x1192>
			DST = DST / IMM;
   11d1e:	ab44      	add	r3, sp, #272	; 0x110
   11d20:	6862      	ldr	r2, [r4, #4]
   11d22:	f009 090f 	and.w	r9, r9, #15
   11d26:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   11d2a:	e959 0138 	ldrd	r0, r1, [r9, #-224]	; 0xe0
   11d2e:	17d3      	asrs	r3, r2, #31
   11d30:	f7ee fe0a 	bl	948 <__aeabi_uldivmod>
   11d34:	e949 0138 	strd	r0, r1, [r9, #-224]	; 0xe0
			break;
   11d38:	e555      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = DST | IMM;
   11d3a:	7863      	ldrb	r3, [r4, #1]
   11d3c:	6864      	ldr	r4, [r4, #4]
   11d3e:	aa44      	add	r2, sp, #272	; 0x110
   11d40:	f003 030f 	and.w	r3, r3, #15
   11d44:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11d48:	e953 0238 	ldrd	r0, r2, [r3, #-224]	; 0xe0
   11d4c:	ea4f 7ae4 	mov.w	sl, r4, asr #31
   11d50:	4320      	orrs	r0, r4
   11d52:	ea42 020a 	orr.w	r2, r2, sl
   11d56:	e943 0238 	strd	r0, r2, [r3, #-224]	; 0xe0
			break;
   11d5a:	e544      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = DST | SRC;
   11d5c:	7863      	ldrb	r3, [r4, #1]
   11d5e:	a844      	add	r0, sp, #272	; 0x110
   11d60:	f003 020f 	and.w	r2, r3, #15
   11d64:	a944      	add	r1, sp, #272	; 0x110
   11d66:	091b      	lsrs	r3, r3, #4
   11d68:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   11d6c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   11d70:	e953 4338 	ldrd	r4, r3, [r3, #-224]	; 0xe0
   11d74:	f852 0ce0 	ldr.w	r0, [r2, #-224]
   11d78:	4320      	orrs	r0, r4
   11d7a:	f852 4cdc 	ldr.w	r4, [r2, #-220]
   11d7e:	4323      	orrs	r3, r4
   11d80:	e942 0338 	strd	r0, r3, [r2, #-224]	; 0xe0
			break;
   11d84:	e52f      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = DST & IMM;
   11d86:	7863      	ldrb	r3, [r4, #1]
   11d88:	6864      	ldr	r4, [r4, #4]
   11d8a:	aa44      	add	r2, sp, #272	; 0x110
   11d8c:	f003 030f 	and.w	r3, r3, #15
   11d90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11d94:	e953 0238 	ldrd	r0, r2, [r3, #-224]	; 0xe0
   11d98:	ea4f 7ae4 	mov.w	sl, r4, asr #31
   11d9c:	4020      	ands	r0, r4
   11d9e:	ea02 020a 	and.w	r2, r2, sl
   11da2:	e943 0238 	strd	r0, r2, [r3, #-224]	; 0xe0
			break;
   11da6:	e51e      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = DST & SRC;
   11da8:	7863      	ldrb	r3, [r4, #1]
   11daa:	a844      	add	r0, sp, #272	; 0x110
   11dac:	f003 020f 	and.w	r2, r3, #15
   11db0:	a944      	add	r1, sp, #272	; 0x110
   11db2:	091b      	lsrs	r3, r3, #4
   11db4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   11db8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   11dbc:	e953 4338 	ldrd	r4, r3, [r3, #-224]	; 0xe0
   11dc0:	f852 0ce0 	ldr.w	r0, [r2, #-224]
   11dc4:	4020      	ands	r0, r4
   11dc6:	f852 4cdc 	ldr.w	r4, [r2, #-220]
   11dca:	4023      	ands	r3, r4
   11dcc:	e942 0338 	strd	r0, r3, [r2, #-224]	; 0xe0
			break;
   11dd0:	e509      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = DST << IMM;
   11dd2:	7862      	ldrb	r2, [r4, #1]
   11dd4:	6860      	ldr	r0, [r4, #4]
   11dd6:	ab44      	add	r3, sp, #272	; 0x110
   11dd8:	f002 020f 	and.w	r2, r2, #15
   11ddc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   11de0:	e952 1338 	ldrd	r1, r3, [r2, #-224]	; 0xe0
   11de4:	f1a0 0e20 	sub.w	lr, r0, #32
   11de8:	fa01 fe0e 	lsl.w	lr, r1, lr
   11dec:	f1c0 0420 	rsb	r4, r0, #32
   11df0:	4083      	lsls	r3, r0
   11df2:	fa21 f404 	lsr.w	r4, r1, r4
   11df6:	ea43 030e 	orr.w	r3, r3, lr
   11dfa:	4323      	orrs	r3, r4
   11dfc:	4081      	lsls	r1, r0
   11dfe:	e942 1338 	strd	r1, r3, [r2, #-224]	; 0xe0
			break;
   11e02:	e4f0      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = DST << SRC;
   11e04:	7863      	ldrb	r3, [r4, #1]
   11e06:	a944      	add	r1, sp, #272	; 0x110
   11e08:	f003 020f 	and.w	r2, r3, #15
   11e0c:	091b      	lsrs	r3, r3, #4
   11e0e:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   11e12:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   11e16:	e952 1338 	ldrd	r1, r3, [r2, #-224]	; 0xe0
   11e1a:	f850 0ce0 	ldr.w	r0, [r0, #-224]
   11e1e:	f1a0 0c20 	sub.w	ip, r0, #32
   11e22:	fa01 fc0c 	lsl.w	ip, r1, ip
   11e26:	f1c0 0420 	rsb	r4, r0, #32
   11e2a:	4083      	lsls	r3, r0
   11e2c:	fa21 f404 	lsr.w	r4, r1, r4
   11e30:	ea43 030c 	orr.w	r3, r3, ip
   11e34:	4323      	orrs	r3, r4
   11e36:	4081      	lsls	r1, r0
   11e38:	f1a2 0ee0 	sub.w	lr, r2, #224	; 0xe0
   11e3c:	e942 1338 	strd	r1, r3, [r2, #-224]	; 0xe0
			break;
   11e40:	e4d1      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = DST >> IMM;
   11e42:	7863      	ldrb	r3, [r4, #1]
   11e44:	6860      	ldr	r0, [r4, #4]
   11e46:	aa44      	add	r2, sp, #272	; 0x110
   11e48:	f003 030f 	and.w	r3, r3, #15
   11e4c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11e50:	e953 2138 	ldrd	r2, r1, [r3, #-224]	; 0xe0
   11e54:	f1c0 0e20 	rsb	lr, r0, #32
   11e58:	fa01 fe0e 	lsl.w	lr, r1, lr
   11e5c:	f1a0 0420 	sub.w	r4, r0, #32
   11e60:	40c2      	lsrs	r2, r0
   11e62:	fa21 f404 	lsr.w	r4, r1, r4
   11e66:	ea42 020e 	orr.w	r2, r2, lr
   11e6a:	4322      	orrs	r2, r4
   11e6c:	40c1      	lsrs	r1, r0
   11e6e:	e943 2138 	strd	r2, r1, [r3, #-224]	; 0xe0
			break;
   11e72:	e4b8      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = DST >> SRC;
   11e74:	7863      	ldrb	r3, [r4, #1]
   11e76:	aa44      	add	r2, sp, #272	; 0x110
   11e78:	f003 010f 	and.w	r1, r3, #15
   11e7c:	091b      	lsrs	r3, r3, #4
   11e7e:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
   11e82:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
   11e86:	e951 3238 	ldrd	r3, r2, [r1, #-224]	; 0xe0
   11e8a:	f850 0ce0 	ldr.w	r0, [r0, #-224]
   11e8e:	f1c0 0c20 	rsb	ip, r0, #32
   11e92:	fa02 fc0c 	lsl.w	ip, r2, ip
   11e96:	f1a0 0420 	sub.w	r4, r0, #32
   11e9a:	40c3      	lsrs	r3, r0
   11e9c:	fa22 f404 	lsr.w	r4, r2, r4
   11ea0:	ea43 030c 	orr.w	r3, r3, ip
   11ea4:	4323      	orrs	r3, r4
   11ea6:	40c2      	lsrs	r2, r0
   11ea8:	f1a1 0ee0 	sub.w	lr, r1, #224	; 0xe0
   11eac:	e941 3238 	strd	r3, r2, [r1, #-224]	; 0xe0
			break;
   11eb0:	e499      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = -DST;
   11eb2:	7861      	ldrb	r1, [r4, #1]
   11eb4:	ab44      	add	r3, sp, #272	; 0x110
   11eb6:	f001 010f 	and.w	r1, r1, #15
   11eba:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   11ebe:	e951 2338 	ldrd	r2, r3, [r1, #-224]	; 0xe0
   11ec2:	4252      	negs	r2, r2
   11ec4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   11ec8:	e941 2338 	strd	r2, r3, [r1, #-224]	; 0xe0
			break;
   11ecc:	e48b      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = DST % IMM;
   11ece:	f894 9001 	ldrb.w	r9, [r4, #1]
   11ed2:	6862      	ldr	r2, [r4, #4]
   11ed4:	ab44      	add	r3, sp, #272	; 0x110
   11ed6:	f009 090f 	and.w	r9, r9, #15
   11eda:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   11ede:	e959 0138 	ldrd	r0, r1, [r9, #-224]	; 0xe0
   11ee2:	17d3      	asrs	r3, r2, #31
   11ee4:	f7ee fd30 	bl	948 <__aeabi_uldivmod>
   11ee8:	e949 2338 	strd	r2, r3, [r9, #-224]	; 0xe0
			break;
   11eec:	e47b      	b.n	117e6 <ebpf_vm_exec+0x20e>
			if (SRC == 0) {
   11eee:	7864      	ldrb	r4, [r4, #1]
   11ef0:	aa44      	add	r2, sp, #272	; 0x110
   11ef2:	0923      	lsrs	r3, r4, #4
   11ef4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11ef8:	e953 2338 	ldrd	r2, r3, [r3, #-224]	; 0xe0
   11efc:	ea52 0103 	orrs.w	r1, r2, r3
   11f00:	f000 8433 	beq.w	1276a <ebpf_vm_exec+0x1192>
			DST = DST % SRC;
   11f04:	a944      	add	r1, sp, #272	; 0x110
   11f06:	f004 040f 	and.w	r4, r4, #15
   11f0a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   11f0e:	e954 0138 	ldrd	r0, r1, [r4, #-224]	; 0xe0
   11f12:	f7ee fd19 	bl	948 <__aeabi_uldivmod>
   11f16:	e944 2338 	strd	r2, r3, [r4, #-224]	; 0xe0
			break;
   11f1a:	e464      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = DST ^ IMM;
   11f1c:	7863      	ldrb	r3, [r4, #1]
   11f1e:	6864      	ldr	r4, [r4, #4]
   11f20:	aa44      	add	r2, sp, #272	; 0x110
   11f22:	f003 030f 	and.w	r3, r3, #15
   11f26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11f2a:	e953 0238 	ldrd	r0, r2, [r3, #-224]	; 0xe0
   11f2e:	ea4f 7ae4 	mov.w	sl, r4, asr #31
   11f32:	4060      	eors	r0, r4
   11f34:	ea82 020a 	eor.w	r2, r2, sl
   11f38:	e943 0238 	strd	r0, r2, [r3, #-224]	; 0xe0
			break;
   11f3c:	e453      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = DST ^ SRC;
   11f3e:	7863      	ldrb	r3, [r4, #1]
   11f40:	a844      	add	r0, sp, #272	; 0x110
   11f42:	f003 020f 	and.w	r2, r3, #15
   11f46:	a944      	add	r1, sp, #272	; 0x110
   11f48:	091b      	lsrs	r3, r3, #4
   11f4a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   11f4e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   11f52:	e953 4338 	ldrd	r4, r3, [r3, #-224]	; 0xe0
   11f56:	f852 0ce0 	ldr.w	r0, [r2, #-224]
   11f5a:	4060      	eors	r0, r4
   11f5c:	f852 4cdc 	ldr.w	r4, [r2, #-220]
   11f60:	4063      	eors	r3, r4
   11f62:	e942 0338 	strd	r0, r3, [r2, #-224]	; 0xe0
			break;
   11f66:	e43e      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = IMM;
   11f68:	7863      	ldrb	r3, [r4, #1]
   11f6a:	6860      	ldr	r0, [r4, #4]
   11f6c:	f003 030f 	and.w	r3, r3, #15
   11f70:	aa44      	add	r2, sp, #272	; 0x110
   11f72:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11f76:	17c1      	asrs	r1, r0, #31
   11f78:	e943 0138 	strd	r0, r1, [r3, #-224]	; 0xe0
			break;
   11f7c:	e433      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = SRC;
   11f7e:	7863      	ldrb	r3, [r4, #1]
   11f80:	a944      	add	r1, sp, #272	; 0x110
   11f82:	091a      	lsrs	r2, r3, #4
   11f84:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   11f88:	e952 0138 	ldrd	r0, r1, [r2, #-224]	; 0xe0
   11f8c:	f003 030f 	and.w	r3, r3, #15
   11f90:	aa44      	add	r2, sp, #272	; 0x110
   11f92:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11f96:	e943 0138 	strd	r0, r1, [r3, #-224]	; 0xe0
			break;
   11f9a:	e424      	b.n	117e6 <ebpf_vm_exec+0x20e>
			(*(s64 *)&DST) >>= IMM;
   11f9c:	7861      	ldrb	r1, [r4, #1]
   11f9e:	6860      	ldr	r0, [r4, #4]
   11fa0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   11fa4:	f001 010f 	and.w	r1, r1, #15
   11fa8:	eb0c 0ec1 	add.w	lr, ip, r1, lsl #3
   11fac:	f85c 3031 	ldr.w	r3, [ip, r1, lsl #3]
   11fb0:	f8de 2004 	ldr.w	r2, [lr, #4]
   11fb4:	f1c0 0920 	rsb	r9, r0, #32
   11fb8:	f1b0 0420 	subs.w	r4, r0, #32
   11fbc:	fa02 f909 	lsl.w	r9, r2, r9
   11fc0:	fa23 f300 	lsr.w	r3, r3, r0
   11fc4:	ea43 0309 	orr.w	r3, r3, r9
   11fc8:	bf5c      	itt	pl
   11fca:	fa42 f404 	asrpl.w	r4, r2, r4
   11fce:	4323      	orrpl	r3, r4
   11fd0:	4102      	asrs	r2, r0
   11fd2:	f84c 3031 	str.w	r3, [ip, r1, lsl #3]
   11fd6:	f8ce 2004 	str.w	r2, [lr, #4]
			break;
   11fda:	e404      	b.n	117e6 <ebpf_vm_exec+0x20e>
			DST = (s64) DST >> SRC;
   11fdc:	7863      	ldrb	r3, [r4, #1]
   11fde:	aa44      	add	r2, sp, #272	; 0x110
   11fe0:	f003 010f 	and.w	r1, r3, #15
   11fe4:	091b      	lsrs	r3, r3, #4
   11fe6:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
   11fea:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
   11fee:	f1a1 0ee0 	sub.w	lr, r1, #224	; 0xe0
   11ff2:	f850 0ce0 	ldr.w	r0, [r0, #-224]
   11ff6:	f8de 2004 	ldr.w	r2, [lr, #4]
   11ffa:	f851 3ce0 	ldr.w	r3, [r1, #-224]
   11ffe:	f1c0 0c20 	rsb	ip, r0, #32
   12002:	f1b0 0420 	subs.w	r4, r0, #32
   12006:	fa02 fc0c 	lsl.w	ip, r2, ip
   1200a:	fa23 f300 	lsr.w	r3, r3, r0
   1200e:	ea43 030c 	orr.w	r3, r3, ip
   12012:	bf5c      	itt	pl
   12014:	fa42 f404 	asrpl.w	r4, r2, r4
   12018:	4323      	orrpl	r3, r4
   1201a:	4102      	asrs	r2, r0
   1201c:	f841 3ce0 	str.w	r3, [r1, #-224]
   12020:	f8ce 2004 	str.w	r2, [lr, #4]
			break;
   12024:	f7ff bbdf 	b.w	117e6 <ebpf_vm_exec+0x20e>
			BOUNDS_CHECK_LOAD(8);
   12028:	7863      	ldrb	r3, [r4, #1]
   1202a:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
   1202e:	79b0      	ldrb	r0, [r6, #6]
   12030:	aa44      	add	r2, sp, #272	; 0x110
   12032:	091b      	lsrs	r3, r3, #4
   12034:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   12038:	2208      	movs	r2, #8
   1203a:	f853 ace0 	ldr.w	sl, [r3, #-224]
   1203e:	e9cd 8b00 	strd	r8, fp, [sp]
   12042:	463b      	mov	r3, r7
   12044:	eb09 010a 	add.w	r1, r9, sl
   12048:	f7ff fa6a 	bl	11520 <bounds_check.isra.0>
   1204c:	2800      	cmp	r0, #0
   1204e:	f000 838c 	beq.w	1276a <ebpf_vm_exec+0x1192>
			DST = *(u64*)(uintptr)(SRC + inst->offset);
   12052:	7861      	ldrb	r1, [r4, #1]
   12054:	ab44      	add	r3, sp, #272	; 0x110
   12056:	f001 010f 	and.w	r1, r1, #15
   1205a:	44d1      	add	r9, sl
   1205c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   12060:	e9d9 2300 	ldrd	r2, r3, [r9]
   12064:	e941 2338 	strd	r2, r3, [r1, #-224]	; 0xe0
			break;
   12068:	f7ff bbbd 	b.w	117e6 <ebpf_vm_exec+0x20e>
			DST = *(u32*)(uintptr)(SRC + inst->offset);
   1206c:	7863      	ldrb	r3, [r4, #1]
   1206e:	a844      	add	r0, sp, #272	; 0x110
   12070:	f003 020f 	and.w	r2, r3, #15
   12074:	091b      	lsrs	r3, r3, #4
   12076:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   1207a:	a944      	add	r1, sp, #272	; 0x110
   1207c:	f853 3ce0 	ldr.w	r3, [r3, #-224]
   12080:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
   12084:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   12088:	581b      	ldr	r3, [r3, r0]
   1208a:	f842 3ce0 	str.w	r3, [r2, #-224]
   1208e:	2300      	movs	r3, #0
   12090:	f842 3cdc 	str.w	r3, [r2, #-220]
			break;
   12094:	f7ff bba7 	b.w	117e6 <ebpf_vm_exec+0x20e>
			BOUNDS_CHECK_LOAD(2);
   12098:	7863      	ldrb	r3, [r4, #1]
   1209a:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
   1209e:	79b0      	ldrb	r0, [r6, #6]
   120a0:	aa44      	add	r2, sp, #272	; 0x110
   120a2:	091b      	lsrs	r3, r3, #4
   120a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   120a8:	2202      	movs	r2, #2
   120aa:	f853 ace0 	ldr.w	sl, [r3, #-224]
   120ae:	e9cd 8b00 	strd	r8, fp, [sp]
   120b2:	463b      	mov	r3, r7
   120b4:	eb09 010a 	add.w	r1, r9, sl
   120b8:	f7ff fa32 	bl	11520 <bounds_check.isra.0>
   120bc:	2800      	cmp	r0, #0
   120be:	f000 8354 	beq.w	1276a <ebpf_vm_exec+0x1192>
			DST = *(u16*)(uintptr)(SRC + inst->offset);
   120c2:	7863      	ldrb	r3, [r4, #1]
   120c4:	44d1      	add	r9, sl
   120c6:	f003 030f 	and.w	r3, r3, #15
   120ca:	aa44      	add	r2, sp, #272	; 0x110
   120cc:	f8b9 0000 	ldrh.w	r0, [r9]
   120d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   120d4:	2100      	movs	r1, #0
   120d6:	e943 0138 	strd	r0, r1, [r3, #-224]	; 0xe0
			break;
   120da:	f7ff bb84 	b.w	117e6 <ebpf_vm_exec+0x20e>
			BOUNDS_CHECK_LOAD(1);
   120de:	7863      	ldrb	r3, [r4, #1]
   120e0:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
   120e4:	79b0      	ldrb	r0, [r6, #6]
   120e6:	aa44      	add	r2, sp, #272	; 0x110
   120e8:	091b      	lsrs	r3, r3, #4
   120ea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   120ee:	2201      	movs	r2, #1
   120f0:	f853 ace0 	ldr.w	sl, [r3, #-224]
   120f4:	e9cd 8b00 	strd	r8, fp, [sp]
   120f8:	463b      	mov	r3, r7
   120fa:	eb09 010a 	add.w	r1, r9, sl
   120fe:	f7ff fa0f 	bl	11520 <bounds_check.isra.0>
   12102:	2800      	cmp	r0, #0
   12104:	f000 8331 	beq.w	1276a <ebpf_vm_exec+0x1192>
			DST = *(u8*)(uintptr)(reg[inst->src] + inst->offset);
   12108:	7863      	ldrb	r3, [r4, #1]
   1210a:	44d1      	add	r9, sl
   1210c:	f003 030f 	and.w	r3, r3, #15
   12110:	aa44      	add	r2, sp, #272	; 0x110
   12112:	f899 0000 	ldrb.w	r0, [r9]
   12116:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1211a:	2100      	movs	r1, #0
   1211c:	e943 0138 	strd	r0, r1, [r3, #-224]	; 0xe0
			break;
   12120:	f7ff bb61 	b.w	117e6 <ebpf_vm_exec+0x20e>
			BOUNDS_CHECK_STORE(8);
   12124:	7863      	ldrb	r3, [r4, #1]
   12126:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
   1212a:	79b0      	ldrb	r0, [r6, #6]
   1212c:	aa44      	add	r2, sp, #272	; 0x110
   1212e:	091b      	lsrs	r3, r3, #4
   12130:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   12134:	2208      	movs	r2, #8
   12136:	f853 1ce0 	ldr.w	r1, [r3, #-224]
   1213a:	e9cd 8b00 	strd	r8, fp, [sp]
   1213e:	463b      	mov	r3, r7
   12140:	4449      	add	r1, r9
   12142:	f7ff f9ed 	bl	11520 <bounds_check.isra.0>
   12146:	2800      	cmp	r0, #0
   12148:	f000 830f 	beq.w	1276a <ebpf_vm_exec+0x1192>
			*(u64*)(uintptr)(DST + inst->offset) = IMM;
   1214c:	7863      	ldrb	r3, [r4, #1]
   1214e:	aa44      	add	r2, sp, #272	; 0x110
   12150:	f003 030f 	and.w	r3, r3, #15
   12154:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   12158:	6862      	ldr	r2, [r4, #4]
   1215a:	f853 3ce0 	ldr.w	r3, [r3, #-224]
   1215e:	4499      	add	r9, r3
   12160:	17d3      	asrs	r3, r2, #31
   12162:	e9c9 2300 	strd	r2, r3, [r9]
			break;
   12166:	f7ff bb3e 	b.w	117e6 <ebpf_vm_exec+0x20e>
			BOUNDS_CHECK_STORE(4);
   1216a:	7863      	ldrb	r3, [r4, #1]
   1216c:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
   12170:	79b0      	ldrb	r0, [r6, #6]
   12172:	aa44      	add	r2, sp, #272	; 0x110
   12174:	091b      	lsrs	r3, r3, #4
   12176:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1217a:	2204      	movs	r2, #4
   1217c:	f853 1ce0 	ldr.w	r1, [r3, #-224]
   12180:	e9cd 8b00 	strd	r8, fp, [sp]
   12184:	463b      	mov	r3, r7
   12186:	4449      	add	r1, r9
   12188:	f7ff f9ca 	bl	11520 <bounds_check.isra.0>
   1218c:	2800      	cmp	r0, #0
   1218e:	f000 82ec 	beq.w	1276a <ebpf_vm_exec+0x1192>
			*(u32*)(uintptr)(DST + inst->offset) = IMM;
   12192:	7863      	ldrb	r3, [r4, #1]
   12194:	aa44      	add	r2, sp, #272	; 0x110
   12196:	f003 030f 	and.w	r3, r3, #15
   1219a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1219e:	6862      	ldr	r2, [r4, #4]
   121a0:	f853 3ce0 	ldr.w	r3, [r3, #-224]
   121a4:	f843 2009 	str.w	r2, [r3, r9]
			break;
   121a8:	f7ff bb1d 	b.w	117e6 <ebpf_vm_exec+0x20e>
			BOUNDS_CHECK_STORE(2);
   121ac:	7863      	ldrb	r3, [r4, #1]
   121ae:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
   121b2:	79b0      	ldrb	r0, [r6, #6]
   121b4:	aa44      	add	r2, sp, #272	; 0x110
   121b6:	091b      	lsrs	r3, r3, #4
   121b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   121bc:	2202      	movs	r2, #2
   121be:	f853 1ce0 	ldr.w	r1, [r3, #-224]
   121c2:	e9cd 8b00 	strd	r8, fp, [sp]
   121c6:	463b      	mov	r3, r7
   121c8:	4449      	add	r1, r9
   121ca:	f7ff f9a9 	bl	11520 <bounds_check.isra.0>
   121ce:	2800      	cmp	r0, #0
   121d0:	f000 82cb 	beq.w	1276a <ebpf_vm_exec+0x1192>
			*(u16*)(uintptr)(DST + inst->offset) = IMM;
   121d4:	7863      	ldrb	r3, [r4, #1]
   121d6:	aa44      	add	r2, sp, #272	; 0x110
   121d8:	f003 030f 	and.w	r3, r3, #15
   121dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   121e0:	6862      	ldr	r2, [r4, #4]
   121e2:	f853 3ce0 	ldr.w	r3, [r3, #-224]
   121e6:	f823 2009 	strh.w	r2, [r3, r9]
			break;
   121ea:	f7ff bafc 	b.w	117e6 <ebpf_vm_exec+0x20e>
			BOUNDS_CHECK_STORE(1);
   121ee:	7863      	ldrb	r3, [r4, #1]
   121f0:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
   121f4:	79b0      	ldrb	r0, [r6, #6]
   121f6:	aa44      	add	r2, sp, #272	; 0x110
   121f8:	091b      	lsrs	r3, r3, #4
   121fa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   121fe:	2201      	movs	r2, #1
   12200:	f853 1ce0 	ldr.w	r1, [r3, #-224]
   12204:	e9cd 8b00 	strd	r8, fp, [sp]
   12208:	463b      	mov	r3, r7
   1220a:	4449      	add	r1, r9
   1220c:	f7ff f988 	bl	11520 <bounds_check.isra.0>
   12210:	2800      	cmp	r0, #0
   12212:	f000 82aa 	beq.w	1276a <ebpf_vm_exec+0x1192>
			*(u8*)(uintptr)(DST + inst->offset) = IMM;
   12216:	7863      	ldrb	r3, [r4, #1]
   12218:	aa44      	add	r2, sp, #272	; 0x110
   1221a:	f003 030f 	and.w	r3, r3, #15
   1221e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   12222:	6862      	ldr	r2, [r4, #4]
   12224:	f853 3ce0 	ldr.w	r3, [r3, #-224]
   12228:	f803 2009 	strb.w	r2, [r3, r9]
			break;
   1222c:	f7ff badb 	b.w	117e6 <ebpf_vm_exec+0x20e>
			BOUNDS_CHECK_STORE(8);
   12230:	7863      	ldrb	r3, [r4, #1]
   12232:	f9b4 a002 	ldrsh.w	sl, [r4, #2]
   12236:	79b0      	ldrb	r0, [r6, #6]
   12238:	aa44      	add	r2, sp, #272	; 0x110
   1223a:	091b      	lsrs	r3, r3, #4
   1223c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   12240:	e953 9338 	ldrd	r9, r3, [r3, #-224]	; 0xe0
   12244:	2208      	movs	r2, #8
   12246:	930b      	str	r3, [sp, #44]	; 0x2c
   12248:	e9cd 8b00 	strd	r8, fp, [sp]
   1224c:	463b      	mov	r3, r7
   1224e:	eb0a 0109 	add.w	r1, sl, r9
   12252:	f7ff f965 	bl	11520 <bounds_check.isra.0>
   12256:	2800      	cmp	r0, #0
   12258:	f000 8287 	beq.w	1276a <ebpf_vm_exec+0x1192>
			*(u64*)(uintptr)(DST + inst->offset) = SRC;
   1225c:	7863      	ldrb	r3, [r4, #1]
   1225e:	aa44      	add	r2, sp, #272	; 0x110
   12260:	f003 030f 	and.w	r3, r3, #15
   12264:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   12268:	f853 3ce0 	ldr.w	r3, [r3, #-224]
   1226c:	449a      	add	sl, r3
   1226e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12270:	f8ca 9000 	str.w	r9, [sl]
   12274:	f8ca 3004 	str.w	r3, [sl, #4]
			break;
   12278:	f7ff bab5 	b.w	117e6 <ebpf_vm_exec+0x20e>
			BOUNDS_CHECK_STORE(4);
   1227c:	7863      	ldrb	r3, [r4, #1]
   1227e:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
   12282:	79b0      	ldrb	r0, [r6, #6]
   12284:	aa44      	add	r2, sp, #272	; 0x110
   12286:	091b      	lsrs	r3, r3, #4
   12288:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1228c:	2204      	movs	r2, #4
   1228e:	f853 ace0 	ldr.w	sl, [r3, #-224]
   12292:	e9cd 8b00 	strd	r8, fp, [sp]
   12296:	463b      	mov	r3, r7
   12298:	eb09 010a 	add.w	r1, r9, sl
   1229c:	f7ff f940 	bl	11520 <bounds_check.isra.0>
   122a0:	2800      	cmp	r0, #0
   122a2:	f000 8262 	beq.w	1276a <ebpf_vm_exec+0x1192>
			*(u32*)(uintptr)(DST + inst->offset) = SRC;
   122a6:	7863      	ldrb	r3, [r4, #1]
   122a8:	aa44      	add	r2, sp, #272	; 0x110
   122aa:	f003 030f 	and.w	r3, r3, #15
   122ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   122b2:	f853 3ce0 	ldr.w	r3, [r3, #-224]
   122b6:	f843 a009 	str.w	sl, [r3, r9]
			break;
   122ba:	f7ff ba94 	b.w	117e6 <ebpf_vm_exec+0x20e>
			BOUNDS_CHECK_STORE(2);
   122be:	7863      	ldrb	r3, [r4, #1]
   122c0:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
   122c4:	79b0      	ldrb	r0, [r6, #6]
   122c6:	aa44      	add	r2, sp, #272	; 0x110
   122c8:	091b      	lsrs	r3, r3, #4
   122ca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   122ce:	2202      	movs	r2, #2
   122d0:	f853 ace0 	ldr.w	sl, [r3, #-224]
   122d4:	e9cd 8b00 	strd	r8, fp, [sp]
   122d8:	463b      	mov	r3, r7
   122da:	eb09 010a 	add.w	r1, r9, sl
   122de:	f7ff f91f 	bl	11520 <bounds_check.isra.0>
   122e2:	2800      	cmp	r0, #0
   122e4:	f000 8241 	beq.w	1276a <ebpf_vm_exec+0x1192>
			*(u16*)(uintptr)(DST + inst->offset) = SRC;
   122e8:	7863      	ldrb	r3, [r4, #1]
   122ea:	aa44      	add	r2, sp, #272	; 0x110
   122ec:	f003 030f 	and.w	r3, r3, #15
   122f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   122f4:	f853 3ce0 	ldr.w	r3, [r3, #-224]
   122f8:	f823 a009 	strh.w	sl, [r3, r9]
			break;
   122fc:	f7ff ba73 	b.w	117e6 <ebpf_vm_exec+0x20e>
			BOUNDS_CHECK_STORE(1);
   12300:	7863      	ldrb	r3, [r4, #1]
   12302:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
   12306:	79b0      	ldrb	r0, [r6, #6]
   12308:	aa44      	add	r2, sp, #272	; 0x110
   1230a:	091b      	lsrs	r3, r3, #4
   1230c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   12310:	2201      	movs	r2, #1
   12312:	f853 ace0 	ldr.w	sl, [r3, #-224]
   12316:	e9cd 8b00 	strd	r8, fp, [sp]
   1231a:	463b      	mov	r3, r7
   1231c:	eb09 010a 	add.w	r1, r9, sl
   12320:	f7ff f8fe 	bl	11520 <bounds_check.isra.0>
   12324:	2800      	cmp	r0, #0
   12326:	f000 8220 	beq.w	1276a <ebpf_vm_exec+0x1192>
			*(u8*)(uintptr)(DST + inst->offset) = SRC;
   1232a:	7863      	ldrb	r3, [r4, #1]
   1232c:	aa44      	add	r2, sp, #272	; 0x110
   1232e:	f003 030f 	and.w	r3, r3, #15
   12332:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   12336:	f853 3ce0 	ldr.w	r3, [r3, #-224]
   1233a:	f803 a009 	strb.w	sl, [r3, r9]
			break;
   1233e:	f7ff ba52 	b.w	117e6 <ebpf_vm_exec+0x20e>
			DST = (u64) (u32)IMM | ((u64) (u32)insts[pc++].imm << 32);
   12342:	7862      	ldrb	r2, [r4, #1]
   12344:	6860      	ldr	r0, [r4, #4]
   12346:	a944      	add	r1, sp, #272	; 0x110
   12348:	f002 020f 	and.w	r2, r2, #15
   1234c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   12350:	990a      	ldr	r1, [sp, #40]	; 0x28
   12352:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
   12356:	3302      	adds	r3, #2
   12358:	6869      	ldr	r1, [r5, #4]
   1235a:	b29d      	uxth	r5, r3
   1235c:	e942 0138 	strd	r0, r1, [r2, #-224]	; 0xe0
			break;
   12360:	f7ff ba41 	b.w	117e6 <ebpf_vm_exec+0x20e>
			pc += inst->offset;
   12364:	8863      	ldrh	r3, [r4, #2]
   12366:	441d      	add	r5, r3
   12368:	b2ad      	uxth	r5, r5
			break;
   1236a:	f7ff ba3c 	b.w	117e6 <ebpf_vm_exec+0x20e>
			if (DST == SRC) {
   1236e:	7863      	ldrb	r3, [r4, #1]
   12370:	a944      	add	r1, sp, #272	; 0x110
   12372:	f003 020f 	and.w	r2, r3, #15
   12376:	091b      	lsrs	r3, r3, #4
   12378:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   1237c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   12380:	e952 0138 	ldrd	r0, r1, [r2, #-224]	; 0xe0
   12384:	e953 2338 	ldrd	r2, r3, [r3, #-224]	; 0xe0
   12388:	4299      	cmp	r1, r3
   1238a:	bf08      	it	eq
   1238c:	4290      	cmpeq	r0, r2
   1238e:	f47f aa2a 	bne.w	117e6 <ebpf_vm_exec+0x20e>
				pc += inst->offset;
   12392:	8863      	ldrh	r3, [r4, #2]
   12394:	441d      	add	r5, r3
   12396:	b2ad      	uxth	r5, r5
   12398:	f7ff ba25 	b.w	117e6 <ebpf_vm_exec+0x20e>
			if (DST == IMM) {
   1239c:	7863      	ldrb	r3, [r4, #1]
   1239e:	6860      	ldr	r0, [r4, #4]
   123a0:	aa44      	add	r2, sp, #272	; 0x110
   123a2:	f003 030f 	and.w	r3, r3, #15
   123a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   123aa:	e953 2338 	ldrd	r2, r3, [r3, #-224]	; 0xe0
   123ae:	17c1      	asrs	r1, r0, #31
   123b0:	428b      	cmp	r3, r1
   123b2:	bf08      	it	eq
   123b4:	4282      	cmpeq	r2, r0
   123b6:	f47f aa16 	bne.w	117e6 <ebpf_vm_exec+0x20e>
				pc += inst->offset;
   123ba:	8863      	ldrh	r3, [r4, #2]
   123bc:	441d      	add	r5, r3
   123be:	b2ad      	uxth	r5, r5
   123c0:	f7ff ba11 	b.w	117e6 <ebpf_vm_exec+0x20e>
			if (DST > (u32)IMM) {
   123c4:	7863      	ldrb	r3, [r4, #1]
   123c6:	6860      	ldr	r0, [r4, #4]
   123c8:	aa44      	add	r2, sp, #272	; 0x110
   123ca:	f003 030f 	and.w	r3, r3, #15
   123ce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   123d2:	e953 2338 	ldrd	r2, r3, [r3, #-224]	; 0xe0
   123d6:	2100      	movs	r1, #0
   123d8:	4299      	cmp	r1, r3
   123da:	bf08      	it	eq
   123dc:	4290      	cmpeq	r0, r2
   123de:	f4bf aa02 	bcs.w	117e6 <ebpf_vm_exec+0x20e>
				pc += inst->offset;
   123e2:	8863      	ldrh	r3, [r4, #2]
   123e4:	441d      	add	r5, r3
   123e6:	b2ad      	uxth	r5, r5
   123e8:	f7ff b9fd 	b.w	117e6 <ebpf_vm_exec+0x20e>
			if (DST > SRC) {
   123ec:	7863      	ldrb	r3, [r4, #1]
   123ee:	a944      	add	r1, sp, #272	; 0x110
   123f0:	f003 020f 	and.w	r2, r3, #15
   123f4:	091b      	lsrs	r3, r3, #4
   123f6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   123fa:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   123fe:	e952 0138 	ldrd	r0, r1, [r2, #-224]	; 0xe0
   12402:	e953 2338 	ldrd	r2, r3, [r3, #-224]	; 0xe0
   12406:	428b      	cmp	r3, r1
   12408:	bf08      	it	eq
   1240a:	4282      	cmpeq	r2, r0
   1240c:	f4bf a9eb 	bcs.w	117e6 <ebpf_vm_exec+0x20e>
				pc += inst->offset;
   12410:	8863      	ldrh	r3, [r4, #2]
   12412:	441d      	add	r5, r3
   12414:	b2ad      	uxth	r5, r5
   12416:	f7ff b9e6 	b.w	117e6 <ebpf_vm_exec+0x20e>
			if (DST >= (u32)IMM) {
   1241a:	7863      	ldrb	r3, [r4, #1]
   1241c:	6860      	ldr	r0, [r4, #4]
   1241e:	aa44      	add	r2, sp, #272	; 0x110
   12420:	f003 030f 	and.w	r3, r3, #15
   12424:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   12428:	e953 2338 	ldrd	r2, r3, [r3, #-224]	; 0xe0
   1242c:	2100      	movs	r1, #0
   1242e:	428b      	cmp	r3, r1
   12430:	bf08      	it	eq
   12432:	4282      	cmpeq	r2, r0
   12434:	f4ff a9d7 	bcc.w	117e6 <ebpf_vm_exec+0x20e>
				pc += inst->offset;
   12438:	8863      	ldrh	r3, [r4, #2]
   1243a:	441d      	add	r5, r3
   1243c:	b2ad      	uxth	r5, r5
   1243e:	f7ff b9d2 	b.w	117e6 <ebpf_vm_exec+0x20e>
			if (DST >= SRC) {
   12442:	7863      	ldrb	r3, [r4, #1]
   12444:	a944      	add	r1, sp, #272	; 0x110
   12446:	f003 020f 	and.w	r2, r3, #15
   1244a:	091b      	lsrs	r3, r3, #4
   1244c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   12450:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   12454:	e952 0138 	ldrd	r0, r1, [r2, #-224]	; 0xe0
   12458:	e953 2338 	ldrd	r2, r3, [r3, #-224]	; 0xe0
   1245c:	4299      	cmp	r1, r3
   1245e:	bf08      	it	eq
   12460:	4290      	cmpeq	r0, r2
   12462:	f4ff a9c0 	bcc.w	117e6 <ebpf_vm_exec+0x20e>
				pc += inst->offset;
   12466:	8863      	ldrh	r3, [r4, #2]
   12468:	441d      	add	r5, r3
   1246a:	b2ad      	uxth	r5, r5
   1246c:	f7ff b9bb 	b.w	117e6 <ebpf_vm_exec+0x20e>
			if (DST < (u32)IMM) {
   12470:	7863      	ldrb	r3, [r4, #1]
   12472:	6860      	ldr	r0, [r4, #4]
   12474:	aa44      	add	r2, sp, #272	; 0x110
   12476:	f003 030f 	and.w	r3, r3, #15
   1247a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1247e:	e953 2338 	ldrd	r2, r3, [r3, #-224]	; 0xe0
   12482:	2100      	movs	r1, #0
   12484:	428b      	cmp	r3, r1
   12486:	bf08      	it	eq
   12488:	4282      	cmpeq	r2, r0
   1248a:	f4bf a9ac 	bcs.w	117e6 <ebpf_vm_exec+0x20e>
				pc += inst->offset;
   1248e:	8863      	ldrh	r3, [r4, #2]
   12490:	441d      	add	r5, r3
   12492:	b2ad      	uxth	r5, r5
   12494:	f7ff b9a7 	b.w	117e6 <ebpf_vm_exec+0x20e>
			if (DST < SRC) {
   12498:	7863      	ldrb	r3, [r4, #1]
   1249a:	a944      	add	r1, sp, #272	; 0x110
   1249c:	f003 020f 	and.w	r2, r3, #15
   124a0:	091b      	lsrs	r3, r3, #4
   124a2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   124a6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   124aa:	e952 0138 	ldrd	r0, r1, [r2, #-224]	; 0xe0
   124ae:	e953 2338 	ldrd	r2, r3, [r3, #-224]	; 0xe0
   124b2:	4299      	cmp	r1, r3
   124b4:	bf08      	it	eq
   124b6:	4290      	cmpeq	r0, r2
   124b8:	f4bf a995 	bcs.w	117e6 <ebpf_vm_exec+0x20e>
				pc += inst->offset;
   124bc:	8863      	ldrh	r3, [r4, #2]
   124be:	441d      	add	r5, r3
   124c0:	b2ad      	uxth	r5, r5
   124c2:	f7ff b990 	b.w	117e6 <ebpf_vm_exec+0x20e>
			if (DST <= (u32)IMM) {
   124c6:	7863      	ldrb	r3, [r4, #1]
   124c8:	6860      	ldr	r0, [r4, #4]
   124ca:	aa44      	add	r2, sp, #272	; 0x110
   124cc:	f003 030f 	and.w	r3, r3, #15
   124d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   124d4:	e953 2338 	ldrd	r2, r3, [r3, #-224]	; 0xe0
   124d8:	2100      	movs	r1, #0
   124da:	4299      	cmp	r1, r3
   124dc:	bf08      	it	eq
   124de:	4290      	cmpeq	r0, r2
   124e0:	f4ff a981 	bcc.w	117e6 <ebpf_vm_exec+0x20e>
				pc += inst->offset;
   124e4:	8863      	ldrh	r3, [r4, #2]
   124e6:	441d      	add	r5, r3
   124e8:	b2ad      	uxth	r5, r5
   124ea:	f7ff b97c 	b.w	117e6 <ebpf_vm_exec+0x20e>
			if (DST <= SRC) {
   124ee:	7863      	ldrb	r3, [r4, #1]
   124f0:	a944      	add	r1, sp, #272	; 0x110
   124f2:	f003 020f 	and.w	r2, r3, #15
   124f6:	091b      	lsrs	r3, r3, #4
   124f8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   124fc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   12500:	e952 0138 	ldrd	r0, r1, [r2, #-224]	; 0xe0
   12504:	e953 2338 	ldrd	r2, r3, [r3, #-224]	; 0xe0
   12508:	428b      	cmp	r3, r1
   1250a:	bf08      	it	eq
   1250c:	4282      	cmpeq	r2, r0
   1250e:	f4ff a96a 	bcc.w	117e6 <ebpf_vm_exec+0x20e>
				pc += inst->offset;
   12512:	8863      	ldrh	r3, [r4, #2]
   12514:	441d      	add	r5, r3
   12516:	b2ad      	uxth	r5, r5
   12518:	f7ff b965 	b.w	117e6 <ebpf_vm_exec+0x20e>
			if (DST & IMM) {
   1251c:	7863      	ldrb	r3, [r4, #1]
   1251e:	aa44      	add	r2, sp, #272	; 0x110
   12520:	f003 030f 	and.w	r3, r3, #15
   12524:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   12528:	e953 0338 	ldrd	r0, r3, [r3, #-224]	; 0xe0
   1252c:	6862      	ldr	r2, [r4, #4]
   1252e:	ea4f 7ae2 	mov.w	sl, r2, asr #31
   12532:	ea0a 0303 	and.w	r3, sl, r3
   12536:	4002      	ands	r2, r0
   12538:	9206      	str	r2, [sp, #24]
   1253a:	9307      	str	r3, [sp, #28]
   1253c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   12540:	4313      	orrs	r3, r2
   12542:	f43f a950 	beq.w	117e6 <ebpf_vm_exec+0x20e>
				pc += inst->offset;
   12546:	8863      	ldrh	r3, [r4, #2]
   12548:	441d      	add	r5, r3
   1254a:	b2ad      	uxth	r5, r5
   1254c:	f7ff b94b 	b.w	117e6 <ebpf_vm_exec+0x20e>
			if (DST & SRC) {
   12550:	7863      	ldrb	r3, [r4, #1]
   12552:	a944      	add	r1, sp, #272	; 0x110
   12554:	f003 020f 	and.w	r2, r3, #15
   12558:	091b      	lsrs	r3, r3, #4
   1255a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   1255e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   12562:	e952 0238 	ldrd	r0, r2, [r2, #-224]	; 0xe0
   12566:	e953 1338 	ldrd	r1, r3, [r3, #-224]	; 0xe0
   1256a:	4013      	ands	r3, r2
   1256c:	4001      	ands	r1, r0
   1256e:	9108      	str	r1, [sp, #32]
   12570:	9309      	str	r3, [sp, #36]	; 0x24
   12572:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   12576:	4313      	orrs	r3, r2
   12578:	f43f a935 	beq.w	117e6 <ebpf_vm_exec+0x20e>
				pc += inst->offset;
   1257c:	8863      	ldrh	r3, [r4, #2]
   1257e:	441d      	add	r5, r3
   12580:	b2ad      	uxth	r5, r5
   12582:	f7ff b930 	b.w	117e6 <ebpf_vm_exec+0x20e>
			if (DST != IMM) {
   12586:	7863      	ldrb	r3, [r4, #1]
   12588:	6860      	ldr	r0, [r4, #4]
   1258a:	aa44      	add	r2, sp, #272	; 0x110
   1258c:	f003 030f 	and.w	r3, r3, #15
   12590:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   12594:	e953 2338 	ldrd	r2, r3, [r3, #-224]	; 0xe0
   12598:	17c1      	asrs	r1, r0, #31
   1259a:	428b      	cmp	r3, r1
   1259c:	bf08      	it	eq
   1259e:	4282      	cmpeq	r2, r0
   125a0:	f43f a921 	beq.w	117e6 <ebpf_vm_exec+0x20e>
				pc += inst->offset;
   125a4:	8863      	ldrh	r3, [r4, #2]
   125a6:	441d      	add	r5, r3
   125a8:	b2ad      	uxth	r5, r5
   125aa:	f7ff b91c 	b.w	117e6 <ebpf_vm_exec+0x20e>
			if (DST != SRC) {
   125ae:	7863      	ldrb	r3, [r4, #1]
   125b0:	a944      	add	r1, sp, #272	; 0x110
   125b2:	f003 020f 	and.w	r2, r3, #15
   125b6:	091b      	lsrs	r3, r3, #4
   125b8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   125bc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   125c0:	e952 0138 	ldrd	r0, r1, [r2, #-224]	; 0xe0
   125c4:	e953 2338 	ldrd	r2, r3, [r3, #-224]	; 0xe0
   125c8:	4299      	cmp	r1, r3
   125ca:	bf08      	it	eq
   125cc:	4290      	cmpeq	r0, r2
   125ce:	f43f a90a 	beq.w	117e6 <ebpf_vm_exec+0x20e>
				pc += inst->offset;
   125d2:	8863      	ldrh	r3, [r4, #2]
   125d4:	441d      	add	r5, r3
   125d6:	b2ad      	uxth	r5, r5
   125d8:	f7ff b905 	b.w	117e6 <ebpf_vm_exec+0x20e>
			if ((s64)DST > (s64) IMM) {
   125dc:	7863      	ldrb	r3, [r4, #1]
   125de:	6860      	ldr	r0, [r4, #4]
   125e0:	aa44      	add	r2, sp, #272	; 0x110
   125e2:	f003 030f 	and.w	r3, r3, #15
   125e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   125ea:	e953 2338 	ldrd	r2, r3, [r3, #-224]	; 0xe0
   125ee:	17c1      	asrs	r1, r0, #31
   125f0:	4290      	cmp	r0, r2
   125f2:	eb71 0303 	sbcs.w	r3, r1, r3
   125f6:	f6bf a8f6 	bge.w	117e6 <ebpf_vm_exec+0x20e>
				pc += inst->offset;
   125fa:	8863      	ldrh	r3, [r4, #2]
   125fc:	441d      	add	r5, r3
   125fe:	b2ad      	uxth	r5, r5
   12600:	f7ff b8f1 	b.w	117e6 <ebpf_vm_exec+0x20e>
			if ((s64)DST > (s64)SRC) {
   12604:	7863      	ldrb	r3, [r4, #1]
   12606:	a944      	add	r1, sp, #272	; 0x110
   12608:	f003 020f 	and.w	r2, r3, #15
   1260c:	091b      	lsrs	r3, r3, #4
   1260e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   12612:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   12616:	e952 0138 	ldrd	r0, r1, [r2, #-224]	; 0xe0
   1261a:	e953 2338 	ldrd	r2, r3, [r3, #-224]	; 0xe0
   1261e:	4282      	cmp	r2, r0
   12620:	418b      	sbcs	r3, r1
   12622:	f6bf a8e0 	bge.w	117e6 <ebpf_vm_exec+0x20e>
				pc += inst->offset;
   12626:	8863      	ldrh	r3, [r4, #2]
   12628:	441d      	add	r5, r3
   1262a:	b2ad      	uxth	r5, r5
   1262c:	f7ff b8db 	b.w	117e6 <ebpf_vm_exec+0x20e>
			if ((s64)DST >= (s64) IMM) {
   12630:	7863      	ldrb	r3, [r4, #1]
   12632:	6860      	ldr	r0, [r4, #4]
   12634:	aa44      	add	r2, sp, #272	; 0x110
   12636:	f003 030f 	and.w	r3, r3, #15
   1263a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1263e:	e953 2338 	ldrd	r2, r3, [r3, #-224]	; 0xe0
   12642:	17c1      	asrs	r1, r0, #31
   12644:	4282      	cmp	r2, r0
   12646:	418b      	sbcs	r3, r1
   12648:	f6ff a8cd 	blt.w	117e6 <ebpf_vm_exec+0x20e>
				pc += inst->offset;
   1264c:	8863      	ldrh	r3, [r4, #2]
   1264e:	441d      	add	r5, r3
   12650:	b2ad      	uxth	r5, r5
   12652:	f7ff b8c8 	b.w	117e6 <ebpf_vm_exec+0x20e>
			if ((s64)DST >= (s64)SRC) {
   12656:	7863      	ldrb	r3, [r4, #1]
   12658:	a944      	add	r1, sp, #272	; 0x110
   1265a:	f003 020f 	and.w	r2, r3, #15
   1265e:	091b      	lsrs	r3, r3, #4
   12660:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   12664:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   12668:	e952 0138 	ldrd	r0, r1, [r2, #-224]	; 0xe0
   1266c:	e953 2338 	ldrd	r2, r3, [r3, #-224]	; 0xe0
   12670:	4290      	cmp	r0, r2
   12672:	eb71 0303 	sbcs.w	r3, r1, r3
   12676:	f6ff a8b6 	blt.w	117e6 <ebpf_vm_exec+0x20e>
				pc += inst->offset;
   1267a:	8863      	ldrh	r3, [r4, #2]
   1267c:	441d      	add	r5, r3
   1267e:	b2ad      	uxth	r5, r5
   12680:	f7ff b8b1 	b.w	117e6 <ebpf_vm_exec+0x20e>
			if ((s64)DST < (s64) IMM) {
   12684:	7863      	ldrb	r3, [r4, #1]
   12686:	6860      	ldr	r0, [r4, #4]
   12688:	aa44      	add	r2, sp, #272	; 0x110
   1268a:	f003 030f 	and.w	r3, r3, #15
   1268e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   12692:	e953 2338 	ldrd	r2, r3, [r3, #-224]	; 0xe0
   12696:	17c1      	asrs	r1, r0, #31
   12698:	4282      	cmp	r2, r0
   1269a:	418b      	sbcs	r3, r1
   1269c:	f6bf a8a3 	bge.w	117e6 <ebpf_vm_exec+0x20e>
				pc += inst->offset;
   126a0:	8863      	ldrh	r3, [r4, #2]
   126a2:	441d      	add	r5, r3
   126a4:	b2ad      	uxth	r5, r5
   126a6:	f7ff b89e 	b.w	117e6 <ebpf_vm_exec+0x20e>
			if ((s64)DST < (s64)SRC) {
   126aa:	7863      	ldrb	r3, [r4, #1]
   126ac:	a944      	add	r1, sp, #272	; 0x110
   126ae:	f003 020f 	and.w	r2, r3, #15
   126b2:	091b      	lsrs	r3, r3, #4
   126b4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   126b8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   126bc:	e952 0138 	ldrd	r0, r1, [r2, #-224]	; 0xe0
   126c0:	e953 2338 	ldrd	r2, r3, [r3, #-224]	; 0xe0
   126c4:	4290      	cmp	r0, r2
   126c6:	eb71 0303 	sbcs.w	r3, r1, r3
   126ca:	f6bf a88c 	bge.w	117e6 <ebpf_vm_exec+0x20e>
				pc += inst->offset;
   126ce:	8863      	ldrh	r3, [r4, #2]
   126d0:	441d      	add	r5, r3
   126d2:	b2ad      	uxth	r5, r5
   126d4:	f7ff b887 	b.w	117e6 <ebpf_vm_exec+0x20e>
			if ((s64)DST <= (s64) IMM) {
   126d8:	7863      	ldrb	r3, [r4, #1]
   126da:	6860      	ldr	r0, [r4, #4]
   126dc:	aa44      	add	r2, sp, #272	; 0x110
   126de:	f003 030f 	and.w	r3, r3, #15
   126e2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   126e6:	e953 2338 	ldrd	r2, r3, [r3, #-224]	; 0xe0
   126ea:	17c1      	asrs	r1, r0, #31
   126ec:	4290      	cmp	r0, r2
   126ee:	eb71 0303 	sbcs.w	r3, r1, r3
   126f2:	f6ff a878 	blt.w	117e6 <ebpf_vm_exec+0x20e>
				pc += inst->offset;
   126f6:	8863      	ldrh	r3, [r4, #2]
   126f8:	441d      	add	r5, r3
   126fa:	b2ad      	uxth	r5, r5
   126fc:	f7ff b873 	b.w	117e6 <ebpf_vm_exec+0x20e>
			if ((s64)DST <= (s64)SRC) {
   12700:	7863      	ldrb	r3, [r4, #1]
   12702:	a944      	add	r1, sp, #272	; 0x110
   12704:	f003 020f 	and.w	r2, r3, #15
   12708:	091b      	lsrs	r3, r3, #4
   1270a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   1270e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   12712:	e952 0138 	ldrd	r0, r1, [r2, #-224]	; 0xe0
   12716:	e953 2338 	ldrd	r2, r3, [r3, #-224]	; 0xe0
   1271a:	4282      	cmp	r2, r0
   1271c:	418b      	sbcs	r3, r1
   1271e:	f6ff a862 	blt.w	117e6 <ebpf_vm_exec+0x20e>
				pc += inst->offset;
   12722:	8863      	ldrh	r3, [r4, #2]
   12724:	441d      	add	r5, r3
   12726:	b2ad      	uxth	r5, r5
   12728:	f7ff b85d 	b.w	117e6 <ebpf_vm_exec+0x20e>
			reg[0] = vm->helper_func->ext_funcs[inst->imm](reg[1], reg[2], reg[3], reg[4], reg[5]);
   1272c:	68b3      	ldr	r3, [r6, #8]
   1272e:	6860      	ldr	r0, [r4, #4]
   12730:	6819      	ldr	r1, [r3, #0]
   12732:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   12736:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1273a:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   1273e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   12742:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   12746:	e9cd 2300 	strd	r2, r3, [sp]
   1274a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   1274e:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
   12752:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   12756:	47a0      	blx	r4
   12758:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
			break;
   1275c:	f7ff b843 	b.w	117e6 <ebpf_vm_exec+0x20e>
			return reg[0];
   12760:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
}
   12764:	b045      	add	sp, #276	; 0x114
   12766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				return -1;
   1276a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1276e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12772:	e7f7      	b.n	12764 <ebpf_vm_exec+0x118c>

00012774 <binary_search>:
#include <string.h>
// #include "hotpatch/include/utils.h"

#define MAP_GROW 4

static int binary_search(void **arr, int size, uint32_t val) {
   12774:	b530      	push	{r4, r5, lr}
	int start = 0;
	int end = size - 1;
   12776:	3901      	subs	r1, #1
	int start = 0;
   12778:	2400      	movs	r4, #0
	while (start <= end) {
   1277a:	428c      	cmp	r4, r1
   1277c:	dd03      	ble.n	12786 <binary_search+0x12>
			end = mid - 1;
		} else {
			start = mid + 1;
		}
	}
	return -1;
   1277e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   12782:	4618      	mov	r0, r3
   12784:	bd30      	pop	{r4, r5, pc}
		int mid = (start + end) / 2;
   12786:	1863      	adds	r3, r4, r1
   12788:	105b      	asrs	r3, r3, #1
		if (m == val) {
   1278a:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
   1278e:	4295      	cmp	r5, r2
   12790:	d0f7      	beq.n	12782 <binary_search+0xe>
			end = mid - 1;
   12792:	bf8c      	ite	hi
   12794:	f103 31ff 	addhi.w	r1, r3, #4294967295	; 0xffffffff
			start = mid + 1;
   12798:	1c5c      	addls	r4, r3, #1
   1279a:	e7ee      	b.n	1277a <binary_search+0x6>

0001279c <arraymap_new>:
	if (key < arr->cur_size) {
		arr->vals[key] = NULL;
	}
}

arraymap *arraymap_new(int initial_size) {
   1279c:	b538      	push	{r3, r4, r5, lr}
   1279e:	4605      	mov	r5, r0
	arraymap *map = ebpf_malloc(sizeof(arraymap));
   127a0:	200c      	movs	r0, #12
   127a2:	f7f1 f96b 	bl	3a7c <ebpf_malloc>
	map->cur_size = 0;
   127a6:	2300      	movs	r3, #0
	map->max_size = initial_size;
   127a8:	8005      	strh	r5, [r0, #0]
	map->keys = ebpf_malloc(initial_size * sizeof(void *));
   127aa:	00ad      	lsls	r5, r5, #2
	arraymap *map = ebpf_malloc(sizeof(arraymap));
   127ac:	4604      	mov	r4, r0
	map->cur_size = 0;
   127ae:	8043      	strh	r3, [r0, #2]
	map->keys = ebpf_malloc(initial_size * sizeof(void *));
   127b0:	4628      	mov	r0, r5
   127b2:	f7f1 f963 	bl	3a7c <ebpf_malloc>
   127b6:	6060      	str	r0, [r4, #4]
	map->vals = ebpf_malloc(initial_size * sizeof(void *));
   127b8:	4628      	mov	r0, r5
   127ba:	f7f1 f95f 	bl	3a7c <ebpf_malloc>
   127be:	60a0      	str	r0, [r4, #8]
	return map;
}
   127c0:	4620      	mov	r0, r4
   127c2:	bd38      	pop	{r3, r4, r5, pc}

000127c4 <arraymap_destroy>:

void arraymap_destroy(arraymap *map) {
   127c4:	b510      	push	{r4, lr}
   127c6:	4604      	mov	r4, r0
	ebpf_free(map->keys);
   127c8:	6840      	ldr	r0, [r0, #4]
   127ca:	f7fe fea5 	bl	11518 <ebpf_free>
	ebpf_free(map->vals);
   127ce:	68a0      	ldr	r0, [r4, #8]
   127d0:	f7fe fea2 	bl	11518 <ebpf_free>
	ebpf_free(map);
   127d4:	4620      	mov	r0, r4
}
   127d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ebpf_free(map);
   127da:	f7fe be9d 	b.w	11518 <ebpf_free>

000127de <arraymap_set>:

int arraymap_set(arraymap *map, void *key, void *val) {
   127de:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127e2:	4617      	mov	r7, r2
	if (map->cur_size == 0) {
   127e4:	8842      	ldrh	r2, [r0, #2]
int arraymap_set(arraymap *map, void *key, void *val) {
   127e6:	4604      	mov	r4, r0
   127e8:	460e      	mov	r6, r1
   127ea:	6840      	ldr	r0, [r0, #4]
	if (map->cur_size == 0) {
   127ec:	b942      	cbnz	r2, 12800 <arraymap_set+0x22>
		map->keys[0] = key;
   127ee:	6001      	str	r1, [r0, #0]
		map->vals[0] = val;
   127f0:	68a3      	ldr	r3, [r4, #8]
   127f2:	601f      	str	r7, [r3, #0]
		map->cur_size++;
   127f4:	2301      	movs	r3, #1
   127f6:	8063      	strh	r3, [r4, #2]
		return 0;
   127f8:	4615      	mov	r5, r2
	map->keys[insert] = key;
	map->vals[insert] = val;
	map->cur_size++;
	//DEBUG_LOG("%u insert: %d sz: %d\n", (uint32_t) key, insert, map->cur_size);
	return insert;
}
   127fa:	4628      	mov	r0, r5
   127fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int insert = lower_bound(map->keys, map->cur_size, (uint32_t) key);
   12800:	4615      	mov	r5, r2
	int start = 0;
   12802:	2100      	movs	r1, #0
	while (start + 1 < end) {
   12804:	1c4b      	adds	r3, r1, #1
   12806:	42ab      	cmp	r3, r5
   12808:	db09      	blt.n	1281e <arraymap_set+0x40>
	if ((uint32_t)(map->keys[insert]) == (uint32_t) key) {
   1280a:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
   1280e:	42b3      	cmp	r3, r6
   12810:	ea4f 0985 	mov.w	r9, r5, lsl #2
   12814:	d10e      	bne.n	12834 <arraymap_set+0x56>
		map->vals[insert] = val;
   12816:	68a3      	ldr	r3, [r4, #8]
   12818:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
		return;
   1281c:	e7ed      	b.n	127fa <arraymap_set+0x1c>
		mid = (start + end) / 2;
   1281e:	194b      	adds	r3, r1, r5
   12820:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   12824:	105b      	asrs	r3, r3, #1
		if ((uint32_t) arr[mid] < val) { // (start, mid]
   12826:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
   1282a:	4566      	cmp	r6, ip
		mid = (start + end) / 2;
   1282c:	bf94      	ite	ls
   1282e:	461d      	movls	r5, r3
   12830:	4619      	movhi	r1, r3
   12832:	e7e7      	b.n	12804 <arraymap_set+0x26>
	if (map->cur_size >= map->max_size) {
   12834:	8823      	ldrh	r3, [r4, #0]
   12836:	429a      	cmp	r2, r3
   12838:	d314      	bcc.n	12864 <arraymap_set+0x86>
		int new_size = map->max_size + MAP_GROW;
   1283a:	f103 0804 	add.w	r8, r3, #4
		int ori_size = sizeof(darray) + map->max_size * sizeof(void *);
   1283e:	f103 0a02 	add.w	sl, r3, #2
   12842:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
		map->keys = ebpf_realloc(map->keys, ori_size, new_size * sizeof(void *));
   12846:	ea4f 0b88 	mov.w	fp, r8, lsl #2
   1284a:	465a      	mov	r2, fp
   1284c:	4651      	mov	r1, sl
   1284e:	f7f1 f91d 	bl	3a8c <ebpf_realloc>
		map->vals = ebpf_realloc(map->vals, ori_size, new_size * sizeof(void *));
   12852:	465a      	mov	r2, fp
		map->keys = ebpf_realloc(map->keys, ori_size, new_size * sizeof(void *));
   12854:	6060      	str	r0, [r4, #4]
		map->vals = ebpf_realloc(map->vals, ori_size, new_size * sizeof(void *));
   12856:	4651      	mov	r1, sl
   12858:	68a0      	ldr	r0, [r4, #8]
   1285a:	f7f1 f917 	bl	3a8c <ebpf_realloc>
		map->max_size = new_size;
   1285e:	f8a4 8000 	strh.w	r8, [r4]
		map->vals = ebpf_realloc(map->vals, ori_size, new_size * sizeof(void *));
   12862:	60a0      	str	r0, [r4, #8]
	for (int i = map->cur_size; i > insert; i--) {
   12864:	f8b4 c002 	ldrh.w	ip, [r4, #2]
   12868:	4663      	mov	r3, ip
   1286a:	42ab      	cmp	r3, r5
   1286c:	6861      	ldr	r1, [r4, #4]
   1286e:	dc08      	bgt.n	12882 <arraymap_set+0xa4>
	map->keys[insert] = key;
   12870:	f841 6009 	str.w	r6, [r1, r9]
	map->vals[insert] = val;
   12874:	68a3      	ldr	r3, [r4, #8]
	map->cur_size++;
   12876:	f10c 0201 	add.w	r2, ip, #1
	map->vals[insert] = val;
   1287a:	f843 7009 	str.w	r7, [r3, r9]
	map->cur_size++;
   1287e:	8062      	strh	r2, [r4, #2]
	return insert;
   12880:	e7bb      	b.n	127fa <arraymap_set+0x1c>
		map->keys[i] = map->keys[i - 1];
   12882:	0098      	lsls	r0, r3, #2
   12884:	3804      	subs	r0, #4
   12886:	580a      	ldr	r2, [r1, r0]
   12888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		map->vals[i] = map->vals[i - 1];
   1288c:	68a1      	ldr	r1, [r4, #8]
   1288e:	5808      	ldr	r0, [r1, r0]
   12890:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   12894:	3b01      	subs	r3, #1
   12896:	e7e8      	b.n	1286a <arraymap_set+0x8c>

00012898 <arraymap_get>:

void* arraymap_get(arraymap *map, void * key) {
   12898:	b510      	push	{r4, lr}
	int idx = binary_search(map->keys, map->cur_size, (uint32_t) key);
   1289a:	460a      	mov	r2, r1
void* arraymap_get(arraymap *map, void * key) {
   1289c:	4604      	mov	r4, r0
	int idx = binary_search(map->keys, map->cur_size, (uint32_t) key);
   1289e:	8841      	ldrh	r1, [r0, #2]
   128a0:	6840      	ldr	r0, [r0, #4]
   128a2:	f7ff ff67 	bl	12774 <binary_search>
	// DEBUG_LOG("search: %d key: %u sz: %d %d\n", idx, key, map->cur_size);
	if (idx != -1) {
   128a6:	1c43      	adds	r3, r0, #1
		return map->vals[idx];
   128a8:	bf16      	itet	ne
   128aa:	68a3      	ldrne	r3, [r4, #8]
	}
	return NULL;
   128ac:	2000      	moveq	r0, #0
		return map->vals[idx];
   128ae:	f853 0020 	ldrne.w	r0, [r3, r0, lsl #2]
}
   128b2:	bd10      	pop	{r4, pc}

000128b4 <arraymap_iter_val>:
	}
	return map->keys[idx];
}

void* arraymap_iter_val(arraymap *map, int idx) {
	if (idx < 0 || idx >= map->cur_size) {
   128b4:	2900      	cmp	r1, #0
   128b6:	db06      	blt.n	128c6 <arraymap_iter_val+0x12>
   128b8:	8843      	ldrh	r3, [r0, #2]
   128ba:	428b      	cmp	r3, r1
   128bc:	dd03      	ble.n	128c6 <arraymap_iter_val+0x12>
		return NULL;
	}
	return map->vals[idx];
   128be:	6883      	ldr	r3, [r0, #8]
   128c0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   128c4:	4770      	bx	lr
		return NULL;
   128c6:	2000      	movs	r0, #0
}
   128c8:	4770      	bx	lr

000128ca <jit_mem_free>:

void jit_mem_free(jit_mem *mem) {
	mem->code_size = 0;
   128ca:	2300      	movs	r3, #0
	mem->jit_code = NULL;
   128cc:	e9c0 3300 	strd	r3, r3, [r0]
	mem->jmp_offsets = NULL;
   128d0:	6083      	str	r3, [r0, #8]
}
   128d2:	4770      	bx	lr

000128d4 <jit_state_set_mem>:

#endif

void jit_state_set_mem(jit_state *state, jit_mem *mem) {
	state->jmem = mem;
	state->jit_code = (uint8_t *) ((uint32_t) mem->jit_code & (~0x3));
   128d4:	680b      	ldr	r3, [r1, #0]
	state->jmem = mem;
   128d6:	6241      	str	r1, [r0, #36]	; 0x24
	state->jit_code = (uint8_t *) ((uint32_t) mem->jit_code & (~0x3));
   128d8:	f023 0303 	bic.w	r3, r3, #3
   128dc:	6083      	str	r3, [r0, #8]
	state->offsets = (uint32_t *) mem->jmp_offsets;
   128de:	688b      	ldr	r3, [r1, #8]
   128e0:	61c3      	str	r3, [r0, #28]
}
   128e2:	4770      	bx	lr

000128e4 <gen_jit_code>:

void gen_jit_code(struct ebpf_vm *vm) {
   128e4:	b510      	push	{r4, lr}
	if (vm->jmem != NULL) {
   128e6:	6903      	ldr	r3, [r0, #16]
void gen_jit_code(struct ebpf_vm *vm) {
   128e8:	b08c      	sub	sp, #48	; 0x30
   128ea:	4604      	mov	r4, r0
	if (vm->jmem != NULL) {
   128ec:	b11b      	cbz	r3, 128f6 <gen_jit_code+0x12>
	mem->code_size = 0;
   128ee:	2200      	movs	r2, #0
	mem->jit_code = NULL;
   128f0:	e9c3 2200 	strd	r2, r2, [r3]
	mem->jmp_offsets = NULL;
   128f4:	609a      	str	r2, [r3, #8]
		jit_mem_free(vm->jmem);
	}
	vm->jmem = jit_mem_allocate(vm->num_insts);
   128f6:	88a0      	ldrh	r0, [r4, #4]
   128f8:	f7f1 f96e 	bl	3bd8 <jit_mem_allocate>
	jit_state state;
	state.insts = vm->insts;
   128fc:	6823      	ldr	r3, [r4, #0]
   128fe:	9301      	str	r3, [sp, #4]
	state.inst_num = vm->num_insts;
   12900:	88a3      	ldrh	r3, [r4, #4]
   12902:	9302      	str	r3, [sp, #8]
	state.idx = 0;
   12904:	2300      	movs	r3, #0
   12906:	9305      	str	r3, [sp, #20]
	//state.jit_code = (uint8_t *) ((uint32_t) vm->jmem->jit_code & (~0x3));
	state.err_line = 0;
   12908:	9307      	str	r3, [sp, #28]
	state.__bpf_call_base = vm->helper_func->ext_funcs;
   1290a:	68a3      	ldr	r3, [r4, #8]
	vm->jmem = jit_mem_allocate(vm->num_insts);
   1290c:	6120      	str	r0, [r4, #16]
   1290e:	4601      	mov	r1, r0
	state.__bpf_call_base = vm->helper_func->ext_funcs;
   12910:	681b      	ldr	r3, [r3, #0]
   12912:	9309      	str	r3, [sp, #36]	; 0x24
	jit_state_set_mem(&state, vm->jmem);
   12914:	a801      	add	r0, sp, #4
   12916:	f7ff ffdd 	bl	128d4 <jit_state_set_mem>
	jit_compile(&state);
   1291a:	a801      	add	r0, sp, #4
   1291c:	f7f2 fb50 	bl	4fc0 <jit_compile>
	vm->jit_func = (ebpf_jit_fn) ((uint32_t) vm->jmem->jit_code | 0x1);
   12920:	6923      	ldr	r3, [r4, #16]
   12922:	681b      	ldr	r3, [r3, #0]
   12924:	f043 0301 	orr.w	r3, r3, #1
   12928:	60e3      	str	r3, [r4, #12]

#ifdef SYS_CORTEX_M4
	__asm__("DSB");
   1292a:	f3bf 8f4f 	dsb	sy
	__asm__("ISB");
   1292e:	f3bf 8f6f 	isb	sy
#endif
	jit_dump_inst(&state);
   12932:	a801      	add	r0, sp, #4
   12934:	f7f1 fc6e 	bl	4214 <jit_dump_inst>
#ifdef LINUX_TEST
	// jit_dump_inst(&state);
#endif
}
   12938:	b00c      	add	sp, #48	; 0x30
   1293a:	bd10      	pop	{r4, pc}

0001293c <jit_mem_statistic>:

int jit_mem_statistic(struct ebpf_vm *vm) {
	int code_size = vm->num_insts * 4;
   1293c:	8880      	ldrh	r0, [r0, #4]
	int jit_size = 10 * vm->num_insts + 16;
	int offset_size = 4 * vm->num_insts + 16;
	int mem = code_size + jit_size + offset_size;
	return code_size;
}
   1293e:	0080      	lsls	r0, r0, #2
   12940:	4770      	bx	lr

00012942 <emit2>:

static inline void
emit_bytes(struct jit_state *state, void *data, uint32_t len) 
{
    // my_printf("emit_bytes: %s 0x%x\n", state->jit_code, *((uint16_t*) data));
    if (state->needGen) {
   12942:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   12946:	b113      	cbz	r3, 1294e <emit2+0xc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   12948:	6882      	ldr	r2, [r0, #8]
   1294a:	6903      	ldr	r3, [r0, #16]
   1294c:	52d1      	strh	r1, [r2, r3]
    // uint8_t *d = (uint8_t *) data;
    // for (int i = 0; i < len; i++) {
    //     state->jit_code[state->idx + i] = d[i];
    //     my_printf("state->jit_code[%d] = 0x%x\n", state->idx + i, d[i]);
    // }
    state->idx += len;
   1294e:	6903      	ldr	r3, [r0, #16]
   12950:	3302      	adds	r3, #2
   12952:	6103      	str	r3, [r0, #16]
static inline void
emit2(struct jit_state *state, uint16_t x)
{
    emit_bytes(state, &x, sizeof(x));
    //state->inst_loc += 1;
}
   12954:	4770      	bx	lr

00012956 <emit4>:

// little edian
static inline void
emit4(struct jit_state *state, uint32_t x)
{
   12956:	b538      	push	{r3, r4, r5, lr}
   12958:	460c      	mov	r4, r1
    uint16_t *u2 = (uint16_t *) (&x);
    emit2(state, u2[1]);
   1295a:	0c09      	lsrs	r1, r1, #16
   1295c:	f7ff fff1 	bl	12942 <emit2>
    emit2(state, u2[0]);
   12960:	b2a1      	uxth	r1, r4
    // emit_bytes(state, &u2[1], sizeof(u2[1]));
    // emit_bytes(state, &u2[0], sizeof(u2[0]));
}
   12962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    emit2(state, u2[0]);
   12966:	f7ff bfec 	b.w	12942 <emit2>

0001296a <arm_bpf_get_reg32>:
	if (is_stacked(reg)) {
   1296a:	1e0b      	subs	r3, r1, #0
static int8_t arm_bpf_get_reg32(jit_state *state, s8 reg, s8 tmp) {
   1296c:	b510      	push	{r4, lr}
   1296e:	4614      	mov	r4, r2
	if (is_stacked(reg)) {
   12970:	da04      	bge.n	1297c <arm_bpf_get_reg32+0x12>
        _emit_ldr_i(state, tmp, ARM_FP, off);
   12972:	220b      	movs	r2, #11
   12974:	4621      	mov	r1, r4
   12976:	f7f1 f95f 	bl	3c38 <_emit_ldr_i>
		reg = tmp;
   1297a:	4623      	mov	r3, r4
}
   1297c:	4618      	mov	r0, r3
   1297e:	bd10      	pop	{r4, pc}

00012980 <_emit_str_i>:
    u8 P = off != 0;
   12980:	2b00      	cmp	r3, #0
static void _emit_str_i(jit_state *state, const s8 RnSrc, const s8 Rt,  s16 off) {
   12982:	b430      	push	{r4, r5}
    u8 U = off > 0, W = 0;
   12984:	bfcc      	ite	gt
   12986:	2501      	movgt	r5, #1
   12988:	2500      	movle	r5, #0
    u8 flag = 0b1000 | (P << 2) | (U << 1) | (W);
   1298a:	bf14      	ite	ne
   1298c:	2404      	movne	r4, #4
   1298e:	2400      	moveq	r4, #0
   12990:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    u32 inst = (THUMB2_STR_IMM)  | (RnSrc << 16) | (Rt << 12) | (flag << 8) | (imm8);
   12994:	f044 0408 	orr.w	r4, r4, #8
   12998:	0312      	lsls	r2, r2, #12
    u8 imm8 = off > 0 ? off : -off;
   1299a:	2b00      	cmp	r3, #0
    u32 inst = (THUMB2_STR_IMM)  | (RnSrc << 16) | (Rt << 12) | (flag << 8) | (imm8);
   1299c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
    u8 imm8 = off > 0 ? off : -off;
   129a0:	bfb8      	it	lt
   129a2:	425b      	neglt	r3, r3
    u32 inst = (THUMB2_STR_IMM)  | (RnSrc << 16) | (Rt << 12) | (flag << 8) | (imm8);
   129a4:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   129a8:	b2da      	uxtb	r2, r3
   129aa:	4311      	orrs	r1, r2
    emit4(state, inst);
   129ac:	f041 4178 	orr.w	r1, r1, #4160749568	; 0xf8000000
   129b0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
}
   129b4:	bc30      	pop	{r4, r5}
    emit4(state, inst);
   129b6:	f7ff bfce 	b.w	12956 <emit4>

000129ba <_emit_strd_i.constprop.27>:
static void _emit_strd_i(jit_state *state, const s8 RnSrc[], const s8 RtDst,  s16 off) {
   129ba:	b410      	push	{r4}
    u32 P = offImm8 != 0;
   129bc:	2a00      	cmp	r2, #0
    u32 imm8 = offImm8 > 0 ? offImm8 : -offImm8;
   129be:	ea82 74e2 	eor.w	r4, r2, r2, asr #31
   129c2:	eba4 74e2 	sub.w	r4, r4, r2, asr #31
    u32 inst = (THUMB2_STRD_IMM) | (P << 24) | (U << 23) | (W << 22) | 
   129c6:	bf18      	it	ne
   129c8:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
    u32 U = offImm8 > 0, W = 0;
   129cc:	bfcc      	ite	gt
   129ce:	2201      	movgt	r2, #1
   129d0:	2200      	movle	r2, #0
    u32 inst = (THUMB2_STRD_IMM) | (P << 24) | (U << 23) | (W << 22) | 
   129d2:	bf08      	it	eq
   129d4:	2300      	moveq	r3, #0
   129d6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
        (RtDst << 16) | (RnSrc[1] << 12) | (RnSrc[0] << 8) | (imm8);
   129da:	f991 2000 	ldrsb.w	r2, [r1]
   129de:	f991 1001 	ldrsb.w	r1, [r1, #1]
    imm8 = (imm8 >> 2) & 0xff;
   129e2:	f3c4 0487 	ubfx	r4, r4, #2, #8
    u32 inst = (THUMB2_STRD_IMM) | (P << 24) | (U << 23) | (W << 22) | 
   129e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   129ea:	4323      	orrs	r3, r4
   129ec:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    emit4(state, _thumb32_STRD_IMM_T1(RnSrc, RtDst, off));
   129f0:	f041 4168 	orr.w	r1, r1, #3892314112	; 0xe8000000
   129f4:	f441 0196 	orr.w	r1, r1, #4915200	; 0x4b0000
}
   129f8:	bc10      	pop	{r4}
    emit4(state, _thumb32_STRD_IMM_T1(RnSrc, RtDst, off));
   129fa:	f7ff bfac 	b.w	12956 <emit4>

000129fe <_emit_ldrd_i.constprop.29>:
static void _emit_ldrd_i(jit_state *state, const s8 Rt[], const s8 Rn, s16 off) {
   129fe:	b410      	push	{r4}
    u32 P = offImm8 != 0, U = offImm8 > 0, W = 0;
   12a00:	2a00      	cmp	r2, #0
    u32 imm8 = offImm8 > 0 ? offImm8 : -offImm8;
   12a02:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
   12a06:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    u32 P = offImm8 != 0, U = offImm8 > 0, W = 0;
   12a0a:	bfcc      	ite	gt
   12a0c:	2401      	movgt	r4, #1
   12a0e:	2400      	movle	r4, #0
    u32 flag = 0b0010 | (P << 3) | (U << 2) | W;
   12a10:	bf14      	ite	ne
   12a12:	2208      	movne	r2, #8
   12a14:	2200      	moveq	r2, #0
   12a16:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
    u32 inst = (THUMB2_LDRD_IMM) | (flag << 21) | (Rn << 16) | (Rt[1] << 12) | (Rt[0] << 8) | (imm8);
   12a1a:	f991 4001 	ldrsb.w	r4, [r1, #1]
   12a1e:	f991 1000 	ldrsb.w	r1, [r1]
   12a22:	0209      	lsls	r1, r1, #8
   12a24:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
   12a28:	ea41 5142 	orr.w	r1, r1, r2, lsl #21
    imm8 = (imm8 >> 2) & 0xff;
   12a2c:	f3c3 0387 	ubfx	r3, r3, #2, #8
    u32 inst = (THUMB2_LDRD_IMM) | (flag << 21) | (Rn << 16) | (Rt[1] << 12) | (Rt[0] << 8) | (imm8);
   12a30:	4319      	orrs	r1, r3
    emit4(state, _thumb32_LDRD_IMM_T1(Rt, Rn, off));
   12a32:	f041 4168 	orr.w	r1, r1, #3892314112	; 0xe8000000
   12a36:	f441 01b6 	orr.w	r1, r1, #5963776	; 0x5b0000
}
   12a3a:	bc10      	pop	{r4}
    emit4(state, _thumb32_LDRD_IMM_T1(Rt, Rn, off));
   12a3c:	f7ff bf8b 	b.w	12956 <emit4>

00012a40 <arm_bpf_get_reg64>:
static const s8 *arm_bpf_get_reg64(jit_state *state, const s8 *reg, const s8 *tmp) {
   12a40:	b510      	push	{r4, lr}
   12a42:	4614      	mov	r4, r2
    if (is_stacked(reg[1])) {
   12a44:	f991 2001 	ldrsb.w	r2, [r1, #1]
   12a48:	2a00      	cmp	r2, #0
   12a4a:	da03      	bge.n	12a54 <arm_bpf_get_reg64+0x14>
        _emit_ldrd_i(state, tmp, ARM_FP, off);
   12a4c:	4621      	mov	r1, r4
   12a4e:	f7ff ffd6 	bl	129fe <_emit_ldrd_i.constprop.29>
        reg = tmp;
   12a52:	4621      	mov	r1, r4
}
   12a54:	4608      	mov	r0, r1
   12a56:	bd10      	pop	{r4, pc}

00012a58 <_emit_mov_reg>:
    if (dst != ARM_SP && src != ARM_SP) {
   12a58:	2a0d      	cmp	r2, #13
static void _emit_mov_reg(jit_state *state, s8 src, s8 dst) {
   12a5a:	4603      	mov	r3, r0
    if (dst != ARM_SP && src != ARM_SP) {
   12a5c:	d00e      	beq.n	12a7c <_emit_mov_reg+0x24>
   12a5e:	290d      	cmp	r1, #13
   12a60:	d00c      	beq.n	12a7c <_emit_mov_reg+0x24>
    return (THUMB2_MOV_REG) | (D << 7) | (Rm << 3) | (Rd3);
   12a62:	00c9      	lsls	r1, r1, #3
   12a64:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   12a68:	ea41 13c3 	orr.w	r3, r1, r3, lsl #7
   12a6c:	f002 0107 	and.w	r1, r2, #7
   12a70:	4319      	orrs	r1, r3
   12a72:	f441 418c 	orr.w	r1, r1, #17920	; 0x4600
        emit2(state, _thumb16_MOV_REG_T1(dst, src));
   12a76:	b289      	uxth	r1, r1
   12a78:	f7ff bf63 	b.w	12942 <emit2>
    return (THUMB2_MOVW_REG) | (flagS << 20) | (Rd << 8) | (Rm);
   12a7c:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    emit4(state, _thumb32_MOVW_REG_T3(dst, src, FLAG_NOS));
   12a80:	f041 416a 	orr.w	r1, r1, #3925868544	; 0xea000000
   12a84:	f441 019e 	orr.w	r1, r1, #5177344	; 0x4f0000
   12a88:	4618      	mov	r0, r3
   12a8a:	f7ff bf64 	b.w	12956 <emit4>

00012a8e <arm_bpf_put_reg32>:
	if (is_stacked(reg)) {
   12a8e:	1e0b      	subs	r3, r1, #0
static void arm_bpf_put_reg32(jit_state *state, s8 reg, s8 src) {
   12a90:	b410      	push	{r4}
   12a92:	4614      	mov	r4, r2
	if (is_stacked(reg)) {
   12a94:	da03      	bge.n	12a9e <arm_bpf_put_reg32+0x10>
        _emit_str_i(state, ARM_FP, src, off);
   12a96:	210b      	movs	r1, #11
}
   12a98:	bc10      	pop	{r4}
        _emit_str_i(state, ARM_FP, src, off);
   12a9a:	f7ff bf71 	b.w	12980 <_emit_str_i>
	} else if (reg != src) {
   12a9e:	4293      	cmp	r3, r2
   12aa0:	d004      	beq.n	12aac <arm_bpf_put_reg32+0x1e>
        _emit_mov_reg(state, src, reg);
   12aa2:	4621      	mov	r1, r4
   12aa4:	461a      	mov	r2, r3
}
   12aa6:	bc10      	pop	{r4}
        _emit_mov_reg(state, src, reg);
   12aa8:	f7ff bfd6 	b.w	12a58 <_emit_mov_reg>
}
   12aac:	bc10      	pop	{r4}
   12aae:	4770      	bx	lr

00012ab0 <emit_a32_mov_reg>:
static void emit_a32_mov_reg(jit_state *state, s8 src, s8 dst) {
   12ab0:	b538      	push	{r3, r4, r5, lr}
   12ab2:	4615      	mov	r5, r2
	s8 rt = arm_bpf_get_reg32(state, src, tmp[0]);
   12ab4:	2207      	movs	r2, #7
static void emit_a32_mov_reg(jit_state *state, s8 src, s8 dst) {
   12ab6:	4604      	mov	r4, r0
	s8 rt = arm_bpf_get_reg32(state, src, tmp[0]);
   12ab8:	f7ff ff57 	bl	1296a <arm_bpf_get_reg32>
	arm_bpf_put_reg32(state, dst, rt);
   12abc:	4629      	mov	r1, r5
   12abe:	4602      	mov	r2, r0
   12ac0:	4620      	mov	r0, r4
}
   12ac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	arm_bpf_put_reg32(state, dst, rt);
   12ac6:	f7ff bfe2 	b.w	12a8e <arm_bpf_put_reg32>

00012aca <arm_bpf_put_reg64>:
static void arm_bpf_put_reg64(jit_state *state, const s8 *reg, const s8 *src) {
   12aca:	b570      	push	{r4, r5, r6, lr}
   12acc:	4614      	mov	r4, r2
	if (is_stacked(reg[1])) {
   12ace:	f991 2001 	ldrsb.w	r2, [r1, #1]
   12ad2:	2a00      	cmp	r2, #0
static void arm_bpf_put_reg64(jit_state *state, const s8 *reg, const s8 *src) {
   12ad4:	4606      	mov	r6, r0
   12ad6:	460d      	mov	r5, r1
	if (is_stacked(reg[1])) {
   12ad8:	da04      	bge.n	12ae4 <arm_bpf_put_reg64+0x1a>
        _emit_strd_i(state, src, ARM_FP, off);
   12ada:	4621      	mov	r1, r4
}
   12adc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _emit_strd_i(state, src, ARM_FP, off);
   12ae0:	f7ff bf6b 	b.w	129ba <_emit_strd_i.constprop.27>
		if (reg[1] != src[1]) {
   12ae4:	f994 1001 	ldrsb.w	r1, [r4, #1]
   12ae8:	428a      	cmp	r2, r1
   12aea:	d001      	beq.n	12af0 <arm_bpf_put_reg64+0x26>
            emit_a32_mov_reg(state, src[1], reg[1]);
   12aec:	f7ff ffe0 	bl	12ab0 <emit_a32_mov_reg>
        if (reg[0] != src[0]) {
   12af0:	f995 2000 	ldrsb.w	r2, [r5]
   12af4:	f994 1000 	ldrsb.w	r1, [r4]
   12af8:	428a      	cmp	r2, r1
   12afa:	d004      	beq.n	12b06 <arm_bpf_put_reg64+0x3c>
            emit_a32_mov_reg(state, src[0], reg[0]);
   12afc:	4630      	mov	r0, r6
}
   12afe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            emit_a32_mov_reg(state, src[0], reg[0]);
   12b02:	f7ff bfd5 	b.w	12ab0 <emit_a32_mov_reg>
}
   12b06:	bd70      	pop	{r4, r5, r6, pc}

00012b08 <emit_mov_imm>:
	if (val <= imm8 && val >= 0 && rd < 8) {
   12b08:	2aff      	cmp	r2, #255	; 0xff
{
   12b0a:	b570      	push	{r4, r5, r6, lr}
   12b0c:	b293      	uxth	r3, r2
   12b0e:	4606      	mov	r6, r0
   12b10:	4614      	mov	r4, r2
   12b12:	ea4f 2501 	mov.w	r5, r1, lsl #8
	if (val <= imm8 && val >= 0 && rd < 8) {
   12b16:	d809      	bhi.n	12b2c <emit_mov_imm+0x24>
   12b18:	2907      	cmp	r1, #7
   12b1a:	d807      	bhi.n	12b2c <emit_mov_imm+0x24>
        uint16_t inst = 0x2000 | (rd << 8) | (val);
   12b1c:	ea43 0105 	orr.w	r1, r3, r5
        emit2(state, inst);
   12b20:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
}
   12b24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        emit2(state, inst);
   12b28:	f7ff bf0b 	b.w	12942 <emit2>
        uint32_t inst = 0xf2400000 | (i << 26) | (i4 << 16) | (i3 << 12) | (rd << 8) | i8;
   12b2c:	f3c4 2102 	ubfx	r1, r4, #8, #3
   12b30:	b2da      	uxtb	r2, r3
   12b32:	ea45 3101 	orr.w	r1, r5, r1, lsl #12
   12b36:	4311      	orrs	r1, r2
   12b38:	0b1b      	lsrs	r3, r3, #12
   12b3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   12b3e:	f3c4 23c0 	ubfx	r3, r4, #11, #1
   12b42:	ea41 6183 	orr.w	r1, r1, r3, lsl #26
        emit4(state, inst);
   12b46:	f041 4172 	orr.w	r1, r1, #4060086272	; 0xf2000000
   12b4a:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
   12b4e:	4630      	mov	r0, r6
   12b50:	f7ff ff01 	bl	12956 <emit4>
        if (val > 0xffff) { // movt
   12b54:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   12b58:	d316      	bcc.n	12b88 <emit_mov_imm+0x80>
            v1 = val >> 16;
   12b5a:	0c24      	lsrs	r4, r4, #16
   12b5c:	b2a3      	uxth	r3, r4
            inst = 0xf2c00000 | (i << 26) | (i4 << 16) | (i3 << 12) | (rd << 8) | i8;
   12b5e:	f3c4 2102 	ubfx	r1, r4, #8, #3
   12b62:	ea45 3101 	orr.w	r1, r5, r1, lsl #12
   12b66:	b2dd      	uxtb	r5, r3
   12b68:	4329      	orrs	r1, r5
   12b6a:	0b1b      	lsrs	r3, r3, #12
   12b6c:	f3c4 24c0 	ubfx	r4, r4, #11, #1
   12b70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   12b74:	ea41 6184 	orr.w	r1, r1, r4, lsl #26
            emit4(state, inst);
   12b78:	f041 4172 	orr.w	r1, r1, #4060086272	; 0xf2000000
   12b7c:	f441 0140 	orr.w	r1, r1, #12582912	; 0xc00000
}
   12b80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            emit4(state, inst);
   12b84:	f7ff bee7 	b.w	12956 <emit4>
}
   12b88:	bd70      	pop	{r4, r5, r6, pc}

00012b8a <emit_mov_se_imm64.part.9>:
        if (is64 && (val & (1<<31))) // < 0
   12b8a:	2a00      	cmp	r2, #0
        emit_mov_i64(state, dst, val64);
   12b8c:	bfb4      	ite	lt
   12b8e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   12b92:	2300      	movge	r3, #0
   12b94:	f7f1 b89c 	b.w	3cd0 <emit_mov_i64>

00012b98 <emit_mov_se_imm64>:
static void emit_mov_se_imm64(jit_state *state, const bool is64, const s8 dst[], const u32 val) {
   12b98:	b410      	push	{r4}
   12b9a:	4614      	mov	r4, r2
   12b9c:	461a      	mov	r2, r3
    if (is64) {
   12b9e:	b119      	cbz	r1, 12ba8 <emit_mov_se_imm64+0x10>
   12ba0:	4621      	mov	r1, r4
}
   12ba2:	bc10      	pop	{r4}
   12ba4:	f7ff bff1 	b.w	12b8a <emit_mov_se_imm64.part.9>
        emit_mov_imm(state, dst[1], val);
   12ba8:	7861      	ldrb	r1, [r4, #1]
}
   12baa:	bc10      	pop	{r4}
        emit_mov_imm(state, dst[1], val);
   12bac:	f7ff bfac 	b.w	12b08 <emit_mov_imm>

00012bb0 <emit_alu32_imm>:
static void emit_alu32_imm(jit_state *state, const s8 dst, const u16 val, const u8 op) {
   12bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12bb4:	4617      	mov	r7, r2
    s8 rd = arm_bpf_get_reg32(state, dst, tmp[0]);
   12bb6:	2207      	movs	r2, #7
static void emit_alu32_imm(jit_state *state, const s8 dst, const u16 val, const u8 op) {
   12bb8:	4698      	mov	r8, r3
   12bba:	4605      	mov	r5, r0
   12bbc:	460e      	mov	r6, r1
    s8 rd = arm_bpf_get_reg32(state, dst, tmp[0]);
   12bbe:	f7ff fed4 	bl	1296a <arm_bpf_get_reg32>
    switch (op) {
   12bc2:	f1b8 0f70 	cmp.w	r8, #112	; 0x70
    s8 rd = arm_bpf_get_reg32(state, dst, tmp[0]);
   12bc6:	4604      	mov	r4, r0
    switch (op) {
   12bc8:	d020      	beq.n	12c0c <emit_alu32_imm+0x5c>
   12bca:	d809      	bhi.n	12be0 <emit_alu32_imm+0x30>
   12bcc:	f1b8 0f60 	cmp.w	r8, #96	; 0x60
   12bd0:	d013      	beq.n	12bfa <emit_alu32_imm+0x4a>
    arm_bpf_put_reg32(state, dst, rd);
   12bd2:	4622      	mov	r2, r4
   12bd4:	4631      	mov	r1, r6
   12bd6:	4628      	mov	r0, r5
}
   12bd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    arm_bpf_put_reg32(state, dst, rd);
   12bdc:	f7ff bf57 	b.w	12a8e <arm_bpf_put_reg32>
    switch (op) {
   12be0:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
   12be4:	d019      	beq.n	12c1a <emit_alu32_imm+0x6a>
   12be6:	f1b8 0fc0 	cmp.w	r8, #192	; 0xc0
   12bea:	d1f2      	bne.n	12bd2 <emit_alu32_imm+0x22>
        emit2(state, (0x1000) | (val << 6) | (rd << 3) | (rd));
   12bec:	00c1      	lsls	r1, r0, #3
   12bee:	ea41 1187 	orr.w	r1, r1, r7, lsl #6
   12bf2:	4301      	orrs	r1, r0
   12bf4:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
   12bf8:	e003      	b.n	12c02 <emit_alu32_imm+0x52>
        emit2(state, (0x0000) | (val << 6) | (rd << 3) | (rd));
   12bfa:	ea40 1187 	orr.w	r1, r0, r7, lsl #6
   12bfe:	ea41 01c0 	orr.w	r1, r1, r0, lsl #3
        emit2(state, (0x4240) | (rd << 3) | (rd));
   12c02:	b289      	uxth	r1, r1
   12c04:	4628      	mov	r0, r5
   12c06:	f7ff fe9c 	bl	12942 <emit2>
        break;
   12c0a:	e7e2      	b.n	12bd2 <emit_alu32_imm+0x22>
        emit2(state, (0x0800) | (val << 6) | (rd << 3) | (rd));
   12c0c:	00c1      	lsls	r1, r0, #3
   12c0e:	ea41 1187 	orr.w	r1, r1, r7, lsl #6
   12c12:	4301      	orrs	r1, r0
   12c14:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
   12c18:	e7f3      	b.n	12c02 <emit_alu32_imm+0x52>
        emit2(state, (0x4240) | (rd << 3) | (rd));
   12c1a:	ea40 01c0 	orr.w	r1, r0, r0, lsl #3
   12c1e:	f441 4184 	orr.w	r1, r1, #16896	; 0x4200
   12c22:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   12c26:	e7ec      	b.n	12c02 <emit_alu32_imm+0x52>

00012c28 <_emit_cmp_reg>:
    if (Rn < 0x8 && Rm < 0x8) {
   12c28:	2907      	cmp	r1, #7
static void inline _emit_cmp_reg(jit_state *state, const s8 Rn, const s8 Rm) {
   12c2a:	b410      	push	{r4}
   12c2c:	ea4f 03c2 	mov.w	r3, r2, lsl #3
   12c30:	4604      	mov	r4, r0
    if (Rn < 0x8 && Rm < 0x8) {
   12c32:	dc08      	bgt.n	12c46 <_emit_cmp_reg+0x1e>
   12c34:	2a07      	cmp	r2, #7
   12c36:	dc06      	bgt.n	12c46 <_emit_cmp_reg+0x1e>
    return (THUMB2_CMP_REG_T1) | (Rm << 3) | (Rn);
   12c38:	4319      	orrs	r1, r3
   12c3a:	f441 4185 	orr.w	r1, r1, #17024	; 0x4280
        emit2(state, _thumb16_CMP_REG_T1(Rn, Rm));
   12c3e:	b289      	uxth	r1, r1
}
   12c40:	bc10      	pop	{r4}
        emit2(state, _thumb16_CMP_REG_T2(Rn, Rm));
   12c42:	f7ff be7e 	b.w	12942 <emit2>
    u16 N = (Rn & 0b1000) >> 3;
   12c46:	b2c9      	uxtb	r1, r1
    return (THUMB2_CMP_REG_T2) | (N << 7) | (Rm << 3) | (Rn3);
   12c48:	f3c1 02c0 	ubfx	r2, r1, #3, #1
   12c4c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   12c50:	f001 0107 	and.w	r1, r1, #7
   12c54:	4319      	orrs	r1, r3
   12c56:	f441 418a 	orr.w	r1, r1, #17664	; 0x4500
   12c5a:	b289      	uxth	r1, r1
   12c5c:	4620      	mov	r0, r4
   12c5e:	e7ef      	b.n	12c40 <_emit_cmp_reg+0x18>

00012c60 <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   12c60:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   12c64:	b923      	cbnz	r3, 12c70 <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   12c66:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   12c6a:	f000 0001 	and.w	r0, r0, #1
   12c6e:	4770      	bx	lr
		return false;
   12c70:	2000      	movs	r0, #0
}
   12c72:	4770      	bx	lr

00012c74 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
   12c74:	b570      	push	{r4, r5, r6, lr}
   12c76:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   12c78:	f990 000b 	ldrsb.w	r0, [r0, #11]
   12c7c:	250c      	movs	r5, #12
   12c7e:	434d      	muls	r5, r1
		&p->levels[level].bits : p->levels[level].bits_p;
   12c80:	4288      	cmp	r0, r1
   12c82:	eb06 0405 	add.w	r4, r6, r5
   12c86:	bfb8      	it	lt
   12c88:	5974      	ldrlt	r4, [r6, r5]

	*word = &bitarray[bn / 32];
   12c8a:	2a00      	cmp	r2, #0
   12c8c:	4610      	mov	r0, r2
   12c8e:	bfb8      	it	lt
   12c90:	f102 001f 	addlt.w	r0, r2, #31
   12c94:	1140      	asrs	r0, r0, #5
   12c96:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   12c9a:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
   12c9c:	f002 001f 	and.w	r0, r2, #31
   12ca0:	bd70      	pop	{r4, r5, r6, pc}

00012ca2 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
   12ca2:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
   12ca4:	ab01      	add	r3, sp, #4
   12ca6:	f7ff ffe5 	bl	12c74 <get_bit_ptr>

	*word |= (1<<bit);
   12caa:	9a01      	ldr	r2, [sp, #4]
   12cac:	2301      	movs	r3, #1
   12cae:	fa03 f000 	lsl.w	r0, r3, r0
   12cb2:	6813      	ldr	r3, [r2, #0]
   12cb4:	4303      	orrs	r3, r0
   12cb6:	6013      	str	r3, [r2, #0]
}
   12cb8:	b003      	add	sp, #12
   12cba:	f85d fb04 	ldr.w	pc, [sp], #4

00012cbe <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
   12cbe:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
   12cc0:	ab01      	add	r3, sp, #4
   12cc2:	f7ff ffd7 	bl	12c74 <get_bit_ptr>

	*word &= ~(1<<bit);
   12cc6:	9a01      	ldr	r2, [sp, #4]
   12cc8:	2301      	movs	r3, #1
   12cca:	fa03 f000 	lsl.w	r0, r3, r0
   12cce:	6813      	ldr	r3, [r2, #0]
   12cd0:	ea23 0300 	bic.w	r3, r3, r0
   12cd4:	6013      	str	r3, [r2, #0]
}
   12cd6:	b003      	add	sp, #12
   12cd8:	f85d fb04 	ldr.w	pc, [sp], #4

00012cdc <block_fits>:
	return p->n_max * p->max_sz;
}

static bool block_fits(struct sys_mem_pool_base *p,
		       int lvl, int bn, size_t *lsizes)
{
   12cdc:	b570      	push	{r4, r5, r6, lr}
	u8_t *parent, *block_end;
	size_t parent_sz;

	block_end = (u8_t *)block_ptr(p, lsizes[lvl], bn) + lsizes[lvl];
   12cde:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
   12ce2:	6804      	ldr	r4, [r0, #0]
   12ce4:	fb02 5505 	mla	r5, r2, r5, r5
   12ce8:	008e      	lsls	r6, r1, #2
   12cea:	4425      	add	r5, r4

	if (lvl == 0) {
   12cec:	b941      	cbnz	r1, 12d00 <block_fits+0x24>
	return p->n_max * p->max_sz;
   12cee:	8903      	ldrh	r3, [r0, #8]
   12cf0:	6840      	ldr	r0, [r0, #4]
   12cf2:	4358      	muls	r0, r3
	} else {
		parent_sz = lsizes[lvl - 1];
		parent = block_ptr(p, lsizes[lvl - 1], bn / 4);
	}

	return block_end <= (parent + parent_sz);
   12cf4:	4420      	add	r0, r4
}
   12cf6:	4285      	cmp	r5, r0
   12cf8:	bf8c      	ite	hi
   12cfa:	2000      	movhi	r0, #0
   12cfc:	2001      	movls	r0, #1
   12cfe:	bd70      	pop	{r4, r5, r6, pc}
		parent_sz = lsizes[lvl - 1];
   12d00:	4433      	add	r3, r6
		parent = block_ptr(p, lsizes[lvl - 1], bn / 4);
   12d02:	2a00      	cmp	r2, #0
		parent_sz = lsizes[lvl - 1];
   12d04:	f853 0c04 	ldr.w	r0, [r3, #-4]
		parent = block_ptr(p, lsizes[lvl - 1], bn / 4);
   12d08:	bfb8      	it	lt
   12d0a:	3203      	addlt	r2, #3
   12d0c:	1092      	asrs	r2, r2, #2
	return (u8_t *)p->buf + lsz * block;
   12d0e:	fb00 4402 	mla	r4, r0, r2, r4
   12d12:	e7ef      	b.n	12cf4 <block_fits+0x18>

00012d14 <pool_irq_lock.isra.2.part.3>:
	__asm__ volatile(
   12d14:	f04f 0320 	mov.w	r3, #32
   12d18:	f3ef 8011 	mrs	r0, BASEPRI
   12d1c:	f383 8811 	msr	BASEPRI, r3
   12d20:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
		return irq_lock();
	} else {
		return 0;
	}
}
   12d24:	4770      	bx	lr

00012d26 <pool_irq_unlock.isra.4>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   12d26:	07c3      	lsls	r3, r0, #31
   12d28:	d503      	bpl.n	12d32 <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   12d2a:	f381 8811 	msr	BASEPRI, r1
   12d2e:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
   12d32:	4770      	bx	lr

00012d34 <z_sys_mem_pool_base_init>:
{
   12d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   12d38:	6843      	ldr	r3, [r0, #4]
   12d3a:	8906      	ldrh	r6, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   12d3c:	6805      	ldr	r5, [r0, #0]
	for (i = 0; i < p->n_levels; i++) {
   12d3e:	f890 c00a 	ldrb.w	ip, [r0, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   12d42:	435e      	muls	r6, r3
	p->max_inline_level = -1;
   12d44:	22ff      	movs	r2, #255	; 0xff
{
   12d46:	4604      	mov	r4, r0
	p->max_inline_level = -1;
   12d48:	72c2      	strb	r2, [r0, #11]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   12d4a:	4435      	add	r5, r6
	for (i = 0; i < p->n_levels; i++) {
   12d4c:	2000      	movs	r0, #0
		sys_dlist_init(&p->levels[i].free_list);
   12d4e:	f04f 0e0c 	mov.w	lr, #12
	for (i = 0; i < p->n_levels; i++) {
   12d52:	4584      	cmp	ip, r0
   12d54:	dc05      	bgt.n	12d62 <z_sys_mem_pool_base_init+0x2e>
	for (i = 0; i < p->n_max; i++) {
   12d56:	2500      	movs	r5, #0
   12d58:	8923      	ldrh	r3, [r4, #8]
   12d5a:	42ab      	cmp	r3, r5
   12d5c:	dc21      	bgt.n	12da2 <z_sys_mem_pool_base_init+0x6e>
}
   12d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		sys_dlist_init(&p->levels[i].free_list);
   12d62:	f8d4 800c 	ldr.w	r8, [r4, #12]
		int nblocks = buflen / sz;
   12d66:	fbb6 f1f3 	udiv	r1, r6, r3
		sys_dlist_init(&p->levels[i].free_list);
   12d6a:	fb0e f700 	mul.w	r7, lr, r0
   12d6e:	eb08 0207 	add.w	r2, r8, r7
   12d72:	f102 0904 	add.w	r9, r2, #4
		if (nblocks < 32) {
   12d76:	291f      	cmp	r1, #31
	list->tail = (sys_dnode_t *)list;
   12d78:	e9c2 9901 	strd	r9, r9, [r2, #4]
   12d7c:	dc06      	bgt.n	12d8c <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   12d7e:	72e0      	strb	r0, [r4, #11]
		sz = _ALIGN4(sz / 4);
   12d80:	089b      	lsrs	r3, r3, #2
   12d82:	3303      	adds	r3, #3
   12d84:	f023 0303 	bic.w	r3, r3, #3
	for (i = 0; i < p->n_levels; i++) {
   12d88:	3001      	adds	r0, #1
   12d8a:	e7e2      	b.n	12d52 <z_sys_mem_pool_base_init+0x1e>
			bits += (nblocks + 31)/32;
   12d8c:	f111 021f 	adds.w	r2, r1, #31
   12d90:	bf48      	it	mi
   12d92:	f101 023e 	addmi.w	r2, r1, #62	; 0x3e
   12d96:	1152      	asrs	r2, r2, #5
			p->levels[i].bits_p = bits;
   12d98:	f848 5007 	str.w	r5, [r8, r7]
			bits += (nblocks + 31)/32;
   12d9c:	eb05 0582 	add.w	r5, r5, r2, lsl #2
   12da0:	e7ee      	b.n	12d80 <z_sys_mem_pool_base_init+0x4c>
	return (u8_t *)p->buf + lsz * block;
   12da2:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
   12da4:	68e3      	ldr	r3, [r4, #12]
	return (u8_t *)p->buf + lsz * block;
   12da6:	6820      	ldr	r0, [r4, #0]
   12da8:	436a      	muls	r2, r5
   12daa:	1881      	adds	r1, r0, r2
		sys_dlist_append(&p->levels[0].free_list, block);
   12dac:	1d1e      	adds	r6, r3, #4
	node->next = list;
   12dae:	5086      	str	r6, [r0, r2]
	node->prev = list->tail;
   12db0:	689a      	ldr	r2, [r3, #8]
   12db2:	604a      	str	r2, [r1, #4]
	list->tail->next = node;
   12db4:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
   12db6:	4620      	mov	r0, r4
   12db8:	6011      	str	r1, [r2, #0]
	list->tail = node;
   12dba:	6099      	str	r1, [r3, #8]
   12dbc:	462a      	mov	r2, r5
   12dbe:	2100      	movs	r1, #0
   12dc0:	f7ff ff6f 	bl	12ca2 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
   12dc4:	3501      	adds	r5, #1
   12dc6:	e7c7      	b.n	12d58 <z_sys_mem_pool_base_init+0x24>

00012dc8 <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
   12dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dcc:	b089      	sub	sp, #36	; 0x24
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   12dce:	7a85      	ldrb	r5, [r0, #10]
{
   12dd0:	af00      	add	r7, sp, #0
   12dd2:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   12dd6:	00ab      	lsls	r3, r5, #2
   12dd8:	3307      	adds	r3, #7
   12dda:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   12dde:	ebad 0d03 	sub.w	sp, sp, r3
   12de2:	46e9      	mov	r9, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
   12de4:	464a      	mov	r2, r9
   12de6:	6843      	ldr	r3, [r0, #4]
   12de8:	f842 3904 	str.w	r3, [r2], #-4
{
   12dec:	4604      	mov	r4, r0
	for (i = 0; i < p->n_levels; i++) {
   12dee:	2000      	movs	r0, #0
   12df0:	4285      	cmp	r5, r0
   12df2:	f100 36ff 	add.w	r6, r0, #4294967295	; 0xffffffff
   12df6:	dd0a      	ble.n	12e0e <z_sys_mem_pool_block_alloc+0x46>
		if (i > 0) {
   12df8:	b128      	cbz	r0, 12e06 <z_sys_mem_pool_block_alloc+0x3e>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
   12dfa:	6813      	ldr	r3, [r2, #0]
   12dfc:	089b      	lsrs	r3, r3, #2
   12dfe:	3303      	adds	r3, #3
   12e00:	f023 0303 	bic.w	r3, r3, #3
   12e04:	6053      	str	r3, [r2, #4]
		}

		if (lsizes[i] < size) {
   12e06:	f852 3f04 	ldr.w	r3, [r2, #4]!
   12e0a:	428b      	cmp	r3, r1
   12e0c:	d207      	bcs.n	12e1e <z_sys_mem_pool_block_alloc+0x56>
		}

		alloc_l = i;
	}

	if (alloc_l < 0) {
   12e0e:	1c73      	adds	r3, r6, #1
   12e10:	d107      	bne.n	12e22 <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   12e12:	6cba      	ldr	r2, [r7, #72]	; 0x48
   12e14:	2300      	movs	r3, #0
   12e16:	6013      	str	r3, [r2, #0]
	pool_irq_unlock(p, key);

	*data_p = data;

	if (data == NULL) {
		return -ENOMEM;
   12e18:	f06f 000b 	mvn.w	r0, #11
   12e1c:	e03f      	b.n	12e9e <z_sys_mem_pool_block_alloc+0xd6>
	for (i = 0; i < p->n_levels; i++) {
   12e1e:	3001      	adds	r0, #1
   12e20:	e7e6      	b.n	12df0 <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   12e22:	7c20      	ldrb	r0, [r4, #16]
   12e24:	f010 0001 	ands.w	r0, r0, #1
   12e28:	d001      	beq.n	12e2e <z_sys_mem_pool_block_alloc+0x66>
   12e2a:	f7ff ff73 	bl	12d14 <pool_irq_lock.isra.2.part.3>
   12e2e:	68e2      	ldr	r2, [r4, #12]
	key = pool_irq_lock(p);
   12e30:	61f8      	str	r0, [r7, #28]
	for (i = alloc_l; i >= 0; i--) {
   12e32:	230c      	movs	r3, #12
   12e34:	fb03 2306 	mla	r3, r3, r6, r2
	block = sys_dlist_get(&p->levels[l].free_list);
   12e38:	46b2      	mov	sl, r6
	return list->head == list;
   12e3a:	461a      	mov	r2, r3
   12e3c:	f852 5f04 	ldr.w	r5, [r2, #4]!
	if (!sys_dlist_is_empty(list)) {
   12e40:	4295      	cmp	r5, r2
   12e42:	d073      	beq.n	12f2c <z_sys_mem_pool_block_alloc+0x164>
	node->prev->next = node->next;
   12e44:	e9d5 3100 	ldrd	r3, r1, [r5]
   12e48:	600b      	str	r3, [r1, #0]
	node->next->prev = node->prev;
   12e4a:	6059      	str	r1, [r3, #4]
	node->next = NULL;
   12e4c:	2300      	movs	r3, #0
	node->prev = NULL;
   12e4e:	e9c5 3300 	strd	r3, r3, [r5]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   12e52:	6823      	ldr	r3, [r4, #0]
		data = block_alloc(p, i, lsizes[i]);
   12e54:	f859 202a 	ldr.w	r2, [r9, sl, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   12e58:	1aeb      	subs	r3, r5, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
   12e5a:	4651      	mov	r1, sl
   12e5c:	fb93 f2f2 	sdiv	r2, r3, r2
   12e60:	4620      	mov	r0, r4
   12e62:	f7ff ff2c 	bl	12cbe <clear_free_bit>
		if (data != NULL) {
   12e66:	eb09 038a 	add.w	r3, r9, sl, lsl #2
   12e6a:	f10a 0801 	add.w	r8, sl, #1
   12e6e:	61bb      	str	r3, [r7, #24]
			for (from_l = i; from_l < alloc_l; from_l++) {
   12e70:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   12e74:	42b3      	cmp	r3, r6
   12e76:	db16      	blt.n	12ea6 <z_sys_mem_pool_block_alloc+0xde>
	pool_irq_unlock(p, key);
   12e78:	69f9      	ldr	r1, [r7, #28]
   12e7a:	7c20      	ldrb	r0, [r4, #16]
   12e7c:	f7ff ff53 	bl	12d26 <pool_irq_unlock.isra.4>
	*data_p = data;
   12e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   12e82:	601d      	str	r5, [r3, #0]
	if (data == NULL) {
   12e84:	2d00      	cmp	r5, #0
   12e86:	d0c7      	beq.n	12e18 <z_sys_mem_pool_block_alloc+0x50>
	}

	*level_p = alloc_l;
   12e88:	68bb      	ldr	r3, [r7, #8]
   12e8a:	601e      	str	r6, [r3, #0]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   12e8c:	6823      	ldr	r3, [r4, #0]
   12e8e:	1aed      	subs	r5, r5, r3
   12e90:	f859 3026 	ldr.w	r3, [r9, r6, lsl #2]
   12e94:	fb95 f5f3 	sdiv	r5, r5, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   12e98:	687b      	ldr	r3, [r7, #4]

	return 0;
   12e9a:	2000      	movs	r0, #0
	*block_p = block_num(p, data, lsizes[alloc_l]);
   12e9c:	601d      	str	r5, [r3, #0]
}
   12e9e:	3724      	adds	r7, #36	; 0x24
   12ea0:	46bd      	mov	sp, r7
   12ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bn = block_num(p, block, lsizes[l]);
   12ea6:	69bb      	ldr	r3, [r7, #24]
   12ea8:	f853 2b04 	ldr.w	r2, [r3], #4
   12eac:	61bb      	str	r3, [r7, #24]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   12eae:	6823      	ldr	r3, [r4, #0]
   12eb0:	1aeb      	subs	r3, r5, r3
   12eb2:	fb93 f3f2 	sdiv	r3, r3, r2
		int lbn = 4*bn + i;
   12eb6:	009b      	lsls	r3, r3, #2
   12eb8:	613b      	str	r3, [r7, #16]
   12eba:	230c      	movs	r3, #12
   12ebc:	fb03 f308 	mul.w	r3, r3, r8
   12ec0:	617b      	str	r3, [r7, #20]
	for (i = 1; i < 4; i++) {
   12ec2:	f04f 0a01 	mov.w	sl, #1
		int lbn = 4*bn + i;
   12ec6:	693b      	ldr	r3, [r7, #16]
   12ec8:	eb0a 0b03 	add.w	fp, sl, r3
		int lsz = lsizes[l + 1];
   12ecc:	69bb      	ldr	r3, [r7, #24]
		set_free_bit(p, l + 1, lbn);
   12ece:	465a      	mov	r2, fp
		int lsz = lsizes[l + 1];
   12ed0:	681b      	ldr	r3, [r3, #0]
   12ed2:	60fb      	str	r3, [r7, #12]
		set_free_bit(p, l + 1, lbn);
   12ed4:	4641      	mov	r1, r8
   12ed6:	4620      	mov	r0, r4
   12ed8:	f7ff fee3 	bl	12ca2 <set_free_bit>
		if (block_fits(p, l + 1, lbn, lsizes)) {
   12edc:	464b      	mov	r3, r9
   12ede:	465a      	mov	r2, fp
   12ee0:	4641      	mov	r1, r8
   12ee2:	4620      	mov	r0, r4
   12ee4:	f7ff fefa 	bl	12cdc <block_fits>
   12ee8:	b168      	cbz	r0, 12f06 <z_sys_mem_pool_block_alloc+0x13e>
		void *block2 = (lsz * i) + (char *)block;
   12eea:	68fb      	ldr	r3, [r7, #12]
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
   12eec:	6978      	ldr	r0, [r7, #20]
		void *block2 = (lsz * i) + (char *)block;
   12eee:	fb0a f203 	mul.w	r2, sl, r3
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
   12ef2:	68e3      	ldr	r3, [r4, #12]
   12ef4:	4403      	add	r3, r0
		void *block2 = (lsz * i) + (char *)block;
   12ef6:	18a9      	adds	r1, r5, r2
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
   12ef8:	1d18      	adds	r0, r3, #4
	node->next = list;
   12efa:	50a8      	str	r0, [r5, r2]
	node->prev = list->tail;
   12efc:	689a      	ldr	r2, [r3, #8]
   12efe:	604a      	str	r2, [r1, #4]
	list->tail->next = node;
   12f00:	689a      	ldr	r2, [r3, #8]
   12f02:	6011      	str	r1, [r2, #0]
	list->tail = node;
   12f04:	6099      	str	r1, [r3, #8]
	for (i = 1; i < 4; i++) {
   12f06:	f10a 0a01 	add.w	sl, sl, #1
   12f0a:	f1ba 0f04 	cmp.w	sl, #4
   12f0e:	d1da      	bne.n	12ec6 <z_sys_mem_pool_block_alloc+0xfe>
				pool_irq_unlock(p, key);
   12f10:	7c20      	ldrb	r0, [r4, #16]
   12f12:	69f9      	ldr	r1, [r7, #28]
   12f14:	f7ff ff07 	bl	12d26 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   12f18:	7c20      	ldrb	r0, [r4, #16]
   12f1a:	f010 0001 	ands.w	r0, r0, #1
   12f1e:	d001      	beq.n	12f24 <z_sys_mem_pool_block_alloc+0x15c>
   12f20:	f7ff fef8 	bl	12d14 <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   12f24:	61f8      	str	r0, [r7, #28]
   12f26:	f108 0801 	add.w	r8, r8, #1
   12f2a:	e7a1      	b.n	12e70 <z_sys_mem_pool_block_alloc+0xa8>
	for (i = alloc_l; i >= 0; i--) {
   12f2c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   12f30:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   12f34:	f1a3 030c 	sub.w	r3, r3, #12
   12f38:	f47f af7f 	bne.w	12e3a <z_sys_mem_pool_block_alloc+0x72>
   12f3c:	2500      	movs	r5, #0
   12f3e:	e79b      	b.n	12e78 <z_sys_mem_pool_block_alloc+0xb0>

00012f40 <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   12f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f44:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   12f46:	7a83      	ldrb	r3, [r0, #10]
   12f48:	009b      	lsls	r3, r3, #2
   12f4a:	3307      	adds	r3, #7
   12f4c:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
{
   12f50:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   12f52:	ebad 0d03 	sub.w	sp, sp, r3
   12f56:	46ea      	mov	sl, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   12f58:	6843      	ldr	r3, [r0, #4]
   12f5a:	f8ca 3000 	str.w	r3, [sl]
{
   12f5e:	4605      	mov	r5, r0
	for (i = 1; i <= level; i++) {
   12f60:	4654      	mov	r4, sl
   12f62:	2001      	movs	r0, #1
   12f64:	4281      	cmp	r1, r0
   12f66:	d214      	bcs.n	12f92 <z_sys_mem_pool_block_free+0x52>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   12f68:	7c28      	ldrb	r0, [r5, #16]
   12f6a:	f010 0001 	ands.w	r0, r0, #1
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   12f6e:	460e      	mov	r6, r1
   12f70:	4690      	mov	r8, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   12f72:	d001      	beq.n	12f78 <z_sys_mem_pool_block_free+0x38>
   12f74:	f7ff fece 	bl	12d14 <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
   12f78:	4604      	mov	r4, r0
	while (level >= 0) {
   12f7a:	2e00      	cmp	r6, #0
   12f7c:	da12      	bge.n	12fa4 <z_sys_mem_pool_block_free+0x64>
	return -1;
   12f7e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	pool_irq_unlock(p, key);
   12f82:	4621      	mov	r1, r4
   12f84:	7c28      	ldrb	r0, [r5, #16]
   12f86:	f7ff fece 	bl	12d26 <pool_irq_unlock.isra.4>
}
   12f8a:	3714      	adds	r7, #20
   12f8c:	46bd      	mov	sp, r7
   12f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
   12f92:	6823      	ldr	r3, [r4, #0]
   12f94:	089b      	lsrs	r3, r3, #2
   12f96:	3303      	adds	r3, #3
   12f98:	f023 0303 	bic.w	r3, r3, #3
   12f9c:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
   12fa0:	3001      	adds	r0, #1
   12fa2:	e7df      	b.n	12f64 <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
   12fa4:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
   12fa8:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   12faa:	fb03 fb08 	mul.w	fp, r3, r8
   12fae:	682b      	ldr	r3, [r5, #0]
   12fb0:	603b      	str	r3, [r7, #0]
		set_free_bit(p, level, bn);
   12fb2:	4642      	mov	r2, r8
   12fb4:	4631      	mov	r1, r6
   12fb6:	4628      	mov	r0, r5
	return (u8_t *)p->buf + lsz * block;
   12fb8:	eb03 090b 	add.w	r9, r3, fp
		set_free_bit(p, level, bn);
   12fbc:	f7ff fe71 	bl	12ca2 <set_free_bit>
		sys_dlist_append(&p->levels[level].free_list, block);
   12fc0:	68ea      	ldr	r2, [r5, #12]
   12fc2:	230c      	movs	r3, #12
   12fc4:	fb03 2206 	mla	r2, r3, r6, r2
	node->next = list;
   12fc8:	683b      	ldr	r3, [r7, #0]
   12fca:	1d11      	adds	r1, r2, #4
   12fcc:	f843 100b 	str.w	r1, [r3, fp]
	node->prev = list->tail;
   12fd0:	6893      	ldr	r3, [r2, #8]
   12fd2:	f8c9 3004 	str.w	r3, [r9, #4]
	list->tail->next = node;
   12fd6:	6893      	ldr	r3, [r2, #8]
   12fd8:	f8c3 9000 	str.w	r9, [r3]
	list->tail = node;
   12fdc:	f8c2 9008 	str.w	r9, [r2, #8]
		pool_irq_unlock(p, key);
   12fe0:	7c28      	ldrb	r0, [r5, #16]
   12fe2:	4621      	mov	r1, r4
   12fe4:	f7ff fe9f 	bl	12d26 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   12fe8:	7c28      	ldrb	r0, [r5, #16]
   12fea:	f010 0001 	ands.w	r0, r0, #1
   12fee:	d001      	beq.n	12ff4 <z_sys_mem_pool_block_free+0xb4>
   12ff0:	f7ff fe90 	bl	12d14 <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
   12ff4:	4604      	mov	r4, r0
		if (level == 0 || partner_bits(p, level, bn) != 0xf) {
   12ff6:	2e00      	cmp	r6, #0
   12ff8:	d0c3      	beq.n	12f82 <z_sys_mem_pool_block_free+0x42>
	int bit = get_bit_ptr(p, level, bn, &word);
   12ffa:	f107 030c 	add.w	r3, r7, #12
   12ffe:	4642      	mov	r2, r8
   13000:	4631      	mov	r1, r6
   13002:	4628      	mov	r0, r5
   13004:	f7ff fe36 	bl	12c74 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   13008:	68fa      	ldr	r2, [r7, #12]
   1300a:	2800      	cmp	r0, #0
   1300c:	bfb8      	it	lt
   1300e:	3003      	addlt	r0, #3
   13010:	f020 0303 	bic.w	r3, r0, #3
   13014:	6810      	ldr	r0, [r2, #0]
   13016:	40d8      	lsrs	r0, r3
   13018:	f000 000f 	and.w	r0, r0, #15
		if (level == 0 || partner_bits(p, level, bn) != 0xf) {
   1301c:	280f      	cmp	r0, #15
   1301e:	d1b0      	bne.n	12f82 <z_sys_mem_pool_block_free+0x42>
			int b = (bn & ~3) + i;
   13020:	f028 0303 	bic.w	r3, r8, #3
		for (i = 0; i < 4; i++) {
   13024:	f04f 0b00 	mov.w	fp, #0
			int b = (bn & ~3) + i;
   13028:	603b      	str	r3, [r7, #0]
   1302a:	683b      	ldr	r3, [r7, #0]
   1302c:	eb03 090b 	add.w	r9, r3, fp
			if (block_fits(p, level, b, lsizes)) {
   13030:	464a      	mov	r2, r9
   13032:	4653      	mov	r3, sl
   13034:	4631      	mov	r1, r6
   13036:	4628      	mov	r0, r5
   13038:	f7ff fe50 	bl	12cdc <block_fits>
   1303c:	b190      	cbz	r0, 13064 <z_sys_mem_pool_block_free+0x124>
				clear_free_bit(p, level, b);
   1303e:	464a      	mov	r2, r9
   13040:	4628      	mov	r0, r5
   13042:	f7ff fe3c 	bl	12cbe <clear_free_bit>
	return (u8_t *)p->buf + lsz * block;
   13046:	687b      	ldr	r3, [r7, #4]
   13048:	fb03 f909 	mul.w	r9, r3, r9
   1304c:	682b      	ldr	r3, [r5, #0]
   1304e:	eb03 0209 	add.w	r2, r3, r9
	node->prev->next = node->next;
   13052:	f853 1009 	ldr.w	r1, [r3, r9]
   13056:	6850      	ldr	r0, [r2, #4]
   13058:	6001      	str	r1, [r0, #0]
	node->next->prev = node->prev;
   1305a:	6048      	str	r0, [r1, #4]
	node->next = NULL;
   1305c:	2100      	movs	r1, #0
   1305e:	f843 1009 	str.w	r1, [r3, r9]
	node->prev = NULL;
   13062:	6051      	str	r1, [r2, #4]
		for (i = 0; i < 4; i++) {
   13064:	f10b 0b01 	add.w	fp, fp, #1
   13068:	f1bb 0f04 	cmp.w	fp, #4
   1306c:	d1dd      	bne.n	1302a <z_sys_mem_pool_block_free+0xea>
		bn = bn / 4;
   1306e:	f1b8 0f00 	cmp.w	r8, #0
   13072:	bfb8      	it	lt
   13074:	f108 0803 	addlt.w	r8, r8, #3
		level = level - 1;
   13078:	3e01      	subs	r6, #1
		bn = bn / 4;
   1307a:	ea4f 08a8 	mov.w	r8, r8, asr #2
   1307e:	e77c      	b.n	12f7a <z_sys_mem_pool_block_free+0x3a>

00013080 <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   13080:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   13084:	b923      	cbnz	r3, 13090 <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   13086:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   1308a:	f000 0001 	and.w	r0, r0, #1
   1308e:	4770      	bx	lr
		return false;
   13090:	2000      	movs	r0, #0
}
   13092:	4770      	bx	lr

00013094 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   13094:	b508      	push	{r3, lr}
   13096:	4604      	mov	r4, r0
   13098:	4608      	mov	r0, r1
   1309a:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1309c:	461a      	mov	r2, r3
   1309e:	47a0      	blx	r4
   130a0:	f7ff ffee 	bl	13080 <z_arch_is_user_context>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
   130a4:	b140      	cbz	r0, 130b8 <z_thread_entry+0x24>
	register u32_t r6 __asm__("r6") = call_id;
   130a6:	2639      	movs	r6, #57	; 0x39
	__asm__ volatile("svc %[svid]\n"
   130a8:	df03      	svc	3
   130aa:	4602      	mov	r2, r0
   130ac:	f7ff ffe8 	bl	13080 <z_arch_is_user_context>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
   130b0:	b128      	cbz	r0, 130be <z_thread_entry+0x2a>
	register u32_t ret __asm__("r0") = arg1;
   130b2:	4610      	mov	r0, r2
	register u32_t r6 __asm__("r6") = call_id;
   130b4:	2663      	movs	r6, #99	; 0x63
	__asm__ volatile("svc %[svid]\n"
   130b6:	df03      	svc	3
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
   130b8:	f7fc ffc6 	bl	10048 <z_impl_k_current_get>
   130bc:	e7f5      	b.n	130aa <z_thread_entry+0x16>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
   130be:	4610      	mov	r0, r2
   130c0:	f7f8 f8b2 	bl	b228 <z_impl_k_thread_abort>
   130c4:	e7f8      	b.n	130b8 <z_thread_entry+0x24>

000130c6 <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   130c6:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   130ca:	b923      	cbnz	r3, 130d6 <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   130cc:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   130d0:	f000 0001 	and.w	r0, r0, #1
   130d4:	4770      	bx	lr
		return false;
   130d6:	2000      	movs	r0, #0
}
   130d8:	4770      	bx	lr

000130da <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   130da:	e92d 4150 	stmdb	sp!, {r4, r6, r8, lr}
   130de:	4604      	mov	r4, r0
   130e0:	f7ff fff1 	bl	130c6 <z_arch_is_user_context>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   130e4:	b1f8      	cbz	r0, 13126 <z_work_q_main+0x4c>
	register u32_t ret __asm__("r0") = arg1;
   130e6:	4620      	mov	r0, r4
	register u32_t r1 __asm__("r1") = arg2;
   130e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	register u32_t r6 __asm__("r6") = call_id;
   130ec:	2654      	movs	r6, #84	; 0x54
	__asm__ volatile("svc %[svid]\n"
   130ee:	df03      	svc	3
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   130f0:	2800      	cmp	r0, #0
   130f2:	d0f5      	beq.n	130e0 <z_work_q_main+0x6>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   130f4:	f100 0308 	add.w	r3, r0, #8
			continue;
		}

		handler = work->handler;
   130f8:	6842      	ldr	r2, [r0, #4]
   130fa:	f3bf 8f5b 	dmb	ish
   130fe:	e853 1f00 	ldrex	r1, [r3]
   13102:	f021 0601 	bic.w	r6, r1, #1
   13106:	e843 6c00 	strex	ip, r6, [r3]
   1310a:	f1bc 0f00 	cmp.w	ip, #0
   1310e:	d1f6      	bne.n	130fe <z_work_q_main+0x24>
   13110:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   13114:	07cb      	lsls	r3, r1, #31
   13116:	d500      	bpl.n	1311a <z_work_q_main+0x40>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   13118:	4790      	blx	r2
   1311a:	f7ff ffd4 	bl	130c6 <z_arch_is_user_context>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   1311e:	b140      	cbz	r0, 13132 <z_work_q_main+0x58>
	register u32_t r6 __asm__("r6") = call_id;
   13120:	2678      	movs	r6, #120	; 0x78
	__asm__ volatile("svc %[svid]\n"
   13122:	df03      	svc	3
	return ret;
   13124:	e7dc      	b.n	130e0 <z_work_q_main+0x6>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   13126:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1312a:	4620      	mov	r0, r4
   1312c:	f005 f9a9 	bl	18482 <z_impl_k_queue_get>
   13130:	e7de      	b.n	130f0 <z_work_q_main+0x16>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   13132:	f7fc feb3 	bl	fe9c <z_impl_k_yield>
   13136:	e7d3      	b.n	130e0 <z_work_q_main+0x6>

00013138 <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   13138:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   1313c:	b923      	cbnz	r3, 13148 <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   1313e:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   13142:	f000 0001 	and.w	r0, r0, #1
   13146:	4770      	bx	lr
		return false;
   13148:	2000      	movs	r0, #0
}
   1314a:	4770      	bx	lr

0001314c <z_arch_printk_char_out>:
}
   1314c:	2000      	movs	r0, #0
   1314e:	4770      	bx	lr

00013150 <print_err>:
{
   13150:	b570      	push	{r4, r5, r6, lr}
   13152:	4604      	mov	r4, r0
   13154:	460d      	mov	r5, r1
	out('E', ctx);
   13156:	2045      	movs	r0, #69	; 0x45
   13158:	47a0      	blx	r4
	out('R', ctx);
   1315a:	4629      	mov	r1, r5
   1315c:	2052      	movs	r0, #82	; 0x52
   1315e:	47a0      	blx	r4
	out('R', ctx);
   13160:	4629      	mov	r1, r5
   13162:	4623      	mov	r3, r4
   13164:	2052      	movs	r0, #82	; 0x52
}
   13166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   1316a:	4718      	bx	r3

0001316c <str_out>:
{
   1316c:	b530      	push	{r4, r5, lr}
   1316e:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   13170:	680c      	ldr	r4, [r1, #0]
   13172:	1c55      	adds	r5, r2, #1
   13174:	b114      	cbz	r4, 1317c <str_out+0x10>
   13176:	684b      	ldr	r3, [r1, #4]
   13178:	4293      	cmp	r3, r2
   1317a:	dc01      	bgt.n	13180 <str_out+0x14>
		ctx->count++;
   1317c:	608d      	str	r5, [r1, #8]
}
   1317e:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   13180:	3b01      	subs	r3, #1
   13182:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   13184:	bf08      	it	eq
   13186:	2200      	moveq	r2, #0
   13188:	608d      	str	r5, [r1, #8]
   1318a:	bf0c      	ite	eq
   1318c:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1318e:	54a0      	strbne	r0, [r4, r2]
   13190:	e7f5      	b.n	1317e <str_out+0x12>

00013192 <z_vprintk>:
{
   13192:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13196:	b08b      	sub	sp, #44	; 0x2c
   13198:	461c      	mov	r4, r3
	int long_ctr = 0;
   1319a:	f04f 0900 	mov.w	r9, #0
   1319e:	1e53      	subs	r3, r2, #1
{
   131a0:	4605      	mov	r5, r0
   131a2:	460e      	mov	r6, r1
   131a4:	9303      	str	r3, [sp, #12]
	int min_width = -1;
   131a6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   131aa:	464f      	mov	r7, r9
			might_format = 0;
   131ac:	f04f 0b00 	mov.w	fp, #0
						break;
   131b0:	e007      	b.n	131c2 <z_vprintk+0x30>
		if (!might_format) {
   131b2:	f1bb 0f00 	cmp.w	fp, #0
   131b6:	d10d      	bne.n	131d4 <z_vprintk+0x42>
			if (*fmt != '%') {
   131b8:	2825      	cmp	r0, #37	; 0x25
   131ba:	f000 812e 	beq.w	1341a <z_vprintk+0x288>
				out((int)*fmt, ctx);
   131be:	4631      	mov	r1, r6
   131c0:	47a8      	blx	r5
	while (*fmt) {
   131c2:	9b03      	ldr	r3, [sp, #12]
   131c4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   131c8:	9303      	str	r3, [sp, #12]
   131ca:	2800      	cmp	r0, #0
   131cc:	d1f1      	bne.n	131b2 <z_vprintk+0x20>
}
   131ce:	b00b      	add	sp, #44	; 0x2c
   131d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   131d4:	2864      	cmp	r0, #100	; 0x64
   131d6:	d05f      	beq.n	13298 <z_vprintk+0x106>
   131d8:	d819      	bhi.n	1320e <z_vprintk+0x7c>
   131da:	2839      	cmp	r0, #57	; 0x39
   131dc:	d80a      	bhi.n	131f4 <z_vprintk+0x62>
   131de:	2831      	cmp	r0, #49	; 0x31
   131e0:	d24e      	bcs.n	13280 <z_vprintk+0xee>
   131e2:	282d      	cmp	r0, #45	; 0x2d
   131e4:	f000 8120 	beq.w	13428 <z_vprintk+0x296>
   131e8:	2830      	cmp	r0, #48	; 0x30
   131ea:	d03d      	beq.n	13268 <z_vprintk+0xd6>
   131ec:	2825      	cmp	r0, #37	; 0x25
   131ee:	d107      	bne.n	13200 <z_vprintk+0x6e>
				out((int)'%', ctx);
   131f0:	4631      	mov	r1, r6
   131f2:	e110      	b.n	13416 <z_vprintk+0x284>
			switch (*fmt) {
   131f4:	2858      	cmp	r0, #88	; 0x58
   131f6:	f000 80a3 	beq.w	13340 <z_vprintk+0x1ae>
   131fa:	2863      	cmp	r0, #99	; 0x63
   131fc:	f000 8108 	beq.w	13410 <z_vprintk+0x27e>
				out((int)'%', ctx);
   13200:	4631      	mov	r1, r6
   13202:	2025      	movs	r0, #37	; 0x25
   13204:	47a8      	blx	r5
				out((int)*fmt, ctx);
   13206:	9b03      	ldr	r3, [sp, #12]
   13208:	4631      	mov	r1, r6
   1320a:	7818      	ldrb	r0, [r3, #0]
   1320c:	e103      	b.n	13416 <z_vprintk+0x284>
			switch (*fmt) {
   1320e:	2870      	cmp	r0, #112	; 0x70
   13210:	f000 808d 	beq.w	1332e <z_vprintk+0x19c>
   13214:	d806      	bhi.n	13224 <z_vprintk+0x92>
   13216:	2869      	cmp	r0, #105	; 0x69
   13218:	d03e      	beq.n	13298 <z_vprintk+0x106>
   1321a:	286c      	cmp	r0, #108	; 0x6c
   1321c:	d039      	beq.n	13292 <z_vprintk+0x100>
   1321e:	2868      	cmp	r0, #104	; 0x68
   13220:	d0cf      	beq.n	131c2 <z_vprintk+0x30>
   13222:	e7ed      	b.n	13200 <z_vprintk+0x6e>
   13224:	2875      	cmp	r0, #117	; 0x75
   13226:	d06b      	beq.n	13300 <z_vprintk+0x16e>
   13228:	d81a      	bhi.n	13260 <z_vprintk+0xce>
   1322a:	2873      	cmp	r0, #115	; 0x73
   1322c:	d1e8      	bne.n	13200 <z_vprintk+0x6e>
				char *s = va_arg(ap, char *);
   1322e:	f854 bb04 	ldr.w	fp, [r4], #4
				while (*s)
   13232:	46da      	mov	sl, fp
   13234:	4652      	mov	r2, sl
   13236:	f81a 0b01 	ldrb.w	r0, [sl], #1
   1323a:	2800      	cmp	r0, #0
   1323c:	f040 80e5 	bne.w	1340a <z_vprintk+0x278>
				if (padding == PAD_SPACE_AFTER) {
   13240:	2f03      	cmp	r7, #3
   13242:	f040 80f5 	bne.w	13430 <z_vprintk+0x29e>
					int remaining = min_width - (s - start);
   13246:	eba2 0b0b 	sub.w	fp, r2, fp
   1324a:	eba8 0b0b 	sub.w	fp, r8, fp
					while (remaining-- > 0) {
   1324e:	f1bb 0f00 	cmp.w	fp, #0
   13252:	ddab      	ble.n	131ac <z_vprintk+0x1a>
						out(' ', ctx);
   13254:	4631      	mov	r1, r6
   13256:	2020      	movs	r0, #32
   13258:	47a8      	blx	r5
   1325a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   1325e:	e7f6      	b.n	1324e <z_vprintk+0xbc>
			switch (*fmt) {
   13260:	2878      	cmp	r0, #120	; 0x78
   13262:	d06d      	beq.n	13340 <z_vprintk+0x1ae>
   13264:	287a      	cmp	r0, #122	; 0x7a
   13266:	e7db      	b.n	13220 <z_vprintk+0x8e>
				if (min_width < 0 && padding == PAD_NONE) {
   13268:	f1b8 0f00 	cmp.w	r8, #0
   1326c:	da0b      	bge.n	13286 <z_vprintk+0xf4>
   1326e:	2f00      	cmp	r7, #0
   13270:	f000 80dc 	beq.w	1342c <z_vprintk+0x29a>
					min_width = *fmt - '0';
   13274:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   13278:	2f00      	cmp	r7, #0
   1327a:	bf08      	it	eq
   1327c:	2702      	moveq	r7, #2
   1327e:	e7a0      	b.n	131c2 <z_vprintk+0x30>
				if (min_width < 0) {
   13280:	f1b8 0f00 	cmp.w	r8, #0
   13284:	dbf6      	blt.n	13274 <z_vprintk+0xe2>
					min_width = 10 * min_width + *fmt - '0';
   13286:	220a      	movs	r2, #10
   13288:	fb02 0808 	mla	r8, r2, r8, r0
   1328c:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   13290:	e7f2      	b.n	13278 <z_vprintk+0xe6>
				long_ctr++;
   13292:	f109 0901 	add.w	r9, r9, #1
   13296:	e794      	b.n	131c2 <z_vprintk+0x30>
				if (long_ctr == 0) {
   13298:	f1b9 0f00 	cmp.w	r9, #0
   1329c:	d114      	bne.n	132c8 <z_vprintk+0x136>
					long ld = va_arg(ap, long);
   1329e:	f854 ab04 	ldr.w	sl, [r4], #4
				if (d < 0) {
   132a2:	f1ba 0f00 	cmp.w	sl, #0
   132a6:	da06      	bge.n	132b6 <z_vprintk+0x124>
					out((int)'-', ctx);
   132a8:	4631      	mov	r1, r6
   132aa:	202d      	movs	r0, #45	; 0x2d
   132ac:	47a8      	blx	r5
					d = -d;
   132ae:	f1ca 0a00 	rsb	sl, sl, #0
					min_width--;
   132b2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
   132b6:	f8cd 8000 	str.w	r8, [sp]
   132ba:	463b      	mov	r3, r7
   132bc:	4652      	mov	r2, sl
				_printk_dec_ulong(out, ctx, u, padding,
   132be:	4631      	mov	r1, r6
   132c0:	4628      	mov	r0, r5
   132c2:	f7f1 ff43 	bl	514c <_printk_dec_ulong>
				break;
   132c6:	e771      	b.n	131ac <z_vprintk+0x1a>
				} else if (long_ctr == 1) {
   132c8:	f1b9 0f01 	cmp.w	r9, #1
   132cc:	d0e7      	beq.n	1329e <z_vprintk+0x10c>
					long long lld = va_arg(ap, long long);
   132ce:	3407      	adds	r4, #7
   132d0:	f024 0407 	bic.w	r4, r4, #7
   132d4:	e8f4 ab02 	ldrd	sl, fp, [r4], #8
					if (lld > INT32_MAX ||
   132d8:	f11a 4300 	adds.w	r3, sl, #2147483648	; 0x80000000
   132dc:	9306      	str	r3, [sp, #24]
   132de:	f14b 0300 	adc.w	r3, fp, #0
   132e2:	9307      	str	r3, [sp, #28]
   132e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   132e8:	2300      	movs	r3, #0
   132ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   132ee:	428b      	cmp	r3, r1
   132f0:	bf08      	it	eq
   132f2:	4282      	cmpeq	r2, r0
   132f4:	d2d5      	bcs.n	132a2 <z_vprintk+0x110>
						print_err(out, ctx);
   132f6:	4631      	mov	r1, r6
   132f8:	4628      	mov	r0, r5
   132fa:	f7ff ff29 	bl	13150 <print_err>
   132fe:	e755      	b.n	131ac <z_vprintk+0x1a>
				if (long_ctr == 0) {
   13300:	f1b9 0f00 	cmp.w	r9, #0
   13304:	d105      	bne.n	13312 <z_vprintk+0x180>
					long lu = va_arg(ap, unsigned long);
   13306:	f854 2b04 	ldr.w	r2, [r4], #4
				_printk_dec_ulong(out, ctx, u, padding,
   1330a:	f8cd 8000 	str.w	r8, [sp]
   1330e:	463b      	mov	r3, r7
   13310:	e7d5      	b.n	132be <z_vprintk+0x12c>
				} else if (long_ctr == 1) {
   13312:	f1b9 0f01 	cmp.w	r9, #1
   13316:	d0f6      	beq.n	13306 <z_vprintk+0x174>
					unsigned long long llu =
   13318:	3407      	adds	r4, #7
   1331a:	f024 0407 	bic.w	r4, r4, #7
   1331e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > INT32_MAX) {
   13322:	2b00      	cmp	r3, #0
   13324:	bf08      	it	eq
   13326:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
   1332a:	d3ee      	bcc.n	1330a <z_vprintk+0x178>
   1332c:	e7e3      	b.n	132f6 <z_vprintk+0x164>
				  out('0', ctx);
   1332e:	4631      	mov	r1, r6
   13330:	2030      	movs	r0, #48	; 0x30
   13332:	47a8      	blx	r5
				  out('x', ctx);
   13334:	4631      	mov	r1, r6
   13336:	2078      	movs	r0, #120	; 0x78
   13338:	47a8      	blx	r5
				  min_width = 8;
   1333a:	f04f 0808 	mov.w	r8, #8
				  padding = PAD_ZERO_BEFORE;
   1333e:	2701      	movs	r7, #1
				if (long_ctr < 2) {
   13340:	f1b9 0f01 	cmp.w	r9, #1
   13344:	dc26      	bgt.n	13394 <z_vprintk+0x202>
					x = va_arg(ap, unsigned long);
   13346:	f854 3b04 	ldr.w	r3, [r4], #4
   1334a:	9308      	str	r3, [sp, #32]
   1334c:	2300      	movs	r3, #0
	int remaining = 16; /* 16 digits max */
   1334e:	2210      	movs	r2, #16
	int digits = 0;
   13350:	f04f 0a00 	mov.w	sl, #0
					x = va_arg(ap, unsigned long long);
   13354:	9304      	str	r3, [sp, #16]
	int found_largest_digit = 0;
   13356:	f8cd a014 	str.w	sl, [sp, #20]
	int size = sizeof(num) * 2;
   1335a:	4611      	mov	r1, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
   1335c:	1e4b      	subs	r3, r1, #1
   1335e:	0098      	lsls	r0, r3, #2
   13360:	9302      	str	r3, [sp, #8]
   13362:	9b08      	ldr	r3, [sp, #32]
   13364:	f1c0 0e20 	rsb	lr, r0, #32
   13368:	f1a0 0c20 	sub.w	ip, r0, #32
   1336c:	fa23 f000 	lsr.w	r0, r3, r0
   13370:	9b04      	ldr	r3, [sp, #16]
   13372:	fa03 fe0e 	lsl.w	lr, r3, lr
   13376:	ea40 000e 	orr.w	r0, r0, lr
   1337a:	fa23 fc0c 	lsr.w	ip, r3, ip
   1337e:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble != 0 || found_largest_digit != 0 || size == 1) {
   13382:	f010 000f 	ands.w	r0, r0, #15
   13386:	d112      	bne.n	133ae <z_vprintk+0x21c>
   13388:	9b05      	ldr	r3, [sp, #20]
   1338a:	b90b      	cbnz	r3, 13390 <z_vprintk+0x1fe>
   1338c:	2901      	cmp	r1, #1
   1338e:	d12c      	bne.n	133ea <z_vprintk+0x258>
			nibble += nibble > 9 ? 87 : 48;
   13390:	2130      	movs	r1, #48	; 0x30
   13392:	e010      	b.n	133b6 <z_vprintk+0x224>
					x = va_arg(ap, unsigned long long);
   13394:	3407      	adds	r4, #7
   13396:	f024 0207 	bic.w	r2, r4, #7
   1339a:	4614      	mov	r4, r2
   1339c:	f854 3b08 	ldr.w	r3, [r4], #8
   133a0:	9308      	str	r3, [sp, #32]
   133a2:	6853      	ldr	r3, [r2, #4]
   133a4:	e7d3      	b.n	1334e <z_vprintk+0x1bc>
			found_largest_digit = 1;
   133a6:	f8cd b014 	str.w	fp, [sp, #20]
		char nibble = (num >> ((size - 1) << 2) & 0xf);
   133aa:	9902      	ldr	r1, [sp, #8]
   133ac:	e7d6      	b.n	1335c <z_vprintk+0x1ca>
			nibble += nibble > 9 ? 87 : 48;
   133ae:	2809      	cmp	r0, #9
   133b0:	bf8c      	ite	hi
   133b2:	2157      	movhi	r1, #87	; 0x57
   133b4:	2130      	movls	r1, #48	; 0x30
   133b6:	4408      	add	r0, r1
			out((int)nibble, ctx);
   133b8:	b240      	sxtb	r0, r0
   133ba:	4631      	mov	r1, r6
   133bc:	9205      	str	r2, [sp, #20]
   133be:	47a8      	blx	r5
	for (; size != 0; size--) {
   133c0:	9b02      	ldr	r3, [sp, #8]
   133c2:	9a05      	ldr	r2, [sp, #20]
			digits++;
   133c4:	f10a 0a01 	add.w	sl, sl, #1
	for (; size != 0; size--) {
   133c8:	2b00      	cmp	r3, #0
   133ca:	d1ec      	bne.n	133a6 <z_vprintk+0x214>
	if (padding == PAD_SPACE_AFTER) {
   133cc:	2f03      	cmp	r7, #3
   133ce:	f47f aeed 	bne.w	131ac <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
   133d2:	ebca 0a48 	rsb	sl, sl, r8, lsl #1
		while (remaining-- > 0) {
   133d6:	f1ba 0f00 	cmp.w	sl, #0
   133da:	f77f aee7 	ble.w	131ac <z_vprintk+0x1a>
			out(' ', ctx);
   133de:	4631      	mov	r1, r6
   133e0:	2020      	movs	r0, #32
   133e2:	47a8      	blx	r5
   133e4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   133e8:	e7f5      	b.n	133d6 <z_vprintk+0x244>
		if (remaining-- <= min_width) {
   133ea:	1e53      	subs	r3, r2, #1
   133ec:	4590      	cmp	r8, r2
   133ee:	9309      	str	r3, [sp, #36]	; 0x24
   133f0:	db04      	blt.n	133fc <z_vprintk+0x26a>
			if (padding == PAD_ZERO_BEFORE) {
   133f2:	2f01      	cmp	r7, #1
   133f4:	d104      	bne.n	13400 <z_vprintk+0x26e>
				out('0', ctx);
   133f6:	4631      	mov	r1, r6
   133f8:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
   133fa:	47a8      	blx	r5
					x = va_arg(ap, unsigned long);
   133fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   133fe:	e7d4      	b.n	133aa <z_vprintk+0x218>
			} else if (padding == PAD_SPACE_BEFORE) {
   13400:	2f02      	cmp	r7, #2
   13402:	d1fb      	bne.n	133fc <z_vprintk+0x26a>
				out(' ', ctx);
   13404:	4631      	mov	r1, r6
   13406:	2020      	movs	r0, #32
   13408:	e7f7      	b.n	133fa <z_vprintk+0x268>
					out((int)(*s++), ctx);
   1340a:	4631      	mov	r1, r6
   1340c:	47a8      	blx	r5
   1340e:	e711      	b.n	13234 <z_vprintk+0xa2>
				out(c, ctx);
   13410:	f854 0b04 	ldr.w	r0, [r4], #4
   13414:	4631      	mov	r1, r6
				out((int)*fmt, ctx);
   13416:	47a8      	blx	r5
				break;
   13418:	e6c8      	b.n	131ac <z_vprintk+0x1a>
				long_ctr = 0;
   1341a:	46d9      	mov	r9, fp
				padding = PAD_NONE;
   1341c:	465f      	mov	r7, fp
				min_width = -1;
   1341e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
				might_format = 1;
   13422:	f04f 0b01 	mov.w	fp, #1
   13426:	e6cc      	b.n	131c2 <z_vprintk+0x30>
				padding = PAD_SPACE_AFTER;
   13428:	2703      	movs	r7, #3
   1342a:	e6ca      	b.n	131c2 <z_vprintk+0x30>
					padding = PAD_ZERO_BEFORE;
   1342c:	2701      	movs	r7, #1
   1342e:	e6c8      	b.n	131c2 <z_vprintk+0x30>
			might_format = 0;
   13430:	4683      	mov	fp, r0
		++fmt;
   13432:	e6c6      	b.n	131c2 <z_vprintk+0x30>

00013434 <buf_flush>:
{
   13434:	e92d 4150 	stmdb	sp!, {r4, r6, r8, lr}
	k_str_out(ctx->buf, ctx->buf_count);
   13438:	f100 0208 	add.w	r2, r0, #8
{
   1343c:	4604      	mov	r4, r0
	k_str_out(ctx->buf, ctx->buf_count);
   1343e:	6841      	ldr	r1, [r0, #4]
   13440:	f7ff fe7a 	bl	13138 <z_arch_is_user_context>

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result)

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL_RAISE, k_poll_signal_raise, int, struct k_poll_signal *, signal, int, result)

K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_STR_OUT, k_str_out, char *, c, size_t, n)
   13444:	b130      	cbz	r0, 13454 <buf_flush+0x20>
	register u32_t ret __asm__("r0") = arg1;
   13446:	4610      	mov	r0, r2
	register u32_t r6 __asm__("r6") = call_id;
   13448:	2662      	movs	r6, #98	; 0x62
	__asm__ volatile("svc %[svid]\n"
   1344a:	df03      	svc	3
	ctx->buf_count = 0U;
   1344c:	2300      	movs	r3, #0
   1344e:	6063      	str	r3, [r4, #4]
}
   13450:	e8bd 8150 	ldmia.w	sp!, {r4, r6, r8, pc}
   13454:	4610      	mov	r0, r2
   13456:	f7f1 fecf 	bl	51f8 <z_impl_k_str_out>
   1345a:	e7f7      	b.n	1344c <buf_flush+0x18>

0001345c <buf_char_out>:
	ctx->count++;
   1345c:	680b      	ldr	r3, [r1, #0]
   1345e:	3301      	adds	r3, #1
   13460:	600b      	str	r3, [r1, #0]
	ctx->buf[ctx->buf_count++] = c;
   13462:	684b      	ldr	r3, [r1, #4]
   13464:	1c5a      	adds	r2, r3, #1
   13466:	440b      	add	r3, r1
	if (ctx->buf_count == CONFIG_PRINTK_BUFFER_SIZE) {
   13468:	2a20      	cmp	r2, #32
{
   1346a:	b510      	push	{r4, lr}
	ctx->buf[ctx->buf_count++] = c;
   1346c:	604a      	str	r2, [r1, #4]
{
   1346e:	4604      	mov	r4, r0
	ctx->buf[ctx->buf_count++] = c;
   13470:	7218      	strb	r0, [r3, #8]
	if (ctx->buf_count == CONFIG_PRINTK_BUFFER_SIZE) {
   13472:	d102      	bne.n	1347a <buf_char_out+0x1e>
		buf_flush(ctx);
   13474:	4608      	mov	r0, r1
   13476:	f7ff ffdd 	bl	13434 <buf_flush>
}
   1347a:	4620      	mov	r0, r4
   1347c:	bd10      	pop	{r4, pc}

0001347e <printk>:
{
   1347e:	b40f      	push	{r0, r1, r2, r3}
   13480:	b507      	push	{r0, r1, r2, lr}
   13482:	a904      	add	r1, sp, #16
   13484:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   13488:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1348a:	f7f1 fec3 	bl	5214 <vprintk>
}
   1348e:	b003      	add	sp, #12
   13490:	f85d eb04 	ldr.w	lr, [sp], #4
   13494:	b004      	add	sp, #16
   13496:	4770      	bx	lr

00013498 <snprintk>:
{
   13498:	b40c      	push	{r2, r3}
   1349a:	b507      	push	{r0, r1, r2, lr}
   1349c:	ab04      	add	r3, sp, #16
   1349e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   134a2:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   134a4:	f7f1 fefc 	bl	52a0 <vsnprintk>
}
   134a8:	b003      	add	sp, #12
   134aa:	f85d eb04 	ldr.w	lr, [sp], #4
   134ae:	b002      	add	sp, #8
   134b0:	4770      	bx	lr

000134b2 <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   134b2:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   134b6:	b923      	cbnz	r3, 134c2 <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   134b8:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   134bc:	f000 0001 	and.w	r0, r0, #1
   134c0:	4770      	bx	lr
		return false;
   134c2:	2000      	movs	r0, #0
}
   134c4:	4770      	bx	lr

000134c6 <z_impl_z_sys_mutex_kernel_lock>:
{
   134c6:	e92d 4150 	stmdb	sp!, {r4, r6, r8, lr}
   134ca:	460c      	mov	r4, r1
	obj = z_object_find(mutex);
   134cc:	f7ec fe98 	bl	200 <z_object_find>
	if (obj == NULL || obj->type != K_OBJ_SYS_MUTEX) {
   134d0:	b198      	cbz	r0, 134fa <z_impl_z_sys_mutex_kernel_lock+0x34>
   134d2:	7983      	ldrb	r3, [r0, #6]
   134d4:	2b0c      	cmp	r3, #12
   134d6:	d110      	bne.n	134fa <z_impl_z_sys_mutex_kernel_lock+0x34>
	return (struct k_mutex *)obj->data;
   134d8:	6882      	ldr	r2, [r0, #8]
	if (kernel_mutex == NULL) {
   134da:	b172      	cbz	r2, 134fa <z_impl_z_sys_mutex_kernel_lock+0x34>
   134dc:	f7ff ffe9 	bl	134b2 <z_arch_is_user_context>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   134e0:	b128      	cbz	r0, 134ee <z_impl_z_sys_mutex_kernel_lock+0x28>
	register u32_t ret __asm__("r0") = arg1;
   134e2:	4610      	mov	r0, r2
	register u32_t r1 __asm__("r1") = arg2;
   134e4:	4621      	mov	r1, r4
	register u32_t r6 __asm__("r6") = call_id;
   134e6:	2644      	movs	r6, #68	; 0x44
	__asm__ volatile("svc %[svid]\n"
   134e8:	df03      	svc	3
}
   134ea:	e8bd 8150 	ldmia.w	sp!, {r4, r6, r8, pc}
   134ee:	4621      	mov	r1, r4
   134f0:	4610      	mov	r0, r2
   134f2:	e8bd 4150 	ldmia.w	sp!, {r4, r6, r8, lr}
   134f6:	f7fc b853 	b.w	f5a0 <z_impl_k_mutex_lock>
		return -EINVAL;
   134fa:	f06f 0015 	mvn.w	r0, #21
   134fe:	e7f4      	b.n	134ea <z_impl_z_sys_mutex_kernel_lock+0x24>

00013500 <z_hdlr_z_sys_mutex_kernel_lock>:
{
   13500:	b538      	push	{r3, r4, r5, lr}
   13502:	4604      	mov	r4, r0
   13504:	460d      	mov	r5, r1
	if (check_sys_mutex_addr(mutex)) {
   13506:	f7f1 fedf 	bl	52c8 <check_sys_mutex_addr>
   1350a:	b928      	cbnz	r0, 13518 <z_hdlr_z_sys_mutex_kernel_lock+0x18>
	return z_impl_z_sys_mutex_kernel_lock((struct sys_mutex *)mutex,
   1350c:	4629      	mov	r1, r5
   1350e:	4620      	mov	r0, r4
}
   13510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_z_sys_mutex_kernel_lock((struct sys_mutex *)mutex,
   13514:	f7ff bfd7 	b.w	134c6 <z_impl_z_sys_mutex_kernel_lock>
}
   13518:	f06f 000c 	mvn.w	r0, #12
   1351c:	bd38      	pop	{r3, r4, r5, pc}

0001351e <z_hdlr_z_sys_mutex_kernel_unlock>:

Z_SYSCALL_HANDLER(z_sys_mutex_kernel_unlock, mutex)
{
   1351e:	b510      	push	{r4, lr}
   13520:	4604      	mov	r4, r0
	if (check_sys_mutex_addr(mutex)) {
   13522:	f7f1 fed1 	bl	52c8 <check_sys_mutex_addr>
   13526:	b920      	cbnz	r0, 13532 <z_hdlr_z_sys_mutex_kernel_unlock+0x14>
		return -EACCES;
	}

	return z_impl_z_sys_mutex_kernel_unlock((struct sys_mutex *)mutex);
   13528:	4620      	mov	r0, r4
}
   1352a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_z_sys_mutex_kernel_unlock((struct sys_mutex *)mutex);
   1352e:	f7f1 bee7 	b.w	5300 <z_impl_z_sys_mutex_kernel_unlock>
}
   13532:	f06f 000c 	mvn.w	r0, #12
   13536:	bd10      	pop	{r4, pc}

00013538 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_STAT, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);

GEN_ABS_SYM_END
   13538:	4770      	bx	lr

0001353a <nrfx_isr>:

#include <nrfx.h>

void nrfx_isr(void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1353a:	4700      	bx	r0

0001353c <nrf_usbd_task_trigger>:
    return (volatile uint32_t*)(((uint8_t *)NRF_USBD) + (uint32_t)offset);
   1353c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   13540:	f500 301c 	add.w	r0, r0, #159744	; 0x27000
    *(nrf_usbd_getRegPtr((uint32_t)task)) = 1UL;
   13544:	2301      	movs	r3, #1
   13546:	6003      	str	r3, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
   13548:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   1354c:	f3bf 8f4f 	dsb	sy
}
   13550:	4770      	bx	lr

00013552 <ev_started_handler>:
}
   13552:	4770      	bx	lr

00013554 <ep2bit>:
{
   13554:	b508      	push	{r3, lr}
    NRFX_USBD_ASSERT_EP_VALID(ep);
   13556:	f000 030f 	and.w	r3, r0, #15
   1355a:	2b08      	cmp	r3, #8
   1355c:	d901      	bls.n	13562 <ep2bit+0xe>
   1355e:	f7f2 f951 	bl	5804 <ep2bit.part.6>
    return NRFX_USBD_EP_BITPOS(ep);
   13562:	b243      	sxtb	r3, r0
   13564:	2b00      	cmp	r3, #0
   13566:	bfb4      	ite	lt
   13568:	2000      	movlt	r0, #0
   1356a:	2010      	movge	r0, #16
   1356c:	f003 030f 	and.w	r3, r3, #15
}
   13570:	4418      	add	r0, r3
   13572:	bd08      	pop	{r3, pc}

00013574 <nrf_usbd_epin_dma_handler>:
{
   13574:	b510      	push	{r4, lr}
   13576:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
   13578:	f7f2 f83a 	bl	55f0 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
   1357c:	f7f2 f92e 	bl	57dc <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   13580:	7b83      	ldrb	r3, [r0, #14]
   13582:	2b03      	cmp	r3, #3
   13584:	d10a      	bne.n	1359c <nrf_usbd_epin_dma_handler+0x28>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   13586:	4620      	mov	r0, r4
   13588:	f7ff ffe4 	bl	13554 <ep2bit>
   1358c:	2301      	movs	r3, #1
   1358e:	fa03 f000 	lsl.w	r0, r3, r0
   13592:	43c0      	mvns	r0, r0
}
   13594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   13598:	f7f2 ba2e 	b.w	59f8 <atomic_and.constprop.25>
    else if (p_state->handler.feeder == NULL)
   1359c:	6803      	ldr	r3, [r0, #0]
   1359e:	2b00      	cmp	r3, #0
   135a0:	d0f1      	beq.n	13586 <nrf_usbd_epin_dma_handler+0x12>
}
   135a2:	bd10      	pop	{r4, pc}

000135a4 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   135a4:	2087      	movs	r0, #135	; 0x87
   135a6:	f7ff bfe5 	b.w	13574 <nrf_usbd_epin_dma_handler>

000135aa <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   135aa:	2086      	movs	r0, #134	; 0x86
   135ac:	f7ff bfe2 	b.w	13574 <nrf_usbd_epin_dma_handler>

000135b0 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   135b0:	2085      	movs	r0, #133	; 0x85
   135b2:	f7ff bfdf 	b.w	13574 <nrf_usbd_epin_dma_handler>

000135b6 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   135b6:	2084      	movs	r0, #132	; 0x84
   135b8:	f7ff bfdc 	b.w	13574 <nrf_usbd_epin_dma_handler>

000135bc <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   135bc:	2083      	movs	r0, #131	; 0x83
   135be:	f7ff bfd9 	b.w	13574 <nrf_usbd_epin_dma_handler>

000135c2 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   135c2:	2082      	movs	r0, #130	; 0x82
   135c4:	f7ff bfd6 	b.w	13574 <nrf_usbd_epin_dma_handler>

000135c8 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   135c8:	2081      	movs	r0, #129	; 0x81
   135ca:	f7ff bfd3 	b.w	13574 <nrf_usbd_epin_dma_handler>

000135ce <nrfx_usbd_ep_status_get>:
{
   135ce:	b510      	push	{r4, lr}
   135d0:	460c      	mov	r4, r1
    usbd_ep_state_t const * p_state = ep_state_access(ep);
   135d2:	f7f2 f903 	bl	57dc <ep_state_access>
	__asm__ volatile(
   135d6:	f04f 0220 	mov.w	r2, #32
   135da:	f3ef 8311 	mrs	r3, BASEPRI
   135de:	f382 8811 	msr	BASEPRI, r2
   135e2:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
   135e6:	6882      	ldr	r2, [r0, #8]
   135e8:	6022      	str	r2, [r4, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   135ea:	6802      	ldr	r2, [r0, #0]
   135ec:	b92a      	cbnz	r2, 135fa <nrfx_usbd_ep_status_get+0x2c>
   135ee:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
   135f0:	f383 8811 	msr	BASEPRI, r3
   135f4:	f3bf 8f6f 	isb	sy
}
   135f8:	bd10      	pop	{r4, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   135fa:	2004      	movs	r0, #4
   135fc:	e7f8      	b.n	135f0 <nrfx_usbd_ep_status_get+0x22>

000135fe <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   135fe:	2007      	movs	r0, #7
   13600:	f7f2 be6c 	b.w	62dc <nrf_usbd_epout_dma_handler>

00013604 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   13604:	2006      	movs	r0, #6
   13606:	f7f2 be69 	b.w	62dc <nrf_usbd_epout_dma_handler>

0001360a <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   1360a:	2005      	movs	r0, #5
   1360c:	f7f2 be66 	b.w	62dc <nrf_usbd_epout_dma_handler>

00013610 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   13610:	2004      	movs	r0, #4
   13612:	f7f2 be63 	b.w	62dc <nrf_usbd_epout_dma_handler>

00013616 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   13616:	2003      	movs	r0, #3
   13618:	f7f2 be60 	b.w	62dc <nrf_usbd_epout_dma_handler>

0001361c <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   1361c:	2002      	movs	r0, #2
   1361e:	f7f2 be5d 	b.w	62dc <nrf_usbd_epout_dma_handler>

00013622 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   13622:	2001      	movs	r0, #1
   13624:	f7f2 be5a 	b.w	62dc <nrf_usbd_epout_dma_handler>

00013628 <nrfx_usbd_setup_data_clear>:
{
   13628:	b508      	push	{r3, lr}
   1362a:	f7f1 ffd1 	bl	55d0 <nrfx_usbd_errata_type_52840_eng_b>
    if (nrfx_usbd_errata_104())
   1362e:	b958      	cbnz	r0, 13648 <nrfx_usbd_setup_data_clear+0x20>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   13630:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   13634:	b672      	cpsid	i
        nrf_usbd_task_trigger(NRF_USBD_TASK_EP0RCVOUT);
   13636:	204c      	movs	r0, #76	; 0x4c
   13638:	f7ff ff80 	bl	1353c <nrf_usbd_task_trigger>
        nrf_usbd_task_trigger(NRF_USBD_TASK_EP0RCVOUT);
   1363c:	204c      	movs	r0, #76	; 0x4c
   1363e:	f7ff ff7d 	bl	1353c <nrf_usbd_task_trigger>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   13642:	f382 8810 	msr	PRIMASK, r2
}
   13646:	bd08      	pop	{r3, pc}
        nrf_usbd_task_trigger(NRF_USBD_TASK_EP0RCVOUT);
   13648:	204c      	movs	r0, #76	; 0x4c
}
   1364a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_usbd_task_trigger(NRF_USBD_TASK_EP0RCVOUT);
   1364e:	f7ff bf75 	b.w	1353c <nrf_usbd_task_trigger>

00013652 <nrfx_usbd_setup_clear>:
    nrf_usbd_task_trigger(NRF_USBD_TASK_EP0STATUS);
   13652:	2050      	movs	r0, #80	; 0x50
   13654:	f7ff bf72 	b.w	1353c <nrf_usbd_task_trigger>

00013658 <nrfx_usbd_setup_stall>:
    nrf_usbd_task_trigger(NRF_USBD_TASK_EP0STALL);
   13658:	2054      	movs	r0, #84	; 0x54
   1365a:	f7ff bf6f 	b.w	1353c <nrf_usbd_task_trigger>

0001365e <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1365e:	2300      	movs	r3, #0
	list->head = NULL;
   13660:	e9c0 3300 	strd	r3, r3, [r0]
}
   13664:	4770      	bx	lr

00013666 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   13666:	6803      	ldr	r3, [r0, #0]
   13668:	b923      	cbnz	r3, 13674 <log_list_add_tail+0xe>
		list->head = msg;
   1366a:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1366c:	2300      	movs	r3, #0
	list->tail = msg;
   1366e:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   13670:	600b      	str	r3, [r1, #0]
}
   13672:	4770      	bx	lr
		list->tail->next = msg;
   13674:	6843      	ldr	r3, [r0, #4]
   13676:	6019      	str	r1, [r3, #0]
   13678:	e7f8      	b.n	1366c <log_list_add_tail+0x6>

0001367a <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1367a:	6800      	ldr	r0, [r0, #0]
   1367c:	4770      	bx	lr

0001367e <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   1367e:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   13680:	b10b      	cbz	r3, 13686 <log_list_head_get+0x8>
		list->head = list->head->next;
   13682:	681a      	ldr	r2, [r3, #0]
   13684:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   13686:	4618      	mov	r0, r3
   13688:	4770      	bx	lr

0001368a <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   1368a:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   1368e:	b923      	cbnz	r3, 1369a <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   13690:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   13694:	f000 0001 	and.w	r0, r0, #1
   13698:	4770      	bx	lr
		return false;
   1369a:	2000      	movs	r0, #0
}
   1369c:	4770      	bx	lr

0001369e <dummy_timestamp>:
}
   1369e:	2000      	movs	r0, #0
   136a0:	4770      	bx	lr

000136a2 <k_wakeup>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread)
   136a2:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
   136a6:	4602      	mov	r2, r0
   136a8:	f7ff ffef 	bl	1368a <z_arch_is_user_context>
   136ac:	b120      	cbz	r0, 136b8 <k_wakeup+0x16>
	register u32_t ret __asm__("r0") = arg1;
   136ae:	4610      	mov	r0, r2
	register u32_t r6 __asm__("r6") = call_id;
   136b0:	2677      	movs	r6, #119	; 0x77
	__asm__ volatile("svc %[svid]\n"
   136b2:	df03      	svc	3
   136b4:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
   136b8:	4610      	mov	r0, r2
   136ba:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
   136be:	f7fc bc83 	b.w	ffc8 <z_impl_k_wakeup>

000136c2 <timestamp_get>:
		return k_cycle_get_32();
   136c2:	f7f7 ba17 	b.w	aaf4 <z_timer_cycle_get_32>

000136c6 <log_process>:
K_SYSCALL_DECLARE1(K_SYSCALL_LOG_PROCESS, log_process, bool, bool, bypass)
   136c6:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
   136ca:	4602      	mov	r2, r0
   136cc:	f7ff ffdd 	bl	1368a <z_arch_is_user_context>
   136d0:	b920      	cbnz	r0, 136dc <log_process+0x16>
   136d2:	4610      	mov	r0, r2
   136d4:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
   136d8:	f7f3 ba74 	b.w	6bc4 <z_impl_log_process>
   136dc:	4610      	mov	r0, r2
	register u32_t r6 __asm__("r6") = call_id;
   136de:	2680      	movs	r6, #128	; 0x80
	__asm__ volatile("svc %[svid]\n"
   136e0:	df03      	svc	3
   136e2:	3000      	adds	r0, #0
   136e4:	bf18      	it	ne
   136e6:	2001      	movne	r0, #1
   136e8:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}

000136ec <log_0>:
{
   136ec:	b538      	push	{r3, r4, r5, lr}
   136ee:	4605      	mov	r5, r0
   136f0:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   136f2:	f7f3 f9cf 	bl	6a94 <z_log_msg_std_alloc>

	if (msg != NULL) {
   136f6:	b128      	cbz	r0, 13704 <log_0+0x18>
		msg->str = str;
   136f8:	6105      	str	r5, [r0, #16]
	msg_finalize(msg, src_level);
   136fa:	4621      	mov	r1, r4
}
   136fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	msg_finalize(msg, src_level);
   13700:	f7f3 bab6 	b.w	6c70 <msg_finalize>
}
   13704:	bd38      	pop	{r3, r4, r5, pc}

00013706 <log_1>:
{
   13706:	b570      	push	{r4, r5, r6, lr}
   13708:	4604      	mov	r4, r0
   1370a:	460e      	mov	r6, r1
   1370c:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       u32_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1370e:	f7f3 f9c1 	bl	6a94 <z_log_msg_std_alloc>

	if (msg != NULL) {
   13712:	b158      	cbz	r0, 1372c <log_1+0x26>
		msg->str = str;
   13714:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   13716:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
   13718:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   1371a:	2201      	movs	r2, #1
   1371c:	f362 1407 	bfi	r4, r2, #4, #4
   13720:	7244      	strb	r4, [r0, #9]
	msg_finalize(msg, src_level);
   13722:	4629      	mov	r1, r5
}
   13724:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	msg_finalize(msg, src_level);
   13728:	f7f3 baa2 	b.w	6c70 <msg_finalize>
}
   1372c:	bd70      	pop	{r4, r5, r6, pc}

0001372e <log_2>:
{
   1372e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13732:	4605      	mov	r5, r0
   13734:	4688      	mov	r8, r1
   13736:	4617      	mov	r7, r2
   13738:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       u32_t arg1,
					       u32_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1373a:	f7f3 f9ab 	bl	6a94 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1373e:	b160      	cbz	r0, 1375a <log_2+0x2c>
		msg->str = str;
   13740:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   13742:	7a45      	ldrb	r5, [r0, #9]
   13744:	2302      	movs	r3, #2
   13746:	f363 1507 	bfi	r5, r3, #4, #4
   1374a:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1374c:	e9c0 8705 	strd	r8, r7, [r0, #20]
	msg_finalize(msg, src_level);
   13750:	4631      	mov	r1, r6
}
   13752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	msg_finalize(msg, src_level);
   13756:	f7f3 ba8b 	b.w	6c70 <msg_finalize>
}
   1375a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001375e <log_hexdump>:
{
   1375e:	b510      	push	{r4, lr}
   13760:	461c      	mov	r4, r3
	struct log_msg *msg = log_msg_hexdump_create(str, data, length);
   13762:	f000 f8cc 	bl	138fe <log_msg_hexdump_create>
	if (msg == NULL) {
   13766:	b120      	cbz	r0, 13772 <log_hexdump+0x14>
	msg_finalize(msg, src_level);
   13768:	4621      	mov	r1, r4
}
   1376a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	msg_finalize(msg, src_level);
   1376e:	f7f3 ba7f 	b.w	6c70 <msg_finalize>
}
   13772:	bd10      	pop	{r4, pc}

00013774 <z_hdlr_log_process>:
{
   13774:	b508      	push	{r3, lr}
	return (u32_t)log_process((bool)(bypass));
   13776:	3000      	adds	r0, #0
   13778:	bf18      	it	ne
   1377a:	2001      	movne	r0, #1
   1377c:	f7ff ffa3 	bl	136c6 <log_process>
}
   13780:	bd08      	pop	{r3, pc}

00013782 <z_hdlr_log_panic>:
Z_SYSCALL_HANDLER0_SIMPLE_VOID(log_panic);
   13782:	b508      	push	{r3, lr}
   13784:	f7f3 fb5a 	bl	6e3c <z_impl_log_panic>
   13788:	2000      	movs	r0, #0
   1378a:	bd08      	pop	{r3, pc}

0001378c <log_generic_from_user>:
{
   1378c:	e92d 4150 	stmdb	sp!, {r4, r6, r8, lr}
   13790:	b08c      	sub	sp, #48	; 0x30
   13792:	4604      	mov	r4, r0
	vsnprintk(buffer, sizeof(buffer), fmt, ap);
   13794:	4613      	mov	r3, r2
   13796:	4668      	mov	r0, sp
   13798:	460a      	mov	r2, r1
   1379a:	212f      	movs	r1, #47	; 0x2f
   1379c:	f7f1 fd80 	bl	52a0 <vsnprintk>
	src_level_union.structure = src_level;
   137a0:	2200      	movs	r2, #0
   137a2:	f364 020f 	bfi	r2, r4, #0, #16
   137a6:	f7ff ff70 	bl	1368a <z_arch_is_user_context>

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE2_VOID(K_SYSCALL_Z_LOG_STRING_FROM_USER, z_log_string_from_user, u32_t, src_level_val, const char *, str)
   137aa:	b130      	cbz	r0, 137ba <log_generic_from_user+0x2e>
	register u32_t ret __asm__("r0") = arg1;
   137ac:	4610      	mov	r0, r2
	register u32_t r1 __asm__("r1") = arg2;
   137ae:	4669      	mov	r1, sp
	register u32_t r6 __asm__("r6") = call_id;
   137b0:	26af      	movs	r6, #175	; 0xaf
	__asm__ volatile("svc %[svid]\n"
   137b2:	df03      	svc	3
}
   137b4:	b00c      	add	sp, #48	; 0x30
   137b6:	e8bd 8150 	ldmia.w	sp!, {r4, r6, r8, pc}
   137ba:	e7fb      	b.n	137b4 <log_generic_from_user+0x28>

000137bc <log_from_user>:
{
   137bc:	b40e      	push	{r1, r2, r3}
   137be:	b503      	push	{r0, r1, lr}
   137c0:	aa03      	add	r2, sp, #12
   137c2:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   137c6:	9201      	str	r2, [sp, #4]
	log_generic_from_user(src_level, fmt, ap);
   137c8:	f7ff ffe0 	bl	1378c <log_generic_from_user>
}
   137cc:	b002      	add	sp, #8
   137ce:	f85d eb04 	ldr.w	lr, [sp], #4
   137d2:	b003      	add	sp, #12
   137d4:	4770      	bx	lr

000137d6 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   137d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   137da:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
   137dc:	8903      	ldrh	r3, [r0, #8]
{
   137de:	f89d 7020 	ldrb.w	r7, [sp, #32]
	u32_t available_len = msg->hdr.params.hexdump.length;
   137e2:	089b      	lsrs	r3, r3, #2
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
   137e4:	42a3      	cmp	r3, r4
{
   137e6:	460e      	mov	r6, r1
	if (offset >= available_len) {
   137e8:	d803      	bhi.n	137f2 <log_msg_hexdump_data_op+0x1c>
		*length = 0;
   137ea:	2300      	movs	r3, #0
   137ec:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   137ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   137f2:	6811      	ldr	r1, [r2, #0]
   137f4:	4421      	add	r1, r4
   137f6:	4299      	cmp	r1, r3
		*length = available_len - offset;
   137f8:	bf84      	itt	hi
   137fa:	1b19      	subhi	r1, r3, r4
   137fc:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   137fe:	2b0c      	cmp	r3, #12
	req_len = *length;
   13800:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   13804:	d928      	bls.n	13858 <log_msg_hexdump_data_op+0x82>
	if (offset < chunk_len) {
   13806:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   13808:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   1380c:	d82b      	bhi.n	13866 <log_msg_hexdump_data_op+0x90>
		head_data = msg->payload.ext.data.bytes;
   1380e:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   13810:	2308      	movs	r3, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   13812:	454b      	cmp	r3, r9
   13814:	bf28      	it	cs
   13816:	464b      	movcs	r3, r9
   13818:	461d      	mov	r5, r3
		if (put_op) {
   1381a:	4420      	add	r0, r4
   1381c:	461a      	mov	r2, r3
   1381e:	b1ff      	cbz	r7, 13860 <log_msg_hexdump_data_op+0x8a>
   13820:	4631      	mov	r1, r6
   13822:	f7ee fdab 	bl	237c <memcpy>
		req_len -= cpy_len;
   13826:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1382a:	442e      	add	r6, r5
	while (req_len > 0) {
   1382c:	f1b9 0f00 	cmp.w	r9, #0
   13830:	d0dd      	beq.n	137ee <log_msg_hexdump_data_op+0x18>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   13832:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   13836:	454d      	cmp	r5, r9
   13838:	bf28      	it	cs
   1383a:	464d      	movcs	r5, r9
		if (put_op) {
   1383c:	1d20      	adds	r0, r4, #4
   1383e:	4440      	add	r0, r8
   13840:	462a      	mov	r2, r5
   13842:	b1bf      	cbz	r7, 13874 <log_msg_hexdump_data_op+0x9e>
   13844:	4631      	mov	r1, r6
   13846:	f7ee fd99 	bl	237c <memcpy>
		req_len -= cpy_len;
   1384a:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   1384e:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   13852:	442e      	add	r6, r5
		offset = 0;
   13854:	2400      	movs	r4, #0
   13856:	e7e9      	b.n	1382c <log_msg_hexdump_data_op+0x56>
		head_data = msg->payload.single.bytes;
   13858:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1385a:	f04f 0800 	mov.w	r8, #0
   1385e:	e7d8      	b.n	13812 <log_msg_hexdump_data_op+0x3c>
   13860:	4601      	mov	r1, r0
   13862:	4630      	mov	r0, r6
   13864:	e7dd      	b.n	13822 <log_msg_hexdump_data_op+0x4c>
		offset -= chunk_len;
   13866:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   13868:	2c1b      	cmp	r4, #27
   1386a:	d9df      	bls.n	1382c <log_msg_hexdump_data_op+0x56>
			cont = cont->next;
   1386c:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   13870:	3c1c      	subs	r4, #28
   13872:	e7f9      	b.n	13868 <log_msg_hexdump_data_op+0x92>
   13874:	4601      	mov	r1, r0
   13876:	4630      	mov	r0, r6
   13878:	e7e5      	b.n	13846 <log_msg_hexdump_data_op+0x70>

0001387a <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1387a:	3004      	adds	r0, #4
   1387c:	f3bf 8f5b 	dmb	ish
   13880:	e850 3f00 	ldrex	r3, [r0]
   13884:	3301      	adds	r3, #1
   13886:	e840 3200 	strex	r2, r3, [r0]
   1388a:	2a00      	cmp	r2, #0
   1388c:	d1f8      	bne.n	13880 <log_msg_get+0x6>
   1388e:	f3bf 8f5b 	dmb	ish
}
   13892:	4770      	bx	lr

00013894 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   13894:	7a40      	ldrb	r0, [r0, #9]
}
   13896:	0900      	lsrs	r0, r0, #4
   13898:	4770      	bx	lr

0001389a <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1389a:	7a43      	ldrb	r3, [r0, #9]
   1389c:	091b      	lsrs	r3, r3, #4
   1389e:	428b      	cmp	r3, r1
   138a0:	d916      	bls.n	138d0 <log_msg_arg_get+0x36>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   138a2:	2b03      	cmp	r3, #3
   138a4:	d803      	bhi.n	138ae <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
   138a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   138aa:	6948      	ldr	r0, [r1, #20]
   138ac:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   138ae:	2901      	cmp	r1, #1
   138b0:	d803      	bhi.n	138ba <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
   138b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   138b6:	6988      	ldr	r0, [r1, #24]
   138b8:	4770      	bx	lr
	cont = msg->payload.ext.next;
   138ba:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   138bc:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   138be:	2906      	cmp	r1, #6
   138c0:	d803      	bhi.n	138ca <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
   138c2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   138c6:	6848      	ldr	r0, [r1, #4]
   138c8:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
   138ca:	3907      	subs	r1, #7
		cont = cont->next;
   138cc:	681b      	ldr	r3, [r3, #0]
   138ce:	e7f6      	b.n	138be <log_msg_arg_get+0x24>
		return 0;
   138d0:	2000      	movs	r0, #0
}
   138d2:	4770      	bx	lr

000138d4 <log_msg_put>:
{
   138d4:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   138d6:	1d02      	adds	r2, r0, #4
   138d8:	f3bf 8f5b 	dmb	ish
   138dc:	e852 1f00 	ldrex	r1, [r2]
   138e0:	3901      	subs	r1, #1
   138e2:	e842 1c00 	strex	ip, r1, [r2]
   138e6:	f1bc 0f00 	cmp.w	ip, #0
   138ea:	d1f7      	bne.n	138dc <log_msg_put+0x8>
   138ec:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   138f0:	685b      	ldr	r3, [r3, #4]
   138f2:	b90b      	cbnz	r3, 138f8 <log_msg_put+0x24>
		msg_free(msg);
   138f4:	f7f3 bc56 	b.w	71a4 <msg_free>
}
   138f8:	4770      	bx	lr

000138fa <log_msg_str_get>:
}
   138fa:	6900      	ldr	r0, [r0, #16]
   138fc:	4770      	bx	lr

000138fe <log_msg_hexdump_create>:
{
   138fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   13902:	f643 75ff 	movw	r5, #16383	; 0x3fff
   13906:	4295      	cmp	r5, r2
{
   13908:	4680      	mov	r8, r0
   1390a:	460e      	mov	r6, r1
   1390c:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   1390e:	bf28      	it	cs
   13910:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   13912:	f7f3 fc35 	bl	7180 <log_msg_chunk_alloc>
	if (msg == NULL) {
   13916:	4604      	mov	r4, r0
   13918:	b378      	cbz	r0, 1397a <log_msg_hexdump_create+0x7c>
	msg->hdr.ref_cnt = 1;
   1391a:	2301      	movs	r3, #1
   1391c:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1391e:	7a03      	ldrb	r3, [r0, #8]
	msg->str = str;
   13920:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   13924:	f043 0301 	orr.w	r3, r3, #1
   13928:	7203      	strb	r3, [r0, #8]
	msg->hdr.params.hexdump.length = length;
   1392a:	8903      	ldrh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1392c:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.length = length;
   1392e:	f365 038f 	bfi	r3, r5, #2, #14
   13932:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   13934:	f100 0814 	add.w	r8, r0, #20
   13938:	d916      	bls.n	13968 <log_msg_hexdump_create+0x6a>
   1393a:	6833      	ldr	r3, [r6, #0]
		msg->hdr.params.generic.ext = 1;
   1393c:	7a02      	ldrb	r2, [r0, #8]
   1393e:	6183      	str	r3, [r0, #24]
   13940:	6873      	ldr	r3, [r6, #4]
   13942:	61c3      	str	r3, [r0, #28]
   13944:	f042 0202 	orr.w	r2, r2, #2
		msg->payload.ext.next = NULL;
   13948:	2300      	movs	r3, #0
   1394a:	6143      	str	r3, [r0, #20]
		msg->hdr.params.generic.ext = 1;
   1394c:	7202      	strb	r2, [r0, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1394e:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   13950:	3d08      	subs	r5, #8
	while (length > 0) {
   13952:	4699      	mov	r9, r3
   13954:	b18d      	cbz	r5, 1397a <log_msg_hexdump_create+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   13956:	f7f3 fc13 	bl	7180 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1395a:	4607      	mov	r7, r0
   1395c:	b980      	cbnz	r0, 13980 <log_msg_hexdump_create+0x82>
			msg_free(msg);
   1395e:	4620      	mov	r0, r4
   13960:	f7f3 fc20 	bl	71a4 <msg_free>
			return NULL;
   13964:	463c      	mov	r4, r7
   13966:	e008      	b.n	1397a <log_msg_hexdump_create+0x7c>
   13968:	462a      	mov	r2, r5
   1396a:	4631      	mov	r1, r6
   1396c:	4640      	mov	r0, r8
   1396e:	f7ee fd05 	bl	237c <memcpy>
		msg->hdr.params.generic.ext = 0;
   13972:	7a23      	ldrb	r3, [r4, #8]
   13974:	f36f 0341 	bfc	r3, #1, #1
   13978:	7223      	strb	r3, [r4, #8]
}
   1397a:	4620      	mov	r0, r4
   1397c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   13980:	2d1c      	cmp	r5, #28
   13982:	462f      	mov	r7, r5
   13984:	bf28      	it	cs
   13986:	271c      	movcs	r7, #28
		*prev_cont = cont;
   13988:	f8c8 0000 	str.w	r0, [r8]
   1398c:	4631      	mov	r1, r6
		cont->next = NULL;
   1398e:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   13992:	4680      	mov	r8, r0
   13994:	463a      	mov	r2, r7
   13996:	3004      	adds	r0, #4
   13998:	f7ee fcf0 	bl	237c <memcpy>
		data += chunk_length;
   1399c:	443e      	add	r6, r7
		length -= chunk_length;
   1399e:	1bed      	subs	r5, r5, r7
   139a0:	e7d8      	b.n	13954 <log_msg_hexdump_create+0x56>

000139a2 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
   139a2:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   139a4:	2400      	movs	r4, #0
   139a6:	9400      	str	r4, [sp, #0]
   139a8:	f7ff ff15 	bl	137d6 <log_msg_hexdump_data_op>
}
   139ac:	b002      	add	sp, #8
   139ae:	bd10      	pop	{r4, pc}

000139b0 <buffer_write>:
{
   139b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   139b2:	4606      	mov	r6, r0
   139b4:	460d      	mov	r5, r1
   139b6:	4614      	mov	r4, r2
   139b8:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   139ba:	4621      	mov	r1, r4
   139bc:	4628      	mov	r0, r5
   139be:	463a      	mov	r2, r7
   139c0:	47b0      	blx	r6
	} while (len != 0);
   139c2:	1a24      	subs	r4, r4, r0
		buf += processed;
   139c4:	4405      	add	r5, r0
	} while (len != 0);
   139c6:	d1f8      	bne.n	139ba <buffer_write+0xa>
}
   139c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000139ca <std_print>:
{
   139ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   139ce:	b08e      	sub	sp, #56	; 0x38
   139d0:	af0e      	add	r7, sp, #56	; 0x38
   139d2:	4681      	mov	r9, r0
   139d4:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   139d6:	f7ff ff90 	bl	138fa <log_msg_str_get>
   139da:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
   139dc:	4648      	mov	r0, r9
   139de:	f7ff ff59 	bl	13894 <log_msg_nargs_get>
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   139e2:	0083      	lsls	r3, r0, #2
   139e4:	3307      	adds	r3, #7
   139e6:	f023 0307 	bic.w	r3, r3, #7
   139ea:	ebad 0d03 	sub.w	sp, sp, r3
	u32_t nargs = log_msg_nargs_get(msg);
   139ee:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   139f0:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   139f2:	f04f 0800 	mov.w	r8, #0
   139f6:	45d0      	cmp	r8, sl
   139f8:	d116      	bne.n	13a28 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   139fa:	4648      	mov	r0, r9
   139fc:	f7ff ff4a 	bl	13894 <log_msg_nargs_get>
   13a00:	280f      	cmp	r0, #15
   13a02:	d81e      	bhi.n	13a42 <std_print+0x78>
   13a04:	e8df f010 	tbh	[pc, r0, lsl #1]
   13a08:	00200019 	.word	0x00200019
   13a0c:	002d0026 	.word	0x002d0026
   13a10:	00410036 	.word	0x00410036
   13a14:	005d004e 	.word	0x005d004e
   13a18:	0081006e 	.word	0x0081006e
   13a1c:	00ad0096 	.word	0x00ad0096
   13a20:	00e100c6 	.word	0x00e100c6
   13a24:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   13a28:	4641      	mov	r1, r8
   13a2a:	4648      	mov	r0, r9
   13a2c:	f7ff ff35 	bl	1389a <log_msg_arg_get>
   13a30:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
	for (i = 0; i < nargs; i++) {
   13a34:	f108 0801 	add.w	r8, r8, #1
   13a38:	e7dd      	b.n	139f6 <std_print+0x2c>
		print_formatted(log_output, str);
   13a3a:	4631      	mov	r1, r6
   13a3c:	4628      	mov	r0, r5
   13a3e:	f7f3 fbed 	bl	721c <print_formatted>
}
   13a42:	46bd      	mov	sp, r7
   13a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   13a48:	6822      	ldr	r2, [r4, #0]
   13a4a:	4631      	mov	r1, r6
   13a4c:	4628      	mov	r0, r5
   13a4e:	f7f3 fbe5 	bl	721c <print_formatted>
		break;
   13a52:	e7f6      	b.n	13a42 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   13a54:	e9d4 2300 	ldrd	r2, r3, [r4]
   13a58:	4631      	mov	r1, r6
   13a5a:	4628      	mov	r0, r5
   13a5c:	f7f3 fbde 	bl	721c <print_formatted>
		break;
   13a60:	e7ef      	b.n	13a42 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   13a62:	68a3      	ldr	r3, [r4, #8]
   13a64:	9300      	str	r3, [sp, #0]
   13a66:	e9d4 2300 	ldrd	r2, r3, [r4]
   13a6a:	4631      	mov	r1, r6
   13a6c:	4628      	mov	r0, r5
   13a6e:	f7f3 fbd5 	bl	721c <print_formatted>
		break;
   13a72:	e7e6      	b.n	13a42 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   13a74:	68e3      	ldr	r3, [r4, #12]
   13a76:	9301      	str	r3, [sp, #4]
   13a78:	68a3      	ldr	r3, [r4, #8]
   13a7a:	9300      	str	r3, [sp, #0]
   13a7c:	e9d4 2300 	ldrd	r2, r3, [r4]
   13a80:	4631      	mov	r1, r6
   13a82:	4628      	mov	r0, r5
   13a84:	f7f3 fbca 	bl	721c <print_formatted>
		break;
   13a88:	e7db      	b.n	13a42 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   13a8a:	6923      	ldr	r3, [r4, #16]
   13a8c:	9302      	str	r3, [sp, #8]
   13a8e:	68e3      	ldr	r3, [r4, #12]
   13a90:	9301      	str	r3, [sp, #4]
   13a92:	68a3      	ldr	r3, [r4, #8]
   13a94:	9300      	str	r3, [sp, #0]
   13a96:	e9d4 2300 	ldrd	r2, r3, [r4]
   13a9a:	4631      	mov	r1, r6
   13a9c:	4628      	mov	r0, r5
   13a9e:	f7f3 fbbd 	bl	721c <print_formatted>
		break;
   13aa2:	e7ce      	b.n	13a42 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   13aa4:	6963      	ldr	r3, [r4, #20]
   13aa6:	9303      	str	r3, [sp, #12]
   13aa8:	6923      	ldr	r3, [r4, #16]
   13aaa:	9302      	str	r3, [sp, #8]
   13aac:	68e3      	ldr	r3, [r4, #12]
   13aae:	9301      	str	r3, [sp, #4]
   13ab0:	68a3      	ldr	r3, [r4, #8]
   13ab2:	9300      	str	r3, [sp, #0]
   13ab4:	e9d4 2300 	ldrd	r2, r3, [r4]
   13ab8:	4631      	mov	r1, r6
   13aba:	4628      	mov	r0, r5
   13abc:	f7f3 fbae 	bl	721c <print_formatted>
		break;
   13ac0:	e7bf      	b.n	13a42 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   13ac2:	69a3      	ldr	r3, [r4, #24]
   13ac4:	9304      	str	r3, [sp, #16]
   13ac6:	6963      	ldr	r3, [r4, #20]
   13ac8:	9303      	str	r3, [sp, #12]
   13aca:	6923      	ldr	r3, [r4, #16]
   13acc:	9302      	str	r3, [sp, #8]
   13ace:	68e3      	ldr	r3, [r4, #12]
   13ad0:	9301      	str	r3, [sp, #4]
   13ad2:	68a3      	ldr	r3, [r4, #8]
   13ad4:	9300      	str	r3, [sp, #0]
   13ad6:	e9d4 2300 	ldrd	r2, r3, [r4]
   13ada:	4631      	mov	r1, r6
   13adc:	4628      	mov	r0, r5
   13ade:	f7f3 fb9d 	bl	721c <print_formatted>
		break;
   13ae2:	e7ae      	b.n	13a42 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   13ae4:	69e3      	ldr	r3, [r4, #28]
   13ae6:	9305      	str	r3, [sp, #20]
   13ae8:	69a3      	ldr	r3, [r4, #24]
   13aea:	9304      	str	r3, [sp, #16]
   13aec:	6963      	ldr	r3, [r4, #20]
   13aee:	9303      	str	r3, [sp, #12]
   13af0:	6923      	ldr	r3, [r4, #16]
   13af2:	9302      	str	r3, [sp, #8]
   13af4:	68e3      	ldr	r3, [r4, #12]
   13af6:	9301      	str	r3, [sp, #4]
   13af8:	68a3      	ldr	r3, [r4, #8]
   13afa:	9300      	str	r3, [sp, #0]
   13afc:	e9d4 2300 	ldrd	r2, r3, [r4]
   13b00:	4631      	mov	r1, r6
   13b02:	4628      	mov	r0, r5
   13b04:	f7f3 fb8a 	bl	721c <print_formatted>
		break;
   13b08:	e79b      	b.n	13a42 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   13b0a:	6a23      	ldr	r3, [r4, #32]
   13b0c:	9306      	str	r3, [sp, #24]
   13b0e:	69e3      	ldr	r3, [r4, #28]
   13b10:	9305      	str	r3, [sp, #20]
   13b12:	69a3      	ldr	r3, [r4, #24]
   13b14:	9304      	str	r3, [sp, #16]
   13b16:	6963      	ldr	r3, [r4, #20]
   13b18:	9303      	str	r3, [sp, #12]
   13b1a:	6923      	ldr	r3, [r4, #16]
   13b1c:	9302      	str	r3, [sp, #8]
   13b1e:	68e3      	ldr	r3, [r4, #12]
   13b20:	9301      	str	r3, [sp, #4]
   13b22:	68a3      	ldr	r3, [r4, #8]
   13b24:	9300      	str	r3, [sp, #0]
   13b26:	e9d4 2300 	ldrd	r2, r3, [r4]
   13b2a:	4631      	mov	r1, r6
   13b2c:	4628      	mov	r0, r5
   13b2e:	f7f3 fb75 	bl	721c <print_formatted>
		break;
   13b32:	e786      	b.n	13a42 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   13b34:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13b36:	9307      	str	r3, [sp, #28]
   13b38:	6a23      	ldr	r3, [r4, #32]
   13b3a:	9306      	str	r3, [sp, #24]
   13b3c:	69e3      	ldr	r3, [r4, #28]
   13b3e:	9305      	str	r3, [sp, #20]
   13b40:	69a3      	ldr	r3, [r4, #24]
   13b42:	9304      	str	r3, [sp, #16]
   13b44:	6963      	ldr	r3, [r4, #20]
   13b46:	9303      	str	r3, [sp, #12]
   13b48:	6923      	ldr	r3, [r4, #16]
   13b4a:	9302      	str	r3, [sp, #8]
   13b4c:	68e3      	ldr	r3, [r4, #12]
   13b4e:	9301      	str	r3, [sp, #4]
   13b50:	68a3      	ldr	r3, [r4, #8]
   13b52:	9300      	str	r3, [sp, #0]
   13b54:	e9d4 2300 	ldrd	r2, r3, [r4]
   13b58:	4631      	mov	r1, r6
   13b5a:	4628      	mov	r0, r5
   13b5c:	f7f3 fb5e 	bl	721c <print_formatted>
		break;
   13b60:	e76f      	b.n	13a42 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   13b62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13b64:	9308      	str	r3, [sp, #32]
   13b66:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13b68:	9307      	str	r3, [sp, #28]
   13b6a:	6a23      	ldr	r3, [r4, #32]
   13b6c:	9306      	str	r3, [sp, #24]
   13b6e:	69e3      	ldr	r3, [r4, #28]
   13b70:	9305      	str	r3, [sp, #20]
   13b72:	69a3      	ldr	r3, [r4, #24]
   13b74:	9304      	str	r3, [sp, #16]
   13b76:	6963      	ldr	r3, [r4, #20]
   13b78:	9303      	str	r3, [sp, #12]
   13b7a:	6923      	ldr	r3, [r4, #16]
   13b7c:	9302      	str	r3, [sp, #8]
   13b7e:	68e3      	ldr	r3, [r4, #12]
   13b80:	9301      	str	r3, [sp, #4]
   13b82:	68a3      	ldr	r3, [r4, #8]
   13b84:	9300      	str	r3, [sp, #0]
   13b86:	e9d4 2300 	ldrd	r2, r3, [r4]
   13b8a:	4631      	mov	r1, r6
   13b8c:	4628      	mov	r0, r5
   13b8e:	f7f3 fb45 	bl	721c <print_formatted>
		break;
   13b92:	e756      	b.n	13a42 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   13b94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13b96:	9309      	str	r3, [sp, #36]	; 0x24
   13b98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13b9a:	9308      	str	r3, [sp, #32]
   13b9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13b9e:	9307      	str	r3, [sp, #28]
   13ba0:	6a23      	ldr	r3, [r4, #32]
   13ba2:	9306      	str	r3, [sp, #24]
   13ba4:	69e3      	ldr	r3, [r4, #28]
   13ba6:	9305      	str	r3, [sp, #20]
   13ba8:	69a3      	ldr	r3, [r4, #24]
   13baa:	9304      	str	r3, [sp, #16]
   13bac:	6963      	ldr	r3, [r4, #20]
   13bae:	9303      	str	r3, [sp, #12]
   13bb0:	6923      	ldr	r3, [r4, #16]
   13bb2:	9302      	str	r3, [sp, #8]
   13bb4:	68e3      	ldr	r3, [r4, #12]
   13bb6:	9301      	str	r3, [sp, #4]
   13bb8:	68a3      	ldr	r3, [r4, #8]
   13bba:	9300      	str	r3, [sp, #0]
   13bbc:	e9d4 2300 	ldrd	r2, r3, [r4]
   13bc0:	4631      	mov	r1, r6
   13bc2:	4628      	mov	r0, r5
   13bc4:	f7f3 fb2a 	bl	721c <print_formatted>
		break;
   13bc8:	e73b      	b.n	13a42 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   13bca:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13bcc:	930a      	str	r3, [sp, #40]	; 0x28
   13bce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13bd0:	9309      	str	r3, [sp, #36]	; 0x24
   13bd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13bd4:	9308      	str	r3, [sp, #32]
   13bd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13bd8:	9307      	str	r3, [sp, #28]
   13bda:	6a23      	ldr	r3, [r4, #32]
   13bdc:	9306      	str	r3, [sp, #24]
   13bde:	69e3      	ldr	r3, [r4, #28]
   13be0:	9305      	str	r3, [sp, #20]
   13be2:	69a3      	ldr	r3, [r4, #24]
   13be4:	9304      	str	r3, [sp, #16]
   13be6:	6963      	ldr	r3, [r4, #20]
   13be8:	9303      	str	r3, [sp, #12]
   13bea:	6923      	ldr	r3, [r4, #16]
   13bec:	9302      	str	r3, [sp, #8]
   13bee:	68e3      	ldr	r3, [r4, #12]
   13bf0:	9301      	str	r3, [sp, #4]
   13bf2:	68a3      	ldr	r3, [r4, #8]
   13bf4:	9300      	str	r3, [sp, #0]
   13bf6:	e9d4 2300 	ldrd	r2, r3, [r4]
   13bfa:	4631      	mov	r1, r6
   13bfc:	4628      	mov	r0, r5
   13bfe:	f7f3 fb0d 	bl	721c <print_formatted>
		break;
   13c02:	e71e      	b.n	13a42 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   13c04:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13c06:	930b      	str	r3, [sp, #44]	; 0x2c
   13c08:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13c0a:	930a      	str	r3, [sp, #40]	; 0x28
   13c0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13c0e:	9309      	str	r3, [sp, #36]	; 0x24
   13c10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13c12:	9308      	str	r3, [sp, #32]
   13c14:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13c16:	9307      	str	r3, [sp, #28]
   13c18:	6a23      	ldr	r3, [r4, #32]
   13c1a:	9306      	str	r3, [sp, #24]
   13c1c:	69e3      	ldr	r3, [r4, #28]
   13c1e:	9305      	str	r3, [sp, #20]
   13c20:	69a3      	ldr	r3, [r4, #24]
   13c22:	9304      	str	r3, [sp, #16]
   13c24:	6963      	ldr	r3, [r4, #20]
   13c26:	9303      	str	r3, [sp, #12]
   13c28:	6923      	ldr	r3, [r4, #16]
   13c2a:	9302      	str	r3, [sp, #8]
   13c2c:	68e3      	ldr	r3, [r4, #12]
   13c2e:	9301      	str	r3, [sp, #4]
   13c30:	68a3      	ldr	r3, [r4, #8]
   13c32:	9300      	str	r3, [sp, #0]
   13c34:	e9d4 2300 	ldrd	r2, r3, [r4]
   13c38:	4631      	mov	r1, r6
   13c3a:	4628      	mov	r0, r5
   13c3c:	f7f3 faee 	bl	721c <print_formatted>
		break;
   13c40:	e6ff      	b.n	13a42 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   13c42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13c44:	930c      	str	r3, [sp, #48]	; 0x30
   13c46:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13c48:	930b      	str	r3, [sp, #44]	; 0x2c
   13c4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13c4c:	930a      	str	r3, [sp, #40]	; 0x28
   13c4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13c50:	9309      	str	r3, [sp, #36]	; 0x24
   13c52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13c54:	9308      	str	r3, [sp, #32]
   13c56:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13c58:	9307      	str	r3, [sp, #28]
   13c5a:	6a23      	ldr	r3, [r4, #32]
   13c5c:	9306      	str	r3, [sp, #24]
   13c5e:	69e3      	ldr	r3, [r4, #28]
   13c60:	9305      	str	r3, [sp, #20]
   13c62:	69a3      	ldr	r3, [r4, #24]
   13c64:	9304      	str	r3, [sp, #16]
   13c66:	6963      	ldr	r3, [r4, #20]
   13c68:	9303      	str	r3, [sp, #12]
   13c6a:	6923      	ldr	r3, [r4, #16]
   13c6c:	9302      	str	r3, [sp, #8]
   13c6e:	68e3      	ldr	r3, [r4, #12]
   13c70:	9301      	str	r3, [sp, #4]
   13c72:	68a3      	ldr	r3, [r4, #8]
   13c74:	9300      	str	r3, [sp, #0]
   13c76:	e9d4 2300 	ldrd	r2, r3, [r4]
   13c7a:	4631      	mov	r1, r6
   13c7c:	4628      	mov	r0, r5
   13c7e:	f7f3 facd 	bl	721c <print_formatted>
}
   13c82:	e6de      	b.n	13a42 <std_print+0x78>

00013c84 <log_output_flush>:
		     log_output->control_block->offset,
   13c84:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
   13c86:	6881      	ldr	r1, [r0, #8]
{
   13c88:	b510      	push	{r4, lr}
   13c8a:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   13c8c:	e9d2 2300 	ldrd	r2, r3, [r2]
   13c90:	6800      	ldr	r0, [r0, #0]
   13c92:	f7ff fe8d 	bl	139b0 <buffer_write>
	log_output->control_block->offset = 0;
   13c96:	6863      	ldr	r3, [r4, #4]
   13c98:	2200      	movs	r2, #0
   13c9a:	601a      	str	r2, [r3, #0]
}
   13c9c:	bd10      	pop	{r4, pc}

00013c9e <out_func>:
{
   13c9e:	b508      	push	{r3, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
   13ca0:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   13ca4:	681b      	ldr	r3, [r3, #0]
   13ca6:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
   13ca8:	684a      	ldr	r2, [r1, #4]
   13caa:	6813      	ldr	r3, [r2, #0]
   13cac:	3301      	adds	r3, #1
   13cae:	6013      	str	r3, [r2, #0]
	if (out_ctx->control_block->offset == out_ctx->size) {
   13cb0:	68ca      	ldr	r2, [r1, #12]
   13cb2:	4293      	cmp	r3, r2
   13cb4:	d102      	bne.n	13cbc <out_func+0x1e>
		log_output_flush(out_ctx);
   13cb6:	4608      	mov	r0, r1
   13cb8:	f7ff ffe4 	bl	13c84 <log_output_flush>
}
   13cbc:	2000      	movs	r0, #0
   13cbe:	bd08      	pop	{r3, pc}

00013cc0 <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   13cc0:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   13cc4:	b923      	cbnz	r3, 13cd0 <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   13cc6:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   13cca:	f000 0001 	and.w	r0, r0, #1
   13cce:	4770      	bx	lr
		return false;
   13cd0:	2000      	movs	r0, #0
}
   13cd2:	4770      	bx	lr

00013cd4 <char_out>:
{
   13cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13cd8:	460f      	mov	r7, r1
   13cda:	4615      	mov	r5, r2
	for (size_t i = 0; i < length; i++) {
   13cdc:	4604      	mov	r4, r0
   13cde:	eb00 0901 	add.w	r9, r0, r1
   13ce2:	454c      	cmp	r4, r9
   13ce4:	d102      	bne.n	13cec <char_out+0x18>
}
   13ce6:	4638      	mov	r0, r7
   13ce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uart_poll_out(dev, data[i]);
   13cec:	f814 1b01 	ldrb.w	r1, [r4], #1
   13cf0:	f7ff ffe6 	bl	13cc0 <z_arch_is_user_context>

K_SYSCALL_DECLARE1(K_SYSCALL_UART_ERR_CHECK, uart_err_check, int, struct device *, dev)

K_SYSCALL_DECLARE2(K_SYSCALL_UART_POLL_IN, uart_poll_in, int, struct device *, dev, unsigned char *, p_char)

K_SYSCALL_DECLARE2_VOID(K_SYSCALL_UART_POLL_OUT, uart_poll_out, struct device *, dev, unsigned char, out_char)
   13cf4:	b118      	cbz	r0, 13cfe <char_out+0x2a>
	register u32_t ret __asm__("r0") = arg1;
   13cf6:	4628      	mov	r0, r5
	register u32_t r6 __asm__("r6") = call_id;
   13cf8:	269d      	movs	r6, #157	; 0x9d
	__asm__ volatile("svc %[svid]\n"
   13cfa:	df03      	svc	3
	return ret;
   13cfc:	e7f1      	b.n	13ce2 <char_out+0xe>
	api->poll_out(dev, out_char);
   13cfe:	686b      	ldr	r3, [r5, #4]
   13d00:	4628      	mov	r0, r5
   13d02:	685b      	ldr	r3, [r3, #4]
   13d04:	4798      	blx	r3
   13d06:	e7ec      	b.n	13ce2 <char_out+0xe>

00013d08 <z_arch_syscall_invoke1>:
{
   13d08:	e92d 4140 	stmdb	sp!, {r6, r8, lr}
	register u32_t r6 __asm__("r6") = call_id;
   13d0c:	460e      	mov	r6, r1
	__asm__ volatile("svc %[svid]\n"
   13d0e:	df03      	svc	3
}
   13d10:	e8bd 8140 	ldmia.w	sp!, {r6, r8, pc}

00013d14 <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   13d14:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   13d18:	b923      	cbnz	r3, 13d24 <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   13d1a:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   13d1e:	f000 0001 	and.w	r0, r0, #1
   13d22:	4770      	bx	lr
		return false;
   13d24:	2000      	movs	r0, #0
}
   13d26:	4770      	bx	lr

00013d28 <uart_irq_tx_disable>:

K_SYSCALL_DECLARE2(K_SYSCALL_UART_CONFIG_GET, uart_config_get, int, struct device *, dev, struct uart_config *, cfg)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_TX_ENABLE, uart_irq_tx_enable, struct device *, dev)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_TX_DISABLE, uart_irq_tx_disable, struct device *, dev)
   13d28:	b510      	push	{r4, lr}
   13d2a:	4602      	mov	r2, r0
   13d2c:	f7ff fff2 	bl	13d14 <z_arch_is_user_context>
   13d30:	b128      	cbz	r0, 13d3e <uart_irq_tx_disable+0x16>
   13d32:	2197      	movs	r1, #151	; 0x97
   13d34:	4610      	mov	r0, r2
   13d36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13d3a:	f7ff bfe5 	b.w	13d08 <z_arch_syscall_invoke1>
	if (api->irq_tx_disable) {
   13d3e:	6853      	ldr	r3, [r2, #4]
   13d40:	6a1b      	ldr	r3, [r3, #32]
   13d42:	b11b      	cbz	r3, 13d4c <uart_irq_tx_disable+0x24>
		api->irq_tx_disable(dev);
   13d44:	4610      	mov	r0, r2
   13d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13d4a:	4718      	bx	r3
   13d4c:	bd10      	pop	{r4, pc}

00013d4e <k_sem_give>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   13d4e:	b508      	push	{r3, lr}
   13d50:	4602      	mov	r2, r0
   13d52:	f7ff ffdf 	bl	13d14 <z_arch_is_user_context>
   13d56:	b128      	cbz	r0, 13d64 <k_sem_give+0x16>
   13d58:	215a      	movs	r1, #90	; 0x5a
   13d5a:	4610      	mov	r0, r2
   13d5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13d60:	f7ff bfd2 	b.w	13d08 <z_arch_syscall_invoke1>
   13d64:	4610      	mov	r0, r2
   13d66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13d6a:	f7fc b9b7 	b.w	100dc <z_impl_k_sem_give>

00013d6e <k_sem_init.constprop.4>:
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   13d6e:	e92d 4150 	stmdb	sp!, {r4, r6, r8, lr}
   13d72:	4604      	mov	r4, r0
   13d74:	f7ff ffce 	bl	13d14 <z_arch_is_user_context>
   13d78:	b130      	cbz	r0, 13d88 <k_sem_init.constprop.4+0x1a>
	register u32_t ret __asm__("r0") = arg1;
   13d7a:	4620      	mov	r0, r4
	register u32_t r2 __asm__("r2") = arg3;
   13d7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	register u32_t r6 __asm__("r6") = call_id;
   13d80:	265b      	movs	r6, #91	; 0x5b
	__asm__ volatile("svc %[svid]\n"
   13d82:	df03      	svc	3
   13d84:	e8bd 8150 	ldmia.w	sp!, {r4, r6, r8, pc}
   13d88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13d8c:	4620      	mov	r0, r4
   13d8e:	e8bd 4150 	ldmia.w	sp!, {r4, r6, r8, lr}
   13d92:	f004 bced 	b.w	18770 <z_impl_k_sem_init>

00013d96 <k_sem_take>:
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   13d96:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
   13d9a:	4602      	mov	r2, r0
   13d9c:	f7ff ffba 	bl	13d14 <z_arch_is_user_context>
   13da0:	b120      	cbz	r0, 13dac <k_sem_take+0x16>
	register u32_t ret __asm__("r0") = arg1;
   13da2:	4610      	mov	r0, r2
	register u32_t r6 __asm__("r6") = call_id;
   13da4:	265d      	movs	r6, #93	; 0x5d
	__asm__ volatile("svc %[svid]\n"
   13da6:	df03      	svc	3
   13da8:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
   13dac:	4610      	mov	r0, r2
   13dae:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
   13db2:	f7fc b9d9 	b.w	10168 <z_impl_k_sem_take>

00013db6 <tty_putchar>:
{
   13db6:	b538      	push	{r3, r4, r5, lr}
   13db8:	4604      	mov	r4, r0
   13dba:	460d      	mov	r5, r1
	res = k_sem_take(&tty->tx_sem, tty->tx_timeout);
   13dbc:	302c      	adds	r0, #44	; 0x2c
   13dbe:	6a41      	ldr	r1, [r0, #36]	; 0x24
   13dc0:	f7ff ffe9 	bl	13d96 <k_sem_take>
	if (res < 0) {
   13dc4:	2800      	cmp	r0, #0
   13dc6:	db18      	blt.n	13dfa <tty_putchar+0x44>
	__asm__ volatile(
   13dc8:	f04f 0320 	mov.w	r3, #32
   13dcc:	f3ef 8211 	mrs	r2, BASEPRI
   13dd0:	f383 8811 	msr	BASEPRI, r3
   13dd4:	f3bf 8f6f 	isb	sy
	tx_next = tty->tx_put + 1;
   13dd8:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
	if (tx_next >= tty->tx_ringbuf_sz) {
   13ddc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	tx_next = tty->tx_put + 1;
   13dde:	1c4b      	adds	r3, r1, #1
		tx_next = 0;
   13de0:	4298      	cmp	r0, r3
   13de2:	bf98      	it	ls
   13de4:	2300      	movls	r3, #0
	if (tx_next == tty->tx_get) {
   13de6:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
   13dea:	4298      	cmp	r0, r3
   13dec:	d106      	bne.n	13dfc <tty_putchar+0x46>
	__asm__ volatile(
   13dee:	f382 8811 	msr	BASEPRI, r2
   13df2:	f3bf 8f6f 	isb	sy
		return -ENOSPC;
   13df6:	f06f 001b 	mvn.w	r0, #27
}
   13dfa:	bd38      	pop	{r3, r4, r5, pc}
	tty->tx_ringbuf[tty->tx_put] = c;
   13dfc:	6c60      	ldr	r0, [r4, #68]	; 0x44
   13dfe:	5445      	strb	r5, [r0, r1]
	tty->tx_put = tx_next;
   13e00:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
   13e04:	f382 8811 	msr	BASEPRI, r2
   13e08:	f3bf 8f6f 	isb	sy
	uart_irq_tx_enable(tty->uart_dev);
   13e0c:	6822      	ldr	r2, [r4, #0]
   13e0e:	f7ff ff81 	bl	13d14 <z_arch_is_user_context>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_TX_ENABLE, uart_irq_tx_enable, struct device *, dev)
   13e12:	b128      	cbz	r0, 13e20 <tty_putchar+0x6a>
   13e14:	2198      	movs	r1, #152	; 0x98
   13e16:	4610      	mov	r0, r2
   13e18:	f7ff ff76 	bl	13d08 <z_arch_syscall_invoke1>
	return 0;
   13e1c:	2000      	movs	r0, #0
   13e1e:	e7ec      	b.n	13dfa <tty_putchar+0x44>
	if (api->irq_tx_enable) {
   13e20:	6853      	ldr	r3, [r2, #4]
   13e22:	69db      	ldr	r3, [r3, #28]
   13e24:	b113      	cbz	r3, 13e2c <tty_putchar+0x76>
		api->irq_tx_enable(dev);
   13e26:	4610      	mov	r0, r2
   13e28:	4798      	blx	r3
   13e2a:	e7f7      	b.n	13e1c <tty_putchar+0x66>
   13e2c:	4618      	mov	r0, r3
   13e2e:	e7e4      	b.n	13dfa <tty_putchar+0x44>

00013e30 <tty_uart_isr>:
{
   13e30:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13e32:	4604      	mov	r4, r0
	struct device *dev = tty->uart_dev;
   13e34:	6805      	ldr	r5, [r0, #0]
   13e36:	f7ff ff6d 	bl	13d14 <z_arch_is_user_context>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_ERR_DISABLE, uart_irq_err_disable, struct device *, dev)

K_SYSCALL_DECLARE1(K_SYSCALL_UART_IRQ_IS_PENDING, uart_irq_is_pending, int, struct device *, dev)

K_SYSCALL_DECLARE1(K_SYSCALL_UART_IRQ_UPDATE, uart_irq_update, int, struct device *, dev)
   13e3a:	b308      	cbz	r0, 13e80 <tty_uart_isr+0x50>
   13e3c:	2199      	movs	r1, #153	; 0x99
   13e3e:	4628      	mov	r0, r5
   13e40:	f7ff ff62 	bl	13d08 <z_arch_syscall_invoke1>
	if (api->irq_rx_ready) {
   13e44:	686b      	ldr	r3, [r5, #4]
   13e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   13e48:	b353      	cbz	r3, 13ea0 <tty_uart_isr+0x70>
		return api->irq_rx_ready(dev);
   13e4a:	4628      	mov	r0, r5
   13e4c:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
   13e4e:	b338      	cbz	r0, 13ea0 <tty_uart_isr+0x70>
	k_sem_give(&tty->rx_sem);
   13e50:	1d26      	adds	r6, r4, #4
	if (api->fifo_read) {
   13e52:	686b      	ldr	r3, [r5, #4]
   13e54:	699b      	ldr	r3, [r3, #24]
   13e56:	b31b      	cbz	r3, 13ea0 <tty_uart_isr+0x70>
		return api->fifo_read(dev, rx_data, size);
   13e58:	2201      	movs	r2, #1
   13e5a:	f10d 0107 	add.w	r1, sp, #7
   13e5e:	4628      	mov	r0, r5
   13e60:	4798      	blx	r3
			if (uart_fifo_read(dev, &c, 1) == 0) {
   13e62:	b1e8      	cbz	r0, 13ea0 <tty_uart_isr+0x70>
	int rx_next = tty->rx_put + 1;
   13e64:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
	if (rx_next >= tty->rx_ringbuf_sz) {
   13e66:	6a21      	ldr	r1, [r4, #32]
	int rx_next = tty->rx_put + 1;
   13e68:	1c53      	adds	r3, r2, #1
		rx_next = 0;
   13e6a:	4299      	cmp	r1, r3
   13e6c:	bf98      	it	ls
   13e6e:	2300      	movls	r3, #0
	if (rx_next == tty->rx_get) {
   13e70:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
   13e72:	4299      	cmp	r1, r3
   13e74:	d10b      	bne.n	13e8e <tty_uart_isr+0x5e>
		tty_putchar(tty, '~');
   13e76:	217e      	movs	r1, #126	; 0x7e
   13e78:	4620      	mov	r0, r4
   13e7a:	f7ff ff9c 	bl	13db6 <tty_putchar>
		return 1;
   13e7e:	e7e8      	b.n	13e52 <tty_uart_isr+0x22>
	if (api->irq_update) {
   13e80:	686b      	ldr	r3, [r5, #4]
   13e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13e84:	2b00      	cmp	r3, #0
   13e86:	d0dd      	beq.n	13e44 <tty_uart_isr+0x14>
		return api->irq_update(dev);
   13e88:	4628      	mov	r0, r5
   13e8a:	4798      	blx	r3
   13e8c:	e7da      	b.n	13e44 <tty_uart_isr+0x14>
	tty->rx_ringbuf[tty->rx_put] = c;
   13e8e:	69e1      	ldr	r1, [r4, #28]
			tty_irq_input_hook(tty, c);
   13e90:	f89d 0007 	ldrb.w	r0, [sp, #7]
	tty->rx_ringbuf[tty->rx_put] = c;
   13e94:	5488      	strb	r0, [r1, r2]
	tty->rx_put = rx_next;
   13e96:	84e3      	strh	r3, [r4, #38]	; 0x26
	k_sem_give(&tty->rx_sem);
   13e98:	4630      	mov	r0, r6
   13e9a:	f7ff ff58 	bl	13d4e <k_sem_give>
	return 1;
   13e9e:	e7d8      	b.n	13e52 <tty_uart_isr+0x22>
	if (api->irq_tx_ready) {
   13ea0:	686b      	ldr	r3, [r5, #4]
   13ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13ea4:	b15b      	cbz	r3, 13ebe <tty_uart_isr+0x8e>
		return api->irq_tx_ready(dev);
   13ea6:	4628      	mov	r0, r5
   13ea8:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
   13eaa:	b140      	cbz	r0, 13ebe <tty_uart_isr+0x8e>
		if (tty->tx_get == tty->tx_put) {
   13eac:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   13eb0:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
   13eb4:	429a      	cmp	r2, r3
   13eb6:	d104      	bne.n	13ec2 <tty_uart_isr+0x92>
			uart_irq_tx_disable(dev);
   13eb8:	4628      	mov	r0, r5
   13eba:	f7ff ff35 	bl	13d28 <uart_irq_tx_disable>
}
   13ebe:	b002      	add	sp, #8
   13ec0:	bd70      	pop	{r4, r5, r6, pc}
			uart_fifo_fill(dev, &tty->tx_ringbuf[tty->tx_get++], 1);
   13ec2:	1c5a      	adds	r2, r3, #1
   13ec4:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
	if (api->fifo_fill) {
   13ec8:	686a      	ldr	r2, [r5, #4]
   13eca:	6c61      	ldr	r1, [r4, #68]	; 0x44
   13ecc:	6956      	ldr	r6, [r2, #20]
   13ece:	b11e      	cbz	r6, 13ed8 <tty_uart_isr+0xa8>
		return api->fifo_fill(dev, tx_data, size);
   13ed0:	2201      	movs	r2, #1
   13ed2:	4419      	add	r1, r3
   13ed4:	4628      	mov	r0, r5
   13ed6:	47b0      	blx	r6
			if (tty->tx_get >= tty->tx_ringbuf_sz) {
   13ed8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   13eda:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   13ede:	429a      	cmp	r2, r3
				tty->tx_get = 0U;
   13ee0:	bf24      	itt	cs
   13ee2:	2300      	movcs	r3, #0
   13ee4:	f8a4 304c 	strhcs.w	r3, [r4, #76]	; 0x4c
			k_sem_give(&tty->tx_sem);
   13ee8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   13eec:	f7ff ff2f 	bl	13d4e <k_sem_give>
}
   13ef0:	e7e5      	b.n	13ebe <tty_uart_isr+0x8e>

00013ef2 <tty_write>:
	if (tty->tx_ringbuf_sz == 0U) {
   13ef2:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
   13ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13ef8:	4682      	mov	sl, r0
   13efa:	460f      	mov	r7, r1
   13efc:	4691      	mov	r9, r2
	if (tty->tx_ringbuf_sz == 0U) {
   13efe:	bb3b      	cbnz	r3, 13f50 <tty_write+0x5e>
   13f00:	188c      	adds	r4, r1, r2
		while (size--) {
   13f02:	42a7      	cmp	r7, r4
   13f04:	d103      	bne.n	13f0e <tty_write+0x1c>
		return out_size;
   13f06:	464d      	mov	r5, r9
}
   13f08:	4628      	mov	r0, r5
   13f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			uart_poll_out(tty->uart_dev, *p++);
   13f0e:	f8da 2000 	ldr.w	r2, [sl]
   13f12:	f817 1b01 	ldrb.w	r1, [r7], #1
   13f16:	f7ff fefd 	bl	13d14 <z_arch_is_user_context>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_UART_POLL_OUT, uart_poll_out, struct device *, dev, unsigned char, out_char)
   13f1a:	b118      	cbz	r0, 13f24 <tty_write+0x32>
	register u32_t ret __asm__("r0") = arg1;
   13f1c:	4610      	mov	r0, r2
	register u32_t r6 __asm__("r6") = call_id;
   13f1e:	269d      	movs	r6, #157	; 0x9d
	__asm__ volatile("svc %[svid]\n"
   13f20:	df03      	svc	3
	return ret;
   13f22:	e7ee      	b.n	13f02 <tty_write+0x10>
	api->poll_out(dev, out_char);
   13f24:	6853      	ldr	r3, [r2, #4]
   13f26:	4610      	mov	r0, r2
   13f28:	685b      	ldr	r3, [r3, #4]
   13f2a:	4798      	blx	r3
   13f2c:	e7e9      	b.n	13f02 <tty_write+0x10>
		res = tty_putchar(tty, *p++);
   13f2e:	5d39      	ldrb	r1, [r7, r4]
   13f30:	4650      	mov	r0, sl
   13f32:	f7ff ff40 	bl	13db6 <tty_putchar>
		if (res < 0) {
   13f36:	1e05      	subs	r5, r0, #0
   13f38:	da05      	bge.n	13f46 <tty_write+0x54>
			if (out_size == 0) {
   13f3a:	b93c      	cbnz	r4, 13f4c <tty_write+0x5a>
				errno = -res;
   13f3c:	f001 f843 	bl	14fc6 <__errno>
   13f40:	426b      	negs	r3, r5
   13f42:	6003      	str	r3, [r0, #0]
				return res;
   13f44:	e7e0      	b.n	13f08 <tty_write+0x16>
		out_size++;
   13f46:	3401      	adds	r4, #1
	while (size--) {
   13f48:	454c      	cmp	r4, r9
   13f4a:	d1f0      	bne.n	13f2e <tty_write+0x3c>
	return out_size;
   13f4c:	4625      	mov	r5, r4
   13f4e:	e7db      	b.n	13f08 <tty_write+0x16>
	size_t out_size = 0;
   13f50:	2400      	movs	r4, #0
   13f52:	e7f9      	b.n	13f48 <tty_write+0x56>

00013f54 <tty_read>:
{
   13f54:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (tty->rx_ringbuf_sz == 0U) {
   13f58:	6a04      	ldr	r4, [r0, #32]
{
   13f5a:	4605      	mov	r5, r0
   13f5c:	460f      	mov	r7, r1
   13f5e:	4691      	mov	r9, r2
	if (tty->rx_ringbuf_sz == 0U) {
   13f60:	2c00      	cmp	r4, #0
   13f62:	d169      	bne.n	14038 <tty_read+0xe4>
	u32_t timeout = tty->rx_timeout;
   13f64:	f8d0 a028 	ldr.w	sl, [r0, #40]	; 0x28
	while (size) {
   13f68:	f1b9 0f00 	cmp.w	r9, #0
   13f6c:	d011      	beq.n	13f92 <tty_read+0x3e>
		res = uart_poll_in(tty->uart_dev, &c);
   13f6e:	682a      	ldr	r2, [r5, #0]
   13f70:	f7ff fed0 	bl	13d14 <z_arch_is_user_context>
K_SYSCALL_DECLARE2(K_SYSCALL_UART_POLL_IN, uart_poll_in, int, struct device *, dev, unsigned char *, p_char)
   13f74:	b188      	cbz	r0, 13f9a <tty_read+0x46>
	register u32_t ret __asm__("r0") = arg1;
   13f76:	4610      	mov	r0, r2
	register u32_t r1 __asm__("r1") = arg2;
   13f78:	f10d 0107 	add.w	r1, sp, #7
	register u32_t r6 __asm__("r6") = call_id;
   13f7c:	269c      	movs	r6, #156	; 0x9c
	__asm__ volatile("svc %[svid]\n"
   13f7e:	df03      	svc	3
		if (res <= -2) {
   13f80:	1c43      	adds	r3, r0, #1
	return api->poll_in(dev, p_char);
   13f82:	4606      	mov	r6, r0
   13f84:	da10      	bge.n	13fa8 <tty_read+0x54>
			if (out_size == 0) {
   13f86:	b924      	cbnz	r4, 13f92 <tty_read+0x3e>
				errno = res;
   13f88:	f001 f81d 	bl	14fc6 <__errno>
				return -1;
   13f8c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
				errno = res;
   13f90:	6006      	str	r6, [r0, #0]
}
   13f92:	4620      	mov	r0, r4
   13f94:	b002      	add	sp, #8
   13f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13f9a:	6853      	ldr	r3, [r2, #4]
   13f9c:	f10d 0107 	add.w	r1, sp, #7
   13fa0:	681b      	ldr	r3, [r3, #0]
   13fa2:	4610      	mov	r0, r2
   13fa4:	4798      	blx	r3
   13fa6:	e7eb      	b.n	13f80 <tty_read+0x2c>
		if (res == 0) {
   13fa8:	b960      	cbnz	r0, 13fc4 <tty_read+0x70>
			*p++ = c;
   13faa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13fae:	f807 3b01 	strb.w	r3, [r7], #1
		if (size == 0 || (timeout != K_FOREVER && timeout-- == 0U)) {
   13fb2:	f1b9 0901 	subs.w	r9, r9, #1
			out_size++;
   13fb6:	f104 0401 	add.w	r4, r4, #1
		if (size == 0 || (timeout != K_FOREVER && timeout-- == 0U)) {
   13fba:	d0ea      	beq.n	13f92 <tty_read+0x3e>
   13fbc:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   13fc0:	d103      	bne.n	13fca <tty_read+0x76>
   13fc2:	e7d1      	b.n	13f68 <tty_read+0x14>
   13fc4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   13fc8:	d005      	beq.n	13fd6 <tty_read+0x82>
   13fca:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   13fce:	f1ba 0f00 	cmp.w	sl, #0
   13fd2:	d0de      	beq.n	13f92 <tty_read+0x3e>
   13fd4:	469a      	mov	sl, r3
		if (res == -1) {
   13fd6:	3601      	adds	r6, #1
   13fd8:	d1c6      	bne.n	13f68 <tty_read+0x14>
   13fda:	f7ff fe9b 	bl	13d14 <z_arch_is_user_context>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
   13fde:	b120      	cbz	r0, 13fea <tty_read+0x96>
   13fe0:	215e      	movs	r1, #94	; 0x5e
   13fe2:	2001      	movs	r0, #1
   13fe4:	f7ff fe90 	bl	13d08 <z_arch_syscall_invoke1>
   13fe8:	e7be      	b.n	13f68 <tty_read+0x14>
   13fea:	2001      	movs	r0, #1
   13fec:	f7fb ffa0 	bl	ff30 <z_impl_k_sleep>
   13ff0:	e7ba      	b.n	13f68 <tty_read+0x14>
	res = k_sem_take(&tty->rx_sem, tty->rx_timeout);
   13ff2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   13ff4:	4640      	mov	r0, r8
   13ff6:	f7ff fece 	bl	13d96 <k_sem_take>
	if (res < 0) {
   13ffa:	1e04      	subs	r4, r0, #0
   13ffc:	db21      	blt.n	14042 <tty_read+0xee>
	__asm__ volatile(
   13ffe:	f04f 0320 	mov.w	r3, #32
   14002:	f3ef 8011 	mrs	r0, BASEPRI
   14006:	f383 8811 	msr	BASEPRI, r3
   1400a:	f3bf 8f6f 	isb	sy
	c = tty->rx_ringbuf[tty->rx_get++];
   1400e:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   14010:	69ea      	ldr	r2, [r5, #28]
   14012:	1c4b      	adds	r3, r1, #1
   14014:	b29b      	uxth	r3, r3
   14016:	84ab      	strh	r3, [r5, #36]	; 0x24
   14018:	5c51      	ldrb	r1, [r2, r1]
	if (tty->rx_get >= tty->rx_ringbuf_sz) {
   1401a:	6a2a      	ldr	r2, [r5, #32]
   1401c:	4293      	cmp	r3, r2
		tty->rx_get = 0U;
   1401e:	bf28      	it	cs
   14020:	f8a5 a024 	strhcs.w	sl, [r5, #36]	; 0x24
	__asm__ volatile(
   14024:	f380 8811 	msr	BASEPRI, r0
   14028:	f3bf 8f6f 	isb	sy
		*p++ = (u8_t)res;
   1402c:	55b9      	strb	r1, [r7, r6]
		out_size++;
   1402e:	3601      	adds	r6, #1
	while (size--) {
   14030:	454e      	cmp	r6, r9
   14032:	d1de      	bne.n	13ff2 <tty_read+0x9e>
	return out_size;
   14034:	4634      	mov	r4, r6
   14036:	e7ac      	b.n	13f92 <tty_read+0x3e>
	size_t out_size = 0;
   14038:	2600      	movs	r6, #0
	res = k_sem_take(&tty->rx_sem, tty->rx_timeout);
   1403a:	f100 0804 	add.w	r8, r0, #4
		tty->rx_get = 0U;
   1403e:	46b2      	mov	sl, r6
   14040:	e7f6      	b.n	14030 <tty_read+0xdc>
			if (out_size == 0) {
   14042:	2e00      	cmp	r6, #0
   14044:	d1f6      	bne.n	14034 <tty_read+0xe0>
				errno = -res;
   14046:	f000 ffbe 	bl	14fc6 <__errno>
   1404a:	4263      	negs	r3, r4
   1404c:	6003      	str	r3, [r0, #0]
				return res;
   1404e:	e7a0      	b.n	13f92 <tty_read+0x3e>

00014050 <tty_set_rx_buf>:

int tty_set_rx_buf(struct tty_serial *tty, void *buf, size_t size)
{
   14050:	b570      	push	{r4, r5, r6, lr}
   14052:	4615      	mov	r5, r2
   14054:	4604      	mov	r4, r0
   14056:	460e      	mov	r6, r1
	uart_irq_rx_disable(tty->uart_dev);
   14058:	6802      	ldr	r2, [r0, #0]
   1405a:	f7ff fe5b 	bl	13d14 <z_arch_is_user_context>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_RX_DISABLE, uart_irq_rx_disable, struct device *, dev)
   1405e:	b1a0      	cbz	r0, 1408a <tty_set_rx_buf+0x3a>
   14060:	2195      	movs	r1, #149	; 0x95
   14062:	4610      	mov	r0, r2
   14064:	f7ff fe50 	bl	13d08 <z_arch_syscall_invoke1>

	tty->rx_ringbuf = buf;
	tty->rx_ringbuf_sz = size;
   14068:	e9c4 6507 	strd	r6, r5, [r4, #28]

	if (size > 0) {
   1406c:	b15d      	cbz	r5, 14086 <tty_set_rx_buf+0x36>
		k_sem_init(&tty->rx_sem, 0, UINT_MAX);
   1406e:	2100      	movs	r1, #0
   14070:	1d20      	adds	r0, r4, #4
   14072:	f7ff fe7c 	bl	13d6e <k_sem_init.constprop.4>
		uart_irq_rx_enable(tty->uart_dev);
   14076:	6822      	ldr	r2, [r4, #0]
   14078:	f7ff fe4c 	bl	13d14 <z_arch_is_user_context>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_RX_ENABLE, uart_irq_rx_enable, struct device *, dev)
   1407c:	b160      	cbz	r0, 14098 <tty_set_rx_buf+0x48>
   1407e:	2196      	movs	r1, #150	; 0x96
   14080:	4610      	mov	r0, r2
   14082:	f7ff fe41 	bl	13d08 <z_arch_syscall_invoke1>
	}

	return 0;
}
   14086:	2000      	movs	r0, #0
   14088:	bd70      	pop	{r4, r5, r6, pc}
	if (api->irq_rx_disable) {
   1408a:	6853      	ldr	r3, [r2, #4]
   1408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1408e:	2b00      	cmp	r3, #0
   14090:	d0ea      	beq.n	14068 <tty_set_rx_buf+0x18>
		api->irq_rx_disable(dev);
   14092:	4610      	mov	r0, r2
   14094:	4798      	blx	r3
   14096:	e7e7      	b.n	14068 <tty_set_rx_buf+0x18>
	if (api->irq_rx_enable) {
   14098:	6853      	ldr	r3, [r2, #4]
   1409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1409c:	2b00      	cmp	r3, #0
   1409e:	d0f2      	beq.n	14086 <tty_set_rx_buf+0x36>
		api->irq_rx_enable(dev);
   140a0:	4610      	mov	r0, r2
   140a2:	4798      	blx	r3
   140a4:	e7ef      	b.n	14086 <tty_set_rx_buf+0x36>

000140a6 <tty_set_tx_buf>:

int tty_set_tx_buf(struct tty_serial *tty, void *buf, size_t size)
{
   140a6:	b570      	push	{r4, r5, r6, lr}
   140a8:	4615      	mov	r5, r2
   140aa:	4604      	mov	r4, r0
   140ac:	460e      	mov	r6, r1
	uart_irq_tx_disable(tty->uart_dev);
   140ae:	6800      	ldr	r0, [r0, #0]
   140b0:	f7ff fe3a 	bl	13d28 <uart_irq_tx_disable>

	tty->tx_ringbuf = buf;
	tty->tx_ringbuf_sz = size;

	k_sem_init(&tty->tx_sem, size - 1, UINT_MAX);
   140b4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	tty->tx_ringbuf_sz = size;
   140b8:	e9c4 6511 	strd	r6, r5, [r4, #68]	; 0x44
	k_sem_init(&tty->tx_sem, size - 1, UINT_MAX);
   140bc:	1e69      	subs	r1, r5, #1
   140be:	f7ff fe56 	bl	13d6e <k_sem_init.constprop.4>
	/* New buffer is initially empty, no need to re-enable interrupts,
	 * it will be done when needed (on first output char).
	 */

	return 0;
}
   140c2:	2000      	movs	r0, #0
   140c4:	bd70      	pop	{r4, r5, r6, pc}

000140c6 <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   140c6:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   140ca:	b923      	cbnz	r3, 140d6 <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   140cc:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   140d0:	f000 0001 	and.w	r0, r0, #1
   140d4:	4770      	bx	lr
		return false;
   140d6:	2000      	movs	r0, #0
}
   140d8:	4770      	bx	lr

000140da <disk_access_init>:
{
   140da:	b510      	push	{r4, lr}
	struct disk_info *disk = disk_access_get_di(pdrv);
   140dc:	f7f3 fb54 	bl	7788 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   140e0:	b130      	cbz	r0, 140f0 <disk_access_init+0x16>
   140e2:	68c3      	ldr	r3, [r0, #12]
   140e4:	b123      	cbz	r3, 140f0 <disk_access_init+0x16>
				(disk->ops->init != NULL)) {
   140e6:	681b      	ldr	r3, [r3, #0]
	if ((disk != NULL) && (disk->ops != NULL) &&
   140e8:	b113      	cbz	r3, 140f0 <disk_access_init+0x16>
}
   140ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rc = disk->ops->init(disk);
   140ee:	4718      	bx	r3
}
   140f0:	f06f 0015 	mvn.w	r0, #21
   140f4:	bd10      	pop	{r4, pc}

000140f6 <disk_access_status>:
{
   140f6:	b510      	push	{r4, lr}
	struct disk_info *disk = disk_access_get_di(pdrv);
   140f8:	f7f3 fb46 	bl	7788 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   140fc:	b130      	cbz	r0, 1410c <disk_access_status+0x16>
   140fe:	68c3      	ldr	r3, [r0, #12]
   14100:	b123      	cbz	r3, 1410c <disk_access_status+0x16>
				(disk->ops->status != NULL)) {
   14102:	685b      	ldr	r3, [r3, #4]
	if ((disk != NULL) && (disk->ops != NULL) &&
   14104:	b113      	cbz	r3, 1410c <disk_access_status+0x16>
}
   14106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rc = disk->ops->status(disk);
   1410a:	4718      	bx	r3
}
   1410c:	f06f 0015 	mvn.w	r0, #21
   14110:	bd10      	pop	{r4, pc}

00014112 <disk_access_read>:
{
   14112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14116:	460d      	mov	r5, r1
   14118:	4616      	mov	r6, r2
   1411a:	461f      	mov	r7, r3
	struct disk_info *disk = disk_access_get_di(pdrv);
   1411c:	f7f3 fb34 	bl	7788 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   14120:	b150      	cbz	r0, 14138 <disk_access_read+0x26>
   14122:	68c4      	ldr	r4, [r0, #12]
   14124:	b144      	cbz	r4, 14138 <disk_access_read+0x26>
				(disk->ops->read != NULL)) {
   14126:	68a4      	ldr	r4, [r4, #8]
	if ((disk != NULL) && (disk->ops != NULL) &&
   14128:	b134      	cbz	r4, 14138 <disk_access_read+0x26>
		rc = disk->ops->read(disk, data_buf, start_sector, num_sector);
   1412a:	463b      	mov	r3, r7
   1412c:	4632      	mov	r2, r6
   1412e:	4629      	mov	r1, r5
   14130:	46a4      	mov	ip, r4
}
   14132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rc = disk->ops->read(disk, data_buf, start_sector, num_sector);
   14136:	4760      	bx	ip
}
   14138:	f06f 0015 	mvn.w	r0, #21
   1413c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014140 <disk_access_write>:
{
   14140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14144:	460d      	mov	r5, r1
   14146:	4616      	mov	r6, r2
   14148:	461f      	mov	r7, r3
	struct disk_info *disk = disk_access_get_di(pdrv);
   1414a:	f7f3 fb1d 	bl	7788 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   1414e:	b150      	cbz	r0, 14166 <disk_access_write+0x26>
   14150:	68c4      	ldr	r4, [r0, #12]
   14152:	b144      	cbz	r4, 14166 <disk_access_write+0x26>
				(disk->ops->write != NULL)) {
   14154:	68e4      	ldr	r4, [r4, #12]
	if ((disk != NULL) && (disk->ops != NULL) &&
   14156:	b134      	cbz	r4, 14166 <disk_access_write+0x26>
		rc = disk->ops->write(disk, data_buf, start_sector, num_sector);
   14158:	463b      	mov	r3, r7
   1415a:	4632      	mov	r2, r6
   1415c:	4629      	mov	r1, r5
   1415e:	46a4      	mov	ip, r4
}
   14160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rc = disk->ops->write(disk, data_buf, start_sector, num_sector);
   14164:	4760      	bx	ip
}
   14166:	f06f 0015 	mvn.w	r0, #21
   1416a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001416e <disk_access_ioctl>:
{
   1416e:	b570      	push	{r4, r5, r6, lr}
   14170:	460c      	mov	r4, r1
   14172:	4615      	mov	r5, r2
	struct disk_info *disk = disk_access_get_di(pdrv);
   14174:	f7f3 fb08 	bl	7788 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   14178:	b140      	cbz	r0, 1418c <disk_access_ioctl+0x1e>
   1417a:	68c3      	ldr	r3, [r0, #12]
   1417c:	b133      	cbz	r3, 1418c <disk_access_ioctl+0x1e>
				(disk->ops->ioctl != NULL)) {
   1417e:	691b      	ldr	r3, [r3, #16]
	if ((disk != NULL) && (disk->ops != NULL) &&
   14180:	b123      	cbz	r3, 1418c <disk_access_ioctl+0x1e>
		rc = disk->ops->ioctl(disk, cmd, buf);
   14182:	462a      	mov	r2, r5
   14184:	4621      	mov	r1, r4
}
   14186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rc = disk->ops->ioctl(disk, cmd, buf);
   1418a:	4718      	bx	r3
}
   1418c:	f06f 0015 	mvn.w	r0, #21
   14190:	bd70      	pop	{r4, r5, r6, pc}

00014192 <disk_ram_access_status>:
}
   14192:	2000      	movs	r0, #0
   14194:	4770      	bx	lr

00014196 <disk_ram_access_ioctl>:
	switch (cmd) {
   14196:	3901      	subs	r1, #1
   14198:	2904      	cmp	r1, #4
   1419a:	d80d      	bhi.n	141b8 <disk_ram_access_ioctl+0x22>
   1419c:	e8df f001 	tbb	[pc, r1]
   141a0:	0a0c0703 	.word	0x0a0c0703
   141a4:	05          	.byte	0x05
   141a5:	00          	.byte	0x00
		*(u32_t *)buff = RAMDISK_VOLUME_SIZE / RAMDISK_SECTOR_SIZE;
   141a6:	2320      	movs	r3, #32
   141a8:	6013      	str	r3, [r2, #0]
	return 0;
   141aa:	2000      	movs	r0, #0
		break;
   141ac:	4770      	bx	lr
		*(u32_t *)buff = RAMDISK_SECTOR_SIZE;
   141ae:	f44f 7300 	mov.w	r3, #512	; 0x200
   141b2:	e7f9      	b.n	141a8 <disk_ram_access_ioctl+0x12>
		*(u32_t *)buff  = 1U;
   141b4:	2301      	movs	r3, #1
   141b6:	e7f7      	b.n	141a8 <disk_ram_access_ioctl+0x12>
		return -EINVAL;
   141b8:	f06f 0015 	mvn.w	r0, #21
}
   141bc:	4770      	bx	lr

000141be <disk_ram_access_init>:
   141be:	2000      	movs	r0, #0
   141c0:	4770      	bx	lr

000141c2 <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   141c2:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   141c6:	b923      	cbnz	r3, 141d2 <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   141c8:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   141cc:	f000 0001 	and.w	r0, r0, #1
   141d0:	4770      	bx	lr
		return false;
   141d2:	2000      	movs	r0, #0
}
   141d4:	4770      	bx	lr

000141d6 <decode_delta>:
	return max_len - offset;
}

static int decode_delta(u8_t *data, u16_t offset, u16_t *pos, u16_t max_len,
			u16_t opt, u16_t *opt_ext, u16_t *hdr_len)
{
   141d6:	b570      	push	{r4, r5, r6, lr}
   141d8:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   141dc:	9d06      	ldr	r5, [sp, #24]
	int ret = 0;

	if (opt == COAP_OPTION_EXT_13) {
   141de:	2c0d      	cmp	r4, #13
   141e0:	d111      	bne.n	14206 <decode_delta+0x30>
		u8_t val;

		*hdr_len = 1U;
   141e2:	2401      	movs	r4, #1
   141e4:	802c      	strh	r4, [r5, #0]
	if (max_len - offset < 1) {
   141e6:	1a5c      	subs	r4, r3, r1
   141e8:	2c00      	cmp	r4, #0
   141ea:	dc02      	bgt.n	141f2 <decode_delta+0x1c>

		ret = read_u8(data, offset, pos, max_len, &val);
		if (ret < 0) {
			return -EINVAL;
   141ec:	f06f 0015 	mvn.w	r0, #21
	}

	*opt_ext = opt;

	return ret;
}
   141f0:	bd70      	pop	{r4, r5, r6, pc}
	*value = data[offset++];
   141f2:	1c4d      	adds	r5, r1, #1
   141f4:	b2ad      	uxth	r5, r5
   141f6:	5c44      	ldrb	r4, [r0, r1]
	*pos = offset;
   141f8:	8015      	strh	r5, [r2, #0]
		if (ret < 0) {
   141fa:	1b58      	subs	r0, r3, r5
   141fc:	d4f6      	bmi.n	141ec <decode_delta+0x16>
		opt = val + COAP_OPTION_EXT_13;
   141fe:	340d      	adds	r4, #13
	*opt_ext = opt;
   14200:	9b05      	ldr	r3, [sp, #20]
   14202:	801c      	strh	r4, [r3, #0]
	return ret;
   14204:	e7f4      	b.n	141f0 <decode_delta+0x1a>
	} else if (opt == COAP_OPTION_EXT_14) {
   14206:	2c0e      	cmp	r4, #14
   14208:	d113      	bne.n	14232 <decode_delta+0x5c>
		*hdr_len = 2U;
   1420a:	2402      	movs	r4, #2
   1420c:	802c      	strh	r4, [r5, #0]
	if (max_len - offset < 2) {
   1420e:	1a5c      	subs	r4, r3, r1
   14210:	2c01      	cmp	r4, #1
   14212:	ddeb      	ble.n	141ec <decode_delta+0x16>
	*value = data[offset++] << 8;
   14214:	5c46      	ldrb	r6, [r0, r1]
	*value |= data[offset++];
   14216:	1c8d      	adds	r5, r1, #2
	*value = data[offset++] << 8;
   14218:	3101      	adds	r1, #1
	*value |= data[offset++];
   1421a:	b289      	uxth	r1, r1
   1421c:	b2ad      	uxth	r5, r5
   1421e:	5c44      	ldrb	r4, [r0, r1]
	*pos = offset;
   14220:	8015      	strh	r5, [r2, #0]
		if (ret < 0) {
   14222:	1b58      	subs	r0, r3, r5
	*value |= data[offset++];
   14224:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
		if (ret < 0) {
   14228:	d4e0      	bmi.n	141ec <decode_delta+0x16>
		opt = val + COAP_OPTION_EXT_269;
   1422a:	f204 140d 	addw	r4, r4, #269	; 0x10d
   1422e:	b2a4      	uxth	r4, r4
   14230:	e7e6      	b.n	14200 <decode_delta+0x2a>
	} else if (opt == COAP_OPTION_EXT_15) {
   14232:	2c0f      	cmp	r4, #15
   14234:	d0da      	beq.n	141ec <decode_delta+0x16>
	int ret = 0;
   14236:	2000      	movs	r0, #0
   14238:	e7e2      	b.n	14200 <decode_delta+0x2a>

0001423a <parse_option>:

static int parse_option(u8_t *data, u16_t offset, u16_t *pos,
			u16_t max_len, u16_t *opt_delta, u16_t *opt_len,
			struct coap_option *option)
{	
   1423a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max_len - offset < 1) {
   1423e:	1a5f      	subs	r7, r3, r1
{	
   14240:	b086      	sub	sp, #24
	if (max_len - offset < 1) {
   14242:	2f00      	cmp	r7, #0
{	
   14244:	4681      	mov	r9, r0
   14246:	4616      	mov	r6, r2
   14248:	461d      	mov	r5, r3
   1424a:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   1424e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
	if (max_len - offset < 1) {
   14252:	dd13      	ble.n	1427c <parse_option+0x42>
	*value = data[offset++];
   14254:	f101 0c01 	add.w	ip, r1, #1
   14258:	fa1f fc8c 	uxth.w	ip, ip
   1425c:	5c47      	ldrb	r7, [r0, r1]
	*pos = offset;
   1425e:	f8a2 c000 	strh.w	ip, [r2]
	u16_t len;
	u8_t opt;
	int r;

	r = read_u8(data, offset, pos, max_len, &opt);
	if (r < 0) {
   14262:	ebb3 010c 	subs.w	r1, r3, ip
   14266:	d442      	bmi.n	142ee <parse_option+0xb4>
		return r;
	}

	*opt_len += 1U;
   14268:	f8b4 c000 	ldrh.w	ip, [r4]

	/* This indicates that options have ended */
	if (opt == COAP_MARKER) {
   1426c:	2fff      	cmp	r7, #255	; 0xff
	*opt_len += 1U;
   1426e:	f10c 0c01 	add.w	ip, ip, #1
   14272:	f8a4 c000 	strh.w	ip, [r4]
	if (opt == COAP_MARKER) {
   14276:	d104      	bne.n	14282 <parse_option+0x48>
		/* packet w/ marker but no payload is malformed */
		return r > 0 ? 0 : -EINVAL;
   14278:	2900      	cmp	r1, #0
   1427a:	d137      	bne.n	142ec <parse_option+0xb2>
		 * CONFIG_COAP_EXTENDED_OPTIONS_LEN_VALUE=<size>
		 */
		if (len > sizeof(option->value)) {
			NET_ERR("%u is > sizeof(coap_option->value)(%zu)!",
				len, sizeof(option->value));
			return -EINVAL;
   1427c:	f06f 0115 	mvn.w	r1, #21
   14280:	e035      	b.n	142ee <parse_option+0xb4>
	return (opt & 0xF0) >> 4;
   14282:	ea4f 1c17 	mov.w	ip, r7, lsr #4
	delta = option_header_get_delta(opt);
   14286:	fa1f fe8c 	uxth.w	lr, ip
	len = option_header_get_len(opt);
   1428a:	f007 070f 	and.w	r7, r7, #15
	delta = option_header_get_delta(opt);
   1428e:	f8ad e014 	strh.w	lr, [sp, #20]
	len = option_header_get_len(opt);
   14292:	f8ad 7016 	strh.w	r7, [sp, #22]
	if (r == 0 && delta > COAP_OPTION_NO_EXT) {
   14296:	bb71      	cbnz	r1, 142f6 <parse_option+0xbc>
   14298:	f1bc 0f0c 	cmp.w	ip, #12
   1429c:	d8ee      	bhi.n	1427c <parse_option+0x42>
	if (len > COAP_OPTION_NO_EXT) {
   1429e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   142a2:	2b0c      	cmp	r3, #12
   142a4:	d913      	bls.n	142ce <parse_option+0x94>
		r = decode_delta(data, *pos, pos, max_len,
   142a6:	f10d 0212 	add.w	r2, sp, #18
   142aa:	9202      	str	r2, [sp, #8]
   142ac:	f10d 0216 	add.w	r2, sp, #22
   142b0:	e9cd 3200 	strd	r3, r2, [sp]
   142b4:	8831      	ldrh	r1, [r6, #0]
   142b6:	462b      	mov	r3, r5
   142b8:	4632      	mov	r2, r6
   142ba:	4648      	mov	r0, r9
   142bc:	f7ff ff8b 	bl	141d6 <decode_delta>
		if (r < 0) {
   142c0:	1e01      	subs	r1, r0, #0
   142c2:	dbdb      	blt.n	1427c <parse_option+0x42>
		*opt_len += hdr_len;
   142c4:	8823      	ldrh	r3, [r4, #0]
   142c6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   142ca:	4413      	add	r3, r2
   142cc:	8023      	strh	r3, [r4, #0]
	*opt_delta += delta;
   142ce:	f8ba 3000 	ldrh.w	r3, [sl]
   142d2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
	*opt_len += len;
   142d6:	f8bd 7016 	ldrh.w	r7, [sp, #22]
	*opt_delta += delta;
   142da:	4413      	add	r3, r2
   142dc:	f8aa 3000 	strh.w	r3, [sl]
	*opt_len += len;
   142e0:	8823      	ldrh	r3, [r4, #0]
   142e2:	443b      	add	r3, r7
   142e4:	8023      	strh	r3, [r4, #0]
	if (r == 0) {
   142e6:	b9f9      	cbnz	r1, 14328 <parse_option+0xee>
		if (len == 0U) {
   142e8:	2f00      	cmp	r7, #0
   142ea:	d1c7      	bne.n	1427c <parse_option+0x42>
			return r;
   142ec:	2100      	movs	r1, #0
		*pos += len;
		r = max_len - *pos;
	}

	return r;
}
   142ee:	4608      	mov	r0, r1
   142f0:	b006      	add	sp, #24
   142f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (delta > COAP_OPTION_NO_EXT) {
   142f6:	f1bc 0f0c 	cmp.w	ip, #12
   142fa:	d9d0      	bls.n	1429e <parse_option+0x64>
		r = decode_delta(data, *pos, pos, max_len,
   142fc:	f10d 0112 	add.w	r1, sp, #18
   14300:	9102      	str	r1, [sp, #8]
   14302:	a905      	add	r1, sp, #20
   14304:	e9cd e100 	strd	lr, r1, [sp]
   14308:	8811      	ldrh	r1, [r2, #0]
   1430a:	f7ff ff64 	bl	141d6 <decode_delta>
		if ((r < 0) || (r == 0 && len > COAP_OPTION_NO_EXT)) {
   1430e:	1e01      	subs	r1, r0, #0
   14310:	dbb4      	blt.n	1427c <parse_option+0x42>
   14312:	d103      	bne.n	1431c <parse_option+0xe2>
   14314:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   14318:	2b0c      	cmp	r3, #12
   1431a:	d8af      	bhi.n	1427c <parse_option+0x42>
		*opt_len += hdr_len;
   1431c:	8823      	ldrh	r3, [r4, #0]
   1431e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   14322:	4413      	add	r3, r2
   14324:	8023      	strh	r3, [r4, #0]
   14326:	e7ba      	b.n	1429e <parse_option+0x64>
	if (option) {
   14328:	f1b8 0f00 	cmp.w	r8, #0
   1432c:	d01b      	beq.n	14366 <parse_option+0x12c>
		if (len > sizeof(option->value)) {
   1432e:	2f0c      	cmp	r7, #12
   14330:	d902      	bls.n	14338 <parse_option+0xfe>
   14332:	f7ff ff46 	bl	141c2 <z_arch_is_user_context>
   14336:	e7a1      	b.n	1427c <parse_option+0x42>
		option->delta = *opt_delta;
   14338:	f8ba 3000 	ldrh.w	r3, [sl]
   1433c:	f8a8 3000 	strh.w	r3, [r8]
		option->len = len;
   14340:	f888 7002 	strb.w	r7, [r8, #2]
		r = read(data, *pos, pos, max_len, len, &option->value[0]);
   14344:	8834      	ldrh	r4, [r6, #0]
	if (max_len - offset < len) {
   14346:	1b2b      	subs	r3, r5, r4
   14348:	42bb      	cmp	r3, r7
		r = read(data, *pos, pos, max_len, len, &option->value[0]);
   1434a:	f108 0003 	add.w	r0, r8, #3
	if (max_len - offset < len) {
   1434e:	db95      	blt.n	1427c <parse_option+0x42>
   14350:	eb09 0104 	add.w	r1, r9, r4
   14354:	463a      	mov	r2, r7
   14356:	f7ee f811 	bl	237c <memcpy>
	offset += len;
   1435a:	1939      	adds	r1, r7, r4
   1435c:	b289      	uxth	r1, r1
	*pos = offset;
   1435e:	8031      	strh	r1, [r6, #0]
		if (r < 0) {
   14360:	1a69      	subs	r1, r5, r1
   14362:	d5c4      	bpl.n	142ee <parse_option+0xb4>
   14364:	e78a      	b.n	1427c <parse_option+0x42>
		*pos += len;
   14366:	8831      	ldrh	r1, [r6, #0]
   14368:	4439      	add	r1, r7
   1436a:	b289      	uxth	r1, r1
   1436c:	8031      	strh	r1, [r6, #0]
		r = max_len - *pos;
   1436e:	1a69      	subs	r1, r5, r1
   14370:	e7bd      	b.n	142ee <parse_option+0xb4>

00014372 <coap_packet_parse>:

int coap_packet_parse(struct coap_packet *cpkt, u8_t *data, u16_t len,
		      struct coap_option *options, u8_t opt_num)
{
   14372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14376:	b086      	sub	sp, #24
   14378:	4688      	mov	r8, r1
   1437a:	4617      	mov	r7, r2
   1437c:	461d      	mov	r5, r3
   1437e:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
	u16_t delta;
	u8_t num;
	u8_t tkl;
	int ret;

	if (!cpkt || !data) {
   14382:	4604      	mov	r4, r0
   14384:	b920      	cbnz	r0, 14390 <coap_packet_parse+0x1e>
		return -EINVAL;
   14386:	f06f 0015 	mvn.w	r0, #21
	cpkt->opt_len = opt_len;
	cpkt->delta = delta;
	cpkt->offset = offset;

	return 0;
}
   1438a:	b006      	add	sp, #24
   1438c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!cpkt || !data) {
   14390:	2900      	cmp	r1, #0
   14392:	d0f8      	beq.n	14386 <coap_packet_parse+0x14>
	if (len < BASIC_HEADER_SIZE) {
   14394:	2a03      	cmp	r2, #3
   14396:	d9f6      	bls.n	14386 <coap_packet_parse+0x14>
	if (options) {
   14398:	b123      	cbz	r3, 143a4 <coap_packet_parse+0x32>
__ssp_bos_icheck3(memset, void *, int)
   1439a:	0132      	lsls	r2, r6, #4
   1439c:	2100      	movs	r1, #0
   1439e:	4618      	mov	r0, r3
   143a0:	f7ee f827 	bl	23f2 <memset>
	cpkt->offset = 0U;
   143a4:	2000      	movs	r0, #0
	cpkt->data = data;
   143a6:	f8c4 8000 	str.w	r8, [r4]
	cpkt->offset = 0U;
   143aa:	80a0      	strh	r0, [r4, #4]
	cpkt->max_len = len;
   143ac:	80e7      	strh	r7, [r4, #6]
	cpkt->opt_len = 0U;
   143ae:	8160      	strh	r0, [r4, #10]
	cpkt->hdr_len = 0U;
   143b0:	7220      	strb	r0, [r4, #8]
	cpkt->delta = 0U;
   143b2:	81a0      	strh	r0, [r4, #12]
	tkl = cpkt->data[0] & 0x0f;
   143b4:	f898 3000 	ldrb.w	r3, [r8]
   143b8:	f003 030f 	and.w	r3, r3, #15
	if (tkl > 8) {
   143bc:	2b08      	cmp	r3, #8
   143be:	d8e2      	bhi.n	14386 <coap_packet_parse+0x14>
	cpkt->hdr_len = BASIC_HEADER_SIZE + tkl;
   143c0:	3304      	adds	r3, #4
   143c2:	7223      	strb	r3, [r4, #8]
	if (cpkt->hdr_len > len) {
   143c4:	b29b      	uxth	r3, r3
   143c6:	42bb      	cmp	r3, r7
   143c8:	d8dd      	bhi.n	14386 <coap_packet_parse+0x14>
	cpkt->offset = cpkt->hdr_len;
   143ca:	80a3      	strh	r3, [r4, #4]
	if (cpkt->hdr_len == len) {
   143cc:	d0dd      	beq.n	1438a <coap_packet_parse+0x18>
	offset = cpkt->offset;
   143ce:	f8ad 3014 	strh.w	r3, [sp, #20]
	opt_len = 0U;
   143d2:	f8ad 0012 	strh.w	r0, [sp, #18]
	delta = 0U;
   143d6:	f8ad 0016 	strh.w	r0, [sp, #22]
	num = 0U;
   143da:	4607      	mov	r7, r0
		ret = parse_option(cpkt->data, offset, &offset, cpkt->max_len,
   143dc:	f10d 0812 	add.w	r8, sp, #18
		option = num < opt_num ? &options[num++] : NULL;
   143e0:	42b7      	cmp	r7, r6
   143e2:	bf34      	ite	cc
   143e4:	eb05 1307 	addcc.w	r3, r5, r7, lsl #4
   143e8:	2300      	movcs	r3, #0
		ret = parse_option(cpkt->data, offset, &offset, cpkt->max_len,
   143ea:	e9cd 8301 	strd	r8, r3, [sp, #4]
   143ee:	f10d 0316 	add.w	r3, sp, #22
		option = num < opt_num ? &options[num++] : NULL;
   143f2:	bf38      	it	cc
   143f4:	1c7a      	addcc	r2, r7, #1
		ret = parse_option(cpkt->data, offset, &offset, cpkt->max_len,
   143f6:	9300      	str	r3, [sp, #0]
		option = num < opt_num ? &options[num++] : NULL;
   143f8:	bf38      	it	cc
   143fa:	b2d7      	uxtbcc	r7, r2
		ret = parse_option(cpkt->data, offset, &offset, cpkt->max_len,
   143fc:	88e3      	ldrh	r3, [r4, #6]
   143fe:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   14402:	6820      	ldr	r0, [r4, #0]
   14404:	aa05      	add	r2, sp, #20
   14406:	f7ff ff18 	bl	1423a <parse_option>
		if (ret < 0) {
   1440a:	2800      	cmp	r0, #0
   1440c:	dbbd      	blt.n	1438a <coap_packet_parse+0x18>
		} else if (ret == 0) {
   1440e:	d1e7      	bne.n	143e0 <coap_packet_parse+0x6e>
	cpkt->opt_len = opt_len;
   14410:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   14414:	8163      	strh	r3, [r4, #10]
	cpkt->delta = delta;
   14416:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1441a:	81a3      	strh	r3, [r4, #12]
	cpkt->offset = offset;
   1441c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   14420:	80a3      	strh	r3, [r4, #4]
	return 0;
   14422:	e7b2      	b.n	1438a <coap_packet_parse+0x18>

00014424 <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   14424:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   14428:	b923      	cbnz	r3, 14434 <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   1442a:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   1442e:	f000 0001 	and.w	r0, r0, #1
   14432:	4770      	bx	lr
		return false;
   14434:	2000      	movs	r0, #0
}
   14436:	4770      	bx	lr

00014438 <k_queue_cancel_wait>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_CANCEL_WAIT, k_queue_cancel_wait, struct k_queue *, queue)
   14438:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
   1443c:	4602      	mov	r2, r0
   1443e:	f7ff fff1 	bl	14424 <z_arch_is_user_context>
   14442:	b120      	cbz	r0, 1444e <k_queue_cancel_wait+0x16>
	register u32_t ret __asm__("r0") = arg1;
   14444:	4610      	mov	r0, r2
	register u32_t r6 __asm__("r6") = call_id;
   14446:	2653      	movs	r6, #83	; 0x53
	__asm__ volatile("svc %[svid]\n"
   14448:	df03      	svc	3
   1444a:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
   1444e:	4610      	mov	r0, r2
   14450:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
   14454:	f003 bfec 	b.w	18430 <z_impl_k_queue_cancel_wait>

00014458 <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
   14458:	b40c      	push	{r2, r3}
   1445a:	b513      	push	{r0, r1, r4, lr}
   1445c:	aa04      	add	r2, sp, #16
   1445e:	460c      	mov	r4, r1
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   14460:	6883      	ldr	r3, [r0, #8]
{
   14462:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, request);
   14466:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   14468:	4620      	mov	r0, r4
   1446a:	4798      	blx	r3
	va_end(args);

	return res;
}
   1446c:	b002      	add	sp, #8
   1446e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14472:	b002      	add	sp, #8
   14474:	4770      	bx	lr

00014476 <k_queue_get>:
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   14476:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
   1447a:	4602      	mov	r2, r0
   1447c:	f7ff ffd2 	bl	14424 <z_arch_is_user_context>
   14480:	b120      	cbz	r0, 1448c <k_queue_get+0x16>
	register u32_t ret __asm__("r0") = arg1;
   14482:	4610      	mov	r0, r2
	register u32_t r6 __asm__("r6") = call_id;
   14484:	2654      	movs	r6, #84	; 0x54
	__asm__ volatile("svc %[svid]\n"
   14486:	df03      	svc	3
   14488:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
   1448c:	4610      	mov	r0, r2
   1448e:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
   14492:	f003 bff6 	b.w	18482 <z_impl_k_queue_get>

00014496 <k_poll>:
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
   14496:	e92d 4150 	stmdb	sp!, {r4, r6, r8, lr}
   1449a:	4604      	mov	r4, r0
   1449c:	f7ff ffc2 	bl	14424 <z_arch_is_user_context>
   144a0:	b120      	cbz	r0, 144ac <k_poll+0x16>
	register u32_t ret __asm__("r0") = arg1;
   144a2:	4620      	mov	r0, r4
	register u32_t r6 __asm__("r6") = call_id;
   144a4:	264c      	movs	r6, #76	; 0x4c
	__asm__ volatile("svc %[svid]\n"
   144a6:	df03      	svc	3
   144a8:	e8bd 8150 	ldmia.w	sp!, {r4, r6, r8, pc}
   144ac:	4620      	mov	r0, r4
   144ae:	e8bd 4150 	ldmia.w	sp!, {r4, r6, r8, lr}
   144b2:	f7fc baf3 	b.w	10a9c <z_impl_k_poll>

000144b6 <sock_getsockopt_vmeth>:
   144b6:	b508      	push	{r3, lr}
   144b8:	f000 fd85 	bl	14fc6 <__errno>
   144bc:	236d      	movs	r3, #109	; 0x6d
   144be:	6003      	str	r3, [r0, #0]
   144c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   144c4:	bd08      	pop	{r3, pc}

000144c6 <k_queue_peek_head>:
K_SYSCALL_DECLARE1(K_SYSCALL_K_QUEUE_PEEK_HEAD, k_queue_peek_head, void *, struct k_queue *, queue)
   144c6:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
   144ca:	4602      	mov	r2, r0
   144cc:	f7ff ffaa 	bl	14424 <z_arch_is_user_context>
   144d0:	4601      	mov	r1, r0
   144d2:	b120      	cbz	r0, 144de <k_queue_peek_head+0x18>
	register u32_t ret __asm__("r0") = arg1;
   144d4:	4610      	mov	r0, r2
	register u32_t r6 __asm__("r6") = call_id;
   144d6:	2657      	movs	r6, #87	; 0x57
	__asm__ volatile("svc %[svid]\n"
   144d8:	df03      	svc	3
   144da:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
	return z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   144de:	6810      	ldr	r0, [r2, #0]
   144e0:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
   144e4:	f003 bf8f 	b.w	18406 <z_queue_node_peek>

000144e8 <k_uptime_get>:
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   144e8:	e92d 4147 	stmdb	sp!, {r0, r1, r2, r6, r8, lr}
   144ec:	f7ff ff9a 	bl	14424 <z_arch_is_user_context>
   144f0:	b138      	cbz	r0, 14502 <k_uptime_get+0x1a>
	(void)z_arch_syscall_invoke1((u32_t)&ret, call_id);
   144f2:	4668      	mov	r0, sp
	register u32_t r6 __asm__("r6") = call_id;
   144f4:	2676      	movs	r6, #118	; 0x76
	__asm__ volatile("svc %[svid]\n"
   144f6:	df03      	svc	3
	return ret;
   144f8:	e9dd 0100 	ldrd	r0, r1, [sp]
   144fc:	b003      	add	sp, #12
   144fe:	e8bd 8140 	ldmia.w	sp!, {r6, r8, pc}
   14502:	f004 fa8f 	bl	18a24 <z_impl_k_uptime_get>
   14506:	e7f9      	b.n	144fc <k_uptime_get+0x14>

00014508 <zsock_received_cb>:
{
   14508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1450c:	4604      	mov	r4, r0
   1450e:	460d      	mov	r5, r1
	return z_arch_is_user_context();
   14510:	f7ff ff88 	bl	14424 <z_arch_is_user_context>
	if (!pkt) {
   14514:	f104 076c 	add.w	r7, r4, #108	; 0x6c
   14518:	b9e9      	cbnz	r1, 14556 <zsock_received_cb+0x4e>
   1451a:	f7ff ff83 	bl	14424 <z_arch_is_user_context>
K_SYSCALL_DECLARE1(K_SYSCALL_K_QUEUE_PEEK_TAIL, k_queue_peek_tail, void *, struct k_queue *, queue)
   1451e:	4601      	mov	r1, r0
   14520:	b170      	cbz	r0, 14540 <zsock_received_cb+0x38>
	register u32_t ret __asm__("r0") = arg1;
   14522:	4638      	mov	r0, r7
	register u32_t r6 __asm__("r6") = call_id;
   14524:	2658      	movs	r6, #88	; 0x58
	__asm__ volatile("svc %[svid]\n"
   14526:	df03      	svc	3
		if (!last_pkt) {
   14528:	b970      	cbnz	r0, 14548 <zsock_received_cb+0x40>
static inline void sock_set_flag(struct net_context *ctx, uintptr_t mask,
				 uintptr_t flag)
{
	uintptr_t val = POINTER_TO_UINT(ctx->socket_data);

	val = (val & ~mask) | flag;
   1452a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1452c:	f043 0301 	orr.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
   14530:	66a3      	str	r3, [r4, #104]	; 0x68
			k_fifo_cancel_wait(&ctx->recv_q);
   14532:	4638      	mov	r0, r7
   14534:	f7ff ff80 	bl	14438 <k_queue_cancel_wait>
}
   14538:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1453c:	f7ff bf72 	b.w	14424 <z_arch_is_user_context>
	return z_queue_node_peek(sys_sflist_peek_tail(&queue->data_q), false);
   14540:	6f20      	ldr	r0, [r4, #112]	; 0x70
   14542:	f003 ff60 	bl	18406 <z_queue_node_peek>
   14546:	e7ef      	b.n	14528 <zsock_received_cb+0x20>
	pkt->sent_or_eof = eof;
   14548:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
   1454c:	f043 0302 	orr.w	r3, r3, #2
   14550:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
   14554:	e7f0      	b.n	14538 <zsock_received_cb+0x30>
   14556:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
   1455a:	f36f 0341 	bfc	r3, #1, #1
   1455e:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   14562:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   14566:	f3c3 1381 	ubfx	r3, r3, #6, #2
	if (net_context_get_type(ctx) == SOCK_STREAM) {
   1456a:	2b01      	cmp	r3, #1
   1456c:	d106      	bne.n	1457c <zsock_received_cb+0x74>
		net_context_update_recv_wnd(ctx, -net_pkt_remaining_data(pkt));
   1456e:	4608      	mov	r0, r1
   14570:	f001 ffc1 	bl	164f6 <net_pkt_remaining_data>
   14574:	4241      	negs	r1, r0
   14576:	4620      	mov	r0, r4
   14578:	f001 f857 	bl	1562a <net_context_update_recv_wnd>
	k_fifo_put(&ctx->recv_q, pkt);
   1457c:	4629      	mov	r1, r5
   1457e:	4638      	mov	r0, r7
}
   14580:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&ctx->recv_q, pkt);
   14584:	f003 bf69 	b.w	1845a <k_queue_append>

00014588 <k_queue_init>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
   14588:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
   1458c:	4602      	mov	r2, r0
   1458e:	f7ff ff49 	bl	14424 <z_arch_is_user_context>
   14592:	b120      	cbz	r0, 1459e <k_queue_init+0x16>
	register u32_t ret __asm__("r0") = arg1;
   14594:	4610      	mov	r0, r2
	register u32_t r6 __asm__("r6") = call_id;
   14596:	2655      	movs	r6, #85	; 0x55
	__asm__ volatile("svc %[svid]\n"
   14598:	df03      	svc	3
   1459a:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
   1459e:	4610      	mov	r0, r2
   145a0:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
   145a4:	f003 bf3b 	b.w	1841e <z_impl_k_queue_init>

000145a8 <z_hdlr_zsock_socket>:
	return zsock_socket_internal(family, type, proto);
   145a8:	f7f3 b99c 	b.w	78e4 <zsock_socket_internal>

000145ac <zsock_close_ctx>:
{
   145ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   145ae:	4605      	mov	r5, r0
	z_object_uninit(ctx);
   145b0:	f004 fb98 	bl	18ce4 <z_object_uninit>
		((context->flags >> NET_CONTEXT_STATE_SHIFT) &
   145b4:	f8b5 307e 	ldrh.w	r3, [r5, #126]	; 0x7e
	if (net_context_get_state(ctx) == NET_CONTEXT_LISTENING) {
   145b8:	f3c3 0341 	ubfx	r3, r3, #1, #2
   145bc:	2b03      	cmp	r3, #3
		(void)net_context_accept(ctx, NULL, K_NO_WAIT, NULL);
   145be:	f04f 0300 	mov.w	r3, #0
   145c2:	461a      	mov	r2, r3
   145c4:	4619      	mov	r1, r3
   145c6:	4628      	mov	r0, r5
	if (net_context_get_state(ctx) == NET_CONTEXT_LISTENING) {
   145c8:	d11c      	bne.n	14604 <zsock_close_ctx+0x58>
		(void)net_context_accept(ctx, NULL, K_NO_WAIT, NULL);
   145ca:	f000 ffb9 	bl	15540 <net_context_accept>
   145ce:	f8b5 607e 	ldrh.w	r6, [r5, #126]	; 0x7e
	while ((p = k_fifo_get(&ctx->recv_q, K_NO_WAIT)) != NULL) {
   145d2:	f105 076c 	add.w	r7, r5, #108	; 0x6c
	return (enum net_context_state)
   145d6:	f3c6 0641 	ubfx	r6, r6, #1, #2
   145da:	2100      	movs	r1, #0
   145dc:	4638      	mov	r0, r7
   145de:	f7ff ff4a 	bl	14476 <k_queue_get>
   145e2:	4604      	mov	r4, r0
   145e4:	b988      	cbnz	r0, 1460a <zsock_close_ctx+0x5e>
	k_fifo_cancel_wait(&ctx->recv_q);
   145e6:	4638      	mov	r0, r7
   145e8:	f7ff ff26 	bl	14438 <k_queue_cancel_wait>
	SET_ERRNO(net_context_put(ctx));
   145ec:	4628      	mov	r0, r5
   145ee:	f7f7 fb2f 	bl	bc50 <net_context_put>
   145f2:	1e05      	subs	r5, r0, #0
   145f4:	da17      	bge.n	14626 <zsock_close_ctx+0x7a>
   145f6:	f000 fce6 	bl	14fc6 <__errno>
   145fa:	426d      	negs	r5, r5
   145fc:	6005      	str	r5, [r0, #0]
   145fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   14602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		(void)net_context_recv(ctx, NULL, K_NO_WAIT, NULL);
   14604:	f7f7 fb44 	bl	bc90 <net_context_recv>
   14608:	e7e1      	b.n	145ce <zsock_close_ctx+0x22>
		if (is_listen) {
   1460a:	2e03      	cmp	r6, #3
   1460c:	d105      	bne.n	1461a <zsock_close_ctx+0x6e>
   1460e:	f7ff ff09 	bl	14424 <z_arch_is_user_context>
			net_context_put(p);
   14612:	4620      	mov	r0, r4
   14614:	f7f7 fb1c 	bl	bc50 <net_context_put>
   14618:	e7df      	b.n	145da <zsock_close_ctx+0x2e>
   1461a:	f7ff ff03 	bl	14424 <z_arch_is_user_context>
			net_pkt_unref(p);
   1461e:	4620      	mov	r0, r4
   14620:	f001 fdf2 	bl	16208 <net_pkt_unref>
   14624:	e7d9      	b.n	145da <zsock_close_ctx+0x2e>
	return 0;
   14626:	4620      	mov	r0, r4
   14628:	e7eb      	b.n	14602 <zsock_close_ctx+0x56>

0001462a <sock_ioctl_vmeth>:
	return zsock_sendto_ctx(obj, buffer, count, 0, NULL, 0);
}

static int sock_ioctl_vmeth(void *obj, unsigned int request, va_list args)
{
	switch (request) {
   1462a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
   1462e:	b510      	push	{r4, lr}
   14630:	4603      	mov	r3, r0
	switch (request) {
   14632:	d03b      	beq.n	146ac <sock_ioctl_vmeth+0x82>
   14634:	d807      	bhi.n	14646 <sock_ioctl_vmeth+0x1c>
   14636:	2903      	cmp	r1, #3
   14638:	d026      	beq.n	14688 <sock_ioctl_vmeth+0x5e>
   1463a:	2904      	cmp	r1, #4
   1463c:	d029      	beq.n	14692 <sock_ioctl_vmeth+0x68>

		return zsock_poll_update_ctx(obj, pfd, pev);
	}

	default:
		errno = EOPNOTSUPP;
   1463e:	f000 fcc2 	bl	14fc6 <__errno>
   14642:	235f      	movs	r3, #95	; 0x5f
   14644:	e042      	b.n	146cc <sock_ioctl_vmeth+0xa2>
	switch (request) {
   14646:	f240 1003 	movw	r0, #259	; 0x103
   1464a:	4281      	cmp	r1, r0
   1464c:	d032      	beq.n	146b4 <sock_ioctl_vmeth+0x8a>
   1464e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
   14652:	d1f4      	bne.n	1463e <sock_ioctl_vmeth+0x14>
		pev = va_arg(args, struct k_poll_event **);
   14654:	e9d2 1000 	ldrd	r1, r0, [r2]
	if (pfd->events & ZSOCK_POLLOUT) {
   14658:	888c      	ldrh	r4, [r1, #4]
   1465a:	0762      	lsls	r2, r4, #29
		pfd->revents |= ZSOCK_POLLOUT;
   1465c:	bf42      	ittt	mi
   1465e:	88ca      	ldrhmi	r2, [r1, #6]
   14660:	f042 0204 	orrmi.w	r2, r2, #4
   14664:	80ca      	strhmi	r2, [r1, #6]
	if (pfd->events & ZSOCK_POLLIN) {
   14666:	07e2      	lsls	r2, r4, #31
   14668:	d511      	bpl.n	1468e <sock_ioctl_vmeth+0x64>
		if ((*pev)->state != K_POLL_STATE_NOT_READY || sock_is_eof(ctx)) {
   1466a:	6802      	ldr	r2, [r0, #0]
   1466c:	68d4      	ldr	r4, [r2, #12]
   1466e:	f414 3ff8 	tst.w	r4, #126976	; 0x1f000
   14672:	d102      	bne.n	1467a <sock_ioctl_vmeth+0x50>
}

static inline uintptr_t sock_get_flag(struct net_context *ctx, uintptr_t mask)
{
	return POINTER_TO_UINT(ctx->socket_data) & mask;
   14674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   14676:	07db      	lsls	r3, r3, #31
   14678:	d503      	bpl.n	14682 <sock_ioctl_vmeth+0x58>
			pfd->revents |= ZSOCK_POLLIN;
   1467a:	88cb      	ldrh	r3, [r1, #6]
   1467c:	f043 0301 	orr.w	r3, r3, #1
   14680:	80cb      	strh	r3, [r1, #6]
		(*pev)++;
   14682:	3214      	adds	r2, #20
   14684:	6002      	str	r2, [r0, #0]
   14686:	e002      	b.n	1468e <sock_ioctl_vmeth+0x64>
   14688:	6e83      	ldr	r3, [r0, #104]	; 0x68
		if (sock_is_nonblock(obj)) {
   1468a:	079c      	lsls	r4, r3, #30
   1468c:	d43f      	bmi.n	1470e <sock_ioctl_vmeth+0xe4>
		return zsock_poll_update_ctx(obj, pfd, pev);
   1468e:	2000      	movs	r0, #0
   14690:	e00b      	b.n	146aa <sock_ioctl_vmeth+0x80>
		if (flags & O_NONBLOCK) {
   14692:	6810      	ldr	r0, [r2, #0]
   14694:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   14696:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
   1469a:	f022 0202 	bic.w	r2, r2, #2
   1469e:	d003      	beq.n	146a8 <sock_ioctl_vmeth+0x7e>
	val = (val & ~mask) | flag;
   146a0:	f042 0202 	orr.w	r2, r2, #2
	(ctx)->socket_data = UINT_TO_POINTER(val);
   146a4:	669a      	str	r2, [r3, #104]	; 0x68
   146a6:	e7f2      	b.n	1468e <sock_ioctl_vmeth+0x64>
   146a8:	669a      	str	r2, [r3, #104]	; 0x68
		return -1;
	}
}
   146aa:	bd10      	pop	{r4, pc}
   146ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return zsock_close_ctx(obj);
   146b0:	f7ff bf7c 	b.w	145ac <zsock_close_ctx>
		return zsock_poll_prepare_ctx(obj, pfd, pev, pev_end);
   146b4:	6811      	ldr	r1, [r2, #0]
	if (pfd->events & ZSOCK_POLLIN) {
   146b6:	8889      	ldrh	r1, [r1, #4]
   146b8:	07c8      	lsls	r0, r1, #31
   146ba:	d521      	bpl.n	14700 <sock_ioctl_vmeth+0xd6>
		pev = va_arg(args, struct k_poll_event **);
   146bc:	6851      	ldr	r1, [r2, #4]
		if (*pev == pev_end) {
   146be:	6892      	ldr	r2, [r2, #8]
   146c0:	6808      	ldr	r0, [r1, #0]
   146c2:	4282      	cmp	r2, r0
   146c4:	d106      	bne.n	146d4 <sock_ioctl_vmeth+0xaa>
			errno = ENOMEM;
   146c6:	f000 fc7e 	bl	14fc6 <__errno>
   146ca:	230c      	movs	r3, #12
		errno = EOPNOTSUPP;
   146cc:	6003      	str	r3, [r0, #0]
		return -1;
   146ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   146d2:	e7ea      	b.n	146aa <sock_ioctl_vmeth+0x80>
		(*pev)->obj = &ctx->recv_q;
   146d4:	f103 026c 	add.w	r2, r3, #108	; 0x6c
   146d8:	6102      	str	r2, [r0, #16]
		(*pev)->type = K_POLL_TYPE_FIFO_DATA_AVAILABLE;
   146da:	680a      	ldr	r2, [r1, #0]
   146dc:	7b50      	ldrb	r0, [r2, #13]
   146de:	2404      	movs	r4, #4
   146e0:	f364 0003 	bfi	r0, r4, #0, #4
   146e4:	7350      	strb	r0, [r2, #13]
		(*pev)->mode = K_POLL_MODE_NOTIFY_ONLY;
   146e6:	680a      	ldr	r2, [r1, #0]
   146e8:	7b90      	ldrb	r0, [r2, #14]
   146ea:	f36f 0041 	bfc	r0, #1, #1
   146ee:	7390      	strb	r0, [r2, #14]
		(*pev)->state = K_POLL_STATE_NOT_READY;
   146f0:	680a      	ldr	r2, [r1, #0]
   146f2:	68d0      	ldr	r0, [r2, #12]
   146f4:	f36f 3010 	bfc	r0, #12, #5
   146f8:	60d0      	str	r0, [r2, #12]
		(*pev)++;
   146fa:	680a      	ldr	r2, [r1, #0]
   146fc:	3214      	adds	r2, #20
   146fe:	600a      	str	r2, [r1, #0]
	return POINTER_TO_UINT(ctx->socket_data) & mask;
   14700:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	if (sock_is_eof(ctx)) {
   14702:	07d9      	lsls	r1, r3, #31
   14704:	d5c3      	bpl.n	1468e <sock_ioctl_vmeth+0x64>
		errno = EALREADY;
   14706:	f000 fc5e 	bl	14fc6 <__errno>
   1470a:	2378      	movs	r3, #120	; 0x78
   1470c:	e7de      	b.n	146cc <sock_ioctl_vmeth+0xa2>
		    return O_NONBLOCK;
   1470e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   14712:	e7ca      	b.n	146aa <sock_ioctl_vmeth+0x80>

00014714 <z_impl_zsock_close>:
{
   14714:	b537      	push	{r0, r1, r2, r4, r5, lr}
	void *ctx = z_get_fd_obj_and_vtable(sock, &vtable);
   14716:	a901      	add	r1, sp, #4
{
   14718:	4605      	mov	r5, r0
	void *ctx = z_get_fd_obj_and_vtable(sock, &vtable);
   1471a:	f7f0 fcb5 	bl	5088 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   1471e:	4604      	mov	r4, r0
   14720:	b160      	cbz	r0, 1473c <z_impl_zsock_close+0x28>
	z_free_fd(sock);
   14722:	4628      	mov	r0, r5
   14724:	f7f0 fd02 	bl	512c <z_free_fd>
   14728:	f7ff fe7c 	bl	14424 <z_arch_is_user_context>
	return z_fdtable_call_ioctl(vtable, ctx, ZFD_IOCTL_CLOSE);
   1472c:	f44f 7280 	mov.w	r2, #256	; 0x100
   14730:	4621      	mov	r1, r4
   14732:	9801      	ldr	r0, [sp, #4]
   14734:	f7ff fe90 	bl	14458 <z_fdtable_call_ioctl>
}
   14738:	b003      	add	sp, #12
   1473a:	bd30      	pop	{r4, r5, pc}
		return -1;
   1473c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14740:	e7fa      	b.n	14738 <z_impl_zsock_close+0x24>

00014742 <z_hdlr_zsock_close>:
	return z_impl_zsock_close(sock);
   14742:	f7ff bfe7 	b.w	14714 <z_impl_zsock_close>

00014746 <z_hdlr_zsock_shutdown>:
{
   14746:	b508      	push	{r3, lr}
   14748:	f7ff fe6c 	bl	14424 <z_arch_is_user_context>
}
   1474c:	2000      	movs	r0, #0
   1474e:	bd08      	pop	{r3, pc}

00014750 <sock_bind_vmeth>:

static int sock_bind_vmeth(void *obj, const struct sockaddr *addr,
			   socklen_t addrlen)
{
	return zsock_bind_ctx(obj, addr, addrlen);
   14750:	f7f3 b908 	b.w	7964 <zsock_bind_ctx>

00014754 <z_impl_zsock_bind>:
{
   14754:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14756:	460c      	mov	r4, r1
	return z_get_fd_obj_and_vtable(sock,
   14758:	a901      	add	r1, sp, #4
{
   1475a:	4615      	mov	r5, r2
	return z_get_fd_obj_and_vtable(sock,
   1475c:	f7f0 fc94 	bl	5088 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(bind, sock, addr, addrlen);
   14760:	b138      	cbz	r0, 14772 <z_impl_zsock_bind+0x1e>
   14762:	9b01      	ldr	r3, [sp, #4]
   14764:	68db      	ldr	r3, [r3, #12]
   14766:	b123      	cbz	r3, 14772 <z_impl_zsock_bind+0x1e>
   14768:	462a      	mov	r2, r5
   1476a:	4621      	mov	r1, r4
   1476c:	4798      	blx	r3
}
   1476e:	b003      	add	sp, #12
   14770:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(bind, sock, addr, addrlen);
   14772:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14776:	e7fa      	b.n	1476e <z_impl_zsock_bind+0x1a>

00014778 <sock_connect_vmeth>:
}

static int sock_connect_vmeth(void *obj, const struct sockaddr *addr,
			      socklen_t addrlen)
{
	return zsock_connect_ctx(obj, addr, addrlen);
   14778:	f7f3 b936 	b.w	79e8 <zsock_connect_ctx>

0001477c <z_impl_zsock_connect>:
{
   1477c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1477e:	460c      	mov	r4, r1
	return z_get_fd_obj_and_vtable(sock,
   14780:	a901      	add	r1, sp, #4
{
   14782:	4615      	mov	r5, r2
	return z_get_fd_obj_and_vtable(sock,
   14784:	f7f0 fc80 	bl	5088 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   14788:	b138      	cbz	r0, 1479a <z_impl_zsock_connect+0x1e>
   1478a:	9b01      	ldr	r3, [sp, #4]
   1478c:	691b      	ldr	r3, [r3, #16]
   1478e:	b123      	cbz	r3, 1479a <z_impl_zsock_connect+0x1e>
   14790:	462a      	mov	r2, r5
   14792:	4621      	mov	r1, r4
   14794:	4798      	blx	r3
}
   14796:	b003      	add	sp, #12
   14798:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   1479a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1479e:	e7fa      	b.n	14796 <z_impl_zsock_connect+0x1a>

000147a0 <sock_listen_vmeth>:
}

static int sock_listen_vmeth(void *obj, int backlog)
{
	return zsock_listen_ctx(obj, backlog);
   147a0:	f7f3 b960 	b.w	7a64 <zsock_listen_ctx>

000147a4 <z_impl_zsock_listen>:
{
   147a4:	b513      	push	{r0, r1, r4, lr}
   147a6:	460c      	mov	r4, r1
	return z_get_fd_obj_and_vtable(sock,
   147a8:	a901      	add	r1, sp, #4
   147aa:	f7f0 fc6d 	bl	5088 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(listen, sock, backlog);
   147ae:	b130      	cbz	r0, 147be <z_impl_zsock_listen+0x1a>
   147b0:	9b01      	ldr	r3, [sp, #4]
   147b2:	695b      	ldr	r3, [r3, #20]
   147b4:	b11b      	cbz	r3, 147be <z_impl_zsock_listen+0x1a>
   147b6:	4621      	mov	r1, r4
   147b8:	4798      	blx	r3
}
   147ba:	b002      	add	sp, #8
   147bc:	bd10      	pop	{r4, pc}
	VTABLE_CALL(listen, sock, backlog);
   147be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   147c2:	e7fa      	b.n	147ba <z_impl_zsock_listen+0x16>

000147c4 <z_hdlr_zsock_listen>:
	return z_impl_zsock_listen(sock, backlog);
   147c4:	f7ff bfee 	b.w	147a4 <z_impl_zsock_listen>

000147c8 <sock_accept_vmeth>:
}

static int sock_accept_vmeth(void *obj, struct sockaddr *addr,
			     socklen_t *addrlen)
{
	return zsock_accept_ctx(obj, addr, addrlen);
   147c8:	f7f3 b966 	b.w	7a98 <zsock_accept_ctx>

000147cc <z_impl_zsock_accept>:
{
   147cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   147ce:	460c      	mov	r4, r1
	return z_get_fd_obj_and_vtable(sock,
   147d0:	a901      	add	r1, sp, #4
{
   147d2:	4615      	mov	r5, r2
	return z_get_fd_obj_and_vtable(sock,
   147d4:	f7f0 fc58 	bl	5088 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(accept, sock, addr, addrlen);
   147d8:	b138      	cbz	r0, 147ea <z_impl_zsock_accept+0x1e>
   147da:	9b01      	ldr	r3, [sp, #4]
   147dc:	699b      	ldr	r3, [r3, #24]
   147de:	b123      	cbz	r3, 147ea <z_impl_zsock_accept+0x1e>
   147e0:	462a      	mov	r2, r5
   147e2:	4621      	mov	r1, r4
   147e4:	4798      	blx	r3
}
   147e6:	b003      	add	sp, #12
   147e8:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(accept, sock, addr, addrlen);
   147ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   147ee:	e7fa      	b.n	147e6 <z_impl_zsock_accept+0x1a>

000147f0 <sock_sendto_vmeth>:

static ssize_t sock_sendto_vmeth(void *obj, const void *buf, size_t len,
				 int flags, const struct sockaddr *dest_addr,
				 socklen_t addrlen)
{
	return zsock_sendto_ctx(obj, buf, len, flags, dest_addr, addrlen);
   147f0:	f7f3 b9d4 	b.w	7b9c <zsock_sendto_ctx>

000147f4 <sock_write_vmeth>:
{
   147f4:	b507      	push	{r0, r1, r2, lr}
	return zsock_sendto_ctx(obj, buffer, count, 0, NULL, 0);
   147f6:	2300      	movs	r3, #0
   147f8:	e9cd 3300 	strd	r3, r3, [sp]
   147fc:	f7f3 f9ce 	bl	7b9c <zsock_sendto_ctx>
}
   14800:	b003      	add	sp, #12
   14802:	f85d fb04 	ldr.w	pc, [sp], #4

00014806 <z_impl_zsock_sendto>:
{
   14806:	b5f0      	push	{r4, r5, r6, r7, lr}
   14808:	b085      	sub	sp, #20
   1480a:	460d      	mov	r5, r1
	return z_get_fd_obj_and_vtable(sock,
   1480c:	a903      	add	r1, sp, #12
{
   1480e:	4616      	mov	r6, r2
   14810:	461f      	mov	r7, r3
	return z_get_fd_obj_and_vtable(sock,
   14812:	f7f0 fc39 	bl	5088 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   14816:	b160      	cbz	r0, 14832 <z_impl_zsock_sendto+0x2c>
   14818:	9b03      	ldr	r3, [sp, #12]
   1481a:	69dc      	ldr	r4, [r3, #28]
   1481c:	b14c      	cbz	r4, 14832 <z_impl_zsock_sendto+0x2c>
   1481e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14820:	9301      	str	r3, [sp, #4]
   14822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14824:	9300      	str	r3, [sp, #0]
   14826:	4632      	mov	r2, r6
   14828:	463b      	mov	r3, r7
   1482a:	4629      	mov	r1, r5
   1482c:	47a0      	blx	r4
}
   1482e:	b005      	add	sp, #20
   14830:	bdf0      	pop	{r4, r5, r6, r7, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   14832:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14836:	e7fa      	b.n	1482e <z_impl_zsock_sendto+0x28>

00014838 <zsock_recvfrom_ctx>:
{
   14838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1483c:	b08f      	sub	sp, #60	; 0x3c
   1483e:	4605      	mov	r5, r0
   14840:	9101      	str	r1, [sp, #4]
   14842:	4698      	mov	r8, r3
   14844:	e9dd 4718 	ldrd	r4, r7, [sp, #96]	; 0x60
	if (max_len == 0) {
   14848:	9200      	str	r2, [sp, #0]
   1484a:	b922      	cbnz	r2, 14856 <zsock_recvfrom_ctx+0x1e>
		return 0;
   1484c:	2400      	movs	r4, #0
}
   1484e:	4620      	mov	r0, r4
   14850:	b00f      	add	sp, #60	; 0x3c
   14852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	enum net_sock_type sock_type = net_context_get_type(ctx);
   14856:	f8b0 307e 	ldrh.w	r3, [r0, #126]	; 0x7e
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   1485a:	f3c3 1281 	ubfx	r2, r3, #6, #2
	if (sock_type == SOCK_DGRAM) {
   1485e:	2a02      	cmp	r2, #2
   14860:	f040 80d2 	bne.w	14a08 <zsock_recvfrom_ctx+0x1d0>
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   14864:	f018 0f40 	tst.w	r8, #64	; 0x40
   14868:	bf03      	ittte	eq
   1486a:	6e86      	ldreq	r6, [r0, #104]	; 0x68
   1486c:	f086 0602 	eoreq.w	r6, r6, #2
   14870:	f346 0640 	sbfxeq	r6, r6, #1, #1
		timeout = K_NO_WAIT;
   14874:	2600      	movne	r6, #0
	if (flags & ZSOCK_MSG_PEEK) {
   14876:	f018 0302 	ands.w	r3, r8, #2
   1487a:	f100 096c 	add.w	r9, r0, #108	; 0x6c
   1487e:	9302      	str	r3, [sp, #8]
   14880:	d029      	beq.n	148d6 <zsock_recvfrom_ctx+0x9e>
	struct k_poll_event events[] = {
   14882:	2210      	movs	r2, #16
   14884:	2100      	movs	r1, #0
   14886:	a809      	add	r0, sp, #36	; 0x24
   14888:	f7ed fdb3 	bl	23f2 <memset>
	return k_poll(events, ARRAY_SIZE(events), timeout);
   1488c:	4632      	mov	r2, r6
	struct k_poll_event events[] = {
   1488e:	2304      	movs	r3, #4
	return k_poll(events, ARRAY_SIZE(events), timeout);
   14890:	2101      	movs	r1, #1
   14892:	a809      	add	r0, sp, #36	; 0x24
	struct k_poll_event events[] = {
   14894:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   14898:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
	return k_poll(events, ARRAY_SIZE(events), timeout);
   1489c:	f7ff fdfb 	bl	14496 <k_poll>
		if (res && res != -EAGAIN && res != -EINTR) {
   148a0:	f100 020b 	add.w	r2, r0, #11
   148a4:	2a0b      	cmp	r2, #11
	return k_poll(events, ARRAY_SIZE(events), timeout);
   148a6:	4606      	mov	r6, r0
		if (res && res != -EAGAIN && res != -EINTR) {
   148a8:	d804      	bhi.n	148b4 <zsock_recvfrom_ctx+0x7c>
   148aa:	f640 0381 	movw	r3, #2177	; 0x881
   148ae:	40d3      	lsrs	r3, r2
   148b0:	07db      	lsls	r3, r3, #31
   148b2:	d406      	bmi.n	148c2 <zsock_recvfrom_ctx+0x8a>
			errno = -res;
   148b4:	f000 fb87 	bl	14fc6 <__errno>
   148b8:	4276      	negs	r6, r6
   148ba:	6006      	str	r6, [r0, #0]
		return -1;
   148bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   148c0:	e7c5      	b.n	1484e <zsock_recvfrom_ctx+0x16>
		pkt = k_fifo_peek_head(&ctx->recv_q);
   148c2:	4648      	mov	r0, r9
   148c4:	f7ff fdff 	bl	144c6 <k_queue_peek_head>
		pkt = k_fifo_get(&ctx->recv_q, timeout);
   148c8:	4606      	mov	r6, r0
	if (!pkt) {
   148ca:	b948      	cbnz	r0, 148e0 <zsock_recvfrom_ctx+0xa8>
		errno = EAGAIN;
   148cc:	f000 fb7b 	bl	14fc6 <__errno>
   148d0:	230b      	movs	r3, #11
   148d2:	6003      	str	r3, [r0, #0]
   148d4:	e7f2      	b.n	148bc <zsock_recvfrom_ctx+0x84>
		pkt = k_fifo_get(&ctx->recv_q, timeout);
   148d6:	4631      	mov	r1, r6
   148d8:	4648      	mov	r0, r9
   148da:	f7ff fdcc 	bl	14476 <k_queue_get>
   148de:	e7f3      	b.n	148c8 <zsock_recvfrom_ctx+0x90>
	backup->pos = pkt->cursor.pos;
   148e0:	e9d0 9806 	ldrd	r9, r8, [r0, #24]
	if (src_addr && addrlen) {
   148e4:	2c00      	cmp	r4, #0
   148e6:	d06c      	beq.n	149c2 <zsock_recvfrom_ctx+0x18a>
   148e8:	2f00      	cmp	r7, #0
   148ea:	d06a      	beq.n	149c2 <zsock_recvfrom_ctx+0x18a>
		rv = sock_get_pkt_src_addr(pkt, net_context_get_ip_proto(ctx),
   148ec:	f8b5 b07c 	ldrh.w	fp, [r5, #124]	; 0x7c
   148f0:	683d      	ldr	r5, [r7, #0]
	net_pkt_cursor_init(pkt);
   148f2:	f001 fcff 	bl	162f4 <net_pkt_cursor_init>
	return pkt->family;
   148f6:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
   148fa:	f3c3 0342 	ubfx	r3, r3, #1, #3
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   148fe:	2b02      	cmp	r3, #2
	addr->sa_family = net_pkt_family(pkt);
   14900:	8023      	strh	r3, [r4, #0]
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   14902:	d00a      	beq.n	1491a <zsock_recvfrom_ctx+0xe2>
		ret = -ENOTSUP;
   14904:	f06f 0585 	mvn.w	r5, #133	; 0x85
	pkt->cursor.pos = backup->pos;
   14908:	e9c6 9806 	strd	r9, r8, [r6, #24]
		if (rv < 0) {
   1490c:	2d00      	cmp	r5, #0
   1490e:	d053      	beq.n	149b8 <zsock_recvfrom_ctx+0x180>
			errno = -rv;
   14910:	f000 fb59 	bl	14fc6 <__errno>
   14914:	426d      	negs	r5, r5
   14916:	6005      	str	r5, [r0, #0]
			return -1;
   14918:	e7d0      	b.n	148bc <zsock_recvfrom_ctx+0x84>
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access,
   1491a:	f04f 0c00 	mov.w	ip, #0
   1491e:	2328      	movs	r3, #40	; 0x28
		if (addrlen < sizeof(struct sockaddr_in6)) {
   14920:	2d17      	cmp	r5, #23
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access,
   14922:	e9cd c307 	strd	ip, r3, [sp, #28]
		if (addrlen < sizeof(struct sockaddr_in6)) {
   14926:	d944      	bls.n	149b2 <zsock_recvfrom_ctx+0x17a>
		ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(
   14928:	a907      	add	r1, sp, #28
   1492a:	4630      	mov	r0, r6
   1492c:	f001 fe4f 	bl	165ce <net_pkt_get_data>
		if (!ipv6_hdr ||
   14930:	4682      	mov	sl, r0
   14932:	b910      	cbnz	r0, 1493a <zsock_recvfrom_ctx+0x102>
			ret = -ENOBUFS;
   14934:	f06f 0568 	mvn.w	r5, #104	; 0x68
   14938:	e7e6      	b.n	14908 <zsock_recvfrom_ctx+0xd0>
	return net_pkt_skip(pkt, access->size);
   1493a:	9908      	ldr	r1, [sp, #32]
   1493c:	4630      	mov	r0, r6
   1493e:	f001 fd55 	bl	163ec <net_pkt_skip>
		if (!ipv6_hdr ||
   14942:	2800      	cmp	r0, #0
   14944:	d1f6      	bne.n	14934 <zsock_recvfrom_ctx+0xfc>
		    net_pkt_skip(pkt, net_pkt_ipv6_ext_len(pkt))) {
   14946:	f8b6 1042 	ldrh.w	r1, [r6, #66]	; 0x42
   1494a:	4630      	mov	r0, r6
   1494c:	f001 fd4e 	bl	163ec <net_pkt_skip>
		    net_pkt_acknowledge_data(pkt, &ipv6_access) ||
   14950:	4605      	mov	r5, r0
   14952:	2800      	cmp	r0, #0
   14954:	d1ee      	bne.n	14934 <zsock_recvfrom_ctx+0xfc>
		net_ipaddr_copy(&addr6->sin6_addr, &ipv6_hdr->src);
   14956:	f10a 0308 	add.w	r3, sl, #8
   1495a:	aa09      	add	r2, sp, #36	; 0x24
   1495c:	f10a 0a18 	add.w	sl, sl, #24
   14960:	6818      	ldr	r0, [r3, #0]
   14962:	6859      	ldr	r1, [r3, #4]
   14964:	4694      	mov	ip, r2
   14966:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1496a:	3308      	adds	r3, #8
   1496c:	4553      	cmp	r3, sl
   1496e:	4662      	mov	r2, ip
   14970:	d1f6      	bne.n	14960 <zsock_recvfrom_ctx+0x128>
   14972:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
   14976:	1d22      	adds	r2, r4, #4
   14978:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
   1497c:	4663      	mov	r3, ip
   1497e:	cb03      	ldmia	r3!, {r0, r1}
   14980:	4573      	cmp	r3, lr
   14982:	6010      	str	r0, [r2, #0]
   14984:	6051      	str	r1, [r2, #4]
   14986:	469c      	mov	ip, r3
   14988:	f102 0208 	add.w	r2, r2, #8
   1498c:	d1f6      	bne.n	1497c <zsock_recvfrom_ctx+0x144>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   1498e:	fa5f fb8b 	uxtb.w	fp, fp
   14992:	f1bb 0f11 	cmp.w	fp, #17
   14996:	d1b5      	bne.n	14904 <zsock_recvfrom_ctx+0xcc>
		NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   14998:	ab05      	add	r3, sp, #20
   1499a:	9307      	str	r3, [sp, #28]
		udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt,
   1499c:	a907      	add	r1, sp, #28
		NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   1499e:	2308      	movs	r3, #8
		udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt,
   149a0:	4630      	mov	r0, r6
		NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   149a2:	9308      	str	r3, [sp, #32]
		udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt,
   149a4:	f001 fe13 	bl	165ce <net_pkt_get_data>
		if (!udp_hdr) {
   149a8:	2800      	cmp	r0, #0
   149aa:	d0c3      	beq.n	14934 <zsock_recvfrom_ctx+0xfc>
		*port = udp_hdr->src_port;
   149ac:	8803      	ldrh	r3, [r0, #0]
   149ae:	8063      	strh	r3, [r4, #2]
   149b0:	e7aa      	b.n	14908 <zsock_recvfrom_ctx+0xd0>
			ret = -EINVAL;
   149b2:	f06f 0515 	mvn.w	r5, #21
   149b6:	e7a7      	b.n	14908 <zsock_recvfrom_ctx+0xd0>
		if (src_addr->sa_family == AF_INET) {
   149b8:	8823      	ldrh	r3, [r4, #0]
   149ba:	2b01      	cmp	r3, #1
   149bc:	d113      	bne.n	149e6 <zsock_recvfrom_ctx+0x1ae>
			*addrlen = sizeof(struct sockaddr_in);
   149be:	2308      	movs	r3, #8
			*addrlen = sizeof(struct sockaddr_in6);
   149c0:	603b      	str	r3, [r7, #0]
	recv_len = net_pkt_remaining_data(pkt);
   149c2:	4630      	mov	r0, r6
   149c4:	f001 fd97 	bl	164f6 <net_pkt_remaining_data>
	if (recv_len > max_len) {
   149c8:	9b00      	ldr	r3, [sp, #0]
	if (net_pkt_read(pkt, buf, recv_len)) {
   149ca:	9901      	ldr	r1, [sp, #4]
   149cc:	4283      	cmp	r3, r0
   149ce:	bf28      	it	cs
   149d0:	4603      	movcs	r3, r0
   149d2:	461a      	mov	r2, r3
   149d4:	4630      	mov	r0, r6
   149d6:	461c      	mov	r4, r3
   149d8:	f001 fd24 	bl	16424 <net_pkt_read>
   149dc:	b158      	cbz	r0, 149f6 <zsock_recvfrom_ctx+0x1be>
			errno = ENOBUFS;
   149de:	f000 faf2 	bl	14fc6 <__errno>
   149e2:	2369      	movs	r3, #105	; 0x69
   149e4:	e775      	b.n	148d2 <zsock_recvfrom_ctx+0x9a>
		} else if (src_addr->sa_family == AF_INET6) {
   149e6:	2b02      	cmp	r3, #2
   149e8:	d101      	bne.n	149ee <zsock_recvfrom_ctx+0x1b6>
			*addrlen = sizeof(struct sockaddr_in6);
   149ea:	2318      	movs	r3, #24
   149ec:	e7e8      	b.n	149c0 <zsock_recvfrom_ctx+0x188>
			errno = ENOTSUP;
   149ee:	f000 faea 	bl	14fc6 <__errno>
   149f2:	2386      	movs	r3, #134	; 0x86
   149f4:	e76d      	b.n	148d2 <zsock_recvfrom_ctx+0x9a>
	if (!(flags & ZSOCK_MSG_PEEK)) {
   149f6:	9b02      	ldr	r3, [sp, #8]
   149f8:	b91b      	cbnz	r3, 14a02 <zsock_recvfrom_ctx+0x1ca>
		net_pkt_unref(pkt);
   149fa:	4630      	mov	r0, r6
   149fc:	f001 fc04 	bl	16208 <net_pkt_unref>
   14a00:	e725      	b.n	1484e <zsock_recvfrom_ctx+0x16>
	pkt->cursor.pos = backup->pos;
   14a02:	e9c6 9806 	strd	r9, r8, [r6, #24]
	return recv_len;
   14a06:	e722      	b.n	1484e <zsock_recvfrom_ctx+0x16>
	} else if (sock_type == SOCK_STREAM) {
   14a08:	2a01      	cmp	r2, #1
   14a0a:	f47f af1f 	bne.w	1484c <zsock_recvfrom_ctx+0x14>
	if (!net_context_is_used(ctx)) {
   14a0e:	07d8      	lsls	r0, r3, #31
   14a10:	d403      	bmi.n	14a1a <zsock_recvfrom_ctx+0x1e2>
		errno = EBADF;
   14a12:	f000 fad8 	bl	14fc6 <__errno>
   14a16:	2309      	movs	r3, #9
   14a18:	e75b      	b.n	148d2 <zsock_recvfrom_ctx+0x9a>
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   14a1a:	6eaf      	ldr	r7, [r5, #104]	; 0x68
   14a1c:	f018 0f40 	tst.w	r8, #64	; 0x40
   14a20:	bf06      	itte	eq
   14a22:	f087 0702 	eoreq.w	r7, r7, #2
   14a26:	f347 0740 	sbfxeq	r7, r7, #1, #1
		timeout = K_NO_WAIT;
   14a2a:	2700      	movne	r7, #0
		res = k_fifo_wait_non_empty(&ctx->recv_q, timeout);
   14a2c:	f105 096c 	add.w	r9, r5, #108	; 0x6c
   14a30:	6ea9      	ldr	r1, [r5, #104]	; 0x68
		if (sock_is_eof(ctx)) {
   14a32:	f011 0101 	ands.w	r1, r1, #1
   14a36:	f47f af09 	bne.w	1484c <zsock_recvfrom_ctx+0x14>
	struct k_poll_event events[] = {
   14a3a:	2210      	movs	r2, #16
   14a3c:	a809      	add	r0, sp, #36	; 0x24
   14a3e:	f7ed fcd8 	bl	23f2 <memset>
   14a42:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   14a46:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   14a4a:	2204      	movs	r2, #4
   14a4c:	f362 0303 	bfi	r3, r2, #0, #4
	return k_poll(events, ARRAY_SIZE(events), timeout);
   14a50:	2101      	movs	r1, #1
   14a52:	463a      	mov	r2, r7
   14a54:	a809      	add	r0, sp, #36	; 0x24
	struct k_poll_event events[] = {
   14a56:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
	return k_poll(events, ARRAY_SIZE(events), timeout);
   14a5a:	f7ff fd1c 	bl	14496 <k_poll>
		if (res && res != -EAGAIN && res != -EINTR) {
   14a5e:	f100 020b 	add.w	r2, r0, #11
   14a62:	2a0b      	cmp	r2, #11
	return k_poll(events, ARRAY_SIZE(events), timeout);
   14a64:	4604      	mov	r4, r0
		if (res && res != -EAGAIN && res != -EINTR) {
   14a66:	d804      	bhi.n	14a72 <zsock_recvfrom_ctx+0x23a>
   14a68:	f640 0381 	movw	r3, #2177	; 0x881
   14a6c:	40d3      	lsrs	r3, r2
   14a6e:	07d9      	lsls	r1, r3, #31
   14a70:	d404      	bmi.n	14a7c <zsock_recvfrom_ctx+0x244>
			errno = -res;
   14a72:	f000 faa8 	bl	14fc6 <__errno>
   14a76:	4264      	negs	r4, r4
   14a78:	6004      	str	r4, [r0, #0]
			return -1;
   14a7a:	e71f      	b.n	148bc <zsock_recvfrom_ctx+0x84>
		pkt = k_fifo_peek_head(&ctx->recv_q);
   14a7c:	4648      	mov	r0, r9
   14a7e:	f7ff fd22 	bl	144c6 <k_queue_peek_head>
		if (!pkt) {
   14a82:	4606      	mov	r6, r0
   14a84:	b930      	cbnz	r0, 14a94 <zsock_recvfrom_ctx+0x25c>
   14a86:	f7ff fccd 	bl	14424 <z_arch_is_user_context>
   14a8a:	6eab      	ldr	r3, [r5, #104]	; 0x68
			if (sock_is_eof(ctx)) {
   14a8c:	07da      	lsls	r2, r3, #31
   14a8e:	f53f aedd 	bmi.w	1484c <zsock_recvfrom_ctx+0x14>
   14a92:	e71b      	b.n	148cc <zsock_recvfrom_ctx+0x94>
	backup->buf = pkt->cursor.buf;
   14a94:	6983      	ldr	r3, [r0, #24]
   14a96:	9303      	str	r3, [sp, #12]
	backup->pos = pkt->cursor.pos;
   14a98:	69c3      	ldr	r3, [r0, #28]
   14a9a:	9302      	str	r3, [sp, #8]
		data_len = net_pkt_remaining_data(pkt);
   14a9c:	f001 fd2b 	bl	164f6 <net_pkt_remaining_data>
   14aa0:	9b00      	ldr	r3, [sp, #0]
		if (net_pkt_read(pkt, buf, recv_len)) {
   14aa2:	9901      	ldr	r1, [sp, #4]
   14aa4:	4283      	cmp	r3, r0
   14aa6:	bf28      	it	cs
   14aa8:	4603      	movcs	r3, r0
   14aaa:	461a      	mov	r2, r3
		data_len = net_pkt_remaining_data(pkt);
   14aac:	4683      	mov	fp, r0
		if (net_pkt_read(pkt, buf, recv_len)) {
   14aae:	4630      	mov	r0, r6
   14ab0:	461c      	mov	r4, r3
   14ab2:	f001 fcb7 	bl	16424 <net_pkt_read>
   14ab6:	9b03      	ldr	r3, [sp, #12]
   14ab8:	2800      	cmp	r0, #0
   14aba:	d190      	bne.n	149de <zsock_recvfrom_ctx+0x1a6>
		if (!(flags & ZSOCK_MSG_PEEK)) {
   14abc:	f018 0a02 	ands.w	sl, r8, #2
   14ac0:	d11c      	bne.n	14afc <zsock_recvfrom_ctx+0x2c4>
			if (recv_len == data_len) {
   14ac2:	9b00      	ldr	r3, [sp, #0]
   14ac4:	455b      	cmp	r3, fp
   14ac6:	d30e      	bcc.n	14ae6 <zsock_recvfrom_ctx+0x2ae>
				k_fifo_get(&ctx->recv_q, K_NO_WAIT);
   14ac8:	4651      	mov	r1, sl
   14aca:	4648      	mov	r0, r9
   14acc:	f7ff fcd3 	bl	14476 <k_queue_get>
	return pkt->sent_or_eof;
   14ad0:	f896 303d 	ldrb.w	r3, [r6, #61]	; 0x3d
				if (net_pkt_eof(pkt)) {
   14ad4:	079b      	lsls	r3, r3, #30
	val = (val & ~mask) | flag;
   14ad6:	bf42      	ittt	mi
   14ad8:	6eab      	ldrmi	r3, [r5, #104]	; 0x68
   14ada:	f043 0301 	orrmi.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
   14ade:	66ab      	strmi	r3, [r5, #104]	; 0x68
				net_pkt_unref(pkt);
   14ae0:	4630      	mov	r0, r6
   14ae2:	f001 fb91 	bl	16208 <net_pkt_unref>
	} while (recv_len == 0);
   14ae6:	2c00      	cmp	r4, #0
   14ae8:	d0a2      	beq.n	14a30 <zsock_recvfrom_ctx+0x1f8>
	if (!(flags & ZSOCK_MSG_PEEK)) {
   14aea:	f1ba 0f00 	cmp.w	sl, #0
   14aee:	f47f aeae 	bne.w	1484e <zsock_recvfrom_ctx+0x16>
		net_context_update_recv_wnd(ctx, recv_len);
   14af2:	4621      	mov	r1, r4
   14af4:	4628      	mov	r0, r5
   14af6:	f000 fd98 	bl	1562a <net_context_update_recv_wnd>
	return recv_len;
   14afa:	e6a8      	b.n	1484e <zsock_recvfrom_ctx+0x16>
	pkt->cursor.buf = backup->buf;
   14afc:	61b3      	str	r3, [r6, #24]
	pkt->cursor.pos = backup->pos;
   14afe:	9b02      	ldr	r3, [sp, #8]
   14b00:	61f3      	str	r3, [r6, #28]
   14b02:	e7f0      	b.n	14ae6 <zsock_recvfrom_ctx+0x2ae>

00014b04 <sock_recvfrom_vmeth>:

static ssize_t sock_recvfrom_vmeth(void *obj, void *buf, size_t max_len,
				   int flags, struct sockaddr *src_addr,
				   socklen_t *addrlen)
{
	return zsock_recvfrom_ctx(obj, buf, max_len, flags,
   14b04:	f7ff be98 	b.w	14838 <zsock_recvfrom_ctx>

00014b08 <sock_read_vmeth>:
{
   14b08:	b507      	push	{r0, r1, r2, lr}
	return zsock_recvfrom_ctx(obj, buffer, count, 0, NULL, 0);
   14b0a:	2300      	movs	r3, #0
   14b0c:	e9cd 3300 	strd	r3, r3, [sp]
   14b10:	f7ff fe92 	bl	14838 <zsock_recvfrom_ctx>
}
   14b14:	b003      	add	sp, #12
   14b16:	f85d fb04 	ldr.w	pc, [sp], #4

00014b1a <z_impl_zsock_recvfrom>:
{
   14b1a:	b5f0      	push	{r4, r5, r6, r7, lr}
   14b1c:	b085      	sub	sp, #20
   14b1e:	460d      	mov	r5, r1
	return z_get_fd_obj_and_vtable(sock,
   14b20:	a903      	add	r1, sp, #12
{
   14b22:	4616      	mov	r6, r2
   14b24:	461f      	mov	r7, r3
	return z_get_fd_obj_and_vtable(sock,
   14b26:	f7f0 faaf 	bl	5088 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   14b2a:	b160      	cbz	r0, 14b46 <z_impl_zsock_recvfrom+0x2c>
   14b2c:	9b03      	ldr	r3, [sp, #12]
   14b2e:	6a1c      	ldr	r4, [r3, #32]
   14b30:	b14c      	cbz	r4, 14b46 <z_impl_zsock_recvfrom+0x2c>
   14b32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14b34:	9301      	str	r3, [sp, #4]
   14b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14b38:	9300      	str	r3, [sp, #0]
   14b3a:	4632      	mov	r2, r6
   14b3c:	463b      	mov	r3, r7
   14b3e:	4629      	mov	r1, r5
   14b40:	47a0      	blx	r4
}
   14b42:	b005      	add	sp, #20
   14b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   14b46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14b4a:	e7fa      	b.n	14b42 <z_impl_zsock_recvfrom+0x28>

00014b4c <z_impl_zsock_fcntl>:
{
   14b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14b4e:	460c      	mov	r4, r1
	obj = z_get_fd_obj_and_vtable(sock, &vtable);
   14b50:	a901      	add	r1, sp, #4
{
   14b52:	4615      	mov	r5, r2
	obj = z_get_fd_obj_and_vtable(sock, &vtable);
   14b54:	f7f0 fa98 	bl	5088 <z_get_fd_obj_and_vtable>
	if (obj == NULL) {
   14b58:	4601      	mov	r1, r0
   14b5a:	b130      	cbz	r0, 14b6a <z_impl_zsock_fcntl+0x1e>
	return z_fdtable_call_ioctl(vtable, obj, cmd, flags);
   14b5c:	462b      	mov	r3, r5
   14b5e:	4622      	mov	r2, r4
   14b60:	9801      	ldr	r0, [sp, #4]
   14b62:	f7ff fc79 	bl	14458 <z_fdtable_call_ioctl>
}
   14b66:	b003      	add	sp, #12
   14b68:	bd30      	pop	{r4, r5, pc}
		return -1;
   14b6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14b6e:	e7fa      	b.n	14b66 <z_impl_zsock_fcntl+0x1a>

00014b70 <z_hdlr_zsock_fcntl>:
	return z_impl_zsock_fcntl(sock, cmd, flags);
   14b70:	f7ff bfec 	b.w	14b4c <z_impl_zsock_fcntl>

00014b74 <z_hdlr_zsock_poll>:
	if (__builtin_umul_overflow(nfds, sizeof(struct zsock_pollfd),
   14b74:	0f4b      	lsrs	r3, r1, #29
{
   14b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b7a:	4607      	mov	r7, r0
   14b7c:	460c      	mov	r4, r1
   14b7e:	4690      	mov	r8, r2
	if (__builtin_umul_overflow(nfds, sizeof(struct zsock_pollfd),
   14b80:	ea4f 06c1 	mov.w	r6, r1, lsl #3
   14b84:	d108      	bne.n	14b98 <z_hdlr_zsock_poll+0x24>
	fds_copy = z_user_alloc_from_copy((void *)fds, fds_size);
   14b86:	4631      	mov	r1, r6
   14b88:	f7fc fb22 	bl	111d0 <z_user_alloc_from_copy>
	if (!fds_copy) {
   14b8c:	4605      	mov	r5, r0
   14b8e:	b958      	cbnz	r0, 14ba8 <z_hdlr_zsock_poll+0x34>
		errno = ENOMEM;
   14b90:	f000 fa19 	bl	14fc6 <__errno>
   14b94:	230c      	movs	r3, #12
   14b96:	e002      	b.n	14b9e <z_hdlr_zsock_poll+0x2a>
		errno = EFAULT;
   14b98:	f000 fa15 	bl	14fc6 <__errno>
   14b9c:	230e      	movs	r3, #14
		errno = ENOMEM;
   14b9e:	6003      	str	r3, [r0, #0]
		return -1;
   14ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   14ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ret = z_impl_zsock_poll(fds_copy, nfds, timeout);
   14ba8:	4621      	mov	r1, r4
   14baa:	4642      	mov	r2, r8
   14bac:	f7f3 f8d2 	bl	7d54 <z_impl_zsock_poll>
	if (ret >= 0) {
   14bb0:	1e04      	subs	r4, r0, #0
   14bb2:	db04      	blt.n	14bbe <z_hdlr_zsock_poll+0x4a>
		z_user_to_copy((void *)fds, fds_copy, fds_size);
   14bb4:	4632      	mov	r2, r6
   14bb6:	4629      	mov	r1, r5
   14bb8:	4638      	mov	r0, r7
   14bba:	f004 f89f 	bl	18cfc <z_user_to_copy>
	k_free(fds_copy);
   14bbe:	4628      	mov	r0, r5
   14bc0:	f003 fb94 	bl	182ec <k_free>
	return ret;
   14bc4:	4620      	mov	r0, r4
   14bc6:	e7ed      	b.n	14ba4 <z_hdlr_zsock_poll+0x30>

00014bc8 <z_impl_zsock_inet_pton>:
{
   14bc8:	b508      	push	{r3, lr}
	if (net_addr_pton(family, src, dst) == 0) {
   14bca:	f001 fdc4 	bl	16756 <net_addr_pton>
}
   14bce:	fab0 f080 	clz	r0, r0
   14bd2:	0940      	lsrs	r0, r0, #5
   14bd4:	bd08      	pop	{r3, pc}

00014bd6 <z_hdlr_zsock_inet_pton>:
{
   14bd6:	b570      	push	{r4, r5, r6, lr}
	switch (family) {
   14bd8:	2801      	cmp	r0, #1
{
   14bda:	b08e      	sub	sp, #56	; 0x38
   14bdc:	4604      	mov	r4, r0
   14bde:	4616      	mov	r6, r2
	switch (family) {
   14be0:	d009      	beq.n	14bf6 <z_hdlr_zsock_inet_pton+0x20>
   14be2:	2802      	cmp	r0, #2
   14be4:	d010      	beq.n	14c08 <z_hdlr_zsock_inet_pton+0x32>
		errno = EAFNOSUPPORT;
   14be6:	f000 f9ee 	bl	14fc6 <__errno>
   14bea:	236a      	movs	r3, #106	; 0x6a
   14bec:	6003      	str	r3, [r0, #0]
		return -1;
   14bee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   14bf2:	b00e      	add	sp, #56	; 0x38
   14bf4:	bd70      	pop	{r4, r5, r6, pc}
		dst_size = sizeof(struct in_addr);
   14bf6:	2504      	movs	r5, #4
	Z_OOPS(z_user_string_copy(src_copy, (char *)src, sizeof(src_copy)));
   14bf8:	2228      	movs	r2, #40	; 0x28
   14bfa:	a804      	add	r0, sp, #16
   14bfc:	f7fc fb20 	bl	11240 <z_user_string_copy>
   14c00:	b120      	cbz	r0, 14c0c <z_hdlr_zsock_inet_pton+0x36>
   14c02:	9814      	ldr	r0, [sp, #80]	; 0x50
   14c04:	f000 f98f 	bl	14f26 <z_arch_syscall_oops>
		dst_size = sizeof(struct in6_addr);
   14c08:	2510      	movs	r5, #16
   14c0a:	e7f5      	b.n	14bf8 <z_hdlr_zsock_inet_pton+0x22>
	ret = z_impl_zsock_inet_pton(family, src_copy, dst_copy);
   14c0c:	466a      	mov	r2, sp
   14c0e:	a904      	add	r1, sp, #16
   14c10:	b2a0      	uxth	r0, r4
   14c12:	f7ff ffd9 	bl	14bc8 <z_impl_zsock_inet_pton>
	Z_OOPS(z_user_to_copy((void *)dst, dst_copy, dst_size));
   14c16:	462a      	mov	r2, r5
	ret = z_impl_zsock_inet_pton(family, src_copy, dst_copy);
   14c18:	4604      	mov	r4, r0
	Z_OOPS(z_user_to_copy((void *)dst, dst_copy, dst_size));
   14c1a:	4669      	mov	r1, sp
   14c1c:	4630      	mov	r0, r6
   14c1e:	f004 f86d 	bl	18cfc <z_user_to_copy>
   14c22:	2800      	cmp	r0, #0
   14c24:	d1ed      	bne.n	14c02 <z_hdlr_zsock_inet_pton+0x2c>
	return ret;
   14c26:	4620      	mov	r0, r4
   14c28:	e7e3      	b.n	14bf2 <z_hdlr_zsock_inet_pton+0x1c>

00014c2a <zsock_setsockopt_ctx>:
	switch (level) {
   14c2a:	2906      	cmp	r1, #6
{
   14c2c:	b508      	push	{r3, lr}
	switch (level) {
   14c2e:	d00c      	beq.n	14c4a <zsock_setsockopt_ctx+0x20>
   14c30:	2929      	cmp	r1, #41	; 0x29
   14c32:	d00c      	beq.n	14c4e <zsock_setsockopt_ctx+0x24>
   14c34:	2901      	cmp	r1, #1
   14c36:	d101      	bne.n	14c3c <zsock_setsockopt_ctx+0x12>
		switch (optname) {
   14c38:	2a02      	cmp	r2, #2
   14c3a:	d00a      	beq.n	14c52 <zsock_setsockopt_ctx+0x28>
	errno = ENOPROTOOPT;
   14c3c:	f000 f9c3 	bl	14fc6 <__errno>
   14c40:	236d      	movs	r3, #109	; 0x6d
   14c42:	6003      	str	r3, [r0, #0]
   14c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   14c48:	bd08      	pop	{r3, pc}
		switch (optname) {
   14c4a:	2a01      	cmp	r2, #1
   14c4c:	e7f5      	b.n	14c3a <zsock_setsockopt_ctx+0x10>
		switch (optname) {
   14c4e:	2a1a      	cmp	r2, #26
   14c50:	e7f3      	b.n	14c3a <zsock_setsockopt_ctx+0x10>
			return 0;
   14c52:	2000      	movs	r0, #0
   14c54:	e7f8      	b.n	14c48 <zsock_setsockopt_ctx+0x1e>

00014c56 <sock_setsockopt_vmeth>:
}

static int sock_setsockopt_vmeth(void *obj, int level, int optname,
				 const void *optval, socklen_t optlen)
{
	return zsock_setsockopt_ctx(obj, level, optname, optval, optlen);
   14c56:	f7ff bfe8 	b.w	14c2a <zsock_setsockopt_ctx>

00014c5a <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   14c5a:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   14c5e:	b923      	cbnz	r3, 14c6a <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   14c60:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   14c64:	f000 0001 	and.w	r0, r0, #1
   14c68:	4770      	bx	lr
		return false;
   14c6a:	2000      	movs	r0, #0
}
   14c6c:	4770      	bx	lr

00014c6e <k_sem_give>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   14c6e:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
   14c72:	4602      	mov	r2, r0
   14c74:	f7ff fff1 	bl	14c5a <z_arch_is_user_context>
   14c78:	b120      	cbz	r0, 14c84 <k_sem_give+0x16>
	register u32_t ret __asm__("r0") = arg1;
   14c7a:	4610      	mov	r0, r2
	register u32_t r6 __asm__("r6") = call_id;
   14c7c:	265a      	movs	r6, #90	; 0x5a
	__asm__ volatile("svc %[svid]\n"
   14c7e:	df03      	svc	3
   14c80:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
   14c84:	4610      	mov	r0, r2
   14c86:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
   14c8a:	f7fb ba27 	b.w	100dc <z_impl_k_sem_give>

00014c8e <k_sem_init.constprop.9>:
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   14c8e:	e92d 4150 	stmdb	sp!, {r4, r6, r8, lr}
   14c92:	4604      	mov	r4, r0
   14c94:	f7ff ffe1 	bl	14c5a <z_arch_is_user_context>
   14c98:	b128      	cbz	r0, 14ca6 <k_sem_init.constprop.9+0x18>
	register u32_t ret __asm__("r0") = arg1;
   14c9a:	4620      	mov	r0, r4
	register u32_t r2 __asm__("r2") = arg3;
   14c9c:	2201      	movs	r2, #1
	register u32_t r6 __asm__("r6") = call_id;
   14c9e:	265b      	movs	r6, #91	; 0x5b
	__asm__ volatile("svc %[svid]\n"
   14ca0:	df03      	svc	3
   14ca2:	e8bd 8150 	ldmia.w	sp!, {r4, r6, r8, pc}
   14ca6:	2201      	movs	r2, #1
   14ca8:	4620      	mov	r0, r4
   14caa:	e8bd 4150 	ldmia.w	sp!, {r4, r6, r8, lr}
   14cae:	f003 bd5f 	b.w	18770 <z_impl_k_sem_init>

00014cb2 <usb_transfer_work>:

	return NULL;
}

static void usb_transfer_work(struct k_work *item)
{
   14cb2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	u8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
   14cb6:	f850 3c30 	ldr.w	r3, [r0, #-48]
	ep = trans->ep;
   14cba:	f810 5c34 	ldrb.w	r5, [r0, #-52]
	if (trans->status != -EBUSY) {
   14cbe:	3310      	adds	r3, #16
{
   14cc0:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
   14cc2:	d110      	bne.n	14ce6 <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
   14cc4:	68c3      	ldr	r3, [r0, #12]
   14cc6:	f850 2c28 	ldr.w	r2, [r0, #-40]
   14cca:	0799      	lsls	r1, r3, #30
   14ccc:	d53c      	bpl.n	14d48 <usb_transfer_work+0x96>
		if (!trans->bsize) {
   14cce:	bb02      	cbnz	r2, 14d12 <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
   14cd0:	f013 0304 	ands.w	r3, r3, #4
   14cd4:	d104      	bne.n	14ce0 <usb_transfer_work+0x2e>
				usb_dc_ep_write(ep, NULL, 0, NULL);
   14cd6:	461a      	mov	r2, r3
   14cd8:	4619      	mov	r1, r3
   14cda:	4628      	mov	r0, r5
   14cdc:	f7f5 fd06 	bl	a6ec <usb_dc_ep_write>
			}
			trans->status = 0;
   14ce0:	2300      	movs	r3, #0
		}

		ret = usb_dc_ep_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			/* transfer error */
			trans->status = -EINVAL;
   14ce2:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
   14ce6:	f854 3c30 	ldr.w	r3, [r4, #-48]
   14cea:	3310      	adds	r3, #16
   14cec:	d00e      	beq.n	14d0c <usb_transfer_work+0x5a>
   14cee:	f854 6c20 	ldr.w	r6, [r4, #-32]
   14cf2:	b15e      	cbz	r6, 14d0c <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
   14cf4:	f854 7c24 	ldr.w	r7, [r4, #-36]
		void *priv = trans->priv;
   14cf8:	f854 8c1c 	ldr.w	r8, [r4, #-28]

		if (k_is_in_isr()) {
   14cfc:	f7fb fab8 	bl	10270 <k_is_in_isr>
   14d00:	4602      	mov	r2, r0
   14d02:	2800      	cmp	r0, #0
   14d04:	d04b      	beq.n	14d9e <usb_transfer_work+0xec>
	k_work_submit_to_queue(&k_sys_work_q, work);
   14d06:	4620      	mov	r0, r4
   14d08:	f7f3 fb28 	bl	835c <k_work_submit_to_queue.constprop.10>
		k_sem_give(&trans->sem);

		/* Transfer completion callback */
		cb(ep, tsize, priv);
	}
}
   14d0c:	b002      	add	sp, #8
   14d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_dc_ep_write(ep, trans->buffer, trans->bsize, &bytes);
   14d12:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   14d16:	ab01      	add	r3, sp, #4
   14d18:	4628      	mov	r0, r5
   14d1a:	f7f5 fce7 	bl	a6ec <usb_dc_ep_write>
		if (ret) {
   14d1e:	b110      	cbz	r0, 14d26 <usb_transfer_work+0x74>
			trans->status = -EINVAL;
   14d20:	f06f 0315 	mvn.w	r3, #21
   14d24:	e7dd      	b.n	14ce2 <usb_transfer_work+0x30>
		trans->buffer += bytes;
   14d26:	9a01      	ldr	r2, [sp, #4]
   14d28:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   14d2c:	4413      	add	r3, r2
   14d2e:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
   14d32:	f854 3c28 	ldr.w	r3, [r4, #-40]
   14d36:	1a9b      	subs	r3, r3, r2
   14d38:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
   14d3c:	f854 3c24 	ldr.w	r3, [r4, #-36]
   14d40:	4413      	add	r3, r2
   14d42:	f844 3c24 	str.w	r3, [r4, #-36]
   14d46:	e7ce      	b.n	14ce6 <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
   14d48:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   14d4c:	ab01      	add	r3, sp, #4
   14d4e:	4628      	mov	r0, r5
   14d50:	f7f5 fd54 	bl	a7fc <usb_dc_ep_read_wait>
		if (ret) {
   14d54:	2800      	cmp	r0, #0
   14d56:	d1e3      	bne.n	14d20 <usb_transfer_work+0x6e>
		trans->buffer += bytes;
   14d58:	9e01      	ldr	r6, [sp, #4]
   14d5a:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   14d5e:	4433      	add	r3, r6
   14d60:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
   14d64:	f854 3c28 	ldr.w	r3, [r4, #-40]
   14d68:	1b9b      	subs	r3, r3, r6
   14d6a:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
   14d6e:	f854 3c24 	ldr.w	r3, [r4, #-36]
   14d72:	4433      	add	r3, r6
   14d74:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
   14d78:	2e00      	cmp	r6, #0
   14d7a:	d0b1      	beq.n	14ce0 <usb_transfer_work+0x2e>
   14d7c:	4628      	mov	r0, r5
   14d7e:	f7f5 fdd1 	bl	a924 <usb_dc_ep_mps>
   14d82:	fbb6 f3f0 	udiv	r3, r6, r0
   14d86:	fb03 6010 	mls	r0, r3, r0, r6
   14d8a:	2800      	cmp	r0, #0
   14d8c:	d1a8      	bne.n	14ce0 <usb_transfer_work+0x2e>
   14d8e:	f854 3c28 	ldr.w	r3, [r4, #-40]
   14d92:	2b00      	cmp	r3, #0
   14d94:	d0a4      	beq.n	14ce0 <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
   14d96:	4628      	mov	r0, r5
   14d98:	f7f5 fd72 	bl	a880 <usb_dc_ep_read_continue>
   14d9c:	e7a3      	b.n	14ce6 <usb_transfer_work+0x34>
   14d9e:	f7ff ff5c 	bl	14c5a <z_arch_is_user_context>
		k_sem_give(&trans->sem);
   14da2:	f1a4 0018 	sub.w	r0, r4, #24
		trans->cb = NULL;
   14da6:	f844 2c20 	str.w	r2, [r4, #-32]
		k_sem_give(&trans->sem);
   14daa:	f7ff ff60 	bl	14c6e <k_sem_give>
		cb(ep, tsize, priv);
   14dae:	4642      	mov	r2, r8
   14db0:	4639      	mov	r1, r7
   14db2:	4628      	mov	r0, r5
   14db4:	47b0      	blx	r6
   14db6:	e7a9      	b.n	14d0c <usb_transfer_work+0x5a>

00014db8 <usb_write>:
	return usb_dc_ep_write(ep, data, data_len, bytes_ret);
   14db8:	f7f5 bc98 	b.w	a6ec <usb_dc_ep_write>

00014dbc <usb_ep_set_stall>:
	return usb_dc_ep_set_stall(ep);
   14dbc:	f7f5 bbf8 	b.w	a5b0 <usb_dc_ep_set_stall>

00014dc0 <usb_ep_read_wait>:
	return usb_dc_ep_read_wait(ep, data, max_data_len, ret_bytes);
   14dc0:	f7f5 bd1c 	b.w	a7fc <usb_dc_ep_read_wait>

00014dc4 <usb_ep_read_continue>:
	return usb_dc_ep_read_continue(ep);
   14dc4:	f7f5 bd5c 	b.w	a880 <usb_dc_ep_read_continue>

00014dc8 <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   14dc8:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   14dcc:	b923      	cbnz	r3, 14dd8 <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   14dce:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   14dd2:	f000 0001 	and.w	r0, r0, #1
   14dd6:	4770      	bx	lr
		return false;
   14dd8:	2000      	movs	r0, #0
}
   14dda:	4770      	bx	lr

00014ddc <usb_update_sn_string_descriptor>:
}
   14ddc:	2000      	movs	r0, #0
   14dde:	4770      	bx	lr

00014de0 <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   14de0:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   14de4:	b923      	cbnz	r3, 14df0 <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   14de6:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   14dea:	f000 0001 	and.w	r0, r0, #1
   14dee:	4770      	bx	lr
		return false;
   14df0:	2000      	movs	r0, #0
}
   14df2:	4770      	bx	lr

00014df4 <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   14df4:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   14df8:	b923      	cbnz	r3, 14e04 <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   14dfa:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   14dfe:	f000 0001 	and.w	r0, r0, #1
   14e02:	4770      	bx	lr
		return false;
   14e04:	2000      	movs	r0, #0
}
   14e06:	4770      	bx	lr

00014e08 <z_arch_syscall_invoke1>:
{
   14e08:	e92d 4140 	stmdb	sp!, {r6, r8, lr}
	register u32_t r6 __asm__("r6") = call_id;
   14e0c:	460e      	mov	r6, r1
	__asm__ volatile("svc %[svid]\n"
   14e0e:	df03      	svc	3
}
   14e10:	e8bd 8140 	ldmia.w	sp!, {r6, r8, pc}

00014e14 <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   14e14:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   14e18:	b923      	cbnz	r3, 14e24 <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   14e1a:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   14e1e:	f000 0001 	and.w	r0, r0, #1
   14e22:	4770      	bx	lr
		return false;
   14e24:	2000      	movs	r0, #0
}
   14e26:	4770      	bx	lr

00014e28 <uart_poll_out>:
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_UART_POLL_OUT, uart_poll_out, struct device *, dev, unsigned char, out_char)
   14e28:	e92d 4150 	stmdb	sp!, {r4, r6, r8, lr}
   14e2c:	4602      	mov	r2, r0
   14e2e:	f7ff fff1 	bl	14e14 <z_arch_is_user_context>
   14e32:	b120      	cbz	r0, 14e3e <uart_poll_out+0x16>
	register u32_t ret __asm__("r0") = arg1;
   14e34:	4610      	mov	r0, r2
	register u32_t r6 __asm__("r6") = call_id;
   14e36:	269d      	movs	r6, #157	; 0x9d
	__asm__ volatile("svc %[svid]\n"
   14e38:	df03      	svc	3
   14e3a:	e8bd 8150 	ldmia.w	sp!, {r4, r6, r8, pc}
	api->poll_out(dev, out_char);
   14e3e:	6853      	ldr	r3, [r2, #4]
   14e40:	4610      	mov	r0, r2
   14e42:	685b      	ldr	r3, [r3, #4]
   14e44:	e8bd 4150 	ldmia.w	sp!, {r4, r6, r8, lr}
   14e48:	4718      	bx	r3

00014e4a <debug_hook_out_nop>:
}
   14e4a:	2000      	movs	r0, #0
   14e4c:	4770      	bx	lr

00014e4e <clock_control_init>:

static int clock_control_init(struct device *dev)
{
   14e4e:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(DT_NORDIC_NRF_CLOCK_0_IRQ_0,
   14e50:	2200      	movs	r2, #0
   14e52:	4610      	mov	r0, r2
   14e54:	2101      	movs	r1, #1
   14e56:	f7f6 f8cf 	bl	aff8 <z_irq_priority_set>
		    DT_NORDIC_NRF_CLOCK_0_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
   14e5a:	2000      	movs	r0, #0
   14e5c:	f7f6 f89a 	bl	af94 <z_arch_irq_enable>

	return 0;
}
   14e60:	2000      	movs	r0, #0
   14e62:	bd08      	pop	{r3, pc}

00014e64 <nrf5_power_usb_power_int_enable>:

	mask = NRF_POWER_INT_USBDETECTED_MASK |
	       NRF_POWER_INT_USBREMOVED_MASK |
	       NRF_POWER_INT_USBPWRRDY_MASK;

	if (enable) {
   14e64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14e68:	f44f 7260 	mov.w	r2, #896	; 0x380
   14e6c:	b120      	cbz	r0, 14e78 <nrf5_power_usb_power_int_enable+0x14>
    NRF_POWER->INTENSET = int_mask;
   14e6e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_power_int_enable(mask);
		irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
   14e72:	2000      	movs	r0, #0
   14e74:	f7f6 b88e 	b.w	af94 <z_arch_irq_enable>
    NRF_POWER->INTENCLR = int_mask;
   14e78:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	} else {
		nrf_power_int_disable(mask);
	}
}
   14e7c:	4770      	bx	lr

00014e7e <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   14e7e:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   14e82:	b923      	cbnz	r3, 14e8e <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   14e84:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   14e88:	f000 0001 	and.w	r0, r0, #1
   14e8c:	4770      	bx	lr
		return false;
   14e8e:	2000      	movs	r0, #0
}
   14e90:	4770      	bx	lr

00014e92 <k_mutex_unlock>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
   14e92:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
   14e96:	4602      	mov	r2, r0
   14e98:	f7ff fff1 	bl	14e7e <z_arch_is_user_context>
   14e9c:	b120      	cbz	r0, 14ea8 <k_mutex_unlock+0x16>
	register u32_t ret __asm__("r0") = arg1;
   14e9e:	4610      	mov	r0, r2
	register u32_t r6 __asm__("r6") = call_id;
   14ea0:	2645      	movs	r6, #69	; 0x45
	__asm__ volatile("svc %[svid]\n"
   14ea2:	df03      	svc	3
   14ea4:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
   14ea8:	4610      	mov	r0, r2
   14eaa:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
   14eae:	f7fa bc03 	b.w	f6b8 <z_impl_k_mutex_unlock>

00014eb2 <usbd_evt_flush>:
{
   14eb2:	b508      	push	{r3, lr}
	return k_fifo_get(&work_queue, K_NO_WAIT);
   14eb4:	f7f4 fd1e 	bl	98f4 <k_queue_get.constprop.15>
		if (ev) {
   14eb8:	b118      	cbz	r0, 14ec2 <usbd_evt_flush+0x10>
	k_mem_pool_free(&ev->block);
   14eba:	3004      	adds	r0, #4
   14ebc:	f003 fa00 	bl	182c0 <k_mem_pool_free>
   14ec0:	e7f8      	b.n	14eb4 <usbd_evt_flush+0x2>
}
   14ec2:	bd08      	pop	{r3, pc}

00014ec4 <k_mutex_lock.constprop.11>:
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   14ec4:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
   14ec8:	4602      	mov	r2, r0
   14eca:	f7ff ffd8 	bl	14e7e <z_arch_is_user_context>
   14ece:	b130      	cbz	r0, 14ede <k_mutex_lock.constprop.11+0x1a>
	register u32_t ret __asm__("r0") = arg1;
   14ed0:	4610      	mov	r0, r2
	register u32_t r1 __asm__("r1") = arg2;
   14ed2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	register u32_t r6 __asm__("r6") = call_id;
   14ed6:	2644      	movs	r6, #68	; 0x44
	__asm__ volatile("svc %[svid]\n"
   14ed8:	df03      	svc	3
   14eda:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
   14ede:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14ee2:	4610      	mov	r0, r2
   14ee4:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
   14ee8:	f7fa bb5a 	b.w	f5a0 <z_impl_k_mutex_lock>

00014eec <usb_dc_ep_read>:
{
   14eec:	b570      	push	{r4, r5, r6, lr}
   14eee:	4604      	mov	r4, r0
   14ef0:	4615      	mov	r5, r2
   14ef2:	460e      	mov	r6, r1
   14ef4:	461a      	mov	r2, r3
   14ef6:	f7ff ffc2 	bl	14e7e <z_arch_is_user_context>
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   14efa:	4620      	mov	r0, r4
   14efc:	4613      	mov	r3, r2
   14efe:	462a      	mov	r2, r5
   14f00:	f7f5 fc7c 	bl	a7fc <usb_dc_ep_read_wait>
	if (ret) {
   14f04:	b930      	cbnz	r0, 14f14 <usb_dc_ep_read+0x28>
	if (!data && !max_data_len) {
   14f06:	b906      	cbnz	r6, 14f0a <usb_dc_ep_read+0x1e>
   14f08:	b125      	cbz	r5, 14f14 <usb_dc_ep_read+0x28>
	ret = usb_dc_ep_read_continue(ep);
   14f0a:	4620      	mov	r0, r4
}
   14f0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
   14f10:	f7f5 bcb6 	b.w	a880 <usb_dc_ep_read_continue>
}
   14f14:	bd70      	pop	{r4, r5, r6, pc}

00014f16 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   14f16:	4770      	bx	lr

00014f18 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   14f18:	4770      	bx	lr

00014f1a <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
   14f1a:	f7f6 b90d 	b.w	b138 <__bus_fault>

00014f1e <z_do_kernel_oops>:

void z_do_kernel_oops(const NANO_ESF *esf)
{
   14f1e:	4601      	mov	r1, r0
	z_NanoFatalErrorHandler(esf->r0, esf);
   14f20:	6800      	ldr	r0, [r0, #0]
   14f22:	f7f6 b91d 	b.w	b160 <z_NanoFatalErrorHandler>

00014f26 <z_arch_syscall_oops>:
}

FUNC_NORETURN void z_arch_syscall_oops(void *ssf_ptr)
{
   14f26:	b500      	push	{lr}
   14f28:	4604      	mov	r4, r0
   14f2a:	b089      	sub	sp, #36	; 0x24
	u32_t *ssf_contents = ssf_ptr;
	NANO_ESF oops_esf = { 0 };
   14f2c:	2220      	movs	r2, #32
   14f2e:	2100      	movs	r1, #0
   14f30:	4668      	mov	r0, sp
   14f32:	f7ed fa5e 	bl	23f2 <memset>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_LOG_PANIC, log_panic)
   14f36:	f7f1 ff81 	bl	6e3c <z_impl_log_panic>

	LOG_PANIC();

	oops_esf.pc = ssf_contents[3];
   14f3a:	68e3      	ldr	r3, [r4, #12]
   14f3c:	9306      	str	r3, [sp, #24]

	z_do_kernel_oops(&oops_esf);
   14f3e:	4668      	mov	r0, sp
   14f40:	f7ff ffed 	bl	14f1e <z_do_kernel_oops>

00014f44 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
   14f44:	b508      	push	{r3, lr}
	handler();
   14f46:	f7f6 fa63 	bl	b410 <z_SysNmiOnReset>
	z_ExcExit();
}
   14f4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_ExcExit();
   14f4e:	f7f5 bdeb 	b.w	ab28 <_IntExit>

00014f52 <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   14f52:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   14f56:	b923      	cbnz	r3, 14f62 <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   14f58:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   14f5c:	f000 0001 	and.w	r0, r0, #1
   14f60:	4770      	bx	lr
		return false;
   14f62:	2000      	movs	r0, #0
}
   14f64:	4770      	bx	lr

00014f66 <z_arch_mem_domain_max_partitions_get>:
 * @brief Get the maximum number of partitions for a memory domain
 *        that is supported by the MPU hardware, and with respect
 *        to the current static memory region configuration.
 */
int z_arch_mem_domain_max_partitions_get(void)
{
   14f66:	b508      	push	{r3, lr}
	int available_regions = arm_core_mpu_get_max_available_dyn_regions();
   14f68:	f7f6 fb5a 	bl	b620 <arm_core_mpu_get_max_available_dyn_regions>
		available_regions -=
			ARM_CORE_MPU_NUM_MPU_REGIONS_FOR_MPU_STACK_GUARD;
	}

	return ARM_CORE_MPU_MAX_DOMAIN_PARTITIONS_GET(available_regions);
}
   14f6c:	3801      	subs	r0, #1
   14f6e:	bd08      	pop	{r3, pc}

00014f70 <z_arch_mem_domain_configure>:
{
	/* Request to configure memory domain for a thread.
	 * This triggers re-programming of the entire dynamic
	 * memory map.
	 */
	z_arch_configure_dynamic_mpu_regions(thread);
   14f70:	f7f6 ba84 	b.w	b47c <z_arch_configure_dynamic_mpu_regions>

00014f74 <z_arch_buffer_validate>:
/*
 * Validate the given buffer is user accessible or not
 */
int z_arch_buffer_validate(void *addr, size_t size, int write)
{
	return arm_core_mpu_buffer_validate(addr, size, write);
   14f74:	f7f6 bb5c 	b.w	b630 <arm_core_mpu_buffer_validate>

00014f78 <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   14f78:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   14f7c:	b923      	cbnz	r3, 14f88 <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   14f7e:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   14f82:	f000 0001 	and.w	r0, r0, #1
   14f86:	4770      	bx	lr
		return false;
   14f88:	2000      	movs	r0, #0
}
   14f8a:	4770      	bx	lr

00014f8c <_stdout_hook_default>:
}
   14f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14f90:	4770      	bx	lr

00014f92 <_stdin_hook_default>:
}
   14f92:	2000      	movs	r0, #0
   14f94:	4770      	bx	lr

00014f96 <_read>:
{
   14f96:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   14f98:	4611      	mov	r1, r2
   14f9a:	f7f6 bbfd 	b.w	b798 <z_impl_zephyr_read_stdin>

00014f9e <_write>:
{
   14f9e:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   14fa0:	4611      	mov	r1, r2
   14fa2:	f7f6 bc0d 	b.w	b7c0 <z_impl_zephyr_write_stdout>

00014fa6 <_close>:
   14fa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14faa:	4770      	bx	lr

00014fac <_lseek>:
}
   14fac:	2000      	movs	r0, #0
   14fae:	4770      	bx	lr

00014fb0 <_isatty>:
}
   14fb0:	2001      	movs	r0, #1
   14fb2:	4770      	bx	lr

00014fb4 <_kill>:
}
   14fb4:	2000      	movs	r0, #0
   14fb6:	4770      	bx	lr

00014fb8 <_getpid>:
}
   14fb8:	2000      	movs	r0, #0
   14fba:	4770      	bx	lr

00014fbc <_fstat>:
	st->st_mode = S_IFCHR;
   14fbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   14fc0:	604b      	str	r3, [r1, #4]
}
   14fc2:	2000      	movs	r0, #0
   14fc4:	4770      	bx	lr

00014fc6 <__errno>:
FUNC_ALIAS(_sbrk, sbrk, void *);

int *__errno(void)
{
   14fc6:	e92d 0140 	stmdb	sp!, {r6, r8}
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   14fca:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   14fce:	b943      	cbnz	r3, 14fe2 <__errno+0x1c>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   14fd0:	f3ef 8314 	mrs	r3, CONTROL

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE0(K_SYSCALL_Z_ERRNO, z_errno, int *)
   14fd4:	07db      	lsls	r3, r3, #31
   14fd6:	d504      	bpl.n	14fe2 <__errno+0x1c>
	register u32_t r6 __asm__("r6") = call_id;
   14fd8:	26ad      	movs	r6, #173	; 0xad
	__asm__ volatile("svc %[svid]\n"
   14fda:	df03      	svc	3
	return z_errno();
}
   14fdc:	e8bd 0140 	ldmia.w	sp!, {r6, r8}
   14fe0:	4770      	bx	lr
   14fe2:	e8bd 0140 	ldmia.w	sp!, {r6, r8}
   14fe6:	f7fa b88d 	b.w	f104 <z_impl_z_errno>

00014fea <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   14fea:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   14fee:	b923      	cbnz	r3, 14ffa <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   14ff0:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   14ff4:	f000 0001 	and.w	r0, r0, #1
   14ff8:	4770      	bx	lr
		return false;
   14ffa:	2000      	movs	r0, #0
}
   14ffc:	4770      	bx	lr

00014ffe <fixed_data_unref>:
}
   14ffe:	4770      	bx	lr

00015000 <k_uptime_get>:
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   15000:	e92d 4147 	stmdb	sp!, {r0, r1, r2, r6, r8, lr}
   15004:	f7ff fff1 	bl	14fea <z_arch_is_user_context>
   15008:	b138      	cbz	r0, 1501a <k_uptime_get+0x1a>
	(void)z_arch_syscall_invoke1((u32_t)&ret, call_id);
   1500a:	4668      	mov	r0, sp
	register u32_t r6 __asm__("r6") = call_id;
   1500c:	2676      	movs	r6, #118	; 0x76
	__asm__ volatile("svc %[svid]\n"
   1500e:	df03      	svc	3
	return ret;
   15010:	e9dd 0100 	ldrd	r0, r1, [sp]
   15014:	b003      	add	sp, #12
   15016:	e8bd 8140 	ldmia.w	sp!, {r6, r8, pc}
   1501a:	f003 fd03 	bl	18a24 <z_impl_k_uptime_get>
   1501e:	e7f9      	b.n	15014 <k_uptime_get+0x14>

00015020 <k_queue_get>:
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   15020:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
   15024:	4602      	mov	r2, r0
	return z_arch_is_user_context();
   15026:	f7ff ffe0 	bl	14fea <z_arch_is_user_context>
   1502a:	b120      	cbz	r0, 15036 <k_queue_get+0x16>
	register u32_t ret __asm__("r0") = arg1;
   1502c:	4610      	mov	r0, r2
	register u32_t r6 __asm__("r6") = call_id;
   1502e:	2654      	movs	r6, #84	; 0x54
	__asm__ volatile("svc %[svid]\n"
   15030:	df03      	svc	3
   15032:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
   15036:	4610      	mov	r0, r2
   15038:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
   1503c:	f003 ba21 	b.w	18482 <z_impl_k_queue_get>

00015040 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   15040:	6983      	ldr	r3, [r0, #24]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   15042:	685b      	ldr	r3, [r3, #4]
   15044:	460a      	mov	r2, r1
   15046:	6819      	ldr	r1, [r3, #0]
   15048:	f7f6 bc12 	b.w	b870 <net_buf_alloc_len>

0001504c <net_buf_frag_last>:

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf);

	while (buf->frags) {
   1504c:	6803      	ldr	r3, [r0, #0]
   1504e:	b903      	cbnz	r3, 15052 <net_buf_frag_last+0x6>
		buf = buf->frags;
	}

	return buf;
}
   15050:	4770      	bx	lr
   15052:	4618      	mov	r0, r3
   15054:	e7fa      	b.n	1504c <net_buf_frag_last>

00015056 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	NET_BUF_ASSERT(parent);
	NET_BUF_ASSERT(frag);

	if (parent->frags) {
   15056:	6802      	ldr	r2, [r0, #0]
{
   15058:	b510      	push	{r4, lr}
	if (parent->frags) {
   1505a:	b11a      	cbz	r2, 15064 <net_buf_frag_insert+0xe>
   1505c:	460b      	mov	r3, r1
	while (buf->frags) {
   1505e:	681c      	ldr	r4, [r3, #0]
   15060:	b914      	cbnz	r4, 15068 <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   15062:	601a      	str	r2, [r3, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   15064:	6001      	str	r1, [r0, #0]
}
   15066:	bd10      	pop	{r4, pc}
	while (buf->frags) {
   15068:	4623      	mov	r3, r4
   1506a:	e7f8      	b.n	1505e <net_buf_frag_insert+0x8>

0001506c <net_buf_simple_add>:
	return buf->data + buf->len;
   1506c:	8883      	ldrh	r3, [r0, #4]
   1506e:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   15070:	4419      	add	r1, r3
   15072:	8081      	strh	r1, [r0, #4]
	return tail;
}
   15074:	18d0      	adds	r0, r2, r3
   15076:	4770      	bx	lr

00015078 <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   15078:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   1507c:	b923      	cbnz	r3, 15088 <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   1507e:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   15082:	f000 0001 	and.w	r0, r0, #1
   15086:	4770      	bx	lr
		return false;
   15088:	2000      	movs	r0, #0
}
   1508a:	4770      	bx	lr

0001508c <net_ipv6_is_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1508c:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1508e:	b942      	cbnz	r2, 150a2 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   15090:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   15092:	b933      	cbnz	r3, 150a2 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   15094:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   15096:	b922      	cbnz	r2, 150a2 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   15098:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1509a:	fab0 f080 	clz	r0, r0
   1509e:	0940      	lsrs	r0, r0, #5
   150a0:	4770      	bx	lr
   150a2:	2000      	movs	r0, #0
   150a4:	4770      	bx	lr

000150a6 <k_sem_take>:
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   150a6:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
   150aa:	4602      	mov	r2, r0
   150ac:	f7ff ffe4 	bl	15078 <z_arch_is_user_context>
   150b0:	b120      	cbz	r0, 150bc <k_sem_take+0x16>
	register u32_t ret __asm__("r0") = arg1;
   150b2:	4610      	mov	r0, r2
	register u32_t r6 __asm__("r6") = call_id;
   150b4:	265d      	movs	r6, #93	; 0x5d
	__asm__ volatile("svc %[svid]\n"
   150b6:	df03      	svc	3
   150b8:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
   150bc:	4610      	mov	r0, r2
   150be:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
   150c2:	f7fb b851 	b.w	10168 <z_impl_k_sem_take>

000150c6 <k_sem_init.constprop.35>:
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   150c6:	e92d 4150 	stmdb	sp!, {r4, r6, r8, lr}
   150ca:	4604      	mov	r4, r0
   150cc:	f7ff ffd4 	bl	15078 <z_arch_is_user_context>
   150d0:	b138      	cbz	r0, 150e2 <k_sem_init.constprop.35+0x1c>
	register u32_t ret __asm__("r0") = arg1;
   150d2:	4620      	mov	r0, r4
	register u32_t r1 __asm__("r1") = arg2;
   150d4:	2101      	movs	r1, #1
	register u32_t r2 __asm__("r2") = arg3;
   150d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	register u32_t r6 __asm__("r6") = call_id;
   150da:	265b      	movs	r6, #91	; 0x5b
	__asm__ volatile("svc %[svid]\n"
   150dc:	df03      	svc	3
   150de:	e8bd 8150 	ldmia.w	sp!, {r4, r6, r8, pc}
   150e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   150e6:	4620      	mov	r0, r4
   150e8:	2101      	movs	r1, #1
   150ea:	e8bd 4150 	ldmia.w	sp!, {r4, r6, r8, lr}
   150ee:	f003 bb3f 	b.w	18770 <z_impl_k_sem_init>

000150f2 <k_mutex_lock.constprop.38>:
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   150f2:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
   150f6:	4602      	mov	r2, r0
   150f8:	f7ff ffbe 	bl	15078 <z_arch_is_user_context>
   150fc:	b130      	cbz	r0, 1510c <k_mutex_lock.constprop.38+0x1a>
	register u32_t ret __asm__("r0") = arg1;
   150fe:	4610      	mov	r0, r2
	register u32_t r1 __asm__("r1") = arg2;
   15100:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	register u32_t r6 __asm__("r6") = call_id;
   15104:	2644      	movs	r6, #68	; 0x44
	__asm__ volatile("svc %[svid]\n"
   15106:	df03      	svc	3
   15108:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
   1510c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15110:	4610      	mov	r0, r2
   15112:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
   15116:	f7fa ba43 	b.w	f5a0 <z_impl_k_mutex_lock>

0001511a <k_mutex_unlock>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
   1511a:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
   1511e:	4602      	mov	r2, r0
   15120:	f7ff ffaa 	bl	15078 <z_arch_is_user_context>
   15124:	b120      	cbz	r0, 15130 <k_mutex_unlock+0x16>
	register u32_t ret __asm__("r0") = arg1;
   15126:	4610      	mov	r0, r2
	register u32_t r6 __asm__("r6") = call_id;
   15128:	2645      	movs	r6, #69	; 0x45
	__asm__ volatile("svc %[svid]\n"
   1512a:	df03      	svc	3
   1512c:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
   15130:	4610      	mov	r0, r2
   15132:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
   15136:	f7fa babf 	b.w	f6b8 <z_impl_k_mutex_unlock>

0001513a <k_sem_give>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   1513a:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
   1513e:	4602      	mov	r2, r0
   15140:	f7ff ff9a 	bl	15078 <z_arch_is_user_context>
   15144:	b120      	cbz	r0, 15150 <k_sem_give+0x16>
	register u32_t ret __asm__("r0") = arg1;
   15146:	4610      	mov	r0, r2
	register u32_t r6 __asm__("r6") = call_id;
   15148:	265a      	movs	r6, #90	; 0x5a
	__asm__ volatile("svc %[svid]\n"
   1514a:	df03      	svc	3
   1514c:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
   15150:	4610      	mov	r0, r2
   15152:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
   15156:	f7fa bfc1 	b.w	100dc <z_impl_k_sem_give>

0001515a <net_context_ref>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1515a:	1d03      	adds	r3, r0, #4
   1515c:	f3bf 8f5b 	dmb	ish
   15160:	e853 0f00 	ldrex	r0, [r3]
   15164:	1c42      	adds	r2, r0, #1
   15166:	e843 2100 	strex	r1, r2, [r3]
   1516a:	2900      	cmp	r1, #0
   1516c:	d1f8      	bne.n	15160 <net_context_ref+0x6>
   1516e:	f3bf 8f5b 	dmb	ish
}
   15172:	3001      	adds	r0, #1
   15174:	4770      	bx	lr

00015176 <net_context_unref>:
{
   15176:	b538      	push	{r3, r4, r5, lr}
   15178:	4604      	mov	r4, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1517a:	1d03      	adds	r3, r0, #4
   1517c:	f3bf 8f5b 	dmb	ish
   15180:	e853 0f00 	ldrex	r0, [r3]
   15184:	1e42      	subs	r2, r0, #1
   15186:	e843 2100 	strex	r1, r2, [r3]
   1518a:	2900      	cmp	r1, #0
   1518c:	d1f8      	bne.n	15180 <net_context_unref+0xa>
   1518e:	f3bf 8f5b 	dmb	ish
	if (old_rc != 1) {
   15192:	2801      	cmp	r0, #1
   15194:	d001      	beq.n	1519a <net_context_unref+0x24>
		return old_rc - 1;
   15196:	3801      	subs	r0, #1
}
   15198:	bd38      	pop	{r3, r4, r5, pc}
	k_mutex_lock(&context->lock, K_FOREVER);
   1519a:	f104 0508 	add.w	r5, r4, #8
   1519e:	4628      	mov	r0, r5
   151a0:	f7ff ffa7 	bl	150f2 <k_mutex_lock.constprop.38>
	if (context->conn_handler) {
   151a4:	6c20      	ldr	r0, [r4, #64]	; 0x40
   151a6:	b118      	cbz	r0, 151b0 <net_context_unref+0x3a>
		net_conn_unregister(context->conn_handler);
   151a8:	f7f8 fd6c 	bl	dc84 <net_conn_unregister>
		context->conn_handler = NULL;
   151ac:	2300      	movs	r3, #0
   151ae:	6423      	str	r3, [r4, #64]	; 0x40
	context->flags &= ~NET_CONTEXT_IN_USE;
   151b0:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   151b4:	f023 0307 	bic.w	r3, r3, #7
   151b8:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
   151bc:	f7ff ff5c 	bl	15078 <z_arch_is_user_context>
	k_mutex_unlock(&context->lock);
   151c0:	4628      	mov	r0, r5
   151c2:	f7ff ffaa 	bl	1511a <k_mutex_unlock>
   151c6:	2000      	movs	r0, #0
   151c8:	e7e6      	b.n	15198 <net_context_unref+0x22>

000151ca <net_context_bind>:
	if (context->conn_handler) {
   151ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
   151cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   151ce:	4606      	mov	r6, r0
   151d0:	460d      	mov	r5, r1
	if (context->conn_handler) {
   151d2:	2b00      	cmp	r3, #0
   151d4:	d148      	bne.n	15268 <net_context_bind+0x9e>
	if (addr->sa_family == AF_INET6) {
   151d6:	8809      	ldrh	r1, [r1, #0]
   151d8:	2902      	cmp	r1, #2
   151da:	d148      	bne.n	1526e <net_context_bind+0xa4>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   151dc:	2a17      	cmp	r2, #23
		struct net_if *iface = NULL;
   151de:	9301      	str	r3, [sp, #4]
		if (addrlen < sizeof(struct sockaddr_in6)) {
   151e0:	d945      	bls.n	1526e <net_context_bind+0xa4>
		if (net_ipv6_is_addr_mcast(&addr6->sin6_addr)) {
   151e2:	792b      	ldrb	r3, [r5, #4]
   151e4:	2bff      	cmp	r3, #255	; 0xff
   151e6:	f105 0404 	add.w	r4, r5, #4
   151ea:	d109      	bne.n	15200 <net_context_bind+0x36>
			maddr = net_if_ipv6_maddr_lookup(&addr6->sin6_addr,
   151ec:	a901      	add	r1, sp, #4
   151ee:	4620      	mov	r0, r4
   151f0:	f7f7 f954 	bl	c49c <net_if_ipv6_maddr_lookup>
			if (!maddr) {
   151f4:	b9e0      	cbnz	r0, 15230 <net_context_bind+0x66>
				return -ENOENT;
   151f6:	f06f 0201 	mvn.w	r2, #1
}
   151fa:	4610      	mov	r0, r2
   151fc:	b002      	add	sp, #8
   151fe:	bd70      	pop	{r4, r5, r6, pc}
		} else if (net_ipv6_is_addr_unspecified(&addr6->sin6_addr)) {
   15200:	4620      	mov	r0, r4
   15202:	f7ff ff43 	bl	1508c <net_ipv6_is_addr_unspecified>
   15206:	b170      	cbz	r0, 15226 <net_context_bind+0x5c>
			iface = net_if_ipv6_select_src_iface(
   15208:	f106 002c 	add.w	r0, r6, #44	; 0x2c
   1520c:	f7f7 fb18 	bl	c840 <net_if_ipv6_select_src_iface>
   15210:	9001      	str	r0, [sp, #4]
			ptr = (struct in6_addr *)net_ipv6_unspecified_address();
   15212:	f7f7 fd9d 	bl	cd50 <net_ipv6_unspecified_address>
   15216:	4604      	mov	r4, r0
		if (!iface) {
   15218:	9801      	ldr	r0, [sp, #4]
   1521a:	b958      	cbnz	r0, 15234 <net_context_bind+0x6a>
   1521c:	f7ff ff2c 	bl	15078 <z_arch_is_user_context>
			return -EADDRNOTAVAIL;
   15220:	f06f 027c 	mvn.w	r2, #124	; 0x7c
   15224:	e7e9      	b.n	151fa <net_context_bind+0x30>
			ifaddr = net_if_ipv6_addr_lookup(&addr6->sin6_addr,
   15226:	a901      	add	r1, sp, #4
   15228:	4620      	mov	r0, r4
   1522a:	f7f6 feef 	bl	c00c <net_if_ipv6_addr_lookup>
   1522e:	e7e1      	b.n	151f4 <net_context_bind+0x2a>
			ptr = &ifaddr->address.in6_addr;
   15230:	1d04      	adds	r4, r0, #4
   15232:	e7f1      	b.n	15218 <net_context_bind+0x4e>
	context->iface = net_if_get_by_iface(iface);
   15234:	f7f7 fb48 	bl	c8c8 <net_if_get_by_iface>
   15238:	f886 0080 	strb.w	r0, [r6, #128]	; 0x80
		if (addr6->sin6_port) {
   1523c:	8869      	ldrh	r1, [r5, #2]
		net_sin6_ptr(&context->local)->sin6_addr = ptr;
   1523e:	6234      	str	r4, [r6, #32]
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   15240:	2002      	movs	r0, #2
   15242:	83b0      	strh	r0, [r6, #28]
		if (addr6->sin6_port) {
   15244:	b169      	cbz	r1, 15262 <net_context_bind+0x98>
			ret = check_used_port(AF_INET6, addr6->sin6_port,
   15246:	462a      	mov	r2, r5
   15248:	f7f6 fbb2 	bl	b9b0 <check_used_port>
			if (!ret) {
   1524c:	4602      	mov	r2, r0
   1524e:	b928      	cbnz	r0, 1525c <net_context_bind+0x92>
				net_sin6_ptr(&context->local)->sin6_port =
   15250:	886b      	ldrh	r3, [r5, #2]
   15252:	83f3      	strh	r3, [r6, #30]
   15254:	f7ff ff10 	bl	15078 <z_arch_is_user_context>
		return 0;
   15258:	2200      	movs	r2, #0
   1525a:	e7ce      	b.n	151fa <net_context_bind+0x30>
   1525c:	f7ff ff0c 	bl	15078 <z_arch_is_user_context>
				return ret;
   15260:	e7cb      	b.n	151fa <net_context_bind+0x30>
			addr6->sin6_port =
   15262:	8bf3      	ldrh	r3, [r6, #30]
   15264:	806b      	strh	r3, [r5, #2]
   15266:	e7f5      	b.n	15254 <net_context_bind+0x8a>
		return -EISCONN;
   15268:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1526c:	e7c5      	b.n	151fa <net_context_bind+0x30>
	return -EINVAL;
   1526e:	f06f 0215 	mvn.w	r2, #21
   15272:	e7c2      	b.n	151fa <net_context_bind+0x30>

00015274 <bind_default>:
{
   15274:	b570      	push	{r4, r5, r6, lr}
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
   15276:	f8b0 307e 	ldrh.w	r3, [r0, #126]	; 0x7e
	if (family == AF_INET6) {
   1527a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1527e:	2b02      	cmp	r3, #2
{
   15280:	b086      	sub	sp, #24
   15282:	4604      	mov	r4, r0
	if (family == AF_INET6) {
   15284:	d120      	bne.n	152c8 <bind_default+0x54>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   15286:	6a02      	ldr	r2, [r0, #32]
   15288:	b9e2      	cbnz	r2, 152c4 <bind_default+0x50>
		addr6.sin6_family = AF_INET6;
   1528a:	f8ad 3000 	strh.w	r3, [sp]
		memcpy(&addr6.sin6_addr, net_ipv6_unspecified_address(),
   1528e:	f7f7 fd5f 	bl	cd50 <net_ipv6_unspecified_address>
   15292:	ad01      	add	r5, sp, #4
   15294:	4603      	mov	r3, r0
   15296:	f100 0610 	add.w	r6, r0, #16
   1529a:	6818      	ldr	r0, [r3, #0]
   1529c:	6859      	ldr	r1, [r3, #4]
   1529e:	462a      	mov	r2, r5
   152a0:	c203      	stmia	r2!, {r0, r1}
   152a2:	3308      	adds	r3, #8
   152a4:	42b3      	cmp	r3, r6
   152a6:	4615      	mov	r5, r2
   152a8:	d1f7      	bne.n	1529a <bind_default+0x26>
			find_available_port(context,
   152aa:	4669      	mov	r1, sp
   152ac:	4620      	mov	r0, r4
   152ae:	f7f6 fbaf 	bl	ba10 <find_available_port>
		return net_context_bind(context, (struct sockaddr *)&addr6,
   152b2:	2218      	movs	r2, #24
		addr6.sin6_port =
   152b4:	f8ad 0002 	strh.w	r0, [sp, #2]
		return net_context_bind(context, (struct sockaddr *)&addr6,
   152b8:	4669      	mov	r1, sp
   152ba:	4620      	mov	r0, r4
   152bc:	f7ff ff85 	bl	151ca <net_context_bind>
}
   152c0:	b006      	add	sp, #24
   152c2:	bd70      	pop	{r4, r5, r6, pc}
			return 0;
   152c4:	2000      	movs	r0, #0
   152c6:	e7fb      	b.n	152c0 <bind_default+0x4c>
	return -EINVAL;
   152c8:	f06f 0015 	mvn.w	r0, #21
   152cc:	e7f8      	b.n	152c0 <bind_default+0x4c>

000152ce <net_context_listen>:
	if (!net_context_is_used(context)) {
   152ce:	f8b0 307e 	ldrh.w	r3, [r0, #126]	; 0x7e
   152d2:	07db      	lsls	r3, r3, #31
{
   152d4:	b510      	push	{r4, lr}
	if (!net_context_is_used(context)) {
   152d6:	d50a      	bpl.n	152ee <net_context_listen+0x20>
	k_mutex_lock(&context->lock, K_FOREVER);
   152d8:	f100 0408 	add.w	r4, r0, #8
   152dc:	4620      	mov	r0, r4
   152de:	f7ff ff08 	bl	150f2 <k_mutex_lock.constprop.38>
	k_mutex_unlock(&context->lock);
   152e2:	4620      	mov	r0, r4
   152e4:	f7ff ff19 	bl	1511a <k_mutex_unlock>
	return -EOPNOTSUPP;
   152e8:	f06f 005e 	mvn.w	r0, #94	; 0x5e
}
   152ec:	bd10      	pop	{r4, pc}
		return -EBADF;
   152ee:	f06f 0008 	mvn.w	r0, #8
   152f2:	e7fb      	b.n	152ec <net_context_listen+0x1e>

000152f4 <net_context_create_ipv6_new>:
{
   152f4:	b570      	push	{r4, r5, r6, lr}
   152f6:	460c      	mov	r4, r1
   152f8:	4606      	mov	r6, r0
   152fa:	461d      	mov	r5, r3
	if (!src) {
   152fc:	4611      	mov	r1, r2
   152fe:	b902      	cbnz	r2, 15302 <net_context_create_ipv6_new+0xe>
		src = ((struct sockaddr_in6_ptr *)&context->local)->sin6_addr;
   15300:	6a01      	ldr	r1, [r0, #32]
	if (net_ipv6_is_addr_unspecified(src)
   15302:	4608      	mov	r0, r1
   15304:	f7ff fec2 	bl	1508c <net_ipv6_is_addr_unspecified>
   15308:	b910      	cbnz	r0, 15310 <net_context_create_ipv6_new+0x1c>
	    || net_ipv6_is_addr_mcast(src)) {
   1530a:	780b      	ldrb	r3, [r1, #0]
   1530c:	2bff      	cmp	r3, #255	; 0xff
   1530e:	d104      	bne.n	1531a <net_context_create_ipv6_new+0x26>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   15310:	4629      	mov	r1, r5
   15312:	6a60      	ldr	r0, [r4, #36]	; 0x24
   15314:	f7f7 fa52 	bl	c7bc <net_if_ipv6_select_src_addr>
   15318:	4601      	mov	r1, r0
	net_pkt_set_ipv6_hop_limit(pkt,
   1531a:	f896 3081 	ldrb.w	r3, [r6, #129]	; 0x81
	pkt->ipv6_hop_limit = hop_limit;
   1531e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	return net_ipv6_create(pkt, src, dst);
   15322:	462a      	mov	r2, r5
   15324:	4620      	mov	r0, r4
}
   15326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_ipv6_create(pkt, src, dst);
   1532a:	f001 bce0 	b.w	16cee <net_ipv6_create>

0001532e <context_sendto.isra.34>:
static int context_sendto(struct net_context *context,
   1532e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15332:	4699      	mov	r9, r3
	if (!net_context_is_used(context)) {
   15334:	f8b0 307e 	ldrh.w	r3, [r0, #126]	; 0x7e
static int context_sendto(struct net_context *context,
   15338:	4617      	mov	r7, r2
	if (!net_context_is_used(context)) {
   1533a:	07da      	lsls	r2, r3, #31
static int context_sendto(struct net_context *context,
   1533c:	4605      	mov	r5, r0
   1533e:	4688      	mov	r8, r1
	if (!net_context_is_used(context)) {
   15340:	f140 8086 	bpl.w	15450 <context_sendto.isra.34+0x122>
	if (!dst_addr &&
   15344:	f1b9 0f00 	cmp.w	r9, #0
   15348:	d00d      	beq.n	15366 <context_sendto.isra.34+0x38>
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   1534a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1534e:	2b02      	cmp	r3, #2
   15350:	d10c      	bne.n	1536c <context_sendto.isra.34+0x3e>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   15352:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15354:	2b17      	cmp	r3, #23
   15356:	d90b      	bls.n	15370 <context_sendto.isra.34+0x42>
		if (net_ipv6_is_addr_unspecified(&addr6->sin6_addr)) {
   15358:	f109 0b04 	add.w	fp, r9, #4
   1535c:	4658      	mov	r0, fp
   1535e:	f7ff fe95 	bl	1508c <net_ipv6_is_addr_unspecified>
   15362:	4604      	mov	r4, r0
   15364:	b138      	cbz	r0, 15376 <context_sendto.isra.34+0x48>
		return -EDESTADDRREQ;
   15366:	f06f 0478 	mvn.w	r4, #120	; 0x78
   1536a:	e05f      	b.n	1542c <context_sendto.isra.34+0xfe>
   1536c:	f7ff fe84 	bl	15078 <z_arch_is_user_context>
			return -EINVAL;
   15370:	f06f 0415 	mvn.w	r4, #21
   15374:	e05a      	b.n	1542c <context_sendto.isra.34+0xfe>
	return net_if_get_by_index(context->iface);
   15376:	f995 0080 	ldrsb.w	r0, [r5, #128]	; 0x80
   1537a:	f7f7 fa93 	bl	c8a4 <net_if_get_by_index>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
   1537e:	f8b5 207e 	ldrh.w	r2, [r5, #126]	; 0x7e
	pkt = net_pkt_alloc_with_buffer(net_context_get_iface(context), len,
   15382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   15386:	9300      	str	r3, [sp, #0]
   15388:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   1538c:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
   15390:	4639      	mov	r1, r7
   15392:	f7f7 fbc1 	bl	cb18 <net_pkt_alloc_with_buffer>
	if (pkt) {
   15396:	4606      	mov	r6, r0
   15398:	2800      	cmp	r0, #0
   1539a:	d05c      	beq.n	15456 <context_sendto.isra.34+0x128>
	pkt->context = ctx;
   1539c:	6205      	str	r5, [r0, #32]
	tmp_len = net_pkt_available_payload_buffer(
   1539e:	f895 107c 	ldrb.w	r1, [r5, #124]	; 0x7c
   153a2:	f000 ff69 	bl	16278 <net_pkt_available_payload_buffer>
	context->send_cb = cb;
   153a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   153a8:	64ab      	str	r3, [r5, #72]	; 0x48
	context->user_data = user_data;
   153aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   153ac:	602b      	str	r3, [r5, #0]
	} else if (IS_ENABLED(CONFIG_NET_UDP) &&
   153ae:	f8b5 307c 	ldrh.w	r3, [r5, #124]	; 0x7c
   153b2:	2b11      	cmp	r3, #17
	tmp_len = net_pkt_available_payload_buffer(
   153b4:	4682      	mov	sl, r0
	} else if (IS_ENABLED(CONFIG_NET_UDP) &&
   153b6:	d143      	bne.n	15440 <context_sendto.isra.34+0x112>
   153b8:	f8b5 307e 	ldrh.w	r3, [r5, #126]	; 0x7e
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   153bc:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   153c0:	2b02      	cmp	r3, #2
   153c2:	d142      	bne.n	1544a <context_sendto.isra.34+0x11c>
		ret = net_context_create_ipv6_new(context, pkt,
   153c4:	4622      	mov	r2, r4
   153c6:	465b      	mov	r3, fp
   153c8:	4631      	mov	r1, r6
   153ca:	4628      	mov	r0, r5
		dst_port = addr6->sin6_port;
   153cc:	f8b9 9002 	ldrh.w	r9, [r9, #2]
		ret = net_context_create_ipv6_new(context, pkt,
   153d0:	f7ff ff90 	bl	152f4 <net_context_create_ipv6_new>
	if (ret < 0) {
   153d4:	1e04      	subs	r4, r0, #0
   153d6:	db2f      	blt.n	15438 <context_sendto.isra.34+0x10a>
   153d8:	4557      	cmp	r7, sl
	ret = bind_default(context);
   153da:	4628      	mov	r0, r5
   153dc:	bf28      	it	cs
   153de:	4657      	movcs	r7, sl
   153e0:	f7ff ff48 	bl	15274 <bind_default>
	if (ret) {
   153e4:	4604      	mov	r4, r0
   153e6:	bb28      	cbnz	r0, 15434 <context_sendto.isra.34+0x106>
	ret = net_udp_create(pkt,
   153e8:	464a      	mov	r2, r9
   153ea:	8be9      	ldrh	r1, [r5, #30]
   153ec:	4630      	mov	r0, r6
   153ee:	f002 fd80 	bl	17ef2 <net_udp_create>
	if (ret) {
   153f2:	4604      	mov	r4, r0
   153f4:	b9f0      	cbnz	r0, 15434 <context_sendto.isra.34+0x106>
	ret = net_pkt_write(pkt, buf, len);
   153f6:	463a      	mov	r2, r7
   153f8:	4641      	mov	r1, r8
   153fa:	4630      	mov	r0, r6
   153fc:	f001 f8ca 	bl	16594 <net_pkt_write>
	if (ret) {
   15400:	4604      	mov	r4, r0
   15402:	b9b8      	cbnz	r0, 15434 <context_sendto.isra.34+0x106>
	net_pkt_cursor_init(pkt);
   15404:	4630      	mov	r0, r6
   15406:	f000 ff75 	bl	162f4 <net_pkt_cursor_init>
   1540a:	f8b5 307e 	ldrh.w	r3, [r5, #126]	; 0x7e
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   1540e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   15412:	2b02      	cmp	r3, #2
   15414:	d104      	bne.n	15420 <context_sendto.isra.34+0xf2>
		net_ipv6_finalize(pkt, net_context_get_ip_proto(context));
   15416:	f895 107c 	ldrb.w	r1, [r5, #124]	; 0x7c
   1541a:	4630      	mov	r0, r6
   1541c:	f001 fccb 	bl	16db6 <net_ipv6_finalize>
		ret = net_send_data(pkt);
   15420:	4630      	mov	r0, r6
   15422:	f000 f96b 	bl	156fc <net_send_data>
	if (ret < 0) {
   15426:	1e04      	subs	r4, r0, #0
   15428:	db06      	blt.n	15438 <context_sendto.isra.34+0x10a>
	return len;
   1542a:	463c      	mov	r4, r7
}
   1542c:	4620      	mov	r0, r4
   1542e:	b003      	add	sp, #12
   15430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ret < 0) {
   15434:	2c00      	cmp	r4, #0
   15436:	dae5      	bge.n	15404 <context_sendto.isra.34+0xd6>
	net_pkt_unref(pkt);
   15438:	4630      	mov	r0, r6
   1543a:	f000 fee5 	bl	16208 <net_pkt_unref>
	return ret;
   1543e:	e7f5      	b.n	1542c <context_sendto.isra.34+0xfe>
   15440:	f7ff fe1a 	bl	15078 <z_arch_is_user_context>
		ret = -EPROTONOSUPPORT;
   15444:	f06f 047a 	mvn.w	r4, #122	; 0x7a
   15448:	e7f6      	b.n	15438 <context_sendto.isra.34+0x10a>
	int ret = -EINVAL;
   1544a:	f06f 0415 	mvn.w	r4, #21
   1544e:	e7f3      	b.n	15438 <context_sendto.isra.34+0x10a>
		return -EBADF;
   15450:	f06f 0408 	mvn.w	r4, #8
   15454:	e7ea      	b.n	1542c <context_sendto.isra.34+0xfe>
		return -ENOMEM;
   15456:	f06f 040b 	mvn.w	r4, #11
   1545a:	e7e7      	b.n	1542c <context_sendto.isra.34+0xfe>

0001545c <net_context_connect>:
{
   1545c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15460:	4604      	mov	r4, r0
	k_mutex_lock(&context->lock, K_FOREVER);
   15462:	f100 0608 	add.w	r6, r0, #8
   15466:	4630      	mov	r0, r6
{
   15468:	461f      	mov	r7, r3
   1546a:	4688      	mov	r8, r1
   1546c:	4691      	mov	r9, r2
	k_mutex_lock(&context->lock, K_FOREVER);
   1546e:	f7ff fe40 	bl	150f2 <k_mutex_lock.constprop.38>
	if (!net_context_is_used(context)) {
   15472:	f8b4 507e 	ldrh.w	r5, [r4, #126]	; 0x7e
   15476:	07eb      	lsls	r3, r5, #31
   15478:	d550      	bpl.n	1551c <net_context_connect+0xc0>
	if (addr->sa_family != net_context_get_family(context)) {
   1547a:	f8b8 1000 	ldrh.w	r1, [r8]
   1547e:	f3c5 03c2 	ubfx	r3, r5, #3, #3
   15482:	4299      	cmp	r1, r3
   15484:	d150      	bne.n	15528 <net_context_connect+0xcc>
	if (net_context_get_state(context) == NET_CONTEXT_LISTENING) {
   15486:	f3c5 0341 	ubfx	r3, r5, #1, #2
   1548a:	2b03      	cmp	r3, #3
   1548c:	d049      	beq.n	15522 <net_context_connect+0xc6>
	if (net_context_get_family(context) == AF_INET6) {
   1548e:	2902      	cmp	r1, #2
   15490:	d14a      	bne.n	15528 <net_context_connect+0xcc>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   15492:	f1b9 0f17 	cmp.w	r9, #23
   15496:	d947      	bls.n	15528 <net_context_connect+0xcc>
		if (net_context_get_ip_proto(context) == IPPROTO_TCP &&
   15498:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
   1549c:	2b06      	cmp	r3, #6
   1549e:	d103      	bne.n	154a8 <net_context_connect+0x4c>
   154a0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   154a4:	2bff      	cmp	r3, #255	; 0xff
   154a6:	d042      	beq.n	1552e <net_context_connect+0xd2>
		memcpy(&addr6->sin6_addr, &net_sin6(addr)->sin6_addr,
   154a8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   154ac:	f108 0304 	add.w	r3, r8, #4
   154b0:	4602      	mov	r2, r0
   154b2:	f108 0114 	add.w	r1, r8, #20
   154b6:	f853 cb04 	ldr.w	ip, [r3], #4
   154ba:	f842 cb04 	str.w	ip, [r2], #4
   154be:	428b      	cmp	r3, r1
   154c0:	d1f9      	bne.n	154b6 <net_context_connect+0x5a>
		addr6->sin6_port = net_sin6(addr)->sin6_port;
   154c2:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   154c6:	8563      	strh	r3, [r4, #42]	; 0x2a
		addr6->sin6_family = AF_INET6;
   154c8:	2302      	movs	r3, #2
   154ca:	8523      	strh	r3, [r4, #40]	; 0x28
		if (!net_ipv6_is_addr_unspecified(&addr6->sin6_addr)) {
   154cc:	f7ff fdde 	bl	1508c <net_ipv6_is_addr_unspecified>
   154d0:	bb00      	cbnz	r0, 15514 <net_context_connect+0xb8>
			context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
   154d2:	f445 7580 	orr.w	r5, r5, #256	; 0x100
   154d6:	f8a4 507e 	strh.w	r5, [r4, #126]	; 0x7e
		ret = bind_default(context);
   154da:	4620      	mov	r0, r4
   154dc:	f7ff feca 	bl	15274 <bind_default>
		if (ret) {
   154e0:	4605      	mov	r5, r0
   154e2:	b988      	cbnz	r0, 15508 <net_context_connect+0xac>
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   154e4:	2302      	movs	r3, #2
   154e6:	83a3      	strh	r3, [r4, #28]
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   154e8:	6a23      	ldr	r3, [r4, #32]
   154ea:	2b00      	cmp	r3, #0
   154ec:	d0ff      	beq.n	154ee <net_context_connect+0x92>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   154ee:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   154f2:	f3c3 1381 	ubfx	r3, r3, #6, #2
	switch (net_context_get_type(context)) {
   154f6:	2b01      	cmp	r3, #1
   154f8:	d01c      	beq.n	15534 <net_context_connect+0xd8>
   154fa:	2b02      	cmp	r3, #2
   154fc:	d11d      	bne.n	1553a <net_context_connect+0xde>
		if (cb) {
   154fe:	b11f      	cbz	r7, 15508 <net_context_connect+0xac>
			cb(context, 0, user_data);
   15500:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15502:	2100      	movs	r1, #0
   15504:	4620      	mov	r0, r4
   15506:	47b8      	blx	r7
	k_mutex_unlock(&context->lock);
   15508:	4630      	mov	r0, r6
   1550a:	f7ff fe06 	bl	1511a <k_mutex_unlock>
}
   1550e:	4628      	mov	r0, r5
   15510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
   15514:	f425 7580 	bic.w	r5, r5, #256	; 0x100
   15518:	b2ad      	uxth	r5, r5
   1551a:	e7dc      	b.n	154d6 <net_context_connect+0x7a>
		ret = -EBADF;
   1551c:	f06f 0508 	mvn.w	r5, #8
   15520:	e7f2      	b.n	15508 <net_context_connect+0xac>
		ret = -EOPNOTSUPP;
   15522:	f06f 055e 	mvn.w	r5, #94	; 0x5e
   15526:	e7ef      	b.n	15508 <net_context_connect+0xac>
		ret = -EINVAL;
   15528:	f06f 0515 	mvn.w	r5, #21
   1552c:	e7ec      	b.n	15508 <net_context_connect+0xac>
			ret = -EADDRNOTAVAIL;
   1552e:	f06f 057c 	mvn.w	r5, #124	; 0x7c
   15532:	e7e9      	b.n	15508 <net_context_connect+0xac>
		ret = net_tcp_connect(context, addr, laddr, rport, lport,
   15534:	f06f 057a 	mvn.w	r5, #122	; 0x7a
   15538:	e7e6      	b.n	15508 <net_context_connect+0xac>
		ret = -ENOTSUP;
   1553a:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1553e:	e7e3      	b.n	15508 <net_context_connect+0xac>

00015540 <net_context_accept>:
{
   15540:	b538      	push	{r3, r4, r5, lr}
	if (!net_context_is_used(context)) {
   15542:	f8b0 307e 	ldrh.w	r3, [r0, #126]	; 0x7e
   15546:	07db      	lsls	r3, r3, #31
{
   15548:	4604      	mov	r4, r0
	if (!net_context_is_used(context)) {
   1554a:	d51f      	bpl.n	1558c <net_context_accept+0x4c>
	k_mutex_lock(&context->lock, K_FOREVER);
   1554c:	f100 0508 	add.w	r5, r0, #8
   15550:	4628      	mov	r0, r5
   15552:	f7ff fdce 	bl	150f2 <k_mutex_lock.constprop.38>
	if ((net_context_get_state(context) != NET_CONTEXT_LISTENING) &&
   15556:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   1555a:	f3c3 0241 	ubfx	r2, r3, #1, #2
   1555e:	2a03      	cmp	r2, #3
   15560:	d00c      	beq.n	1557c <net_context_accept+0x3c>
   15562:	f3c3 1381 	ubfx	r3, r3, #6, #2
   15566:	2b01      	cmp	r3, #1
   15568:	d008      	beq.n	1557c <net_context_accept+0x3c>
   1556a:	f7ff fd85 	bl	15078 <z_arch_is_user_context>
		ret = -EINVAL;
   1556e:	f06f 0415 	mvn.w	r4, #21
	k_mutex_unlock(&context->lock);
   15572:	4628      	mov	r0, r5
   15574:	f7ff fdd1 	bl	1511a <k_mutex_unlock>
}
   15578:	4620      	mov	r0, r4
   1557a:	bd38      	pop	{r3, r4, r5, pc}
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1557c:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
		ret = net_tcp_accept(context, cb, user_data);
   15580:	2b06      	cmp	r3, #6
   15582:	bf14      	ite	ne
   15584:	2400      	movne	r4, #0
   15586:	f06f 047a 	mvneq.w	r4, #122	; 0x7a
   1558a:	e7f2      	b.n	15572 <net_context_accept+0x32>
		return -EBADF;
   1558c:	f06f 0408 	mvn.w	r4, #8
   15590:	e7f2      	b.n	15578 <net_context_accept+0x38>

00015592 <net_context_send>:
{
   15592:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   15596:	4604      	mov	r4, r0
	k_mutex_lock(&context->lock, K_FOREVER);
   15598:	f100 0508 	add.w	r5, r0, #8
   1559c:	4628      	mov	r0, r5
{
   1559e:	4698      	mov	r8, r3
   155a0:	460e      	mov	r6, r1
   155a2:	4617      	mov	r7, r2
	k_mutex_lock(&context->lock, K_FOREVER);
   155a4:	f7ff fda5 	bl	150f2 <k_mutex_lock.constprop.38>
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   155a8:	f8b4 007e 	ldrh.w	r0, [r4, #126]	; 0x7e
   155ac:	05c3      	lsls	r3, r0, #23
   155ae:	d51a      	bpl.n	155e6 <net_context_send+0x54>
   155b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   155b2:	b1c3      	cbz	r3, 155e6 <net_context_send+0x54>
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   155b4:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   155b8:	2802      	cmp	r0, #2
	ret = context_sendto(context, buf, len, &context->remote,
   155ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		addrlen = 0;
   155bc:	bf0c      	ite	eq
   155be:	2218      	moveq	r2, #24
   155c0:	2200      	movne	r2, #0
	ret = context_sendto(context, buf, len, &context->remote,
   155c2:	e9cd 8301 	strd	r8, r3, [sp, #4]
   155c6:	9200      	str	r2, [sp, #0]
   155c8:	f104 0328 	add.w	r3, r4, #40	; 0x28
   155cc:	4620      	mov	r0, r4
   155ce:	463a      	mov	r2, r7
   155d0:	4631      	mov	r1, r6
   155d2:	f7ff feac 	bl	1532e <context_sendto.isra.34>
   155d6:	4604      	mov	r4, r0
	k_mutex_unlock(&context->lock);
   155d8:	4628      	mov	r0, r5
   155da:	f7ff fd9e 	bl	1511a <k_mutex_unlock>
}
   155de:	4620      	mov	r0, r4
   155e0:	b004      	add	sp, #16
   155e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = -EDESTADDRREQ;
   155e6:	f06f 0478 	mvn.w	r4, #120	; 0x78
   155ea:	e7f5      	b.n	155d8 <net_context_send+0x46>

000155ec <net_context_sendto>:
{
   155ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	k_mutex_lock(&context->lock, K_FOREVER);
   155f0:	f100 0408 	add.w	r4, r0, #8
{
   155f4:	4605      	mov	r5, r0
	k_mutex_lock(&context->lock, K_FOREVER);
   155f6:	4620      	mov	r0, r4
{
   155f8:	4698      	mov	r8, r3
   155fa:	460e      	mov	r6, r1
   155fc:	4617      	mov	r7, r2
	k_mutex_lock(&context->lock, K_FOREVER);
   155fe:	f7ff fd78 	bl	150f2 <k_mutex_lock.constprop.38>
	ret = context_sendto(context, buf, len, dst_addr, addrlen,
   15602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15604:	9302      	str	r3, [sp, #8]
   15606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15608:	9301      	str	r3, [sp, #4]
   1560a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1560c:	9300      	str	r3, [sp, #0]
   1560e:	463a      	mov	r2, r7
   15610:	4643      	mov	r3, r8
   15612:	4631      	mov	r1, r6
   15614:	4628      	mov	r0, r5
   15616:	f7ff fe8a 	bl	1532e <context_sendto.isra.34>
   1561a:	4605      	mov	r5, r0
	k_mutex_unlock(&context->lock);
   1561c:	4620      	mov	r0, r4
   1561e:	f7ff fd7c 	bl	1511a <k_mutex_unlock>
}
   15622:	4628      	mov	r0, r5
   15624:	b004      	add	sp, #16
   15626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001562a <net_context_update_recv_wnd>:
{
   1562a:	b510      	push	{r4, lr}
	k_mutex_lock(&context->lock, K_FOREVER);
   1562c:	f100 0408 	add.w	r4, r0, #8
   15630:	4620      	mov	r0, r4
   15632:	f7ff fd5e 	bl	150f2 <k_mutex_lock.constprop.38>
	k_mutex_unlock(&context->lock);
   15636:	4620      	mov	r0, r4
   15638:	f7ff fd6f 	bl	1511a <k_mutex_unlock>
}
   1563c:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   15640:	bd10      	pop	{r4, pc}

00015642 <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   15642:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   15646:	b923      	cbnz	r3, 15652 <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   15648:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   1564c:	f000 0001 	and.w	r0, r0, #1
   15650:	4770      	bx	lr
		return false;
   15652:	2000      	movs	r0, #0
}
   15654:	4770      	bx	lr

00015656 <net_ipv6_is_addr_loopback>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   15656:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   15658:	b94a      	cbnz	r2, 1566e <net_ipv6_is_addr_loopback+0x18>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1565a:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1565c:	b93b      	cbnz	r3, 1566e <net_ipv6_is_addr_loopback+0x18>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1565e:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   15660:	b92a      	cbnz	r2, 1566e <net_ipv6_is_addr_loopback+0x18>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   15662:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   15664:	f100 437f 	add.w	r3, r0, #4278190080	; 0xff000000
   15668:	4258      	negs	r0, r3
   1566a:	4158      	adcs	r0, r3
   1566c:	4770      	bx	lr
   1566e:	2000      	movs	r0, #0
   15670:	4770      	bx	lr

00015672 <processing_data>:

	return NET_DROP;
}

static void processing_data(struct net_pkt *pkt, bool is_loopback)
{
   15672:	b538      	push	{r3, r4, r5, lr}
	if (!pkt->frags) {
   15674:	6943      	ldr	r3, [r0, #20]
{
   15676:	4604      	mov	r4, r0
   15678:	460d      	mov	r5, r1
	if (!pkt->frags) {
   1567a:	b943      	cbnz	r3, 1568e <processing_data+0x1c>
   1567c:	f7ff ffe1 	bl	15642 <z_arch_is_user_context>
   15680:	f7ff ffdf 	bl	15642 <z_arch_is_user_context>
		NET_DBG("Consumed pkt %p", pkt);
		break;
	case NET_DROP:
	default:
		NET_DBG("Dropping pkt %p", pkt);
		net_pkt_unref(pkt);
   15684:	4620      	mov	r0, r4
		break;
	}
}
   15686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_pkt_unref(pkt);
   1568a:	f000 bdbd 	b.w	16208 <net_pkt_unref>
	if (!is_loopback && !locally_routed) {
   1568e:	b969      	cbnz	r1, 156ac <processing_data+0x3a>
		ret = net_if_recv_data(net_pkt_iface(pkt), pkt);
   15690:	4601      	mov	r1, r0
   15692:	6a40      	ldr	r0, [r0, #36]	; 0x24
   15694:	f000 fc2a 	bl	15eec <net_if_recv_data>
		if (ret != NET_CONTINUE) {
   15698:	2801      	cmp	r0, #1
   1569a:	d007      	beq.n	156ac <processing_data+0x3a>
			if (ret == NET_DROP) {
   1569c:	2802      	cmp	r0, #2
   1569e:	d0ed      	beq.n	1567c <processing_data+0xa>
	switch (process_data(pkt, is_loopback)) {
   156a0:	2800      	cmp	r0, #0
   156a2:	d1ed      	bne.n	15680 <processing_data+0xe>
}
   156a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   156a8:	f7ff bfcb 	b.w	15642 <z_arch_is_user_context>
	net_pkt_cursor_init(pkt);
   156ac:	4620      	mov	r0, r4
   156ae:	f000 fe21 	bl	162f4 <net_pkt_cursor_init>
	return pkt->frags->data;
   156b2:	6963      	ldr	r3, [r4, #20]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
   156b4:	689b      	ldr	r3, [r3, #8]
   156b6:	781b      	ldrb	r3, [r3, #0]
   156b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   156bc:	2b60      	cmp	r3, #96	; 0x60
   156be:	d1dd      	bne.n	1567c <processing_data+0xa>
		return net_ipv6_input(pkt, is_loopback);
   156c0:	4629      	mov	r1, r5
   156c2:	4620      	mov	r0, r4
   156c4:	f7f7 fb48 	bl	cd58 <net_ipv6_input>
   156c8:	e7ea      	b.n	156a0 <processing_data+0x2e>

000156ca <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   156ca:	b508      	push	{r3, lr}
   156cc:	f7ff ffb9 	bl	15642 <z_arch_is_user_context>
	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
   156d0:	f000 ffa7 	bl	16622 <net_pkt_init>

	net_context_init();
   156d4:	f7f6 fb72 	bl	bdbc <net_context_init>
	net_icmpv6_init();
   156d8:	f7f7 fab6 	bl	cc48 <net_icmpv6_init>
	net_ipv6_init();
   156dc:	f001 fbb1 	bl	16e42 <net_ipv6_init>
	net_conn_init();
   156e0:	f002 fbfc 	bl	17edc <net_conn_init>
	net_route_init();
   156e4:	f002 fbbc 	bl	17e60 <net_route_init>
   156e8:	f7ff ffab 	bl	15642 <z_arch_is_user_context>
	net_if_init();
   156ec:	f7f7 f8fe 	bl	c8ec <net_if_init>
	net_tc_rx_init();
   156f0:	f7f7 fa4e 	bl	cb90 <net_tc_rx_init>
	net_if_post_init();
   156f4:	f7f7 f94a 	bl	c98c <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   156f8:	2000      	movs	r0, #0
   156fa:	bd08      	pop	{r3, pc}

000156fc <net_send_data>:
{
   156fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pkt || !pkt->frags) {
   15700:	4604      	mov	r4, r0
{
   15702:	b090      	sub	sp, #64	; 0x40
	if (!pkt || !pkt->frags) {
   15704:	2800      	cmp	r0, #0
   15706:	f000 8097 	beq.w	15838 <net_send_data+0x13c>
   1570a:	6943      	ldr	r3, [r0, #20]
   1570c:	2b00      	cmp	r3, #0
   1570e:	f000 8093 	beq.w	15838 <net_send_data+0x13c>
	if (!net_pkt_iface(pkt)) {
   15712:	6a43      	ldr	r3, [r0, #36]	; 0x24
   15714:	2b00      	cmp	r3, #0
   15716:	f000 8092 	beq.w	1583e <net_send_data+0x142>
	net_pkt_trim_buffer(pkt);
   1571a:	f000 fdd1 	bl	162c0 <net_pkt_trim_buffer>
	net_pkt_cursor_init(pkt);
   1571e:	4620      	mov	r0, r4
   15720:	f000 fde8 	bl	162f4 <net_pkt_cursor_init>
	return pkt->family;
   15724:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
	if (net_pkt_family(pkt) == AF_INET6) {
   15728:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1572c:	2b02      	cmp	r3, #2
   1572e:	d179      	bne.n	15824 <net_send_data+0x128>
	return pkt->frags->data;
   15730:	6963      	ldr	r3, [r4, #20]
		if (net_ipv6_addr_cmp(&NET_IPV6_HDR(pkt)->dst,
   15732:	689d      	ldr	r5, [r3, #8]
   15734:	f7f7 fb0c 	bl	cd50 <net_ipv6_unspecified_address>
   15738:	3518      	adds	r5, #24
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1573a:	4601      	mov	r1, r0
   1573c:	2210      	movs	r2, #16
   1573e:	4628      	mov	r0, r5
   15740:	f7ec fe0e 	bl	2360 <memcmp>
   15744:	b930      	cbnz	r0, 15754 <net_send_data+0x58>
   15746:	f7ff ff7c 	bl	15642 <z_arch_is_user_context>
			return -EADDRNOTAVAIL;
   1574a:	f06f 007c 	mvn.w	r0, #124	; 0x7c
}
   1574e:	b010      	add	sp, #64	; 0x40
   15750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15754:	6963      	ldr	r3, [r4, #20]
		if (net_ipv6_is_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   15756:	689d      	ldr	r5, [r3, #8]
   15758:	3518      	adds	r5, #24
   1575a:	4628      	mov	r0, r5
   1575c:	f7ff ff7b 	bl	15656 <net_ipv6_is_addr_loopback>
   15760:	4601      	mov	r1, r0
   15762:	2800      	cmp	r0, #0
   15764:	d049      	beq.n	157fa <net_send_data+0xfe>
   15766:	6963      	ldr	r3, [r4, #20]
			net_ipaddr_copy(&addr, &NET_IPV6_HDR(pkt)->src);
   15768:	689a      	ldr	r2, [r3, #8]
   1576a:	ae0c      	add	r6, sp, #48	; 0x30
   1576c:	f102 0308 	add.w	r3, r2, #8
   15770:	4635      	mov	r5, r6
   15772:	3218      	adds	r2, #24
   15774:	6818      	ldr	r0, [r3, #0]
   15776:	6859      	ldr	r1, [r3, #4]
   15778:	4637      	mov	r7, r6
   1577a:	c703      	stmia	r7!, {r0, r1}
   1577c:	3308      	adds	r3, #8
   1577e:	4293      	cmp	r3, r2
   15780:	463e      	mov	r6, r7
   15782:	d1f7      	bne.n	15774 <net_send_data+0x78>
   15784:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   15788:	466e      	mov	r6, sp
   1578a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1578e:	6963      	ldr	r3, [r4, #20]
   15790:	689b      	ldr	r3, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   15792:	af08      	add	r7, sp, #32
   15794:	f103 0218 	add.w	r2, r3, #24
   15798:	f103 0828 	add.w	r8, r3, #40	; 0x28
   1579c:	46bc      	mov	ip, r7
   1579e:	6810      	ldr	r0, [r2, #0]
   157a0:	6851      	ldr	r1, [r2, #4]
   157a2:	46be      	mov	lr, r7
   157a4:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   157a8:	3208      	adds	r2, #8
   157aa:	4542      	cmp	r2, r8
   157ac:	4677      	mov	r7, lr
   157ae:	d1f6      	bne.n	1579e <net_send_data+0xa2>
   157b0:	4667      	mov	r7, ip
   157b2:	3308      	adds	r3, #8
   157b4:	463a      	mov	r2, r7
   157b6:	ca03      	ldmia	r2!, {r0, r1}
   157b8:	42aa      	cmp	r2, r5
   157ba:	6018      	str	r0, [r3, #0]
   157bc:	6059      	str	r1, [r3, #4]
   157be:	4617      	mov	r7, r2
   157c0:	f103 0308 	add.w	r3, r3, #8
   157c4:	d1f6      	bne.n	157b4 <net_send_data+0xb8>
   157c6:	6963      	ldr	r3, [r4, #20]
   157c8:	689f      	ldr	r7, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   157ca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   157ce:	ad04      	add	r5, sp, #16
   157d0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   157d4:	f107 0318 	add.w	r3, r7, #24
   157d8:	462a      	mov	r2, r5
   157da:	ca03      	ldmia	r2!, {r0, r1}
   157dc:	4562      	cmp	r2, ip
   157de:	6018      	str	r0, [r3, #0]
   157e0:	6059      	str	r1, [r3, #4]
   157e2:	4615      	mov	r5, r2
   157e4:	f103 0308 	add.w	r3, r3, #8
   157e8:	d1f6      	bne.n	157d8 <net_send_data+0xdc>
   157ea:	f7ff ff2a 	bl	15642 <z_arch_is_user_context>
		processing_data(pkt, true);
   157ee:	4620      	mov	r0, r4
   157f0:	2101      	movs	r1, #1
   157f2:	f7ff ff3e 	bl	15672 <processing_data>
		return 0;
   157f6:	2000      	movs	r0, #0
   157f8:	e7a9      	b.n	1574e <net_send_data+0x52>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   157fa:	4628      	mov	r0, r5
   157fc:	f7f6 fc06 	bl	c00c <net_if_ipv6_addr_lookup>
		if (net_ipv6_is_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   15800:	2800      	cmp	r0, #0
   15802:	d1b0      	bne.n	15766 <net_send_data+0x6a>
   15804:	6963      	ldr	r3, [r4, #20]
   15806:	6898      	ldr	r0, [r3, #8]
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
   15808:	7e03      	ldrb	r3, [r0, #24]
   1580a:	2bff      	cmp	r3, #255	; 0xff
   1580c:	d105      	bne.n	1581a <net_send_data+0x11e>
   1580e:	7e43      	ldrb	r3, [r0, #25]
   15810:	2b01      	cmp	r3, #1
   15812:	d102      	bne.n	1581a <net_send_data+0x11e>
   15814:	f7ff ff15 	bl	15642 <z_arch_is_user_context>
	if (status < 0) {
   15818:	e7e7      	b.n	157ea <net_send_data+0xee>
		if (net_ipv6_is_addr_loopback(&NET_IPV6_HDR(pkt)->src)) {
   1581a:	3008      	adds	r0, #8
   1581c:	f7ff ff1b 	bl	15656 <net_ipv6_is_addr_loopback>
   15820:	2800      	cmp	r0, #0
   15822:	d190      	bne.n	15746 <net_send_data+0x4a>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
   15824:	4621      	mov	r1, r4
   15826:	6a60      	ldr	r0, [r4, #36]	; 0x24
   15828:	f000 fb95 	bl	15f56 <net_if_send_data>
		return -EIO;
   1582c:	2802      	cmp	r0, #2
   1582e:	bf14      	ite	ne
   15830:	2000      	movne	r0, #0
   15832:	f06f 0004 	mvneq.w	r0, #4
   15836:	e78a      	b.n	1574e <net_send_data+0x52>
		return -ENODATA;
   15838:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1583c:	e787      	b.n	1574e <net_send_data+0x52>
		return -EINVAL;
   1583e:	f06f 0015 	mvn.w	r0, #21
   15842:	e784      	b.n	1574e <net_send_data+0x52>

00015844 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15844:	6803      	ldr	r3, [r0, #0]
   15846:	2200      	movs	r2, #0
   15848:	b90b      	cbnz	r3, 1584e <sys_slist_find_and_remove+0xa>
   1584a:	4618      	mov	r0, r3
   1584c:	4770      	bx	lr
   1584e:	428b      	cmp	r3, r1
   15850:	d110      	bne.n	15874 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   15852:	680b      	ldr	r3, [r1, #0]
   15854:	b942      	cbnz	r2, 15868 <sys_slist_find_and_remove+0x24>
   15856:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   15858:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1585a:	4291      	cmp	r1, r2
   1585c:	d100      	bne.n	15860 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   1585e:	6043      	str	r3, [r0, #4]
	parent->next = child;
   15860:	2300      	movs	r3, #0
   15862:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15864:	2001      	movs	r0, #1
   15866:	4770      	bx	lr
	parent->next = child;
   15868:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1586a:	6843      	ldr	r3, [r0, #4]
   1586c:	4299      	cmp	r1, r3
	list->tail = node;
   1586e:	bf08      	it	eq
   15870:	6042      	streq	r2, [r0, #4]
   15872:	e7f5      	b.n	15860 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15874:	461a      	mov	r2, r3
   15876:	681b      	ldr	r3, [r3, #0]
   15878:	e7e6      	b.n	15848 <sys_slist_find_and_remove+0x4>

0001587a <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   1587a:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   1587e:	b923      	cbnz	r3, 1588a <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   15880:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   15884:	f000 0001 	and.w	r0, r0, #1
   15888:	4770      	bx	lr
		return false;
   1588a:	2000      	movs	r0, #0
}
   1588c:	4770      	bx	lr

0001588e <net_context_send_cb>:
	if (!context) {
   1588e:	b118      	cbz	r0, 15898 <net_context_send_cb+0xa>
	if (context->send_cb) {
   15890:	6c83      	ldr	r3, [r0, #72]	; 0x48
   15892:	b10b      	cbz	r3, 15898 <net_context_send_cb+0xa>
		context->send_cb(context, status, context->user_data);
   15894:	6802      	ldr	r2, [r0, #0]
   15896:	4718      	bx	r3
}
   15898:	4770      	bx	lr

0001589a <ipv6_router_expired>:
{
   1589a:	b508      	push	{r3, lr}
   1589c:	4602      	mov	r2, r0
   1589e:	f7ff ffec 	bl	1587a <z_arch_is_user_context>
	router->is_used = false;
   158a2:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
   158a6:	f36f 0300 	bfc	r3, #0, #1
   158aa:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
}
   158ae:	bd08      	pop	{r3, pc}

000158b0 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   158b0:	f3bf 8f5b 	dmb	ish
   158b4:	6800      	ldr	r0, [r0, #0]
   158b6:	f3bf 8f5b 	dmb	ish
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   158ba:	4108      	asrs	r0, r1
}
   158bc:	f000 0001 	and.w	r0, r0, #1
   158c0:	4770      	bx	lr

000158c2 <net_ipv6_is_prefix>:
	if (length > 128) {
   158c2:	2a80      	cmp	r2, #128	; 0x80
{
   158c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   158c6:	4607      	mov	r7, r0
   158c8:	460e      	mov	r6, r1
   158ca:	4614      	mov	r4, r2
	if (length > 128) {
   158cc:	d901      	bls.n	158d2 <net_ipv6_is_prefix+0x10>
		return false;
   158ce:	2000      	movs	r0, #0
}
   158d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (memcmp(addr1, addr2, bytes)) {
   158d2:	08d5      	lsrs	r5, r2, #3
   158d4:	462a      	mov	r2, r5
   158d6:	f7ec fd43 	bl	2360 <memcmp>
   158da:	2800      	cmp	r0, #0
   158dc:	d1f7      	bne.n	158ce <net_ipv6_is_prefix+0xc>
	u8_t bits = 128 - length;
   158de:	f1c4 0480 	rsb	r4, r4, #128	; 0x80
	if (!remain) {
   158e2:	f014 0407 	ands.w	r4, r4, #7
   158e6:	d00f      	beq.n	15908 <net_ipv6_is_prefix+0x46>
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   158e8:	5d73      	ldrb	r3, [r6, r5]
   158ea:	5d7a      	ldrb	r2, [r7, r5]
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   158ec:	f1c4 0108 	rsb	r1, r4, #8
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   158f0:	405a      	eors	r2, r3
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   158f2:	23ff      	movs	r3, #255	; 0xff
   158f4:	408b      	lsls	r3, r1
   158f6:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   158fa:	fa03 f404 	lsl.w	r4, r3, r4
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   158fe:	4222      	tst	r2, r4
   15900:	bf0c      	ite	eq
   15902:	2001      	moveq	r0, #1
   15904:	2000      	movne	r0, #0
   15906:	e7e3      	b.n	158d0 <net_ipv6_is_prefix+0xe>
		return true;
   15908:	2001      	movs	r0, #1
   1590a:	e7e1      	b.n	158d0 <net_ipv6_is_prefix+0xe>

0001590c <net_ipv6_addr_cmp>:
{
   1590c:	b508      	push	{r3, lr}
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1590e:	2210      	movs	r2, #16
   15910:	f7ec fd26 	bl	2360 <memcmp>
}
   15914:	fab0 f080 	clz	r0, r0
   15918:	0940      	lsrs	r0, r0, #5
   1591a:	bd08      	pop	{r3, pc}

0001591c <net_if_ipv6_start_dad>:
{
   1591c:	b510      	push	{r4, lr}
   1591e:	4602      	mov	r2, r0
   15920:	460c      	mov	r4, r1
 */
static inline bool net_if_is_up(struct net_if *iface)
{
	NET_ASSERT(iface);

	return atomic_test_bit(iface->if_dev->flags, NET_IF_UP);
   15922:	6800      	ldr	r0, [r0, #0]
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
   15924:	2100      	movs	r1, #0
   15926:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
   1592a:	300c      	adds	r0, #12
   1592c:	f7ff ffc0 	bl	158b0 <atomic_test_bit>
	if (net_if_is_up(iface)) {
   15930:	b180      	cbz	r0, 15954 <net_if_ipv6_start_dad+0x38>
   15932:	f7ff ffa2 	bl	1587a <z_arch_is_user_context>
		ifaddr->dad_count = 1U;
   15936:	2301      	movs	r3, #1
   15938:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
		if (!net_ipv6_start_dad(iface, ifaddr)) {
   1593c:	4621      	mov	r1, r4
   1593e:	4610      	mov	r0, r2
   15940:	f001 ff17 	bl	17772 <net_ipv6_start_dad>
   15944:	b950      	cbnz	r0, 1595c <net_if_ipv6_start_dad+0x40>
			k_delayed_work_submit(&ifaddr->dad_timer, DAD_TIMEOUT);
   15946:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1594a:	2164      	movs	r1, #100	; 0x64
}
   1594c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_delayed_work_submit(&ifaddr->dad_timer, DAD_TIMEOUT);
   15950:	f7f6 ba3a 	b.w	bdc8 <k_delayed_work_submit>
}
   15954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15958:	f7ff bf8f 	b.w	1587a <z_arch_is_user_context>
   1595c:	bd10      	pop	{r4, pc}

0001595e <k_uptime_get>:
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   1595e:	e92d 4147 	stmdb	sp!, {r0, r1, r2, r6, r8, lr}
   15962:	f7ff ff8a 	bl	1587a <z_arch_is_user_context>
   15966:	b138      	cbz	r0, 15978 <k_uptime_get+0x1a>
	(void)z_arch_syscall_invoke1((u32_t)&ret, call_id);
   15968:	4668      	mov	r0, sp
	register u32_t r6 __asm__("r6") = call_id;
   1596a:	2676      	movs	r6, #118	; 0x76
	__asm__ volatile("svc %[svid]\n"
   1596c:	df03      	svc	3
	return ret;
   1596e:	e9dd 0100 	ldrd	r0, r1, [sp]
   15972:	b003      	add	sp, #12
   15974:	e8bd 8140 	ldmia.w	sp!, {r6, r8, pc}
   15978:	f003 f854 	bl	18a24 <z_impl_k_uptime_get>
   1597c:	e7f9      	b.n	15972 <k_uptime_get+0x14>

0001597e <net_if_start_rs>:
{
   1597e:	b510      	push	{r4, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   15980:	6844      	ldr	r4, [r0, #4]
{
   15982:	4602      	mov	r2, r0
	if (!ipv6) {
   15984:	b16c      	cbz	r4, 159a2 <net_if_start_rs+0x24>
	return z_arch_is_user_context();
   15986:	f7ff ff78 	bl	1587a <z_arch_is_user_context>
	if (!net_ipv6_start_rs(iface)) {
   1598a:	4610      	mov	r0, r2
   1598c:	f001 fffc 	bl	17988 <net_ipv6_start_rs>
   15990:	b938      	cbnz	r0, 159a2 <net_if_start_rs+0x24>
		k_delayed_work_submit(&ipv6->rs_timer, RS_TIMEOUT);
   15992:	f504 7094 	add.w	r0, r4, #296	; 0x128
   15996:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
}
   1599a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_delayed_work_submit(&ipv6->rs_timer, RS_TIMEOUT);
   1599e:	f7f6 ba13 	b.w	bdc8 <k_delayed_work_submit>
}
   159a2:	bd10      	pop	{r4, pc}

000159a4 <dad_timeout>:
{
   159a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct net_if *iface = NULL;
   159a6:	2300      	movs	r3, #0
{
   159a8:	4604      	mov	r4, r0
	struct net_if *iface = NULL;
   159aa:	9301      	str	r3, [sp, #4]
   159ac:	f7ff ff65 	bl	1587a <z_arch_is_user_context>
	ifaddr->addr_state = NET_ADDR_PREFERRED;
   159b0:	2301      	movs	r3, #1
   159b2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr, &iface);
   159b6:	f1a4 0524 	sub.w	r5, r4, #36	; 0x24
   159ba:	3c20      	subs	r4, #32
   159bc:	a901      	add	r1, sp, #4
   159be:	4620      	mov	r0, r4
   159c0:	f7f6 fb24 	bl	c00c <net_if_ipv6_addr_lookup>
	if (tmp == ifaddr) {
   159c4:	4285      	cmp	r5, r0
   159c6:	d103      	bne.n	159d0 <dad_timeout+0x2c>
		net_ipv6_nbr_rm(iface, &ifaddr->address.in6_addr);
   159c8:	4621      	mov	r1, r4
   159ca:	9801      	ldr	r0, [sp, #4]
   159cc:	f001 fb0c 	bl	16fe8 <net_ipv6_nbr_rm>
}
   159d0:	b003      	add	sp, #12
   159d2:	bd30      	pop	{r4, r5, pc}

000159d4 <net_if_ipv6_addr_lookup_by_iface>:
{
   159d4:	b538      	push	{r3, r4, r5, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   159d6:	6844      	ldr	r4, [r0, #4]
{
   159d8:	460d      	mov	r5, r1
	if (!ipv6) {
   159da:	b90c      	cbnz	r4, 159e0 <net_if_ipv6_addr_lookup_by_iface+0xc>
		return NULL;
   159dc:	2000      	movs	r0, #0
}
   159de:	bd38      	pop	{r3, r4, r5, pc}
		if (!ipv6->unicast[i].is_used ||
   159e0:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   159e4:	079a      	lsls	r2, r3, #30
   159e6:	d508      	bpl.n	159fa <net_if_ipv6_addr_lookup_by_iface+0x26>
   159e8:	8823      	ldrh	r3, [r4, #0]
   159ea:	2b02      	cmp	r3, #2
   159ec:	d105      	bne.n	159fa <net_if_ipv6_addr_lookup_by_iface+0x26>
		if (net_ipv6_is_prefix(
   159ee:	2280      	movs	r2, #128	; 0x80
   159f0:	1d21      	adds	r1, r4, #4
   159f2:	4628      	mov	r0, r5
   159f4:	f7ff ff65 	bl	158c2 <net_ipv6_is_prefix>
   159f8:	b990      	cbnz	r0, 15a20 <net_if_ipv6_addr_lookup_by_iface+0x4c>
		if (!ipv6->unicast[i].is_used ||
   159fa:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
   159fe:	079b      	lsls	r3, r3, #30
   15a00:	d5ec      	bpl.n	159dc <net_if_ipv6_addr_lookup_by_iface+0x8>
   15a02:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   15a06:	2b02      	cmp	r3, #2
   15a08:	d1e8      	bne.n	159dc <net_if_ipv6_addr_lookup_by_iface+0x8>
		if (net_ipv6_is_prefix(
   15a0a:	2280      	movs	r2, #128	; 0x80
   15a0c:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   15a10:	4628      	mov	r0, r5
   15a12:	f7ff ff56 	bl	158c2 <net_ipv6_is_prefix>
   15a16:	2800      	cmp	r0, #0
   15a18:	d0e0      	beq.n	159dc <net_if_ipv6_addr_lookup_by_iface+0x8>
   15a1a:	2048      	movs	r0, #72	; 0x48
			return &ipv6->unicast[i];
   15a1c:	4420      	add	r0, r4
   15a1e:	e7de      	b.n	159de <net_if_ipv6_addr_lookup_by_iface+0xa>
		if (net_ipv6_is_prefix(
   15a20:	2000      	movs	r0, #0
   15a22:	e7fb      	b.n	15a1c <net_if_ipv6_addr_lookup_by_iface+0x48>

00015a24 <net_if_start_dad>:
{
   15a24:	b530      	push	{r4, r5, lr}
   15a26:	b087      	sub	sp, #28
   15a28:	4604      	mov	r4, r0
	struct in6_addr addr = { };
   15a2a:	2210      	movs	r2, #16
   15a2c:	2100      	movs	r1, #0
   15a2e:	a802      	add	r0, sp, #8
   15a30:	f7ec fcdf 	bl	23f2 <memset>
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   15a34:	a901      	add	r1, sp, #4
   15a36:	4620      	mov	r0, r4
   15a38:	f7f6 faaa 	bl	bf90 <net_if_config_ipv6_get>
   15a3c:	2800      	cmp	r0, #0
   15a3e:	da03      	bge.n	15a48 <net_if_start_dad+0x24>
   15a40:	f7ff ff1b 	bl	1587a <z_arch_is_user_context>
}
   15a44:	b007      	add	sp, #28
   15a46:	bd30      	pop	{r4, r5, pc}
	if (!ipv6) {
   15a48:	9b01      	ldr	r3, [sp, #4]
   15a4a:	2b00      	cmp	r3, #0
   15a4c:	d0fa      	beq.n	15a44 <net_if_start_dad+0x20>
	addr->s6_addr[0] = 0xfe;
   15a4e:	f248 03fe 	movw	r3, #33022	; 0x80fe
	net_ipv6_addr_create_iid(&addr, net_if_get_link_addr(iface));
   15a52:	6822      	ldr	r2, [r4, #0]
   15a54:	9302      	str	r3, [sp, #8]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   15a56:	2100      	movs	r1, #0
   15a58:	9103      	str	r1, [sp, #12]
	switch (lladdr->len) {
   15a5a:	7d13      	ldrb	r3, [r2, #20]
   15a5c:	2b06      	cmp	r3, #6
   15a5e:	d03b      	beq.n	15ad8 <net_if_start_dad+0xb4>
   15a60:	2b08      	cmp	r3, #8
   15a62:	d057      	beq.n	15b14 <net_if_start_dad+0xf0>
   15a64:	2b02      	cmp	r3, #2
   15a66:	d110      	bne.n	15a8a <net_if_start_dad+0x66>
		if (lladdr->type == NET_LINK_IEEE802154) {
   15a68:	7d53      	ldrb	r3, [r2, #21]
   15a6a:	2b01      	cmp	r3, #1
   15a6c:	d10d      	bne.n	15a8a <net_if_start_dad+0x66>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   15a6e:	9104      	str	r1, [sp, #16]
			addr->s6_addr[11] = 0xff;
   15a70:	23ff      	movs	r3, #255	; 0xff
   15a72:	f88d 3013 	strb.w	r3, [sp, #19]
			addr->s6_addr[12] = 0xfe;
   15a76:	23fe      	movs	r3, #254	; 0xfe
   15a78:	f8ad 3014 	strh.w	r3, [sp, #20]
			addr->s6_addr[14] = lladdr->addr[0];
   15a7c:	6913      	ldr	r3, [r2, #16]
   15a7e:	781a      	ldrb	r2, [r3, #0]
   15a80:	f88d 2016 	strb.w	r2, [sp, #22]
			addr->s6_addr[15] = lladdr->addr[1];
   15a84:	785b      	ldrb	r3, [r3, #1]
   15a86:	f88d 3017 	strb.w	r3, [sp, #23]
	ifaddr = net_if_ipv6_addr_add(iface, &addr, NET_ADDR_AUTOCONF, 0);
   15a8a:	2300      	movs	r3, #0
   15a8c:	2201      	movs	r2, #1
   15a8e:	a902      	add	r1, sp, #8
   15a90:	4620      	mov	r0, r4
   15a92:	f7f6 fb45 	bl	c120 <net_if_ipv6_addr_add>
	if (!ifaddr) {
   15a96:	4605      	mov	r5, r0
   15a98:	b908      	cbnz	r0, 15a9e <net_if_start_dad+0x7a>
   15a9a:	f7ff feee 	bl	1587a <z_arch_is_user_context>
		if (!ipv6->unicast[i].is_used ||
   15a9e:	9901      	ldr	r1, [sp, #4]
   15aa0:	f891 3047 	ldrb.w	r3, [r1, #71]	; 0x47
   15aa4:	079a      	lsls	r2, r3, #30
   15aa6:	d507      	bpl.n	15ab8 <net_if_start_dad+0x94>
   15aa8:	880b      	ldrh	r3, [r1, #0]
   15aaa:	2b02      	cmp	r3, #2
   15aac:	d104      	bne.n	15ab8 <net_if_start_dad+0x94>
		    ipv6->unicast[i].address.family != AF_INET6 ||
   15aae:	42a9      	cmp	r1, r5
   15ab0:	d002      	beq.n	15ab8 <net_if_start_dad+0x94>
		net_if_ipv6_start_dad(iface, &ipv6->unicast[i]);
   15ab2:	4620      	mov	r0, r4
   15ab4:	f7ff ff32 	bl	1591c <net_if_ipv6_start_dad>
		if (!ipv6->unicast[i].is_used ||
   15ab8:	9901      	ldr	r1, [sp, #4]
   15aba:	f891 308f 	ldrb.w	r3, [r1, #143]	; 0x8f
   15abe:	079b      	lsls	r3, r3, #30
   15ac0:	d5c0      	bpl.n	15a44 <net_if_start_dad+0x20>
   15ac2:	f8b1 3048 	ldrh.w	r3, [r1, #72]	; 0x48
   15ac6:	2b02      	cmp	r3, #2
   15ac8:	d1bc      	bne.n	15a44 <net_if_start_dad+0x20>
		    &ipv6->unicast[i] == ifaddr) {
   15aca:	3148      	adds	r1, #72	; 0x48
		    ipv6->unicast[i].address.family != AF_INET6 ||
   15acc:	428d      	cmp	r5, r1
   15ace:	d0b9      	beq.n	15a44 <net_if_start_dad+0x20>
		net_if_ipv6_start_dad(iface, &ipv6->unicast[i]);
   15ad0:	4620      	mov	r0, r4
   15ad2:	f7ff ff23 	bl	1591c <net_if_ipv6_start_dad>
   15ad6:	e7b5      	b.n	15a44 <net_if_start_dad+0x20>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   15ad8:	6913      	ldr	r3, [r2, #16]
   15ada:	7899      	ldrb	r1, [r3, #2]
   15adc:	8818      	ldrh	r0, [r3, #0]
   15ade:	f88d 1012 	strb.w	r1, [sp, #18]
		addr->s6_addr[11] = 0xff;
   15ae2:	21ff      	movs	r1, #255	; 0xff
   15ae4:	f88d 1013 	strb.w	r1, [sp, #19]
		addr->s6_addr[12] = 0xfe;
   15ae8:	21fe      	movs	r1, #254	; 0xfe
   15aea:	f88d 1014 	strb.w	r1, [sp, #20]
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   15aee:	f8ad 0010 	strh.w	r0, [sp, #16]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   15af2:	f833 1f03 	ldrh.w	r1, [r3, #3]!
   15af6:	f8ad 1015 	strh.w	r1, [sp, #21]
   15afa:	789b      	ldrb	r3, [r3, #2]
   15afc:	f88d 3017 	strb.w	r3, [sp, #23]
		if (lladdr->type == NET_LINK_ETHERNET) {
   15b00:	7d53      	ldrb	r3, [r2, #21]
   15b02:	2b03      	cmp	r3, #3
   15b04:	d1c1      	bne.n	15a8a <net_if_start_dad+0x66>
		addr->s6_addr[8] ^= 0x02;
   15b06:	f89d 3010 	ldrb.w	r3, [sp, #16]
   15b0a:	f083 0302 	eor.w	r3, r3, #2
   15b0e:	f88d 3010 	strb.w	r3, [sp, #16]
		break;
   15b12:	e7ba      	b.n	15a8a <net_if_start_dad+0x66>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   15b14:	6912      	ldr	r2, [r2, #16]
   15b16:	6810      	ldr	r0, [r2, #0]
   15b18:	6851      	ldr	r1, [r2, #4]
   15b1a:	ab04      	add	r3, sp, #16
   15b1c:	c303      	stmia	r3!, {r0, r1}
   15b1e:	e7f2      	b.n	15b06 <net_if_start_dad+0xe2>

00015b20 <net_if_ipv6_maddr_add>:
{
   15b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15b22:	460c      	mov	r4, r1
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   15b24:	a901      	add	r1, sp, #4
   15b26:	f7f6 fa33 	bl	bf90 <net_if_config_ipv6_get>
   15b2a:	2800      	cmp	r0, #0
   15b2c:	db04      	blt.n	15b38 <net_if_ipv6_maddr_add+0x18>
	if (!net_ipv6_is_addr_mcast(addr)) {
   15b2e:	7823      	ldrb	r3, [r4, #0]
   15b30:	2bff      	cmp	r3, #255	; 0xff
   15b32:	d003      	beq.n	15b3c <net_if_ipv6_maddr_add+0x1c>
   15b34:	f7ff fea1 	bl	1587a <z_arch_is_user_context>
		return NULL;
   15b38:	2000      	movs	r0, #0
   15b3a:	e02c      	b.n	15b96 <net_if_ipv6_maddr_add+0x76>
		if (ipv6->mcast[i].is_used) {
   15b3c:	9b01      	ldr	r3, [sp, #4]
   15b3e:	f893 00a4 	ldrb.w	r0, [r3, #164]	; 0xa4
   15b42:	f010 0001 	ands.w	r0, r0, #1
   15b46:	d008      	beq.n	15b5a <net_if_ipv6_maddr_add+0x3a>
   15b48:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
   15b4c:	07d1      	lsls	r1, r2, #31
   15b4e:	d524      	bpl.n	15b9a <net_if_ipv6_maddr_add+0x7a>
   15b50:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
   15b54:	07d2      	lsls	r2, r2, #31
   15b56:	d4ef      	bmi.n	15b38 <net_if_ipv6_maddr_add+0x18>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   15b58:	2002      	movs	r0, #2
		ipv6->mcast[i].is_used = true;
   15b5a:	2218      	movs	r2, #24
   15b5c:	4342      	muls	r2, r0
   15b5e:	1898      	adds	r0, r3, r2
   15b60:	f890 10a4 	ldrb.w	r1, [r0, #164]	; 0xa4
   15b64:	f041 0101 	orr.w	r1, r1, #1
   15b68:	f880 10a4 	strb.w	r1, [r0, #164]	; 0xa4
		ipv6->mcast[i].address.family = AF_INET6;
   15b6c:	2102      	movs	r1, #2
   15b6e:	f8a0 1090 	strh.w	r1, [r0, #144]	; 0x90
		memcpy(&ipv6->mcast[i].address.in6_addr, addr, 16);
   15b72:	f102 0094 	add.w	r0, r2, #148	; 0x94
   15b76:	4403      	add	r3, r0
   15b78:	4621      	mov	r1, r4
   15b7a:	f104 0010 	add.w	r0, r4, #16
   15b7e:	f851 4b04 	ldr.w	r4, [r1], #4
   15b82:	f843 4b04 	str.w	r4, [r3], #4
   15b86:	4281      	cmp	r1, r0
   15b88:	d1f9      	bne.n	15b7e <net_if_ipv6_maddr_add+0x5e>
   15b8a:	f7ff fe76 	bl	1587a <z_arch_is_user_context>
		return &ipv6->mcast[i];
   15b8e:	9b01      	ldr	r3, [sp, #4]
   15b90:	f102 0090 	add.w	r0, r2, #144	; 0x90
   15b94:	4418      	add	r0, r3
}
   15b96:	b003      	add	sp, #12
   15b98:	bd30      	pop	{r4, r5, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   15b9a:	2001      	movs	r0, #1
   15b9c:	e7dd      	b.n	15b5a <net_if_ipv6_maddr_add+0x3a>

00015b9e <net_if_ipv6_maddr_rm>:
{
   15b9e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   15ba2:	6846      	ldr	r6, [r0, #4]
{
   15ba4:	460f      	mov	r7, r1
	if (!ipv6) {
   15ba6:	b1ee      	cbz	r6, 15be4 <net_if_ipv6_maddr_rm+0x46>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   15ba8:	2500      	movs	r5, #0
		if (!ipv6->mcast[i].is_used) {
   15baa:	f04f 0818 	mov.w	r8, #24
		if (!net_ipv6_addr_cmp(&ipv6->mcast[i].address.in6_addr,
   15bae:	f106 0994 	add.w	r9, r6, #148	; 0x94
		if (!ipv6->mcast[i].is_used) {
   15bb2:	fb08 f005 	mul.w	r0, r8, r5
   15bb6:	1834      	adds	r4, r6, r0
   15bb8:	34a0      	adds	r4, #160	; 0xa0
   15bba:	7923      	ldrb	r3, [r4, #4]
   15bbc:	07db      	lsls	r3, r3, #31
   15bbe:	d50e      	bpl.n	15bde <net_if_ipv6_maddr_rm+0x40>
		if (!net_ipv6_addr_cmp(&ipv6->mcast[i].address.in6_addr,
   15bc0:	4639      	mov	r1, r7
   15bc2:	4448      	add	r0, r9
   15bc4:	f7ff fea2 	bl	1590c <net_ipv6_addr_cmp>
   15bc8:	4602      	mov	r2, r0
   15bca:	b140      	cbz	r0, 15bde <net_if_ipv6_maddr_rm+0x40>
		ipv6->mcast[i].is_used = false;
   15bcc:	7923      	ldrb	r3, [r4, #4]
   15bce:	f36f 0300 	bfc	r3, #0, #1
   15bd2:	7123      	strb	r3, [r4, #4]
   15bd4:	f7ff fe51 	bl	1587a <z_arch_is_user_context>
}
   15bd8:	4610      	mov	r0, r2
   15bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   15bde:	3501      	adds	r5, #1
   15be0:	2d03      	cmp	r5, #3
   15be2:	d1e6      	bne.n	15bb2 <net_if_ipv6_maddr_rm+0x14>
		return false;
   15be4:	2200      	movs	r2, #0
   15be6:	e7f7      	b.n	15bd8 <net_if_ipv6_maddr_rm+0x3a>

00015be8 <net_if_ipv6_dad_failed>:
{
   15be8:	b513      	push	{r0, r1, r4, lr}
   15bea:	460c      	mov	r4, r1
   15bec:	9001      	str	r0, [sp, #4]
	ifaddr = net_if_ipv6_addr_lookup(addr, &iface);
   15bee:	a901      	add	r1, sp, #4
   15bf0:	4620      	mov	r0, r4
   15bf2:	f7f6 fa0b 	bl	c00c <net_if_ipv6_addr_lookup>
	if (!ifaddr) {
   15bf6:	b918      	cbnz	r0, 15c00 <net_if_ipv6_dad_failed+0x18>
   15bf8:	f7ff fe3f 	bl	1587a <z_arch_is_user_context>
}
   15bfc:	b002      	add	sp, #8
   15bfe:	bd10      	pop	{r4, pc}
	k_delayed_work_cancel(&ifaddr->dad_timer);
   15c00:	3024      	adds	r0, #36	; 0x24
   15c02:	f002 feb6 	bl	18972 <k_delayed_work_cancel>
	net_if_ipv6_addr_rm(iface, addr);
   15c06:	4621      	mov	r1, r4
   15c08:	9801      	ldr	r0, [sp, #4]
   15c0a:	f7f6 fb75 	bl	c2f8 <net_if_ipv6_addr_rm>
   15c0e:	e7f5      	b.n	15bfc <net_if_ipv6_dad_failed+0x14>

00015c10 <remove_prefix_addresses>:
{
   15c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15c14:	461f      	mov	r7, r3
		if (!ipv6->unicast[i].is_used ||
   15c16:	f891 3047 	ldrb.w	r3, [r1, #71]	; 0x47
{
   15c1a:	4616      	mov	r6, r2
		if (!ipv6->unicast[i].is_used ||
   15c1c:	079a      	lsls	r2, r3, #30
{
   15c1e:	4605      	mov	r5, r0
   15c20:	460c      	mov	r4, r1
		if (!ipv6->unicast[i].is_used ||
   15c22:	d512      	bpl.n	15c4a <remove_prefix_addresses+0x3a>
   15c24:	880b      	ldrh	r3, [r1, #0]
   15c26:	2b02      	cmp	r3, #2
   15c28:	d10f      	bne.n	15c4a <remove_prefix_addresses+0x3a>
		    ipv6->unicast[i].address.family != AF_INET6 ||
   15c2a:	f891 3044 	ldrb.w	r3, [r1, #68]	; 0x44
   15c2e:	2b01      	cmp	r3, #1
   15c30:	d10b      	bne.n	15c4a <remove_prefix_addresses+0x3a>
				ipv6->unicast[i].address.in6_addr.s6_addr,
   15c32:	f101 0804 	add.w	r8, r1, #4
		if (net_ipv6_is_prefix(
   15c36:	463a      	mov	r2, r7
   15c38:	4641      	mov	r1, r8
   15c3a:	4630      	mov	r0, r6
   15c3c:	f7ff fe41 	bl	158c2 <net_ipv6_is_prefix>
   15c40:	b118      	cbz	r0, 15c4a <remove_prefix_addresses+0x3a>
			net_if_ipv6_addr_rm(iface,
   15c42:	4641      	mov	r1, r8
   15c44:	4628      	mov	r0, r5
   15c46:	f7f6 fb57 	bl	c2f8 <net_if_ipv6_addr_rm>
		if (!ipv6->unicast[i].is_used ||
   15c4a:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
   15c4e:	079b      	lsls	r3, r3, #30
   15c50:	d514      	bpl.n	15c7c <remove_prefix_addresses+0x6c>
   15c52:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   15c56:	2b02      	cmp	r3, #2
   15c58:	d110      	bne.n	15c7c <remove_prefix_addresses+0x6c>
		    ipv6->unicast[i].address.family != AF_INET6 ||
   15c5a:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   15c5e:	2b01      	cmp	r3, #1
   15c60:	d10c      	bne.n	15c7c <remove_prefix_addresses+0x6c>
				ipv6->unicast[i].address.in6_addr.s6_addr,
   15c62:	344c      	adds	r4, #76	; 0x4c
		if (net_ipv6_is_prefix(
   15c64:	463a      	mov	r2, r7
   15c66:	4621      	mov	r1, r4
   15c68:	4630      	mov	r0, r6
   15c6a:	f7ff fe2a 	bl	158c2 <net_ipv6_is_prefix>
   15c6e:	b128      	cbz	r0, 15c7c <remove_prefix_addresses+0x6c>
			net_if_ipv6_addr_rm(iface,
   15c70:	4621      	mov	r1, r4
   15c72:	4628      	mov	r0, r5
}
   15c74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			net_if_ipv6_addr_rm(iface,
   15c78:	f7f6 bb3e 	b.w	c2f8 <net_if_ipv6_addr_rm>
}
   15c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015c80 <net_if_ipv6_prefix_add>:
{
   15c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15c84:	b086      	sub	sp, #24
   15c86:	460d      	mov	r5, r1
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   15c88:	a901      	add	r1, sp, #4
{
   15c8a:	4680      	mov	r8, r0
   15c8c:	4617      	mov	r7, r2
   15c8e:	461e      	mov	r6, r3
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   15c90:	f7f6 f97e 	bl	bf90 <net_if_config_ipv6_get>
   15c94:	2800      	cmp	r0, #0
   15c96:	da03      	bge.n	15ca0 <net_if_ipv6_prefix_add+0x20>
		return NULL;
   15c98:	2000      	movs	r0, #0
}
   15c9a:	b006      	add	sp, #24
   15c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ifprefix = ipv6_prefix_find(iface, prefix, len);
   15ca0:	f8d8 4004 	ldr.w	r4, [r8, #4]
	if (!ipv6) {
   15ca4:	2c00      	cmp	r4, #0
   15ca6:	d149      	bne.n	15d3c <net_if_ipv6_prefix_add+0xbc>
	if (!ipv6) {
   15ca8:	f8dd c004 	ldr.w	ip, [sp, #4]
   15cac:	f1bc 0f00 	cmp.w	ip, #0
   15cb0:	d0f2      	beq.n	15c98 <net_if_ipv6_prefix_add+0x18>
		if (ipv6->prefix[i].is_used) {
   15cb2:	f89c 30fd 	ldrb.w	r3, [ip, #253]	; 0xfd
   15cb6:	f3c3 0340 	ubfx	r3, r3, #1, #1
   15cba:	b123      	cbz	r3, 15cc6 <net_if_ipv6_prefix_add+0x46>
   15cbc:	f89c 3125 	ldrb.w	r3, [ip, #293]	; 0x125
   15cc0:	0799      	lsls	r1, r3, #30
   15cc2:	d4e9      	bmi.n	15c98 <net_if_ipv6_prefix_add+0x18>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   15cc4:	2301      	movs	r3, #1
		net_if_ipv6_prefix_init(iface, &ipv6->prefix[i], prefix,
   15cc6:	2228      	movs	r2, #40	; 0x28
   15cc8:	435a      	muls	r2, r3
   15cca:	f102 04d8 	add.w	r4, r2, #216	; 0xd8
	ifprefix->is_used = true;
   15cce:	4462      	add	r2, ip
   15cd0:	f892 10fd 	ldrb.w	r1, [r2, #253]	; 0xfd
	ifprefix->len = len;
   15cd4:	f882 70fc 	strb.w	r7, [r2, #252]	; 0xfc
	ifprefix->is_used = true;
   15cd8:	f041 0102 	orr.w	r1, r1, #2
	ifprefix->iface = iface;
   15cdc:	f8c2 80f8 	str.w	r8, [r2, #248]	; 0xf8
	ifprefix->is_used = true;
   15ce0:	f882 10fd 	strb.w	r1, [r2, #253]	; 0xfd
	net_ipaddr_copy(&ifprefix->prefix, addr);
   15ce4:	462a      	mov	r2, r5
   15ce6:	ad02      	add	r5, sp, #8
   15ce8:	f102 0810 	add.w	r8, r2, #16
   15cec:	462f      	mov	r7, r5
   15cee:	6810      	ldr	r0, [r2, #0]
   15cf0:	6851      	ldr	r1, [r2, #4]
   15cf2:	46ae      	mov	lr, r5
   15cf4:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   15cf8:	3208      	adds	r2, #8
   15cfa:	4542      	cmp	r2, r8
   15cfc:	4675      	mov	r5, lr
   15cfe:	d1f6      	bne.n	15cee <net_if_ipv6_prefix_add+0x6e>
   15d00:	eb0c 0204 	add.w	r2, ip, r4
   15d04:	3210      	adds	r2, #16
   15d06:	f10d 0e18 	add.w	lr, sp, #24
   15d0a:	463d      	mov	r5, r7
   15d0c:	cd03      	ldmia	r5!, {r0, r1}
   15d0e:	4575      	cmp	r5, lr
   15d10:	6010      	str	r0, [r2, #0]
   15d12:	6051      	str	r1, [r2, #4]
   15d14:	462f      	mov	r7, r5
   15d16:	f102 0208 	add.w	r2, r2, #8
   15d1a:	d1f6      	bne.n	15d0a <net_if_ipv6_prefix_add+0x8a>
	if (lifetime == NET_IPV6_ND_INFINITE_LIFETIME) {
   15d1c:	2228      	movs	r2, #40	; 0x28
   15d1e:	fb02 c303 	mla	r3, r2, r3, ip
   15d22:	1c72      	adds	r2, r6, #1
   15d24:	4256      	negs	r6, r2
   15d26:	4156      	adcs	r6, r2
   15d28:	f893 20fd 	ldrb.w	r2, [r3, #253]	; 0xfd
   15d2c:	f366 0200 	bfi	r2, r6, #0, #1
   15d30:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
   15d34:	f7ff fda1 	bl	1587a <z_arch_is_user_context>
		return &ipv6->prefix[i];
   15d38:	9801      	ldr	r0, [sp, #4]
   15d3a:	e01e      	b.n	15d7a <net_if_ipv6_prefix_add+0xfa>
		if (!ipv6->unicast[i].is_used) {
   15d3c:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   15d40:	079b      	lsls	r3, r3, #30
   15d42:	d509      	bpl.n	15d58 <net_if_ipv6_prefix_add+0xd8>
		if (net_ipv6_addr_cmp(prefix, &ipv6->prefix[i].prefix) &&
   15d44:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
   15d48:	4628      	mov	r0, r5
   15d4a:	f7ff fddf 	bl	1590c <net_ipv6_addr_cmp>
   15d4e:	b118      	cbz	r0, 15d58 <net_if_ipv6_prefix_add+0xd8>
   15d50:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
   15d54:	42bb      	cmp	r3, r7
   15d56:	d012      	beq.n	15d7e <net_if_ipv6_prefix_add+0xfe>
		if (!ipv6->unicast[i].is_used) {
   15d58:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
   15d5c:	0798      	lsls	r0, r3, #30
   15d5e:	d5a3      	bpl.n	15ca8 <net_if_ipv6_prefix_add+0x28>
		if (net_ipv6_addr_cmp(prefix, &ipv6->prefix[i].prefix) &&
   15d60:	f504 7188 	add.w	r1, r4, #272	; 0x110
   15d64:	4628      	mov	r0, r5
   15d66:	f7ff fdd1 	bl	1590c <net_ipv6_addr_cmp>
   15d6a:	2800      	cmp	r0, #0
   15d6c:	d09c      	beq.n	15ca8 <net_if_ipv6_prefix_add+0x28>
   15d6e:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
   15d72:	42bb      	cmp	r3, r7
   15d74:	d198      	bne.n	15ca8 <net_if_ipv6_prefix_add+0x28>
   15d76:	2028      	movs	r0, #40	; 0x28
			return &ipv6->prefix[i];
   15d78:	30d8      	adds	r0, #216	; 0xd8
		return &ipv6->prefix[i];
   15d7a:	4420      	add	r0, r4
   15d7c:	e78d      	b.n	15c9a <net_if_ipv6_prefix_add+0x1a>
		if (net_ipv6_addr_cmp(prefix, &ipv6->prefix[i].prefix) &&
   15d7e:	2000      	movs	r0, #0
   15d80:	e7fa      	b.n	15d78 <net_if_ipv6_prefix_add+0xf8>

00015d82 <net_if_ipv6_prefix_lookup>:
{
   15d82:	b570      	push	{r4, r5, r6, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   15d84:	6844      	ldr	r4, [r0, #4]
{
   15d86:	460d      	mov	r5, r1
   15d88:	4616      	mov	r6, r2
	if (!ipv6) {
   15d8a:	b90c      	cbnz	r4, 15d90 <net_if_ipv6_prefix_lookup+0xe>
		return NULL;
   15d8c:	2000      	movs	r0, #0
}
   15d8e:	bd70      	pop	{r4, r5, r6, pc}
		if (!ipv6->prefix[i].is_used) {
   15d90:	f894 30fd 	ldrb.w	r3, [r4, #253]	; 0xfd
   15d94:	0798      	lsls	r0, r3, #30
   15d96:	d411      	bmi.n	15dbc <net_if_ipv6_prefix_lookup+0x3a>
   15d98:	f894 3125 	ldrb.w	r3, [r4, #293]	; 0x125
   15d9c:	079b      	lsls	r3, r3, #30
   15d9e:	d5f5      	bpl.n	15d8c <net_if_ipv6_prefix_lookup+0xa>
		if (net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
   15da0:	4632      	mov	r2, r6
   15da2:	4629      	mov	r1, r5
   15da4:	f504 7088 	add.w	r0, r4, #272	; 0x110
   15da8:	f7ff fd8b 	bl	158c2 <net_ipv6_is_prefix>
   15dac:	2800      	cmp	r0, #0
   15dae:	d0ed      	beq.n	15d8c <net_if_ipv6_prefix_lookup+0xa>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   15db0:	2001      	movs	r0, #1
			return &ipv6->prefix[i];
   15db2:	2328      	movs	r3, #40	; 0x28
   15db4:	fb03 4000 	mla	r0, r3, r0, r4
   15db8:	30d8      	adds	r0, #216	; 0xd8
   15dba:	e7e8      	b.n	15d8e <net_if_ipv6_prefix_lookup+0xc>
		if (net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
   15dbc:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
   15dc0:	f7ff fd7f 	bl	158c2 <net_ipv6_is_prefix>
   15dc4:	2800      	cmp	r0, #0
   15dc6:	d0e7      	beq.n	15d98 <net_if_ipv6_prefix_lookup+0x16>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   15dc8:	2000      	movs	r0, #0
   15dca:	e7f2      	b.n	15db2 <net_if_ipv6_prefix_lookup+0x30>

00015dcc <net_if_ipv6_prefix_rm>:
{
   15dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   15dd0:	6844      	ldr	r4, [r0, #4]
{
   15dd2:	4607      	mov	r7, r0
   15dd4:	4688      	mov	r8, r1
   15dd6:	4616      	mov	r6, r2
	if (!ipv6) {
   15dd8:	b914      	cbnz	r4, 15de0 <net_if_ipv6_prefix_rm+0x14>
		return false;
   15dda:	2000      	movs	r0, #0
}
   15ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!ipv6->prefix[i].is_used) {
   15de0:	f894 30fd 	ldrb.w	r3, [r4, #253]	; 0xfd
   15de4:	079a      	lsls	r2, r3, #30
   15de6:	d508      	bpl.n	15dfa <net_if_ipv6_prefix_rm+0x2e>
		if (!net_ipv6_addr_cmp(&ipv6->prefix[i].prefix, addr) ||
   15de8:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
   15dec:	f7ff fd8e 	bl	1590c <net_ipv6_addr_cmp>
   15df0:	b118      	cbz	r0, 15dfa <net_if_ipv6_prefix_rm+0x2e>
   15df2:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
   15df6:	42b3      	cmp	r3, r6
   15df8:	d025      	beq.n	15e46 <net_if_ipv6_prefix_rm+0x7a>
		if (!ipv6->prefix[i].is_used) {
   15dfa:	f894 3125 	ldrb.w	r3, [r4, #293]	; 0x125
   15dfe:	079b      	lsls	r3, r3, #30
   15e00:	d5eb      	bpl.n	15dda <net_if_ipv6_prefix_rm+0xe>
		if (!net_ipv6_addr_cmp(&ipv6->prefix[i].prefix, addr) ||
   15e02:	4641      	mov	r1, r8
   15e04:	f504 7088 	add.w	r0, r4, #272	; 0x110
   15e08:	f7ff fd80 	bl	1590c <net_ipv6_addr_cmp>
   15e0c:	2800      	cmp	r0, #0
   15e0e:	d0e4      	beq.n	15dda <net_if_ipv6_prefix_rm+0xe>
   15e10:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
   15e14:	42b3      	cmp	r3, r6
   15e16:	d1e0      	bne.n	15dda <net_if_ipv6_prefix_rm+0xe>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   15e18:	2501      	movs	r5, #1
   15e1a:	2028      	movs	r0, #40	; 0x28
		net_if_ipv6_prefix_unset_timer(&ipv6->prefix[i]);
   15e1c:	30d8      	adds	r0, #216	; 0xd8
   15e1e:	4420      	add	r0, r4
   15e20:	f7f6 fc18 	bl	c654 <net_if_ipv6_prefix_unset_timer>
		ipv6->prefix[i].is_used = false;
   15e24:	2328      	movs	r3, #40	; 0x28
   15e26:	fb03 4505 	mla	r5, r3, r5, r4
		remove_prefix_addresses(iface, ipv6, addr, len);
   15e2a:	4638      	mov	r0, r7
		ipv6->prefix[i].is_used = false;
   15e2c:	f895 30fd 	ldrb.w	r3, [r5, #253]	; 0xfd
   15e30:	f36f 0341 	bfc	r3, #1, #1
   15e34:	f885 30fd 	strb.w	r3, [r5, #253]	; 0xfd
		remove_prefix_addresses(iface, ipv6, addr, len);
   15e38:	4642      	mov	r2, r8
   15e3a:	4633      	mov	r3, r6
   15e3c:	4621      	mov	r1, r4
   15e3e:	f7ff fee7 	bl	15c10 <remove_prefix_addresses>
		return true;
   15e42:	2001      	movs	r0, #1
   15e44:	e7ca      	b.n	15ddc <net_if_ipv6_prefix_rm+0x10>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   15e46:	2500      	movs	r5, #0
		if (!net_ipv6_addr_cmp(&ipv6->prefix[i].prefix, addr) ||
   15e48:	4628      	mov	r0, r5
   15e4a:	e7e7      	b.n	15e1c <net_if_ipv6_prefix_rm+0x50>

00015e4c <net_if_ipv6_router_update_lifetime>:
{
   15e4c:	b508      	push	{r3, lr}
   15e4e:	4602      	mov	r2, r0
   15e50:	f7ff fd13 	bl	1587a <z_arch_is_user_context>
	k_delayed_work_submit(&router->lifetime, K_SECONDS(lifetime));
   15e54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   15e58:	4359      	muls	r1, r3
   15e5a:	4610      	mov	r0, r2
}
   15e5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_submit(&router->lifetime, K_SECONDS(lifetime));
   15e60:	f7f5 bfb2 	b.w	bdc8 <k_delayed_work_submit>

00015e64 <net_if_ipv6_get_ll>:
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   15e64:	6840      	ldr	r0, [r0, #4]
{
   15e66:	b510      	push	{r4, lr}
	if (!ipv6) {
   15e68:	b180      	cbz	r0, 15e8c <net_if_ipv6_get_ll+0x28>
		if (!ipv6->unicast[i].is_used ||
   15e6a:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
   15e6e:	079c      	lsls	r4, r3, #30
   15e70:	d511      	bpl.n	15e96 <net_if_ipv6_get_ll+0x32>
   15e72:	1c4a      	adds	r2, r1, #1
   15e74:	d10b      	bne.n	15e8e <net_if_ipv6_get_ll+0x2a>
		     ipv6->unicast[i].addr_state != addr_state) ||
   15e76:	8803      	ldrh	r3, [r0, #0]
   15e78:	2b02      	cmp	r3, #2
   15e7a:	d10c      	bne.n	15e96 <net_if_ipv6_get_ll+0x32>
		if (net_ipv6_is_ll_addr(&ipv6->unicast[i].address.in6_addr)) {
   15e7c:	8884      	ldrh	r4, [r0, #4]
   15e7e:	f248 02fe 	movw	r2, #33022	; 0x80fe
   15e82:	4294      	cmp	r4, r2
   15e84:	f100 0304 	add.w	r3, r0, #4
   15e88:	d105      	bne.n	15e96 <net_if_ipv6_get_ll+0x32>
   15e8a:	4618      	mov	r0, r3
}
   15e8c:	bd10      	pop	{r4, pc}
		    (addr_state != NET_ADDR_ANY_STATE &&
   15e8e:	f990 3045 	ldrsb.w	r3, [r0, #69]	; 0x45
   15e92:	428b      	cmp	r3, r1
   15e94:	d0ef      	beq.n	15e76 <net_if_ipv6_get_ll+0x12>
		if (!ipv6->unicast[i].is_used ||
   15e96:	f890 308f 	ldrb.w	r3, [r0, #143]	; 0x8f
   15e9a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   15e9e:	b18b      	cbz	r3, 15ec4 <net_if_ipv6_get_ll+0x60>
   15ea0:	1c4b      	adds	r3, r1, #1
   15ea2:	d003      	beq.n	15eac <net_if_ipv6_get_ll+0x48>
		    (addr_state != NET_ADDR_ANY_STATE &&
   15ea4:	f990 308d 	ldrsb.w	r3, [r0, #141]	; 0x8d
   15ea8:	428b      	cmp	r3, r1
   15eaa:	d10b      	bne.n	15ec4 <net_if_ipv6_get_ll+0x60>
		     ipv6->unicast[i].addr_state != addr_state) ||
   15eac:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   15eb0:	2b02      	cmp	r3, #2
   15eb2:	d107      	bne.n	15ec4 <net_if_ipv6_get_ll+0x60>
		if (net_ipv6_is_ll_addr(&ipv6->unicast[i].address.in6_addr)) {
   15eb4:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
   15eb8:	f248 02fe 	movw	r2, #33022	; 0x80fe
   15ebc:	4291      	cmp	r1, r2
   15ebe:	f100 034c 	add.w	r3, r0, #76	; 0x4c
   15ec2:	d0e2      	beq.n	15e8a <net_if_ipv6_get_ll+0x26>
		return NULL;
   15ec4:	2000      	movs	r0, #0
   15ec6:	e7e1      	b.n	15e8c <net_if_ipv6_get_ll+0x28>

00015ec8 <net_if_ipv6_calc_reachable_time>:
{
   15ec8:	b538      	push	{r3, r4, r5, lr}
	min_reachable = (MIN_RANDOM_NUMER * ipv6->base_reachable_time)
   15eca:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
   15ece:	f7ff fcd4 	bl	1587a <z_arch_is_user_context>
	       sys_rand32_get() % (max_reachable - min_reachable);
   15ed2:	f7f3 fad1 	bl	9478 <sys_rand32_get>
	min_reachable = (MIN_RANDOM_NUMER * ipv6->base_reachable_time)
   15ed6:	0865      	lsrs	r5, r4, #1
	max_reachable = (MAX_RANDOM_NUMER * ipv6->base_reachable_time)
   15ed8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
	       sys_rand32_get() % (max_reachable - min_reachable);
   15edc:	ebc5 0454 	rsb	r4, r5, r4, lsr #1
   15ee0:	fbb0 f3f4 	udiv	r3, r0, r4
   15ee4:	fb03 0014 	mls	r0, r3, r4, r0
}
   15ee8:	4428      	add	r0, r5
   15eea:	bd38      	pop	{r3, r4, r5, pc}

00015eec <net_if_recv_data>:
	return iface->if_dev->l2;
   15eec:	6803      	ldr	r3, [r0, #0]
	return net_if_l2(iface)->recv(iface, pkt);
   15eee:	685b      	ldr	r3, [r3, #4]
   15ef0:	681b      	ldr	r3, [r3, #0]
   15ef2:	4718      	bx	r3

00015ef4 <process_tx_packet>:
{
   15ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pkt) {
   15ef8:	f1b0 0804 	subs.w	r8, r0, #4
{
   15efc:	4604      	mov	r4, r0
	if (!pkt) {
   15efe:	d028      	beq.n	15f52 <process_tx_packet+0x5e>
	context = net_pkt_context(pkt);
   15f00:	e9d0 7507 	ldrd	r7, r5, [r0, #28]
	if (atomic_test_bit(iface->if_dev->flags, NET_IF_UP)) {
   15f04:	6828      	ldr	r0, [r5, #0]
   15f06:	2100      	movs	r1, #0
   15f08:	300c      	adds	r0, #12
   15f0a:	f7ff fcd1 	bl	158b0 <atomic_test_bit>
   15f0e:	b1d8      	cbz	r0, 15f48 <process_tx_packet+0x54>
   15f10:	682b      	ldr	r3, [r5, #0]
		status = net_if_l2(iface)->send(iface, pkt);
   15f12:	685b      	ldr	r3, [r3, #4]
   15f14:	4641      	mov	r1, r8
   15f16:	685b      	ldr	r3, [r3, #4]
   15f18:	4628      	mov	r0, r5
   15f1a:	4798      	blx	r3
	if (status < 0) {
   15f1c:	1e06      	subs	r6, r0, #0
   15f1e:	da02      	bge.n	15f26 <process_tx_packet+0x32>
		net_pkt_unref(pkt);
   15f20:	4640      	mov	r0, r8
   15f22:	f000 f971 	bl	16208 <net_pkt_unref>
	if (context) {
   15f26:	b12f      	cbz	r7, 15f34 <process_tx_packet+0x40>
   15f28:	f7ff fca7 	bl	1587a <z_arch_is_user_context>
		net_context_send_cb(context, status);
   15f2c:	4631      	mov	r1, r6
   15f2e:	4638      	mov	r0, r7
   15f30:	f7ff fcad 	bl	1588e <net_context_send_cb>
	if (dst->addr) {
   15f34:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15f36:	b163      	cbz	r3, 15f52 <process_tx_packet+0x5e>
		net_if_call_link_cb(iface, dst, status);
   15f38:	4632      	mov	r2, r6
   15f3a:	f104 0130 	add.w	r1, r4, #48	; 0x30
   15f3e:	4628      	mov	r0, r5
}
   15f40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_if_call_link_cb(iface, dst, status);
   15f44:	f7f6 bc9a 	b.w	c87c <net_if_call_link_cb>
   15f48:	f7ff fc97 	bl	1587a <z_arch_is_user_context>
		status = -ENETDOWN;
   15f4c:	f06f 0672 	mvn.w	r6, #114	; 0x72
   15f50:	e7e6      	b.n	15f20 <process_tx_packet+0x2c>
}
   15f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015f56 <net_if_send_data>:
{
   15f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15f58:	4605      	mov	r5, r0
	if (!atomic_test_bit(iface->if_dev->flags, NET_IF_UP)) {
   15f5a:	6800      	ldr	r0, [r0, #0]
	struct net_context *context = net_pkt_context(pkt);
   15f5c:	6a0f      	ldr	r7, [r1, #32]
{
   15f5e:	460c      	mov	r4, r1
	if (!atomic_test_bit(iface->if_dev->flags, NET_IF_UP)) {
   15f60:	300c      	adds	r0, #12
   15f62:	2100      	movs	r1, #0
   15f64:	f7ff fca4 	bl	158b0 <atomic_test_bit>
   15f68:	b9a0      	cbnz	r0, 15f94 <net_if_send_data+0x3e>
   15f6a:	f7ff fc86 	bl	1587a <z_arch_is_user_context>
		status = -ENETDOWN;
   15f6e:	f06f 0672 	mvn.w	r6, #114	; 0x72
		if (context) {
   15f72:	b12f      	cbz	r7, 15f80 <net_if_send_data+0x2a>
   15f74:	f7ff fc81 	bl	1587a <z_arch_is_user_context>
			net_context_send_cb(context, status);
   15f78:	4631      	mov	r1, r6
   15f7a:	4638      	mov	r0, r7
   15f7c:	f7ff fc87 	bl	1588e <net_context_send_cb>
		if (dst->addr) {
   15f80:	6b63      	ldr	r3, [r4, #52]	; 0x34
   15f82:	b12b      	cbz	r3, 15f90 <net_if_send_data+0x3a>
			net_if_call_link_cb(iface, dst, status);
   15f84:	4632      	mov	r2, r6
   15f86:	f104 0134 	add.w	r1, r4, #52	; 0x34
   15f8a:	4628      	mov	r0, r5
   15f8c:	f7f6 fc76 	bl	c87c <net_if_call_link_cb>
   15f90:	2002      	movs	r0, #2
   15f92:	e019      	b.n	15fc8 <net_if_send_data+0x72>
	if (!atomic_test_bit(iface->if_dev->flags, NET_IF_POINTOPOINT) &&
   15f94:	6828      	ldr	r0, [r5, #0]
   15f96:	2101      	movs	r1, #1
   15f98:	300c      	adds	r0, #12
   15f9a:	f7ff fc89 	bl	158b0 <atomic_test_bit>
   15f9e:	b940      	cbnz	r0, 15fb2 <net_if_send_data+0x5c>
   15fa0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   15fa2:	b933      	cbnz	r3, 15fb2 <net_if_send_data+0x5c>
	return net_if_get_link_addr(pkt->iface);
   15fa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15fa6:	681b      	ldr	r3, [r3, #0]
		net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
   15fa8:	691a      	ldr	r2, [r3, #16]
   15faa:	62e2      	str	r2, [r4, #44]	; 0x2c
		net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
   15fac:	7d1b      	ldrb	r3, [r3, #20]
   15fae:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return pkt->family;
   15fb2:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
	if (net_pkt_family(pkt) == AF_INET6) {
   15fb6:	f3c3 0342 	ubfx	r3, r3, #1, #3
   15fba:	2b02      	cmp	r3, #2
   15fbc:	d005      	beq.n	15fca <net_if_send_data+0x74>
		net_if_queue_tx(iface, pkt);
   15fbe:	4628      	mov	r0, r5
   15fc0:	4621      	mov	r1, r4
   15fc2:	f7f5 ffd3 	bl	bf6c <net_if_queue_tx>
   15fc6:	2000      	movs	r0, #0
}
   15fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		verdict = net_ipv6_prepare_for_send(pkt);
   15fca:	4620      	mov	r0, r4
   15fcc:	f001 fbde 	bl	1778c <net_ipv6_prepare_for_send>
	if (verdict == NET_DROP) {
   15fd0:	2802      	cmp	r0, #2
   15fd2:	d102      	bne.n	15fda <net_if_send_data+0x84>
	int status = -EIO;
   15fd4:	f06f 0604 	mvn.w	r6, #4
   15fd8:	e7cb      	b.n	15f72 <net_if_send_data+0x1c>
	} else if (verdict == NET_OK) {
   15fda:	2800      	cmp	r0, #0
   15fdc:	d1f4      	bne.n	15fc8 <net_if_send_data+0x72>
   15fde:	e7ee      	b.n	15fbe <net_if_send_data+0x68>

00015fe0 <net_if_need_calc_tx_checksum>:
   15fe0:	2001      	movs	r0, #1
   15fe2:	4770      	bx	lr

00015fe4 <net_if_need_calc_rx_checksum>:
}
   15fe4:	2001      	movs	r0, #1
   15fe6:	4770      	bx	lr

00015fe8 <net_if_up>:
{
   15fe8:	b510      	push	{r4, lr}
   15fea:	4604      	mov	r4, r0
   15fec:	f7ff fc45 	bl	1587a <z_arch_is_user_context>
	if (atomic_test_bit(iface->if_dev->flags, NET_IF_UP)) {
   15ff0:	6820      	ldr	r0, [r4, #0]
   15ff2:	2100      	movs	r1, #0
   15ff4:	300c      	adds	r0, #12
   15ff6:	f7ff fc5b 	bl	158b0 <atomic_test_bit>
   15ffa:	b9d8      	cbnz	r0, 16034 <net_if_up+0x4c>
   15ffc:	6823      	ldr	r3, [r4, #0]
	if (!net_if_l2(iface)->enable) {
   15ffe:	685b      	ldr	r3, [r3, #4]
   16000:	689b      	ldr	r3, [r3, #8]
   16002:	b9cb      	cbnz	r3, 16038 <net_if_up+0x50>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16004:	6823      	ldr	r3, [r4, #0]
   16006:	f3bf 8f5b 	dmb	ish
   1600a:	330c      	adds	r3, #12
   1600c:	e853 2f00 	ldrex	r2, [r3]
   16010:	f042 0201 	orr.w	r2, r2, #1
   16014:	e843 2100 	strex	r1, r2, [r3]
   16018:	2900      	cmp	r1, #0
   1601a:	d1f7      	bne.n	1600c <net_if_up+0x24>
   1601c:	f3bf 8f5b 	dmb	ish
   16020:	f7ff fc2b 	bl	1587a <z_arch_is_user_context>
	net_if_start_dad(iface);
   16024:	4620      	mov	r0, r4
   16026:	f7ff fcfd 	bl	15a24 <net_if_start_dad>
   1602a:	f7ff fc26 	bl	1587a <z_arch_is_user_context>
	net_if_start_rs(iface);
   1602e:	4620      	mov	r0, r4
   16030:	f7ff fca5 	bl	1597e <net_if_start_rs>
		return 0;
   16034:	2000      	movs	r0, #0
   16036:	e004      	b.n	16042 <net_if_up+0x5a>
	status = net_if_l2(iface)->enable(iface, true);
   16038:	2101      	movs	r1, #1
   1603a:	4620      	mov	r0, r4
   1603c:	4798      	blx	r3
	if (status < 0) {
   1603e:	2800      	cmp	r0, #0
   16040:	dae0      	bge.n	16004 <net_if_up+0x1c>
}
   16042:	bd10      	pop	{r4, pc}

00016044 <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   16044:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   16048:	b923      	cbnz	r3, 16054 <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   1604a:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   1604e:	f000 0001 	and.w	r0, r0, #1
   16052:	4770      	bx	lr
		return false;
   16054:	2000      	movs	r0, #0
}
   16056:	4770      	bx	lr

00016058 <net_buf_frags_len>:
{
   16058:	4603      	mov	r3, r0
	size_t bytes = 0;
   1605a:	2000      	movs	r0, #0
	while (buf) {
   1605c:	b903      	cbnz	r3, 16060 <net_buf_frags_len+0x8>
	}

	return bytes;
}
   1605e:	4770      	bx	lr
		bytes += buf->len;
   16060:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   16062:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   16064:	4410      	add	r0, r2
		buf = buf->frags;
   16066:	e7f9      	b.n	1605c <net_buf_frags_len+0x4>

00016068 <pkt_cursor_jump>:

static void pkt_cursor_jump(struct net_pkt *pkt, bool write)
{
	struct net_pkt_cursor *cursor = &pkt->cursor;

	cursor->buf = cursor->buf->frags;
   16068:	6983      	ldr	r3, [r0, #24]
	while (cursor->buf) {
		size_t len = write ? cursor->buf->size : cursor->buf->len;

		if (!len) {
			cursor->buf = cursor->buf->frags;
   1606a:	681b      	ldr	r3, [r3, #0]
   1606c:	6183      	str	r3, [r0, #24]
	while (cursor->buf) {
   1606e:	6983      	ldr	r3, [r0, #24]
   16070:	b90b      	cbnz	r3, 16076 <pkt_cursor_jump+0xe>
	}

	if (cursor->buf) {
		cursor->pos = cursor->buf->data;
	} else {
		cursor->pos = NULL;
   16072:	61c3      	str	r3, [r0, #28]
	}
}
   16074:	4770      	bx	lr
		size_t len = write ? cursor->buf->size : cursor->buf->len;
   16076:	b121      	cbz	r1, 16082 <pkt_cursor_jump+0x1a>
   16078:	89da      	ldrh	r2, [r3, #14]
		if (!len) {
   1607a:	2a00      	cmp	r2, #0
   1607c:	d0f5      	beq.n	1606a <pkt_cursor_jump+0x2>
		cursor->pos = cursor->buf->data;
   1607e:	689b      	ldr	r3, [r3, #8]
   16080:	e7f7      	b.n	16072 <pkt_cursor_jump+0xa>
		size_t len = write ? cursor->buf->size : cursor->buf->len;
   16082:	899a      	ldrh	r2, [r3, #12]
   16084:	e7f9      	b.n	1607a <pkt_cursor_jump+0x12>

00016086 <pkt_cursor_advance>:
static void pkt_cursor_advance(struct net_pkt *pkt, bool write)
{
	struct net_pkt_cursor *cursor = &pkt->cursor;
	size_t len;

	if (!cursor->buf) {
   16086:	6983      	ldr	r3, [r0, #24]
{
   16088:	b410      	push	{r4}
	if (!cursor->buf) {
   1608a:	b15b      	cbz	r3, 160a4 <pkt_cursor_advance+0x1e>
		return;
	}

	len = write ? cursor->buf->size : cursor->buf->len;
   1608c:	b141      	cbz	r1, 160a0 <pkt_cursor_advance+0x1a>
   1608e:	89dc      	ldrh	r4, [r3, #14]
	if ((cursor->pos - cursor->buf->data) == len) {
   16090:	69c2      	ldr	r2, [r0, #28]
   16092:	689b      	ldr	r3, [r3, #8]
   16094:	1ad2      	subs	r2, r2, r3
   16096:	42a2      	cmp	r2, r4
   16098:	d104      	bne.n	160a4 <pkt_cursor_advance+0x1e>
		pkt_cursor_jump(pkt, write);
	}
}
   1609a:	bc10      	pop	{r4}
		pkt_cursor_jump(pkt, write);
   1609c:	f7ff bfe4 	b.w	16068 <pkt_cursor_jump>
	len = write ? cursor->buf->size : cursor->buf->len;
   160a0:	899c      	ldrh	r4, [r3, #12]
   160a2:	e7f5      	b.n	16090 <pkt_cursor_advance+0xa>
}
   160a4:	bc10      	pop	{r4}
   160a6:	4770      	bx	lr

000160a8 <pkt_cursor_update>:
	return pkt->overwrite;
   160a8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d

static void pkt_cursor_update(struct net_pkt *pkt,
			      size_t length, bool write)
{
   160ac:	b4f0      	push	{r4, r5, r6, r7}
	struct net_pkt_cursor *cursor = &pkt->cursor;
	size_t len;

	if (net_pkt_is_being_overwritten(pkt)) {
   160ae:	f013 0601 	ands.w	r6, r3, #1
   160b2:	6985      	ldr	r5, [r0, #24]
   160b4:	d10f      	bne.n	160d6 <pkt_cursor_update+0x2e>
		write = false;
	}

	len = write ? cursor->buf->size : cursor->buf->len;
   160b6:	b172      	cbz	r2, 160d6 <pkt_cursor_update+0x2e>
   160b8:	89ef      	ldrh	r7, [r5, #14]
	if (length + (cursor->pos - cursor->buf->data) == len &&
   160ba:	69c4      	ldr	r4, [r0, #28]
   160bc:	68ab      	ldr	r3, [r5, #8]
   160be:	1ae3      	subs	r3, r4, r3
   160c0:	440b      	add	r3, r1
   160c2:	42bb      	cmp	r3, r7
   160c4:	d10a      	bne.n	160dc <pkt_cursor_update+0x34>
   160c6:	b116      	cbz	r6, 160ce <pkt_cursor_update+0x26>
	    !(net_pkt_is_being_overwritten(pkt) && len < cursor->buf->size)) {
   160c8:	89eb      	ldrh	r3, [r5, #14]
   160ca:	42bb      	cmp	r3, r7
   160cc:	d806      	bhi.n	160dc <pkt_cursor_update+0x34>
		pkt_cursor_jump(pkt, write);
   160ce:	4611      	mov	r1, r2
	} else {
		cursor->pos += length;
	}
}
   160d0:	bcf0      	pop	{r4, r5, r6, r7}
		pkt_cursor_jump(pkt, write);
   160d2:	f7ff bfc9 	b.w	16068 <pkt_cursor_jump>
	len = write ? cursor->buf->size : cursor->buf->len;
   160d6:	89af      	ldrh	r7, [r5, #12]
   160d8:	2200      	movs	r2, #0
   160da:	e7ee      	b.n	160ba <pkt_cursor_update+0x12>
		cursor->pos += length;
   160dc:	440c      	add	r4, r1
   160de:	61c4      	str	r4, [r0, #28]
}
   160e0:	bcf0      	pop	{r4, r5, r6, r7}
   160e2:	4770      	bx	lr

000160e4 <net_pkt_cursor_operate>:

/* Internal function that does all operation (skip/read/write/memset) */
static int net_pkt_cursor_operate(struct net_pkt *pkt,
				  void *data, size_t length,
				  bool copy, bool write)
{
   160e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   160e8:	f89d 8020 	ldrb.w	r8, [sp, #32]
   160ec:	4606      	mov	r6, r0
   160ee:	460f      	mov	r7, r1
   160f0:	4615      	mov	r5, r2
   160f2:	4699      	mov	r9, r3
	/* We use such variable to avoid lengthy lines */
	struct net_pkt_cursor *c_op = &pkt->cursor;

	while (c_op->buf && length) {
   160f4:	69b3      	ldr	r3, [r6, #24]
   160f6:	2b00      	cmp	r3, #0
   160f8:	d053      	beq.n	161a2 <net_pkt_cursor_operate+0xbe>
   160fa:	b90d      	cbnz	r5, 16100 <net_pkt_cursor_operate+0x1c>
	if (length) {
		NET_DBG("Still some length to go %zu", length);
		return -ENOBUFS;
	}

	return 0;
   160fc:	4628      	mov	r0, r5
   160fe:	e00f      	b.n	16120 <net_pkt_cursor_operate+0x3c>
   16100:	f896 303d 	ldrb.w	r3, [r6, #61]	; 0x3d
		pkt_cursor_advance(pkt, net_pkt_is_being_overwritten(pkt) ?
   16104:	f013 0f01 	tst.w	r3, #1
   16108:	bf0c      	ite	eq
   1610a:	4641      	moveq	r1, r8
   1610c:	2100      	movne	r1, #0
   1610e:	4630      	mov	r0, r6
   16110:	f7ff ffb9 	bl	16086 <pkt_cursor_advance>
		if (c_op->buf == NULL) {
   16114:	69b3      	ldr	r3, [r6, #24]
   16116:	b92b      	cbnz	r3, 16124 <net_pkt_cursor_operate+0x40>
   16118:	f7ff ff94 	bl	16044 <z_arch_is_user_context>
		return -ENOBUFS;
   1611c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   16120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (write && !net_pkt_is_being_overwritten(pkt)) {
   16124:	69f0      	ldr	r0, [r6, #28]
   16126:	689c      	ldr	r4, [r3, #8]
   16128:	1b04      	subs	r4, r0, r4
   1612a:	f1b8 0f00 	cmp.w	r8, #0
   1612e:	d02d      	beq.n	1618c <net_pkt_cursor_operate+0xa8>
   16130:	f896 203d 	ldrb.w	r2, [r6, #61]	; 0x3d
   16134:	07d2      	lsls	r2, r2, #31
   16136:	d429      	bmi.n	1618c <net_pkt_cursor_operate+0xa8>
			d_len = c_op->buf->size - (c_op->pos - c_op->buf->data);
   16138:	89db      	ldrh	r3, [r3, #14]
			d_len = c_op->buf->len - (c_op->pos - c_op->buf->data);
   1613a:	1b1c      	subs	r4, r3, r4
		if (!d_len) {
   1613c:	2c00      	cmp	r4, #0
   1613e:	d0eb      	beq.n	16118 <net_pkt_cursor_operate+0x34>
		if (length < d_len) {
   16140:	42ac      	cmp	r4, r5
   16142:	bf28      	it	cs
   16144:	462c      	movcs	r4, r5
		if (copy) {
   16146:	f1b9 0f00 	cmp.w	r9, #0
   1614a:	d023      	beq.n	16194 <net_pkt_cursor_operate+0xb0>
			memcpy(write ? c_op->pos : data,
   1614c:	f1b8 0f00 	cmp.w	r8, #0
   16150:	d11e      	bne.n	16190 <net_pkt_cursor_operate+0xac>
   16152:	4601      	mov	r1, r0
   16154:	4638      	mov	r0, r7
   16156:	4622      	mov	r2, r4
   16158:	f7ec f910 	bl	237c <memcpy>
		if (write && !net_pkt_is_being_overwritten(pkt)) {
   1615c:	f1b8 0f00 	cmp.w	r8, #0
   16160:	d008      	beq.n	16174 <net_pkt_cursor_operate+0x90>
   16162:	f896 303d 	ldrb.w	r3, [r6, #61]	; 0x3d
   16166:	07db      	lsls	r3, r3, #31
   16168:	d404      	bmi.n	16174 <net_pkt_cursor_operate+0x90>
			net_buf_add(c_op->buf, len);
   1616a:	69b0      	ldr	r0, [r6, #24]
   1616c:	4621      	mov	r1, r4
   1616e:	3008      	adds	r0, #8
   16170:	f7fe ff7c 	bl	1506c <net_buf_simple_add>
		pkt_cursor_update(pkt, len, write);
   16174:	4642      	mov	r2, r8
   16176:	4621      	mov	r1, r4
   16178:	4630      	mov	r0, r6
   1617a:	f7ff ff95 	bl	160a8 <pkt_cursor_update>
		if (copy && data) {
   1617e:	f1b9 0f00 	cmp.w	r9, #0
   16182:	d001      	beq.n	16188 <net_pkt_cursor_operate+0xa4>
   16184:	b107      	cbz	r7, 16188 <net_pkt_cursor_operate+0xa4>
			data = (u8_t *) data + len;
   16186:	4427      	add	r7, r4
		length -= len;
   16188:	1b2d      	subs	r5, r5, r4
   1618a:	e7b3      	b.n	160f4 <net_pkt_cursor_operate+0x10>
			d_len = c_op->buf->len - (c_op->pos - c_op->buf->data);
   1618c:	899b      	ldrh	r3, [r3, #12]
   1618e:	e7d4      	b.n	1613a <net_pkt_cursor_operate+0x56>
   16190:	4639      	mov	r1, r7
   16192:	e7e0      	b.n	16156 <net_pkt_cursor_operate+0x72>
		} else if (data) {
   16194:	2f00      	cmp	r7, #0
   16196:	d0e1      	beq.n	1615c <net_pkt_cursor_operate+0x78>
__ssp_bos_icheck3(memset, void *, int)
   16198:	4622      	mov	r2, r4
   1619a:	6839      	ldr	r1, [r7, #0]
   1619c:	f7ec f929 	bl	23f2 <memset>
   161a0:	e7dc      	b.n	1615c <net_pkt_cursor_operate+0x78>
	if (length) {
   161a2:	2d00      	cmp	r5, #0
   161a4:	d0aa      	beq.n	160fc <net_pkt_cursor_operate+0x18>
   161a6:	e7b7      	b.n	16118 <net_pkt_cursor_operate+0x34>

000161a8 <k_uptime_get>:
   161a8:	e92d 4147 	stmdb	sp!, {r0, r1, r2, r6, r8, lr}
   161ac:	f7ff ff4a 	bl	16044 <z_arch_is_user_context>
   161b0:	b138      	cbz	r0, 161c2 <k_uptime_get+0x1a>
	(void)z_arch_syscall_invoke1((u32_t)&ret, call_id);
   161b2:	4668      	mov	r0, sp
	register u32_t r6 __asm__("r6") = call_id;
   161b4:	2676      	movs	r6, #118	; 0x76
	__asm__ volatile("svc %[svid]\n"
   161b6:	df03      	svc	3
	return ret;
   161b8:	e9dd 0100 	ldrd	r0, r1, [sp]
   161bc:	b003      	add	sp, #12
   161be:	e8bd 8140 	ldmia.w	sp!, {r6, r8, pc}
   161c2:	f002 fc2f 	bl	18a24 <z_impl_k_uptime_get>
   161c6:	e7f9      	b.n	161bc <k_uptime_get+0x14>

000161c8 <net_pkt_ref>:
{
   161c8:	b510      	push	{r4, lr}
		ref = pkt ? atomic_get(&pkt->atomic_ref) : 0;
   161ca:	f100 0328 	add.w	r3, r0, #40	; 0x28
   161ce:	b1a8      	cbz	r0, 161fc <net_pkt_ref+0x34>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   161d0:	f3bf 8f5b 	dmb	ish
   161d4:	681a      	ldr	r2, [r3, #0]
   161d6:	f3bf 8f5b 	dmb	ish
		if (!ref) {
   161da:	b17a      	cbz	r2, 161fc <net_pkt_ref+0x34>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   161dc:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref + 1));
   161e0:	1c51      	adds	r1, r2, #1
   161e2:	e853 4f00 	ldrex	r4, [r3]
   161e6:	4294      	cmp	r4, r2
   161e8:	d104      	bne.n	161f4 <net_pkt_ref+0x2c>
   161ea:	e843 1c00 	strex	ip, r1, [r3]
   161ee:	f1bc 0f00 	cmp.w	ip, #0
   161f2:	d1f6      	bne.n	161e2 <net_pkt_ref+0x1a>
   161f4:	f3bf 8f5b 	dmb	ish
   161f8:	d1e9      	bne.n	161ce <net_pkt_ref+0x6>
}
   161fa:	bd10      	pop	{r4, pc}
			return NULL;
   161fc:	2000      	movs	r0, #0
   161fe:	e7fc      	b.n	161fa <net_pkt_ref+0x32>

00016200 <net_pkt_frag_unref>:
	if (!frag) {
   16200:	b108      	cbz	r0, 16206 <net_pkt_frag_unref+0x6>
	net_buf_unref(frag);
   16202:	f7f5 bba7 	b.w	b954 <net_buf_unref>
}
   16206:	4770      	bx	lr

00016208 <net_pkt_unref>:
{
   16208:	b507      	push	{r0, r1, r2, lr}
   1620a:	9001      	str	r0, [sp, #4]
	if (!pkt) {
   1620c:	b318      	cbz	r0, 16256 <net_pkt_unref+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1620e:	9b01      	ldr	r3, [sp, #4]
   16210:	f3bf 8f5b 	dmb	ish
   16214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16216:	f3bf 8f5b 	dmb	ish
		if (!ref) {
   1621a:	b1e3      	cbz	r3, 16256 <net_pkt_unref+0x4e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1621c:	9a01      	ldr	r2, [sp, #4]
   1621e:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref - 1));
   16222:	1e59      	subs	r1, r3, #1
   16224:	3228      	adds	r2, #40	; 0x28
   16226:	e852 0f00 	ldrex	r0, [r2]
   1622a:	4298      	cmp	r0, r3
   1622c:	d104      	bne.n	16238 <net_pkt_unref+0x30>
   1622e:	e842 1c00 	strex	ip, r1, [r2]
   16232:	f1bc 0f00 	cmp.w	ip, #0
   16236:	d1f6      	bne.n	16226 <net_pkt_unref+0x1e>
   16238:	f3bf 8f5b 	dmb	ish
   1623c:	d1e7      	bne.n	1620e <net_pkt_unref+0x6>
	if (ref > 1) {
   1623e:	2b01      	cmp	r3, #1
   16240:	dc09      	bgt.n	16256 <net_pkt_unref+0x4e>
	if (pkt->frags) {
   16242:	9b01      	ldr	r3, [sp, #4]
   16244:	6958      	ldr	r0, [r3, #20]
   16246:	b108      	cbz	r0, 1624c <net_pkt_unref+0x44>
		net_pkt_frag_unref(pkt->frags);
   16248:	f7ff ffda 	bl	16200 <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
   1624c:	9b01      	ldr	r3, [sp, #4]
   1624e:	a901      	add	r1, sp, #4
   16250:	6918      	ldr	r0, [r3, #16]
   16252:	f7f9 f8a9 	bl	f3a8 <k_mem_slab_free>
}
   16256:	b003      	add	sp, #12
   16258:	f85d fb04 	ldr.w	pc, [sp], #4

0001625c <net_pkt_available_buffer>:
{
   1625c:	b508      	push	{r3, lr}
	if (!pkt) {
   1625e:	b130      	cbz	r0, 1626e <net_pkt_available_buffer+0x12>
	return pkt_get_size(pkt) - net_pkt_get_len(pkt);
   16260:	6940      	ldr	r0, [r0, #20]
	size_t size = 0;
   16262:	2100      	movs	r1, #0
	struct net_buf *buf = pkt->buffer;
   16264:	4603      	mov	r3, r0
	while (buf) {
   16266:	b91b      	cbnz	r3, 16270 <net_pkt_available_buffer+0x14>
	return net_buf_frags_len(pkt->frags);
   16268:	f7ff fef6 	bl	16058 <net_buf_frags_len>
	return pkt_get_size(pkt) - net_pkt_get_len(pkt);
   1626c:	1a08      	subs	r0, r1, r0
}
   1626e:	bd08      	pop	{r3, pc}
		size += buf->size;
   16270:	89da      	ldrh	r2, [r3, #14]
		buf = buf->frags;
   16272:	681b      	ldr	r3, [r3, #0]
		size += buf->size;
   16274:	4411      	add	r1, r2
		buf = buf->frags;
   16276:	e7f6      	b.n	16266 <net_pkt_available_buffer+0xa>

00016278 <net_pkt_available_payload_buffer>:
{
   16278:	b538      	push	{r3, r4, r5, lr}
	if (!pkt) {
   1627a:	4605      	mov	r5, r0
   1627c:	b1c8      	cbz	r0, 162b2 <net_pkt_available_payload_buffer+0x3a>
	return pkt->family;
   1627e:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
	hdr_len = pkt_estimate_headers_length(pkt, net_pkt_family(pkt), proto);
   16282:	f3c3 0442 	ubfx	r4, r3, #1, #3
	if (family == AF_UNSPEC) {
   16286:	b144      	cbz	r4, 1629a <net_pkt_available_payload_buffer+0x22>
		hdr_len += NET_IPV6H_LEN;
   16288:	2c02      	cmp	r4, #2
   1628a:	bf14      	ite	ne
   1628c:	2400      	movne	r4, #0
   1628e:	2428      	moveq	r4, #40	; 0x28
	} else if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   16290:	2911      	cmp	r1, #17
   16292:	d10f      	bne.n	162b4 <net_pkt_available_payload_buffer+0x3c>
		hdr_len += NET_UDPH_LEN;
   16294:	3408      	adds	r4, #8
	return z_arch_is_user_context();
   16296:	f7ff fed5 	bl	16044 <z_arch_is_user_context>
	return net_buf_frags_len(pkt->frags);
   1629a:	6968      	ldr	r0, [r5, #20]
   1629c:	f7ff fedc 	bl	16058 <net_buf_frags_len>
	hdr_len = hdr_len <= len ? 0 : hdr_len - len;
   162a0:	42a0      	cmp	r0, r4
   162a2:	bf38      	it	cc
   162a4:	1a24      	subcc	r4, r4, r0
	len = net_pkt_available_buffer(pkt) - hdr_len;
   162a6:	4628      	mov	r0, r5
	hdr_len = hdr_len <= len ? 0 : hdr_len - len;
   162a8:	bf28      	it	cs
   162aa:	2400      	movcs	r4, #0
	len = net_pkt_available_buffer(pkt) - hdr_len;
   162ac:	f7ff ffd6 	bl	1625c <net_pkt_available_buffer>
   162b0:	1b00      	subs	r0, r0, r4
}
   162b2:	bd38      	pop	{r3, r4, r5, pc}
	} else if (proto == IPPROTO_ICMP || proto == IPPROTO_ICMPV6) {
   162b4:	2901      	cmp	r1, #1
   162b6:	d001      	beq.n	162bc <net_pkt_available_payload_buffer+0x44>
   162b8:	293a      	cmp	r1, #58	; 0x3a
   162ba:	d1ec      	bne.n	16296 <net_pkt_available_payload_buffer+0x1e>
		hdr_len += NET_ICMPH_LEN;
   162bc:	3404      	adds	r4, #4
   162be:	e7ea      	b.n	16296 <net_pkt_available_payload_buffer+0x1e>

000162c0 <net_pkt_trim_buffer>:
{
   162c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   162c2:	4605      	mov	r5, r0
	buf = pkt->buffer;
   162c4:	6940      	ldr	r0, [r0, #20]
			buf->frags = NULL;
   162c6:	2700      	movs	r7, #0
	prev = buf;
   162c8:	4604      	mov	r4, r0
	while (buf) {
   162ca:	b900      	cbnz	r0, 162ce <net_pkt_trim_buffer+0xe>
}
   162cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!buf->len) {
   162ce:	8983      	ldrh	r3, [r0, #12]
		struct net_buf *next = buf->frags;
   162d0:	6806      	ldr	r6, [r0, #0]
		if (!buf->len) {
   162d2:	b93b      	cbnz	r3, 162e4 <net_pkt_trim_buffer+0x24>
			if (buf == pkt->buffer) {
   162d4:	696b      	ldr	r3, [r5, #20]
   162d6:	4283      	cmp	r3, r0
   162d8:	d107      	bne.n	162ea <net_pkt_trim_buffer+0x2a>
				pkt->buffer = next;
   162da:	616e      	str	r6, [r5, #20]
			buf->frags = NULL;
   162dc:	6007      	str	r7, [r0, #0]
			net_buf_unref(buf);
   162de:	f7f5 fb39 	bl	b954 <net_buf_unref>
   162e2:	4620      	mov	r0, r4
   162e4:	4604      	mov	r4, r0
   162e6:	4630      	mov	r0, r6
   162e8:	e7ef      	b.n	162ca <net_pkt_trim_buffer+0xa>
			} else if (buf == prev->frags) {
   162ea:	6823      	ldr	r3, [r4, #0]
   162ec:	4283      	cmp	r3, r0
				prev->frags = next;
   162ee:	bf08      	it	eq
   162f0:	6026      	streq	r6, [r4, #0]
   162f2:	e7f3      	b.n	162dc <net_pkt_trim_buffer+0x1c>

000162f4 <net_pkt_cursor_init>:
	pkt->cursor.buf = pkt->buffer;
   162f4:	6943      	ldr	r3, [r0, #20]
   162f6:	6183      	str	r3, [r0, #24]
	if (pkt->cursor.buf) {
   162f8:	b103      	cbz	r3, 162fc <net_pkt_cursor_init+0x8>
		pkt->cursor.pos = pkt->cursor.buf->data;
   162fa:	689b      	ldr	r3, [r3, #8]
   162fc:	61c3      	str	r3, [r0, #28]
}
   162fe:	4770      	bx	lr

00016300 <pkt_alloc>:
{
   16300:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16302:	460d      	mov	r5, r1
   16304:	4604      	mov	r4, r0
	if (k_is_in_isr()) {
   16306:	f7f9 ffb3 	bl	10270 <k_is_in_isr>
   1630a:	2800      	cmp	r0, #0
	ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   1630c:	a901      	add	r1, sp, #4
   1630e:	bf0c      	ite	eq
   16310:	462a      	moveq	r2, r5
   16312:	2200      	movne	r2, #0
   16314:	4620      	mov	r0, r4
   16316:	f7f9 f81b 	bl	f350 <k_mem_slab_alloc>
	if (ret) {
   1631a:	4601      	mov	r1, r0
   1631c:	b978      	cbnz	r0, 1633e <pkt_alloc+0x3e>
   1631e:	2248      	movs	r2, #72	; 0x48
   16320:	9801      	ldr	r0, [sp, #4]
   16322:	f7ec f866 	bl	23f2 <memset>
	pkt->atomic_ref = ATOMIC_INIT(1);
   16326:	9801      	ldr	r0, [sp, #4]
   16328:	2301      	movs	r3, #1
   1632a:	6283      	str	r3, [r0, #40]	; 0x28
	pkt->ipv6_next_hdr = next_hdr;
   1632c:	23ff      	movs	r3, #255	; 0xff
	pkt->slab = slab;
   1632e:	6104      	str	r4, [r0, #16]
   16330:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
	net_pkt_cursor_init(pkt);
   16334:	f7ff ffde 	bl	162f4 <net_pkt_cursor_init>
	return pkt;
   16338:	9801      	ldr	r0, [sp, #4]
}
   1633a:	b003      	add	sp, #12
   1633c:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1633e:	2000      	movs	r0, #0
   16340:	e7fb      	b.n	1633a <pkt_alloc+0x3a>

00016342 <pkt_alloc_on_iface>:
{
   16342:	b510      	push	{r4, lr}
   16344:	460c      	mov	r4, r1
	pkt = pkt_alloc(slab, timeout);
   16346:	4611      	mov	r1, r2
   16348:	f7ff ffda 	bl	16300 <pkt_alloc>
	if (pkt) {
   1634c:	b148      	cbz	r0, 16362 <pkt_alloc_on_iface+0x20>
	pkt->iface = iface;
   1634e:	6244      	str	r4, [r0, #36]	; 0x24
	if (iface) {
   16350:	b13c      	cbz	r4, 16362 <pkt_alloc_on_iface+0x20>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   16352:	6823      	ldr	r3, [r4, #0]
   16354:	7d5b      	ldrb	r3, [r3, #21]
   16356:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   1635a:	6823      	ldr	r3, [r4, #0]
   1635c:	7d5b      	ldrb	r3, [r3, #21]
   1635e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
   16362:	bd10      	pop	{r4, pc}

00016364 <net_pkt_append_buffer>:
	if (!pkt->buffer) {
   16364:	6943      	ldr	r3, [r0, #20]
{
   16366:	b510      	push	{r4, lr}
   16368:	4602      	mov	r2, r0
   1636a:	460c      	mov	r4, r1
	if (!pkt->buffer) {
   1636c:	b923      	cbnz	r3, 16378 <net_pkt_append_buffer+0x14>
		pkt->buffer = buffer;
   1636e:	6151      	str	r1, [r2, #20]
}
   16370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_pkt_cursor_init(pkt);
   16374:	f7ff bfbe 	b.w	162f4 <net_pkt_cursor_init>
		net_buf_frag_insert(net_buf_frag_last(pkt->buffer), buffer);
   16378:	4618      	mov	r0, r3
   1637a:	f7fe fe67 	bl	1504c <net_buf_frag_last>
   1637e:	4621      	mov	r1, r4
}
   16380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_buf_frag_insert(net_buf_frag_last(pkt->buffer), buffer);
   16384:	f7fe be67 	b.w	15056 <net_buf_frag_insert>

00016388 <pkt_alloc_with_buffer>:
{
   16388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1638c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1638e:	4604      	mov	r4, r0
   16390:	4617      	mov	r7, r2
   16392:	4698      	mov	r8, r3
   16394:	4689      	mov	r9, r1
	return (u32_t)k_uptime_get();
   16396:	f7ff ff07 	bl	161a8 <k_uptime_get>
   1639a:	4606      	mov	r6, r0
   1639c:	f7ff fe52 	bl	16044 <z_arch_is_user_context>
	pkt = pkt_alloc_on_iface(slab, iface, timeout);
   163a0:	4620      	mov	r0, r4
   163a2:	462a      	mov	r2, r5
   163a4:	4649      	mov	r1, r9
   163a6:	f7ff ffcc 	bl	16342 <pkt_alloc_on_iface>
	if (!pkt) {
   163aa:	4604      	mov	r4, r0
   163ac:	b1d8      	cbz	r0, 163e6 <pkt_alloc_with_buffer+0x5e>
	pkt->family = family;
   163ae:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
	if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   163b2:	1c6b      	adds	r3, r5, #1
   163b4:	f368 0243 	bfi	r2, r8, #1, #3
   163b8:	2b01      	cmp	r3, #1
   163ba:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
   163be:	d906      	bls.n	163ce <pkt_alloc_with_buffer+0x46>
   163c0:	f7ff fef2 	bl	161a8 <k_uptime_get>
		u32_t diff = k_uptime_get_32() - alloc_start;
   163c4:	1b80      	subs	r0, r0, r6
		timeout -= MIN(timeout, diff);
   163c6:	42a8      	cmp	r0, r5
   163c8:	bf94      	ite	ls
   163ca:	1a2d      	subls	r5, r5, r0
   163cc:	1b6d      	subhi	r5, r5, r5
	ret = net_pkt_alloc_buffer(pkt, size, proto, timeout);
   163ce:	462b      	mov	r3, r5
   163d0:	f89d 2020 	ldrb.w	r2, [sp, #32]
   163d4:	4639      	mov	r1, r7
   163d6:	4620      	mov	r0, r4
   163d8:	f7f6 faea 	bl	c9b0 <net_pkt_alloc_buffer>
	if (ret) {
   163dc:	b118      	cbz	r0, 163e6 <pkt_alloc_with_buffer+0x5e>
		net_pkt_unref(pkt);
   163de:	4620      	mov	r0, r4
   163e0:	f7ff ff12 	bl	16208 <net_pkt_unref>
		return NULL;
   163e4:	2400      	movs	r4, #0
}
   163e6:	4620      	mov	r0, r4
   163e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000163ec <net_pkt_skip>:

int net_pkt_skip(struct net_pkt *pkt, size_t skip)
{
   163ec:	b513      	push	{r0, r1, r4, lr}
   163ee:	460a      	mov	r2, r1
   163f0:	4604      	mov	r4, r0
   163f2:	f7ff fe27 	bl	16044 <z_arch_is_user_context>
	NET_DBG("pkt %p skip %zu", pkt, skip);

	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
   163f6:	2301      	movs	r3, #1
   163f8:	9300      	str	r3, [sp, #0]
   163fa:	2300      	movs	r3, #0
   163fc:	4619      	mov	r1, r3
   163fe:	4620      	mov	r0, r4
   16400:	f7ff fe70 	bl	160e4 <net_pkt_cursor_operate>
}
   16404:	b002      	add	sp, #8
   16406:	bd10      	pop	{r4, pc}

00016408 <net_pkt_memset>:

int net_pkt_memset(struct net_pkt *pkt, int byte, size_t amount)
{
   16408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1640a:	4604      	mov	r4, r0
   1640c:	9103      	str	r1, [sp, #12]
   1640e:	f7ff fe19 	bl	16044 <z_arch_is_user_context>
	NET_DBG("pkt %p byte %d amount %zu", pkt, byte, amount);

	return net_pkt_cursor_operate(pkt, &byte, amount, false, true);
   16412:	2301      	movs	r3, #1
   16414:	9300      	str	r3, [sp, #0]
   16416:	a903      	add	r1, sp, #12
   16418:	2300      	movs	r3, #0
   1641a:	4620      	mov	r0, r4
   1641c:	f7ff fe62 	bl	160e4 <net_pkt_cursor_operate>
}
   16420:	b004      	add	sp, #16
   16422:	bd10      	pop	{r4, pc}

00016424 <net_pkt_read>:

int net_pkt_read(struct net_pkt *pkt, void *data, size_t length)
{
   16424:	b513      	push	{r0, r1, r4, lr}
   16426:	4604      	mov	r4, r0
   16428:	f7ff fe0c 	bl	16044 <z_arch_is_user_context>
	NET_DBG("pkt %p data %p length %zu", pkt, data, length);

	return net_pkt_cursor_operate(pkt, data, length, true, false);
   1642c:	2300      	movs	r3, #0
   1642e:	9300      	str	r3, [sp, #0]
   16430:	4620      	mov	r0, r4
   16432:	2301      	movs	r3, #1
   16434:	f7ff fe56 	bl	160e4 <net_pkt_cursor_operate>
}
   16438:	b002      	add	sp, #8
   1643a:	bd10      	pop	{r4, pc}

0001643c <net_pkt_read_be32>:

	return ret;
}

int net_pkt_read_be32(struct net_pkt *pkt, u32_t *data)
{
   1643c:	b513      	push	{r0, r1, r4, lr}
	u8_t d32[4];
	int ret;

	ret = net_pkt_read(pkt, d32, sizeof(u32_t));
   1643e:	2204      	movs	r2, #4
{
   16440:	460c      	mov	r4, r1
	ret = net_pkt_read(pkt, d32, sizeof(u32_t));
   16442:	eb0d 0102 	add.w	r1, sp, r2
   16446:	f7ff ffed 	bl	16424 <net_pkt_read>

	*data = d32[0] << 24 | d32[1] << 16 | d32[2] << 8 | d32[3];
   1644a:	9b01      	ldr	r3, [sp, #4]
   1644c:	ba1b      	rev	r3, r3
   1644e:	6023      	str	r3, [r4, #0]

	return ret;
}
   16450:	b002      	add	sp, #8
   16452:	bd10      	pop	{r4, pc}

00016454 <net_pkt_copy>:
}

int net_pkt_copy(struct net_pkt *pkt_dst,
		 struct net_pkt *pkt_src,
		 size_t length)
{
   16454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16456:	4606      	mov	r6, r0
   16458:	460f      	mov	r7, r1
   1645a:	4614      	mov	r4, r2
	struct net_pkt_cursor *c_dst = &pkt_dst->cursor;
	struct net_pkt_cursor *c_src = &pkt_src->cursor;

	while (c_dst->buf && c_src->buf && length) {
   1645c:	69b3      	ldr	r3, [r6, #24]
   1645e:	2b00      	cmp	r3, #0
   16460:	d046      	beq.n	164f0 <net_pkt_copy+0x9c>
   16462:	69bb      	ldr	r3, [r7, #24]
   16464:	2b00      	cmp	r3, #0
   16466:	d043      	beq.n	164f0 <net_pkt_copy+0x9c>
   16468:	b90c      	cbnz	r4, 1646e <net_pkt_copy+0x1a>
	if (length) {
		NET_DBG("Still some length to go %zu", length);
		return -ENOBUFS;
	}

	return 0;
   1646a:	4620      	mov	r0, r4
   1646c:	e00d      	b.n	1648a <net_pkt_copy+0x36>
		pkt_cursor_advance(pkt_dst, true);
   1646e:	2101      	movs	r1, #1
   16470:	4630      	mov	r0, r6
   16472:	f7ff fe08 	bl	16086 <pkt_cursor_advance>
		pkt_cursor_advance(pkt_src, false);
   16476:	2100      	movs	r1, #0
   16478:	4638      	mov	r0, r7
   1647a:	f7ff fe04 	bl	16086 <pkt_cursor_advance>
		if (!c_dst->buf || !c_src->buf) {
   1647e:	69b2      	ldr	r2, [r6, #24]
   16480:	b922      	cbnz	r2, 1648c <net_pkt_copy+0x38>
   16482:	f7ff fddf 	bl	16044 <z_arch_is_user_context>
		return -ENOBUFS;
   16486:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1648a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!c_dst->buf || !c_src->buf) {
   1648c:	69bb      	ldr	r3, [r7, #24]
   1648e:	2b00      	cmp	r3, #0
   16490:	d0f7      	beq.n	16482 <net_pkt_copy+0x2e>
		s_len = c_src->buf->len - (c_src->pos - c_src->buf->data);
   16492:	899d      	ldrh	r5, [r3, #12]
   16494:	69f9      	ldr	r1, [r7, #28]
   16496:	689b      	ldr	r3, [r3, #8]
		d_len = c_dst->buf->size - (c_dst->pos - c_dst->buf->data);
   16498:	69f0      	ldr	r0, [r6, #28]
		s_len = c_src->buf->len - (c_src->pos - c_src->buf->data);
   1649a:	1acb      	subs	r3, r1, r3
   1649c:	1aed      	subs	r5, r5, r3
		d_len = c_dst->buf->size - (c_dst->pos - c_dst->buf->data);
   1649e:	89d3      	ldrh	r3, [r2, #14]
   164a0:	6892      	ldr	r2, [r2, #8]
		if (length < s_len && length < d_len) {
   164a2:	42ac      	cmp	r4, r5
		d_len = c_dst->buf->size - (c_dst->pos - c_dst->buf->data);
   164a4:	eba0 0202 	sub.w	r2, r0, r2
   164a8:	eba3 0302 	sub.w	r3, r3, r2
		if (length < s_len && length < d_len) {
   164ac:	d201      	bcs.n	164b2 <net_pkt_copy+0x5e>
   164ae:	429c      	cmp	r4, r3
   164b0:	d31c      	bcc.n	164ec <net_pkt_copy+0x98>
			if (d_len < s_len) {
   164b2:	429d      	cmp	r5, r3
   164b4:	bf28      	it	cs
   164b6:	461d      	movcs	r5, r3
		if (!len) {
   164b8:	2d00      	cmp	r5, #0
   164ba:	d0e2      	beq.n	16482 <net_pkt_copy+0x2e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   164bc:	462a      	mov	r2, r5
   164be:	f7eb ff5d 	bl	237c <memcpy>
	return pkt->overwrite;
   164c2:	f896 303d 	ldrb.w	r3, [r6, #61]	; 0x3d
		if (!net_pkt_is_being_overwritten(pkt_dst)) {
   164c6:	07db      	lsls	r3, r3, #31
   164c8:	d404      	bmi.n	164d4 <net_pkt_copy+0x80>
			net_buf_add(c_dst->buf, len);
   164ca:	69b0      	ldr	r0, [r6, #24]
   164cc:	4629      	mov	r1, r5
   164ce:	3008      	adds	r0, #8
   164d0:	f7fe fdcc 	bl	1506c <net_buf_simple_add>
		pkt_cursor_update(pkt_dst, len, true);
   164d4:	2201      	movs	r2, #1
   164d6:	4629      	mov	r1, r5
   164d8:	4630      	mov	r0, r6
   164da:	f7ff fde5 	bl	160a8 <pkt_cursor_update>
		pkt_cursor_update(pkt_src, len, false);
   164de:	2200      	movs	r2, #0
   164e0:	4629      	mov	r1, r5
   164e2:	4638      	mov	r0, r7
   164e4:	f7ff fde0 	bl	160a8 <pkt_cursor_update>
		length -= len;
   164e8:	1b64      	subs	r4, r4, r5
   164ea:	e7b7      	b.n	1645c <net_pkt_copy+0x8>
   164ec:	4625      	mov	r5, r4
   164ee:	e7e5      	b.n	164bc <net_pkt_copy+0x68>
	if (length) {
   164f0:	2c00      	cmp	r4, #0
   164f2:	d0ba      	beq.n	1646a <net_pkt_copy+0x16>
   164f4:	e7c5      	b.n	16482 <net_pkt_copy+0x2e>

000164f6 <net_pkt_remaining_data>:
size_t net_pkt_remaining_data(struct net_pkt *pkt)
{
	struct net_buf *buf;
	size_t data_length;

	if (!pkt || !pkt->cursor.buf || !pkt->cursor.pos) {
   164f6:	b170      	cbz	r0, 16516 <net_pkt_remaining_data+0x20>
   164f8:	6983      	ldr	r3, [r0, #24]
   164fa:	b15b      	cbz	r3, 16514 <net_pkt_remaining_data+0x1e>
   164fc:	69c0      	ldr	r0, [r0, #28]
   164fe:	b150      	cbz	r0, 16516 <net_pkt_remaining_data+0x20>
		return 0;
	}

	buf = pkt->cursor.buf;
	data_length = buf->len - (pkt->cursor.pos - buf->data);
   16500:	6899      	ldr	r1, [r3, #8]
   16502:	899a      	ldrh	r2, [r3, #12]
   16504:	1a40      	subs	r0, r0, r1
   16506:	1a10      	subs	r0, r2, r0

	buf = buf->frags;
	while (buf) {
		data_length += buf->len;
		buf = buf->frags;
   16508:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1650a:	b903      	cbnz	r3, 1650e <net_pkt_remaining_data+0x18>
   1650c:	4770      	bx	lr
		data_length += buf->len;
   1650e:	899a      	ldrh	r2, [r3, #12]
   16510:	4410      	add	r0, r2
   16512:	e7f9      	b.n	16508 <net_pkt_remaining_data+0x12>
		return 0;
   16514:	4618      	mov	r0, r3
	}

	return data_length;
}
   16516:	4770      	bx	lr

00016518 <net_pkt_update_length>:

int net_pkt_update_length(struct net_pkt *pkt, size_t length)
{
	struct net_buf *buf;

	for (buf = pkt->buffer; buf; buf = buf->frags) {
   16518:	6943      	ldr	r3, [r0, #20]
   1651a:	b92b      	cbnz	r3, 16528 <net_pkt_update_length+0x10>
			buf->len = length;
			length = 0;
		}
	}

	return !length ? 0 : -EINVAL;
   1651c:	2900      	cmp	r1, #0
}
   1651e:	bf14      	ite	ne
   16520:	f06f 0015 	mvnne.w	r0, #21
   16524:	2000      	moveq	r0, #0
   16526:	4770      	bx	lr
		if (buf->len < length) {
   16528:	899a      	ldrh	r2, [r3, #12]
   1652a:	428a      	cmp	r2, r1
			buf->len = length;
   1652c:	bf2a      	itet	cs
   1652e:	8199      	strhcs	r1, [r3, #12]
			length -= buf->len;
   16530:	1a89      	subcc	r1, r1, r2
			length = 0;
   16532:	2100      	movcs	r1, #0
	for (buf = pkt->buffer; buf; buf = buf->frags) {
   16534:	681b      	ldr	r3, [r3, #0]
   16536:	e7f0      	b.n	1651a <net_pkt_update_length+0x2>

00016538 <net_pkt_get_current_offset>:
u16_t net_pkt_get_current_offset(struct net_pkt *pkt)
{
	struct net_buf *buf = pkt->buffer;
	u16_t offset;

	if (!pkt->cursor.buf || !pkt->cursor.pos) {
   16538:	6981      	ldr	r1, [r0, #24]
{
   1653a:	b510      	push	{r4, lr}
	if (!pkt->cursor.buf || !pkt->cursor.pos) {
   1653c:	b179      	cbz	r1, 1655e <net_pkt_get_current_offset+0x26>
   1653e:	69c3      	ldr	r3, [r0, #28]
   16540:	b17b      	cbz	r3, 16562 <net_pkt_get_current_offset+0x2a>
	struct net_buf *buf = pkt->buffer;
   16542:	6944      	ldr	r4, [r0, #20]
		return 0;
	}

	offset = 0U;
   16544:	2200      	movs	r2, #0

	while (buf != pkt->cursor.buf) {
   16546:	42a1      	cmp	r1, r4
   16548:	d104      	bne.n	16554 <net_pkt_get_current_offset+0x1c>
		offset += buf->len;
		buf = buf->frags;
	}

	offset += pkt->cursor.pos - buf->data;
   1654a:	6888      	ldr	r0, [r1, #8]
   1654c:	1a1b      	subs	r3, r3, r0
   1654e:	4413      	add	r3, r2
   16550:	b298      	uxth	r0, r3

	return offset;
}
   16552:	bd10      	pop	{r4, pc}
		offset += buf->len;
   16554:	89a0      	ldrh	r0, [r4, #12]
		buf = buf->frags;
   16556:	6824      	ldr	r4, [r4, #0]
		offset += buf->len;
   16558:	4402      	add	r2, r0
   1655a:	b292      	uxth	r2, r2
		buf = buf->frags;
   1655c:	e7f3      	b.n	16546 <net_pkt_get_current_offset+0xe>
		return 0;
   1655e:	4608      	mov	r0, r1
   16560:	e7f7      	b.n	16552 <net_pkt_get_current_offset+0x1a>
   16562:	4618      	mov	r0, r3
   16564:	e7f5      	b.n	16552 <net_pkt_get_current_offset+0x1a>

00016566 <net_pkt_is_contiguous>:

bool net_pkt_is_contiguous(struct net_pkt *pkt, size_t size)
{
	if (pkt->cursor.buf && pkt->cursor.pos) {
   16566:	6982      	ldr	r2, [r0, #24]
{
   16568:	b510      	push	{r4, lr}
	if (pkt->cursor.buf && pkt->cursor.pos) {
   1656a:	b17a      	cbz	r2, 1658c <net_pkt_is_contiguous+0x26>
   1656c:	69c3      	ldr	r3, [r0, #28]
   1656e:	b17b      	cbz	r3, 16590 <net_pkt_is_contiguous+0x2a>
   16570:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
		size_t len;

		len = net_pkt_is_being_overwritten(pkt) ?
			pkt->cursor.buf->len : pkt->cursor.buf->size;
   16574:	07c0      	lsls	r0, r0, #31
		len -= pkt->cursor.pos - pkt->cursor.buf->data;
   16576:	6890      	ldr	r0, [r2, #8]
			pkt->cursor.buf->len : pkt->cursor.buf->size;
   16578:	bf4c      	ite	mi
   1657a:	8994      	ldrhmi	r4, [r2, #12]
   1657c:	89d4      	ldrhpl	r4, [r2, #14]
		len -= pkt->cursor.pos - pkt->cursor.buf->data;
   1657e:	1a1b      	subs	r3, r3, r0
   16580:	1ae3      	subs	r3, r4, r3
		if (len >= size) {
   16582:	428b      	cmp	r3, r1
   16584:	bf34      	ite	cc
   16586:	2000      	movcc	r0, #0
   16588:	2001      	movcs	r0, #1
			return true;
		}
	}

	return false;
}
   1658a:	bd10      	pop	{r4, pc}
	return false;
   1658c:	4610      	mov	r0, r2
   1658e:	e7fc      	b.n	1658a <net_pkt_is_contiguous+0x24>
   16590:	4618      	mov	r0, r3
   16592:	e7fa      	b.n	1658a <net_pkt_is_contiguous+0x24>

00016594 <net_pkt_write>:
{
   16594:	b573      	push	{r0, r1, r4, r5, r6, lr}
   16596:	4604      	mov	r4, r0
   16598:	460e      	mov	r6, r1
   1659a:	4615      	mov	r5, r2
   1659c:	f7ff fd52 	bl	16044 <z_arch_is_user_context>
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
   165a0:	69e3      	ldr	r3, [r4, #28]
   165a2:	4299      	cmp	r1, r3
   165a4:	d10a      	bne.n	165bc <net_pkt_write+0x28>
   165a6:	4611      	mov	r1, r2
   165a8:	4620      	mov	r0, r4
   165aa:	f7ff ffdc 	bl	16566 <net_pkt_is_contiguous>
   165ae:	b128      	cbz	r0, 165bc <net_pkt_write+0x28>
		return net_pkt_skip(pkt, length);
   165b0:	4620      	mov	r0, r4
}
   165b2:	b002      	add	sp, #8
   165b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return net_pkt_skip(pkt, length);
   165b8:	f7ff bf18 	b.w	163ec <net_pkt_skip>
	return net_pkt_cursor_operate(pkt, (void *)data, length, true, true);
   165bc:	2301      	movs	r3, #1
   165be:	9300      	str	r3, [sp, #0]
   165c0:	462a      	mov	r2, r5
   165c2:	4631      	mov	r1, r6
   165c4:	4620      	mov	r0, r4
   165c6:	f7ff fd8d 	bl	160e4 <net_pkt_cursor_operate>
}
   165ca:	b002      	add	sp, #8
   165cc:	bd70      	pop	{r4, r5, r6, pc}

000165ce <net_pkt_get_data>:

void *net_pkt_get_data(struct net_pkt *pkt,
		       struct net_pkt_data_access *access)
{
   165ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return NULL;
		}

		return pkt->cursor.pos;
	} else {
		if (net_pkt_is_contiguous(pkt, access->size)) {
   165d2:	f8d1 9004 	ldr.w	r9, [r1, #4]
{
   165d6:	460d      	mov	r5, r1
		if (net_pkt_is_contiguous(pkt, access->size)) {
   165d8:	4649      	mov	r1, r9
{
   165da:	4604      	mov	r4, r0
		if (net_pkt_is_contiguous(pkt, access->size)) {
   165dc:	f7ff ffc3 	bl	16566 <net_pkt_is_contiguous>
   165e0:	4680      	mov	r8, r0
   165e2:	b118      	cbz	r0, 165ec <net_pkt_get_data+0x1e>
			access->data = pkt->cursor.pos;
   165e4:	69e3      	ldr	r3, [r4, #28]
   165e6:	602b      	str	r3, [r5, #0]
			}

			net_pkt_cursor_restore(pkt, &backup);
		}

		return access->data;
   165e8:	6829      	ldr	r1, [r5, #0]
   165ea:	e007      	b.n	165fc <net_pkt_get_data+0x2e>
   165ec:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
		} else if (net_pkt_is_being_overwritten(pkt)) {
   165f0:	07db      	lsls	r3, r3, #31
   165f2:	d5f9      	bpl.n	165e8 <net_pkt_get_data+0x1a>
   165f4:	6829      	ldr	r1, [r5, #0]
			if (!access->data) {
   165f6:	b921      	cbnz	r1, 16602 <net_pkt_get_data+0x34>
   165f8:	f7ff fd24 	bl	16044 <z_arch_is_user_context>
	}

	return NULL;
}
   165fc:	4608      	mov	r0, r1
   165fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (net_pkt_read(pkt, access->data, access->size)) {
   16602:	464a      	mov	r2, r9
   16604:	4620      	mov	r0, r4
	backup->pos = pkt->cursor.pos;
   16606:	e9d4 7606 	ldrd	r7, r6, [r4, #24]
   1660a:	f7ff ff0b 	bl	16424 <net_pkt_read>
	pkt->cursor.pos = backup->pos;
   1660e:	e9c4 7606 	strd	r7, r6, [r4, #24]
   16612:	2800      	cmp	r0, #0
   16614:	d0e8      	beq.n	165e8 <net_pkt_get_data+0x1a>
				return NULL;
   16616:	4641      	mov	r1, r8
   16618:	e7f0      	b.n	165fc <net_pkt_get_data+0x2e>

0001661a <net_pkt_set_data>:
{
	if (IS_ENABLED(CONFIG_NET_HEADERS_ALWAYS_CONTIGUOUS)) {
		return net_pkt_skip(pkt, access->size);
	}

	return net_pkt_write(pkt, access->data, access->size);
   1661a:	e9d1 1200 	ldrd	r1, r2, [r1]
   1661e:	f7ff bfb9 	b.w	16594 <net_pkt_write>

00016622 <net_pkt_init>:
		(size_t)(k_mem_slab_num_free_get(&tx_pkts) *
			 sizeof(struct net_pkt)),
		get_frees(&rx_bufs), get_size(&rx_bufs),
		get_frees(&tx_bufs), get_size(&tx_bufs));
#endif
}
   16622:	4770      	bx	lr

00016624 <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   16624:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   16628:	b923      	cbnz	r3, 16634 <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   1662a:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   1662e:	f000 0001 	and.w	r0, r0, #1
   16632:	4770      	bx	lr
		return false;
   16634:	2000      	movs	r0, #0
}
   16636:	4770      	bx	lr

00016638 <k_work_submit_to_queue>:
{
   16638:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1663a:	f101 0308 	add.w	r3, r1, #8
   1663e:	f3bf 8f5b 	dmb	ish
   16642:	e853 2f00 	ldrex	r2, [r3]
   16646:	f042 0c01 	orr.w	ip, r2, #1
   1664a:	e843 ce00 	strex	lr, ip, [r3]
   1664e:	f1be 0f00 	cmp.w	lr, #0
   16652:	d1f6      	bne.n	16642 <k_work_submit_to_queue+0xa>
   16654:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   16658:	07d3      	lsls	r3, r2, #31
   1665a:	d403      	bmi.n	16664 <k_work_submit_to_queue+0x2c>
}
   1665c:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   16660:	f001 befb 	b.w	1845a <k_queue_append>
}
   16664:	f85d fb04 	ldr.w	pc, [sp], #4

00016668 <k_thread_name_set>:
K_SYSCALL_DECLARE2(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, int, k_tid_t, thread_id, const char *, value)
   16668:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
   1666c:	4602      	mov	r2, r0
   1666e:	f7ff ffd9 	bl	16624 <z_arch_is_user_context>
   16672:	b120      	cbz	r0, 1667e <k_thread_name_set+0x16>
	register u32_t ret __asm__("r0") = arg1;
   16674:	4610      	mov	r0, r2
	register u32_t r6 __asm__("r6") = call_id;
   16676:	2669      	movs	r6, #105	; 0x69
	__asm__ volatile("svc %[svid]\n"
   16678:	df03      	svc	3
   1667a:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
   1667e:	4610      	mov	r0, r2
   16680:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
   16684:	f002 b89d 	b.w	187c2 <z_impl_k_thread_name_set>

00016688 <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   16688:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   1668c:	b923      	cbnz	r3, 16698 <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   1668e:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   16692:	f000 0001 	and.w	r0, r0, #1
   16696:	4770      	bx	lr
		return false;
   16698:	2000      	movs	r0, #0
}
   1669a:	4770      	bx	lr

0001669c <calc_chksum>:

	return 0;
}

static u16_t calc_chksum(u16_t sum, const u8_t *data, size_t len)
{
   1669c:	b510      	push	{r4, lr}
	const u8_t *end;
	u16_t tmp;

	end = data + len - 1;
   1669e:	3a01      	subs	r2, #1
   166a0:	440a      	add	r2, r1

	while (data < end) {
   166a2:	4291      	cmp	r1, r2
   166a4:	d309      	bcc.n	166ba <calc_chksum+0x1e>
		}

		data += 2;
	}

	if (data == end) {
   166a6:	d107      	bne.n	166b8 <calc_chksum+0x1c>
		tmp = data[0] << 8;
   166a8:	780b      	ldrb	r3, [r1, #0]
   166aa:	021b      	lsls	r3, r3, #8
		sum += tmp;
   166ac:	4418      	add	r0, r3
   166ae:	b280      	uxth	r0, r0
		if (sum < tmp) {
   166b0:	4283      	cmp	r3, r0
			sum++;
   166b2:	bf84      	itt	hi
   166b4:	3001      	addhi	r0, #1
   166b6:	b280      	uxthhi	r0, r0
		}
	}

	return sum;
}
   166b8:	bd10      	pop	{r4, pc}
		tmp = (data[0] << 8) + data[1];
   166ba:	780c      	ldrb	r4, [r1, #0]
   166bc:	784b      	ldrb	r3, [r1, #1]
   166be:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   166c2:	b29b      	uxth	r3, r3
		sum += tmp;
   166c4:	4418      	add	r0, r3
   166c6:	b280      	uxth	r0, r0
		if (sum < tmp) {
   166c8:	4283      	cmp	r3, r0
			sum++;
   166ca:	bf84      	itt	hi
   166cc:	3001      	addhi	r0, #1
   166ce:	b280      	uxthhi	r0, r0
		data += 2;
   166d0:	3102      	adds	r1, #2
   166d2:	e7e6      	b.n	166a2 <calc_chksum+0x6>

000166d4 <net_byte_to_hex>:
{
   166d4:	b570      	push	{r4, r5, r6, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   166d6:	090e      	lsrs	r6, r1, #4
		if (i == 0 && !pad && !val) {
   166d8:	b1b3      	cbz	r3, 16708 <net_byte_to_hex+0x34>
		if (val < 10) {
   166da:	2e09      	cmp	r6, #9
			*ptr++ = (char) (val - 10 + base);
   166dc:	b274      	sxtb	r4, r6
   166de:	bf86      	itte	hi
   166e0:	f1a2 030a 	subhi.w	r3, r2, #10
   166e4:	18e4      	addhi	r4, r4, r3
			*ptr++ = (char) (val + '0');
   166e6:	3430      	addls	r4, #48	; 0x30
   166e8:	1c45      	adds	r5, r0, #1
   166ea:	7004      	strb	r4, [r0, #0]
   166ec:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   166f0:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
   166f2:	b24b      	sxtb	r3, r1
   166f4:	bf83      	ittte	hi
   166f6:	3a0a      	subhi	r2, #10
   166f8:	189b      	addhi	r3, r3, r2
   166fa:	b2db      	uxtbhi	r3, r3
			*ptr++ = (char) (val + '0');
   166fc:	3330      	addls	r3, #48	; 0x30
   166fe:	702b      	strb	r3, [r5, #0]
	*ptr = '\0';
   16700:	2300      	movs	r3, #0
   16702:	706b      	strb	r3, [r5, #1]
   16704:	1c68      	adds	r0, r5, #1
}
   16706:	bd70      	pop	{r4, r5, r6, pc}
		if (i == 0 && !pad && !val) {
   16708:	2e00      	cmp	r6, #0
   1670a:	d1e6      	bne.n	166da <net_byte_to_hex+0x6>
   1670c:	4605      	mov	r5, r0
   1670e:	e7ed      	b.n	166ec <net_byte_to_hex+0x18>

00016710 <net_sprint_ll_addr_buf>:
		len = 6U;
   16710:	2908      	cmp	r1, #8
   16712:	bf18      	it	ne
   16714:	2106      	movne	r1, #6
{
   16716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1671a:	4606      	mov	r6, r0
   1671c:	1844      	adds	r4, r0, r1
   1671e:	4617      	mov	r7, r2
	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
   16720:	b2dd      	uxtb	r5, r3
   16722:	4610      	mov	r0, r2
		*ptr++ = ':';
   16724:	f04f 083a 	mov.w	r8, #58	; 0x3a
	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
   16728:	b15d      	cbz	r5, 16742 <net_sprint_ll_addr_buf+0x32>
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
   1672a:	f816 1b01 	ldrb.w	r1, [r6], #1
   1672e:	2301      	movs	r3, #1
   16730:	2241      	movs	r2, #65	; 0x41
   16732:	f7ff ffcf 	bl	166d4 <net_byte_to_hex>
		blen -= 3U;
   16736:	3d03      	subs	r5, #3
	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
   16738:	42b4      	cmp	r4, r6
		*ptr++ = ':';
   1673a:	f800 8b01 	strb.w	r8, [r0], #1
		blen -= 3U;
   1673e:	b2ed      	uxtb	r5, r5
	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
   16740:	d1f2      	bne.n	16728 <net_sprint_ll_addr_buf+0x18>
	if (!(ptr - buf)) {
   16742:	42b8      	cmp	r0, r7
   16744:	f04f 0200 	mov.w	r2, #0
	*(ptr - 1) = '\0';
   16748:	bf16      	itet	ne
   1674a:	f800 2c01 	strbne.w	r2, [r0, #-1]
		return NULL;
   1674e:	4610      	moveq	r0, r2
	return buf;
   16750:	4638      	movne	r0, r7
}
   16752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00016756 <net_addr_pton>:
	if (family == AF_INET) {
   16756:	2801      	cmp	r0, #1
{
   16758:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1675c:	460c      	mov	r4, r1
   1675e:	4616      	mov	r6, r2
	if (family == AF_INET) {
   16760:	d126      	bne.n	167b0 <net_addr_pton+0x5a>
		len = strlen(src);
   16762:	4608      	mov	r0, r1
   16764:	f7eb fe64 	bl	2430 <strlen>
		for (i = 0; i < len; i++) {
   16768:	4623      	mov	r3, r4
   1676a:	4420      	add	r0, r4
   1676c:	4283      	cmp	r3, r0
   1676e:	d112      	bne.n	16796 <net_addr_pton+0x40>
__ssp_bos_icheck3(memset, void *, int)
   16770:	4635      	mov	r5, r6
   16772:	2300      	movs	r3, #0
   16774:	f845 3901 	str.w	r3, [r5], #-1
   16778:	3603      	adds	r6, #3
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   1677a:	4620      	mov	r0, r4
   1677c:	220a      	movs	r2, #10
   1677e:	a901      	add	r1, sp, #4
   16780:	f7ea fd4a 	bl	1218 <strtol>
   16784:	f805 0f01 	strb.w	r0, [r5, #1]!
			src = ++endptr;
   16788:	9c01      	ldr	r4, [sp, #4]
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1678a:	42ae      	cmp	r6, r5
			src = ++endptr;
   1678c:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   16790:	d1f3      	bne.n	1677a <net_addr_pton+0x24>
	return 0;
   16792:	2000      	movs	r0, #0
   16794:	e009      	b.n	167aa <net_addr_pton+0x54>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   16796:	f813 2b01 	ldrb.w	r2, [r3], #1
   1679a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1679e:	2909      	cmp	r1, #9
   167a0:	d9e4      	bls.n	1676c <net_addr_pton+0x16>
   167a2:	2a2e      	cmp	r2, #46	; 0x2e
   167a4:	d0e2      	beq.n	1676c <net_addr_pton+0x16>
				return -EINVAL;
   167a6:	f06f 0015 	mvn.w	r0, #21
}
   167aa:	b003      	add	sp, #12
   167ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (family == AF_INET6) {
   167b0:	2802      	cmp	r0, #2
   167b2:	d1f8      	bne.n	167a6 <net_addr_pton+0x50>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   167b4:	212e      	movs	r1, #46	; 0x2e
   167b6:	4620      	mov	r0, r4
   167b8:	f7eb fe23 	bl	2402 <strchr>
		if (*src == ':') {
   167bc:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
   167be:	2800      	cmp	r0, #0
   167c0:	bf14      	ite	ne
   167c2:	2706      	movne	r7, #6
   167c4:	2708      	moveq	r7, #8
		if (*src == ':') {
   167c6:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
   167c8:	bf08      	it	eq
   167ca:	3401      	addeq	r4, #1
		len = strlen(src);
   167cc:	4620      	mov	r0, r4
   167ce:	f7eb fe2f 	bl	2430 <strlen>
		for (i = 0; i < len; i++) {
   167d2:	2300      	movs	r3, #0
   167d4:	4283      	cmp	r3, r0
   167d6:	db21      	blt.n	1681c <net_addr_pton+0xc6>
		for (i = 0; i < expected_groups; i++) {
   167d8:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   167da:	46a9      	mov	r9, r5
			if (!src || *src == '\0') {
   167dc:	2c00      	cmp	r4, #0
   167de:	d0e2      	beq.n	167a6 <net_addr_pton+0x50>
   167e0:	7823      	ldrb	r3, [r4, #0]
   167e2:	2b00      	cmp	r3, #0
   167e4:	d0df      	beq.n	167a6 <net_addr_pton+0x50>
			if (*src != ':') {
   167e6:	2b3a      	cmp	r3, #58	; 0x3a
   167e8:	d02d      	beq.n	16846 <net_addr_pton+0xf0>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   167ea:	2210      	movs	r2, #16
   167ec:	2100      	movs	r1, #0
   167ee:	4620      	mov	r0, r4
   167f0:	f7ea fd12 	bl	1218 <strtol>
   167f4:	2210      	movs	r2, #16
   167f6:	4680      	mov	r8, r0
   167f8:	2100      	movs	r1, #0
   167fa:	4620      	mov	r0, r4
   167fc:	f7ea fd0c 	bl	1218 <strtol>
   16800:	f3c8 2807 	ubfx	r8, r8, #8, #8
   16804:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
   16808:	f826 8015 	strh.w	r8, [r6, r5, lsl #1]
				src = strchr(src, ':');
   1680c:	213a      	movs	r1, #58	; 0x3a
   1680e:	4620      	mov	r0, r4
   16810:	f7eb fdf7 	bl	2402 <strchr>
				if (src) {
   16814:	4604      	mov	r4, r0
   16816:	b178      	cbz	r0, 16838 <net_addr_pton+0xe2>
			src++;
   16818:	3401      	adds	r4, #1
   1681a:	e010      	b.n	1683e <net_addr_pton+0xe8>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1681c:	5ce2      	ldrb	r2, [r4, r3]
   1681e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   16822:	290a      	cmp	r1, #10
   16824:	d906      	bls.n	16834 <net_addr_pton+0xde>
   16826:	f022 0120 	bic.w	r1, r2, #32
   1682a:	3941      	subs	r1, #65	; 0x41
   1682c:	2905      	cmp	r1, #5
   1682e:	d901      	bls.n	16834 <net_addr_pton+0xde>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   16830:	2a2e      	cmp	r2, #46	; 0x2e
   16832:	d1b8      	bne.n	167a6 <net_addr_pton+0x50>
		for (i = 0; i < len; i++) {
   16834:	3301      	adds	r3, #1
   16836:	e7cd      	b.n	167d4 <net_addr_pton+0x7e>
					if (i < expected_groups - 1) {
   16838:	1e7b      	subs	r3, r7, #1
   1683a:	42ab      	cmp	r3, r5
   1683c:	dcb3      	bgt.n	167a6 <net_addr_pton+0x50>
		for (i = 0; i < expected_groups; i++) {
   1683e:	3501      	adds	r5, #1
   16840:	42af      	cmp	r7, r5
   16842:	dccb      	bgt.n	167dc <net_addr_pton+0x86>
   16844:	e013      	b.n	1686e <net_addr_pton+0x118>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   16846:	eb06 0345 	add.w	r3, r6, r5, lsl #1
   1684a:	f806 9015 	strb.w	r9, [r6, r5, lsl #1]
   1684e:	f883 9001 	strb.w	r9, [r3, #1]
			for (; i < expected_groups; i++) {
   16852:	3501      	adds	r5, #1
   16854:	42af      	cmp	r7, r5
   16856:	dcf6      	bgt.n	16846 <net_addr_pton+0xf0>
			tmp = strrchr(src, ':');
   16858:	213a      	movs	r1, #58	; 0x3a
   1685a:	4620      	mov	r0, r4
   1685c:	f7eb fe15 	bl	248a <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   16860:	42a0      	cmp	r0, r4
   16862:	d11f      	bne.n	168a4 <net_addr_pton+0x14e>
   16864:	2f06      	cmp	r7, #6
   16866:	d001      	beq.n	1686c <net_addr_pton+0x116>
   16868:	7863      	ldrb	r3, [r4, #1]
   1686a:	bb63      	cbnz	r3, 168c6 <net_addr_pton+0x170>
				src++;
   1686c:	3401      	adds	r4, #1
		if (expected_groups == 6) {
   1686e:	2f06      	cmp	r7, #6
   16870:	d18f      	bne.n	16792 <net_addr_pton+0x3c>
   16872:	360c      	adds	r6, #12
			for (i = 0; i < 4; i++) {
   16874:	2500      	movs	r5, #0
				if (!src || !*src) {
   16876:	2c00      	cmp	r4, #0
   16878:	d095      	beq.n	167a6 <net_addr_pton+0x50>
   1687a:	7823      	ldrb	r3, [r4, #0]
   1687c:	2b00      	cmp	r3, #0
   1687e:	d092      	beq.n	167a6 <net_addr_pton+0x50>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   16880:	220a      	movs	r2, #10
   16882:	2100      	movs	r1, #0
   16884:	4620      	mov	r0, r4
   16886:	f7ea fcc7 	bl	1218 <strtol>
				src = strchr(src, '.');
   1688a:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1688c:	f806 0b01 	strb.w	r0, [r6], #1
				src = strchr(src, '.');
   16890:	4620      	mov	r0, r4
   16892:	f7eb fdb6 	bl	2402 <strchr>
				if (src) {
   16896:	4604      	mov	r4, r0
   16898:	b1b8      	cbz	r0, 168ca <net_addr_pton+0x174>
					src++;
   1689a:	3401      	adds	r4, #1
			for (i = 0; i < 4; i++) {
   1689c:	3501      	adds	r5, #1
   1689e:	2d04      	cmp	r5, #4
   168a0:	d1e9      	bne.n	16876 <net_addr_pton+0x120>
   168a2:	e776      	b.n	16792 <net_addr_pton+0x3c>
			if (expected_groups == 6) {
   168a4:	2f06      	cmp	r7, #6
   168a6:	d100      	bne.n	168aa <net_addr_pton+0x154>
				tmp--;
   168a8:	3801      	subs	r0, #1
			i = expected_groups - 1;
   168aa:	1e7d      	subs	r5, r7, #1
   168ac:	3001      	adds	r0, #1
				if (*tmp == ':') {
   168ae:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
   168b2:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
   168b4:	bf08      	it	eq
   168b6:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
				if (i < 0) {
   168ba:	2d00      	cmp	r5, #0
   168bc:	f6ff af73 	blt.w	167a6 <net_addr_pton+0x50>
			} while (tmp-- != src);
   168c0:	42a0      	cmp	r0, r4
   168c2:	d1f4      	bne.n	168ae <net_addr_pton+0x158>
   168c4:	e7a8      	b.n	16818 <net_addr_pton+0xc2>
   168c6:	4620      	mov	r0, r4
   168c8:	e7ef      	b.n	168aa <net_addr_pton+0x154>
					if (i < 3) {
   168ca:	2d03      	cmp	r5, #3
   168cc:	f47f af6b 	bne.w	167a6 <net_addr_pton+0x50>
   168d0:	e7e4      	b.n	1689c <net_addr_pton+0x146>

000168d2 <net_calc_chksum>:
	return pkt->family;
   168d2:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
		if (proto != IPPROTO_ICMP) {
			len = 2 * sizeof(struct in_addr);
			sum = net_pkt_get_len(pkt) -
				net_pkt_ip_hdr_len(pkt) + proto;
		}
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   168d6:	f3c3 0342 	ubfx	r3, r3, #1, #3
   168da:	2b02      	cmp	r3, #2
{
   168dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   168e0:	4604      	mov	r4, r0
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   168e2:	d16f      	bne.n	169c4 <net_calc_chksum+0xf2>
		   net_pkt_family(pkt) == AF_INET6) {
		len = 2 * sizeof(struct in6_addr);
		sum =  net_pkt_get_len(pkt) -
   168e4:	6943      	ldr	r3, [r0, #20]
	size_t bytes = 0;
   168e6:	2200      	movs	r2, #0
	while (buf) {
   168e8:	2b00      	cmp	r3, #0
   168ea:	d144      	bne.n	16976 <net_calc_chksum+0xa4>
   168ec:	f8b4 5042 	ldrh.w	r5, [r4, #66]	; 0x42
   168f0:	1b4d      	subs	r5, r1, r5
			net_pkt_ip_hdr_len(pkt) -
   168f2:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
		NET_DBG("Unknown protocol family %d", net_pkt_family(pkt));
		return 0;
	}

	net_pkt_cursor_backup(pkt, &backup);
	net_pkt_cursor_init(pkt);
   168f6:	4620      	mov	r0, r4
		sum =  net_pkt_get_len(pkt) -
   168f8:	1a6d      	subs	r5, r5, r1
   168fa:	4415      	add	r5, r2
	backup->pos = pkt->cursor.pos;
   168fc:	e9d4 8706 	ldrd	r8, r7, [r4, #24]
	net_pkt_cursor_init(pkt);
   16900:	f7ff fcf8 	bl	162f4 <net_pkt_cursor_init>
	return pkt->overwrite;
   16904:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d

	ow = net_pkt_is_being_overwritten(pkt);
	net_pkt_set_overwrite(pkt, true);

	net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) - len);
   16908:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
   1690c:	f003 0601 	and.w	r6, r3, #1
	pkt->overwrite = overwrite;
   16910:	f043 0301 	orr.w	r3, r3, #1
   16914:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		sum =  net_pkt_get_len(pkt) -
   16918:	b2ad      	uxth	r5, r5
	net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) - len);
   1691a:	3920      	subs	r1, #32
   1691c:	4620      	mov	r0, r4
   1691e:	f7ff fd65 	bl	163ec <net_pkt_skip>

	sum = calc_chksum(sum, pkt->cursor.pos, len);
   16922:	2220      	movs	r2, #32
   16924:	69e1      	ldr	r1, [r4, #28]
   16926:	4628      	mov	r0, r5
   16928:	f7ff feb8 	bl	1669c <calc_chksum>

	net_pkt_skip(pkt, len + net_pkt_ipv6_ext_len(pkt));
   1692c:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
	sum = calc_chksum(sum, pkt->cursor.pos, len);
   16930:	4605      	mov	r5, r0
	net_pkt_skip(pkt, len + net_pkt_ipv6_ext_len(pkt));
   16932:	3120      	adds	r1, #32
   16934:	4620      	mov	r0, r4
   16936:	f7ff fd59 	bl	163ec <net_pkt_skip>
	if (!cur->buf || !cur->pos) {
   1693a:	69a2      	ldr	r2, [r4, #24]
   1693c:	b162      	cbz	r2, 16958 <net_calc_chksum+0x86>
   1693e:	69e3      	ldr	r3, [r4, #28]
   16940:	b153      	cbz	r3, 16958 <net_calc_chksum+0x86>
	len = cur->buf->len - (cur->pos - cur->buf->data);
   16942:	f8b2 900c 	ldrh.w	r9, [r2, #12]
   16946:	6892      	ldr	r2, [r2, #8]
   16948:	1a9b      	subs	r3, r3, r2
   1694a:	eba9 0903 	sub.w	r9, r9, r3
	while (cur->buf) {
   1694e:	f8d4 a018 	ldr.w	sl, [r4, #24]
   16952:	f1ba 0f00 	cmp.w	sl, #0
   16956:	d112      	bne.n	1697e <net_calc_chksum+0xac>

	sum = pkt_calc_chksum(pkt, sum);

	sum = (sum == 0U) ? 0xffff : htons(sum);
   16958:	2d00      	cmp	r5, #0
   1695a:	d138      	bne.n	169ce <net_calc_chksum+0xfc>
   1695c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   16960:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d

	net_pkt_cursor_restore(pkt, &backup);

	net_pkt_set_overwrite(pkt, ow);

	return ~sum;
   16964:	43c0      	mvns	r0, r0
   16966:	f366 0300 	bfi	r3, r6, #0, #1
	pkt->cursor.pos = backup->pos;
   1696a:	e9c4 8706 	strd	r8, r7, [r4, #24]
	pkt->overwrite = overwrite;
   1696e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   16972:	b280      	uxth	r0, r0
   16974:	e029      	b.n	169ca <net_calc_chksum+0xf8>
		bytes += buf->len;
   16976:	8998      	ldrh	r0, [r3, #12]
		buf = buf->frags;
   16978:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1697a:	4402      	add	r2, r0
		buf = buf->frags;
   1697c:	e7b4      	b.n	168e8 <net_calc_chksum+0x16>
		sum = calc_chksum(sum, cur->pos, len);
   1697e:	4628      	mov	r0, r5
   16980:	464a      	mov	r2, r9
   16982:	69e1      	ldr	r1, [r4, #28]
   16984:	f7ff fe8a 	bl	1669c <calc_chksum>
		cur->buf = cur->buf->frags;
   16988:	f8da 3000 	ldr.w	r3, [sl]
   1698c:	61a3      	str	r3, [r4, #24]
		sum = calc_chksum(sum, cur->pos, len);
   1698e:	4605      	mov	r5, r0
		if (!cur->buf || !cur->buf->len) {
   16990:	2b00      	cmp	r3, #0
   16992:	d0e1      	beq.n	16958 <net_calc_chksum+0x86>
   16994:	899a      	ldrh	r2, [r3, #12]
   16996:	2a00      	cmp	r2, #0
   16998:	d0de      	beq.n	16958 <net_calc_chksum+0x86>
		cur->pos = cur->buf->data;
   1699a:	689b      	ldr	r3, [r3, #8]
   1699c:	61e3      	str	r3, [r4, #28]
		if (len % 2) {
   1699e:	f019 0f01 	tst.w	r9, #1
   169a2:	d00d      	beq.n	169c0 <net_calc_chksum+0xee>
			sum += *cur->pos;
   169a4:	7819      	ldrb	r1, [r3, #0]
   169a6:	440d      	add	r5, r1
   169a8:	b2ad      	uxth	r5, r5
			if (sum < *cur->pos) {
   169aa:	42a9      	cmp	r1, r5
				sum++;
   169ac:	bf88      	it	hi
   169ae:	3501      	addhi	r5, #1
			cur->pos++;
   169b0:	f103 0301 	add.w	r3, r3, #1
				sum++;
   169b4:	bf88      	it	hi
   169b6:	b2ad      	uxthhi	r5, r5
			cur->pos++;
   169b8:	61e3      	str	r3, [r4, #28]
			len = cur->buf->len - 1;
   169ba:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   169be:	e7c6      	b.n	1694e <net_calc_chksum+0x7c>
			len = cur->buf->len;
   169c0:	4691      	mov	r9, r2
   169c2:	e7c4      	b.n	1694e <net_calc_chksum+0x7c>
   169c4:	f7ff fe60 	bl	16688 <z_arch_is_user_context>
		return 0;
   169c8:	2000      	movs	r0, #0
}
   169ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   169ce:	ba68      	rev16	r0, r5
   169d0:	b280      	uxth	r0, r0
   169d2:	e7c5      	b.n	16960 <net_calc_chksum+0x8e>

000169d4 <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   169d4:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   169d8:	b923      	cbnz	r3, 169e4 <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   169da:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   169de:	f000 0001 	and.w	r0, r0, #1
   169e2:	4770      	bx	lr
		return false;
   169e4:	2000      	movs	r0, #0
}
   169e6:	4770      	bx	lr

000169e8 <net_icmpv6_finalize>:
{
   169e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   169ea:	2304      	movs	r3, #4
   169ec:	2200      	movs	r2, #0
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
   169ee:	4669      	mov	r1, sp
{
   169f0:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   169f2:	e9cd 2300 	strd	r2, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
   169f6:	f7ff fdea 	bl	165ce <net_pkt_get_data>
	if (!icmp_hdr) {
   169fa:	4605      	mov	r5, r0
   169fc:	b150      	cbz	r0, 16a14 <net_icmpv6_finalize+0x2c>
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   169fe:	213a      	movs	r1, #58	; 0x3a
   16a00:	4620      	mov	r0, r4
   16a02:	f7ff ff66 	bl	168d2 <net_calc_chksum>
	return net_pkt_set_data(pkt, &icmp_access);
   16a06:	4669      	mov	r1, sp
	icmp_hdr->chksum = net_calc_chksum_icmpv6(pkt);
   16a08:	8068      	strh	r0, [r5, #2]
	return net_pkt_set_data(pkt, &icmp_access);
   16a0a:	4620      	mov	r0, r4
   16a0c:	f7ff fe05 	bl	1661a <net_pkt_set_data>
}
   16a10:	b003      	add	sp, #12
   16a12:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   16a14:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16a18:	e7fa      	b.n	16a10 <net_icmpv6_finalize+0x28>

00016a1a <net_icmpv6_create>:
{
   16a1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   16a1c:	2304      	movs	r3, #4
{
   16a1e:	460f      	mov	r7, r1
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   16a20:	2400      	movs	r4, #0
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
   16a22:	4669      	mov	r1, sp
{
   16a24:	4605      	mov	r5, r0
   16a26:	4616      	mov	r6, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   16a28:	e9cd 4300 	strd	r4, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
   16a2c:	f7ff fdcf 	bl	165ce <net_pkt_get_data>
	if (!icmp_hdr) {
   16a30:	b148      	cbz	r0, 16a46 <net_icmpv6_create+0x2c>
	icmp_hdr->type   = icmp_type;
   16a32:	7007      	strb	r7, [r0, #0]
	icmp_hdr->code   = icmp_code;
   16a34:	7046      	strb	r6, [r0, #1]
	icmp_hdr->chksum = 0U;
   16a36:	7084      	strb	r4, [r0, #2]
   16a38:	70c4      	strb	r4, [r0, #3]
	return net_pkt_set_data(pkt, &icmp_access);
   16a3a:	4669      	mov	r1, sp
   16a3c:	4628      	mov	r0, r5
   16a3e:	f7ff fdec 	bl	1661a <net_pkt_set_data>
}
   16a42:	b003      	add	sp, #12
   16a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   16a46:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16a4a:	e7fa      	b.n	16a42 <net_icmpv6_create+0x28>

00016a4c <icmpv6_handle_echo_request>:
{
   16a4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16a4e:	4606      	mov	r6, r0
   16a50:	460f      	mov	r7, r1
   16a52:	f7ff ffbf 	bl	169d4 <z_arch_is_user_context>
	payload_len = ntohs(ip_hdr->len) -
   16a56:	888b      	ldrh	r3, [r1, #4]
   16a58:	021c      	lsls	r4, r3, #8
   16a5a:	ea44 2413 	orr.w	r4, r4, r3, lsr #8
   16a5e:	f8b6 3042 	ldrh.w	r3, [r6, #66]	; 0x42
   16a62:	1ae4      	subs	r4, r4, r3
   16a64:	3c04      	subs	r4, #4
   16a66:	b224      	sxth	r4, r4
	if (payload_len < NET_ICMPV6_UNUSED_LEN) {
   16a68:	2c03      	cmp	r4, #3
   16a6a:	dd0c      	ble.n	16a86 <icmpv6_handle_echo_request+0x3a>
	reply = net_pkt_alloc_with_buffer(net_pkt_iface(pkt), payload_len,
   16a6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   16a70:	9300      	str	r3, [sp, #0]
   16a72:	2202      	movs	r2, #2
   16a74:	233a      	movs	r3, #58	; 0x3a
   16a76:	4621      	mov	r1, r4
   16a78:	6a70      	ldr	r0, [r6, #36]	; 0x24
   16a7a:	f7f6 f84d 	bl	cb18 <net_pkt_alloc_with_buffer>
	if (!reply) {
   16a7e:	4605      	mov	r5, r0
   16a80:	b918      	cbnz	r0, 16a8a <icmpv6_handle_echo_request+0x3e>
   16a82:	f7ff ffa7 	bl	169d4 <z_arch_is_user_context>
	return NET_DROP;
   16a86:	2002      	movs	r0, #2
   16a88:	e038      	b.n	16afc <icmpv6_handle_echo_request+0xb0>
	if (net_ipv6_is_addr_mcast(&ip_hdr->dst)) {
   16a8a:	7e3b      	ldrb	r3, [r7, #24]
   16a8c:	2bff      	cmp	r3, #255	; 0xff
   16a8e:	f107 0118 	add.w	r1, r7, #24
   16a92:	d103      	bne.n	16a9c <icmpv6_handle_echo_request+0x50>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   16a94:	6a70      	ldr	r0, [r6, #36]	; 0x24
   16a96:	f7f5 fe91 	bl	c7bc <net_if_ipv6_select_src_addr>
   16a9a:	4601      	mov	r1, r0
	net_pkt_lladdr_dst(reply)->addr = NULL;
   16a9c:	2300      	movs	r3, #0
	if (net_ipv6_create(reply, src, &ip_hdr->src)) {
   16a9e:	f107 0208 	add.w	r2, r7, #8
	net_pkt_lladdr_dst(reply)->addr = NULL;
   16aa2:	636b      	str	r3, [r5, #52]	; 0x34
	net_pkt_lladdr_src(reply)->addr = NULL;
   16aa4:	62eb      	str	r3, [r5, #44]	; 0x2c
	if (net_ipv6_create(reply, src, &ip_hdr->src)) {
   16aa6:	4628      	mov	r0, r5
   16aa8:	f000 f921 	bl	16cee <net_ipv6_create>
   16aac:	4602      	mov	r2, r0
   16aae:	b128      	cbz	r0, 16abc <icmpv6_handle_echo_request+0x70>
   16ab0:	f7ff ff90 	bl	169d4 <z_arch_is_user_context>
		net_pkt_unref(reply);
   16ab4:	4628      	mov	r0, r5
   16ab6:	f7ff fba7 	bl	16208 <net_pkt_unref>
   16aba:	e7e4      	b.n	16a86 <icmpv6_handle_echo_request+0x3a>
	if (net_icmpv6_create(reply, NET_ICMPV6_ECHO_REPLY, 0) ||
   16abc:	2181      	movs	r1, #129	; 0x81
   16abe:	4628      	mov	r0, r5
   16ac0:	f7ff ffab 	bl	16a1a <net_icmpv6_create>
   16ac4:	2800      	cmp	r0, #0
   16ac6:	d1f3      	bne.n	16ab0 <icmpv6_handle_echo_request+0x64>
	    net_pkt_copy(reply, pkt, payload_len)) {
   16ac8:	4622      	mov	r2, r4
   16aca:	4631      	mov	r1, r6
   16acc:	4628      	mov	r0, r5
   16ace:	f7ff fcc1 	bl	16454 <net_pkt_copy>
	if (net_icmpv6_create(reply, NET_ICMPV6_ECHO_REPLY, 0) ||
   16ad2:	4604      	mov	r4, r0
   16ad4:	2800      	cmp	r0, #0
   16ad6:	d1eb      	bne.n	16ab0 <icmpv6_handle_echo_request+0x64>
	net_pkt_cursor_init(reply);
   16ad8:	4628      	mov	r0, r5
   16ada:	f7ff fc0b 	bl	162f4 <net_pkt_cursor_init>
	net_ipv6_finalize(reply, IPPROTO_ICMPV6);
   16ade:	213a      	movs	r1, #58	; 0x3a
   16ae0:	4628      	mov	r0, r5
   16ae2:	f000 f968 	bl	16db6 <net_ipv6_finalize>
   16ae6:	f7ff ff75 	bl	169d4 <z_arch_is_user_context>
	if (net_send_data(reply) < 0) {
   16aea:	4628      	mov	r0, r5
   16aec:	f7fe fe06 	bl	156fc <net_send_data>
   16af0:	2800      	cmp	r0, #0
   16af2:	dbdf      	blt.n	16ab4 <icmpv6_handle_echo_request+0x68>
	net_pkt_unref(pkt);
   16af4:	4630      	mov	r0, r6
   16af6:	f7ff fb87 	bl	16208 <net_pkt_unref>
	return NET_OK;
   16afa:	4620      	mov	r0, r4
}
   16afc:	b003      	add	sp, #12
   16afe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00016b00 <net_icmpv6_send_error>:
{
   16b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16b04:	4605      	mov	r5, r0
   16b06:	b087      	sub	sp, #28
   16b08:	4698      	mov	r8, r3
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   16b0a:	2400      	movs	r4, #0
   16b0c:	2328      	movs	r3, #40	; 0x28
{
   16b0e:	460f      	mov	r7, r1
   16b10:	4691      	mov	r9, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   16b12:	e9cd 4302 	strd	r4, r3, [sp, #8]
	net_pkt_cursor_init(orig);
   16b16:	f7ff fbed 	bl	162f4 <net_pkt_cursor_init>
	ip_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(orig, &ipv6_access);
   16b1a:	a902      	add	r1, sp, #8
   16b1c:	4628      	mov	r0, r5
   16b1e:	f7ff fd56 	bl	165ce <net_pkt_get_data>
	if (!ip_hdr) {
   16b22:	4606      	mov	r6, r0
   16b24:	2800      	cmp	r0, #0
   16b26:	f000 808e 	beq.w	16c46 <net_icmpv6_send_error+0x146>
	if (ip_hdr->nexthdr == IPPROTO_ICMPV6) {
   16b2a:	7983      	ldrb	r3, [r0, #6]
   16b2c:	2b3a      	cmp	r3, #58	; 0x3a
   16b2e:	d118      	bne.n	16b62 <net_icmpv6_send_error+0x62>
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv6_access,
   16b30:	2304      	movs	r3, #4
	return net_pkt_skip(pkt, access->size);
   16b32:	9903      	ldr	r1, [sp, #12]
   16b34:	9404      	str	r4, [sp, #16]
   16b36:	4628      	mov	r0, r5
   16b38:	9305      	str	r3, [sp, #20]
   16b3a:	f7ff fc57 	bl	163ec <net_pkt_skip>
		icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(
   16b3e:	a904      	add	r1, sp, #16
   16b40:	4628      	mov	r0, r5
   16b42:	f7ff fd44 	bl	165ce <net_pkt_get_data>
		if (!icmp_hdr || icmp_hdr->code < 128) {
   16b46:	b118      	cbz	r0, 16b50 <net_icmpv6_send_error+0x50>
   16b48:	f990 3001 	ldrsb.w	r3, [r0, #1]
   16b4c:	42a3      	cmp	r3, r4
   16b4e:	db05      	blt.n	16b5c <net_icmpv6_send_error+0x5c>
			err = -EINVAL;
   16b50:	f06f 0615 	mvn.w	r6, #21
}
   16b54:	4630      	mov	r0, r6
   16b56:	b007      	add	sp, #28
   16b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		net_pkt_cursor_init(orig);
   16b5c:	4628      	mov	r0, r5
   16b5e:	f7ff fbc9 	bl	162f4 <net_pkt_cursor_init>
	if (ip_hdr->nexthdr == IPPROTO_UDP) {
   16b62:	79b3      	ldrb	r3, [r6, #6]
   16b64:	2b11      	cmp	r3, #17
   16b66:	d02a      	beq.n	16bbe <net_icmpv6_send_error+0xbe>
	} else if (ip_hdr->nexthdr == IPPROTO_TCP) {
   16b68:	2b06      	cmp	r3, #6
   16b6a:	d02a      	beq.n	16bc2 <net_icmpv6_send_error+0xc2>
		copy_len = net_pkt_get_len(orig);
   16b6c:	696b      	ldr	r3, [r5, #20]
	size_t bytes = 0;
   16b6e:	2100      	movs	r1, #0
	while (buf) {
   16b70:	bb0b      	cbnz	r3, 16bb6 <net_icmpv6_send_error+0xb6>
	pkt = net_pkt_alloc_with_buffer(net_pkt_iface(orig),
   16b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   16b76:	9300      	str	r3, [sp, #0]
   16b78:	2202      	movs	r2, #2
   16b7a:	233a      	movs	r3, #58	; 0x3a
   16b7c:	3104      	adds	r1, #4
   16b7e:	6a68      	ldr	r0, [r5, #36]	; 0x24
   16b80:	f7f5 ffca 	bl	cb18 <net_pkt_alloc_with_buffer>
	if (!pkt) {
   16b84:	4604      	mov	r4, r0
   16b86:	2800      	cmp	r0, #0
   16b88:	d060      	beq.n	16c4c <net_icmpv6_send_error+0x14c>
	if (net_ipv6_is_addr_mcast(&ip_hdr->dst)) {
   16b8a:	7e33      	ldrb	r3, [r6, #24]
   16b8c:	2bff      	cmp	r3, #255	; 0xff
   16b8e:	f106 0118 	add.w	r1, r6, #24
   16b92:	d103      	bne.n	16b9c <net_icmpv6_send_error+0x9c>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   16b94:	6a40      	ldr	r0, [r0, #36]	; 0x24
   16b96:	f7f5 fe11 	bl	c7bc <net_if_ipv6_select_src_addr>
   16b9a:	4601      	mov	r1, r0
	if (net_ipv6_create(pkt, src, &ip_hdr->src) ||
   16b9c:	f106 0208 	add.w	r2, r6, #8
   16ba0:	4620      	mov	r0, r4
   16ba2:	f000 f8a4 	bl	16cee <net_ipv6_create>
   16ba6:	b170      	cbz	r0, 16bc6 <net_icmpv6_send_error+0xc6>
	int err = -EIO;
   16ba8:	f06f 0704 	mvn.w	r7, #4
	net_pkt_unref(pkt);
   16bac:	4620      	mov	r0, r4
   16bae:	f7ff fb2b 	bl	16208 <net_pkt_unref>
   16bb2:	463e      	mov	r6, r7
   16bb4:	e7ce      	b.n	16b54 <net_icmpv6_send_error+0x54>
		bytes += buf->len;
   16bb6:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   16bb8:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   16bba:	4411      	add	r1, r2
		buf = buf->frags;
   16bbc:	e7d8      	b.n	16b70 <net_icmpv6_send_error+0x70>
		copy_len = sizeof(struct net_ipv6_hdr) +
   16bbe:	2130      	movs	r1, #48	; 0x30
   16bc0:	e7d7      	b.n	16b72 <net_icmpv6_send_error+0x72>
		copy_len = sizeof(struct net_ipv6_hdr) +
   16bc2:	213c      	movs	r1, #60	; 0x3c
   16bc4:	e7d5      	b.n	16b72 <net_icmpv6_send_error+0x72>
	    net_icmpv6_create(pkt, type, code)) {
   16bc6:	4639      	mov	r1, r7
   16bc8:	464a      	mov	r2, r9
   16bca:	4620      	mov	r0, r4
   16bcc:	f7ff ff25 	bl	16a1a <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, &ip_hdr->src) ||
   16bd0:	4601      	mov	r1, r0
   16bd2:	2800      	cmp	r0, #0
   16bd4:	d1e8      	bne.n	16ba8 <net_icmpv6_send_error+0xa8>
	if (type == NET_ICMPV6_PARAM_PROBLEM) {
   16bd6:	2f04      	cmp	r7, #4
   16bd8:	d130      	bne.n	16c3c <net_icmpv6_send_error+0x13c>
	u32_t data_be32 = htonl(data);
   16bda:	fa98 f388 	rev.w	r3, r8
	return net_pkt_write(pkt, &data_be32, sizeof(u32_t));
   16bde:	463a      	mov	r2, r7
   16be0:	a904      	add	r1, sp, #16
   16be2:	4620      	mov	r0, r4
	u32_t data_be32 = htonl(data);
   16be4:	9304      	str	r3, [sp, #16]
	return net_pkt_write(pkt, &data_be32, sizeof(u32_t));
   16be6:	f7ff fcd5 	bl	16594 <net_pkt_write>
		err = net_pkt_memset(pkt, 0, NET_ICMPV6_UNUSED_LEN);
   16bea:	4607      	mov	r7, r0
	copy_len = net_pkt_available_buffer(pkt);
   16bec:	4620      	mov	r0, r4
   16bee:	f7ff fb35 	bl	1625c <net_pkt_available_buffer>
   16bf2:	4602      	mov	r2, r0
	if (err || net_pkt_copy(pkt, orig, copy_len)) {
   16bf4:	2f00      	cmp	r7, #0
   16bf6:	d1d9      	bne.n	16bac <net_icmpv6_send_error+0xac>
   16bf8:	4629      	mov	r1, r5
   16bfa:	4620      	mov	r0, r4
   16bfc:	f7ff fc2a 	bl	16454 <net_pkt_copy>
   16c00:	4606      	mov	r6, r0
   16c02:	2800      	cmp	r0, #0
   16c04:	d1d2      	bne.n	16bac <net_icmpv6_send_error+0xac>
	net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_dst(orig)->addr;
   16c06:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   16c08:	62e3      	str	r3, [r4, #44]	; 0x2c
	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_dst(orig)->len;
   16c0a:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   16c0e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	net_pkt_lladdr_dst(pkt)->addr = net_pkt_lladdr_src(orig)->addr;
   16c12:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   16c14:	6363      	str	r3, [r4, #52]	; 0x34
	net_pkt_lladdr_dst(pkt)->len = net_pkt_lladdr_src(orig)->len;
   16c16:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   16c1a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	net_pkt_cursor_init(pkt);
   16c1e:	4620      	mov	r0, r4
   16c20:	f7ff fb68 	bl	162f4 <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
   16c24:	213a      	movs	r1, #58	; 0x3a
   16c26:	4620      	mov	r0, r4
   16c28:	f000 f8c5 	bl	16db6 <net_ipv6_finalize>
   16c2c:	f7ff fed2 	bl	169d4 <z_arch_is_user_context>
	if (net_send_data(pkt) >= 0) {
   16c30:	4620      	mov	r0, r4
   16c32:	f7fe fd63 	bl	156fc <net_send_data>
   16c36:	2800      	cmp	r0, #0
   16c38:	dbb8      	blt.n	16bac <net_icmpv6_send_error+0xac>
   16c3a:	e78b      	b.n	16b54 <net_icmpv6_send_error+0x54>
		err = net_pkt_memset(pkt, 0, NET_ICMPV6_UNUSED_LEN);
   16c3c:	2204      	movs	r2, #4
   16c3e:	4620      	mov	r0, r4
   16c40:	f7ff fbe2 	bl	16408 <net_pkt_memset>
   16c44:	e7d1      	b.n	16bea <net_icmpv6_send_error+0xea>
	int err = -EIO;
   16c46:	f06f 0604 	mvn.w	r6, #4
   16c4a:	e783      	b.n	16b54 <net_icmpv6_send_error+0x54>
		err = -ENOMEM;
   16c4c:	f06f 060b 	mvn.w	r6, #11
   16c50:	e780      	b.n	16b54 <net_icmpv6_send_error+0x54>

00016c52 <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   16c52:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   16c56:	b923      	cbnz	r3, 16c62 <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   16c58:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   16c5c:	f000 0001 	and.w	r0, r0, #1
   16c60:	4770      	bx	lr
		return false;
   16c62:	2000      	movs	r0, #0
}
   16c64:	4770      	bx	lr

00016c66 <net_nbr_unref>:
{
   16c66:	b510      	push	{r4, lr}
   16c68:	4602      	mov	r2, r0
   16c6a:	f7ff fff2 	bl	16c52 <z_arch_is_user_context>
	if (--nbr->ref) {
   16c6e:	7813      	ldrb	r3, [r2, #0]
   16c70:	3b01      	subs	r3, #1
   16c72:	b2db      	uxtb	r3, r3
   16c74:	7013      	strb	r3, [r2, #0]
   16c76:	b92b      	cbnz	r3, 16c84 <net_nbr_unref+0x1e>
	if (nbr->remove) {
   16c78:	6913      	ldr	r3, [r2, #16]
   16c7a:	b11b      	cbz	r3, 16c84 <net_nbr_unref+0x1e>
		nbr->remove(nbr);
   16c7c:	4610      	mov	r0, r2
}
   16c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		nbr->remove(nbr);
   16c82:	4718      	bx	r3
}
   16c84:	bd10      	pop	{r4, pc}

00016c86 <net_nbr_get>:
{
   16c86:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < table->nbr_count; i++) {
   16c88:	8905      	ldrh	r5, [r0, #8]
   16c8a:	2100      	movs	r1, #0
   16c8c:	428d      	cmp	r5, r1
   16c8e:	dc01      	bgt.n	16c94 <net_nbr_get+0xe>
	return NULL;
   16c90:	2200      	movs	r2, #0
   16c92:	e010      	b.n	16cb6 <net_nbr_get+0x30>
		struct net_nbr *nbr = get_nbr(table->nbr, i);
   16c94:	6804      	ldr	r4, [r0, #0]
			  start->size + start->extra_data_size) * idx));
   16c96:	88a2      	ldrh	r2, [r4, #4]
   16c98:	8863      	ldrh	r3, [r4, #2]
   16c9a:	4413      	add	r3, r2
   16c9c:	3314      	adds	r3, #20
   16c9e:	434b      	muls	r3, r1
	return (struct net_nbr *)((u8_t *)start +
   16ca0:	18e2      	adds	r2, r4, r3
		if (!nbr->ref) {
   16ca2:	5ce3      	ldrb	r3, [r4, r3]
   16ca4:	b94b      	cbnz	r3, 16cba <net_nbr_get+0x34>
			nbr->data = nbr->__nbr;
   16ca6:	f102 0314 	add.w	r3, r2, #20
   16caa:	60d3      	str	r3, [r2, #12]
   16cac:	f7ff ffd1 	bl	16c52 <z_arch_is_user_context>
	nbr->ref++;
   16cb0:	7813      	ldrb	r3, [r2, #0]
   16cb2:	3301      	adds	r3, #1
   16cb4:	7013      	strb	r3, [r2, #0]
}
   16cb6:	4610      	mov	r0, r2
   16cb8:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < table->nbr_count; i++) {
   16cba:	3101      	adds	r1, #1
   16cbc:	e7e6      	b.n	16c8c <net_nbr_get+0x6>

00016cbe <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   16cbe:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   16cc2:	b923      	cbnz	r3, 16cce <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   16cc4:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   16cc8:	f000 0001 	and.w	r0, r0, #1
   16ccc:	4770      	bx	lr
		return false;
   16cce:	2000      	movs	r0, #0
}
   16cd0:	4770      	bx	lr

00016cd2 <net_ipv6_is_addr_loopback>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   16cd2:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   16cd4:	b94a      	cbnz	r2, 16cea <net_ipv6_is_addr_loopback+0x18>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   16cd6:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   16cd8:	b93b      	cbnz	r3, 16cea <net_ipv6_is_addr_loopback+0x18>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   16cda:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   16cdc:	b92a      	cbnz	r2, 16cea <net_ipv6_is_addr_loopback+0x18>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   16cde:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   16ce0:	f100 437f 	add.w	r3, r0, #4278190080	; 0xff000000
   16ce4:	4258      	negs	r0, r3
   16ce6:	4158      	adcs	r0, r3
   16ce8:	4770      	bx	lr
   16cea:	2000      	movs	r0, #0
   16cec:	4770      	bx	lr

00016cee <net_ipv6_create>:
{
   16cee:	b5f0      	push	{r4, r5, r6, r7, lr}
   16cf0:	b08b      	sub	sp, #44	; 0x2c
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   16cf2:	2328      	movs	r3, #40	; 0x28
{
   16cf4:	460c      	mov	r4, r1
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   16cf6:	2700      	movs	r7, #0
	ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
   16cf8:	4669      	mov	r1, sp
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   16cfa:	e9cd 7300 	strd	r7, r3, [sp]
{
   16cfe:	4606      	mov	r6, r0
   16d00:	4615      	mov	r5, r2
	ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
   16d02:	f7ff fc64 	bl	165ce <net_pkt_get_data>
	if (!ipv6_hdr) {
   16d06:	4603      	mov	r3, r0
   16d08:	2800      	cmp	r0, #0
   16d0a:	d051      	beq.n	16db0 <net_ipv6_create+0xc2>
	ipv6_hdr->vtc     = 0x60;
   16d0c:	2260      	movs	r2, #96	; 0x60
   16d0e:	7002      	strb	r2, [r0, #0]
	ipv6_hdr->tcflow  = 0U;
   16d10:	7047      	strb	r7, [r0, #1]
	ipv6_hdr->nexthdr = 0U;
   16d12:	7187      	strb	r7, [r0, #6]
	ipv6_hdr->hop_limit = net_pkt_ipv6_hop_limit(pkt);
   16d14:	f896 2041 	ldrb.w	r2, [r6, #65]	; 0x41
	ipv6_hdr->flow    = 0U;
   16d18:	7087      	strb	r7, [r0, #2]
   16d1a:	70c7      	strb	r7, [r0, #3]
	ipv6_hdr->len     = 0U;
   16d1c:	7107      	strb	r7, [r0, #4]
   16d1e:	7147      	strb	r7, [r0, #5]
	ipv6_hdr->hop_limit = net_pkt_ipv6_hop_limit(pkt);
   16d20:	71c2      	strb	r2, [r0, #7]
	if (ipv6_hdr->hop_limit == 0U) {
   16d22:	b92a      	cbnz	r2, 16d30 <net_ipv6_create+0x42>
			net_if_ipv6_get_hop_limit(net_pkt_iface(pkt));
   16d24:	6a71      	ldr	r1, [r6, #36]	; 0x24
   16d26:	6849      	ldr	r1, [r1, #4]
	if (!iface->config.ip.ipv6) {
   16d28:	b109      	cbz	r1, 16d2e <net_ipv6_create+0x40>
	return iface->config.ip.ipv6->hop_limit;
   16d2a:	f891 2154 	ldrb.w	r2, [r1, #340]	; 0x154
		ipv6_hdr->hop_limit =
   16d2e:	71da      	strb	r2, [r3, #7]
	net_ipaddr_copy(&ipv6_hdr->dst, dst);
   16d30:	462a      	mov	r2, r5
   16d32:	ad02      	add	r5, sp, #8
   16d34:	f102 0e10 	add.w	lr, r2, #16
   16d38:	462f      	mov	r7, r5
   16d3a:	6810      	ldr	r0, [r2, #0]
   16d3c:	6851      	ldr	r1, [r2, #4]
   16d3e:	46ac      	mov	ip, r5
   16d40:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   16d44:	3208      	adds	r2, #8
   16d46:	4572      	cmp	r2, lr
   16d48:	4665      	mov	r5, ip
   16d4a:	d1f6      	bne.n	16d3a <net_ipv6_create+0x4c>
   16d4c:	f103 0c18 	add.w	ip, r3, #24
   16d50:	ad06      	add	r5, sp, #24
   16d52:	463a      	mov	r2, r7
   16d54:	ca03      	ldmia	r2!, {r0, r1}
   16d56:	42aa      	cmp	r2, r5
   16d58:	f8cc 0000 	str.w	r0, [ip]
   16d5c:	f8cc 1004 	str.w	r1, [ip, #4]
   16d60:	4617      	mov	r7, r2
   16d62:	f10c 0c08 	add.w	ip, ip, #8
   16d66:	d1f4      	bne.n	16d52 <net_ipv6_create+0x64>
	net_ipaddr_copy(&ipv6_hdr->src, src);
   16d68:	4622      	mov	r2, r4
   16d6a:	462f      	mov	r7, r5
   16d6c:	f104 0c10 	add.w	ip, r4, #16
   16d70:	6810      	ldr	r0, [r2, #0]
   16d72:	6851      	ldr	r1, [r2, #4]
   16d74:	463c      	mov	r4, r7
   16d76:	c403      	stmia	r4!, {r0, r1}
   16d78:	3208      	adds	r2, #8
   16d7a:	4562      	cmp	r2, ip
   16d7c:	4627      	mov	r7, r4
   16d7e:	d1f7      	bne.n	16d70 <net_ipv6_create+0x82>
   16d80:	462a      	mov	r2, r5
   16d82:	3308      	adds	r3, #8
   16d84:	ad0a      	add	r5, sp, #40	; 0x28
   16d86:	4614      	mov	r4, r2
   16d88:	cc03      	ldmia	r4!, {r0, r1}
   16d8a:	42ac      	cmp	r4, r5
   16d8c:	6018      	str	r0, [r3, #0]
   16d8e:	6059      	str	r1, [r3, #4]
   16d90:	4622      	mov	r2, r4
   16d92:	f103 0308 	add.w	r3, r3, #8
   16d96:	d1f6      	bne.n	16d86 <net_ipv6_create+0x98>
	pkt->ip_hdr_len = len;
   16d98:	2328      	movs	r3, #40	; 0x28
   16d9a:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
	pkt->ipv6_ext_len = len;
   16d9e:	2300      	movs	r3, #0
   16da0:	f8a6 3042 	strh.w	r3, [r6, #66]	; 0x42
	return net_pkt_set_data(pkt, &ipv6_access);
   16da4:	4669      	mov	r1, sp
   16da6:	4630      	mov	r0, r6
   16da8:	f7ff fc37 	bl	1661a <net_pkt_set_data>
}
   16dac:	b00b      	add	sp, #44	; 0x2c
   16dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   16db0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16db4:	e7fa      	b.n	16dac <net_ipv6_create+0xbe>

00016db6 <net_ipv6_finalize>:
{
   16db6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   16db8:	2328      	movs	r3, #40	; 0x28
   16dba:	2500      	movs	r5, #0
   16dbc:	e9cd 5300 	strd	r5, r3, [sp]
	pkt->overwrite = overwrite;
   16dc0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
   16dc4:	f043 0301 	orr.w	r3, r3, #1
{
   16dc8:	460e      	mov	r6, r1
   16dca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
	ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
   16dce:	4669      	mov	r1, sp
{
   16dd0:	4604      	mov	r4, r0
	ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
   16dd2:	f7ff fbfc 	bl	165ce <net_pkt_get_data>
	if (!ipv6_hdr) {
   16dd6:	b918      	cbnz	r0, 16de0 <net_ipv6_finalize+0x2a>
		return -ENOBUFS;
   16dd8:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   16ddc:	b002      	add	sp, #8
   16dde:	bd70      	pop	{r4, r5, r6, pc}
	ipv6_hdr->len = htons(net_pkt_get_len(pkt) -
   16de0:	6962      	ldr	r2, [r4, #20]
	size_t bytes = 0;
   16de2:	462b      	mov	r3, r5
	while (buf) {
   16de4:	b9ca      	cbnz	r2, 16e1a <net_ipv6_finalize+0x64>
   16de6:	3b28      	subs	r3, #40	; 0x28
   16de8:	f3c3 2207 	ubfx	r2, r3, #8, #8
   16dec:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   16df0:	8083      	strh	r3, [r0, #4]
	if (net_pkt_ipv6_next_hdr(pkt) != 255U) {
   16df2:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
	return pkt->ipv6_next_hdr;
   16df6:	2bff      	cmp	r3, #255	; 0xff
   16df8:	bf08      	it	eq
   16dfa:	4633      	moveq	r3, r6
   16dfc:	7183      	strb	r3, [r0, #6]
	net_pkt_set_data(pkt, &ipv6_access);
   16dfe:	4669      	mov	r1, sp
   16e00:	4620      	mov	r0, r4
   16e02:	f7ff fc0a 	bl	1661a <net_pkt_set_data>
	if (net_pkt_ipv6_next_hdr(pkt) != 255U &&
   16e06:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   16e0a:	2bff      	cmp	r3, #255	; 0xff
   16e0c:	d109      	bne.n	16e22 <net_ipv6_finalize+0x6c>
	if (IS_ENABLED(CONFIG_NET_UDP) &&
   16e0e:	2e11      	cmp	r6, #17
   16e10:	d10f      	bne.n	16e32 <net_ipv6_finalize+0x7c>
		return net_udp_finalize(pkt);
   16e12:	4620      	mov	r0, r4
   16e14:	f001 f88a 	bl	17f2c <net_udp_finalize>
   16e18:	e7e0      	b.n	16ddc <net_ipv6_finalize+0x26>
		bytes += buf->len;
   16e1a:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
   16e1c:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
   16e1e:	440b      	add	r3, r1
		buf = buf->frags;
   16e20:	e7e0      	b.n	16de4 <net_ipv6_finalize+0x2e>
	    net_pkt_skip(pkt, net_pkt_ipv6_ext_len(pkt))) {
   16e22:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
   16e26:	4620      	mov	r0, r4
   16e28:	f7ff fae0 	bl	163ec <net_pkt_skip>
	if (net_pkt_ipv6_next_hdr(pkt) != 255U &&
   16e2c:	2800      	cmp	r0, #0
   16e2e:	d0ee      	beq.n	16e0e <net_ipv6_finalize+0x58>
   16e30:	e7d2      	b.n	16dd8 <net_ipv6_finalize+0x22>
	} else if (next_header_proto == IPPROTO_ICMPV6) {
   16e32:	2e3a      	cmp	r6, #58	; 0x3a
   16e34:	d103      	bne.n	16e3e <net_ipv6_finalize+0x88>
		return net_icmpv6_finalize(pkt);
   16e36:	4620      	mov	r0, r4
   16e38:	f7ff fdd6 	bl	169e8 <net_icmpv6_finalize>
   16e3c:	e7ce      	b.n	16ddc <net_ipv6_finalize+0x26>
	return 0;
   16e3e:	2000      	movs	r0, #0
   16e40:	e7cc      	b.n	16ddc <net_ipv6_finalize+0x26>

00016e42 <net_ipv6_init>:

void net_ipv6_init(void)
{
   16e42:	b508      	push	{r3, lr}
	net_ipv6_nbr_init();
   16e44:	f7f6 fe34 	bl	dab0 <net_ipv6_nbr_init>

#if defined(CONFIG_NET_IPV6_MLD)
	net_ipv6_mld_init();
#endif
}
   16e48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	net_ipv6_mld_init();
   16e4c:	f7f6 be66 	b.w	db1c <net_ipv6_mld_init>

00016e50 <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   16e50:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   16e54:	b923      	cbnz	r3, 16e60 <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   16e56:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   16e5a:	f000 0001 	and.w	r0, r0, #1
   16e5e:	4770      	bx	lr
		return false;
   16e60:	2000      	movs	r0, #0
}
   16e62:	4770      	bx	lr

00016e64 <net_ipv6_is_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   16e64:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   16e66:	b942      	cbnz	r2, 16e7a <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   16e68:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   16e6a:	b933      	cbnz	r3, 16e7a <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   16e6c:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   16e6e:	b922      	cbnz	r2, 16e7a <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   16e70:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   16e72:	fab0 f080 	clz	r0, r0
   16e76:	0940      	lsrs	r0, r0, #5
   16e78:	4770      	bx	lr
   16e7a:	2000      	movs	r0, #0
   16e7c:	4770      	bx	lr

00016e7e <net_neighbor_data_remove>:
   16e7e:	f7ff bfe7 	b.w	16e50 <z_arch_is_user_context>

00016e82 <nbr_clear_ns_pending>:
	data->send_ns = 0;
   16e82:	2200      	movs	r2, #0
   16e84:	2300      	movs	r3, #0
{
   16e86:	b510      	push	{r4, lr}
   16e88:	4604      	mov	r4, r0
	data->send_ns = 0;
   16e8a:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
	if (data->pending) {
   16e8e:	6800      	ldr	r0, [r0, #0]
   16e90:	b118      	cbz	r0, 16e9a <nbr_clear_ns_pending+0x18>
		net_pkt_unref(data->pending);
   16e92:	f7ff f9b9 	bl	16208 <net_pkt_unref>
		data->pending = NULL;
   16e96:	2300      	movs	r3, #0
   16e98:	6023      	str	r3, [r4, #0]
}
   16e9a:	bd10      	pop	{r4, pc}

00016e9c <nbr_free>:
{
   16e9c:	b538      	push	{r3, r4, r5, lr}
   16e9e:	4604      	mov	r4, r0
   16ea0:	f7ff ffd6 	bl	16e50 <z_arch_is_user_context>
	nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   16ea4:	68e0      	ldr	r0, [r4, #12]
   16ea6:	f7ff ffec 	bl	16e82 <nbr_clear_ns_pending>
	net_ipv6_nbr_data(nbr)->reachable = 0;
   16eaa:	68e3      	ldr	r3, [r4, #12]
   16eac:	2100      	movs	r1, #0
	net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   16eae:	2500      	movs	r5, #0
	net_ipv6_nbr_data(nbr)->reachable = 0;
   16eb0:	2000      	movs	r0, #0
   16eb2:	e9c3 0106 	strd	r0, r1, [r3, #24]
	net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   16eb6:	621d      	str	r5, [r3, #32]
	net_nbr_unref(nbr);
   16eb8:	4620      	mov	r0, r4
   16eba:	f7ff fed4 	bl	16c66 <net_nbr_unref>
	net_nbr_unlink(nbr, NULL);
   16ebe:	4629      	mov	r1, r5
   16ec0:	4620      	mov	r0, r4
}
   16ec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_nbr_unlink(nbr, NULL);
   16ec6:	f7f5 bf1b 	b.w	cd00 <net_nbr_unlink>

00016eca <set_llao>:
{
   16eca:	b573      	push	{r0, r1, r4, r5, r6, lr}
   16ecc:	460d      	mov	r5, r1
   16ece:	4614      	mov	r4, r2
	struct net_icmpv6_nd_opt_hdr opt_hdr = {
   16ed0:	f88d 3004 	strb.w	r3, [sp, #4]
	if (net_pkt_write(pkt, &opt_hdr,
   16ed4:	a901      	add	r1, sp, #4
	struct net_icmpv6_nd_opt_hdr opt_hdr = {
   16ed6:	08d3      	lsrs	r3, r2, #3
	if (net_pkt_write(pkt, &opt_hdr,
   16ed8:	2202      	movs	r2, #2
{
   16eda:	4606      	mov	r6, r0
	struct net_icmpv6_nd_opt_hdr opt_hdr = {
   16edc:	f88d 3005 	strb.w	r3, [sp, #5]
	if (net_pkt_write(pkt, &opt_hdr,
   16ee0:	f7ff fb58 	bl	16594 <net_pkt_write>
   16ee4:	b110      	cbz	r0, 16eec <set_llao+0x22>
		return false;
   16ee6:	2000      	movs	r0, #0
}
   16ee8:	b002      	add	sp, #8
   16eea:	bd70      	pop	{r4, r5, r6, pc}
	    net_pkt_write(pkt, lladdr->addr, lladdr->len) ||
   16eec:	6829      	ldr	r1, [r5, #0]
   16eee:	792a      	ldrb	r2, [r5, #4]
   16ef0:	4630      	mov	r0, r6
   16ef2:	f7ff fb4f 	bl	16594 <net_pkt_write>
			  sizeof(struct net_icmpv6_nd_opt_hdr)) ||
   16ef6:	4601      	mov	r1, r0
   16ef8:	2800      	cmp	r0, #0
   16efa:	d1f4      	bne.n	16ee6 <set_llao+0x1c>
	    net_pkt_memset(pkt, 0, llao_len - lladdr->len - 2)) {
   16efc:	792a      	ldrb	r2, [r5, #4]
   16efe:	1aa2      	subs	r2, r4, r2
   16f00:	3a02      	subs	r2, #2
   16f02:	4630      	mov	r0, r6
   16f04:	f7ff fa80 	bl	16408 <net_pkt_memset>
	    net_pkt_write(pkt, lladdr->addr, lladdr->len) ||
   16f08:	fab0 f080 	clz	r0, r0
   16f0c:	0940      	lsrs	r0, r0, #5
   16f0e:	e7eb      	b.n	16ee8 <set_llao+0x1e>

00016f10 <net_linkaddr_set>:
{
   16f10:	b510      	push	{r4, lr}
	if (!lladdr_store || !new_addr) {
   16f12:	b140      	cbz	r0, 16f26 <net_linkaddr_set+0x16>
   16f14:	b139      	cbz	r1, 16f26 <net_linkaddr_set+0x16>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   16f16:	2a06      	cmp	r2, #6
   16f18:	d808      	bhi.n	16f2c <net_linkaddr_set+0x1c>
	lladdr_store->len = new_len;
   16f1a:	7042      	strb	r2, [r0, #1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   16f1c:	3002      	adds	r0, #2
   16f1e:	f7eb fa2d 	bl	237c <memcpy>

	return 0;
   16f22:	2000      	movs	r0, #0
}
   16f24:	bd10      	pop	{r4, pc}
		return -EINVAL;
   16f26:	f06f 0015 	mvn.w	r0, #21
   16f2a:	e7fb      	b.n	16f24 <net_linkaddr_set+0x14>
		return -EMSGSIZE;
   16f2c:	f06f 0079 	mvn.w	r0, #121	; 0x79
   16f30:	e7f8      	b.n	16f24 <net_linkaddr_set+0x14>

00016f32 <net_ipv6_addr_create_ll_allnodes_mcast>:
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   16f32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16f36:	2202      	movs	r2, #2
   16f38:	7003      	strb	r3, [r0, #0]
   16f3a:	7042      	strb	r2, [r0, #1]
   16f3c:	2300      	movs	r3, #0
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   16f3e:	7083      	strb	r3, [r0, #2]
   16f40:	70c3      	strb	r3, [r0, #3]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   16f42:	7103      	strb	r3, [r0, #4]
   16f44:	7143      	strb	r3, [r0, #5]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   16f46:	7183      	strb	r3, [r0, #6]
   16f48:	71c3      	strb	r3, [r0, #7]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   16f4a:	7203      	strb	r3, [r0, #8]
   16f4c:	7243      	strb	r3, [r0, #9]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   16f4e:	7283      	strb	r3, [r0, #10]
   16f50:	72c3      	strb	r3, [r0, #11]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   16f52:	7303      	strb	r3, [r0, #12]
   16f54:	7343      	strb	r3, [r0, #13]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   16f56:	7383      	strb	r3, [r0, #14]
   16f58:	2301      	movs	r3, #1
   16f5a:	73c3      	strb	r3, [r0, #15]
}
   16f5c:	4770      	bx	lr

00016f5e <nbr_init>:
{
   16f5e:	b5f0      	push	{r4, r5, r6, r7, lr}
   16f60:	461f      	mov	r7, r3
   16f62:	b085      	sub	sp, #20
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   16f64:	23ff      	movs	r3, #255	; 0xff
   16f66:	7043      	strb	r3, [r0, #1]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
   16f68:	68c4      	ldr	r4, [r0, #12]
	nbr->iface = iface;
   16f6a:	6081      	str	r1, [r0, #8]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
   16f6c:	466b      	mov	r3, sp
{
   16f6e:	4605      	mov	r5, r0
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
   16f70:	f102 0e10 	add.w	lr, r2, #16
   16f74:	461e      	mov	r6, r3
   16f76:	6810      	ldr	r0, [r2, #0]
   16f78:	6851      	ldr	r1, [r2, #4]
   16f7a:	469c      	mov	ip, r3
   16f7c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   16f80:	3208      	adds	r2, #8
   16f82:	4572      	cmp	r2, lr
   16f84:	4663      	mov	r3, ip
   16f86:	d1f6      	bne.n	16f76 <nbr_init+0x18>
   16f88:	1d22      	adds	r2, r4, #4
   16f8a:	ab04      	add	r3, sp, #16
   16f8c:	4634      	mov	r4, r6
   16f8e:	cc03      	ldmia	r4!, {r0, r1}
   16f90:	429c      	cmp	r4, r3
   16f92:	6010      	str	r0, [r2, #0]
   16f94:	6051      	str	r1, [r2, #4]
   16f96:	4626      	mov	r6, r4
   16f98:	f102 0208 	add.w	r2, r2, #8
   16f9c:	d1f6      	bne.n	16f8c <nbr_init+0x2e>
	ipv6_nbr_set_state(nbr, state);
   16f9e:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
   16fa2:	4628      	mov	r0, r5
   16fa4:	f7f6 f8ac 	bl	d100 <ipv6_nbr_set_state>
	net_ipv6_nbr_data(nbr)->is_router = is_router;
   16fa8:	68ea      	ldr	r2, [r5, #12]
	net_ipv6_nbr_data(nbr)->pending = NULL;
   16faa:	2300      	movs	r3, #0
	net_ipv6_nbr_data(nbr)->send_ns = 0;
   16fac:	2000      	movs	r0, #0
   16fae:	2100      	movs	r1, #0
	net_ipv6_nbr_data(nbr)->is_router = is_router;
   16fb0:	f882 7035 	strb.w	r7, [r2, #53]	; 0x35
	net_ipv6_nbr_data(nbr)->pending = NULL;
   16fb4:	6013      	str	r3, [r2, #0]
	net_ipv6_nbr_data(nbr)->send_ns = 0;
   16fb6:	e9c2 010a 	strd	r0, r1, [r2, #40]	; 0x28
	net_ipv6_nbr_data(nbr)->reachable = 0;
   16fba:	e9c2 0106 	strd	r0, r1, [r2, #24]
	net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   16fbe:	6213      	str	r3, [r2, #32]
}
   16fc0:	b005      	add	sp, #20
   16fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00016fc4 <net_neighbor_table_clear>:
   16fc4:	f7ff bf44 	b.w	16e50 <z_arch_is_user_context>

00016fc8 <k_uptime_get>:
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   16fc8:	e92d 4147 	stmdb	sp!, {r0, r1, r2, r6, r8, lr}
   16fcc:	f7ff ff40 	bl	16e50 <z_arch_is_user_context>
   16fd0:	b138      	cbz	r0, 16fe2 <k_uptime_get+0x1a>
	(void)z_arch_syscall_invoke1((u32_t)&ret, call_id);
   16fd2:	4668      	mov	r0, sp
	register u32_t r6 __asm__("r6") = call_id;
   16fd4:	2676      	movs	r6, #118	; 0x76
	__asm__ volatile("svc %[svid]\n"
   16fd6:	df03      	svc	3
	return ret;
   16fd8:	e9dd 0100 	ldrd	r0, r1, [sp]
   16fdc:	b003      	add	sp, #12
   16fde:	e8bd 8140 	ldmia.w	sp!, {r6, r8, pc}
   16fe2:	f001 fd1f 	bl	18a24 <z_impl_k_uptime_get>
   16fe6:	e7f9      	b.n	16fdc <k_uptime_get+0x14>

00016fe8 <net_ipv6_nbr_rm>:
{
   16fe8:	b570      	push	{r4, r5, r6, lr}
   16fea:	4605      	mov	r5, r0
   16fec:	460e      	mov	r6, r1
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   16fee:	f7f6 f827 	bl	d040 <nbr_lookup.isra.16>
	if (!nbr) {
   16ff2:	4604      	mov	r4, r0
   16ff4:	b138      	cbz	r0, 17006 <net_ipv6_nbr_rm+0x1e>
	net_route_del_by_nexthop(iface, addr);
   16ff6:	4631      	mov	r1, r6
   16ff8:	4628      	mov	r0, r5
   16ffa:	f7f6 fe1f 	bl	dc3c <net_route_del_by_nexthop>
	nbr_free(nbr);
   16ffe:	4620      	mov	r0, r4
   17000:	f7ff ff4c 	bl	16e9c <nbr_free>
	return true;
   17004:	2001      	movs	r0, #1
}
   17006:	bd70      	pop	{r4, r5, r6, pc}

00017008 <net_ipv6_nbr_lookup>:
	return nbr_lookup(&net_neighbor.table, iface, addr);
   17008:	f7f6 b81a 	b.w	d040 <nbr_lookup.isra.16>

0001700c <net_ipv6_send_na>:
{
   1700c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17010:	4691      	mov	r9, r2
   17012:	b089      	sub	sp, #36	; 0x24
   17014:	461d      	mov	r5, r3
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
   17016:	2200      	movs	r2, #0
   17018:	2314      	movs	r3, #20
   1701a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	if (net_if_get_link_addr(iface)->len == 6U) {
   1701e:	6803      	ldr	r3, [r0, #0]
   17020:	7d1b      	ldrb	r3, [r3, #20]
   17022:	2b06      	cmp	r3, #6
{
   17024:	4680      	mov	r8, r0
   17026:	460e      	mov	r6, r1
	if (net_if_get_link_addr(iface)->len == 6U) {
   17028:	d021      	beq.n	1706e <net_ipv6_send_na+0x62>
		return 16;
   1702a:	2b08      	cmp	r3, #8
   1702c:	bf14      	ite	ne
   1702e:	2700      	movne	r7, #0
   17030:	2710      	moveq	r7, #16
	pkt = net_pkt_alloc_with_buffer(iface,
   17032:	2364      	movs	r3, #100	; 0x64
   17034:	9300      	str	r3, [sp, #0]
   17036:	2202      	movs	r2, #2
   17038:	233a      	movs	r3, #58	; 0x3a
   1703a:	f107 0114 	add.w	r1, r7, #20
   1703e:	4640      	mov	r0, r8
   17040:	f7f5 fd6a 	bl	cb18 <net_pkt_alloc_with_buffer>
	if (!pkt) {
   17044:	4604      	mov	r4, r0
   17046:	2800      	cmp	r0, #0
   17048:	d063      	beq.n	17112 <net_ipv6_send_na+0x106>
	pkt->ipv6_hop_limit = hop_limit;
   1704a:	23ff      	movs	r3, #255	; 0xff
	if (net_ipv6_create(pkt, src, dst) ||
   1704c:	464a      	mov	r2, r9
   1704e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
   17052:	4631      	mov	r1, r6
   17054:	f7ff fe4b 	bl	16cee <net_ipv6_create>
   17058:	4602      	mov	r2, r0
   1705a:	b150      	cbz	r0, 17072 <net_ipv6_send_na+0x66>
	int ret = -ENOBUFS;
   1705c:	f06f 0568 	mvn.w	r5, #104	; 0x68
	net_pkt_unref(pkt);
   17060:	4620      	mov	r0, r4
   17062:	f7ff f8d1 	bl	16208 <net_pkt_unref>
}
   17066:	4628      	mov	r0, r5
   17068:	b009      	add	sp, #36	; 0x24
   1706a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return 8;
   1706e:	2708      	movs	r7, #8
   17070:	e7df      	b.n	17032 <net_ipv6_send_na+0x26>
	    net_icmpv6_create(pkt, NET_ICMPV6_NA, 0)) {
   17072:	2188      	movs	r1, #136	; 0x88
   17074:	4620      	mov	r0, r4
   17076:	f7ff fcd0 	bl	16a1a <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, dst) ||
   1707a:	4681      	mov	r9, r0
   1707c:	2800      	cmp	r0, #0
   1707e:	d1ed      	bne.n	1705c <net_ipv6_send_na+0x50>
	na_hdr = (struct net_icmpv6_na_hdr *)net_pkt_get_data(pkt, &na_access);
   17080:	a902      	add	r1, sp, #8
   17082:	4620      	mov	r0, r4
   17084:	f7ff faa3 	bl	165ce <net_pkt_get_data>
	if (!na_hdr) {
   17088:	4606      	mov	r6, r0
   1708a:	2800      	cmp	r0, #0
   1708c:	d0e6      	beq.n	1705c <net_ipv6_send_na+0x50>
__ssp_bos_icheck3(memset, void *, int)
   1708e:	2214      	movs	r2, #20
   17090:	4649      	mov	r1, r9
   17092:	f7eb f9ae 	bl	23f2 <memset>
	na_hdr->flags = flags;
   17096:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1709a:	7033      	strb	r3, [r6, #0]
	net_ipaddr_copy(&na_hdr->tgt, tgt);
   1709c:	aa04      	add	r2, sp, #16
   1709e:	462b      	mov	r3, r5
   170a0:	f105 0e10 	add.w	lr, r5, #16
   170a4:	4615      	mov	r5, r2
   170a6:	6818      	ldr	r0, [r3, #0]
   170a8:	6859      	ldr	r1, [r3, #4]
   170aa:	4694      	mov	ip, r2
   170ac:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   170b0:	3308      	adds	r3, #8
   170b2:	4573      	cmp	r3, lr
   170b4:	4662      	mov	r2, ip
   170b6:	d1f6      	bne.n	170a6 <net_ipv6_send_na+0x9a>
   170b8:	1d33      	adds	r3, r6, #4
   170ba:	ae08      	add	r6, sp, #32
   170bc:	462a      	mov	r2, r5
   170be:	ca03      	ldmia	r2!, {r0, r1}
   170c0:	42b2      	cmp	r2, r6
   170c2:	6018      	str	r0, [r3, #0]
   170c4:	6059      	str	r1, [r3, #4]
   170c6:	4615      	mov	r5, r2
   170c8:	f103 0308 	add.w	r3, r3, #8
   170cc:	d1f6      	bne.n	170bc <net_ipv6_send_na+0xb0>
	if (net_pkt_set_data(pkt, &na_access)) {
   170ce:	a902      	add	r1, sp, #8
   170d0:	4620      	mov	r0, r4
   170d2:	f7ff faa2 	bl	1661a <net_pkt_set_data>
   170d6:	4605      	mov	r5, r0
   170d8:	2800      	cmp	r0, #0
   170da:	d1bf      	bne.n	1705c <net_ipv6_send_na+0x50>
	return &iface->if_dev->link_addr;
   170dc:	f8d8 1000 	ldr.w	r1, [r8]
	if (!set_llao(pkt, net_if_get_link_addr(iface),
   170e0:	2302      	movs	r3, #2
   170e2:	463a      	mov	r2, r7
   170e4:	3110      	adds	r1, #16
   170e6:	4620      	mov	r0, r4
   170e8:	f7ff feef 	bl	16eca <set_llao>
   170ec:	2800      	cmp	r0, #0
   170ee:	d0b5      	beq.n	1705c <net_ipv6_send_na+0x50>
	net_pkt_cursor_init(pkt);
   170f0:	4620      	mov	r0, r4
   170f2:	f7ff f8ff 	bl	162f4 <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
   170f6:	213a      	movs	r1, #58	; 0x3a
   170f8:	4620      	mov	r0, r4
   170fa:	f7ff fe5c 	bl	16db6 <net_ipv6_finalize>
	return z_arch_is_user_context();
   170fe:	f7ff fea7 	bl	16e50 <z_arch_is_user_context>
	if (net_send_data(pkt) < 0) {
   17102:	4620      	mov	r0, r4
   17104:	f7fe fafa 	bl	156fc <net_send_data>
   17108:	2800      	cmp	r0, #0
   1710a:	daac      	bge.n	17066 <net_ipv6_send_na+0x5a>
		ret = -EINVAL;
   1710c:	f06f 0515 	mvn.w	r5, #21
   17110:	e7a6      	b.n	17060 <net_ipv6_send_na+0x54>
		return -ENOMEM;
   17112:	f06f 050b 	mvn.w	r5, #11
   17116:	e7a6      	b.n	17066 <net_ipv6_send_na+0x5a>

00017118 <net_ipv6_nbr_set_reachable_timer>:
	time = net_if_ipv6_get_reachable_time(iface);
   17118:	6842      	ldr	r2, [r0, #4]
{
   1711a:	b510      	push	{r4, lr}
	if (!iface->config.ip.ipv6) {
   1711c:	b10a      	cbz	r2, 17122 <net_ipv6_nbr_set_reachable_timer+0xa>
	return iface->config.ip.ipv6->reachable_time;
   1711e:	f8d2 214c 	ldr.w	r2, [r2, #332]	; 0x14c
   17122:	f7ff fe95 	bl	16e50 <z_arch_is_user_context>
	ipv6_nd_restart_reachable_timer(nbr, time);
   17126:	2300      	movs	r3, #0
   17128:	4608      	mov	r0, r1
}
   1712a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ipv6_nd_restart_reachable_timer(nbr, time);
   1712e:	f7f6 b823 	b.w	d178 <ipv6_nd_restart_reachable_timer>

00017132 <handle_na_input>:
{
   17132:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
   17136:	2300      	movs	r3, #0
{
   17138:	b08b      	sub	sp, #44	; 0x2c
   1713a:	4690      	mov	r8, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
   1713c:	2214      	movs	r2, #20
   1713e:	e9cd 3202 	strd	r3, r2, [sp, #8]
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
   17142:	aa01      	add	r2, sp, #4
   17144:	9204      	str	r2, [sp, #16]
   17146:	2202      	movs	r2, #2
   17148:	9205      	str	r2, [sp, #20]
	u16_t length = net_pkt_get_len(pkt);
   1714a:	6942      	ldr	r2, [r0, #20]
{
   1714c:	4604      	mov	r4, r0
   1714e:	460e      	mov	r6, r1
	while (buf) {
   17150:	b94a      	cbnz	r2, 17166 <handle_na_input+0x34>
	na_hdr = (struct net_icmpv6_na_hdr *)net_pkt_get_data(pkt, &na_access);
   17152:	a902      	add	r1, sp, #8
   17154:	4620      	mov	r0, r4
	u16_t length = net_pkt_get_len(pkt);
   17156:	b29d      	uxth	r5, r3
	na_hdr = (struct net_icmpv6_na_hdr *)net_pkt_get_data(pkt, &na_access);
   17158:	f7ff fa39 	bl	165ce <net_pkt_get_data>
	if (!na_hdr) {
   1715c:	4607      	mov	r7, r0
   1715e:	b930      	cbnz	r0, 1716e <handle_na_input+0x3c>
   17160:	f7ff fe76 	bl	16e50 <z_arch_is_user_context>
			return false;
   17164:	e016      	b.n	17194 <handle_na_input+0x62>
		bytes += buf->len;
   17166:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
   17168:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
   1716a:	440b      	add	r3, r1
		buf = buf->frags;
   1716c:	e7f0      	b.n	17150 <handle_na_input+0x1e>
   1716e:	f7ff fe6f 	bl	16e50 <z_arch_is_user_context>
	if (((length < (sizeof(struct net_ipv6_hdr) +
   17172:	2d41      	cmp	r5, #65	; 0x41
   17174:	d90b      	bls.n	1718e <handle_na_input+0x5c>
			sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   17176:	79f3      	ldrb	r3, [r6, #7]
   17178:	2bff      	cmp	r3, #255	; 0xff
   1717a:	d108      	bne.n	1718e <handle_na_input+0x5c>
	     (ip_hdr->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   1717c:	793b      	ldrb	r3, [r7, #4]
   1717e:	2bff      	cmp	r3, #255	; 0xff
   17180:	d005      	beq.n	1718e <handle_na_input+0x5c>
	     net_ipv6_is_addr_mcast(&na_hdr->tgt) ||
   17182:	783b      	ldrb	r3, [r7, #0]
   17184:	0658      	lsls	r0, r3, #25
   17186:	d509      	bpl.n	1719c <handle_na_input+0x6a>
	     (na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED &&
   17188:	7e33      	ldrb	r3, [r6, #24]
   1718a:	2bff      	cmp	r3, #255	; 0xff
   1718c:	d106      	bne.n	1719c <handle_na_input+0x6a>
	      net_ipv6_is_addr_mcast(&ip_hdr->dst))) &&
   1718e:	f898 3001 	ldrb.w	r3, [r8, #1]
   17192:	b11b      	cbz	r3, 1719c <handle_na_input+0x6a>
	return NET_DROP;
   17194:	2002      	movs	r0, #2
}
   17196:	b00b      	add	sp, #44	; 0x2c
   17198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return net_pkt_skip(pkt, access->size);
   1719c:	9903      	ldr	r1, [sp, #12]
   1719e:	4620      	mov	r0, r4
   171a0:	f7ff f924 	bl	163ec <net_pkt_skip>
	pkt->ipv6_ext_opt_len = len;
   171a4:	2314      	movs	r3, #20
   171a6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
				net_pkt_get_data(pkt, &nd_access);
   171aa:	a904      	add	r1, sp, #16
   171ac:	4620      	mov	r0, r4
   171ae:	f7ff fa0e 	bl	165ce <net_pkt_get_data>
	length -= (sizeof(struct net_ipv6_hdr) + sizeof(struct net_icmp_hdr));
   171b2:	3d2c      	subs	r5, #44	; 0x2c
   171b4:	b2ad      	uxth	r5, r5
				net_pkt_get_data(pkt, &nd_access);
   171b6:	4602      	mov	r2, r0
	u16_t tllao_offset = 0U;
   171b8:	f04f 0800 	mov.w	r8, #0
	while (nd_opt_hdr && nd_opt_hdr->len &&
   171bc:	b12a      	cbz	r2, 171ca <handle_na_input+0x98>
   171be:	7853      	ldrb	r3, [r2, #1]
   171c0:	b11b      	cbz	r3, 171ca <handle_na_input+0x98>
	       net_pkt_ipv6_ext_opt_len(pkt) < length) {
   171c2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
	while (nd_opt_hdr && nd_opt_hdr->len &&
   171c6:	42ab      	cmp	r3, r5
   171c8:	d316      	bcc.n	171f8 <handle_na_input+0xc6>
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   171ca:	1d3d      	adds	r5, r7, #4
   171cc:	4629      	mov	r1, r5
   171ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
   171d0:	f7fe fc00 	bl	159d4 <net_if_ipv6_addr_lookup_by_iface>
	if (ifaddr) {
   171d4:	4602      	mov	r2, r0
   171d6:	b398      	cbz	r0, 17240 <handle_na_input+0x10e>
   171d8:	f7ff fe3a 	bl	16e50 <z_arch_is_user_context>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   171dc:	f992 3045 	ldrsb.w	r3, [r2, #69]	; 0x45
   171e0:	2b00      	cmp	r3, #0
   171e2:	d1d7      	bne.n	17194 <handle_na_input+0x62>
	if (net_ipv6_is_ll_addr(addr)) {
   171e4:	88ba      	ldrh	r2, [r7, #4]
   171e6:	f248 03fe 	movw	r3, #33022	; 0x80fe
   171ea:	429a      	cmp	r2, r3
   171ec:	d0b8      	beq.n	17160 <handle_na_input+0x2e>
	net_if_ipv6_dad_failed(iface, addr);
   171ee:	4629      	mov	r1, r5
   171f0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   171f2:	f7fe fcf9 	bl	15be8 <net_if_ipv6_dad_failed>
	return true;
   171f6:	e7cd      	b.n	17194 <handle_na_input+0x62>
		switch (nd_opt_hdr->type) {
   171f8:	7811      	ldrb	r1, [r2, #0]
   171fa:	2902      	cmp	r1, #2
   171fc:	d11d      	bne.n	1723a <handle_na_input+0x108>
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   171fe:	f8b4 8042 	ldrh.w	r8, [r4, #66]	; 0x42
   17202:	f108 0806 	add.w	r8, r8, #6
   17206:	4443      	add	r3, r8
   17208:	f894 803c 	ldrb.w	r8, [r4, #60]	; 0x3c
   1720c:	4443      	add	r3, r8
   1720e:	fa1f f883 	uxth.w	r8, r3
		prev_opt_len = net_pkt_ipv6_ext_opt_len(pkt);
   17212:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
					     (nd_opt_hdr->len << 3));
   17216:	7853      	ldrb	r3, [r2, #1]
					     net_pkt_ipv6_ext_opt_len(pkt) +
   17218:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   1721c:	b2db      	uxtb	r3, r3
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   1721e:	4299      	cmp	r1, r3
   17220:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
   17224:	d29c      	bcs.n	17160 <handle_na_input+0x2e>
	return net_pkt_skip(pkt, access->size);
   17226:	9905      	ldr	r1, [sp, #20]
   17228:	4620      	mov	r0, r4
   1722a:	f7ff f8df 	bl	163ec <net_pkt_skip>
					net_pkt_get_data(pkt, &nd_access);
   1722e:	a904      	add	r1, sp, #16
   17230:	4620      	mov	r0, r4
   17232:	f7ff f9cc 	bl	165ce <net_pkt_get_data>
   17236:	4602      	mov	r2, r0
   17238:	e7c0      	b.n	171bc <handle_na_input+0x8a>
   1723a:	f7ff fe09 	bl	16e50 <z_arch_is_user_context>
			NET_DBG("Unknown ND option 0x%x", nd_opt_hdr->type);
   1723e:	e7e8      	b.n	17212 <handle_na_input+0xe0>
	struct net_linkaddr_storage lladdr = { 0 };
   17240:	e9cd 0006 	strd	r0, r0, [sp, #24]
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), &na_hdr->tgt);
   17244:	4629      	mov	r1, r5
   17246:	6a60      	ldr	r0, [r4, #36]	; 0x24
   17248:	f7f5 fefa 	bl	d040 <nbr_lookup.isra.16>
   1724c:	4605      	mov	r5, r0
   1724e:	f7ff fdff 	bl	16e50 <z_arch_is_user_context>
	if (!nbr) {
   17252:	2d00      	cmp	r5, #0
   17254:	d084      	beq.n	17160 <handle_na_input+0x2e>
	if (tllao_offset) {
   17256:	f1b8 0f00 	cmp.w	r8, #0
   1725a:	d142      	bne.n	172e2 <handle_na_input+0x1b0>
	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   1725c:	786b      	ldrb	r3, [r5, #1]
   1725e:	2bff      	cmp	r3, #255	; 0xff
   17260:	d058      	beq.n	17314 <handle_na_input+0x1e2>
	cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   17262:	7868      	ldrb	r0, [r5, #1]
   17264:	f7f5 fd6c 	bl	cd40 <net_nbr_get_lladdr>
	if (!cached_lladdr) {
   17268:	4606      	mov	r6, r0
   1726a:	2800      	cmp	r0, #0
   1726c:	f43f af78 	beq.w	17160 <handle_na_input+0x2e>
	if (tllao_offset) {
   17270:	f1b8 0f00 	cmp.w	r8, #0
   17274:	d066      	beq.n	17344 <handle_na_input+0x212>
		lladdr_changed = memcmp(lladdr.addr,
   17276:	7842      	ldrb	r2, [r0, #1]
   17278:	1c81      	adds	r1, r0, #2
   1727a:	f10d 001a 	add.w	r0, sp, #26
   1727e:	f7eb f86f 	bl	2360 <memcmp>
   17282:	f110 0900 	adds.w	r9, r0, #0
   17286:	bf18      	it	ne
   17288:	f04f 0901 	movne.w	r9, #1
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   1728c:	68eb      	ldr	r3, [r5, #12]
   1728e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   17292:	2b00      	cmp	r3, #0
   17294:	d158      	bne.n	17348 <handle_na_input+0x216>
		if (!tllao_offset) {
   17296:	f1b8 0f00 	cmp.w	r8, #0
   1729a:	f43f af7b 	beq.w	17194 <handle_na_input+0x62>
		if (lladdr_changed) {
   1729e:	f1b9 0f00 	cmp.w	r9, #0
   172a2:	d008      	beq.n	172b6 <handle_na_input+0x184>
	dbg_update_neighbor_lladdr(&lladdr, old_lladdr, addr);
   172a4:	4630      	mov	r0, r6
   172a6:	f7f5 feed 	bl	d084 <dbg_update_neighbor_lladdr.isra.19>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   172aa:	7872      	ldrb	r2, [r6, #1]
   172ac:	f10d 011a 	add.w	r1, sp, #26
   172b0:	4630      	mov	r0, r6
   172b2:	f7ff fe2d 	bl	16f10 <net_linkaddr_set>
		if (na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED) {
   172b6:	783b      	ldrb	r3, [r7, #0]
   172b8:	0659      	lsls	r1, r3, #25
   172ba:	f140 808d 	bpl.w	173d8 <handle_na_input+0x2a6>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   172be:	2101      	movs	r1, #1
   172c0:	4628      	mov	r0, r5
   172c2:	f7f5 ff1d 	bl	d100 <ipv6_nbr_set_state>
			net_ipv6_nbr_data(nbr)->ns_count = 0U;
   172c6:	68eb      	ldr	r3, [r5, #12]
			net_ipv6_nbr_data(nbr)->reachable = 0;
   172c8:	2000      	movs	r0, #0
   172ca:	2100      	movs	r1, #0
   172cc:	e9c3 0106 	strd	r0, r1, [r3, #24]
			net_ipv6_nbr_data(nbr)->ns_count = 0U;
   172d0:	2200      	movs	r2, #0
   172d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   172d6:	621a      	str	r2, [r3, #32]
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   172d8:	4629      	mov	r1, r5
   172da:	6a60      	ldr	r0, [r4, #36]	; 0x24
   172dc:	f7ff ff1c 	bl	17118 <net_ipv6_nbr_set_reachable_timer>
   172e0:	e043      	b.n	1736a <handle_na_input+0x238>
		lladdr.len = net_if_get_link_addr(net_pkt_iface(pkt))->len;
   172e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   172e4:	681b      	ldr	r3, [r3, #0]
		net_pkt_cursor_init(pkt);
   172e6:	4620      	mov	r0, r4
		lladdr.len = net_if_get_link_addr(net_pkt_iface(pkt))->len;
   172e8:	7d1b      	ldrb	r3, [r3, #20]
   172ea:	f88d 3019 	strb.w	r3, [sp, #25]
		net_pkt_cursor_init(pkt);
   172ee:	f7ff f801 	bl	162f4 <net_pkt_cursor_init>
		if (net_pkt_skip(pkt, tllao_offset) ||
   172f2:	4641      	mov	r1, r8
   172f4:	4620      	mov	r0, r4
   172f6:	f7ff f879 	bl	163ec <net_pkt_skip>
   172fa:	2800      	cmp	r0, #0
   172fc:	f47f af4a 	bne.w	17194 <handle_na_input+0x62>
		    net_pkt_read(pkt, lladdr.addr, lladdr.len)) {
   17300:	f89d 2019 	ldrb.w	r2, [sp, #25]
   17304:	f10d 011a 	add.w	r1, sp, #26
   17308:	4620      	mov	r0, r4
   1730a:	f7ff f88b 	bl	16424 <net_pkt_read>
		if (net_pkt_skip(pkt, tllao_offset) ||
   1730e:	2800      	cmp	r0, #0
   17310:	d0a4      	beq.n	1725c <handle_na_input+0x12a>
   17312:	e73f      	b.n	17194 <handle_na_input+0x62>
		if (!tllao_offset) {
   17314:	f1b8 0f00 	cmp.w	r8, #0
   17318:	f43f af22 	beq.w	17160 <handle_na_input+0x2e>
		nbr_lladdr.len = lladdr.len;
   1731c:	f89d 3019 	ldrb.w	r3, [sp, #25]
   17320:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   17324:	aa08      	add	r2, sp, #32
		nbr_lladdr.addr = lladdr.addr;
   17326:	f10d 031a 	add.w	r3, sp, #26
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   1732a:	6a61      	ldr	r1, [r4, #36]	; 0x24
		nbr_lladdr.addr = lladdr.addr;
   1732c:	9308      	str	r3, [sp, #32]
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   1732e:	4628      	mov	r0, r5
   17330:	f7f5 fc90 	bl	cc54 <net_nbr_link>
   17334:	b118      	cbz	r0, 1733e <handle_na_input+0x20c>
			nbr_free(nbr);
   17336:	4628      	mov	r0, r5
   17338:	f7ff fdb0 	bl	16e9c <nbr_free>
			return false;
   1733c:	e72a      	b.n	17194 <handle_na_input+0x62>
   1733e:	f7ff fd87 	bl	16e50 <z_arch_is_user_context>
		NET_DBG("[%d] nbr %p state %d IPv6 %s ll %s",
   17342:	e78e      	b.n	17262 <handle_na_input+0x130>
	bool lladdr_changed = false;
   17344:	46c1      	mov	r9, r8
   17346:	e7a1      	b.n	1728c <handle_na_input+0x15a>
	if (!(na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE) && lladdr_changed) {
   17348:	783a      	ldrb	r2, [r7, #0]
   1734a:	0692      	lsls	r2, r2, #26
   1734c:	d427      	bmi.n	1739e <handle_na_input+0x26c>
   1734e:	f1b9 0f00 	cmp.w	r9, #0
   17352:	d007      	beq.n	17364 <handle_na_input+0x232>
		if (net_ipv6_nbr_data(nbr)->state ==
   17354:	2b01      	cmp	r3, #1
   17356:	f47f af1d 	bne.w	17194 <handle_na_input+0x62>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   1735a:	2102      	movs	r1, #2
   1735c:	4628      	mov	r0, r5
   1735e:	f7f5 fecf 	bl	d100 <ipv6_nbr_set_state>
   17362:	e717      	b.n	17194 <handle_na_input+0x62>
	if (na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE ||
   17364:	f1b8 0f00 	cmp.w	r8, #0
   17368:	d125      	bne.n	173b6 <handle_na_input+0x284>
		(na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER);
   1736a:	783b      	ldrb	r3, [r7, #0]
	net_ipv6_nbr_data(nbr)->is_router =
   1736c:	68ea      	ldr	r2, [r5, #12]
		(na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER);
   1736e:	09db      	lsrs	r3, r3, #7
	net_ipv6_nbr_data(nbr)->is_router =
   17370:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	pending = net_ipv6_nbr_data(nbr)->pending;
   17374:	68eb      	ldr	r3, [r5, #12]
   17376:	681e      	ldr	r6, [r3, #0]
	if (pending) {
   17378:	b166      	cbz	r6, 17394 <handle_na_input+0x262>
   1737a:	f7ff fd69 	bl	16e50 <z_arch_is_user_context>
		if (net_send_data(pending) < 0) {
   1737e:	4630      	mov	r0, r6
   17380:	f7fe f9bc 	bl	156fc <net_send_data>
   17384:	2800      	cmp	r0, #0
   17386:	da2c      	bge.n	173e2 <handle_na_input+0x2b0>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   17388:	68e8      	ldr	r0, [r5, #12]
   1738a:	f7ff fd7a 	bl	16e82 <nbr_clear_ns_pending>
		net_pkt_unref(pending);
   1738e:	4630      	mov	r0, r6
   17390:	f7fe ff3a 	bl	16208 <net_pkt_unref>
	net_pkt_unref(pkt);
   17394:	4620      	mov	r0, r4
   17396:	f7fe ff37 	bl	16208 <net_pkt_unref>
	return NET_OK;
   1739a:	2000      	movs	r0, #0
   1739c:	e6fb      	b.n	17196 <handle_na_input+0x64>
		if (lladdr_changed) {
   1739e:	f1b9 0f00 	cmp.w	r9, #0
   173a2:	d008      	beq.n	173b6 <handle_na_input+0x284>
	dbg_update_neighbor_lladdr(&lladdr, old_lladdr, addr);
   173a4:	4630      	mov	r0, r6
   173a6:	f7f5 fe6d 	bl	d084 <dbg_update_neighbor_lladdr.isra.19>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   173aa:	7872      	ldrb	r2, [r6, #1]
   173ac:	f10d 011a 	add.w	r1, sp, #26
   173b0:	4630      	mov	r0, r6
   173b2:	f7ff fdad 	bl	16f10 <net_linkaddr_set>
		if (na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED) {
   173b6:	783b      	ldrb	r3, [r7, #0]
   173b8:	065b      	lsls	r3, r3, #25
   173ba:	d50a      	bpl.n	173d2 <handle_na_input+0x2a0>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   173bc:	2101      	movs	r1, #1
   173be:	4628      	mov	r0, r5
   173c0:	f7f5 fe9e 	bl	d100 <ipv6_nbr_set_state>
			net_ipv6_nbr_data(nbr)->reachable = 0;
   173c4:	68eb      	ldr	r3, [r5, #12]
   173c6:	2000      	movs	r0, #0
   173c8:	2100      	movs	r1, #0
   173ca:	e9c3 0106 	strd	r0, r1, [r3, #24]
			net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   173ce:	2200      	movs	r2, #0
   173d0:	e781      	b.n	172d6 <handle_na_input+0x1a4>
			if (lladdr_changed) {
   173d2:	f1b9 0f00 	cmp.w	r9, #0
   173d6:	d0c8      	beq.n	1736a <handle_na_input+0x238>
				ipv6_nbr_set_state(nbr,
   173d8:	2102      	movs	r1, #2
   173da:	4628      	mov	r0, r5
   173dc:	f7f5 fe90 	bl	d100 <ipv6_nbr_set_state>
   173e0:	e7c3      	b.n	1736a <handle_na_input+0x238>
			net_ipv6_nbr_data(nbr)->pending = NULL;
   173e2:	68eb      	ldr	r3, [r5, #12]
   173e4:	2200      	movs	r2, #0
   173e6:	601a      	str	r2, [r3, #0]
   173e8:	e7d1      	b.n	1738e <handle_na_input+0x25c>

000173ea <net_ipv6_nbr_add>:
{
   173ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   173ee:	4615      	mov	r5, r2
   173f0:	461a      	mov	r2, r3
	nbr = add_nbr(iface, addr, is_router, state);
   173f2:	f89d 3020 	ldrb.w	r3, [sp, #32]
{
   173f6:	4607      	mov	r7, r0
   173f8:	4688      	mov	r8, r1
	nbr = add_nbr(iface, addr, is_router, state);
   173fa:	f7f5 ff41 	bl	d280 <add_nbr>
	if (!nbr) {
   173fe:	4604      	mov	r4, r0
   17400:	b928      	cbnz	r0, 1740e <net_ipv6_nbr_add+0x24>
   17402:	f7ff fd25 	bl	16e50 <z_arch_is_user_context>
}
   17406:	4620      	mov	r0, r4
   17408:	b002      	add	sp, #8
   1740a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   1740e:	462a      	mov	r2, r5
   17410:	4639      	mov	r1, r7
   17412:	f7f5 fc1f 	bl	cc54 <net_nbr_link>
   17416:	3078      	adds	r0, #120	; 0x78
   17418:	d11a      	bne.n	17450 <net_ipv6_nbr_add+0x66>
	    net_ipv6_nbr_data(nbr)->state != NET_IPV6_NBR_STATE_STATIC) {
   1741a:	68e3      	ldr	r3, [r4, #12]
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   1741c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   17420:	2b05      	cmp	r3, #5
   17422:	d0ee      	beq.n	17402 <net_ipv6_nbr_add+0x18>
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   17424:	7860      	ldrb	r0, [r4, #1]
   17426:	f7f5 fc8b 	bl	cd40 <net_nbr_get_lladdr>
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   1742a:	792a      	ldrb	r2, [r5, #4]
   1742c:	6829      	ldr	r1, [r5, #0]
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   1742e:	4606      	mov	r6, r0
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   17430:	3002      	adds	r0, #2
   17432:	f7ea ff95 	bl	2360 <memcmp>
   17436:	b1e0      	cbz	r0, 17472 <net_ipv6_nbr_add+0x88>
			dbg_update_neighbor_lladdr(lladdr, cached_lladdr, addr);
   17438:	4630      	mov	r0, r6
   1743a:	f7f5 fe23 	bl	d084 <dbg_update_neighbor_lladdr.isra.19>
			net_linkaddr_set(cached_lladdr, lladdr->addr,
   1743e:	792a      	ldrb	r2, [r5, #4]
   17440:	6829      	ldr	r1, [r5, #0]
   17442:	4630      	mov	r0, r6
   17444:	f7ff fd64 	bl	16f10 <net_linkaddr_set>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   17448:	2102      	movs	r1, #2
   1744a:	4620      	mov	r0, r4
   1744c:	f7f5 fe58 	bl	d100 <ipv6_nbr_set_state>
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   17450:	68e3      	ldr	r3, [r4, #12]
   17452:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   17456:	2b00      	cmp	r3, #0
   17458:	d1d3      	bne.n	17402 <net_ipv6_nbr_add+0x18>
		ret = net_ipv6_send_ns(iface, NULL, NULL, NULL, addr, false);
   1745a:	e9cd 8300 	strd	r8, r3, [sp]
   1745e:	461a      	mov	r2, r3
   17460:	4619      	mov	r1, r3
   17462:	4638      	mov	r0, r7
   17464:	f7f5 ff60 	bl	d328 <net_ipv6_send_ns>
		if (ret < 0) {
   17468:	2800      	cmp	r0, #0
   1746a:	daca      	bge.n	17402 <net_ipv6_nbr_add+0x18>
   1746c:	f7ff fcf0 	bl	16e50 <z_arch_is_user_context>
			NET_DBG("Cannot send NS (%d)", ret);
   17470:	e7c7      	b.n	17402 <net_ipv6_nbr_add+0x18>
		} else if (net_ipv6_nbr_data(nbr)->state ==
   17472:	68e3      	ldr	r3, [r4, #12]
   17474:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   17478:	2b00      	cmp	r3, #0
   1747a:	d1c2      	bne.n	17402 <net_ipv6_nbr_add+0x18>
   1747c:	e7e4      	b.n	17448 <net_ipv6_nbr_add+0x5e>

0001747e <handle_ns_input>:
{
   1747e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ns_access,
   17482:	2314      	movs	r3, #20
{
   17484:	b09c      	sub	sp, #112	; 0x70
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ns_access,
   17486:	2500      	movs	r5, #0
   17488:	e9cd 5304 	strd	r5, r3, [sp, #16]
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
   1748c:	ab03      	add	r3, sp, #12
   1748e:	9306      	str	r3, [sp, #24]
   17490:	2302      	movs	r3, #2
   17492:	9307      	str	r3, [sp, #28]
	u16_t length = net_pkt_get_len(pkt);
   17494:	6943      	ldr	r3, [r0, #20]
{
   17496:	4604      	mov	r4, r0
   17498:	460e      	mov	r6, r1
   1749a:	4690      	mov	r8, r2
	while (buf) {
   1749c:	b963      	cbnz	r3, 174b8 <handle_ns_input+0x3a>
	ns_hdr = (struct net_icmpv6_ns_hdr *)net_pkt_get_data(pkt, &ns_access);
   1749e:	a904      	add	r1, sp, #16
   174a0:	4620      	mov	r0, r4
   174a2:	f7ff f894 	bl	165ce <net_pkt_get_data>
	u16_t length = net_pkt_get_len(pkt);
   174a6:	b2ad      	uxth	r5, r5
	if (!ns_hdr) {
   174a8:	4607      	mov	r7, r0
   174aa:	b948      	cbnz	r0, 174c0 <handle_ns_input+0x42>
   174ac:	f7ff fcd0 	bl	16e50 <z_arch_is_user_context>
	return NET_DROP;
   174b0:	2002      	movs	r0, #2
}
   174b2:	b01c      	add	sp, #112	; 0x70
   174b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bytes += buf->len;
   174b8:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   174ba:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   174bc:	4415      	add	r5, r2
		buf = buf->frags;
   174be:	e7ed      	b.n	1749c <handle_ns_input+0x1e>
   174c0:	f7ff fcc6 	bl	16e50 <z_arch_is_user_context>
	if (((length < (sizeof(struct net_ipv6_hdr) +
   174c4:	2d3f      	cmp	r5, #63	; 0x3f
   174c6:	d902      	bls.n	174ce <handle_ns_input+0x50>
			  sizeof(struct net_icmpv6_ns_hdr))) ||
   174c8:	79f3      	ldrb	r3, [r6, #7]
   174ca:	2bff      	cmp	r3, #255	; 0xff
   174cc:	d006      	beq.n	174dc <handle_ns_input+0x5e>
	    (ip_hdr->hop_limit != NET_IPV6_ND_HOP_LIMIT)) &&
   174ce:	793b      	ldrb	r3, [r7, #4]
   174d0:	2bff      	cmp	r3, #255	; 0xff
   174d2:	d103      	bne.n	174dc <handle_ns_input+0x5e>
	    (net_ipv6_is_addr_mcast(&ns_hdr->tgt) && icmp_hdr->code != 0U)) {
   174d4:	f898 3001 	ldrb.w	r3, [r8, #1]
   174d8:	2b00      	cmp	r3, #0
   174da:	d1e9      	bne.n	174b0 <handle_ns_input+0x32>
   174dc:	9905      	ldr	r1, [sp, #20]
   174de:	4620      	mov	r0, r4
   174e0:	f7fe ff84 	bl	163ec <net_pkt_skip>
	pkt->ipv6_ext_opt_len = len;
   174e4:	2314      	movs	r3, #20
   174e6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
				net_pkt_get_data(pkt, &nd_access);
   174ea:	a906      	add	r1, sp, #24
   174ec:	4620      	mov	r0, r4
   174ee:	f7ff f86e 	bl	165ce <net_pkt_get_data>
	length -= (sizeof(struct net_ipv6_hdr) + sizeof(struct net_icmp_hdr));
   174f2:	3d2c      	subs	r5, #44	; 0x2c
   174f4:	b2ad      	uxth	r5, r5
				net_pkt_get_data(pkt, &nd_access);
   174f6:	4680      	mov	r8, r0
			if (net_ipv6_is_addr_unspecified(&ip_hdr->src)) {
   174f8:	f106 0a08 	add.w	sl, r6, #8
	if (net_pkt_read(pkt, lladdr.addr, lladdr.len)) {
   174fc:	f10d 0952 	add.w	r9, sp, #82	; 0x52
	while (nd_opt_hdr && nd_opt_hdr->len > 0 &&
   17500:	f1b8 0f00 	cmp.w	r8, #0
   17504:	d006      	beq.n	17514 <handle_ns_input+0x96>
   17506:	f898 3001 	ldrb.w	r3, [r8, #1]
   1750a:	b11b      	cbz	r3, 17514 <handle_ns_input+0x96>
   1750c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   17510:	42ab      	cmp	r3, r5
   17512:	d333      	bcc.n	1757c <handle_ns_input+0xfe>
		ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   17514:	1d3d      	adds	r5, r7, #4
   17516:	4629      	mov	r1, r5
   17518:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1751a:	f7fe fa5b 	bl	159d4 <net_if_ipv6_addr_lookup_by_iface>
	if (!ifaddr) {
   1751e:	4682      	mov	sl, r0
   17520:	2800      	cmp	r0, #0
   17522:	d0c3      	beq.n	174ac <handle_ns_input+0x2e>
		src = &ip_hdr->src;
   17524:	f106 0808 	add.w	r8, r6, #8
		tgt = &ifaddr->address.in6_addr;
   17528:	f100 0904 	add.w	r9, r0, #4
	if (net_ipv6_is_addr_unspecified(&ip_hdr->src)) {
   1752c:	4640      	mov	r0, r8
   1752e:	f7ff fc99 	bl	16e64 <net_ipv6_is_addr_unspecified>
   17532:	4601      	mov	r1, r0
   17534:	2800      	cmp	r0, #0
   17536:	f000 809c 	beq.w	17672 <handle_ns_input+0x1f4>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   1753a:	69b2      	ldr	r2, [r6, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1753c:	f240 23ff 	movw	r3, #767	; 0x2ff
   17540:	429a      	cmp	r2, r3
   17542:	d1b3      	bne.n	174ac <handle_ns_input+0x2e>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   17544:	69f3      	ldr	r3, [r6, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   17546:	2b00      	cmp	r3, #0
   17548:	d1b0      	bne.n	174ac <handle_ns_input+0x2e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1754a:	6a33      	ldr	r3, [r6, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   1754c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   17550:	d1ac      	bne.n	174ac <handle_ns_input+0x2e>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   17552:	6a73      	ldr	r3, [r6, #36]	; 0x24
   17554:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   17556:	2bff      	cmp	r3, #255	; 0xff
   17558:	d1a8      	bne.n	174ac <handle_ns_input+0x2e>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   1755a:	f99a 3045 	ldrsb.w	r3, [sl, #69]	; 0x45
   1755e:	2b00      	cmp	r3, #0
   17560:	d155      	bne.n	1760e <handle_ns_input+0x190>
   17562:	f7ff fc75 	bl	16e50 <z_arch_is_user_context>
	if (net_ipv6_is_ll_addr(addr)) {
   17566:	f8ba 2004 	ldrh.w	r2, [sl, #4]
   1756a:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1756e:	429a      	cmp	r2, r3
   17570:	d09c      	beq.n	174ac <handle_ns_input+0x2e>
	net_if_ipv6_dad_failed(iface, addr);
   17572:	4649      	mov	r1, r9
   17574:	6a60      	ldr	r0, [r4, #36]	; 0x24
   17576:	f7fe fb37 	bl	15be8 <net_if_ipv6_dad_failed>
   1757a:	e799      	b.n	174b0 <handle_ns_input+0x32>
	return net_pkt_skip(pkt, access->size);
   1757c:	9907      	ldr	r1, [sp, #28]
   1757e:	4620      	mov	r0, r4
   17580:	f7fe ff34 	bl	163ec <net_pkt_skip>
		switch (nd_opt_hdr->type) {
   17584:	f898 3000 	ldrb.w	r3, [r8]
   17588:	2b01      	cmp	r3, #1
   1758a:	d13d      	bne.n	17608 <handle_ns_input+0x18a>
			if (net_ipv6_is_addr_unspecified(&ip_hdr->src)) {
   1758c:	4650      	mov	r0, sl
   1758e:	f7ff fc69 	bl	16e64 <net_ipv6_is_addr_unspecified>
   17592:	2800      	cmp	r0, #0
   17594:	d18c      	bne.n	174b0 <handle_ns_input+0x32>
			if (nd_opt_hdr->len > 2) {
   17596:	f898 2001 	ldrb.w	r2, [r8, #1]
   1759a:	2a02      	cmp	r2, #2
   1759c:	d886      	bhi.n	174ac <handle_ns_input+0x2e>
	lladdr.len = ll_len * 8U - 2;
   1759e:	00d2      	lsls	r2, r2, #3
   175a0:	3a02      	subs	r2, #2
   175a2:	b2d2      	uxtb	r2, r2
	if (net_pkt_read(pkt, lladdr.addr, lladdr.len)) {
   175a4:	4649      	mov	r1, r9
   175a6:	4620      	mov	r0, r4
	lladdr.len = ll_len * 8U - 2;
   175a8:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
	if (net_pkt_read(pkt, lladdr.addr, lladdr.len)) {
   175ac:	f7fe ff3a 	bl	16424 <net_pkt_read>
   175b0:	4603      	mov	r3, r0
   175b2:	2800      	cmp	r0, #0
   175b4:	f47f af7c 	bne.w	174b0 <handle_ns_input+0x32>
	nbr_lladdr.len = lladdr.len;
   175b8:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
	if (net_pkt_lladdr_src(pkt)->len < nbr_lladdr.len) {
   175bc:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
	nbr_lladdr.addr = lladdr.addr;
   175c0:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
		nbr_lladdr.len = net_pkt_lladdr_src(pkt)->len;
   175c4:	428a      	cmp	r2, r1
   175c6:	bf28      	it	cs
   175c8:	460a      	movcs	r2, r1
   175ca:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
	return pkt->frags->data;
   175ce:	6962      	ldr	r2, [r4, #20]
	return net_ipv6_nbr_add(net_pkt_iface(pkt),
   175d0:	6891      	ldr	r1, [r2, #8]
   175d2:	9000      	str	r0, [sp, #0]
   175d4:	aa18      	add	r2, sp, #96	; 0x60
   175d6:	3108      	adds	r1, #8
   175d8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   175da:	f7ff ff06 	bl	173ea <net_ipv6_nbr_add>
			if (!handle_ns_neighbor(pkt, nd_opt_hdr->len)) {
   175de:	2800      	cmp	r0, #0
   175e0:	f43f af66 	beq.w	174b0 <handle_ns_input+0x32>
		prev_opt_len = net_pkt_ipv6_ext_opt_len(pkt);
   175e4:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
					     (nd_opt_hdr->len << 3));
   175e8:	f898 3001 	ldrb.w	r3, [r8, #1]
					     net_pkt_ipv6_ext_opt_len(pkt) +
   175ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   175f0:	b2db      	uxtb	r3, r3
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   175f2:	4293      	cmp	r3, r2
	pkt->ipv6_ext_opt_len = len;
   175f4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
   175f8:	f67f af58 	bls.w	174ac <handle_ns_input+0x2e>
					net_pkt_get_data(pkt, &nd_access);
   175fc:	a906      	add	r1, sp, #24
   175fe:	4620      	mov	r0, r4
   17600:	f7fe ffe5 	bl	165ce <net_pkt_get_data>
   17604:	4680      	mov	r8, r0
   17606:	e77b      	b.n	17500 <handle_ns_input+0x82>
   17608:	f7ff fc22 	bl	16e50 <z_arch_is_user_context>
			NET_DBG("Unknown ND option 0x%x", nd_opt_hdr->type);
   1760c:	e7ea      	b.n	175e4 <handle_ns_input+0x166>
		if (!net_ipv6_is_addr_solicited_node(&ip_hdr->dst)) {
   1760e:	f106 0118 	add.w	r1, r6, #24
		net_ipv6_addr_create_ll_allnodes_mcast(&ip_hdr->dst);
   17612:	4608      	mov	r0, r1
   17614:	f7ff fc8d 	bl	16f32 <net_ipv6_addr_create_ll_allnodes_mcast>
		net_ipaddr_copy(&ip_hdr->src,
   17618:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1761a:	f7f5 f8cf 	bl	c7bc <net_if_ipv6_select_src_addr>
   1761e:	ad08      	add	r5, sp, #32
   17620:	4603      	mov	r3, r0
   17622:	f100 0c10 	add.w	ip, r0, #16
   17626:	462a      	mov	r2, r5
   17628:	6818      	ldr	r0, [r3, #0]
   1762a:	6859      	ldr	r1, [r3, #4]
   1762c:	462f      	mov	r7, r5
   1762e:	c703      	stmia	r7!, {r0, r1}
   17630:	3308      	adds	r3, #8
   17632:	4563      	cmp	r3, ip
   17634:	463d      	mov	r5, r7
   17636:	d1f7      	bne.n	17628 <handle_ns_input+0x1aa>
   17638:	4645      	mov	r5, r8
   1763a:	af0c      	add	r7, sp, #48	; 0x30
   1763c:	4613      	mov	r3, r2
   1763e:	cb03      	ldmia	r3!, {r0, r1}
   17640:	42bb      	cmp	r3, r7
   17642:	6028      	str	r0, [r5, #0]
   17644:	6069      	str	r1, [r5, #4]
   17646:	461a      	mov	r2, r3
   17648:	f105 0508 	add.w	r5, r5, #8
   1764c:	d1f6      	bne.n	1763c <handle_ns_input+0x1be>
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
   1764e:	2320      	movs	r3, #32
	if (!net_ipv6_send_na(net_pkt_iface(pkt), src,
   17650:	9300      	str	r3, [sp, #0]
   17652:	f106 0218 	add.w	r2, r6, #24
   17656:	464b      	mov	r3, r9
   17658:	4641      	mov	r1, r8
   1765a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1765c:	f7ff fcd6 	bl	1700c <net_ipv6_send_na>
   17660:	4605      	mov	r5, r0
   17662:	2800      	cmp	r0, #0
   17664:	f47f af22 	bne.w	174ac <handle_ns_input+0x2e>
		net_pkt_unref(pkt);
   17668:	4620      	mov	r0, r4
   1766a:	f7fe fdcd 	bl	16208 <net_pkt_unref>
		return NET_OK;
   1766e:	4628      	mov	r0, r5
   17670:	e71f      	b.n	174b2 <handle_ns_input+0x34>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   17672:	4640      	mov	r0, r8
   17674:	f7f4 fcca 	bl	c00c <net_if_ipv6_addr_lookup>
	if (net_ipv6_is_my_addr(&ip_hdr->src)) {
   17678:	2800      	cmp	r0, #0
   1767a:	f47f af17 	bne.w	174ac <handle_ns_input+0x2e>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   1767e:	69b2      	ldr	r2, [r6, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   17680:	f240 23ff 	movw	r3, #767	; 0x2ff
   17684:	429a      	cmp	r2, r3
	if (net_ipv6_is_addr_solicited_node(&ip_hdr->dst)) {
   17686:	f106 0a18 	add.w	sl, r6, #24
   1768a:	d109      	bne.n	176a0 <handle_ns_input+0x222>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   1768c:	69f3      	ldr	r3, [r6, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   1768e:	b93b      	cbnz	r3, 176a0 <handle_ns_input+0x222>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   17690:	6a33      	ldr	r3, [r6, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   17692:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   17696:	d103      	bne.n	176a0 <handle_ns_input+0x222>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   17698:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1769a:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1769c:	2bff      	cmp	r3, #255	; 0xff
   1769e:	d038      	beq.n	17712 <handle_ns_input+0x294>
		ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   176a0:	4651      	mov	r1, sl
   176a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   176a4:	f7fe f996 	bl	159d4 <net_if_ipv6_addr_lookup_by_iface>
	if (ifaddr) {
   176a8:	4681      	mov	r9, r0
   176aa:	2800      	cmp	r0, #0
   176ac:	f43f aefe 	beq.w	174ac <handle_ns_input+0x2e>
		net_ipaddr_copy(&ip_hdr->dst, &ip_hdr->src);
   176b0:	4642      	mov	r2, r8
   176b2:	f10d 0c50 	add.w	ip, sp, #80	; 0x50
   176b6:	6810      	ldr	r0, [r2, #0]
   176b8:	6851      	ldr	r1, [r2, #4]
   176ba:	4663      	mov	r3, ip
   176bc:	c303      	stmia	r3!, {r0, r1}
   176be:	3208      	adds	r2, #8
   176c0:	4552      	cmp	r2, sl
   176c2:	469c      	mov	ip, r3
   176c4:	d1f7      	bne.n	176b6 <handle_ns_input+0x238>
   176c6:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
   176ca:	f10d 0c60 	add.w	ip, sp, #96	; 0x60
   176ce:	4673      	mov	r3, lr
   176d0:	cb03      	ldmia	r3!, {r0, r1}
   176d2:	4563      	cmp	r3, ip
   176d4:	6010      	str	r0, [r2, #0]
   176d6:	6051      	str	r1, [r2, #4]
   176d8:	469e      	mov	lr, r3
   176da:	f102 0208 	add.w	r2, r2, #8
   176de:	d1f6      	bne.n	176ce <handle_ns_input+0x250>
		net_ipaddr_copy(&ip_hdr->src, &ns_hdr->tgt);
   176e0:	4662      	mov	r2, ip
   176e2:	3714      	adds	r7, #20
   176e4:	6828      	ldr	r0, [r5, #0]
   176e6:	6869      	ldr	r1, [r5, #4]
   176e8:	4613      	mov	r3, r2
   176ea:	c303      	stmia	r3!, {r0, r1}
   176ec:	3508      	adds	r5, #8
   176ee:	42bd      	cmp	r5, r7
   176f0:	461a      	mov	r2, r3
   176f2:	d1f7      	bne.n	176e4 <handle_ns_input+0x266>
   176f4:	4662      	mov	r2, ip
   176f6:	4645      	mov	r5, r8
   176f8:	af1c      	add	r7, sp, #112	; 0x70
   176fa:	4613      	mov	r3, r2
   176fc:	cb03      	ldmia	r3!, {r0, r1}
   176fe:	42bb      	cmp	r3, r7
   17700:	6028      	str	r0, [r5, #0]
   17702:	6069      	str	r1, [r5, #4]
   17704:	461a      	mov	r2, r3
   17706:	f105 0508 	add.w	r5, r5, #8
   1770a:	d1f6      	bne.n	176fa <handle_ns_input+0x27c>
		tgt = &ifaddr->address.in6_addr;
   1770c:	f109 0904 	add.w	r9, r9, #4
   17710:	e02d      	b.n	1776e <handle_ns_input+0x2f0>
		net_ipaddr_copy(&ip_hdr->dst, &ip_hdr->src);
   17712:	4643      	mov	r3, r8
   17714:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   17718:	6818      	ldr	r0, [r3, #0]
   1771a:	6859      	ldr	r1, [r3, #4]
   1771c:	4662      	mov	r2, ip
   1771e:	c203      	stmia	r2!, {r0, r1}
   17720:	3308      	adds	r3, #8
   17722:	4553      	cmp	r3, sl
   17724:	4694      	mov	ip, r2
   17726:	d1f7      	bne.n	17718 <handle_ns_input+0x29a>
   17728:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
   1772c:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
   17730:	4672      	mov	r2, lr
   17732:	ca03      	ldmia	r2!, {r0, r1}
   17734:	4562      	cmp	r2, ip
   17736:	6018      	str	r0, [r3, #0]
   17738:	6059      	str	r1, [r3, #4]
   1773a:	4696      	mov	lr, r2
   1773c:	f103 0308 	add.w	r3, r3, #8
   17740:	d1f6      	bne.n	17730 <handle_ns_input+0x2b2>
		net_ipaddr_copy(&ip_hdr->src, &ns_hdr->tgt);
   17742:	4663      	mov	r3, ip
   17744:	3714      	adds	r7, #20
   17746:	6828      	ldr	r0, [r5, #0]
   17748:	6869      	ldr	r1, [r5, #4]
   1774a:	461a      	mov	r2, r3
   1774c:	c203      	stmia	r2!, {r0, r1}
   1774e:	3508      	adds	r5, #8
   17750:	42bd      	cmp	r5, r7
   17752:	4613      	mov	r3, r2
   17754:	d1f7      	bne.n	17746 <handle_ns_input+0x2c8>
   17756:	4663      	mov	r3, ip
   17758:	4645      	mov	r5, r8
   1775a:	af14      	add	r7, sp, #80	; 0x50
   1775c:	461a      	mov	r2, r3
   1775e:	ca03      	ldmia	r2!, {r0, r1}
   17760:	42ba      	cmp	r2, r7
   17762:	6028      	str	r0, [r5, #0]
   17764:	6069      	str	r1, [r5, #4]
   17766:	4613      	mov	r3, r2
   17768:	f105 0508 	add.w	r5, r5, #8
   1776c:	d1f6      	bne.n	1775c <handle_ns_input+0x2de>
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   1776e:	2360      	movs	r3, #96	; 0x60
		goto send_na;
   17770:	e76e      	b.n	17650 <handle_ns_input+0x1d2>

00017772 <net_ipv6_start_dad>:
{
   17772:	b507      	push	{r0, r1, r2, lr}
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
   17774:	2301      	movs	r3, #1
   17776:	9301      	str	r3, [sp, #4]
				&ifaddr->address.in6_addr, true);
   17778:	3104      	adds	r1, #4
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
   1777a:	2300      	movs	r3, #0
   1777c:	9100      	str	r1, [sp, #0]
   1777e:	461a      	mov	r2, r3
   17780:	4619      	mov	r1, r3
   17782:	f7f5 fdd1 	bl	d328 <net_ipv6_send_ns>
}
   17786:	b003      	add	sp, #12
   17788:	f85d fb04 	ldr.w	pc, [sp], #4

0001778c <net_ipv6_prepare_for_send>:
{
   1778c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1778e:	b087      	sub	sp, #28
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   17790:	2300      	movs	r3, #0
   17792:	2228      	movs	r2, #40	; 0x28
	ip_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
   17794:	a904      	add	r1, sp, #16
{
   17796:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   17798:	e9cd 3204 	strd	r3, r2, [sp, #16]
	struct net_if *iface = NULL;
   1779c:	9303      	str	r3, [sp, #12]
	ip_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
   1779e:	f7fe ff16 	bl	165ce <net_pkt_get_data>
	if (!ip_hdr) {
   177a2:	4607      	mov	r7, r0
   177a4:	2800      	cmp	r0, #0
   177a6:	d047      	beq.n	17838 <net_ipv6_prepare_for_send+0xac>
	if ((net_pkt_lladdr_dst(pkt)->addr &&
   177a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   177aa:	b113      	cbz	r3, 177b2 <net_ipv6_prepare_for_send+0x26>
		return NET_OK;
   177ac:	2000      	movs	r0, #0
}
   177ae:	b007      	add	sp, #28
   177b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	      !IS_ENABLED(CONFIG_NET_ROUTING))) ||
   177b2:	7e03      	ldrb	r3, [r0, #24]
   177b4:	2bff      	cmp	r3, #255	; 0xff
   177b6:	d0f9      	beq.n	177ac <net_ipv6_prepare_for_send+0x20>
	    atomic_test_bit(net_pkt_iface(pkt)->if_dev->flags,
   177b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   177ba:	681b      	ldr	r3, [r3, #0]
   177bc:	f3bf 8f5b 	dmb	ish
   177c0:	68db      	ldr	r3, [r3, #12]
   177c2:	f3bf 8f5b 	dmb	ish
	    net_ipv6_is_addr_mcast(&ip_hdr->dst) ||
   177c6:	079b      	lsls	r3, r3, #30
   177c8:	d4f0      	bmi.n	177ac <net_ipv6_prepare_for_send+0x20>
	if (net_if_ipv6_addr_onlink(&iface, &ip_hdr->dst)) {
   177ca:	f100 0518 	add.w	r5, r0, #24
   177ce:	4629      	mov	r1, r5
   177d0:	a803      	add	r0, sp, #12
   177d2:	f7f4 feb9 	bl	c548 <net_if_ipv6_addr_onlink>
   177d6:	b1f0      	cbz	r0, 17816 <net_ipv6_prepare_for_send+0x8a>
		net_pkt_set_iface(pkt, iface);
   177d8:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   177da:	6263      	str	r3, [r4, #36]	; 0x24
	if (iface) {
   177dc:	b13b      	cbz	r3, 177ee <net_ipv6_prepare_for_send+0x62>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   177de:	681a      	ldr	r2, [r3, #0]
   177e0:	7d52      	ldrb	r2, [r2, #21]
   177e2:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   177e6:	681b      	ldr	r3, [r3, #0]
   177e8:	7d5b      	ldrb	r3, [r3, #21]
   177ea:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	if (!iface) {
   177ee:	9b03      	ldr	r3, [sp, #12]
   177f0:	bb53      	cbnz	r3, 17848 <net_ipv6_prepare_for_send+0xbc>
		if (net_if_ipv6_addr_onlink(&iface, nexthop)) {
   177f2:	4629      	mov	r1, r5
   177f4:	a803      	add	r0, sp, #12
   177f6:	f7f4 fea7 	bl	c548 <net_if_ipv6_addr_onlink>
   177fa:	2800      	cmp	r0, #0
   177fc:	d04d      	beq.n	1789a <net_ipv6_prepare_for_send+0x10e>
			net_pkt_set_iface(pkt, iface);
   177fe:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   17800:	6263      	str	r3, [r4, #36]	; 0x24
	if (iface) {
   17802:	b30b      	cbz	r3, 17848 <net_ipv6_prepare_for_send+0xbc>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   17804:	681a      	ldr	r2, [r3, #0]
   17806:	7d52      	ldrb	r2, [r2, #21]
   17808:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   1780c:	681b      	ldr	r3, [r3, #0]
   1780e:	7d5b      	ldrb	r3, [r3, #21]
   17810:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   17814:	e018      	b.n	17848 <net_ipv6_prepare_for_send+0xbc>
	route = net_route_lookup(iface, dst);
   17816:	4629      	mov	r1, r5
   17818:	f7f6 f9ba 	bl	db90 <net_route_lookup>
	if (route) {
   1781c:	4606      	mov	r6, r0
   1781e:	b168      	cbz	r0, 1783c <net_ipv6_prepare_for_send+0xb0>
		nexthop = net_route_get_nexthop(route);
   17820:	f000 fa9e 	bl	17d60 <net_route_get_nexthop>
   17824:	4605      	mov	r5, r0
   17826:	f7ff fb13 	bl	16e50 <z_arch_is_user_context>
		if (!nexthop) {
   1782a:	2d00      	cmp	r5, #0
   1782c:	d1df      	bne.n	177ee <net_ipv6_prepare_for_send+0x62>
			net_route_del(route);
   1782e:	4630      	mov	r0, r6
   17830:	f000 fa74 	bl	17d1c <net_route_del>
   17834:	f7ff fb0c 	bl	16e50 <z_arch_is_user_context>
		return NET_DROP;
   17838:	2002      	movs	r0, #2
   1783a:	e7b8      	b.n	177ae <net_ipv6_prepare_for_send+0x22>
		router = net_if_ipv6_router_find_default(NULL, dst);
   1783c:	4629      	mov	r1, r5
   1783e:	f7f4 ff3f 	bl	c6c0 <net_if_ipv6_router_find_default>
		if (!router) {
   17842:	bb28      	cbnz	r0, 17890 <net_ipv6_prepare_for_send+0x104>
   17844:	f7ff fb04 	bl	16e50 <z_arch_is_user_context>
	nbr = nbr_lookup(&net_neighbor.table, iface, nexthop);
   17848:	4629      	mov	r1, r5
   1784a:	9803      	ldr	r0, [sp, #12]
   1784c:	f7f5 fbf8 	bl	d040 <nbr_lookup.isra.16>
   17850:	4606      	mov	r6, r0
   17852:	f7ff fafd 	bl	16e50 <z_arch_is_user_context>
	if (nbr && nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   17856:	b31e      	cbz	r6, 178a0 <net_ipv6_prepare_for_send+0x114>
   17858:	7870      	ldrb	r0, [r6, #1]
   1785a:	28ff      	cmp	r0, #255	; 0xff
   1785c:	d020      	beq.n	178a0 <net_ipv6_prepare_for_send+0x114>
		lladdr = net_nbr_get_lladdr(nbr->idx);
   1785e:	f7f5 fa6f 	bl	cd40 <net_nbr_get_lladdr>
		net_pkt_lladdr_dst(pkt)->addr = lladdr->addr;
   17862:	1c83      	adds	r3, r0, #2
   17864:	6363      	str	r3, [r4, #52]	; 0x34
		net_pkt_lladdr_dst(pkt)->len = lladdr->len;
   17866:	7843      	ldrb	r3, [r0, #1]
   17868:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   1786c:	f7ff faf0 	bl	16e50 <z_arch_is_user_context>
		if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
   17870:	68f3      	ldr	r3, [r6, #12]
   17872:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   17876:	2b02      	cmp	r3, #2
   17878:	d198      	bne.n	177ac <net_ipv6_prepare_for_send+0x20>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_DELAY);
   1787a:	4630      	mov	r0, r6
   1787c:	2103      	movs	r1, #3
   1787e:	f7f5 fc3f 	bl	d100 <ipv6_nbr_set_state>
			ipv6_nd_restart_reachable_timer(nbr,
   17882:	f241 3288 	movw	r2, #5000	; 0x1388
   17886:	2300      	movs	r3, #0
   17888:	4630      	mov	r0, r6
   1788a:	f7f5 fc75 	bl	d178 <ipv6_nd_restart_reachable_timer>
   1788e:	e78d      	b.n	177ac <net_ipv6_prepare_for_send+0x20>
		nexthop = &router->address.in6_addr;
   17890:	f100 0524 	add.w	r5, r0, #36	; 0x24
   17894:	f7ff fadc 	bl	16e50 <z_arch_is_user_context>
		if (try_route) {
   17898:	e7a9      	b.n	177ee <net_ipv6_prepare_for_send+0x62>
			iface = net_pkt_iface(pkt);
   1789a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1789c:	9303      	str	r3, [sp, #12]
   1789e:	e7d3      	b.n	17848 <net_ipv6_prepare_for_send+0xbc>
	ret = net_ipv6_send_ns(net_pkt_iface(pkt), pkt,
   178a0:	2300      	movs	r3, #0
   178a2:	e9cd 5300 	strd	r5, r3, [sp]
   178a6:	f107 0208 	add.w	r2, r7, #8
   178aa:	4621      	mov	r1, r4
   178ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
   178ae:	f7f5 fd3b 	bl	d328 <net_ipv6_send_ns>
	if (ret < 0) {
   178b2:	2800      	cmp	r0, #0
   178b4:	da01      	bge.n	178ba <net_ipv6_prepare_for_send+0x12e>
   178b6:	f7ff facb 	bl	16e50 <z_arch_is_user_context>
   178ba:	f7ff fac9 	bl	16e50 <z_arch_is_user_context>
	return NET_CONTINUE;
   178be:	2001      	movs	r0, #1
   178c0:	e775      	b.n	177ae <net_ipv6_prepare_for_send+0x22>

000178c2 <net_ipv6_send_rs>:
{
   178c2:	b5f0      	push	{r4, r5, r6, r7, lr}
   178c4:	b087      	sub	sp, #28
   178c6:	4607      	mov	r7, r0
	net_ipv6_addr_create_ll_allnodes_mcast(&dst);
   178c8:	a802      	add	r0, sp, #8
   178ca:	f7ff fb32 	bl	16f32 <net_ipv6_addr_create_ll_allnodes_mcast>
	src = net_if_ipv6_select_src_addr(iface, &dst);
   178ce:	a902      	add	r1, sp, #8
   178d0:	4638      	mov	r0, r7
   178d2:	f7f4 ff73 	bl	c7bc <net_if_ipv6_select_src_addr>
   178d6:	4605      	mov	r5, r0
	if (!net_ipv6_is_addr_unspecified(src)) {
   178d8:	f7ff fac4 	bl	16e64 <net_ipv6_is_addr_unspecified>
   178dc:	bb18      	cbnz	r0, 17926 <net_ipv6_send_rs+0x64>
	if (net_if_get_link_addr(iface)->len == 6U) {
   178de:	683b      	ldr	r3, [r7, #0]
   178e0:	7d1b      	ldrb	r3, [r3, #20]
   178e2:	2b06      	cmp	r3, #6
   178e4:	d021      	beq.n	1792a <net_ipv6_send_rs+0x68>
		return 16;
   178e6:	2b08      	cmp	r3, #8
   178e8:	bf14      	ite	ne
   178ea:	2600      	movne	r6, #0
   178ec:	2610      	moveq	r6, #16
	pkt = net_pkt_alloc_with_buffer(iface,
   178ee:	2364      	movs	r3, #100	; 0x64
   178f0:	9300      	str	r3, [sp, #0]
   178f2:	2202      	movs	r2, #2
   178f4:	233a      	movs	r3, #58	; 0x3a
   178f6:	1d31      	adds	r1, r6, #4
   178f8:	4638      	mov	r0, r7
   178fa:	f7f5 f90d 	bl	cb18 <net_pkt_alloc_with_buffer>
	if (!pkt) {
   178fe:	4604      	mov	r4, r0
   17900:	2800      	cmp	r0, #0
   17902:	d03e      	beq.n	17982 <net_ipv6_send_rs+0xc0>
	pkt->ipv6_hop_limit = hop_limit;
   17904:	23ff      	movs	r3, #255	; 0xff
	if (net_ipv6_create(pkt, src, &dst) ||
   17906:	aa02      	add	r2, sp, #8
   17908:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
   1790c:	4629      	mov	r1, r5
   1790e:	f7ff f9ee 	bl	16cee <net_ipv6_create>
   17912:	4602      	mov	r2, r0
   17914:	b158      	cbz	r0, 1792e <net_ipv6_send_rs+0x6c>
	int ret = -ENOBUFS;
   17916:	f06f 0568 	mvn.w	r5, #104	; 0x68
	net_pkt_unref(pkt);
   1791a:	4620      	mov	r0, r4
   1791c:	f7fe fc74 	bl	16208 <net_pkt_unref>
}
   17920:	4628      	mov	r0, r5
   17922:	b007      	add	sp, #28
   17924:	bdf0      	pop	{r4, r5, r6, r7, pc}
	u8_t llao_len = 0U;
   17926:	2600      	movs	r6, #0
   17928:	e7e1      	b.n	178ee <net_ipv6_send_rs+0x2c>
		return 8;
   1792a:	2608      	movs	r6, #8
   1792c:	e7df      	b.n	178ee <net_ipv6_send_rs+0x2c>
	    net_icmpv6_create(pkt, NET_ICMPV6_RS, 0) ||
   1792e:	2185      	movs	r1, #133	; 0x85
   17930:	4620      	mov	r0, r4
   17932:	f7ff f872 	bl	16a1a <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, &dst) ||
   17936:	4601      	mov	r1, r0
   17938:	2800      	cmp	r0, #0
   1793a:	d1ec      	bne.n	17916 <net_ipv6_send_rs+0x54>
	    net_pkt_memset(pkt, 0, sizeof(struct net_icmpv6_rs_hdr))) {
   1793c:	2204      	movs	r2, #4
   1793e:	4620      	mov	r0, r4
   17940:	f7fe fd62 	bl	16408 <net_pkt_memset>
	    net_icmpv6_create(pkt, NET_ICMPV6_RS, 0) ||
   17944:	4605      	mov	r5, r0
   17946:	2800      	cmp	r0, #0
   17948:	d1e5      	bne.n	17916 <net_ipv6_send_rs+0x54>
	if (llao_len > 0) {
   1794a:	b986      	cbnz	r6, 1796e <net_ipv6_send_rs+0xac>
	net_pkt_cursor_init(pkt);
   1794c:	4620      	mov	r0, r4
   1794e:	f7fe fcd1 	bl	162f4 <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
   17952:	213a      	movs	r1, #58	; 0x3a
   17954:	4620      	mov	r0, r4
   17956:	f7ff fa2e 	bl	16db6 <net_ipv6_finalize>
   1795a:	f7ff fa79 	bl	16e50 <z_arch_is_user_context>
	if (net_send_data(pkt) < 0) {
   1795e:	4620      	mov	r0, r4
   17960:	f7fd fecc 	bl	156fc <net_send_data>
   17964:	2800      	cmp	r0, #0
   17966:	dadb      	bge.n	17920 <net_ipv6_send_rs+0x5e>
		ret = -EINVAL;
   17968:	f06f 0515 	mvn.w	r5, #21
   1796c:	e7d5      	b.n	1791a <net_ipv6_send_rs+0x58>
	return &iface->if_dev->link_addr;
   1796e:	6839      	ldr	r1, [r7, #0]
		if (!set_llao(pkt, net_if_get_link_addr(iface),
   17970:	2301      	movs	r3, #1
   17972:	4632      	mov	r2, r6
   17974:	3110      	adds	r1, #16
   17976:	4620      	mov	r0, r4
   17978:	f7ff faa7 	bl	16eca <set_llao>
   1797c:	2800      	cmp	r0, #0
   1797e:	d1e5      	bne.n	1794c <net_ipv6_send_rs+0x8a>
   17980:	e7c9      	b.n	17916 <net_ipv6_send_rs+0x54>
		return -ENOMEM;
   17982:	f06f 050b 	mvn.w	r5, #11
   17986:	e7cb      	b.n	17920 <net_ipv6_send_rs+0x5e>

00017988 <net_ipv6_start_rs>:
	return net_ipv6_send_rs(iface);
   17988:	f7ff bf9b 	b.w	178c2 <net_ipv6_send_rs>

0001798c <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   1798c:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   17990:	b923      	cbnz	r3, 1799c <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   17992:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   17996:	f000 0001 	and.w	r0, r0, #1
   1799a:	4770      	bx	lr
		return false;
   1799c:	2000      	movs	r0, #0
}
   1799e:	4770      	bx	lr

000179a0 <net_pkt_write_be16>:
{
   179a0:	b507      	push	{r0, r1, r2, lr}
	u16_t data_be16 = htons(data);
   179a2:	ba49      	rev16	r1, r1
   179a4:	f8ad 1006 	strh.w	r1, [sp, #6]
	return net_pkt_write(pkt, &data_be16, sizeof(u16_t));
   179a8:	2202      	movs	r2, #2
   179aa:	f10d 0106 	add.w	r1, sp, #6
   179ae:	f7fe fdf1 	bl	16594 <net_pkt_write>
}
   179b2:	b003      	add	sp, #12
   179b4:	f85d fb04 	ldr.w	pc, [sp], #4

000179b8 <mld_create>:
{
   179b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   179bc:	b08c      	sub	sp, #48	; 0x30
   179be:	460c      	mov	r4, r1
   179c0:	461e      	mov	r6, r3
	NET_PKT_DATA_ACCESS_DEFINE(mld_access,
   179c2:	af07      	add	r7, sp, #28
   179c4:	2314      	movs	r3, #20
				net_pkt_get_data(pkt, &mld_access);
   179c6:	a901      	add	r1, sp, #4
	NET_PKT_DATA_ACCESS_DEFINE(mld_access,
   179c8:	9302      	str	r3, [sp, #8]
{
   179ca:	4605      	mov	r5, r0
   179cc:	4690      	mov	r8, r2
	NET_PKT_DATA_ACCESS_DEFINE(mld_access,
   179ce:	9701      	str	r7, [sp, #4]
				net_pkt_get_data(pkt, &mld_access);
   179d0:	f7fe fdfd 	bl	165ce <net_pkt_get_data>
	if (!mld) {
   179d4:	4603      	mov	r3, r0
   179d6:	b368      	cbz	r0, 17a34 <mld_create+0x7c>
	mld->aux_data_len = 0U;
   179d8:	2200      	movs	r2, #0
   179da:	7042      	strb	r2, [r0, #1]
	net_ipaddr_copy(&mld->mcast_address, addr);
   179dc:	f10d 0c0c 	add.w	ip, sp, #12
	mld->num_sources = htons(num_sources);
   179e0:	0232      	lsls	r2, r6, #8
	mld->record_type = record_type;
   179e2:	f880 8000 	strb.w	r8, [r0]
	mld->num_sources = htons(num_sources);
   179e6:	8042      	strh	r2, [r0, #2]
	net_ipaddr_copy(&mld->mcast_address, addr);
   179e8:	f104 0810 	add.w	r8, r4, #16
   179ec:	4622      	mov	r2, r4
   179ee:	4664      	mov	r4, ip
   179f0:	6810      	ldr	r0, [r2, #0]
   179f2:	6851      	ldr	r1, [r2, #4]
   179f4:	46e6      	mov	lr, ip
   179f6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   179fa:	3208      	adds	r2, #8
   179fc:	4542      	cmp	r2, r8
   179fe:	46f4      	mov	ip, lr
   17a00:	d1f6      	bne.n	179f0 <mld_create+0x38>
   17a02:	3304      	adds	r3, #4
   17a04:	4622      	mov	r2, r4
   17a06:	ca03      	ldmia	r2!, {r0, r1}
   17a08:	42ba      	cmp	r2, r7
   17a0a:	6018      	str	r0, [r3, #0]
   17a0c:	6059      	str	r1, [r3, #4]
   17a0e:	4614      	mov	r4, r2
   17a10:	f103 0308 	add.w	r3, r3, #8
   17a14:	d1f6      	bne.n	17a04 <mld_create+0x4c>
	if (net_pkt_set_data(pkt, &mld_access)) {
   17a16:	a901      	add	r1, sp, #4
   17a18:	4628      	mov	r0, r5
   17a1a:	f7fe fdfe 	bl	1661a <net_pkt_set_data>
   17a1e:	4604      	mov	r4, r0
   17a20:	b940      	cbnz	r0, 17a34 <mld_create+0x7c>
	if (num_sources > 0) {
   17a22:	b14e      	cbz	r6, 17a38 <mld_create+0x80>
				  net_ipv6_unspecified_address()->s6_addr,
   17a24:	f7f5 f994 	bl	cd50 <net_ipv6_unspecified_address>
		if (net_pkt_write(pkt,
   17a28:	2210      	movs	r2, #16
   17a2a:	4601      	mov	r1, r0
   17a2c:	4628      	mov	r0, r5
   17a2e:	f7fe fdb1 	bl	16594 <net_pkt_write>
   17a32:	b108      	cbz	r0, 17a38 <mld_create+0x80>
			return -ENOBUFS;
   17a34:	f06f 0468 	mvn.w	r4, #104	; 0x68
}
   17a38:	4620      	mov	r0, r4
   17a3a:	b00c      	add	sp, #48	; 0x30
   17a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017a40 <mld_send>:
{
   17a40:	b510      	push	{r4, lr}
   17a42:	4604      	mov	r4, r0
	net_pkt_cursor_init(pkt);
   17a44:	f7fe fc56 	bl	162f4 <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
   17a48:	213a      	movs	r1, #58	; 0x3a
   17a4a:	4620      	mov	r0, r4
   17a4c:	f7ff f9b3 	bl	16db6 <net_ipv6_finalize>
	if (net_send_data(pkt) < 0) {
   17a50:	4620      	mov	r0, r4
   17a52:	f7fd fe53 	bl	156fc <net_send_data>
   17a56:	2800      	cmp	r0, #0
   17a58:	da05      	bge.n	17a66 <mld_send+0x26>
		net_pkt_unref(pkt);
   17a5a:	4620      	mov	r0, r4
   17a5c:	f7fe fbd4 	bl	16208 <net_pkt_unref>
		return -1;
   17a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   17a64:	bd10      	pop	{r4, pc}
	return 0;
   17a66:	2000      	movs	r0, #0
   17a68:	e7fc      	b.n	17a64 <mld_send+0x24>

00017a6a <mld_create_packet>:
{
   17a6a:	b570      	push	{r4, r5, r6, lr}
   17a6c:	b086      	sub	sp, #24
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   17a6e:	f240 23ff 	movw	r3, #767	; 0x2ff
   17a72:	4604      	mov	r4, r0
   17a74:	460e      	mov	r6, r1
   17a76:	f8ad 3008 	strh.w	r3, [sp, #8]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   17a7a:	2300      	movs	r3, #0
   17a7c:	f8ad 300a 	strh.w	r3, [sp, #10]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   17a80:	f8ad 300c 	strh.w	r3, [sp, #12]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   17a84:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   17a88:	f8ad 3010 	strh.w	r3, [sp, #16]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   17a8c:	f8ad 3012 	strh.w	r3, [sp, #18]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   17a90:	f8ad 3014 	strh.w	r3, [sp, #20]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   17a94:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
   17a98:	f8ad 3016 	strh.w	r3, [sp, #22]
	pkt->ipv6_hop_limit = hop_limit;
   17a9c:	2501      	movs	r5, #1
   17a9e:	f880 5041 	strb.w	r5, [r0, #65]	; 0x41
	if (net_ipv6_create(pkt, net_if_ipv6_select_src_addr(
   17aa2:	a902      	add	r1, sp, #8
   17aa4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   17aa6:	f7f4 fe89 	bl	c7bc <net_if_ipv6_select_src_addr>
   17aaa:	aa02      	add	r2, sp, #8
   17aac:	4601      	mov	r1, r0
   17aae:	4620      	mov	r0, r4
   17ab0:	f7ff f91d 	bl	16cee <net_ipv6_create>
   17ab4:	b118      	cbz	r0, 17abe <mld_create_packet+0x54>
		return -ENOBUFS;
   17ab6:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   17aba:	b006      	add	sp, #24
   17abc:	bd70      	pop	{r4, r5, r6, pc}
	if (net_pkt_write_u8(pkt, IPPROTO_ICMPV6) ||
   17abe:	233a      	movs	r3, #58	; 0x3a
	return net_pkt_write(pkt, &data, sizeof(u8_t));
   17ac0:	462a      	mov	r2, r5
   17ac2:	f10d 0107 	add.w	r1, sp, #7
   17ac6:	4620      	mov	r0, r4
   17ac8:	f88d 3007 	strb.w	r3, [sp, #7]
   17acc:	f7fe fd62 	bl	16594 <net_pkt_write>
   17ad0:	2800      	cmp	r0, #0
   17ad2:	d1f0      	bne.n	17ab6 <mld_create_packet+0x4c>
   17ad4:	f88d 0007 	strb.w	r0, [sp, #7]
   17ad8:	462a      	mov	r2, r5
   17ada:	f10d 0107 	add.w	r1, sp, #7
   17ade:	4620      	mov	r0, r4
   17ae0:	f7fe fd58 	bl	16594 <net_pkt_write>
   17ae4:	2800      	cmp	r0, #0
   17ae6:	d1e6      	bne.n	17ab6 <mld_create_packet+0x4c>
	if (net_pkt_write_be16(pkt, 0x0502) ||
   17ae8:	f240 5102 	movw	r1, #1282	; 0x502
   17aec:	4620      	mov	r0, r4
   17aee:	f7ff ff57 	bl	179a0 <net_pkt_write_be16>
   17af2:	4601      	mov	r1, r0
   17af4:	2800      	cmp	r0, #0
   17af6:	d1de      	bne.n	17ab6 <mld_create_packet+0x4c>
	    net_pkt_write_be16(pkt, 0) ||
   17af8:	4620      	mov	r0, r4
   17afa:	f7ff ff51 	bl	179a0 <net_pkt_write_be16>
	if (net_pkt_write_be16(pkt, 0x0502) ||
   17afe:	4601      	mov	r1, r0
   17b00:	2800      	cmp	r0, #0
   17b02:	d1d8      	bne.n	17ab6 <mld_create_packet+0x4c>
	    net_pkt_write_be16(pkt, 0)) {
   17b04:	4620      	mov	r0, r4
   17b06:	f7ff ff4b 	bl	179a0 <net_pkt_write_be16>
	    net_pkt_write_be16(pkt, 0) ||
   17b0a:	4602      	mov	r2, r0
   17b0c:	2800      	cmp	r0, #0
   17b0e:	d1d2      	bne.n	17ab6 <mld_create_packet+0x4c>
	pkt->ipv6_ext_len = len;
   17b10:	2308      	movs	r3, #8
	if (net_icmpv6_create(pkt, NET_ICMPV6_MLDv2, 0) ||
   17b12:	218f      	movs	r1, #143	; 0x8f
   17b14:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
   17b18:	4620      	mov	r0, r4
   17b1a:	f7fe ff7e 	bl	16a1a <net_icmpv6_create>
   17b1e:	4601      	mov	r1, r0
   17b20:	2800      	cmp	r0, #0
   17b22:	d1c8      	bne.n	17ab6 <mld_create_packet+0x4c>
	    net_pkt_write_be16(pkt, 0) ||
   17b24:	4620      	mov	r0, r4
   17b26:	f7ff ff3b 	bl	179a0 <net_pkt_write_be16>
	if (net_icmpv6_create(pkt, NET_ICMPV6_MLDv2, 0) ||
   17b2a:	2800      	cmp	r0, #0
   17b2c:	d1c3      	bne.n	17ab6 <mld_create_packet+0x4c>
	    net_pkt_write_be16(pkt, count)) {
   17b2e:	4631      	mov	r1, r6
   17b30:	4620      	mov	r0, r4
   17b32:	f7ff ff35 	bl	179a0 <net_pkt_write_be16>
	    net_pkt_write_be16(pkt, 0) ||
   17b36:	2800      	cmp	r0, #0
   17b38:	d1bd      	bne.n	17ab6 <mld_create_packet+0x4c>
	pkt->ipv6_next_hdr = next_hdr;
   17b3a:	f884 0047 	strb.w	r0, [r4, #71]	; 0x47
	return 0;
   17b3e:	e7bc      	b.n	17aba <mld_create_packet+0x50>

00017b40 <mld_send_generic>:
{
   17b40:	b573      	push	{r0, r1, r4, r5, r6, lr}
	pkt = net_pkt_alloc_with_buffer(iface, IPV6_OPT_HDR_ROUTER_ALERT_LEN +
   17b42:	2332      	movs	r3, #50	; 0x32
   17b44:	9300      	str	r3, [sp, #0]
{
   17b46:	460c      	mov	r4, r1
   17b48:	4616      	mov	r6, r2
	pkt = net_pkt_alloc_with_buffer(iface, IPV6_OPT_HDR_ROUTER_ALERT_LEN +
   17b4a:	233a      	movs	r3, #58	; 0x3a
   17b4c:	2202      	movs	r2, #2
   17b4e:	2130      	movs	r1, #48	; 0x30
   17b50:	f7f4 ffe2 	bl	cb18 <net_pkt_alloc_with_buffer>
	if (!pkt) {
   17b54:	4605      	mov	r5, r0
   17b56:	b1d0      	cbz	r0, 17b8e <mld_send_generic+0x4e>
	if (mld_create_packet(pkt, 1) ||
   17b58:	2101      	movs	r1, #1
   17b5a:	f7ff ff86 	bl	17a6a <mld_create_packet>
   17b5e:	b128      	cbz	r0, 17b6c <mld_send_generic+0x2c>
		ret = -ENOBUFS;
   17b60:	f06f 0468 	mvn.w	r4, #104	; 0x68
	net_pkt_unref(pkt);
   17b64:	4628      	mov	r0, r5
   17b66:	f7fe fb4f 	bl	16208 <net_pkt_unref>
	return ret;
   17b6a:	e00d      	b.n	17b88 <mld_send_generic+0x48>
	    mld_create(pkt, addr, mode, 1)) {
   17b6c:	2301      	movs	r3, #1
   17b6e:	4632      	mov	r2, r6
   17b70:	4621      	mov	r1, r4
   17b72:	4628      	mov	r0, r5
   17b74:	f7ff ff20 	bl	179b8 <mld_create>
	if (mld_create_packet(pkt, 1) ||
   17b78:	2800      	cmp	r0, #0
   17b7a:	d1f1      	bne.n	17b60 <mld_send_generic+0x20>
	ret = mld_send(pkt);
   17b7c:	4628      	mov	r0, r5
   17b7e:	f7ff ff5f 	bl	17a40 <mld_send>
	if (ret) {
   17b82:	4604      	mov	r4, r0
   17b84:	2800      	cmp	r0, #0
   17b86:	d1ed      	bne.n	17b64 <mld_send_generic+0x24>
}
   17b88:	4620      	mov	r0, r4
   17b8a:	b002      	add	sp, #8
   17b8c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   17b8e:	f06f 040b 	mvn.w	r4, #11
   17b92:	e7f9      	b.n	17b88 <mld_send_generic+0x48>

00017b94 <handle_mld_query>:
{
   17b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(mld_access,
   17b98:	2500      	movs	r5, #0
   17b9a:	2318      	movs	r3, #24
   17b9c:	e9cd 5302 	strd	r5, r3, [sp, #8]
	u16_t length = net_pkt_get_len(pkt);
   17ba0:	6944      	ldr	r4, [r0, #20]
{
   17ba2:	4606      	mov	r6, r0
   17ba4:	4688      	mov	r8, r1
   17ba6:	4617      	mov	r7, r2
	while (buf) {
   17ba8:	b954      	cbnz	r4, 17bc0 <handle_mld_query+0x2c>
				net_pkt_get_data(pkt, &mld_access);
   17baa:	a902      	add	r1, sp, #8
   17bac:	4630      	mov	r0, r6
   17bae:	f7fe fd0e 	bl	165ce <net_pkt_get_data>
	u16_t length = net_pkt_get_len(pkt);
   17bb2:	b2ad      	uxth	r5, r5
	if (!mld_query) {
   17bb4:	4681      	mov	r9, r0
   17bb6:	b938      	cbnz	r0, 17bc8 <handle_mld_query+0x34>
   17bb8:	f7ff fee8 	bl	1798c <z_arch_is_user_context>
	return NET_DROP;
   17bbc:	2502      	movs	r5, #2
   17bbe:	e072      	b.n	17ca6 <handle_mld_query+0x112>
		bytes += buf->len;
   17bc0:	89a3      	ldrh	r3, [r4, #12]
		buf = buf->frags;
   17bc2:	6824      	ldr	r4, [r4, #0]
		bytes += buf->len;
   17bc4:	441d      	add	r5, r3
		buf = buf->frags;
   17bc6:	e7ef      	b.n	17ba8 <handle_mld_query+0x14>
	return net_pkt_skip(pkt, access->size);
   17bc8:	9903      	ldr	r1, [sp, #12]
   17bca:	4630      	mov	r0, r6
   17bcc:	f7fe fc0e 	bl	163ec <net_pkt_skip>
   17bd0:	f7ff fedc 	bl	1798c <z_arch_is_user_context>
	mld_query->num_sources = ntohs(mld_query->num_sources);
   17bd4:	f8b9 2016 	ldrh.w	r2, [r9, #22]
   17bd8:	0213      	lsls	r3, r2, #8
   17bda:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   17bde:	b29a      	uxth	r2, r3
   17be0:	f8a9 2016 	strh.w	r2, [r9, #22]
	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   17be4:	f8b6 3042 	ldrh.w	r3, [r6, #66]	; 0x42
   17be8:	3344      	adds	r3, #68	; 0x44
   17bea:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   17bee:	b29b      	uxth	r3, r3
	if (length < pkt_len || pkt_len > NET_IPV6_MTU ||
   17bf0:	42ab      	cmp	r3, r5
   17bf2:	d8e3      	bhi.n	17bbc <handle_mld_query+0x28>
   17bf4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   17bf8:	d8e0      	bhi.n	17bbc <handle_mld_query+0x28>
   17bfa:	f898 3007 	ldrb.w	r3, [r8, #7]
   17bfe:	2b01      	cmp	r3, #1
   17c00:	d1dc      	bne.n	17bbc <handle_mld_query+0x28>
	    ip_hdr->hop_limit != 1U || icmp_hdr->code != 0U) {
   17c02:	787d      	ldrb	r5, [r7, #1]
   17c04:	2d00      	cmp	r5, #0
   17c06:	d1d9      	bne.n	17bbc <handle_mld_query+0x28>
	if (!net_ipv6_addr_cmp(&mld_query->mcast_address,
   17c08:	f7f5 f8a2 	bl	cd50 <net_ipv6_unspecified_address>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   17c0c:	2210      	movs	r2, #16
   17c0e:	4601      	mov	r1, r0
   17c10:	f109 0004 	add.w	r0, r9, #4
   17c14:	f7ea fba4 	bl	2360 <memcmp>
   17c18:	4607      	mov	r7, r0
   17c1a:	2800      	cmp	r0, #0
   17c1c:	d1cc      	bne.n	17bb8 <handle_mld_query+0x24>
	send_mld_report(net_pkt_iface(pkt));
   17c1e:	6a70      	ldr	r0, [r6, #36]	; 0x24
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   17c20:	f8d0 9004 	ldr.w	r9, [r0, #4]
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
   17c24:	2218      	movs	r2, #24
   17c26:	fb02 9304 	mla	r3, r2, r4, r9
   17c2a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
   17c2e:	07d9      	lsls	r1, r3, #31
   17c30:	d502      	bpl.n	17c38 <handle_mld_query+0xa4>
   17c32:	0799      	lsls	r1, r3, #30
		count++;
   17c34:	bf48      	it	mi
   17c36:	3701      	addmi	r7, #1
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   17c38:	3401      	adds	r4, #1
   17c3a:	2c03      	cmp	r4, #3
   17c3c:	d1f3      	bne.n	17c26 <handle_mld_query+0x92>
					count * MLDv2_MCAST_RECORD_LEN,
   17c3e:	2114      	movs	r1, #20
	pkt = net_pkt_alloc_with_buffer(iface, IPV6_OPT_HDR_ROUTER_ALERT_LEN +
   17c40:	2332      	movs	r3, #50	; 0x32
					count * MLDv2_MCAST_RECORD_LEN,
   17c42:	4379      	muls	r1, r7
	pkt = net_pkt_alloc_with_buffer(iface, IPV6_OPT_HDR_ROUTER_ALERT_LEN +
   17c44:	9300      	str	r3, [sp, #0]
   17c46:	2202      	movs	r2, #2
   17c48:	233a      	movs	r3, #58	; 0x3a
   17c4a:	310c      	adds	r1, #12
   17c4c:	f7f4 ff64 	bl	cb18 <net_pkt_alloc_with_buffer>
	if (!pkt) {
   17c50:	4680      	mov	r8, r0
   17c52:	b328      	cbz	r0, 17ca0 <handle_mld_query+0x10c>
	if (mld_create_packet(pkt, count)) {
   17c54:	b2b9      	uxth	r1, r7
   17c56:	f7ff ff08 	bl	17a6a <mld_create_packet>
   17c5a:	4604      	mov	r4, r0
   17c5c:	b9e8      	cbnz	r0, 17c9a <handle_mld_query+0x106>
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
   17c5e:	f04f 0a18 	mov.w	sl, #24
		if (!mld_create(pkt, &ipv6->mcast[i].address.in6_addr,
   17c62:	f109 0794 	add.w	r7, r9, #148	; 0x94
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
   17c66:	fb0a f104 	mul.w	r1, sl, r4
   17c6a:	eb09 0301 	add.w	r3, r9, r1
   17c6e:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
   17c72:	07da      	lsls	r2, r3, #31
   17c74:	d407      	bmi.n	17c86 <handle_mld_query+0xf2>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   17c76:	3401      	adds	r4, #1
   17c78:	2c03      	cmp	r4, #3
   17c7a:	d1f4      	bne.n	17c66 <handle_mld_query+0xd2>
	if (!mld_send(pkt)) {
   17c7c:	4640      	mov	r0, r8
   17c7e:	f7ff fedf 	bl	17a40 <mld_send>
   17c82:	b950      	cbnz	r0, 17c9a <handle_mld_query+0x106>
   17c84:	e00c      	b.n	17ca0 <handle_mld_query+0x10c>
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
   17c86:	079b      	lsls	r3, r3, #30
   17c88:	d5f5      	bpl.n	17c76 <handle_mld_query+0xe2>
		if (!mld_create(pkt, &ipv6->mcast[i].address.in6_addr,
   17c8a:	2300      	movs	r3, #0
   17c8c:	2202      	movs	r2, #2
   17c8e:	4439      	add	r1, r7
   17c90:	4640      	mov	r0, r8
   17c92:	f7ff fe91 	bl	179b8 <mld_create>
   17c96:	2800      	cmp	r0, #0
   17c98:	d1ed      	bne.n	17c76 <handle_mld_query+0xe2>
	net_pkt_unref(pkt);
   17c9a:	4640      	mov	r0, r8
   17c9c:	f7fe fab4 	bl	16208 <net_pkt_unref>
	net_pkt_unref(pkt);
   17ca0:	4630      	mov	r0, r6
   17ca2:	f7fe fab1 	bl	16208 <net_pkt_unref>
}
   17ca6:	4628      	mov	r0, r5
   17ca8:	b004      	add	sp, #16
   17caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00017cae <net_ipv6_mld_join>:
{
   17cae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   17cb0:	460d      	mov	r5, r1
   17cb2:	9001      	str	r0, [sp, #4]
	maddr = net_if_ipv6_maddr_lookup(addr, &iface);
   17cb4:	a901      	add	r1, sp, #4
   17cb6:	4628      	mov	r0, r5
   17cb8:	f7f4 fbf0 	bl	c49c <net_if_ipv6_maddr_lookup>
	if (maddr && net_if_ipv6_maddr_is_joined(maddr)) {
   17cbc:	4604      	mov	r4, r0
   17cbe:	b128      	cbz	r0, 17ccc <net_ipv6_mld_join+0x1e>
	return addr->is_joined;
   17cc0:	7d03      	ldrb	r3, [r0, #20]
   17cc2:	079b      	lsls	r3, r3, #30
   17cc4:	d508      	bpl.n	17cd8 <net_ipv6_mld_join+0x2a>
		return -EALREADY;
   17cc6:	f06f 0677 	mvn.w	r6, #119	; 0x77
   17cca:	e015      	b.n	17cf8 <net_ipv6_mld_join+0x4a>
		maddr = net_if_ipv6_maddr_add(iface, addr);
   17ccc:	4629      	mov	r1, r5
   17cce:	9801      	ldr	r0, [sp, #4]
   17cd0:	f7fd ff26 	bl	15b20 <net_if_ipv6_maddr_add>
		if (!maddr) {
   17cd4:	4604      	mov	r4, r0
   17cd6:	b190      	cbz	r0, 17cfe <net_ipv6_mld_join+0x50>
	ret = mld_send_generic(iface, addr, NET_IPV6_MLDv2_MODE_IS_EXCLUDE);
   17cd8:	2202      	movs	r2, #2
   17cda:	4629      	mov	r1, r5
   17cdc:	9801      	ldr	r0, [sp, #4]
   17cde:	f7ff ff2f 	bl	17b40 <mld_send_generic>
	if (ret < 0) {
   17ce2:	1e06      	subs	r6, r0, #0
   17ce4:	db08      	blt.n	17cf8 <net_ipv6_mld_join+0x4a>
	addr->is_joined = true;
   17ce6:	7d23      	ldrb	r3, [r4, #20]
	net_if_mcast_monitor(iface, addr, true);
   17ce8:	9801      	ldr	r0, [sp, #4]
   17cea:	f043 0302 	orr.w	r3, r3, #2
   17cee:	7523      	strb	r3, [r4, #20]
   17cf0:	2201      	movs	r2, #1
   17cf2:	4629      	mov	r1, r5
   17cf4:	f7f4 fc10 	bl	c518 <net_if_mcast_monitor>
}
   17cf8:	4630      	mov	r0, r6
   17cfa:	b002      	add	sp, #8
   17cfc:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   17cfe:	f06f 060b 	mvn.w	r6, #11
   17d02:	e7f9      	b.n	17cf8 <net_ipv6_mld_join+0x4a>

00017d04 <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   17d04:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   17d08:	b923      	cbnz	r3, 17d14 <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   17d0a:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   17d0e:	f000 0001 	and.w	r0, r0, #1
   17d12:	4770      	bx	lr
		return false;
   17d14:	2000      	movs	r0, #0
}
   17d16:	4770      	bx	lr

00017d18 <net_route_entry_remove>:
   17d18:	f7ff bff4 	b.w	17d04 <z_arch_is_user_context>

00017d1c <net_route_del>:
{
   17d1c:	b538      	push	{r3, r4, r5, lr}
	if (!route) {
   17d1e:	4604      	mov	r4, r0
   17d20:	b1c0      	cbz	r0, 17d54 <net_route_del+0x38>
	sys_slist_find_and_remove(&routes, &route->node);
   17d22:	f7f5 ff01 	bl	db28 <sys_slist_find_and_remove.constprop.11>
	nbr = net_route_get_nbr(route);
   17d26:	4620      	mov	r0, r4
   17d28:	f7f5 ff1c 	bl	db64 <net_route_get_nbr>
	if (!nbr) {
   17d2c:	4605      	mov	r5, r0
   17d2e:	b1a0      	cbz	r0, 17d5a <net_route_del+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   17d30:	6864      	ldr	r4, [r4, #4]
   17d32:	b934      	cbnz	r4, 17d42 <net_route_del+0x26>
   17d34:	f7ff ffe6 	bl	17d04 <z_arch_is_user_context>
	net_nbr_unref(nbr);
   17d38:	4628      	mov	r0, r5
   17d3a:	f7fe ff94 	bl	16c66 <net_nbr_unref>
	return 0;
   17d3e:	2000      	movs	r0, #0
}
   17d40:	bd38      	pop	{r3, r4, r5, pc}
		if (!nexthop_route->nbr) {
   17d42:	6862      	ldr	r2, [r4, #4]
   17d44:	b122      	cbz	r2, 17d50 <net_route_del+0x34>
   17d46:	f7ff ffdd 	bl	17d04 <z_arch_is_user_context>
	net_nbr_unref(nbr);
   17d4a:	4610      	mov	r0, r2
   17d4c:	f7fe ff8b 	bl	16c66 <net_nbr_unref>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17d50:	6824      	ldr	r4, [r4, #0]
	return node->next;
   17d52:	e7ee      	b.n	17d32 <net_route_del+0x16>
		return -EINVAL;
   17d54:	f06f 0015 	mvn.w	r0, #21
   17d58:	e7f2      	b.n	17d40 <net_route_del+0x24>
		return -ENOENT;
   17d5a:	f06f 0001 	mvn.w	r0, #1
   17d5e:	e7ef      	b.n	17d40 <net_route_del+0x24>

00017d60 <net_route_get_nexthop>:

	return status;
}

struct in6_addr *net_route_get_nexthop(struct net_route_entry *route)
{
   17d60:	b508      	push	{r3, lr}
	struct net_route_nexthop *nexthop_route;
	struct net_ipv6_nbr_data *ipv6_nbr_data;

	if (!route) {
   17d62:	b908      	cbnz	r0, 17d68 <net_route_get_nexthop+0x8>
		return NULL;
   17d64:	2000      	movs	r0, #0
			NET_ERR("could not get neighbor data from next hop");
		}
	}

	return NULL;
}
   17d66:	bd08      	pop	{r3, pc}
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   17d68:	6842      	ldr	r2, [r0, #4]
   17d6a:	2a00      	cmp	r2, #0
   17d6c:	d0fa      	beq.n	17d64 <net_route_get_nexthop+0x4>
		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   17d6e:	6853      	ldr	r3, [r2, #4]
   17d70:	7859      	ldrb	r1, [r3, #1]
   17d72:	29ff      	cmp	r1, #255	; 0xff
   17d74:	d005      	beq.n	17d82 <net_route_get_nexthop+0x22>
		ipv6_nbr_data = net_ipv6_nbr_data(nexthop_route->nbr);
   17d76:	68d8      	ldr	r0, [r3, #12]
		if (ipv6_nbr_data) {
   17d78:	b108      	cbz	r0, 17d7e <net_route_get_nexthop+0x1e>
			addr = &ipv6_nbr_data->addr;
   17d7a:	3004      	adds	r0, #4
			return addr;
   17d7c:	e7f3      	b.n	17d66 <net_route_get_nexthop+0x6>
   17d7e:	f7ff ffc1 	bl	17d04 <z_arch_is_user_context>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17d82:	6812      	ldr	r2, [r2, #0]
	return node->next;
   17d84:	e7f1      	b.n	17d6a <net_route_get_nexthop+0xa>

00017d86 <net_route_get_info>:

bool net_route_get_info(struct net_if *iface,
			struct in6_addr *dst,
			struct net_route_entry **route,
			struct in6_addr **nexthop)
{
   17d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17d88:	4607      	mov	r7, r0
   17d8a:	460d      	mov	r5, r1
   17d8c:	4616      	mov	r6, r2
   17d8e:	461c      	mov	r4, r3
	struct net_if_router *router;

	/* Search in neighbor table first, if not search in routing table. */
	if (net_ipv6_nbr_lookup(iface, dst)) {
   17d90:	f7ff f93a 	bl	17008 <net_ipv6_nbr_lookup>
   17d94:	b120      	cbz	r0, 17da0 <net_route_get_info+0x1a>
		/* Found nexthop, no need to look into routing table. */
		*route = NULL;
   17d96:	2300      	movs	r3, #0
   17d98:	6033      	str	r3, [r6, #0]
		*nexthop = dst;
   17d9a:	6025      	str	r5, [r4, #0]
			return false;
		}

		*nexthop = &router->address.in6_addr;

		return true;
   17d9c:	2001      	movs	r0, #1
   17d9e:	e00b      	b.n	17db8 <net_route_get_info+0x32>
	*route = net_route_lookup(iface, dst);
   17da0:	4629      	mov	r1, r5
   17da2:	4638      	mov	r0, r7
   17da4:	f7f5 fef4 	bl	db90 <net_route_lookup>
   17da8:	6030      	str	r0, [r6, #0]
	if (*route) {
   17daa:	b130      	cbz	r0, 17dba <net_route_get_info+0x34>
		*nexthop = net_route_get_nexthop(*route);
   17dac:	f7ff ffd8 	bl	17d60 <net_route_get_nexthop>
   17db0:	6020      	str	r0, [r4, #0]
		if (!*nexthop) {
   17db2:	3000      	adds	r0, #0
   17db4:	bf18      	it	ne
   17db6:	2001      	movne	r0, #1
	}

	return false;
}
   17db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		router = net_if_ipv6_router_find_default(NULL, dst);
   17dba:	4629      	mov	r1, r5
   17dbc:	f7f4 fc80 	bl	c6c0 <net_if_ipv6_router_find_default>
		if (!router) {
   17dc0:	2800      	cmp	r0, #0
   17dc2:	d0f9      	beq.n	17db8 <net_route_get_info+0x32>
		*nexthop = &router->address.in6_addr;
   17dc4:	3024      	adds	r0, #36	; 0x24
   17dc6:	6020      	str	r0, [r4, #0]
   17dc8:	e7e8      	b.n	17d9c <net_route_get_info+0x16>

00017dca <net_route_packet>:

int net_route_packet(struct net_pkt *pkt, struct in6_addr *nexthop)
{
   17dca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17dcc:	4604      	mov	r4, r0
	struct net_linkaddr_storage *lladdr;
	struct net_nbr *nbr;

	nbr = net_ipv6_nbr_lookup(NULL, nexthop);
   17dce:	2000      	movs	r0, #0
   17dd0:	f7ff f91a 	bl	17008 <net_ipv6_nbr_lookup>
	if (!nbr) {
   17dd4:	4606      	mov	r6, r0
   17dd6:	b920      	cbnz	r0, 17de2 <net_route_packet+0x18>
   17dd8:	f7ff ff94 	bl	17d04 <z_arch_is_user_context>
		NET_DBG("Cannot find %s neighbor",
			log_strdup(net_sprint_ipv6_addr(nexthop)));
		return -ENOENT;
   17ddc:	f06f 0001 	mvn.w	r0, #1
	net_pkt_lladdr_dst(pkt)->len = lladdr->len;

	net_pkt_set_iface(pkt, nbr->iface);

	return net_send_data(pkt);
}
   17de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	lladdr = net_nbr_get_lladdr(nbr->idx);
   17de2:	7840      	ldrb	r0, [r0, #1]
   17de4:	f7f4 ffac 	bl	cd40 <net_nbr_get_lladdr>
	if (!lladdr) {
   17de8:	4605      	mov	r5, r0
   17dea:	b920      	cbnz	r0, 17df6 <net_route_packet+0x2c>
   17dec:	f7ff ff8a 	bl	17d04 <z_arch_is_user_context>
		return -ESRCH;
   17df0:	f06f 0002 	mvn.w	r0, #2
   17df4:	e7f4      	b.n	17de0 <net_route_packet+0x16>
		if (!net_pkt_lladdr_src(pkt)->addr) {
   17df6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   17df8:	b920      	cbnz	r0, 17e04 <net_route_packet+0x3a>
   17dfa:	f7ff ff83 	bl	17d04 <z_arch_is_user_context>
			return -EINVAL;
   17dfe:	f06f 0015 	mvn.w	r0, #21
   17e02:	e7ed      	b.n	17de0 <net_route_packet+0x16>
		if (!memcmp(net_pkt_lladdr_src(pkt)->addr, lladdr->addr,
   17e04:	1caf      	adds	r7, r5, #2
   17e06:	786a      	ldrb	r2, [r5, #1]
   17e08:	4639      	mov	r1, r7
   17e0a:	f7ea faa9 	bl	2360 <memcmp>
   17e0e:	2800      	cmp	r0, #0
   17e10:	d0f3      	beq.n	17dfa <net_route_packet+0x30>
	pkt->forwarding = forward;
   17e12:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   17e16:	f043 0301 	orr.w	r3, r3, #1
   17e1a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
	return net_if_get_link_addr(pkt->iface);
   17e1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   17e20:	681b      	ldr	r3, [r3, #0]
	net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
   17e22:	691a      	ldr	r2, [r3, #16]
   17e24:	62e2      	str	r2, [r4, #44]	; 0x2c
	net_pkt_lladdr_src(pkt)->type = net_pkt_lladdr_if(pkt)->type;
   17e26:	7d5a      	ldrb	r2, [r3, #21]
   17e28:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
   17e2c:	7d1b      	ldrb	r3, [r3, #20]
   17e2e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	net_pkt_lladdr_dst(pkt)->addr = lladdr->addr;
   17e32:	6367      	str	r7, [r4, #52]	; 0x34
	net_pkt_lladdr_dst(pkt)->type = lladdr->type;
   17e34:	782b      	ldrb	r3, [r5, #0]
   17e36:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	net_pkt_lladdr_dst(pkt)->len = lladdr->len;
   17e3a:	786b      	ldrb	r3, [r5, #1]
   17e3c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	net_pkt_set_iface(pkt, nbr->iface);
   17e40:	68b3      	ldr	r3, [r6, #8]
	pkt->iface = iface;
   17e42:	6263      	str	r3, [r4, #36]	; 0x24
	if (iface) {
   17e44:	b13b      	cbz	r3, 17e56 <net_route_packet+0x8c>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   17e46:	681a      	ldr	r2, [r3, #0]
   17e48:	7d52      	ldrb	r2, [r2, #21]
   17e4a:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   17e4e:	681b      	ldr	r3, [r3, #0]
   17e50:	7d5b      	ldrb	r3, [r3, #21]
   17e52:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	return net_send_data(pkt);
   17e56:	4620      	mov	r0, r4
}
   17e58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return net_send_data(pkt);
   17e5c:	f7fd bc4e 	b.w	156fc <net_send_data>

00017e60 <net_route_init>:

void net_route_init(void)
{
   17e60:	b508      	push	{r3, lr}
   17e62:	f7ff ff4f 	bl	17d04 <z_arch_is_user_context>
	NET_DBG("Allocated %d routing entries (%zu bytes)",
		CONFIG_NET_MAX_ROUTES, sizeof(net_route_entries_pool));

	NET_DBG("Allocated %d nexthop entries (%zu bytes)",
		CONFIG_NET_MAX_NEXTHOPS, sizeof(net_route_nexthop_pool));
}
   17e66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   17e6a:	f7ff bf4b 	b.w	17d04 <z_arch_is_user_context>

00017e6e <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   17e6e:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   17e72:	b923      	cbnz	r3, 17e7e <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   17e74:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   17e78:	f000 0001 	and.w	r0, r0, #1
   17e7c:	4770      	bx	lr
		return false;
   17e7e:	2000      	movs	r0, #0
}
   17e80:	4770      	bx	lr

00017e82 <net_ipv6_is_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   17e82:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   17e84:	b942      	cbnz	r2, 17e98 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   17e86:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   17e88:	b933      	cbnz	r3, 17e98 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   17e8a:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   17e8c:	b922      	cbnz	r2, 17e98 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   17e8e:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   17e90:	fab0 f080 	clz	r0, r0
   17e94:	0940      	lsrs	r0, r0, #5
   17e96:	4770      	bx	lr
   17e98:	2000      	movs	r0, #0
   17e9a:	4770      	bx	lr

00017e9c <check_addr.isra.4>:
	return pkt->family;
   17e9c:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
static bool check_addr(struct net_pkt *pkt,
   17ea0:	b510      	push	{r4, lr}
	if (addr->sa_family != net_pkt_family(pkt)) {
   17ea2:	8814      	ldrh	r4, [r2, #0]
   17ea4:	f3c0 0042 	ubfx	r0, r0, #1, #3
   17ea8:	4284      	cmp	r4, r0
   17eaa:	d113      	bne.n	17ed4 <check_addr.isra.4+0x38>
	if (net_pkt_family(pkt) == AF_INET6 && addr->sa_family == AF_INET6) {
   17eac:	2802      	cmp	r0, #2
   17eae:	d113      	bne.n	17ed8 <check_addr.isra.4+0x3c>
		if (is_remote) {
   17eb0:	6809      	ldr	r1, [r1, #0]
   17eb2:	b16b      	cbz	r3, 17ed0 <check_addr.isra.4+0x34>
			addr6 = &ip_hdr->ipv6->src;
   17eb4:	3108      	adds	r1, #8
			    &net_sin6(addr)->sin6_addr)) {
   17eb6:	1d14      	adds	r4, r2, #4
		if (!net_ipv6_is_addr_unspecified(
   17eb8:	4620      	mov	r0, r4
   17eba:	f7ff ffe2 	bl	17e82 <net_ipv6_is_addr_unspecified>
   17ebe:	b930      	cbnz	r0, 17ece <check_addr.isra.4+0x32>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   17ec0:	2210      	movs	r2, #16
   17ec2:	4620      	mov	r0, r4
   17ec4:	f7ea fa4c 	bl	2360 <memcmp>
			if (!net_ipv6_addr_cmp(&net_sin6(addr)->sin6_addr,
   17ec8:	fab0 f080 	clz	r0, r0
   17ecc:	0940      	lsrs	r0, r0, #5
}
   17ece:	bd10      	pop	{r4, pc}
			addr6 = &ip_hdr->ipv6->dst;
   17ed0:	3118      	adds	r1, #24
   17ed2:	e7f0      	b.n	17eb6 <check_addr.isra.4+0x1a>
		return false;
   17ed4:	2000      	movs	r0, #0
   17ed6:	e7fa      	b.n	17ece <check_addr.isra.4+0x32>
	return true;
   17ed8:	2001      	movs	r0, #1
   17eda:	e7f8      	b.n	17ece <check_addr.isra.4+0x32>

00017edc <net_conn_init>:
		for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
			conn_cache[i].idx = -1;
		}
	} while (0);
#endif /* CONFIG_NET_CONN_CACHE */
}
   17edc:	4770      	bx	lr

00017ede <z_arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   17ede:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   17ee2:	b923      	cbnz	r3, 17eee <z_arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   17ee4:	f3ef 8014 	mrs	r0, CONTROL
	return (value & 0x1) ? true : false;
   17ee8:	f000 0001 	and.w	r0, r0, #1
   17eec:	4770      	bx	lr
		return false;
   17eee:	2000      	movs	r0, #0
}
   17ef0:	4770      	bx	lr

00017ef2 <net_udp_create>:
#include "net_stats.h"

#define PKT_WAIT_TIME K_SECONDS(1)

int net_udp_create(struct net_pkt *pkt, u16_t src_port, u16_t dst_port)
{
   17ef2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   17ef4:	2308      	movs	r3, #8
{
   17ef6:	460e      	mov	r6, r1
	struct net_udp_hdr *udp_hdr;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   17ef8:	eb0d 0103 	add.w	r1, sp, r3
{
   17efc:	4604      	mov	r4, r0
   17efe:	4615      	mov	r5, r2
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   17f00:	f8cd d008 	str.w	sp, [sp, #8]
   17f04:	9303      	str	r3, [sp, #12]
	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   17f06:	f7fe fb62 	bl	165ce <net_pkt_get_data>
	if (!udp_hdr) {
   17f0a:	b160      	cbz	r0, 17f26 <net_udp_create+0x34>
		return -ENOBUFS;
	}

	udp_hdr->src_port = src_port;
	udp_hdr->dst_port = dst_port;
	udp_hdr->len      = 0U;
   17f0c:	2300      	movs	r3, #0
	udp_hdr->src_port = src_port;
   17f0e:	8006      	strh	r6, [r0, #0]
	udp_hdr->dst_port = dst_port;
   17f10:	8045      	strh	r5, [r0, #2]
	udp_hdr->len      = 0U;
   17f12:	7103      	strb	r3, [r0, #4]
   17f14:	7143      	strb	r3, [r0, #5]
	udp_hdr->chksum   = 0U;
   17f16:	7183      	strb	r3, [r0, #6]
   17f18:	71c3      	strb	r3, [r0, #7]

	return net_pkt_set_data(pkt, &udp_access);
   17f1a:	a902      	add	r1, sp, #8
   17f1c:	4620      	mov	r0, r4
   17f1e:	f7fe fb7c 	bl	1661a <net_pkt_set_data>
}
   17f22:	b004      	add	sp, #16
   17f24:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   17f26:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17f2a:	e7fa      	b.n	17f22 <net_udp_create+0x30>

00017f2c <net_udp_finalize>:

int net_udp_finalize(struct net_pkt *pkt)
{
   17f2c:	b530      	push	{r4, r5, lr}
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   17f2e:	2308      	movs	r3, #8
{
   17f30:	b085      	sub	sp, #20
	struct net_udp_hdr *udp_hdr;
	u16_t length;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   17f32:	eb0d 0103 	add.w	r1, sp, r3
{
   17f36:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   17f38:	f8cd d008 	str.w	sp, [sp, #8]
   17f3c:	9303      	str	r3, [sp, #12]
	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   17f3e:	f7fe fb46 	bl	165ce <net_pkt_get_data>
	if (!udp_hdr) {
   17f42:	4605      	mov	r5, r0
   17f44:	b310      	cbz	r0, 17f8c <net_udp_finalize+0x60>
		return -ENOBUFS;
	}

	length = net_pkt_get_len(pkt) -
   17f46:	6962      	ldr	r2, [r4, #20]
	size_t bytes = 0;
   17f48:	2300      	movs	r3, #0
	while (buf) {
   17f4a:	b9da      	cbnz	r2, 17f84 <net_udp_finalize+0x58>
		net_pkt_ip_hdr_len(pkt) -
   17f4c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
	length = net_pkt_get_len(pkt) -
   17f50:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
		net_pkt_ipv6_ext_len(pkt);
	udp_hdr->len = htons(length);

	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   17f54:	6a60      	ldr	r0, [r4, #36]	; 0x24
	length = net_pkt_get_len(pkt) -
   17f56:	440a      	add	r2, r1
   17f58:	1a9b      	subs	r3, r3, r2
	udp_hdr->len = htons(length);
   17f5a:	ba5b      	rev16	r3, r3
   17f5c:	80ab      	strh	r3, [r5, #4]
	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   17f5e:	f7fe f83f 	bl	15fe0 <net_if_need_calc_tx_checksum>
   17f62:	b148      	cbz	r0, 17f78 <net_udp_finalize+0x4c>
	u16_t chksum = net_calc_chksum(pkt, IPPROTO_UDP);
   17f64:	2111      	movs	r1, #17
   17f66:	4620      	mov	r0, r4
   17f68:	f7fe fcb3 	bl	168d2 <net_calc_chksum>
		udp_hdr->chksum = net_calc_chksum_udp(pkt);
   17f6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17f70:	2800      	cmp	r0, #0
   17f72:	bf08      	it	eq
   17f74:	4618      	moveq	r0, r3
   17f76:	80e8      	strh	r0, [r5, #6]
	}

	return net_pkt_set_data(pkt, &udp_access);
   17f78:	a902      	add	r1, sp, #8
   17f7a:	4620      	mov	r0, r4
   17f7c:	f7fe fb4d 	bl	1661a <net_pkt_set_data>
}
   17f80:	b005      	add	sp, #20
   17f82:	bd30      	pop	{r4, r5, pc}
		bytes += buf->len;
   17f84:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
   17f86:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
   17f88:	440b      	add	r3, r1
		buf = buf->frags;
   17f8a:	e7de      	b.n	17f4a <net_udp_finalize+0x1e>
		return -ENOBUFS;
   17f8c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17f90:	e7f6      	b.n	17f80 <net_udp_finalize+0x54>

00017f92 <net_udp_input>:
	return net_conn_unregister(handle);
}

struct net_udp_hdr *net_udp_input(struct net_pkt *pkt,
				  struct net_pkt_data_access *udp_access)
{
   17f92:	b570      	push	{r4, r5, r6, lr}
   17f94:	4605      	mov	r5, r0
   17f96:	460e      	mov	r6, r1
	struct net_udp_hdr *udp_hdr;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, udp_access);
   17f98:	f7fe fb19 	bl	165ce <net_pkt_get_data>
	if (!udp_hdr || net_pkt_set_data(pkt, udp_access)) {
   17f9c:	4604      	mov	r4, r0
   17f9e:	b120      	cbz	r0, 17faa <net_udp_input+0x18>
   17fa0:	4631      	mov	r1, r6
   17fa2:	4628      	mov	r0, r5
   17fa4:	f7fe fb39 	bl	1661a <net_pkt_set_data>
   17fa8:	b120      	cbz	r0, 17fb4 <net_udp_input+0x22>
   17faa:	f7ff ff98 	bl	17ede <z_arch_is_user_context>
	}
out:
	return udp_hdr;
drop:
	net_stats_update_udp_chkerr(net_pkt_iface(pkt));
	return NULL;
   17fae:	2400      	movs	r4, #0
}
   17fb0:	4620      	mov	r0, r4
   17fb2:	bd70      	pop	{r4, r5, r6, pc}
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt))) {
   17fb4:	6a68      	ldr	r0, [r5, #36]	; 0x24
   17fb6:	f7fe f815 	bl	15fe4 <net_if_need_calc_rx_checksum>
	if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
   17fba:	2800      	cmp	r0, #0
   17fbc:	d0f8      	beq.n	17fb0 <net_udp_input+0x1e>
	return net_calc_chksum(pkt, IPPROTO_UDP);
   17fbe:	2111      	movs	r1, #17
   17fc0:	4628      	mov	r0, r5
   17fc2:	f7fe fc86 	bl	168d2 <net_calc_chksum>
		if (net_calc_verify_chksum_udp(pkt) != 0U) {
   17fc6:	2800      	cmp	r0, #0
   17fc8:	d0f2      	beq.n	17fb0 <net_udp_input+0x1e>
   17fca:	e7ee      	b.n	17faa <net_udp_input+0x18>

00017fcc <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					struct device *port,
					u32_t pins)
{
   17fcc:	b570      	push	{r4, r5, r6, lr}
   17fce:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   17fd0:	6801      	ldr	r1, [r0, #0]
{
   17fd2:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   17fd4:	b159      	cbz	r1, 17fee <gpio_fire_callbacks+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17fd6:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
   17fd8:	688b      	ldr	r3, [r1, #8]
   17fda:	421d      	tst	r5, r3
   17fdc:	d003      	beq.n	17fe6 <gpio_fire_callbacks+0x1a>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
   17fde:	684b      	ldr	r3, [r1, #4]
   17fe0:	462a      	mov	r2, r5
   17fe2:	4630      	mov	r0, r6
   17fe4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   17fe6:	b114      	cbz	r4, 17fee <gpio_fire_callbacks+0x22>
   17fe8:	4621      	mov	r1, r4
   17fea:	6824      	ldr	r4, [r4, #0]
   17fec:	e7f4      	b.n	17fd8 <gpio_fire_callbacks+0xc>
		}
	}
}
   17fee:	bd70      	pop	{r4, r5, r6, pc}

00017ff0 <gpio_nrfx_write>:
{
   17ff0:	b510      	push	{r4, lr}
	return port->config->config_info;
   17ff2:	6804      	ldr	r4, [r0, #0]
   17ff4:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   17ff6:	68a4      	ldr	r4, [r4, #8]
   17ff8:	69c0      	ldr	r0, [r0, #28]
   17ffa:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   17ffc:	2901      	cmp	r1, #1
   17ffe:	d104      	bne.n	1800a <gpio_nrfx_write+0x1a>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   18000:	4058      	eors	r0, r3
    p_reg->OUT = value;
   18002:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
}
   18006:	2000      	movs	r0, #0
   18008:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   1800a:	3300      	adds	r3, #0
   1800c:	fa20 f002 	lsr.w	r0, r0, r2
   18010:	f04f 0101 	mov.w	r1, #1
   18014:	bf18      	it	ne
   18016:	2301      	movne	r3, #1
   18018:	f000 0001 	and.w	r0, r0, #1
   1801c:	4091      	lsls	r1, r2
   1801e:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   18020:	bf14      	ite	ne
   18022:	f8c4 1508 	strne.w	r1, [r4, #1288]	; 0x508
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   18026:	f8c4 150c 	streq.w	r1, [r4, #1292]	; 0x50c
   1802a:	e7ec      	b.n	18006 <gpio_nrfx_write+0x16>

0001802c <gpio_nrfx_read>:
{
   1802c:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   1802e:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   18030:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   18032:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   18034:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   18036:	6825      	ldr	r5, [r4, #0]
    return p_reg->DIR;
   18038:	f8d5 6514 	ldr.w	r6, [r5, #1300]	; 0x514
    return p_reg->IN;
   1803c:	f8d5 4510 	ldr.w	r4, [r5, #1296]	; 0x510
    return p_reg->OUT;
   18040:	f8d5 5504 	ldr.w	r5, [r5, #1284]	; 0x504
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   18044:	4060      	eors	r0, r4
   18046:	406c      	eors	r4, r5
   18048:	4034      	ands	r4, r6
   1804a:	4060      	eors	r0, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1804c:	2901      	cmp	r1, #1
		*value = (port_val & BIT(pin)) ? 1 : 0;
   1804e:	bf1c      	itt	ne
   18050:	40d0      	lsrne	r0, r2
   18052:	f000 0001 	andne.w	r0, r0, #1
   18056:	6018      	str	r0, [r3, #0]
}
   18058:	2000      	movs	r0, #0
   1805a:	bd70      	pop	{r4, r5, r6, pc}

0001805c <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1805c:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
   1805e:	6818      	ldr	r0, [r3, #0]
{
   18060:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   18062:	b158      	cbz	r0, 1807c <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18064:	2400      	movs	r4, #0
   18066:	4281      	cmp	r1, r0
   18068:	d113      	bne.n	18092 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1806a:	6808      	ldr	r0, [r1, #0]
   1806c:	b95c      	cbnz	r4, 18086 <gpio_nrfx_manage_callback+0x2a>
   1806e:	685c      	ldr	r4, [r3, #4]
	list->head = node;
   18070:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   18072:	42a1      	cmp	r1, r4
   18074:	d100      	bne.n	18078 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   18076:	6058      	str	r0, [r3, #4]
	parent->next = child;
   18078:	2000      	movs	r0, #0
   1807a:	6008      	str	r0, [r1, #0]
	if (set) {
   1807c:	b972      	cbnz	r2, 1809c <gpio_nrfx_manage_callback+0x40>
	return 0;
   1807e:	2000      	movs	r0, #0
}
   18080:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18082:	4628      	mov	r0, r5
   18084:	e7ef      	b.n	18066 <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
   18086:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   18088:	6858      	ldr	r0, [r3, #4]
   1808a:	4281      	cmp	r1, r0
	list->tail = node;
   1808c:	bf08      	it	eq
   1808e:	605c      	streq	r4, [r3, #4]
   18090:	e7f2      	b.n	18078 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   18092:	6805      	ldr	r5, [r0, #0]
	return node->next;
   18094:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18096:	2d00      	cmp	r5, #0
   18098:	d1f3      	bne.n	18082 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1809a:	b13a      	cbz	r2, 180ac <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1809c:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   1809e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   180a0:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   180a2:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   180a4:	2800      	cmp	r0, #0
   180a6:	d1ea      	bne.n	1807e <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   180a8:	6059      	str	r1, [r3, #4]
   180aa:	e7e9      	b.n	18080 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   180ac:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   180b0:	e7e6      	b.n	18080 <gpio_nrfx_manage_callback+0x24>

000180b2 <check_level_trigger_pins>:
	struct gpio_nrfx_data *data = get_port_data(port);
   180b2:	6883      	ldr	r3, [r0, #8]
	return port->config->config_info;
   180b4:	6802      	ldr	r2, [r0, #0]
{
   180b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->config->config_info;
   180ba:	f8d2 8008 	ldr.w	r8, [r2, #8]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   180be:	69dd      	ldr	r5, [r3, #28]
	u32_t out = data->int_en & data->pin_int_en;
   180c0:	e9d3 2402 	ldrd	r2, r4, [r3, #8]
   180c4:	4014      	ands	r4, r2
	out &= ~data->trig_edge & ~data->double_edge;
   180c6:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   180ca:	430a      	orrs	r2, r1
   180cc:	ea24 0402 	bic.w	r4, r4, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   180d0:	f8d8 2000 	ldr.w	r2, [r8]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   180d4:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   180d6:	f8d2 2510 	ldr.w	r2, [r2, #1296]	; 0x510
   180da:	405d      	eors	r5, r3
   180dc:	4055      	eors	r5, r2
	u32_t out = pin_states & level_pins;
   180de:	ea24 0505 	bic.w	r5, r4, r5
	u32_t bit = 1U << pin;
   180e2:	2601      	movs	r6, #1
	u32_t pin = 0U;
   180e4:	2700      	movs	r7, #0
	while (level_pins) {
   180e6:	b914      	cbnz	r4, 180ee <check_level_trigger_pins+0x3c>
}
   180e8:	4628      	mov	r0, r5
   180ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   180ee:	4234      	tst	r4, r6
   180f0:	d00a      	beq.n	18108 <check_level_trigger_pins+0x56>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   180f2:	f898 3004 	ldrb.w	r3, [r8, #4]
   180f6:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   180fa:	2100      	movs	r1, #0
   180fc:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   18100:	f7f5 ff8a 	bl	e018 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   18104:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   18108:	3701      	adds	r7, #1
		bit <<= 1;
   1810a:	0076      	lsls	r6, r6, #1
   1810c:	e7eb      	b.n	180e6 <check_level_trigger_pins+0x34>

0001810e <cfg_level_pins>:
{
   1810e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->config->config_info;
   18112:	6803      	ldr	r3, [r0, #0]
	const struct gpio_nrfx_data *data = get_port_data(port);
   18114:	6885      	ldr	r5, [r0, #8]
	return port->config->config_info;
   18116:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   18118:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
   1811c:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
   1811e:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
   18122:	4313      	orrs	r3, r2
   18124:	ea24 0403 	bic.w	r4, r4, r3
	u32_t bit = 1U << pin;
   18128:	f04f 0801 	mov.w	r8, #1
	u32_t pin = 0U;
   1812c:	2700      	movs	r7, #0
	while (level_pins) {
   1812e:	b90c      	cbnz	r4, 18134 <cfg_level_pins+0x26>
}
   18130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   18134:	ea18 0f04 	tst.w	r8, r4
   18138:	d012      	beq.n	18160 <cfg_level_pins+0x52>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   1813a:	692b      	ldr	r3, [r5, #16]
   1813c:	69ea      	ldr	r2, [r5, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1813e:	f896 c004 	ldrb.w	ip, [r6, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   18142:	4053      	eors	r3, r2
   18144:	40fb      	lsrs	r3, r7
		return NRF_GPIO_PIN_SENSE_HIGH;
   18146:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1814a:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1814e:	bf0c      	ite	eq
   18150:	2103      	moveq	r1, #3
   18152:	2102      	movne	r1, #2
   18154:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
   18158:	f7f5 ff5e 	bl	e018 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1815c:	ea24 0408 	bic.w	r4, r4, r8
		++pin;
   18160:	3701      	adds	r7, #1
		bit <<= 1;
   18162:	ea4f 0848 	mov.w	r8, r8, lsl #1
   18166:	e7e2      	b.n	1812e <cfg_level_pins+0x20>

00018168 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   18168:	2901      	cmp	r1, #1
{
   1816a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1816e:	bf18      	it	ne
   18170:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
   18172:	6887      	ldr	r7, [r0, #8]
{
   18174:	4606      	mov	r6, r0
		to_pin   = pin;
   18176:	bf12      	itee	ne
   18178:	4625      	movne	r5, r4
		to_pin   = 31U;
   1817a:	251f      	moveq	r5, #31
		from_pin = 0U;
   1817c:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1817e:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   18182:	42ac      	cmp	r4, r5
   18184:	d902      	bls.n	1818c <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   18186:	2000      	movs	r0, #0
}
   18188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   1818c:	68fb      	ldr	r3, [r7, #12]
   1818e:	fa08 f204 	lsl.w	r2, r8, r4
   18192:	ea23 0302 	bic.w	r3, r3, r2
   18196:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   18198:	4621      	mov	r1, r4
   1819a:	4630      	mov	r0, r6
   1819c:	f7f5 ff72 	bl	e084 <gpiote_pin_int_cfg>
		if (res != 0) {
   181a0:	2800      	cmp	r0, #0
   181a2:	d1f1      	bne.n	18188 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   181a4:	3401      	adds	r4, #1
   181a6:	b2e4      	uxtb	r4, r4
   181a8:	e7eb      	b.n	18182 <gpio_nrfx_pin_disable_callback+0x1a>

000181aa <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   181aa:	2901      	cmp	r1, #1
{
   181ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   181b0:	bf18      	it	ne
   181b2:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
   181b4:	6887      	ldr	r7, [r0, #8]
{
   181b6:	4606      	mov	r6, r0
		to_pin   = pin;
   181b8:	bf12      	itee	ne
   181ba:	4625      	movne	r5, r4
		to_pin   = 31U;
   181bc:	251f      	moveq	r5, #31
		from_pin = 0U;
   181be:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   181c0:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   181c4:	42ac      	cmp	r4, r5
   181c6:	d902      	bls.n	181ce <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   181c8:	2000      	movs	r0, #0
}
   181ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   181ce:	68fb      	ldr	r3, [r7, #12]
   181d0:	fa08 f204 	lsl.w	r2, r8, r4
   181d4:	4313      	orrs	r3, r2
   181d6:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   181d8:	4621      	mov	r1, r4
   181da:	4630      	mov	r0, r6
   181dc:	f7f5 ff52 	bl	e084 <gpiote_pin_int_cfg>
		if (res != 0) {
   181e0:	2800      	cmp	r0, #0
   181e2:	d1f2      	bne.n	181ca <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   181e4:	3401      	adds	r4, #1
   181e6:	b2e4      	uxtb	r4, r4
   181e8:	e7ec      	b.n	181c4 <gpio_nrfx_pin_enable_callback+0x1a>

000181ea <z_obj_validation_check.constprop.0>:
static inline int z_obj_validation_check(struct _k_object *ko,
   181ea:	b570      	push	{r4, r5, r6, lr}
	ret = z_object_validate(ko, otype, init);
   181ec:	2200      	movs	r2, #0
static inline int z_obj_validation_check(struct _k_object *ko,
   181ee:	460d      	mov	r5, r1
	ret = z_object_validate(ko, otype, init);
   181f0:	2113      	movs	r1, #19
static inline int z_obj_validation_check(struct _k_object *ko,
   181f2:	4606      	mov	r6, r0
	ret = z_object_validate(ko, otype, init);
   181f4:	f7f8 ffb2 	bl	1115c <z_object_validate>
	if (ret != 0) {
   181f8:	4604      	mov	r4, r0
   181fa:	b120      	cbz	r0, 18206 <z_obj_validation_check.constprop.0+0x1c>
		z_dump_object_error(ret, obj, ko, otype);
   181fc:	2313      	movs	r3, #19
   181fe:	4632      	mov	r2, r6
   18200:	4629      	mov	r1, r5
   18202:	f7f8 ff5b 	bl	110bc <z_dump_object_error>
#else
	ARG_UNUSED(obj);
#endif

	return ret;
}
   18206:	4620      	mov	r0, r4
   18208:	bd70      	pop	{r4, r5, r6, pc}

0001820a <z_hdlr_gpio_enable_callback>:
					     int access_op, u32_t pin)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->enable_callback == NULL) {
   1820a:	6843      	ldr	r3, [r0, #4]
   1820c:	691b      	ldr	r3, [r3, #16]
   1820e:	b103      	cbz	r3, 18212 <z_hdlr_gpio_enable_callback+0x8>
		return -ENOTSUP;
	}

	return api->enable_callback(port, access_op, pin);
   18210:	4718      	bx	r3

Z_SYSCALL_HANDLER(gpio_enable_callback, port, access_op, pin)
{
	return z_impl_gpio_enable_callback((struct device *)port, access_op,
					  pin);
}
   18212:	f06f 0085 	mvn.w	r0, #133	; 0x85
   18216:	4770      	bx	lr

00018218 <z_hdlr_gpio_disable_callback>:
					      int access_op, u32_t pin)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->disable_callback == NULL) {
   18218:	6843      	ldr	r3, [r0, #4]
   1821a:	695b      	ldr	r3, [r3, #20]
   1821c:	b103      	cbz	r3, 18220 <z_hdlr_gpio_disable_callback+0x8>
		return -ENOTSUP;
	}

	return api->disable_callback(port, access_op, pin);
   1821e:	4718      	bx	r3

Z_SYSCALL_HANDLER(gpio_disable_callback, port, access_op, pin)
{
	return z_impl_gpio_disable_callback((struct device *)port, access_op,
					   pin);
}
   18220:	f06f 0085 	mvn.w	r0, #133	; 0x85
   18224:	4770      	bx	lr

00018226 <z_hdlr_gpio_get_pending_int>:
static inline int z_impl_gpio_get_pending_int(struct device *dev)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)dev->driver_api;

	if (api->get_pending_int == NULL) {
   18226:	6843      	ldr	r3, [r0, #4]
   18228:	699b      	ldr	r3, [r3, #24]
   1822a:	b103      	cbz	r3, 1822e <z_hdlr_gpio_get_pending_int+0x8>
		return -ENOTSUP;
	}

	return api->get_pending_int(dev);
   1822c:	4718      	bx	r3

Z_SYSCALL_HANDLER(gpio_get_pending_int, port)
{
	return z_impl_gpio_get_pending_int((struct device *)port);
}
   1822e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   18232:	4770      	bx	lr

00018234 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   18234:	6882      	ldr	r2, [r0, #8]
{
   18236:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   18238:	e892 0003 	ldmia.w	r2, {r0, r1}
   1823c:	e883 0003 	stmia.w	r3, {r0, r1}
}
   18240:	2000      	movs	r0, #0
   18242:	4770      	bx	lr

00018244 <uart_nrfx_irq_tx_ready_complete>:
{
   18244:	b508      	push	{r3, lr}
	return event_txdrdy_check();
   18246:	f7f6 f961 	bl	e50c <event_txdrdy_check>
}
   1824a:	bd08      	pop	{r3, pc}

0001824c <uart_nrfx_irq_update>:
}
   1824c:	2001      	movs	r0, #1
   1824e:	4770      	bx	lr

00018250 <z_obj_validation_check.constprop.0>:
static inline int z_obj_validation_check(struct _k_object *ko,
   18250:	b570      	push	{r4, r5, r6, lr}
	ret = z_object_validate(ko, otype, init);
   18252:	2200      	movs	r2, #0
static inline int z_obj_validation_check(struct _k_object *ko,
   18254:	460d      	mov	r5, r1
	ret = z_object_validate(ko, otype, init);
   18256:	211e      	movs	r1, #30
static inline int z_obj_validation_check(struct _k_object *ko,
   18258:	4606      	mov	r6, r0
	ret = z_object_validate(ko, otype, init);
   1825a:	f7f8 ff7f 	bl	1115c <z_object_validate>
	if (ret != 0) {
   1825e:	4604      	mov	r4, r0
   18260:	b120      	cbz	r0, 1826c <z_obj_validation_check.constprop.0+0x1c>
		z_dump_object_error(ret, obj, ko, otype);
   18262:	231e      	movs	r3, #30
   18264:	4632      	mov	r2, r6
   18266:	4629      	mov	r1, r5
   18268:	f7f8 ff28 	bl	110bc <z_dump_object_error>
}
   1826c:	4620      	mov	r0, r4
   1826e:	bd70      	pop	{r4, r5, r6, pc}

00018270 <z_hdlr_device_get_binding>:

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER(device_get_binding, name)
{
   18270:	b500      	push	{lr}
   18272:	b08d      	sub	sp, #52	; 0x34
	char name_copy[Z_DEVICE_MAX_NAME_LEN];

	if (z_user_string_copy(name_copy, (char *)name, sizeof(name_copy))
   18274:	4601      	mov	r1, r0
   18276:	2230      	movs	r2, #48	; 0x30
   18278:	4668      	mov	r0, sp
   1827a:	f7f8 ffe1 	bl	11240 <z_user_string_copy>
   1827e:	b928      	cbnz	r0, 1828c <z_hdlr_device_get_binding+0x1c>
	    != 0) {
		return 0;
	}

	return (u32_t)z_impl_device_get_binding(name_copy);
   18280:	4668      	mov	r0, sp
   18282:	f7f6 ff19 	bl	f0b8 <z_impl_device_get_binding>
}
   18286:	b00d      	add	sp, #52	; 0x34
   18288:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   1828c:	2000      	movs	r0, #0
   1828e:	e7fa      	b.n	18286 <z_hdlr_device_get_binding+0x16>

00018290 <device_busy_set>:
	atomic_set_bit((atomic_t *) __device_busy_start,
				 (busy_dev - __device_init_start));
#else
	ARG_UNUSED(busy_dev);
#endif
}
   18290:	4770      	bx	lr

00018292 <device_busy_clear>:
   18292:	4770      	bx	lr

00018294 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   18294:	f7fc be40 	b.w	14f18 <z_clock_idle_exit>

00018298 <k_mem_slab_init>:
{
   18298:	b430      	push	{r4, r5}
	slab->num_used = 0U;
   1829a:	2400      	movs	r4, #0
	slab->block_size = block_size;
   1829c:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
   182a0:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
   182a4:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   182a6:	42a3      	cmp	r3, r4
   182a8:	d104      	bne.n	182b4 <k_mem_slab_init+0x1c>
	list->tail = (sys_dnode_t *)list;
   182aa:	e9c0 0000 	strd	r0, r0, [r0]
}
   182ae:	bc30      	pop	{r4, r5}
	z_object_init(slab);
   182b0:	f000 bcfd 	b.w	18cae <z_object_init>
		*(char **)p = slab->free_list;
   182b4:	6945      	ldr	r5, [r0, #20]
   182b6:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   182b8:	3401      	adds	r4, #1
		slab->free_list = p;
   182ba:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   182bc:	4411      	add	r1, r2
   182be:	e7f2      	b.n	182a6 <k_mem_slab_init+0xe>

000182c0 <k_mem_pool_free>:
	k_mem_pool_free_id(&block->id);
   182c0:	3004      	adds	r0, #4
   182c2:	f7f7 b917 	b.w	f4f4 <k_mem_pool_free_id>

000182c6 <k_mem_pool_malloc>:
{
   182c6:	b507      	push	{r0, r1, r2, lr}
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
   182c8:	2204      	movs	r2, #4
   182ca:	188a      	adds	r2, r1, r2
   182cc:	d204      	bcs.n	182d8 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   182ce:	2300      	movs	r3, #0
   182d0:	4669      	mov	r1, sp
   182d2:	f7f7 f8ab 	bl	f42c <k_mem_pool_alloc>
   182d6:	b118      	cbz	r0, 182e0 <k_mem_pool_malloc+0x1a>
		return NULL;
   182d8:	2000      	movs	r0, #0
}
   182da:	b003      	add	sp, #12
   182dc:	f85d fb04 	ldr.w	pc, [sp], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   182e0:	e9dd 3200 	ldrd	r3, r2, [sp]
   182e4:	601a      	str	r2, [r3, #0]
	return (char *)block.data + sizeof(struct k_mem_block_id);
   182e6:	9800      	ldr	r0, [sp, #0]
   182e8:	3004      	adds	r0, #4
   182ea:	e7f6      	b.n	182da <k_mem_pool_malloc+0x14>

000182ec <k_free>:
	if (ptr != NULL) {
   182ec:	b110      	cbz	r0, 182f4 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   182ee:	3804      	subs	r0, #4
   182f0:	f7f7 b900 	b.w	f4f4 <k_mem_pool_free_id>
}
   182f4:	4770      	bx	lr

000182f6 <k_calloc>:
{
   182f6:	b570      	push	{r4, r5, r6, lr}
	if (__builtin_mul_overflow(nmemb, size, &bounds)) {
   182f8:	fba0 4501 	umull	r4, r5, r0, r1
   182fc:	b935      	cbnz	r5, 1830c <k_calloc+0x16>
	ret = k_malloc(bounds);
   182fe:	4620      	mov	r0, r4
   18300:	f7f7 f924 	bl	f54c <k_malloc>
	if (ret != NULL) {
   18304:	4606      	mov	r6, r0
   18306:	b918      	cbnz	r0, 18310 <k_calloc+0x1a>
}
   18308:	4630      	mov	r0, r6
   1830a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1830c:	2600      	movs	r6, #0
   1830e:	e7fb      	b.n	18308 <k_calloc+0x12>
__ssp_bos_icheck3(memset, void *, int)
   18310:	4622      	mov	r2, r4
   18312:	4629      	mov	r1, r5
   18314:	f7ea f86d 	bl	23f2 <memset>
   18318:	e7f6      	b.n	18308 <k_calloc+0x12>

0001831a <z_obj_validation_check.constprop.3>:
static inline int z_obj_validation_check(struct _k_object *ko,
   1831a:	b570      	push	{r4, r5, r6, lr}
   1831c:	460d      	mov	r5, r1
	ret = z_object_validate(ko, otype, init);
   1831e:	2103      	movs	r1, #3
static inline int z_obj_validation_check(struct _k_object *ko,
   18320:	4606      	mov	r6, r0
	ret = z_object_validate(ko, otype, init);
   18322:	f7f8 ff1b 	bl	1115c <z_object_validate>
	if (ret != 0) {
   18326:	4604      	mov	r4, r0
   18328:	b120      	cbz	r0, 18334 <z_obj_validation_check.constprop.3+0x1a>
		z_dump_object_error(ret, obj, ko, otype);
   1832a:	2303      	movs	r3, #3
   1832c:	4632      	mov	r2, r6
   1832e:	4629      	mov	r1, r5
   18330:	f7f8 fec4 	bl	110bc <z_dump_object_error>
}
   18334:	4620      	mov	r0, r4
   18336:	bd70      	pop	{r4, r5, r6, pc}

00018338 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   18338:	2200      	movs	r2, #0
	mutex->lock_count = 0U;
   1833a:	e9c0 2202 	strd	r2, r2, [r0, #8]
   1833e:	e9c0 0000 	strd	r0, r0, [r0]
	z_object_init(mutex);
   18342:	f000 bcb4 	b.w	18cae <z_object_init>

00018346 <queue_insert>:
{
   18346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1834a:	4604      	mov	r4, r0
   1834c:	460f      	mov	r7, r1
   1834e:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   18350:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   18354:	f04f 0220 	mov.w	r2, #32
   18358:	f3ef 8611 	mrs	r6, BASEPRI
   1835c:	f382 8811 	msr	BASEPRI, r2
   18360:	f3bf 8f6f 	isb	sy
	if (alloc) {
   18364:	b1db      	cbz	r3, 1839e <queue_insert+0x58>
		anode = z_thread_malloc(sizeof(*anode));
   18366:	2008      	movs	r0, #8
   18368:	f7f7 f8f6 	bl	f558 <z_thread_malloc>
		if (anode == NULL) {
   1836c:	b938      	cbnz	r0, 1837e <queue_insert+0x38>
	__asm__ volatile(
   1836e:	f386 8811 	msr	BASEPRI, r6
   18372:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   18376:	f06f 000b 	mvn.w	r0, #11
}
   1837a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->next_and_flags = flags;
   1837e:	2301      	movs	r3, #1
		anode->data = data;
   18380:	f8c0 8004 	str.w	r8, [r0, #4]
   18384:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   18386:	6803      	ldr	r3, [r0, #0]
   18388:	f003 0203 	and.w	r2, r3, #3
   1838c:	b95f      	cbnz	r7, 183a6 <queue_insert+0x60>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1838e:	6823      	ldr	r3, [r4, #0]
   18390:	4313      	orrs	r3, r2
   18392:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   18394:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   18396:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   18398:	b973      	cbnz	r3, 183b8 <queue_insert+0x72>
	list->tail = node;
   1839a:	6060      	str	r0, [r4, #4]
   1839c:	e00c      	b.n	183b8 <queue_insert+0x72>
	node->next_and_flags = flags;
   1839e:	f8c8 3000 	str.w	r3, [r8]
   183a2:	4640      	mov	r0, r8
   183a4:	e7ef      	b.n	18386 <queue_insert+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   183a6:	683b      	ldr	r3, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   183a8:	f033 0303 	bics.w	r3, r3, #3
   183ac:	d114      	bne.n	183d8 <queue_insert+0x92>
	parent->next_and_flags = cur_flags | (unative_t)child;
   183ae:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   183b0:	6862      	ldr	r2, [r4, #4]
   183b2:	b95a      	cbnz	r2, 183cc <queue_insert+0x86>
	list->head = node;
   183b4:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   183b8:	2104      	movs	r1, #4
   183ba:	4628      	mov	r0, r5
   183bc:	f000 fbd7 	bl	18b6e <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   183c0:	4628      	mov	r0, r5
   183c2:	4631      	mov	r1, r6
   183c4:	f000 f8fd 	bl	185c2 <z_reschedule>
	return 0;
   183c8:	2000      	movs	r0, #0
   183ca:	e7d6      	b.n	1837a <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   183cc:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   183ce:	f003 0303 	and.w	r3, r3, #3
   183d2:	4303      	orrs	r3, r0
   183d4:	6013      	str	r3, [r2, #0]
   183d6:	e7e0      	b.n	1839a <queue_insert+0x54>
   183d8:	4313      	orrs	r3, r2
   183da:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   183dc:	683b      	ldr	r3, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   183de:	f003 0303 	and.w	r3, r3, #3
   183e2:	4318      	orrs	r0, r3
   183e4:	6038      	str	r0, [r7, #0]
   183e6:	e7e7      	b.n	183b8 <queue_insert+0x72>

000183e8 <z_obj_validation_check.constprop.8>:
static inline int z_obj_validation_check(struct _k_object *ko,
   183e8:	b570      	push	{r4, r5, r6, lr}
   183ea:	460d      	mov	r5, r1
	ret = z_object_validate(ko, otype, init);
   183ec:	2105      	movs	r1, #5
static inline int z_obj_validation_check(struct _k_object *ko,
   183ee:	4606      	mov	r6, r0
	ret = z_object_validate(ko, otype, init);
   183f0:	f7f8 feb4 	bl	1115c <z_object_validate>
	if (ret != 0) {
   183f4:	4604      	mov	r4, r0
   183f6:	b120      	cbz	r0, 18402 <z_obj_validation_check.constprop.8+0x1a>
		z_dump_object_error(ret, obj, ko, otype);
   183f8:	2305      	movs	r3, #5
   183fa:	4632      	mov	r2, r6
   183fc:	4629      	mov	r1, r5
   183fe:	f7f8 fe5d 	bl	110bc <z_dump_object_error>
}
   18402:	4620      	mov	r0, r4
   18404:	bd70      	pop	{r4, r5, r6, pc}

00018406 <z_queue_node_peek>:
{
   18406:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   18408:	4604      	mov	r4, r0
   1840a:	b130      	cbz	r0, 1841a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1840c:	6802      	ldr	r2, [r0, #0]
   1840e:	0793      	lsls	r3, r2, #30
   18410:	d003      	beq.n	1841a <z_queue_node_peek+0x14>
		ret = anode->data;
   18412:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   18414:	b109      	cbz	r1, 1841a <z_queue_node_peek+0x14>
			k_free(anode);
   18416:	f7ff ff69 	bl	182ec <k_free>
}
   1841a:	4620      	mov	r0, r4
   1841c:	bd10      	pop	{r4, pc}

0001841e <z_impl_k_queue_init>:
	list->head = NULL;
   1841e:	2200      	movs	r2, #0
	list->tail = NULL;
   18420:	e9c0 2200 	strd	r2, r2, [r0]
	sys_dlist_init(&queue->poll_events);
   18424:	f100 0208 	add.w	r2, r0, #8
   18428:	e9c0 2202 	strd	r2, r2, [r0, #8]
	z_object_init(queue);
   1842c:	f000 bc3f 	b.w	18cae <z_object_init>

00018430 <z_impl_k_queue_cancel_wait>:
{
   18430:	b538      	push	{r3, r4, r5, lr}
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   18432:	f100 0408 	add.w	r4, r0, #8
	__asm__ volatile(
   18436:	f04f 0320 	mov.w	r3, #32
   1843a:	f3ef 8511 	mrs	r5, BASEPRI
   1843e:	f383 8811 	msr	BASEPRI, r3
   18442:	f3bf 8f6f 	isb	sy
	z_handle_obj_poll_events(&queue->poll_events, state);
   18446:	2108      	movs	r1, #8
   18448:	4620      	mov	r0, r4
   1844a:	f000 fb90 	bl	18b6e <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1844e:	4629      	mov	r1, r5
   18450:	4620      	mov	r0, r4
}
   18452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&queue->lock, key);
   18456:	f000 b8b4 	b.w	185c2 <z_reschedule>

0001845a <k_queue_append>:
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   1845a:	460a      	mov	r2, r1
   1845c:	2300      	movs	r3, #0
   1845e:	6841      	ldr	r1, [r0, #4]
   18460:	f7ff bf71 	b.w	18346 <queue_insert>

00018464 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false);
   18464:	2300      	movs	r3, #0
   18466:	460a      	mov	r2, r1
   18468:	4619      	mov	r1, r3
   1846a:	f7ff bf6c 	b.w	18346 <queue_insert>

0001846e <z_impl_k_queue_alloc_append>:
	return queue_insert(queue, sys_sflist_peek_tail(&queue->data_q), data,
   1846e:	460a      	mov	r2, r1
   18470:	2301      	movs	r3, #1
   18472:	6841      	ldr	r1, [r0, #4]
   18474:	f7ff bf67 	b.w	18346 <queue_insert>

00018478 <z_impl_k_queue_alloc_prepend>:
	return queue_insert(queue, NULL, data, true);
   18478:	460a      	mov	r2, r1
   1847a:	2301      	movs	r3, #1
   1847c:	2100      	movs	r1, #0
   1847e:	f7ff bf62 	b.w	18346 <queue_insert>

00018482 <z_impl_k_queue_get>:
{
   18482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18486:	4604      	mov	r4, r0
   18488:	b086      	sub	sp, #24
   1848a:	460d      	mov	r5, r1
   1848c:	f04f 0320 	mov.w	r3, #32
   18490:	f3ef 8711 	mrs	r7, BASEPRI
   18494:	f383 8811 	msr	BASEPRI, r3
   18498:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   1849c:	6800      	ldr	r0, [r0, #0]
	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1849e:	b188      	cbz	r0, 184c4 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   184a0:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   184a2:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   184a4:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   184a8:	4290      	cmp	r0, r2
	list->head = node;
   184aa:	6023      	str	r3, [r4, #0]
	list->tail = node;
   184ac:	bf08      	it	eq
   184ae:	6063      	streq	r3, [r4, #4]
		data = z_queue_node_peek(node, true);
   184b0:	2101      	movs	r1, #1
   184b2:	f7ff ffa8 	bl	18406 <z_queue_node_peek>
	__asm__ volatile(
   184b6:	f387 8811 	msr	BASEPRI, r7
   184ba:	f3bf 8f6f 	isb	sy
}
   184be:	b006      	add	sp, #24
   184c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   184c4:	2900      	cmp	r1, #0
   184c6:	d0f6      	beq.n	184b6 <z_impl_k_queue_get+0x34>
   184c8:	f387 8811 	msr	BASEPRI, r7
   184cc:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   184d0:	2104      	movs	r1, #4
   184d2:	4602      	mov	r2, r0
   184d4:	4623      	mov	r3, r4
   184d6:	eb0d 0001 	add.w	r0, sp, r1
   184da:	f7f8 facb 	bl	10a74 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   184de:	1c6a      	adds	r2, r5, #1
   184e0:	d002      	beq.n	184e8 <z_impl_k_queue_get+0x66>
   184e2:	f000 fa9f 	bl	18a24 <z_impl_k_uptime_get>
   184e6:	4606      	mov	r6, r0
{
   184e8:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   184ea:	9b04      	ldr	r3, [sp, #16]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
   184ec:	1bea      	subs	r2, r5, r7
   184ee:	f36f 3310 	bfc	r3, #12, #5
   184f2:	2101      	movs	r1, #1
   184f4:	a801      	add	r0, sp, #4
   184f6:	9304      	str	r3, [sp, #16]
   184f8:	f7f8 fad0 	bl	10a9c <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   184fc:	b118      	cbz	r0, 18506 <z_impl_k_queue_get+0x84>
   184fe:	300b      	adds	r0, #11
   18500:	d001      	beq.n	18506 <z_impl_k_queue_get+0x84>
			return NULL;
   18502:	2000      	movs	r0, #0
   18504:	e7db      	b.n	184be <z_impl_k_queue_get+0x3c>
	__asm__ volatile(
   18506:	f04f 0320 	mov.w	r3, #32
   1850a:	f3ef 8811 	mrs	r8, BASEPRI
   1850e:	f383 8811 	msr	BASEPRI, r3
   18512:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   18516:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   18518:	b138      	cbz	r0, 1852a <z_impl_k_queue_get+0xa8>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1851a:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1851c:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1851e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   18522:	4290      	cmp	r0, r2
	list->head = node;
   18524:	6023      	str	r3, [r4, #0]
	list->tail = node;
   18526:	bf08      	it	eq
   18528:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   1852a:	2101      	movs	r1, #1
   1852c:	f7ff ff6b 	bl	18406 <z_queue_node_peek>
	__asm__ volatile(
   18530:	f388 8811 	msr	BASEPRI, r8
   18534:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   18538:	2800      	cmp	r0, #0
   1853a:	d1c0      	bne.n	184be <z_impl_k_queue_get+0x3c>
   1853c:	1c6b      	adds	r3, r5, #1
   1853e:	d0d4      	beq.n	184ea <z_impl_k_queue_get+0x68>
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   18540:	f000 fa70 	bl	18a24 <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   18544:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   18546:	42bd      	cmp	r5, r7
   18548:	dacf      	bge.n	184ea <z_impl_k_queue_get+0x68>
   1854a:	e7da      	b.n	18502 <z_impl_k_queue_get+0x80>

0001854c <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1854c:	7b43      	ldrb	r3, [r0, #13]
   1854e:	06db      	lsls	r3, r3, #27
   18550:	bf03      	ittte	eq
   18552:	6980      	ldreq	r0, [r0, #24]
   18554:	fab0 f080 	clzeq	r0, r0
   18558:	0940      	lsreq	r0, r0, #5
   1855a:	2000      	movne	r0, #0
}
   1855c:	4770      	bx	lr

0001855e <z_obj_validation_check.constprop.18>:
static inline int z_obj_validation_check(struct _k_object *ko,
   1855e:	b570      	push	{r4, r5, r6, lr}
	ret = z_object_validate(ko, otype, init);
   18560:	2200      	movs	r2, #0
static inline int z_obj_validation_check(struct _k_object *ko,
   18562:	460d      	mov	r5, r1
	ret = z_object_validate(ko, otype, init);
   18564:	2109      	movs	r1, #9
static inline int z_obj_validation_check(struct _k_object *ko,
   18566:	4606      	mov	r6, r0
	ret = z_object_validate(ko, otype, init);
   18568:	f7f8 fdf8 	bl	1115c <z_object_validate>
	if (ret != 0) {
   1856c:	4604      	mov	r4, r0
   1856e:	b120      	cbz	r0, 1857a <z_obj_validation_check.constprop.18+0x1c>
		z_dump_object_error(ret, obj, ko, otype);
   18570:	2309      	movs	r3, #9
   18572:	4632      	mov	r2, r6
   18574:	4629      	mov	r1, r5
   18576:	f7f8 fda1 	bl	110bc <z_dump_object_error>
}
   1857a:	4620      	mov	r0, r4
   1857c:	bd70      	pop	{r4, r5, r6, pc}

0001857e <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   1857e:	f990 000e 	ldrsb.w	r0, [r0, #14]
   18582:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   18586:	4298      	cmp	r0, r3
   18588:	bfac      	ite	ge
   1858a:	2000      	movge	r0, #0
   1858c:	2001      	movlt	r0, #1
   1858e:	4770      	bx	lr

00018590 <z_unpend_thread_no_timeout>:
{
   18590:	b538      	push	{r3, r4, r5, lr}
   18592:	4604      	mov	r4, r0
	__asm__ volatile(
   18594:	f04f 0320 	mov.w	r3, #32
   18598:	f3ef 8511 	mrs	r5, BASEPRI
   1859c:	f383 8811 	msr	BASEPRI, r3
   185a0:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   185a4:	4601      	mov	r1, r0
   185a6:	6880      	ldr	r0, [r0, #8]
   185a8:	f7f7 fa36 	bl	fa18 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   185ac:	7b63      	ldrb	r3, [r4, #13]
   185ae:	f023 0302 	bic.w	r3, r3, #2
   185b2:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   185b4:	f385 8811 	msr	BASEPRI, r5
   185b8:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   185bc:	2300      	movs	r3, #0
   185be:	60a3      	str	r3, [r4, #8]
}
   185c0:	bd38      	pop	{r3, r4, r5, pc}

000185c2 <z_reschedule>:
{
   185c2:	b508      	push	{r3, lr}
	if (resched()) {
   185c4:	f7f7 f9c2 	bl	f94c <resched>
   185c8:	b120      	cbz	r0, 185d4 <z_reschedule+0x12>
   185ca:	4608      	mov	r0, r1
}
   185cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   185d0:	f7f2 bac4 	b.w	ab5c <__swap>
   185d4:	f381 8811 	msr	BASEPRI, r1
   185d8:	f3bf 8f6f 	isb	sy
   185dc:	bd08      	pop	{r3, pc}

000185de <z_reschedule_irqlock>:
{
   185de:	b508      	push	{r3, lr}
   185e0:	4602      	mov	r2, r0
	if (resched()) {
   185e2:	f7f7 f9b3 	bl	f94c <resched>
   185e6:	b120      	cbz	r0, 185f2 <z_reschedule_irqlock+0x14>
   185e8:	4610      	mov	r0, r2
}
   185ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   185ee:	f7f2 bab5 	b.w	ab5c <__swap>
   185f2:	f382 8811 	msr	BASEPRI, r2
   185f6:	f3bf 8f6f 	isb	sy
   185fa:	bd08      	pop	{r3, pc}

000185fc <z_reschedule_unlocked>:
	__asm__ volatile(
   185fc:	f04f 0320 	mov.w	r3, #32
   18600:	f3ef 8011 	mrs	r0, BASEPRI
   18604:	f383 8811 	msr	BASEPRI, r3
   18608:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
   1860c:	f7ff bfe7 	b.w	185de <z_reschedule_irqlock>

00018610 <z_unpend_thread>:
{
   18610:	b538      	push	{r3, r4, r5, lr}
   18612:	4604      	mov	r4, r0
   18614:	f04f 0320 	mov.w	r3, #32
   18618:	f3ef 8511 	mrs	r5, BASEPRI
   1861c:	f383 8811 	msr	BASEPRI, r3
   18620:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   18624:	4601      	mov	r1, r0
   18626:	6880      	ldr	r0, [r0, #8]
   18628:	f7f7 f9f6 	bl	fa18 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1862c:	7b63      	ldrb	r3, [r4, #13]
   1862e:	f023 0302 	bic.w	r3, r3, #2
   18632:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   18634:	f385 8811 	msr	BASEPRI, r5
   18638:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1863c:	2300      	movs	r3, #0
   1863e:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
   18640:	f104 0018 	add.w	r0, r4, #24
}
   18644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18648:	f000 b9a8 	b.w	1899c <z_abort_timeout>

0001864c <z_priq_dumb_best>:
	return list->head == list;
   1864c:	6803      	ldr	r3, [r0, #0]
}
   1864e:	4298      	cmp	r0, r3
   18650:	bf14      	ite	ne
   18652:	4618      	movne	r0, r3
   18654:	2000      	moveq	r0, #0
   18656:	4770      	bx	lr

00018658 <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
   18658:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   1865c:	b570      	push	{r4, r5, r6, lr}
   1865e:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   18660:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
   18664:	b1cb      	cbz	r3, 1869a <z_thread_timeout+0x42>
	__asm__ volatile(
   18666:	f04f 0320 	mov.w	r3, #32
   1866a:	f3ef 8611 	mrs	r6, BASEPRI
   1866e:	f383 8811 	msr	BASEPRI, r3
   18672:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   18676:	4629      	mov	r1, r5
   18678:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1867c:	f7f7 f9cc 	bl	fa18 <z_priq_dumb_remove>
   18680:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   18684:	f023 0302 	bic.w	r3, r3, #2
   18688:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
   1868c:	f386 8811 	msr	BASEPRI, r6
   18690:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   18694:	2300      	movs	r3, #0
   18696:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1869a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1869e:	f023 0314 	bic.w	r3, r3, #20
   186a2:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   186a6:	4628      	mov	r0, r5
   186a8:	f7ff ff50 	bl	1854c <z_is_thread_ready>
   186ac:	b120      	cbz	r0, 186b8 <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
   186ae:	4628      	mov	r0, r5
}
   186b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   186b4:	f7f7 ba00 	b.w	fab8 <z_add_thread_to_ready_q>
   186b8:	bd70      	pop	{r4, r5, r6, pc}

000186ba <z_unpend_first_thread>:
{
   186ba:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   186bc:	f04f 0320 	mov.w	r3, #32
   186c0:	f3ef 8211 	mrs	r2, BASEPRI
   186c4:	f383 8811 	msr	BASEPRI, r3
   186c8:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   186cc:	f7ff ffbe 	bl	1864c <z_priq_dumb_best>
   186d0:	4604      	mov	r4, r0
	__asm__ volatile(
   186d2:	f382 8811 	msr	BASEPRI, r2
   186d6:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   186da:	b1c8      	cbz	r0, 18710 <z_unpend_first_thread+0x56>
	__asm__ volatile(
   186dc:	f04f 0320 	mov.w	r3, #32
   186e0:	f3ef 8511 	mrs	r5, BASEPRI
   186e4:	f383 8811 	msr	BASEPRI, r3
   186e8:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   186ec:	4601      	mov	r1, r0
   186ee:	6880      	ldr	r0, [r0, #8]
   186f0:	f7f7 f992 	bl	fa18 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   186f4:	7b63      	ldrb	r3, [r4, #13]
   186f6:	f023 0302 	bic.w	r3, r3, #2
   186fa:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   186fc:	f385 8811 	msr	BASEPRI, r5
   18700:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   18704:	2300      	movs	r3, #0
   18706:	60a3      	str	r3, [r4, #8]
   18708:	f104 0018 	add.w	r0, r4, #24
   1870c:	f000 f946 	bl	1899c <z_abort_timeout>
}
   18710:	4620      	mov	r0, r4
   18712:	bd38      	pop	{r3, r4, r5, pc}

00018714 <z_unpend_all>:
{
   18714:	b570      	push	{r4, r5, r6, lr}
   18716:	4606      	mov	r6, r0
	int need_sched = 0;
   18718:	2500      	movs	r5, #0
   1871a:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1871c:	42a6      	cmp	r6, r4
   1871e:	d000      	beq.n	18722 <z_unpend_all+0xe>
	while ((th = z_waitq_head(wait_q)) != NULL) {
   18720:	b90c      	cbnz	r4, 18726 <z_unpend_all+0x12>
}
   18722:	4628      	mov	r0, r5
   18724:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(th);
   18726:	4620      	mov	r0, r4
   18728:	f7ff ff72 	bl	18610 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   1872c:	4620      	mov	r0, r4
   1872e:	f7ff ff0d 	bl	1854c <z_is_thread_ready>
		need_sched = 1;
   18732:	2501      	movs	r5, #1
   18734:	2800      	cmp	r0, #0
   18736:	d0f0      	beq.n	1871a <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   18738:	4620      	mov	r0, r4
   1873a:	f7f7 f9bd 	bl	fab8 <z_add_thread_to_ready_q>
   1873e:	e7ec      	b.n	1871a <z_unpend_all+0x6>

00018740 <z_hdlr_k_yield>:
Z_SYSCALL_HANDLER0_SIMPLE_VOID(k_yield);
   18740:	b508      	push	{r3, lr}
   18742:	f7f7 fbab 	bl	fe9c <z_impl_k_yield>
   18746:	2000      	movs	r0, #0
   18748:	bd08      	pop	{r3, pc}

0001874a <z_hdlr_k_sleep>:
	return z_impl_k_sleep(duration);
   1874a:	f7f7 bbf1 	b.w	ff30 <z_impl_k_sleep>

0001874e <z_hdlr_k_is_preempt_thread>:

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE(k_is_preempt_thread);
   1874e:	f7f7 bc87 	b.w	10060 <z_impl_k_is_preempt_thread>

00018752 <z_obj_validation_check.constprop.4>:
static inline int z_obj_validation_check(struct _k_object *ko,
   18752:	b570      	push	{r4, r5, r6, lr}
   18754:	460d      	mov	r5, r1
	ret = z_object_validate(ko, otype, init);
   18756:	2107      	movs	r1, #7
static inline int z_obj_validation_check(struct _k_object *ko,
   18758:	4606      	mov	r6, r0
	ret = z_object_validate(ko, otype, init);
   1875a:	f7f8 fcff 	bl	1115c <z_object_validate>
	if (ret != 0) {
   1875e:	4604      	mov	r4, r0
   18760:	b120      	cbz	r0, 1876c <z_obj_validation_check.constprop.4+0x1a>
		z_dump_object_error(ret, obj, ko, otype);
   18762:	2307      	movs	r3, #7
   18764:	4632      	mov	r2, r6
   18766:	4629      	mov	r1, r5
   18768:	f7f8 fca8 	bl	110bc <z_dump_object_error>
}
   1876c:	4620      	mov	r0, r4
   1876e:	bd70      	pop	{r4, r5, r6, pc}

00018770 <z_impl_k_sem_init>:
	sem->limit = limit;
   18770:	e9c0 1202 	strd	r1, r2, [r0, #8]
	sys_dlist_init(&sem->poll_events);
   18774:	f100 0210 	add.w	r2, r0, #16
	list->tail = (sys_dnode_t *)list;
   18778:	e9c0 0000 	strd	r0, r0, [r0]
   1877c:	e9c0 2204 	strd	r2, r2, [r0, #16]
	z_object_init(sem);
   18780:	f000 ba95 	b.w	18cae <z_object_init>

00018784 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   18784:	7b43      	ldrb	r3, [r0, #13]
   18786:	06db      	lsls	r3, r3, #27
   18788:	bf03      	ittte	eq
   1878a:	6980      	ldreq	r0, [r0, #24]
   1878c:	fab0 f080 	clzeq	r0, r0
   18790:	0940      	lsreq	r0, r0, #5
   18792:	2000      	movne	r0, #0
}
   18794:	4770      	bx	lr

00018796 <z_obj_validation_check>:
{
   18796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18798:	4614      	mov	r4, r2
   1879a:	460e      	mov	r6, r1
	ret = z_object_validate(ko, otype, init);
   1879c:	461a      	mov	r2, r3
   1879e:	4621      	mov	r1, r4
{
   187a0:	4607      	mov	r7, r0
	ret = z_object_validate(ko, otype, init);
   187a2:	f7f8 fcdb 	bl	1115c <z_object_validate>
	if (ret != 0) {
   187a6:	4605      	mov	r5, r0
   187a8:	b120      	cbz	r0, 187b4 <z_obj_validation_check+0x1e>
		z_dump_object_error(ret, obj, ko, otype);
   187aa:	4623      	mov	r3, r4
   187ac:	463a      	mov	r2, r7
   187ae:	4631      	mov	r1, r6
   187b0:	f7f8 fc84 	bl	110bc <z_dump_object_error>
}
   187b4:	4628      	mov	r0, r5
   187b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000187b8 <z_hdlr_k_busy_wait>:
{
   187b8:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   187ba:	f7f7 fd7b 	bl	102b4 <z_impl_k_busy_wait>
}
   187be:	2000      	movs	r0, #0
   187c0:	bd08      	pop	{r3, pc}

000187c2 <z_impl_k_thread_name_set>:
}
   187c2:	f06f 0057 	mvn.w	r0, #87	; 0x57
   187c6:	4770      	bx	lr

000187c8 <z_hdlr_k_thread_name_set>:
}
   187c8:	f06f 0057 	mvn.w	r0, #87	; 0x57
   187cc:	4770      	bx	lr

000187ce <z_hdlr_k_thread_name_copy>:
   187ce:	f06f 0057 	mvn.w	r0, #87	; 0x57
   187d2:	4770      	bx	lr

000187d4 <z_impl_k_thread_create>:
{
   187d4:	b570      	push	{r4, r5, r6, lr}
   187d6:	b086      	sub	sp, #24
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   187d8:	2600      	movs	r6, #0
   187da:	9605      	str	r6, [sp, #20]
   187dc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   187de:	9604      	str	r6, [sp, #16]
   187e0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   187e2:	9603      	str	r6, [sp, #12]
   187e4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   187e6:	9602      	str	r6, [sp, #8]
   187e8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   187ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   187ec:	9601      	str	r6, [sp, #4]
   187ee:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   187f0:	9600      	str	r6, [sp, #0]
{
   187f2:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   187f4:	f7f7 fdd2 	bl	1039c <z_setup_new_thread>
	if (delay != K_FOREVER) {
   187f8:	1c6b      	adds	r3, r5, #1
   187fa:	d003      	beq.n	18804 <z_impl_k_thread_create+0x30>
		schedule_new_thread(new_thread, delay);
   187fc:	4629      	mov	r1, r5
   187fe:	4620      	mov	r0, r4
   18800:	f7f7 fd90 	bl	10324 <schedule_new_thread>
}
   18804:	4620      	mov	r0, r4
   18806:	b006      	add	sp, #24
   18808:	bd70      	pop	{r4, r5, r6, pc}

0001880a <z_thread_single_suspend>:
{
   1880a:	b510      	push	{r4, lr}
   1880c:	4604      	mov	r4, r0
	if (z_is_thread_ready(thread)) {
   1880e:	f7ff ffb9 	bl	18784 <z_is_thread_ready>
   18812:	b110      	cbz	r0, 1881a <z_thread_single_suspend+0x10>
		z_remove_thread_from_ready_q(thread);
   18814:	4620      	mov	r0, r4
   18816:	f7f7 f9fd 	bl	fc14 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1881a:	7b63      	ldrb	r3, [r4, #13]
   1881c:	f043 0310 	orr.w	r3, r3, #16
   18820:	7363      	strb	r3, [r4, #13]
}
   18822:	bd10      	pop	{r4, pc}

00018824 <z_thread_single_resume>:
{
   18824:	b508      	push	{r3, lr}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   18826:	7b43      	ldrb	r3, [r0, #13]
   18828:	f023 0310 	bic.w	r3, r3, #16
   1882c:	7343      	strb	r3, [r0, #13]
   1882e:	4602      	mov	r2, r0
	if (z_is_thread_ready(thread)) {
   18830:	f7ff ffa8 	bl	18784 <z_is_thread_ready>
   18834:	b120      	cbz	r0, 18840 <z_thread_single_resume+0x1c>
		z_add_thread_to_ready_q(thread);
   18836:	4610      	mov	r0, r2
}
   18838:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1883c:	f7f7 b93c 	b.w	fab8 <z_add_thread_to_ready_q>
   18840:	bd08      	pop	{r3, pc}

00018842 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   18842:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   18844:	b510      	push	{r4, lr}
   18846:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   18848:	b103      	cbz	r3, 1884c <z_thread_single_abort+0xa>
		thread->fn_abort();
   1884a:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
   1884c:	4620      	mov	r0, r4
   1884e:	f7ff ff99 	bl	18784 <z_is_thread_ready>
   18852:	b188      	cbz	r0, 18878 <z_thread_single_abort+0x36>
		z_remove_thread_from_ready_q(thread);
   18854:	4620      	mov	r0, r4
   18856:	f7f7 f9dd 	bl	fc14 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
   1885a:	7b63      	ldrb	r3, [r4, #13]
	z_object_uninit(thread->stack_obj);
   1885c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
	thread->base.thread_state |= _THREAD_DEAD;
   1885e:	f043 0308 	orr.w	r3, r3, #8
   18862:	7363      	strb	r3, [r4, #13]
	z_object_uninit(thread->stack_obj);
   18864:	f000 fa3e 	bl	18ce4 <z_object_uninit>
	z_object_uninit(thread);
   18868:	4620      	mov	r0, r4
   1886a:	f000 fa3b 	bl	18ce4 <z_object_uninit>
	z_thread_perms_all_clear(thread);
   1886e:	4620      	mov	r0, r4
}
   18870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_thread_perms_all_clear(thread);
   18874:	f7f8 bc14 	b.w	110a0 <z_thread_perms_all_clear>
		if (z_is_thread_pending(thread)) {
   18878:	7b63      	ldrb	r3, [r4, #13]
   1887a:	079b      	lsls	r3, r3, #30
   1887c:	d502      	bpl.n	18884 <z_thread_single_abort+0x42>
			z_unpend_thread_no_timeout(thread);
   1887e:	4620      	mov	r0, r4
   18880:	f7ff fe86 	bl	18590 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
   18884:	69a3      	ldr	r3, [r4, #24]
   18886:	2b00      	cmp	r3, #0
   18888:	d0e7      	beq.n	1885a <z_thread_single_abort+0x18>
   1888a:	f104 0018 	add.w	r0, r4, #24
   1888e:	f000 f885 	bl	1899c <z_abort_timeout>
   18892:	e7e2      	b.n	1885a <z_thread_single_abort+0x18>

00018894 <z_init_thread_base>:
	thread_base->user_options = (u8_t)options;
   18894:	7303      	strb	r3, [r0, #12]
	thread_base->sched_locked = 0U;
   18896:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   18898:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   1889a:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   1889c:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
   1889e:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
   188a2:	4770      	bx	lr

000188a4 <k_work_submit_to_queue>:
{
   188a4:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   188a6:	f101 0308 	add.w	r3, r1, #8
   188aa:	f3bf 8f5b 	dmb	ish
   188ae:	e853 2f00 	ldrex	r2, [r3]
   188b2:	f042 0c01 	orr.w	ip, r2, #1
   188b6:	e843 ce00 	strex	lr, ip, [r3]
   188ba:	f1be 0f00 	cmp.w	lr, #0
   188be:	d1f6      	bne.n	188ae <k_work_submit_to_queue+0xa>
   188c0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   188c4:	07d3      	lsls	r3, r2, #31
   188c6:	d403      	bmi.n	188d0 <k_work_submit_to_queue+0x2c>
}
   188c8:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   188cc:	f7ff bdc5 	b.w	1845a <k_queue_append>
}
   188d0:	f85d fb04 	ldr.w	pc, [sp], #4

000188d4 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   188d4:	f1a0 010c 	sub.w	r1, r0, #12
   188d8:	6900      	ldr	r0, [r0, #16]
   188da:	f7ff bfe3 	b.w	188a4 <k_work_submit_to_queue>

000188de <work_cancel>:
{
   188de:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   188e0:	f3bf 8f5b 	dmb	ish
   188e4:	6883      	ldr	r3, [r0, #8]
   188e6:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   188ea:	07db      	lsls	r3, r3, #31
{
   188ec:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   188ee:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
   188f2:	d532      	bpl.n	1895a <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   188f4:	69c2      	ldr	r2, [r0, #28]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   188f6:	6813      	ldr	r3, [r2, #0]
   188f8:	2100      	movs	r1, #0
   188fa:	b913      	cbnz	r3, 18902 <work_cancel+0x24>
			return -EINVAL;
   188fc:	f06f 0015 	mvn.w	r0, #21
}
   18900:	bd70      	pop	{r4, r5, r6, pc}
   18902:	429c      	cmp	r4, r3
   18904:	d124      	bne.n	18950 <work_cancel+0x72>
Z_GENLIST_REMOVE(sflist, sfnode)
   18906:	6823      	ldr	r3, [r4, #0]
   18908:	6856      	ldr	r6, [r2, #4]
   1890a:	f023 0003 	bic.w	r0, r3, #3
   1890e:	b9b1      	cbnz	r1, 1893e <work_cancel+0x60>
   18910:	42b4      	cmp	r4, r6
	list->head = node;
   18912:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   18914:	d100      	bne.n	18918 <work_cancel+0x3a>
	list->tail = node;
   18916:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   18918:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1891a:	f003 0303 	and.w	r3, r3, #3
   1891e:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   18920:	2000      	movs	r0, #0
   18922:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18924:	f3bf 8f5b 	dmb	ish
   18928:	e855 3f00 	ldrex	r3, [r5]
   1892c:	f023 0301 	bic.w	r3, r3, #1
   18930:	e845 3200 	strex	r2, r3, [r5]
   18934:	2a00      	cmp	r2, #0
   18936:	d1f7      	bne.n	18928 <work_cancel+0x4a>
   18938:	f3bf 8f5b 	dmb	ish
   1893c:	e7e0      	b.n	18900 <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1893e:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   18940:	f003 0303 	and.w	r3, r3, #3
   18944:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   18946:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   18948:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1894a:	bf08      	it	eq
   1894c:	6051      	streq	r1, [r2, #4]
   1894e:	e7e3      	b.n	18918 <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   18950:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   18952:	4619      	mov	r1, r3
   18954:	f020 0303 	bic.w	r3, r0, #3
   18958:	e7cf      	b.n	188fa <work_cancel+0x1c>
		(void)z_abort_timeout(&work->timeout);
   1895a:	300c      	adds	r0, #12
   1895c:	f000 f81e 	bl	1899c <z_abort_timeout>
   18960:	e7de      	b.n	18920 <work_cancel+0x42>

00018962 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   18962:	2300      	movs	r3, #0
   18964:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   18968:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   1896c:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   1896e:	61c3      	str	r3, [r0, #28]
}
   18970:	4770      	bx	lr

00018972 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
	if (!work->work_q) {
   18972:	69c3      	ldr	r3, [r0, #28]
{
   18974:	b510      	push	{r4, lr}
	if (!work->work_q) {
   18976:	b173      	cbz	r3, 18996 <k_delayed_work_cancel+0x24>
	__asm__ volatile(
   18978:	f04f 0320 	mov.w	r3, #32
   1897c:	f3ef 8411 	mrs	r4, BASEPRI
   18980:	f383 8811 	msr	BASEPRI, r3
   18984:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   18988:	f7ff ffa9 	bl	188de <work_cancel>
	__asm__ volatile(
   1898c:	f384 8811 	msr	BASEPRI, r4
   18990:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   18994:	bd10      	pop	{r4, pc}
		return -EINVAL;
   18996:	f06f 0015 	mvn.w	r0, #21
   1899a:	e7fb      	b.n	18994 <k_delayed_work_cancel+0x22>

0001899c <z_abort_timeout>:
{
   1899c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1899e:	f04f 0220 	mov.w	r2, #32
   189a2:	f3ef 8411 	mrs	r4, BASEPRI
   189a6:	f382 8811 	msr	BASEPRI, r2
   189aa:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   189ae:	6803      	ldr	r3, [r0, #0]
   189b0:	b13b      	cbz	r3, 189c2 <z_abort_timeout+0x26>
			remove_timeout(to);
   189b2:	f7f7 ff23 	bl	107fc <remove_timeout>
			ret = 0;
   189b6:	2000      	movs	r0, #0
	__asm__ volatile(
   189b8:	f384 8811 	msr	BASEPRI, r4
   189bc:	f3bf 8f6f 	isb	sy
}
   189c0:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   189c2:	f06f 0015 	mvn.w	r0, #21
   189c6:	e7f7      	b.n	189b8 <z_abort_timeout+0x1c>

000189c8 <z_get_next_timeout_expiry>:
{
   189c8:	b510      	push	{r4, lr}
	__asm__ volatile(
   189ca:	f04f 0320 	mov.w	r3, #32
   189ce:	f3ef 8411 	mrs	r4, BASEPRI
   189d2:	f383 8811 	msr	BASEPRI, r3
   189d6:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   189da:	f7f7 ff23 	bl	10824 <next_timeout>
	__asm__ volatile(
   189de:	f384 8811 	msr	BASEPRI, r4
   189e2:	f3bf 8f6f 	isb	sy
}
   189e6:	bd10      	pop	{r4, pc}

000189e8 <z_set_timeout_expiry>:
{
   189e8:	b570      	push	{r4, r5, r6, lr}
   189ea:	4604      	mov	r4, r0
   189ec:	460e      	mov	r6, r1
	__asm__ volatile(
   189ee:	f04f 0320 	mov.w	r3, #32
   189f2:	f3ef 8511 	mrs	r5, BASEPRI
   189f6:	f383 8811 	msr	BASEPRI, r3
   189fa:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   189fe:	f7f7 ff11 	bl	10824 <next_timeout>
		if (sooner && !imminent) {
   18a02:	42a0      	cmp	r0, r4
   18a04:	dd05      	ble.n	18a12 <z_set_timeout_expiry+0x2a>
   18a06:	2801      	cmp	r0, #1
   18a08:	dd03      	ble.n	18a12 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   18a0a:	4631      	mov	r1, r6
   18a0c:	4620      	mov	r0, r4
   18a0e:	f7f2 f817 	bl	aa40 <z_clock_set_timeout>
	__asm__ volatile(
   18a12:	f385 8811 	msr	BASEPRI, r5
   18a16:	f3bf 8f6f 	isb	sy
}
   18a1a:	bd70      	pop	{r4, r5, r6, pc}

00018a1c <z_tick_get_32>:
{
   18a1c:	b508      	push	{r3, lr}
	return (u32_t)z_tick_get();
   18a1e:	f7f7 ffeb 	bl	109f8 <z_tick_get>
}
   18a22:	bd08      	pop	{r3, pc}

00018a24 <z_impl_k_uptime_get>:
{
   18a24:	b538      	push	{r3, r4, r5, lr}
	return __ticks_to_ms(z_tick_get());
   18a26:	f7f7 ffe7 	bl	109f8 <z_tick_get>
	return (u64_t)ticks * MSEC_PER_SEC / (u64_t)CONFIG_SYS_CLOCK_TICKS_PER_SEC;
   18a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   18a2e:	fba0 4503 	umull	r4, r5, r0, r3
   18a32:	fb03 5501 	mla	r5, r3, r1, r5
   18a36:	2264      	movs	r2, #100	; 0x64
   18a38:	2300      	movs	r3, #0
   18a3a:	4620      	mov	r0, r4
   18a3c:	4629      	mov	r1, r5
   18a3e:	f7e7 ff83 	bl	948 <__aeabi_uldivmod>
}
   18a42:	bd38      	pop	{r3, r4, r5, pc}

00018a44 <clear_event_registrations>:
	for (; last_registered >= 0; last_registered--) {
   18a44:	2314      	movs	r3, #20
{
   18a46:	b570      	push	{r4, r5, r6, lr}
   18a48:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   18a4c:	2400      	movs	r4, #0
   18a4e:	2601      	movs	r6, #1
	for (; last_registered >= 0; last_registered--) {
   18a50:	2900      	cmp	r1, #0
   18a52:	da00      	bge.n	18a56 <clear_event_registrations+0x12>
}
   18a54:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   18a56:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
   18a58:	6084      	str	r4, [r0, #8]
	switch (event->type) {
   18a5a:	f003 030f 	and.w	r3, r3, #15
   18a5e:	2b04      	cmp	r3, #4
   18a60:	d80b      	bhi.n	18a7a <clear_event_registrations+0x36>
   18a62:	fa06 f303 	lsl.w	r3, r6, r3
   18a66:	f013 0f16 	tst.w	r3, #22
   18a6a:	d006      	beq.n	18a7a <clear_event_registrations+0x36>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   18a6c:	6803      	ldr	r3, [r0, #0]
   18a6e:	b123      	cbz	r3, 18a7a <clear_event_registrations+0x36>
	node->prev->next = node->next;
   18a70:	6845      	ldr	r5, [r0, #4]
   18a72:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   18a74:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   18a76:	e9c0 4400 	strd	r4, r4, [r0]
   18a7a:	f382 8811 	msr	BASEPRI, r2
   18a7e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   18a82:	f04f 0320 	mov.w	r3, #32
   18a86:	f3ef 8211 	mrs	r2, BASEPRI
   18a8a:	f383 8811 	msr	BASEPRI, r3
   18a8e:	f3bf 8f6f 	isb	sy
	for (; last_registered >= 0; last_registered--) {
   18a92:	3901      	subs	r1, #1
   18a94:	3814      	subs	r0, #20
   18a96:	e7db      	b.n	18a50 <clear_event_registrations+0xc>

00018a98 <z_obj_validation_check>:
{
   18a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18a9a:	4614      	mov	r4, r2
   18a9c:	460e      	mov	r6, r1
	ret = z_object_validate(ko, otype, init);
   18a9e:	461a      	mov	r2, r3
   18aa0:	4621      	mov	r1, r4
{
   18aa2:	4607      	mov	r7, r0
	ret = z_object_validate(ko, otype, init);
   18aa4:	f7f8 fb5a 	bl	1115c <z_object_validate>
	if (ret != 0) {
   18aa8:	4605      	mov	r5, r0
   18aaa:	b120      	cbz	r0, 18ab6 <z_obj_validation_check+0x1e>
		z_dump_object_error(ret, obj, ko, otype);
   18aac:	4623      	mov	r3, r4
   18aae:	463a      	mov	r2, r7
   18ab0:	4631      	mov	r1, r6
   18ab2:	f7f8 fb03 	bl	110bc <z_dump_object_error>
}
   18ab6:	4628      	mov	r0, r5
   18ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018aba <signal_poll_event>:
	if (!event->poller) {
   18aba:	6883      	ldr	r3, [r0, #8]
{
   18abc:	b570      	push	{r4, r5, r6, lr}
   18abe:	4605      	mov	r5, r0
   18ac0:	460e      	mov	r6, r1
	if (!event->poller) {
   18ac2:	b1cb      	cbz	r3, 18af8 <signal_poll_event+0x3e>
	event->poller->is_polling = false;
   18ac4:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
   18ac6:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = false;
   18ac8:	711a      	strb	r2, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   18aca:	7b63      	ldrb	r3, [r4, #13]
   18acc:	079a      	lsls	r2, r3, #30
   18ace:	d513      	bpl.n	18af8 <signal_poll_event+0x3e>
	if (z_is_thread_timeout_expired(thread)) {
   18ad0:	6a23      	ldr	r3, [r4, #32]
   18ad2:	3302      	adds	r3, #2
   18ad4:	d01a      	beq.n	18b0c <signal_poll_event+0x52>
	z_unpend_thread(thread);
   18ad6:	4620      	mov	r0, r4
   18ad8:	f7ff fd9a 	bl	18610 <z_unpend_thread>
	z_set_thread_return_value(thread,
   18adc:	2e08      	cmp	r6, #8
   18ade:	bf0c      	ite	eq
   18ae0:	f06f 0303 	mvneq.w	r3, #3
   18ae4:	2300      	movne	r3, #0
   18ae6:	67a3      	str	r3, [r4, #120]	; 0x78
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   18ae8:	7b63      	ldrb	r3, [r4, #13]
   18aea:	06db      	lsls	r3, r3, #27
   18aec:	d104      	bne.n	18af8 <signal_poll_event+0x3e>
	if (!z_is_thread_ready(thread)) {
   18aee:	69a3      	ldr	r3, [r4, #24]
   18af0:	b913      	cbnz	r3, 18af8 <signal_poll_event+0x3e>
		z_add_thread_to_ready_q(thread);
   18af2:	4620      	mov	r0, r4
   18af4:	f7f6 ffe0 	bl	fab8 <z_add_thread_to_ready_q>
	event->state |= state;
   18af8:	68eb      	ldr	r3, [r5, #12]
   18afa:	f3c3 3204 	ubfx	r2, r3, #12, #5
   18afe:	4316      	orrs	r6, r2
	event->poller = NULL;
   18b00:	2000      	movs	r0, #0
	event->state |= state;
   18b02:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   18b06:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   18b08:	60eb      	str	r3, [r5, #12]
}
   18b0a:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   18b0c:	f06f 000a 	mvn.w	r0, #10
   18b10:	e7fb      	b.n	18b0a <signal_poll_event+0x50>

00018b12 <add_event>:
{
   18b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18b14:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   18b16:	e9d0 2300 	ldrd	r2, r3, [r0]
   18b1a:	4290      	cmp	r0, r2
   18b1c:	4604      	mov	r4, r0
   18b1e:	460d      	mov	r5, r1
   18b20:	d106      	bne.n	18b30 <add_event+0x1e>
	node->prev = list->tail;
   18b22:	6863      	ldr	r3, [r4, #4]
   18b24:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   18b26:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   18b28:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   18b2a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   18b2c:	6065      	str	r5, [r4, #4]
}
   18b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   18b30:	2b00      	cmp	r3, #0
   18b32:	d0f6      	beq.n	18b22 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   18b34:	689b      	ldr	r3, [r3, #8]
   18b36:	6839      	ldr	r1, [r7, #0]
   18b38:	6818      	ldr	r0, [r3, #0]
   18b3a:	f7ff fd20 	bl	1857e <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   18b3e:	2800      	cmp	r0, #0
   18b40:	d1ef      	bne.n	18b22 <add_event+0x10>
	return list->head == list;
   18b42:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18b44:	42b4      	cmp	r4, r6
   18b46:	d0ec      	beq.n	18b22 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   18b48:	2e00      	cmp	r6, #0
   18b4a:	d0ea      	beq.n	18b22 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   18b4c:	68b3      	ldr	r3, [r6, #8]
   18b4e:	6838      	ldr	r0, [r7, #0]
   18b50:	6819      	ldr	r1, [r3, #0]
   18b52:	f7ff fd14 	bl	1857e <z_is_t1_higher_prio_than_t2>
   18b56:	b128      	cbz	r0, 18b64 <add_event+0x52>
	node->prev = successor->prev;
   18b58:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   18b5a:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   18b5e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   18b60:	6075      	str	r5, [r6, #4]
			return;
   18b62:	e7e4      	b.n	18b2e <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   18b64:	6863      	ldr	r3, [r4, #4]
   18b66:	429e      	cmp	r6, r3
   18b68:	d0db      	beq.n	18b22 <add_event+0x10>
   18b6a:	6836      	ldr	r6, [r6, #0]
   18b6c:	e7ec      	b.n	18b48 <add_event+0x36>

00018b6e <z_handle_obj_poll_events>:
	return list->head == list;
   18b6e:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   18b70:	4298      	cmp	r0, r3
   18b72:	d009      	beq.n	18b88 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   18b74:	e9d3 2000 	ldrd	r2, r0, [r3]
   18b78:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   18b7a:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   18b7c:	2200      	movs	r2, #0
	node->prev = NULL;
   18b7e:	e9c3 2200 	strd	r2, r2, [r3]
		(void) signal_poll_event(poll_event, state);
   18b82:	4618      	mov	r0, r3
   18b84:	f7ff bf99 	b.w	18aba <signal_poll_event>
}
   18b88:	4770      	bx	lr

00018b8a <z_impl_k_poll_signal_init>:
	signal->signaled = 0U;
   18b8a:	2200      	movs	r2, #0
	list->tail = (sys_dnode_t *)list;
   18b8c:	e9c0 0000 	strd	r0, r0, [r0]
   18b90:	6082      	str	r2, [r0, #8]
	z_object_init(signal);
   18b92:	f000 b88c 	b.w	18cae <z_object_init>

00018b96 <validate_any_object>:
{
   18b96:	b538      	push	{r3, r4, r5, lr}
   18b98:	4605      	mov	r5, r0
	ko = z_object_find(obj);
   18b9a:	f7e7 fb31 	bl	200 <z_object_find>
	ret = z_object_validate(ko, K_OBJ_ANY, _OBJ_INIT_ANY);
   18b9e:	2201      	movs	r2, #1
   18ba0:	2100      	movs	r1, #0
	ko = z_object_find(obj);
   18ba2:	4604      	mov	r4, r0
	ret = z_object_validate(ko, K_OBJ_ANY, _OBJ_INIT_ANY);
   18ba4:	f7f8 fada 	bl	1115c <z_object_validate>
	if (ret != 0) {
   18ba8:	b128      	cbz	r0, 18bb6 <validate_any_object+0x20>
		z_dump_object_error(ret, obj, ko, K_OBJ_ANY);
   18baa:	4622      	mov	r2, r4
   18bac:	2300      	movs	r3, #0
   18bae:	4629      	mov	r1, r5
   18bb0:	f7f8 fa84 	bl	110bc <z_dump_object_error>
		return NULL;
   18bb4:	2400      	movs	r4, #0
}
   18bb6:	4620      	mov	r0, r4
   18bb8:	bd38      	pop	{r3, r4, r5, pc}

00018bba <wordlist_cb>:
	if (sys_bitfield_test_bit((mem_addr_t)&ko->perms, ctx->parent_id) &&
   18bba:	680b      	ldr	r3, [r1, #0]
{
   18bbc:	b530      	push	{r4, r5, lr}
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   18bbe:	095a      	lsrs	r2, r3, #5
	if (sys_bitfield_test_bit((mem_addr_t)&ko->perms, ctx->parent_id) &&
   18bc0:	1d04      	adds	r4, r0, #4
	u32_t temp = *(volatile u32_t *)addr;
   18bc2:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   18bc6:	f003 021f 	and.w	r2, r3, #31
	return temp & BIT(bit);
   18bca:	2301      	movs	r3, #1
   18bcc:	fa03 f202 	lsl.w	r2, r3, r2
   18bd0:	422a      	tst	r2, r5
   18bd2:	d00d      	beq.n	18bf0 <wordlist_cb+0x36>
   18bd4:	6800      	ldr	r0, [r0, #0]
   18bd6:	688a      	ldr	r2, [r1, #8]
   18bd8:	4290      	cmp	r0, r2
   18bda:	d009      	beq.n	18bf0 <wordlist_cb+0x36>
		sys_bitfield_set_bit((mem_addr_t)&ko->perms, ctx->child_id);
   18bdc:	684a      	ldr	r2, [r1, #4]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   18bde:	0951      	lsrs	r1, r2, #5
   18be0:	f002 021f 	and.w	r2, r2, #31
	u32_t temp = *(volatile u32_t *)addr;
   18be4:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
	*(volatile u32_t *)addr = temp | BIT(bit);
   18be8:	4093      	lsls	r3, r2
   18bea:	4303      	orrs	r3, r0
   18bec:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
}
   18bf0:	bd30      	pop	{r4, r5, pc}

00018bf2 <thread_index_get>:
{
   18bf2:	b508      	push	{r3, lr}
	ko = z_object_find(t);
   18bf4:	f7e7 fb04 	bl	200 <z_object_find>
	if (ko == NULL) {
   18bf8:	b108      	cbz	r0, 18bfe <thread_index_get+0xc>
	return ko->data;
   18bfa:	6880      	ldr	r0, [r0, #8]
}
   18bfc:	bd08      	pop	{r3, pc}
		return -1;
   18bfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18c02:	e7fb      	b.n	18bfc <thread_index_get+0xa>

00018c04 <unref_check>:
{
   18c04:	b530      	push	{r4, r5, lr}
   18c06:	f04f 0320 	mov.w	r3, #32
   18c0a:	f3ef 8511 	mrs	r5, BASEPRI
   18c0e:	f383 8811 	msr	BASEPRI, r3
   18c12:	f3bf 8f6f 	isb	sy
	sys_clear_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   18c16:	094c      	lsrs	r4, r1, #5
	sys_bitfield_clear_bit((mem_addr_t)&ko->perms, index);
   18c18:	3004      	adds	r0, #4
	*(volatile u32_t *)addr = temp & ~BIT(bit);
   18c1a:	2201      	movs	r2, #1
	u32_t temp = *(volatile u32_t *)addr;
   18c1c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
	sys_clear_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   18c20:	f001 011f 	and.w	r1, r1, #31
	*(volatile u32_t *)addr = temp & ~BIT(bit);
   18c24:	fa02 f101 	lsl.w	r1, r2, r1
   18c28:	ea23 0301 	bic.w	r3, r3, r1
   18c2c:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
	__asm__ volatile(
   18c30:	f385 8811 	msr	BASEPRI, r5
   18c34:	f3bf 8f6f 	isb	sy
}
   18c38:	bd30      	pop	{r4, r5, pc}

00018c3a <clear_perms_cb>:
	unref_check(ko, id);
   18c3a:	f7ff bfe3 	b.w	18c04 <unref_check>

00018c3e <z_thread_perms_set>:
{
   18c3e:	b510      	push	{r4, lr}
   18c40:	4604      	mov	r4, r0
	int index = thread_index_get(thread);
   18c42:	4608      	mov	r0, r1
   18c44:	f7ff ffd5 	bl	18bf2 <thread_index_get>
	if (index != -1) {
   18c48:	1c43      	adds	r3, r0, #1
   18c4a:	d00a      	beq.n	18c62 <z_thread_perms_set+0x24>
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   18c4c:	0941      	lsrs	r1, r0, #5
		sys_bitfield_set_bit((mem_addr_t)&ko->perms, index);
   18c4e:	1d22      	adds	r2, r4, #4
   18c50:	f000 001f 	and.w	r0, r0, #31
	u32_t temp = *(volatile u32_t *)addr;
   18c54:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
	*(volatile u32_t *)addr = temp | BIT(bit);
   18c58:	2301      	movs	r3, #1
   18c5a:	4083      	lsls	r3, r0
   18c5c:	4323      	orrs	r3, r4
   18c5e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   18c62:	bd10      	pop	{r4, pc}

00018c64 <z_thread_perms_clear>:
{
   18c64:	b570      	push	{r4, r5, r6, lr}
   18c66:	4604      	mov	r4, r0
	int index = thread_index_get(thread);
   18c68:	4608      	mov	r0, r1
   18c6a:	f7ff ffc2 	bl	18bf2 <thread_index_get>
	if (index != -1) {
   18c6e:	1c43      	adds	r3, r0, #1
	int index = thread_index_get(thread);
   18c70:	4601      	mov	r1, r0
	if (index != -1) {
   18c72:	d010      	beq.n	18c96 <z_thread_perms_clear+0x32>
	sys_clear_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   18c74:	0945      	lsrs	r5, r0, #5
		sys_bitfield_clear_bit((mem_addr_t)&ko->perms, index);
   18c76:	1d20      	adds	r0, r4, #4
   18c78:	f001 061f 	and.w	r6, r1, #31
	u32_t temp = *(volatile u32_t *)addr;
   18c7c:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
	*(volatile u32_t *)addr = temp & ~BIT(bit);
   18c80:	2201      	movs	r2, #1
   18c82:	40b2      	lsls	r2, r6
   18c84:	ea23 0302 	bic.w	r3, r3, r2
   18c88:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
		unref_check(ko, index);
   18c8c:	4620      	mov	r0, r4
}
   18c8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		unref_check(ko, index);
   18c92:	f7ff bfb7 	b.w	18c04 <unref_check>
}
   18c96:	bd70      	pop	{r4, r5, r6, pc}

00018c98 <z_impl_k_object_access_grant>:
{
   18c98:	b510      	push	{r4, lr}
   18c9a:	460c      	mov	r4, r1
	struct _k_object *ko = z_object_find(object);
   18c9c:	f7e7 fab0 	bl	200 <z_object_find>
	if (ko != NULL) {
   18ca0:	b120      	cbz	r0, 18cac <z_impl_k_object_access_grant+0x14>
		z_thread_perms_set(ko, thread);
   18ca2:	4621      	mov	r1, r4
}
   18ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_thread_perms_set(ko, thread);
   18ca8:	f7ff bfc9 	b.w	18c3e <z_thread_perms_set>
}
   18cac:	bd10      	pop	{r4, pc}

00018cae <z_object_init>:
{
   18cae:	b508      	push	{r3, lr}
	ko = z_object_find(obj);
   18cb0:	f7e7 faa6 	bl	200 <z_object_find>
	if (ko == NULL) {
   18cb4:	b118      	cbz	r0, 18cbe <z_object_init+0x10>
	ko->flags |= K_OBJ_FLAG_INITIALIZED;
   18cb6:	79c3      	ldrb	r3, [r0, #7]
   18cb8:	f043 0301 	orr.w	r3, r3, #1
   18cbc:	71c3      	strb	r3, [r0, #7]
}
   18cbe:	bd08      	pop	{r3, pc}

00018cc0 <z_object_recycle>:
{
   18cc0:	b510      	push	{r4, lr}
	struct _k_object *ko = z_object_find(obj);
   18cc2:	f7e7 fa9d 	bl	200 <z_object_find>
	if (ko != NULL) {
   18cc6:	4604      	mov	r4, r0
   18cc8:	b158      	cbz	r0, 18ce2 <z_object_recycle+0x22>
   18cca:	2300      	movs	r3, #0
   18ccc:	8083      	strh	r3, [r0, #4]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
   18cce:	f7f7 f9bb 	bl	10048 <z_impl_k_current_get>
		z_thread_perms_set(ko, k_current_get());
   18cd2:	4601      	mov	r1, r0
   18cd4:	4620      	mov	r0, r4
   18cd6:	f7ff ffb2 	bl	18c3e <z_thread_perms_set>
		ko->flags |= K_OBJ_FLAG_INITIALIZED;
   18cda:	79e3      	ldrb	r3, [r4, #7]
   18cdc:	f043 0301 	orr.w	r3, r3, #1
   18ce0:	71e3      	strb	r3, [r4, #7]
}
   18ce2:	bd10      	pop	{r4, pc}

00018ce4 <z_object_uninit>:
{
   18ce4:	b508      	push	{r3, lr}
	ko = z_object_find(obj);
   18ce6:	f7e7 fa8b 	bl	200 <z_object_find>
	if (ko == NULL) {
   18cea:	b118      	cbz	r0, 18cf4 <z_object_uninit+0x10>
	ko->flags &= ~K_OBJ_FLAG_INITIALIZED;
   18cec:	79c3      	ldrb	r3, [r0, #7]
   18cee:	f023 0301 	bic.w	r3, r3, #1
   18cf2:	71c3      	strb	r3, [r0, #7]
}
   18cf4:	bd08      	pop	{r3, pc}

00018cf6 <z_user_from_copy>:
	return user_copy(dst, src, size, false);
   18cf6:	2300      	movs	r3, #0
   18cf8:	f7f8 b96e 	b.w	10fd8 <user_copy>

00018cfc <z_user_to_copy>:
	return user_copy(dst, src, size, true);
   18cfc:	2301      	movs	r3, #1
   18cfe:	f7f8 b96b 	b.w	10fd8 <user_copy>

00018d02 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   18d02:	4770      	bx	lr
